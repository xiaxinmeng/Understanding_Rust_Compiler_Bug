{"sha": "ee6ff319272d415b5c36d7f45e6e08e8273d6b62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2ZmYzMTkyNzJkNDE1YjVjMzZkN2Y0NWU2ZTA4ZTgyNzNkNmI2Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-04T08:01:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-04T08:01:12Z"}, "message": "real.h (SIGNIFICAND_BITS): Add one more word.\n\n        * real.h (SIGNIFICAND_BITS): Add one more word.\n        (CONST_DOUBLE_FORMAT): Accomodate 6 words.\n        * real.c (times_pten): New.\n        (real_to_decimal, real_from_string): Use it.\n        (sticky_rshift_significand): Use & to find modulus.\n        (rshift_significand, lshift_significand): Likewise.\n        (do_divide): Apply sticky bit after normalization.\n        (real_to_decimal, real_to_hexadecimal): Fix sign of Inf and NaN.\n\nFrom-SVN: r57811", "tree": {"sha": "5a48f88c6ae305fbba651fd2c77019b022c4e3ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a48f88c6ae305fbba651fd2c77019b022c4e3ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee6ff319272d415b5c36d7f45e6e08e8273d6b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6ff319272d415b5c36d7f45e6e08e8273d6b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6ff319272d415b5c36d7f45e6e08e8273d6b62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6ff319272d415b5c36d7f45e6e08e8273d6b62/comments", "author": null, "committer": null, "parents": [{"sha": "311b75739b289a6657e90317009db81d88a300de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311b75739b289a6657e90317009db81d88a300de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/311b75739b289a6657e90317009db81d88a300de"}], "stats": {"total": 110, "additions": 68, "deletions": 42}, "files": [{"sha": "e0817795ab7d9972576ad60549f5d7124aff0618", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6ff319272d415b5c36d7f45e6e08e8273d6b62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6ff319272d415b5c36d7f45e6e08e8273d6b62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee6ff319272d415b5c36d7f45e6e08e8273d6b62", "patch": "@@ -1,3 +1,14 @@\n+2002-10-04  Richard Henderson  <rth@redhat.com>\n+\n+\t* real.h (SIGNIFICAND_BITS): Add one more word.\n+\t(CONST_DOUBLE_FORMAT): Accomodate 6 words.\n+\t* real.c (times_pten): New.\n+\t(real_to_decimal, real_from_string): Use it.\n+\t(sticky_rshift_significand): Use & to find modulus.\n+\t(rshift_significand, lshift_significand): Likewise.\n+\t(do_divide): Apply sticky bit after normalization.\n+\t(real_to_decimal, real_to_hexadecimal): Fix sign of Inf and NaN.\n+\n 2002-10-03  Andreas Jaeger  <aj@suse.de>\n \n \t* gengtype.c (adjust_field_rtx_def): Cast variables of type size_t\n@@ -205,7 +216,7 @@ Wed Oct  2 17:01:36 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \tfor TLS debug info to !DECL_EXTERNAL.\n \n 2002-10-01  Matt Thomas  <matt@3am-software.com>\n-            Jason Thorpe  <thorpej@wasabisystems.com>\n+\t    Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config.gcc (vax-*-netbsdelf*): Enable configuration.\n \t* config/elfos.h (PCC_BITFIELD_TYPE_MATTERS): Define only\n@@ -322,7 +333,7 @@ Wed Oct  2 17:01:36 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t* config/xtensa/xtensa.h (REG_CLASS_NAMES, REG_CLASS_CONTENTS):\n \tAdd new RL_REGS register class.\n \t(PREFERRED_RELOAD_CLASS, PREFERRED_OUTPUT_RELOAD_CLASS):\n-        Call xtensa_preferred_reload_class for both input and output reloads.\n+\tCall xtensa_preferred_reload_class for both input and output reloads.\n \t* config/xtensa/xtensa.c (xtensa_regno_to_class): Use new RL_REGS class.\n \t(xtensa_preferred_reload_class): Handle output reloads; use RL_REGS\n \tinstead of either AR_REGS or GR_REGS classes."}, {"sha": "075da40f78c3e2f279ac9f52236c6d7f2d02dbb1", "filename": "gcc/real.c", "status": "modified", "additions": 49, "deletions": 38, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6ff319272d415b5c36d7f45e6e08e8273d6b62/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6ff319272d415b5c36d7f45e6e08e8273d6b62/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=ee6ff319272d415b5c36d7f45e6e08e8273d6b62", "patch": "@@ -53,10 +53,17 @@\n    In addition, E must be large enough to hold the smallest supported\n    denormal number in a normalized form.\n \n-   Both of these requirements are easily satisfied.  The largest\n-   target significand is 113 bits; we store 128.  The smallest\n+   Both of these requirements are easily satisfied.  The largest target\n+   significand is 113 bits; we store at least 160.  The smallest\n    denormal number fits in 17 exponent bits; we store 29.\n \n+   Note that the decimal string conversion routines are sensitive to \n+   rounding error.  Since the raw arithmetic routines do not themselves\n+   have guard digits or rounding, the computation of 10**exp can\n+   accumulate more than a few digits of error.  The previous incarnation\n+   of real.c successfully used a 144 bit fraction; given the current\n+   layout of REAL_VALUE_TYPE we're forced to expand to at least 160 bits.\n+\n    Target floating point models that use base 16 instead of base 2\n    (i.e. IBM 370), are handled during round_for_format, in which we\n    canonicalize the exponent to be a multiple of 4 (log2(16)), and\n@@ -119,6 +126,7 @@ static void do_fix_trunc PARAMS ((REAL_VALUE_TYPE *,\n \n static const REAL_VALUE_TYPE * ten_to_ptwo PARAMS ((int));\n static const REAL_VALUE_TYPE * real_digit PARAMS ((int));\n+static void times_pten PARAMS ((REAL_VALUE_TYPE *, int));\n \n static void round_for_format PARAMS ((const struct real_format *,\n \t\t\t\t      REAL_VALUE_TYPE *));\n@@ -186,7 +194,7 @@ sticky_rshift_significand (r, a, n)\n     {\n       for (i = 0, ofs = n / HOST_BITS_PER_LONG; i < ofs; ++i)\n \tsticky |= a->sig[i];\n-      n -= ofs * HOST_BITS_PER_LONG;\n+      n &= HOST_BITS_PER_LONG - 1;\n     }\n \n   if (n != 0)\n@@ -222,7 +230,7 @@ rshift_significand (r, a, n)\n {\n   unsigned int i, ofs = n / HOST_BITS_PER_LONG;\n \n-  n -= ofs * HOST_BITS_PER_LONG;\n+  n &= HOST_BITS_PER_LONG - 1;\n   if (n != 0)\n     {\n       for (i = 0; i < SIGSZ; ++i)\n@@ -253,7 +261,7 @@ lshift_significand (r, a, n)\n {\n   unsigned int i, ofs = n / HOST_BITS_PER_LONG;\n \n-  n -= ofs * HOST_BITS_PER_LONG;\n+  n &= HOST_BITS_PER_LONG - 1;\n   if (n == 0)\n     {\n       for (i = 0; ofs + i < SIGSZ; ++i)\n@@ -888,10 +896,10 @@ do_divide (r, a, b)\n   rr->exp = exp;\n \n   inexact = div_significands (rr, a, b);\n-  rr->sig[0] |= inexact;\n \n   /* Re-normalize the result.  */\n   normalize (rr);\n+  rr->sig[0] |= inexact;\n \n   if (rr != r)\n     *r = t;\n@@ -1416,11 +1424,11 @@ real_to_decimal (str, r_orig, digits)\n     case rvc_normal:\n       break;\n     case rvc_inf:\n-      strcpy (str, (r.sign ? \"+Inf\" : \"-Inf\"));\n+      strcpy (str, (r.sign ? \"-Inf\" : \"+Inf\"));\n       return;\n     case rvc_nan:\n       /* ??? Print the significand as well, if not canonical?  */\n-      strcpy (str, (r.sign ? \"+NaN\" : \"-NaN\"));\n+      strcpy (str, (r.sign ? \"-NaN\" : \"+NaN\"));\n       return;\n     default:\n       abort ();\n@@ -1441,21 +1449,7 @@ real_to_decimal (str, r_orig, digits)\n   dec_exp = r.exp * M_LOG10_2;\n   \n   /* Scale the number such that it is in [1, 10).  */\n-  if (dec_exp > 0)\n-    {\n-      int i;\n-      for (i = EXP_BITS - 1; i >= 0; --i)\n-\tif (dec_exp & (1 << i))\n-\t  do_divide (&r, &r, ten_to_ptwo (i));\n-    }\n-  else if (dec_exp < 0)\n-    {\n-      int i, pos_exp = -(--dec_exp);\n-\n-      for (i = EXP_BITS - 1; i >= 0; --i)\n-\tif (pos_exp & (1 << i))\n-\t  do_multiply (&r, &r, ten_to_ptwo (i));\n-    }\n+  times_pten (&r, (dec_exp > 0 ? -dec_exp : -(--dec_exp)));\n \n   /* Assert that the number is in the proper range.  Round-off can\n      prevent the above from working exactly.  */\n@@ -1545,11 +1539,11 @@ real_to_hexadecimal (str, r, digits)\n     case rvc_normal:\n       break;\n     case rvc_inf:\n-      strcpy (str, (r->sign ? \"+Inf\" : \"-Inf\"));\n+      strcpy (str, (r->sign ? \"-Inf\" : \"+Inf\"));\n       return;\n     case rvc_nan:\n       /* ??? Print the significand as well, if not canonical?  */\n-      strcpy (str, (r->sign ? \"+NaN\" : \"-NaN\"));\n+      strcpy (str, (r->sign ? \"-NaN\" : \"+NaN\"));\n       return;\n     default:\n       abort ();\n@@ -1755,19 +1749,8 @@ real_from_string (r, str)\n \t  exp += d;\n \t}\n \n-      if (exp < 0)\n-\t{\n-\t  exp = -exp;\n-\t  for (d = 0; d < EXP_BITS; ++d)\n-\t    if (exp & (1 << d))\n-\t      do_divide (r, r, ten_to_ptwo (d));\n-\t}\n-      else if (exp > 0)\n-\t{\n-\t  for (d = 0; d < EXP_BITS; ++d)\n-\t    if (exp & (1 << d))\n-\t      do_multiply (r, r, ten_to_ptwo (d));\n-\t}\n+      if (exp)\n+        times_pten (r, exp);\n     }\n \n   r->sign = sign;\n@@ -1900,6 +1883,34 @@ real_digit (n)\n   return &num[n];\n }\n \n+/* Multiply R by 10**EXP.  */\n+\n+static void\n+times_pten (r, exp)\n+     REAL_VALUE_TYPE *r;\n+     int exp;\n+{\n+  REAL_VALUE_TYPE pten, *rr;\n+  bool negative = (exp < 0);\n+  int i;\n+\n+  if (negative)\n+    {\n+      exp = -exp;\n+      pten = *real_digit (1);\n+      rr = &pten;\n+    }\n+  else\n+    rr = r;\n+\n+  for (i = 0; exp > 0; ++i, exp >>= 1)\n+    if (exp & 1)\n+      do_multiply (rr, rr, ten_to_ptwo (i));\n+\n+  if (negative)\n+    do_divide (r, r, &pten);\n+}\n+\n /* Fills R with +Inf.  */\n \n void"}, {"sha": "fc84a109281a2ad96acf32cfecdcfdddfd5614e1", "filename": "gcc/real.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6ff319272d415b5c36d7f45e6e08e8273d6b62/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6ff319272d415b5c36d7f45e6e08e8273d6b62/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=ee6ff319272d415b5c36d7f45e6e08e8273d6b62", "patch": "@@ -34,7 +34,7 @@ enum real_value_class {\n   rvc_nan\n };\n \n-#define SIGNIFICAND_BITS\t128\n+#define SIGNIFICAND_BITS\t(128 + HOST_BITS_PER_LONG)\n #define EXP_BITS\t\t(32 - 3)\n #define MAX_EXP\t\t\t((1 << (EXP_BITS - 1)) - 1)\n #define SIGSZ\t\t\t(SIGNIFICAND_BITS / HOST_BITS_PER_LONG)\n@@ -88,7 +88,11 @@ extern char test_real_width\n #    if REAL_WIDTH == 5\n #     define CONST_DOUBLE_FORMAT \"wwwww\"\n #    else\n-      #error \"REAL_WIDTH > 5 not supported\"\n+#     if REAL_WIDTH == 6\n+#      define CONST_DOUBLE_FORMAT \"wwwwww\"\n+#     else\n+       #error \"REAL_WIDTH > 6 not supported\"\n+#     endif\n #    endif\n #   endif\n #  endif"}]}