{"sha": "47f7905440afb294e8b6486196bc961527425739", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmNzkwNTQ0MGFmYjI5NGU4YjY0ODYxOTZiYzk2MTUyNzQyNTczOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-06-26T14:38:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-06-26T14:38:23Z"}, "message": "Add new helper traits for signed/unsigned integer types\n\nReuse the __is_one_of alias in additional places, and define traits to\ncheck for signed/unsigned integer types so we don't have to duplicate\nthose checks elsewhere.\n\nThe additional overloads for std::byte in <bit> were reviewed by LEWG\nand considered undesirable, so this patch removes them.\n\n\t* include/bits/fs_path.h (path::__is_encoded_char): Use __is_one_of.\n\t* include/std/bit (_If_is_unsigned_integer_type): Remove.\n\t(_If_is_unsigned_integer): Use __is_unsigned_integer.\n\t(rotl(byte, unsigned), rotr(byte, unsigned), countl_zero(byte))\n\t(countl_one(byte), countr_zero(byte), countr_one(byte))\n\t(popcount(byte), ispow2(byte), ceil2(byte), floor2(byte))\n\t(log2p1(byte)): Remove.\n\t* include/std/charconv (__detail::__is_one_of): Move to <type_traits>.\n\t(__detail::__is_int_to_chars_type): Remove.\n\t(__detail::__integer_to_chars_result_type): Use __is_signed_integer\n\tand __is_unsigned_integer.\n\t* include/std/type_traits (__is_one_of): Move here from <charconv>.\n\t(__is_signed_integer, __is_unsigned_integer): New helpers.\n\t* testsuite/26_numerics/bit/bit.pow.two/ceil2.cc: Remove test for\n\tstd::byte overload.\n\t* testsuite/26_numerics/bit/bit.pow.two/floor2.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/ispow2.cc: Likewise.\n\t* testsuite/26_numerics/bit/bit.pow.two/log2p1.cc: Likewise.\n\t* testsuite/26_numerics/bit/bitops.count/countl_one.cc: Likewise.\n\t* testsuite/26_numerics/bit/bitops.count/countl_zero.cc: Likewise.\n\t* testsuite/26_numerics/bit/bitops.count/countr_one.cc: Likewise.\n\t* testsuite/26_numerics/bit/bitops.count/countr_zero.cc: Likewise.\n\t* testsuite/26_numerics/bit/bitops.count/popcount.cc: Likewise.\n\t* testsuite/26_numerics/bit/bitops.rot/rotl.cc: Likewise.\n\t* testsuite/26_numerics/bit/bitops.rot/rotr.cc: Likewise.\n\nFrom-SVN: r272695", "tree": {"sha": "72df26fa6ab612435a57d0f06017fbf18b87847f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72df26fa6ab612435a57d0f06017fbf18b87847f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47f7905440afb294e8b6486196bc961527425739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f7905440afb294e8b6486196bc961527425739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47f7905440afb294e8b6486196bc961527425739", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47f7905440afb294e8b6486196bc961527425739/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cbb1b721e650036a49dc0013397fee34af12800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cbb1b721e650036a49dc0013397fee34af12800", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cbb1b721e650036a49dc0013397fee34af12800"}], "stats": {"total": 352, "additions": 127, "deletions": 225}, "files": [{"sha": "88e8ed65e1066e4ad26cc188026dcf98df88f542", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -1,3 +1,31 @@\n+2019-06-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (path::__is_encoded_char): Use __is_one_of.\n+\t* include/std/bit (_If_is_unsigned_integer_type): Remove.\n+\t(_If_is_unsigned_integer): Use __is_unsigned_integer.\n+\t(rotl(byte, unsigned), rotr(byte, unsigned), countl_zero(byte))\n+\t(countl_one(byte), countr_zero(byte), countr_one(byte))\n+\t(popcount(byte), ispow2(byte), ceil2(byte), floor2(byte))\n+\t(log2p1(byte)): Remove.\n+\t* include/std/charconv (__detail::__is_one_of): Move to <type_traits>.\n+\t(__detail::__is_int_to_chars_type): Remove.\n+\t(__detail::__integer_to_chars_result_type): Use __is_signed_integer\n+\tand __is_unsigned_integer.\n+\t* include/std/type_traits (__is_one_of): Move here from <charconv>.\n+\t(__is_signed_integer, __is_unsigned_integer): New helpers.\n+\t* testsuite/26_numerics/bit/bit.pow.two/ceil2.cc: Remove test for\n+\tstd::byte overload.\n+\t* testsuite/26_numerics/bit/bit.pow.two/floor2.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/ispow2.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bit.pow.two/log2p1.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bitops.count/countl_one.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bitops.count/countl_zero.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bitops.count/countr_one.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bitops.count/countr_zero.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bitops.count/popcount.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bitops.rot/rotl.cc: Likewise.\n+\t* testsuite/26_numerics/bit/bitops.rot/rotr.cc: Likewise.\n+\n 2019-06-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/numeric (midpoint(T, T)): Avoid std::abs in constexpr"}, {"sha": "e1083acf30f54e558c4adaac2a09420590ae800d", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -66,15 +66,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   /// A filesystem path.\n   class path\n   {\n-    template<typename _CharT, typename _Ch = remove_const_t<_CharT>>\n-      using __is_encoded_char\n-\t= __or_<is_same<_Ch, char>,\n+    template<typename _CharT>\n+      using __is_encoded_char = __is_one_of<remove_const_t<_CharT>,\n+\t    char,\n #ifdef _GLIBCXX_USE_CHAR8_T\n-\t\tis_same<_Ch, char8_t>,\n+\t    char8_t,\n+#endif\n+#if _GLIBCXX_USE_WCHAR_T\n+\t    wchar_t,\n #endif\n-\t\tis_same<_Ch, wchar_t>,\n-\t\tis_same<_Ch, char16_t>,\n-\t\tis_same<_Ch, char32_t>>;\n+\t    char16_t, char32_t>;\n \n     template<typename _Iter,\n \t     typename _Iter_traits = std::iterator_traits<_Iter>>"}, {"sha": "dd33dcfdcf6f97f2db04e42d85eed5ab6f6688ed", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -222,19 +222,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201703L\n \n-  template<typename _Tp, typename _Up, bool = is_integral_v<_Tp>>\n-    struct _If_is_unsigned_integer_type { };\n-\n-  template<typename _Up>\n-    struct _If_is_unsigned_integer_type<bool, _Up, true> { };\n-\n-  template<typename _Tp, typename _Up>\n-    struct _If_is_unsigned_integer_type<_Tp, _Up, true>\n-    : enable_if<is_same_v<_Tp, make_unsigned_t<_Tp>>, _Up> { };\n-\n   template<typename _Tp, typename _Up = _Tp>\n     using _If_is_unsigned_integer\n-      = typename _If_is_unsigned_integer_type<remove_cv_t<_Tp>, _Up>::type;\n+      = enable_if_t<__is_unsigned_integer<_Tp>::value, _Up>;\n \n #if ! __STRICT_ANSI__\n   // [bitops.rot], rotating\n@@ -299,54 +289,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     log2p1(_Tp __x) noexcept\n     { return std::__log2p1(__x); }\n \n-#if ! __STRICT_ANSI__\n-  enum class byte : unsigned char;\n-\n-  constexpr byte\n-  rotl(byte __x, unsigned int __s) noexcept\n-  { return (byte)std::__rotl((unsigned char)__x, __s); }\n-\n-  constexpr byte\n-  rotr(byte __x, unsigned int __s) noexcept\n-  { return (byte)std::__rotr((unsigned char)__x, __s); }\n-\n-  constexpr int\n-  countl_zero(byte __x) noexcept\n-  { return std::__countl_zero((unsigned char)__x); }\n-\n-  constexpr int\n-  countl_one(byte __x) noexcept\n-  { return std::__countl_one((unsigned char)__x); }\n-\n-  constexpr int\n-  countr_zero(byte __x) noexcept\n-  { return std::__countr_zero((unsigned char)__x); }\n-\n-  constexpr int\n-  countr_one(byte __x) noexcept\n-  { return std::__countr_one((unsigned char)__x); }\n-\n-  constexpr int\n-  popcount(byte __x) noexcept\n-  { return std::__popcount((unsigned char)__x); }\n-\n-  constexpr bool\n-  ispow2(byte __x) noexcept\n-  { return std::__ispow2((unsigned char)__x); }\n-\n-  constexpr byte\n-  ceil2(byte __x) noexcept\n-  { return (byte)std::__ceil2((unsigned char)__x); }\n-\n-  constexpr byte\n-  floor2(byte __x) noexcept\n-  { return (byte)std::__floor2((unsigned char)__x); }\n-\n-  constexpr byte\n-  log2p1(byte __x) noexcept\n-  { return (byte)std::__log2p1((unsigned char)__x); }\n-#endif\n-\n #endif // C++2a\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "6a3399764ba753fa13bc93346a5a93eb95fcb2d9", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -61,23 +61,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace __detail\n {\n-  template<typename _Tp, typename... _Types>\n-    using __is_one_of = __or_<is_same<_Tp, _Types>...>;\n-\n-  template<typename _Tp>\n-    using __is_int_to_chars_type = __and_<is_integral<_Tp>,\n-\t  __not_<__is_one_of<_Tp, bool, char16_t, char32_t\n-#if _GLIBCXX_USE_WCHAR_T\n-\t  , wchar_t\n-#endif\n-#if _GLIBCXX_USE_CHAR8_T\n-\t  , char8_t\n-#endif\n-\t    >>>;\n-\n   template<typename _Tp>\n     using __integer_to_chars_result_type\n-      = enable_if_t<__is_int_to_chars_type<_Tp>::value, to_chars_result>;\n+      = enable_if_t<__or_v<__is_signed_integer<_Tp>,\n+\t\t\t   __is_unsigned_integer<_Tp>,\n+\t\t\t   is_same<char, remove_cv_t<_Tp>>>,\n+\t\t    to_chars_result>;\n \n   // Pick an unsigned type of suitable size. This is used to reduce the\n   // number of specializations of __to_chars_len, __to_chars etc. that\n@@ -555,7 +544,10 @@ namespace __detail\n \n   template<typename _Tp>\n     using __integer_from_chars_result_type\n-      = enable_if_t<__is_int_to_chars_type<_Tp>::value, from_chars_result>;\n+      = enable_if_t<__or_v<__is_signed_integer<_Tp>,\n+\t\t\t   __is_unsigned_integer<_Tp>,\n+\t\t\t   is_same<char, remove_cv_t<_Tp>>>,\n+\t\t    from_chars_result>;\n \n } // namespace __detail\n "}, {"sha": "b07291706ac9bea3b98af51245a29f65e273dcfd", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -659,6 +659,51 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type\n     { };\n \n+  template<typename, typename>\n+    struct is_same;\n+\n+  template<typename _Tp, typename... _Types>\n+    using __is_one_of = __or_<is_same<_Tp, _Types>...>;\n+\n+  // Check if a type is one of the signed integer types.\n+  template<typename _Tp>\n+    using __is_signed_integer = __is_one_of<typename remove_cv<_Tp>::type,\n+\t  signed char, signed short, signed int, signed long,\n+\t  signed long long\n+#if defined(__GLIBCXX_TYPE_INT_N_0)\n+\t  , signed __GLIBCXX_TYPE_INT_N_0\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_1)\n+\t  , signed __GLIBCXX_TYPE_INT_N_1\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_2)\n+\t  , signed __GLIBCXX_TYPE_INT_N_2\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+\t  , signed __GLIBCXX_TYPE_INT_N_3\n+#endif\n+\t  >;\n+\n+  // Check if a type is one of the unsigned integer types.\n+  template<typename _Tp>\n+    using __is_unsigned_integer = __is_one_of<typename remove_cv<_Tp>::type,\n+\t  unsigned char, unsigned short, unsigned int, unsigned long,\n+\t  unsigned long long\n+#if defined(__GLIBCXX_TYPE_INT_N_0)\n+\t  , unsigned __GLIBCXX_TYPE_INT_N_0\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_1)\n+\t  , unsigned __GLIBCXX_TYPE_INT_N_1\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_2)\n+\t  , unsigned __GLIBCXX_TYPE_INT_N_2\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+\t  , unsigned __GLIBCXX_TYPE_INT_N_3\n+#endif\n+\t  >;\n+\n+\n   // Utility to detect referenceable types ([defns.referenceable]).\n \n   template<typename _Tp>"}, {"sha": "84f3ac156c3f02be80c4ebf8690cc18dfa8b3fab", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/ceil2.cc", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fceil2.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -86,18 +86,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-static_assert( std::ceil2(std::byte{0}) == std::byte{1} );\n-static_assert( std::ceil2(std::byte{1}) == std::byte{1} );\n-static_assert( std::ceil2(std::byte{2}) == std::byte{2} );\n-static_assert( std::ceil2(std::byte{3}) == std::byte{4} );\n-static_assert( std::ceil2(std::byte{100}) == std::byte{128} );\n-static_assert( std::ceil2(std::byte{128}) == std::byte{128} );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -114,3 +102,10 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_3)0 ) );\n+static_assert( test( (__GLIBCXX_TYPE_INT_N_3)0 ).did_not_match() );\n+#endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "aff9138650eb92bb577896f0f74a85747ed98ed5", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/floor2.cc", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Ffloor2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Ffloor2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Ffloor2.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -78,19 +78,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-static_assert( std::floor2(std::byte{0}) == std::byte{0} );\n-static_assert( std::floor2(std::byte{1}) == std::byte{1} );\n-static_assert( std::floor2(std::byte{2}) == std::byte{2} );\n-static_assert( std::floor2(std::byte{3}) == std::byte{2} );\n-static_assert( std::floor2(std::byte{100}) == std::byte{64} );\n-static_assert( std::floor2(std::byte{128}) == std::byte{128} );\n-static_assert( std::floor2(std::byte{255}) == std::byte{128} );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -107,3 +94,6 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "869197627d4ebda0ddf15943612f9354a3b2fd32", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/ispow2.cc", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fispow2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fispow2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Fispow2.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -126,19 +126,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-static_assert( std::ispow2(std::byte{0}) == false );\n-static_assert( std::ispow2(std::byte{1}) == true );\n-static_assert( std::ispow2(std::byte{2}) == true );\n-static_assert( std::ispow2(std::byte{3}) == false );\n-static_assert( std::ispow2(std::byte{100}) == false );\n-static_assert( std::ispow2(std::byte{128}) == true );\n-static_assert( std::ispow2(std::byte{255}) == false );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -155,3 +142,6 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "aeb5486b90921833198f831b0d0b2ee1310167df", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.pow.two/log2p1.cc", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Flog2p1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Flog2p1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.pow.two%2Flog2p1.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -78,19 +78,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-static_assert( std::log2p1(std::byte{0}) == std::byte{0} );\n-static_assert( std::log2p1(std::byte{1}) == std::byte{1} );\n-static_assert( std::log2p1(std::byte{2}) == std::byte{2} );\n-static_assert( std::log2p1(std::byte{3}) == std::byte{2} );\n-static_assert( std::log2p1(std::byte{100}) == std::byte{7} );\n-static_assert( std::log2p1(std::byte{128}) == std::byte{8} );\n-static_assert( std::log2p1(std::byte{255}) == std::byte{8} );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -107,3 +94,6 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "50b681c00900f5e7a9d0e62b94b3b0864219456b", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bitops.count/countl_one.cc", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountl_one.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountl_one.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountl_one.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -73,16 +73,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-constexpr int bits = std::numeric_limits<unsigned char>::digits;\n-static_assert( std::countl_one(std::byte{0}) == 0 );\n-static_assert( std::countl_one(~std::byte{0}) == bits );\n-static_assert( std::countl_one(~std::byte{0} ^ std::byte{7}) == bits - 3 );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -99,3 +89,6 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "8c8a13fed34e02bcbc45828e6f2345175def674f", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bitops.count/countl_zero.cc", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountl_zero.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountl_zero.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountl_zero.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -70,20 +70,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-constexpr int bits = std::numeric_limits<unsigned char>::digits;\n-static_assert( std::countl_zero(std::byte{0}) == bits );\n-static_assert( std::countl_zero(std::byte{0x01}) == bits - 1 );\n-static_assert( std::countl_zero(std::byte{0x02}) == bits - 2 );\n-static_assert( std::countl_zero(std::byte{0x03}) == bits - 2 );\n-static_assert( std::countl_zero(std::byte{0x30}) == 2 );\n-static_assert( std::countl_zero(std::byte{0x40}) == 1 );\n-static_assert( std::countl_zero(std::byte{0x41}) == 1 );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -100,3 +86,6 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "16c98579316ec4248d0b5434eac68b826e8a1239", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bitops.count/countr_one.cc", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountr_one.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountr_one.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountr_one.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -72,20 +72,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-constexpr int bits = std::numeric_limits<unsigned char>::digits;\n-static_assert( std::countr_one(std::byte{0}) == 0 );\n-static_assert( std::countr_one(std::byte{0x01}) == 1 );\n-static_assert( std::countr_one(std::byte{0x02}) == 0 );\n-static_assert( std::countr_one(std::byte{0x03}) == 2 );\n-static_assert( std::countr_one(std::byte{0x30}) == 0 );\n-static_assert( std::countr_one(std::byte{0x0f}) == 4 );\n-static_assert( std::countr_one(std::byte{0xff}) == 8 );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -102,3 +88,6 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "0e1970b2af6903f6f92eb6ae90899bb8e598373b", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bitops.count/countr_zero.cc", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountr_zero.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountr_zero.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fcountr_zero.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -71,20 +71,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-constexpr int bits = std::numeric_limits<unsigned char>::digits;\n-static_assert( std::countr_zero(std::byte{0}) == bits );\n-static_assert( std::countr_zero(std::byte{0x01}) == 0 );\n-static_assert( std::countr_zero(std::byte{0x02}) == 1 );\n-static_assert( std::countr_zero(std::byte{0x03}) == 0 );\n-static_assert( std::countr_zero(std::byte{0x30}) == 4 );\n-static_assert( std::countr_zero(std::byte{0x40}) == 6 );\n-static_assert( std::countr_zero(std::byte{0x41}) == 0 );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -101,3 +87,6 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "07b8c6ac4e254956410c856577542c51150a90d9", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bitops.count/popcount.cc", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fpopcount.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fpopcount.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.count%2Fpopcount.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -74,20 +74,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-static_assert( std::popcount(std::byte{0x00}) == 0 );\n-static_assert( std::popcount(std::byte{0x01}) == 1 );\n-static_assert( std::popcount(std::byte{0x02}) == 1 );\n-static_assert( std::popcount(std::byte{0x03}) == 2 );\n-static_assert( std::popcount(std::byte{0x30}) == 2 );\n-static_assert( std::popcount(std::byte{0x40}) == 1 );\n-static_assert( std::popcount(std::byte{0x41}) == 2 );\n-static_assert( std::popcount(std::byte{0xff}) == 8 );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -104,3 +90,6 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "2d97ae8c46574a85ad3af8e0527fd74ab4d19570", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bitops.rot/rotl.cc", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.rot%2Frotl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.rot%2Frotl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.rot%2Frotl.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -86,19 +86,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-static_assert( std::rotl(std::byte{0}, 4) == std::byte{0} );\n-static_assert( std::rotl(std::byte{0x01}, 4) == std::byte{0x10} );\n-static_assert( std::rotl(std::byte{0x02}, 3) == std::byte{0x10} );\n-static_assert( std::rotl(std::byte{0x03}, 2) == std::byte{0x0c} );\n-static_assert( std::rotl(std::byte{0x30}, 2) == std::byte{0xc0} );\n-static_assert( std::rotl(std::byte{0x40}, 1) == std::byte{0x80} );\n-static_assert( std::rotl(std::byte{0x41}, 9) == std::byte{0x82} );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -115,3 +102,6 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}, {"sha": "c41c24d816a54d577a2f98a359c3990cf21e977e", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bitops.rot/rotr.cc", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.rot%2Frotr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47f7905440afb294e8b6486196bc961527425739/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.rot%2Frotr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbitops.rot%2Frotr.cc?ref=47f7905440afb294e8b6486196bc961527425739", "patch": "@@ -88,19 +88,6 @@ static_assert( test( X{} ).did_not_match() );\n enum E : unsigned { e };\n static_assert( test( e ).did_not_match() );\n \n-#ifndef __STRICT_ANSI__\n-#include <cstddef>\n-static_assert( std::rotr(std::byte{0}, 4) == std::byte{0} );\n-static_assert( std::rotr(std::byte{0x01}, 4) == std::byte{0x10} );\n-static_assert( std::rotr(std::byte{0x02}, 3) == std::byte{0x40} );\n-static_assert( std::rotr(std::byte{0x03}, 2) == std::byte{0xc0} );\n-static_assert( std::rotr(std::byte{0x30}, 2) == std::byte{0x0c} );\n-static_assert( std::rotr(std::byte{0x40}, 1) == std::byte{0x20} );\n-static_assert( std::rotr(std::byte{0x41}, 9) == std::byte{0xa0} );\n-#else\n-static_assert( test( (std::byte)0 ).did_not_match() );\n-#endif\n-\n #if !defined(__STRICT_ANSI__) && defined _GLIBCXX_USE_INT128\n static_assert( test( (unsigned __int128)0 ) );\n static_assert( test( (__int128)0 ).did_not_match() );\n@@ -117,3 +104,6 @@ static_assert( test( (__GLIBCXX_TYPE_INT_N_1)0 ).did_not_match() );\n static_assert( test( (unsigned __GLIBCXX_TYPE_INT_N_2)0 ) );\n static_assert( test( (__GLIBCXX_TYPE_INT_N_2)0 ).did_not_match() );\n #endif\n+\n+#include <cstddef>\n+static_assert( test( (std::byte)0 ).did_not_match() );"}]}