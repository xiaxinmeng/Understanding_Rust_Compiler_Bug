{"sha": "09f08fef71fb776a1d850a7b854c7ccf8a3d6c11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlmMDhmZWY3MWZiNzc2YTFkODUwYTdiODU0YzdjY2Y4YTNkNmMxMQ==", "commit": {"author": {"name": "Moritz Sichert", "email": "sichert@in.tum.de", "date": "2021-03-23T15:47:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-23T16:34:42Z"}, "message": "libstdc++: Avoid accidental ADL when calling make_reverse_iterator\n\nstd::ranges::reverse_view uses make_reverse_iterator in its\nimplementation as described in [range.reverse.view]. This accidentally\nallows ADL as an unqualified name is used in the call. According to\n[contents], however, this should be treated as a qualified lookup into\nthe std namespace.\n\nThis leads to errors due to ambiguous name lookups when another\nmake_reverse_iterator function is found via ADL.\n\nlibstdc++-v3/Changelog:\n\n\t* include/std/ranges (reverse_view::begin, reverse_view::end):\n\tQualify make_reverse_iterator calls to avoid ADL.\n\t* testsuite/std/ranges/adaptors/reverse.cc: Test that\n\tviews::reverse works when make_reverse_iterator is defined\n\tin an associated namespace.", "tree": {"sha": "f051c588b5bae5a173ee331a864f4fb2dd4ccd67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f051c588b5bae5a173ee331a864f4fb2dd4ccd67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09f08fef71fb776a1d850a7b854c7ccf8a3d6c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f08fef71fb776a1d850a7b854c7ccf8a3d6c11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09f08fef71fb776a1d850a7b854c7ccf8a3d6c11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f08fef71fb776a1d850a7b854c7ccf8a3d6c11/comments", "author": {"login": "MoritzS", "id": 1687843, "node_id": "MDQ6VXNlcjE2ODc4NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1687843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MoritzS", "html_url": "https://github.com/MoritzS", "followers_url": "https://api.github.com/users/MoritzS/followers", "following_url": "https://api.github.com/users/MoritzS/following{/other_user}", "gists_url": "https://api.github.com/users/MoritzS/gists{/gist_id}", "starred_url": "https://api.github.com/users/MoritzS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MoritzS/subscriptions", "organizations_url": "https://api.github.com/users/MoritzS/orgs", "repos_url": "https://api.github.com/users/MoritzS/repos", "events_url": "https://api.github.com/users/MoritzS/events{/privacy}", "received_events_url": "https://api.github.com/users/MoritzS/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b1f841ce0ccf30eda7896ba5ab0aa94c72307b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1f841ce0ccf30eda7896ba5ab0aa94c72307b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b1f841ce0ccf30eda7896ba5ab0aa94c72307b2"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "adbc6d7b274ef4e9528e10c5a75235bc9f534f20", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09f08fef71fb776a1d850a7b854c7ccf8a3d6c11/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09f08fef71fb776a1d850a7b854c7ccf8a3d6c11/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=09f08fef71fb776a1d850a7b854c7ccf8a3d6c11", "patch": "@@ -2958,29 +2958,29 @@ namespace views\n       {\n \tif constexpr (_S_needs_cached_begin)\n \t  if (_M_cached_begin._M_has_value())\n-\t    return make_reverse_iterator(_M_cached_begin._M_get(_M_base));\n+\t    return std::make_reverse_iterator(_M_cached_begin._M_get(_M_base));\n \n \tauto __it = ranges::next(ranges::begin(_M_base), ranges::end(_M_base));\n \tif constexpr (_S_needs_cached_begin)\n \t  _M_cached_begin._M_set(_M_base, __it);\n-\treturn make_reverse_iterator(std::move(__it));\n+\treturn std::make_reverse_iterator(std::move(__it));\n       }\n \n       constexpr auto\n       begin() requires common_range<_Vp>\n-      { return make_reverse_iterator(ranges::end(_M_base)); }\n+      { return std::make_reverse_iterator(ranges::end(_M_base)); }\n \n       constexpr auto\n       begin() const requires common_range<const _Vp>\n-      { return make_reverse_iterator(ranges::end(_M_base)); }\n+      { return std::make_reverse_iterator(ranges::end(_M_base)); }\n \n       constexpr reverse_iterator<iterator_t<_Vp>>\n       end()\n-      { return make_reverse_iterator(ranges::begin(_M_base)); }\n+      { return std::make_reverse_iterator(ranges::begin(_M_base)); }\n \n       constexpr auto\n       end() const requires common_range<const _Vp>\n-      { return make_reverse_iterator(ranges::begin(_M_base)); }\n+      { return std::make_reverse_iterator(ranges::begin(_M_base)); }\n \n       constexpr auto\n       size() requires sized_range<_Vp>"}, {"sha": "47386575192b8fd234af0311f674dfb74c9a9115", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/reverse.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09f08fef71fb776a1d850a7b854c7ccf8a3d6c11/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Freverse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09f08fef71fb776a1d850a7b854c7ccf8a3d6c11/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Freverse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Freverse.cc?ref=09f08fef71fb776a1d850a7b854c7ccf8a3d6c11", "patch": "@@ -131,6 +131,23 @@ test05()\n   VERIFY( test_wrapper<int>::increment_count == 5 );\n }\n \n+namespace test_ns\n+{\n+  struct A {};\n+  template <typename T>\n+  void make_reverse_iterator(T&&) {}\n+} // namespace test_ns\n+\n+void test06()\n+{\n+  // Check that views::reverse works and does not use ADL which could lead\n+  // to accidentally finding test_ns::make_reverse_iterator(const A&).\n+  test_ns::A as[] = {{}, {}};\n+  auto v = as | std::views::reverse;\n+  static_assert(std::ranges::view<decltype(v)>);\n+  static_assert(std::ranges::view<decltype(v)>);\n+}\n+\n int\n main()\n {\n@@ -139,4 +156,5 @@ main()\n   test03();\n   test04();\n   test05();\n+  test06();\n }"}]}