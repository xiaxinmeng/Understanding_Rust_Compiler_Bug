{"sha": "71b6257e3a90995e1c1d3d2716a0eec5eef243db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFiNjI1N2UzYTkwOTk1ZTFjMWQzZDI3MTZhMGVlYzVlZWYyNDNkYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-26T12:24:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-26T12:28:49Z"}, "message": "tree-optimization/96783 - fix vectorization of negative step SLP\n\nThis appropriately uses VMAT_ELEMENTWISE when the vectors cannot be\nfilled from a single SLP group until we get more explicit support\nfor negative stride SLP.\n\n2020-08-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/96783\n\t* tree-vect-stmts.c (get_group_load_store_type): Use\n\tVMAT_ELEMENTWISE for negative strides when we cannot\n\tuse VMAT_STRIDED_SLP.\n\n\t* gcc.dg/vect/pr96783-1.c: New testcase.\n\t* gcc.dg/vect/pr96783-2.c: Likewise.", "tree": {"sha": "dfc83a6f216f1a57b4032e20c6eb56a3250a2420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfc83a6f216f1a57b4032e20c6eb56a3250a2420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71b6257e3a90995e1c1d3d2716a0eec5eef243db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b6257e3a90995e1c1d3d2716a0eec5eef243db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b6257e3a90995e1c1d3d2716a0eec5eef243db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b6257e3a90995e1c1d3d2716a0eec5eef243db/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f53d8f1d3e7519bd81cc5874e43ed9896cf6180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f53d8f1d3e7519bd81cc5874e43ed9896cf6180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f53d8f1d3e7519bd81cc5874e43ed9896cf6180"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "55d1364f056febd86c49272ede488bd37867dbe8", "filename": "gcc/testsuite/gcc.dg/vect/pr96783-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b6257e3a90995e1c1d3d2716a0eec5eef243db/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr96783-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b6257e3a90995e1c1d3d2716a0eec5eef243db/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr96783-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr96783-1.c?ref=71b6257e3a90995e1c1d3d2716a0eec5eef243db", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+\n+#include \"tree-vect.h\"\n+\n+void __attribute__((noipa))\n+foo (long *a, int off, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      long tem1 = a[0];\n+      long tem2 = a[1];\n+      long tem3 = a[2];\n+      long tem4 = a[off + 1];\n+      a[0] = tem4;\n+      long tem5 = a[off + 2];\n+      a[1] = tem5;\n+      long tem6 = a[off + 3];\n+      a[2] = tem6;\n+      a[off + 1] = tem1;\n+      a[off + 2] = tem2;\n+      a[off + 3] = tem3;\n+      a -= 3;\n+    }\n+}\n+\n+int main ()\n+{\n+  long a[3 * 9];\n+  check_vect ();\n+  for (int i = 0; i < 3 * 9; ++i)\n+    a[i] = i;\n+  foo (a + 3 * 5, 6-1, 5);\n+  const long b[3 * 8] = { 0, 1, 2, 21, 22, 23, 18, 19, 20, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };\n+  for (int i = 0; i < 3 * 8; ++i)\n+    if (a[i] != b[i])\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "33c37109e3a8de646edd8339b0c98300bed25b51", "filename": "gcc/testsuite/gcc.dg/vect/pr96783-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b6257e3a90995e1c1d3d2716a0eec5eef243db/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr96783-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b6257e3a90995e1c1d3d2716a0eec5eef243db/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr96783-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr96783-2.c?ref=71b6257e3a90995e1c1d3d2716a0eec5eef243db", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+\n+#include \"tree-vect.h\"\n+\n+long a[1024];\n+long b[1024];\n+\n+void __attribute__((noipa)) foo ()\n+{\n+  for (int i = 0; i < 256; ++i)\n+    {\n+      a[3*i] = b[1023 - 3*i - 2];\n+      a[3*i + 1] = b[1023 - 3*i - 1];\n+      a[3*i + 2] = b[1023 - 3*i];\n+    }\n+}\n+\n+int main()\n+{\n+  for (int i = 0; i < 1024; ++i)\n+    b[i] = i;\n+  foo ();\n+  for (int i = 0; i < 256; ++i)\n+    if (a[3*i] != 1023 - 3*i - 2\n+\t|| a[3*i+1] != 1023 - 3*i - 1\n+\t|| a[3*i+2] != 1023 - 3*i)\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "224be018af900dce2336a5deb4d3ab315f78b6bd", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b6257e3a90995e1c1d3d2716a0eec5eef243db/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b6257e3a90995e1c1d3d2716a0eec5eef243db/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=71b6257e3a90995e1c1d3d2716a0eec5eef243db", "patch": "@@ -2192,7 +2192,15 @@ get_group_load_store_type (vec_info *vinfo, stmt_vec_info stmt_info,\n \t\t*memory_access_type = get_negative_load_store_type\n \t\t\t\t       (vinfo, stmt_info, vectype, vls_type, 1);\n \t      else\n-\t\t*memory_access_type = VMAT_STRIDED_SLP;\n+\t\t{\n+\t\t  /* Try to use consecutive accesses of DR_GROUP_SIZE elements,\n+\t\t     separated by the stride, until we have a complete vector.\n+\t\t     Fall back to scalar accesses if that isn't possible.  */\n+\t\t  if (multiple_p (nunits, group_size))\n+\t\t    *memory_access_type = VMAT_STRIDED_SLP;\n+\t\t  else\n+\t\t    *memory_access_type = VMAT_ELEMENTWISE;\n+\t\t}\n \t    }\n \t  else\n \t    {"}]}