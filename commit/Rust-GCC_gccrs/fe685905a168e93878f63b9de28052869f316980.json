{"sha": "fe685905a168e93878f63b9de28052869f316980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU2ODU5MDVhMTY4ZTkzODc4ZjYzYjlkZTI4MDUyODY5ZjMxNjk4MA==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2007-08-14T08:46:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:46:43Z"}, "message": "sem_cat.ads, [...] (Has_Stream_Attribute_Definition): New formal At_Any_Place indicating...\n\n2007-08-14  Thomas Quinot  <quinot@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_cat.ads, sem_cat.adb (Has_Stream_Attribute_Definition): New\n\tformal At_Any_Place indicating, when True, that we want to test for\n\tavailability of the stream attribute at any place (as opposed to the\n\tcurrent visibility context only).\n\t(Missing_Read_Write_Attributes): A stream attribute is missing for the\n\tpurpose of enforcing E.2.2(8) only if it is not available at any place.\n\tTake into account the Ada2005 pragma Has_Preelaborable_Initialization\n\twhen checking the legality of an extension aggregate in a preelaborable\n\tpackage. Treat the literal null as a valid default expression in a\n\tcomponent declaration for a type with preelaborable initialization.\n\tA limited interface is a legal progenitor for the designated type of a\n\tremote access to class-wide type.\n\nFrom-SVN: r127445", "tree": {"sha": "1cc9df8ab785afa7c1cd96482535ed9bdadb71fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cc9df8ab785afa7c1cd96482535ed9bdadb71fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe685905a168e93878f63b9de28052869f316980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe685905a168e93878f63b9de28052869f316980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe685905a168e93878f63b9de28052869f316980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe685905a168e93878f63b9de28052869f316980/comments", "author": null, "committer": null, "parents": [{"sha": "401093c15c3902b916df85645c894ceb13aab701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/401093c15c3902b916df85645c894ceb13aab701", "html_url": "https://github.com/Rust-GCC/gccrs/commit/401093c15c3902b916df85645c894ceb13aab701"}], "stats": {"total": 76, "additions": 51, "deletions": 25}, "files": [{"sha": "9e21ba73d932f2902f74acc7a2fda1005a50ece3", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe685905a168e93878f63b9de28052869f316980/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe685905a168e93878f63b9de28052869f316980/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=fe685905a168e93878f63b9de28052869f316980", "patch": "@@ -71,10 +71,9 @@ package body Sem_Cat is\n    --  that no component is declared with a non-static default value.\n \n    function Missing_Read_Write_Attributes (E : Entity_Id) return Boolean;\n-   --  Return True if the entity or one of its subcomponent is an access\n-   --  type which does not have user-defined Read and Write attribute.\n-   --  Additionally, in Ada 2005 mode, stream attributes are considered missing\n-   --  if the attribute definition clause is not visible.\n+   --  Return True if the entity or one of its subcomponents is of an access\n+   --  type that does not have user-defined Read and Write attributes visible\n+   --  at any place.\n \n    function In_RCI_Declaration (N : Node_Id) return Boolean;\n    --  Determines if a declaration is  within the visible part of  a Remote\n@@ -314,15 +313,18 @@ package body Sem_Cat is\n    -------------------------------------\n \n    function Has_Stream_Attribute_Definition\n-     (Typ : Entity_Id; Nam : TSS_Name_Type) return Boolean\n+     (Typ          : Entity_Id;\n+      Nam          : TSS_Name_Type;\n+      At_Any_Place : Boolean := False) return Boolean\n    is\n       Rep_Item : Node_Id;\n    begin\n       --  We start from the declaration node and then loop until the end of\n       --  the list until we find the requested attribute definition clause.\n       --  In Ada 2005 mode, clauses are ignored if they are not currently\n       --  visible (this is tested using the corresponding Entity, which is\n-      --  inserted by the expander at the point where the clause occurs).\n+      --  inserted by the expander at the point where the clause occurs),\n+      --  unless At_Any_Place is true.\n \n       Rep_Item := First_Rep_Item (Typ);\n       while Present (Rep_Item) loop\n@@ -349,8 +351,13 @@ package body Sem_Cat is\n          Next_Rep_Item (Rep_Item);\n       end loop;\n \n+      --  If At_Any_Place is true, return True if the attribute is available\n+      --  at any place; if it is false, return True only if the attribute is\n+      --  currently visible.\n+\n       return Present (Rep_Item)\n         and then (Ada_Version < Ada_05\n+                   or else At_Any_Place\n                    or else not Is_Hidden (Entity (Rep_Item)));\n    end Has_Stream_Attribute_Definition;\n \n@@ -508,8 +515,24 @@ package body Sem_Cat is\n         and then Is_Limited_Record (E)\n       then\n          return True;\n+\n+      --  A limited interface is not currently a legal ancestor for the\n+      --  designated type of an RACW type, because a type that implements\n+      --  such an interface need not be limited. However, the ARG seems to\n+      --  incline towards allowing an access to classwide limited interface\n+      --  type as a remote access type. This may be revised when the ARG\n+      --  rules on this question, but it seems safe to allow it for now,\n+      --  in order to see whether it is a useful extension for distributed\n+      --  programming, in particular for Brad Moore's buffer taxonomy.\n+\n+      elsif Is_Limited_Record (E)\n+        and then Is_Limited_Interface (E)\n+      then\n+         return True;\n+\n       elsif Nkind (P) = N_Private_Extension_Declaration then\n          return Is_Recursively_Limited_Private (Etype (E));\n+\n       elsif Nkind (P) = N_Formal_Type_Declaration\n         and then Ekind (E) = E_Record_Type_With_Private\n         and then Is_Generic_Type (E)\n@@ -531,8 +554,8 @@ package body Sem_Cat is\n       U_E            : constant Entity_Id := Underlying_Type (E);\n \n       function Has_Read_Write_Attributes (E : Entity_Id) return Boolean;\n-      --  Return True if entity has visible attribute definition clauses for\n-      --  Read and Write attributes.\n+      --  Return True if entity has attribute definition clauses for Read and\n+      --  Write attributes that are visible at some place.\n \n       -------------------------------\n       -- Has_Read_Write_Attributes --\n@@ -541,8 +564,10 @@ package body Sem_Cat is\n       function Has_Read_Write_Attributes (E : Entity_Id) return Boolean is\n       begin\n          return True\n-           and then Has_Stream_Attribute_Definition (E, TSS_Stream_Read)\n-           and then Has_Stream_Attribute_Definition (E, TSS_Stream_Write);\n+           and then Has_Stream_Attribute_Definition (E,\n+                      TSS_Stream_Read,  At_Any_Place => True)\n+           and then Has_Stream_Attribute_Definition (E,\n+                      TSS_Stream_Write, At_Any_Place => True);\n       end Has_Read_Write_Attributes;\n \n    --  Start of processing for Missing_Read_Write_Attributes\n@@ -824,16 +849,13 @@ package body Sem_Cat is\n         and then (not Inside_A_Generic\n                    or else Present (Enclosing_Generic_Body (N)))\n       then\n-         --  We relax the restriction of 10.2.1(9) within GNAT\n-         --  units to allow packages such as Ada.Strings.Unbounded\n-         --  to be implemented (i.p., Null_Unbounded_String).\n-         --  (There are ACVC tests that check that the restriction\n-         --  is enforced, but note that AI-161, once approved,\n-         --  will relax the restriction prohibiting default-\n-         --  initialized objects of private and controlled\n-         --  types.)\n+         --  If the type is private, it must have the Ada 2005 pragma\n+         --  Has_Preelaborable_Initialization.\n+         --  The check is omitted within predefined units. This is probably\n+         --  obsolete code to fix the Ada95 weakness in this area ???\n \n          if Is_Private_Type (T)\n+           and then not Has_Pragma_Preelab_Init (T)\n            and then not Is_Internal_File_Name\n                           (Unit_File_Name (Get_Source_Unit (N)))\n          then\n@@ -906,7 +928,7 @@ package body Sem_Cat is\n             then\n                Entity_Of_Withed := Entity (Name (Item));\n                Check_Categorization_Dependencies\n-                (U, Entity_Of_Withed, Item, Is_Subunit);\n+                 (U, Entity_Of_Withed, Item, Is_Subunit);\n             end if;\n \n             Next (Item);\n@@ -1854,11 +1876,11 @@ package body Sem_Cat is\n                if Ada_Version >= Ada_05 then\n                   Error_Msg_N\n                     (\"\\must have visible Read and Write attribute \" &\n-                     \"definition clauses ('R'M E.2.2(8))\", U_Typ);\n+                     \"definition clauses (RM E.2.2(8))\", U_Typ);\n                else\n                   Error_Msg_N\n                     (\"\\must have Read and Write attribute \" &\n-                     \"definition clauses ('R'M E.2.2(8))\", U_Typ);\n+                     \"definition clauses (RM E.2.2(8))\", U_Typ);\n                end if;\n             end if;\n          end if;"}, {"sha": "cde19ba26824a4bb39ead8f19d219a516be06423", "filename": "gcc/ada/sem_cat.ads", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe685905a168e93878f63b9de28052869f316980/gcc%2Fada%2Fsem_cat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe685905a168e93878f63b9de28052869f316980/gcc%2Fada%2Fsem_cat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.ads?ref=fe685905a168e93878f63b9de28052869f316980", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,14 +42,18 @@ with Types;   use Types;\n package Sem_Cat is\n \n    function Has_Stream_Attribute_Definition\n-     (Typ : Entity_Id; Nam : TSS_Name_Type) return Boolean;\n+     (Typ          : Entity_Id;\n+      Nam          : TSS_Name_Type;\n+      At_Any_Place : Boolean := False) return Boolean;\n    --  True when there is a attribute definition clause specifying attribute\n    --  Nam for Typ. In Ada 2005 mode, returns True only when the attribute\n-   --  definition clause is visible. Note that attribute definition clauses\n+   --  definition clause is visible, unless At_Any_Place is True (in which case\n+   --  no visiblity test is made, and True is returned as long as an attribute\n+   --  is visible at any place). Note that attribute definition clauses\n    --  inherited from parent types are taken into account by this predicate\n    --  (to test for presence of an attribute definition clause for one\n    --  specific type, excluding inherited definitions, the flags\n-   --  Has_Specicied_Stream_* can be used instead).\n+   --  Has_Specified_Stream_* can be used instead).\n \n    function In_Preelaborated_Unit return Boolean;\n    --  Determines if the current scope is within a preelaborated compilation"}]}