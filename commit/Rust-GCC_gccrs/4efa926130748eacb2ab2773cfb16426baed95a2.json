{"sha": "4efa926130748eacb2ab2773cfb16426baed95a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVmYTkyNjEzMDc0OGVhY2IyYWIyNzczY2ZiMTY0MjZiYWVkOTVhMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-06-01T17:01:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-06-01T17:01:17Z"}, "message": "re PR tree-optimization/53501 (scev introduces signed overflow)\n\n\tPR middle-end/53501\n\t* fold-const.c (fold_binary_loc): Refine previous change.\ntestsuite/\n\t* c-c++-common/restrict-2.c: Revert previous change.\n\nFrom-SVN: r188118", "tree": {"sha": "e127bd3746dbcafe39b599443facbb089e438fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e127bd3746dbcafe39b599443facbb089e438fe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4efa926130748eacb2ab2773cfb16426baed95a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4efa926130748eacb2ab2773cfb16426baed95a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4efa926130748eacb2ab2773cfb16426baed95a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4efa926130748eacb2ab2773cfb16426baed95a2/comments", "author": null, "committer": null, "parents": [{"sha": "3dfaf1d7dbe64f27aa61388f18971b53a923db9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfaf1d7dbe64f27aa61388f18971b53a923db9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfaf1d7dbe64f27aa61388f18971b53a923db9f"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "ca4f1473aa7a89a487b3b8940e69a983ac777439", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4efa926130748eacb2ab2773cfb16426baed95a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4efa926130748eacb2ab2773cfb16426baed95a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4efa926130748eacb2ab2773cfb16426baed95a2", "patch": "@@ -1,3 +1,8 @@\n+2012-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/53501\n+\t* fold-const.c (fold_binary_loc): Refine previous change.\n+\n 2012-06-01  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/rs6000/vxworks.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Restore"}, {"sha": "5ea5110a72b65e81504ee441fa3727807c12851f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4efa926130748eacb2ab2773cfb16426baed95a2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4efa926130748eacb2ab2773cfb16426baed95a2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4efa926130748eacb2ab2773cfb16426baed95a2", "patch": "@@ -10042,15 +10042,18 @@ fold_binary_loc (location_t loc,\n \t    }\n \t}\n \n-      /* Handle (A1 * C1) + (A2 * C2) with A1, A2 or C1, C2 being the\n-\t same or one.  Make sure type is not saturating.\n-\t fold_plusminus_mult_expr will re-associate.  */\n-      if ((TREE_CODE (op0) == MULT_EXPR\n-\t   || TREE_CODE (op1) == MULT_EXPR)\n+      /* Handle (A1 * C1) + (A2 * C2) with A1, A2 or C1, C2 being the same or\n+\t one.  Make sure the type is not saturating and has the signedness of\n+\t the stripped operands, as fold_plusminus_mult_expr will re-associate.\n+\t ??? The latter condition should use TYPE_OVERFLOW_* flags instead.  */\n+      if ((TREE_CODE (arg0) == MULT_EXPR\n+\t   || TREE_CODE (arg1) == MULT_EXPR)\n \t  && !TYPE_SATURATING (type)\n+\t  && TYPE_UNSIGNED (type) == TYPE_UNSIGNED (TREE_TYPE (arg0))\n+\t  && TYPE_UNSIGNED (type) == TYPE_UNSIGNED (TREE_TYPE (arg1))\n \t  && (!FLOAT_TYPE_P (type) || flag_associative_math))\n         {\n-\t  tree tem = fold_plusminus_mult_expr (loc, code, type, op0, op1);\n+\t  tree tem = fold_plusminus_mult_expr (loc, code, type, arg0, arg1);\n \t  if (tem)\n \t    return tem;\n \t}\n@@ -10665,15 +10668,18 @@ fold_binary_loc (location_t loc,\n \t  && (tem = distribute_real_division (loc, code, type, arg0, arg1)))\n \treturn tem;\n \n-      /* Handle (A1 * C1) - (A2 * C2) with A1, A2 or C1, C2 being the\n-\t same or one.  Make sure type is not saturating.\n-\t fold_plusminus_mult_expr will re-associate.  */\n-      if ((TREE_CODE (op0) == MULT_EXPR\n-\t   || TREE_CODE (op1) == MULT_EXPR)\n+      /* Handle (A1 * C1) - (A2 * C2) with A1, A2 or C1, C2 being the same or\n+\t one.  Make sure the type is not saturating and has the signedness of\n+\t the stripped operands, as fold_plusminus_mult_expr will re-associate.\n+\t ??? The latter condition should use TYPE_OVERFLOW_* flags instead.  */\n+      if ((TREE_CODE (arg0) == MULT_EXPR\n+\t   || TREE_CODE (arg1) == MULT_EXPR)\n \t  && !TYPE_SATURATING (type)\n+\t  && TYPE_UNSIGNED (type) == TYPE_UNSIGNED (TREE_TYPE (arg0))\n+\t  && TYPE_UNSIGNED (type) == TYPE_UNSIGNED (TREE_TYPE (arg1))\n \t  && (!FLOAT_TYPE_P (type) || flag_associative_math))\n         {\n-\t  tree tem = fold_plusminus_mult_expr (loc, code, type, op0, op1);\n+\t  tree tem = fold_plusminus_mult_expr (loc, code, type, arg0, arg1);\n \t  if (tem)\n \t    return tem;\n \t}"}, {"sha": "76e4e6b0fe853fee7485f5079f7f004850495448", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4efa926130748eacb2ab2773cfb16426baed95a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4efa926130748eacb2ab2773cfb16426baed95a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4efa926130748eacb2ab2773cfb16426baed95a2", "patch": "@@ -1,3 +1,7 @@\n+2012-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* c-c++-common/restrict-2.c: Revert previous change.\n+\n 2012-06-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/53137"}, {"sha": "3f71b77b9ced926cd94892f8d8bd7d5eba0f58bd", "filename": "gcc/testsuite/c-c++-common/restrict-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4efa926130748eacb2ab2773cfb16426baed95a2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frestrict-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4efa926130748eacb2ab2773cfb16426baed95a2/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frestrict-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frestrict-2.c?ref=4efa926130748eacb2ab2773cfb16426baed95a2", "patch": "@@ -10,5 +10,5 @@ void foo (float * __restrict__ a, float * __restrict__ b, int n, int j)\n \n /* We should move the RHS of the store out of the loop.  */\n \n-/* { dg-final { scan-tree-dump-times \"Moving statement\" 10 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Moving statement\" 11 \"lim1\" } } */\n /* { dg-final { cleanup-tree-dump \"lim1\" } } */"}]}