{"sha": "e8d65a35d50c59fa657329032943b0e5ec241147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkNjVhMzVkNTBjNTlmYTY1NzMyOTAzMjk0M2IwZTVlYzI0MTE0Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-01-04T08:06:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-01-04T08:06:52Z"}, "message": "re PR target/69072 (ICE in function_arg_record_value on 7th packed structure)\n\n\tPR target/69072\n\t* config/sparc/sparc.c (scan_record_type): Take into account subfields\n\tto compute the PACKED_P predicate.\n\t(function_arg_record_value): Minor tweaks.\n\nFrom-SVN: r232049", "tree": {"sha": "a77c71990adc9cda31f16828e902fe34644d1a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a77c71990adc9cda31f16828e902fe34644d1a47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8d65a35d50c59fa657329032943b0e5ec241147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d65a35d50c59fa657329032943b0e5ec241147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d65a35d50c59fa657329032943b0e5ec241147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d65a35d50c59fa657329032943b0e5ec241147/comments", "author": null, "committer": null, "parents": [{"sha": "a10f2c253c47da0a0d8ba7266f8e89174d9b1879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10f2c253c47da0a0d8ba7266f8e89174d9b1879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10f2c253c47da0a0d8ba7266f8e89174d9b1879"}], "stats": {"total": 63, "additions": 44, "deletions": 19}, "files": [{"sha": "4b29c224689e9ece790c4be05794bb782b12e5e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d65a35d50c59fa657329032943b0e5ec241147/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d65a35d50c59fa657329032943b0e5ec241147/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8d65a35d50c59fa657329032943b0e5ec241147", "patch": "@@ -1,3 +1,10 @@\n+2016-01-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/69072\n+\t* config/sparc/sparc.c (scan_record_type): Take into account subfields\n+\tto compute the PACKED_P predicate.\n+\t(function_arg_record_value): Minor tweaks.\n+\n 2016-01-04  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* doc/install.texi (--with-multilib-list): Describe the meaning of the"}, {"sha": "1d00a344095bba51562f5d52162a3b9d97d2ce52", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d65a35d50c59fa657329032943b0e5ec241147/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d65a35d50c59fa657329032943b0e5ec241147/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e8d65a35d50c59fa657329032943b0e5ec241147", "patch": "@@ -6140,30 +6140,28 @@ sparc_strict_argument_naming (cumulative_args_t ca ATTRIBUTE_UNUSED)\n       that is eligible for promotion in integer registers.\n     - FP_REGS_P: the record contains at least one field or sub-field\n       that is eligible for promotion in floating-point registers.\n-    - PACKED_P: the record contains at least one field that is packed.\n-\n-   Sub-fields are not taken into account for the PACKED_P predicate.  */\n+    - PACKED_P: the record contains at least one field that is packed.  */\n \n static void\n scan_record_type (const_tree type, int *intregs_p, int *fpregs_p,\n \t\t  int *packed_p)\n {\n-  tree field;\n-\n-  for (field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n+  for (tree field = TYPE_FIELDS (type); field; field = DECL_CHAIN (field))\n     {\n       if (TREE_CODE (field) == FIELD_DECL)\n \t{\n-\t  if (TREE_CODE (TREE_TYPE (field)) == RECORD_TYPE)\n-\t    scan_record_type (TREE_TYPE (field), intregs_p, fpregs_p, 0);\n-\t  else if ((FLOAT_TYPE_P (TREE_TYPE (field))\n-\t\t   || TREE_CODE (TREE_TYPE (field)) == VECTOR_TYPE)\n+\t  tree field_type = TREE_TYPE (field);\n+\n+\t  if (TREE_CODE (field_type) == RECORD_TYPE)\n+\t    scan_record_type (field_type, intregs_p, fpregs_p, packed_p);\n+\t  else if ((FLOAT_TYPE_P (field_type)\n+\t\t   || TREE_CODE (field_type) == VECTOR_TYPE)\n \t\t  && TARGET_FPU)\n \t    *fpregs_p = 1;\n \t  else\n \t    *intregs_p = 1;\n \n-\t  if (packed_p && DECL_PACKED (field))\n+\t  if (DECL_PACKED (field))\n \t    *packed_p = 1;\n \t}\n     }\n@@ -6647,9 +6645,10 @@ function_arg_record_value (const_tree type, machine_mode mode,\n \n       parms.nregs += intslots;\n     }\n-  nregs = parms.nregs;\n \n   /* Allocate the vector and handle some annoying special cases.  */\n+  nregs = parms.nregs;\n+\n   if (nregs == 0)\n     {\n       /* ??? Empty structure has no value?  Duh?  */\n@@ -6661,16 +6660,15 @@ function_arg_record_value (const_tree type, machine_mode mode,\n \t     load.  */\n \t  return gen_rtx_REG (mode, regbase);\n \t}\n-      else\n-\t{\n-\t  /* ??? C++ has structures with no fields, and yet a size.  Give up\n-\t     for now and pass everything back in integer registers.  */\n-\t  nregs = (typesize + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n-\t}\n+\n+      /* ??? C++ has structures with no fields, and yet a size.  Give up\n+\t for now and pass everything back in integer registers.  */\n+      nregs = (typesize + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n       if (nregs + slotno > SPARC_INT_ARG_MAX)\n \tnregs = SPARC_INT_ARG_MAX - slotno;\n     }\n-  gcc_assert (nregs != 0);\n+\n+  gcc_assert (nregs > 0);\n \n   parms.ret = gen_rtx_PARALLEL (mode, rtvec_alloc (parms.stack + nregs));\n "}, {"sha": "148ac10dc15c3434a1de7fb15839dea57ec05916", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d65a35d50c59fa657329032943b0e5ec241147/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d65a35d50c59fa657329032943b0e5ec241147/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8d65a35d50c59fa657329032943b0e5ec241147", "patch": "@@ -1,3 +1,7 @@\n+2016-01-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/20160104-1.c: New test.\n+\n 2016-01-03  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/65045"}, {"sha": "0cc617afdf247b9b2f53772bc6b7a4890045f8ef", "filename": "gcc/testsuite/gcc.target/sparc/20160104-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d65a35d50c59fa657329032943b0e5ec241147/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20160104-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d65a35d50c59fa657329032943b0e5ec241147/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20160104-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2F20160104-1.c?ref=e8d65a35d50c59fa657329032943b0e5ec241147", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/69072 */\n+/* Reported by Zdenek Sojka <zsojka@seznam.cz> */\n+\n+/* { dg-do compile } */\n+\n+typedef struct\n+{\n+  struct\n+  {\n+    double d;\n+  } __attribute__((packed)) a;\n+} S;\n+\n+void\n+foo (S s1, S s2, S s3, S s4, S s5, S s6, S s7)\n+{}"}]}