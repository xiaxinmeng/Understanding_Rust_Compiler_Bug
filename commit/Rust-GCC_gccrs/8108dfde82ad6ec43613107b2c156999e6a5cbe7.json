{"sha": "8108dfde82ad6ec43613107b2c156999e6a5cbe7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwOGRmZGU4MmFkNmVjNDM2MTMxMDdiMmMxNTY5OTllNmE1Y2JlNw==", "commit": {"author": {"name": "wu yuan", "email": "wuyuan5@huawei.com", "date": "2019-04-08T17:08:32Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2019-04-08T17:08:32Z"}, "message": "[AArch64] Add tsv110 pipeline scheduling\n\nCommitted on behalf of Wu Yuan:\n\n2019-04-04  wu yuan <wuyuan5@huawei.com>\n\n\t* config/aarch64/aarch64-cores.def (tsv1100): Change scheduling model.\n\t* config/aarch64/aarch64.md : Add \"tsv110.md\"\n\t* config/aarch64/tsv110.md: New file.\n\nFrom-SVN: r270212", "tree": {"sha": "e951cf20d83319170c6eac4ccfd59f1bc5e08f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e951cf20d83319170c6eac4ccfd59f1bc5e08f34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8108dfde82ad6ec43613107b2c156999e6a5cbe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8108dfde82ad6ec43613107b2c156999e6a5cbe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8108dfde82ad6ec43613107b2c156999e6a5cbe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8108dfde82ad6ec43613107b2c156999e6a5cbe7/comments", "author": null, "committer": null, "parents": [{"sha": "a265c9a929b4ca727e9b0c93eb98e15244f2735c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a265c9a929b4ca727e9b0c93eb98e15244f2735c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a265c9a929b4ca727e9b0c93eb98e15244f2735c"}], "stats": {"total": 717, "additions": 716, "deletions": 1}, "files": [{"sha": "780004ab569d83aa78d9b8aaa30a75626234744a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8108dfde82ad6ec43613107b2c156999e6a5cbe7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8108dfde82ad6ec43613107b2c156999e6a5cbe7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8108dfde82ad6ec43613107b2c156999e6a5cbe7", "patch": "@@ -1,3 +1,9 @@\n+2019-04-08  wu yuan  <wuyuan5@huawei.com>\n+\n+\t* config/aarch64/aarch64-cores.def (tsv1100): Change scheduling model.\n+\t* config/aarch64/aarch64.md : Add \"tsv110.md\"\n+\t* config/aarch64/tsv110.md: New file.\n+\n 2019-04-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90006"}, {"sha": "82d91d62519f0476e059718d8c2f02e3ea5a0613", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8108dfde82ad6ec43613107b2c156999e6a5cbe7/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8108dfde82ad6ec43613107b2c156999e6a5cbe7/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=8108dfde82ad6ec43613107b2c156999e6a5cbe7", "patch": "@@ -105,7 +105,7 @@ AARCH64_CORE(\"neoverse-n1\",  neoversen1, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_\n AARCH64_CORE(\"neoverse-e1\",  neoversee1, cortexa53, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_F16 | AARCH64_FL_RCPC | AARCH64_FL_DOTPROD | AARCH64_FL_SSBS, cortexa53, 0x41, 0xd4a, -1)\n \n /* HiSilicon ('H') cores. */\n-AARCH64_CORE(\"tsv110\",  tsv110, cortexa57, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2, tsv110,   0x48, 0xd01, -1)\n+AARCH64_CORE(\"tsv110\",  tsv110, tsv110, 8_2A,  AARCH64_FL_FOR_ARCH8_2 | AARCH64_FL_CRYPTO | AARCH64_FL_F16 | AARCH64_FL_AES | AARCH64_FL_SHA2, tsv110,   0x48, 0xd01, -1)\n \n /* ARMv8.4-A Architecture Processors.  */\n "}, {"sha": "ab8786a933ec0b17b1d7674d220d478b84046573", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8108dfde82ad6ec43613107b2c156999e6a5cbe7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8108dfde82ad6ec43613107b2c156999e6a5cbe7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=8108dfde82ad6ec43613107b2c156999e6a5cbe7", "patch": "@@ -361,6 +361,7 @@\n (include \"thunderx.md\")\n (include \"../arm/xgene1.md\")\n (include \"thunderx2t99.md\")\n+(include \"tsv110.md\")\n \n ;; -------------------------------------------------------------------\n ;; Jumps and other miscellaneous insns"}, {"sha": "680c48a68c57438c933313fefa5645e69c27fa70", "filename": "gcc/config/aarch64/tsv110.md", "status": "added", "additions": 708, "deletions": 0, "changes": 708, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8108dfde82ad6ec43613107b2c156999e6a5cbe7/gcc%2Fconfig%2Faarch64%2Ftsv110.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8108dfde82ad6ec43613107b2c156999e6a5cbe7/gcc%2Fconfig%2Faarch64%2Ftsv110.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ftsv110.md?ref=8108dfde82ad6ec43613107b2c156999e6a5cbe7", "patch": "@@ -0,0 +1,708 @@\n+;; tsv110 pipeline description\n+;; Copyright (C) 2018 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"tsv110\")\n+\n+(define_attr \"tsv110_neon_type\"\n+  \"neon_arith_acc, neon_arith_acc_q,\n+   neon_arith_basic, neon_arith_complex,\n+   neon_reduc_add_acc, neon_multiply, neon_multiply_q,\n+   neon_multiply_long, neon_mla, neon_mla_q, neon_mla_long,\n+   neon_sat_mla_long, neon_shift_acc, neon_shift_imm_basic,\n+   neon_shift_imm_complex,\n+   neon_shift_reg_basic, neon_shift_reg_basic_q, neon_shift_reg_complex,\n+   neon_shift_reg_complex_q, neon_fp_negabs, neon_fp_arith,\n+   neon_fp_arith_q, neon_fp_reductions_q, neon_fp_cvt_int,\n+   neon_fp_cvt_int_q, neon_fp_cvt16, neon_fp_minmax, neon_fp_mul,\n+   neon_fp_mul_q, neon_fp_mla, neon_fp_mla_q, neon_fp_recpe_rsqrte,\n+   neon_fp_recpe_rsqrte_q, neon_fp_recps_rsqrts, neon_fp_recps_rsqrts_q,\n+   neon_bitops, neon_bitops_q, neon_from_gp,\n+   neon_from_gp_q, neon_move, neon_tbl3_tbl4, neon_zip_q, neon_to_gp,\n+   neon_load_a, neon_load_b, neon_load_c, neon_load_d, neon_load_e,\n+   neon_load_f, neon_store_a, neon_store_b, neon_store_complex,\n+   unknown\"\n+  (cond [\n+\t  (eq_attr \"type\" \"neon_arith_acc, neon_reduc_add_acc,\\\n+\t\t\t   neon_reduc_add_acc_q\")\n+\t    (const_string \"neon_arith_acc\")\n+\t  (eq_attr \"type\" \"neon_arith_acc_q\")\n+\t    (const_string \"neon_arith_acc_q\")\n+\t  (eq_attr \"type\" \"neon_abs,neon_abs_q,neon_add, neon_add_q, neon_add_long,\\\n+\t\t\t   neon_add_widen, neon_neg, neon_neg_q,\\\n+\t\t\t   neon_reduc_add, neon_reduc_add_q,\\\n+\t\t\t   neon_reduc_add_long, neon_sub, neon_sub_q,\\\n+\t\t\t   neon_sub_long, neon_sub_widen, neon_logic,\\\n+\t\t\t   neon_logic_q, neon_tst, neon_tst_q,\\\n+\t\t\t   neon_compare, neon_compare_q,\\\n+\t\t\t   neon_compare_zero, neon_compare_zero_q,\\\n+\t\t\t   neon_minmax, neon_minmax_q, neon_reduc_minmax,\\\n+\t\t\t   neon_reduc_minmax_q\")\n+\t    (const_string \"neon_arith_basic\")\n+\t  (eq_attr \"type\" \"neon_add_halve_narrow_q,\\\n+\t\t\t   neon_add_halve, neon_add_halve_q,\\\n+\t\t\t   neon_sub_halve, neon_sub_halve_q, neon_qabs,\\\n+\t\t\t   neon_qabs_q, neon_qadd, neon_qadd_q, neon_qneg,\\\n+\t\t\t   neon_qneg_q, neon_qsub, neon_qsub_q,\\\n+\t\t\t   neon_sub_halve_narrow_q\")\n+\t    (const_string \"neon_arith_complex\")\n+\n+\t  (eq_attr \"type\" \"neon_mul_b, neon_mul_h, neon_mul_s,\\\n+\t\t\t   neon_mul_h_scalar, neon_mul_s_scalar,\\\n+\t\t\t   neon_sat_mul_b, neon_sat_mul_h,\\\n+\t\t\t   neon_sat_mul_s, neon_sat_mul_h_scalar,\\\n+\t\t\t   neon_sat_mul_s_scalar,\\\n+\t\t\t   neon_mul_b_long, neon_mul_h_long,\\\n+\t\t\t   neon_mul_s_long,\\\n+\t\t\t   neon_mul_h_scalar_long, neon_mul_s_scalar_long,\\\n+\t\t\t   neon_sat_mul_b_long, neon_sat_mul_h_long,\\\n+\t\t\t   neon_sat_mul_s_long, neon_sat_mul_h_scalar_long,\\\n+\t\t\t   neon_sat_mul_s_scalar_long,\\\n+\t\t\t   neon_mla_b, neon_mla_h, neon_mla_s,\\\n+\t\t\t   neon_mla_h_scalar, neon_mla_s_scalar,\\\n+\t\t\t   neon_mla_b_long, neon_mla_h_long,\\\n+\t\t\t   neon_mla_s_long,\\\n+\t\t\t   neon_mla_h_scalar_long, neon_mla_s_scalar_long,\\\n+\t\t\t   neon_sat_mla_b_long, neon_sat_mla_h_long,\\\n+\t\t\t   neon_sat_mla_s_long, neon_sat_mla_h_scalar_long,\\\n+\t\t\t   neon_sat_mla_s_scalar_long\")\n+\t    (const_string \"neon_multiply\")\n+\t  (eq_attr \"type\" \"neon_mul_b_q, neon_mul_h_q, neon_mul_s_q,\\\n+\t\t\t   neon_mul_h_scalar_q, neon_mul_s_scalar_q,\\\n+\t\t\t   neon_sat_mul_b_q, neon_sat_mul_h_q,\\\n+\t\t\t   neon_sat_mul_s_q, neon_sat_mul_h_scalar_q,\\\n+\t\t\t   neon_sat_mul_s_scalar_q,\\\n+\t\t\t   neon_mla_b_q, neon_mla_h_q, neon_mla_s_q,\\\n+\t\t\t   neon_mla_h_scalar_q, neon_mla_s_scalar_q\")\n+\t    (const_string \"neon_multiply_q\")\n+\n+\t  (eq_attr \"type\" \"neon_shift_acc, neon_shift_acc_q\")\n+\t    (const_string \"neon_shift_acc\")\n+\t  (eq_attr \"type\" \"neon_shift_imm, neon_shift_imm_q,\\\n+\t\t\t   neon_shift_imm_narrow_q, neon_shift_imm_long\")\n+\t    (const_string \"neon_shift_imm_basic\")\n+\t  (eq_attr \"type\" \"neon_sat_shift_imm, neon_sat_shift_imm_q,\\\n+\t\t\t   neon_sat_shift_imm_narrow_q\")\n+\t    (const_string \"neon_shift_imm_complex\")\n+\t  (eq_attr \"type\" \"neon_shift_reg\")\n+\t    (const_string \"neon_shift_reg_basic\")\n+\t  (eq_attr \"type\" \"neon_shift_reg_q\")\n+\t    (const_string \"neon_shift_reg_basic_q\")\n+\t  (eq_attr \"type\" \"neon_sat_shift_reg\")\n+\t    (const_string \"neon_shift_reg_complex\")\n+\t  (eq_attr \"type\" \"neon_sat_shift_reg_q\")\n+\t    (const_string \"neon_shift_reg_complex_q\")\n+\n+\t  (eq_attr \"type\" \"neon_fp_neg_s, neon_fp_neg_s_q,\\\n+\t\t\t   neon_fp_abs_s, neon_fp_abs_s_q,\\\n+\t\t\t   neon_fp_neg_d, neon_fp_neg_d_q,\\\n+\t\t\t   neon_fp_abs_d, neon_fp_abs_d_q,\\\n+\t\t\t   neon_fp_minmax_s,neon_fp_minmax_d,\\\n+\t\t\t   neon_fp_reduc_minmax_s,neon_fp_reduc_minmax_d\")\n+\t    (const_string \"neon_fp_negabs\")\n+\t  (eq_attr \"type\" \"neon_fp_addsub_s, neon_fp_abd_s,\\\n+\t\t\t   neon_fp_reduc_add_s, neon_fp_compare_s,\\\n+\t\t\t   neon_fp_round_s,\\\n+\t\t\t   neon_fp_addsub_d, neon_fp_abd_d,\\\n+\t\t\t   neon_fp_reduc_add_d, neon_fp_compare_d,\\\n+\t\t\t   neon_fp_round_d\")\n+\t    (const_string \"neon_fp_arith\")\n+\t  (eq_attr \"type\" \"neon_fp_addsub_s_q, neon_fp_abd_s_q,\\\n+\t\t\t   neon_fp_reduc_add_s_q, neon_fp_compare_s_q,\\\n+\t\t\t   neon_fp_minmax_s_q, neon_fp_round_s_q,\\\n+\t\t\t   neon_fp_addsub_d_q, neon_fp_abd_d_q,\\\n+\t\t\t   neon_fp_reduc_add_d_q, neon_fp_compare_d_q,\\\n+\t\t\t   neon_fp_minmax_d_q, neon_fp_round_d_q\")\n+\t    (const_string \"neon_fp_arith_q\")\n+\t  (eq_attr \"type\" \"neon_fp_reduc_minmax_s_q,\\\n+\t\t\t   neon_fp_reduc_minmax_d_q,\\\n+\t\t\t   neon_fp_reduc_add_s_q, neon_fp_reduc_add_d_q\")\n+\t    (const_string \"neon_fp_reductions_q\")\n+\t  (eq_attr \"type\" \"neon_fp_to_int_s, neon_int_to_fp_s,\\\n+\t\t\t   neon_fp_to_int_d, neon_int_to_fp_d\")\n+\t    (const_string \"neon_fp_cvt_int\")\n+\t  (eq_attr \"type\" \"neon_fp_to_int_s_q, neon_int_to_fp_s_q,\\\n+\t\t\t   neon_fp_to_int_d_q, neon_int_to_fp_d_q\")\n+\t    (const_string \"neon_fp_cvt_int_q\")\n+\t  (eq_attr \"type\" \"neon_fp_cvt_narrow_s_q, neon_fp_cvt_widen_h\")\n+\t    (const_string \"neon_fp_cvt16\")\n+\t  (eq_attr \"type\" \"neon_fp_mul_s, neon_fp_mul_s_scalar,\\\n+\t\t\t   neon_fp_mul_d\")\n+\t    (const_string \"neon_fp_mul\")\n+\t  (eq_attr \"type\" \"neon_fp_mul_s_q, neon_fp_mul_s_scalar_q,\\\n+\t\t\t   neon_fp_mul_d_q, neon_fp_mul_d_scalar_q\")\n+\t    (const_string \"neon_fp_mul_q\")\n+\t  (eq_attr \"type\" \"neon_fp_mla_s, neon_fp_mla_s_scalar,\\\n+\t\t\t   neon_fp_mla_d\")\n+\t    (const_string \"neon_fp_mla\")\n+\t  (eq_attr \"type\" \"neon_fp_mla_s_q, neon_fp_mla_s_scalar_q,\n+\t\t\t   neon_fp_mla_d_q, neon_fp_mla_d_scalar_q\")\n+\t    (const_string \"neon_fp_mla_q\")\n+\t  (eq_attr \"type\" \"neon_fp_recpe_s, neon_fp_rsqrte_s,\\\n+\t\t\t   neon_fp_recpx_s,\\\n+\t\t\t   neon_fp_recpe_d, neon_fp_rsqrte_d,\\\n+\t\t\t   neon_fp_recpx_d\")\n+\t    (const_string \"neon_fp_recpe_rsqrte\")\n+\t  (eq_attr \"type\" \"neon_fp_recpe_s_q, neon_fp_rsqrte_s_q,\\\n+\t\t\t   neon_fp_recpx_s_q,\\\n+\t\t\t   neon_fp_recpe_d_q, neon_fp_rsqrte_d_q,\\\n+\t\t\t   neon_fp_recpx_d_q\")\n+\t    (const_string \"neon_fp_recpe_rsqrte_q\")\n+\t  (eq_attr \"type\" \"neon_fp_recps_s, neon_fp_rsqrts_s,\\\n+\t\t\t   neon_fp_recps_d, neon_fp_rsqrts_d\")\n+\t    (const_string \"neon_fp_recps_rsqrts\")\n+\t  (eq_attr \"type\" \"neon_fp_recps_s_q, neon_fp_rsqrts_s_q,\\\n+\t\t\t   neon_fp_recps_d_q, neon_fp_rsqrts_d_q\")\n+\t    (const_string \"neon_fp_recps_rsqrts_q\")\n+\t  (eq_attr \"type\" \"neon_bsl, neon_cls, neon_cnt,\\\n+\t\t\t   neon_rev, neon_permute, neon_rbit,\\\n+\t\t\t   neon_tbl1, neon_tbl2, neon_zip,\\\n+\t\t\t   neon_dup, neon_dup_q, neon_ext, neon_ext_q,\\\n+\t\t\t   neon_move, neon_move_q, neon_move_narrow_q\")\n+\t    (const_string \"neon_bitops\")\n+\t  (eq_attr \"type\" \"neon_bsl_q, neon_cls_q, neon_cnt_q,\\\n+\t\t\t   neon_rev_q, neon_permute_q, neon_rbit_q\")\n+\t    (const_string \"neon_bitops_q\")\n+\t  (eq_attr \"type\" \"neon_from_gp,f_mcr,f_mcrr\")\n+\t    (const_string \"neon_from_gp\")\n+\t  (eq_attr \"type\" \"neon_from_gp_q\")\n+\t    (const_string \"neon_from_gp_q\")\n+\n+\t  (eq_attr \"type\" \"f_loads, f_loadd,\\\n+\t\t\t   neon_load1_1reg, neon_load1_1reg_q,\\\n+\t\t\t   neon_load1_2reg, neon_load1_2reg_q\")\n+\t    (const_string \"neon_load_a\")\n+\t  (eq_attr \"type\" \"neon_load1_3reg, neon_load1_3reg_q,\\\n+\t\t\t   neon_load1_4reg, neon_load1_4reg_q\")\n+\t    (const_string \"neon_load_b\")\n+\t  (eq_attr \"type\" \"neon_load1_one_lane, neon_load1_one_lane_q,\\\n+\t\t\t   neon_load1_all_lanes, neon_load1_all_lanes_q,\\\n+\t\t\t   neon_load2_2reg, neon_load2_2reg_q,\\\n+\t\t\t   neon_load2_all_lanes, neon_load2_all_lanes_q\")\n+\t    (const_string \"neon_load_c\")\n+\t  (eq_attr \"type\" \"neon_load2_4reg, neon_load2_4reg_q,\\\n+\t\t\t   neon_load3_3reg, neon_load3_3reg_q,\\\n+\t\t\t   neon_load3_one_lane, neon_load3_one_lane_q,\\\n+\t\t\t   neon_load4_4reg, neon_load4_4reg_q\")\n+\t    (const_string \"neon_load_d\")\n+\t  (eq_attr \"type\" \"neon_load2_one_lane, neon_load2_one_lane_q,\\\n+\t\t\t   neon_load3_all_lanes, neon_load3_all_lanes_q,\\\n+\t\t\t   neon_load4_all_lanes, neon_load4_all_lanes_q\")\n+\t    (const_string \"neon_load_e\")\n+\t  (eq_attr \"type\" \"neon_load4_one_lane, neon_load4_one_lane_q\")\n+\t    (const_string \"neon_load_f\")\n+\n+\t  (eq_attr \"type\" \"f_stores, f_stored,\\\n+\t\t\t   neon_store1_1reg\")\n+\t    (const_string \"neon_store_a\")\n+\t  (eq_attr \"type\" \"neon_store1_2reg, neon_store1_1reg_q\")\n+\t    (const_string \"neon_store_b\")\n+\t  (eq_attr \"type\" \"neon_store1_3reg, neon_store1_3reg_q,\\\n+\t\t\t   neon_store3_3reg, neon_store3_3reg_q,\\\n+\t\t\t   neon_store2_4reg, neon_store2_4reg_q,\\\n+\t\t\t   neon_store4_4reg, neon_store4_4reg_q,\\\n+\t\t\t   neon_store2_2reg, neon_store2_2reg_q,\\\n+\t\t\t   neon_store3_one_lane, neon_store3_one_lane_q,\\\n+\t\t\t   neon_store4_one_lane, neon_store4_one_lane_q,\\\n+\t\t\t   neon_store1_4reg, neon_store1_4reg_q,\\\n+\t\t\t   neon_store1_one_lane, neon_store1_one_lane_q,\\\n+\t\t\t   neon_store2_one_lane, neon_store2_one_lane_q\")\n+\t    (const_string \"neon_store_complex\")]\n+\t  (const_string \"unknown\")))\n+\n+;; The tsv110 core is modelled as issues pipeline that has\n+;; the following functional units.\n+;; 1.  Three pipelines for integer operations: ALU1, ALU2, ALU3\n+\n+(define_cpu_unit \"tsv110_alu1_issue\" \"tsv110\")\n+(define_reservation \"tsv110_alu1\" \"tsv110_alu1_issue\")\n+\n+(define_cpu_unit \"tsv110_alu2_issue\" \"tsv110\")\n+(define_reservation \"tsv110_alu2\" \"tsv110_alu2_issue\")\n+\n+(define_cpu_unit \"tsv110_alu3_issue\" \"tsv110\")\n+(define_reservation \"tsv110_alu3\" \"tsv110_alu3_issue\")\n+\n+;; 2.  One pipeline for complex integer operations: MDU\n+\n+(define_cpu_unit \"tsv110_mdu_issue\" \"tsv110\")\n+(define_reservation \"tsv110_mdu\" \"tsv110_mdu_issue\")\n+\n+;; 3.  Two asymmetric pipelines for Asimd and FP operations: FSU1, FSU2\n+(define_automaton \"tsv110_fsu\")\n+\n+(define_cpu_unit \"tsv110_fsu1_issue\"\n+\t\t \"tsv110_fsu\")\n+(define_cpu_unit \"tsv110_fsu2_issue\"\n+\t\t \"tsv110_fsu\")\n+\n+(define_reservation \"tsv110_fsu1\" \"tsv110_fsu1_issue\")\n+(define_reservation \"tsv110_fsu2\" \"tsv110_fsu2_issue\")\n+\n+;; 4.  Two pipeline for branch operations but same with alu2 and alu3: BRU1, BRU2\n+\n+;; 5.  Two pipelines for load and store operations: LS1, LS2.\n+\n+(define_cpu_unit \"tsv110_ls1_issue\" \"tsv110\")\n+(define_cpu_unit \"tsv110_ls2_issue\" \"tsv110\")\n+(define_reservation \"tsv110_ls1\" \"tsv110_ls1_issue\")\n+(define_reservation \"tsv110_ls2\" \"tsv110_ls2_issue\")\n+\n+;; Block all issue queues.\n+\n+(define_reservation \"tsv110_block\" \"tsv110_fsu1_issue + tsv110_fsu2_issue\n+\t\t\t\t  + tsv110_mdu_issue + tsv110_alu1_issue\n+\t\t\t\t  + tsv110_alu2_issue + tsv110_alu3_issue + tsv110_ls1_issue + tsv110_ls2_issue\")\n+\n+;; Simple Execution Unit:\n+;;\n+;; Simple ALU without shift\n+(define_insn_reservation \"tsv110_alu\" 1\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"alu_imm,logic_imm,\\\n+\t\t\talu_sreg,logic_reg,\\\n+\t\t\tadc_imm,adc_reg,\\\n+\t\t\tadr,bfm,clz,rbit,rev,\\\n+\t\t\tshift_imm,shift_reg,\\\n+\t\t\tmov_imm,mov_reg,\\\n+\t\t\tmvn_imm,mvn_reg,\\\n+\t\t\tmrs,multiple,no_insn\"))\n+  \"tsv110_alu1|tsv110_alu2|tsv110_alu3\")\n+  \n+(define_insn_reservation \"tsv110_alus\" 1\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"alus_imm,logics_imm,\\\n+\t\t\talus_sreg,logics_reg,\\\n+\t\t\tadcs_imm,adcs_reg\"))\n+  \"tsv110_alu2|tsv110_alu3\")\n+\n+;; ALU ops with shift\n+(define_insn_reservation \"tsv110_alu_shift\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"extend,\\\n+\t\t\talu_shift_imm,alu_shift_reg,\\\n+\t\t\tcrc,logic_shift_imm,logic_shift_reg,\\\n+\t\t\tmov_shift,mvn_shift,\\\n+\t\t\tmov_shift_reg,mvn_shift_reg\"))\n+  \"tsv110_mdu\")\n+  \n+(define_insn_reservation \"tsv110_alus_shift\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"alus_shift_imm,alus_shift_reg,\\\n+\t\t\tlogics_shift_imm,logics_shift_reg\"))\n+  \"tsv110_alu2|tsv110_alu3\")\n+\n+;; Multiplies instructions\n+(define_insn_reservation \"tsv110_mult\" 3\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (ior (eq_attr \"mul32\" \"yes\")\n+\t    (eq_attr \"widen_mul64\" \"yes\")))\n+  \"tsv110_mdu\")\n+\n+;; Integer divide\n+(define_insn_reservation \"tsv110_div\" 10\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"udiv,sdiv\"))\n+  \"tsv110_mdu\")\n+\n+;; Block all issue pipes for a cycle\n+(define_insn_reservation \"tsv110_block\" 1\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"block\"))\n+  \"tsv110_block\")\n+\n+;; Branch execution Unit\n+;;\n+;; Branches take two issue slot.\n+;; No latency as there is no result\n+(define_insn_reservation \"tsv110_branch\" 0\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"branch\"))\n+  \"tsv110_alu2|tsv110_alu3\")\n+\n+;; Load-store execution Unit\n+;;\n+;; Loads of up to two words.\n+(define_insn_reservation \"tsv110_load1\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"load_4,load_8\"))\n+  \"tsv110_ls1|tsv110_ls2\")\n+\n+;; Stores of up to two words.\n+(define_insn_reservation \"tsv110_store1\" 0\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"store_4,store_8\"))\n+  \"tsv110_ls1|tsv110_ls2\")\n+\n+;; Advanced SIMD Unit - Integer Arithmetic Instructions.\n+\n+(define_insn_reservation  \"tsv110_neon_abd_aba\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_abd,neon_arith_acc\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation  \"tsv110_neon_abd_aba_q\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_arith_acc_q\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation  \"tsv110_neon_arith_basic\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_arith_basic\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation  \"tsv110_neon_arith_complex\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_arith_complex\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+;; Integer Multiply Instructions.\n+;; D-form\n+(define_insn_reservation \"tsv110_neon_multiply\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_multiply\"))\n+  \"tsv110_fsu1\")\n+\n+(define_insn_reservation \"tsv110_neon_multiply_dlong\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_mul_d_long\"))\n+  \"tsv110_fsu1\")\n+\n+;; Q-form\n+(define_insn_reservation \"tsv110_neon_multiply_q\" 8\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_multiply_q\"))\n+  \"tsv110_fsu1\")\n+\n+;; Integer Shift Instructions.\n+\n+(define_insn_reservation\n+  \"tsv110_neon_shift_acc\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_shift_acc,\\\n+\t   neon_shift_imm_basic,neon_shift_imm_complex,neon_shift_reg_basic,\\\n+\t   neon_shift_reg_complex\"))\n+  \"tsv110_fsu1\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_shift_acc_q\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_shift_reg_basic_q,\\\n+\t   neon_shift_reg_complex_q\"))\n+  \"tsv110_fsu1\")\n+\n+;; Floating Point Instructions.\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_negabs\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_negabs\"))\n+  \"(tsv110_fsu1|tsv110_fsu2)\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_arith\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_arith\"))\n+  \"(tsv110_fsu1|tsv110_fsu2)\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_arith_q\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_arith_q\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+  \n+(define_insn_reservation\n+  \"tsv110_neon_fp_minmax_q\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_fp_minmax_s_q,neon_fp_minmax_d_q\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_reductions_q\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_reductions_q\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_cvt_int\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_cvt_int,neon_fp_cvt_int_q\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_mul\" 5\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_mul\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_mul_q\" 5\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_mul_q\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_mla\" 7\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_mla,\\\n+\t   neon_fp_recps_rsqrts\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_recpe_rsqrte\" 3\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_recpe_rsqrte\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_mla_q\" 7\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_mla_q,\\\n+\t   neon_fp_recps_rsqrts_q\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_fp_recpe_rsqrte_q\" 3\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_fp_recpe_rsqrte_q\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+;; Miscellaneous Instructions.\n+\n+(define_insn_reservation\n+  \"tsv110_neon_bitops\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_bitops\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_dup\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_from_gp,f_mcr\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_mov\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"f_mcrr\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_bitops_q\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_bitops_q\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_from_gp_q\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_from_gp_q\"))\n+  \"(tsv110_alu1+tsv110_fsu1)|(tsv110_alu1+tsv110_fsu2)\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_to_gp\" 3\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_to_gp,neon_to_gp_q\"))\n+  \"tsv110_fsu1\")\n+\n+;; Load Instructions.\n+\n+(define_insn_reservation\n+  \"tsv110_neon_ld1_lane\" 8\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_load1_one_lane,neon_load1_one_lane_q,\\\n+\t   neon_load1_all_lanes,neon_load1_all_lanes_q\"))\n+  \"(tsv110_ls1 + tsv110_fsu1)|(tsv110_ls1 + tsv110_fsu2)|(tsv110_ls2 + tsv110_fsu1)|(tsv110_ls2 + tsv110_fsu2)\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_ld1_reg1\" 6\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"f_loads,f_loadd,neon_load1_1reg,neon_load1_1reg_q\"))\n+  \"tsv110_ls1|tsv110_ls2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_ld1_reg2\" 6\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_load1_2reg,neon_load1_2reg_q\"))\n+  \"tsv110_ls1|tsv110_ls2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_ld1_reg3\" 7\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_load1_3reg,neon_load1_3reg_q\"))\n+  \"tsv110_ls1|tsv110_ls2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_ld1_reg4\" 7\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_load1_4reg,neon_load1_4reg_q\"))\n+  \"tsv110_ls1|tsv110_ls2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_ld2\" 8\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_load1_2reg,neon_load1_2reg_q,\\\n+\t   neon_load2_2reg,neon_load2_2reg_q,neon_load2_all_lanes,\\\n+\t   neon_load2_all_lanes_q,neon_load2_one_lane,neon_load2_one_lane_q\"))\n+  \"(tsv110_ls1 + tsv110_fsu1)|(tsv110_ls1 + tsv110_fsu2)|(tsv110_ls2 + tsv110_fsu1)|(tsv110_ls2 + tsv110_fsu2)\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_ld3\" 9\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_load3_3reg,neon_load3_3reg_q,\\\n+\t   neon_load3_one_lane,neon_load3_one_lane_q,\\\n+\t   neon_load3_all_lanes,neon_load3_all_lanes_q\"))\n+  \"(tsv110_ls1 + tsv110_fsu1)|(tsv110_ls1 + tsv110_fsu2)|(tsv110_ls2 + tsv110_fsu1)|(tsv110_ls2 + tsv110_fsu2)\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_ld4_lane\" 9\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_load4_all_lanes,neon_load4_all_lanes_q,\\\n+\t   neon_load4_one_lane,neon_load4_one_lane_q\"))\n+  \"(tsv110_ls1 + tsv110_fsu1)|(tsv110_ls1 + tsv110_fsu2)|(tsv110_ls2 + tsv110_fsu1)|(tsv110_ls2 + tsv110_fsu2)\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_ld4_reg\" 11\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"neon_load4_all_lanes,neon_load4_all_lanes_q,\\\n+\t   neon_load4_one_lane,neon_load4_one_lane_q\"))\n+  \"(tsv110_ls1 + tsv110_fsu1)|(tsv110_ls1 + tsv110_fsu2)|(tsv110_ls2 + tsv110_fsu1)|(tsv110_ls2 + tsv110_fsu2)\")\n+\n+;; Store Instructions.\n+\n+(define_insn_reservation\n+  \"tsv110_neon_store_a\" 0\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_store_a\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation\n+  \"tsv110_neon_store_b\" 0\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_store_b\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+;; These block issue for a number of cycles proportional to the number\n+;; of 64-bit chunks they will store, we don't attempt to model that\n+;; precisely, treat them as blocking execution for two cycles when\n+;; issued.\n+(define_insn_reservation\n+  \"tsv110_neon_store_complex\" 0\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"tsv110_neon_type\" \"neon_store_complex\"))\n+  \"tsv110_block*2\")\n+\n+;; Floating-Point Operations.\n+\n+(define_insn_reservation \"tsv110_fp_const\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"fconsts,fconstd,fmov\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation \"tsv110_fp_add_sub\" 5\n+  (and (eq_attr \"tune\" \"tsv110\")\n+    (eq_attr \"type\" \"fadds,faddd,fmuls,fmuld\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation \"tsv110_fp_mac\" 7\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"fmacs,ffmas,fmacd,ffmad\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation \"tsv110_fp_cvt\" 3\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"f_cvt\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation \"tsv110_fp_cvtf2i\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"f_cvtf2i\"))\n+  \"tsv110_fsu1\")\n+\n+(define_insn_reservation \"tsv110_fp_cvti2f\" 5\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"f_cvti2f\"))\n+  \"(tsv110_alu1+tsv110_fsu1)|(tsv110_alu1+tsv110_fsu2)\")\n+\n+(define_insn_reservation \"tsv110_fp_cmp\" 4\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"fcmps,fcmpd\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation \"tsv110_fp_arith\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"ffariths,ffarithd\"))\n+  \"tsv110_fsu1|tsv110_fsu2\")\n+\n+(define_insn_reservation \"tsv110_fp_divs\" 12\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"fdivs,neon_fp_div_s,fdivd,neon_fp_div_d,\\\n+\t   neon_fp_div_s_q,neon_fp_div_d_q\"))\n+  \"tsv110_fsu1\")\n+\n+(define_insn_reservation \"tsv110_fp_sqrts\" 24\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"fsqrts,neon_fp_sqrt_s,fsqrtd,neon_fp_sqrt_d,\\\n+\t   neon_fp_sqrt_s_q,neon_fp_sqrt_d_q\"))\n+  \"tsv110_fsu2\")\n+\n+(define_insn_reservation \"tsv110_crypto_aes\" 3\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"crypto_aese,crypto_aesmc\"))\n+  \"tsv110_fsu1\")\n+  \n+(define_insn_reservation \"tsv110_crypto_sha1_fast\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"crypto_sha1_fast,crypto_sha1_xor\"))\n+  \"(tsv110_fsu1|tsv110_fsu2)\")\n+\n+(define_insn_reservation \"tsv110_crypto_sha256_fast\" 2\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"crypto_sha256_fast\"))\n+  \"tsv110_fsu1\")\n+\n+(define_insn_reservation \"tsv110_crypto_complex\" 5\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"crypto_sha1_slow,crypto_sha256_slow\"))\n+  \"tsv110_fsu1\")\n+\n+;; We lie with calls.  They take up all issue slots, but are otherwise\n+;; not harmful.\n+(define_insn_reservation \"tsv110_call\" 1\n+  (and (eq_attr \"tune\" \"tsv110\")\n+       (eq_attr \"type\" \"call\"))\n+  \"tsv110_alu1_issue+tsv110_alu2_issue+tsv110_alu3_issue+tsv110_fsu1_issue+tsv110_fsu2_issue\\\n+    +tsv110_mdu_issue+tsv110_ls1_issue+tsv110_ls2_issue\"\n+)\n+\n+;; Simple execution unit bypasses\n+(define_bypass 1 \"tsv110_alu\"\n+\t         \"tsv110_alu,tsv110_alu_shift\")\n+(define_bypass 2 \"tsv110_alu_shift\"\n+\t         \"tsv110_alu,tsv110_alu_shift\")\n+\n+;; An MLA or a MUL can feed a dependent MLA.\n+(define_bypass 3 \"tsv110_neon_*mla*,tsv110_neon_*mul*\"\n+\t\t \"tsv110_neon_*mla*\")\n+\n+;; We don't need to care about control hazards, either the branch is\n+;; predicted in which case we pay no penalty, or the branch is\n+;; mispredicted in which case instruction scheduling will be unlikely to\n+;; help.\n+(define_bypass 1 \"tsv110_*\"\n+\t\t \"tsv110_call,tsv110_branch\")"}]}