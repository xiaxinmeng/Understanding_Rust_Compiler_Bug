{"sha": "86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZhZDBkZDYwMGI1ZGE0MGFjNWMwZWJkOGRjMjMwYTYwM2QzZmNlMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-05T07:33:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-05T07:33:18Z"}, "message": "[multiple changes]\n\n2006-06-05  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random.tcc (Max::value()): Cast 1 to Tp(1) and\n\tadjust shift count to w; rename as Max_w.\n\t(struct Mod_w): New.\n\t(mersenne_twister<>::seed(Gen&, false_type): Use the latter.\n\t(mersenne_twister<>::operator()()): Fix ~0ul to ~_UInt().\n\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n\tcons/default.cc: Fix ~0ul to 2^32-1.\n\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n\tcons/gen1.cc: Likewise.\n\n2006-06-05  Stephen M. Webb  <stephen.webb@bregmasoft.com>\n\n\t* include/tr1/random: New.\n\t* include/tr1/random.tcc: Likewise.\n\t* include/Makefile.am: Add.\n\t* testsuite/tr1/5_numerical_facilies/random/ranlux3.cc: New.\n\t* testsuite/tr1/5_numerical_facilies/random/ranlux4.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/mt19937.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/variate_generator/\n\trequirements/typedefs.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n\tcons/seed1.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n\tcons/seed2.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n\tcons/default.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n\tcons/gen1.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n\trequirements/typedefs.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n\toperators/equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n\toperators/not_equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n\toperators/serialize.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/uniform_real/\n\trequirements/typedefs.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/discard_block/\n\trequirements/requirements.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n\tcons/seed1.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n\tcons/seed2.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n\tcons/default.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n\tcons/gen1.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n\trequirements/non_uint_neg.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n\trequirements/typedefs.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n\toperators/equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n\toperators/not_equal.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n\toperators/serialize.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/xor_combine/\n\trequirements/typedefs.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/minstd_rand.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/minstd_rand0.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/uniform_int/\n\tcons/range.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/uniform_int/\n\tcons/default.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/uniform_int/\n\tcons/range_neg.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/uniform_int/\n\trequirements/typedefs.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n\tcons/seed1.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n\tcons/seed2.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n\tcons/default.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n\tcons/gen1.cc: Likewise.\n\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n\trequirements/typedefs.cc: Likewise.\n\t* include/Makefile.in: Regenerate.\n\t* testsuite/tr1/headers.cc: Update.\n\nFrom-SVN: r114384", "tree": {"sha": "71961b684483462b55c7cd99d08389739a5e2c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71961b684483462b55c7cd99d08389739a5e2c7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/comments", "author": null, "committer": null, "parents": [{"sha": "2b643edaf8c711e67a882d4508b114fbf1210233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b643edaf8c711e67a882d4508b114fbf1210233", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b643edaf8c711e67a882d4508b114fbf1210233"}], "stats": {"total": 3629, "additions": 3629, "deletions": 0}, "files": [{"sha": "1c04e88339e20171837e5808993fe4357f160a14", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -1,3 +1,88 @@\n+2006-06-05  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random.tcc (Max::value()): Cast 1 to Tp(1) and\n+\tadjust shift count to w; rename as Max_w.\n+\t(struct Mod_w): New.\n+\t(mersenne_twister<>::seed(Gen&, false_type): Use the latter.\n+\t(mersenne_twister<>::operator()()): Fix ~0ul to ~_UInt().\n+\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n+\tcons/default.cc: Fix ~0ul to 2^32-1.\n+\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n+\tcons/gen1.cc: Likewise.\n+\n+2006-06-05  Stephen M. Webb  <stephen.webb@bregmasoft.com>\n+\n+\t* include/tr1/random: New.\n+\t* include/tr1/random.tcc: Likewise.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/tr1/5_numerical_facilies/random/ranlux3.cc: New.\n+\t* testsuite/tr1/5_numerical_facilies/random/ranlux4.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/mt19937.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/variate_generator/\n+\trequirements/typedefs.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n+\tcons/seed1.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n+\tcons/seed2.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n+\tcons/default.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n+\tcons/gen1.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n+\trequirements/typedefs.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n+\toperators/equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n+\toperators/not_equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/\n+\toperators/serialize.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/uniform_real/\n+\trequirements/typedefs.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/discard_block/\n+\trequirements/requirements.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n+\tcons/seed1.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n+\tcons/seed2.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n+\tcons/default.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n+\tcons/gen1.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n+\trequirements/non_uint_neg.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n+\trequirements/typedefs.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n+\toperators/equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n+\toperators/not_equal.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/linear_congruential/\n+\toperators/serialize.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/xor_combine/\n+\trequirements/typedefs.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/minstd_rand.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/minstd_rand0.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/uniform_int/\n+\tcons/range.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/uniform_int/\n+\tcons/default.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/uniform_int/\n+\tcons/range_neg.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/uniform_int/\n+\trequirements/typedefs.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n+\tcons/seed1.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n+\tcons/seed2.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n+\tcons/default.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n+\tcons/gen1.cc: Likewise.\n+\t* testsuite/tr1/5_numerical_facilies/random/mersenne_twister/\n+\trequirements/typedefs.cc: Likewise.\n+\t* include/Makefile.in: Regenerate.\n+\t* testsuite/tr1/headers.cc: Update.\n+\n 2006-06-04  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/27867"}, {"sha": "9d9e34b2faa42bc06c965de4e8f881597809e0d7", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -512,6 +512,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/math.h \\\n \t${tr1_srcdir}/memory \\\n \t${tr1_srcdir}/mu_iterate.h \\\n+\t${tr1_srcdir}/random \\\n+\t${tr1_srcdir}/random.tcc \\\n \t${tr1_srcdir}/ref_fwd.h \\\n \t${tr1_srcdir}/ref_wrap_iterate.h \\\n \t${tr1_srcdir}/repeat.h \\"}, {"sha": "b130530963741f354707dd80f7653fcad06fe219", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -731,6 +731,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/math.h \\\n \t${tr1_srcdir}/memory \\\n \t${tr1_srcdir}/mu_iterate.h \\\n+\t${tr1_srcdir}/random \\\n+\t${tr1_srcdir}/random.tcc \\\n \t${tr1_srcdir}/ref_fwd.h \\\n \t${tr1_srcdir}/ref_wrap_iterate.h \\\n \t${tr1_srcdir}/repeat.h \\"}, {"sha": "a4ec86e6a815673b56af9dc7987db67340962ee0", "filename": "libstdc++-v3/include/tr1/random", "status": "added", "additions": 1609, "deletions": 0, "changes": 1609, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,1609 @@\n+// random number generation -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _STD_TR1_RANDOM\n+#define _STD_TR1_RANDOM 1\n+\n+/**\n+ * @file \n+ * This is a TR1 C++ Library header. \n+ */\n+\n+#include <algorithm>\n+#include <bits/concept_check.h>\n+#include <bits/cpp_type_traits.h>\n+#include <cmath>\n+#include <debug/debug.h>\n+#include <iterator>\n+#include <iosfwd>\n+#include <limits>\n+#include <tr1/type_traits>\n+\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  // [5.1] Random number generation\n+\n+  /**\n+   * @addtogroup tr1_random Random Number Generation\n+   * A facility for generating random numbers on selected distributions.\n+   * @{\n+   */\n+\n+  /*\n+   * Implementation-space details.\n+   */\n+  namespace _Private\n+  {\n+    // Type selectors -- are these already implemeted elsewhere?\n+    template<bool, typename _TpTrue, typename _TpFalse>\n+      struct _Select\n+      {\n+\ttypedef _TpTrue Type;\n+      };\n+\n+    template<typename _TpTrue, typename _TpFalse>\n+      struct _Select<false, _TpTrue, _TpFalse>\n+      {\n+\ttypedef _TpFalse Type;\n+      };\n+\n+    /*\n+     * An adaptor class for converting the output of any Generator into\n+     * the input for a specific Distribution.\n+     */\n+    template<typename _Generator, typename _Distribution>\n+      struct _Adaptor\n+      { \n+\ttypedef typename _Generator::result_type   generated_type;\n+\ttypedef typename _Distribution::input_type result_type;\n+\n+      public:\n+\t_Adaptor(const _Generator& __g)\n+\t: _M_g(__g) { }\n+\n+\tresult_type\n+\toperator()();\n+\n+      private:\n+\t_Generator _M_g;\n+      };\n+\n+    /*\n+     * Converts a value generated by the adapted random number genereator into a\n+     * value in the input domain for the dependent random number distribution.\n+     *\n+     * Because the type traits are compile time constants only the appropriate\n+     * clause of the if statements will actually be emitted by the compiler.\n+     */\n+    template<typename _Generator, typename _Distribution>\n+      typename _Adaptor<_Generator, _Distribution>::result_type\n+      _Adaptor<_Generator, _Distribution>::\n+      operator()()\n+      {\n+\tresult_type __return_value = 0;\n+\tif (is_integral<generated_type>::value\n+\t    && is_integral<result_type>::value)\n+\t  __return_value = _M_g();\n+      \telse if (is_integral<generated_type>::value\n+\t\t && !is_integral<result_type>::value)\n+\t  __return_value = result_type(_M_g())\n+\t    / result_type(_M_g.max() - _M_g.min() + 1);\n+\telse if (!is_integral<generated_type>::value\n+\t\t && !is_integral<result_type>::value)\n+\t  __return_value = result_type(_M_g())\n+\t    / result_type(_M_g.max() - _M_g.min());\n+      \treturn __return_value;\n+      }\n+\n+  } // namespace std::tr1::_Private\n+\n+\n+  /**\n+   * Produces random numbers on a given disribution function using a un uniform\n+   * random number generation engine.\n+   *\n+   * @todo the engine_value_type needs to be studied more carefully.\n+   */\n+  template<typename _Generator, typename _Dist>\n+    class variate_generator\n+    {\n+      // Concept requirements.\n+      __glibcxx_class_requires(_Generator, _CopyConstructibleConcept)\n+      //  __glibcxx_class_requires(_Generator, _GeneratorConcept)\n+      //  __glibcxx_class_requires(_Dist,      _GeneratorConcept)\n+\n+    public:\n+      typedef _Generator                             engine_type;\n+      typedef _Private::_Adaptor<_Generator, _Dist>  engine_value_type;\n+      typedef _Dist                                  distribution_type;\n+      typedef typename _Dist::result_type            result_type;\n+\n+      // tr1:5.1.1 table 5.1 requirement\n+      typedef typename std::__enable_if<result_type,\n+\t\t\t\t\tis_arithmetic<result_type>::value\n+        >::__type _IsValidType;\n+\n+    public:\n+      /**\n+       * Constructs a variate generator with the uniform random number\n+       * generator @p eng for the random distribution @p d.\n+       *\n+       * @throws Any exceptions which may thrown by the copy constructors of the\n+       * @p _Generator or @p _Dist objects.\n+       */\n+      variate_generator(engine_type __eng, distribution_type __dist)\n+      : _M_engine(__eng), _M_dist(__dist) { }\n+\n+      /**\n+       * Gets the next generated value on the distribution.\n+       */\n+      result_type\n+      operator()();\n+\n+      template<typename _Tp>\n+        result_type\n+        operator()(_Tp __value);\n+\n+      /**\n+       * Gets a reference to the underlying uniform random number generator\n+       * object.\n+       */\n+      engine_value_type&\n+      engine()\n+      { return _M_engine; }\n+\n+      /**\n+       * Gets a const reference to the underlying uniform random number\n+       * generator object.\n+       */\n+      const engine_value_type&\n+      engine() const\n+      { return _M_engine; }\n+\n+      /**\n+       * Gets a reference to the underlying random distribution.\n+       */\n+      distribution_type&\n+      distribution()\n+      { return _M_dist; }\n+\n+      /**\n+       * Gets a const reference to the underlying random distribution.\n+       */\n+      const distribution_type&\n+      distribution() const\n+      { return _M_dist; }\n+\n+      /**\n+       * Gets the closed lower bound of the distribution interval.\n+       */\n+      result_type\n+      min() const\n+      { return this->distribution().min(); }\n+\n+      /**\n+       * Gets the closed upper bound of the distribution interval.\n+       */\n+      result_type\n+      max() const\n+      { return this->distribution().max(); }\n+\n+    private:\n+      engine_value_type _M_engine;\n+      distribution_type _M_dist;\n+    };\n+\n+  /**\n+   * Gets the next random value on the given distribution.\n+   */\n+  template<typename _Generator, typename _Dist>\n+    typename variate_generator<_Generator, _Dist>::result_type\n+    variate_generator<_Generator, _Dist>::\n+    operator()()\n+    { return _M_dist(_M_engine); }\n+\n+  /**\n+   * WTF?\n+   */\n+  template<typename _Generator, typename _Dist>\n+    template<typename _Tp>\n+      typename variate_generator<_Generator, _Dist>::result_type\n+      variate_generator<_Generator, _Dist>::\n+      operator()(_Tp __value)\n+      { return _M_dist(_M_engine, __value); }\n+\n+\n+  /**\n+   * @addtogroup tr1_random_generators Random Number Generators\n+   * @ingroup tr1_random\n+   *\n+   * These classes define objects which provide random or pseudorandom numbers,\n+   * either from a discrete or a continuous interval.  The random number\n+   * generator supplied as a part of this library are all uniform random number\n+   * generators which provide a sequence of random number uniformly distributed\n+   * over their range.\n+   *\n+   * A number generator is a function object with an operator() that takes zero\n+   * arguments and returns a number.\n+   *\n+   * A compliant random number generator must satisy the following requirements.\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Random Number Generator Requirements</caption>\n+   * <tr><td>To be documented.</td></tr>\n+   * </table>\n+   * \n+   * @{\n+   */\n+\n+  /**\n+   * @brief A model of a linear congruential random number generator.\n+   *\n+   * A random number generator that produces pseudorandom numbers using the\n+   * linear function @f$x_{i+1}\\leftarrow(ax_{i} + c) \\bmod m @f$.\n+   *\n+   * The template parameter @p UIntType must be an unsigned integral type large\n+   * enough to store values up to (m-1). If the template parameter @p m is 0,\n+   * the modulus @p m used is std::numeric_limits<UIntType>::max() plus 1.\n+   * Otherwise, the template parameters @p a and @p c must be less than @p m.\n+   *\n+   * The size of the state is @f$ 1 @f$.\n+   */\n+  template<class UIntType, UIntType a, UIntType c, UIntType m>\n+    class linear_congruential\n+    {\n+      __glibcxx_class_requires(UIntType, _UnsignedIntegerConcept)\n+      //  __glibcpp_class_requires(a < m && c < m)\n+\n+    public:\n+      /** The type of the generated random value. */\n+      typedef UIntType result_type;\n+\n+      /** The multiplier. */\n+      static const UIntType multiplier = a;\n+      /** An increment. */\n+      static const UIntType increment = c;\n+      /** The modulus. */\n+      static const UIntType modulus = m;\n+\n+      /**\n+       * Constructs a %linear_congruential random number generator engine with\n+       * seed @p s.  The default seed value is 1.\n+       *\n+       * @param s The initial seed value.\n+       */\n+      explicit linear_congruential(unsigned long s = 1);\n+\n+      /**\n+       * Constructs a %linear_congruential random number generator engine\n+       * seeded from the generator function @g.\n+       *\n+       * @param g The seed generator function.\n+       */\n+      template<class Gen>\n+        linear_congruential(Gen& g);\n+\n+      /**\n+       * Resets the %linear_congruential random number generator engine sequence\n+       * to @p.\n+       *\n+       * @param s The new seed.\n+       */\n+      void\n+      seed(unsigned long s = 1);\n+\n+      /**\n+       * Resets the %linear_congruential random number generator engine sequence\n+       * using a vlaue from the generator function @g.\n+       *\n+       * @param g the seed generator function.\n+       */\n+      template<class Gen>\n+        void\n+        seed(Gen& g)\n+        { seed(g, typename is_fundamental<Gen>::type()); }\n+\n+      /**\n+       * Gets the smallest possible value in the output range.\n+       */\n+      result_type\n+      min() const;\n+\n+      /**\n+       * Gets the largest possible value in the output range.\n+       */\n+      result_type\n+      max() const;\n+\n+      /**\n+       * Gets the next random number in the sequence.\n+       */\n+      result_type\n+      operator()();\n+\n+      /**\n+       * Compares two linear congruential random number generator objects of the\n+       * same type for equality.\n+       *  \n+       * @param lhs A linear congruential random number generator object.\n+       * @param rhs Another linear congruential random number generator object.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const linear_congruential& lhs, const linear_congruential& rhs)\n+      { return lhs.m_x == rhs.m_x; }\n+\n+      /**\n+       * Compares two linear congruential random number generator objects of the\n+       * same type for inequality.\n+       *\n+       * @param lhs A linear congruential random number generator object.\n+       * @param rhs Another linear congruential random number generator object.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const linear_congruential& lhs, const linear_congruential& rhs)\n+      { return !(lhs == rhs); }\n+\n+      /**\n+       * Writes the textual representation of the state x(i) of x to @p os.\n+       *\n+       * @param os  The output stream.\n+       * @param lcr A linear_congruential random number generator.\n+       * @returns os.\n+       */\n+      template<typename CharT, typename Traits>\n+        friend std::basic_ostream<CharT, Traits>&\n+        operator<<(std::basic_ostream<CharT, Traits>& os,\n+\t\t   const linear_congruential& lcr)\n+        { return os << lcr.m_x; }\n+\n+      /**\n+       * Sets the state of the engine by reading its textual\n+       * representation from @p is.\n+       *\n+       * The textual representation must have been previously written using an\n+       * output stream whose imbued locale and whose type's template\n+       * specialization arguments CharT and Traits were the same as those of\n+       * @p is.\n+       *\n+       * @param is  The input stream.\n+       * @param lcr A linear_congruential random number generator.\n+       * @returns os.\n+       */\n+      template<typename CharT, typename Traits>\n+        friend std::basic_istream<CharT, Traits>&\n+        operator>>(std::basic_istream<CharT, Traits>& is,\n+\t\t   linear_congruential& lcr)\n+        { return is >> lcr.m_x; }\n+\n+    private:\n+      template<class Gen>\n+        void\n+        seed(Gen& g, true_type)\n+        { return seed(static_cast<unsigned long>(g)); }\n+\n+      template<class Gen>\n+        void\n+        seed(Gen& g, false_type);\n+\n+    private:\n+      UIntType m_x;\n+    };\n+\n+  /**\n+   * The classic Minimum Standard rand0 of Lewis, Goodman, and Miller.\n+   */\n+  typedef linear_congruential<unsigned int, 16807, 0, 2147483647> minstd_rand0;\n+\n+  /**\n+   * An alternative LCR (Lehmer Generator function) .\n+   */\n+  typedef linear_congruential<unsigned int, 48271, 0, 2147483647> minstd_rand;\n+\n+\n+  /**\n+   * A generalized feedback shift register discrete random number generator.\n+   *\n+   * This algorithm avoind multiplication and division and is designed to be\n+   * friendly to a pipelined architecture.  If the parameters are chosen\n+   * correctly, this generator will produce numbers with a very long period and\n+   * fairly good apparent entropy, although still not cryptographically strong.\n+   *\n+   * The best way to use this generator is with the predefined mt19937 class.\n+   *\n+   * This algorithm was originally invented by Makoto Matsumoto and\n+   * Takuji Nishimura.\n+   *\n+   * @var word_size   The number of bits in each element of the state vector.\n+   * @var state_size  The degree of recursion.\n+   * @var shift_size  The period parameter.\n+   * @var mask_bits   The separation point bit index.\n+   * @var parameter_a The last row of the twist matrix.\n+   * @var output_u    The first right-shift tempering matrix parameter.\n+   * @var output_s    The first left-shift tempering matrix parameter.\n+   * @var output_b    The first left-shift tempering matrix mask.\n+   * @var output_t    The second left-shift tempering matrix parameter.\n+   * @var output_c    The second left-shift tempering matrix mask.\n+   * @var output_l    The second right-shift tempering matrix parameter.\n+   */\n+  template<class UIntType, int w, int n, int m, int r,\n+\t   UIntType a, int u, int s, UIntType b, int t, UIntType c, int l>\n+    class mersenne_twister\n+    {\n+      __glibcxx_class_requires(UIntType, _UnsignedIntegerConcept)\n+\n+    public:\n+      // types\n+      typedef UIntType result_type ;\n+\n+      // parameter values\n+      static const int      word_size   = w;\n+      static const int      state_size  = n;\n+      static const int      shift_size  = m;\n+      static const int      mask_bits   = r;\n+      static const UIntType parameter_a = a;\n+      static const int      output_u    = u;\n+      static const int      output_s    = s;\n+      static const UIntType output_b    = b;\n+      static const int      output_t    = t;\n+      static const UIntType output_c    = c;\n+      static const int      output_l    = l;\n+\n+      // constructors and member function\n+      mersenne_twister()\n+      { seed(); }\n+\n+      explicit\n+      mersenne_twister(unsigned long value)\n+      { seed(value); }\n+\n+      template<class Gen>\n+        mersenne_twister(Gen& g)\n+        { seed(g); }\n+\n+      void\n+      seed()\n+      { seed(0UL); }\n+\n+      void\n+      seed(unsigned long value);\n+\n+      template<class Gen>\n+        void\n+        seed(Gen& g)\n+        { seed(g, typename is_fundamental<Gen>::type()); }\n+\n+      result_type\n+      min() const\n+      { return 0; };\n+\n+      result_type\n+      max() const;\n+\n+      result_type\n+      operator()();\n+\n+    private:\n+      template<class Gen>\n+        void\n+        seed(Gen& g, true_type)\n+        { return seed(static_cast<unsigned long>(g)); }\n+\n+      template<class Gen>\n+        void\n+        seed(Gen& g, false_type);\n+\n+    private:\n+      UIntType _M_x[state_size];\n+      int      _M_p;\n+    };\n+\n+  /**\n+   * The classic Mersenne Twister.\n+   *\n+   * Reference:\n+   * M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-Dimensionally\n+   * Equidistributed Uniform Pseudo-Random Number Generator\", ACM Transactions\n+   * on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.\n+   */\n+  typedef mersenne_twister<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18\n+    > mt19937;\n+\n+\n+  /**\n+   * @brief The Marsaglia-Zaman generator.\n+   * \n+   * This is a model of a Generalized Fibonacci discrete random number\n+   * generator, sometimes referred to as the SWC generator.\n+   *\n+   * A discrete random number generator that produces pseudorandom numbers using\n+   * @f$x_{i}\\leftarrow(x_{i - s} - x_{i - r} - carry_{i-1}) \\bmod m @f$.\n+   *\n+   * The size of the state is @f$ r @f$\n+   * and the maximum period of the generator is @f$ m^r - m^s -1 @f$.\n+   *\n+   * N1688[4.13] says \"the template parameter _IntType shall denote an integral\n+   * type large enough to store values up to m.\"\n+   *\n+   * @if maint\n+   * @var _M_x     The state of te generator.  This is a ring buffer.\n+   * @var _M_carry The carry.\n+   * @var _M_p     Current index of x(i - r).\n+   * @endif\n+   */\n+  template<typename _IntType, _IntType m, int s, int r>\n+    class subtract_with_carry\n+    {\n+      __glibcxx_class_requires(_IntType, _IntegerConcept)\n+\n+    public:\n+      /** The type of the generated random value. */\n+      typedef _IntType result_type;\n+      \n+      // parameter values\n+      static const _IntType modulus   = m;\n+      static const int      long_lag  = r;\n+      static const int      short_lag = s;\n+\n+    public:\n+      /**\n+       * Constructs a default-initialized % subtract_with_carry random number\n+       * generator.\n+       */\n+      subtract_with_carry()\n+      { this->seed(); }\n+\n+      /**\n+       * Constructs an explicitly seeded % subtract_with_carry random number\n+       * generator.\n+       */\n+      explicit\n+      subtract_with_carry(_IntType __value)\n+      { this->seed(__value); }\n+\n+      /**\n+       * Constructs a % subtract_with_carry random number generator seeded from\n+       * the PAD iterated by [__first, last).\n+       */\n+      template<class Gen>\n+        subtract_with_carry(Gen& g)\n+        { this->seed(g); }\n+\n+      /**\n+       * Seeds the initial state @f$ x_0 @f$ of the random number generator.\n+       *\n+       * @note This implementation follows the tr1 specification but will\n+       * obviously not work correctly on all platforms, since it has hardcoded\n+       * values that may overflow ints on some platforms.\n+       *\n+       * N1688[4.19] modifies this as follows.\n+       * If @p __value == 0, sets value to 19780503.  In any case, with a linear\n+       * congruential generator lcg(i) having parameters @f$ m_{lcg} =\n+       * 2147483563, a_{lcg} = 40014, c_{lcg} = 0, and lcg(0) = value @f$, sets\n+       * @f$ x_{-r} \\dots x_{-1} @f$ to\n+       * @f$ lcg(1) \\bmod m \\dots lcg(r) \\bmod m @f$ respectively.\n+       * If @f$ x_{-1} = 0 @f$ set carry to 1, otherwise sets carry to 0.\n+       */\n+      void\n+      seed(_IntType __value = 19780503);\n+\n+      /**\n+       * Seeds the initial state @f$ x_0 @f$ of the % subtract_with_carry\n+       * random number generator.\n+       */\n+      template<class Gen>\n+        void\n+        seed(Gen& g)\n+        { seed(g, typename is_fundamental<Gen>::type()); }\n+\n+      /**\n+       * Gets the inclusive minimum value of the range of random integers\n+       * returned by this generator.\n+       */\n+      result_type\n+      min() const\n+      { return 0; }\n+\n+      /**\n+       * Gets the inclusive maximum value of the range of random integers\n+       * returned by this generator.\n+       */\n+      result_type\n+      max() const\n+      { return this->modulus - 1; }\n+\n+      /**\n+       * Gets the next random number in the sequence.\n+       */\n+      result_type\n+      operator()();\n+\n+      /**\n+       * Compares two % subtract_with_carry random number generator objects of\n+       * the same type for equality.\n+       *\n+       * @param __lhs A % subtract_with_carry random number generator object.\n+       * @param __rhs Another % subtract_with_carry random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const subtract_with_carry& __lhs,\n+\t\t const subtract_with_carry& __rhs)\n+      { \n+\treturn ((__lhs._M_x[0] == __rhs._M_x[0])\n+\t\t&& (__lhs._M_x[r-1] == __rhs._M_x[r-1]));\n+      }\n+\n+      /**\n+       * Compares two % subtract_with_carry random number generator objects of\n+       * the same type for inequality.\n+       *\n+       * @param __lhs A % subtract_with_carry random number generator object.\n+       * @param __rhs Another % subtract_with_carry random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const subtract_with_carry& __lhs,\n+\t\t const subtract_with_carry& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+      /**\n+       * Inserts the current state of a % subtract_with_carry random number\n+       * genator engine @p x into the output stream @p os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A % subtract_with_carry random number generator engine.\n+       *\n+       * @returns The output stream with the state of @p x inserted or in an\n+       * error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_ostream<_CharT, _Traits>&\n+        operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const subtract_with_carry& __x)\n+        {\n+\t  std::copy(__x._M_x, __x._M_x + r,\n+\t\t    std::ostream_iterator<_IntType>(__os, \" \"));\n+\t  return __os << __x._M_carry;\n+\t}\n+\n+      /**\n+       * Extracts the current state of a % subtract_with_carry random number\n+       * gerator engine @p x from the input stream @p is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A % subtract_with_carry random number generator engine.\n+       *\n+       * @returns The input stream with the state of @p x extracted or in an\n+       * error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_istream<_CharT, _Traits>&\n+        operator>>(basic_istream<_CharT, _Traits>& __is,\n+\t\t   subtract_with_carry& __x)\n+        {\n+\t  for (int __i = 0; __i < r; ++__i)\n+\t    __is >> __x._M_x[__i];\n+\t  __is >> __x._M_carry;\n+\t  return __is;\n+\t}\n+\n+    private:\n+      template<class Gen>\n+        void\n+        seed(Gen& g, true_type)\n+        { return seed(static_cast<unsigned long>(g)); }\n+\n+      template<class Gen>\n+        void\n+        seed(Gen& g, false_type);\n+\n+    private:\n+      int         _M_p;\n+      result_type _M_x[long_lag];\n+      result_type _M_carry;\n+    };\n+\n+\n+  /**\n+   * Produces random numbers from some base engine by discarding blocks of\n+   * data.\n+   *\n+   * 0 <= @p r <= @p p\n+   */\n+  template<class UniformRandomNumberGenerator, int p, int r>\n+    class discard_block\n+    {\n+      // __glibcxx_class_requires(typename base_type::result_type,\n+      //                          ArithmeticTypeConcept);\n+\n+    public:\n+      /** The type of the underlying generator engine. */\n+      typedef UniformRandomNumberGenerator    base_type;\n+      /** The type of the generated random value. */\n+      typedef typename base_type::result_type result_type;\n+\n+      // parameter values\n+      static const int block_size = p;\n+      static const int used_block = r;\n+\n+      /**\n+       * Constructs a default %discard_block engine.\n+       *\n+       * The underlying engine is default constrcuted as well.\n+       */\n+      discard_block()\n+      : _M_n(0) { }\n+\n+      /**\n+       * Copy constructs a %discard_block engine.\n+       *\n+       * Copies an existing base class random number geenerator.\n+       * @param rng An existing (base class) engine object.\n+       */\n+      explicit discard_block(const base_type& rng)\n+      : _M_b(rng) , _M_n(0) { }\n+\n+      /**\n+       * Seed constructs a %discard_block engine.\n+       *\n+       * Constructs the underlying generator engine seeded with @p s.\n+       * @param s A seed value for the base class engine.\n+       */\n+      explicit discard_block(unsigned long s)\n+      : _M_b(s), _M_n(0) { }\n+\n+      /**\n+       * Generator constructs a %discard_block engine.\n+       *\n+       * @param g A seed generator function.\n+       */\n+      template<class Gen>\n+        discard_block(Gen& g)\n+\t: _M_b(g), _M_n(0) { }\n+\n+      /**\n+       * Reseeds the %discard_block object with the default seed for the\n+       * underlying base class generator engine.\n+       */\n+      void seed()\n+      {\n+\t_M_b.seed();\n+\t_M_n = 0;\n+      }\n+\n+      /**\n+       * Reseeds the %discard_block object with the given seed generator\n+       * function.\n+       * @param g A seed generator function.\n+       */\n+      template<class Gen>\n+        void seed(Gen& g)\n+        {\n+\t  _M_b.seed(g);\n+\t  _M_n = 0;\n+\t}\n+\n+      /**\n+       * Gets a const reference to the underlying generator engine object.\n+       */\n+      const base_type&\n+      base() const\n+      { return _M_b; }\n+\n+      /**\n+       * Gets the minimum value in the generated random number range.\n+       */\n+      result_type\n+      min() const\n+      { return _M_b.min(); }\n+\n+      /**\n+       * Gets the maximum value in the generated random number range.\n+       */\n+      result_type\n+      max() const\n+      { return _M_b.max(); }\n+\n+      /**\n+       * Gets the next value in the generated random number sequence.\n+       */\n+      result_type\n+      operator()();\n+\n+      /**\n+       * Compares two %discard_block random number generator objects of\n+       * the same type for equality.\n+       *\n+       * @param __lhs A %discard_block random number generator object.\n+       * @param __rhs Another %discard_block random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const discard_block& __lhs, const discard_block& __rhs)\n+      { \n+\treturn ((__lhs._M_b == __rhs._M_b)\n+\t\t&& (__lhs._M_n == __rhs._M_n));\n+      }\n+\n+      /**\n+       * Compares two %discard_block random number generator objects of\n+       * the same type for inequality.\n+       *\n+       * @param __lhs A %discard_block random number generator object.\n+       * @param __rhs Another %discard_block random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const discard_block& __lhs, const discard_block& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+      /**\n+       * Inserts the current state of a %discard_block random number\n+       * genator engine @p x into the output stream @p os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %discard_block random number generator engine.\n+       *\n+       * @returns The output stream with the state of @p x inserted or in an\n+       * error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_ostream<_CharT, _Traits>&\n+        operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const discard_block& __x)\n+        { return __os << __x._M_b << \" \" << __x._M_n; }\n+\n+      /**\n+       * Extracts the current state of a % subtract_with_carry random number\n+       * gerator engine @p x from the input stream @p is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %discard_block random number generator engine.\n+       *\n+       * @returns The input stream with the state of @p x extracted or in an\n+       * error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_istream<_CharT, _Traits>&\n+        operator>>(basic_istream<_CharT, _Traits>& __is,\n+\t\t   discard_block& __x)\n+        { return __is >> __x._M_b >> __x._M_n; }\n+\n+    private:\n+      base_type _M_b;\n+      int       _M_n;\n+    };\n+\n+\n+  /**\n+   * James's luxury-level-3 integer adaptation of Luescher's generator.\n+   */\n+  typedef discard_block<\n+    subtract_with_carry<int, (1<<24), 10, 24>,\n+      223,\n+      24\n+      > ranlux3;\n+\n+  /**\n+   * James's luxury-level-4 integer adaptation of Luescher's generator.\n+   */\n+  typedef discard_block<\n+    subtract_with_carry<int, (1<<24), 10, 24>,\n+      389,\n+      24\n+      > ranlux4;\n+\n+\n+  /**\n+   * A random number generator adaptor class that combines two random number\n+   * generator engines into a single output sequence.\n+   */\n+  template<class UniformRandomNumberGenerator1, int s1,\n+\t   class UniformRandomNumberGenerator2, int s2>\n+    class xor_combine\n+    {\n+      // __glibcxx_class_requires(typename UniformRandomNumberGenerator1::\n+      //                          result_type, ArithmeticTypeConcept);\n+      // __glibcxx_class_requires(typename UniformRandomNumberGenerator2::\n+      //                          result_type, ArithmeticTypeConcept);\n+\n+    public:\n+      /** The type of the the first underlying generator engine. */\n+      typedef UniformRandomNumberGenerator1 base1_type;\n+      /** The type of the the second underlying generator engine. */\n+      typedef UniformRandomNumberGenerator2 base2_type;\n+      /** The type of the generated random value. */\n+      typedef typename _Private::_Select<\n+\t(sizeof(base1_type) > sizeof(base2_type)),\n+\tbase1_type,\n+\tbase2_type\n+\t>::Type result_type;\n+\n+      // parameter values\n+      static const int shift1 = s1;\n+      static const int shift2 = s2;\n+\n+      // constructors and member function\n+      xor_combine() { }\n+\n+      xor_combine(const base1_type& rng1, const base2_type& rng2)\n+      : _M_b1(rng1), _M_b2(rng2) { }\n+\n+      xor_combine(unsigned long s)\n+      : _M_b1(s), _M_b2(s + 1) { }\n+\n+      template<class Gen>\n+        xor_combine(Gen& g)\n+\t: _M_b1(g), _M_b2(g) { }\n+\n+      void\n+      seed()\n+      {\n+\t_M_b1.seed();\n+\t_M_b2.seed();\n+      }\n+\n+      template<class Gen>\n+        void\n+        seed(Gen& g)\n+        {\n+\t  _M_b1.seed(g);\n+\t  _M_b2.seed(g);\n+\t}\n+\n+      const base1_type&\n+      base1() const\n+      { return _M_b1; }\n+\n+      const base2_type&\n+      base2() const\n+      { return _M_b2; }\n+\n+      result_type\n+      min() const\n+      { return _M_b1.min() ^ _M_b2.min(); }\n+\n+      result_type\n+      max() const\n+      { return _M_b1.max() | _M_b2.max(); }\n+\n+      /**\n+       * Gets the next random number in the sequence.\n+       */\n+      result_type\n+      operator()()\n+      { return ((_M_b1() << shift1) ^ (_M_b2() << shift2)); }\n+\n+      /**\n+       * Compares two %xor_combine random number generator objects of\n+       * the same type for equality.\n+       *\n+       * @param __lhs A %xor_combine random number generator object.\n+       * @param __rhs Another %xor_combine random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const xor_combine& __lhs, const xor_combine& __rhs)\n+      {\n+\treturn (__lhs.base1() == __rhs.base1())\n+\t  && (__lhs.base2() == __rhs.base2());\n+      }\n+\n+      /**\n+       * Compares two %xor_combine random number generator objects of\n+       * the same type for inequality.\n+       *\n+       * @param __lhs A %xor_combine random number generator object.\n+       * @param __rhs Another %xor_combine random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const xor_combine& __lhs, const xor_combine& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+      /**\n+       * Inserts the current state of a %xor_combine random number\n+       * genator engine @p x into the output stream @p os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %xor_combine random number generator engine.\n+       *\n+       * @returns The output stream with the state of @p x inserted or in an\n+       * error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_ostream<_CharT, _Traits>&\n+        operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const xor_combine& __x)\n+        { return __os << __x.base1() << \" \" << __x.base1(); }\n+\n+      /**\n+       * Extracts the current state of a %xor_combine random number\n+       * gerator engine @p x from the input stream @p is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %xor_combine random number generator engine.\n+       *\n+       * @returns The input stream with the state of @p x extracted or in an\n+       * error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_istream<_CharT, _Traits>&\n+        operator>>(basic_istream<_CharT, _Traits>& __is,\n+\t\t   xor_combine& __x)\n+        { return __is >> __x._M_b1 >> __x._M_b2; }\n+\n+    private:\n+      base1_type _M_b1;\n+      base2_type _M_b2;\n+    };\n+\n+\n+  /**\n+   * A standard interface to a platform-specific non-deterministic random number\n+   * generator (if any are available).\n+   *\n+   * @todo The underlying interface is system-specific and needs to be factored\n+   * into the generated configury mechs.  For example, the use of \"/dev/random\"\n+   * under a Linux OS would be appropriate.\n+   */\n+  class random_device\n+  {\n+  public:\n+    // types\n+    typedef unsigned int result_type;\n+    \n+    // constructors, destructors and member functions\n+    explicit random_device(const std::string& token = \"unimplemented\");\n+    result_type min() const;\n+    result_type max() const;\n+    double entropy() const;\n+    result_type operator()();\n+\n+  private:\n+    random_device(const random_device &);\n+    void operator=(const random_device &);\n+  };\n+\n+  /* @} */ // group tr1_random_generators\n+\n+  /**\n+   * @addtogroup tr1_random_distributions Random Number Distributions\n+   * @ingroup tr1_random\n+   * @{\n+   */\n+\n+  /**\n+   * @addtogroup tr1_random_distributions_discrete Discrete Distributions\n+   * @ingroup tr1_random_distributions\n+   * @{\n+   */\n+\n+  /**\n+   * @brief Uniform discrete distribution for random numbers.\n+   * A discrete random distribution on the range @f$[min, max]@f$ with equal\n+   * probability throughout the range.\n+   */\n+  template<typename _IntType = int>\n+    class uniform_int\n+    {\n+      __glibcxx_class_requires(_IntType, _IntegerConcept)\n+ \n+    public:\n+      /** The type of the parameters of the distribution. */\n+      typedef _IntType input_type;\n+      /** The type of the range of the distribution. */\n+      typedef _IntType result_type;\n+\n+    public:\n+      /**\n+       * Constructs a uniform distribution object.\n+       */\n+      explicit\n+      uniform_int(_IntType __min = 0, _IntType __max = 9)\n+      : _M_min(__min), _M_max(__max)\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(_M_min <= _M_max);\n+      }\n+\n+      /**\n+       * Gets the inclusive lower bound of the distribution range.\n+       */\n+      result_type\n+      min() const\n+      { return _M_min; }\n+\n+      /**\n+       * Gets the inclusive upper bound of the distribution range.\n+       */\n+      result_type\n+      max() const\n+      { return _M_max; }\n+\n+      /**\n+       * Resets the distribution state.\n+       *\n+       * Does nothing for the uniform integer distribution.\n+       */\n+      void\n+      reset() { }\n+\n+      /**\n+       * Gets a uniformly distributed random number in the range\n+       * @f$(min, max)@f$.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng)\n+        { return (__urng() % (_M_max - _M_min + 1)) + _M_min; }\n+\n+      /**\n+       * Gets a uniform random number in the range @f$[0, n)@f$.\n+       *\n+       * This function is aimed at use with std::random_shuffle.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng, result_type __n)\n+        { return __urng() % __n; }\n+\n+      /**\n+       * Inserts a %uniform_int random number distribution @p x into the\n+       * output stream @p os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %uniform_int random number distribution.\n+       *\n+       * @returns The output stream with the state of @p x inserted or in an\n+       * error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_ostream<_CharT, _Traits>&\n+        operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const uniform_int& __x)\n+        { return __os << __x._M_min << \" \" << __x._M_max; }\n+\n+      /**\n+       * Extracts a %unform_int random number distribution\n+       * @p u from the input stream @p is.\n+       *\n+       * @param __is An input stream.\n+       * @param __u  A %uniform_int random number generator engine.\n+       *\n+       * @returns The input stream with @p u extracted or in an error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_istream<_CharT, _Traits>&\n+        operator>>(basic_istream<_CharT, _Traits>& __is, uniform_int& __u)\n+        { return __is >> __u._M_min >> __u._M_max; }\n+\n+    private:\n+      _IntType _M_min;\n+      _IntType _M_max;\n+    };\n+\n+\n+  /**\n+   * @brief A Bernoulli random number distribution.\n+   *\n+   * Generates a sequence of true and false values with likelihood @f$ p @f$\n+   * that true will come up and @f$ (1 - p) @f$ that false will appear.\n+   */\n+  class bernoulli_distribution\n+  {\n+  public:\n+    typedef int  input_type;\n+    typedef bool result_type;\n+\n+  public:\n+    /**\n+     * Constructs a Bernoulli distribution with likelihood @p p.\n+     *\n+     * @param p  [IN]  The likelihood of a true result being returned.  Must\n+     * be in the interval @f$ [0, 1] @f$.\n+     */\n+    explicit\n+    bernoulli_distribution(double __p = 0.5)\n+    : _M_p(__p)\n+    { \n+      _GLIBCXX_DEBUG_ASSERT((_M_p >= 0.0) && (_M_p <= 1.0));\n+    }\n+\n+    /**\n+     * Gets the @p p parameter of the distribution.\n+     */\n+    double\n+    p() const\n+    { return _M_p; }\n+\n+    /**\n+     * Gets the inclusive lower bound of the distribution range.\n+     */\n+    result_type\n+    min() const\n+    { return false; }\n+\n+    /**\n+     * Gets the inclusive upper bound of the distribution range.\n+     */\n+    result_type\n+    max() const\n+    { return true; }\n+\n+    /**\n+     * Resets the distribution state.\n+     *\n+     * Does nothing for a bernoulli distribution.\n+     */\n+    void\n+    reset() { }\n+\n+    /**\n+     * Gets the next value in the Bernoullian sequence.\n+     */\n+    template<class UniformRandomNumberGenerator>\n+      result_type\n+      operator()(UniformRandomNumberGenerator& __urng)\n+      {\n+\tif (__urng() < _M_p)\n+\t  return true;\n+\treturn false;\n+      }\n+\n+    /**\n+     * Inserts a %bernoulli_distribution random number distribution\n+     * @p x into the output stream @p os.\n+     *\n+     * @param __os An output stream.\n+     * @param __x  A %bernoulli_distribution random number distribution.\n+     *\n+     * @returns The output stream with the state of @p x inserted or in an\n+     * error state.\n+     */\n+    template<typename _CharT, typename _Traits>\n+      friend basic_ostream<_CharT, _Traits>&\n+      operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t\t const bernoulli_distribution& __x)\n+      { return __os << __x.p(); }\n+\n+    /**\n+     * Extracts a %bernoulli_distribution random number distribution\n+     * @p u from the input stream @p is.\n+     *\n+     * @param __is An input stream.\n+     * @param __u  A %bernoulli_distribution random number generator engine.\n+     *\n+     * @returns The input stream with @p u extracted or in an error state.\n+     */\n+    template<typename _CharT, typename _Traits>\n+      friend basic_istream<_CharT, _Traits>&\n+      operator>>(basic_istream<_CharT, _Traits>& __is,\n+\t\t bernoulli_distribution& __u)\n+      { return __is >> __u._M_p; }\n+\n+  protected:\n+    double _M_p;\n+  };\n+\n+\n+  /**\n+   * @brief A discrete geometric random number distribution.\n+   *\n+   * The formula for the geometric probability mass function is \n+   * @f$ p(i) = (1 - p)p^{i-1} @f$ where @f$ p @f$ is the parameter of the\n+   * distribution.\n+   */\n+  template<typename _IntType = int, typename _RealType = double>\n+    class geometric_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _IntType  result_type;\n+\n+      // constructors and member function\n+      \n+      explicit\n+      geometric_distribution(const _RealType& __p = _RealType(0.5))\n+      : _M_p(__p), _M_log_p(std::log(_M_p))\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT((_M_p >= 0.0) && (_M_p <= 1.0));\n+      }\n+\n+      /**\n+       * Gets the distribution parameter @p.\n+       */\n+      _RealType\n+      p() const\n+      { return _M_p; }\n+\n+      /**\n+       * Gets the inclusive lower bound of the distribution range.\n+       */\n+      result_type\n+      min() const;\n+\n+      /**\n+       * Gets the inclusive upper bound of the distribution range.\n+       */\n+      result_type\n+      max() const;\n+\n+      void\n+      reset() { }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng)\n+        {\n+\t  return result_type(std::floor(std::log(_RealType(1.0) - __urng())\n+\t\t\t\t\t/ _M_log_p)) + result_type(1);\n+\t}\n+\n+      /**\n+       * Inserts a %geometric_distribution random number distribution\n+       * @p x into the output stream @p os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %geometric_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p x inserted or in an\n+       * error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_ostream<_CharT, _Traits>&\n+        operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const geometric_distribution& __x)\n+        { return __os << __x.p(); }\n+\n+      /**\n+       * Extracts a %geometric_distribution random number distribution\n+       * @p u from the input stream @p is.\n+       *\n+       * @param __is An input stream.\n+       * @param __u  A %geometric_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p u extracted or in an error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_istream<_CharT, _Traits>&\n+        operator>>(basic_istream<_CharT, _Traits>& __is,\n+\t\t   geometric_distribution& __u)\n+        {\n+\t  __is >> __u._M_p;\n+\t  __u._M_log_p = std::log(__u._M_p);\n+\t  return __is;\n+\t}\n+\n+    protected:\n+      _RealType _M_p;\n+      _RealType _M_log_p;\n+    };\n+\n+  /* @} */ // group tr1_random_distributions_discrete\n+\n+  /**\n+   * @addtogroup tr1_random_distributions_continuous Continuous Distributions\n+   * @ingroup tr1_random_distributions\n+   * @{\n+   */\n+\n+  /**\n+   * @brief Uniform continuous distribution for random numbers.\n+   *\n+   * A continuous random distribution on the range [min, max) with equal\n+   * probability throughout the range.  The URNG should be real-valued and\n+   * deliver number in the range [0, 1).\n+   */\n+  template<typename _RealType = double>\n+    class uniform_real\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _RealType result_type;\n+\n+    public:\n+      /**\n+       * Constructs a uniform_real object.\n+       *\n+       * @param min [IN]  The lower bound of the distribution.\n+       * @param max [IN]  The upper bound of the distribution.\n+       */\n+      explicit\n+      uniform_real(_RealType min = _RealType(0), _RealType max = _RealType(1));\n+\n+      result_type\n+      min() const;\n+\n+      result_type\n+      max() const;\n+\n+      void reset();\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng)\n+        { return (__urng() * (max() - min())) + min(); }\n+\n+      /**\n+       * Inserts a %uniform_real random number distribution @p x into the\n+       * output stream @p os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %uniform_real random number distribution.\n+       *\n+       * @returns The output stream with the state of @p x inserted or in an\n+       * error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_ostream<_CharT, _Traits>&\n+        operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const uniform_real& __x)\n+        { return __os << __x.min() << \" \" << __x.max(); }\n+\n+      /**\n+       * Extracts a %unform_real random number distribution\n+       * @p u from the input stream @p is.\n+       *\n+       * @param __is An input stream.\n+       * @param __u  A %uniform_real random number generator engine.\n+       *\n+       * @returns The input stream with @p u extracted or in an error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_istream<_CharT, _Traits>&\n+        operator>>(basic_istream<_CharT, _Traits>& __is,\n+\t\t uniform_real& __u)\n+        { return __is >> __u._M_min >> __u._M_max; }\n+\n+    protected:\n+      _RealType _M_min;\n+      _RealType _M_max;\n+    };\n+\n+\n+  /**\n+   * @brief An exponential continuous distribution for random numbers.\n+   *\n+   * The formula for the exponential probability mass function is \n+   * @f$ p(x) = \\lambda e^{-\\lambda x} @f$.\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$ \\frac{1}{\\lambda} @f$</td></tr>\n+   * <tr><td>Median</td><td>@f$ \\frac{\\ln 2}{\\lambda} @f$</td></tr>\n+   * <tr><td>Mode</td><td>@f$ zero @f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[0, \\infty]@f$</td></tr>\n+   * <tr><td>Standard Deviation</td><td>@f$ \\frac{1}{\\lambda} @f$</td></tr>\n+   * </table>\n+   */\n+  template<typename _RealType = double>\n+    class exponential_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _RealType result_type;\n+\n+    public:\n+      /**\n+       * Constructs an exponential distribution with inverse scale parameter\n+       * @f$ \\lambda @f$.\n+       */\n+      explicit\n+      exponential_distribution(const result_type& __lambda = result_type(1))\n+      : _M_lambda(__lambda) { }\n+\n+      /**\n+       * Gets the inverse scale parameter of the distribution.\n+       */\n+      _RealType\n+      lambda() const\n+      { return _M_lambda; }\n+\n+      /**\n+       * Resets the distribution.\n+       *\n+       * Has no effect on exponential distributions.\n+       */\n+      void\n+      reset() { }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng)\n+        { return std::log(__urng) / _M_lambda; }\n+\n+      /**\n+       * Inserts a %exponential_distribution random number distribution\n+       * @p x into the output stream @p os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %exponential_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p x inserted or in an\n+       * error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_ostream<_CharT, _Traits>&\n+        operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const exponential_distribution& __x)\n+        { return __os << __x.lambda(); }\n+\n+      /**\n+       * Extracts a %exponential_distribution random number distribution\n+       * @p u from the input stream @p is.\n+       *\n+       * @param __is An input stream.\n+       * @param __u  A %exponential_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p u extracted or in an error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend basic_istream<_CharT, _Traits>&\n+        operator>>(basic_istream<_CharT, _Traits>& __is,\n+\t\t   exponential_distribution& __u)\n+        { return __is >> __u._M_lambda; }\n+\n+    private:\n+      result_type _M_lambda;\n+    };\n+\n+  /* @} */ // group tr1_random_distributions_continuous\n+  /* @} */ // group tr1_random_distributions\n+  /* @} */ // group tr1_random\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#include <tr1/random.tcc>\n+\n+#endif // _STD_TR1_RANDOM"}, {"sha": "b78bb4ec1afc3826809b650b2dbc271f4d03f7f4", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "added", "additions": 422, "deletions": 0, "changes": 422, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,422 @@\n+// random number generation (out of line) -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <limits>\n+\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  /*\n+   * Implementation-space details.\n+   */\n+  namespace _Private\n+  {\n+    // General case for x = (ax + c) mod m -- use Schrage's algorithm to avoid\n+    // integer overflow.\n+    //\n+    // Because a and c are compile-time integral constants the compiler kindly\n+    // elides any unreachable paths.\n+    //\n+    // Preconditions:  a > 0, m > 0.\n+    //\n+    template<typename _Tp, _Tp a, _Tp c, _Tp m, bool _m_is_zero>\n+      struct Mod\n+      {\n+\tstatic _Tp\n+\tcalc(_Tp x)\n+\t{\n+\t  if (a == 1)\n+\t    x %= m;\n+\t  else\n+\t    {\n+\t      static const _Tp q = m / a;\n+\t      static const _Tp r = m % a;\n+\t      \n+\t      _Tp t1 = a * (x % q);\n+\t      _Tp t2 = r * (x / q);\n+\t      if (t1 >= t2)\n+\t\tx = t1 - t2;\n+\t      else\n+\t\tx = m - t2 + t1;\n+\t    }\n+\n+\t  if (c != 0)\n+\t    {\n+\t      const _Tp d = m - x;\n+\t      if (d > c)\n+\t\tx += c;\n+\t      else\n+\t\tx = c - d;\n+\t    }\n+\t  return x;\n+\t}\n+      };\n+\n+    // Special case for m==0 -- use unsigned integer overflow as modulo\n+    // operator.\n+    template<typename _Tp, _Tp a, _Tp c, _Tp m>\n+      struct Mod<_Tp, a, c, m, true>\n+      {\n+\tstatic _Tp\n+\tcalc(_Tp x)\n+\t{ return a * x + c; }\n+      };\n+\n+    // Dispatch based on modulus value to prevent divide-by-zero compile-time\n+    // errors when m == 0.\n+    template<typename _Tp, _Tp a, _Tp c, _Tp m>\n+      inline _Tp\n+      mod(_Tp x)\n+      { return Mod<_Tp, a, c, m, m == 0>::calc(x); }\n+\n+    // Like the above, for a==1, c==0, in terms of w.\n+    template<typename _Tp, _Tp w, bool>\n+      struct Mod_w\n+      {\n+\tstatic _Tp\n+\tcalc(_Tp x)\n+\t{ return x % (_Tp(1) << w); }\n+      };\n+\n+    template<typename _Tp, _Tp w>\n+      struct Mod_w<_Tp, w, true>\n+      {\n+\tstatic _Tp\n+\tcalc(_Tp x)\n+\t{ return x; }\n+      };\n+\n+    // Selector to return the maximum value possible that will fit in \n+    // @p w bits of @p _Tp.\n+    template<typename _Tp, _Tp w, bool>\n+      struct Max_w\n+      {\n+\tstatic _Tp\n+\tvalue()\n+\t{ return (_Tp(1) << w) - 1; }\n+      };\n+\n+    template<typename _Tp, _Tp w>\n+      struct Max_w<_Tp, w, true>\n+      {\n+\tstatic _Tp\n+\tvalue()\n+\t{ return std::numeric_limits<_Tp>::max(); }\n+      };\n+\n+  } // namespace _Private\n+\n+\n+  /**\n+   * Constructs the LCR engine with integral seed @p x0.\n+   */\n+  template<class UIntType, UIntType a, UIntType c, UIntType m>\n+    linear_congruential<UIntType, a, c, m>::\n+    linear_congruential(unsigned long x0)\n+    { this->seed(x0); }\n+\n+  /**\n+   * Constructs the LCR engine with seed generated from @p g.\n+   */\n+  template<class UIntType, UIntType a, UIntType c, UIntType m>\n+    template<class Gen>\n+      linear_congruential<UIntType, a, c, m>::\n+      linear_congruential(Gen& g)\n+      { this->seed(g); }\n+\n+  /**\n+   * Seeds the LCR with integral value @p x0, adjusted so that the \n+   * ring identity is never a member of the convergence set.\n+   */\n+  template<class UIntType, UIntType a, UIntType c, UIntType m>\n+    void\n+    linear_congruential<UIntType, a, c, m>::\n+    seed(unsigned long x0)\n+    {\n+      if ((_Private::mod<UIntType, 1, 0, m>(c) == 0)\n+\t  && (_Private::mod<UIntType, 1, 0, m>(x0) == 0))\n+\tm_x = _Private::mod<UIntType, 1, 0, m>(1);\n+      else\n+\tm_x = _Private::mod<UIntType, 1, 0, m>(x0);\n+    }\n+\n+  /**\n+   * Seeds the LCR engine with a value generated by @p g.\n+   */\n+  template<class UIntType, UIntType a, UIntType c, UIntType m>\n+    template<class Gen>\n+      void\n+      linear_congruential<UIntType, a, c, m>::\n+      seed(Gen& g, false_type)\n+      {\n+\tUIntType x0 = g();\n+\tif ((_Private::mod<UIntType, 1, 0, m>(c) == 0)\n+\t    && (_Private::mod<UIntType, 1, 0, m>(x0) == 0))\n+\t  m_x = _Private::mod<UIntType, 1, 0, m>(1);\n+\telse\n+\t  m_x = _Private::mod<UIntType, 1, 0, m>(x0);\n+      }\n+\n+  /**\n+   * Returns a value that is less than or equal to all values potentially\n+   * returned by operator(). The return value of this function does not\n+   * change during the lifetime of the object..\n+   *\n+   * The minumum depends on the @p c parameter: if it is zero, the\n+   * minimum generated must be > 0, otherwise 0 is allowed.\n+   */\n+  template<class UIntType, UIntType a, UIntType c, UIntType m>\n+    typename linear_congruential<UIntType, a, c, m>::result_type\n+    linear_congruential<UIntType, a, c, m>::\n+    min() const\n+    { return (_Private::mod<UIntType, 1, 0, m>(c) == 0) ? 1 : 0; }\n+\n+  /**\n+   * Gets the maximum possible value of the generated range.\n+   *\n+   * For a linear congruential generator, the maximum is always @p m - 1.\n+   */\n+  template<class UIntType, UIntType a, UIntType c, UIntType m>\n+    typename linear_congruential<UIntType, a, c, m>::result_type\n+    linear_congruential<UIntType, a, c, m>::\n+    max() const\n+    { return (m == 0) ? std::numeric_limits<UIntType>::max() : (m - 1); }\n+\n+  /**\n+   * Gets the next generated value in sequence.\n+   */\n+  template<class UIntType, UIntType a, UIntType c, UIntType m>\n+    typename linear_congruential<UIntType, a, c, m>::result_type\n+    linear_congruential<UIntType, a, c, m>::\n+    operator()()\n+    {\n+      m_x = _Private::mod<UIntType, a, c, m>(m_x);\n+      return m_x;\n+    }\n+\n+\n+  template<class _UInt, int w, int n, int m, int r,\n+\t   _UInt a, int u, int s,\n+\t   _UInt b, int t, _UInt c, int l>\n+    void\n+    mersenne_twister<_UInt, w, n, m, r, a, u, s, b, t, c, l>::\n+    seed(unsigned long value)\n+    {\n+      if (value == 0)\n+\tvalue = 4357;\n+      \n+#if 0\n+      // @todo handle case numeric_limits<_UInt>::digits > 32\n+      if (std::numeric_limits<_UInt>::digits > 32)\n+\t{\n+\t  std::tr1::linear_congruential<unsigned long, 69069, 0, 2**32> lcg(value);\n+\t  seed(lcg);\n+\t}\n+      else\n+\t{\n+\t  std::tr1::linear_congruential<unsigned long, 69069, 0, 0> lcg(value);\n+\t  seed(lcg);\n+\t}\n+#else\n+      std::tr1::linear_congruential<unsigned long, 69069, 0, 0> lcg(value);\n+      seed(lcg);\n+#endif\n+    }\n+\n+\n+  template<class _UInt, int w, int n, int m, int r,\n+\t   _UInt a, int u, int s,\n+\t   _UInt b, int t, _UInt c, int l>\n+    template<class Gen>\n+      void\n+      mersenne_twister<_UInt, w, n, m, r, a, u, s, b, t, c, l>::\n+      seed(Gen& gen, false_type)\n+      {\n+\tusing _Private::Mod_w;\n+\tusing std::numeric_limits;\n+\n+\tfor (int i = 0; i < state_size; ++i)\n+\t  _M_x[i] = Mod_w<_UInt, w,\n+\t                  w == numeric_limits<_UInt>::digits>::calc(gen());\n+\t_M_p = state_size + 1;\n+      }\n+\n+  template<class _UInt, int w, int n, int m, int r,\n+\t   _UInt a, int u, int s,\n+\t   _UInt b, int t, _UInt c, int l>\n+    typename\n+    mersenne_twister<_UInt, w, n, m, r, a, u, s, b, t, c, l>::result_type\n+    mersenne_twister<_UInt, w, n, m, r, a, u, s, b, t, c, l>::\n+    max() const\n+    {\n+      using _Private::Max_w;\n+      using std::numeric_limits;\n+      return Max_w<_UInt, w, w == numeric_limits<_UInt>::digits>::value();\n+    }\n+\n+\n+  template<class _UInt, int w, int n, int m, int r,\n+\t   _UInt a, int u, int s,\n+\t   _UInt b, int t, _UInt c, int l>\n+    typename\n+    mersenne_twister<_UInt, w, n, m, r, a, u, s, b, t, c, l>::result_type\n+    mersenne_twister<_UInt, w, n, m, r, a, u, s, b, t, c, l>::\n+    operator()()\n+    {\n+      // reload the vector - cost is O(n) amortized over n calls.\n+      if (_M_p >= state_size)\n+\t{\n+\t  const _UInt upper_mask = (~_UInt()) << r;\n+\t  const _UInt lower_mask = ~upper_mask;\n+\n+\t  for (int k = 0; k < (n - m); ++k)\n+\t    {\n+\t      _UInt y = (_M_x[k] & upper_mask) | (_M_x[k + 1] & lower_mask);\n+\t      _M_x[k] = _M_x[k + m] ^ (y >> 1) ^ ((y & 0x01) ? a : 0);\n+\t    }\n+\n+\t  for (int k = (n - m); k < (n - 1); ++k)\n+\t    {\n+\t      _UInt y = (_M_x[k] & upper_mask) | (_M_x[k + 1] & lower_mask);\n+\t      _M_x[k] = _M_x[k + (m - n)] ^ (y >> 1) ^ ((y & 0x01) ? a : 0);\n+\t    }\n+\n+\t  _M_p = 0;\n+\t}\n+\n+      // Calculate x(i)\n+      result_type y = _M_x[_M_p++];\n+      y ^= (y >> u);\n+      y ^= (y << s) & b;\n+      y ^= (y << t) & c;\n+      y ^= (y >> l);\n+      \n+      return y;\n+    }\n+\n+\n+  template<typename _IntType, _IntType m, int s, int r>\n+    void\n+    subtract_with_carry<_IntType, m, s, r>::\n+    seed(_IntType __value)\n+    {\n+      std::tr1::linear_congruential<unsigned long, 40014, 0, 2147483563>\n+\tlcg(__value);\n+      \n+      for (int i = 0; i < long_lag; ++i)\n+\t_M_x[i] = _Private::mod<_IntType, 1, 0, modulus>(lcg());\n+\t\n+      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n+      _M_p = 0;\n+    }\n+\n+  \n+  //\n+  // This implementation differs from the tr1 spec because the tr1 spec refused\n+  // to make any sense to me:  the exponent of the factor in the spec goes from\n+  // 1 to (n-1), but it would only make sense to me if it went from 0 to (n-1).\n+  //\n+  // This algorithm is still problematic because it can overflow left right and\n+  // center.\n+  //\n+  template<typename _IntType, _IntType __m, int __s, int __r>\n+    template<class Gen>\n+    void\n+    subtract_with_carry<_IntType, __m, __s, __r>::\n+    seed(Gen& gen, false_type)\n+    {\n+      const int n = (std::numeric_limits<_IntType>::digits + 31) / 32;\n+      for (int i = 0; i < long_lag; ++i)\n+\t{\n+\t  _M_x[i] = 0;\n+\t  unsigned long factor = 1;\n+\t  for (int j = 0; j < n; ++j)\n+\t    {\n+\t      _M_x[i] += gen() * factor;\n+\t      factor *= 0x80000000;\n+\t    }\n+\t  _M_x[i] = _Private::mod<_IntType, 1, 0, modulus>(_M_x[i]);\n+\t}\n+      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n+      _M_p = 0;\n+    }\n+  \n+\n+  template<typename _IntType, _IntType __m, int __s, int __r>\n+    typename subtract_with_carry<_IntType, __m, __s, __r>::result_type\n+    subtract_with_carry<_IntType, __m, __s, __r>::\n+    operator()()\n+    {\n+      // derive short lag index from current index\n+      int ps = _M_p - short_lag;\n+      if (ps < 0) ps += long_lag;\n+      \n+      // calculate new x(i) without overflow or division\n+      _IntType xi;\n+      if (_M_x[ps] >= _M_x[_M_p] + _M_carry)\n+\t{\n+\t  xi = _M_x[ps] - _M_x[_M_p] - _M_carry;\n+\t  _M_carry = 0;\n+\t}\n+      else\n+\t{\n+\t  xi = modulus - _M_x[_M_p] - _M_carry + _M_x[ps];\n+\t  _M_carry = 1;\n+\t}\n+      _M_x[_M_p++] = xi;\n+      \n+      // adjust current index to loop around in ring buffer\n+      if (_M_p >= long_lag)\n+\t_M_p = 0;\n+      \n+      return xi;\n+    }\n+\n+  \n+  template<class _E, int __p, int __r>\n+    typename discard_block<_E, __p, __r>::result_type\n+    discard_block<_E, __p, __r>::\n+    operator()()\n+    {\n+      if (_M_n >= used_block)\n+\t{\n+\t  while (_M_n < block_size)\n+\t    {\n+\t      _M_b();\n+\t      ++_M_n;\n+\t    }\n+\t  _M_n = 0;\n+\t}\n+      ++_M_n;\n+      return _M_b();\n+    }\n+\n+_GLIBCXX_END_NAMESPACE\n+}"}, {"sha": "ced6ba17fdd317a04b69f4de2a172e5ed68fec7c", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/discard_block/requirements/requirements.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fdiscard_block%2Frequirements%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fdiscard_block%2Frequirements%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fdiscard_block%2Frequirements%2Frequirements.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+//\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.5 Class template linear_congruential\n+// 5.1.1 [1] Table 15\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+  \n+  typedef discard_block\n+    <\n+    subtract_with_carry<long, (1 << 24), 10, 24>,\n+    389, 24\n+    > test_type;\n+  \n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "0321b6e2b40bddb7ef93e7c5bda49bdc5cb0725c", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/linear_congruential/cons/default.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fdefault.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,43 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.1 class template linear_congruential [tr.rand.eng.lcong]\n+// 5.1.4.1 [4]\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+  \n+  linear_congruential<unsigned long, 48271, 0, 2147483647> x;\n+  VERIFY( x.min() == 1 );\n+  VERIFY( x.max() == 2147483647-1 );\n+  VERIFY( x() == 48271 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3d47cd62ee847f80326736c532d5ffa515e4d7d6", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/linear_congruential/cons/gen1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fgen1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fgen1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fgen1.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,50 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.1 class template linear_congruential [tr.rand.eng.lcong]\n+// 5.1.1 Table 16 line 3 template ctor(gen)\n+\n+#include <ctime>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+// a not untypical initialization function\n+unsigned long\n+gen()\n+{\n+  return std::time(0);\n+}\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\t\n+  linear_congruential<unsigned long, 48271, 0, 2147483647> x(gen);\n+  VERIFY( x.min() == 1 );\n+  VERIFY( x.max() == 2147483647-1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5a221e1b404f163bb2f36424a46981898ed087f1", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/linear_congruential/cons/seed1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fseed1.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,40 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.1 class template linear_congruential [tr.rand.eng.lcong]\n+// 5.1.1 [4] para 2\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::tr1;\n+  \n+  unsigned long seed = 2;\n+  linear_congruential<unsigned long, 48271, 0, 2147483647> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a961c3135e20fe3340ee66e403557b6b9ad732d6", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/linear_congruential/cons/seed2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Fcons%2Fseed2.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,40 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.1 class template linear_congruential [tr.rand.eng.lcong]\n+// 5.1.1 [4] para 2\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::tr1;\n+  \n+  double seed = 2.0;\n+  linear_congruential<unsigned long, 48271, 0, 2147483647> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ca469ad5189eb208136e8e0629d096a9fbc01490", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/linear_congruential/operators/equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Foperators%2Fequal.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,44 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.1 Class template linear_congruential\n+// 5.1 [3] Table 16\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::minstd_rand0 a;\n+  std::tr1::minstd_rand0 b;\n+  std::tr1::minstd_rand0 c(120);\n+  \n+  VERIFY( a == b );\n+  VERIFY( !(a == c) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "02d1970ed187348d464bdd4c378f459056171b14", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/linear_congruential/operators/not_equal.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Foperators%2Fnot_equal.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,44 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.1 Class template linear_congruential\n+// 5.1 [3] Table 16\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\t\n+  std::tr1::minstd_rand0 a;\n+  std::tr1::minstd_rand0 b;\n+  std::tr1::minstd_rand0 c(120);\n+\n+  VERIFY( !(a != b) );\n+  VERIFY( a != c );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2c40b04f4dc83dd42a16a53a40fc10e3fd874623", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/linear_congruential/operators/serialize.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Foperators%2Fserialize.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,50 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.1 Class template linear_congruential\n+// 5.1 [3] Table 16\n+\n+#include <sstream>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+ \n+  std::stringstream str;\n+  std::tr1::minstd_rand0 a;\n+  std::tr1::minstd_rand0 b;\n+  \n+  a(); // advance\n+  str << a;\n+  \n+  VERIFY( a != b );\n+  \n+  str >> b;\n+  VERIFY( a == b );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "94d81edc213d295e5a1bb3885b6d9dd09ade15a0", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/linear_congruential/requirements/non_uint_neg.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Frequirements%2Fnon_uint_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Frequirements%2Fnon_uint_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Frequirements%2Fnon_uint_neg.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,44 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-D_GLIBCXX_CONCEPT_CHECKS\" }\n+// { dg-error \"not a valid type\" \"\" { target *-*-* } 37 }\n+// { dg-error \"invalid type\"     \"\" { target *-*-* } 37 }\n+\n+// 5.1.4.1 class template linear_congruential [tr.rand.eng.lcong]\n+// 5.1.4.1 [4]\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  linear_congruential<double, 48271, 0, 2147483647> x;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b192c11cd53a130c7b42e108134b237da075270d", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/linear_congruential/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Flinear_congruential%2Frequirements%2Ftypedefs.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+//\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.1 Class template linear_congruential\n+// 5.1.1 [1] Table 15\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  typedef std::tr1::linear_congruential<unsigned long, 2, 0, 4> test_type;\n+  \n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "9a17e164016b1e96c8d3614afa9781affc95eef7", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/mersenne_twister/cons/default.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fdefault.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,48 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.2 class template mersenne_twister [tr.rand.eng.mers]\n+// 5.1.1 Table 16 line 1 default ctor\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std::tr1;\n+  mersenne_twister<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18> x;\n+  \n+  VERIFY( x.min() == 0 );\n+  VERIFY( x.max() == 4294967295ul );\n+  VERIFY( x() == 4290933890ul );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0321bea067fd6158b9e815215eaf7b747ef685a1", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/mersenne_twister/cons/gen1.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fgen1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fgen1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fgen1.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,54 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.2 class template mersenne_twister [tr.rand.eng.mers]\n+// 5.1.1 Table 16 line 3 Gen ctor\n+\n+#include <ctime>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+// a not untypical initialization function\n+unsigned long\n+gen()\n+{\n+  return std::time(0);\n+}\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  mersenne_twister<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18> x(gen);\n+\n+  VERIFY( x.min() == 0 );\n+  VERIFY( x.max() == 4294967295ul );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1bea79664fb152110e0976f72c94183b4307bd19", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/mersenne_twister/cons/seed1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fseed1.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,44 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.2 class template mersenne_twister [tr.rand.eng.mers]\n+// 5.1.1 Table 16 line 2 seed ctor\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::tr1;\n+  \n+  unsigned long seed = 2;\n+  mersenne_twister<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d28bdfcdbd280e35e960405f2e53e1439e86a6fb", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/mersenne_twister/cons/seed2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Fcons%2Fseed2.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,45 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.2 class template mersenne_twister [tr.rand.eng.mers]\n+// 5.1.1 Table 16 line 2 seed ctor\n+// 5.1.1 (4) point 2: Gen is a fundamental type.\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::tr1;\n+  \n+  double seed = 2.0;\n+  mersenne_twister<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c19f016bb43d9f7a84d2530018f8806964a01953", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/mersenne_twister/requirements/typedefs.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmersenne_twister%2Frequirements%2Ftypedefs.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+//\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.2 Class template mersenne_twister\n+// 5.1.1 [1] Table 15\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  typedef std::tr1::mersenne_twister<unsigned long,\n+    32, 624, 397, 31,\n+    0x9908b0df, 11, 7,\n+    0x9d2c5680, 15,\n+    0xefc60000, 18> test_type;\n+  \n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "32b418bf70a1bbfa6e0f683277b554984a4c5816", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/minstd_rand.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fminstd_rand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fminstd_rand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fminstd_rand.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,43 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.5 Engines with predefined parameters\n+// 5.1.5 [1]\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::minstd_rand a;\n+  for (int i = 0; i < 9999; ++i)\n+    a();\n+  \n+  VERIFY( a() == 399268537 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8c1b5fa30bb48bcb5e88b6c6855d6c84e1effcdc", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/minstd_rand0.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fminstd_rand0.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fminstd_rand0.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fminstd_rand0.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,43 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.5 Engines with predefined parameters\n+// 5.1.5 [1]\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::minstd_rand0 a;\n+  for (int i = 0; i < 9999; ++i)\n+    a();\n+\n+  VERIFY( a() == 1043618065 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0b89e8b44375a95399beeabfe840ca561540e1c1", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/mt19937.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmt19937.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmt19937.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fmt19937.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,43 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.5 Engines with predefined parameters\n+// 5.1.5 [2]\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::mt19937 a;\n+  for (int i = 0; i < 9999; ++i)\n+    a();\n+  \n+  VERIFY( a() == 3346425566ul );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2e2e757cbebfb361a22db1d72ca10398a76a70f6", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/ranlux3.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Franlux3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Franlux3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Franlux3.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,44 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.5 Engines with predefined parameters\n+// 5.1.5 [3]\n+\n+#include <iostream>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::ranlux3 a;\n+  for (int i = 0; i < 9999; ++i)\n+    a();\n+\n+  VERIFY( a() == 5957620 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6ac8fb23dd02910a6a3a2759f9fdc4cbac0c3884", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/ranlux4.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Franlux4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Franlux4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Franlux4.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,43 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.5 Engines with predefined parameters\n+// 5.1.5 [3]\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::tr1::ranlux4 a;\n+  for (int i = 0; i < 9999; ++i)\n+    a();\n+\n+  VERIFY( a() == 8587295 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5ce9a991d014d2952618f13d0fc0fd1916fa65c2", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/cons/default.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fdefault.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,43 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.3 class template subtract_with_carry [tr.rand.eng.sub]\n+// 5.1.1 Table 16 line 1 default ctor\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  subtract_with_carry<unsigned long, (1 << 24), 10, 24> x;\n+  VERIFY( x.min() == 0 );\n+  VERIFY( x.max() == ((1<<24)-1) );\n+  VERIFY( x() == 15039276 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "717069086aff47ffc1fc4c708d3d98b89f65fab7", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/cons/gen1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fgen1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fgen1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fgen1.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,50 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.3 class template subtract_with_carry [tr.rand.eng.sub]\n+// 5.1.1 Table 16 line 3 Gen ctor\n+\n+#include <ctime>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+// a not untypical initialization function\n+unsigned long\n+gen()\n+{\n+  return std::time(0);\n+}\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  subtract_with_carry<unsigned long, (1 << 24), 10, 24> x(gen);\n+  VERIFY( x.min() == 0 );\n+  VERIFY( x.max() == ((1 << 24) - 1) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "61d66ef9fe3186a541a122f3e12ef7304b0b84ef", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/cons/seed1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed1.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,40 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.3 class template subtract_with_carry [tr.rand.eng.sub]\n+// 5.1.1 Table 16 line 2 seed ctor\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  unsigned long seed = 2;\n+  subtract_with_carry<unsigned long, (1 << 24), 10, 24> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "192a9b4e70f1b805cf95576934ed42da50e62ae0", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/cons/seed2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Fcons%2Fseed2.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,41 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.3 class template subtract_with_carry [tr.rand.eng.sub]\n+// 5.1.1 Table 16 line 2 seed ctor\n+// 5.1.1 (4) point 2: Gen is a fundamental type.\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  double seed = 2.0;\n+  subtract_with_carry<unsigned long, (1 << 24), 10, 24> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8a5b9a5045fa768d288e6f1983e97f5c81a71e1a", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/operators/equal.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Foperators%2Fequal.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,50 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.3 class template subtract_with_carry [tr.rand.eng.sub]\n+// 5.1.1 Table 16\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  subtract_with_carry<unsigned long, (1 << 24), 10, 24> u;\n+  subtract_with_carry<unsigned long, (1 << 24), 10, 24> v;\n+\n+  VERIFY( u == v );\n+  \n+  for (int i = 0; i < 100; ++i)\n+    {\n+      u();\n+      v();\n+    }\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8d5f6e0c57ae835e9ff70ae8f81a30f410f2dfa1", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/operators/not_equal.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Foperators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Foperators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Foperators%2Fnot_equal.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,43 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.3 class template subtract_with_carry [tr.rand.eng.sub]\n+// 5.1.1 Table 16\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  subtract_with_carry<unsigned long, (1 << 24), 10, 24> u(1);\n+  subtract_with_carry<unsigned long, (1 << 24), 10, 24> v(2);\n+  \n+  VERIFY( u != v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bbc645037ef69775b5770fb4ea94fbb879a2bef5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/operators/serialize.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Foperators%2Fserialize.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,51 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.3 class template subtract_with_carry [tr.rand.eng.sub]\n+// 5.1.1 Table 16\n+\n+#include <sstream>\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::subtract_with_carry;\n+\n+  std::stringstream str;\n+  subtract_with_carry<unsigned long, (1 << 24), 10, 24> u;\n+  subtract_with_carry<unsigned long, (1 << 24), 10, 24> v;\n+  \n+  u(); // advance\n+  str << u;\n+  \n+  VERIFY( u != v );\n+  \n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d7dd8310fe2fc85339b55df907acd369abb6a388", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/subtract_with_carry/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fsubtract_with_carry%2Frequirements%2Ftypedefs.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+//\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.3 Class template subtract_with_carry\n+// 5.1.1 [1] Table 15\n+\n+#include <tr1/random>\n+\n+void\n+test01()\n+{\n+  typedef std::tr1::subtract_with_carry<long, 8, 2, 4> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "1b96b54031bb7c8ac93625dfb562bd2c797cec33", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/uniform_int/cons/default.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Fcons%2Fdefault.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,42 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.1 class template uniform_int\n+// 5.1.7.1 [2] constructors and member functions\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  uniform_int<int> u;\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == 9 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3a44a947cff945372b836288cc15cd294f06a65", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/uniform_int/cons/range.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Fcons%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Fcons%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Fcons%2Frange.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,42 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.1 class template uniform_int\n+// 5.1.7.1 [2] constructors and member functions\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std::tr1;\n+\n+  uniform_int<int> u(1, 20);\n+  VERIFY( u.min() == 1 );\n+  VERIFY( u.max() == 20 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4beb1ba43d92f3865e33fcc406aa35fe0a4a86b1", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/uniform_int/cons/range_neg.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Fcons%2Frange_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Fcons%2Frange_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Fcons%2Frange_neg.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,42 @@\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-D_GLIBCXX_DEBUG\" }\n+\n+// 5.1.7.1 class template uniform_int\n+// 5.1.7.1 [2] constructors and member functions\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  uniform_int<int> u(20, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "86a09cdcea51f29a251c5b5ddcaa65883e6c1688", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/uniform_int/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_int%2Frequirements%2Ftypedefs.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+//\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.1 Class template uniform_int\n+// 5.1.1 [7] Table 17\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef uniform_int<int> test_type;\n+  \n+  typedef test_type::input_type  input_type;\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "b1ca8f4db581e45cf84e80f005d911dcc91c5f33", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/uniform_real/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_real%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_real%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Funiform_real%2Frequirements%2Ftypedefs.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile }\n+//\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.7.6 Class template uniform_int [tr.rand.dist.runif]\n+// 5.1.1 [7] Table 17\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef uniform_real<double> test_type;\n+\n+  typedef test_type::input_type  input_type;\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "a92c7e57a9e83b1fc6f814cdad773c442d7d928b", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/variate_generator/requirements/typedefs.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fvariate_generator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fvariate_generator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fvariate_generator%2Frequirements%2Ftypedefs.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+//\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.3 class template variate_generator\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef variate_generator\n+    <\n+    linear_congruential<unsigned long, 16807 , 0 , 2147483647>,\n+    uniform_int<int>\n+    > test_type;\n+\n+  typedef test_type::engine_type       engine_type;\n+  typedef test_type::engine_value_type engine_value_type;\n+  typedef test_type::distribution_type distribution_type;\n+  typedef test_type::result_type       result_type;\n+}"}, {"sha": "0665f8ef43c1d4e79d890fe06e1a5d91f8dcf6f5", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilies/random/xor_combine/requirements/typedefs.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fxor_combine%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fxor_combine%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilies%2Frandom%2Fxor_combine%2Frequirements%2Ftypedefs.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+//\n+// 2006-06-04  Stephen M. Webb <stephen.webb@bregmasoft.com>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.6 Class template xor_combine\n+// 5.1.1 [1] Table 15\n+\n+#include <tr1/random>\n+\n+void\n+test01() \n+{ \n+  using namespace std::tr1;\n+\n+  typedef xor_combine\n+    <\n+    subtract_with_carry<long, (1 << 24), 10, 24>, 1,\n+    linear_congruential<unsigned long, 16807, 0, 2147483647>, 2\n+    > test_type;\n+  \n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "ec263405ca56fab50f946ae9bc17c995b775b078", "filename": "libstdc++-v3/testsuite/tr1/headers.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc?ref=86ad0dd600b5da40ac5c0ebd8dc230a603d3fce2", "patch": "@@ -45,6 +45,7 @@\n #include <tr1/limits.h>\n #include <tr1/math.h>\n #include <tr1/memory>\n+#include <tr1/random>\n #include <tr1/stdarg.h>\n #include <tr1/stdbool.h>\n #include <tr1/stdint.h>"}]}