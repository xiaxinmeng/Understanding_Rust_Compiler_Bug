{"sha": "08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhkMmVkYWU1ZDg0MjA5YzBkY2YzMjdhMTNkNGY2YjRlYWNkYjFhYw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-31T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-31T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "3588d5f3d6e897c1d8d466978598594768d49432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3588d5f3d6e897c1d8d466978598594768d49432"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/comments", "author": null, "committer": null, "parents": [{"sha": "d0b7c821754e2b16e9e84d877082105799adf238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b7c821754e2b16e9e84d877082105799adf238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b7c821754e2b16e9e84d877082105799adf238"}], "stats": {"total": 177, "additions": 176, "deletions": 1}, "files": [{"sha": "739c5eac65eebd3345a3a07d6eb2b92fc0ea078d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "patch": "@@ -1,3 +1,76 @@\n+2021-03-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/99820\n+\t* config/aarch64/aarch64.c (aarch64_analyze_loop_vinfo): Check for\n+\tavailable issue_info before using it.\n+\n+2021-03-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/99822\n+\t* config/aarch64/aarch64.md (sub<mode>3_compare1_imm): Do not allow zero\n+\tin operand 1.\n+\n+2021-03-30  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/99718\n+\t* config/rs6000/altivec.md (altivec_lvsl_reg): Change to ...\n+\t(altivec_lvsl_reg_<mode>): ... this.\n+\t(altivec_lvsr_reg): Change to ...\n+\t(altivec_lvsr_reg_<mode>): ... this.\n+\t* config/rs6000/predicates.md (vec_set_index_operand): New.\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin):\n+\tEnable 32bit variable vec_insert for all TARGET_VSX.\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_set_var_p9):\n+\tEnable 32bit variable vec_insert for p9 and above.\n+\t(rs6000_expand_vector_set_var_p8): Rename to ...\n+\t(rs6000_expand_vector_set_var_p7): ... this.\n+\t(rs6000_expand_vector_set): Use TARGET_VSX and adjust assert\n+\tposition.\n+\t* config/rs6000/vector.md (vec_set<mode>): Use vec_set_index_operand.\n+\t* config/rs6000/vsx.md (xl_len_r): Use gen_altivec_lvsl_reg_di and\n+\tgen_altivec_lvsr_reg_di.\n+\n+2021-03-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/99744\n+\t* config/i386/ia32intrin.h (__rdtsc): Defined as macro.\n+\t(__rdtscp): Likewise.\n+\n+2021-03-30  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/99825\n+\t* tree-vect-slp-patterns.c (vect_check_evenodd_blend):\n+\tReject non-mult 2 lanes.\n+\n+2021-03-30  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/99773\n+\t* config/arm/arm.c (arm_file_start): Fix emission of\n+\tTag_ABI_VFP_args attribute.\n+\n+2021-03-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99824\n+\t* stor-layout.c (set_min_and_max_values_for_integral_type):\n+\tAssert the precision is within the bounds of\n+\tWIDE_INT_MAX_PRECISION.\n+\t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Use\n+\tthe outermost component ref only to lower the access size\n+\tand initialize that from the access type.\n+\n+2021-03-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/98136\n+\t* config/aarch64/aarch64.md (mov<mode>): Pass multi-instruction\n+\tCONST_INTs to aarch64_expand_mov_immediate when called after RA.\n+\n+2021-03-30  Mihailo Stojanovic  <mihailo.stojanovic@typhoon-hil.com>\n+\n+\t* config/aarch64/aarch64.md\n+\t(<optab>_trunc<fcvt_target><GPI:mode>2): Set the \"arch\"\n+\tattribute to disambiguate between SIMD and FP variants of the\n+\tinstruction.\n+\n 2021-03-29  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-modref.c (merge_call_lhs_flags): Correct handling of deref."}, {"sha": "eafec334c600d0b026332f4572bd4690fc9b0b0d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "patch": "@@ -1 +1 @@\n-20210330\n+20210331"}, {"sha": "730039a4b757b87ddde951f14766a9e0fd574cb3", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "patch": "@@ -1,3 +1,19 @@\n+2021-03-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region.h (region::dump_to_pp): Remove old decl.\n+\n+2021-03-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sm-file.cc (fileptr_state_machine::on_stmt): Only call\n+\tget_diagnostic_tree if the result will be used.\n+\t* sm-malloc.cc (malloc_state_machine::on_stmt): Likewise.\n+\t(malloc_state_machine::on_deallocator_call): Likewise.\n+\t(malloc_state_machine::on_realloc_call): Likewise.\n+\t(malloc_state_machine::on_realloc_call): Likewise.\n+\t* sm-sensitive.cc\n+\t(sensitive_state_machine::warn_for_any_exposure): Likewise.\n+\t* sm-taint.cc (taint_state_machine::on_stmt): Likewise.\n+\n 2021-03-25  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93695"}, {"sha": "d4c317c8d39d9609c1f785cd2d8ebb6c7142b6ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "patch": "@@ -1,3 +1,17 @@\n+2021-03-30  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99283\n+\t* module.cc (dumper::operator): Make less brittle.\n+\t(trees_out::core_bools): VAR_DECLs always have a context.\n+\t(trees_out::key_mergeable): Use same_type_p for asserting.\n+\t(trees_in::read_var_def): Propagate\n+\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P.\n+\n+2021-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99790\n+\t* cp-gimplify.c (cp_gimplify_expr): Handle PTRMEM_CST.\n+\n 2021-03-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/98352"}, {"sha": "b12e44200aed9a5925b8d9e6a5e5fd19542eb259", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08d2edae5d84209c0dcf327a13d4f6b4eacdb1ac", "patch": "@@ -1,3 +1,75 @@\n+2021-03-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/symbolic-1.c: Fix typo.\n+\n+2021-03-30  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99283\n+\t* g++.dg/modules/pr99283-5.h: New.\n+\t* g++.dg/modules/pr99283-5_a.H: New.\n+\t* g++.dg/modules/pr99283-5_b.H: New.\n+\t* g++.dg/modules/pr99283-5_c.C: New.\n+\n+2021-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99790\n+\t* g++.dg/cpp1z/pr99790.C: New test.\n+\n+2021-03-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/99822\n+\t* gcc.c-torture/compile/pr99822.c: New test.\n+\n+2021-03-30  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/99718\n+\tPR target/99718\n+\t* gcc.target/powerpc/fold-vec-insert-char-p8.c: Update\n+\tinstruction counts.\n+\t* gcc.target/powerpc/fold-vec-insert-char-p9.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-double.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-float-p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-float-p9.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-int-p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-int-p9.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-longlong.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-short-p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-insert-short-p9.c: Likewise.\n+\t* gcc.target/powerpc/pr79251.p8.c: Likewise.\n+\t* gcc.target/powerpc/pr79251.p9.c: Likewise.\n+\t* gcc.target/powerpc/vsx-builtin-7.c: Likewise.\n+\t* gcc.target/powerpc/pr79251-run.p7.c: New test.\n+\t* gcc.target/powerpc/pr79251.p7.c: New test.\n+\n+2021-03-30  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/99744\n+\t* gcc.target/i386/pr99744-1.c: New test.\n+\n+2021-03-30  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR tree-optimization/99825\n+\t* gfortran.dg/vect/pr99825.f90: New test.\n+\n+2021-03-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/99808\n+\t* gcc.target/aarch64/pr99808.c: Use ULL constant suffix.\n+\n+2021-03-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99824\n+\t* gcc.dg/torture/pr99824.c: New testcase.\n+\n+2021-03-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/98136\n+\t* g++.dg/pr98136.C: New test.\n+\n+2021-03-30  Mihailo Stojanovic  <mihailo.stojanovic@typhoon-hil.com>\n+\n+\t* gcc.target/aarch64/fcvt_nosimd.c: New test.\n+\n 2021-03-29  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/61869"}]}