{"sha": "eb0424da9d7f2680ba02986028842b920a429803", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwNDI0ZGE5ZDdmMjY4MGJhMDI5ODYwMjg4NDJiOTIwYTQyOTgwMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-20T18:52:01Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-20T18:52:01Z"}, "message": "alpha-protos.h (alpha_output_mi_thunk_osf): Update signature to match target.h.\n\n\t* alpha-protos.h (alpha_output_mi_thunk_osf): Update signature to\n\tmatch target.h.\n\t* arm-protos.h, arm.c (arm_output_mi_thunk): Likewise.\n\t* cris-protos.h, cris.c (cris_asm_output_mi_thunk): Likewise.\n\t* frv-protos.h, frv.c (frv_asm_output_mi_thunk): Likewise.\n\t* i386-protos.h, i386.c (x86_output_mi_vcall_thunk,\n\tx86_output_mi_thunk): Likewise.\n\t* i960-protos.h, i960.c (i960_output_mi_thunk): Likewise.\n\t* ia64-protos.h, ia64.c (ia64_output_mi_thunk): Likewise.\n\t* m68k-protos.h, m68k.c (m68k_output_mi_thunk): Likewise.\n\t* mmix-protos.h, mmix.c (mmix_asm_output_mi_thunk): Likewise.\n\t* rs6000-protos.h, rs6000.c (output_mi_thunk): Likewise.\n\t* s390-protos.h, s390.c (s390_output_mi_thunk): Likewise.\n\t* stormy16-protos.h, stormy16.c (xstormy16_asm_output_mi_thunk):\n\tLikewise.\n\t* vax-protos.h, vax.c (vax_output_mi_thunk): Likewise.\n\n\t* target.h (gcc_target): Update output_mi_thunk and\n\toutput_mi_vcall_thunk to take a HOST_WIDE_INT delta and\n\tvcall_index.\n\n\t* config/alpha/alpha.c: Replace ASM_OUTPUT_MI_THUNK with\n\tTARGET_ASM_OUTPUT_MI_THUNK in comments.\n\t* config/alpha/vms.h (ASM_OUTPUT_MI_THUNK): Don't #undef it.\n\t(TARGET_ASM_OUTPUT_MI_THUNK): #undef it.\n\t* config/frv/frv.h (DEFAULT_VTABLE_THUNKS): Remove definition.\n\t* config/i386/i386-protos.h (x86_output_mi_vcall_thunk): Update\n\tsignature.\n\t* config/i386/i386.c (x86_output_mi_vcall_thunk): Likewise.\n\t* config/i386/openbsd.h: Replace ASM_OUTPUT_MI_THUNK with\n\tTARGET_ASM_OUTPUT_MI_THUNK in comments.\n\t* config/i960/i960.h (ASM_OUTPUT_MI_THUNK): Don't define.\n\t(TARGET_ASM_OUTPUT_MI_THUNK): Do define.\n\t* config/m68k/openbsd.h: Replace ASM_OUTPUT_MI_THUNK with\n\tTARGET_ASM_OUTPUT_MI_THUNK in comments.\n\t* config/rs6000/rs6000.c (rs6000_ra_ever_killed): Remove #ifdef\n\tASM_OUTPUT_MI_THUNK and replace with check of targetm.\n\n\t* doc/tm.texi (TARGET_ASM_OUTPUT_MI_THUNK): Update signature.\n\t(TARGET_ASM_OUTPU_MI_VCALL_THUNK): Likewise.\n\nFrom-SVN: r58333", "tree": {"sha": "f987337a20b33d008b269c7740dfb4a88ae59e1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f987337a20b33d008b269c7740dfb4a88ae59e1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb0424da9d7f2680ba02986028842b920a429803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0424da9d7f2680ba02986028842b920a429803", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0424da9d7f2680ba02986028842b920a429803", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0424da9d7f2680ba02986028842b920a429803/comments", "author": null, "committer": null, "parents": [{"sha": "c654ee28cf64812b84eba99b76f5708f3ac7bc47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c654ee28cf64812b84eba99b76f5708f3ac7bc47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c654ee28cf64812b84eba99b76f5708f3ac7bc47"}], "stats": {"total": 231, "additions": 142, "deletions": 89}, "files": [{"sha": "871011a429ddd47d3a9001fece1b32a171363712", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -1,3 +1,47 @@\n+2002-10-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+            Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* alpha-protos.h (alpha_output_mi_thunk_osf): Update signature to\n+\tmatch target.h.\n+\t* arm-protos.h, arm.c (arm_output_mi_thunk): Likewise.\n+\t* cris-protos.h, cris.c (cris_asm_output_mi_thunk): Likewise.\n+\t* frv-protos.h, frv.c (frv_asm_output_mi_thunk): Likewise.\n+\t* i386-protos.h, i386.c (x86_output_mi_vcall_thunk,\n+\tx86_output_mi_thunk): Likewise.\n+\t* i960-protos.h, i960.c (i960_output_mi_thunk): Likewise.\n+\t* ia64-protos.h, ia64.c (ia64_output_mi_thunk): Likewise.\n+\t* m68k-protos.h, m68k.c (m68k_output_mi_thunk): Likewise.\n+\t* mmix-protos.h, mmix.c (mmix_asm_output_mi_thunk): Likewise.\n+\t* rs6000-protos.h, rs6000.c (output_mi_thunk): Likewise.\n+\t* s390-protos.h, s390.c (s390_output_mi_thunk): Likewise.\n+\t* stormy16-protos.h, stormy16.c (xstormy16_asm_output_mi_thunk):\n+\tLikewise.\n+\t* vax-protos.h, vax.c (vax_output_mi_thunk): Likewise.\n+\t\n+\t* target.h (gcc_target): Update output_mi_thunk and\n+\toutput_mi_vcall_thunk to take a HOST_WIDE_INT delta and\n+\tvcall_index.\n+\n+\t* config/alpha/alpha.c: Replace ASM_OUTPUT_MI_THUNK with\n+\tTARGET_ASM_OUTPUT_MI_THUNK in comments.\n+\t* config/alpha/vms.h (ASM_OUTPUT_MI_THUNK): Don't #undef it.\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): #undef it.\n+\t* config/frv/frv.h (DEFAULT_VTABLE_THUNKS): Remove definition.\n+\t* config/i386/i386-protos.h (x86_output_mi_vcall_thunk): Update\n+\tsignature.\n+\t* config/i386/i386.c (x86_output_mi_vcall_thunk): Likewise.\n+\t* config/i386/openbsd.h: Replace ASM_OUTPUT_MI_THUNK with\n+\tTARGET_ASM_OUTPUT_MI_THUNK in comments.\n+\t* config/i960/i960.h (ASM_OUTPUT_MI_THUNK): Don't define.\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): Do define.\n+\t* config/m68k/openbsd.h: Replace ASM_OUTPUT_MI_THUNK with\n+\tTARGET_ASM_OUTPUT_MI_THUNK in comments.\n+\t* config/rs6000/rs6000.c (rs6000_ra_ever_killed): Remove #ifdef\n+\tASM_OUTPUT_MI_THUNK and replace with check of targetm.\n+\n+\t* doc/tm.texi (TARGET_ASM_OUTPUT_MI_THUNK): Update signature.\n+\t(TARGET_ASM_OUTPU_MI_VCALL_THUNK): Likewise.\n+\t\n 2002-10-19  Brad Lucier  <lucier@math.purdue.edu>\n \n \t* real.c (do_add): Fix 0+0 sign corner case."}, {"sha": "92b6d5544c72e1915958b2d808483243a0ff84c8", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -141,8 +141,7 @@ extern rtx function_arg PARAMS ((CUMULATIVE_ARGS, enum machine_mode,\n \t\t\t\t tree, int));\n extern void alpha_start_function PARAMS ((FILE *, const char *, tree));\n extern void alpha_end_function PARAMS ((FILE *, const char *, tree));\n-extern void alpha_output_mi_thunk_osf PARAMS ((FILE *, tree,\n-\t\t\t\t\t       HOST_WIDE_INT, tree));\n+extern void alpha_output_mi_thunk_osf PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \n #ifdef REAL_VALUE_TYPE\n extern int check_float_value PARAMS ((enum machine_mode,"}, {"sha": "b6bcc324ab3baa33e6038d4b2b068b3975f51d8f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -6700,10 +6700,11 @@ alpha_sa_mask (imaskP, fmaskP)\n   unsigned int i;\n \n   /* Irritatingly, there are two kinds of thunks -- those created with\n-     ASM_OUTPUT_MI_THUNK and those with DECL_THUNK_P that go through\n-     the regular part of the compiler.  In the ASM_OUTPUT_MI_THUNK case\n-     we don't have valid register life info, but assemble_start_function\n-     wants to output .frame and .mask directives.  */\n+     TARGET_ASM_OUTPUT_MI_THUNK and those with DECL_THUNK_P that go\n+     through the regular part of the compiler.  In the\n+     TARGET_ASM_OUTPUT_MI_THUNK case we don't have valid register life\n+     info, but assemble_start_function wants to output .frame and\n+     .mask directives.  */\n   if (current_function_is_thunk && !no_new_pseudos)\n     {\n       *imaskP = 0;"}, {"sha": "8df61564e722c25faee975e8b17c4dd2e3de0563", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -454,7 +454,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   sprintf ((OUTPUT), \"%s___%d\", (NAME), (LABELNO)))\n \n /* ??? VMS uses different linkage.  */\n-#undef ASM_OUTPUT_MI_THUNK\n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n \n #undef ASM_SPEC\n #undef ASM_FINAL_SPEC"}, {"sha": "d1fd43b39c7f761821fe64c3d6ca7bc991d9cc6f", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -194,7 +194,7 @@ extern int  arm_dllexport_p \t\tPARAMS ((tree));\n extern int  arm_dllimport_p \t\tPARAMS ((tree));\n extern void arm_mark_dllexport \t\tPARAMS ((tree));\n extern void arm_mark_dllimport \t\tPARAMS ((tree));\n-extern void arm_output_mi_thunk         PARAMS ((FILE *, tree, int, tree));\n+extern void arm_output_mi_thunk         PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif\n \n extern void arm_init_builtins\t\tPARAMS ((void));"}, {"sha": "fa046e10860b8a847f37b49db1069c2dda9c678f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -11135,7 +11135,7 @@ void\n arm_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n-     int delta;\n+     HOST_WIDE_INT delta;\n      tree function;\n {\n   int mi_delta = delta;"}, {"sha": "a86ae714bd8a5e21d92f929452ece28ebe66cb11", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -54,7 +54,7 @@ extern rtx cris_expand_builtin_va_arg PARAMS ((tree, tree));\n \n #ifdef STDIO_INCLUDED\n # ifdef TREE_CODE\n-extern void cris_asm_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern void cris_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n # endif\n #endif\n "}, {"sha": "4128742a5bc25d90d9885f677738ed908207453b", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -2570,23 +2570,27 @@ cris_override_options ()\n   init_machine_status = cris_init_machine_status;\n }\n \n-/* The ASM_OUTPUT_MI_THUNK worker.  */\n+/* The TARGET_ASM_OUTPUT_MI_THUNK worker.  */\n \n void\n cris_asm_output_mi_thunk (stream, thunkdecl, delta, funcdecl)\n      FILE *stream;\n      tree thunkdecl ATTRIBUTE_UNUSED;\n-     int delta;\n+     HOST_WIDE_INT delta;\n      tree funcdecl;\n {\n   if (delta > 0)\n-    fprintf (stream, \"\\tadd%s %d,$%s\\n\",\n-\t     ADDITIVE_SIZE_MODIFIER (delta), delta,\n-\t     reg_names[CRIS_FIRST_ARG_REG]);\n+    {\n+      fprintf (stream, \"\\tadd%s \", ADDITIVE_SIZE_MODIFIER (delta));\n+      fprintf (stream, HOST_WIDE_INT_PRINT_DEC, delta);\n+      fprintf (stream, \",$%s\\n\", reg_names[CRIS_FIRST_ARG_REG]);\n+    }\n   else if (delta < 0)\n-    fprintf (stream, \"\\tsub%s %d,$%s\\n\",\n-\t     ADDITIVE_SIZE_MODIFIER (-delta), -delta,\n-\t     reg_names[CRIS_FIRST_ARG_REG]);\n+    {\n+      fprintf (stream, \"\\tsub%s \", ADDITIVE_SIZE_MODIFIER (-delta));\n+      fprintf (stream, HOST_WIDE_INT_PRINT_DEC, -delta);\n+      fprintf (stream, \",$%s\\n\", reg_names[CRIS_FIRST_ARG_REG]);\n+    }\n \n   if (flag_pic)\n     {"}, {"sha": "32cff3c2bb5460e7519aa57252f02b08e28773ec", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -1908,7 +1908,7 @@ typedef struct d30v_stack {\n    frontend will generate a less efficient heavyweight thunk that calls\n    FUNCTION instead of jumping to it.  The generic approach does not support\n    varargs.  */\n-/* #define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) */\n+/* #define TARGET_ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) */\n \n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */"}, {"sha": "5965c58b29594cf5eeff4ca1ea8b8c43948153db", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -115,8 +115,7 @@ extern rtx frv_index_memory\t\t\tPARAMS ((rtx,\n \t\t\t\t\t\t\t int));\n \n #ifdef TREE_CODE\n-extern void frv_asm_output_mi_thunk\t\tPARAMS ((FILE *, tree, long,\n-\t\t\t\t\t\t\t tree));\n+extern void frv_asm_output_mi_thunk\t\tPARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif\t/* TREE_CODE */\n \n extern const char *frv_asm_output_opcode"}, {"sha": "39a1cd77b98d79dd70164b18c0b43ff489a2b7bd", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -1870,7 +1870,7 @@ void\n frv_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n-     long delta;\n+     HOST_WIDE_INT delta;\n      tree function;\n {\n   const char *name_func = XSTR (XEXP (DECL_RTL (function), 0), 0);\n@@ -1880,12 +1880,16 @@ frv_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n \n   /* Do the add using an addi if possible */\n   if (IN_RANGE_P (delta, -2048, 2047))\n-    fprintf (file, \"\\taddi %s,#%ld,%s\\n\", name_arg0, delta, name_arg0);\n+    fprintf (file, \"\\taddi %s,#%d,%s\\n\", name_arg0, (int) delta, name_arg0);\n   else\n     {\n       const char *name_add = reg_names[TEMP_REGNO];\n-      fprintf (file, \"\\tsethi%s #hi(%ld),%s\\n\", parallel, delta, name_add);\n-      fprintf (file, \"\\tsetlo #lo(%ld),%s\\n\", delta, name_add);\n+      fprintf (file, \"\\tsethi%s #hi(\", parallel);\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n+      fprintf (file, \"),%s\\n\", name_add);\n+      fprintf (file, \"\\tsetlo #lo(\");\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n+      fprintf (file, \"),%s\\n\", name_add);\n       fprintf (file, \"\\tadd %s,%s,%s\\n\", name_add, name_arg0, name_arg0);\n     }\n "}, {"sha": "f8c2755f1c37f3a35a3be1b78edeb410d25b42d0", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -748,18 +748,6 @@ extern int g_switch_set;          /* whether -G xx was passed.  */\n    Defined in svr4.h.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n-/* GNU CC supports two ways of implementing C++ vtables: traditional or with\n-   so-called \"thunks\".  The flag `-fvtable-thunk' chooses between them.  Define\n-   this macro to be a C expression for the default value of that flag.  If\n-   `DEFAULT_VTABLE_THUNKS' is 0, GNU CC uses the traditional implementation by\n-   default.  The \"thunk\" implementation is more efficient (especially if you\n-   have provided an implementation of `ASM_OUTPUT_MI_THUNK', but is not binary\n-   compatible with code compiled using the traditional implementation.  If you\n-   are writing a new ports, define `DEFAULT_VTABLE_THUNKS' to 1.\n-\n-   If you do not define this macro, the default for `-fvtable-thunk' is 0.  */\n-#define DEFAULT_VTABLE_THUNKS 1\n-\n \f\n /* Layout of Source Language Data Types.  */\n "}, {"sha": "b38a65ac7dcb9c676110a97cfd1ec8362845071f", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -211,8 +211,8 @@ extern tree ix86_handle_shared_attribute PARAMS ((tree *, tree, tree, int, bool\n extern unsigned int i386_pe_section_type_flags PARAMS ((tree, const char *,\n \t\t\t\t\t\t\tint));\n extern void i386_pe_asm_named_section PARAMS ((const char *, unsigned int));\n-extern void x86_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n-extern void x86_output_mi_vcall_thunk PARAMS ((FILE *, tree, int, int, tree));\n+extern void x86_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+extern void x86_output_mi_vcall_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n extern int x86_field_alignment PARAMS ((tree, int));\n #endif\n "}, {"sha": "299bd826326228ef9ea523a2bfb8379b27fe8310", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -13906,8 +13906,8 @@ void\n x86_output_mi_vcall_thunk (file, thunk, delta, vcall_index, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n-     int delta;\n-     int vcall_index;\n+     HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_index;\n      tree function;\n {\n   rtx xops[3];\n@@ -14010,7 +14010,7 @@ void\n x86_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk;\n-     int delta;\n+     HOST_WIDE_INT delta;\n      tree function;\n {\n   x86_output_mi_vcall_thunk (file, thunk, delta, /*vcall_index=*/0, "}, {"sha": "b792450d1f7540a8c44a5330917d7cca601d9ea9", "filename": "gcc/config/i386/openbsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi386%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsd.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -97,7 +97,7 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_PREFERRED_EH_DATA_FORMAT\n \n \n-/* Note that we pick up ASM_OUTPUT_MI_THUNK from unix.h.  */\n+/* Note that we pick up TARGET_ASM_OUTPUT_MI_THUNK from unix.h.  */\n \n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \";#\""}, {"sha": "594e07dd190cb8560e8776a113503cf578e00f0f", "filename": "gcc/config/i960/i960-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -86,7 +86,7 @@ extern void i960_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *, enum machine\n extern tree i960_build_va_list PARAMS ((void));\n extern int i960_final_reg_parm_stack_space PARAMS ((int, tree));\n extern int i960_reg_parm_stack_space PARAMS ((tree));\n-extern void i960_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern void i960_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif /* TREE_CODE */\n \n extern int process_pragma PARAMS ((int(*)(void), void(*)(int), const char *));"}, {"sha": "40717783d55ea6cf14500fe4d31f07eed319d240", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -2829,7 +2829,7 @@ void\n i960_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n-     int delta;\n+     HOST_WIDE_INT delta;\n      tree function;\n {\n   int d = delta;"}, {"sha": "ac24ece0fa93b7ca46208dce7aa2fddc6582a75f", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -1466,4 +1466,4 @@ extern int rtx_equal_function_value_matters;\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK i960_output_mi_thunk\n+#define TARGET_ASM_OUTPUT_MI_THUNK i960_output_mi_thunk"}, {"sha": "c4a43cc03081d13cfa1bc2635ca87fe4bd487152", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -121,7 +121,7 @@ extern int ia64_function_arg_pass_by_reference PARAMS((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t       tree, int));\n extern int ia64_return_in_memory PARAMS((tree));\n extern void ia64_asm_output_external PARAMS((FILE *, tree, const char *));\n-extern void ia64_output_mi_thunk PARAMS((FILE *, tree, int, tree));\n+extern void ia64_output_mi_thunk PARAMS((FILE *, tree, HOST_WIDE_INT, tree));\n #endif /* TREE_CODE */\n \n extern int ia64_register_move_cost PARAMS((enum machine_mode, enum reg_class,"}, {"sha": "2b74f433e5b69010e9a1fac42576937cc3c55fa1", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -8163,7 +8163,7 @@ void\n ia64_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n-     int delta;\n+     HOST_WIDE_INT delta;\n      tree function;\n {\n   if (CONST_OK_FOR_I (delta))\t\t\t\t\t\t"}, {"sha": "3beec986ae480af3c5b5231b7e68e46468296658", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -65,7 +65,7 @@ extern rtx legitimize_pic_address PARAMS ((rtx, enum machine_mode, rtx));\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern void m68k_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern void m68k_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif /* TREE_CODE */\n \n extern int flags_in_68881 PARAMS ((void));"}, {"sha": "f5fb6cf829fe4eea0ea6ee2b11148c405df79cec", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -3840,15 +3840,19 @@ void\n m68k_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n-     int delta;\n+     HOST_WIDE_INT d;\n      tree function;\n {\n   if (delta > 0 && delta <= 8)\t\t\t\t\t\t\n-    asm_fprintf (file, \"\\taddq.l %I%d,4(%Rsp)\\n\", delta);\t\t\n+    asm_fprintf (file, \"\\taddq.l %I%d,4(%Rsp)\\n\", (int) delta);\n   else if (delta < 0 && delta >= -8)\t\t\t\t\t\n-    asm_fprintf (file, \"\\tsubq.l %I%d,4(%Rsp)\\n\", -delta);\t\t\n+    asm_fprintf (file, \"\\tsubq.l %I%d,4(%Rsp)\\n\", (int) -delta);\n   else\t\t\t\t\t\t\t\t\t\n-    asm_fprintf (file, \"\\tadd.l %I%d,4(%Rsp)\\n\", delta);\t\t\n+    {\n+      asm_fprintf (file, \"\\tadd.l %I\");\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\t\t\n+      asm_fprintf (file, \",4(%Rsp)\\n\", delta);\t\t\n+    }\n \t\t\t\t\t\t\t\t\t\n   if (flag_pic)\t\t\t\t\t\t\t\t\n     {\t\t\t\t\t\t\t\t\t"}, {"sha": "8d62bdd6fd1574f6260bd3f242d21f9ebcbe7221", "filename": "gcc/config/m68k/openbsd.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fm68k%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fm68k%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fopenbsd.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -1,5 +1,5 @@\n /* Configuration file for an m68k OpenBSD target.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -86,7 +86,7 @@ Boston, MA 02111-1307, USA.  */\n #define DWARF2_UNWIND_INFO 0\n \n \n-/* TODO: ASM_OUTPUT_MI_THUNK is busted. I need to figure out \n+/* TODO: TARGET_ASM_OUTPUT_MI_THUNK is busted. I need to figure out \n    what bra func@PLTPC means under linux, and find the corresponding \n    construction for our gas/pic setup.  */\n #if 0\n@@ -95,7 +95,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n+#define TARGET_ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (DELTA > 0 && DELTA <= 8)\t\t\t\t\t\t\\\n     asm_fprintf (FILE, \"\\taddq.l %I%d,4(%Rsp)\\n\", DELTA);\t\t\\"}, {"sha": "0328df183d3f64e2743282218f96c61592a1d996", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -80,7 +80,7 @@ extern void mmix_asm_output_aligned_local\n   PARAMS ((FILE *, const char *, int, int));\n extern void mmix_asm_declare_register_global\n   PARAMS ((FILE *, tree, int, const char *));\n-extern void mmix_asm_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern void mmix_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \n /* Need tree.h and rtl.h */\n # ifdef RTX_CODE"}, {"sha": "e79e873f31690495d3855ed3d92ed25dd4762bbe", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -770,13 +770,13 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n   fputc ('\\n', stream);\n }\n \n-/* ASM_OUTPUT_MI_THUNK.  */\n+/* TARGET_ASM_OUTPUT_MI_THUNK.  */\n \n void\n mmix_asm_output_mi_thunk (stream, fndecl, delta, func)\n      FILE * stream;\n      tree fndecl ATTRIBUTE_UNUSED;\n-     int delta;\n+     HOST_WIDE_INT delta;\n      tree func;\n {\n   /* If you define STRUCT_VALUE to 0, rather than use STRUCT_VALUE_REGNUM,\n@@ -785,9 +785,9 @@ mmix_asm_output_mi_thunk (stream, fndecl, delta, func)\n   const char *regname = reg_names[MMIX_FIRST_INCOMING_ARG_REGNUM];\n \n   if (delta >= 0 && delta < 65536)\n-    fprintf (stream, \"\\tINCL %s,%d\\n\", regname, delta);\n+    fprintf (stream, \"\\tINCL %s,%d\\n\", regname, (int)delta);\n   else if (delta < 0 && delta >= -255)\n-    fprintf (stream, \"\\tSUBU %s,%s,%d\\n\", regname, regname, -delta);\n+    fprintf (stream, \"\\tSUBU %s,%s,%d\\n\", regname, regname, (int)-delta);\n   else\n     {\n       mmix_output_register_setting (stream, 255, delta, 1);"}, {"sha": "bbdd6891e4bd9d7b2633629ab609df92f42ea83d", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -126,7 +126,7 @@ extern int eq_neq_comparison_operator PARAMS ((rtx, enum machine_mode));\n extern int insn_refs_are_delayed PARAMS ((rtx));\n #endif /* RTX_CODE */\n \n-/* Prototype function used in macro ASM_OUTPUT_MI_THUNK.  */\n+/* Prototype function used in macro TARGET_ASM_OUTPUT_MI_THUNK.  */\n extern void pa_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n \n /* Prototype function used in macro CONST_OK_FOR_LETTER_P.  */"}, {"sha": "08540e37348c3f20dec9b9d47b297ed69572ab8a", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -150,7 +150,7 @@ extern void setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t    enum machine_mode, tree,\n \t\t\t\t\t    int *, int));\n extern struct rtx_def *rs6000_va_arg PARAMS ((tree, tree));\n-extern void output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern void output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n extern int function_ok_for_sibcall PARAMS ((tree));\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */"}, {"sha": "dcee67b020a8906bdeb433b849023b386e845eee", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -9456,10 +9456,9 @@ rs6000_ra_ever_killed ()\n   rtx reg;\n   rtx insn;\n \n-#ifdef ASM_OUTPUT_MI_THUNK\n-  if (current_function_is_thunk)\n+  if (targetm.asm_out.output_mi_thunk && current_function_is_thunk)\n     return 0;\n-#endif\n+\n   /* regs_ever_live has LR marked as used if any sibcalls are present,\n      but this should not force saving and restoring in the\n      pro/epilogue.  Likewise, reg_set_between_p thinks a sibcall\n@@ -11236,7 +11235,7 @@ void\n output_mi_thunk (file, thunk_fndecl, delta, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n-     int delta;\n+     HOST_WIDE_INT delta;\n      tree function;\n {\n   const char *this_reg =\n@@ -11254,9 +11253,9 @@ output_mi_thunk (file, thunk_fndecl, delta, function)\n   if (delta >= -32768 && delta <= 32767)\n     {\n       if (! TARGET_NEW_MNEMONICS)\n-\tfprintf (file, \"\\tcal %s,%d(%s)\\n\", this_reg, delta, this_reg);\n+\tfprintf (file, \"\\tcal %s,%d(%s)\\n\", this_reg, (int) delta, this_reg);\n       else\n-\tfprintf (file, \"\\taddi %s,%s,%d\\n\", this_reg, this_reg, delta);\n+\tfprintf (file, \"\\taddi %s,%s,%d\\n\", this_reg, this_reg, (int) delta);\n     }\n \n   /* 64-bit constants.  If \"int\" is 32 bits, we'll never hit this abort.  */\n@@ -11266,7 +11265,7 @@ output_mi_thunk (file, thunk_fndecl, delta, function)\n   /* Large constants that can be done by one addis instruction.  */\n   else if ((delta & 0xffff) == 0)\n     asm_fprintf (file, \"\\t{cau|addis} %s,%s,%d\\n\", this_reg, this_reg,\n-\t\t delta >> 16);\n+\t\t (int) (delta >> 16));\n \n   /* 32-bit constants that can be done by an add and addis instruction.  */\n   else"}, {"sha": "c85349df546ab577e33da29a0e31628174c49dac", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -86,7 +86,7 @@ extern tree s390_build_va_list PARAMS ((void));\n extern rtx s390_function_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n extern void s390_va_start PARAMS ((tree, rtx));\n extern rtx s390_va_arg PARAMS ((tree, tree));\n-extern void s390_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern void s390_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif /* RTX_CODE */\n #endif /* TREE_CODE */\n "}, {"sha": "420912787fd4dbf3a4922e2bae8a4e17c3e478c0", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -5587,7 +5587,7 @@ void\n s390_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n-     int delta;\n+     HOST_WIDE_INT delta;\n      tree function;\n {\n   if (TARGET_64BIT)                                                           "}, {"sha": "1a53cd14d0e9fe51b54f6e73d2cafd6693e53a9e", "filename": "gcc/config/sparc/openbsd.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fsparc%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fsparc%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fopenbsd.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -1,5 +1,5 @@\n /* Configuration file for sparc OpenBSD target.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -64,4 +64,4 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_PREFERRED_EH_DATA_FORMAT\n \n-/* Default sparc.h does already define ASM_OUTPUT_MI_THUNK */\n+/* Default sparc.h does already define TARGET_ASM_OUTPUT_MI_THUNK */"}, {"sha": "9f2ea2cababbe0bec2dc17b97368a5c04320405e", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -45,7 +45,7 @@ extern void    xstormy16_expand_builtin_va_start PARAMS ((tree, rtx));\n extern rtx     xstormy16_expand_builtin_va_arg PARAMS ((tree, tree));\n extern void    xstormy16_initialize_trampoline PARAMS ((rtx, rtx, rtx));\n extern rtx     xstormy16_function_value PARAMS ((tree, tree));\n-extern void    xstormy16_asm_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern void    xstormy16_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif\n \n #ifdef RTX_CODE"}, {"sha": "58d7ae418a53a0ea36e9871817eb17f3294f9efb", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -1384,7 +1384,7 @@ void\n xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n-     int delta;\n+     HOST_WIDE_INT delta;\n      tree function;\n {\n   int regnum = FIRST_ARGUMENT_REGISTER;\n@@ -1393,7 +1393,7 @@ xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n   if (aggregate_value_p (TREE_TYPE (TREE_TYPE (function))))\n     regnum += 1;\n   \n-  fprintf (file, \"\\tadd %s,#0x%x\\n\", reg_names[regnum], (delta) & 0xFFFF);\n+  fprintf (file, \"\\tadd %s,#0x%x\\n\", reg_names[regnum], (int) delta & 0xFFFF);\n   fputs (\"\\tjmpf \", file);\n   assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n   putc ('\\n', file);"}, {"sha": "68723086f0878efaf7b684a743350ba9f0c59ed7", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -36,7 +36,7 @@ extern int check_float_value PARAMS ((enum machine_mode, REAL_VALUE_TYPE *, int)\n \n #ifdef TREE_CODE\n extern void vms_check_external PARAMS ((tree, const char *, int));\n-extern void vax_output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n+extern void vax_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif /* TREE_CODE */\n \n extern void vms_flush_pending_externals PARAMS ((FILE *));"}, {"sha": "43ad73cdece976f0b526f561b9c6022c11cd233e", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -997,11 +997,13 @@ void\n vax_output_mi_thunk (file, thunk, delta, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n-     int delta;\n+     HOST_WIDE_INT delta;\n      tree function;\n {\n   fprintf (file, \"\\t.word 0x0ffc\\n\");\t\t\t\t\t\n-  asm_fprintf (file, \"\\taddl2 $%d,4(%Rap)\\n\", delta);\t\t\t\n+  fprintf (file, \"\\taddl2 $\");\n+  fprintf (file, HOST_WIDE_INT_PRINT_DEC, delta);\n+  asm_fprintf (file, \",4(%Rap)\\n\");\n   fprintf (file, \"\\tjmp \");\t\t\t\t\t\t\n   assemble_name (file,  XSTR (XEXP (DECL_RTL (function), 0), 0));\t\n   fprintf (file, \"+2\\n\");\t\t\t\t\t\t"}, {"sha": "bbe1ae8f9f618fc98874962ab969aded3888b8e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -1,3 +1,9 @@\n+2002-10-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* method.c (use_thunk): Compute the vcall index as a HOST_WIDE_INT.\n+\t* optimize.c (optimize_function): Replace ASM_OUTPUT_MI_THUNK with\n+\tTARGET_ASM_OUTPUT_MI_THUNK in comments.\n+\t\n 2002-10-18  Zack Weinberg  <zack@codesourcery.com>\n \n \t* decl.c (start_decl): Point users of the old initialized-"}, {"sha": "cb88833ab23e42bb4efcd27afebe0facc2d413e1", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -422,9 +422,12 @@ use_thunk (thunk_fndecl, emit_p)\n       assemble_start_function (thunk_fndecl, fnname);\n       if (targetm.asm_out.output_mi_vcall_thunk)\n \t{\n-\t  int vcall_value = (vcall_offset\n-\t\t\t     ? tree_low_cst (vcall_offset, /*pos=*/0)\n-\t\t\t     : 0);\n+\t  HOST_WIDE_INT vcall_value;\n+\n+\t  if (vcall_offset)\n+\t    vcall_value = tree_low_cst (vcall_offset, /*pos=*/0);\n+\t  else\n+\t    vcall_value = 0;\n \t  targetm.asm_out.output_mi_vcall_thunk (asm_out_file, \n \t\t\t\t\t\t thunk_fndecl, delta, \n \t\t\t\t\t\t vcall_value,"}, {"sha": "6fbcc2be192439b736d721fc5706ec071bbe8352", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -1,5 +1,5 @@\n /* Perform optimizations on tree structure.\n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Written by Mark Michell (mark@codesourcery.com).\n \n This file is part of GNU CC.\n@@ -64,7 +64,7 @@ optimize_function (fn)\n       /* We do not inline thunks, as (a) the backend tries to optimize\n          the call to the thunkee, (b) tree based inlining breaks that\n          optimization, (c) virtual functions are rarely inlineable,\n-         and (d) ASM_OUTPUT_MI_THUNK is there to DTRT anyway.  */\n+         and (d) TARGET_ASM_OUTPUT_MI_THUNK is there to DTRT anyway.  */\n       && !DECL_THUNK_P (fn))\n     {\n       optimize_inline_calls (fn);"}, {"sha": "5ca0836de07aa021a0039b0e949e535bc16f3899", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -4154,7 +4154,7 @@ You need not define this macro if you did not define\n @end table\n \n @findex TARGET_ASM_OUTPUT_MI_THUNK\n-@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, int @var{delta}, tree @var{function})\n+@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, HOST_WIDE_INT @var{delta}, tree @var{function})\n A function that outputs the assembler code for a thunk\n function, used to implement C++ virtual function calls with multiple\n inheritance.  The thunk acts as a wrapper around a virtual function,\n@@ -4189,7 +4189,7 @@ not support varargs.\n @end deftypefn\n \n @findex TARGET_ASM_OUTPUT_MI_VCALL_THUNK\n-@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_VCALL_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, int @var{delta}, int @var{vcall_offset}, tree @var{function})\n+@deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_VCALL_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, HOST_WIDE_INT @var{delta}, int @var{vcall_offset}, tree @var{function})\n A function like @code{TARGET_ASM_OUTPUT_MI_THUNK}, except that if\n @var{vcall_offset} is non-zero, an additional adjustment should be made\n after adding @code{delta}.  In particular, if @var{p} is the"}, {"sha": "857aad7288325e91b019c09d9994cb73a5453bff", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0424da9d7f2680ba02986028842b920a429803/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=eb0424da9d7f2680ba02986028842b920a429803", "patch": "@@ -121,11 +121,11 @@ struct gcc_target\n     void (* destructor) PARAMS ((rtx, int));\n \n     /* Output the assembler code for a thunk function.  */\n-    void (* output_mi_thunk) PARAMS ((FILE *, tree, int, tree));\n+    void (* output_mi_thunk) PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n \n     /* Output the assembler code for a thunk function with a vcall\n        offset.  */\n-    void (* output_mi_vcall_thunk) PARAMS ((FILE *, tree, int, int, tree));\n+    void (* output_mi_vcall_thunk) PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n   } asm_out;\n \n   /* Functions relating to instruction scheduling.  */"}]}