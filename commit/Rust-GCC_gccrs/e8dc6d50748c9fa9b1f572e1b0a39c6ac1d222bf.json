{"sha": "e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkYzZkNTA3NDhjOWZhOWIxZjU3MmUxYjBhMzljNmFjMWQyMjJiZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-07-30T18:40:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-07-30T18:40:12Z"}, "message": "combine.c (simplify_set, [...]): Use full mask instead of GET_MODE_MASK (mode) as force_to_mode argument.\n\n\t* combine.c (simplify_set, make_extraction, make_compound_operation\n\tmake_field_assignment): Use full mask instead of GET_MODE_MASK (mode)\n\tas force_to_mode argument.\n\nFrom-SVN: r35348", "tree": {"sha": "a32f660f85c17a3f80a9ad286cdd168f578b8db7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a32f660f85c17a3f80a9ad286cdd168f578b8db7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf/comments", "author": null, "committer": null, "parents": [{"sha": "49219895115ee8d9391c29912b057a7a7f58807b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49219895115ee8d9391c29912b057a7a7f58807b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49219895115ee8d9391c29912b057a7a7f58807b"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "87c9b6b81a084af7f1c4bf65e3710ef7bcf3431b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf", "patch": "@@ -1,3 +1,9 @@\n+Sun Jul 30 20:38:26 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* combine.c (simplify_set, make_extraction, make_compound_operation\n+\tmake_field_assignment): Use full mask instead of GET_MODE_MASK (mode)\n+\tas force_to_mode argument.\n+\n Sun Jul 30 20:30:41 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* combine.c (if_then_else_cond): Be sure that mode fits in HOST_WIDE_INT"}, {"sha": "a38c8eddea5d66898a377c4e59a89d6c5ed09a17", "filename": "gcc/combine.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e8dc6d50748c9fa9b1f572e1b0a39c6ac1d222bf", "patch": "@@ -4883,7 +4883,7 @@ simplify_set (x)\n \n   if (GET_MODE_CLASS (mode) == MODE_INT)\n     {\n-      src = force_to_mode (src, mode, GET_MODE_MASK (mode), NULL_RTX, 0);\n+      src = force_to_mode (src, mode, ~(HOST_WIDE_INT) 0, NULL_RTX, 0);\n       SUBST (SET_SRC (x), src);\n     }\n \n@@ -5977,7 +5977,7 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n       else\n \tnew = force_to_mode (inner, tmode,\n \t\t\t     len >= HOST_BITS_PER_WIDE_INT\n-\t\t\t     ? GET_MODE_MASK (tmode)\n+\t\t\t     ? ~(HOST_WIDE_INT) 0\n \t\t\t     : ((unsigned HOST_WIDE_INT) 1 << len) - 1,\n \t\t\t     NULL_RTX, 0);\n \n@@ -6198,7 +6198,7 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n       inner = force_to_mode (inner, wanted_inner_mode,\n \t\t\t     pos_rtx\n \t\t\t     || len + orig_pos >= HOST_BITS_PER_WIDE_INT\n-\t\t\t     ? GET_MODE_MASK (wanted_inner_mode)\n+\t\t\t     ? ~(HOST_WIDE_INT) 0\n \t\t\t     : ((((unsigned HOST_WIDE_INT) 1 << len) - 1)\n \t\t\t\t<< orig_pos),\n \t\t\t     NULL_RTX, 0);\n@@ -6528,8 +6528,8 @@ make_compound_operation (x, in_code)\n \t  && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (tem))\n \t  && subreg_lowpart_p (x))\n \t{\n-\t  rtx newer = force_to_mode (tem, mode,\n-\t\t\t\t     GET_MODE_MASK (mode), NULL_RTX, 0);\n+\t  rtx newer = force_to_mode (tem, mode, ~(HOST_WIDE_INT) 0,\n+\t\t\t\t     NULL_RTX, 0);\n \n \t  /* If we have something other than a SUBREG, we might have\n \t     done an expansion, so rerun outselves.  */\n@@ -7647,7 +7647,7 @@ make_field_assignment (x)\n \t\t\t\t\t     GET_MODE (src), other, pos),\n \t\t       mode,\n \t\t       GET_MODE_BITSIZE (mode) >= HOST_BITS_PER_WIDE_INT\n-\t\t       ? GET_MODE_MASK (mode)\n+\t\t       ? ~(HOST_WIDE_INT) 0\n \t\t       : ((unsigned HOST_WIDE_INT) 1 << len) - 1,\n \t\t       dest, 0);\n "}]}