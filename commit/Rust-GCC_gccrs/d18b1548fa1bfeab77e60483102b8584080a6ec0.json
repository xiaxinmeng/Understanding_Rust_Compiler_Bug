{"sha": "d18b1548fa1bfeab77e60483102b8584080a6ec0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE4YjE1NDhmYTFiZmVhYjc3ZTYwNDgzMTAyYjg1ODQwODBhNmVjMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T14:29:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T14:29:05Z"}, "message": "[multiple changes]\n\n2014-11-20  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb: Minor reformatting.\n\n2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb (Make_Subtype_From_Expr): Capture the bounds of\n\tall index constracts when the expression is of an array type.\n\n2014-11-20  Bob Duff  <duff@adacore.com>\n\n\t* s-taskin.ads: Minor comment improvements.\n\n2014-11-20  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch9.adb: Minor comment fixes.\n\t* s-taskin.adb (Initialize): Small simplification: pass System_Domain\n\tto Initialize_ATCB instead of passing null and then setting the Domain\n\tto System_Domain. This requires moving the creation of System_Domain\n\tearlier.\n\t* s-taprop-linux.adb (Set_Task_Affinity): Only call CPU_SET for\n\tprocessors that have a True in the Domain. This is necessary if the\n\tDomain is not all-True values.\n\n2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Has_Good_Profile): a) An stream attribute\n\tfor the class-wide type of an interface type is not a primitive\n\toperation and is not subject to the restrictions of 13.13. (38/3).\n\tb) A stream operation for an interface type must be a null\n\tprocedure, and it cannot be a function.\n\nFrom-SVN: r217857", "tree": {"sha": "7e19e37181423a52c57ca225bcfac3414dc80d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e19e37181423a52c57ca225bcfac3414dc80d3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d18b1548fa1bfeab77e60483102b8584080a6ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18b1548fa1bfeab77e60483102b8584080a6ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d18b1548fa1bfeab77e60483102b8584080a6ec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18b1548fa1bfeab77e60483102b8584080a6ec0/comments", "author": null, "committer": null, "parents": [{"sha": "d85badc750ae2eafa81d442e1702dd01cfbc3a82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d85badc750ae2eafa81d442e1702dd01cfbc3a82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d85badc750ae2eafa81d442e1702dd01cfbc3a82"}], "stats": {"total": 192, "additions": 147, "deletions": 45}, "files": [{"sha": "ce9c839881e461e37aeb041561e1e092e0ebf7c0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d18b1548fa1bfeab77e60483102b8584080a6ec0", "patch": "@@ -1,3 +1,35 @@\n+2014-11-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb: Minor reformatting.\n+\n+2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Make_Subtype_From_Expr): Capture the bounds of\n+\tall index constracts when the expression is of an array type.\n+\n+2014-11-20  Bob Duff  <duff@adacore.com>\n+\n+\t* s-taskin.ads: Minor comment improvements.\n+\n+2014-11-20  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch9.adb: Minor comment fixes.\n+\t* s-taskin.adb (Initialize): Small simplification: pass System_Domain\n+\tto Initialize_ATCB instead of passing null and then setting the Domain\n+\tto System_Domain. This requires moving the creation of System_Domain\n+\tearlier.\n+\t* s-taprop-linux.adb (Set_Task_Affinity): Only call CPU_SET for\n+\tprocessors that have a True in the Domain. This is necessary if the\n+\tDomain is not all-True values.\n+\n+2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Has_Good_Profile): a) An stream attribute\n+\tfor the class-wide type of an interface type is not a primitive\n+\toperation and is not subject to the restrictions of 13.13. (38/3).\n+\tb) A stream operation for an interface type must be a null\n+\tprocedure, and it cannot be a function.\n+\n 2014-11-20  Bob Duff  <duff@adacore.com>\n \n \t* exp_attr.adb (Attribute_Max_Size_In_Storage_Elements):"}, {"sha": "663507aa20e2fc878cb2f43f62a4f091be72e6b4", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=d18b1548fa1bfeab77e60483102b8584080a6ec0", "patch": "@@ -4232,10 +4232,12 @@ package body Exp_Attr is\n          --  retrieve the original attribute reference from the expression.\n \n          Attr := N;\n+\n          if Nkind (Attr) = N_Type_Conversion then\n             Attr := Expression (Attr);\n             Conversion_Added := True;\n          end if;\n+\n          pragma Assert (Nkind (Attr) = N_Attribute_Reference);\n \n          --  Heap-allocated controlled objects contain two extra pointers which"}, {"sha": "4674da70f8a7492ba5b4418ab8d18e8212997cbf", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=d18b1548fa1bfeab77e60483102b8584080a6ec0", "patch": "@@ -14146,9 +14146,7 @@ package body Exp_Ch9 is\n          --  present, then the dispatching domain is null. If a rep item is\n          --  present, then the dispatching domain is taken from the\n          --  _Dispatching_Domain field of the task value record, which was set\n-         --  from the rep item value. Note that this parameter must not be\n-         --  generated for the restricted profiles since Ravenscar does not\n-         --  allow dispatching domains.\n+         --  from the rep item value.\n \n          --  Case where Dispatching_Domain rep item applies: use given value\n \n@@ -14162,7 +14160,7 @@ package body Exp_Ch9 is\n                 Selector_Name =>\n                   Make_Identifier (Loc, Name_uDispatching_Domain)));\n \n-         --  No pragma or aspect Dispatching_Domain apply to the task\n+         --  No pragma or aspect Dispatching_Domain applies to the task\n \n          else\n             Append_To (Args, Make_Null (Loc));"}, {"sha": "a833a0ff8aff9ea4f1932da3aba17d4421a0ac66", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 63, "deletions": 16, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=d18b1548fa1bfeab77e60483102b8584080a6ec0", "patch": "@@ -6399,22 +6399,24 @@ package body Exp_Util is\n      (E       : Node_Id;\n       Unc_Typ : Entity_Id) return Node_Id\n    is\n-      Loc         : constant Source_Ptr := Sloc (E);\n       List_Constr : constant List_Id    := New_List;\n+      Loc         : constant Source_Ptr := Sloc (E);\n       D           : Entity_Id;\n-\n-      Full_Subtyp  : Entity_Id;\n-      Priv_Subtyp  : Entity_Id;\n-      Utyp         : Entity_Id;\n-      Full_Exp     : Node_Id;\n+      Full_Exp    : Node_Id;\n+      Full_Subtyp : Entity_Id;\n+      High_Bound  : Entity_Id;\n+      Index_Typ   : Entity_Id;\n+      Low_Bound   : Entity_Id;\n+      Priv_Subtyp : Entity_Id;\n+      Utyp        : Entity_Id;\n \n    begin\n       if Is_Private_Type (Unc_Typ)\n         and then Has_Unknown_Discriminants (Unc_Typ)\n       then\n-         --  Prepare the subtype completion, Go to base type to\n-         --  find underlying type, because the type may be a generic\n-         --  actual or an explicit subtype.\n+         --  Prepare the subtype completion. Use the base type to find the\n+         --  underlying type because the type may be a generic actual or an\n+         --  explicit subtype.\n \n          Utyp        := Underlying_Type (Base_Type (Unc_Typ));\n          Full_Subtyp := Make_Temporary (Loc, 'C');\n@@ -6451,22 +6453,67 @@ package body Exp_Util is\n          return New_Occurrence_Of (Priv_Subtyp, Loc);\n \n       elsif Is_Array_Type (Unc_Typ) then\n+         Index_Typ := First_Index (Unc_Typ);\n          for J in 1 .. Number_Dimensions (Unc_Typ) loop\n-            Append_To (List_Constr,\n-              Make_Range (Loc,\n-                Low_Bound =>\n+\n+            --  Capture the bounds of each index constraint in case the context\n+            --  is an object declaration of an unconstrained type initialized\n+            --  by a function call:\n+\n+            --    Obj : Unconstr_Typ := Func_Call;\n+\n+            --  This scenario requires secondary scope management and the index\n+            --  constraint cannot depend on the temporary used to capture the\n+            --  result of the function call.\n+\n+            --    SS_Mark;\n+            --    Temp : Unconstr_Typ_Ptr := Func_Call'reference;\n+            --    subtype S is Unconstr_Typ (Temp.all'First .. Temp.all'Last);\n+            --    Obj : S := Temp.all;\n+            --    SS_Release;  --  Temp is gone at this point, bounds of S are\n+            --                 --  non existent.\n+\n+            --  The bounds are kept as variables rather than constants because\n+            --  this prevents spurious optimizations down the line.\n+\n+            --  Generate:\n+            --    Low_Bound : Base_Type (Index_Typ) := E'First (J);\n+\n+            Low_Bound := Make_Temporary (Loc, 'B');\n+            Insert_Action (E,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Low_Bound,\n+                Object_Definition   =>\n+                  New_Occurrence_Of (Base_Type (Etype (Index_Typ)), Loc),\n+                Expression          =>\n                   Make_Attribute_Reference (Loc,\n-                    Prefix => Duplicate_Subexpr_No_Checks (E),\n+                    Prefix         => Duplicate_Subexpr_No_Checks (E),\n                     Attribute_Name => Name_First,\n-                    Expressions => New_List (\n-                      Make_Integer_Literal (Loc, J))),\n+                    Expressions    => New_List (\n+                      Make_Integer_Literal (Loc, J)))));\n+\n+            --  Generate:\n+            --    High_Bound : Base_Type (Index_Typ) := E'Last (J);\n \n-                High_Bound =>\n+            High_Bound := Make_Temporary (Loc, 'B');\n+            Insert_Action (E,\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => High_Bound,\n+                Object_Definition   =>\n+                  New_Occurrence_Of (Base_Type (Etype (Index_Typ)), Loc),\n+                Expression          =>\n                   Make_Attribute_Reference (Loc,\n                     Prefix         => Duplicate_Subexpr_No_Checks (E),\n                     Attribute_Name => Name_Last,\n                     Expressions    => New_List (\n                       Make_Integer_Literal (Loc, J)))));\n+\n+            Append_To (List_Constr,\n+              Make_Range (Loc,\n+                Low_Bound  => New_Occurrence_Of (Low_Bound,  Loc),\n+                High_Bound => New_Occurrence_Of (High_Bound, Loc)));\n+\n+            Index_Typ := Next_Index (Index_Typ);\n          end loop;\n \n       elsif Is_Class_Wide_Type (Unc_Typ) then"}, {"sha": "a95013fa67619e5ebe3cb1a4185e40778c2f11b1", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=d18b1548fa1bfeab77e60483102b8584080a6ec0", "patch": "@@ -1516,7 +1516,9 @@ package body System.Task_Primitives.Operations is\n                System.OS_Interface.CPU_ZERO (Size, CPU_Set);\n \n                for Proc in T.Common.Domain'Range loop\n-                  System.OS_Interface.CPU_SET (int (Proc), Size, CPU_Set);\n+                  if T.Common.Domain (Proc) then\n+                     System.OS_Interface.CPU_SET (int (Proc), Size, CPU_Set);\n+                  end if;\n                end loop;\n             end if;\n "}, {"sha": "1643e5c56e663993571c0d359579dedae42aa020", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=d18b1548fa1bfeab77e60483102b8584080a6ec0", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -205,18 +205,6 @@ package body System.Tasking is\n          then System.Multiprocessors.Not_A_Specific_CPU\n          else System.Multiprocessors.CPU_Range (Main_CPU));\n \n-      T := STPO.New_ATCB (0);\n-      Initialize_ATCB\n-        (null, null, Null_Address, Null_Task, null, Base_Priority, Base_CPU,\n-         null, Task_Info.Unspecified_Task_Info, 0, T, Success);\n-      pragma Assert (Success);\n-\n-      STPO.Initialize (T);\n-      STPO.Set_Priority (T, T.Common.Base_Priority);\n-      T.Common.State := Runnable;\n-      T.Common.Task_Image_Len := Main_Task_Image'Length;\n-      T.Common.Task_Image (Main_Task_Image'Range) := Main_Task_Image;\n-\n       --  At program start-up the environment task is allocated to the default\n       --  system dispatching domain.\n       --  Make sure that the processors which are not available are not taken\n@@ -228,7 +216,27 @@ package body System.Tasking is\n           (Multiprocessors.CPU'First .. Multiprocessors.Number_Of_CPUs =>\n              True);\n \n-      T.Common.Domain := System_Domain;\n+      T := STPO.New_ATCB (0);\n+      Initialize_ATCB\n+        (Self_ID => null,\n+         Task_Entry_Point => null,\n+         Task_Arg => Null_Address,\n+         Parent => Null_Task,\n+         Elaborated => null,\n+         Base_Priority => Base_Priority,\n+         Base_CPU => Base_CPU,\n+         Domain => System_Domain,\n+         Task_Info => Task_Info.Unspecified_Task_Info,\n+         Stack_Size => 0,\n+         T => T,\n+         Success => Success);\n+      pragma Assert (Success);\n+\n+      STPO.Initialize (T);\n+      STPO.Set_Priority (T, T.Common.Base_Priority);\n+      T.Common.State := Runnable;\n+      T.Common.Task_Image_Len := Main_Task_Image'Length;\n+      T.Common.Task_Image (Main_Task_Image'Range) := Main_Task_Image;\n \n       Dispatching_Domain_Tasks :=\n         new Array_Allocated_Tasks'"}, {"sha": "a89fe6b2a41bb6378975f6ac939750caa69053d9", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=d18b1548fa1bfeab77e60483102b8584080a6ec0", "patch": "@@ -1178,9 +1178,11 @@ package System.Tasking is\n       Stack_Size       : System.Parameters.Size_Type;\n       T                : Task_Id;\n       Success          : out Boolean);\n-   --  Initialize fields of a TCB and link into global TCB structures Call\n-   --  this only with abort deferred and holding RTS_Lock. Need more\n-   --  documentation, mention T, and describe Success ???\n+   --  Initialize fields of the TCB for task T, and link into global TCB\n+   --  structures. Call this only with abort deferred and holding\n+   --  RTS_Lock. Self_ID is the calling task (normally the activator of\n+   --  T). Success is set to indicate whether the TCB was successfully\n+   --  initialized. Need more documentation ???\n \n private\n "}, {"sha": "42e64b1287f6b559c62469367425ad1bb738a611", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18b1548fa1bfeab77e60483102b8584080a6ec0/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d18b1548fa1bfeab77e60483102b8584080a6ec0", "patch": "@@ -3550,10 +3550,19 @@ package body Sem_Ch13 is\n             end if;\n \n             --  Verify that the prefix of the attribute and the local name for\n-            --  the type of the formal match.\n+            --  the type of the formal match, or one is the class-wide of the\n+            --  other, in the case of a class-wide stream operation.\n \n-            if Base_Type (Typ) /= Base_Type (Ent)\n-              or else Present (Next_Formal (F))\n+            if  Base_Type (Typ) = Base_Type (Ent)\n+              or else (Is_Class_Wide_Type (Typ)\n+                and then Typ = Class_Wide_Type (Base_Type (Ent)))\n+            then\n+               null;\n+            else\n+               return False;\n+            end if;\n+\n+            if Present ((Next_Formal (F)))\n             then\n                return False;\n \n@@ -3635,12 +3644,14 @@ package body Sem_Ch13 is\n             --  procedure (RM 13.13.2 (38/3)).\n \n             elsif Is_Interface (U_Ent)\n+              and then not Is_Class_Wide_Type (U_Ent)\n               and then not Inside_A_Generic\n-              and then Ekind (Subp) = E_Procedure\n               and then\n-                not Null_Present\n-                  (Specification\n-                     (Unit_Declaration_Node (Ultimate_Alias (Subp))))\n+                (Ekind (Subp) = E_Function\n+                  or else\n+                    not Null_Present\n+                      (Specification\n+                         (Unit_Declaration_Node (Ultimate_Alias (Subp)))))\n             then\n                Error_Msg_N\n                  (\"stream subprogram for interface type \""}]}