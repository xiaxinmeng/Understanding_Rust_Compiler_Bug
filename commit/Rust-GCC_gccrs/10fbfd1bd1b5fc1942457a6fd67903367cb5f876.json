{"sha": "10fbfd1bd1b5fc1942457a6fd67903367cb5f876", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBmYmZkMWJkMWI1ZmMxOTQyNDU3YTZmZDY3OTAzMzY3Y2I1Zjg3Ng==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2015-02-25T12:08:57Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2015-02-25T12:08:57Z"}, "message": "Use variadic macros with avr-log.c.\n\n\t* config/avr/avr-protos.h (avr_vdump): New prototype.\n\t(avr_log_set_caller_e, avr_log_set_caller_f): Remove protos.\n\t(avr_edump, avr_fdump, avr_dump): (Re)define to use avr_vdump.\n\t* config/avr/avr-log.c: Adjust comments.\n\t(avr_vdump): New function.\n\t(avr_vadump): Pass caller as 2nd argument instead of format string.\n\t(avr_log_caller, avr_log_fdump_e, avr_log_fdump_f)\n\t(avr_log_set_caller_e, avr_log_set_caller_f): Remove.\n\nFrom-SVN: r220962", "tree": {"sha": "51ac589ee4d7a23f013ea6acd79f79d0eafc0692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51ac589ee4d7a23f013ea6acd79f79d0eafc0692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10fbfd1bd1b5fc1942457a6fd67903367cb5f876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10fbfd1bd1b5fc1942457a6fd67903367cb5f876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10fbfd1bd1b5fc1942457a6fd67903367cb5f876", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10fbfd1bd1b5fc1942457a6fd67903367cb5f876/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3d9afaff77287cdcbf6af5b4a4f54d0dc39119", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3d9afaff77287cdcbf6af5b4a4f54d0dc39119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3d9afaff77287cdcbf6af5b4a4f54d0dc39119"}], "stats": {"total": 99, "additions": 37, "deletions": 62}, "files": [{"sha": "1a53114579bcfa284609430a78395401fb51ceee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fbfd1bd1b5fc1942457a6fd67903367cb5f876/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fbfd1bd1b5fc1942457a6fd67903367cb5f876/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10fbfd1bd1b5fc1942457a6fd67903367cb5f876", "patch": "@@ -1,3 +1,16 @@\n+2015-02-25  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tUse variadic macros with avr-log.c.\n+\n+\t* config/avr/avr-protos.h (avr_vdump): New prototype.\n+\t(avr_log_set_caller_e, avr_log_set_caller_f): Remove protos.\n+\t(avr_edump, avr_fdump, avr_dump): (Re)define to use avr_vdump.\n+\t* config/avr/avr-log.c: Adjust comments.\n+\t(avr_vdump): New function.\n+\t(avr_vadump): Pass caller as 2nd argument instead of format string.\n+\t(avr_log_caller, avr_log_fdump_e, avr_log_fdump_f)\n+\t(avr_log_set_caller_e, avr_log_set_caller_f): Remove.\n+\n 2015-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/64374\n@@ -16,7 +29,7 @@\n \t* config/xtensa/xtensa.md (zero_cost_loop_start): Reverse numbering\n \tof operand 0 and operand 2.\n \t(zero_cost_loop_end, loop_end): Similarly.\n-\t\n+\n 2015-02-24  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gimple.h (gimple_build_assign): Rename CXX_MEM_STAT_DECL to"}, {"sha": "e84d579a7ae5dde48ad18e5ecab4daa63f1a5bf9", "filename": "gcc/config/avr/avr-log.c", "status": "modified", "additions": 19, "deletions": 56, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fbfd1bd1b5fc1942457a6fd67903367cb5f876/gcc%2Fconfig%2Favr%2Favr-log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fbfd1bd1b5fc1942457a6fd67903367cb5f876/gcc%2Fconfig%2Favr%2Favr-log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-log.c?ref=10fbfd1bd1b5fc1942457a6fd67903367cb5f876", "patch": "@@ -43,13 +43,11 @@\n \n /* This file supplies some functions for AVR back-end developers\n    with a printf-like interface.  The functions are called through\n-   macros avr_edump or avr_fdump from avr-protos.h:\n-\n-      avr_edump (const char *fmt, ...);\n-\n-      avr_fdump (FILE *stream, const char *fmt, ...);\n+   macros `avr_dump', `avr_edump' or `avr_fdump' from avr-protos.h:\n \n+   avr_fdump (FILE *stream, const char *fmt, ...);\n    avr_edump (fmt, ...) is a shortcut for avr_fdump (stderr, fmt, ...)\n+   avr_dump (fmt, ...)  is a shortcut for avr_fdump (dump_file, fmt, ...)\n \n   == known %-codes ==\n \n@@ -85,76 +83,41 @@\n /* Set according to -mlog= option.  */\n avr_log_t avr_log;\n \n-/* The caller as of __FUNCTION__ */\n-static const char *avr_log_caller = \"?\";\n-\n /* The worker function implementing the %-codes */\n static void avr_log_vadump (FILE*, const char*, va_list);\n \n-/* As we have no variadic macros, avr_edump maps to a call to\n-   avr_log_set_caller_e which saves __FUNCTION__ to avr_log_caller and\n-   returns a function pointer to avr_log_fdump_e.  avr_log_fdump_e\n-   gets the printf-like arguments and calls avr_log_vadump, the\n-   worker function.  avr_fdump works the same way.  */\n-\n-/* Provide avr_log_fdump_e/f so that avr_log_set_caller_e/_f can return\n-   their address.  */\n-\n-static int\n-avr_log_fdump_e (const char *fmt, ...)\n-{\n-  va_list ap;\n-\n-  va_start (ap, fmt);\n-  avr_log_vadump (stderr, fmt, ap);\n-  va_end (ap);\n-\n-  return 1;\n-}\n+/* Wrapper for avr_log_vadump.  If STREAM is NULL we are called by avr_dump,\n+   i.e. output to dump_file if available.  The 2nd argument is __FUNCTION__.\n+   The 3rd argument is the format string. */\n \n-static int\n-avr_log_fdump_f (FILE *stream, const char *fmt, ...)\n+int\n+avr_vdump (FILE *stream, const char *caller, ...)\n {\n   va_list ap;\n+        \n+  if (NULL == stream && dump_file)\n+    stream = dump_file;\n \n-  va_start (ap, fmt);\n+  va_start (ap, caller);\n   if (stream)\n-    avr_log_vadump (stream, fmt, ap);\n+    avr_log_vadump (stream, caller, ap);\n   va_end (ap);\n \n   return 1;\n }\n \n-/* Macros avr_edump/avr_fdump map to calls of the following two functions,\n-   respectively.  You don't need to call them directly.  */\n-\n-int (*\n-avr_log_set_caller_e (const char *caller)\n-     )(const char*, ...)\n-{\n-  avr_log_caller = caller;\n-\n-  return avr_log_fdump_e;\n-}\n-\n-int (*\n-avr_log_set_caller_f (const char *caller)\n-     )(FILE*, const char*, ...)\n-{\n-  avr_log_caller = caller;\n-\n-  return avr_log_fdump_f;\n-}\n-\n \n /* Worker function implementing the %-codes and forwarding to\n    respective print/dump function.  */\n \n static void\n-avr_log_vadump (FILE *file, const char *fmt, va_list ap)\n+avr_log_vadump (FILE *file, const char *caller, va_list ap)\n {\n   char bs[3] = {'\\\\', '?', '\\0'};\n \n+  /* 3rd proper argument is always the format string.  */\n+  const char *fmt = va_arg (ap, const char*);\n+\n   while (*fmt)\n     {\n       switch (*fmt++)\n@@ -256,7 +219,7 @@ avr_log_vadump (FILE *file, const char *fmt, va_list ap)\n               break;\n \n             case 'F':\n-              fputs (avr_log_caller, file);\n+              fputs (caller, file);\n               break;\n \n             case 'H':\n@@ -280,7 +243,7 @@ avr_log_vadump (FILE *file, const char *fmt, va_list ap)\n               /* FALLTHRU */\n \n             case '?':\n-              avr_log_fdump_f (file, \"%F[%f:%P]\");\n+              avr_vdump (file, caller, \"%F[%f:%P]\");\n               break;\n \n             case 'P':"}, {"sha": "40f1486e1bfae6f1d100c8531d9e670fea368ee3", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10fbfd1bd1b5fc1942457a6fd67903367cb5f876/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10fbfd1bd1b5fc1942457a6fd67903367cb5f876/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=10fbfd1bd1b5fc1942457a6fd67903367cb5f876", "patch": "@@ -155,12 +155,11 @@ extern bool avr_have_dimode;\n \n /* From avr-log.c */\n \n-#define avr_edump (avr_log_set_caller_e (__FUNCTION__))\n-#define avr_fdump (avr_log_set_caller_f (__FUNCTION__))\n-\n-extern int (*avr_log_set_caller_e (const char*))(const char*, ...);\n-extern int (*avr_log_set_caller_f (const char*))(FILE*, const char*, ...);\n+#define avr_dump(...) avr_vdump (NULL, __FUNCTION__, __VA_ARGS__)\n+#define avr_edump(...) avr_vdump (stderr, __FUNCTION__, __VA_ARGS__)\n+#define avr_fdump(FIL, ...) avr_vdump (FIL, __FUNCTION__, __VA_ARGS__)\n \n+extern int avr_vdump (FILE*, const char*, ...);\n extern void avr_log_set_avr_log (void);\n \n typedef struct"}]}