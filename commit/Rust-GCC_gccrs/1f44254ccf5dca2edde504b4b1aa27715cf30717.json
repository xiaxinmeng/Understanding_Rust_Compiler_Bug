{"sha": "1f44254ccf5dca2edde504b4b1aa27715cf30717", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY0NDI1NGNjZjVkY2EyZWRkZTUwNGI0YjFhYTI3NzE1Y2YzMDcxNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@wasabisystems.com", "date": "2004-01-24T20:54:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2004-01-24T20:54:58Z"}, "message": "re PR bootstrap/13848 (bootstrap failure - ICE in ada/utils.c)\n\n\tPR bootstrap/13848\n\t* cse.c (cse_cc_succs): Change the mode of the source expression\n\tas soon as decide we need a new mode.  Don't permit changing modes\n\tif we found a match in a successor block.\n\t(cse_condition_code_reg): Save original mode of source expression\n\tso that we know whether we have to change the mode in other\n\tinsns.\n\n\t* gcc.dg/20040124-1.c: New test.\n\nFrom-SVN: r76522", "tree": {"sha": "b55b45fc6481bcaff82c645136aa4dcc68c3903b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b55b45fc6481bcaff82c645136aa4dcc68c3903b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f44254ccf5dca2edde504b4b1aa27715cf30717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f44254ccf5dca2edde504b4b1aa27715cf30717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f44254ccf5dca2edde504b4b1aa27715cf30717", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f44254ccf5dca2edde504b4b1aa27715cf30717/comments", "author": null, "committer": null, "parents": [{"sha": "b5142d8ae86610ed587103b22c33e1f3b46e8edc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5142d8ae86610ed587103b22c33e1f3b46e8edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5142d8ae86610ed587103b22c33e1f3b46e8edc"}], "stats": {"total": 87, "additions": 73, "deletions": 14}, "files": [{"sha": "6aad8de208b85a0eb0c09bd8c187eb2ce0a38563", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f44254ccf5dca2edde504b4b1aa27715cf30717/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f44254ccf5dca2edde504b4b1aa27715cf30717/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f44254ccf5dca2edde504b4b1aa27715cf30717", "patch": "@@ -1,3 +1,13 @@\n+2004-01-24  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\tPR bootstrap/13848\n+\t* cse.c (cse_cc_succs): Change the mode of the source expression\n+\tas soon as decide we need a new mode.  Don't permit changing modes\n+\tif we found a match in a successor block.\n+\t(cse_condition_code_reg): Save original mode of source expression\n+\tso that we know whether we have to change the mode in other\n+\tinsns.\n+\n 2004-01-24  Jan Hubicka  <jh@suse.cz>\n \n \t* emit-rtl.c (change_address, adjust_address_1, offset_address,"}, {"sha": "266170ba353ed6521130541e5a6ab05c48b26270", "filename": "gcc/cse.c", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f44254ccf5dca2edde504b4b1aa27715cf30717/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f44254ccf5dca2edde504b4b1aa27715cf30717/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=1f44254ccf5dca2edde504b4b1aa27715cf30717", "patch": "@@ -7790,7 +7790,7 @@ cse_cc_succs (basic_block bb, rtx cc_reg, rtx cc_src, bool can_change_mode)\n \t\tfound = true;\n \t      else if (GET_CODE (cc_src) == COMPARE\n \t\t       && GET_CODE (SET_SRC (set)) == COMPARE\n-\t\t       && GET_MODE (cc_src) != set_mode\n+\t\t       && mode != set_mode\n \t\t       && rtx_equal_p (XEXP (cc_src, 0),\n \t\t\t\t       XEXP (SET_SRC (set), 0))\n \t\t       && rtx_equal_p (XEXP (cc_src, 1),\n@@ -7806,23 +7806,31 @@ cse_cc_succs (basic_block bb, rtx cc_reg, rtx cc_src, bool can_change_mode)\n \t      if (found)\n \t\t{\n \t\t  found_equiv = true;\n-\t\t  if (insn_count < ARRAY_SIZE(insns))\n+\t\t  if (insn_count < ARRAY_SIZE (insns))\n \t\t    {\n \t\t      insns[insn_count] = insn;\n \t\t      modes[insn_count] = set_mode;\n \t\t      last_insns[insn_count] = end;\n \t\t      ++insn_count;\n \n-\t\t      /* Sanity check.  */\n-\t\t      if (! can_change_mode && mode != comp_mode)\n-\t\t\tabort ();\n-\n-\t\t      mode = comp_mode;\n+\t\t      if (mode != comp_mode)\n+\t\t\t{\n+\t\t\t  if (! can_change_mode)\n+\t\t\t    abort ();\n+\t\t\t  mode = comp_mode;\n+\t\t\t  PUT_MODE (cc_src, mode);\n+\t\t\t}\n \t\t    }\n \t\t  else\n \t\t    {\n \t\t      if (set_mode != mode)\n-\t\t\tbreak;\n+\t\t\t{\n+\t\t\t  /* We found a matching expression in the\n+\t\t\t     wrong mode, but we don't have room to\n+\t\t\t     store it in the array.  Punt.  This case\n+\t\t\t     should be rare.  */\n+\t\t\t  break;\n+\t\t\t}\n \t\t      /* INSN sets CC_REG to a value equal to CC_SRC\n \t\t\t with the right mode.  We can simply delete\n \t\t\t it.  */\n@@ -7851,8 +7859,16 @@ cse_cc_succs (basic_block bb, rtx cc_reg, rtx cc_src, bool can_change_mode)\n \t further blocks and this block.  */\n       if (insn == end)\n \t{\n-\t  if (cse_cc_succs (e->dest, cc_reg, cc_src, false) != VOIDmode)\n-\t    found_equiv = true;\n+\t  enum machine_mode submode;\n+\n+\t  submode = cse_cc_succs (e->dest, cc_reg, cc_src, false);\n+\t  if (submode != VOIDmode)\n+\t    {\n+\t      if (submode != mode)\n+\t\tabort ();\n+\t      found_equiv = true;\n+\t      can_change_mode = false;\n+\t    }\n \t}\n     }\n \n@@ -7916,6 +7932,7 @@ cse_condition_code_reg (void)\n       rtx cc_src_insn;\n       rtx cc_src;\n       enum machine_mode mode;\n+      enum machine_mode orig_mode;\n \n       /* Look for blocks which end with a conditional jump based on a\n \t condition code register.  Then look for the instruction which\n@@ -7972,12 +7989,15 @@ cse_condition_code_reg (void)\n \t register is set, and CC_SRC is still meaningful at the end of\n \t the basic block.  */\n \n+      orig_mode = GET_MODE (cc_src);\n       mode = cse_cc_succs (bb, cc_reg, cc_src, true);\n-      if (mode != GET_MODE (cc_src) && mode != VOIDmode)\n+      if (mode != VOIDmode)\n \t{\n-\t  PUT_MODE (cc_src, mode);\n-\t  cse_change_cc_mode_insns (cc_src_insn, NEXT_INSN (last_insn),\n-\t\t\t\t    gen_rtx_REG (mode, REGNO (cc_reg)));\n+\t  if (mode != GET_MODE (cc_src))\n+\t    abort ();\n+\t  if (mode != orig_mode)\n+\t    cse_change_cc_mode_insns (cc_src_insn, NEXT_INSN (last_insn),\n+\t\t\t\t      gen_rtx_REG (mode, REGNO (cc_reg)));\n \t}\n     }\n }"}, {"sha": "dd33a2e2f2d534393f960d3eef0f07062f8e54d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f44254ccf5dca2edde504b4b1aa27715cf30717/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f44254ccf5dca2edde504b4b1aa27715cf30717/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f44254ccf5dca2edde504b4b1aa27715cf30717", "patch": "@@ -1,3 +1,7 @@\n+2004-01-24  Ian Lance Taylor  <ian@wasabisystems.com>\n+\n+\t* gcc.dg/20040124-1.c: New test.\n+\n 2004-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/20040123-1.c: New test."}, {"sha": "a508237edddc3b1c56031dd67c328c05bdaed367", "filename": "gcc/testsuite/gcc.dg/20040124-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f44254ccf5dca2edde504b4b1aa27715cf30717/gcc%2Ftestsuite%2Fgcc.dg%2F20040124-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f44254ccf5dca2edde504b4b1aa27715cf30717/gcc%2Ftestsuite%2Fgcc.dg%2F20040124-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040124-1.c?ref=1f44254ccf5dca2edde504b4b1aa27715cf30717", "patch": "@@ -0,0 +1,25 @@\n+/* This code crashed with the cse_condition_code_reg() pass on i686.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+int\n+f1 (int a, int b)\n+{\n+  int i, j, k;\n+\n+  switch (b)\n+    {\n+    case (-9):\n+      j = 4;\n+      break;\n+    case (-10):\n+      j = 10;\n+      break;\n+    case (-8):\n+      j = 15;\n+      break;\n+    }\n+\n+  i = f2 (f3 (b == (-9) ? k : a), j);\n+\n+  return 0;\n+}"}]}