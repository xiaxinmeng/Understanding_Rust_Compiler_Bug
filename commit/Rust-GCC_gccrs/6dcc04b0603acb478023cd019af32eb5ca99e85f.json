{"sha": "6dcc04b0603acb478023cd019af32eb5ca99e85f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjYzA0YjA2MDNhY2I0NzgwMjNjZDAxOWFmMzJlYjVjYTk5ZTg1Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-10-08T19:52:04Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-10-08T19:52:04Z"}, "message": "c-typeck.c (enum impl_conv): Add ic_argpass_nonproto.\n\n\t* c-typeck.c (enum impl_conv): Add ic_argpass_nonproto.\n\t(convert_for_assignment): Handle ic_argpass_nonproto.  Add\n\tcomments about its relevance to errors.\n\t(c_convert_parm_for_inlining): Use ic_argpass_nonproto.\n\ntestsuite:\n\t* gcc.dg/assign-warn-3.c: New test.\n\nFrom-SVN: r88784", "tree": {"sha": "4fa6c8af626d7dec63a89e86d8e3da6d78eff98b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fa6c8af626d7dec63a89e86d8e3da6d78eff98b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dcc04b0603acb478023cd019af32eb5ca99e85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dcc04b0603acb478023cd019af32eb5ca99e85f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dcc04b0603acb478023cd019af32eb5ca99e85f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dcc04b0603acb478023cd019af32eb5ca99e85f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba52691ca1fbf094d12590ad2fae3067a02ae36d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba52691ca1fbf094d12590ad2fae3067a02ae36d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba52691ca1fbf094d12590ad2fae3067a02ae36d"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "1b644f4b42c93342a5c3eccaa295c5b8c3b39648", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcc04b0603acb478023cd019af32eb5ca99e85f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcc04b0603acb478023cd019af32eb5ca99e85f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dcc04b0603acb478023cd019af32eb5ca99e85f", "patch": "@@ -1,3 +1,10 @@\n+2004-10-08  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-typeck.c (enum impl_conv): Add ic_argpass_nonproto.\n+\t(convert_for_assignment): Handle ic_argpass_nonproto.  Add\n+\tcomments about its relevance to errors.\n+\t(c_convert_parm_for_inlining): Use ic_argpass_nonproto.\n+\n 2004-10-08  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/16999"}, {"sha": "5fe3b9d19c77d899e1eea5edc3cd005588ee8227", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcc04b0603acb478023cd019af32eb5ca99e85f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcc04b0603acb478023cd019af32eb5ca99e85f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=6dcc04b0603acb478023cd019af32eb5ca99e85f", "patch": "@@ -59,6 +59,7 @@ enum lvalue_use {\n    diagnostic messages in convert_for_assignment.  */\n enum impl_conv {\n   ic_argpass,\n+  ic_argpass_nonproto,\n   ic_assign,\n   ic_init,\n   ic_return\n@@ -3435,7 +3436,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n   enum tree_code coder;\n   tree rname = NULL_TREE;\n \n-  if (errtype == ic_argpass)\n+  if (errtype == ic_argpass || errtype == ic_argpass_nonproto)\n     {\n       tree selector;\n       /* Change pointer to function to the function itself for\n@@ -3464,6 +3465,9 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n       case ic_argpass:\t\t\t\t\\\n \tpedwarn (AR, parmnum, rname);\t\t\\\n \tbreak;\t\t\t\t\t\\\n+      case ic_argpass_nonproto:\t\t\t\\\n+\twarning (AR, parmnum, rname);\t\t\\\n+\tbreak;\t\t\t\t\t\\\n       case ic_assign:\t\t\t\t\\\n \tpedwarn (AS);\t\t\t\t\\\n \tbreak;\t\t\t\t\t\\\n@@ -3509,6 +3513,11 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \n   if (coder == VOID_TYPE)\n     {\n+      /* Except for passing an argument to an unprototyped function,\n+\t this is a constraint violation.  When passing an argument to\n+\t an unprototyped function, it is compile-time undefined;\n+\t making it a constraint in that case was rejected in\n+\t DR#252.  */\n       error (\"void value not ignored as it ought to be\");\n       return error_mark_node;\n     }\n@@ -3554,7 +3563,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n   /* Conversion to a transparent union from its member types.\n      This applies only to function arguments.  */\n   else if (codel == UNION_TYPE && TYPE_TRANSPARENT_UNION (type)\n-\t   && errtype == ic_argpass)\n+\t   && (errtype == ic_argpass || errtype == ic_argpass_nonproto))\n     {\n       tree memb_types;\n       tree marginal_memb_type = 0;\n@@ -3760,6 +3769,8 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n     }\n   else if (codel == POINTER_TYPE && coder == ARRAY_TYPE)\n     {\n+      /* ??? This should not be an error when inlining calls to\n+\t unprototyped functions.  */\n       error (\"invalid use of non-lvalue array\");\n       return error_mark_node;\n     }\n@@ -3803,6 +3814,9 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n   switch (errtype)\n     {\n     case ic_argpass:\n+    case ic_argpass_nonproto:\n+      /* ??? This should not be an error when inlining calls to\n+\t unprototyped functions.  */\n       error (\"incompatible type for argument %d of %qE\", parmnum, rname);\n       break;\n     case ic_assign:\n@@ -3837,7 +3851,7 @@ c_convert_parm_for_inlining (tree parm, tree value, tree fn, int argnum)\n \n   type = TREE_TYPE (parm);\n   ret = convert_for_assignment (type, value,\n-\t\t\t\tic_argpass, fn,\n+\t\t\t\tic_argpass_nonproto, fn,\n \t\t\t\tfn, argnum);\n   if (targetm.calls.promote_prototypes (TREE_TYPE (fn))\n       && INTEGRAL_TYPE_P (type)"}, {"sha": "82f1f09d14c07c256bcf27f78f25d0dad09ae326", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcc04b0603acb478023cd019af32eb5ca99e85f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcc04b0603acb478023cd019af32eb5ca99e85f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6dcc04b0603acb478023cd019af32eb5ca99e85f", "patch": "@@ -1,3 +1,7 @@\n+2004-10-08  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/assign-warn-3.c: New test.\n+\n 2004-10-08  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c/16999"}, {"sha": "1463fce0f68d31ac0a2eaf0afe39644eb66d159c", "filename": "gcc/testsuite/gcc.dg/assign-warn-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcc04b0603acb478023cd019af32eb5ca99e85f/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcc04b0603acb478023cd019af32eb5ca99e85f/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fassign-warn-3.c?ref=6dcc04b0603acb478023cd019af32eb5ca99e85f", "patch": "@@ -0,0 +1,13 @@\n+/* Test diagnostics for bad type conversion when inlining unprototyped\n+   functions: should not be errors with -pedantic-errors.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -std=c99 -pedantic-errors\" } */\n+\n+/* This is valid to execute, so maybe shouldn't warn at all.  */\n+void f0(x) signed char *x; { }\n+void g0(unsigned char *x) { f0(x); } /* { dg-warning \"warning: pointer targets in passing argument 1 of 'f0' differ in signedness\" } */\n+\n+/* This is undefined on execution but still must compile.  */\n+void f1(x) int *x; { }\n+void g1(unsigned int *x) { f1(x); } /* { dg-warning \"warning: pointer targets in passing argument 1 of 'f1' differ in signedness\" } */"}]}