{"sha": "60d25b800adf1c70231eceeca1cd3a70d009c5a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBkMjViODAwYWRmMWM3MDIzMWVjZWVjYTFjZDNhNzBkMDA5YzVhOQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-05T19:26:29Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-05T19:26:29Z"}, "message": "compiler: rollback \"avoid negative zero in float constants\"\n    \n    It uses functions that are not available in MPFR 2.4.2, which is the\n    current version supported by GCC.\n    \n    Original change description:\n    \n        compiler: avoid negative zero in float constants\n    \n        Check for negative numbers with very small magnitudes that will round\n        to negative zero, and force them to positive zero instead.\n    \n        This implements the spec clarification in https://golang.org/cl/14727.\n        The test is in https://golang.org/cl/91895.\n    \n        Fixes golang/go#12621\n    \n    Updates golang/go#12621\n    \n    Reviewed-on: https://go-review.googlesource.com/92055\n\nFrom-SVN: r257393", "tree": {"sha": "493f43b146bde311fbec921e562439cac4c81958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/493f43b146bde311fbec921e562439cac4c81958"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60d25b800adf1c70231eceeca1cd3a70d009c5a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d25b800adf1c70231eceeca1cd3a70d009c5a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d25b800adf1c70231eceeca1cd3a70d009c5a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d25b800adf1c70231eceeca1cd3a70d009c5a9/comments", "author": null, "committer": null, "parents": [{"sha": "354bbdb6bac8630e8f3e14d85ce9451eca8cf2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354bbdb6bac8630e8f3e14d85ce9451eca8cf2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354bbdb6bac8630e8f3e14d85ce9451eca8cf2a8"}], "stats": {"total": 57, "additions": 3, "deletions": 54}, "files": [{"sha": "ba8a8e0b48beef8917313fc13626c38e08ffc826", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d25b800adf1c70231eceeca1cd3a70d009c5a9/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d25b800adf1c70231eceeca1cd3a70d009c5a9/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=60d25b800adf1c70231eceeca1cd3a70d009c5a9", "patch": "@@ -1,4 +1,4 @@\n-7eebd495df915ab87926b8dd88f554674cfdacea\n+c02c71187c9794b50444e2858c582e66a3442ee8\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "8555c052980812559fc21c62eb36150ce555f6a0", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 2, "deletions": 50, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d25b800adf1c70231eceeca1cd3a70d009c5a9/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d25b800adf1c70231eceeca1cd3a70d009c5a9/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=60d25b800adf1c70231eceeca1cd3a70d009c5a9", "patch": "@@ -16158,16 +16158,10 @@ Numeric_constant::set_float(Type* type, const mpfr_t val)\n   this->clear();\n   this->classification_ = NC_FLOAT;\n   this->type_ = type;\n-\n   // Numeric constants do not have negative zero values, so remove\n   // them here.  They also don't have infinity or NaN values, but we\n   // should never see them here.\n-  int bits = 0;\n-  if (type != NULL\n-      && type->float_type() != NULL\n-      && !type->float_type()->is_abstract())\n-    bits = type->float_type()->bits();\n-  if (Numeric_constant::is_float_zero(val, bits))\n+  if (mpfr_zero_p(val))\n     mpfr_init_set_ui(this->u_.float_val, 0, GMP_RNDN);\n   else\n     mpfr_init_set(this->u_.float_val, val, GMP_RNDN);\n@@ -16181,50 +16175,8 @@ Numeric_constant::set_complex(Type* type, const mpc_t val)\n   this->clear();\n   this->classification_ = NC_COMPLEX;\n   this->type_ = type;\n-\n-  // Avoid negative zero as in set_float.\n-  int bits = 0;\n-  if (type != NULL\n-      && type->complex_type() != NULL\n-      && !type->complex_type()->is_abstract())\n-    bits = type->complex_type()->bits() / 2;\n-\n-  mpfr_t real;\n-  mpfr_init_set(real, mpc_realref(val), GMP_RNDN);\n-  if (Numeric_constant::is_float_zero(real, bits))\n-    mpfr_set_ui(real, 0, GMP_RNDN);\n-\n-  mpfr_t imag;\n-  mpfr_init_set(imag, mpc_imagref(val), GMP_RNDN);\n-  if (Numeric_constant::is_float_zero(imag, bits))\n-    mpfr_set_ui(imag, 0, GMP_RNDN);\n-\n   mpc_init2(this->u_.complex_val, mpc_precision);\n-  mpc_set_fr_fr(this->u_.complex_val, real, imag, MPC_RNDNN);\n-\n-  mpfr_clear(real);\n-  mpfr_clear(imag);\n-}\n-\n-// Return whether VAL, at a precision of BITS, is zero.  BITS may be\n-// zero in which case it is ignored.\n-\n-bool\n-Numeric_constant::is_float_zero(const mpfr_t val, int bits)\n-{\n-  if (mpfr_zero_p(val))\n-    return true;\n-  switch (bits)\n-    {\n-    case 0:\n-      return false;\n-    case 32:\n-      return mpfr_get_flt(val, GMP_RNDN) == 0;\n-    case 64:\n-      return mpfr_get_d(val, GMP_RNDN) == 0;\n-    default:\n-      go_unreachable();\n-    }\n+  mpc_set(this->u_.complex_val, val, MPC_RNDNN);\n }\n \n // Get an int value."}, {"sha": "d16a284b6b04c766430f7b0c6ee3c4ad11b0480c", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60d25b800adf1c70231eceeca1cd3a70d009c5a9/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60d25b800adf1c70231eceeca1cd3a70d009c5a9/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=60d25b800adf1c70231eceeca1cd3a70d009c5a9", "patch": "@@ -4220,9 +4220,6 @@ class Numeric_constant\n   bool\n   check_complex_type(Complex_type*, bool, Location);\n \n-  static bool\n-  is_float_zero(const mpfr_t, int bits);\n-\n   // The kinds of constants.\n   enum Classification\n   {"}]}