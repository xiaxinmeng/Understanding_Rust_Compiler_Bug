{"sha": "10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBlNjhmZTQ0ZjlmMWZhMjVmNGZkM2FmYzVkNzVjNGQ3NTAzZDM2NA==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-06-25T16:04:14Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-06-25T16:04:14Z"}, "message": "p9-extract-1.c: Make second argument of vec_extract a signed int.\n\ngcc/testsuite/ChangeLog:\n\n2018-06-25  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/p9-extract-1.c: Make second argument of\n \tvec_extract a signed int. Add vec_extract tests for bool char\n\tand bool int.\n\t* gcc.target/powerpc/p9-extract-4.c:  New test file for long long\n\tvec_extract tests.\n\nFrom-SVN: r262023", "tree": {"sha": "c457fcbd15a6ec40c611fddcf270d7485cb040ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c457fcbd15a6ec40c611fddcf270d7485cb040ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad111b8eb9a011d1c9c7abd92a4282d00fa1ea4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad111b8eb9a011d1c9c7abd92a4282d00fa1ea4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad111b8eb9a011d1c9c7abd92a4282d00fa1ea4f"}], "stats": {"total": 92, "additions": 80, "deletions": 12}, "files": [{"sha": "9d3d16e0b038b81981606bc22b6d7b4638336b36", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364", "patch": "@@ -1,3 +1,13 @@\n+gcc/testsuite/ChangeLog:\n+\n+2018-06-25  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/p9-extract-1.c: Make second argument of\n+ \tvec_extract a signed int. Add vec_extract tests for bool char\n+\tand bool int.\n+\t* gcc.target/powerpc/p9-extract-4.c:  New test file for long long\n+\tvec_extract tests.\n+\n 2018-06-25  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/gcc-gdb-test.exp (report_gdb): Handle gdb -v failure."}, {"sha": "ab9e766385d15ff6acb4fadcb296d0b3812e1ab9", "filename": "gcc/testsuite/gcc.target/powerpc/p9-extract-1.c", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-1.c?ref=10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364", "patch": "@@ -13,84 +13,112 @@\n int\n extract_int_0 (vector int a)\n {\n-  int b = vec_extract (a, 0);\n+  int c = 0;\n+  int b = vec_extract (a, c);\n   return b;\n }\n \n int\n extract_int_3 (vector int a)\n {\n-  int b = vec_extract (a, 3);\n+  int c = 3;\n+  int b = vec_extract (a, c);\n   return b;\n }\n \n unsigned int\n extract_uint_0 (vector unsigned int a)\n {\n-  unsigned int b = vec_extract (a, 0);\n+  int c = 0;\n+  unsigned int b = vec_extract (a, c);\n   return b;\n }\n \n unsigned int\n extract_uint_3 (vector unsigned int a)\n {\n-  unsigned int b = vec_extract (a, 3);\n+  int c = 3;\n+  unsigned int b = vec_extract (a, c);\n   return b;\n }\n \n short\n extract_short_0 (vector short a)\n {\n-  short b = vec_extract (a, 0);\n+  int c = 0;\n+  short b = vec_extract (a, c);\n   return b;\n }\n \n short\n extract_short_7 (vector short a)\n {\n-  short b = vec_extract (a, 7);\n+  int c = 7;\n+  short b = vec_extract (a, c);\n   return b;\n }\n \n unsigned short\n extract_ushort_0 (vector unsigned short a)\n {\n-  unsigned short b = vec_extract (a, 0);\n+  int c = 0;\n+  unsigned short b = vec_extract (a, c);\n   return b;\n }\n \n unsigned short\n extract_ushort_7 (vector unsigned short a)\n {\n-  unsigned short b = vec_extract (a, 7);\n+  int c = 7;\n+  unsigned short b = vec_extract (a, c);\n   return b;\n }\n \n signed char\n extract_schar_0 (vector signed char a)\n {\n-  signed char b = vec_extract (a, 0);\n+  int c = 0;\n+  signed char b = vec_extract (a, c);\n   return b;\n }\n \n signed char\n extract_schar_15 (vector signed char a)\n {\n-  signed char b = vec_extract (a, 15);\n+  int c = 15;\n+  signed char b = vec_extract (a, c);\n   return b;\n }\n \n unsigned char\n extract_uchar_0 (vector unsigned char a)\n {\n-  unsigned char b = vec_extract (a, 0);\n+  int c = 0;\n+  unsigned char b = vec_extract (a, c);\n   return b;\n }\n \n unsigned char\n extract_uchar_15 (vector unsigned char a)\n {\n-  signed char b = vec_extract (a, 15);\n+  int c = 15;\n+  signed char b = vec_extract (a, c);\n+  return b;\n+}\n+\n+unsigned char\n+extract_bool_char_0 (vector bool char a)\n+{\n+  int c = 0;\n+  unsigned char b = vec_extract (a, c);\n+  return b;\n+}\n+\n+unsigned int\n+extract_bool_int_0 (vector bool int a)\n+{\n+  int c = 0;\n+  unsigned int b = vec_extract (a, c);\n   return b;\n }\n "}, {"sha": "1f38982fbe7d9ff0dd9cf04aa0345cffd20502ad", "filename": "gcc/testsuite/gcc.target/powerpc/p9-extract-4.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-extract-4.c?ref=10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n+\n+/* This file tests the extraction of 64-bit values.  On Power 9, the direct\n+   move is prefered for the  64-bit extract as it is either lower latency or\n+   the same latency as the extract instruction depending on the Endianess of\n+   the system.  Furthermore, there can be up to four move instructions in\n+   flight at a time versus only two extract intructions at a time.  */\n+\n+#include <altivec.h>\n+\n+unsigned long long\n+extract_bool_long_long_0 (vector bool long long a)\n+{\n+  int c = 0;\n+  unsigned long long b = vec_extract (a, c);\n+  return b;\n+}\n+\n+unsigned long long int\n+extract_long_long_0 (vector unsigned long long int a)\n+{\n+  int c = 0;\n+  unsigned long long int b = vec_extract (a, c);\n+  return b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"m\\[ft\\]vsr\" 2 } } */"}]}