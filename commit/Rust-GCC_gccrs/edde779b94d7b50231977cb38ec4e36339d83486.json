{"sha": "edde779b94d7b50231977cb38ec4e36339d83486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRkZTc3OWI5NGQ3YjUwMjMxOTc3Y2IzOGVjNGUzNjMzOWQ4MzQ4Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-26T15:52:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-26T15:52:16Z"}, "message": "* sem_attr.adb: Add some ??? comments for previous change\n\nFrom-SVN: r135949", "tree": {"sha": "446442664490b2ac4a275eaa87713b54d0ea4d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/446442664490b2ac4a275eaa87713b54d0ea4d1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edde779b94d7b50231977cb38ec4e36339d83486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edde779b94d7b50231977cb38ec4e36339d83486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edde779b94d7b50231977cb38ec4e36339d83486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edde779b94d7b50231977cb38ec4e36339d83486/comments", "author": null, "committer": null, "parents": [{"sha": "45c87b72c753378a06738e9e8ab9f7aeaf56e9e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c87b72c753378a06738e9e8ab9f7aeaf56e9e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c87b72c753378a06738e9e8ab9f7aeaf56e9e6"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "768cdf63ee4522b1ba722d65a90b274d5b64be7b", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edde779b94d7b50231977cb38ec4e36339d83486/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edde779b94d7b50231977cb38ec4e36339d83486/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=edde779b94d7b50231977cb38ec4e36339d83486", "patch": "@@ -8089,8 +8089,26 @@ package body Sem_Attr is\n                --  Arr (X .. Y)'address is identical to Arr (X)'address,\n                --  even if the array is packed and the slice itself is not\n                --  addressable. Transform the prefix into an indexed component.\n+\n                --  Note that the transformation is safe only if we know that\n-               --  the slice is non-null.\n+               --  the slice is non-null. That is because a null slice can have\n+               --  an out of bounds index value.\n+\n+               --  Right now, gigi blows up if given 'Address on a slice, and\n+               --  this covers up that bug in one case, but the bug is likely\n+               --  still there in the cases not transformed by this code ???\n+\n+               --  It's not clear what 'Address *should* return for a null\n+               --  slice with out of bounds indexes, this might be worth an ARG\n+               --  discussion ???\n+\n+               --  One approach would be to do a length check unconditionally,\n+               --  and then do the transformation below unconditionally, but\n+               --  analyze with checks off, avoiding the problem of the out of\n+               --  bounds index. This approach would interpret the address of\n+               --  an out of bounds null slice as being the address where the\n+               --  array element would be if there was one, which is probably\n+               --  as reasonable an interpretation as any ???\n \n                declare\n                   Loc : constant Source_Ptr := Sloc (P);"}]}