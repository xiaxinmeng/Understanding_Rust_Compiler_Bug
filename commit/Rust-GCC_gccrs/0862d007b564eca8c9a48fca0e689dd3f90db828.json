{"sha": "0862d007b564eca8c9a48fca0e689dd3f90db828", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg2MmQwMDdiNTY0ZWNhOGM5YTQ4ZmNhMGU2ODlkZDNmOTBkYjgyOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-19T19:16:26Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-19T19:16:26Z"}, "message": "Fix two bugs in operand_equal_p\n\n\t* fold-const.c (operand_compare::operand_equal_p): Fix thinko in\n\tCOMPONENT_REF handling and guard types_same_for_odr by\n\tvirtual_method_call_p.\n\t(operand_compare::hash_operand): Likewise.", "tree": {"sha": "7637185cc5d739eb5085b3ab891bb250c7b68e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7637185cc5d739eb5085b3ab891bb250c7b68e1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0862d007b564eca8c9a48fca0e689dd3f90db828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0862d007b564eca8c9a48fca0e689dd3f90db828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0862d007b564eca8c9a48fca0e689dd3f90db828", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0862d007b564eca8c9a48fca0e689dd3f90db828/comments", "author": null, "committer": null, "parents": [{"sha": "8156cfaa4c45f1249bbdda29d04b4fef84b7eafe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8156cfaa4c45f1249bbdda29d04b4fef84b7eafe"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "c2cf1a94f945c9525e5b20584916d1c0abd4c146", "filename": "gcc/fold-const.c", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0862d007b564eca8c9a48fca0e689dd3f90db828/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0862d007b564eca8c9a48fca0e689dd3f90db828/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0862d007b564eca8c9a48fca0e689dd3f90db828", "patch": "@@ -3314,30 +3314,34 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n \t     may be NULL when we're called to compare MEM_EXPRs.  */\n \t  if (!OP_SAME_WITH_NULL (0))\n \t    return false;\n-\t  /* Most of time we only need to compare FIELD_DECLs for equality.\n-\t     However when determining address look into actual offsets.\n-\t     These may match for unions and unshared record types.  */\n-\t  flags &= ~OEP_ADDRESS_OF;\n-\t  if (!OP_SAME (1))\n-\t    {\n-\t      if (flags & OEP_ADDRESS_OF)\n-\t\t{\n-\t\t  if (TREE_OPERAND (arg0, 2)\n-\t\t      || TREE_OPERAND (arg1, 2))\n-\t\t    return OP_SAME_WITH_NULL (2);\n-\t\t  tree field0 = TREE_OPERAND (arg0, 1);\n-\t\t  tree field1 = TREE_OPERAND (arg1, 1);\n-\n-\t\t  if (!operand_equal_p (DECL_FIELD_OFFSET (field0),\n-\t\t\t\t\tDECL_FIELD_OFFSET (field1), flags)\n-\t\t      || !operand_equal_p (DECL_FIELD_BIT_OFFSET (field0),\n-\t\t\t\t\t   DECL_FIELD_BIT_OFFSET (field1),\n-\t\t\t\t\t   flags))\n-\t\t    return false;\n-\t\t}\n-\t      else\n-\t\treturn false;\n-\t    }\n+\t  {\n+\t    bool compare_address = flags & OEP_ADDRESS_OF;\n+\n+\t    /* Most of time we only need to compare FIELD_DECLs for equality.\n+\t       However when determining address look into actual offsets.\n+\t       These may match for unions and unshared record types.  */\n+\t    flags &= ~OEP_ADDRESS_OF;\n+\t    if (!OP_SAME (1))\n+\t      {\n+\t\tif (compare_address)\n+\t\t  {\n+\t\t    if (TREE_OPERAND (arg0, 2)\n+\t\t\t|| TREE_OPERAND (arg1, 2))\n+\t\t      return OP_SAME_WITH_NULL (2);\n+\t\t    tree field0 = TREE_OPERAND (arg0, 1);\n+\t\t    tree field1 = TREE_OPERAND (arg1, 1);\n+\n+\t\t    if (!operand_equal_p (DECL_FIELD_OFFSET (field0),\n+\t\t\t\t\t  DECL_FIELD_OFFSET (field1), flags)\n+\t\t\t|| !operand_equal_p (DECL_FIELD_BIT_OFFSET (field0),\n+\t\t\t\t\t     DECL_FIELD_BIT_OFFSET (field1),\n+\t\t\t\t\t     flags))\n+\t\t      return false;\n+\t\t  }\n+\t\telse\n+\t\t  return false;\n+\t      }\n+\t  }\n \t  return OP_SAME_WITH_NULL (2);\n \n \tcase BIT_FIELD_REF:\n@@ -3436,10 +3440,14 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n \tif (!operand_equal_p (OBJ_TYPE_REF_OBJECT (arg0),\n \t\t\t      OBJ_TYPE_REF_OBJECT (arg1), flags))\n \t  return false;\n-\tif (!types_same_for_odr (obj_type_ref_class (arg0),\n-\t\t\t\t obj_type_ref_class (arg1)))\n-\t  return false;\n-\treturn true;\n+\tif (virtual_method_call_p (arg0))\n+\t  {\n+\t    if (!virtual_method_call_p (arg1))\n+\t      return false;\n+\t    return types_same_for_odr (obj_type_ref_class (arg0),\n+\t\t\t\t       obj_type_ref_class (arg1));\n+\t  }\n+\treturn false;\n \n \tdefault:\n \t  return false;\n@@ -3866,6 +3874,8 @@ operand_compare::hash_operand (const_tree t, inchash::hash &hstate,\n \t      flags &= ~OEP_ADDRESS_OF;\n \t      inchash::add_expr (OBJ_TYPE_REF_TOKEN (t), hstate, flags);\n \t      inchash::add_expr (OBJ_TYPE_REF_OBJECT (t), hstate, flags);\n+\t      if (!virtual_method_call_p (t))\n+\t\treturn;\n \t      if (tree c = obj_type_ref_class (t))\n \t\t{\n \t\t  c = TYPE_NAME (TYPE_MAIN_VARIANT (c));"}]}