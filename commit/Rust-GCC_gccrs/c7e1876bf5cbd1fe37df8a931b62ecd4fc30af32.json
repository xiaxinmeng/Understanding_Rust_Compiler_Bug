{"sha": "c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdlMTg3NmJmNWNiZDFmZTM3ZGY4YTkzMWI2MmVjZDRmYzMwYWYzMg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-04-10T18:47:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-04-10T18:47:50Z"}, "message": "c-typeck.c (common_type): Prefer long long to long when same precision.\n\n\t* c-typeck.c (common_type): Prefer long long to long when same\n\tprecision.\n\ntestsuite:\n\t* gcc.dg/c90-intprom-1.c, gcc.dg/c99-intprom-1.c: New tests.\n\nFrom-SVN: r80584", "tree": {"sha": "6f8e21d2f412b2d4afb115b8fe7936b61fed2f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f8e21d2f412b2d4afb115b8fe7936b61fed2f7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11554edce69ef25aedffcef55e5a6c6c0516624a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11554edce69ef25aedffcef55e5a6c6c0516624a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11554edce69ef25aedffcef55e5a6c6c0516624a"}], "stats": {"total": 152, "additions": 151, "deletions": 1}, "files": [{"sha": "dd10d4e7d9328fe4d1c3209555c9b82e1e4320c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32", "patch": "@@ -1,3 +1,8 @@\n+2004-04-10  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-typeck.c (common_type): Prefer long long to long when same\n+\tprecision.\n+\n 2004-04-09  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 14887"}, {"sha": "2170222d7695bbdaeeb817f5e55f0b3658ad3d85", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32", "patch": "@@ -274,7 +274,24 @@ common_type (tree t1, tree t2)\n       else if (TYPE_PRECISION (t2) > TYPE_PRECISION (t1))\n \treturn build_type_attribute_variant (t2, attributes);\n \n-      /* Same precision.  Prefer longs to ints even when same size.  */\n+      /* Same precision.  Prefer long longs to longs to ints when the\n+\t same precision, following the C99 rules on integer type rank\n+\t (which are equivalent to the C90 rules for C90 types).  */\n+\n+      if (TYPE_MAIN_VARIANT (t1) == long_long_unsigned_type_node\n+\t  || TYPE_MAIN_VARIANT (t2) == long_long_unsigned_type_node)\n+\treturn build_type_attribute_variant (long_long_unsigned_type_node,\n+\t\t\t\t\t     attributes);\n+\n+      if (TYPE_MAIN_VARIANT (t1) == long_long_integer_type_node\n+\t  || TYPE_MAIN_VARIANT (t2) == long_long_integer_type_node)\n+\t{\n+\t  if (TYPE_UNSIGNED (t1) || TYPE_UNSIGNED (t2))\n+\t     t1 = long_long_unsigned_type_node;\n+\t  else\n+\t     t1 = long_long_integer_type_node;\n+\t  return build_type_attribute_variant (t1, attributes);\n+\t}\n \n       if (TYPE_MAIN_VARIANT (t1) == long_unsigned_type_node\n \t  || TYPE_MAIN_VARIANT (t2) == long_unsigned_type_node)"}, {"sha": "040aac8a716d28c391d5d162413b7671dbf474b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32", "patch": "@@ -1,3 +1,7 @@\n+2004-04-10  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/c90-intprom-1.c, gcc.dg/c99-intprom-1.c: New tests.\n+\n 2004-04-09  Chris Demetriou  <cgd@broadcom.com>\n \n \t* g++.dg/other/packed1.C: Mark xfail for mips*- not mips-."}, {"sha": "78e4b39ef356dac8ad7f432b3b0a87195cc3f5e8", "filename": "gcc/testsuite/gcc.dg/c90-intprom-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-intprom-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-intprom-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-intprom-1.c?ref=c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32", "patch": "@@ -0,0 +1,47 @@\n+/* Test for integer promotion rules: C90 subset of types.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+#include <limits.h>\n+\n+#define CHECK(T1, T2, TC)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    T1 a = 0;\t\t\t\t\t\\\n+    T2 b = 0;\t\t\t\t\t\\\n+    TC *c = 0;\t\t\t\t\t\\\n+    __typeof__(a+b) *d = 0;\t\t\t\\\n+    c = d;\t\t\t\t\t\\\n+    d = c;\t\t\t\t\t\\\n+  } while (0)\n+\n+void\n+f (void)\n+{\n+  /* One type is unsigned long.  */\n+  CHECK(unsigned long, unsigned long, unsigned long);\n+  CHECK(unsigned int, unsigned long, unsigned long);\n+  CHECK(unsigned long, unsigned int, unsigned long);\n+  CHECK(int, unsigned long, unsigned long);\n+  CHECK(long, unsigned long, unsigned long);\n+  CHECK(unsigned long, int, unsigned long);\n+  CHECK(unsigned long, long, unsigned long);\n+  /* long and unsigned int.  */\n+#if LONG_MAX >= UINT_MAX\n+  CHECK(unsigned int, long, long);\n+  CHECK(long, unsigned int, long);\n+#else\n+  CHECK(unsigned int, long, unsigned long);\n+  CHECK(long, unsigned int, unsigned long);\n+#endif\n+  /* One type is long.  */\n+  CHECK(long, long, long);\n+  CHECK(int, long, long);\n+  CHECK(long, int, long);\n+  /* One type is unsigned int.  */\n+  CHECK(unsigned int, unsigned int, unsigned int);\n+  CHECK(int, unsigned int, unsigned int);\n+  CHECK(unsigned int, int, unsigned int);\n+  /* Otherwise int.  */\n+  CHECK(int, int, int);\n+}"}, {"sha": "0d7a33ee8be215169b2c1ba1d5d341b2afd8db59", "filename": "gcc/testsuite/gcc.dg/c99-intprom-1.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-intprom-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-intprom-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-intprom-1.c?ref=c7e1876bf5cbd1fe37df8a931b62ecd4fc30af32", "patch": "@@ -0,0 +1,77 @@\n+/* Test for integer promotion rules: extended to long long by C99.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+#include <limits.h>\n+\n+#define CHECK(T1, T2, TC)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    T1 a = 0;\t\t\t\t\t\\\n+    T2 b = 0;\t\t\t\t\t\\\n+    TC *c = 0;\t\t\t\t\t\\\n+    __typeof__(a+b) *d = 0;\t\t\t\\\n+    c = d;\t\t\t\t\t\\\n+    d = c;\t\t\t\t\t\\\n+  } while (0)\n+\n+void\n+f (void)\n+{\n+  /* Same type.  */\n+  CHECK(int, int, int);\n+  CHECK(unsigned int, unsigned int, unsigned int);\n+  CHECK(long, long, long);\n+  CHECK(unsigned long, unsigned long, unsigned long);\n+  CHECK(long long, long long, long long);\n+  CHECK(unsigned long long, unsigned long long, unsigned long long);\n+  /* Both signed.  */\n+  CHECK(int, long, long);\n+  CHECK(int, long long, long long);\n+  CHECK(long, int, long);\n+  CHECK(long, long long, long long);\n+  CHECK(long long, int, long long);\n+  CHECK(long long, long, long long);\n+  /* Both unsigned.  */\n+  CHECK(unsigned int, unsigned long, unsigned long);\n+  CHECK(unsigned int, unsigned long long, unsigned long long);\n+  CHECK(unsigned long, unsigned int, unsigned long);\n+  CHECK(unsigned long, unsigned long long, unsigned long long);\n+  CHECK(unsigned long long, unsigned int, unsigned long long);\n+  CHECK(unsigned long long, unsigned long, unsigned long long);\n+  /* Unsigned of greater or equal rank.  */\n+  CHECK(int, unsigned int, unsigned int);\n+  CHECK(int, unsigned long, unsigned long);\n+  CHECK(int, unsigned long long, unsigned long long);\n+  CHECK(unsigned int, int, unsigned int);\n+  CHECK(long, unsigned long, unsigned long);\n+  CHECK(long, unsigned long long, unsigned long long);\n+  CHECK(unsigned long, int, unsigned long);\n+  CHECK(unsigned long, long, unsigned long);\n+  CHECK(long long, unsigned long long, unsigned long long);\n+  CHECK(unsigned long long, int, unsigned long long);\n+  CHECK(unsigned long long, long, unsigned long long);\n+  CHECK(unsigned long long, long long, unsigned long long);\n+  /* Signed of greater rank.  */\n+#if LONG_MAX >= UINT_MAX\n+  CHECK(unsigned int, long, long);\n+  CHECK(long, unsigned int, long);\n+#else\n+  CHECK(unsigned int, long, unsigned long);\n+  CHECK(long, unsigned int, unsigned long);\n+#endif\n+#if LLONG_MAX >= UINT_MAX\n+  CHECK(unsigned int, long long, long long);\n+  CHECK(long long, unsigned int, long long);\n+#else\n+  CHECK(unsigned int, long long, unsigned long long);\n+  CHECK(long long, unsigned int, unsigned long long);\n+#endif\n+#if LLONG_MAX >= ULONG_MAX\n+  CHECK(unsigned long, long long, long long);\n+  CHECK(long long, unsigned long, long long);\n+#else\n+  CHECK(unsigned long, long long, unsigned long long);\n+  CHECK(long long, unsigned long, unsigned long long);\n+#endif\n+}"}]}