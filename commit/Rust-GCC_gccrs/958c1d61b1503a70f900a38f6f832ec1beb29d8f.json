{"sha": "958c1d61b1503a70f900a38f6f832ec1beb29d8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU4YzFkNjFiMTUwM2E3MGY5MDBhMzhmNmY4MzJlYzFiZWIyOWQ4Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-07-09T20:00:25Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-07-09T20:00:25Z"}, "message": "* ipa-devirt.c (record_node): Walk through aliases.\n\nFrom-SVN: r212406", "tree": {"sha": "6b183a6e93d590c32cc0c954fc00ea323c4133a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b183a6e93d590c32cc0c954fc00ea323c4133a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/958c1d61b1503a70f900a38f6f832ec1beb29d8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958c1d61b1503a70f900a38f6f832ec1beb29d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/958c1d61b1503a70f900a38f6f832ec1beb29d8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958c1d61b1503a70f900a38f6f832ec1beb29d8f/comments", "author": null, "committer": null, "parents": [{"sha": "da22f50517faeb3fc185521631e3b86b89bd60ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da22f50517faeb3fc185521631e3b86b89bd60ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da22f50517faeb3fc185521631e3b86b89bd60ec"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "3437a7c34d80e92950c537557377f70b77327e3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958c1d61b1503a70f900a38f6f832ec1beb29d8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958c1d61b1503a70f900a38f6f832ec1beb29d8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=958c1d61b1503a70f900a38f6f832ec1beb29d8f", "patch": "@@ -1,3 +1,7 @@\n+2014-07-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-devirt.c (record_node): Walk through aliases.\n+\n 2014-07-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-streamer-out.c (hash_scc): Avoid quadratic hashing loop."}, {"sha": "e7add12bc5b9b72ecdbd66d49eafa2ef9fb1ab6f", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/958c1d61b1503a70f900a38f6f832ec1beb29d8f/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/958c1d61b1503a70f900a38f6f832ec1beb29d8f/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=958c1d61b1503a70f900a38f6f832ec1beb29d8f", "patch": "@@ -860,7 +860,8 @@ maybe_record_node (vec <cgraph_node *> &nodes,\n \t\t   bool can_refer,\n \t\t   bool *completep)\n {\n-  struct cgraph_node *target_node;\n+  struct cgraph_node *target_node, *alias_target;\n+  enum availability avail;\n \n   /* cxa_pure_virtual and __builtin_unreachable do not need to be added into\n      list of targets; the runtime effect of calling them is undefined.\n@@ -884,6 +885,17 @@ maybe_record_node (vec <cgraph_node *> &nodes,\n \n   target_node = cgraph_get_node (target);\n \n+  /* Preffer alias target over aliases, so we do not get confused by\n+     fake duplicates.  */\n+  if (target_node)\n+    {\n+      alias_target = cgraph_function_or_thunk_node (target_node, &avail);\n+      if (target_node != alias_target\n+\t  && avail >= AVAIL_AVAILABLE\n+\t  && cgraph_function_body_availability (target_node))\n+\ttarget_node = alias_target;\n+    }\n+\n   /* Method can only be called by polymorphic call if any\n      of vtables refering to it are alive. \n \n@@ -910,7 +922,7 @@ maybe_record_node (vec <cgraph_node *> &nodes,\n     {\n       gcc_assert (!target_node->global.inlined_to);\n       gcc_assert (symtab_real_symbol_p (target_node));\n-      if (!pointer_set_insert (inserted, target))\n+      if (!pointer_set_insert (inserted, target_node->decl))\n \t{\n \t  pointer_set_insert (cached_polymorphic_call_targets,\n \t\t\t      target_node);"}]}