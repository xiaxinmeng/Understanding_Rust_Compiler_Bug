{"sha": "bf42e45b205e05a710de0e9fe0fc33e668fdb891", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0MmU0NWIyMDVlMDVhNzEwZGUwZTlmZTBmYzMzZTY2OGZkYjg5MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-08-01T14:04:02Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-08-01T14:04:02Z"}, "message": "Makefile.in: Refine dependencies.\n\n\t* Makefile.in: Refine dependencies.\n\t* c-opts.c (c_common_handle_option): Do nothing for -Wimport.\n\t* c.opt: Update help for -Wimport.\n\t* cppfiles.c: Include hashtab.h.  Update comments.\n\t(stack_file): Read the file before updating dependencies.\n\t(once_only_file_p): Be smarter about marking once-only files.\n\t(_cpp_mark_file_once_only): Correct the check for existence on\n\tthe list.\n\t(open_file_failed): Use name not path, which is NULL.\n\t* cpphash.h: Don't include hashtab.h.\n\t(struct _cpp_file): Remove.\n\t(struct cpp_reader): Update.\n\t* cppinit.c (cpp_create_reader): Don't initialize warn_import.\n\t* cpplib.h (struct cpp_options): Remove warn_import.\n\t(cpp_simplify_path): Remove.\n\nFrom-SVN: r70045", "tree": {"sha": "186dff8557e01e179836315ff7e9868a89ea1f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/186dff8557e01e179836315ff7e9868a89ea1f7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf42e45b205e05a710de0e9fe0fc33e668fdb891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf42e45b205e05a710de0e9fe0fc33e668fdb891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf42e45b205e05a710de0e9fe0fc33e668fdb891", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf42e45b205e05a710de0e9fe0fc33e668fdb891/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5bcc58230c173c6923908cd7622dca7240f18de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5bcc58230c173c6923908cd7622dca7240f18de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5bcc58230c173c6923908cd7622dca7240f18de"}], "stats": {"total": 102, "additions": 59, "deletions": 43}, "files": [{"sha": "625eb041342e1acae4ae27ecfbde8d4071a2ede4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf42e45b205e05a710de0e9fe0fc33e668fdb891", "patch": "@@ -1,3 +1,21 @@\n+2003-08-01  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* Makefile.in: Refine dependencies.\n+\t* c-opts.c (c_common_handle_option): Do nothing for -Wimport.\n+\t* c.opt: Update help for -Wimport.\n+\t* cppfiles.c: Include hashtab.h.  Update comments.\n+\t(stack_file): Read the file before updating dependencies.\n+\t(once_only_file_p): Be smarter about marking once-only files.\n+\t(_cpp_mark_file_once_only): Correct the check for existence on\n+\tthe list.\n+\t(open_file_failed): Use name not path, which is NULL.\n+\t* cpphash.h: Don't include hashtab.h.\n+\t(struct _cpp_file): Remove.\n+\t(struct cpp_reader): Update.\n+\t* cppinit.c (cpp_create_reader): Don't initialize warn_import.\n+\t* cpplib.h (struct cpp_options): Remove warn_import.\n+\t(cpp_simplify_path): Remove.\n+\n 2003-08-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/11295"}, {"sha": "1bb944fe31ffb1c653a363b1c3c6ec0aa18bad90", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=bf42e45b205e05a710de0e9fe0fc33e668fdb891", "patch": "@@ -2354,7 +2354,7 @@ LIBCPP_OBJS =\tcpplib.o cpplex.o cppmacro.o cppexp.o cppfiles.o cpptrad.o \\\n \t\thashtable.o line-map.o mkdeps.o cpppch.o\n \n LIBCPP_DEPS =\t$(CPPLIB_H) cpphash.h line-map.h hashtable.h intl.h \\\n-\t\t$(HASHTAB_H) $(OBSTACK_H) $(CONFIG_H) $(SYSTEM_H)\n+\t\t$(OBSTACK_H) $(CONFIG_H) $(SYSTEM_H)\n \n # Most of the other archives built/used by this makefile are for\n # targets.  This one is strictly for the host.\n@@ -2371,7 +2371,7 @@ cppmacro.o: cppmacro.c $(LIBCPP_DEPS)\n cpplib.o:   cpplib.c   $(LIBCPP_DEPS)\n cpphash.o:  cpphash.c  $(LIBCPP_DEPS)\n cpptrad.o:  cpptrad.c  $(LIBCPP_DEPS)\n-cppfiles.o: cppfiles.c $(LIBCPP_DEPS) $(SPLAY_TREE_H) mkdeps.h\n+cppfiles.o: cppfiles.c $(LIBCPP_DEPS) $(HASHTAB_H) mkdeps.h\n cppinit.o:  cppinit.c  $(LIBCPP_DEPS) mkdeps.h\n cpppch.o:   cpppch.c   $(LIBCPP_DEPS) mkdeps.h\n "}, {"sha": "e1922cb9bcb94ed61b35ff83b493a1afa311980a", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=bf42e45b205e05a710de0e9fe0fc33e668fdb891", "patch": "@@ -484,7 +484,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_Wimport:\n-      cpp_opts->warn_import = value;\n+      /* Silently ignore for now.  */\n       break;\n \n     case OPT_Winvalid_offsetof:"}, {"sha": "221fb678b3ddbc4fa44009dd49646dffa215639a", "filename": "gcc/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=bf42e45b205e05a710de0e9fe0fc33e668fdb891", "patch": "@@ -251,7 +251,7 @@ Warn when a declaration does not specify a type\n \n Wimport\n C ObjC C++ ObjC++\n-Warn about uses of the \\\"#import\\\" directive\n+Deprecated.  This switch has no effect.\n \n Winvalid-offsetof\n C++ ObjC++"}, {"sha": "374036a29cd4f1eae67a92da780f869c6b452dfc", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=bf42e45b205e05a710de0e9fe0fc33e668fdb891", "patch": "@@ -27,6 +27,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"cpphash.h\"\n #include \"intl.h\"\n #include \"mkdeps.h\"\n+#include \"hashtab.h\"\n #include <dirent.h>\n \n /* Variable length record files on VMS will have a stat size that includes\n@@ -68,8 +69,8 @@ struct _cpp_file\n   /* The full path of the pch file.  */\n   const char *pchname;\n \n-  /* The file's path with the basename stripped, malloced.  NULL if it\n-     hasn't been calculated yet.  */\n+  /* The file's path with the basename stripped.  NULL if it hasn't\n+     been calculated yet.  */\n   const char *dir_name;\n \n   /* Chain through #import-ed files or those  containing #pragma once.  */\n@@ -83,8 +84,7 @@ struct _cpp_file\n \n   /* The directory in the search path where FILE was found.  Used for\n      #include_next and determining whether a header is a system\n-     header.  Is NULL if the file was given as an absolute path, or\n-     opened with read_file.  */\n+     header.  */\n   cpp_dir *dir;\n \n   /* As filled in by stat(2) for the file.  */\n@@ -126,23 +126,28 @@ struct _cpp_file\n    its head pointed to by a slot in FILE_HASH.  The file name is what\n    appeared between the quotes in a #include directive; it can be\n    determined implicity from the hash table location or explicitly\n-   from FILE->fname.\n+   from FILE->name.\n \n    FILE is a structure containing details about the file that was\n    found with that search, or details of how the search failed.\n \n    START_DIR is the starting location of the search in the include\n    chain.  The current directories for \"\" includes are also hashed in\n-   the hash table.  Files that are looked up without using a search\n-   path, such as absolute filenames and file names from the command\n-   line share a special starting directory so they don't get confused\n-   with normal include-chain lookups in the cache.\n+   the hash table and therefore unique.  Files that are looked up\n+   without using a search path, such as absolute filenames and file\n+   names from the command line share a special starting directory so\n+   they don't cause cache hits with normal include-chain lookups.\n \n    If START_DIR is NULL then the entry is for a directory, not a file,\n    and the directory is in DIR.  Since the starting point in a file\n    lookup chain is never NULL, this means that simple pointer\n    comparisons against START_DIR can be made to determine cache hits\n    in file lookups.\n+\n+   If a cache lookup fails because of e.g. an extra \"./\" in the path,\n+   then nothing will break.  It is just less efficient as CPP will\n+   have to do more work re-preprocessing the file, and/or comparing\n+   its contents against earlier once-only files.\n */\n struct file_hash_entry\n {\n@@ -530,6 +535,9 @@ stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n   if (once_only_file_p (pfile, file, import))\n       return false;\n \n+  if (!read_file (pfile, file))\n+    return false;\n+\n   sysp = MAX ((pfile->map ? pfile->map->sysp : 0),\n \t      (file->dir ? file->dir->sysp : 0));\n \n@@ -540,9 +548,6 @@ stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n \tdeps_add_dep (pfile->deps, file->path);\n     }\n \n-  if (!read_file (pfile, file))\n-    return false;\n-\n   /* Clear buffer_valid since _cpp_clean_line messes it up.  */\n   file->buffer_valid = false;\n   file->stack_count++;\n@@ -580,15 +585,12 @@ once_only_file_p (cpp_reader *pfile, _cpp_file *file, bool import)\n     return true;\n \n   /* Are we #import-ing a previously #import-ed file?  */\n-  if (import)\n-    {\n-      if (file->import)\n-\treturn true;\n-      _cpp_mark_file_once_only (pfile, file, true);\n-    }\n+  if (import && file->import)\n+    return true;\n \n   /* Read the file contents now.  stack_file would do it later, and\n-     we're smart enough to not do it twice, so this is no loss.  */\n+     we're smart enough to not do it twice, so this is no loss.  Note\n+     we don't mark the file once-only if we can't read it.  */\n   if (!read_file (pfile, file))\n     return false;\n \n@@ -609,33 +611,36 @@ once_only_file_p (cpp_reader *pfile, _cpp_file *file, bool import)\n \t  /* Size might have changed in read_file().  */\n \t  && f->st.st_size == file->st.st_size\n \t  && !memcmp (f->buffer, file->buffer, f->st.st_size))\n-\treturn true;\n+\tbreak;\n     }\n \n-  return false;\n+  if (import || f != NULL)\n+    _cpp_mark_file_once_only (pfile, file, import);\n+\n+  return f != NULL;\n }\n \n /* Mark FILE to be included once only.  IMPORT is true if because of\n    #import, otherwise it is assumed to be #pragma once.  */\n void\n _cpp_mark_file_once_only (cpp_reader *pfile, _cpp_file *file, bool import)\n {\n-  if (import)\n-    file->import = true;\n-  else\n-    {\n-      pfile->saw_pragma_once = true;\n-      file->pragma_once = true;\n-    }\n-\n   /* Put it on the once-only list if it's not on there already (an\n      earlier #include with a #pragma once might have put it on there\n      already).  */\n-  if (file->once_only_next == NULL)\n+  if (!file->import && !file->pragma_once)\n     {\n       file->once_only_next = pfile->once_only_files;\n       pfile->once_only_files = file;\n     }\n+\n+  if (import)\n+    file->import = true;\n+  else\n+    {\n+      pfile->saw_pragma_once = true;\n+      file->pragma_once = true;\n+    }\n }\n \n /* Return the directory from which searching for FNAME should start,\n@@ -731,7 +736,7 @@ open_file_failed (cpp_reader *pfile, _cpp_file *file)\n \n   errno = file->err_no;\n   if (print_dep && CPP_OPTION (pfile, deps.missing_files) && errno == ENOENT)\n-    deps_add_dep (pfile->deps, file->path);\n+    deps_add_dep (pfile->deps, file->name);\n   else\n     {\n       /* If we are outputting dependencies but not for this file then"}, {"sha": "951dd2f4101d8ad0ef03aedf5fde1d725008fdaf", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=bf42e45b205e05a710de0e9fe0fc33e668fdb891", "patch": "@@ -24,7 +24,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #define GCC_CPPHASH_H\n \n #include \"hashtable.h\"\n-#include \"hashtab.h\"\n \n #ifdef HAVE_ICONV\n #include <iconv.h>\n@@ -37,7 +36,6 @@ struct directive;\t\t/* Deliberately incomplete.  */\n struct pending_option;\n struct op;\n struct strbuf;\n-struct _cpp_file;\n \n typedef bool (*convert_f) (iconv_t, const unsigned char *, size_t,\n \t\t\t   struct strbuf *);\n@@ -365,7 +363,7 @@ struct cpp_reader\n   struct _cpp_file *once_only_files;\n \n   /* File and directory hash table.  */\n-  htab_t file_hash;\n+  struct htab *file_hash;\n   struct file_hash_entry *file_hash_entries;\n   unsigned int file_hash_entries_allocated, file_hash_entries_used;\n "}, {"sha": "b719a85bb8cc4930d92890962ef9b35e719fdb3f", "filename": "gcc/cppinit.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=bf42e45b205e05a710de0e9fe0fc33e668fdb891", "patch": "@@ -133,7 +133,6 @@ cpp_create_reader (enum c_lang lang, hash_table *table)\n   pfile = xcalloc (1, sizeof (cpp_reader));\n \n   cpp_set_lang (pfile, lang);\n-  CPP_OPTION (pfile, warn_import) = 1;\n   CPP_OPTION (pfile, warn_multichar) = 1;\n   CPP_OPTION (pfile, discard_comments) = 1;\n   CPP_OPTION (pfile, discard_comments_in_macro_exp) = 1;"}, {"sha": "ca3f81422ad8beebb215358613ea4a9fb918361b", "filename": "gcc/cpplib.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf42e45b205e05a710de0e9fe0fc33e668fdb891/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=bf42e45b205e05a710de0e9fe0fc33e668fdb891", "patch": "@@ -267,9 +267,6 @@ struct cpp_options\n   /* Nonzero means warn if there are any trigraphs.  */\n   unsigned char warn_trigraphs;\n \n-  /* Nonzero means warn if #import is used.  */\n-  unsigned char warn_import;\n-\n   /* Nonzero means warn about multicharacter charconsts.  */\n   unsigned char warn_multichar;\n \n@@ -712,7 +709,6 @@ extern unsigned char *cpp_quote_string (unsigned char *, const unsigned char *,\n /* In cppfiles.c */\n extern bool cpp_included (cpp_reader *, const char *);\n extern void cpp_make_system_header (cpp_reader *, int, int);\n-extern void cpp_simplify_path (char *);\n extern bool cpp_push_include (cpp_reader *, const char *);\n extern void cpp_change_file (cpp_reader *, enum lc_reason, const char *);\n "}]}