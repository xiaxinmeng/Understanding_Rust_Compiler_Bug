{"sha": "62fc0a6ce28c502fc6a7b7c09157840bf98f945f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJmYzBhNmNlMjhjNTAyZmM2YTdiN2MwOTE1Nzg0MGJmOThmOTQ1Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-12T10:58:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-12T10:58:35Z"}, "message": "i386: Fix up vec_extract_lo* patterns [PR93670]\n\nThe VEXTRACT* insns have way too many different CPUID feature flags (ATT\nsyntax)\nvextractf128 $imm, %ymm, %xmm/mem\t\tAVX\nvextracti128 $imm, %ymm, %xmm/mem\t\tAVX2\nvextract{f,i}32x4 $imm, %ymm, %xmm/mem {k}{z}\tAVX512VL+AVX512F\nvextract{f,i}32x4 $imm, %zmm, %xmm/mem {k}{z}\tAVX512F\nvextract{f,i}64x2 $imm, %ymm, %xmm/mem {k}{z}\tAVX512VL+AVX512DQ\nvextract{f,i}64x2 $imm, %zmm, %xmm/mem {k}{z}\tAVX512DQ\nvextract{f,i}32x8 $imm, %zmm, %ymm/mem {k}{z}\tAVX512DQ\nvextract{f,i}64x4 $imm, %zmm, %ymm/mem {k}{z}\tAVX512F\n\nAs the testcase shows and the patch too, we didn't get it right in all\ncases.\n\nThe first hunk is about avx512vl_vextractf128v8s[if] incorrectly\nrequiring TARGET_AVX512DQ.  The corresponding insn is the first\nvextract{f,i}32x4 above, so it requires VL+F, and the builtins have it\ncorrect (TARGET_AVX512VL implies TARGET_AVX512F):\nBDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_vextractf128v8sf, \"__builtin_ia32_extractf32x4_256_mask\", IX86_BUILTIN_EXTRACTF32X4_256, UNKNOWN, (int) V4SF_FTYPE_V8SF_INT_V4SF_UQI)\nBDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_vextractf128v8si, \"__builtin_ia32_extracti32x4_256_mask\", IX86_BUILTIN_EXTRACTI32X4_256, UNKNOWN, (int) V4SI_FTYPE_V8SI_INT_V4SI_UQI)\nWe only need TARGET_AVX512DQ for avx512vl_vextractf128v4d[if].\n\nThe second hunk is about vec_extract_lo_v16s[if]{,_mask}.  These are using\nthe vextract{f,i}32x8 insns (AVX512DQ above), but we weren't requiring that,\nbut instead incorrectly && 1 for non-masked and && (64 == 64 && TARGET_AVX512VL)\nfor masked insns.  This is extraction from ZMM, so it doesn't need VL for\nanything.  The hunk actually only requires TARGET_AVX512DQ when the insn\nis masked, if it is not masked, when TARGET_AVX512DQ isn't available we can\nuse vextract{f,i}64x4 instead which is available already in TARGET_AVX512F\nand does the same thing, extracts the low 256 bits from 512 bits vector\n(often we split it into just nothing, but there are some special cases like\nwhen using xmm16+ when we can't without AVX512VL).\n\nThe last hunk is about vec_extract_lo_v8s[if]{,_mask}.  The non-_mask\nsuffixed ones are ok already and just split into nothing (lowpart subreg).\nThe masked ones were incorrectly requiring TARGET_AVX512VL and\nTARGET_AVX512DQ, when we only need TARGET_AVX512VL.\n\n2020-02-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93670\n\t* config/i386/sse.md (VI48F_256_DQ): New mode iterator.\n\t(avx512vl_vextractf128<mode>): Use it instead of VI48F_256.  Remove\n\tTARGET_AVX512DQ from condition.\n\t(vec_extract_lo_<mode><mask_name>): Use <mask_avx512dq_condition>\n\tinstead of <mask_mode512bit_condition> in condition.  If\n\tTARGET_AVX512DQ is false, emit vextract*64x4 instead of\n\tvextract*32x8.\n\t(vec_extract_lo_<mode><mask_name>): Drop <mask_avx512dq_condition>\n\tfrom condition.\n\n\t* gcc.target/i386/avx512vl-pr93670.c: New test.", "tree": {"sha": "580a9ecec7cd5a66b850474ddd70410836300e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/580a9ecec7cd5a66b850474ddd70410836300e12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62fc0a6ce28c502fc6a7b7c09157840bf98f945f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62fc0a6ce28c502fc6a7b7c09157840bf98f945f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62fc0a6ce28c502fc6a7b7c09157840bf98f945f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62fc0a6ce28c502fc6a7b7c09157840bf98f945f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12c763c68a28d0c002b382b15ec138a8bc01e3bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c763c68a28d0c002b382b15ec138a8bc01e3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12c763c68a28d0c002b382b15ec138a8bc01e3bf"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "6fa4768d816bde4832695e06b47f71f618d158fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62fc0a6ce28c502fc6a7b7c09157840bf98f945f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62fc0a6ce28c502fc6a7b7c09157840bf98f945f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62fc0a6ce28c502fc6a7b7c09157840bf98f945f", "patch": "@@ -1,3 +1,16 @@\n+2020-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93670\n+\t* config/i386/sse.md (VI48F_256_DQ): New mode iterator.\n+\t(avx512vl_vextractf128<mode>): Use it instead of VI48F_256.  Remove\n+\tTARGET_AVX512DQ from condition.\n+\t(vec_extract_lo_<mode><mask_name>): Use <mask_avx512dq_condition>\n+\tinstead of <mask_mode512bit_condition> in condition.  If\n+\tTARGET_AVX512DQ is false, emit vextract*64x4 instead of\n+\tvextract*32x8.\n+\t(vec_extract_lo_<mode><mask_name>): Drop <mask_avx512dq_condition>\n+\tfrom condition.\n+\n 2020-02-12  Kewen Lin  <linkw@gcc.gnu.org>\n \n \tPR target/91052"}, {"sha": "ee4c914bfe0a0f1e0f2a8b91c5179e326cffcd51", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62fc0a6ce28c502fc6a7b7c09157840bf98f945f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62fc0a6ce28c502fc6a7b7c09157840bf98f945f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=62fc0a6ce28c502fc6a7b7c09157840bf98f945f", "patch": "@@ -8719,13 +8719,16 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_mode_iterator VI48F_256_DQ\n+  [V8SI V8SF (V4DI \"TARGET_AVX512DQ\") (V4DF \"TARGET_AVX512DQ\")])\n+\n (define_expand \"avx512vl_vextractf128<mode>\"\n   [(match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\")\n-   (match_operand:VI48F_256 1 \"register_operand\")\n+   (match_operand:VI48F_256_DQ 1 \"register_operand\")\n    (match_operand:SI 2 \"const_0_to_1_operand\")\n    (match_operand:<ssehalfvecmode> 3 \"nonimm_or_0_operand\")\n    (match_operand:QI 4 \"register_operand\")]\n-  \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n+  \"TARGET_AVX512VL\"\n {\n   rtx (*insn)(rtx, rtx, rtx, rtx);\n   rtx dest = operands[0];\n@@ -8793,14 +8796,19 @@\n                      (const_int 4) (const_int 5)\n                      (const_int 6) (const_int 7)])))]\n   \"TARGET_AVX512F\n-   && <mask_mode512bit_condition>\n+   && <mask_avx512dq_condition>\n    && (<mask_applied> || !(MEM_P (operands[0]) && MEM_P (operands[1])))\"\n {\n   if (<mask_applied>\n       || (!TARGET_AVX512VL\n \t  && !REG_P (operands[0])\n \t  && EXT_REX_SSE_REG_P (operands[1])))\n-    return \"vextract<shuffletype>32x8\\t{$0x0, %1, %0<mask_operand2>|%0<mask_operand2>, %1, 0x0}\";\n+    {\n+      if (TARGET_AVX512DQ)\n+\treturn \"vextract<shuffletype>32x8\\t{$0x0, %1, %0<mask_operand2>|%0<mask_operand2>, %1, 0x0}\";\n+      else\n+\treturn \"vextract<shuffletype>64x4\\t{$0x0, %1, %0|%0, %1, 0x0}\";\n+    }\n   else\n     return \"#\";\n }\n@@ -8910,7 +8918,7 @@\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)])))]\n   \"TARGET_AVX\n-   && <mask_avx512vl_condition> && <mask_avx512dq_condition>\n+   && <mask_avx512vl_condition>\n    && (<mask_applied> || !(MEM_P (operands[0]) && MEM_P (operands[1])))\"\n {\n   if (<mask_applied>)"}, {"sha": "433b0af7874758512dc71321dcfcfe82bede3a54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62fc0a6ce28c502fc6a7b7c09157840bf98f945f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62fc0a6ce28c502fc6a7b7c09157840bf98f945f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62fc0a6ce28c502fc6a7b7c09157840bf98f945f", "patch": "@@ -1,3 +1,8 @@\n+2020-02-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93670\n+\t* gcc.target/i386/avx512vl-pr93670.c: New test.\n+\n 2020-02-12  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/93697"}, {"sha": "3f232a969013fd3922de7fd7d90a4488df3591ca", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr93670.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62fc0a6ce28c502fc6a7b7c09157840bf98f945f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr93670.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62fc0a6ce28c502fc6a7b7c09157840bf98f945f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr93670.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr93670.c?ref=62fc0a6ce28c502fc6a7b7c09157840bf98f945f", "patch": "@@ -0,0 +1,77 @@\n+/* PR target/93670 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mno-avx512dq\" } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+f1 (__m256i x)\n+{\n+  return _mm256_extracti32x4_epi32 (x, 0);\n+}\n+\n+__m128i\n+f2 (__m256i x, __m128i w, __mmask8 m)\n+{\n+  return _mm256_mask_extracti32x4_epi32 (w, m, x, 0);\n+}\n+\n+__m128i\n+f3 (__m256i x, __mmask8 m)\n+{\n+  return _mm256_maskz_extracti32x4_epi32 (m, x, 0);\n+}\n+\n+__m128\n+f4 (__m256 x)\n+{\n+  return _mm256_extractf32x4_ps (x, 0);\n+}\n+\n+__m128\n+f5 (__m256 x, __m128 w, __mmask8 m)\n+{\n+  return _mm256_mask_extractf32x4_ps (w, m, x, 0);\n+}\n+\n+__m128\n+f6 (__m256 x, __mmask8 m)\n+{\n+  return _mm256_maskz_extractf32x4_ps (m, x, 0);\n+}\n+\n+__m128i\n+f7 (__m256i x)\n+{\n+  return _mm256_extracti32x4_epi32 (x, 1);\n+}\n+\n+__m128i\n+f8 (__m256i x, __m128i w, __mmask8 m)\n+{\n+  return _mm256_mask_extracti32x4_epi32 (w, m, x, 1);\n+}\n+\n+__m128i\n+f9 (__m256i x, __mmask8 m)\n+{\n+  return _mm256_maskz_extracti32x4_epi32 (m, x, 1);\n+}\n+\n+__m128\n+f10 (__m256 x)\n+{\n+  return _mm256_extractf32x4_ps (x, 1);\n+}\n+\n+__m128\n+f11 (__m256 x, __m128 w, __mmask8 m)\n+{\n+  return _mm256_mask_extractf32x4_ps (w, m, x, 1);\n+}\n+\n+__m128\n+f12 (__m256 x, __mmask8 m)\n+{\n+  return _mm256_maskz_extractf32x4_ps (m, x, 1);\n+}"}]}