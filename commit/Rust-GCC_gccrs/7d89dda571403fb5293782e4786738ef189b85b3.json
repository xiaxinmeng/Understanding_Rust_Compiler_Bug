{"sha": "7d89dda571403fb5293782e4786738ef189b85b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q4OWRkYTU3MTQwM2ZiNTI5Mzc4MmU0Nzg2NzM4ZWYxODliODViMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-03-17T22:41:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-03-17T22:41:25Z"}, "message": "alpha.h (FUNCTION_OK_FOR_SIBCALL): New.\n\n        * alpha.h (FUNCTION_OK_FOR_SIBCALL): New.\n        * alpha.md (sibcall, sibcall_value, sibcall_epilogue): New.\n        (*sibcall_osf_1, *sibcall_value_osf_1): New.\n\nFrom-SVN: r32613", "tree": {"sha": "e89f540fe7d82fee86df999b089ca77b84259940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e89f540fe7d82fee86df999b089ca77b84259940"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d89dda571403fb5293782e4786738ef189b85b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d89dda571403fb5293782e4786738ef189b85b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d89dda571403fb5293782e4786738ef189b85b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d89dda571403fb5293782e4786738ef189b85b3/comments", "author": null, "committer": null, "parents": [{"sha": "0a1c58a25ab5df1a3e4596024774641ebae8be2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a1c58a25ab5df1a3e4596024774641ebae8be2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a1c58a25ab5df1a3e4596024774641ebae8be2a"}], "stats": {"total": 84, "additions": 73, "deletions": 11}, "files": [{"sha": "84cd1bb8810f29cbd31fca4416f708a11b9d6dd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d89dda571403fb5293782e4786738ef189b85b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d89dda571403fb5293782e4786738ef189b85b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d89dda571403fb5293782e4786738ef189b85b3", "patch": "@@ -52,6 +52,10 @@\n \t(safe_for_unsave): New.\n \t* tree.h (lang_safe_for_unsave, safe_for_unsave): Declare.\n \n+\t* alpha.h (FUNCTION_OK_FOR_SIBCALL): New.\n+\t* alpha.md (sibcall, sibcall_value, sibcall_epilogue): New.\n+\t(*sibcall_osf_1, *sibcall_value_osf_1): New.\n+\n 2000-03-17  Mark Mitchell  <mark@codesourcery.com>\n \n \t* objc/objc-act.c (encode_method_prototype): Pass types, not\n@@ -214,7 +218,7 @@ Thu Mar 16 09:02:19 2000  Jason Eckhardt  <jle@cygnus.com>\n 2000-03-16  Neil Booth  <NeilB@earthling.net>\n \n \t* cppinit.c (handle_option):  Implement #unassert directive\n-        as -A- command line option.\n+\tas -A- command line option.\n \t(print_help):  Update.\n \t* cpptexi.c:  Update.\n \n@@ -298,9 +302,9 @@ Wed Mar 15 13:07:05 MET 2000  Jan Hubicka  <jh@suse.cz>\n \n Wed Feb 23 13:00:06 CET 2000  Jan Hubicka  <jh@suse.cz>\n \n-        * flow.c (fixup_reorder_chain): Avoid double labels in the basic block;\n-        end of basic block is jump_insn, not barrier; use create_basic_block\n-        instead of creating basic block by hand.\n+\t* flow.c (fixup_reorder_chain): Avoid double labels in the basic block;\n+\tend of basic block is jump_insn, not barrier; use create_basic_block\n+\tinstead of creating basic block by hand.\n \n 2000-03-14  Jason Eckhardt  <jle@cygnus.com>\n "}, {"sha": "15a4b31eef6dd53d40a0e748c19c3c3833310254", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d89dda571403fb5293782e4786738ef189b85b3/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d89dda571403fb5293782e4786738ef189b85b3/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=7d89dda571403fb5293782e4786738ef189b85b3", "patch": "@@ -1168,6 +1168,16 @@ extern int alpha_memory_latency;\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n+/* We do not allow indirect calls to be optimized into sibling calls, nor\n+   can we allow a call to a function in a different compilation unit to\n+   be optimized into a sibcall.  Except if the function is known not to\n+   return, in which case our caller doesn't care what the gp is.  */\n+#define FUNCTION_OK_FOR_SIBCALL(DECL)\t\t\t\\\n+  (DECL\t\t\t\t\t\t\t\\\n+   && ((TREE_ASM_WRITTEN (DECL) && !flag_pic)\t\t\\\n+       || ! TREE_PUBLIC (DECL)\t\t\t\t\\\n+       || (0 && TREE_THIS_VOLATILE (DECL))))\n+\n /* Try to output insns to set TARGET equal to the constant C if it can be\n    done in less than N insns.  Do all computations in MODE.  Returns the place\n    where the output has been placed if it can be done and the insns have been"}, {"sha": "edba8cfbd93abd61b8534f1eeb6842bf583262ba", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d89dda571403fb5293782e4786738ef189b85b3/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d89dda571403fb5293782e4786738ef189b85b3/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=7d89dda571403fb5293782e4786738ef189b85b3", "patch": "@@ -3704,6 +3704,17 @@\n   DONE;\n }\")\n \n+(define_expand \"sibcall\"\n+  [(call (mem:DI (match_operand 0 \"\" \"\"))\n+\t\t (match_operand 1 \"\" \"\"))]\n+  \"!TARGET_OPEN_VMS && !TARGET_WINDOWS_NT\"\n+  \"\n+{\n+  if (GET_CODE (operands[0]) != MEM)\n+    abort ();\n+  operands[0] = XEXP (operands[0], 0);\n+}\")\n+\n (define_expand \"call_osf\"\n   [(parallel [(call (mem:DI (match_operand 0 \"\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n@@ -3815,6 +3826,18 @@\n   DONE;\n }\")\n \n+(define_expand \"sibcall_value\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:DI (match_operand 1 \"\" \"\"))\n+\t      (match_operand 2 \"\" \"\")))]\n+  \"!TARGET_OPEN_VMS && !TARGET_WINDOWS_NT\"\n+  \"\n+{\n+  if (GET_CODE (operands[1]) != MEM)\n+    abort ();\n+  operands[1] = XEXP (operands[1], 0);\n+}\")\n+\n (define_expand \"call_value_osf\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n \t\t   (call (mem:DI (match_operand 1 \"\" \"\"))\n@@ -3903,7 +3926,7 @@\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*call_osf_1\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"r,R,i\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:DI 27))\n@@ -3916,7 +3939,17 @@\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,*,16\")])\n       \n-(define_insn \"\"\n+(define_insn \"*sibcall_osf_1\"\n+  [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"R,i\"))\n+\t (match_operand 1 \"\" \"\"))]\n+  \"! TARGET_WINDOWS_NT && ! TARGET_OPEN_VMS\"\n+  \"@\n+   br $31,$%0..ng\n+   jmp $31,%0\"\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"length\" \"*,8\")])\n+\n+(define_insn \"*call_nt_1\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"r,R,i\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:DI 26))]\n@@ -3928,7 +3961,7 @@\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,*,12\")])\n       \n-(define_insn \"\"\n+(define_insn \"*call_vms_1\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"r,i\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand:DI 2 \"nonimmediate_operand\" \"r,m\"))\n@@ -5434,6 +5467,11 @@\n   \"\"\n   \"alpha_expand_epilogue ();\")\n \n+(define_expand \"sibcall_epilogue\"\n+  [(return)]\n+  \"!TARGET_OPEN_VMS && !TARGET_WINDOWS_NT\"\n+  \"alpha_expand_epilogue (); DONE;\")\n+\n (define_expand \"eh_epilogue\"\n   [(use (match_operand:DI 0 \"register_operand\" \"r\"))\n    (use (match_operand:DI 1 \"register_operand\" \"r\"))\n@@ -5576,7 +5614,7 @@\n ;; The call patterns are at the end of the file because their\n ;; wildcard operand0 interferes with nice recognition.\n \n-(define_insn \"\"\n+(define_insn \"*call_value_osf_1\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"r,R,i\"))\n \t      (match_operand 2 \"\" \"\")))\n@@ -5590,7 +5628,18 @@\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,*,16\")])\n \n-(define_insn \"\"\n+(define_insn \"*sibcall_value_osf_1\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"R,i\"))\n+\t      (match_operand 2 \"\" \"\")))]\n+  \"! TARGET_WINDOWS_NT && ! TARGET_OPEN_VMS\"\n+  \"@\n+   br $31,$%1..ng\n+   jmp $31,%1\"\n+  [(set_attr \"type\" \"jsr\")\n+   (set_attr \"length\" \"*,8\")])\n+\n+(define_insn \"*call_value_nt_1\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"r,R,i\"))\n \t      (match_operand 2 \"\" \"\")))\n@@ -5603,7 +5652,7 @@\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"*,*,12\")])\n \n-(define_insn \"\"\n+(define_insn \"*call_value_vms_1\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"r,i\"))\n \t      (match_operand 2 \"\" \"\")))\n@@ -5617,7 +5666,6 @@\n    ldq $27,%3\\;jsr $26,%1\\;ldq $27,0($29)\"\n   [(set_attr \"type\" \"jsr\")\n    (set_attr \"length\" \"12,16\")])\n-\n \f\n ;; Peepholes go at the end.\n "}]}