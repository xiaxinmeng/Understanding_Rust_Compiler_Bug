{"sha": "e048626b0530bb33a298bac11e52e4875e6d89f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA0ODYyNmIwNTMwYmIzM2EyOThiYWMxMWU1MmU0ODc1ZTZkODlmNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-21T06:30:52Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-21T06:30:52Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r352", "tree": {"sha": "23c7198480ef90fdd31007542f1ca1e987564e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23c7198480ef90fdd31007542f1ca1e987564e42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e048626b0530bb33a298bac11e52e4875e6d89f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e048626b0530bb33a298bac11e52e4875e6d89f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e048626b0530bb33a298bac11e52e4875e6d89f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e048626b0530bb33a298bac11e52e4875e6d89f6/comments", "author": null, "committer": null, "parents": [{"sha": "2daed0953effbc0bcb3e523a8dd4d0ea2f06cd84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2daed0953effbc0bcb3e523a8dd4d0ea2f06cd84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2daed0953effbc0bcb3e523a8dd4d0ea2f06cd84"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "d534b311806cdb2cdcac122328eb34e3612468d7", "filename": "gcc/caller-save.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e048626b0530bb33a298bac11e52e4875e6d89f6/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e048626b0530bb33a298bac11e52e4875e6d89f6/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=e048626b0530bb33a298bac11e52e4875e6d89f6", "patch": "@@ -406,6 +406,7 @@ set_reg_live (reg, setter)\n      rtx reg, setter;\n {\n   register int regno, endregno, i;\n+  enum machine_mode mode = GET_MODE (reg);\n   int word = 0;\n \n   if (GET_CODE (reg) == SUBREG)\n@@ -418,7 +419,7 @@ set_reg_live (reg, setter)\n     return;\n \n   regno = REGNO (reg) + word;\n-  endregno = regno + HARD_REGNO_NREGS (regno, GET_MODE (reg));\n+  endregno = regno + HARD_REGNO_NREGS (regno, mode);\n \n   for (i = regno; i < endregno; i++)\n     SET_HARD_REG_BIT (hard_regs_live, i);"}]}