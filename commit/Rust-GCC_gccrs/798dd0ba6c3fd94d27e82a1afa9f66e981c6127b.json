{"sha": "798dd0ba6c3fd94d27e82a1afa9f66e981c6127b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4ZGQwYmE2YzNmZDk0ZDI3ZTgyYTFhZmE5ZjY2ZTk4MWM2MTI3Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-11T16:12:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-11T16:12:53Z"}, "message": "sse.md (VI_128): New mode iterator.\n\n\t* config/i386/sse.md (VI_128): New mode iterator.\n\t(VI12_128): Rename from SSEMODE12.\n\t(VI14_128): Rename from SSEMODE14.\n\t(VI124_128): New mode iterator.\n\t(VI24_128): Rename from SSEMODE248.\n\t(VI248_128): Rename from SSEMODE248.\n\t(SSEMODE124C8): Remove.\n\t(*<plusminus_insn><mode>3): Merge with *avx_<plusminus_insn><mode>3.\n\t(*sse2_<plusminus_insn><mode>3): Merge with\n\t*avx_<plusminus_insn><mode>3.\n\t(*mulv8hi3): Merge with *avx_mulv8hi3.\n\t(*<s>mulv8hi3_highpart): Merge with *avx_<s>mulv8hi3_highpart.\n\t(*sse2_umulv2siv2di3): Merge with *avx_umulv2siv2di3.\n\t(*sse2_pmaddwd): Merge with *avx_pmaddwd.\n\t(*sse4_1_mulv4si3): Merge with *avx_mulv4si3.\n\t(ashr<mode>3): Merge with *avx_ashr<mode>3.\n\t(lshr<mode>3): Merge with *avx_lshr<mode>3.\n\t(ashl<mode>3): Merge with *avx_ashl<mode>3.\n\t(sse2_ashlv1ti3): Merge with *avx_ashlv1ti3.\n\t(sse2_lshrv1ti3): Merge with *avx_lshrv1ti3.\n\t(*sse4_1_<smaxmin:code><mode>3): Merge with *avx_<smaxmin:code><mode>3.\n\t(*<smaxmin:code>v8hi3): Ditto.\n\t(*sse4_1_<umaxmin:code><mode>3): Merge with *avx_<umaxmin:code><mode>3.\n\t(*<smaxmin:code>v16qi3): Ditto.\n\t(*sse4_1_eqv2di3): Merge with *avx_eq<mode>3.\n\t(*sse2_eq<mode>3): Ditto.\n\t(*sse4_2_eqv2di3): Merge with *avx_gt<mode>3.\n\t(*sse2_gt<mode>3): Ditto.\n\t(vcondv2di): Split out of vcond<mode>.\n\t(vconduv2di): Split out of vcondu<mode>.\n\nFrom-SVN: r172264", "tree": {"sha": "73a8d6f0fe3c481780a6b879fd8a2882c10598dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73a8d6f0fe3c481780a6b879fd8a2882c10598dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/798dd0ba6c3fd94d27e82a1afa9f66e981c6127b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798dd0ba6c3fd94d27e82a1afa9f66e981c6127b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798dd0ba6c3fd94d27e82a1afa9f66e981c6127b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798dd0ba6c3fd94d27e82a1afa9f66e981c6127b/comments", "author": null, "committer": null, "parents": [{"sha": "956011be1f9a5369c4390bcccb5bb6198887e455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956011be1f9a5369c4390bcccb5bb6198887e455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956011be1f9a5369c4390bcccb5bb6198887e455"}], "stats": {"total": 1046, "additions": 473, "deletions": 573}, "files": [{"sha": "80e8c3bf025ca1a300f61de8e5b127245ac9b0ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798dd0ba6c3fd94d27e82a1afa9f66e981c6127b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798dd0ba6c3fd94d27e82a1afa9f66e981c6127b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=798dd0ba6c3fd94d27e82a1afa9f66e981c6127b", "patch": "@@ -1,3 +1,36 @@\n+2011-04-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (VI_128): New mode iterator.\n+\t(VI12_128): Rename from SSEMODE12.\n+\t(VI14_128): Rename from SSEMODE14.\n+\t(VI124_128): New mode iterator.\n+\t(VI24_128): Rename from SSEMODE248.\n+\t(VI248_128): Rename from SSEMODE248.\n+\t(SSEMODE124C8): Remove.\n+\t(*<plusminus_insn><mode>3): Merge with *avx_<plusminus_insn><mode>3.\n+\t(*sse2_<plusminus_insn><mode>3): Merge with\n+\t*avx_<plusminus_insn><mode>3.\n+\t(*mulv8hi3): Merge with *avx_mulv8hi3.\n+\t(*<s>mulv8hi3_highpart): Merge with *avx_<s>mulv8hi3_highpart.\n+\t(*sse2_umulv2siv2di3): Merge with *avx_umulv2siv2di3.\n+\t(*sse2_pmaddwd): Merge with *avx_pmaddwd.\n+\t(*sse4_1_mulv4si3): Merge with *avx_mulv4si3.\n+\t(ashr<mode>3): Merge with *avx_ashr<mode>3.\n+\t(lshr<mode>3): Merge with *avx_lshr<mode>3.\n+\t(ashl<mode>3): Merge with *avx_ashl<mode>3.\n+\t(sse2_ashlv1ti3): Merge with *avx_ashlv1ti3.\n+\t(sse2_lshrv1ti3): Merge with *avx_lshrv1ti3.\n+\t(*sse4_1_<smaxmin:code><mode>3): Merge with *avx_<smaxmin:code><mode>3.\n+\t(*<smaxmin:code>v8hi3): Ditto.\n+\t(*sse4_1_<umaxmin:code><mode>3): Merge with *avx_<umaxmin:code><mode>3.\n+\t(*<smaxmin:code>v16qi3): Ditto.\n+\t(*sse4_1_eqv2di3): Merge with *avx_eq<mode>3.\n+\t(*sse2_eq<mode>3): Ditto.\n+\t(*sse4_2_eqv2di3): Merge with *avx_gt<mode>3.\n+\t(*sse2_gt<mode>3): Ditto.\n+\t(vcondv2di): Split out of vcond<mode>.\n+\t(vconduv2di): Split out of vcondu<mode>.\n+\n 2011-04-11  Richard Guenther  <rguenther@suse.de>\n \n \t* gimplify.c (gimple_fold_indirect_ref): Check host_integerp\n@@ -296,7 +329,7 @@\n \t* system.h (ASM_OUTPUT_BSS): Poison.\n \t* varasm.c (asm_output_bss): Remove function.\n \t(emit_bss, init_varasm_once): Don't use ASM_OUTPUT_BSS macro.\n-\t\n+\n \t* config/frv/frv.h (BSS_SECTION_ASM_OP): Remove comment.\n \t* config/frv/fr30.h (BSS_SECTION_ASM_OP): Likewise.\n \t* config/i386/djgpp.h (BSS_SECTION_ASM_OP): Likewise.\n@@ -330,8 +363,7 @@\n \toptions.  Don't map other m68k options manually.  Don't handle\n \told-style options as canonical.\n \t(MULTILIB_EXCEPTIONS): Don't use $(CANONICALIZE_OPTIONS).\n-\t* doc/install.texi (m68k-*-*): Document binutils version\n-\trequirement.\n+\t* doc/install.texi (m68k-*-*): Document binutils version requirement.\n \n 2011-04-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -868,11 +900,11 @@\n \n 2011-04-05  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n-        * config/arm/arm.md (define_constants for unspec): Replace with\n-        define_c_enum.\n-        (define_constants for unspecv): Replace with define_c_enum.\n-        * config/arm/neon.md (define_constants for unspec): Replace with\n-        define_c_enum.\n+\t* config/arm/arm.md (define_constants for unspec): Replace with\n+\tdefine_c_enum.\n+\t(define_constants for unspecv): Replace with define_c_enum.\n+\t* config/arm/neon.md (define_constants for unspec): Replace with\n+\tdefine_c_enum.\n \n 2011-04-04  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "b2ce2f223ef14f85d1f5364f7a12b0270ed9d30d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 433, "deletions": 565, "changes": 998, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798dd0ba6c3fd94d27e82a1afa9f66e981c6127b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798dd0ba6c3fd94d27e82a1afa9f66e981c6127b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=798dd0ba6c3fd94d27e82a1afa9f66e981c6127b", "patch": "@@ -36,6 +36,15 @@\n (define_mode_iterator VF_128\n   [(V4SF \"TARGET_SSE\") (V2DF \"TARGET_SSE2\")])\n \n+;; All 128bit vector integer modes\n+(define_mode_iterator VI_128 [V16QI V8HI V4SI V2DI])\n+\n+;; Random 128bit vector integer mode combinations\n+(define_mode_iterator VI12_128 [V16QI V8HI])\n+(define_mode_iterator VI14_128 [V16QI V4SI])\n+(define_mode_iterator VI124_128 [V16QI V8HI V4SI])\n+(define_mode_iterator VI24_128 [V8HI V4SI])\n+(define_mode_iterator VI248_128 [V8HI V4SI V2DI])\n \n \n ;; Instruction suffix for sign and zero extensions.\n@@ -67,11 +76,7 @@\n   [V16QI V8HI V4SI V2DI V1TI V4SF V2DF V32QI V16HI V8SI V4DI V8SF V4DF])\n \n ;; Mix-n-match\n-(define_mode_iterator SSEMODE12 [V16QI V8HI])\n-(define_mode_iterator SSEMODE24 [V8HI V4SI])\n-(define_mode_iterator SSEMODE14 [V16QI V4SI])\n (define_mode_iterator SSEMODE124 [V16QI V8HI V4SI])\n-(define_mode_iterator SSEMODE248 [V8HI V4SI V2DI])\n (define_mode_iterator SSEMODE1248 [V16QI V8HI V4SI V2DI])\n (define_mode_iterator SSEMODEF2P [V4SF V2DF])\n \n@@ -91,10 +96,6 @@\n (define_mode_iterator SSEMODE4S [V4SF V4SI])\n (define_mode_iterator SSEMODE2D [V2DF V2DI])\n \n-;; Modes handled by integer vcond pattern\n-(define_mode_iterator SSEMODE124C8 [V16QI V8HI V4SI\n-\t\t\t\t    (V2DI \"TARGET_SSE4_2\")])\n-\n ;; Modes handled by vec_extract_even/odd pattern.\n (define_mode_iterator SSEMODE_EO\n   [(V4SF \"TARGET_SSE\")\n@@ -4552,71 +4553,57 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_expand \"neg<mode>2\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n-\t(minus:SSEMODEI\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"\")\n+\t(minus:VI_128\n \t  (match_dup 2)\n-\t  (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"\")))]\n+\t  (match_operand:VI_128 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n   \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n \n (define_expand \"<plusminus_insn><mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n-\t(plusminus:SSEMODEI\n-\t  (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"\")\n+\t(plusminus:VI_128\n+\t  (match_operand:VI_128 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:VI_128 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*avx_<plusminus_insn><mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n-\t(plusminus:SSEMODEI\n-\t  (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"<comm>x\")\n-\t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"vp<plusminus_mnemonic><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*<plusminus_insn><mode>3\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"=x\")\n-\t(plusminus:SSEMODEI\n-\t  (match_operand:SSEMODEI 1 \"nonimmediate_operand\" \"<comm>0\")\n-\t  (match_operand:SSEMODEI 2 \"nonimmediate_operand\" \"xm\")))]\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"=x,x\")\n+\t(plusminus:VI_128\n+\t  (match_operand:VI_128 1 \"nonimmediate_operand\" \"<comm>0,x\")\n+\t  (match_operand:VI_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<plusminus_mnemonic><ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_data16\" \"1\")\n+  \"@\n+   p<plusminus_mnemonic><ssevecsize>\\t{%2, %0|%0, %2}\n+   vp<plusminus_mnemonic><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"sse2_<plusminus_insn><mode>3\"\n-  [(set (match_operand:SSEMODE12 0 \"register_operand\" \"\")\n-\t(sat_plusminus:SSEMODE12\n-\t  (match_operand:SSEMODE12 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODE12 2 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:VI12_128 0 \"register_operand\" \"\")\n+\t(sat_plusminus:VI12_128\n+\t  (match_operand:VI12_128 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:VI12_128 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n-(define_insn \"*avx_<plusminus_insn><mode>3\"\n-  [(set (match_operand:SSEMODE12 0 \"register_operand\" \"=x\")\n-\t(sat_plusminus:SSEMODE12\n-\t  (match_operand:SSEMODE12 1 \"nonimmediate_operand\" \"<comm>x\")\n-\t  (match_operand:SSEMODE12 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"vp<plusminus_mnemonic><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*sse2_<plusminus_insn><mode>3\"\n-  [(set (match_operand:SSEMODE12 0 \"register_operand\" \"=x\")\n-\t(sat_plusminus:SSEMODE12\n-\t  (match_operand:SSEMODE12 1 \"nonimmediate_operand\" \"<comm>0\")\n-\t  (match_operand:SSEMODE12 2 \"nonimmediate_operand\" \"xm\")))]\n+  [(set (match_operand:VI12_128 0 \"register_operand\" \"=x,x\")\n+\t(sat_plusminus:VI12_128\n+\t  (match_operand:VI12_128 1 \"nonimmediate_operand\" \"<comm>0,x\")\n+\t  (match_operand:VI12_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<plusminus_mnemonic><ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_data16\" \"1\")\n+  \"@\n+   p<plusminus_mnemonic><ssevecsize>\\t{%2, %0|%0, %2}\n+   vp<plusminus_mnemonic><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn_and_split \"mulv16qi3\"\n@@ -4666,24 +4653,18 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);\")\n \n-(define_insn \"*avx_mulv8hi3\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(mult:V8HI (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\")\n-\t\t   (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n-  \"vpmullw\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*mulv8hi3\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(mult:V8HI (match_operand:V8HI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n+\t(mult:V8HI (match_operand:V8HI 1 \"nonimmediate_operand\" \"%0,x\")\n+\t\t   (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n-  \"pmullw\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix_data16\" \"1\")\n+  \"@\n+   pmullw\\t{%2, %0|%0, %2}\n+   vpmullw\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"<s>mulv8hi3_highpart\"\n@@ -4699,36 +4680,24 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);\")\n \n-(define_insn \"*avx_<s>mulv8hi3_highpart\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(truncate:V8HI\n-\t  (lshiftrt:V8SI\n-\t    (mult:V8SI\n-\t      (any_extend:V8SI\n-\t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\"))\n-\t      (any_extend:V8SI\n-\t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))\n-\t    (const_int 16))))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n-  \"vpmulh<u>w\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*<s>mulv8hi3_highpart\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n \t(truncate:V8HI\n \t  (lshiftrt:V8SI\n \t    (mult:V8SI\n \t      (any_extend:V8SI\n-\t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%0\"))\n+\t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%0,x\"))\n \t      (any_extend:V8SI\n-\t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))\n+\t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")))\n \t    (const_int 16))))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n-  \"pmulh<u>w\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix_data16\" \"1\")\n+  \"@\n+   pmulh<u>w\\t{%2, %0|%0, %2}\n+   vpmulh<u>w\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"sse2_umulv2siv2di3\"\n@@ -4745,38 +4714,25 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\")\n \n-(define_insn \"*avx_umulv2siv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(mult:V2DI\n-\t  (zero_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n-\t      (parallel [(const_int 0) (const_int 2)])))\n-\t  (zero_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t      (parallel [(const_int 0) (const_int 2)])))))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n-  \"vpmuludq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*sse2_umulv2siv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(mult:V2DI\n \t  (zero_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%0\")\n+\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%0,x\")\n \t      (parallel [(const_int 0) (const_int 2)])))\n \t  (zero_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n+\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,xm\")\n \t      (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n-  \"pmuludq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix_data16\" \"1\")\n+  \"@\n+   pmuludq\\t{%2, %0|%0, %2}\n+   vpmuludq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"sse4_1_mulv2siv2di3\"\n@@ -4793,39 +4749,26 @@\n   \"TARGET_SSE4_1\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\")\n \n-(define_insn \"*avx_mulv2siv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(mult:V2DI\n-\t  (sign_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n-\t      (parallel [(const_int 0) (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t      (parallel [(const_int 0) (const_int 2)])))))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n-  \"vpmuldq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*sse4_1_mulv2siv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(mult:V2DI\n \t  (sign_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%0\")\n+\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%0,x\")\n \t      (parallel [(const_int 0) (const_int 2)])))\n \t  (sign_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n+\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,xm\")\n \t      (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n-  \"pmuldq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n+  \"@\n+   pmuldq\\t{%2, %0|%0, %2}\n+   vpmuldq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseimul\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"sse2_pmaddwd\"\n@@ -4862,57 +4805,20 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);\")\n \n-(define_insn \"*avx_pmaddwd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(plus:V4SI\n-\t  (mult:V4SI\n-\t    (sign_extend:V4SI\n-\t      (vec_select:V4HI\n-\t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\")\n-\t\t(parallel [(const_int 0)\n-\t\t\t   (const_int 2)\n-\t\t\t   (const_int 4)\n-\t\t\t   (const_int 6)])))\n-\t    (sign_extend:V4SI\n-\t      (vec_select:V4HI\n-\t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n-\t\t(parallel [(const_int 0)\n-\t\t\t   (const_int 2)\n-\t\t\t   (const_int 4)\n-\t\t\t   (const_int 6)]))))\n-\t  (mult:V4SI\n-\t    (sign_extend:V4SI\n-\t      (vec_select:V4HI (match_dup 1)\n-\t\t(parallel [(const_int 1)\n-\t\t\t   (const_int 3)\n-\t\t\t   (const_int 5)\n-\t\t\t   (const_int 7)])))\n-\t    (sign_extend:V4SI\n-\t      (vec_select:V4HI (match_dup 2)\n-\t\t(parallel [(const_int 1)\n-\t\t\t   (const_int 3)\n-\t\t\t   (const_int 5)\n-\t\t\t   (const_int 7)]))))))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n-  \"vpmaddwd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*sse2_pmaddwd\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n \t(plus:V4SI\n \t  (mult:V4SI\n \t    (sign_extend:V4SI\n \t      (vec_select:V4HI\n-\t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"%0,x\")\n \t\t(parallel [(const_int 0)\n \t\t\t   (const_int 2)\n \t\t\t   (const_int 4)\n \t\t\t   (const_int 6)])))\n \t    (sign_extend:V4SI\n \t      (vec_select:V4HI\n-\t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")\n+\t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")\n \t\t(parallel [(const_int 0)\n \t\t\t   (const_int 2)\n \t\t\t   (const_int 4)\n@@ -4931,10 +4837,14 @@\n \t\t\t   (const_int 5)\n \t\t\t   (const_int 7)]))))))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n-  \"pmaddwd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n+  \"@\n+   pmaddwd\\t{%2, %0|%0, %2}\n+   vpmaddwd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n    (set_attr \"atom_unit\" \"simul\")\n-   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"mulv4si3\"\n@@ -4943,36 +4853,29 @@\n \t\t   (match_operand:V4SI 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n-  if (TARGET_SSE4_1 || TARGET_AVX)\n+  if (TARGET_SSE4_1)\n     ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\n })\n \n-(define_insn \"*avx_mulv4si3\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(mult:V4SI (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n-\t\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n-  \"vpmulld\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*sse4_1_mulv4si3\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n-\t(mult:V4SI (match_operand:V4SI 1 \"nonimmediate_operand\" \"%0\")\n-\t\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")))]\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n+\t(mult:V4SI (match_operand:V4SI 1 \"nonimmediate_operand\" \"%0,x\")\n+\t\t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n-  \"pmulld\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseimul\")\n+  \"@\n+   pmulld\\t{%2, %0|%0, %2}\n+   vpmulld\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn_and_split \"*sse2_mulv4si3\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n \t(mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"\")\n \t\t   (match_operand:V4SI 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE2 && !TARGET_SSE4_1 && !TARGET_AVX\n+  \"TARGET_SSE2\n    && can_create_pseudo_p ()\"\n   \"#\"\n   \"&& 1\"\n@@ -5313,280 +5216,210 @@\n   DONE;\n })\n \n-(define_insn \"*avx_ashr<mode>3\"\n-  [(set (match_operand:SSEMODE24 0 \"register_operand\" \"=x\")\n-\t(ashiftrt:SSEMODE24\n-\t  (match_operand:SSEMODE24 1 \"register_operand\" \"x\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN\")))]\n-  \"TARGET_AVX\"\n-  \"vpsra<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set (attr \"length_immediate\")\n-     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-       (const_string \"1\")\n-       (const_string \"0\")))\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"ashr<mode>3\"\n-  [(set (match_operand:SSEMODE24 0 \"register_operand\" \"=x\")\n-\t(ashiftrt:SSEMODE24\n-\t  (match_operand:SSEMODE24 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN\")))]\n+  [(set (match_operand:VI24_128 0 \"register_operand\" \"=x,x\")\n+\t(ashiftrt:VI24_128\n+\t  (match_operand:VI24_128 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN\")))]\n   \"TARGET_SSE2\"\n-  \"psra<ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set (attr \"length_immediate\")\n-     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-       (const_string \"1\")\n-       (const_string \"0\")))\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_lshrv1ti3\"\n-  [(set (match_operand:V1TI 0 \"register_operand\" \"=x\")\n- \t(lshiftrt:V1TI\n-\t (match_operand:V1TI 1 \"register_operand\" \"x\")\n-\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n-  \"TARGET_AVX\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n-  return \"vpsrldq\\t{%2, %1, %0|%0, %1, %2}\";\n-}\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_lshr<mode>3\"\n-  [(set (match_operand:SSEMODE248 0 \"register_operand\" \"=x\")\n-\t(lshiftrt:SSEMODE248\n-\t  (match_operand:SSEMODE248 1 \"register_operand\" \"x\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN\")))]\n-  \"TARGET_AVX\"\n-  \"vpsrl<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   psra<ssevecsize>\\t{%2, %0|%0, %2}\n+   vpsra<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseishft\")\n    (set (attr \"length_immediate\")\n      (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n        (const_string \"1\")\n        (const_string \"0\")))\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse2_lshrv1ti3\"\n-  [(set (match_operand:V1TI 0 \"register_operand\" \"=x\")\n- \t(lshiftrt:V1TI\n-\t (match_operand:V1TI 1 \"register_operand\" \"0\")\n-\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n-  \"TARGET_SSE2\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n-  return \"psrldq\\t{%2, %0|%0, %2}\";\n-}\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"atom_unit\" \"sishuf\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"lshr<mode>3\"\n-  [(set (match_operand:SSEMODE248 0 \"register_operand\" \"=x\")\n-\t(lshiftrt:SSEMODE248\n-\t  (match_operand:SSEMODE248 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN\")))]\n+  [(set (match_operand:VI248_128 0 \"register_operand\" \"=x,x\")\n+\t(lshiftrt:VI248_128\n+\t  (match_operand:VI248_128 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN\")))]\n   \"TARGET_SSE2\"\n-  \"psrl<ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set (attr \"length_immediate\")\n-     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-       (const_string \"1\")\n-       (const_string \"0\")))\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_ashlv1ti3\"\n-  [(set (match_operand:V1TI 0 \"register_operand\" \"=x\")\n-\t(ashift:V1TI (match_operand:V1TI 1 \"register_operand\" \"x\")\n-\t\t     (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n-  \"TARGET_AVX\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n-  return \"vpslldq\\t{%2, %1, %0|%0, %1, %2}\";\n-}\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_ashl<mode>3\"\n-  [(set (match_operand:SSEMODE248 0 \"register_operand\" \"=x\")\n-\t(ashift:SSEMODE248\n-\t  (match_operand:SSEMODE248 1 \"register_operand\" \"x\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN\")))]\n-  \"TARGET_AVX\"\n-  \"vpsll<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix\" \"vex\")\n+  \"@\n+   psrl<ssevecsize>\\t{%2, %0|%0, %2}\n+   vpsrl<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseishft\")\n    (set (attr \"length_immediate\")\n      (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n        (const_string \"1\")\n        (const_string \"0\")))\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse2_ashlv1ti3\"\n-  [(set (match_operand:V1TI 0 \"register_operand\" \"=x\")\n-\t(ashift:V1TI (match_operand:V1TI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n-  \"TARGET_SSE2\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n-  return \"pslldq\\t{%2, %0|%0, %2}\";\n-}\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"ashl<mode>3\"\n-  [(set (match_operand:SSEMODE248 0 \"register_operand\" \"=x\")\n-\t(ashift:SSEMODE248\n-\t  (match_operand:SSEMODE248 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN\")))]\n+  [(set (match_operand:VI248_128 0 \"register_operand\" \"=x,x\")\n+\t(ashift:VI248_128\n+\t  (match_operand:VI248_128 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN\")))]\n   \"TARGET_SSE2\"\n-  \"psll<ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix_data16\" \"1\")\n+  \"@\n+   psll<ssevecsize>\\t{%2, %0|%0, %2}\n+   vpsll<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseishft\")\n    (set (attr \"length_immediate\")\n      (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n        (const_string \"1\")\n        (const_string \"0\")))\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"vec_shl_<mode>\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"\")\n         (ashift:V1TI\n-\t (match_operand:SSEMODEI 1 \"register_operand\" \"\")\n+\t (match_operand:VI_128 1 \"register_operand\" \"\")\n \t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   operands[0] = gen_lowpart (V1TImode, operands[0]);\n   operands[1] = gen_lowpart (V1TImode, operands[1]);\n })\n \n-(define_expand \"vec_shr_<mode>\"\n-  [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n-        (lshiftrt:V1TI\n-\t (match_operand:SSEMODEI 1 \"register_operand\" \"\")\n-\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"\")))]\n+(define_insn \"sse2_ashlv1ti3\"\n+  [(set (match_operand:V1TI 0 \"register_operand\" \"=x,x\")\n+\t(ashift:V1TI\n+\t (match_operand:V1TI 1 \"register_operand\" \"0,x\")\n+\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n,n\")))]\n   \"TARGET_SSE2\"\n {\n-  operands[0] = gen_lowpart (V1TImode, operands[0]);\n-  operands[1] = gen_lowpart (V1TImode, operands[1]);\n-})\n+  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n \n-(define_insn \"*avx_<code><mode>3\"\n-  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n-\t(umaxmin:SSEMODE124\n-\t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"%x\")\n-\t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"vp<maxmin_int><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set (attr \"prefix_extra\")\n-     (if_then_else (match_operand:V16QI 0 \"\" \"\")\n-       (const_string \"0\")\n-       (const_string \"1\")))\n-   (set_attr \"prefix\" \"vex\")\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"pslldq\\t{%2, %0|%0, %2}\";\n+    case 1:\n+      return \"vpslldq\\t{%2, %1, %0|%0, %1, %2}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseishft\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"<code>v16qi3\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n-\t(umaxmin:V16QI\n-\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"\")))]\n+(define_expand \"vec_shr_<mode>\"\n+  [(set (match_operand:VI_128 0 \"register_operand\" \"\")\n+        (lshiftrt:V1TI\n+\t (match_operand:VI_128 1 \"register_operand\" \"\")\n+\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"\")))]\n   \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, V16QImode, operands);\")\n+{\n+  operands[0] = gen_lowpart (V1TImode, operands[0]);\n+  operands[1] = gen_lowpart (V1TImode, operands[1]);\n+})\n \n-(define_insn \"*<code>v16qi3\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n-\t(umaxmin:V16QI\n-\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, V16QImode, operands)\"\n-  \"p<maxmin_int>b\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n+(define_insn \"sse2_lshrv1ti3\"\n+  [(set (match_operand:V1TI 0 \"register_operand\" \"=x,x\")\n+ \t(lshiftrt:V1TI\n+\t (match_operand:V1TI 1 \"register_operand\" \"0,x\")\n+\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n,n\")))]\n+  \"TARGET_SSE2\"\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n \n-(define_insn \"*avx_<code><mode>3\"\n-  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n-\t(smaxmin:SSEMODE124\n-\t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"%x\")\n-\t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"vp<maxmin_int><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set (attr \"prefix_extra\")\n-     (if_then_else (match_operand:V8HI 0 \"\" \"\")\n-       (const_string \"0\")\n-       (const_string \"1\")))\n-   (set_attr \"prefix\" \"vex\")\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"psrldq\\t{%2, %0|%0, %2}\";\n+    case 1:\n+      return \"vpsrldq\\t{%2, %1, %0|%0, %1, %2}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseishft\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"atom_unit\" \"sishuf\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"<code>v8hi3\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n-\t(smaxmin:V8HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, V8HImode, operands);\")\n+(define_insn \"*sse4_1_<code><mode>3\"\n+  [(set (match_operand:VI14_128 0 \"register_operand\" \"=x,x\")\n+\t(smaxmin:VI14_128\n+\t  (match_operand:VI14_128 1 \"nonimmediate_operand\" \"%0,x\")\n+\t  (match_operand:VI14_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE4_1 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"@\n+   p<maxmin_int><ssevecsize>\\t{%2, %0|%0, %2}\n+   vp<maxmin_int><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*<code>v8hi3\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n \t(smaxmin:V8HI\n-\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\")))]\n+\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"%0,x\")\n+\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, V8HImode, operands)\"\n-  \"p<maxmin_int>w\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_data16\" \"1\")\n+  \"@\n+   p<maxmin_int>w\\t{%2, %0|%0, %2}\n+   vp<maxmin_int>w\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix_extra\" \"*,1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"umaxv8hi3\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n-\t(umax:V8HI (match_operand:V8HI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:V8HI 2 \"nonimmediate_operand\" \"\")))]\n+(define_expand \"smax<mode>3\"\n+  [(set (match_operand:VI14_128 0 \"register_operand\" \"\")\n+\t(smax:VI14_128 (match_operand:VI14_128 1 \"register_operand\" \"\")\n+\t\t       (match_operand:VI14_128 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1)\n-    ix86_fixup_binary_operands_no_copy (UMAX, V8HImode, operands);\n+    ix86_fixup_binary_operands_no_copy (SMAX, <MODE>mode, operands);\n   else\n     {\n-      rtx op0 = operands[0], op2 = operands[2], op3 = op0;\n-      if (rtx_equal_p (op3, op2))\n-\top3 = gen_reg_rtx (V8HImode);\n-      emit_insn (gen_sse2_ussubv8hi3 (op3, operands[1], op2));\n-      emit_insn (gen_addv8hi3 (op0, op3, op2));\n+      rtx xops[6];\n+      bool ok;\n+\n+      xops[0] = operands[0];\n+      xops[1] = operands[1];\n+      xops[2] = operands[2];\n+      xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n+      xops[4] = operands[1];\n+      xops[5] = operands[2];\n+      ok = ix86_expand_int_vcond (xops);\n+      gcc_assert (ok);\n       DONE;\n     }\n })\n \n-(define_expand \"smax<mode>3\"\n-  [(set (match_operand:SSEMODE14 0 \"register_operand\" \"\")\n-\t(smax:SSEMODE14 (match_operand:SSEMODE14 1 \"register_operand\" \"\")\n-\t\t\t(match_operand:SSEMODE14 2 \"register_operand\" \"\")))]\n+(define_expand \"smin<mode>3\"\n+  [(set (match_operand:VI14_128 0 \"register_operand\" \"\")\n+\t(smin:VI14_128 (match_operand:VI14_128 1 \"register_operand\" \"\")\n+\t\t       (match_operand:VI14_128 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1)\n-    ix86_fixup_binary_operands_no_copy (SMAX, <MODE>mode, operands);\n+    ix86_fixup_binary_operands_no_copy (SMIN, <MODE>mode, operands);\n   else\n     {\n       rtx xops[6];\n       bool ok;\n \n       xops[0] = operands[0];\n-      xops[1] = operands[1];\n-      xops[2] = operands[2];\n+      xops[1] = operands[2];\n+      xops[2] = operands[1];\n       xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n       xops[4] = operands[1];\n       xops[5] = operands[2];\n@@ -5596,16 +5429,13 @@\n     }\n })\n \n-(define_insn \"*sse4_1_<code><mode>3\"\n-  [(set (match_operand:SSEMODE14 0 \"register_operand\" \"=x\")\n-\t(smaxmin:SSEMODE14\n-\t  (match_operand:SSEMODE14 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:SSEMODE14 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE4_1 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<maxmin_int><ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n+(define_expand \"<code>v8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n+\t(smaxmin:V8HI\n+\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, V8HImode, operands);\")\n \n (define_expand \"smaxv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n@@ -5627,6 +5457,84 @@\n   DONE;\n })\n \n+(define_expand \"sminv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n+\t(smin:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:V2DI 2 \"register_operand\" \"\")))]\n+  \"TARGET_SSE4_2\"\n+{\n+  rtx xops[6];\n+  bool ok;\n+\n+  xops[0] = operands[0];\n+  xops[1] = operands[2];\n+  xops[2] = operands[1];\n+  xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n+  xops[4] = operands[1];\n+  xops[5] = operands[2];\n+  ok = ix86_expand_int_vcond (xops);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n+(define_insn \"*sse4_1_<code><mode>3\"\n+  [(set (match_operand:VI24_128 0 \"register_operand\" \"=x,x\")\n+\t(umaxmin:VI24_128\n+\t  (match_operand:VI24_128 1 \"nonimmediate_operand\" \"%0,x\")\n+\t  (match_operand:VI24_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE4_1 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"@\n+   p<maxmin_int><ssevecsize>\\t{%2, %0|%0, %2}\n+   vp<maxmin_int><ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_extra\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*<code>v16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n+\t(umaxmin:V16QI\n+\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"%0,x\")\n+\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, V16QImode, operands)\"\n+  \"@\n+   p<maxmin_int>b\\t{%2, %0|%0, %2}\n+   vp<maxmin_int>b\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseiadd\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix_extra\" \"*,1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_expand \"<code>v16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n+\t(umaxmin:V16QI\n+\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, V16QImode, operands);\")\n+\n+(define_expand \"umaxv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n+\t(umax:V8HI (match_operand:V8HI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:V8HI 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE2\"\n+{\n+  if (TARGET_SSE4_1)\n+    ix86_fixup_binary_operands_no_copy (UMAX, V8HImode, operands);\n+  else\n+    {\n+      rtx op0 = operands[0], op2 = operands[2], op3 = op0;\n+      if (rtx_equal_p (op3, op2))\n+\top3 = gen_reg_rtx (V8HImode);\n+      emit_insn (gen_sse2_ussubv8hi3 (op3, operands[1], op2));\n+      emit_insn (gen_addv8hi3 (op0, op3, op2));\n+      DONE;\n+    }\n+})\n+\n (define_expand \"umaxv4si3\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n \t(umax:V4SI (match_operand:V4SI 1 \"register_operand\" \"\")\n@@ -5652,45 +5560,14 @@\n     }\n })\n \n-(define_insn \"*sse4_1_<code><mode>3\"\n-  [(set (match_operand:SSEMODE24 0 \"register_operand\" \"=x\")\n-\t(umaxmin:SSEMODE24\n-\t  (match_operand:SSEMODE24 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:SSEMODE24 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE4_1 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<maxmin_int><ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_expand \"umaxv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(umax:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:V2DI 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE4_2\"\n-{\n-  rtx xops[6];\n-  bool ok;\n-\n-  xops[0] = operands[0];\n-  xops[1] = operands[1];\n-  xops[2] = operands[2];\n-  xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n-  xops[4] = operands[1];\n-  xops[5] = operands[2];\n-  ok = ix86_expand_int_vcond (xops);\n-  gcc_assert (ok);\n-  DONE;\n-})\n-\n-(define_expand \"smin<mode>3\"\n-  [(set (match_operand:SSEMODE14 0 \"register_operand\" \"\")\n-\t(smin:SSEMODE14 (match_operand:SSEMODE14 1 \"register_operand\" \"\")\n-\t\t\t(match_operand:SSEMODE14 2 \"register_operand\" \"\")))]\n+(define_expand \"umin<mode>3\"\n+  [(set (match_operand:VI24_128 0 \"register_operand\" \"\")\n+\t(umin:VI24_128 (match_operand:VI24_128 1 \"register_operand\" \"\")\n+\t\t       (match_operand:VI24_128 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_SSE4_1)\n-    ix86_fixup_binary_operands_no_copy (SMIN, <MODE>mode, operands);\n+    ix86_fixup_binary_operands_no_copy (UMIN, <MODE>mode, operands);\n   else\n     {\n       rtx xops[6];\n@@ -5699,7 +5576,7 @@\n       xops[0] = operands[0];\n       xops[1] = operands[2];\n       xops[2] = operands[1];\n-      xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n+      xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n       xops[4] = operands[1];\n       xops[5] = operands[2];\n       ok = ix86_expand_int_vcond (xops);\n@@ -5708,51 +5585,26 @@\n     }\n })\n \n-(define_expand \"sminv2di3\"\n+(define_expand \"umaxv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n-\t(smin:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n+\t(umax:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n \t\t   (match_operand:V2DI 2 \"register_operand\" \"\")))]\n   \"TARGET_SSE4_2\"\n {\n   rtx xops[6];\n   bool ok;\n \n   xops[0] = operands[0];\n-  xops[1] = operands[2];\n-  xops[2] = operands[1];\n-  xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n+  xops[1] = operands[1];\n+  xops[2] = operands[2];\n+  xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n   xops[4] = operands[1];\n   xops[5] = operands[2];\n   ok = ix86_expand_int_vcond (xops);\n   gcc_assert (ok);\n   DONE;\n })\n \n-(define_expand \"umin<mode>3\"\n-  [(set (match_operand:SSEMODE24 0 \"register_operand\" \"\")\n-\t(umin:SSEMODE24 (match_operand:SSEMODE24 1 \"register_operand\" \"\")\n-\t\t\t(match_operand:SSEMODE24 2 \"register_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_fixup_binary_operands_no_copy (UMIN, <MODE>mode, operands);\n-  else\n-    {\n-      rtx xops[6];\n-      bool ok;\n-\n-      xops[0] = operands[0];\n-      xops[1] = operands[2];\n-      xops[2] = operands[1];\n-      xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n-      xops[4] = operands[1];\n-      xops[5] = operands[2];\n-      ok = ix86_expand_int_vcond (xops);\n-      gcc_assert (ok);\n-      DONE;\n-    }\n-})\n-\n (define_expand \"uminv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n \t(umin:V2DI (match_operand:V2DI 1 \"register_operand\" \"\")\n@@ -5779,41 +5631,45 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_expand \"sse2_eq<mode>3\"\n-  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"\")\n-\t(eq:SSEMODE124\n-\t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE2 && !TARGET_XOP \"\n-  \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n-\n-(define_insn \"*avx_eq<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(eq:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 1 \"nonimmediate_operand\" \"%x\")\n-\t  (match_operand:SSEMODE1248 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n-  \"vpcmpeq<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set (attr \"prefix_extra\")\n-     (if_then_else (match_operand:V2DI 0 \"\" \"\")\n-       (const_string \"1\")\n-       (const_string \"*\")))\n-   (set_attr \"prefix\" \"vex\")\n+(define_insn \"*sse4_1_eqv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n+\t(eq:V2DI\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"%0,x\")\n+\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE4_1 && ix86_binary_operator_ok (EQ, V2DImode, operands)\"\n+  \"@\n+   pcmpeqq\\t{%2, %0|%0, %2}\n+   vpcmpeqq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse2_eq<mode>3\"\n-  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n-\t(eq:SSEMODE124\n-\t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm\")))]\n+  [(set (match_operand:VI124_128 0 \"register_operand\" \"=x,x\")\n+\t(eq:VI124_128\n+\t  (match_operand:VI124_128 1 \"nonimmediate_operand\" \"%0,x\")\n+\t  (match_operand:VI124_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE2 && !TARGET_XOP\n    && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n-  \"pcmpeq<ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"prefix_data16\" \"1\")\n+  \"@\n+   pcmpeq<ssevecsize>\\t{%2, %0|%0, %2}\n+   vpcmpeq<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"sse2_eq<mode>3\"\n+  [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n+\t(eq:VI124_128\n+\t  (match_operand:VI124_128 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:VI124_128 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE2 && !TARGET_XOP \"\n+  \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n+\n (define_expand \"sse4_1_eqv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n \t(eq:V2DI\n@@ -5822,84 +5678,96 @@\n   \"TARGET_SSE4_1\"\n   \"ix86_fixup_binary_operands_no_copy (EQ, V2DImode, operands);\")\n \n-(define_insn \"*sse4_1_eqv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(eq:V2DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"%0\")\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE4_1 && ix86_binary_operator_ok (EQ, V2DImode, operands)\"\n-  \"pcmpeqq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecmp\")\n+(define_insn \"sse4_2_gtv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n+\t(gt:V2DI\n+\t  (match_operand:V2DI 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE4_2\"\n+  \"@\n+   pcmpgtq\\t{%2, %0|%0, %2}\n+   vpcmpgtq\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*avx_gt<mode>3\"\n-  [(set (match_operand:SSEMODE1248 0 \"register_operand\" \"=x\")\n-\t(gt:SSEMODE1248\n-\t  (match_operand:SSEMODE1248 1 \"register_operand\" \"x\")\n-\t  (match_operand:SSEMODE1248 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX\"\n-  \"vpcmpgt<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set (attr \"prefix_extra\")\n-     (if_then_else (match_operand:V2DI 0 \"\" \"\")\n-       (const_string \"1\")\n-       (const_string \"*\")))\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse2_gt<mode>3\"\n-  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n-\t(gt:SSEMODE124\n-\t  (match_operand:SSEMODE124 1 \"register_operand\" \"0\")\n-\t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"xm\")))]\n+  [(set (match_operand:VI124_128 0 \"register_operand\" \"=x,x\")\n+\t(gt:VI124_128\n+\t  (match_operand:VI124_128 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:VI124_128 2 \"nonimmediate_operand\" \"xm,xm\")))]\n   \"TARGET_SSE2 && !TARGET_XOP\"\n-  \"pcmpgt<ssevecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse4_2_gtv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n-\t(gt:V2DI\n-\t  (match_operand:V2DI 1 \"register_operand\" \"0\")\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_SSE4_2\"\n-  \"pcmpgtq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"prefix_extra\" \"1\")\n+  \"@\n+   pcmpgt<ssevecsize>\\t{%2, %0|%0, %2}\n+   vpcmpgt<ssevecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"ssecmp\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"vcond<mode>\"\n-  [(set (match_operand:SSEMODE124C8 0 \"register_operand\" \"\")\n-        (if_then_else:SSEMODE124C8\n+  [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n+        (if_then_else:VI124_128\n           (match_operator 3 \"\"\n-            [(match_operand:SSEMODE124C8 4 \"nonimmediate_operand\" \"\")\n-             (match_operand:SSEMODE124C8 5 \"nonimmediate_operand\" \"\")])\n-          (match_operand:SSEMODE124C8 1 \"general_operand\" \"\")\n-          (match_operand:SSEMODE124C8 2 \"general_operand\" \"\")))]\n+            [(match_operand:VI124_128 4 \"nonimmediate_operand\" \"\")\n+             (match_operand:VI124_128 5 \"nonimmediate_operand\" \"\")])\n+          (match_operand:VI124_128 1 \"general_operand\" \"\")\n+          (match_operand:VI124_128 2 \"general_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n   DONE;\n })\n \n+(define_expand \"vcondv2di\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n+        (if_then_else:V2DI\n+          (match_operator 3 \"\"\n+            [(match_operand:V2DI 4 \"nonimmediate_operand\" \"\")\n+             (match_operand:V2DI 5 \"nonimmediate_operand\" \"\")])\n+          (match_operand:V2DI 1 \"general_operand\" \"\")\n+          (match_operand:V2DI 2 \"general_operand\" \"\")))]\n+  \"TARGET_SSE4_2\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n (define_expand \"vcondu<mode>\"\n-  [(set (match_operand:SSEMODE124C8 0 \"register_operand\" \"\")\n-        (if_then_else:SSEMODE124C8\n+  [(set (match_operand:VI124_128 0 \"register_operand\" \"\")\n+        (if_then_else:VI124_128\n           (match_operator 3 \"\"\n-            [(match_operand:SSEMODE124C8 4 \"nonimmediate_operand\" \"\")\n-             (match_operand:SSEMODE124C8 5 \"nonimmediate_operand\" \"\")])\n-          (match_operand:SSEMODE124C8 1 \"general_operand\" \"\")\n-          (match_operand:SSEMODE124C8 2 \"general_operand\" \"\")))]\n+            [(match_operand:VI124_128 4 \"nonimmediate_operand\" \"\")\n+             (match_operand:VI124_128 5 \"nonimmediate_operand\" \"\")])\n+          (match_operand:VI124_128 1 \"general_operand\" \"\")\n+          (match_operand:VI124_128 2 \"general_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n   bool ok = ix86_expand_int_vcond (operands);\n   gcc_assert (ok);\n   DONE;\n })\n \n+(define_expand \"vconduv2di\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n+        (if_then_else:V2DI\n+          (match_operator 3 \"\"\n+            [(match_operand:V2DI 4 \"nonimmediate_operand\" \"\")\n+             (match_operand:V2DI 5 \"nonimmediate_operand\" \"\")])\n+          (match_operand:V2DI 1 \"general_operand\" \"\")\n+          (match_operand:V2DI 2 \"general_operand\" \"\")))]\n+  \"TARGET_SSE4_2\"\n+{\n+  bool ok = ix86_expand_int_vcond (operands);\n+  gcc_assert (ok);\n+  DONE;\n+})\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel bitwise logical operations"}]}