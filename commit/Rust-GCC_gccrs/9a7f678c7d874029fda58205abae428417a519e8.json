{"sha": "9a7f678c7d874029fda58205abae428417a519e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE3ZjY3OGM3ZDg3NDAyOWZkYTU4MjA1YWJhZTQyODQxN2E1MTllOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-15T13:38:01Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-15T13:38:01Z"}, "message": "(expand_float): Use emit_library_call_value.\n\n(expand_unop, expand_binop): Likewise.\n(expand_complex_abs): Likewise.\nAlso pass SUBMODE as output mode to emit_library_call_value.\n\nFrom-SVN: r5327", "tree": {"sha": "5252ef30764165ff33a6e86fa50f4f471451bc37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5252ef30764165ff33a6e86fa50f4f471451bc37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a7f678c7d874029fda58205abae428417a519e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7f678c7d874029fda58205abae428417a519e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7f678c7d874029fda58205abae428417a519e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7f678c7d874029fda58205abae428417a519e8/comments", "author": null, "committer": null, "parents": [{"sha": "fac0ad800a96280835d6eb5310d6c99fc5148d7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac0ad800a96280835d6eb5310d6c99fc5148d7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac0ad800a96280835d6eb5310d6c99fc5148d7f"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "044d7a16b50144169d44f8e862316c0624f821eb", "filename": "gcc/optabs.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7f678c7d874029fda58205abae428417a519e8/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7f678c7d874029fda58205abae428417a519e8/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=9a7f678c7d874029fda58205abae428417a519e8", "patch": "@@ -1352,6 +1352,7 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       rtx funexp = binoptab->handlers[(int) mode].libfunc;\n       rtx op1x = op1;\n       enum machine_mode op1_mode = mode;\n+      rtx value;\n \n       start_sequence ();\n \n@@ -1365,14 +1366,15 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \n       /* Pass 1 for NO_QUEUE so we don't lose any increments\n \t if the libcall is cse'd or moved.  */\n-      emit_library_call (binoptab->handlers[(int) mode].libfunc,\n-\t\t\t 1, mode, 2, op0, mode, op1x, op1_mode);\n+      value = emit_library_call_value (binoptab->handlers[(int) mode].libfunc,\n+\t\t\t\t       NULL_RTX, 1, mode, 2,\n+\t\t\t\t       op0, mode, op1x, op1_mode);\n \n       insns = get_insns ();\n       end_sequence ();\n \n       target = gen_reg_rtx (mode);\n-      emit_libcall_block (insns, target, hard_libcall_value (mode),\n+      emit_libcall_block (insns, target, value,\n \t\t\t  gen_rtx (binoptab->code, mode, op0, op1));\n \n       return target;\n@@ -1842,18 +1844,19 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n     {\n       rtx insns;\n       rtx funexp = unoptab->handlers[(int) mode].libfunc;\n+      rtx value;\n \n       start_sequence ();\n \n       /* Pass 1 for NO_QUEUE so we don't lose any increments\n \t if the libcall is cse'd or moved.  */\n-      emit_library_call (unoptab->handlers[(int) mode].libfunc,\n-\t\t\t 1, mode, 1, op0, mode);\n+      value = emit_library_call_value (unoptab->handlers[(int) mode].libfunc,\n+\t\t\t\t       NULL_RTX, 1, mode, 1, op0, mode);\n       insns = get_insns ();\n       end_sequence ();\n \n       target = gen_reg_rtx (mode);\n-      emit_libcall_block (insns, target, hard_libcall_value (mode),\n+      emit_libcall_block (insns, target, value,\n \t\t\t  gen_rtx (unoptab->code, mode, op0));\n \n       return target;\n@@ -2051,13 +2054,13 @@ expand_complex_abs (mode, op0, target, unsignedp)\n \n       /* Pass 1 for NO_QUEUE so we don't lose any increments\n \t if the libcall is cse'd or moved.  */\n-      emit_library_call (abs_optab->handlers[(int) mode].libfunc,\n-\t\t\t 1, mode, 1, op0, mode);\n+      value = emit_library_call_value (abs_optab->handlers[(int) mode].libfunc,\n+\t\t\t\t       NULL_RTX, 1, submode, 1, op0, mode);\n       insns = get_insns ();\n       end_sequence ();\n \n       target = gen_reg_rtx (submode);\n-      emit_libcall_block (insns, target, hard_libcall_value (submode),\n+      emit_libcall_block (insns, target, value,\n \t\t\t  gen_rtx (abs_optab->code, mode, op0));\n \n       return target;\n@@ -3096,6 +3099,7 @@ expand_float (to, from, unsignedp)\n     {\n       rtx libfcn;\n       rtx insns;\n+      rtx value;\n \n       to = protect_from_queue (to, 1);\n       from = protect_from_queue (from, 0);\n@@ -3155,11 +3159,13 @@ expand_float (to, from, unsignedp)\n \n       start_sequence ();\n \n-      emit_library_call (libfcn, 1, GET_MODE (to), 1, from, GET_MODE (from));\n+      value = emit_library_call_value (libfcn, NULL_RTX, 1,\n+\t\t\t\t       GET_MODE (to),\n+\t\t\t\t       1, from, GET_MODE (from));\n       insns = get_insns ();\n       end_sequence ();\n \n-      emit_libcall_block (insns, target, hard_libcall_value (GET_MODE (to)),\n+      emit_libcall_block (insns, target, value,\n \t\t\t  gen_rtx (FLOAT, GET_MODE (to), from));\n     }\n "}]}