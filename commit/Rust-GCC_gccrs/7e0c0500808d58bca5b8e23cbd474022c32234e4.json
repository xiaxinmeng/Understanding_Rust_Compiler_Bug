{"sha": "7e0c0500808d58bca5b8e23cbd474022c32234e4", "node_id": "C_kwDOANBUbNoAKDdlMGMwNTAwODA4ZDU4YmNhNWI4ZTIzY2JkNDc0MDIyYzMyMjM0ZTQ", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-04T09:34:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-04T14:53:25Z"}, "message": "middle-end/102285 - refine .DEFERRED_INIT expansion\n\nThis refines the way we figure whether we are facing a register\nthat cannot be initialized by emitting a memset away from inspecting\nexpanded RTL of the LHS to using the predicates expand_assignment\nis using to detect decls or MEM_REFs with non-memory DECL_RTL.\n\n2021-10-04  Richard Biener  <rguenther@suse.de>\n\n\t* expr.h (non_mem_decl_p): Declare.\n\t(mem_ref_refers_to_non_mem_p): Likewise.\n\t* expr.c (non_mem_decl_p): Export.\n\t(mem_ref_refers_to_non_mem_p): Likewise.\n\t* internal-fn.c (expand_DEFERRED_INIT): Do not expand the LHS\n\tbut check the base with mem_ref_refers_to_non_mem_p\n\tand non_mem_decl_p.\n\n\t* c-c++-common/pr102285.c: New testcase.", "tree": {"sha": "72b45f5368fadaa6410ef148ea6139f0a8160e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72b45f5368fadaa6410ef148ea6139f0a8160e2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e0c0500808d58bca5b8e23cbd474022c32234e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0c0500808d58bca5b8e23cbd474022c32234e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e0c0500808d58bca5b8e23cbd474022c32234e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0c0500808d58bca5b8e23cbd474022c32234e4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55a3be2f5255d69e740d61b2c5aaba1ccbc643b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a3be2f5255d69e740d61b2c5aaba1ccbc643b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a3be2f5255d69e740d61b2c5aaba1ccbc643b8"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "eb33643bd77062f2238d983ba38e5a363d43d906", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0c0500808d58bca5b8e23cbd474022c32234e4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0c0500808d58bca5b8e23cbd474022c32234e4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7e0c0500808d58bca5b8e23cbd474022c32234e4", "patch": "@@ -5305,7 +5305,7 @@ get_bit_range (poly_uint64_pod *bitstart, poly_uint64_pod *bitend, tree exp,\n    has non-BLKmode.  DECL_RTL must not be a MEM; if\n    DECL_RTL was not set yet, return false.  */\n \n-static inline bool\n+bool\n non_mem_decl_p (tree base)\n {\n   if (!DECL_P (base)\n@@ -5322,7 +5322,7 @@ non_mem_decl_p (tree base)\n /* Returns true if REF refers to an object that does not\n    reside in memory and has non-BLKmode.  */\n \n-static inline bool\n+bool\n mem_ref_refers_to_non_mem_p (tree ref)\n {\n   tree base;"}, {"sha": "890ec19ac7ef87ec94b8db32111d3cae94ca1277", "filename": "gcc/expr.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0c0500808d58bca5b8e23cbd474022c32234e4/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0c0500808d58bca5b8e23cbd474022c32234e4/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=7e0c0500808d58bca5b8e23cbd474022c32234e4", "patch": "@@ -346,4 +346,7 @@ extern void expand_operands (tree, tree, rtx, rtx*, rtx*,\n /* Return an rtx for the size in bytes of the value of an expr.  */\n extern rtx expr_size (tree);\n \n+extern bool mem_ref_refers_to_non_mem_p (tree);\n+extern bool non_mem_decl_p (tree);\n+\n #endif /* GCC_EXPR_H */"}, {"sha": "110145218b94ba00e8bf2641eb0159568c5ba0ad", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0c0500808d58bca5b8e23cbd474022c32234e4/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0c0500808d58bca5b8e23cbd474022c32234e4/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=7e0c0500808d58bca5b8e23cbd474022c32234e4", "patch": "@@ -3015,8 +3015,11 @@ expand_DEFERRED_INIT (internal_fn, gcall *stmt)\n     reg_lhs = true;\n   else\n     {\n-      rtx tem = expand_expr (lhs, NULL_RTX, VOIDmode, EXPAND_WRITE);\n-      reg_lhs = !MEM_P (tem);\n+      tree lhs_base = lhs;\n+      while (handled_component_p (lhs_base))\n+\tlhs_base = TREE_OPERAND (lhs_base, 0);\n+      reg_lhs = (mem_ref_refers_to_non_mem_p (lhs_base)\n+\t\t || non_mem_decl_p (lhs_base));\n     }\n \n   if (!reg_lhs)"}, {"sha": "644054ba5852c1286c4fd90133cb4e3017daec74", "filename": "gcc/testsuite/c-c++-common/pr102285.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e0c0500808d58bca5b8e23cbd474022c32234e4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr102285.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e0c0500808d58bca5b8e23cbd474022c32234e4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr102285.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr102285.c?ref=7e0c0500808d58bca5b8e23cbd474022c32234e4", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftrivial-auto-var-init=zero -Wuninitialized\" } */\n+\n+int\n+qy (void)\n+{\n+  int tw = 4;\n+  int fb[tw];\n+  return fb[2]; /* { dg-warning \"uninitialized\" } */\n+}"}]}