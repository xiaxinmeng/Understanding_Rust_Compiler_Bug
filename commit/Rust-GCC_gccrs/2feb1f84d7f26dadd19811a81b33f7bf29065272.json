{"sha": "2feb1f84d7f26dadd19811a81b33f7bf29065272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlYjFmODRkN2YyNmRhZGQxOTgxMWE4MWIzM2Y3YmYyOTA2NTI3Mg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T14:02:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T14:02:43Z"}, "message": "[multiple changes]\n\n2014-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch8.adb: Minor reformatting.\n\n2014-08-01  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch13.adb (Insert_Pragma): Add special case for precondition\n\tpragmas from aspects, which need to be inserted in proper order.\n\n2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_aggr.adb (Expand_Record_Aggregate, Init_Hidden_Discriminants):\n\tHandle properly a type extension that constrains a discriminated\n\tderived type that renames other discriminants of an ancestor.\n\n2014-08-01  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-pack06.adb, s-pack10.adb, s-pack03.ads, s-pack12.adb, s-pack14.ads,\n\ts-pack25.adb: Fix minor inconsistencies and typos.\n\nFrom-SVN: r213469", "tree": {"sha": "d04a81c0aa052ba819fa5b12d4ba13324ba8a928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d04a81c0aa052ba819fa5b12d4ba13324ba8a928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2feb1f84d7f26dadd19811a81b33f7bf29065272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2feb1f84d7f26dadd19811a81b33f7bf29065272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2feb1f84d7f26dadd19811a81b33f7bf29065272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2feb1f84d7f26dadd19811a81b33f7bf29065272/comments", "author": null, "committer": null, "parents": [{"sha": "fc193526f31a0ea8746348e0ee67aa37c6e7a9c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc193526f31a0ea8746348e0ee67aa37c6e7a9c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc193526f31a0ea8746348e0ee67aa37c6e7a9c7"}], "stats": {"total": 95, "additions": 67, "deletions": 28}, "files": [{"sha": "4c906dd66639d5ef6521fe7654cbb9ed2ff912e7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2feb1f84d7f26dadd19811a81b33f7bf29065272", "patch": "@@ -1,3 +1,23 @@\n+2014-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch8.adb: Minor reformatting.\n+\n+2014-08-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Insert_Pragma): Add special case for precondition\n+\tpragmas from aspects, which need to be inserted in proper order.\n+\n+2014-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Record_Aggregate, Init_Hidden_Discriminants):\n+\tHandle properly a type extension that constrains a discriminated\n+\tderived type that renames other discriminants of an ancestor.\n+\n+2014-08-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-pack06.adb, s-pack10.adb, s-pack03.ads, s-pack12.adb, s-pack14.ads,\n+\ts-pack25.adb: Fix minor inconsistencies and typos.\n+\n 2014-08-01  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch8.adb (Analyze_Subprogram_Renaming): Alphabetize"}, {"sha": "033ad011db84cac908ede11de949f6bd252f00c6", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=2feb1f84d7f26dadd19811a81b33f7bf29065272", "patch": "@@ -1845,7 +1845,9 @@ package body Exp_Aggr is\n       procedure Init_Hidden_Discriminants (Typ : Entity_Id; List : List_Id);\n       --  If Typ is derived, and constrains discriminants of the parent type,\n       --  these discriminants are not components of the aggregate, and must be\n-      --  initialized. The assignments are appended to List.\n+      --  initialized. The assignments are appended to List. The same is done\n+      --  if Typ derives fron an already constrained subtype of a discriminated\n+      --  parent type.\n \n       function Get_Explicit_Discriminant_Value (D : Entity_Id) return Node_Id;\n       --  If the ancestor part is an unconstrained type and further ancestors\n@@ -2113,13 +2115,30 @@ package body Exp_Aggr is\n \n       begin\n          Btype := Base_Type (Typ);\n+\n+         --  The constraints on the hidden discriminants, if present, are\n+         --  kep in the Stored_Constraint list of the type itself, or in\n+         --  that of the base type.\n+\n          while Is_Derived_Type (Btype)\n-           and then Present (Stored_Constraint (Btype))\n+           and then (Present (Stored_Constraint (Btype))\n+             or else Present (Stored_Constraint (Typ)))\n          loop\n             Parent_Type := Etype (Btype);\n+            if not Has_Discriminants (Parent_Type) then\n+               return;\n+            end if;\n \n             Disc := First_Discriminant (Parent_Type);\n-            Discr_Val := First_Elmt (Stored_Constraint (Base_Type (Typ)));\n+\n+            --  We know that one of the stored-constraint lists is present.\n+\n+            if Present (Stored_Constraint (Btype)) then\n+               Discr_Val := First_Elmt (Stored_Constraint (Btype));\n+            else\n+               Discr_Val := First_Elmt (Stored_Constraint (Typ));\n+            end if;\n+\n             while Present (Discr_Val) loop\n \n                --  Only those discriminants of the parent that are not"}, {"sha": "d8f35c705558d2b79458fc407a340f286f759f7d", "filename": "gcc/ada/s-pack03.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack03.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack03.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack03.ads?ref=2feb1f84d7f26dadd19811a81b33f7bf29065272", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Handing of packed arrays with Component_Size = 3\n+--  Handling of packed arrays with Component_Size = 3\n \n package System.Pack_03 is\n    pragma Preelaborate;"}, {"sha": "a8cf24e842b6bf01900df722e0abe9289970ff32", "filename": "gcc/ada/s-pack06.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack06.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack06.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack06.adb?ref=2feb1f84d7f26dadd19811a81b33f7bf29065272", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -128,7 +128,6 @@ package body System.Pack_06 is\n \n    procedure Set_06 (Arr : System.Address; N : Natural; E : Bits_06) is\n       C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n-\n    begin\n       case N07 (Uns (N) mod 8) is\n          when 0 => C.E0 := E;\n@@ -148,7 +147,6 @@ package body System.Pack_06 is\n \n    procedure SetU_06 (Arr : System.Address; N : Natural; E : Bits_06) is\n       C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n-\n    begin\n       case N07 (Uns (N) mod 8) is\n          when 0 => C.E0 := E;"}, {"sha": "0fbd13ef962a99c36691aa7b695395d192374dc2", "filename": "gcc/ada/s-pack10.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack10.adb?ref=2feb1f84d7f26dadd19811a81b33f7bf29065272", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -128,7 +128,6 @@ package body System.Pack_10 is\n \n    procedure Set_10 (Arr : System.Address; N : Natural; E : Bits_10) is\n       C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n-\n    begin\n       case N07 (Uns (N) mod 8) is\n          when 0 => C.E0 := E;\n@@ -148,7 +147,6 @@ package body System.Pack_10 is\n \n    procedure SetU_10 (Arr : System.Address; N : Natural; E : Bits_10) is\n       C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n-\n    begin\n       case N07 (Uns (N) mod 8) is\n          when 0 => C.E0 := E;"}, {"sha": "d43cca14a24b75ebcdc8335089e2b8d251d66a4e", "filename": "gcc/ada/s-pack12.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack12.adb?ref=2feb1f84d7f26dadd19811a81b33f7bf29065272", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -128,7 +128,6 @@ package body System.Pack_12 is\n \n    procedure Set_12 (Arr : System.Address; N : Natural; E : Bits_12) is\n       C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n-\n    begin\n       case N07 (Uns (N) mod 8) is\n          when 0 => C.E0 := E;\n@@ -148,7 +147,6 @@ package body System.Pack_12 is\n \n    procedure SetU_12 (Arr : System.Address; N : Natural; E : Bits_12) is\n       C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n-\n    begin\n       case N07 (Uns (N) mod 8) is\n          when 0 => C.E0 := E;"}, {"sha": "aecd6f089cda922ddeb29ad44f2858001ed68566", "filename": "gcc/ada/s-pack14.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack14.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack14.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack14.ads?ref=2feb1f84d7f26dadd19811a81b33f7bf29065272", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Handing of packed arrays with Component_Size = 14\n+--  Handling of packed arrays with Component_Size = 14\n \n package System.Pack_14 is\n    pragma Preelaborate;"}, {"sha": "3d927c27e64f9840682ade3ee0329251dc928a19", "filename": "gcc/ada/s-pack25.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack25.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fs-pack25.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack25.adb?ref=2feb1f84d7f26dadd19811a81b33f7bf29065272", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -77,7 +77,6 @@ package body System.Pack_25 is\n \n    function Get_25 (Arr : System.Address; N : Natural) return Bits_25 is\n       C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n-\n    begin\n       case N07 (Uns (N) mod 8) is\n          when 0 => return C.E0;\n@@ -97,7 +96,6 @@ package body System.Pack_25 is\n \n    procedure Set_25 (Arr : System.Address; N : Natural; E : Bits_25) is\n       C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n-\n    begin\n       case N07 (Uns (N) mod 8) is\n          when 0 => C.E0 := E;"}, {"sha": "a741cfffd4d9a3ddea160c7a6afb3ea01dbddcca", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=2feb1f84d7f26dadd19811a81b33f7bf29065272", "patch": "@@ -1283,10 +1283,19 @@ package body Sem_Ch13 is\n                --  the proper insertion point. As a result the order of pragmas\n                --  is the same as the order of aspects.\n \n+               --  As precondition pragmas generated from conjuncts in the\n+               --  precondition aspect are presented in reverse order to\n+               --  Insert_Pragma, insert them in the correct order here by not\n+               --  skipping previously inserted precondition pragmas when the\n+               --  current pragma is a precondition.\n+\n                Decl := First (Declarations (N));\n                while Present (Decl) loop\n                   if Nkind (Decl) = N_Pragma\n                     and then From_Aspect_Specification (Decl)\n+                    and then not (Get_Pragma_Id (Decl) = Pragma_Precondition\n+                                    and then\n+                                  Get_Pragma_Id (Prag) = Pragma_Precondition)\n                   then\n                      Next (Decl);\n                   else"}, {"sha": "0e5c2e4e50fa17375ae820c3e38ece5a1e271d7e", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2feb1f84d7f26dadd19811a81b33f7bf29065272/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=2feb1f84d7f26dadd19811a81b33f7bf29065272", "patch": "@@ -1830,28 +1830,28 @@ package body Sem_Ch8 is\n       --  type with unknown discriminants and a generic primitive operation of\n       --  the said type with a box require special processing when the actual\n       --  is a class-wide type:\n-\n+      --\n       --    generic\n       --       type Formal_Typ (<>) is private;\n       --       with procedure Prim_Op (Param : Formal_Typ) is <>;\n       --    package Gen is ...\n-\n+      --\n       --    package Inst is new Gen (Actual_Typ'Class);\n-\n+      --\n       --  In this case the general renaming mechanism used in the prologue of\n       --  an instance no longer applies:\n-\n+      --\n       --    procedure Prim_Op (Param : Formal_Typ) renames Prim_Op;\n-\n+      --\n       --  The above is replaced the following wrapper/renaming combination:\n-\n+      --\n       --    procedure Prim_Op (Param : Formal_Typ) is  --  wrapper\n       --    begin\n       --       Prim_Op (Param);                        --  primitive\n       --    end Wrapper;\n-\n+      --\n       --    procedure Dummy (Param : Formal_Typ) renames Prim_Op;\n-\n+      --\n       --  This transformation applies only if there is no explicit visible\n       --  class-wide operation at the point of the instantiation. Ren_Id is\n       --  the entity of the renaming declaration. Wrap_Id is the entity of\n@@ -1937,7 +1937,6 @@ package body Sem_Ch8 is\n             while Present (Formal) loop\n                Append_To (Actuals,\n                  Make_Identifier (Loc, Chars (Defining_Identifier (Formal))));\n-\n                Next (Formal);\n             end loop;\n "}]}