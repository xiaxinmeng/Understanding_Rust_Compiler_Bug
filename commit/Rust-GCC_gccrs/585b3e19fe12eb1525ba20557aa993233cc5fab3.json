{"sha": "585b3e19fe12eb1525ba20557aa993233cc5fab3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg1YjNlMTlmZTEyZWIxNTI1YmEyMDU1N2FhOTkzMjMzY2M1ZmFiMw==", "commit": {"author": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T05:25:11Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T05:25:11Z"}, "message": "graphite-clast-to-gimple.c (find_pbb_via_hash): Moved up.\n\n2009-10-26  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-clast-to-gimple.c (find_pbb_via_hash): Moved up.\n\t(dependency_in_loop_p): Same.\n\t(translate_clast): Do not use loop->aux.  Initialize\n\tloop->can_be_parallel.\n\t(mark_loops_parallel): Removed.\n\t* graphite-clast-to-gimple.h (mark_loops_parallel): Removed.\n\t* graphite.c (free_aux_in_new_loops): Removed.\n\t(graphite_finalize): Do not call free_aux_in_new_loops.\n\t(graphite_transform_loops): Do not call mark_loops_parallel.\n\nFrom-SVN: r154626", "tree": {"sha": "e216bf86e80a13ccd85934cc211f8b54318dcb81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e216bf86e80a13ccd85934cc211f8b54318dcb81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/585b3e19fe12eb1525ba20557aa993233cc5fab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585b3e19fe12eb1525ba20557aa993233cc5fab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/585b3e19fe12eb1525ba20557aa993233cc5fab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585b3e19fe12eb1525ba20557aa993233cc5fab3/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7ed27aca8d66e927c33e0338818210ffa866828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ed27aca8d66e927c33e0338818210ffa866828", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ed27aca8d66e927c33e0338818210ffa866828"}], "stats": {"total": 186, "additions": 82, "deletions": 104}, "files": [{"sha": "4da7e865a051d69506ba99f8bf72582e46342fec", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b3e19fe12eb1525ba20557aa993233cc5fab3/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b3e19fe12eb1525ba20557aa993233cc5fab3/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=585b3e19fe12eb1525ba20557aa993233cc5fab3", "patch": "@@ -1,4 +1,16 @@\n-2009-10-20  Li Feng  <nemokingdom@gmail.com>\n+2009-10-26  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-clast-to-gimple.c (find_pbb_via_hash): Moved up.\n+\t(dependency_in_loop_p): Same.\n+\t(translate_clast): Do not use loop->aux.  Initialize\n+\tloop->can_be_parallel.\n+\t(mark_loops_parallel): Removed.\n+\t* graphite-clast-to-gimple.h (mark_loops_parallel): Removed.\n+\t* graphite.c (free_aux_in_new_loops): Removed.\n+\t(graphite_finalize): Do not call free_aux_in_new_loops.\n+\t(graphite_transform_loops): Do not call mark_loops_parallel.\n+\n+2009-10-26  Li Feng  <nemokingdom@gmail.com>\n \n \t* graphite-clast-to-gimple.c (get_stmtfor_depth): Removed.\n \t(translate_clast): Pass an extra parameter LEVEL."}, {"sha": "96fb4318e3956a3f1f1d723153d639e2e6990241", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 69, "deletions": 82, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b3e19fe12eb1525ba20557aa993233cc5fab3/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b3e19fe12eb1525ba20557aa993233cc5fab3/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=585b3e19fe12eb1525ba20557aa993233cc5fab3", "patch": "@@ -558,6 +558,60 @@ mark_bb_with_pbb (poly_bb_p pbb, basic_block bb, htab_t bb_pbb_mapping)\n     *x = new_bb_pbb_def (bb, pbb);\n }\n \n+/* Find BB's related poly_bb_p in hash table BB_PBB_MAPPING.  */\n+\n+static poly_bb_p\n+find_pbb_via_hash (htab_t bb_pbb_mapping, basic_block bb)\n+{\n+  bb_pbb_def tmp;\n+  PTR *slot;\n+\n+  tmp.bb = bb;\n+  slot = htab_find_slot (bb_pbb_mapping, &tmp, NO_INSERT);\n+\n+  if (slot && *slot)\n+    return ((bb_pbb_def *) *slot)->pbb;\n+\n+  return NULL;\n+}\n+\n+/* Check data dependency in LOOP at scattering level LEVEL.\n+   BB_PBB_MAPPING is a basic_block and it's related poly_bb_p\n+   mapping.  */\n+\n+static bool\n+dependency_in_loop_p (loop_p loop, htab_t bb_pbb_mapping, int level)\n+{\n+  unsigned i,j;\n+  basic_block *bbs = get_loop_body_in_dom_order (loop);\n+\n+  for (i = 0; i < loop->num_nodes; i++)\n+    {\n+      poly_bb_p pbb1 = find_pbb_via_hash (bb_pbb_mapping, bbs[i]);\n+\n+      if (pbb1 == NULL)\n+       continue;\n+\n+      for (j = 0; j < loop->num_nodes; j++)\n+       {\n+\t poly_bb_p pbb2 = find_pbb_via_hash (bb_pbb_mapping, bbs[j]);\n+\n+\t if (pbb2 == NULL)\n+\t   continue;\n+\n+\t if (dependency_between_pbbs_p (pbb1, pbb2, level))\n+\t   {\n+\t     free (bbs);\n+\t     return true;\n+\t   }\n+       }\n+    }\n+\n+  free (bbs);\n+\n+  return false;\n+}\n+\n /* Translates a CLAST statement STMT to GCC representation in the\n    context of a SESE.\n \n@@ -617,10 +671,6 @@ translate_clast (sese region, struct loop *context_loop,\n       edge to_body = single_succ_edge (loop->header);\n       basic_block after = to_body->dest;\n \n-      loop->aux = XNEW (int);\n-      /* Pass scattering level information of the new loop by LOOP->AUX.  */\n-      *((int *)(loop->aux)) = get_scattering_level (level);\n-\n       /* Create a basic block for loop close phi nodes.  */\n       last_e = single_succ_edge (split_edge (last_e));\n \n@@ -636,6 +686,11 @@ translate_clast (sese region, struct loop *context_loop,\n \t defined in loop's body.  */\n       insert_loop_close_phis (rename_map, loop);\n \n+      if (flag_loop_parallelize_all\n+\t  && !dependency_in_loop_p (loop, bb_pbb_mapping,\n+\t\t\t\t    get_scattering_level (level)))\n+\tloop->can_be_parallel = true;\n+\n       recompute_all_dominators ();\n       graphite_verify ();\n       return translate_clast (region, context_loop, stmt->next, last_e,\n@@ -1154,89 +1209,21 @@ gloog (scop_p scop, htab_t bb_pbb_mapping)\n   cloog_program_free (pc.prog);\n   timevar_pop (TV_GRAPHITE_CODE_GEN);\n \n-  return true;\n-}\n-\n-\f\n-\n-/* Find BB's related poly_bb_p in hash table BB_PBB_MAPPING.  */\n-\n-static poly_bb_p\n-find_pbb_via_hash (htab_t bb_pbb_mapping, basic_block bb)\n-{\n-  bb_pbb_def tmp;\n-  PTR *slot;\n-\n-  tmp.bb = bb;\n-  slot = htab_find_slot (bb_pbb_mapping, &tmp, NO_INSERT);\n-\n-  if (slot && *slot)\n-    return ((bb_pbb_def *) *slot)->pbb;\n-\n-  return NULL;\n-}\n-\n-/* Check data dependency in LOOP. BB_PBB_MAPPING is a basic_block and\n-   it's related poly_bb_p mapping.\n-*/\n-\n-static bool\n-dependency_in_loop_p (loop_p loop, htab_t bb_pbb_mapping)\n-{\n-  unsigned i,j;\n-  int level = 0;\n-  basic_block *bbs = get_loop_body_in_dom_order (loop);\n-\n-  level = *((int *)(loop->aux));\n-\n-  for (i = 0; i < loop->num_nodes; i++)\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      poly_bb_p pbb1 = find_pbb_via_hash (bb_pbb_mapping, bbs[i]);\n-\n-      if (pbb1 == NULL)\n-       continue;\n-\n-      for (j = 0; j < loop->num_nodes; j++)\n-       {\n-\t poly_bb_p pbb2 = find_pbb_via_hash (bb_pbb_mapping, bbs[j]);\n+      loop_p loop;\n+      loop_iterator li;\n+      int num_no_dependency = 0;\n \n-\t if (pbb2 == NULL)\n-\t   continue;\n+      FOR_EACH_LOOP (li, loop, 0)\n+\tif (loop->can_be_parallel)\n+\t  num_no_dependency++;\n \n-\t if (dependency_between_pbbs_p (pbb1, pbb2, level))\n-\t   {\n-\t     free (bbs);\n-\t     return true;\n-\t   }\n-       }\n+      fprintf (dump_file, \"\\n%d loops carried no dependency.\\n\",\n+\t       num_no_dependency);\n     }\n \n-  free (bbs);\n-\n-  return false;\n-}\n-\n-/* Mark loop as parallel if data dependency does not exist.\n-   BB_PBB_MAPPING is a basic_block and it's related poly_bb_p mapping.\n-*/\n-\n-void mark_loops_parallel (htab_t bb_pbb_mapping)\n-{\n-  loop_p loop;\n-  loop_iterator li;\n-  int num_no_dependency = 0;\n-\n-  FOR_EACH_LOOP (li, loop, 0)\n-    if (loop->aux\n-\t&& !dependency_in_loop_p (loop, bb_pbb_mapping))\n-      {\n-\tloop->can_be_parallel = true;\n-\tnum_no_dependency++;\n-      }\n-\n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"\\n%d loops carried no dependency.\\n\",\n-\t     num_no_dependency);\n+  return true;\n }\n \n #endif"}, {"sha": "85fb5e1f34dc1c6f570cf2a703abb6f6a26dc399", "filename": "gcc/graphite-clast-to-gimple.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b3e19fe12eb1525ba20557aa993233cc5fab3/gcc%2Fgraphite-clast-to-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b3e19fe12eb1525ba20557aa993233cc5fab3/gcc%2Fgraphite-clast-to-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.h?ref=585b3e19fe12eb1525ba20557aa993233cc5fab3", "patch": "@@ -41,7 +41,6 @@ extern cloog_prog_clast scop_to_clast (scop_p);\n extern void debug_clast_stmt (struct clast_stmt *);\n extern void print_clast_stmt (FILE *, struct clast_stmt *);\n extern void debug_clast_name_indexes (htab_t);\n-extern void mark_loops_parallel (htab_t);\n \n /* Hash function for data base element BB_PBB.  */\n "}, {"sha": "83d484aae561c5915f579efdefa0ffb133f57dbe", "filename": "gcc/graphite.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b3e19fe12eb1525ba20557aa993233cc5fab3/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b3e19fe12eb1525ba20557aa993233cc5fab3/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=585b3e19fe12eb1525ba20557aa993233cc5fab3", "patch": "@@ -220,22 +220,6 @@ graphite_initialize (void)\n   return true;\n }\n \n-/* Free loop->aux in newly created loops by translate_clast.  */\n-\n-static void\n-free_aux_in_new_loops (void)\n-{\n-  loop_p loop;\n-  loop_iterator li;\n-\n-  FOR_EACH_LOOP (li, loop, 0)\n-    if (loop->aux)\n-      {\n-\tfree (loop->aux);\n-\tloop->aux = NULL;\n-      }\n-}\n-\n /* Finalize graphite: perform CFG cleanup when NEED_CFG_CLEANUP_P is\n    true.  */\n \n@@ -252,7 +236,6 @@ graphite_finalize (bool need_cfg_cleanup_p)\n \n   cloog_finalize ();\n   free_original_copy_tables ();\n-  free_aux_in_new_loops ();\n \n   if (dump_file && dump_flags)\n     print_loops (dump_file, 3);\n@@ -302,9 +285,6 @@ graphite_transform_loops (void)\n \t}\n     }\n \n-  if (flag_loop_parallelize_all)\n-    mark_loops_parallel (bb_pbb_mapping);\n-\n   htab_delete (bb_pbb_mapping);\n   free_scops (scops);\n   graphite_finalize (need_cfg_cleanup_p);"}]}