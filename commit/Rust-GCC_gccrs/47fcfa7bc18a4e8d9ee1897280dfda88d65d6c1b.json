{"sha": "47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdmY2ZhN2JjMThhNGU4ZDllZTE4OTcyODBkZmRhODhkNjVkNmMxYg==", "commit": {"author": {"name": "Scott Snyder", "email": "snyder@fnal.gov", "date": "2003-11-17T17:48:59Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-11-17T17:48:59Z"}, "message": "re PR debug/11325 (nested class debug info missing)\n\n\n2003-11-17  Scott Snyder  <snyder@fnal.gov>\n\n\tPR debug/11325\n\t* dwarf2out.c (struct die_struct): Add die_definition field.\n\t(add_AT_specification): New.\n\t(gen_subprogram_die, gen_variable_die,\n\tgen_struct_or_union_type_die): Use it.\n\t(prune_unused_types_mark): If we're marking a forward declaration,\n\talso mark the full definition, if it exists.\n\nFrom-SVN: r73676", "tree": {"sha": "b68edd62ac1d5ba91c115def3f86a0fc35e308d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b68edd62ac1d5ba91c115def3f86a0fc35e308d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b/comments", "author": null, "committer": null, "parents": [{"sha": "6bbb4ad35e1eaf97bfd53675f39157e07af2999f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbb4ad35e1eaf97bfd53675f39157e07af2999f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bbb4ad35e1eaf97bfd53675f39157e07af2999f"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "8ab81d746412e509730e791168dd36089cec526c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b", "patch": "@@ -1,3 +1,13 @@\n+2003-11-17  Scott Snyder  <snyder@fnal.gov>\n+\n+\tPR debug/11325\n+\t* dwarf2out.c (struct die_struct): Add die_definition field.\n+\t(add_AT_specification): New.\n+\t(gen_subprogram_die, gen_variable_die,\n+\tgen_struct_or_union_type_die): Use it.\n+\t(prune_unused_types_mark): If we're marking a forward declaration,\n+\talso mark the full definition, if it exists.\n+\n 2003-11-16  Nick Clifton  <nickc@redhat.com>\n \n \t* config/stormy16/stormy16.h (BUILD_VA_LIST_TYPE): Delete."}, {"sha": "7db16217b52f8ab56447abc39374049e6162c4de", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=47fcfa7bc18a4e8d9ee1897280dfda88d65d6c1b", "patch": "@@ -3332,6 +3332,7 @@ typedef struct die_struct GTY(())\n   dw_die_ref die_parent;\n   dw_die_ref die_child;\n   dw_die_ref die_sib;\n+  dw_die_ref die_definition; /* ref from a specification to its definition */\n   dw_offset die_offset;\n   unsigned long die_abbrev;\n   int die_mark;\n@@ -3599,6 +3600,7 @@ static void add_AT_string (dw_die_ref, enum dwarf_attribute, const char *);\n static inline const char *AT_string (dw_attr_ref);\n static int AT_string_form (dw_attr_ref);\n static void add_AT_die_ref (dw_die_ref, enum dwarf_attribute, dw_die_ref);\n+static void add_AT_specification (dw_die_ref, dw_die_ref);\n static inline dw_die_ref AT_ref (dw_attr_ref);\n static inline int AT_ref_external (dw_attr_ref);\n static inline void set_AT_ref_external (dw_attr_ref, int);\n@@ -4664,6 +4666,18 @@ add_AT_die_ref (dw_die_ref die, enum dwarf_attribute attr_kind, dw_die_ref targ_\n   add_dwarf_attr (die, attr);\n }\n \n+/* Add an AT_specification attribute to a DIE, and also make the back\n+   pointer from the specification to the definition. */\n+\n+static inline void\n+add_AT_specification (dw_die_ref die, dw_die_ref targ_die)\n+{\n+  add_AT_die_ref (die, DW_AT_specification, targ_die);\n+  if (targ_die->die_definition)\n+    abort ();\n+  targ_die->die_definition = die;\n+}\n+\n static inline dw_die_ref\n AT_ref (dw_attr_ref a)\n {\n@@ -10629,7 +10643,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       else\n \t{\n \t  subr_die = new_die (DW_TAG_subprogram, context_die, decl);\n-\t  add_AT_die_ref (subr_die, DW_AT_specification, old_die);\n+\t  add_AT_specification (subr_die, old_die);\n \t  if (get_AT_unsigned (old_die, DW_AT_decl_file) != file_index)\n \t    add_AT_unsigned (subr_die, DW_AT_decl_file, file_index);\n \t  if (get_AT_unsigned (old_die, DW_AT_decl_line)\n@@ -10849,7 +10863,7 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n \t   && get_AT_flag (old_die, DW_AT_declaration) == 1)\n     {\n       /* This is a definition of a C++ class level static.  */\n-      add_AT_die_ref (var_die, DW_AT_specification, old_die);\n+      add_AT_specification (var_die, old_die);\n       if (DECL_NAME (decl))\n \t{\n \t  unsigned file_index = lookup_filename (DECL_SOURCE_FILE (decl));\n@@ -11295,7 +11309,7 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die)\n \t\t\t  scope_die, type);\n       equate_type_number_to_die (type, type_die);\n       if (old_die)\n-\tadd_AT_die_ref (type_die, DW_AT_specification, old_die);\n+\tadd_AT_specification (type_die, old_die);\n       else\n \tadd_name_attribute (type_die, type_tag (type));\n     }\n@@ -12504,6 +12518,11 @@ prune_unused_types_mark (dw_die_ref die, int dokids)\n \n       /* Mark any referenced nodes.  */\n       prune_unused_types_walk_attribs (die);\n+\n+      /* If this node is a specification,\n+         also mark the definition, if it exists. */\n+      if (get_AT_flag (die, DW_AT_declaration) && die->die_definition)\n+        prune_unused_types_mark (die->die_definition, 1);\n     }\n \n   if (dokids && die->die_mark != 2)"}]}