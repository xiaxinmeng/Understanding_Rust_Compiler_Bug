{"sha": "eb7062cf8413f9cca68e2befff6ca7559988a688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3MDYyY2Y4NDEzZjljY2E2OGUyYmVmZmY2Y2E3NTU5OTg4YTY4OA==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2013-04-16T08:49:51Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2013-04-16T08:49:51Z"}, "message": "Enable java for aarch64\n\n\t* configure.ac (aarch64-*-*): Don't disable java.\n\t* configure: Regenerate.\n\nlibjava/:\n\t* configure.host: Add support for aarch64.\n\t* sysdep/aarch64/locks.h: New file.\n\nlibjava/classpath/:\n\t* native/fdlibm/ieeefp.h: Add support for aarch64.\n\nFrom-SVN: r197997", "tree": {"sha": "455663fac0d584b5dabfb32a8240876ca99f005c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/455663fac0d584b5dabfb32a8240876ca99f005c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb7062cf8413f9cca68e2befff6ca7559988a688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7062cf8413f9cca68e2befff6ca7559988a688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb7062cf8413f9cca68e2befff6ca7559988a688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb7062cf8413f9cca68e2befff6ca7559988a688/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c8af8586d16a6d63fef6956a583d323c467d3de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8af8586d16a6d63fef6956a583d323c467d3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c8af8586d16a6d63fef6956a583d323c467d3de"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "965e227cc7af38f5440d6ca797817da33cf6809d", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7062cf8413f9cca68e2befff6ca7559988a688/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7062cf8413f9cca68e2befff6ca7559988a688/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=eb7062cf8413f9cca68e2befff6ca7559988a688", "patch": "@@ -1,3 +1,8 @@\n+2013-04-16  Andreas Schwab  <schwab@suse.de>\n+\n+\t* configure.ac (aarch64-*-*): Don't disable java.\n+\t* configure: Regenerate.\n+\n 2013-04-10  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "e161cada19ea5ed270691d4172d4138675e84d14", "filename": "configure", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7062cf8413f9cca68e2befff6ca7559988a688/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7062cf8413f9cca68e2befff6ca7559988a688/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=eb7062cf8413f9cca68e2befff6ca7559988a688", "patch": "@@ -3272,6 +3272,8 @@ esac\n \n # Disable Java if libffi is not supported.\n case \"${target}\" in\n+  aarch64-*-*)\n+    ;;\n   alpha*-*-*)\n     ;;\n   arm*-*-*)"}, {"sha": "bec489fc39518a9113cc31f29f55eb60bb62f0e5", "filename": "configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7062cf8413f9cca68e2befff6ca7559988a688/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7062cf8413f9cca68e2befff6ca7559988a688/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=eb7062cf8413f9cca68e2befff6ca7559988a688", "patch": "@@ -611,6 +611,8 @@ esac\n \n # Disable Java if libffi is not supported.\n case \"${target}\" in\n+  aarch64-*-*)\n+    ;;\n   alpha*-*-*)\n     ;;\n   arm*-*-*)"}, {"sha": "ba3bd57a4a61ec48f58ec662c577ca7f17e9bb3e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7062cf8413f9cca68e2befff6ca7559988a688/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7062cf8413f9cca68e2befff6ca7559988a688/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=eb7062cf8413f9cca68e2befff6ca7559988a688", "patch": "@@ -1,3 +1,8 @@\n+2013-04-16  Andreas Schwab  <schwab@suse.de>\n+\n+\t* configure.host: Add support for aarch64.\n+\t* sysdep/aarch64/locks.h: New file.\n+\n 2013-03-12  Andrew John Hughes  <gnu.andrew@redhat.com>\n \n \t* include/posix-threads.h:"}, {"sha": "63955543ca898f937f57d7e6f1d3b337fffdd8b8", "filename": "libjava/classpath/ChangeLog.gcj", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7062cf8413f9cca68e2befff6ca7559988a688/libjava%2Fclasspath%2FChangeLog.gcj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7062cf8413f9cca68e2befff6ca7559988a688/libjava%2Fclasspath%2FChangeLog.gcj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog.gcj?ref=eb7062cf8413f9cca68e2befff6ca7559988a688", "patch": "@@ -1,3 +1,7 @@\n+2013-04-16  Andreas Schwab  <schwab@suse.de>\n+\n+\t* native/fdlibm/ieeefp.h: Add support for aarch64.\n+\n 2013-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/56258"}, {"sha": "7ef2ae7e8b70e68fe0e13e33bd63b72b58d82d90", "filename": "libjava/classpath/native/fdlibm/ieeefp.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7062cf8413f9cca68e2befff6ca7559988a688/libjava%2Fclasspath%2Fnative%2Ffdlibm%2Fieeefp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7062cf8413f9cca68e2befff6ca7559988a688/libjava%2Fclasspath%2Fnative%2Ffdlibm%2Fieeefp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fnative%2Ffdlibm%2Fieeefp.h?ref=eb7062cf8413f9cca68e2befff6ca7559988a688", "patch": "@@ -4,6 +4,14 @@\n #ifndef __IEEE_BIG_ENDIAN\n #ifndef __IEEE_LITTLE_ENDIAN\n \n+#ifdef __aarch64__\n+#ifdef __AARCH64EB__\n+#define __IEEE_BIG_ENDIAN\n+#else\n+#define __IEEE_LITTLE_ENDIAN\n+#endif\n+#endif\n+\n #ifdef __alpha__\n #define __IEEE_LITTLE_ENDIAN\n #endif"}, {"sha": "f2d1bb5ed3b53050a6226ae811ab43056484c246", "filename": "libjava/configure.host", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7062cf8413f9cca68e2befff6ca7559988a688/libjava%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7062cf8413f9cca68e2befff6ca7559988a688/libjava%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.host?ref=eb7062cf8413f9cca68e2befff6ca7559988a688", "patch": "@@ -81,6 +81,11 @@ ATOMICSPEC=\n \n # This case statement supports per-CPU defaults.\n case \"${host}\" in\n+  aarch64*-linux*)\n+\tlibgcj_interpreter=yes\n+\tsysdeps_dir=aarch64\n+\tATOMICSPEC=-fuse-atomic-builtins\n+\t;;\n   arm*-elf)\n \twith_libffi_default=no\n \tPROCESS=Ecos\n@@ -289,6 +294,12 @@ EOF\n \tsysdeps_dir=i386\n \tDIVIDESPEC=-f%{m32:no-}use-divide-subroutine\n \t;;\n+  aarch64*-linux* )\n+\tslow_pthread_self=no\n+\tcan_unwind_signal=no\n+\tCHECKREFSPEC=-fcheck-references\n+\tDIVIDESPEC=-fuse-divide-subroutine\n+\t;;\n   arm*-linux* )\n \tslow_pthread_self=no\n \tcan_unwind_signal=no"}, {"sha": "f91473d08c795a3292c73b0b39e870ac1e0fd0ec", "filename": "libjava/sysdep/aarch64/locks.h", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb7062cf8413f9cca68e2befff6ca7559988a688/libjava%2Fsysdep%2Faarch64%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb7062cf8413f9cca68e2befff6ca7559988a688/libjava%2Fsysdep%2Faarch64%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Faarch64%2Flocks.h?ref=eb7062cf8413f9cca68e2befff6ca7559988a688", "patch": "@@ -0,0 +1,57 @@\n+// locks.h - Thread synchronization primitives. AArch64 implementation.\n+\n+#ifndef __SYSDEP_LOCKS_H__\n+#define __SYSDEP_LOCKS_H__\n+\n+typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n+\t\t\t\t/* address.\t\t\t\t*/\n+\n+// Atomically replace *addr by new_val if it was initially equal to old.\n+// Return true if the comparison succeeded.\n+// Assumed to have acquire semantics, i.e. later memory operations\n+// cannot execute before the compare_and_swap finishes.\n+inline static bool\n+compare_and_swap(volatile obj_addr_t *addr,\n+                 obj_addr_t old,\n+                 obj_addr_t new_val)\n+{\n+  return __sync_bool_compare_and_swap(addr, old, new_val);\n+}\n+\n+// Set *addr to new_val with release semantics, i.e. making sure\n+// that prior loads and stores complete before this\n+// assignment.\n+inline static void\n+release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n+{\n+  __sync_synchronize();\n+  *addr = new_val;\n+}\n+\n+// Compare_and_swap with release semantics instead of acquire semantics.\n+// On many architecture, the operation makes both guarantees, so the\n+// implementation can be the same.\n+inline static bool\n+compare_and_swap_release(volatile obj_addr_t *addr,\n+\t\t\t obj_addr_t old,\n+\t\t\t obj_addr_t new_val)\n+{\n+  return __sync_bool_compare_and_swap(addr, old, new_val);\n+}\n+\n+// Ensure that subsequent instructions do not execute on stale\n+// data that was loaded from memory before the barrier.\n+inline static void\n+read_barrier()\n+{\n+  __sync_synchronize();\n+}\n+\n+// Ensure that prior stores to memory are completed with respect to other\n+// processors.\n+inline static void\n+write_barrier()\n+{\n+  __sync_synchronize();\n+}\n+#endif"}]}