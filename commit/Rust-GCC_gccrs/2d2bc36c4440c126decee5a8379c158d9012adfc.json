{"sha": "2d2bc36c4440c126decee5a8379c158d9012adfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQyYmMzNmM0NDQwYzEyNmRlY2VlNWE4Mzc5YzE1OGQ5MDEyYWRmYw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-06T05:48:38Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-21T04:48:31Z"}, "message": "Enable direct movement between gpr and mask registers in pass_reload.\n\nChangelog\ngcc/\n\t* config/i386/i386.c (inline_secondary_memory_needed):\n\tNo memory is needed between mask regs and gpr.\n\t(ix86_hard_regno_mode_ok): Add condition TARGET_AVX512F for\n\tmask regno.\n\t* config/i386/i386.h (enum reg_class): Add INT_MASK_REGS.\n\t(REG_CLASS_NAMES): Ditto.\n\t(REG_CLASS_CONTENTS): Ditto.\n\t* config/i386/i386.md: Exclude mask register in\n\tdefine_peephole2 which is avaiable only for gpr.\n\ngcc/testsuite/\n\t* gcc.target/i386/spill_to_mask-1.c: New tests.\n\t* gcc.target/i386/spill_to_mask-2.c: New tests.\n\t* gcc.target/i386/spill_to_mask-3.c: New tests.\n\t* gcc.target/i386/spill_to_mask-4.c: New tests.", "tree": {"sha": "3a5799bf1bcb9418d74e9b9fac6939a07ee62d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a5799bf1bcb9418d74e9b9fac6939a07ee62d2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d2bc36c4440c126decee5a8379c158d9012adfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2bc36c4440c126decee5a8379c158d9012adfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d2bc36c4440c126decee5a8379c158d9012adfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d2bc36c4440c126decee5a8379c158d9012adfc/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cb3494cab397b5655ab42fd69310883c12137c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cb3494cab397b5655ab42fd69310883c12137c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cb3494cab397b5655ab42fd69310883c12137c"}], "stats": {"total": 131, "additions": 128, "deletions": 3}, "files": [{"sha": "2025e6b305acf2fc81ef9cb3801c909806f42b83", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2d2bc36c4440c126decee5a8379c158d9012adfc", "patch": "@@ -18971,7 +18971,7 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n       if ((mode == P2QImode || mode == P2HImode))\n \treturn MASK_PAIR_REGNO_P(regno);\n \n-      return (VALID_MASK_REG_MODE (mode)\n+      return ((TARGET_AVX512F && VALID_MASK_REG_MODE (mode))\n \t      || (TARGET_AVX512BW\n \t\t  && VALID_MASK_AVX512BW_MODE (mode)));\n     }"}, {"sha": "852dd017aa4e2c9249040947b623e00fc0caaf39", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2d2bc36c4440c126decee5a8379c158d9012adfc", "patch": "@@ -1418,6 +1418,7 @@ enum reg_class\n   FLOAT_INT_SSE_REGS,\n   MASK_REGS,\n   ALL_MASK_REGS,\n+  INT_MASK_REGS,\n   ALL_REGS,\n   LIM_REG_CLASSES\n };\n@@ -1477,6 +1478,7 @@ enum reg_class\n    \"FLOAT_INT_SSE_REGS\",\t\t\\\n    \"MASK_REGS\",\t\t\t\t\\\n    \"ALL_MASK_REGS\",\t\t\t\\\n+   \"INT_MASK_REGS\",\t\t\t\\\n    \"ALL_REGS\" }\n \n /* Define which registers fit in which classes.  This is an initializer\n@@ -1515,6 +1517,7 @@ enum reg_class\n  { 0xff9ffff, 0xfffffff0,   0xf },\t/* FLOAT_INT_SSE_REGS */\t\\\n        { 0x0,        0x0, 0xfe0 },\t/* MASK_REGS */\t\t\t\\\n        { 0x0,        0x0, 0xff0 },\t/* ALL_MASK_REGS */\t\t\\\n+   { 0x900ff,      0xff0, 0xff0 },\t/* INT_MASK_REGS */\t\\\n { 0xffffffff, 0xffffffff, 0xfff }\t/* ALL_REGS  */\t\t\t\\\n }\n "}, {"sha": "896b99a485728d27803d9b1c2e9640cf788efde4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2d2bc36c4440c126decee5a8379c158d9012adfc", "patch": "@@ -15026,7 +15026,7 @@\n ;; Replace zero_extend:HI followed by parityhi2_cmp with parityqi2_cmp\n (define_peephole2\n   [(set (match_operand:HI 0 \"register_operand\")\n-\t(zero_extend:HI (match_operand:QI 1 \"register_operand\")))\n+\t(zero_extend:HI (match_operand:QI 1 \"general_reg_operand\")))\n    (parallel [(set (reg:CC FLAGS_REG)\n \t\t   (unspec:CC [(match_dup 0)] UNSPEC_PARITY))\n \t      (clobber (match_dup 0))])]\n@@ -15037,7 +15037,7 @@\n ;; Eliminate QImode popcount&1 using parity flag\n (define_peephole2\n   [(set (match_operand:SI 0 \"register_operand\")\n-\t(zero_extend:SI (match_operand:QI 1 \"register_operand\")))\n+\t(zero_extend:SI (match_operand:QI 1 \"general_reg_operand\")))\n    (parallel [(set (match_operand:SI 2 \"register_operand\")\n \t\t   (popcount:SI (match_dup 0)))\n \t      (clobber (reg:CC FLAGS_REG))])"}, {"sha": "c5043e224ea16f04a33f7a2511c9f040bd7760e7", "filename": "gcc/testsuite/gcc.target/i386/spill_to_mask-1.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-1.c?ref=2d2bc36c4440c126decee5a8379c158d9012adfc", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512\" } */\n+\n+#ifndef DTYPE\n+#define DTYPE u32\n+#endif\n+\n+typedef unsigned long long u64;\n+typedef unsigned int u32;\n+typedef unsigned short u16;\n+typedef unsigned char u8;\n+\n+#define R(x,n) ( (x >> n) | (x << (32 - n)))\n+\n+#define S0(x) (R(x, 2) ^ R(x,13) ^ R(x,22))\n+#define S1(x) (R(x, 6) ^ R(x,11) ^ R(x,25))\n+\n+#define TT(a,b,c,d,e,f,g,h,x,K)                 \\\n+{                                                        \\\n+    tmp1 = h + S1(e) + (g ^ (e & (f ^ g))) + K + x;                \\\n+    tmp2 = S0(a) + ((a & b) | (c & (a | b)));                           \\\n+    h  = tmp1 + tmp2;                                    \\\n+    d += tmp1;                                           \\\n+}\n+\n+static inline DTYPE byteswap(DTYPE x)\n+{\n+\tx = (x & 0x0000FFFF) << 16 | (x & 0xFFFF0000) >> 16;\n+\tx = (x & 0x00FF00FF) << 8 | (x & 0xFF00FF00) >> 8;  \n+\treturn x;\n+}\n+\n+#define BE_LOAD32(n,b,i) (n) = byteswap(*(DTYPE *)(b + i))\n+\n+void foo (u8 *in, DTYPE out[8], const DTYPE C[16])\n+{\n+    DTYPE tmp1 = 0, tmp2 = 0, a, b, c, d, e, f, g, h;\n+    DTYPE w0, w1, w2, w3, w4, w5, w6, w7,\n+\tw8, w9, w10, w11, w12, w13, w14, w15;\n+    w0  = byteswap(*(DTYPE *)(in + 0));\n+    w1  = byteswap(*(DTYPE *)(in + 4));\n+    w2  = byteswap(*(DTYPE *)(in + 8));\n+    w3  = byteswap(*(DTYPE *)(in + 12));\n+    w4  = byteswap(*(DTYPE *)(in + 16));\n+    w5  = byteswap(*(DTYPE *)(in + 20));\n+    w6  = byteswap(*(DTYPE *)(in + 24));\n+    w7  = byteswap(*(DTYPE *)(in + 28));\n+    w8  = byteswap(*(DTYPE *)(in + 32));\n+    w9  = byteswap(*(DTYPE *)(in + 36));\n+    w10 = byteswap(*(DTYPE *)(in + 40));\n+    w11 = byteswap(*(DTYPE *)(in + 44));\n+    w12 = byteswap(*(DTYPE *)(in + 48));\n+    w13 = byteswap(*(DTYPE *)(in + 52));\n+    w14 = byteswap(*(DTYPE *)(in + 56));\n+    w15 = byteswap(*(DTYPE *)(in + 60));\n+    a = out[0];\n+    b = out[1];\n+    c = out[2];\n+    d = out[3];\n+    e = out[4];\n+    f = out[5];\n+    g = out[6];\n+    h = out[7];\n+\n+    TT(a, b, c, d, e, f, g, h,  w0, C[0]);\n+    TT(h, a, b, c, d, e, f, g,  w1, C[1]);\n+    TT(g, h, a, b, c, d, e, f,  w2, C[2]);\n+    TT(f, g, h, a, b, c, d, e,  w3, C[3]);\n+    TT(e, f, g, h, a, b, c, d,  w4, C[4]);\n+    TT(d, e, f, g, h, a, b, c,  w5, C[5]);\n+    TT(c, d, e, f, g, h, a, b,  w6, C[6]);\n+    TT(b, c, d, e, f, g, h, a,  w7, C[7]);\n+    TT(a, b, c, d, e, f, g, h,  w8, C[8]);\n+    TT(h, a, b, c, d, e, f, g,  w9, C[9]);\n+    TT(g, h, a, b, c, d, e, f, w10, C[10]);\n+    TT(f, g, h, a, b, c, d, e, w11, C[11]);\n+    TT(e, f, g, h, a, b, c, d, w12, C[12]);\n+    TT(d, e, f, g, h, a, b, c, w13, C[13]);\n+    TT(c, d, e, f, g, h, a, b, w14, C[14]);\n+    TT(b, c, d, e, f, g, h, a, w15, C[15]);\n+\n+    out[0] += a;\n+    out[1] += b;\n+    out[2] += c;\n+    out[3] += d;\n+    out[4] += e;\n+    out[5] += f;\n+    out[6] += g;\n+    out[7] += h;\n+}\n+\n+/* { dg-final { scan-assembler \"kmovd\" } } */"}, {"sha": "1f0c6b474d627bf3c2eac739be01c7574d74664d", "filename": "gcc/testsuite/gcc.target/i386/spill_to_mask-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-2.c?ref=2d2bc36c4440c126decee5a8379c158d9012adfc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512\" } */\n+\n+#ifndef DTYPE\n+#define DTYPE u16\n+#endif\n+\n+#include \"spill_to_mask-1.c\"\n+\n+/* { dg-final { scan-assembler \"kmovw\" } } */"}, {"sha": "5b59090c296116ac0633d19eef9679574bd328d3", "filename": "gcc/testsuite/gcc.target/i386/spill_to_mask-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-3.c?ref=2d2bc36c4440c126decee5a8379c158d9012adfc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=skylake-avx512\" } */\n+\n+#ifndef DTYPE\n+#define DTYPE u8\n+#endif\n+\n+#include \"spill_to_mask-1.c\"\n+\n+/* { dg-final { scan-assembler \"kmovb\" } } */"}, {"sha": "f111cf42b3624a7513be1943747e71365f488e6a", "filename": "gcc/testsuite/gcc.target/i386/spill_to_mask-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d2bc36c4440c126decee5a8379c158d9012adfc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspill_to_mask-4.c?ref=2d2bc36c4440c126decee5a8379c158d9012adfc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile  { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -march=skylake-avx512\" } */\n+\n+#ifndef DTYPE\n+#define DTYPE u64\n+#endif\n+\n+#include \"spill_to_mask-1.c\"\n+\n+/* { dg-final { scan-assembler \"kmovq\" } } */"}]}