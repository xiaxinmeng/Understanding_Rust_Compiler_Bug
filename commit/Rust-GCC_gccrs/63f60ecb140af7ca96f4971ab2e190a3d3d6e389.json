{"sha": "63f60ecb140af7ca96f4971ab2e190a3d3d6e389", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNmNjBlY2IxNDBhZjdjYTk2ZjQ5NzFhYjJlMTkwYTNkM2Q2ZTM4OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-21T21:35:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-21T21:35:44Z"}, "message": "Revert hunks not part of last patch.\n\nFrom-SVN: r65908", "tree": {"sha": "1c9acf32dbd8045dc53336c6ee3d6880e68d987f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9acf32dbd8045dc53336c6ee3d6880e68d987f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63f60ecb140af7ca96f4971ab2e190a3d3d6e389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f60ecb140af7ca96f4971ab2e190a3d3d6e389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63f60ecb140af7ca96f4971ab2e190a3d3d6e389", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f60ecb140af7ca96f4971ab2e190a3d3d6e389/comments", "author": null, "committer": null, "parents": [{"sha": "0d2f38ee4068f6d836a975f9e91663f72e17d93e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d2f38ee4068f6d836a975f9e91663f72e17d93e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d2f38ee4068f6d836a975f9e91663f72e17d93e"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "fa64fd2b956bb707b6404bbbe34444c5a07f4fd3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f60ecb140af7ca96f4971ab2e190a3d3d6e389/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f60ecb140af7ca96f4971ab2e190a3d3d6e389/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=63f60ecb140af7ca96f4971ab2e190a3d3d6e389", "patch": "@@ -4182,12 +4182,8 @@ extract_muldiv_1 (t, c, code, wide_type)\n       /* Pass the constant down and see if we can make a simplification.  If\n \t we can, replace this expression with the inner simplification for\n \t possible later conversion to our or some other type.  */\n-      if ((t2 = convert (TREE_TYPE (op0), c)) != 0\n-\t  && TREE_CODE (t2) == INTEGER_CST\n-\t  && ! TREE_CONSTANT_OVERFLOW (t2)\n-\t  && (0 != (t1 = extract_muldiv (op0, t2, code,\n-\t\t\t\t\t code == MULT_EXPR\n-\t\t\t\t\t ? ctype : NULL_TREE))))\n+      if (0 != (t1 = extract_muldiv (op0, convert (TREE_TYPE (op0), c), code,\n+\t\t\t\t     code == MULT_EXPR ? ctype : NULL_TREE)))\n \treturn t1;\n       break;\n \n@@ -5482,17 +5478,13 @@ fold (expr)\n \t      if (TREE_CODE (parg0) == MULT_EXPR\n \t\t  && TREE_CODE (parg1) != MULT_EXPR)\n \t\treturn fold (build (PLUS_EXPR, type,\n-\t\t\t\t    fold (build (PLUS_EXPR, type, \n-\t\t\t\t\t\t convert (type, parg0), \n-\t\t\t\t\t\t convert (type, marg))),\n-\t\t\t\t    convert (type, parg1)));\n+\t\t\t\t    fold (build (PLUS_EXPR, type, parg0, marg)),\n+\t\t\t\t    parg1));\n \t      if (TREE_CODE (parg0) != MULT_EXPR\n \t\t  && TREE_CODE (parg1) == MULT_EXPR)\n \t\treturn fold (build (PLUS_EXPR, type,\n-\t\t\t\t    fold (build (PLUS_EXPR, type, \n-\t\t\t\t\t\t convert (type, parg1), \n-\t\t\t\t\t\t convert (type, marg))),\n-\t\t\t\t    convert (type, parg0)));\n+\t\t\t\t    fold (build (PLUS_EXPR, type, parg1, marg)),\n+\t\t\t\t    parg0));\n \t    }\n \n \t  if (TREE_CODE (arg0) == MULT_EXPR && TREE_CODE (arg1) == MULT_EXPR)\n@@ -5824,8 +5816,7 @@ fold (expr)\n \t\t\t\tTREE_OPERAND (arg0, 1)));\n \n \t  if (TREE_CODE (arg1) == INTEGER_CST\n-\t      && 0 != (tem = extract_muldiv (TREE_OPERAND (t, 0),\n-\t\t\t\t\t     convert (type, arg1),\n+\t      && 0 != (tem = extract_muldiv (TREE_OPERAND (t, 0), arg1,\n \t\t\t\t\t     code, NULL_TREE)))\n \t    return convert (type, tem);\n "}]}