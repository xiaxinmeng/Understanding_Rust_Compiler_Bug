{"sha": "8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUyODQyOWE5Mzk1YzNjOWVkNThlNGFhYTdmNmQ4YjMyOTMxZjE4ZQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-07-05T07:01:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:01:49Z"}, "message": "[Ada] No_Stream_Optimizations ignored for 'Class'Input\n\nThis patch fixes a bug in which if pragma Restrictions\n(No_Stream_Optimizations) is in effect, it is ignored for T'Class'Input.\nRevision 251886  was causing the compiler to bypass\nNo_Stream_Optimizations.\n\n2019-07-05  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Input): Take the No_Stream_Optimizations\n\trestriction into account.\n\nFrom-SVN: r273103", "tree": {"sha": "fe3d084efb7bf0506c2d5933089dcd5c46538828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe3d084efb7bf0506c2d5933089dcd5c46538828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "584b52902b4b1bbcabc0e5bdd4196bd223d2f5a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584b52902b4b1bbcabc0e5bdd4196bd223d2f5a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584b52902b4b1bbcabc0e5bdd4196bd223d2f5a8"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "9f7ee9ddb6bf1c7181f9abc720a0924ac3163337", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e", "patch": "@@ -1,3 +1,8 @@\n+2019-07-05  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_attr.adb (Input): Take the No_Stream_Optimizations\n+\trestriction into account.\n+\n 2019-07-05  Claire Dross  <dross@adacore.com>\n \n \t* libgnat/a-cofove.ads, libgnat/a-cofove.adb: Definite formal"}, {"sha": "a4350cafaecf3e800fb556a62c38fdcde12c6df7", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=8e28429a9395c3c9ed58e4aaa7f6d8b32931f18e", "patch": "@@ -3997,11 +3997,13 @@ package body Exp_Attr is\n \n                declare\n                   Rtyp : constant Entity_Id := Root_Type (P_Type);\n-                  Expr : Node_Id;\n+                  Get_Tag : Node_Id; -- expression to read the 'Tag\n+                  Expr : Node_Id; -- call to Descendant_Tag\n \n                begin\n                   --  Read the internal tag (RM 13.13.2(34)) and use it to\n-                  --  initialize a dummy tag value. We used to generate:\n+                  --  initialize a dummy tag value. We used to unconditionally\n+                  --  generate:\n                   --\n                   --     Descendant_Tag (String'Input (Strm), P_Type);\n                   --\n@@ -4012,6 +4014,11 @@ package body Exp_Attr is\n                   --  String_Input_Blk_IO, except that if the String is\n                   --  absurdly long, it raises an exception.\n                   --\n+                  --  However, if the No_Stream_Optimizations restriction\n+                  --  is active, we disable this unnecessary attempt at\n+                  --  robustness; we really need to read the string\n+                  --  character-by-character.\n+                  --\n                   --  This value is used only to provide a controlling\n                   --  argument for the eventual _Input call. Descendant_Tag is\n                   --  called rather than Internal_Tag to ensure that we have a\n@@ -4026,18 +4033,30 @@ package body Exp_Attr is\n                   --  this constant in Cntrl, but this caused a secondary stack\n                   --  leak.\n \n+                  if Restriction_Active (No_Stream_Optimizations) then\n+                     Get_Tag :=\n+                       Make_Attribute_Reference (Loc,\n+                         Prefix         =>\n+                           New_Occurrence_Of (Standard_String, Loc),\n+                         Attribute_Name => Name_Input,\n+                         Expressions    => New_List (\n+                           Relocate_Node (Duplicate_Subexpr (Strm))));\n+                  else\n+                     Get_Tag :=\n+                       Make_Function_Call (Loc,\n+                         Name                   =>\n+                           New_Occurrence_Of\n+                             (RTE (RE_String_Input_Tag), Loc),\n+                         Parameter_Associations => New_List (\n+                           Relocate_Node (Duplicate_Subexpr (Strm))));\n+                  end if;\n+\n                   Expr :=\n                     Make_Function_Call (Loc,\n                       Name                   =>\n                         New_Occurrence_Of (RTE (RE_Descendant_Tag), Loc),\n                       Parameter_Associations => New_List (\n-                        Make_Function_Call (Loc,\n-                          Name                   =>\n-                            New_Occurrence_Of\n-                              (RTE (RE_String_Input_Tag), Loc),\n-                          Parameter_Associations => New_List (\n-                            Relocate_Node (Duplicate_Subexpr (Strm)))),\n-\n+                        Get_Tag,\n                         Make_Attribute_Reference (Loc,\n                           Prefix         => New_Occurrence_Of (P_Type, Loc),\n                           Attribute_Name => Name_Tag)));"}]}