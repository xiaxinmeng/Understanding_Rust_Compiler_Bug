{"sha": "6e9bd0f8983779325b34a9645c2634dafd14d3c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5YmQwZjg5ODM3NzkzMjViMzRhOTY0NWMyNjM0ZGFmZDE0ZDNjOQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2010-10-06T22:02:58Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2010-10-06T22:02:58Z"}, "message": "[PATCH] Report LTO phase in lto1 process name v2\n\nOn larger parallel WHOPR builds I find it useful to see in top which\nphase a given lto1 is in.\n\nSet the process name to lto1-wpa, lto1-ltrans, lto1-lto depending\non the current mode.\n\nThis is currently only implemented for Linux and only\nusing the \"comm\" process name, which is reported in top.\n\nv2: Moved function to libiberty, renamed setproctitle to match\nBSD. In theory it should pick up BSD's libc function for this\non a BSD system, but I haven't tested this.\n\ngcc/lto/\n\n2010-10-06  Andi Kleen <ak@linux.intel.com>\n\n\t* lto.c (lto_process_name): Add.\n\t(lto_main): Call lto_process_name.\n\ninclude/\n\n2010-10-06  Andi Kleen <ak@linux.intel.com>\n\n\t* libiberty.h (setproctitle): Add prototype.\n\nlibiberty/\n\n2010-10-06  Andi Kleen <ak@linux.intel.com>\n\n\t* Makefile.in (CFILES): Add setproctitle.\n\t(CONFIGURED_OFILES): Add setproctitle.\n\t(setproctitle): Add rule.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Add checks for prctl PR_SET_NAME and setproctitle.\n\t* setproctitle.c: Add file.\n\t* functions.texi: Regenerate.\n\nFrom-SVN: r165066", "tree": {"sha": "4b6b55c80051aa7deeeb8de1d0979f488e306b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b6b55c80051aa7deeeb8de1d0979f488e306b4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e9bd0f8983779325b34a9645c2634dafd14d3c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9bd0f8983779325b34a9645c2634dafd14d3c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9bd0f8983779325b34a9645c2634dafd14d3c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9bd0f8983779325b34a9645c2634dafd14d3c9/comments", "author": null, "committer": null, "parents": [{"sha": "826d817faeaa2549589553b276e4c71f83ce6dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826d817faeaa2549589553b276e4c71f83ce6dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826d817faeaa2549589553b276e4c71f83ce6dd7"}], "stats": {"total": 168, "additions": 155, "deletions": 13}, "files": [{"sha": "2bce315f225c5108916de1a4e3e2f66f334b97c4", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -1,3 +1,8 @@\n+2010-10-06  Andi Kleen <ak@linux.intel.com>\n+\n+\t* lto.c (lto_process_name): Add.\n+\t(lto_main): Call lto_process_name.\n+\n 2010-10-06  Jan Hubicka  <jh@suse.cz>\n \n \t* lto.c (partition_cgraph_node_p, partition_varpool_node_p): Handle"}, {"sha": "12fa613b3117f300346596dcb0a1f50665919d63", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -2379,6 +2379,18 @@ lto_eh_personality (void)\n   return lto_eh_personality_decl;\n }\n \n+/* Set the process name based on the LTO mode. */\n+\n+static void \n+lto_process_name (void)\n+{\n+  if (flag_lto)\n+    setproctitle (\"lto1-lto\");\n+  if (flag_wpa)\n+    setproctitle (\"lto1-wpa\");\n+  if (flag_ltrans)\n+    setproctitle (\"lto1-ltrans\");\n+}\n \n /* Main entry point for the GIMPLE front end.  This front end has\n    three main personalities:\n@@ -2403,6 +2415,8 @@ lto_eh_personality (void)\n void\n lto_main (int debug_p ATTRIBUTE_UNUSED)\n {\n+  lto_process_name ();\n+\n   lto_init_reader ();\n \n   /* Read all the symbols and call graph from all the files in the"}, {"sha": "3f4daa6ea40abe509c52a0171b11eb7a73b419c9", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -1,3 +1,7 @@\n+2010-10-06  Andi Kleen <ak@linux.intel.com>\n+\n+\t* libiberty.h (setproctitle): Add prototype.\n+\n 2010-09-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* dwarf2.h (DW_OP_GNU_implicit_pointer): New."}, {"sha": "f54ca18caa3df6f05076752dbb0c3d6a0d259bac", "filename": "include/libiberty.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -634,6 +634,9 @@ extern int vsnprintf (char *, size_t, const char *, va_list) ATTRIBUTE_PRINTF(3,\n extern int strverscmp (const char *, const char *);\n #endif\n \n+/* Set the title of a process */\n+extern void setproctitle (const char *name, ...);\n+\n #define ARRAY_SIZE(a) (sizeof (a) / sizeof ((a)[0]))\n \n /* Drastically simplified alloca configurator.  If we're using GCC,"}, {"sha": "931697500e7075e2be80443a8ca15779c0787146", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -1,3 +1,14 @@\n+2010-10-06  Andi Kleen <ak@linux.intel.com>\n+\n+\t* Makefile.in (CFILES): Add setproctitle.\n+\t(CONFIGURED_OFILES): Add setproctitle.\n+\t(setproctitle): Add rule.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Add checks for prctl PR_SET_NAME and setproctitle.\n+\t* setproctitle.c: Add file.\n+\t* functions.texi: Regenerate.\n+\n 2010-09-22 Tristan Gingold  <gingold@adacore.com>\n \n \t* cplus-dem.c (ada_demangle): Add comments."}, {"sha": "189325445599dc45410a15f4a5667261541ec79a", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -144,7 +144,8 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \t pex-unix.c pex-win32.c\t\t\t\t\t\t\\\n          physmem.c putenv.c\t\t\t\t\t\t\\\n \trandom.c regex.c rename.c rindex.c\t\t\t\t\\\n-\tsafe-ctype.c setenv.c sha1.c sigsetmask.c snprintf.c sort.c\t\\\n+\tsafe-ctype.c setenv.c setproctitle.c sha1.c sigsetmask.c        \\\n+         snprintf.c sort.c\t\t\t\t\t\t\\\n \t spaces.c splay-tree.c stpcpy.c stpncpy.c strcasecmp.c\t\t\\\n \t strchr.c strdup.c strerror.c strncasecmp.c strncmp.c\t\t\\\n \t strrchr.c strsignal.c strstr.c strtod.c strtol.c strtoul.c\t\\\n@@ -201,7 +202,9 @@ CONFIGURED_OFILES = ./asprintf.$(objext) ./atexit.$(objext)\t\t\\\n \t ./pex-unix.$(objext) ./pex-win32.$(objext)\t\t\t\\\n \t ./putenv.$(objext)\t\t\t\t\t\t\\\n \t./random.$(objext) ./rename.$(objext) ./rindex.$(objext)\t\\\n-\t./setenv.$(objext) ./sigsetmask.$(objext) ./snprintf.$(objext)\t\\\n+\t./setenv.$(objext) \t\t\t\t\t\t\\\n+\t ./setproctitle.$(objext)\t\t\t\t\t\\\n+\t ./sigsetmask.$(objext) ./snprintf.$(objext)\t\t\t\\\n \t ./stpcpy.$(objext) ./stpncpy.$(objext) ./strcasecmp.$(objext)\t\\\n \t ./strchr.$(objext) ./strdup.$(objext) ./strncasecmp.$(objext)\t\\\n \t ./strncmp.$(objext) ./strndup.$(objext) ./strrchr.$(objext)\t\\\n@@ -944,6 +947,12 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/setenv.c $(OUTPUT_OPTION)\n \n+./setproctitle.$(objext): $(srcdir)/setproctitle.c config.h $(INCDIR)/ansidecl.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/setproctitle.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/setproctitle.c $(OUTPUT_OPTION)\n+\n ./sha1.$(objext): $(srcdir)/sha1.c config.h $(INCDIR)/ansidecl.h $(INCDIR)/sha1.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/sha1.c -o pic/$@; \\"}, {"sha": "02d93dac8bf240a0e7a8e18a0acc90a195c67773", "filename": "libiberty/config.in", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -44,8 +44,8 @@\n    don't. */\n #undef HAVE_DECL_ASPRINTF\n \n-/* Define to 1 if you have the declaration of `basename', and to 0 if you\n-   don't. */\n+/* Define to 1 if you have the declaration of `basename(char *)', and to 0 if\n+   you don't. */\n #undef HAVE_DECL_BASENAME\n \n /* Define to 1 if you have the declaration of `calloc', and to 0 if you don't.\n@@ -154,9 +154,6 @@\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n-/* Define to 1 if you have the `mempcpy' function. */\n-#undef HAVE_MEMPCPY\n-\n /* Define to 1 if you have the `memset' function. */\n #undef HAVE_MEMSET\n \n@@ -169,6 +166,9 @@\n /* Define to 1 if you have the `on_exit' function. */\n #undef HAVE_ON_EXIT\n \n+/* Define if you have prctl PR_SET_NAME */\n+#undef HAVE_PRCTL_SET_NAME\n+\n /* Define to 1 if you have the `psignal' function. */\n #undef HAVE_PSIGNAL\n \n@@ -199,6 +199,9 @@\n /* Define to 1 if you have the `setenv' function. */\n #undef HAVE_SETENV\n \n+/* Define to 1 if you have the `setproctitle' function. */\n+#undef HAVE_SETPROCTITLE\n+\n /* Define to 1 if you have the `sigsetmask' function. */\n #undef HAVE_SIGSETMASK\n \n@@ -358,9 +361,6 @@\n /* Define to 1 if you have the `vprintf' function. */\n #undef HAVE_VPRINTF\n \n-/* Define to 1 if you have the `vsnprintf' function. */\n-#undef HAVE_VSNPRINTF\n-\n /* Define to 1 if you have the `vsprintf' function. */\n #undef HAVE_VSPRINTF\n "}, {"sha": "7ff7792440e50a504c765498e77eac9bc8bd69a9", "filename": "libiberty/configure", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -5276,6 +5276,7 @@ funcs=\"$funcs vprintf\"\n funcs=\"$funcs vsnprintf\"\n funcs=\"$funcs vsprintf\"\n funcs=\"$funcs waitpid\"\n+funcs=\"$funcs setproctitle\"\n \n # Also in the old function.def file: alloca, vfork, getopt.\n \n@@ -5298,7 +5299,8 @@ if test \"x\" = \"y\"; then\n     on_exit \\\n     psignal pstat_getdynamic pstat_getstatic putenv \\\n     random realpath rename rindex \\\n-    sbrk setenv sigsetmask snprintf stpcpy stpncpy strcasecmp strchr strdup \\\n+    sbrk setenv setproctitle sigsetmask snprintf stpcpy stpncpy strcasecmp strchr \\\n+    strdup \\\n      strerror strncasecmp strndup strrchr strsignal strstr strtod strtol \\\n      strtoul strverscmp sysconf sysctl sysmp \\\n     table times tmpnam \\\n@@ -5704,6 +5706,33 @@ fi\n \n \n \n+# check for prctl PR_SET_NAME\n+if test \"$cross_compiling\" = yes; then :\n+  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error \"cannot run test program while cross compiling\n+See \\`config.log' for more details.\" \"$LINENO\" 5; }\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <sys/prctl.h>\n+int main()\n+{\n+  return (prctl(PR_SET_NAME, \"foo\") == 0) ? 0 : 1;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+\n+$as_echo \"#define HAVE_PRCTL_SET_NAME 1\" >>confdefs.h\n+\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+fi\n+\n+\n case \"${host}\" in\n   *-*-cygwin* | *-*-mingw*)\n     $as_echo \"#define HAVE_SYS_ERRLIST 1\" >>confdefs.h"}, {"sha": "8b7be1835f4e7b114fff19dad72d273ece609c92", "filename": "libiberty/configure.ac", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -351,6 +351,7 @@ funcs=\"$funcs vprintf\"\n funcs=\"$funcs vsnprintf\"\n funcs=\"$funcs vsprintf\"\n funcs=\"$funcs waitpid\"\n+funcs=\"$funcs setproctitle\"\n \n # Also in the old function.def file: alloca, vfork, getopt.\n \n@@ -373,7 +374,8 @@ if test \"x\" = \"y\"; then\n     on_exit \\\n     psignal pstat_getdynamic pstat_getstatic putenv \\\n     random realpath rename rindex \\\n-    sbrk setenv sigsetmask snprintf stpcpy stpncpy strcasecmp strchr strdup \\\n+    sbrk setenv setproctitle sigsetmask snprintf stpcpy stpncpy strcasecmp strchr \\\n+    strdup \\\n      strerror strncasecmp strndup strrchr strsignal strstr strtod strtol \\\n      strtoul strverscmp sysconf sysctl sysmp \\\n     table times tmpnam \\\n@@ -533,6 +535,16 @@ fi\n AC_SUBST(CHECK)\n AC_SUBST(target_header_dir)\n \n+# check for prctl PR_SET_NAME\n+AC_RUN_IFELSE([AC_LANG_SOURCE([[\n+#include <sys/prctl.h>\n+int main()\n+{\n+  return (prctl(PR_SET_NAME, \"foo\") == 0) ? 0 : 1;\n+}\n+]])], AC_DEFINE(HAVE_PRCTL_SET_NAME, 1,\n+\t[Define if you have prctl PR_SET_NAME]))\n+\n case \"${host}\" in\n   *-*-cygwin* | *-*-mingw*)\n     AC_DEFINE(HAVE_SYS_ERRLIST)"}, {"sha": "e074ba716f8ed2321ab20eab7e3479a1d5ece5d6", "filename": "libiberty/functions.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -667,7 +667,7 @@ relative prefix can be found, return @code{NULL}.\n \n @end deftypefn\n \n-@c make-temp-file.c:168\n+@c make-temp-file.c:173\n @deftypefn Replacement char* make_temp_file (const char *@var{suffix})\n \n Return a temporary file name (as a string) or @code{NULL} if unable to\n@@ -1146,6 +1146,14 @@ environment.  This implementation is not safe for multithreaded code.\n \n @end deftypefn\n \n+@c setproctitle.c:30\n+@deftypefn Supplemental void setproctitle(const char *@var{fmt} ...)\n+\n+Set the title of a process to @var{fmt}. va args not supported for now,\n+but defined for compatibility with BSD. \n+\n+@end deftypefn\n+\n @c strsignal.c:348\n @deftypefn Extension int signo_max (void)\n "}, {"sha": "b176b41f949874417c6118859f3cf37811fbc6d0", "filename": "libiberty/setproctitle.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2Fsetproctitle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9bd0f8983779325b34a9645c2634dafd14d3c9/libiberty%2Fsetproctitle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsetproctitle.c?ref=6e9bd0f8983779325b34a9645c2634dafd14d3c9", "patch": "@@ -0,0 +1,47 @@\n+/* Set the title of a process.\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+#ifdef HAVE_PRCTL_SET_NAME\n+#include <sys/prctl.h>\n+#endif\n+#include \"ansidecl.h\"\n+\n+/*\n+\n+@deftypefn Supplemental void setproctitle(const char *@var{fmt} ...)\n+\n+Set the title of a process to @var{fmt}. va args not supported for now,\n+but defined for compatibility with BSD. \n+\n+@end deftypefn\n+\n+*/\n+\n+void\n+setproctitle (const char *name ATTRIBUTE_UNUSED, ...)\n+{\n+#ifdef HAVE_PRCTL_SET_NAME\n+  /* On Linux this sets the top visible \"comm\", but not necessarily\n+     the name visible in ps. */\n+  prctl (PR_SET_NAME, name);\n+#endif\n+}"}]}