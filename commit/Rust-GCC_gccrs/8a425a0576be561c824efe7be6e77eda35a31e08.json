{"sha": "8a425a0576be561c824efe7be6e77eda35a31e08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE0MjVhMDU3NmJlNTYxYzgyNGVmZTdiZTZlNzdlZGEzNWEzMWUwOA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-02-17T22:51:33Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-02-17T22:51:33Z"}, "message": "(IN_NAMED_SECTION): New macro.\n\n(named_section): New function.\n(enum in_section): New value `in_named'.\n(in_named_name): New global.\n(make_function_rtl, make_decl_rtl, output_constant_def): Fix comment\nregarding ASM_OUTPUT_LABELREF.\n(make_decl_rtl): Warn if section attribute used with uninitialized\nvariable declaration.\n(assemble_start_function, assemble_variable, output_constant_def):\nChange to named section if given.\n\nFrom-SVN: r6585", "tree": {"sha": "e8119e03dcb7c51707e70f757eb57e908ccc618b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8119e03dcb7c51707e70f757eb57e908ccc618b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a425a0576be561c824efe7be6e77eda35a31e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a425a0576be561c824efe7be6e77eda35a31e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a425a0576be561c824efe7be6e77eda35a31e08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a425a0576be561c824efe7be6e77eda35a31e08/comments", "author": null, "committer": null, "parents": [{"sha": "868e87899b12b97b41c5ecddb2cbf57c7da2cfe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868e87899b12b97b41c5ecddb2cbf57c7da2cfe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868e87899b12b97b41c5ecddb2cbf57c7da2cfe1"}], "stats": {"total": 104, "additions": 77, "deletions": 27}, "files": [{"sha": "c95911ba1bf11508e6cf7836fbfa0ca29b779838", "filename": "gcc/varasm.c", "status": "modified", "additions": 77, "deletions": 27, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a425a0576be561c824efe7be6e77eda35a31e08/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a425a0576be561c824efe7be6e77eda35a31e08/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=8a425a0576be561c824efe7be6e77eda35a31e08", "patch": "@@ -114,16 +114,25 @@ void output_byte_asm ();\n void text_section ();\n void readonly_data_section ();\n void data_section ();\n+void named_section ();\n static void bc_assemble_integer ();\n \f\n #ifdef EXTRA_SECTIONS\n-static enum in_section {no_section, in_text, in_data, EXTRA_SECTIONS} in_section\n+static enum in_section {no_section, in_text, in_data, in_named, EXTRA_SECTIONS} in_section\n   = no_section;\n #else\n-static enum in_section {no_section, in_text, in_data} in_section\n+static enum in_section {no_section, in_text, in_data, in_named} in_section\n   = no_section;\n #endif\n \n+/* Return a non-zero value if DECL has a section attribute.  */\n+#define IN_NAMED_SECTION(DECL) \\\n+  ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL) \\\n+   && DECL_SECTION_NAME (DECL) != NULL_TREE)\n+\n+/* Text of section name when in_section == in_named.  */\n+static char *in_named_name;\n+\n /* Define functions like text_section for any extra sections.  */\n #ifdef EXTRA_SECTION_FUNCTIONS\n EXTRA_SECTION_FUNCTIONS\n@@ -192,6 +201,28 @@ in_text_section ()\n {\n   return in_section == in_text;\n }\n+\n+/* Tell assembler to change to named section.  */\n+\n+void\n+named_section (name)\n+     char *name;\n+{\n+  if (in_section != in_named || strcmp (name, in_named_name))\n+    {\n+      in_named_name = name;\n+      in_section = in_named;\n+    \n+#ifdef ASM_OUTPUT_SECTION_NAME\n+      ASM_OUTPUT_SECTION_NAME (asm_out_file, name);\n+#else\n+      /* Section attributes are not supported if this macro isn't provided -\n+\t some host formats don't support them at all.  The front-end should\n+\t already have flagged this as an error.  */\n+      abort ();\n+#endif\n+    }\n+}\n \f\n /* Create the rtl to represent a function, for a function definition.\n    DECL is a FUNCTION_DECL node which describes which function.\n@@ -234,9 +265,7 @@ make_function_rtl (decl)\n \n       /* Optionally set flags or add text to the name to record information\n \t such as that it is a function name.  If the name is changed, the macro\n-\t ASM_OUTPUT_LABELREF will have to know how to strip this information.\n-\t And if it finds a * at the beginning after doing so, it must handle\n-\t that too.  */\n+\t ASM_OUTPUT_LABELREF will have to know how to strip this information.  */\n #ifdef ENCODE_SECTION_INFO\n       ENCODE_SECTION_INFO (decl);\n #endif\n@@ -462,6 +491,19 @@ make_decl_rtl (decl, asmspec, top_level)\n \t\tglobalize_reg (reg_number + --nregs);\n \t    }\n \t}\n+      /* Specifying a section attribute on an uninitialized variable does not\n+\t (and cannot) cause it to be put in the given section.  The linker\n+\t can only put initialized objects in specific sections, everything\n+\t else goes in bss for the linker to sort out later (otherwise the\n+\t linker would give a duplicate definition error for each compilation\n+\t unit that behaved thusly).  So warn the user.  */\n+      else if (TREE_CODE (decl) == VAR_DECL\n+\t       && DECL_SECTION_NAME (decl) != NULL_TREE\n+\t       && DECL_INITIAL (decl) == NULL_TREE)\n+\t{\n+\t  warning_with_decl (decl,\n+\t\t\t     \"section attribute ignored for uninitialized variable `%s'\");\n+\t}\n \n       /* Now handle ordinary static variables and functions (in memory).\n \t Also handle vars declared register invalidly.  */\n@@ -503,9 +545,7 @@ make_decl_rtl (decl, asmspec, top_level)\n \t  /* Optionally set flags or add text to the name to record information\n \t     such as that it is a function name.\n \t     If the name is changed, the macro ASM_OUTPUT_LABELREF\n-\t     will have to know how to strip this information.\n-\t     And if it finds a * at the beginning after doing so,\n-\t     it must handle that too.  */\n+\t     will have to know how to strip this information.  */\n #ifdef ENCODE_SECTION_INFO\n \t  ENCODE_SECTION_INFO (decl);\n #endif\n@@ -668,8 +708,10 @@ assemble_start_function (decl, fnname)\n \n   output_constant_pool (fnname, decl);\n \n-  text_section ();\n-\n+  if (IN_NAMED_SECTION (decl))\n+    named_section (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)));\n+  else\n+    text_section ();\n \n   /* Tell assembler to move to target machine's alignment for functions.  */\n   align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n@@ -1093,16 +1135,21 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n     reloc = output_addressed_constants (DECL_INITIAL (decl));\n \n   /* Switch to the proper section for this data.  */\n+  if (IN_NAMED_SECTION (decl))\n+    named_section (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)));\n+  else\n+    {\n #ifdef SELECT_SECTION\n-  SELECT_SECTION (decl, reloc);\n+      SELECT_SECTION (decl, reloc);\n #else\n-  if (TREE_READONLY (decl)\n-      && ! TREE_THIS_VOLATILE (decl)\n-      && ! (flag_pic && reloc))\n-    readonly_data_section ();\n-  else\n-    data_section ();\n+      if (TREE_READONLY (decl)\n+\t  && ! TREE_THIS_VOLATILE (decl)\n+\t  && ! (flag_pic && reloc))\n+\treadonly_data_section ();\n+      else\n+\tdata_section ();\n #endif\n+    }\n \n   /* dbxout.c needs to know this.  */\n   if (in_text_section ())\n@@ -2545,9 +2592,7 @@ output_constant_def (exp)\n \n   /* Optionally set flags or add text to the name to record information\n      such as that it is a function name.  If the name is changed, the macro\n-     ASM_OUTPUT_LABELREF will have to know how to strip this information.\n-     And if it finds a * at the beginning after doing so, it must handle\n-     that too.  */\n+     ASM_OUTPUT_LABELREF will have to know how to strip this information.  */\n #ifdef ENCODE_SECTION_INFO\n   ENCODE_SECTION_INFO (exp);\n #endif\n@@ -2588,16 +2633,21 @@ output_constant_def_contents (exp, reloc, labelno)\n {\n   int align;\n \n-  /* First switch to text section, except for writable strings.  */\n+  if (IN_NAMED_SECTION (exp))\n+    named_section (TREE_STRING_POINTER (DECL_SECTION_NAME (exp)));\n+  else\n+    {\n+      /* First switch to text section, except for writable strings.  */\n #ifdef SELECT_SECTION\n-  SELECT_SECTION (exp, reloc);\n+      SELECT_SECTION (exp, reloc);\n #else\n-  if (((TREE_CODE (exp) == STRING_CST) && flag_writable_strings)\n-      || (flag_pic && reloc))\n-    data_section ();\n-  else\n-    readonly_data_section ();\n+      if (((TREE_CODE (exp) == STRING_CST) && flag_writable_strings)\n+\t  || (flag_pic && reloc))\n+\tdata_section ();\n+      else\n+\treadonly_data_section ();\n #endif\n+    }\n \n   /* Align the location counter as required by EXP's data type.  */\n   align = TYPE_ALIGN (TREE_TYPE (exp));"}]}