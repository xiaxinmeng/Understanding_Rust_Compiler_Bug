{"sha": "7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U2ZWI2MjNmOTQ4ZGNhYWNhYjVlMTI1MWM5OWViYWRjMjcwYzNkNQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-06-12T00:18:35Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-06-12T00:18:35Z"}, "message": "[multiple changes]\n\n\n2004-06-11  Steven Bosscher <stevenb@suse.de>\n\n\t* tree-ssa-dce.c (mark_control_dependent_edges_necessary):\n\tDon't try to mark anything control dependent on the entry or\n\texit blocks.\n\n2004-06-11  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix Bug 15899\n\tFix Bug 15460\n\t* tree.h (SSA_NAME_VALUE): New macro.\n\t(struct tree_ssa_name): Add value_handle member.\n\t* tree-ssa-pre.c: Replaced.\n\t* tree-flow.h (tree_ann_type): Add CST_ANN, EXPR_ANN.\n\t(struct cst_ann_d): New.\n\t(struct expr_ann_d): New.\n\t(union tree_ann_d): Add cst_ann, expr_ann.\n\t* tree-dfa.c (create_cst_ann): New function.\n\t(create_expr_ann): Ditto.\n\t* tree-flow-inline.h (cst_ann): New function.\n\t(expr_ann): Ditto.\n\t(get_cst_ann): Ditto.\n\t(get_expr_ann): Ditto..\n\nFrom-SVN: r83010", "tree": {"sha": "ca99eaea2a64c9280cab7d983086bb2ab6db10a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca99eaea2a64c9280cab7d983086bb2ab6db10a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/comments", "author": null, "committer": null, "parents": [{"sha": "e4602cf33b4359a1a92ffff5749eaf3422600993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4602cf33b4359a1a92ffff5749eaf3422600993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4602cf33b4359a1a92ffff5749eaf3422600993"}], "stats": {"total": 4720, "additions": 1687, "deletions": 3033}, "files": [{"sha": "3c8371af274018717fefc33c2c5590b58a9a3510", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "patch": "@@ -1,3 +1,27 @@\n+2004-06-11  Steven Bosscher <stevenb@suse.de>\n+\n+\t* tree-ssa-dce.c (mark_control_dependent_edges_necessary):\n+\tDon't try to mark anything control dependent on the entry or\n+\texit blocks.\n+\n+2004-06-11  Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\tFix Bug 15899\n+\tFix Bug 15460\n+\t* tree.h (SSA_NAME_VALUE): New macro.\n+\t(struct tree_ssa_name): Add value_handle member.\n+\t* tree-ssa-pre.c: Replaced.\n+\t* tree-flow.h (tree_ann_type): Add CST_ANN, EXPR_ANN.\n+\t(struct cst_ann_d): New.\n+\t(struct expr_ann_d): New.\n+\t(union tree_ann_d): Add cst_ann, expr_ann.\n+\t* tree-dfa.c (create_cst_ann): New function.\n+\t(create_expr_ann): Ditto.\n+\t* tree-flow-inline.h (cst_ann): New function.\n+\t(expr_ann): Ditto.\n+\t(get_cst_ann): Ditto.\n+\t(get_expr_ann): Ditto..\n+\n 2004-06-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (pa_hpux_init_libfunc): Add support for unord_optab."}, {"sha": "8a5528b9054ed2fe0ea5917d99609bf918835109", "filename": "gcc/testsuite/gcc.c-torture/compile/20040611-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040611-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040611-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040611-1.c?ref=7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "patch": "@@ -0,0 +1,8 @@\n+/* This would cause PRE load motion to generate invalid code and ICE */\n+void foo (char *name)\n+{\n+  if (*name)\n+    name ++;\n+  while (name[0]);\n+  asm (\"\" : \"=r\" (name));\n+}"}, {"sha": "d3c9d42152e4163deab80975ce0e6aa35625a42b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-1.c?ref=7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "patch": "@@ -16,4 +16,4 @@ int main(int argc, char **argv)\n }\n /* We should eliminate one evaluation of b + c along the main path, \n    causing one reload. */\n-/* { dg-final { scan-tree-dump-times \"Reloads:1\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated:1\" 1 \"pre\"} } */"}, {"sha": "8326009fb7782a0069345a8f7c52b0621ad7c703", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-2.c?ref=7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "patch": "@@ -17,4 +17,4 @@ int motion_test1(int data, int data_0, int data_3, int v)\n }\n /* We should eliminate one computation of data_0 + data_3 along the \n    main path, causing one reload. */\n-/* { dg-final { scan-tree-dump-times \"Reloads:1\" 1 \"pre\"} } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated:1\" 1 \"pre\"} } */"}, {"sha": "869f6da78bcbb614dafb4297a78fcb9489a6479a", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "patch": "@@ -463,6 +463,52 @@ create_stmt_ann (tree t)\n }\n \n \n+/* Create a new annotation for a constant T.  */\n+\n+cst_ann_t\n+create_cst_ann (tree t)\n+{\n+  cst_ann_t ann;\n+\n+#if defined ENABLE_CHECKING\n+  if (t == NULL_TREE\n+      || (t->common.ann\n+\t  && t->common.ann->common.type != CST_ANN))\n+    abort ();\n+#endif\n+\n+  ann = ggc_alloc (sizeof (*ann));\n+  memset ((void *) ann, 0, sizeof (*ann));\n+\n+  ann->common.type = CST_ANN;\n+  t->common.ann = (tree_ann) ann;\n+\n+  return ann;\n+}\n+\n+/* Create a new annotation for an expression T.  */\n+\n+expr_ann_t\n+create_expr_ann (tree t)\n+{\n+  expr_ann_t ann;\n+\n+#if defined ENABLE_CHECKING\n+  if (t == NULL_TREE\n+      || (t->common.ann\n+\t  && t->common.ann->common.type != EXPR_ANN))\n+    abort ();\n+#endif\n+\n+  ann = ggc_alloc (sizeof (*ann));\n+  memset ((void *) ann, 0, sizeof (*ann));\n+\n+  ann->common.type = EXPR_ANN;\n+  t->common.ann = (tree_ann) ann;\n+\n+  return ann;\n+}\n+\n /* Build a temporary.  Make sure and register it to be renamed.  */\n \n tree"}, {"sha": "c8cf12c1eff00265166ed158b6468216eccfae28", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "patch": "@@ -46,6 +46,47 @@ get_var_ann (tree var)\n   return (ann) ? ann : create_var_ann (var);\n }\n \n+\n+static inline cst_ann_t\n+cst_ann (tree t)\n+{\n+#if defined ENABLE_CHECKING\n+  if (TREE_CODE_CLASS (TREE_CODE (t)) != 'c'\n+      || (t->common.ann\n+\t  && t->common.ann->common.type != CST_ANN))\n+    abort ();\n+#endif\n+\n+  return (cst_ann_t) t->common.ann;\n+}\n+\n+static inline cst_ann_t\n+get_cst_ann (tree var)\n+{\n+  cst_ann_t ann = cst_ann (var);\n+  return (ann) ? ann : create_cst_ann (var);\n+}\n+\n+static inline expr_ann_t\n+expr_ann (tree t)\n+{\n+#if defined ENABLE_CHECKING\n+  if (!EXPR_P (t)\n+      || (t->common.ann\n+\t  && t->common.ann->common.type != EXPR_ANN))\n+    abort ();\n+#endif\n+\n+  return (expr_ann_t) t->common.ann;\n+}\n+\n+static inline expr_ann_t\n+get_expr_ann (tree var)\n+{\n+  expr_ann_t ann = expr_ann (var);\n+  return (ann) ? ann : create_expr_ann (var);\n+}\n+\n static inline stmt_ann_t\n stmt_ann (tree t)\n {"}, {"sha": "4f3a4a6a99b15fb334d41df6730768842bf2b4f1", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "patch": "@@ -40,12 +40,15 @@ typedef struct basic_block_def *basic_block;\n /*---------------------------------------------------------------------------\n \t\t   Tree annotations stored in tree_common.ann\n ---------------------------------------------------------------------------*/\n-enum tree_ann_type { TREE_ANN_COMMON, VAR_ANN, STMT_ANN };\n+enum tree_ann_type { TREE_ANN_COMMON, VAR_ANN, CST_ANN, EXPR_ANN, STMT_ANN };\n \n struct tree_ann_common_d GTY(())\n {\n   /* Annotation type.  */\n   enum tree_ann_type type;\n+\n+  /* The value handle for this expression.  Used by GVN-PRE.  */\n+  tree GTY((skip)) value_handle;\n };\n \n /* It is advantageous to avoid things like life analysis for variables which\n@@ -164,6 +167,11 @@ struct var_ann_d GTY(())\n      live at the same time and this can happen for each call to the\n      dominator optimizer.  */\n   tree current_def;\n+\n+  /* The set of expressions represented by this variable if it is a\n+     value handle.  This is used by GVN-PRE.  */\n+  PTR GTY ((skip)) expr_set;\n+  \n };\n \n \n@@ -256,17 +264,38 @@ struct stmt_ann_d GTY(())\n };\n \n \n+struct cst_ann_d GTY (())\n+{\n+  struct tree_ann_common_d common;\n+  \n+};\n+\n+struct expr_ann_d GTY(())\n+{\n+  struct tree_ann_common_d common;\n+  \n+};\n+\n+\n union tree_ann_d GTY((desc (\"ann_type ((tree_ann)&%h)\")))\n {\n   struct tree_ann_common_d GTY((tag (\"TREE_ANN_COMMON\"))) common;\n   struct var_ann_d GTY((tag (\"VAR_ANN\"))) decl;\n+  struct expr_ann_d GTY((tag (\"EXPR_ANN\"))) expr;\n+  struct cst_ann_d GTY((tag (\"CST_ANN\"))) cst;\n   struct stmt_ann_d GTY((tag (\"STMT_ANN\"))) stmt;\n };\n \n typedef union tree_ann_d *tree_ann;\n typedef struct var_ann_d *var_ann_t;\n typedef struct stmt_ann_d *stmt_ann_t;\n+typedef struct expr_ann_d *expr_ann_t;\n+typedef struct cst_ann_d *cst_ann_t;\n \n+static inline cst_ann_t cst_ann (tree);\n+static inline cst_ann_t get_cst_ann (tree);\n+static inline expr_ann_t expr_ann (tree);\n+static inline expr_ann_t get_expr_ann (tree);\n static inline var_ann_t var_ann (tree);\n static inline var_ann_t get_var_ann (tree);\n static inline stmt_ann_t stmt_ann (tree);\n@@ -464,6 +493,8 @@ extern void dump_generic_bb (FILE *, basic_block, int, int);\n \n /* In tree-dfa.c  */\n extern var_ann_t create_var_ann (tree);\n+extern cst_ann_t create_cst_ann (tree);\n+extern expr_ann_t create_expr_ann (tree);\n extern stmt_ann_t create_stmt_ann (tree);\n extern tree create_phi_node (tree, basic_block);\n extern void add_phi_arg (tree *, tree, edge);\n@@ -567,6 +598,12 @@ extern bool tree_can_throw_internal (tree);\n extern bool tree_can_throw_external (tree);\n extern void add_stmt_to_eh_region (tree, int);\n \n+/* In tree-ssa-pre.c */\n+tree get_value_handle (tree);\n+void set_value_handle (tree, tree);\n+void debug_value_expressions (tree);\n+void print_value_expressions (FILE *, tree);\n+\n #include \"tree-flow-inline.h\"\n \n #endif /* _TREE_FLOW_H  */"}, {"sha": "36007a43c84cd2116135142f5345996db14d4883", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "patch": "@@ -482,6 +482,14 @@ mark_control_dependent_edges_necessary (basic_block bb, struct edge_list *el)\n {\n   int edge_number;\n \n+#ifdef ENABLE_CHECKING\n+  if (bb == EXIT_BLOCK_PTR)\n+    abort ();\n+#endif\n+\n+  if (bb == ENTRY_BLOCK_PTR)\n+    return;\n+\n   EXECUTE_IF_CONTROL_DEPENDENT (bb->index, edge_number,\n     {\n       tree t;"}, {"sha": "a1f33ad36f374b6cd3022a5a62bb16dc5433f5a2", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1513, "deletions": 3030, "changes": 4543, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=7e6eb623f948dcaacab5e1251c99ebadc270c3d5"}, {"sha": "09c2fe3170769b357a8c58fb9f6ccd3be78b82a4", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e6eb623f948dcaacab5e1251c99ebadc270c3d5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7e6eb623f948dcaacab5e1251c99ebadc270c3d5", "patch": "@@ -1184,6 +1184,10 @@ struct tree_exp GTY(())\n #define SSA_NAME_PTR_INFO(N) \\\n     SSA_NAME_CHECK (N)->ssa_name.ptr_info\n \n+/* Get the value of this SSA_NAME, if available.  */\n+#define SSA_NAME_VALUE(N) \\\n+   SSA_NAME_CHECK (N)->ssa_name.value_handle\n+\n #ifndef GCC_BITMAP_H\n struct bitmap_head_def;\n #endif\n@@ -1223,6 +1227,9 @@ struct tree_ssa_name GTY(())\n \n   /* Pointer attributes used for alias analysis.  */\n   struct ptr_info_def *ptr_info;\n+\n+  /* Value for SSA name used by GVN.  */ \n+  tree GTY((skip)) value_handle;\n };\n \f\n /* In a PHI_NODE node.  */"}]}