{"sha": "ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU1MzMyYjgxYTljZDFkZWE0YzczZjU5NjY0OGFlNzA1MzNmNWZlNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-01-21T02:21:28Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-01-21T02:21:28Z"}, "message": "cse.c (fold_rtx): Revert 29 Dec change.\n\n        * cse.c (fold_rtx): Revert 29 Dec change.\n        (cse_insn): Revert 12 Jan change.\n        * expr.c (expand_builtin): Don't emit CONST around CONSTANT_P_RTX.\n        * regclass.c (reg_scan_mark_refs): Revert 29 Dec change.\n        * rtl.def: Likewise.\n        * rtl.h (CONSTANT_P): Likewise.\n        * expr.c (emit_move_insn): Never try to flush CONSTANT_P_RTX\n        to memory.\n        * recog.c (immediate_operand): Accept CONSTANT_P_RTX.\n        * alpha.c (input_operand): Likewise.\n        * c4x.c (const_operand): Likewise.\n        * explow.c (allocate_dynamic_stack_space): Use register_operand\n        instead of arith_operand, which does not exist.\n        * 1750a.h: Fix comment closure.\n        * a29k.c (a29k_set_memflags): Fix typo in 19 Jan change.\n        * arc.md (one_cmplsi2_set_cc_insn): Fix set mode mismatch.\n        * arm.h (TARGET_SWITCHES): Fix typo.\n        * i370.md (anon mult and div patterns): Fix set mode mismatch.\n        * i860.c (output_delayed_branch): Fix operands to constrain_operands.\n        (output_delay_insn): Likewise.\n        * m88k.md (anon rotate insns): Fix set mode mismatch.\n        (anon BLKmode moves): Commonize and fix set mode mismatches.\n        * ns32k.md (udivmoddi[shq]i4_internal): Fix mode mismatch.\n        * romp.md (movdf): Fix typo.\n\nFrom-SVN: r24796", "tree": {"sha": "4c960fd14fd699be96f9a90c1bf2065a35c3be43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c960fd14fd699be96f9a90c1bf2065a35c3be43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/comments", "author": null, "committer": null, "parents": [{"sha": "898df643ab776bbaead668113abbb08b77d5f4a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/898df643ab776bbaead668113abbb08b77d5f4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/898df643ab776bbaead668113abbb08b77d5f4a1"}], "stats": {"total": 227, "additions": 118, "deletions": 109}, "files": [{"sha": "f3333c4f536c77fdedb542920543f64a8984f6c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1,3 +1,33 @@\n+Thu Jan 21 01:59:30 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* cse.c (fold_rtx): Revert 29 Dec change.\n+\t(cse_insn): Revert 12 Jan change.\n+\t* expr.c (expand_builtin): Don't emit CONST around CONSTANT_P_RTX.\n+\t* regclass.c (reg_scan_mark_refs): Revert 29 Dec change.\n+\t* rtl.def: Likewise.\n+\t* rtl.h (CONSTANT_P): Likewise.\n+\n+\t* expr.c (emit_move_insn): Never try to flush CONSTANT_P_RTX\n+\tto memory.\n+\t* recog.c (immediate_operand): Accept CONSTANT_P_RTX.\n+\t* alpha.c (input_operand): Likewise.\n+\t* c4x.c (const_operand): Likewise.\n+\n+\t* explow.c (allocate_dynamic_stack_space): Use register_operand\n+\tinstead of arith_operand, which does not exist.\n+\n+\t* 1750a.h: Fix comment closure.\n+\t* a29k.c (a29k_set_memflags): Fix typo in 19 Jan change.\n+\t* arc.md (one_cmplsi2_set_cc_insn): Fix set mode mismatch.\n+\t* arm.h (TARGET_SWITCHES): Fix typo.\n+\t* i370.md (anon mult and div patterns): Fix set mode mismatch.\n+\t* i860.c (output_delayed_branch): Fix operands to constrain_operands.\n+\t(output_delay_insn): Likewise.\n+\t* m88k.md (anon rotate insns): Fix set mode mismatch.\n+\t(anon BLKmode moves): Commonize and fix set mode mismatches.\n+\t* ns32k.md (udivmoddi[shq]i4_internal): Fix mode mismatch.\n+\t* romp.md (movdf): Fix typo.\n+\n Thu Jan 21 00:29:35 1999  Nathan Sidwell  <nathan@acm.org>\n \n \t* Makefile.in (install-common): Remove extraneous chmod for gcov"}, {"sha": "aa039dfdf1a377a775a3e3dfd1c85474d84f0115", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 95-98, 1999 Free Software Foundation, Inc.\n    Contributed by O.M.Kellogg, DASA (oliver.kellogg@space.otn.dasa.de)\n \n This file is part of GNU CC.\n@@ -732,7 +732,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n   reg_renumber[REGNO] >= 12 && reg_renumber[REGNO] <= 15)\n \n /* Now macros that check whether X is a register and also,\n-   strictly, whether it is in a specified class.\n+   strictly, whether it is in a specified class.  */\n \n /* 1 if X is an address register  */\n "}, {"sha": "d4483a43b2da443cb10b90128d6a0dd91462a0e4", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -530,7 +530,7 @@ a29k_set_memflags (insn, ref)\n   /* Note that it is always safe to get these flags, though they won't\n      be what we think if REF is not a MEM.  */\n   int in_struct_p = MEM_IN_STRUCT_P (ref);\n-  int scalar_p = MEM_IN_SCALAR_P (ref);\n+  int scalar_p = MEM_SCALAR_P (ref);\n   int volatile_p = MEM_VOLATILE_P (ref);\n   int unchanging_p = RTX_UNCHANGING_P (ref);\n "}, {"sha": "44426ae0d53e04055482935e258f68100f2b8d9b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -613,6 +613,9 @@ input_operand (op, mode)\n     case CONST_INT:\n       return mode == QImode || mode == HImode || add_operand (op, mode);\n \n+    case CONSTANT_P_RTX:\n+      return 1;\n+\n     default:\n       break;\n     }"}, {"sha": "b4c86ba8b627ab34366191d47d25887d7fa9022e", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1,5 +1,5 @@\n ;; Machine description of the Argonaut ARC cpu for GNU C compiler\n-;; Copyright (C) 1994, 1997 Free Software Foundation, Inc.\n+;; Copyright (C) 1994, 1997, 1999 Free Software Foundation, Inc.\n \n ;; This file is part of GNU CC.\n \n@@ -1039,7 +1039,7 @@\n   [(set_attr \"type\" \"unary\")])\n \n (define_insn \"*one_cmplsi2_set_cc_insn\"\n-  [(set (reg:CCZN 61) (compare:CC\n+  [(set (reg:CCZN 61) (compare:CCZN\n \t\t       (not:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t       (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")"}, {"sha": "a76571f8038d9f3bb38251436f8aa5f0f7f2c22e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -385,7 +385,6 @@ function tries to return. */\n   {\"abort-on-noreturn\",         ARM_FLAG_ABORT_NORETURN,     \\\n    \"Generate a call to abort if a noreturn function returns\"}, \\\n   {\"no-abort-on-noreturn\",      -ARM_FLAG_ABORT_NORETURN, \"\"}, \\\n-\n   SUBTARGET_SWITCHES\t\t\t\t\t\\\n   {\"\",\t\t\t\tTARGET_DEFAULT }\t\\\n }"}, {"sha": "f5c6fc2aad144848f35577a9a4c00a9c6a8b86b5", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -2612,6 +2612,9 @@ const_operand (op, mode)\n     case Pmode:\n #endif\n     case QImode:\n+      if (GET_CODE (op) == CONSTANT_P_RTX)\n+\treturn 1;\n+\n       if (GET_CODE (op) != CONST_INT\n \t  || (GET_MODE (op) != VOIDmode && GET_MODE (op) != mode)\n \t  || GET_MODE_CLASS (mode) != MODE_INT)"}, {"sha": "16e2c95dc76eb35c29eb206e04923112d59a0ac2", "filename": "gcc/config/i370/i370.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fi370%2Fi370.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fi370%2Fi370.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.md?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler -- System/370 version.\n-;;  Copyright (C) 1989, 93, 94, 95, 1997 Free Software Foundation, Inc.\n+;;  Copyright (C) 1989, 93, 94, 95, 97, 1999 Free Software Foundation, Inc.\n ;;  Contributed by Jan Stein (jan@cd.chalmers.se).\n ;;  Modified for MVS C/370 by Dave Pitts (dpitts@nyx.cs.du.edu)\n \n@@ -2125,7 +2125,7 @@ check_label_emit ();\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(mult:SI (match_operand:DI 1 \"general_operand\" \"%0\")\n+\t(mult:DI (match_operand:DI 1 \"general_operand\" \"%0\")\n \t\t (match_operand:SI 2 \"general_operand\" \"g\")))]\n   \"\"\n   \"*\n@@ -2281,7 +2281,7 @@ check_label_emit ();\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(div:SI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t(div:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"\")))]\n   \"\"\n   \"*\n@@ -2441,7 +2441,7 @@ check_label_emit ();\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(mod:SI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t(mod:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"\")))]\n   \"\"\n   \"*"}, {"sha": "4b3498da7c93d07033812a2fd4bd89f3f3fdabdc", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Intel 860\n-   Copyright (C) 1989, 1991, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 91, 97, 98, 1999 Free Software Foundation, Inc.\n    Derived from sparc.c.\n \n    Written by Richard Stallman (rms@ai.mit.edu).\n@@ -1447,7 +1447,7 @@ output_delayed_branch (template, operands, insn)\n \t}\n \n       insn_extract (delay_insn);\n-      if (! constrain_operands (insn_code_number, 1))\n+      if (! constrain_operands (1))\n \tfatal_insn_not_found (delay_insn);\n \n       template = insn_template[insn_code_number];\n@@ -1490,7 +1490,7 @@ output_delay_insn (delay_insn)\n     }\n \n #ifdef REGISTER_CONSTRAINTS\n-  if (! constrain_operands (insn_code_number, 1))\n+  if (! constrain_operands (1))\n     abort ();\n #endif\n "}, {"sha": "edab3f706ae20d9f3481647164cc2b54a8741074", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 38, "deletions": 49, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for the Motorola 88000 for GNU C compiler\n-;;;  Copyright (C) 1988, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+;;;  Copyright (C) 1988, 92-96, 1999 Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@mcc.com)\n ;;  Currently maintained by (gcc@dg-rtp.dg.com)\n \n@@ -759,7 +759,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n-\t(rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n+\t(rotate:CCEVEN (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n \t\t   (match_operand:CC 2 \"int5_operand\" \"\")))]\n   \"\"\n   \"rot %0,%1,%2\"\n@@ -782,7 +782,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:CCEVEN 0 \"register_operand\" \"=r\")\n-\t(ior:CC (rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n+\t(ior:CCEVEN (rotate:CC (match_operand 1 \"partial_ccmode_register_operand\" \"r\")\n \t\t\t   (match_operand:CC 2 \"int5_operand\" \"\"))\n \t\t(match_operand 3 \"partial_ccmode_register_operand\" \"r\")))\n    (clobber (match_scratch:CCEVEN 4 \"=r\"))]\n@@ -2129,60 +2129,49 @@\n   DONE;\n }\")\n \n+;; ??? We shouldn't be allowing such mode mismatches\n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(match_operand:BLK 1 \"memory_operand\" \"m\"))]\n-  \"\"\n-  \"%V1ld.bu\\\\t %0,%1\"\n-  [(set_attr \"type\" \"load\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n \t(match_operand:BLK 1 \"memory_operand\" \"m\"))]\n   \"\"\n-  \"%V1ld.hu\\\\t %0,%1\"\n-  [(set_attr \"type\" \"load\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(match_operand:BLK 1 \"memory_operand\" \"m\"))]\n-  \"\"\n-  \"%V1ld\\\\t %0,%1\"\n+  \"*\n+{\n+  switch (GET_MODE (operands[0]))\n+    {\n+    case QImode:\n+      return \\\"%V1ld.bu\\\\t %0,%1\\\";\n+    case HImode:\n+      return \\\"%V1ld.hu\\\\t %0,%1\\\";\n+    case SImode:\n+      return \\\"%V1ld\\\\t %0,%1\\\";\n+    case DImode:\n+      return \\\"%V1ld.d\\\\t %0,%1\\\";\n+    default:\n+      abort ();\n+    }\n+}\"\n   [(set_attr \"type\" \"load\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(match_operand:BLK 1 \"memory_operand\" \"m\"))]\n-  \"\"\n-  \"%V1ld.d\\\\t %0,%1\"\n-  [(set_attr \"type\" \"loadd\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n-\t(match_operand:QI 1 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"%v0st.b\\\\t %1,%0\"\n-  [(set_attr \"type\" \"store\")])\n-\n (define_insn \"\"\n   [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n-\t(match_operand:HI 1 \"register_operand\" \"r\"))]\n+\t(match_operand 1 \"register_operand\" \"r\"))]\n   \"\"\n-  \"%v0st.h\\\\t %1,%0\"\n-  [(set_attr \"type\" \"store\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n-\t(match_operand:SI 1 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"%v0st\\\\t %1,%0\"\n-  [(set_attr \"type\" \"store\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n-\t(match_operand:DI 1 \"register_operand\" \"r\"))]\n-  \"\"\n-  \"%v0st.d\\\\t %1,%0\"\n+  \"*\n+{\n+  switch (GET_MODE (operands[1]))\n+    {\n+    case QImode:\n+      return \\\"%v0st.b\\\\t %1,%0\\\";\n+    case HImode:\n+      return \\\"%v0st.h\\\\t %1,%0\\\";\n+    case SImode:\n+      return \\\"%v0st\\\\t %1,%0\\\";\n+    case DImode:\n+      return \\\"%v0st.d\\\\t %1,%0\\\";\n+    default:\n+      abort ();\n+    }\n+}\"\n   [(set_attr \"type\" \"store\")])\n \n ;; Call a non-looping block move library function (e.g. __movstrSI96x64)."}, {"sha": "69ba564638bd6bc5d9826ed22b0036716e146edc", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, ns32000 Version\n-;;  Copyright (C) 1988, 1994, 1996 Free Software Foundation, Inc.\n+;;  Copyright (C) 1988, 1994, 1996, 1999 Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n ;; This file is part of GNU CC.\n@@ -1276,7 +1276,7 @@\n ;; ever used when explicitly emitted by a define_expand.\n (define_insn \"udivmoddisi4_internal\"\n   [(set (match_operand:DI 0 \"reg_or_mem_operand\" \"=rm\")\n-        (unspec:SI [(match_operand:DI 1 \"reg_or_mem_operand\" \"0\")\n+        (unspec:DI [(match_operand:DI 1 \"reg_or_mem_operand\" \"0\")\n                     (match_operand:SI 2 \"general_operand\" \"g\")] 0))]\n   \"\"\n   \"deid %2,%0\")\n@@ -1341,7 +1341,7 @@\n ;; way to do this, so just restrict operand 0 and 1 to be in registers.\n (define_insn \"udivmoddihi4_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:HI [(match_operand:DI 1 \"register_operand\" \"0\")\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"0\")\n                     (match_operand:HI 2 \"general_operand\" \"g\")] 0))]\n   \"\"\n   \"deiw %2,%0\")\n@@ -1398,7 +1398,7 @@\n ;; way to do this, so just restrict operand 0 and 1 to be in registers.\n (define_insn \"udivmoddiqi4_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:QI [(match_operand:DI 1 \"reg_or_mem_operand\" \"0\")\n+        (unspec:DI [(match_operand:DI 1 \"reg_or_mem_operand\" \"0\")\n                     (match_operand:QI 2 \"general_operand\" \"g\")] 0))]\n   \"\"\n   \"deib %2,%0\")"}, {"sha": "5f0631521e3bf876ebf928c6bbce8dc3bedd63a1", "filename": "gcc/config/romp/romp.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fromp%2Fromp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fconfig%2Fromp%2Fromp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.md?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for ROMP chip for GNU C compiler\n-;;   Copyright (C) 1988, 1991, 1993, 1994, 1995 Free Software Foundation, Inc.\n+;;   Copyright (C) 1988, 91, 93, 94, 95, 1999 Free Software Foundation, Inc.\n ;;   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n ;; This file is part of GNU CC.\n@@ -651,7 +651,7 @@\n       start_sequence ();\n       if (GET_CODE (operands[0]) != REG\n \t  || ! refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n-\t\t\t\t  operands[1]), 0)\n+\t\t\t\t  operands[1], 0))\n \t{\n \t  emit_move_insn (operand_subword (op0, 0, 1, DFmode),\n \t\t\t  operand_subword_force (op1, 0, DFmode));"}, {"sha": "572d24f4699dee1abc8ba148e12e215d229de653", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -4931,21 +4931,6 @@ fold_rtx (x, insn)\n   switch (code)\n     {\n     case CONST:\n-      /* If the operand is a CONSTANT_P_RTX, see if what's inside it\n-\t is known to be constant and replace the whole thing with a\n-\t CONST_INT of either zero or one.  Note that this code assumes\n-\t that an insn that recognizes a CONST will also recognize a\n-\t CONST_INT, but that seems to be a safe assumption.  */\n-      if (GET_CODE (XEXP (x, 0)) == CONSTANT_P_RTX)\n-\t{\n-\t  x = equiv_constant (fold_rtx (XEXP (XEXP (x, 0), 0), 0));\n-\t  return (x != 0 && (GET_CODE (x) == CONST_INT\n-\t\t\t     || GET_CODE (x) == CONST_DOUBLE)\n-\t\t  ? const1_rtx : const0_rtx);\n-\t}\n-\n-      /* ... fall through ... */\n-\n     case CONST_INT:\n     case CONST_DOUBLE:\n     case SYMBOL_REF:\n@@ -5865,6 +5850,12 @@ fold_rtx (x, insn)\n \t\t\t\t\tconst_arg1 ? const_arg1 : folded_arg1,\n \t\t\t\t\tconst_arg2 ? const_arg2 : XEXP (x, 2));\n       break;\n+\n+    case 'x':\n+      /* Always eliminate CONSTANT_P_RTX at this stage. */\n+      if (code == CONSTANT_P_RTX)\n+\treturn (const_arg0 ? const1_rtx : const0_rtx);\n+      break;\n     }\n \n   return new ? new : x;\n@@ -6864,12 +6855,6 @@ cse_insn (insn, libcall_insn)\n       if (src == src_folded)\n         src_folded = 0;\n \n-      /* Folds of constant_p_rtx are to be preferred, since we do\n-\t not wish any to live past CSE.  */\n-      if (src && GET_CODE (src) == CONST\n-\t  && GET_CODE (XEXP (src, 0)) == CONSTANT_P_RTX)\n-\tsrc = 0;\n-\n       /* At this point, ELT, if non-zero, points to a class of expressions\n          equivalent to the source of this SET and SRC, SRC_EQV, SRC_FOLDED,\n \t and SRC_RELATED, if non-zero, each contain additional equivalent"}, {"sha": "ee98ec071e8f55dc2782e84597b2edade27b4100", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1204,7 +1204,7 @@ allocate_dynamic_stack_space (size, target, known_align)\n \t/* Our optimization works based upon being able to perform a simple\n \t   transformation of this RTL into a (set REG REG) so make sure things\n \t   did in fact end up in a REG.  */\n-\tif (!arith_operand (setjmpless_size, Pmode))\n+\tif (!register_operand (setjmpless_size, Pmode))\n \t  setjmpless_size = force_reg (Pmode, setjmpless_size);\n       }\n "}, {"sha": "1fd2afb0acfdb60f54c528ffa5716830d65818b0", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -2497,7 +2497,10 @@ emit_move_insn (x, y)\n   if (mode == BLKmode || (GET_MODE (y) != mode && GET_MODE (y) != VOIDmode))\n     abort ();\n \n-  if (CONSTANT_P (y) && ! LEGITIMATE_CONSTANT_P (y))\n+  /* Never force constant_p_rtx to memory.  */\n+  if (GET_CODE (y) == CONSTANT_P_RTX)\n+    ;\n+  else if (CONSTANT_P (y) && ! LEGITIMATE_CONSTANT_P (y))\n     y = force_const_mem (mode, y);\n \n   /* If X or Y are memory references, verify that their addresses are valid\n@@ -8993,16 +8996,11 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t      || POINTER_TYPE_P (TREE_TYPE (arg)))\n \t    return const0_rtx;\n \n-\t  /* Otherwise, emit (const (constant_p_rtx (ARG))) and let CSE\n-\t     get a chance to see if it can deduce whether ARG is constant.  */\n-\t  /* ??? We always generate the CONST in ptr_mode since that's\n-\t     certain to be valid on this machine, then convert it to\n-\t     whatever we need.  */\n+\t  /* Otherwise, emit (constant_p_rtx (ARG)) and let CSE get a\n+\t     chance to see if it can deduce whether ARG is constant.  */\n \n \t  tmp = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n-\t  tmp = gen_rtx_CONSTANT_P_RTX (ptr_mode, tmp);\n-\t  tmp = gen_rtx_CONST (ptr_mode, tmp);\n-\t  tmp = convert_to_mode (value_mode, tmp, 0);\n+\t  tmp = gen_rtx_CONSTANT_P_RTX (value_mode, tmp);\n \t  return tmp;\n \t}\n "}, {"sha": "db06d0437dfb0350142336f12713869b9b98e2e2", "filename": "gcc/recog.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1088,6 +1088,12 @@ immediate_operand (op, mode)\n       && GET_MODE_CLASS (mode) != MODE_PARTIAL_INT)\n     return 0;\n \n+  /* Accept CONSTANT_P_RTX, since it will be gone by CSE1 and\n+     result in 0/1.  It seems a safe assumption that this is\n+     in range for everyone.  */\n+  if (GET_CODE (op) == CONSTANT_P_RTX)\n+    return 1;\n+\n   return (CONSTANT_P (op)\n \t  && (GET_MODE (op) == mode || mode == VOIDmode\n \t      || GET_MODE (op) == VOIDmode)"}, {"sha": "f7c2fe23dd15f34a883bfa21fdc7eca24f5a02a8", "filename": "gcc/regclass.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -2020,10 +2020,6 @@ reg_scan_mark_refs (x, insn, note_flag, min_regno)\n   switch (code)\n     {\n     case CONST:\n-      if (GET_CODE (XEXP (x, 0)) == CONSTANT_P_RTX)\n-\treg_scan_mark_refs (XEXP (XEXP (x, 0), 0), insn, note_flag, min_regno);\n-      return;\n-\n     case CONST_INT:\n     case CONST_DOUBLE:\n     case CC0:"}, {"sha": "970a937f8976e4807df8e1e8aceb92e11c26a5a8", "filename": "gcc/rtl.def", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -1,7 +1,7 @@\n /* This file contains the definitions and documentation for the\n    Register Transfer Expressions (rtx's) that make up the\n    Register Transfer Language (rtl) used in the Back End of the GNU compiler.\n-   Copyright (C) 1987, 88, 92, 94, 95, 97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92, 94, 95, 97, 98, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -850,10 +850,9 @@ DEF_RTL_EXPR(RANGE_VAR, \"range_var\", \"eti\", 'x')\n    0 is the live bitmap.  Operand 1 is the original block number.  */\n DEF_RTL_EXPR(RANGE_LIVE, \"range_live\", \"bi\", 'x')\n \n-/* A unary `__builtin_constant_p' expression.  This RTL code may only be used\n-   as an operand of a CONST.  This pattern is only emitted during RTL\n-   generation and then only if optimize > 0.  It is converted by the first\n-   CSE pass into the appropriate CONST_INT.  */\n+/* A unary `__builtin_constant_p' expression.  These are only emitted\n+   during RTL generation, and then only if optimize > 0.  They are\n+   eliminated by the first CSE pass. */\n DEF_RTL_EXPR(CONSTANT_P_RTX, \"constant_p_rtx\", \"e\", 'x')\n \n /*"}, {"sha": "a3156642f7ed51b7e7de0b8e6f1b612706b40a7b", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee5332b81a9cd1dea4c73f596648ae70533f5fe5/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=ee5332b81a9cd1dea4c73f596648ae70533f5fe5", "patch": "@@ -219,7 +219,8 @@ typedef struct rtvec_def{\n #define CONSTANT_P(X)   \\\n   (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n    || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST_DOUBLE\t\t\\\n-   || GET_CODE (X) == CONST || GET_CODE (X) == HIGH)\n+   || GET_CODE (X) == CONST || GET_CODE (X) == HIGH\t\t\t\\\n+   || GET_CODE (X) == CONSTANT_P_RTX)\n \n /* General accessor macros for accessing the fields of an rtx.  */\n "}]}