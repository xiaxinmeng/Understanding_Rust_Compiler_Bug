{"sha": "60a5d78a724cc604ca54605db99cc62fcc82f53b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBhNWQ3OGE3MjRjYzYwNGNhNTQ2MDVkYjk5Y2M2MmZjYzgyZjUzYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-05-25T16:15:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-05-25T16:15:38Z"}, "message": "re PR debug/42801 (C VLAs should use DW_AT_allocated)\n\n\tPR debug/42801\n\t* tree-inline.c (remap_decls): Remap DECL_VALUE_EXPR here...\n\t(copy_bind_expr): ... instead of here.\n\t(copy_tree_body_r): If id->remapping_type_depth clear TREE_BLOCK\n\tif the block hasn't been remapped.\n\t* dwarf2out.c (gen_formal_parameter_die, gen_variable_die): When\n\temitting concrete instance of abstract VLA, add DW_AT_type attribute.\n\n\t* gcc.dg/guality/sra-2.c: New test.\n\nFrom-SVN: r159826", "tree": {"sha": "ad9e7454c414627ffdd7dd66d6dfc5825128c0a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad9e7454c414627ffdd7dd66d6dfc5825128c0a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60a5d78a724cc604ca54605db99cc62fcc82f53b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a5d78a724cc604ca54605db99cc62fcc82f53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60a5d78a724cc604ca54605db99cc62fcc82f53b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a5d78a724cc604ca54605db99cc62fcc82f53b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c946a318432341ea470c5f7540490a87823aaedd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c946a318432341ea470c5f7540490a87823aaedd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c946a318432341ea470c5f7540490a87823aaedd"}], "stats": {"total": 156, "additions": 121, "deletions": 35}, "files": [{"sha": "371bba7a040f3d5fc9bf09f1a0f058d75109fa0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60a5d78a724cc604ca54605db99cc62fcc82f53b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60a5d78a724cc604ca54605db99cc62fcc82f53b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60a5d78a724cc604ca54605db99cc62fcc82f53b", "patch": "@@ -1,3 +1,13 @@\n+2010-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/42801\n+\t* tree-inline.c (remap_decls): Remap DECL_VALUE_EXPR here...\n+\t(copy_bind_expr): ... instead of here.\n+\t(copy_tree_body_r): If id->remapping_type_depth clear TREE_BLOCK\n+\tif the block hasn't been remapped.\n+\t* dwarf2out.c (gen_formal_parameter_die, gen_variable_die): When\n+\temitting concrete instance of abstract VLA, add DW_AT_type attribute.\n+\n 2010-05-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44069"}, {"sha": "f77b9486a9d714f5f1d5ea7e18119a65bcb74bc1", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60a5d78a724cc604ca54605db99cc62fcc82f53b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60a5d78a724cc604ca54605db99cc62fcc82f53b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=60a5d78a724cc604ca54605db99cc62fcc82f53b", "patch": "@@ -17906,22 +17906,26 @@ gen_formal_parameter_die (tree node, tree origin, bool emit_name_p,\n \torigin = ultimate_origin;\n       if (origin != NULL)\n \tadd_abstract_origin_attribute (parm_die, origin);\n-      else\n+      else if (emit_name_p)\n+\tadd_name_and_src_coords_attributes (parm_die, node);\n+      if (origin == NULL\n+\t  || (! DECL_ABSTRACT (node_or_origin)\n+\t      && variably_modified_type_p (TREE_TYPE (node_or_origin),\n+\t\t\t\t\t   decl_function_context\n+\t\t\t\t\t\t\t    (node_or_origin))))\n \t{\n-\t  tree type = TREE_TYPE (node);\n-\t  if (emit_name_p)\n-\t    add_name_and_src_coords_attributes (parm_die, node);\n-\t  if (decl_by_reference_p (node))\n+\t  tree type = TREE_TYPE (node_or_origin);\n+\t  if (decl_by_reference_p (node_or_origin))\n \t    add_type_attribute (parm_die, TREE_TYPE (type), 0, 0,\n \t\t\t\tcontext_die);\n \t  else\n \t    add_type_attribute (parm_die, type,\n-\t\t\t\tTREE_READONLY (node),\n-\t\t\t\tTREE_THIS_VOLATILE (node),\n+\t\t\t\tTREE_READONLY (node_or_origin),\n+\t\t\t\tTREE_THIS_VOLATILE (node_or_origin),\n \t\t\t\tcontext_die);\n-\t  if (DECL_ARTIFICIAL (node))\n-\t    add_AT_flag (parm_die, DW_AT_artificial, 1);\n \t}\n+      if (origin == NULL && DECL_ARTIFICIAL (node))\n+\tadd_AT_flag (parm_die, DW_AT_artificial, 1);\n \n       if (node && node != origin)\n         equate_decl_number_to_die (node, parm_die);\n@@ -18624,8 +18628,9 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n   dw_die_ref var_die;\n   dw_die_ref old_die = decl ? lookup_decl_die (decl) : NULL;\n   dw_die_ref origin_die;\n-  int declaration = (DECL_EXTERNAL (decl_or_origin)\n-\t\t     || class_or_namespace_scope_p (context_die));\n+  bool declaration = (DECL_EXTERNAL (decl_or_origin)\n+\t\t      || class_or_namespace_scope_p (context_die));\n+  bool specialization_p = false;\n \n   ultimate_origin = decl_ultimate_origin (decl_or_origin);\n   if (decl || ultimate_origin)\n@@ -18769,6 +18774,7 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n     {\n       /* This is a definition of a C++ class level static.  */\n       add_AT_specification (var_die, old_die);\n+      specialization_p = true;\n       if (DECL_NAME (decl))\n \t{\n \t  expanded_location s = expand_location (DECL_SOURCE_LOCATION (decl));\n@@ -18782,16 +18788,26 @@ gen_variable_die (tree decl, tree origin, dw_die_ref context_die)\n \t}\n     }\n   else\n+    add_name_and_src_coords_attributes (var_die, decl);\n+\n+  if ((origin == NULL && !specialization_p)\n+      || (origin != NULL\n+\t  && !DECL_ABSTRACT (decl_or_origin)\n+\t  && variably_modified_type_p (TREE_TYPE (decl_or_origin),\n+\t\t\t\t       decl_function_context\n+\t\t\t\t\t\t\t(decl_or_origin))))\n     {\n-      tree type = TREE_TYPE (decl);\n+      tree type = TREE_TYPE (decl_or_origin);\n \n-      add_name_and_src_coords_attributes (var_die, decl);\n-      if (decl_by_reference_p (decl))\n+      if (decl_by_reference_p (decl_or_origin))\n \tadd_type_attribute (var_die, TREE_TYPE (type), 0, 0, context_die);\n       else\n-\tadd_type_attribute (var_die, type, TREE_READONLY (decl),\n-\t\t\t    TREE_THIS_VOLATILE (decl), context_die);\n+\tadd_type_attribute (var_die, type, TREE_READONLY (decl_or_origin),\n+\t\t\t    TREE_THIS_VOLATILE (decl_or_origin), context_die);\n+    }\n \n+  if (origin == NULL && !specialization_p)\n+    {\n       if (TREE_PUBLIC (decl))\n \tadd_AT_flag (var_die, DW_AT_external, 1);\n "}, {"sha": "d520dd14834f70c528018540e2663df77e3dc1bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60a5d78a724cc604ca54605db99cc62fcc82f53b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60a5d78a724cc604ca54605db99cc62fcc82f53b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=60a5d78a724cc604ca54605db99cc62fcc82f53b", "patch": "@@ -1,3 +1,8 @@\n+2010-05-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/42801\n+\t* gcc.dg/guality/sra-2.c: New test.\n+\n 2010-05-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44069"}, {"sha": "6773775b9d2c65b436305a595b058729e74e691a", "filename": "gcc/testsuite/gcc.dg/guality/sra-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60a5d78a724cc604ca54605db99cc62fcc82f53b/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fsra-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60a5d78a724cc604ca54605db99cc62fcc82f53b/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fsra-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fsra-2.c?ref=60a5d78a724cc604ca54605db99cc62fcc82f53b", "patch": "@@ -0,0 +1,55 @@\n+/* PR debug/42801 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+void __attribute__((noinline))\n+fn1 (int *x, int y)\n+{\n+  asm volatile (\"\" : : \"rm\" (x), \"rm\" (y) : \"memory\");\n+}\n+\n+static inline __attribute__((always_inline)) int\n+fn2 (int i)\n+{\n+  int a[i];\n+  fn1 (a, i);\n+  fn1 (a, i);\t\t/* { dg-final { gdb-test 16 \"sizeof (a)\" \"5 * sizeof (int)\" } } */\n+  return i;\n+}\n+\n+static inline __attribute__((always_inline)) int\n+fn3 (int i)\n+{\n+  int a[i];\n+  fn1 (a, i);\n+  fn1 (a, i);\t\t/* { dg-final { gdb-test 25 \"sizeof (a)\" \"6 * sizeof (int)\" } } */\n+  return i;\n+}\n+\n+static inline __attribute__((always_inline)) int\n+fn4 (int i)\n+{\n+  return fn3 (i);\n+}\n+\n+int __attribute__((noinline))\n+fn5 (void)\n+{\n+  return fn2 (5) + 1;\n+}\n+\n+int __attribute__((noinline))\n+fn6 (int i)\n+{\n+  return fn2 (i + 1) + fn4 (i + 2) + fn4 (i + 2) + 1;\n+}\n+\n+int\n+main (void)\n+{\n+  int x = 4;\n+  asm volatile (\"\" : \"+r\" (x));\n+  fn5 ();\n+  fn6 (x);\n+  return 0;\n+}"}, {"sha": "342b5a5f082fdd23f807f365ad9b60b825468d3f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60a5d78a724cc604ca54605db99cc62fcc82f53b/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60a5d78a724cc604ca54605db99cc62fcc82f53b/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=60a5d78a724cc604ca54605db99cc62fcc82f53b", "patch": "@@ -574,6 +574,19 @@ remap_decls (tree decls, VEC(tree,gc) **nonlocalized_list, copy_body_data *id)\n \t  gcc_assert (DECL_P (new_var));\n \t  TREE_CHAIN (new_var) = new_decls;\n \t  new_decls = new_var;\n+ \n+\t  /* Also copy value-expressions.  */\n+\t  if (TREE_CODE (new_var) == VAR_DECL\n+\t      && DECL_HAS_VALUE_EXPR_P (new_var))\n+\t    {\n+\t      tree tem = DECL_VALUE_EXPR (new_var);\n+\t      bool old_regimplify = id->regimplify;\n+\t      id->remapping_type_depth++;\n+\t      walk_tree (&tem, copy_tree_body_r, id, NULL);\n+\t      id->remapping_type_depth--;\n+\t      id->regimplify = old_regimplify;\n+\t      SET_DECL_VALUE_EXPR (new_var, tem);\n+\t    }\n \t}\n     }\n \n@@ -665,23 +678,9 @@ copy_bind_expr (tree *tp, int *walk_subtrees, copy_body_data *id)\n     }\n \n   if (BIND_EXPR_VARS (*tp))\n-    {\n-      tree t;\n-\n-      /* This will remap a lot of the same decls again, but this should be\n-\t harmless.  */\n-      BIND_EXPR_VARS (*tp) = remap_decls (BIND_EXPR_VARS (*tp), NULL, id);\n- \n-      /* Also copy value-expressions.  */\n-      for (t = BIND_EXPR_VARS (*tp); t; t = TREE_CHAIN (t))\n-\tif (TREE_CODE (t) == VAR_DECL\n-\t    && DECL_HAS_VALUE_EXPR_P (t))\n-\t  {\n-\t    tree tem = DECL_VALUE_EXPR (t);\n-\t    walk_tree (&tem, copy_tree_body_r, id, NULL);\n-\t    SET_DECL_VALUE_EXPR (t, tem);\n-\t  }\n-    }\n+    /* This will remap a lot of the same decls again, but this should be\n+       harmless.  */\n+    BIND_EXPR_VARS (*tp) = remap_decls (BIND_EXPR_VARS (*tp), NULL, id);\n }\n \n \n@@ -1116,8 +1115,9 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n \t      tree *n;\n \t      n = (tree *) pointer_map_contains (id->decl_map,\n \t\t\t\t\t\t TREE_BLOCK (*tp));\n-\t      gcc_assert (n);\n-\t      new_block = *n;\n+\t      gcc_assert (n || id->remapping_type_depth != 0);\n+\t      if (n)\n+\t\tnew_block = *n;\n \t    }\n \t  TREE_BLOCK (*tp) = new_block;\n \t}"}]}