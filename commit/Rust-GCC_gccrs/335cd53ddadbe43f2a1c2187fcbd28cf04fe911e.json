{"sha": "335cd53ddadbe43f2a1c2187fcbd28cf04fe911e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM1Y2Q1M2RkYWRiZTQzZjJhMWMyMTg3ZmNiZDI4Y2YwNGZlOTExZQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-17T15:24:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-17T15:24:24Z"}, "message": "Merge #633\n\n633: Allow bool and char to be cast as any integer type r=philberty a=dkm\n\nFrom Mark  Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000147.html\r\n\r\n> bools and chars can be cast to any integer type, but not to floats or\r\n> each other. Adjust the BoolCastRule and CharCastRule to allow these\r\n> casts. Add a postive test \"as_bool_char.rs\" and negative test\r\n> \"bad_as_bool_char.rs\" to check the correct casts are accepted and the\r\n> illegal casts produce errors.\r\n> \r\n> Resolves: https://github.com/Rust-GCC/gccrs/issues/629\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "dc24c1684e1bb2155729e50fdcf2a315922f0024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc24c1684e1bb2155729e50fdcf2a315922f0024"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhG9SoCRBK7hj4Ov3rIwAAk5sIAJIZb5Rolxxbs5MRUFHjd7Gs\n/CWA0HZpCdEfLbrsazIrlMa5ySKjI8feEB3ezx119/4NQl76qvGV05nDOxxXLtNu\nGLrl+7iPw7TUMOIAZ/HJmN9eZ9+9Ei6LKVNC8yZX/GfWriqHlrfgJZTkFWhq7MiD\nZrS6bsTWLDHqKxYni4vAY+2EcRdpkLQKT8BU0adTljZOQZ+Oa2IZ6cCKhmLnnbbj\n3qqfguN9DcgCBKgOsFabuG4JkHI4zq63BI50m3Dw2n5Cn6WTq/lLvu2IOXAS71E2\nw3RBRAnCmNWVS3gd6kwmpTfaOoCppIRjTxceBQqEW0mxkA6LmSHqEQ57onDCMaY=\n=Ekfv\n-----END PGP SIGNATURE-----\n", "payload": "tree dc24c1684e1bb2155729e50fdcf2a315922f0024\nparent d9082b50a98168b766cfc5136f50a3497c14897d\nparent 4f02b38f6ab17a49d9f6a681b1fefb89c12304d9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629213864 +0000\ncommitter GitHub <noreply@github.com> 1629213864 +0000\n\nMerge #633\n\n633: Allow bool and char to be cast as any integer type r=philberty a=dkm\n\nFrom Mark  Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000147.html\r\n\r\n> bools and chars can be cast to any integer type, but not to floats or\r\n> each other. Adjust the BoolCastRule and CharCastRule to allow these\r\n> casts. Add a postive test \"as_bool_char.rs\" and negative test\r\n> \"bad_as_bool_char.rs\" to check the correct casts are accepted and the\r\n> illegal casts produce errors.\r\n> \r\n> Resolves: https://github.com/Rust-GCC/gccrs/issues/629\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9082b50a98168b766cfc5136f50a3497c14897d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9082b50a98168b766cfc5136f50a3497c14897d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9082b50a98168b766cfc5136f50a3497c14897d"}, {"sha": "4f02b38f6ab17a49d9f6a681b1fefb89c12304d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f02b38f6ab17a49d9f6a681b1fefb89c12304d9"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "c457931b17f12b23c0123e71247cd140059b5627", "filename": "gcc/rust/typecheck/rust-tyty-cast.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h?ref=335cd53ddadbe43f2a1c2187fcbd28cf04fe911e", "patch": "@@ -779,6 +779,12 @@ class BoolCastRules : public BaseCastRules\n       }\n   }\n \n+  /* bools can be cast to any integer type (but not floats or chars).  */\n+  void visit (IntType &type) override { resolved = type.clone (); }\n+  void visit (UintType &type) override { resolved = type.clone (); }\n+  void visit (USizeType &type) override { resolved = type.clone (); }\n+  void visit (ISizeType &type) override { resolved = type.clone (); }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1078,6 +1084,12 @@ class CharCastRules : public BaseCastRules\n \n   void visit (CharType &type) override { resolved = type.clone (); }\n \n+  /* chars can be cast to any integer type (but not floats or bools).  */\n+  void visit (IntType &type) override { resolved = type.clone (); }\n+  void visit (UintType &type) override { resolved = type.clone (); }\n+  void visit (USizeType &type) override { resolved = type.clone (); }\n+  void visit (ISizeType &type) override { resolved = type.clone (); }\n+\n private:\n   BaseType *get_base () override { return base; }\n "}, {"sha": "91a28eebe008286538062996559bb54875e74b77", "filename": "gcc/testsuite/rust/compile/bad_as_bool_char.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs?ref=335cd53ddadbe43f2a1c2187fcbd28cf04fe911e", "patch": "@@ -0,0 +1,18 @@\n+pub fn main ()\n+{\n+  let t = true;\n+  let f = false;\n+  let fone = t as f32;   // { dg-error \"invalid cast\" }\n+  let fzero = f as f64;  // { dg-error \"invalid cast\" }\n+\n+  let nb = 0u8 as bool;  // { dg-error \"invalid cast\" }\n+  let nc = true as char; // { dg-error \"invalid cast\" }\n+\n+  let a = 'a';\n+  let b = 'b';\n+  let fa = a as f32;     // { dg-error \"invalid cast\" }\n+  let bb = b as bool;    // { dg-error \"invalid cast\" }\n+\n+  let t32: u32 = 33;\n+  let ab = t32 as char;  // { dg-error \"invalid cast\" }\n+}"}, {"sha": "d687499384a4658db3c77a33ee303b3b62cd7748", "filename": "gcc/testsuite/rust/compile/torture/as_bool_char.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fas_bool_char.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335cd53ddadbe43f2a1c2187fcbd28cf04fe911e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fas_bool_char.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fas_bool_char.rs?ref=335cd53ddadbe43f2a1c2187fcbd28cf04fe911e", "patch": "@@ -0,0 +1,36 @@\n+extern \"C\" { fn abort (); }\n+\n+pub fn main ()\n+{\n+  let t = true;\n+  let f = false;\n+  let one = t as u8;\n+  let zero = f as u8;\n+\n+  if one != 1 || zero != 0 { unsafe { abort (); } }\n+\n+  let isizeone = true as isize;\n+  let usizezero = false as usize;\n+\n+  if isizeone != 1 || usizezero != 0 { unsafe { abort (); } }\n+\n+  let i32zero = f as i32;\n+  let u128one = t as u128;\n+\n+  if u128one != 1 || i32zero != 0 { unsafe { abort (); } }\n+\n+  let a = 'a';\n+  let b = 'b';\n+  let ua = a as u8;\n+  let ib = b as i32;\n+\n+  if (ua + 1) as i32 != ib { unsafe { abort (); } }\n+\n+  let tt = ua;\n+  let aa = tt as char;\n+\n+  let ttt = tt + 1;\n+  let ab = ttt as char;\n+\n+  if aa != 'a' || ab != 'b' { unsafe { abort (); } }\n+}"}]}