{"sha": "59ffa3e3dba5a7805585c61dd4387c5644249d52", "node_id": "C_kwDOANBUbNoAKDU5ZmZhM2UzZGJhNWE3ODA1NTg1YzYxZGQ0Mzg3YzU2NDQyNDlkNTI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-11T17:47:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:34:50Z"}, "message": "libstdc++: Avoid unconditional use of errc::not_supported [PR 99327]\n\nThe errc::not_supported constant is only defined if ENOTSUP is defined,\nwhich is not true for all targets. Many uses of errc::not_supported in\nthe filesystem library do not actually match the intended meaning of\nENOTSUP described by POSIX. They should be using ENOSYS instead\n(i.e. errc::function_not_supported).\n\nThis change ensures that appropriate error codes are used by the\nfilesystem library. The remaining uses of errc::not_supported are\nreplaced with a call to a new helper function so that an alternative\nvalue will be used on targets that don't support errc::not_supported.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/99327\n\t* src/filesystem/ops-common.h (__unsupported): New function to\n\treturn a suitable error code for missing functionality.\n\t(posix::off_t): New typedef.\n\t(posix::*): Set errno to ENOSYS instead of ENOTSUP for no-op\n\tfallback implementations.\n\t(do_copy_file): Replace uses of errc::not_supported.\n\t* src/c++17/fs_ops.cc (fs::copy, fs::copy_file, create_dir)\n\t(fs::create_directory, fs::create_directory_symlink)\n\t(fs::create_hard_link, fs::create_symlink, fs::current_path)\n\t(fs::equivalent, do_stat, fs::file_size, fs::hard_link_count)\n\t(fs::last_write_time, fs::permissions, fs::read_symlink):\n\tReplace uses of errc::not_supported.\n\t(fs::resize_file): Qualify off_t.\n\t* src/filesystem/ops.cc (fs::copy, fs::copy_file, create_dir)\n\t(fs::create_directory, fs::create_directory_symlink)\n\t(fs::create_hard_link, fs::create_symlink, fs::current_path)\n\t(fs::equivalent, do_stat, fs::file_size, fs::last_write_time)\n\t(fs::permissions, fs::read_symlink, fs::system_complete):\n\tReplace uses of errc::not_supported.\n\t(fs::resize_file): Qualify off_t and enable unconditionally.\n\t* testsuite/19_diagnostics/system_error/cons-1.cc: Likewise.", "tree": {"sha": "f8fca799cbf13fa6715ecc1594e5882b67b7a970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8fca799cbf13fa6715ecc1594e5882b67b7a970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59ffa3e3dba5a7805585c61dd4387c5644249d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ffa3e3dba5a7805585c61dd4387c5644249d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ffa3e3dba5a7805585c61dd4387c5644249d52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ffa3e3dba5a7805585c61dd4387c5644249d52/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71476c9df931f3ca674941f1942b03eabea010d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71476c9df931f3ca674941f1942b03eabea010d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71476c9df931f3ca674941f1942b03eabea010d"}], "stats": {"total": 139, "additions": 81, "deletions": 58}, "files": [{"sha": "cb2dc2c617e48b4dbf542a326c5e7d759a7f32db", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ffa3e3dba5a7805585c61dd4387c5644249d52/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ffa3e3dba5a7805585c61dd4387c5644249d52/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=59ffa3e3dba5a7805585c61dd4387c5644249d52", "patch": "@@ -353,7 +353,7 @@ fs::copy(const path& from, const path& to, copy_options options,\n     }\n   if (is_other(f) || is_other(t))\n     {\n-      ec = std::make_error_code(std::errc::not_supported);\n+      ec = std::make_error_code(std::errc::invalid_argument);\n       return;\n     }\n   if (is_directory(f) && is_regular_file(t))\n@@ -412,7 +412,7 @@ fs::copy(const path& from, const path& to, copy_options options,\n   else\n     ec.clear();\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n }\n \n@@ -435,7 +435,7 @@ fs::copy_file(const path& from, const path& to, copy_options options,\n   return do_copy_file(from.c_str(), to.c_str(), copy_file_options(options),\n \t\t      nullptr, nullptr, ec);\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n   return false;\n #endif\n }\n@@ -583,7 +583,7 @@ namespace\n \tcreated = true;\n       }\n #else\n-    ec = std::make_error_code(std::errc::not_supported);\n+    ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n     return created;\n   }\n@@ -631,7 +631,7 @@ fs::create_directory(const path& p, const path& attributes,\n     }\n   return create_dir(p, static_cast<perms>(st.st_mode), ec);\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_function_not_supported);\n   return false;\n #endif\n }\n@@ -652,7 +652,7 @@ fs::create_directory_symlink(const path& to, const path& new_symlink,\n \t\t\t     error_code& ec) noexcept\n {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #else\n   create_symlink(to, new_symlink, ec);\n #endif\n@@ -684,7 +684,7 @@ fs::create_hard_link(const path& to, const path& new_hard_link,\n   else\n     ec = __last_system_error();\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n }\n \n@@ -708,7 +708,7 @@ fs::create_symlink(const path& to, const path& new_symlink,\n   else\n     ec.clear();\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n }\n \n@@ -776,7 +776,7 @@ fs::current_path(error_code& ec)\n     }\n #endif  // __GLIBC__\n #else   // _GLIBCXX_HAVE_UNISTD_H\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n   return p;\n }\n@@ -799,7 +799,7 @@ fs::current_path(const path& p, error_code& ec) noexcept\n   else\n     ec.clear();\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n }\n \n@@ -839,7 +839,7 @@ fs::equivalent(const path& p1, const path& p2, error_code& ec) noexcept\n     {\n       if (is_other(s1) && is_other(s2))\n \t{\n-\t  ec = std::make_error_code(std::errc::not_supported);\n+\t  ec = std::__unsupported();\n \t  return false;\n \t}\n       ec.clear();\n@@ -897,7 +897,7 @@ fs::equivalent(const path& p1, const path& p2, error_code& ec) noexcept\n     ec.clear();\n   return false;\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n   return false;\n }\n@@ -928,7 +928,7 @@ namespace\n       ec.clear();\n       return f(st);\n #else\n-      ec = std::make_error_code(std::errc::not_supported);\n+      ec = std::make_error_code(std::errc::function_not_supported);\n       return deflt;\n #endif\n     }\n@@ -953,10 +953,10 @@ fs::file_size(const path& p, error_code& ec) noexcept\n       if (s.type == file_type::directory)\n \tec = std::make_error_code(std::errc::is_a_directory);\n       else\n-\tec = std::make_error_code(std::errc::not_supported);\n+\tec = std::__unsupported();\n     }\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n   return -1;\n }\n@@ -978,7 +978,7 @@ fs::hard_link_count(const path& p, error_code& ec) noexcept\n   return do_stat(p, ec, std::mem_fn(&stat_type::st_nlink),\n \t\t static_cast<uintmax_t>(-1));\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n   return static_cast<uintmax_t>(-1);\n #endif\n }\n@@ -1026,7 +1026,7 @@ fs::last_write_time(const path& p, error_code& ec) noexcept\n \t\t },\n \t\t file_time_type::min());\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n   return file_time_type::min();\n #endif\n }\n@@ -1072,7 +1072,7 @@ fs::last_write_time(const path& p,\n   else\n     ec.clear();\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n }\n \n@@ -1121,7 +1121,7 @@ fs::permissions(const path& p, perms prms, perm_options opts,\n     err = errno;\n #else\n   if (nofollow && is_symlink(st))\n-    ec = std::make_error_code(std::errc::not_supported);\n+    ec = std::__unsupported();\n   else if (posix::chmod(p.c_str(), static_cast<posix::mode_t>(prms)))\n     err = errno;\n #endif\n@@ -1206,7 +1206,7 @@ fs::path fs::read_symlink(const path& p, error_code& ec)\n     }\n   while (true);\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n   return result;\n }\n@@ -1434,7 +1434,7 @@ fs::resize_file(const path& p, uintmax_t size)\n void\n fs::resize_file(const path& p, uintmax_t size, error_code& ec) noexcept\n {\n-  if (size > static_cast<uintmax_t>(std::numeric_limits<off_t>::max()))\n+  if (size > static_cast<uintmax_t>(std::numeric_limits<posix::off_t>::max()))\n     ec.assign(EINVAL, std::generic_category());\n   else if (posix::truncate(p.c_str(), size))\n     ec.assign(errno, std::generic_category());"}, {"sha": "90ebeba7f012d0c04cdc8ac8c27896d4839c25a6", "filename": "libstdc++-v3/src/filesystem/ops-common.h", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ffa3e3dba5a7805585c61dd4387c5644249d52/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ffa3e3dba5a7805585c61dd4387c5644249d52/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h?ref=59ffa3e3dba5a7805585c61dd4387c5644249d52", "patch": "@@ -69,6 +69,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n   }\n \n+  // Get an error code indicating unsupported functionality.\n+  //\n+  // This should be used when a function is unable to behave as specified\n+  // due to an incomplete or partial implementation, e.g.\n+  // filesystem::equivalent(a, b) if is_other(a) && is_other(b) is true.\n+  //\n+  // Use errc::function_not_supported for functions that are entirely\n+  // unimplemented, e.g. create_symlink on Windows.\n+  //\n+  // Use errc::invalid_argument for requests to perform operations outside\n+  // the spec, e.g. trying to copy a directory using filesystem::copy_file.\n+  inline error_code\n+  __unsupported() noexcept\n+  {\n+#if defined ENOTSUP\n+    return std::make_error_code(std::errc::not_supported);\n+#elif defined EOPNOTSUPP\n+    // This is supposed to be for socket operations\n+    return std::make_error_code(std::errc::operation_not_supported);\n+#else\n+    return std::make_error_code(std::errc::invalid_argument);\n+#endif\n+  }\n+\n namespace filesystem\n {\n namespace __gnu_posix\n@@ -128,6 +152,7 @@ namespace __gnu_posix\n     return -1;\n   }\n \n+  using off_t = _off64_t;\n   inline int truncate(const wchar_t* path, _off64_t length)\n   {\n     const int fd = ::_wopen(path, _O_BINARY|_O_RDWR);\n@@ -164,6 +189,7 @@ namespace __gnu_posix\n   using ::utime;\n # endif\n   using ::rename;\n+  using ::off_t;\n # ifdef _GLIBCXX_HAVE_TRUNCATE\n   using ::truncate;\n # else\n@@ -183,15 +209,16 @@ namespace __gnu_posix\n # endif\n   using char_type = char;\n #else // ! _GLIBCXX_FILESYSTEM_IS_WINDOWS && ! _GLIBCXX_HAVE_UNISTD_H\n-  inline int open(const char*, int, ...) { errno = ENOTSUP; return -1; }\n-  inline int close(int) { errno = ENOTSUP; return -1; }\n+  inline int open(const char*, int, ...) { errno = ENOSYS; return -1; }\n+  inline int close(int) { errno = ENOSYS; return -1; }\n   using mode_t = int;\n-  inline int chmod(const char*, mode_t) { errno = ENOTSUP; return -1; }\n-  inline int mkdir(const char*, mode_t) { errno = ENOTSUP; return -1; }\n-  inline char* getcwd(char*, size_t) { errno = ENOTSUP; return nullptr; }\n-  inline int chdir(const char*) { errno = ENOTSUP; return -1; }\n-  inline int rename(const char*, const char*) { errno = ENOTSUP; return -1; }\n-  inline int truncate(const char*, long) { errno = ENOTSUP; return -1; }\n+  inline int chmod(const char*, mode_t) { errno = ENOSYS; return -1; }\n+  inline int mkdir(const char*, mode_t) { errno = ENOSYS; return -1; }\n+  inline char* getcwd(char*, size_t) { errno = ENOSYS; return nullptr; }\n+  inline int chdir(const char*) { errno = ENOSYS; return -1; }\n+  inline int rename(const char*, const char*) { errno = ENOSYS; return -1; }\n+  using off_t = long;\n+  inline int truncate(const char*, off_t) { errno = ENOSYS; return -1; }\n   using char_type = char;\n #endif // _GLIBCXX_FILESYSTEM_IS_WINDOWS\n } // namespace __gnu_posix\n@@ -374,15 +401,15 @@ _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n     // 2712. copy_file() has a number of unspecified error conditions\n     if (!is_regular_file(f))\n       {\n-\tec = std::make_error_code(std::errc::not_supported);\n+\tec = std::make_error_code(std::errc::invalid_argument);\n \treturn false;\n       }\n \n     if (exists(t))\n       {\n \tif (!is_regular_file(t))\n \t  {\n-\t    ec = std::make_error_code(std::errc::not_supported);\n+\t    ec = std::make_error_code(std::errc::invalid_argument);\n \t    return false;\n \t  }\n \n@@ -413,7 +440,7 @@ _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n \t  }\n \telse if (!is_regular_file(t))\n \t  {\n-\t    ec = std::make_error_code(std::errc::not_supported);\n+\t    ec = std::make_error_code(std::errc::invalid_argument);\n \t    return false;\n \t  }\n       }\n@@ -572,7 +599,7 @@ _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n     else\n       ec = std::last_system_error();\n #else\n-    ec = std::make_error_code(std::errc::not_supported);\n+    ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n   }\n #pragma GCC diagnostic pop"}, {"sha": "94b4123b878b0cbcbfd3711bd299b4856efb0d90", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ffa3e3dba5a7805585c61dd4387c5644249d52/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ffa3e3dba5a7805585c61dd4387c5644249d52/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=59ffa3e3dba5a7805585c61dd4387c5644249d52", "patch": "@@ -293,7 +293,7 @@ fs::copy(const path& from, const path& to, copy_options options,\n     }\n   if (is_other(f) || is_other(t))\n     {\n-      ec = std::make_error_code(std::errc::not_supported);\n+      ec = std::make_error_code(std::errc::invalid_argument);\n       return;\n     }\n   if (is_directory(f) && is_regular_file(t))\n@@ -372,7 +372,7 @@ fs::copy_file(const path& from, const path& to, copy_options options,\n   return do_copy_file(from.c_str(), to.c_str(), copy_file_options(options),\n \t\t      nullptr, nullptr, ec);\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n   return false;\n #endif\n }\n@@ -491,7 +491,7 @@ namespace\n \tcreated = true;\n       }\n #else\n-    ec = std::make_error_code(std::errc::not_supported);\n+    ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n     return created;\n   }\n@@ -539,7 +539,7 @@ fs::create_directory(const path& p, const path& attributes,\n     }\n   return create_dir(p, static_cast<perms>(st.st_mode), ec);\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n   return false;\n #endif\n }\n@@ -560,7 +560,7 @@ fs::create_directory_symlink(const path& to, const path& new_symlink,\n \t\t\t     error_code& ec) noexcept\n {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #else\n   create_symlink(to, new_symlink, ec);\n #endif\n@@ -592,7 +592,7 @@ fs::create_hard_link(const path& to, const path& new_hard_link,\n   else\n     ec = __last_system_error();\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n }\n \n@@ -616,7 +616,7 @@ fs::create_symlink(const path& to, const path& new_symlink,\n   else\n     ec.clear();\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n }\n \n@@ -683,7 +683,7 @@ fs::current_path(error_code& ec)\n     }\n #endif  // __GLIBC__\n #else   // _GLIBCXX_HAVE_UNISTD_H\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n   return p;\n }\n@@ -706,7 +706,7 @@ fs::current_path(const path& p, error_code& ec) noexcept\n   else\n     ec.clear();\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n }\n \n@@ -746,7 +746,7 @@ fs::equivalent(const path& p1, const path& p2, error_code& ec) noexcept\n     {\n       if (is_other(s1) && is_other(s2))\n \t{\n-\t  ec = std::make_error_code(std::errc::not_supported);\n+\t  ec = std::__unsupported();\n \t  return false;\n \t}\n       ec.clear();\n@@ -762,7 +762,7 @@ fs::equivalent(const path& p1, const path& p2, error_code& ec) noexcept\n     ec.clear();\n   return false;\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n   return false;\n }\n@@ -793,7 +793,7 @@ namespace\n       ec.clear();\n       return f(st);\n #else\n-      ec = std::make_error_code(std::errc::not_supported);\n+      ec = std::make_error_code(std::errc::function_not_supported);\n       return deflt;\n #endif\n     }\n@@ -817,7 +817,7 @@ fs::file_size(const path& p, error_code& ec) noexcept\n       if (s.type == file_type::directory)\n \tec = std::make_error_code(std::errc::is_a_directory);\n       else\n-\tec = std::make_error_code(std::errc::not_supported);\n+\tec = std::__unsupported();\n     }\n   return -1;\n }\n@@ -920,7 +920,7 @@ fs::last_write_time(const path& p __attribute__((__unused__)),\n   else\n     ec.clear();\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n }\n \n@@ -967,7 +967,7 @@ fs::permissions(const path& p, perms prms, error_code& ec) noexcept\n     err = errno;\n #else\n   if (nofollow && is_symlink(st))\n-    ec = std::make_error_code(std::errc::operation_not_supported);\n+    ec = std::__unsupported();\n   else if (posix::chmod(p.c_str(), static_cast<mode_t>(prms)))\n     err = errno;\n #endif\n@@ -1032,7 +1032,7 @@ fs::path fs::read_symlink(const path& p [[gnu::unused]], error_code& ec)\n     }\n   while (true);\n #else\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::make_error_code(std::errc::function_not_supported);\n #endif\n   return result;\n }\n@@ -1153,16 +1153,12 @@ fs::resize_file(const path& p, uintmax_t size)\n void\n fs::resize_file(const path& p, uintmax_t size, error_code& ec) noexcept\n {\n-#ifdef _GLIBCXX_HAVE_UNISTD_H\n-  if (size > static_cast<uintmax_t>(std::numeric_limits<off_t>::max()))\n+  if (size > static_cast<uintmax_t>(std::numeric_limits<posix::off_t>::max()))\n     ec.assign(EINVAL, std::generic_category());\n   else if (posix::truncate(p.c_str(), size))\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n-#else\n-  ec = std::make_error_code(std::errc::not_supported);\n-#endif\n }\n \n \n@@ -1280,7 +1276,7 @@ fs::system_complete(const path& p, error_code& ec)\n       || p.root_name() == base.root_name())\n     return absolute(p, base);\n   // else TODO\n-  ec = std::make_error_code(std::errc::not_supported);\n+  ec = std::__unsupported();\n   return {};\n #else\n   if (ec.value())"}, {"sha": "168a6fca2a984571216ee1f6d71418f699d43a07", "filename": "libstdc++-v3/testsuite/19_diagnostics/system_error/cons-1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ffa3e3dba5a7805585c61dd4387c5644249d52/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ffa3e3dba5a7805585c61dd4387c5644249d52/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Fsystem_error%2Fcons-1.cc?ref=59ffa3e3dba5a7805585c61dd4387c5644249d52", "patch": "@@ -26,19 +26,19 @@ int main()\n {\n   const std::string s(\"too late: boulangerie out of pain au raisin\");\n   const std::error_code\n-    e(std::make_error_code(std::errc::operation_not_supported));\n+    e(std::make_error_code(std::errc::invalid_argument));\n \n   // 1\n   {\n     std::system_error err1(e, s);\n-    VERIFY( err1.code() == e ); \n+    VERIFY( err1.code() == e );\n     VERIFY( std::string(err1.what()).find(s) != std::string::npos );\n   }\n \n   // 2\n   {\n     std::system_error err2(95, std::system_category(), s);\n-    VERIFY( err2.code() == std::error_code(95, std::system_category()) ); \n+    VERIFY( err2.code() == std::error_code(95, std::system_category()) );\n     VERIFY( std::string((err2.what(), s)).find(s) != std::string::npos );\n   }\n "}]}