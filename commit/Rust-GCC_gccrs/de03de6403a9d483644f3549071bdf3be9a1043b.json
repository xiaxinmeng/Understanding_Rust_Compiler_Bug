{"sha": "de03de6403a9d483644f3549071bdf3be9a1043b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwM2RlNjQwM2E5ZDQ4MzY0NGYzNTQ5MDcxYmRmM2JlOWExMDQzYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-16T23:41:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-16T23:41:55Z"}, "message": "stl_algobase.h (struct __lexicographical_compare): Add.\n\n2007-11-16  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_algobase.h (struct __lexicographical_compare): Add.\n\t(lexicographical_compare<>(_II1, _II1, _II2, _II2)): Use it.\n\t(lexicographical_compare(const unsigned char*, const unsigned char*,\n\tconst unsigned char*, const unsigned char*),\n\tlexicographical_compare(const char*, const char*, const char*,\n\tconst char*)): Remove.\n\t* include/ext/numeric_traits.h (__numeric_traits_floating<>::\n\t__is_signed): Add.\n\nFrom-SVN: r130248", "tree": {"sha": "64a42b0379ff8b8e9425138a26c12e21fac1c947", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a42b0379ff8b8e9425138a26c12e21fac1c947"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de03de6403a9d483644f3549071bdf3be9a1043b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de03de6403a9d483644f3549071bdf3be9a1043b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de03de6403a9d483644f3549071bdf3be9a1043b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de03de6403a9d483644f3549071bdf3be9a1043b/comments", "author": null, "committer": null, "parents": [{"sha": "e84296c66c1d63552db6dd6571edd92619a00e53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e84296c66c1d63552db6dd6571edd92619a00e53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e84296c66c1d63552db6dd6571edd92619a00e53"}], "stats": {"total": 128, "additions": 68, "deletions": 60}, "files": [{"sha": "bb88fd153d2f5c1cfa93034e8c1638f43e893c8c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de03de6403a9d483644f3549071bdf3be9a1043b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de03de6403a9d483644f3549071bdf3be9a1043b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=de03de6403a9d483644f3549071bdf3be9a1043b", "patch": "@@ -1,3 +1,14 @@\n+2007-11-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_algobase.h (struct __lexicographical_compare): Add.\n+\t(lexicographical_compare<>(_II1, _II1, _II2, _II2)): Use it.\n+\t(lexicographical_compare(const unsigned char*, const unsigned char*,\n+\tconst unsigned char*, const unsigned char*),\n+\tlexicographical_compare(const char*, const char*, const char*,\n+\tconst char*)): Remove.\n+\t* include/ext/numeric_traits.h (__numeric_traits_floating<>::\n+\t__is_signed): Add.\n+\n 2007-11-16  Paolo Carlini  <pcarlini@suse.de>\n \n \t* src/locale_facets.cc: Fix typo in Copyright."}, {"sha": "09d01457e90e5f04ba0b03a4e2d2ca657cfd4840", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 53, "deletions": 60, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de03de6403a9d483644f3549071bdf3be9a1043b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de03de6403a9d483644f3549071bdf3be9a1043b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=de03de6403a9d483644f3549071bdf3be9a1043b", "patch": "@@ -877,6 +877,48 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       return true;\n     }\n \n+\n+  template<bool _BoolType>\n+    struct __lexicographical_compare\n+    {\n+      template<typename _II1, typename _II2>\n+        static bool\n+        __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)\n+        {\n+\t  typedef typename iterator_traits<_II1>::iterator_category _Category1;\n+\t  typedef typename iterator_traits<_II2>::iterator_category _Category2;\n+\t  typedef std::__lc_rai<_Category1, _Category2> \t__rai_type;\n+\n+\t  __last1 = __rai_type::__newlast1(__first1, __last1,\n+\t\t\t\t\t   __first2, __last2);\n+\t  for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);\n+\t       ++__first1, ++__first2)\n+\t    {\n+\t      if (*__first1 < *__first2)\n+\t\treturn true;\n+\t      if (*__first2 < *__first1)\n+\t\treturn false;\n+\t    }\n+\t  return __first1 == __last1 && __first2 != __last2;\n+\t}\n+    };\n+\n+  template<>\n+    struct __lexicographical_compare<true>\n+    {\n+      template<typename _Tp, typename _Up>\n+        static bool\n+        __lc(const _Tp* __first1, const _Tp* __last1,\n+\t     const _Up* __first2, const _Up* __last2)\n+\t{\n+\t  const size_t __len1 = __last1 - __first1;\n+\t  const size_t __len2 = __last2 - __first2;\n+\t  const int __result = __builtin_memcmp(__first1, __first2,\n+\t\t\t\t\t\tstd::min(__len1, __len2));\n+\t  return __result != 0 ? __result < 0 : __len1 < __len2;\n+\t}\n+    };\n+\n   /**\n    *  @brief Performs \"dictionary\" comparison on ranges.\n    *  @param  first1  An input iterator.\n@@ -892,14 +934,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n    *  then this is an inline call to @c memcmp.\n   */\n   template<typename _II1, typename _II2>\n-    bool\n-    lexicographical_compare(_II1 __first1, _II1 __last1, \n+    inline bool\n+    lexicographical_compare(_II1 __first1, _II1 __last1,\n \t\t\t    _II2 __first2, _II2 __last2)\n     {\n-      typedef typename iterator_traits<_II1>::iterator_category _Category1;\n-      typedef typename iterator_traits<_II2>::iterator_category _Category2;\n-      typedef std::__lc_rai<_Category1, _Category2> \t__rai_type;\n-\n       // concept requirements\n       typedef typename iterator_traits<_II1>::value_type _ValueType1;\n       typedef typename iterator_traits<_II2>::value_type _ValueType2;\n@@ -910,61 +948,16 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_P)\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n-      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);\n-      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);\n-\t   ++__first1, ++__first2)\n-\t{\n-\t  if (*__first1 < *__first2)\n-\t    return true;\n-\t  if (*__first2 < *__first1)\n-\t    return false;\n-\t}\n-      return __first1 == __last1 && __first2 != __last2;\n-    }\n+      const bool __simple =\n+\t(__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value\n+\t && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed\n+\t && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed\n+\t && __is_pointer<_II1>::__value\n+\t && __is_pointer<_II2>::__value);\n \n-  // XXX should these be enabled-if'd for signed/unsigned types instead?\n-  inline bool\n-  lexicographical_compare(const unsigned char* __first1,\n-\t\t\t  const unsigned char* __last1,\n-\t\t\t  const unsigned char* __first2,\n-\t\t\t  const unsigned char* __last2)\n-  {\n-    __glibcxx_requires_valid_range(__first1, __last1);\n-    __glibcxx_requires_valid_range(__first2, __last2);\n-\n-    const size_t __len1 = __last1 - __first1;\n-    const size_t __len2 = __last2 - __first2;\n-    const int __result = __builtin_memcmp(__first1, __first2,\n-\t\t\t\t\t  std::min(__len1, __len2));\n-    return __result != 0 ? __result < 0 : __len1 < __len2;\n-  }\n-\n-  inline bool\n-  lexicographical_compare(const char* __first1, const char* __last1,\n-\t\t\t  const char* __first2, const char* __last2)\n-  {\n-    __glibcxx_requires_valid_range(__first1, __last1);\n-    __glibcxx_requires_valid_range(__first2, __last2);\n-\n-    if (__gnu_cxx::__numeric_traits<char>::__is_signed)\n-      {\n-\ttypedef const signed char* value_type;\n-\tvalue_type __f1 = reinterpret_cast<value_type>(__first1);\n-\tvalue_type __l1 = reinterpret_cast<value_type>(__last1);\n-\tvalue_type __f2 = reinterpret_cast<value_type>(__first2);\n-\tvalue_type __l2 = reinterpret_cast<value_type>(__last2);\t\n-\treturn _GLIBCXX_STD_P::lexicographical_compare(__f1, __l1, __f2, __l2);\n-      }\n-    else\n-      {\n-\ttypedef const unsigned char* value_type;\n-\tvalue_type __f1 = reinterpret_cast<value_type>(__first1);\n-\tvalue_type __l1 = reinterpret_cast<value_type>(__last1);\n-\tvalue_type __f2 = reinterpret_cast<value_type>(__first2);\n-\tvalue_type __l2 = reinterpret_cast<value_type>(__last2);\t\n-\treturn _GLIBCXX_STD_P::lexicographical_compare(__f1, __l1, __f2, __l2);\n-      }\n-  }\n+      return _GLIBCXX_STD_P::__lexicographical_compare<__simple>::\n+\t__lc(__first1, __last1, __first2, __last2);\n+    }\n \n   /**\n    *  @brief Performs \"dictionary\" comparison on ranges."}, {"sha": "29265e749f496dacebf0581c359bee29e9e878ed", "filename": "libstdc++-v3/include/ext/numeric_traits.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de03de6403a9d483644f3549071bdf3be9a1043b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de03de6403a9d483644f3549071bdf3be9a1043b/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnumeric_traits.h?ref=de03de6403a9d483644f3549071bdf3be9a1043b", "patch": "@@ -107,13 +107,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       static const int __max_digits10 = __glibcxx_max_digits10(_Value);\n \n       // See above comment...\n+      static const bool __is_signed = true;\n       static const int __digits10 = __glibcxx_digits10(_Value);\n       static const int __max_exponent10 = __glibcxx_max_exponent10(_Value);\n     };\n \n   template<typename _Value>\n     const int __numeric_traits_floating<_Value>::__max_digits10;\n \n+  template<typename _Value>\n+    const bool __numeric_traits_floating<_Value>::__is_signed;\n+\n   template<typename _Value>\n     const int __numeric_traits_floating<_Value>::__digits10;\n "}]}