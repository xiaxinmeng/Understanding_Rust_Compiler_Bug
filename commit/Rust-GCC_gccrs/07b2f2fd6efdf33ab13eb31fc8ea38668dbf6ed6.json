{"sha": "07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiMmYyZmQ2ZWZkZjMzYWIxM2ViMzFmYzhlYTM4NjY4ZGJmNmVkNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-08-10T14:01:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-08-10T14:01:33Z"}, "message": "c-common.h (RETURN_NULLIFIED_P): Lose.\n\n        * c-common.h (RETURN_NULLIFIED_P): Lose.\n        * c-semantics.c (genrtl_return_stmt): Don't check it.\n\n        Support named return value optimization for inlines, too.\n        * decl.c (finish_function): Nullify returns here.\n        * semantics.c (genrtl_start_function): Not here.\n        (cp_expand_stmt): Don't mess with CLEANUP_STMTs.\n        (nullify_returns_r): No longer static.  Just clear RETURN_EXPR.\n        Also nullify the CLEANUP_STMT for the nrv.\n        * cp-tree.h: Declare it.\n        * optimize.c (declare_return_variable): Replace the nrv with the\n        return variable.\n        * typeck.c (check_return_expr): Be more flexible on alignment check.\n        Ignore cv-quals when checking for a matching type.\n\nFrom-SVN: r44762", "tree": {"sha": "d9f451da73883db76d0425e08382fce4bb154737", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9f451da73883db76d0425e08382fce4bb154737"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67070ffeb0f10bcc841e87756d18eb85de1ab8a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67070ffeb0f10bcc841e87756d18eb85de1ab8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67070ffeb0f10bcc841e87756d18eb85de1ab8a8"}], "stats": {"total": 139, "additions": 96, "deletions": 43}, "files": [{"sha": "3e0bc8e572f85a6e3f860653a5f997444baa2648", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "patch": "@@ -1,3 +1,8 @@\n+2001-08-08  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* c-common.h (RETURN_NULLIFIED_P): Lose.\n+\t* c-semantics.c (genrtl_return_stmt): Don't check it.\n+\n 2001-08-10  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_add_large_offset_to_sp): New function."}, {"sha": "edd086899c99edeafb7092ddee8b5671df7d2f71", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "patch": "@@ -32,7 +32,6 @@ Boston, MA 02111-1307, USA.  */\n       SCOPE_BEGIN_P (in SCOPE_STMT)\n       DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n       NEW_FOR_SCOPE_P (in FOR_STMT)\n-      RETURN_NULLIFIED_P (in RETURN_STMT)\n       ASM_INPUT_P (in ASM_STMT)\n    1: C_DECLARED_LABEL_FLAG (in LABEL_DECL)\n       STMT_IS_FULL_EXPR_P (in _STMT)\n@@ -597,7 +596,6 @@ extern tree strip_array_types                   PARAMS ((tree));\n    return statement, and whether it should be ignored when expanding\n    (as opposed to inlining).  */\n #define RETURN_EXPR(NODE)       TREE_OPERAND (RETURN_STMT_CHECK (NODE), 0)\n-#define RETURN_NULLIFIED_P(NODE) TREE_LANG_FLAG_0 (RETURN_STMT_CHECK (NODE))\n \n /* EXPR_STMT accessor. This gives the expression associated with an\n    expression statement. */"}, {"sha": "e05ae76dc1460bbe9a6e857afadcc7ab65c2bf9f", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "patch": "@@ -462,13 +462,7 @@ genrtl_return_stmt (stmt)\n {\n   tree expr;\n \n-  /* If RETURN_NULLIFIED_P is set, the frontend has arranged to set up\n-     the return value separately, so just return the return value\n-     itself.  This is used for the C++ named return value optimization.  */\n-  if (RETURN_NULLIFIED_P (stmt))\n-    expr = DECL_RESULT (current_function_decl);\n-  else\n-    expr = RETURN_EXPR (stmt);\n+  expr = RETURN_EXPR (stmt);\n \n   emit_line_note (input_filename, lineno);\n   if (!expr)"}, {"sha": "5f62396a07c0be5b6ed0b5629845f298ec8b766d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "patch": "@@ -1,3 +1,17 @@\n+2001-08-07  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\tSupport named return value optimization for inlines, too.\n+\t* decl.c (finish_function): Nullify returns here.\n+\t* semantics.c (genrtl_start_function): Not here.\n+\t(cp_expand_stmt): Don't mess with CLEANUP_STMTs.\n+\t(nullify_returns_r): No longer static.  Just clear RETURN_EXPR.\n+\tAlso nullify the CLEANUP_STMT for the nrv.\n+\t* cp-tree.h: Declare it.\n+\t* optimize.c (declare_return_variable): Replace the nrv with the\n+\treturn variable.\n+\t* typeck.c (check_return_expr): Be more flexible on alignment check.\n+\tIgnore cv-quals when checking for a matching type.\n+\n 2001-08-09  Richard Henderson  <rth@redhat.com>\n \n \t* decl2.c (finish_objects): Use target hooks instead of"}, {"sha": "cb9063108c6d1676139e0cd6adc4373d6fcba52b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "patch": "@@ -4129,6 +4129,7 @@ extern tree finish_typeof\t\t\tPARAMS ((tree));\n extern void finish_decl_cleanup                 PARAMS ((tree, tree));\n extern void finish_named_return_value           PARAMS ((tree, tree));\n extern void expand_body                         PARAMS ((tree));\n+extern tree nullify_returns_r\t\t      PARAMS ((tree *, int *, void *));\n extern void do_pushlevel                        PARAMS ((void));\n extern tree do_poplevel                         PARAMS ((void));\n extern void finish_mem_initializers             PARAMS ((tree));"}, {"sha": "8fffdb88d82f0e76050484a16110d733a852d1ad", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "patch": "@@ -13955,6 +13955,28 @@ finish_function (flags)\n     my_friendly_abort (122);\n   poplevel (1, 0, 1);\n \n+  /* Set up the named return value optimization, if we can.  Here, we\n+     eliminate the copy from the nrv into the RESULT_DECL and any cleanup\n+     for the nrv.  genrtl_start_function and declare_return_variable\n+     handle making the nrv and RESULT_DECL share space.  */\n+  if (current_function_return_value)\n+    {\n+      tree r = current_function_return_value;\n+      /* This is only worth doing for fns that return in memory--and\n+\t simpler, since we don't have to worry about promoted modes.  */\n+      if (r != error_mark_node\n+\t  && aggregate_value_p (TREE_TYPE (TREE_TYPE (fndecl))))\n+\t{\n+\t  DECL_ALIGN (r) = DECL_ALIGN (DECL_RESULT (fndecl));\n+\t  walk_tree_without_duplicates (&DECL_SAVED_TREE (fndecl),\n+\t\t\t\t\tnullify_returns_r, r);\n+\t}\n+      else\n+\t/* Clear it so genrtl_start_function and declare_return_variable\n+\t   know we're not optimizing.  */\n+\tcurrent_function_return_value = NULL_TREE;\n+    }\n+\n   /* Remember that we were in class scope.  */\n   if (current_class_name)\n     ctype = current_class_type;"}, {"sha": "c0ebb99b794a6cb9a5fec646b39ab3d263f22297", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "patch": "@@ -602,6 +602,23 @@ declare_return_variable (id, use_stmt)\n \t\t     (splay_tree_key) result,\n \t\t     (splay_tree_value) var);\n \n+  if (DECL_SAVED_FUNCTION_DATA (fn))\n+    {\n+      tree nrv = DECL_SAVED_FUNCTION_DATA (fn)->x_return_value;\n+      if (nrv)\n+\t{\n+\t  /* We have a named return value; copy the name and source\n+\t     position so we can get reasonable debugging information, and\n+\t     register the return variable as its equivalent.  */\n+\t  DECL_NAME (var) = DECL_NAME (nrv);\n+\t  DECL_SOURCE_FILE (var) = DECL_SOURCE_FILE (nrv);\n+\t  DECL_SOURCE_LINE (var) = DECL_SOURCE_LINE (nrv);\n+\t  splay_tree_insert (id->decl_map,\n+\t\t\t     (splay_tree_key) nrv,\n+\t\t\t     (splay_tree_value) var);\n+\t}\n+    }\n+\n   /* Build the USE_STMT.  */\n   *use_stmt = build_stmt (EXPR_STMT, var);\n "}, {"sha": "c295bde21a48646d22564bdbac3a59749d088f02", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "patch": "@@ -50,7 +50,6 @@\n \n static tree maybe_convert_cond PARAMS ((tree));\n static tree simplify_aggr_init_exprs_r PARAMS ((tree *, int *, void *));\n-static tree nullify_returns_r PARAMS ((tree *, int *, void *));\n static void deferred_type_access_control PARAMS ((void));\n static void emit_associated_thunks PARAMS ((tree));\n static void genrtl_try_block PARAMS ((tree));\n@@ -2196,11 +2195,7 @@ cp_expand_stmt (t)\n   switch (TREE_CODE (t))\n     {\n     case CLEANUP_STMT:\n-      if (CLEANUP_DECL (t)\n-\t  && CLEANUP_DECL (t) == current_function_return_value)\n-\t/* Don't destroy the chosen named return value.  */;\n-      else\n-\tgenrtl_decl_cleanup (CLEANUP_DECL (t), CLEANUP_EXPR (t));\n+      genrtl_decl_cleanup (CLEANUP_DECL (t), CLEANUP_EXPR (t));\n       break;\n \n     case CTOR_STMT:\n@@ -2504,20 +2499,27 @@ expand_body (fn)\n   timevar_pop (TV_EXPAND);\n }\n \n-/* Helper function for walk_tree, used by genrtl_start_function to override\n-   all the RETURN_STMTs for the named return value optimization.  */\n+/* Helper function for walk_tree, used by finish_function to override all\n+   the RETURN_STMTs and pertinent CLEANUP_STMTs for the named return\n+   value optimization.  */\n \n-static tree\n+tree\n nullify_returns_r (tp, walk_subtrees, data)\n      tree *tp;\n      int *walk_subtrees;\n-     void *data ATTRIBUTE_UNUSED;\n+     void *data;\n {\n-  /* No need to walk into types.  */\n+  tree nrv = (tree) data;\n+\n+  /* No need to walk into types.  There wouldn't be any need to walk into\n+     non-statements, except that we have to consider STMT_EXPRs.  */\n   if (TYPE_P (*tp))\n     *walk_subtrees = 0;\n   else if (TREE_CODE (*tp) == RETURN_STMT)\n-    RETURN_NULLIFIED_P (*tp) = 1;\n+    RETURN_EXPR (*tp) = NULL_TREE;\n+  else if (TREE_CODE (*tp) == CLEANUP_STMT\n+\t   && CLEANUP_DECL (*tp) == nrv)\n+    CLEANUP_EXPR (*tp) = NULL_TREE;\n \n   /* Keep iterating.  */\n   return NULL_TREE;\n@@ -2601,21 +2603,9 @@ genrtl_start_function (fn)\n      cleanup-generated temporaries.  */\n   expand_start_bindings (2);\n \n-  /* Set up the named return value optimization, if we can.  */\n-  if (current_function_return_value\n-      && current_function_return_value != error_mark_node)\n-    {\n-      tree r = current_function_return_value;\n-      /* This is only worth doing for fns that return in memory--and\n-\t simpler, since we don't have to worry about promoted modes.  */\n-      if (aggregate_value_p (TREE_TYPE (TREE_TYPE (fn))))\n-\t{\n-\t  COPY_DECL_RTL (DECL_RESULT (fn), r);\n-\t  DECL_ALIGN (r) = DECL_ALIGN (DECL_RESULT (fn));\n-\t  walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n-\t\t\t\t\tnullify_returns_r, NULL_TREE);\n-\t}\n-    }\n+  /* Give our named return value the same RTL as our RESULT_DECL.  */\n+  if (current_function_return_value)\n+    COPY_DECL_RTL (DECL_RESULT (fn), current_function_return_value);\n }\n \n /* Finish generating the RTL for FN.  */"}, {"sha": "d68e57e62417f9dfae0978ebf92fc3a3738d0ecd", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=07b2f2fd6efdf33ab13eb31fc8ea38668dbf6ed6", "patch": "@@ -6668,15 +6668,25 @@ check_return_expr (retval)\n       && retval != current_class_ref)\n     cp_warning (\"`operator=' should return a reference to `*this'\");\n \n-  /* The fabled Named Return Value optimization: If this is a\n-     value-returning function that always returns the same local\n-     variable, remember it.\n+  /* The fabled Named Return Value optimization, as per [class.copy]/15:\n+\n+     [...]      For  a function with a class return type, if the expression\n+     in the return statement is the name of a local  object,  and  the  cv-\n+     unqualified  type  of  the  local  object  is the same as the function\n+     return type, an implementation is permitted to omit creating the  tem-\n+     porary  object  to  hold  the function return value [...]\n+\n+     So, if this is a value-returning function that always returns the same\n+     local variable, remember it.\n \n      It might be nice to be more flexible, and choose the first suitable\n      variable even if the function sometimes returns something else, but\n      then we run the risk of clobbering the variable we chose if the other\n      returned expression uses the chosen variable somehow.  And people expect\n-     this restriction, anyway.  (jason 2000-11-19) */\n+     this restriction, anyway.  (jason 2000-11-19)\n+\n+     See finish_function, genrtl_start_function, and declare_return_variable\n+     for other pieces of this optimization.  */\n \n   if (fn_returns_value_p && flag_elide_constructors)\n     {\n@@ -6687,9 +6697,11 @@ check_return_expr (retval)\n \t  && DECL_CONTEXT (retval) == current_function_decl\n \t  && ! TREE_STATIC (retval)\n \t  && (DECL_ALIGN (retval)\n-\t      == DECL_ALIGN (DECL_RESULT (current_function_decl)))\n-\t  && same_type_p (TREE_TYPE (retval),\n-\t\t\t  TREE_TYPE (TREE_TYPE (current_function_decl))))\n+\t      >= DECL_ALIGN (DECL_RESULT (current_function_decl)))\n+\t  && same_type_p ((TYPE_MAIN_VARIANT\n+\t\t\t   (TREE_TYPE (retval))),\n+\t\t\t  (TYPE_MAIN_VARIANT\n+\t\t\t   (TREE_TYPE (TREE_TYPE (current_function_decl))))))\n \tcurrent_function_return_value = retval;\n       else\n \tcurrent_function_return_value = error_mark_node;"}]}