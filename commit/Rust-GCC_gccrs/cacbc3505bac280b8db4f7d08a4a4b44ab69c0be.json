{"sha": "cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FjYmMzNTA1YmFjMjgwYjhkYjRmN2QwOGE0YTRiNDRhYjY5YzBiZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-02T14:30:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-02T14:30:19Z"}, "message": "New Language: Ada\n\nFrom-SVN: r45957", "tree": {"sha": "86d33ed164722c539e5c03eb27ae96b8b7667e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d33ed164722c539e5c03eb27ae96b8b7667e75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/comments", "author": null, "committer": null, "parents": [{"sha": "19235870adf79a3422aed017819c537f1d1375ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19235870adf79a3422aed017819c537f1d1375ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19235870adf79a3422aed017819c537f1d1375ac"}], "stats": {"total": 55727, "additions": 55727, "deletions": 0}, "files": [{"sha": "dcfc5053307ab591afa5c596aafdedc63d49cb31", "filename": "gcc/ada/s-addima.adb", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-addima.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-addima.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-addima.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,76 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                  S Y S T E M . A D D R E S S _ I M A G E                 --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.6 $                              --\n+--                                                                          --\n+--   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Unchecked_Conversion;\n+\n+function System.Address_Image (A : Address) return String is\n+\n+   Result  : String (1 .. 2 * Address'Size / Storage_Unit);\n+\n+   type Byte is mod 2 ** 8;\n+   for Byte'Size use 8;\n+\n+   Hexdigs :\n+     constant array (Byte range 0 .. 15) of Character := \"0123456789ABCDEF\";\n+\n+   type Bytes is array (1 .. Address'Size / Storage_Unit) of Byte;\n+   for Bytes'Size use Address'Size;\n+\n+   function To_Bytes is new Unchecked_Conversion (Address, Bytes);\n+\n+   Byte_Sequence : constant Bytes := To_Bytes (A);\n+\n+   LE : constant := Standard'Default_Bit_Order;\n+   BE : constant := 1 - LE;\n+   --  Set to 1/0 for True/False for Little-Endian/Big-Endian\n+\n+   Start : constant Natural := BE * (1) + LE * (Bytes'Length);\n+   Incr  : constant Integer := BE * (1) + LE * (-1);\n+   --  Start and increment for accessing characters of address string\n+\n+   Ptr : Natural;\n+   --  Scan address string\n+\n+begin\n+   Ptr := Start;\n+   for N in Bytes'Range loop\n+      Result (2 * N - 1) := Hexdigs (Byte_Sequence (Ptr) / 16);\n+      Result (2 * N)     := Hexdigs (Byte_Sequence (Ptr) mod 16);\n+      Ptr := Ptr + Incr;\n+   end loop;\n+\n+   return Result;\n+\n+end System.Address_Image;"}, {"sha": "34c2ef7769abd0123f5ece22ef7cec6b50f003f7", "filename": "gcc/ada/s-addima.ads", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-addima.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-addima.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-addima.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,43 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                  S Y S T E M . A D D R E S S _ I M A G E                 --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is a GNAT specific addition which provides a useful debugging\n+--  procedure that gives an (implementation dependent) string which\n+--  identifies an address.\n+\n+function System.Address_Image (A : Address) return String;\n+pragma Pure (System.Address_Image);\n+--  Returns string (hexadecimal digits with upper case letters) representing\n+--  the address (string is 8/16 bytes for 32/64-bit machines)."}, {"sha": "f4c8532ee3fd8e6b9cd87ccf0d4fb7294c6f9329", "filename": "gcc/ada/s-arit64.adb", "status": "added", "additions": 719, "deletions": 0, "changes": 719, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-arit64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-arit64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-arit64.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,719 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                      S Y S T E M . A R I T H _ 6 4                       --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.16 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with GNAT.Exceptions; use GNAT.Exceptions;\n+\n+with Interfaces; use Interfaces;\n+with Unchecked_Conversion;\n+\n+package body System.Arith_64 is\n+\n+   pragma Suppress (Overflow_Check);\n+   pragma Suppress (Range_Check);\n+\n+   subtype Uns64 is Unsigned_64;\n+   function To_Uns is new Unchecked_Conversion (Int64, Uns64);\n+   function To_Int is new Unchecked_Conversion (Uns64, Int64);\n+\n+   subtype Uns32 is Unsigned_32;\n+\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   function \"+\" (A, B : Uns32) return Uns64;\n+   function \"+\" (A : Uns64; B : Uns32) return Uns64;\n+   pragma Inline (\"+\");\n+   --  Length doubling additions\n+\n+   function \"-\" (A : Uns64; B : Uns32) return Uns64;\n+   pragma Inline (\"-\");\n+   --  Length doubling subtraction\n+\n+   function \"*\" (A, B : Uns32) return Uns64;\n+   function \"*\" (A : Uns64; B : Uns32) return Uns64;\n+   pragma Inline (\"*\");\n+   --  Length doubling multiplications\n+\n+   function \"/\" (A : Uns64; B : Uns32) return Uns64;\n+   pragma Inline (\"/\");\n+   --  Length doubling division\n+\n+   function \"rem\" (A : Uns64; B : Uns32) return Uns64;\n+   pragma Inline (\"rem\");\n+   --  Length doubling remainder\n+\n+   function \"&\" (Hi, Lo : Uns32) return Uns64;\n+   pragma Inline (\"&\");\n+   --  Concatenate hi, lo values to form 64-bit result\n+\n+   function Lo (A : Uns64) return Uns32;\n+   pragma Inline (Lo);\n+   --  Low order half of 64-bit value\n+\n+   function Hi (A : Uns64) return Uns32;\n+   pragma Inline (Hi);\n+   --  High order half of 64-bit value\n+\n+   function To_Neg_Int (A : Uns64) return Int64;\n+   --  Convert to negative integer equivalent. If the input is in the range\n+   --  0 .. 2 ** 63, then the corresponding negative signed integer (obtained\n+   --  by negating the given value) is returned, otherwise constraint error\n+   --  is raised.\n+\n+   function To_Pos_Int (A : Uns64) return Int64;\n+   --  Convert to positive integer equivalent. If the input is in the range\n+   --  0 .. 2 ** 63-1, then the corresponding non-negative signed integer is\n+   --  returned, otherwise constraint error is raised.\n+\n+   procedure Raise_Error;\n+   pragma No_Return (Raise_Error);\n+   --  Raise constraint error with appropriate message\n+\n+   ---------\n+   -- \"&\" --\n+   ---------\n+\n+   function \"&\" (Hi, Lo : Uns32) return Uns64 is\n+   begin\n+      return Shift_Left (Uns64 (Hi), 32) or Uns64 (Lo);\n+   end \"&\";\n+\n+   ---------\n+   -- \"*\" --\n+   ---------\n+\n+   function \"*\" (A, B : Uns32) return Uns64 is\n+   begin\n+      return Uns64 (A) * Uns64 (B);\n+   end \"*\";\n+\n+   function \"*\" (A : Uns64; B : Uns32) return Uns64 is\n+   begin\n+      return A * Uns64 (B);\n+   end \"*\";\n+\n+   ---------\n+   -- \"+\" --\n+   ---------\n+\n+   function \"+\" (A, B : Uns32) return Uns64 is\n+   begin\n+      return Uns64 (A) + Uns64 (B);\n+   end \"+\";\n+\n+   function \"+\" (A : Uns64; B : Uns32) return Uns64 is\n+   begin\n+      return A + Uns64 (B);\n+   end \"+\";\n+\n+   ---------\n+   -- \"-\" --\n+   ---------\n+\n+   function \"-\" (A : Uns64; B : Uns32) return Uns64 is\n+   begin\n+      return A - Uns64 (B);\n+   end \"-\";\n+\n+   ---------\n+   -- \"/\" --\n+   ---------\n+\n+   function \"/\" (A : Uns64; B : Uns32) return Uns64 is\n+   begin\n+      return A / Uns64 (B);\n+   end \"/\";\n+\n+   -----------\n+   -- \"rem\" --\n+   -----------\n+\n+   function \"rem\" (A : Uns64; B : Uns32) return Uns64 is\n+   begin\n+      return A rem Uns64 (B);\n+   end \"rem\";\n+\n+   --------------------------\n+   -- Add_With_Ovflo_Check --\n+   --------------------------\n+\n+   function Add_With_Ovflo_Check (X, Y : Int64) return Int64 is\n+      R : constant Int64 := To_Int (To_Uns (X) + To_Uns (Y));\n+\n+   begin\n+      if X >= 0 then\n+         if Y < 0 or else R >= 0 then\n+            return R;\n+         end if;\n+\n+      else -- X < 0\n+         if Y > 0 or else R < 0 then\n+            return R;\n+         end if;\n+      end if;\n+\n+      Raise_Error;\n+   end Add_With_Ovflo_Check;\n+\n+   -------------------\n+   -- Double_Divide --\n+   -------------------\n+\n+   procedure Double_Divide\n+     (X, Y, Z : Int64;\n+      Q, R    : out Int64;\n+      Round   : Boolean)\n+   is\n+      Xu  : constant Uns64 := To_Uns (abs X);\n+      Yu  : constant Uns64 := To_Uns (abs Y);\n+\n+      Yhi : constant Uns32 := Hi (Yu);\n+      Ylo : constant Uns32 := Lo (Yu);\n+\n+      Zu  : constant Uns64 := To_Uns (abs Z);\n+      Zhi : constant Uns32 := Hi (Zu);\n+      Zlo : constant Uns32 := Lo (Zu);\n+\n+      T1, T2     : Uns64;\n+      Du, Qu, Ru : Uns64;\n+      Den_Pos    : Boolean;\n+\n+   begin\n+      if Yu = 0 or else Zu = 0 then\n+         Raise_Error;\n+      end if;\n+\n+      --  Compute Y * Z. Note that if the result overflows 64 bits unsigned,\n+      --  then the rounded result is clearly zero (since the dividend is at\n+      --  most 2**63 - 1, the extra bit of precision is nice here!)\n+\n+      if Yhi /= 0 then\n+         if Zhi /= 0 then\n+            Q := 0;\n+            R := X;\n+            return;\n+         else\n+            T2 := Yhi * Zlo;\n+         end if;\n+\n+      else\n+         if Zhi /= 0 then\n+            T2 := Ylo * Zhi;\n+         else\n+            T2 := 0;\n+         end if;\n+      end if;\n+\n+      T1 := Ylo * Zlo;\n+      T2 := T2 + Hi (T1);\n+\n+      if Hi (T2) /= 0 then\n+         Q := 0;\n+         R := X;\n+         return;\n+      end if;\n+\n+      Du := Lo (T2) & Lo (T1);\n+      Qu := Xu / Du;\n+      Ru := Xu rem Du;\n+\n+      --  Deal with rounding case\n+\n+      if Round and then Ru > (Du - Uns64'(1)) / Uns64'(2) then\n+         Qu := Qu + Uns64'(1);\n+      end if;\n+\n+      --  Set final signs (RM 4.5.5(27-30))\n+\n+      Den_Pos := (Y < 0) = (Z < 0);\n+\n+      --  Case of dividend (X) sign positive\n+\n+      if X >= 0 then\n+         R := To_Int (Ru);\n+\n+         if Den_Pos then\n+            Q := To_Int (Qu);\n+         else\n+            Q := -To_Int (Qu);\n+         end if;\n+\n+      --  Case of dividend (X) sign negative\n+\n+      else\n+         R := -To_Int (Ru);\n+\n+         if Den_Pos then\n+            Q := -To_Int (Qu);\n+         else\n+            Q := To_Int (Qu);\n+         end if;\n+      end if;\n+   end Double_Divide;\n+\n+   --------\n+   -- Hi --\n+   --------\n+\n+   function Hi (A : Uns64) return Uns32 is\n+   begin\n+      return Uns32 (Shift_Right (A, 32));\n+   end Hi;\n+\n+   --------\n+   -- Lo --\n+   --------\n+\n+   function Lo (A : Uns64) return Uns32 is\n+   begin\n+      return Uns32 (A and 16#FFFF_FFFF#);\n+   end Lo;\n+\n+   -------------------------------\n+   -- Multiply_With_Ovflo_Check --\n+   -------------------------------\n+\n+   function Multiply_With_Ovflo_Check (X, Y : Int64) return Int64 is\n+      Xu  : constant Uns64 := To_Uns (abs X);\n+      Xhi : constant Uns32 := Hi (Xu);\n+      Xlo : constant Uns32 := Lo (Xu);\n+\n+      Yu  : constant Uns64 := To_Uns (abs Y);\n+      Yhi : constant Uns32 := Hi (Yu);\n+      Ylo : constant Uns32 := Lo (Yu);\n+\n+      T1, T2 : Uns64;\n+\n+   begin\n+      if Xhi /= 0 then\n+         if Yhi /= 0 then\n+            Raise_Error;\n+         else\n+            T2 := Xhi * Ylo;\n+         end if;\n+\n+      else\n+         if Yhi /= 0 then\n+            T2 := Xlo * Yhi;\n+         else\n+            return X * Y;\n+         end if;\n+      end if;\n+\n+      T1 := Xlo * Ylo;\n+      T2 := T2 + Hi (T1);\n+\n+      if Hi (T2) /= 0 then\n+         Raise_Error;\n+      end if;\n+\n+      T2 := Lo (T2) & Lo (T1);\n+\n+      if X >= 0 then\n+         if Y >= 0 then\n+            return To_Pos_Int (T2);\n+         else\n+            return To_Neg_Int (T2);\n+         end if;\n+      else -- X < 0\n+         if Y < 0 then\n+            return To_Pos_Int (T2);\n+         else\n+            return To_Neg_Int (T2);\n+         end if;\n+      end if;\n+\n+   end Multiply_With_Ovflo_Check;\n+\n+   -----------------\n+   -- Raise_Error --\n+   -----------------\n+\n+   procedure Raise_Error is\n+   begin\n+      Raise_Exception (CE, \"64-bit arithmetic overflow\");\n+   end Raise_Error;\n+\n+   -------------------\n+   -- Scaled_Divide --\n+   -------------------\n+\n+   procedure Scaled_Divide\n+     (X, Y, Z : Int64;\n+      Q, R    : out Int64;\n+      Round   : Boolean)\n+   is\n+      Xu  : constant Uns64 := To_Uns (abs X);\n+      Xhi : constant Uns32 := Hi (Xu);\n+      Xlo : constant Uns32 := Lo (Xu);\n+\n+      Yu  : constant Uns64 := To_Uns (abs Y);\n+      Yhi : constant Uns32 := Hi (Yu);\n+      Ylo : constant Uns32 := Lo (Yu);\n+\n+      Zu  : Uns64 := To_Uns (abs Z);\n+      Zhi : Uns32 := Hi (Zu);\n+      Zlo : Uns32 := Lo (Zu);\n+\n+      D1, D2, D3, D4 : Uns32;\n+      --  The dividend, four digits (D1 is high order)\n+\n+      Q1, Q2 : Uns32;\n+      --  The quotient, two digits (Q1 is high order)\n+\n+      S1, S2, S3 : Uns32;\n+      --  Value to subtract, three digits (S1 is high order)\n+\n+      Qu : Uns64;\n+      Ru : Uns64;\n+      --  Unsigned quotient and remainder\n+\n+      Scale : Natural;\n+      --  Scaling factor used for multiple-precision divide. Dividend and\n+      --  Divisor are multiplied by 2 ** Scale, and the final remainder\n+      --  is divided by the scaling factor. The reason for this scaling\n+      --  is to allow more accurate estimation of quotient digits.\n+\n+      T1, T2, T3 : Uns64;\n+      --  Temporary values\n+\n+   begin\n+      --  First do the multiplication, giving the four digit dividend\n+\n+      T1 := Xlo * Ylo;\n+      D4 := Lo (T1);\n+      D3 := Hi (T1);\n+\n+      if Yhi /= 0 then\n+         T1 := Xlo * Yhi;\n+         T2 := D3 + Lo (T1);\n+         D3 := Lo (T2);\n+         D2 := Hi (T1) + Hi (T2);\n+\n+         if Xhi /= 0 then\n+            T1 := Xhi * Ylo;\n+            T2 := D3 + Lo (T1);\n+            D3 := Lo (T2);\n+            T3 := D2 + Hi (T1);\n+            T3 := T3 + Hi (T2);\n+            D2 := Lo (T3);\n+            D1 := Hi (T3);\n+\n+            T1 := (D1 & D2) + Uns64'(Xhi * Yhi);\n+            D1 := Hi (T1);\n+            D2 := Lo (T1);\n+\n+         else\n+            D1 := 0;\n+         end if;\n+\n+      else\n+         if Xhi /= 0 then\n+            T1 := Xhi * Ylo;\n+            T2 := D3 + Lo (T1);\n+            D3 := Lo (T2);\n+            D2 := Hi (T1) + Hi (T2);\n+\n+         else\n+            D2 := 0;\n+         end if;\n+\n+         D1 := 0;\n+      end if;\n+\n+      --  Now it is time for the dreaded multiple precision division. First\n+      --  an easy case, check for the simple case of a one digit divisor.\n+\n+      if Zhi = 0 then\n+         if D1 /= 0 or else D2 >= Zlo then\n+            Raise_Error;\n+\n+         --  Here we are dividing at most three digits by one digit\n+\n+         else\n+            T1 := D2 & D3;\n+            T2 := Lo (T1 rem Zlo) & D4;\n+\n+            Qu := Lo (T1 / Zlo) & Lo (T2 / Zlo);\n+            Ru := T2 rem Zlo;\n+         end if;\n+\n+      --  If divisor is double digit and too large, raise error\n+\n+      elsif (D1 & D2) >= Zu then\n+         Raise_Error;\n+\n+      --  This is the complex case where we definitely have a double digit\n+      --  divisor and a dividend of at least three digits. We use the classical\n+      --  multiple division algorithm (see  section (4.3.1) of Knuth's \"The Art\n+      --  of Computer Programming\", Vol. 2 for a description (algorithm D).\n+\n+      else\n+         --  First normalize the divisor so that it has the leading bit on.\n+         --  We do this by finding the appropriate left shift amount.\n+\n+         Scale := 0;\n+\n+         if (Zhi and 16#FFFF0000#) = 0 then\n+            Scale := 16;\n+            Zu := Shift_Left (Zu, 16);\n+         end if;\n+\n+         if (Hi (Zu) and 16#FF00_0000#) = 0 then\n+            Scale := Scale + 8;\n+            Zu := Shift_Left (Zu, 8);\n+         end if;\n+\n+         if (Hi (Zu) and 16#F000_0000#) = 0 then\n+            Scale := Scale + 4;\n+            Zu := Shift_Left (Zu, 4);\n+         end if;\n+\n+         if (Hi (Zu) and 16#C000_0000#) = 0 then\n+            Scale := Scale + 2;\n+            Zu := Shift_Left (Zu, 2);\n+         end if;\n+\n+         if (Hi (Zu) and 16#8000_0000#) = 0 then\n+            Scale := Scale + 1;\n+            Zu := Shift_Left (Zu, 1);\n+         end if;\n+\n+         Zhi := Hi (Zu);\n+         Zlo := Lo (Zu);\n+\n+         --  Note that when we scale up the dividend, it still fits in four\n+         --  digits, since we already tested for overflow, and scaling does\n+         --  not change the invariant that (D1 & D2) >= Zu.\n+\n+         T1 := Shift_Left (D1 & D2, Scale);\n+         D1 := Hi (T1);\n+         T2 := Shift_Left (0 & D3, Scale);\n+         D2 := Lo (T1) or Hi (T2);\n+         T3 := Shift_Left (0 & D4, Scale);\n+         D3 := Lo (T2) or Hi (T3);\n+         D4 := Lo (T3);\n+\n+         --  Compute first quotient digit. We have to divide three digits by\n+         --  two digits, and we estimate the quotient by dividing the leading\n+         --  two digits by the leading digit. Given the scaling we did above\n+         --  which ensured the first bit of the divisor is set, this gives an\n+         --  estimate of the quotient that is at most two too high.\n+\n+         if D1 = Zhi then\n+            Q1 := 2 ** 32 - 1;\n+         else\n+            Q1 := Lo ((D1 & D2) / Zhi);\n+         end if;\n+\n+         --  Compute amount to subtract\n+\n+         T1 := Q1 * Zlo;\n+         T2 := Q1 * Zhi;\n+         S3 := Lo (T1);\n+         T1 := Hi (T1) + Lo (T2);\n+         S2 := Lo (T1);\n+         S1 := Hi (T1) + Hi (T2);\n+\n+         --  Adjust quotient digit if it was too high\n+\n+         loop\n+            exit when S1 < D1;\n+\n+            if S1 = D1 then\n+               exit when S2 < D2;\n+\n+               if S2 = D2 then\n+                  exit when S3 <= D3;\n+               end if;\n+            end if;\n+\n+            Q1 := Q1 - 1;\n+\n+            T1 := (S2 & S3) - Zlo;\n+            S3 := Lo (T1);\n+            T1 := (S1 & S2) - Zhi;\n+            S2 := Lo (T1);\n+            S1 := Hi (T1);\n+         end loop;\n+\n+         --  Subtract from dividend (note: do not bother to set D1 to\n+         --  zero, since it is no longer needed in the calculation).\n+\n+         T1 := (D2 & D3) - S3;\n+         D3 := Lo (T1);\n+         T1 := (D1 & Hi (T1)) - S2;\n+         D2 := Lo (T1);\n+\n+         --  Compute second quotient digit in same manner\n+\n+         if D2 = Zhi then\n+            Q2 := 2 ** 32 - 1;\n+         else\n+            Q2 := Lo ((D2 & D3) / Zhi);\n+         end if;\n+\n+         T1 := Q2 * Zlo;\n+         T2 := Q2 * Zhi;\n+         S3 := Lo (T1);\n+         T1 := Hi (T1) + Lo (T2);\n+         S2 := Lo (T1);\n+         S1 := Hi (T1) + Hi (T2);\n+\n+         loop\n+            exit when S1 < D2;\n+\n+            if S1 = D2 then\n+               exit when S2 < D3;\n+\n+               if S2 = D3 then\n+                  exit when S3 <= D4;\n+               end if;\n+            end if;\n+\n+            Q2 := Q2 - 1;\n+\n+            T1 := (S2 & S3) - Zlo;\n+            S3 := Lo (T1);\n+            T1 := (S1 & S2) - Zhi;\n+            S2 := Lo (T1);\n+            S1 := Hi (T1);\n+         end loop;\n+\n+         T1 := (D3 & D4) - S3;\n+         D4 := Lo (T1);\n+         T1 := (D2 & Hi (T1)) - S2;\n+         D3 := Lo (T1);\n+\n+         --  The two quotient digits are now set, and the remainder of the\n+         --  scaled division is in (D3 & D4). To get the remainder for the\n+         --  original unscaled division, we rescale this dividend.\n+         --  We rescale the divisor as well, to make the proper comparison\n+         --  for rounding below.\n+\n+         Qu := Q1 & Q2;\n+         Ru := Shift_Right (D3 & D4, Scale);\n+         Zu := Shift_Right (Zu, Scale);\n+      end if;\n+\n+      --  Deal with rounding case\n+\n+      if Round and then Ru > (Zu - Uns64'(1)) / Uns64'(2) then\n+         Qu := Qu + Uns64 (1);\n+      end if;\n+\n+      --  Set final signs (RM 4.5.5(27-30))\n+\n+      --  Case of dividend (X * Y) sign positive\n+\n+      if (X >= 0 and then Y >= 0)\n+        or else (X < 0 and then Y < 0)\n+      then\n+         R := To_Pos_Int (Ru);\n+\n+         if Z > 0 then\n+            Q := To_Pos_Int (Qu);\n+         else\n+            Q := To_Neg_Int (Qu);\n+         end if;\n+\n+      --  Case of dividend (X * Y) sign negative\n+\n+      else\n+         R := To_Neg_Int (Ru);\n+\n+         if Z > 0 then\n+            Q := To_Neg_Int (Qu);\n+         else\n+            Q := To_Pos_Int (Qu);\n+         end if;\n+      end if;\n+\n+   end Scaled_Divide;\n+\n+   -------------------------------\n+   -- Subtract_With_Ovflo_Check --\n+   -------------------------------\n+\n+   function Subtract_With_Ovflo_Check (X, Y : Int64) return Int64 is\n+      R : constant Int64 := To_Int (To_Uns (X) - To_Uns (Y));\n+\n+   begin\n+      if X >= 0 then\n+         if Y > 0 or else R >= 0 then\n+            return R;\n+         end if;\n+\n+      else -- X < 0\n+         if Y <= 0 or else R < 0 then\n+            return R;\n+         end if;\n+      end if;\n+\n+      Raise_Error;\n+   end Subtract_With_Ovflo_Check;\n+\n+   ----------------\n+   -- To_Neg_Int --\n+   ----------------\n+\n+   function To_Neg_Int (A : Uns64) return Int64 is\n+      R : constant Int64 := -To_Int (A);\n+\n+   begin\n+      if R <= 0 then\n+         return R;\n+      else\n+         Raise_Error;\n+      end if;\n+   end To_Neg_Int;\n+\n+   ----------------\n+   -- To_Pos_Int --\n+   ----------------\n+\n+   function To_Pos_Int (A : Uns64) return Int64 is\n+      R : constant Int64 := To_Int (A);\n+\n+   begin\n+      if R >= 0 then\n+         return R;\n+      else\n+         Raise_Error;\n+      end if;\n+   end To_Pos_Int;\n+\n+end System.Arith_64;"}, {"sha": "d32bbaab2a5e6b76e09100db1504b395182d6839", "filename": "gcc/ada/s-arit64.ads", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-arit64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-arit64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-arit64.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,84 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                      S Y S T E M . A R I T H _ 6 4                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.7 $                              --\n+--                                                                          --\n+--        Copyright (C) 1994,1995,1996 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This unit provides software routines for doing arithmetic on 64-bit\n+--  signed integer values in cases where either overflow checking is\n+--  required, or intermediate results are longer than 64 bits.\n+\n+with Interfaces;\n+\n+package System.Arith_64 is\n+pragma Pure (Arith_64);\n+\n+   subtype Int64 is Interfaces.Integer_64;\n+\n+   function Add_With_Ovflo_Check (X, Y : Int64) return Int64;\n+   --  Raises Constraint_Error if sum of operands overflows 64 bits,\n+   --  otherwise returns the 64-bit signed integer sum.\n+\n+   function Subtract_With_Ovflo_Check (X, Y : Int64) return Int64;\n+   --  Raises Constraint_Error if difference of operands overflows 64\n+   --  bits, otherwise returns the 64-bit signed integer difference.\n+\n+   function Multiply_With_Ovflo_Check (X, Y : Int64) return Int64;\n+   --  Raises Constraint_Error if product of operands overflows 64\n+   --  bits, otherwise returns the 64-bit signed integer difference.\n+\n+   procedure Scaled_Divide\n+     (X, Y, Z : Int64;\n+      Q, R    : out Int64;\n+      Round   : Boolean);\n+   --  Performs the division of (X * Y) / Z, storing the quotient in Q\n+   --  and the remainder in R. Constraint_Error is raised if Z is zero,\n+   --  or if the quotient does not fit in 64-bits. Round indicates if\n+   --  the result should be rounded. If Round is False, then Q, R are\n+   --  the normal quotient and remainder from a truncating division.\n+   --  If Round is True, then Q is the rounded quotient. the remainder\n+   --  R is not affected by the setting of the Round flag.\n+\n+   procedure Double_Divide\n+     (X, Y, Z : Int64;\n+      Q, R    : out Int64;\n+      Round   : Boolean);\n+   --  Performs the division X / (Y * Z), storing the quotient in Q and\n+   --  the remainder in R. Constraint_Error is raised if Y or Z is zero.\n+   --  Round indicates if the result should be rounded. If Round is False,\n+   --  then Q, R are the normal quotient and remainder from a truncating\n+   --  division. If Round is True, then Q is the rounded quotient. The\n+   --  remainder R is not affected by the setting of the Round flag. The\n+   --  result is known to be in range except for the noted possibility of\n+   --  Y or Z being zero, so no other overflow checks are required.\n+\n+end System.Arith_64;"}, {"sha": "c070cc626fac50ae724d2963904b9ac033fd00e0", "filename": "gcc/ada/s-assert.adb", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-assert.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-assert.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-assert.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,49 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                          GNAT RUNTIME COMPONENTS                         --\n+--                                                                          --\n+--                     S Y S T E M . A S S E R T I O N S                    --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.6 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1997 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Exceptions;\n+\n+package body System.Assertions is\n+\n+   --------------------------\n+   -- Raise_Assert_Failure --\n+   --------------------------\n+\n+   procedure Raise_Assert_Failure (Msg : String) is\n+   begin\n+      Ada.Exceptions.Raise_Exception (Assert_Failure'Identity, Msg);\n+   end Raise_Assert_Failure;\n+\n+end System.Assertions;"}, {"sha": "45fe11c88f3e4f21c326de9e92730752f1e50423", "filename": "gcc/ada/s-assert.ads", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-assert.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-assert.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-assert.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,45 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                          GNAT RUNTIME COMPONENTS                         --\n+--                                                                          --\n+--                    S Y S T E M . A S S E R T I O N S                     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.11 $                             --\n+--                                                                          --\n+--          Copyright (C) 1992-1998 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System.Assertions is\n+\n+   Assert_Failure : exception;\n+   --  Exception raised when assertion fails\n+\n+   procedure Raise_Assert_Failure (Msg : String);\n+   pragma No_Return (Raise_Assert_Failure);\n+   --  Called to raise Assert_Failure with given message\n+\n+end System.Assertions;"}, {"sha": "8247ec7a153ef46eeabbf5583cec18fddee50a41", "filename": "gcc/ada/s-asthan.adb", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-asthan.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-asthan.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-asthan.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,75 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNT-TIME COMPONENTS                        --\n+--                                                                          --\n+--                  S Y S T E M . A S T _ H A N D L I N G                   --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--          Copyright (C) 1996-1998 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the dummy version used on non-VMS systems\n+\n+with Ada.Exceptions;\n+with Ada.Task_Identification;\n+with System.Aux_DEC;\n+\n+package body System.AST_Handling is\n+\n+   ------------------------\n+   -- Create_AST_Handler --\n+   ------------------------\n+\n+   function Create_AST_Handler\n+     (Taskid  : Ada.Task_Identification.Task_Id;\n+      Entryno : Natural)\n+      return    System.Aux_DEC.AST_Handler\n+   is\n+   begin\n+      Ada.Exceptions.Raise_Exception\n+        (E       => Program_Error'Identity,\n+         Message => \"AST is implemented only on VMS systems\");\n+\n+      return System.Aux_DEC.No_AST_Handler;\n+   end Create_AST_Handler;\n+\n+   procedure Expand_AST_Packet_Pool\n+     (Requested_Packets : in Natural;\n+      Actual_Number     : out Natural;\n+      Total_Number      : out Natural)\n+   is\n+   begin\n+      Ada.Exceptions.Raise_Exception\n+        (E       => Program_Error'Identity,\n+         Message => \"AST is implemented only on VMS systems\");\n+\n+      Actual_Number := 0;\n+      Total_Number := 0;\n+   end Expand_AST_Packet_Pool;\n+\n+end System.AST_Handling;"}, {"sha": "4f19483a26e67fd2b28874064e23e4af9642801c", "filename": "gcc/ada/s-asthan.ads", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-asthan.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-asthan.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-asthan.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,63 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                  S Y S T E M . A S T _ H A N D L I N G                   --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $                              --\n+--                                                                          --\n+--            Copyright (C) 1996 Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Runtime support for Handling of AST's (Used on VMS implementations only)\n+\n+\n+with Ada.Task_Identification;\n+with System;\n+with System.Aux_DEC;\n+\n+package System.AST_Handling is\n+\n+   function Create_AST_Handler\n+     (Taskid  : Ada.Task_Identification.Task_Id;\n+      Entryno : Natural)\n+      return    System.Aux_DEC.AST_Handler;\n+   --  This function implements the appropriate semantics for a use of the\n+   --  AST_Entry pragma. See body for details of implementation approach.\n+   --  The parameters are the Task_Id for the task containing the entry\n+   --  and the entry Index for the specified entry.\n+\n+   procedure Expand_AST_Packet_Pool\n+     (Requested_Packets : in Natural;\n+      Actual_Number     : out Natural;\n+      Total_Number      : out Natural);\n+   --  This function takes a request for zero or more extra AST packets and\n+   --  returns the number actually added to the pool and the total number\n+   --  now available or in use.\n+   --  This function is not yet fully implemented.\n+\n+end System.AST_Handling;"}, {"sha": "7d2842cfcba729c7347cfefca9d0abf49b5c4f6b", "filename": "gcc/ada/s-atacco.adb", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-atacco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-atacco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atacco.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,63 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+-- S Y S T E M . A D D R E S S _ T O _ A C C E S S _ C O N V E R S I O N S  --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Unchecked_Conversion;\n+package body System.Address_To_Access_Conversions is\n+\n+   ----------------\n+   -- To_Address --\n+   ----------------\n+\n+   function To_Address (Value : Object_Pointer) return Address is\n+   begin\n+      if Value = null then\n+         return Null_Address;\n+      else\n+         return Value.all'Address;\n+      end if;\n+   end To_Address;\n+\n+   ----------------\n+   -- To_Pointer --\n+   ----------------\n+\n+   function To_Pointer (Value : Address) return Object_Pointer is\n+      function A_To_P is new Unchecked_Conversion (Address, Object_Pointer);\n+\n+   begin\n+      return A_To_P (Value);\n+   end To_Pointer;\n+\n+end System.Address_To_Access_Conversions;"}, {"sha": "e5db1ee268a11edf010cbbd92808d940b45ec13a", "filename": "gcc/ada/s-atacco.ads", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-atacco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-atacco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atacco.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,33 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+-- S Y S T E M . A D D R E S S _ T O _ A C C E S S _ C O N V E R S I O N S  --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.3 $                              --\n+--                                                                          --\n+-- This specification is adapted from the Ada Reference Manual for use with --\n+-- GNAT.  In accordance with the copyright of that document, you can freely --\n+-- copy and modify this specification,  provided that if you redistribute a --\n+-- modified version,  any changes that you have made are clearly indicated. --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+generic\n+   type Object (<>) is limited private;\n+\n+package System.Address_To_Access_Conversions is\n+pragma Preelaborate (Address_To_Access_Conversions);\n+\n+   type Object_Pointer is access all Object;\n+   for Object_Pointer'Size use Standard'Address_Size;\n+\n+   function To_Pointer (Value : Address)        return Object_Pointer;\n+   function To_Address (Value : Object_Pointer) return Address;\n+\n+   pragma Convention (Intrinsic, To_Pointer);\n+   pragma Convention (Intrinsic, To_Address);\n+\n+end System.Address_To_Access_Conversions;"}, {"sha": "e16cf6acbb0c27c9f128cc995cc8e7f4fac094e1", "filename": "gcc/ada/s-auxdec.adb", "status": "added", "additions": 709, "deletions": 0, "changes": 709, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-auxdec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-auxdec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,709 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                       S Y S T E M . A U X _ D E C                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.11 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/Or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  Or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- Or FITNESS FOr A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- fOr  mOre details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, Or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was Originally developed  by the GNAT team at  New YOrk University. --\n+-- It is now maintained by Ada COre Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Style_Checks (All_Checks);\n+--  Turn off alpha ordering check on subprograms, this unit is laid\n+--  out to correspond to the declarations in the DEC 83 System unit.\n+\n+with System.Soft_Links;\n+\n+package body System.Aux_DEC is\n+\n+   package SSL renames System.Soft_Links;\n+\n+   -----------------------------------\n+   -- Operations on Largest_Integer --\n+   -----------------------------------\n+\n+   --  It would be nice to replace these with intrinsics, but that does\n+   --  not work yet (the back end would be ok, but GNAT itself objects)\n+\n+   type LIU is mod 2 ** Largest_Integer'Size;\n+   --  Unsigned type of same length as Largest_Integer\n+\n+   function To_LI   is new Unchecked_Conversion (LIU, Largest_Integer);\n+   function From_LI is new Unchecked_Conversion (Largest_Integer, LIU);\n+\n+   function \"not\" (Left : Largest_Integer) return Largest_Integer is\n+   begin\n+      return To_LI (not From_LI (Left));\n+   end \"not\";\n+\n+   function \"and\" (Left, Right : Largest_Integer) return Largest_Integer is\n+   begin\n+      return To_LI (From_LI (Left) and From_LI (Right));\n+   end \"and\";\n+\n+   function \"or\"  (Left, Right : Largest_Integer) return Largest_Integer is\n+   begin\n+      return To_LI (From_LI (Left) or From_LI (Right));\n+   end \"or\";\n+\n+   function \"xor\" (Left, Right : Largest_Integer) return Largest_Integer is\n+   begin\n+      return To_LI (From_LI (Left) xor From_LI (Right));\n+   end \"xor\";\n+\n+   --------------------------------------\n+   -- Arithmetic Operations on Address --\n+   --------------------------------------\n+\n+   --  It would be nice to replace these with intrinsics, but that does\n+   --  not work yet (the back end would be ok, but GNAT itself objects)\n+\n+   Asiz : constant Integer := Integer (Address'Size) - 1;\n+\n+   type SA is range -(2 ** Asiz) .. 2 ** Asiz - 1;\n+   --  Signed type of same size as Address\n+\n+   function To_A   is new Unchecked_Conversion (SA, Address);\n+   function From_A is new Unchecked_Conversion (Address, SA);\n+\n+   function \"+\" (Left : Address; Right : Integer) return Address is\n+   begin\n+      return To_A (From_A (Left) + SA (Right));\n+   end \"+\";\n+\n+   function \"+\" (Left : Integer; Right : Address) return Address is\n+   begin\n+      return To_A (SA (Left) + From_A (Right));\n+   end \"+\";\n+\n+   function \"-\" (Left : Address; Right : Address) return Integer is\n+      pragma Unsuppress (All_Checks);\n+      --  Because this can raise Constraint_Error for 64-bit addresses\n+\n+   begin\n+      return Integer (From_A (Left - Right));\n+   end \"-\";\n+\n+   function \"-\" (Left : Address; Right : Integer) return Address is\n+   begin\n+      return To_A (From_A (Left) - SA (Right));\n+   end \"-\";\n+\n+   ------------------------\n+   -- Fetch_From_Address --\n+   ------------------------\n+\n+   function Fetch_From_Address (A : Address) return Target is\n+      type T_Ptr is access all Target;\n+      function To_T_Ptr is new Unchecked_Conversion (Address, T_Ptr);\n+      Ptr : constant T_Ptr := To_T_Ptr (A);\n+\n+   begin\n+      return Ptr.all;\n+   end Fetch_From_Address;\n+\n+   -----------------------\n+   -- Assign_To_Address --\n+   -----------------------\n+\n+   procedure Assign_To_Address (A : Address; T : Target) is\n+      type T_Ptr is access all Target;\n+      function To_T_Ptr is new Unchecked_Conversion (Address, T_Ptr);\n+      Ptr : constant T_Ptr := To_T_Ptr (A);\n+\n+   begin\n+      Ptr.all := T;\n+   end Assign_To_Address;\n+\n+   ---------------------------------\n+   -- Operations on Unsigned_Byte --\n+   ---------------------------------\n+\n+   --  It would be nice to replace these with intrinsics, but that does\n+   --  not work yet (the back end would be ok, but GNAT itself objects)\n+\n+   type BU is mod 2 ** Unsigned_Byte'Size;\n+   --  Unsigned type of same length as Unsigned_Byte\n+\n+   function To_B   is new Unchecked_Conversion (BU, Unsigned_Byte);\n+   function From_B is new Unchecked_Conversion (Unsigned_Byte, BU);\n+\n+   function \"not\" (Left : Unsigned_Byte) return Unsigned_Byte is\n+   begin\n+      return To_B (not From_B (Left));\n+   end \"not\";\n+\n+   function \"and\" (Left, Right : Unsigned_Byte) return Unsigned_Byte is\n+   begin\n+      return To_B (From_B (Left) and From_B (Right));\n+   end \"and\";\n+\n+   function \"or\"  (Left, Right : Unsigned_Byte) return Unsigned_Byte is\n+   begin\n+      return To_B (From_B (Left) or From_B (Right));\n+   end \"or\";\n+\n+   function \"xor\" (Left, Right : Unsigned_Byte) return Unsigned_Byte is\n+   begin\n+      return To_B (From_B (Left) xor From_B (Right));\n+   end \"xor\";\n+\n+   ---------------------------------\n+   -- Operations on Unsigned_Word --\n+   ---------------------------------\n+\n+   --  It would be nice to replace these with intrinsics, but that does\n+   --  not work yet (the back end would be ok, but GNAT itself objects)\n+\n+   type WU is mod 2 ** Unsigned_Word'Size;\n+   --  Unsigned type of same length as Unsigned_Word\n+\n+   function To_W   is new Unchecked_Conversion (WU, Unsigned_Word);\n+   function From_W is new Unchecked_Conversion (Unsigned_Word, WU);\n+\n+   function \"not\" (Left : Unsigned_Word) return Unsigned_Word is\n+   begin\n+      return To_W (not From_W (Left));\n+   end \"not\";\n+\n+   function \"and\" (Left, Right : Unsigned_Word) return Unsigned_Word is\n+   begin\n+      return To_W (From_W (Left) and From_W (Right));\n+   end \"and\";\n+\n+   function \"or\"  (Left, Right : Unsigned_Word) return Unsigned_Word is\n+   begin\n+      return To_W (From_W (Left) or From_W (Right));\n+   end \"or\";\n+\n+   function \"xor\" (Left, Right : Unsigned_Word) return Unsigned_Word is\n+   begin\n+      return To_W (From_W (Left) xor From_W (Right));\n+   end \"xor\";\n+\n+   -------------------------------------\n+   -- Operations on Unsigned_Longword --\n+   -------------------------------------\n+\n+   --  It would be nice to replace these with intrinsics, but that does\n+   --  not work yet (the back end would be ok, but GNAT itself objects)\n+\n+   type LWU is mod 2 ** Unsigned_Longword'Size;\n+   --  Unsigned type of same length as Unsigned_Longword\n+\n+   function To_LW   is new Unchecked_Conversion (LWU, Unsigned_Longword);\n+   function From_LW is new Unchecked_Conversion (Unsigned_Longword, LWU);\n+\n+   function \"not\" (Left : Unsigned_Longword) return Unsigned_Longword is\n+   begin\n+      return To_LW (not From_LW (Left));\n+   end \"not\";\n+\n+   function \"and\" (Left, Right : Unsigned_Longword) return Unsigned_Longword is\n+   begin\n+      return To_LW (From_LW (Left) and From_LW (Right));\n+   end \"and\";\n+\n+   function \"or\"  (Left, Right : Unsigned_Longword) return Unsigned_Longword is\n+   begin\n+      return To_LW (From_LW (Left) or From_LW (Right));\n+   end \"or\";\n+\n+   function \"xor\" (Left, Right : Unsigned_Longword) return Unsigned_Longword is\n+   begin\n+      return To_LW (From_LW (Left) xor From_LW (Right));\n+   end \"xor\";\n+\n+   -------------------------------\n+   -- Operations on Unsigned_32 --\n+   -------------------------------\n+\n+   --  It would be nice to replace these with intrinsics, but that does\n+   --  not work yet (the back end would be ok, but GNAT itself objects)\n+\n+   type U32 is mod 2 ** Unsigned_32'Size;\n+   --  Unsigned type of same length as Unsigned_32\n+\n+   function To_U32   is new Unchecked_Conversion (U32, Unsigned_32);\n+   function From_U32 is new Unchecked_Conversion (Unsigned_32, U32);\n+\n+   function \"not\" (Left : Unsigned_32) return Unsigned_32 is\n+   begin\n+      return To_U32 (not From_U32 (Left));\n+   end \"not\";\n+\n+   function \"and\" (Left, Right : Unsigned_32) return Unsigned_32 is\n+   begin\n+      return To_U32 (From_U32 (Left) and From_U32 (Right));\n+   end \"and\";\n+\n+   function \"or\"  (Left, Right : Unsigned_32) return Unsigned_32 is\n+   begin\n+      return To_U32 (From_U32 (Left) or From_U32 (Right));\n+   end \"or\";\n+\n+   function \"xor\" (Left, Right : Unsigned_32) return Unsigned_32 is\n+   begin\n+      return To_U32 (From_U32 (Left) xor From_U32 (Right));\n+   end \"xor\";\n+\n+   -------------------------------------\n+   -- Operations on Unsigned_Quadword --\n+   -------------------------------------\n+\n+   --  It would be nice to replace these with intrinsics, but that does\n+   --  not work yet (the back end would be ok, but GNAT itself objects)\n+\n+   type QWU is mod 2 ** 64;  -- 64 = Unsigned_Quadword'Size\n+   --  Unsigned type of same length as Unsigned_Quadword\n+\n+   function To_QW   is new Unchecked_Conversion (QWU, Unsigned_Quadword);\n+   function From_QW is new Unchecked_Conversion (Unsigned_Quadword, QWU);\n+\n+   function \"not\" (Left : Unsigned_Quadword) return Unsigned_Quadword is\n+   begin\n+      return To_QW (not From_QW (Left));\n+   end \"not\";\n+\n+   function \"and\" (Left, Right : Unsigned_Quadword) return Unsigned_Quadword is\n+   begin\n+      return To_QW (From_QW (Left) and From_QW (Right));\n+   end \"and\";\n+\n+   function \"or\"  (Left, Right : Unsigned_Quadword) return Unsigned_Quadword is\n+   begin\n+      return To_QW (From_QW (Left) or From_QW (Right));\n+   end \"or\";\n+\n+   function \"xor\" (Left, Right : Unsigned_Quadword) return Unsigned_Quadword is\n+   begin\n+      return To_QW (From_QW (Left) xor From_QW (Right));\n+   end \"xor\";\n+\n+   -----------------------\n+   -- Clear_Interlocked --\n+   -----------------------\n+\n+   procedure Clear_Interlocked\n+     (Bit       : in out Boolean;\n+      Old_Value : out Boolean)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Old_Value := Bit;\n+      Bit := False;\n+      SSL.Unlock_Task.all;\n+   end Clear_Interlocked;\n+\n+   procedure Clear_Interlocked\n+     (Bit          : in out Boolean;\n+      Old_Value    : out Boolean;\n+      Retry_Count  : in Natural;\n+      Success_Flag : out Boolean)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Old_Value := Bit;\n+      Bit := False;\n+      Success_Flag := True;\n+      SSL.Unlock_Task.all;\n+   end Clear_Interlocked;\n+\n+   ---------------------\n+   -- Set_Interlocked --\n+   ---------------------\n+\n+   procedure Set_Interlocked\n+     (Bit       : in out Boolean;\n+      Old_Value : out Boolean)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Old_Value := Bit;\n+      Bit := True;\n+      SSL.Unlock_Task.all;\n+   end Set_Interlocked;\n+\n+   procedure Set_Interlocked\n+     (Bit          : in out Boolean;\n+      Old_Value    : out Boolean;\n+      Retry_Count  : in Natural;\n+      Success_Flag : out Boolean)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Old_Value := Bit;\n+      Bit := True;\n+      Success_Flag := True;\n+      SSL.Unlock_Task.all;\n+   end Set_Interlocked;\n+\n+   ---------------------\n+   -- Add_Interlocked --\n+   ---------------------\n+\n+   procedure Add_Interlocked\n+     (Addend       : in Short_Integer;\n+      Augend       : in out Aligned_Word;\n+      Sign         : out Integer)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Augend.Value := Augend.Value + Addend;\n+\n+      if Augend.Value < 0 then\n+         Sign := -1;\n+      elsif Augend.Value > 0 then\n+         Sign := +1;\n+      else\n+         Sign := 0;\n+      end if;\n+\n+      SSL.Unlock_Task.all;\n+   end Add_Interlocked;\n+\n+   ----------------\n+   -- Add_Atomic --\n+   ----------------\n+\n+   procedure Add_Atomic\n+     (To           : in out Aligned_Integer;\n+      Amount       : in Integer)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      To.Value := To.Value + Amount;\n+      SSL.Unlock_Task.all;\n+   end Add_Atomic;\n+\n+   procedure Add_Atomic\n+     (To           : in out Aligned_Integer;\n+      Amount       : in Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Integer;\n+      Success_Flag : out Boolean)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Old_Value := To.Value;\n+      To.Value  := To.Value + Amount;\n+      Success_Flag := True;\n+      SSL.Unlock_Task.all;\n+   end Add_Atomic;\n+\n+   procedure Add_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      Amount       : in Long_Integer)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      To.Value := To.Value + Amount;\n+      SSL.Unlock_Task.all;\n+   end Add_Atomic;\n+\n+   procedure Add_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      Amount       : in Long_Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Long_Integer;\n+      Success_Flag : out Boolean)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Old_Value := To.Value;\n+      To.Value  := To.Value + Amount;\n+      Success_Flag := True;\n+      SSL.Unlock_Task.all;\n+   end Add_Atomic;\n+\n+   ----------------\n+   -- And_Atomic --\n+   ----------------\n+\n+   type IU is mod 2 ** Integer'Size;\n+   type LU is mod 2 ** Long_Integer'Size;\n+\n+   function To_IU   is new Unchecked_Conversion (Integer, IU);\n+   function From_IU is new Unchecked_Conversion (IU, Integer);\n+\n+   function To_LU   is new Unchecked_Conversion (Long_Integer, LU);\n+   function From_LU is new Unchecked_Conversion (LU, Long_Integer);\n+\n+   procedure And_Atomic\n+     (To           : in out Aligned_Integer;\n+      From         : in Integer)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      To.Value  := From_IU (To_IU (To.Value) and To_IU (From));\n+      SSL.Unlock_Task.all;\n+   end And_Atomic;\n+\n+   procedure And_Atomic\n+     (To           : in out Aligned_Integer;\n+      From         : in Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Integer;\n+      Success_Flag : out Boolean)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Old_Value := To.Value;\n+      To.Value  := From_IU (To_IU (To.Value) and To_IU (From));\n+      Success_Flag := True;\n+      SSL.Unlock_Task.all;\n+   end And_Atomic;\n+\n+   procedure And_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      From         : in Long_Integer)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      To.Value  := From_LU (To_LU (To.Value) and To_LU (From));\n+      SSL.Unlock_Task.all;\n+   end And_Atomic;\n+\n+   procedure And_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      From         : in Long_Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Long_Integer;\n+      Success_Flag : out Boolean)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Old_Value := To.Value;\n+      To.Value  := From_LU (To_LU (To.Value) and To_LU (From));\n+      Success_Flag := True;\n+      SSL.Unlock_Task.all;\n+   end And_Atomic;\n+\n+   ---------------\n+   -- Or_Atomic --\n+   ---------------\n+\n+   procedure Or_Atomic\n+     (To           : in out Aligned_Integer;\n+      From         : in Integer)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      To.Value  := From_IU (To_IU (To.Value) or To_IU (From));\n+      SSL.Unlock_Task.all;\n+   end Or_Atomic;\n+\n+   procedure Or_Atomic\n+     (To           : in out Aligned_Integer;\n+      From         : in Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Integer;\n+      Success_Flag : out Boolean)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Old_Value := To.Value;\n+      To.Value  := From_IU (To_IU (To.Value) or To_IU (From));\n+      Success_Flag := True;\n+      SSL.Unlock_Task.all;\n+   end Or_Atomic;\n+\n+   procedure Or_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      From         : in Long_Integer)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      To.Value  := From_LU (To_LU (To.Value) or To_LU (From));\n+      SSL.Unlock_Task.all;\n+   end Or_Atomic;\n+\n+   procedure Or_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      From         : in Long_Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Long_Integer;\n+      Success_Flag : out Boolean)\n+   is\n+   begin\n+      SSL.Lock_Task.all;\n+      Old_Value := To.Value;\n+      To.Value  := From_LU (To_LU (To.Value) or To_LU (From));\n+      Success_Flag := True;\n+      SSL.Unlock_Task.all;\n+   end Or_Atomic;\n+\n+   ------------------------------------\n+   -- Declarations for Queue Objects --\n+   ------------------------------------\n+\n+   type QR;\n+\n+   type QR_Ptr is access QR;\n+\n+   type QR is record\n+      Forward  : QR_Ptr;\n+      Backward : QR_Ptr;\n+   end record;\n+\n+   function To_QR_Ptr   is new Unchecked_Conversion (Address, QR_Ptr);\n+   function From_QR_Ptr is new Unchecked_Conversion (QR_Ptr, Address);\n+\n+   ------------\n+   -- Insqhi --\n+   ------------\n+\n+   procedure Insqhi\n+     (Item   : in  Address;\n+      Header : in  Address;\n+      Status : out Insq_Status)\n+   is\n+      Hedr : constant QR_Ptr := To_QR_Ptr (Header);\n+      Next : constant QR_Ptr := Hedr.Forward;\n+      Itm  : constant QR_Ptr := To_QR_Ptr (Item);\n+\n+   begin\n+      SSL.Lock_Task.all;\n+\n+      Itm.Forward  := Next;\n+      Itm.Backward := Hedr;\n+      Hedr.Forward := Itm;\n+\n+      if Next = null then\n+         Status := OK_First;\n+\n+      else\n+         Next.Backward := Itm;\n+         Status := OK_Not_First;\n+      end if;\n+\n+      SSL.Unlock_Task.all;\n+   end Insqhi;\n+\n+   ------------\n+   -- Remqhi --\n+   ------------\n+\n+   procedure Remqhi\n+     (Header : in  Address;\n+      Item   : out Address;\n+      Status : out Remq_Status)\n+   is\n+      Hedr : constant QR_Ptr := To_QR_Ptr (Header);\n+      Next : constant QR_Ptr := Hedr.Forward;\n+\n+   begin\n+      SSL.Lock_Task.all;\n+\n+      Item := From_QR_Ptr (Next);\n+\n+      if Next = null then\n+         Status := Fail_Was_Empty;\n+\n+      else\n+         Hedr.Forward := To_QR_Ptr (Item).Forward;\n+\n+         if Hedr.Forward = null then\n+            Status := OK_Empty;\n+\n+         else\n+            Hedr.Forward.Backward := Hedr;\n+            Status := OK_Not_Empty;\n+         end if;\n+      end if;\n+\n+      SSL.Unlock_Task.all;\n+   end Remqhi;\n+\n+   ------------\n+   -- Insqti --\n+   ------------\n+\n+   procedure Insqti\n+     (Item   : in  Address;\n+      Header : in  Address;\n+      Status : out Insq_Status)\n+   is\n+      Hedr : constant QR_Ptr := To_QR_Ptr (Header);\n+      Prev : constant QR_Ptr := Hedr.Backward;\n+      Itm  : constant QR_Ptr := To_QR_Ptr (Item);\n+\n+   begin\n+      SSL.Lock_Task.all;\n+\n+      Itm.Backward  := Prev;\n+      Itm.Forward   := Hedr;\n+      Hedr.Backward := Itm;\n+\n+      if Prev = null then\n+         Status := OK_First;\n+\n+      else\n+         Prev.Forward := Itm;\n+         Status := OK_Not_First;\n+      end if;\n+\n+      SSL.Unlock_Task.all;\n+   end Insqti;\n+\n+   ------------\n+   -- Remqti --\n+   ------------\n+\n+   procedure Remqti\n+     (Header : in  Address;\n+      Item   : out Address;\n+      Status : out Remq_Status)\n+   is\n+      Hedr : constant QR_Ptr := To_QR_Ptr (Header);\n+      Prev : constant QR_Ptr := Hedr.Backward;\n+\n+   begin\n+      SSL.Lock_Task.all;\n+\n+      Item := From_QR_Ptr (Prev);\n+\n+      if Prev = null then\n+         Status := Fail_Was_Empty;\n+\n+      else\n+         Hedr.Backward := To_QR_Ptr (Item).Backward;\n+\n+         if Hedr.Backward = null then\n+            Status := OK_Empty;\n+\n+         else\n+            Hedr.Backward.Forward := Hedr;\n+            Status := OK_Not_Empty;\n+         end if;\n+      end if;\n+\n+      SSL.Unlock_Task.all;\n+   end Remqti;\n+\n+end System.Aux_DEC;"}, {"sha": "fc1f4ac653a4f5bc88fd4f544e22ab013003b0fd", "filename": "gcc/ada/s-auxdec.ads", "status": "added", "additions": 556, "deletions": 0, "changes": 556, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-auxdec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-auxdec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,556 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                       S Y S T E M . A U X _ D E C                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.24 $\n+--                                                                          --\n+--          Copyright (C) 1996-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS For A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains definitions that are designed to be compatible\n+--  with the extra definitions in package System for DEC Ada implementations.\n+\n+--  These definitions can be used directly by withing this package, or merged\n+--  with System using pragma Extend_System (Aux_DEC)\n+\n+with Unchecked_Conversion;\n+\n+package System.Aux_DEC is\n+pragma Elaborate_Body (Aux_DEC);\n+\n+   type Integer_8  is range -2 **  (8 - 1) .. +2 **  (8 - 1) - 1;\n+   for Integer_8'Size  use  8;\n+\n+   type Integer_16 is range -2 ** (16 - 1) .. +2 ** (16 - 1) - 1;\n+   for Integer_16'Size use 16;\n+\n+   type Integer_32 is range -2 ** (32 - 1) .. +2 ** (32 - 1) - 1;\n+   for Integer_32'Size use 32;\n+\n+   type Integer_64 is range -2 ** (64 - 1) .. +2 ** (64 - 1) - 1;\n+   for Integer_64'Size use 64;\n+\n+   type Largest_Integer is range Min_Int .. Max_Int;\n+\n+   type AST_Handler is limited private;\n+\n+   No_AST_Handler : constant AST_Handler;\n+\n+   type Type_Class is\n+     (Type_Class_Enumeration,\n+      Type_Class_Integer,\n+      Type_Class_Fixed_Point,\n+      Type_Class_Floating_Point,\n+      Type_Class_Array,\n+      Type_Class_Record,\n+      Type_Class_Access,\n+      Type_Class_Task,             -- also in Ada 95 protected\n+      Type_Class_Address);\n+\n+   function \"not\" (Left        : Largest_Integer) return Largest_Integer;\n+   function \"and\" (Left, Right : Largest_Integer) return Largest_Integer;\n+   function \"or\"  (Left, Right : Largest_Integer) return Largest_Integer;\n+   function \"xor\" (Left, Right : Largest_Integer) return Largest_Integer;\n+\n+   Address_Zero : constant Address;\n+   No_Addr      : constant Address;\n+   Address_Size : constant := Standard'Address_Size;\n+\n+   function \"+\" (Left : Address; Right : Integer) return Address;\n+   function \"+\" (Left : Integer; Right : Address) return Address;\n+   function \"-\" (Left : Address; Right : Address) return Integer;\n+   function \"-\" (Left : Address; Right : Integer) return Address;\n+\n+   generic\n+      type Target is private;\n+   function Fetch_From_Address (A : Address) return Target;\n+\n+   generic\n+      type Target is private;\n+   procedure Assign_To_Address (A : Address; T : Target);\n+\n+   --  Floating point type declarations for VAX floating point data types\n+\n+   pragma Warnings (Off);\n+\n+   type F_Float is digits 6;\n+   pragma Float_Representation (VAX_Float, F_Float);\n+\n+   type D_Float is digits 9;\n+   pragma Float_Representation (Vax_Float, D_Float);\n+\n+   type G_Float is digits 15;\n+   pragma Float_Representation (Vax_Float, G_Float);\n+\n+   --  Floating point type declarations for IEEE floating point data types\n+\n+   type IEEE_Single_Float is digits 6;\n+   pragma Float_Representation (IEEE_Float, IEEE_Single_Float);\n+\n+   type IEEE_Double_Float is digits 15;\n+   pragma Float_Representation (IEEE_Float, IEEE_Double_Float);\n+\n+   pragma Warnings (On);\n+\n+   Non_Ada_Error : exception;\n+\n+   --  Hardware-oriented types and functions\n+\n+   type Bit_Array is array (Integer range <>) of Boolean;\n+   pragma Pack (Bit_Array);\n+\n+   subtype Bit_Array_8  is Bit_Array (0 ..  7);\n+   subtype Bit_Array_16 is Bit_Array (0 .. 15);\n+   subtype Bit_Array_32 is Bit_Array (0 .. 31);\n+   subtype Bit_Array_64 is Bit_Array (0 .. 63);\n+\n+   type Unsigned_Byte is range 0 .. 255;\n+   for  Unsigned_Byte'Size use 8;\n+\n+   function \"not\" (Left        : Unsigned_Byte) return Unsigned_Byte;\n+   function \"and\" (Left, Right : Unsigned_Byte) return Unsigned_Byte;\n+   function \"or\"  (Left, Right : Unsigned_Byte) return Unsigned_Byte;\n+   function \"xor\" (Left, Right : Unsigned_Byte) return Unsigned_Byte;\n+\n+   function To_Unsigned_Byte (X : Bit_Array_8) return Unsigned_Byte;\n+   function To_Bit_Array_8   (X : Unsigned_Byte) return Bit_Array_8;\n+\n+   type Unsigned_Byte_Array is array (Integer range <>) of Unsigned_Byte;\n+\n+   type Unsigned_Word is range 0 .. 65535;\n+   for  Unsigned_Word'Size use 16;\n+\n+   function \"not\" (Left        : Unsigned_Word) return Unsigned_Word;\n+   function \"and\" (Left, Right : Unsigned_Word) return Unsigned_Word;\n+   function \"or\"  (Left, Right : Unsigned_Word) return Unsigned_Word;\n+   function \"xor\" (Left, Right : Unsigned_Word) return Unsigned_Word;\n+\n+   function To_Unsigned_Word (X : Bit_Array_16) return Unsigned_Word;\n+   function To_Bit_Array_16  (X : Unsigned_Word) return Bit_Array_16;\n+\n+   type Unsigned_Word_Array is array (Integer range <>) of Unsigned_Word;\n+\n+   type Unsigned_Longword is range -2_147_483_648 .. 2_147_483_647;\n+   for  Unsigned_Longword'Size use 32;\n+\n+   function \"not\" (Left        : Unsigned_Longword) return Unsigned_Longword;\n+   function \"and\" (Left, Right : Unsigned_Longword) return Unsigned_Longword;\n+   function \"or\"  (Left, Right : Unsigned_Longword) return Unsigned_Longword;\n+   function \"xor\" (Left, Right : Unsigned_Longword) return Unsigned_Longword;\n+\n+   function To_Unsigned_Longword (X : Bit_Array_32) return Unsigned_Longword;\n+   function To_Bit_Array_32 (X : Unsigned_Longword) return Bit_Array_32;\n+\n+   type Unsigned_Longword_Array is\n+      array (Integer range <>) of Unsigned_Longword;\n+\n+   type Unsigned_32 is range 0 .. 4_294_967_295;\n+   for  Unsigned_32'Size use 32;\n+\n+   function \"not\" (Left        : Unsigned_32) return Unsigned_32;\n+   function \"and\" (Left, Right : Unsigned_32) return Unsigned_32;\n+   function \"or\"  (Left, Right : Unsigned_32) return Unsigned_32;\n+   function \"xor\" (Left, Right : Unsigned_32) return Unsigned_32;\n+\n+   function To_Unsigned_32 (X : Bit_Array_32) return Unsigned_32;\n+   function To_Bit_Array_32 (X : Unsigned_32) return Bit_Array_32;\n+\n+   type Unsigned_Quadword is record\n+      L0 : Unsigned_Longword;\n+      L1 : Unsigned_Longword;\n+   end record;\n+\n+   for Unsigned_Quadword'Size      use 64;\n+   for Unsigned_Quadword'Alignment use\n+     Integer'Min (8, Standard'Maximum_Alignment);\n+\n+   function \"not\" (Left        : Unsigned_Quadword) return Unsigned_Quadword;\n+   function \"and\" (Left, Right : Unsigned_Quadword) return Unsigned_Quadword;\n+   function \"or\"  (Left, Right : Unsigned_Quadword) return Unsigned_Quadword;\n+   function \"xor\" (Left, Right : Unsigned_Quadword) return Unsigned_Quadword;\n+\n+   function To_Unsigned_Quadword (X : Bit_Array_64) return Unsigned_Quadword;\n+   function To_Bit_Array_64 (X : Unsigned_Quadword) return Bit_Array_64;\n+\n+   type Unsigned_Quadword_Array is\n+      array (Integer range <>) of Unsigned_Quadword;\n+\n+   function To_Address      (X : Integer)           return Address;\n+   pragma Pure_Function (To_Address);\n+\n+   function To_Address_Long (X : Unsigned_Longword) return Address;\n+   pragma Pure_Function (To_Address_Long);\n+\n+   function To_Integer      (X : Address)           return Integer;\n+\n+   function To_Unsigned_Longword (X : Address)     return Unsigned_Longword;\n+   function To_Unsigned_Longword (X : AST_Handler) return Unsigned_Longword;\n+\n+   --  Conventional names for static subtypes of type UNSIGNED_LONGWORD\n+\n+   subtype Unsigned_1  is Unsigned_Longword range 0 .. 2** 1-1;\n+   subtype Unsigned_2  is Unsigned_Longword range 0 .. 2** 2-1;\n+   subtype Unsigned_3  is Unsigned_Longword range 0 .. 2** 3-1;\n+   subtype Unsigned_4  is Unsigned_Longword range 0 .. 2** 4-1;\n+   subtype Unsigned_5  is Unsigned_Longword range 0 .. 2** 5-1;\n+   subtype Unsigned_6  is Unsigned_Longword range 0 .. 2** 6-1;\n+   subtype Unsigned_7  is Unsigned_Longword range 0 .. 2** 7-1;\n+   subtype Unsigned_8  is Unsigned_Longword range 0 .. 2** 8-1;\n+   subtype Unsigned_9  is Unsigned_Longword range 0 .. 2** 9-1;\n+   subtype Unsigned_10 is Unsigned_Longword range 0 .. 2**10-1;\n+   subtype Unsigned_11 is Unsigned_Longword range 0 .. 2**11-1;\n+   subtype Unsigned_12 is Unsigned_Longword range 0 .. 2**12-1;\n+   subtype Unsigned_13 is Unsigned_Longword range 0 .. 2**13-1;\n+   subtype Unsigned_14 is Unsigned_Longword range 0 .. 2**14-1;\n+   subtype Unsigned_15 is Unsigned_Longword range 0 .. 2**15-1;\n+   subtype Unsigned_16 is Unsigned_Longword range 0 .. 2**16-1;\n+   subtype Unsigned_17 is Unsigned_Longword range 0 .. 2**17-1;\n+   subtype Unsigned_18 is Unsigned_Longword range 0 .. 2**18-1;\n+   subtype Unsigned_19 is Unsigned_Longword range 0 .. 2**19-1;\n+   subtype Unsigned_20 is Unsigned_Longword range 0 .. 2**20-1;\n+   subtype Unsigned_21 is Unsigned_Longword range 0 .. 2**21-1;\n+   subtype Unsigned_22 is Unsigned_Longword range 0 .. 2**22-1;\n+   subtype Unsigned_23 is Unsigned_Longword range 0 .. 2**23-1;\n+   subtype Unsigned_24 is Unsigned_Longword range 0 .. 2**24-1;\n+   subtype Unsigned_25 is Unsigned_Longword range 0 .. 2**25-1;\n+   subtype Unsigned_26 is Unsigned_Longword range 0 .. 2**26-1;\n+   subtype Unsigned_27 is Unsigned_Longword range 0 .. 2**27-1;\n+   subtype Unsigned_28 is Unsigned_Longword range 0 .. 2**28-1;\n+   subtype Unsigned_29 is Unsigned_Longword range 0 .. 2**29-1;\n+   subtype Unsigned_30 is Unsigned_Longword range 0 .. 2**30-1;\n+   subtype Unsigned_31 is Unsigned_Longword range 0 .. 2**31-1;\n+\n+   --  Function for obtaining global symbol values\n+\n+   function Import_Value         (Symbol : String) return Unsigned_Longword;\n+   function Import_Address       (Symbol : String) return Address;\n+   function Import_Largest_Value (Symbol : String) return Largest_Integer;\n+\n+   pragma Import (Intrinsic, Import_Value);\n+   pragma Import (Intrinsic, Import_Address);\n+   pragma Import (Intrinsic, Import_Largest_Value);\n+\n+   --  For the following declarations, note that the declaration without\n+   --  a Retry_Count parameter means to retry infinitely. A value of zero\n+   --  for the Retry_Count parameter means do not retry.\n+\n+   --  Interlocked-instruction procedures\n+\n+   procedure Clear_Interlocked\n+     (Bit       : in out Boolean;\n+      Old_Value : out Boolean);\n+\n+   procedure Set_Interlocked\n+     (Bit       : in out Boolean;\n+      Old_Value : out Boolean);\n+\n+   type Aligned_Word is record\n+      Value : Short_Integer;\n+   end record;\n+\n+   for Aligned_Word'Alignment use\n+     Integer'Min (2, Standard'Maximum_Alignment);\n+\n+   procedure Clear_Interlocked\n+     (Bit          : in out Boolean;\n+      Old_Value    : out Boolean;\n+      Retry_Count  : in Natural;\n+      Success_Flag : out Boolean);\n+\n+   procedure Set_Interlocked\n+     (Bit          : in out Boolean;\n+      Old_Value    : out Boolean;\n+      Retry_Count  : in Natural;\n+      Success_Flag : out Boolean);\n+\n+   procedure Add_Interlocked\n+     (Addend       : in Short_Integer;\n+      Augend       : in out Aligned_Word;\n+      Sign         : out Integer);\n+\n+   type Aligned_Integer is record\n+      Value : Integer;\n+   end record;\n+\n+   for Aligned_Integer'Alignment use\n+     Integer'Min (4, Standard'Maximum_Alignment);\n+\n+   type Aligned_Long_Integer is record\n+      Value : Long_Integer;\n+   end record;\n+\n+   for Aligned_Long_Integer'Alignment use\n+     Integer'Min (8, Standard'Maximum_Alignment);\n+\n+   --  For the following declarations, note that the declaration without\n+   --  a Retry_Count parameter mean to retry infinitely. A value of zero\n+   --  for the Retry_Count means do not retry.\n+\n+   procedure Add_Atomic\n+     (To           : in out Aligned_Integer;\n+      Amount       : in Integer);\n+\n+   procedure Add_Atomic\n+     (To           : in out Aligned_Integer;\n+      Amount       : in Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Integer;\n+      Success_Flag : out Boolean);\n+\n+   procedure Add_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      Amount       : in Long_Integer);\n+\n+   procedure Add_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      Amount       : in Long_Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Long_Integer;\n+      Success_Flag : out Boolean);\n+\n+   procedure And_Atomic\n+     (To           : in out Aligned_Integer;\n+      From         : in Integer);\n+\n+   procedure And_Atomic\n+     (To           : in out Aligned_Integer;\n+      From         : in Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Integer;\n+      Success_Flag : out Boolean);\n+\n+   procedure And_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      From         : in Long_Integer);\n+\n+   procedure And_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      From         : in Long_Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Long_Integer;\n+      Success_Flag : out Boolean);\n+\n+   procedure Or_Atomic\n+     (To           : in out Aligned_Integer;\n+      From         : in Integer);\n+\n+   procedure Or_Atomic\n+     (To           : in out Aligned_Integer;\n+      From         : in Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Integer;\n+      Success_Flag : out Boolean);\n+\n+   procedure Or_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      From         : in Long_Integer);\n+\n+   procedure Or_Atomic\n+     (To           : in out Aligned_Long_Integer;\n+      From         : in Long_Integer;\n+      Retry_Count  : in Natural;\n+      Old_Value    : out Long_Integer;\n+      Success_Flag : out Boolean);\n+\n+   type Insq_Status is\n+     (Fail_No_Lock, OK_Not_First, OK_First);\n+\n+   for Insq_Status use\n+     (Fail_No_Lock => -1,\n+      OK_Not_First => 0,\n+      OK_First     => +1);\n+\n+   type Remq_Status is (\n+     Fail_No_Lock,\n+     Fail_Was_Empty,\n+     OK_Not_Empty,\n+     OK_Empty);\n+\n+   for Remq_Status use\n+     (Fail_No_Lock   => -1,\n+      Fail_Was_Empty => 0,\n+      OK_Not_Empty   => +1,\n+      OK_Empty       => +2);\n+\n+   procedure Insqhi\n+     (Item   : in  Address;\n+      Header : in  Address;\n+      Status : out Insq_Status);\n+\n+   procedure Remqhi\n+     (Header : in  Address;\n+      Item   : out Address;\n+      Status : out Remq_Status);\n+\n+   procedure Insqti\n+     (Item   : in  Address;\n+      Header : in  Address;\n+      Status : out Insq_Status);\n+\n+   procedure Remqti\n+     (Header : in  Address;\n+      Item   : out Address;\n+      Status : out Remq_Status);\n+\n+private\n+\n+   Address_Zero : constant Address := Null_Address;\n+   No_Addr      : constant Address := Null_Address;\n+\n+   --  An AST_Handler value is from a typing point of view simply a pointer\n+   --  to a procedure taking a single 64bit parameter. However, this\n+   --  is a bit misleading, because the data that this pointer references is\n+   --  highly stylized. See body of System.AST_Handling for full details.\n+\n+   type AST_Handler is access procedure (Param : Long_Integer);\n+   No_AST_Handler : constant AST_Handler := null;\n+\n+   --  Other operators have incorrect profiles. It would be nice to make\n+   --  them intrinsic, since the backend can handle them, but the front\n+   --  end is not prepared to deal with them, so at least inline them.\n+\n+   pragma Inline (\"+\");\n+   pragma Inline (\"-\");\n+   pragma Inline (\"not\");\n+   pragma Inline (\"and\");\n+   pragma Inline (\"or\");\n+   pragma Inline (\"xor\");\n+\n+   --  Other inlined subprograms\n+\n+   pragma Inline (Fetch_From_Address);\n+   pragma Inline (Assign_To_Address);\n+\n+   --  Provide proper unchecked conversion definitions for transfer\n+   --  functions. Note that we need this level of indirection because\n+   --  the formal parameter name is X and not Source (and this is indeed\n+   --  detectable by a program)\n+\n+   function To_Unsigned_Byte_A is new\n+     Unchecked_Conversion (Bit_Array_8, Unsigned_Byte);\n+\n+   function To_Unsigned_Byte (X : Bit_Array_8) return Unsigned_Byte\n+     renames To_Unsigned_Byte_A;\n+\n+   function To_Bit_Array_8_A is new\n+     Unchecked_Conversion (Unsigned_Byte, Bit_Array_8);\n+\n+   function To_Bit_Array_8 (X : Unsigned_Byte) return Bit_Array_8\n+     renames To_Bit_Array_8_A;\n+\n+   function To_Unsigned_Word_A is new\n+     Unchecked_Conversion (Bit_Array_16, Unsigned_Word);\n+\n+   function To_Unsigned_Word (X : Bit_Array_16) return Unsigned_Word\n+     renames To_Unsigned_Word_A;\n+\n+   function To_Bit_Array_16_A is new\n+     Unchecked_Conversion (Unsigned_Word, Bit_Array_16);\n+\n+   function To_Bit_Array_16 (X : Unsigned_Word) return Bit_Array_16\n+     renames To_Bit_Array_16_A;\n+\n+   function To_Unsigned_Longword_A is new\n+     Unchecked_Conversion (Bit_Array_32, Unsigned_Longword);\n+\n+   function To_Unsigned_Longword (X : Bit_Array_32) return Unsigned_Longword\n+     renames To_Unsigned_Longword_A;\n+\n+   function To_Bit_Array_32_A is new\n+     Unchecked_Conversion (Unsigned_Longword, Bit_Array_32);\n+\n+   function To_Bit_Array_32 (X : Unsigned_Longword) return Bit_Array_32\n+     renames To_Bit_Array_32_A;\n+\n+   function To_Unsigned_32_A is new\n+     Unchecked_Conversion (Bit_Array_32, Unsigned_32);\n+\n+   function To_Unsigned_32 (X : Bit_Array_32) return Unsigned_32\n+     renames To_Unsigned_32_A;\n+\n+   function To_Bit_Array_32_A is new\n+     Unchecked_Conversion (Unsigned_32, Bit_Array_32);\n+\n+   function To_Bit_Array_32 (X : Unsigned_32) return Bit_Array_32\n+     renames To_Bit_Array_32_A;\n+\n+   function To_Unsigned_Quadword_A is new\n+     Unchecked_Conversion (Bit_Array_64, Unsigned_Quadword);\n+\n+   function To_Unsigned_Quadword (X : Bit_Array_64) return Unsigned_Quadword\n+     renames To_Unsigned_Quadword_A;\n+\n+   function To_Bit_Array_64_A is new\n+     Unchecked_Conversion (Unsigned_Quadword, Bit_Array_64);\n+\n+   function To_Bit_Array_64 (X : Unsigned_Quadword) return Bit_Array_64\n+     renames To_Bit_Array_64_A;\n+\n+   pragma Warnings (Off);\n+   --  Turn warnings off. This is needed for systems with 64-bit integers,\n+   --  where some of these operations are of dubious meaning, but we do not\n+   --  want warnings when we compile on such systems.\n+\n+   function To_Address_A is new\n+     Unchecked_Conversion (Integer, Address);\n+   pragma Pure_Function (To_Address_A);\n+\n+   function To_Address (X : Integer) return Address\n+     renames To_Address_A;\n+   pragma Pure_Function (To_Address);\n+\n+   function To_Address_Long_A is new\n+     Unchecked_Conversion (Unsigned_Longword, Address);\n+   pragma Pure_Function (To_Address_Long_A);\n+\n+   function To_Address_Long (X : Unsigned_Longword) return Address\n+     renames To_Address_Long_A;\n+   pragma Pure_Function (To_Address_Long);\n+\n+   function To_Integer_A is new\n+     Unchecked_Conversion (Address, Integer);\n+\n+   function To_Integer (X : Address) return Integer\n+     renames To_Integer_A;\n+\n+   function To_Unsigned_Longword_A is new\n+     Unchecked_Conversion (Address, Unsigned_Longword);\n+\n+   function To_Unsigned_Longword (X : Address) return Unsigned_Longword\n+     renames To_Unsigned_Longword_A;\n+\n+   function To_Unsigned_Longword_A is new\n+     Unchecked_Conversion (AST_Handler, Unsigned_Longword);\n+\n+   function To_Unsigned_Longword (X : AST_Handler) return Unsigned_Longword\n+     renames To_Unsigned_Longword_A;\n+\n+   pragma Warnings (On);\n+\n+end System.Aux_DEC;"}, {"sha": "6b5538c30d47161fb665efaad1154c716847f057", "filename": "gcc/ada/s-bitops.adb", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-bitops.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-bitops.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-bitops.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,223 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUNTIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                       S Y S T E M . B I T _ O P S                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.10 $\n+--                                                                          --\n+--         Copyright (C) 1996-2000 Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with GNAT.Exceptions;       use GNAT.Exceptions;\n+with System;                use System;\n+with System.Unsigned_Types; use System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Bit_Ops is\n+\n+   subtype Bits_Array is System.Unsigned_Types.Packed_Bytes1 (Positive);\n+   --  Unconstrained array used to interprete the address values. We use the\n+   --  unaligned version always, since this will handle both the aligned and\n+   --  unaligned cases, and we always do these operations by bytes anyway.\n+   --  Note: we use a ones origin array here so that the computations of the\n+   --  length in bytes work correctly (give a non-negative value) for the\n+   --  case of zero length bit strings).\n+\n+   type Bits is access Bits_Array;\n+   --  This is the actual type into which address values are converted\n+\n+   function To_Bits is new Unchecked_Conversion (Address, Bits);\n+\n+   LE : constant := Standard'Default_Bit_Order;\n+   --  Static constant set to 0 for big-endian, 1 for little-endian\n+\n+   --  The following is an array of masks used to mask the final byte, either\n+   --  at the high end (big-endian case) or the low end (little-endian case).\n+\n+   Masks : constant array (1 .. 7) of Packed_Byte := (\n+     (1 - LE) * 2#1000_0000# + LE * 2#0000_0001#,\n+     (1 - LE) * 2#1100_0000# + LE * 2#0000_0011#,\n+     (1 - LE) * 2#1110_0000# + LE * 2#0000_0111#,\n+     (1 - LE) * 2#1111_0000# + LE * 2#0000_1111#,\n+     (1 - LE) * 2#1111_1000# + LE * 2#0001_1111#,\n+     (1 - LE) * 2#1111_1100# + LE * 2#0011_1111#,\n+     (1 - LE) * 2#1111_1110# + LE * 2#0111_1111#);\n+\n+\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   procedure Raise_Error;\n+   --  Raise Constraint_Error, complaining about unequal lengths\n+\n+   -------------\n+   -- Bit_And --\n+   -------------\n+\n+   procedure Bit_And\n+     (Left   : Address;\n+      Llen   : Natural;\n+      Right  : Address;\n+      Rlen   : Natural;\n+      Result : Address)\n+   is\n+      LeftB   : constant Bits := To_Bits (Left);\n+      RightB  : constant Bits := To_Bits (Right);\n+      ResultB : constant Bits := To_Bits (Result);\n+\n+   begin\n+      if Llen /= Rlen then\n+         Raise_Error;\n+      end if;\n+\n+      for J in 1 .. (Rlen + 7) / 8 loop\n+         ResultB (J) := LeftB (J) and RightB (J);\n+      end loop;\n+   end Bit_And;\n+\n+   ------------\n+   -- Bit_Eq --\n+   ------------\n+\n+   function Bit_Eq\n+     (Left  : Address;\n+      Llen  : Natural;\n+      Right : Address;\n+      Rlen  : Natural)\n+      return  Boolean\n+   is\n+      LeftB  : constant Bits := To_Bits (Left);\n+      RightB : constant Bits := To_Bits (Right);\n+\n+   begin\n+      if Llen /= Rlen then\n+         return False;\n+\n+      else\n+         declare\n+            BLen : constant Natural := Llen / 8;\n+            Bitc : constant Natural := Llen mod 8;\n+\n+         begin\n+            if Llen /= Rlen then\n+               return False;\n+\n+            elsif LeftB (1 .. BLen) /= RightB (1 .. BLen) then\n+               return False;\n+\n+            elsif Bitc /= 0 then\n+               return\n+                 ((LeftB (BLen + 1) xor RightB (BLen + 1))\n+                   and Masks (Bitc)) = 0;\n+\n+            else -- Bitc = 0\n+               return True;\n+            end if;\n+         end;\n+      end if;\n+   end Bit_Eq;\n+\n+   -------------\n+   -- Bit_Not --\n+   -------------\n+\n+   procedure Bit_Not\n+     (Opnd   : System.Address;\n+      Len    : Natural;\n+      Result : System.Address)\n+   is\n+      OpndB   : constant Bits := To_Bits (Opnd);\n+      ResultB : constant Bits := To_Bits (Result);\n+\n+   begin\n+      for J in 1 .. (Len + 7) / 8 loop\n+         ResultB (J) := not OpndB (J);\n+      end loop;\n+   end Bit_Not;\n+\n+   ------------\n+   -- Bit_Or --\n+   ------------\n+\n+   procedure Bit_Or\n+     (Left   : Address;\n+      Llen   : Natural;\n+      Right  : Address;\n+      Rlen   : Natural;\n+      Result : Address)\n+   is\n+      LeftB   : constant Bits := To_Bits (Left);\n+      RightB  : constant Bits := To_Bits (Right);\n+      ResultB : constant Bits := To_Bits (Result);\n+\n+   begin\n+      if Llen /= Rlen then\n+         Raise_Error;\n+      end if;\n+\n+      for J in 1 .. (Rlen + 7) / 8 loop\n+         ResultB (J) := LeftB (J) or RightB (J);\n+      end loop;\n+   end Bit_Or;\n+\n+   -------------\n+   -- Bit_Xor --\n+   -------------\n+\n+   procedure Bit_Xor\n+     (Left   : Address;\n+      Llen   : Natural;\n+      Right  : Address;\n+      Rlen   : Natural;\n+      Result : Address)\n+   is\n+      LeftB   : constant Bits := To_Bits (Left);\n+      RightB  : constant Bits := To_Bits (Right);\n+      ResultB : constant Bits := To_Bits (Result);\n+\n+   begin\n+      if Llen /= Rlen then\n+         Raise_Error;\n+      end if;\n+\n+      for J in 1 .. (Rlen + 7) / 8 loop\n+         ResultB (J) := LeftB (J) xor RightB (J);\n+      end loop;\n+   end Bit_Xor;\n+\n+   -----------------\n+   -- Raise_Error --\n+   -----------------\n+\n+   procedure Raise_Error is\n+   begin\n+      Raise_Exception (CE, \"unequal lengths in logical operation\");\n+   end Raise_Error;\n+\n+end System.Bit_Ops;"}, {"sha": "e925247e7468edd362be85b81369de99a6d32bdd", "filename": "gcc/ada/s-bitops.ads", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-bitops.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-bitops.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-bitops.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,101 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUNTIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--                       S Y S T E M . B I T _ O P S                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.6 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Operations on packed bit strings\n+\n+with System;\n+\n+package System.Bit_Ops is\n+\n+   --  Note: in all the following routines, the System.Address parameters\n+   --  represent the address of the first byte of an array used to represent\n+   --  a packed array (of type System.Unsigned_Types.Packed_Bytes{1,2,4})\n+   --  The length in bits is passed as a separate parameter.\n+\n+   procedure Bit_And\n+     (Left   : System.Address;\n+      Llen   : Natural;\n+      Right  : Address;\n+      Rlen   : Natural;\n+      Result : System.Address);\n+   --  Bitwise \"and\" of given bit string with result being placed in Result.\n+   --  The or operation is allowed to destroy unused bits in the last byte,\n+   --  i.e. to leave them set in an undefined manner. Note that Left, Right\n+   --  and Result always have the same length in bits (Len).\n+\n+   function Bit_Eq\n+     (Left  : System.Address;\n+      Llen  : Natural;\n+      Right : System.Address;\n+      Rlen  : Natural)\n+      return  Boolean;\n+   --  Left and Right are the addresses of two bit packed arrays with Llen\n+   --  and Rlen being the respective length in bits. The routine compares the\n+   --  two bit strings for equality, being careful not to include the unused\n+   --  bits in the final byte. Note that the result is always False if Rlen\n+   --  is not equal to Llen.\n+\n+   procedure Bit_Not\n+     (Opnd   : System.Address;\n+      Len    : Natural;\n+      Result : System.Address);\n+   --  Bitwise \"not\" of given bit string with result being placed in Result.\n+   --  The not operation is allowed to destroy unused bits in the last byte,\n+   --  i.e. to leave them set in an undefined manner. Note that Result and\n+   --  Opnd always have the same length in bits (Len).\n+\n+   procedure Bit_Or\n+     (Left   : System.Address;\n+      Llen   : Natural;\n+      Right  : Address;\n+      Rlen   : Natural;\n+      Result : System.Address);\n+   --  Bitwise \"or\" of given bit string with result being placed in Result.\n+   --  The or operation is allowed to destroy unused bits in the last byte,\n+   --  i.e. to leave them set in an undefined manner. Note that Left, Right\n+   --  and Result always have the same length in bits (Len).\n+\n+   procedure Bit_Xor\n+     (Left   : System.Address;\n+      Llen   : Natural;\n+      Right  : Address;\n+      Rlen   : Natural;\n+      Result : System.Address);\n+   --  Bitwise \"xor\" of given bit string with result being placed in Result.\n+   --  The or operation is allowed to destroy unused bits in the last byte,\n+   --  i.e. to leave them set in an undefined manner. Note that Left, Right\n+   --  and Result always have the same length in bits (Len).\n+\n+end System.Bit_Ops;"}, {"sha": "bf368858b8e1427453ee279b6ac8971e7a56c729", "filename": "gcc/ada/s-chepoo.ads", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-chepoo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-chepoo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-chepoo.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,76 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                 S Y S T E M . C H E C K E D _ P O O L S                  --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Storage_Pools;\n+package System.Checked_Pools is\n+\n+   type Checked_Pool is abstract\n+     new System.Storage_Pools.Root_Storage_Pool with private;\n+   --  Equivalent of storage pools with the addition that Dereference is\n+   --  called on each implicit or explicit dereference of a pointer which\n+   --  has such a storage pool\n+\n+   procedure Allocate\n+     (Pool                     : in out Checked_Pool;\n+      Storage_Address          : out Address;\n+      Size_In_Storage_Elements : in System.Storage_Elements.Storage_Count;\n+      Alignment                : in System.Storage_Elements.Storage_Count)\n+   is abstract;\n+\n+   procedure Deallocate\n+     (Pool                     : in out Checked_Pool;\n+      Storage_Address          : in Address;\n+      Size_In_Storage_Elements : in System.Storage_Elements.Storage_Count;\n+      Alignment                : in System.Storage_Elements.Storage_Count)\n+   is abstract;\n+\n+   function Storage_Size\n+     (Pool : Checked_Pool)\n+      return System.Storage_Elements.Storage_Count\n+   is abstract;\n+\n+   procedure Dereference\n+     (Pool                     : in out Checked_Pool;\n+      Storage_Address          : in Address;\n+      Size_In_Storage_Elements : in System.Storage_Elements.Storage_Count;\n+      Alignment                : in System.Storage_Elements.Storage_Count)\n+   is abstract;\n+   --  Called each time a pointer to a checked pool is dereferenced\n+\n+private\n+   type Checked_Pool is abstract\n+     new System.Storage_Pools.Root_Storage_Pool with null record;\n+end System.Checked_Pools;"}, {"sha": "1aeb84149a4a88fe320a514d0af937d7e4960190", "filename": "gcc/ada/s-direio.adb", "status": "added", "additions": 377, "deletions": 0, "changes": 377, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-direio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-direio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-direio.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,377 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                     S Y S T E M . D I R E C T _ I O                      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.17 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.IO_Exceptions;         use Ada.IO_Exceptions;\n+with Interfaces.C_Streams;      use Interfaces.C_Streams;\n+with System;                    use System;\n+with System.File_IO;\n+with System.Soft_Links;\n+with Unchecked_Deallocation;\n+\n+package body System.Direct_IO is\n+\n+   package FIO renames System.File_IO;\n+   package SSL renames System.Soft_Links;\n+\n+   subtype AP is FCB.AFCB_Ptr;\n+   use type FCB.Shared_Status_Type;\n+\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   procedure Set_Position (File : in File_Type);\n+   --  Sets file position pointer according to value of current index\n+\n+   -------------------\n+   -- AFCB_Allocate --\n+   -------------------\n+\n+   function AFCB_Allocate (Control_Block : Direct_AFCB) return FCB.AFCB_Ptr is\n+   begin\n+      return new Direct_AFCB;\n+   end AFCB_Allocate;\n+\n+   ----------------\n+   -- AFCB_Close --\n+   ----------------\n+\n+   --  No special processing required for Direct_IO close\n+\n+   procedure AFCB_Close (File : access Direct_AFCB) is\n+   begin\n+      null;\n+   end AFCB_Close;\n+\n+   ---------------\n+   -- AFCB_Free --\n+   ---------------\n+\n+   procedure AFCB_Free (File : access Direct_AFCB) is\n+\n+      type FCB_Ptr is access all Direct_AFCB;\n+\n+      FT : FCB_Ptr := FCB_Ptr (File);\n+\n+      procedure Free is new\n+        Unchecked_Deallocation (Direct_AFCB, FCB_Ptr);\n+\n+   begin\n+      Free (FT);\n+   end AFCB_Free;\n+\n+   ------------\n+   -- Create --\n+   ------------\n+\n+   procedure Create\n+     (File : in out File_Type;\n+      Mode : in FCB.File_Mode := FCB.Inout_File;\n+      Name : in String := \"\";\n+      Form : in String := \"\")\n+   is\n+      File_Control_Block : Direct_AFCB;\n+\n+   begin\n+      FIO.Open (File_Ptr  => AP (File),\n+                Dummy_FCB => File_Control_Block,\n+                Mode      => Mode,\n+                Name      => Name,\n+                Form      => Form,\n+                Amethod   => 'D',\n+                Creat     => True,\n+                Text      => False);\n+   end Create;\n+\n+   -----------------\n+   -- End_Of_File --\n+   -----------------\n+\n+   function End_Of_File (File : in File_Type) return Boolean is\n+   begin\n+      FIO.Check_Read_Status (AP (File));\n+      return Count (File.Index) > Size (File);\n+   end End_Of_File;\n+\n+   -----------\n+   -- Index --\n+   -----------\n+\n+   function Index (File : in File_Type) return Positive_Count is\n+   begin\n+      FIO.Check_File_Open (AP (File));\n+      return Count (File.Index);\n+   end Index;\n+\n+   ----------\n+   -- Open --\n+   ----------\n+\n+   procedure Open\n+     (File : in out File_Type;\n+      Mode : in FCB.File_Mode;\n+      Name : in String;\n+      Form : in String := \"\")\n+   is\n+      File_Control_Block : Direct_AFCB;\n+\n+   begin\n+      FIO.Open (File_Ptr  => AP (File),\n+                Dummy_FCB => File_Control_Block,\n+                Mode      => Mode,\n+                Name      => Name,\n+                Form      => Form,\n+                Amethod   => 'D',\n+                Creat     => False,\n+                Text      => False);\n+   end Open;\n+\n+   ----------\n+   -- Read --\n+   ----------\n+\n+   procedure Read\n+     (File : in File_Type;\n+      Item : Address;\n+      Size : in Interfaces.C_Streams.size_t;\n+      From : in Positive_Count)\n+   is\n+   begin\n+      Set_Index (File, From);\n+      Read (File, Item, Size);\n+   end Read;\n+\n+   procedure Read\n+     (File : in File_Type;\n+      Item : Address;\n+      Size : in Interfaces.C_Streams.size_t)\n+   is\n+   begin\n+      FIO.Check_Read_Status (AP (File));\n+\n+      --  If last operation was not a read, or if in file sharing mode,\n+      --  then reset the physical pointer of the file to match the index\n+      --  We lock out task access over the two operations in this case.\n+\n+      if File.Last_Op /= Op_Read\n+        or else File.Shared_Status = FCB.Yes\n+      then\n+         if End_Of_File (File) then\n+            raise End_Error;\n+         end if;\n+\n+         Locked_Processing : begin\n+            SSL.Lock_Task.all;\n+            Set_Position (File);\n+            FIO.Read_Buf (AP (File), Item, Size);\n+            SSL.Unlock_Task.all;\n+\n+         exception\n+            when others =>\n+               SSL.Unlock_Task.all;\n+               raise;\n+         end Locked_Processing;\n+\n+      else\n+         FIO.Read_Buf (AP (File), Item, Size);\n+      end if;\n+\n+      File.Index := File.Index + 1;\n+\n+      --  Set last operation to read, unless we did not read a full record\n+      --  (happens with the variant record case) in which case we set the\n+      --  last operation as other, to force the file position to be reset\n+      --  on the next read.\n+\n+      if File.Bytes = Size then\n+         File.Last_Op := Op_Read;\n+      else\n+         File.Last_Op := Op_Other;\n+      end if;\n+   end Read;\n+\n+   --  The following is the required overriding for Stream.Read, which is\n+   --  not used, since we do not do Stream operations on Direct_IO files.\n+\n+   procedure Read\n+     (File : in out Direct_AFCB;\n+      Item : out Ada.Streams.Stream_Element_Array;\n+      Last : out Ada.Streams.Stream_Element_Offset)\n+   is\n+   begin\n+      raise Program_Error;\n+   end Read;\n+\n+   -----------\n+   -- Reset --\n+   -----------\n+\n+   procedure Reset (File : in out File_Type; Mode : in FCB.File_Mode) is\n+   begin\n+      FIO.Reset (AP (File), Mode);\n+      File.Index := 1;\n+      File.Last_Op := Op_Read;\n+   end Reset;\n+\n+   procedure Reset (File : in out File_Type) is\n+   begin\n+      FIO.Reset (AP (File));\n+      File.Index := 1;\n+      File.Last_Op := Op_Read;\n+   end Reset;\n+\n+   ---------------\n+   -- Set_Index --\n+   ---------------\n+\n+   procedure Set_Index (File : in File_Type; To : in Positive_Count) is\n+   begin\n+      FIO.Check_File_Open (AP (File));\n+      File.Index := Count (To);\n+      File.Last_Op := Op_Other;\n+   end Set_Index;\n+\n+   ------------------\n+   -- Set_Position --\n+   ------------------\n+\n+   procedure Set_Position (File : in File_Type) is\n+   begin\n+      if fseek\n+           (File.Stream, long (File.Bytes) *\n+              long (File.Index - 1), SEEK_SET) /= 0\n+      then\n+         raise Use_Error;\n+      end if;\n+   end Set_Position;\n+\n+   ----------\n+   -- Size --\n+   ----------\n+\n+   function Size (File : in File_Type) return Count is\n+   begin\n+      FIO.Check_File_Open (AP (File));\n+      File.Last_Op := Op_Other;\n+\n+      if fseek (File.Stream, 0, SEEK_END) /= 0 then\n+         raise Device_Error;\n+      end if;\n+\n+      return Count (ftell (File.Stream) / long (File.Bytes));\n+   end Size;\n+\n+   -----------\n+   -- Write --\n+   -----------\n+\n+   procedure Write\n+     (File   : File_Type;\n+      Item   : Address;\n+      Size   : in Interfaces.C_Streams.size_t;\n+      Zeroes : System.Storage_Elements.Storage_Array)\n+\n+   is\n+      procedure Do_Write;\n+      --  Do the actual write\n+\n+      procedure Do_Write is\n+      begin\n+         FIO.Write_Buf (AP (File), Item, Size);\n+\n+         --  If we did not write the whole record (happens with the variant\n+         --  record case), then fill out the rest of the record with zeroes.\n+         --  This is cleaner in any case, and is required for the last\n+         --  record, since otherwise the length of the file is wrong.\n+\n+         if File.Bytes > Size then\n+            FIO.Write_Buf (AP (File), Zeroes'Address, File.Bytes - Size);\n+         end if;\n+      end Do_Write;\n+\n+   --  Start of processing for Write\n+\n+   begin\n+      FIO.Check_Write_Status (AP (File));\n+\n+      --  If last operation was not a write, or if in file sharing mode,\n+      --  then reset the physical pointer of the file to match the index\n+      --  We lock out task access over the two operations in this case.\n+\n+      if File.Last_Op /= Op_Write\n+        or else File.Shared_Status = FCB.Yes\n+      then\n+         Locked_Processing : begin\n+            SSL.Lock_Task.all;\n+            Set_Position (File);\n+            Do_Write;\n+            SSL.Unlock_Task.all;\n+\n+         exception\n+            when others =>\n+               SSL.Unlock_Task.all;\n+               raise;\n+         end Locked_Processing;\n+\n+      else\n+         Do_Write;\n+      end if;\n+\n+      File.Index := File.Index + 1;\n+\n+      --  Set last operation to write, unless we did not read a full record\n+      --  (happens with the variant record case) in which case we set the\n+      --  last operation as other, to force the file position to be reset\n+      --  on the next write.\n+\n+      if File.Bytes = Size then\n+         File.Last_Op := Op_Write;\n+      else\n+         File.Last_Op := Op_Other;\n+      end if;\n+   end Write;\n+\n+   --  The following is the required overriding for Stream.Write, which is\n+   --  not used, since we do not do Stream operations on Direct_IO files.\n+\n+   procedure Write\n+     (File : in out Direct_AFCB;\n+      Item : in Ada.Streams.Stream_Element_Array)\n+   is\n+   begin\n+      raise Program_Error;\n+   end Write;\n+\n+end System.Direct_IO;"}, {"sha": "333a80461885c50bc90159967e95e1ce42c49982", "filename": "gcc/ada/s-direio.ads", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-direio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-direio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-direio.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,130 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                     S Y S T E M . D I R E C T _ I O                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.10 $                             --\n+--                                                                          --\n+--   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the declaration of the control block used for\n+--  Direct_IO. This must be declared at the outer library level. It also\n+--  contains code that is shared between instances of Direct_IO.\n+\n+with Interfaces.C_Streams;\n+with Ada.Streams;\n+with System.File_Control_Block;\n+with System.Storage_Elements;\n+\n+package System.Direct_IO is\n+\n+   package FCB renames System.File_Control_Block;\n+\n+   type Operation is (Op_Read, Op_Write, Op_Other);\n+   --  Type used to record last operation (to optimize sequential operations)\n+\n+   subtype Count is Interfaces.C_Streams.long;\n+   --  The Count type in each instantiation is derived from this type\n+\n+   subtype Positive_Count is Count range 1 .. Count'Last;\n+\n+   type Direct_AFCB is new FCB.AFCB with record\n+      Index : Count := 1;\n+      --  Current Index value\n+\n+      Bytes : Interfaces.C_Streams.size_t;\n+      --  Length of item in bytes (set from inside generic template)\n+\n+      Last_Op : Operation := Op_Other;\n+      --  Last operation performed on file, used to avoid unnecessary\n+      --  repositioning between successive read or write operations.\n+   end record;\n+\n+   function AFCB_Allocate (Control_Block : Direct_AFCB) return FCB.AFCB_Ptr;\n+\n+   procedure AFCB_Close (File : access Direct_AFCB);\n+   procedure AFCB_Free  (File : access Direct_AFCB);\n+\n+   procedure Read\n+     (File : in out Direct_AFCB;\n+      Item : out Ada.Streams.Stream_Element_Array;\n+      Last : out Ada.Streams.Stream_Element_Offset);\n+   --  Required overriding of Read, not actually used for Direct_IO\n+\n+   procedure Write\n+     (File : in out Direct_AFCB;\n+      Item : in Ada.Streams.Stream_Element_Array);\n+   --  Required overriding of Write, not actually used for Direct_IO\n+\n+   type File_Type is access all Direct_AFCB;\n+   --  File_Type in individual instantiations is derived from this type\n+\n+   procedure Create\n+     (File : in out File_Type;\n+      Mode : in FCB.File_Mode := FCB.Inout_File;\n+      Name : in String := \"\";\n+      Form : in String := \"\");\n+\n+   function End_Of_File (File : in File_Type) return Boolean;\n+\n+   function Index (File : in File_Type) return Positive_Count;\n+\n+   procedure Open\n+     (File : in out File_Type;\n+      Mode : in FCB.File_Mode;\n+      Name : in String;\n+      Form : in String := \"\");\n+\n+   procedure Read\n+     (File : in File_Type;\n+      Item : System.Address;\n+      Size : in Interfaces.C_Streams.size_t;\n+      From : in Positive_Count);\n+\n+   procedure Read\n+     (File : in File_Type;\n+      Item : System.Address;\n+      Size : in Interfaces.C_Streams.size_t);\n+\n+   procedure Reset (File : in out File_Type; Mode : in FCB.File_Mode);\n+\n+   procedure Reset (File : in out File_Type);\n+\n+   procedure Set_Index (File : in File_Type; To : in Positive_Count);\n+\n+   function Size (File : in File_Type) return Count;\n+\n+   procedure Write\n+     (File   : in File_Type;\n+      Item   : System.Address;\n+      Size   : in Interfaces.C_Streams.size_t;\n+      Zeroes : System.Storage_Elements.Storage_Array);\n+   --  Note: Zeroes is the buffer of zeroes used to fill out partial records\n+\n+end System.Direct_IO;"}, {"sha": "7c3450a8561c4db4d437c7fcdd0e06e1d91e6d73", "filename": "gcc/ada/s-errrep.adb", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-errrep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-errrep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-errrep.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,71 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--               GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n+--                                                                          --\n+--               S Y S T E M . E R R O R _ R E P O R T I N G                --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.14 $                             --\n+--                                                                          --\n+--            Copyright (C) 1991-2000 Florida State University              --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package must not depend on anything else, since it may be\n+--  called during elaboration of other packages.\n+\n+package body System.Error_Reporting is\n+\n+   procedure Write (fildes : Integer; buf : System.Address; nbyte : Integer);\n+   pragma Import (C, Write, \"write\");\n+\n+   procedure Prog_Exit (Status : Integer);\n+   pragma No_Return (Prog_Exit);\n+   pragma Import (C, Prog_Exit, \"exit\");\n+\n+   Shutdown_Message : String := \"failed run-time assertion : \";\n+   End_Of_Line : String := \"\" & ASCII.LF;\n+\n+   --------------\n+   -- Shutdown --\n+   --------------\n+\n+   function Shutdown (M : in String) return Boolean is\n+   begin\n+      Write (2, Shutdown_Message'Address, Shutdown_Message'Length);\n+      Write (2, M'Address, M'Length);\n+      Write (2, End_Of_Line'Address, End_Of_Line'Length);\n+\n+      --  This call should never return\n+\n+      Prog_Exit (1);\n+\n+      --  Return is just to keep Ada happy (return required)\n+\n+      return False;\n+   end Shutdown;\n+\n+end System.Error_Reporting;"}, {"sha": "923b909127458a3d472030e53a9ccef28cdc78f8", "filename": "gcc/ada/s-errrep.ads", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-errrep.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-errrep.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-errrep.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,48 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--               S Y S T E M . E R R O R _ R E P O R T I N G                --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.11 $                            --\n+--                                                                          --\n+--             Copyright (C) 1991-1998 Florida State University             --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package must not depend on anything else, since it may be\n+--  called during elaboration of other packages.\n+\n+package System.Error_Reporting is\n+   pragma Preelaborate;\n+\n+   function Shutdown (M : in String) return Boolean;\n+   --  Perform emergency shutdown of the entire program.\n+   --  Msg is an error message to be printed to the console.\n+   --  This is to be used only for nonrecoverable errors.\n+\n+end System.Error_Reporting;"}, {"sha": "e277e8c3d1a64db709bfb1dfaf2698699233f4c3", "filename": "gcc/ada/s-except.ads", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-except.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,205 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                    S Y S T E M . E X C E P T I O N S                     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.10 $\n+--                                                                          --\n+--          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains definitions used for zero cost exception handling.\n+--  See unit Ada.Exceptions for further details. Note that the reason that\n+--  we separate out these definitions is to avoid problems with recursion\n+--  in rtsfind. They must be in a unit which does not require any exception\n+--  table generation of any kind.\n+\n+with Ada.Exceptions;\n+\n+with System;\n+with System.Standard_Library;\n+\n+with Unchecked_Conversion;\n+\n+package System.Exceptions is\n+\n+   package SSL renames System.Standard_Library;\n+   package AEX renames Ada.Exceptions;\n+\n+   --  The following section defines data structures used for zero cost\n+   --  exception handling if System.Parameters.Zero_Cost_Exceptions is\n+   --  set true (i.e. zero cost exceptions are implemented on this target).\n+\n+   --  The approach is to build tables that describe the PC ranges that\n+   --  are covered by various exception frames. When an exception occurs,\n+   --  these tables are searched to determine the address of the applicable\n+   --  handler for the current exception.\n+\n+   subtype Handler_Loc is System.Address;\n+   --  Code location representing entry address of a handler. Values of\n+   --  this type are created using the N_Handler_Loc node, and then\n+   --  passed to the Enter_Handler procedure to enter a handler.\n+\n+   subtype Code_Loc is System.Address;\n+   --  Code location used in building exception tables and for call\n+   --  addresses when propagating an exception (also traceback table)\n+   --  Values of this type are created by using Label'Address or\n+   --  extracted from machine states using Get_Code_Loc.\n+\n+   --------------------\n+   -- Handler_Record --\n+   --------------------\n+\n+   --  A Handler record is built for each choice for each exception handler\n+   --  in a frame.\n+\n+   function To_Exception_Id is\n+     new Unchecked_Conversion (SSL.Exception_Data_Ptr, AEX.Exception_Id);\n+\n+   Others_Dummy_Exception : aliased SSL.Exception_Data;\n+   Others_Id : constant AEX.Exception_Id :=\n+                 To_Exception_Id (Others_Dummy_Exception'Access);\n+   --  Dummy exception used to signal others exception\n+\n+   All_Others_Dummy_Exception : aliased SSL.Exception_Data;\n+   All_Others_Id : constant AEX.Exception_Id :=\n+                     To_Exception_Id (All_Others_Dummy_Exception'Access);\n+   --  Dummy exception used to signal all others exception (including\n+   --  exceptions not normally handled by others, e.g. Abort_Signal)\n+\n+   type Handler_Record is record\n+      Lo : Code_Loc;\n+      Hi : Code_Loc;\n+      --  Range of PC values of code covered by this handler record. The\n+      --  handler covers all code addresses that are greater than the Lo\n+      --  value, and less than or equal to the Hi value.\n+\n+      Id : AEX.Exception_Id;\n+      --  Id of exception being handled, or one of the above special values\n+\n+      Handler : Handler_Loc;\n+      --  Address of label at start of handler\n+   end record;\n+\n+   type Handler_Record_Ptr is access all Handler_Record;\n+   type Handler_Record_List is array (Natural range <>) of Handler_Record_Ptr;\n+\n+   ---------------------------\n+   -- Subprogram_Descriptor --\n+   ---------------------------\n+\n+   --  A Subprogram_Descriptor is built for each subprogram through which\n+   --  exceptions may propagate, this includes all Ada subprograms,\n+   --  and also all foreign language imported subprograms.\n+\n+   subtype Subprogram_Info_Type is System.Address;\n+   --  This type is used to represent a value that is used to unwind stack\n+   --  frames. It references target dependent data that provides sufficient\n+   --  information (e.g. about the location of the return point, use of a\n+   --  frame pointer, save-over-call registers etc) to unwind the machine\n+   --  state to the caller. For some targets, this is simply a pointer to\n+   --  the entry point of the procedure (and the routine to pop the machine\n+   --  state disassembles the code at the entry point to obtain the required\n+   --  information). On other targets, it is a pointer to data created by the\n+   --  backend or assembler to represent the required information.\n+\n+   No_Info : constant Subprogram_Info_Type := System.Null_Address;\n+   --  This is a special value used to indicate that it is not possible\n+   --  to pop past this frame. This is used at the outer level (e.g. for\n+   --  package elaboration procedures or the main procedure), and for any\n+   --  other foreign language procedure for which propagation is known\n+   --  to be impossible. An exception is considered unhandled if an\n+   --  attempt is made to pop a frame whose Subprogram_Info_Type value\n+   --  is set to No_Info.\n+\n+   type Subprogram_Descriptor (Num_Handlers : Natural) is record\n+      Code : Code_Loc;\n+      --  This is a code location used to determine which procedure we are\n+      --  in. Most usually it is simply the entry address for the procedure.\n+      --  hA given address is considered to be within the procedure referenced\n+      --  by a Subprogram_Descriptor record if this is the descriptor for\n+      --  which the Code value is as large as possible without exceeding\n+      --  the given value.\n+\n+      Subprogram_Info : Subprogram_Info_Type;\n+      --  This is a pointer to a target dependent data item that provides\n+      --  sufficient information for unwinding the stack frame of this\n+      --  procedure. A value of No_Info (zero) means that we are the\n+      --  outer level procedure.\n+\n+      Handler_Records : Handler_Record_List (1 .. Num_Handlers);\n+      --  List of pointers to Handler_Records for this procedure. The array\n+      --  is sorted inside out, i.e. entries for inner frames appear before\n+      --  entries for outer handlers. This ensures that a serial search\n+      --  finds the innermost applicable handler\n+   end record;\n+\n+   subtype Subprogram_Descriptor_0 is Subprogram_Descriptor (0);\n+   subtype Subprogram_Descriptor_1 is Subprogram_Descriptor (1);\n+   subtype Subprogram_Descriptor_2 is Subprogram_Descriptor (2);\n+   subtype Subprogram_Descriptor_3 is Subprogram_Descriptor (3);\n+   --  Predeclare commonly used subtypes for buildingt he tables\n+\n+   type Subprogram_Descriptor_Ptr is access all Subprogram_Descriptor;\n+\n+   type Subprogram_Descriptor_List\n+     is array (Natural range <>) of Subprogram_Descriptor_Ptr;\n+\n+   type Subprogram_Descriptors_Record (Count : Natural) is record\n+      SDesc : Subprogram_Descriptor_List (1 .. Count);\n+   end record;\n+\n+   type Subprogram_Descriptors_Ptr is\n+     access all Subprogram_Descriptors_Record;\n+\n+   --------------------------\n+   -- Unit Exception_Table --\n+   --------------------------\n+\n+   --  If a unit contains at least one subprogram, then a library level\n+   --  declaration of the form:\n+\n+   --    Tnn : aliased constant Subprogram_Descriptors :=\n+   --            (Count => n,\n+   --             SDesc =>\n+   --              (SD1'Unrestricted_Access,\n+   --               SD2'Unrestricted_Access,\n+   --               ...\n+   --               SDn'Unrestricted_Access));\n+   --    pragma Export (Ada, Tnn, \"__gnat_unit_name__SDP\");\n+\n+   --  is generated where the initializing expression is an array aggregate\n+   --  whose elements are pointers to the generated subprogram descriptors\n+   --  for the units.\n+\n+   --  Note: the ALI file contains the designation UX in each unit entry\n+   --  if a unit exception table is generated.\n+\n+   --  The binder generates a list of addresses of pointers to these tables.\n+\n+end System.Exceptions;"}, {"sha": "821f1860ccf755b6da9546000abf843d0cc106c5", "filename": "gcc/ada/s-exctab.adb", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exctab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exctab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exctab.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,192 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               S Y S T E M . E X C E P T I O N _ T A B L E                --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.14 $\n+--                                                                          --\n+--          Copyright (C) 1996-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with GNAT.HTable;\n+\n+package body System.Exception_Table is\n+\n+   use System.Standard_Library;\n+\n+   type HTable_Headers is range 1 .. 37;\n+\n+   procedure Set_HT_Link (T : Exception_Data_Ptr; Next : Exception_Data_Ptr);\n+   function  Get_HT_Link (T : Exception_Data_Ptr) return Exception_Data_Ptr;\n+\n+   function Hash (F : Big_String_Ptr) return HTable_Headers;\n+   function Equal (A, B : Big_String_Ptr) return Boolean;\n+   function Get_Key (T : Exception_Data_Ptr) return Big_String_Ptr;\n+\n+   package Exception_HTable is new GNAT.HTable.Static_HTable (\n+     Header_Num => HTable_Headers,\n+     Element    => Exception_Data,\n+     Elmt_Ptr   => Exception_Data_Ptr,\n+     Null_Ptr   => null,\n+     Set_Next   => Set_HT_Link,\n+     Next       => Get_HT_Link,\n+     Key        => Big_String_Ptr,\n+     Get_Key    => Get_Key,\n+     Hash       => Hash,\n+     Equal      => Equal);\n+\n+   -----------\n+   -- Equal --\n+   -----------\n+\n+   function Equal (A, B : Big_String_Ptr) return Boolean is\n+      J    : Integer := 1;\n+\n+   begin\n+      loop\n+         if A (J) /= B (J) then\n+            return False;\n+\n+         elsif A (J) = ASCII.NUL then\n+            return True;\n+\n+         else\n+            J := J + 1;\n+         end if;\n+      end loop;\n+   end Equal;\n+\n+   -----------------\n+   -- Get_HT_Link --\n+   -----------------\n+\n+   function  Get_HT_Link (T : Exception_Data_Ptr) return Exception_Data_Ptr is\n+   begin\n+      return T.HTable_Ptr;\n+   end Get_HT_Link;\n+\n+   -------------\n+   -- Get_Key --\n+   -------------\n+\n+   function Get_Key (T : Exception_Data_Ptr) return Big_String_Ptr is\n+   begin\n+      return T.Full_Name;\n+   end Get_Key;\n+\n+   ----------\n+   -- Hash --\n+   ----------\n+\n+   function Hash (F : Big_String_Ptr) return HTable_Headers is\n+      type S is mod 2**8;\n+\n+      Size : constant S := S (HTable_Headers'Last - HTable_Headers'First + 1);\n+      Tmp  : S := 0;\n+      J    : Positive;\n+\n+   begin\n+      J := 1;\n+      loop\n+         if F (J) = ASCII.NUL then\n+            return HTable_Headers'First + HTable_Headers'Base (Tmp mod Size);\n+         else\n+            Tmp := Tmp xor S (Character'Pos (F (J)));\n+         end if;\n+         J := J + 1;\n+      end loop;\n+   end Hash;\n+\n+   ------------------------\n+   -- Internal_Exception --\n+   ------------------------\n+\n+   type String_Ptr is access all String;\n+\n+   function Internal_Exception (X : String) return Exception_Data_Ptr is\n+      Copy     : aliased String (X'First .. X'Last + 1);\n+      Res      : Exception_Data_Ptr;\n+      Dyn_Copy : String_Ptr;\n+\n+   begin\n+      Copy (X'Range) := X;\n+      Copy (Copy'Last) := ASCII.NUL;\n+      Res := Exception_HTable.Get (To_Ptr (Copy'Address));\n+\n+      --  If unknown exception, create it on the heap. This is a legitimate\n+      --  situation in the distributed case when an exception is defined only\n+      --  in a partition\n+\n+      if Res = null  then\n+         Dyn_Copy := new String'(Copy);\n+\n+         Res :=\n+           new Exception_Data'\n+             (Not_Handled_By_Others => False,\n+              Lang                  => 'A',\n+              Name_Length           => Copy'Length,\n+              Full_Name             => To_Ptr (Dyn_Copy.all'Address),\n+              HTable_Ptr            => null,\n+              Import_Code           => 0);\n+\n+         Register_Exception (Res);\n+      end if;\n+\n+      return Res;\n+   end Internal_Exception;\n+\n+   ------------------------\n+   -- Register_Exception --\n+   ------------------------\n+\n+   procedure Register_Exception (X : Exception_Data_Ptr) is\n+   begin\n+      Exception_HTable.Set (X);\n+   end Register_Exception;\n+\n+   -----------------\n+   -- Set_HT_Link --\n+   -----------------\n+\n+   procedure Set_HT_Link\n+     (T    : Exception_Data_Ptr;\n+      Next : Exception_Data_Ptr)\n+   is\n+   begin\n+      T.HTable_Ptr := Next;\n+   end Set_HT_Link;\n+\n+begin\n+   Register_Exception (Abort_Signal_Def'Access);\n+   Register_Exception (Tasking_Error_Def'Access);\n+   Register_Exception (Storage_Error_Def'Access);\n+   Register_Exception (Program_Error_Def'Access);\n+   Register_Exception (Numeric_Error_Def'Access);\n+   Register_Exception (Constraint_Error_Def'Access);\n+\n+end System.Exception_Table;"}, {"sha": "e41cfe8ac031ddfa4752a067e7e51ae150644d60", "filename": "gcc/ada/s-exctab.ads", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exctab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exctab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exctab.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                 S Y S T E M . E X C E P T I O N _ T A B L E              --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1996-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Standard_Library;\n+\n+package System.Exception_Table is\n+pragma Elaborate_Body;\n+\n+   package SSL renames System.Standard_Library;\n+\n+   procedure Register_Exception (X : SSL.Exception_Data_Ptr);\n+   pragma Inline (Register_Exception);\n+   --  Register an exception in the hash table mapping\n+\n+   function Internal_Exception (X : String) return SSL.Exception_Data_Ptr;\n+   --  Given an exception_name X, returns a pointer to the actual internal\n+   --  exception data.\n+\n+end System.Exception_Table;"}, {"sha": "943ed5cbc0591ade9e29cacf06b9f6ea5a681367", "filename": "gcc/ada/s-exnflt.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnflt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnflt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnflt.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X N _ F L T                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Float exponentiation (checks off)\n+\n+with System.Exn_Gen;\n+\n+package System.Exn_Flt is\n+pragma Pure (Exn_Flt);\n+\n+   function Exn_Float is\n+     new System.Exn_Gen.Exn_Float_Type (Float);\n+\n+end System.Exn_Flt;"}, {"sha": "1054463c55c4086298b673e319f28f5629d55e2d", "filename": "gcc/ada/s-exngen.adb", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exngen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exngen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exngen.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,154 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X N _ G E N                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Exn_Gen is\n+\n+   --------------------\n+   -- Exn_Float_Type --\n+   --------------------\n+\n+   function Exn_Float_Type\n+     (Left  : Type_Of_Base;\n+      Right : Integer)\n+      return  Type_Of_Base\n+   is\n+      pragma Suppress (Division_Check);\n+      pragma Suppress (Overflow_Check);\n+      pragma Suppress (Range_Check);\n+\n+      Result : Type_Of_Base := 1.0;\n+      Factor : Type_Of_Base := Left;\n+      Exp    : Integer := Right;\n+\n+   begin\n+      --  We use the standard logarithmic approach, Exp gets shifted right\n+      --  testing successive low order bits and Factor is the value of the\n+      --  base raised to the next power of 2. For positive exponents we\n+      --  multiply the result by this factor, for negative exponents, we\n+      --  Division by this factor.\n+\n+      if Exp >= 0 then\n+         loop\n+            if Exp rem 2 /= 0 then\n+               Result := Result * Factor;\n+            end if;\n+\n+            Exp := Exp / 2;\n+            exit when Exp = 0;\n+            Factor := Factor * Factor;\n+         end loop;\n+\n+         return Result;\n+\n+      --  Negative exponent. For a zero base, we should arguably return an\n+      --  infinity of the right sign, but it is not clear that there is\n+      --  proper authorization to do so, so for now raise Constraint_Error???\n+\n+      elsif Factor = 0.0 then\n+         raise Constraint_Error;\n+\n+      --  Here we have a non-zero base and a negative exponent\n+\n+      else\n+         --  For the negative exponent case, a constraint error during this\n+         --  calculation happens if Factor gets too large, and the proper\n+         --  response is to return 0.0, since what we essentially have is\n+         --  1.0 / infinity, and the closest model number will be zero.\n+\n+         begin\n+            loop\n+               if Exp rem 2 /= 0 then\n+                  Result := Result * Factor;\n+               end if;\n+\n+               Exp := Exp / 2;\n+               exit when Exp = 0;\n+               Factor := Factor * Factor;\n+            end loop;\n+\n+            return 1.0 / Result;\n+\n+         exception\n+\n+            when Constraint_Error =>\n+               return 0.0;\n+         end;\n+      end if;\n+   end Exn_Float_Type;\n+\n+   ----------------------\n+   -- Exn_Integer_Type --\n+   ----------------------\n+\n+   --  Note that negative exponents get a constraint error because the\n+   --  subtype of the Right argument (the exponent) is Natural.\n+\n+   function Exn_Integer_Type\n+     (Left  : Type_Of_Base;\n+      Right : Natural)\n+      return  Type_Of_Base\n+   is\n+      pragma Suppress (Division_Check);\n+      pragma Suppress (Overflow_Check);\n+\n+      Result : Type_Of_Base := 1;\n+      Factor : Type_Of_Base := Left;\n+      Exp    : Natural := Right;\n+\n+   begin\n+      --  We use the standard logarithmic approach, Exp gets shifted right\n+      --  testing successive low order bits and Factor is the value of the\n+      --  base raised to the next power of 2.\n+\n+      --  Note: it is not worth special casing the cases of base values -1,0,+1\n+      --  since the expander does this when the base is a literal, and other\n+      --  cases will be extremely rare.\n+\n+      if Exp /= 0 then\n+         loop\n+            if Exp rem 2 /= 0 then\n+               Result := Result * Factor;\n+            end if;\n+\n+            Exp := Exp / 2;\n+            exit when Exp = 0;\n+            Factor := Factor * Factor;\n+         end loop;\n+      end if;\n+\n+      return Result;\n+   end Exn_Integer_Type;\n+\n+end System.Exn_Gen;"}, {"sha": "ebd7e2267ae85a77baf029424c1c018e1e2a0fe9", "filename": "gcc/ada/s-exngen.ads", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exngen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exngen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exngen.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,66 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X N _ G E N                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.6 $                              --\n+--                                                                          --\n+--     Copyright (C) 1992,1993,1994,1995 Free Software Foundation, Inc.     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the generic functions which are instantiated with\n+--  predefined integer and real types to generate the runtime exponentiation\n+--  functions called by expanded code generated by Expand_Op_Expon. This\n+--  version of the package contains routines that are compiled with overflow\n+--  checks suppressed, so they are called for exponentiation operations which\n+--  do not require overflow checking\n+\n+package System.Exn_Gen is\n+pragma Pure (System.Exn_Gen);\n+\n+   --  Exponentiation for float types (checks off)\n+\n+   generic\n+      type Type_Of_Base is digits <>;\n+\n+   function Exn_Float_Type\n+     (Left  : Type_Of_Base;\n+      Right : Integer)\n+      return  Type_Of_Base;\n+\n+   --  Exponentiation for signed integer base\n+\n+   generic\n+      type Type_Of_Base is range <>;\n+\n+   function Exn_Integer_Type\n+     (Left  : Type_Of_Base;\n+      Right : Natural)\n+      return  Type_Of_Base;\n+\n+end System.Exn_Gen;"}, {"sha": "ea67e6dd148bfdaaf0244a5133bd6b22f73da0a2", "filename": "gcc/ada/s-exnint.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnint.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X N _ I N T                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992,1993 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Integer exponentiation (checks off)\n+\n+with System.Exn_Gen;\n+\n+package System.Exn_Int is\n+pragma Pure (Exn_Int);\n+\n+   function Exn_Integer is\n+     new System.Exn_Gen.Exn_Integer_Type (Integer);\n+\n+end System.Exn_Int;"}, {"sha": "50cc8917b940810fc4eee2c3e15ca8fb4a092c5d", "filename": "gcc/ada/s-exnlfl.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnlfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnlfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnlfl.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . E X N _ L F L T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Long_Float exponentiation (checks on)\n+\n+with System.Exn_Gen;\n+\n+package System.Exn_LFlt is\n+pragma Pure (Exn_LFlt);\n+\n+   function Exn_Long_Float is\n+     new System.Exn_Gen.Exn_Float_Type (Long_Float);\n+\n+end System.Exn_LFlt;"}, {"sha": "76e2e32df6ee49bbbaaaca66d22d72a1d10b3cbe", "filename": "gcc/ada/s-exnlin.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnlin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnlin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnlin.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . E X N _ L I N T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Long_Integer exponentiation (checks off)\n+\n+with System.Exn_Gen;\n+\n+package System.Exn_LInt is\n+pragma Pure (Exn_LInt);\n+\n+   function Exn_Long_Integer is\n+     new System.Exn_Gen.Exn_Integer_Type (Long_Integer);\n+\n+end System.Exn_LInt;"}, {"sha": "7155b0a9303d7c70c48239cb497935eaa13d5d75", "filename": "gcc/ada/s-exnllf.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnllf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnllf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnllf.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X N _ L L F                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Long_Long_Float exponentiation (checks off)\n+\n+with System.Exn_Gen;\n+\n+package System.Exn_LLF is\n+pragma Pure (Exn_LLF);\n+\n+   function Exn_Long_Long_Float is\n+     new System.Exn_Gen.Exn_Float_Type (Long_Long_Float);\n+\n+end System.Exn_LLF;"}, {"sha": "7a2456a8e6c1586a85e438c9ab2fd2d9485b97de", "filename": "gcc/ada/s-exnlli.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnlli.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X N _ L L I                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992,1993 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Long_Long_Integer exponentiation (checks off)\n+\n+with System.Exn_Gen;\n+\n+package System.Exn_LLI is\n+pragma Pure (Exn_LLI);\n+\n+   function Exn_Long_Long_Integer is\n+     new System.Exn_Gen.Exn_Integer_Type (Long_Long_Integer);\n+\n+end System.Exn_LLI;"}, {"sha": "1c19ac89804d438bafe66a32b6b1f0fd5ea7a390", "filename": "gcc/ada/s-exnsfl.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnsfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnsfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnsfl.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . E X N _ S F L T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Short_Float exponentiation (checks off)\n+\n+with System.Exn_Gen;\n+\n+package System.Exn_SFlt is\n+pragma Pure (Exn_SFlt);\n+\n+   function Exn_Short_Float is\n+     new System.Exn_Gen.Exn_Float_Type (Short_Float);\n+\n+end System.Exn_SFlt;"}, {"sha": "5623c85ba87ae65be77eee9b4616d4e4553a77ef", "filename": "gcc/ada/s-exnsin.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnsin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnsin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnsin.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . E X N _ S I N T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Short_Integer exponentiation (checks off)\n+\n+with System.Exn_Gen;\n+\n+package System.Exn_SInt is\n+pragma Pure (Exn_SInt);\n+\n+   function Exn_Short_Integer is\n+     new System.Exn_Gen.Exn_Integer_Type (Short_Integer);\n+\n+end System.Exn_SInt;"}, {"sha": "4ff8f05609eb80a6626c8c1907cde6b8b5f97ef1", "filename": "gcc/ada/s-exnssi.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnssi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-exnssi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exnssi.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X N _ S S I                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Short_Short_Integer exponentiation (checks off)\n+\n+with System.Exn_Gen;\n+\n+package System.Exn_SSI is\n+pragma Pure (Exn_SSI);\n+\n+   function Exn_Short_Short_Integer is\n+     new System.Exn_Gen.Exn_Integer_Type (Short_Short_Integer);\n+\n+end System.Exn_SSI;"}, {"sha": "4460410f59d7a5c3d60be51eae20002c291882d6", "filename": "gcc/ada/s-expflt.ads", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expflt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expflt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expflt.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,45 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                        S Y S T E M . E X P F L T                         --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.10 $                             --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Float exponentiation (checks on)\n+\n+with System.Exp_Gen;\n+\n+package System.Exp_Flt is\n+pragma Pure (Exp_Flt);\n+\n+   function Exp_Float is new System.Exp_Gen.Exp_Float_Type (Float);\n+\n+end System.Exp_Flt;"}, {"sha": "4ae3c9830c6bc322864cf44b6a2c52ab829c1bf4", "filename": "gcc/ada/s-expgen.adb", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expgen.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,183 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X P _ G E N                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.11 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Exp_Gen is\n+\n+   --------------------\n+   -- Exp_Float_Type --\n+   --------------------\n+\n+   function Exp_Float_Type\n+     (Left  : Type_Of_Base;\n+      Right : Integer)\n+      return  Type_Of_Base\n+   is\n+      Result : Type_Of_Base := 1.0;\n+      Factor : Type_Of_Base := Left;\n+      Exp    : Integer := Right;\n+\n+   begin\n+      --  We use the standard logarithmic approach, Exp gets shifted right\n+      --  testing successive low order bits and Factor is the value of the\n+      --  base raised to the next power of 2. For positive exponents we\n+      --  multiply the result by this factor, for negative exponents, we\n+      --  divide by this factor.\n+\n+      if Exp >= 0 then\n+\n+         --  For a positive exponent, if we get a constraint error during\n+         --  this loop, it is an overflow, and the constraint error will\n+         --  simply be passed on to the caller.\n+\n+         loop\n+            if Exp rem 2 /= 0 then\n+               declare\n+                  pragma Unsuppress (All_Checks);\n+               begin\n+                  Result := Result * Factor;\n+               end;\n+            end if;\n+\n+            Exp := Exp / 2;\n+            exit when Exp = 0;\n+\n+            declare\n+               pragma Unsuppress (All_Checks);\n+            begin\n+               Factor := Factor * Factor;\n+            end;\n+         end loop;\n+\n+         return Result;\n+\n+      --  Now we know that the exponent is negative, check for case of\n+      --  base of 0.0 which always generates a constraint error.\n+\n+      elsif Factor = 0.0 then\n+         raise Constraint_Error;\n+\n+      --  Here we have a negative exponent with a non-zero base\n+\n+      else\n+\n+         --  For the negative exponent case, a constraint error during this\n+         --  calculation happens if Factor gets too large, and the proper\n+         --  response is to return 0.0, since what we essenmtially have is\n+         --  1.0 / infinity, and the closest model number will be zero.\n+\n+         begin\n+            loop\n+               if Exp rem 2 /= 0 then\n+                  declare\n+                     pragma Unsuppress (All_Checks);\n+                  begin\n+                     Result := Result * Factor;\n+                  end;\n+               end if;\n+\n+               Exp := Exp / 2;\n+               exit when Exp = 0;\n+\n+               declare\n+                  pragma Unsuppress (All_Checks);\n+               begin\n+                  Factor := Factor * Factor;\n+               end;\n+            end loop;\n+\n+            declare\n+               pragma Unsuppress (All_Checks);\n+            begin\n+               return 1.0 / Result;\n+            end;\n+\n+         exception\n+\n+            when Constraint_Error =>\n+               return 0.0;\n+         end;\n+      end if;\n+   end Exp_Float_Type;\n+\n+   ----------------------\n+   -- Exp_Integer_Type --\n+   ----------------------\n+\n+   --  Note that negative exponents get a constraint error because the\n+   --  subtype of the Right argument (the exponent) is Natural.\n+\n+   function Exp_Integer_Type\n+     (Left  : Type_Of_Base;\n+      Right : Natural)\n+      return  Type_Of_Base\n+   is\n+      Result : Type_Of_Base := 1;\n+      Factor : Type_Of_Base := Left;\n+      Exp    : Natural := Right;\n+\n+   begin\n+      --  We use the standard logarithmic approach, Exp gets shifted right\n+      --  testing successive low order bits and Factor is the value of the\n+      --  base raised to the next power of 2.\n+\n+      --  Note: it is not worth special casing the cases of base values -1,0,+1\n+      --  since the expander does this when the base is a literal, and other\n+      --  cases will be extremely rare.\n+\n+      if Exp /= 0 then\n+         loop\n+            if Exp rem 2 /= 0 then\n+               declare\n+                  pragma Unsuppress (All_Checks);\n+               begin\n+                  Result := Result * Factor;\n+               end;\n+            end if;\n+\n+            Exp := Exp / 2;\n+            exit when Exp = 0;\n+\n+            declare\n+               pragma Unsuppress (All_Checks);\n+            begin\n+               Factor := Factor * Factor;\n+            end;\n+         end loop;\n+      end if;\n+\n+      return Result;\n+   end Exp_Integer_Type;\n+\n+end System.Exp_Gen;"}, {"sha": "05b72a60d1446edc9f81049b216321fbab0ec533", "filename": "gcc/ada/s-expgen.ads", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expgen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expgen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expgen.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,66 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X P _ G E N                         --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--     Copyright (C) 1992,1993,1994,1995 Free Software Foundation, Inc.     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the generic functions which are instantiated with\n+--  predefined integer and real types to generate the runtime exponentiation\n+--  functions called by expanded code generated by Expand_Op_Expon. This\n+--  version of the package contains routines that are compiled with overflow\n+--  checks enabled, so they are called for exponentiation operations which\n+--  require overflow checking\n+\n+package System.Exp_Gen is\n+pragma Pure (System.Exp_Gen);\n+\n+   --  Exponentiation for float types (checks on)\n+\n+   generic\n+      type Type_Of_Base is digits <>;\n+\n+   function Exp_Float_Type\n+     (Left  : Type_Of_Base;\n+      Right : Integer)\n+      return  Type_Of_Base;\n+\n+   --  Exponentiation for signed integer types (checks on)\n+\n+   generic\n+      type Type_Of_Base is range <>;\n+\n+   function Exp_Integer_Type\n+     (Left  : Type_Of_Base;\n+      Right : Natural)\n+      return  Type_Of_Base;\n+\n+end System.Exp_Gen;"}, {"sha": "7a23fce46f3996d6c7f912a28587e7ba67151a77", "filename": "gcc/ada/s-expint.ads", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expint.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,45 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                        S Y S T E M . E X P I N T                         --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992,1993 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Integer exponentiation (checks on)\n+\n+with System.Exp_Gen;\n+\n+package System.Exp_Int is\n+pragma Pure (Exp_Int);\n+\n+   function Exp_Integer is new System.Exp_Gen.Exp_Integer_Type (Integer);\n+\n+end System.Exp_Int;"}, {"sha": "34ec71b61d1d650b3c7333af839bef13ce3d0c60", "filename": "gcc/ada/s-explfl.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-explfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-explfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-explfl.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . E X P _ L F L T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Long_Float exponentiation (checks on)\n+\n+with System.Exp_Gen;\n+\n+package System.Exp_LFlt is\n+pragma Pure (Exp_LFlt);\n+\n+   function Exp_Long_Float is\n+     new System.Exp_Gen.Exp_Float_Type (Long_Float);\n+\n+end System.Exp_LFlt;"}, {"sha": "1c4b5247ca208049dd2a7bf31febaf81452fc303", "filename": "gcc/ada/s-explin.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-explin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-explin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-explin.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . E X P _ L I N T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Long_Integer exponentiation (checks on)\n+\n+with System.Exp_Gen;\n+\n+package System.Exp_LInt is\n+pragma Pure (Exp_LInt);\n+\n+   function Exp_Long_Integer is\n+     new System.Exp_Gen.Exp_Integer_Type (Long_Integer);\n+\n+end System.Exp_LInt;"}, {"sha": "253a9577f1023c74a51d4d0c79cd3fdff75906ba", "filename": "gcc/ada/s-expllf.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expllf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expllf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expllf.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X P _ L L F                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Long_Long_Float exponentiation (checks on)\n+\n+with System.Exp_Gen;\n+\n+package System.Exp_LLF is\n+pragma Pure (Exp_LLF);\n+\n+   function Exp_Long_Long_Float is\n+     new System.Exp_Gen.Exp_Float_Type (Long_Long_Float);\n+\n+end System.Exp_LLF;"}, {"sha": "beb545b03b16af01743d112f58a86d5075fc89a5", "filename": "gcc/ada/s-explli.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-explli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-explli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-explli.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X P _ L L I                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992,1993 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Long_Long_Integer exponentiation\n+\n+with System.Exp_Gen;\n+\n+package System.Exp_LLI is\n+pragma Pure (Exp_LLI);\n+\n+   function Exp_Long_Long_Integer is\n+     new System.Exp_Gen.Exp_Integer_Type (Long_Long_Integer);\n+\n+end System.Exp_LLI;"}, {"sha": "39f3144a3a142b8cd0ab5a21e5617227752cb42c", "filename": "gcc/ada/s-expllu.adb", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expllu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expllu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expllu.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,78 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                        S Y S T E M . X P _ B M L                         --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.7 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Unsigned_Types; use System.Unsigned_Types;\n+\n+package body System.Exp_LLU is\n+\n+   ----------------------------\n+   -- Exp_Long_Long_Unsigned --\n+   ----------------------------\n+\n+   function Exp_Long_Long_Unsigned\n+     (Left  : Long_Long_Unsigned;\n+      Right : Natural)\n+      return  Long_Long_Unsigned\n+   is\n+      Result : Long_Long_Unsigned := 1;\n+      Factor : Long_Long_Unsigned := Left;\n+      Exp    : Natural := Right;\n+\n+   begin\n+      --  We use the standard logarithmic approach, Exp gets shifted right\n+      --  testing successive low order bits and Factor is the value of the\n+      --  base raised to the next power of 2.\n+\n+      --  Note: it is not worth special casing the cases of base values -1,0,+1\n+      --  since the expander does this when the base is a literal, and other\n+      --  cases will be extremely rare.\n+\n+      if Exp /= 0 then\n+         loop\n+            if Exp rem 2 /= 0 then\n+               Result := Result * Factor;\n+            end if;\n+\n+            Exp := Exp / 2;\n+            exit when Exp = 0;\n+            Factor := Factor * Factor;\n+         end loop;\n+      end if;\n+\n+      return Result;\n+\n+   end Exp_Long_Long_Unsigned;\n+\n+end System.Exp_LLU;"}, {"sha": "b75420920f8d224ab4ad7a41c44fd867d81cb222", "filename": "gcc/ada/s-expllu.ads", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expllu.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X P _ L L U                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.7 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1997 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This procedure performs exponentiation of unsigned types (with binary\n+--  modulus values exceeding that of Unsigned_Types.Unsigned). The result\n+--  is always full width, the caller must do a masking operation if the\n+--  modulus is less than 2 ** (Long_Long_Unsigned'Size).\n+\n+with System.Unsigned_Types;\n+\n+package System.Exp_LLU is\n+pragma Pure (Exp_LLU);\n+\n+   function Exp_Long_Long_Unsigned\n+     (Left  : System.Unsigned_Types.Long_Long_Unsigned;\n+      Right : Natural)\n+      return  System.Unsigned_Types.Long_Long_Unsigned;\n+\n+end System.Exp_LLU;"}, {"sha": "a87002bcbf16555a2dfae12f72f96b66f01c3d3e", "filename": "gcc/ada/s-expmod.adb", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expmod.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expmod.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expmod.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,91 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X P _ M O D                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.7 $                              --\n+--                                                                          --\n+--     Copyright (C) 1992,1993,1994,1995 Free Software Foundation, Inc.     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Exp_Mod is\n+\n+   -----------------\n+   -- Exp_Modular --\n+   -----------------\n+\n+   function Exp_Modular\n+     (Left    : Integer;\n+      Modulus : Integer;\n+      Right   : Natural)\n+      return    Integer\n+   is\n+      Result : Integer := 1;\n+      Factor : Integer := Left;\n+      Exp    : Natural := Right;\n+\n+      function Mult (X, Y : Integer) return Integer;\n+      pragma Inline (Mult);\n+      --  Modular multiplication. Note that we can't take advantage of the\n+      --  compiler's circuit, because the modulus is not known statically.\n+\n+      function Mult (X, Y : Integer) return Integer is\n+      begin\n+         return Integer\n+           (Long_Long_Integer (X) * Long_Long_Integer (Y)\n+             mod Long_Long_Integer (Modulus));\n+      end Mult;\n+\n+   --  Start of processing for Exp_Modular\n+\n+   begin\n+      --  We use the standard logarithmic approach, Exp gets shifted right\n+      --  testing successive low order bits and Factor is the value of the\n+      --  base raised to the next power of 2.\n+\n+      --  Note: it is not worth special casing the cases of base values -1,0,+1\n+      --  since the expander does this when the base is a literal, and other\n+      --  cases will be extremely rare.\n+\n+      if Exp /= 0 then\n+         loop\n+            if Exp rem 2 /= 0 then\n+               Result := Mult (Result, Factor);\n+            end if;\n+\n+            Exp := Exp / 2;\n+            exit when Exp = 0;\n+            Factor := Mult (Factor, Factor);\n+         end loop;\n+      end if;\n+\n+      return Result;\n+\n+   end Exp_Modular;\n+\n+end System.Exp_Mod;"}, {"sha": "79f6400a3a6974ddfa05a476a32063fc038eea43", "filename": "gcc/ada/s-expmod.ads", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expmod.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expmod.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expmod.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,49 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X P _ M O D                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.6 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This procedure performs exponentiation of a modular type with non-binary\n+--  modulus values. Arithmetic is done in Long_Long_Unsigned, with explicit\n+--  accounting for the modulus value which is passed as the second argument.\n+\n+package System.Exp_Mod is\n+pragma Pure (Exp_Mod);\n+\n+   function Exp_Modular\n+     (Left    : Integer;\n+      Modulus : Integer;\n+      Right   : Natural)\n+      return    Integer;\n+\n+end System.Exp_Mod;"}, {"sha": "cfabd1650a68760e8fcc80f1037c94f827e3aba6", "filename": "gcc/ada/s-expsfl.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expsfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expsfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expsfl.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . E X P _ S F L T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Short_Float exponentiation (checks on)\n+\n+with System.Exp_Gen;\n+\n+package System.Exp_SFlt is\n+pragma Pure (Exp_SFlt);\n+\n+   function Exp_Short_Float is\n+     new System.Exp_Gen.Exp_Float_Type (Short_Float);\n+\n+end System.Exp_SFlt;"}, {"sha": "c5bc2c3054b2ea52ed2b9e2532bc4595e006a2bd", "filename": "gcc/ada/s-expsin.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expsin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expsin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expsin.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . E X P _ S I N T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Short_Integer exponentiation (checks on)\n+\n+with System.Exp_Gen;\n+\n+package System.Exp_SInt is\n+pragma Pure (Exp_SInt);\n+\n+   function Exp_Short_Integer is\n+     new System.Exp_Gen.Exp_Integer_Type (Short_Integer);\n+\n+end System.Exp_SInt;"}, {"sha": "802412d56c6030e0da9ffd9ad8574d8aacdc1e72", "filename": "gcc/ada/s-expssi.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expssi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expssi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expssi.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                        S Y S T E M . E X P S S I                         --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Short_Short_Integer exponentiation (checks on)\n+\n+with System.Exp_Gen;\n+\n+package System.Exp_SSI is\n+pragma Pure (Exp_SSI);\n+\n+   function Exp_Short_Short_Integer is\n+     new System.Exp_Gen.Exp_Integer_Type (Short_Short_Integer);\n+\n+end System.Exp_SSI;"}, {"sha": "a02a6994cb4e5416fc47624d0c70b77bc957d674", "filename": "gcc/ada/s-expuns.adb", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expuns.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expuns.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expuns.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,77 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X P _ U N S                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.10 $                             --\n+--                                                                          --\n+--          Copyright (C) 1992-1997 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Unsigned_Types; use System.Unsigned_Types;\n+\n+package body System.Exp_Uns is\n+\n+   ------------------\n+   -- Exp_Unsigned --\n+   ------------------\n+\n+   function Exp_Unsigned\n+     (Left  : Unsigned;\n+      Right : Natural)\n+      return  Unsigned\n+   is\n+      Result  : Unsigned := 1;\n+      Factor  : Unsigned := Left;\n+      Exp     : Natural := Right;\n+\n+   begin\n+      --  We use the standard logarithmic approach, Exp gets shifted right\n+      --  testing successive low order bits and Factor is the value of the\n+      --  base raised to the next power of 2.\n+\n+      --  Note: it is not worth special casing the cases of base values -1,0,+1\n+      --  since the expander does this when the base is a literal, and other\n+      --  cases will be extremely rare.\n+\n+      if Exp /= 0 then\n+         loop\n+            if Exp rem 2 /= 0 then\n+               Result := Result * Factor;\n+            end if;\n+\n+            Exp := Exp / 2;\n+            exit when Exp = 0;\n+            Factor := Factor * Factor;\n+         end loop;\n+      end if;\n+\n+      return Result;\n+   end Exp_Unsigned;\n+\n+end System.Exp_Uns;"}, {"sha": "9d4989bf16b14f5fabba102617da957f6d96f138", "filename": "gcc/ada/s-expuns.ads", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expuns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-expuns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-expuns.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . E X P _ U N S                         --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1997 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This procedure performs exponentiation of unsigned types (with binary\n+--  modulus values up to and including that of Unsigned_Types.Unsigned).\n+--  The result is always full width, the caller must do a masking operation\n+--  the modulus is less than 2 ** (Unsigned'Size).\n+\n+with System.Unsigned_Types;\n+\n+package System.Exp_Uns is\n+pragma Pure (Exp_Uns);\n+\n+   function Exp_Unsigned\n+     (Left  : System.Unsigned_Types.Unsigned;\n+      Right : Natural)\n+      return  System.Unsigned_Types.Unsigned;\n+\n+end System.Exp_Uns;"}, {"sha": "b27d4b2b8399311c3b2990a2e17e484c373d8fa8", "filename": "gcc/ada/s-fatflt.ads", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatflt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatflt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatflt.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                       S Y S T E M . F A T _ F L T                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.3 $                              --\n+--                                                                          --\n+--   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains an instantiation of the floating-point attribute\n+--  runtime routines for the type Float.\n+\n+with System.Fat_Gen;\n+\n+package System.Fat_Flt is\n+pragma Pure (Fat_Flt);\n+\n+   --  Note the only entity from this package that is acccessed by Rtsfind\n+   --  is the name of the package instantiation. Entities within this package\n+   --  (i.e. the individual floating-point attribute routines) are accessed\n+   --  by name using selected notation.\n+\n+   package Fat_Float is new System.Fat_Gen (Float);\n+\n+end System.Fat_Flt;"}, {"sha": "7fb8160c691158539d63a3674e33e7c03698b618", "filename": "gcc/ada/s-fatgen.adb", "status": "added", "additions": 836, "deletions": 0, "changes": 836, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,836 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                       S Y S T E M . F A T _ G E N                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.19 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  The implementation here is portable to any IEEE implementation. It does\n+--  not handle non-binary radix, and also assumes that model numbers and\n+--  machine numbers are basically identical, which is not true of all possible\n+--  floating-point implementations. On a non-IEEE machine, this body must be\n+--  specialized appropriately, or better still, its generic instantiations\n+--  should be replaced by efficient machine-specific code.\n+\n+with Ada.Unchecked_Conversion; use Ada;\n+with System;\n+package body System.Fat_Gen is\n+\n+   Float_Radix        : constant T := T (T'Machine_Radix);\n+   Float_Radix_Inv    : constant T := 1.0 / Float_Radix;\n+   Radix_To_M_Minus_1 : constant T := Float_Radix ** (T'Machine_Mantissa - 1);\n+\n+   pragma Assert (T'Machine_Radix = 2);\n+   --  This version does not handle radix 16\n+\n+   --  Constants for Decompose and Scaling\n+\n+   Rad    : constant T := T (T'Machine_Radix);\n+   Invrad : constant T := 1.0 / Rad;\n+\n+   subtype Expbits is Integer range 0 .. 6;\n+   --  2 ** (2 ** 7) might overflow.  how big can radix-16 exponents get?\n+\n+   Log_Power : constant array (Expbits) of Integer := (1, 2, 4, 8, 16, 32, 64);\n+\n+   R_Power : constant array (Expbits) of T :=\n+     (Rad **  1,\n+      Rad **  2,\n+      Rad **  4,\n+      Rad **  8,\n+      Rad ** 16,\n+      Rad ** 32,\n+      Rad ** 64);\n+\n+   R_Neg_Power : constant array (Expbits) of T :=\n+     (Invrad **  1,\n+      Invrad **  2,\n+      Invrad **  4,\n+      Invrad **  8,\n+      Invrad ** 16,\n+      Invrad ** 32,\n+      Invrad ** 64);\n+\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   procedure Decompose (XX : T; Frac : out T; Expo : out UI);\n+   --  Decomposes a floating-point number into fraction and exponent parts\n+\n+   function Gradual_Scaling  (Adjustment : UI) return T;\n+   --  Like Scaling with a first argument of 1.0, but returns the smallest\n+   --  denormal rather than zero when the adjustment is smaller than\n+   --  Machine_Emin. Used for Succ and Pred.\n+\n+   --------------\n+   -- Adjacent --\n+   --------------\n+\n+   function Adjacent (X, Towards : T) return T is\n+   begin\n+      if Towards = X then\n+         return X;\n+\n+      elsif Towards > X then\n+         return Succ (X);\n+\n+      else\n+         return Pred (X);\n+      end if;\n+   end Adjacent;\n+\n+   -------------\n+   -- Ceiling --\n+   -------------\n+\n+   function Ceiling (X : T) return T is\n+      XT : constant T := Truncation (X);\n+\n+   begin\n+      if X <= 0.0 then\n+         return XT;\n+\n+      elsif X = XT then\n+         return X;\n+\n+      else\n+         return XT + 1.0;\n+      end if;\n+   end Ceiling;\n+\n+   -------------\n+   -- Compose --\n+   -------------\n+\n+   function Compose (Fraction : T; Exponent : UI) return T is\n+      Arg_Frac : T;\n+      Arg_Exp  : UI;\n+\n+   begin\n+      Decompose (Fraction, Arg_Frac, Arg_Exp);\n+      return Scaling (Arg_Frac, Exponent);\n+   end Compose;\n+\n+   ---------------\n+   -- Copy_Sign --\n+   ---------------\n+\n+   function Copy_Sign (Value, Sign : T) return T is\n+      Result : T;\n+\n+      function Is_Negative (V : T) return Boolean;\n+      pragma Import (Intrinsic, Is_Negative);\n+\n+   begin\n+      Result := abs Value;\n+\n+      if Is_Negative (Sign) then\n+         return -Result;\n+      else\n+         return Result;\n+      end if;\n+   end Copy_Sign;\n+\n+   ---------------\n+   -- Decompose --\n+   ---------------\n+\n+   procedure Decompose (XX : T; Frac : out T; Expo : out UI) is\n+      X : T := T'Machine (XX);\n+\n+   begin\n+      if X = 0.0 then\n+         Frac := X;\n+         Expo := 0;\n+\n+         --  More useful would be defining Expo to be T'Machine_Emin - 1 or\n+         --  T'Machine_Emin - T'Machine_Mantissa, which would preserve\n+         --  monotonicity of the exponent fuction ???\n+\n+      --  Check for infinities, transfinites, whatnot.\n+\n+      elsif X > T'Safe_Last then\n+         Frac := Invrad;\n+         Expo := T'Machine_Emax + 1;\n+\n+      elsif X < T'Safe_First then\n+         Frac := -Invrad;\n+         Expo := T'Machine_Emax + 2;    -- how many extra negative values?\n+\n+      else\n+         --  Case of nonzero finite x. Essentially, we just multiply\n+         --  by Rad ** (+-2**N) to reduce the range.\n+\n+         declare\n+            Ax : T  := abs X;\n+            Ex : UI := 0;\n+\n+         --  Ax * Rad ** Ex is invariant.\n+\n+         begin\n+            if Ax >= 1.0 then\n+               while Ax >= R_Power (Expbits'Last) loop\n+                  Ax := Ax * R_Neg_Power (Expbits'Last);\n+                  Ex := Ex + Log_Power (Expbits'Last);\n+               end loop;\n+\n+               --  Ax < Rad ** 64\n+\n+               for N in reverse Expbits'First .. Expbits'Last - 1 loop\n+                  if Ax >= R_Power (N) then\n+                     Ax := Ax * R_Neg_Power (N);\n+                     Ex := Ex + Log_Power (N);\n+                  end if;\n+\n+                  --  Ax < R_Power (N)\n+               end loop;\n+\n+               --  1 <= Ax < Rad\n+\n+               Ax := Ax * Invrad;\n+               Ex := Ex + 1;\n+\n+            else\n+               --  0 < ax < 1\n+\n+               while Ax < R_Neg_Power (Expbits'Last) loop\n+                  Ax := Ax * R_Power (Expbits'Last);\n+                  Ex := Ex - Log_Power (Expbits'Last);\n+               end loop;\n+\n+               --  Rad ** -64 <= Ax < 1\n+\n+               for N in reverse Expbits'First .. Expbits'Last - 1 loop\n+                  if Ax < R_Neg_Power (N) then\n+                     Ax := Ax * R_Power (N);\n+                     Ex := Ex - Log_Power (N);\n+                  end if;\n+\n+                  --  R_Neg_Power (N) <= Ax < 1\n+               end loop;\n+            end if;\n+\n+            if X > 0.0 then\n+               Frac := Ax;\n+            else\n+               Frac := -Ax;\n+            end if;\n+\n+            Expo := Ex;\n+         end;\n+      end if;\n+   end Decompose;\n+\n+   --------------\n+   -- Exponent --\n+   --------------\n+\n+   function Exponent (X : T) return UI is\n+      X_Frac : T;\n+      X_Exp  : UI;\n+\n+   begin\n+      Decompose (X, X_Frac, X_Exp);\n+      return X_Exp;\n+   end Exponent;\n+\n+   -----------\n+   -- Floor --\n+   -----------\n+\n+   function Floor (X : T) return T is\n+      XT : constant T := Truncation (X);\n+\n+   begin\n+      if X >= 0.0 then\n+         return XT;\n+\n+      elsif XT = X then\n+         return X;\n+\n+      else\n+         return XT - 1.0;\n+      end if;\n+   end Floor;\n+\n+   --------------\n+   -- Fraction --\n+   --------------\n+\n+   function Fraction (X : T) return T is\n+      X_Frac : T;\n+      X_Exp  : UI;\n+\n+   begin\n+      Decompose (X, X_Frac, X_Exp);\n+      return X_Frac;\n+   end Fraction;\n+\n+   ---------------------\n+   -- Gradual_Scaling --\n+   ---------------------\n+\n+   function Gradual_Scaling  (Adjustment : UI) return T is\n+      Y  : T;\n+      Y1 : T;\n+      Ex : UI := Adjustment;\n+\n+   begin\n+      if Adjustment < T'Machine_Emin then\n+         Y  := 2.0 ** T'Machine_Emin;\n+         Y1 := Y;\n+         Ex := Ex - T'Machine_Emin;\n+\n+         while Ex <= 0 loop\n+            Y := T'Machine (Y / 2.0);\n+\n+            if Y = 0.0 then\n+               return Y1;\n+            end if;\n+\n+            Ex := Ex + 1;\n+            Y1 := Y;\n+         end loop;\n+\n+         return Y1;\n+\n+      else\n+         return Scaling (1.0, Adjustment);\n+      end if;\n+   end Gradual_Scaling;\n+\n+   ------------------\n+   -- Leading_Part --\n+   ------------------\n+\n+   function Leading_Part (X : T; Radix_Digits : UI) return T is\n+      L    : UI;\n+      Y, Z : T;\n+\n+   begin\n+      if Radix_Digits >= T'Machine_Mantissa then\n+         return X;\n+\n+      else\n+         L := Exponent (X) - Radix_Digits;\n+         Y := Truncation (Scaling (X, -L));\n+         Z := Scaling (Y, L);\n+         return Z;\n+      end if;\n+\n+   end Leading_Part;\n+\n+   -------------\n+   -- Machine --\n+   -------------\n+\n+   --  The trick with Machine is to force the compiler to store the result\n+   --  in memory so that we do not have extra precision used. The compiler\n+   --  is clever, so we have to outwit its possible optimizations! We do\n+   --  this by using an intermediate pragma Volatile location.\n+\n+   function Machine (X : T) return T is\n+      Temp : T;\n+      pragma Volatile (Temp);\n+\n+   begin\n+      Temp := X;\n+      return Temp;\n+   end Machine;\n+\n+   -----------\n+   -- Model --\n+   -----------\n+\n+   --  We treat Model as identical to Machine. This is true of IEEE and other\n+   --  nice floating-point systems, but not necessarily true of all systems.\n+\n+   function Model (X : T) return T is\n+   begin\n+      return Machine (X);\n+   end Model;\n+\n+   ----------\n+   -- Pred --\n+   ----------\n+\n+   --  Subtract from the given number a number equivalent to the value of its\n+   --  least significant bit. Given that the most significant bit represents\n+   --  a value of 1.0 * radix ** (exp - 1), the value we want is obtained by\n+   --  shifting this by (mantissa-1) bits to the right, i.e. decreasing the\n+   --  exponent by that amount.\n+\n+   --  Zero has to be treated specially, since its exponent is zero\n+\n+   function Pred (X : T) return T is\n+      X_Frac : T;\n+      X_Exp  : UI;\n+\n+   begin\n+      if X = 0.0 then\n+         return -Succ (X);\n+\n+      else\n+         Decompose (X, X_Frac, X_Exp);\n+\n+         --  A special case, if the number we had was a positive power of\n+         --  two, then we want to subtract half of what we would otherwise\n+         --  subtract, since the exponent is going to be reduced.\n+\n+         if X_Frac = 0.5 and then X > 0.0 then\n+            return X - Gradual_Scaling (X_Exp - T'Machine_Mantissa - 1);\n+\n+         --  Otherwise the exponent stays the same\n+\n+         else\n+            return X - Gradual_Scaling (X_Exp - T'Machine_Mantissa);\n+         end if;\n+      end if;\n+   end Pred;\n+\n+   ---------------\n+   -- Remainder --\n+   ---------------\n+\n+   function Remainder (X, Y : T) return T is\n+      A        : T;\n+      B        : T;\n+      Arg      : T;\n+      P        : T;\n+      Arg_Frac : T;\n+      P_Frac   : T;\n+      Sign_X   : T;\n+      IEEE_Rem : T;\n+      Arg_Exp  : UI;\n+      P_Exp    : UI;\n+      K        : UI;\n+      P_Even   : Boolean;\n+\n+   begin\n+      if X > 0.0 then\n+         Sign_X :=  1.0;\n+         Arg := X;\n+      else\n+         Sign_X := -1.0;\n+         Arg := -X;\n+      end if;\n+\n+      P := abs Y;\n+\n+      if Arg < P then\n+         P_Even := True;\n+         IEEE_Rem := Arg;\n+         P_Exp := Exponent (P);\n+\n+      else\n+         Decompose (Arg, Arg_Frac, Arg_Exp);\n+         Decompose (P,   P_Frac,   P_Exp);\n+\n+         P := Compose (P_Frac, Arg_Exp);\n+         K := Arg_Exp - P_Exp;\n+         P_Even := True;\n+         IEEE_Rem := Arg;\n+\n+         for Cnt in reverse 0 .. K loop\n+            if IEEE_Rem >= P then\n+               P_Even := False;\n+               IEEE_Rem := IEEE_Rem - P;\n+            else\n+               P_Even := True;\n+            end if;\n+\n+            P := P * 0.5;\n+         end loop;\n+      end if;\n+\n+      --  That completes the calculation of modulus remainder. The final\n+      --  step is get the IEEE remainder. Here we need to compare Rem with\n+      --  (abs Y) / 2. We must be careful of unrepresentable Y/2 value\n+      --  caused by subnormal numbers\n+\n+      if P_Exp >= 0 then\n+         A := IEEE_Rem;\n+         B := abs Y * 0.5;\n+\n+      else\n+         A := IEEE_Rem * 2.0;\n+         B := abs Y;\n+      end if;\n+\n+      if A > B or else (A = B and then not P_Even) then\n+         IEEE_Rem := IEEE_Rem - abs Y;\n+      end if;\n+\n+      return Sign_X * IEEE_Rem;\n+\n+   end Remainder;\n+\n+   --------------\n+   -- Rounding --\n+   --------------\n+\n+   function Rounding (X : T) return T is\n+      Result : T;\n+      Tail   : T;\n+\n+   begin\n+      Result := Truncation (abs X);\n+      Tail   := abs X - Result;\n+\n+      if Tail >= 0.5  then\n+         Result := Result + 1.0;\n+      end if;\n+\n+      if X > 0.0 then\n+         return Result;\n+\n+      elsif X < 0.0 then\n+         return -Result;\n+\n+      --  For zero case, make sure sign of zero is preserved\n+\n+      else\n+         return X;\n+      end if;\n+\n+   end Rounding;\n+\n+   -------------\n+   -- Scaling --\n+   -------------\n+\n+   --  Return x * rad ** adjustment quickly,\n+   --  or quietly underflow to zero, or overflow naturally.\n+\n+   function Scaling (X : T; Adjustment : UI) return T is\n+   begin\n+      if X = 0.0 or else Adjustment = 0 then\n+         return X;\n+      end if;\n+\n+      --  Nonzero x. essentially, just multiply repeatedly by Rad ** (+-2**n).\n+\n+      declare\n+         Y  : T  := X;\n+         Ex : UI := Adjustment;\n+\n+      --  Y * Rad ** Ex is invariant\n+\n+      begin\n+         if Ex < 0 then\n+            while Ex <= -Log_Power (Expbits'Last) loop\n+               Y := Y * R_Neg_Power (Expbits'Last);\n+               Ex := Ex + Log_Power (Expbits'Last);\n+            end loop;\n+\n+            --  -64 < Ex <= 0\n+\n+            for N in reverse Expbits'First .. Expbits'Last - 1 loop\n+               if Ex <= -Log_Power (N) then\n+                  Y := Y * R_Neg_Power (N);\n+                  Ex := Ex + Log_Power (N);\n+               end if;\n+\n+               --  -Log_Power (N) < Ex <= 0\n+            end loop;\n+\n+            --  Ex = 0\n+\n+         else\n+            --  Ex >= 0\n+\n+            while Ex >= Log_Power (Expbits'Last) loop\n+               Y := Y * R_Power (Expbits'Last);\n+               Ex := Ex - Log_Power (Expbits'Last);\n+            end loop;\n+\n+            --  0 <= Ex < 64\n+\n+            for N in reverse Expbits'First .. Expbits'Last - 1 loop\n+               if Ex >= Log_Power (N) then\n+                  Y := Y * R_Power (N);\n+                  Ex := Ex - Log_Power (N);\n+               end if;\n+\n+               --  0 <= Ex < Log_Power (N)\n+            end loop;\n+\n+            --  Ex = 0\n+         end if;\n+         return Y;\n+      end;\n+   end Scaling;\n+\n+   ----------\n+   -- Succ --\n+   ----------\n+\n+   --  Similar computation to that of Pred: find value of least significant\n+   --  bit of given number, and add. Zero has to be treated specially since\n+   --  the exponent can be zero, and also we want the smallest denormal if\n+   --  denormals are supported.\n+\n+   function Succ (X : T) return T is\n+      X_Frac : T;\n+      X_Exp  : UI;\n+      X1, X2 : T;\n+\n+   begin\n+      if X = 0.0 then\n+         X1 := 2.0 ** T'Machine_Emin;\n+\n+         --  Following loop generates smallest denormal\n+\n+         loop\n+            X2 := T'Machine (X1 / 2.0);\n+            exit when X2 = 0.0;\n+            X1 := X2;\n+         end loop;\n+\n+         return X1;\n+\n+      else\n+         Decompose (X, X_Frac, X_Exp);\n+\n+         --  A special case, if the number we had was a negative power of\n+         --  two, then we want to add half of what we would otherwise add,\n+         --  since the exponent is going to be reduced.\n+\n+         if X_Frac = 0.5 and then X < 0.0 then\n+            return X + Gradual_Scaling (X_Exp - T'Machine_Mantissa - 1);\n+\n+         --  Otherwise the exponent stays the same\n+\n+         else\n+            return X + Gradual_Scaling (X_Exp - T'Machine_Mantissa);\n+         end if;\n+      end if;\n+   end Succ;\n+\n+   ----------------\n+   -- Truncation --\n+   ----------------\n+\n+   --  The basic approach is to compute\n+\n+   --    T'Machine (RM1 + N) - RM1.\n+\n+   --  where N >= 0.0 and RM1 = radix ** (mantissa - 1)\n+\n+   --  This works provided that the intermediate result (RM1 + N) does not\n+   --  have extra precision (which is why we call Machine). When we compute\n+   --  RM1 + N, the exponent of N will be normalized and the mantissa shifted\n+   --  shifted appropriately so the lower order bits, which cannot contribute\n+   --  to the integer part of N, fall off on the right. When we subtract RM1\n+   --  again, the significant bits of N are shifted to the left, and what we\n+   --  have is an integer, because only the first e bits are different from\n+   --  zero (assuming binary radix here).\n+\n+   function Truncation (X : T) return T is\n+      Result : T;\n+\n+   begin\n+      Result := abs X;\n+\n+      if Result >= Radix_To_M_Minus_1 then\n+         return Machine (X);\n+\n+      else\n+         Result := Machine (Radix_To_M_Minus_1 + Result) - Radix_To_M_Minus_1;\n+\n+         if Result > abs X  then\n+            Result := Result - 1.0;\n+         end if;\n+\n+         if X > 0.0 then\n+            return  Result;\n+\n+         elsif X < 0.0 then\n+            return -Result;\n+\n+         --  For zero case, make sure sign of zero is preserved\n+\n+         else\n+            return X;\n+         end if;\n+      end if;\n+\n+   end Truncation;\n+\n+   -----------------------\n+   -- Unbiased_Rounding --\n+   -----------------------\n+\n+   function Unbiased_Rounding (X : T) return T is\n+      Abs_X  : constant T := abs X;\n+      Result : T;\n+      Tail   : T;\n+\n+   begin\n+      Result := Truncation (Abs_X);\n+      Tail   := Abs_X - Result;\n+\n+      if Tail > 0.5  then\n+         Result := Result + 1.0;\n+\n+      elsif Tail = 0.5 then\n+         Result := 2.0 * Truncation ((Result / 2.0) + 0.5);\n+      end if;\n+\n+      if X > 0.0 then\n+         return Result;\n+\n+      elsif X < 0.0 then\n+         return -Result;\n+\n+      --  For zero case, make sure sign of zero is preserved\n+\n+      else\n+         return X;\n+      end if;\n+\n+   end Unbiased_Rounding;\n+\n+   -----------\n+   -- Valid --\n+   -----------\n+\n+   function Valid (X : access T) return Boolean is\n+\n+      IEEE_Emin : constant Integer := T'Machine_Emin - 1;\n+      IEEE_Emax : constant Integer := T'Machine_Emax - 1;\n+\n+      IEEE_Bias : constant Integer := -(IEEE_Emin - 1);\n+\n+      subtype IEEE_Exponent_Range is\n+        Integer range IEEE_Emin - 1 .. IEEE_Emax + 1;\n+\n+      --  The implementation of this floating point attribute uses\n+      --  a representation type Float_Rep that allows direct access to\n+      --  the exponent and mantissa parts of a floating point number.\n+\n+      --  The Float_Rep type is an array of Float_Word elements. This\n+      --  representation is chosen to make it possible to size the\n+      --  type based on a generic parameter.\n+\n+      --  The following conditions must be met for all possible\n+      --  instantiations of the attributes package:\n+\n+      --    - T'Size is an integral multiple of Float_Word'Size\n+\n+      --    - The exponent and sign are completely contained in a single\n+      --      component of Float_Rep, named Most_Significant_Word (MSW).\n+\n+      --    - The sign occupies the most significant bit of the MSW\n+      --      and the exponent is in the following bits.\n+      --      Unused bits (if any) are in the least significant part.\n+\n+      type Float_Word is mod 2**32;\n+      type Rep_Index is range 0 .. 7;\n+\n+      Rep_Last : constant Rep_Index := (T'Size - 1) / Float_Word'Size;\n+\n+      type Float_Rep is array (Rep_Index range 0 .. Rep_Last) of Float_Word;\n+\n+      Most_Significant_Word : constant Rep_Index :=\n+                                Rep_Last * Standard'Default_Bit_Order;\n+      --  Finding the location of the Exponent_Word is a bit tricky.\n+      --  In general we assume Word_Order = Bit_Order.\n+      --  This expression needs to be refined for VMS.\n+\n+      Exponent_Factor : constant Float_Word :=\n+                          2**(Float_Word'Size - 1) /\n+                            Float_Word (IEEE_Emax - IEEE_Emin + 3) *\n+                              Boolean'Pos (T'Size /= 96) +\n+                                Boolean'Pos (T'Size = 96);\n+      --  Factor that the extracted exponent needs to be divided by\n+      --  to be in range 0 .. IEEE_Emax - IEEE_Emin + 2.\n+      --  Special kludge: Exponent_Factor is 0 for x86 double extended\n+      --  as GCC adds 16 unused bits to the type.\n+\n+      Exponent_Mask : constant Float_Word :=\n+                        Float_Word (IEEE_Emax - IEEE_Emin + 2) *\n+                          Exponent_Factor;\n+      --  Value needed to mask out the exponent field.\n+      --  This assumes that the range IEEE_Emin - 1 .. IEEE_Emax + 1\n+      --  contains 2**N values, for some N in Natural.\n+\n+      function To_Float is new Unchecked_Conversion (Float_Rep, T);\n+\n+      type Float_Access is access all T;\n+      function To_Address is\n+         new Unchecked_Conversion (Float_Access, System.Address);\n+\n+      XA : constant System.Address := To_Address (Float_Access (X));\n+\n+      R : Float_Rep;\n+      pragma Import (Ada, R);\n+      for R'Address use XA;\n+      --  R is a view of the input floating-point parameter. Note that we\n+      --  must avoid copying the actual bits of this parameter in float\n+      --  form (since it may be a signalling NaN.\n+\n+      E  : constant IEEE_Exponent_Range :=\n+             Integer ((R (Most_Significant_Word) and Exponent_Mask) /\n+                                                        Exponent_Factor)\n+               - IEEE_Bias;\n+      --  Mask/Shift T to only get bits from the exponent\n+      --  Then convert biased value to integer value.\n+\n+      SR : Float_Rep;\n+      --  Float_Rep representation of significant of X.all\n+\n+   begin\n+      if T'Denorm then\n+\n+         --  All denormalized numbers are valid, so only invalid numbers\n+         --  are overflows and NaN's, both with exponent = Emax + 1.\n+\n+         return E /= IEEE_Emax + 1;\n+\n+      end if;\n+\n+      --  All denormalized numbers except 0.0 are invalid\n+\n+      --  Set exponent of X to zero, so we end up with the significand, which\n+      --  definitely is a valid number and can be converted back to a float.\n+\n+      SR := R;\n+      SR (Most_Significant_Word) :=\n+           (SR (Most_Significant_Word)\n+             and not Exponent_Mask) + Float_Word (IEEE_Bias) * Exponent_Factor;\n+\n+      return (E in IEEE_Emin .. IEEE_Emax) or else\n+         ((E = IEEE_Emin - 1) and then abs To_Float (SR) = 1.0);\n+   end Valid;\n+\n+end System.Fat_Gen;"}, {"sha": "0ad0d6822162f3ab2b7568cd119ae924d1ba39ed", "filename": "gcc/ada/s-fatgen.ads", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatgen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatgen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,101 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                       S Y S T E M . F A T _ G E N                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This generic package provides a target independent implementation of the\n+--  floating-point attributes that denote functions. The implementations here\n+--  are portable, but very slow. The runtime contains a set of instantiations\n+--  of this package for all predefined floating-point types, and these should\n+--  be replaced by efficient assembly language code where possible.\n+\n+generic\n+    type T is digits <>;\n+\n+package System.Fat_Gen is\n+pragma Pure (Fat_Gen);\n+\n+   subtype UI is Integer;\n+   --  The runtime representation of universal integer for the purposes of\n+   --  this package is integer. The expander generates conversions for the\n+   --  actual type used. For functions returning universal integer, there\n+   --  is no problem, since the result always is in range of integer. For\n+   --  input arguments, the expander has to do some special casing to deal\n+   --  with the (very annoying!) cases of out of range values. If we used\n+   --  Long_Long_Integer to represent universal, then there would be no\n+   --  problem, but the resulting inefficiency would be annoying.\n+\n+   function Adjacent          (X, Towards : T)              return T;\n+\n+   function Ceiling           (X : T)                       return T;\n+\n+   function Compose           (Fraction : T; Exponent : UI) return T;\n+\n+   function Copy_Sign         (Value, Sign : T)             return T;\n+\n+   function Exponent          (X : T)                       return UI;\n+\n+   function Floor             (X : T)                       return T;\n+\n+   function Fraction          (X : T)                       return T;\n+\n+   function Leading_Part      (X : T; Radix_Digits : UI)    return T;\n+\n+   function Machine           (X : T)                       return T;\n+\n+   function Model             (X : T)                       return T;\n+\n+   function Pred              (X : T)                       return T;\n+\n+   function Remainder         (X, Y : T)                    return T;\n+\n+   function Rounding          (X : T)                       return T;\n+\n+   function Scaling           (X : T; Adjustment : UI)      return T;\n+\n+   function Succ              (X : T)                       return T;\n+\n+   function Truncation        (X : T)                       return T;\n+\n+   function Unbiased_Rounding (X : T)                       return T;\n+\n+   function Valid             (X : access T)                return Boolean;\n+   --  The argument must be passed by reference here, as T may be\n+   --  an abnormal value that can be passed in a floating point register.\n+\n+private\n+   pragma Inline (Machine);\n+   pragma Inline (Model);\n+   pragma Inline_Always (Valid);\n+\n+end System.Fat_Gen;"}, {"sha": "a16a26fbe91e86c41080e078dce8e9ed1c3c6309", "filename": "gcc/ada/s-fatlfl.ads", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatlfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatlfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatlfl.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                      S Y S T E M . F A T _ L F L T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.3 $                              --\n+--                                                                          --\n+--   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains an instantiation of the floating-point attribute\n+--  runtime routines for the type Long_Float.\n+\n+with System.Fat_Gen;\n+\n+package System.Fat_LFlt is\n+pragma Pure (Fat_LFlt);\n+\n+   --  Note the only entity from this package that is acccessed by Rtsfind\n+   --  is the name of the package instantiation. Entities within this package\n+   --  (i.e. the individual floating-point attribute routines) are accessed\n+   --  by name using selected notation.\n+\n+   package Fat_Long_Float is new System.Fat_Gen (Long_Float);\n+\n+end System.Fat_LFlt;"}, {"sha": "3d4953dff46e48f7bf0b7e0b501b598156fcfcf9", "filename": "gcc/ada/s-fatllf.ads", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatllf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatllf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatllf.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                       S Y S T E M . F A T _ L L F                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.3 $                              --\n+--                                                                          --\n+--   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains an instantiation of the floating-point attribute\n+--  runtime routines for the type Long_Long_Float.\n+\n+with System.Fat_Gen;\n+\n+package System.Fat_LLF is\n+pragma Pure (Fat_LLF);\n+\n+   --  Note the only entity from this package that is acccessed by Rtsfind\n+   --  is the name of the package instantiation. Entities within this package\n+   --  (i.e. the individual floating-point attribute routines) are accessed\n+   --  by name using selected notation.\n+\n+   package Fat_Long_Long_Float is new System.Fat_Gen (Long_Long_Float);\n+\n+end System.Fat_LLF;"}, {"sha": "bc17fbd664747966738df317f78aef468503d868", "filename": "gcc/ada/s-fatsfl.ads", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatsfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fatsfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatsfl.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                      S Y S T E M . F A T _ S F L T                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.3 $                              --\n+--                                                                          --\n+--   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains an instantiation of the floating-point attribute\n+--  runtime routines for the type Short_Float.\n+\n+with System.Fat_Gen;\n+\n+package System.Fat_SFlt is\n+pragma Pure (Fat_SFlt);\n+\n+   --  Note the only entity from this package that is acccessed by Rtsfind\n+   --  is the name of the package instantiation. Entities within this package\n+   --  (i.e. the individual floating-point attribute routines) are accessed\n+   --  by name using selected notation.\n+\n+   package Fat_Short_Float is new System.Fat_Gen (Short_Float);\n+\n+end System.Fat_SFlt;"}, {"sha": "61451f4c5381ea0b8118a88b683d68b40d5694cc", "filename": "gcc/ada/s-ficobl.ads", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-ficobl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-ficobl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ficobl.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,160 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--              S Y S T E M . F I L E _ C O N T R O L _ B L O C K           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $\n+--                                                                          --\n+--            Copyright (C) 1992-2000 Free Software Foundation, Inc.        --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the declaration of the basic file control block\n+--  shared between Text_IO, Sequential_IO, Direct_IO and Streams.Stream_IO.\n+--  The actual control blocks are derived from this block by extension. The\n+--  control block is itself derived from Ada.Streams.Root_Stream_Type which\n+--  facilitates implementation of Stream_IO.Stream and Text_Streams.Stream.\n+\n+with Ada.Streams;\n+with Interfaces.C_Streams;\n+\n+package System.File_Control_Block is\n+\n+   -----------------------------\n+   --  Ada File Control Block --\n+   -----------------------------\n+\n+   --  The Ada file control block is an abstract extension of the root\n+   --  stream type. This allows a file to be treated directly as a stream\n+   --  for the purposes of Stream_IO, or stream operations on a text file.\n+   --  The individual I/O packages extend this type with package specific\n+   --  fields to create the concrete types to which the routines in this\n+   --  package can be applied.\n+\n+   --  The type File_Type in the individual packages is an access to the\n+   --  extended file control block. The value is null if the file is not\n+   --  open, and a pointer to the control block if the file is open.\n+\n+   type Pstring is access all String;\n+   --  Used to hold name and form strings\n+\n+   type File_Mode is (In_File, Inout_File, Out_File, Append_File);\n+   --  File mode (union of file modes permitted by individual packages,\n+   --  the types File_Mode in the individual packages are declared to\n+   --  allow easy conversion to and from this general type.\n+\n+   type Shared_Status_Type is (Yes, No, None);\n+   --  This type is used to define the sharing status of a file. The default\n+   --  setting of None is used if no \"shared=xxx\" appears in the form string\n+   --  when a file is created or opened. For a file with Shared_Status set to\n+   --  None, Use_Error will be raised if any other file is opened or created\n+   --  with the same full name. Yes/No are set in response to the presence\n+   --  of \"shared=yes\" or \"shared=no\" in the form string. In either case it\n+   --  is permissible to have multiple files opened with the same full name.\n+   --  All files opened simultaneously with \"shared=yes\" will share the same\n+   --  stream with the semantics specified in the RM for file sharing. All\n+   --  files opened with \"shared=no\" will have their own stream.\n+\n+   type AFCB;\n+   type AFCB_Ptr is access all AFCB'Class;\n+\n+   type AFCB is abstract new Ada.Streams.Root_Stream_Type with record\n+\n+      Stream : Interfaces.C_Streams.FILEs;\n+      --  The file descriptor\n+\n+      Name : Pstring;\n+      --  A pointer to the file name. The file name is null for temporary\n+      --  files, and also for standard files (stdin, stdout, stderr). The\n+      --  name is always null-terminated if it is non-null.\n+\n+      Form : Pstring;\n+      --  A pointer to the form string. This is the string used in the\n+      --  fopen call, and must be supplied by the caller (there are no\n+      --  defaults at this level). The string is always null-terminated.\n+\n+      Mode : File_Mode;\n+      --  The file mode. No checks are made that the mode is consistent\n+      --  with the form used to fopen the file.\n+\n+      Is_Regular_File : Boolean;\n+      --  A flag indicating if the file is a regular file\n+\n+      Is_Temporary_File : Boolean;\n+      --  A flag set only for temporary files (i.e. files created using the\n+      --  Create function with a null name parameter, using tmpfile). This\n+      --  is currently not used since temporary files are deleted by the\n+      --  operating system, but it is set properly in case some systems\n+      --  need this information in the future.\n+\n+      Is_System_File : Boolean;\n+      --  A flag set only for system files (stdin, stdout, stderr)\n+\n+      Is_Text_File : Boolean;\n+      --  A flag set if the file was opened in text mode\n+\n+      Shared_Status : Shared_Status_Type;\n+      --  Indicates sharing status of file, see description of type above\n+\n+      Access_Method : Character;\n+      --  Set to 'Q', 'S', 'T, 'D' for Sequential_IO, Stream_IO, Text_IO\n+      --  Direct_IO file (used to validate file sharing request).\n+\n+      Next : AFCB_Ptr;\n+      Prev : AFCB_Ptr;\n+      --  All open files are kept on a doubly linked chain, with these\n+      --  pointers used to maintain the next and previous pointers.\n+\n+   end record;\n+\n+   ----------------------------------\n+   -- Primitive Operations of AFCB --\n+   ----------------------------------\n+\n+   --  Note that we inherit the abstract operations Read and Write from\n+   --  the base type. These must be overridden by the individual file\n+   --  access methods to provide Stream Read/Write access.\n+\n+   function AFCB_Allocate (Control_Block : AFCB) return AFCB_Ptr is abstract;\n+   --  Given a control block, allocate space for a control block of the same\n+   --  type on the heap, and return the pointer to this allocated block. Note\n+   --  that the argument Control_Block is not used other than as the argument\n+   --  that controls which version of AFCB_Allocate is called.\n+\n+   procedure AFCB_Close (File : access AFCB) is abstract;\n+   --  Performs any specialized close actions on a file before the file is\n+   --  actually closed at the system level. This is called by Close, and\n+   --  the reason we need the primitive operation is for the automatic\n+   --  close operations done as part of finalization.\n+\n+   procedure AFCB_Free (File : access AFCB) is abstract;\n+   --  Frees the AFCB referenced by the given parameter. It is not necessary\n+   --  to free the strings referenced by the Form and Name fields, but if the\n+   --  extension has any other heap objects, they must be freed as well. This\n+   --  procedure must be overridden by each individual file package.\n+\n+end System.File_Control_Block;"}, {"sha": "21548568a332eb8d5f764263ac63a741e460382b", "filename": "gcc/ada/s-fileio.adb", "status": "added", "additions": 1041, "deletions": 0, "changes": 1041, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,1041 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                       S Y S T E M . F I L E _ I O                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.59 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Finalization;            use Ada.Finalization;\n+with Ada.IO_Exceptions;           use Ada.IO_Exceptions;\n+with Interfaces.C_Streams;        use Interfaces.C_Streams;\n+with System.Soft_Links;\n+with Unchecked_Deallocation;\n+\n+package body System.File_IO is\n+\n+   use System.File_Control_Block;\n+\n+   package SSL renames System.Soft_Links;\n+\n+   ----------------------\n+   -- Global Variables --\n+   ----------------------\n+\n+   Open_Files : AFCB_Ptr;\n+   --  This points to a list of AFCB's for all open files. This is a doubly\n+   --  linked list, with the Prev pointer of the first entry, and the Next\n+   --  pointer of the last entry containing null. Note that this global\n+   --  variable must be properly protected to provide thread safety.\n+\n+   type Temp_File_Record;\n+   type Temp_File_Record_Ptr is access all Temp_File_Record;\n+\n+   type Temp_File_Record is record\n+      Name : String (1 .. L_tmpnam + 1);\n+      Next : Temp_File_Record_Ptr;\n+   end record;\n+   --  One of these is allocated for each temporary file created\n+\n+   Temp_Files : Temp_File_Record_Ptr;\n+   --  Points to list of names of temporary files. Note that this global\n+   --  variable must be properly protected to provide thread safety.\n+\n+   type File_IO_Clean_Up_Type is new Controlled with null record;\n+   --  The closing of all open files and deletion of temporary files is an\n+   --  action which takes place at the end of execution of the main program.\n+   --  This action can be implemented using a library level object which\n+   --  gets finalized at the end of the main program execution. The above is\n+   --  a controlled type introduced for this purpose.\n+\n+   procedure Finalize (V : in out File_IO_Clean_Up_Type);\n+   --  This is the finalize operation that is used to do the cleanup.\n+\n+   File_IO_Clean_Up_Object : File_IO_Clean_Up_Type;\n+   --  This is the single object of the type that triggers the finalization\n+   --  call. Since it is at the library level, this happens just before the\n+   --  environment task is finalized.\n+\n+   text_translation_required : Boolean;\n+   pragma Import\n+     (C, text_translation_required, \"__gnat_text_translation_required\");\n+   --  If true, add appropriate suffix to control string for Open.\n+\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   procedure Free_String is new Unchecked_Deallocation (String, Pstring);\n+\n+   subtype Fopen_String is String (1 .. 4);\n+   --  Holds open string (longest is \"w+b\" & nul)\n+\n+   procedure Fopen_Mode\n+     (Mode    : File_Mode;\n+      Text    : Boolean;\n+      Creat   : Boolean;\n+      Amethod : Character;\n+      Fopstr  : out Fopen_String);\n+   --  Determines proper open mode for a file to be opened in the given\n+   --  Ada mode. Text is true for a text file and false otherwise, and\n+   --  Creat is true for a create call, and False for an open call. The\n+   --  value stored in Fopstr is a nul-terminated string suitable for a\n+   --  call to fopen or freopen. Amethod is the character designating\n+   --  the access method from the Access_Method field of the FCB.\n+\n+   ----------------\n+   -- Append_Set --\n+   ----------------\n+\n+   procedure Append_Set (File : AFCB_Ptr) is\n+   begin\n+      if File.Mode = Append_File then\n+         if fseek (File.Stream, 0, SEEK_END) /= 0 then\n+            raise Device_Error;\n+         end if;\n+      end if;\n+   end Append_Set;\n+\n+   ----------------\n+   -- Chain_File --\n+   ----------------\n+\n+   procedure Chain_File (File : AFCB_Ptr) is\n+   begin\n+      --  Take a task lock, to protect the global data value Open_Files\n+      --  No exception handler needed, since we cannot get an exception.\n+\n+      SSL.Lock_Task.all;\n+      File.Next := Open_Files;\n+      File.Prev := null;\n+      Open_Files := File;\n+\n+      if File.Next /= null then\n+         File.Next.Prev := File;\n+      end if;\n+\n+      SSL.Unlock_Task.all;\n+   end Chain_File;\n+\n+   ---------------------\n+   -- Check_File_Open --\n+   ---------------------\n+\n+   procedure Check_File_Open (File : AFCB_Ptr) is\n+   begin\n+      if File = null then\n+         raise Status_Error;\n+      end if;\n+   end Check_File_Open;\n+\n+   -----------------------\n+   -- Check_Read_Status --\n+   -----------------------\n+\n+   procedure Check_Read_Status (File : AFCB_Ptr) is\n+   begin\n+      if File = null then\n+         raise Status_Error;\n+      elsif File.Mode > Inout_File then\n+         raise Mode_Error;\n+      end if;\n+   end Check_Read_Status;\n+\n+   ------------------------\n+   -- Check_Write_Status --\n+   ------------------------\n+\n+   procedure Check_Write_Status (File : AFCB_Ptr) is\n+   begin\n+      if File = null then\n+         raise Status_Error;\n+      elsif File.Mode = In_File then\n+         raise Mode_Error;\n+      end if;\n+   end Check_Write_Status;\n+\n+   -----------\n+   -- Close --\n+   -----------\n+\n+   procedure Close (File : in out AFCB_Ptr) is\n+      Close_Status : int := 0;\n+      Dup_Strm     : Boolean := False;\n+\n+   begin\n+      Check_File_Open (File);\n+      AFCB_Close (File);\n+\n+      --  Sever the association between the given file and its associated\n+      --  external file. The given file is left closed. Do not perform system\n+      --  closes on the standard input, output and error files and also do\n+      --  not attempt to close a stream that does not exist (signalled by a\n+      --  null stream value -- happens in some error situations).\n+\n+      if not File.Is_System_File\n+        and then File.Stream /= NULL_Stream\n+      then\n+         --  Do not do an fclose if this is a shared file and there is\n+         --  at least one other instance of the stream that is open.\n+\n+         if File.Shared_Status = Yes then\n+            declare\n+               P   : AFCB_Ptr;\n+\n+            begin\n+               P := Open_Files;\n+               while P /= null loop\n+                  if P /= File\n+                    and then File.Stream = P.Stream\n+                  then\n+                     Dup_Strm := True;\n+                     exit;\n+                  end if;\n+\n+                  P := P.Next;\n+               end loop;\n+            end;\n+         end if;\n+\n+         --  Do the fclose unless this was a duplicate in the shared case\n+\n+         if not Dup_Strm then\n+            Close_Status := fclose (File.Stream);\n+         end if;\n+      end if;\n+\n+      --  Dechain file from list of open files and then free the storage\n+      --  Since this is a global data structure, we have to protect against\n+      --  multiple tasks attempting to access this list.\n+\n+      --  Note that we do not use an exception handler to unlock here since\n+      --  no exception can occur inside the lock/unlock pair.\n+\n+      begin\n+         SSL.Lock_Task.all;\n+\n+         if File.Prev = null then\n+            Open_Files := File.Next;\n+         else\n+            File.Prev.Next := File.Next;\n+         end if;\n+\n+         if File.Next /= null then\n+            File.Next.Prev := File.Prev;\n+         end if;\n+\n+         SSL.Unlock_Task.all;\n+      end;\n+\n+      --  Deallocate some parts of the file structure that were kept in heap\n+      --  storage with the exception of system files (standard input, output\n+      --  and error) since they had some information allocated in the stack.\n+\n+      if not File.Is_System_File then\n+         Free_String (File.Name);\n+         Free_String (File.Form);\n+         AFCB_Free (File);\n+      end if;\n+\n+      File := null;\n+\n+      if Close_Status /= 0 then\n+         raise Device_Error;\n+      end if;\n+   end Close;\n+\n+   ------------\n+   -- Delete --\n+   ------------\n+\n+   procedure Delete (File : in out AFCB_Ptr) is\n+   begin\n+      Check_File_Open (File);\n+\n+      if not File.Is_Regular_File then\n+         raise Use_Error;\n+      end if;\n+\n+      declare\n+         Filename : aliased constant String := File.Name.all;\n+\n+      begin\n+         Close (File);\n+\n+         --  Now unlink the external file. Note that we use the full name\n+         --  in this unlink, because the working directory may have changed\n+         --  since we did the open, and we want to unlink the right file!\n+\n+         if unlink (Filename'Address) = -1 then\n+            raise Use_Error;\n+         end if;\n+      end;\n+   end Delete;\n+\n+   -----------------\n+   -- End_Of_File --\n+   -----------------\n+\n+   function End_Of_File (File : AFCB_Ptr) return Boolean is\n+   begin\n+      Check_File_Open (File);\n+\n+      if feof (File.Stream) /= 0 then\n+         return True;\n+\n+      else\n+         Check_Read_Status (File);\n+\n+         if ungetc (fgetc (File.Stream), File.Stream) = EOF then\n+            clearerr (File.Stream);\n+            return True;\n+         else\n+            return False;\n+         end if;\n+      end if;\n+   end End_Of_File;\n+\n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   --  Note: we do not need to worry about locking against multiple task\n+   --  access in this routine, since it is called only from the environment\n+   --  task just before terminating execution.\n+\n+   procedure Finalize (V : in out File_IO_Clean_Up_Type) is\n+      Discard : int;\n+      Fptr1   : AFCB_Ptr;\n+      Fptr2   : AFCB_Ptr;\n+\n+   begin\n+      --  First close all open files (the slightly complex form of this loop\n+      --  is required because Close as a side effect nulls out its argument)\n+\n+      Fptr1 := Open_Files;\n+      while Fptr1 /= null loop\n+         Fptr2 := Fptr1.Next;\n+         Close (Fptr1);\n+         Fptr1 := Fptr2;\n+      end loop;\n+\n+      --  Now unlink all temporary files. We do not bother to free the\n+      --  blocks because we are just about to terminate the program. We\n+      --  also ignore any errors while attempting these unlink operations.\n+\n+      while Temp_Files /= null loop\n+         Discard := unlink (Temp_Files.Name'Address);\n+         Temp_Files := Temp_Files.Next;\n+      end loop;\n+\n+   end Finalize;\n+\n+   -----------\n+   -- Flush --\n+   -----------\n+\n+   procedure Flush (File : AFCB_Ptr) is\n+   begin\n+      Check_Write_Status (File);\n+\n+      if fflush (File.Stream) = 0 then\n+         return;\n+      else\n+         raise Device_Error;\n+      end if;\n+   end Flush;\n+\n+   ----------------\n+   -- Fopen_Mode --\n+   ----------------\n+\n+   --  The fopen mode to be used is shown by the following table:\n+\n+   --                                     OPEN         CREATE\n+   --     Append_File                     \"r+\"           \"w+\"\n+   --     In_File                         \"r\"            \"w+\"\n+   --     Out_File (Direct_IO)            \"r+\"           \"w\"\n+   --     Out_File (all others)           \"w\"            \"w\"\n+   --     Inout_File                      \"r+\"           \"w+\"\n+\n+   --  Note: we do not use \"a\" or \"a+\" for Append_File, since this would not\n+   --  work in the case of stream files, where even if in append file mode,\n+   --  you can reset to earlier points in the file. The caller must use the\n+   --  Append_Set routine to deal with the necessary positioning.\n+\n+   --  Note: in several cases, the fopen mode used allows reading and\n+   --  writing, but the setting of the Ada mode is more restrictive. For\n+   --  instance, Create in In_File mode uses \"w+\" which allows writing,\n+   --  but the Ada mode In_File will cause any write operations to be\n+   --  rejected with Mode_Error in any case.\n+\n+   --  Note: for the Out_File/Open cases for other than the Direct_IO case,\n+   --  an initial call will be made by the caller to first open the file in\n+   --  \"r\" mode to be sure that it exists. The real open, in \"w\" mode, will\n+   --  then destroy this file. This is peculiar, but that's what Ada semantics\n+   --  require and the ACVT tests insist on!\n+\n+   --  If text file translation is required, then either b or t is\n+   --  added to the mode, depending on the setting of Text.\n+\n+   procedure Fopen_Mode\n+     (Mode    : File_Mode;\n+      Text    : Boolean;\n+      Creat   : Boolean;\n+      Amethod : Character;\n+      Fopstr  : out Fopen_String)\n+   is\n+      Fptr  : Positive;\n+\n+   begin\n+      case Mode is\n+         when In_File =>\n+            if Creat then\n+               Fopstr (1) := 'w';\n+               Fopstr (2) := '+';\n+               Fptr := 3;\n+            else\n+               Fopstr (1) := 'r';\n+               Fptr := 2;\n+            end if;\n+\n+         when Out_File =>\n+            if Amethod = 'D' and not Creat then\n+               Fopstr (1) := 'r';\n+               Fopstr (2) := '+';\n+               Fptr := 3;\n+            else\n+               Fopstr (1) := 'w';\n+               Fptr := 2;\n+            end if;\n+\n+         when Inout_File | Append_File =>\n+            if Creat then\n+               Fopstr (1) := 'w';\n+            else\n+               Fopstr (1) := 'r';\n+            end if;\n+\n+            Fopstr (2) := '+';\n+            Fptr := 3;\n+\n+      end case;\n+\n+      --  If text_translation_required is true then we need to append\n+      --  either a t or b to the string to get the right mode\n+\n+      if text_translation_required then\n+         if Text then\n+            Fopstr (Fptr) := 't';\n+         else\n+            Fopstr (Fptr) := 'b';\n+         end if;\n+\n+         Fptr := Fptr + 1;\n+      end if;\n+\n+      Fopstr (Fptr) := ASCII.NUL;\n+   end Fopen_Mode;\n+\n+   ----------\n+   -- Form --\n+   ----------\n+\n+   function Form (File : in AFCB_Ptr) return String is\n+   begin\n+      if File = null then\n+         raise Status_Error;\n+      else\n+         return File.Form.all (1 .. File.Form'Length - 1);\n+      end if;\n+   end Form;\n+\n+   ------------------\n+   -- Form_Boolean --\n+   ------------------\n+\n+   function Form_Boolean\n+     (Form    : String;\n+      Keyword : String;\n+      Default : Boolean)\n+      return    Boolean\n+   is\n+      V1, V2 : Natural;\n+\n+   begin\n+      Form_Parameter (Form, Keyword, V1, V2);\n+\n+      if V1 = 0 then\n+         return Default;\n+\n+      elsif Form (V1) = 'y' then\n+         return True;\n+\n+      elsif Form (V1) = 'n' then\n+         return False;\n+\n+      else\n+         raise Use_Error;\n+      end if;\n+   end Form_Boolean;\n+\n+   ------------------\n+   -- Form_Integer --\n+   ------------------\n+\n+   function Form_Integer\n+     (Form    : String;\n+      Keyword : String;\n+      Default : Integer)\n+      return    Integer\n+   is\n+      V1, V2 : Natural;\n+      V      : Integer;\n+\n+   begin\n+      Form_Parameter (Form, Keyword, V1, V2);\n+\n+      if V1 = 0 then\n+         return Default;\n+\n+      else\n+         V := 0;\n+\n+         for J in V1 .. V2 loop\n+            if Form (J) not in '0' .. '9' then\n+               raise Use_Error;\n+            else\n+               V := V * 10 + Character'Pos (Form (J)) - Character'Pos ('0');\n+            end if;\n+\n+            if V > 999_999 then\n+               raise Use_Error;\n+            end if;\n+         end loop;\n+\n+         return V;\n+      end if;\n+   end Form_Integer;\n+\n+   --------------------\n+   -- Form_Parameter --\n+   --------------------\n+\n+   procedure Form_Parameter\n+     (Form    : String;\n+      Keyword : String;\n+      Start   : out Natural;\n+      Stop    : out Natural)\n+  is\n+      Klen : constant Integer := Keyword'Length;\n+\n+   --  Start of processing for Form_Parameter\n+\n+   begin\n+      for J in Form'First + Klen .. Form'Last - 1 loop\n+         if Form (J) = '='\n+           and then Form (J - Klen .. J - 1) = Keyword\n+         then\n+            Start := J + 1;\n+            Stop := Start - 1;\n+\n+            while Form (Stop + 1) /= ASCII.NUL\n+              and then Form (Stop + 1) /= ','\n+            loop\n+               Stop := Stop + 1;\n+            end loop;\n+\n+            return;\n+         end if;\n+      end loop;\n+\n+      Start := 0;\n+      Stop  := 0;\n+   end Form_Parameter;\n+\n+   -------------\n+   -- Is_Open --\n+   -------------\n+\n+   function Is_Open (File : in AFCB_Ptr) return Boolean is\n+   begin\n+      return (File /= null);\n+   end Is_Open;\n+\n+   -------------------\n+   -- Make_Buffered --\n+   -------------------\n+\n+   procedure Make_Buffered\n+     (File     : AFCB_Ptr;\n+      Buf_Siz  : Interfaces.C_Streams.size_t) is\n+      status   : Integer;\n+\n+   begin\n+      status := setvbuf (File.Stream, Null_Address, IOFBF, Buf_Siz);\n+   end Make_Buffered;\n+\n+   ------------------------\n+   -- Make_Line_Buffered --\n+   ------------------------\n+\n+   procedure Make_Line_Buffered\n+     (File     : AFCB_Ptr;\n+      Line_Siz : Interfaces.C_Streams.size_t) is\n+      status   : Integer;\n+\n+   begin\n+      status := setvbuf (File.Stream, Null_Address, IOLBF, Line_Siz);\n+   end Make_Line_Buffered;\n+\n+   ---------------------\n+   -- Make_Unbuffered --\n+   ---------------------\n+\n+   procedure Make_Unbuffered (File : AFCB_Ptr) is\n+      status : Integer;\n+\n+   begin\n+      status := setvbuf (File.Stream, Null_Address, IONBF, 0);\n+   end Make_Unbuffered;\n+\n+   ----------\n+   -- Mode --\n+   ----------\n+\n+   function Mode (File : in AFCB_Ptr) return File_Mode is\n+   begin\n+      if File = null then\n+         raise Status_Error;\n+      else\n+         return File.Mode;\n+      end if;\n+   end Mode;\n+\n+   ----------\n+   -- Name --\n+   ----------\n+\n+   function Name (File : in AFCB_Ptr) return String is\n+   begin\n+      if File = null then\n+         raise Status_Error;\n+      else\n+         return File.Name.all (1 .. File.Name'Length - 1);\n+      end if;\n+   end Name;\n+\n+   ----------\n+   -- Open --\n+   ----------\n+\n+   procedure Open\n+     (File_Ptr  : in out AFCB_Ptr;\n+      Dummy_FCB : in out AFCB'Class;\n+      Mode      : File_Mode;\n+      Name      : String;\n+      Form      : String;\n+      Amethod   : Character;\n+      Creat     : Boolean;\n+      Text      : Boolean;\n+      C_Stream  : FILEs := NULL_Stream)\n+   is\n+      procedure Tmp_Name (Buffer : Address);\n+      pragma Import (C, Tmp_Name, \"__gnat_tmp_name\");\n+      --  set buffer (a String address) with a temporary filename.\n+\n+      Stream : FILEs := C_Stream;\n+      --  Stream which we open in response to this request\n+\n+      Shared : Shared_Status_Type;\n+      --  Setting of Shared_Status field for file\n+\n+      Fopstr : aliased Fopen_String;\n+      --  Mode string used in fopen call\n+\n+      Formstr : aliased String (1 .. Form'Length + 1);\n+      --  Form string with ASCII.NUL appended, folded to lower case\n+\n+      Tempfile : constant Boolean := (Name'Length = 0);\n+      --  Indicates temporary file case\n+\n+      Namelen : constant Integer := max_path_len;\n+      --  Length required for file name, not including final ASCII.NUL\n+      --  Note that we used to reference L_tmpnam here, which is not\n+      --  reliable since __gnat_tmp_name does not always use tmpnam.\n+\n+      Namestr : aliased String (1 .. Namelen + 1);\n+      --  Name as given or temporary file name with ASCII.NUL appended\n+\n+      Fullname : aliased String (1 .. max_path_len + 1);\n+      --  Full name (as required for Name function, and as stored in the\n+      --  control block in the Name field) with ASCII.NUL appended.\n+\n+      Full_Name_Len : Integer;\n+      --  Length of name actually stored in Fullname\n+\n+   begin\n+      if File_Ptr /= null then\n+         raise Status_Error;\n+      end if;\n+\n+      --  Acquire form string, setting required NUL terminator\n+\n+      Formstr (1 .. Form'Length) := Form;\n+      Formstr (Formstr'Last) := ASCII.NUL;\n+\n+      --  Convert form string to lower case\n+\n+      for J in Formstr'Range loop\n+         if Formstr (J) in 'A' .. 'Z' then\n+            Formstr (J) := Character'Val (Character'Pos (Formstr (J)) + 32);\n+         end if;\n+      end loop;\n+\n+      --  Acquire setting of shared parameter\n+\n+      declare\n+         V1, V2 : Natural;\n+\n+      begin\n+         Form_Parameter (Formstr, \"shared\", V1, V2);\n+\n+         if V1 = 0 then\n+            Shared := None;\n+\n+         elsif Formstr (V1 .. V2) = \"yes\" then\n+            Shared := Yes;\n+\n+         elsif Formstr (V1 .. V2) = \"no\" then\n+            Shared := No;\n+\n+         else\n+            raise Use_Error;\n+         end if;\n+      end;\n+\n+      --  If we were given a stream (call from xxx.C_Streams.Open), then set\n+      --  full name to null and that is all we have to do in this case so\n+      --  skip to end of processing.\n+\n+      if Stream /= NULL_Stream then\n+         Fullname (1) := ASCII.Nul;\n+         Full_Name_Len := 1;\n+\n+      --  Normal case of Open or Create\n+\n+      else\n+         --  If temporary file case, get temporary file name and add\n+         --  to the list of temporary files to be deleted on exit.\n+\n+         if Tempfile then\n+            if not Creat then\n+               raise Name_Error;\n+            end if;\n+\n+            Tmp_Name (Namestr'Address);\n+\n+            if Namestr (1) = ASCII.NUL then\n+               raise Use_Error;\n+            end if;\n+\n+            --  Chain to temp file list, ensuring thread safety with a lock\n+\n+            begin\n+               SSL.Lock_Task.all;\n+               Temp_Files :=\n+                 new Temp_File_Record'(Name => Namestr, Next => Temp_Files);\n+               SSL.Unlock_Task.all;\n+\n+            exception\n+               when others =>\n+                  SSL.Unlock_Task.all;\n+                  raise;\n+            end;\n+\n+         --  Normal case of non-null name given\n+\n+         else\n+            Namestr (1 .. Name'Length) := Name;\n+            Namestr (Name'Length + 1)  := ASCII.NUL;\n+         end if;\n+\n+         --  Get full name in accordance with the advice of RM A.8.2(22).\n+\n+         full_name (Namestr'Address, Fullname'Address);\n+\n+         if Fullname (1) = ASCII.NUL then\n+            raise Use_Error;\n+         end if;\n+\n+         for J in Fullname'Range loop\n+            if Fullname (J) = ASCII.NUL then\n+               Full_Name_Len := J;\n+               exit;\n+            end if;\n+         end loop;\n+\n+         --  If Shared=None or Shared=Yes, then check for the existence\n+         --  of another file with exactly the same full name.\n+\n+         if Shared /= No then\n+            declare\n+               P : AFCB_Ptr;\n+\n+            begin\n+               P := Open_Files;\n+               while P /= null loop\n+                  if Fullname (1 .. Full_Name_Len) = P.Name.all then\n+\n+                     --  If we get a match, and either file has Shared=None,\n+                     --  then raise Use_Error, since we don't allow two\n+                     --  files of the same name to be opened unless they\n+                     --  specify the required sharing mode.\n+\n+                     if Shared = None\n+                       or else P.Shared_Status = None\n+                     then\n+                        raise Use_Error;\n+\n+                     --  If both files have Shared=Yes, then we acquire the\n+                     --  stream from the located file to use as our stream.\n+\n+                     elsif Shared = Yes\n+                       and then P.Shared_Status = Yes\n+                     then\n+                        Stream := P.Stream;\n+                        exit;\n+\n+                     --  Otherwise one of the files has Shared=Yes and one\n+                     --  has Shared=No. If the current file has Shared=No\n+                     --  then all is well but we don't want to share any\n+                     --  other file's stream. If the current file has\n+                     --  Shared=Yes, we would like to share a stream, but\n+                     --  not from a file that has Shared=No, so in either\n+                     --  case we just keep going on the search.\n+\n+                     else\n+                        null;\n+                     end if;\n+                  end if;\n+\n+                  P := P.Next;\n+               end loop;\n+            end;\n+         end if;\n+\n+         --  Open specified file if we did not find an existing stream\n+\n+         if Stream = NULL_Stream then\n+            Fopen_Mode (Mode, Text, Creat, Amethod, Fopstr);\n+\n+            --  A special case, if we are opening (OPEN case) a file and\n+            --  the mode returned by Fopen_Mode is not \"r\" or \"r+\", then\n+            --  we first make sure that the file exists as required by\n+            --  Ada semantics.\n+\n+            if Creat = False and then Fopstr (1) /= 'r' then\n+               if file_exists (Namestr'Address) = 0 then\n+                  raise Name_Error;\n+               end if;\n+            end if;\n+\n+            --  Now open the file. Note that we use the name as given\n+            --  in the original Open call for this purpose, since that\n+            --  seems the clearest implementation of the intent. It\n+            --  would presumably work to use the full name here, but\n+            --  if there is any difference, then we should use the\n+            --  name used in the call.\n+\n+            --  Note: for a corresponding delete, we will use the\n+            --  full name, since by the time of the delete, the\n+            --  current working directory may have changed and\n+            --  we do not want to delete a different file!\n+\n+            Stream := fopen (Namestr'Address, Fopstr'Address);\n+\n+            if Stream = NULL_Stream then\n+               if file_exists (Namestr'Address) = 0 then\n+                  raise Name_Error;\n+               else\n+                  raise Use_Error;\n+               end if;\n+            end if;\n+         end if;\n+      end if;\n+\n+      --  Stream has been successfully located or opened, so now we are\n+      --  committed to completing the opening of the file. Allocate block\n+      --  on heap and fill in its fields.\n+\n+      File_Ptr := AFCB_Allocate (Dummy_FCB);\n+\n+      File_Ptr.Is_Regular_File   := (is_regular_file\n+                                      (fileno (Stream)) /= 0);\n+      File_Ptr.Is_System_File    := False;\n+      File_Ptr.Is_Text_File      := Text;\n+      File_Ptr.Shared_Status     := Shared;\n+      File_Ptr.Access_Method     := Amethod;\n+      File_Ptr.Stream            := Stream;\n+      File_Ptr.Form              := new String'(Formstr);\n+      File_Ptr.Name              := new String'(Fullname\n+                                                 (1 .. Full_Name_Len));\n+      File_Ptr.Mode              := Mode;\n+      File_Ptr.Is_Temporary_File := Tempfile;\n+\n+      Chain_File (File_Ptr);\n+      Append_Set (File_Ptr);\n+   end Open;\n+\n+   --------------\n+   -- Read_Buf --\n+   --------------\n+\n+   procedure Read_Buf (File : AFCB_Ptr; Buf : Address; Siz : size_t) is\n+      Nread : size_t;\n+\n+   begin\n+      Nread := fread (Buf, 1, Siz, File.Stream);\n+\n+      if Nread = Siz then\n+         return;\n+\n+      elsif ferror (File.Stream) /= 0 then\n+         raise Device_Error;\n+\n+      elsif Nread = 0 then\n+         raise End_Error;\n+\n+      else -- 0 < Nread < Siz\n+         raise Data_Error;\n+      end if;\n+\n+   end Read_Buf;\n+\n+   procedure Read_Buf\n+     (File  : AFCB_Ptr;\n+      Buf   : Address;\n+      Siz   : in Interfaces.C_Streams.size_t;\n+      Count : out Interfaces.C_Streams.size_t)\n+   is\n+   begin\n+      Count := fread (Buf, 1, Siz, File.Stream);\n+\n+      if Count = 0 and then ferror (File.Stream) /= 0 then\n+         raise Device_Error;\n+      end if;\n+   end Read_Buf;\n+\n+   -----------\n+   -- Reset --\n+   -----------\n+\n+   --  The reset which does not change the mode simply does a rewind.\n+\n+   procedure Reset (File : in out AFCB_Ptr) is\n+   begin\n+      Check_File_Open (File);\n+      Reset (File, File.Mode);\n+   end Reset;\n+\n+   --  The reset with a change in mode is done using freopen, and is\n+   --  not permitted except for regular files (since otherwise there\n+   --  is no name for the freopen, and in any case it seems meaningless)\n+\n+   procedure Reset (File : in out AFCB_Ptr; Mode : in File_Mode) is\n+      Fopstr : aliased Fopen_String;\n+\n+   begin\n+      Check_File_Open (File);\n+\n+      --  Change of mode not allowed for shared file or file with no name\n+      --  or file that is not a regular file, or for a system file.\n+\n+      if File.Shared_Status = Yes\n+        or else File.Name'Length <= 1\n+        or else File.Is_System_File\n+        or else (not File.Is_Regular_File)\n+      then\n+         raise Use_Error;\n+\n+      --  For In_File or Inout_File for a regular file, we can just do a\n+      --  rewind if the mode is unchanged, which is more efficient than\n+      --  doing a full reopen.\n+\n+      elsif Mode = File.Mode\n+        and then Mode <= Inout_File\n+      then\n+         rewind (File.Stream);\n+\n+      --  Here the change of mode is permitted, we do it by reopening the\n+      --  file in the new mode and replacing the stream with a new stream.\n+\n+      else\n+         Fopen_Mode\n+           (Mode, File.Is_Text_File, False, File.Access_Method, Fopstr);\n+\n+         File.Stream :=\n+           freopen (File.Name.all'Address, Fopstr'Address, File.Stream);\n+\n+         if File.Stream = NULL_Stream then\n+            Close (File);\n+            raise Use_Error;\n+\n+         else\n+            File.Mode := Mode;\n+            Append_Set (File);\n+         end if;\n+      end if;\n+   end Reset;\n+\n+   ---------------\n+   -- Write_Buf --\n+   ---------------\n+\n+   procedure Write_Buf (File : AFCB_Ptr; Buf : Address; Siz : size_t) is\n+   begin\n+      --  Note: for most purposes, the Siz and 1 parameters in the fwrite\n+      --  call could be reversed, but on VMS, this is a better choice, since\n+      --  for some file formats, reversing the parameters results in records\n+      --  of one byte each.\n+\n+      SSL.Abort_Defer.all;\n+\n+      if fwrite (Buf, Siz, 1, File.Stream) /= 1 then\n+         if Siz /= 0 then\n+            SSL.Abort_Undefer.all;\n+            raise Device_Error;\n+         end if;\n+      end if;\n+\n+      SSL.Abort_Undefer.all;\n+   end Write_Buf;\n+\n+end System.File_IO;"}, {"sha": "fbf3fe17edc805a7b5e9e25b2c077383bc2d0e29", "filename": "gcc/ada/s-fileio.ads", "status": "added", "additions": 258, "deletions": 0, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fileio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fileio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,258 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                       S Y S T E M . F I L E _ I O                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.17 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides support for the routines described in (RM A.8.2)\n+--  which are common to Text_IO, Direct_IO, Sequential_IO and Stream_IO.\n+\n+with Interfaces.C_Streams;\n+\n+with System.File_Control_Block;\n+\n+package System.File_IO is\n+\n+   package FCB renames System.File_Control_Block;\n+   package ICS renames Interfaces.C_Streams;\n+\n+   ---------------------\n+   -- File Management --\n+   ---------------------\n+\n+   procedure Open\n+     (File_Ptr  : in out FCB.AFCB_Ptr;\n+      Dummy_FCB : in out FCB.AFCB'Class;\n+      Mode      : FCB.File_Mode;\n+      Name      : String;\n+      Form      : String;\n+      Amethod   : Character;\n+      Creat     : Boolean;\n+      Text      : Boolean;\n+      C_Stream  : ICS.FILEs := ICS.NULL_Stream);\n+   --  This routine is used for both Open and Create calls:\n+   --\n+   --    File_Ptr is the file type, which must be null on entry\n+   --    (i.e. the file must be closed before the call).\n+   --\n+   --    Dummy_FCB is a default initialized file control block of appropriate\n+   --    type. Note that the tag of this record indicates the type and length\n+   --    of the control block. This control block is used only for the purpose\n+   --    of providing the controlling argument for calling the write version\n+   --    of Allocate_AFCB. It has no other purpose, and its fields are never\n+   --    read or written.\n+   --\n+   --    Mode is the required mode\n+   --\n+   --    Name is the file name, with a null string indicating that a temporary\n+   --    file is to be created (only permitted in create mode, not open mode)\n+   --\n+   --    Creat is True for a create call, and false for an open call\n+   --\n+   --    Text is set True to open the file in text mode (w+t or r+t) instead\n+   --    of the usual binary mode open (w+b or r+b).\n+   --\n+   --    Form is the form string given in the open or create call, this is\n+   --    stored in the AFCB, but otherwise is not used by this or any other\n+   --    routine in this unit (except Form which retrieves the original value)\n+   --\n+   --    Amethod indicates the access method\n+   --\n+   --      D = Direct_IO\n+   --      Q = Sequential_IO\n+   --      S = Stream_IO\n+   --      T = Text_IO\n+   --      W = Wide_Text_IO\n+   --\n+   --    C_Stream is left at its default value for the normal case of an\n+   --    Open or Create call as defined in the RM. The only time this is\n+   --    non-null is for the Open call from Ada.xxx_IO.C_Streams.Open.\n+   --\n+   --  On return, if the open/create succeeds, then the fields of File are\n+   --  filled in, and this value is copied to the heap. File_Ptr points to\n+   --  this allocated file control block. If the open/create fails, then the\n+   --  fields of File are undefined, and File_Ptr is unchanged.\n+\n+   procedure Close (File : in out FCB.AFCB_Ptr);\n+   --  The file is closed, all storage associated with it is released, and\n+   --  File is set to null. Note that this routine calls AFCB_Close to perform\n+   --  any specialized close actions, then closes the file at the system level,\n+   --  then frees the mode and form strings, and finally calls AFCB_Free to\n+   --  free the file control block itself, setting File to null.\n+\n+   procedure Delete (File : in out FCB.AFCB_Ptr);\n+   --  The indicated file is unlinked\n+\n+   procedure Reset (File : in out FCB.AFCB_Ptr; Mode : in FCB.File_Mode);\n+   --  The file is reset, and the mode changed as indicated.\n+\n+   procedure Reset (File : in out FCB.AFCB_Ptr);\n+   --  The files is reset, and the mode is unchanged\n+\n+   function Mode (File : in FCB.AFCB_Ptr) return FCB.File_Mode;\n+   --  Returns the mode as supplied by create, open or reset\n+\n+   function Name (File : in FCB.AFCB_Ptr) return String;\n+   --  Returns the file name as supplied by Open or Create. Raises Use_Error\n+   --  if used with temporary files or standard files.\n+\n+   function Form (File : in FCB.AFCB_Ptr) return String;\n+   --  Returns the form as supplied by create, open or reset\n+   --  The string is normalized to all lower case letters.\n+\n+   function Is_Open (File : in FCB.AFCB_Ptr) return Boolean;\n+   --  Determines if file is open or not\n+\n+   ----------------------\n+   -- Utility Routines --\n+   ----------------------\n+\n+   --  Some internal routines not defined in A.8.2. These are routines which\n+   --  provide required common functionality shared by separate packages.\n+\n+   procedure Chain_File (File : FCB.AFCB_Ptr);\n+   --  Used to chain the given file into the list of open files. Normally this\n+   --  is done implicitly by Open. Chain_File is used for the spcial cases of\n+   --  the system files defined by Text_IO (stdin, stdout, stderr) which are\n+   --  not opened in the normal manner. Note that the caller is responsible\n+   --  for task lock out to protect the global data structures if this is\n+   --  necessary (it is needed for the calls from within this unit itself,\n+   --  but not required for the calls from Text_IO and Wide_Text_IO that\n+   --  are made during elaboration of the environment task).\n+\n+   procedure Check_File_Open (File : FCB.AFCB_Ptr);\n+   --  If the current file is not open, then Status_Error is raised.\n+   --  Otherwise control returns normally (with File pointing to the\n+   --  control block for the open file.\n+\n+   procedure Check_Read_Status (File : FCB.AFCB_Ptr);\n+   --  If the current file is not open, then Status_Error is raised. If\n+   --  the file is open, then the mode is checked to ensure that reading\n+   --  is permitted, and if not Mode_Error is raised, otherwise control\n+   --  returns normally.\n+\n+   procedure Check_Write_Status (File : FCB.AFCB_Ptr);\n+   --  If the current file is not open, then Status_Error is raised. If\n+   --  the file is open, then the mode is checked to ensure that writing\n+   --  is permitted, and if not Mode_Error is raised, otherwise control\n+   --  returns normally.\n+\n+   function End_Of_File (File : FCB.AFCB_Ptr) return Boolean;\n+   --  File must be opened in read mode. True is returned if the stream is\n+   --  currently positioned at the end of file, otherwise False is returned.\n+   --  The position of the stream is not affected.\n+\n+   procedure Flush (File : FCB.AFCB_Ptr);\n+   --  Flushes the stream associated with the given file. The file must be\n+   --  open and in write mode (if not, an appropriate exception is raised)\n+\n+   function Form_Boolean\n+     (Form    : String;\n+      Keyword : String;\n+      Default : Boolean)\n+      return    Boolean;\n+   --  Searches form string for an entry of the form Keyword=xx where xx is\n+   --  either Yes/No or y/n. Returns True if Yes or Y is found, False if No\n+   --  or N is found. If the keyword parameter is not found, returns the\n+   --  value given as Default. May raise Use_Error if a form string syntax\n+   --  error is detected. Keyword and Form must be in lower case.\n+\n+   function Form_Integer\n+     (Form    : String;\n+      Keyword : String;\n+      Default : Integer)\n+      return    Integer;\n+   --  Searches form string for an entry of the form Keyword=xx where xx is\n+   --  an unsigned decimal integer in the range 0 to 999_999. Returns this\n+   --  integer value if it is found. If the keyword parameter is not found,\n+   --  returns the value given as Default. Raise Use_Error if a form string\n+   --  syntax error is detected. Keyword and Form must be in lower case.\n+\n+   procedure Form_Parameter\n+     (Form    : String;\n+      Keyword : String;\n+      Start   : out Natural;\n+      Stop    : out Natural);\n+   --  Searches form string for an entry of the form Keyword=xx and if found\n+   --  Sets Start and Stop to the first and last characters of xx. Keyword\n+   --  and Form must be in lower case. If no entry matches, then Start and\n+   --  Stop are set to zero on return. Use_Error is raised if a malformed\n+   --  string is detected, but there is no guarantee of full syntax checking.\n+\n+   procedure Read_Buf\n+     (File : FCB.AFCB_Ptr;\n+      Buf  : Address;\n+      Siz  : Interfaces.C_Streams.size_t);\n+   --  Reads Siz bytes from File.Stream into Buf. The caller has checked\n+   --  that the file is open in read mode. Raises an exception if Siz bytes\n+   --  cannot be read (End_Error if no data was read, Data_Error if a partial\n+   --  buffer was read, Device_Error if an error occurs).\n+\n+   procedure Read_Buf\n+     (File  : FCB.AFCB_Ptr;\n+      Buf   : Address;\n+      Siz   : in Interfaces.C_Streams.size_t;\n+      Count : out Interfaces.C_Streams.size_t);\n+   --  Reads Siz bytes from File.Stream into Buf. The caller has checked\n+   --  that the file is open in read mode. Device Error is raised if an error\n+   --  occurs. Count is the actual number of bytes read, which may be less\n+   --  than Siz if the end of file is encountered.\n+\n+   procedure Append_Set (File : FCB.AFCB_Ptr);\n+   --  If the mode of the file is Append_File, then the file is positioned\n+   --  at the end of file using fseek, otherwise this call has no effect.\n+\n+   procedure Write_Buf\n+     (File : FCB.AFCB_Ptr;\n+      Buf  : Address;\n+      Siz  : Interfaces.C_Streams.size_t);\n+   --  Writes size_t bytes to File.Stream from Buf. The caller has checked\n+   --  that the file is open in write mode. Raises Device_Error if the\n+   --  complete buffer cannot be written.\n+\n+   procedure Make_Unbuffered (File : FCB.AFCB_Ptr);\n+\n+   procedure Make_Line_Buffered\n+     (File     : FCB.AFCB_Ptr;\n+      Line_Siz : Interfaces.C_Streams.size_t);\n+\n+   procedure Make_Buffered\n+     (File     : FCB.AFCB_Ptr;\n+      Buf_Siz  : Interfaces.C_Streams.size_t);\n+\n+private\n+   pragma Inline (Check_Read_Status);\n+   pragma Inline (Check_Write_Status);\n+   pragma Inline (Form);\n+   pragma Inline (Mode);\n+\n+end System.File_IO;"}, {"sha": "60df91c6dd1089fa34b226a4f3f6562a72841ad6", "filename": "gcc/ada/s-finimp.adb", "status": "added", "additions": 582, "deletions": 0, "changes": 582, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-finimp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-finimp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-finimp.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,582 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--    S Y S T E M . F I N A L I Z A T I O N _ I M P L E M E N T A T I O N   --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.48 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Exceptions;\n+with Ada.Tags;\n+with Ada.Unchecked_Conversion;\n+with System.Storage_Elements;\n+with System.Soft_Links;\n+\n+package body System.Finalization_Implementation is\n+\n+   use Ada.Exceptions;\n+   use System.Finalization_Root;\n+\n+   package SSL renames System.Soft_Links;\n+\n+   package SSE renames System.Storage_Elements;\n+   use type SSE.Storage_Offset;\n+\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   function To_Finalizable_Ptr is\n+     new Ada.Unchecked_Conversion (Address, Finalizable_Ptr);\n+\n+   function To_Addr is\n+     new Ada.Unchecked_Conversion (Finalizable_Ptr, Address);\n+\n+   type RC_Ptr is access all Record_Controller;\n+\n+   function To_RC_Ptr is\n+     new Ada.Unchecked_Conversion (Address, RC_Ptr);\n+\n+   procedure Raise_Exception_No_Defer\n+     (E       : in Exception_Id;\n+      Message : in String := \"\");\n+   pragma Import (Ada, Raise_Exception_No_Defer,\n+     \"ada__exceptions__raise_exception_no_defer\");\n+   pragma No_Return (Raise_Exception_No_Defer);\n+   --  Raise an exception without deferring abort. Note that we have to\n+   --  use this rather kludgy Ada Import interface, since this subprogram\n+   --  is not available in the visible spec of Ada.Exceptions.\n+\n+   procedure Raise_From_Finalize\n+     (L          : Finalizable_Ptr;\n+      From_Abort : Boolean;\n+      E_Occ      : Exception_Occurrence);\n+   --  Deal with an exception raised during finalization of a list. L is a\n+   --  pointer to the list of element not yet finalized. From_Abort is true\n+   --  if the finalization actions come from an abort rather than a normal\n+   --  exit. E_Occ represents the exception being raised.\n+\n+   function RC_Offset (T : Ada.Tags.Tag) return SSE.Storage_Offset;\n+   pragma Import (Ada, RC_Offset, \"ada__tags__get_rc_offset\");\n+\n+   function Parent_Size (Obj : Address) return SSE.Storage_Count;\n+   pragma Import (Ada, Parent_Size, \"ada__tags__parent_size\");\n+\n+   function Get_RC_Dynamically (Obj : Address) return Address;\n+   --  Given an the address of an object (obj) of a tagged extension with\n+   --  controlled component, computes the address of the record controller\n+   --  located just after the _parent field\n+\n+   -------------\n+   --  Adjust --\n+   -------------\n+\n+   procedure Adjust (Object : in out Record_Controller) is\n+\n+      First_Comp : Finalizable_Ptr;\n+      My_Offset : constant SSE.Storage_Offset :=\n+                    Object.My_Address - Object'Address;\n+\n+      procedure Ptr_Adjust (Ptr : in out Finalizable_Ptr);\n+      --  Substract the offset to the pointer\n+\n+      procedure Reverse_Adjust (P : Finalizable_Ptr);\n+      --  Ajust the components in the reverse order in which they are stored\n+      --  on the finalization list. (Adjust and Finalization are not done in\n+      --  the same order)\n+\n+      procedure Ptr_Adjust (Ptr : in out Finalizable_Ptr) is\n+      begin\n+         if Ptr /= null then\n+            Ptr := To_Finalizable_Ptr (To_Addr (Ptr) - My_Offset);\n+         end if;\n+      end Ptr_Adjust;\n+\n+      procedure Reverse_Adjust (P : Finalizable_Ptr) is\n+      begin\n+         if P /= null then\n+            Ptr_Adjust (P.Next);\n+            Reverse_Adjust (P.Next);\n+            Adjust (P.all);\n+            Object.F := P;   --  Successfully adjusted, so place in list.\n+         end if;\n+      end Reverse_Adjust;\n+\n+   --  Start of processing for Adjust\n+\n+   begin\n+      --  Adjust the components and their finalization pointers next.\n+      --  We must protect against an exception in some call to Adjust, so\n+      --  we keep pointing to the list of successfully adjusted components,\n+      --  which can be finalized if an exception is raised.\n+\n+      First_Comp := Object.F;\n+      Object.F := null;               --  nothing adjusted yet.\n+      Ptr_Adjust (First_Comp);        --  set addresss of first component.\n+      Reverse_Adjust (First_Comp);\n+\n+      --  Then Adjust the controller itself\n+\n+      Object.My_Address := Object'Address;\n+\n+   exception\n+      when others =>\n+         --  Finalize those components that were successfully adjusted, and\n+         --  propagate exception. The object itself is not yet attached to\n+         --  global finalization list, so we cannot rely on the outer call\n+         --  to Clean to take care of these components.\n+\n+         Finalize (Object);\n+         raise;\n+   end Adjust;\n+\n+   --------------------------\n+   -- Attach_To_Final_List --\n+   --------------------------\n+\n+   procedure Attach_To_Final_List\n+     (L       : in out Finalizable_Ptr;\n+      Obj     : in out Finalizable;\n+      Nb_Link : Short_Short_Integer)\n+   is\n+   begin\n+      --  Simple case: attachement to a one way list\n+\n+      if Nb_Link = 1 then\n+         Obj.Next := L;\n+         L        := Obj'Unchecked_Access;\n+\n+      --  Dynamically allocated objects: they are attached to a doubly\n+      --  linked list, so that an element can be finalized at any moment\n+      --  by means of an unchecked deallocation. Attachement is\n+      --  protected against multi-threaded access.\n+\n+      elsif Nb_Link = 2 then\n+\n+         Locked_Processing : begin\n+            SSL.Lock_Task.all;\n+            Obj.Next    := L.Next;\n+            Obj.Prev    := L.Next.Prev;\n+            L.Next.Prev := Obj'Unchecked_Access;\n+            L.Next      := Obj'Unchecked_Access;\n+            SSL.Unlock_Task.all;\n+\n+         exception\n+            when others =>\n+               SSL.Unlock_Task.all;\n+               raise;\n+         end Locked_Processing;\n+\n+      --  Attachement of arrays to the final list (used only for objects\n+      --  returned by function). Obj, in this case is the last element,\n+      --  but all other elements are already threaded after it. We just\n+      --  attach the rest of the final list at the end of the array list.\n+\n+      elsif Nb_Link = 3 then\n+         declare\n+            P : Finalizable_Ptr := Obj'Unchecked_Access;\n+\n+         begin\n+            while P.Next /= null loop\n+               P := P.Next;\n+            end loop;\n+\n+            P.Next := L;\n+            L := Obj'Unchecked_Access;\n+         end;\n+      end if;\n+\n+   end Attach_To_Final_List;\n+\n+   ---------------------\n+   -- Deep_Tag_Adjust --\n+   ---------------------\n+\n+   procedure Deep_Tag_Adjust\n+     (L : in out SFR.Finalizable_Ptr;\n+      A : System.Address;\n+      B : Short_Short_Integer)\n+   is\n+      V      : constant SFR.Finalizable_Ptr := To_Finalizable_Ptr (A);\n+      Offset : constant SSE.Storage_Offset := RC_Offset (V'Tag);\n+\n+      Controller : RC_Ptr;\n+\n+   begin\n+      --  Has controlled components\n+\n+      if Offset /= 0 then\n+         if Offset > 0 then\n+            Controller := To_RC_Ptr (A + Offset);\n+         else\n+            Controller := To_RC_Ptr (Get_RC_Dynamically (A));\n+         end if;\n+\n+         Adjust (Controller.all);\n+         Attach_To_Final_List (L, Controller.all, B);\n+\n+      --  Is controlled\n+\n+      elsif V.all in Finalizable then\n+         Adjust (V.all);\n+         Attach_To_Final_List (L, Finalizable (V.all), 1);\n+      end if;\n+   end Deep_Tag_Adjust;\n+\n+   ---------------------\n+   -- Deep_Tag_Attach --\n+   ----------------------\n+\n+   procedure Deep_Tag_Attach\n+     (L : in out SFR.Finalizable_Ptr;\n+      A : System.Address;\n+      B : Short_Short_Integer)\n+   is\n+      V      : constant SFR.Finalizable_Ptr := To_Finalizable_Ptr (A);\n+      Offset : constant SSE.Storage_Offset  := RC_Offset (V'Tag);\n+\n+      Controller : RC_Ptr;\n+\n+   begin\n+      if Offset /= 0 then\n+         if Offset > 0 then\n+            Controller := To_RC_Ptr (A + Offset);\n+         else\n+            Controller := To_RC_Ptr (Get_RC_Dynamically (A));\n+         end if;\n+\n+         Attach_To_Final_List (L, Controller.all, B);\n+\n+      --  Is controlled\n+\n+      elsif V.all in Finalizable then\n+         Attach_To_Final_List (L, V.all, B);\n+      end if;\n+   end Deep_Tag_Attach;\n+\n+   -----------------------\n+   -- Deep_Tag_Finalize --\n+   -----------------------\n+\n+   procedure Deep_Tag_Finalize\n+     (L : in out SFR.Finalizable_Ptr;\n+      A : System.Address;\n+      B : Boolean)\n+   is\n+      V      : constant SFR.Finalizable_Ptr := To_Finalizable_Ptr (A);\n+      Offset : constant SSE.Storage_Offset := RC_Offset (V'Tag);\n+\n+      Controller : RC_Ptr;\n+\n+   begin\n+      --  Has controlled components\n+\n+      if Offset /= 0 then\n+         if Offset > 0 then\n+            Controller := To_RC_Ptr (A + Offset);\n+         else\n+            Controller := To_RC_Ptr (Get_RC_Dynamically (A));\n+         end if;\n+\n+         if B then\n+            Finalize_One (Controller.all);\n+         else\n+            Finalize (Controller.all);\n+         end if;\n+\n+      --  Is controlled\n+\n+      elsif V.all in Finalizable then\n+         if B then\n+            Finalize_One (V.all);\n+         else\n+            Finalize (V.all);\n+         end if;\n+      end if;\n+   end Deep_Tag_Finalize;\n+\n+   -------------------------\n+   -- Deep_Tag_Initialize --\n+   -------------------------\n+\n+   procedure Deep_Tag_Initialize\n+     (L : in out SFR.Finalizable_Ptr;\n+      A :        System.Address;\n+      B :        Short_Short_Integer)\n+   is\n+      V      : constant SFR.Finalizable_Ptr := To_Finalizable_Ptr (A);\n+      Offset : constant SSE.Storage_Offset := RC_Offset (V'Tag);\n+\n+      Controller : RC_Ptr;\n+\n+   begin\n+      --  This procedure should not be called if the object has no\n+      --  controlled components\n+\n+      if Offset = 0 then\n+\n+         raise Program_Error;\n+\n+      --  Has controlled components\n+\n+      else\n+         if Offset > 0 then\n+            Controller := To_RC_Ptr (A + Offset);\n+         else\n+            Controller := To_RC_Ptr (Get_RC_Dynamically (A));\n+         end if;\n+      end if;\n+\n+      Initialize (Controller.all);\n+      Attach_To_Final_List (L, Controller.all, B);\n+\n+      --  Is controlled\n+\n+      if V.all in Finalizable then\n+         Initialize (V.all);\n+         Attach_To_Final_List (Controller.F, Finalizable (Controller.all), 1);\n+      end if;\n+   end Deep_Tag_Initialize;\n+\n+   -----------------------------\n+   -- Detach_From_Final_List --\n+   -----------------------------\n+\n+   --  We know that the detach object is neither at the beginning nor at the\n+   --  end of the list, thank's to the dummy First and Last Elements but the\n+   --  object may not be attached at all if it is Finalize_Storage_Only\n+\n+   procedure Detach_From_Final_List (Obj : in out Finalizable) is\n+   begin\n+\n+      --  When objects are not properly attached to a doubly linked\n+      --  list do not try to detach them. The only case where it can\n+      --  happen is when dealing with Finalize_Storage_Only objects\n+      --  which are not always attached.\n+\n+      if Obj.Next /= null and then Obj.Prev /= null then\n+         SSL.Lock_Task.all;\n+         Obj.Next.Prev := Obj.Prev;\n+         Obj.Prev.Next := Obj.Next;\n+         SSL.Unlock_Task.all;\n+      end if;\n+\n+   exception\n+      when others =>\n+         SSL.Unlock_Task.all;\n+         raise;\n+   end Detach_From_Final_List;\n+\n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize   (Object : in out Limited_Record_Controller) is\n+   begin\n+      Finalize_List (Object.F);\n+   end Finalize;\n+\n+   --------------------------\n+   -- Finalize_Global_List --\n+   --------------------------\n+\n+   procedure Finalize_Global_List is\n+   begin\n+      --  There are three case here:\n+      --  a. the application uses tasks, in which case Finalize_Global_Tasks\n+      --     will defer abortion\n+      --  b. the application doesn't use tasks but uses other tasking\n+      --     constructs, such as ATCs and protected objects. In this case,\n+      --     the binder will call Finalize_Global_List instead of\n+      --     Finalize_Global_Tasks, letting abort undeferred, and leading\n+      --     to assertion failures in the GNULL\n+      --  c. the application doesn't use any tasking construct in which case\n+      --     deferring abort isn't necessary.\n+      --\n+      --  Until another solution is found to deal with case b, we need to\n+      --  call abort_defer here to pass the checks, but we do not need to\n+      --  undefer abortion, since Finalize_Global_List is the last procedure\n+      --  called before exiting the partition.\n+\n+      SSL.Abort_Defer.all;\n+      Finalize_List (Global_Final_List);\n+   end Finalize_Global_List;\n+\n+   -------------------\n+   -- Finalize_List --\n+   -------------------\n+\n+   procedure Finalize_List (L : Finalizable_Ptr) is\n+      P : Finalizable_Ptr := L;\n+      Q : Finalizable_Ptr;\n+\n+      type Fake_Exception_Occurence is record\n+         Id : Exception_Id;\n+      end record;\n+      type Ptr is access all Fake_Exception_Occurence;\n+\n+      --  Let's get the current exception before starting to finalize in\n+      --  order to check if we are in the abort case if an exception is\n+      --  raised.\n+\n+      function To_Ptr is new\n+         Ada.Unchecked_Conversion (Exception_Occurrence_Access, Ptr);\n+      X : Exception_Id :=\n+        To_Ptr (System.Soft_Links.Get_Current_Excep.all).Id;\n+\n+   begin\n+      while P /= null loop\n+         Q := P.Next;\n+         Finalize (P.all);\n+         P := Q;\n+      end loop;\n+\n+   exception\n+      when E_Occ : others =>\n+         Raise_From_Finalize (\n+           Q,\n+           X = Standard'Abort_Signal'Identity,\n+           E_Occ);\n+   end Finalize_List;\n+\n+   ------------------\n+   -- Finalize_One --\n+   ------------------\n+\n+   procedure Finalize_One (Obj : in out  Finalizable) is\n+   begin\n+      Detach_From_Final_List (Obj);\n+      Finalize (Obj);\n+\n+   exception\n+      when E_Occ : others => Raise_From_Finalize (null, False, E_Occ);\n+   end Finalize_One;\n+\n+   ------------------------\n+   -- Get_RC_Dynamically --\n+   ------------------------\n+\n+   function Get_RC_Dynamically (Obj : Address) return Address is\n+\n+      --  define a faked record controller to avoid generating\n+      --  unnecessary expanded code for controlled types\n+\n+      type Faked_Record_Controller is record\n+         Tag, Prec, Next : Address;\n+      end record;\n+\n+      --  Reconstruction of a type with characteristics\n+      --  comparable to the original type\n+\n+      D : constant := Storage_Unit - 1;\n+\n+      type Faked_Type_Of_Obj is record\n+         Parent : SSE.Storage_Array\n+           (1 .. (Parent_Size (Obj) + D) / Storage_Unit);\n+         Controller : Faked_Record_Controller;\n+      end record;\n+\n+      type Obj_Ptr is access all Faked_Type_Of_Obj;\n+      function To_Obj_Ptr is new Ada.Unchecked_Conversion (Address, Obj_Ptr);\n+\n+   begin\n+      return To_Obj_Ptr (Obj).Controller'Address;\n+   end Get_RC_Dynamically;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize (Object : in out Limited_Record_Controller) is\n+   begin\n+      null;\n+   end Initialize;\n+\n+   procedure Initialize (Object : in out Record_Controller) is\n+   begin\n+      Object.My_Address := Object'Address;\n+   end Initialize;\n+\n+   -------------------------\n+   -- Raise_From_Finalize --\n+   -------------------------\n+\n+   procedure Raise_From_Finalize\n+     (L          : Finalizable_Ptr;\n+      From_Abort : Boolean;\n+      E_Occ      : Exception_Occurrence)\n+   is\n+      Msg : constant String := Exception_Message (E_Occ);\n+      P   : Finalizable_Ptr := L;\n+      Q   : Finalizable_Ptr;\n+\n+   begin\n+      --  We already got an exception. We now finalize the remainder of\n+      --  the list, ignoring all further exceptions.\n+\n+      while P /= null loop\n+         Q := P.Next;\n+\n+         begin\n+            Finalize (P.all);\n+         exception\n+            when others => null;\n+         end;\n+\n+         P := Q;\n+      end loop;\n+\n+      --  If finalization from an Abort, then nothing to do\n+\n+      if From_Abort then\n+         null;\n+\n+      --  If no message, then add our own message saying what happened\n+\n+      elsif Msg = \"\" then\n+         Raise_Exception_No_Defer\n+           (E       => Program_Error'Identity,\n+            Message => \"exception \" &\n+                       Exception_Name (E_Occ) &\n+                       \" raised during finalization\");\n+\n+      --  If there was a message, pass it on\n+\n+      else\n+         Raise_Exception_No_Defer (Program_Error'Identity, Msg);\n+      end if;\n+   end Raise_From_Finalize;\n+\n+--  Initialization of package, set Adafinal soft link\n+\n+begin\n+   SSL.Adafinal := Finalize_Global_List'Access;\n+\n+end System.Finalization_Implementation;"}, {"sha": "49db440a0ec750bafc5200822a6a8f133f127f88", "filename": "gcc/ada/s-finimp.ads", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-finimp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-finimp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-finimp.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,151 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--    S Y S T E M . F I N A L I Z A T I O N _ I M P L E M E N T A T I O N   --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.31 $                             --\n+--                                                                          --\n+--          Copyright (C) 1992-1998 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Finalization_Root;\n+\n+package System.Finalization_Implementation is\n+pragma Elaborate_Body (Finalization_Implementation);\n+\n+   package SFR  renames System.Finalization_Root;\n+\n+   ------------------------------------------------\n+   -- Finalization Management Abstract Interface --\n+   ------------------------------------------------\n+\n+   Global_Final_List : SFR.Finalizable_Ptr;\n+   --  This list stores the controlled objects defined in library-level\n+   --  packages. They will be finalized after the main program completion.\n+\n+   procedure Finalize_Global_List;\n+   --  The procedure to be called in order to finalize the global list;\n+\n+   procedure Attach_To_Final_List\n+     (L       : in out SFR.Finalizable_Ptr;\n+      Obj     : in out SFR.Finalizable;\n+      Nb_Link : Short_Short_Integer);\n+   --  Attach finalizable object Obj to the linked list L. Nb_Link controls\n+   --  the number of link of the linked_list, and can be either 0 for no\n+   --  attachement, 1 for simple linked lists or 2 for doubly linked lists\n+   --  or even 3 for a simple attachement of a whole array of elements.\n+   --  Attachement to a simply linked list is not protected against\n+   --  concurrent access and should only be used in context where it\n+   --  doesn't matter, such as for objects allocated on the stack. In the\n+   --  case of an attachment on a doubly linked list, L must not be null\n+   --  and Obj will be inserted AFTER the first element and the attachment\n+   --  is protected against concurrent call. Typically used to attach to\n+   --  a dynamically allocated object to a List_Controller (whose first\n+   --  element is always a dummy element)\n+\n+   procedure Finalize_List (L : SFR.Finalizable_Ptr);\n+   --  Call Finalize on each element of the list L;\n+\n+   procedure Finalize_One (Obj  : in out SFR.Finalizable);\n+   --  Call Finalize on Obj and remove its final list.\n+\n+   ---------------------\n+   -- Deep Procedures --\n+   ---------------------\n+\n+   procedure Deep_Tag_Initialize\n+     (L : in out SFR.Finalizable_Ptr;\n+      A : System.Address;\n+      B : Short_Short_Integer);\n+   --  Generic initialize for tagged objects with controlled components. A\n+   --  is the address of the object, L the finalization list when it needs\n+   --  to be attached and B the attachement level (see Attach_To_Final_List)\n+\n+   procedure Deep_Tag_Adjust\n+     (L : in out SFR.Finalizable_Ptr;\n+      A : System.Address;\n+      B : Short_Short_Integer);\n+   --  Generic adjust for tagged objects with controlled components. A\n+   --  is the address of the object, L the finalization list when it needs\n+   --  to be attached and B the attachement level (see Attach_To_Final_List)\n+\n+   procedure Deep_Tag_Finalize\n+     (L : in out SFR.Finalizable_Ptr;\n+      A : System.Address;\n+      B : Boolean);\n+   --  Generic finalize for tagged objects with controlled components. A\n+   --  is the address of the object, L the finalization list when it needs\n+   --  to be attached and B the attachement level (see Attach_To_Final_List)\n+\n+   procedure Deep_Tag_Attach\n+     (L : in out SFR.Finalizable_Ptr;\n+      A : System.Address;\n+      B : Short_Short_Integer);\n+   --  Generic attachement for tagged objects with controlled components. A\n+   --  is the address of the object, L the finalization list when it needs\n+   --  to be attached and B the attachement level (see Attach_To_Final_List)\n+\n+   -----------------------------\n+   -- Record Controller Types --\n+   -----------------------------\n+\n+   --  Definition of the types of the controller component that is included\n+   --  in records containing controlled components. This controller is\n+   --  attached to the finalization chain of the upper-level and carries\n+   --  the pointer of the finalization chain for the lower level\n+\n+   type Limited_Record_Controller is new SFR.Root_Controlled with record\n+      F : SFR.Finalizable_Ptr;\n+   end record;\n+\n+   procedure Initialize (Object : in out Limited_Record_Controller);\n+   --  Does nothing\n+\n+   procedure Finalize (Object : in out Limited_Record_Controller);\n+   --  Finalize the controlled components of the enclosing record by\n+   --  following the list starting at Object.F\n+\n+   type Record_Controller is\n+      new Limited_Record_Controller with record\n+         My_Address : System.Address;\n+      end record;\n+\n+   procedure Initialize (Object : in out Record_Controller);\n+   --  Initialize the field My_Address to the Object'Address\n+\n+   procedure Adjust (Object : in out Record_Controller);\n+   --  Adjust the components and their finalization pointers by substracting\n+   --  by the offset of the target and the source addresses of the assignment\n+\n+   --  Inherit Finalize from Limited_Record_Controller\n+\n+   procedure Detach_From_Final_List (Obj : in out SFR.Finalizable);\n+   --  Remove the specified object from its Final list which must be a\n+   --  doubly linked list.\n+\n+end System.Finalization_Implementation;"}, {"sha": "fba98865ab33c7f35301209912db83b62779bddf", "filename": "gcc/ada/s-finroo.adb", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-finroo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-finroo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-finroo.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,99 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                S Y S T E M . F I N A L I Z A T I O N _ R O O T           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.8 $\n+--                                                                          --\n+--           Copyright (C) 1992-2001 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Finalization_Root is\n+\n+   --  It should not be possible to call any of these subprograms\n+\n+   ------------\n+   -- Adjust --\n+   ------------\n+\n+   procedure Adjust (Object : in out Root_Controlled) is\n+   begin\n+      raise Program_Error;\n+   end Adjust;\n+\n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   procedure Finalize (Object : in out Root_Controlled) is\n+   begin\n+      raise Program_Error;\n+   end Finalize;\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize (Object : in out Root_Controlled) is\n+   begin\n+      raise Program_Error;\n+   end Initialize;\n+\n+   ----------\n+   -- Read --\n+   ----------\n+\n+   --  Read and Write must be empty in order to avoid copying the\n+   --  finalization pointers.\n+\n+   pragma Warnings (Off);\n+   --  Suppress warning for out paramater Item which is not assigned\n+   --  because it is pretty much empty.\n+\n+   procedure Read (Stream : access Ada.Streams.Root_Stream_Type'Class;\n+                   Item : out Root_Controlled)\n+   is\n+   begin\n+      null;\n+   end Read;\n+\n+   -----------\n+   -- Write --\n+   -----------\n+\n+   --  Read and Write must be empty in order to avoid copying the\n+   --  finalization pointers.\n+\n+   procedure Write (Stream : access Ada.Streams.Root_Stream_Type'Class;\n+                    Item : in Root_Controlled)\n+   is\n+   begin\n+      null;\n+   end Write;\n+\n+end System.Finalization_Root;"}, {"sha": "d853cf4e2b51c0c2f952b7da5fb1482d9e4665bc", "filename": "gcc/ada/s-finroo.ads", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-finroo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-finroo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-finroo.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,62 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                S Y S T E M . F I N A L I Z A T I O N _ R O O T           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.7 $\n+--                                                                          --\n+--   Copyright (C) 1992-2000 Free Software Foundation, Inc.                 --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+with Ada.Streams;\n+package System.Finalization_Root is\n+pragma Preelaborate (Finalization_Root);\n+\n+   type Root_Controlled;\n+\n+   type Finalizable_Ptr is access all Root_Controlled'Class;\n+\n+   type Empty_Root_Controlled is abstract tagged null record;\n+   --  Just for the sake of Controlled equality (see Ada.Finalization)\n+\n+   type Root_Controlled is new Empty_Root_Controlled with record\n+      Prev, Next : Finalizable_Ptr;\n+   end record;\n+   subtype Finalizable is Root_Controlled'Class;\n+\n+   procedure Initialize (Object : in out Root_Controlled);\n+   procedure Finalize   (Object : in out Root_Controlled);\n+   procedure Adjust     (Object : in out Root_Controlled);\n+\n+   procedure Write     (Stream : access Ada.Streams.Root_Stream_Type'Class;\n+                        Item : in Root_Controlled);\n+   procedure Read      (Stream : access Ada.Streams.Root_Stream_Type'Class;\n+                        Item : out Root_Controlled);\n+\n+   for Root_Controlled'Read use Read;\n+   for Root_Controlled'Write use Write;\n+end System.Finalization_Root;"}, {"sha": "b5d686ed0ae09a56a13f2549a15e718f3ce05093", "filename": "gcc/ada/s-fore.adb", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fore.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fore.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fore.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,60 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                          S Y S T E M . F O R E                           --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.3 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Fore is\n+\n+   ----------\n+   -- Fore --\n+   ----------\n+\n+   function Fore (Lo, Hi : Long_Long_Float) return Natural is\n+      T : Long_Long_Float := Long_Long_Float'Max (abs Lo, abs Hi);\n+      R : Natural;\n+\n+   begin\n+      --  Initial value of 2 allows for sign and mandatory single digit\n+\n+      R := 2;\n+\n+      --  Loop to increase Fore as needed to include full range of values\n+\n+      while T >= 10.0 loop\n+         T := T / 10.0;\n+         R := R + 1;\n+      end loop;\n+\n+      return R;\n+   end Fore;\n+end System.Fore;"}, {"sha": "8f95d40481b4920e45ba917afa613ae9505cf6e6", "filename": "gcc/ada/s-fore.ads", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fore.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-fore.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fore.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,45 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                          S Y S T E M . F O R E                           --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.3 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the routine used for the 'Fore attribute\n+\n+package System.Fore is\n+pragma Pure (Fore);\n+\n+   function Fore (Lo, Hi : Long_Long_Float) return Natural;\n+   --  Compute Fore attribute value for a fixed-point type. The parameters\n+   --  are the low and high bounds values, converted to Long_Long_Float.\n+\n+end System.Fore;"}, {"sha": "73d69df1185e757450a5da073ac20508a76398b5", "filename": "gcc/ada/s-gloloc.adb", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-gloloc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-gloloc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gloloc.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,162 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                  S Y S T E M . G L O B A L _ L O C K S                   --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.6 $                               --\n+--                                                                          --\n+--           Copyright (C) 1999-2001 Ada Core Technologies, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with GNAT.Task_Lock;\n+\n+package body System.Global_Locks is\n+\n+   type String_Access is access String;\n+\n+   package TSL renames GNAT.Task_Lock;\n+\n+   Dir_Separator : Character;\n+   pragma Import (C, Dir_Separator, \"__gnat_dir_separator\");\n+\n+   type Lock_File_Entry is\n+      record\n+         Dir  : String_Access;\n+         File : String_Access;\n+      end record;\n+\n+   Last_Lock  : Lock_Type := Null_Lock;\n+   Lock_Table : array (Lock_Type range 1 .. 15) of Lock_File_Entry;\n+\n+   procedure Lock_File\n+     (Dir     : String;\n+      File    : String;\n+      Wait    : Duration := 0.1;\n+      Retries : Natural  := Natural'Last);\n+   --  Create a lock file File in directory Dir. If the file  cannot be\n+   --  locked because someone already owns the lock, this procedure\n+   --  waits Wait seconds and retries at most Retries times. If the file\n+   --  still cannot be locked, Lock_Error is raised. The default is to try\n+   --  every second, almost forever (Natural'Last times).\n+\n+   ------------------\n+   -- Acquire_Lock --\n+   ------------------\n+\n+   procedure Acquire_Lock\n+     (Lock : in out Lock_Type)\n+   is\n+   begin\n+      Lock_File\n+        (Lock_Table (Lock).Dir.all,\n+         Lock_Table (Lock).File.all);\n+   end Acquire_Lock;\n+\n+   -----------------\n+   -- Create_Lock --\n+   -----------------\n+\n+   procedure Create_Lock\n+     (Lock : out Lock_Type;\n+      Name : in String)\n+   is\n+      L : Lock_Type;\n+\n+   begin\n+      TSL.Lock;\n+      Last_Lock := Last_Lock + 1;\n+      L := Last_Lock;\n+      TSL.Unlock;\n+\n+      if L > Lock_Table'Last then\n+         raise Lock_Error;\n+      end if;\n+\n+      for J in reverse Name'Range loop\n+         if Name (J) = Dir_Separator then\n+            Lock_Table (L).Dir\n+              := new String'(Name (Name'First .. J - 1));\n+            Lock_Table (L).File\n+              := new String'(Name (J + 1 .. Name'Last));\n+            exit;\n+         end if;\n+      end loop;\n+\n+      if Lock_Table (L).Dir = null then\n+         Lock_Table (L).Dir  := new String'(\".\");\n+         Lock_Table (L).File := new String'(Name);\n+      end if;\n+\n+      Lock := L;\n+   end Create_Lock;\n+\n+   ---------------\n+   -- Lock_File --\n+   ---------------\n+\n+   procedure Lock_File\n+     (Dir     : String;\n+      File    : String;\n+      Wait    : Duration := 0.1;\n+      Retries : Natural  := Natural'Last)\n+   is\n+      C_Dir  : aliased String := Dir & ASCII.NUL;\n+      C_File : aliased String := File & ASCII.NUL;\n+\n+      function Try_Lock (Dir, File : System.Address) return Integer;\n+      pragma Import (C, Try_Lock, \"__gnat_try_lock\");\n+\n+   begin\n+      for I in 0 .. Retries loop\n+         if Try_Lock (C_Dir'Address, C_File'Address) = 1 then\n+            return;\n+         end if;\n+         exit when I = Retries;\n+         delay Wait;\n+      end loop;\n+      raise Lock_Error;\n+   end Lock_File;\n+\n+   ------------------\n+   -- Release_Lock --\n+   ------------------\n+\n+   procedure Release_Lock\n+     (Lock : in out Lock_Type)\n+   is\n+      S : aliased String :=\n+        Lock_Table (Lock).Dir.all & Dir_Separator &\n+        Lock_Table (Lock).File.all & ASCII.NUL;\n+\n+      procedure unlink (A : System.Address);\n+      pragma Import (C, unlink, \"unlink\");\n+\n+   begin\n+      unlink (S'Address);\n+   end Release_Lock;\n+\n+end System.Global_Locks;"}, {"sha": "3129044bbf94a91dc620397fe25a4f313518faea", "filename": "gcc/ada/s-gloloc.ads", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-gloloc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-gloloc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gloloc.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,69 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                  S Y S T E M . G L O B A L _ L O C K S                   --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.3 $\n+--                                                                          --\n+--           Copyright (C) 1999-2001 Ada Core Technologies, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).   --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+   --  This package contains the necessary routines to provide\n+   --  reliable system wide locking capability.\n+\n+package System.Global_Locks is\n+\n+   Lock_Error : exception;\n+   --  Exception raised if a request cannot be executed on a lock.\n+\n+   type Lock_Type is private;\n+   --  Such a lock is a global lock between partitions. This lock is\n+   --  uniquely defined between the partitions because of its name.\n+\n+   Null_Lock : constant Lock_Type;\n+\n+   procedure Create_Lock\n+     (Lock : out Lock_Type;\n+      Name : in String);\n+   --  Create or retrieve a global lock for the current partition using\n+   --  its Name.\n+\n+   procedure Acquire_Lock\n+     (Lock : in out Lock_Type);\n+   --  If the lock cannot be acquired because someone already owns it, this\n+   --  procedure is supposed to wait and retry forever.\n+\n+   procedure Release_Lock\n+     (Lock : in out Lock_Type);\n+\n+private\n+\n+   type Lock_Type is new Natural;\n+\n+   Null_Lock : constant Lock_Type := 0;\n+\n+end System.Global_Locks;"}, {"sha": "337a4c3baf4594e8e79fe5ad9892c3d6187644b1", "filename": "gcc/ada/s-imgbiu.adb", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgbiu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgbiu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgbiu.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,158 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ B I U                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.6 $                              --\n+--                                                                          --\n+--     Copyright (C) 1992,1993,1994,1995 Free Software Foundation, Inc.     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Unsigned_Types; use System.Unsigned_Types;\n+\n+package body System.Img_BIU is\n+\n+   -----------------------------\n+   -- Set_Image_Based_Integer --\n+   -----------------------------\n+\n+   procedure Set_Image_Based_Integer\n+     (V : Integer;\n+      B : Natural;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      Start : Natural;\n+\n+   begin\n+      --  Positive case can just use the unsigned circuit directly\n+\n+      if V >= 0 then\n+         Set_Image_Based_Unsigned (Unsigned (V), B, W, S, P);\n+\n+      --  Negative case has to set a minus sign. Note also that we have to be\n+      --  careful not to generate overflow with the largest negative number.\n+\n+      else\n+         P := P + 1;\n+         S (P) := ' ';\n+         Start := P;\n+\n+         declare\n+            pragma Suppress (Overflow_Check);\n+            pragma Suppress (Range_Check);\n+         begin\n+            Set_Image_Based_Unsigned (Unsigned (-V), B, W - 1, S, P);\n+         end;\n+\n+         --  Set minus sign in last leading blank location. Because of the\n+         --  code above, there must be at least one such location.\n+\n+         while S (Start + 1) = ' ' loop\n+            Start := Start + 1;\n+         end loop;\n+\n+         S (Start) := '-';\n+      end if;\n+\n+   end Set_Image_Based_Integer;\n+\n+   ------------------------------\n+   -- Set_Image_Based_Unsigned --\n+   ------------------------------\n+\n+   procedure Set_Image_Based_Unsigned\n+     (V : Unsigned;\n+      B : Natural;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      Start : constant Natural := P;\n+      F, T  : Natural;\n+      BU    : constant Unsigned := Unsigned (B);\n+      Hex   : constant array\n+                (Unsigned range 0 .. 15) of Character := \"0123456789ABCDEF\";\n+\n+      procedure Set_Digits (T : Unsigned);\n+      --  Set digits of absolute value of T\n+\n+      procedure Set_Digits (T : Unsigned) is\n+      begin\n+         if T >= BU then\n+            Set_Digits (T / BU);\n+            P := P + 1;\n+            S (P) := Hex (T mod BU);\n+         else\n+            P := P + 1;\n+            S (P) := Hex (T);\n+         end if;\n+      end Set_Digits;\n+\n+   --  Start of processing for Set_Image_Based_Unsigned\n+\n+   begin\n+\n+      if B >= 10 then\n+         P := P + 1;\n+         S (P) := '1';\n+      end if;\n+\n+      P := P + 1;\n+      S (P) := Character'Val (Character'Pos ('0') + B mod 10);\n+\n+      P := P + 1;\n+      S (P) := '#';\n+\n+      Set_Digits (V);\n+\n+      P := P + 1;\n+      S (P) := '#';\n+\n+      --  Add leading spaces if required by width parameter\n+\n+      if P - Start < W then\n+         F := P;\n+         P := Start + W;\n+         T := P;\n+\n+         while F > Start loop\n+            S (T) := S (F);\n+            T := T - 1;\n+            F := F - 1;\n+         end loop;\n+\n+         for J in Start + 1 .. T loop\n+            S (J) := ' ';\n+         end loop;\n+      end if;\n+\n+   end Set_Image_Based_Unsigned;\n+\n+end System.Img_BIU;"}, {"sha": "c01fe7b756c65b30cf42a72a6b361fce970a6e50", "filename": "gcc/ada/s-imgbiu.ads", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgbiu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgbiu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgbiu.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,76 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ B I U                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.6 $\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Contains the routine for computing the image in based format of signed and\n+--  unsigned integers whose size <= Integer'Size for use by Text_IO.Integer_IO\n+--  and Text_IO.Modular_IO.\n+\n+with System.Unsigned_Types;\n+\n+package System.Img_BIU is\n+pragma Pure (Img_BIU);\n+\n+   procedure Set_Image_Based_Integer\n+     (V : Integer;\n+      B : Natural;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the signed image of V in based format, using base value B (2..16)\n+   --  starting at S (P + 1), updating P to point to the last character stored.\n+   --  The image includes a leading minus sign if necessary, but no leading\n+   --  spaces unless W is positive, in which case leading spaces are output if\n+   --  necessary to ensure that the output string is no less than W characters\n+   --  long. The caller promises that the buffer is large enough and no check\n+   --  is made for this. Constraint_Error will not necessarily be raised if\n+   --  this is violated, since it is perfectly valid to compile this unit with\n+   --  checks off.\n+\n+   procedure Set_Image_Based_Unsigned\n+     (V : System.Unsigned_Types.Unsigned;\n+      B : Natural;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the unsigned image of V in based format, using base value B (2..16)\n+   --  starting at S (P + 1), updating P to point to the last character stored.\n+   --  The image includes no leading spaces unless W is positive, in which case\n+   --  leading spaces are output if necessary to ensure that the output string\n+   --  is no less than W characters long. The caller promises that the buffer\n+   --  is large enough and no check is made for this. Constraint_Error will not\n+   --  necessarily be raised if this is violated, since it is perfectly valid\n+   --  to compile this unit with checks off).\n+\n+end System.Img_BIU;"}, {"sha": "0ab8a3004bc1f9783fe739500235aa0a04431f35", "filename": "gcc/ada/s-imgboo.adb", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgboo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgboo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgboo.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . I M G _ B O O L                       --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Img_Bool is\n+\n+   -------------------\n+   -- Image_Boolean --\n+   -------------------\n+\n+   function Image_Boolean (V : Boolean) return String is\n+   begin\n+      if V then\n+         return \"TRUE\";\n+      else\n+         return \"FALSE\";\n+      end if;\n+   end Image_Boolean;\n+\n+end System.Img_Bool;"}, {"sha": "30f03c6240c1c9ee6e4114e270a80b25be431378", "filename": "gcc/ada/s-imgboo.ads", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgboo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgboo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgboo.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,44 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . I M G _ B O O L                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.10 $\n+--                                                                          --\n+--          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Boolean'Image\n+\n+package System.Img_Bool is\n+pragma Pure (Img_Bool);\n+\n+   function Image_Boolean (V : Boolean) return String;\n+   --  Computes Boolean'Image (V) and returns the result.\n+\n+end System.Img_Bool;"}, {"sha": "aab81bc8b42f3a5747ecfd5d8837a7f62f640e28", "filename": "gcc/ada/s-imgcha.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgcha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgcha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgcha.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . I M G _ C H A R                       --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.11 $                             --\n+--                                                                          --\n+--     Copyright (C) 1992,1993,1994,1995 Free Software Foundation, Inc.     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Img_Char is\n+\n+   ---------------------\n+   -- Image_Character --\n+   ---------------------\n+\n+   function Image_Character (V : Character) return String is\n+      subtype Cname is String (1 .. 3);\n+\n+      S : Cname;\n+\n+      subtype C0_Range is Character\n+        range Character'Val (16#00#) .. Character'Val (16#1F#);\n+\n+      C0 : constant array (C0_Range) of Cname :=\n+              (Character'Val (16#00#) => \"NUL\",\n+               Character'Val (16#01#) => \"SOH\",\n+               Character'Val (16#02#) => \"STX\",\n+               Character'Val (16#03#) => \"ETX\",\n+               Character'Val (16#04#) => \"EOT\",\n+               Character'Val (16#05#) => \"ENQ\",\n+               Character'Val (16#06#) => \"ACK\",\n+               Character'Val (16#07#) => \"BEL\",\n+               Character'Val (16#08#) => \"BS \",\n+               Character'Val (16#09#) => \"HT \",\n+               Character'Val (16#0A#) => \"LF \",\n+               Character'Val (16#0B#) => \"VT \",\n+               Character'Val (16#0C#) => \"FF \",\n+               Character'Val (16#0D#) => \"CR \",\n+               Character'Val (16#0E#) => \"SO \",\n+               Character'Val (16#0F#) => \"SI \",\n+               Character'Val (16#10#) => \"DLE\",\n+               Character'Val (16#11#) => \"DC1\",\n+               Character'Val (16#12#) => \"DC2\",\n+               Character'Val (16#13#) => \"DC3\",\n+               Character'Val (16#14#) => \"DC4\",\n+               Character'Val (16#15#) => \"NAK\",\n+               Character'Val (16#16#) => \"SYN\",\n+               Character'Val (16#17#) => \"ETB\",\n+               Character'Val (16#18#) => \"CAN\",\n+               Character'Val (16#19#) => \"EM \",\n+               Character'Val (16#1A#) => \"SUB\",\n+               Character'Val (16#1B#) => \"ESC\",\n+               Character'Val (16#1C#) => \"FS \",\n+               Character'Val (16#1D#) => \"GS \",\n+               Character'Val (16#1E#) => \"RS \",\n+               Character'Val (16#1F#) => \"US \");\n+\n+      subtype C1_Range is Character\n+        range Character'Val (16#7F#) .. Character'Val (16#9F#);\n+\n+      C1 : constant array (C1_Range) of Cname :=\n+              (Character'Val (16#7F#) => \"DEL\",\n+               Character'Val (16#80#) => \"res\",\n+               Character'Val (16#81#) => \"res\",\n+               Character'Val (16#82#) => \"BPH\",\n+               Character'Val (16#83#) => \"NBH\",\n+               Character'Val (16#84#) => \"res\",\n+               Character'Val (16#85#) => \"NEL\",\n+               Character'Val (16#86#) => \"SSA\",\n+               Character'Val (16#87#) => \"ESA\",\n+               Character'Val (16#88#) => \"HTS\",\n+               Character'Val (16#89#) => \"HTJ\",\n+               Character'Val (16#8A#) => \"VTS\",\n+               Character'Val (16#8B#) => \"PLD\",\n+               Character'Val (16#8C#) => \"PLU\",\n+               Character'Val (16#8D#) => \"RI \",\n+               Character'Val (16#8E#) => \"SS2\",\n+               Character'Val (16#8F#) => \"SS3\",\n+               Character'Val (16#90#) => \"DCS\",\n+               Character'Val (16#91#) => \"PU1\",\n+               Character'Val (16#92#) => \"PU2\",\n+               Character'Val (16#93#) => \"STS\",\n+               Character'Val (16#94#) => \"CCH\",\n+               Character'Val (16#95#) => \"MW \",\n+               Character'Val (16#96#) => \"SPA\",\n+               Character'Val (16#97#) => \"EPA\",\n+               Character'Val (16#98#) => \"SOS\",\n+               Character'Val (16#99#) => \"res\",\n+               Character'Val (16#9A#) => \"SCI\",\n+               Character'Val (16#9B#) => \"CSI\",\n+               Character'Val (16#9C#) => \"ST \",\n+               Character'Val (16#9D#) => \"OSC\",\n+               Character'Val (16#9E#) => \"PM \",\n+               Character'Val (16#9F#) => \"APC\");\n+\n+   begin\n+      --  Control characters are represented by their names (RM 3.5(32))\n+\n+      if V in C0_Range then\n+         S := C0 (V);\n+\n+         if S (3) = ' ' then\n+            return S (1 .. 2);\n+         else\n+            return S;\n+         end if;\n+\n+      elsif V in C1_Range then\n+         S := C1 (V);\n+\n+         if S (1) /= 'r' then\n+            if S (3) = ' ' then\n+               return S (1 .. 2);\n+            else\n+               return S;\n+            end if;\n+\n+         --  Special case, res means RESERVED_nnn where nnn is the three digit\n+         --  decimal value corresponding to the code position (more efficient\n+         --  to compute than to store!)\n+\n+         else\n+            declare\n+               VP : constant Natural := Character'Pos (V);\n+               St : String (1 .. 12) := \"RESERVED_xxx\";\n+\n+            begin\n+               St (10) := Character'Val (48 + VP / 100);\n+               St (11) := Character'Val (48 + (VP / 10) mod 10);\n+               St (12) := Character'Val (48 + VP mod 10);\n+               return St;\n+            end;\n+         end if;\n+\n+      --  Normal characters yield the character enlosed in quotes (RM 3.5(32))\n+\n+      else\n+         S (1) := ''';\n+         S (2) := V;\n+         S (3) := ''';\n+         return S;\n+      end if;\n+   end Image_Character;\n+\n+end System.Img_Char;"}, {"sha": "d4639cfd49161ad85a93076e72d4f068a27d9cde", "filename": "gcc/ada/s-imgcha.ads", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgcha.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgcha.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgcha.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,45 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . I M G _ C H A R                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.10 $\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Character'Image\n+\n+package System.Img_Char is\n+pragma Pure (Img_Char);\n+\n+   function Image_Character (V : Character) return String;\n+   --  Computes Character'Image (V) and returns the result\n+\n+\n+end System.Img_Char;"}, {"sha": "0ac4a8bf1cd647316ba5d12a77b3d6b4998cc9be", "filename": "gcc/ada/s-imgdec.adb", "status": "added", "additions": 359, "deletions": 0, "changes": 359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgdec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgdec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgdec.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,359 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                        S Y S T E M . I M G _ D E C                       --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.16 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Img_Int; use System.Img_Int;\n+\n+package body System.Img_Dec is\n+\n+   -------------------\n+   -- Image_Decimal --\n+   -------------------\n+\n+   function Image_Decimal\n+     (V     : Integer;\n+      Scale : Integer)\n+      return  String\n+   is\n+      P : Natural := 0;\n+      S : String (1 .. 64);\n+\n+   begin\n+      Set_Image_Decimal (V, S, P, Scale, 1, Integer'Max (1, Scale), 0);\n+\n+      --  Mess around to make sure we have the objectionable space at the\n+      --  start for positive numbers in accordance with the annoying rules!\n+\n+      if S (1) /= ' ' and then S (1) /= '-' then\n+         S (2 .. P + 1) := S (1 .. P);\n+         S (1) := ' ';\n+         return S (1 .. P + 1);\n+      else\n+         return S (1 .. P);\n+      end if;\n+   end Image_Decimal;\n+\n+   ------------------------\n+   -- Set_Decimal_Digits --\n+   ------------------------\n+\n+   procedure Set_Decimal_Digits\n+     (Digs  : in out String;\n+      NDigs : Natural;\n+      S     : out String;\n+      P     : in out Natural;\n+      Scale : Integer;\n+      Fore  : Natural;\n+      Aft   : Natural;\n+      Exp   : Natural)\n+   is\n+      Minus : constant Boolean := (Digs (1) = '-');\n+      --  Set True if input is negative\n+\n+      Zero : Boolean := (Digs (2) = '0');\n+      --  Set True if input is exactly zero (only case when a leading zero\n+      --  is permitted in the input string given to this procedure). This\n+      --  flag can get set later if rounding causes the value to become zero.\n+\n+      FD : Natural := 2;\n+      --  First digit position of digits remaining to be processed\n+\n+      LD : Natural := NDigs;\n+      --  Last digit position of digits remaining to be processed\n+\n+      ND : Natural := NDigs - 1;\n+      --  Number of digits remaining to be processed (LD - FD + 1)\n+\n+      Digits_Before_Point : Integer := ND - Scale;\n+      --  Number of digits before decimal point in the input value. This\n+      --  value can be negative if the input value is less than 0.1, so\n+      --  it is an indication of the current exponent. Digits_Before_Point\n+      --  is adjusted if the rounding step generates an extra digit.\n+\n+      Digits_After_Point : constant Natural := Integer'Max (1, Aft);\n+      --  Digit positions after decimal point in result string\n+\n+      Expon : Integer;\n+      --  Integer value of exponent\n+\n+      procedure Round (N : Natural);\n+      --  Round the number in Digs. N is the position of the last digit to be\n+      --  retained in the rounded position (rounding is based on Digs (N + 1)\n+      --  FD, LD, ND are reset as necessary if required. Note that if the\n+      --  result value rounds up (e.g. 9.99 => 10.0), an extra digit can be\n+      --  placed in the sign position as a result of the rounding, this is\n+      --  the case in which FD is adjusted.\n+\n+      procedure Set (C : Character);\n+      pragma Inline (Set);\n+      --  Sets character C in output buffer\n+\n+      procedure Set_Blanks_And_Sign (N : Integer);\n+      --  Sets leading blanks and minus sign if needed. N is the number of\n+      --  positions to be filled (a minus sign is output even if N is zero\n+      --  or negative, For a positive value, if N is non-positive, then\n+      --  a leading blank is filled.\n+\n+      procedure Set_Digits (S, E : Natural);\n+      pragma Inline (Set_Digits);\n+      --  Set digits S through E from Digs, no effect if S > E\n+\n+      procedure Set_Zeroes (N : Integer);\n+      pragma Inline (Set_Zeroes);\n+      --  Set N zeroes, no effect if N is negative\n+\n+      procedure Round (N : Natural) is\n+         D : Character;\n+\n+      begin\n+         --  Nothing to do if rounding at or past last digit\n+\n+         if N >= LD then\n+            return;\n+\n+         --  Cases of rounding before the initial digit\n+\n+         elsif N < FD then\n+\n+            --  The result is zero, unless we are rounding just before\n+            --  the first digit, and the first digit is five or more.\n+\n+            if N = 1 and then Digs (2) >= '5' then\n+               Digs (1) := '1';\n+            else\n+               Digs (1) := '0';\n+               Zero := True;\n+            end if;\n+\n+            Digits_Before_Point := Digits_Before_Point + 1;\n+            FD := 1;\n+            LD := 1;\n+            ND := 1;\n+\n+         --  Normal case of rounding an existing digit\n+\n+         else\n+            LD := N;\n+            ND := LD - 1;\n+\n+            if Digs (N + 1) >= '5' then\n+               for J in reverse 2 .. N loop\n+                  D := Character'Succ (Digs (J));\n+\n+                  if D <= '9' then\n+                     Digs (J) := D;\n+                     return;\n+                  else\n+                     Digs (J) := '0';\n+                  end if;\n+               end loop;\n+\n+               --  Here the rounding overflows into the sign position. That's\n+               --  OK, because we already captured the value of the sign and\n+               --  we are in any case destroying the value in the Digs buffer\n+\n+               Digs (1) := '1';\n+               FD := 1;\n+               ND := ND + 1;\n+               Digits_Before_Point := Digits_Before_Point + 1;\n+            end if;\n+         end if;\n+      end Round;\n+\n+      procedure Set (C : Character) is\n+      begin\n+         P := P + 1;\n+         S (P) := C;\n+      end Set;\n+\n+      procedure Set_Blanks_And_Sign (N : Integer) is\n+         W : Integer := N;\n+\n+      begin\n+         if Minus then\n+            W := W - 1;\n+\n+            for J in 1 .. W loop\n+               Set (' ');\n+            end loop;\n+\n+            Set ('-');\n+\n+         else\n+            for J in 1 .. W loop\n+               Set (' ');\n+            end loop;\n+         end if;\n+      end Set_Blanks_And_Sign;\n+\n+      procedure Set_Digits (S, E : Natural) is\n+      begin\n+         for J in S .. E loop\n+            Set (Digs (J));\n+         end loop;\n+      end Set_Digits;\n+\n+      procedure Set_Zeroes (N : Integer) is\n+      begin\n+         for J in 1 .. N loop\n+            Set ('0');\n+         end loop;\n+      end Set_Zeroes;\n+\n+   --  Start of processing for Set_Decimal_Digits\n+\n+   begin\n+      --  Case of exponent given\n+\n+      if Exp > 0 then\n+         Set_Blanks_And_Sign (Fore - 1);\n+         Round (Aft + 2);\n+         Set (Digs (FD));\n+         FD := FD + 1;\n+         ND := ND - 1;\n+         Set ('.');\n+\n+         if ND >= Digits_After_Point then\n+            Set_Digits (FD, FD + Digits_After_Point - 1);\n+\n+         else\n+            Set_Digits (FD, LD);\n+            Set_Zeroes (Digits_After_Point - ND);\n+         end if;\n+\n+         --  Calculate exponent. The number of digits before the decimal point\n+         --  in the input is Digits_Before_Point, and the number of digits\n+         --  before the decimal point in the output is 1, so we can get the\n+         --  exponent as the difference between these two values. The one\n+         --  exception is for the value zero, which by convention has an\n+         --  exponent of +0.\n+\n+         if Zero then\n+            Expon := 0;\n+         else\n+            Expon := Digits_Before_Point - 1;\n+         end if;\n+\n+         Set ('E');\n+         ND := 0;\n+\n+         if Expon >= 0 then\n+            Set ('+');\n+            Set_Image_Integer (Expon, Digs, ND);\n+         else\n+            Set ('-');\n+            Set_Image_Integer (-Expon, Digs, ND);\n+         end if;\n+\n+         Set_Zeroes (Exp - ND - 1);\n+         Set_Digits (1, ND);\n+         return;\n+\n+      --  Case of no exponent given. To make these cases clear, we use\n+      --  examples. For all the examples, we assume Fore = 2, Aft = 3.\n+      --  A P in the example input string is an implied zero position,\n+      --  not included in the input string.\n+\n+      else\n+         --  Round at correct position\n+         --    Input: 4PP      => unchanged\n+         --    Input: 400.03   => unchanged\n+         --    Input  3.4567   => 3.457\n+         --    Input: 9.9999   => 10.000\n+         --    Input: 0.PPP5   => 0.001\n+         --    Input: 0.PPP4   => 0\n+         --    Input: 0.00003  => 0\n+\n+         Round (LD - (Scale - Digits_After_Point));\n+\n+         --  No digits before point in input\n+         --    Input: .123   Output: 0.123\n+         --    Input: .PP3   Output: 0.003\n+\n+         if Digits_Before_Point <= 0 then\n+            Set_Blanks_And_Sign (Fore - 1);\n+            Set ('0');\n+            Set ('.');\n+\n+            Set_Zeroes (Digits_After_Point - ND);\n+            Set_Digits (FD, LD);\n+\n+         --  At least one digit before point in input\n+\n+         else\n+            Set_Blanks_And_Sign (Fore - Digits_Before_Point);\n+\n+            --  Less digits in input than are needed before point\n+            --    Input: 1PP  Output: 100.000\n+\n+            if ND < Digits_Before_Point then\n+               Set_Digits (FD, LD);\n+               Set_Zeroes (Digits_Before_Point - ND);\n+               Set ('.');\n+               Set_Zeroes (Digits_After_Point);\n+\n+            --  Input has full amount of digits before decimal point\n+\n+            else\n+               Set_Digits (FD, FD + Digits_Before_Point - 1);\n+               Set ('.');\n+               Set_Digits (FD + Digits_Before_Point, LD);\n+               Set_Zeroes (Digits_After_Point - (ND - Digits_Before_Point));\n+            end if;\n+         end if;\n+      end if;\n+\n+   end Set_Decimal_Digits;\n+\n+   -----------------------\n+   -- Set_Image_Decimal --\n+   -----------------------\n+\n+   procedure Set_Image_Decimal\n+     (V     : Integer;\n+      S     : out String;\n+      P     : in out Natural;\n+      Scale : Integer;\n+      Fore  : Natural;\n+      Aft   : Natural;\n+      Exp   : Natural)\n+   is\n+      Digs : String := Image_Integer (V);\n+      --  Sign and digits of decimal value\n+\n+   begin\n+      Set_Decimal_Digits (Digs, Digs'Length, S, P, Scale, Fore, Aft, Exp);\n+   end Set_Image_Decimal;\n+\n+end System.Img_Dec;"}, {"sha": "19cc702ed2ed025f77cd46d96d97b29340f38017", "filename": "gcc/ada/s-imgdec.ads", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgdec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgdec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgdec.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,83 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ D E C                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.6 $\n+--                                                                          --\n+--          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Image for decimal fixed types where the size of the corresponding integer\n+--  type does not exceed Integer'Size (also used for Text_IO.Decimal_IO output)\n+\n+package System.Img_Dec is\n+pragma Preelaborate (Img_Dec);\n+\n+   function Image_Decimal\n+     (V     : Integer;\n+      Scale : Integer)\n+      return  String;\n+   --  Compute 'Image of V, the integer value (in units of delta) of a decimal\n+   --  type whose Scale is as given and return the result. THe image is given\n+   --  by the rules in RM 3.5(34) for fixed-point type image functions.\n+\n+   procedure Set_Image_Decimal\n+     (V     : Integer;\n+      S     : out String;\n+      P     : in out Natural;\n+      Scale : Integer;\n+      Fore  : Natural;\n+      Aft   : Natural;\n+      Exp   : Natural);\n+   --  Sets the image of V, where V is the integer value (in units of delta)\n+   --  of a decimal type with the given Scale, starting at S (P + 1), updating\n+   --  P to point to the last character stored, the caller promises that the\n+   --  buffer is large enough and no check is made for this. Constraint_Error\n+   --  will not necessarily be raised if this requirement is violated, since\n+   --  it is perfectly valid to compile this unit with checks off. The Fore,\n+   --  Aft and Exp values can be set to any valid values for the case of use\n+   --  by Text_IO.Decimal_IO.\n+\n+   procedure Set_Decimal_Digits\n+     (Digs  : in out String;\n+      NDigs : Natural;\n+      S     : out String;\n+      P     : in out Natural;\n+      Scale : Integer;\n+      Fore  : Natural;\n+      Aft   : Natural;\n+      Exp   : Natural);\n+   --  This procedure has the same semantics as Set_Image_Decimal, except that\n+   --  the value in Digs (1 .. NDigs) is given as a string of decimal digits\n+   --  preceded by either a minus sign or a space (i.e. the integer image of\n+   --  the value in units of delta). The call may destroy the value in Digs,\n+   --  which is why Digs is in-out (this happens if rounding is required).\n+   --  Set_Decimal_Digits is shared by all the decimal image routines.\n+\n+end System.Img_Dec;"}, {"sha": "24d0a29af5e8f097b089d9d66148e4f70c45fb62", "filename": "gcc/ada/s-imgenu.adb", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgenu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgenu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgenu.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,130 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . I M G _ E N U M                       --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--            Copyright (C) 2000 Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Unchecked_Conversion;\n+\n+package body System.Img_Enum is\n+\n+   -------------------------\n+   -- Image_Enumeration_8 --\n+   -------------------------\n+\n+   function Image_Enumeration_8\n+     (Pos     : Natural;\n+      Names   : String;\n+      Indexes : System.Address)\n+      return    String\n+   is\n+      type Natural_8 is range 0 .. 2 ** 7 - 1;\n+      type Index_Table is array (Natural) of Natural_8;\n+      type Index_Table_Ptr is access Index_Table;\n+\n+      function To_Index_Table_Ptr is\n+        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+\n+      IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n+\n+      Start : Natural := Natural (IndexesT (Pos));\n+      Next  : Natural := Natural (IndexesT (Pos + 1));\n+\n+      subtype Result_Type is String (1 .. Next - Start);\n+      --  We need this result type to force the result to have the\n+      --  required lower bound of 1, rather than the slice bounds.\n+\n+   begin\n+      return Result_Type (Names (Start .. Next - 1));\n+   end Image_Enumeration_8;\n+\n+   --------------------------\n+   -- Image_Enumeration_16 --\n+   --------------------------\n+\n+   function Image_Enumeration_16\n+     (Pos     : Natural;\n+      Names   : String;\n+      Indexes : System.Address)\n+      return    String\n+   is\n+      type Natural_16 is range 0 .. 2 ** 15 - 1;\n+      type Index_Table is array (Natural) of Natural_16;\n+      type Index_Table_Ptr is access Index_Table;\n+\n+      function To_Index_Table_Ptr is\n+        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+\n+      IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n+\n+      Start : Natural := Natural (IndexesT (Pos));\n+      Next  : Natural := Natural (IndexesT (Pos + 1));\n+\n+      subtype Result_Type is String (1 .. Next - Start);\n+      --  We need this result type to force the result to have the\n+      --  required lower bound of 1, rather than the slice bounds.\n+\n+   begin\n+      return Result_Type (Names (Start .. Next - 1));\n+   end Image_Enumeration_16;\n+\n+   --------------------------\n+   -- Image_Enumeration_32 --\n+   --------------------------\n+\n+   function Image_Enumeration_32\n+     (Pos     : Natural;\n+      Names   : String;\n+      Indexes : System.Address)\n+      return    String\n+   is\n+      type Natural_32 is range 0 .. 2 ** 31 - 1;\n+      type Index_Table is array (Natural) of Natural_32;\n+      type Index_Table_Ptr is access Index_Table;\n+\n+      function To_Index_Table_Ptr is\n+        new Unchecked_Conversion (System.Address, Index_Table_Ptr);\n+\n+      IndexesT : constant Index_Table_Ptr := To_Index_Table_Ptr (Indexes);\n+\n+      Start : Natural := Natural (IndexesT (Pos));\n+      Next  : Natural := Natural (IndexesT (Pos + 1));\n+\n+      subtype Result_Type is String (1 .. Next - Start);\n+      --  We need this result type to force the result to have the\n+      --  required lower bound of 1, rather than the slice bounds.\n+\n+   begin\n+      return Result_Type (Names (Start .. Next - 1));\n+   end Image_Enumeration_32;\n+\n+end System.Img_Enum;"}, {"sha": "641fbeabf4e0f227a86ff5b09b2a591f6fb8d2e2", "filename": "gcc/ada/s-imgenu.ads", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgenu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgenu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgenu.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,78 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . I M G _ E N U M                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--            Copyright (C) 2000 Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Enumeration_Type'Image for all enumeration types except those in package\n+--  Standard (where we have no opportunity to build image tables), and in\n+--  package System (where it is too early to start building image tables).\n+--  Special routines exist for the enumeration routines in these packages.\n+\n+package System.Img_Enum is\n+pragma Pure (Img_Enum);\n+\n+   function Image_Enumeration_8\n+     (Pos     : Natural;\n+      Names   : String;\n+      Indexes : System.Address)\n+      return    String;\n+   --  Used to compute Enum'Image (Str) where Enum is some enumeration type\n+   --  other than those defined in package Standard. Names is a string with\n+   --  a lower bound of 1 containing the characters of all the enumeration\n+   --  literals concatenated together in sequence. Indexes is the address\n+   --  of an array of type array (0 .. N) of Natural_8, where N is the\n+   --  is the number of enumeration literals in the type. The Indexes values\n+   --  are the starting subscript of each enumeration literal, indexed by Pos\n+   --  values, with an extra entry at the end containing Names'Length + 1.\n+   --  The reason that Indexes is passed by address is that the actual type\n+   --  is created on the fly by the expander. The value returned is the\n+   --  desired 'Image value.\n+\n+   function Image_Enumeration_16\n+     (Pos     : Natural;\n+      Names   : String;\n+      Indexes : System.Address)\n+      return    String;\n+   --  Identical to Image_Enumeration_8 except that it handles types\n+   --  using array (0 .. Num) of Natural_16 for the Indexes table.\n+\n+   function Image_Enumeration_32\n+     (Pos     : Natural;\n+      Names   : String;\n+      Indexes : System.Address)\n+      return    String;\n+   --  Identical to Image_Enumeration_8 except that it handles types\n+   --  using array (0 .. Num) of Natural_32 for the Indexes table.\n+\n+\n+end System.Img_Enum;"}, {"sha": "445f11fdf0613e3889902a1fe1803668be6e0886", "filename": "gcc/ada/s-imgint.adb", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgint.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,98 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ I N T                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.13 $                             --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Img_Int is\n+\n+   -------------------\n+   -- Image_Integer --\n+   -------------------\n+\n+   function Image_Integer (V : Integer) return String is\n+      P : Natural;\n+      S : String (1 .. Integer'Width);\n+\n+   begin\n+      if V >= 0 then\n+         P := 1;\n+         S (P) := ' ';\n+      else\n+         P := 0;\n+      end if;\n+\n+      Set_Image_Integer (V, S, P);\n+      return S (1 .. P);\n+   end Image_Integer;\n+\n+   -----------------------\n+   -- Set_Image_Integer --\n+   -----------------------\n+\n+   procedure Set_Image_Integer\n+     (V  : Integer;\n+      S  : out String;\n+      P  : in out Natural)\n+   is\n+      procedure Set_Digits (T : Integer);\n+      --  Set digits of absolute value of T, which is zero or negative. We work\n+      --  with the negative of the value so that the largest negative number is\n+      --  not a special case.\n+\n+      procedure Set_Digits (T : Integer) is\n+      begin\n+         if T <= -10 then\n+            Set_Digits (T / 10);\n+            P := P + 1;\n+            S (P) := Character'Val (48 - (T rem 10));\n+\n+         else\n+            P := P + 1;\n+            S (P) := Character'Val (48 - T);\n+         end if;\n+      end Set_Digits;\n+\n+   --  Start of processing for Set_Image_Integer\n+\n+   begin\n+      if V >= 0 then\n+         Set_Digits (-V);\n+\n+      else\n+         P := P + 1;\n+         S (P) := '-';\n+         Set_Digits (V);\n+      end if;\n+   end Set_Image_Integer;\n+\n+end System.Img_Int;"}, {"sha": "5804310d458cb79f2fa8ed7e4713f2bf79280ad7", "filename": "gcc/ada/s-imgint.ads", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgint.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,57 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ I N T                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.12 $\n+--                                                                          --\n+--          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the routines for supporting the Image attribute for\n+--  signed integer types up to Size Integer'Size, and also for conversion\n+--  operations required in Text_IO.Integer_IO for such types.\n+\n+package System.Img_Int is\n+pragma Pure (Img_Int);\n+\n+   function Image_Integer (V : Integer) return String;\n+   --  Computes Integer'Image (V) and returns the result\n+\n+   procedure Set_Image_Integer\n+     (V : Integer;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the image of V starting at S (P + 1) with no leading spaces (i.e.\n+   --  Text_IO format where Width = 0), starting at S (P + 1), updating P\n+   --  to point to the last character stored. The caller promises that the\n+   --  buffer is large enough and no check is made for this (Constraint_Error\n+   --  will not be necessarily raised if this is violated since it is perfectly\n+   --  valid to compile this unit with checks off).\n+\n+end System.Img_Int;"}, {"sha": "c4c419fc9fef661b3974ce37933d04b64017e16a", "filename": "gcc/ada/s-imgllb.adb", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllb.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,161 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ L L B                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.6 $                              --\n+--                                                                          --\n+--     Copyright (C) 1992,1993,1994,1995 Free Software Foundation, Inc.     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Unsigned_Types; use System.Unsigned_Types;\n+\n+package body System.Img_LLB is\n+\n+   ---------------------------------------\n+   -- Set_Image_Based_Long_Long_Integer --\n+   ---------------------------------------\n+\n+   procedure Set_Image_Based_Long_Long_Integer\n+     (V : Long_Long_Integer;\n+      B : Natural;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      Start : Natural;\n+\n+   begin\n+      --  Positive case can just use the unsigned circuit directly\n+\n+      if V >= 0 then\n+         Set_Image_Based_Long_Long_Unsigned\n+           (Long_Long_Unsigned (V), B, W, S, P);\n+\n+      --  Negative case has to set a minus sign. Note also that we have to be\n+      --  careful not to generate overflow with the largest negative number.\n+\n+      else\n+         P := P + 1;\n+         S (P) := ' ';\n+         Start := P;\n+\n+         declare\n+            pragma Suppress (Overflow_Check);\n+            pragma Suppress (Range_Check);\n+         begin\n+            Set_Image_Based_Long_Long_Unsigned\n+              (Long_Long_Unsigned (-V), B, W - 1, S, P);\n+         end;\n+\n+         --  Set minus sign in last leading blank location. Because of the\n+         --  code above, there must be at least one such location.\n+\n+         while S (Start + 1) = ' ' loop\n+            Start := Start + 1;\n+         end loop;\n+\n+         S (Start) := '-';\n+      end if;\n+\n+   end Set_Image_Based_Long_Long_Integer;\n+\n+   ----------------------------------------\n+   -- Set_Image_Based_Long_Long_Unsigned --\n+   ----------------------------------------\n+\n+   procedure Set_Image_Based_Long_Long_Unsigned\n+     (V : Long_Long_Unsigned;\n+      B : Natural;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      Start : constant Natural := P;\n+      F, T  : Natural;\n+      BU    : constant Long_Long_Unsigned := Long_Long_Unsigned (B);\n+      Hex   : constant array\n+                (Long_Long_Unsigned range 0 .. 15) of Character :=\n+                                                         \"0123456789ABCDEF\";\n+\n+      procedure Set_Digits (T : Long_Long_Unsigned);\n+      --  Set digits of absolute value of T\n+\n+      procedure Set_Digits (T : Long_Long_Unsigned) is\n+      begin\n+         if T >= BU then\n+            Set_Digits (T / BU);\n+            P := P + 1;\n+            S (P) := Hex (T mod BU);\n+         else\n+            P := P + 1;\n+            S (P) := Hex (T);\n+         end if;\n+      end Set_Digits;\n+\n+   --  Start of processing for Set_Image_Based_Long_Long_Unsigned\n+\n+   begin\n+\n+      if B >= 10 then\n+         P := P + 1;\n+         S (P) := '1';\n+      end if;\n+\n+      P := P + 1;\n+      S (P) := Character'Val (Character'Pos ('0') + B mod 10);\n+\n+      P := P + 1;\n+      S (P) := '#';\n+\n+      Set_Digits (V);\n+\n+      P := P + 1;\n+      S (P) := '#';\n+\n+      --  Add leading spaces if required by width parameter\n+\n+      if P - Start < W then\n+         F := P;\n+         P := Start + W;\n+         T := P;\n+\n+         while F > Start loop\n+            S (T) := S (F);\n+            T := T - 1;\n+            F := F - 1;\n+         end loop;\n+\n+         for J in Start + 1 .. T loop\n+            S (J) := ' ';\n+         end loop;\n+      end if;\n+\n+   end Set_Image_Based_Long_Long_Unsigned;\n+\n+end System.Img_LLB;"}, {"sha": "5a83513c717e948350b10b49d59113cf6cfb3bb2", "filename": "gcc/ada/s-imgllb.ads", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllb.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,76 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ L L B                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Contains the routine for computing the image in based format of signed and\n+--  unsigned integers whose size > Integer'Size for use by Text_IO.Integer_IO\n+--  and Text_IO.Modular_IO.\n+\n+with System.Unsigned_Types;\n+\n+package System.Img_LLB is\n+pragma Preelaborate (Img_LLB);\n+\n+   procedure Set_Image_Based_Long_Long_Integer\n+     (V : Long_Long_Integer;\n+      B : Natural;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the signed image of V in based format, using base value B (2..16)\n+   --  starting at S (P + 1), updating P to point to the last character stored.\n+   --  The image includes a leading minus sign if necessary, but no leading\n+   --  spaces unless W is positive, in which case leading spaces are output if\n+   --  necessary to ensure that the output string is no less than W characters\n+   --  long. The caller promises that the buffer is large enough and no check\n+   --  is made for this. Constraint_Error will not necessarily be raised if\n+   --  this is violated, since it is perfectly valid to compile this unit with\n+   --  checks off.\n+\n+   procedure Set_Image_Based_Long_Long_Unsigned\n+     (V : System.Unsigned_Types.Long_Long_Unsigned;\n+      B : Natural;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the unsigned image of V in based format, using base value B (2..16)\n+   --  starting at S (P + 1), updating P to point to the last character stored.\n+   --  The image includes no leading spaces unless W is positive, in which case\n+   --  leading spaces are output if necessary to ensure that the output string\n+   --  is no less than W characters long. The caller promises that the buffer\n+   --  is large enough and no check is made for this. Constraint_Error will not\n+   --  necessarily be raised if this is violated, since it is perfectly valid\n+   --  to compile this unit with checks off).\n+\n+end System.Img_LLB;"}, {"sha": "688c87c077026ba879de48b08e7f3ab11f32a7e7", "filename": "gcc/ada/s-imglld.adb", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imglld.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imglld.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imglld.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,89 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ L L D                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.7 $                              --\n+--                                                                          --\n+--   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Img_Dec; use System.Img_Dec;\n+with System.Img_LLI; use System.Img_LLI;\n+\n+package body System.Img_LLD is\n+\n+   -----------------------------\n+   -- Image_Long_Long_Decimal --\n+   -----------------------------\n+\n+   function Image_Long_Long_Decimal\n+     (V     : Long_Long_Integer;\n+      Scale : Integer)\n+      return  String\n+   is\n+      P : Natural := 0;\n+      S : String (1 .. 64);\n+\n+   begin\n+      Set_Image_Long_Long_Decimal\n+        (V, S, P, Scale, 1, Integer'Max (1, Scale), 0);\n+\n+      --  Mess around to make sure we have the objectionable space at the\n+      --  start for positive numbers in accordance with the annoying rules!\n+\n+      if S (1) /= ' ' and then S (1) /= '-' then\n+         S (2 .. P + 1) := S (1 .. P);\n+         S (1) := ' ';\n+         return S (1 .. P + 1);\n+      else\n+         return S (1 .. P);\n+      end if;\n+   end Image_Long_Long_Decimal;\n+\n+   ---------------------------------\n+   -- Set_Image_Long_Long_Decimal --\n+   ---------------------------------\n+\n+   procedure Set_Image_Long_Long_Decimal\n+     (V     : Long_Long_Integer;\n+      S     : out String;\n+      P     : in out Natural;\n+      Scale : Integer;\n+      Fore  : Natural;\n+      Aft   : Natural;\n+      Exp   : Natural)\n+   is\n+      Digs : String := Image_Long_Long_Integer (V);\n+      --  Sign and digits of decimal value\n+\n+   begin\n+      Set_Decimal_Digits (Digs, Digs'Length, S, P, Scale, Fore, Aft, Exp);\n+   end Set_Image_Long_Long_Decimal;\n+\n+end System.Img_LLD;"}, {"sha": "0582e07c2d0fa70dbc9886cb6d1e02e0bf6e0ce2", "filename": "gcc/ada/s-imglld.ads", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imglld.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imglld.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imglld.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,67 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ L L D                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Image for decimal fixed types where the size of the corresponding integer\n+--  type does exceeds Integer'Size (also used for Text_IO.Decimal_IO output)\n+\n+package System.Img_LLD is\n+pragma Preelaborate (Img_LLD);\n+\n+   function Image_Long_Long_Decimal\n+     (V     : Long_Long_Integer;\n+      Scale : Integer)\n+      return  String;\n+   --  Compute 'Image of V, the integer value (in units of delta) of a decimal\n+   --  type whose Scale is as given and returns the result. The image is given\n+   --  by the rules in RM 3.5(34) for fixed-point type image functions.\n+\n+   procedure Set_Image_Long_Long_Decimal\n+     (V     : Long_Long_Integer;\n+      S     : out String;\n+      P     : in out Natural;\n+      Scale : Integer;\n+      Fore  : Natural;\n+      Aft   : Natural;\n+      Exp   : Natural);\n+   --  Sets the image of V, where V is the integer value (in units of delta)\n+   --  of a decimal type with the given Scale, starting at S (P + 1), updating\n+   --  P to point to the last character stored, the caller promises that the\n+   --  buffer is large enough and no check is made for this. Constraint_Error\n+   --  will not necessarily be raised if this requirement is violated, since\n+   --  it is perfectly valid to compile this unit with checks off. The Fore,\n+   --  Aft and Exp values can be set to any valid values for the case of use\n+   --  by Text_IO.Decimal_IO.\n+\n+end System.Img_LLD;"}, {"sha": "571110c6735b57bff074fbe14b3115470e65f46a", "filename": "gcc/ada/s-imglli.adb", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imglli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imglli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imglli.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,99 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ L L I                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.12 $                             --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Img_LLI is\n+\n+   -----------------------------\n+   -- Image_Long_Long_Integer --\n+   -----------------------------\n+\n+   function Image_Long_Long_Integer (V : Long_Long_Integer) return String is\n+      P : Natural;\n+      S : String (1 .. Long_Long_Integer'Width);\n+\n+   begin\n+      if V >= 0 then\n+         P := 1;\n+         S (P) := ' ';\n+      else\n+         P := 0;\n+      end if;\n+\n+      Set_Image_Long_Long_Integer (V, S, P);\n+      return S (1 .. P);\n+   end Image_Long_Long_Integer;\n+\n+   ---------------------------------\n+   -- Set_Image_Long_Long_Integer --\n+   ---------------------------------\n+\n+   procedure Set_Image_Long_Long_Integer\n+     (V : Long_Long_Integer;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      procedure Set_Digits (T : Long_Long_Integer);\n+      --  Set digits of absolute value of T, which is zero or negative. We work\n+      --  with the negative of the value so that the largest negative number is\n+      --  not a special case.\n+\n+      procedure Set_Digits (T : Long_Long_Integer) is\n+      begin\n+         if T <= -10 then\n+            Set_Digits (T / 10);\n+            P := P + 1;\n+            S (P) := Character'Val (48 - (T rem 10));\n+\n+         else\n+            P := P + 1;\n+            S (P) := Character'Val (48 - T);\n+         end if;\n+      end Set_Digits;\n+\n+   --  Start of processing for Set_Image_Long_Long_Integer\n+\n+   begin\n+      if V >= 0 then\n+         Set_Digits (-V);\n+\n+      else\n+         P := P + 1;\n+         S (P) := '-';\n+         Set_Digits (V);\n+      end if;\n+\n+   end Set_Image_Long_Long_Integer;\n+\n+end System.Img_LLI;"}, {"sha": "b927c635a10d9d1a789fa052ea1d7f5db0f58418", "filename": "gcc/ada/s-imglli.ads", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imglli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imglli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imglli.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,57 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ L L I                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.10 $\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the routines for supporting the Image attribute for\n+--  signed integer types larger than Size Integer'Size, and also for conversion\n+--  operations required in Text_IO.Integer_IO for such types.\n+\n+package System.Img_LLI is\n+pragma Preelaborate (Img_LLI);\n+\n+   function Image_Long_Long_Integer (V : Long_Long_Integer) return String;\n+   --  Computes Long_Long_Integer'Image (V) and returns the result.\n+\n+   procedure Set_Image_Long_Long_Integer\n+     (V : Long_Long_Integer;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the image of V starting at S (P + 1) with no leading spaces (i.e.\n+   --  Text_IO format where Width = 0), starting at S (P + 1), updating P\n+   --  to point to the last character stored. The caller promises that the\n+   --  buffer is large enough and no check is made for this (Constraint_Error\n+   --  will not be necessarily raised if this is violated since it is perfectly\n+   --  valid to compile this unit with checks off).\n+\n+end System.Img_LLI;"}, {"sha": "e5d1d487a87d4c046d1319a0c08a3fd432899376", "filename": "gcc/ada/s-imgllu.adb", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllu.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,90 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ L L U                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.8 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Unsigned_Types; use System.Unsigned_Types;\n+\n+package body System.Img_LLU is\n+\n+   ------------------------------\n+   -- Image_Long_Long_Unsigned --\n+   ------------------------------\n+\n+   function Image_Long_Long_Unsigned\n+     (V    : Long_Long_Unsigned)\n+      return String\n+   is\n+      P : Natural;\n+      S : String (1 .. Long_Long_Unsigned'Width);\n+\n+   begin\n+      P := 1;\n+      S (P) := ' ';\n+      Set_Image_Long_Long_Unsigned (V, S, P);\n+      return S (1 .. P);\n+   end Image_Long_Long_Unsigned;\n+\n+   -----------------------\n+   -- Set_Image_Long_Long_Unsigned --\n+   -----------------------\n+\n+   procedure Set_Image_Long_Long_Unsigned\n+     (V : Long_Long_Unsigned;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      procedure Set_Digits (T : Long_Long_Unsigned);\n+      --  Set digits of absolute value of T\n+\n+      procedure Set_Digits (T : Long_Long_Unsigned) is\n+      begin\n+         if T >= 10 then\n+            Set_Digits (T / 10);\n+            P := P + 1;\n+            S (P) := Character'Val (48 + (T rem 10));\n+\n+         else\n+            P := P + 1;\n+            S (P) := Character'Val (48 + T);\n+         end if;\n+      end Set_Digits;\n+\n+   --  Start of processing for Set_Image_Long_Long_Unsigned\n+\n+   begin\n+      Set_Digits (V);\n+\n+   end Set_Image_Long_Long_Unsigned;\n+\n+end System.Img_LLU;"}, {"sha": "fed63e50c52601003d84a5087fd4126e680076a7", "filename": "gcc/ada/s-imgllu.ads", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllu.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,61 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ L L U                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.8 $\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the routines for supporting the Image attribute for\n+--  unsigned (modular) integer types larger than Size Unsigned'Size, and also\n+--  for conversion operations required in Text_IO.Modular_IO for such types.\n+\n+with System.Unsigned_Types;\n+\n+package System.Img_LLU is\n+pragma Pure (Img_LLU);\n+\n+   function Image_Long_Long_Unsigned\n+     (V :    System.Unsigned_Types.Long_Long_Unsigned)\n+      return String;\n+   --  Computes Long_Long_Unsigned'Image (V) and returns the result.\n+\n+   procedure Set_Image_Long_Long_Unsigned\n+     (V : System.Unsigned_Types.Long_Long_Unsigned;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the image of V starting at S (P + 1) with no leading spaces (i.e.\n+   --  Text_IO format where Width = 0), starting at S (P + 1), updating P\n+   --  to point to the last character stored. The caller promises that the\n+   --  buffer is large enough and no check is made for this (Constraint_Error\n+   --  will not be necessarily raised if this is violated since it is perfectly\n+   --  valid to compile this unit with checks off).\n+\n+end System.Img_LLU;"}, {"sha": "897960228542fcd1231f7bd4b9341d1fa44b56bc", "filename": "gcc/ada/s-imgllw.adb", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllw.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,140 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ L L W                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $                              --\n+--                                                                          --\n+--     Copyright (C) 1992,1993,1994,1995 Free Software Foundation, Inc.     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Unsigned_Types; use System.Unsigned_Types;\n+\n+package body System.Img_LLW is\n+\n+   ---------------------------------------\n+   -- Set_Image_Width_Long_Long_Integer --\n+   ---------------------------------------\n+\n+   procedure Set_Image_Width_Long_Long_Integer\n+     (V : Long_Long_Integer;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      Start : Natural;\n+\n+   begin\n+      --  Positive case can just use the unsigned circuit directly\n+\n+      if V >= 0 then\n+         Set_Image_Width_Long_Long_Unsigned\n+           (Long_Long_Unsigned (V), W, S, P);\n+\n+      --  Negative case has to set a minus sign. Note also that we have to be\n+      --  careful not to generate overflow with the largest negative number.\n+\n+      else\n+         P := P + 1;\n+         S (P) := ' ';\n+         Start := P;\n+\n+         declare\n+            pragma Suppress (Overflow_Check);\n+            pragma Suppress (Range_Check);\n+         begin\n+            Set_Image_Width_Long_Long_Unsigned\n+              (Long_Long_Unsigned (-V), W - 1, S, P);\n+         end;\n+\n+         --  Set minus sign in last leading blank location. Because of the\n+         --  code above, there must be at least one such location.\n+\n+         while S (Start + 1) = ' ' loop\n+            Start := Start + 1;\n+         end loop;\n+\n+         S (Start) := '-';\n+      end if;\n+\n+   end Set_Image_Width_Long_Long_Integer;\n+\n+   ----------------------------------------\n+   -- Set_Image_Width_Long_Long_Unsigned --\n+   ----------------------------------------\n+\n+   procedure Set_Image_Width_Long_Long_Unsigned\n+     (V : Long_Long_Unsigned;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      Start : constant Natural := P;\n+      F, T  : Natural;\n+\n+      procedure Set_Digits (T : Long_Long_Unsigned);\n+      --  Set digits of absolute value of T\n+\n+      procedure Set_Digits (T : Long_Long_Unsigned) is\n+      begin\n+         if T >= 10 then\n+            Set_Digits (T / 10);\n+            P := P + 1;\n+            S (P) := Character'Val (T mod 10 + Character'Pos ('0'));\n+         else\n+            P := P + 1;\n+            S (P) := Character'Val (T + Character'Pos ('0'));\n+         end if;\n+      end Set_Digits;\n+\n+   --  Start of processing for Set_Image_Width_Long_Long_Unsigned\n+\n+   begin\n+      Set_Digits (V);\n+\n+      --  Add leading spaces if required by width parameter\n+\n+      if P - Start < W then\n+         F := P;\n+         P := P + (W - (P - Start));\n+         T := P;\n+\n+         while F > Start loop\n+            S (T) := S (F);\n+            T := T - 1;\n+            F := F - 1;\n+         end loop;\n+\n+         for J in Start + 1 .. T loop\n+            S (J) := ' ';\n+         end loop;\n+      end if;\n+\n+   end Set_Image_Width_Long_Long_Unsigned;\n+\n+end System.Img_LLW;"}, {"sha": "23ebfd04d09f65d4d21116a64b9a8ebd937839fc", "filename": "gcc/ada/s-imgllw.ads", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgllw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgllw.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,73 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ L L W                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Contains the routine for computing the image  of signed and unsigned\n+--  integers whose size > Integer'Size for use by Text_IO.Integer_IO,\n+--  Text_IO.Modular_IO.\n+\n+with System.Unsigned_Types;\n+\n+package System.Img_LLW is\n+pragma Pure (Img_LLW);\n+\n+   procedure Set_Image_Width_Long_Long_Integer\n+     (V : Long_Long_Integer;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the signed image of V in decimal format, starting at S (P + 1),\n+   --  updating P to point to the last character stored. The image includes\n+   --  a leading minus sign if necessary, but no leading spaces unless W is\n+   --  positive, in which case leading spaces are output if necessary to ensure\n+   --  that the output string is no less than W characters long. The caller\n+   --  promises that the buffer is large enough and no check is made for this.\n+   --  Constraint_Error will not necessarily be raised if this is violated,\n+   --  since it is perfectly valid to compile this unit with checks off.\n+\n+   procedure Set_Image_Width_Long_Long_Unsigned\n+     (V : System.Unsigned_Types.Long_Long_Unsigned;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the unsigned image of V in decimal format, starting at S (P + 1),\n+   --  updating P to point to the last character stored. The image includes no\n+   --  leading spaces unless W is positive, in which case leading spaces are\n+   --  output if necessary to ensure that the output string is no less than\n+   --  W characters long. The caller promises that the buffer is large enough\n+   --  and no check is made for this. Constraint_Error will not necessarily be\n+   --  raised if this is violated, since it is perfectly valid to compile this\n+   --  unit with checks off.\n+\n+end System.Img_LLW;"}, {"sha": "c5fdd76cbd9cbb903d3d8c4aad4d753eeb20ea2d", "filename": "gcc/ada/s-imgrea.adb", "status": "added", "additions": 674, "deletions": 0, "changes": 674, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgrea.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,674 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . I M G _ R E A L                       --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.45 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Img_LLU;        use System.Img_LLU;\n+with System.Img_Uns;        use System.Img_Uns;\n+with System.Powten_Table;   use System.Powten_Table;\n+with System.Unsigned_Types; use System.Unsigned_Types;\n+\n+package body System.Img_Real is\n+\n+   --  The following defines the maximum number of digits that we can convert\n+   --  accurately. This is limited by the precision of Long_Long_Float, and\n+   --  also by the number of digits we can hold in Long_Long_Unsigned, which\n+   --  is the integer type we use as an intermediate for the result.\n+\n+   --  We assume that in practice, the limitation will come from the digits\n+   --  value, rather than the integer value. This is true for typical IEEE\n+   --  implementations, and at worst, the only loss is for some precision\n+   --  in very high precision floating-point output.\n+\n+   --  Note that in the following, the \"-2\" accounts for the sign and one\n+   --  extra digits, since we need the maximum number of 9's that can be\n+   --  supported, e.g. for the normal 64 bit case, Long_Long_Integer'Width\n+   --  is 21, since the maximum value (approx 1.6 * 10**19) has 20 digits,\n+   --  but the maximum number of 9's that can be supported is 19.\n+\n+   Maxdigs : constant :=\n+               Natural'Min\n+                 (Long_Long_Unsigned'Width - 2, Long_Long_Float'Digits);\n+\n+   Unsdigs : constant := Unsigned'Width - 2;\n+   --  Number of digits that can be converted using type Unsigned\n+   --  See above for the explanation of the -2.\n+\n+   Maxscaling : constant := 5000;\n+   --  Max decimal scaling required during conversion of floating-point\n+   --  numbers to decimal. This is used to defend against infinite\n+   --  looping in the conversion, as can be caused by erroneous executions.\n+   --  The largest exponent used on any current system is 2**16383, which\n+   --  is approximately 10**4932, and the highest number of decimal digits\n+   --  is about 35 for 128-bit floating-point formats, so 5000 leaves\n+   --  enough room for scaling such values\n+\n+   function Is_Negative (V : Long_Long_Float) return Boolean;\n+   pragma Import (Intrinsic, Is_Negative);\n+\n+   --------------------------\n+   -- Image_Floating_Point --\n+   --------------------------\n+\n+   function Image_Floating_Point\n+     (V    : Long_Long_Float;\n+      Digs : Natural)\n+      return String\n+   is\n+      P : Natural := 0;\n+      S : String (1 .. Long_Long_Float'Width);\n+\n+   begin\n+      if not Is_Negative (V) then\n+         S (1) := ' ';\n+         P := 1;\n+      end if;\n+\n+      Set_Image_Real (V, S, P, 1, Digs - 1, 3);\n+      return S (1 .. P);\n+   end Image_Floating_Point;\n+\n+   --------------------------------\n+   -- Image_Ordinary_Fixed_Point --\n+   --------------------------------\n+\n+   function Image_Ordinary_Fixed_Point\n+     (V    : Long_Long_Float;\n+      Aft  : Natural)\n+      return String\n+   is\n+      P : Natural := 0;\n+      S : String (1 .. Long_Long_Float'Width);\n+\n+   begin\n+      if V >= 0.0 then\n+         S (1) := ' ';\n+         P := 1;\n+      end if;\n+\n+      Set_Image_Real (V, S, P, 1, Aft, 0);\n+      return S (1 .. P);\n+   end Image_Ordinary_Fixed_Point;\n+\n+   --------------------\n+   -- Set_Image_Real --\n+   --------------------\n+\n+   procedure Set_Image_Real\n+     (V    : Long_Long_Float;\n+      S    : out String;\n+      P    : in out Natural;\n+      Fore : Natural;\n+      Aft  : Natural;\n+      Exp  : Natural)\n+   is\n+      procedure Reset;\n+      pragma Import (C, Reset, \"__gnat_init_float\");\n+      --  We import the floating-point processor reset routine so that we can\n+      --  be sure the floating-point processor is properly set for conversion\n+      --  calls (see description of Reset in GNAT.Float_Control (g-flocon.ads).\n+      --  This is notably need on Windows, where calls to the operating system\n+      --  randomly reset the processor into 64-bit mode.\n+\n+      NFrac : constant Natural := Natural'Max (Aft, 1);\n+      Sign  : Character;\n+      X     : aliased Long_Long_Float;\n+      --  This is declared aliased because the expansion of X'Valid passes\n+      --  X by access and JGNAT requires all access parameters to be aliased.\n+      --  The Valid attribute probably needs to be handled via a different\n+      --  expansion for JGNAT, and this use of aliased should be removed\n+      --  once Valid is handled properly. ???\n+      Scale : Integer;\n+      Expon : Integer;\n+\n+      Field_Max : constant := 255;\n+      --  This should be the same value as Ada.[Wide_]Text_IO.Field'Last.\n+      --  It is not worth dragging in Ada.Text_IO to pick up this value,\n+      --  since it really should never be necessary to change it!\n+\n+      Digs : String (1 .. 2 * Field_Max + 16);\n+      --  Array used to hold digits of converted integer value. This is a\n+      --  large enough buffer to accomodate ludicrous values of Fore and Aft.\n+\n+      Ndigs : Natural;\n+      --  Number of digits stored in Digs (and also subscript of last digit)\n+\n+      procedure Adjust_Scale (S : Natural);\n+      --  Adjusts the value in X by multiplying or dividing by a power of\n+      --  ten so that it is in the range 10**(S-1) <= X < 10**S. Includes\n+      --  adding 0.5 to round the result, readjusting if the rounding causes\n+      --  the result to wander out of the range. Scale is adjusted to reflect\n+      --  the power of ten used to divide the result (i.e. one is added to\n+      --  the scale value for each division by 10.0, or one is subtracted\n+      --  for each multiplication by 10.0).\n+\n+      procedure Convert_Integer;\n+      --  Takes the value in X, outputs integer digits into Digs. On return,\n+      --  Ndigs is set to the number of digits stored. The digits are stored\n+      --  in Digs (1 .. Ndigs),\n+\n+      procedure Set (C : Character);\n+      --  Sets character C in output buffer\n+\n+      procedure Set_Blanks_And_Sign (N : Integer);\n+      --  Sets leading blanks and minus sign if needed. N is the number of\n+      --  positions to be filled (a minus sign is output even if N is zero\n+      --  or negative, but for a positive value, if N is non-positive, then\n+      --  the call has no effect).\n+\n+      procedure Set_Digs (S, E : Natural);\n+      --  Set digits S through E from Digs buffer. No effect if S > E\n+\n+      procedure Set_Special_Fill (N : Natural);\n+      --  After outputting +Inf, -Inf or NaN, this routine fills out the\n+      --  rest of the field with * characters. The argument is the number\n+      --  of characters output so far (either 3 or 4)\n+\n+      procedure Set_Zeros (N : Integer);\n+      --  Set N zeros, no effect if N is negative\n+\n+      pragma Inline (Set);\n+      pragma Inline (Set_Digs);\n+      pragma Inline (Set_Zeros);\n+\n+      ------------------\n+      -- Adjust_Scale --\n+      ------------------\n+\n+      procedure Adjust_Scale (S : Natural) is\n+         Lo  : Natural;\n+         Hi  : Natural;\n+         Mid : Natural;\n+         XP  : Long_Long_Float;\n+\n+      begin\n+         --  Cases where scaling up is required\n+\n+         if X < Powten (S - 1) then\n+\n+            --  What we are looking for is a power of ten to multiply X by\n+            --  so that the result lies within the required range.\n+\n+            loop\n+               XP := X * Powten (Maxpow);\n+               exit when XP >= Powten (S - 1) or Scale < -Maxscaling;\n+               X := XP;\n+               Scale := Scale - Maxpow;\n+            end loop;\n+\n+            --  The following exception is only raised in case of erroneous\n+            --  execution, where a number was considered valid but still\n+            --  fails to scale up. One situation where this can happen is\n+            --  when a system which is supposed to be IEEE-compliant, but\n+            --  has been reconfigured to flush denormals to zero.\n+\n+            if Scale < -Maxscaling then\n+               raise Constraint_Error;\n+            end if;\n+\n+            --  Here we know that we must multiply by at least 10**1 and that\n+            --  10**Maxpow takes us too far: binary search to find right one.\n+\n+            --  Because of roundoff errors, it is possible for the value\n+            --  of XP to be just outside of the interval when Lo >= Hi. In\n+            --  that case we adjust explicitly by a factor of 10. This\n+            --  can only happen with a value that is very close to an\n+            --  exact power of 10.\n+\n+            Lo := 1;\n+            Hi := Maxpow;\n+\n+            loop\n+               Mid := (Lo + Hi) / 2;\n+               XP := X * Powten (Mid);\n+\n+               if XP < Powten (S - 1) then\n+\n+                  if Lo >= Hi then\n+                     Mid := Mid + 1;\n+                     XP := XP * 10.0;\n+                     exit;\n+\n+                  else\n+                     Lo := Mid + 1;\n+                  end if;\n+\n+               elsif XP >= Powten (S) then\n+\n+                  if Lo >= Hi then\n+                     Mid := Mid - 1;\n+                     XP := XP / 10.0;\n+                     exit;\n+\n+                  else\n+                     Hi := Mid - 1;\n+                  end if;\n+\n+               else\n+                  exit;\n+               end if;\n+            end loop;\n+\n+            X := XP;\n+            Scale := Scale - Mid;\n+\n+         --  Cases where scaling down is required\n+\n+         elsif X >= Powten (S) then\n+\n+            --  What we are looking for is a power of ten to divide X by\n+            --  so that the result lies within the required range.\n+\n+            loop\n+               XP := X / Powten (Maxpow);\n+               exit when XP < Powten (S) or Scale > Maxscaling;\n+               X := XP;\n+               Scale := Scale + Maxpow;\n+            end loop;\n+\n+            --  The following exception is only raised in case of erroneous\n+            --  execution, where a number was considered valid but still\n+            --  fails to scale up. One situation where this can happen is\n+            --  when a system which is supposed to be IEEE-compliant, but\n+            --  has been reconfigured to flush denormals to zero.\n+\n+            if Scale > Maxscaling then\n+               raise Constraint_Error;\n+            end if;\n+\n+            --  Here we know that we must divide by at least 10**1 and that\n+            --  10**Maxpow takes us too far, binary search to find right one.\n+\n+            Lo := 1;\n+            Hi := Maxpow;\n+\n+            loop\n+               Mid := (Lo + Hi) / 2;\n+               XP := X / Powten (Mid);\n+\n+               if XP < Powten (S - 1) then\n+\n+                  if Lo >= Hi then\n+                     XP := XP * 10.0;\n+                     Mid := Mid - 1;\n+                     exit;\n+\n+                  else\n+                     Hi := Mid - 1;\n+                  end if;\n+\n+               elsif XP >= Powten (S) then\n+\n+                  if Lo >= Hi then\n+                     XP := XP / 10.0;\n+                     Mid := Mid + 1;\n+                     exit;\n+\n+                  else\n+                     Lo := Mid + 1;\n+                  end if;\n+\n+               else\n+                  exit;\n+               end if;\n+            end loop;\n+\n+            X := XP;\n+            Scale := Scale + Mid;\n+\n+         --  Here we are already scaled right\n+\n+         else\n+            null;\n+         end if;\n+\n+         --  Round, readjusting scale if needed. Note that if a readjustment\n+         --  occurs, then it is never necessary to round again, because there\n+         --  is no possibility of such a second rounding causing a change.\n+\n+         X := X + 0.5;\n+\n+         if X >= Powten (S) then\n+            X := X / 10.0;\n+            Scale := Scale + 1;\n+         end if;\n+\n+      end Adjust_Scale;\n+\n+      ---------------------\n+      -- Convert_Integer --\n+      ---------------------\n+\n+      procedure Convert_Integer is\n+      begin\n+         --  Use Unsigned routine if possible, since on many machines it will\n+         --  be significantly more efficient than the Long_Long_Unsigned one.\n+\n+         if X < Powten (Unsdigs) then\n+            Ndigs := 0;\n+            Set_Image_Unsigned\n+              (Unsigned (Long_Long_Float'Truncation (X)),\n+               Digs, Ndigs);\n+\n+         --  But if we want more digits than fit in Unsigned, we have to use\n+         --  the Long_Long_Unsigned routine after all.\n+\n+         else\n+            Ndigs := 0;\n+            Set_Image_Long_Long_Unsigned\n+              (Long_Long_Unsigned (Long_Long_Float'Truncation (X)),\n+               Digs, Ndigs);\n+         end if;\n+      end Convert_Integer;\n+\n+      ---------\n+      -- Set --\n+      ---------\n+\n+      procedure Set (C : Character) is\n+      begin\n+         P := P + 1;\n+         S (P) := C;\n+      end Set;\n+\n+      -------------------------\n+      -- Set_Blanks_And_Sign --\n+      -------------------------\n+\n+      procedure Set_Blanks_And_Sign (N : Integer) is\n+      begin\n+         if Sign = '-' then\n+            for J in 1 .. N - 1 loop\n+               Set (' ');\n+            end loop;\n+\n+            Set ('-');\n+\n+         else\n+            for J in 1 .. N loop\n+               Set (' ');\n+            end loop;\n+         end if;\n+      end Set_Blanks_And_Sign;\n+\n+      --------------\n+      -- Set_Digs --\n+      --------------\n+\n+      procedure Set_Digs (S, E : Natural) is\n+      begin\n+         for J in S .. E loop\n+            Set (Digs (J));\n+         end loop;\n+      end Set_Digs;\n+\n+      ----------------------\n+      -- Set_Special_Fill --\n+      ----------------------\n+\n+      procedure Set_Special_Fill (N : Natural) is\n+         F : Natural;\n+\n+      begin\n+         F := Fore + 1 + Aft - N;\n+\n+         if Exp /= 0 then\n+            F := F + Exp + 1;\n+         end if;\n+\n+         for J in 1 .. F loop\n+            Set ('*');\n+         end loop;\n+      end Set_Special_Fill;\n+\n+      ---------------\n+      -- Set_Zeros --\n+      ---------------\n+\n+      procedure Set_Zeros (N : Integer) is\n+      begin\n+         for J in 1 .. N loop\n+            Set ('0');\n+         end loop;\n+      end Set_Zeros;\n+\n+   --  Start of processing for Set_Image_Real\n+\n+   begin\n+      Reset;\n+      Scale := 0;\n+\n+      --  Positive values\n+\n+      if V > 0.0 then\n+         X := V;\n+         Sign := '+';\n+\n+      --  Negative values\n+\n+      elsif V < 0.0 then\n+         X := -V;\n+         Sign := '-';\n+\n+      --  Zero values\n+\n+      elsif V = 0.0 then\n+         if Long_Long_Float'Signed_Zeros and then Is_Negative (V) then\n+            Sign := '-';\n+         else\n+            Sign := '+';\n+         end if;\n+\n+         Set_Blanks_And_Sign (Fore - 1);\n+         Set ('0');\n+         Set ('.');\n+         Set_Zeros (NFrac);\n+\n+         if Exp /= 0 then\n+            Set ('E');\n+            Set ('+');\n+            Set_Zeros (Natural'Max (1, Exp - 1));\n+         end if;\n+\n+         return;\n+      end if;\n+\n+      --  Deal with invalid values\n+\n+      if not X'Valid then\n+\n+         --  Note that we're taking our chances here, as X might be\n+         --  an invalid bit pattern resulting from erroneous execution\n+         --  (caused by using uninitialized variables for example).\n+\n+         --  No matter what, we'll at least get reasonable behaviour,\n+         --  converting to infinity or some other value, or causing an\n+         --  exception to be raised is fine.\n+\n+         --  If the following test succeeds, then we definitely have\n+         --  an infinite value, so we print Inf.\n+\n+         if X > Long_Long_Float'Last then\n+            Set (Sign);\n+            Set ('I');\n+            Set ('n');\n+            Set ('f');\n+            Set_Special_Fill (4);\n+\n+         --  In all other cases we print NaN\n+\n+         else\n+            Set ('N');\n+            Set ('a');\n+            Set ('N');\n+            Set_Special_Fill (3);\n+         end if;\n+\n+         return;\n+\n+      --  Case of non-zero value with Exp = 0\n+\n+      elsif Exp = 0 then\n+\n+         --  First step is to multiply by 10 ** Nfrac to get an integer\n+         --  value to be output, an then add 0.5 to round the result.\n+\n+         declare\n+            NF : Natural := NFrac;\n+\n+         begin\n+            loop\n+               --  If we are larger than Powten (Maxdigs) now, then\n+               --  we have too many significant digits, and we have\n+               --  not even finished multiplying by NFrac (NF shows\n+               --  the number of unaccounted-for digits).\n+\n+               if X >= Powten (Maxdigs) then\n+\n+                  --  In this situation, we only to generate a reasonable\n+                  --  number of significant digits, and then zeroes after.\n+                  --  So first we rescale to get:\n+\n+                  --    10 ** (Maxdigs - 1) <= X < 10 ** Maxdigs\n+\n+                  --  and then convert the resulting integer\n+\n+                  Adjust_Scale (Maxdigs);\n+                  Convert_Integer;\n+\n+                  --  If that caused rescaling, then add zeros to the end\n+                  --  of the number to account for this scaling. Also add\n+                  --  zeroes to account for the undone multiplications\n+\n+                  for J in 1 .. Scale + NF loop\n+                     Ndigs := Ndigs + 1;\n+                     Digs (Ndigs) := '0';\n+                  end loop;\n+\n+                  exit;\n+\n+               --  If multiplication is complete, then convert the resulting\n+               --  integer after rounding (note that X is non-negative)\n+\n+               elsif NF = 0 then\n+                  X := X + 0.5;\n+                  Convert_Integer;\n+                  exit;\n+\n+               --  Otherwise we can go ahead with the multiplication. If it\n+               --  can be done in one step, then do it in one step.\n+\n+               elsif NF < Maxpow then\n+                  X := X * Powten (NF);\n+                  NF := 0;\n+\n+               --  If it cannot be done in one step, then do partial scaling\n+\n+               else\n+                  X := X * Powten (Maxpow);\n+                  NF := NF - Maxpow;\n+               end if;\n+            end loop;\n+         end;\n+\n+         --  If number of available digits is less or equal to NFrac,\n+         --  then we need an extra zero before the decimal point.\n+\n+         if Ndigs <= NFrac then\n+            Set_Blanks_And_Sign (Fore - 1);\n+            Set ('0');\n+            Set ('.');\n+            Set_Zeros (NFrac - Ndigs);\n+            Set_Digs (1, Ndigs);\n+\n+         --  Normal case with some digits before the decimal point\n+\n+         else\n+            Set_Blanks_And_Sign (Fore - (Ndigs - NFrac));\n+            Set_Digs (1, Ndigs - NFrac);\n+            Set ('.');\n+            Set_Digs (Ndigs - NFrac + 1, Ndigs);\n+         end if;\n+\n+      --  Case of non-zero value with non-zero Exp value\n+\n+      else\n+         --  If NFrac is less than Maxdigs, then all the fraction digits are\n+         --  significant, so we can scale the resulting integer accordingly.\n+\n+         if NFrac < Maxdigs then\n+            Adjust_Scale (NFrac + 1);\n+            Convert_Integer;\n+\n+         --  Otherwise, we get the maximum number of digits available\n+\n+         else\n+            Adjust_Scale (Maxdigs);\n+            Convert_Integer;\n+\n+            for J in 1 .. NFrac - Maxdigs + 1 loop\n+               Ndigs := Ndigs + 1;\n+               Digs (Ndigs) := '0';\n+               Scale := Scale - 1;\n+            end loop;\n+         end if;\n+\n+         Set_Blanks_And_Sign (Fore - 1);\n+         Set (Digs (1));\n+         Set ('.');\n+         Set_Digs (2, Ndigs);\n+\n+         --  The exponent is the scaling factor adjusted for the digits\n+         --  that we output after the decimal point, since these were\n+         --  included in the scaled digits that we output.\n+\n+         Expon := Scale + NFrac;\n+\n+         Set ('E');\n+         Ndigs := 0;\n+\n+         if Expon >= 0 then\n+            Set ('+');\n+            Set_Image_Unsigned (Unsigned (Expon), Digs, Ndigs);\n+         else\n+            Set ('-');\n+            Set_Image_Unsigned (Unsigned (-Expon), Digs, Ndigs);\n+         end if;\n+\n+         Set_Zeros (Exp - Ndigs - 1);\n+         Set_Digs (1, Ndigs);\n+      end if;\n+\n+   end Set_Image_Real;\n+\n+end System.Img_Real;"}, {"sha": "234577b965a0cbb27fe1c8a144aaba98dee7845c", "filename": "gcc/ada/s-imgrea.ads", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgrea.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,73 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . I M G _ R E A L                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.11 $\n+--                                                                          --\n+--          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Image for fixed and float types (also used for Float_IO/Fixed_IO output)\n+\n+package System.Img_Real is\n+pragma Preelaborate (Img_Real);\n+\n+   function Image_Ordinary_Fixed_Point\n+     (V    : Long_Long_Float;\n+      Aft  : Natural)\n+      return String;\n+   --  Computes the image of V and returns the result according to the rules\n+   --  for image for fixed-point types (RM 3.5(34)), where Aft is the value of\n+   --  the Aft attribute for the fixed-point type. This function is used only\n+   --  for ordinary fixed point (see package System.Img_Dec for handling of\n+   --  decimal fixed-point).\n+\n+   function Image_Floating_Point\n+     (V    : Long_Long_Float;\n+      Digs : Natural)\n+      return String;\n+   --  Computes the image of V and returns the result according to the rules\n+   --  for image for foating-point types (RM 3.5(33)), where Digs is the value\n+   --  of the Digits attribute for the floating-point type.\n+\n+   procedure Set_Image_Real\n+     (V    : Long_Long_Float;\n+      S    : out String;\n+      P    : in out Natural;\n+      Fore : Natural;\n+      Aft  : Natural;\n+      Exp  : Natural);\n+   --  Sets the image of V starting at S (P + 1), updating P to point to the\n+   --  last character stored, the caller promises that the buffer is large\n+   --  enough and no check is made for this. Constraint_Error will not\n+   --  necessarily be raised if this is violated, since it is perfectly valid\n+   --  to compile this unit with checks off). The Fore, Aft and Exp values\n+   --  can be set to any valid values for the case of use from Text_IO.\n+\n+end System.Img_Real;"}, {"sha": "2f4451df041ae2f4d88f341e0d83db444ec22b39", "filename": "gcc/ada/s-imguns.adb", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imguns.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imguns.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imguns.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,90 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ U N S                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $                              --\n+--                                                                          --\n+--        Copyright (C) 1992,1993,1994 Free Software Foundation, Inc.       --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Unsigned_Types; use System.Unsigned_Types;\n+\n+package body System.Img_Uns is\n+\n+   --------------------\n+   -- Image_Unsigned --\n+   --------------------\n+\n+   function Image_Unsigned\n+     (V    : Unsigned)\n+      return String\n+   is\n+      P : Natural;\n+      S : String (1 .. Unsigned'Width);\n+\n+   begin\n+      P := 1;\n+      S (P) := ' ';\n+      Set_Image_Unsigned (V, S, P);\n+      return S (1 .. P);\n+   end Image_Unsigned;\n+\n+   ------------------------\n+   -- Set_Image_Unsigned --\n+   ------------------------\n+\n+   procedure Set_Image_Unsigned\n+     (V : Unsigned;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      procedure Set_Digits (T : Unsigned);\n+      --  Set decimal digits of value of T\n+\n+      procedure Set_Digits (T : Unsigned) is\n+      begin\n+         if T >= 10 then\n+            Set_Digits (T / 10);\n+            P := P + 1;\n+            S (P) := Character'Val (48 + (T rem 10));\n+\n+         else\n+            P := P + 1;\n+            S (P) := Character'Val (48 + T);\n+         end if;\n+      end Set_Digits;\n+\n+   --  Start of processing for Set_Image_Unsigned\n+\n+   begin\n+      Set_Digits (V);\n+\n+   end Set_Image_Unsigned;\n+\n+end System.Img_Uns;"}, {"sha": "073e44e69d194f1201decfaeab58b3bd1a900a91", "filename": "gcc/ada/s-imguns.ads", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imguns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imguns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imguns.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,61 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ U N S                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the routines for supporting the Image attribute for\n+--  modular integer types up to Size Modular'Size, and also for conversion\n+--  operations required in Text_IO.Modular_IO for such types.\n+\n+with System.Unsigned_Types;\n+\n+package System.Img_Uns is\n+pragma Pure (Img_Uns);\n+\n+   function Image_Unsigned\n+     (V    : System.Unsigned_Types.Unsigned)\n+      return String;\n+   --  Computes Unsigned'Image (V) and returns the result.\n+\n+   procedure Set_Image_Unsigned\n+     (V : System.Unsigned_Types.Unsigned;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the image of V starting at S (P + 1) with no leading spaces (i.e.\n+   --  Text_IO format where Width = 0), starting at S (P + 1), updating P\n+   --  to point to the last character stored. The caller promises that the\n+   --  buffer is large enough and no check is made for this (Constraint_Error\n+   --  will not be necessarily raised if this is violated since it is perfectly\n+   --  valid to compile this unit with checks off).\n+\n+end System.Img_Uns;"}, {"sha": "487889b5d074a16189b67ffc87ea7cc9b0340e80", "filename": "gcc/ada/s-imgwch.adb", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgwch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgwch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgwch.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,87 @@\n+-----------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                     S Y S T E M . I M G _ W C H A R                      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.15 $                             --\n+--                                                                          --\n+--          Copyright (C) 1992-1998, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Img_Char; use System.Img_Char;\n+with System.WCh_Con;  use System.WCh_Con;\n+with System.WCh_WtS;  use System.WCh_WtS;\n+\n+package body System.Img_WChar is\n+\n+   --------------------------\n+   -- Image_Wide_Character --\n+   --------------------------\n+\n+   function Image_Wide_Character\n+     (V    : Wide_Character;\n+      EM   : WC_Encoding_Method)\n+      return String\n+   is\n+      Val : constant Natural := Wide_Character'Pos (V);\n+      WS  : Wide_String (1 .. 3);\n+\n+   begin\n+      --  If in range of standard character, use standard character routine\n+\n+      if Val < 16#80#\n+        or else (Val <= 16#FF#\n+                  and then EM not in WC_Upper_Half_Encoding_Method)\n+      then\n+         return Image_Character (Character'Val (Val));\n+\n+      --  if the value is one of the last two characters in the type, use\n+      --  their language-defined names (3.5.2(3)).\n+\n+      elsif Val = 16#FFFE# then\n+         return \"FFFE\";\n+\n+      elsif Val = 16#FFFF# then\n+         return \"FFFF\";\n+\n+      --  Otherwise return an appropriate escape sequence (i.e. one matching\n+      --  the convention implemented by Scn.Wide_Char). The easiest thing is\n+      --  to build a wide string for the result, and then use the Wide_Value\n+      --  function to build the resulting String.\n+\n+      else\n+         WS (1) := ''';\n+         WS (2) := V;\n+         WS (3) := ''';\n+\n+         return Wide_String_To_String (WS, EM);\n+      end if;\n+\n+   end Image_Wide_Character;\n+\n+end System.Img_WChar;"}, {"sha": "693d1fc91e0ace85df91c63abd010e3c60a4a34e", "filename": "gcc/ada/s-imgwch.ads", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgwch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgwch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgwch.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,53 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                     S Y S T E M . I M G _ W C H A R                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.11 $\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Wide_Character'Image\n+\n+with System.WCh_Con;\n+\n+package System.Img_WChar is\n+pragma Pure (Img_WChar);\n+\n+   function Image_Wide_Character\n+     (V    : Wide_Character;\n+      EM   : System.WCh_Con.WC_Encoding_Method)\n+      return String;\n+   --  Computes Wode_Character'Image (V) and returns the computed result,\n+   --  The argument EM is a constant representing the encoding method in use.\n+   --  The encoding method used is guaranteed to be consistent across a\n+   --  given program execution and to correspond to the method used in the\n+   --  source programs.\n+\n+end System.Img_WChar;"}, {"sha": "7c1c847f314b65476c911100851eb92cf7e00408", "filename": "gcc/ada/s-imgwiu.adb", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgwiu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgwiu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgwiu.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,138 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ W I U                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $                              --\n+--                                                                          --\n+--     Copyright (C) 1992,1993,1994,1995 Free Software Foundation, Inc.     --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Unsigned_Types; use System.Unsigned_Types;\n+\n+package body System.Img_WIU is\n+\n+   -----------------------------\n+   -- Set_Image_Width_Integer --\n+   -----------------------------\n+\n+   procedure Set_Image_Width_Integer\n+     (V : Integer;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      Start : Natural;\n+\n+   begin\n+      --  Positive case can just use the unsigned circuit directly\n+\n+      if V >= 0 then\n+         Set_Image_Width_Unsigned (Unsigned (V), W, S, P);\n+\n+      --  Negative case has to set a minus sign. Note also that we have to be\n+      --  careful not to generate overflow with the largest negative number.\n+\n+      else\n+         P := P + 1;\n+         S (P) := ' ';\n+         Start := P;\n+\n+         declare\n+            pragma Suppress (Overflow_Check);\n+            pragma Suppress (Range_Check);\n+         begin\n+            Set_Image_Width_Unsigned (Unsigned (-V), W - 1, S, P);\n+         end;\n+\n+         --  Set minus sign in last leading blank location. Because of the\n+         --  code above, there must be at least one such location.\n+\n+         while S (Start + 1) = ' ' loop\n+            Start := Start + 1;\n+         end loop;\n+\n+         S (Start) := '-';\n+      end if;\n+\n+   end Set_Image_Width_Integer;\n+\n+   ------------------------------\n+   -- Set_Image_Width_Unsigned --\n+   ------------------------------\n+\n+   procedure Set_Image_Width_Unsigned\n+     (V : Unsigned;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural)\n+   is\n+      Start : constant Natural := P;\n+      F, T  : Natural;\n+\n+      procedure Set_Digits (T : Unsigned);\n+      --  Set digits of absolute value of T\n+\n+      procedure Set_Digits (T : Unsigned) is\n+      begin\n+         if T >= 10 then\n+            Set_Digits (T / 10);\n+            P := P + 1;\n+            S (P) := Character'Val (T mod 10 + Character'Pos ('0'));\n+         else\n+            P := P + 1;\n+            S (P) := Character'Val (T + Character'Pos ('0'));\n+         end if;\n+      end Set_Digits;\n+\n+   --  Start of processing for Set_Image_Width_Unsigned\n+\n+   begin\n+      Set_Digits (V);\n+\n+      --  Add leading spaces if required by width parameter\n+\n+      if P - Start < W then\n+         F := P;\n+         P := P + (W - (P - Start));\n+         T := P;\n+\n+         while F > Start loop\n+            S (T) := S (F);\n+            T := T - 1;\n+            F := F - 1;\n+         end loop;\n+\n+         for J in Start + 1 .. T loop\n+            S (J) := ' ';\n+         end loop;\n+      end if;\n+\n+   end Set_Image_Width_Unsigned;\n+\n+end System.Img_WIU;"}, {"sha": "5a9d2f465e28a8a5c01b467679b74b264e89f8a3", "filename": "gcc/ada/s-imgwiu.ads", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgwiu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-imgwiu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgwiu.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,73 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . I M G _ W I U                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $\n+--                                                                          --\n+--           Copyright (C) 1992-2000 Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Contains the routine for computing the image  of signed and unsigned\n+--  integers whose size <= Integer'Size for use by Text_IO.Integer_IO\n+--  and Text_IO.Modular_IO.\n+\n+with System.Unsigned_Types;\n+\n+package System.Img_WIU is\n+pragma Pure (Img_WIU);\n+\n+   procedure Set_Image_Width_Integer\n+     (V : Integer;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the signed image of V in decimal format, starting at S (P + 1),\n+   --  updating P to point to the last character stored. The image includes\n+   --  a leading minus sign if necessary, but no leading spaces unless W is\n+   --  positive, in which case leading spaces are output if necessary to ensure\n+   --  that the output string is no less than W characters long. The caller\n+   --  promises that the buffer is large enough and no check is made for this.\n+   --  Constraint_Error will not necessarily be raised if this is violated,\n+   --  since it is perfectly valid to compile this unit with checks off.\n+\n+   procedure Set_Image_Width_Unsigned\n+     (V : System.Unsigned_Types.Unsigned;\n+      W : Integer;\n+      S : out String;\n+      P : in out Natural);\n+   --  Sets the unsigned image of V in decimal format, starting at S (P + 1),\n+   --  updating P to point to the last character stored. The image includes no\n+   --  leading spaces unless W is positive, in which case leading spaces are\n+   --  output if necessary to ensure that the output string is no less than\n+   --  W characters long. The caller promises that the buffer is large enough\n+   --  and no check is made for this. Constraint_Error will not necessarily be\n+   --  raised if this is violated, since it is perfectly valid to compile this\n+   --  unit with checks off.\n+\n+end System.Img_WIU;"}, {"sha": "173c169331b92686202dc0e4cf916b8935b6d17b", "filename": "gcc/ada/s-inmaop.ads", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-inmaop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-inmaop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-inmaop.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,122 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--            S Y S T E M . I N T E R R U P T _ M A N A G E M E N T .       --\n+--                             O P E R A T I O N S                          --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.4 $                            --\n+--                                                                          --\n+--          Copyright (C) 1992-1998, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System.Interrupt_Management.Operations is\n+\n+   procedure Thread_Block_Interrupt (Interrupt : Interrupt_ID);\n+   --  Mask the calling thread for the interrupt\n+   pragma Inline (Thread_Block_Interrupt);\n+\n+   procedure Thread_Unblock_Interrupt (Interrupt : Interrupt_ID);\n+   --  Unmask the calling thread for the interrupt\n+   pragma Inline (Thread_Unblock_Interrupt);\n+\n+   procedure Set_Interrupt_Mask (Mask : access Interrupt_Mask);\n+   --  Set the interrupt mask of the calling thread\n+   procedure Set_Interrupt_Mask\n+     (Mask  : access Interrupt_Mask;\n+      OMask : access Interrupt_Mask);\n+   --  Set the interrupt mask of the calling thread while returning the\n+   --  previous Mask.\n+   pragma Inline (Set_Interrupt_Mask);\n+\n+   procedure Get_Interrupt_Mask (Mask : access Interrupt_Mask);\n+   --  Get the interrupt mask of the calling thread\n+   pragma Inline (Get_Interrupt_Mask);\n+\n+   function Interrupt_Wait (Mask : access Interrupt_Mask) return Interrupt_ID;\n+   --  Wait for the interrupts specified in Mask and return\n+   --  the interrupt received. Upon error it return 0.\n+   pragma Inline (Interrupt_Wait);\n+\n+   procedure Install_Default_Action (Interrupt : Interrupt_ID);\n+   --  Set the sigaction of the Interrupt to default (SIG_DFL).\n+   pragma Inline (Install_Default_Action);\n+\n+   procedure Install_Ignore_Action (Interrupt : Interrupt_ID);\n+   --  Set the sigaction of the Interrupt to ignore (SIG_IGN).\n+   pragma Inline (Install_Ignore_Action);\n+\n+   procedure Fill_Interrupt_Mask (Mask : access Interrupt_Mask);\n+   --  Get a Interrupt_Mask with all the interrupt masked\n+   pragma Inline (Fill_Interrupt_Mask);\n+\n+   procedure Empty_Interrupt_Mask (Mask : access Interrupt_Mask);\n+   --  Get a Interrupt_Mask with all the interrupt unmasked\n+   pragma Inline (Empty_Interrupt_Mask);\n+\n+   procedure Add_To_Interrupt_Mask\n+     (Mask      : access Interrupt_Mask;\n+      Interrupt : Interrupt_ID);\n+   --  Mask the given interrupt in the Interrupt_Mask\n+   pragma Inline (Add_To_Interrupt_Mask);\n+\n+   procedure Delete_From_Interrupt_Mask\n+     (Mask      : access Interrupt_Mask;\n+      Interrupt : Interrupt_ID);\n+   --  Unmask the given interrupt in the Interrupt_Mask\n+   pragma Inline (Delete_From_Interrupt_Mask);\n+\n+   function Is_Member\n+     (Mask      : access Interrupt_Mask;\n+      Interrupt : Interrupt_ID) return Boolean;\n+   --  See if a given interrupt is masked in the Interrupt_Mask\n+   pragma Inline (Is_Member);\n+\n+   procedure Copy_Interrupt_Mask (X : out Interrupt_Mask; Y : Interrupt_Mask);\n+   --  Assigment needed for limited private type Interrupt_Mask.\n+   pragma Inline (Copy_Interrupt_Mask);\n+\n+   procedure Interrupt_Self_Process (Interrupt : Interrupt_ID);\n+   --  raise an Interrupt process-level\n+   pragma Inline (Interrupt_Self_Process);\n+\n+   --  The following objects serve as constants, but are initialized\n+   --  in the body to aid portability.  These actually belong to the\n+   --  System.Interrupt_Management but since Interrupt_Mask is a\n+   --  private type we can not have them declared there.\n+\n+   Environment_Mask : aliased Interrupt_Mask;\n+   --  This mask represents the mask of Environment task when this package\n+   --  is being elaborated, except the signals being\n+   --  forced to be unmasked by RTS (items in Keep_Unmasked)\n+\n+   All_Tasks_Mask : aliased Interrupt_Mask;\n+   --  This is the mask of all tasks created in RTS. Only one task in RTS\n+   --  is responsible for masking/unmasking signals (see s-interr.adb).\n+\n+end System.Interrupt_Management.Operations;"}, {"sha": "03db2ff15128768696236b1a7a7fa80a0e99008a", "filename": "gcc/ada/s-interr.adb", "status": "added", "additions": 1572, "deletions": 0, "changes": 1572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-interr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-interr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,1572 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                     S Y S T E M . I N T E R R U P T S                    --\n+--                                                                          --\n+--                                  B o d y                                 --\n+--                                                                          --\n+--                             $Revision: 1.36 $\n+--                                                                          --\n+--          Copyright (C) 1991-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Invariants:\n+\n+--  All user-handleable interrupts are masked at all times in all\n+--  tasks/threads except possibly for the Interrupt_Manager task.\n+\n+--  When a user task wants to have the effect of masking/unmasking an\n+--  interrupt, it must call Block_Interrupt/Unblock_Interrupt, which\n+--  will have the effect of unmasking/masking the interrupt in the\n+--  Interrupt_Manager task.\n+\n+--  Note : Direct calls to sigaction, sigprocmask, pthread_sigsetmask or any\n+--  other low-level interface that changes the interrupt action or\n+--  interrupt mask needs a careful thought.\n+--  One may acheive the effect of system calls first masking RTS blocked\n+--  (by calling Block_Interrupt) for the interrupt under consideration.\n+--  This will make all the tasks in RTS blocked for the Interrupt.\n+\n+--  Once we associate a Server_Task with an interrupt, the task never\n+--  goes away, and we never remove the association.\n+\n+--  There is no more than one interrupt per Server_Task and no more than\n+--  one Server_Task per interrupt.\n+\n+--  Within this package, the lock L is used to protect the various status\n+--  tables. If there is a Server_Task associated with an interrupt, we use\n+--  the per-task lock of the Server_Task instead so that we protect the\n+--  status between Interrupt_Manager and Server_Task. Protection among\n+--  service requests are done using User Request to Interrupt_Manager\n+--  rendezvous.\n+\n+with Ada.Task_Identification;\n+--  used for Task_ID type\n+\n+with Ada.Exceptions;\n+--  used for Raise_Exception\n+\n+with System.Task_Primitives;\n+--  used for RTS_Lock\n+--           Self\n+\n+with System.Interrupt_Management;\n+--  used for Reserve\n+--           Interrupt_ID\n+--           Interrupt_Mask\n+--           Abort_Task_Interrupt\n+\n+with System.Interrupt_Management.Operations;\n+--  used for Thread_Block_Interrupt\n+--           Thread_Unblock_Interrupt\n+--           Install_Default_Action\n+--           Install_Ignore_Action\n+--           Copy_Interrupt_Mask\n+--           Set_Interrupt_Mask\n+--           Empty_Interrupt_Mask\n+--           Fill_Interrupt_Mask\n+--           Add_To_Interrupt_Mask\n+--           Delete_From_Interrupt_Mask\n+--           Interrupt_Wait\n+--           Interrupt_Self_Process\n+--           Get_Interrupt_Mask\n+--           Set_Interrupt_Mask\n+--           IS_Member\n+--           Environment_Mask\n+--           All_Tasks_Mask\n+pragma Elaborate_All (System.Interrupt_Management.Operations);\n+\n+with System.Error_Reporting;\n+--  used for Shutdown\n+\n+with System.Task_Primitives.Operations;\n+--  used for Write_Lock\n+--           Unlock\n+--           Abort\n+--           Wakeup_Task\n+--           Sleep\n+--           Initialize_Lock\n+\n+with System.Task_Primitives.Interrupt_Operations;\n+--  used for Set_Interrupt_ID\n+\n+with System.Storage_Elements;\n+--  used for To_Address\n+--           To_Integer\n+--           Integer_Address\n+\n+with System.Tasking;\n+--  used for Task_ID\n+--           Task_Entry_Index\n+--           Null_Task\n+--           Self\n+--           Interrupt_Manager_ID\n+\n+with System.Tasking.Utilities;\n+--  used for Make_Independent\n+\n+with System.Tasking.Rendezvous;\n+--  used for Call_Simple\n+pragma Elaborate_All (System.Tasking.Rendezvous);\n+\n+with System.Tasking.Initialization;\n+--  used for Defer_Abort\n+--           Undefer_Abort\n+\n+with Unchecked_Conversion;\n+\n+package body System.Interrupts is\n+\n+   use Tasking;\n+   use System.Error_Reporting;\n+   use Ada.Exceptions;\n+\n+   package PRI renames System.Task_Primitives;\n+   package POP renames System.Task_Primitives.Operations;\n+   package PIO renames System.Task_Primitives.Interrupt_Operations;\n+   package IMNG renames System.Interrupt_Management;\n+   package IMOP renames System.Interrupt_Management.Operations;\n+\n+   function To_System is new Unchecked_Conversion\n+     (Ada.Task_Identification.Task_Id, Task_ID);\n+\n+   -----------------\n+   -- Local Tasks --\n+   -----------------\n+\n+   --  WARNING: System.Tasking.Utilities performs calls to this task\n+   --  with low-level constructs. Do not change this spec without synchro-\n+   --  nizing it.\n+\n+   task Interrupt_Manager is\n+      entry Initialize (Mask : IMNG.Interrupt_Mask);\n+\n+      entry Attach_Handler\n+        (New_Handler : in Parameterless_Handler;\n+         Interrupt   : in Interrupt_ID;\n+         Static      : in Boolean;\n+         Restoration : in Boolean := False);\n+\n+      entry Exchange_Handler\n+        (Old_Handler : out Parameterless_Handler;\n+         New_Handler : in Parameterless_Handler;\n+         Interrupt   : in Interrupt_ID;\n+         Static      : in Boolean);\n+\n+      entry Detach_Handler\n+        (Interrupt   : in Interrupt_ID;\n+         Static      : in Boolean);\n+\n+      entry Bind_Interrupt_To_Entry\n+        (T         : Task_ID;\n+         E         : Task_Entry_Index;\n+         Interrupt : Interrupt_ID);\n+\n+      entry Detach_Interrupt_Entries (T : Task_ID);\n+\n+      entry Block_Interrupt (Interrupt : Interrupt_ID);\n+\n+      entry Unblock_Interrupt (Interrupt : Interrupt_ID);\n+\n+      entry Ignore_Interrupt (Interrupt : Interrupt_ID);\n+\n+      entry Unignore_Interrupt (Interrupt : Interrupt_ID);\n+\n+      pragma Interrupt_Priority (System.Interrupt_Priority'Last);\n+   end Interrupt_Manager;\n+\n+   task type Server_Task (Interrupt : Interrupt_ID) is\n+      pragma Priority (System.Interrupt_Priority'Last);\n+   end Server_Task;\n+\n+   type Server_Task_Access is access Server_Task;\n+\n+   --------------------------------\n+   --  Local Types and Variables --\n+   --------------------------------\n+\n+   type Entry_Assoc is record\n+      T : Task_ID;\n+      E : Task_Entry_Index;\n+   end record;\n+\n+   type Handler_Assoc is record\n+      H      : Parameterless_Handler;\n+      Static : Boolean;   --  Indicates static binding;\n+   end record;\n+\n+   User_Handler : array (Interrupt_ID'Range) of Handler_Assoc :=\n+                    (others => (null, Static => False));\n+   pragma Volatile_Components (User_Handler);\n+   --  Holds the protected procedure handler (if any) and its Static\n+   --  information  for each interrupt. A handler is a Static one if\n+   --  it is specified through the pragma Attach_Handler.\n+   --  Attach_Handler. Otherwise, not static)\n+\n+   User_Entry : array (Interrupt_ID'Range) of Entry_Assoc :=\n+                  (others => (T => Null_Task, E => Null_Task_Entry));\n+   pragma Volatile_Components (User_Entry);\n+   --  Holds the task and entry index (if any) for each interrupt\n+\n+   Blocked : array (Interrupt_ID'Range) of Boolean := (others => False);\n+   pragma Volatile_Components (Blocked);\n+   --  True iff the corresponding interrupt is blocked in the process level\n+\n+   Ignored : array (Interrupt_ID'Range) of Boolean := (others => False);\n+   pragma Volatile_Components (Ignored);\n+   --  True iff the corresponding interrupt is blocked in the process level\n+\n+   Last_Unblocker :\n+     array (Interrupt_ID'Range) of Task_ID := (others => Null_Task);\n+   pragma Volatile_Components (Last_Unblocker);\n+   --  Holds the ID of the last Task which Unblocked this Interrupt.\n+   --  It contains Null_Task if no tasks have ever requested the\n+   --  Unblocking operation or the Interrupt is currently Blocked.\n+\n+   Server_ID : array (Interrupt_ID'Range) of Task_ID :=\n+                 (others => Null_Task);\n+   pragma Atomic_Components (Server_ID);\n+   --  Holds the Task_ID of the Server_Task for each interrupt.\n+   --  Task_ID is needed to accomplish locking per Interrupt base. Also\n+   --  is needed to decide whether to create a new Server_Task.\n+\n+   --  Type and Head, Tail of the list containing Registered Interrupt\n+   --  Handlers. These definitions are used to register the handlers\n+   --  specified by the pragma Interrupt_Handler.\n+\n+   type Registered_Handler;\n+   type R_Link is access all Registered_Handler;\n+\n+   type Registered_Handler is record\n+      H :    System.Address := System.Null_Address;\n+      Next : R_Link := null;\n+   end record;\n+\n+   Registered_Handler_Head : R_Link := null;\n+   Registered_Handler_Tail : R_Link := null;\n+\n+   Access_Hold : Server_Task_Access;\n+   --  variable used to allocate Server_Task using \"new\".\n+\n+   L : aliased PRI.RTS_Lock;\n+   --  L protects contents in tables above corresponding to interrupts\n+   --  for which Server_ID (T) = null.\n+   --\n+   --  If Server_ID (T) /= null then protection is via\n+   --  per-task (TCB) lock of Server_ID (T).\n+   --\n+   --  For deadlock prevention, L should not be locked after\n+   --  any other lock is held, hence we use PO_Level which is the highest\n+   --  lock level for error checking.\n+\n+   Task_Lock : array (Interrupt_ID'Range) of Boolean := (others => False);\n+   --  Boolean flags to give matching Locking and Unlocking. See the comments\n+   --  in Lock_Interrupt.\n+\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   procedure Lock_Interrupt\n+     (Self_ID   : Task_ID;\n+      Interrupt : Interrupt_ID);\n+   --  protect the tables using L or per-task lock. Set the Boolean\n+   --  value Task_Lock if the lock is made using per-task lock.\n+   --  This information is needed so that Unlock_Interrupt\n+   --  performs unlocking on the same lock. The situation we are preventing\n+   --  is, for example, when Attach_Handler is called for the first time\n+   --  we lock L and create an Server_Task. For a matching unlocking, if we\n+   --  rely on the fact that there is a Server_Task, we will unlock the\n+   --  per-task lock.\n+\n+   procedure Unlock_Interrupt\n+     (Self_ID   : Task_ID;\n+      Interrupt : Interrupt_ID);\n+\n+   function Is_Registered (Handler : Parameterless_Handler) return Boolean;\n+   --  ??? spec needs comments\n+\n+   --------------------\n+   -- Attach_Handler --\n+   --------------------\n+\n+   --  Calling this procedure with New_Handler = null and Static = True\n+   --  means we want to detach the current handler regardless of the\n+   --  previous handler's binding status (ie. do not care if it is a\n+   --  dynamic or static handler).\n+\n+   --  This option is needed so that during the finalization of a PO, we\n+   --  can detach handlers attached through pragma Attach_Handler.\n+\n+   procedure Attach_Handler\n+     (New_Handler : in Parameterless_Handler;\n+      Interrupt   : in Interrupt_ID;\n+      Static      : in Boolean := False)\n+   is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      Interrupt_Manager.Attach_Handler (New_Handler, Interrupt, Static);\n+\n+   end Attach_Handler;\n+\n+   -----------------------------\n+   -- Bind_Interrupt_To_Entry --\n+   -----------------------------\n+\n+   --  This procedure raises a Program_Error if it tries to\n+   --  bind an interrupt to which an Entry or a Procedure is\n+   --  already bound.\n+\n+   procedure Bind_Interrupt_To_Entry\n+     (T       : Task_ID;\n+      E       : Task_Entry_Index;\n+      Int_Ref : System.Address)\n+   is\n+      Interrupt   : constant Interrupt_ID :=\n+        Interrupt_ID (Storage_Elements.To_Integer (Int_Ref));\n+\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      Interrupt_Manager.Bind_Interrupt_To_Entry (T, E, Interrupt);\n+\n+   end Bind_Interrupt_To_Entry;\n+\n+   ---------------------\n+   -- Block_Interrupt --\n+   ---------------------\n+\n+   procedure Block_Interrupt (Interrupt : Interrupt_ID) is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      Interrupt_Manager.Block_Interrupt (Interrupt);\n+   end Block_Interrupt;\n+\n+   ---------------------\n+   -- Current_Handler --\n+   ---------------------\n+\n+   function Current_Handler\n+     (Interrupt : Interrupt_ID)\n+      return      Parameterless_Handler\n+   is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      --  ??? Since Parameterless_Handler is not Atomic, the\n+      --  current implementation is wrong. We need a new service in\n+      --  Interrupt_Manager to ensure atomicity.\n+\n+      return User_Handler (Interrupt).H;\n+   end Current_Handler;\n+\n+   --------------------\n+   -- Detach_Handler --\n+   --------------------\n+\n+   --  Calling this procedure with Static = True means we want to Detach the\n+   --  current handler regardless of the previous handler's binding status\n+   --  (i.e. do not care if it is a dynamic or static handler).\n+\n+   --  This option is needed so that during the finalization of a PO, we can\n+   --  detach handlers attached through pragma Attach_Handler.\n+\n+   procedure Detach_Handler\n+     (Interrupt : in Interrupt_ID;\n+      Static    : in Boolean := False)\n+   is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      Interrupt_Manager.Detach_Handler (Interrupt, Static);\n+\n+   end Detach_Handler;\n+\n+   ------------------------------\n+   -- Detach_Interrupt_Entries --\n+   ------------------------------\n+\n+   procedure Detach_Interrupt_Entries (T : Task_ID) is\n+   begin\n+      Interrupt_Manager.Detach_Interrupt_Entries (T);\n+   end Detach_Interrupt_Entries;\n+\n+   ----------------------\n+   -- Exchange_Handler --\n+   ----------------------\n+\n+   --  Calling this procedure with New_Handler = null and Static = True\n+   --  means we want to detach the current handler regardless of the\n+   --  previous handler's binding status (ie. do not care if it is a\n+   --  dynamic or static handler).\n+\n+   --  This option is needed so that during the finalization of a PO, we\n+   --  can detach handlers attached through pragma Attach_Handler.\n+\n+   procedure Exchange_Handler\n+     (Old_Handler : out Parameterless_Handler;\n+      New_Handler : in Parameterless_Handler;\n+      Interrupt   : in Interrupt_ID;\n+      Static      : in Boolean := False)\n+   is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      Interrupt_Manager.Exchange_Handler\n+        (Old_Handler, New_Handler, Interrupt, Static);\n+\n+   end Exchange_Handler;\n+\n+   ----------------\n+   --  Finalize  --\n+   ----------------\n+\n+   procedure Finalize (Object : in out Static_Interrupt_Protection) is\n+   begin\n+      --  ??? loop to be executed only when we're not doing library level\n+      --  finalization, since in this case all interrupt tasks are gone.\n+      if not Interrupt_Manager'Terminated then\n+         for N in reverse Object.Previous_Handlers'Range loop\n+            Interrupt_Manager.Attach_Handler\n+              (New_Handler => Object.Previous_Handlers (N).Handler,\n+               Interrupt   => Object.Previous_Handlers (N).Interrupt,\n+               Static      => Object.Previous_Handlers (N).Static,\n+               Restoration => True);\n+         end loop;\n+      end if;\n+\n+      Tasking.Protected_Objects.Entries.Finalize\n+        (Tasking.Protected_Objects.Entries.Protection_Entries (Object));\n+   end Finalize;\n+\n+   -------------------------------------\n+   -- Has_Interrupt_Or_Attach_Handler --\n+   -------------------------------------\n+\n+   function Has_Interrupt_Or_Attach_Handler\n+     (Object : access Dynamic_Interrupt_Protection) return Boolean is\n+   begin\n+      return True;\n+   end Has_Interrupt_Or_Attach_Handler;\n+\n+   function Has_Interrupt_Or_Attach_Handler\n+     (Object : access Static_Interrupt_Protection)\n+      return   Boolean\n+   is\n+   begin\n+      return True;\n+   end Has_Interrupt_Or_Attach_Handler;\n+\n+   ----------------------\n+   -- Ignore_Interrupt --\n+   ----------------------\n+\n+   procedure Ignore_Interrupt (Interrupt : Interrupt_ID) is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      Interrupt_Manager.Ignore_Interrupt (Interrupt);\n+   end Ignore_Interrupt;\n+\n+   ----------------------\n+   -- Install_Handlers --\n+   ----------------------\n+\n+   procedure Install_Handlers\n+     (Object       : access Static_Interrupt_Protection;\n+      New_Handlers : in New_Handler_Array)\n+   is\n+   begin\n+      for N in New_Handlers'Range loop\n+\n+         --  We need a lock around this ???\n+\n+         Object.Previous_Handlers (N).Interrupt := New_Handlers (N).Interrupt;\n+         Object.Previous_Handlers (N).Static    := User_Handler\n+           (New_Handlers (N).Interrupt).Static;\n+\n+         --  We call Exchange_Handler and not directly Interrupt_Manager.\n+         --  Exchange_Handler so we get the Is_Reserved check.\n+\n+         Exchange_Handler\n+           (Old_Handler => Object.Previous_Handlers (N).Handler,\n+            New_Handler => New_Handlers (N).Handler,\n+            Interrupt   => New_Handlers (N).Interrupt,\n+            Static      => True);\n+      end loop;\n+   end Install_Handlers;\n+\n+   ----------------\n+   -- Is_Blocked --\n+   ----------------\n+\n+   function Is_Blocked (Interrupt : Interrupt_ID) return Boolean is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      return Blocked (Interrupt);\n+   end Is_Blocked;\n+\n+   -----------------------\n+   -- Is_Entry_Attached --\n+   -----------------------\n+\n+   function Is_Entry_Attached (Interrupt : Interrupt_ID) return Boolean is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      return User_Entry (Interrupt).T /= Null_Task;\n+   end Is_Entry_Attached;\n+\n+   -------------------------\n+   -- Is_Handler_Attached --\n+   -------------------------\n+\n+   function Is_Handler_Attached (Interrupt : Interrupt_ID) return Boolean is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      return User_Handler (Interrupt).H /= null;\n+   end Is_Handler_Attached;\n+\n+   ----------------\n+   -- Is_Ignored --\n+   ----------------\n+\n+   function Is_Ignored (Interrupt : Interrupt_ID) return Boolean is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      return Ignored (Interrupt);\n+   end Is_Ignored;\n+\n+   -------------------\n+   -- Is_Registered --\n+   -------------------\n+\n+   --  See if the Handler has been \"pragma\"ed using Interrupt_Handler.\n+   --  Always consider a null handler as registered.\n+\n+   function Is_Registered (Handler : Parameterless_Handler) return Boolean is\n+\n+      type Fat_Ptr is record\n+         Object_Addr  : System.Address;\n+         Handler_Addr : System.Address;\n+      end record;\n+\n+      function To_Fat_Ptr is new Unchecked_Conversion\n+        (Parameterless_Handler, Fat_Ptr);\n+\n+      Ptr : R_Link;\n+      Fat : Fat_Ptr;\n+\n+   begin\n+      if Handler = null then\n+         return True;\n+      end if;\n+\n+      Fat := To_Fat_Ptr (Handler);\n+\n+      Ptr := Registered_Handler_Head;\n+\n+      while (Ptr /= null) loop\n+         if Ptr.H = Fat.Handler_Addr then\n+            return True;\n+         end if;\n+\n+         Ptr := Ptr.Next;\n+      end loop;\n+\n+      return False;\n+\n+   end Is_Registered;\n+\n+   -----------------\n+   -- Is_Reserved --\n+   -----------------\n+\n+   function Is_Reserved (Interrupt : Interrupt_ID) return Boolean is\n+   begin\n+      return IMNG.Reserve (IMNG.Interrupt_ID (Interrupt));\n+   end Is_Reserved;\n+\n+   --------------------\n+   -- Lock_Interrupt --\n+   --------------------\n+\n+   --  ?????\n+\n+   --  This package has been modified several times.\n+   --  Do we still need this fancy locking scheme, now that more operations\n+   --  are entries of the interrupt manager task?\n+\n+   --  ?????\n+\n+   --  More likely, we will need to convert one or more entry calls to\n+   --  protected operations, because presently we are violating locking order\n+   --  rules by calling a task entry from within the runtime system.\n+\n+   procedure Lock_Interrupt\n+     (Self_ID   : Task_ID;\n+      Interrupt : Interrupt_ID)\n+   is\n+   begin\n+      Initialization.Defer_Abort (Self_ID);\n+\n+      POP.Write_Lock (L'Access);\n+\n+      if Task_Lock (Interrupt) then\n+\n+         --  We need to use per-task lock.\n+\n+         POP.Unlock (L'Access);\n+         POP.Write_Lock (Server_ID (Interrupt));\n+\n+         --  Rely on the fact that once Server_ID is set to a non-null\n+         --  value it will never be set back to null.\n+\n+      elsif Server_ID (Interrupt) /= Null_Task then\n+\n+         --  We need to use per-task lock.\n+\n+         Task_Lock (Interrupt) := True;\n+         POP.Unlock (L'Access);\n+         POP.Write_Lock (Server_ID (Interrupt));\n+      end if;\n+   end Lock_Interrupt;\n+\n+   ---------------\n+   -- Reference --\n+   ---------------\n+\n+   function Reference (Interrupt : Interrupt_ID) return System.Address is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      return Storage_Elements.To_Address\n+        (Storage_Elements.Integer_Address (Interrupt));\n+   end Reference;\n+\n+   ---------------------------------\n+   -- Register_Interrupt_Handler  --\n+   ---------------------------------\n+\n+   procedure Register_Interrupt_Handler (Handler_Addr : System.Address) is\n+      New_Node_Ptr : R_Link;\n+\n+   begin\n+      --  This routine registers the Handler as usable for Dynamic\n+      --  Interrupt Handler. Routines attaching and detaching Handler\n+      --  dynamically should first consult if the Handler is rgistered.\n+      --  A Program Error should be raised if it is not registered.\n+\n+      --  The pragma Interrupt_Handler can only appear in the library\n+      --  level PO definition and instantiation. Therefore, we do not need\n+      --  to implement Unregistering operation. Neither we need to\n+      --  protect the queue structure using a Lock.\n+\n+      pragma Assert (Handler_Addr /= System.Null_Address);\n+\n+      New_Node_Ptr := new Registered_Handler;\n+      New_Node_Ptr.H := Handler_Addr;\n+\n+      if Registered_Handler_Head = null then\n+         Registered_Handler_Head := New_Node_Ptr;\n+         Registered_Handler_Tail := New_Node_Ptr;\n+\n+      else\n+         Registered_Handler_Tail.Next := New_Node_Ptr;\n+         Registered_Handler_Tail := New_Node_Ptr;\n+      end if;\n+   end Register_Interrupt_Handler;\n+\n+   -----------------------\n+   -- Unblock_Interrupt --\n+   -----------------------\n+\n+   procedure Unblock_Interrupt (Interrupt : Interrupt_ID) is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      Interrupt_Manager.Unblock_Interrupt (Interrupt);\n+   end Unblock_Interrupt;\n+\n+   ------------------\n+   -- Unblocked_By --\n+   ------------------\n+\n+   function Unblocked_By\n+     (Interrupt : Interrupt_ID)\n+      return      System.Tasking.Task_ID\n+   is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      return Last_Unblocker (Interrupt);\n+   end Unblocked_By;\n+\n+   ------------------------\n+   -- Unignore_Interrupt --\n+   ------------------------\n+\n+   procedure Unignore_Interrupt (Interrupt : Interrupt_ID) is\n+   begin\n+      if Is_Reserved (Interrupt) then\n+         Raise_Exception (Program_Error'Identity, \"Interrupt\" &\n+           Interrupt_ID'Image (Interrupt) & \" is reserved\");\n+      end if;\n+\n+      Interrupt_Manager.Unignore_Interrupt (Interrupt);\n+   end Unignore_Interrupt;\n+\n+   ----------------------\n+   -- Unlock_Interrupt --\n+   ----------------------\n+\n+   procedure Unlock_Interrupt\n+     (Self_ID   : Task_ID;\n+      Interrupt : Interrupt_ID)\n+   is\n+   begin\n+      if Task_Lock (Interrupt) then\n+         POP.Unlock (Server_ID (Interrupt));\n+      else\n+         POP.Unlock (L'Access);\n+      end if;\n+\n+      Initialization.Undefer_Abort (Self_ID);\n+   end Unlock_Interrupt;\n+\n+   -----------------------\n+   -- Interrupt_Manager --\n+   -----------------------\n+\n+   task body Interrupt_Manager is\n+\n+      ----------------------\n+      --  Local Variables --\n+      ----------------------\n+\n+      Intwait_Mask  : aliased IMNG.Interrupt_Mask;\n+      Ret_Interrupt : Interrupt_ID;\n+      Old_Mask      : aliased IMNG.Interrupt_Mask;\n+      Self_ID       : Task_ID := POP.Self;\n+\n+      ---------------------\n+      --  Local Routines --\n+      ---------------------\n+\n+      procedure Bind_Handler (Interrupt : Interrupt_ID);\n+      --  This procedure does not do anything if the Interrupt is blocked.\n+      --  Otherwise, we have to interrupt Server_Task for status change through\n+      --  Wakeup interrupt.\n+\n+      procedure Unbind_Handler (Interrupt : Interrupt_ID);\n+      --  This procedure does not do anything if the Interrupt is blocked.\n+      --  Otherwise, we have to interrupt Server_Task for status change\n+      --  through abort interrupt.\n+\n+      --  Following two procedure are named Unprotected... in order to\n+      --  indicate that Lock/Unlock_Interrupt operations are needed around.\n+\n+      procedure Unprotected_Exchange_Handler\n+        (Old_Handler : out Parameterless_Handler;\n+         New_Handler : in  Parameterless_Handler;\n+         Interrupt   : in  Interrupt_ID;\n+         Static      : in  Boolean;\n+         Restoration : in  Boolean := False);\n+\n+      procedure Unprotected_Detach_Handler\n+        (Interrupt   : in Interrupt_ID;\n+         Static      : in Boolean);\n+\n+      ------------------\n+      -- Bind_Handler --\n+      ------------------\n+\n+      procedure Bind_Handler (Interrupt : Interrupt_ID) is\n+      begin\n+         if not Blocked (Interrupt) then\n+\n+            --  Mask this task for the given Interrupt so that all tasks\n+            --  are masked for the Interrupt and the actuall delivery of the\n+            --  Interrupt will be caught using \"sigwait\" by the\n+            --  corresponding Server_Task.\n+\n+            IMOP.Thread_Block_Interrupt (IMNG.Interrupt_ID (Interrupt));\n+\n+            --  We have installed a Handler or an Entry before we called\n+            --  this procedure. If the Handler Task is waiting to be awakened,\n+            --  do it here. Otherwise, the interrupt will be discarded.\n+\n+            POP.Wakeup (Server_ID (Interrupt), Interrupt_Server_Idle_Sleep);\n+         end if;\n+      end Bind_Handler;\n+\n+      --------------------\n+      -- Unbind_Handler --\n+      --------------------\n+\n+      procedure Unbind_Handler (Interrupt : Interrupt_ID) is\n+      begin\n+         if not Blocked (Interrupt) then\n+\n+            --  Currently, there is a Handler or an Entry attached and\n+            --  corresponding Server_Task is waiting on \"sigwait.\"\n+            --  We have to wake up the Server_Task and make it\n+            --  wait on condition variable by sending an\n+            --  Abort_Task_Interrupt\n+\n+            POP.Abort_Task (Server_ID (Interrupt));\n+\n+            --  Make sure corresponding Server_Task is out of its own\n+            --  sigwait state.\n+\n+            Ret_Interrupt :=\n+              Interrupt_ID (IMOP.Interrupt_Wait (Intwait_Mask'Access));\n+\n+            pragma Assert\n+              (Ret_Interrupt = Interrupt_ID (IMNG.Abort_Task_Interrupt));\n+\n+            IMOP.Install_Default_Action (IMNG.Interrupt_ID (Interrupt));\n+\n+            --  Unmake the Interrupt for this task in order to allow default\n+            --  action again.\n+\n+            IMOP.Thread_Unblock_Interrupt (IMNG.Interrupt_ID (Interrupt));\n+\n+         else\n+            IMOP.Install_Default_Action (IMNG.Interrupt_ID (Interrupt));\n+         end if;\n+\n+      end Unbind_Handler;\n+\n+      --------------------------------\n+      -- Unprotected_Detach_Handler --\n+      --------------------------------\n+\n+      procedure Unprotected_Detach_Handler\n+        (Interrupt   : in Interrupt_ID;\n+         Static      : in Boolean)\n+      is\n+         Old_Handler : Parameterless_Handler;\n+\n+      begin\n+         if User_Entry (Interrupt).T /= Null_Task then\n+\n+            --  In case we have an Interrupt Entry installed.\n+            --  raise a program error. (propagate it to the caller).\n+\n+            Unlock_Interrupt (Self_ID, Interrupt);\n+            Raise_Exception (Program_Error'Identity,\n+              \"An interrupt entry is already installed\");\n+         end if;\n+\n+         --  Note : Static = True will pass the following check. That is the\n+         --  case when we want to detach a handler regardless of the static\n+         --  status of the current_Handler.\n+\n+         if not Static and then User_Handler (Interrupt).Static then\n+\n+            --  Tries to detach a static Interrupt Handler.\n+            --  raise a program error.\n+\n+            Unlock_Interrupt (Self_ID, Interrupt);\n+            Raise_Exception (Program_Error'Identity,\n+              \"Trying to detach a static Interrupt Handler\");\n+         end if;\n+\n+         --  The interrupt should no longer be ignored if\n+         --  it was ever ignored.\n+\n+         Ignored (Interrupt) := False;\n+\n+         Old_Handler := User_Handler (Interrupt).H;\n+\n+         --  The new handler\n+\n+         User_Handler (Interrupt).H := null;\n+         User_Handler (Interrupt).Static := False;\n+\n+         if Old_Handler /= null then\n+            Unbind_Handler (Interrupt);\n+         end if;\n+\n+      end Unprotected_Detach_Handler;\n+\n+      ----------------------------------\n+      -- Unprotected_Exchange_Handler --\n+      ----------------------------------\n+\n+      procedure Unprotected_Exchange_Handler\n+        (Old_Handler : out Parameterless_Handler;\n+         New_Handler : in  Parameterless_Handler;\n+         Interrupt   : in  Interrupt_ID;\n+         Static      : in  Boolean;\n+         Restoration : in  Boolean := False)\n+      is\n+      begin\n+         if User_Entry (Interrupt).T /= Null_Task then\n+\n+            --  In case we have an Interrupt Entry already installed.\n+            --  raise a program error. (propagate it to the caller).\n+\n+            Unlock_Interrupt (Self_ID, Interrupt);\n+            Raise_Exception (Program_Error'Identity,\n+              \"An interrupt is already installed\");\n+         end if;\n+\n+         --  Note : A null handler with Static = True will\n+         --  pass the following check. That is the case when we want to\n+         --  Detach a handler regardless of the Static status\n+         --  of the current_Handler.\n+         --  We don't check anything if Restoration is True, since we\n+         --  may be detaching a static handler to restore a dynamic one.\n+\n+         if not Restoration and then not Static\n+\n+            --  Tries to overwrite a static Interrupt Handler with a\n+            --  dynamic Handler\n+\n+           and then (User_Handler (Interrupt).Static\n+\n+                        --  The new handler is not specified as an\n+                        --  Interrupt Handler by a pragma.\n+\n+                        or else not Is_Registered (New_Handler))\n+         then\n+            Unlock_Interrupt (Self_ID, Interrupt);\n+            Raise_Exception (Program_Error'Identity,\n+              \"Trying to overwrite a static Interrupt Handler with a \" &\n+              \"dynamic Handler\");\n+         end if;\n+\n+         --  The interrupt should no longer be ingnored if\n+         --  it was ever ignored.\n+\n+         Ignored (Interrupt) := False;\n+\n+         --  Save the old handler\n+\n+         Old_Handler := User_Handler (Interrupt).H;\n+\n+         --  The new handler\n+\n+         User_Handler (Interrupt).H := New_Handler;\n+\n+         if New_Handler = null then\n+\n+            --  The null handler means we are detaching the handler.\n+\n+            User_Handler (Interrupt).Static := False;\n+\n+         else\n+            User_Handler (Interrupt).Static := Static;\n+         end if;\n+\n+         --  Invoke a corresponding Server_Task if not yet created.\n+         --  Place Task_ID info in Server_ID array.\n+\n+         if Server_ID (Interrupt) = Null_Task then\n+\n+            --  When a new Server_Task is created, it should have its\n+            --  signal mask set to the All_Tasks_Mask.\n+\n+            IMOP.Set_Interrupt_Mask\n+              (IMOP.All_Tasks_Mask'Access, Old_Mask'Access);\n+            Access_Hold := new Server_Task (Interrupt);\n+            IMOP.Set_Interrupt_Mask (Old_Mask'Access);\n+\n+            Server_ID (Interrupt) := To_System (Access_Hold.all'Identity);\n+         end if;\n+\n+         if (New_Handler = null) then\n+            if Old_Handler /= null then\n+               Unbind_Handler (Interrupt);\n+            end if;\n+\n+            return;\n+         end if;\n+\n+         if Old_Handler = null then\n+            Bind_Handler (Interrupt);\n+         end if;\n+\n+      end Unprotected_Exchange_Handler;\n+\n+   --  Start of processing for Interrupt_Manager\n+\n+   begin\n+      --  By making this task independent of master, when the process\n+      --  goes away, the Interrupt_Manager will terminate gracefully.\n+\n+      System.Tasking.Utilities.Make_Independent;\n+\n+      --  Environmen task gets its own interrupt mask, saves it,\n+      --  and then masks all interrupts except the Keep_Unmasked set.\n+\n+      --  During rendezvous, the Interrupt_Manager receives the old\n+      --  interrupt mask of the environment task, and sets its own\n+      --  interrupt mask to that value.\n+\n+      --  The environment task will call the entry of Interrupt_Manager some\n+      --  during elaboration of the body of this package.\n+\n+      accept Initialize (Mask : IMNG.Interrupt_Mask) do\n+         declare\n+            The_Mask : aliased IMNG.Interrupt_Mask;\n+\n+         begin\n+            IMOP.Copy_Interrupt_Mask (The_Mask, Mask);\n+            IMOP.Set_Interrupt_Mask (The_Mask'Access);\n+         end;\n+      end Initialize;\n+\n+      --  Note: All tasks in RTS will have all the Reserve Interrupts\n+      --  being masked (except the Interrupt_Manager) and Keep_Unmasked\n+      --  unmasked when created.\n+\n+      --  Abort_Task_Interrupt is one of the Interrupt unmasked\n+      --  in all tasks. We mask the Interrupt in this particular task\n+      --  so that \"sigwait\" is possible to catch an explicitely sent\n+      --  Abort_Task_Interrupt from the Server_Tasks.\n+\n+      --  This sigwaiting is needed so that we make sure a Server_Task is\n+      --  out of its own sigwait state. This extra synchronization is\n+      --  necessary to prevent following senarios.\n+\n+      --   1) Interrupt_Manager sends an Abort_Task_Interrupt to the\n+      --      Server_Task then changes its own interrupt mask (OS level).\n+      --      If an interrupt (corresponding to the Server_Task) arrives\n+      --      in the nean time we have the Interrupt_Manager umnasked and\n+      --      the Server_Task waiting on sigwait.\n+\n+      --   2) For unbinding handler, we install a default action in the\n+      --      Interrupt_Manager. POSIX.1c states that the result of using\n+      --      \"sigwait\" and \"sigaction\" simaltaneously on the same interrupt\n+      --      is undefined. Therefore, we need to be informed from the\n+      --      Server_Task of the fact that the Server_Task is out of its\n+      --      sigwait stage.\n+\n+      IMOP.Empty_Interrupt_Mask (Intwait_Mask'Access);\n+      IMOP.Add_To_Interrupt_Mask\n+        (Intwait_Mask'Access, IMNG.Abort_Task_Interrupt);\n+      IMOP.Thread_Block_Interrupt\n+        (IMNG.Abort_Task_Interrupt);\n+\n+      loop\n+         --  A block is needed to absorb Program_Error exception\n+\n+         declare\n+            Old_Handler : Parameterless_Handler;\n+\n+         begin\n+            select\n+\n+            accept Attach_Handler\n+               (New_Handler : in Parameterless_Handler;\n+                Interrupt   : in Interrupt_ID;\n+                Static      : in Boolean;\n+                Restoration : in Boolean := False)\n+            do\n+               Lock_Interrupt (Self_ID, Interrupt);\n+               Unprotected_Exchange_Handler\n+                 (Old_Handler, New_Handler, Interrupt, Static, Restoration);\n+               Unlock_Interrupt (Self_ID, Interrupt);\n+            end Attach_Handler;\n+\n+            or accept Exchange_Handler\n+               (Old_Handler : out Parameterless_Handler;\n+                New_Handler : in Parameterless_Handler;\n+                Interrupt   : in Interrupt_ID;\n+                Static      : in Boolean)\n+            do\n+               Lock_Interrupt (Self_ID, Interrupt);\n+               Unprotected_Exchange_Handler\n+                 (Old_Handler, New_Handler, Interrupt, Static);\n+               Unlock_Interrupt (Self_ID, Interrupt);\n+            end Exchange_Handler;\n+\n+            or accept Detach_Handler\n+               (Interrupt   : in Interrupt_ID;\n+                Static      : in Boolean)\n+            do\n+               Lock_Interrupt (Self_ID, Interrupt);\n+               Unprotected_Detach_Handler (Interrupt, Static);\n+               Unlock_Interrupt (Self_ID, Interrupt);\n+            end Detach_Handler;\n+\n+            or accept Bind_Interrupt_To_Entry\n+              (T       : Task_ID;\n+               E       : Task_Entry_Index;\n+               Interrupt : Interrupt_ID)\n+            do\n+               Lock_Interrupt (Self_ID, Interrupt);\n+\n+               --  if there is a binding already (either a procedure or an\n+               --  entry), raise Program_Error (propagate it to the caller).\n+\n+               if User_Handler (Interrupt).H /= null\n+                 or else User_Entry (Interrupt).T /= Null_Task\n+               then\n+                  Unlock_Interrupt (Self_ID, Interrupt);\n+                  Raise_Exception (Program_Error'Identity,\n+                    \"A binding for this interrupt is already present\");\n+               end if;\n+\n+               --  The interrupt should no longer be ingnored if\n+               --  it was ever ignored.\n+\n+               Ignored (Interrupt) := False;\n+               User_Entry (Interrupt) := Entry_Assoc' (T => T, E => E);\n+\n+               --  Indicate the attachment of Interrupt Entry in ATCB.\n+               --  This is need so that when an Interrupt Entry task terminates\n+               --  the binding can be cleaned. The call to unbinding must be\n+               --  make by the task before it terminates.\n+\n+               T.Interrupt_Entry := True;\n+\n+               --  Invoke a corresponding Server_Task if not yet created.\n+               --  Place Task_ID info in Server_ID array.\n+\n+               if Server_ID (Interrupt) = Null_Task then\n+\n+                  --  When a new Server_Task is created, it should have its\n+                  --  signal mask set to the All_Tasks_Mask.\n+\n+                  IMOP.Set_Interrupt_Mask\n+                    (IMOP.All_Tasks_Mask'Access, Old_Mask'Access);\n+                  Access_Hold := new Server_Task (Interrupt);\n+                  IMOP.Set_Interrupt_Mask (Old_Mask'Access);\n+                  Server_ID (Interrupt) :=\n+                    To_System (Access_Hold.all'Identity);\n+               end if;\n+\n+               Bind_Handler (Interrupt);\n+               Unlock_Interrupt (Self_ID, Interrupt);\n+            end Bind_Interrupt_To_Entry;\n+\n+            or accept Detach_Interrupt_Entries (T : Task_ID)\n+            do\n+               for I in Interrupt_ID'Range loop\n+                  if not Is_Reserved (I) then\n+                     Lock_Interrupt (Self_ID, I);\n+\n+                     if User_Entry (I).T = T then\n+\n+                        --  The interrupt should no longer be ingnored if\n+                        --  it was ever ignored.\n+\n+                        Ignored (I) := False;\n+                        User_Entry (I) := Entry_Assoc'\n+                          (T => Null_Task, E => Null_Task_Entry);\n+                        Unbind_Handler (I);\n+                     end if;\n+\n+                     Unlock_Interrupt (Self_ID, I);\n+                  end if;\n+               end loop;\n+\n+               --  Indicate in ATCB that no Interrupt Entries are attached.\n+\n+               T.Interrupt_Entry := False;\n+            end Detach_Interrupt_Entries;\n+\n+            or accept Block_Interrupt (Interrupt : Interrupt_ID) do\n+               Lock_Interrupt (Self_ID, Interrupt);\n+\n+               if Blocked (Interrupt) then\n+                  Unlock_Interrupt (Self_ID, Interrupt);\n+                  return;\n+               end if;\n+\n+               Blocked (Interrupt) := True;\n+               Last_Unblocker (Interrupt) := Null_Task;\n+\n+               --  Mask this task for the given Interrupt so that all tasks\n+               --  are masked for the Interrupt.\n+\n+               IMOP.Thread_Block_Interrupt (IMNG.Interrupt_ID (Interrupt));\n+\n+               if User_Handler (Interrupt).H /= null\n+                 or else  User_Entry (Interrupt).T /= Null_Task\n+               then\n+                  --  This is the case where the Server_Task is waiting on\n+                  --  \"sigwait.\" Wake it up by sending an Abort_Task_Interrupt\n+                  --  so that the Server_Task waits on Cond.\n+\n+                  POP.Abort_Task (Server_ID (Interrupt));\n+\n+                  --  Make sure corresponding Server_Task is out of its own\n+                  --  sigwait state.\n+\n+                  Ret_Interrupt :=\n+                    Interrupt_ID (IMOP.Interrupt_Wait (Intwait_Mask'Access));\n+                  pragma Assert\n+                    (Ret_Interrupt = Interrupt_ID (IMNG.Abort_Task_Interrupt));\n+               end if;\n+\n+               Unlock_Interrupt (Self_ID, Interrupt);\n+            end Block_Interrupt;\n+\n+            or accept Unblock_Interrupt (Interrupt : Interrupt_ID) do\n+               Lock_Interrupt (Self_ID, Interrupt);\n+\n+               if not Blocked (Interrupt) then\n+                  Unlock_Interrupt (Self_ID, Interrupt);\n+                  return;\n+               end if;\n+\n+               Blocked (Interrupt) := False;\n+               Last_Unblocker (Interrupt) :=\n+                 To_System (Unblock_Interrupt'Caller);\n+\n+               if User_Handler (Interrupt).H = null\n+                 and then User_Entry (Interrupt).T = Null_Task\n+               then\n+                  --  No handler is attached. Unmask the Interrupt so that\n+                  --  the default action can be carried out.\n+                  IMOP.Thread_Unblock_Interrupt\n+                    (IMNG.Interrupt_ID (Interrupt));\n+\n+               else\n+                  --  The Server_Task must be waiting on the Cond variable\n+                  --  since it was being blocked and an Interrupt Hander or\n+                  --  an Entry was there. Wake it up and let it change\n+                  --  it place of waiting according to its new state.\n+                  POP.Wakeup (Server_ID (Interrupt),\n+                    Interrupt_Server_Blocked_Interrupt_Sleep);\n+               end if;\n+\n+               Unlock_Interrupt (Self_ID, Interrupt);\n+            end Unblock_Interrupt;\n+\n+            or accept Ignore_Interrupt (Interrupt : Interrupt_ID) do\n+               Lock_Interrupt (Self_ID, Interrupt);\n+\n+               if Ignored (Interrupt) then\n+                  Unlock_Interrupt (Self_ID, Interrupt);\n+                  return;\n+               end if;\n+\n+               Ignored (Interrupt) := True;\n+\n+               --  If there is a handler associated with the Interrupt,\n+               --  detach it first. In this way we make sure that the\n+               --  Server_Task is not on sigwait. This is legal since\n+               --  Unignore_Interrupt is to install the default action.\n+\n+               if User_Handler (Interrupt).H /= null then\n+                  Unprotected_Detach_Handler\n+                    (Interrupt => Interrupt, Static => True);\n+\n+               elsif User_Entry (Interrupt).T /= Null_Task then\n+                  User_Entry (Interrupt) := Entry_Assoc'\n+                    (T => Null_Task, E => Null_Task_Entry);\n+                  Unbind_Handler (Interrupt);\n+               end if;\n+\n+               IMOP.Install_Ignore_Action (IMNG.Interrupt_ID (Interrupt));\n+               Unlock_Interrupt (Self_ID, Interrupt);\n+            end Ignore_Interrupt;\n+\n+            or accept Unignore_Interrupt (Interrupt : Interrupt_ID) do\n+               Lock_Interrupt (Self_ID, Interrupt);\n+               Ignored (Interrupt) := False;\n+\n+               --  If there is a handler associated with the Interrupt,\n+               --  detach it first. In this way we make sure that the\n+               --  Server_Task is not on sigwait. This is legal since\n+               --  Unignore_Interrupt is to install the default action.\n+\n+               if User_Handler (Interrupt).H /= null then\n+                  Unprotected_Detach_Handler\n+                    (Interrupt => Interrupt, Static => True);\n+\n+               elsif User_Entry (Interrupt).T /= Null_Task then\n+                  User_Entry (Interrupt) := Entry_Assoc'\n+                    (T => Null_Task, E => Null_Task_Entry);\n+                  Unbind_Handler (Interrupt);\n+               end if;\n+\n+               IMOP.Install_Default_Action (IMNG.Interrupt_ID (Interrupt));\n+               Unlock_Interrupt (Self_ID, Interrupt);\n+            end Unignore_Interrupt;\n+\n+            end select;\n+\n+         exception\n+\n+            --  If there is a program error we just want to propagate it to\n+            --  the caller and do not want to stop this task.\n+\n+            when Program_Error =>\n+               null;\n+\n+            when others =>\n+               pragma Assert\n+                 (Shutdown (\"Interrupt_Manager---exception not expected\"));\n+               null;\n+         end;\n+\n+      end loop;\n+\n+      pragma Assert (Shutdown (\"Interrupt_Manager---should not get here\"));\n+\n+   end Interrupt_Manager;\n+\n+   -----------------\n+   -- Server_Task --\n+   -----------------\n+\n+   task body Server_Task is\n+      Intwait_Mask    : aliased IMNG.Interrupt_Mask;\n+      Ret_Interrupt   : Interrupt_ID;\n+      Self_ID         : Task_ID := Self;\n+      Tmp_Handler     : Parameterless_Handler;\n+      Tmp_ID          : Task_ID;\n+      Tmp_Entry_Index : Task_Entry_Index;\n+\n+   begin\n+      --  By making this task independent of master, when the process\n+      --  goes away, the Server_Task will terminate gracefully.\n+\n+      System.Tasking.Utilities.Make_Independent;\n+\n+      --  Install default action in system level.\n+\n+      IMOP.Install_Default_Action (IMNG.Interrupt_ID (Interrupt));\n+\n+      --  Note: All tasks in RTS will have all the Reserve Interrupts\n+      --  being masked (except the Interrupt_Manager) and Keep_Unmasked\n+      --  unmasked when created.\n+\n+      --  Abort_Task_Interrupt is one of the Interrupt unmasked\n+      --  in all tasks. We mask the Interrupt in this particular task\n+      --  so that \"sigwait\" is possible to catch an explicitely sent\n+      --  Abort_Task_Interrupt from the Interrupt_Manager.\n+\n+      --  There are two Interrupt interrupts that this task catch through\n+      --  \"sigwait.\" One is the Interrupt this task is designated to catch\n+      --  in order to execure user handler or entry. The other one is the\n+      --  Abort_Task_Interrupt. This interrupt is being sent from the\n+      --  Interrupt_Manager to inform status changes (e.g: become Blocked,\n+      --  Handler or Entry is to be detached).\n+\n+      --  Prepare a mask to used for sigwait.\n+\n+      IMOP.Empty_Interrupt_Mask (Intwait_Mask'Access);\n+\n+      IMOP.Add_To_Interrupt_Mask\n+        (Intwait_Mask'Access, IMNG.Interrupt_ID (Interrupt));\n+\n+      IMOP.Add_To_Interrupt_Mask\n+        (Intwait_Mask'Access, IMNG.Abort_Task_Interrupt);\n+\n+      IMOP.Thread_Block_Interrupt\n+        (IMNG.Abort_Task_Interrupt);\n+\n+      PIO.Set_Interrupt_ID (IMNG.Interrupt_ID (Interrupt), Self_ID);\n+\n+      loop\n+         System.Tasking.Initialization.Defer_Abort (Self_ID);\n+         POP.Write_Lock (Self_ID);\n+\n+         if User_Handler (Interrupt).H = null\n+           and then User_Entry (Interrupt).T = Null_Task\n+         then\n+            --  No Interrupt binding. If there is an interrupt,\n+            --  Interrupt_Manager will take default action.\n+\n+            Self_ID.Common.State := Interrupt_Server_Blocked_Interrupt_Sleep;\n+            POP.Sleep (Self_ID, Interrupt_Server_Idle_Sleep);\n+            Self_ID.Common.State := Runnable;\n+\n+         elsif Blocked (Interrupt) then\n+\n+            --  Interrupt is blocked. Stay here, so we won't catch\n+            --  the Interrupt.\n+\n+            Self_ID.Common.State := Interrupt_Server_Blocked_Interrupt_Sleep;\n+            POP.Sleep (Self_ID, Interrupt_Server_Blocked_Interrupt_Sleep);\n+            Self_ID.Common.State := Runnable;\n+\n+         else\n+            --  A Handler or an Entry is installed. At this point all tasks\n+            --  mask for the Interrupt is masked. Catch the Interrupt using\n+            --  sigwait.\n+\n+            --  This task may wake up from sigwait by receiving an interrupt\n+            --  (Abort_Task_Interrupt) from the Interrupt_Manager for unbinding\n+            --  a Procedure Handler or an Entry. Or it could be a wake up\n+            --  from status change (Unblocked -> Blocked). If that is not\n+            --  the case, we should exceute the attached Procedure or Entry.\n+\n+            POP.Unlock (Self_ID);\n+\n+            Ret_Interrupt :=\n+              Interrupt_ID (IMOP.Interrupt_Wait (Intwait_Mask'Access));\n+\n+            if Ret_Interrupt = Interrupt_ID (IMNG.Abort_Task_Interrupt) then\n+\n+               --  Inform the Interrupt_Manager of wakeup from above sigwait.\n+\n+               POP.Abort_Task (Interrupt_Manager_ID);\n+               POP.Write_Lock (Self_ID);\n+\n+            else\n+               pragma Assert (Ret_Interrupt = Interrupt);\n+\n+               POP.Write_Lock (Self_ID);\n+\n+               --  Even though we have received an Interrupt the status may\n+               --  have changed already before we got the Self_ID lock above.\n+               --  Therefore we make sure a Handler or an Entry is still\n+               --  there and make appropriate call.\n+               --  If there is no calls to make we need to regenerate the\n+               --  Interrupt in order not to lose it.\n+\n+               if User_Handler (Interrupt).H /= null then\n+                  Tmp_Handler := User_Handler (Interrupt).H;\n+\n+                  --  RTS calls should not be made with self being locked.\n+\n+                  POP.Unlock (Self_ID);\n+\n+                  Tmp_Handler.all;\n+                  POP.Write_Lock (Self_ID);\n+\n+               elsif User_Entry (Interrupt).T /= Null_Task then\n+                  Tmp_ID := User_Entry (Interrupt).T;\n+                  Tmp_Entry_Index := User_Entry (Interrupt).E;\n+\n+                  --  RTS calls should not be made with self being locked.\n+\n+                  POP.Unlock (Self_ID);\n+\n+                  System.Tasking.Rendezvous.Call_Simple\n+                    (Tmp_ID, Tmp_Entry_Index, System.Null_Address);\n+\n+                  POP.Write_Lock (Self_ID);\n+               else\n+                  --  This is a situation that this task wake up\n+                  --  receiving an Interrupt and before it get the lock\n+                  --  the Interrupt is blocked. We do not\n+                  --  want to lose the interrupt in this case so that\n+                  --  regenerate the Interrupt to process level;\n+\n+                  IMOP.Interrupt_Self_Process (IMNG.Interrupt_ID (Interrupt));\n+               end if;\n+            end if;\n+\n+         end if;\n+\n+         POP.Unlock (Self_ID);\n+         System.Tasking.Initialization.Undefer_Abort (Self_ID);\n+\n+         --  Undefer abort here to allow a window for this task\n+         --  to be aborted  at the time of system shutdown.\n+      end loop;\n+\n+      pragma Assert (Shutdown (\"Server_Task---should not get here\"));\n+   end Server_Task;\n+\n+--  Elaboration code for package System.Interrupts\n+\n+begin\n+\n+   --  Get Interrupt_Manager's ID so that Abort_Interrupt can be sent.\n+\n+   Interrupt_Manager_ID := To_System (Interrupt_Manager'Identity);\n+\n+   --  Initialize the lock L.\n+\n+   Initialization.Defer_Abort (Self);\n+   POP.Initialize_Lock (L'Access, POP.PO_Level);\n+   Initialization.Undefer_Abort (Self);\n+\n+   --  During the elaboration of this package body we want RTS to\n+   --  inherit the interrupt mask from the Environment Task.\n+\n+   --  The Environment Task should have gotten its mask from\n+   --  the enclosing process during the RTS start up. (See\n+   --  in s-inmaop.adb). Pass the Interrupt_Mask of the Environment\n+   --  task to the Interrupt_Manager.\n+\n+   --  Note : At this point we know that all tasks (including\n+   --  RTS internal servers) are masked for non-reserved signals\n+   --  (see s-taprop.adb). Only the Interrupt_Manager will have\n+   --  masks set up differently inheriting the original Environment\n+   --  Task's mask.\n+\n+   Interrupt_Manager.Initialize (IMOP.Environment_Mask);\n+end System.Interrupts;"}, {"sha": "e6cc88363958bc931f5ddf88e9b19c286f9986c1", "filename": "gcc/ada/s-interr.ads", "status": "added", "additions": 281, "deletions": 0, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-interr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-interr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,281 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                     S Y S T E M . I N T E R R U P T S                    --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.18 $\n+--                                                                          --\n+--          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Note: the compiler generates direct calls to this interface, via Rtsfind.\n+--  Any changes to this interface may require corresponding compiler changes.\n+\n+--  This package encapsulates the implementation of interrupt or signal\n+--  handlers.  It is logically an extension of the body of Ada.Interrupts.\n+--  It is made a child of System to allow visibility of various\n+--  runtime system internal data and operations.\n+\n+--  See System.Interrupt_Management for core interrupt/signal interfaces.\n+\n+--  These two packages are separated in order to allow\n+--  System.Interrupt_Management to be used without requiring the whole\n+--  tasking implementation to be linked and elaborated.\n+\n+with System.Tasking;\n+--  used for Task_ID\n+\n+with System.Tasking.Protected_Objects.Entries;\n+--  used for Protection_Entries\n+\n+with System.OS_Interface;\n+--  used for Max_Interrupt\n+\n+package System.Interrupts is\n+\n+   pragma Elaborate_Body;\n+   --  Comment needed on why this is here ???\n+\n+   -------------------------\n+   -- Constants and types --\n+   -------------------------\n+\n+   Default_Interrupt_Priority : constant System.Interrupt_Priority :=\n+     System.Interrupt_Priority'Last;\n+   --  Default value used when a pragma Interrupt_Handler or Attach_Handler is\n+   --  specified without an Interrupt_Priority pragma, see D.3(10).\n+\n+   type Ada_Interrupt_ID is range 0 .. System.OS_Interface.Max_Interrupt;\n+   --  Avoid inheritance by Ada.Interrupts.Interrupt_ID of unwanted operations\n+\n+   type Interrupt_ID is range 0 .. System.OS_Interface.Max_Interrupt;\n+\n+   type Parameterless_Handler is access protected procedure;\n+\n+   ----------------------\n+   -- General services --\n+   ----------------------\n+\n+   --  Attempt to attach a Handler to an Interrupt to which an Entry is\n+   --  already bound will raise a Program_Error.\n+\n+   function Is_Reserved (Interrupt : Interrupt_ID) return Boolean;\n+\n+   function Is_Entry_Attached (Interrupt : Interrupt_ID) return Boolean;\n+\n+   function Is_Handler_Attached (Interrupt : Interrupt_ID) return Boolean;\n+\n+   function Current_Handler\n+     (Interrupt : Interrupt_ID)\n+      return Parameterless_Handler;\n+\n+   --  Calling the following procedures with New_Handler = null\n+   --  and Static = true means that we want to modify the current handler\n+   --  regardless of the previous handler's binding status.\n+   --  (i.e. we do not care whether it is a dynamic or static handler)\n+\n+   procedure Attach_Handler\n+     (New_Handler : Parameterless_Handler;\n+      Interrupt   : Interrupt_ID;\n+      Static      : Boolean := False);\n+\n+   procedure Exchange_Handler\n+     (Old_Handler : out Parameterless_Handler;\n+      New_Handler : Parameterless_Handler;\n+      Interrupt   : Interrupt_ID;\n+      Static      : Boolean := False);\n+\n+   procedure Detach_Handler\n+     (Interrupt : Interrupt_ID;\n+      Static    : Boolean := False);\n+\n+   function Reference\n+     (Interrupt : Interrupt_ID)\n+     return       System.Address;\n+\n+   ---------------------------------\n+   --  Interrupt entries services --\n+   ---------------------------------\n+\n+   --  Routines needed for Interrupt Entries\n+   --  Attempt to bind an Entry to an Interrupt to which a Handler is\n+   --  already attached will raise a Program_Error.\n+\n+   procedure Bind_Interrupt_To_Entry\n+     (T       : System.Tasking.Task_ID;\n+      E       : System.Tasking.Task_Entry_Index;\n+      Int_Ref : System.Address);\n+\n+   procedure Detach_Interrupt_Entries (T : System.Tasking.Task_ID);\n+   --  This procedure detaches all the Interrupt Entries bound to a task.\n+\n+   -------------------------------\n+   --  POSIX.5 signals services --\n+   -------------------------------\n+\n+   --  Routines needed for POSIX dot5 POSIX_Signals\n+\n+   procedure Block_Interrupt (Interrupt : Interrupt_ID);\n+   --  Block the Interrupt on the process level\n+\n+   procedure Unblock_Interrupt (Interrupt : Interrupt_ID);\n+\n+   function Unblocked_By\n+     (Interrupt   : Interrupt_ID)\n+      return System.Tasking.Task_ID;\n+   --  It returns the ID of the last Task which Unblocked this Interrupt.\n+   --  It returns Null_Task if no tasks have ever requested the\n+   --  Unblocking operation or the Interrupt is currently Blocked.\n+\n+   function Is_Blocked (Interrupt : Interrupt_ID) return Boolean;\n+   --  Comment needed ???\n+\n+   procedure Ignore_Interrupt (Interrupt : Interrupt_ID);\n+   --  Set the sigacion for the interrupt to SIG_IGN.\n+\n+   procedure Unignore_Interrupt (Interrupt : Interrupt_ID);\n+   --  Comment needed ???\n+\n+   function Is_Ignored (Interrupt : Interrupt_ID) return Boolean;\n+   --  Comment needed ???\n+\n+   --  Note : Direct calls to sigaction, sigprocmask, thr_sigsetmask or any\n+   --  other low-level interface that changes the signal action or signal mask\n+   --  needs a careful thought.\n+\n+   --  One may acheive the effect of system calls first making RTS blocked\n+   --  (by calling Block_Interrupt) for the signal under consideration.\n+   --  This will make all the tasks in RTS blocked for the Interrupt.\n+\n+   ----------------------\n+   -- Protection types --\n+   ----------------------\n+\n+   --  Routines and types needed to implement Interrupt_Handler and\n+   --  Attach_Handler.\n+\n+   --  There are two kinds of protected objects that deal with interrupts:\n+\n+   --  (1) Only Interrupt_Handler pragmas are used. We need to be able to\n+   --  tell if an Interrupt_Handler applies to a given procedure, so\n+   --  Register_Interrupt_Handler has to be called for all the potential\n+   --  handlers, it should be done by calling Register_Interrupt_Handler\n+   --  with the handler code address. On finalization, which can happen only\n+   --  has part of library level finalization since PO with\n+   --  Interrupt_Handler pragmas can only be declared at library level,\n+   --  nothing special needs to be done since the default handlers have been\n+   --  restored as part of task completion which is done just before global\n+   --  finalization.  Dynamic_Interrupt_Protection should be used in this\n+   --  case.\n+\n+   --  (2) Attach_Handler pragmas are used, and possibly Interrupt_Handler\n+   --  pragma. We need to attach the handlers to the given interrupts when\n+   --  the objet is elaborated. This should be done by constructing an array\n+   --  of pairs (interrupt, handler) from the pragmas and calling\n+   --  Install_Handlers with it (types to be used are New_Handler_Item and\n+   --  New_Handler_Array). On finalization, we need to restore the handlers\n+   --  that were installed before the elaboration of the PO, so we need to\n+   --  store these previous handlers. This is also done by Install_Handlers,\n+   --  the room for these informations is provided by adding a discriminant\n+   --  which is the number of Attach_Handler pragmas and an array of this\n+   --  size in the protection type, Static_Interrupt_Protection.\n+\n+   procedure Register_Interrupt_Handler\n+     (Handler_Addr : System.Address);\n+   --  This routine should be called by the compiler to allow the\n+   --  handler be used as an Interrupt Handler. That means call this\n+   --  procedure for each pragma Interrup_Handler providing the\n+   --  address of the handler (not including the pointer to the\n+   --  actual PO, this way this routine is called only once for\n+   --  each type definition of PO).\n+\n+   type Static_Handler_Index is range 0 .. Integer'Last;\n+   subtype Positive_Static_Handler_Index is\n+     Static_Handler_Index range 1 .. Static_Handler_Index'Last;\n+   --  Comment needed ???\n+\n+   type Previous_Handler_Item is record\n+      Interrupt : Interrupt_ID;\n+      Handler   : Parameterless_Handler;\n+      Static    : Boolean;\n+   end record;\n+   --  Contains all the information needed to restore a previous handler.\n+\n+   type Previous_Handler_Array is array\n+     (Positive_Static_Handler_Index range <>) of Previous_Handler_Item;\n+\n+   type New_Handler_Item is record\n+      Interrupt : Interrupt_ID;\n+      Handler   : Parameterless_Handler;\n+   end record;\n+   --  Contains all the information from an Attach_Handler pragma.\n+\n+   type New_Handler_Array is\n+     array (Positive_Static_Handler_Index range <>) of New_Handler_Item;\n+   --  Comment needed ???\n+\n+   --  Case (1)\n+\n+   type Dynamic_Interrupt_Protection is new\n+     Tasking.Protected_Objects.Entries.Protection_Entries with null record;\n+\n+   --  ??? Finalize is not overloaded since we currently have no\n+   --  way to detach the handlers during library level finalization.\n+\n+   function Has_Interrupt_Or_Attach_Handler\n+     (Object : access Dynamic_Interrupt_Protection) return Boolean;\n+   --  Returns True.\n+\n+   --  Case (2)\n+\n+   type Static_Interrupt_Protection\n+     (Num_Entries        : Tasking.Protected_Objects.Protected_Entry_Index;\n+      Num_Attach_Handler : Static_Handler_Index)\n+   is new\n+     Tasking.Protected_Objects.Entries.Protection_Entries (Num_Entries) with\n+     record\n+       Previous_Handlers : Previous_Handler_Array (1 .. Num_Attach_Handler);\n+     end record;\n+\n+   function Has_Interrupt_Or_Attach_Handler\n+     (Object : access Static_Interrupt_Protection)\n+      return   Boolean;\n+   --  Returns True.\n+\n+   procedure Finalize (Object : in out Static_Interrupt_Protection);\n+   --  Restore previous handlers as required by C.3.1(12) then call\n+   --  Finalize (Protection).\n+\n+   procedure Install_Handlers\n+     (Object       : access Static_Interrupt_Protection;\n+      New_Handlers : in New_Handler_Array);\n+   --  Store the old handlers in Object.Previous_Handlers and install\n+   --  the new static handlers.\n+\n+end System.Interrupts;"}, {"sha": "0f89bd7f5086cbc5de630eb9c931cc29ddb7027b", "filename": "gcc/ada/s-intman.ads", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-intman.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-intman.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,128 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--            S Y S T E M . I N T E R R U P T _ M A N A G E M E N T         --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.4 $                             --\n+--                                                                          --\n+--          Copyright (C) 1991-1998 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package encapsulates and centralizes information about\n+--  all uses of interrupts (or signals), including the\n+--  target-dependent mapping of interrupts (or signals) to exceptions.\n+\n+--  PLEASE DO NOT add any with-clauses to this package.\n+--  This is designed to work for both tasking and non-tasking systems,\n+--  without pulling in any of the tasking support.\n+\n+--  PLEASE DO NOT remove the Elaborate_Body pragma from this package.\n+--  Elaboration of this package should happen early, as most other\n+--  initializations depend on it.\n+--  Forcing immediate elaboration of the body also helps to enforce\n+--  the design assumption that this is a second-level\n+--  package, just one level above System.OS_Interface, with no\n+--  cross-dependences.\n+\n+--  PLEASE DO NOT put any subprogram declarations with arguments of\n+--  type Interrupt_ID into the visible part of this package.\n+--  The type Interrupt_ID is used to derive the type in Ada.Interrupts,\n+--  and adding more operations to that type would be illegal according\n+--  to the Ada Reference Manual.  (This is the reason why the signals sets\n+--  below are implemented as visible arrays rather than functions.)\n+\n+with System.OS_Interface;\n+--  used for Signal\n+--           sigset_t\n+\n+package System.Interrupt_Management is\n+\n+   pragma Elaborate_Body;\n+\n+   type Interrupt_Mask is limited private;\n+\n+   type Interrupt_ID is new System.OS_Interface.Signal;\n+\n+   type Interrupt_Set is array (Interrupt_ID) of Boolean;\n+\n+   --  The following objects serve as constants, but are initialized\n+   --  in the body to aid portability.  This permits us\n+   --  to use more portable names for interrupts,\n+   --  where distinct names may map to the same interrupt ID value.\n+   --  For example, suppose SIGRARE is a signal that is not defined on\n+   --  all systems, but is always reserved when it is defined.\n+   --  If we have the convention that ID zero is not used for any \"real\"\n+   --  signals, and SIGRARE = 0 when SIGRARE is not one of the locally\n+   --  supported signals, we can write\n+   --     Reserved (SIGRARE) := true;\n+   --  and the initialization code will be portable.\n+\n+   Abort_Task_Interrupt : Interrupt_ID;\n+   --  The interrupt that is used to implement task abortion,\n+   --  if an interrupt is used for that purpose.\n+   --  This is one of the reserved interrupts.\n+\n+   Keep_Unmasked : Interrupt_Set := (others => False);\n+   --  Keep_Unmasked (I) is true iff the interrupt I is\n+   --  one that must be kept unmasked at all times,\n+   --  except (perhaps) for short critical sections.\n+   --  This includes interrupts that are mapped to exceptions\n+   --  (see System.Interrupt_Exceptions.Is_Exception), but may also\n+   --  include interrupts (e.g. timer) that need to be kept unmasked\n+   --  for other reasons.\n+   --  Where interrupts are implemented as OS signals, and signal masking\n+   --  is per-task, the interrupt should be unmasked in ALL TASKS.\n+\n+   Reserve : Interrupt_Set := (others => False);\n+   --  Reserve (I) is true iff the interrupt I is one that\n+   --  cannot be permitted to be attached to a user handler.\n+   --  The possible reasons are many.  For example,\n+   --  it may be mapped to an exception, used to implement task abortion,\n+   --  or used to implement time delays.\n+\n+   Keep_Masked : Interrupt_Set := (others => False);\n+   --  Keep_Masked (I) is true iff the interrupt I must always be masked.\n+   --  Where interrupts are implemented as OS signals, and signal masking\n+   --  is per-task, the interrupt should be masked in ALL TASKS.\n+   --  There might not be any interrupts in this class, depending on\n+   --  the environment.  For example, if interrupts are OS signals\n+   --  and signal masking is per-task, use of the sigwait operation\n+   --  requires the signal be masked in all tasks.\n+\n+   procedure Initialize_Interrupts;\n+   --  On systems where there is no signal inheritance between tasks (e.g\n+   --  VxWorks, LinuxThreads), this procedure is used to initialize interrupts\n+   --  handling in each task. Otherwise this function should only be called by\n+   --  initialize in this package body.\n+\n+private\n+   type Interrupt_Mask is new System.OS_Interface.sigset_t;\n+   --  in some implementation Interrupt_Mask can be represented\n+   --  as a linked list.\n+end System.Interrupt_Management;"}, {"sha": "b768d9ac2aca5c2c602cdc7ee30637e7d894ff5b", "filename": "gcc/ada/s-io.adb", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-io.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-io.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-io.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,88 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                            S Y S T E M . I O                             --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.7 $\n+--                                                                          --\n+--          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.IO is\n+\n+   --------------\n+   -- New_Line --\n+   --------------\n+\n+   procedure New_Line (Spacing : Positive := 1) is\n+   begin\n+      for J in 1 .. Spacing loop\n+         Put (ASCII.LF);\n+      end loop;\n+   end New_Line;\n+\n+   ---------\n+   -- Put --\n+   ---------\n+\n+   procedure Put (X : Integer) is\n+\n+      procedure Put_Int (X : Integer);\n+      pragma Import (C, Put_Int, \"put_int\");\n+\n+   begin\n+      Put_Int (X);\n+   end Put;\n+\n+   procedure Put (C : Character) is\n+\n+      procedure Put_Char (C : Character);\n+      pragma Import (C, Put_Char, \"put_char\");\n+\n+   begin\n+      Put_Char (C);\n+   end Put;\n+\n+   procedure Put (S : String) is\n+   begin\n+      for J in S'Range loop\n+         Put (S (J));\n+      end loop;\n+   end Put;\n+\n+   --------------\n+   -- Put_Line --\n+   --------------\n+\n+   procedure Put_Line (S : String) is\n+   begin\n+      Put (S);\n+      New_Line;\n+   end Put_Line;\n+\n+end System.IO;"}, {"sha": "a722736eed840b082589d306878e188b22e7bdec", "filename": "gcc/ada/s-io.ads", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-io.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-io.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-io.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,53 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                            S Y S T E M _ I O                             --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1998 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  A simple text I/O package, used for diagnostic output in the runtime,\n+--  This package is also preelaborated, unlike Text_Io, and can thus be\n+--  with'ed by preelaborated library units. It includes only Put routines\n+--  for character, integer, string and a new line function\n+\n+package System.IO is\n+pragma Preelaborate (IO);\n+\n+   procedure Put (X : Integer);\n+\n+   procedure Put (C : Character);\n+\n+   procedure Put (S : String);\n+   procedure Put_Line (S : String);\n+\n+   procedure New_Line (Spacing : Positive := 1);\n+\n+end System.IO;"}, {"sha": "cecdb082dc8a49b15e0d0bb6a67d1f1a7074c0d9", "filename": "gcc/ada/s-maccod.ads", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-maccod.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-maccod.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-maccod.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,134 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                   S Y S T E M . M A C H I N E _ C O D E                  --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.9 $\n+--                                                                          --\n+--          Copyright (C) 1992-2000 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides machine code support, both for instrinsic machine\n+--  operations, and also for machine code statements. See GNAT documentation\n+--  for full details.\n+\n+package System.Machine_Code is\n+pragma Pure (Machine_Code);\n+\n+   type Asm_Input_Operand  is private;\n+   type Asm_Output_Operand is private;\n+   --  These types are never used directly, they are declared only so that\n+   --  the calls to Asm are type correct according to Ada semantic rules.\n+\n+   No_Input_Operands  : constant Asm_Input_Operand;\n+   No_Output_Operands : constant Asm_Output_Operand;\n+\n+   type Asm_Input_Operand_List  is\n+     array (Integer range <>) of Asm_Input_Operand;\n+\n+   type Asm_Output_Operand_List is\n+     array (Integer range <>) of Asm_Output_Operand;\n+\n+   type Asm_Insn is private;\n+   --  This type is not used directly. It is declared only so that the\n+   --  aggregates used in code statements are type correct by Ada rules.\n+\n+   procedure Asm (\n+     Template : String;\n+     Outputs  : Asm_Output_Operand_List;\n+     Inputs   : Asm_Input_Operand_List;\n+     Clobber  : String  := \"\";\n+     Volatile : Boolean := False);\n+\n+   procedure Asm (\n+     Template : String;\n+     Outputs  : Asm_Output_Operand := No_Output_Operands;\n+     Inputs   : Asm_Input_Operand_List;\n+     Clobber  : String  := \"\";\n+     Volatile : Boolean := False);\n+\n+   procedure Asm (\n+     Template : String;\n+     Outputs  : Asm_Output_Operand_List;\n+     Inputs   : Asm_Input_Operand := No_Input_Operands;\n+     Clobber  : String  := \"\";\n+     Volatile : Boolean := False);\n+\n+   procedure Asm (\n+     Template : String;\n+     Outputs  : Asm_Output_Operand := No_Output_Operands;\n+     Inputs   : Asm_Input_Operand  := No_Input_Operands;\n+     Clobber  : String  := \"\";\n+     Volatile : Boolean := False);\n+\n+   function Asm (\n+     Template : String;\n+     Outputs  : Asm_Output_Operand_List;\n+     Inputs   : Asm_Input_Operand_List;\n+     Clobber  : String  := \"\";\n+     Volatile : Boolean := False)\n+     return     Asm_Insn;\n+\n+   function Asm (\n+     Template : String;\n+     Outputs  : Asm_Output_Operand := No_Output_Operands;\n+     Inputs   : Asm_Input_Operand_List;\n+     Clobber  : String  := \"\";\n+     Volatile : Boolean := False)\n+     return     Asm_Insn;\n+\n+   function Asm (\n+     Template : String;\n+     Outputs  : Asm_Output_Operand_List;\n+     Inputs   : Asm_Input_Operand := No_Input_Operands;\n+     Clobber  : String  := \"\";\n+     Volatile : Boolean := False)\n+     return     Asm_Insn;\n+\n+   function Asm (\n+     Template : String;\n+     Outputs  : Asm_Output_Operand := No_Output_Operands;\n+     Inputs   : Asm_Input_Operand  := No_Input_Operands;\n+     Clobber  : String  := \"\";\n+     Volatile : Boolean := False)\n+     return     Asm_Insn;\n+\n+   pragma Import (Intrinsic, Asm);\n+\n+private\n+\n+   type Asm_Input_Operand  is new Integer;\n+   type Asm_Output_Operand is new Integer;\n+   type Asm_Insn           is new Integer;\n+   --  All three of these types are dummy types, to meet the requirements of\n+   --  type consistenty. No values of these types are ever referenced.\n+\n+   No_Input_Operands  : constant Asm_Input_Operand  := 0;\n+   No_Output_Operands : constant Asm_Output_Operand := 0;\n+\n+end System.Machine_Code;"}, {"sha": "ff9cb8b9e7d300c9dd163aed089e1d93c42dcac6", "filename": "gcc/ada/s-mantis.adb", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-mantis.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-mantis.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mantis.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,57 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . M A N T I S S A                       --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--            Copyright (C) 1996 Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body System.Mantissa is\n+\n+   --------------------\n+   -- Mantissa_Value --\n+   --------------------\n+\n+   function Mantissa_Value (First, Last : Integer) return Natural is\n+      Result : Natural := 0;\n+\n+      Val : Integer := Integer'Max (abs First - 1, abs Last);\n+      --  Note: First-1 allows for twos complement largest neg number\n+\n+   begin\n+      while Val /= 0 loop\n+         Val := Val / 2;\n+         Result := Result + 1;\n+      end loop;\n+\n+      return Result;\n+   end Mantissa_Value;\n+\n+end System.Mantissa;"}, {"sha": "ae5b5a679c8bdcffac6efd011fd2aa2d3281c1c0", "filename": "gcc/ada/s-mantis.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-mantis.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-mantis.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mantis.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                      S Y S T E M . M A N T I S S A                       --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $                              --\n+--                                                                          --\n+--            Copyright (C) 1996 Free Software Foundation, Inc.             --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the routine used for typ'Mantissa where typ is a\n+--  fixed-point type with non-static bounds.\n+\n+package System.Mantissa is\n+pragma Pure (Mantissa);\n+\n+   function Mantissa_Value (First, Last : Integer) return Natural;\n+   --  Compute Mantissa value from the given arguments, which are the First\n+   --  and Last value of the fixed-point type, in Integer'Integer_Value form.\n+\n+end System.Mantissa;"}, {"sha": "16e7de2ff70be7a511a3ffebfa4cb635e2114dab", "filename": "gcc/ada/s-mastop.adb", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-mastop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-mastop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mastop.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,130 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                     SYSTEM.MACHINE_STATE_OPERATIONS                      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                             (Dummy version)                              --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--            Copyright (C) 1999-2001 Ada Core Technologies, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This dummy version of System.Machine_State_Operations is used\n+--  on targets for which zero cost exception handling is not implemented.\n+\n+package body System.Machine_State_Operations is\n+\n+   use System.Exceptions;\n+\n+   ----------------------------\n+   -- Allocate_Machine_State --\n+   ----------------------------\n+\n+   function Allocate_Machine_State return Machine_State is\n+   begin\n+      return Machine_State (Null_Address);\n+   end Allocate_Machine_State;\n+\n+   -------------------\n+   -- Enter_Handler --\n+   -------------------\n+\n+   procedure Enter_Handler (M : Machine_State; Handler : Handler_Loc) is\n+   begin\n+      null;\n+   end Enter_Handler;\n+\n+   ----------------\n+   -- Fetch_Code --\n+   ----------------\n+\n+   function Fetch_Code (Loc : Code_Loc) return Code_Loc is\n+   begin\n+      return Loc;\n+   end Fetch_Code;\n+\n+   ------------------------\n+   -- Free_Machine_State --\n+   ------------------------\n+\n+   procedure Free_Machine_State (M : in out Machine_State) is\n+   begin\n+      M := Machine_State (Null_Address);\n+   end Free_Machine_State;\n+\n+   ------------------\n+   -- Get_Code_Loc --\n+   ------------------\n+\n+   function Get_Code_Loc (M : Machine_State) return Code_Loc is\n+   begin\n+      return Null_Address;\n+   end Get_Code_Loc;\n+\n+   --------------------------\n+   -- Machine_State_Length --\n+   --------------------------\n+\n+   function Machine_State_Length\n+     return System.Storage_Elements.Storage_Offset is\n+   begin\n+      return 0;\n+   end Machine_State_Length;\n+\n+   ---------------\n+   -- Pop_Frame --\n+   ---------------\n+\n+   procedure Pop_Frame\n+     (M    : Machine_State;\n+      Info : Subprogram_Info_Type) is\n+   begin\n+      null;\n+   end Pop_Frame;\n+\n+   -----------------------\n+   -- Set_Machine_State --\n+   -----------------------\n+\n+   procedure Set_Machine_State (M : Machine_State) is\n+   begin\n+      null;\n+   end Set_Machine_State;\n+\n+   ------------------------------\n+   -- Set_Signal_Machine_State --\n+   ------------------------------\n+\n+   procedure Set_Signal_Machine_State\n+     (M       : Machine_State;\n+      Context : System.Address) is\n+   begin\n+      null;\n+   end Set_Signal_Machine_State;\n+\n+end System.Machine_State_Operations;"}, {"sha": "ef0282bf524ef40363caf033dd049e92f9ec1b3f", "filename": "gcc/ada/s-mastop.ads", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-mastop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-mastop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-mastop.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,165 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                      SYSTEM.MACHINE_STATE_OPERATIONS                     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--           Copyright (C) 1999-2001 Ada Core Technologies, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Polling (Off);\n+--  We must turn polling off for this unit, because otherwise we get\n+--  elaboration circularities with System.Exception_Tables.\n+\n+with System.Storage_Elements;\n+with System.Exceptions;\n+\n+package System.Machine_State_Operations is\n+\n+   subtype Code_Loc is System.Address;\n+   --  Code location used in building exception tables and for call\n+   --  addresses when propagating an exception (also traceback table)\n+   --  Values of this type are created by using Label'Address or\n+   --  extracted from machine states using Get_Code_Loc.\n+\n+   type Machine_State is new System.Address;\n+   --  The table based exception handling approach (see a-except.adb) isolates\n+   --  the target dependent aspects using an abstract data type interface\n+   --  to the type Machine_State, which is represented as a System.Address\n+   --  value (presumably implemented as a pointer to an appropriate record\n+   --  structure).\n+\n+   function Machine_State_Length return System.Storage_Elements.Storage_Offset;\n+   --  Function to determine the length of the Storage_Array needed to hold\n+   --  a machine state. The machine state will always be maximally aligned.\n+   --  The value returned is a constant that will be used to allocate space\n+   --  for a machine state value.\n+\n+   function Allocate_Machine_State return Machine_State;\n+   --  Allocate the required space for a Machine_State\n+\n+   procedure Free_Machine_State (M : in out Machine_State);\n+   --  Free the dynamic memory taken by Machine_State\n+\n+   --  The initial value of type Machine_State is created by the low level\n+   --  routine that actually raises an exception using the special builtin\n+   --  _builtin_machine_state. This value will typically encode the value\n+   --  of the program counter, and relevant registers. The following\n+   --  operations are defined on Machine_State values:\n+\n+   function Get_Code_Loc (M : Machine_State) return Code_Loc;\n+   --  This function extracts the program counter value from a machine\n+   --  state, which the caller uses for searching the exception tables,\n+   --  and also for recording entries in the traceback table. The call\n+   --  returns a value of Null_Loc if the machine state represents the\n+   --  outer level, or some other frame for which no information can be\n+   --  provided.\n+\n+   procedure Pop_Frame\n+     (M    : Machine_State;\n+      Info : System.Exceptions.Subprogram_Info_Type);\n+   --  This procedure pops the machine state M so that it represents the\n+   --  call point, as though the current subprogram had returned. It\n+   --  changes only the value referenced by M, and does not affect\n+   --  the current stack environment.\n+   --\n+   --  The Info parameter represents information generated by the backend\n+   --  (see description of Subprogram_Info node in sinfo.ads). This\n+   --  information is stored as static data during compilation. The\n+   --  caller then passes this information to Pop_Frame, which will\n+   --  use it to determine what must be changed in the machine state\n+   --  (e.g. which save-over-call registers must be restored, and from\n+   --  where on the stack frame they must be restored).\n+   --\n+   --  A value of No_Info for Info means either that the backend provided\n+   --  no information for current frame, or that the current frame is an\n+   --  other language frame for which no information exists, or that this\n+   --  is an outer level subprogram. In any case, Pop_Frame sets the code\n+   --  location to Null_Address when it pops past such a frame, and this\n+   --  is taken as an indication that the exception is unhandled.\n+\n+   --  Note: at the current time, Info, if present is always a copy of\n+   --  the entry point of the procedure, as found by searching the\n+   --  subprogram table. For the case where a procedure is indeed in\n+   --  the table (either it is an Ada procedure, or a foreign procedure\n+   --  which is registered using pragma Propagate_Exceptions), then the\n+   --  entry point information will indeed be correct. It may well be\n+   --  possible for Pop_Frame to avoid using the Info parameter (for\n+   --  example if it consults auxiliary Dwarf tables to do its job).\n+   --  This is desirable if it can be done, because it means that it\n+   --  will work fine to propagate exceptions through unregistered\n+   --  foreign procedures. What will happen is that the search in the\n+   --  Ada subprogram table will find a junk entry. Even if this junk\n+   --  entry has an exception table, none of them will apply to the\n+   --  current location, so they will be ignored, and then Pop_Frame\n+   --  will be called to pop the frame. The Info parameter for this\n+   --  call will be junk, but if it is not used that does not matter.\n+   --  Note that the address recorded in the traceback table is of\n+   --  the exception location, so the traceback will be correct even\n+   --  in this case.\n+\n+   procedure Enter_Handler\n+     (M       : Machine_State;\n+      Handler : System.Exceptions.Handler_Loc);\n+   --  When Propagate_Handler locates an applicable exception handler, it\n+   --  calls Enter_Handler, passing it two parameters. The first is the\n+   --  machine state that corresponds to what is required for entry to\n+   --  the handler, as computed by repeated Pop_Frame calls to reach the\n+   --  handler to be entered. The second is the code location for the\n+   --  handler itself which is the address of the label at the start of\n+   --  the handler code.\n+   --\n+   --  Note: The machine state M is likely stored on the part of the\n+   --  stack that will be popped by the call, so care must be taken\n+   --  not to pop the stack until the Machine_State is entirely read.\n+   --  The value passed as Handler was obtained from elaboration of\n+   --  an N_Handler_Loc node by the backend.\n+\n+   function Fetch_Code (Loc : Code_Loc) return Code_Loc;\n+   --  Some architectures (notably VMS) use a descriptor to describe\n+   --  a subprogram address. This function computes the actual starting\n+   --  address of the code from Loc.\n+   --  Do not add pragma Inline, see 9116-002.\n+   --  ??? This function will go away when 'Code_Address is fixed on VMS.\n+\n+   procedure Set_Machine_State (M : Machine_State);\n+   --  This routine sets M from the current machine state. It is called\n+   --  when an exception is initially signalled to initialize the state.\n+\n+   procedure Set_Signal_Machine_State\n+     (M       : Machine_State;\n+      Context : System.Address);\n+   --  This routine sets M from the machine state that corresponds to the\n+   --  point in the code where a signal was raised. The parameter Context\n+   --  is a pointer to a structure created by the operating system when a\n+   --  signal is raised, and made available to the signal handler. The\n+   --  format of this context block, and the manner in which it is made\n+   --  available to the handler, are implementation dependent.\n+\n+end System.Machine_State_Operations;"}, {"sha": "4f11aeca7385990cea3591bc181d26a633c77afa", "filename": "gcc/ada/s-memory.adb", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-memory.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-memory.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-memory.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,142 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                         S Y S T E M . M E M O R Y                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--             Copyright (C) 2001 Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the default implementation of this package.\n+\n+--  This implementation assumes that the underlying malloc/free/realloc\n+--  implementation is thread safe, and thus, no additional lock is required.\n+--  Note that we still need to defer abortion because on most systems,\n+--  an asynchronous signal (as used for implementing asynchronous abortion\n+--  of task) cannot safely be handled while malloc is executing.\n+\n+--  If you are not using Ada constructs containing the \"abort\" keyword,\n+--  then you can remove the calls to Abort_Defer.all and Abort_Undefer.all\n+--  from this unit.\n+\n+with Ada.Exceptions;\n+with System.Soft_Links;\n+\n+package body System.Memory is\n+\n+   use Ada.Exceptions;\n+   use System.Soft_Links;\n+\n+   function c_malloc (Size : size_t) return System.Address;\n+   pragma Import (C, c_malloc, \"malloc\");\n+\n+   procedure c_free (Ptr : System.Address);\n+   pragma Import (C, c_free, \"free\");\n+\n+   function c_realloc\n+     (Ptr : System.Address; Size : size_t) return System.Address;\n+   pragma Import (C, c_realloc, \"realloc\");\n+\n+   -----------\n+   -- Alloc --\n+   -----------\n+\n+   function Alloc (Size : size_t) return System.Address is\n+      Result      : System.Address;\n+      Actual_Size : size_t := Size;\n+\n+   begin\n+      if Size = size_t'Last then\n+         Raise_Exception (Storage_Error'Identity, \"object too large\");\n+      end if;\n+\n+      --  Change size from zero to non-zero. We still want a proper pointer\n+      --  for the zero case because pointers to zero length objects have to\n+      --  be distinct, but we can't just go ahead and allocate zero bytes,\n+      --  since some malloc's return zero for a zero argument.\n+\n+      if Size = 0 then\n+         Actual_Size := 1;\n+      end if;\n+\n+      Abort_Defer.all;\n+      Result := c_malloc (Actual_Size);\n+      Abort_Undefer.all;\n+\n+      if Result = System.Null_Address then\n+         Raise_Exception (Storage_Error'Identity, \"heap exhausted\");\n+      end if;\n+\n+      return Result;\n+   end Alloc;\n+\n+   ----------\n+   -- Free --\n+   ----------\n+\n+   procedure Free (Ptr : System.Address) is\n+   begin\n+      Abort_Defer.all;\n+      c_free (Ptr);\n+      Abort_Undefer.all;\n+   end Free;\n+\n+   -------------\n+   -- Realloc --\n+   -------------\n+\n+   function Realloc\n+     (Ptr  : System.Address;\n+      Size : size_t)\n+      return System.Address\n+   is\n+      Result      : System.Address;\n+      Actual_Size : size_t := Size;\n+\n+   begin\n+      if Size = size_t'Last then\n+         Raise_Exception (Storage_Error'Identity, \"object too large\");\n+      end if;\n+\n+      Abort_Defer.all;\n+      Result := c_realloc (Ptr, Actual_Size);\n+      Abort_Undefer.all;\n+\n+      if Result = System.Null_Address then\n+         Raise_Exception (Storage_Error'Identity, \"heap exhausted\");\n+      end if;\n+\n+      return Result;\n+   end Realloc;\n+\n+end System.Memory;"}, {"sha": "6dafe93b8778dd0bc8ae400d25b4b0293ceaf1f5", "filename": "gcc/ada/s-memory.ads", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-memory.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-memory.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-memory.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,72 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUN-TIME COMPONENTS                         --\n+--                                                                          --\n+--                         S Y S T E M . M E M O R Y                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--             Copyright (C) 2001 Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides the low level memory allocation/deallocation\n+--  mechanisms used by GNAT.\n+\n+--  To provide an alternate implementation, simply recompile the modified\n+--  body of this package with gnatmake -u -a -g s-memory.adb and make sure\n+--  that the ali and object files for this unit are found in the object\n+--  search path.\n+\n+package System.Memory is\n+   pragma Elaborate_Body;\n+\n+   type size_t is mod 2 ** Standard'Address_Size;\n+\n+   function Alloc (Size : size_t) return System.Address;\n+   --  malloc for use by GNAT, with error checking and task lockout,\n+   --  as well as allocation tracking.\n+\n+   procedure Free (Ptr : System.Address);\n+   --  free for use by GNAT, with task lockout and allocation tracking.\n+\n+   function Realloc\n+     (Ptr  : System.Address;\n+      Size : size_t)\n+      return System.Address;\n+   --  realloc for use by GNAT, with error checking and task lockout.\n+\n+private\n+\n+   pragma Export (C, Alloc, \"__gnat_malloc\");\n+   pragma Export (C, Free, \"__gnat_free\");\n+   pragma Export (C, Realloc, \"__gnat_realloc\");\n+\n+end System.Memory;"}, {"sha": "2ee6ae077b3b34ae76def8bcecc507a3586e8a9e", "filename": "gcc/ada/s-osprim.ads", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-osprim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-osprim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,86 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n+--                                                                          --\n+--                  S Y S T E M . O S _ P R I M I T I V E S                 --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--                             $Revision: 1.11 $\n+--                                                                          --\n+--          Copyright (C) 1998-2001 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNARL; see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNARL was developed by the GNARL team at Florida State University. It is --\n+-- now maintained by Ada Core Technologies Inc. in cooperation with Florida --\n+-- State University (http://www.gnat.com).                                  --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides low level primitives used to implement clock and\n+--  delays in non tasking applications.\n+\n+--  The choice of the real clock/delay implementation (depending on whether\n+--  tasking is involved or not) is done via soft links (see s-tasoli.ads)\n+\n+--  NEVER add any dependency to tasking packages here\n+\n+package System.OS_Primitives is\n+\n+   Max_Sensible_Delay : constant Duration := 183 * 24 * 60 * 60.0;\n+   --  Max of half a year delay, needed to prevent exceptions for large\n+   --  delay values. It seems unlikely that any test will notice this\n+   --  restriction, except in the case of applications setting the clock at\n+   --  at run time (see s-tastim.adb). Also note that a larger value might\n+   --  cause problems (e.g overflow, or more likely OS limitation in the\n+   --  primitives used).\n+\n+   function Clock return Duration;\n+   pragma Inline (Clock);\n+   --  Returns \"absolute\" time, represented as an offset\n+   --  relative to \"the Epoch\", which is Jan 1, 1970 on unixes.\n+   --  This implementation is affected by system's clock changes.\n+\n+   function Monotonic_Clock return Duration;\n+   pragma Inline (Monotonic_Clock);\n+   --  Returns \"absolute\" time, represented as an offset\n+   --  relative to \"the Epoch\", which is Jan 1, 1970.\n+   --  This clock implementation is immune to the system's clock changes.\n+\n+   Relative          : constant := 0;\n+   Absolute_Calendar : constant := 1;\n+   Absolute_RT       : constant := 2;\n+   --  Values for Mode call below. Note that the compiler (exp_ch9.adb)\n+   --  relies on these values. So any change here must be reflected in\n+   --  corresponding changes in the compiler.\n+\n+   procedure Timed_Delay (Time : Duration; Mode : Integer);\n+   --  Implements the semantics of the delay statement when no tasking is\n+   --  used in the application.\n+   --\n+   --    Mode is one of the three values above\n+   --\n+   --    Time is a relative or absolute duration value, depending on Mode.\n+   --\n+   --  Note that currently Ada.Real_Time always uses the tasking run time, so\n+   --  this procedure should never be called with Mode set to Absolute_RT.\n+   --  This may change in future or bare board implementations.\n+\n+end System.OS_Primitives;"}, {"sha": "e93835b5ded2825a7a0c08fa41c57630d50bf077", "filename": "gcc/ada/s-pack03.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack03.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack03.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack03.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 0 3                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_03 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_03;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_03 --\n+   ------------\n+\n+   function Get_03 (Arr : System.Address; N : Natural) return Bits_03 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_03;\n+\n+   ------------\n+   -- Set_03 --\n+   ------------\n+\n+   procedure Set_03 (Arr : System.Address; N : Natural; E : Bits_03) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_03;\n+\n+end System.Pack_03;"}, {"sha": "a9c3c27e1eff4f53cd11454eb22300f30175ae5c", "filename": "gcc/ada/s-pack03.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack03.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack03.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack03.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 0 3                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.1 $                              --\n+--                                                                          --\n+--   Copyright (C) 1992,1993,1994,1995,1996 Free Software Foundation, Inc.  --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handing of packed arrays with Component_Size = 3\n+\n+package System.Pack_03 is\n+pragma Preelaborate (Pack_03);\n+\n+   Bits : constant := 3;\n+\n+   type Bits_03 is mod 2 ** Bits;\n+   for Bits_03'Size use Bits;\n+\n+   function Get_03 (Arr : System.Address; N : Natural) return Bits_03;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_03 (Arr : System.Address; N : Natural; E : Bits_03);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_03;"}, {"sha": "8ebb5ba829e16fe883223d149157a755fdad6cb9", "filename": "gcc/ada/s-pack05.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack05.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack05.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack05.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 0 5                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_05 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_05;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_05 --\n+   ------------\n+\n+   function Get_05 (Arr : System.Address; N : Natural) return Bits_05 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_05;\n+\n+   ------------\n+   -- Set_05 --\n+   ------------\n+\n+   procedure Set_05 (Arr : System.Address; N : Natural; E : Bits_05) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_05;\n+\n+end System.Pack_05;"}, {"sha": "f025a26ae04f89f7e4d2583a95cc7503e3113aa6", "filename": "gcc/ada/s-pack05.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack05.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack05.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack05.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 0 5                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-0507, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 5\n+\n+package System.Pack_05 is\n+pragma Preelaborate (Pack_05);\n+\n+   Bits : constant := 5;\n+\n+   type Bits_05 is mod 2 ** Bits;\n+   for Bits_05'Size use Bits;\n+\n+   function Get_05 (Arr : System.Address; N : Natural) return Bits_05;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_05 (Arr : System.Address; N : Natural; E : Bits_05);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_05;"}, {"sha": "8d48bb8f423e585eef3e0c157fc10db411fafe4b", "filename": "gcc/ada/s-pack06.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack06.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack06.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack06.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 0 6                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.5 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_06 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_06;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   --  The following declarations are for the case where the address\n+   --  passed to GetU_06 or SetU_06 is not guaranteed to be aligned.\n+   --  These routines are used when the packed array is itself a\n+   --  component of a packed record, and therefore may not be aligned.\n+\n+   type ClusterU is new Cluster;\n+   for ClusterU'Alignment use 1;\n+\n+   type ClusterU_Ref is access ClusterU;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+\n+   ------------\n+   -- Get_06 --\n+   ------------\n+\n+   function Get_06 (Arr : System.Address; N : Natural) return Bits_06 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_06;\n+\n+   -------------\n+   -- GetU_06 --\n+   -------------\n+\n+   function GetU_06 (Arr : System.Address; N : Natural) return Bits_06 is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end GetU_06;\n+\n+   ------------\n+   -- Set_06 --\n+   ------------\n+\n+   procedure Set_06 (Arr : System.Address; N : Natural; E : Bits_06) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_06;\n+\n+   -------------\n+   -- SetU_06 --\n+   -------------\n+\n+   procedure SetU_06 (Arr : System.Address; N : Natural; E : Bits_06) is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end SetU_06;\n+\n+end System.Pack_06;"}, {"sha": "d35607fa18454fcd28ed6ae1b3c17a6280e180cb", "filename": "gcc/ada/s-pack06.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack06.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack06.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack06.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,64 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 0 6                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 6\n+\n+package System.Pack_06 is\n+pragma Preelaborate (Pack_06);\n+\n+   Bits : constant := 6;\n+\n+   type Bits_06 is mod 2 ** Bits;\n+   for Bits_06'Size use Bits;\n+\n+   function Get_06 (Arr : System.Address; N : Natural) return Bits_06;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_06 (Arr : System.Address; N : Natural; E : Bits_06);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+   function GetU_06 (Arr : System.Address; N : Natural) return Bits_06;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned. This version\n+   --  is used when Arr may represent an unaligned address.\n+\n+   procedure SetU_06 (Arr : System.Address; N : Natural; E : Bits_06);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value. This version\n+   --  is used when Arr may represent an unaligned address\n+\n+end System.Pack_06;"}, {"sha": "510ddecd043ed1694a3e379eabace9e43c77c15b", "filename": "gcc/ada/s-pack07.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack07.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack07.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack07.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 0 7                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_07 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_07;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_07 --\n+   ------------\n+\n+   function Get_07 (Arr : System.Address; N : Natural) return Bits_07 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_07;\n+\n+   ------------\n+   -- Set_07 --\n+   ------------\n+\n+   procedure Set_07 (Arr : System.Address; N : Natural; E : Bits_07) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_07;\n+\n+end System.Pack_07;"}, {"sha": "e0ae2b9cf2a6cc6c6f4fec8de111171d66e4a92f", "filename": "gcc/ada/s-pack07.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack07.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack07.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack07.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 0 7                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-0707, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 7\n+\n+package System.Pack_07 is\n+pragma Preelaborate (Pack_07);\n+\n+   Bits : constant := 7;\n+\n+   type Bits_07 is mod 2 ** Bits;\n+   for Bits_07'Size use Bits;\n+\n+   function Get_07 (Arr : System.Address; N : Natural) return Bits_07;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_07 (Arr : System.Address; N : Natural; E : Bits_07);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_07;"}, {"sha": "26931bf2982a6e80756ca022dfbe8258419592c6", "filename": "gcc/ada/s-pack09.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack09.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack09.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack09.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 0 9                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_09 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_09;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_09 --\n+   ------------\n+\n+   function Get_09 (Arr : System.Address; N : Natural) return Bits_09 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_09;\n+\n+   ------------\n+   -- Set_09 --\n+   ------------\n+\n+   procedure Set_09 (Arr : System.Address; N : Natural; E : Bits_09) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_09;\n+\n+end System.Pack_09;"}, {"sha": "017dd582636a4c489d0e942cdab05e97b33b8858", "filename": "gcc/ada/s-pack09.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack09.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack09.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack09.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 0 9                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-0907, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 9\n+\n+package System.Pack_09 is\n+pragma Preelaborate (Pack_09);\n+\n+   Bits : constant := 9;\n+\n+   type Bits_09 is mod 2 ** Bits;\n+   for Bits_09'Size use Bits;\n+\n+   function Get_09 (Arr : System.Address; N : Natural) return Bits_09;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_09 (Arr : System.Address; N : Natural; E : Bits_09);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_09;"}, {"sha": "42442e1897645727c25c034d80bfceff468d47e0", "filename": "gcc/ada/s-pack10.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack10.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 0                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_10 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_10;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   --  The following declarations are for the case where the address\n+   --  passed to GetU_10 or SetU_10 is not guaranteed to be aligned.\n+   --  These routines are used when the packed array is itself a\n+   --  component of a packed record, and therefore may not be aligned.\n+\n+   type ClusterU is new Cluster;\n+   for ClusterU'Alignment use 1;\n+\n+   type ClusterU_Ref is access ClusterU;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+\n+   ------------\n+   -- Get_10 --\n+   ------------\n+\n+   function Get_10 (Arr : System.Address; N : Natural) return Bits_10 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_10;\n+\n+   -------------\n+   -- GetU_10 --\n+   -------------\n+\n+   function GetU_10 (Arr : System.Address; N : Natural) return Bits_10 is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end GetU_10;\n+\n+   ------------\n+   -- Set_10 --\n+   ------------\n+\n+   procedure Set_10 (Arr : System.Address; N : Natural; E : Bits_10) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_10;\n+\n+   -------------\n+   -- SetU_10 --\n+   -------------\n+\n+   procedure SetU_10 (Arr : System.Address; N : Natural; E : Bits_10) is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end SetU_10;\n+\n+end System.Pack_10;"}, {"sha": "97c98b46caea14987a09b143cb1995bc31afca0f", "filename": "gcc/ada/s-pack10.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack10.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack10.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack10.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,64 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 0                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 10\n+\n+package System.Pack_10 is\n+pragma Preelaborate (Pack_10);\n+\n+   Bits : constant := 10;\n+\n+   type Bits_10 is mod 2 ** Bits;\n+   for Bits_10'Size use Bits;\n+\n+   function Get_10 (Arr : System.Address; N : Natural) return Bits_10;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_10 (Arr : System.Address; N : Natural; E : Bits_10);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+   function GetU_10 (Arr : System.Address; N : Natural) return Bits_10;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned. This version\n+   --  is used when Arr may represent an unaligned address.\n+\n+   procedure SetU_10 (Arr : System.Address; N : Natural; E : Bits_10);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value. This version\n+   --  is used when Arr may represent an unaligned address\n+\n+end System.Pack_10;"}, {"sha": "ca4f51ccfc5782fe049ba49776940f413a2bd576", "filename": "gcc/ada/s-pack11.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack11.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 1                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_11 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_11;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_11 --\n+   ------------\n+\n+   function Get_11 (Arr : System.Address; N : Natural) return Bits_11 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_11;\n+\n+   ------------\n+   -- Set_11 --\n+   ------------\n+\n+   procedure Set_11 (Arr : System.Address; N : Natural; E : Bits_11) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_11;\n+\n+end System.Pack_11;"}, {"sha": "8eb527b1c2482b2c43a724437817ffab7495a06b", "filename": "gcc/ada/s-pack11.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack11.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack11.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack11.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 1                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1107, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 11\n+\n+package System.Pack_11 is\n+pragma Preelaborate (Pack_11);\n+\n+   Bits : constant := 11;\n+\n+   type Bits_11 is mod 2 ** Bits;\n+   for Bits_11'Size use Bits;\n+\n+   function Get_11 (Arr : System.Address; N : Natural) return Bits_11;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_11 (Arr : System.Address; N : Natural; E : Bits_11);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_11;"}, {"sha": "958c88140ba4e7119a6fd70fe86809c09df26ced", "filename": "gcc/ada/s-pack12.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack12.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 2                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_12 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_12;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   --  The following declarations are for the case where the address\n+   --  passed to GetU_12 or SetU_12 is not guaranteed to be aligned.\n+   --  These routines are used when the packed array is itself a\n+   --  component of a packed record, and therefore may not be aligned.\n+\n+   type ClusterU is new Cluster;\n+   for ClusterU'Alignment use 1;\n+\n+   type ClusterU_Ref is access ClusterU;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+\n+   ------------\n+   -- Get_12 --\n+   ------------\n+\n+   function Get_12 (Arr : System.Address; N : Natural) return Bits_12 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_12;\n+\n+   -------------\n+   -- GetU_12 --\n+   -------------\n+\n+   function GetU_12 (Arr : System.Address; N : Natural) return Bits_12 is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end GetU_12;\n+\n+   ------------\n+   -- Set_12 --\n+   ------------\n+\n+   procedure Set_12 (Arr : System.Address; N : Natural; E : Bits_12) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_12;\n+\n+   -------------\n+   -- SetU_12 --\n+   -------------\n+\n+   procedure SetU_12 (Arr : System.Address; N : Natural; E : Bits_12) is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end SetU_12;\n+\n+end System.Pack_12;"}, {"sha": "c31b9b6237beb0a8028e2c113a0925cbd1162e83", "filename": "gcc/ada/s-pack12.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack12.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,64 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 2                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 12\n+\n+package System.Pack_12 is\n+pragma Preelaborate (Pack_12);\n+\n+   Bits : constant := 12;\n+\n+   type Bits_12 is mod 2 ** Bits;\n+   for Bits_12'Size use Bits;\n+\n+   function Get_12 (Arr : System.Address; N : Natural) return Bits_12;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_12 (Arr : System.Address; N : Natural; E : Bits_12);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+   function GetU_12 (Arr : System.Address; N : Natural) return Bits_12;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned. This version\n+   --  is used when Arr may represent an unaligned address.\n+\n+   procedure SetU_12 (Arr : System.Address; N : Natural; E : Bits_12);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value. This version\n+   --  is used when Arr may represent an unaligned address\n+\n+end System.Pack_12;"}, {"sha": "9da7f1cdf0c465c7740b11ed6fe4a53d8e6cfb3a", "filename": "gcc/ada/s-pack13.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack13.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 3                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_13 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_13;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_13 --\n+   ------------\n+\n+   function Get_13 (Arr : System.Address; N : Natural) return Bits_13 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_13;\n+\n+   ------------\n+   -- Set_13 --\n+   ------------\n+\n+   procedure Set_13 (Arr : System.Address; N : Natural; E : Bits_13) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_13;\n+\n+end System.Pack_13;"}, {"sha": "b0b89760a008bbde8eb4a3f40aef44099655d1ff", "filename": "gcc/ada/s-pack13.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack13.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 3                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 13\n+\n+package System.Pack_13 is\n+pragma Preelaborate (Pack_13);\n+\n+   Bits : constant := 13;\n+\n+   type Bits_13 is mod 2 ** Bits;\n+   for Bits_13'Size use Bits;\n+\n+   function Get_13 (Arr : System.Address; N : Natural) return Bits_13;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_13 (Arr : System.Address; N : Natural; E : Bits_13);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_13;"}, {"sha": "cc4c5cea3ac876ae08554f44c3ae6740272c9716", "filename": "gcc/ada/s-pack14.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack14.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack14.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack14.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 4                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_14 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_14;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   --  The following declarations are for the case where the address\n+   --  passed to GetU_14 or SetU_14 is not guaranteed to be aligned.\n+   --  These routines are used when the packed array is itself a\n+   --  component of a packed record, and therefore may not be aligned.\n+\n+   type ClusterU is new Cluster;\n+   for ClusterU'Alignment use 1;\n+\n+   type ClusterU_Ref is access ClusterU;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+\n+   ------------\n+   -- Get_14 --\n+   ------------\n+\n+   function Get_14 (Arr : System.Address; N : Natural) return Bits_14 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_14;\n+\n+   -------------\n+   -- GetU_14 --\n+   -------------\n+\n+   function GetU_14 (Arr : System.Address; N : Natural) return Bits_14 is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end GetU_14;\n+\n+   ------------\n+   -- Set_14 --\n+   ------------\n+\n+   procedure Set_14 (Arr : System.Address; N : Natural; E : Bits_14) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_14;\n+\n+   -------------\n+   -- SetU_14 --\n+   -------------\n+\n+   procedure SetU_14 (Arr : System.Address; N : Natural; E : Bits_14) is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end SetU_14;\n+\n+end System.Pack_14;"}, {"sha": "cceb1ba27dc94e2742b755ed5f4bea724267baa6", "filename": "gcc/ada/s-pack14.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack14.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack14.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack14.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,64 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 4                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handing of packed arrays with Component_Size = 14\n+\n+package System.Pack_14 is\n+pragma Preelaborate (Pack_14);\n+\n+   Bits : constant := 14;\n+\n+   type Bits_14 is mod 2 ** Bits;\n+   for Bits_14'Size use Bits;\n+\n+   function Get_14 (Arr : System.Address; N : Natural) return Bits_14;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_14 (Arr : System.Address; N : Natural; E : Bits_14);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+   function GetU_14 (Arr : System.Address; N : Natural) return Bits_14;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned. This version\n+   --  is used when Arr may represent an unaligned address.\n+\n+   procedure SetU_14 (Arr : System.Address; N : Natural; E : Bits_14);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value. This version\n+   --  is used when Arr may represent an unaligned address\n+\n+end System.Pack_14;"}, {"sha": "64f8ba584fac4afd65831c33b3ae2d3fb3adbc22", "filename": "gcc/ada/s-pack15.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack15.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack15.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack15.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 5                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_15 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_15;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_15 --\n+   ------------\n+\n+   function Get_15 (Arr : System.Address; N : Natural) return Bits_15 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_15;\n+\n+   ------------\n+   -- Set_15 --\n+   ------------\n+\n+   procedure Set_15 (Arr : System.Address; N : Natural; E : Bits_15) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_15;\n+\n+end System.Pack_15;"}, {"sha": "3861797dd5399ec70d3206f6151a8276e10c949b", "filename": "gcc/ada/s-pack15.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack15.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack15.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack15.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 5                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1507, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 15\n+\n+package System.Pack_15 is\n+pragma Preelaborate (Pack_15);\n+\n+   Bits : constant := 15;\n+\n+   type Bits_15 is mod 2 ** Bits;\n+   for Bits_15'Size use Bits;\n+\n+   function Get_15 (Arr : System.Address; N : Natural) return Bits_15;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_15 (Arr : System.Address; N : Natural; E : Bits_15);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_15;"}, {"sha": "0fa9a1da0b6509018d4b3281dce5fa269fdc76b1", "filename": "gcc/ada/s-pack17.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack17.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack17.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack17.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 7                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_17 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_17;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_17 --\n+   ------------\n+\n+   function Get_17 (Arr : System.Address; N : Natural) return Bits_17 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_17;\n+\n+   ------------\n+   -- Set_17 --\n+   ------------\n+\n+   procedure Set_17 (Arr : System.Address; N : Natural; E : Bits_17) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_17;\n+\n+end System.Pack_17;"}, {"sha": "697d2f39afb5a2f8dc0010e374f8e9537894bc0b", "filename": "gcc/ada/s-pack17.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack17.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack17.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack17.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 7                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1707, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 17\n+\n+package System.Pack_17 is\n+pragma Preelaborate (Pack_17);\n+\n+   Bits : constant := 17;\n+\n+   type Bits_17 is mod 2 ** Bits;\n+   for Bits_17'Size use Bits;\n+\n+   function Get_17 (Arr : System.Address; N : Natural) return Bits_17;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_17 (Arr : System.Address; N : Natural; E : Bits_17);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_17;"}, {"sha": "6741f1b77cc393dc35250b43b6dbd95f8a34c90e", "filename": "gcc/ada/s-pack18.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack18.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack18.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack18.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 8                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_18 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_18;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   --  The following declarations are for the case where the address\n+   --  passed to GetU_18 or SetU_18 is not guaranteed to be aligned.\n+   --  These routines are used when the packed array is itself a\n+   --  component of a packed record, and therefore may not be aligned.\n+\n+   type ClusterU is new Cluster;\n+   for ClusterU'Alignment use 1;\n+\n+   type ClusterU_Ref is access ClusterU;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+\n+   ------------\n+   -- Get_18 --\n+   ------------\n+\n+   function Get_18 (Arr : System.Address; N : Natural) return Bits_18 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_18;\n+\n+   -------------\n+   -- GetU_18 --\n+   -------------\n+\n+   function GetU_18 (Arr : System.Address; N : Natural) return Bits_18 is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end GetU_18;\n+\n+   ------------\n+   -- Set_18 --\n+   ------------\n+\n+   procedure Set_18 (Arr : System.Address; N : Natural; E : Bits_18) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_18;\n+\n+   -------------\n+   -- SetU_18 --\n+   -------------\n+\n+   procedure SetU_18 (Arr : System.Address; N : Natural; E : Bits_18) is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end SetU_18;\n+\n+end System.Pack_18;"}, {"sha": "7f3b78f5307af338c8e4200f894a7e5791dd4d02", "filename": "gcc/ada/s-pack18.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack18.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack18.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack18.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,64 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 8                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 18\n+\n+package System.Pack_18 is\n+pragma Preelaborate (Pack_18);\n+\n+   Bits : constant := 18;\n+\n+   type Bits_18 is mod 2 ** Bits;\n+   for Bits_18'Size use Bits;\n+\n+   function Get_18 (Arr : System.Address; N : Natural) return Bits_18;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_18 (Arr : System.Address; N : Natural; E : Bits_18);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+   function GetU_18 (Arr : System.Address; N : Natural) return Bits_18;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned. This version\n+   --  is used when Arr may represent an unaligned address.\n+\n+   procedure SetU_18 (Arr : System.Address; N : Natural; E : Bits_18);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value. This version\n+   --  is used when Arr may represent an unaligned address\n+\n+end System.Pack_18;"}, {"sha": "2aea9eae4cdd513a2c31658dee36a4d69a54aa03", "filename": "gcc/ada/s-pack19.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack19.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack19.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack19.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 9                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_19 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_19;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_19 --\n+   ------------\n+\n+   function Get_19 (Arr : System.Address; N : Natural) return Bits_19 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_19;\n+\n+   ------------\n+   -- Set_19 --\n+   ------------\n+\n+   procedure Set_19 (Arr : System.Address; N : Natural; E : Bits_19) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_19;\n+\n+end System.Pack_19;"}, {"sha": "c510360524724959a8469da1fbc6e8c5fc179e3b", "filename": "gcc/ada/s-pack19.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack19.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack19.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack19.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 1 9                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1907, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 19\n+\n+package System.Pack_19 is\n+pragma Preelaborate (Pack_19);\n+\n+   Bits : constant := 19;\n+\n+   type Bits_19 is mod 2 ** Bits;\n+   for Bits_19'Size use Bits;\n+\n+   function Get_19 (Arr : System.Address; N : Natural) return Bits_19;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_19 (Arr : System.Address; N : Natural; E : Bits_19);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_19;"}, {"sha": "9a09533a927827e443579892fe7cf32c33c6a062", "filename": "gcc/ada/s-pack20.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack20.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack20.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack20.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 2 0                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_20 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_20;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   --  The following declarations are for the case where the address\n+   --  passed to GetU_20 or SetU_20 is not guaranteed to be aligned.\n+   --  These routines are used when the packed array is itself a\n+   --  component of a packed record, and therefore may not be aligned.\n+\n+   type ClusterU is new Cluster;\n+   for ClusterU'Alignment use 1;\n+\n+   type ClusterU_Ref is access ClusterU;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+\n+   ------------\n+   -- Get_20 --\n+   ------------\n+\n+   function Get_20 (Arr : System.Address; N : Natural) return Bits_20 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_20;\n+\n+   -------------\n+   -- GetU_20 --\n+   -------------\n+\n+   function GetU_20 (Arr : System.Address; N : Natural) return Bits_20 is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end GetU_20;\n+\n+   ------------\n+   -- Set_20 --\n+   ------------\n+\n+   procedure Set_20 (Arr : System.Address; N : Natural; E : Bits_20) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_20;\n+\n+   -------------\n+   -- SetU_20 --\n+   -------------\n+\n+   procedure SetU_20 (Arr : System.Address; N : Natural; E : Bits_20) is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end SetU_20;\n+\n+end System.Pack_20;"}, {"sha": "626f2ccf1aaee332498769cebac13f0a0ab9bd36", "filename": "gcc/ada/s-pack20.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack20.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack20.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack20.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,64 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 2 0                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 20\n+\n+package System.Pack_20 is\n+pragma Preelaborate (Pack_20);\n+\n+   Bits : constant := 20;\n+\n+   type Bits_20 is mod 2 ** Bits;\n+   for Bits_20'Size use Bits;\n+\n+   function Get_20 (Arr : System.Address; N : Natural) return Bits_20;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_20 (Arr : System.Address; N : Natural; E : Bits_20);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+   function GetU_20 (Arr : System.Address; N : Natural) return Bits_20;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned. This version\n+   --  is used when Arr may represent an unaligned address.\n+\n+   procedure SetU_20 (Arr : System.Address; N : Natural; E : Bits_20);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value. This version\n+   --  is used when Arr may represent an unaligned address\n+\n+end System.Pack_20;"}, {"sha": "d29d6624541cef662445869cb7fba47893f37d57", "filename": "gcc/ada/s-pack21.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack21.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack21.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack21.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 2 1                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_21 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_21;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_21 --\n+   ------------\n+\n+   function Get_21 (Arr : System.Address; N : Natural) return Bits_21 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_21;\n+\n+   ------------\n+   -- Set_21 --\n+   ------------\n+\n+   procedure Set_21 (Arr : System.Address; N : Natural; E : Bits_21) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_21;\n+\n+end System.Pack_21;"}, {"sha": "46d1d53010945ac45ae7c0ddac84e4b0450d620a", "filename": "gcc/ada/s-pack21.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack21.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack21.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack21.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 2 1                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-2107, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 21\n+\n+package System.Pack_21 is\n+pragma Preelaborate (Pack_21);\n+\n+   Bits : constant := 21;\n+\n+   type Bits_21 is mod 2 ** Bits;\n+   for Bits_21'Size use Bits;\n+\n+   function Get_21 (Arr : System.Address; N : Natural) return Bits_21;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_21 (Arr : System.Address; N : Natural; E : Bits_21);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_21;"}, {"sha": "e405a74a5cc802f4334a977b473863cb160c3b3c", "filename": "gcc/ada/s-pack22.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack22.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack22.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack22.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 2 2                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_22 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_22;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   --  The following declarations are for the case where the address\n+   --  passed to GetU_22 or SetU_22 is not guaranteed to be aligned.\n+   --  These routines are used when the packed array is itself a\n+   --  component of a packed record, and therefore may not be aligned.\n+\n+   type ClusterU is new Cluster;\n+   for ClusterU'Alignment use 1;\n+\n+   type ClusterU_Ref is access ClusterU;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+\n+   ------------\n+   -- Get_22 --\n+   ------------\n+\n+   function Get_22 (Arr : System.Address; N : Natural) return Bits_22 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_22;\n+\n+   -------------\n+   -- GetU_22 --\n+   -------------\n+\n+   function GetU_22 (Arr : System.Address; N : Natural) return Bits_22 is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end GetU_22;\n+\n+   ------------\n+   -- Set_22 --\n+   ------------\n+\n+   procedure Set_22 (Arr : System.Address; N : Natural; E : Bits_22) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_22;\n+\n+   -------------\n+   -- SetU_22 --\n+   -------------\n+\n+   procedure SetU_22 (Arr : System.Address; N : Natural; E : Bits_22) is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end SetU_22;\n+\n+end System.Pack_22;"}, {"sha": "42872b4c94882c9ba074129c9b0abaea1b2c9fb8", "filename": "gcc/ada/s-pack22.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack22.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack22.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack22.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,64 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 2 2                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 22\n+\n+package System.Pack_22 is\n+pragma Preelaborate (Pack_22);\n+\n+   Bits : constant := 22;\n+\n+   type Bits_22 is mod 2 ** Bits;\n+   for Bits_22'Size use Bits;\n+\n+   function Get_22 (Arr : System.Address; N : Natural) return Bits_22;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_22 (Arr : System.Address; N : Natural; E : Bits_22);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+   function GetU_22 (Arr : System.Address; N : Natural) return Bits_22;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned. This version\n+   --  is used when Arr may represent an unaligned address.\n+\n+   procedure SetU_22 (Arr : System.Address; N : Natural; E : Bits_22);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value. This version\n+   --  is used when Arr may represent an unaligned address\n+\n+end System.Pack_22;"}, {"sha": "e15445e3a6452382524c237ed726da104e916da4", "filename": "gcc/ada/s-pack23.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack23.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack23.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack23.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,118 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 2 3                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_23 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_23;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   ------------\n+   -- Get_23 --\n+   ------------\n+\n+   function Get_23 (Arr : System.Address; N : Natural) return Bits_23 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_23;\n+\n+   ------------\n+   -- Set_23 --\n+   ------------\n+\n+   procedure Set_23 (Arr : System.Address; N : Natural; E : Bits_23) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_23;\n+\n+end System.Pack_23;"}, {"sha": "5e3c6ceed8e6d5d9d81ed9413a2929f886319a66", "filename": "gcc/ada/s-pack23.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack23.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack23.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack23.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,54 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 2 3                        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                            $Revision: 1.2 $                              --\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-2307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  Handling of packed arrays with Component_Size = 23\n+\n+package System.Pack_23 is\n+pragma Preelaborate (Pack_23);\n+\n+   Bits : constant := 23;\n+\n+   type Bits_23 is mod 2 ** Bits;\n+   for Bits_23'Size use Bits;\n+\n+   function Get_23 (Arr : System.Address; N : Natural) return Bits_23;\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is extracted and returned.\n+\n+   procedure Set_23 (Arr : System.Address; N : Natural; E : Bits_23);\n+   --  Arr is the address of the packed array, N is the zero-based\n+   --  subscript. This element is set to the given value.\n+\n+end System.Pack_23;"}, {"sha": "26e37f5cf57e3eadcc348b3b7b3f9fa71c81807e", "filename": "gcc/ada/s-pack24.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack24.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack24.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack24.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                       S Y S T E M . P A C K _ 2 4                        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                            $Revision: 1.4 $\n+--                                                                          --\n+--          Copyright (C) 1992-1999 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- It is now maintained by Ada Core Technologies Inc (http://www.gnat.com). --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with System.Storage_Elements;\n+with System.Unsigned_Types;\n+with Unchecked_Conversion;\n+\n+package body System.Pack_24 is\n+\n+   subtype Ofs is System.Storage_Elements.Storage_Offset;\n+   subtype Uns is System.Unsigned_Types.Unsigned;\n+   subtype N07 is System.Unsigned_Types.Unsigned range 0 .. 7;\n+\n+   use type System.Storage_Elements.Storage_Offset;\n+   use type System.Unsigned_Types.Unsigned;\n+\n+   type Cluster is record\n+      E0, E1, E2, E3, E4, E5, E6, E7 : Bits_24;\n+   end record;\n+\n+   for Cluster use record\n+      E0 at 0 range 0 * Bits .. 0 * Bits + Bits - 1;\n+      E1 at 0 range 1 * Bits .. 1 * Bits + Bits - 1;\n+      E2 at 0 range 2 * Bits .. 2 * Bits + Bits - 1;\n+      E3 at 0 range 3 * Bits .. 3 * Bits + Bits - 1;\n+      E4 at 0 range 4 * Bits .. 4 * Bits + Bits - 1;\n+      E5 at 0 range 5 * Bits .. 5 * Bits + Bits - 1;\n+      E6 at 0 range 6 * Bits .. 6 * Bits + Bits - 1;\n+      E7 at 0 range 7 * Bits .. 7 * Bits + Bits - 1;\n+   end record;\n+\n+   for Cluster'Size use Bits * 8;\n+\n+   for Cluster'Alignment use Integer'Min (Standard'Maximum_Alignment,\n+     1 +\n+     1 * Boolean'Pos (Bits mod 2 = 0) +\n+     2 * Boolean'Pos (Bits mod 4 = 0));\n+   --  Use maximum possible alignment, given the bit field size, since this\n+   --  will result in the most efficient code possible for the field.\n+\n+   type Cluster_Ref is access Cluster;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, Cluster_Ref);\n+\n+   --  The following declarations are for the case where the address\n+   --  passed to GetU_24 or SetU_24 is not guaranteed to be aligned.\n+   --  These routines are used when the packed array is itself a\n+   --  component of a packed record, and therefore may not be aligned.\n+\n+   type ClusterU is new Cluster;\n+   for ClusterU'Alignment use 1;\n+\n+   type ClusterU_Ref is access ClusterU;\n+\n+   function To_Ref is new\n+     Unchecked_Conversion (System.Address, ClusterU_Ref);\n+\n+   ------------\n+   -- Get_24 --\n+   ------------\n+\n+   function Get_24 (Arr : System.Address; N : Natural) return Bits_24 is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end Get_24;\n+\n+   -------------\n+   -- GetU_24 --\n+   -------------\n+\n+   function GetU_24 (Arr : System.Address; N : Natural) return Bits_24 is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => return C.E0;\n+         when 1 => return C.E1;\n+         when 2 => return C.E2;\n+         when 3 => return C.E3;\n+         when 4 => return C.E4;\n+         when 5 => return C.E5;\n+         when 6 => return C.E6;\n+         when 7 => return C.E7;\n+      end case;\n+   end GetU_24;\n+\n+   ------------\n+   -- Set_24 --\n+   ------------\n+\n+   procedure Set_24 (Arr : System.Address; N : Natural; E : Bits_24) is\n+      C : constant Cluster_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end Set_24;\n+\n+   -------------\n+   -- SetU_24 --\n+   -------------\n+\n+   procedure SetU_24 (Arr : System.Address; N : Natural; E : Bits_24) is\n+      C : constant ClusterU_Ref := To_Ref (Arr + Bits * Ofs (Uns (N) / 8));\n+\n+   begin\n+      case N07 (Uns (N) mod 8) is\n+         when 0 => C.E0 := E;\n+         when 1 => C.E1 := E;\n+         when 2 => C.E2 := E;\n+         when 3 => C.E3 := E;\n+         when 4 => C.E4 := E;\n+         when 5 => C.E5 := E;\n+         when 6 => C.E6 := E;\n+         when 7 => C.E7 := E;\n+      end case;\n+   end SetU_24;\n+\n+end System.Pack_24;"}, {"sha": "e315f8c1f61059219e8051b0859b21bcabb9a01e", "filename": "gcc/ada/s-pack24.ads", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack24.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack24.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack24.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "e9399ad69c6300d2b1788d1752ce3335738bf041", "filename": "gcc/ada/s-pack25.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack25.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack25.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack25.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "2abc74716a6c5098b86fa620959e291182b54d47", "filename": "gcc/ada/s-pack25.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack25.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack25.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack25.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "c3af1491c40b8bec1744c6afe1ae7846e8c4527d", "filename": "gcc/ada/s-pack26.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack26.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack26.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack26.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "fc9a05aa16546568bad2e7e6f39a27d0573705d0", "filename": "gcc/ada/s-pack26.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack26.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack26.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack26.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "a637f9212d8f8ba2162b060af17e9759e843420f", "filename": "gcc/ada/s-pack27.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack27.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack27.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack27.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "28d1b57740a5a05da657e15bd7fdf183a5fa522f", "filename": "gcc/ada/s-pack27.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack27.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack27.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack27.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "84afb9afacdb6d753fa8d81801af1a770e9a7a18", "filename": "gcc/ada/s-pack28.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack28.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack28.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack28.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "125321e28df1895bd99b045071d7895bb6e8a59e", "filename": "gcc/ada/s-pack28.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack28.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack28.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack28.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "5b5792b52c85c948cd56dee5df1c2a328fb13595", "filename": "gcc/ada/s-pack29.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack29.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack29.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack29.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "dcd20fae2395f4f433507d02e8b5ba4321516980", "filename": "gcc/ada/s-pack29.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack29.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack29.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack29.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "b493250e05aef4f4704468d1cbbe4af24819328e", "filename": "gcc/ada/s-pack30.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack30.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack30.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack30.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "77714a541946e6bf0c3018b05365dae7d695a69a", "filename": "gcc/ada/s-pack30.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack30.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack30.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack30.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "cb7ec025d27a933841d34c05f413782e7c906edd", "filename": "gcc/ada/s-pack31.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack31.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack31.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack31.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "ab084ae392ddb438650bbd601c259ec1087c0ee0", "filename": "gcc/ada/s-pack31.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack31.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack31.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack31.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "d5f7972c3de4c09616ff0bd3cdf0a21da10def06", "filename": "gcc/ada/s-pack33.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack33.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack33.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack33.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "1c3bb2576f880d21d670fa5987f90a9ff8a42682", "filename": "gcc/ada/s-pack33.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack33.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack33.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack33.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "291b6958b2762452f967fcd54c077749fb321b2e", "filename": "gcc/ada/s-pack34.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack34.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack34.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack34.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "17f35207927bebe43da04e589df4cd790bae632c", "filename": "gcc/ada/s-pack34.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack34.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack34.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack34.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "ef5a50b1e2ecc7ae8be0a4647039e458a4832ead", "filename": "gcc/ada/s-pack35.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack35.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack35.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack35.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "c1658f8ec9726f3739a0d90f444c24ef9c499bbf", "filename": "gcc/ada/s-pack35.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack35.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack35.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack35.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "f9a1d6bdda0df15a22816dfb42ce689500710022", "filename": "gcc/ada/s-pack36.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack36.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack36.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack36.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "dc12fd3404a9e7772a8db41f4f4c24c3ce0f20ef", "filename": "gcc/ada/s-pack36.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack36.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack36.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack36.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "42c4494e0e243a4a44f30504497fe70ec9f08813", "filename": "gcc/ada/s-pack37.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack37.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack37.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack37.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "702d0f0379854adaa3a497d7213b522c8d960199", "filename": "gcc/ada/s-pack37.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack37.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack37.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack37.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "71bc7d247bbe91a308c2404bcf7ea84a55c6ed15", "filename": "gcc/ada/s-pack38.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack38.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack38.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack38.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "4b68c9abd859568836567419d964e32857c04c3c", "filename": "gcc/ada/s-pack38.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack38.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack38.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack38.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "5f813e3918a4de0be7de1d245514a963a0c68833", "filename": "gcc/ada/s-pack39.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack39.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack39.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack39.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "755a7a270489a0ae1e9a657e2da28a2dacb3926b", "filename": "gcc/ada/s-pack39.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack39.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack39.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack39.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "1c9e598686f581efecc00c258e49d20e9602d393", "filename": "gcc/ada/s-pack40.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack40.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack40.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack40.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "0258e504a156ed8cb275a4c8ea3efbf2a135ba34", "filename": "gcc/ada/s-pack40.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack40.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack40.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack40.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "0997598c32d69d4ed727da413bb57bc87999f5b1", "filename": "gcc/ada/s-pack41.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack41.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack41.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack41.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "0de507ab415d43b8e7eb9791261ff78831ed25d1", "filename": "gcc/ada/s-pack41.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack41.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack41.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack41.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "2a2d393d877c6df22c499b7b8d63fb35f3be4b4d", "filename": "gcc/ada/s-pack42.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack42.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack42.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack42.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "971e147f475cebe32f75622b34e8b4312162d45e", "filename": "gcc/ada/s-pack42.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack42.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack42.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack42.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "727feeb7ccae92c475dd9204f82eaa8bc46a1547", "filename": "gcc/ada/s-pack43.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack43.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack43.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack43.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "bcc30f9230f4e3afeec0aac387f1056096e3abe8", "filename": "gcc/ada/s-pack43.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack43.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack43.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack43.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "09bcba081098f0d1a93b51a88bd6d52790a5552f", "filename": "gcc/ada/s-pack44.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack44.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack44.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack44.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "84ef9c7cc1c642ab71ef9d1624fed45464dd5776", "filename": "gcc/ada/s-pack44.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack44.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack44.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack44.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "871940ec39dbbd2ce771ebfccb03bce748257584", "filename": "gcc/ada/s-pack45.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack45.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack45.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack45.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "b2d1e296b8fa5267da7f6cc38d185af671452787", "filename": "gcc/ada/s-pack45.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack45.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack45.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack45.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "c0d24cc505ddf77027fc78b11d53489aff6c9394", "filename": "gcc/ada/s-pack46.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack46.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack46.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack46.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "2d688dd76fa3bed9f717e1ba71e4dc7e8baab01d", "filename": "gcc/ada/s-pack46.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack46.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack46.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack46.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "4d1b0fe0b2a6ef6c7b986a0d892eec0c134d2f8a", "filename": "gcc/ada/s-pack47.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack47.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack47.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack47.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "b09d7ee947305062a0fd1a204832f4ae662dd965", "filename": "gcc/ada/s-pack47.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack47.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack47.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack47.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "90d0d251f63c509efbf3bbb62221157da3f20be8", "filename": "gcc/ada/s-pack48.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack48.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack48.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack48.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "e4aa93502c1530ea6c9be71e258e9d133d6b1ad1", "filename": "gcc/ada/s-pack48.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack48.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack48.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack48.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "442131f18c173aaa9b6288c37f5efa20e98e2bc8", "filename": "gcc/ada/s-pack49.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack49.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack49.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack49.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "fd25c5879fcd23c5cc9efe6a02d19c3285ec25fe", "filename": "gcc/ada/s-pack49.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack49.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack49.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack49.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "e0bb450dda9a2f31a5506647a892914ff6f93d4e", "filename": "gcc/ada/s-pack50.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack50.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack50.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack50.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "48f2eb1b29b35131a6da8c6d090bce9d79f58622", "filename": "gcc/ada/s-pack50.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack50.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack50.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack50.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "330f1627f58d97d93e8fce64c125fbf2b0298fc6", "filename": "gcc/ada/s-pack51.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack51.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack51.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack51.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "c59e5ea3d1e6a6433dfe5cf038b65486357e221d", "filename": "gcc/ada/s-pack51.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack51.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack51.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack51.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "91ee440f411d9d8dcc500ec272b17fbd079dc1d1", "filename": "gcc/ada/s-pack52.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack52.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack52.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack52.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "10264dfaab9f24a9a8c051bf96141e95cff5578d", "filename": "gcc/ada/s-pack52.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack52.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack52.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack52.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "ff56f075839669d37543e0eb7e9066692734fd9d", "filename": "gcc/ada/s-pack53.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack53.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack53.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack53.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "e9e2b8a8536b6eb8d39b0d7fb49343db9b98500b", "filename": "gcc/ada/s-pack53.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack53.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack53.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack53.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "d389e3999544ed36492fe0009e02090c007c34de", "filename": "gcc/ada/s-pack54.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack54.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack54.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack54.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "7f1d4ebf5984a5d7798288e58f924cc632b0d5bd", "filename": "gcc/ada/s-pack54.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack54.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack54.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack54.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "e353ed4338fcc7335a53a3e635bff0cf33b34da5", "filename": "gcc/ada/s-pack55.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack55.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack55.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack55.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "68b0aaad3c53c652158ad5bf71948c600e47c0cf", "filename": "gcc/ada/s-pack55.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack55.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack55.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack55.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "4300bd6230c2afc248aba9a7bf39f89906bc0b9a", "filename": "gcc/ada/s-pack56.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack56.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack56.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack56.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "94ae0a51b1bdb4d490d62a7d453df1da01347bbc", "filename": "gcc/ada/s-pack56.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack56.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack56.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack56.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "077124e9a3804d2acc60e98995fcb292b9660d51", "filename": "gcc/ada/s-pack57.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack57.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack57.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack57.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "ab5f137c77ec5758e63a9e637561c1cb4f4340c7", "filename": "gcc/ada/s-pack57.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack57.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack57.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack57.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "69011dc73252cb1ab1dc9eaac9bfd137debe69a7", "filename": "gcc/ada/s-pack58.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack58.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack58.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack58.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "debfb18faaabc4ed4001dae3193fb21e8b612af9", "filename": "gcc/ada/s-pack58.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack58.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack58.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack58.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "fdfd208c6351443e59e44e5eca544f39bb3d866f", "filename": "gcc/ada/s-pack59.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack59.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack59.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack59.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "2cfa7539282d24705fba06d6635d625b223598cf", "filename": "gcc/ada/s-pack59.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack59.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack59.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack59.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "49771ff4f44e0c4eec9b861791143156e2764024", "filename": "gcc/ada/s-pack60.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack60.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack60.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack60.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "e795f355956d6b184a003ac813b3826ec9449c34", "filename": "gcc/ada/s-pack60.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack60.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack60.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack60.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "fb90abd68b59a9be8fbb090f423053611f271e00", "filename": "gcc/ada/s-pack61.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack61.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack61.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack61.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "f9138fd942c8647cfd372aa42037f4921459de64", "filename": "gcc/ada/s-pack61.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack61.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack61.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack61.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "31e3dafae776e4b20b117aef5e42b8cdf83237ca", "filename": "gcc/ada/s-pack62.adb", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack62.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack62.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack62.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "c4b85edbc621a98f4948eff5dc4952cf8ce70685", "filename": "gcc/ada/s-pack62.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack62.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack62.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack62.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "80043d61a08492604be74cfabb19637837f4639b", "filename": "gcc/ada/s-pack63.adb", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack63.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack63.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack63.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "2faa0d1ce52b99535f5b43d314ebccf89352a460", "filename": "gcc/ada/s-pack63.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack63.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pack63.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pack63.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "a5583cc3d6c1829cfaac69e504511e8c11d53004", "filename": "gcc/ada/s-parame.adb", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-parame.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-parame.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "92028c173980d620aee7737b6dcc29e9395f1b0a", "filename": "gcc/ada/s-parame.ads", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-parame.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-parame.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "4d8e80d2706534ef834b74263f483893fa2a9ffc", "filename": "gcc/ada/s-parint.adb", "status": "added", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-parint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-parint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parint.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "f784583dbf071f281a5d07b6beacab612c5897b4", "filename": "gcc/ada/s-parint.ads", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-parint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-parint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parint.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "11f265eb1e3d6cfe85c19fde2e581e34a3f82a24", "filename": "gcc/ada/s-pooglo.adb", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pooglo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pooglo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pooglo.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "c209e2d8da342e4fb530278ac48b0f26b073b9a1", "filename": "gcc/ada/s-pooglo.ads", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pooglo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pooglo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pooglo.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "6adbf2d33ca9b81d2d2001a737a070c70df39363", "filename": "gcc/ada/s-pooloc.adb", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pooloc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pooloc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pooloc.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "4a76a2a3de39da05c0471bf1c4761f77ade59892", "filename": "gcc/ada/s-pooloc.ads", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pooloc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-pooloc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-pooloc.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "fdcd93b1c2734222ce28ed25ac85b635aab344bb", "filename": "gcc/ada/s-poosiz.adb", "status": "added", "additions": 359, "deletions": 0, "changes": 359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-poosiz.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-poosiz.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-poosiz.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "ee5de8b9d9fa1da6669e2cfb1dac31d470e856fb", "filename": "gcc/ada/s-poosiz.ads", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-poosiz.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-poosiz.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-poosiz.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "6cadc429609d4f6bd397962727a3980ffb823cd9", "filename": "gcc/ada/s-powtab.ads", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-powtab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-powtab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-powtab.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "a2f48a3f2cf6e6d299e85d21c7236fcbc5ed7108", "filename": "gcc/ada/s-proinf.adb", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-proinf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-proinf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-proinf.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "f54c72246cb3dec5c5a2145e13b8d9117b1463a4", "filename": "gcc/ada/s-proinf.ads", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-proinf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-proinf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-proinf.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "43f1fc0a8dbf36fcfc826390d5781843925d6d9c", "filename": "gcc/ada/s-rpc.adb", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-rpc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-rpc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rpc.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "63ab5480a9b54a9c2fdf9e9a29e478df30418592", "filename": "gcc/ada/s-rpc.ads", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-rpc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-rpc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rpc.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "db121d20ba7bb00fa505febaa47b7bd239f8d944", "filename": "gcc/ada/s-scaval.ads", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-scaval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-scaval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-scaval.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "ac3d9bb9081308aedd188e0eadc9fcd039c06c32", "filename": "gcc/ada/s-secsta.adb", "status": "added", "additions": 376, "deletions": 0, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-secsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-secsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-secsta.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "82d7e6cc50a9cc774de5c5f54f05e02a79f12a65", "filename": "gcc/ada/s-secsta.ads", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-secsta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-secsta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-secsta.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "87c6d69ede78885f5a06a01e685d586bbcc2d92b", "filename": "gcc/ada/s-sequio.adb", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sequio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sequio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sequio.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "445729073df69c067b9059dcc05944c651850ff5", "filename": "gcc/ada/s-sequio.ads", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sequio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sequio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sequio.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "5d0d45378c04dc6245724f45b14db43e81cf4075", "filename": "gcc/ada/s-shasto.adb", "status": "added", "additions": 507, "deletions": 0, "changes": 507, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-shasto.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-shasto.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shasto.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "d1b5e819edc2ca34367f1e03f0999bcb5c3e2672", "filename": "gcc/ada/s-shasto.ads", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-shasto.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-shasto.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shasto.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "518c14ca7f09f8416924e4f757c21df3fb13a748", "filename": "gcc/ada/s-soflin.adb", "status": "added", "additions": 368, "deletions": 0, "changes": 368, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-soflin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-soflin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "52306076ad13f92bc3113b7e8adb5b51556e0bca", "filename": "gcc/ada/s-soflin.ads", "status": "added", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "43da8388bbdcc249459fe9e42791286992ae8cdc", "filename": "gcc/ada/s-sopco3.adb", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sopco3.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "a102cbbef89fc0fc9f31d99bd2c63c3f73888978", "filename": "gcc/ada/s-sopco3.ads", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sopco3.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "136f7e4d9b3a33b479254d10045af17281128db4", "filename": "gcc/ada/s-sopco4.adb", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sopco4.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "fdda3e10fb0f8cd7be240a269ac6c7063c22f9f6", "filename": "gcc/ada/s-sopco4.ads", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sopco4.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "991d6e423810a3c01bdc77d22d87afef82dd3989", "filename": "gcc/ada/s-sopco5.adb", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sopco5.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "0da0886b4d38433e8dfd75fdacd262b0b9a37eb7", "filename": "gcc/ada/s-sopco5.ads", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-sopco5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sopco5.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "3a5e5b3176a5d39d6d82ea946a65e3e8f8917c6c", "filename": "gcc/ada/s-stache.adb", "status": "added", "additions": 282, "deletions": 0, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stache.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stache.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stache.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "d95c7021a54abe7c14862b54318aa58cfc16606c", "filename": "gcc/ada/s-stache.ads", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stache.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stache.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stache.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "71fb5ccffc377cc6214010695a2c62b8b4eb62b2", "filename": "gcc/ada/s-stalib.adb", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stalib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stalib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "cfd6622158f8dc2db7aebd7f080cf107bee2ee00", "filename": "gcc/ada/s-stalib.ads", "status": "added", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "b469ad208b7c11b8e33be5b65af95265de3565d2", "filename": "gcc/ada/s-stoele.adb", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stoele.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stoele.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stoele.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "18a170b0b2d0f96e8b103c63570a9d5a4a3d8fef", "filename": "gcc/ada/s-stoele.ads", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stoele.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stoele.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stoele.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "b6982e357f531861dc83b120d4a227814cd4b928", "filename": "gcc/ada/s-stopoo.ads", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stopoo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stopoo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stopoo.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "83964752bb72eea5046ce36ec877bd41ce856ead", "filename": "gcc/ada/s-stratt.adb", "status": "added", "additions": 674, "deletions": 0, "changes": 674, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stratt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stratt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stratt.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "66f617bedac31770bbf6f02b3f2725cb147f423b", "filename": "gcc/ada/s-stratt.ads", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stratt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-stratt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stratt.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "35dac03383be9b3db595282dd16facb940d75ea9", "filename": "gcc/ada/s-strops.adb", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-strops.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-strops.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-strops.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "9a2846f75e3d69004d02eabd297a451d037e6a53", "filename": "gcc/ada/s-strops.ads", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-strops.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-strops.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-strops.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "1f75f741febab8e0bc62778d0c374f14d187e94c", "filename": "gcc/ada/s-taasde.adb", "status": "added", "additions": 384, "deletions": 0, "changes": 384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taasde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taasde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "f83c7222f382185e1e74a4d8e6ab3e2f9d0f26e8", "filename": "gcc/ada/s-taasde.ads", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taasde.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taasde.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "acf479c4359c647162d8af609d94ffb2b977a2a9", "filename": "gcc/ada/s-tadeca.adb", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tadeca.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tadeca.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tadeca.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "cf0a9180d179ab620815946307ed454dacdcb509", "filename": "gcc/ada/s-tadeca.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tadeca.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tadeca.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tadeca.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "a44a810adff0c6c8872e30cfd4089002315860e9", "filename": "gcc/ada/s-tadert.adb", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tadert.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tadert.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tadert.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "12e3e592f808c27d73fcd4a47dc217c81454da78", "filename": "gcc/ada/s-tadert.ads", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tadert.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tadert.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tadert.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "bf9afbaedad0addf84707e4925edffc57378b866", "filename": "gcc/ada/s-taenca.adb", "status": "added", "additions": 713, "deletions": 0, "changes": 713, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taenca.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taenca.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taenca.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "e28ff7a3e76e2caacc35a69dc93cbaa63fd0c577", "filename": "gcc/ada/s-taenca.ads", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taenca.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taenca.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taenca.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "131490044160698e01037f0712361e1e7226f3dd", "filename": "gcc/ada/s-taprob.adb", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "b1aafd0e42328482f256251c90cf98efe6ac77d2", "filename": "gcc/ada/s-taprob.ads", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taprob.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taprob.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "19f035c4b9ae8682642706bedbff63c9dcae0164", "filename": "gcc/ada/s-taprop.ads", "status": "added", "additions": 476, "deletions": 0, "changes": 476, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "a6cf274c8ef21f5a652cc2c16e32675eb636ef37", "filename": "gcc/ada/s-tarest.adb", "status": "added", "additions": 548, "deletions": 0, "changes": 548, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "7846fbc32332f498bf3d41123831c47134ba5a8e", "filename": "gcc/ada/s-tarest.ads", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tarest.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tarest.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "83e2efcc645041c5019de8f0eb9b4266ed324401", "filename": "gcc/ada/s-tasdeb.adb", "status": "added", "additions": 704, "deletions": 0, "changes": 704, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasdeb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasdeb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "b07ab445034848a7f9c80ca9b89f9484c5653186", "filename": "gcc/ada/s-tasdeb.ads", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasdeb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasdeb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "6595f402bb54318ad8e30980cf3b0bf53c5f6622", "filename": "gcc/ada/s-tasinf.adb", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasinf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasinf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "f2bf26ead6fb24fffb205a9dea4398e422df49ac", "filename": "gcc/ada/s-tasinf.ads", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasinf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasinf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "08d778f9231324025af2d0225623abf2a11e42f5", "filename": "gcc/ada/s-tasini.adb", "status": "added", "additions": 981, "deletions": 0, "changes": 981, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "56381c60bcfc31b602c3eac6aa66b2075e60164d", "filename": "gcc/ada/s-tasini.ads", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasini.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasini.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "dcab023fdc50c724d3088ecb4f61b8ae67f3b99d", "filename": "gcc/ada/s-taskin.adb", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "de9fe568b981f5e6680e6526a3eb728fe99116e3", "filename": "gcc/ada/s-taskin.ads", "status": "added", "additions": 983, "deletions": 0, "changes": 983, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "19533476073d3cab0475937f144e3a65e4e34bc7", "filename": "gcc/ada/s-tasque.adb", "status": "added", "additions": 632, "deletions": 0, "changes": 632, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasque.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasque.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasque.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "9ee56095c0ef8c4f74aac8e69b32732d0270cfac", "filename": "gcc/ada/s-tasque.ads", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasque.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasque.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasque.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "516cee0fd2e56757d4c5580517f5650f2e838907", "filename": "gcc/ada/s-tasren.adb", "status": "added", "additions": 1815, "deletions": 0, "changes": 1815, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "97c21428b58ca570e3e5092caa4e551d97845d8f", "filename": "gcc/ada/s-tasren.ads", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasren.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasren.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "52af39eeed1a668ba8c85416b0f4db884e27efb0", "filename": "gcc/ada/s-tasres.ads", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasres.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasres.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasres.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "3c265f2f1d22b32811516019a235f900fc8a4e81", "filename": "gcc/ada/s-tassta.adb", "status": "added", "additions": 1549, "deletions": 0, "changes": 1549, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "913435a03fb58ec81eea43d25e9364028c9fbda9", "filename": "gcc/ada/s-tassta.ads", "status": "added", "additions": 274, "deletions": 0, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tassta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tassta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "af729643c15a3d3809e83c127ab378d51897110e", "filename": "gcc/ada/s-tasuti.adb", "status": "added", "additions": 570, "deletions": 0, "changes": 570, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "6d605bc394a62779f8e3cbaa5b94539a21ff1312", "filename": "gcc/ada/s-tasuti.ads", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tasuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "a7109fbfd9a5bbdb25e02483edea75180e7e18e4", "filename": "gcc/ada/s-tataat.adb", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tataat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tataat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tataat.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "84463e477f3a0de5e0f3635f1d0efb28f19b838d", "filename": "gcc/ada/s-tataat.ads", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tataat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tataat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tataat.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "80524e4d038be4e53f048d209984205f9568d672", "filename": "gcc/ada/s-tpinop.adb", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tpinop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tpinop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpinop.adb?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}, {"sha": "ccb308d777dd4b31c9777e2aa8690938f723a05b", "filename": "gcc/ada/s-tpinop.ads", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tpinop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacbc3505bac280b8db4f7d08a4a4b44ab69c0be/gcc%2Fada%2Fs-tpinop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpinop.ads?ref=cacbc3505bac280b8db4f7d08a4a4b44ab69c0be"}]}