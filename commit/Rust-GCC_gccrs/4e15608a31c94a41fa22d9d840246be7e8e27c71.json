{"sha": "4e15608a31c94a41fa22d9d840246be7e8e27c71", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUxNTYwOGEzMWM5NGE0MWZhMjJkOWQ4NDAyNDZiZTdlOGUyN2M3MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-09T00:19:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-09T00:19:25Z"}, "message": "m32r-protos.h (m32r_va_arg): Remove.\n\n        * config/m32r/m32r-protos.h (m32r_va_arg): Remove.\n        * config/m32r/m32r.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n        (m32r_gimplify_va_arg_expr): Rewrite from m32r_va_arg.\n        * config/m32r/m32r.h (EXPAND_BUILTIN_VA_ARG): Remove.\n\nFrom-SVN: r84335", "tree": {"sha": "4018fd4a74ba5a44f62f259749be6e19484b352b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4018fd4a74ba5a44f62f259749be6e19484b352b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e15608a31c94a41fa22d9d840246be7e8e27c71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e15608a31c94a41fa22d9d840246be7e8e27c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e15608a31c94a41fa22d9d840246be7e8e27c71", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e15608a31c94a41fa22d9d840246be7e8e27c71/comments", "author": null, "committer": null, "parents": [{"sha": "3bc0b10f9d87319135330c0e941fa6e6214e56cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc0b10f9d87319135330c0e941fa6e6214e56cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc0b10f9d87319135330c0e941fa6e6214e56cf"}], "stats": {"total": 69, "additions": 12, "deletions": 57}, "files": [{"sha": "fdf2971a84b009bb61b167314502278b76685915", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e15608a31c94a41fa22d9d840246be7e8e27c71/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e15608a31c94a41fa22d9d840246be7e8e27c71/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e15608a31c94a41fa22d9d840246be7e8e27c71", "patch": "@@ -1,5 +1,10 @@\n 2004-07-08  Richard Henderson  <rth@redhat.com>\n \n+\t* config/m32r/m32r-protos.h (m32r_va_arg): Remove.\n+\t* config/m32r/m32r.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n+\t(m32r_gimplify_va_arg_expr): Rewrite from m32r_va_arg.\n+\t* config/m32r/m32r.h (EXPAND_BUILTIN_VA_ARG): Remove.\n+\n \t* config/iq2000/iq2000-protos.h (iq2000_va_arg): Remove.\n \t* config/iq2000/iq2000.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n \t(iq2000_gimplify_va_arg_expr): Rewrite from iq2000_va_arg."}, {"sha": "89a4cbe28f93836d32288a5f2fe20723432b35d1", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e15608a31c94a41fa22d9d840246be7e8e27c71/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e15608a31c94a41fa22d9d840246be7e8e27c71/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=4e15608a31c94a41fa22d9d840246be7e8e27c71", "patch": "@@ -95,7 +95,6 @@ extern int    reg_or_zero_operand (rtx, Mmode);\n #endif /* HAVE_MACHINE_MODES */\n \n #ifdef TREE_CODE\n-extern struct rtx_def * m32r_va_arg (tree, tree);\n extern int m32r_pass_by_reference (tree);\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */"}, {"sha": "871369a9e98137c07ee6bd9b9faba582a232db86", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 7, "deletions": 52, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e15608a31c94a41fa22d9d840246be7e8e27c71/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e15608a31c94a41fa22d9d840246be7e8e27c71/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=4e15608a31c94a41fa22d9d840246be7e8e27c71", "patch": "@@ -99,6 +99,7 @@ static void m32r_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n static void init_idents (void);\n static bool m32r_rtx_costs (rtx, int, int, int *);\n+static tree m32r_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ATTRIBUTE_TABLE\n@@ -142,6 +143,8 @@ static bool m32r_rtx_costs (rtx, int, int, int *);\n \n #undef  TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS m32r_setup_incoming_varargs\n+#undef  TARGET_GIMPLIFY_VA_ARG_EXPR\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR m32r_gimplify_va_arg_expr\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1394,61 +1397,13 @@ m32r_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \f\n /* Implement `va_arg'.  */\n \n-rtx\n-m32r_va_arg (tree valist, tree type)\n+static tree\n+m32r_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n-  HOST_WIDE_INT size, rsize;\n-  tree t;\n-  rtx addr_rtx;\n-\n-  size = int_size_in_bytes (type);\n-  rsize = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;\n-\n   if (m32r_pass_by_reference (type))\n-    {\n-      tree type_ptr, type_ptr_ptr;\n-\n-      /* Pass by reference.  */\n-      type_ptr = build_pointer_type (type);\n-      type_ptr_ptr = build_pointer_type (type_ptr);\n-\n-      t = build (POSTINCREMENT_EXPR, va_list_type_node, valist, \n-\t\t build_int_2 (UNITS_PER_WORD, 0));\n-      TREE_SIDE_EFFECTS (t) = 1;\n-      t = build1 (NOP_EXPR, type_ptr_ptr, t);\n-      TREE_SIDE_EFFECTS (t) = 1;\n-      t = build1 (INDIRECT_REF, type_ptr, t);\n-\n-      addr_rtx = expand_expr (t, NULL_RTX, Pmode, EXPAND_NORMAL);\n-    }\n+    return ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n   else\n-    {\n-      /* Pass by value.  */\n-      if (size < UNITS_PER_WORD)\n-\t{\n-\t  /* Care for bigendian correction on the aligned address.  */\n-\t  t = build (PLUS_EXPR, ptr_type_node, valist,\n-\t\t     build_int_2 (rsize - size, 0));\n-\t  addr_rtx = expand_expr (t, NULL_RTX, Pmode, EXPAND_NORMAL);\n-\t  addr_rtx = copy_to_reg (addr_rtx);\n-\n-\t  /* Increment AP.  */\n-\t  t = build (PLUS_EXPR, va_list_type_node, valist,\n-\t\t     build_int_2 (rsize, 0));\n-\t  t = build (MODIFY_EXPR, va_list_type_node, valist, t);\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n-\t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-\t}\n-      else\n-\t{\n-\t  t = build (POSTINCREMENT_EXPR, va_list_type_node, valist, \n-\t\t     build_int_2 (rsize, 0));\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n-\t  addr_rtx = expand_expr (t, NULL_RTX, Pmode, EXPAND_NORMAL);\n-\t}\n-    }\n-\n-  return addr_rtx;\n+    return std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n }\n \f\n /* Return true if INSN is real instruction bearing insn.  */"}, {"sha": "4a2e01f51da34b7feb5a72ca2c4694f275832307", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e15608a31c94a41fa22d9d840246be7e8e27c71/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e15608a31c94a41fa22d9d840246be7e8e27c71/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=4e15608a31c94a41fa22d9d840246be7e8e27c71", "patch": "@@ -1141,10 +1141,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n   (((TYPE) ? TYPE_ALIGN (TYPE) : GET_MODE_BITSIZE (MODE)) <= PARM_BOUNDARY \\\n    ? PARM_BOUNDARY : 2 * PARM_BOUNDARY)\n #endif\n-\n-/* Implement `va_arg'.  */\n-#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n-  m32r_va_arg (valist, type)\n \f\n /* Function results.  */\n "}]}