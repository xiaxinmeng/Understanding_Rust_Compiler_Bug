{"sha": "fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958", "node_id": "C_kwDOANBUbNoAKGZkYjhjMDZiM2Q2YzFlYzVmYjUxN2NlN2QxYTg4YWIxZDhlYzc5NTg", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-04-13T06:11:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-04-13T18:59:31Z"}, "message": "c++: make cxx_incomplete_type_diagnostic return bool\n\nLike other diagnostic functions that might be silenced by options, it should\nreturn whether or not it actually emitted a diagnostic.\n\ngcc/cp/ChangeLog:\n\n\t* typeck2.cc (cxx_incomplete_type_diagnostic): Return bool.\n\t* cp-tree.h (cxx_incomplete_type_diagnostic): Adjust.", "tree": {"sha": "476a87141b52b7c045c45e1ce4c8da0a03a37353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/476a87141b52b7c045c45e1ce4c8da0a03a37353"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c2a5db997446a9438a3e01f5229dec3f78b09e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c2a5db997446a9438a3e01f5229dec3f78b09e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c2a5db997446a9438a3e01f5229dec3f78b09e7"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "a14eb8d0b9a538e49c3c53220a3df0bc6557091b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958", "patch": "@@ -8155,7 +8155,7 @@ extern void maybe_warn_pessimizing_move\t     (tree, tree, bool);\n \n /* in typeck2.cc */\n extern void require_complete_eh_spec_types\t(tree, tree);\n-extern void cxx_incomplete_type_diagnostic\t(location_t, const_tree,\n+extern bool cxx_incomplete_type_diagnostic\t(location_t, const_tree,\n \t\t\t\t\t\t const_tree, diagnostic_t);\n inline location_t\n loc_or_input_loc (location_t loc)\n@@ -8178,12 +8178,12 @@ cp_expr_loc_or_input_loc (const_tree t)\n   return cp_expr_loc_or_loc (t, input_location);\n }\n \n-inline void\n+inline bool\n cxx_incomplete_type_diagnostic (const_tree value, const_tree type,\n \t\t\t\tdiagnostic_t diag_kind)\n {\n-  cxx_incomplete_type_diagnostic (cp_expr_loc_or_input_loc (value),\n-\t\t\t\t  value, type, diag_kind);\n+  return cxx_incomplete_type_diagnostic (cp_expr_loc_or_input_loc (value),\n+\t\t\t\t\t value, type, diag_kind);\n }\n \n extern void cxx_incomplete_type_error\t\t(location_t, const_tree,"}, {"sha": "76a7a7f6b984d2fdc76b9e8c11d0e84bd2dc536d", "filename": "gcc/cp/typeck2.cc", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958/gcc%2Fcp%2Ftypeck2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958/gcc%2Fcp%2Ftypeck2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.cc?ref=fdb8c06b3d6c1ec5fb517ce7d1a88ab1d8ec7958", "patch": "@@ -292,7 +292,7 @@ cxx_incomplete_type_inform (const_tree type)\n    and TYPE is the type that was invalid.  DIAG_KIND indicates the\n    type of diagnostic (see diagnostic.def).  */\n \n-void\n+bool\n cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n \t\t\t\tconst_tree type, diagnostic_t diag_kind)\n {\n@@ -304,7 +304,7 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n \n   /* Avoid duplicate error message.  */\n   if (TREE_CODE (type) == ERROR_MARK)\n-    return;\n+    return false;\n \n   if (value)\n     {\n@@ -336,7 +336,7 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n       break;\n \n     case VOID_TYPE:\n-      emit_diagnostic (diag_kind, loc, 0,\n+      complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of %qT\", type);\n       break;\n \n@@ -346,7 +346,7 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n \t  type = TREE_TYPE (type);\n \t  goto retry;\n \t}\n-      emit_diagnostic (diag_kind, loc, 0,\n+      complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of array with unspecified bounds\");\n       break;\n \n@@ -365,12 +365,12 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n \t       add a fix-it hint.  */\n \t    if (type_num_arguments (TREE_TYPE (member)) == 1)\n \t      richloc.add_fixit_insert_after (\"()\");\n-\t    emit_diagnostic (diag_kind, &richloc, 0,\n+\t    complained = emit_diagnostic (diag_kind, &richloc, 0,\n \t\t\t     \"invalid use of member function %qD \"\n \t\t\t     \"(did you forget the %<()%> ?)\", member);\n \t  }\n \telse\n-\t  emit_diagnostic (diag_kind, loc, 0,\n+\t  complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t   \"invalid use of member %qD \"\n \t\t\t   \"(did you forget the %<&%> ?)\", member);\n       }\n@@ -380,59 +380,61 @@ cxx_incomplete_type_diagnostic (location_t loc, const_tree value,\n       if (is_auto (type))\n \t{\n \t  if (CLASS_PLACEHOLDER_TEMPLATE (type))\n-\t    emit_diagnostic (diag_kind, loc, 0,\n+\t    complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t     \"invalid use of placeholder %qT\", type);\n \t  else\n-\t    emit_diagnostic (diag_kind, loc, 0,\n+\t    complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t     \"invalid use of %qT\", type);\n \t}\n       else\n-\temit_diagnostic (diag_kind, loc, 0,\n+\tcomplained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"invalid use of template type parameter %qT\", type);\n       break;\n \n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n-      emit_diagnostic (diag_kind, loc, 0,\n+      complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of template template parameter %qT\",\n \t\t       TYPE_NAME (type));\n       break;\n \n     case TYPE_PACK_EXPANSION:\n-      emit_diagnostic (diag_kind, loc, 0,\n+      complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of pack expansion %qT\", type);\n       break;\n \n     case TYPENAME_TYPE:\n     case DECLTYPE_TYPE:\n-      emit_diagnostic (diag_kind, loc, 0,\n+      complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t       \"invalid use of dependent type %qT\", type);\n       break;\n \n     case LANG_TYPE:\n       if (type == init_list_type_node)\n \t{\n-\t  emit_diagnostic (diag_kind, loc, 0,\n+\t  complained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t   \"invalid use of brace-enclosed initializer list\");\n \t  break;\n \t}\n       gcc_assert (type == unknown_type_node);\n       if (value && TREE_CODE (value) == COMPONENT_REF)\n \tgoto bad_member;\n       else if (value && TREE_CODE (value) == ADDR_EXPR)\n-\temit_diagnostic (diag_kind, loc, 0,\n+\tcomplained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"address of overloaded function with no contextual \"\n \t\t\t \"type information\");\n       else if (value && TREE_CODE (value) == OVERLOAD)\n-\temit_diagnostic (diag_kind, loc, 0,\n+\tcomplained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"overloaded function with no contextual type information\");\n       else\n-\temit_diagnostic (diag_kind, loc, 0,\n+\tcomplained = emit_diagnostic (diag_kind, loc, 0,\n \t\t\t \"insufficient contextual information to determine type\");\n       break;\n \n     default:\n       gcc_unreachable ();\n     }\n+\n+  return complained;\n }\n \n /* Print an error message for invalid use of an incomplete type."}]}