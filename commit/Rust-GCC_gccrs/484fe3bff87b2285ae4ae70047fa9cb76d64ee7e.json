{"sha": "484fe3bff87b2285ae4ae70047fa9cb76d64ee7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0ZmUzYmZmODdiMjI4NWFlNGFlNzAwNDdmYTljYjc2ZDY0ZWU3ZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-02T15:17:13Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-02T15:17:13Z"}, "message": "2003-10-02  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/InetAddress.java\n\t(zeros): Removed.\n\t(ANY_IF): Initalizie in static block.\n\t(static): Load library with native methods here and initialize ANY_IF.\n\t(isAnyLocalAddress): Check if equal to ANY_IF.\n\t(equals): Use addr directly instead of addr1. Simplify for loop.\n\t(toString): Rename \"result\" to \"host\" and add IP address allways.\n\t(getLocalHost): Merged documentation from classpath.\n\t* java/net/ServerSocket.java\n\t(ServerSocket): New package-private constructor used by java.nio.\n\t* java/net/URLConnection.java\n\t(getRequestProperties): Check if already connected.\n\nFrom-SVN: r72032", "tree": {"sha": "684fb0979b64b364506bb3931e9a87d0093c77e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/684fb0979b64b364506bb3931e9a87d0093c77e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e/comments", "author": null, "committer": null, "parents": [{"sha": "b97e92ed3a4dd394c2d764c3a78264f43050a35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97e92ed3a4dd394c2d764c3a78264f43050a35e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97e92ed3a4dd394c2d764c3a78264f43050a35e"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "42ea2071ea01375e55cb5378c86b8d4763e2117e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=484fe3bff87b2285ae4ae70047fa9cb76d64ee7e", "patch": "@@ -1,3 +1,18 @@\n+2003-10-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/InetAddress.java\n+\t(zeros): Removed.\n+\t(ANY_IF): Initalizie in static block.\n+\t(static): Load library with native methods here and initialize ANY_IF.\n+\t(isAnyLocalAddress): Check if equal to ANY_IF.\n+\t(equals): Use addr directly instead of addr1. Simplify for loop.\n+\t(toString): Rename \"result\" to \"host\" and add IP address allways.\n+\t(getLocalHost): Merged documentation from classpath.\n+\t* java/net/ServerSocket.java\n+\t(ServerSocket): New package-private constructor used by java.nio.\n+\t* java/net/URLConnection.java\n+\t(getRequestProperties): Check if already connected.\n+\n 2003-10-02  Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/ByteBufferHelper.java:"}, {"sha": "6d72d627c64353839efaf05f3690e0d260152858", "filename": "libjava/java/net/InetAddress.java", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e/libjava%2Fjava%2Fnet%2FInetAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e/libjava%2Fjava%2Fnet%2FInetAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInetAddress.java?ref=484fe3bff87b2285ae4ae70047fa9cb76d64ee7e", "patch": "@@ -38,6 +38,7 @@\n \n package java.net;\n \n+import gnu.classpath.Configuration;\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -63,17 +64,27 @@ public class InetAddress implements Serializable\n {\n   private static final long serialVersionUID = 3286316764910316507L;\n   \n-  static final byte[] zeros = { 0, 0, 0, 0 };\n-  \n   /**\n    * Dummy InetAddress, used to bind socket to any (all) network interfaces.\n    */\n-  static final InetAddress ANY_IF = new InetAddress (zeros, null);\n+  static InetAddress ANY_IF;\n     \n   private static final byte[] localhostAddress = { 127, 0, 0, 1 };\n \n   private static InetAddress localhost = null;\n \n+  static\n+  {\n+    // load the shared library needed for name resolution\n+    if (Configuration.INIT_LOAD_LIBRARY)\n+      {\n+        System.loadLibrary (\"javanet\");\n+      }\n+    \n+    byte[] zeros = { 0, 0, 0, 0 };\n+    ANY_IF = new InetAddress (zeros, null);\n+  }\n+\n   /**\n    * The Serialized Form specifies that an int 'address' is saved/restored.\n    * This class uses a byte array internally so we'll just do the conversion\n@@ -160,7 +171,7 @@ public boolean isAnyLocalAddress()\n   {\n     // This is the IPv4 implementation.\n     // Any class derived from InetAddress should override this.\n-    return addr == zeros;\n+    return equals (ANY_IF);\n   }\n \n   /**\n@@ -475,14 +486,13 @@ public boolean equals (Object obj)\n     // different host names.\"  This violates the description in the\n     // JDK 1.2 API documentation.  A little experimentation\n     // shows that the latter is correct.\n-    byte[] addr1 = addr;\n     byte[] addr2 = ((InetAddress) obj).addr;\n     \n-    if (addr1.length != addr2.length)\n+    if (addr.length != addr2.length)\n       return false;\n     \n-    for (int i = addr1.length;  --i >= 0;  )\n-      if (addr1[i] != addr2[i])\n+    for (int i = 0; i < addr.length; i++)\n+      if (addr [i] != addr2 [i])\n \treturn false;\n     \n     return true;\n@@ -497,15 +507,15 @@ public boolean equals (Object obj)\n    */\n   public String toString()\n   {\n-    String result;\n+    String host;\n     String address = getHostAddress();\n     \n     if (hostName != null)\n-      result = hostName + \"/\" + address;\n+      host = hostName;\n     else\n-      result = address;\n+      host = address;\n     \n-    return result;\n+    return host + \"/\" + address;\n   }\n \n   /**\n@@ -656,7 +666,10 @@ public static InetAddress[] getAllByName (String hostname)\n   private static native String getLocalHostname();\n \n   /**\n-   * Returns the local host address.\n+   * Returns an InetAddress object representing the address of the current\n+   * host.\n+   *\n+   * @return The local host's address\n    *\n    * @exception UnknownHostException If no IP address for the host could\n    * be found"}, {"sha": "6b5544b3a27dba18d8290b07b60bb27883f3eda2", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=484fe3bff87b2285ae4ae70047fa9cb76d64ee7e", "patch": "@@ -74,6 +74,17 @@\n   private SocketImpl impl;\n \n   private boolean closed = false;\n+\n+  /*\n+   * This is only used by java.nio.\n+   */\n+  // FIXME: Workaround a bug in gcj.\n+  //ServerSocket (PlainSocketImpl impl) throws IOException\n+  ServerSocket (SocketImpl impl) throws IOException\n+  {\n+    this.impl = impl;\n+    this.impl.create (true);\n+  }\n   \n   /**\n    * Constructor that simply sets the implementation.\n@@ -318,8 +329,7 @@ protected final void implAccept (Socket s)\n    */\n   public void close () throws IOException\n   {\n-    if (impl != null)\n-      impl.close ();\n+    impl.close ();\n \n     if (getChannel() != null)\n       getChannel().close ();"}, {"sha": "e39e5781639ed1d78651016b5a23274764ff67e1", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/484fe3bff87b2285ae4ae70047fa9cb76d64ee7e/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=484fe3bff87b2285ae4ae70047fa9cb76d64ee7e", "patch": "@@ -1,5 +1,5 @@\n /* URLConnection.java -- Abstract superclass for reading from URL's\n-   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -45,9 +45,10 @@\n import java.security.AllPermission;\n import java.text.ParsePosition;\n import java.text.SimpleDateFormat;\n+import java.util.Collections;\n import java.util.Date;\n-import java.util.Locale;\n import java.util.Hashtable;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.StringTokenizer;\n import gnu.gcj.io.MimeTypes;\n@@ -783,9 +784,12 @@ public String getRequestProperty(String key)\n    */\n   public Map getRequestProperties()\n   {\n+    if (connected)\n+      throw new IllegalStateException (\"Already connected\");\n+\n     // Overridden by subclasses that support reading header fields from the\n     // request.\n-    return null;\n+    return Collections.EMPTY_MAP;\n   }\n \n   /**"}]}