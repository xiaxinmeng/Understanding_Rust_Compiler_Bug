{"sha": "0af94e6f263316ba608487859827f87696bbf377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFmOTRlNmYyNjMzMTZiYTYwODQ4Nzg1OTgyN2Y4NzY5NmJiZjM3Nw==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-09-08T06:16:24Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-09-08T06:16:24Z"}, "message": "c-common.c (same_scalar_type_ignoring_signedness): Delete.\n\ngcc/c-family:\n        * c-common.c (same_scalar_type_ignoring_signedness): Delete.\n        (vector_types_compatible_elements_p): New function.\n        * c-common.h: (same_scalar_type_ignoring_signedness): Delete\n\tdeclaration.\n        (vector_types_compatible_elements_p): Declare.\ngcc/c:\n        * c-typeck.c (build_binary_op): Use vector_types_compatible_elements_p.\ngcc/cp:\n        * typeck.c (cp_build_binary_op): Use vector_types_compatible_elements_p.\ngcc/testsuite:\n        * c-c++-common/opaque-vector.c: New test.\n\nFrom-SVN: r202364", "tree": {"sha": "0f2eee7eebbfbdf1341ac9855aa139be01e1a520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f2eee7eebbfbdf1341ac9855aa139be01e1a520"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0af94e6f263316ba608487859827f87696bbf377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af94e6f263316ba608487859827f87696bbf377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0af94e6f263316ba608487859827f87696bbf377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0af94e6f263316ba608487859827f87696bbf377/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dde03143093de0c0fff6f424dd0676ab5d005bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dde03143093de0c0fff6f424dd0676ab5d005bbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dde03143093de0c0fff6f424dd0676ab5d005bbb"}], "stats": {"total": 109, "additions": 97, "deletions": 12}, "files": [{"sha": "95babfa743f1cb6adc6892a9ac3935714ba284c4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0af94e6f263316ba608487859827f87696bbf377", "patch": "@@ -1,3 +1,11 @@\n+2013-09-08  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* c-common.c (same_scalar_type_ignoring_signedness): Delete.\n+\t(vector_types_compatible_elements_p): New function.\n+\t* c-common.h: (same_scalar_type_ignoring_signedness): Delete\n+\tdeclaration.\n+\t(vector_types_compatible_elements_p): Declare.\n+\n 2013-09-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-pretty-print.h (c_pretty_printer::simple_type_specifier): Now"}, {"sha": "62aa9fcec2bb0192715ed698320c6adb56068fe5", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=0af94e6f263316ba608487859827f87696bbf377", "patch": "@@ -2199,6 +2199,14 @@ check_main_parameter_types (tree decl)\n \t     \"%q+D takes only zero or two arguments\", decl);\n }\n \n+/* vector_targets_convertible_p is used for vector pointer types.  The\n+   callers perform various checks that the qualifiers are satisfactory,\n+   while OTOH vector_targets_convertible_p ignores the number of elements\n+   in the vectors.  That's fine with vector pointers as we can consider,\n+   say, a vector of 8 elements as two consecutive vectors of 4 elements,\n+   and that does not require and conversion of the pointer values.\n+   In contrast, vector_types_convertible_p and\n+   vector_types_compatible_elements_p are used for vector value types.  */\n /* True if pointers to distinct types T1 and T2 can be converted to\n    each other without an explicit cast.  Only returns true for opaque\n    vector types.  */\n@@ -2213,6 +2221,17 @@ vector_targets_convertible_p (const_tree t1, const_tree t2)\n   return false;\n }\n \n+/* vector_types_convertible_p is used for vector value types.\n+   It could in principle call vector_targets_convertible_p as a subroutine,\n+   but then the check for vector type would be duplicated with its callers,\n+   and also the purpose of vector_targets_convertible_p would become\n+   muddled.\n+   Where vector_types_convertible_p returns true, a conversion might still be\n+   needed to make the types match.\n+   In contrast, vector_targets_convertible_p is used for vector pointer\n+   values, and vector_types_compatible_elements_p is used specifically\n+   in the context for binary operators, as a check if use is possible without\n+   conversion.  */\n /* True if vector types T1 and T2 can be converted to each other\n    without an explicit cast.  If EMIT_LAX_NOTE is true, and T1 and T2\n    can only be converted with -flax-vector-conversions yet that is not\n@@ -10690,20 +10709,45 @@ resolve_overloaded_builtin (location_t loc, tree function,\n     }\n }\n \n-/* Ignoring their sign, return true if two scalar types are the same.  */\n+/* vector_types_compatible_elements_p is used in type checks of vectors\n+   values used as operands of binary operators.  Where it returns true, and\n+   the other checks of the caller succeed (being vector types in he first\n+   place, and matching number of elements), we can just treat the types\n+   as essentially the same.\n+   Contrast with vector_targets_convertible_p, which is used for vector\n+   pointer types,  and vector_types_convertible_p, which will allow\n+   language-specific matches under the control of flag_lax_vector_conversions,\n+   and might still require a conversion.  */\n+/* True if vector types T1 and T2 can be inputs to the same binary\n+   operator without conversion.\n+   We don't check the overall vector size here because some of our callers\n+   want to give different error messages when the vectors are compatible\n+   except for the element count.  */\n+\n bool\n-same_scalar_type_ignoring_signedness (tree t1, tree t2)\n+vector_types_compatible_elements_p (tree t1, tree t2)\n {\n+  bool opaque = TYPE_VECTOR_OPAQUE (t1) || TYPE_VECTOR_OPAQUE (t2);\n+  t1 = TREE_TYPE (t1);\n+  t2 = TREE_TYPE (t2);\n+\n   enum tree_code c1 = TREE_CODE (t1), c2 = TREE_CODE (t2);\n \n   gcc_assert ((c1 == INTEGER_TYPE || c1 == REAL_TYPE || c1 == FIXED_POINT_TYPE)\n \t      && (c2 == INTEGER_TYPE || c2 == REAL_TYPE\n \t\t  || c2 == FIXED_POINT_TYPE));\n \n+  t1 = c_common_signed_type (t1);\n+  t2 = c_common_signed_type (t2);\n   /* Equality works here because c_common_signed_type uses\n      TYPE_MAIN_VARIANT.  */\n-  return c_common_signed_type (t1)\n-    == c_common_signed_type (t2);\n+  if (t1 == t2)\n+    return true;\n+  if (opaque && c1 == c2\n+      && (c1 == INTEGER_TYPE || c1 == REAL_TYPE)\n+      && TYPE_PRECISION (t1) == TYPE_PRECISION (t2))\n+    return true;\n+  return false;\n }\n \n /* Check for missing format attributes on function pointers.  LTYPE is"}, {"sha": "722ba6e5c1521f759f99f7465ec7f309794ecb67", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=0af94e6f263316ba608487859827f87696bbf377", "patch": "@@ -766,7 +766,7 @@ extern void warn_logical_operator (location_t, enum tree_code, tree,\n \t\t\t\t   enum tree_code, tree, enum tree_code, tree);\n extern void check_main_parameter_types (tree decl);\n extern bool c_determine_visibility (tree);\n-extern bool same_scalar_type_ignoring_signedness (tree, tree);\n+extern bool vector_types_compatible_elements_p (tree, tree);\n extern void mark_valid_location_for_stdc_pragma (bool);\n extern bool valid_location_for_stdc_pragma_p (void);\n extern void set_float_const_decimal64 (void);"}, {"sha": "1b4b29772943c09503c0a27329de6c2bafffc789", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=0af94e6f263316ba608487859827f87696bbf377", "patch": "@@ -1,3 +1,7 @@\n+2013-09-08  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* c-typeck.c (build_binary_op): Use vector_types_compatible_elements_p.\n+\n 2013-09-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-objc-common.c (c_tree_printer): Tidy."}, {"sha": "e52533ecd6d3b35054e0df9b0571d8d3e28f9c59", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=0af94e6f263316ba608487859827f87696bbf377", "patch": "@@ -9987,7 +9987,7 @@ build_binary_op (location_t location, enum tree_code code,\n       if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE)\n         {\n           tree intt;\n-          if (TREE_TYPE (type0) != TREE_TYPE (type1))\n+\t  if (!vector_types_compatible_elements_p (type0, type1))\n             {\n               error_at (location, \"comparing vectors with different \"\n                                   \"element types\");\n@@ -10124,7 +10124,7 @@ build_binary_op (location_t location, enum tree_code code,\n       if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE)\n         {\n           tree intt;\n-          if (TREE_TYPE (type0) != TREE_TYPE (type1))\n+\t  if (!vector_types_compatible_elements_p (type0, type1))\n             {\n               error_at (location, \"comparing vectors with different \"\n                                   \"element types\");\n@@ -10230,8 +10230,7 @@ build_binary_op (location_t location, enum tree_code code,\n \n   if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE\n       && (!tree_int_cst_equal (TYPE_SIZE (type0), TYPE_SIZE (type1))\n-\t  || !same_scalar_type_ignoring_signedness (TREE_TYPE (type0),\n-\t\t\t\t\t\t    TREE_TYPE (type1))))\n+\t  || !vector_types_compatible_elements_p (type0, type1)))\n     {\n       binary_op_error (location, code, type0, type1);\n       return error_mark_node;"}, {"sha": "af230f5704b922d8a1f4a3b285b27367cc303c02", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0af94e6f263316ba608487859827f87696bbf377", "patch": "@@ -1,3 +1,7 @@\n+2013-09-08  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* typeck.c (cp_build_binary_op): Use vector_types_compatible_elements_p.\n+\n 2013-09-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/24926"}, {"sha": "6c48f242dd762eddd5ac80c3b794bed7d482be45", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af94e6f263316ba608487859827f87696bbf377/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0af94e6f263316ba608487859827f87696bbf377", "patch": "@@ -4554,7 +4554,8 @@ cp_build_binary_op (location_t location,\n \tvector_compare:\n \t  tree intt;\n \t  if (!same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (type0),\n-\t\t\t\t\t\t\t  TREE_TYPE (type1)))\n+\t\t\t\t\t\t\t  TREE_TYPE (type1))\n+\t      && !vector_types_compatible_elements_p (type0, type1))\n \t    {\n \t      if (complain & tf_error)\n \t\t{\n@@ -4670,8 +4671,7 @@ cp_build_binary_op (location_t location,\n       if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE)\n \t{\n \t  if (!tree_int_cst_equal (TYPE_SIZE (type0), TYPE_SIZE (type1))\n-\t      || !same_scalar_type_ignoring_signedness (TREE_TYPE (type0),\n-\t\t\t\t\t\t\tTREE_TYPE (type1)))\n+\t      || !vector_types_compatible_elements_p (type0, type1))\n \t    {\n \t      if (complain & tf_error)\n \t\tbinary_op_error (location, code, type0, type1);"}, {"sha": "da1e8a936fdc321f1c8fbba4a8e302d6c9609bec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af94e6f263316ba608487859827f87696bbf377/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af94e6f263316ba608487859827f87696bbf377/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0af94e6f263316ba608487859827f87696bbf377", "patch": "@@ -1,3 +1,7 @@\n+2013-09-08  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* c-c++-common/opaque-vector.c: New test.\n+\n 2013-09-08  Tom de Vries  <tom@codesourcery.com>\n \n \tPR c++/58282"}, {"sha": "cad266e893bea3d5eed8c3e4a1e8cb5e616d7801", "filename": "gcc/testsuite/c-c++-common/opaque-vector.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0af94e6f263316ba608487859827f87696bbf377/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fopaque-vector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0af94e6f263316ba608487859827f87696bbf377/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fopaque-vector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fopaque-vector.c?ref=0af94e6f263316ba608487859827f87696bbf377", "patch": "@@ -0,0 +1,22 @@\n+#define B_TEST(TYPE) { TYPE v __attribute__((vector_size(16))); (void)((v < v) < v); }\n+#ifdef __cplusplus\n+#define T_TEST(TYPE) { TYPE s; TYPE v __attribute__((vector_size(16))); __typeof((v<v)[0]) iv __attribute__((vector_size(16))); (void)((iv ? s : s) < v); }\n+#else\n+#define T_TEST(TYPE)\n+#endif\n+#define T(TYPE) B_TEST(TYPE) T_TEST(TYPE)\n+\n+void f ()\n+{\n+  T(short)\n+  T(int)\n+  T(long)\n+  T(long long)\n+\n+  T_TEST(float)\n+  T_TEST(double)\n+  /* Avoid trouble with non-power-of-two sizes.  */\n+#if !defined(__i386__) && !defined(__x86_64__) && !defined(__m68k__) && !defined(__ia64__)\n+  T_TEST(long double)\n+#endif\n+}"}]}