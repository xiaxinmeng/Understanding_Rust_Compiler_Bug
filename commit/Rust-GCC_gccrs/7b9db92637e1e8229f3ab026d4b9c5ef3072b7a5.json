{"sha": "7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5ZGI5MjYzN2UxZTgyMjlmM2FiMDI2ZDRiOWM1ZWYzMDcyYjdhNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-08-02T14:54:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:54:14Z"}, "message": "sem_ch3.adb, [...]: Update comments.\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, exp_atag.ads, get_scos.adb, get_scos.ads,\n\texp_disp.adb, lib-xref.adb, lib-xref.ads: Update comments.\n\tMinor reformatting.\n\nFrom-SVN: r177169", "tree": {"sha": "4c69b00c3317876c1503e89a7db45e70b39efd07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c69b00c3317876c1503e89a7db45e70b39efd07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/comments", "author": null, "committer": null, "parents": [{"sha": "e8374e7af37c56a79c8d28b0f7367bcc5a4d6707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8374e7af37c56a79c8d28b0f7367bcc5a4d6707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8374e7af37c56a79c8d28b0f7367bcc5a4d6707"}], "stats": {"total": 318, "additions": 161, "deletions": 157}, "files": [{"sha": "152af3e567b5dbceb4770d1fda7cc7ebc1b1adbf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "patch": "@@ -1,3 +1,9 @@\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, exp_atag.ads, get_scos.adb, get_scos.ads,\n+\texp_disp.adb, lib-xref.adb, lib-xref.ads: Update comments.\n+\tMinor reformatting.\n+\n 2011-08-02  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_res.adb: Minor reformatting."}, {"sha": "657e53fc41cb211d45bb6f49c7cf0ddd7e91adc9", "filename": "gcc/ada/exp_atag.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Fexp_atag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Fexp_atag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.ads?ref=7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "patch": "@@ -40,6 +40,7 @@ package Exp_Atag is\n       Stmts : List_Id);\n    --  Ada 2005 (AI-345): Generate statements that are common between timed,\n    --  asynchronous, and conditional select expansion.\n+   --  Comments required saying what parameters mean ???\n \n    procedure Build_CW_Membership\n      (Loc          : Source_Ptr;"}, {"sha": "6c8642ba96f9cea5f203fcb64113149bf70c5f86", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "patch": "@@ -594,7 +594,7 @@ package body Exp_Disp is\n                Analyze_List (Target_List);\n \n                if Present (Priv_Decls)\n-                  and then Is_Non_Empty_List (Priv_Decls)\n+                 and then Is_Non_Empty_List (Priv_Decls)\n                then\n                   Append_List (Target_List, Priv_Decls);\n                else\n@@ -6804,7 +6804,7 @@ package body Exp_Disp is\n                   if Tagged_Type_Expansion then\n                      Tag_Node :=\n                        New_Reference_To\n-                        (Node (First_Elmt (Access_Disp_Table (Typ))), Loc);\n+                         (Node (First_Elmt (Access_Disp_Table (Typ))), Loc);\n                   else\n                      Tag_Node :=\n                        Make_Attribute_Reference (Loc,"}, {"sha": "7a90959f96b0039a7b9d061b452094fa45a91607", "filename": "gcc/ada/get_scos.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Fget_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Fget_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_scos.adb?ref=7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2009-2011, Free Software Foundation, Inc.        --\n+--          Copyright (C) 2009-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "065a297d7f53469a9959250d1daccb36a8026128", "filename": "gcc/ada/get_scos.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Fget_scos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Fget_scos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_scos.ads?ref=7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 2009-2011, Free Software Foundation, Inc.        --\n+--          Copyright (C) 2009-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "b683da03fb4fe8a690f4c9551fee0cd30a7148c7", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "patch": "@@ -330,12 +330,12 @@ package body Lib.Xref is\n          return;\n       end if;\n \n-      --  Ada 2005 (AI-345): For synchronized types generate reference\n-      --  to the wrapper that allow us to dispatch calls through their\n-      --  implemented abstract interface types.\n+      --  Ada 2005 (AI-345): For synchronized types generate reference to the\n+      --  wrapper that allow us to dispatch calls through their implemented\n+      --  abstract interface types.\n \n-      --  The check for Present here is to protect against previously\n-      --  reported critical errors.\n+      --  The check for Present here is to protect against previously reported\n+      --  critical errors.\n \n       Prim_List := Primitive_Operations (Base_T);\n \n@@ -1042,8 +1042,11 @@ package body Lib.Xref is\n \n    function Is_Local_Reference_Type (Typ : Character) return Boolean is\n    begin\n-      return Typ = 'r' or else Typ = 'm' or else Typ = 's'\n-        or else Typ = 'I' or else Typ = 'D';\n+      return Typ = 'r' or else\n+             Typ = 'm' or else\n+             Typ = 's' or else\n+             Typ = 'I' or else\n+             Typ = 'D';\n    end Is_Local_Reference_Type;\n \n    --------\n@@ -1321,8 +1324,8 @@ package body Lib.Xref is\n          return;\n       end if;\n \n-      --  First we add references to the primitive operations of tagged\n-      --  types declared in the main unit.\n+      --  First we add references to the primitive operations of tagged types\n+      --  declared in the main unit.\n \n       Handle_Prim_Ops : declare\n          Ent  : Entity_Id;\n@@ -1990,16 +1993,16 @@ package body Lib.Xref is\n                --  specs.\n \n                  or else (XE.Loc = XE.Def\n-                            and then\n-                              (XE.Typ /= 'b'\n-                                or else not Is_Subprogram (XE.Ent)))\n+                           and then\n+                             (XE.Typ /= 'b'\n+                               or else not Is_Subprogram (XE.Ent)))\n \n                --  Also suppress definitions of body formals (we only\n                --  treat these as references, and the references were\n                --  separately recorded).\n \n                  or else (Is_Formal (XE.Ent)\n-                            and then Present (Spec_Entity (XE.Ent)))\n+                           and then Present (Spec_Entity (XE.Ent)))\n                then\n                   null;\n \n@@ -2400,11 +2403,10 @@ package body Lib.Xref is\n       --  not suitable for local cross-references.\n \n       Rnums : array (0 .. Nrefs) of Nat;\n-      --  This array contains numbers of references in the Xrefs table.\n-      --  This list is sorted in output order. The extra 0'th entry is\n-      --  convenient for the call to sort. When we sort the table, we\n-      --  move the entries in Rnums around, but we do not move the\n-      --  original table entries.\n+      --  This array contains numbers of references in the Xrefs table. This\n+      --  list is sorted in output order. The extra 0'th entry is convenient\n+      --  for the call to sort. When we sort the table, we move the entries in\n+      --  Rnums around, but we do not move the original table entries.\n \n       Curxu : Unit_Number_Type;\n       --  Current xref unit\n@@ -2555,9 +2557,9 @@ package body Lib.Xref is\n       begin\n          --  Eliminate duplicate entries\n \n-         --  We need this test for NR because if we force ALI file\n-         --  generation in case of errors detected, it may be the case\n-         --  that Nrefs is 0, so we should not reset it here\n+         --  We need this test for NR because if we force ALI file generation\n+         --  in case of errors detected, it may be the case that Nrefs is zero,\n+         --  so we should not reset it here.\n \n          if Nrefs >= 2 then\n             NR    := Nrefs;\n@@ -2602,6 +2604,7 @@ package body Lib.Xref is\n       for Refno in 1 .. Nrefs loop\n          Output_One_Ref : declare\n             Ent : Entity_Id;\n+\n             XE  : Xref_Entry renames Xrefs.Table (Rnums (Refno));\n             --  The current entry to be accessed\n \n@@ -2644,8 +2647,8 @@ package body Lib.Xref is\n                Write_Info_Char (' ');\n                Write_Entity_Name (XE.Sub, Cursrc);\n \n-               --  Indicate that the entity is in the unit of the current\n-               --  local xref section.\n+               --  Indicate that the entity is in the unit of the current local\n+               --  xref section.\n \n                Curru := Cursu;\n \n@@ -2676,17 +2679,15 @@ package body Lib.Xref is\n                Curru := Cursu;\n             end if;\n \n-            --  Start new Entity line if new entity. Note that we\n-            --  consider two entities the same if they have the same\n-            --  name and source location. This causes entities in\n-            --  instantiations to be treated as though they referred\n-            --  to the template.\n+            --  Start new Entity line if new entity. Note that we consider two\n+            --  entities the same if they have the same name and source\n+            --  location. This causes entities in instantiations to be treated\n+            --  as though they referred to the template.\n \n             if No (Curent)\n               or else\n                 (XE.Ent /= Curent\n-                 and then\n-                   (Name_Change (XE.Ent) or else XE.Def /= Curdef))\n+                  and then (Name_Change (XE.Ent) or else XE.Def /= Curdef))\n             then\n                Curent := XE.Ent;\n                Curdef := XE.Def;\n@@ -2715,14 +2716,14 @@ package body Lib.Xref is\n                Crloc := No_Location;\n             end if;\n \n-            --  Output the reference if it is not as the same location\n-            --  as the previous one, or it is a read-reference that\n-            --  indicates that the entity is an in-out actual in a call.\n+            --  Output the reference if it is not as the same location as the\n+            --  previous one, or it is a read-reference that indicates that the\n+            --  entity is an in-out actual in a call.\n \n             if XE.Loc /= No_Location\n               and then\n                 (XE.Loc /= Crloc\n-                 or else (Prevt = 'm' and then XE.Typ = 'r'))\n+                  or else (Prevt = 'm' and then XE.Typ = 'r'))\n             then\n                Crloc := XE.Loc;\n                Prevt := XE.Typ;\n@@ -2804,10 +2805,9 @@ package body Lib.Xref is\n             end if;\n          end loop;\n \n-         --  Write out the identifier by copying the exact\n-         --  source characters used in its declaration. Note\n-         --  that this means wide characters will be in their\n-         --  original encoded form.\n+         --  Write out the identifier by copying the exact source characters\n+         --  used in its declaration. Note that this means wide characters will\n+         --  be in their original encoded form.\n \n          for J in\n            Original_Location (Sloc (E)) .. P - 1"}, {"sha": "829e8723dbdbd7224fd68acbd429d1aeb4f5a84b", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 109, "deletions": 115, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "patch": "@@ -44,7 +44,7 @@ package Lib.Xref is\n    --        This header precedes xref information (entities/references from\n    --        the unit), identified by dependency number and file name. The\n    --        dependency number is the index into the generated D lines and\n-   --        its origin is one (i.e. 2 = reference to second generated D line).\n+   --        is ones origin (e.g. 2 = reference to second generated D line).\n \n    --        Note that the filename here will reflect the original name if\n    --        a Source_Reference pragma was encountered (since all line number\n@@ -61,17 +61,17 @@ package Lib.Xref is\n    --        if the entity is the first token on the line, and is preceded\n    --        by space-HT-space, then the column would be column 10.\n \n-   --        type is a single letter identifying the type of the entity.\n-   --        See next section (Cross-Reference Entity Identifiers) for a\n-   --        full list of the characters used).\n+   --        type is a single letter identifying the type of the entity. See\n+   --        next section (Cross-Reference Entity Identifiers) for a full list\n+   --        of the characters used).\n \n    --        col is the column number of the referenced entity\n \n-   --        level is a single character that separates the col and\n-   --        entity fields. It is an asterisk (*) for a top level library\n-   --        entity that is publicly visible, as well as for an entity declared\n-   --        in the visible part of a generic package, the plus sign (+) for\n-   --        a C/C++ static entity, and space otherwise.\n+   --        level is a single character that separates the col and entity\n+   --        fields. It is an asterisk (*) for a top level library entity that\n+   --        is publicly visible, as well for an entity declared in the visible\n+   --        part of a generic package, the plus sign (+) for a C/C++ static\n+   --        entity, and space otherwise.\n \n    --        entity is the name of the referenced entity, with casing in\n    --        the canonical casing for the source file where it is defined.\n@@ -84,24 +84,23 @@ package Lib.Xref is\n \n    --            =line:col\n \n-   --        Here line:col give the reference to the identifier that\n-   --        appears in the renaming declaration. Note that we never need\n-   --        a file entry, since this identifier is always in the current\n-   --        file in which the entity is declared. Currently, renameref\n-   --        appears only for the simple renaming case. If the renaming\n-   --        reference is a complex expressions, then renameref is omitted.\n-   --        Here line/col give line/column as defined above.\n+   --        Here line:col give the reference to the identifier that appears\n+   --        in the renaming declaration. Note that we never need a file entry,\n+   --        since this identifier is always in the current file in which the\n+   --        entity is declared. Currently, renameref appears only for the\n+   --        simple renaming case. If the renaming reference is a complex\n+   --        expressions, then renameref is omitted. Here line/col give\n+   --        line/column as defined above.\n \n-   --        instref is only present for package and subprogram instances.\n-   --        The information in instref is the location of the point of\n-   --        declaration of the generic parent unit. This part has the form:\n+   --        instref is only present for package and subprogram instances. The\n+   --        information in instref is the location of the point of declaration\n+   --        of the generic parent unit. This part has the form:\n \n    --            [file|line]\n \n    --        without column information, on the reasonable assumption that\n-   --        there is only one unit per line (the same assumption is made\n-   --        in references to entities that are declared within instances,\n-   --        see below).\n+   --        there is only one unit per line (the same assumption is made in\n+   --        references to entities declared within instances, see below).\n \n    --        typeref is the reference for a related type. This part is\n    --        optional. It is present for the following cases:\n@@ -122,15 +121,15 @@ package Lib.Xref is\n    --          additional interfaces are stored in the list of references\n    --          with a special type of Interface_Reference.\n \n-   --          For an array type, there is an entry of the form LR=<> for\n-   --          each of the index types appearing in the type declaration.\n-   --          The index types follow the entry for the component type.\n-   --          In the data structures of ali.ads, however, the list of index\n-   --          types are output in the list of references with a special\n-   --          Rtype set to Array_Index_Reference.\n+   --          For an array type, there is an entry of the form LR=<> for each\n+   --          of the index types appearing in the type declaration. The index\n+   --          types follow the entry for the component type. In the data\n+   --          structures of ali.ads, however, the list of index types are\n+   --          output in the list of references with a special Rtype set to\n+   --          Array_Index_Reference.\n \n-   --          In the above list LR shows the brackets used in the output,\n-   --          which has one of the two following forms:\n+   --          In the above list LR shows the brackets used in the output which\n+   --          has one of the two following forms:\n \n    --            L file | line type col R      user entity\n    --            L name-in-lower-case R        standard entity\n@@ -196,13 +195,13 @@ package Lib.Xref is\n    --              ^ = subprogram ACCESS parameter\n \n    --           b is used for spec entities that are repeated in a body,\n-   --           including the unit (subprogram, package, task, protected\n-   --           body, protected entry) name itself, and in the case of a\n-   --           subprogram, the formals. This letter is also used for the\n-   --           occurrence of entry names in accept statements. Such entities\n-   --           are not considered to be definitions for cross-referencing\n-   --           purposes, but rather are considered to be references to the\n-   --           corresponding spec entities, marked with this special type.\n+   --           including the unit (subprogram, package, task, protected body,\n+   --           protected entry) name itself, and in the case of a subprogram,\n+   --           the formals. This letter is also used for the occurrence of\n+   --           entry names in accept statements. Such entities are not\n+   --           considered to be definitions for cross-referencing purposes,\n+   --           but rather are considered to be references to the corresponding\n+   --           spec entities, marked with this special type.\n \n    --           c is similar to b but is used to mark the completion of a\n    --           private or incomplete type. As with b, the completion is not\n@@ -212,9 +211,9 @@ package Lib.Xref is\n    --           d is used to identify a discriminant of a type. If this is\n    --           an incomplete or private type with discriminants, the entry\n    --           denotes the occurrence of the discriminant in the partial view\n-   --           which is also the point of definition of the discriminant.\n-   --           The occurrence of the same discriminant in the full view is\n-   --           a regular reference to it.\n+   --           which is also the point of definition of the discriminant. The\n+   --           occurrence of the same discriminant in the full view is a\n+   --           regular reference to it.\n \n    --           e is used to identify the end of a construct in the following\n    --           cases:\n@@ -228,11 +227,11 @@ package Lib.Xref is\n    --             Enumeration Definition );\n \n    --           Note that 'e' entries are special in that they appear even\n-   --           in referencing units (normally xref entries appear only\n-   --           for references in the extended main source unit (see Lib) to\n-   --           which the ali applies. But 'e' entries are really structural\n-   --           and simply indicate where packages end. This information can\n-   --           be used to reconstruct scope information for any entities\n+   --           in referencing units (normally xref entries appear only for\n+   --           references in the extended main source unit (see Lib) to which\n+   --           the ali applies. But 'e' entries are really structural and\n+   --           simply indicate where packages end. This information can be\n+   --           used to reconstruct scope information for any entities\n    --           referenced from within the package. The line/column values\n    --           for these entries point to the semicolon ending the construct.\n \n@@ -270,11 +269,10 @@ package Lib.Xref is\n    --           entry in the section for the child duplicates this information\n    --           but appears in the child rather than the parent.\n \n-   --           l is used to identify the occurrence in the source of the\n-   --           name on an end line. This is just a syntactic reference\n-   --           which can be ignored for semantic purposes (such as call\n-   --           graph construction). Again, in the case of an accept there\n-   --           can be multiple l lines.\n+   --           l is used to identify the occurrence in the source of the name\n+   --           on an end line. This is just a syntactic reference which can be\n+   --           ignored for semantic purposes (e.g. a call graph construction).\n+   --           Again, in the case of an accept there can be multiple l lines.\n \n    --           o is used for variables referenced from a SPARK 'own'\n    --           definition. In the SPARK language, it is allowed to use a\n@@ -315,14 +313,14 @@ package Lib.Xref is\n    --           Note that in the case of accept statements, there can\n    --           be multiple b and t entries for the same entity.\n \n-   --           x is used to identify the reference as the entity from which\n-   --           a tagged type is extended. This allows immediate access to\n-   --           the parent of a tagged type.\n+   --           x is used to identify the reference as the entity from which a\n+   --           tagged type is extended. This allows immediate access to the\n+   --           parent of a tagged type.\n \n-   --           z is used on the cross-reference line for a generic unit, to\n-   --           mark the definition of a generic formal of the unit.\n-   --           This entry type is similar to 'k' and 'p' in that it is an\n-   --           implicit reference for an entity with a different name.\n+   --           z is used on the cross-reference line for a generic unit,\n+   --           to mark the definition of a generic formal of the unit. This\n+   --           entry type is similar to 'k' and 'p' in that it is an implicit\n+   --           reference for an entity with a different name.\n \n    --           The characters >, <. =, and ^ are used on the cross-reference\n    --           line for a subprogram, to denote formal parameters and their\n@@ -333,13 +331,12 @@ package Lib.Xref is\n    --           references are present only if the entity in question is\n    --           a generic entity, and in that case the [..] contains the\n    --           reference for the instantiation. In the case of nested\n-   --           instantiations, this can be nested [...[...[...]]] etc.\n-   --           The reference is of the form [file|line] no column is\n-   --           present since it is assumed that only one instantiation\n-   --           appears on a single source line. Note that the appearance\n-   --           of file numbers in such references follows the normal\n-   --           rules (present only if needed, and resets the current\n-   --           file for subsequent references).\n+   --           instantiations, this can be nested [...[...[...]]] etc. The\n+   --           reference is of the form [file|line] no column is present since\n+   --           it is assumed that only one instantiation appears on a single\n+   --           source line. Note that the appearance of file numbers in such\n+   --           references follows the normal rules (present only if needed,\n+   --           and resets the current file for subsequent references).\n \n    --     Examples:\n \n@@ -388,9 +385,9 @@ package Lib.Xref is\n    --        10I3*Genv{integer} 3|4I10[6|12]\n \n    --           This line gives a reference for the entity Genv in a generic\n-   --           package. The reference in file 3, line 4, col 10, refers to\n-   --           an instance of the generic where the instantiation can be\n-   --           found in file 6 at line 12.\n+   --           package. The reference in file 3, line 4, col 10, refers to an\n+   --           instance of the generic where the instantiation can be found in\n+   --           file 6 at line 12.\n \n    --  Continuation lines are used if the reference list gets too long,\n    --  a continuation line starts with a period, and then has references\n@@ -410,26 +407,25 @@ package Lib.Xref is\n    ----------------------------------------\n \n    --  In the cross-reference section of the ali file, entity types are\n-   --  identified by a single letter, indicating the entity type. The\n-   --  following table indicates the letter. A space for an entry is\n-   --  used for entities that do not appear in the cross-reference table.\n-\n-   --  For objects, the character * appears in this table. In the xref\n-   --  listing, this character is replaced by the lower case letter that\n-   --  corresponds to the type of the object. For example, if a variable\n-   --  is of a Float type, then, since the type is represented by an\n-   --  upper case F, the object would be represented by a lower case f.\n-\n-   --  A special exception is the case of booleans, whose entities are\n-   --  normal E_Enumeration_Type or E_Enumeration_Subtype entities, but\n-   --  which appear as B/b in the xref lines, rather than E/e.\n-\n-   --  For private types, the character + appears in the table. In this\n-   --  case the kind of the underlying type is used, if available, to\n-   --  determine the character to use in the xref listing. The listing\n-   --  will still include a '+' for a generic private type, for example,\n-   --  but will retain the '*' for an object or formal parameter of such\n-   --  a type.\n+   --  identified by a single letter, indicating the entity type. The following\n+   --  table indicates the letter. A space for an entry is used for entities\n+   --  that do not appear in the cross-reference table.\n+\n+   --  For objects, the character * appears in this table. In the xref listing,\n+   --  this character is replaced by the lower case letter that corresponds to\n+   --  the type of the object. For example, if a variable is of a Float type,\n+   --  then, since the type is represented by an upper case F, the object would\n+   --  be represented by a lower case f.\n+\n+   --  A special exception is the case of booleans, whose entities are normal\n+   --  E_Enumeration_Type or E_Enumeration_Subtype entities, but which appear\n+   --  as B/b in the xref lines, rather than E/e.\n+\n+   --  For private types, the character + appears in the table. In this case\n+   --  the kind of the underlying type is used, if available, to determine the\n+   --  character to use in the xref listing. The listing will still include a\n+   --  '+' for a generic private type, for example, but will retain the '*' for\n+   --  an object or formal parameter of such a type.\n \n    --  For subprograms, the characters 'U' and 'V' appear in the table,\n    --  indicating procedures and functions. If the operation is abstract,\n@@ -525,20 +521,19 @@ package Lib.Xref is\n       E_Return_Statement                           => ' ',\n       E_Package                                    => 'K',\n \n-      --  The following entities are not ones to which we gather\n-      --  cross-references, since it does not make sense to do so\n-      --  (e.g. references to a package are to the spec, not the body)\n-      --  Indeed the occurrence of the body entity is considered to\n-      --  be a reference to the spec entity.\n+      --  The following entities are not ones to which we gather the cross-\n+      --  references, since it does not make sense to do so (e.g. references to\n+      --  a package are to the spec, not the body) Indeed the occurrence of the\n+      --  body entity is considered to be a reference to the spec entity.\n \n       E_Package_Body                               => ' ',\n       E_Protected_Object                           => ' ',\n       E_Protected_Body                             => ' ',\n       E_Task_Body                                  => ' ',\n       E_Subprogram_Body                            => ' ');\n \n-   --  The following table is for information purposes. It shows the\n-   --  use of each character appearing as an entity type.\n+   --  The following table is for information purposes. It shows the use of\n+   --  each character appearing as an entity type.\n \n    --  letter  lower case usage                UPPER CASE USAGE\n \n@@ -701,18 +696,17 @@ package Lib.Xref is\n    -- Handling of Imported Subprograms --\n    --------------------------------------\n \n-   --  If a pragma Import or Interface applies to a subprogram, the\n-   --  pragma is the completion of the subprogram. This is noted in\n-   --  the ALI file by making the occurrence of the subprogram in the\n-   --  pragma into a body reference ('b') and by including the external\n-   --  name of the subprogram and its language, bracketed by '<' and '>'\n-   --  in that reference. For example:\n+   --  If a pragma Import or Interface applies to a subprogram, the pragma is\n+   --  the completion of the subprogram. This is noted in the ALI file by\n+   --  making the occurrence of the subprogram in the pragma into a body\n+   --  reference ('b') and by including the external name of the subprogram and\n+   --  its language, bracketed by '<' and '>' in that reference. For example:\n    --\n    --     3U13*elsewhere 4b<c,there>21\n    --\n-   --  indicates that procedure elsewhere, declared at line 3, has a\n-   --  pragma Import at line 4, that its body is in C, and that the link\n-   --  name as given in the pragma is \"there\".\n+   --  indicates that procedure elsewhere, declared at line 3, has a pragma\n+   --  Import at line 4, that its body is in C, and that the link name as given\n+   --  in the pragma is \"there\".\n \n    -----------------\n    -- Subprograms --\n@@ -727,30 +721,30 @@ package Lib.Xref is\n    --  Node N is an operator node, whose entity has been set. If this entity\n    --  is a user defined operator (i.e. an operator not defined in package\n    --  Standard), then a reference to the operator is recorded at node N.\n-   --  T is the operand type of the operator. A reference to the operator\n-   --  is an implicit reference to the type, and that needs to be recorded\n-   --  to avoid spurious warnings on unused entities, when the operator is\n-   --  a renaming of a predefined operator.\n+   --  T is the operand type of the operator. A reference to the operator is an\n+   --  implicit reference to the type, and that needs to be recorded to avoid\n+   --  spurious warnings on unused entities, when the operator is a renaming of\n+   --  a predefined operator.\n \n    procedure Generate_Reference\n      (E       : Entity_Id;\n       N       : Node_Id;\n       Typ     : Character := 'r';\n       Set_Ref : Boolean   := True;\n       Force   : Boolean   := False);\n-   --  This procedure is called to record a reference. N is the location\n-   --  of the reference and E is the referenced entity. Typ is one of:\n+   --  This procedure is called to record a reference. N is the location of the\n+   --  reference and E is the referenced entity. Typ is one of:\n    --\n    --    a character already described in the description of ref entries above\n    --    ' ' for dummy reference (see below)\n    --\n-   --  Note: all references to incomplete or private types are to the\n-   --  original (incomplete or private type) declaration. The full\n-   --  declaration is treated as a reference with type 'c'.\n+   --  Note: all references to incomplete or private types are to the original\n+   --  (incomplete or private type) declaration. The full declaration is\n+   --  treated as a reference with type 'c'.\n    --\n-   --  Note: all references to packages or subprograms are to the entity\n-   --  for the spec. The entity in the body is treated as a reference\n-   --  with type 'b'. Similar handling for references to subprogram formals.\n+   --  Note: all references to packages or subprograms are to the entity for\n+   --  the spec. The entity in the body is treated as a reference with type\n+   --  'b'. Similar handling for references to subprogram formals.\n    --\n    --  The call has no effect if N is not in the extended main source unit\n    --  This check is omitted for type 'e' references (where it is useful to"}, {"sha": "d99abefd259a2dc9e1c332ebd9bd1a2942c299c1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=7b9db92637e1e8229f3ab026d4b9c5ef3072b7a5", "patch": "@@ -3702,6 +3702,9 @@ package body Sem_Ch3 is\n          Analyze_Aspect_Specifications (N, Id);\n       end if;\n \n+      --  Generate 'I' xref for object initialization at definition, only used\n+      --  for the local xref section used in ALFA mode.\n+\n       if ALFA_Mode and then Present (Expression (Original_Node (N))) then\n          Generate_Reference (Id, Id, 'I');\n       end if;"}]}