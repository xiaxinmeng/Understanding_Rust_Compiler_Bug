{"sha": "202f590eca3f213c602c3422d9506787a3aaeb66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAyZjU5MGVjYTNmMjEzYzYwMmMzNDIyZDk1MDY3ODdhM2FhZWI2Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1997-11-14T14:23:25Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-11-14T14:23:25Z"}, "message": "alpha.c (call_operand): Any reg is valid for WinNT.\n\n        * alpha.c (call_operand): Any reg is valid for WinNT.\n        * alpha.md (call_nt, call_value_nt): Don't force address into $27.\n        (anon nt calls): Add 'R' alternative.\n        * alpha/win-nt.h (TRAMPOLINE_TEMPLATE, TRAMPOLINE_SIZE,\n        INITIALIZE_TRAMPOLINE): Handle lack of original $27 and 32-bit ptrs.\n\nFrom-SVN: r16487", "tree": {"sha": "bfa5e0da883f1491a24d7363f07d50b883c78bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfa5e0da883f1491a24d7363f07d50b883c78bc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/202f590eca3f213c602c3422d9506787a3aaeb66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/202f590eca3f213c602c3422d9506787a3aaeb66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/202f590eca3f213c602c3422d9506787a3aaeb66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/202f590eca3f213c602c3422d9506787a3aaeb66/comments", "author": null, "committer": null, "parents": [{"sha": "f78b5ca112ef5d3baa8455380553837fa688d9e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f78b5ca112ef5d3baa8455380553837fa688d9e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f78b5ca112ef5d3baa8455380553837fa688d9e4"}], "stats": {"total": 103, "additions": 80, "deletions": 23}, "files": [{"sha": "fd2e24c81d800ccc4a6984822d8a285897198ddd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202f590eca3f213c602c3422d9506787a3aaeb66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202f590eca3f213c602c3422d9506787a3aaeb66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=202f590eca3f213c602c3422d9506787a3aaeb66", "patch": "@@ -1,3 +1,11 @@\n+Fri Nov 14 07:24:20 1997  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (call_operand): Any reg is valid for WinNT.\n+\t* alpha.md (call_nt, call_value_nt): Don't force address into $27.\n+\t(anon nt calls): Add 'R' alternative.\n+\t* alpha/win-nt.h (TRAMPOLINE_TEMPLATE, TRAMPOLINE_SIZE,\n+\tINITIALIZE_TRAMPOLINE): Handle lack of original $27 and 32-bit ptrs.\n+\n Fri Nov 14 06:59:33 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* calls.c (expand_call): Handle pcc_struct_value correctly for C++."}, {"sha": "5bb64d44bb8e7d19d2b485c5bb3e5c5d09b0cd17", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202f590eca3f213c602c3422d9506787a3aaeb66/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202f590eca3f213c602c3422d9506787a3aaeb66/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=202f590eca3f213c602c3422d9506787a3aaeb66", "patch": "@@ -542,7 +542,8 @@ call_operand (op, mode)\n     return 0;\n \n   return (GET_CODE (op) == SYMBOL_REF\n-\t  || (GET_CODE (op) == REG && (TARGET_OPEN_VMS || REGNO (op) == 27)));\n+\t  || (GET_CODE (op) == REG\n+\t      && (TARGET_OPEN_VMS || TARGET_WINDOWS_NT || REGNO (op) == 27)));\n }\n \n /* Return 1 if OP is a valid Alpha comparison operator.  Here we know which"}, {"sha": "0694a6f4a4ef315e7f1c282393cfcb327ac73035", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202f590eca3f213c602c3422d9506787a3aaeb66/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202f590eca3f213c602c3422d9506787a3aaeb66/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=202f590eca3f213c602c3422d9506787a3aaeb66", "patch": "@@ -3216,22 +3216,17 @@\n }\")\n \n (define_expand \"call_nt\"\n-  [(parallel [(call (mem:DI (match_operand:DI 0 \"\" \"\"))\n+  [(parallel [(call (mem:DI (match_operand 0 \"\" \"\"))\n \t\t    (match_operand 1 \"\" \"\"))\n \t      (clobber (reg:DI 26))])]\n   \"\"\n   \"\n { if (GET_CODE (operands[0]) != MEM)\n     abort ();\n-  operands[0] = XEXP (operands[0], 0);\n \n-  if (GET_CODE (operands[1]) != SYMBOL_REF\n-      && ! (GET_CODE (operands[1]) == REG && REGNO (operands[1]) == 27))\n-    {\n-      rtx tem = gen_rtx (REG, DImode, 27);\n-      emit_move_insn (tem, operands[1]);\n-      operands[1] = tem;\n-    }\n+  operands[0] = XEXP (operands[0], 0);\n+  if (GET_CODE (operands[0]) != SYMBOL_REF && GET_CODE (operands[0]) != REG)\n+    operands[0] = force_reg (DImode, operands[0]);\n }\")\n \n ;;\n@@ -3329,7 +3324,7 @@\n \n (define_expand \"call_value_nt\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (mem:DI (match_operand:DI 1 \"\" \"\"))\n+\t\t   (call (mem:DI (match_operand 1 \"\" \"\"))\n \t\t\t (match_operand 2 \"\" \"\")))\n \t      (clobber (reg:DI 26))])]\n   \"\"\n@@ -3338,13 +3333,8 @@\n     abort ();\n \n   operands[1] = XEXP (operands[1], 0);\n-  if (GET_CODE (operands[1]) != SYMBOL_REF\n-      && ! (GET_CODE (operands[1]) == REG && REGNO (operands[1]) == 27))\n-    {\n-      rtx tem = gen_rtx (REG, DImode, 27);\n-      emit_move_insn (tem, operands[1]);\n-      operands[1] = tem;\n-    }\n+  if (GET_CODE (operands[0]) != SYMBOL_REF && GET_CODE (operands[0]) != REG)\n+    operands[1] = force_reg (DImode, operands[1]);\n }\")\n \n (define_expand \"call_value_vms\"\n@@ -3406,13 +3396,14 @@\n   [(set_attr \"type\" \"jsr\")])\n       \n (define_insn \"\"\n-  [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"r,i\"))\n+  [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"r,R,i\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:DI 26))]\n   \"TARGET_WINDOWS_NT\"\n   \"@\n    jsr $26,(%0)\n-   bsr $26,%0\"\n+   bsr $26,%0\n+   jsr $26,%0\"\n   [(set_attr \"type\" \"jsr\")])\n       \n (define_insn \"\"\n@@ -3442,14 +3433,15 @@\n   [(set_attr \"type\" \"jsr\")])\n \n (define_insn \"\"\n-  [(set (match_operand 0 \"register_operand\" \"=rf,rf\")\n-\t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"r,i\"))\n+  [(set (match_operand 0 \"register_operand\" \"=rf,rf,rf\")\n+\t(call (mem:DI (match_operand:DI 1 \"call_operand\" \"r,R,i\"))\n \t      (match_operand 2 \"\" \"\")))\n    (clobber (reg:DI 26))]\n   \"TARGET_WINDOWS_NT\"\n   \"@\n    jsr $26,(%1)\n-   bsr $26,%1\"\n+   bsr $26,%1\n+   jsr $26,%1\"\n   [(set_attr \"type\" \"jsr\")])\n \n (define_insn \"\""}, {"sha": "768256e574ccc91456d5432292712558d22579b4", "filename": "gcc/config/alpha/win-nt.h", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/202f590eca3f213c602c3422d9506787a3aaeb66/gcc%2Fconfig%2Falpha%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/202f590eca3f213c602c3422d9506787a3aaeb66/gcc%2Fconfig%2Falpha%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fwin-nt.h?ref=202f590eca3f213c602c3422d9506787a3aaeb66", "patch": "@@ -70,3 +70,59 @@ Boston, MA 02111-1307, USA.  */\n  %{!mwindows:-subsystem console -e _mainCRTStartup} \\\n  %{mcrtmt:LIBCMT.LIB%s KERNEL32.LIB%s} %{!mcrtmt:LIBC.LIB%s KERNEL32.LIB%s} \\\n  %{v}\"\n+\n+\n+/* Output assembler code for a block containing the constant parts\n+   of a trampoline, leaving space for the variable parts.\n+\n+   The trampoline should set the static chain pointer to value placed\n+   into the trampoline and should branch to the specified routine.  */\n+\n+#undef TRAMPOLINE_TEMPLATE\n+#define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\tbr $27,$LTRAMPP\\n\");\t\t\\\n+  fprintf (FILE, \"$LTRAMPP:\\n\\tldl $1,12($27)\\n\");\t\\\n+  fprintf (FILE, \"\\tldl $27,16($27)\\n\");\t\t\\\n+  fprintf (FILE, \"\\tjmp $31,($27),0\\n\");\t\t\\\n+  fprintf (FILE, \"\\t.long 0,0\\n\");\t\t\t\\\n+}\n+\n+/* Length in units of the trampoline for entering a nested function.  */\n+\n+#undef TRAMPOLINE_SIZE\n+#define TRAMPOLINE_SIZE    24\n+\n+/* Emit RTL insns to initialize the variable parts of a trampoline.\n+   FNADDR is an RTX for the address of the function's pure code.\n+   CXT is an RTX for the static chain value for the function. \n+\n+   This differs from the standard version in that:\n+\n+   We are not passed the current address in any register, and so have to \n+   load it ourselves.\n+\n+   We do not initialize the \"hint\" field because it only has an 8k\n+   range and so the target is in range of something on the stack. \n+   Omitting the hint saves a bogus branch-prediction cache line load.\n+\n+   Always have an executable stack -- no need for a system call.\n+ */\n+\n+#undef INITIALIZE_TRAMPOLINE\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  rtx _addr, _val;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  _addr = memory_address (Pmode, plus_constant ((TRAMP), 16));\t\t\\\n+  _val = force_reg(Pmode, (FNADDR));\t\t\t\t\t\\\n+  emit_move_insn (gen_rtx (MEM, SImode, _addr),\t\t\t\t\\\n+\t\t  gen_rtx (SUBREG, SImode, _val, 0));\t\t\t\\\n+  _addr = memory_address (Pmode, plus_constant ((TRAMP), 20));\t\t\\\n+  _val = force_reg(Pmode, (CXT));\t\t\t\t\t\\\n+  emit_move_insn (gen_rtx (MEM, SImode, _addr),\t\t\t\t\\\n+\t\t  gen_rtx (SUBREG, SImode, _val, 0));\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  emit_insn (gen_rtx (UNSPEC_VOLATILE, VOIDmode,\t\t\t\\\n+                      gen_rtvec (1, const0_rtx), 0));\t\t\t\\\n+}"}]}