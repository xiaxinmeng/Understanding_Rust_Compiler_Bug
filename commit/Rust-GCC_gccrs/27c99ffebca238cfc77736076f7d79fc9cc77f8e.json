{"sha": "27c99ffebca238cfc77736076f7d79fc9cc77f8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdjOTlmZmViY2EyMzhjZmM3NzczNjA3NmY3ZDc5ZmM5Y2M3N2Y4ZQ==", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@redhat.com", "date": "2004-01-09T22:52:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2004-01-09T22:52:18Z"}, "message": "JLayeredPane.java: Rewrite to accomodate djee@redhat.com's recent inverse ordering of Container...\n\n2004-01-08  Graydon Hoare  <graydon@redhat.com>\n\n\t* javax/swing/JLayeredPane.java: Rewrite to accomodate\n\tdjee@redhat.com's recent inverse ordering of Container elements.\n\nFrom-SVN: r75608", "tree": {"sha": "12746cb59f0761f8acebd2493279cd0e35475b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12746cb59f0761f8acebd2493279cd0e35475b2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27c99ffebca238cfc77736076f7d79fc9cc77f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c99ffebca238cfc77736076f7d79fc9cc77f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c99ffebca238cfc77736076f7d79fc9cc77f8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c99ffebca238cfc77736076f7d79fc9cc77f8e/comments", "author": null, "committer": null, "parents": [{"sha": "c404ab029db3cf2b4980ce2adfde67c3ee6252e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c404ab029db3cf2b4980ce2adfde67c3ee6252e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c404ab029db3cf2b4980ce2adfde67c3ee6252e0"}], "stats": {"total": 119, "additions": 52, "deletions": 67}, "files": [{"sha": "ae053f72de788b3f50b69baa6b2f7a82d54105fc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c99ffebca238cfc77736076f7d79fc9cc77f8e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c99ffebca238cfc77736076f7d79fc9cc77f8e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=27c99ffebca238cfc77736076f7d79fc9cc77f8e", "patch": "@@ -1,3 +1,8 @@\n+2004-01-08  Graydon Hoare  <graydon@redhat.com>\n+\n+\t* javax/swing/JLayeredPane.java: Rewrite to accomodate\n+\tdjee@redhat.com's recent inverse ordering of Container elements.\n+\n 2004-01-09  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/lang/ArrayHelper.java"}, {"sha": "e82089b25d395b1e5e214eddbf099f074fe50b24", "filename": "libjava/javax/swing/JLayeredPane.java", "status": "modified", "additions": 47, "deletions": 67, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c99ffebca238cfc77736076f7d79fc9cc77f8e/libjava%2Fjavax%2Fswing%2FJLayeredPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c99ffebca238cfc77736076f7d79fc9cc77f8e/libjava%2Fjavax%2Fswing%2FJLayeredPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJLayeredPane.java?ref=27c99ffebca238cfc77736076f7d79fc9cc77f8e", "patch": "@@ -68,16 +68,10 @@\n  * this class:</p>\n  * \n  * <dl>\n- * <dt>Internal Component Index:</dt> \n+ * <dt>Component Index:</dt> \n  * <dd>An offset into the <code>component</code> array held in our ancestor,\n  * {@link java.awt.Container}, from <code>[0 .. component.length)</code>. The drawing\n- * rule with internal indices is that 0 is drawn first.</dd>\n- *\n- * <dt>External Component Index:</dt>\n- * <dd>An offset into the \"logical drawing order\" of this container. If <code>I</code>\n- * is the internal index of a component, the external index <tt>E =\n- * component.length - I</tt>. The rule with external indices is that 0 is\n- * drawn last.</dd>\n+ * rule with indices is that 0 is drawn last.</dd>\n  *\n  * <dt>Layer Number:</dt>\n  * <dd>A general <code>int</code> specifying a layer within this component.  Negative\n@@ -89,6 +83,9 @@\n  * is drawn last. Layer position -1 is a synonym for the first layer\n  * position (the logical \"bottom\").</dd>\n  *\n+ * <p><b>Note:</b> the layer numbering order is the <em>reverse</em> of the\n+ * component indexing and position order</p>\n+ *\n  * @author Graydon Hoare <graydon@redhat.com>\n  */\n \n@@ -131,23 +128,24 @@ protected Integer getLayer (Component c)\n   }\n \n   /**\n-   * Returns a pair of ints representing a half-open interval\n-   * <code>[bottom, top)</code>, which is the range of internal component\n-   * indices the provided layer number corresponds to.\n+   * <p>Returns a pair of ints representing a half-open interval \n+   * <code>[top, bottom)</code>, which is the range of component indices \n+   * the provided layer number corresponds to.</p>\n    *\n-   * Note that \"top\" is <em>not</em> included in the interval of \n-   * component indices in this layer: a layer with 0 elements in it has \n-   * <code>ret[0] == ret[1]</code>.\n+   * <p>Note that \"bottom\" is <em>not</em> included in the interval of\n+   * component indices in this layer: a layer with 0 elements in it has\n+   * <code>ret[0] == ret[1]</code>.</p>\n    *\n    * @param layer the layer to look up.\n-   * @return the half-open range of internal indices this layer spans.\n+   * @return the half-open range of indices this layer spans.\n    * @throws IllegalArgumentException if layer does not refer to an active layer\n    * in this container.\n    */\n \n   protected int[] layerToRange (Integer layer)\n   {\n-    int[] ret = new int[2];\t\n+    int[] ret = new int[2];\n+    ret[1] = getComponents ().length;\n     Iterator i = layers.entrySet ().iterator ();\n     while (i.hasNext())\n \t    {\n@@ -156,12 +154,12 @@ protected int[] layerToRange (Integer layer)\n         Integer layerSz = (Integer) pair.getValue ();\n         if (layerNum == layer)\n           {\n-            ret[1] = ret[0] + layerSz.intValue ();\n+            ret[0] = ret[1] - layerSz.intValue ();\n             return ret;\n           }\n         else\n           {\n-            ret[0] += layerSz.intValue ();\n+            ret[1] -= layerSz.intValue ();\n           }\n \t    }\n     // should have found the layer during iteration\n@@ -280,12 +278,13 @@ public int getPosition(Component c)\n   {\n     Integer layer = getLayer (c);\n     int[] range = layerToRange (layer);\n-    int top = (range[1] - 1);\n+    int top = range[0];\n+    int bot = range[1];\n     Component[] comps = getComponents ();\n-    for (int i = range[0]; i < range[1]; ++i)\n+    for (int i = top; i < bot; ++i)\n \t    {\n         if (comps[i] == c)\n-          return top - i;\n+          return i - top;\n \t    }\n     // should have found it\n     throw new IllegalArgumentException ();\n@@ -310,14 +309,15 @@ public void setPosition(Component c, int position)\n     if (range[0] == range[1])\n \t    throw new IllegalArgumentException ();\n \n-    int top = (range[1] - 1);\n+    int top = range[0];\n+    int bot = range[1];\n     if (position == -1)\n-\t    position = top - range[0];\n-    int targ = top - position;\n+\t    position = (bot - top) - 1;\n+    int targ = top + position;\n     int curr = -1;\n \n     Component[] comps = getComponents();\n-    for (int i = range[0]; i < range[1]; ++i)\n+    for (int i = top; i < bot; ++i)\n \t    {\n         if (comps[i] == c)\n           {\n@@ -336,8 +336,8 @@ public void setPosition(Component c, int position)\n     \n   /**\n    * Return an array of all components within a layer of this\n-   * container. Components are ordered back-to-front, with the \"back\"\n-   * element (which draws first) at position 0 of the returned array.\n+   * container. Components are ordered front-to-back, with the \"front\"\n+   * element (which draws last) at position 0 of the returned array.\n    *\n    * @param layer the layer to return components from.\n    * @return the components in the layer.\n@@ -351,7 +351,7 @@ public Component[] getComponentsInLayer(int layer)\n     else\n \t    {\n         Component[] comps = getComponents ();\n-        int sz = (range[1] - 1) - range[0];\n+        int sz = range[1] - range[0];\n         Component[] nc = new Component[sz];\n         for (int i = 0; i < sz; ++i)\n           nc[i] = comps[range[0] + i];\n@@ -361,7 +361,7 @@ public Component[] getComponentsInLayer(int layer)\n \n   /**\n    * Return the number of components within a layer of this\n-   * container. \n+   * container.\n    *\n    * @param layer the layer count components in.\n    * @return the number of components in the layer.\n@@ -386,20 +386,19 @@ protected Hashtable getComponentToLayer()\n     return componentToLayer;\n   }\n \n-\n   /**\n    * Return the index of a component within the underlying (contiguous)\n    * array of children. This is a \"raw\" number which does not represent the\n-   * child's position in a layer, but rather its position in the\n-   * concatenation of <em>all</em> layers within the container.\n+   * child's position in a layer, but rather its position in the logical\n+   * drawing order of all children of the container.\n    *\n    * @param c the component to look up.\n-   * @return the internal index of the component.\n+   * @return the external index of the component.\n    * @throws IllegalArgumentException if the component is not a child of\n    * this container.\n    */\n \n-  protected int getInternalIndexOf(Component c) \n+  public int getIndexOf(Component c) \n   {\n     Integer layer = getLayer (c);\n     int[] range = layerToRange (layer);\n@@ -411,26 +410,6 @@ protected int getInternalIndexOf(Component c)\n \t    }\n     // should have found the component during iteration\n     throw new IllegalArgumentException ();\n-  }\n-\n-\n-  /**\n-   * Return the external index of a component within the underlying\n-   * (contiguous) array of children. This is a \"raw\" number which does not\n-   * represent the child's position in a layer, but rather its position in\n-   * the logical drawing order of all children of the container.\n-   *\n-   * @param c the component to look up.\n-   * @return the external index of the component.\n-   * @throws IllegalArgumentException if the component is not a child of\n-   * this container.\n-   */\n-\n-  public int getIndexOf(Component c) \n-  {\n-    // returns the *external* index of the component.\n-    int top = getComponentCount() - 1;\n-    return top - getIndexOf (c);\n   }    \n \n   /**\n@@ -472,13 +451,13 @@ protected Integer getObjectForLayer(int layer)\n   }\n \n   /**\n-   * Computes an internal index at which to request the superclass {@link\n+   * Computes an index at which to request the superclass {@link\n    * java.awt.Container} inserts a component, given an abstract layer and\n    * position number.\n    *\n    * @param layer the layer in which to insert a component.\n    * @param position the position in the layer at which to insert a component.\n-   * @return the internal index at which to insert the component.\n+   * @return the index at which to insert the component.\n    */\n     \n   protected int insertIndexForLayer(int layer, int position)\n@@ -489,22 +468,22 @@ protected int insertIndexForLayer(int layer, int position)\n       layers.put (lobj, new Integer (0));\n     int[] range = layerToRange (lobj);\n     if (range[0] == range[1])\n-\t    return range[0];\n-\t\n-    int bottom = range[0];\n-    int top = range[1] - 1;\n+        return range[0];\n \t\n-    if (position == -1 || position > (top - bottom))\n-\t    return bottom;\n+    int top = range[0];\n+    int bot = range[1];\n+\n+    if (position == -1 || position > (bot - top))\n+        return bot;\n     else\n-\t    return top - position;\n+        return top + position;\n   }\n \n   /**\n    * Removes a child from this container. The child is specified by\n-   * internal index. After removal, the child no longer occupies a layer.\n+   * index. After removal, the child no longer occupies a layer.\n    *\n-   * @param index the internal index of the child component to remove.\n+   * @param index the index of the child component to remove.\n    */\n     \n   public void remove (int index)\n@@ -525,7 +504,7 @@ public void remove (int index)\n \t\n   public void remove (Component comp)\n   {\n-    remove (getInternalIndexOf (comp));\n+    remove (getIndexOf (comp));\n   }\n \n   /**\n@@ -546,7 +525,7 @@ public void setLayer(Component c, int layer)\n   }\n \n   /**\n-   * Set the layer and position of a component, within this container. \n+   * Set the layer and position of a component, within this container.\n    *\n    * @param c the child component to set the layer property for.\n    * @param layer the layer number to assign to the component.\n@@ -585,6 +564,7 @@ else if (componentToLayer.containsKey (comp))\n \t    layer = DEFAULT_LAYER;\n \n     int newIdx = insertIndexForLayer(layer.intValue (), -1);\n+\n     componentToLayer.put (comp, layer);\n     incrLayer (layer);\n \t"}]}