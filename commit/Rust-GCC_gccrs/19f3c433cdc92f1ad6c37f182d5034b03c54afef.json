{"sha": "19f3c433cdc92f1ad6c37f182d5034b03c54afef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlmM2M0MzNjZGM5MmYxYWQ2YzM3ZjE4MmQ1MDM0YjAzYzU0YWZlZg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-07T17:41:14Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-07T17:41:14Z"}, "message": "libstdc++: Fix long double to_chars testcase [PR98384]\n\nThe testcase was failing to compile on some targets due to its use of\nthe non-standard functions nextupl and nextdownl.  This patch makes the\ntestcase instead use the C99 function nexttowardl in an equivalent way.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/98384\n\t* testsuite/20_util/to_chars/long_double.cc: Use nexttowardl\n\tinstead of the non-standard nextupl and nextdownl.", "tree": {"sha": "0cd5e96d75b628f18aac5129b9d7e3bd68754a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cd5e96d75b628f18aac5129b9d7e3bd68754a39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19f3c433cdc92f1ad6c37f182d5034b03c54afef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f3c433cdc92f1ad6c37f182d5034b03c54afef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f3c433cdc92f1ad6c37f182d5034b03c54afef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f3c433cdc92f1ad6c37f182d5034b03c54afef/comments", "author": null, "committer": null, "parents": [{"sha": "85fb1d7d5f44a81a52015d58ebe67765faabfd35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85fb1d7d5f44a81a52015d58ebe67765faabfd35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85fb1d7d5f44a81a52015d58ebe67765faabfd35"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "4f72cb6540041b20d83e33e8aa2f69aa88fb8531", "filename": "libstdc++-v3/testsuite/20_util/to_chars/long_double.cc", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19f3c433cdc92f1ad6c37f182d5034b03c54afef/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19f3c433cdc92f1ad6c37f182d5034b03c54afef/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc?ref=19f3c433cdc92f1ad6c37f182d5034b03c54afef", "patch": "@@ -32,6 +32,17 @@\n \n using namespace std;\n \n+namespace detail\n+{\n+  long double\n+  nextupl(long double x)\n+  { return nexttowardl(x, numeric_limits<long double>::infinity()); }\n+\n+  long double\n+  nextdownl(long double x)\n+  { return nexttowardl(x, -numeric_limits<long double>::infinity()); }\n+}\n+\n // The long double overloads of std::to_chars currently just go through printf\n // (except for the hexadecimal formatting).\n \n@@ -40,8 +51,8 @@ void\n test01()\n {\n   const long double hex_testcases[]\n-    = { nextdownl(numeric_limits<long double>::max()),\n-\tnextupl(numeric_limits<long double>::min()),\n+    = { detail::nextdownl(numeric_limits<long double>::max()),\n+\tdetail::nextupl(numeric_limits<long double>::min()),\n \t42.0L,\n \t0x1.2p+0L,\n \t0x1.23p+0L,\n@@ -94,7 +105,7 @@ test01()\n \n \t  {\n \t    // Verify that the nearby values have a different shortest form.\n-\t    testcase = nextdownl(testcase);\n+\t    testcase = detail::nextdownl(testcase);\n \t    result = to_chars(begin(to_chars_buffer), end(to_chars_buffer),\n \t\t\t      testcase, chars_format::hex);\n \t    VERIFY( result.ec == errc{} );\n@@ -103,7 +114,7 @@ test01()\n \t    sprintf(printf_buffer, \"%La\", testcase);\n \t    VERIFY( !strcmp(to_chars_buffer, printf_buffer+strlen(\"0x\")) );\n \n-\t    testcase = nextupl(nextupl(testcase));\n+\t    testcase = detail::nextupl(detail::nextupl(testcase));\n \t    result = to_chars(begin(to_chars_buffer), end(to_chars_buffer),\n \t\t\t      testcase, chars_format::hex);\n \t    VERIFY( result.ec == errc{} );\n@@ -112,7 +123,7 @@ test01()\n \t    sprintf(printf_buffer, \"%La\", testcase);\n \t    VERIFY( !strcmp(to_chars_buffer, printf_buffer+strlen(\"0x\")) );\n \n-\t    testcase = nextdownl(testcase);\n+\t    testcase = detail::nextdownl(testcase);\n \t  }\n \n \tfor (int precision = -1; precision < 50; precision++)\n@@ -173,7 +184,7 @@ test02()\n \t  *result.ptr = '\\0';\n \t  char nearby_buffer[50000];\n \t    {\n-\t      const long double smaller = nextdownl(value);\n+\t      const long double smaller = detail::nextdownl(value);\n \t      result = to_chars(begin(nearby_buffer), end(nearby_buffer),\n \t\t\t\tsmaller, fmt);\n \t      VERIFY( result.ec == errc{} );\n@@ -182,7 +193,7 @@ test02()\n \t    }\n \n \t    {\n-\t      long double larger = nextupl(value);\n+\t      long double larger = detail::nextupl(value);\n \t      result = to_chars(begin(nearby_buffer), end(nearby_buffer),\n \t\t\t\tlarger, fmt);\n \t      VERIFY( result.ec == errc{} );"}]}