{"sha": "f6fdeb62ee716299062c8b9d70481709d8401b15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZmZGViNjJlZTcxNjI5OTA2MmM4YjlkNzA0ODE3MDlkODQwMWIxNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-06-25T12:35:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-06-25T12:35:21Z"}, "message": "re PR tree-optimization/57705 (Non-constant step induction vars not vectorized)\n\n\tPR tree-optimization/57705\n\t* tree-vect-loop.c (vect_is_simple_iv_evolution): Allow\n\tSSA_NAME step, provided that it is not defined inside the loop.\n\t(vect_analyze_scalar_cycles_1): Disallow SSA_NAME step in nested\n\tloop.\n\t(get_initial_def_for_induction): Handle SSA_NAME IV step.\n\n\t* gcc.dg/vect/pr57705.c: New test.\n\t* gcc.dg/vect/vect-iv-7.c: Add noclone attribute, remove xfail.\n\nFrom-SVN: r200394", "tree": {"sha": "2611724ce72ecc8b57a3170f0e0549f24c664069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2611724ce72ecc8b57a3170f0e0549f24c664069"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6fdeb62ee716299062c8b9d70481709d8401b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fdeb62ee716299062c8b9d70481709d8401b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6fdeb62ee716299062c8b9d70481709d8401b15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fdeb62ee716299062c8b9d70481709d8401b15/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c13bc3d998b26a9d50c6bb07d0f8f372117e7a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c13bc3d998b26a9d50c6bb07d0f8f372117e7a20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c13bc3d998b26a9d50c6bb07d0f8f372117e7a20"}], "stats": {"total": 110, "additions": 102, "deletions": 8}, "files": [{"sha": "33715dc8db9d12052194733de51cb1409cd71047", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fdeb62ee716299062c8b9d70481709d8401b15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fdeb62ee716299062c8b9d70481709d8401b15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6fdeb62ee716299062c8b9d70481709d8401b15", "patch": "@@ -1,3 +1,12 @@\n+2013-06-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/57705\n+\t* tree-vect-loop.c (vect_is_simple_iv_evolution): Allow\n+\tSSA_NAME step, provided that it is not defined inside the loop.\n+\t(vect_analyze_scalar_cycles_1): Disallow SSA_NAME step in nested\n+\tloop.\n+\t(get_initial_def_for_induction): Handle SSA_NAME IV step.\n+\n 2013-06-25  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/57670"}, {"sha": "72826b60a377d1d08174b293b6b6b08724528f58", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fdeb62ee716299062c8b9d70481709d8401b15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fdeb62ee716299062c8b9d70481709d8401b15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6fdeb62ee716299062c8b9d70481709d8401b15", "patch": "@@ -1,3 +1,9 @@\n+2013-06-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/57705\n+\t* gcc.dg/vect/pr57705.c: New test.\n+\t* gcc.dg/vect/vect-iv-7.c: Add noclone attribute, remove xfail.\n+\n 2013-06-25  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/57670"}, {"sha": "2cacab417ecf050dcfc1adc0907e48ade3fb09f5", "filename": "gcc/testsuite/gcc.dg/vect/pr57705.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fdeb62ee716299062c8b9d70481709d8401b15/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57705.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fdeb62ee716299062c8b9d70481709d8401b15/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57705.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57705.c?ref=f6fdeb62ee716299062c8b9d70481709d8401b15", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+\n+#include \"tree-vect.h\"\n+\n+int a[1024];\n+unsigned char b[1024];\n+\n+extern void abort (void);\n+\n+__attribute__((noinline, noclone)) void\n+foo (int k, int m)\n+{\n+  int i, k2 = k;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      a[i] = k2;\n+      k2 += m + 1;\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+bar (int k, int m)\n+{\n+  int i, k2 = k;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      k2 += m + 1;\n+      a[i] = k2;\n+    }\n+}\n+\n+__attribute__((noinline, noclone)) void\n+baz (int k, int m)\n+{\n+  int i, k2 = k;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      a[i] = k2;\n+      b[i] = i;\n+      k2 += m + 1;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  check_vect ();\n+  foo (5, 3);\n+  for (i = 0; i < 1024; i++)\n+    if (a[i] != 5 + 4 * i)\n+      abort ();\n+  bar (5, 3);\n+  for (i = 0; i < 1024; i++)\n+    if (a[i] != 9 + 4 * i)\n+      abort ();\n+  baz (5, 3);\n+  for (i = 0; i < 1024; i++)\n+    if (a[i] != 5 + 4 * i || b[i] != (unsigned char) i)\n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 3 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0d96ac2d4eeefb910d0a2b093b744e450881de27", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fdeb62ee716299062c8b9d70481709d8401b15/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fdeb62ee716299062c8b9d70481709d8401b15/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-7.c?ref=f6fdeb62ee716299062c8b9d70481709d8401b15", "patch": "@@ -6,7 +6,7 @@\n #define N 16\n int result[N] = {8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38};\n  \n-__attribute__ ((noinline)) int main1 (int X)\n+__attribute__ ((noinline, noclone)) int main1 (int X)\n {  \n   int arr[N];\n   int k = 3;\n@@ -38,5 +38,5 @@ int main (void)\n   return main1 (2);\n } \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c9b102132578f7204fedf221430c2ed16197a698", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6fdeb62ee716299062c8b9d70481709d8401b15/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6fdeb62ee716299062c8b9d70481709d8401b15/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=f6fdeb62ee716299062c8b9d70481709d8401b15", "patch": "@@ -500,7 +500,7 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n /* Function vect_is_simple_iv_evolution.\n \n    FORNOW: A simple evolution of an induction variables in the loop is\n-   considered a polynomial evolution with constant step.  */\n+   considered a polynomial evolution.  */\n \n static bool\n vect_is_simple_iv_evolution (unsigned loop_nb, tree access_fn, tree * init,\n@@ -509,6 +509,7 @@ vect_is_simple_iv_evolution (unsigned loop_nb, tree access_fn, tree * init,\n   tree init_expr;\n   tree step_expr;\n   tree evolution_part = evolution_part_in_loop_num (access_fn, loop_nb);\n+  basic_block bb;\n \n   /* When there is no evolution in this loop, the evolution function\n      is not \"simple\".  */\n@@ -534,7 +535,10 @@ vect_is_simple_iv_evolution (unsigned loop_nb, tree access_fn, tree * init,\n   *init = init_expr;\n   *step = step_expr;\n \n-  if (TREE_CODE (step_expr) != INTEGER_CST)\n+  if (TREE_CODE (step_expr) != INTEGER_CST\n+      && (TREE_CODE (step_expr) != SSA_NAME\n+\t  || ((bb = gimple_bb (SSA_NAME_DEF_STMT (step_expr)))\n+\t      && flow_bb_inside_loop_p (get_loop (cfun, loop_nb), bb))))\n     {\n       if (dump_enabled_p ())\n         dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -556,7 +560,7 @@ static void\n vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n {\n   basic_block bb = loop->header;\n-  tree dumy;\n+  tree init, step;\n   vec<gimple> worklist;\n   worklist.create (64);\n   gimple_stmt_iterator gsi;\n@@ -605,7 +609,9 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n \t}\n \n       if (!access_fn\n-\t  || !vect_is_simple_iv_evolution (loop->num, access_fn, &dumy, &dumy))\n+\t  || !vect_is_simple_iv_evolution (loop->num, access_fn, &init, &step)\n+\t  || (LOOP_VINFO_LOOP (loop_vinfo) != loop\n+\t      && TREE_CODE (step) != INTEGER_CST))\n \t{\n \t  worklist.safe_push (phi);\n \t  continue;\n@@ -3273,10 +3279,14 @@ get_initial_def_for_induction (gimple iv_phi)\n       expr = build_int_cst (TREE_TYPE (step_expr), vf);\n       new_name = fold_build2 (MULT_EXPR, TREE_TYPE (step_expr),\n \t\t\t      expr, step_expr);\n+      if (TREE_CODE (step_expr) == SSA_NAME)\n+\tnew_name = vect_init_vector (iv_phi, new_name,\n+\t\t\t\t     TREE_TYPE (step_expr), NULL);\n     }\n \n   t = unshare_expr (new_name);\n-  gcc_assert (CONSTANT_CLASS_P (new_name));\n+  gcc_assert (CONSTANT_CLASS_P (new_name)\n+\t      || TREE_CODE (new_name) == SSA_NAME);\n   stepvectype = get_vectype_for_scalar_type (TREE_TYPE (new_name));\n   gcc_assert (stepvectype);\n   new_vec = build_vector_from_val (stepvectype, t);\n@@ -3332,8 +3342,12 @@ get_initial_def_for_induction (gimple iv_phi)\n       expr = build_int_cst (TREE_TYPE (step_expr), nunits);\n       new_name = fold_build2 (MULT_EXPR, TREE_TYPE (step_expr),\n \t\t\t      expr, step_expr);\n+      if (TREE_CODE (step_expr) == SSA_NAME)\n+\tnew_name = vect_init_vector (iv_phi, new_name,\n+\t\t\t\t     TREE_TYPE (step_expr), NULL);\n       t = unshare_expr (new_name);\n-      gcc_assert (CONSTANT_CLASS_P (new_name));\n+      gcc_assert (CONSTANT_CLASS_P (new_name)\n+\t\t  || TREE_CODE (new_name) == SSA_NAME);\n       new_vec = build_vector_from_val (stepvectype, t);\n       vec_step = vect_init_vector (iv_phi, new_vec, stepvectype, NULL);\n "}]}