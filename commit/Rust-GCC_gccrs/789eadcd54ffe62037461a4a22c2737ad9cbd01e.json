{"sha": "789eadcd54ffe62037461a4a22c2737ad9cbd01e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg5ZWFkY2Q1NGZmZTYyMDM3NDYxYTRhMjJjMjczN2FkOWNiZDAxZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-01-23T19:04:29Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-01-23T19:04:29Z"}, "message": "re PR c/59871 (No unused value warning for comma expression)\n\n\tPR c/59871\nc/\n\t* c-typeck.c (build_compound_expr): Warn even for right-hand operand\n\tof a comma expression.\n\t(emit_side_effect_warnings): Likewise.\nlibdecnumber/\n\t* decNumberLocal.h (UBFROMUS, UBFROMUI): Remove last argument.\ntestsuite/\n\t* gcc.dg/20020220-2.c: Adjust dg-warning message.\n\t* gcc.dg/pr59871.c: New test.\n\nFrom-SVN: r207002", "tree": {"sha": "98eacc6f827b22b6ab595fbe3aaa8fffd51e38b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98eacc6f827b22b6ab595fbe3aaa8fffd51e38b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/789eadcd54ffe62037461a4a22c2737ad9cbd01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789eadcd54ffe62037461a4a22c2737ad9cbd01e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/789eadcd54ffe62037461a4a22c2737ad9cbd01e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/789eadcd54ffe62037461a4a22c2737ad9cbd01e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20f18c3ce14154eb477226aa48a12ebd32f9ead4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f18c3ce14154eb477226aa48a12ebd32f9ead4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f18c3ce14154eb477226aa48a12ebd32f9ead4"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "237ac1a959c3368b8b14a0c6a4d7a9ba6324a720", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789eadcd54ffe62037461a4a22c2737ad9cbd01e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789eadcd54ffe62037461a4a22c2737ad9cbd01e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=789eadcd54ffe62037461a4a22c2737ad9cbd01e", "patch": "@@ -1,3 +1,10 @@\n+2014-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59871\n+\t* c-typeck.c (build_compound_expr): Warn even for right-hand operand\n+\tof a comma expression.\n+\t(emit_side_effect_warnings): Likewise.\n+\n 2014-01-23  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \tPR c/59825"}, {"sha": "781d4df246ddc94745a1711d2b1b806d8b0a3c9e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789eadcd54ffe62037461a4a22c2737ad9cbd01e/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789eadcd54ffe62037461a4a22c2737ad9cbd01e/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=789eadcd54ffe62037461a4a22c2737ad9cbd01e", "patch": "@@ -4778,6 +4778,23 @@ build_compound_expr (location_t loc, tree expr1, tree expr2)\n \t\t\t\"left-hand operand of comma expression has no effect\");\n \t}\n     }\n+  else if (TREE_CODE (expr1) == COMPOUND_EXPR\n+\t   && warn_unused_value)\n+    {\n+      tree r = expr1;\n+      location_t cloc = loc;\n+      while (TREE_CODE (r) == COMPOUND_EXPR)\n+        {\n+\t  if (EXPR_HAS_LOCATION (r))\n+\t    cloc = EXPR_LOCATION (r);\n+\t  r = TREE_OPERAND (r, 1);\n+\t}\n+      if (!TREE_SIDE_EFFECTS (r)\n+\t  && !VOID_TYPE_P (TREE_TYPE (r))\n+\t  && !CONVERT_EXPR_P (r))\n+\twarning_at (cloc, OPT_Wunused_value,\n+\t            \"right-hand operand of comma expression has no effect\");\n+    }\n \n   /* With -Wunused, we should also warn if the left-hand operand does have\n      side-effects, but computes a value which is not used.  For example, in\n@@ -9643,6 +9660,23 @@ emit_side_effect_warnings (location_t loc, tree expr)\n       if (!VOID_TYPE_P (TREE_TYPE (expr)) && !TREE_NO_WARNING (expr))\n \twarning_at (loc, OPT_Wunused_value, \"statement with no effect\");\n     }\n+  else if (TREE_CODE (expr) == COMPOUND_EXPR)\n+    {\n+      tree r = expr;\n+      location_t cloc = loc;\n+      while (TREE_CODE (r) == COMPOUND_EXPR)\n+\t{\n+\t  if (EXPR_HAS_LOCATION (r))\n+\t    cloc = EXPR_LOCATION (r);\n+\t  r = TREE_OPERAND (r, 1);\n+\t}\n+      if (!TREE_SIDE_EFFECTS (r)\n+\t  && !VOID_TYPE_P (TREE_TYPE (r))\n+\t  && !CONVERT_EXPR_P (r)\n+\t  && !TREE_NO_WARNING (expr))\n+\twarning_at (cloc, OPT_Wunused_value,\n+\t\t    \"right-hand operand of comma expression has no effect\");\n+    }\n   else\n     warn_if_unused_value (expr, loc);\n }"}, {"sha": "3857078b1db5684395ce00e3e4aea873cbcf42b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789eadcd54ffe62037461a4a22c2737ad9cbd01e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789eadcd54ffe62037461a4a22c2737ad9cbd01e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=789eadcd54ffe62037461a4a22c2737ad9cbd01e", "patch": "@@ -1,3 +1,9 @@\n+2014-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59871\n+\t* gcc.dg/20020220-2.c: Adjust dg-warning message.\n+\t* gcc.dg/pr59871.c: New test.\n+\n 2014-01-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58980"}, {"sha": "95606703cc50185f8e2711334fe2569149ca172b", "filename": "gcc/testsuite/gcc.dg/20020220-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789eadcd54ffe62037461a4a22c2737ad9cbd01e/gcc%2Ftestsuite%2Fgcc.dg%2F20020220-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789eadcd54ffe62037461a4a22c2737ad9cbd01e/gcc%2Ftestsuite%2Fgcc.dg%2F20020220-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020220-2.c?ref=789eadcd54ffe62037461a4a22c2737ad9cbd01e", "patch": "@@ -1,12 +1,12 @@\n /* PR c/4697\n-   Test whether value computed not used warning is given for compound\n+   Test whether operand has no effect warning is given for compound\n    expression.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -Wunused\" } */\n \n int b;\n int foo (int a)\n {\n-  a = a + 1, 5 * b;\t/* { dg-warning \"value computed is not used\" } */\n+  a = a + 1, 5 * b; /* { dg-warning \"right-hand operand of comma expression has no effect\" } */\n   return a;\n }"}, {"sha": "c881aa198d513e46dc6da9dd5f9a0d8e8a5df2fa", "filename": "gcc/testsuite/gcc.dg/pr59871.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789eadcd54ffe62037461a4a22c2737ad9cbd01e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59871.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789eadcd54ffe62037461a4a22c2737ad9cbd01e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59871.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59871.c?ref=789eadcd54ffe62037461a4a22c2737ad9cbd01e", "patch": "@@ -0,0 +1,22 @@\n+/* PR c/59871 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+extern int bar ();\n+\n+void\n+foo (int *p, int i)\n+{\n+  p[0] = (bar (), 1, bar ()); /* { dg-warning \"right-hand operand of comma expression has no effect\" } */\n+  p[1] = (1, bar ()); /* { dg-warning \"left-hand operand of comma expression has no effect\" } */\n+  bar (), 1, bar (); /* { dg-warning \"right-hand operand of comma expression has no effect\" } */\n+  bar (), 1; /* { dg-warning \"right-hand operand of comma expression has no effect\" } */\n+  1, bar (); /* { dg-warning \"left-hand operand of comma expression has no effect\" } */\n+  (bar (), 1); /* { dg-warning \"right-hand operand of comma expression has no effect\" } */\n+  bar (), 5 * i; /* { dg-warning \"right-hand operand of comma expression has no effect\" } */\n+  (bar (), 5 * i); /* { dg-warning \"right-hand operand of comma expression has no effect\" } */\n+  (bar (), (bar (), (bar (), (bar (), (bar (), (bar (), (bar (), 7))))))); /* { dg-warning \"right-hand operand of comma expression has no effect\" } */\n+  bar (), (bar (), (bar (), (bar (), (bar (), (bar (), (bar (), 7)))))); /* { dg-warning \"right-hand operand of comma expression has no effect\" } */\n+  bar (), (bar (), (bar (), (bar (), (bar (), (bar (), (7, bar ())))))); /* { dg-warning \"left-hand operand of comma expression has no effect\" } */\n+  (bar (), (bar (), (bar (), (bar (), (bar (), (bar (), (7, bar ()))))))); /* { dg-warning \"left-hand operand of comma expression has no effect\" } */\n+}"}, {"sha": "14df41c99ea4334173c0f0b907f33a31bcdd7053", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789eadcd54ffe62037461a4a22c2737ad9cbd01e/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789eadcd54ffe62037461a4a22c2737ad9cbd01e/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=789eadcd54ffe62037461a4a22c2737ad9cbd01e", "patch": "@@ -1,3 +1,8 @@\n+2014-01-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/59871\n+\t* decNumberLocal.h (UBFROMUS, UBFROMUI): Remove last argument.\n+\n 2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years"}, {"sha": "4936231f2a2b93fa0b20e2e31882a11353b9c0e9", "filename": "libdecnumber/decNumberLocal.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/789eadcd54ffe62037461a4a22c2737ad9cbd01e/libdecnumber%2FdecNumberLocal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/789eadcd54ffe62037461a4a22c2737ad9cbd01e/libdecnumber%2FdecNumberLocal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FdecNumberLocal.h?ref=789eadcd54ffe62037461a4a22c2737ad9cbd01e", "patch": "@@ -153,10 +153,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   #define UBTOUI(b)  (memcpy((void *)&uiwork, b, 4), uiwork)\n \n   /* Store a uInt, etc., into bytes starting at a char* or uByte*.    */\n-  /* Returns i, evaluated, for convenience; has to use uiwork because */\n-  /* i may be an expression.\t\t\t\t\t      */\n-  #define UBFROMUS(b, i)  (uswork=(i), memcpy(b, (void *)&uswork, 2), uswork)\n-  #define UBFROMUI(b, i)  (uiwork=(i), memcpy(b, (void *)&uiwork, 4), uiwork)\n+  /* Has to use uiwork because i may be an expression.\t\t      */\n+  #define UBFROMUS(b, i)  (uswork=(i), memcpy(b, (void *)&uswork, 2))\n+  #define UBFROMUI(b, i)  (uiwork=(i), memcpy(b, (void *)&uiwork, 4))\n \n   /* X10 and X100 -- multiply integer i by 10 or 100\t\t      */\n   /* [shifts are usually faster than multiply; could be conditional]  */"}]}