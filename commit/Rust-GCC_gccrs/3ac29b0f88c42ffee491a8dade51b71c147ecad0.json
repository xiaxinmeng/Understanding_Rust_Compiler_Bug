{"sha": "3ac29b0f88c42ffee491a8dade51b71c147ecad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FjMjliMGY4OGM0MmZmZWU0OTFhOGRhZGU1MWI3MWMxNDdlY2FkMA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-02-12T00:24:22Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-02-12T00:24:22Z"}, "message": "re PR tree-optimization/66726 (missed optimization, factor conversion out of COND_EXPR)\n\ngcc/ChangeLog:\n\n2016-02-12  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tPR middle-end/66726\n\t* tree-ssa-reassoc.c (optimize_range_tests): Handle tcc_compare stmt\n\twhose result is used in PHI.\n\t(maybe_optimize_range_tests): Likewise.\n\t(final_range_test_p): Likweise.\n\nFrom-SVN: r233362", "tree": {"sha": "73079101a7d3a3d8c1e839118b653452df0cc96e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73079101a7d3a3d8c1e839118b653452df0cc96e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ac29b0f88c42ffee491a8dade51b71c147ecad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac29b0f88c42ffee491a8dade51b71c147ecad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ac29b0f88c42ffee491a8dade51b71c147ecad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ac29b0f88c42ffee491a8dade51b71c147ecad0/comments", "author": null, "committer": null, "parents": [{"sha": "228e2674c802312ea9ed4f56f9c3c88f4d89609a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228e2674c802312ea9ed4f56f9c3c88f4d89609a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/228e2674c802312ea9ed4f56f9c3c88f4d89609a"}], "stats": {"total": 142, "additions": 118, "deletions": 24}, "files": [{"sha": "8c7ea958eb2e5c00a98ae06425b23368d8735bb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac29b0f88c42ffee491a8dade51b71c147ecad0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac29b0f88c42ffee491a8dade51b71c147ecad0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ac29b0f88c42ffee491a8dade51b71c147ecad0", "patch": "@@ -1,3 +1,11 @@\n+2016-02-12  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tPR middle-end/66726\n+\t* tree-ssa-reassoc.c (optimize_range_tests): Handle tcc_compare stmt\n+\twhose result is used in PHI.\n+\t(maybe_optimize_range_tests): Likewise.\n+\t(final_range_test_p): Likweise.\n+\n 2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cgraph.c: Spelling fixes - behaviour -> behavior and"}, {"sha": "d0a5ceee13a412dda80364c71797b3361b64f0df", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 110, "deletions": 24, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ac29b0f88c42ffee491a8dade51b71c147ecad0/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ac29b0f88c42ffee491a8dade51b71c147ecad0/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=3ac29b0f88c42ffee491a8dade51b71c147ecad0", "patch": "@@ -2687,18 +2687,33 @@ optimize_range_tests (enum tree_code opcode,\n    # _345 = PHI <_123(N), 1(...), 1(...)>\n    where _234 has bool type, _123 has single use and\n    bb N has a single successor M.  This is commonly used in\n+   the last block of a range test.\n+\n+   Also Return true if STMT is tcc_compare like:\n+   <bb N>:\n+   ...\n+   _234 = a_2(D) == 2;\n+\n+   <bb M>:\n+   # _345 = PHI <_234(N), 1(...), 1(...)>\n+   _346 = (int) _345;\n+   where _234 has booltype, single use and\n+   bb N has a single successor M.  This is commonly used in\n    the last block of a range test.  */\n \n static bool\n final_range_test_p (gimple *stmt)\n {\n-  basic_block bb, rhs_bb;\n+  basic_block bb, rhs_bb, lhs_bb;\n   edge e;\n   tree lhs, rhs;\n   use_operand_p use_p;\n   gimple *use_stmt;\n \n-  if (!gimple_assign_cast_p (stmt))\n+  if (!gimple_assign_cast_p (stmt)\n+      && (!is_gimple_assign (stmt)\n+\t  || (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt))\n+\t      != tcc_comparison)))\n     return false;\n   bb = gimple_bb (stmt);\n   if (!single_succ_p (bb))\n@@ -2709,11 +2724,16 @@ final_range_test_p (gimple *stmt)\n \n   lhs = gimple_assign_lhs (stmt);\n   rhs = gimple_assign_rhs1 (stmt);\n-  if (!INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n-      || TREE_CODE (rhs) != SSA_NAME\n-      || TREE_CODE (TREE_TYPE (rhs)) != BOOLEAN_TYPE)\n+  if (gimple_assign_cast_p (stmt)\n+      && (!INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t  || TREE_CODE (rhs) != SSA_NAME\n+\t  || TREE_CODE (TREE_TYPE (rhs)) != BOOLEAN_TYPE))\n     return false;\n \n+  if (!gimple_assign_cast_p (stmt)\n+      && (TREE_CODE (TREE_TYPE (lhs)) != BOOLEAN_TYPE))\n+      return false;\n+\n   /* Test whether lhs is consumed only by a PHI in the only successor bb.  */\n   if (!single_imm_use (lhs, &use_p, &use_stmt))\n     return false;\n@@ -2723,10 +2743,20 @@ final_range_test_p (gimple *stmt)\n     return false;\n \n   /* And that the rhs is defined in the same loop.  */\n-  rhs_bb = gimple_bb (SSA_NAME_DEF_STMT (rhs));\n-  if (rhs_bb == NULL\n-      || !flow_bb_inside_loop_p (loop_containing_stmt (stmt), rhs_bb))\n-    return false;\n+  if (gimple_assign_cast_p (stmt))\n+    {\n+      if (TREE_CODE (rhs) != SSA_NAME\n+\t  || !(rhs_bb = gimple_bb (SSA_NAME_DEF_STMT (rhs)))\n+\t  || !flow_bb_inside_loop_p (loop_containing_stmt (stmt), rhs_bb))\n+\treturn false;\n+    }\n+  else\n+    {\n+      if (TREE_CODE (lhs) != SSA_NAME\n+\t  || !(lhs_bb = gimple_bb (SSA_NAME_DEF_STMT (lhs)))\n+\t  || !flow_bb_inside_loop_p (loop_containing_stmt (stmt), lhs_bb))\n+\treturn false;\n+    }\n \n   return true;\n }\n@@ -3119,6 +3149,8 @@ maybe_optimize_range_tests (gimple *stmt)\n \n \t  /* stmt is\n \t     _123 = (int) _234;\n+\t     OR\n+\t     _234 = a_2(D) == 2;\n \n \t     followed by:\n \t     <bb M>:\n@@ -3148,6 +3180,8 @@ maybe_optimize_range_tests (gimple *stmt)\n \t     of the bitwise or resp. and, recursively.  */\n \t  if (!get_ops (rhs, code, &ops,\n \t\t\tloop_containing_stmt (stmt))\n+\t      && (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt))\n+\t\t  != tcc_comparison)\n \t      && has_single_use (rhs))\n \t    {\n \t      /* Otherwise, push the _234 range test itself.  */\n@@ -3160,6 +3194,23 @@ maybe_optimize_range_tests (gimple *stmt)\n \t      ops.safe_push (oe);\n \t      bb_ent.last_idx++;\n \t    }\n+\t  else if (!get_ops (lhs, code, &ops,\n+\t\t\t     loop_containing_stmt (stmt))\n+\t\t   && TREE_CODE (lhs) == SSA_NAME\n+\t\t   && INTEGRAL_TYPE_P (TREE_TYPE (lhs))\n+\t\t   && is_gimple_assign (stmt)\n+\t\t   && (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt))\n+\t\t       == tcc_comparison)\n+\t\t   && has_single_use (lhs))\n+\t    {\n+\t      operand_entry *oe = operand_entry_pool.allocate ();\n+\t      oe->op = lhs;\n+\t      oe->rank = code;\n+\t      oe->id = 0;\n+\t      oe->count = 1;\n+\t      ops.safe_push (oe);\n+\t      bb_ent.last_idx++;\n+\t    }\n \t  else\n \t    bb_ent.last_idx = ops.length ();\n \t  bb_ent.op = rhs;\n@@ -3243,26 +3294,60 @@ maybe_optimize_range_tests (gimple *stmt)\n \t\t{\n \t\t  imm_use_iterator iter;\n \t\t  use_operand_p use_p;\n-\t\t  gimple *use_stmt, *cast_stmt = NULL;\n+\t\t  gimple *use_stmt, *cast_or_tcc_cmp_stmt = NULL;\n \n \t\t  FOR_EACH_IMM_USE_STMT (use_stmt, iter, bbinfo[idx].op)\n-\t\t    if (is_gimple_debug (use_stmt))\n+\t\t    if (is_gimple_debug (use_stmt)\n+\t\t\t|| (TREE_CODE (new_op) == SSA_NAME\n+\t\t\t    && !reassoc_stmt_dominates_stmt_p\n+\t\t\t    (SSA_NAME_DEF_STMT (new_op), use_stmt)))\n \t\t      continue;\n-\t\t    else if (gimple_code (use_stmt) == GIMPLE_COND\n-\t\t\t     || gimple_code (use_stmt) == GIMPLE_PHI)\n-\t\t      FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n-\t\t\tSET_USE (use_p, new_op);\n+\t\t    else if (gimple_code (use_stmt) == GIMPLE_PHI)\n+\t\t\tFOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t\t\t  SET_USE (use_p, new_op);\n+\t\t    else if (gimple_code (use_stmt) == GIMPLE_COND)\n+\t\t      {\n+\t\t\ttree new_type, new_lhs;\n+\t\t\tgassign *g;\n+\t\t\tgcond *cond_stmt = as_a <gcond *> (use_stmt);\n+\t\t\tnew_type = TREE_TYPE (gimple_cond_lhs (cond_stmt));\n+\t\t\tif (!types_compatible_p (new_type, TREE_TYPE (new_op)))\n+\t\t\t  {\n+\t\t\t    new_lhs = make_ssa_name (new_type);\n+\t\t\t    if (is_gimple_min_invariant (new_op))\n+\t\t\t      {\n+\t\t\t\tnew_op = fold_convert (new_type, new_op);\n+\t\t\t\tg = gimple_build_assign (new_lhs, new_op);\n+\t\t\t      }\n+\t\t\t    else\n+\t\t\t      g = gimple_build_assign (new_lhs,\n+\t\t\t\t\t\t       CONVERT_EXPR, new_op);\n+\t\t\t    gimple_stmt_iterator gsi = gsi_for_stmt (use_stmt);\n+\t\t\t    gimple_set_uid (g, gimple_uid (use_stmt));\n+\t\t\t    gimple_set_visited (g, true);\n+\t\t\t    gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  new_lhs = new_op;\n+\t\t\tFOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t\t\t  SET_USE (use_p, new_lhs);\n+\t\t      }\n+\t\t    else if ((is_gimple_assign (use_stmt)\n+\t\t\t      && (TREE_CODE_CLASS (gimple_assign_rhs_code (use_stmt)) == tcc_comparison)))\n+\t\t      {\n+\t\t\tcast_or_tcc_cmp_stmt = use_stmt;\n+\t\t      }\n \t\t    else if (gimple_assign_cast_p (use_stmt))\n-\t\t      cast_stmt = use_stmt;\n-\t\t    else\n-\t\t      gcc_unreachable ();\n-\t\t  if (cast_stmt)\n+\t\t\tcast_or_tcc_cmp_stmt = use_stmt;\n+\n+\t\t  if (cast_or_tcc_cmp_stmt)\n \t\t    {\n \t\t      gcc_assert (bb == last_bb);\n-\t\t      tree lhs = gimple_assign_lhs (cast_stmt);\n+\t\t      tree lhs = gimple_assign_lhs (cast_or_tcc_cmp_stmt);\n \t\t      tree new_lhs = make_ssa_name (TREE_TYPE (lhs));\n \t\t      enum tree_code rhs_code\n-\t\t\t= gimple_assign_rhs_code (cast_stmt);\n+\t\t\t= gimple_assign_cast_p (cast_or_tcc_cmp_stmt) ?\n+\t\t\tgimple_assign_rhs_code (cast_or_tcc_cmp_stmt) : CONVERT_EXPR;\n \t\t      gassign *g;\n \t\t      if (is_gimple_min_invariant (new_op))\n \t\t\t{\n@@ -3271,13 +3356,14 @@ maybe_optimize_range_tests (gimple *stmt)\n \t\t\t}\n \t\t      else\n \t\t\tg = gimple_build_assign (new_lhs, rhs_code, new_op);\n-\t\t      gimple_stmt_iterator gsi = gsi_for_stmt (cast_stmt);\n-\t\t      gimple_set_uid (g, gimple_uid (cast_stmt));\n+\t\t      gimple_stmt_iterator gsi = gsi_for_stmt (cast_or_tcc_cmp_stmt);\n+\t\t      gimple_set_uid (g, gimple_uid (cast_or_tcc_cmp_stmt));\n \t\t      gimple_set_visited (g, true);\n-\t\t      gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n+\t\t      gsi_insert_after (&gsi, g, GSI_SAME_STMT);\n \t\t      FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n \t\t\tif (is_gimple_debug (use_stmt))\n \t\t\t  continue;\n+\t\t\telse if (is_gimple_assign (use_stmt));\n \t\t\telse if (gimple_code (use_stmt) == GIMPLE_COND\n \t\t\t\t || gimple_code (use_stmt) == GIMPLE_PHI)\n \t\t\t  FOR_EACH_IMM_USE_ON_STMT (use_p, iter)"}]}