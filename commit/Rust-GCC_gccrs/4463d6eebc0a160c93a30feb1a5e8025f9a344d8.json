{"sha": "4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ2M2Q2ZWViYzBhMTYwYzkzYTMwZmViMWE1ZTgwMjVmOWEzNDRkOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-03-15T10:01:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-18T08:36:47Z"}, "message": "[Ada] Update comments related to TBD\n\ngcc/ada/\n\n\t* exp_aggr.adb, exp_dist.adb, exp_unst.adb, sa_messages.ads,\n\tsem_ch13.adb, sem_ch3.adb, sem_ch5.adb, sem_eval.adb,\n\tsem_util.adb, sem_util.ads, sinfo.ads: Update comments.", "tree": {"sha": "eb96d2a5de6437ac76eee949c180129ffbb7f0d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb96d2a5de6437ac76eee949c180129ffbb7f0d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26373979deab7481b0503d86e80390ab65c65381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26373979deab7481b0503d86e80390ab65c65381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26373979deab7481b0503d86e80390ab65c65381"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "8f3147e5be7b1ff84c3295ae69ee1fbadc0c9c6b", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -7167,7 +7167,7 @@ package body Exp_Aggr is\n             return Build_Siz_Exp (First (Discrete_Choices (Comp)));\n \n          elsif Nkind (Comp) = N_Iterated_Element_Association then\n-            return -1;    --  TBD, build expression for size of the domain\n+            return -1;    --  ??? build expression for size of the domain\n \n          else\n             return -1;"}, {"sha": "7fb21325bd55f37201d5336d1875b5665dcd199f", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -10906,8 +10906,8 @@ package body Exp_Dist is\n                raise Program_Error;\n             end if;\n \n-            --  TBD: fixed point types???\n-            --  TBverified numeric types with a biased representation???\n+            --  What about fixed point types and numeric types with a biased\n+            --  representation???\n \n          end Find_Numeric_Representation;\n "}, {"sha": "c071a9c7e35e8d8d8ec7117c82044a8d6497b089", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -1566,7 +1566,7 @@ package body Exp_Unst is\n \n                   --  A subprogram instantiation does not have an explicit\n                   --  body. If unused, we could remove the corresponding\n-                  --  wrapper package and its body (TBD).\n+                  --  wrapper package and its body.\n \n                   if Present (STJ.Bod) then\n                      Spec := Corresponding_Spec (STJ.Bod);"}, {"sha": "4f4ed8a8668cbc4c55980c7d4655e4b34d34d8d5", "filename": "gcc/ada/sa_messages.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsa_messages.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsa_messages.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsa_messages.ads?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -96,7 +96,7 @@ package SA_Messages is\n    --  Contract_Cases, Default_Initial_Condition, Initial_Condition,\n    --  Loop_Invariant, Loop_Variant, Refined_Post, and Subprogram_Variant.\n    --\n-   --  TBD: it might be nice to distinguish these different kinds of assertions\n+   --  It might be nice to distinguish these different kinds of assertions\n    --  as is done in SPARK's VC_Kind enumeration type, but any distinction\n    --  which isn't already present in CP's BE_Message_Subkind enumeration type\n    --  would require more work on the CP side."}, {"sha": "ec1962985f52f6f26d342b24f63e8a01063a57ab", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -2623,7 +2623,7 @@ package body Sem_Ch13 is\n                      end if;\n                   end loop;\n \n-                  --  ??? TBD: Must check that \"for result type R, if the\n+                  --  ??? Must check that \"for result type R, if the\n                   --  function is a boundary entity for type R (see 7.3.2),\n                   --  no type invariant applies to type R; if R has a\n                   --  component type C, a similar rule applies to C.\"\n@@ -15068,7 +15068,7 @@ package body Sem_Ch13 is\n \n                   --  For now we only deal with aspects that do not generate\n                   --  subprograms, or that may mention current instances of\n-                  --  types. These will require special handling (???TBD).\n+                  --  types. These will require special handling???.\n \n                   when Aspect_Invariant\n                      | Aspect_Predicate"}, {"sha": "346850de21a914830d11ff49fa9db275acf7f169", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -2827,7 +2827,7 @@ package body Sem_Ch3 is\n             --  to the first encountered body.\n \n             --  ??? A cleaner approach may be possible and/or this solution\n-            --  could be extended to general-purpose late primitives, TBD.\n+            --  could be extended to general-purpose late primitives.\n \n             if Present (Ctrl_Typ) then\n \n@@ -3055,7 +3055,7 @@ package body Sem_Ch3 is\n             end if;\n          end if;\n \n-         --  TBD : other nonoverridable aspects.\n+         --  What about other nonoverridable aspects???\n       end Check_Nonoverridable_Aspects;\n \n       ------------------------------------"}, {"sha": "58cf6c22fda1da20e3c66b3bbf04f1c1911ff3b1", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -1542,7 +1542,6 @@ package body Sem_Ch5 is\n \n       elsif Extensions_Allowed and then Is_Overloaded (Exp) then\n \n-         --  TBD: Generate better ambiguity diagnostics here.\n          --  It would be nice if we could generate all the right error\n          --  messages by calling \"Resolve (Exp, Any_Type);\" in the\n          --  same way that they are generated a few lines below by the"}, {"sha": "7a70fd83b2a516d929d624c5f77959d5b632f6e9", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -6223,7 +6223,7 @@ package body Sem_Eval is\n             end;\n \n          else\n-            --  TBD: Implement Interval_Lists for real types\n+            --  ??? Need to implement Interval_Lists for real types\n \n             return False;\n          end if;"}, {"sha": "f09295baa88eb45b3bf6ebef7969862aa2637a87", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -25239,7 +25239,7 @@ package body Sem_Util is\n                         Domain : constant Node_Id := Name (Parent (Ent));\n \n                      begin\n-                        --  TBD : in the full version of the construct, the\n+                        --  ??? In the full version of the construct, the\n                         --  domain of iteration can be given by an expression.\n \n                         if Is_Entity_Name (Domain) then"}, {"sha": "e387d147f62eb58a7c78804dd51dbc57326b041f", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -3353,7 +3353,7 @@ package Sem_Util is\n       --  Returns True iff every value belonging to some interval of\n       --  Subset also belongs to some interval of Of_Set.\n \n-      --  TBD: When we get around to implementing \"is statically compatible\"\n+      --  When we get around to implementing \"is statically compatible\"\n       --  correctly for real types with static predicates, we may need\n       --  an analogous Real_Interval_List type. Most of the language\n       --  rules that reference \"is statically compatible\" pertain to"}, {"sha": "f210c4916e3e1b8b6593bff309d0aec3baf4a23b", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4463d6eebc0a160c93a30feb1a5e8025f9a344d8/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "patch": "@@ -1099,7 +1099,7 @@ package Sinfo is\n    --  Do_Accessibility_Check\n    --    This flag is set on N_Parameter_Specification nodes to indicate\n    --    that an accessibility check is required for the parameter. It is\n-   --    not yet decided who takes care of this check (TBD ???).\n+   --    not yet decided who takes care of this check???.\n \n    --  Do_Discriminant_Check\n    --    This flag is set on N_Selected_Component nodes to indicate that a\n@@ -1190,7 +1190,7 @@ package Sinfo is\n    --    N_Procedure_Call_Statement, N_Type_Conversion,\n    --    N_Simple_Return_Statement, or N_Extended_Return_Statement\n    --    node to indicate that the tag check can be suppressed. It is not\n-   --    yet decided how this flag is used (TBD ???).\n+   --    yet decided how this flag is used???.\n \n    --  Elaborate_Present\n    --    This flag is set in the N_With_Clause node to indicate that pragma"}]}