{"sha": "02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJiMWU3OGNhZjhmMDc2OWM5NTg5YzdiMDM1MjdlYWVmNzhlMmE4Yg==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2007-06-19T00:10:10Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2007-06-19T00:10:10Z"}, "message": "Breakpoint.java: Make abstract.\n\n        * gnu/gcj/jvmti/Breakpoint.java: Make abstract.\n        (method): Change from private to protected.\n        (location): Likewise.\n        (Breakpoint): Change argument list to take only integer type.\n        Add default constructor.\n        (initialize_native): Renamed to ...\n        (_save_insn): ... this to make function more explicit.\n        (execute): New method.\n        * gnu/gcj/jvmti/Breakpoint.h: Regenerate.\n        * gnu/gcj/jvmti/natBreakpoint.cc (initialize_native): Rename to...\n        (_save_insn): ... this.\n        (install): Save the original instruction.\n        * gnu/gcj/jvmti/NormalBreakpoint.java: New file.\n        * gnu/gcj/jvmti/NormalBreakpoint.h: New file.\n        * gnu/gcj/jvmti/natNormalBreakpoint.cc: New file.\n        * gnu/gcj/jvmti/BreakpointManager.java (newBreakpoint):\n        Instantiate a NormalBreakpoint instead of Breakpoint.\n        * interpret-run.cc (insn_breakpoint): Remove breakpoint actions\n        and call Breakpoint.execute to do them.\n        * classpath/lib/gnu/gcj/jvmti/Breakpoint.class: Regenerate.\n        * classpath/lib/gnu/gcj/jvmti/BreakpointManager.class: Likewise.\n        * classpath/lib/gnu/gcj/jvmti/NormalBreakpoint.class: New file.\n        * sources.am: Regenerate.\n        * Makefile.am (nat_source_files): Add natNormalBreakpoint.cc.\n        * Makefile.in: Regenerated.\n\nFrom-SVN: r125834", "tree": {"sha": "1001778084e0218424d7169c87f3ac322899ec51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1001778084e0218424d7169c87f3ac322899ec51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f7b950b935d2baaf2098e98d32f0145678b8da0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b950b935d2baaf2098e98d32f0145678b8da0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b950b935d2baaf2098e98d32f0145678b8da0f"}], "stats": {"total": 211, "additions": 180, "deletions": 31}, "files": [{"sha": "1a73a9b32c4cddafef843d5e49e3e27d8172e2af", "filename": "libjava/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -1,3 +1,31 @@\n+2007-06-18  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/gcj/jvmti/Breakpoint.java: Make abstract.\n+\t(method): Change from private to protected.\n+\t(location): Likewise.\n+\t(Breakpoint): Change argument list to take only integer type.\n+\tAdd default constructor.\n+\t(initialize_native): Renamed to ...\n+\t(_save_insn): ... this to make function more explicit.\n+\t(execute): New method.\n+\t* gnu/gcj/jvmti/Breakpoint.h: Regenerate.\n+\t* gnu/gcj/jvmti/natBreakpoint.cc (initialize_native): Rename to...\n+\t(_save_insn): ... this.\n+\t(install): Save the original instruction.\n+\t* gnu/gcj/jvmti/NormalBreakpoint.java: New file.\n+\t* gnu/gcj/jvmti/NormalBreakpoint.h: New file.\n+\t* gnu/gcj/jvmti/natNormalBreakpoint.cc: New file.\n+\t* gnu/gcj/jvmti/BreakpointManager.java (newBreakpoint):\n+\tInstantiate a NormalBreakpoint instead of Breakpoint.\n+\t* interpret-run.cc (insn_breakpoint): Remove breakpoint actions\n+\tand call Breakpoint.execute to do them.\n+\t* classpath/lib/gnu/gcj/jvmti/Breakpoint.class: Regenerate.\n+\t* classpath/lib/gnu/gcj/jvmti/BreakpointManager.class: Likewise.\n+\t* classpath/lib/gnu/gcj/jvmti/NormalBreakpoint.class: New file.\n+\t* sources.am: Regenerate.\n+\t* Makefile.am (nat_source_files): Add natNormalBreakpoint.cc.\n+\t* Makefile.in: Regenerated.\n+\n 2007-06-14  Keith Seitz  <keiths@redhat.com>\n \n \t* include/java-interp.h (_Jv_LocalVarTableEntry): Add union"}, {"sha": "ca030e153666e877a26848ec50cf9f0dcf67acc2", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -851,6 +851,7 @@ gnu/gcj/convert/natOutput_SJIS.cc \\\n gnu/gcj/io/natSimpleSHSStream.cc \\\n gnu/gcj/io/shs.cc \\\n gnu/gcj/jvmti/natBreakpoint.cc \\\n+gnu/gcj/jvmti/natNormalBreakpoint.cc \\\n gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natSystemClassLoader.cc \\"}, {"sha": "cc460e88917f5870db78340693e3406d0cb6f138", "filename": "libjava/Makefile.in", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -80,6 +80,7 @@ DIST_COMMON = README $(am__configure_deps) $(srcdir)/../compile \\\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/confsubdir.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gxx-include-dir.m4 \\\n@@ -94,10 +95,11 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n \t$(top_srcdir)/../config/tls.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n-\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n-\t$(top_srcdir)/mingwld.m4 $(top_srcdir)/pkg.m4 \\\n-\t$(top_srcdir)/shlibpath.m4 $(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltgcc.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/mingwld.m4 \\\n+\t$(top_srcdir)/pkg.m4 $(top_srcdir)/shlibpath.m4 \\\n+\t$(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\\n@@ -304,6 +306,7 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc jvmti.cc exception.cc \\\n \tgnu/gcj/convert/natOutput_SJIS.cc \\\n \tgnu/gcj/io/natSimpleSHSStream.cc gnu/gcj/io/shs.cc \\\n \tgnu/gcj/jvmti/natBreakpoint.cc \\\n+\tgnu/gcj/jvmti/natNormalBreakpoint.cc \\\n \tgnu/gcj/runtime/natFinalizerThread.cc \\\n \tgnu/gcj/runtime/natSharedLibLoader.cc \\\n \tgnu/gcj/runtime/natSystemClassLoader.cc \\\n@@ -367,6 +370,7 @@ am__objects_2 = gnu/classpath/jdwp/natVMFrame.lo \\\n \tgnu/gcj/convert/natOutput_SJIS.lo \\\n \tgnu/gcj/io/natSimpleSHSStream.lo gnu/gcj/io/shs.lo \\\n \tgnu/gcj/jvmti/natBreakpoint.lo \\\n+\tgnu/gcj/jvmti/natNormalBreakpoint.lo \\\n \tgnu/gcj/runtime/natFinalizerThread.lo \\\n \tgnu/gcj/runtime/natSharedLibLoader.lo \\\n \tgnu/gcj/runtime/natSystemClassLoader.lo \\\n@@ -1357,7 +1361,8 @@ gnu_gcj_io_header_files = $(patsubst %.java,%.h,$(gnu_gcj_io_source_files))\n gnu_gcj_jvmti_source_files = \\\n gnu/gcj/jvmti/Breakpoint.java \\\n gnu/gcj/jvmti/BreakpointManager.java \\\n-gnu/gcj/jvmti/Location.java\n+gnu/gcj/jvmti/Location.java \\\n+gnu/gcj/jvmti/NormalBreakpoint.java\n \n gnu_gcj_jvmti_header_files = $(patsubst %.java,%.h,$(gnu_gcj_jvmti_source_files))\n gnu_gcj_runtime_source_files = \\\n@@ -8060,6 +8065,7 @@ gnu/gcj/convert/natOutput_SJIS.cc \\\n gnu/gcj/io/natSimpleSHSStream.cc \\\n gnu/gcj/io/shs.cc \\\n gnu/gcj/jvmti/natBreakpoint.cc \\\n+gnu/gcj/jvmti/natNormalBreakpoint.cc \\\n gnu/gcj/runtime/natFinalizerThread.cc \\\n gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natSystemClassLoader.cc \\\n@@ -8456,6 +8462,8 @@ gnu/gcj/jvmti/$(DEPDIR)/$(am__dirstamp):\n \t@: > gnu/gcj/jvmti/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/jvmti/natBreakpoint.lo: gnu/gcj/jvmti/$(am__dirstamp) \\\n \tgnu/gcj/jvmti/$(DEPDIR)/$(am__dirstamp)\n+gnu/gcj/jvmti/natNormalBreakpoint.lo: gnu/gcj/jvmti/$(am__dirstamp) \\\n+\tgnu/gcj/jvmti/$(DEPDIR)/$(am__dirstamp)\n gnu/gcj/runtime/$(am__dirstamp):\n \t@$(mkdir_p) gnu/gcj/runtime\n \t@: > gnu/gcj/runtime/$(am__dirstamp)\n@@ -8938,6 +8946,8 @@ mostlyclean-compile:\n \t-rm -f gnu/gcj/io/shs.lo\n \t-rm -f gnu/gcj/jvmti/natBreakpoint.$(OBJEXT)\n \t-rm -f gnu/gcj/jvmti/natBreakpoint.lo\n+\t-rm -f gnu/gcj/jvmti/natNormalBreakpoint.$(OBJEXT)\n+\t-rm -f gnu/gcj/jvmti/natNormalBreakpoint.lo\n \t-rm -f gnu/gcj/natCore.$(OBJEXT)\n \t-rm -f gnu/gcj/natCore.lo\n \t-rm -f gnu/gcj/runtime/natFinalizerThread.$(OBJEXT)\n@@ -9158,6 +9168,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/io/$(DEPDIR)/natSimpleSHSStream.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/io/$(DEPDIR)/shs.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/jvmti/$(DEPDIR)/natBreakpoint.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/jvmti/$(DEPDIR)/natNormalBreakpoint.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/natFinalizerThread.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/natSharedLibLoader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/gcj/runtime/$(DEPDIR)/natStringBuffer.Plo@am__quote@"}, {"sha": "049b898ea28ce2610160239adf769984c9722c6f", "filename": "libjava/classpath/lib/gnu/gcj/jvmti/Breakpoint.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.class?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b"}, {"sha": "7316b14c0cf1d28c644cf06775b6deb311b8c2d3", "filename": "libjava/classpath/lib/gnu/gcj/jvmti/BreakpointManager.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FBreakpointManager.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FBreakpointManager.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FBreakpointManager.class?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b"}, {"sha": "1d2f23b80f805347cf0fe161b8687c7e6450e65d", "filename": "libjava/classpath/lib/gnu/gcj/jvmti/NormalBreakpoint.class", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FNormalBreakpoint.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FNormalBreakpoint.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fgnu%2Fgcj%2Fjvmti%2FNormalBreakpoint.class?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b"}, {"sha": "f614df9e5e1ac91172f0747eb746b267a8b3e342", "filename": "libjava/gnu/gcj/jvmti/Breakpoint.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.h?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -35,15 +35,18 @@ friend void (::_Jv_RewriteBreakpointInsn (jmethodID, jlocation, pc_t));\n \n public:\n   Breakpoint(jlong, jlong);\n+  Breakpoint();\n private:\n-  void initialize_native();\n+  void _save_insn();\n public:\n   virtual void install();\n   virtual void remove();\n   virtual ::gnu::gcj::RawDataManaged * getInsn();\n-private:\n+  virtual void execute() = 0;\n+public: // actually protected\n   jlong __attribute__((aligned(__alignof__( ::java::lang::Object)))) method;\n   jlong location;\n+private:\n   ::gnu::gcj::RawDataManaged * data;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "00b325aec1323cf812cb7bb4abe1e3d43415e5c9", "filename": "libjava/gnu/gcj/jvmti/Breakpoint.java", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpoint.java?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -1,6 +1,6 @@\n-// Breakpoint.java -  a breakpoint in the interpreter\n+// Breakpoint.java -  a base class for interpreter breakpoints\n \n-/* Copyright (C) 2006  Free Software Foundation\n+/* Copyright (C) 2006, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -13,37 +13,48 @@\n import gnu.gcj.RawDataManaged;\n \n /**\n- * Class representing a Breakpoint.\n+ * Base class representing a type of breakpoint in the interpreter.\n+ * This class deals with saving insns and installing and\n+ * uninstalling insns in the interpreter for all breakpoint classes.\n  *\n  * @author Keith Seitz (keiths@redhat.com)\n  */\n-public class Breakpoint\n+public abstract class Breakpoint\n {\n   // Location of this breakpoint\n-  private long method;\n-  private long location;\n+  protected long method;\n+  protected long location;\n \n   // The original instruction that this breakpoint replaced\n   private RawDataManaged data;\n \n   /**\n-   * Constructs a new Breakpoint. SetBreakpoint will verify the\n-   * validity of the arguments.\n+   * Constructs a new Breakpoint\n    *\n-   * @param method the method (a jmethodID)\n-   * @param location the jlocation of the breakpoint (a jlocation)\n+   * @param method the method in which to set the breakpoint\n+   * @param location the location at which to set the breakpoint\n    */\n   public Breakpoint (long method, long location)\n   {\n     this.method = method;\n     this.location = location;\n-    initialize_native ();\n   }\n \n-  private native void initialize_native ();\n+  public Breakpoint ()\n+  {\n+  }\n+\n+  private native void _save_insn ();\n \n+  /**\n+   * Installs the breakpoint into the interpreter\n+   */\n   public native void install ();\n \n+  /**\n+   * Removes the breakpoint from the interpreter, re-installing\n+   * the original instruction.\n+   */\n   public native void remove ();\n \n   /**\n@@ -54,4 +65,9 @@ public RawDataManaged getInsn ()\n   {\n     return data;\n   }\n+\n+  /**\n+   * Execute the actions of this breakpoint\n+   */\n+  public abstract void execute ();\n }"}, {"sha": "0eb9f33414be3084772d75a863b4e810b65b26f2", "filename": "libjava/gnu/gcj/jvmti/BreakpointManager.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpointManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpointManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FBreakpointManager.java?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -43,7 +43,7 @@ private BreakpointManager ()\n    */\n   public static Breakpoint newBreakpoint (long method, long location)\n   {\n-    Breakpoint bp = new Breakpoint (method, location);\n+    NormalBreakpoint bp = new NormalBreakpoint (method, location);\n     Location loc = new Location (method, location);\n     bp.install ();\n     _instance._breakpoints.put (loc, bp);"}, {"sha": "8ee4cbcb70cb863ef01ed0d68efb1d729c488bbc", "filename": "libjava/gnu/gcj/jvmti/NormalBreakpoint.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FNormalBreakpoint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FNormalBreakpoint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FNormalBreakpoint.h?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -0,0 +1,33 @@\n+\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __gnu_gcj_jvmti_NormalBreakpoint__\n+#define __gnu_gcj_jvmti_NormalBreakpoint__\n+\n+#pragma interface\n+\n+#include <gnu/gcj/jvmti/Breakpoint.h>\n+extern \"Java\"\n+{\n+  namespace gnu\n+  {\n+    namespace gcj\n+    {\n+      namespace jvmti\n+      {\n+          class NormalBreakpoint;\n+      }\n+    }\n+  }\n+}\n+\n+class gnu::gcj::jvmti::NormalBreakpoint : public ::gnu::gcj::jvmti::Breakpoint\n+{\n+\n+public:\n+  NormalBreakpoint(jlong, jlong);\n+  virtual void execute();\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif // __gnu_gcj_jvmti_NormalBreakpoint__"}, {"sha": "4ff48833af3b4bf1cfd016f64ef2795389d9783a", "filename": "libjava/gnu/gcj/jvmti/NormalBreakpoint.java", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FNormalBreakpoint.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FNormalBreakpoint.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FNormalBreakpoint.java?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -0,0 +1,29 @@\n+// NormalBreakpoint.java -  a \"normal\" breakpoint in the interpreter\n+\n+/* Copyright (C) 2007  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.jvmti;\n+\n+/**\n+ * This class represents a \"normal\" breakpoint in the interpreter.\n+ * When the interpreter hits this breakpoint type, it will send out\n+ * a JVMTI breakpoint notification.\n+ *\n+ * @author Keith Seitz (keiths@redhat.com)\n+ */\n+public class NormalBreakpoint\n+  extends Breakpoint\n+{\n+  public NormalBreakpoint (long method, long id)\n+  {\n+    super (method, id);\n+  }\n+\n+  public native void execute ();\n+}"}, {"sha": "87016b089f5aa095db01427e162532448b3ada3b", "filename": "libjava/gnu/gcj/jvmti/natBreakpoint.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatBreakpoint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatBreakpoint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatBreakpoint.cc?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -32,7 +32,7 @@ get_interp_method (jlong method)\n }\n \n void\n-gnu::gcj::jvmti::Breakpoint::initialize_native ()\n+gnu::gcj::jvmti::Breakpoint::_save_insn ()\n {\n   _Jv_InterpMethod *imeth = get_interp_method (method);\n \n@@ -45,6 +45,7 @@ gnu::gcj::jvmti::Breakpoint::initialize_native ()\n void\n gnu::gcj::jvmti::Breakpoint::install ()\n {\n+  _save_insn ();\n   _Jv_InterpMethod *imeth = get_interp_method (method);\n   imeth->install_break (location);\n }"}, {"sha": "be382408c8d5e94bdf06b85e9a2e40016c1e697d", "filename": "libjava/gnu/gcj/jvmti/natNormalBreakpoint.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatNormalBreakpoint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatNormalBreakpoint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fjvmti%2FnatNormalBreakpoint.cc?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -0,0 +1,31 @@\n+// natNormalBreakpoint.cc - C++ side of NormalBreakpoint\n+\n+/* Copyright (C) 2007  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+#include <gcj/cni.h>\n+#include <java-interp.h>\n+#include <jvmti.h>\n+#include \"jvmti-int.h\"\n+\n+#include <gnu/gcj/jvmti/NormalBreakpoint.h>\n+#include <java/lang/Thread.h>\n+\n+void\n+gnu::gcj::jvmti::NormalBreakpoint::execute ()\n+{\n+  using namespace ::java::lang;\n+\n+  Thread *thread = Thread::currentThread ();\n+  JNIEnv *jni_env = _Jv_GetCurrentJNIEnv ();\n+      \n+  JvAssert (JVMTI_REQUESTED_EVENT (Breakpoint));\n+  _Jv_JVMTI_PostEvent (JVMTI_EVENT_BREAKPOINT, thread, jni_env,\n+\t\t       method, location);\n+}"}, {"sha": "1eea57e1f9e19ce835ce24c3e51bfbf7697fcbc8", "filename": "libjava/interpret-run.cc", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Finterpret-run.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Finterpret-run.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret-run.cc?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -2619,26 +2619,21 @@ details.  */\n \n     insn_breakpoint:\n       {\n-\tJvAssert (JVMTI_REQUESTED_EVENT (Breakpoint));\n-\n-\t// Send JVMTI notification\n \tusing namespace ::java::lang;\n \tjmethodID method = meth->self;\n \tjlocation location = meth->insn_index (pc - 1);\n-\tThread *thread = Thread::currentThread ();\n-\tJNIEnv *jni_env = _Jv_GetCurrentJNIEnv ();\n \n-\t// Save the insn here since the breakpoint could be removed\n-\t// before the JVMTI notification returns.\n \tusing namespace gnu::gcj::jvmti;\n \tBreakpoint *bp\n \t  = BreakpointManager::getBreakpoint (reinterpret_cast<jlong> (method),\n \t\t\t\t\t      location);\n \tJvAssert (bp != NULL);\n+\n+\t// Save the insn here since the breakpoint could be removed\n+\t// before the JVMTI notification returns.\n \tpc_t opc = reinterpret_cast<pc_t> (bp->getInsn ());\n \n-\t_Jv_JVMTI_PostEvent (JVMTI_EVENT_BREAKPOINT, thread, jni_env,\n-\t\t\t     method, location);\n+\tbp->execute ();\n \n \t// Continue execution\n #ifdef DIRECT_THREADED"}, {"sha": "89097563d71af59f5e8d0eb4e35656fb592a3d80", "filename": "libjava/sources.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02b1e78caf8f0769c9589c7b03527eaef78e2a8b/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=02b1e78caf8f0769c9589c7b03527eaef78e2a8b", "patch": "@@ -538,7 +538,8 @@ gnu/gcj/io.list: $(gnu_gcj_io_source_files)\n gnu_gcj_jvmti_source_files = \\\n gnu/gcj/jvmti/Breakpoint.java \\\n gnu/gcj/jvmti/BreakpointManager.java \\\n-gnu/gcj/jvmti/Location.java\n+gnu/gcj/jvmti/Location.java \\\n+gnu/gcj/jvmti/NormalBreakpoint.java\n \n gnu_gcj_jvmti_header_files = $(patsubst %.java,%.h,$(gnu_gcj_jvmti_source_files))\n "}]}