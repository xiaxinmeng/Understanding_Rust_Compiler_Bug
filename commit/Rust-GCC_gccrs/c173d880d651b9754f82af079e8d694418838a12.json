{"sha": "c173d880d651b9754f82af079e8d694418838a12", "node_id": "C_kwDOANBUbNoAKGMxNzNkODgwZDY1MWI5NzU0ZjgyYWYwNzllOGQ2OTQ0MTg4MzhhMTI", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-10-21T01:34:06Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2022-01-10T18:16:33Z"}, "message": "rs6000: Add Power10 optimization for _mm_blendv*\n\nPower10 ISA added `xxblendv*` instructions which are realized in the\n`vec_blendv` instrinsic.\n\nUse `vec_blendv` for `_mm_blendv_epi8`, `_mm_blendv_ps`, and\n`_mm_blendv_pd` compatibility intrinsics, when `_ARCH_PWR10`.\n\nUpdate original implementation of _mm_blendv_epi8 to use signed types,\nto better match the function parameters. Realization is unchanged.\n\nAlso, copy a test from i386 for testing `_mm_blendv_ps`.\nThis should have come with commit ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8,\nbut was inadvertently omitted.\n\n2022-01-10  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/smmintrin.h (_mm_blendv_epi8): Use vec_blendv\n\twhen _ARCH_PWR10. Use signed types.\n\t(_mm_blendv_ps): Use vec_blendv when _ARCH_PWR10.\n\t(_mm_blendv_pd): Likewise.\n\ngcc/testsuite\n\t* gcc.target/powerpc/sse4_1-blendvps.c: Copy from gcc.target/i386,\n\tadjust dg directives to suit.", "tree": {"sha": "fd8ff65208fb1453e5cd1f6bfed93f280c6e8c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd8ff65208fb1453e5cd1f6bfed93f280c6e8c42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c173d880d651b9754f82af079e8d694418838a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c173d880d651b9754f82af079e8d694418838a12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c173d880d651b9754f82af079e8d694418838a12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c173d880d651b9754f82af079e8d694418838a12/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ff7420e941931d32ce2e332e7968fe67ba20af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ff7420e941931d32ce2e332e7968fe67ba20af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ff7420e941931d32ce2e332e7968fe67ba20af"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "b9cb46b3c1dd65beba654f2432091cbcd278d852", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c173d880d651b9754f82af079e8d694418838a12/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c173d880d651b9754f82af079e8d694418838a12/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=c173d880d651b9754f82af079e8d694418838a12", "patch": "@@ -113,9 +113,13 @@ _mm_blend_epi16 (__m128i __A, __m128i __B, const int __imm8)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_blendv_epi8 (__m128i __A, __m128i __B, __m128i __mask)\n {\n+#ifdef _ARCH_PWR10\n+  return (__m128i) vec_blendv ((__v16qi) __A, (__v16qi) __B, (__v16qu) __mask);\n+#else\n   const __v16qu __seven = vec_splats ((unsigned char) 0x07);\n   __v16qu __lmask = vec_sra ((__v16qu) __mask, __seven);\n-  return (__m128i) vec_sel ((__v16qu) __A, (__v16qu) __B, __lmask);\n+  return (__m128i) vec_sel ((__v16qi) __A, (__v16qi) __B, __lmask);\n+#endif\n }\n \n extern __inline __m128\n@@ -149,9 +153,13 @@ extern __inline __m128\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_blendv_ps (__m128 __A, __m128 __B, __m128 __mask)\n {\n+#ifdef _ARCH_PWR10\n+  return (__m128) vec_blendv ((__v4sf) __A, (__v4sf) __B, (__v4su) __mask);\n+#else\n   const __v4si __zero = {0};\n   const __vector __bool int __boolmask = vec_cmplt ((__v4si) __mask, __zero);\n   return (__m128) vec_sel ((__v4su) __A, (__v4su) __B, (__v4su) __boolmask);\n+#endif\n }\n \n extern __inline __m128d\n@@ -174,9 +182,13 @@ extern __inline __m128d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_blendv_pd (__m128d __A, __m128d __B, __m128d __mask)\n {\n+#ifdef _ARCH_PWR10\n+  return (__m128d) vec_blendv ((__v2df) __A, (__v2df) __B, (__v2du) __mask);\n+#else\n   const __v2di __zero = {0};\n   const __vector __bool long long __boolmask = vec_cmplt ((__v2di) __mask, __zero);\n   return (__m128d) vec_sel ((__v2du) __A, (__v2du) __B, (__v2du) __boolmask);\n+#endif\n }\n #endif\n "}, {"sha": "8fcb55383047a30d4fc5df13b6799d9f215f866d", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-blendvps.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c173d880d651b9754f82af079e8d694418838a12/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendvps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c173d880d651b9754f82af079e8d694418838a12/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendvps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendvps.c?ref=c173d880d651b9754f82af079e8d694418838a12", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+static void\n+init_blendvps (float *src1, float *src2, float *mask)\n+{\n+  int i, msk, sign = 1; \n+\n+  msk = -1;\n+  for (i = 0; i < NUM * 4; i++)\n+    {\n+      if((i % 4) == 0)\n+\tmsk++;\n+      src1[i] = i* (i + 1) * sign;\n+      src2[i] = (i + 20) * sign;\n+      mask[i] = (i + 120) * i;\n+      if( (msk & (1 << (i % 4))))\n+\tmask[i] = -mask[i];\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_blendvps (__m128 *dst, float *src1, float *src2,\n+\t\tfloat *mask)\n+{\n+  float tmp[4];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 4; j++)\n+    if (mask [j] < 0.0)\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128 x[NUM];\n+      float f[NUM * 4];\n+    } dst, src1, src2, mask;\n+  int i;\n+\n+  init_blendvps (src1.f, src2.f, mask.f);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blendv_ps (src1.x[i], src2.x[i], mask.x[i]);\n+      if (check_blendvps (&dst.x[i], &src1.f[i * 4], &src2.f[i * 4],\n+\t\t\t  &mask.f[i * 4]))\n+\tabort ();\n+    }\n+}"}]}