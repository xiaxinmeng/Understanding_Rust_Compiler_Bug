{"sha": "7437519c9e25ae3666dd2d11dbb010516ee65d6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzNzUxOWM5ZTI1YWUzNjY2ZGQyZDExZGJiMDEwNTE2ZWU2NWQ2Yw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-01-24T03:27:30Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2002-01-24T03:27:30Z"}, "message": "Make-lang.in (parse.c): Adjust expected number of shift-reduce conflicts.\n\n\t* Make-lang.in (parse.c): Adjust expected number of\n\tshift-reduce conflicts.\n\t(decl.o): Depend on diagnostic.h.\n\t* decl.c: Include diagnostic.h.\n\t(grokdeclarator): Check for null pointer.\n\t(finish_function): Don't abort when\n\tcurrent_binding_level->parm_flag != 1, if errors have\n\toccurred; throw away the statement tree and extra binding\n\tlevels, and continue.\n\t* lex.c (note_list_got_semicolon): Check for null pointer.\n\t* method.c (hack_identifier): Just return error_mark_node if\n\tvalue is error_mark_node.\n\t* parse.y (primary: TYPEID(type_id)): No need to use\n\tTYPE_MAIN_VARIANT here.\n\t(handler_seq): Accept an empty list of catch clauses and\n\tgenerate a fake handler block to avoid later crashes.\n\t(ansi_raise_identifier): Accept the error token too.\n\t* semantics.c (begin_class_definition,\n\tfinish_class_definition): Check for error_mark_node.\n\nFrom-SVN: r49163", "tree": {"sha": "494a4e57911fee8c577218fbf4f5afaff7e5c29e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/494a4e57911fee8c577218fbf4f5afaff7e5c29e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7437519c9e25ae3666dd2d11dbb010516ee65d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7437519c9e25ae3666dd2d11dbb010516ee65d6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7437519c9e25ae3666dd2d11dbb010516ee65d6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7437519c9e25ae3666dd2d11dbb010516ee65d6c/comments", "author": null, "committer": null, "parents": [{"sha": "709619d9162fade06265038534bb20276d770708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/709619d9162fade06265038534bb20276d770708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/709619d9162fade06265038534bb20276d770708"}], "stats": {"total": 105, "additions": 67, "deletions": 38}, "files": [{"sha": "3ea407057279f6498b83925f78425c117eeaf1bc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7437519c9e25ae3666dd2d11dbb010516ee65d6c", "patch": "@@ -1,3 +1,25 @@\n+2002-01-23  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Make-lang.in (parse.c): Adjust expected number of\n+\tshift-reduce conflicts.\n+\t(decl.o): Depend on diagnostic.h.\n+\t* decl.c: Include diagnostic.h.\n+\t(grokdeclarator): Check for null pointer.\n+\t(finish_function): Don't abort when\n+\tcurrent_binding_level->parm_flag != 1, if errors have\n+\toccurred; throw away the statement tree and extra binding\n+\tlevels, and continue.\n+\t* lex.c (note_list_got_semicolon): Check for null pointer.\n+\t* method.c (hack_identifier): Just return error_mark_node if\n+\tvalue is error_mark_node.\n+\t* parse.y (primary: TYPEID(type_id)): No need to use\n+\tTYPE_MAIN_VARIANT here.\n+\t(handler_seq): Accept an empty list of catch clauses and\n+\tgenerate a fake handler block to avoid later crashes.\n+\t(ansi_raise_identifier): Accept the error token too.\n+\t* semantics.c (begin_class_definition,\n+\tfinish_class_definition): Check for error_mark_node.\n+\n 2002-01-23  Zack Weinberg  <zack@codesourcery.com>\n \n \t* typeck2.c (friendly_abort): Delete definition."}, {"sha": "3b14ab181b3104191e131c4580d150096112129c", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=7437519c9e25ae3666dd2d11dbb010516ee65d6c", "patch": "@@ -120,7 +120,7 @@ $(srcdir)/cp/cfns.h: $(srcdir)/cp/cfns.gperf\n \n $(srcdir)/cp/parse.h: $(srcdir)/cp/parse.c\n $(srcdir)/cp/parse.c: $(srcdir)/cp/parse.y\n-\t@echo \"Expect 34 shift/reduce conflicts and 58 reduce/reduce conflicts.\"\n+\t@echo \"Expect 36 shift/reduce conflicts and 58 reduce/reduce conflicts.\"\n \tcd $(srcdir)/cp; $(BISON) $(BISONFLAGS) -d -o p$$$$.c parse.y ; \\\n \tgrep '^#define[ \t]*YYEMPTY' p$$$$.c >> p$$$$.h ; \\\n \tmv -f p$$$$.c parse.c ; mv -f p$$$$.h parse.h\n@@ -249,7 +249,7 @@ cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) toplev.h langhooks.h langhooks-def.h \\\n   c-common.h\n cp/decl.o: cp/decl.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h stack.h \\\n   output.h $(EXPR_H) except.h toplev.h hash.h $(GGC_H) $(RTL_H) \\\n-  cp/operators.def $(TM_P_H) tree-inline.h\n+  cp/operators.def $(TM_P_H) tree-inline.h diagnostic.h\n cp/decl2.o: cp/decl2.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h $(EXPR_H) \\\n   output.h except.h toplev.h $(GGC_H) $(RTL_H)\n cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) flags.h toplev.h output.h $(TM_P_H) \\"}, {"sha": "0bb5dfd404cdd60ba9a7b5bd9330823a0ff6d56e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7437519c9e25ae3666dd2d11dbb010516ee65d6c", "patch": "@@ -46,6 +46,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"c-common.h\"\n+#include \"diagnostic.h\"\n \n extern const struct attribute_spec *lang_attribute_table;\n \n@@ -10144,7 +10145,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t common.  With no options, it is allowed.  With -Wreturn-type,\n \t it is a warning.  It is only an error with -pedantic-errors.  */\n       is_main = (funcdef_flag\n-\t\t && MAIN_NAME_P (dname)\n+\t\t && dname && MAIN_NAME_P (dname)\n \t\t && ctype == NULL_TREE\n \t\t && in_namespace == NULL_TREE\n \t\t && current_namespace == global_namespace);\n@@ -14163,8 +14164,28 @@ finish_function (flags)\n   /* This must come after expand_function_end because cleanups might\n      have declarations (from inline functions) that need to go into\n      this function's blocks.  */\n+  \n+  /* If the current binding level isn't the outermost binding level\n+     for this function, either there is a bug, or we have experienced\n+     syntax errors and the statement tree is malformed.  */\n   if (current_binding_level->parm_flag != 1)\n-    abort ();\n+    {\n+      /* Make sure we have already experienced errors.  */\n+      if (errorcount == 0)\n+\tabort ();\n+\n+      /* Throw away the broken statement tree and extra binding\n+         levels.  */\n+      DECL_SAVED_TREE (fndecl) = build_stmt (COMPOUND_STMT, NULL_TREE);\n+\n+      while (current_binding_level->parm_flag != 1)\n+\t{\n+\t  if (current_binding_level->parm_flag == 2)\n+\t    pop_nested_class ();\n+\t  else\n+\t    poplevel (0, 0, 0);\n+\t}\n+    }\n   poplevel (1, 0, 1);\n \n   /* Set up the named return value optimization, if we can.  Here, we"}, {"sha": "0287f7040323e0fb8422b950d69d87302f4cb215", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=7437519c9e25ae3666dd2d11dbb010516ee65d6c", "patch": "@@ -1026,7 +1026,7 @@ note_list_got_semicolon (declspecs)\n   for (link = declspecs; link; link = TREE_CHAIN (link))\n     {\n       tree type = TREE_VALUE (link);\n-      if (TYPE_P (type))\n+      if (type && TYPE_P (type))\n \tnote_got_semicolon (type);\n     }\n   clear_anon_tags ();"}, {"sha": "b0cc63a5c0f0644183a57e9f44e28405d60a7e61", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=7437519c9e25ae3666dd2d11dbb010516ee65d6c", "patch": "@@ -145,38 +145,7 @@ hack_identifier (value, name)\n   tree type;\n \n   if (value == error_mark_node)\n-    {\n-      if (current_class_name)\n-\t{\n-\t  tree fields = lookup_fnfields (TYPE_BINFO (current_class_type),\n-\t\t\t\t\t name, 1);\n-\t  if (fields == error_mark_node)\n-\t    return error_mark_node;\n-\t  if (fields)\n-\t    {\n-\t      tree fndecl;\n-\n-\t      fndecl = TREE_VALUE (fields);\n-\t      my_friendly_assert (TREE_CODE (fndecl) == FUNCTION_DECL, 251);\n-\t      /* I could not trigger this code. MvL */\n-\t      abort ();\n-#ifdef DEAD\n-\t      if (DECL_CHAIN (fndecl) == NULL_TREE)\n-\t\t{\n-\t\t  warning (\"methods cannot be converted to function pointers\");\n-\t\t  return fndecl;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  error (\"ambiguous request for method pointer `%s'\",\n-\t\t\t IDENTIFIER_POINTER (name));\n-\t\t  return error_mark_node;\n-\t\t}\n-#endif\n-\t    }\n-\t}\n-      return error_mark_node;\n-    }\n+    return error_mark_node;\n \n   type = TREE_TYPE (value);\n   if (TREE_CODE (value) == FIELD_DECL)"}, {"sha": "83a1cd020aa4d9247db58f0f6158f731c3aa38ce", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=7437519c9e25ae3666dd2d11dbb010516ee65d6c", "patch": "@@ -1650,7 +1650,7 @@ primary:\n \t| TYPEID '(' type_id ')'\n \t\t{ tree type = groktypename ($3.t);\n \t\t  check_for_new_type (\"typeid\", $3);\n-\t\t  $$ = get_typeid (TYPE_MAIN_VARIANT (type)); }\n+\t\t  $$ = get_typeid (type); }\n \t| global_scope IDENTIFIER\n \t\t{ $$ = do_scoped_id ($2, 1); }\n \t| global_scope template_id\n@@ -3505,6 +3505,15 @@ try_block:\n handler_seq:\n \t  handler\n \t| handler_seq handler\n+\t| /* empty */\n+\t\t{ /* Generate a fake handler block to avoid later aborts. */\n+\t\t  tree fake_handler = begin_handler ();\n+\t\t  finish_handler_parms (NULL_TREE, fake_handler);\n+\t\t  finish_handler (fake_handler);\n+\t\t  $<ttype>$ = fake_handler;\n+\n+\t\t  error (\"must have at least one catch per try block\");\n+\t\t}\n \t;\n \n handler:\n@@ -3809,6 +3818,8 @@ ansi_raise_identifier:\n \t\t  check_for_new_type (\"exception specifier\", $1);\n \t\t  $$ = groktypename ($1.t);\n \t\t}\n+\t  | error\n+\t\t{ $$ = error_mark_node; }\n \t;\n \n ansi_raise_identifiers:"}, {"sha": "37729bfd9670c6b0a8a770460abfe7df3427dbb5", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7437519c9e25ae3666dd2d11dbb010516ee65d6c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=7437519c9e25ae3666dd2d11dbb010516ee65d6c", "patch": "@@ -1669,6 +1669,9 @@ tree\n begin_class_definition (t)\n      tree t;\n {\n+  if (t == error_mark_node)\n+    return error_mark_node;\n+\n   /* Check the bases are accessible. */\n   decl_type_access_control (TYPE_NAME (t));\n   reset_type_access_control ();\n@@ -1878,6 +1881,9 @@ finish_class_definition (t, attributes, semi, pop_scope_p)\n      int semi;\n      int pop_scope_p;\n {\n+  if (t == error_mark_node)\n+    return error_mark_node;\n+\n   /* finish_struct nukes this anyway; if finish_exception does too,\n      then it can go.  */\n   if (semi)"}]}