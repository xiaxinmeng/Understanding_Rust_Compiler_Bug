{"sha": "8efcbecad561cde32bdefe8d08f096e6284ef928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVmY2JlY2FkNTYxY2RlMzJiZGVmZThkMDhmMDk2ZTYyODRlZjkyOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-20T19:39:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-20T19:39:02Z"}, "message": "re PR c++/48657 (could not convert template argument \u2018VectorDimension\u2019 to \u2018unsigned int\u2019)\n\n\tPR c++/48657\n\t* decl.c (cp_finish_decl): Simplify template handling.\n\nFrom-SVN: r172790", "tree": {"sha": "2aa1fa90d26579b2a1a0345df2ebd335edf19602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aa1fa90d26579b2a1a0345df2ebd335edf19602"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8efcbecad561cde32bdefe8d08f096e6284ef928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efcbecad561cde32bdefe8d08f096e6284ef928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efcbecad561cde32bdefe8d08f096e6284ef928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efcbecad561cde32bdefe8d08f096e6284ef928/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a25752bbd26c53f9c1c821afcfaf4b92ccb0527", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a25752bbd26c53f9c1c821afcfaf4b92ccb0527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a25752bbd26c53f9c1c821afcfaf4b92ccb0527"}], "stats": {"total": 80, "additions": 38, "deletions": 42}, "files": [{"sha": "ed9871973bca97590ac82e09e98db26561b9479d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efcbecad561cde32bdefe8d08f096e6284ef928/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efcbecad561cde32bdefe8d08f096e6284ef928/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8efcbecad561cde32bdefe8d08f096e6284ef928", "patch": "@@ -1,3 +1,8 @@\n+2011-04-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/48657\n+\t* decl.c (cp_finish_decl): Simplify template handling.\n+\n 2011-04-20  Jim Meyering  <meyering@redhat.com>\n \n \t* tree.c (cxx_printable_name_internal): Remove useless if-before-free."}, {"sha": "cf4a40efed392b3fef6c3302f6b5cc6b923aea30", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 20, "deletions": 42, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efcbecad561cde32bdefe8d08f096e6284ef928/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efcbecad561cde32bdefe8d08f096e6284ef928/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8efcbecad561cde32bdefe8d08f096e6284ef928", "patch": "@@ -5750,7 +5750,6 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n   const char *asmspec = NULL;\n   int was_readonly = 0;\n   bool var_definition_p = false;\n-  int saved_processing_template_decl;\n   tree auto_node;\n \n   if (decl == error_mark_node)\n@@ -5772,7 +5771,6 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \n   /* Assume no cleanup is required.  */\n   cleanup = NULL_TREE;\n-  saved_processing_template_decl = processing_template_decl;\n \n   /* If a name was specified, get the string.  */\n   if (global_scope_p (current_binding_level))\n@@ -5878,39 +5876,24 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t template is instantiated.  But, if DECL is a variable constant\n \t then it can be used in future constant expressions, so its value\n \t must be available. */\n-      if (!(init\n-\t    && DECL_CLASS_SCOPE_P (decl)\n-\t    /* We just set TREE_CONSTANT appropriately; see above.  */\n-\t    && TREE_CONSTANT (decl)\n-\t    && !type_dependent_p\n-\t    /* FIXME non-value-dependent constant expression  */\n-\t    && !value_dependent_init_p (init)))\n-\t{\n-\t  if (init)\n-\t    DECL_INITIAL (decl) = init;\n-\t  if (TREE_CODE (decl) == VAR_DECL\n-\t      && !DECL_PRETTY_FUNCTION_P (decl)\n-\t      && !type_dependent_p)\n-\t    maybe_deduce_size_from_array_init (decl, init);\n-\t  goto finish_end;\n+      if (init\n+\t  && init_const_expr_p\n+\t  && !type_dependent_p\n+\t  && decl_maybe_constant_var_p (decl)\n+\t  && !value_dependent_init_p (init))\n+\t{\n+\t  tree init_code = check_initializer (decl, init, flags, &cleanup);\n+\t  if (init_code == NULL_TREE)\n+\t    init = NULL_TREE;\n \t}\n+      else if (TREE_CODE (decl) == VAR_DECL\n+\t       && !DECL_PRETTY_FUNCTION_P (decl)\n+\t       && !type_dependent_p)\n+\tmaybe_deduce_size_from_array_init (decl, init);\n \n-      if (TREE_CODE (init) == TREE_LIST)\n-\t{\n-\t  /* If the parenthesized-initializer form was used (e.g.,\n-\t     \"int A<N>::i(X)\"), then INIT will be a TREE_LIST of initializer\n-\t     arguments.  (There is generally only one.)  We convert them\n-\t     individually.  */\n-\t  tree list = init;\n-\t  for (; list; list = TREE_CHAIN (list))\n-\t    {\n-\t      tree elt = TREE_VALUE (list);\n-\t      TREE_VALUE (list) = fold_non_dependent_expr (elt);\n-\t    }\n-\t}\n-      else\n-\tinit = fold_non_dependent_expr (init);\n-      processing_template_decl = 0;\n+      if (init)\n+\tDECL_INITIAL (decl) = init;\n+      return;\n     }\n \n   /* Take care of TYPE_DECLs up front.  */\n@@ -5933,7 +5916,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \n       rest_of_decl_compilation (decl, DECL_FILE_SCOPE_P (decl),\n \t\t\t\tat_eof);\n-      goto finish_end;\n+      return;\n     }\n \n   /* A reference will be modified here, as it is initialized.  */\n@@ -6057,8 +6040,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       else if (TREE_CODE (type) == ARRAY_TYPE)\n \tlayout_type (type);\n \n-      if (!processing_template_decl\n-\t  && TREE_STATIC (decl)\n+      if (TREE_STATIC (decl)\n \t  && !at_function_scope_p ()\n \t  && current_function_decl == NULL)\n \t/* So decl is a global variable or a static member of a\n@@ -6078,9 +6060,8 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \n   /* Let the middle end know about variables and functions -- but not\n      static data members in uninstantiated class templates.  */\n-  if (!saved_processing_template_decl\n-      && (TREE_CODE (decl) == VAR_DECL \n-\t  || TREE_CODE (decl) == FUNCTION_DECL))\n+  if (TREE_CODE (decl) == VAR_DECL\n+      || TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       if (TREE_CODE (decl) == VAR_DECL)\n \t{\n@@ -6167,9 +6148,6 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n   if (cleanup)\n     push_cleanup (decl, cleanup, false);\n \n- finish_end:\n-  processing_template_decl = saved_processing_template_decl;\n-\n   if (was_readonly)\n     TREE_READONLY (decl) = 1;\n }"}, {"sha": "c16c9bf65749e43d64d7d0569a70c11b1fa0589c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efcbecad561cde32bdefe8d08f096e6284ef928/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efcbecad561cde32bdefe8d08f096e6284ef928/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8efcbecad561cde32bdefe8d08f096e6284ef928", "patch": "@@ -1,3 +1,7 @@\n+2011-04-20  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/template/const4.C: New.\n+\n 2011-04-20  Easwaran Raman  <eraman@google.com>\n \n \t* gcc.dg/stack-layout-1.c: New test."}, {"sha": "6552ec6e9686154968c0fa27ea76f2ff67900201", "filename": "gcc/testsuite/g++.dg/template/const4.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efcbecad561cde32bdefe8d08f096e6284ef928/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconst4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efcbecad561cde32bdefe8d08f096e6284ef928/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconst4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fconst4.C?ref=8efcbecad561cde32bdefe8d08f096e6284ef928", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/48657\n+\n+template<unsigned> struct A { typedef int T; };\n+\n+template<unsigned> void f()\n+{\n+  const unsigned D = 4;\n+  A<D>::T t;\n+}"}]}