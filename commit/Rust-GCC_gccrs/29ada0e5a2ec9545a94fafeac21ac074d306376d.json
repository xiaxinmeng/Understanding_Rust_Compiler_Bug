{"sha": "29ada0e5a2ec9545a94fafeac21ac074d306376d", "node_id": "C_kwDOANBUbNoAKDI5YWRhMGU1YTJlYzk1NDVhOTRmYWZlYWMyMWFjMDc0ZDMwNjM3NmQ", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2021-08-16T13:28:09Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-01T06:13:39Z"}, "message": "[Ada] Empty CUDA_Global procedures when compiling for host\n\ngcc/ada/\n\n\t* gnat_cuda.adb (Empty_CUDA_Global_Subprograms): New procedure.\n\t(Expand_CUDA_Package): Call Empty_CUDA_Global_Subprograms.", "tree": {"sha": "b0d851ef06de667cd8a2ae63075103dbc00c2d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d851ef06de667cd8a2ae63075103dbc00c2d01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29ada0e5a2ec9545a94fafeac21ac074d306376d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ada0e5a2ec9545a94fafeac21ac074d306376d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ada0e5a2ec9545a94fafeac21ac074d306376d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ada0e5a2ec9545a94fafeac21ac074d306376d/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e02c8dffe35f2763ec42a4ca5b2cf1af11f8e5d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e02c8dffe35f2763ec42a4ca5b2cf1af11f8e5d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e02c8dffe35f2763ec42a4ca5b2cf1af11f8e5d6"}], "stats": {"total": 92, "additions": 78, "deletions": 14}, "files": [{"sha": "fe080aeaf4577cec735da3d0eada458f567b753d", "filename": "gcc/ada/gnat_cuda.adb", "status": "modified", "additions": 78, "deletions": 14, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29ada0e5a2ec9545a94fafeac21ac074d306376d/gcc%2Fada%2Fgnat_cuda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29ada0e5a2ec9545a94fafeac21ac074d306376d/gcc%2Fada%2Fgnat_cuda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_cuda.adb?ref=29ada0e5a2ec9545a94fafeac21ac074d306376d", "patch": "@@ -25,20 +25,22 @@\n \n --  This package defines CUDA-specific datastructures and functions.\n \n-with Debug;          use Debug;\n-with Elists;         use Elists;\n-with Namet;          use Namet;\n-with Nlists;         use Nlists;\n-with Nmake;          use Nmake;\n-with Rtsfind;        use Rtsfind;\n-with Sinfo;          use Sinfo;\n-with Sinfo.Nodes;    use Sinfo.Nodes;\n-with Stringt;        use Stringt;\n-with Tbuild;         use Tbuild;\n-with Uintp;          use Uintp;\n-with Sem;            use Sem;\n-with Sem_Util;       use Sem_Util;\n-with Snames;         use Snames;\n+with Atree;       use Atree;\n+with Debug;       use Debug;\n+with Elists;      use Elists;\n+with Namet;       use Namet;\n+with Nlists;      use Nlists;\n+with Nmake;       use Nmake;\n+with Rtsfind;     use Rtsfind;\n+with Sinfo;       use Sinfo;\n+with Sinfo.Nodes; use Sinfo.Nodes;\n+with Stringt;     use Stringt;\n+with Tbuild;      use Tbuild;\n+with Uintp;       use Uintp;\n+with Sem;         use Sem;\n+with Sem_Aux;     use Sem_Aux;\n+with Sem_Util;    use Sem_Util;\n+with Snames;      use Snames;\n \n with GNAT.HTable;\n \n@@ -97,6 +99,17 @@ package body GNAT_CUDA is\n    --    * A procedure that takes care of calling CUDA functions that register\n    --      CUDA_Global procedures with the runtime.\n \n+   procedure Empty_CUDA_Global_Subprograms (Pack_Id : Entity_Id);\n+   --  For all subprograms marked CUDA_Global in Pack_Id, remove declarations\n+   --  and replace statements with a single null statement.\n+   --  This is required because CUDA_Global subprograms could be referring to\n+   --  device-only symbols, which would result in unknown symbols at link time\n+   --  if kept around.\n+   --  We choose to empty CUDA_Global subprograms rather than completely\n+   --  removing them from the package because registering CUDA_Global\n+   --  subprograms with the CUDA runtime on the host requires knowing the\n+   --  subprogram's host-side address.\n+\n    function Get_CUDA_Device_Entities (Pack_Id : Entity_Id) return Elist_Id;\n    --  Returns an Elist of all entities marked with pragma CUDA_Device that\n    --  are declared within package body Pack_Body. Returns No_Elist if Pack_Id\n@@ -153,6 +166,50 @@ package body GNAT_CUDA is\n       Append_Elmt (Kernel, Kernels);\n    end Add_CUDA_Kernel;\n \n+   -----------------------------------\n+   -- Empty_CUDA_Global_Subprograms --\n+   -----------------------------------\n+\n+   procedure Empty_CUDA_Global_Subprograms (Pack_Id : Entity_Id) is\n+      Spec_Id     : constant Node_Id := Corresponding_Spec (Pack_Id);\n+      Kernels     : constant Elist_Id := Get_CUDA_Kernels (Spec_Id);\n+      Kernel_Elm  : Elmt_Id;\n+      Kernel      : Entity_Id;\n+      Kernel_Body : Node_Id;\n+      Null_Body   : Entity_Id;\n+      Loc         : Source_Ptr;\n+   begin\n+      --  It is an error to empty CUDA_Global subprograms when not compiling\n+      --  for the host.\n+      pragma Assert (Debug_Flag_Underscore_C);\n+\n+      if No (Kernels) then\n+         return;\n+      end if;\n+\n+      Kernel_Elm := First_Elmt (Kernels);\n+      while Present (Kernel_Elm) loop\n+         Kernel := Node (Kernel_Elm);\n+         Kernel_Body := Subprogram_Body (Kernel);\n+         Loc := Sloc (Kernel_Body);\n+\n+         Null_Body := Make_Subprogram_Body (Loc,\n+           Specification              => Subprogram_Specification (Kernel),\n+           Declarations               => New_List,\n+           Handled_Statement_Sequence =>\n+             Make_Handled_Sequence_Of_Statements (Loc,\n+               Statements => New_List (Make_Null_Statement (Loc))));\n+\n+         Rewrite (Kernel_Body, Null_Body);\n+\n+         Next_Elmt (Kernel_Elm);\n+      end loop;\n+   end Empty_CUDA_Global_Subprograms;\n+\n+   -------------------------\n+   -- Expand_CUDA_Package --\n+   -------------------------\n+\n    procedure Expand_CUDA_Package (N : Node_Id) is\n    begin\n \n@@ -162,6 +219,13 @@ package body GNAT_CUDA is\n          return;\n       end if;\n \n+      --  Remove the content (both declarations and statements) of CUDA_Global\n+      --  procedures. This is required because CUDA_Global functions could be\n+      --  referencing entities available only on the device, which would result\n+      --  in unknown symbol errors at link time.\n+\n+      Empty_CUDA_Global_Subprograms (N);\n+\n       --  If procedures marked with CUDA_Global have been defined within N,\n       --  we need to register them with the CUDA runtime at program startup.\n       --  This requires multiple declarations and function calls which need"}]}