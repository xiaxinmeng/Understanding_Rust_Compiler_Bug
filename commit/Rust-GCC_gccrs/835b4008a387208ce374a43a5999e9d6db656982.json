{"sha": "835b4008a387208ce374a43a5999e9d6db656982", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM1YjQwMDhhMzg3MjA4Y2UzNzRhNDNhNTk5OWU5ZDZkYjY1Njk4Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2007-01-19T13:45:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-01-19T13:45:54Z"}, "message": "200x-xx-xx Nathan Sidwell <nathan@codesourcery.com> Richard Sandiford <richard@codesourcery.com>\n\ngcc/\n200x-xx-xx  Nathan Sidwell  <nathan@codesourcery.com>\n\t    Richard Sandiford  <richard@codesourcery.com>\n\n\t* config/m68k/m68k.h (M68K_STATIC_CHAIN_REG_NAME): New macro.\n\t(INITIALIZE_TRAMPOLINE): Use STATIC_CHAIN_REGNUM.\n\t(__transfer_from_trampoline): Use M68K_STATIC_CHAIN_REG_NAME.\n\t* config/m68k/m68kelf.h (STATIC_CHAIN_REGNUM): Override.\n\t(M68K_STATIC_CHAIN_REG_NAME): Likewise.\n\t* config/m68k/netbsd-elf.h (M68K_STATIC_CHAIN_REG_NAME): Likewise.\n\ngcc/testsuite/\n200x-xx-xx  Nathan Sidwell  <nathan@codesourcery.com>\n\n\t* gcc.c-torture/execute/nestfunc-7.c: New.\n\nCo-Authored-By: Richard Sandiford <richard@codesourcery.com>\n\nFrom-SVN: r120964", "tree": {"sha": "626342c59723d95509f932686bce47687f06499f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/626342c59723d95509f932686bce47687f06499f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/835b4008a387208ce374a43a5999e9d6db656982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835b4008a387208ce374a43a5999e9d6db656982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/835b4008a387208ce374a43a5999e9d6db656982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835b4008a387208ce374a43a5999e9d6db656982/comments", "author": null, "committer": null, "parents": [{"sha": "b6d2f42e5e45a1db9f2851709c9db33d7b79b0d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d2f42e5e45a1db9f2851709c9db33d7b79b0d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d2f42e5e45a1db9f2851709c9db33d7b79b0d2"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "e35464099ef6be1737bd028e068407214d09c33d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835b4008a387208ce374a43a5999e9d6db656982/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835b4008a387208ce374a43a5999e9d6db656982/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=835b4008a387208ce374a43a5999e9d6db656982", "patch": "@@ -1,3 +1,13 @@\n+2007-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/m68k/m68k.h (M68K_STATIC_CHAIN_REG_NAME): New macro.\n+\t(INITIALIZE_TRAMPOLINE): Use STATIC_CHAIN_REGNUM.\n+\t(__transfer_from_trampoline): Use M68K_STATIC_CHAIN_REG_NAME.\n+\t* config/m68k/m68kelf.h (STATIC_CHAIN_REGNUM): Override.\n+\t(M68K_STATIC_CHAIN_REG_NAME): Likewise.\n+\t* config/m68k/netbsd-elf.h (M68K_STATIC_CHAIN_REG_NAME): Likewise.\n+\n 2007-01-19  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/m68k/m68k.md (adddi_dilshr32): Rename to..."}, {"sha": "c0a3f9e3b04f6fb48d15a2898281a9860be1cb53", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835b4008a387208ce374a43a5999e9d6db656982/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835b4008a387208ce374a43a5999e9d6db656982/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=835b4008a387208ce374a43a5999e9d6db656982", "patch": "@@ -432,6 +432,7 @@ Boston, MA 02110-1301, USA.  */\n #define ARG_POINTER_REGNUM 24\n \n #define STATIC_CHAIN_REGNUM 8\n+#define M68K_STATIC_CHAIN_REG_NAME REGISTER_PREFIX \"a0\"\n \n /* Register in which address to store a structure value\n    is passed to a function.  */\n@@ -684,7 +685,8 @@ extern enum reg_class regno_reg_class[];\n \tjmp FNADDR  */\n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (HImode, TRAMP), GEN_INT(0x207C));\t\\\n+  emit_move_insn (gen_rtx_MEM (HImode, TRAMP),\t\t\t\t\\\n+\t\t  GEN_INT(0x207C + ((STATIC_CHAIN_REGNUM-8) << 9)));\t\\\n   emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 2)), CXT); \\\n   emit_move_insn (gen_rtx_MEM (HImode, plus_constant (TRAMP, 6)),\t\\\n \t\t  GEN_INT(0x4EF9));\t\t\t\t\t\\\n@@ -707,7 +709,7 @@ extern enum reg_class regno_reg_class[];\n void\t\t\t\t\t\t\t\t\\\n __transfer_from_trampoline ()\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n-  register char *a0 asm (\"%a0\");\t\t\t\t\\\n+  register char *a0 asm (M68K_STATIC_CHAIN_REG_NAME);\t\t\\\n   asm (GLOBAL_ASM_OP \"___trampoline\");\t\t\t\t\\\n   asm (\"___trampoline:\");\t\t\t\t\t\\\n   asm volatile (\"move%.l %0,%@\" : : \"m\" (a0[22]));\t\t\\"}, {"sha": "6c26650677d5514085e60e6eada6d1114040f342", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835b4008a387208ce374a43a5999e9d6db656982/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835b4008a387208ce374a43a5999e9d6db656982/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=835b4008a387208ce374a43a5999e9d6db656982", "patch": "@@ -83,6 +83,14 @@ do {\t\t\t\t\t\t\t\t\\\n #undef M68K_STRUCT_VALUE_REGNUM\n #define M68K_STRUCT_VALUE_REGNUM 8\n \n+/* The static chain regnum defaults to a0, but we use that for\n+   structure return, so have to use a1 for the static chain.  */\n+\n+#undef STATIC_CHAIN_REGNUM\n+#define STATIC_CHAIN_REGNUM 9\n+#undef M68K_STATIC_CHAIN_REG_NAME\n+#define M68K_STATIC_CHAIN_REG_NAME REGISTER_PREFIX \"a1\"\n+\n #define ASM_COMMENT_START \"|\"\n \n /* Define how the m68k registers should be numbered for Dwarf output."}, {"sha": "13aca931013a4883fcc99b2bdcb9c6bded4330b6", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835b4008a387208ce374a43a5999e9d6db656982/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835b4008a387208ce374a43a5999e9d6db656982/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=835b4008a387208ce374a43a5999e9d6db656982", "patch": "@@ -233,6 +233,8 @@ while (0)\n \n #undef STATIC_CHAIN_REGNUM\n #define STATIC_CHAIN_REGNUM 9\n+#undef M68K_STATIC_CHAIN_REG_NAME\n+#define M68K_STATIC_CHAIN_REG_NAME REGISTER_PREFIX \"a1\"\n \n \n /* Now to renumber registers for dbx and gdb."}, {"sha": "f10e21081e3a1a0a17c4b6fc8fdaf355fdbc067b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835b4008a387208ce374a43a5999e9d6db656982/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835b4008a387208ce374a43a5999e9d6db656982/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=835b4008a387208ce374a43a5999e9d6db656982", "patch": "@@ -1,3 +1,7 @@\n+2007-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcc.c-torture/execute/nestfunc-7.c: New.\n+\n 2007-01-18  Hui-May Chang  <hm.chang@apple.com>\n \n \t* gcc.c-torture/compile/pr27528.c: Add -fno-pic option."}, {"sha": "5b3d34b8dce90204a82950ff992649e23ae158a1", "filename": "gcc/testsuite/gcc.c-torture/execute/nestfunc-7.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835b4008a387208ce374a43a5999e9d6db656982/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnestfunc-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835b4008a387208ce374a43a5999e9d6db656982/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnestfunc-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnestfunc-7.c?ref=835b4008a387208ce374a43a5999e9d6db656982", "patch": "@@ -0,0 +1,44 @@\n+struct A\n+{\n+  int one;\n+  int two;\n+  int three;\n+  int four;\n+  int five;\n+  int six;\n+};\n+\n+static int test (void)\n+{\n+  int base;\n+\n+  struct A Foo (void)\n+    {\n+      struct A a;\n+\n+      a.one = base + 1;\n+      a.two = base + 2;\n+      a.three = base + 3;\n+      a.four = base + 4;\n+      a.five = base + 5;\n+      a.six = base + 6;\n+\n+      return a;\n+    }\n+\n+  base = 10;\n+  struct A a = Foo ();\n+\n+  return (a.one == 11\n+\t  && a.two == 12\n+\t  && a.three == 13\n+\t  && a.four == 14\n+\t  && a.five == 15\n+\t  && a.six == 16);\n+}\n+\n+int main (void)\n+{\n+  return !test ();\n+}\n+"}]}