{"sha": "c5b4738f5730e10f2f4200c950adebd5f38bba49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzViNDczOGY1NzMwZTEwZjJmNDIwMGM5NTBhZGViZDVmMzhiYmE0OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:44:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-05-02T08:44:41Z"}, "message": "[multiple changes]\n\n2017-05-02  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-trasym.ads: Add comment.\n\n2017-05-02  Bob Duff  <duff@adacore.com>\n\n\t* sem_elab.adb, sem_elab.ads: Minor comment fixes.\n\t* sem_ch4.adb: Minor reformatting.\n\t* s-taprop-linux.adb, s-taspri-posix.ads: Code refactoring.\n\t* s-taspri-posix-noaltstack.ads: Minor refactoring.\n\t* sinput.ads: Minor typo fix.\n\n2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.adb (Discriminated_Size): Moved to sem_util.\n\t* sem_util.ads, sem_util.adb (Discriminated_Size): Predicate moved\n\there from exp_ch9, to recognize objects whose creation requires\n\tdynamic allocation, so that the proper warning can be emitted\n\twhen restriction No_Implicit_Heap_Allocation is in effect.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Use Discriminated_Size\n\tto emit proper warning when an object that requires dynamic\n\tallocation is declared.\n\nFrom-SVN: r247472", "tree": {"sha": "10f42a8f271955c1022165d6892ee9937a88af31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10f42a8f271955c1022165d6892ee9937a88af31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5b4738f5730e10f2f4200c950adebd5f38bba49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b4738f5730e10f2f4200c950adebd5f38bba49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5b4738f5730e10f2f4200c950adebd5f38bba49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5b4738f5730e10f2f4200c950adebd5f38bba49/comments", "author": null, "committer": null, "parents": [{"sha": "05b95f633306a41c792044b1bf47d2ee77791716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b95f633306a41c792044b1bf47d2ee77791716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05b95f633306a41c792044b1bf47d2ee77791716"}], "stats": {"total": 466, "additions": 253, "deletions": 213}, "files": [{"sha": "dfe11024ec51e978b0d406d07a97958e00a04f4a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -1,3 +1,26 @@\n+2017-05-02  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-trasym.ads: Add comment.\n+\n+2017-05-02  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_elab.adb, sem_elab.ads: Minor comment fixes.\n+\t* sem_ch4.adb: Minor reformatting.\n+\t* s-taprop-linux.adb, s-taspri-posix.ads: Code refactoring.\n+\t* s-taspri-posix-noaltstack.ads: Minor refactoring.\n+\t* sinput.ads: Minor typo fix.\n+\n+2017-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Discriminated_Size): Moved to sem_util.\n+\t* sem_util.ads, sem_util.adb (Discriminated_Size): Predicate moved\n+\there from exp_ch9, to recognize objects whose creation requires\n+\tdynamic allocation, so that the proper warning can be emitted\n+\twhen restriction No_Implicit_Heap_Allocation is in effect.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Use Discriminated_Size\n+\tto emit proper warning when an object that requires dynamic\n+\tallocation is declared.\n+\n 2017-05-02  Tristan Gingold  <gingold@adacore.com>\n \n \t* s-trasym.ads, s-trasym.adb (Enable_Cache): New."}, {"sha": "ecca4c3534c59bd5fef0ba09534d993ce91f67ef", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -8725,12 +8725,6 @@ package body Exp_Ch9 is\n       --  to the internal body, for possible inlining later on. The source\n       --  operation is invisible to the back-end and is never actually called.\n \n-      function Discriminated_Size (Comp : Entity_Id) return Boolean;\n-      --  If a component size is not static then a warning will be emitted\n-      --  in Ravenscar or other restricted contexts. When a component is non-\n-      --  static because of a discriminant constraint we can specialize the\n-      --  warning by mentioning discriminants explicitly.\n-\n       procedure Expand_Entry_Declaration (Decl : Node_Id);\n       --  Create the entry barrier and the procedure body for entry declaration\n       --  Decl. All generated subprograms are added to Entry_Bodies_Array.\n@@ -8758,63 +8752,6 @@ package body Exp_Ch9 is\n          end if;\n       end Check_Inlining;\n \n-      ------------------------\n-      -- Discriminated_Size --\n-      ------------------------\n-\n-      function Discriminated_Size (Comp : Entity_Id) return Boolean is\n-         Typ   : constant Entity_Id := Etype (Comp);\n-         Index : Node_Id;\n-\n-         function Non_Static_Bound (Bound : Node_Id) return Boolean;\n-         --  Check whether the bound of an index is non-static and does denote\n-         --  a discriminant, in which case any protected object of the type\n-         --  will have a non-static size.\n-\n-         ----------------------\n-         -- Non_Static_Bound --\n-         ----------------------\n-\n-         function Non_Static_Bound (Bound : Node_Id) return Boolean is\n-         begin\n-            if Is_OK_Static_Expression (Bound) then\n-               return False;\n-\n-            elsif Is_Entity_Name (Bound)\n-              and then Present (Discriminal_Link (Entity (Bound)))\n-            then\n-               return False;\n-\n-            else\n-               return True;\n-            end if;\n-         end Non_Static_Bound;\n-\n-      --  Start of processing for Discriminated_Size\n-\n-      begin\n-         if not Is_Array_Type (Typ) then\n-            return False;\n-         end if;\n-\n-         if Ekind (Typ) = E_Array_Subtype then\n-            Index := First_Index (Typ);\n-            while Present (Index) loop\n-               if Non_Static_Bound (Low_Bound (Index))\n-                 or else Non_Static_Bound (High_Bound (Index))\n-               then\n-                  return False;\n-               end if;\n-\n-               Next_Index (Index);\n-            end loop;\n-\n-            return True;\n-         end if;\n-\n-         return False;\n-      end Discriminated_Size;\n-\n       ---------------------------\n       -- Static_Component_Size --\n       ---------------------------"}, {"sha": "bc49f6828ac02ee8e3deece4b9659c8b550586f4", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 74, "deletions": 126, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -174,6 +174,14 @@ package body System.Task_Primitives.Operations is\n    pragma Import (C,\n      GNAT_pthread_condattr_setup, \"__gnat_pthread_condattr_setup\");\n \n+   type RTS_Lock_Ptr is not null access all RTS_Lock;\n+\n+   function Init_Mutex\n+     (L : RTS_Lock_Ptr; Prio : Any_Priority)\n+     return Interfaces.C.int;\n+   --  Initialize the mutex L. If the locking policy is Ceiling_Locking, then\n+   --  set the ceiling to Prio.\n+\n    -------------------\n    -- Abort_Handler --\n    -------------------\n@@ -260,6 +268,54 @@ package body System.Task_Primitives.Operations is\n \n    function Self return Task_Id renames Specific.Self;\n \n+   ----------------\n+   -- Init_Mutex --\n+   ----------------\n+\n+   function Init_Mutex\n+     (L : RTS_Lock_Ptr; Prio : Any_Priority)\n+     return Interfaces.C.int\n+   is\n+      Mutex_Attr : aliased pthread_mutexattr_t;\n+      Result : Interfaces.C.int;\n+   begin\n+      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n+      pragma Assert (Result = 0 or else Result = ENOMEM);\n+\n+      if Result = ENOMEM then\n+         return ENOMEM;\n+      end if;\n+\n+      if Locking_Policy = 'C' then\n+         if Superuser then\n+            Result := pthread_mutexattr_setprotocol\n+              (Mutex_Attr'Access, PTHREAD_PRIO_PROTECT);\n+            pragma Assert (Result = 0);\n+\n+            Result := pthread_mutexattr_setprioceiling\n+              (Mutex_Attr'Access, Interfaces.C.int (Prio));\n+            pragma Assert (Result = 0);\n+         end if;\n+\n+      elsif Locking_Policy = 'I' then\n+         Result := pthread_mutexattr_setprotocol\n+           (Mutex_Attr'Access, PTHREAD_PRIO_INHERIT);\n+         pragma Assert (Result = 0);\n+      end if;\n+\n+      Result := pthread_mutex_init (L, Mutex_Attr'Access);\n+      pragma Assert (Result = 0 or else Result = ENOMEM);\n+\n+      if Result = ENOMEM then\n+         Result := pthread_mutexattr_destroy (Mutex_Attr'Access);\n+         return ENOMEM;\n+      end if;\n+\n+      Result := pthread_mutexattr_destroy (Mutex_Attr'Access);\n+      pragma Assert (Result = 0);\n+      return 0;\n+   end Init_Mutex;\n+\n    ---------------------\n    -- Initialize_Lock --\n    ---------------------\n@@ -301,92 +357,20 @@ package body System.Task_Primitives.Operations is\n          end;\n \n       else\n-         declare\n-            Attributes : aliased pthread_mutexattr_t;\n-            Result : Interfaces.C.int;\n-\n-         begin\n-            Result := pthread_mutexattr_init (Attributes'Access);\n-            pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-            if Result = ENOMEM then\n-               raise Storage_Error;\n-            end if;\n-\n-            if Locking_Policy = 'C' then\n-               if Superuser then\n-                  Result := pthread_mutexattr_setprotocol\n-                    (Attributes'Access, PTHREAD_PRIO_PROTECT);\n-                  pragma Assert (Result = 0);\n-\n-                  Result := pthread_mutexattr_setprioceiling\n-                     (Attributes'Access, Interfaces.C.int (Prio));\n-                  pragma Assert (Result = 0);\n-               end if;\n-\n-            elsif Locking_Policy = 'I' then\n-               Result := pthread_mutexattr_setprotocol\n-                 (Attributes'Access, PTHREAD_PRIO_INHERIT);\n-               pragma Assert (Result = 0);\n-            end if;\n-\n-            Result := pthread_mutex_init (L.WO'Access, Attributes'Access);\n-            pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-            if Result = ENOMEM then\n-               Result := pthread_mutexattr_destroy (Attributes'Access);\n-               raise Storage_Error with \"Failed to allocate a lock\";\n-            end if;\n-\n-            Result := pthread_mutexattr_destroy (Attributes'Access);\n-            pragma Assert (Result = 0);\n-         end;\n+         if Init_Mutex (L.WO'Access, Prio) = ENOMEM then\n+            raise Storage_Error with \"Failed to allocate a lock\";\n+         end if;\n       end if;\n    end Initialize_Lock;\n \n    procedure Initialize_Lock\n      (L : not null access RTS_Lock; Level : Lock_Level)\n    is\n       pragma Unreferenced (Level);\n-\n-      Attributes : aliased pthread_mutexattr_t;\n-      Result     : Interfaces.C.int;\n-\n    begin\n-      Result := pthread_mutexattr_init (Attributes'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result = ENOMEM then\n-         raise Storage_Error;\n-      end if;\n-\n-      if Locking_Policy = 'C' then\n-         if Superuser then\n-            Result := pthread_mutexattr_setprotocol\n-              (Attributes'Access, PTHREAD_PRIO_PROTECT);\n-            pragma Assert (Result = 0);\n-\n-            Result := pthread_mutexattr_setprioceiling\n-              (Attributes'Access, Interfaces.C.int (System.Any_Priority'Last));\n-            pragma Assert (Result = 0);\n-         end if;\n-\n-      elsif Locking_Policy = 'I' then\n-         Result := pthread_mutexattr_setprotocol\n-           (Attributes'Access, PTHREAD_PRIO_INHERIT);\n-         pragma Assert (Result = 0);\n+      if Init_Mutex (L.all'Access, Any_Priority'Last) = ENOMEM then\n+         raise Storage_Error with \"Failed to allocate a lock\";\n       end if;\n-\n-      Result := pthread_mutex_init (L, Attributes'Access);\n-      pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-      if Result = ENOMEM then\n-         Result := pthread_mutexattr_destroy (Attributes'Access);\n-         raise Storage_Error;\n-      end if;\n-\n-      Result := pthread_mutexattr_destroy (Attributes'Access);\n-      pragma Assert (Result = 0);\n    end Initialize_Lock;\n \n    -------------------\n@@ -919,7 +903,6 @@ package body System.Task_Primitives.Operations is\n    --------------------\n \n    procedure Initialize_TCB (Self_ID : Task_Id; Succeeded : out Boolean) is\n-      Mutex_Attr : aliased pthread_mutexattr_t;\n       Result    : Interfaces.C.int;\n       Cond_Attr : aliased pthread_condattr_t;\n \n@@ -933,47 +916,12 @@ package body System.Task_Primitives.Operations is\n       Self_ID.Common.LL.Thread := Null_Thread_Id;\n \n       if not Single_Lock then\n-         Result := pthread_mutexattr_init (Mutex_Attr'Access);\n-         pragma Assert (Result = 0 or else Result = ENOMEM);\n-\n-         if Result = 0 then\n-            if Locking_Policy = 'C' then\n-               if Superuser then\n-                  Result :=\n-                    pthread_mutexattr_setprotocol\n-                      (Mutex_Attr'Access,\n-                       PTHREAD_PRIO_PROTECT);\n-                  pragma Assert (Result = 0);\n-\n-                  Result :=\n-                    pthread_mutexattr_setprioceiling\n-                      (Mutex_Attr'Access,\n-                       Interfaces.C.int (System.Any_Priority'Last));\n-                  pragma Assert (Result = 0);\n-               end if;\n-\n-            elsif Locking_Policy = 'I' then\n-               Result :=\n-                 pthread_mutexattr_setprotocol\n-                   (Mutex_Attr'Access,\n-                    PTHREAD_PRIO_INHERIT);\n-               pragma Assert (Result = 0);\n-            end if;\n-\n-            Result :=\n-              pthread_mutex_init\n-                (Self_ID.Common.LL.L'Access,\n-                 Mutex_Attr'Access);\n-            pragma Assert (Result = 0 or else Result = ENOMEM);\n-         end if;\n-\n-         if Result /= 0 then\n+         if Init_Mutex\n+           (Self_ID.Common.LL.L'Access, System.Any_Priority'Last) /= 0\n+         then\n             Succeeded := False;\n             return;\n          end if;\n-\n-         Result := pthread_mutexattr_destroy (Mutex_Attr'Access);\n-         pragma Assert (Result = 0);\n       end if;\n \n       Result := pthread_condattr_init (Cond_Attr'Access);\n@@ -1015,7 +963,7 @@ package body System.Task_Primitives.Operations is\n       Priority   : System.Any_Priority;\n       Succeeded  : out Boolean)\n    is\n-      Attributes          : aliased pthread_attr_t;\n+      Thread_Attr         : aliased pthread_attr_t;\n       Adjusted_Stack_Size : Interfaces.C.size_t;\n       Result              : Interfaces.C.int;\n \n@@ -1039,7 +987,7 @@ package body System.Task_Primitives.Operations is\n       Adjusted_Stack_Size :=\n          Interfaces.C.size_t (Stack_Size + Alternate_Stack_Size);\n \n-      Result := pthread_attr_init (Attributes'Access);\n+      Result := pthread_attr_init (Thread_Attr'Access);\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n       if Result /= 0 then\n@@ -1048,12 +996,12 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Result :=\n-        pthread_attr_setstacksize (Attributes'Access, Adjusted_Stack_Size);\n+        pthread_attr_setstacksize (Thread_Attr'Access, Adjusted_Stack_Size);\n       pragma Assert (Result = 0);\n \n       Result :=\n         pthread_attr_setdetachstate\n-          (Attributes'Access, PTHREAD_CREATE_DETACHED);\n+          (Thread_Attr'Access, PTHREAD_CREATE_DETACHED);\n       pragma Assert (Result = 0);\n \n       --  Set the required attributes for the creation of the thread\n@@ -1083,7 +1031,7 @@ package body System.Task_Primitives.Operations is\n             System.OS_Interface.CPU_SET\n               (int (T.Common.Base_CPU), Size, CPU_Set);\n             Result :=\n-              pthread_attr_setaffinity_np (Attributes'Access, Size, CPU_Set);\n+              pthread_attr_setaffinity_np (Thread_Attr'Access, Size, CPU_Set);\n             pragma Assert (Result = 0);\n \n             CPU_FREE (CPU_Set);\n@@ -1094,7 +1042,7 @@ package body System.Task_Primitives.Operations is\n       elsif T.Common.Task_Info /= null then\n          Result :=\n            pthread_attr_setaffinity_np\n-             (Attributes'Access,\n+             (Thread_Attr'Access,\n               CPU_SETSIZE / 8,\n               T.Common.Task_Info.CPU_Affinity'Access);\n          pragma Assert (Result = 0);\n@@ -1131,7 +1079,7 @@ package body System.Task_Primitives.Operations is\n             end loop;\n \n             Result :=\n-              pthread_attr_setaffinity_np (Attributes'Access, Size, CPU_Set);\n+              pthread_attr_setaffinity_np (Thread_Attr'Access, Size, CPU_Set);\n             pragma Assert (Result = 0);\n \n             CPU_FREE (CPU_Set);\n@@ -1151,7 +1099,7 @@ package body System.Task_Primitives.Operations is\n \n       Result := pthread_create\n         (T.Common.LL.Thread'Unrestricted_Access,\n-         Attributes'Access,\n+         Thread_Attr'Access,\n          Thread_Body_Access (Wrapper),\n          To_Address (T));\n \n@@ -1160,14 +1108,14 @@ package body System.Task_Primitives.Operations is\n \n       if Result /= 0 then\n          Succeeded := False;\n-         Result := pthread_attr_destroy (Attributes'Access);\n+         Result := pthread_attr_destroy (Thread_Attr'Access);\n          pragma Assert (Result = 0);\n          return;\n       end if;\n \n       Succeeded := True;\n \n-      Result := pthread_attr_destroy (Attributes'Access);\n+      Result := pthread_attr_destroy (Thread_Attr'Access);\n       pragma Assert (Result = 0);\n \n       Set_Priority (T, Priority);"}, {"sha": "92c22b6926edf45280fe0ded6c18a6be85662429", "filename": "gcc/ada/s-taspri-posix-noaltstack.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix-noaltstack.ads?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -7,7 +7,7 @@\n --                                  S p e c                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2014, AdaCore                     --\n+--                     Copyright (C) 1995-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -73,13 +73,13 @@ package System.Task_Primitives is\n \n private\n \n+   type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n+\n    type Lock is record\n-      WO : aliased System.OS_Interface.pthread_mutex_t;\n+      WO : aliased RTS_Lock;\n       RW : aliased System.OS_Interface.pthread_rwlock_t;\n    end record;\n \n-   type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n-\n    type Suspension_Object is record\n       State : Boolean;\n       pragma Atomic (State);\n@@ -90,7 +90,7 @@ private\n       Waiting : Boolean;\n       --  Flag showing if there is a task already suspended on this object\n \n-      L : aliased System.OS_Interface.pthread_mutex_t;\n+      L : aliased RTS_Lock;\n       --  Protection for ensuring mutual exclusion on the Suspension_Object\n \n       CV : aliased System.OS_Interface.pthread_cond_t;"}, {"sha": "8eb481ffa1433bfa8a96cad46ba11a889cd82972", "filename": "gcc/ada/s-taspri-posix.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fs-taspri-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fs-taspri-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix.ads?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                                                                          --\n --            Copyright (C) 1991-1994, Florida State University             --\n---                     Copyright (C) 1995-2014, AdaCore                     --\n+--                     Copyright (C) 1995-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -72,13 +72,13 @@ package System.Task_Primitives is\n \n private\n \n+   type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n+\n    type Lock is record\n       RW : aliased System.OS_Interface.pthread_rwlock_t;\n-      WO : aliased System.OS_Interface.pthread_mutex_t;\n+      WO : aliased RTS_Lock;\n    end record;\n \n-   type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n-\n    type Suspension_Object is record\n       State : Boolean;\n       pragma Atomic (State);\n@@ -89,7 +89,7 @@ private\n       Waiting : Boolean;\n       --  Flag showing if there is a task already suspended on this object\n \n-      L : aliased System.OS_Interface.pthread_mutex_t;\n+      L : aliased RTS_Lock;\n       --  Protection for ensuring mutual exclusion on the Suspension_Object\n \n       CV : aliased System.OS_Interface.pthread_cond_t;"}, {"sha": "4d3c9221fbd06b36dfc06f02bc745302f837b234", "filename": "gcc/ada/s-trasym.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fs-trasym.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fs-trasym.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-trasym.ads?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -86,6 +86,9 @@ package System.Traceback.Symbolic is\n    --  Read symbolic information from binary files and cache them in memory.\n    --  This will speed up the above functions but will require more memory.\n    --  If Include_Modules is true, shared modules (or DLL) will also be cached.\n-   --  This procedure may do nothing if not supported.\n+   --  This procedure may do nothing if not supported. The profile of this\n+   --  subprogram may change in the future (new parameters can be added with\n+   --  default value), but backward compatibility for direct calls is\n+   --  supported.\n \n end System.Traceback.Symbolic;"}, {"sha": "8f3cf1e6e0e9327e0c315c1bd9d1b926d59c355c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -3133,6 +3133,9 @@ package body Sem_Ch3 is\n \n             when N_Derived_Type_Definition =>\n                Derived_Type_Declaration (T, N, T /= Def_Id);\n+               if Ekind (T) /= E_Void and then Has_Predicates (T) then -- ????\n+                  Set_Has_Predicates (Def_Id);\n+               end if;\n \n             when N_Enumeration_Type_Definition =>\n                Enumeration_Type_Declaration (T, Def);\n@@ -3588,6 +3591,11 @@ package body Sem_Ch3 is\n \n       Prev_Entity : Entity_Id := Empty;\n \n+      procedure Check_Dynamic_Object (Typ : Entity_Id);\n+      --  A library-level object with non-static discriminant constraints may\n+      --  require dynamic allocation. The declaration is illegal if the\n+      --  profile includes the restriction No_Implicit_Heap_Allocations.\n+\n       procedure Check_For_Null_Excluding_Components\n         (Obj_Typ  : Entity_Id;\n          Obj_Decl : Node_Id);\n@@ -3614,6 +3622,45 @@ package body Sem_Ch3 is\n \n       --  Any other relevant delayed aspects on object declarations ???\n \n+      procedure Check_Dynamic_Object (Typ : Entity_Id) is\n+         Comp     : Entity_Id;\n+         Obj_Type : Entity_Id;\n+\n+      begin\n+         Obj_Type := Typ;\n+         if Is_Private_Type (Obj_Type)\n+            and then Present (Full_View (Obj_Type))\n+         then\n+            Obj_Type := Full_View (Obj_Type);\n+         end if;\n+\n+         if Known_Static_Esize (Obj_Type) then\n+            return;\n+         end if;\n+\n+         if Restriction_Active (No_Implicit_Heap_Allocations)\n+           and then Expander_Active\n+           and then Has_Discriminants (Obj_Type)\n+         then\n+            Comp := First_Component (Obj_Type);\n+            while Present (Comp) loop\n+               if Known_Static_Esize (Etype (Comp)) then\n+                  null;\n+\n+               elsif not Discriminated_Size (Comp)\n+                 and then Comes_From_Source (Comp)\n+               then\n+                  Error_Msg_NE (\"component& of non-static size will violate \"\n+                    & \"restriction No_Implicit_Heap_Allocation?\", N, Comp);\n+\n+               elsif Is_Record_Type (Etype (Comp)) then\n+                  Check_Dynamic_Object (Etype (Comp));\n+               end if;\n+               Next_Component (Comp);\n+            end loop;\n+         end if;\n+      end Check_Dynamic_Object;\n+\n       -----------------------------------------\n       -- Check_For_Null_Excluding_Components --\n       -----------------------------------------\n@@ -4068,6 +4115,10 @@ package body Sem_Ch3 is\n             Object_Definition (N));\n       end if;\n \n+      if Is_Library_Level_Entity (Id) then\n+         Check_Dynamic_Object (T);\n+      end if;\n+\n       --  There are no aliased objects in SPARK\n \n       if Aliased_Present (N) then\n@@ -15458,6 +15509,10 @@ package body Sem_Ch3 is\n         and then Has_Non_Trivial_Precondition (Parent_Subp)\n         and then Present (Interfaces (Derived_Type))\n       then\n+\n+         --  Add useful attributes of subprogram before the freeze point,\n+         --  in case freezing is delayed or there are previous errors.\n+\n          Set_Is_Dispatching_Operation (New_Subp);\n \n          declare"}, {"sha": "8a94f3f0b445688244667b1fc8bd3f6dc48aae62", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -4930,7 +4930,8 @@ package body Sem_Ch4 is\n                if Comp = First_Private_Entity (Type_To_Use) then\n                   if Etype (Sel) /= Any_Type then\n \n-                     --  We have a candiate.\n+                     --  We have a candiate\n+\n                      exit;\n \n                   else\n@@ -4993,8 +4994,8 @@ package body Sem_Ch4 is\n          then\n             if Present (Hidden_Comp) then\n                Error_Msg_NE\n-                 (\"invalid reference to private component of object \"\n-                  & \"of type &\", N, Type_To_Use);\n+                 (\"invalid reference to private component of object of type \"\n+                  & \"&\", N, Type_To_Use);\n \n             else\n                Error_Msg_NE\n@@ -6476,13 +6477,14 @@ package body Sem_Ch4 is\n             --  Either the types are compatible, or one operand is universal\n             --  (numeric or null).\n \n-           or else ((In_Instance or else In_Inlined_Body)\n-                     and then\n-                       (First_Subtype (T1) = First_Subtype (Etype (R))\n-                         or else Nkind (R) = N_Null\n-                         or else\n-                           (Is_Numeric_Type (T1)\n-                             and then Is_Universal_Numeric_Type (Etype (R)))))\n+           or else\n+             ((In_Instance or else In_Inlined_Body)\n+                and then\n+                  (First_Subtype (T1) = First_Subtype (Etype (R))\n+                    or else Nkind (R) = N_Null\n+                    or else\n+                      (Is_Numeric_Type (T1)\n+                        and then Is_Universal_Numeric_Type (Etype (R)))))\n \n            --  In Ada 2005, the equality on anonymous access types is declared\n            --  in Standard, and is always visible."}, {"sha": "25c3d4433ff1121d5504d392c98c78ac0e32f064", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -1073,7 +1073,7 @@ package body Sem_Elab is\n \n          --  Indirect call case, info message only in static elaboration\n          --  case, because the attribute reference itself cannot raise an\n-         --  exception. Note that SPARK does not  permit indirect calls.\n+         --  exception. Note that SPARK does not permit indirect calls.\n \n          elsif Access_Case then\n             Elab_Warning (\"\", \"info: access to & during elaboration?$?\", Ent);"}, {"sha": "c8aec6601bccea6e40dc4126c84d1e799c2427ce", "filename": "gcc/ada/sem_elab.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_elab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_elab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.ads?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -174,7 +174,7 @@ package Sem_Elab is\n    --  not be generated (see detailed description in body).\n \n    procedure Check_Task_Activation (N : Node_Id);\n-   --  Tt the point at which tasks are activated in a package body, check\n+   --  At the point at which tasks are activated in a package body, check\n    --  that the bodies of the tasks are elaborated.\n \n end Sem_Elab;"}, {"sha": "52b7ccc3db6d953456d978a59f8d01429fccf964", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -6312,6 +6312,70 @@ package body Sem_Util is\n       return Make_Level_Literal (Type_Access_Level (Etype (Expr)));\n    end Dynamic_Accessibility_Level;\n \n+   ------------------------\n+   -- Discriminated_Size --\n+   ------------------------\n+\n+   function Discriminated_Size (Comp : Entity_Id) return Boolean is\n+      Typ   : constant Entity_Id := Etype (Comp);\n+      Index : Node_Id;\n+\n+      function Non_Static_Bound (Bound : Node_Id) return Boolean;\n+      --  Check whether the bound of an index is non-static and does denote\n+      --  a discriminant, in which case any object of the type (protected\n+      --  or otherwise) will have a non-static size.\n+\n+      ----------------------\n+      -- Non_Static_Bound --\n+      ----------------------\n+\n+      function Non_Static_Bound (Bound : Node_Id) return Boolean is\n+      begin\n+         if Is_OK_Static_Expression (Bound) then\n+            return False;\n+\n+         --  If the bound is given by a discriminant it is non-static\n+         --  (A static constraint replaces the reference with the value).\n+         --  In an protected object the discriminant has been replaced by\n+         --  the corresponding discriminal within the protected operation.\n+\n+         elsif Is_Entity_Name (Bound)\n+           and then\n+              (Ekind (Entity (Bound)) = E_Discriminant\n+                or else Present (Discriminal_Link (Entity (Bound))))\n+         then\n+            return False;\n+\n+         else\n+            return True;\n+         end if;\n+      end Non_Static_Bound;\n+\n+   --  Start of processing for Discriminated_Size\n+\n+   begin\n+      if not Is_Array_Type (Typ) then\n+         return False;\n+      end if;\n+\n+      if Ekind (Typ) = E_Array_Subtype then\n+         Index := First_Index (Typ);\n+         while Present (Index) loop\n+            if Non_Static_Bound (Low_Bound (Index))\n+              or else Non_Static_Bound (High_Bound (Index))\n+            then\n+               return False;\n+            end if;\n+\n+            Next_Index (Index);\n+         end loop;\n+\n+         return True;\n+      end if;\n+\n+      return False;\n+   end Discriminated_Size;\n+\n    -----------------------------------\n    -- Effective_Extra_Accessibility --\n    -----------------------------------"}, {"sha": "74e1841a0ddc33eee323f2c6498d77eef876b5e0", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -601,6 +601,14 @@ package Sem_Util is\n    --  accessibility levels are tracked at runtime (access parameters and Ada\n    --  2012 stand-alone objects).\n \n+   function Discriminated_Size (Comp : Entity_Id) return Boolean;\n+   --  If a component size is not static then a warning will be emitted\n+   --  in Ravenscar or other restricted contexts. When a component is non-\n+   --  static because of a discriminant constraint we can specialize the\n+   --  warning by mentioning discriminants explicitly. This was created for\n+   --  private components of protected objects, but is generally useful when\n+   --  retriction (No_Implicit_Heap_Allocation) is active.\n+\n    function Effective_Extra_Accessibility (Id : Entity_Id) return Entity_Id;\n    --  Same as Einfo.Extra_Accessibility except thtat object renames\n    --  are looked through."}, {"sha": "762335f104c68e789048a73963827fdece28a4a2", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5b4738f5730e10f2f4200c950adebd5f38bba49/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=c5b4738f5730e10f2f4200c950adebd5f38bba49", "patch": "@@ -494,7 +494,7 @@ package Sinput is\n    --  NEL code. Now such programs can of course be compiled in UTF-8 mode,\n    --  but in practice they also compile fine in standard 8-bit mode without\n    --  specifying a character encoding. Since this is common practice, it would\n-   --  be a signficant upwards incompatibility to recognize NEL in 8-bit mode.\n+   --  be a significant upwards incompatibility to recognize NEL in 8-bit mode.\n \n    -----------------\n    -- Subprograms --"}]}