{"sha": "91312b81c9e4740fc485dc941b77c7085bd9f1e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEzMTJiODFjOWU0NzQwZmM0ODVkYzk0MWI3N2M3MDg1YmQ5ZjFlOA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-01-01T20:52:28Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-01-01T20:52:28Z"}, "message": "mmix.md: Update FIXME to not mention define_constants.\n\n\t* config/mmix/mmix.md: Update FIXME to not mention\n\tdefine_constants.\n\t(MMIX_rJ_REGNUM): New define_constants constant.\n\t(\"movqi\", \"movsi\", \"movdi\", \"*movdicc_real_foldable\",\n\t\"*movdicc_real\"): Adjust contraints formatting.\n\t(\"*bCC_foldable\"): Add %+ for P in output format and delete FIXME\n\tfor branch prediction.\n\t(\"*bCC\", \"*bCC_inverted_foldable\", \"*bCC_inverted\"): Add %+ in\n\toutput template.\n\t(\"*call_real\", \"*call_value_real\", \"nonlocal_goto_receiver\",\n\t\"*nonlocal_goto_receiver_expanded\"): Use MMIX_rJ_REGNUM instead of\n\tnumber.  Delete related FIXMEs.\n\t* config/mmix/mmix.h (MMIX_INCOMING_RETURN_ADDRESS_REGNUM): Change\n\tfrom number to MMIX_rJ_REGNUM.\n\t(TARGET_MASK_BRANCH_PREDICT): New.\n\t(TARGET_DEFAULT): Change to TARGET_MASK_BRANCH_PREDICT.\n\t(TARGET_SWITCHES): Update comment.  Correct -mno-toplevel-symbols\n\tvalue.  Add -mbranch-predict and -mno-branch-predict.\n\t(TARGET_VERSION): Drop date.\n\t(ADDITIONAL_REGISTER_NAMES): Use MMIX_rJ_REGNUM, not number.\n\t* config/mmix/mmix.c (mmix_encode_section_info): Correct condition\n\tfor finding out global symbols.\n\t(mmix_asm_output_labelref): Revert condition for global symbol.\n\t(mmix_print_operand): <case '+'>: Emit P for a likely branch.\n\t(mmix_print_operand_punct_valid_p): A '+' is valid.\n\nFrom-SVN: r48448", "tree": {"sha": "7c432fcf032fb7ef1cddcfdfa84a0ffc3577337c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c432fcf032fb7ef1cddcfdfa84a0ffc3577337c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91312b81c9e4740fc485dc941b77c7085bd9f1e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91312b81c9e4740fc485dc941b77c7085bd9f1e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91312b81c9e4740fc485dc941b77c7085bd9f1e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91312b81c9e4740fc485dc941b77c7085bd9f1e8/comments", "author": null, "committer": null, "parents": [{"sha": "db993cf385183100b90295b614707c2c014c96bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db993cf385183100b90295b614707c2c014c96bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db993cf385183100b90295b614707c2c014c96bb"}], "stats": {"total": 122, "additions": 81, "deletions": 41}, "files": [{"sha": "2f80992680143e3b1211b510cfb9eb5e181d4326", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91312b81c9e4740fc485dc941b77c7085bd9f1e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91312b81c9e4740fc485dc941b77c7085bd9f1e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91312b81c9e4740fc485dc941b77c7085bd9f1e8", "patch": "@@ -1,3 +1,31 @@\n+2002-01-01  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.md: Update FIXME to not mention\n+\tdefine_constants.\n+\t(MMIX_rJ_REGNUM): New define_constants constant.\n+\t(\"movqi\", \"movsi\", \"movdi\", \"*movdicc_real_foldable\",\n+\t\"*movdicc_real\"): Adjust contraints formatting.\n+\t(\"*bCC_foldable\"): Add %+ for P in output format and delete FIXME\n+\tfor branch prediction.\n+\t(\"*bCC\", \"*bCC_inverted_foldable\", \"*bCC_inverted\"): Add %+ in\n+\toutput template.\n+\t(\"*call_real\", \"*call_value_real\", \"nonlocal_goto_receiver\",\n+\t\"*nonlocal_goto_receiver_expanded\"): Use MMIX_rJ_REGNUM instead of\n+\tnumber.  Delete related FIXMEs.\n+\t* config/mmix/mmix.h (MMIX_INCOMING_RETURN_ADDRESS_REGNUM): Change\n+\tfrom number to MMIX_rJ_REGNUM.\n+\t(TARGET_MASK_BRANCH_PREDICT): New.\n+\t(TARGET_DEFAULT): Change to TARGET_MASK_BRANCH_PREDICT.\n+\t(TARGET_SWITCHES): Update comment.  Correct -mno-toplevel-symbols\n+\tvalue.  Add -mbranch-predict and -mno-branch-predict.\n+\t(TARGET_VERSION): Drop date.\n+\t(ADDITIONAL_REGISTER_NAMES): Use MMIX_rJ_REGNUM, not number.\n+\t* config/mmix/mmix.c (mmix_encode_section_info): Correct condition\n+\tfor finding out global symbols.\n+\t(mmix_asm_output_labelref): Revert condition for global symbol.\n+\t(mmix_print_operand): <case '+'>: Emit P for a likely branch.\n+\t(mmix_print_operand_punct_valid_p): A '+' is valid.\n+\n 2001-12-31  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (mark_reg_gr_used_mask): Mind HARD_REGNO_NREGS."}, {"sha": "e60a690107e9b75b03640a5780f07f422540e928", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91312b81c9e4740fc485dc941b77c7085bd9f1e8/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91312b81c9e4740fc485dc941b77c7085bd9f1e8/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=91312b81c9e4740fc485dc941b77c7085bd9f1e8", "patch": "@@ -1683,10 +1683,8 @@ mmix_encode_section_info (decl)\n {\n   /* Test for an external declaration, and do nothing if it is one.  */\n   if ((TREE_CODE (decl) == VAR_DECL\n-       && (DECL_EXTERNAL (decl) || TREE_PUBLIC (decl))\n-       && ! TREE_STATIC (decl))\n-      || (TREE_CODE (decl) == FUNCTION_DECL\n-\t  && (DECL_EXTERNAL (decl) || TREE_PUBLIC (decl))))\n+       && (DECL_EXTERNAL (decl) || TREE_PUBLIC (decl)))\n+      || (TREE_CODE (decl) == FUNCTION_DECL && TREE_PUBLIC (decl)))\n     ;\n   else if (DECL_P (decl))\n     {\n@@ -1697,8 +1695,8 @@ mmix_encode_section_info (decl)\n \t Note that this does not work for data that is declared extern and\n \t later defined as static.  If there's code in between, that code\n \t will refer to the extern declaration.  And vice versa.  Until we\n-\t can get rid of mmixal, we have to assume that code is well-behaved\n-\t or come up with a contorted scheme to work around bad code.  */\n+\t can get rid of mmixal, we have to assume that code is\n+\t well-behaved.  */\n \n       const char *str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n       int len = strlen (str);\n@@ -2043,11 +2041,11 @@ mmix_asm_output_labelref (stream, name)\n      FILE *stream;\n      const char *name;\n {\n-  int is_extern = 0;\n+  int is_extern = 1;\n \n   for (; (*name == '@' || *name == '*'); name++)\n     if (*name == '@')\n-      is_extern = 1;\n+      is_extern = 0;\n \n   asm_fprintf (stream, \"%s%U%s\",\n \t       is_extern && TARGET_TOPLEVEL_SYMBOLS ? \":\" : \"\",\n@@ -2112,6 +2110,16 @@ mmix_print_operand (stream, x, code)\n     {\n       /* Unrelated codes are in alphabetic order.  */\n \n+    case '+':\n+      /* For conditional branches, output \"P\" for a probable branch.  */\n+      if (TARGET_BRANCH_PREDICT)\n+\t{\n+\t  x = find_reg_note (current_output_insn, REG_BR_PROB, 0);\n+\t  if (x && INTVAL (XEXP (x, 0)) > REG_BR_PROB_BASE / 2)\n+\t    putc ('P', stream);\n+\t}\n+      return;\n+\n     case 'B':\n       if (GET_CODE (x) != CONST_INT)\n \tfatal_insn (\"MMIX Internal: Expected a CONST_INT, not this\", x);\n@@ -2319,8 +2327,8 @@ int\n mmix_print_operand_punct_valid_p (code)\n      int code ATTRIBUTE_UNUSED;\n {\n-  /* None at the moment.  */\n-  return 0;\n+  /* A '+' is used for branch prediction, similar to other ports.  */\n+  return code == '+';\n }\n \n /* PRINT_OPERAND_ADDRESS.  */"}, {"sha": "b709d2d575138aff8079db57bcb680be3458bad9", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91312b81c9e4740fc485dc941b77c7085bd9f1e8/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91312b81c9e4740fc485dc941b77c7085bd9f1e8/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=91312b81c9e4740fc485dc941b77c7085bd9f1e8", "patch": "@@ -45,7 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #define MMIX_FRAME_POINTER_REGNUM 253\n #define MMIX_STACK_POINTER_REGNUM 254\n #define MMIX_LAST_GENERAL_REGISTER 255\n-#define MMIX_INCOMING_RETURN_ADDRESS_REGNUM 259\n+#define MMIX_INCOMING_RETURN_ADDRESS_REGNUM MMIX_rJ_REGNUM\n #define MMIX_HIMULT_REGNUM 258\n #define MMIX_REMAINDER_REGNUM 260\n #define MMIX_ARG_POINTER_REGNUM 261\n@@ -156,6 +156,7 @@ extern int target_flags;\n #define TARGET_MASK_ZERO_EXTEND 8\n #define TARGET_MASK_KNUTH_DIVISION 16\n #define TARGET_MASK_TOPLEVEL_SYMBOLS 32\n+#define TARGET_MASK_BRANCH_PREDICT 64\n \n /* FIXME: Get rid of this one.  */\n #define TARGET_LIBFUNC (target_flags & TARGET_MASK_LIBFUNCS)\n@@ -164,11 +165,11 @@ extern int target_flags;\n #define TARGET_ZERO_EXTEND (target_flags & TARGET_MASK_ZERO_EXTEND)\n #define TARGET_KNUTH_DIVISION (target_flags & TARGET_MASK_KNUTH_DIVISION)\n #define TARGET_TOPLEVEL_SYMBOLS (target_flags & TARGET_MASK_TOPLEVEL_SYMBOLS)\n+#define TARGET_BRANCH_PREDICT (target_flags & TARGET_MASK_BRANCH_PREDICT)\n \n-#define TARGET_DEFAULT 0\n+#define TARGET_DEFAULT TARGET_MASK_BRANCH_PREDICT\n \n-/* FIXME: Provide a way to *load* the epsilon register.\n-   Kill some of these; preferrably the -mint=* ones.  */\n+/* FIXME: Provide a way to *load* the epsilon register.  */\n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n  {{\"libfuncs\",\t\tTARGET_MASK_LIBFUNCS,\t\t\t\t\\\n    N_(\"For intrinsics library: pass all parameters in registers\")},\t\\\n@@ -189,15 +190,19 @@ extern int target_flags;\n   {\"no-knuthdiv\",\t-TARGET_MASK_KNUTH_DIVISION, \"\"},\t\t\\\n   {\"toplevel-symbols\",\tTARGET_MASK_TOPLEVEL_SYMBOLS,\t\t\t\\\n    N_(\"Prepend global symbols with \\\":\\\" (for use with PREFIX)\")},\t\\\n-  {\"no-toplevel-symbols\", 0,\t\t\t\t\t\t\\\n+  {\"no-toplevel-symbols\", -TARGET_MASK_TOPLEVEL_SYMBOLS,\t\t\\\n    N_(\"Do not provide a default start-address 0x100 of the program\")},\t\\\n   {\"elf\", 0,\t\t\t\t\t\t\t\t\\\n    N_(\"Link to emit program in ELF format (rather than mmo)\")},\t\t\\\n+  {\"branch-predict\",\tTARGET_MASK_BRANCH_PREDICT,\t\t\t\\\n+   N_(\"Use P-mnemonics for branches statically predicted as taken\")},\t\\\n+  {\"no-branch-predict\",\t-TARGET_MASK_BRANCH_PREDICT,\t\t\t\\\n+   N_(\"Don't use P-mnemonics for branches\")},\t\t\t\t\\\n   {\"\",\t\t\tTARGET_DEFAULT, \"\"}}\n \n /* Unfortunately, this must not reference anything in \"mmix.c\".  */\n #define TARGET_VERSION \\\n-  fprintf (stderr, \" (MMIX) 2001-09-01\")\n+  fprintf (stderr, \" (MMIX)\")\n \n #define OVERRIDE_OPTIONS mmix_override_options ()\n \n@@ -1074,7 +1079,7 @@ const_section ()\t\t\t\t\t\t\\\n \n #define ADDITIONAL_REGISTER_NAMES\t\t\t\\\n  {{\"sp\", 254}, {\":sp\", 254}, {\"rD\", 256}, {\"rE\", 257},\t\\\n-  {\"rH\", 258}, {\"rJ\", 259}}\n+  {\"rH\", 258}, {\"rJ\", MMIX_rJ_REGNUM}}\n \n #define PRINT_OPERAND(STREAM, X, CODE) \\\n  mmix_print_operand (STREAM, X, CODE)"}, {"sha": "3998bf4edbf8ea3595ac379abe5806780d552063", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91312b81c9e4740fc485dc941b77c7085bd9f1e8/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91312b81c9e4740fc485dc941b77c7085bd9f1e8/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=91312b81c9e4740fc485dc941b77c7085bd9f1e8", "patch": "@@ -36,13 +36,16 @@\n \n ;; FIXME:s\n ;; - Use new formats; e.g. '{' not '\"*{'.\n-;; - define_constants.\n+\n+(define_constants\n+  [(MMIX_rJ_REGNUM 259)]\n+)\n \n ;; FIXME: Can we remove the reg-to-reg for smaller modes?  Shouldn't they\n ;; be synthesized ok?\n (define_insn \"movqi\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r ,r ,x ,r,r,m,??r\")\n-\t(match_operand:QI 1 \"general_operand\"\t    \"r,LS,K,rI ,x,m,r,n\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r ,r,x ,r,r,m,??r\")\n+\t(match_operand:QI 1 \"general_operand\"\t    \"r,LS,K,rI,x,m,r,n\"))]\n   \"\"\n   \"@\n    SET %0,%1\n@@ -70,7 +73,7 @@\n \n ;; gcc.c-torture/compile/920428-2.c fails if there's no \"n\".\n (define_insn \"movsi\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r ,r ,x,r,r,m,??r\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r ,r,x,r,r,m,??r\")\n \t(match_operand:SI 1 \"general_operand\"\t    \"r,LS,K,r,x,m,r,n\"))]\n   \"\"\n   \"@\n@@ -85,7 +88,7 @@\n \n ;; We assume all \"s\" are addresses.  Does that hold?\n (define_insn \"movdi\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r ,r ,x,r,m ,r,m,r,??r\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r ,r,x,r,m,r,m,r,??r\")\n \t(match_operand:DI 1 \"general_operand\"\t    \"r,LS,K,r,x,I,m,r,s,n\"))]\n   \"\"\n   \"@\n@@ -692,8 +695,8 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \t (match_operator 2 \"mmix_foldable_comparison_operator\"\n \t\t\t [(match_operand 3 \"register_operand\" \"r,r,r,r\")\n \t\t\t  (const_int 0)])\n-\t (match_operand:DI 1 \"mmix_reg_or_8bit_operand\" \"rI, 0  ,rI,GM\")\n-\t (match_operand:DI 4 \"mmix_reg_or_8bit_operand\" \"0  ,rI,GM ,rI\")))]\n+\t (match_operand:DI 1 \"mmix_reg_or_8bit_operand\" \"rI,0 ,rI,GM\")\n+\t (match_operand:DI 4 \"mmix_reg_or_8bit_operand\" \"0 ,rI,GM,rI\")))]\n   \"\"\n   \"@\n    CS%d2 %0,%3,%1\n@@ -703,14 +706,14 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \n (define_insn \"*movdicc_real\"\n   [(set\n-    (match_operand:DI 0 \"register_operand\"\t   \"=r\t,r ,r  ,r\")\n+    (match_operand:DI 0 \"register_operand\"\t   \"=r ,r ,r ,r\")\n     (if_then_else:DI\n      (match_operator\n       2 \"mmix_comparison_operator\"\n-      [(match_operand 3 \"mmix_reg_cc_operand\"\t    \"r\t,r ,r  ,r\")\n+      [(match_operand 3 \"mmix_reg_cc_operand\"\t    \"r ,r ,r ,r\")\n       (const_int 0)])\n-     (match_operand:DI 1 \"mmix_reg_or_8bit_operand\" \"rI, 0 ,rI, GM\")\n-     (match_operand:DI 4 \"mmix_reg_or_8bit_operand\" \"0\t,rI,GM ,rI\")))]\n+     (match_operand:DI 1 \"mmix_reg_or_8bit_operand\" \"rI,0 ,rI,GM\")\n+     (match_operand:DI 4 \"mmix_reg_or_8bit_operand\" \"0 ,rI,GM,rI\")))]\n   \"\"\n   \"@\n    CS%d2 %0,%3,%1\n@@ -925,8 +928,6 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n ;; FIXME: we can emit an unordered-or-*not*-equal compare in one insn, but\n ;; there's no RTL code for it.  Maybe revisit in future.\n \n-;; FIXME: Non/probable branches? Check for REG_BR_PROB note on the jump\n-;; insn and emit 'P' where suitable *and measure*.\n ;; FIXME: Odd/Even matchers?\n (define_insn \"*bCC_foldable\"\n   [(set (pc)\n@@ -937,7 +938,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \t (label_ref (match_operand 0 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"B%d1 %2,%0\")\n+  \"%+B%d1 %2,%0\")\n \n (define_insn \"*bCC\"\n   [(set (pc)\n@@ -948,7 +949,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \t (label_ref (match_operand 0 \"\" \"\"))\n \t (pc)))]\n   \"\"\n-  \"B%d1 %2,%0\")\n+  \"%+B%d1 %2,%0\")\n \n (define_insn \"*bCC_inverted_foldable\"\n   [(set (pc)\n@@ -960,7 +961,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n ;; REVERSIBLE_CC_MODE is checked by mmix_foldable_comparison_operator.\n   \"\"\n-  \"B%D1 %2,%0\")\n+  \"%+B%D1 %2,%0\")\n \n (define_insn \"*bCC_inverted\"\n   [(set (pc)\n@@ -971,7 +972,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \t (pc)\n \t (label_ref (match_operand 0 \"\" \"\"))))]\n   \"REVERSIBLE_CC_MODE (GET_MODE (operands[2]))\"\n-  \"B%D1 %2,%0\")\n+  \"%+B%D1 %2,%0\")\n \f\n (define_expand \"call\"\n   [(parallel [(call (match_operand:QI 0 \"memory_operand\" \"\")\n@@ -1044,8 +1045,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \t  (match_operand:DI 0 \"mmix_symbolic_or_address_operand\" \"s,rU\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n-   ;; 259 is rJ (We can't use the symbolic name here.  FIXME: Yes we can.)\n-   (clobber (reg:DI 259))]\n+   (clobber (reg:DI MMIX_rJ_REGNUM))]\n   \"\"\n   \"@\n    PUSHJ $%p2,%0\n@@ -1057,8 +1057,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n \t       (match_operand:DI 1 \"mmix_symbolic_or_address_operand\" \"s,rU\"))\n \t      (match_operand 2 \"\" \"\")))\n   (use (match_operand 3 \"\" \"\"))\n-  ;; 259 is rJ (We can't use the symbolic name here.  FIXME: Yes we can.)\n-  (clobber (reg:DI 259))]\n+  (clobber (reg:DI MMIX_rJ_REGNUM))]\n   \"\"\n   \"@\n    PUSHJ $%p3,%1\n@@ -1103,8 +1102,8 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n (define_expand \"nonlocal_goto_receiver\"\n   [(parallel [(unspec_volatile [(match_dup 0)] 1)\n \t      (clobber (scratch:DI))\n-\t      (clobber (reg:DI 259))])\n-   (set (reg:DI 259) (match_dup 1))]\n+\t      (clobber (reg:DI MMIX_rJ_REGNUM))])\n+   (set (reg:DI MMIX_rJ_REGNUM) (match_dup 1))]\n   \"\"\n   \"\n {\n@@ -1126,7 +1125,7 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n (define_insn \"*nonlocal_goto_receiver_expanded\"\n   [(unspec_volatile [(match_operand:DI 0 \"address_operand\" \"p\")] 1)\n    (clobber (match_scratch:DI 1 \"=&r\"))\n-   (clobber (reg:DI 259))]\n+   (clobber (reg:DI MMIX_rJ_REGNUM))]\n   \"\"\n   \"GETA $255,0f\\;PUT rJ,$255\\;LDOU $255,%a0\\n\\\n 0: GET %1,rO\\;CMPU %1,%1,$255\\;BNP %1,1f\\;POP 0,0\\n1:\")"}]}