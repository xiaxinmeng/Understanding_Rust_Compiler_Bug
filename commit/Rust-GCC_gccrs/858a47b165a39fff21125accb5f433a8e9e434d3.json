{"sha": "858a47b165a39fff21125accb5f433a8e9e434d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU4YTQ3YjE2NWEzOWZmZjIxMTI1YWNjYjVmNDMzYThlOWU0MzRkMw==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-08-14T11:33:04Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1992-08-14T11:33:04Z"}, "message": "Fix spelling errors in comments.\n\nFrom-SVN: r1825", "tree": {"sha": "5f04d94d766d3a8d6c1b28ed36b61afbe84bf2d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f04d94d766d3a8d6c1b28ed36b61afbe84bf2d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/858a47b165a39fff21125accb5f433a8e9e434d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858a47b165a39fff21125accb5f433a8e9e434d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/858a47b165a39fff21125accb5f433a8e9e434d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858a47b165a39fff21125accb5f433a8e9e434d3/comments", "author": null, "committer": null, "parents": [{"sha": "542bc952ded8003995cd768fe47face48f39c25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/542bc952ded8003995cd768fe47face48f39c25b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/542bc952ded8003995cd768fe47face48f39c25b"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "cdeb1cabe0df2913b2e84c3f4b3a1f79d8290c67", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=858a47b165a39fff21125accb5f433a8e9e434d3", "patch": "@@ -1110,7 +1110,7 @@ pushtag (name, type)\n   /* Create a fake NULL-named TYPE_DECL node whose TREE_TYPE will be the\n      tagged type we just added to the current binding level.  This fake\n      NULL-named TYPE_DECL node helps dwarfout.c to know when it needs\n-     to output a a representation of a tagged type, and it also gives\n+     to output a representation of a tagged type, and it also gives\n      us a convenient place to record the \"scope start\" address for the\n      tagged type.  */\n \n@@ -1246,7 +1246,7 @@ duplicate_decls (newdecl, olddecl)\n \t that isn't actually built in.  */\n       if (!TREE_PUBLIC (newdecl))\n \t{\n-\t  /* If you declare a it as static, the\n+\t  /* If you declare it as static, the\n \t     default definition is overridden.  */\n \t  return 0;\n \t}"}, {"sha": "de3134593e0ef2ccabed0fbbf6898a2b2a439861", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=858a47b165a39fff21125accb5f433a8e9e434d3", "patch": "@@ -4442,7 +4442,7 @@ fold_rtx (x, insn)\n \t}\n \n       /* If this is a narrowing SUBREG and our operand is a REG, see if\n-\t we can find an equivalence for REG that is a arithmetic operation\n+\t we can find an equivalence for REG that is an arithmetic operation\n \t in a wider mode where both operands are paradoxical SUBREGs\n \t from objects of our result mode.  In that case, we couldn't report\n \t an equivalent value for that operation, since we don't know what the"}, {"sha": "09a00397b5a281787fe4efbd8e7aeb61a325e14c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=858a47b165a39fff21125accb5f433a8e9e434d3", "patch": "@@ -440,7 +440,7 @@ rrotate_double (l1, h1, count, prec, lv, hv)\n    CODE is a tree code for a kind of division, one of\n    TRUNC_DIV_EXPR, FLOOR_DIV_EXPR, CEIL_DIV_EXPR, ROUND_DIV_EXPR\n    or EXACT_DIV_EXPR\n-   It controls how the quotient is rounded to a integer.\n+   It controls how the quotient is rounded to an integer.\n    UNS nonzero says do unsigned division.  */\n \n static void"}, {"sha": "ba03ecf5c49cc94bc954af18603ddd4d2aad843a", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=858a47b165a39fff21125accb5f433a8e9e434d3", "patch": "@@ -1719,7 +1719,7 @@ integrate_parm_decls (args, map, arg_vector)\n    LEVEL indicates how far down into the BLOCK tree is the node we are\n    currently traversing.  It is always zero except for recursive calls.\n \n-   MAP, if nonzero, is a pointer to a inline_remap map which indicates how\n+   MAP, if nonzero, is a pointer to an inline_remap map which indicates how\n    registers used in the DECL_RTL field should be remapped.  If it is zero,\n    no mapping is necessary.  */\n "}, {"sha": "51c825b60c356d51a97681f9b1da7e41938aeda4", "filename": "gcc/protoize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=858a47b165a39fff21125accb5f433a8e9e434d3", "patch": "@@ -1441,7 +1441,7 @@ check_aux_info (cond)\n }\n \n /* Given a pointer to the closing right parenthesis for a particular formals\n-   list (in a aux_info file) find the corresponding left parenthesis and\n+   list (in an aux_info file) find the corresponding left parenthesis and\n    return a pointer to it.  */\n \n static const char *"}, {"sha": "845883ad2a1cbe05e33ed38e62d0e98c874808cc", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=858a47b165a39fff21125accb5f433a8e9e434d3", "patch": "@@ -5795,7 +5795,7 @@ delete_output_reload (insn, j, output_reload_insn)\n \n \f\n /* Output reload-insns to reload VALUE into RELOADREG.\n-   VALUE is a autoincrement or autodecrement RTX whose operand\n+   VALUE is an autoincrement or autodecrement RTX whose operand\n    is a register or memory location;\n    so reloading involves incrementing that location.\n "}, {"sha": "eb24d39b57bbf0182716fdd37284545b3fcef68c", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=858a47b165a39fff21125accb5f433a8e9e434d3", "patch": "@@ -3856,7 +3856,7 @@ expand_end_case (orig_index)\n \t  emit_label (table_label);\n \n \t  /* This would be a lot nicer if CASE_VECTOR_PC_RELATIVE\n-\t     were an expression, instead of a an #ifdef/#ifndef.  */\n+\t     were an expression, instead of an #ifdef/#ifndef.  */\n \t  if (\n #ifdef CASE_VECTOR_PC_RELATIVE\n \t      1 ||"}, {"sha": "18d3c528fef51d12c9054de8430e4fdc1ebb842a", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=858a47b165a39fff21125accb5f433a8e9e434d3", "patch": "@@ -949,7 +949,7 @@ copy_node (node)\n       break;\n \n     case 'r':  /* a reference */\n-    case 'e':  /* a expression */\n+    case 'e':  /* an expression */\n     case 's':  /* an expression with side effects */\n     case '<':  /* a comparison expression */\n     case '1':  /* a unary arithmetic expression */"}, {"sha": "5877f6240a1c9c19d31c33f3449340b800d31591", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858a47b165a39fff21125accb5f433a8e9e434d3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=858a47b165a39fff21125accb5f433a8e9e434d3", "patch": "@@ -236,7 +236,7 @@ struct tree_common\n \n /* In a VAR_DECL or FUNCTION_DECL,\n    nonzero means name is to be accessible from outside this module.\n-   In an identifier node, nonzero means a external declaration\n+   In an identifier node, nonzero means an external declaration\n    accessible from outside this module was previously seen\n    for this name in an inner scope.  */\n #define TREE_PUBLIC(NODE) ((NODE)->common.public_flag)"}]}