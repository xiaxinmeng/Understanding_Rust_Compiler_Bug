{"sha": "06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZjOWZkOTdiZjNkODZhMDhlYWRjYWRiMWJjNTljYjM5MjExNmQxNg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-10T15:47:14Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-10T18:10:57Z"}, "message": "Support LoopLabels and break to label.\n\nThis allows for the Rust refernece example for loop labels to be compiled.\n\nFixes #107", "tree": {"sha": "a74de9189504af72dff442103b5a323c7a74b48b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a74de9189504af72dff442103b5a323c7a74b48b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f10e695fc508c472c77e968e644f710806f82f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10e695fc508c472c77e968e644f710806f82f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10e695fc508c472c77e968e644f710806f82f54"}], "stats": {"total": 104, "additions": 97, "deletions": 7}, "files": [{"sha": "8a74a05daa0e4fa23bdf95860884c78c2c5bff5c", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "patch": "@@ -162,6 +162,21 @@ class Context\n     return true;\n   }\n \n+  void insert_label_decl (HirId id, ::Blabel *label)\n+  {\n+    compiled_labels[id] = label;\n+  }\n+\n+  bool lookup_label_decl (HirId id, ::Blabel **label)\n+  {\n+    auto it = compiled_labels.find (id);\n+    if (it == compiled_labels.end ())\n+      return false;\n+\n+    *label = it->second;\n+    return true;\n+  }\n+\n   void push_fn (::Bfunction *fn, ::Bvariable *ret_addr)\n   {\n     fn_stack.push_back (fncontext{fn, ret_addr});\n@@ -205,6 +220,7 @@ class Context\n   std::map<HirId, ::Btype *> compiled_type_map;\n   std::map<HirId, ::Bfunction *> compiled_fn_map;\n   std::map<HirId, ::Bexpression *> compiled_consts;\n+  std::map<HirId, ::Blabel *> compiled_labels;\n   std::vector< ::std::vector<Bstatement *> > statements;\n   std::vector< ::Bblock *> scope_stack;\n "}, {"sha": "189118b01038385adfa7bbf14ab35960381f8797", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "patch": "@@ -587,6 +587,20 @@ class CompileExpr : public HIRCompileBase\n   void visit (HIR::LoopExpr &expr)\n   {\n     fncontext fnctx = ctx->peek_fn ();\n+    if (expr.has_loop_label ())\n+      {\n+\tHIR::LoopLabel &loop_label = expr.get_loop_label ();\n+\tBlabel *label\n+\t  = ctx->get_backend ()->label (fnctx.fndecl,\n+\t\t\t\t\tloop_label.get_lifetime ().get_name (),\n+\t\t\t\t\tloop_label.get_locus ());\n+\tBstatement *label_decl\n+\t  = ctx->get_backend ()->label_definition_statement (label);\n+\tctx->add_statement (label_decl);\n+\tctx->insert_label_decl (\n+\t  loop_label.get_lifetime ().get_mappings ().get_hirid (), label);\n+      }\n+\n     Bblock *code_block\n       = CompileBlock::compile (expr.get_loop_block ().get (), ctx, nullptr);\n     Bexpression *loop_expr\n@@ -598,13 +612,51 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::BreakExpr &expr)\n   {\n-    fncontext fnctx = ctx->peek_fn ();\n-    Bexpression *exit_expr = ctx->get_backend ()->exit_expression (\n-      ctx->get_backend ()->boolean_constant_expression (true),\n-      expr.get_locus ());\n-    Bstatement *break_stmt\n-      = ctx->get_backend ()->expression_statement (fnctx.fndecl, exit_expr);\n-    ctx->add_statement (break_stmt);\n+    if (expr.has_label ())\n+      {\n+\tNodeId resolved_node_id = UNKNOWN_NODEID;\n+\tif (!ctx->get_resolver ()->lookup_resolved_label (\n+\t      expr.get_label ().get_mappings ().get_nodeid (),\n+\t      &resolved_node_id))\n+\t  {\n+\t    rust_error_at (\n+\t      expr.get_label ().get_locus (),\n+\t      \"failed to resolve compiled label for label %s\",\n+\t      expr.get_label ().get_mappings ().as_string ().c_str ());\n+\t    return;\n+\t  }\n+\n+\tHirId ref = UNKNOWN_HIRID;\n+\tif (!ctx->get_mappings ()->lookup_node_to_hir (\n+\t      expr.get_mappings ().get_crate_num (), resolved_node_id, &ref))\n+\t  {\n+\t    rust_fatal_error (expr.get_locus (),\n+\t\t\t      \"reverse lookup label failure\");\n+\t    return;\n+\t  }\n+\n+\tBlabel *label = nullptr;\n+\tif (!ctx->lookup_label_decl (ref, &label))\n+\t  {\n+\t    rust_error_at (expr.get_label ().get_locus (),\n+\t\t\t   \"failed to lookup compiled label\");\n+\t    return;\n+\t  }\n+\n+\tBstatement *goto_label\n+\t  = ctx->get_backend ()->goto_statement (label, expr.get_locus ());\n+\tctx->add_statement (goto_label);\n+      }\n+    else\n+      {\n+\tfncontext fnctx = ctx->peek_fn ();\n+\tBexpression *exit_expr = ctx->get_backend ()->exit_expression (\n+\t  ctx->get_backend ()->boolean_constant_expression (true),\n+\t  expr.get_locus ());\n+\tBstatement *break_stmt\n+\t  = ctx->get_backend ()->expression_statement (fnctx.fndecl, exit_expr);\n+\tctx->add_statement (break_stmt);\n+      }\n   }\n \n private:"}, {"sha": "beeff8758f1d8f9d249e7688464d1e1468e06520", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "patch": "@@ -264,6 +264,8 @@ class ASTLoweringBase : public AST::ASTVisitor\n     Analysis::NodeMapping mapping (crate_num, lifetime.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+    mappings->insert_node_to_hir (mapping.get_crate_num (),\n+\t\t\t\t  mapping.get_nodeid (), mapping.get_hirid ());\n \n     return HIR::Lifetime (mapping, type, lifetime.get_lifetime_name (),\n \t\t\t  lifetime.get_locus ());\n@@ -277,6 +279,8 @@ class ASTLoweringBase : public AST::ASTVisitor\n     Analysis::NodeMapping mapping (crate_num, loop_label.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+    mappings->insert_node_to_hir (mapping.get_crate_num (),\n+\t\t\t\t  mapping.get_nodeid (), mapping.get_hirid ());\n \n     return HIR::LoopLabel (mapping, std::move (life), loop_label.get_locus ());\n   }"}, {"sha": "e92e0590a4626ffed93a2c1340641de444bf9b7a", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "patch": "@@ -3284,6 +3284,8 @@ class LoopLabel /*: public Node*/\n   Location get_locus () const { return locus; }\n \n   Analysis::NodeMapping &get_mappings () { return mappings; }\n+\n+  Lifetime &get_lifetime () { return label; }\n };\n \n // Base loop expression HIR node - aka LoopExpr\n@@ -3340,6 +3342,8 @@ class BaseLoopExpr : public ExprWithBlock\n   Location get_locus_slow () const override { return get_locus (); }\n \n   std::unique_ptr<HIR::BlockExpr> &get_loop_block () { return loop_block; };\n+\n+  LoopLabel &get_loop_label () { return loop_label; }\n };\n \n // 'Loop' expression (i.e. the infinite loop) HIR node"}, {"sha": "4a1d4f7c75e439d104b619a665accaeaf855dec9", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "patch": "@@ -460,6 +460,12 @@ Mappings::walk_local_defids_for_crate (CrateNum crateNum,\n     }\n }\n \n+void\n+Mappings::insert_node_to_hir (CrateNum crate, NodeId id, HirId ref)\n+{\n+  nodeIdToHirMappings[crate][id] = ref;\n+}\n+\n bool\n Mappings::lookup_node_to_hir (CrateNum crate, NodeId id, HirId *ref)\n {"}, {"sha": "b7dbd456ea2828dcd5a16e605f25250d95638f0c", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "patch": "@@ -136,6 +136,7 @@ class Mappings\n   void walk_local_defids_for_crate (CrateNum crateNum,\n \t\t\t\t    std::function<bool (HIR::Item *)> cb);\n \n+  void insert_node_to_hir (CrateNum crate, NodeId id, HirId ref);\n   bool lookup_node_to_hir (CrateNum crate, NodeId id, HirId *ref);\n \n   void insert_location (CrateNum crate, HirId id, Location locus);"}, {"sha": "f7b59357aeb110152feaa2d42ca6deb937402248", "filename": "gcc/testsuite/rust.test/compilable/loop4.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06c9fd97bf3d86a08eadcadb1bc59cb392116d16/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop4.rs?ref=06c9fd97bf3d86a08eadcadb1bc59cb392116d16", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    'outer: loop {\n+        'inner: loop {\n+            break 'outer;\n+        }\n+    }\n+}"}]}