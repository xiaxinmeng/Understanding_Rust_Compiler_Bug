{"sha": "b50a024db75bd384ceb349b5a03def80b8d3db69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwYTAyNGRiNzViZDM4NGNlYjM0OWI1YTAzZGVmODBiOGQzZGI2OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-31T13:19:01Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-31T13:19:01Z"}, "message": "(expand_asm_operands): Properly handle output that can't be directly\nwritten into.\n\nFrom-SVN: r9272", "tree": {"sha": "13ab49a55286f1a07ebebf8ce08f3997f0cda08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ab49a55286f1a07ebebf8ce08f3997f0cda08c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b50a024db75bd384ceb349b5a03def80b8d3db69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50a024db75bd384ceb349b5a03def80b8d3db69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50a024db75bd384ceb349b5a03def80b8d3db69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50a024db75bd384ceb349b5a03def80b8d3db69/comments", "author": null, "committer": null, "parents": [{"sha": "d161fae48b71e59d3672890728b85f678c0b788b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d161fae48b71e59d3672890728b85f678c0b788b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d161fae48b71e59d3672890728b85f678c0b788b"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "13077810e32f46e609cb1499d136e98d0bbf3890", "filename": "gcc/stmt.c", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50a024db75bd384ceb349b5a03def80b8d3db69/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50a024db75bd384ceb349b5a03def80b8d3db69/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b50a024db75bd384ceb349b5a03def80b8d3db69", "patch": "@@ -1402,6 +1402,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   for (i = 0, tail = outputs; tail; tail = TREE_CHAIN (tail), i++)\n     {\n       tree val = TREE_VALUE (tail);\n+      tree type = TREE_TYPE (val);\n       tree val1;\n       int j;\n       int found_equal;\n@@ -1429,31 +1430,29 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t  return;\n \t}\n \n-      /* If an output operand is not a variable or indirect ref,\n-\t or a part of one,\n-\t create a SAVE_EXPR which is a pseudo-reg\n-\t to act as an intermediate temporary.\n-\t Make the asm insn write into that, then copy it to\n-\t the real output operand.  */\n+      /* If an output operand is not a decl or indirect ref,\n+\t make a temporary to act as an intermediate.   Make the asm insn\n+\t write into that, then our caller will copy it to the real output\n+\t operand.  Likewise for promoted variables.  */\n \n-      while (TREE_CODE (val) == COMPONENT_REF\n-\t     || TREE_CODE (val) == ARRAY_REF)\n-\tval = TREE_OPERAND (val, 0);\n-\n-      if (TREE_CODE (val) != VAR_DECL\n-\t  && TREE_CODE (val) != PARM_DECL\n-\t  && TREE_CODE (val) != INDIRECT_REF)\n+      if (TREE_CODE (val) == INDIRECT_REF\n+\t  || (TREE_CODE_CLASS (TREE_CODE (val)) == 'd'\n+\t      && ! (GET_CODE (DECL_RTL (val)) == REG\n+\t\t    && GET_MODE (DECL_RTL (val)) != TYPE_MODE (type))))\n+\toutput_rtx[i] = expand_expr (TREE_VALUE (tail), NULL_RTX, VOIDmode, 0);\n+      else\n \t{\n-\t  TREE_VALUE (tail) = save_expr (TREE_VALUE (tail));\n-\t  /* If it's a constant, print error now so don't crash later.  */\n-\t  if (TREE_CODE (TREE_VALUE (tail)) != SAVE_EXPR)\n+\t  if (TYPE_MODE (type) == BLKmode)\n \t    {\n-\t      error (\"invalid output in `asm'\");\n-\t      return;\n+\t      output_rtx[i] = assign_stack_temp (BLKmode,\n+\t\t\t\t\t\t int_size_in_bytes (type), 0);\n+\t      MEM_IN_STRUCT_P (output_rtx[i]) = AGGREGATE_TYPE_P (type);\n \t    }\n-\t}\n+\t  else\n+\t    output_rtx[i] = gen_reg_rtx (TYPE_MODE (type));\n \n-      output_rtx[i] = expand_expr (TREE_VALUE (tail), NULL_RTX, VOIDmode, 0);\n+\t  TREE_VALUE (tail) = make_tree (type, output_rtx[i]);\n+\t}\n     }\n \n   if (ninputs + noutputs > MAX_RECOG_OPERANDS)"}]}