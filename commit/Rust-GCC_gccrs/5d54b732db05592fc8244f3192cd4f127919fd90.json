{"sha": "5d54b732db05592fc8244f3192cd4f127919fd90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1NGI3MzJkYjA1NTkyZmM4MjQ0ZjMxOTJjZDRmMTI3OTE5ZmQ5MA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-03-10T03:23:28Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2006-03-10T03:23:28Z"}, "message": "re PR libfortran/26499 (gfortran - End of File incorrectly positioned after binary I/O.)\n\n2006-03-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/26499\n\t* gfortran.dg/write_back.f: New test.\n\t* gfortran.dg/write_rewind_1.f: New test.\n\t* gfortran.dg/write_rewind_2.f: New test.\n\nFrom-SVN: r111925", "tree": {"sha": "94c4b26fd5682c3d05dd153b045e9f3f01a0489d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94c4b26fd5682c3d05dd153b045e9f3f01a0489d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d54b732db05592fc8244f3192cd4f127919fd90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d54b732db05592fc8244f3192cd4f127919fd90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d54b732db05592fc8244f3192cd4f127919fd90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d54b732db05592fc8244f3192cd4f127919fd90/comments", "author": null, "committer": null, "parents": [{"sha": "99c6db71de9460b2dac78b31e91ca279f6a50865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c6db71de9460b2dac78b31e91ca279f6a50865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c6db71de9460b2dac78b31e91ca279f6a50865"}], "stats": {"total": 221, "additions": 111, "deletions": 110}, "files": [{"sha": "d8890a0ba415a49adbe373bbf6c2b264ad84a9a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 110, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d54b732db05592fc8244f3192cd4f127919fd90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d54b732db05592fc8244f3192cd4f127919fd90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d54b732db05592fc8244f3192cd4f127919fd90", "patch": "@@ -1,106 +1,17 @@\n-2006-03-09  Eric Christopher  <echristo@apple.com>\n-\n-\t* gcc.c-torture/compile/20060309-1.c: New.\n-\n-2006-03-09  Erik Edelmann  <eedelman@gcc.gnu.org>\n-\n-\t* gfortran.dg/allocatable_dummy_1.f90: Test for functions returning\n-\tarrays too.\n-\n-2006-03-09  Diego Novillo  <dnovillo@redhat.com>\n-\n-        * gcc/testsuite/g++.dg/gomp: New directory.\n-        * gcc/testsuite/g++.dg/dg.exp: Gather tests in gomp/.\n-\n-2006-03-09  Roger Sayle  <roger@eyesopen.com>\n-\t    Eric Botcazou  <ebotcazou@libertysurf.fr>\n-\n-\tPR middle-end/26561\n-\t* gcc.c-torture/execute/divcmp-5.c: New test case.\n-\n-2006-03-09 Paul Thomas <pault@gcc.gnu.org>\n-\n-\t* PR fortran/26257\n-\tgfortran.dg/auto_char_len_3.f90: New test\n-\n-2006-03-08  Jeff Law  <law@redhat.com>\n-\n-\t* gcc.dg/tree-ssa/20030730-1.c: No longer expected to fail.\n-\t* gcc.dg/tree-ssa/20030730-2.c: No longer expected to fail.\n-\t* g++.dg/tree-ssa/pr26406.C: New test.\n-\n-2006-03-07  Jeff Law  <law@redhat.com>\n-\n-\t* gcc.dg/tree-ssa/20030730-1.c: Temporarily xfail.\n-\t* gcc.dg/tree-ssa/20030730-2.c: Likewise.\n-\t* gcc.dg/tree-ssa/20030807-2.c: Likewise.\n-\n-2006-03-07  Richard Guenther  <rguenther@suse.de>\n-\n-\tPR tree-optimization/26587\n-\t* gcc.dg/torture/pr26587.c: New testcase.\n-\n-2006-03-06  Paul Thomas  <pault@gcc.gnu.org>\n-            Erik Edelmann  <eedelman@gcc.gnu.org>\n-\n-\t* gfortran.dg/allocatable_dummy_1.f90: Take into account that\n-\tINTENT(OUT) arguments shall be deallocated upon procedure entry.\n-\n-2006-03-06  Paul Thomas  <pault@gcc.gnu.org>\n-\n-\tPR fortran/26107\n-\t* pure_dummy_length_1.f90: New test.\n-\n-\tPR fortran/19546\n-\t* gfortran.dg/parent_result_ref_1.f90: New test.\n-\t* gfortran.dg/parent_result_ref_2.f90: New test.\n-\t* gfortran.dg/parent_result_ref_3.f90: New test.\n-\t* gfortran.dg/parent_result_ref_4.f90: New test.\n-\n-2006-03-06  Steven G. Kargl  <kargls@comcast.net>\n-\n-\t* gfortran.dg/verify_2.f90: New test.\n-\n-2006-03-06  Steven G. Kargl  <kargls@comcast.net>\n-\n-\t* gfortran.dg/equiv_1.f90: Replace tab(s) with spaces.\n-\t* gfortran.dg/arrayio_1.f90: Ditto.\n-\t* gfortran.dg/pr25603.f: Ditto.\n-\t* gfortran.dg/assumed_dummy_2.f90: Ditto.\n-\t* gfortran.dg/equiv_2.f90: Ditto.\n-\t* gfortran.dg/arrayio_2.f90: Ditto.\n-\t* gfortran.dg/namelist_14.f90: Ditto.\n-\t* gfortran.dg/g77/cpp6.f: Ditto.\n-\t* gfortran.dg/g77/cpp5inc.h: Ditto.\n-\t* gfortran.dg/g77/cpp5.F: Ditto.\n-\t* gfortran.dg/g77/cpp5.h: Ditto.\n-\t* gfortran.dg/namelist_15.f90: Ditto.\n-\t* gfortran.dg/badline.f: Ditto.\n-\t* gfortran.dg/sibling_dummy_procedure_1.f90: Ditto.\n-\t* gfortran.dg/sibling_dummy_procedure_2.f90: Ditto.\n-\t* gfortran.dg/backspace_6.f: Ditto.\n-\t* gfortran.dg/altreturn_1.f90: Ditto.\n-\t* gfortran.dg/entry_4.f90: Ditto.\n-\t* gfortran.dg/implicit_5.f90: Ditto.\n-\n-2006-03-06  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n-\n-\tPR c++/15759\n-\t* g++.dg/other/default4.C: New test.\n-\n-2006-03-05  Erik Edelmann  <eedelman@gcc.gnu.org>\n-\n-\tPR fortran/16136\n-\t* allocatable_dummy_1.f90: New.\n-\t* allocatable_dummy_2.f90: New.\n+2006-03-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n+\tPR libgfortran/26499\n+\t* gfortran.dg/write_back.f: New test.\n+\t* gfortran.dg/write_rewind_1.f: New test.\n+\t* gfortran.dg/write_rewind_2.f: New test.\n+\t\n 2006-03-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/26554\n \t* gfortran.dg/read_logical.f90: New test.\n \n 2006-03-04  Laurent GUERBY <laurent@guerby.net>\n-\n+\t\n \t* ada/acats/norun.lst: cdd2a03 now passes.\n \n 2006-03-04  Andrew Pinski  <pinskia@physics.uc.edu>\n@@ -174,7 +85,7 @@\n \n 2006-03-01  Paul Thomas  <pault@gcc.gnu.org>\n \n-\t* gfortran.dg/logical_dot_product.f90: New test.\n+\t* gfortran.dg/logical_dot_product.f90: New test. \n \n \tPR fortran/26393\n \t* gfortran.dg/used_interface_ref.f90: New test.\n@@ -262,7 +173,7 @@\n 2006-02-26  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimizations/26359\n-\t* gcc.dg/vect/vect.exp: Compile tests prefixed with \"dump-tree-dceloop\"\n+\t* gcc.dg/vect/vect.exp: Compile tests prefixed with \"dump-tree-dceloop\" \n \twith -fdump-tree-dceloop-details.\n \t* gcc.dg/vect/dump-tree-dceloop-pr26359.c: New test.\n \n@@ -359,7 +270,7 @@\n \tPR fortran/26201\n \t* gfortran.dg/convert_1.f90: New.\n \n-2006-02-19  Paul Thomas  <pault@gcc.gnu.org>\n+2005-02-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25054\n \t* gfortran.dg/namelist_5.f90: New test.\n@@ -455,7 +366,7 @@\n \tvect-reduc-pattern-1a.c, vect-reduc-pattern-1b.c and\n \tvect-reduc-pattern-1c.c\n \n-2006-02-16  Paul Thomas  <pault@gcc.gnu.org>\n+2005-02-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/24557\n         * gfortran.dg/assumed_charlen_needed_1.f90: New test.\n@@ -552,7 +463,7 @@\n 2006-02-13  Josh Conner  <jconner@apple.com>\n \n \tPR target/25376\n-\t* gcc.dg/pr25376.c: New test.\n+\t* gcc.dg/pr25376.c: New test.\t\n \n \t* gcc.c-torture/compile/pr23237.c: Only compile test -- don't\n \tassemble.\n@@ -716,7 +627,7 @@\n \t* gcc.dg/tree-ssa/pr21086.c: Likewise\n \t* gcc.dg/tree-ssa/pr21959.c: Likewise\n \t* gcc.dg/tree-ssa/vrp21.c: Likewise\n-\t* gcc.dg/tree-ssa/vrp04.c: Likewise\n+\t* gcc.dg/tree-ssa/vrp04.c: Likewise \n \t* gcc.dg/tree-ssa/pr25485.c: Likewise\n \t* gcc.dg/tree-ssa/pr22026.c: Likewise\n \t* gcc.dg/tree-ssa/vrp22.c: Likewise\n@@ -769,7 +680,7 @@\n \t* g++.old-deja/g++.pt/ttp26.C: Likewise.\n \t* g++.old-deja/g++.pt/ttp36.C: Likewise.\n \n-2006-02-06  Thomas Koenig  <Thomas.Koenig@online.de>\n+2005-02-06  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/23815\n \t* unf_io_convert_4.f90:  New test.\n@@ -822,7 +733,7 @@\n \t* g++.old-deja/g++.brendan/ptolemy1.C (InterpTableEntry::name):\n \tChange type to const char*.\n \t* g++.old-deja/g++.brendan/ptolemy2.C (InterpTableEntry::name):\n-\tLikewise.\n+\tLikewise. \n \t* g++.old-deja/g++.jason/default2.C (bar::memberfunction): Change\n \tsecond parameter type to const char*.\n \t* g++.old-deja/g++.jason/opeq.C (X::X): Likewise.\n@@ -855,7 +766,7 @@\n \t* g++.old-deja/g++.mike/p811.C (X::stringify): Match for\n \tdeprecated conversion warning.\n \t* g++.old-deja/g++.other/init15.C (A::name): Change type to const\n-\tchar*.\n+\tchar*. \n \t* g++.old-deja/g++.other/inline12.C: Adjust for const correctness.\n \t* g++.old-deja/g++.other/sibcall1.C (foo): Likewise.\n \t* g++.old-deja/g++.pt/explicit8.C: Likewise.\n@@ -935,7 +846,7 @@\n \t* gcc.target/i386/sselibm-4.c: Likewise.\n \t* gcc.target/i386/sselibm-5.c: Likewise.\n \n-2006-01-30  Erik Edelmann  <eedelman@gcc.gnu.org>\n+2005-01-30  Erik Edelmann  <eedelman@gcc.gnu.org>\n \n \tPR fortran/24266\n \t* gfortran.dg/arrayio_derived_2.f90: New.\n@@ -1030,7 +941,7 @@\n \n \t* gcc.dg/pragma-re-4.c: New test.\n \n-2006-01-27  Paul Thomas  <pault@gcc.gnu.org>\n+2005-01-27  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25964\n \t* gfortran.dg/assumed_size_refs_3.f90: New test.\n@@ -1048,7 +959,7 @@\n \t* ada/acats/tests/c9/c97305c.ada: Likewise.\n \t* ada/acats/tests/c9/c99004a.ada: Likewise.\n \n-2006-01-26  Paul Thomas  <pault@gcc.gnu.org>\n+2005-01-26  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25964\n \t* gfortran.dg/global_references_2.f90: New test.\n@@ -1171,7 +1082,7 @@\n \t* gcc.dg/torture/pr25654.c: New testcase.\n \t* gcc.target/i386/pr25654.c: Likewise.\n \n-2006-01-23  Paul Thomas  <pault@gcc.gnu.org>\n+2005-01-23  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25901\n \t* gfortran.dg/internal references_2.f90: New test.\n@@ -1201,7 +1112,7 @@\n \tPR c++/25858\n \t* g++.dg/template/crash44.C: New test.\n \n-2006-01-21  Paul Thomas  <pault@gcc.gnu.org>\n+2005-01-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/25124\n \tPR fortran/25625"}, {"sha": "b9e21afcceea4079a8b123a1b3e142ceaa14ef72", "filename": "gcc/testsuite/gfortran.dg/write_back.f", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d54b732db05592fc8244f3192cd4f127919fd90/gcc%2Ftestsuite%2Fgfortran.dg%2Fwrite_back.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d54b732db05592fc8244f3192cd4f127919fd90/gcc%2Ftestsuite%2Fgfortran.dg%2Fwrite_back.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwrite_back.f?ref=5d54b732db05592fc8244f3192cd4f127919fd90", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! PR 26499 : Positioning of EOF after backspaces and write.\n+! This test verifies that the last write truncates the file.\n+! Submitted by Jerry DeLisle <jvdelisle@verizon.net>.\n+      program test\n+      integer at,eof\n+      dimension idata(5)\n+      open(unit=11,form='unformatted')\n+      write(11)idata\n+      write(11)idata\n+      write(11)idata\n+      backspace(11)\n+      backspace(11)\n+      write(11)idata\n+      close(11, status=\"keep\")  \n+      open(unit=11,form='unformatted')\n+      rewind(11)\n+      read(11)idata\n+      read(11)idata\n+      read(11, end=250)idata\n+      call abort()\n+ 250  continue\n+      end\n+"}, {"sha": "b2ece6be13ad4420113fd8b9efe6dc864b8cd23b", "filename": "gcc/testsuite/gfortran.dg/write_rewind_1.f", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d54b732db05592fc8244f3192cd4f127919fd90/gcc%2Ftestsuite%2Fgfortran.dg%2Fwrite_rewind_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d54b732db05592fc8244f3192cd4f127919fd90/gcc%2Ftestsuite%2Fgfortran.dg%2Fwrite_rewind_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwrite_rewind_1.f?ref=5d54b732db05592fc8244f3192cd4f127919fd90", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+! PR 26499 : Positioning of EOF after  write and rewind.\n+! Test case from Dale Ranta in PR.\n+! Submitted by Jerry DeLisle <jvdelisle@verizon.net>.\n+      program test\n+      dimension idata(100)\n+      open(unit=11,form='unformatted')\n+      write(11)idata\n+      write(11)idata\n+      read(11,end=        1000 )idata\n+      call abort()\n+ 1000 continue\n+      rewind 11\n+      write(11)idata\n+      close(11,status='keep')        \n+      open(unit=11,form='unformatted')\n+      rewind 11\n+      read(11)idata\n+      read(11, end=250)idata\n+      call abort()\n+ 250  continue\n+      close(11,status='delete')  \n+      end"}, {"sha": "6daf093fb7fd74740a0ebb83ad0aed95dbaa5e69", "filename": "gcc/testsuite/gfortran.dg/write_rewind_2.f", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d54b732db05592fc8244f3192cd4f127919fd90/gcc%2Ftestsuite%2Fgfortran.dg%2Fwrite_rewind_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d54b732db05592fc8244f3192cd4f127919fd90/gcc%2Ftestsuite%2Fgfortran.dg%2Fwrite_rewind_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwrite_rewind_2.f?ref=5d54b732db05592fc8244f3192cd4f127919fd90", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+! PR 26499  Test write with rewind sequences to make sure buffering and\n+! end-of-file conditions are handled correctly.  Derived from test case by Dale\n+! Ranta.  Submitted by Jerry DeLisle <jvdelisle@gcc.gnu.org>.\n+      program test\n+      dimension idata(1011)\n+      open(unit=11,form='unformatted')\n+        idata(1)   = -705\n+        idata(  1011)   = -706\n+       write(11)idata\n+        idata(1)   = -706\n+        idata(  1011)   = -707\n+       write(11)idata\n+        idata(1)   = -707\n+        idata(  1011)   = -708\n+       write(11)idata\n+       read(11,end=        1000 )idata\n+       call abort()\n+ 1000  continue\n+       rewind 11\n+       read(11,end=        1001 )idata\n+        if(idata(1).ne. -705.or.idata(  1011).ne. -706)call abort()\n+ 1001  continue\n+       close(11,status='keep')        \n+      open(unit=11,form='unformatted')\n+      rewind 11\n+      read(11)idata\n+      if(idata(1).ne.-705)then\n+      call abort()\n+      endif\n+      read(11)idata\n+      if(idata(1).ne.-706)then\n+      call abort()\n+      endif\n+      read(11)idata\n+      if(idata(1).ne.-707)then\n+      call abort()\n+      endif\n+      close(11,status='delete')  \n+      stop\n+      end\n+\n+"}]}