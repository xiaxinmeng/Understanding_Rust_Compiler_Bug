{"sha": "97031af75528283f0b6fc554acdbb692431ccfb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwMzFhZjc1NTI4MjgzZjBiNmZjNTU0YWNkYmI2OTI0MzFjY2ZiMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-21T08:41:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-21T08:41:47Z"}, "message": "re PR tree-optimization/83047 (glibc/crypt/crypt_util.c gets miscompiled)\n\n\tPR tree-optimization/83047\n\t* gimple-ssa-store-merging.c\n\t(imm_store_chain_info::output_merged_store): If the loads with the\n\tsame vuse are in different basic blocks, for load_gsi pick a load\n\tlocation that is dominated by the other loads.\n\n\t* gcc.dg/pr83047.c: New test.\n\nFrom-SVN: r254992", "tree": {"sha": "80338b57205c17318e206161d3551baac09fb8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80338b57205c17318e206161d3551baac09fb8df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97031af75528283f0b6fc554acdbb692431ccfb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97031af75528283f0b6fc554acdbb692431ccfb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97031af75528283f0b6fc554acdbb692431ccfb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97031af75528283f0b6fc554acdbb692431ccfb1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7768f20b0a08f8f735de9f4088945023cce0230b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7768f20b0a08f8f735de9f4088945023cce0230b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7768f20b0a08f8f735de9f4088945023cce0230b"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "a106fe60dcbcf09a0c267021e83f4516009d5662", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97031af75528283f0b6fc554acdbb692431ccfb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97031af75528283f0b6fc554acdbb692431ccfb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97031af75528283f0b6fc554acdbb692431ccfb1", "patch": "@@ -1,5 +1,11 @@\n 2017-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/83047\n+\t* gimple-ssa-store-merging.c\n+\t(imm_store_chain_info::output_merged_store): If the loads with the\n+\tsame vuse are in different basic blocks, for load_gsi pick a load\n+\tlocation that is dominated by the other loads.\n+\n \tPR c++/83059\n \t* config/i386/i386.c (ix86_memmodel_check): Start\n \t-Winvalid-memory-model diagnostics with lowercase letter."}, {"sha": "c0b1015d9f52b1f6798c71f09df5e9b277bf5d7b", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97031af75528283f0b6fc554acdbb692431ccfb1/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97031af75528283f0b6fc554acdbb692431ccfb1/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=97031af75528283f0b6fc554acdbb692431ccfb1", "patch": "@@ -3372,7 +3372,30 @@ imm_store_chain_info::output_merged_store (merged_store_group *group)\n       store_immediate_info *infol = group->stores.last ();\n       if (gimple_vuse (op.stmt) == gimple_vuse (infol->ops[j].stmt))\n \t{\n-\t  load_gsi[j] = gsi_for_stmt (op.stmt);\n+\t  /* We can't pick the location randomly; while we've verified\n+\t     all the loads have the same vuse, they can be still in different\n+\t     basic blocks and we need to pick the one from the last bb:\n+\t     int x = q[0];\n+\t     if (x == N) return;\n+\t     int y = q[1];\n+\t     p[0] = x;\n+\t     p[1] = y;\n+\t     otherwise if we put the wider load at the q[0] load, we might\n+\t     segfault if q[1] is not mapped.  */\n+\t  basic_block bb = gimple_bb (op.stmt);\n+\t  gimple *ostmt = op.stmt;\n+\t  store_immediate_info *info;\n+\t  FOR_EACH_VEC_ELT (group->stores, i, info)\n+\t    {\n+\t      gimple *tstmt = info->ops[j].stmt;\n+\t      basic_block tbb = gimple_bb (tstmt);\n+\t      if (dominated_by_p (CDI_DOMINATORS, tbb, bb))\n+\t\t{\n+\t\t  ostmt = tstmt;\n+\t\t  bb = tbb;\n+\t\t}\n+\t    }\n+\t  load_gsi[j] = gsi_for_stmt (ostmt);\n \t  load_addr[j]\n \t    = force_gimple_operand_1 (unshare_expr (op.base_addr),\n \t\t\t\t      &load_seq[j], is_gimple_mem_ref_addr,"}, {"sha": "70926dc1e2eaa7c09fcca5d684256b6d8a88dd9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97031af75528283f0b6fc554acdbb692431ccfb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97031af75528283f0b6fc554acdbb692431ccfb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97031af75528283f0b6fc554acdbb692431ccfb1", "patch": "@@ -1,5 +1,8 @@\n 2017-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/83047\n+\t* gcc.dg/pr83047.c: New test.\n+\n \tP0428R2 - familiar template syntax for generic lambdas\n \t* g++.dg/cpp1y/lambda-generic-x.C: Adjust warnings and limit\n \tto c++17_down target."}, {"sha": "db374a9d251aa0d03221c561350d24b6d9df6aad", "filename": "gcc/testsuite/gcc.dg/pr83047.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97031af75528283f0b6fc554acdbb692431ccfb1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83047.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97031af75528283f0b6fc554acdbb692431ccfb1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83047.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83047.c?ref=97031af75528283f0b6fc554acdbb692431ccfb1", "patch": "@@ -0,0 +1,58 @@\n+/* PR tree-optimization/83047 */\n+/* { dg-do run { target mmap } } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stddef.h>\n+#include <stdio.h>\n+#include <sys/mman.h>\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+#ifndef MAP_ANON\n+#define MAP_ANON 0\n+#endif\n+#ifndef MAP_FAILED\n+#define MAP_FAILED ((void *)-1)\n+#endif\n+#include <stdlib.h>\n+\n+__attribute__((noipa)) void\n+foo (char *p, char *q, int r)\n+{\n+  char a = q[0];\n+  if (r || a == '\\0')\n+    return;\n+  char b = q[1];\n+  p[0] = a;\n+  p[1] = b;\n+}\n+\n+int\n+main ()\n+{\n+  char *p = mmap (NULL, 131072, PROT_READ | PROT_WRITE,\n+\t\t  MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);\n+  if (p == MAP_FAILED)\n+    return 0;\n+  if (munmap (p + 65536, 65536) < 0)\n+    return 0;\n+  p[0] = 'c';\n+  p[1] = 'd';\n+  p[65536 - 2] = 'a';\n+  p[65536 - 1] = 'b';\n+  volatile int r = 1;\n+  foo (p, p + 65536 - 2, r);\n+  if (p[0] != 'c' || p[1] != 'd')\n+    abort ();\n+  r = 0;\n+  foo (p, p + 65536 - 2, r);\n+  if (p[0] != 'a' || p[1] != 'b')\n+    abort ();\n+  p[0] = 'e';\n+  p[1] = 'f';\n+  r = 1;\n+  foo (p, p + 65536 - 1, r);\n+  if (p[0] != 'e' || p[1] != 'f')\n+    abort ();\n+  return 0;\n+}"}]}