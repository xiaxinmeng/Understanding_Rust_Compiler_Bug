{"sha": "6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1", "node_id": "C_kwDOANBUbNoAKDZjYzhhYTY1ZmRlYWVmZTk3NzRkNWUwZDRlNzJjOTFmNTIzMTNiZTE", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-02T13:26:36Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-02T13:28:15Z"}, "message": "middle-end: Fix PR103007, add missing check on complex fms detection.\n\nThe complex FMS detection is missing a check on if the nodes of the VEC_PERM\nhas the amount of children we expect before it recurses.\n\nThis check is there on MUL and FMA but was missing for FMS, due to this the\ncompiler goes on further than it should and hits an assert.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103007\n\t* tree-vect-slp-patterns.c (complex_fms_pattern::matches): Add elem\n\tcheck.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/103007\n\t* g++.dg/pr103007.C: New test.", "tree": {"sha": "5b5476a458e43186aaad88bf95cd6a07c99636db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b5476a458e43186aaad88bf95cd6a07c99636db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "268b43d2592c196ea101946d7063156a914b2713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268b43d2592c196ea101946d7063156a914b2713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/268b43d2592c196ea101946d7063156a914b2713"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "1631a85080039f29b83c97d2f62c66be9eac109f", "filename": "gcc/testsuite/g++.dg/pr103007.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr103007.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr103007.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr103007.C?ref=6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+typedef float MushMeshVector[4];\n+struct MushMeshQuaternionPair {\n+  void VectorRotate(MushMeshVector &);\n+  MushMeshVector m_first;\n+  MushMeshVector m_second;\n+};\n+void \n+MushMeshQuaternionPair::\n+VectorRotate(MushMeshVector &ioVec)  {\n+  ioVec[2] = (2 - m_first[1] + m_first[3] * 0);\n+  ioVec[3] = (m_first[3] + m_first[1] - m_first[2] * 0);\n+  float c = ioVec[2], d = ioVec[3];\n+  ioVec[2] = (0 - d * m_second[1]);\n+  ioVec[3] = (2 - c * m_second[1]);\n+}\n+"}, {"sha": "e08a15ebd92638ca32171b361412ec33f0116367", "filename": "gcc/tree-vect-slp-patterns.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1/gcc%2Ftree-vect-slp-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1/gcc%2Ftree-vect-slp-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp-patterns.c?ref=6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1", "patch": "@@ -1197,13 +1197,17 @@ complex_fms_pattern::matches (complex_operation_t op,\n \n   auto childs = SLP_TREE_CHILDREN (nodes[0]);\n   auto l0node = SLP_TREE_CHILDREN (childs[0]);\n-  auto l1node = SLP_TREE_CHILDREN (childs[1]);\n \n   /* Now operand2+4 may lead to another expression.  */\n   auto_vec<slp_tree> left_op, right_op;\n   left_op.safe_splice (SLP_TREE_CHILDREN (l0node[1]));\n   right_op.safe_splice (SLP_TREE_CHILDREN (nodes[1]));\n \n+  /* If these nodes don't have any children then they're\n+     not ones we're interested in.  */\n+  if (left_op.length () != 2 || right_op.length () != 2)\n+    return IFN_LAST;\n+\n   bool is_neg = vect_normalize_conj_loc (left_op);\n \n   bool conj_first_operand = false;"}]}