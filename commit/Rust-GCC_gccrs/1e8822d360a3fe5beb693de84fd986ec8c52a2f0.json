{"sha": "1e8822d360a3fe5beb693de84fd986ec8c52a2f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU4ODIyZDM2MGEzZmU1YmViNjkzZGU4NGZkOTg2ZWM4YzUyYTJmMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-09-23T15:54:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-09-23T15:54:16Z"}, "message": "PR libstdc++/91788 improve codegen for std::variant<T...>::index()\n\nIf __index_type is a smaller type than size_t, then the result of\nsize_t(__index_type(-1)) is not equal to size_t(-1), but to an incorrect\nvalue such as size_t(255) or size_t(65535). The old implementation of\nvariant<T...>::index() uses (size_t(__index_type(_M_index + 1)) - 1)\nwhich is always correct, but generates suboptimal code for many common\ncases.\n\nWhen the __index_type is size_t or valueless variants are not possible\nwe can just return the value directly.\n\nWhen the number of alternatives is sufficiently small the result of\nconverting the _M_index value to the corresponding signed type will be\neither non-negative or -1. In those cases converting to the signed type\nand then to size_t will either produce the correct positive value or\nwill sign extend -1 to (size_t)-1 as desired.\n\nFor the remaining case we keep the existing arithmetic operations to\nensure the correct result.\n\n\tPR libstdc++/91788 (partial)\n\t* include/std/variant (variant::index()): Improve codegen for cases\n\twhere conversion to size_t already works correctly.\n\nFrom-SVN: r276056", "tree": {"sha": "f2728a5feaa677602146900700f9c827342cfb1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2728a5feaa677602146900700f9c827342cfb1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e8822d360a3fe5beb693de84fd986ec8c52a2f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8822d360a3fe5beb693de84fd986ec8c52a2f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e8822d360a3fe5beb693de84fd986ec8c52a2f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e8822d360a3fe5beb693de84fd986ec8c52a2f0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa87544ca13000e62982d3005edb47a53401cfe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa87544ca13000e62982d3005edb47a53401cfe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa87544ca13000e62982d3005edb47a53401cfe7"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "54fe95f1ac965e02ff4c72c0e5d37897d9b504f1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8822d360a3fe5beb693de84fd986ec8c52a2f0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8822d360a3fe5beb693de84fd986ec8c52a2f0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1e8822d360a3fe5beb693de84fd986ec8c52a2f0", "patch": "@@ -1,3 +1,9 @@\n+2019-09-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/91788 (partial)\n+\t* include/std/variant (variant::index()): Improve codegen for cases\n+\twhere conversion to size_t already works correctly.\n+\n 2019-09-23  Andreas Schwab  <schwab@suse.de>\n \n \t* config/abi/post/riscv64-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "c0043243ec29a0162df46a725440aa573333d975", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e8822d360a3fe5beb693de84fd986ec8c52a2f0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e8822d360a3fe5beb693de84fd986ec8c52a2f0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=1e8822d360a3fe5beb693de84fd986ec8c52a2f0", "patch": "@@ -1518,7 +1518,17 @@ namespace __variant\n       { return !this->_M_valid(); }\n \n       constexpr size_t index() const noexcept\n-      { return size_t(typename _Base::__index_type(this->_M_index + 1)) - 1; }\n+      {\n+\tusing __index_type = typename _Base::__index_type;\n+\tif constexpr (is_same_v<__index_type, size_t>)\n+\t  return this->_M_index;\n+\telse if constexpr (__detail::__variant::__never_valueless<_Types...>())\n+\t  return this->_M_index;\n+\telse if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)\n+\t  return make_signed_t<__index_type>(this->_M_index);\n+\telse\n+\t  return size_t(__index_type(this->_M_index + 1)) - 1;\n+      }\n \n       void\n       swap(variant& __rhs)"}]}