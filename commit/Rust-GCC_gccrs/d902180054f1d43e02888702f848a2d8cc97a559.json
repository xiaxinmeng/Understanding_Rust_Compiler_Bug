{"sha": "d902180054f1d43e02888702f848a2d8cc97a559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkwMjE4MDA1NGYxZDQzZTAyODg4NzAyZjg0OGEyZDhjYzk3YTU1OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-10-06T17:52:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-10-06T17:52:37Z"}, "message": "mips.h (PREDICATE_CODES): Add stack_operand.\n\n\t* config/mips/mips.h (PREDICATE_CODES): Add stack_operand.\n\t* config/mips/mips.c (stack_operand): New predicate.\n\t* config/mips/mips.md: Use it for the destination of mips16 insns\n\tthat store $31.\n\nFrom-SVN: r72158", "tree": {"sha": "b43788c1159ac630c454ec47292871d20fd76763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b43788c1159ac630c454ec47292871d20fd76763"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d902180054f1d43e02888702f848a2d8cc97a559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d902180054f1d43e02888702f848a2d8cc97a559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d902180054f1d43e02888702f848a2d8cc97a559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d902180054f1d43e02888702f848a2d8cc97a559/comments", "author": null, "committer": null, "parents": [{"sha": "4fef83a7dd56abbc587d91d0bf738942ac510189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fef83a7dd56abbc587d91d0bf738942ac510189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fef83a7dd56abbc587d91d0bf738942ac510189"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "4e459331e02da355423e9bdd7a0760d56e81a45e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d902180054f1d43e02888702f848a2d8cc97a559/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d902180054f1d43e02888702f848a2d8cc97a559/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d902180054f1d43e02888702f848a2d8cc97a559", "patch": "@@ -1,3 +1,10 @@\n+2003-10-06  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (PREDICATE_CODES): Add stack_operand.\n+\t* config/mips/mips.c (stack_operand): New predicate.\n+\t* config/mips/mips.md: Use it for the destination of mips16 insns\n+\tthat store $31.\n+\n 2003-10-06  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (*lowsi): Renamed from lowsi."}, {"sha": "6c9d5ec184d854e5854dcdb29bbd0cbe7173b230", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d902180054f1d43e02888702f848a2d8cc97a559/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d902180054f1d43e02888702f848a2d8cc97a559/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d902180054f1d43e02888702f848a2d8cc97a559", "patch": "@@ -1543,6 +1543,22 @@ symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n }\n \n \n+/* Return true if OP is a memory reference that uses the stack pointer\n+   as a base register.  */\n+\n+int\n+stack_operand (rtx op, enum machine_mode mode)\n+{\n+  struct mips_address_info addr;\n+\n+  return ((mode == VOIDmode || mode == GET_MODE (op))\n+\t  && GET_CODE (op) == MEM\n+\t  && mips_classify_address (&addr, XEXP (op, 0),\n+\t\t\t\t    GET_MODE (op), false, true) == ADDRESS_REG\n+\t  && addr.reg == stack_pointer_rtx);\n+}\n+\n+\n /* This function is used to implement GO_IF_LEGITIMATE_ADDRESS.  It\n    returns a nonzero value if X is a legitimate address for a memory\n    operand of the indicated MODE.  STRICT is nonzero if this function"}, {"sha": "ad13b82d878f9aa6a3a4b2cb1f7bb70e37029d53", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d902180054f1d43e02888702f848a2d8cc97a559/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d902180054f1d43e02888702f848a2d8cc97a559/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d902180054f1d43e02888702f848a2d8cc97a559", "patch": "@@ -2806,6 +2806,7 @@ typedef struct mips_args {\n   {\"move_operand\", \t\t{ CONST_INT, CONST_DOUBLE, CONST,\t\\\n \t\t\t\t  SYMBOL_REF, LABEL_REF, SUBREG,\t\\\n \t\t\t\t  REG, MEM}},\t\t\t\t\\\n+  {\"stack_operand\",\t\t{ MEM }},\t\t\t\t\\\n   {\"consttable_operand\",\t{ LABEL_REF, SYMBOL_REF, CONST_INT,\t\\\n \t\t\t\t  CONST_DOUBLE, CONST }},\t\t\\\n   {\"fcc_register_operand\",\t{ REG, SUBREG }},\t\t\t\\"}, {"sha": "3bdc06a2b11652ef4a62986ac0cd26c5882061d1", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d902180054f1d43e02888702f848a2d8cc97a559/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d902180054f1d43e02888702f848a2d8cc97a559/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=d902180054f1d43e02888702f848a2d8cc97a559", "patch": "@@ -4257,7 +4257,7 @@ dsrl\\t%3,%3,1\\n\\\n ;; instruction can be generated by save_restore_insns.\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n+  [(set (match_operand:DI 0 \"stack_operand\" \"=m\")\n \t(reg:DI 31))]\n   \"TARGET_MIPS16 && TARGET_64BIT\"\n   \"sd\\t$31,%0\"\n@@ -4401,25 +4401,15 @@ dsrl\\t%3,%3,1\\n\\\n     }\n })\n \n-;; We can only store $ra directly into a small sp offset.  Should the\n-;; offset be too wide, non-constant or not sp-based, leave it up to\n-;; reload to choose a scratch register.\n+;; We can only store $ra directly into a small sp offset.\n \n (define_insn \"\"\n-  [(set (mem:SI (plus:SI (reg:SI 29)\n-\t\t\t (match_operand:SI 0 \"small_int\" \"n\")))\n+  [(set (match_operand:SI 0 \"stack_operand\" \"=m\")\n \t(reg:SI 31))]\n   \"TARGET_MIPS16\"\n-  \"sw\\t$31,%0($sp)\"\n+  \"sw\\t$31,%0\"\n   [(set_attr \"type\"\t\"store\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr_alternative\n-    \"length\"\n-    [(if_then_else\n-      (lt (symbol_ref \"(unsigned HOST_WIDE_INT) INTVAL (operands[0])\")\n-\t  (const_int 1024))\n-      (const_int 4)\n-      (const_int 8))])])\n+   (set_attr \"mode\"\t\"SI\")])\n \n ;; The difference between these two is whether or not ints are allowed\n ;; in FP registers (off by default, use -mdebugh to enable)."}]}