{"sha": "56102c7f975bf2442c7e456ba58869aa8cbd40c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxMDJjN2Y5NzViZjI0NDJjN2U0NTZiYTU4ODY5YWE4Y2JkNDBjNw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-10-12T14:14:22Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-10-12T14:14:22Z"}, "message": "Add missing phis in expand_omp_for_generic\n\n2015-10-12  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/67476\n\t* omp-low.c (expand_omp_for_generic): Add missing phis.\n\nFrom-SVN: r228718", "tree": {"sha": "0cc3cd839b8e9ae49d687a44281446ca7bf4e2ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cc3cd839b8e9ae49d687a44281446ca7bf4e2ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56102c7f975bf2442c7e456ba58869aa8cbd40c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56102c7f975bf2442c7e456ba58869aa8cbd40c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56102c7f975bf2442c7e456ba58869aa8cbd40c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56102c7f975bf2442c7e456ba58869aa8cbd40c7/comments", "author": null, "committer": null, "parents": [{"sha": "7aab672f4239ec94b577d1377b2cd0ac8655df35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aab672f4239ec94b577d1377b2cd0ac8655df35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aab672f4239ec94b577d1377b2cd0ac8655df35"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "c34e0840c58ace39c3755dc61e62360f42496ac9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56102c7f975bf2442c7e456ba58869aa8cbd40c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56102c7f975bf2442c7e456ba58869aa8cbd40c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56102c7f975bf2442c7e456ba58869aa8cbd40c7", "patch": "@@ -1,3 +1,8 @@\n+2015-10-12  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/67476\n+\t* omp-low.c (expand_omp_for_generic): Add missing phis.\n+\n 2015-10-12  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/67476"}, {"sha": "b2a93b99c7eb2bbd5527c69d43355cca31bbee00", "filename": "gcc/omp-low.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56102c7f975bf2442c7e456ba58869aa8cbd40c7/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56102c7f975bf2442c7e456ba58869aa8cbd40c7/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=56102c7f975bf2442c7e456ba58869aa8cbd40c7", "patch": "@@ -238,6 +238,7 @@ static vec<omp_context *> taskreg_contexts;\n \n static void scan_omp (gimple_seq *, omp_context *);\n static tree scan_omp_1_op (tree *, int *, void *);\n+static gphi *find_phi_with_arg_on_edge (tree, edge);\n \n #define WALK_SUBSTMTS  \\\n     case GIMPLE_BIND: \\\n@@ -6469,6 +6470,43 @@ expand_omp_for_generic (struct omp_region *region,\n \t}\n       make_edge (l2_bb, l0_bb, EDGE_TRUE_VALUE);\n \n+      if (gimple_in_ssa_p (cfun))\n+\t{\n+\t  /* Add phis to the outer loop that connect to the phis in the inner,\n+\t     original loop, and move the loop entry value of the inner phi to\n+\t     the loop entry value of the outer phi.  */\n+\t  gphi_iterator psi;\n+\t  for (psi = gsi_start_phis (l3_bb); !gsi_end_p (psi); gsi_next (&psi))\n+\t    {\n+\t      source_location locus;\n+\t      gphi *nphi;\n+\t      gphi *exit_phi = psi.phi ();\n+\n+\t      edge l2_to_l3 = find_edge (l2_bb, l3_bb);\n+\t      tree exit_res = PHI_ARG_DEF_FROM_EDGE (exit_phi, l2_to_l3);\n+\n+\t      basic_block latch = BRANCH_EDGE (cont_bb)->dest;\n+\t      edge latch_to_l1 = find_edge (latch, l1_bb);\n+\t      gphi *inner_phi\n+\t\t= find_phi_with_arg_on_edge (exit_res, latch_to_l1);\n+\n+\t      tree t = gimple_phi_result (exit_phi);\n+\t      tree new_res = copy_ssa_name (t, NULL);\n+\t      nphi = create_phi_node (new_res, l0_bb);\n+\n+\t      edge l0_to_l1 = find_edge (l0_bb, l1_bb);\n+\t      t = PHI_ARG_DEF_FROM_EDGE (inner_phi, l0_to_l1);\n+\t      locus = gimple_phi_arg_location_from_edge (inner_phi, l0_to_l1);\n+\t      edge entry_to_l0 = find_edge (entry_bb, l0_bb);\n+\t      add_phi_arg (nphi, t, entry_to_l0, locus);\n+\n+\t      edge l2_to_l0 = find_edge (l2_bb, l0_bb);\n+\t      add_phi_arg (nphi, exit_res, l2_to_l0, UNKNOWN_LOCATION);\n+\n+\t      add_phi_arg (inner_phi, new_res, l0_to_l1, UNKNOWN_LOCATION);\n+\t    };\n+\t}\n+\n       set_immediate_dominator (CDI_DOMINATORS, l2_bb,\n \t\t\t       recompute_dominator (CDI_DOMINATORS, l2_bb));\n       set_immediate_dominator (CDI_DOMINATORS, l3_bb,"}]}