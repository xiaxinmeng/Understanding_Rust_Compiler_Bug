{"sha": "63dabd8161f5d5c22a796286fb0c366742444c6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkYWJkODE2MWY1ZDVjMjJhNzk2Mjg2ZmIwYzM2Njc0MjQ0NGM2ZQ==", "commit": {"author": {"name": "Yizhe", "email": "yizhe@pku.edu.cn", "date": "2021-02-25T18:36:26Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-01T10:42:27Z"}, "message": "Extract enums into the global namespace\n\n`operator.h` has been rewritten from scratch. 5 enums are extracted from\nthe AST namespace, while only 4 of them are used in the HIR namespace.\n\nThere're still code that uses the old Operator enum. We also need to\nchange code that uses the AST enum to point to the new global enum.", "tree": {"sha": "4a3a28c5c2f4c6f1ee40f4a606c76a2ef3b03810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a3a28c5c2f4c6f1ee40f4a606c76a2ef3b03810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63dabd8161f5d5c22a796286fb0c366742444c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63dabd8161f5d5c22a796286fb0c366742444c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63dabd8161f5d5c22a796286fb0c366742444c6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63dabd8161f5d5c22a796286fb0c366742444c6e/comments", "author": {"login": "YizhePKU", "id": 42838469, "node_id": "MDQ6VXNlcjQyODM4NDY5", "avatar_url": "https://avatars.githubusercontent.com/u/42838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YizhePKU", "html_url": "https://github.com/YizhePKU", "followers_url": "https://api.github.com/users/YizhePKU/followers", "following_url": "https://api.github.com/users/YizhePKU/following{/other_user}", "gists_url": "https://api.github.com/users/YizhePKU/gists{/gist_id}", "starred_url": "https://api.github.com/users/YizhePKU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YizhePKU/subscriptions", "organizations_url": "https://api.github.com/users/YizhePKU/orgs", "repos_url": "https://api.github.com/users/YizhePKU/repos", "events_url": "https://api.github.com/users/YizhePKU/events{/privacy}", "received_events_url": "https://api.github.com/users/YizhePKU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aa4bce8246367d387fc73cfc0d0e90cac656fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa4bce8246367d387fc73cfc0d0e90cac656fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa4bce8246367d387fc73cfc0d0e90cac656fbb"}], "stats": {"total": 234, "additions": 75, "deletions": 159}, "files": [{"sha": "9e69998e86f5c3b660cf179e14b77fd946dbbbf7", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 15, "deletions": 59, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dabd8161f5d5c22a796286fb0c366742444c6e/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dabd8161f5d5c22a796286fb0c366742444c6e/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=63dabd8161f5d5c22a796286fb0c366742444c6e", "patch": "@@ -3,6 +3,7 @@\n \n #include \"rust-ast.h\"\n #include \"rust-path.h\"\n+#include \"operator.h\"\n \n namespace Rust {\n namespace AST {\n@@ -365,30 +366,25 @@ class ErrorPropagationExpr : public OperatorExpr\n // Unary prefix - or ! negation or NOT operators.\n class NegationExpr : public OperatorExpr\n {\n-public:\n-  enum NegationType\n-  {\n-    NEGATE,\n-    NOT\n-  };\n-\n private:\n+  using ExprType = NegationOperator;\n+\n   /* Note: overload negation via std::ops::Neg and not via std::ops::Not\n    * Negation only works for signed integer and floating-point types, NOT only\n    * works for boolean and integer types (via bitwise NOT) */\n-  NegationType negation_type;\n+  ExprType expr_type;\n \n public:\n   std::string as_string () const override;\n \n-  NegationType get_negation_type () const { return negation_type; }\n+  ExprType get_expr_type () const { return expr_type; }\n \n   // Constructor calls OperatorExpr's protected constructor\n-  NegationExpr (std::unique_ptr<Expr> negated_value, NegationType negation_kind,\n+  NegationExpr (std::unique_ptr<Expr> negated_value, ExprType expr_kind,\n \t\tstd::vector<Attribute> outer_attribs, Location locus)\n     : OperatorExpr (std::move (negated_value), std::move (outer_attribs),\n \t\t    locus),\n-      negation_type (negation_kind)\n+      expr_type (expr_kind)\n   {}\n \n   void accept_vis (ASTVisitor &vis) override;\n@@ -412,22 +408,9 @@ class NegationExpr : public OperatorExpr\n // Infix binary operators. +, -, *, /, %, &, |, ^, <<, >>\n class ArithmeticOrLogicalExpr : public OperatorExpr\n {\n-public:\n-  enum ExprType\n-  {\n-    ADD,\t // std::ops::Add\n-    SUBTRACT,\t // std::ops::Sub\n-    MULTIPLY,\t // std::ops::Mul\n-    DIVIDE,\t // std::ops::Div\n-    MODULUS,\t // std::ops::Rem\n-    BITWISE_AND, // std::ops::BitAnd\n-    BITWISE_OR,\t // std::ops::BitOr\n-    BITWISE_XOR, // std::ops::BitXor\n-    LEFT_SHIFT,\t // std::ops::Shl\n-    RIGHT_SHIFT\t // std::ops::Shr\n-  };\n-\n private:\n+  using ExprType = ArithmeticOrLogicalOperator;\n+\n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n \n@@ -500,18 +483,9 @@ class ArithmeticOrLogicalExpr : public OperatorExpr\n // Infix binary comparison operators. ==, !=, <, <=, >, >=\n class ComparisonExpr : public OperatorExpr\n {\n-public:\n-  enum ExprType\n-  {\n-    EQUAL,\t      // std::cmp::PartialEq::eq\n-    NOT_EQUAL,\t      // std::cmp::PartialEq::ne\n-    GREATER_THAN,     // std::cmp::PartialEq::gt\n-    LESS_THAN,\t      // std::cmp::PartialEq::lt\n-    GREATER_OR_EQUAL, // std::cmp::PartialEq::ge\n-    LESS_OR_EQUAL     // std::cmp::PartialEq::le\n-  };\n-\n private:\n+  using ExprType = ComparisionOperator;\n+\n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n \n@@ -585,14 +559,9 @@ class ComparisonExpr : public OperatorExpr\n // Infix binary lazy boolean logical operators && and ||.\n class LazyBooleanExpr : public OperatorExpr\n {\n-public:\n-  enum ExprType\n-  {\n-    LOGICAL_OR,\n-    LOGICAL_AND\n-  };\n-\n private:\n+  using ExprType = LazyBooleanOperator;\n+\n   ExprType expr_type;\n \n   std::unique_ptr<Expr> right_expr;\n@@ -791,22 +760,9 @@ class AssignmentExpr : public OperatorExpr\n  * expressions. */\n class CompoundAssignmentExpr : public OperatorExpr\n {\n-public:\n-  enum ExprType\n-  {\n-    ADD,\t // std::ops::AddAssign\n-    SUBTRACT,\t // std::ops::SubAssign\n-    MULTIPLY,\t // std::ops::MulAssign\n-    DIVIDE,\t // std::ops::DivAssign\n-    MODULUS,\t // std::ops::RemAssign\n-    BITWISE_AND, // std::ops::BitAndAssign\n-    BITWISE_OR,\t // std::ops::BitOrAssign\n-    BITWISE_XOR, // std::ops::BitXorAssign\n-    LEFT_SHIFT,\t // std::ops::ShlAssign\n-    RIGHT_SHIFT\t // std::ops::ShrAssign\n-  };\n-\n private:\n+  using ExprType = CompoundAssignmentOperator;\n+\n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n   std::unique_ptr<Expr> right_expr;"}, {"sha": "15c89eb4707461a9551633f983c6ef1326d3122e", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 13, "deletions": 40, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dabd8161f5d5c22a796286fb0c366742444c6e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dabd8161f5d5c22a796286fb0c366742444c6e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=63dabd8161f5d5c22a796286fb0c366742444c6e", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-hir.h\"\n #include \"rust-hir-path.h\"\n+#include \"operator.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -355,30 +356,26 @@ class ErrorPropagationExpr : public OperatorExpr\n // Unary prefix - or ! negation or NOT operators.\n class NegationExpr : public OperatorExpr\n {\n-public:\n-  enum NegationType\n-  {\n-    NEGATE,\n-    NOT\n-  };\n+private:\n+  using ExprType = NegationOperator;\n \n   /* Note: overload negation via std::ops::Neg and not via std::ops::Not\n    * Negation only works for signed integer and floating-point types, NOT only\n    * works for boolean and integer types (via bitwise NOT) */\n-  NegationType negation_type;\n+  ExprType expr_type;\n \n public:\n   std::string as_string () const override;\n \n-  NegationType get_negation_type () const { return negation_type; }\n+  ExprType get_expr_type () const { return expr_type; }\n \n   // Constructor calls OperatorExpr's protected constructor\n   NegationExpr (Analysis::NodeMapping mappings,\n-\t\tstd::unique_ptr<Expr> negated_value, NegationType negation_kind,\n+\t\tstd::unique_ptr<Expr> negated_value, ExprType expr_kind,\n \t\tstd::vector<Attribute> outer_attribs, Location locus)\n     : OperatorExpr (std::move (mappings), std::move (negated_value),\n \t\t    std::move (outer_attribs), locus),\n-      negation_type (negation_kind)\n+      expr_type (expr_kind)\n   {}\n \n   void accept_vis (HIRVisitor &vis) override;\n@@ -404,20 +401,8 @@ class NegationExpr : public OperatorExpr\n // Infix binary operators. +, -, *, /, %, &, |, ^, <<, >>\n class ArithmeticOrLogicalExpr : public OperatorExpr\n {\n-public:\n-  enum ExprType\n-  {\n-    ADD,\t // std::ops::Add\n-    SUBTRACT,\t // std::ops::Sub\n-    MULTIPLY,\t // std::ops::Mul\n-    DIVIDE,\t // std::ops::Div\n-    MODULUS,\t // std::ops::Rem\n-    BITWISE_AND, // std::ops::BitAnd\n-    BITWISE_OR,\t // std::ops::BitOr\n-    BITWISE_XOR, // std::ops::BitXor\n-    LEFT_SHIFT,\t // std::ops::Shl\n-    RIGHT_SHIFT\t // std::ops::Shr\n-  };\n+private:\n+  using ExprType = ArithmeticOrLogicalOperator;\n \n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n@@ -489,16 +474,8 @@ class ArithmeticOrLogicalExpr : public OperatorExpr\n // Infix binary comparison operators. ==, !=, <, <=, >, >=\n class ComparisonExpr : public OperatorExpr\n {\n-public:\n-  enum ExprType\n-  {\n-    EQUAL,\t      // std::cmp::PartialEq::eq\n-    NOT_EQUAL,\t      // std::cmp::PartialEq::ne\n-    GREATER_THAN,     // std::cmp::PartialEq::gt\n-    LESS_THAN,\t      // std::cmp::PartialEq::lt\n-    GREATER_OR_EQUAL, // std::cmp::PartialEq::ge\n-    LESS_OR_EQUAL     // std::cmp::PartialEq::le\n-  };\n+private:\n+  using ExprType = ComparisionOperator;\n \n   // Note: overloading trait specified in comments\n   ExprType expr_type;\n@@ -571,12 +548,8 @@ class ComparisonExpr : public OperatorExpr\n // Infix binary lazy boolean logical operators && and ||.\n class LazyBooleanExpr : public OperatorExpr\n {\n-public:\n-  enum ExprType\n-  {\n-    LOGICAL_OR,\n-    LOGICAL_AND\n-  };\n+private:\n+  using ExprType = LazyBooleanOperator;\n \n   ExprType expr_type;\n "}, {"sha": "2dd161f416c82a49ae884b127251e9d496dfc37a", "filename": "gcc/rust/operator.h", "status": "modified", "additions": 47, "deletions": 60, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dabd8161f5d5c22a796286fb0c366742444c6e/gcc%2Frust%2Foperator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dabd8161f5d5c22a796286fb0c366742444c6e/gcc%2Frust%2Foperator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Foperator.h?ref=63dabd8161f5d5c22a796286fb0c366742444c6e", "patch": "@@ -1,69 +1,56 @@\n-// operator.h -- Go frontend operators.     -*- C++ -*-\n+#ifndef OPERATOR_H\n+#define OPERATOR_H\n \n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n+enum Operator {};\n \n-#ifndef GO_OPERATOR_H\n-#define GO_OPERATOR_H\n-\n-// The operators.\n+enum class NegationOperator\n+{\n+  NEGATE,\n+  NOT\n+};\n \n-// TODO: Will have to be significantly modified to work with Rust and current\n-// setup of gccrs\n+enum class ArithmeticOrLogicalOperator\n+{\n+  ADD,\t       // std::ops::Add\n+  SUBTRACT,    // std::ops::Sub\n+  MULTIPLY,    // std::ops::Mul\n+  DIVIDE,      // std::ops::Div\n+  MODULUS,     // std::ops::Rem\n+  BITWISE_AND, // std::ops::BitAnd\n+  BITWISE_OR,  // std::ops::BitOr\n+  BITWISE_XOR, // std::ops::BitXor\n+  LEFT_SHIFT,  // std::ops::Shl\n+  RIGHT_SHIFT  // std::ops::Shr\n+};\n \n-enum Operator\n+enum class ComparisionOperator\n {\n-  OPERATOR_INVALID,\n-  OPERATOR_OROR,     // ||\n-  OPERATOR_ANDAND,   // &&\n-  OPERATOR_EQEQ,     // ==\n-  OPERATOR_NOTEQ,    // !=\n-  OPERATOR_LT,\t     // <\n-  OPERATOR_LE,\t     // <=\n-  OPERATOR_GT,\t     // >\n-  OPERATOR_GE,\t     // >=\n-  OPERATOR_PLUS,     // +\n-  OPERATOR_MINUS,    // -\n-  OPERATOR_OR,\t     // |\n-  OPERATOR_XOR,\t     // ^\n-  OPERATOR_MULT,     // *\n-  OPERATOR_DIV,\t     // /\n-  OPERATOR_MOD,\t     // %\n-  OPERATOR_LSHIFT,   // <<\n-  OPERATOR_RSHIFT,   // >>\n-  OPERATOR_AND,\t     // &\n-  OPERATOR_NOT,\t     // !\n-  OPERATOR_BITCLEAR, // &^\n-  OPERATOR_CHANOP,   // <-\n+  EQUAL,\t    // std::cmp::PartialEq::eq\n+  NOT_EQUAL,\t    // std::cmp::PartialEq::ne\n+  GREATER_THAN,\t    // std::cmp::PartialEq::gt\n+  LESS_THAN,\t    // std::cmp::PartialEq::lt\n+  GREATER_OR_EQUAL, // std::cmp::PartialEq::ge\n+  LESS_OR_EQUAL\t    // std::cmp::PartialEq::le\n+};\n \n-  OPERATOR_EQ,\t       // =\n-  OPERATOR_PLUSEQ,     // +=\n-  OPERATOR_MINUSEQ,    // -=\n-  OPERATOR_OREQ,       // |=\n-  OPERATOR_XOREQ,      // ^=\n-  OPERATOR_MULTEQ,     // *=\n-  OPERATOR_DIVEQ,      // /=\n-  OPERATOR_MODEQ,      // %=\n-  OPERATOR_LSHIFTEQ,   // <<=\n-  OPERATOR_RSHIFTEQ,   // >>=\n-  OPERATOR_ANDEQ,      // &=\n-  OPERATOR_BITCLEAREQ, // &^=\n-  OPERATOR_PLUSPLUS,   // ++\n-  OPERATOR_MINUSMINUS, // --\n+enum class LazyBooleanOperator\n+{\n+  LOGICAL_OR,\n+  LOGICAL_AND\n+};\n \n-  OPERATOR_COLON,     // :\n-  OPERATOR_COLONEQ,   // :=\n-  OPERATOR_SEMICOLON, // ;\n-  OPERATOR_DOT,\t      // .\n-  OPERATOR_ELLIPSIS,  // ...\n-  OPERATOR_COMMA,     // ,\n-  OPERATOR_LPAREN,    // (\n-  OPERATOR_RPAREN,    // )\n-  OPERATOR_LCURLY,    // {\n-  OPERATOR_RCURLY,    // }\n-  OPERATOR_LSQUARE,   // [\n-  OPERATOR_RSQUARE    // ]\n+enum class CompoundAssignmentOperator\n+{\n+  ADD,\t       // std::ops::AddAssign\n+  SUBTRACT,    // std::ops::SubAssign\n+  MULTIPLY,    // std::ops::MulAssign\n+  DIVIDE,      // std::ops::DivAssign\n+  MODULUS,     // std::ops::RemAssign\n+  BITWISE_AND, // std::ops::BitAndAssign\n+  BITWISE_OR,  // std::ops::BitOrAssign\n+  BITWISE_XOR, // std::ops::BitXorAssign\n+  LEFT_SHIFT,  // std::ops::ShlAssign\n+  RIGHT_SHIFT  // std::ops::ShrAssign\n };\n \n-#endif // !defined(GO_OPERATOR_H)\n+#endif"}]}