{"sha": "43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNkYTkzYTcyODFhN2M2NmMwYWUyM2FiZGY5ZTUwMWM0YjViYmQ4OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-07-04T17:57:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-07-04T17:57:58Z"}, "message": "basic_string.h: Trivial formatting fixes and/or const-ification of some variables.\n\n2004-07-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h: Trivial formatting fixes and/or\n\tconst-ification of some variables.\n\t* include/bits/deque.tcc: Likewise.\n\t* include/bits/stl_algobase.h: Likewise.\n\t* include/bits/stl_bvector.h: Likewise.\n\t* include/bits/stl_construct.h: Likewise.\n\t* include/bits/stl_deque.h: Likewise.\n\t* include/bits/stl_pair.h: Likewise.\n\t* include/bits/stl_vector.h: Likewise.\n\t* include/bits/vector.tcc: Likewise.\n\nFrom-SVN: r84090", "tree": {"sha": "c690f6c1e30886a6b796347c9ca0f62bb8a9e815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c690f6c1e30886a6b796347c9ca0f62bb8a9e815"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/comments", "author": null, "committer": null, "parents": [{"sha": "1ec7a97810257031fe1ae70fe00333a401fad7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ec7a97810257031fe1ae70fe00333a401fad7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ec7a97810257031fe1ae70fe00333a401fad7a6"}], "stats": {"total": 231, "additions": 129, "deletions": 102}, "files": [{"sha": "6dba4890a1e9e7c70bed945d5f1ecd59a8a682d5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "patch": "@@ -1,3 +1,16 @@\n+2004-07-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h: Trivial formatting fixes and/or\n+\tconst-ification of some variables.\n+\t* include/bits/deque.tcc: Likewise.\n+\t* include/bits/stl_algobase.h: Likewise.\n+\t* include/bits/stl_bvector.h: Likewise.\n+\t* include/bits/stl_construct.h: Likewise.\n+\t* include/bits/stl_deque.h: Likewise.\n+\t* include/bits/stl_pair.h: Likewise.\n+\t* include/bits/stl_vector.h: Likewise.\n+\t* include/bits/vector.tcc: Likewise.\n+\n 2004-07-04  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/25_algorithms/copy/1.cc: Add instantiations for"}, {"sha": "a7290d7e0c66a6ec4b728e8ffa20a1ca0adb3f35", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "patch": "@@ -1294,47 +1294,47 @@ namespace std\n       // Specializations for the common case of pointer and iterator:\n       // useful to avoid the overhead of temporary buffering in _M_replace.\n       basic_string&\n-        replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)\n-        {\n-\t  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n-\t\t\t\t   && __i2 <= _M_iend());\n-\t  __glibcxx_requires_valid_range(__k1, __k2);\n-\t  return this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n-\t\t\t       __k1, __k2 - __k1);\n-\t}\n+      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= _M_iend());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t     __k1, __k2 - __k1);\n+      }\n \n       basic_string&\n-        replace(iterator __i1, iterator __i2,\n-\t\tconst _CharT* __k1, const _CharT* __k2)\n-        {\n-\t  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n-\t\t\t\t   && __i2 <= _M_iend());\n-\t  __glibcxx_requires_valid_range(__k1, __k2);\n-\t  return this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n-\t\t\t       __k1, __k2 - __k1);\n-\t}\n+      replace(iterator __i1, iterator __i2,\n+\t      const _CharT* __k1, const _CharT* __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= _M_iend());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t     __k1, __k2 - __k1);\n+      }\n \n       basic_string&\n-        replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)\n-        {\n-\t  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n-\t\t\t\t   && __i2 <= _M_iend());\n-\t  __glibcxx_requires_valid_range(__k1, __k2);\n-\t  return this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n-\t\t\t       __k1.base(), __k2 - __k1);\n-\t}\n+      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= _M_iend());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t     __k1.base(), __k2 - __k1);\n+      }\n \n       basic_string&\n-        replace(iterator __i1, iterator __i2,\n-\t\tconst_iterator __k1, const_iterator __k2)\n-        {\n-\t  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n-\t\t\t\t   && __i2 <= _M_iend());\n-\t  __glibcxx_requires_valid_range(__k1, __k2);\n-\t  return this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n-\t\t\t       __k1.base(), __k2 - __k1);\n-\t}\n-\n+      replace(iterator __i1, iterator __i2,\n+\t      const_iterator __k1, const_iterator __k2)\n+      {\n+\t_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n+\t\t\t\t && __i2 <= _M_iend());\n+\t__glibcxx_requires_valid_range(__k1, __k2);\n+\treturn this->replace(__i1 - _M_ibegin(), __i2 - __i1,\n+\t\t\t     __k1.base(), __k2 - __k1);\n+      }\n+      \n     private:\n       template<class _Integer>\n \tbasic_string&"}, {"sha": "dda81bf1c02331da0a02ee37a77853f520b3add3", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "patch": "@@ -86,7 +86,7 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     typename deque<_Tp,_Alloc>::iterator\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     insert(iterator position, const value_type& __x)\n     {\n       if (position._M_cur == this->_M_impl._M_start._M_cur)\n@@ -107,12 +107,12 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     typename deque<_Tp,_Alloc>::iterator\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     erase(iterator __position)\n     {\n       iterator __next = __position;\n       ++__next;\n-      size_type __index = __position - this->_M_impl._M_start;\n+      const size_type __index = __position - this->_M_impl._M_start;\n       if (__index < (size() >> 1))\n \t{\n \t  std::copy_backward(this->_M_impl._M_start, __position, __next);\n@@ -128,7 +128,7 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     typename deque<_Tp,_Alloc>::iterator\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     erase(iterator __first, iterator __last)\n     {\n       if (__first == this->_M_impl._M_start\n@@ -166,7 +166,7 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     void\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     clear()\n     {\n       for (_Map_pointer __node = this->_M_impl._M_start._M_node + 1;\n@@ -195,12 +195,12 @@ namespace _GLIBCXX_STD\n   template <typename _Tp, class _Alloc>\n     template <typename _InputIterator>\n       void\n-      deque<_Tp,_Alloc>\n+      deque<_Tp, _Alloc>\n       ::_M_assign_aux(_InputIterator __first, _InputIterator __last,\n \t\t      input_iterator_tag)\n       {\n         iterator __cur = begin();\n-        for ( ; __first != __last && __cur != end(); ++__cur, ++__first)\n+        for (; __first != __last && __cur != end(); ++__cur, ++__first)\n           *__cur = *__first;\n         if (__first == __last)\n           erase(__cur, end());\n@@ -210,7 +210,7 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     void\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     _M_fill_insert(iterator __pos, size_type __n, const value_type& __x)\n     {\n       if (__pos._M_cur == this->_M_impl._M_start._M_cur)\n@@ -250,7 +250,7 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     void\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     _M_fill_initialize(const value_type& __value)\n     {\n       _Map_pointer __cur;\n@@ -274,14 +274,14 @@ namespace _GLIBCXX_STD\n   template <typename _Tp, typename _Alloc>\n     template <typename _InputIterator>\n       void\n-      deque<_Tp,_Alloc>::\n+      deque<_Tp, _Alloc>::\n       _M_range_initialize(_InputIterator __first, _InputIterator __last,\n                           input_iterator_tag)\n       {\n         this->_M_initialize_map(0);\n         try\n           {\n-            for ( ; __first != __last; ++__first)\n+            for (; __first != __last; ++__first)\n               push_back(*__first);\n           }\n         catch(...)\n@@ -294,7 +294,7 @@ namespace _GLIBCXX_STD\n   template <typename _Tp, typename _Alloc>\n     template <typename _ForwardIterator>\n       void\n-      deque<_Tp,_Alloc>::\n+      deque<_Tp, _Alloc>::\n       _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,\n                           forward_iterator_tag)\n       {\n@@ -327,7 +327,7 @@ namespace _GLIBCXX_STD\n   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.\n   template <typename _Tp, typename _Alloc>\n     void\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     _M_push_back_aux(const value_type& __t)\n     {\n       value_type __t_copy = __t;\n@@ -350,7 +350,7 @@ namespace _GLIBCXX_STD\n   // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.\n   template <typename _Tp, typename _Alloc>\n     void\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     _M_push_front_aux(const value_type& __t)\n     {\n       value_type __t_copy = __t;\n@@ -373,7 +373,7 @@ namespace _GLIBCXX_STD\n \n   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.\n   template <typename _Tp, typename _Alloc>\n-    void deque<_Tp,_Alloc>::\n+    void deque<_Tp, _Alloc>::\n     _M_pop_back_aux()\n     {\n       _M_deallocate_node(this->_M_impl._M_finish._M_first);\n@@ -388,7 +388,7 @@ namespace _GLIBCXX_STD\n   //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,\n   // then the deque must have at least two nodes.\n   template <typename _Tp, typename _Alloc>\n-    void deque<_Tp,_Alloc>::\n+    void deque<_Tp, _Alloc>::\n     _M_pop_front_aux()\n     {\n       std::_Destroy(this->_M_impl._M_start._M_cur);\n@@ -400,7 +400,7 @@ namespace _GLIBCXX_STD\n   template <typename _Tp, typename _Alloc>\n     template <typename _InputIterator>\n       void\n-      deque<_Tp,_Alloc>::\n+      deque<_Tp, _Alloc>::\n       _M_range_insert_aux(iterator __pos,\n                           _InputIterator __first, _InputIterator __last,\n                           input_iterator_tag)\n@@ -409,12 +409,12 @@ namespace _GLIBCXX_STD\n   template <typename _Tp, typename _Alloc>\n     template <typename _ForwardIterator>\n       void\n-      deque<_Tp,_Alloc>::\n+      deque<_Tp, _Alloc>::\n       _M_range_insert_aux(iterator __pos,\n                           _ForwardIterator __first, _ForwardIterator __last,\n                           forward_iterator_tag)\n       {\n-        size_type __n = std::distance(__first, __last);\n+        const size_type __n = std::distance(__first, __last);\n         if (__pos._M_cur == this->_M_impl._M_start._M_cur)\n \t  {\n \t    iterator __new_start = _M_reserve_elements_at_front(__n);\n@@ -452,7 +452,7 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     typename deque<_Tp, _Alloc>::iterator\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     _M_insert_aux(iterator __pos, const value_type& __x)\n     {\n       difference_type __index = __pos - this->_M_impl._M_start;\n@@ -485,11 +485,11 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     void\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     _M_insert_aux(iterator __pos, size_type __n, const value_type& __x)\n     {\n       const difference_type __elems_before = __pos - this->_M_impl._M_start;\n-      size_type __length = this->size();\n+      const size_type __length = this->size();\n       value_type __x_copy = __x;\n       if (__elems_before < difference_type(__length / 2))\n \t{\n@@ -566,13 +566,13 @@ namespace _GLIBCXX_STD\n   template <typename _Tp, typename _Alloc>\n     template <typename _ForwardIterator>\n       void\n-      deque<_Tp,_Alloc>::\n+      deque<_Tp, _Alloc>::\n       _M_insert_aux(iterator __pos,\n                     _ForwardIterator __first, _ForwardIterator __last,\n                     size_type __n)\n       {\n         const difference_type __elemsbefore = __pos - this->_M_impl._M_start;\n-        size_type __length = size();\n+        const size_type __length = size();\n         if (static_cast<size_type>(__elemsbefore) < __length / 2)\n \t  {\n \t    iterator __new_start = _M_reserve_elements_at_front(__n);\n@@ -650,10 +650,10 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     void\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     _M_new_elements_at_front(size_type __new_elems)\n     {\n-      size_type __new_nodes\n+      const size_type __new_nodes\n \t= (__new_elems + _S_buffer_size() - 1) / _S_buffer_size();\n       _M_reserve_map_at_front(__new_nodes);\n       size_type __i;\n@@ -672,11 +672,11 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     void\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     _M_new_elements_at_back(size_type __new_elems)\n     {\n-      size_type __new_nodes\n-          = (__new_elems + _S_buffer_size() - 1) / _S_buffer_size();\n+      const size_type __new_nodes\n+\t= (__new_elems + _S_buffer_size() - 1) / _S_buffer_size();\n       _M_reserve_map_at_back(__new_nodes);\n       size_type __i;\n       try\n@@ -694,12 +694,12 @@ namespace _GLIBCXX_STD\n \n   template <typename _Tp, typename _Alloc>\n     void\n-    deque<_Tp,_Alloc>::\n+    deque<_Tp, _Alloc>::\n     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)\n     {\n-      size_type __old_num_nodes\n+      const size_type __old_num_nodes\n \t= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;\n-      size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;\n+      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;\n \n       _Map_pointer __new_nstart;\n       if (this->_M_impl._M_map_size > 2 * __new_num_nodes)"}, {"sha": "b0502da7964846cd5ed630dc1019286ae2c8a9bf", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "patch": "@@ -721,8 +721,8 @@ namespace std\n \t    typename iterator_traits<_InputIterator1>::value_type,\n \t    typename iterator_traits<_InputIterator2>::value_type>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n-\n-      for ( ; __first1 != __last1; ++__first1, ++__first2)\n+      \n+      for (; __first1 != __last1; ++__first1, ++__first2)\n \tif (!(*__first1 == *__first2))\n \t  return false;\n       return true;\n@@ -753,7 +753,7 @@ namespace std\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      for ( ; __first1 != __last1; ++__first1, ++__first2)\n+      for (; __first1 != __last1; ++__first1, ++__first2)\n \tif (!__binary_pred(*__first1, *__first2))\n \t  return false;\n       return true;\n@@ -788,7 +788,8 @@ namespace std\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n-      for (;__first1 != __last1 && __first2 != __last2; ++__first1, ++__first2)\n+      for (; __first1 != __last1 && __first2 != __last2;\n+\t   ++__first1, ++__first2)\n \t{\n \t  if (*__first1 < *__first2)\n \t    return true;\n@@ -823,8 +824,8 @@ namespace std\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n-      for ( ; __first1 != __last1 && __first2 != __last2\n-\t    ; ++__first1, ++__first2)\n+      for (; __first1 != __last1 && __first2 != __last2;\n+\t   ++__first1, ++__first2)\n \t{\n \t  if (__comp(*__first1, *__first2))\n \t    return true;"}, {"sha": "3185bd754ced19f86aa941a4c354ae3747eabbcb", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "patch": "@@ -323,7 +323,8 @@ namespace _GLIBCXX_STD\n     }\n \n     const_iterator \n-    operator+(difference_type __i) const {\n+    operator+(difference_type __i) const\n+    {\n       const_iterator __tmp = *this;\n       return __tmp += __i;\n     }"}, {"sha": "cba35460d7abd34e9fec8445d8d7fdb3dfbf8961", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "patch": "@@ -117,7 +117,10 @@ namespace std\n     inline void\n     __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  __false_type)\n-    { for ( ; __first != __last; ++__first) std::_Destroy(&*__first); }\n+    {\n+      for (; __first != __last; ++__first)\n+\tstd::_Destroy(&*__first);\n+    }\n \n   /**\n    * @if maint"}, {"sha": "9dc9efb72d03d62c7acfa88797b23aa6362cf61a", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "patch": "@@ -419,15 +419,16 @@ namespace _GLIBCXX_STD\n     };\n \n   template<typename _Tp, typename _Alloc>\n-  _Deque_base<_Tp,_Alloc>::~_Deque_base()\n-  {\n-    if (this->_M_impl._M_map)\n+    _Deque_base<_Tp, _Alloc>::\n+    ~_Deque_base()\n     {\n-      _M_destroy_nodes(this->_M_impl._M_start._M_node,\n-\t\t       this->_M_impl._M_finish._M_node + 1);\n-      _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);\n+      if (this->_M_impl._M_map)\n+\t{\n+\t  _M_destroy_nodes(this->_M_impl._M_start._M_node,\n+\t\t\t   this->_M_impl._M_finish._M_node + 1);\n+\t  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);\n+\t}\n     }\n-  }\n \n   /**\n    *  @if maint\n@@ -441,12 +442,14 @@ namespace _GLIBCXX_STD\n   */\n   template<typename _Tp, typename _Alloc>\n     void\n-    _Deque_base<_Tp,_Alloc>::_M_initialize_map(size_t __num_elements)\n+    _Deque_base<_Tp, _Alloc>::\n+    _M_initialize_map(size_t __num_elements)\n     {\n-      size_t __num_nodes = __num_elements / __deque_buf_size(sizeof(_Tp)) + 1;\n+      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))\n+\t\t\t\t  + 1);\n \n       this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,\n-\t\t\t\t   size_t(__num_nodes + 2));\n+\t\t\t\t\t   size_t(__num_nodes + 2));\n       this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);\n \n       // For \"small\" maps (needing less than _M_map_size nodes), allocation\n@@ -478,7 +481,8 @@ namespace _GLIBCXX_STD\n \n   template<typename _Tp, typename _Alloc>\n     void\n-    _Deque_base<_Tp,_Alloc>::_M_create_nodes(_Tp** __nstart, _Tp** __nfinish)\n+    _Deque_base<_Tp, _Alloc>::\n+    _M_create_nodes(_Tp** __nstart, _Tp** __nfinish)\n     {\n       _Tp** __cur;\n       try\n@@ -495,7 +499,8 @@ namespace _GLIBCXX_STD\n \n   template<typename _Tp, typename _Alloc>\n     void\n-    _Deque_base<_Tp,_Alloc>::_M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)\n+    _Deque_base<_Tp, _Alloc>::\n+    _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)\n     {\n       for (_Tp** __n = __nstart; __n < __nfinish; ++__n)\n \t_M_deallocate_node(*__n);\n@@ -923,7 +928,10 @@ namespace _GLIBCXX_STD\n        */\n       reference\n       at(size_type __n)\n-      { _M_range_check(__n); return (*this)[__n]; }\n+      {\n+\t_M_range_check(__n);\n+\treturn (*this)[__n];\n+      }\n \n       /**\n        *  @brief  Provides access to the data contained in the %deque."}, {"sha": "92a5bb01fe6cdb8243b589d76b0f0fe78451d387", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "patch": "@@ -141,7 +141,8 @@ namespace std\n   // 181.  make_pair() unintended behavior\n   template<class _T1, class _T2>\n     inline pair<_T1, _T2>\n-    make_pair(_T1 __x, _T2 __y) { return pair<_T1, _T2>(__x, __y); }\n+    make_pair(_T1 __x, _T2 __y)\n+    { return pair<_T1, _T2>(__x, __y); }\n } // namespace std\n \n #endif /* _PAIR_H */"}, {"sha": "1682986d3d81641db135acc00256b5120b402892", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "patch": "@@ -81,7 +81,7 @@ namespace _GLIBCXX_STD\n \t_Tp*           _M_start;\n \t_Tp*           _M_finish;\n \t_Tp*           _M_end_of_storage;\n-\t_Vector_impl (_Alloc const& __a)\n+\t_Vector_impl(_Alloc const& __a)\n \t: _Alloc(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)\n \t{ }\n       };\n@@ -799,7 +799,7 @@ namespace _GLIBCXX_STD\n         _M_range_initialize(_InputIterator __first,\n \t\t\t    _InputIterator __last, input_iterator_tag)\n         {\n-\t  for ( ; __first != __last; ++__first)\n+\t  for (; __first != __last; ++__first)\n \t    push_back(*__first);\n \t}\n \n@@ -809,7 +809,7 @@ namespace _GLIBCXX_STD\n         _M_range_initialize(_ForwardIterator __first,\n \t\t\t    _ForwardIterator __last, forward_iterator_tag)\n         {\n-\t  size_type __n = std::distance(__first, __last);\n+\t  const size_type __n = std::distance(__first, __last);\n \t  this->_M_impl._M_start = this->_M_allocate(__n);\n \t  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;\n \t  this->_M_impl._M_finish = std::uninitialized_copy(__first, __last,"}, {"sha": "38401855b986d6c0ea6786623907cf652b11252b", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43da93a7281a7c66c0ae23abdf9e501c4b5bbd88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=43da93a7281a7c66c0ae23abdf9e501c4b5bbd88", "patch": "@@ -91,7 +91,7 @@ namespace _GLIBCXX_STD\n     vector<_Tp, _Alloc>::\n     insert(iterator __position, const value_type& __x)\n     {\n-      size_type __n = __position - begin();\n+      const size_type __n = __position - begin();\n       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage\n \t  && __position == end())\n \t{\n@@ -193,7 +193,7 @@ namespace _GLIBCXX_STD\n \t\t    input_iterator_tag)\n       {\n \titerator __cur(begin());\n-\tfor ( ; __first != __last && __cur != end(); ++__cur, ++__first)\n+\tfor (; __first != __last && __cur != end(); ++__cur, ++__first)\n \t  *__cur = *__first;\n \tif (__first == __last)\n \t  erase(__cur, end());\n@@ -204,11 +204,11 @@ namespace _GLIBCXX_STD\n   template<typename _Tp, typename _Alloc>\n     template<typename _ForwardIterator>\n       void\n-      vector<_Tp,_Alloc>::\n+      vector<_Tp, _Alloc>::\n       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n \t\t    forward_iterator_tag)\n       {\n-\tsize_type __len = std::distance(__first, __last);\n+\tconst size_type __len = std::distance(__first, __last);\n \n \tif (__len > capacity())\n \t  {\n@@ -242,7 +242,7 @@ namespace _GLIBCXX_STD\n \n   template<typename _Tp, typename _Alloc>\n     void\n-    vector<_Tp,_Alloc>::\n+    vector<_Tp, _Alloc>::\n     _M_insert_aux(iterator __position, const _Tp& __x)\n     {\n       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)\n@@ -293,7 +293,7 @@ namespace _GLIBCXX_STD\n \n   template<typename _Tp, typename _Alloc>\n     void\n-    vector<_Tp,_Alloc>::\n+    vector<_Tp, _Alloc>::\n     _M_fill_insert(iterator __position, size_type __n, const value_type& __x)\n     {\n       if (__n != 0)\n@@ -360,11 +360,11 @@ namespace _GLIBCXX_STD\n \n   template<typename _Tp, typename _Alloc> template<typename _InputIterator>\n     void\n-    vector<_Tp,_Alloc>::\n+    vector<_Tp, _Alloc>::\n     _M_range_insert(iterator __pos, _InputIterator __first,\n \t\t    _InputIterator __last, input_iterator_tag)\n     {\n-      for ( ; __first != __last; ++__first)\n+      for (; __first != __last; ++__first)\n \t{\n \t  __pos = insert(__pos, *__first);\n \t  ++__pos;\n@@ -374,13 +374,13 @@ namespace _GLIBCXX_STD\n   template<typename _Tp, typename _Alloc>\n     template<typename _ForwardIterator>\n       void\n-      vector<_Tp,_Alloc>::\n+      vector<_Tp, _Alloc>::\n       _M_range_insert(iterator __position,_ForwardIterator __first,\n \t\t      _ForwardIterator __last, forward_iterator_tag)\n       {\n \tif (__first != __last)\n \t  {\n-\t    size_type __n = std::distance(__first, __last);\n+\t    const size_type __n = std::distance(__first, __last);\n \t    if (size_type(this->_M_impl._M_end_of_storage\n \t\t\t  - this->_M_impl._M_finish) >= __n)\n \t      {"}]}