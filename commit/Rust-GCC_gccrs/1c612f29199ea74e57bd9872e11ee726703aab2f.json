{"sha": "1c612f29199ea74e57bd9872e11ee726703aab2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM2MTJmMjkxOTllYTc0ZTU3YmQ5ODcyZTExZWU3MjY3MDNhYWIyZg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-06-22T15:32:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T15:32:18Z"}, "message": "s-rannum.adb, [...]: Minor reformatting.\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* s-rannum.adb, a-nudira.adb, types.ads, freeze.adb, sem_aggr.adb,\n\texp_aggr.adb: Minor reformatting.\n\t* gnat_rm.texi: Document GNAT.MBBS_Discrete_Random and\n\tGNAT.MBSS_Float_Random.\n\t* g-mbdira.adb, g-mbflra.adb, g-mbdira.ads, g-mbflra.ads: Fix header.\n\nFrom-SVN: r161194", "tree": {"sha": "6be3a62286a2a9099d500772a40a7709b0eb4b9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6be3a62286a2a9099d500772a40a7709b0eb4b9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c612f29199ea74e57bd9872e11ee726703aab2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c612f29199ea74e57bd9872e11ee726703aab2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c612f29199ea74e57bd9872e11ee726703aab2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c612f29199ea74e57bd9872e11ee726703aab2f/comments", "author": null, "committer": null, "parents": [{"sha": "82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82c2f1bbd38efde4a5891659ee1eeffbbfae56f6"}], "stats": {"total": 161, "additions": 99, "deletions": 62}, "files": [{"sha": "b80c597834f0bc1014f48407b7003e9e5f6ee227", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -1,3 +1,11 @@\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-rannum.adb, a-nudira.adb, types.ads, freeze.adb, sem_aggr.adb,\n+\texp_aggr.adb: Minor reformatting.\n+\t* gnat_rm.texi: Document GNAT.MBBS_Discrete_Random and\n+\tGNAT.MBSS_Float_Random.\n+\t* g-mbdira.adb, g-mbflra.adb, g-mbdira.ads, g-mbflra.ads: Fix header.\n+\n 2010-06-22  Paul Hilfinger  <hilfinger@adacore.com>\n \n \t* a-nudira.adb, a-nudira.ads, a-nuflra.adb, a-nuflra.ads,"}, {"sha": "b8a31274550ad9ca8e639305899e90a35e8cf5ba", "filename": "gcc/ada/a-nudira.adb", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fa-nudira.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fa-nudira.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-nudira.adb?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -58,33 +58,39 @@ package body Ada.Numerics.Discrete_Random is\n       return Rep_Random (Gen.Rep);\n    end Random;\n \n-   procedure Reset (Gen       : Generator;\n-                    Initiator : Integer) is\n+   procedure Reset\n+     (Gen       : Generator;\n+      Initiator : Integer)\n+   is\n       G : Rep_Generator renames Gen.Rep'Unrestricted_Access.all;\n    begin\n       Reset (G, Initiator);\n    end Reset;\n \n-   procedure Reset (Gen       : Generator) is\n+   procedure Reset (Gen : Generator) is\n       G : Rep_Generator renames Gen.Rep'Unrestricted_Access.all;\n    begin\n       Reset (G);\n    end Reset;\n \n-   procedure Save  (Gen        : Generator;\n-                    To_State   : out State) is\n+   procedure Save\n+     (Gen        : Generator;\n+      To_State   : out State)\n+   is\n    begin\n       Save (Gen.Rep, State (To_State));\n    end Save;\n \n-   procedure Reset (Gen        : Generator;\n-                    From_State : State) is\n+   procedure Reset\n+     (Gen        : Generator;\n+      From_State : State)\n+   is\n       G : Rep_Generator renames Gen.Rep'Unrestricted_Access.all;\n    begin\n       Reset (G, From_State);\n    end Reset;\n \n-   function Image (Of_State    : State)  return String is\n+   function Image (Of_State : State)  return String is\n    begin\n       return Image (Rep_State (Of_State));\n    end Image;"}, {"sha": "c4e3b01c7a1ca2cb69732417ea66bf4592091396", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -2861,14 +2861,14 @@ package body Exp_Aggr is\n          if Is_CPP_Constructor_Call (Expression (Comp)) then\n             Append_List_To (L,\n               Build_Initialization_Call (Loc,\n-                Id_Ref => Make_Selected_Component (Loc,\n-                            Prefix => New_Copy_Tree (Target),\n-                            Selector_Name => New_Occurrence_Of (Selector,\n-                                                                   Loc)),\n-                Typ    => Etype (Selector),\n-                Enclos_Type => Typ,\n+                Id_Ref            => Make_Selected_Component (Loc,\n+                                       Prefix        => New_Copy_Tree (Target),\n+                                       Selector_Name =>\n+                                         New_Occurrence_Of (Selector, Loc)),\n+                Typ               => Etype (Selector),\n+                Enclos_Type       => Typ,\n                 With_Default_Init => True,\n-                Constructor_Ref => Expression (Comp)));\n+                Constructor_Ref   => Expression (Comp)));\n \n          --  Ada 2005 (AI-287): For each default-initialized component generate\n          --  a call to the corresponding IP subprogram if available.\n@@ -2887,8 +2887,8 @@ package body Exp_Aggr is\n \n             declare\n                Ctype            : constant Entity_Id := Etype (Selector);\n-               Inside_Allocator : Boolean   := False;\n-               P                : Node_Id   := Parent (N);\n+               Inside_Allocator : Boolean            := False;\n+               P                : Node_Id            := Parent (N);\n \n             begin\n                if Is_Task_Type (Ctype) or else Has_Task (Ctype) then\n@@ -2909,12 +2909,12 @@ package body Exp_Aggr is\n \n             Append_List_To (L,\n               Build_Initialization_Call (Loc,\n-                Id_Ref => Make_Selected_Component (Loc,\n-                            Prefix => New_Copy_Tree (Target),\n-                            Selector_Name => New_Occurrence_Of (Selector,\n-                                                                   Loc)),\n-                Typ    => Etype (Selector),\n-                Enclos_Type => Typ,\n+                Id_Ref            => Make_Selected_Component (Loc,\n+                                       Prefix        => New_Copy_Tree (Target),\n+                                       Selector_Name =>\n+                                         New_Occurrence_Of (Selector, Loc)),\n+                Typ               => Etype (Selector),\n+                Enclos_Type       => Typ,\n                 With_Default_Init => True));\n \n          --  Prepare for component assignment"}, {"sha": "5e5877e20b5ba97a608ed780348287472df7ffce", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -211,10 +211,10 @@ package body Freeze is\n \n    begin\n \n-      --  if the renamed subprogram is intrinsic, there is no need for a\n-      --  wrapper body: we set the alias that will be called and expanded\n-      --  which completes the declaration. This transformation is only\n-      --  legal if the renamed entity has already been elaborated.\n+      --  If the renamed subprogram is intrinsic, there is no need for a\n+      --  wrapper body: we set the alias that will be called and expanded which\n+      --  completes the declaration. This transformation is only legal if the\n+      --  renamed entity has already been elaborated.\n \n       --  Note that it is legal for a renaming_as_body to rename an intrinsic\n       --  subprogram, as long as the renaming occurs before the new entity"}, {"sha": "27344dc454d47d4aeae7b1fe11613bc248250e5f", "filename": "gcc/ada/g-mbdira.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fg-mbdira.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fg-mbdira.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-mbdira.adb?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---            G N A T . M B S S _ D I S C R E T E _ R A N D O M             --\n+--            G N A T . M B B S _ D I S C R E T E _ R A N D O M             --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --"}, {"sha": "c29667e1a0b84eb6c13e402690c7c0b5ae2fb23b", "filename": "gcc/ada/g-mbdira.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fg-mbdira.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fg-mbdira.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-mbdira.ads?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---            G N A T . M B S S _ D I S C R E T E _ R A N D O M             --\n+--            G N A T . M B B S _ D I S C R E T E _ R A N D O M             --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --"}, {"sha": "2b4037e9a3d603d5437063012d46d9a06b237f25", "filename": "gcc/ada/g-mbflra.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fg-mbflra.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fg-mbflra.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-mbflra.adb?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---               G N A T . M B S S _ F L O A T _ R A N D O M                --\n+--               G N A T . M B B S _ F L O A T _ R A N D O M                --\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --"}, {"sha": "4deac482b529b9462bd74f54131a1a19bf333dc1", "filename": "gcc/ada/g-mbflra.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fg-mbflra.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fg-mbflra.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-mbflra.ads?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -2,7 +2,7 @@\n --                                                                          --\n --                         GNAT RUN-TIME COMPONENTS                         --\n --                                                                          --\n---               G N A T . M B S S _ F L O A T _ R A N D O M                --\n+--               G N A T . M B B S _ F L O A T _ R A N D O M                --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --"}, {"sha": "9fe022bbd22ff28c797dcc0846cf52db61bade2f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -363,6 +363,8 @@ The GNAT Library\n * GNAT.IO (g-io.ads)::\n * GNAT.IO_Aux (g-io_aux.ads)::\n * GNAT.Lock_Files (g-locfil.ads)::\n+* GNAT.MBBS_Discrete_Random (g-mbdira.ads)::\n+* GNAT.MBBS_Float_Random (g-mbflra.ads)::\n * GNAT.MD5 (g-md5.ads)::\n * GNAT.Memory_Dump (g-memdum.ads)::\n * GNAT.Most_Recent_Exception (g-moreex.ads)::\n@@ -13547,6 +13549,8 @@ of GNAT, and will generate a warning message.\n * GNAT.IO (g-io.ads)::\n * GNAT.IO_Aux (g-io_aux.ads)::\n * GNAT.Lock_Files (g-locfil.ads)::\n+* GNAT.MBBS_Discrete_Random (g-mbdira.ads)::\n+* GNAT.MBBS_Float_Random (g-mbflra.ads)::\n * GNAT.MD5 (g-md5.ads)::\n * GNAT.Memory_Dump (g-memdum.ads)::\n * GNAT.Most_Recent_Exception (g-moreex.ads)::\n@@ -14431,6 +14435,24 @@ for whether a file exists, and functions for reading a line of text.\n Provides a general interface for using files as locks.  Can be used for\n providing program level synchronization.\n \n+@node GNAT.MBBS_Discrete_Random (g-mbdira.ads)\n+@section @code{GNAT.MBBS_Discrete_Random} (@file{g-mbdira.ads})\n+@cindex @code{GNAT.MBBS_Discrete_Random} (@file{g-mbdira.ads})\n+@cindex Random number generation\n+\n+@noindent\n+The original implementation of @code{Ada.Numerics.Discrete_Random}.  Uses\n+a modified version of the Blum-Blum-Shub generator.\n+\n+@node GNAT.MBBS_Float_Random (g-mbflra.ads)\n+@section @code{GNAT.MBBS_Float_Random} (@file{g-mbflra.ads})\n+@cindex @code{GNAT.MBBS_Float_Random} (@file{g-mbflra.ads})\n+@cindex Random number generation\n+\n+@noindent\n+The original implementation of @code{Ada.Numerics.Float_Random}.  Uses\n+a modified version of the Blum-Blum-Shub generator.\n+\n @node GNAT.MD5 (g-md5.ads)\n @section @code{GNAT.MD5} (@file{g-md5.ads})\n @cindex @code{GNAT.MD5} (@file{g-md5.ads})"}, {"sha": "29a8e949c822d0f1f66589d844dd4500689a109f", "filename": "gcc/ada/s-rannum.adb", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rannum.adb?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -203,54 +203,54 @@ package body System.Random_Numbers is\n \n    function Random_Float_Template (Gen : Generator) return Real is\n       --  This code generates random floating-point numbers from unsigned\n-      --  integers. Assuming that Real'Machine_Radix = 2, it can deliver\n-      --  all machine values of type Real (at least as implied by\n-      --  Real'Machine_Mantissa and Real'Machine_Emin), which is not true\n-      --  of the standard method (to which we fall back for non-binary\n-      --  radix): computing Real(<random integer>) / (<max random integer>+1).\n-      --  To do so, we first extract an (M-1)-bit significand (where M\n-      --  is Real'Machine_Mantissa), and then decide on a normalized\n-      --  exponent by repeated coin flips, decrementing from 0 as long as\n-      --  we flip heads (1 bits). This yields the proper geometric\n-      --  distribution for the exponent: in a uniformly distributed set of\n-      --  floating-point numbers, 1/2 of them will be in [0.5, 1), 1/4 will\n-      --  be in [0.25, 0.5), and so forth. If the process reaches\n-      --  Machine_Emin (an extremely rare event), it uses the selected\n-      --  mantissa bits as an unnormalized fraction with Machine_Emin as\n-      --  exponent. Otherwise, it adds a leading bit to the selected\n-      --  mantissa bits (thus giving a normalized fraction) and adjusts by\n-      --  the chosen exponent. The algorithm attempts to be stingy with\n-      --  random integers. In the worst case, it can consume roughly\n-      --  -Real'Machine_Emin/32 32-bit integers, but this case occurs with\n-      --  probability 2**Machine_Emin, and the expected number of calls to\n-      --  integer-valued Random is 1.\n+      --  integers. Assuming that Real'Machine_Radix = 2, it can deliver all\n+      --  machine values of type Real (as implied by Real'Machine_Mantissa and\n+      --  Real'Machine_Emin), which is not true of the standard method (to\n+      --  which we fall back for non-binary radix): computing Real(<random\n+      --  integer>) / (<max random integer>+1). To do so, we first extract an\n+      --  (M-1)-bit significand (where M is Real'Machine_Mantissa), and then\n+      --  decide on a normalized exponent by repeated coin flips, decrementing\n+      --  from 0 as long as we flip heads (1 bits). This yields the proper\n+      --  geometric distribution for the exponent: in a uniformly distributed\n+      --  set of floating-point numbers, 1/2 of them will be in [0.5, 1), 1/4\n+      --  will be in [0.25, 0.5), and so forth. If the process reaches\n+      --  Machine_Emin (an extremely rare event), it uses the selected mantissa\n+      --  bits as an unnormalized fraction with Machine_Emin as exponent.\n+      --  Otherwise, it adds a leading bit to the selected mantissa bits (thus\n+      --  giving a normalized fraction) and adjusts by the chosen exponent. The\n+      --  algorithm attempts to be stingy with random integers. In the worst\n+      --  case, it can consume roughly -Real'Machine_Emin/32 32-bit integers,\n+      --  but this case occurs with probability 2**Machine_Emin, and the\n+      --  expected number of calls to integer-valued Random is 1.\n \n    begin\n       if Real'Machine_Radix /= 2 then\n          declare\n-            Val : constant Real := Real'Machine\n-              (Real (Unsigned'(Random (Gen))) * 2.0**(-Unsigned'Size));\n+            Val : constant Real :=\n+                    Real'Machine\n+                      (Real (Unsigned'(Random (Gen))) * 2.0**(-Unsigned'Size));\n          begin\n             if Val < 1.0 then\n                return Real'Base (Val);\n             else\n                return Real'Pred (1.0);\n             end if;\n          end;\n+\n       else\n          declare\n             Mant_Bits : constant Integer := Real'Machine_Mantissa - 1;\n             Mant_Mask : constant Unsigned := 2**Mant_Bits - 1;\n             Adjust32  : constant Integer := Real'Size - Unsigned_32'Size;\n             Leftover  : constant Integer :=\n-              Unsigned'Size - Real'Machine_Mantissa + 1;\n-\n+                          Unsigned'Size - Real'Machine_Mantissa + 1;\n             V         : constant Unsigned := Random (Gen);\n             Mant      : constant Unsigned := V and Mant_Mask;\n             Rand_Bits : Unsigned_32;\n             Exp       : Integer;\n             Bits_Left : Integer;\n             Result    : Real;\n+\n          begin\n             Rand_Bits := Unsigned_32 (Shift_Right (V, Adjust32));\n             Exp := 0;\n@@ -271,6 +271,7 @@ package body System.Random_Numbers is\n                   Rand_Bits := Random (Gen);\n                end if;\n             end loop;\n+\n             return Result;\n          end;\n       end if;"}, {"sha": "5ff55cec1b21fa325278e659aca1d03be1826f4f", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -1800,8 +1800,8 @@ package body Sem_Aggr is\n \n                elsif Is_Tagged_Type (Etype (Expression (Assoc))) then\n                   Check_Dynamically_Tagged_Expression\n-                    (Expr => Expression (Assoc),\n-                     Typ  => Component_Type (Etype (N)),\n+                    (Expr        => Expression (Assoc),\n+                     Typ         => Component_Type (Etype (N)),\n                      Related_Nod => N);\n                end if;\n "}, {"sha": "5d7784dc03be2a10e2c1c11f6180867610a46d78", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c612f29199ea74e57bd9872e11ee726703aab2f/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=1c612f29199ea74e57bd9872e11ee726703aab2f", "patch": "@@ -503,10 +503,10 @@ package Types is\n    --  The type Char is used for character data internally in the compiler, but\n    --  character codes in the source are represented by the Char_Code type.\n    --  Each character literal in the source is interpreted as being one of the\n-   --  16#7FFF_FFFF possible Wide_Wide_Character codes, and a unique Integer\n-   --  Value is assigned, corresponding to the UTF_32 value, which also\n-   --  corresponds to the POS value in the Wide_Wide_Character type, and also\n-   --  corresponds to the POS value in the Wide_Character and Character types\n+   --  16#7FFF_FFFF# possible Wide_Wide_Character codes, and a unique Integer\n+   --  value is assigned, corresponding to the UTF-32 value, which also\n+   --  corresponds to the Pos value in the Wide_Wide_Character type, and also\n+   --  corresponds to the Pos value in the Wide_Character and Character types\n    --  for values that are in appropriate range. String literals are similarly\n    --  interpreted as a sequence of such codes.\n "}]}