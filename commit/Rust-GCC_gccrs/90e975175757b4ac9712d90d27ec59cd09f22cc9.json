{"sha": "90e975175757b4ac9712d90d27ec59cd09f22cc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlOTc1MTc1NzU3YjRhYzk3MTJkOTBkMjdlYzU5Y2QwOWYyMmNjOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-03-18T22:13:20Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-12T08:29:08Z"}, "message": "[Ada] Implement AI12-0269 No_Return for functions\n\n2020-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* einfo.ads (No_Return): Document it for all subprograms.\n\t* einfo.adb (Set_No_Return): Adjust assertion accordingly.\n\t* sem_ch3.adb (Check_Abstract_Overriding): Implement the\n\tcheck prescribed by RM 6.5.1(6/2) here instead of...\n\t(Derive_Subprogram): Adjust comment accordingly.\n\t* sem_disp.adb (Override_Dispatching_Operation): ...here.\n\tRemove superfluous return statement.\n\t* sem_ch6.adb (Check_No_Return_Expression): New procedure.\n\t(Analyze_Function_Return): Call it to implement the check\n\tprescribed by AI12-0269 for simple return statements of\n\tNo_Return functions, and also checks extended statements.\n\t(Analyze_Return_Statement): Only give an error on a return\n\tstatement in No_Return procedures.  Use idiomatic form.\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Adjust error\n\tmessage for No_Return renaming subprogram.\n\t* sem_prag.adb (Analyze_Pragma) <Pragma_No_Return>: Accept\n\tit on functions and generic functions in Ada 2020.", "tree": {"sha": "a63f89330826d72e6a5149b4cc5d07561cfafdd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63f89330826d72e6a5149b4cc5d07561cfafdd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90e975175757b4ac9712d90d27ec59cd09f22cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e975175757b4ac9712d90d27ec59cd09f22cc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e975175757b4ac9712d90d27ec59cd09f22cc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e975175757b4ac9712d90d27ec59cd09f22cc9/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eda72164ade26fe3886515dd55dd9716ff076140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda72164ade26fe3886515dd55dd9716ff076140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eda72164ade26fe3886515dd55dd9716ff076140"}], "stats": {"total": 126, "additions": 101, "deletions": 25}, "files": [{"sha": "9176f4a7de1b7bceff433b2e96947b17914f4b88", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=90e975175757b4ac9712d90d27ec59cd09f22cc9", "patch": "@@ -6180,8 +6180,7 @@ package body Einfo is\n \n    procedure Set_No_Return (Id : E; V : B := True) is\n    begin\n-      pragma Assert\n-        (V = False or else Ekind_In (Id, E_Procedure, E_Generic_Procedure));\n+      pragma Assert (Is_Subprogram (Id) or else Is_Generic_Subprogram (Id));\n       Set_Flag113 (Id, V);\n    end Set_No_Return;\n "}, {"sha": "a1cfd7d37ce5e076b9bc9697df44c7f260a47945", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=90e975175757b4ac9712d90d27ec59cd09f22cc9", "patch": "@@ -3720,8 +3720,8 @@ package Einfo is\n --       pragma No_Component_Reordering applies.\n \n --    No_Return (Flag113)\n---       Defined in all entities. Always false except in the case of procedures\n---       and generic procedures for which a pragma No_Return is given.\n+--       Defined in all entities. Set for subprograms and generic subprograms\n+--       to which a valid aspect or pragma No_Return applies.\n \n --    No_Strict_Aliasing (Flag136) [base type only]\n --       Defined in access types. Set to direct the backend to avoid any"}, {"sha": "ff1f6dbd651e94ab61584b7569e9bd303104fd4e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=90e975175757b4ac9712d90d27ec59cd09f22cc9", "patch": "@@ -10868,6 +10868,20 @@ package body Sem_Ch3 is\n             end if;\n          end if;\n \n+         --  Ada 2005 (AI95-0414) and Ada 2020 (AI12-0269): Diagnose failure to\n+         --  match No_Return in parent, but do it unconditionally in Ada 95 too\n+         --  for procedures, since this is our pragma.\n+\n+         if Present (Overridden_Operation (Subp))\n+           and then No_Return (Overridden_Operation (Subp))\n+           and then not No_Return (Subp)\n+         then\n+            Error_Msg_N (\"overriding subprogram & must be No_Return\", Subp);\n+            Error_Msg_N\n+              (\"\\since overridden subprogram is No_Return (RM 6.5.1(6/2))\",\n+               Subp);\n+         end if;\n+\n          --  If the operation is a wrapper for a synchronized primitive, it\n          --  may be called indirectly through a dispatching select. We assume\n          --  that it will be referenced elsewhere indirectly, and suppress\n@@ -15450,9 +15464,9 @@ package body Sem_Ch3 is\n       end if;\n \n       --  No_Return must be inherited properly. If this is overridden in the\n-      --  case of a dispatching operation, then a check is made in Sem_Disp\n-      --  that the overriding operation is also No_Return (no such check is\n-      --  required for the case of non-dispatching operation.\n+      --  case of a dispatching operation, then the check is made later in\n+      --  Check_Abstract_Overriding that the overriding operation is also\n+      --  No_Return (no such check is required for the nondispatching case).\n \n       Set_No_Return (New_Subp, No_Return (Parent_Subp));\n "}, {"sha": "456bd97c68ff2244989593905094048418175062", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=90e975175757b4ac9712d90d27ec59cd09f22cc9", "patch": "@@ -676,6 +676,10 @@ package body Sem_Ch6 is\n       R_Type : constant Entity_Id := Etype (Scope_Id);\n       --  Function result subtype\n \n+      procedure Check_No_Return_Expression (Return_Expr : Node_Id);\n+      --  Ada 2020: Check that the return expression in a No_Return function\n+      --  meets the conditions specified by RM 6.5.1(5.1/5).\n+\n       procedure Check_Return_Construct_Accessibility (Return_Stmt : Node_Id);\n       --  Apply legality rule of 6.5 (5.9) to the access discriminants of an\n       --  aggregate in a return statement.\n@@ -684,6 +688,34 @@ package body Sem_Ch6 is\n       --  Check that the return_subtype_indication properly matches the result\n       --  subtype of the function, as required by RM-6.5(5.1/2-5.3/2).\n \n+      --------------------------------\n+      -- Check_No_Return_Expression --\n+      --------------------------------\n+\n+      procedure Check_No_Return_Expression (Return_Expr : Node_Id) is\n+         Kind : constant Node_Kind := Nkind (Return_Expr);\n+\n+      begin\n+         if Kind = N_Raise_Expression then\n+            return;\n+\n+         elsif Kind = N_Function_Call\n+           and then Is_Entity_Name (Name (Return_Expr))\n+           and then Ekind_In (Entity (Name (Return_Expr)), E_Function,\n+                                                           E_Generic_Function)\n+           and then No_Return (Entity (Name (Return_Expr)))\n+         then\n+            return;\n+         end if;\n+\n+         Error_Msg_N\n+           (\"illegal expression in RETURN statement of No_Return function\",\n+            Return_Expr);\n+         Error_Msg_N\n+           (\"\\must be raise expression or call to No_Return (RM 6.5.1(5.1/5))\",\n+            Return_Expr);\n+      end Check_No_Return_Expression;\n+\n       ------------------------------------------\n       -- Check_Return_Construct_Accessibility --\n       ------------------------------------------\n@@ -1101,6 +1133,19 @@ package body Sem_Ch6 is\n             Check_Limited_Return (N, Expr, R_Type);\n \n             Check_Return_Construct_Accessibility (N);\n+\n+            --  Ada 2020 (AI12-0269): Any return statement that applies to a\n+            --  nonreturning function shall be a simple_return_statement with\n+            --  an expression that is a raise_expression, or else a call on a\n+            --  nonreturning function, or else a parenthesized expression of\n+            --  one of these.\n+\n+            if Ada_Version >= Ada_2020\n+              and then No_Return (Scope_Id)\n+              and then Comes_From_Source (N)\n+            then\n+               Check_No_Return_Expression (Original_Node (Expr));\n+            end if;\n          end if;\n       else\n          Obj_Decl := Last (Return_Object_Declarations (N));\n@@ -1162,6 +1207,18 @@ package body Sem_Ch6 is\n                     (\"aliased only allowed for limited return objects\", N);\n                end if;\n             end if;\n+\n+            --  Ada 2020 (AI12-0269): Any return statement that applies to a\n+            --  nonreturning function shall be a simple_return_statement.\n+\n+            if Ada_Version >= Ada_2020\n+              and then No_Return (Scope_Id)\n+              and then Comes_From_Source (N)\n+            then\n+               Error_Msg_N\n+                 (\"extended RETURN statement not allowed in No_Return \"\n+                  & \"function\", N);\n+            end if;\n          end;\n       end if;\n \n@@ -2091,8 +2148,12 @@ package body Sem_Ch6 is\n       --  Check that pragma No_Return is obeyed. Don't complain about the\n       --  implicitly-generated return that is placed at the end.\n \n-      if No_Return (Scope_Id) and then Comes_From_Source (N) then\n-         Error_Msg_N (\"RETURN statement not allowed (No_Return)\", N);\n+      if No_Return (Scope_Id)\n+        and then Ekind_In (Kind, E_Procedure, E_Generic_Procedure)\n+        and then Comes_From_Source (N)\n+      then\n+         Error_Msg_N\n+           (\"RETURN statement not allowed in No_Return procedure\", N);\n       end if;\n \n       --  Warn on any unassigned OUT parameters if in procedure\n@@ -2103,17 +2164,17 @@ package body Sem_Ch6 is\n \n       --  Check that functions return objects, and other things do not\n \n-      if Kind = E_Function or else Kind = E_Generic_Function then\n+      if Ekind_In (Kind, E_Function, E_Generic_Function) then\n          if not Returns_Object then\n             Error_Msg_N (\"missing expression in return from function\", N);\n          end if;\n \n-      elsif Kind = E_Procedure or else Kind = E_Generic_Procedure then\n+      elsif Ekind_In (Kind, E_Procedure, E_Generic_Procedure) then\n          if Returns_Object then\n             Error_Msg_N (\"procedure cannot return value (use function)\", N);\n          end if;\n \n-      elsif Kind = E_Entry or else Kind = E_Entry_Family then\n+      elsif Ekind_In (Kind, E_Entry, E_Entry_Family) then\n          if Returns_Object then\n             if Is_Protected_Type (Scope (Scope_Id)) then\n                Error_Msg_N (\"entry body cannot return value\", N);"}, {"sha": "8a63831aa645d0e5e081af31560175ae0de95e17", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=90e975175757b4ac9712d90d27ec59cd09f22cc9", "patch": "@@ -3106,9 +3106,10 @@ package body Sem_Ch8 is\n          if No_Return (Rename_Spec)\n            and then not No_Return (Entity (Nam))\n          then\n-            Error_Msg_N (\"renaming completes a No_Return procedure\", N);\n+            Error_Msg_NE\n+              (\"renamed subprogram & must be No_Return\", N, Entity (Nam));\n             Error_Msg_N\n-              (\"\\renamed procedure must be nonreturning (RM 6.5.1 (7/2))\", N);\n+              (\"\\since renaming subprogram is No_Return (RM 6.5.1(7/2))\", N);\n          end if;\n \n          --  The specification does not introduce new formals, but only"}, {"sha": "3b40f4c3be6932470fda030b44337d956379802c", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=90e975175757b4ac9712d90d27ec59cd09f22cc9", "patch": "@@ -2548,14 +2548,6 @@ package body Sem_Disp is\n       Prim : Node_Id;\n \n    begin\n-      --  Diagnose failure to match No_Return in parent (Ada-2005, AI-414, but\n-      --  we do it unconditionally in Ada 95 now, since this is our pragma).\n-\n-      if No_Return (Prev_Op) and then not No_Return (New_Op) then\n-         Error_Msg_N (\"procedure & must have No_Return pragma\", New_Op);\n-         Error_Msg_N (\"\\since overridden procedure has No_Return\", New_Op);\n-      end if;\n-\n       --  If there is no previous operation to override, the type declaration\n       --  was malformed, and an error must have been emitted already.\n \n@@ -2666,7 +2658,6 @@ package body Sem_Disp is\n          Set_Alias (Prev_Op, New_Op);\n          Set_DTC_Entity (Prev_Op, Empty);\n          Set_Has_Controlling_Result (New_Op, Has_Controlling_Result (Prev_Op));\n-         return;\n       end if;\n    end Override_Dispatching_Operation;\n "}, {"sha": "75d5b0e4ae849495ccaa6b2d1c5167b26b992784", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e975175757b4ac9712d90d27ec59cd09f22cc9/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=90e975175757b4ac9712d90d27ec59cd09f22cc9", "patch": "@@ -19814,16 +19814,21 @@ package body Sem_Prag is\n                   raise Pragma_Exit;\n                end if;\n \n-               --  Loop to find matching procedures\n+               --  Loop to find matching procedures or functions (Ada 2020)\n \n                E := Entity (Id);\n \n                Found := False;\n                while Present (E)\n                  and then Scope (E) = Current_Scope\n                loop\n-                  if Ekind_In (E, E_Generic_Procedure, E_Procedure) then\n+                  --  Ada 2020 (AI12-0269): A function can be No_Return\n \n+                  if Ekind_In (E, E_Generic_Procedure, E_Procedure)\n+                    or else (Ada_Version >= Ada_2020\n+                              and then\n+                             Ekind_In (E, E_Generic_Function, E_Function))\n+                  then\n                      --  Check that the pragma is not applied to a body.\n                      --  First check the specless body case, to give a\n                      --  different error message. These checks do not apply\n@@ -19905,6 +19910,11 @@ package body Sem_Prag is\n                     and then From_Aspect_Specification (N)\n                   then\n                      Set_No_Return (Entity (Id));\n+\n+                  elsif Ada_Version >= Ada_2020 then\n+                     Error_Pragma_Arg\n+                       (\"no subprogram& found for pragma%\", Arg);\n+\n                   else\n                      Error_Pragma_Arg (\"no procedure& found for pragma%\", Arg);\n                   end if;"}]}