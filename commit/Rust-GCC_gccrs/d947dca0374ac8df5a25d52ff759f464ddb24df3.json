{"sha": "d947dca0374ac8df5a25d52ff759f464ddb24df3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk0N2RjYTAzNzRhYzhkZjVhMjVkNTJmZjc1OWY0NjRkZGIyNGRmMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-09T17:22:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-06-09T17:22:47Z"}, "message": "(MACHINE_STATE_SAVE, MACHINE_STATE_RESTORE): Test\n#ifdef __mcf52000__, not if (TARGET_52000); fixed for mc68000 case.\n\nFrom-SVN: r14178", "tree": {"sha": "09fae348c7b0e2186f5fd023499c472623119d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09fae348c7b0e2186f5fd023499c472623119d4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d947dca0374ac8df5a25d52ff759f464ddb24df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d947dca0374ac8df5a25d52ff759f464ddb24df3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d947dca0374ac8df5a25d52ff759f464ddb24df3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d947dca0374ac8df5a25d52ff759f464ddb24df3/comments", "author": null, "committer": null, "parents": [{"sha": "b88c92ccb2bd49a12ce31432a36a42bec4a9b8bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b88c92ccb2bd49a12ce31432a36a42bec4a9b8bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b88c92ccb2bd49a12ce31432a36a42bec4a9b8bd"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "07ce8724209c01990bc6cadcaa6e5875210d4c67", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 50, "deletions": 17, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d947dca0374ac8df5a25d52ff759f464ddb24df3/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d947dca0374ac8df5a25d52ff759f464ddb24df3/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=d947dca0374ac8df5a25d52ff759f464ddb24df3", "patch": "@@ -1020,69 +1020,102 @@ while(0)\n #define FUNCTION_BLOCK_PROFILER_EXIT(FILE)\t\t\\\n   asm_fprintf (FILE, \"\\tjsr %U__bb_trace_ret\\n\");\n \n-/* Save all registers which may be clobbered by a function call. */\n+/* Save all registers which may be clobbered by a function call.\n+   MACHINE_STATE_SAVE and MACHINE_STATE_RESTORE are target-code macros,\n+   used in libgcc2.c.  They may not refer to TARGET_* macros !!! */\n+#if defined (__mc68010__) || defined(mc68010) \\\n+\t|| defined(__mc68020__) || defined(mc68020) \\\n+\t|| defined(__mc68030__) || defined(mc68030) \\\n+\t|| defined(__mc68040__) || defined(mc68040) \\\n+\t|| defined(__mc68332__) || defined(mc68332)\n+#define MACHINE_STATE_m68010_up\n+#endif\n \n #ifdef MOTOROLA\n+#if defined(__mcf5200__)\n #define MACHINE_STATE_SAVE(id)\t\t\\\n-  if (TARGET_5200)\t\t\t\\\n     {\t\t\t\t\t\\\n       asm (\"sub.l 20,%sp\");\t\t\\\n       asm (\"movm.l &0x0303,4(%sp)\");\t\\\n       asm (\"move.w %ccr,%d0\");\t\t\\\n       asm (\"movm.l &0x0001,(%sp)\");\t\\\n-    }\t\t\t\t\t\\\n-  else\t\t\t\t\t\\\n+    }\n+#else /* !__mcf5200__ */\n+#if defined(MACHINE_STATE_m68010_up)\n+#define MACHINE_STATE_SAVE(id)\t\t\\\n     {\t\t\t\t\t\\\n       asm (\"move.w %ccr,-(%sp)\");\t\\\n       asm (\"movm.l &0xc0c0,-(%sp)\");\t\\\n     }\n-#else\n+#else /* !MACHINE_STATE_m68010_up */\n+#define MACHINE_STATE_SAVE(id)\t\t\\\n+    {\t\t\t\t\t\\\n+      asm (\"move.w %sr,-(%sp)\");\t\\\n+      asm (\"movm.l &0xc0c0,-(%sp)\");\t\\\n+    }\n+#endif /* MACHINE_STATE_m68010_up */\n+#endif /* __mcf5200__ */\n+#else /* !MOTOROLA */\n+#if defined(__mcf5200__)\n #define MACHINE_STATE_SAVE(id)\t\t\\\n-  if (TARGET_5200)\t\t\t\\\n     {\t\t\t\t\t\\\n       asm (\"subl 20,sp\");\t\t\\\n       asm (\"movml d0/d1/a0/a1,sp@(4)\");\t\\\n       asm (\"movew cc,d0\");\t\t\\\n       asm (\"movml d0,sp@\");\t\t\\\n-    }\t\t\t\t\t\\\n-  else\t\t\t\t\t\\\n+    }\n+#else /* !__mcf5200__ */\n+#if defined(MACHINE_STATE_m68010_up)\n+#define MACHINE_STATE_SAVE(id)\t\t\\\n     {\t\t\t\t\t\\\n       asm (\"movew cc,sp@-\");\t\t\\\n       asm (\"moveml d0/d1/a0/a1,sp@-\");\t\\\n     }\n-#endif\n+#else /* !MACHINE_STATE_m68010_up */\n+#define MACHINE_STATE_SAVE(id)\t\t\\\n+    {\t\t\t\t\t\\\n+      asm (\"movew sr,sp@-\");\t\t\\\n+      asm (\"moveml d0/d1/a0/a1,sp@-\");\t\\\n+    }\n+#endif /* MACHINE_STATE_m68010_up */\n+#endif /* __mcf5200__ */\n+#endif /* MOTOROLA */\n \n /* Restore all registers saved by MACHINE_STATE_SAVE. */\n \n #ifdef MOTOROLA\n+#if defined(__mcf5200__)\n #define MACHINE_STATE_RESTORE(id)\t\\\n-  if (TARGET_5200)\t\t\t\\\n     {\t\t\t\t\t\\\n       asm (\"movm.l (%sp),&0x0001\");\t\\\n       asm (\"move.w %d0,%ccr\");\t\t\\\n       asm (\"movm.l 4(%sp),&0x0303\");\t\\\n       asm (\"add.l 20,%sp\");\t\t\\\n-    }\t\t\t\t\t\\\n-  else\t\t\t\t\t\\\n+    }\n+#else /* !__mcf5200__ */\n+#define MACHINE_STATE_RESTORE(id)\t\\\n     {\t\t\t\t\t\\\n       asm (\"movm.l (%sp)+,&0x0303\");\t\\\n       asm (\"move.w (%sp)+,%ccr\");\t\\\n     }\n-#else\n+#endif /* __mcf5200__ */\n+#else /* !MOTOROLA */\n+#if defined(__mcf5200__)\n #define MACHINE_STATE_RESTORE(id)\t\\\n-  if (TARGET_5200)\t\t\t\\\n     {\t\t\t\t\t\\\n       asm (\"movml sp@,d0\");\t\t\\\n       asm (\"movew d0,cc\");\t\t\\\n       asm (\"movml sp@(4),d0/d1/a0/a1\");\t\\\n       asm (\"addl 20,sp\");\t\t\\\n-    }\t\t\t\t\t\\\n-  else\t\t\t\t\t\\\n+    }\n+#else /* !__mcf5200__ */\n+#define MACHINE_STATE_RESTORE(id)\t\\\n     {\t\t\t\t\t\\\n       asm (\"moveml sp@+,d0/d1/a0/a1\");\t\\\n       asm (\"movew sp@+,cc\");\t\t\\\n     }\n-#endif\n+#endif /* __mcf5200__ */\n+#endif /* MOTOROLA */\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in"}]}