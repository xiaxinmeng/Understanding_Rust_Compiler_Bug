{"sha": "405f0da64e8d6ca359de9ea35e56c6f0149a15e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1ZjBkYTY0ZThkNmNhMzU5ZGU5ZWEzNWU1NmM2ZjAxNDlhMTVlMg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-05-06T17:13:55Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-05-06T17:13:55Z"}, "message": "(expand_expr, case INDIRECT_REF): Delete obsolete code\nto special case a SAVE_EXPR operand.\n\nFrom-SVN: r11938", "tree": {"sha": "ea036658b681728e511cf61e4f6c1813bc8f833a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea036658b681728e511cf61e4f6c1813bc8f833a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/405f0da64e8d6ca359de9ea35e56c6f0149a15e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405f0da64e8d6ca359de9ea35e56c6f0149a15e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405f0da64e8d6ca359de9ea35e56c6f0149a15e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405f0da64e8d6ca359de9ea35e56c6f0149a15e2/comments", "author": null, "committer": null, "parents": [{"sha": "0140d3ee3a5ec625b83a0eaf87d6aa6ae0554b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0140d3ee3a5ec625b83a0eaf87d6aa6ae0554b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0140d3ee3a5ec625b83a0eaf87d6aa6ae0554b38"}], "stats": {"total": 23, "additions": 2, "deletions": 21}, "files": [{"sha": "2fa825980c03f74b89326f844342b68f7298f7c9", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405f0da64e8d6ca359de9ea35e56c6f0149a15e2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405f0da64e8d6ca359de9ea35e56c6f0149a15e2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=405f0da64e8d6ca359de9ea35e56c6f0149a15e2", "patch": "@@ -5057,27 +5057,8 @@ expand_expr (exp, target, tmode, modifier)\n \ttree exp1 = TREE_OPERAND (exp, 0);\n \ttree exp2;\n \n-\t/* A SAVE_EXPR as the address in an INDIRECT_EXPR is generated\n-\t   for  *PTR += ANYTHING  where PTR is put inside the SAVE_EXPR.\n-\t   This code has the same general effect as simply doing\n-\t   expand_expr on the save expr, except that the expression PTR\n-\t   is computed for use as a memory address.  This means different\n-\t   code, suitable for indexing, may be generated.  */\n-\tif (TREE_CODE (exp1) == SAVE_EXPR\n-\t    && SAVE_EXPR_RTL (exp1) == 0\n-\t    && TYPE_MODE (TREE_TYPE (exp1)) == ptr_mode)\n-\t  {\n-\t    temp = expand_expr (TREE_OPERAND (exp1, 0), NULL_RTX,\n-\t\t\t\tVOIDmode, EXPAND_SUM);\n-\t    op0 = memory_address (mode, temp);\n-\t    op0 = copy_all_regs (op0);\n-\t    SAVE_EXPR_RTL (exp1) = op0;\n-\t  }\n-\telse\n-\t  {\n-\t    op0 = expand_expr (exp1, NULL_RTX, VOIDmode, EXPAND_SUM);\n-\t    op0 = memory_address (mode, op0);\n-\t  }\n+\top0 = expand_expr (exp1, NULL_RTX, VOIDmode, EXPAND_SUM);\n+\top0 = memory_address (mode, op0);\n \n \ttemp = gen_rtx (MEM, mode, op0);\n \t/* If address was computed by addition,"}]}