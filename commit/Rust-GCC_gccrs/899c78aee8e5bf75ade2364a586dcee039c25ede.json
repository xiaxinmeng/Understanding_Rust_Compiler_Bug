{"sha": "899c78aee8e5bf75ade2364a586dcee039c25ede", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5Yzc4YWVlOGU1YmY3NWFkZTIzNjRhNTg2ZGNlZTAzOWMyNWVkZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-11-14T07:30:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-11-14T07:30:27Z"}, "message": "configure.ac (--with-diagnostics-color): New configure option, default to --with-diagnostics-color=auto.\n\n\t* configure.ac (--with-diagnostics-color): New configure\n\toption, default to --with-diagnostics-color=auto.\n\t* toplev.c (process_options): Use DIAGNOSTICS_COLOR_DEFAULT\n\tto determine -fdiagnostics-color= option default.\n\t* doc/invoke.texi (-fdiagnostics-color=): Document new\n\tdefault.\n\t* configure: Regenerated.\n\t* config.in: Regenerated.\n\nFrom-SVN: r217540", "tree": {"sha": "e7f3963d5df9a9efb868270660b28d10c7507bca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7f3963d5df9a9efb868270660b28d10c7507bca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/899c78aee8e5bf75ade2364a586dcee039c25ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899c78aee8e5bf75ade2364a586dcee039c25ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/899c78aee8e5bf75ade2364a586dcee039c25ede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899c78aee8e5bf75ade2364a586dcee039c25ede/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5004bd0026e9d57e17ff7c9f8e41a8c0f6e904c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5004bd0026e9d57e17ff7c9f8e41a8c0f6e904c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5004bd0026e9d57e17ff7c9f8e41a8c0f6e904c5"}], "stats": {"total": 132, "additions": 116, "deletions": 16}, "files": [{"sha": "682f6fd1e33509bdc6368122546232ec07ba4928", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=899c78aee8e5bf75ade2364a586dcee039c25ede", "patch": "@@ -1,3 +1,14 @@\n+2014-11-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac (--with-diagnostics-color): New configure\n+\toption, default to --with-diagnostics-color=auto.\n+\t* toplev.c (process_options): Use DIAGNOSTICS_COLOR_DEFAULT\n+\tto determine -fdiagnostics-color= option default.\n+\t* doc/invoke.texi (-fdiagnostics-color=): Document new\n+\tdefault.\n+\t* configure: Regenerated.\n+\t* config.in: Regenerated.\n+\n 2014-11-13  Teresa Johnson  <tejohnson@google.com>\n \n \tPR tree-optimization/63841"}, {"sha": "6cfda75b0b3ae7bf27bc82b9dc447d6d44a9a8c7", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=899c78aee8e5bf75ade2364a586dcee039c25ede", "patch": "@@ -57,6 +57,12 @@\n #endif\n \n \n+/* The default for -fdiagnostics-color option */\n+#ifndef USED_FOR_TARGET\n+#undef DIAGNOSTICS_COLOR_DEFAULT\n+#endif\n+\n+\n /* Define if you want assertions enabled. This is a cheap check. */\n #ifndef USED_FOR_TARGET\n #undef ENABLE_ASSERT_CHECKING\n@@ -272,6 +278,12 @@\n #endif\n \n \n+/* Define if your assembler supports .module. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_DOT_MODULE\n+#endif\n+\n+\n /* Define if your assembler supports DSPR1 mult. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_DSPR1_MULT\n@@ -484,12 +496,6 @@\n #endif\n \n \n-/* Define if the assembler understands .module. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_AS_DOT_MODULE\n-#endif\n-\n-\n /* Define if your assembler supports the -no-mul-bug-abort option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_NO_MUL_BUG_ABORT_OPTION"}, {"sha": "8e62ee7233f9d2867a287c050870fc5959aef57e", "filename": "gcc/configure", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=899c78aee8e5bf75ade2364a586dcee039c25ede", "patch": "@@ -936,6 +936,7 @@ enable_plugin\n enable_host_shared\n enable_libquadmath_support\n with_linker_hash_style\n+with_diagnostics_color\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1708,6 +1709,11 @@ Optional Packages:\n   --with-system-zlib      use installed libz\n   --with-linker-hash-style={sysv,gnu,both}\n                           specify the linker hash style\n+  --with-diagnostics-color={never,auto,auto-if-env,always}\n+                          specify the default of -fdiagnostics-color option\n+                          auto-if-env stands for -fdiagnostics-color=auto if\n+                          GCC_COLOR environment variable is present and\n+                          -fdiagnostics-color=never otherwise\n \n Some influential environment variables:\n   CC          C compiler command\n@@ -18140,7 +18146,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18143 \"configure\"\n+#line 18149 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18246,7 +18252,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18249 \"configure\"\n+#line 18255 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -28294,6 +28300,37 @@ _ACEOF\n \n fi\n \n+# Specify what should be the default of -fdiagnostics-color option.\n+\n+# Check whether --with-diagnostics-color was given.\n+if test \"${with_diagnostics_color+set}\" = set; then :\n+  withval=$with_diagnostics_color; case x\"$withval\" in\n+   xnever)\n+     DIAGNOSTICS_COLOR_DEFAULT=DIAGNOSTICS_COLOR_NO\n+     ;;\n+   xauto)\n+     DIAGNOSTICS_COLOR_DEFAULT=DIAGNOSTICS_COLOR_AUTO\n+     ;;\n+   xauto-if-env)\n+     DIAGNOSTICS_COLOR_DEFAULT=-1\n+     ;;\n+   xalways)\n+     DIAGNOSTICS_COLOR_DEFAULT=DIAGNOSTICS_COLOR_YES\n+     ;;\n+   *)\n+     as_fn_error \"$withval is an invalid option to --with-diagnostics-color\" \"$LINENO\" 5\n+     ;;\n+ esac\n+else\n+  DIAGNOSTICS_COLOR_DEFAULT=DIAGNOSTICS_COLOR_AUTO\n+fi\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define DIAGNOSTICS_COLOR_DEFAULT $DIAGNOSTICS_COLOR_DEFAULT\n+_ACEOF\n+\n+\n # Generate gcc-driver-name.h containing GCC_DRIVER_NAME for the benefit\n # of jit/jit-playback.c.\n cat > gcc-driver-name.h <<EOF"}, {"sha": "f6e7ec3529e1a200632ce0a60728eb2789c15b91", "filename": "gcc/configure.ac", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=899c78aee8e5bf75ade2364a586dcee039c25ede", "patch": "@@ -5651,6 +5651,34 @@ if test x\"${LINKER_HASH_STYLE}\" != x; then\n                                          [The linker hash style])\n fi\n \n+# Specify what should be the default of -fdiagnostics-color option.\n+AC_ARG_WITH([diagnostics-color],\n+[AC_HELP_STRING([--with-diagnostics-color={never,auto,auto-if-env,always}],\n+                [specify the default of -fdiagnostics-color option\n+                 auto-if-env stands for -fdiagnostics-color=auto if\n+                 GCC_COLOR environment variable is present and\n+                 -fdiagnostics-color=never otherwise])],\n+[case x\"$withval\" in\n+   xnever)\n+     DIAGNOSTICS_COLOR_DEFAULT=DIAGNOSTICS_COLOR_NO\n+     ;;\n+   xauto)\n+     DIAGNOSTICS_COLOR_DEFAULT=DIAGNOSTICS_COLOR_AUTO\n+     ;;\n+   xauto-if-env)\n+     DIAGNOSTICS_COLOR_DEFAULT=-1\n+     ;;\n+   xalways)\n+     DIAGNOSTICS_COLOR_DEFAULT=DIAGNOSTICS_COLOR_YES\n+     ;;\n+   *)\n+     AC_MSG_ERROR([$withval is an invalid option to --with-diagnostics-color])\n+     ;;\n+ esac],\n+[DIAGNOSTICS_COLOR_DEFAULT=DIAGNOSTICS_COLOR_AUTO])\n+AC_DEFINE_UNQUOTED(DIAGNOSTICS_COLOR_DEFAULT, $DIAGNOSTICS_COLOR_DEFAULT,\n+\t\t   [The default for -fdiagnostics-color option])\n+\n # Generate gcc-driver-name.h containing GCC_DRIVER_NAME for the benefit\n # of jit/jit-playback.c.\n cat > gcc-driver-name.h <<EOF"}, {"sha": "93943cb58c6e1581f6c37006d7620971a80e57e5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=899c78aee8e5bf75ade2364a586dcee039c25ede", "patch": "@@ -3104,8 +3104,10 @@ a message which is too long to fit on a single line.\n @cindex highlight, color, colour\n @vindex GCC_COLORS @r{environment variable}\n Use color in diagnostics.  @var{WHEN} is @samp{never}, @samp{always},\n-or @samp{auto}.  The default is @samp{never} if @env{GCC_COLORS} environment\n-variable isn't present in the environment, and @samp{auto} otherwise.\n+or @samp{auto}.  The default depends on how the compiler has been configured,\n+it can be any of the above @var{WHEN} options or also @samp{never}\n+if @env{GCC_COLORS} environment variable isn't present in the environment,\n+and @samp{auto} otherwise.\n @samp{auto} means to use color only when the standard error is a terminal.\n The forms @option{-fdiagnostics-color} and @option{-fno-diagnostics-color} are\n aliases for @option{-fdiagnostics-color=always} and"}, {"sha": "2ed76bc610d419e3117e90532ffe48e500a7708c", "filename": "gcc/toplev.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899c78aee8e5bf75ade2364a586dcee039c25ede/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=899c78aee8e5bf75ade2364a586dcee039c25ede", "patch": "@@ -1267,12 +1267,28 @@ process_options (void)\n \n   maximum_field_alignment = initial_max_fld_align * BITS_PER_UNIT;\n \n-  /* Default to -fdiagnostics-color=auto if GCC_COLORS is in the environment,\n-     otherwise default to -fdiagnostics-color=never.  */\n-  if (!global_options_set.x_flag_diagnostics_show_color\n-      && getenv (\"GCC_COLORS\"))\n-    pp_show_color (global_dc->printer)\n-      = colorize_init (DIAGNOSTICS_COLOR_AUTO);\n+  /* If DIAGNOSTICS_COLOR_DEFAULT is -1, default to -fdiagnostics-color=auto\n+     if GCC_COLORS is in the environment, otherwise default to\n+     -fdiagnostics-color=never, for other values default to that\n+     -fdiagnostics-color={never,auto,always}.  */\n+  if (!global_options_set.x_flag_diagnostics_show_color)\n+    switch ((int) DIAGNOSTICS_COLOR_DEFAULT)\n+      {\n+      case -1:\n+\tif (!getenv (\"GCC_COLORS\"))\n+\t  break;\n+\t/* FALLTHRU */\n+      case DIAGNOSTICS_COLOR_AUTO:\n+\tpp_show_color (global_dc->printer)\n+\t  = colorize_init (DIAGNOSTICS_COLOR_AUTO);\n+\tbreak;\n+      case DIAGNOSTICS_COLOR_YES:\n+\tpp_show_color (global_dc->printer)\n+\t  = colorize_init (DIAGNOSTICS_COLOR_YES);\n+\tbreak;\n+      default:\n+\tbreak;\n+      }\n \n   /* Allow the front end to perform consistency checks and do further\n      initialization based on the command line options.  This hook also"}]}