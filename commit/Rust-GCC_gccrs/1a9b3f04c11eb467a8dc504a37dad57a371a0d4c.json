{"sha": "1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE5YjNmMDRjMTFlYjQ2N2E4ZGM1MDRhMzdkYWQ1N2EzNzFhMGQ0Yw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-20T08:10:50Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-20T08:12:41Z"}, "message": "c: Add support for __FILE_NAME__ macro (PR c/42579)\n\nThe toolchain provided by ST for stm32 has had support for\n__FILENAME__ for a while, but clang/llvm has recently implemented\nsupport for __FILE_NAME__, so it seems better to use the same macro\nname in GCC.\n\nIt happens that the ST patch is similar to the one proposed in PR\nc/42579.\n\nGiven these input files:\n::::::::::::::\nmydir/myinc.h\n::::::::::::::\nchar* mystringh_file = __FILE__;\nchar* mystringh_filename = __FILE_NAME__;\nchar* mystringh_base_file = __BASE_FILE__;\n::::::::::::::\nmydir/mysrc.c\n::::::::::::::\n\nchar* mystring_file = __FILE__;\nchar* mystring_filename = __FILE_NAME__;\nchar* mystring_base_file = __BASE_FILE__;\n\nwe produce:\n$ gcc mydir/mysrc.c -I . -E\nchar* mystringh_file = \"./mydir/myinc.h\";\nchar* mystringh_filename = \"myinc.h\";\nchar* mystringh_base_file = \"mydir/mysrc.c\";\n\nchar* mystring_file = \"mydir/mysrc.c\";\nchar* mystring_filename = \"mysrc.c\";\nchar* mystring_base_file = \"mydir/mysrc.c\";\n\n2021-05-20  Christophe Lyon  <christophe.lyon@linaro.org>\n\t    Torbj\u00f6rn Svensson  <torbjorn.svensson@st.com>\n\n\tPR c/42579\n\tlibcpp/\n\t* include/cpplib.h (cpp_builtin_type): Add BT_FILE_NAME entry.\n\t* init.c (builtin_array): Likewise.\n\t* macro.c (_cpp_builtin_macro_text): Add support for BT_FILE_NAME.\n\n\tgcc/\n\t* doc/cpp.texi (Common Predefined Macros): Document __FILE_NAME__.\n\n\tgcc/testsuite/\n\t* c-c++-common/spellcheck-reserved.c: Add tests for __FILE_NAME__.\n\t* c-c++-common/cpp/file-name-1.c: New test.", "tree": {"sha": "29f41364435007ef3df83429bface6b67343d303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29f41364435007ef3df83429bface6b67343d303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/comments", "author": null, "committer": null, "parents": [{"sha": "9e0a5e3ea37f9d7d2b6f2dab7c0bfbeaf08466a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0a5e3ea37f9d7d2b6f2dab7c0bfbeaf08466a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0a5e3ea37f9d7d2b6f2dab7c0bfbeaf08466a3"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "d4b3ff0a8b011e93e0122ba1aeecf87862163fc2", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "patch": "@@ -2005,6 +2005,13 @@ This macro expands to the name of the main input file, in the form\n of a C string constant.  This is the source file that was specified\n on the command line of the preprocessor or C compiler.\n \n+@item __FILE_NAME__\n+This macro expands to the basename of the current input file, in the\n+form of a C string constant.  This is the last path component by which\n+the preprocessor opened the file.  For example, processing\n+@code{\"/usr/local/include/myheader.h\"} would set this\n+macro to @code{\"myheader.h\"}.\n+\n @item __INCLUDE_LEVEL__\n This macro expands to a decimal integer constant that represents the\n depth of nesting in include files.  The value of this macro is"}, {"sha": "2b476e34cce57148edbaa038a338fbb2d0b98a8d", "filename": "gcc/testsuite/c-c++-common/cpp/file-name-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffile-name-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffile-name-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffile-name-1.c?ref=1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do preprocess } */\n+/* { dg-additional-options -Wno-pedantic } */\n+\n+main-1 __FILE_NAME__\n+\n+# 7 \"inner.h\" 1\n+inner-1 __FILE_NAME__\n+# 9 \"subdir/inside.h\" 1\n+inside-1 __FILE_NAME__\n+inside-2 __FILE__\n+# 11 \"\" 2\n+inner-2 __FILE_NAME__\n+#13 \"\" 2\n+main-2 __FILE_NAME__\n+\n+\n+/* { dg-final { scan-file file-name-1.i \"main-1 \\\"\\[^\\n]*file-name-1.c\\\"\\n\" } } */\n+/* { dg-final { scan-file file-name-1.i \"main-2 \\\"\\[^\\n]*file-name-1.c\\\"\\n\" } } */\n+/* { dg-final { scan-file file-name-1.i \"inner-1 \\\"inner.h\\\"\\n\" } } */\n+/* { dg-final { scan-file file-name-1.i \"inner-2 \\\"inner.h\\\"\\n\" } } */\n+/* { dg-final { scan-file file-name-1.i \"inside-1 \\\"inside.h\\\"\\n\" } } */\n+/* { dg-final { scan-file file-name-1.i \"inside-2 \\\"subdir/inside.h\\\"\\n\" } } */"}, {"sha": "56e59dcc00aca33143dd1df9c55b9fd63315e262", "filename": "gcc/testsuite/c-c++-common/spellcheck-reserved.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspellcheck-reserved.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspellcheck-reserved.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspellcheck-reserved.c?ref=1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "patch": "@@ -50,3 +50,21 @@ const char * test_3 (void)\n   /* { dg-error \"did you mean '__FILE__'\" \"\" { target c } misspelled__FILE_ } */\n   /* { dg-error \"'__FILE_' was not declared in this scope; did you mean '__FILE__'\\\\?\"  \"\" { target c++ } misspelled__FILE_ } */\n }\n+\n+/* Verify that we can correct \"__FILE_NAME_\" to \"__FILE_NAME__\".  */\n+\n+const char * test_4 (void)\n+{\n+  return __FILE_NAME_; /* { dg-line misspelled__FILE_NAME_ } */\n+  /* { dg-error \"did you mean '__FILE_NAME__'\" \"\" { target c } misspelled__FILE_NAME_ } */\n+  /* { dg-error \"'__FILE_NAME_' was not declared in this scope; did you mean '__FILE_NAME__'\\\\?\"  \"\" { target c++ } misspelled__FILE_NAME_ } */\n+}\n+\n+/* Verify that we can correct \"__FILENAME__\" to \"__FILE_NAME__\".  */\n+\n+const char * test_5 (void)\n+{\n+  return __FILENAME__; /* { dg-line misspelled__FILENAME__ } */\n+  /* { dg-error \"did you mean '__FILE_NAME__'\" \"\" { target c } misspelled__FILENAME__ } */\n+  /* { dg-error \"'__FILENAME__' was not declared in this scope; did you mean '__FILE_NAME__'\\\\?\"  \"\" { target c++ } misspelled__FILENAME__ } */\n+}"}, {"sha": "7e840635a380a7b29dade58fc2f0fee8670bba28", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "patch": "@@ -886,6 +886,7 @@ enum cpp_builtin_type\n   BT_SPECLINE = 0,\t\t/* `__LINE__' */\n   BT_DATE,\t\t\t/* `__DATE__' */\n   BT_FILE,\t\t\t/* `__FILE__' */\n+  BT_FILE_NAME,\t\t\t/* `__FILE_NAME__' */\n   BT_BASE_FILE,\t\t\t/* `__BASE_FILE__' */\n   BT_INCLUDE_LEVEL,\t\t/* `__INCLUDE_LEVEL__' */\n   BT_TIME,\t\t\t/* `__TIME__' */"}, {"sha": "a45047000764e05f0b885093ec32f564926eea33", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "patch": "@@ -405,6 +405,7 @@ static const struct builtin_macro builtin_array[] =\n   B(\"__TIME__\",\t\t BT_TIME,          false),\n   B(\"__DATE__\",\t\t BT_DATE,          false),\n   B(\"__FILE__\",\t\t BT_FILE,          false),\n+  B(\"__FILE_NAME__\",\t BT_FILE_NAME,     false),\n   B(\"__BASE_FILE__\",\t BT_BASE_FILE,     false),\n   B(\"__LINE__\",\t\t BT_SPECLINE,      true),\n   B(\"__INCLUDE_LEVEL__\", BT_INCLUDE_LEVEL, true),"}, {"sha": "4fc5f838919f41c2baad953d0c8274bded285647", "filename": "libcpp/macro.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9b3f04c11eb467a8dc504a37dad57a371a0d4c/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=1a9b3f04c11eb467a8dc504a37dad57a371a0d4c", "patch": "@@ -531,15 +531,21 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,\n       }\n       break;\n     case BT_FILE:\n+    case BT_FILE_NAME:\n     case BT_BASE_FILE:\n       {\n \tunsigned int len;\n \tconst char *name;\n \tuchar *buf;\n-\t\n-\tif (node->value.builtin == BT_FILE)\n-\t  name = linemap_get_expansion_filename (pfile->line_table,\n-\t\t\t\t\t\t pfile->line_table->highest_line);\n+\n+\tif (node->value.builtin == BT_FILE\n+\t    || node->value.builtin == BT_FILE_NAME)\n+\t  {\n+\t    name = linemap_get_expansion_filename (pfile->line_table,\n+\t\t\t\t\t\t   pfile->line_table->highest_line);\n+\t    if ((node->value.builtin == BT_FILE_NAME) && name)\n+\t      name = lbasename (name);\n+\t  }\n \telse\n \t  {\n \t    name = _cpp_get_file_name (pfile->main_file);"}]}