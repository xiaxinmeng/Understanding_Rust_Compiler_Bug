{"sha": "3f1519eef5cbdcea2f18445852f5482798e3936a", "node_id": "C_kwDOANBUbNoAKDNmMTUxOWVlZjVjYmRjZWEyZjE4NDQ1ODUyZjU0ODI3OThlMzkzNmE", "commit": {"author": {"name": "Charles-Fran\u00e7ois Natali", "email": "cf.natali@gmail.com", "date": "2022-10-06T19:02:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-08T17:35:14Z"}, "message": "libstdc++: basic_filebuf: don't flush more often than necessary [PR63746]\n\n`basic_filebuf::xsputn` would bypass the buffer when passed a chunk of\nsize 1024 and above, seemingly as an optimisation.\n\nThis can have a significant performance impact if the overhead of a\n`write` syscall is non-negligible, e.g. on a slow disk, on network\nfilesystems, or simply during IO contention because instead of flushing\nevery `BUFSIZ` (by default), we can flush every 1024 char.\nThe impact is even greater with custom larger buffers, e.g. for network\nfilesystems, because the code could issue `write` for example 1000X more\noften than necessary with respect to the buffer size.\nIt also introduces a significant discontinuity in performance when\nwriting chunks of size 1024 and above.\n\nInstead, it makes sense to only bypass the buffer if the amount of data\nto be written is larger than the buffer capacity.\n\nSigned-off-by: Charles-Francois Natali <cf.natali@gmail.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/63746\n\t* include/bits/fstream.tcc (basic_filbuf::xsputn): Remove\n\t1024-byte chunking that bypasses the buffer for large writes.\n\t* testsuite/27_io/basic_filebuf/sputn/char/63746.cc: New test.", "tree": {"sha": "7ae06d2f60d23108049a0a1133ed2fcd38097617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ae06d2f60d23108049a0a1133ed2fcd38097617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f1519eef5cbdcea2f18445852f5482798e3936a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1519eef5cbdcea2f18445852f5482798e3936a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1519eef5cbdcea2f18445852f5482798e3936a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1519eef5cbdcea2f18445852f5482798e3936a/comments", "author": {"login": "cf-natali", "id": 8378227, "node_id": "MDQ6VXNlcjgzNzgyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/8378227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cf-natali", "html_url": "https://github.com/cf-natali", "followers_url": "https://api.github.com/users/cf-natali/followers", "following_url": "https://api.github.com/users/cf-natali/following{/other_user}", "gists_url": "https://api.github.com/users/cf-natali/gists{/gist_id}", "starred_url": "https://api.github.com/users/cf-natali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cf-natali/subscriptions", "organizations_url": "https://api.github.com/users/cf-natali/orgs", "repos_url": "https://api.github.com/users/cf-natali/repos", "events_url": "https://api.github.com/users/cf-natali/events{/privacy}", "received_events_url": "https://api.github.com/users/cf-natali/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c93baa93df2d454f329a38686affcfe1a1339766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93baa93df2d454f329a38686affcfe1a1339766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93baa93df2d454f329a38686affcfe1a1339766"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "2e936962837190b359ee736719a487a4b6a16f03", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1519eef5cbdcea2f18445852f5482798e3936a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1519eef5cbdcea2f18445852f5482798e3936a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=3f1519eef5cbdcea2f18445852f5482798e3936a", "patch": "@@ -757,23 +757,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       streamsize __ret = 0;\n       // Optimization in the always_noconv() case, to be generalized in the\n-      // future: when __n is sufficiently large we write directly instead of\n-      // using the buffer.\n+      // future: when __n is larger than the available capacity we write\n+      // directly instead of using the buffer.\n       const bool __testout = (_M_mode & ios_base::out\n \t\t\t      || _M_mode & ios_base::app);\n       if (__check_facet(_M_codecvt).always_noconv()\n \t  && __testout && !_M_reading)\n \t{\n-\t  // Measurement would reveal the best choice.\n-\t  const streamsize __chunk = 1ul << 10;\n \t  streamsize __bufavail = this->epptr() - this->pptr();\n \n \t  // Don't mistake 'uncommitted' mode buffered with unbuffered.\n \t  if (!_M_writing && _M_buf_size > 1)\n \t    __bufavail = _M_buf_size - 1;\n \n-\t  const streamsize __limit = std::min(__chunk, __bufavail);\n-\t  if (__n >= __limit)\n+\t  if (__n >= __bufavail)\n \t    {\n \t      const streamsize __buffill = this->pptr() - this->pbase();\n \t      const char* __buf = reinterpret_cast<const char*>(this->pbase());"}, {"sha": "baab9340734743933658f9cf02fa57550292a5cd", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/63746.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f1519eef5cbdcea2f18445852f5482798e3936a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F63746.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f1519eef5cbdcea2f18445852f5482798e3936a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F63746.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F63746.cc?ref=3f1519eef5cbdcea2f18445852f5482798e3936a", "patch": "@@ -0,0 +1,38 @@\n+// { dg-require-fileio \"\" }\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::filebuf {\n+public:\n+  char_type* pub_pprt() const\n+  {\n+    return this->pptr();\n+  }\n+\n+  char_type* pub_pbase() const\n+  {\n+    return this->pbase();\n+  }\n+};\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  // Leave capacity to avoid flush.\n+  const streamsize chunk_size = BUFSIZ - 1 - 1;\n+  const char data[chunk_size] = {};\n+\n+  testbuf a_f;\n+  VERIFY( a_f.open(\"tmp_63746_sputn\", ios_base::out) );\n+  VERIFY( chunk_size == a_f.sputn(data, chunk_size) );\n+  VERIFY( (a_f.pub_pprt() - a_f.pub_pbase()) == chunk_size );\n+  VERIFY( a_f.close() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}