{"sha": "4ccd12e5aae640a352129fd387657da8e4d0f95b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNjZDEyZTVhYWU2NDBhMzUyMTI5ZmQzODc2NTdkYThlNGQwZjk1Yg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-27T23:51:13Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-27T23:51:13Z"}, "message": "re PR c/37186 (-Wno-error=pointer-sign does not work)\n\n2008-08-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c/37186\n\t* c-typeck.c (WARN_FOR_ASSIGNMENT): Add OPT parameter.\n\t(convert_for_assignment): Pass corrent OPT_W* parameter to\n\tWARN_FOR_ASSIGNMENT.\ntestsuite/\n\t* gcc.dg/pr37186.c: New.\n\nFrom-SVN: r139680", "tree": {"sha": "76b1a1a6fe70921dc6bb953b9e8d85784d7945a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76b1a1a6fe70921dc6bb953b9e8d85784d7945a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ccd12e5aae640a352129fd387657da8e4d0f95b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccd12e5aae640a352129fd387657da8e4d0f95b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ccd12e5aae640a352129fd387657da8e4d0f95b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccd12e5aae640a352129fd387657da8e4d0f95b/comments", "author": null, "committer": null, "parents": [{"sha": "9a424841dba421bb636d758a432a14b9e7754f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a424841dba421bb636d758a432a14b9e7754f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a424841dba421bb636d758a432a14b9e7754f7b"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "d091380e3e8f4f1b4dcf8361bcb3fe95aba8221e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccd12e5aae640a352129fd387657da8e4d0f95b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccd12e5aae640a352129fd387657da8e4d0f95b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ccd12e5aae640a352129fd387657da8e4d0f95b", "patch": "@@ -1,3 +1,10 @@\n+2008-08-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/37186\n+\t* c-typeck.c (WARN_FOR_ASSIGNMENT): Add OPT parameter.\n+\t(convert_for_assignment): Pass corrent OPT_W* parameter to\n+\tWARN_FOR_ASSIGNMENT.\n+\n 2008-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/35321"}, {"sha": "db4718c1967adcda0fa03fc588ee21f018049e25", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccd12e5aae640a352129fd387657da8e4d0f95b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccd12e5aae640a352129fd387657da8e4d0f95b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4ccd12e5aae640a352129fd387657da8e4d0f95b", "patch": "@@ -3952,24 +3952,24 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n   /* This macro is used to emit diagnostics to ensure that all format\n      strings are complete sentences, visible to gettext and checked at\n      compile time.  */\n-#define WARN_FOR_ASSIGNMENT(LOCATION, AR, AS, IN, RE)\t\\\n+#define WARN_FOR_ASSIGNMENT(LOCATION, OPT, AR, AS, IN, RE)\t\\\n   do {\t\t\t\t\t\t\\\n     switch (errtype)\t\t\t\t\\\n       {\t\t\t\t\t\t\\\n       case ic_argpass:\t\t\t\t\\\n-\tpedwarn (LOCATION, 0, AR, parmnum, rname);\t\\\n+\tpedwarn (LOCATION, OPT, AR, parmnum, rname);\t\\\n \tbreak;\t\t\t\t\t\\\n       case ic_argpass_nonproto:\t\t\t\\\n-\twarning (0, AR, parmnum, rname);\t\\\n+\twarning (OPT, AR, parmnum, rname);\t\\\n \tbreak;\t\t\t\t\t\\\n       case ic_assign:\t\t\t\t\\\n-\tpedwarn (LOCATION, 0, AS);\t\t\t\\\n+\tpedwarn (LOCATION, OPT, AS);\t\t\t\\\n \tbreak;\t\t\t\t\t\\\n       case ic_init:\t\t\t\t\\\n-\tpedwarn (LOCATION, 0, IN);\t\t\t\\\n+\tpedwarn (LOCATION, OPT, IN);\t\t\t\\\n \tbreak;\t\t\t\t\t\\\n       case ic_return:\t\t\t\t\\\n-\tpedwarn (LOCATION, 0, RE);\t\t\t\\\n+\tpedwarn (LOCATION, OPT, RE);\t\t\t\\\n \tbreak;\t\t\t\t\t\\\n       default:\t\t\t\t\t\\\n \tgcc_unreachable ();\t\t\t\\\n@@ -4151,7 +4151,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t     function where an ordinary one is wanted, but not\n \t\t     vice-versa.  */\n \t\t  if (TYPE_QUALS (ttl) & ~TYPE_QUALS (ttr))\n-\t\t    WARN_FOR_ASSIGNMENT (input_location,\n+\t\t    WARN_FOR_ASSIGNMENT (input_location, 0,\n \t\t\t\t\t G_(\"passing argument %d of %qE \"\n \t\t\t\t\t    \"makes qualified function \"\n \t\t\t\t\t    \"pointer from unqualified\"),\n@@ -4165,7 +4165,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t\t\t\t    \"pointer from unqualified\"));\n \t\t}\n \t      else if (TYPE_QUALS (ttr) & ~TYPE_QUALS (ttl))\n-\t\tWARN_FOR_ASSIGNMENT (input_location,\n+\t\tWARN_FOR_ASSIGNMENT (input_location, 0,\n \t\t\t\t     G_(\"passing argument %d of %qE discards \"\n \t\t\t\t\t\"qualifiers from pointer target type\"),\n \t\t\t\t     G_(\"assignment discards qualifiers \"\n@@ -4265,7 +4265,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t  (VOID_TYPE_P (ttr)\n \t\t   && !null_pointer_constant_p (rhs)\n \t\t   && TREE_CODE (ttl) == FUNCTION_TYPE)))\n-\t    WARN_FOR_ASSIGNMENT (input_location,\n+\t    WARN_FOR_ASSIGNMENT (input_location, OPT_pedantic,\n \t\t\t\t G_(\"ISO C forbids passing argument %d of \"\n \t\t\t\t    \"%qE between function pointer \"\n \t\t\t\t    \"and %<void *%>\"),\n@@ -4303,7 +4303,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t;\n \t      /* If there is a mismatch, do warn.  */\n \t      else if (warn_pointer_sign)\n-\t\tWARN_FOR_ASSIGNMENT (input_location,\n+\t\tWARN_FOR_ASSIGNMENT (input_location, OPT_Wpointer_sign,\n \t\t\t\t     G_(\"pointer targets in passing argument \"\n \t\t\t\t\t\"%d of %qE differ in signedness\"),\n \t\t\t\t     G_(\"pointer targets in assignment \"\n@@ -4321,7 +4321,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t\t it is okay to use a const or volatile function\n \t\t where an ordinary one is wanted, but not vice-versa.  */\n \t      if (TYPE_QUALS (ttl) & ~TYPE_QUALS (ttr))\n-\t\tWARN_FOR_ASSIGNMENT (input_location,\n+\t\tWARN_FOR_ASSIGNMENT (input_location, 0,\n \t\t\t\t     G_(\"passing argument %d of %qE makes \"\n \t\t\t\t\t\"qualified function pointer \"\n \t\t\t\t\t\"from unqualified\"),\n@@ -4336,7 +4336,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n       else\n \t/* Avoid warning about the volatile ObjC EH puts on decls.  */\n \tif (!objc_ok)\n-\t  WARN_FOR_ASSIGNMENT (input_location,\n+\t  WARN_FOR_ASSIGNMENT (input_location, 0,\n \t\t\t       G_(\"passing argument %d of %qE from \"\n \t\t\t\t  \"incompatible pointer type\"),\n \t\t\t       G_(\"assignment from incompatible pointer type\"),\n@@ -4359,7 +4359,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n \t or one that results from arithmetic, even including\n \t a cast to integer type.  */\n       if (!null_pointer_constant_p (rhs))\n-\tWARN_FOR_ASSIGNMENT (input_location,\n+\tWARN_FOR_ASSIGNMENT (input_location, 0,\n \t\t\t     G_(\"passing argument %d of %qE makes \"\n \t\t\t\t\"pointer from integer without a cast\"),\n \t\t\t     G_(\"assignment makes pointer from integer \"\n@@ -4373,7 +4373,7 @@ convert_for_assignment (tree type, tree rhs, enum impl_conv errtype,\n     }\n   else if (codel == INTEGER_TYPE && coder == POINTER_TYPE)\n     {\n-      WARN_FOR_ASSIGNMENT (input_location,\n+      WARN_FOR_ASSIGNMENT (input_location, 0,\n \t\t\t   G_(\"passing argument %d of %qE makes integer \"\n \t\t\t      \"from pointer without a cast\"),\n \t\t\t   G_(\"assignment makes integer from pointer \""}, {"sha": "9fad734ca661ca26495f1fc9b36d2aae0d559f43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccd12e5aae640a352129fd387657da8e4d0f95b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccd12e5aae640a352129fd387657da8e4d0f95b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ccd12e5aae640a352129fd387657da8e4d0f95b", "patch": "@@ -1,3 +1,8 @@\n+2008-08-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/37186\n+\t* gcc.dg/pr37186.c: New.\n+\n 2008-08-27  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/torture/type-generic-1.c: Revert previous change."}, {"sha": "7fa52ffe83d440594ab5e23b4d5faf7db5205c76", "filename": "gcc/testsuite/gcc.dg/pr37186.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ccd12e5aae640a352129fd387657da8e4d0f95b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37186.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ccd12e5aae640a352129fd387657da8e4d0f95b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37186.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37186.c?ref=4ccd12e5aae640a352129fd387657da8e4d0f95b", "patch": "@@ -0,0 +1,9 @@\n+/* PR 37186 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Werror -Wno-error=pointer-sign\" } */\n+\n+int foo(signed char *);\n+int bar(unsigned char *p)\n+{\n+  return foo(p); /* { dg-warning \"pointer targets in passing argument 1 of 'foo' differ in signedness\" } */\n+}"}]}