{"sha": "c8812bac8ee39f73ea881e4f6260acf5590b4190", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg4MTJiYWM4ZWUzOWY3M2VhODgxZTRmNjI2MGFjZjU1OTBiNDE5MA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-11-30T19:10:04Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2021-01-13T00:46:01Z"}, "message": "amdgcn: Improve FP division accuracy\n\nGCN has a reciprocal-approximation instruction but no\nhardware divide. This patch adjusts the open-coded reciprocal\napproximation/Newton-Raphson refinement steps to use fused multiply-add\ninstructions as is necessary to obtain a properly-rounded result, and\nadds further refinement steps to correctly round the full division result.\n\nThe patterns in question are still guarded by a flag_reciprocal_math\ncondition, and do not yet support denormals.\n\n2021-01-13  Julian Brown  <julian@codesourcery.com>\n\ngcc/\n\t* config/gcn/gcn-valu.md (recip<mode>2<exec>, recip<mode>2): Use unspec\n\tfor reciprocal-approximation instructions.\n\t(div<mode>3): Use fused multiply-accumulate operations for reciprocal\n\trefinement and division result.\n\t* config/gcn/gcn.md (UNSPEC_RCP): New unspec constant.\n\ngcc/testsuite/\n\t* gcc.target/gcn/fpdiv.c: New test.", "tree": {"sha": "705063c5b9410785f858502398a8516c6bc78630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/705063c5b9410785f858502398a8516c6bc78630"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8812bac8ee39f73ea881e4f6260acf5590b4190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8812bac8ee39f73ea881e4f6260acf5590b4190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8812bac8ee39f73ea881e4f6260acf5590b4190", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8812bac8ee39f73ea881e4f6260acf5590b4190/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abb3993e49c04bd40e42f196f55785cc3fd81682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abb3993e49c04bd40e42f196f55785cc3fd81682", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abb3993e49c04bd40e42f196f55785cc3fd81682"}], "stats": {"total": 101, "additions": 81, "deletions": 20}, "files": [{"sha": "beefcf754d789de10f15937a9822434aaf339713", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8812bac8ee39f73ea881e4f6260acf5590b4190/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8812bac8ee39f73ea881e4f6260acf5590b4190/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=c8812bac8ee39f73ea881e4f6260acf5590b4190", "patch": "@@ -2351,19 +2351,19 @@\n \n (define_insn \"recip<mode>2<exec>\"\n   [(set (match_operand:V_FP 0 \"register_operand\"  \"=  v\")\n-\t(div:V_FP\n-\t  (vec_duplicate:V_FP (float:<SCALAR_MODE> (const_int 1)))\n-\t  (match_operand:V_FP 1 \"gcn_alu_operand\" \"vSvB\")))]\n+\t(unspec:V_FP\n+\t  [(match_operand:V_FP 1 \"gcn_alu_operand\" \"vSvB\")]\n+\t  UNSPEC_RCP))]\n   \"\"\n   \"v_rcp%i0\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"recip<mode>2\"\n   [(set (match_operand:FP 0 \"register_operand\"\t \"=  v\")\n-\t(div:FP\n-\t  (float:FP (const_int 1))\n-\t  (match_operand:FP 1 \"gcn_alu_operand\"\t \"vSvB\")))]\n+\t(unspec:FP\n+\t  [(match_operand:FP 1 \"gcn_alu_operand\" \"vSvB\")]\n+\t  UNSPEC_RCP))]\n   \"\"\n   \"v_rcp%i0\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n@@ -2382,28 +2382,39 @@\n    (match_operand:V_FP 2 \"gcn_valu_src0_operand\")]\n   \"flag_reciprocal_math\"\n   {\n-    rtx two = gcn_vec_constant (<MODE>mode,\n-\t\t  const_double_from_real_value (dconst2, <SCALAR_MODE>mode));\n+    rtx one = gcn_vec_constant (<MODE>mode,\n+\t\t  const_double_from_real_value (dconst1, <SCALAR_MODE>mode));\n     rtx initrcp = gen_reg_rtx (<MODE>mode);\n     rtx fma = gen_reg_rtx (<MODE>mode);\n     rtx rcp;\n+    rtx num = operands[1], denom = operands[2];\n \n-    bool is_rcp = (GET_CODE (operands[1]) == CONST_VECTOR\n+    bool is_rcp = (GET_CODE (num) == CONST_VECTOR\n \t\t   && real_identical\n \t\t        (CONST_DOUBLE_REAL_VALUE\n-\t\t\t  (CONST_VECTOR_ELT (operands[1], 0)), &dconstm1));\n+\t\t\t  (CONST_VECTOR_ELT (num, 0)), &dconstm1));\n \n     if (is_rcp)\n       rcp = operands[0];\n     else\n       rcp = gen_reg_rtx (<MODE>mode);\n \n-    emit_insn (gen_recip<mode>2 (initrcp, operands[2]));\n-    emit_insn (gen_fma<mode>4_negop2 (fma, initrcp, operands[2], two));\n-    emit_insn (gen_mul<mode>3 (rcp, initrcp, fma));\n+    emit_insn (gen_recip<mode>2 (initrcp, denom));\n+    emit_insn (gen_fma<mode>4_negop2 (fma, initrcp, denom, one));\n+    emit_insn (gen_fma<mode>4 (rcp, fma, initrcp, initrcp));\n \n     if (!is_rcp)\n-      emit_insn (gen_mul<mode>3 (operands[0], operands[1], rcp));\n+      {\n+\trtx div_est = gen_reg_rtx (<MODE>mode);\n+\trtx fma2 = gen_reg_rtx (<MODE>mode);\n+\trtx fma3 = gen_reg_rtx (<MODE>mode);\n+\trtx fma4 = gen_reg_rtx (<MODE>mode);\n+\temit_insn (gen_mul<mode>3 (div_est, num, rcp));\n+\temit_insn (gen_fma<mode>4_negop2 (fma2, div_est, denom, num));\n+\temit_insn (gen_fma<mode>4 (fma3, fma2, rcp, div_est));\n+\temit_insn (gen_fma<mode>4_negop2 (fma4, fma3, denom, num));\n+\temit_insn (gen_fma<mode>4 (operands[0], fma4, rcp, fma3));\n+      }\n \n     DONE;\n   })\n@@ -2414,10 +2425,11 @@\n    (match_operand:FP 2 \"gcn_valu_src0_operand\")]\n   \"flag_reciprocal_math\"\n   {\n-    rtx two = const_double_from_real_value (dconst2, <MODE>mode);\n+    rtx one = const_double_from_real_value (dconst1, <MODE>mode);\n     rtx initrcp = gen_reg_rtx (<MODE>mode);\n     rtx fma = gen_reg_rtx (<MODE>mode);\n     rtx rcp;\n+    rtx num = operands[1], denom = operands[2];\n \n     bool is_rcp = (GET_CODE (operands[1]) == CONST_DOUBLE\n \t\t   && real_identical (CONST_DOUBLE_REAL_VALUE (operands[1]),\n@@ -2428,12 +2440,22 @@\n     else\n       rcp = gen_reg_rtx (<MODE>mode);\n \n-    emit_insn (gen_recip<mode>2 (initrcp, operands[2]));\n-    emit_insn (gen_fma<mode>4_negop2 (fma, initrcp, operands[2], two));\n-    emit_insn (gen_mul<mode>3 (rcp, initrcp, fma));\n+    emit_insn (gen_recip<mode>2 (initrcp, denom));\n+    emit_insn (gen_fma<mode>4_negop2 (fma, initrcp, denom, one));\n+    emit_insn (gen_fma<mode>4 (rcp, fma, initrcp, initrcp));\n \n     if (!is_rcp)\n-      emit_insn (gen_mul<mode>3 (operands[0], operands[1], rcp));\n+      {\n+\trtx div_est = gen_reg_rtx (<MODE>mode);\n+\trtx fma2 = gen_reg_rtx (<MODE>mode);\n+\trtx fma3 = gen_reg_rtx (<MODE>mode);\n+\trtx fma4 = gen_reg_rtx (<MODE>mode);\n+\temit_insn (gen_mul<mode>3 (div_est, num, rcp));\n+\temit_insn (gen_fma<mode>4_negop2 (fma2, div_est, denom, num));\n+\temit_insn (gen_fma<mode>4 (fma3, fma2, rcp, div_est));\n+\temit_insn (gen_fma<mode>4_negop2 (fma4, fma3, denom, num));\n+\temit_insn (gen_fma<mode>4 (operands[0], fma4, rcp, fma3));\n+      }\n \n     DONE;\n   })"}, {"sha": "b5f895a93e2949d59695ad954547d1a4bd6fc87d", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8812bac8ee39f73ea881e4f6260acf5590b4190/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8812bac8ee39f73ea881e4f6260acf5590b4190/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=c8812bac8ee39f73ea881e4f6260acf5590b4190", "patch": "@@ -80,7 +80,8 @@\n   UNSPEC_MOV_DPP_SHR\n   UNSPEC_MOV_FROM_LANE63\n   UNSPEC_GATHER\n-  UNSPEC_SCATTER])\n+  UNSPEC_SCATTER\n+  UNSPEC_RCP])\n \n ;; }}}\n ;; {{{ Attributes"}, {"sha": "7125b6f6ba0cf5df5d8fcd82b6c16447277035aa", "filename": "gcc/testsuite/gcc.target/gcn/fpdiv.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8812bac8ee39f73ea881e4f6260acf5590b4190/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Ffpdiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8812bac8ee39f73ea881e4f6260acf5590b4190/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Ffpdiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fgcn%2Ffpdiv.c?ref=c8812bac8ee39f73ea881e4f6260acf5590b4190", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-ffast-math\" } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <stdint.h>\n+\n+double num = 100;\n+double denom = 50;\n+\n+union bits {\n+  double fp;\n+  uint64_t ull;\n+};\n+\n+int main (int argc, char* argv[])\n+{\n+  union bits recip;\n+  union bits res;\n+\n+  recip.fp = 1.0 / denom;\n+\n+  if (recip.ull != 0x3f947ae147ae147b)\n+    {\n+      fprintf (stderr, \"incorrectly-rounded reciprocal: %llx\", recip.ull);\n+      exit (1);\n+    }\n+\n+  res.fp = num / denom;\n+\n+  if (res.ull != 0x4000000000000000)\n+    {\n+      fprintf (stderr, \"incorrectly-rounded quotient: %llx\", res.ull);\n+      exit (1);\n+    }\n+\n+  return 0;\n+}"}]}