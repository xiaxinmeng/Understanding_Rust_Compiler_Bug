{"sha": "63eb1269483a23914c535d12afd5b5e0f4e02391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNlYjEyNjk0ODNhMjM5MTRjNTM1ZDEyYWZkNWI1ZTBmNGUwMjM5MQ==", "commit": {"author": {"name": "Mike Coleman", "email": "mcoleman2@kc.rr.com", "date": "2000-10-28T00:04:11Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-10-28T00:04:11Z"}, "message": "c-pragma.c (handle_pragma_pack): Initialize align to -1.\n\n2000-10-21  Mike Coleman  <mcoleman2@kc.rr.com>\n\n\t* c-pragma.c (handle_pragma_pack): Initialize align to -1.\n\tImprove error messages.  Correct parsing of\n\t#pragma pack(pop [,id]).  Do not check the user-supplied\n\talignment if we're popping.\n\n\t* gcc.dg/pack-test-1.c: New test case.\n\t* gcc.dg/pack-test-2.c: New test case.\n\t* gcc.dg/pack-test-1.h: New file.\n\nFrom-SVN: r37095", "tree": {"sha": "72e1c2ef417dd127c4cd13c98dac0385b812a71e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72e1c2ef417dd127c4cd13c98dac0385b812a71e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63eb1269483a23914c535d12afd5b5e0f4e02391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63eb1269483a23914c535d12afd5b5e0f4e02391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63eb1269483a23914c535d12afd5b5e0f4e02391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63eb1269483a23914c535d12afd5b5e0f4e02391/comments", "author": null, "committer": null, "parents": [{"sha": "ae2eceaad2f95f7228e69ab5513f355e868ab787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2eceaad2f95f7228e69ab5513f355e868ab787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2eceaad2f95f7228e69ab5513f355e868ab787"}], "stats": {"total": 270, "additions": 240, "deletions": 30}, "files": [{"sha": "ff659375336bb44bf67f0221bdbd0998bdb705a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63eb1269483a23914c535d12afd5b5e0f4e02391/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63eb1269483a23914c535d12afd5b5e0f4e02391/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63eb1269483a23914c535d12afd5b5e0f4e02391", "patch": "@@ -1,3 +1,14 @@\n+2000-10-21  Mike Coleman  <mcoleman2@kc.rr.com>\n+\n+\t* c-pragma.c (handle_pragma_pack): Initialize align to -1.\n+\tImprove error messages.  Correct parsing of \n+\t#pragma pack(pop [,id]).  Do not check the user-supplied\n+\talignment if we're popping.\n+\n+\t* gcc.dg/pack-test-1.c: New test case.\n+\t* gcc.dg/pack-test-2.c: New test case.\n+\t* gcc.dg/pack-test-1.h: New file.\n+\n 2000-10-27  Neil Booth  <neilb@earthling.net>\n \n \t* cpp.texi: Update."}, {"sha": "a9f41f91aa6e27c8822f48647d72a0e1c986734a", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 48, "deletions": 30, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63eb1269483a23914c535d12afd5b5e0f4e02391/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63eb1269483a23914c535d12afd5b5e0f4e02391/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=63eb1269483a23914c535d12afd5b5e0f4e02391", "patch": "@@ -60,8 +60,8 @@ typedef struct align_stack\n \n static struct align_stack * alignment_stack = NULL;\n \n-/* If we have a \"global\" #pragma pack(<n>) if effect when the first\n-   #pragma push(pack,<n>) is encountered, this stores the the value of \n+/* If we have a \"global\" #pragma pack(<n>) in effect when the first\n+   #pragma pack(push,<n>) is encountered, this stores the value of \n    maximum_field_alignment in effect.  When the final pop_alignment() \n    happens, we restore the value to this, not to a value of 0 for\n    maximum_field_alignment.  Value is in bits. */\n@@ -186,7 +186,7 @@ handle_pragma_pack (dummy)\n      cpp_reader *dummy ATTRIBUTE_UNUSED;\n {\n   tree x, id = 0;\n-  int align;\n+  int align = -1;\n   enum cpp_ttype token;\n   enum { set, push, pop } action;\n \n@@ -208,6 +208,12 @@ handle_pragma_pack (dummy)\n     }\n   else if (token == CPP_NAME)\n     {\n+#define BAD_ACTION do { if (action == push) \\\n+\t  BAD (\"malformed '#pragma pack(push[, id], <n>)' - ignored\"); \\\n+\telse \\\n+\t  BAD (\"malformed '#pragma pack(pop[, id])' - ignored\"); \\\n+\t} while (0)\n+\n       const char *op = IDENTIFIER_POINTER (x);\n       if (!strcmp (op, \"push\"))\n \taction = push;\n@@ -216,45 +222,57 @@ handle_pragma_pack (dummy)\n       else\n \tBAD2 (\"unknown action '%s' for '#pragma pack' - ignored\", op);\n \n-      if (c_lex (&x) != CPP_COMMA)\n-\tBAD2 (\"malformed '#pragma pack(%s[, id], <n>)' - ignored\", op);\n-\n       token = c_lex (&x);\n-      if (token == CPP_NAME)\n+      if (token != CPP_COMMA && action == push)\n+\tBAD_ACTION;\n+\n+      if (token == CPP_COMMA)\n \t{\n-\t  id = x;\n-\t  if (c_lex (&x) != CPP_COMMA)\n-\t    BAD2 (\"malformed '#pragma pack(%s[, id], <n>)' - ignored\", op);\n \t  token = c_lex (&x);\n-\t}\n+\t  if (token == CPP_NAME)\n+\t    {\n+\t      id = x;\n+\t      if (action == push && c_lex (&x) != CPP_COMMA)\n+\t\tBAD_ACTION;\n+\t      token = c_lex (&x);\n+\t    }\n \n-      if (token == CPP_NUMBER)\n-\talign = TREE_INT_CST_LOW (x);\n-      else\n-\tBAD2 (\"malformed '#pragma pack(%s[, id], <n>)' - ignored\", op);\n+\t  if (action == push)\n+\t    {\n+\t      if (token == CPP_NUMBER)\n+\t\t{\n+\t\t  align = TREE_INT_CST_LOW (x);\n+\t\t  token = c_lex (&x);\n+\t\t}\n+\t      else\n+\t\tBAD_ACTION;\n+\t    }\n+\t}\n \n-      if (c_lex (&x) != CPP_CLOSE_PAREN)\n-\tBAD (\"malformed '#pragma pack' - ignored\");\n+      if (token != CPP_CLOSE_PAREN)\n+\tBAD_ACTION;\n+#undef BAD_ACTION\n     }\n   else\n     BAD (\"malformed '#pragma pack' - ignored\");\n \n   if (c_lex (&x) != CPP_EOF)\n     warning (\"junk at end of '#pragma pack'\");\n \n-  switch (align)\n-    {\n-    case 0:\n-    case 1:\n-    case 2:\n-    case 4:\n-    case 8:\n-    case 16:\n-      align *= BITS_PER_UNIT;\n-      break;\n-    default:\n-      BAD2 (\"alignment must be a small power of two, not %d\", align);\n-    }\n+  if (action != pop)\n+    switch (align)\n+      {\n+      case 0:\n+      case 1:\n+      case 2:\n+      case 4:\n+      case 8:\n+      case 16:\n+\talign *= BITS_PER_UNIT;\n+\tbreak;\n+      default:\n+\tBAD2 (\"alignment must be a small power of two, not %d\", align);\n+      }\n \n   switch (action)\n     {"}, {"sha": "1ceee99a7f978b270021b8ffafce9a8e952902aa", "filename": "gcc/testsuite/gcc.dg/pack-test-1.c", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63eb1269483a23914c535d12afd5b5e0f4e02391/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63eb1269483a23914c535d12afd5b5e0f4e02391/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.c?ref=63eb1269483a23914c535d12afd5b5e0f4e02391", "patch": "@@ -0,0 +1,146 @@\n+/* Test semantics of #pragma pack.\n+   Contributed by Mike Coleman <mcoleman2@kc.rr.com> */\n+\n+/* { dg-do compile { target *-*-linux* *-*-cygwin* } } */\n+\n+/* We only test the alignment of char, short, and int, because these\n+   are the only ones that are pretty certain to be the same across\n+   platforms (and maybe not even those).  Mainly we're just testing\n+   whether pushing and popping seem to be working correctly, and\n+   verifying the (alignment == 1) case, which is really the only\n+   reason anyone would use this pragma anyway.\n+*/\n+\n+#include <stddef.h>\n+\n+/* gap in bytes between fields a and b in struct s */\n+#define gap(s, a, b) (offsetof(struct s, a) - offsetof(struct s, b))\n+/* generalized compile-time test expression */\n+#define test(n, expr) int test_##n [(expr) ? 1 : -1]\n+/* test a gap */\n+#define testgap(n, a, b, val) test(n, gap(SNAME, a, b) == val)\n+\n+#define SNAME s0\n+#include \"pack-test-1.h\"\n+\n+/* Save original alignment values.  Can't use const ints because they\n+   won't be expanded and we'll get bogus errors about variable length\n+   arrays.  (Possible bug in C front end?)  Use s0, not SNAME, so these\n+   won't change later.  */\n+#define al1 gap(s0, f1, f0)\n+#define al2 gap(s0, f2, f1)\n+#define al3 gap(s0, f3, f2)\n+#define al4 gap(s0, f4, f3)\n+#define al5 gap(s0, f5, f4)\n+#define al6 gap(s0, f6, f5)\n+#define al7 gap(s0, f7, f6)\n+\n+#undef SNAME\n+#define SNAME s1\n+#pragma pack(push, p1, 1)\n+#include \"pack-test-1.h\"\n+\n+void SNAME() {\n+  testgap(0, f1, f0, sizeof(char));\n+  testgap(1, f3, f2, sizeof(short));\n+  testgap(2, f5, f4, sizeof(int));\n+}\n+\n+#undef SNAME\n+#define SNAME s2\n+#pragma pack(push, p2, 2)\n+#include \"pack-test-1.h\"\n+\n+void SNAME() {\n+  testgap(0, f1, f0, sizeof(short));\n+  testgap(1, f3, f2, sizeof(short));\n+  testgap(2, f5, f4, sizeof(int));\n+}\n+\n+#undef SNAME\n+#define SNAME s3\n+#pragma pack(push, p3, 4)\n+#include \"pack-test-1.h\"\n+\n+void SNAME() {\n+  testgap(0, f1, f0, sizeof(int));\n+  testgap(1, f3, f2, sizeof(int));\n+  testgap(2, f5, f4, sizeof(int));\n+}\n+\n+#undef SNAME\n+#define SNAME s4\n+#pragma pack(pop)\n+#include \"pack-test-1.h\"\n+\n+void SNAME() {\n+  testgap(0, f1, f0, sizeof(short));\n+  testgap(1, f3, f2, sizeof(short));\n+  testgap(2, f5, f4, sizeof(int));\n+}\n+\n+#undef SNAME\n+#define SNAME s5\n+#pragma pack(pop, p2)\n+#include \"pack-test-1.h\"\n+\n+void SNAME() {\n+  testgap(0, f1, f0, sizeof(char));\n+  testgap(1, f3, f2, sizeof(short));\n+  testgap(2, f5, f4, sizeof(int));\n+}\n+\n+#undef SNAME\n+#define SNAME s6\n+#pragma pack(pop, p1)\n+#include \"pack-test-1.h\"\n+\n+void SNAME() {\n+  testgap(0, f1, f0, al1);\n+  testgap(1, f3, f2, al3);\n+  testgap(2, f5, f4, al5);\n+}\n+\n+#undef SNAME\n+#define SNAME s7\n+#pragma pack(1)\n+#include \"pack-test-1.h\"\n+\n+void SNAME() {\n+  testgap(0, f1, f0, sizeof(char));\n+  testgap(1, f3, f2, sizeof(short));\n+  testgap(2, f5, f4, sizeof(int));\n+}\n+\n+#undef SNAME\n+#define SNAME s8\n+#pragma pack(push, p2, 2)\n+#include \"pack-test-1.h\"\n+\n+void SNAME() {\n+  testgap(0, f1, f0, sizeof(short));\n+  testgap(1, f3, f2, sizeof(short));\n+  testgap(2, f5, f4, sizeof(int));\n+}\n+\n+#undef SNAME\n+#define SNAME s9\n+#pragma pack(pop)\n+#include \"pack-test-1.h\"\n+\n+void SNAME() {\n+  testgap(0, f1, f0, sizeof(char));\n+  testgap(1, f3, f2, sizeof(short));\n+  testgap(2, f5, f4, sizeof(int));\n+}\n+\n+#undef SNAME\n+#define SNAME s10\n+#pragma pack()\n+#include \"pack-test-1.h\"\n+\n+void SNAME() {\n+  testgap(0, f1, f0, al1);\n+  testgap(1, f3, f2, al3);\n+  testgap(2, f5, f4, al5);\n+}"}, {"sha": "f4889fabef6395dbba5806d4fecd21b52adfd902", "filename": "gcc/testsuite/gcc.dg/pack-test-1.h", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63eb1269483a23914c535d12afd5b5e0f4e02391/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63eb1269483a23914c535d12afd5b5e0f4e02391/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.h?ref=63eb1269483a23914c535d12afd5b5e0f4e02391", "patch": "@@ -0,0 +1,12 @@\n+/* Helper file, included repeatedly by pack-test-1.c.  */\n+\n+struct SNAME {\n+  char f0;\n+  double f1;\n+  short f2;\n+  double f3;\n+  int f4;\n+  double f5;\n+  double f6;\n+  double f7;\n+};"}, {"sha": "65960ed9d362ffc7dd82ec164c9412213b2ad3ae", "filename": "gcc/testsuite/gcc.dg/pack-test-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63eb1269483a23914c535d12afd5b5e0f4e02391/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63eb1269483a23914c535d12afd5b5e0f4e02391/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-2.c?ref=63eb1269483a23914c535d12afd5b5e0f4e02391", "patch": "@@ -0,0 +1,23 @@\n+/* Tests for syntax checking of #pragma pack.\n+   Contributed by Mike Coleman <mcoleman2@kc.rr.com> */\n+\n+/* { dg-do compile { target *-*-linux* *-*-cygwin* } } */\n+\n+#pragma pack(push)              /* { dg-error \"malformed\" } */\n+#pragma pack(pop)               /* { dg-error \"without matching\" } */\n+\n+#pragma pack(push, foo, 1)\n+#pragma pack(pop, foo, 1)       /* { dg-error \"malformed\" } (/\n+#pragma pack(pop)               /* reset */\n+\n+#pragma pack(push, foo, 1)\n+#pragma pack(pop, bar)          /* { dg-error \"without matching\" } */\n+#pragma pack(pop)               /* reset */\n+\n+#pragma pack(push, foo, 1)\n+#pragma pack(pop)\n+#pragma pack(pop, foo)          /* { dg-error \"without matching\" } */\n+\n+#pragma pack(push, foo, 3)      /* { dg-error \"small power of two\" } */\n+\n+extern int blah;\t/* prevent \"ISO C forbids an empty source file\" */"}]}