{"sha": "10b8b0ba6971847336e0368bd2cdb62fe352767b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBiOGIwYmE2OTcxODQ3MzM2ZTAzNjhiZDJjZGI2MmZlMzUyNzY3Yg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-11T15:50:52Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-11T15:50:52Z"}, "message": "(fancy_abort): Defined.\n\n(write_rbrac): When adding proto for memmove,\nput it inside #ifndef memmove.\n\nFrom-SVN: r6071", "tree": {"sha": "451c56f2432991194375b354d4045f81abda1d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/451c56f2432991194375b354d4045f81abda1d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10b8b0ba6971847336e0368bd2cdb62fe352767b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b8b0ba6971847336e0368bd2cdb62fe352767b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b8b0ba6971847336e0368bd2cdb62fe352767b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b8b0ba6971847336e0368bd2cdb62fe352767b/comments", "author": null, "committer": null, "parents": [{"sha": "ce95080d6da2a435c651a73c71caae6ff24f4412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce95080d6da2a435c651a73c71caae6ff24f4412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce95080d6da2a435c651a73c71caae6ff24f4412"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "3a08d9365f7ca1f9ec93c25de6f494ed7608446c", "filename": "gcc/fix-header.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10b8b0ba6971847336e0368bd2cdb62fe352767b/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10b8b0ba6971847336e0368bd2cdb62fe352767b/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=10b8b0ba6971847336e0368bd2cdb62fe352767b", "patch": "@@ -112,15 +112,26 @@ int seen_S_IFDIR = 0, seen_S_ISDIR  = 0;\n int seen_S_IFIFO = 0, seen_S_ISFIFO = 0;\n int seen_S_IFLNK = 0, seen_S_ISLNK  = 0;\n int seen_S_IFREG = 0, seen_S_ISREG  = 0;\n-\n+\f\n /* Wrapper around free, to avoid prototype clashes. */\n \n-void xfree (ptr)\n+void\n+xfree (ptr)\n      char *ptr;\n {\n   free (ptr);\n }\n \n+/* Avoid error if config defines abort as fancy_abort.\n+   It's not worth \"really\" implementing this because ordinary\n+   compiler users never run fix-header.  */\n+\n+void\n+fancy_abort ()\n+{\n+  abort ();\n+}\n+\f\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free xfree\n struct obstack scan_file_obstack;\n@@ -360,11 +371,23 @@ write_rbrac ()\n   /* Now we print out prototypes for those functions that we haven't seen. */\n   for (rptr = required_functions; *rptr; rptr++)\n     {\n+      int macro_protect = 0;\n+\n       fn = lookup_std_proto (*rptr);\n       if (fn == NULL || !REQUIRED (fn))\n \tcontinue;\n+\n+      /* In the case of memmove, protect in case the application\n+\t defines it as a macro before including the header.  */\n+      if (!strcmp (fn->fname, \"memmove\"))\n+\tmacro_protect = 1;\n+\n+      if (macro_protect)\n+\tfprintf (outf, \"#ifndef %s\\n\", fn->fname);\n       fprintf (outf, \"extern %s %s (%s);\\n\",\n \t       fn->rtype, fn->fname, fn->params);\n+      if (macro_protect)\n+\tfprintf (outf, \"#endif\\n\");\n     }\n   if (required_unseen_count)\n     fprintf (outf,"}]}