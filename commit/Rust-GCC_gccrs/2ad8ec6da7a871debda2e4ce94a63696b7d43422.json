{"sha": "2ad8ec6da7a871debda2e4ce94a63696b7d43422", "node_id": "C_kwDOANBUbNoAKDJhZDhlYzZkYTdhODcxZGViZGEyZTRjZTk0YTYzNjk2YjdkNDM0MjI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-02T14:37:23Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-04T07:37:38Z"}, "message": "ast: Dump InherentImpl", "tree": {"sha": "6638fd07c8febdfae1fb3bba5ce11fb6a1cda015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6638fd07c8febdfae1fb3bba5ce11fb6a1cda015"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ad8ec6da7a871debda2e4ce94a63696b7d43422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad8ec6da7a871debda2e4ce94a63696b7d43422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ad8ec6da7a871debda2e4ce94a63696b7d43422", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ad8ec6da7a871debda2e4ce94a63696b7d43422/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957914b4284213b1d72c9c4210892367acaf1419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957914b4284213b1d72c9c4210892367acaf1419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957914b4284213b1d72c9c4210892367acaf1419"}], "stats": {"total": 83, "additions": 72, "deletions": 11}, "files": [{"sha": "c23720b59d133c1c2a1ca41b2df22776f4ec069b", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 72, "deletions": 11, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ad8ec6da7a871debda2e4ce94a63696b7d43422/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ad8ec6da7a871debda2e4ce94a63696b7d43422/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=2ad8ec6da7a871debda2e4ce94a63696b7d43422", "patch": "@@ -102,7 +102,9 @@ Dump::visit (TypePathSegmentFunction &segment)\n \n void\n Dump::visit (TypePath &path)\n-{}\n+{\n+  stream << path.as_string ();\n+}\n \n void\n Dump::visit (QualifiedPathInExpression &path)\n@@ -253,8 +255,8 @@ Dump::visit (BlockExpr &expr)\n   if (expr.has_tail_expr ())\n     expr.get_tail_expr ()->accept_vis (*this);\n \n-  stream << \"\\n}\\n\";\n-  indentation.increment ();\n+  indentation.decrement ();\n+  stream << \"\\n\" << indentation << \"}\\n\";\n }\n \n void\n@@ -364,7 +366,10 @@ Dump::visit (AsyncBlockExpr &expr)\n // rust-item.h\n void\n Dump::visit (TypeParam &param)\n-{}\n+{\n+  // Is it possible to have a null type here?\n+  param.get_type ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (LifetimeWhereClauseItem &item)\n@@ -376,7 +381,36 @@ Dump::visit (TypeBoundWhereClauseItem &item)\n \n void\n Dump::visit (Method &method)\n-{}\n+{\n+  stream << indentation << \"fn \" << method.get_method_name () << '(';\n+\n+  auto &self = method.get_self_param ();\n+  stream << self.as_string ();\n+\n+  auto &params = method.get_function_params ();\n+  for (auto &param : params)\n+    {\n+      stream << \", \";\n+      format_function_param (param);\n+    }\n+\n+  stream << \") \";\n+\n+  if (method.has_return_type ())\n+    {\n+      stream << \"-> \";\n+      method.get_return_type ()->accept_vis (*this);\n+      stream << \" \";\n+    }\n+\n+  auto &block = method.get_definition ();\n+  if (!block)\n+    stream << ';';\n+  else\n+    block->accept_vis (*this);\n+\n+  stream << '\\n';\n+}\n \n void\n Dump::visit (Module &module)\n@@ -405,7 +439,7 @@ Dump::visit (UseDeclaration &use_decl)\n void\n Dump::visit (Function &function)\n {\n-  stream << \"fn \" << function.get_function_name () << '(';\n+  stream << indentation << \"fn \" << function.get_function_name () << '(';\n \n   auto &params = function.get_function_params ();\n   if (params.size () >= 1)\n@@ -424,6 +458,7 @@ Dump::visit (Function &function)\n     {\n       stream << \"-> \";\n       function.get_return_type ()->accept_vis (*this);\n+      stream << \" \";\n     }\n \n   auto &block = function.get_definition ();\n@@ -501,7 +536,25 @@ Dump::visit (Trait &trait)\n \n void\n Dump::visit (InherentImpl &impl)\n-{}\n+{\n+  stream << \"impl \";\n+\n+  // FIXME: Handle generics\n+\n+  impl.get_type ()->accept_vis (*this);\n+\n+  // FIXME: Handle where-clause\n+  // FIXME: Handle inner attributes\n+\n+  stream << \" {\\n\";\n+  indentation.increment ();\n+\n+  for (auto &item : impl.get_impl_items ())\n+    item->accept_vis (*this);\n+\n+  indentation.decrement ();\n+  stream << \"\\n}\\n\";\n+}\n \n void\n Dump::visit (TraitImpl &impl)\n@@ -728,19 +781,27 @@ Dump::visit (RawPointerType &type)\n \n void\n Dump::visit (ReferenceType &type)\n-{}\n+{\n+  type.get_type_referenced ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (ArrayType &type)\n-{}\n+{\n+  type.get_elem_type ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (SliceType &type)\n-{}\n+{\n+  type.get_elem_type ()->accept_vis (*this);\n+}\n \n void\n Dump::visit (InferredType &type)\n-{}\n+{\n+  stream << \"_\";\n+}\n \n void\n Dump::visit (BareFunctionType &type)"}]}