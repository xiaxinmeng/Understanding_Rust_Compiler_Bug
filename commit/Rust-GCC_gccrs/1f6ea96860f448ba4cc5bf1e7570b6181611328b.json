{"sha": "1f6ea96860f448ba4cc5bf1e7570b6181611328b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY2ZWE5Njg2MGY0NDhiYTRjYzViZjFlNzU3MGI2MTgxNjExMzI4Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-16T14:18:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-16T14:18:45Z"}, "message": "Change EBO accessors from static to non-static member functions\n\n\t* include/bits/hashtable_policy.h (_Hashtable_ebo_helper::_S_get):\n\tReplace with _M_get non-static member function.\n\t(_Hashtable_ebo_helper::_S_cget): Replace with _M_cget non-static\n\tmember function.\n\t(_Hash_code_base, _Local_iterator_base, _Hashtable_base):\n\t(_Hashtable_alloc): Adjust to use non-static members of EBO helper.\n\nFrom-SVN: r271290", "tree": {"sha": "5e47989d6ed8a826a3846088caf668f6c20b9bb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e47989d6ed8a826a3846088caf668f6c20b9bb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f6ea96860f448ba4cc5bf1e7570b6181611328b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6ea96860f448ba4cc5bf1e7570b6181611328b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6ea96860f448ba4cc5bf1e7570b6181611328b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6ea96860f448ba4cc5bf1e7570b6181611328b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a61b003fbd290846feb08b6bf89bc5cf54fd87c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61b003fbd290846feb08b6bf89bc5cf54fd87c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a61b003fbd290846feb08b6bf89bc5cf54fd87c3"}], "stats": {"total": 73, "additions": 35, "deletions": 38}, "files": [{"sha": "bb947cca088e9bbde4a16c807a6ee5f0004a0b50", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6ea96860f448ba4cc5bf1e7570b6181611328b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6ea96860f448ba4cc5bf1e7570b6181611328b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f6ea96860f448ba4cc5bf1e7570b6181611328b", "patch": "@@ -1,5 +1,12 @@\n 2019-05-16  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/hashtable_policy.h (_Hashtable_ebo_helper::_S_get):\n+\tReplace with _M_get non-static member function.\n+\t(_Hashtable_ebo_helper::_S_cget): Replace with _M_cget non-static\n+\tmember function.\n+\t(_Hash_code_base, _Local_iterator_base, _Hashtable_base):\n+\t(_Hashtable_alloc): Adjust to use non-static members of EBO helper.\n+\n \t* include/bits/hashtable_policy.h (_Hash_code_base::_M_swap): Use\n \t_S_get accessors for members in EBO helpers.\n \t(_Hash_code_base::_M_extract(), _Hash_code_base::_M_ranged_hash())"}, {"sha": "f7db7628c690305b646749f533b6e4decf9f3163", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 28, "deletions": 38, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6ea96860f448ba4cc5bf1e7570b6181611328b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6ea96860f448ba4cc5bf1e7570b6181611328b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=1f6ea96860f448ba4cc5bf1e7570b6181611328b", "patch": "@@ -1112,13 +1112,8 @@ namespace __detail\n \t  : _Tp(std::forward<_OtherTp>(__tp))\n \t{ }\n \n-      static const _Tp&\n-      _S_cget(const _Hashtable_ebo_helper& __eboh)\n-      { return static_cast<const _Tp&>(__eboh); }\n-\n-      static _Tp&\n-      _S_get(_Hashtable_ebo_helper& __eboh)\n-      { return static_cast<_Tp&>(__eboh); }\n+      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }\n+      _Tp& _M_get() { return static_cast<_Tp&>(*this); }\n     };\n \n   /// Specialization not using EBO.\n@@ -1132,13 +1127,8 @@ namespace __detail\n \t  : _M_tp(std::forward<_OtherTp>(__tp))\n \t{ }\n \n-      static const _Tp&\n-      _S_cget(const _Hashtable_ebo_helper& __eboh)\n-      { return __eboh._M_tp; }\n-\n-      static _Tp&\n-      _S_get(_Hashtable_ebo_helper& __eboh)\n-      { return __eboh._M_tp; }\n+      const _Tp& _M_cget() const { return _M_tp; }\n+      _Tp& _M_get() { return _M_tp; }\n \n     private:\n       _Tp _M_tp;\n@@ -1229,16 +1219,16 @@ namespace __detail\n       void\n       _M_swap(_Hash_code_base& __x)\n       {\n-\tstd::swap(__ebo_extract_key::_S_get(*this),\n-\t\t  __ebo_extract_key::_S_get(__x));\n-\tstd::swap(__ebo_hash::_S_get(*this), __ebo_hash::_S_get(__x));\n+\tstd::swap(__ebo_extract_key::_M_get(),\n+\t\t  __x.__ebo_extract_key::_M_get());\n+\tstd::swap(__ebo_hash::_M_get(), __x.__ebo_hash::_M_get());\n       }\n \n       const _ExtractKey&\n-      _M_extract() const { return __ebo_extract_key::_S_cget(*this); }\n+      _M_extract() const { return __ebo_extract_key::_M_cget(); }\n \n       const _Hash&\n-      _M_ranged_hash() const { return __ebo_hash::_S_cget(*this); }\n+      _M_ranged_hash() const { return __ebo_hash::_M_cget(); }\n     };\n \n   // No specialization for ranged hash function while caching hash codes.\n@@ -1317,20 +1307,20 @@ namespace __detail\n       void\n       _M_swap(_Hash_code_base& __x)\n       {\n-\tstd::swap(__ebo_extract_key::_S_get(*this),\n-\t\t  __ebo_extract_key::_S_get(__x));\n-\tstd::swap(__ebo_h1::_S_get(*this), __ebo_h1::_S_get(__x));\n-\tstd::swap(__ebo_h2::_S_get(*this), __ebo_h2::_S_get(__x));\n+\tstd::swap(__ebo_extract_key::_M_get(),\n+\t\t  __x.__ebo_extract_key::_M_get());\n+\tstd::swap(__ebo_h1::_M_get(), __x.__ebo_h1::_M_get());\n+\tstd::swap(__ebo_h2::_M_get(), __x.__ebo_h2::_M_get());\n       }\n \n       const _ExtractKey&\n-      _M_extract() const { return __ebo_extract_key::_S_cget(*this); }\n+      _M_extract() const { return __ebo_extract_key::_M_cget(); }\n \n       const _H1&\n-      _M_h1() const { return __ebo_h1::_S_cget(*this); }\n+      _M_h1() const { return __ebo_h1::_M_cget(); }\n \n       const _H2&\n-      _M_h2() const { return __ebo_h2::_S_cget(*this); }\n+      _M_h2() const { return __ebo_h2::_M_cget(); }\n     };\n \n   /// Specialization: hash function and range-hashing function,\n@@ -1397,20 +1387,20 @@ namespace __detail\n       void\n       _M_swap(_Hash_code_base& __x)\n       {\n-\tstd::swap(__ebo_extract_key::_S_get(*this),\n-\t\t  __ebo_extract_key::_S_get(__x));\n-\tstd::swap(__ebo_h1::_S_get(*this), __ebo_h1::_S_get(__x));\n-\tstd::swap(__ebo_h2::_S_get(*this), __ebo_h2::_S_get(__x));\n+\tstd::swap(__ebo_extract_key::_M_get(),\n+\t\t  __x.__ebo_extract_key::_M_get());\n+\tstd::swap(__ebo_h1::_M_get(), __x.__ebo_h1::_M_get());\n+\tstd::swap(__ebo_h2::_M_get(), __x.__ebo_h2::_M_get());\n       }\n \n       const _ExtractKey&\n-      _M_extract() const { return __ebo_extract_key::_S_cget(*this); }\n+      _M_extract() const { return __ebo_extract_key::_M_cget(); }\n \n       const _H1&\n-      _M_h1() const { return __ebo_h1::_S_cget(*this); }\n+      _M_h1() const { return __ebo_h1::_M_cget(); }\n \n       const _H2&\n-      _M_h2() const { return __ebo_h2::_S_cget(*this); }\n+      _M_h2() const { return __ebo_h2::_M_cget(); }\n     };\n \n   /**\n@@ -1471,7 +1461,7 @@ namespace __detail\n \tif (_M_cur)\n \t  {\n \t    std::size_t __bkt\n-\t      = __base_type::_S_get(*this)(_M_cur->_M_hash_code,\n+\t      = __base_type::_M_get()(_M_cur->_M_hash_code,\n \t\t\t\t\t   _M_bucket_count);\n \t    if (__bkt != _M_bucket)\n \t      _M_cur = nullptr;\n@@ -1819,11 +1809,11 @@ namespace __detail\n     _M_swap(_Hashtable_base& __x)\n     {\n       __hash_code_base::_M_swap(__x);\n-      std::swap(_EqualEBO::_S_get(*this), _EqualEBO::_S_get(__x));\n+      std::swap(_EqualEBO::_M_get(), __x._EqualEBO::_M_get());\n     }\n \n     const _Equal&\n-    _M_eq() const { return _EqualEBO::_S_cget(*this); }\n+    _M_eq() const { return _EqualEBO::_M_cget(); }\n   };\n \n   /**\n@@ -2021,11 +2011,11 @@ namespace __detail\n \n       __node_alloc_type&\n       _M_node_allocator()\n-      { return __ebo_node_alloc::_S_get(*this); }\n+      { return __ebo_node_alloc::_M_get(); }\n \n       const __node_alloc_type&\n       _M_node_allocator() const\n-      { return __ebo_node_alloc::_S_cget(*this); }\n+      { return __ebo_node_alloc::_M_cget(); }\n \n       template<typename... _Args>\n \t__node_type*"}]}