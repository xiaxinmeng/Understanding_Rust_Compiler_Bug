{"sha": "ace31bca4a35b5da87957a80aecfffada0094818", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNlMzFiY2E0YTM1YjVkYTg3OTU3YTgwYWVjZmZmYWRhMDA5NDgxOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-31T11:10:59Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-31T11:10:59Z"}, "message": "re PR target/48142 (miscompilation with -Os -mpreferred-stack-boundary=5 -fstack-check)\n\n\tPR target/48142\n\t* config/i386/i386.c (ix86_adjust_stack_and_probe): Differentiate\n\tframe-related from frame-unrelated adjustments to the stack pointer.\n\nFrom-SVN: r171777", "tree": {"sha": "f6502bc5afdf187f5c4a72916b0580756aa22456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6502bc5afdf187f5c4a72916b0580756aa22456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ace31bca4a35b5da87957a80aecfffada0094818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace31bca4a35b5da87957a80aecfffada0094818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ace31bca4a35b5da87957a80aecfffada0094818", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ace31bca4a35b5da87957a80aecfffada0094818/comments", "author": null, "committer": null, "parents": [{"sha": "178aa0f6487a8b296c30e7c81bcb59ef6ddccc81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178aa0f6487a8b296c30e7c81bcb59ef6ddccc81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178aa0f6487a8b296c30e7c81bcb59ef6ddccc81"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "714650e81c1c22ee49bc5afe858111b18b95b876", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace31bca4a35b5da87957a80aecfffada0094818/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace31bca4a35b5da87957a80aecfffada0094818/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ace31bca4a35b5da87957a80aecfffada0094818", "patch": "@@ -1,3 +1,9 @@\n+2011-03-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/48142\n+\t* config/i386/i386.c (ix86_adjust_stack_and_probe): Differentiate\n+\tframe-related from frame-unrelated adjustments to the stack pointer.\n+\n 2011-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n \t* common.opt (fdebug-types-section): Move earlier."}, {"sha": "738dc1c622bab19b0919c04da25314f1a498f62d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace31bca4a35b5da87957a80aecfffada0094818/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace31bca4a35b5da87957a80aecfffada0094818/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ace31bca4a35b5da87957a80aecfffada0094818", "patch": "@@ -10006,7 +10006,7 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size)\n      probe that many bytes past the specified size to maintain a protection\n      area at the botton of the stack.  */\n   const int dope = 4 * UNITS_PER_WORD;\n-  rtx size_rtx = GEN_INT (size);\n+  rtx size_rtx = GEN_INT (size), last;\n \n   /* See if we have a constant small number of probes to generate.  If so,\n      that's the easy case.  The run-time loop is made up of 11 insns in the\n@@ -10046,9 +10046,9 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size)\n       emit_stack_probe (stack_pointer_rtx);\n \n       /* Adjust back to account for the additional first interval.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n-\t\t\t      plus_constant (stack_pointer_rtx,\n-\t\t\t\t\t     PROBE_INTERVAL + dope)));\n+      last = emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t\t     plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t    PROBE_INTERVAL + dope)));\n     }\n \n   /* Otherwise, do the same as above, but in a loop.  Note that we must be\n@@ -10109,15 +10109,33 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size)\n \t}\n \n       /* Adjust back to account for the additional first interval.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n-\t\t\t      plus_constant (stack_pointer_rtx,\n-\t\t\t\t\t     PROBE_INTERVAL + dope)));\n+      last = emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t\t     plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t    PROBE_INTERVAL + dope)));\n \n       release_scratch_register_on_entry (&sr);\n     }\n \n   gcc_assert (cfun->machine->fs.cfa_reg != stack_pointer_rtx);\n-  cfun->machine->fs.sp_offset += size;\n+\n+  /* Even if the stack pointer isn't the CFA register, we need to correctly\n+     describe the adjustments made to it, in particular differentiate the\n+     frame-related ones from the frame-unrelated ones.  */\n+  if (size > 0)\n+    {\n+      rtx expr = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (2));\n+      XVECEXP (expr, 0, 0)\n+\t= gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t       plus_constant (stack_pointer_rtx, -size));\n+      XVECEXP (expr, 0, 1)\n+\t= gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t       plus_constant (stack_pointer_rtx,\n+\t\t\t\t      PROBE_INTERVAL + dope + size));\n+      add_reg_note (last, REG_FRAME_RELATED_EXPR, expr);\n+      RTX_FRAME_RELATED_P (last) = 1;\n+\n+      cfun->machine->fs.sp_offset += size;\n+    }\n \n   /* Make sure nothing is scheduled before we are done.  */\n   emit_insn (gen_blockage ());"}, {"sha": "6bb003d1992647d2c8837eec27b393790a771062", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace31bca4a35b5da87957a80aecfffada0094818/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace31bca4a35b5da87957a80aecfffada0094818/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ace31bca4a35b5da87957a80aecfffada0094818", "patch": "@@ -1,7 +1,10 @@\n+2011-03-31  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* g++.dg/other/i386-9.C: New test.\n+\n 2011-03-30  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n-\t* go.test/go-test.exp (go-set-goarch): Use sparc64 for 64-bit\n-\tSPARC.\n+\t* go.test/go-test.exp (go-set-goarch): Use sparc64 for 64-bit SPARC.\n \n 2011-03-30  Jason Merrill  <jason@redhat.com>\n "}, {"sha": "79640579142333c133f6a04b911d2fcf737d0c3c", "filename": "gcc/testsuite/g++.dg/other/i386-9.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ace31bca4a35b5da87957a80aecfffada0094818/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ace31bca4a35b5da87957a80aecfffada0094818/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-9.C?ref=ace31bca4a35b5da87957a80aecfffada0094818", "patch": "@@ -0,0 +1,12 @@\n+// PR target/48142\n+// Testcase by Zdenek Sojka <zsojka@seznam.cz>\n+\n+// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-options \"-Os -mpreferred-stack-boundary=5 -fstack-check -fno-omit-frame-pointer\" }\n+\n+int main()\n+{\n+  try { throw 0; }\n+  catch (...) {}\n+  return 0;\n+}"}]}