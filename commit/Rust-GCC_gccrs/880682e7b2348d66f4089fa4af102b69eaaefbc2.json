{"sha": "880682e7b2348d66f4089fa4af102b69eaaefbc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgwNjgyZTdiMjM0OGQ2NmY0MDg5ZmE0YWYxMDJiNjllYWFlZmJjMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-25T09:22:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-02-25T09:22:53Z"}, "message": "match.pd: Use :s for (T)(A) + CST -> (T)(A + CST) [PR95798]\n\nThe r10-2806 change regressed following testcases, instead of doing\nint -> unsigned long sign-extension once and then add 8, 16, ... 56 to it\nfor each of the memory access, it adds 8, 16, ... 56 in int mode and then\nsign extends each.  So that means:\n+       movq    $0, (%rsp,%rax,8)\n+       leal    1(%rdx), %eax\n+       cltq\n+       movq    $1, (%rsp,%rax,8)\n+       leal    2(%rdx), %eax\n+       cltq\n+       movq    $2, (%rsp,%rax,8)\n+       leal    3(%rdx), %eax\n+       cltq\n+       movq    $3, (%rsp,%rax,8)\n+       leal    4(%rdx), %eax\n+       cltq\n+       movq    $4, (%rsp,%rax,8)\n+       leal    5(%rdx), %eax\n+       cltq\n+       movq    $5, (%rsp,%rax,8)\n+       leal    6(%rdx), %eax\n+       addl    $7, %edx\n+       cltq\n+       movslq  %edx, %rdx\n+       movq    $6, (%rsp,%rax,8)\n+       movq    $7, (%rsp,%rdx,8)\n-       movq    $0, (%rsp,%rdx,8)\n-       movq    $1, 8(%rsp,%rdx,8)\n-       movq    $2, 16(%rsp,%rdx,8)\n-       movq    $3, 24(%rsp,%rdx,8)\n-       movq    $4, 32(%rsp,%rdx,8)\n-       movq    $5, 40(%rsp,%rdx,8)\n-       movq    $6, 48(%rsp,%rdx,8)\n-       movq    $7, 56(%rsp,%rdx,8)\nGCC 9 -> 10 change or:\n-       movq    $0, (%rsp,%rdx,8)\n-       movq    $1, 8(%rsp,%rdx,8)\n-       movq    $2, 16(%rsp,%rdx,8)\n-       movq    $3, 24(%rsp,%rdx,8)\n-       movq    $4, 32(%rsp,%rdx,8)\n-       movq    $5, 40(%rsp,%rdx,8)\n-       movq    $6, 48(%rsp,%rdx,8)\n-       movq    $7, 56(%rsp,%rdx,8)\n+       movq    $0, (%rsp,%rax,8)\n+       leal    1(%rdx), %eax\n+       movq    $1, (%rsp,%rax,8)\n+       leal    2(%rdx), %eax\n+       movq    $2, (%rsp,%rax,8)\n+       leal    3(%rdx), %eax\n+       movq    $3, (%rsp,%rax,8)\n+       leal    4(%rdx), %eax\n+       movq    $4, (%rsp,%rax,8)\n+       leal    5(%rdx), %eax\n+       movq    $5, (%rsp,%rax,8)\n+       leal    6(%rdx), %eax\n+       movq    $6, (%rsp,%rax,8)\n+       leal    7(%rdx), %eax\n+       movq    $7, (%rsp,%rax,8)\nchange on the other test.  While for the former case of\nint there is due to signed integer overflow (unless -fwrapv)\nthe possibility to undo it e.g. during expansion, for the unsigned\ncase information is unfortunately lost.\n\nThe following patch adds :s to the convert which restores these\ntestcases but keeps the testcases the patch meant to improve as is.\n\n2021-02-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/95798\n\t* match.pd ((T)(A) + CST -> (T)(A + CST)): Add :s to convert.\n\n\t* gcc.target/i386/pr95798-1.c: New test.\n\t* gcc.target/i386/pr95798-2.c: New test.", "tree": {"sha": "4a7d93ee7801519d05e8be771f0e4e0b992f6fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a7d93ee7801519d05e8be771f0e4e0b992f6fb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/880682e7b2348d66f4089fa4af102b69eaaefbc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880682e7b2348d66f4089fa4af102b69eaaefbc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880682e7b2348d66f4089fa4af102b69eaaefbc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880682e7b2348d66f4089fa4af102b69eaaefbc2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cf52b87ff6938e30883b8f8f542a638635d507d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf52b87ff6938e30883b8f8f542a638635d507d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf52b87ff6938e30883b8f8f542a638635d507d"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "a34c283e28c95c7bb5e426fbc8772b6a7d84d398", "filename": "gcc/match.pd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880682e7b2348d66f4089fa4af102b69eaaefbc2/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880682e7b2348d66f4089fa4af102b69eaaefbc2/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=880682e7b2348d66f4089fa4af102b69eaaefbc2", "patch": "@@ -2492,7 +2492,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n /* ((T)(A)) + CST -> (T)(A + CST)  */\n #if GIMPLE\n   (simplify\n-   (plus (convert SSA_NAME@0) INTEGER_CST@1)\n+   (plus (convert:s SSA_NAME@0) INTEGER_CST@1)\n     (if (TREE_CODE (TREE_TYPE (@0)) == INTEGER_TYPE\n          && TREE_CODE (type) == INTEGER_TYPE\n          && TYPE_PRECISION (type) > TYPE_PRECISION (TREE_TYPE (@0))"}, {"sha": "e7d29d1856dc70e7a24a272e4c02ba6f64109106", "filename": "gcc/testsuite/gcc.target/i386/pr95798-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880682e7b2348d66f4089fa4af102b69eaaefbc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95798-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880682e7b2348d66f4089fa4af102b69eaaefbc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95798-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95798-1.c?ref=880682e7b2348d66f4089fa4af102b69eaaefbc2", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/95798 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler \"1, 8\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"2, 16\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"3, 24\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"4, 32\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"5, 40\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"6, 48\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"7, 56\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+\n+void bar (unsigned long long *, int);\n+\n+void\n+foo (int y, unsigned long long z)\n+{\n+  unsigned long long x[1024];\n+  unsigned long long i = y % 127;\n+  __builtin_memset (x, -1, sizeof (x));\n+  x[i] = 0;\n+  x[i + 1] = 1;\n+  x[i + 2] = 2;\n+  x[i + 3] = 3;\n+  x[i + 4] = 4;\n+  x[i + 5] = 5;\n+  x[i + 6] = 6;\n+  x[i + 7] = 7;\n+  bar (x, y);\n+}"}, {"sha": "4e0deb74ea78ee103af339c6a6765c37f32bd4ab", "filename": "gcc/testsuite/gcc.target/i386/pr95798-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880682e7b2348d66f4089fa4af102b69eaaefbc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95798-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880682e7b2348d66f4089fa4af102b69eaaefbc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95798-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95798-2.c?ref=880682e7b2348d66f4089fa4af102b69eaaefbc2", "patch": "@@ -0,0 +1,29 @@\n+/* PR target/95798 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler \"1, 8\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"2, 16\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"3, 24\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"4, 32\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"5, 40\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"6, 48\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"7, 56\\\\\\(%rsp,%r\\[a-z0-9]*,8\\\\\\)\" { target lp64 } } } */\n+\n+void bar (unsigned long long *, int);\n+\n+void\n+foo (unsigned int y, unsigned long long z)\n+{\n+  unsigned long long x[1024];\n+  unsigned long long i = y % 127;\n+  __builtin_memset (x, -1, sizeof (x));\n+  x[i] = 0;\n+  x[i + 1] = 1;\n+  x[i + 2] = 2;\n+  x[i + 3] = 3;\n+  x[i + 4] = 4;\n+  x[i + 5] = 5;\n+  x[i + 6] = 6;\n+  x[i + 7] = 7;\n+  bar (x, y);\n+}"}]}