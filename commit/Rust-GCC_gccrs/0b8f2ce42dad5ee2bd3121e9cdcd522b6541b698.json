{"sha": "0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI4ZjJjZTQyZGFkNWVlMmJkMzEyMWU5Y2RjZDUyMmI2NTQxYjY5OA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-03-03T21:43:08Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-03-03T21:43:08Z"}, "message": "dependency.c (gfc_check_dependency): Call gfc_dep_resolver to check whether two array references have a dependency.\n\n\n\t* dependency.c (gfc_check_dependency): Call gfc_dep_resolver to\n\tcheck whether two array references have a dependency.\n\t(gfc_check_element_vs_element): Assume lref and rref must be\n\tREF_ARRAYs.  If gfc_dep_compare_expr returns -2, assume these\n\treferences could potentially overlap.\n\t(gfc_dep_resolver): Whitespace and comment tweaks.  Assume a\n\tdependency if the references have different depths.  Rewrite\n\tfinal term to clarrify we only have a dependency for overlaps.\n\n\t* gfortran.dg/dependency_4.f90: New test case.\n\t* gfortran.dg/dependency_5.f90: New test case.\n\t* gfortran.dg/dependency_6.f90: New test case.\n\t* gfortran.dg/dependency_7.f90: New test case.\n\t* gfortran.dg/dependency_8.f90: New test case.\n\nFrom-SVN: r111686", "tree": {"sha": "1feed42343fbebb6f4c1fef214477eda525940b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1feed42343fbebb6f4c1fef214477eda525940b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/comments", "author": null, "committer": null, "parents": [{"sha": "67a70df65b693ab9fe30ed39acc765c7d354038c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a70df65b693ab9fe30ed39acc765c7d354038c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a70df65b693ab9fe30ed39acc765c7d354038c"}], "stats": {"total": 128, "additions": 97, "deletions": 31}, "files": [{"sha": "07350f469cc71c47e205dd9dc79badfd41fe1a82", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "patch": "@@ -1,3 +1,14 @@\n+2006-03-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* dependency.c (gfc_check_dependency): Call gfc_dep_resolver to\n+\tcheck whether two array references have a dependency.\n+\t(gfc_check_element_vs_element): Assume lref and rref must be\n+\tREF_ARRAYs.  If gfc_dep_compare_expr returns -2, assume these\n+\treferences could potentially overlap.\n+\t(gfc_dep_resolver): Whitespace and comment tweaks.  Assume a\n+\tdependency if the references have different depths.  Rewrite\n+\tfinal term to clarrify we only have a dependency for overlaps.\n+\n 2006-03-03  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR fortran/25031\n@@ -28,7 +39,7 @@\n \t(gfc_trans_where_assign): Likewise.\n \t(gfc_trans_where_2): Likewise.  Restructure code that decides\n \twhether we need to allocate zero, one or two temporary masks.\n-\tIf this is a top-level WHERE (i.e. the incoming MAKS is NULL),\n+\tIf this is a top-level WHERE (i.e. the incoming MASK is NULL),\n \twe only need to allocate at most one temporary mask, and can\n \tinvert it's sense to provide the complementary pending execution\n \tmask.  Only calculate the size of the required temporary arrays"}, {"sha": "187b20777160fc3c4b5763dea7324c9ab534f1cb", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "patch": "@@ -460,16 +460,11 @@ gfc_check_dependency (gfc_expr * expr1, gfc_expr * expr2, bool identical)\n       if (identical)\n \treturn 1;\n \n-      /* Identical ranges return 0, overlapping ranges return 1.  */\n-\n+      /* Identical and disjoint ranges return 0,\n+\t overlapping ranges return 1.  */\n       /* Return zero if we refer to the same full arrays.  */\n-      if (expr1->ref->type == REF_ARRAY\n-\t  && expr2->ref->type == REF_ARRAY\n-\t  && expr1->ref->u.ar.type == AR_FULL\n-\t  && expr2->ref->u.ar.type == AR_FULL\n-\t  && !expr1->ref->next\n-\t  && !expr2->ref->next)\n-\treturn 0;\n+      if (expr1->ref->type == REF_ARRAY && expr2->ref->type == REF_ARRAY)\n+\treturn gfc_dep_resolver (expr1->ref, expr2->ref);\n \n       return 1;\n \n@@ -735,30 +730,25 @@ gfc_check_element_vs_element (gfc_ref * lref, gfc_ref * rref, int n)\n   gfc_array_ref r_ar;\n   gfc_expr *l_start;\n   gfc_expr *r_start;\n-  gfc_dependency nIsDep;\n-\n-  if (lref->type == REF_ARRAY && rref->type == REF_ARRAY)\n-    {\n-      l_ar = lref->u.ar;\n-      r_ar = rref->u.ar;\n-      l_start = l_ar.start[n] ;\n-      r_start = r_ar.start[n] ;\n-      if (gfc_dep_compare_expr (r_start, l_start) == 0)\n-\tnIsDep = GFC_DEP_EQUAL;\n-      else\n-\tnIsDep = GFC_DEP_NODEP;\n-  }\n-  else\n-    nIsDep = GFC_DEP_NODEP;\n+  int i;\n \n-  return nIsDep;\n+  l_ar = lref->u.ar;\n+  r_ar = rref->u.ar;\n+  l_start = l_ar.start[n] ;\n+  r_start = r_ar.start[n] ;\n+  i = gfc_dep_compare_expr (r_start, l_start);\n+  if (i == 0)\n+    return GFC_DEP_EQUAL;\n+  if (i == -2)\n+    return GFC_DEP_OVERLAP;\n+  return GFC_DEP_NODEP;\n }\n \n \n /* Finds if two array references are overlapping or not.\n    Return value\n    \t1 : array references are overlapping.\n-   \t0 : array references are not overlapping.  */\n+   \t0 : array references are identical or not overlapping.  */\n \n int\n gfc_dep_resolver (gfc_ref * lref, gfc_ref * rref)\n@@ -792,7 +782,6 @@ gfc_dep_resolver (gfc_ref * lref, gfc_ref * rref)\n \t  return 0;\n \t\n \tcase REF_ARRAY:\n-\t  \n \t  for (n=0; n < lref->u.ar.dimen; n++)\n \t    {\n \t      /* Assume dependency when either of array reference is vector\n@@ -844,9 +833,10 @@ gfc_dep_resolver (gfc_ref * lref, gfc_ref * rref)\n   /* If we haven't seen any array refs then something went wrong.  */\n   gcc_assert (fin_dep != GFC_DEP_ERROR);\n \n-  if (fin_dep < GFC_DEP_OVERLAP)\n-    return 0;\n-  else\n+  /* Assume the worst if we nest to different depths.  */\n+  if (lref || rref)\n     return 1;\n+\n+  return fin_dep == GFC_DEP_OVERLAP;\n }\n "}, {"sha": "c56b0f935f5fadb9ce16c6f2ac26dd32c14d17db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "patch": "@@ -1,3 +1,11 @@\n+2006-03-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.dg/dependency_4.f90: New test case.\n+\t* gfortran.dg/dependency_5.f90: New test case.\n+\t* gfortran.dg/dependency_6.f90: New test case.\n+\t* gfortran.dg/dependency_7.f90: New test case.\n+\t* gfortran.dg/dependency_8.f90: New test case.\n+\n 2006-03-03  Paul Brook  <paul@codesourcery.com>\n \n \t* gcc/testsuite/lib/target-supports.exp (check_profiling_available):"}, {"sha": "9eabaf1e587bdf4ad2ab089510dfdf90faf4d264", "filename": "gcc/testsuite/gfortran.dg/dependency_4.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_4.f90?ref=0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+subroutine foo(a)\n+  integer, dimension (4) :: a\n+\n+  where (a .ne. 0)\n+    a = 1\n+  endwhere\n+end subroutine\n+! { dg-final { scan-tree-dump-times \"malloc\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "307fbd748684d71261e506ca3d4898f390476f99", "filename": "gcc/testsuite/gfortran.dg/dependency_5.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_5.f90?ref=0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+subroutine foo(a)\n+  integer, dimension (4) :: a\n+\n+  where (a(:) .ne. 0)\n+    a(:) = 1\n+  endwhere\n+end subroutine\n+! { dg-final { scan-tree-dump-times \"malloc\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "e90571ea9782c4accae279a5f9dd4a44dbe5f2ff", "filename": "gcc/testsuite/gfortran.dg/dependency_6.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_6.f90?ref=0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+subroutine foo(a)\n+  integer, dimension (4) :: a\n+\n+  where (a(:4) .ne. 0)\n+    a(:4) = 1\n+  endwhere\n+end subroutine\n+! { dg-final { scan-tree-dump-times \"malloc\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "52bac8f9f6188bbc3168b29d54ab33a8437f53e8", "filename": "gcc/testsuite/gfortran.dg/dependency_7.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_7.f90?ref=0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+subroutine foo(a)\n+  integer, dimension (4) :: a\n+\n+  where (a(1:4) .ne. 0)\n+    a(1:4) = 1\n+  endwhere\n+end subroutine\n+! { dg-final { scan-tree-dump-times \"malloc\" 0 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "e27f85a946f7b07d06b194662b0030a0c8e21e3a", "filename": "gcc/testsuite/gfortran.dg/dependency_8.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_8.f90?ref=0b8f2ce42dad5ee2bd3121e9cdcd522b6541b698", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-original\" }\n+subroutine foo(a,i,j)\n+  integer, dimension (4,4) :: a\n+  integer :: i\n+  integer :: j\n+\n+  where (a(i,1:3) .ne. 0)\n+    a(j,2:4) = 1\n+  endwhere\n+end subroutine\n+! { dg-final { scan-tree-dump-times \"malloc\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}