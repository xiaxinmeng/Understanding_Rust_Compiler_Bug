{"sha": "91edd042ff3b7b58be7c20bf7483445f60c43210", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFlZGQwNDJmZjNiN2I1OGJlN2MyMGJmNzQ4MzQ0NWY2MGM0MzIxMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-08-28T22:17:37Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-08-28T22:17:37Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (ordinary_java_source_files): Added new files.\n\t* java/lang/Class.h (_Jv_sharedlib_register_hook): Declare as\n\tfriend.\n\t* java/net/URLClassLoader.java (findClass): Don't use\n\tfindURLResource.  Use loader's getClass method.\n\t(URLLoader.getClass): New method.\n\t(addURL): Handle `gcjlib' URLs.\n\t(SoURLLoader): New class.\n\t(SoResource): Likewise.\n\t* gnu/gcj/protocol/gcjlib/Connection.java: New file.\n\t* gnu/gcj/protocol/gcjlib/Handler.java: New file.\n\t* include/jvm.h (struct _Jv_core_chain): Moved from natCore.cc.\n\t(_Jv_RegisterCoreHook): Declare.\n\t(_Jv_FindCore): Declare.\n\t* gnu/gcj/runtime/SharedLibHelper.java: New file.\n\t* gnu/gcj/runtime/natSharedLibLoader.cc (CoreHookFunc): New\n\ttypedef.\n\t(core_hook): New function.\n\t(struct SharedLibDummy) [saved_core]: New field.\n\t(init): Set _Jv_RegisterCoreHook.  Throw exception on failure.\n\t(register_hook): Set protection domain and class loader on new\n\tclass.\n\t(finalize): Free core chain.\n\t* gnu/gcj/Core.java (Core): New constructor.\n\t* gnu/gcj/runtime/SharedLibLoader.java: Rewrote to use\n\tSharedLibHelper.\n\t* gnu/gcj/natCore.cc (_Jv_RegisterResource): Indentation fixlet.\n\t(_Jv_create_core): New function.\n\t(create): Use it.\n\t(default_register_resource): New function.\n\t(_Jv_RegisterCoreHook): New global.\n\t(_Jv_RegisterResource): Use it.\n\t(core_chain_struct): Removed.\n\t(_Jv_FindCore): New function.\n\t(_Jv_FreeCoreChain): New function.\n\nFrom-SVN: r70892", "tree": {"sha": "a5d84d77e14c8eed9bc348be5e03ab4e6490a077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5d84d77e14c8eed9bc348be5e03ab4e6490a077"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91edd042ff3b7b58be7c20bf7483445f60c43210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91edd042ff3b7b58be7c20bf7483445f60c43210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91edd042ff3b7b58be7c20bf7483445f60c43210", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91edd042ff3b7b58be7c20bf7483445f60c43210/comments", "author": null, "committer": null, "parents": [{"sha": "ff2865f2dde326797f4061c32c19fc75dcd4fec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2865f2dde326797f4061c32c19fc75dcd4fec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2865f2dde326797f4061c32c19fc75dcd4fec5"}], "stats": {"total": 666, "additions": 560, "deletions": 106}, "files": [{"sha": "178a2aa1291d9842863bc8d5c90b42cae91372ce", "filename": "libjava/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -1,3 +1,42 @@\n+2003-08-28  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (ordinary_java_source_files): Added new files.\n+\t* java/lang/Class.h (_Jv_sharedlib_register_hook): Declare as\n+\tfriend.\n+\t* java/net/URLClassLoader.java (findClass): Don't use\n+\tfindURLResource.  Use loader's getClass method.\n+\t(URLLoader.getClass): New method.\n+\t(addURL): Handle `gcjlib' URLs.\n+\t(SoURLLoader): New class.\n+\t(SoResource): Likewise.\n+\t* gnu/gcj/protocol/gcjlib/Connection.java: New file.\n+\t* gnu/gcj/protocol/gcjlib/Handler.java: New file.\n+\t* include/jvm.h (struct _Jv_core_chain): Moved from natCore.cc.\n+\t(_Jv_RegisterCoreHook): Declare.\n+\t(_Jv_FindCore): Declare.\n+\t* gnu/gcj/runtime/SharedLibHelper.java: New file.\n+\t* gnu/gcj/runtime/natSharedLibLoader.cc (CoreHookFunc): New\n+\ttypedef.\n+\t(core_hook): New function.\n+\t(struct SharedLibDummy) [saved_core]: New field.\n+\t(init): Set _Jv_RegisterCoreHook.  Throw exception on failure.\n+\t(register_hook): Set protection domain and class loader on new\n+\tclass.\n+\t(finalize): Free core chain.\n+\t* gnu/gcj/Core.java (Core): New constructor.\n+\t* gnu/gcj/runtime/SharedLibLoader.java: Rewrote to use\n+\tSharedLibHelper.\n+\t* gnu/gcj/natCore.cc (_Jv_RegisterResource): Indentation fixlet.\n+\t(_Jv_create_core): New function.\n+\t(create): Use it.\n+\t(default_register_resource): New function.\n+\t(_Jv_RegisterCoreHook): New global.\n+\t(_Jv_RegisterResource): Use it.\n+\t(core_chain_struct): Removed.\n+\t(_Jv_FindCore): New function.\n+\t(_Jv_FreeCoreChain): New function.\n+\n 2003-08-29  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/natInetAddressWin32.cc,"}, {"sha": "4329340972d19a05ce089de173aa611b72c4212d", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -1965,12 +1965,15 @@ gnu/gcj/protocol/http/Connection.java \\\n gnu/gcj/protocol/http/Handler.java \\\n gnu/gcj/protocol/jar/Connection.java \\\n gnu/gcj/protocol/jar/Handler.java \\\n+gnu/gcj/protocol/gcjlib/Connection.java \\\n+gnu/gcj/protocol/gcjlib/Handler.java \\\n gnu/gcj/runtime/FileDeleter.java \\\n gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/FirstThread.java \\\n gnu/gcj/runtime/JNIWeakRef.java \\\n gnu/gcj/runtime/MethodRef.java \\\n gnu/gcj/runtime/NameFinder.java \\\n+gnu/gcj/runtime/SharedLibHelper.java \\\n gnu/gcj/runtime/SharedLibLoader.java \\\n gnu/gcj/runtime/StackTrace.java \\\n gnu/gcj/runtime/StringBuffer.java \\"}, {"sha": "df65652ee21fc747eea262db2bc9b24279080ab1", "filename": "libjava/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -1727,12 +1727,15 @@ gnu/gcj/protocol/http/Connection.java \\\n gnu/gcj/protocol/http/Handler.java \\\n gnu/gcj/protocol/jar/Connection.java \\\n gnu/gcj/protocol/jar/Handler.java \\\n+gnu/gcj/protocol/gcjlib/Connection.java \\\n+gnu/gcj/protocol/gcjlib/Handler.java \\\n gnu/gcj/runtime/FileDeleter.java \\\n gnu/gcj/runtime/FinalizerThread.java \\\n gnu/gcj/runtime/FirstThread.java \\\n gnu/gcj/runtime/JNIWeakRef.java \\\n gnu/gcj/runtime/MethodRef.java \\\n gnu/gcj/runtime/NameFinder.java \\\n+gnu/gcj/runtime/SharedLibHelper.java \\\n gnu/gcj/runtime/SharedLibLoader.java \\\n gnu/gcj/runtime/StackTrace.java \\\n gnu/gcj/runtime/StringBuffer.java \\\n@@ -2752,6 +2755,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/gcj/protocol/core/natCoreInputStream.P \\\n .deps/gnu/gcj/protocol/file/Connection.P \\\n .deps/gnu/gcj/protocol/file/Handler.P \\\n+.deps/gnu/gcj/protocol/gcjlib/Connection.P \\\n+.deps/gnu/gcj/protocol/gcjlib/Handler.P \\\n .deps/gnu/gcj/protocol/http/Connection.P \\\n .deps/gnu/gcj/protocol/http/Handler.P \\\n .deps/gnu/gcj/protocol/jar/Connection.P \\\n@@ -2760,6 +2765,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/gcj/runtime/FinalizerThread.P \\\n .deps/gnu/gcj/runtime/FirstThread.P .deps/gnu/gcj/runtime/JNIWeakRef.P \\\n .deps/gnu/gcj/runtime/MethodRef.P .deps/gnu/gcj/runtime/NameFinder.P \\\n+.deps/gnu/gcj/runtime/SharedLibHelper.P \\\n .deps/gnu/gcj/runtime/SharedLibLoader.P \\\n .deps/gnu/gcj/runtime/StackTrace.P .deps/gnu/gcj/runtime/StringBuffer.P \\\n .deps/gnu/gcj/runtime/VMClassLoader.P \\"}, {"sha": "80d623c5655e05be03d98c334e60d079ab4a2200", "filename": "libjava/gnu/gcj/Core.java", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2FCore.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2FCore.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2FCore.java?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2001  Free Software Foundation\n+/* Copyright (C) 2001, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -14,5 +14,8 @@\n \n   public RawData ptr;\n   public int length;\n-}\n \n+  Core ()\n+  {\n+  }\n+}"}, {"sha": "91b02479fd8be9d63639aa725f9ccfa60aa864cf", "filename": "libjava/gnu/gcj/natCore.cc", "status": "modified", "additions": 60, "deletions": 36, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2FnatCore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2FnatCore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2FnatCore.cc?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -1,6 +1,6 @@\n // natCore -- C++ side of Core\n \n-/* Copyright (C) 2001, 2002  Free Software Foundation\n+/* Copyright (C) 2001, 2002, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -21,40 +21,49 @@ details.  */\n #include <java/io/IOException.h>\n #include <gnu/gcj/Core.h>\n \n-typedef struct core_chain_struct\n+// List of global core values.\n+static _Jv_core_chain *root;\n+\n+static void\n+default_register_resource (_Jv_core_chain *node)\n {\n-  int name_length;\n-  const char *name;\n-  int data_length;\n-  const void *data;\n-  \n-  struct core_chain_struct *next;\n-} core_chain;\n+  node->next = root;\n+  root = node;\n+}\n \n-static core_chain *root;\n+// This is set only when a lock is held on java.lang.Class.\n+// This function is called to handle a new core node.\n+void (*_Jv_RegisterCoreHook) (_Jv_core_chain *) = default_register_resource;\n \n-void _Jv_RegisterResource (void *vptr)\n+void\n+_Jv_RegisterResource (void *vptr)\n {\n-  char *rptr = (char *)vptr;\n+  char *rptr = (char *) vptr;\n \n-  // These are permanent data structures for now.  This routine is\n-  // called from a static constructor, so we shouldn't depend on too\n-  // much existing infrastructure.\n-  core_chain *cc = (core_chain *) _Jv_Malloc (sizeof (core_chain));\n+  _Jv_core_chain *cc = (_Jv_core_chain *) _Jv_Malloc (sizeof (_Jv_core_chain));\n \n   cc->name_length = ((int *)rptr)[0];\n   cc->data_length = ((int *)rptr)[1];\n-  cc->name = rptr + 2*sizeof(int);\n+  cc->name = rptr + 2 * sizeof (int);\n   cc->data = cc->name + cc->name_length;\n+  cc->next = NULL;\n \n-  // Add this new item to the chain...\n-  core_chain *old_root = root;\n-  cc->next = old_root;\n-  root = cc;\n+  (*_Jv_RegisterCoreHook) (cc);\n }\n \n-gnu::gcj::Core *\n-gnu::gcj::Core::create (jstring name)\n+void\n+_Jv_FreeCoreChain (_Jv_core_chain *chain)\n+{\n+  while (chain != NULL)\n+    {\n+      _Jv_core_chain *next = chain->next;\n+      _Jv_Free (chain);\n+      chain = next;\n+    }\n+}\n+\n+_Jv_core_chain *\n+_Jv_FindCore (_Jv_core_chain *node, jstring name)\n {\n   char *buf = (char *) __builtin_alloca (JvGetStringUTFLength (name) + 1);\n   jsize total = JvGetStringUTFRegion (name, 0, name->length(), buf);\n@@ -68,23 +77,38 @@ gnu::gcj::Core::create (jstring name)\n       --total;\n     }\n \n-  core_chain *node = root;\n-\n   while (node)\n     {\n       if (total == node->name_length\n \t  && strncmp (buf, node->name, total) == 0)\n-\t{\n-\t  gnu::gcj::Core *core = \n-\t    (gnu::gcj::Core *) _Jv_AllocObject(&gnu::gcj::Core::class$,\n-\t\t\t\t\t       sizeof (gnu::gcj::Core));\n-\t  core->ptr = (gnu::gcj::RawData *) node->data;\n-\t  core->length = node->data_length;\n-\t  return core;\n-\t}\n-      else\n-\tnode = node->next;\n+\treturn node;\n+      node = node->next;\n+    }\n+\n+  return NULL;\n+}\n+\n+gnu::gcj::Core *\n+_Jv_create_core (_Jv_core_chain *node, jstring name)\n+{\n+  node = _Jv_FindCore (node, name);\n+\n+  gnu::gcj::Core *core = NULL;\n+  if (node)\n+    {\n+      core = (gnu::gcj::Core *) _Jv_AllocObject(&gnu::gcj::Core::class$,\n+\t\t\t\t\t\tsizeof (gnu::gcj::Core));\n+      core->ptr = (gnu::gcj::RawData *) node->data;\n+      core->length = node->data_length;\n     }\n+  return core;\n+}\n \n-  throw new java::io::IOException (JvNewStringLatin1 (\"can't open core\"));\n+gnu::gcj::Core *\n+gnu::gcj::Core::create (jstring name)\n+{\n+  gnu::gcj::Core *core = _Jv_create_core (root, name);\n+  if (core == NULL)\n+    throw new java::io::IOException (JvNewStringLatin1 (\"can't open core\"));\n+  return core;\n }"}, {"sha": "95d709630ac9be9ad36777f968729acc18951377", "filename": "libjava/gnu/gcj/protocol/core/Connection.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fcore%2FConnection.java?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -1,6 +1,6 @@\n // Connection.java - Implementation of URLConnection for core protocol.\n \n-/* Copyright (C) 2001  Free Software Foundation\n+/* Copyright (C) 2001, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -55,7 +55,7 @@ public InputStream getInputStream() throws IOException\n \n     if (! doInput)\n       throw new ProtocolException(\"Can't open InputStream if doInput is false\");\n-    return new BufferedInputStream(new CoreInputStream (core));\n+    return new CoreInputStream (core);\n   }\n \n   // Override default method in URLConnection."}, {"sha": "0b763571f9c3bfe8830778e627ba75563321a660", "filename": "libjava/gnu/gcj/protocol/gcjlib/Connection.java", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fgcjlib%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fgcjlib%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fgcjlib%2FConnection.java?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -0,0 +1,60 @@\n+// Connection.java - Implementation of URLConnection for gcjlib\n+// protocol.\n+\n+/* Copyright (C) 2003  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.protocol.gcjlib;\n+import java.io.*;\n+import java.net.*;\n+import gnu.gcj.Core;\n+import gnu.gcj.protocol.core.CoreInputStream;\n+import gnu.gcj.runtime.SharedLibHelper;\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date January 10, 2003\n+ */\n+\n+class Connection extends URLConnection\n+{\n+  String solib;\n+  String name;\n+  Core core;\n+\n+  public Connection (URL url) throws MalformedURLException\n+  {\n+    super (url);\n+    int index = url.getFile().indexOf(\"!/\");\n+    if (index == -1)\n+      throw new MalformedURLException(\"couldn't find !/ in gcjlib URL\");\n+\n+    name = url.getFile().substring(index + 2);\n+    solib = url.getFile().substring(0, index);\n+  }\n+\n+  public void connect() throws IOException\n+  {\n+    if (core != null)\n+      return;\n+    // We can't create a new SharedLibHelper here, since we don't know\n+    // what parent class loader to use.\n+    SharedLibHelper helper = SharedLibHelper.findHelper(solib);\n+    if (helper == null)\n+      throw new IOException(\"library not loaded: \" + solib);\n+    core = helper.findCore(name);\n+    if (core == null)\n+      throw new IOException(\"couldn't find core object: \" + name);\n+  }\n+\n+  public InputStream getInputStream() throws IOException\n+  {\n+    connect();\n+    return new CoreInputStream(core);\n+  }\n+}"}, {"sha": "fe767cd6ee4204dd746e2335f68d8bff07ae788a", "filename": "libjava/gnu/gcj/protocol/gcjlib/Handler.java", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fgcjlib%2FHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fgcjlib%2FHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fprotocol%2Fgcjlib%2FHandler.java?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -0,0 +1,24 @@\n+// Handler.java - URLStreamHandler for gcjlib protocol.\n+\n+/* Copyright (C) 2003  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.protocol.gcjlib;\n+\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.io.IOException;\n+\n+public class Handler extends URLStreamHandler\n+{\n+  protected URLConnection openConnection(URL url) throws IOException\n+  {\n+    return new Connection(url);\n+  }\n+}"}, {"sha": "9e170a120beeb0b8329530309153abd1dbf33484", "filename": "libjava/gnu/gcj/runtime/SharedLibHelper.java", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibHelper.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibHelper.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibHelper.java?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -0,0 +1,144 @@\n+/* Copyright (C) 2001, 2003  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj.runtime;\n+import java.lang.ref.WeakReference;\n+import java.net.URL;\n+import java.net.MalformedURLException;\n+import java.util.HashMap;\n+import java.security.*;\n+import gnu.gcj.Core;\n+\n+public class SharedLibHelper\n+{\n+  /** Load a shared library, and associate a ClassLoader with it.\n+   * @param libname named of shared library (passed to dlopen)\n+   * @param parent the parent ClassLoader\n+   * @parem flags passed to dlopen\n+   */\n+  SharedLibHelper(String libname, ClassLoader parent, CodeSource source,\n+\t\t  int flags)\n+  {\n+    // FIXME: ask security manager first.\n+    loader = parent;\n+    baseName = libname;\n+    domain = new ProtectionDomain(source,\n+\t\t\t\t  Policy.getPolicy().getPermissions(source));\n+    this.flags = flags;\n+  }\n+\n+  public static SharedLibHelper findHelper (String libname)\n+  {\n+    synchronized (map)\n+      {\n+\tWeakReference ref = (WeakReference) map.get(libname);\n+\tif (ref != null)\n+\t  return (SharedLibHelper) ref.get();\n+\treturn null;\n+      }\n+  }\n+\n+  public static SharedLibHelper findHelper (ClassLoader loader, String libname,\n+\t\t\t\t\t    CodeSource source)\n+  {\n+    synchronized (map)\n+      {\n+\tSharedLibHelper result;\n+\tWeakReference ref = (WeakReference) map.get(libname);\n+\tif (ref != null)\n+\t  {\n+\t    result = (SharedLibHelper) ref.get();\n+\t    if (result != null)\n+\t      {\n+\t\tif (result.loader != loader)\n+\t\t  // FIXME\n+\t\t  throw new UnknownError();\n+\t\treturn result;\n+\t      }\n+\t  }\n+\n+\tresult = new SharedLibHelper(libname, loader, source, 0);\n+\tmap.put(libname, new WeakReference(result));\n+\treturn result;\n+      }\n+  }\n+\n+  public native void finalize ();\n+\n+  public Class findClass(String name)\n+  {\n+    ensureInit();\n+    return (Class) classMap.get(name);\n+  }\n+\n+  public URL findResource (String name)\n+  {\n+    ensureInit();\n+    if (! hasResource(name))\n+      return null;\n+    try\n+      {\n+\treturn new URL(\"gcjlib\", \"\", -1, baseName + \"!/\" + name);\n+      }\n+    catch (MalformedURLException _)\n+      {\n+      }\n+    return null;\n+  }\n+\n+  public native Core findCore (String name);\n+\n+  void ensureInit()\n+  {\n+    synchronized (classMap)\n+      {\n+\tif (initialized)\n+\t  return;\n+\tinit();\n+\tinitialized = true;\n+      }\n+  }\n+\n+  native boolean hasResource(String name);\n+  native void init();\n+\n+  /** Called during dlopen's processing of the init section. */\n+  void registerClass(String name, Class cls)\n+  {\n+    classMap.put(name, cls);\n+  }\n+\n+  /** The handle returned by dlopen. */\n+  gnu.gcj.RawData handler;\n+\n+  /** Holds a _Jv_core_chain for the loader.  */\n+  gnu.gcj.RawData core_chain;\n+\n+  /** Map classnames to Classes. */\n+  HashMap classMap = new HashMap(20);\n+\n+  /** Class loader we're helping.  */\n+  ClassLoader loader;\n+\n+  /** Name of base file.  */\n+  String baseName;\n+\n+  /** Protection domain for loaded classes.  */\n+  ProtectionDomain domain;\n+\n+  /** Flags to pass to dlopen.  FIXME: platform dependent.\n+      0 is always \"sensible\" (defined by us).  */\n+  int flags;\n+\n+  /** True if we've been initialized.  */\n+  boolean initialized = false;\n+\n+  /** Map shared library names to a helper object.  This uses weak\n+      references in the values so we don't prevent collection.  */\n+  static HashMap map = new HashMap ();\n+}"}, {"sha": "1f80bbc8289848693ccf6e94d5af38a15bd2390b", "filename": "libjava/gnu/gcj/runtime/SharedLibLoader.java", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FSharedLibLoader.java?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -7,7 +7,12 @@\n details.  */\n \n package gnu.gcj.runtime;\n-import java.util.Hashtable;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.security.CodeSource;\n+import java.util.Enumeration;\n+import java.util.Vector;\n \n /**\n  * A ClassLoader backed by a gcj-compiled shared library.\n@@ -16,55 +21,59 @@\n \n public class SharedLibLoader extends ClassLoader\n {\n-  public native void finalize ();\n-\n-  /** Called during dlopen's processing of the init section. */\n-  void registerClass(String name, Class cls)\n-  {\n-    classMap.put(name, cls);\n-  }\n-\n   /** Load a shared library, and associate a ClassLoader with it.\n    * @param libname named of shared library (passed to dlopen)\n    * @param parent the parent ClassLoader\n-   * @param flags passed to dlopen\n+   * @parem flags passed to dlopen\n    */\n   public SharedLibLoader(String libname, ClassLoader parent, int flags)\n   {\n     super(parent);\n-    init(libname, flags);\n+    URL url;\n+    try\n+      {\n+\turl = new URL(\"file\", \"\", libname);\n+      }\n+    catch (MalformedURLException _)\n+      {\n+\turl = null;\n+      }\n+    helper = SharedLibHelper.findHelper(this, libname,\n+\t\t\t\t\tnew CodeSource(url, null));\n   }\n \n-\n   /** Load a shared library, and asociate a ClassLoader with it.\n    * @param libname named of shared library (passed to dlopen)\n    */\n   public SharedLibLoader(String libname)\n   {\n-    super(getSystemClassLoader());\n-    init(libname, 0);\n-  }\n-\n-  native void init(String libname, int flags);\n-\n-  public Class loadClass(String name)\n-    throws ClassNotFoundException\n-  {\n-    return super.loadClass(name);\n+    this(libname, getSystemClassLoader(), 0);\n   }\n \n   public Class findClass(String name)\n     throws ClassNotFoundException\n   {\n-    Object cls = classMap.get(name);\n+    Class cls = helper.findClass(name);\n     if (cls == null)\n       throw new ClassNotFoundException(name);\n-    return (Class) cls;\n+    return cls;\n   }\n \n-  /** The handle returned by dlopen. */\n-  gnu.gcj.RawData handler;\n+  public URL findResource (String name)\n+  {\n+    return helper.findResource(name);\n+  }\n+\n+  public Enumeration findResources (String name) throws IOException\n+  {\n+    URL url = findResource(name);\n+    if (url == null)\n+      return null;\n+    Vector v = new Vector(1);\n+    v.add(url);\n+    return v.elements();\n+  }\n \n-  /** Map classnames to Classes. */\n-  Hashtable classMap = new Hashtable(20);\n+  /** The helper that does the work for us.  */\n+  SharedLibHelper helper;\n }"}, {"sha": "46eef755a0914f10db3866adc29848dd635758c4", "filename": "libjava/gnu/gcj/runtime/natSharedLibLoader.cc", "status": "modified", "additions": 59, "deletions": 20, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatSharedLibLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatSharedLibLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fruntime%2FnatSharedLibLoader.cc?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -1,4 +1,4 @@\n-// natSharedLibLoader.cc - Implementation of FirstThread native methods.\n+// natSharedLibLoader.cc - Implementation of SharedLibHelper native methods.\n \n /* Copyright (C) 2001, 2003  Free Software Foundation\n \n@@ -11,74 +11,113 @@ details.  */\n #include <config.h>\n \n #include <gcj/cni.h>\n-#include <gnu/gcj/runtime/SharedLibLoader.h>\n+#include <jvm.h>\n+#include <gnu/gcj/runtime/SharedLibHelper.h>\n #include <java/io/IOException.h>\n #include <java/lang/UnsupportedOperationException.h>\n-#include <java/lang/UnsatisfiedLinkError.h>\n+#include <java/lang/UnknownError.h>\n \n #ifdef HAVE_DLOPEN\n #include <dlfcn.h>\n \n /* Only used during dlopen, while having a lock on Class.class. */\n-static gnu::gcj::runtime::SharedLibLoader* curLoader;\n+static java::lang::ClassLoader *curLoader;\n+static gnu::gcj::runtime::SharedLibHelper *curHelper;\n \n typedef void (*ClassHookFunc) (jclass);\n+typedef void (*CoreHookFunc) (_Jv_core_chain *);\n+\n+void\n+_Jv_sharedlib_register_hook (jclass cls)\n+{\n+  curHelper->registerClass(cls->getName(), cls);\n+  cls->protectionDomain = curHelper->domain;\n+  cls->loader = curLoader;\n+}\n \n static void\n-::register_hook(jclass cls)\n+core_hook (_Jv_core_chain *chain)\n {\n-  curLoader->registerClass(cls->getName(), cls);\n+  chain->next = (_Jv_core_chain *) curHelper->core_chain;\n+  curHelper->core_chain = (gnu::gcj::RawData *) chain;\n }\n \n struct SharedLibDummy\n {\n   ClassHookFunc saved;\n+  CoreHookFunc saved_core;\n   SharedLibDummy()\n   {\n     saved = _Jv_RegisterClassHook;\n+    saved_core = _Jv_RegisterCoreHook;\n   }\n   ~SharedLibDummy()\n   {\n     _Jv_RegisterClassHook = saved;\n+    _Jv_RegisterCoreHook = saved_core;\n     curLoader = NULL;\n   }\n };\n #endif\n \n void\n-gnu::gcj::runtime::SharedLibLoader::init(jstring libname, jint flags)\n+gnu::gcj::runtime::SharedLibHelper::init(void)\n {\n #ifdef HAVE_DLOPEN\n-  jint len = _Jv_GetStringUTFLength (libname);\n-  char lname[len + 1];\n-  JvGetStringUTFRegion (libname, 0, libname->length(), lname);\n-  lname[len] = '\\0';\n+  char *lname = (char *) __builtin_alloca (JvGetStringUTFLength (baseName)\n+\t\t\t\t\t   + 1);\n+  jsize total = JvGetStringUTFRegion (baseName, 0, baseName->length(), lname);\n+  lname[total] = '\\0';\n \n   if (flags==0)\n-    flags = RTLD_LAZY;\n+    flags = RTLD_GLOBAL | RTLD_LAZY;\n   JvSynchronize dummy1(&java::lang::Class::class$);\n   SharedLibDummy dummy2;\n-  curLoader = this;\n-  _Jv_RegisterClassHook = ::register_hook;\n+  curLoader = loader;\n+  curHelper = this;\n+  _Jv_RegisterClassHook = _Jv_sharedlib_register_hook;\n+  _Jv_RegisterCoreHook = core_hook;\n   void *h = dlopen(lname, flags);\n   if (h == NULL)\n     {\n       const char *msg = dlerror();\n-      jstring str = JvNewStringLatin1 (lname);\n-      str = str->concat (JvNewStringLatin1 (\": \"));\n-      str = str->concat (JvNewStringLatin1 (msg));\n-      throw new java::lang::UnsatisfiedLinkError (str);\n+      throw new java::lang::UnknownError(JvNewStringLatin1(msg));\n     }\n   handler = (gnu::gcj::RawData*) h;\n #else\n-  const char *msg = \"SharedLibLoader is not supported on this platform\";\n+  const char *msg\n+    = \"shared library class loading is not supported on this platform\";\n   throw new java::lang::UnsupportedOperationException(JvNewStringLatin1(msg));\n #endif\n }\n \n+jboolean\n+gnu::gcj::runtime::SharedLibHelper::hasResource (jstring name)\n+{\n+#ifdef HAVE_DLOPEN\n+  _Jv_core_chain *node = _Jv_FindCore ((_Jv_core_chain *) core_chain, name);\n+  return node != NULL;\n+#else\n+  return false;\n+#endif\n+}\n+\n+gnu::gcj::Core *\n+gnu::gcj::runtime::SharedLibHelper::findCore (jstring name)\n+{\n+#ifdef HAVE_DLOPEN\n+  extern gnu::gcj::Core *_Jv_create_core (_Jv_core_chain *node, jstring name);\n+  ensureInit();\n+  return _Jv_create_core ((_Jv_core_chain *) core_chain, name);\n+#else\n+  return NULL;\n+#endif\n+}\n+\n void\n-gnu::gcj::runtime::SharedLibLoader::finalize()\n+gnu::gcj::runtime::SharedLibHelper::finalize()\n {\n+  _Jv_FreeCoreChain ((_Jv_core_chain *) core_chain);\n #ifdef HAVE_DLOPEN\n   dlclose (handler);\n #endif"}, {"sha": "a114e550a15b16ba5559f8ab38a47f31e804b239", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -466,6 +466,22 @@ bool _Jv_VerifyClassName (_Jv_Utf8Const *name);\n bool _Jv_VerifyIdentifier (_Jv_Utf8Const *);\n bool _Jv_ClassNameSamePackage (_Jv_Utf8Const *name1, _Jv_Utf8Const *name2);\n \n+struct _Jv_core_chain\n+{\n+  int name_length;\n+  const char *name;\n+  int data_length;\n+  const void *data;\n+\n+  struct _Jv_core_chain *next;\n+};\n+\n+// This is called when new core data is loaded.\n+extern void (*_Jv_RegisterCoreHook) (_Jv_core_chain *);\n+\n+_Jv_core_chain *_Jv_FindCore (_Jv_core_chain *node, jstring name);\n+void _Jv_FreeCoreChain (_Jv_core_chain *chain);\n+\n #ifdef ENABLE_JVMPI\n \n #include \"jvmpi.h\""}, {"sha": "9bcff6fbb55538dfac64d0c37fe12b03b4533fae", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -369,6 +369,8 @@ class java::lang::Class : public java::lang::Object\n   friend class gnu::gcj::runtime::StackTrace;\n   friend class java::io::VMObjectStreamClass;\n \n+  friend void _Jv_sharedlib_register_hook (jclass klass);\n+\n   // Chain for class pool.\n   jclass next;\n   // Name of class."}, {"sha": "e1c789ddd64254ac5d6012b446e3c77342c359c0", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 103, "deletions": 18, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91edd042ff3b7b58be7c20bf7483445f60c43210/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=91edd042ff3b7b58be7c20bf7483445f60c43210", "patch": "@@ -1,5 +1,5 @@\n /* URLClassLoader.java --  ClassLoader that loads classes from one or more URLs\n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -59,6 +59,7 @@\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n+import gnu.gcj.runtime.SharedLibHelper;\n \n /**\n  * A secure class loader that can load classes and resources from\n@@ -193,6 +194,17 @@ public class URLClassLoader extends SecureClassLoader\n       this.noCertCodeSource = new CodeSource(baseURL, null);\n     }\n \n+    /**\n+     * Returns a <code>Class</code> loaded by this\n+     * <code>URLLoader</code>, or <code>null</code> when this loader\n+     * either can't load the class or doesn't know how to load classes\n+     * at all.\n+     */\n+    Class getClass(String className)\n+    {\n+      return null;\n+    }\n+\n     /**\n      * Returns a <code>Resource</code> loaded by this\n      * <code>URLLoader</code>, or <code>null</code> when no\n@@ -282,7 +294,7 @@ public JarURLLoader(URLClassLoader classloader, URL baseURL)\n     {\n       super(classloader, baseURL);\n \n-      // cache url prefix for all resources in this jar url\n+      // Cache url prefix for all resources in this jar url.\n       String external = baseURL.toExternalForm();\n       StringBuffer sb = new StringBuffer(external.length() + 6);\n       sb.append(\"jar:\");\n@@ -448,18 +460,75 @@ InputStream getInputStream() throws IOException\n     {\n       return stream;\n     }\n-                        \n+\n     public int getLength()\n     {\n       return length;\n     }\n-                \n+\n     public URL getURL()\n     {\n       return url;\n     }\n   }\n \n+  /**\n+   * A <code>SoURLLoader</code> is a type of <code>URLLoader</code>\n+   * that loads classes and resources from a shared library.\n+   */\n+  final static class SoURLLoader extends URLLoader\n+  {\n+    SharedLibHelper helper;\n+\n+    SoURLLoader(URLClassLoader classloader, URL url)\n+    {\n+      super(classloader, url);\n+      helper = SharedLibHelper.findHelper(classloader, url.getFile(),\n+\t\t\t\t\t  noCertCodeSource);\n+    }\n+\n+    Class getClass(String className)\n+    {\n+      return helper.findClass(className);\n+    }\n+\n+    Resource getResource(String name)\n+    {\n+      URL url = helper.findResource(name);\n+      if (url == null)\n+\treturn null;\n+      return new SoResource(this, name, url);\n+    }\n+  }\n+\n+  final static class SoResource extends Resource\n+  {\n+    SoResource(SoURLLoader loader, String name, URL url)\n+    {\n+      super(loader, name);\n+      this.url = url;\n+    }\n+\n+    InputStream getInputStream() throws IOException\n+    {\n+      URLConnection conn = url.openConnection();\n+      return conn.getInputStream();\n+    }\n+\n+    public int getLength()\n+    {\n+      // FIXME we could find this by asking the core object.\n+      return -1;\n+    }\n+\n+    public URL getURL ()\n+    {\n+      return url;\n+    }\n+\n+    final URL url;\n+  }\n+\n   /**\n    * A <code>FileURLLoader</code> is a type of <code>URLLoader</code>\n    * only loading from file url.\n@@ -644,7 +713,7 @@ public URLClassLoader(URL[] urls,\n     //   for cache initial size\n     synchronized(factoryCache)\n       {\n-\tif(factory != null && factoryCache.get(factory) == null)\n+\tif (factory != null && factoryCache.get(factory) == null)\n \t  factoryCache.put(factory, new HashMap(5));\n       }\n   }\n@@ -667,21 +736,24 @@ private void addURLImpl(URL newUrl)\n \tif (newUrl == null)\n \t  return; // Silently ignore...\n         \n-\t// check global cache to see if there're already url loader\n-\t// for this url\n+\t// Check global cache to see if there're already url loader\n+\t// for this url.\n \tURLLoader loader = (URLLoader)urlloaders.get(newUrl);\n \tif (loader == null)\n \t  {\n \t    String file = newUrl.getFile();\n+\t    String protocol = newUrl.getProtocol();\n \t    // Check that it is not a directory\n-\t    if (! (file.endsWith(\"/\") || file.endsWith(File.separator)))\n+\t    if (\"gcjlib\".equals(protocol))\n+\t      loader = new SoURLLoader(this, newUrl);\n+\t    else if (! (file.endsWith(\"/\") || file.endsWith(File.separator)))\n \t      loader = new JarURLLoader(this, newUrl);\n-\t    else if (\"file\".equals(newUrl.getProtocol()))\n+\t    else if (\"file\".equals(protocol))\n \t      loader = new FileURLLoader(this, newUrl);\n \t    else\n \t      loader = new RemoteURLLoader(this, newUrl);\n \n-\t    // cache it\n+\t    // Cache it.\n \t    urlloaders.put(newUrl, loader);\n \t  }\n \n@@ -764,7 +836,20 @@ protected Class findClass(final String className)\n   {\n     // Just try to find the resource by the (almost) same name\n     String resourceName = className.replace('.', '/') + \".class\";\n-    Resource resource = findURLResource(resourceName);\n+    int max = urls.size();\n+    Resource resource = null;\n+    for (int i = 0; i < max && resource == null; i++)\n+      {\n+\tURLLoader loader = (URLLoader)urlinfos.elementAt(i);\n+\tif (loader == null)\n+\t  continue;\n+\n+\tClass k = loader.getClass(className);\n+\tif (k != null)\n+\t  return k;\n+\n+\tresource = loader.getResource(resourceName);\n+      }\n     if (resource == null)\n       throw new ClassNotFoundException(className + \" not found in \" + urls);\n \n@@ -907,12 +992,12 @@ URLStreamHandler getURLStreamHandler(String protocol)\n     URLStreamHandler handler;\n     synchronized (factoryCache)\n       {\n-\t// check if there're handler for the same protocol in cache\n+\t// Check if there're handler for the same protocol in cache.\n \tHashMap cache = (HashMap)factoryCache.get(factory);\n \thandler = (URLStreamHandler)cache.get(protocol);\n \tif(handler == null)\n \t  {\n-\t    // add it to cache\n+\t    // Add it to cache.\n \t    handler = factory.createURLStreamHandler(protocol);\n \t    cache.put(protocol, handler);\n \t  }\n@@ -971,23 +1056,23 @@ protected PermissionCollection getPermissions(CodeSource source)\n     // First get the permissions that would normally be granted\n     PermissionCollection permissions = super.getPermissions(source);\n         \n-    // Now add the any extra permissions depending on the URL location\n+    // Now add any extra permissions depending on the URL location.\n     URL url = source.getLocation();\n     String protocol = url.getProtocol();\n     if (protocol.equals(\"file\"))\n       {\n \tString file = url.getFile();\n-\t// If the file end in / it must be an directory\n+\t// If the file end in / it must be an directory.\n \tif (file.endsWith(\"/\") || file.endsWith(File.separator))\n \t  {\n \t    // Grant permission to read everything in that directory and\n-\t    // all subdirectories\n+\t    // all subdirectories.\n \t    permissions.add(new FilePermission(file + \"-\", \"read\"));\n \t  }\n \telse\n \t  {\n-\t    // It is a 'normal' file\n-\t    // Grant permission to access that file\n+\t    // It is a 'normal' file.\n+\t    // Grant permission to access that file.\n \t    permissions.add(new FilePermission(file, \"read\"));\n \t  }\n       }"}]}