{"sha": "c6547c920bd81449caa301b2256b85409d6d69fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY1NDdjOTIwYmQ4MTQ0OWNhYTMwMWIyMjU2Yjg1NDA5ZDZkNjlmYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-16T12:45:13Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-16T12:45:13Z"}, "message": "expr.c (expand_expr <PLUS_EXPR>): If operand_equal_p considers both operands of the addition equal...\n\n\n\t* expr.c (expand_expr <PLUS_EXPR>): If operand_equal_p considers\n\tboth operands of the addition equal, reuse the expanded RTL.\n\t(expand_expr <MULT_EXPR>): Likewise for multiplication.\n\nFrom-SVN: r68012", "tree": {"sha": "91128e51e2ee70c6de304c65a21cfae0c68c35f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91128e51e2ee70c6de304c65a21cfae0c68c35f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6547c920bd81449caa301b2256b85409d6d69fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6547c920bd81449caa301b2256b85409d6d69fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6547c920bd81449caa301b2256b85409d6d69fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6547c920bd81449caa301b2256b85409d6d69fa/comments", "author": null, "committer": null, "parents": [{"sha": "21c43754a62409319cb9b16d11aadab4f17cff26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c43754a62409319cb9b16d11aadab4f17cff26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c43754a62409319cb9b16d11aadab4f17cff26"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "85934ffc5a015a3b5e76044a428e7e37dff9a14d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6547c920bd81449caa301b2256b85409d6d69fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6547c920bd81449caa301b2256b85409d6d69fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6547c920bd81449caa301b2256b85409d6d69fa", "patch": "@@ -1,3 +1,9 @@\n+2003-06-16  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expr.c (expand_expr <PLUS_EXPR>): If operand_equal_p considers\n+\tboth operands of the addition equal, reuse the expanded RTL.\n+\t(expand_expr <MULT_EXPR>): Likewise for multiplication.\n+\n 2003-06-16  Roger Sayle  <roger@eyesopen.com>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "83240c682da7f2f13352904d8929ea725b615554", "filename": "gcc/expr.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6547c920bd81449caa301b2256b85409d6d69fa/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6547c920bd81449caa301b2256b85409d6d69fa/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c6547c920bd81449caa301b2256b85409d6d69fa", "patch": "@@ -8226,7 +8226,11 @@ expand_expr (exp, target, tmode, modifier)\n \t  || mode != ptr_mode)\n \t{\n \t  op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n-\t  op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, 0);\n+\t  if (! operand_equal_p (TREE_OPERAND (exp, 0),\n+\t\t\t\t TREE_OPERAND (exp, 1), 0))\n+\t    op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, 0);\n+\t  else\n+\t    op1 = op0;\n \t  if (op0 == const0_rtx)\n \t    return op1;\n \t  if (op1 == const0_rtx)\n@@ -8235,7 +8239,12 @@ expand_expr (exp, target, tmode, modifier)\n \t}\n \n       op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, modifier);\n-      op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, modifier);\n+      if (! operand_equal_p (TREE_OPERAND (exp, 0),\n+\t\t\t     TREE_OPERAND (exp, 1), 0))\n+\top1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX,\n+\t\t\t   VOIDmode, modifier);\n+      else\n+\top1 = op0;\n \n       /* We come here from MINUS_EXPR when the second operand is a\n          constant.  */\n@@ -8457,7 +8466,11 @@ expand_expr (exp, target, tmode, modifier)\n \t    }\n \t}\n       op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n-      op1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, 0);\n+      if (! operand_equal_p (TREE_OPERAND (exp, 0),\n+\t\t\t     TREE_OPERAND (exp, 1), 0))\n+\top1 = expand_expr (TREE_OPERAND (exp, 1), NULL_RTX, VOIDmode, 0);\n+      else\n+\top1 = op0;\n       return expand_mult (mode, op0, op1, target, unsignedp);\n \n     case TRUNC_DIV_EXPR:"}]}