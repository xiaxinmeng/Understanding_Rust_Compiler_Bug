{"sha": "c536876e065822e33b5c5019d93e527012dda160", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUzNjg3NmUwNjU4MjJlMzNiNWM1MDE5ZDkzZTUyNzAxMmRkYTE2MA==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-06-07T10:58:16Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2011-06-07T10:58:16Z"}, "message": "simplify-rtx.c (simplify_unary_operation_1): Canonicalize widening multiplies.\n\n2011-06-07  Bernd Schmidt  <bernds@codesourcery.com>\n\t    Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* simplify-rtx.c (simplify_unary_operation_1): Canonicalize widening\n\tmultiplies.\n\t* doc/md.texi (Canonicalization of Instructions): Document widening\n\tmultiply canonicalization.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/mla-2.c: New test.\n\nFrom-SVN: r174740", "tree": {"sha": "976e83087ab821ec0d3bd318f9d66c071893b016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/976e83087ab821ec0d3bd318f9d66c071893b016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c536876e065822e33b5c5019d93e527012dda160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c536876e065822e33b5c5019d93e527012dda160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c536876e065822e33b5c5019d93e527012dda160", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c536876e065822e33b5c5019d93e527012dda160/comments", "author": null, "committer": null, "parents": [{"sha": "308dc890dd4315560088e8e012d7ebddf0d887e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308dc890dd4315560088e8e012d7ebddf0d887e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308dc890dd4315560088e8e012d7ebddf0d887e7"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "a1feeb086e3da8fca79bafa83a18f3097f12f003", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536876e065822e33b5c5019d93e527012dda160/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536876e065822e33b5c5019d93e527012dda160/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c536876e065822e33b5c5019d93e527012dda160", "patch": "@@ -1,3 +1,11 @@\n+2011-06-07  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* simplify-rtx.c (simplify_unary_operation_1): Canonicalize widening\n+\tmultiplies.\n+\t* doc/md.texi (Canonicalization of Instructions): Document widening\n+\tmultiply canonicalization.\n+\n 2011-06-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR gcov-profile/49299"}, {"sha": "0023405bea6378dbabefc1703efa9d41f9837d80", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536876e065822e33b5c5019d93e527012dda160/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536876e065822e33b5c5019d93e527012dda160/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=c536876e065822e33b5c5019d93e527012dda160", "patch": "@@ -5840,6 +5840,23 @@ Equality comparisons of a group of bits (usually a single bit) with zero\n will be written using @code{zero_extract} rather than the equivalent\n @code{and} or @code{sign_extract} operations.\n \n+@cindex @code{mult}, canonicalization of\n+@item\n+@code{(sign_extend:@var{m1} (mult:@var{m2} (sign_extend:@var{m2} @var{x})\n+(sign_extend:@var{m2} @var{y})))} is converted to @code{(mult:@var{m1}\n+(sign_extend:@var{m1} @var{x}) (sign_extend:@var{m1} @var{y}))}, and likewise\n+for @code{zero_extend}.\n+\n+@item\n+@code{(sign_extend:@var{m1} (mult:@var{m2} (ashiftrt:@var{m2}\n+@var{x} @var{s}) (sign_extend:@var{m2} @var{y})))} is converted\n+to @code{(mult:@var{m1} (sign_extend:@var{m1} (ashiftrt:@var{m2}\n+@var{x} @var{s})) (sign_extend:@var{m1} @var{y}))}, and likewise for\n+patterns using @code{zero_extend} and @code{lshiftrt}.  If the second\n+operand of @code{mult} is also a shift, then that is extended also.\n+This transformation is only applied when it can be proven that the\n+original operation had sufficient precision to prevent overflow.\n+\n @end itemize\n \n Further canonicalization rules are defined in the function"}, {"sha": "18f264b0ca96128171c8b8bbb54deee1d3100c64", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536876e065822e33b5c5019d93e527012dda160/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536876e065822e33b5c5019d93e527012dda160/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=c536876e065822e33b5c5019d93e527012dda160", "patch": "@@ -1000,6 +1000,48 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t  && GET_CODE (XEXP (XEXP (op, 0), 1)) == LABEL_REF)\n \treturn XEXP (op, 0);\n \n+      /* Extending a widening multiplication should be canonicalized to\n+\t a wider widening multiplication.  */\n+      if (GET_CODE (op) == MULT)\n+\t{\n+\t  rtx lhs = XEXP (op, 0);\n+\t  rtx rhs = XEXP (op, 1);\n+\t  enum rtx_code lcode = GET_CODE (lhs);\n+\t  enum rtx_code rcode = GET_CODE (rhs);\n+\n+\t  /* Widening multiplies usually extend both operands, but sometimes\n+\t     they use a shift to extract a portion of a register.  */\n+\t  if ((lcode == SIGN_EXTEND\n+\t       || (lcode == ASHIFTRT && CONST_INT_P (XEXP (lhs, 1))))\n+\t      && (rcode == SIGN_EXTEND\n+\t\t  || (rcode == ASHIFTRT && CONST_INT_P (XEXP (rhs, 1)))))\n+\t    {\n+\t      enum machine_mode lmode = GET_MODE (lhs);\n+\t      enum machine_mode rmode = GET_MODE (rhs);\n+\t      int bits;\n+\n+\t      if (lcode == ASHIFTRT)\n+\t\t/* Number of bits not shifted off the end.  */\n+\t\tbits = GET_MODE_PRECISION (lmode) - INTVAL (XEXP (lhs, 1));\n+\t      else /* lcode == SIGN_EXTEND */\n+\t\t/* Size of inner mode.  */\n+\t\tbits = GET_MODE_PRECISION (GET_MODE (XEXP (lhs, 0)));\n+\n+\t      if (rcode == ASHIFTRT)\n+\t\tbits += GET_MODE_PRECISION (rmode) - INTVAL (XEXP (rhs, 1));\n+\t      else /* rcode == SIGN_EXTEND */\n+\t\tbits += GET_MODE_PRECISION (GET_MODE (XEXP (rhs, 0)));\n+\n+\t      /* We can only widen multiplies if the result is mathematiclly\n+\t\t equivalent.  I.e. if overflow was impossible.  */\n+\t      if (bits <= GET_MODE_PRECISION (GET_MODE (op)))\n+\t\treturn simplify_gen_binary\n+\t\t\t (MULT, mode,\n+\t\t\t  simplify_gen_unary (SIGN_EXTEND, mode, lhs, lmode),\n+\t\t\t  simplify_gen_unary (SIGN_EXTEND, mode, rhs, rmode));\n+\t    }\n+\t}\n+\n       /* Check for a sign extension of a subreg of a promoted\n \t variable, where the promotion is sign-extended, and the\n \t target mode is the same as the variable's promotion.  */\n@@ -1071,6 +1113,48 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t  && GET_MODE_SIZE (mode) <= GET_MODE_SIZE (GET_MODE (XEXP (op, 0))))\n \treturn rtl_hooks.gen_lowpart_no_emit (mode, op);\n \n+      /* Extending a widening multiplication should be canonicalized to\n+\t a wider widening multiplication.  */\n+      if (GET_CODE (op) == MULT)\n+\t{\n+\t  rtx lhs = XEXP (op, 0);\n+\t  rtx rhs = XEXP (op, 1);\n+\t  enum rtx_code lcode = GET_CODE (lhs);\n+\t  enum rtx_code rcode = GET_CODE (rhs);\n+\n+\t  /* Widening multiplies usually extend both operands, but sometimes\n+\t     they use a shift to extract a portion of a register.  */\n+\t  if ((lcode == ZERO_EXTEND\n+\t       || (lcode == LSHIFTRT && CONST_INT_P (XEXP (lhs, 1))))\n+\t      && (rcode == ZERO_EXTEND\n+\t\t  || (rcode == LSHIFTRT && CONST_INT_P (XEXP (rhs, 1)))))\n+\t    {\n+\t      enum machine_mode lmode = GET_MODE (lhs);\n+\t      enum machine_mode rmode = GET_MODE (rhs);\n+\t      int bits;\n+\n+\t      if (lcode == LSHIFTRT)\n+\t\t/* Number of bits not shifted off the end.  */\n+\t\tbits = GET_MODE_PRECISION (lmode) - INTVAL (XEXP (lhs, 1));\n+\t      else /* lcode == ZERO_EXTEND */\n+\t\t/* Size of inner mode.  */\n+\t\tbits = GET_MODE_PRECISION (GET_MODE (XEXP (lhs, 0)));\n+\n+\t      if (rcode == LSHIFTRT)\n+\t\tbits += GET_MODE_PRECISION (rmode) - INTVAL (XEXP (rhs, 1));\n+\t      else /* rcode == ZERO_EXTEND */\n+\t\tbits += GET_MODE_PRECISION (GET_MODE (XEXP (rhs, 0)));\n+\n+\t      /* We can only widen multiplies if the result is mathematiclly\n+\t\t equivalent.  I.e. if overflow was impossible.  */\n+\t      if (bits <= GET_MODE_PRECISION (GET_MODE (op)))\n+\t\treturn simplify_gen_binary\n+\t\t\t (MULT, mode,\n+\t\t\t  simplify_gen_unary (ZERO_EXTEND, mode, lhs, lmode),\n+\t\t\t  simplify_gen_unary (ZERO_EXTEND, mode, rhs, rmode));\n+\t    }\n+\t}\n+\n       /* (zero_extend:M (zero_extend:N <X>)) is (zero_extend:M <X>).  */\n       if (GET_CODE (op) == ZERO_EXTEND)\n \treturn simplify_gen_unary (ZERO_EXTEND, mode, XEXP (op, 0),"}, {"sha": "7686e2a42bd15583c5320a2c1b78dde7308ca1cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536876e065822e33b5c5019d93e527012dda160/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536876e065822e33b5c5019d93e527012dda160/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c536876e065822e33b5c5019d93e527012dda160", "patch": "@@ -1,3 +1,7 @@\n+2011-06-07  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* gcc.target/arm/mla-2.c: New test.\n+\n 2011-06-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR gcov-profile/49299"}, {"sha": "bdc508d878cf59526a2fa5142c4a6b416e6c10bf", "filename": "gcc/testsuite/gcc.target/arm/mla-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c536876e065822e33b5c5019d93e527012dda160/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmla-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c536876e065822e33b5c5019d93e527012dda160/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmla-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmla-2.c?ref=c536876e065822e33b5c5019d93e527012dda160", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv7-a\" } */\n+\n+long long foolong (long long x, short *a, short *b)\n+{\n+    return x + *a * *b;\n+}\n+\n+/* { dg-final { scan-assembler \"smlalbb\" } } */"}]}