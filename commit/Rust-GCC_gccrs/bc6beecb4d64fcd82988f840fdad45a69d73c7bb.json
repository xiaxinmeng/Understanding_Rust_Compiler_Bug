{"sha": "bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "node_id": "C_kwDOANBUbNoAKGJjNmJlZWNiNGQ2NGZjZDgyOTg4Zjg0MGZkYWQ0NWE2OWQ3M2M3YmI", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-10-11T21:42:48Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-18T20:16:56Z"}, "message": "RISC-V: Use bseti/bclri/binvi to extend reach of ori/andi/xori\n\nSequences of the form \"a | C\" and \"a ^ C\" with C being the positive\nhalf of a signed immediate's range with one extra bit set in addition\nare mapped to ori/xori and one bseti/binvi to avoid using a temporary\n(and a multi-insn sequence to load C into that temporary).\n\nSomething similar holds for \"a & ~C\" being representable as either\nbclri + bclri or bclri + andi.\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md (*<or_optab>i<mode>_extrabit):\n\tNew pattern for binvi+binvi/xori and bseti+bseti/ori\n\t(*andi<mode>_extrabit): New pattern for bclri+bclri/andi\n\t* config/riscv/iterators.md (any_or): Match or and ior\n\t* config/riscv/predicates.md (const_twobits_operand):\n\tNew predicate.\n\t(uimm_extra_bit_operand): New predicate.\n\t(uimm_extra_bit_or_twobits): New predicate.\n\t(not_uimm_extra_bit_operand): New predicate.\n\t(not_uimm_extra_bit_or_nottwobits): New predicate.\n\t* config/riscv/riscv.h (UIMM_EXTRA_BIT_OPERAND):\n\tHelper for the uimm_extra_bit_operand and\n\tnot_uimm_extra_bit_operand predicates.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zbs-bclri.c: Rename\n\t* gcc.target/riscv/zbs-bclri-01.c: Renamed from above.\n\t* gcc.target/riscv/zbs-bclri-02.c: New test.\n\t* gcc.target/riscv/zbs-binvi.c: New test.\n\t* gcc.target/riscv/zbs-bseti.c: New test.", "tree": {"sha": "1efefde3c6f3273bfa9162d08bd816daf8e659c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1efefde3c6f3273bfa9162d08bd816daf8e659c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "787ac95917a666b3d186e2d5afec07ee5b75c6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/787ac95917a666b3d186e2d5afec07ee5b75c6df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/787ac95917a666b3d186e2d5afec07ee5b75c6df"}], "stats": {"total": 158, "additions": 153, "deletions": 5}, "files": [{"sha": "681498a3c2ed3e2d36e92b4a6c31cf8ee22e7e6d", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "patch": "@@ -558,3 +558,40 @@\n   \"TARGET_ZBS\"\n   [(set (match_dup 0) (zero_extract:GPR (match_dup 1) (const_int 1) (match_dup 2)))\n    (set (match_dup 0) (plus:GPR (match_dup 0) (const_int -1)))])\n+\n+;; Catch those cases where we can use a bseti/binvi + ori/xori or\n+;; bseti/binvi + bseti/binvi instead of a lui + addi + or/xor sequence.\n+(define_insn_and_split \"*<or_optab>i<mode>_extrabit\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(any_or:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t          (match_operand:X 2 \"uimm_extra_bit_or_twobits\" \"i\")))]\n+  \"TARGET_ZBS\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (<or_optab>:X (match_dup 1) (match_dup 3)))\n+   (set (match_dup 0) (<or_optab>:X (match_dup 0) (match_dup 4)))]\n+{\n+\tunsigned HOST_WIDE_INT bits = UINTVAL (operands[2]);\n+\tunsigned HOST_WIDE_INT topbit = HOST_WIDE_INT_1U << floor_log2 (bits);\n+\n+\toperands[3] = GEN_INT (bits &~ topbit);\n+\toperands[4] = GEN_INT (topbit);\n+})\n+\n+;; Same to use blcri + andi and blcri + bclri\n+(define_insn_and_split \"*andi<mode>_extrabit\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(and:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t       (match_operand:X 2 \"not_uimm_extra_bit_or_nottwobits\" \"i\")))]\n+  \"TARGET_ZBS\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (and:X (match_dup 1) (match_dup 3)))\n+   (set (match_dup 0) (and:X (match_dup 0) (match_dup 4)))]\n+{\n+\tunsigned HOST_WIDE_INT bits = UINTVAL (operands[2]);\n+\tunsigned HOST_WIDE_INT topbit = HOST_WIDE_INT_1U << floor_log2 (~bits);\n+\n+\toperands[3] = GEN_INT (bits | topbit);\n+\toperands[4] = GEN_INT (~topbit);\n+})"}, {"sha": "ab1f4ee8d34778beded88c44029992963db2da5c", "filename": "gcc/config/riscv/iterators.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Fconfig%2Friscv%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Fconfig%2Friscv%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fiterators.md?ref=bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "patch": "@@ -136,6 +136,10 @@\n ;; from the same template.\n (define_code_iterator any_bitwise [and ior xor])\n \n+;; This code iterator allows ior and xor instructions to be generated\n+;; from the same template.\n+(define_code_iterator any_or [ior xor])\n+\n ;; This code iterator allows unsigned and signed division to be generated\n ;; from the same template.\n (define_code_iterator any_div [div udiv mod umod])\n@@ -194,6 +198,10 @@\n \t\t\t (plus \"add\")\n \t\t\t (minus \"sub\")])\n \n+;; <or_optab> code attributes\n+(define_code_attr or_optab [(ior \"ior\")\n+\t\t\t    (xor \"xor\")])\n+\n ;; <insn> expands to the name of the insn that implements a particular code.\n (define_code_attr insn [(ashift \"sll\")\n \t\t\t(ashiftrt \"sra\")"}, {"sha": "9976b50af663b9cdfa944a3a295b74692642b0f8", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "patch": "@@ -305,11 +305,30 @@\n        (match_test \"ctz_hwi (INTVAL (op)) > 0\")\n        (match_test \"SMALL_OPERAND (INTVAL (op) >> ctz_hwi (INTVAL (op)))\")))\n \n+;; A CONST_INT operand that has exactly two bits set.\n+(define_predicate \"const_twobits_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"popcount_hwi (UINTVAL (op)) == 2\")))\n+\n ;; A CONST_INT operand that fits into the unsigned half of a\n-;; signed-immediate after the top bit has been cleared.\n+;; signed-immediate after the top bit has been cleared\n (define_predicate \"uimm_extra_bit_operand\"\n   (and (match_code \"const_int\")\n-       (not (and (match_test \"SMALL_OPERAND (INTVAL (op))\")\n-\t\t (match_test \"INTVAL (op) > 0\")))\n-       (ior (match_test \"SMALL_OPERAND (UINTVAL (op) & ~(HOST_WIDE_INT_1U << floor_log2 (UINTVAL (op))))\")\n-\t    (match_test \"popcount_hwi (UINTVAL (op)) == 2\"))))\n+       (match_test \"UIMM_EXTRA_BIT_OPERAND (UINTVAL (op))\")))\n+\n+(define_predicate \"uimm_extra_bit_or_twobits\"\n+  (and (match_code \"const_int\")\n+       (ior (match_operand 0 \"uimm_extra_bit_operand\")\n+\t    (match_operand 0 \"const_twobits_operand\"))))\n+\n+;; A CONST_INT operand that fits into the negative half of a\n+;; signed-immediate after a single cleared top bit has been\n+;; set: i.e., a bitwise-negated uimm_extra_bit_operand\n+(define_predicate \"not_uimm_extra_bit_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"UIMM_EXTRA_BIT_OPERAND (~UINTVAL (op))\")))\n+\n+(define_predicate \"not_uimm_extra_bit_or_nottwobits\"\n+  (and (match_code \"const_int\")\n+       (ior (match_operand 0 \"not_uimm_extra_bit_operand\")\n+\t    (match_operand 0 \"const_nottwobits_operand\"))))"}, {"sha": "b05c3c1545c2c27d36fefb0e480ece30b0d00efe", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "patch": "@@ -593,6 +593,14 @@ enum reg_class\n \t\t? (VALUE)\t\t\t\t\t\t\\\n \t\t: ((VALUE) & ((HOST_WIDE_INT_1U << 32)-1))))\n \n+/* True if VALUE can be represented as an immediate with 1 extra bit\n+   set: we check that it is not a SMALL_OPERAND (as this would be true\n+   for all small operands) unmodified and turns into a small operand\n+   once we clear the top bit. */\n+#define UIMM_EXTRA_BIT_OPERAND(VALUE)\t\t\t\t\t\\\n+  (!SMALL_OPERAND (VALUE)\t\t\t\t\t\t\\\n+   && SMALL_OPERAND (VALUE & ~(HOST_WIDE_INT_1U << floor_log2 (VALUE))))\n+\n /* Stack layout; function entry, exit and calling.  */\n \n #define STACK_GROWS_DOWNWARD 1"}, {"sha": "12e2063436c2380278247a2c6ee56ffa031a0d9c", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bclri-01.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclri-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclri-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclri-01.c?ref=bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "previous_filename": "gcc/testsuite/gcc.target/riscv/zbs-bclri.c"}, {"sha": "61254844a4e105d7272edce834b11c54dae97dfc", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bclri-02.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclri-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclri-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclri-02.c?ref=bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" } } */\n+\n+long long f3(long long a)\n+{\n+  return a & ~0x1100;\n+}\n+\n+long long f4 (long long a)\n+{\n+  return a & ~0x80000000000000ffull;\n+}\n+\n+long long f5 (long long a)\n+{\n+  return a & ~0x8000001000000000ull;\n+}\n+\n+long long f6 (long long a)\n+{\n+  return a & ~0xff7ffffffffffffull;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bclri\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"andi\\t\" 2 } } */\n+"}, {"sha": "c2d6725b53bbf228436ee9980358bf9df541f29e", "filename": "gcc/testsuite/gcc.target/riscv/zbs-binvi.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-binvi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-binvi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-binvi.c?ref=bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" } } */\n+\n+long long f3(long long a)\n+{\n+  return a ^ 0x1100;\n+}\n+\n+long long f4 (long long a)\n+{\n+  return a ^ 0x80000000000000ffull;\n+}\n+\n+long long f5 (long long a)\n+{\n+  return a ^ 0x8000001000000000ull;\n+}\n+\n+/* { dg-final { scan-assembler-times \"binvi\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xori\\t\" 2 } } */\n+"}, {"sha": "5738add63482b43858972f49189b180d73d2cc31", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bseti.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bseti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc6beecb4d64fcd82988f840fdad45a69d73c7bb/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bseti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bseti.c?ref=bc6beecb4d64fcd82988f840fdad45a69d73c7bb", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" } } */\n+\n+long long foo1 (long long a)\n+{\n+  return a | 0x1100;\n+}\n+\n+long long foo2 (long long a)\n+{\n+  return a | 0x80000000000000ffull;\n+}\n+\n+long long foo3 (long long a)\n+{\n+  return a | 0x8000000100000000ull;\n+}\n+\n+long long foo4 (long long a)\n+{\n+  return a | 0xfff;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bseti\\t\" 5 } } */\n+/* { dg-final { scan-assembler-times \"ori\\t\" 3 } } */\n+"}]}