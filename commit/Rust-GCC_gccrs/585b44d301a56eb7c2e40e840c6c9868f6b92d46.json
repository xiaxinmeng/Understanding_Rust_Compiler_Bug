{"sha": "585b44d301a56eb7c2e40e840c6c9868f6b92d46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg1YjQ0ZDMwMWE1NmViN2MyZTQwZTg0MGM2Yzk4NjhmNmI5MmQ0Ng==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-16T09:53:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-16T09:53:40Z"}, "message": "cp-tree.h (struct lang_type_class): Make pure_virtuals a VEC(tree).\n\n\t* cp-tree.h (struct lang_type_class): Make pure_virtuals a\n\tVEC(tree).\n\t(CLASSTYPE_INLINE_FRIENDS, CLASSTYPE_PURE_VIRTUALS): Update\n\tcomments.\n\t* call.c (build_new_method_call): Don't confirm a pure virtual is\n\tin CLASSTYPE_PURE_VIRTUALS.  Reorder checks. Make it a warning.\n\t* class.c (check_methods): CLASSTYPE_INLINE_FRIENDS is a VEC(tree).\n\t(fixup_inline_methods, finish_struct): Likewise.\n\t* decl.c (finish_method): Likewise.\n\t* search.c (dfs_get_pure_virtuals, get_pure_virtuals):\n\tCLASSTYPE_PURE_VIRTUALS is a VEC(tree).\n\t* typeck2.c (abstract_virtuals_error): Likewise. Truncate the\n\tvector to avoid repeating the list in error messages.\n\nFrom-SVN: r87592", "tree": {"sha": "05f087296df6da2876dbac64a95198a03423740d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05f087296df6da2876dbac64a95198a03423740d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/585b44d301a56eb7c2e40e840c6c9868f6b92d46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585b44d301a56eb7c2e40e840c6c9868f6b92d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/585b44d301a56eb7c2e40e840c6c9868f6b92d46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/585b44d301a56eb7c2e40e840c6c9868f6b92d46/comments", "author": null, "committer": null, "parents": [{"sha": "45f1796923b1b10a3bb13e79f4905cd7763d969a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f1796923b1b10a3bb13e79f4905cd7763d969a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45f1796923b1b10a3bb13e79f4905cd7763d969a"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "4a82c08d47b1815722ceb922bc7c891f7c39513e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=585b44d301a56eb7c2e40e840c6c9868f6b92d46", "patch": "@@ -433,7 +433,6 @@\n \n 2004-09-13  Kenneth Zadeck  <Kenneth.Zadeck@NaturalBridge.com>\n \n-\n \t* tree-ssa-operands.c (get_call_expr_operands): Added parm to\n \tadd_call_clobber_ops and add_call_read_ops.\n \t(add_call_clobber_ops, add_call_read_ops): Added code to reduce"}, {"sha": "f7701abb56376294a81b763aca003f8ad0823efc", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=585b44d301a56eb7c2e40e840c6c9868f6b92d46", "patch": "@@ -5312,16 +5312,18 @@ build_new_method_call (tree instance, tree fns, tree args,\n \t}\n       else\n \t{\n-\t  if (DECL_PURE_VIRTUAL_P (cand->fn)\n+\t  if (!(flags & LOOKUP_NONVIRTUAL)\n+\t      && DECL_PURE_VIRTUAL_P (cand->fn)\n \t      && instance == current_class_ref\n \t      && (DECL_CONSTRUCTOR_P (current_function_decl)\n-\t\t  || DECL_DESTRUCTOR_P (current_function_decl))\n-\t      && ! (flags & LOOKUP_NONVIRTUAL)\n-\t      && value_member (cand->fn, CLASSTYPE_PURE_VIRTUALS (basetype)))\n-\t    error ((DECL_CONSTRUCTOR_P (current_function_decl) ? \n-\t\t    \"abstract virtual `%#D' called from constructor\"\n-\t\t    : \"abstract virtual `%#D' called from destructor\"),\n-\t\t   cand->fn);\n+\t\t  || DECL_DESTRUCTOR_P (current_function_decl)))\n+\t    /* This is not an error, it is runtime undefined\n+\t       behaviour.  */\n+\t    warning ((DECL_CONSTRUCTOR_P (current_function_decl) ? \n+\t\t      \"abstract virtual `%#D' called from constructor\"\n+\t\t      : \"abstract virtual `%#D' called from destructor\"),\n+\t\t     cand->fn);\n+\t  \n \t  if (TREE_CODE (TREE_TYPE (cand->fn)) == METHOD_TYPE\n \t      && is_dummy_object (instance_ptr))\n \t    {"}, {"sha": "a92bb8e81f22b9e15e8e55a5be83b80e106030c9", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=585b44d301a56eb7c2e40e840c6c9868f6b92d46", "patch": "@@ -3750,8 +3750,7 @@ check_methods (tree t)\n \t{\n \t  TYPE_POLYMORPHIC_P (t) = 1;\n \t  if (DECL_PURE_VIRTUAL_P (x))\n-\t    CLASSTYPE_PURE_VIRTUALS (t)\n-\t      = tree_cons (NULL_TREE, x, CLASSTYPE_PURE_VIRTUALS (t));\n+\t    VEC_safe_push (tree, CLASSTYPE_PURE_VIRTUALS (t), x);\n \t}\n     }\n }\n@@ -4281,6 +4280,8 @@ static void\n fixup_inline_methods (tree type)\n {\n   tree method = TYPE_METHODS (type);\n+  VEC (tree) *friends;\n+  unsigned ix;\n \n   if (method && TREE_CODE (method) == TREE_VEC)\n     {\n@@ -4297,11 +4298,10 @@ fixup_inline_methods (tree type)\n     fixup_pending_inline (method);\n \n   /* Do friends.  */\n-  for (method = CLASSTYPE_INLINE_FRIENDS (type); \n-       method; \n-       method = TREE_CHAIN (method))\n-    fixup_pending_inline (TREE_VALUE (method));\n-  CLASSTYPE_INLINE_FRIENDS (type) = NULL_TREE;\n+  for (friends = CLASSTYPE_INLINE_FRIENDS (type), ix = 0;\n+       VEC_iterate (tree, friends, ix, method); ix++)\n+    fixup_pending_inline (method);\n+  CLASSTYPE_INLINE_FRIENDS (type) = NULL;\n }\n \n /* Add OFFSET to all base types of BINFO which is a base in the\n@@ -5183,11 +5183,10 @@ finish_struct (tree t, tree attributes)\n \t the PARM_DECLS. Note that while the type is being defined,\n \t CLASSTYPE_PURE_VIRTUALS contains the list of the inline friends\n \t (see CLASSTYPE_INLINE_FRIENDS) so we need to clear it.  */\n-      CLASSTYPE_PURE_VIRTUALS (t) = NULL_TREE;\n+      CLASSTYPE_PURE_VIRTUALS (t) = NULL;\n       for (x = TYPE_METHODS (t); x; x = TREE_CHAIN (x))\n \tif (DECL_PURE_VIRTUAL_P (x))\n-\t  CLASSTYPE_PURE_VIRTUALS (t)\n-\t    = tree_cons (NULL_TREE, x, CLASSTYPE_PURE_VIRTUALS (t));\n+\t  VEC_safe_push (tree, CLASSTYPE_PURE_VIRTUALS (t), x);\n       complete_vars (t);\n     }\n   else"}, {"sha": "433403c77d69054335ea37680637b94b270f3042", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=585b44d301a56eb7c2e40e840c6c9868f6b92d46", "patch": "@@ -1039,7 +1039,7 @@ struct lang_type_class GTY(())\n   VEC (tree) *vbases;\n   binding_table nested_udts;\n   tree as_base;\n-  tree pure_virtuals;\n+  VEC (tree) *pure_virtuals;\n   tree friend_classes;\n   VEC (tree) * GTY((reorder (\"resort_type_method_vec\"))) methods;\n   tree key_method;\n@@ -1096,7 +1096,8 @@ struct lang_type GTY(())\n /* Fields used for storing information before the class is defined.\n    After the class is defined, these fields hold other information.  */\n \n-/* List of friends which were defined inline in this class definition.  */\n+/* VEC(tree) of friends which were defined inline in this class\n+   definition.  */\n #define CLASSTYPE_INLINE_FRIENDS(NODE) CLASSTYPE_PURE_VIRTUALS (NODE)\n \n /* Nonzero for _CLASSTYPE means that operator delete is defined.  */\n@@ -1303,12 +1304,14 @@ struct lang_type GTY(())\n \n /* True if this a Java interface type, declared with\n    '__attribute__ ((java_interface))'.  */\n-#define TYPE_JAVA_INTERFACE(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->java_interface)\n+#define TYPE_JAVA_INTERFACE(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->java_interface)\n \n-/* A cons list of virtual functions which cannot be inherited by\n+/* A VEC(tree) of virtual functions which cannot be inherited by\n    derived classes.  When deriving from this type, the derived\n    class must provide its own definition for each of these functions.  */\n-#define CLASSTYPE_PURE_VIRTUALS(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->pure_virtuals)\n+#define CLASSTYPE_PURE_VIRTUALS(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->pure_virtuals)\n \n /* Nonzero means that this type has an X() constructor.  */\n #define TYPE_HAS_DEFAULT_CONSTRUCTOR(NODE) \\"}, {"sha": "8047f9e76eb4bfcee02e3a1b561252f1ddaff6ae", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=585b44d301a56eb7c2e40e840c6c9868f6b92d46", "patch": "@@ -10673,8 +10673,8 @@ finish_method (tree decl)\n      for String.cc in libg++.  */\n   if (DECL_FRIEND_P (fndecl))\n     {\n-      CLASSTYPE_INLINE_FRIENDS (current_class_type)\n-\t= tree_cons (NULL_TREE, fndecl, CLASSTYPE_INLINE_FRIENDS (current_class_type));\n+      VEC_safe_push (tree, CLASSTYPE_INLINE_FRIENDS (current_class_type),\n+\t\t     fndecl);\n       decl = void_type_node;\n     }\n "}, {"sha": "c68fc3ced72cb580afdc0bb32a69a2b5ca58b568", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=585b44d301a56eb7c2e40e840c6c9868f6b92d46", "patch": "@@ -1875,9 +1875,8 @@ dfs_get_pure_virtuals (tree binfo, void *data)\n \t   virtuals;\n \t   virtuals = TREE_CHAIN (virtuals))\n \tif (DECL_PURE_VIRTUAL_P (BV_FN (virtuals)))\n-\t  CLASSTYPE_PURE_VIRTUALS (type) \n-\t    = tree_cons (NULL_TREE, BV_FN (virtuals),\n-\t\t\t CLASSTYPE_PURE_VIRTUALS (type));\n+\t  VEC_safe_push (tree, CLASSTYPE_PURE_VIRTUALS (type),\n+\t\t\t BV_FN (virtuals));\n     }\n   \n   BINFO_MARKED (binfo) = 1;\n@@ -1892,7 +1891,7 @@ get_pure_virtuals (tree type)\n {\n   /* Clear the CLASSTYPE_PURE_VIRTUALS list; whatever is already there\n      is going to be overridden.  */\n-  CLASSTYPE_PURE_VIRTUALS (type) = NULL_TREE;\n+  CLASSTYPE_PURE_VIRTUALS (type) = NULL;\n   /* Now, run through all the bases which are not primary bases, and\n      collect the pure virtual functions.  We look at the vtable in\n      each class to determine what pure virtual functions are present.\n@@ -1901,9 +1900,6 @@ get_pure_virtuals (tree type)\n      pure virtuals in the base class.  */\n   dfs_walk (TYPE_BINFO (type), dfs_get_pure_virtuals, unmarkedp, type);\n   dfs_walk (TYPE_BINFO (type), dfs_unmark, markedp, type);\n-\n-  /* Put the pure virtuals in dfs order.  */\n-  CLASSTYPE_PURE_VIRTUALS (type) = nreverse (CLASSTYPE_PURE_VIRTUALS (type));\n }\n \f\n /* DEPTH-FIRST SEARCH ROUTINES.  */"}, {"sha": "44f648360b134139c259a24776cc6db6c33f85e4", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/585b44d301a56eb7c2e40e840c6c9868f6b92d46/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=585b44d301a56eb7c2e40e840c6c9868f6b92d46", "patch": "@@ -235,9 +235,8 @@ complete_type_check_abstract (tree type)\n int\n abstract_virtuals_error (tree decl, tree type)\n {\n-  tree u;\n-  tree tu;\n-\n+  VEC (tree) *pure;\n+  \n   /* This function applies only to classes. Any other entity can never\n      be abstract.  */\n   if (!CLASS_TYPE_P (type))\n@@ -275,15 +274,15 @@ abstract_virtuals_error (tree decl, tree type)\n       return 0;\n     }\n \n-  if (!CLASSTYPE_PURE_VIRTUALS (type))\n-    return 0;\n-\n   if (!TYPE_SIZE (type))\n     /* TYPE is being defined, and during that time\n        CLASSTYPE_PURE_VIRTUALS holds the inline friends.  */\n     return 0;\n \n-  u = CLASSTYPE_PURE_VIRTUALS (type);\n+  pure = CLASSTYPE_PURE_VIRTUALS (type);\n+  if (!pure)\n+    return 0;\n+\n   if (decl)\n     {\n       if (TREE_CODE (decl) == RESULT_DECL)\n@@ -316,15 +315,20 @@ abstract_virtuals_error (tree decl, tree type)\n     error (\"cannot allocate an object of abstract type `%T'\", type);\n \n   /* Only go through this once.  */\n-  if (TREE_PURPOSE (u) == NULL_TREE)\n+  if (VEC_length (tree, pure))\n     {\n-      TREE_PURPOSE (u) = error_mark_node;\n-\n+      unsigned ix;\n+      tree fn;\n+      \n       inform (\"%J  because the following virtual functions are pure \"\n \t      \"within `%T':\", TYPE_MAIN_DECL (type), type);\n \n-      for (tu = u; tu; tu = TREE_CHAIN (tu))\n-\tinform (\"%J\\t%#D\", TREE_VALUE (tu), TREE_VALUE (tu));\n+      for (ix = 0; VEC_iterate (tree, pure, ix, fn); ix++)\n+\tinform (\"%J\\t%#D\", fn, fn);\n+      /* Now truncate the vector.  This leaves it non-null, so we know\n+         there are pure virtuals, but empty so we don't list them out\n+         again.  */\n+      VEC_truncate (tree, pure, 0);\n     }\n   else\n     inform (\"%J  since type `%T' has pure virtual functions\", "}]}