{"sha": "234e114cffc7dd651aacc601069d25498f894673", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM0ZTExNGNmZmM3ZGQ2NTFhYWNjNjAxMDY5ZDI1NDk4Zjg5NDY3Mw==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2002-01-08T19:14:51Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2002-01-08T19:14:51Z"}, "message": "rs6000.md: Add missing int register target case to movdf_low.\n\n       * config/rs6000/rs6000.md: Add missing int register\n        target case to movdf_low.\n\nFrom-SVN: r48653", "tree": {"sha": "ba2b7b440da46d25f1aa74d92f91dcd0e0666c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba2b7b440da46d25f1aa74d92f91dcd0e0666c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/234e114cffc7dd651aacc601069d25498f894673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234e114cffc7dd651aacc601069d25498f894673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/234e114cffc7dd651aacc601069d25498f894673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234e114cffc7dd651aacc601069d25498f894673/comments", "author": null, "committer": null, "parents": [{"sha": "00cc944db912f3b643c911f52af8a9b9ea2b1cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cc944db912f3b643c911f52af8a9b9ea2b1cd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cc944db912f3b643c911f52af8a9b9ea2b1cd0"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "d63c38f298cc42a8c089b75e4080656cf897ec79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234e114cffc7dd651aacc601069d25498f894673/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234e114cffc7dd651aacc601069d25498f894673/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=234e114cffc7dd651aacc601069d25498f894673", "patch": "@@ -1,3 +1,8 @@\n+2002-01-08  Dale Johannesen  <dalej@apple.com>\n+\n+\t* config/rs6000/rs6000.md: Add missing int register\n+\ttarget case to movdf_low.\n+\n 2002-01-08  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Makefile.in (cs-tconfig.h): Don't depend on $(CONFIG_H) or"}, {"sha": "84880eaf11aacbc3d1fd074417eab6747586fcf5", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234e114cffc7dd651aacc601069d25498f894673/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234e114cffc7dd651aacc601069d25498f894673/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=234e114cffc7dd651aacc601069d25498f894673", "patch": "@@ -7590,13 +7590,35 @@\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"movdf_low\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n-        (mem:DF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,!r\")\n+        (mem:DF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b,b\")\n                            (match_operand 2 \"\" \"\"))))]\n   \"TARGET_MACHO && TARGET_HARD_FLOAT && ! TARGET_64BIT\"\n-  \"lfd %0,lo16(%2)(%1)\"\n+  \"*\n+{\n+  switch (which_alternative)\n+    {\n+      case 0:\n+\treturn \\\"lfd %0,lo16(%2)(%1)\\\";\n+      case 1:\n+\t{\n+\t  rtx operands2[4];\n+\t  operands2[0] = operands[0];\n+\t  operands2[1] = operands[1];\n+\t  operands2[2] = operands[2];\n+\t  operands2[3] = gen_rtx_REG (SImode, PIC_OFFSET_TABLE_REGNUM);\n+\t  output_asm_insn (\\\"{l|lwz} %0,lo16(%2)(%1)\\\", operands);\n+\t  /* We cannot rely on ha16(low half)==ha16(high half), alas,\n+\t     although in practice it almost always is.  */\n+\t  output_asm_insn (\\\"{cau|addis} %L0,%3,ha16(%2+4)\\\", operands2);\n+\t  return (\\\"{l|lwz} %L0,lo16(%2+4)(%L0)\\\");\n+\t}\n+      default:\n+\tabort();\n+    }\n+}\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"4\")])\n+   (set_attr \"length\" \"4,12\")])\n \n (define_insn \"movdf_low_st\"\n   [(set (mem:DF (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"b\")"}]}