{"sha": "25f0ea8135b221a7d560e9062d30d14be33c5582", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmMGVhODEzNWIyMjFhN2Q1NjBlOTA2MmQzMGQxNGJlMzNjNTU4Mg==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2011-10-29T01:02:14Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2011-10-29T01:02:14Z"}, "message": "Add a fragmentation fallback in ggc-page v2\n\nThere were some concerns that the earlier munmap patch could lead\nto address space being freed that cannot be allocated again\nby ggc due to fragmentation. This patch adds a fragmentation\nfallback to solve this: when a GGC_QUIRE_SIZE sized allocation fails,\ntry again with a page sized allocation.\n\nPasses bootstrap and testing on x86_64-linux with the fallback\nforced artificially.\n\nv2: fix missed initialization bug added in last minute edit.\n\ngcc/:\n2011-10-20  Andi Kleen  <ak@linux.intel.com>\n\n\t* ggc-page (alloc_anon): Add check argument.\n\t(alloc_page): Add fallback to 1 page allocation.\n\tAdjust alloc_anon calls to new argument.\n\nFrom-SVN: r180649", "tree": {"sha": "eb03fae09ae19353a8f309e094443984ebd18f82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb03fae09ae19353a8f309e094443984ebd18f82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25f0ea8135b221a7d560e9062d30d14be33c5582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f0ea8135b221a7d560e9062d30d14be33c5582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f0ea8135b221a7d560e9062d30d14be33c5582", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f0ea8135b221a7d560e9062d30d14be33c5582/comments", "author": null, "committer": null, "parents": [{"sha": "d33ef9a52bb4a561ec8fb14ad4f45c68dc57bc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33ef9a52bb4a561ec8fb14ad4f45c68dc57bc72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33ef9a52bb4a561ec8fb14ad4f45c68dc57bc72"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "0c442cd206b4e8a4e62afddfa6c13c5f720d3199", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f0ea8135b221a7d560e9062d30d14be33c5582/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f0ea8135b221a7d560e9062d30d14be33c5582/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25f0ea8135b221a7d560e9062d30d14be33c5582", "patch": "@@ -1,3 +1,9 @@\n+2011-10-20  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* ggc-page (alloc_anon): Add check argument.\n+\t(alloc_page): Add fallback to 1 page allocation.\n+\tAdjust alloc_anon calls to new argument.\n+\n 2011-10-18  Andi Kleen  <ak@linux.intel.com>\n \n \t* ggc-page (release_pages): First free large continuous"}, {"sha": "c796160316bc6a6225a4a9bfaa7453c3fbcfa8ee", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25f0ea8135b221a7d560e9062d30d14be33c5582/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25f0ea8135b221a7d560e9062d30d14be33c5582/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=25f0ea8135b221a7d560e9062d30d14be33c5582", "patch": "@@ -483,7 +483,7 @@ static int ggc_allocated_p (const void *);\n static page_entry *lookup_page_table_entry (const void *);\n static void set_page_table_entry (void *, page_entry *);\n #ifdef USING_MMAP\n-static char *alloc_anon (char *, size_t);\n+static char *alloc_anon (char *, size_t, bool check);\n #endif\n #ifdef USING_MALLOC_PAGE_GROUPS\n static size_t page_group_index (char *, char *);\n@@ -662,7 +662,7 @@ debug_print_page_list (int order)\n    compile error unless exactly one of the HAVE_* is defined.  */\n \n static inline char *\n-alloc_anon (char *pref ATTRIBUTE_UNUSED, size_t size)\n+alloc_anon (char *pref ATTRIBUTE_UNUSED, size_t size, bool check)\n {\n #ifdef HAVE_MMAP_ANON\n   char *page = (char *) mmap (pref, size, PROT_READ | PROT_WRITE,\n@@ -675,6 +675,8 @@ alloc_anon (char *pref ATTRIBUTE_UNUSED, size_t size)\n \n   if (page == (char *) MAP_FAILED)\n     {\n+      if (!check)\n+        return NULL;\n       perror (\"virtual memory exhausted\");\n       exit (FATAL_EXIT_CODE);\n     }\n@@ -777,13 +779,18 @@ alloc_page (unsigned order)\n \t extras on the freelist.  (Can only do this optimization with\n \t mmap for backing store.)  */\n       struct page_entry *e, *f = G.free_pages;\n-      int i;\n+      int i, entries = GGC_QUIRE_SIZE;\n \n-      page = alloc_anon (NULL, G.pagesize * GGC_QUIRE_SIZE);\n+      page = alloc_anon (NULL, G.pagesize * GGC_QUIRE_SIZE, false);\n+      if (page == NULL)\n+     \t{\n+\t  page = alloc_anon(NULL, G.pagesize, true);\n+          entries = 1;\n+\t}\n \n       /* This loop counts down so that the chain will be in ascending\n \t memory order.  */\n-      for (i = GGC_QUIRE_SIZE - 1; i >= 1; i--)\n+      for (i = entries - 1; i >= 1; i--)\n \t{\n \t  e = XCNEWVAR (struct page_entry, page_entry_size);\n \t  e->order = order;\n@@ -796,7 +803,7 @@ alloc_page (unsigned order)\n       G.free_pages = f;\n     }\n   else\n-    page = alloc_anon (NULL, entry_size);\n+    page = alloc_anon (NULL, entry_size, true);\n #endif\n #ifdef USING_MALLOC_PAGE_GROUPS\n   else\n@@ -1649,14 +1656,14 @@ init_ggc (void)\n      believe, is an unaligned page allocation, which would cause us to\n      hork badly if we tried to use it.  */\n   {\n-    char *p = alloc_anon (NULL, G.pagesize);\n+    char *p = alloc_anon (NULL, G.pagesize, true);\n     struct page_entry *e;\n     if ((size_t)p & (G.pagesize - 1))\n       {\n \t/* How losing.  Discard this one and try another.  If we still\n \t   can't get something useful, give up.  */\n \n-\tp = alloc_anon (NULL, G.pagesize);\n+\tp = alloc_anon (NULL, G.pagesize, true);\n \tgcc_assert (!((size_t)p & (G.pagesize - 1)));\n       }\n "}]}