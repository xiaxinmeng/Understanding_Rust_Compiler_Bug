{"sha": "211d71a745167d6bb935ddf21b7d7f6dd5168969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjExZDcxYTc0NTE2N2Q2YmI5MzVkZGYyMWI3ZDdmNmRkNTE2ODk2OQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-11-12T20:21:59Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-11-12T20:21:59Z"}, "message": "re PR rtl-optimization/51447 (global register variable definition incorrectly removed as dead code)\n\ngcc/\n\tPR rtl-optimization/51447\n\t* df-scan.c (df_get_entry_block_def_set): Add global regs to the set.\n\t* df-problems.c (df_lr_local_compute): Make global regs always live.\n\t* dce.c (deletable_insn_p): Make insns setting a global reg\n\tinherently necessary.\n\ntestsuite/\n\tPR rtl-optimization/51447\n\t* gcc.c-torture/execute/pr51447.c: New test.\n\nFrom-SVN: r193453", "tree": {"sha": "e07507a7438788aa1e87722aa4308905bc85b8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e07507a7438788aa1e87722aa4308905bc85b8d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/211d71a745167d6bb935ddf21b7d7f6dd5168969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211d71a745167d6bb935ddf21b7d7f6dd5168969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211d71a745167d6bb935ddf21b7d7f6dd5168969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211d71a745167d6bb935ddf21b7d7f6dd5168969/comments", "author": null, "committer": null, "parents": [{"sha": "06b1198f7584b1e1cec68f96b9525629d6beeab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06b1198f7584b1e1cec68f96b9525629d6beeab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06b1198f7584b1e1cec68f96b9525629d6beeab0"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "dd1b4b49581f10ace3490cce19778121bf8f7ab6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=211d71a745167d6bb935ddf21b7d7f6dd5168969", "patch": "@@ -1,3 +1,12 @@\n+2012-11-12  Steven Bosscher  <steven@gcc.gnu.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/51447\n+\t* df-scan.c (df_get_entry_block_def_set): Add global regs to the set.\n+\t* df-problems.c (df_lr_local_compute): Make global regs always live.\n+\t* dce.c (deletable_insn_p): Make insns setting a global reg\n+\tinherently necessary.\n+\n 2012-11-12  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/aarch64/aarch64.md (cmov<mode>_insn): Emit CSINC when\n@@ -362,7 +371,7 @@\n 2012-11-09  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* rtl.h (CONST_SCALAR_INT_P): New macro.\n-   \t* cfgexpand.c (expand_debug_locations): Changed to use\n+\t* cfgexpand.c (expand_debug_locations): Changed to use\n \tCONST_SCALAR_INT_P macro.\n \t* combine.c (try_combine, subst, make_extraction,\n \tgen_lowpart_for_combine): Ditto.\n@@ -725,7 +734,7 @@\n \tis_tm_ending_fndecl calls as mergable.\n \n 2012-11-06  Sterling Augustine <saugustine@google.com>\n-            Cary Coutant <ccoutant@google.com>\n+\t    Cary Coutant <ccoutant@google.com>\n \n \t* common.opt (gno-split-dwarf, gsplit-dwarf): New switches.\n \t* doc/invoke.texi (Debugging Options): Document them.\n@@ -1254,7 +1263,7 @@\n \t(make_extraction): Adjust head comment and move up canonicalization.\n \n 2012-11-04  Alexandre Oliva <aoliva@redhat.com>\n-            Jakub Jelinek <jakub@redhat.com>\n+\t    Jakub Jelinek <jakub@redhat.com>\n \n \tPR debug/54693\n \t* tree-ssa-loop-ivopts.c (remove_unused_ivs): Emit debug temps\n@@ -1541,9 +1550,9 @@\n \t(symtab_node_def::try_variable): New.  Change most calls to\n \tsymtab_variable_p with calls to dyn_cast <varpool_node> (p).\n \t(symtab_function_p): Remove.  Change callers to use\n-        is_a <cgraph_node> (p) instead.\n+\tis_a <cgraph_node> (p) instead.\n \t(symtab_variable_p): Remove.  Change callers to use\n-        is_a <varpool_node> (p) instead.\n+\tis_a <varpool_node> (p) instead.\n \t* cgraph.c (cgraph_node_for_asm): Remove redundant call to\n \tsymtab_node_for_asm.\n \t* cgraphunit.c (symbol_finalized_and_needed): New.\n@@ -2333,7 +2342,7 @@\n 2012-10-24  Sharad Singhai  <singhai@google.com>\n \n \t* config/rs6000/rs6000.c (rs6000_density_test): Use dump_enabled_p\n-          instead of dump_kind_p.\n+\tinstead of dump_kind_p.\n \n 2012-10-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n@@ -3478,7 +3487,7 @@\n \t(TARGET_FSGSBASE): Likewise.\n \t(TARGET_RDRND): Likewise.\n \t(TARGET_F16C): Likewise.\n-\t(TARGET_RTM     ): Likewise.\n+\t(TARGET_RTM): Likewise.\n \t(TARGET_HLE): Likewise.\n \t(TARGET_RDSEED): Likewise.\n \t(TARGET_PRFCHW): Likewise."}, {"sha": "7e4addaef3a747ed763a6a7071300575374091ab", "filename": "gcc/dce.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=211d71a745167d6bb935ddf21b7d7f6dd5168969", "patch": "@@ -121,6 +121,12 @@ deletable_insn_p (rtx insn, bool fast, bitmap arg_stores)\n       && !insn_nothrow_p (insn))\n     return false;\n \n+  /* If INSN sets a global_reg, leave it untouched.  */\n+  for (df_ref *def_rec = DF_INSN_DEFS (insn); *def_rec; def_rec++)\n+    if (HARD_REGISTER_NUM_P (DF_REF_REGNO (*def_rec))\n+\t&& global_regs[DF_REF_REGNO (*def_rec)])\n+      return false;\n+\n   body = PATTERN (insn);\n   switch (GET_CODE (body))\n     {"}, {"sha": "452926128fcd0bf7da87af9a75b490a3793d8b0a", "filename": "gcc/df-problems.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=211d71a745167d6bb935ddf21b7d7f6dd5168969", "patch": "@@ -931,14 +931,19 @@ df_lr_bb_local_compute (unsigned int bb_index)\n static void\n df_lr_local_compute (bitmap all_blocks ATTRIBUTE_UNUSED)\n {\n-  unsigned int bb_index;\n+  unsigned int bb_index, i;\n   bitmap_iterator bi;\n \n   bitmap_clear (&df->hardware_regs_used);\n \n   /* The all-important stack pointer must always be live.  */\n   bitmap_set_bit (&df->hardware_regs_used, STACK_POINTER_REGNUM);\n \n+  /* Global regs are always live, too.  */\n+  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+    if (global_regs[i])\n+      bitmap_set_bit (&df->hardware_regs_used, i);\n+\n   /* Before reload, there are a few registers that must be forced\n      live everywhere -- which might not already be the case for\n      blocks within infinite loops.  */"}, {"sha": "566f2375be5e9a0057b5f64451040565682737e1", "filename": "gcc/df-scan.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=211d71a745167d6bb935ddf21b7d7f6dd5168969", "patch": "@@ -3790,8 +3790,12 @@ df_get_entry_block_def_set (bitmap entry_block_defs)\n   bitmap_clear (entry_block_defs);\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-    if (FUNCTION_ARG_REGNO_P (i))\n-      bitmap_set_bit (entry_block_defs, INCOMING_REGNO (i));\n+    {\n+      if (global_regs[i])\n+\tbitmap_set_bit (entry_block_defs, i);\n+      if (FUNCTION_ARG_REGNO_P (i))\n+\tbitmap_set_bit (entry_block_defs, INCOMING_REGNO (i));\n+    }\n \n   /* The always important stack pointer.  */\n   bitmap_set_bit (entry_block_defs, STACK_POINTER_REGNUM);"}, {"sha": "f236a2f4d1b0aa94d01e74d0b4f72c6f70f99290", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=211d71a745167d6bb935ddf21b7d7f6dd5168969", "patch": "@@ -1,3 +1,9 @@\n+2012-11-12  Steven Bosscher  <steven@gcc.gnu.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/51447\n+\t* gcc.c-torture/execute/pr51447.c: New test.\n+\n 2012-11-12  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.target/aarch64/csinc-2.c: New test."}, {"sha": "7b71a2642ad40ca6f1db28b72facc200a41c2848", "filename": "gcc/testsuite/gcc.c-torture/execute/pr51447.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr51447.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211d71a745167d6bb935ddf21b7d7f6dd5168969/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr51447.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr51447.c?ref=211d71a745167d6bb935ddf21b7d7f6dd5168969", "patch": "@@ -0,0 +1,27 @@\n+/* PR rtl-optimization/51447 */\n+\n+extern void abort (void);\n+\n+#ifdef __x86_64__\n+register void *ptr asm (\"rbx\");\n+#else\n+void *ptr;\n+#endif\n+\n+int\n+main (void)\n+{\n+  __label__ nonlocal_lab;\n+  __attribute__((noinline, noclone)) void\n+    bar (void *func)\n+      {\n+\tptr = func;\n+\tgoto nonlocal_lab;\n+      }\n+  bar (&&nonlocal_lab);\n+  return 1;\n+nonlocal_lab:\n+  if (ptr != &&nonlocal_lab)\n+    abort ();\n+  return 0;\n+}"}]}