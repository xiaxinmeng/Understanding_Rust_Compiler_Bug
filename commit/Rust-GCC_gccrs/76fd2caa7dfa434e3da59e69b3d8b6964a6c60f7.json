{"sha": "76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZmZDJjYWE3ZGZhNDM0ZTNkYTU5ZTY5YjNkOGI2OTY0YTZjNjBmNw==", "commit": {"author": {"name": "Revital Eres", "email": "eres@il.ibm.com", "date": "2007-04-22T08:46:58Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2007-04-22T08:46:58Z"}, "message": "Extend MVE patterns\n\nFrom-SVN: r124037", "tree": {"sha": "aa0d038c63131fc361c9f428ff9dd8aaca536e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa0d038c63131fc361c9f428ff9dd8aaca536e40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7/comments", "author": {"login": "revit13", "id": 16211463, "node_id": "MDQ6VXNlcjE2MjExNDYz", "avatar_url": "https://avatars.githubusercontent.com/u/16211463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/revit13", "html_url": "https://github.com/revit13", "followers_url": "https://api.github.com/users/revit13/followers", "following_url": "https://api.github.com/users/revit13/following{/other_user}", "gists_url": "https://api.github.com/users/revit13/gists{/gist_id}", "starred_url": "https://api.github.com/users/revit13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/revit13/subscriptions", "organizations_url": "https://api.github.com/users/revit13/orgs", "repos_url": "https://api.github.com/users/revit13/repos", "events_url": "https://api.github.com/users/revit13/events{/privacy}", "received_events_url": "https://api.github.com/users/revit13/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8972bcd8211f43b2e6485a9f669ff27b8c0509e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8972bcd8211f43b2e6485a9f669ff27b8c0509e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8972bcd8211f43b2e6485a9f669ff27b8c0509e6"}], "stats": {"total": 109, "additions": 98, "deletions": 11}, "files": [{"sha": "33f646e543bc60a89c8df9f5544c349ffe6482e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7", "patch": "@@ -1,3 +1,10 @@\n+2007-04-22  Revital Eres  <eres@il.ibm.com>\n+\n+        * loop-unroll.c (var_to_expand): New field to support also\n+        insns of the form x = something + x.\n+        (analyze_insn_to_expand_var): Use it.\n+        (expand_var_during_unrolling): Likewise.\n+\n 2007-04-21  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* predict.c: Include pointer-set.h."}, {"sha": "d1322d11e3945a118e475c8d2816fa79ff7a6037", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7", "patch": "@@ -98,6 +98,10 @@ struct var_to_expand\n                                       the accumulator.  If REUSE_EXPANSION is 0 reuse \n                                       the original accumulator.  Else use \n                                       var_expansions[REUSE_EXPANSION - 1].  */\n+  unsigned accum_pos;              /* The position in which the accumulator is placed in\n+                                      the insn src.  For example in x = x + something\n+                                      accum_pos is 0 while in x = something + x accum_pos\n+                                      is 1.  */\n };\n \n /* Information about optimization applied in\n@@ -1565,10 +1569,11 @@ referenced_in_one_insn_in_loop_p (struct loop *loop, rtx reg)\n static struct var_to_expand *\n analyze_insn_to_expand_var (struct loop *loop, rtx insn)\n {\n-  rtx set, dest, src, op1;\n+  rtx set, dest, src, op1, op2, something;\n   struct var_to_expand *ves;\n   enum machine_mode mode1, mode2;\n-  \n+  unsigned accum_pos;\n+\n   set = single_set (insn);\n   if (!set)\n     return NULL;\n@@ -1593,27 +1598,39 @@ analyze_insn_to_expand_var (struct loop *loop, rtx insn)\n   if (!have_insn_for (GET_CODE (src), GET_MODE (src)))\n     return NULL;\n \n-  if (!XEXP (src, 0))\n-    return NULL;\n-  \n   op1 = XEXP (src, 0);\n+  op2 = XEXP (src, 1);\n   \n   if (!REG_P (dest)\n       && !(GET_CODE (dest) == SUBREG\n            && REG_P (SUBREG_REG (dest))))\n     return NULL;\n   \n-  if (!rtx_equal_p (dest, op1))\n-    return NULL;      \n-  \n+  if (rtx_equal_p (dest, op1))\n+    accum_pos = 0;\n+  else if (rtx_equal_p (dest, op2))\n+    accum_pos = 1;\n+  else\n+    return NULL;\n+\n+  /* The method of expansion that we are using; which includes\n+     the initialization of the expansions with zero and the summation of\n+     the expansions at the end of the computation will yield wrong results\n+     for (x = something - x) thus avoid using it in that case.  */\n+  if (accum_pos == 1  \n+    && GET_CODE (src) == MINUS)\n+   return NULL;\n+\n+  something = (accum_pos == 0)? op2 : op1;\n+\n   if (!referenced_in_one_insn_in_loop_p (loop, dest))\n     return NULL;\n   \n-  if (rtx_referenced_p (dest, XEXP (src, 1)))\n+  if (rtx_referenced_p (dest, something))\n     return NULL;\n   \n   mode1 = GET_MODE (dest); \n-  mode2 = GET_MODE (XEXP (src, 1));\n+  mode2 = GET_MODE (something);\n   if ((FLOAT_MODE_P (mode1) \n        || FLOAT_MODE_P (mode2)) \n       && !flag_unsafe_math_optimizations) \n@@ -1635,6 +1652,7 @@ analyze_insn_to_expand_var (struct loop *loop, rtx insn)\n   ves->op = GET_CODE (src);\n   ves->expansion_count = 0;\n   ves->reuse_expansion = 0;\n+  ves->accum_pos = accum_pos;\n   return ves; \n }\n \n@@ -1983,7 +2001,7 @@ expand_var_during_unrolling (struct var_to_expand *ve, rtx insn)\n     new_reg = get_expansion (ve);\n \n   validate_change (insn, &SET_DEST (set), new_reg, 1);\n-  validate_change (insn, &XEXP (SET_SRC (set), 0), new_reg, 1);\n+  validate_change (insn, &XEXP (SET_SRC (set), ve->accum_pos), new_reg, 1);\n   \n   if (apply_change_group ())\n     if (really_new_expansion)"}, {"sha": "ad4462e4e37469409220408385d69415fb7e2a0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7", "patch": "@@ -1,3 +1,7 @@\n+2007-04-22  Revital Eres  <eres@il.ibm.com>\n+\n+\t* gcc.dg/var-expand3.c: New test.\n+\n 2007-04-21  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/31495"}, {"sha": "6ccf59ef7eed60ee22fa185827d5fc7d35083a8f", "filename": "gcc/testsuite/gcc.dg/var-expand3.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand3.c?ref=76fd2caa7dfa434e3da59e69b3d8b6964a6c60f7", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run { target { powerpc*-*-* && powerpc_altivec_ok } } }} */\n+/* { dg-options \"-O2 -funroll-loops -ffast-math -fvariable-expansion-in-unroller -maltivec -dL\" } */\n+\n+#include \"altivec.h\"\n+extern void abort (void);\n+extern void exit (int);\n+\n+#define N 256\n+\n+float in1[N] __attribute__ ((__aligned__ (16))) = {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57};\n+float in2[N] __attribute__ ((__aligned__ (16))) = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19};\n+\n+float\n+foo (int n)\n+{\n+  unsigned i;\n+  vector float vp1, vp2, vp3, vaccum, vzero, vtmp;\n+  float accum = 1.0;\n+\n+  vzero = (vector float){0, 0, 0, 0};\n+\n+  vaccum = vzero;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      vp1 = vec_ld (i * 16, in1);\n+      vp2 = vec_ld (i * 16, in2);\n+\n+      vaccum = vec_madd (vp1, vp2, vaccum);\n+\n+    }\n+  vtmp = vec_sld (vaccum, vaccum, 8);\n+  vp1 = vec_add (vaccum, vtmp);\n+  vtmp = vec_sld (vp1, vp1, 4);\n+  vp2 = vec_add (vp1, vtmp);\n+\n+  vec_ste (vp2, 0, &accum);\n+  if (accum != 1518)\n+    return 0;\n+ \n+  return accum;\n+}\n+\n+int\n+main (void)\n+{\n+  if (!foo (3))\n+    abort ();\n+\n+   exit (0);\n+}\n+\n+/* { dg-final { scan-rtl-dump \"Expanding Accumulator\" \"loop2_unroll\" } } */\n+/* { dg-final { cleanup-rtl-dump \"loop*\" } } */\n+\n+\n+\n+"}]}