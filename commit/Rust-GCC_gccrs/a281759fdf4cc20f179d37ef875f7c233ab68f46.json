{"sha": "a281759fdf4cc20f179d37ef875f7c233ab68f46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI4MTc1OWZkZjRjYzIwZjE3OWQzN2VmODc1ZjdjMjMzYWI2OGY0Ng==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-06-30T18:11:14Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-06-30T18:11:14Z"}, "message": "Conditionally compile support for --enable-mapped_location.\n\n\t* tree-mudflap.c (mf_file_function_line_tree):  Take a location_t\n\trather than a pointer to one.  Use expand_location.\n\t(mf_varname_tree):  Use expand_location.\n\t* tree-dump.c:  Use expand_location on DECL_SOURCE_LOCATION.\n\t* coverage.c:  Likewise.\n\t* print-tree.c:  Likewise.\n\t* c-aux-info.c (gen_aux_info_record):  Likewise.\n\t* c-parse.in:  Use SET_EXPR_LOCATION macro.\n\t* gimple-low.c:  Likewise.\n\t* tree-mudflap.c:  Likewise.\n\t* gimplify.c:  Likewise.  Also use EXPR_LOCATION and EXPR_HAS_LOCATION.\n\t* c-ppoutput.c:  Use new source_location typedef instead of fileline.\n\t* c-semantics.c:  Use new macros.\n\t* c-typeck.c:  Likewise.\n\nFrom-SVN: r83920", "tree": {"sha": "01829581c8eb09eede00ea3a28703fb4b3440dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01829581c8eb09eede00ea3a28703fb4b3440dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a281759fdf4cc20f179d37ef875f7c233ab68f46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a281759fdf4cc20f179d37ef875f7c233ab68f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a281759fdf4cc20f179d37ef875f7c233ab68f46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a281759fdf4cc20f179d37ef875f7c233ab68f46/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c20847b8301eb9aa407ee8273b6e738e7067ee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c20847b8301eb9aa407ee8273b6e738e7067ee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c20847b8301eb9aa407ee8273b6e738e7067ee0"}], "stats": {"total": 160, "additions": 89, "deletions": 71}, "files": [{"sha": "b0eb970d161508ee3b7f1c2af308a272c1c52877", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -40,6 +40,20 @@\n \tclear and restore input_Location - now handled by lang_dependent_init.\n \t* function.c (init_function_start):  Use new DECL_IS_BUILTIN macro.\n \t* xcoffout.c (xcoff_assign_fundamental_type_number):  Likewise.\n+\t* tree-mudflap.c (mf_file_function_line_tree):  Take a location_t\n+\trather than a pointer to one.  Use expand_location.\n+\t(mf_varname_tree):  Use expand_location.\n+\t* tree-dump.c:  Use expand_location on DECL_SOURCE_LOCATION.\n+\t* coverage.c:  Likewise.\n+\t* print-tree.c:  Likewise.\n+\t* c-aux-info.c (gen_aux_info_record):  Likewise.\n+\t* c-parse.in:  Use SET_EXPR_LOCATION macro.\n+\t* gimple-low.c:  Likewise.\n+\t* tree-mudflap.c:  Likewise.\n+\t* gimplify.c:  Likewise.  Also use EXPR_LOCATION and EXPR_HAS_LOCATION.\n+\t* c-ppoutput.c:  Use new source_location typedef instead of fileline.\n+\t* c-semantics.c:  Use new macros.\n+\t* c-typeck.c:  Likewise.\n \n 2004-06-30  Richard Sandiford  <rsandifo@redhat.com>\n \t    Eric Christopher  <echristo@redhat.com>"}, {"sha": "8d457836c756dd70a6ca0fe657bfb455f5daf173", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -554,6 +554,7 @@ gen_aux_info_record (tree fndecl, int is_definition, int is_implicit,\n   if (flag_gen_aux_info)\n     {\n       static int compiled_from_record = 0;\n+      expanded_location xloc = expand_location (DECL_SOURCE_LOCATION (fndecl));\n \n       /* Each output .X file must have a header line.  Write one now if we\n \t have not yet done so.  */\n@@ -569,8 +570,7 @@ gen_aux_info_record (tree fndecl, int is_definition, int is_implicit,\n       /* Write the actual line of auxiliary info.  */\n \n       fprintf (aux_info_file, \"/* %s:%d:%c%c */ %s;\",\n-\t       DECL_SOURCE_FILE (fndecl),\n-\t       DECL_SOURCE_LINE (fndecl),\n+\t       xloc.file, xloc.line,\n \t       (is_implicit) ? 'I' : (is_prototyped) ? 'N' : 'O',\n \t       (is_definition) ? 'F' : 'C',\n \t       gen_decl (fndecl, is_definition, ansi));"}, {"sha": "d70139182b30925de187993af59239b2a397b1d7", "filename": "gcc/c-parse.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -2092,19 +2092,19 @@ lineno_stmt:\n \t\t     because (recursively) all of the component statments\n \t\t     should already have line numbers assigned.  */\n \t\t  if ($2 && EXPR_P ($2))\n-\t\t    annotate_with_locus ($2, $1);\n+\t\t    SET_EXPR_LOCATION ($2, $1);\n \t\t}\n \t;\n \n lineno_label:\n \t  save_location label\n-\t\t{ if ($2) annotate_with_locus ($2, $1); }\n+\t\t{ if ($2) SET_EXPR_LOCATION ($2, $1); }\n \t;\n \n condition: save_location expr\n \t\t{ $$ = lang_hooks.truthvalue_conversion ($2);\n \t\t  if (EXPR_P ($$))\n-\t\t    annotate_with_locus ($$, $1); }\n+\t\t    SET_EXPR_LOCATION ($$, $1); }\n \t;\n \n /* Implement -Wparenthesis by special casing IF statement directly nested\n@@ -2191,7 +2191,7 @@ for_cond_expr: save_location xexpr\n \t\t    {\n \t\t      $$ = lang_hooks.truthvalue_conversion ($2);\n \t\t      if (EXPR_P ($$))\n-\t\t\tannotate_with_locus ($$, $1);\n+\t\t\tSET_EXPR_LOCATION ($$, $1);\n \t\t    }\n \t\t  else\n \t\t    $$ = NULL;"}, {"sha": "d34ec61fc85c11994ba7a519d26b6184fe02e744", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -51,12 +51,12 @@ static void maybe_print_line (source_location);\n /* Callback routines for the parser.   Most of these are active only\n    in specific modes.  */\n static void cb_line_change (cpp_reader *, const cpp_token *, int);\n-static void cb_define (cpp_reader *, fileline, cpp_hashnode *);\n-static void cb_undef (cpp_reader *, fileline, cpp_hashnode *);\n-static void cb_include (cpp_reader *, fileline, const unsigned char *,\n+static void cb_define (cpp_reader *, source_location, cpp_hashnode *);\n+static void cb_undef (cpp_reader *, source_location, cpp_hashnode *);\n+static void cb_include (cpp_reader *, source_location, const unsigned char *,\n \t\t\tconst char *, int);\n-static void cb_ident (cpp_reader *, fileline, const cpp_string *);\n-static void cb_def_pragma (cpp_reader *, fileline);\n+static void cb_ident (cpp_reader *, source_location, const cpp_string *);\n+static void cb_def_pragma (cpp_reader *, source_location);\n static void cb_read_pch (cpp_reader *pfile, const char *name,\n \t\t\t int fd, const char *orig_name);\n \n@@ -300,7 +300,7 @@ cb_line_change (cpp_reader *pfile, const cpp_token *token,\n }\n \n static void\n-cb_ident (cpp_reader *pfile ATTRIBUTE_UNUSED, fileline line,\n+cb_ident (cpp_reader *pfile ATTRIBUTE_UNUSED, source_location line,\n \t  const cpp_string *str)\n {\n   maybe_print_line (line);\n@@ -309,7 +309,7 @@ cb_ident (cpp_reader *pfile ATTRIBUTE_UNUSED, fileline line,\n }\n \n static void\n-cb_define (cpp_reader *pfile, fileline line, cpp_hashnode *node)\n+cb_define (cpp_reader *pfile, source_location line, cpp_hashnode *node)\n {\n   maybe_print_line (line);\n   fputs (\"#define \", print.outf);\n@@ -401,7 +401,7 @@ pp_file_change (const struct line_map *map)\n \n /* Copy a #pragma directive to the preprocessed output.  */\n static void\n-cb_def_pragma (cpp_reader *pfile, fileline line)\n+cb_def_pragma (cpp_reader *pfile, source_location line)\n {\n   maybe_print_line (line);\n   fputs (\"#pragma \", print.outf);"}, {"sha": "f164c9596ed8b9082de2d34c3941b3af96de3137", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -132,8 +132,8 @@ add_stmt (tree t)\n \n   if ((EXPR_P (t) || STATEMENT_CODE_P (code)) && code != LABEL_EXPR)\n     {\n-      if (!EXPR_LOCUS (t))\n-\tannotate_with_locus (t, input_location);\n+      if (!EXPR_HAS_LOCATION (t))\n+\tSET_EXPR_LOCATION (t, input_location);\n \n       /* When we expand a statement-tree, we must know whether or not the\n \t statements are full-expressions.  We record that fact here.  */\n@@ -149,7 +149,7 @@ add_stmt (tree t)\n \n /* Build a generic statement based on the given type of node and\n    arguments. Similar to `build_nt', except that we set\n-   EXPR_LOCUS to be the current source location.  */\n+   EXPR_LOCATION to be the current source location.  */\n /* ??? This should be obsolete with the lineno_stmt productions\n    in the grammar.  */\n \n@@ -166,7 +166,7 @@ build_stmt (enum tree_code code, ...)\n   ret = make_node (code);\n   TREE_TYPE (ret) = void_type_node;\n   length = TREE_CODE_LENGTH (code);\n-  annotate_with_locus (ret, input_location);\n+  SET_EXPR_LOCATION (ret, input_location);\n \n   /* Most statements have implicit side effects all on their own, \n      such as control transfer.  For those that do, we'll compute"}, {"sha": "5b2be72445b6d52c4eaa4e5868b37c260c47c849", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -6540,7 +6540,7 @@ c_finish_if_stmt (location_t if_locus, tree cond, tree then_block,\n     }\n \n   stmt = build3 (COND_EXPR, NULL_TREE, cond, then_block, else_block);\n-  annotate_with_locus (stmt, if_locus);\n+  SET_EXPR_LOCATION (stmt, if_locus);\n   add_stmt (stmt);\n }\n \n@@ -6584,17 +6584,17 @@ c_finish_loop (location_t start_locus, tree cond, tree incr, tree body,\n                 }\n               else\n                 t = build1 (GOTO_EXPR, void_type_node, clab);\n-\t      annotate_with_locus (t, start_locus);\n+\t      SET_EXPR_LOCATION (t, start_locus);\n               add_stmt (t);\n             }\n  \n \t  t = build_and_jump (&blab);\n           exit = build (COND_EXPR, void_type_node, cond, exit, t);\n           exit = fold (exit);\n \t  if (cond_is_first)\n-            annotate_with_locus (exit, start_locus);\n+            SET_EXPR_LOCATION (exit, start_locus);\n \t  else\n-            annotate_with_locus (exit, input_location);\n+            SET_EXPR_LOCATION (exit, input_location);\n         }\n  \n       add_stmt (top);\n@@ -6687,7 +6687,7 @@ c_process_expr_stmt (tree expr)\n     expr = build1 (NOP_EXPR, TREE_TYPE (expr), expr);\n \n   if (EXPR_P (expr))\n-    annotate_with_locus (expr, input_location);\n+    SET_EXPR_LOCATION (expr, input_location);\n \n   return expr;\n }"}, {"sha": "c67300b8a7cb22a2ca8e7fb4eb3807127a781203", "filename": "gcc/coverage.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -500,10 +500,11 @@ coverage_checksum_string (unsigned chksum, const char *string)\n static unsigned\n compute_checksum (void)\n {\n-  unsigned chksum = DECL_SOURCE_LINE (current_function_decl);\n+  expanded_location xloc\n+    = expand_location (DECL_SOURCE_LOCATION (current_function_decl));\n+  unsigned chksum = xloc.line;\n \n-  chksum = coverage_checksum_string (chksum,\n-      \t\t\t\t     DECL_SOURCE_FILE (current_function_decl));\n+  chksum = coverage_checksum_string (chksum, xloc.file);\n   chksum = coverage_checksum_string\n     (chksum, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl)));\n \n@@ -523,8 +524,8 @@ coverage_begin_output (void)\n \n   if (!bbg_function_announced)\n     {\n-      const char *file = DECL_SOURCE_FILE (current_function_decl);\n-      unsigned line = DECL_SOURCE_LINE (current_function_decl);\n+      expanded_location xloc\n+\t= expand_location (DECL_SOURCE_LOCATION (current_function_decl));\n       unsigned long offset;\n \n       if (!bbg_file_opened)\n@@ -546,8 +547,8 @@ coverage_begin_output (void)\n       gcov_write_unsigned (compute_checksum ());\n       gcov_write_string (IDENTIFIER_POINTER\n \t\t\t (DECL_ASSEMBLER_NAME (current_function_decl)));\n-      gcov_write_string (file);\n-      gcov_write_unsigned (line);\n+      gcov_write_string (xloc.file);\n+      gcov_write_unsigned (xloc.line);\n       gcov_write_length (offset);\n \n       bbg_function_announced = 1;"}, {"sha": "f5ee15bdd3b64a60d30ef8b88672dcb87a62220c", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -94,7 +94,7 @@ lower_function_body (void)\n           || TREE_OPERAND (TREE_VALUE (data.return_statements), 0) != NULL))\n     {\n       x = build (RETURN_EXPR, void_type_node, NULL);\n-      annotate_with_locus (x, cfun->function_end_locus);\n+      SET_EXPR_LOCATION (x, cfun->function_end_locus);\n       tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n     }\n \n@@ -109,7 +109,11 @@ lower_function_body (void)\n \t It now fills in for many such returns.  Failure to remove this\n \t will result in incorrect results for coverage analysis.  */\n       x = TREE_VALUE (t);\n+#ifdef USE_MAPPED_LOCATION\n+      SET_EXPR_LOCATION (x, UNKNOWN_LOCATION);\n+#else\n       SET_EXPR_LOCUS (x, NULL);\n+#endif\n       tsi_link_after (&i, x, TSI_CONTINUE_LINKING);\n     }\n "}, {"sha": "276c1990f1467169adfacffa313f7675be35f98a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -453,10 +453,10 @@ internal_get_tmp_var (tree val, tree *pre_p, tree *post_p, bool is_formal)\n   mod = build (MODIFY_EXPR, TREE_TYPE (t), t, val);\n \n   class = TREE_CODE_CLASS (TREE_CODE (val));\n-  if (EXPR_LOCUS (val))\n+  if (EXPR_HAS_LOCATION (val))\n     SET_EXPR_LOCUS (mod, EXPR_LOCUS (val));\n   else\n-    annotate_with_locus (mod, input_location);\n+    SET_EXPR_LOCATION (mod, input_location);\n \n   /* gimplify_modify_expr might want to reduce this further.  */\n   gimplify_and_add (mod, pre_p);\n@@ -559,7 +559,7 @@ annotate_one_with_locus (tree t, location_t locus)\n   if (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (t)))\n       && ! EXPR_HAS_LOCATION (t)\n       && should_carry_locus_p (t))\n-    annotate_with_locus (t, locus);\n+    SET_EXPR_LOCATION (t, locus);\n }\n \n void\n@@ -1832,8 +1832,8 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool (*gimple_test_f) (tree))\n \n   /* For reliable diagnostics during inlining, it is necessary that \n      every call_expr be annotated with file and line.  */\n-  if (!EXPR_LOCUS (*expr_p))\n-    annotate_with_locus (*expr_p, input_location);\n+  if (! EXPR_HAS_LOCATION (*expr_p))\n+    SET_EXPR_LOCATION (*expr_p, input_location);\n \n   /* This may be a call to a builtin function.\n \n@@ -3435,7 +3435,6 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n   tree internal_post = NULL_TREE;\n   tree save_expr;\n   int is_statement = (pre_p == NULL);\n-  location_t *locus;\n   location_t saved_location;\n   enum gimplify_status ret;\n \n@@ -3455,12 +3454,9 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n     post_p = &internal_post;\n \n   saved_location = input_location;\n-  if (save_expr == error_mark_node)\n-    locus = NULL;\n-  else\n-    locus = EXPR_LOCUS (save_expr);\n-  if (locus)\n-    input_location = *locus;\n+  if (save_expr != error_mark_node\n+      && EXPR_HAS_LOCATION (*expr_p))\n+    input_location = EXPR_LOCATION (*expr_p);\n \n   /* Loop over the specific gimplifiers until the toplevel node\n      remains the same.  */"}, {"sha": "055f8f36097e99ea09b2210d60d94c07a56acdad", "filename": "gcc/print-tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -160,6 +160,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n   int len;\n   int first_rtl;\n   int i;\n+  expanded_location xloc;\n \n   if (node == 0)\n     return;\n@@ -372,8 +373,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \tfputs (\" decl_7\", file);\n \n       fprintf (file, \" %s\", GET_MODE_NAME (mode));\n-      fprintf (file, \" file %s line %d\",\n-\t       DECL_SOURCE_FILE (node), DECL_SOURCE_LINE (node));\n+      xloc = expand_location (DECL_SOURCE_LOCATION (node));\n+      fprintf (file, \" file %s line %d\", xloc.file, xloc.line);\n \n       print_node (file, \"size\", DECL_SIZE (node), indent + 4);\n       print_node (file, \"unit size\", DECL_SIZE_UNIT (node), indent + 4);\n@@ -745,10 +746,9 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n   if (EXPR_HAS_LOCATION (node))\n     {\n+      expanded_location xloc = expand_location (EXPR_LOCATION (node));\n       indent_to (file, indent+4);\n-      fprintf (file, \"%s:%d\",\n-\t       EXPR_FILENAME (node),\n-\t       EXPR_LINENO (node));\n+      fprintf (file, \"%s:%d\", xloc.file, xloc.line);\n     }\n \n   fprintf (file, \">\");"}, {"sha": "2e945e46143b5ecca70580da434f034a76f040cc", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -315,6 +315,7 @@ dequeue_and_dump (dump_info_p di)\n     }\n   else if (DECL_P (t))\n     {\n+      expanded_location xloc;\n       /* All declarations have names.  */\n       if (DECL_NAME (t))\n \tdump_child (\"name\", DECL_NAME (t));\n@@ -325,18 +326,19 @@ dequeue_and_dump (dump_info_p di)\n       queue_and_dump_type (di, t);\n       dump_child (\"scpe\", DECL_CONTEXT (t));\n       /* And a source position.  */\n-      if (DECL_SOURCE_FILE (t))\n+      xloc = expand_location (DECL_SOURCE_LOCATION (t));\n+      if (xloc.file)\n \t{\n-\t  const char *filename = strrchr (DECL_SOURCE_FILE (t), '/');\n+\t  const char *filename = strrchr (xloc.file, '/');\n \t  if (!filename)\n-\t    filename = DECL_SOURCE_FILE (t);\n+\t    filename = xloc.file;\n \t  else\n \t    /* Skip the slash.  */\n \t    ++filename;\n \n \t  dump_maybe_newline (di);\n \t  fprintf (di->stream, \"srcp: %s:%-6d \", filename,\n-\t\t   DECL_SOURCE_LINE (t));\n+\t\t   xloc.line);\n \t  di->column += 6 + strlen (filename) + 8;\n \t}\n       /* And any declaration can be compiler-generated.  */"}, {"sha": "dbb994d679ad981476cf16b71bcdfd7006131b0e", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a281759fdf4cc20f179d37ef875f7c233ab68f46/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=a281759fdf4cc20f179d37ef875f7c233ab68f46", "patch": "@@ -50,7 +50,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Helpers.  */\n static tree mf_build_string (const char *string);\n static tree mf_varname_tree (tree);\n-static tree mf_file_function_line_tree (location_t *);\n+static tree mf_file_function_line_tree (location_t);\n \n /* Initialization of all the mf-runtime.h extern decls.  */\n static void mf_init_extern_trees (void);\n@@ -117,18 +117,18 @@ mf_varname_tree (tree decl)\n \n   /* Add FILENAME[:LINENUMBER].  */\n   {\n+    expanded_location xloc = expand_location (DECL_SOURCE_LOCATION (decl));\n     const char *sourcefile;\n-    unsigned sourceline;\n+    unsigned sourceline = xloc.line;\n \n-    sourcefile = DECL_SOURCE_FILE (decl);\n+    sourcefile = xloc.file;\n     if (sourcefile == NULL && current_function_decl != NULL_TREE)\n       sourcefile = DECL_SOURCE_FILE (current_function_decl);\n     if (sourcefile == NULL)\n       sourcefile = \"<unknown file>\";\n \n     pp_string (buf, sourcefile);\n \n-    sourceline = DECL_SOURCE_LINE (decl);\n     if (sourceline != 0)\n       {\n         pp_string (buf, \":\");\n@@ -188,25 +188,23 @@ mf_varname_tree (tree decl)\n /* And another friend, for producing a simpler message.  */\n \n static tree\n-mf_file_function_line_tree (location_t *locus)\n+mf_file_function_line_tree (location_t location)\n {\n+  expanded_location xloc = expand_location (location);\n   const char *file = NULL, *colon, *line, *op, *name, *cp;\n   char linebuf[18];\n   char *string;\n   tree result;\n \n-  /* Add FILENAME.  */\n-  if (locus != NULL)\n-    file = locus->file;\n-  if (file == NULL && current_function_decl != NULL_TREE)\n-    file = DECL_SOURCE_FILE (current_function_decl);\n-  if (file == NULL)\n-    file = \"<unknown file>\";\n+  /* Add FILENAME[:LINENUMBER]. */\n+  if (xloc.file == NULL && current_function_decl != NULL_TREE)\n+    xloc.file = DECL_SOURCE_FILE (current_function_decl);\n+  if (xloc.file == NULL)\n+    xloc.file = \"<unknown file>\";\n \n-  /* Add :LINENUMBER.  */\n-  if (locus != NULL && locus->line > 0)\n+  if (xloc.line > 0)\n     {\n-      sprintf (linebuf, \"%d\", locus->line);\n+      sprintf (linebuf, \"%d\", xloc.line);\n       colon = \":\";\n       line = linebuf;\n     }\n@@ -348,13 +346,13 @@ mf_decl_cache_locals (void)\n      globals into the cache variables.  */\n   t = build (MODIFY_EXPR, TREE_TYPE (mf_cache_shift_decl_l),\n              mf_cache_shift_decl_l, mf_cache_shift_decl);\n-  annotate_with_locus (t, DECL_SOURCE_LOCATION (current_function_decl));\n+  SET_EXPR_LOCATION (t, DECL_SOURCE_LOCATION (current_function_decl));\n   gimplify_to_stmt_list (&t);\n   shift_init_stmts = t;\n \n   t = build (MODIFY_EXPR, TREE_TYPE (mf_cache_mask_decl_l),\n              mf_cache_mask_decl_l, mf_cache_mask_decl);\n-  annotate_with_locus (t, DECL_SOURCE_LOCATION (current_function_decl));\n+  SET_EXPR_LOCATION (t, DECL_SOURCE_LOCATION (current_function_decl));\n   gimplify_to_stmt_list (&t);\n   mask_init_stmts = t;\n \n@@ -548,7 +546,10 @@ mf_build_check_statement_for (tree addr, tree size,\n \n      This is the body of the conditional.  */\n   \n-  u = tree_cons (NULL_TREE, mf_file_function_line_tree (locus), NULL_TREE);\n+  u = tree_cons (NULL_TREE,\n+\t\t mf_file_function_line_tree (locus == NULL ? UNKNOWN_LOCATION\n+\t\t\t\t\t     : *locus),\n+\t\t NULL_TREE);\n   u = tree_cons (NULL_TREE, dirflag, u);\n   u = tree_cons (NULL_TREE, size, u);\n   u = tree_cons (NULL_TREE, mf_value, u);\n@@ -920,7 +921,7 @@ mx_register_decls (tree decl, tree *stmt_list)\n                                                       register_fncall_params);\n \n           /* Accumulate the two calls.  */\n-          /* ??? Set EXPR_LOCUS.  */\n+          /* ??? Set EXPR_LOCATION.  */\n           gimplify_stmt (&register_fncall);\n           gimplify_stmt (&unregister_fncall);\n "}]}