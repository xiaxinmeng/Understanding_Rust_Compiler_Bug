{"sha": "ba38538fd68b2542277ea236a06b9f418e6d77bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEzODUzOGZkNjhiMjU0MjI3N2VhMjM2YTA2YjlmNDE4ZTZkNzdiZA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2014-06-16T21:39:42Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2014-06-16T21:39:42Z"}, "message": "re PR rtl-optimization/61325 (aarch64_be build fails)\n\n2014-06-16  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/61325\n\t* lra-constraints.c (valid_address_p): Add forward declaration.\n\t(simplify_operand_subreg): Check address validity before and after\n\talter_reg of memory subreg.\n\nFrom-SVN: r211715", "tree": {"sha": "3301e0b3e18a3af128c45ede67e7edc48c2a4ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3301e0b3e18a3af128c45ede67e7edc48c2a4ef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba38538fd68b2542277ea236a06b9f418e6d77bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba38538fd68b2542277ea236a06b9f418e6d77bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba38538fd68b2542277ea236a06b9f418e6d77bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba38538fd68b2542277ea236a06b9f418e6d77bd/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7049aed6c84ea55355f2173cb74d5717abadf1b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7049aed6c84ea55355f2173cb74d5717abadf1b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7049aed6c84ea55355f2173cb74d5717abadf1b2"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "dc0926a002818f45700c1a5cbfd8d62eb34f5303", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba38538fd68b2542277ea236a06b9f418e6d77bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba38538fd68b2542277ea236a06b9f418e6d77bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba38538fd68b2542277ea236a06b9f418e6d77bd", "patch": "@@ -1,3 +1,10 @@\n+2014-06-16  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/61325\n+\t* lra-constraints.c (valid_address_p): Add forward declaration.\n+\t(simplify_operand_subreg): Check address validity before and after\n+\talter_reg of memory subreg.\n+\n 2014-06-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (decide_alg): Correctly handle"}, {"sha": "b1904e1bf65493fd664736f9edafedecf4073083", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba38538fd68b2542277ea236a06b9f418e6d77bd/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba38538fd68b2542277ea236a06b9f418e6d77bd/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=ba38538fd68b2542277ea236a06b9f418e6d77bd", "patch": "@@ -1333,6 +1333,8 @@ insert_move_for_subreg (rtx *before, rtx *after, rtx origreg, rtx newreg)\n     }\n }\n \n+static int valid_address_p (enum machine_mode mode, rtx addr, addr_space_t as);\n+\n /* Make reloads for subreg in operand NOP with internal subreg mode\n    REG_MODE, add new reloads for further processing.  Return true if\n    any reload was generated.  */\n@@ -1363,10 +1365,26 @@ simplify_operand_subreg (int nop, enum machine_mode reg_mode)\n      equivalences in function lra_constraints) and because for spilled\n      pseudos we allocate stack memory enough for the biggest\n      corresponding paradoxical subreg.  */\n-  if ((MEM_P (reg)\n-       && (! SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (reg))\n-\t   || MEM_ALIGN (reg) >= GET_MODE_ALIGNMENT (mode)))\n-      || (REG_P (reg) && REGNO (reg) < FIRST_PSEUDO_REGISTER))\n+  if (MEM_P (reg)\n+      && (! SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (reg))\n+\t  || MEM_ALIGN (reg) >= GET_MODE_ALIGNMENT (mode)))\n+    {\n+      rtx subst, old = *curr_id->operand_loc[nop];\n+\n+      alter_subreg (curr_id->operand_loc[nop], false);\n+      subst = *curr_id->operand_loc[nop];\n+      lra_assert (MEM_P (subst));\n+      if (! valid_address_p (GET_MODE (reg), XEXP (reg, 0),\n+\t\t\t     MEM_ADDR_SPACE (reg))\n+\t  || valid_address_p (GET_MODE (subst), XEXP (subst, 0),\n+\t\t\t      MEM_ADDR_SPACE (subst)))\n+\treturn true;\n+      /* If the address was valid and became invalid, prefer to reload\n+\t the memory.  Typical case is when the index scale should\n+\t correspond the memory.  */\n+      *curr_id->operand_loc[nop] = old;\n+    }\n+  else if (REG_P (reg) && REGNO (reg) < FIRST_PSEUDO_REGISTER)\n     {\n       alter_subreg (curr_id->operand_loc[nop], false);\n       return true;"}]}