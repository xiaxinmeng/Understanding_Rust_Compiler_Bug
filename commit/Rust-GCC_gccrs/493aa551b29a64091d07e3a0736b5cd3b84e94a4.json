{"sha": "493aa551b29a64091d07e3a0736b5cd3b84e94a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkzYWE1NTFiMjlhNjQwOTFkMDdlM2EwNzM2YjVjZDNiODRlOTRhNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-01-03T00:54:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-01-03T00:54:40Z"}, "message": "re PR c++/38705 (ICE: canonical types differ for identical types const int and const AlpsNodeIndex_t)\n\n\tPR c++/38705\n\t* builtins.c (fold_builtin_memory_op): Give up if either operand\n\tis volatile.  Set srctype or desttype to non-qualified version\n\tof the other type.\n\n\t* g++.dg/torture/pr38705.C: New test.\n\nFrom-SVN: r143029", "tree": {"sha": "9c32c8623b462e75703ad770a137a1eaeba5e765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c32c8623b462e75703ad770a137a1eaeba5e765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/493aa551b29a64091d07e3a0736b5cd3b84e94a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493aa551b29a64091d07e3a0736b5cd3b84e94a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493aa551b29a64091d07e3a0736b5cd3b84e94a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493aa551b29a64091d07e3a0736b5cd3b84e94a4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f26a23027acae2712001616c4b13c76cf316cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f26a23027acae2712001616c4b13c76cf316cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f26a23027acae2712001616c4b13c76cf316cd5"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "5f6b8d1d11c9971477916bc417343add393a03ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493aa551b29a64091d07e3a0736b5cd3b84e94a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493aa551b29a64091d07e3a0736b5cd3b84e94a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=493aa551b29a64091d07e3a0736b5cd3b84e94a4", "patch": "@@ -1,5 +1,10 @@\n 2009-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/38705\n+\t* builtins.c (fold_builtin_memory_op): Give up if either operand\n+\tis volatile.  Set srctype or desttype to non-qualified version\n+\tof the other type.\n+\n \tPR c/38700\n \t* builtins.c (fold_builtin_expect): Only check DECL_WEAK for VAR_DECLs\n \tand FUNCTION_DECLs."}, {"sha": "57cce08abe53a5b02d28349ad594a361b380b8d1", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493aa551b29a64091d07e3a0736b5cd3b84e94a4/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493aa551b29a64091d07e3a0736b5cd3b84e94a4/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=493aa551b29a64091d07e3a0736b5cd3b84e94a4", "patch": "@@ -8907,7 +8907,9 @@ fold_builtin_memory_op (tree dest, tree src, tree len, tree type, bool ignore, i\n \t  || !TYPE_SIZE_UNIT (srctype)\n \t  || !TYPE_SIZE_UNIT (desttype)\n \t  || TREE_CODE (TYPE_SIZE_UNIT (srctype)) != INTEGER_CST\n-\t  || TREE_CODE (TYPE_SIZE_UNIT (desttype)) != INTEGER_CST)\n+\t  || TREE_CODE (TYPE_SIZE_UNIT (desttype)) != INTEGER_CST\n+\t  || TYPE_VOLATILE (srctype)\n+\t  || TYPE_VOLATILE (desttype))\n \treturn NULL_TREE;\n \n       src_align = get_pointer_alignment (src, BIGGEST_ALIGNMENT);\n@@ -8924,7 +8926,7 @@ fold_builtin_memory_op (tree dest, tree src, tree len, tree type, bool ignore, i\n \t{\n \t  srcvar = build_fold_indirect_ref (src);\n \t  if (TREE_THIS_VOLATILE (srcvar))\n-\t    srcvar = NULL_TREE;\n+\t    return NULL_TREE;\n \t  else if (!tree_int_cst_equal (lang_hooks.expr_size (srcvar), len))\n \t    srcvar = NULL_TREE;\n \t  /* With memcpy, it is possible to bypass aliasing rules, so without\n@@ -8942,7 +8944,7 @@ fold_builtin_memory_op (tree dest, tree src, tree len, tree type, bool ignore, i\n \t{\n \t  destvar = build_fold_indirect_ref (dest);\n \t  if (TREE_THIS_VOLATILE (destvar))\n-\t    destvar = NULL_TREE;\n+\t    return NULL_TREE;\n \t  else if (!tree_int_cst_equal (lang_hooks.expr_size (destvar), len))\n \t    destvar = NULL_TREE;\n \t  else if (!var_decl_component_p (destvar))\n@@ -8958,7 +8960,7 @@ fold_builtin_memory_op (tree dest, tree src, tree len, tree type, bool ignore, i\n \t  if (TREE_ADDRESSABLE (TREE_TYPE (destvar)))\n \t    return NULL_TREE;\n \n-\t  srctype = desttype;\n+\t  srctype = build_qualified_type (desttype, 0);\n \t  if (src_align < (int) TYPE_ALIGN (srctype))\n \t    {\n \t      if (AGGREGATE_TYPE_P (srctype)\n@@ -8980,7 +8982,7 @@ fold_builtin_memory_op (tree dest, tree src, tree len, tree type, bool ignore, i\n \t  if (TREE_ADDRESSABLE (TREE_TYPE (srcvar)))\n \t    return NULL_TREE;\n \n-\t  desttype = srctype;\n+\t  desttype = build_qualified_type (srctype, 0);\n \t  if (dest_align < (int) TYPE_ALIGN (desttype))\n \t    {\n \t      if (AGGREGATE_TYPE_P (desttype)"}, {"sha": "5f1c4228f26b83b187c101098c3e8093da92cd26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493aa551b29a64091d07e3a0736b5cd3b84e94a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493aa551b29a64091d07e3a0736b5cd3b84e94a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=493aa551b29a64091d07e3a0736b5cd3b84e94a4", "patch": "@@ -1,5 +1,8 @@\n 2009-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/38705\n+\t* g++.dg/torture/pr38705.C: New test.\n+\n \tPR c/38700\n \t* gcc.dg/pr38700.c: New test.\n "}, {"sha": "8058d3a3979166d35c2f79cb5a247dc8707c7871", "filename": "gcc/testsuite/g++.dg/torture/pr38705.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493aa551b29a64091d07e3a0736b5cd3b84e94a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr38705.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493aa551b29a64091d07e3a0736b5cd3b84e94a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr38705.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr38705.C?ref=493aa551b29a64091d07e3a0736b5cd3b84e94a4", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/38705\n+// { dg-do compile }\n+\n+typedef int T;\n+typedef __SIZE_TYPE__ size_t;\n+extern \"C\" void *memcpy (void *, const void *, size_t);\n+\n+void\n+foo (char *p, const int q)\n+{\n+  memcpy (p, &q, sizeof (int));\n+}\n+\n+struct S\n+{\n+  T t;\n+  int u;\n+  int bar () const;\n+  template <class T> void foo (const T &x) const {}\n+};\n+\n+int\n+S::bar () const\n+{\n+  foo (u);\n+  foo (t);\n+}"}]}