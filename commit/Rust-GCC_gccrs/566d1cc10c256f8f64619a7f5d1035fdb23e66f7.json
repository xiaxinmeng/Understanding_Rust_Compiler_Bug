{"sha": "566d1cc10c256f8f64619a7f5d1035fdb23e66f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY2ZDFjYzEwYzI1NmY4ZjY0NjE5YTdmNWQxMDM1ZmRiMjNlNjZmNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T11:29:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T11:29:28Z"}, "message": "[multiple changes]\n\n2009-11-30  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Document pragma Short_Circuit\n\n2009-11-30  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-conf.adb, prj-tree.adb, prj-tree.ads (Create_Attribute): Now set\n\tthe index either on the attribute or on its value, depending on the\n\tkind of the attribute. Done to match recent changes in Prj.PP that were\n\tnot synchronized with this function.\n\nFrom-SVN: r154789", "tree": {"sha": "7f7a170e1b8fa4ce7f697fa329b90ff8cc1a63df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f7a170e1b8fa4ce7f697fa329b90ff8cc1a63df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/566d1cc10c256f8f64619a7f5d1035fdb23e66f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566d1cc10c256f8f64619a7f5d1035fdb23e66f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/566d1cc10c256f8f64619a7f5d1035fdb23e66f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/comments", "author": null, "committer": null, "parents": [{"sha": "22dfe4d3125209128f9e8b5c6017dbbe62bdd559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22dfe4d3125209128f9e8b5c6017dbbe62bdd559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22dfe4d3125209128f9e8b5c6017dbbe62bdd559"}], "stats": {"total": 112, "additions": 85, "deletions": 27}, "files": [{"sha": "29b606b9b177aaf1cf914883267c27ac9cdd2f36", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=566d1cc10c256f8f64619a7f5d1035fdb23e66f7", "patch": "@@ -1,3 +1,14 @@\n+2009-11-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Document pragma Short_Circuit\n+\n+2009-11-30  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-conf.adb, prj-tree.adb, prj-tree.ads (Create_Attribute): Now set\n+\tthe index either on the attribute or on its value, depending on the\n+\tkind of the attribute. Done to match recent changes in Prj.PP that were\n+\tnot synchronized with this function.\n+\n 2009-11-30  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Fix typo."}, {"sha": "7744f155b560fcc230364237a4cfac8b7c1eccd1", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=566d1cc10c256f8f64619a7f5d1035fdb23e66f7", "patch": "@@ -182,6 +182,7 @@ Implementation Defined Pragmas\n * Pragma Pure_Function::\n * Pragma Restriction_Warnings::\n * Pragma Shared::\n+* Pragma Short_Circuit_And_Or::\n * Pragma Source_File_Name::\n * Pragma Source_File_Name_Project::\n * Pragma Source_Reference::\n@@ -794,6 +795,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Pure_Function::\n * Pragma Restriction_Warnings::\n * Pragma Shared::\n+* Pragma Short_Circuit_And_Or::\n * Pragma Source_File_Name::\n * Pragma Source_File_Name_Project::\n * Pragma Source_Reference::\n@@ -4254,6 +4256,20 @@ if the restriction is violated.\n This pragma is provided for compatibility with Ada 83. The syntax and\n semantics are identical to pragma Atomic.\n \n+@node Pragma Short_Circuit_And_Or\n+@unnumberedsec Pragma Short_Circuit_And_Or\n+@findex Short_Circuit_And_Or\n+\n+@noindent\n+This configuration pragma causes any occurrence of the AND operator applied to\n+operands of type Standard.Boolean to be short-circuited (i.e. the AND operator\n+is treated as if it were AND THEN). Or is similarly treated as OR ELSE. This\n+may be useful in the context of certification protocols requiring the use of\n+short-circuited logical operators. If this configuration pragma occurs locally\n+within the file being compiled, it applies only to the file being compiled.\n+There is no requirement that all units in a partition use this option.\n+\n+semantics are identical to pragma Atomic.\n @node Pragma Source_File_Name\n @unnumberedsec Pragma Source_File_Name\n @findex Source_File_Name"}, {"sha": "233f6db3f52fcd3d4c76528a7911d41734d1caa1", "filename": "gcc/ada/prj-conf.adb", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/gcc%2Fada%2Fprj-conf.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/gcc%2Fada%2Fprj-conf.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-conf.adb?ref=566d1cc10c256f8f64619a7f5d1035fdb23e66f7", "patch": "@@ -1189,8 +1189,9 @@ package body Prj.Conf is\n          Pkg   : Project_Node_Id := Empty_Node)\n       is\n          Attr : Project_Node_Id;\n-         Val  : Name_Id := No_Name;\n+         Val, Expr  : Name_Id := No_Name;\n          Parent : Project_Node_Id := Config_File;\n+         pragma Unreferenced (Attr);\n       begin\n          if Index /= \"\" then\n             Name_Len := Index'Length;\n@@ -1202,22 +1203,17 @@ package body Prj.Conf is\n             Parent := Pkg;\n          end if;\n \n+         Name_Len := Value'Length;\n+         Name_Buffer (1 .. Name_Len) := Value;\n+         Expr := Name_Find;\n+\n          Attr := Create_Attribute\n            (Tree       => Project_Tree,\n             Prj_Or_Pkg => Parent,\n             Name       => Name,\n             Index_Name => Val,\n-            Kind       => Prj.Single);\n-\n-         Name_Len := Value'Length;\n-         Name_Buffer (1 .. Name_Len) := Value;\n-         Val := Name_Find;\n-\n-         Set_Expression_Of\n-           (Attr, Project_Tree,\n-            Enclose_In_Expression\n-              (Create_Literal_String (Val, Project_Tree),\n-               Project_Tree));\n+            Kind       => Prj.Single,\n+            Value      => Create_Literal_String (Expr, Project_Tree));\n       end Create_Attribute;\n \n       Name   : Name_Id;"}, {"sha": "27e3520ce70bddbe942b7e0a168bd0830a05b524", "filename": "gcc/ada/prj-tree.adb", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/gcc%2Fada%2Fprj-tree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/gcc%2Fada%2Fprj-tree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.adb?ref=566d1cc10c256f8f64619a7f5d1035fdb23e66f7", "patch": "@@ -2966,12 +2966,17 @@ package body Prj.Tree is\n      (Node : Project_Node_Id;\n       Tree : Project_Node_Tree_Ref) return Project_Node_Id\n    is\n-      Expr : constant Project_Node_Id :=\n-               Default_Project_Node (Tree, N_Expression, Single);\n-   begin\n-      Set_First_Term (Expr, Tree, Default_Project_Node (Tree, N_Term, Single));\n-      Set_Current_Term (First_Term (Expr, Tree), Tree, Node);\n-      return Expr;\n+      Expr : Project_Node_Id;\n+   begin\n+      if Kind_Of (Node, Tree) /= N_Expression then\n+         Expr := Default_Project_Node (Tree, N_Expression, Single);\n+         Set_First_Term\n+           (Expr, Tree, Default_Project_Node (Tree, N_Term, Single));\n+         Set_Current_Term (First_Term (Expr, Tree), Tree, Node);\n+         return Expr;\n+      else\n+         return Node;\n+      end if;\n    end Enclose_In_Expression;\n \n    --------------------\n@@ -3032,7 +3037,8 @@ package body Prj.Tree is\n       Name       : Name_Id;\n       Index_Name : Name_Id       := No_Name;\n       Kind       : Variable_Kind := List;\n-      At_Index   : Integer       := 0) return Project_Node_Id\n+      At_Index   : Integer       := 0;\n+      Value      : Project_Node_Id := Empty_Node) return Project_Node_Id\n    is\n       Node : constant Project_Node_Id :=\n                Default_Project_Node (Tree, N_Attribute_Declaration, Kind);\n@@ -3041,14 +3047,11 @@ package body Prj.Tree is\n \n       Pkg      : Package_Node_Id;\n       Start_At : Attribute_Node_Id;\n+      Expr     : Project_Node_Id;\n \n    begin\n       Set_Name_Of (Node, Tree, Name);\n \n-      if At_Index /= 0 then\n-         Set_Source_Index_Of (Node, Tree, To => Int (At_Index));\n-      end if;\n-\n       if Index_Name /= No_Name then\n          Set_Associative_Array_Index_Of (Node, Tree, Index_Name);\n       end if;\n@@ -3073,6 +3076,29 @@ package body Prj.Tree is\n         Attribute_Kind_Of (Start_At) = Case_Insensitive_Associative_Array;\n       Tree.Project_Nodes.Table (Node).Flag1 := Case_Insensitive;\n \n+      if At_Index /= 0 then\n+         if Attribute_Kind_Of (Start_At) =\n+           Optional_Index_Associative_Array\n+         then\n+            --  Results in:   for Name (\"index\" at index) use \"value\";\n+            --  This is currently only used for executables\n+            Set_Source_Index_Of (Node, Tree, To => Int (At_Index));\n+         else\n+            --  Results in:   for Name (\"index\") use \"value\" at index;\n+\n+            --  ??? This limitation makes no sense, we should be able to\n+            --  set the source index on an expression\n+            pragma Assert (Kind_Of (Value, Tree) = N_Literal_String);\n+\n+            Set_Source_Index_Of (Value, Tree, To => Int (At_Index));\n+         end if;\n+      end if;\n+\n+      if Value /= Empty_Node then\n+         Expr := Enclose_In_Expression (Value, Tree);\n+         Set_Expression_Of (Node, Tree, Expr);\n+      end if;\n+\n       return Node;\n    end Create_Attribute;\n "}, {"sha": "f794c4aab697ceba53276d3d595c105e07022cd6", "filename": "gcc/ada/prj-tree.ads", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/gcc%2Fada%2Fprj-tree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/566d1cc10c256f8f64619a7f5d1035fdb23e66f7/gcc%2Fada%2Fprj-tree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.ads?ref=566d1cc10c256f8f64619a7f5d1035fdb23e66f7", "patch": "@@ -615,14 +615,22 @@ package Prj.Tree is\n       Name       : Name_Id;\n       Index_Name : Name_Id       := No_Name;\n       Kind       : Variable_Kind := List;\n-      At_Index   : Integer       := 0) return Project_Node_Id;\n+      At_Index   : Integer       := 0;\n+      Value      : Project_Node_Id := Empty_Node) return Project_Node_Id;\n    --  Create a new attribute. The new declaration is added at the end of the\n    --  declarative item list for Prj_Or_Pkg (a project or a package), but\n    --  before any package declaration). No addition is done if Prj_Or_Pkg is\n    --  Empty_Node. If Index_Name is not \"\", then if creates an attribute value\n    --  for a specific index. At_Index is used for the \" at <idx>\" in the naming\n-   --  exceptions. Use Set_Expression_Of to set the value of the attribute (in\n-   --  which case Enclose_In_Expression might be useful)\n+   --  exceptions.\n+   --  To set the value of the attribute, either provide a value for\n+   --  Value, or use Set_Expression_Of to set the value of the attribute\n+   --  (in which case Enclose_In_Expression might be useful). The former is\n+   --  recommended since it will more correctly handle cases where the index\n+   --  needs to be set on the expression rather than on the index of the\n+   --  attribute ('for Specification (\"unit\") use \"file\" at 3', versus\n+   --  'for Executable (\"file\" at 3) use \"name\"'). Value must be a\n+   --  N_String_Literal if an index will be added to it\n \n    function Create_Literal_String\n      (Str  : Namet.Name_Id;\n@@ -647,7 +655,8 @@ package Prj.Tree is\n    function Enclose_In_Expression\n      (Node : Project_Node_Id;\n       Tree : Project_Node_Tree_Ref) return Project_Node_Id;\n-   --  Enclose the Node inside a N_Expression node, and return this expression\n+   --  Enclose the Node inside a N_Expression node, and return this expression.\n+   --  This does nothing if Node is already a N_Expression\n \n    --------------------\n    -- Set Procedures --"}]}