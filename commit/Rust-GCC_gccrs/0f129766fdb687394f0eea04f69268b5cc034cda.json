{"sha": "0f129766fdb687394f0eea04f69268b5cc034cda", "node_id": "C_kwDOANBUbNoAKDBmMTI5NzY2ZmRiNjg3Mzk0ZjBlZWEwNGY2OTI2OGI1Y2MwMzRjZGE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-19T08:02:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-19T09:16:27Z"}, "message": "lto/106334 - relax assert during WPA tree merging\n\nThe dwarf2out map of tree to symbol + offset is populated too early\nwhen streaming in trees so that when WPA tree merging decides to\nrecycle them the mapping prevails and if we are unlucky the same\naddress is used for another tree with a symbol + offset DIE to\nrecord.  The following mitigates the resulting ICE by relaxing the\nassert, allowing re-use of a slot during WPA.  Delaying the register\nwould be better but it's already somewhat hairy and uglifying this\nfurther doesn't look too important right now.\n\n\tPR lto/106334\n\t* dwarf2out.cc (dwarf2out_register_external_die): Allow\n\tmap entry re-use during WPA.", "tree": {"sha": "dcb37a8c6cde95c824d901c330f75ae029c9f786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcb37a8c6cde95c824d901c330f75ae029c9f786"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f129766fdb687394f0eea04f69268b5cc034cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f129766fdb687394f0eea04f69268b5cc034cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f129766fdb687394f0eea04f69268b5cc034cda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f129766fdb687394f0eea04f69268b5cc034cda/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40f6e5912288256ee8ac41474f2dce7b6881c111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f6e5912288256ee8ac41474f2dce7b6881c111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f6e5912288256ee8ac41474f2dce7b6881c111"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "3ac39c1a5b0a83b050f12c68f7726bafbc145c8d", "filename": "gcc/dwarf2out.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f129766fdb687394f0eea04f69268b5cc034cda/gcc%2Fdwarf2out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f129766fdb687394f0eea04f69268b5cc034cda/gcc%2Fdwarf2out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.cc?ref=0f129766fdb687394f0eea04f69268b5cc034cda", "patch": "@@ -6069,7 +6069,11 @@ dwarf2out_register_external_die (tree decl, const char *sym,\n \n   if (!external_die_map)\n     external_die_map = hash_map<tree, sym_off_pair>::create_ggc (1000);\n-  gcc_checking_assert (!external_die_map->get (decl));\n+  /* When we do tree merging during WPA we can end up re-using GC memory\n+     as there's currently no way to unregister external DIEs.  Ideally\n+     we'd register them only after merging finished but allowing override\n+     here is easiest.  See PR106334.  */\n+  gcc_checking_assert (flag_wpa || !external_die_map->get (decl));\n   sym_off_pair p = { IDENTIFIER_POINTER (get_identifier (sym)), off };\n   external_die_map->put (decl, p);\n }"}]}