{"sha": "cf160a6309e7960cfa6699615a8a817613e1cdf1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2YxNjBhNjMwOWU3OTYwY2ZhNjY5OTYxNWE4YTgxNzYxM2UxY2RmMQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2000-09-14T22:48:20Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-09-14T22:48:20Z"}, "message": "* gcc.c-torture/execute/20000914-1.c: New test.\n\nFrom-SVN: r36420", "tree": {"sha": "2c387fa503361c92bb78cf205f74f0e08b8d131e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c387fa503361c92bb78cf205f74f0e08b8d131e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf160a6309e7960cfa6699615a8a817613e1cdf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf160a6309e7960cfa6699615a8a817613e1cdf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf160a6309e7960cfa6699615a8a817613e1cdf1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf160a6309e7960cfa6699615a8a817613e1cdf1/comments", "author": null, "committer": null, "parents": [{"sha": "ec1fb90e954fb49292b3e3d941db259045c92fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1fb90e954fb49292b3e3d941db259045c92fcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1fb90e954fb49292b3e3d941db259045c92fcf"}], "stats": {"total": 294, "additions": 294, "deletions": 0}, "files": [{"sha": "78eec4572571fdb0e18c66527960d7bfd0cd84a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf160a6309e7960cfa6699615a8a817613e1cdf1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf160a6309e7960cfa6699615a8a817613e1cdf1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf160a6309e7960cfa6699615a8a817613e1cdf1", "patch": "@@ -1,3 +1,7 @@\n+Thu Sep 14 16:48:49 2000  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* gcc.c-torture/execute/20000914-1.c: New test.\n+\n 2000-09-12  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* g++.other/inline13.C: New test."}, {"sha": "19212b2c76d31271ed911364ba52707f7e6e064d", "filename": "gcc/testsuite/gcc.c-torture/execute/20000914-1.c", "status": "added", "additions": 290, "deletions": 0, "changes": 290, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf160a6309e7960cfa6699615a8a817613e1cdf1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000914-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf160a6309e7960cfa6699615a8a817613e1cdf1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000914-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20000914-1.c?ref=cf160a6309e7960cfa6699615a8a817613e1cdf1", "patch": "@@ -0,0 +1,290 @@\n+enum tree_code {\n+ERROR_MARK,\n+IDENTIFIER_NODE,\n+OP_IDENTIFIER,\n+TREE_LIST,\n+TREE_VEC,\n+BLOCK,\n+VOID_TYPE,\n+INTEGER_TYPE,\n+REAL_TYPE,\n+COMPLEX_TYPE,\n+VECTOR_TYPE,\n+ENUMERAL_TYPE,\n+BOOLEAN_TYPE,\n+CHAR_TYPE,\n+POINTER_TYPE,\n+OFFSET_TYPE,\n+REFERENCE_TYPE,\n+METHOD_TYPE,\n+FILE_TYPE,\n+ARRAY_TYPE,\n+SET_TYPE,\n+RECORD_TYPE,\n+UNION_TYPE,\n+QUAL_UNION_TYPE,\n+FUNCTION_TYPE,\n+LANG_TYPE,\n+INTEGER_CST,\n+REAL_CST,\n+COMPLEX_CST,\n+STRING_CST,\n+FUNCTION_DECL,\n+LABEL_DECL,\n+CONST_DECL,\n+TYPE_DECL,\n+VAR_DECL,\n+PARM_DECL,\n+RESULT_DECL,\n+FIELD_DECL,\n+NAMESPACE_DECL,\n+COMPONENT_REF,\n+BIT_FIELD_REF,\n+INDIRECT_REF,\n+BUFFER_REF,\n+ARRAY_REF,\n+CONSTRUCTOR,\n+COMPOUND_EXPR,\n+MODIFY_EXPR,\n+INIT_EXPR,\n+TARGET_EXPR,\n+COND_EXPR,\n+BIND_EXPR,\n+CALL_EXPR,\n+METHOD_CALL_EXPR,\n+WITH_CLEANUP_EXPR,\n+CLEANUP_POINT_EXPR,\n+PLACEHOLDER_EXPR,\n+WITH_RECORD_EXPR,\n+PLUS_EXPR,\n+MINUS_EXPR,\n+MULT_EXPR,\n+TRUNC_DIV_EXPR,\n+CEIL_DIV_EXPR,\n+FLOOR_DIV_EXPR,\n+ROUND_DIV_EXPR,\n+TRUNC_MOD_EXPR,\n+CEIL_MOD_EXPR,\n+FLOOR_MOD_EXPR,\n+ROUND_MOD_EXPR,\n+RDIV_EXPR,\n+EXACT_DIV_EXPR,\n+FIX_TRUNC_EXPR,\n+FIX_CEIL_EXPR,\n+FIX_FLOOR_EXPR,\n+FIX_ROUND_EXPR,\n+FLOAT_EXPR,\n+EXPON_EXPR,\n+NEGATE_EXPR,\n+MIN_EXPR,\n+MAX_EXPR,\n+ABS_EXPR,\n+FFS_EXPR,\n+LSHIFT_EXPR,\n+RSHIFT_EXPR,\n+LROTATE_EXPR,\n+RROTATE_EXPR,\n+BIT_IOR_EXPR,\n+BIT_XOR_EXPR,\n+BIT_AND_EXPR,\n+BIT_ANDTC_EXPR,\n+BIT_NOT_EXPR,\n+TRUTH_ANDIF_EXPR,\n+TRUTH_ORIF_EXPR,\n+TRUTH_AND_EXPR,\n+TRUTH_OR_EXPR,\n+TRUTH_XOR_EXPR,\n+TRUTH_NOT_EXPR,\n+LT_EXPR,\n+LE_EXPR,\n+GT_EXPR,\n+GE_EXPR,\n+EQ_EXPR,\n+NE_EXPR,\n+UNORDERED_EXPR,\n+ORDERED_EXPR,\n+UNLT_EXPR,\n+UNLE_EXPR,\n+UNGT_EXPR,\n+UNGE_EXPR,\n+UNEQ_EXPR,\n+IN_EXPR,\n+SET_LE_EXPR,\n+CARD_EXPR,\n+RANGE_EXPR,\n+CONVERT_EXPR,\n+NOP_EXPR,\n+NON_LVALUE_EXPR,\n+SAVE_EXPR,\n+UNSAVE_EXPR,\n+RTL_EXPR,\n+ADDR_EXPR,\n+REFERENCE_EXPR,\n+ENTRY_VALUE_EXPR,\n+COMPLEX_EXPR,\n+CONJ_EXPR,\n+REALPART_EXPR,\n+IMAGPART_EXPR,\n+PREDECREMENT_EXPR,\n+PREINCREMENT_EXPR,\n+POSTDECREMENT_EXPR,\n+POSTINCREMENT_EXPR,\n+VA_ARG_EXPR,\n+TRY_CATCH_EXPR,\n+TRY_FINALLY_EXPR,\n+GOTO_SUBROUTINE_EXPR,\n+POPDHC_EXPR,\n+POPDCC_EXPR,\n+LABEL_EXPR,\n+GOTO_EXPR,\n+RETURN_EXPR,\n+EXIT_EXPR,\n+LOOP_EXPR,\n+LABELED_BLOCK_EXPR,\n+EXIT_BLOCK_EXPR,\n+EXPR_WITH_FILE_LOCATION,\n+SWITCH_EXPR,\n+  LAST_AND_UNUSED_TREE_CODE\n+};\n+typedef union tree_node *tree;\n+struct tree_common\n+{\n+  union tree_node *chain;\n+  union tree_node *type;\n+  enum tree_code code : 8;\n+  unsigned side_effects_flag : 1;\n+  unsigned constant_flag : 1;\n+  unsigned permanent_flag : 1;\n+  unsigned addressable_flag : 1;\n+  unsigned volatile_flag : 1;\n+  unsigned readonly_flag : 1;\n+  unsigned unsigned_flag : 1;\n+  unsigned asm_written_flag: 1;\n+  unsigned used_flag : 1;\n+  unsigned nothrow_flag : 1;\n+  unsigned static_flag : 1;\n+  unsigned public_flag : 1;\n+  unsigned private_flag : 1;\n+  unsigned protected_flag : 1;\n+  unsigned bounded_flag : 1;\n+  unsigned lang_flag_0 : 1;\n+  unsigned lang_flag_1 : 1;\n+  unsigned lang_flag_2 : 1;\n+  unsigned lang_flag_3 : 1;\n+  unsigned lang_flag_4 : 1;\n+  unsigned lang_flag_5 : 1;\n+  unsigned lang_flag_6 : 1;\n+};\n+union tree_node\n+{\n+  struct tree_common common;\n+ };\n+enum c_tree_code {\n+  C_DUMMY_TREE_CODE = LAST_AND_UNUSED_TREE_CODE,\n+SRCLOC,\n+SIZEOF_EXPR,\n+ARROW_EXPR,\n+ALIGNOF_EXPR,\n+EXPR_STMT,\n+COMPOUND_STMT,\n+DECL_STMT,\n+IF_STMT,\n+FOR_STMT,\n+WHILE_STMT,\n+DO_STMT,\n+RETURN_STMT,\n+BREAK_STMT,\n+CONTINUE_STMT,\n+SWITCH_STMT,\n+GOTO_STMT,\n+LABEL_STMT,\n+ASM_STMT,\n+SCOPE_STMT,\n+CASE_LABEL,\n+STMT_EXPR,\n+  LAST_C_TREE_CODE\n+};\n+enum cplus_tree_code {\n+  CP_DUMMY_TREE_CODE = LAST_C_TREE_CODE,\n+OFFSET_REF,\n+PTRMEM_CST,\n+NEW_EXPR,\n+VEC_NEW_EXPR,\n+DELETE_EXPR,\n+VEC_DELETE_EXPR,\n+SCOPE_REF,\n+MEMBER_REF,\n+TYPE_EXPR,\n+AGGR_INIT_EXPR,\n+THROW_EXPR,\n+EMPTY_CLASS_EXPR,\n+TEMPLATE_DECL,\n+TEMPLATE_PARM_INDEX,\n+TEMPLATE_TYPE_PARM,\n+TEMPLATE_TEMPLATE_PARM,\n+BOUND_TEMPLATE_TEMPLATE_PARM,\n+TYPENAME_TYPE,\n+TYPEOF_TYPE,\n+USING_DECL,\n+DEFAULT_ARG,\n+TEMPLATE_ID_EXPR,\n+CPLUS_BINDING,\n+OVERLOAD,\n+WRAPPER,\n+LOOKUP_EXPR,\n+FUNCTION_NAME,\n+MODOP_EXPR,\n+CAST_EXPR,\n+REINTERPRET_CAST_EXPR,\n+CONST_CAST_EXPR,\n+STATIC_CAST_EXPR,\n+DYNAMIC_CAST_EXPR,\n+DOTSTAR_EXPR,\n+TYPEID_EXPR,\n+PSEUDO_DTOR_EXPR,\n+SUBOBJECT,\n+CTOR_STMT,\n+CLEANUP_STMT,\n+START_CATCH_STMT,\n+CTOR_INITIALIZER,\n+RETURN_INIT,\n+TRY_BLOCK,\n+HANDLER,\n+TAG_DEFN,\n+IDENTITY_CONV,\n+LVALUE_CONV,\n+QUAL_CONV,\n+STD_CONV,\n+PTR_CONV,\n+PMEM_CONV,\n+BASE_CONV,\n+REF_BIND,\n+USER_CONV,\n+AMBIG_CONV,\n+RVALUE_CONV,\n+  LAST_CPLUS_TREE_CODE\n+};\n+\n+blah(){}\n+\n+convert_like_real (convs)\n+     tree convs;\n+{\n+  switch (((enum tree_code) (convs)->common.code))\n+    {\n+    case AMBIG_CONV:\n+      return blah();\n+    default:\n+      break;\n+    };\n+   abort ();\n+}\n+\n+main()\n+{\n+  tree convs = (void *)malloc (sizeof (struct tree_common));;\n+\n+  convs->common.code = AMBIG_CONV;\n+  convert_like_real (convs);\n+  exit (0);\n+}"}]}