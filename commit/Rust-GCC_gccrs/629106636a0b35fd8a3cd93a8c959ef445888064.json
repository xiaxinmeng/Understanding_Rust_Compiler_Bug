{"sha": "629106636a0b35fd8a3cd93a8c959ef445888064", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI5MTA2NjM2YTBiMzVmZDhhM2NkOTNhOGM5NTllZjQ0NTg4ODA2NA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-08-08T02:57:48Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-08-08T02:57:48Z"}, "message": "pa.c (update_total_code_bytes): Use new macro IN_NAMED_SECTION_P.\n\n\t* pa.c (update_total_code_bytes): Use new macro IN_NAMED_SECTION_P.\n\t(attr_length_millicode_call): Likewise.\n\t(attr_length_call): Likewise.  Revise some maximum insn lengths.\n\t(attr_length_indirect_call): Likewise.\n\t(output_call): Fix thinko that added extra nop.\n\t* pa.h (IN_NAMED_SECTION_P): Define.\n\nFrom-SVN: r70241", "tree": {"sha": "d6e7f8e77c84ff946dd1a2fdcce555e0585406cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6e7f8e77c84ff946dd1a2fdcce555e0585406cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/629106636a0b35fd8a3cd93a8c959ef445888064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629106636a0b35fd8a3cd93a8c959ef445888064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629106636a0b35fd8a3cd93a8c959ef445888064", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629106636a0b35fd8a3cd93a8c959ef445888064/comments", "author": null, "committer": null, "parents": [{"sha": "cb99b61ac974b2f396f3020feea24f124438376d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb99b61ac974b2f396f3020feea24f124438376d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb99b61ac974b2f396f3020feea24f124438376d"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "3930c96be26e3178438d12abf68624bcf89db8f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629106636a0b35fd8a3cd93a8c959ef445888064/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629106636a0b35fd8a3cd93a8c959ef445888064/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=629106636a0b35fd8a3cd93a8c959ef445888064", "patch": "@@ -1,5 +1,12 @@\n 2003-08-07  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n+\t* pa.c (update_total_code_bytes): Use new macro IN_NAMED_SECTION_P.\n+\t(attr_length_millicode_call): Likewise.\n+\t(attr_length_call): Likewise.  Revise some maximum insn lengths.\n+\t(attr_length_indirect_call): Likewise.\n+\t(output_call): Fix thinko that added extra nop.\n+\t* pa.h (IN_NAMED_SECTION_P): Define.\n+\n \tPR c++/11712\n \t* pa-hpux.h, pa-hpux10.h, pa-hpux11.h (TARGET_OS_CPP_BUILTINS): Define\n \t__STDC_EXT__ when using C++ dialect."}, {"sha": "acfe4e0ff8d708d16db5314a4cd447c498f5751f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629106636a0b35fd8a3cd93a8c959ef445888064/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629106636a0b35fd8a3cd93a8c959ef445888064/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=629106636a0b35fd8a3cd93a8c959ef445888064", "patch": "@@ -3694,7 +3694,7 @@ update_total_code_bytes (nbytes)\n      int nbytes;\n {\n   if ((TARGET_PORTABLE_RUNTIME || !TARGET_GAS || !TARGET_SOM)\n-      && in_text_section ())\n+      && !IN_NAMED_SECTION_P (cfun->decl))\n     {\n       if (INSN_ADDRESSES_SET_P ())\n \t{\n@@ -6571,7 +6571,7 @@ attr_length_millicode_call (insn)\n      rtx insn;\n {\n   unsigned long distance = -1;\n-  unsigned long total = in_text_section () ? total_code_bytes : 0;\n+  unsigned long total = IN_NAMED_SECTION_P (cfun->decl) ? 0 : total_code_bytes;\n \n   if (INSN_ADDRESSES_SET_P ())\n     {\n@@ -6758,17 +6758,18 @@ output_millicode_call (insn, call_dest)\n \n /* Return the attribute length of the call instruction INSN.  The SIBCALL\n    flag indicates whether INSN is a regular call or a sibling call.  The\n-   length must match the code generated by output_call.  We include the delay\n-   slot in the returned length as it is better to over estimate the length\n-   than to under estimate it.  */\n+   length returned must be longer than the code generated by output_call.\n+   When the target supports jumps in the delay slot, we need an extra\n+   four bytes to handle the situation where the jump can't reach its\n+   destination.  */\n \n int\n attr_length_call (insn, sibcall)\n      rtx insn;\n      int sibcall;\n {\n   unsigned long distance = -1;\n-  unsigned long total = in_text_section ()? total_code_bytes : 0;\n+  unsigned long total = IN_NAMED_SECTION_P (cfun->decl) ? 0 : total_code_bytes;\n \n   if (INSN_ADDRESSES_SET_P ())\n     {\n@@ -6793,7 +6794,7 @@ attr_length_call (insn, sibcall)\n \treturn 8;\n \n       if (TARGET_LONG_ABS_CALL && !flag_pic)\n-\treturn 12;\n+\treturn 16;\n \n       if ((TARGET_SOM && TARGET_LONG_PIC_SDIFF_CALL)\n \t  || (TARGET_GAS && TARGET_LONG_PIC_PCREL_CALL))\n@@ -6805,24 +6806,27 @@ attr_length_call (insn, sibcall)\n \t}\n       else\n \t{\n-\t  int length = 0;\n+\t  int length = 28;\n \n \t  if (TARGET_SOM)\n \t    length += length_fp_args (insn);\n \n \t  if (flag_pic)\n \t    length += 4;\n \n+\t  if (!sibcall)\n+\t    length += 4;\n+\n \t  if (TARGET_PA_20)\n-\t    return (length + 32);\n+\t    return length;\n \n \t  if (!TARGET_NO_SPACE_REGS)\n \t    length += 8;\n \n \t  if (!sibcall)\n \t    length += 8;\n \n-\t  return (length + 32);\n+\t  return length;\n \t}\n     }\n }\n@@ -7077,7 +7081,7 @@ output_call (insn, call_dest, sibcall)\n \t}\n     }\n \n-  if (seq_length == 0 || (delay_insn_deleted && !delay_slot_filled))\n+  if (!delay_slot_filled && (seq_length == 0 || delay_insn_deleted))\n     output_asm_insn (\"nop\", xoperands);\n \n   /* We are done if there isn't a jump in the delay slot.  */\n@@ -7133,7 +7137,7 @@ attr_length_indirect_call (insn)\n      rtx insn;\n {\n   unsigned long distance = -1;\n-  unsigned long total = in_text_section () ? total_code_bytes : 0;\n+  unsigned long total = IN_NAMED_SECTION_P (cfun->decl) ? 0 : total_code_bytes;\n \n   if (INSN_ADDRESSES_SET_P ())\n     {"}, {"sha": "5293c7cbc219ead3023bfb3f672ce2c11a611a62", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629106636a0b35fd8a3cd93a8c959ef445888064/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629106636a0b35fd8a3cd93a8c959ef445888064/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=629106636a0b35fd8a3cd93a8c959ef445888064", "patch": "@@ -1515,6 +1515,11 @@ do { \t\t\t\t\t\t\t\t\t\\\n \f\n #define TARGET_ASM_SELECT_SECTION  pa_select_section\n    \n+/* Return a nonzero value if DECL has a section attribute.  */\n+#define IN_NAMED_SECTION_P(DECL) \\\n+  ((TREE_CODE (DECL) == FUNCTION_DECL || TREE_CODE (DECL) == VAR_DECL) \\\n+   && DECL_SECTION_NAME (DECL) != NULL_TREE)\n+\n /* Define this macro if references to a symbol must be treated\n    differently depending on something about the variable or\n    function named by the symbol (such as what section it is in)."}]}