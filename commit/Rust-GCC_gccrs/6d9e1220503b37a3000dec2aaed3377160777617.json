{"sha": "6d9e1220503b37a3000dec2aaed3377160777617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5ZTEyMjA1MDNiMzdhMzAwMGRlYzJhYWVkMzM3NzE2MDc3NzYxNw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-05T19:47:05Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-05T19:47:05Z"}, "message": "sh.c (builtin_description): Add is_enabled member.\n\n\t* config/sh/sh.c (builtin_description): Add is_enabled member.\n\t(shmedia_builtin_p): New function.\n\t(bdesc): Use shmedia_builtin_p for existing built-ins.\n\t(sh_media_init_builtins, sh_init_builtins): Merge into single function\n\tsh_init_builtins.  Add is_enabled checking.  Move variable declarations\n\tto where they are actually used.\n\t(sh_media_builtin_decl, sh_builtin_decl): Merge into single function\n\tsh_builtin_decl.  Add is_enabled checking.\n\t(sh_expand_builtin): Move variable declarations to where they are\n\tactually used.\n\nFrom-SVN: r192142", "tree": {"sha": "36d76af4f78855ed68e43347a5ad809b5842e821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d76af4f78855ed68e43347a5ad809b5842e821"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d9e1220503b37a3000dec2aaed3377160777617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9e1220503b37a3000dec2aaed3377160777617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9e1220503b37a3000dec2aaed3377160777617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9e1220503b37a3000dec2aaed3377160777617/comments", "author": null, "committer": null, "parents": [{"sha": "0d23cf7a4f9609763b600a7e9edf81e78e3f7a55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d23cf7a4f9609763b600a7e9edf81e78e3f7a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d23cf7a4f9609763b600a7e9edf81e78e3f7a55"}], "stats": {"total": 340, "additions": 213, "deletions": 127}, "files": [{"sha": "91fbd0d2484a5d39e3d83044fa7e8b57204cf466", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e1220503b37a3000dec2aaed3377160777617/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e1220503b37a3000dec2aaed3377160777617/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d9e1220503b37a3000dec2aaed3377160777617", "patch": "@@ -1,3 +1,16 @@\n+2012-10-05  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (builtin_description): Add is_enabled member.\n+\t(shmedia_builtin_p): New function.\n+\t(bdesc): Use shmedia_builtin_p for existing built-ins.\n+\t(sh_media_init_builtins, sh_init_builtins): Merge into single function\n+\tsh_init_builtins.  Add is_enabled checking.  Move variable declarations\n+\tto where they are actually used.\n+\t(sh_media_builtin_decl, sh_builtin_decl): Merge into single function\n+\tsh_builtin_decl.  Add is_enabled checking.\n+\t(sh_expand_builtin): Move variable declarations to where they are\n+\tactually used.\n+\n 2012-10-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-inline.c (expand_call_inline): Move VAR_DECLs with"}, {"sha": "35998793a89a801563f25c019dc3f8c87f93a0aa", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 200, "deletions": 127, "changes": 327, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9e1220503b37a3000dec2aaed3377160777617/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9e1220503b37a3000dec2aaed3377160777617/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6d9e1220503b37a3000dec2aaed3377160777617", "patch": "@@ -243,8 +243,6 @@ static bool sh_ms_bitfield_layout_p (const_tree);\n \n static void sh_init_builtins (void);\n static tree sh_builtin_decl (unsigned, bool);\n-static void sh_media_init_builtins (void);\n-static tree sh_media_builtin_decl (unsigned, bool);\n static rtx sh_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n static void sh_output_mi_thunk (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n static void sh_file_start (void);\n@@ -11510,12 +11508,19 @@ sh_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n \n struct builtin_description\n {\n+  bool (* const is_enabled) (void);\n   const enum insn_code icode;\n   const char *const name;\n   int signature;\n   tree fndecl;\n };\n \n+static bool\n+shmedia_builtin_p (void)\n+{\n+  return TARGET_SHMEDIA;\n+}\n+\n /* describe number and signedness of arguments; arg[0] == result\n    (1: unsigned, 2: signed, 4: don't care, 8: pointer 0: no argument */\n /* 9: 64-bit pointer, 10: 32-bit pointer */\n@@ -11582,103 +11587,189 @@ static const char signature_args[][4] =\n /* nsb: takes long long arg, returns unsigned char.  */\n static struct builtin_description bdesc[] =\n {\n-  { CODE_FOR_absv2si2,\t\"__builtin_absv2si2\", SH_BLTIN_V2SI2, 0 },\n-  { CODE_FOR_absv4hi2,\t\"__builtin_absv4hi2\", SH_BLTIN_V4HI2, 0 },\n-  { CODE_FOR_addv2si3,\t\"__builtin_addv2si3\", SH_BLTIN_V2SI3, 0 },\n-  { CODE_FOR_addv4hi3,\t\"__builtin_addv4hi3\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_ssaddv2si3,\"__builtin_ssaddv2si3\", SH_BLTIN_V2SI3, 0 },\n-  { CODE_FOR_usaddv8qi3,\"__builtin_usaddv8qi3\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_ssaddv4hi3,\"__builtin_ssaddv4hi3\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_alloco_i,\t\"__builtin_sh_media_ALLOCO\", SH_BLTIN_PV, 0 },\n-  { CODE_FOR_negcmpeqv8qi,\"__builtin_sh_media_MCMPEQ_B\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_negcmpeqv2si,\"__builtin_sh_media_MCMPEQ_L\", SH_BLTIN_V2SI3, 0 },\n-  { CODE_FOR_negcmpeqv4hi,\"__builtin_sh_media_MCMPEQ_W\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_negcmpgtuv8qi,\"__builtin_sh_media_MCMPGT_UB\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_negcmpgtv2si,\"__builtin_sh_media_MCMPGT_L\", SH_BLTIN_V2SI3, 0 },\n-  { CODE_FOR_negcmpgtv4hi,\"__builtin_sh_media_MCMPGT_W\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_mcmv,\t\"__builtin_sh_media_MCMV\", SH_BLTIN_UUUU, 0 },\n-  { CODE_FOR_mcnvs_lw,\t\"__builtin_sh_media_MCNVS_LW\", SH_BLTIN_3, 0 },\n-  { CODE_FOR_mcnvs_wb,\t\"__builtin_sh_media_MCNVS_WB\", SH_BLTIN_V4HI2V8QI, 0 },\n-  { CODE_FOR_mcnvs_wub,\t\"__builtin_sh_media_MCNVS_WUB\", SH_BLTIN_V4HI2V8QI, 0 },\n-  { CODE_FOR_mextr1,\t\"__builtin_sh_media_MEXTR1\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_mextr2,\t\"__builtin_sh_media_MEXTR2\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_mextr3,\t\"__builtin_sh_media_MEXTR3\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_mextr4,\t\"__builtin_sh_media_MEXTR4\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_mextr5,\t\"__builtin_sh_media_MEXTR5\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_mextr6,\t\"__builtin_sh_media_MEXTR6\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_mextr7,\t\"__builtin_sh_media_MEXTR7\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_mmacfx_wl,\t\"__builtin_sh_media_MMACFX_WL\", SH_BLTIN_MAC_HISI, 0 },\n-  { CODE_FOR_mmacnfx_wl,\"__builtin_sh_media_MMACNFX_WL\", SH_BLTIN_MAC_HISI, 0 },\n-  { CODE_FOR_mulv2si3,\t\"__builtin_mulv2si3\", SH_BLTIN_V2SI3, 0 },\n-  { CODE_FOR_mulv4hi3,\t\"__builtin_mulv4hi3\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_mmulfx_l,\t\"__builtin_sh_media_MMULFX_L\", SH_BLTIN_V2SI3, 0 },\n-  { CODE_FOR_mmulfx_w,\t\"__builtin_sh_media_MMULFX_W\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_mmulfxrp_w,\"__builtin_sh_media_MMULFXRP_W\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_mmulhi_wl,\t\"__builtin_sh_media_MMULHI_WL\", SH_BLTIN_V4HI2V2SI, 0 },\n-  { CODE_FOR_mmullo_wl,\t\"__builtin_sh_media_MMULLO_WL\", SH_BLTIN_V4HI2V2SI, 0 },\n-  { CODE_FOR_mmulsum_wq,\"__builtin_sh_media_MMULSUM_WQ\", SH_BLTIN_XXUU, 0 },\n-  { CODE_FOR_mperm_w,\t\"__builtin_sh_media_MPERM_W\", SH_BLTIN_SH_HI, 0 },\n-  { CODE_FOR_msad_ubq,\t\"__builtin_sh_media_MSAD_UBQ\", SH_BLTIN_XXUU, 0 },\n-  { CODE_FOR_mshalds_l,\t\"__builtin_sh_media_MSHALDS_L\", SH_BLTIN_SH_SI, 0 },\n-  { CODE_FOR_mshalds_w,\t\"__builtin_sh_media_MSHALDS_W\", SH_BLTIN_SH_HI, 0 },\n-  { CODE_FOR_ashrv2si3,\t\"__builtin_ashrv2si3\", SH_BLTIN_SH_SI, 0 },\n-  { CODE_FOR_ashrv4hi3,\t\"__builtin_ashrv4hi3\", SH_BLTIN_SH_HI, 0 },\n-  { CODE_FOR_mshards_q,\t\"__builtin_sh_media_MSHARDS_Q\", SH_BLTIN_SUS, 0 },\n-  { CODE_FOR_mshfhi_b,\t\"__builtin_sh_media_MSHFHI_B\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_mshfhi_l,\t\"__builtin_sh_media_MSHFHI_L\", SH_BLTIN_V2SI3, 0 },\n-  { CODE_FOR_mshfhi_w,\t\"__builtin_sh_media_MSHFHI_W\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_mshflo_b,\t\"__builtin_sh_media_MSHFLO_B\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_mshflo_l,\t\"__builtin_sh_media_MSHFLO_L\", SH_BLTIN_V2SI3, 0 },\n-  { CODE_FOR_mshflo_w,\t\"__builtin_sh_media_MSHFLO_W\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_ashlv2si3,\t\"__builtin_ashlv2si3\", SH_BLTIN_SH_SI, 0 },\n-  { CODE_FOR_ashlv4hi3,\t\"__builtin_ashlv4hi3\", SH_BLTIN_SH_HI, 0 },\n-  { CODE_FOR_lshrv2si3,\t\"__builtin_lshrv2si3\", SH_BLTIN_SH_SI, 0 },\n-  { CODE_FOR_lshrv4hi3,\t\"__builtin_lshrv4hi3\", SH_BLTIN_SH_HI, 0 },\n-  { CODE_FOR_subv2si3,\t\"__builtin_subv2si3\", SH_BLTIN_V2SI3, 0 },\n-  { CODE_FOR_subv4hi3,\t\"__builtin_subv4hi3\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_sssubv2si3,\"__builtin_sssubv2si3\", SH_BLTIN_V2SI3, 0 },\n-  { CODE_FOR_ussubv8qi3,\"__builtin_ussubv8qi3\", SH_BLTIN_V8QI3, 0 },\n-  { CODE_FOR_sssubv4hi3,\"__builtin_sssubv4hi3\", SH_BLTIN_V4HI3, 0 },\n-  { CODE_FOR_fcosa_s,\t\"__builtin_sh_media_FCOSA_S\", SH_BLTIN_SISF, 0 },\n-  { CODE_FOR_fsina_s,\t\"__builtin_sh_media_FSINA_S\", SH_BLTIN_SISF, 0 },\n-  { CODE_FOR_fipr,\t\"__builtin_sh_media_FIPR_S\", SH_BLTIN_3, 0 },\n-  { CODE_FOR_ftrv,\t\"__builtin_sh_media_FTRV_S\", SH_BLTIN_3, 0 },\n-  { CODE_FOR_sqrtdf2,\t\"__builtin_sh_media_FSQRT_D\", SH_BLTIN_2, 0 },\n-  { CODE_FOR_sqrtsf2,\t\"__builtin_sh_media_FSQRT_S\", SH_BLTIN_2, 0 },\n-  { CODE_FOR_fsrra_s,\t\"__builtin_sh_media_FSRRA_S\", SH_BLTIN_2, 0 },\n-  { CODE_FOR_ldhi_l,\t\"__builtin_sh_media_LDHI_L\", SH_BLTIN_LDUA_L, 0 },\n-  { CODE_FOR_ldhi_q,\t\"__builtin_sh_media_LDHI_Q\", SH_BLTIN_LDUA_Q, 0 },\n-  { CODE_FOR_ldlo_l,\t\"__builtin_sh_media_LDLO_L\", SH_BLTIN_LDUA_L, 0 },\n-  { CODE_FOR_ldlo_q,\t\"__builtin_sh_media_LDLO_Q\", SH_BLTIN_LDUA_Q, 0 },\n-  { CODE_FOR_sthi_l,\t\"__builtin_sh_media_STHI_L\", SH_BLTIN_STUA_L, 0 },\n-  { CODE_FOR_sthi_q,\t\"__builtin_sh_media_STHI_Q\", SH_BLTIN_STUA_Q, 0 },\n-  { CODE_FOR_stlo_l,\t\"__builtin_sh_media_STLO_L\", SH_BLTIN_STUA_L, 0 },\n-  { CODE_FOR_stlo_q,\t\"__builtin_sh_media_STLO_Q\", SH_BLTIN_STUA_Q, 0 },\n-  { CODE_FOR_ldhi_l64,\t\"__builtin_sh_media_LDHI_L\", SH_BLTIN_LDUA_L64, 0 },\n-  { CODE_FOR_ldhi_q64,\t\"__builtin_sh_media_LDHI_Q\", SH_BLTIN_LDUA_Q64, 0 },\n-  { CODE_FOR_ldlo_l64,\t\"__builtin_sh_media_LDLO_L\", SH_BLTIN_LDUA_L64, 0 },\n-  { CODE_FOR_ldlo_q64,\t\"__builtin_sh_media_LDLO_Q\", SH_BLTIN_LDUA_Q64, 0 },\n-  { CODE_FOR_sthi_l64,\t\"__builtin_sh_media_STHI_L\", SH_BLTIN_STUA_L64, 0 },\n-  { CODE_FOR_sthi_q64,\t\"__builtin_sh_media_STHI_Q\", SH_BLTIN_STUA_Q64, 0 },\n-  { CODE_FOR_stlo_l64,\t\"__builtin_sh_media_STLO_L\", SH_BLTIN_STUA_L64, 0 },\n-  { CODE_FOR_stlo_q64,\t\"__builtin_sh_media_STLO_Q\", SH_BLTIN_STUA_Q64, 0 },\n-  { CODE_FOR_nsb,\t\"__builtin_sh_media_NSB\", SH_BLTIN_SU, 0 },\n-  { CODE_FOR_byterev,\t\"__builtin_sh_media_BYTEREV\", SH_BLTIN_2, 0 },\n-  { CODE_FOR_prefetch,\t\"__builtin_sh_media_PREFO\", SH_BLTIN_PSSV, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_absv2si2,\t\"__builtin_absv2si2\", SH_BLTIN_V2SI2, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_absv4hi2,\t\"__builtin_absv4hi2\", SH_BLTIN_V4HI2, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_addv2si3,\t\"__builtin_addv2si3\", SH_BLTIN_V2SI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_addv4hi3,\t\"__builtin_addv4hi3\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ssaddv2si3,\"__builtin_ssaddv2si3\", SH_BLTIN_V2SI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_usaddv8qi3,\"__builtin_usaddv8qi3\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ssaddv4hi3,\"__builtin_ssaddv4hi3\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_alloco_i,\t\"__builtin_sh_media_ALLOCO\", SH_BLTIN_PV, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_negcmpeqv8qi,\"__builtin_sh_media_MCMPEQ_B\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_negcmpeqv2si,\"__builtin_sh_media_MCMPEQ_L\", SH_BLTIN_V2SI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_negcmpeqv4hi,\"__builtin_sh_media_MCMPEQ_W\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_negcmpgtuv8qi,\"__builtin_sh_media_MCMPGT_UB\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_negcmpgtv2si,\"__builtin_sh_media_MCMPGT_L\", SH_BLTIN_V2SI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_negcmpgtv4hi,\"__builtin_sh_media_MCMPGT_W\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mcmv,\t\"__builtin_sh_media_MCMV\", SH_BLTIN_UUUU, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mcnvs_lw,\t\"__builtin_sh_media_MCNVS_LW\", SH_BLTIN_3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mcnvs_wb,\t\"__builtin_sh_media_MCNVS_WB\", SH_BLTIN_V4HI2V8QI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mcnvs_wub,\t\"__builtin_sh_media_MCNVS_WUB\", SH_BLTIN_V4HI2V8QI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mextr1,\t\"__builtin_sh_media_MEXTR1\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mextr2,\t\"__builtin_sh_media_MEXTR2\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mextr3,\t\"__builtin_sh_media_MEXTR3\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mextr4,\t\"__builtin_sh_media_MEXTR4\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mextr5,\t\"__builtin_sh_media_MEXTR5\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mextr6,\t\"__builtin_sh_media_MEXTR6\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mextr7,\t\"__builtin_sh_media_MEXTR7\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mmacfx_wl,\t\"__builtin_sh_media_MMACFX_WL\", SH_BLTIN_MAC_HISI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mmacnfx_wl,\"__builtin_sh_media_MMACNFX_WL\", SH_BLTIN_MAC_HISI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mulv2si3,\t\"__builtin_mulv2si3\", SH_BLTIN_V2SI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mulv4hi3,\t\"__builtin_mulv4hi3\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mmulfx_l,\t\"__builtin_sh_media_MMULFX_L\", SH_BLTIN_V2SI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mmulfx_w,\t\"__builtin_sh_media_MMULFX_W\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mmulfxrp_w,\"__builtin_sh_media_MMULFXRP_W\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mmulhi_wl,\t\"__builtin_sh_media_MMULHI_WL\", SH_BLTIN_V4HI2V2SI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mmullo_wl,\t\"__builtin_sh_media_MMULLO_WL\", SH_BLTIN_V4HI2V2SI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mmulsum_wq,\"__builtin_sh_media_MMULSUM_WQ\", SH_BLTIN_XXUU, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mperm_w,\t\"__builtin_sh_media_MPERM_W\", SH_BLTIN_SH_HI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_msad_ubq,\t\"__builtin_sh_media_MSAD_UBQ\", SH_BLTIN_XXUU, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mshalds_l,\t\"__builtin_sh_media_MSHALDS_L\", SH_BLTIN_SH_SI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mshalds_w,\t\"__builtin_sh_media_MSHALDS_W\", SH_BLTIN_SH_HI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ashrv2si3,\t\"__builtin_ashrv2si3\", SH_BLTIN_SH_SI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ashrv4hi3,\t\"__builtin_ashrv4hi3\", SH_BLTIN_SH_HI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mshards_q,\t\"__builtin_sh_media_MSHARDS_Q\", SH_BLTIN_SUS, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mshfhi_b,\t\"__builtin_sh_media_MSHFHI_B\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mshfhi_l,\t\"__builtin_sh_media_MSHFHI_L\", SH_BLTIN_V2SI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mshfhi_w,\t\"__builtin_sh_media_MSHFHI_W\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mshflo_b,\t\"__builtin_sh_media_MSHFLO_B\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mshflo_l,\t\"__builtin_sh_media_MSHFLO_L\", SH_BLTIN_V2SI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_mshflo_w,\t\"__builtin_sh_media_MSHFLO_W\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ashlv2si3,\t\"__builtin_ashlv2si3\", SH_BLTIN_SH_SI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ashlv4hi3,\t\"__builtin_ashlv4hi3\", SH_BLTIN_SH_HI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_lshrv2si3,\t\"__builtin_lshrv2si3\", SH_BLTIN_SH_SI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_lshrv4hi3,\t\"__builtin_lshrv4hi3\", SH_BLTIN_SH_HI, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_subv2si3,\t\"__builtin_subv2si3\", SH_BLTIN_V2SI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_subv4hi3,\t\"__builtin_subv4hi3\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_sssubv2si3,\"__builtin_sssubv2si3\", SH_BLTIN_V2SI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ussubv8qi3,\"__builtin_ussubv8qi3\", SH_BLTIN_V8QI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_sssubv4hi3,\"__builtin_sssubv4hi3\", SH_BLTIN_V4HI3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_fcosa_s,\t\"__builtin_sh_media_FCOSA_S\", SH_BLTIN_SISF, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_fsina_s,\t\"__builtin_sh_media_FSINA_S\", SH_BLTIN_SISF, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_fipr,\t\"__builtin_sh_media_FIPR_S\", SH_BLTIN_3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ftrv,\t\"__builtin_sh_media_FTRV_S\", SH_BLTIN_3, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_sqrtdf2,\t\"__builtin_sh_media_FSQRT_D\", SH_BLTIN_2, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_sqrtsf2,\t\"__builtin_sh_media_FSQRT_S\", SH_BLTIN_2, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_fsrra_s,\t\"__builtin_sh_media_FSRRA_S\", SH_BLTIN_2, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ldhi_l,\t\"__builtin_sh_media_LDHI_L\", SH_BLTIN_LDUA_L, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ldhi_q,\t\"__builtin_sh_media_LDHI_Q\", SH_BLTIN_LDUA_Q, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ldlo_l,\t\"__builtin_sh_media_LDLO_L\", SH_BLTIN_LDUA_L, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ldlo_q,\t\"__builtin_sh_media_LDLO_Q\", SH_BLTIN_LDUA_Q, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_sthi_l,\t\"__builtin_sh_media_STHI_L\", SH_BLTIN_STUA_L, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_sthi_q,\t\"__builtin_sh_media_STHI_Q\", SH_BLTIN_STUA_Q, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_stlo_l,\t\"__builtin_sh_media_STLO_L\", SH_BLTIN_STUA_L, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_stlo_q,\t\"__builtin_sh_media_STLO_Q\", SH_BLTIN_STUA_Q, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ldhi_l64,\t\"__builtin_sh_media_LDHI_L\", SH_BLTIN_LDUA_L64, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ldhi_q64,\t\"__builtin_sh_media_LDHI_Q\", SH_BLTIN_LDUA_Q64, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ldlo_l64,\t\"__builtin_sh_media_LDLO_L\", SH_BLTIN_LDUA_L64, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_ldlo_q64,\t\"__builtin_sh_media_LDLO_Q\", SH_BLTIN_LDUA_Q64, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_sthi_l64,\t\"__builtin_sh_media_STHI_L\", SH_BLTIN_STUA_L64, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_sthi_q64,\t\"__builtin_sh_media_STHI_Q\", SH_BLTIN_STUA_Q64, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_stlo_l64,\t\"__builtin_sh_media_STLO_L\", SH_BLTIN_STUA_L64, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_stlo_q64,\t\"__builtin_sh_media_STLO_Q\", SH_BLTIN_STUA_Q64, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_nsb,\t\"__builtin_sh_media_NSB\", SH_BLTIN_SU, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_byterev,\t\"__builtin_sh_media_BYTEREV\", SH_BLTIN_2, 0 },\n+  { shmedia_builtin_p,\n+    CODE_FOR_prefetch,\t\"__builtin_sh_media_PREFO\", SH_BLTIN_PSSV, 0 },\n };\n \n static void\n-sh_media_init_builtins (void)\n+sh_init_builtins (void)\n {\n   tree shared[SH_BLTIN_NUM_SHARED_SIGNATURES];\n-  struct builtin_description *d;\n-\n   memset (shared, 0, sizeof shared);\n-  for (d = bdesc; d - bdesc < (int) ARRAY_SIZE (bdesc); d++)\n+\n+  for (unsigned int di = 0; di < ARRAY_SIZE (bdesc); ++di)\n     {\n-      tree type, arg_type = 0;\n+      builtin_description* d = &bdesc[di];\n+\n+      if (!d->is_enabled ())\n+\tcontinue;\n+\n+      tree type, arg_type = NULL_TREE;\n       int signature = d->signature;\n-      int i;\n \n       if (signature < SH_BLTIN_NUM_SHARED_SIGNATURES && shared[signature])\n \ttype = shared[signature];\n@@ -11694,9 +11785,9 @@ sh_media_init_builtins (void)\n \t  if (! TARGET_FPU_ANY\n \t      && FLOAT_MODE_P (insn_data[d->icode].operand[0].mode))\n \t    continue;\n-\t  for (i = 0; i < (int) ARRAY_SIZE (args); i++)\n+\t  for (unsigned int i = 0; i < ARRAY_SIZE (args); i++)\n \t    args[i] = NULL_TREE;\n-\t  for (i = 3; ; i--)\n+\t  for (int i = 3; ; i--)\n \t    {\n \t      int arg = signature_args[signature][i];\n \t      int opno = i - 1 + has_result;\n@@ -11705,8 +11796,7 @@ sh_media_init_builtins (void)\n \t\targ_type = ptr_type_node;\n \t      else if (arg)\n \t\targ_type = (*lang_hooks.types.type_for_mode)\n-\t\t  (insn_data[d->icode].operand[opno].mode,\n-\t\t   (arg & 1));\n+\t\t  (insn_data[d->icode].operand[opno].mode, (arg & 1));\n \t      else if (i)\n \t\tcontinue;\n \t      else\n@@ -11726,17 +11816,6 @@ sh_media_init_builtins (void)\n     }\n }\n \n-/* Returns the shmedia builtin decl for CODE.  */\n-\n-static tree\n-sh_media_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n-{        \n-  if (code >= ARRAY_SIZE (bdesc))\n-    return error_mark_node;\n-          \n-  return bdesc[code].fndecl;\n-}\n-\n /* Implements target hook vector_mode_supported_p.  */\n bool\n sh_vector_mode_supported_p (enum machine_mode mode)\n@@ -11782,22 +11861,18 @@ sh_dwarf_calling_convention (const_tree func)\n   return DW_CC_normal;\n }\n \n-static void\n-sh_init_builtins (void)\n-{\n-  if (TARGET_SHMEDIA)\n-    sh_media_init_builtins ();\n-}\n-\n /* Returns the sh builtin decl for CODE.  */\n \n static tree\n sh_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n-{        \n-  if (TARGET_SHMEDIA)\n-    return sh_media_builtin_decl (code, initialize_p);\n-          \n-  return error_mark_node;\n+{\n+  if (code >= ARRAY_SIZE (bdesc))\n+    return error_mark_node;\n+\n+  if (!bdesc[code].is_enabled ())\n+    return error_mark_node;\n+\n+  return bdesc[code].fndecl;\n }\n \n /* Expand an expression EXP that calls a built-in function,\n@@ -11815,27 +11890,24 @@ sh_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   const struct builtin_description *d = &bdesc[fcode];\n   enum insn_code icode = d->icode;\n   int signature = d->signature;\n-  enum machine_mode tmode = VOIDmode;\n-  int nop = 0, i;\n+  int nop = 0;\n   rtx op[4];\n-  rtx pat = NULL_RTX;\n \n   if (signature_args[signature][0])\n     {\n       if (ignore)\n \treturn NULL_RTX;\n \n-      tmode = insn_data[icode].operand[0].mode;\n-      if (! target\n-\t  || GET_MODE (target) != tmode\n+      enum machine_mode tmode = insn_data[icode].operand[0].mode;\n+      if (! target || GET_MODE (target) != tmode\n \t  || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n \ttarget = gen_reg_rtx (tmode);\n       op[nop++] = target;\n     }\n   else\n-    target = 0;\n+    target = NULL_RTX;\n \n-  for (i = 1; i <= 3; i++, nop++)\n+  for (int i = 1; i <= 3; i++, nop++)\n     {\n       tree arg;\n       enum machine_mode opmode, argmode;\n@@ -11864,6 +11936,8 @@ sh_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \top[nop] = copy_to_mode_reg (opmode, op[nop]);\n     }\n \n+  rtx pat = NULL_RTX;\n+\n   switch (nop)\n     {\n     case 1:\n@@ -13158,7 +13232,6 @@ sh_can_use_simple_return_p (void)\n    return false;\n \n   return true;\n-\n }\n \n #include \"gt-sh.h\""}]}