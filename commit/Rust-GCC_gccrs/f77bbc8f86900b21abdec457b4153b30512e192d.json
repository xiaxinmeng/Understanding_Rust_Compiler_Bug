{"sha": "f77bbc8f86900b21abdec457b4153b30512e192d", "node_id": "C_kwDOANBUbNoAKGY3N2JiYzhmODY5MDBiMjFhYmRlYzQ1N2I0MTUzYjMwNTEyZTE5MmQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-07-22T22:42:02Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-07-22T22:42:02Z"}, "message": "c++: CTAD from initializer list [PR106366]\n\nDuring CTAD, we currently perform the first phase of overload resolution\nfrom [over.match.list] only if the class template has a list constructor.\nBut according to [over.match.class.deduct]/4 it should be enough to just\nhave a guide that looks like a list constructor (which is a more general\ncriterion in light of user-defined guides).\n\n\tPR c++/106366\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (do_class_deduction): Don't consider TYPE_HAS_LIST_CTOR\n\twhen setting try_list_ctor.  Reset args even when try_list_ctor\n\tis true and there are no list candidates.  Call resolve_args on\n\tthe reset args.  Rename try_list_ctor to try_list_cand.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction112.C: New test.", "tree": {"sha": "2894fe9c38862a9bccea9c4c12b2e1c32d0b5dae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2894fe9c38862a9bccea9c4c12b2e1c32d0b5dae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f77bbc8f86900b21abdec457b4153b30512e192d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77bbc8f86900b21abdec457b4153b30512e192d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f77bbc8f86900b21abdec457b4153b30512e192d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77bbc8f86900b21abdec457b4153b30512e192d/comments", "author": null, "committer": null, "parents": [{"sha": "b585af38a12bd6b64dbbb8c645e8e2b83b7ba012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b585af38a12bd6b64dbbb8c645e8e2b83b7ba012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b585af38a12bd6b64dbbb8c645e8e2b83b7ba012"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "c415db304c9373d610a9f517b1ec69b8cfba4325", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77bbc8f86900b21abdec457b4153b30512e192d/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77bbc8f86900b21abdec457b4153b30512e192d/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=f77bbc8f86900b21abdec457b4153b30512e192d", "patch": "@@ -30240,7 +30240,7 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n \n   tree type = TREE_TYPE (tmpl);\n \n-  bool try_list_ctor = false;\n+  bool try_list_cand = false;\n   bool list_init_p = false;\n \n   releasing_vec rv_args = NULL;\n@@ -30250,8 +30250,8 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n   else if (BRACE_ENCLOSED_INITIALIZER_P (init))\n     {\n       list_init_p = true;\n-      try_list_ctor = TYPE_HAS_LIST_CTOR (type);\n-      if (try_list_ctor && CONSTRUCTOR_NELTS (init) == 1\n+      try_list_cand = true;\n+      if (CONSTRUCTOR_NELTS (init) == 1\n \t  && !CONSTRUCTOR_IS_DESIGNATED_INIT (init))\n \t{\n \t  /* As an exception, the first phase in 16.3.1.7 (considering the\n@@ -30261,9 +30261,9 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n \t     specialization of C.  */\n \t  tree elt = CONSTRUCTOR_ELT (init, 0)->value;\n \t  if (is_spec_or_derived (TREE_TYPE (elt), tmpl))\n-\t    try_list_ctor = false;\n+\t    try_list_cand = false;\n \t}\n-      if (try_list_ctor || is_std_init_list (type))\n+      if (try_list_cand || is_std_init_list (type))\n \targs = make_tree_vector_single (init);\n       else\n \targs = make_tree_vector_from_ctor (init);\n@@ -30310,26 +30310,25 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n \n   tree fndecl = error_mark_node;\n \n-  /* If this is list-initialization and the class has a list constructor, first\n+  /* If this is list-initialization and the class has a list guide, first\n      try deducing from the list as a single argument, as [over.match.list].  */\n-  tree list_cands = NULL_TREE;\n-  if (try_list_ctor && cands)\n-    for (lkp_iterator iter (cands); iter; ++iter)\n-      {\n-\ttree dg = *iter;\n+  if (try_list_cand)\n+    {\n+      tree list_cands = NULL_TREE;\n+      for (tree dg : lkp_range (cands))\n \tif (is_list_ctor (dg))\n \t  list_cands = lookup_add (dg, list_cands);\n-      }\n-  if (list_cands)\n-    {\n-      fndecl = perform_dguide_overload_resolution (list_cands, args, tf_none);\n-\n+      if (list_cands)\n+\tfndecl = perform_dguide_overload_resolution (list_cands, args, tf_none);\n       if (fndecl == error_mark_node)\n \t{\n \t  /* That didn't work, now try treating the list as a sequence of\n \t     arguments.  */\n \t  release_tree_vector (args);\n \t  args = make_tree_vector_from_ctor (init);\n+\t  args = resolve_args (args, complain);\n+\t  if (args == NULL)\n+\t    return error_mark_node;\n \t}\n     }\n "}, {"sha": "8da5868ff98580ca088307d57676557604f41373", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction112.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f77bbc8f86900b21abdec457b4153b30512e192d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction112.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f77bbc8f86900b21abdec457b4153b30512e192d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction112.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction112.C?ref=f77bbc8f86900b21abdec457b4153b30512e192d", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/106366\n+// { dg-do compile { target c++17 } }\n+\n+#include <initializer_list>\n+\n+template<class T>\n+struct A { A(...); };\n+\n+template<typename T>\n+A(std::initializer_list<T>) -> A<T>;\n+\n+A a{1,2,3};\n+using type = decltype(a);\n+using type = A<int>;"}]}