{"sha": "b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyNGY3MmUyOWU1YjBmZjdiNmNiZDg1ZmFiMGU5ZDQ2NzZkN2I5Zg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-03-23T19:42:25Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-03-23T19:42:25Z"}, "message": "re PR java/1213 (gcj should check for incorrect CLASSPATH)\n\n2001-03-22  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* gcj.texi (Input Options): documented the check for attribute\n\t`gnu.gcc.gccj-compiled' and the `-fforce-classes-archive-check' flag.\n\t* java-tree.h (flag_force_classes_archive_check): Declared extern.\n\t* jcf-parse.c (HANDLE_GCJCOMPILED_ATTRIBUTE): New macro.\n\t(jcf_parse): Check for the right classes archive if necessary.\n\t* jcf-reader.c (get_attribute): Define `MATCH_ATTRIBUTE' and use it.\n\t(jcf_parse_fields): Fixed indentation.\n\t* jcf-write.c (append_gcj_attribute): New function.\n\t(generate_classfile): Compute the attribute count, invoke\n\t`append_gcj_attribute'.\n\t* jcf.h (typedef struct JCF): `seen_in_zip' and `java_source'\n\tturned into bit fields. New bit field `right_zip.'\n\t(JCF_ZERO): Set `right_zip' to zero.\n\t* lang-options.h (-fforce-classes-archive-check): Added flag.\n\t* lang.c (flag_force_classes_archive_check): New flag.\n\t(lang_f_options): New entry `force-classes-archive-check.'\n\tFixes PR java/1213.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-03/msg01662.html)\n\nFrom-SVN: r40788", "tree": {"sha": "8dad1441dc95d1c7079a19a829ac67eae0ce45ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dad1441dc95d1c7079a19a829ac67eae0ce45ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/comments", "author": null, "committer": null, "parents": [{"sha": "b64295c4d34897ecdc398d7cacbb8f292530713f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64295c4d34897ecdc398d7cacbb8f292530713f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64295c4d34897ecdc398d7cacbb8f292530713f"}], "stats": {"total": 120, "additions": 106, "deletions": 14}, "files": [{"sha": "bb52739c99ae1c844d749e1eaefde79df411a98d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "patch": "@@ -1,3 +1,23 @@\n+2001-03-23  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* gcj.texi (Input Options): documented the check for attribute\n+\t`gnu.gcc.gccj-compiled' and the `-fforce-classes-archive-check' flag.\n+\t* java-tree.h (flag_force_classes_archive_check): Declared extern.\n+\t* jcf-parse.c (HANDLE_GCJCOMPILED_ATTRIBUTE): New macro.\n+\t(jcf_parse): Check for the right classes archive if necessary.\n+\t* jcf-reader.c (get_attribute): Define `MATCH_ATTRIBUTE' and use it.\n+\t(jcf_parse_fields): Fixed indentation.\n+\t* jcf-write.c (append_gcj_attribute): New function.\n+\t(generate_classfile): Compute the attribute count, invoke\n+\t`append_gcj_attribute'.\n+\t* jcf.h (typedef struct JCF): `seen_in_zip' and `java_source'\n+\tturned into bit fields. New bit field `right_zip.'\n+\t(JCF_ZERO): Set `right_zip' to zero.\n+\t* lang-options.h (-fforce-classes-archive-check): Added flag.\n+\t* lang.c (flag_force_classes_archive_check): New flag.\n+\t(lang_f_options): New entry `force-classes-archive-check.'\n+\tFixes PR java/1213.\n+\n 2001-02-07  Andrew Haley  <aph@redhat.com>\n \n \t* gcj.texi (Configure-time Options): Add -fcheck-references."}, {"sha": "bb94dff3c8afde26d28946b367021f6196679647", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "patch": "@@ -624,6 +624,20 @@ suppressed by @code{--CLASSPATH}), then its value is appended.\n Finally, the built-in system directory, @file{libgcj.jar}, is appended.\n @end itemize\n \n+The classfile built by @code{gcj} for the class @code{java.lang.Object}\n+(and placed in @code{libgcj.jar}) contains a special zero length\n+attribute @code{gnu.gcj.gcj-compiled}. The compiler looks for this\n+attribute when loading @code{java.lang.Object} and will report an error\n+if it isn't found, unless it compiles to bytecode (the option\n+@code{-fforce-classes-archive-check} can be used to overide this\n+behavior in this particular case.)\n+\n+@table @code\n+@item -fforce-classes-archive-check\n+This forces the compiler to always check for the special zero length\n+attribute @code{gnu.gcj.gcj-compiled} in @code{java.lang.Object} and\n+issue an error if it isn't found.\n+@end table\n \n @node Encodings\n @section Encodings"}, {"sha": "afd892e53e2ab0e3bce77de5bb127bd9025b4dd0", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "patch": "@@ -153,6 +153,10 @@ extern int flag_jni;\n \n extern int flag_extraneous_semicolon;\n \n+/* When non zero, always check for a non gcj generated classes archive.  */\n+\n+extern int flag_force_classes_archive_check;\n+\n /* When non zero, we emit xref strings. Values of the flag for xref\n    backends are defined in xref.h.  */\n "}, {"sha": "f235f6d3f041fa8105ae468547aeb42701445f71", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "patch": "@@ -236,6 +236,12 @@ set_source_filename (jcf, index)\n     DECL_ARTIFICIAL (current_method) = 1;\t\t\t\t\\\n }\n \n+#define HANDLE_GCJCOMPILED_ATTRIBUTE()\t\t\\\n+{ \t\t\t\t\t\t\\\n+  if (current_class == object_type_node)\t\\\n+    jcf->right_zip = 1;\t\t\t\t\\\n+}\n+\n #include \"jcf-reader.c\"\n \n static int yydebug;\n@@ -710,7 +716,15 @@ jcf_parse (jcf)\n \n   layout_class (current_class);\n   if (current_class == object_type_node)\n-    layout_class_methods (object_type_node);\n+    {\n+      layout_class_methods (object_type_node);\n+      /* If we don't have the right archive, emit a verbose warning.\n+\t If we're generating bytecode, emit the warning only if\n+\t -fforce-classes-archive-check was specified. */\n+      if (!jcf->right_zip\n+\t  && (!flag_emit_class_files || flag_force_classes_archive_check))\n+\tfatal_error (\"The `java.lang.Object' that was found in `%s' didn't have the special zero-length `gnu.gcj.gcj-compiled' attribute. This generally means that your classpath is incorrect set. Use `info gcj \\\"Input Options\\\"' to see the info page describing how to set the classpath.\", jcf->filename);\n+    }\n   else\n     all_class_list = tree_cons (NULL_TREE,\n \t\t\t\tTYPE_NAME (current_class), all_class_list );"}, {"sha": "5df7a2e6353e3eebbf60887383492a5bacf8005e", "filename": "gcc/java/jcf-reader.c", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fjcf-reader.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fjcf-reader.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-reader.c?ref=b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "patch": "@@ -120,6 +120,9 @@ DEFUN(get_attribute, (jcf),\n   name_length = JPOOL_UTF_LENGTH (jcf, attribute_name);\n   name_data = JPOOL_UTF_DATA (jcf, attribute_name);\n \n+#define MATCH_ATTRIBUTE(S) \\\n+  (name_length == sizeof (S)-1 && memcmp (name_data, S, sizeof (S)-1) == 0)\n+\n #ifdef IGNORE_ATTRIBUTE\n    if (IGNORE_ATTRIBUTE (jcf, attribute_name, attribute_length))\n      {\n@@ -128,15 +131,15 @@ DEFUN(get_attribute, (jcf),\n    else\n #endif\n #ifdef HANDLE_SOURCEFILE\n-  if (name_length == 10 && memcmp (name_data, \"SourceFile\", 10) == 0)\n+  if (MATCH_ATTRIBUTE (\"SourceFile\"))\n     {\n       uint16 sourcefile_index = JCF_readu2 (jcf);\n       HANDLE_SOURCEFILE(sourcefile_index);\n     }\n   else\n #endif\n #ifdef HANDLE_CONSTANTVALUE\n-  if (name_length == 13 && memcmp (name_data, \"ConstantValue\", 13) == 0)\n+  if (MATCH_ATTRIBUTE (\"ConstantValue\"))\n     {\n       uint16 constantvalue_index = JCF_readu2 (jcf);\n       if (constantvalue_index <= 0 || constantvalue_index >= JPOOL_SIZE(jcf))\n@@ -146,7 +149,7 @@ DEFUN(get_attribute, (jcf),\n   else\n #endif\n #ifdef HANDLE_CODE_ATTRIBUTE\n-  if (name_length == 4 && memcmp (name_data, \"Code\", 4) == 0)\n+  if (MATCH_ATTRIBUTE (\"Code\"))\n     {\n       uint16 j;\n       uint16 max_stack ATTRIBUTE_UNUSED = JCF_readu2 (jcf);\n@@ -175,43 +178,50 @@ DEFUN(get_attribute, (jcf),\n   else\n #endif /* HANDLE_CODE_ATTRIBUTE */\n #ifdef HANDLE_EXCEPTIONS_ATTRIBUTE\n-  if (name_length == 10 && memcmp (name_data, \"Exceptions\", 10) == 0)\n+  if (MATCH_ATTRIBUTE (\"Exceptions\"))\n     {\n       uint16 count = JCF_readu2 (jcf);\n       HANDLE_EXCEPTIONS_ATTRIBUTE (count);\n     }\n   else\n #endif\n #ifdef HANDLE_LINENUMBERTABLE_ATTRIBUTE\n-  if (name_length == 15 && memcmp (name_data, \"LineNumberTable\", 15) == 0)\n+  if (MATCH_ATTRIBUTE (\"LineNumberTable\"))\n     {\n       uint16 count = JCF_readu2 (jcf);\n       HANDLE_LINENUMBERTABLE_ATTRIBUTE (count);\n     }\n   else\n #endif\n #ifdef HANDLE_LOCALVARIABLETABLE_ATTRIBUTE\n-  if (name_length == 18 && memcmp (name_data, \"LocalVariableTable\", 18) == 0)\n+  if (MATCH_ATTRIBUTE (\"LocalVariableTable\"))\n     {\n       uint16 count = JCF_readu2 (jcf);\n       HANDLE_LOCALVARIABLETABLE_ATTRIBUTE (count);\n     }\n   else\n #endif\n #ifdef HANDLE_INNERCLASSES_ATTRIBUTE\n-  if (name_length == 12 && memcmp (name_data, \"InnerClasses\", 12) == 0)\n+  if (MATCH_ATTRIBUTE (\"InnerClasses\"))\n     {\n       uint16 count = JCF_readu2 (jcf);\n       HANDLE_INNERCLASSES_ATTRIBUTE (count);\n     }\n   else\n #endif\n #ifdef HANDLE_SYNTHETIC_ATTRIBUTE\n-  if (name_length == 9 && memcmp (name_data, \"Synthetic\", 9) == 0)\n+  if (MATCH_ATTRIBUTE (\"Synthetic\"))\n     {\n       HANDLE_SYNTHETIC_ATTRIBUTE ();\n     }\n   else\n+#endif\n+#ifdef HANDLE_GCJCOMPILED_ATTRIBUTE\n+  if (MATCH_ATTRIBUTE (\"gnu.gcj.gcj-compiled\"))\n+    {\n+      HANDLE_GCJCOMPILED_ATTRIBUTE ();\n+    }\n+  else\n #endif\n     {\n #ifdef PROCESS_OTHER_ATTRIBUTE\n@@ -362,7 +372,7 @@ DEFUN(jcf_parse_fields, (jcf),\n       uint16 attribute_count = JCF_readu2 (jcf);\n #ifdef HANDLE_START_FIELD\n       HANDLE_START_FIELD (access_flags, name_index, signature_index,\n-\t\t    attribute_count);\n+\t\t\t  attribute_count);\n #endif\n       for (j = 0; j < attribute_count; j++)\n \t{"}, {"sha": "46f73fe9cbb3708a37a4971da6e3597462c916ea", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "patch": "@@ -346,10 +346,11 @@ static char *make_class_file_name PARAMS ((tree));\n static unsigned char *append_synthetic_attribute PARAMS ((struct jcf_partial *));\n static void append_innerclasses_attribute PARAMS ((struct jcf_partial *, tree));\n static void append_innerclasses_attribute_entry PARAMS ((struct jcf_partial *, tree, tree));\n+static void append_gcj_attribute PARAMS ((struct jcf_partial *, tree));\n \n /* Utility macros for appending (big-endian) data to a buffer.\n    We assume a local variable 'ptr' points into where we want to\n-   write next, and we assume enoygh space has been allocated. */\n+   write next, and we assume enough space has been allocated. */\n \n #ifdef ENABLE_JC1_CHECKING\n static int CHECK_PUT PARAMS ((void *, struct jcf_partial *, int));\n@@ -3110,8 +3111,11 @@ generate_classfile (clas, state)\n     }\n   ptr = append_chunk (NULL, 10, state);\n \n-  i = ((INNER_CLASS_TYPE_P (clas) \n-\t|| DECL_INNER_CLASS_LIST (TYPE_NAME (clas))) ? 2 : 1);\n+  i = 1;\t\t/* Source file always exists as an attribute */\n+  if (INNER_CLASS_TYPE_P (clas) || DECL_INNER_CLASS_LIST (TYPE_NAME (clas)))\n+    i++;\n+  if (clas == object_type_node)\n+    i++;\n   PUT2 (i);\t\t\t/* attributes_count */\n \n   /* generate the SourceFile attribute. */\n@@ -3126,6 +3130,7 @@ generate_classfile (clas, state)\n   PUT4 (2);\n   i = find_utf8_constant (&state->cpool, get_identifier (source_file));\n   PUT2 (i);\n+  append_gcj_attribute (state, clas);\n   append_innerclasses_attribute (state, clas);\n \n   /* New finally generate the contents of the constant pool chunk. */\n@@ -3157,6 +3162,24 @@ append_synthetic_attribute (state)\n   return ptr;\n }\n \n+static void\n+append_gcj_attribute (state, class)\n+     struct jcf_partial *state;\n+     tree class;\n+{\n+  unsigned char *ptr;\n+  int i;\n+\n+  if (class != object_type_node)\n+    return;\n+\n+  ptr = append_chunk (NULL, 6, state); /* 2+4 */\n+  i = find_utf8_constant (&state->cpool, \n+\t\t\t  get_identifier (\"gnu.gcj.gcj-compiled\"));\n+  PUT2 (i);\t\t\t/* Attribute string index */\n+  PUT4 (0);\t\t\t/* Attribute length */\n+}\n+\n static void\n append_innerclasses_attribute (state, class)\n      struct jcf_partial *state;"}, {"sha": "4203ec0853d67bbd9a65165f6c221f1994dd8253", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "patch": "@@ -88,7 +88,8 @@ typedef struct JCF {\n   unsigned char *buffer_end;\n   unsigned char *read_ptr;\n   unsigned char *read_end;\n-  int java_source;\n+  int java_source : 1;\n+  int right_zip : 1;\n   jcf_filbuf_t filbuf;\n   void *read_state;\n   const char *filename;"}, {"sha": "f65bb459beeeabc69def0109b50b7965b65e400a", "filename": "gcc/java/lang-options.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-options.h?ref=b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "patch": "@@ -49,3 +49,5 @@ DEFINE_LANG_NAME (\"Java\")\n     \"Warn if modifiers are specified when not necessary\"},\n   { \"-Wextraneous-semicolon\", \"Warn if deprecated empty statements are found\"},\n   { \"-Wout-of-date\", \"Warn if .class files are out of date\" },\n+  { \"-fforce-classes-archive-check\", \n+    \"Always check for non gcj generated classes archives\" },"}, {"sha": "8f9f5b21773499cacc585fe11283cd463d334c8a", "filename": "gcc/java/lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=b124f72e29e5b0ff7b6cbd85fab0e9d4676d7b9f", "patch": "@@ -147,6 +147,9 @@ const char *current_encoding = NULL;\n /* When non zero, report the now deprecated empty statements.  */\n int flag_extraneous_semicolon;\n \n+/* When non zero, always check for a non gcj generated classes archive.  */\n+int flag_force_classes_archive_check;\n+\n /* From gcc/flags.h, and indicates if exceptions are turned on or not.  */\n \n extern int flag_new_exceptions;\n@@ -169,6 +172,7 @@ lang_f_options[] =\n   {\"hash-synchronization\", &flag_hash_synchronization, 1},\n   {\"jni\", &flag_jni, 1},\n   {\"check-references\", &flag_check_references, 1},\n+  {\"force-classes-archive-check\", &flag_force_classes_archive_check, 1}\n };\n \n static struct string_option"}]}