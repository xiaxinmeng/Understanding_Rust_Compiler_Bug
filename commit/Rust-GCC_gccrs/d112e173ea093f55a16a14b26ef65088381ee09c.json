{"sha": "d112e173ea093f55a16a14b26ef65088381ee09c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDExMmUxNzNlYTA5M2Y1NWExNmExNGIyNmVmNjUwODgzODFlZTA5Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-02T17:03:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-02T17:03:28Z"}, "message": "libstdc++: Fix std::lexicographic_compare for unsigned char (PR 93972)\n\nThe new 25_algorithms/lexicographical_compare/93972.cc test fails on\ntargets where char is unsigned, revealing an existing regression with\nthe std::__memcmp helper that had gone unnoticed in\nstd::lexicographical_compare. When comparing char and unsigned char, the\nmemcmp optimisation is enabled, but the new std::__memcmp function fails\nto compile for mismatched types.\n\n\tPR libstdc++/93972\n\t* include/bits/stl_algobase.h (__memcmp): Allow pointer types to\n\tdiffer.\n\t* testsuite/25_algorithms/lexicographical_compare/uchar.cc: New test.", "tree": {"sha": "0e431eed743ba1cc0e82d88a7b3fcc79b66d8b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e431eed743ba1cc0e82d88a7b3fcc79b66d8b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d112e173ea093f55a16a14b26ef65088381ee09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d112e173ea093f55a16a14b26ef65088381ee09c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d112e173ea093f55a16a14b26ef65088381ee09c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d112e173ea093f55a16a14b26ef65088381ee09c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c391563407aeba981f6a71423297f36d5ece0ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c391563407aeba981f6a71423297f36d5ece0ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c391563407aeba981f6a71423297f36d5ece0ee"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "28957dc5c990e9065f9769c56f5a24c56bc82953", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d112e173ea093f55a16a14b26ef65088381ee09c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d112e173ea093f55a16a14b26ef65088381ee09c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d112e173ea093f55a16a14b26ef65088381ee09c", "patch": "@@ -1,5 +1,10 @@\n 2020-03-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/93972\n+\t* include/bits/stl_algobase.h (__memcmp): Allow pointer types to\n+\tdiffer.\n+\t* testsuite/25_algorithms/lexicographical_compare/uchar.cc: New test.\n+\n \t* include/std/ranges (__detail::__maybe_empty_t): Rename to\n \t__maybe_present_t.\n \t(__adaptor::_RangeAdaptor, join_view, split_view): Use new name."}, {"sha": "7a9d932b4210e40bfacabe4f423d9f22bdadc41c", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d112e173ea093f55a16a14b26ef65088381ee09c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d112e173ea093f55a16a14b26ef65088381ee09c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=d112e173ea093f55a16a14b26ef65088381ee09c", "patch": "@@ -84,11 +84,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * A constexpr wrapper for __builtin_memcmp.\n    * @param __num The number of elements of type _Tp (not bytes).\n    */\n-  template<typename _Tp>\n+  template<typename _Tp, typename _Up>\n     _GLIBCXX14_CONSTEXPR\n     inline int\n-    __memcmp(const _Tp* __first1, const _Tp* __first2, size_t __num)\n+    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)\n     {\n+#if __cplusplus >= 201103L\n+      static_assert(sizeof(_Tp) == sizeof(_Up), \"can be compared with memcmp\");\n+#endif\n #ifdef __cpp_lib_is_constant_evaluated\n       if (std::is_constant_evaluated())\n \t{"}, {"sha": "990bb1e74897f1e5ab792f5b62d0ac8adf447d10", "filename": "libstdc++-v3/testsuite/25_algorithms/lexicographical_compare/uchar.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d112e173ea093f55a16a14b26ef65088381ee09c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fuchar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d112e173ea093f55a16a14b26ef65088381ee09c/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fuchar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fuchar.cc?ref=d112e173ea093f55a16a14b26ef65088381ee09c", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-fchar8_t\" }\n+// { dg-do run }\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+// Check that the memcmp optimization in std::lexicographical_compare\n+// still works for mixed-type comparisons.\n+\n+void\n+test01()\n+{\n+  unsigned char a = 0;\n+  char8_t b = 1;\n+  VERIFY( std::lexicographical_compare(&a, &a + 1, &b, &b + 1) );\n+  VERIFY( ! std::lexicographical_compare(&b, &b + 1, &a, &a + 1) );\n+}\n+\n+void\n+test02()\n+{\n+  // N.B. if char is signed this won't actually use the memcmp optimization.\n+  unsigned char a = 0;\n+  char b = 1;\n+  VERIFY( std::lexicographical_compare(&a, &a + 1, &b, &b + 1) );\n+  VERIFY( ! std::lexicographical_compare(&b, &b + 1, &a, &a + 1) );\n+}\n+\n+void\n+test03()\n+{\n+  // N.B. if char is signed this won't actually use the memcmp optimization.\n+  char a = 0;\n+  char8_t b = 1;\n+  VERIFY( std::lexicographical_compare(&a, &a + 1, &b, &b + 1) );\n+  VERIFY( ! std::lexicographical_compare(&b, &b + 1, &a, &a + 1) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}