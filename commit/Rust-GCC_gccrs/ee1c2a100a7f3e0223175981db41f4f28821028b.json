{"sha": "ee1c2a100a7f3e0223175981db41f4f28821028b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxYzJhMTAwYTdmM2UwMjIzMTc1OTgxZGI0MWY0ZjI4ODIxMDI4Yg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2007-01-12T19:46:49Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-01-12T19:46:49Z"}, "message": "re PR preprocessor/28227 (valid #ifdef rejected)\n\nlibcpp\n\tPR preprocessor/28227:\n\t* directives.c (lex_macro_node): Added 'is_def_or_undef'\n\targument.\n\t(do_define): Update.\n\t(do_undef): Update.\n\t(do_ifdef): Update.\n\t(do_ifndef): Update.\ngcc/testsuite\n\tPR preprocessor/28227:\n\t* gcc.dg/cpp/pr28227.c: New file.\n\nFrom-SVN: r120731", "tree": {"sha": "98deba1dfe7c6b9c082beb511fe09a10db6319c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98deba1dfe7c6b9c082beb511fe09a10db6319c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee1c2a100a7f3e0223175981db41f4f28821028b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1c2a100a7f3e0223175981db41f4f28821028b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1c2a100a7f3e0223175981db41f4f28821028b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1c2a100a7f3e0223175981db41f4f28821028b/comments", "author": null, "committer": null, "parents": [{"sha": "3d283195f78bbfc85038982de371ab89477e9b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d283195f78bbfc85038982de371ab89477e9b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d283195f78bbfc85038982de371ab89477e9b63"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "22158f2b4ccf322ca2c7813148a60d40796985a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1c2a100a7f3e0223175981db41f4f28821028b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1c2a100a7f3e0223175981db41f4f28821028b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee1c2a100a7f3e0223175981db41f4f28821028b", "patch": "@@ -1,3 +1,8 @@\n+2007-01-12  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR preprocessor/28227:\n+\t* gcc.dg/cpp/pr28227.c: New file.\n+\n 2007-01-11  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* gcc.dg/tree-ssa/loop-22.c: New test."}, {"sha": "3b70dd539202d7bbe20f5a07e1870d2443cea75c", "filename": "gcc/testsuite/gcc.dg/cpp/pr28227.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1c2a100a7f3e0223175981db41f4f28821028b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr28227.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1c2a100a7f3e0223175981db41f4f28821028b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr28227.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr28227.c?ref=ee1c2a100a7f3e0223175981db41f4f28821028b", "patch": "@@ -0,0 +1,10 @@\n+/* Copyright (C) 2007 Free Software Foundation, Inc.  */\n+/* PR preprocessor/28227 */\n+\n+/* { dg-do preprocess } */\n+#ifdef defined\n+#endif\n+#ifndef defined\n+#endif\n+\n+int x;"}, {"sha": "f394081453582a77cecdfe2693ce6c885dc76351", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1c2a100a7f3e0223175981db41f4f28821028b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1c2a100a7f3e0223175981db41f4f28821028b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=ee1c2a100a7f3e0223175981db41f4f28821028b", "patch": "@@ -1,3 +1,13 @@\n+2007-01-12  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR preprocessor/28227:\n+\t* directives.c (lex_macro_node): Added 'is_def_or_undef'\n+\targument.\n+\t(do_define): Update.\n+\t(do_undef): Update.\n+\t(do_ifdef): Update.\n+\t(do_ifndef): Update.\n+\n 2007-01-11  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "d67cb5fd6d18f9e054494288215d73e579a01a94", "filename": "libcpp/directives.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1c2a100a7f3e0223175981db41f4f28821028b/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1c2a100a7f3e0223175981db41f4f28821028b/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=ee1c2a100a7f3e0223175981db41f4f28821028b", "patch": "@@ -103,7 +103,7 @@ static void push_conditional (cpp_reader *, int, int, const cpp_hashnode *);\n static unsigned int read_flag (cpp_reader *, unsigned int);\n static int strtoul_for_line (const uchar *, unsigned int, unsigned long *);\n static void do_diagnostic (cpp_reader *, int, int);\n-static cpp_hashnode *lex_macro_node (cpp_reader *);\n+static cpp_hashnode *lex_macro_node (cpp_reader *, bool);\n static int undefine_macros (cpp_reader *, cpp_hashnode *, void *);\n static void do_include_common (cpp_reader *, enum include_type);\n static struct pragma_entry *lookup_pragma_entry (struct pragma_entry *,\n@@ -503,9 +503,11 @@ run_directive (cpp_reader *pfile, int dir_no, const char *buf, size_t count)\n }\n \n /* Checks for validity the macro name in #define, #undef, #ifdef and\n-   #ifndef directives.  */\n+   #ifndef directives.  IS_DEF_OR_UNDEF is true if this call is\n+   processing a #define or #undefine directive, and false\n+   otherwise.  */\n static cpp_hashnode *\n-lex_macro_node (cpp_reader *pfile)\n+lex_macro_node (cpp_reader *pfile, bool is_def_or_undef)\n {\n   const cpp_token *token = _cpp_lex_token (pfile);\n \n@@ -520,7 +522,7 @@ lex_macro_node (cpp_reader *pfile)\n     {\n       cpp_hashnode *node = token->val.node;\n \n-      if (node == pfile->spec_nodes.n_defined)\n+      if (is_def_or_undef && node == pfile->spec_nodes.n_defined)\n \tcpp_error (pfile, CPP_DL_ERROR,\n \t\t   \"\\\"defined\\\" cannot be used as a macro name\");\n       else if (! (node->flags & NODE_POISONED))\n@@ -543,7 +545,7 @@ lex_macro_node (cpp_reader *pfile)\n static void\n do_define (cpp_reader *pfile)\n {\n-  cpp_hashnode *node = lex_macro_node (pfile);\n+  cpp_hashnode *node = lex_macro_node (pfile, true);\n \n   if (node)\n     {\n@@ -562,7 +564,7 @@ do_define (cpp_reader *pfile)\n static void\n do_undef (cpp_reader *pfile)\n {\n-  cpp_hashnode *node = lex_macro_node (pfile);\n+  cpp_hashnode *node = lex_macro_node (pfile, true);\n \n   if (node)\n     {\n@@ -1606,7 +1608,7 @@ do_ifdef (cpp_reader *pfile)\n \n   if (! pfile->state.skipping)\n     {\n-      const cpp_hashnode *node = lex_macro_node (pfile);\n+      const cpp_hashnode *node = lex_macro_node (pfile, false);\n \n       if (node)\n \t{\n@@ -1628,7 +1630,7 @@ do_ifndef (cpp_reader *pfile)\n \n   if (! pfile->state.skipping)\n     {\n-      node = lex_macro_node (pfile);\n+      node = lex_macro_node (pfile, false);\n \n       if (node)\n \t{"}]}