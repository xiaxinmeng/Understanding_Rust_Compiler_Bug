{"sha": "a1ef0af4d2446643321edaee44b04c741a3ba0db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFlZjBhZjRkMjQ0NjY0MzMyMWVkYWVlNDRiMDRjNzQxYTNiYTBkYg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-10-23T20:25:09Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-23T20:25:09Z"}, "message": "sched.c (update_flow_info): Revert Oct 19, 1998 change.\n\n        * sched.c (update_flow_info): Revert Oct 19, 1998 change.  Brings\n        back Oct 15, 1998 change.\n        * haifa-sched.c (update_flow_info): Likewise.\n        * flow.c (life_analysis_1): Delete CLOBBER insns after reload.\nReal fix was in flow.c...\n\nFrom-SVN: r23261", "tree": {"sha": "24d3b594ae80d725b82ea1146c5e6b4972e8f4c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24d3b594ae80d725b82ea1146c5e6b4972e8f4c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1ef0af4d2446643321edaee44b04c741a3ba0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ef0af4d2446643321edaee44b04c741a3ba0db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ef0af4d2446643321edaee44b04c741a3ba0db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ef0af4d2446643321edaee44b04c741a3ba0db/comments", "author": null, "committer": null, "parents": [{"sha": "d9db46fd480c055c4559a4b820a7c96df0fcf676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9db46fd480c055c4559a4b820a7c96df0fcf676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9db46fd480c055c4559a4b820a7c96df0fcf676"}], "stats": {"total": 35, "additions": 5, "deletions": 30}, "files": [{"sha": "776236750a501221f1c2bb4fe25cba65ae5554c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ef0af4d2446643321edaee44b04c741a3ba0db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ef0af4d2446643321edaee44b04c741a3ba0db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1ef0af4d2446643321edaee44b04c741a3ba0db", "patch": "@@ -26,6 +26,9 @@ Fri Oct 23 15:34:14 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n Fri Oct 23 13:12:35 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* sched.c (update_flow_info): Revert Oct 19, 1998 change.  Brings\n+\tback Oct 15, 1998 change.  \n+\t* haifa-sched.c (update_flow_info): Likewise.\n \t* flow.c (life_analysis_1): Delete CLOBBER insns after reload.\n \n \t* mn10200.md (truncated shift): Accept constant inputs too."}, {"sha": "806bb396d8864142f219249a4aea64e9e47a9c6b", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ef0af4d2446643321edaee44b04c741a3ba0db/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ef0af4d2446643321edaee44b04c741a3ba0db/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=a1ef0af4d2446643321edaee44b04c741a3ba0db", "patch": "@@ -7987,21 +7987,7 @@ update_flow_info (notes, first, last, orig_insn)\n \t         register that was not needed by this instantiation of the\n \t         pattern, so we can safely ignore it.  */\n \t      if (insn == first)\n-\t\t{\n-\t\t  /* We have accurate death notes after reload now, but this\n-\t\t     code is still necessary.  Consider splitting a store into\n-\t\t     (subreg:DF (reg:DC) 0).  The death notes will claim the\n-\t\t     entire DCmode value is dead.  But after splitting we know\n-\t\t     that only part of it is dead.  Ie, the splitting action\n-\t\t     actually eliminated the death of one or more hard\n-\t\t     registers.  */\n-\t\t  if (reload_completed && REG_NOTE_KIND (note) == REG_DEAD)\n-\t\t    {\n-\t\t      XEXP (note, 1) = REG_NOTES (insn);\n-\t\t      REG_NOTES (insn) = note;\n-\t\t      break;\n-\t\t    }\n-\t\t\t\n+\t\t{\t\t\t\n \t\t  if (REG_NOTE_KIND (note) != REG_UNUSED)\n \t\t    abort ();\n "}, {"sha": "1d81407c3f4298ea3d427e686d16a7edd8673c7d", "filename": "gcc/sched.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ef0af4d2446643321edaee44b04c741a3ba0db/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ef0af4d2446643321edaee44b04c741a3ba0db/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=a1ef0af4d2446643321edaee44b04c741a3ba0db", "patch": "@@ -3828,21 +3828,7 @@ update_flow_info (notes, first, last, orig_insn)\n \t\t register that was not needed by this instantiation of the\n \t\t pattern, so we can safely ignore it.  */\n \t      if (insn == first)\n-\t\t{\n-\t\t  /* We have accurate death notes after reload now, but this\n-\t\t     code is still necessary.  Consider splitting a store into\n-\t\t     (subreg:DF (reg:DC) 0).  The death notes will claim the\n-\t\t     entire DCmode value is dead.  But after splitting we know\n-\t\t     that only part of it is dead.  Ie, the splitting action\n-\t\t     actually eliminated the death of one or more hard\n-\t\t     registers.  */\n-\t\t  if (reload_completed && REG_NOTE_KIND (note) == REG_DEAD)\n-\t\t    {\n-\t\t      XEXP (note, 1) = REG_NOTES (insn);\n-\t\t      REG_NOTES (insn) = note;\n-\t\t      break;\n-\t\t    }\n-\t\t\t\n+\t\t{\t\t\t\n \t\t  if (REG_NOTE_KIND (note) != REG_UNUSED)\n \t\t    abort ();\n "}]}