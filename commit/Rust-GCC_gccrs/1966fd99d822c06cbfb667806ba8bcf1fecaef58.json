{"sha": "1966fd99d822c06cbfb667806ba8bcf1fecaef58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2NmZkOTlkODIyYzA2Y2JmYjY2NzgwNmJhOGJjZjFmZWNhZWY1OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-02-14T12:03:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-02-14T12:03:43Z"}, "message": "re PR target/60179 (target optimization attribute streaming is broken)\n\n2014-02-14  Richard Biener  <rguenther@suse.de>\n\n\tPR lto/60179\n\t* lto-streamer-out.c (DFS_write_tree_body): Do not follow\n\tDECL_FUNCTION_SPECIFIC_TARGET.\n\t(hash_tree): Do not hash DECL_FUNCTION_SPECIFIC_TARGET.\n\t* tree-streamer-out.c (pack_ts_target_option): Remove.\n\t(streamer_pack_tree_bitfields): Do not stream\n\tTS_TARGET_OPTION.\n\t(write_ts_function_decl_tree_pointers): Do not stream\n\tDECL_FUNCTION_SPECIFIC_TARGET.\n\t* tree-streamer-in.c (unpack_ts_target_option): Remove.\n\t(unpack_value_fields): Do not stream TS_TARGET_OPTION.\n\t(lto_input_ts_function_decl_tree_pointers): Do not stream\n\tDECL_FUNCTION_SPECIFIC_TARGET.\n\n\tlto/\n\t* lto.c (compare_tree_sccs_1): Do not compare\n\tDECL_FUNCTION_SPECIFIC_TARGET.\n\t(lto_read_decls): Re-build DECL_FUNCTION_SPECIFIC_TARGET.\n\nFrom-SVN: r207783", "tree": {"sha": "454195ec49d533fd5e1c98718baec5b7168b1341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/454195ec49d533fd5e1c98718baec5b7168b1341"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1966fd99d822c06cbfb667806ba8bcf1fecaef58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1966fd99d822c06cbfb667806ba8bcf1fecaef58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1966fd99d822c06cbfb667806ba8bcf1fecaef58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1966fd99d822c06cbfb667806ba8bcf1fecaef58/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b010d6017560bcc12beaf0c65ada17f878fa4f72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b010d6017560bcc12beaf0c65ada17f878fa4f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b010d6017560bcc12beaf0c65ada17f878fa4f72"}], "stats": {"total": 87, "additions": 42, "deletions": 45}, "files": [{"sha": "2a2e5d2d5dc64bd4dcad51b5aeb895b580c6b699", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1966fd99d822c06cbfb667806ba8bcf1fecaef58", "patch": "@@ -1,3 +1,19 @@\n+2014-02-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/60179\n+\t* lto-streamer-out.c (DFS_write_tree_body): Do not follow\n+\tDECL_FUNCTION_SPECIFIC_TARGET.\n+\t(hash_tree): Do not hash DECL_FUNCTION_SPECIFIC_TARGET.\n+\t* tree-streamer-out.c (pack_ts_target_option): Remove.\n+\t(streamer_pack_tree_bitfields): Do not stream\n+\tTS_TARGET_OPTION.\n+\t(write_ts_function_decl_tree_pointers): Do not stream\n+\tDECL_FUNCTION_SPECIFIC_TARGET.\n+\t* tree-streamer-in.c (unpack_ts_target_option): Remove.\n+\t(unpack_value_fields): Do not stream TS_TARGET_OPTION.\n+\t(lto_input_ts_function_decl_tree_pointers): Do not stream\n+\tDECL_FUNCTION_SPECIFIC_TARGET.\n+\n 2014-02-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-vect-loop.c (vect_is_slp_reduction): Don't set"}, {"sha": "0f37f1c24228149b3a04d10163c925e6fc814e84", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=1966fd99d822c06cbfb667806ba8bcf1fecaef58", "patch": "@@ -550,7 +550,7 @@ DFS_write_tree_body (struct output_block *ob,\n   if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n     {\n       DFS_follow_tree_edge (DECL_FUNCTION_PERSONALITY (expr));\n-      DFS_follow_tree_edge (DECL_FUNCTION_SPECIFIC_TARGET (expr));\n+      /* Do not DECL_FUNCTION_SPECIFIC_TARGET.  They will be regenerated.  */\n       DFS_follow_tree_edge (DECL_FUNCTION_SPECIFIC_OPTIMIZATION (expr));\n     }\n \n@@ -885,7 +885,7 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n \t\t\tstrlen (TRANSLATION_UNIT_LANGUAGE (t)), v);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    v = iterative_hash (t, sizeof (struct cl_target_option), v);\n+    gcc_unreachable ();\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n     v = iterative_hash (t, sizeof (struct cl_optimization), v);\n@@ -986,7 +986,7 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n   if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n     {\n       visit (DECL_FUNCTION_PERSONALITY (t));\n-      visit (DECL_FUNCTION_SPECIFIC_TARGET (t));\n+      /* Do not follow DECL_FUNCTION_SPECIFIC_TARGET.  */\n       visit (DECL_FUNCTION_SPECIFIC_OPTIMIZATION (t));\n     }\n "}, {"sha": "9b0c61a9c44ed51acbced4997ce77618d4373fc5", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=1966fd99d822c06cbfb667806ba8bcf1fecaef58", "patch": "@@ -1,3 +1,10 @@\n+2014-02-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/60179\n+\t* lto.c (compare_tree_sccs_1): Do not compare\n+\tDECL_FUNCTION_SPECIFIC_TARGET.\n+\t(lto_read_decls): Re-build DECL_FUNCTION_SPECIFIC_TARGET.\n+\n 2014-02-12  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/60060"}, {"sha": "c676d7912663e21b2eff53c323c27244f60b58b1", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=1966fd99d822c06cbfb667806ba8bcf1fecaef58", "patch": "@@ -1367,9 +1367,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       return false;\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    if (memcmp (TREE_TARGET_OPTION (t1), TREE_TARGET_OPTION (t2),\n-\t\tsizeof (struct cl_target_option)) != 0)\n-      return false;\n+    gcc_unreachable ();\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n     if (memcmp (TREE_OPTIMIZATION (t1), TREE_OPTIMIZATION (t2),\n@@ -1547,8 +1545,8 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n     {\n       compare_tree_edges (DECL_FUNCTION_PERSONALITY (t1),\n \t\t\t  DECL_FUNCTION_PERSONALITY (t2));\n-      compare_tree_edges (DECL_FUNCTION_SPECIFIC_TARGET (t1),\n-\t\t\t  DECL_FUNCTION_SPECIFIC_TARGET (t2));\n+      /* DECL_FUNCTION_SPECIFIC_TARGET is not yet created.  We compare\n+         the attribute list instead.  */\n       compare_tree_edges (DECL_FUNCTION_SPECIFIC_OPTIMIZATION (t1),\n \t\t\t  DECL_FUNCTION_SPECIFIC_OPTIMIZATION (t2));\n     }\n@@ -1926,6 +1924,15 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n \t      if (TREE_CODE (t) == INTEGER_CST\n \t\t  && !TREE_OVERFLOW (t))\n \t\tcache_integer_cst (t);\n+\t      /* Re-build DECL_FUNCTION_SPECIFIC_TARGET, we need that\n+\t         for both WPA and LTRANS stage.  */\n+\t      if (TREE_CODE (t) == FUNCTION_DECL)\n+\t\t{\n+\t\t  tree attr = lookup_attribute (\"target\", DECL_ATTRIBUTES (t));\n+\t\t  if (attr)\n+\t\t    targetm.target_option.valid_attribute_p\n+\t\t\t(t, NULL_TREE, TREE_VALUE (attr), 0);\n+\t\t}\n \t      /* Register TYPE_DECLs with the debuginfo machinery.  */\n \t      if (!flag_wpa\n \t\t  && TREE_CODE (t) == TYPE_DECL)"}, {"sha": "b02bb6bd0a0d0da2c7bfa632db94ed5e994ab04e", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=1966fd99d822c06cbfb667806ba8bcf1fecaef58", "patch": "@@ -394,21 +394,6 @@ unpack_ts_translation_unit_decl_value_fields (struct data_in *data_in,\n   vec_safe_push (all_translation_units, expr);\n }\n \n-/* Unpack a TS_TARGET_OPTION tree from BP into EXPR.  */\n-\n-static void\n-unpack_ts_target_option (struct bitpack_d *bp, tree expr)\n-{\n-  unsigned i, len;\n-  struct cl_target_option *t = TREE_TARGET_OPTION (expr);\n-\n-  len = sizeof (struct cl_target_option);\n-  for (i = 0; i < len; i++)\n-    ((unsigned char *)t)[i] = bp_unpack_value (bp, 8);\n-  if (bp_unpack_value (bp, 32) != 0x12345678)\n-    fatal_error (\"cl_target_option size mismatch in LTO reader and writer\");\n-}\n-\n /* Unpack a TS_OPTIMIZATION tree from BP into EXPR.  */\n \n static void\n@@ -517,7 +502,7 @@ unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n     unpack_ts_translation_unit_decl_value_fields (data_in, bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    unpack_ts_target_option (bp, expr);\n+    gcc_unreachable ();\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n     unpack_ts_optimization (bp, expr);\n@@ -796,7 +781,7 @@ lto_input_ts_function_decl_tree_pointers (struct lto_input_block *ib,\n   /* DECL_STRUCT_FUNCTION is handled by lto_input_function.  FIXME lto,\n      maybe it should be handled here?  */\n   DECL_FUNCTION_PERSONALITY (expr) = stream_read_tree (ib, data_in);\n-  DECL_FUNCTION_SPECIFIC_TARGET (expr) = stream_read_tree (ib, data_in);\n+  /* DECL_FUNCTION_SPECIFIC_TARGET is regenerated from attributes.  */\n   DECL_FUNCTION_SPECIFIC_OPTIMIZATION (expr) = stream_read_tree (ib, data_in);\n \n   /* If the file contains a function with an EH personality set,"}, {"sha": "646fba52688f7055cbbd8c274f8530f152b2b05e", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1966fd99d822c06cbfb667806ba8bcf1fecaef58/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=1966fd99d822c06cbfb667806ba8bcf1fecaef58", "patch": "@@ -353,24 +353,6 @@ pack_ts_translation_unit_decl_value_fields (struct output_block *ob,\n   bp_pack_string (ob, bp, TRANSLATION_UNIT_LANGUAGE (expr), true);\n }\n \n-/* Pack a TS_TARGET_OPTION tree in EXPR to BP.  */\n-\n-static void\n-pack_ts_target_option (struct bitpack_d *bp, tree expr)\n-{\n-  struct cl_target_option *t = TREE_TARGET_OPTION (expr);\n-  unsigned i, len;\n-\n-  /* The cl_target_option is target specific and generated by the options\n-     awk script, so we just recreate a byte-by-byte copy here. */\n-\n-  len = sizeof (struct cl_target_option);\n-  for (i = 0; i < len; i++)\n-    bp_pack_value (bp, ((unsigned char *)t)[i], 8);\n-  /* Catch struct size mismatches between reader and writer. */\n-  bp_pack_value (bp, 0x12345678, 32);\n-}\n-\n /* Pack a TS_OPTIMIZATION tree in EXPR to BP.  */\n \n static void\n@@ -481,7 +463,7 @@ streamer_pack_tree_bitfields (struct output_block *ob,\n     pack_ts_translation_unit_decl_value_fields (ob, bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    pack_ts_target_option (bp, expr);\n+    gcc_unreachable ();\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n     pack_ts_optimization (bp, expr);\n@@ -716,7 +698,7 @@ write_ts_function_decl_tree_pointers (struct output_block *ob, tree expr,\n   /* DECL_STRUCT_FUNCTION is handled by lto_output_function.  FIXME lto,\n      maybe it should be handled here?  */\n   stream_write_tree (ob, DECL_FUNCTION_PERSONALITY (expr), ref_p);\n-  stream_write_tree (ob, DECL_FUNCTION_SPECIFIC_TARGET (expr), ref_p);\n+  /* DECL_FUNCTION_SPECIFIC_TARGET is regenerated.  */\n   stream_write_tree (ob, DECL_FUNCTION_SPECIFIC_OPTIMIZATION (expr), ref_p);\n }\n "}]}