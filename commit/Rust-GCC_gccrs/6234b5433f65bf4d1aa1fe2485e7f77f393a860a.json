{"sha": "6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIzNGI1NDMzZjY1YmY0ZDFhYTFmZTI0ODVlN2Y3N2YzOTNhODYwYQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2015-03-11T21:34:22Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2015-03-11T21:34:22Z"}, "message": "PR 65200 Handle EPERM in addition to EACCES.\n\ngcc/fortran ChangeLog:\n\n2015-03-11  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/65200\n\t* gfortran.texi: Document behavior when opening files without\n\texplicit ACTION= specifier.\n\nlibgfortran ChangeLog:\n\n2015-03-11  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/65200\n\t* io/open.c (new_unit): Use gf_strerror rather than hardcoding\n\terror messages for different errno values.\n\t* io/unix.c (regular_file2): Handle EPERM in addition to EACCES.\n\ngcc/testsuite ChangeLog:\n\n2015-03-11  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/65200\n\t* gfortran.dg/open_errors.f90: Update checks for iomsg string.\n\t* gfortran.dg/open_new_segv.f90: Fix error message pattern.\n\nFrom-SVN: r221361", "tree": {"sha": "675691d7e2fb5c94061765a40741e081281af137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/675691d7e2fb5c94061765a40741e081281af137"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/comments", "author": null, "committer": null, "parents": [{"sha": "707550e43ef8d80a2e2213bc1f4b3af337092d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707550e43ef8d80a2e2213bc1f4b3af337092d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/707550e43ef8d80a2e2213bc1f4b3af337092d2a"}], "stats": {"total": 86, "additions": 52, "deletions": 34}, "files": [{"sha": "d7d854389e6883ac12d2b996d29cd4c463b2ba7d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "patch": "@@ -1,3 +1,9 @@\n+2015-03-11  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/65200\n+\t* gfortran.texi: Document behavior when opening files without\n+\texplicit ACTION= specifier.\n+\n 2015-03-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/65024"}, {"sha": "34999dbcf90e1e56f77aa0452b3828c6a95597de", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "patch": "@@ -1139,6 +1139,7 @@ might in some way or another become visible to the programmer.\n * Internal representation of LOGICAL variables::\n * Thread-safety of the runtime library::\n * Data consistency and durability::\n+* Files opened without an explicit ACTION= specifier::\n @end menu\n \n \n@@ -1328,6 +1329,22 @@ releasing @code{fcntl} file locks, if the server supports them, will\n also force cache validation and flushing dirty data and metadata.\n \n \n+@node Files opened without an explicit ACTION= specifier\n+@section Files opened without an explicit ACTION= specifier\n+@cindex open, action\n+\n+The Fortran standard says that if an @code{OPEN} statement is executed\n+without an explicit @code{ACTION=} specifier, the default value is\n+processor dependent.  GNU Fortran behaves as follows:\n+\n+@enumerate\n+@item Attempt to open the file with @code{ACTION='READWRITE'}\n+@item If that fails, try to open with @code{ACTION='READ'}\n+@item If that fails, try to open with @code{ACTION='WRITE'}\n+@item If that fails, generate an error\n+@end enumerate\n+\n+\n @c ---------------------------------------------------------------------\n @c Extensions\n @c ---------------------------------------------------------------------"}, {"sha": "f0a759bcf8802b4069de6b16912788df954395bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "patch": "@@ -1,3 +1,9 @@\n+2015-03-11  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/65200\n+\t* gfortran.dg/open_errors.f90: Update checks for iomsg string.\n+\t* gfortran.dg/open_new_segv.f90: Fix error message pattern.\n+\n 2015-03-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/asan/no-asan-check-glob.c: Add -ffat-lto-objects"}, {"sha": "23d4b3d807b1cc824c8c3a699428c1405f10ee6e", "filename": "gcc/testsuite/gfortran.dg/open_errors.f90", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_errors.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_errors.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_errors.f90?ref=6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "patch": "@@ -2,6 +2,9 @@\n ! PR30005 Enhanced error messages for OPEN\n ! Submitted by Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n ! See PR38956.  Test fails on cygwin when user has Administrator rights\n+! As of the fix for PR 65200, the error message is partly generated by\n+! strerror*(), so can depend on the target and the locale, so check\n+! only the beginning of the error string, which should be constant.\n character(60) :: msg\n character(25) :: n = \"temptestfile\"\n logical :: there\n@@ -13,24 +16,25 @@\n msg=\"\"\n open(77,file=n,status=\"new\", iomsg=msg, iostat=i)\n if (i == 0) call abort()\n-if (msg /= \"File 'temptestfile' already exists\") call abort()\n+if (msg(1:33) /= \"Cannot open file 'temptestfile': \") call abort()\n \n open(77,file=n,status=\"old\")\n close(77, status=\"delete\")\n open(77,file=n,status=\"old\", iomsg=msg, iostat=i)\n if (i == 0) call abort()\n-if (msg /= \"File 'temptestfile' does not exist\") call abort()\n+if (msg(1:33) /= \"Cannot open file 'temptestfile': \") call abort()\n \n open(77,file=\"./\", iomsg=msg, iostat=i)\n-if (msg /= \"'./' is a directory\" .and. msg /= \"Invalid argument\") call abort()\n+if (msg(1:23) /= \"Cannot open file './': \" &\n+     .and. msg /= \"Invalid argument\") call abort()\n \n open(77,file=n,status=\"new\")\n i = chmod(n, \"-w\")\n if (i == 0 .and. getuid() /= 0) then\n  close(77, status=\"keep\")\n  open(77,file=n, iomsg=msg, iostat=i, action=\"write\")\n  if (i == 0) call abort()\n- if (msg /= \"Permission denied trying to open file 'temptestfile'\") call abort()\n+ if (msg(1:33) /= \"Cannot open file 'temptestfile': \") call abort()\n endif\n \n i = chmod(n,\"+w\")"}, {"sha": "d9f28718bdacb901a6f7b2e2d3810b21e1ce92a5", "filename": "gcc/testsuite/gfortran.dg/open_new_segv.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_new_segv.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_new_segv.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fopen_new_segv.f90?ref=6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-shouldfail \"File already exists\" }\n+! { dg-shouldfail \"Cannot open file\" }\n ! PR 64770 SIGSEGV when trying to open an existing file with status=\"new\"\n program pr64770\n   implicit none\n@@ -10,5 +10,5 @@ program pr64770\n        status=\"new\")\n end program pr64770\n ! { dg-output \"At line 10 of file.*\" }\n-! { dg-output \"Fortran runtime error: File .pr64770test.dat. already exists\" }\n+! { dg-output \"Fortran runtime error: Cannot open file .pr64770test.dat.:\" }\n ! { dg-final { remote_file build delete \"pr64770test.dat\" } }"}, {"sha": "97ee01b59fca33b43d56d7cedfecb1d9f1babd74", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "patch": "@@ -1,3 +1,10 @@\n+2015-03-11  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/65200\n+\t* io/open.c (new_unit): Use gf_strerror rather than hardcoding\n+\terror messages for different errno values.\n+\t* io/unix.c (regular_file2): Handle EPERM in addition to EACCES.\n+\n 2015-03-10  Alessandro Fanfarillo  <fanfarillo.gcc@gmail.com>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "4654de27bd16418076c116fa68991e559381868a", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "patch": "@@ -502,34 +502,12 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags * flags)\n   s = open_external (opp, flags);\n   if (s == NULL)\n     {\n+      char errbuf[256];\n       char *path = fc_strdup (opp->file, opp->file_len);\n-      size_t msglen = opp->file_len + 51;\n+      size_t msglen = opp->file_len + 22 + sizeof (errbuf);\n       char *msg = xmalloc (msglen);\n-\n-      switch (errno)\n-\t{\n-\tcase ENOENT: \n-\t  snprintf (msg, msglen, \"File '%s' does not exist\", path);\n-\t  break;\n-\n-\tcase EEXIST:\n-\t  snprintf (msg, msglen, \"File '%s' already exists\", path);\n-\t  break;\n-\n-\tcase EACCES:\n-\t  snprintf (msg, msglen, \n-\t\t    \"Permission denied trying to open file '%s'\", path);\n-\t  break;\n-\n-\tcase EISDIR:\n-\t  snprintf (msg, msglen, \"'%s' is a directory\", path);\n-\t  break;\n-\n-\tdefault:\n-\t  free (msg);\n-\t  msg = NULL;\n-\t}\n-\n+      snprintf (msg, msglen, \"Cannot open file '%s': %s\", path,\n+\t\tgf_strerror (errno, errbuf, sizeof (errbuf)));\n       generate_error (&opp->common, LIBERROR_OS, msg);\n       free (msg);\n       free (path);"}, {"sha": "e5fc6e19818dcccca662c946e8ea5c7d5b299436", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6234b5433f65bf4d1aa1fe2485e7f77f393a860a/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=6234b5433f65bf4d1aa1fe2485e7f77f393a860a", "patch": "@@ -1353,7 +1353,7 @@ regular_file2 (const char *path, st_parameter_open *opp, unit_flags *flags)\n       flags->action = ACTION_READWRITE;\n       return fd;\n     }\n-  if (errno != EACCES && errno != EROFS)\n+  if (errno != EACCES && errno != EPERM && errno != EROFS)\n      return fd;\n \n   /* retry for read-only access */\n@@ -1369,7 +1369,7 @@ regular_file2 (const char *path, st_parameter_open *opp, unit_flags *flags)\n       return fd;\t\t/* success */\n     }\n   \n-  if (errno != EACCES && errno != ENOENT)\n+  if (errno != EACCES && errno != EPERM && errno != ENOENT)\n     return fd;\t\t\t/* failure */\n \n   /* retry for write-only access */"}]}