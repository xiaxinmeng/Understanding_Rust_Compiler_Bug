{"sha": "114ce554bdb49bf797892ed05e89df719bb7635d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0Y2U1NTRiZGI0OWJmNzk3ODkyZWQwNWU4OWRmNzE5YmI3NjM1ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-01-17T13:43:37Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-01-17T13:43:37Z"}, "message": "sparc.c (sparc_sr_alias_set): Don't define.\n\n\t* config/sparc/sparc.c (sparc_sr_alias_set): Don't define.\n\t(struct_value_alias_set): Don't define.\n\t(sparc_option_override): Don't set sparc_sr_alias_set and\n\tstruct_value_alias_set.\n\t(save_or_restore_regs): Use gen_frame_mem rather than calling\n\tset_mem_alias_set.\n\t(sparc_struct_value_rtx): Likewise.\n\nFrom-SVN: r168901", "tree": {"sha": "ac01c3b457929ed704b737c7c909386d6a57f12d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac01c3b457929ed704b737c7c909386d6a57f12d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/114ce554bdb49bf797892ed05e89df719bb7635d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114ce554bdb49bf797892ed05e89df719bb7635d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114ce554bdb49bf797892ed05e89df719bb7635d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114ce554bdb49bf797892ed05e89df719bb7635d/comments", "author": null, "committer": null, "parents": [{"sha": "98c6d93c59237dad552956a69fc6b6057b9498a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c6d93c59237dad552956a69fc6b6057b9498a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c6d93c59237dad552956a69fc6b6057b9498a4"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "2551eba6945d66a11b262e2b3e8e7448c646a51f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114ce554bdb49bf797892ed05e89df719bb7635d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114ce554bdb49bf797892ed05e89df719bb7635d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=114ce554bdb49bf797892ed05e89df719bb7635d", "patch": "@@ -1,3 +1,13 @@\n+2011-01-17  Ian Lance Taylor  <iant@google.com>\n+\n+\t* config/sparc/sparc.c (sparc_sr_alias_set): Don't define.\n+\t(struct_value_alias_set): Don't define.\n+\t(sparc_option_override): Don't set sparc_sr_alias_set and\n+\tstruct_value_alias_set.\n+\t(save_or_restore_regs): Use gen_frame_mem rather than calling\n+\tset_mem_alias_set.\n+\t(sparc_struct_value_rtx): Likewise.\n+\n 2011-01-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/47318"}, {"sha": "109aa1b27c3898f1e5ed4655d3a587d217bceb80", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114ce554bdb49bf797892ed05e89df719bb7635d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114ce554bdb49bf797892ed05e89df719bb7635d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=114ce554bdb49bf797892ed05e89df719bb7635d", "patch": "@@ -300,12 +300,6 @@ static HOST_WIDE_INT actual_fsize;\n    saved (as 4-byte quantities).  */\n static int num_gfregs;\n \n-/* The alias set for prologue/epilogue register save/restore.  */\n-static GTY(()) alias_set_type sparc_sr_alias_set;\n-\n-/* The alias set for the structure return value.  */\n-static GTY(()) alias_set_type struct_value_alias_set;\n-\n /* Vector to say how input registers are mapped to output registers.\n    HARD_FRAME_POINTER_REGNUM cannot be remapped by this function to\n    eliminate it.  You must use -fomit-frame-pointer to get that.  */\n@@ -912,10 +906,6 @@ sparc_option_override (void)\n   /* Do various machine dependent initializations.  */\n   sparc_init_modes ();\n \n-  /* Acquire unique alias sets for our private stuff.  */\n-  sparc_sr_alias_set = new_alias_set ();\n-  struct_value_alias_set = new_alias_set ();\n-\n   /* Set up function hooks.  */\n   init_machine_status = sparc_init_machine_status;\n \n@@ -4381,8 +4371,7 @@ save_or_restore_regs (int low, int high, rtx base, int offset, int action)\n \t{\n \t  if (df_regs_ever_live_p (i) && ! call_used_regs[i])\n \t    {\n-\t      mem = gen_rtx_MEM (DImode, plus_constant (base, offset));\n-\t      set_mem_alias_set (mem, sparc_sr_alias_set);\n+\t      mem = gen_frame_mem (DImode, plus_constant (base, offset));\n \t      if (action == SORR_SAVE)\n \t\t{\n \t\t  insn = emit_move_insn (mem, gen_rtx_REG (DImode, i));\n@@ -4422,8 +4411,7 @@ save_or_restore_regs (int low, int high, rtx base, int offset, int action)\n \t  else\n \t    continue;\n \n-\t  mem = gen_rtx_MEM (mode, plus_constant (base, offset));\n-\t  set_mem_alias_set (mem, sparc_sr_alias_set);\n+\t  mem = gen_frame_mem (mode, plus_constant (base, offset));\n \t  if (action == SORR_SAVE)\n \t    {\n \t      insn = emit_move_insn (mem, gen_rtx_REG (mode, regno));\n@@ -6087,11 +6075,11 @@ sparc_struct_value_rtx (tree fndecl, int incoming)\n       rtx mem;\n \n       if (incoming)\n-\tmem = gen_rtx_MEM (Pmode, plus_constant (frame_pointer_rtx,\n-\t\t\t\t\t\t STRUCT_VALUE_OFFSET));\n+\tmem = gen_frame_mem (Pmode, plus_constant (frame_pointer_rtx,\n+\t\t\t\t\t\t   STRUCT_VALUE_OFFSET));\n       else\n-\tmem = gen_rtx_MEM (Pmode, plus_constant (stack_pointer_rtx,\n-\t\t\t\t\t\t STRUCT_VALUE_OFFSET));\n+\tmem = gen_frame_mem (Pmode, plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t   STRUCT_VALUE_OFFSET));\n \n       /* Only follow the SPARC ABI for fixed-size structure returns.\n          Variable size structure returns are handled per the normal\n@@ -6133,7 +6121,6 @@ sparc_struct_value_rtx (tree fndecl, int incoming)\n \t  emit_label (endlab);\n \t}\n \n-      set_mem_alias_set (mem, struct_value_alias_set);\n       return mem;\n     }\n }"}]}