{"sha": "cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzMDM3MTk5YzhlM2NhOWY3OTgyZWMzYTAwMjRmOGFiMDA3Y2ZiYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-09-09T11:59:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-09-09T11:59:45Z"}, "message": "re PR c++/62255 (Introducing an unrelated template parameter causes compilation to fail)\n\n\tPR c++/62255\n\t* pt.c (instantiate_decl): Handle recursive instantiation of\n\tstatic data member.\n\nFrom-SVN: r215062", "tree": {"sha": "accff89b25d5d74b30830f7bb127bc7d568bdca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/accff89b25d5d74b30830f7bb127bc7d568bdca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b27832edcf1a344c9e2ba94c68b0ceef2d141f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27832edcf1a344c9e2ba94c68b0ceef2d141f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27832edcf1a344c9e2ba94c68b0ceef2d141f7b"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "6447bc71795b16348b29c8c3f743d50791ab639e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb", "patch": "@@ -1,3 +1,9 @@\n+2014-09-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/62255\n+\t* pt.c (instantiate_decl): Handle recursive instantiation of\n+\tstatic data member.\n+\n 2014-09-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/62659"}, {"sha": "38093ecd67d501c1c8883b90b857166b3365e688", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb", "patch": "@@ -19996,13 +19996,18 @@ instantiate_decl (tree d, int defer_ok,\n \t\t\t      args,\n \t\t\t      tf_warning_or_error, NULL_TREE,\n \t\t\t      /*integral_constant_expression_p=*/false);\n-\t  /* Make sure the initializer is still constant, in case of\n-\t     circular dependency (template/instantiate6.C). */\n-\t  const_init\n-\t    = DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (code_pattern);\n-\t  cp_finish_decl (d, init, /*init_const_expr_p=*/const_init,\n-\t\t\t  /*asmspec_tree=*/NULL_TREE,\n-\t\t\t  LOOKUP_ONLYCONVERTING);\n+\t  /* If instantiating the initializer involved instantiating this\n+\t     again, don't call cp_finish_decl twice.  */\n+\t  if (!DECL_INITIAL (d))\n+\t    {\n+\t      /* Make sure the initializer is still constant, in case of\n+\t\t circular dependency (template/instantiate6.C). */\n+\t      const_init\n+\t\t= DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (code_pattern);\n+\t      cp_finish_decl (d, init, /*init_const_expr_p=*/const_init,\n+\t\t\t      /*asmspec_tree=*/NULL_TREE,\n+\t\t\t      LOOKUP_ONLYCONVERTING);\n+\t    }\n \t  if (enter_context)\n \t    pop_nested_class ();\n \t  pop_nested_namespace (ns);"}, {"sha": "ee8d1b70df91d30b26180c7df40a18b39f128d1f", "filename": "gcc/testsuite/g++.dg/template/recurse4.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Frecurse4.C?ref=cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/62255\n+\n+// It's not clear whether this is well-formed; instantiating the\n+// initializer of 'value' causes the instantiation of Derived, which in\n+// turn requires the value of 'value', but the recursion ends there, so it\n+// seems reasonable to allow it.\n+\n+template <typename T> struct Test {\n+  template<typename X> static int check(typename X::Type*);\n+  template<typename> static char check(...);\n+  static const bool value = (sizeof(check<T>(0)) == sizeof(int));\n+};\n+template <int> struct Sink { };\n+template <typename T> struct Derived : Sink<Test<Derived<T> >::value> {\n+  typedef int Type;\n+};\n+\n+Sink<Test<Derived<int> >::value> s;"}]}