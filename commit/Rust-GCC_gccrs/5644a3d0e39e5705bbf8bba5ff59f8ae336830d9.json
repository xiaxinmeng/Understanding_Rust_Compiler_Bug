{"sha": "5644a3d0e39e5705bbf8bba5ff59f8ae336830d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY0NGEzZDBlMzllNTcwNWJiZjhiYmE1ZmY1OWY4YWUzMzY4MzBkOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-03-18T20:15:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-18T20:15:05Z"}, "message": "re PR rtl-optimization/43058 (var-tracking uses up all virtual memory)\n\n\tPR debug/43058\n\t* var-tracking.c (non_suitable_const): New function.\n\t(add_uses): For DEBUG_INSNs with constants, don't record any\n\tvalue, instead just the constant value itself.\n\t(compute_bb_dataflow) <case MO_VAL_LOC>: If PAT_VAR_LOCATION_LOC\n\tis not VAR_LOC_UNKNOWN_P, set var to the constant.\n\t(emit_notes_in_bb): Likewise.\n\t(emit_note_insn_var_location): For onepart variables if\n\tcur_loc is a VOIDmode constant, use DECL_MODE.\n\n\t* gcc.dg/pr43058.c: New test.\n\nFrom-SVN: r157547", "tree": {"sha": "0bfa407d0115ac5a0e33cddaa34238222042382f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bfa407d0115ac5a0e33cddaa34238222042382f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8132a837da9fb586a5fd2596528178f9ea6f97a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8132a837da9fb586a5fd2596528178f9ea6f97a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8132a837da9fb586a5fd2596528178f9ea6f97a2"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "26d70d1c2c5f75d305d735c2bbc0b778cc1baf96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5644a3d0e39e5705bbf8bba5ff59f8ae336830d9", "patch": "@@ -1,3 +1,15 @@\n+2010-03-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/43058\n+\t* var-tracking.c (non_suitable_const): New function.\n+\t(add_uses): For DEBUG_INSNs with constants, don't record any\n+\tvalue, instead just the constant value itself.\n+\t(compute_bb_dataflow) <case MO_VAL_LOC>: If PAT_VAR_LOCATION_LOC\n+\tis not VAR_LOC_UNKNOWN_P, set var to the constant.\n+\t(emit_notes_in_bb): Likewise.\n+\t(emit_note_insn_var_location): For onepart variables if\n+\tcur_loc is a VOIDmode constant, use DECL_MODE.\n+\n 2010-03-18  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/42450"}, {"sha": "62554cd3ac581b3869daa55b5cf44e280057a3b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5644a3d0e39e5705bbf8bba5ff59f8ae336830d9", "patch": "@@ -1,3 +1,8 @@\n+2010-03-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/43058\n+\t* gcc.dg/pr43058.c: New test.\n+\n 2010-03-18  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/42450"}, {"sha": "50d8a63bb8f50d2044bbefa5f80dddd5ad7a62a7", "filename": "gcc/testsuite/gcc.dg/pr43058.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43058.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43058.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr43058.c?ref=5644a3d0e39e5705bbf8bba5ff59f8ae336830d9", "patch": "@@ -0,0 +1,20 @@\n+/* PR debug/43058 */\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O2\" } */\n+\n+extern void *f1 (void *, void *, void *);\n+extern void *f2 (const char *, int, int, int, void *(*) ());\n+extern void *f3 (const char *);\n+extern void *f4 (void *s);\n+extern void *f5 (void *);\n+\n+void test (void)\n+{\n+#define X1 f1 (f2 (\"a\", 1, 0, 0, f5), \\\n+\t       f4 (({ const char *a = \"b\"; f3 (a); })), \\\n+\t       ({ const char *a = \"c\"; f3 (a); }));\n+#define X2 X1 X1 X1 X1 X1 X1 X1 X1 X1 X1\n+#define X3 X2 X2 X2 X2 X2 X2 X2 X2 X2 X2\n+#define X4 X3 X3 X3 X3 X3 X3 X3 X3 X3 X3\n+  X4 X4\n+}"}, {"sha": "8b4f2f397b3d3aea2916c0dcd9017993db9b32b3", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5644a3d0e39e5705bbf8bba5ff59f8ae336830d9/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=5644a3d0e39e5705bbf8bba5ff59f8ae336830d9", "patch": "@@ -4738,6 +4738,33 @@ preserve_value (cselib_val *val)\n   VEC_safe_push (rtx, heap, preserved_values, val->val_rtx);\n }\n \n+/* Helper function for MO_VAL_LOC handling.  Return non-zero if\n+   any rtxes not suitable for CONST use not replaced by VALUEs\n+   are discovered.  */\n+\n+static int\n+non_suitable_const (rtx *x, void *data ATTRIBUTE_UNUSED)\n+{\n+  if (*x == NULL_RTX)\n+    return 0;\n+\n+  switch (GET_CODE (*x))\n+    {\n+    case REG:\n+    case DEBUG_EXPR:\n+    case PC:\n+    case SCRATCH:\n+    case CC0:\n+    case ASM_INPUT:\n+    case ASM_OPERANDS:\n+      return 1;\n+    case MEM:\n+      return !MEM_READONLY_P (*x);\n+    default:\n+      return 0;\n+    }\n+}\n+\n /* Add uses (register and memory references) LOC which will be tracked\n    to VTI (bb)->mos.  INSN is instruction which the LOC is part of.  */\n \n@@ -4794,8 +4821,12 @@ add_uses (rtx *ploc, void *data)\n \t\t}\n \t    }\n \n-\t  if (!VAR_LOC_UNKNOWN_P (vloc)\n-\t      && (val = find_use_val (vloc, GET_MODE (oloc), cui)))\n+\t  if (CONSTANT_P (vloc)\n+\t      && (GET_CODE (vloc) != CONST\n+\t\t  || for_each_rtx (&vloc, non_suitable_const, NULL)))\n+\t    /* For constants don't look up any value.  */;\n+\t  else if (!VAR_LOC_UNKNOWN_P (vloc)\n+\t\t   && (val = find_use_val (vloc, GET_MODE (oloc), cui)))\n \t    {\n \t      enum machine_mode mode2;\n \t      enum micro_operation_type type2;\n@@ -5508,6 +5539,11 @@ compute_bb_dataflow (basic_block bb)\n \t\t\t\t     VAR_INIT_STATUS_INITIALIZED, NULL_RTX,\n \t\t\t\t     INSERT);\n \t\t}\n+\t      else if (!VAR_LOC_UNKNOWN_P (PAT_VAR_LOCATION_LOC (vloc)))\n+\t\tset_variable_part (out, PAT_VAR_LOCATION_LOC (vloc),\n+\t\t\t\t   dv_from_decl (var), 0,\n+\t\t\t\t   VAR_INIT_STATUS_INITIALIZED, NULL_RTX,\n+\t\t\t\t   INSERT);\n \t    }\n \t    break;\n \n@@ -6902,6 +6938,8 @@ emit_note_insn_var_location (void **varp, void *data)\n \t}\n       loc[n_var_parts] = loc2;\n       mode = GET_MODE (var->var_part[i].cur_loc);\n+      if (mode == VOIDmode && dv_onepart_p (var->dv))\n+\tmode = DECL_MODE (decl);\n       for (lc = var->var_part[i].loc_chain; lc; lc = lc->next)\n \tif (var->var_part[i].cur_loc == lc->loc)\n \t  {\n@@ -7423,6 +7461,11 @@ emit_notes_in_bb (basic_block bb, dataflow_set *set)\n \t\t\t\t     VAR_INIT_STATUS_INITIALIZED, NULL_RTX,\n \t\t\t\t     INSERT);\n \t\t}\n+\t      else if (!VAR_LOC_UNKNOWN_P (PAT_VAR_LOCATION_LOC (vloc)))\n+\t\tset_variable_part (set, PAT_VAR_LOCATION_LOC (vloc),\n+\t\t\t\t   dv_from_decl (var), 0,\n+\t\t\t\t   VAR_INIT_STATUS_INITIALIZED, NULL_RTX,\n+\t\t\t\t   INSERT);\n \n \t      emit_notes_for_changes (insn, EMIT_NOTE_AFTER_INSN, set->vars);\n \t    }"}]}