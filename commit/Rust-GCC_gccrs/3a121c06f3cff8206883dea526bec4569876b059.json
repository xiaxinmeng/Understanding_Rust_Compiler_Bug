{"sha": "3a121c06f3cff8206883dea526bec4569876b059", "node_id": "C_kwDOANBUbNoAKDNhMTIxYzA2ZjNjZmY4MjA2ODgzZGVhNTI2YmVjNDU2OTg3NmIwNTk", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-17T13:27:42Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-01-17T13:27:42Z"}, "message": "PR-108404 M2RTS_Halt fails with a segv\n\nPR-108404 occurs because the C prototype does not match the Modula-2\nprocedure M2RTS_Halt.  This patch provides a new procedure M2RTS_HaltC\nwhich avoids the C/C++ code from having to fabricate a Modula-2 string.\n\ngcc/m2/ChangeLog:\n\n\t* gm2-libs-iso/M2RTS.def (Halt): Parameter file renamed to filename.\n\t(HaltC): New procedure declaration.\n\t(ErrorMessage): Parameter file renamed to filename.\n\t* gm2-libs-iso/M2RTS.mod (Halt): Parameter file renamed to\n\tfilename.\n\t(HaltC): New procedure implementation.\n\t(ErrorStringC): New procedure implementation.\n\t(ErrorMessageC): New procedure implementation.\n\t* gm2-libs/M2RTS.def (Halt): Parameter file renamed to filename.\n\t(HaltC): New procedure declaration.\n\t(ErrorMessage): Parameter file renamed to filename.\n\t* gm2-libs/M2RTS.mod (Halt): Parameter file renamed to filename.\n\t(HaltC): New procedure implementation.\n\t(ErrorStringC): New procedure implementation.\n\t(ErrorMessageC): New procedure implementation.\n\nlibgm2/ChangeLog:\n\n\t* libm2iso/RTco.cc (_M2_RTco_fini): Call M2RTS_HaltC.\n\t(newSem): Call M2RTS_HaltC.\n\t(currentThread): Call M2RTS_HaltC.\n\t(never): Call M2RTS_HaltC.\n\t(defined): Call M2RTS_HaltC.\n\t(initThread): Call M2RTS_HaltC.\n\t(RTco_transfer): Call M2RTS_HaltC.\n\t* libm2iso/m2rts.h (M2RTS_Halt): Provide parameter names.\n\t(M2RTS_HaltC): New procedure declaration.\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "7a024766402de858f01a52fd3c99b1571562b0a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a024766402de858f01a52fd3c99b1571562b0a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a121c06f3cff8206883dea526bec4569876b059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a121c06f3cff8206883dea526bec4569876b059", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a121c06f3cff8206883dea526bec4569876b059", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a121c06f3cff8206883dea526bec4569876b059/comments", "author": null, "committer": null, "parents": [{"sha": "be6d1a76d7eec27be54c4d0f5926da0e7fbf7837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6d1a76d7eec27be54c4d0f5926da0e7fbf7837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6d1a76d7eec27be54c4d0f5926da0e7fbf7837"}], "stats": {"total": 231, "additions": 183, "deletions": 48}, "files": [{"sha": "6958fd416675553a858bab5905e8f519cf39be98", "filename": "gcc/m2/gm2-libs-iso/M2RTS.def", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a121c06f3cff8206883dea526bec4569876b059/gcc%2Fm2%2Fgm2-libs-iso%2FM2RTS.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a121c06f3cff8206883dea526bec4569876b059/gcc%2Fm2%2Fgm2-libs-iso%2FM2RTS.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-libs-iso%2FM2RTS.def?ref=3a121c06f3cff8206883dea526bec4569876b059", "patch": "@@ -111,13 +111,24 @@ PROCEDURE HALT ([exitcode: INTEGER = -1]) ;\n \n (*\n    Halt - provides a more user friendly version of HALT, which takes\n-          four parameters to aid debugging.\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n *)\n \n-PROCEDURE Halt (file: ARRAY OF CHAR; line: CARDINAL;\n+PROCEDURE Halt (filename: ARRAY OF CHAR; line: CARDINAL;\n                 function: ARRAY OF CHAR; description: ARRAY OF CHAR) ;\n \n \n+(*\n+   HaltC - provides a more user friendly version of HALT, which takes\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n+*)\n+\n+PROCEDURE HaltC (filename: ADDRESS; line: CARDINAL;\n+                 function, description: ADDRESS) ;\n+\n+\n (*\n    ExitOnHalt - if HALT is executed then call exit with the exit code, e.\n *)\n@@ -130,7 +141,7 @@ PROCEDURE ExitOnHalt (e: INTEGER) ;\n *)\n \n PROCEDURE ErrorMessage (message: ARRAY OF CHAR;\n-                        file: ARRAY OF CHAR;\n+                        filename: ARRAY OF CHAR;\n                         line: CARDINAL;\n                         function: ARRAY OF CHAR) ;\n "}, {"sha": "cbe70a958d17bef0856cd0e3b6277ee59740e788", "filename": "gcc/m2/gm2-libs-iso/M2RTS.mod", "status": "modified", "additions": 67, "deletions": 13, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a121c06f3cff8206883dea526bec4569876b059/gcc%2Fm2%2Fgm2-libs-iso%2FM2RTS.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a121c06f3cff8206883dea526bec4569876b059/gcc%2Fm2%2Fgm2-libs-iso%2FM2RTS.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-libs-iso%2FM2RTS.mod?ref=3a121c06f3cff8206883dea526bec4569876b059", "patch": "@@ -27,7 +27,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n IMPLEMENTATION MODULE M2RTS ;\n \n \n-FROM libc IMPORT abort, exit, write, getenv, printf ;\n+FROM libc IMPORT abort, exit, write, getenv, printf, strlen ;\n (* FROM Builtins IMPORT strncmp, strcmp ;  not available during bootstrap.  *)\n FROM NumberIO IMPORT CardToStr ;\n FROM StrLib IMPORT StrCopy, StrLen, StrEqual ;\n@@ -39,6 +39,9 @@ IMPORT RTExceptions ;\n IMPORT M2EXCEPTION ;\n IMPORT M2Dependent ;\n \n+CONST\n+   stderrFd = 2 ;\n+\n TYPE\n    PtrToChar = POINTER TO CHAR ;\n \n@@ -255,47 +258,98 @@ PROCEDURE ErrorString (a: ARRAY OF CHAR) ;\n VAR\n    n: INTEGER ;\n BEGIN\n-   n := write (2, ADR (a), StrLen (a))\n+   n := write (stderrFd, ADR (a), StrLen (a))\n END ErrorString ;\n \n \n+(*\n+   ErrorStringC - writes a string to stderr.\n+*)\n+\n+PROCEDURE ErrorStringC (str: ADDRESS) ;\n+VAR\n+   len: INTEGER ;\n+BEGIN\n+   len := write (stderrFd, str, strlen (str))\n+END ErrorStringC ;\n+\n+\n (*\n    ErrorMessage - emits an error message to stderr and then calls exit (1).\n *)\n \n PROCEDURE ErrorMessage (message: ARRAY OF CHAR;\n-                        file: ARRAY OF CHAR;\n+                        filename: ARRAY OF CHAR;\n                         line: CARDINAL;\n                         function: ARRAY OF CHAR) <* noreturn *> ;\n VAR\n-   LineNo: ARRAY [0..10] OF CHAR ;\n+   buffer: ARRAY [0..10] OF CHAR ;\n BEGIN\n-   ErrorString (file) ; ErrorString(':') ;\n-   CardToStr (line, 0, LineNo) ;\n-   ErrorString (LineNo) ; ErrorString(':') ;\n+   ErrorString (filename) ; ErrorString(':') ;\n+   CardToStr (line, 0, buffer) ;\n+   ErrorString (buffer) ; ErrorString(':') ;\n    IF NOT StrEqual (function, '')\n    THEN\n       ErrorString ('in ') ;\n       ErrorString (function) ;\n       ErrorString (' has caused ') ;\n    END ;\n    ErrorString (message) ;\n-   LineNo[0] := nl ; LineNo[1] := nul ;\n-   ErrorString (LineNo) ;\n+   buffer[0] := nl ; buffer[1] := nul ;\n+   ErrorString (buffer) ;\n    exit (1)\n END ErrorMessage ;\n \n \n+(*\n+   ErrorMessageC - emits an error message to stderr and then calls exit (1).\n+*)\n+\n+PROCEDURE ErrorMessageC (message, filename: ADDRESS;\n+                         line: CARDINAL;\n+                         function: ADDRESS) <* noreturn *> ;\n+VAR\n+   buffer: ARRAY [0..10] OF CHAR ;\n+BEGIN\n+   ErrorStringC (filename) ; ErrorString (':') ;\n+   CardToStr (line, 0, buffer) ;\n+   ErrorString (buffer) ; ErrorString(':') ;\n+   IF strlen (function) > 0\n+   THEN\n+      ErrorString ('in ') ;\n+      ErrorStringC (function) ;\n+      ErrorString (' has caused ') ;\n+   END ;\n+   ErrorStringC (message) ;\n+   buffer[0] := nl ; buffer[1] := nul ;\n+   ErrorString (buffer) ;\n+   exit (1)\n+END ErrorMessageC ;\n+\n+\n+(*\n+   HaltC - provides a more user friendly version of HALT, which takes\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n+*)\n+\n+PROCEDURE HaltC (filename: ADDRESS; line: CARDINAL;\n+                 function, description: ADDRESS) ;\n+BEGIN\n+   ErrorMessageC (description, filename, line, function)\n+END HaltC ;\n+\n+\n (*\n    Halt - provides a more user friendly version of HALT, which takes\n-          four parameters to aid debugging.\n+          four parameters to aid debugging.  It writes an error message\n+          to stderr and calls exit (1).\n *)\n \n-PROCEDURE Halt (file: ARRAY OF CHAR; line: CARDINAL;\n+PROCEDURE Halt (filename: ARRAY OF CHAR; line: CARDINAL;\n                 function: ARRAY OF CHAR; description: ARRAY OF CHAR) ;\n BEGIN\n-   ErrorMessage (description, file, line, function) ;\n-   HALT\n+   ErrorMessage (description, filename, line, function)\n END Halt ;\n \n "}, {"sha": "b551725126e005682c876237b96fb47936b2496e", "filename": "gcc/m2/gm2-libs/M2RTS.def", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a121c06f3cff8206883dea526bec4569876b059/gcc%2Fm2%2Fgm2-libs%2FM2RTS.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a121c06f3cff8206883dea526bec4569876b059/gcc%2Fm2%2Fgm2-libs%2FM2RTS.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-libs%2FM2RTS.def?ref=3a121c06f3cff8206883dea526bec4569876b059", "patch": "@@ -120,12 +120,23 @@ PROCEDURE HALT ([exitcode: INTEGER = -1]) <* noreturn *> ;\n \n (*\n    Halt - provides a more user friendly version of HALT, which takes\n-          four parameters to aid debugging.\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n *)\n \n-PROCEDURE Halt (file: ARRAY OF CHAR; line: CARDINAL;\n+PROCEDURE Halt (filename: ARRAY OF CHAR; line: CARDINAL;\n                 function: ARRAY OF CHAR; description: ARRAY OF CHAR)\n-\t\t<* noreturn *> ;\n+\t \t<* noreturn *> ;\n+\n+\n+(*\n+   HaltC - provides a more user friendly version of HALT, which takes\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n+*)\n+\n+PROCEDURE HaltC (filename: ADDRESS; line: CARDINAL;\n+                 function, description: ADDRESS) ;\n \n \n (*\n@@ -140,7 +151,7 @@ PROCEDURE ExitOnHalt (e: INTEGER) ;\n *)\n \n PROCEDURE ErrorMessage (message: ARRAY OF CHAR;\n-                        file: ARRAY OF CHAR;\n+                        filename: ARRAY OF CHAR;\n                         line: CARDINAL;\n                         function: ARRAY OF CHAR) <* noreturn *> ;\n "}, {"sha": "4280fec7dc7912a6f8dad64df2e0895ad8572b01", "filename": "gcc/m2/gm2-libs/M2RTS.mod", "status": "modified", "additions": 67, "deletions": 13, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a121c06f3cff8206883dea526bec4569876b059/gcc%2Fm2%2Fgm2-libs%2FM2RTS.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a121c06f3cff8206883dea526bec4569876b059/gcc%2Fm2%2Fgm2-libs%2FM2RTS.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-libs%2FM2RTS.mod?ref=3a121c06f3cff8206883dea526bec4569876b059", "patch": "@@ -27,7 +27,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n IMPLEMENTATION MODULE M2RTS ;\n \n \n-FROM libc IMPORT abort, exit, write, getenv, printf ;\n+FROM libc IMPORT abort, exit, write, getenv, printf, strlen ;\n (* FROM Builtins IMPORT strncmp, strcmp ;  not available during bootstrap.  *)\n FROM NumberIO IMPORT CardToStr ;\n FROM StrLib IMPORT StrCopy, StrLen, StrEqual ;\n@@ -39,6 +39,9 @@ IMPORT RTExceptions ;\n IMPORT M2EXCEPTION ;\n IMPORT M2Dependent ;\n \n+CONST\n+   stderrFd = 2 ;\n+\n TYPE\n    PtrToChar = POINTER TO CHAR ;\n \n@@ -254,47 +257,98 @@ PROCEDURE ErrorString (a: ARRAY OF CHAR) ;\n VAR\n    n: INTEGER ;\n BEGIN\n-   n := write (2, ADR (a), StrLen (a))\n+   n := write (stderrFd, ADR (a), StrLen (a))\n END ErrorString ;\n \n \n+(*\n+   ErrorStringC - writes a string to stderr.\n+*)\n+\n+PROCEDURE ErrorStringC (str: ADDRESS) ;\n+VAR\n+   len: INTEGER ;\n+BEGIN\n+   len := write (stderrFd, str, strlen (str))\n+END ErrorStringC ;\n+\n+\n (*\n    ErrorMessage - emits an error message to stderr and then calls exit (1).\n *)\n \n PROCEDURE ErrorMessage (message: ARRAY OF CHAR;\n-                        file: ARRAY OF CHAR;\n+                        filename: ARRAY OF CHAR;\n                         line: CARDINAL;\n                         function: ARRAY OF CHAR) <* noreturn *> ;\n VAR\n-   LineNo: ARRAY [0..10] OF CHAR ;\n+   buffer: ARRAY [0..10] OF CHAR ;\n BEGIN\n-   ErrorString (file) ; ErrorString(':') ;\n-   CardToStr (line, 0, LineNo) ;\n-   ErrorString (LineNo) ; ErrorString(':') ;\n+   ErrorString (filename) ; ErrorString(':') ;\n+   CardToStr (line, 0, buffer) ;\n+   ErrorString (buffer) ; ErrorString(':') ;\n    IF NOT StrEqual (function, '')\n    THEN\n       ErrorString ('in ') ;\n       ErrorString (function) ;\n       ErrorString (' has caused ') ;\n    END ;\n    ErrorString (message) ;\n-   LineNo[0] := nl ; LineNo[1] := nul ;\n-   ErrorString (LineNo) ;\n+   buffer[0] := nl ; buffer[1] := nul ;\n+   ErrorString (buffer) ;\n    exit (1)\n END ErrorMessage ;\n \n \n+(*\n+   ErrorMessageC - emits an error message to stderr and then calls exit (1).\n+*)\n+\n+PROCEDURE ErrorMessageC (message, filename: ADDRESS;\n+                         line: CARDINAL;\n+                         function: ADDRESS) <* noreturn *> ;\n+VAR\n+   buffer: ARRAY [0..10] OF CHAR ;\n+BEGIN\n+   ErrorStringC (filename) ; ErrorString (':') ;\n+   CardToStr (line, 0, buffer) ;\n+   ErrorString (buffer) ; ErrorString(':') ;\n+   IF strlen (function) > 0\n+   THEN\n+      ErrorString ('in ') ;\n+      ErrorStringC (function) ;\n+      ErrorString (' has caused ') ;\n+   END ;\n+   ErrorStringC (message) ;\n+   buffer[0] := nl ; buffer[1] := nul ;\n+   ErrorString (buffer) ;\n+   exit (1)\n+END ErrorMessageC ;\n+\n+\n+(*\n+   HaltC - provides a more user friendly version of HALT, which takes\n+           four parameters to aid debugging.  It writes an error message\n+           to stderr and calls exit (1).\n+*)\n+\n+PROCEDURE HaltC (filename: ADDRESS; line: CARDINAL;\n+                 function, description: ADDRESS) ;\n+BEGIN\n+   ErrorMessageC (description, filename, line, function)\n+END HaltC ;\n+\n+\n (*\n    Halt - provides a more user friendly version of HALT, which takes\n-          four parameters to aid debugging.\n+          four parameters to aid debugging.  It writes an error message\n+          to stderr and calls exit (1).\n *)\n \n-PROCEDURE Halt (file: ARRAY OF CHAR; line: CARDINAL;\n+PROCEDURE Halt (filename: ARRAY OF CHAR; line: CARDINAL;\n                 function: ARRAY OF CHAR; description: ARRAY OF CHAR) ;\n BEGIN\n-   ErrorMessage (description, file, line, function) ;\n-   HALT\n+   ErrorMessage (description, filename, line, function)\n END Halt ;\n \n "}, {"sha": "eeb38106f12a7f04b3a1a90d17c93a62a6af19a6", "filename": "libgm2/libm2iso/RTco.cc", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a121c06f3cff8206883dea526bec4569876b059/libgm2%2Flibm2iso%2FRTco.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a121c06f3cff8206883dea526bec4569876b059/libgm2%2Flibm2iso%2FRTco.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgm2%2Flibm2iso%2FRTco.cc?ref=3a121c06f3cff8206883dea526bec4569876b059", "patch": "@@ -110,6 +110,7 @@ _M2_RTco_fini (int argc, char *argv[], char *envp[])\n {\n }\n \n+\n static void\n initSem (threadSem *sem, int value)\n {\n@@ -171,8 +172,8 @@ newSem (void)\n       = (threadSem *)malloc (sizeof (threadSem));\n   nSemaphores += 1;\n   if (nSemaphores == SEM_POOL)\n-    M2RTS_Halt (__FILE__, __LINE__, __FUNCTION__,\n-                \"too many semaphores created\");\n+    M2RTS_HaltC (__FILE__, __LINE__, __FUNCTION__,\n+\t\t \"too many semaphores created\");\n #else\n   threadSem *sem\n       = (threadSem *)malloc (sizeof (threadSem));\n@@ -250,8 +251,8 @@ currentThread (void)\n   for (tid = 0; tid < nThreads; tid++)\n     if (pthread_self () == threadArray[tid].p)\n       return tid;\n-  M2RTS_Halt (__FILE__, __LINE__, __FUNCTION__,\n-              \"failed to find currentThread\");\n+  M2RTS_HaltC (__FILE__, __LINE__, __FUNCTION__,\n+\t       \"failed to find currentThread\");\n }\n \n extern \"C\" int\n@@ -297,8 +298,8 @@ RTco_turnInterrupts (unsigned int newLevel)\n static void\n never (void)\n {\n-  M2RTS_Halt (__FILE__, __LINE__, __FUNCTION__,\n-              \"the main thread should never call here\");\n+  M2RTS_HaltC (__FILE__, __LINE__, __FUNCTION__,\n+\t       \"the main thread should never call here\");\n }\n \n static void *\n@@ -316,7 +317,8 @@ execThread (void *t)\n #if 0\n   M2RTS_CoroutineException ( __FILE__, __LINE__, __COLUMN__, __FUNCTION__, \"coroutine finishing\");\n #endif\n-  M2RTS_Halt (__FILE__, __LINE__, __FUNCTION__, \"execThread should never finish\");\n+  M2RTS_HaltC (__FILE__, __LINE__, __FUNCTION__,\n+\t       \"execThread should never finish\");\n   return NULL;\n }\n \n@@ -326,7 +328,8 @@ newThread (void)\n #if defined(POOL)\n   nThreads += 1;\n   if (nThreads == THREAD_POOL)\n-    M2RTS_Halt (__FILE__, __LINE__, __FUNCTION__, \"too many threads created\");\n+    M2RTS_HaltC (__FILE__, __LINE__, __FUNCTION__,\n+\t\t \"too many threads created\");\n   return nThreads - 1;\n #else\n   if (nThreads == 0)\n@@ -360,14 +363,14 @@ initThread (void (*proc) (void), unsigned int stackSize,\n   /* set thread creation attributes.  */\n   result = pthread_attr_init (&attr);\n   if (result != 0)\n-    M2RTS_Halt (__FILE__, __LINE__, __FUNCTION__,\n+    M2RTS_HaltC (__FILE__, __LINE__, __FUNCTION__,\n                 \"failed to create thread attribute\");\n \n   if (stackSize > 0)\n     {\n       result = pthread_attr_setstacksize (&attr, stackSize);\n       if (result != 0)\n-        M2RTS_Halt (__FILE__, __LINE__, __FUNCTION__,\n+        M2RTS_HaltC (__FILE__, __LINE__, __FUNCTION__,\n                     \"failed to set stack size attribute\");\n     }\n \n@@ -376,7 +379,7 @@ initThread (void (*proc) (void), unsigned int stackSize,\n   result = pthread_create (&threadArray[tid].p, &attr, execThread,\n                            (void *)&threadArray[tid]);\n   if (result != 0)\n-    M2RTS_Halt (__FILE__, __LINE__, __FUNCTION__, \"thread_create failed\");\n+    M2RTS_HaltC (__FILE__, __LINE__, __FUNCTION__, \"thread_create failed\");\n   tprintf (\"  created thread [%d]  function = 0x%p  0x%p\\n\", tid, proc,\n            (void *)&threadArray[tid]);\n   return tid;\n@@ -404,14 +407,14 @@ RTco_transfer (int *p1, int p2)\n   int tid = currentThread ();\n \n   if (!initialized)\n-    M2RTS_Halt (\n+    M2RTS_HaltC (\n         __FILE__, __LINE__, __FUNCTION__,\n         \"cannot transfer to a process before the process has been created\");\n   if (tid == p2)\n     {\n       /* error.  */\n-      M2RTS_Halt (__FILE__, __LINE__, __FUNCTION__,\n-\t      \"attempting to transfer to ourself\");\n+      M2RTS_HaltC (__FILE__, __LINE__, __FUNCTION__,\n+\t\t   \"attempting to transfer to ourself\");\n     }\n   else\n     {"}, {"sha": "1f3bc2db7c40cb221f6a388cb1d2ccc0379b9973", "filename": "libgm2/libm2iso/m2rts.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a121c06f3cff8206883dea526bec4569876b059/libgm2%2Flibm2iso%2Fm2rts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a121c06f3cff8206883dea526bec4569876b059/libgm2%2Flibm2iso%2Fm2rts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgm2%2Flibm2iso%2Fm2rts.h?ref=3a121c06f3cff8206883dea526bec4569876b059", "patch": "@@ -38,4 +38,6 @@ extern \"C\" void M2RTS_ConstructModules (const char *,\n extern \"C\" void M2RTS_Terminate (void);\n extern \"C\" void M2RTS_DeconstructModules (void);\n \n-extern \"C\" void M2RTS_Halt (const char *, int, const char *, const char *) __attribute__ ((noreturn));\n+extern \"C\" void M2RTS_HaltC (const char *filename, int line,\n+\t\t\t     const char *functionname, const char *desc)\n+                             __attribute__ ((noreturn));"}]}