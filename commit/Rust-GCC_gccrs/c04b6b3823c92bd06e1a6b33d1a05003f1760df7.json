{"sha": "c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0YjZiMzgyM2M5MmJkMDZlMWE2YjMzZDFhMDUwMDNmMTc2MGRmNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-05-19T15:43:22Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-05-19T15:43:22Z"}, "message": "invoke.texi (-fwhopr): Document new optional jobs argument.\n\n2010-05-19  Richard Guenther  <rguenther@suse.de>\n\n\t* doc/invoke.texi (-fwhopr): Document new optional jobs argument.\n\t* common.opt (fwhopr=): New.\n\t* opts.c (common_handle_option): Handle OPT_fwhopr.\n\t* gcc.c (LINK_COMMAND_SPEC): Pass fwhopr*.\n\t* collect2.c (main): Match -fwhopr*.\n\t* lto-wrapper.c (run_gcc): Handle jobs argument of -fwhopr.\n\tExecute ltrans stage in parallel when jobs is bigger than 1.\n\nFrom-SVN: r159573", "tree": {"sha": "689a3a31c6e8de88d9e21e313b23a02153e122b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/689a3a31c6e8de88d9e21e313b23a02153e122b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d416abb494df912d22716d8882b7aceaab487fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d416abb494df912d22716d8882b7aceaab487fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d416abb494df912d22716d8882b7aceaab487fdf"}], "stats": {"total": 120, "additions": 100, "deletions": 20}, "files": [{"sha": "ec47a66cb35903138d04ed4a25c04e28f2b42294", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "patch": "@@ -1,3 +1,13 @@\n+2010-05-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (-fwhopr): Document new optional jobs argument.\n+\t* common.opt (fwhopr=): New.\n+\t* opts.c (common_handle_option): Handle OPT_fwhopr.\n+\t* gcc.c (LINK_COMMAND_SPEC): Pass fwhopr*.\n+\t* collect2.c (main): Match -fwhopr*.\n+\t* lto-wrapper.c (run_gcc): Handle jobs argument of -fwhopr.\n+\tExecute ltrans stage in parallel when jobs is bigger than 1.\n+\n 2010-05-19  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config.gcc (i[34567]86-*-solaris2*): Default with_arch_32 to"}, {"sha": "42db3cbf0ffe1f8565712f05a22e29c56472fb7f", "filename": "gcc/collect2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "patch": "@@ -1207,7 +1207,7 @@ main (int argc, char **argv)\n \t    use_verbose = true;\n \t    lto_mode = LTO_MODE_LTO;\n \t  }\n-        else if (! strcmp (argv[i], \"-fwhopr\") && ! use_plugin)\n+        else if (! strncmp (argv[i], \"-fwhopr\", 7) && ! use_plugin)\n \t  {\n \t    use_verbose = true;\n \t    lto_mode = LTO_MODE_WHOPR;\n@@ -1482,7 +1482,8 @@ main (int argc, char **argv)\n \t      break;\n \n             case 'f':\n-\t      if (strcmp (arg, \"-flto\") == 0 || strcmp (arg, \"-fwhopr\") == 0)\n+\t      if (strcmp (arg, \"-flto\") == 0\n+\t\t  || strncmp (arg, \"-fwhopr\", 7) == 0)\n \t\t{\n #ifdef ENABLE_LTO\n \t\t  /* Do not pass LTO flag to the linker. */"}, {"sha": "6c2ca93cfe6a5d21a2b58107f89285ad80eaa001", "filename": "gcc/common.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "patch": "@@ -1484,8 +1484,12 @@ Common Report Var(flag_web) Init(2) Optimization\n Construct webs and split unrelated uses of single variable\n \n fwhopr\n-Common Var(flag_whopr)\n-Enable partitioned link-time optimization.\n+Common\n+Enable partitioned link-time optimization\n+\n+fwhopr=\n+Common RejectNegative UInteger Joined Var(flag_whopr)\n+Enable partitioned link-time optimization with specified number of parallel jobs\n \n ftree-builtin-call-dce\n Common Report Var(flag_tree_builtin_call_dce) Init(0) Optimization"}, {"sha": "195cdfb6436ab9fdd4337468050c80101452a8c0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "patch": "@@ -391,7 +391,7 @@ Objective-C and Objective-C++ Dialects}.\n -funit-at-a-time -funroll-all-loops -funroll-loops @gol\n -funsafe-loop-optimizations -funsafe-math-optimizations -funswitch-loops @gol\n -fvariable-expansion-in-unroller -fvect-cost-model -fvpt -fweb @gol\n--fwhole-program -fwhopr -fwpa -fuse-linker-plugin @gol\n+-fwhole-program -fwhopr[=@var{n}] -fwpa -fuse-linker-plugin @gol\n --param @var{name}=@var{value}\n -O  -O0  -O1  -O2  -O3  -Os}\n \n@@ -7442,7 +7442,7 @@ information.  Combining @option{-flto} or @option{-fwhopr} with\n \n This option is disabled by default.\n \n-@item -fwhopr\n+@item -fwhopr[=@var{n}]\n @opindex fwhopr\n This option is identical in functionality to @option{-flto} but it\n differs in how the final link stage is executed.  Instead of loading\n@@ -7454,6 +7454,10 @@ LTRANS)@.  This process allows optimizations on very large programs\n that otherwise would not fit in memory.  This option enables\n @option{-fwpa} and @option{-fltrans} automatically.\n \n+If you specify the optional @var{n} the link stage is executed in\n+parallel using @var{n} parallel jobs by utilizing an installed\n+@code{make} program.\n+\n Disabled by default.\n \n @item -fwpa"}, {"sha": "39788be97c0c2229ca0a328917914988c1ce3415", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "patch": "@@ -785,7 +785,7 @@ proper position among the other output files.  */\n     %{static|static-libgcc:-plugin-opt=-pass-through=%(lto_libgcc)}\t\\\n     %{static:-plugin-opt=-pass-through=-lc}\t\\\n     } \\\n-    %{flto} %{fwhopr} %l \" LINK_PIE_SPEC \\\n+    %{flto} %{fwhopr*} %l \" LINK_PIE_SPEC \\\n    \"%X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} %{r}\\\n     %{s} %{t} %{u*} %{x} %{z} %{Z} %{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n     %{static:} %{L*} %(mfwrap) %(link_libgcc) %o\\"}, {"sha": "3dbd96b7cbcbbbf19dac563bf790158c0e90427c", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 70, "deletions": 13, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "patch": "@@ -148,7 +148,10 @@ collect_execute (char **argv)\n   if (pex == NULL)\n     fatal_perror (\"pex_init failed\");\n \n-  errmsg = pex_run (pex, PEX_LAST | PEX_SEARCH, argv[0], argv, NULL,\n+  /* Do not use PEX_LAST here, we use our stdout for communicating with\n+     collect2 or the linker-plugin.  Any output from the sub-process\n+     will confuse that.  */\n+  errmsg = pex_run (pex, PEX_SEARCH, argv[0], argv, NULL,\n \t\t    NULL, &err);\n   if (errmsg != NULL)\n     {\n@@ -264,6 +267,7 @@ run_gcc (unsigned argc, char *argv[])\n   const char *collect_gcc_options, *collect_gcc;\n   struct obstack env_obstack;\n   bool seen_o = false;\n+  int parallel = 0;\n \n   /* Get the driver and options.  */\n   collect_gcc = getenv (\"COLLECT_GCC\");\n@@ -329,8 +333,16 @@ run_gcc (unsigned argc, char *argv[])\n \t/* We've handled these LTO options, do not pass them on.  */\n \tif (strcmp (option, \"-flto\") == 0)\n \t  lto_mode = LTO_MODE_LTO;\n-\telse if (strcmp (option, \"-fwhopr\") == 0)\n-\t  lto_mode = LTO_MODE_WHOPR;\n+\telse if (strncmp (option, \"-fwhopr\", 7) == 0)\n+\t  {\n+\t    lto_mode = LTO_MODE_WHOPR;\n+\t    if (option[7] == '=')\n+\t      {\n+\t\tparallel = atoi (option+8);\n+\t\tif (parallel <= 1)\n+\t\t  parallel = 0;\n+\t      }\n+\t  }\n \telse\n \t  *argv_ptr++ = option;\n       }\n@@ -416,13 +428,23 @@ run_gcc (unsigned argc, char *argv[])\n   else if (lto_mode == LTO_MODE_WHOPR)\n     {\n       FILE *stream = fopen (ltrans_output_file, \"r\");\n-      int nr = 0;\n+      unsigned int nr = 0;\n+      char **input_names = NULL;\n+      char **output_names = NULL;\n+      char *makefile = NULL;\n+      FILE *mstream = NULL;\n \n       if (!stream)\n \tfatal_perror (\"fopen: %s\", ltrans_output_file);\n \n       argv_ptr[1] = \"-fltrans\";\n \n+      if (parallel)\n+\t{\n+\t  makefile = make_temp_file (\".mk\");\n+\t  mstream = fopen (makefile, \"w\");\n+\t}\n+\n       for (;;)\n \t{\n \t  const unsigned piece = 32;\n@@ -444,10 +466,7 @@ run_gcc (unsigned argc, char *argv[])\n \t  input_name[len - 1] = '\\0';\n \n \t  if (input_name[0] == '*')\n-\t    {\n-\t      continue;\n-\t      output_name = &input_name[1];\n-\t    }\n+\t    output_name = &input_name[1];\n \t  else\n \t    {\n \t      /* Otherwise, add FILES[I] to lto_execute_ltrans command line\n@@ -467,7 +486,7 @@ run_gcc (unsigned argc, char *argv[])\n \t\t\t\t\t+ sizeof(DUMPBASE_SUFFIX) + 1);\n \t\t  snprintf (dumpbase,\n \t\t\t    strlen (linker_output) + sizeof(DUMPBASE_SUFFIX),\n-\t\t\t    \"%s.ltrans%d\", linker_output, nr++);\n+\t\t\t    \"%s.ltrans%u\", linker_output, nr);\n \t\t  argv_ptr[0] = dumpbase;\n \t\t}\n \n@@ -476,14 +495,52 @@ run_gcc (unsigned argc, char *argv[])\n \t      argv_ptr[4] = input_name;\n \t      argv_ptr[5] = NULL;\n \n-\t      fork_execute (CONST_CAST (char **, new_argv));\n-\n-\t      maybe_unlink_file (input_name);\n+\t      if (parallel)\n+\t\t{\n+\t\t  fprintf (mstream, \"%s:\\n\\t@%s \", output_name, new_argv[0]);\n+\t\t  for (i = 1; new_argv[i] != NULL; ++i)\n+\t\t    fprintf (mstream, \" '%s'\", new_argv[i]);\n+\t\t  fprintf (mstream, \"\\n\");\n+\t\t}\n+\t      else\n+\t\tfork_execute (CONST_CAST (char **, new_argv));\n \t    }\n \n-\t  fputs (output_name, stdout);\n+\t  nr++;\n+\t  input_names = (char **)xrealloc (input_names, nr * sizeof (char *));\n+\t  output_names = (char **)xrealloc (output_names, nr * sizeof (char *));\n+\t  input_names[nr-1] = input_name;\n+\t  output_names[nr-1] = output_name;\n+\t}\n+      if (parallel)\n+\t{\n+\t  struct pex_obj *pex;\n+\t  char jobs[32];\n+\t  fprintf (mstream, \"all:\");\n+\t  for (i = 0; i < nr; ++i)\n+\t    fprintf (mstream, \" \\\\\\n\\t%s\", output_names[i]);\n+\t  fprintf (mstream, \"\\n\");\n+\t  fclose (mstream);\n+\t  new_argv[0] = \"make\";\n+\t  new_argv[1] = \"-f\";\n+\t  new_argv[2] = makefile;\n+\t  snprintf (jobs, 31, \"-j%d\", parallel);\n+\t  new_argv[3] = jobs;\n+\t  new_argv[4] = \"all\";\n+\t  new_argv[5] = NULL;\n+\t  pex = collect_execute (CONST_CAST (char **, new_argv));\n+\t  collect_wait (new_argv[0], pex);\n+\t  maybe_unlink_file (makefile);\n+\t}\n+      for (i = 0; i < nr; ++i)\n+\t{\n+\t  fputs (output_names[i], stdout);\n \t  putc ('\\n', stdout);\n+\t  maybe_unlink_file (input_names[i]);\n+\t  free (input_names[i]);\n \t}\n+      free (output_names);\n+      free (input_names);\n       fclose (stream);\n       maybe_unlink_file (ltrans_output_file);\n       free (list_option_full);"}, {"sha": "329f732f7d2848c9c6602eaf0c25f0a3c0a3d4bd", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04b6b3823c92bd06e1a6b33d1a05003f1760df7/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=c04b6b3823c92bd06e1a6b33d1a05003f1760df7", "patch": "@@ -2149,6 +2149,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n       flag_pedantic_errors = pedantic = 1;\n       break;\n \n+    case OPT_fwhopr:\n+      flag_whopr = value;\n+      break;\n+\n     case OPT_fsee:\n     case OPT_fcse_skip_blocks:\n     case OPT_floop_optimize:"}]}