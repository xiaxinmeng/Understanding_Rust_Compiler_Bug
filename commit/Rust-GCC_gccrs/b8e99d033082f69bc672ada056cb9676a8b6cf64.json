{"sha": "b8e99d033082f69bc672ada056cb9676a8b6cf64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlOTlkMDMzMDgyZjY5YmM2NzJhZGEwNTZjYjk2NzZhOGI2Y2Y2NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-12-12T21:41:31Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-12-12T21:41:31Z"}, "message": "tree.c (free_lang_data_in_type, [...]): Also free unnecesary type decls.\n\n\t* tree.c (free_lang_data_in_type, find_decls_types_r): Also free\n\tunnecesary type decls.\n\t* tree.h (is_redundant_typedef): Declare.\n\t* dwarf2out.c (is_redundant_typedef): Export; booleanize\n\nFrom-SVN: r231588", "tree": {"sha": "7e6fb11308092ab2f1f3c5ae6c1b8ddc859e0ae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e6fb11308092ab2f1f3c5ae6c1b8ddc859e0ae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8e99d033082f69bc672ada056cb9676a8b6cf64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e99d033082f69bc672ada056cb9676a8b6cf64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e99d033082f69bc672ada056cb9676a8b6cf64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e99d033082f69bc672ada056cb9676a8b6cf64/comments", "author": null, "committer": null, "parents": [{"sha": "425112c8e1a1c0025320c079e7a5d94dcda5ee20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/425112c8e1a1c0025320c079e7a5d94dcda5ee20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/425112c8e1a1c0025320c079e7a5d94dcda5ee20"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "2ec0e5b4d5ef197733a95b991dd918a7e7dfea2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e99d033082f69bc672ada056cb9676a8b6cf64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e99d033082f69bc672ada056cb9676a8b6cf64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8e99d033082f69bc672ada056cb9676a8b6cf64", "patch": "@@ -1,3 +1,10 @@\n+2015-12-10  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (free_lang_data_in_type, find_decls_types_r): Also free\n+\tunnecesary type decls.\n+\t* tree.h (is_redundant_typedef): Declare.\n+\t* dwarf2out.c (is_redundant_typedef): Export; booleanize\n+\n 2015-12-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.h (TARGET_SUPPORTS_WIDE_INT): Define to 1."}, {"sha": "fe5cab5ca7115341411668576583059396ae9ce0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e99d033082f69bc672ada056cb9676a8b6cf64/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e99d033082f69bc672ada056cb9676a8b6cf64/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=b8e99d033082f69bc672ada056cb9676a8b6cf64", "patch": "@@ -3319,7 +3319,6 @@ static void gen_typedef_die (tree, dw_die_ref);\n static void gen_type_die (tree, dw_die_ref);\n static void gen_block_die (tree, dw_die_ref);\n static void decls_for_scope (tree, dw_die_ref);\n-static inline int is_redundant_typedef (const_tree);\n static bool is_naming_typedef_decl (const_tree);\n static inline dw_die_ref get_context_die (tree);\n static void gen_namespace_die (tree, dw_die_ref);\n@@ -21117,21 +21116,21 @@ decls_for_scope (tree stmt, dw_die_ref context_die)\n \n /* Is this a typedef we can avoid emitting?  */\n \n-static inline int\n+bool\n is_redundant_typedef (const_tree decl)\n {\n   if (TYPE_DECL_IS_STUB (decl))\n-    return 1;\n+    return true;\n \n   if (DECL_ARTIFICIAL (decl)\n       && DECL_CONTEXT (decl)\n       && is_tagged_type (DECL_CONTEXT (decl))\n       && TREE_CODE (TYPE_NAME (DECL_CONTEXT (decl))) == TYPE_DECL\n       && DECL_NAME (decl) == DECL_NAME (TYPE_NAME (DECL_CONTEXT (decl))))\n     /* Also ignore the artificial member typedef for the class name.  */\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \n /* Return TRUE if TYPE is a typedef that names a type for linkage"}, {"sha": "21c5fe1652ea13a215b69d6f6371677322c67e91", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e99d033082f69bc672ada056cb9676a8b6cf64/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e99d033082f69bc672ada056cb9676a8b6cf64/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b8e99d033082f69bc672ada056cb9676a8b6cf64", "patch": "@@ -5191,7 +5191,10 @@ free_lang_data_in_type (tree type)\n       while (member)\n \t{\n \t  if (TREE_CODE (member) == FIELD_DECL\n-\t      || TREE_CODE (member) == TYPE_DECL)\n+\t      || (TREE_CODE (member) == TYPE_DECL\n+\t\t  && !DECL_IGNORED_P (member)\n+\t\t  && debug_info_level > DINFO_LEVEL_TERSE\n+\t\t  && !is_redundant_typedef (member)))\n \t    {\n \t      if (prev)\n \t\tTREE_CHAIN (prev) = member;\n@@ -5216,7 +5219,7 @@ free_lang_data_in_type (tree type)\n       /* Remove TYPE_METHODS list.  While it would be nice to keep it\n  \t to enable ODR warnings about different method lists, doing so\n \t seems to impractically increase size of LTO data streamed.\n-\t Keep the infrmation if TYPE_METHODS was non-NULL. This is used\n+\t Keep the information if TYPE_METHODS was non-NULL. This is used\n \t by function.c and pretty printers.  */\n       if (TYPE_METHODS (type))\n         TYPE_METHODS (type) = error_mark_node;\n@@ -5666,7 +5669,10 @@ find_decls_types_r (tree *tp, int *ws, void *data)\n \t  while (tem)\n \t    {\n \t      if (TREE_CODE (tem) == FIELD_DECL\n-\t\t  || TREE_CODE (tem) == TYPE_DECL)\n+\t\t  || (TREE_CODE (tem) == TYPE_DECL\n+\t\t      && !DECL_IGNORED_P (tem)\n+\t\t      && debug_info_level > DINFO_LEVEL_TERSE\n+\t\t      && !is_redundant_typedef (tem)))\n \t\tfld_worklist_push (tem, fld);\n \t      tem = TREE_CHAIN (tem);\n \t    }"}, {"sha": "96ffa83cdf94bbe3ca0031098001562646151169", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8e99d033082f69bc672ada056cb9676a8b6cf64/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8e99d033082f69bc672ada056cb9676a8b6cf64/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b8e99d033082f69bc672ada056cb9676a8b6cf64", "patch": "@@ -5386,6 +5386,7 @@ extern void gt_pch_nx (tree &);\n extern void gt_pch_nx (tree &, gt_pointer_operator, void *);\n \n extern bool nonnull_arg_p (const_tree);\n+extern bool is_redundant_typedef (const_tree);\n \n extern location_t\n set_source_range (tree expr, location_t start, location_t finish);"}]}