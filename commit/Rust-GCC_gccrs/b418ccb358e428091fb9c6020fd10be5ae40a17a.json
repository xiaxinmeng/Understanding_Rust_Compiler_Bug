{"sha": "b418ccb358e428091fb9c6020fd10be5ae40a17a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQxOGNjYjM1OGU0MjgwOTFmYjljNjAyMGZkMTBiZTVhZTQwYTE3YQ==", "commit": {"author": {"name": "Peixin Qiao", "email": "qiaopeixin@huawei.com", "date": "2020-08-12T16:11:41Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-08-12T16:11:41Z"}, "message": "AArch64: Add if condition in aarch64_function_value [PR96479]\n\nReport diagnostic information instead of ICE if it generats fp/simd for\nreturn register when fp/simd is disabled by -mgeneral-regs-only.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.c (aarch64_function_value): Add if\n\tcondition to check ag_mode after entering if condition of\n\taarch64_vfp_is_call_or_return_candidate. If TARGET_FLOAT is\n\tset as false by -mgeneral-regs-only, report the diagnostic\n\tinformation of -mgeneral-regs-only imcompatible with the use\n\tof fp/simd register(s).\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/mgeneral-regs_1.c: Add the comment that\n\t-mgeneral-regs-only is compatible with the use of vector type\n\tused in the test case.", "tree": {"sha": "d1a0e7ac1cc37fb49f6c34184d9df44c4eca2f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1a0e7ac1cc37fb49f6c34184d9df44c4eca2f4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b418ccb358e428091fb9c6020fd10be5ae40a17a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b418ccb358e428091fb9c6020fd10be5ae40a17a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b418ccb358e428091fb9c6020fd10be5ae40a17a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b418ccb358e428091fb9c6020fd10be5ae40a17a/comments", "author": {"login": "PeixinQiao", "id": 86228265, "node_id": "MDQ6VXNlcjg2MjI4MjY1", "avatar_url": "https://avatars.githubusercontent.com/u/86228265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PeixinQiao", "html_url": "https://github.com/PeixinQiao", "followers_url": "https://api.github.com/users/PeixinQiao/followers", "following_url": "https://api.github.com/users/PeixinQiao/following{/other_user}", "gists_url": "https://api.github.com/users/PeixinQiao/gists{/gist_id}", "starred_url": "https://api.github.com/users/PeixinQiao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PeixinQiao/subscriptions", "organizations_url": "https://api.github.com/users/PeixinQiao/orgs", "repos_url": "https://api.github.com/users/PeixinQiao/repos", "events_url": "https://api.github.com/users/PeixinQiao/events{/privacy}", "received_events_url": "https://api.github.com/users/PeixinQiao/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21cfe724cbdc30612bf1ef59b26f19ada2210832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21cfe724cbdc30612bf1ef59b26f19ada2210832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21cfe724cbdc30612bf1ef59b26f19ada2210832"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "f80594d2331dfd47e8216681450fe826f9052805", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b418ccb358e428091fb9c6020fd10be5ae40a17a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b418ccb358e428091fb9c6020fd10be5ae40a17a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b418ccb358e428091fb9c6020fd10be5ae40a17a", "patch": "@@ -5554,6 +5554,10 @@ aarch64_function_value (const_tree type, const_tree func,\n   if (aarch64_vfp_is_call_or_return_candidate (mode, type, &ag_mode, &count,\n \t\t\t\t\t       NULL, false))\n     {\n+      /* TYPE passed in fp/simd registers.  */\n+      if (!TARGET_FLOAT)\n+\taarch64_err_no_fpadvsimd (ag_mode);\n+\n       gcc_assert (!sve_p);\n       if (!aarch64_composite_type_p (type, mode))\n \t{"}, {"sha": "6f785c99b74c0d4869e0c300587d9c01cd5d9390", "filename": "gcc/testsuite/gcc.target/aarch64/mgeneral-regs_1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b418ccb358e428091fb9c6020fd10be5ae40a17a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b418ccb358e428091fb9c6020fd10be5ae40a17a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_1.c?ref=b418ccb358e428091fb9c6020fd10be5ae40a17a", "patch": "@@ -4,6 +4,6 @@ typedef int int32x2_t __attribute__ ((__vector_size__ ((8))));\n \n /* { dg-error \"'-mgeneral-regs-only' is incompatible with the use of vector types\" \"\" {target \"aarch64*-*-*\"} .+1 } */\n int32x2_t test (int32x2_t a, int32x2_t b)\n-{\n-  return a + b;\n+{ /* { dg-error \"'-mgeneral-regs-only' is incompatible with the use of vector types\" } */\n+  return a + b; /* { dg-error \"'-mgeneral-regs-only' is incompatible with the use of vector types\" } */\n }"}]}