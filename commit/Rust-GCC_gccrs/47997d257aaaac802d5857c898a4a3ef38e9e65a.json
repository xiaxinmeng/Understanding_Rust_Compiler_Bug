{"sha": "47997d257aaaac802d5857c898a4a3ef38e9e65a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5OTdkMjU3YWFhYWM4MDJkNTg1N2M4OThhNGEzZWYzOGU5ZTY1YQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-12-13T09:04:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-13T09:04:28Z"}, "message": "[Ada] Suppress Base_Address call on init of activation record components\n\n2019-12-13  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference,\n\tAttribute_Address): Suppress generation of a call to\n\tBase_Address in the case where the Address attribute is being\n\tused to initialize a corresponding component of an activation\n\trecord.\n\t(Is_Unnested_Component_Init): New function to determine whether\n\tan attribute reference for Address is used to initialized a\n\tcomponent of an activation record object that corresponds to the\n\tobject denoted by the prefix of the attribute (an assignment\n\tused in support of unnesting for back ends like LLVM).\n\nFrom-SVN: r279353", "tree": {"sha": "5b298bf70c5b61ae3a47a1c087dce3adda9bd088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b298bf70c5b61ae3a47a1c087dce3adda9bd088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47997d257aaaac802d5857c898a4a3ef38e9e65a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47997d257aaaac802d5857c898a4a3ef38e9e65a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47997d257aaaac802d5857c898a4a3ef38e9e65a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47997d257aaaac802d5857c898a4a3ef38e9e65a/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be3614c740f91caf593e77b7138e65013fc0487b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3614c740f91caf593e77b7138e65013fc0487b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be3614c740f91caf593e77b7138e65013fc0487b"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "9838e9b21110f42529325686ec0df8ae5624fabb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47997d257aaaac802d5857c898a4a3ef38e9e65a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47997d257aaaac802d5857c898a4a3ef38e9e65a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=47997d257aaaac802d5857c898a4a3ef38e9e65a", "patch": "@@ -1,3 +1,16 @@\n+2019-12-13  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference,\n+\tAttribute_Address): Suppress generation of a call to\n+\tBase_Address in the case where the Address attribute is being\n+\tused to initialize a corresponding component of an activation\n+\trecord.\n+\t(Is_Unnested_Component_Init): New function to determine whether\n+\tan attribute reference for Address is used to initialized a\n+\tcomponent of an activation record object that corresponds to the\n+\tobject denoted by the prefix of the attribute (an assignment\n+\tused in support of unnesting for back ends like LLVM).\n+\n 2019-12-13  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Resolve): IF an entity reference is overloaded"}, {"sha": "8c5981a75e6b4c66788390801d355843dcb49eca", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47997d257aaaac802d5857c898a4a3ef38e9e65a/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47997d257aaaac802d5857c898a4a3ef38e9e65a/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=47997d257aaaac802d5857c898a4a3ef38e9e65a", "patch": "@@ -2316,6 +2316,24 @@ package body Exp_Attr is\n       when Attribute_Address => Address : declare\n          Task_Proc : Entity_Id;\n \n+         function Is_Unnested_Component_Init (N : Node_Id) return Boolean;\n+         --  Returns True if N is being used to initialize a component of\n+         --  an activation record object where the component corresponds to\n+         --  the object denoted by the prefix of the attribute N.\n+\n+         function Is_Unnested_Component_Init (N : Node_Id) return Boolean is\n+         begin\n+            return Present (Parent (N))\n+              and then Nkind (Parent (N)) = N_Assignment_Statement\n+              and then Is_Entity_Name (Pref)\n+              and then Present (Activation_Record_Component (Entity (Pref)))\n+              and then Nkind (Name (Parent (N))) = N_Selected_Component\n+              and then Entity (Selector_Name (Name (Parent (N)))) =\n+                         Activation_Record_Component (Entity (Pref));\n+         end Is_Unnested_Component_Init;\n+\n+      --  Start of processing for Address\n+\n       begin\n          --  If the prefix is a task or a task type, the useful address is that\n          --  of the procedure for the task body, i.e. the actual program unit.\n@@ -2379,13 +2397,19 @@ package body Exp_Attr is\n          --  \"displaced\" to reference the tag associated with the interface\n          --  type. In order to obtain the real address of such objects we\n          --  generate a call to a run-time subprogram that returns the base\n-         --  address of the object.\n+         --  address of the object. This call is not generated in cases where\n+         --  the attribute is being used to initialize a component of an\n+         --  activation record object where the component corresponds to\n+         --  prefix of the attribute (for back ends that require \"unnesting\"\n+         --  of nested subprograms), since the address needs to be assigned\n+         --  as-is to such components.\n \n          elsif Is_Class_Wide_Type (Ptyp)\n            and then Is_Interface (Underlying_Type (Ptyp))\n            and then Tagged_Type_Expansion\n            and then not (Nkind (Pref) in N_Has_Entity\n                           and then Is_Subprogram (Entity (Pref)))\n+           and then not Is_Unnested_Component_Init (N)\n          then\n             Rewrite (N,\n               Make_Function_Call (Loc,"}]}