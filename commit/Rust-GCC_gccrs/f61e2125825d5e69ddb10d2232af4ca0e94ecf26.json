{"sha": "f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxZTIxMjU4MjVkNWU2OWRkYjEwZDIyMzJhZjRjYTBlOTRlY2YyNg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-08T09:25:54Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-08T09:25:54Z"}, "message": "2003-06-08  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramSocket.java\n\t(DatagramSocket): No need to set SO_REUSEADDRESS here. This belongs\n\tinto the Multicast constructors.\n\t* java/net/DatagramSocketImpl.java\n\t(getOption): Removed.\n\t(setOption): Removed.\n\t* java/net/MulticastSocket.java\n\t(MulticastSocket): Call setReuseAddress (true).\n\t* java/net/SocketImpl.java\n\t(getOption): Removed.\n\t(setOption): Removed.\n\nFrom-SVN: r67617", "tree": {"sha": "c1f375125b1abd53065ba4ecf61513a803dd0360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1f375125b1abd53065ba4ecf61513a803dd0360"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/comments", "author": null, "committer": null, "parents": [{"sha": "147d396eaa9379b5b9f37ebedd0243b0f79fa450", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147d396eaa9379b5b9f37ebedd0243b0f79fa450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/147d396eaa9379b5b9f37ebedd0243b0f79fa450"}], "stats": {"total": 87, "additions": 17, "deletions": 70}, "files": [{"sha": "815a1706fd1ef15d08f7470f93b8b5b725df13f2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "patch": "@@ -1,3 +1,17 @@\n+2003-06-08  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramSocket.java\n+\t(DatagramSocket): No need to set SO_REUSEADDRESS here. This belongs\n+\tinto the Multicast constructors.\n+\t* java/net/DatagramSocketImpl.java\n+\t(getOption): Removed.\n+\t(setOption): Removed.\n+\t* java/net/MulticastSocket.java\n+\t(MulticastSocket): Call setReuseAddress (true).\n+\t* java/net/SocketImpl.java\n+\t(getOption): Removed.\n+\t(setOption): Removed.\n+\n 2003-06-07\tJeff Sturm\t<jsturm@one-point.com>\n \n \tPR libgcj/10886:"}, {"sha": "e21ea44e1b4a9aa526a3502b1c37ed1ab88b7646", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "patch": "@@ -174,9 +174,6 @@ public DatagramSocket(int port, InetAddress laddr) throws SocketException\n \t}\n     impl.create();\n \n-    // For multicasting, set the socket to be reused (Stevens pp. 195-6).\n-    if (this instanceof MulticastSocket)\n-      impl.setOption(SocketOptions.SO_REUSEADDR, new Boolean(true));\n \n     impl.bind(port, laddr == null ? InetAddress.ANY_IF : laddr);\n     \n@@ -293,9 +290,6 @@ public InetAddress getLocalAddress()\n    */\n   public int getLocalPort()\n   {\n-    if (!isBound ())\n-      return -1;\n-\n     return impl.getLocalPort();\n   }\n "}, {"sha": "891c8d183b5ec5e9c5da9c336fdd8eb8c9073aa6", "filename": "libjava/java/net/DatagramSocketImpl.java", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocketImpl.java?ref=f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "patch": "@@ -284,36 +284,4 @@ protected int getLocalPort()\n   {\n     return localPort;\n   }\n-\n-  /**\n-   * Sets the specified option on a socket to the passed in object.  For\n-   * options that take an integer argument, the passed in object is an\n-   * <code>Integer</code>.  For options that are set to on or off, the\n-   * value passed will be a <code>Boolean</code>.   The <code>optionId</code>\n-   * parameter is one of the defined constants in the superinterface.\n-   *\n-   * @param optionId The identifier of the option\n-   * @param val The value to set the option to\n-   *\n-   * @exception SocketException If an error occurs\n-   * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.\n-   */\n-  public abstract void setOption(int optionId, Object val)\n-    throws SocketException;\n-\n-  /**\n-   * Returns the current setting of the specified option.  The\n-   * <code>Object</code> returned will be an <code>Integer</code> for options\n-   * that have integer values.  For options that are set to on or off, a\n-   * <code>Boolean</code> will be returned.   The <code>optionId</code>\n-   * is one of the defined constants in the superinterface.\n-   *\n-   * @param optionId The option identifier\n-   *\n-   * @return The current value of the option\n-   *\n-   * @exception SocketException If an error occurs\n-   * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.\n-   */\n-  public abstract Object getOption(int option_id) throws SocketException;\n }"}, {"sha": "1b7b422e07155c7d21af2a9575bfb2e6956f1442", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "patch": "@@ -81,6 +81,7 @@ public class MulticastSocket extends DatagramSocket\n   public MulticastSocket() throws IOException\n   {\n     super(0, null);\n+    setReuseAddress (true);\n   }\n \n   /**\n@@ -95,6 +96,7 @@ public MulticastSocket() throws IOException\n   public MulticastSocket(int port) throws IOException\n   {\n     super(port, null);\n+    setReuseAddress (true);\n   }\n \n   /**\n@@ -111,6 +113,7 @@ public MulticastSocket(int port) throws IOException\n   public MulticastSocket(SocketAddress address) throws IOException\n   {\n     super(address);\n+    setReuseAddress (true);\n   }\n   \n   /**"}, {"sha": "25ffe91d1d2fe0356bc84f4993c787272802435f", "filename": "libjava/java/net/SocketImpl.java", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/libjava%2Fjava%2Fnet%2FSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e2125825d5e69ddb10d2232af4ca0e94ecf26/libjava%2Fjava%2Fnet%2FSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketImpl.java?ref=f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "patch": "@@ -276,38 +276,6 @@ public String toString()\n \t    + \",localport=\" + localport + \"]\";\n   }\n \n-  /**\n-   * Sets the specified option on a socket to the passed in object.  For\n-   * options that take an integer argument, the passed in object is an\n-   * <code>Integer</code>.  For options that are set to on or off, the\n-   * value passed will be a <code>Boolean</code>.   The <code>option_id</code> \n-   * parameter is one of the defined constants in the superinterface.\n-   *\n-   * @param option_id The identifier of the option\n-   * @param val The value to set the option to\n-   *\n-   * @exception SocketException If an error occurs\n-   * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.\n-   */\n-  public abstract void setOption(int option_id, Object val)\n-    throws SocketException;\n-\n-  /**\n-   * Returns the current setting of the specified option.  The \n-   * <code>Object</code> returned will be an <code>Integer</code> for options \n-   * that have integer values.  For options that are set to on or off, a \n-   * <code>Boolean</code> will be returned.   The <code>option_id</code>\n-   * is one of the defined constants in the superinterface.\n-   *\n-   * @param option_id The option identifier\n-   *\n-   * @return The current value of the option\n-   *\n-   * @exception SocketException If an error occurs\n-   * @XXX This redeclaration from SocketOptions is a workaround to a gcj bug.\n-   */\n-  public abstract Object getOption(int option_id) throws SocketException;\n-\n   /**\n    * Shut down the input side of this socket.  Subsequent reads will\n    * return end-of-file."}]}