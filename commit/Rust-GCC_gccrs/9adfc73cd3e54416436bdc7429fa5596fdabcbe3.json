{"sha": "9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkZmM3M2NkM2U1NDQxNjQzNmJkYzc0MjlmYTU1OTZmZGFiY2JlMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-09-09T00:05:13Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-09-09T00:05:13Z"}, "message": "functional_hash.h: Add ext/numeric_traits.h.\n\n2007-09-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/functional_hash.h: Add ext/numeric_traits.h.\n\t* include/tr1/functional_hash.h Same.\n\t* include/tr1/functional: Remove string, ext/type_traits.h includes.\n\t* include/tr1_impl/functional_hash.h: Move string, wstring\n\tdefinitions for std::<hash>::operator into separate file.\n\t* include/std/functional\n\t* src/hash.cc: New, move definitions here.\n\t* src/hash_c++0x.cc: Same.\n\t* src/Makefile.am: Add new source files.\n\t* configure: Regenerate.\n\t* Makefile.in: Same.\n\t* src/Makefile.in: Same.\n\t* po/Makefile.in: Same.\n\t* libmath/Makefile.in: Same.\n\t* libsupc++/Makefile.in: Same.\n\t* testsuite/Makefile.in: Same.\n\t* config/abi/pre/gnu.ver: Add symbols.\n\t* config/abi/pre/gnu-versioned-namespace.ver: Same, fix.\n\nFrom-SVN: r128278", "tree": {"sha": "607455f53d5c4fb48f9a1d7211074f664a7fe573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/607455f53d5c4fb48f9a1d7211074f664a7fe573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/comments", "author": null, "committer": null, "parents": [{"sha": "96f52d87e86dd5c7716c9407871c719c9e32aa8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f52d87e86dd5c7716c9407871c719c9e32aa8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f52d87e86dd5c7716c9407871c719c9e32aa8d"}], "stats": {"total": 510, "additions": 348, "deletions": 162}, "files": [{"sha": "0f653f7d897bd375e9d9d0a4d213eff09a3e5c4b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -1,3 +1,24 @@\n+2007-09-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/functional_hash.h: Add ext/numeric_traits.h.\n+\t* include/tr1/functional_hash.h Same.\n+\t* include/tr1/functional: Remove string, ext/type_traits.h includes.\n+\t* include/tr1_impl/functional_hash.h: Move string, wstring\n+\tdefinitions for std::<hash>::operator into separate file.\n+\t* include/std/functional\n+\t* src/hash.cc: New, move definitions here.\n+\t* src/hash_c++0x.cc: Same.\n+\t* src/Makefile.am: Add new source files.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Same.\n+\t* src/Makefile.in: Same.\n+\t* po/Makefile.in: Same.\n+\t* libmath/Makefile.in: Same.\n+\t* libsupc++/Makefile.in: Same.\n+\t* testsuite/Makefile.in: Same.\n+\t* config/abi/pre/gnu.ver: Add symbols.\n+\t* config/abi/pre/gnu-versioned-namespace.ver: Same, fix.\n+\t\n 2007-09-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/19_diagnostics/error_category/cons/copy_neg.cc:"}, {"sha": "ac125e8d6f203d9912f35f2247869878125d9d68", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -150,6 +150,7 @@ ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n ENABLE_VISIBILITY_FALSE = @ENABLE_VISIBILITY_FALSE@\n ENABLE_VISIBILITY_TRUE = @ENABLE_VISIBILITY_TRUE@\n+ERROR_CONSTANTS_SRCDIR = @ERROR_CONSTANTS_SRCDIR@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@"}, {"sha": "4661512fe05e93b667d6dfba6473a4ef32c1e9f2", "filename": "libstdc++-v3/config/abi/pre/gnu-versioned-namespace.ver", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu-versioned-namespace.ver?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -66,7 +66,8 @@ GLIBCXX_3.7 {\n     _ZNSt2_614__convert_to_v*;\n \n     # std::__copy_streambufs\n-    _ZNSt2_617__copy_streambufsI[cw]NS_11char_traitsI[cw]EEEEiPNS_15basic_streambufIT_T0_EES7_;\n+    _ZNSt2_617__copy_streambufsI*;\n+    _ZNSt2_621__copy_streambufs_eofI*;\n \n     # __gnu_cxx::__atomic_add\n     # __gnu_cxx::__exchange_and_add\n@@ -87,6 +88,40 @@ GLIBCXX_3.7 {\n     _ZN9__gnu_cxx2_69free_list6_M_getE[jm];\n     _ZN9__gnu_cxx2_69free_list8_M_clearEv;\n \n+    # debug mode\n+    _ZN10__gnu_norm15_List_node_base4hook*;\n+    _ZN10__gnu_norm15_List_node_base4swap*;\n+    _ZN10__gnu_norm15_List_node_base6unhookEv;\n+    _ZN10__gnu_norm15_List_node_base7reverseEv;\n+    _ZN10__gnu_norm15_List_node_base8transfer*;\n+\n+    _ZNSt6__norm15_List_node_base4hook*;\n+    _ZNSt6__norm15_List_node_base4swap*;\n+    _ZNSt6__norm15_List_node_base6unhookEv;\n+    _ZNSt6__norm15_List_node_base7reverseEv;\n+    _ZNSt6__norm15_List_node_base8transfer*;\n+\n+    _ZN11__gnu_debug19_Safe_sequence_base12_M_get_mutexEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n+\n+    _ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n+    _ZN11__gnu_debug19_Safe_iterator_base16_M_attach_singleEPNS_19_Safe_sequence_baseEb;\n+    _ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n+    _ZN11__gnu_debug19_Safe_iterator_base16_M_detach_singleEv;\n+    _ZN11__gnu_debug19_Safe_iterator_base12_M_get_mutexEv;\n+    _ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n+    _ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n+\n+    _ZNK11__gnu_debug16_Error_formatter10_M_message*;\n+    _ZNK11__gnu_debug16_Error_formatter10_Parameter*;\n+    _ZNK11__gnu_debug16_Error_formatter13_M_print_word*;\n+    _ZNK11__gnu_debug16_Error_formatter15_M_print_string*;\n+    _ZNK11__gnu_debug16_Error_formatter8_M_error*;\n+    _ZNK11__gnu_debug16_Error_formatter17_M_get_max_lengthEv;\n+\n   local:\n     *;\n };\n@@ -164,7 +199,7 @@ CXXABI_1.7 {\n     _ZTVN10__cxxabiv120__si_class_type_infoE;\n     _ZTVN10__cxxabiv121__vmi_class_type_infoE;\n \n-    # typeinfo structure (and some names)\n+    # typeinfo structure\n     _ZTI[a-z];\n     _ZTIP[a-z];\n     _ZTIPK[a-z];\n@@ -178,6 +213,8 @@ CXXABI_1.7 {\n     _ZTIN10__cxxabiv119__pointer_type_infoE;\n     _ZTIN10__cxxabiv120__si_class_type_infoE;\n     _ZTIN10__cxxabiv121__vmi_class_type_infoE;\n+    _ZTIN10__cxxabiv115__forced_unwindE;\n+    _ZTIN10__cxxabiv119__foreign_exceptionE;\n \n     # typeinfo name\n     _ZTS[a-z];\n@@ -200,11 +237,3 @@ CXXABI_1.7 {\n   local:\n     *;\n };\n-\n-CXXABI_1.7.1 {\n-\n-    # typeinfo structures\n-    _ZTIN10__cxxabiv115__forced_unwindE;\n-    _ZTIN10__cxxabiv119__foreign_exceptionE;\n-\n-} CXXABI_1.7;"}, {"sha": "12d21f1c8ec4047da88f8e35c52de7a52985ba38", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -60,7 +60,8 @@ GLIBCXX_3.4 {\n #     std::c[i-z]*;\n       std::c[i-s]*;\n       std::c[u-z]*;\n-      std::[d-h]*;\n+      std::[d-g]*;\n+      std::h[^a]*;\n       std::i[a-n]*;\n       std::ios_base::[A-Ha-z]*;\n       std::ios_base::_M_grow_words*;\n@@ -107,7 +108,10 @@ GLIBCXX_3.4 {\n #     std::string\n       std::strstream*;\n       std::strstreambuf*;\n-      std::[A-Zt-z]*;\n+      std::t[a-q]*;\n+      std::tr1::h[^a]*;\n+      std::t[s-z]*;\n+      std::[A-Zu-z]*;\n       std::_List_node_base::hook*;\n       std::_List_node_base::swap*;\n       std::_List_node_base::unhook*;\n@@ -753,6 +757,18 @@ GLIBCXX_3.4.10 {\n     _ZTISt12system_error;\n     _ZTVSt12system_error;\n     _ZNSt12system_errorD*Ev;\n+    _ZNSt12system_errorC*;\n+\n+    _ZNKSt3tr14hashIRKSbIwSt11char_traitsIwESaIwEEEclES6_;\n+    _ZNKSt3tr14hashIRKSsEclES2_;\n+    _ZNKSt3tr14hashISbIwSt11char_traitsIwESaIwEEEclES4_;\n+    _ZNKSt3tr14hashISsEclESs;\n+\n+    _ZNKSt4hashIRKSbIwSt11char_traitsIwESaIwEEEclES5_;\n+    _ZNKSt4hashIRKSsEclES1_;\n+    _ZNKSt4hashISbIwSt11char_traitsIwESaIwEEEclES3_;\n+    _ZNKSt4hashISsEclESs;\n+    _ZNKSt4hashISt10error_codeEclES0_;\n \n } GLIBCXX_3.4.9;\n "}, {"sha": "3651176e1720d773afada6c98fbbd11563d175f5", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -93844,6 +93844,7 @@ ABI_TWEAKS_SRCDIR=config/${abi_tweaks_dir}\n \n \n \n+\n # Determine cross-compile flags and AM_CONDITIONALs.\n #AC_SUBST(GLIBCXX_IS_NATIVE)\n #AM_CONDITIONAL(CANADIAN, test $CANADIAN = yes)"}, {"sha": "7b0d81cc6e876ce4169688a56cd924bb3dd60033", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -27,7 +27,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file functional_hash.h\n+/** @file bits/functional_hash.h\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n  */\n@@ -45,6 +45,8 @@\n #  error C++0x header cannot be included from TR1 header\n #endif\n \n+#include <ext/numeric_traits.h>\n+\n #if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n #  include <tr1_impl/functional_hash.h>\n #else\n@@ -59,20 +61,14 @@\n #  undef _GLIBCXX_INCLUDE_AS_CXX0X\n #endif\n \n-#include <system_error>\n \n namespace std\n {\n+  struct error_code;\n+\n   template<>\n-    struct hash<error_code> : public unary_function<error_code, size_t>\n-    {      \n-      size_t\n-      operator()(error_code __e) const\n-      { \n-\tconst char* __p = reinterpret_cast<const char*>(&__e);\n-\treturn _Fnv_hash<>::hash(__p, sizeof(__e));\n-      }\n-    };\n+    size_t\n+    hash<error_code>::operator()(error_code) const;\n }\n \n #endif // _FUNCTIONAL_HASH_H"}, {"sha": "83bf85aef292ea110f094b920192d50368cfde12", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -59,11 +59,10 @@\n #    error C++0x header cannot be included from TR1 header\n #  endif\n #  include <cmath>\n-#  include <string>\n #  include <typeinfo>\n-#  include <ext/type_traits.h>\n #  include <tuple>\n #  include <type_traits>\n+#  include <bits/stringfwd.h>\n #  include <bits/functional_hash.h>\n #  if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n #    include <tr1_impl/functional>"}, {"sha": "78f6b925eee14e5c6e54864a61a34d1e4a3fe3d2", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -44,11 +44,10 @@\n #include <bits/stl_function.h>\n \n #include <cmath>\n-#include <string>\n #include <typeinfo>\n-#include <ext/type_traits.h>\n #include <tr1/tuple>\n #include <tr1/type_traits>\n+#include <bits/stringfwd.h>\n #include <tr1/functional_hash.h>\n \n #if defined(_GLIBCXX_INCLUDE_AS_TR1)"}, {"sha": "946c966f3d3df84505a0e8797cd99dfb66b48f7b", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -41,6 +41,8 @@\n #  error TR1 header cannot be included from C++0x header\n #endif\n \n+#include <ext/numeric_traits.h>\n+\n #if defined(_GLIBCXX_INCLUDE_AS_TR1)\n #  include <tr1_impl/functional_hash.h>\n #else"}, {"sha": "2ac1a45f6ba5bf621c2d83bf39ffaf8940d9a476", "filename": "libstdc++-v3/include/tr1_impl/functional_hash.h", "status": "modified", "additions": 94, "deletions": 110, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -36,20 +36,31 @@ namespace std\n {\n _GLIBCXX_BEGIN_NAMESPACE_TR1\n \n-  // Definition of default hash function std::tr1::hash<>.  The types for\n-  // which std::tr1::hash<T> is defined is in clause 6.3.3. of the PDTR.\n+  // Class template hash.\n+  // Declaration of default hash functor std::tr1::hash.  The types for\n+  // which std::tr1::hash<T> is well-defined is in clause 6.3.3. of the PDTR.\n   template<typename _Tp>\n-    struct hash;\n-\n-#define _TR1_hashtable_define_trivial_hash(_Tp)         \\\n-  template<>                                            \\\n-    struct hash<_Tp>                                    \\\n-    : public std::unary_function<_Tp, std::size_t>      \\\n-    {                                                   \\\n-      std::size_t                                       \\\n-      operator()(_Tp __val) const                       \\\n-      { return static_cast<std::size_t>(__val); }       \\\n-    }                                                     \n+    struct hash : public std::unary_function<_Tp, size_t>\n+    {\n+      size_t\n+      operator()(_Tp __val) const;\n+    };\n+\n+  // Partial specializations for pointer types.\n+  template<typename _Tp>\n+    struct hash<_Tp*> : public std::unary_function<_Tp*, size_t>\n+    {\n+      size_t\n+      operator()(_Tp* __p) const\n+      { return reinterpret_cast<size_t>(__p); }\n+    };\n+\n+  // Explicit specializations for integer types.\n+#define _TR1_hashtable_define_trivial_hash(_Tp) \t\\\n+  template<>\t\t\t\t\t\t\\\n+    inline size_t\t\t\t\t\t\\\n+    hash<_Tp>::operator()(_Tp __val) const\t\t\\\n+    { return static_cast<size_t>(__val); }\n \n   _TR1_hashtable_define_trivial_hash(bool);\n   _TR1_hashtable_define_trivial_hash(char);\n@@ -67,26 +78,17 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \n #undef _TR1_hashtable_define_trivial_hash\n \n-  template<typename _Tp>\n-    struct hash<_Tp*>\n-    : public std::unary_function<_Tp*, std::size_t>\n-    {\n-      std::size_t\n-      operator()(_Tp* __p) const\n-      { return reinterpret_cast<std::size_t>(__p); }\n-    };\n-\n   // Fowler / Noll / Vo (FNV) Hash (type FNV-1a)\n-  // (used by the next specializations of std::tr1::hash<>)\n+  // (Used by the next specializations of std::tr1::hash.)\n \n   // Dummy generic implementation (for sizeof(size_t) != 4, 8).\n-  template<std::size_t = sizeof(std::size_t)>\n+  template<size_t = sizeof(size_t)>\n     struct _Fnv_hash\n     {\n-      static std::size_t\n-      hash(const char* __first, std::size_t __length)\n+      static size_t\n+      hash(const char* __first, size_t __length)\n       {\n-\tstd::size_t __result = 0;\n+\tsize_t __result = 0;\n \tfor (; __length > 0; --__length)\n \t  __result = (__result * 131) + *__first++;\n \treturn __result;\n@@ -96,14 +98,14 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   template<>\n     struct _Fnv_hash<4>\n     {\n-      static std::size_t\n-      hash(const char* __first, std::size_t __length)\n+      static size_t\n+      hash(const char* __first, size_t __length)\n       {\n-\tstd::size_t __result = static_cast<std::size_t>(2166136261UL);\n+\tsize_t __result = static_cast<size_t>(2166136261UL);\n \tfor (; __length > 0; --__length)\n \t  {\n-\t    __result ^= static_cast<std::size_t>(*__first++);\n-\t    __result *= static_cast<std::size_t>(16777619UL);\n+\t    __result ^= static_cast<size_t>(*__first++);\n+\t    __result *= static_cast<size_t>(16777619UL);\n \t  }\n \treturn __result;\n       }\n@@ -112,112 +114,94 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   template<>\n     struct _Fnv_hash<8>\n     {\n-      static std::size_t\n-      hash(const char* __first, std::size_t __length)\n+      static size_t\n+      hash(const char* __first, size_t __length)\n       {\n-\tstd::size_t __result =\n-\t  static_cast<std::size_t>(14695981039346656037ULL);\n+\tsize_t __result =\n+\t  static_cast<size_t>(14695981039346656037ULL);\n \tfor (; __length > 0; --__length)\n \t  {\n-\t    __result ^= static_cast<std::size_t>(*__first++);\n-\t    __result *= static_cast<std::size_t>(1099511628211ULL);\n+\t    __result ^= static_cast<size_t>(*__first++);\n+\t    __result *= static_cast<size_t>(1099511628211ULL);\n \t  }\n \treturn __result;\n       }\n     };\n \n-  // XXX String and floating point hashes probably shouldn't be inline\n-  // member functions, since are nontrivial.  Once we have the framework\n-  // for TR1 .cc files, these should go in one.\n-  template<>\n-    struct hash<std::string>\n-    : public std::unary_function<std::string, std::size_t>\n-    {      \n-      std::size_t\n-      operator()(const std::string& __s) const\n-      { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n-    };\n-\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template<>\n-    struct hash<std::wstring>\n-    : public std::unary_function<std::wstring, std::size_t>\n-    {\n-      std::size_t\n-      operator()(const std::wstring& __s) const\n-      {\n-\treturn _Fnv_hash<>::hash(reinterpret_cast<const char*>(__s.data()),\n-\t\t\t\t __s.length() * sizeof(wchar_t));\n-      }\n-    };\n-#endif\n-\n+  // Explicit specializations for floating point types.\n   template<>\n-    struct hash<float>\n-    : public std::unary_function<float, std::size_t>\n+    inline size_t\n+    hash<float>::operator()(float __val) const\n     {\n-      std::size_t\n-      operator()(float __fval) const\n-      {\n-\tstd::size_t __result = 0;\n-\n-\t// 0 and -0 both hash to zero.\n-\tif (__fval != 0.0f)\n-\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__fval),\n-\t\t\t\t       sizeof(__fval));\n-\treturn __result;\n-      }\n+      size_t __result = 0;\n+      \n+      // 0 and -0 both hash to zero.\n+      if (__val != 0.0f)\n+\t__result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n+\t\t\t\t     sizeof(__val));\n+      return __result;\n     };\n \n   template<>\n-    struct hash<double>\n-    : public std::unary_function<double, std::size_t>\n+    inline size_t\n+    hash<double>::operator()(double __val) const\n     {\n-      std::size_t\n-      operator()(double __dval) const\n-      {\n-\tstd::size_t __result = 0;\n+\tsize_t __result = 0;\n \n \t// 0 and -0 both hash to zero.\n-\tif (__dval != 0.0)\n-\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__dval),\n-\t\t\t\t       sizeof(__dval));\n+\tif (__val != 0.0)\n+\t  __result = _Fnv_hash<>::hash(reinterpret_cast<const char*>(&__val),\n+\t\t\t\t       sizeof(__val));\n \treturn __result;\n-      }\n     };\n \n   // For long double, careful with random padding bits (e.g., on x86,\n   // 10 bytes -> 12 bytes) and resort to frexp.\n   template<>\n-    struct hash<long double>\n-    : public std::unary_function<long double, std::size_t>\n+    inline size_t\n+    hash<long double>::operator()(long double __val) const\n     {\n-      std::size_t\n-      operator()(long double __ldval) const\n-      {\n-\tstd::size_t __result = 0;\n-\n-\tint __exponent;\n-\t__ldval = std::frexp(__ldval, &__exponent);\n-\t__ldval = __ldval < 0.0l ? -(__ldval + 0.5l) : __ldval;\n-\n-\tconst long double __mult =\n-\t  __gnu_cxx::__numeric_traits<std::size_t>::__max + 1.0l;\n-\t__ldval *= __mult;\n-\n+      size_t __result = 0;\n+\n+      int __exponent;\n+      __val = std::frexp(__val, &__exponent);\n+      __val = __val < 0.0l ? -(__val + 0.5l) : __val;\n+      \n+      const long double __mult =\n+      __gnu_cxx::__numeric_traits<size_t>::__max + 1.0l;\n+      __val *= __mult;\n+      \n \t// Try to use all the bits of the mantissa (really necessary only\n \t// on 32-bit targets, at least for 80-bit floating point formats).\n-\tconst std::size_t __hibits = (std::size_t)__ldval;\n-\t__ldval = (__ldval - (long double)__hibits) * __mult;\n+      const size_t __hibits = (size_t)__val;\n+      __val = (__val - (long double)__hibits) * __mult;\n+      \n+      const size_t __coeff =\n+\t__gnu_cxx::__numeric_traits<size_t>::__max / __LDBL_MAX_EXP__;\n+      \n+      __result = __hibits + (size_t)__val + __coeff * __exponent;\n+      \n+      return __result;\n+    };\n \n-\tconst std::size_t __coeff =\n-\t  __gnu_cxx::__numeric_traits<std::size_t>::__max / __LDBL_MAX_EXP__;\n+  // Explicit specialization of member operator for types that are not builtin.\n+  template<>\n+    size_t\n+    hash<string>::operator()(string) const;\n \n-\t__result = __hibits + (std::size_t)__ldval + __coeff * __exponent;\n+  template<>\n+    size_t\n+    hash<const string&>::operator()(const string&) const;\n \n-\treturn __result;\n-      }\n-    };\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    size_t\n+    hash<wstring>::operator()(wstring) const;\n+\n+  template<>\n+    size_t\n+    hash<const wstring&>::operator()(const wstring&) const;\n+#endif\n \n _GLIBCXX_END_NAMESPACE_TR1\n }"}, {"sha": "f72792aebce6c5db2273dd0877a2e22e93b163cd", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -133,6 +133,7 @@ ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n ENABLE_VISIBILITY_FALSE = @ENABLE_VISIBILITY_FALSE@\n ENABLE_VISIBILITY_TRUE = @ENABLE_VISIBILITY_TRUE@\n+ERROR_CONSTANTS_SRCDIR = @ERROR_CONSTANTS_SRCDIR@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@"}, {"sha": "3e714743a24fcf1094256ad99e031b83a044558b", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -188,6 +188,7 @@ ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n ENABLE_VISIBILITY_FALSE = @ENABLE_VISIBILITY_FALSE@\n ENABLE_VISIBILITY_TRUE = @ENABLE_VISIBILITY_TRUE@\n+ERROR_CONSTANTS_SRCDIR = @ERROR_CONSTANTS_SRCDIR@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@"}, {"sha": "f9ec7e38ece553a8aa8bd45c32147a292ff328b4", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -118,6 +118,7 @@ ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n ENABLE_VISIBILITY_FALSE = @ENABLE_VISIBILITY_FALSE@\n ENABLE_VISIBILITY_TRUE = @ENABLE_VISIBILITY_TRUE@\n+ERROR_CONSTANTS_SRCDIR = @ERROR_CONSTANTS_SRCDIR@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@"}, {"sha": "419580190c5f0725b44a800f50007da9b36d5444", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -139,6 +139,8 @@ sources = \\\n \tdebug.cc \\\n \tdebug_list.cc \\\n \tfunctexcept.cc \\\n+\thash.cc \\\n+\thash_c++0x.cc \\\n \tglobals_io.cc \\\n \tios.cc \\\n \tios_failure.cc \\\n@@ -211,6 +213,11 @@ system_error.lo: system_error.cc\n system_error.o: system_error.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+hash_c++0x.lo: hash_c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+hash_c++0x.o: hash_c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n if GLIBCXX_LDBL_COMPAT\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64.\n@@ -276,7 +283,7 @@ endif\n \n debugdir = debug\n \n-# Build parallel set of debug objects here.\n+# Build a set of debug objects here.\n stamp-debug:\n \tif test ! -d ${debugdir}; then \\\n \t  mkdir -p ${debugdir}; \\"}, {"sha": "eb6e72353589c9ff6032d9ff6100d7e0f633a87f", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -69,36 +69,36 @@ toolexeclibLTLIBRARIES_INSTALL = $(INSTALL)\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__libstdc___la_SOURCES_DIST = bitmap_allocator.cc pool_allocator.cc \\\n \tmt_allocator.cc codecvt.cc compatibility.cc complex_io.cc \\\n-\tctype.cc debug.cc debug_list.cc functexcept.cc globals_io.cc \\\n-\tios.cc ios_failure.cc ios_init.cc ios_locale.cc limits.cc \\\n-\tlist.cc locale.cc locale_init.cc locale_facets.cc \\\n-\tlocalename.cc stdexcept.cc strstream.cc system_error.cc \\\n-\ttree.cc allocator-inst.cc concept-inst.cc fstream-inst.cc \\\n-\text-inst.cc ios-inst.cc iostream-inst.cc istream-inst.cc \\\n-\tistream.cc locale-inst.cc misc-inst.cc ostream-inst.cc \\\n-\tsstream-inst.cc streambuf-inst.cc streambuf.cc string-inst.cc \\\n-\tvalarray-inst.cc wlocale-inst.cc wstring-inst.cc atomicity.cc \\\n-\tcodecvt_members.cc collate_members.cc ctype_members.cc \\\n-\tmessages_members.cc monetary_members.cc numeric_members.cc \\\n-\ttime_members.cc basic_file.cc c++locale.cc \\\n-\tcompatibility-ldbl.cc\n+\tctype.cc debug.cc debug_list.cc functexcept.cc hash.cc \\\n+\thash_c++0x.cc globals_io.cc ios.cc ios_failure.cc ios_init.cc \\\n+\tios_locale.cc limits.cc list.cc locale.cc locale_init.cc \\\n+\tlocale_facets.cc localename.cc stdexcept.cc strstream.cc \\\n+\tsystem_error.cc tree.cc allocator-inst.cc concept-inst.cc \\\n+\tfstream-inst.cc ext-inst.cc ios-inst.cc iostream-inst.cc \\\n+\tistream-inst.cc istream.cc locale-inst.cc misc-inst.cc \\\n+\tostream-inst.cc sstream-inst.cc streambuf-inst.cc streambuf.cc \\\n+\tstring-inst.cc valarray-inst.cc wlocale-inst.cc \\\n+\twstring-inst.cc atomicity.cc codecvt_members.cc \\\n+\tcollate_members.cc ctype_members.cc messages_members.cc \\\n+\tmonetary_members.cc numeric_members.cc time_members.cc \\\n+\tbasic_file.cc c++locale.cc compatibility-ldbl.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n \tnumeric_members.lo time_members.lo\n am__objects_2 = basic_file.lo c++locale.lo\n @GLIBCXX_LDBL_COMPAT_TRUE@am__objects_3 = compatibility-ldbl.lo\n am__objects_4 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n \tcodecvt.lo compatibility.lo complex_io.lo ctype.lo debug.lo \\\n-\tdebug_list.lo functexcept.lo globals_io.lo ios.lo \\\n-\tios_failure.lo ios_init.lo ios_locale.lo limits.lo list.lo \\\n-\tlocale.lo locale_init.lo locale_facets.lo localename.lo \\\n-\tstdexcept.lo strstream.lo system_error.lo tree.lo \\\n-\tallocator-inst.lo concept-inst.lo fstream-inst.lo ext-inst.lo \\\n-\tios-inst.lo iostream-inst.lo istream-inst.lo istream.lo \\\n-\tlocale-inst.lo misc-inst.lo ostream-inst.lo sstream-inst.lo \\\n-\tstreambuf-inst.lo streambuf.lo string-inst.lo valarray-inst.lo \\\n-\twlocale-inst.lo wstring-inst.lo $(am__objects_1) \\\n-\t$(am__objects_2) $(am__objects_3)\n+\tdebug_list.lo functexcept.lo hash.lo hash_c++0x.lo \\\n+\tglobals_io.lo ios.lo ios_failure.lo ios_init.lo ios_locale.lo \\\n+\tlimits.lo list.lo locale.lo locale_init.lo locale_facets.lo \\\n+\tlocalename.lo stdexcept.lo strstream.lo system_error.lo \\\n+\ttree.lo allocator-inst.lo concept-inst.lo fstream-inst.lo \\\n+\text-inst.lo ios-inst.lo iostream-inst.lo istream-inst.lo \\\n+\tistream.lo locale-inst.lo misc-inst.lo ostream-inst.lo \\\n+\tsstream-inst.lo streambuf-inst.lo streambuf.lo string-inst.lo \\\n+\tvalarray-inst.lo wlocale-inst.lo wstring-inst.lo \\\n+\t$(am__objects_1) $(am__objects_2) $(am__objects_3)\n am_libstdc___la_OBJECTS = $(am__objects_4)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -168,6 +168,7 @@ ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n ENABLE_VISIBILITY_FALSE = @ENABLE_VISIBILITY_FALSE@\n ENABLE_VISIBILITY_TRUE = @ENABLE_VISIBILITY_TRUE@\n+ERROR_CONSTANTS_SRCDIR = @ERROR_CONSTANTS_SRCDIR@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@\n@@ -365,6 +366,8 @@ sources = \\\n \tdebug.cc \\\n \tdebug_list.cc \\\n \tfunctexcept.cc \\\n+\thash.cc \\\n+\thash_c++0x.cc \\\n \tglobals_io.cc \\\n \tios.cc \\\n \tios_failure.cc \\\n@@ -793,6 +796,11 @@ system_error.lo: system_error.cc\n system_error.o: system_error.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+hash_c++0x.lo: hash_c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+hash_c++0x.o: hash_c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64.\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc\n@@ -806,7 +814,7 @@ system_error.o: system_error.cc\n @GLIBCXX_BUILD_DEBUG_FALSE@all-local:\n @GLIBCXX_BUILD_DEBUG_FALSE@install-data-local:\n \n-# Build parallel set of debug objects here.\n+# Build a set of debug objects here.\n stamp-debug:\n \tif test ! -d ${debugdir}; then \\\n \t  mkdir -p ${debugdir}; \\"}, {"sha": "60554dd2a92b571798bac5f460a21aea61826fca", "filename": "libstdc++-v3/src/hash.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash.cc?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -0,0 +1,77 @@\n+//  std::hash and std::tr1::hash definitions -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstddef>\n+#include <string>\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <functional>\n+#  define _GLIBCXX_BEGIN_NAMESPACE_TR1 \n+#  define _GLIBCXX_END_NAMESPACE_TR1 \n+#else\n+#include <tr1/functional>\n+#  define _GLIBCXX_INCLUDE_AS_TR1\n+#  define _GLIBCXX_BEGIN_NAMESPACE_TR1 namespace tr1 {\n+#  define _GLIBCXX_END_NAMESPACE_TR1 }\n+#endif\n+\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_TR1\n+\n+  template<>\n+    size_t\n+    hash<string>::operator()(string __s) const\n+    { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n+\n+  template<>\n+    size_t\n+    hash<const string&>::operator()(const string& __s) const\n+    { return _Fnv_hash<>::hash(__s.data(), __s.length()); }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template<>\n+    size_t\n+    hash<wstring>::operator()(wstring __s) const\n+    {\n+      const char* __p = reinterpret_cast<const char*>(__s.data());\n+      return _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));\n+    }\n+\n+  template<>\n+    size_t\n+    hash<const wstring&>::operator()(const wstring& __s) const\n+    {\n+      const char* __p = reinterpret_cast<const char*>(__s.data());\n+      return _Fnv_hash<>::hash(__p, __s.length() * sizeof(wchar_t));\n+    }\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_TR1\n+}"}, {"sha": "528ffafb3e7eebe06e618e6cefad04f8900f8225", "filename": "libstdc++-v3/src/hash_c++0x.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -0,0 +1,42 @@\n+// std::hash definitions -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include \"hash.cc\"\n+#include <system_error>\n+\n+namespace std\n+{\n+  template<>\n+    size_t\n+    hash<error_code>::operator()(error_code __e) const\n+    { \n+      const char* __p = reinterpret_cast<const char*>(&__e);\n+      return _Fnv_hash<>::hash(__p, sizeof(__e));\n+    }\n+}"}, {"sha": "d943b3f836d4ff36e0e52e5e54e88b928673bff8", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9adfc73cd3e54416436bdc7429fa5596fdabcbe3/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=9adfc73cd3e54416436bdc7429fa5596fdabcbe3", "patch": "@@ -122,6 +122,7 @@ ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n ENABLE_VISIBILITY_FALSE = @ENABLE_VISIBILITY_FALSE@\n ENABLE_VISIBILITY_TRUE = @ENABLE_VISIBILITY_TRUE@\n+ERROR_CONSTANTS_SRCDIR = @ERROR_CONSTANTS_SRCDIR@\n EXEEXT = @EXEEXT@\n EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n FGREP = @FGREP@"}]}