{"sha": "f5ae72a9e30fa3cf924e10c43cdc6a71cd5ebc4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhZTcyYTllMzBmYTNjZjkyNGUxMGM0M2NkYzZhNzFjZDVlYmM0Yg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2008-07-23T11:18:03Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2008-07-23T11:18:03Z"}, "message": "Add missing ChangeLog from 138075\n\nFrom-SVN: r138082", "tree": {"sha": "5cc427dabe17f30738adec31d4f7aa0fab9d200e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cc427dabe17f30738adec31d4f7aa0fab9d200e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5ae72a9e30fa3cf924e10c43cdc6a71cd5ebc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ae72a9e30fa3cf924e10c43cdc6a71cd5ebc4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5ae72a9e30fa3cf924e10c43cdc6a71cd5ebc4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5ae72a9e30fa3cf924e10c43cdc6a71cd5ebc4b/comments", "author": null, "committer": null, "parents": [{"sha": "ab442df7fb453434d80a779844fe1a10c0c802ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab442df7fb453434d80a779844fe1a10c0c802ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab442df7fb453434d80a779844fe1a10c0c802ab"}], "stats": {"total": 403, "additions": 403, "deletions": 0}, "files": [{"sha": "a795a40c7492225a1193a1c29945eb76c0493c47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 403, "deletions": 0, "changes": 403, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5ae72a9e30fa3cf924e10c43cdc6a71cd5ebc4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5ae72a9e30fa3cf924e10c43cdc6a71cd5ebc4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5ae72a9e30fa3cf924e10c43cdc6a71cd5ebc4b", "patch": "@@ -1,3 +1,406 @@\n+2008-07-23  Michael Meissner  <gnu@the-meissners.org>\n+\t    Karthik Kumar  <karthikkumar@gmail.com>\n+\n+\t* attribs.c (file scope): Include c-common.h.\n+\t(decl_attributes): Add support for #pragma GCC optimize and\n+\t#pragma GCC option.\n+\n+\t* targhooks.c (default_can_inline_p): New function that is the\n+\tdefault for the TARGET_CAN_INLINE_P target hook.\n+\n+\t* targhooks.h (default_can_inline_p): Add declaration.\n+\n+\t* tree.c (cl_optimization_node): New static tree for building\n+\tOPTIMIZATION_NODE tree.\n+\t(cl_target_option_node): New static tree for building\n+\tTARGET_OPTION_NODE tree.\n+\t(cl_option_hash_table): New hash table for hashing\n+\tOPTIMIZATION_NODE and TARGET_OPTION_NODE trees.\n+\t(cl_option_hash_hash): New function to provide the hash value for\n+\tOPTIMIZATION_NODE and TARGET_OPTION_NODE trees.\n+\t(cl_option_hash_eq): New function to provide an equality test for\n+\tOPTIMIZATION_NODE and TARGET_OPTION_NODE trees.\n+\t(tree_code_size): Add support for OPTIMIZATION_NODE and\n+\tTARGET_OPTION_NODE trees.\n+\t(tree_code_structure): Add support for OPTIMIZATION_NODE and\n+\tTARGET_OPTION_NODE trees.\n+\t(build_optimization_node): Build a tree that has all of the\n+\tcurrent optimization options.\n+\t(build_target_option_node): Build a tree that has the target\n+\toptions that might be changed on a per function basis.\n+\n+\t* tree.h (file scope): Include options.h.\n+\t(DECL_FUNCTION_SPECIFIC_TARGET): New accessor macro.\n+\t(DECL_FUNCTION_SPECIFIC_OPTIMIZATION): Ditto.\n+\t(TREE_OPTIMIZATION): Ditto.\n+\t(TREE_TARGET_SPECIFIC): Ditto.\n+\t(struct tree_function_decl): Add fields for remembering the\n+\tcurrent optimization options and target specific options.\n+\t(struct tree_optimization_option): New tree variant that remembers\n+\tthe optimization options.\n+\t(struct tree_target_option): New tree variant that remembers the\n+\ttarget specific flags that might change for compiling a particular\n+\tfunction.\n+\t(union tree_node): Include tree_optimization_option and\n+\ttree_target_option fields.\n+\t(enum tree_index): Add TI_OPTIMIZATION_DEFAULT,\n+\tTI_OPTIMIZATION_CURRENT, TI_OPTIMIZATION_COLD,\n+\tTI_OPTIMIZATION_HOT, TI_TARGET_OPTION_DEFAULT,\n+\tTI_TARGET_OPTION_CURRENT, TI_CURRENT_OPTION_PRAGMA,\n+\tTI_CURRENT_OPTIMIZE_PRAGMA entries for saving function specific\n+\toptimization and target options.\n+\t(optimization_default_node): New macro to refer to global_trees\n+\tfield.\n+\t(optimization_current_node): Ditto.\n+\t(optimization_cold_node): Ditto.\n+\t(optimization_hot_node): Ditto.\n+\t(target_option_default_node): Ditto.\n+\t(target_option_current_node): Ditto.\n+\t(current_option_pragma): Ditto.\n+\t(current_optimize_pragma): Ditto.\n+\n+\t* target.h (struct gcc_target): Add valid_option_attribute_p,\n+\ttarget_option_save, target_option_restore, target_option_print,\n+\ttarget_option_pragma_parse, and can_inline_p hooks.\n+\n+\t* toplev.h (parse_optimize_options): Add declaration.\n+\t(fast_math_flags_struct_set_p): Ditto.\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins_optimize_pragma): New function to\n+\tadjust the current __OPTIMIZE__, etc. macros when #pragma GCC\n+\toptimize is used.\n+\n+\t* ipa-inline.c (cgraph_decide_inlining_of_small_function): Call\n+\ttree_can_inline_p hook to see if one function can inline another.\n+\t(cgraph_decide_inlining): Ditto.\n+\t(cgraph_decide_inlining_incrementally): Ditto.\n+\n+\t* opts.c (decode_options): Add support for running multiple times\n+\tto allow functions with different target or optimization options\n+\tthan was specified on the command line.\n+\t(fast_math_flags_struct_set_p): New function that is similar to\n+\tfast_math_flags_set_p, except it uses the values in the\n+\tcl_optimization structure instead of global variables.\n+\n+\t* optc-gen.awk: Add support for TargetSave to allow a back end to\n+\tdeclare new fields that need to be saved when using function\n+\tspecific options.  Include flags.h and target.h in the options.c\n+\tsource.  Add support for Save to indicate which options can be set\n+\tfor individual functions.  Generate cl_optimize_save,\n+\tcl_optimize_restore, cl_optimize_print, cl_target_option_save,\n+\tcl_target_option_restore, cl_target_option_print functions to\n+\tallow functions to use different optimization or target options.\n+\n+\t* opt-functions.awk (var_type_struct): Return the type used for\n+\tstoring the field in a structure.\n+\n+\t* opth-gen.awk: Add support for TargetSave to allow a back end to\n+\tdeclare new fields that need to be saved when using function\n+\tspecific options.  Add support for Save to indicate which options\n+\tcan be set for individual functions.  Only generate one extern for\n+\tMask fields.  Generate cl_optimization and cl_target_option\n+\tstructures to remember optimization and target options.\n+\n+\t* treestruct.def (TS_OPTIMIZATION): Add support for garbage\n+\tcollecting new tree nodes.\n+\t(TS_TARGET_OPTION): Ditto.\n+\n+\t* c-decl.c (merge_decls): Merge function specific target and\n+\toptimization options.\n+\n+\t* function.c (invoke_set_current_function_hook): If the function\n+\tuses different optimization options, change the global variables\n+\tto reflect this.\n+\n+\t* coretypes.h (struct cl_optimization): Add forward reference.\n+\t(struct cl_target_option): Ditto.\n+\n+\t* c-pragma.c (option_stack): New static vector to remember the\n+\tcurrent #pragma GCC option stack.\n+\t(handle_pragma_option): New function to support #pragma GCC option\n+\tto change target options.\n+\t(optimize_stack): New static vector to remember the current\n+\t#pragma GCC optimize stack.\n+\t(handle_pragma_optimize): New function to support #pragma GCC\n+\toptimize to change optimization options.\n+\t(init_pragma): Add support for #pragma GCC optimize and #pragma\n+\tGCC option.\n+\n+\t* tree.def (OPTIMIZATION_NODE): New tree code for remembering\n+\toptimization options.\n+\t(TARGET_OPTION_NODE): New tree code for remembering certain target\n+\toptions.\n+\n+\t* print-tree.c (print_node): Add support for OPTIMIZATION_NODE and\n+\tTARGET_OPTION_NODE trees.\n+\n+\t* common.opt (-O): Add Optimization flag.\n+\t(-Os): Ditto.\n+\t(-fmath-errno): Ditto.\n+\t(-falign-functions): Add UInteger flag to make sure flag gets full\n+\tint in cl_optimization structure.\n+\t(-falign-jumps): Ditto.\n+\t(-falign-labels): Ditto.\n+\t(-falign-loops): Ditto.\n+\t(-fsched-stalled-insns): Ditto.\n+\t(-fsched-stalled-insns-dep): Ditto.\n+\n+\t* target-def.h (TARGET_VALID_OPTION_ATTRIBUTE_P): Add default\n+\tdefinition.\n+\t(TARGET_OPTION_SAVE): Ditto.\n+\t(TARGET_OPTION_RESTORE): Ditto.\n+\t(TARGET_OPTION_PRINT): Ditto.\n+\t(TARGET_OPTION_PRAGMA_PARSE): Ditto.\n+\t(TARGET_CAN_INLINE_P): Ditto.\n+\t(TARGET_INITIALIZER): Add new hooks.\n+\n+\t* tree-inline.c (tree_can_inline_p): New function to determine\n+\twhether one function can inline another.  Check if the functions\n+\tuse compatible optimization options, and also call the backend\n+\tcan_inline_p hook.\n+\n+\t* tree-inline.h (tree_can_inline_p): Add declaration.\n+\n+\t* c-common.c (c_common_attribute): Add support for option and\n+\toptimize attributes.\n+\t(handle_option_attribute): Add support for the option attribute to\n+\tallow the user to specify different target options for compiling a\n+\tspecific function.\n+\t(handle_optimize_attribute): Add support for the optimize\n+\tattribute to allow the user to specify different optimization\n+\toptions for compiling a specific function.\n+\t(handle_hot_attribute): Turn on -O3 optimization for this one\n+\tfunction if it isn't the default optimization level.\n+\t(handle_cold_attribute): Turn on -Os optimization for this one\n+\tfunction if it insn't the default optimization.\n+\t(const_char_p): New const char * typedef.\n+\t(optimize_args): New static vector to remember the optimization\n+\targuments.\n+\t(parse_optimize_options): New function to set up the optimization\n+\targuments from either the optimize attribute or #pragma GCC\n+\toptimize.\n+\n+\t* c-common.h (c_cpp_builtins_optimize_pragma): Add declaration.\n+\t(builtin_define_std): Ditto.\n+\n+\t* config.gcc (i[3467]86-*-*): Add i386-c.o to C/C++ languages.\n+\tAdd t-i386 Makefile fragment to add i386-c.o and i386.o\n+\tdependencies.\n+\t(x86_64-*-*): Ditto.\n+\n+\t* Makefile.in (TREE_H): Add options.h.\n+\t(options.o): Add $(TARGET_H) $(FLAGS_H) dependencies.\n+\n+\t* doc/extend.texi (option attribute): Document new attribute.\n+\t(optimize attribute): Ditto.\n+\t(hot attribute): Document hot attribute sets -O3.\n+\t(cold attribute): Document cold attribute sets -Os.\n+\t(#pragma GCC option): Document new pragma.\n+\t(#pragma GCC optimize): Ditto.\n+\n+\t* doc/options.texi (TargetSave): Document TargetSave syntax.\n+\t(UInteger): Document UInteger must be used for certain flags.\n+\t(Save): Document Save option to create target specific options\n+\tthat can be saved/restored on a function specific context.\n+\n+\t* doc/c-tree.texi (DECL_FUNCTION_SPECIFIC_TARGET): Document new\n+\tmacro.\n+\t(DECL_FUNCTION_SPECIFIC_OPTIMIZATION): Ditto.\n+\n+\t* doc/tm.texi (TARGET_VALID_OPTION_ATTRIBUTE_P): Document new\n+\thook.\n+\t(TARGET_OPTION_SAVE): Ditto.\n+\t(TARGET_OPTION_RESTORE): Ditto.\n+\t(TARGET_OPTION_PRINT): Ditto.\n+\t(TARGET_OPTION_PRAGMA_PARSE): Ditto.\n+\t(TARGET_CAN_INLINE_P): Ditto.\n+\n+\t* doc/invoke.texi (-mfpmath=sse+387): Document as an alias for\n+\t-mfpmath=sse,387.\n+\t(-mfpmath=both): Ditto.\n+\n+2008-07-23  Michael Meissner  <gnu@the-meissners.org>\n+\t    Karthik Kumar  <karthikkumar@gmail.com>\n+\n+\t* config/i386/i386.h (TARGET_ABM): Move switch into\n+\tix86_isa_flags.\n+\t(TARGET_POPCNT): Ditto.\n+\t(TARGET_SAHF): Ditto.\n+\t(TARGET_AES): Ditto.\n+\t(TARGET_PCLMUL): Ditto.\n+\t(TARGET_CMPXCHG16B): Ditto.\n+\t(TARGET_RECIP): Move switch into target_flags.\n+\t(TARGET_FUSED_MADD): Ditto.\n+\t(ix86_arch_features): Make an unsigned char type.\n+\t(ix86_tune_features): Ditto.\n+\t(OVERRIDE_OPTIONS): Add bool argument to override_options call.\n+\t(TARGET_CPU_CPP_BUILTINS): Move into ix86_target_macros.\n+\t(REGISTER_TARGET_PRAGMAS): Define, call ix86_register_pragmas.\n+\n+\t* config/i386/i386.opt (arch): New TargetSave field to define\n+\tfields that need to be saved for function specific option\n+\tsupport.\n+\t(tune): Ditto.\n+\t(fpmath): Ditto.\n+\t(branch_cost): Ditto.\n+\t(ix86_isa_flags_explicit): Ditto.\n+\t(tune_defaulted): Ditto.\n+\t(arch_specified): Ditto.\n+\t(-m128-long-double): Add Save flag to save option for target\n+\tspecific option support.\n+\t(-m80387): Ditto.\n+\t(-maccumulate-outgoing-args): Ditto.\n+\t(-malign-double): Ditto.\n+\t(-malign-stringops): Ditto.\n+\t(-mfancy-math-387): Ditto.\n+\t(-mhard-float): Ditto.\n+\t(-mieee-fp): Ditto.\n+\t(-minline-all-stringops): Ditto.\n+\t(-minline-stringops-dynamically): Ditto.\n+\t(-mms-bitfields): Ditto.\n+\t(-mno-align-stringops): Ditto.\n+\t(-mno-fancy-math-387): Ditto.\n+\t(-mno-push-args): Ditto.\n+\t(-mno-red-zone): Ditto.\n+\t(-mpush-args): Ditto.\n+\t(-mred-zone): Ditto.\n+\t(-mrtd): Ditto.\n+\t(-msseregparm): Ditto.\n+\t(-mstack-arg-probe): Ditto.\n+\t(-m32): Ditto.\n+\t(-m64): Ditto.\n+\t(-mmmx): Ditto.\n+\t(-m3dnow): Ditto.\n+\t(-m3dnowa): Ditto.\n+\t(-msse): Ditto.\n+\t(-msse2): Ditto.\n+\t(-msse3): Ditto.\n+\t(-msse4.1): Ditto.\n+\t(-msse4.2): Ditto.\n+\t(-msse4): Ditto.\n+\t(-mno-sse4): Ditto.\n+\t(-msse4a): Ditto.\n+\t(-msse5): Ditto.\n+\t(-mrecip): Move flag into target_flags.\n+\t(-mcld): Ditto.\n+\t(-mno-fused-madd): Ditto.\n+\t(-mfused-madd): Ditto.\n+\t(-mabm): Move flag into ix86_isa_flags.\n+\t(-mcx16): Ditto.\n+\t(-mpopcnt): Ditto.\n+\t(-msahf): Ditto.\n+\t(-maes): Ditto.\n+\t(-mpclmul): Ditto.\n+\n+\t* config/i386/i386-c.c: New file for #pragma support.\n+\t(ix86_target_macros_internal): New function to #define or #undef\n+\ttarget macros based when the user uses the #pragma GCC option to\n+\tchange target options.\n+\t(ix86_pragma_option_parse): New function to add #pragma GCC option\n+\tsupport.\n+\t(ix86_target_macros): Move defining the target macros here from\n+\tTARGET_CPU_CPP_BUILTINS in i386.h.\n+\t(ix86_register_pragmas): Register the #pragma GCC option hook.  If\n+\tdefined, initialize any subtarget #pragmas.\n+\n+\t* config/i386/darwin.h (REGISTER_SUBTARGET_PRAGMAS): Rename from\n+\tREGISTER_TARGET_PRAGMAS.\n+\n+\t* config/i386/t-i386: New file for x86 dependencies.\n+\t(i386.o): Make dependencies mirror the include files used.\n+\t(i386-c.o): New file, add dependencies.\n+\n+\t* config/i386/i386-protos.h (override_options): Add bool\n+\targument.\n+\t(ix86_valid_option_attribute_tree): Add declaration.\n+\t(ix86_target_macros): Ditto.\n+\t(ix86_register_macros): Ditto.\n+\n+\t* config/i386/i386.c (ix86_tune_features): Move initialization of\n+\tthe target masks to initial_ix86_tune_features to allow functions\n+\tto have different target options.  Make type unsigned char,\n+\tinstead of unsigned int.\n+\t(initial_ix86_tune_features): New static vector to hold processor\n+\tmasks for the tune variables.\n+\t(ix86_arch_features): Move initialization of the target masks to\n+\tinitial_ix86_arch_features to allow functions to have different\n+\ttarget options.  Make type unsigned char, instead of unsigned\n+\tint.\n+\t(initial_ix86_arch_features): New static vector to hold processor\n+\tmasks for the arch variables.\n+\t(enum ix86_function_specific_strings): New enum to describe the\n+\tstring options used for attribute((option(...))).\n+\t(ix86_target_string): New function to return a string that\n+\tdescribes the target options.\n+\t(ix86_debug_options): New function to print the current options in\n+\tthe debugger.\n+\t(ix86_function_specific_save): New function hook to save the\n+\tfunction specific global variables in the cl_target_option\n+\tstructure.\n+\t(ix86_function_specific_restore): New function hook to restore the\n+\tfunction specific variables from the cl_target_option structure to\n+\tthe global variables.\n+\t(ix86_function_specific_print): New function hook to print the\n+\ttarget specific options in the cl_target_option structure.\n+\t(ix86_valid_option_attribute_p): New function hook to validate\n+\tattribute((option(...))) arguments.\n+\t(ix86_valid_option_attribute_tree): New function that is common\n+\tcode between attribute((option(...))) and #pragma GCC option\n+\tsupport that parses the options and returns a tree holding the\n+\toptions.\n+\t(ix86_valid_option_attribute_inner_p): New helper function for\n+\tix86_valid_option_attribute_tree.\n+\t(ix86_can_inline_p): New function hook to decide if one function\n+\tcan inline another on a target specific basis.\n+\t(ix86_set_current_function); New function hook to switch target\n+\toptions if the user used attribute((option(...))) or #pragma GCC\n+\toption.\n+\t(ix86_tune_defaulted): Move to static file scope from\n+\toverride_options.\n+\t(ix86_arch_specified): Ditto.\n+\t(OPTION_MASK_ISA_AES_SET): New macro for moving switches into\n+\tix86_isa_flags.\n+\t(OPTION_MASK_ISA_PCLMUL_SET): Ditto.\n+\t(OPTION_MASK_ISA_ABM_SET): Ditto.\n+\t(OPTION_MASK_ISA_POPCNT_SET): Ditto.\n+\t(OPTION_MASK_ISA_CX16_SET): Ditto.\n+\t(OPTION_MASK_ISA_SAHF_SET): Ditto.\n+\t(OPTION_MASK_ISA_AES_UNSET): Ditto.\n+\t(OPTION_MASK_ISA_PCLMUL_UNSET): Ditto.\n+\t(OPTION_MASK_ISA_ABM_UNSET): Ditto.\n+\t(OPTION_MASK_ISA_POPCNT_UNSET): Ditto.\n+\t(OPTION_MASK_ISA_CX16_UNSET): Ditto.\n+\t(OPTION_MASK_ISA_SAHF_UNSET): Ditto.\n+\t(struct ptt): Move to static file scope from override_options.\n+\t(processor_target_table): Ditto.\n+\t(cpu_names): Ditto.\n+\t(ix86_handle_option): Add support for options that are now isa\n+\toptions.\n+\t(override_options): Add support for declaring functions that\n+\tsupport different target options than were specified on the\n+\tcommand line.  Move struct ptt, processor_target_table, cpu_names,\n+\tix86_tune_defaulted, ix86_arch_specified to static file scope.\n+\tAdd bool argument.  Fix up error messages so the appropriate error\n+\tis given for either command line or attribute.\n+\t(ix86_previous_fndecl): New static to remember previous function\n+\tdeclaration to see if we need to change target options.\n+\t(ix86_builtins_isa): New array to record the ISA of each builtin\n+\tfunction.\n+\t(def_builtin): Always create the builtin function, even if the\n+\tcurrent ISA doesn't support it.\n+\t(ix86_init_mmx_sse_builtins): Remove TARGET_AES and TARGET_PCLMUL\n+\ttests for those builtins.\n+\t(ix86_init_builtins): Remove TARGET_MMX test for calling\n+\tix86_init_mmx_sse_builtins.\n+\t(ix86_expand_builtin): If the current ISA doesn't support a given\n+\tbuiltin, signal an error.\n+\t(TARGET_VALID_OPTION_ATTRIBUTE_P): Set target hook.\n+\t(TARGET_SET_CURRENT_FUNCTION): Ditto.\n+\t(TARGET_OPTION_SAVE): Ditto.\n+\t(TARGET_OPTION_RESTORE): Ditto.\n+\t(TARGET_OPTION_PRINT): Ditto.\n+\t(TARGET_CAN_INLINE_P): Ditto.\n+\n 2008-07-22  Rafael Avila de Espindola  <espindola@google.com>\n \n        * c-typeck.c (build_external_ref): Don't call assemble_external."}]}