{"sha": "b7fc8b576e9aafd37dcc8e78a87372eb8eae011b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdmYzhiNTc2ZTlhYWZkMzdkY2M4ZTc4YTg3MzcyZWI4ZWFlMDExYg==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-05-25T12:59:22Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-05-25T12:59:22Z"}, "message": "parser.c (cp_parser_explicit_instantiation): Restore old access before template instantiation.\n\n\t* parser.c (cp_parser_explicit_instantiation): Restore old\n\taccess before template instantiation.\n\n\t* g++.dg/template/access11.C: New test.\n\nFrom-SVN: r67166", "tree": {"sha": "b4fe5fbb56771ed361b7bb1fd800cb8a22806330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4fe5fbb56771ed361b7bb1fd800cb8a22806330"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b/comments", "author": null, "committer": null, "parents": [{"sha": "c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7684ffe55c75b893fe40988dbb8fcea9beae3ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7684ffe55c75b893fe40988dbb8fcea9beae3ba"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "33fcb14d652d690c24d89aff6a2c780955bf8835", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b7fc8b576e9aafd37dcc8e78a87372eb8eae011b", "patch": "@@ -1,3 +1,8 @@\n+2003-05-25  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* parser.c (cp_parser_explicit_instantiation): Restore old\n+\taccess before template instantiation.\n+\n 2003-05-23  Geoffrey Keating  <geoffk@apple.com>\n \n \t* lang-specs.h: Use -o to specify preprocessor's output file."}, {"sha": "19172f00ea2d19c51e8e3e4c12da3cf8d55acb14", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b7fc8b576e9aafd37dcc8e78a87372eb8eae011b", "patch": "@@ -8318,6 +8318,9 @@ cp_parser_explicit_instantiation (cp_parser* parser)\n       tree type;\n \n       type = check_tag_decl (decl_specifiers);\n+      /* Turn access control back on for names used during\n+\t template instantiation.  */\n+      pop_deferring_access_checks ();\n       if (type)\n \tdo_type_instantiation (type, extension_specifier, /*complain=*/1);\n     }\n@@ -8332,13 +8335,14 @@ cp_parser_explicit_instantiation (cp_parser* parser)\n \t\t\t\t/*ctor_dtor_or_conv_p=*/NULL);\n       decl = grokdeclarator (declarator, decl_specifiers, \n \t\t\t     NORMAL, 0, NULL);\n+      /* Turn access control back on for names used during\n+\t template instantiation.  */\n+      pop_deferring_access_checks ();\n       /* Do the explicit instantiation.  */\n       do_decl_instantiation (decl, extension_specifier);\n     }\n   /* We're done with the instantiation.  */\n   end_explicit_instantiation ();\n-  /* Turn access control back on.  */\n-  pop_deferring_access_checks ();\n \n   cp_parser_consume_semicolon_at_end_of_statement (parser);\n }"}, {"sha": "b670e7d8f71e1b02d0e7f22454df7cb5a32ae84e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7fc8b576e9aafd37dcc8e78a87372eb8eae011b", "patch": "@@ -1,3 +1,7 @@\n+2003-05-25  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* g++.dg/template/access11.C: New test.\n+\n 2003-05-25  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/10849"}, {"sha": "f061f6616eb899fe408b58e0312771a11203c054", "filename": "gcc/testsuite/g++.dg/template/access11.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7fc8b576e9aafd37dcc8e78a87372eb8eae011b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess11.C?ref=b7fc8b576e9aafd37dcc8e78a87372eb8eae011b", "patch": "@@ -0,0 +1,24 @@\n+// Copyright (C) 2003 Free Software Foundation\n+// Contributed by Kriang Lerdsuwanakij <lerdsuwa@users.sourceforge.net>\n+// { dg-do compile }\n+\n+// Access checking during explicit instantiation.\n+\n+class A {\n+  typedef int X;\t\t// { dg-error \"private\" }\n+};\n+\n+class X {\n+  private:\n+  template <typename T> struct Y;\n+};\n+\n+template <> struct X::Y<int> {\n+  A::X x;\t\t\t// { dg-error \"this context\" }\n+};\n+\n+template <typename T> struct X::Y {\n+  typename T::X x;\t\t// { dg-error \"this context\" }\n+};\n+\n+template struct X::Y<A>;\t// { dg-error \"instantiated\" }"}]}