{"sha": "c79043f3f4ddfaf0d50a9ec52fc05c37fd645447", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5MDQzZjNmNGRkZmFmMGQ1MGE5ZWM1MmZjMDVjMzdmZDY0NTQ0Nw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-08-14T06:36:51Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-08-14T06:36:51Z"}, "message": "toplev.c (parse_options_and_default_flags): Don't call post_options here.\n\n\t* toplev.c (parse_options_and_default_flags): Don't call\n\tpost_options here.\n\t(general_init): Initialize GC, pools and tree hash here,\n\tinstead of lang_independent_init.\n\t(lang_independent_init): Rename backend_init.\n\t(do_compile): Call post_options hook; exit early if there\n\thave been errors after switch processing.\n\t(toplev_main): Update.\n\nFrom-SVN: r56274", "tree": {"sha": "101d0dd96c26380883e79d8a0e77e08709fe1af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101d0dd96c26380883e79d8a0e77e08709fe1af2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c79043f3f4ddfaf0d50a9ec52fc05c37fd645447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79043f3f4ddfaf0d50a9ec52fc05c37fd645447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79043f3f4ddfaf0d50a9ec52fc05c37fd645447", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79043f3f4ddfaf0d50a9ec52fc05c37fd645447/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bf346d484bb8158e3c54f5353fdad46f9b7231c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf346d484bb8158e3c54f5353fdad46f9b7231c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf346d484bb8158e3c54f5353fdad46f9b7231c"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "05681e737ed3f175ec28df73d4d0e10a2f29582a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79043f3f4ddfaf0d50a9ec52fc05c37fd645447/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79043f3f4ddfaf0d50a9ec52fc05c37fd645447/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c79043f3f4ddfaf0d50a9ec52fc05c37fd645447", "patch": "@@ -1,3 +1,14 @@\n+2002-08-14  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* toplev.c (parse_options_and_default_flags): Don't call\n+\tpost_options here.\n+\t(general_init): Initialize GC, pools and tree hash here,\n+\tinstead of lang_independent_init.\n+\t(lang_independent_init): Rename backend_init.\n+\t(do_compile): Call post_options hook; exit early if there\n+\thave been errors after switch processing.\n+\t(toplev_main): Update.\n+\n 2002-08-14  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* c-pretty-print.h: Guard against multiple inclusion."}, {"sha": "aec618f178ccce8282dc884bdafdd3e54ba4e95b", "filename": "gcc/toplev.c", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79043f3f4ddfaf0d50a9ec52fc05c37fd645447/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79043f3f4ddfaf0d50a9ec52fc05c37fd645447/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c79043f3f4ddfaf0d50a9ec52fc05c37fd645447", "patch": "@@ -97,10 +97,10 @@ extern tree last_assemble_variable_decl;\n extern void reg_alloc PARAMS ((void));\n \n static void general_init PARAMS ((char *));\n-static bool parse_options_and_default_flags PARAMS ((int, char **));\n-static void do_compile PARAMS ((int));\n+static void parse_options_and_default_flags PARAMS ((int, char **));\n+static void do_compile PARAMS ((void));\n static void process_options PARAMS ((void));\n-static void lang_independent_init PARAMS ((int));\n+static void backend_init PARAMS ((void));\n static int lang_dependent_init PARAMS ((const char *));\n static void init_asm_output PARAMS ((const char *));\n static void finalize PARAMS ((void));\n@@ -4723,6 +4723,12 @@ general_init (argv0)\n   /* Initialize the diagnostics reporting machinery, so option parsing\n      can give warnings and errors.  */\n   diagnostic_initialize (global_dc);\n+\n+  /* Initialize the garbage-collector, string pools and tree type hash\n+     table.  */\n+  init_ggc ();\n+  init_stringpool ();\n+  init_ttree ();\n }\n \f\n /* Parse command line options and set default flag values, called\n@@ -4731,7 +4737,7 @@ general_init (argv0)\n    and identifier hashtables etc. are not initialized yet.\n \n    Return non-zero to suppress compiler back end initialization.  */\n-static bool\n+static void\n parse_options_and_default_flags (argc, argv)\n      int argc;\n      char **argv;\n@@ -4968,10 +4974,6 @@ parse_options_and_default_flags (argc, argv)\n \n   if (flag_really_no_inline == 2)\n     flag_really_no_inline = flag_no_inline;\n-\n-  /* All command line options have been parsed; allow the front end to\n-     perform consistency checks, etc.  */\n-  return (*lang_hooks.post_options) ();\n }\n \f\n /* Process the options that have been parsed.  */\n@@ -5151,21 +5153,10 @@ process_options ()\n       flag_trapping_math = 1;\n }\n \f\n-/* Language-independent initialization, before language-dependent\n-   initialization.  */\n+/* Initialize the compiler back end.  */\n static void\n-lang_independent_init (no_backend)\n-     int no_backend;\n+backend_init ()\n {\n-  /* Initialize the garbage-collector, and string pools.  */\n-  init_ggc ();\n-\n-  init_stringpool ();\n-  init_ttree ();\n-\n-  if (no_backend)\n-    return;\n-\n   /* init_emit_once uses reg_raw_mode and therefore must be called\n      after init_regs which initialized reg_raw_mode.  */\n   init_regs ();\n@@ -5305,12 +5296,19 @@ finalize ()\n \f\n /* Initialize the compiler, and compile the input file.  */\n static void\n-do_compile (no_backend)\n-     int no_backend;\n+do_compile ()\n {\n+  /* All command line options have been parsed; allow the front end to\n+     perform consistency checks, etc.  */\n+  bool no_backend = (*lang_hooks.post_options) ();\n+\n   /* The bulk of command line switch processing.  */\n   process_options ();\n \n+  /* If an error has already occurred, give up.  */\n+  if (errorcount)\n+    return;\n+\n   if (aux_base_name)\n     /*NOP*/;\n   else if (filename)\n@@ -5320,7 +5318,6 @@ do_compile (no_backend)\n       aux_base_name = name;\n       strip_off_ending (name, strlen (name));\n     }\n-  \n   else\n     aux_base_name = \"gccaux\";\n \n@@ -5329,9 +5326,9 @@ do_compile (no_backend)\n   init_timevar ();\n   timevar_start (TV_TOTAL);\n \n-  /* Language-independent initialization.  Also sets up GC, identifier\n-     hashes etc., and the back-end if requested.  */\n-  lang_independent_init (no_backend);\n+  /* Set up the back-end if requested.  */\n+  if (!no_backend)\n+    backend_init ();\n \n   /* Language-dependent initialization.  Returns true on success.  */\n   if (lang_dependent_init (filename))\n@@ -5356,18 +5353,16 @@ toplev_main (argc, argv)\n      int argc;\n      char **argv;\n {\n-  bool no_backend;\n-\n   /* Initialization of GCC's environment, and diagnostics.  */\n   general_init (argv[0]);\n \n   /* Parse the options and do minimal processing; basically just\n      enough to default flags appropriately.  */\n-  no_backend = parse_options_and_default_flags (argc, argv);\n+  parse_options_and_default_flags (argc, argv);\n \n   /* Exit early if we can (e.g. -help).  */\n-  if (!errorcount && !exit_after_options)\n-    do_compile (no_backend);\n+  if (!exit_after_options)\n+    do_compile ();\n \n   if (errorcount || sorrycount)\n     return (FATAL_EXIT_CODE);"}]}