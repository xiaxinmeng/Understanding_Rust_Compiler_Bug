{"sha": "c2e999dfeb7680617c0febb42299ebfac01a6bf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlOTk5ZGZlYjc2ODA2MTdjMGZlYmI0MjI5OWViZmFjMDFhNmJmNw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-11-06T16:32:56Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2004-11-06T16:32:56Z"}, "message": "StringBuffer.java, [...]: Removed redundant and reordered modifiers.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n       * java/lang/StringBuffer.java,\n       java/lang/Throwable.java,\n       java/security/spec/DSAParameterSpec.java,\n       java/util/zip/ZipEntry.java,\n       java/util/zip/ZipFile.java,\n       java/util/zip/ZipInputStream.java,\n       java/util/zip/ZipOutputStream.java:\n       Removed redundant and reordered modifiers.\n\nFrom-SVN: r90177", "tree": {"sha": "aff38876d319e5c2226533f8778d4e434e4a7110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aff38876d319e5c2226533f8778d4e434e4a7110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2e999dfeb7680617c0febb42299ebfac01a6bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e999dfeb7680617c0febb42299ebfac01a6bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e999dfeb7680617c0febb42299ebfac01a6bf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e999dfeb7680617c0febb42299ebfac01a6bf7/comments", "author": null, "committer": null, "parents": [{"sha": "08d930240971fcc6d7b8023aed2f367581669df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d930240971fcc6d7b8023aed2f367581669df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08d930240971fcc6d7b8023aed2f367581669df9"}], "stats": {"total": 110, "additions": 60, "deletions": 50}, "files": [{"sha": "3b05c688e41fa9730a9741168c6a8deed9e95307", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c2e999dfeb7680617c0febb42299ebfac01a6bf7", "patch": "@@ -1,3 +1,14 @@\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/lang/StringBuffer.java,\n+\tjava/lang/Throwable.java,\n+\tjava/security/spec/DSAParameterSpec.java,\n+\tjava/util/zip/ZipEntry.java,\n+\tjava/util/zip/ZipFile.java,\n+\tjava/util/zip/ZipInputStream.java,\n+\tjava/util/zip/ZipOutputStream.java:\n+\tRemoved redundant and reordered modifiers.\n+\n 2004-11-06  Mattias Rehnberg  <Mattias.Rehnberg@home.se>\n \n \t* java/io/Vector.java"}, {"sha": "4f04de265cabefbc89dbdcd986d1f33aa6361fe5", "filename": "libjava/java/lang/StringBuffer.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Flang%2FStringBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Flang%2FStringBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStringBuffer.java?ref=c2e999dfeb7680617c0febb42299ebfac01a6bf7", "patch": "@@ -109,7 +109,7 @@ public final class StringBuffer implements Serializable, CharSequence\n   /**\n    * The default capacity of a buffer.\n    */\n-  private final static int DEFAULT_CAPACITY = 16;\n+  private static final int DEFAULT_CAPACITY = 16;\n \n   /**\n    * Create a new StringBuffer with default capacity 16."}, {"sha": "e082548300bc9da5d397e98b293eb517bcc6f4f6", "filename": "libjava/java/lang/Throwable.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Flang%2FThrowable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Flang%2FThrowable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThrowable.java?ref=c2e999dfeb7680617c0febb42299ebfac01a6bf7", "patch": "@@ -401,8 +401,7 @@ public void printStackTrace (PrintWriter pw)\n    */\n   private static class StaticData\n   {\n-\n-    final static String nl;\n+    static final String nl;\n \n     static\n     {"}, {"sha": "337dc945a43d927a834f683926141783f4003c05", "filename": "libjava/java/security/spec/DSAParameterSpec.java", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAParameterSpec.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAParameterSpec.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2Fspec%2FDSAParameterSpec.java?ref=c2e999dfeb7680617c0febb42299ebfac01a6bf7", "patch": "@@ -37,16 +37,17 @@\n \n \n package java.security.spec;\n-import java.security.interfaces.DSAParams;\n+\n import java.math.BigInteger;\n+import java.security.interfaces.DSAParams;\n \n /**\n-\tDSA Parameter class Specification. Used to maintain the DSA\n-\tParameters.\n-\n-\t@since JDK 1.2\n-\n-\t@author Mark Benvenuto\n+ * DSA Parameter class Specification. Used to maintain the DSA\n+ * Parameters.\n+ *\n+ * @since 1.2\n+ *\n+ * @author Mark Benvenuto\n */\n public class DSAParameterSpec implements AlgorithmParameterSpec, DSAParams\n {\n@@ -55,46 +56,46 @@ public class DSAParameterSpec implements AlgorithmParameterSpec, DSAParams\n   private BigInteger g = null;\n \n   /**\n-     Constructs a new DSAParameterSpec with the specified p, q, and g.\n-\n-     @param p the prime\n-     @param q the sub-prime\n-     @param g the base\n-  */\n+   * Constructs a new DSAParameterSpec with the specified p, q, and g.\n+   *\n+   * @param p the prime\n+   * @param q the sub-prime\n+   * @param g the base\n+   */\n   public DSAParameterSpec(BigInteger p, BigInteger q, BigInteger g) \n   {\n     this.p = p;\n     this.q = q;\n     this.g = g;\n   }\n+  \n   /**\n-     Returns p for the DSA algorithm.\n-\n-     @return Returns the requested BigInteger\n-  */\n+   * Returns p for the DSA algorithm.\n+   *\n+   * @return Returns the requested BigInteger\n+   */\n   public BigInteger getP() \n   {\n     return this.p;\n   }\n \n   /**\n-     Returns p for the DSA algorithm.\n-\n-     @return Returns the requested BigInteger\n-  */\n+   * Returns p for the DSA algorithm.\n+   *\n+   * @return Returns the requested BigInteger\n+   */\n   public BigInteger getQ() \n   {\n     return this.q;\n   }\n \n   /**\n-     Returns g for the DSA algorithm.\n-\n-     @return Returns the requested BigInteger\n-  */\n+   * Returns g for the DSA algorithm.\n+   *\n+   * @return Returns the requested BigInteger\n+   */\n   public BigInteger getG()\n   {\n     return this.g;\n   }\n-\n-}\n+}\n\\ No newline at end of file"}, {"sha": "9e0ac310ef1ecb18e264dcb2c78366db1ea95153", "filename": "libjava/java/util/zip/ZipEntry.java", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipEntry.java?ref=c2e999dfeb7680617c0febb42299ebfac01a6bf7", "patch": "@@ -1,4 +1,4 @@\n-/* java.util.zip.ZipEntry\n+/* ZipEntry.java --\n    Copyright (C) 2001, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n@@ -71,15 +71,14 @@ public class ZipEntry implements ZipConstants, Cloneable\n   int flags;              /* used by ZipOutputStream */\n   int offset;             /* used by ZipFile and ZipOutputStream */\n \n-\n   /**\n    * Compression method.  This method doesn't compress at all.\n    */\n-  public final static int STORED      =  0;\n+  public static final int STORED = 0;\n   /**\n    * Compression method.  This method uses the Deflater.\n    */\n-  public final static int DEFLATED    =  8;\n+  public static final int DEFLATED = 8;\n \n   /**\n    * Creates a zip entry with the given name."}, {"sha": "c95a34d6b4e8d8c57c52ef652c7fad0453dfe623", "filename": "libjava/java/util/zip/ZipFile.java", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java?ref=c2e999dfeb7680617c0febb42299ebfac01a6bf7", "patch": "@@ -148,7 +148,7 @@ public ZipFile(File file, int mode) throws ZipException, IOException\n    * @exception IOException if a i/o error occured.\n    * @exception EOFException if the file ends prematurely\n    */\n-  private final int readLeShort(DataInput di, byte[] b) throws IOException\n+  private int readLeShort(DataInput di, byte[] b) throws IOException\n   {\n     di.readFully(b, 0, 2);\n     return (b[0] & 0xff) | (b[1] & 0xff) << 8;\n@@ -165,14 +165,13 @@ private final int readLeShort(DataInput di, byte[] b) throws IOException\n    * @exception IOException if a i/o error occured.\n    * @exception EOFException if the file ends prematurely\n    */\n-  private final int readLeInt(DataInput di, byte[] b) throws IOException\n+  private int readLeInt(DataInput di, byte[] b) throws IOException\n   {\n     di.readFully(b, 0, 4);\n     return ((b[0] & 0xff) | (b[1] & 0xff) << 8)\n \t    | ((b[2] & 0xff) | (b[3] & 0xff) << 8) << 16;\n   }\n \n-  \n   /**\n    * Read an unsigned short in little endian byte order from the given\n    * byte buffer at the given offset.\n@@ -181,7 +180,7 @@ private final int readLeInt(DataInput di, byte[] b) throws IOException\n    * @param off the offset to read from.\n    * @return The value read.\n    */\n-  private final int readLeShort(byte[] b, int off)\n+  private int readLeShort(byte[] b, int off)\n   {\n     return (b[off] & 0xff) | (b[off+1] & 0xff) << 8;\n   }\n@@ -194,7 +193,7 @@ private final int readLeShort(byte[] b, int off)\n    * @param off the offset to read from.\n    * @return The value read.\n    */\n-  private final int readLeInt(byte[] b, int off)\n+  private int readLeInt(byte[] b, int off)\n   {\n     return ((b[off] & 0xff) | (b[off+1] & 0xff) << 8)\n \t    | ((b[off+2] & 0xff) | (b[off+3] & 0xff) << 8) << 16;"}, {"sha": "3cc67516e2a91a6de72bb6bdbac40b32b9856e2c", "filename": "libjava/java/util/zip/ZipInputStream.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java?ref=c2e999dfeb7680617c0febb42299ebfac01a6bf7", "patch": "@@ -106,7 +106,7 @@ private void readFully(byte[] out) throws IOException\n       }\n   }\n   \n-  private final int readLeByte() throws IOException\n+  private int readLeByte() throws IOException\n   {\n     if (avail <= 0)\n       {\n@@ -120,15 +120,15 @@ private final int readLeByte() throws IOException\n   /**\n    * Read an unsigned short in little endian byte order.\n    */\n-  private final int readLeShort() throws IOException \n+  private int readLeShort() throws IOException \n   {\n     return readLeByte() | (readLeByte() << 8);\n   }\n \n   /**\n    * Read an int in little endian byte order.\n    */\n-  private final int readLeInt() throws IOException \n+  private int readLeInt() throws IOException \n   {\n     return readLeShort() | (readLeShort() << 16);\n   }"}, {"sha": "ab1d0ce56a23ca7a72a07227d859967a6099bdcf", "filename": "libjava/java/util/zip/ZipOutputStream.java", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e999dfeb7680617c0febb42299ebfac01a6bf7/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java?ref=c2e999dfeb7680617c0febb42299ebfac01a6bf7", "patch": "@@ -1,5 +1,5 @@\n-/* java.util.zip.ZipOutputStream\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+/* ZipOutputStream.java --\n+   Copyright (C) 2001, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -71,17 +71,18 @@ public class ZipOutputStream extends DeflaterOutputStream implements ZipConstant\n   /**\n    * Our Zip version is hard coded to 1.0 resp. 2.0\n    */\n-  private final static int ZIP_STORED_VERSION   = 10;\n-  private final static int ZIP_DEFLATED_VERSION = 20;\n+  private static final int ZIP_STORED_VERSION = 10;\n+  private static final int ZIP_DEFLATED_VERSION = 20;\n \n   /**\n    * Compression method.  This method doesn't compress at all.\n    */\n-  public final static int STORED      =  0;\n+  public static final int STORED = 0;\n+  \n   /**\n    * Compression method.  This method uses the Deflater.\n    */\n-  public final static int DEFLATED    =  8;\n+  public static final int DEFLATED = 8;\n \n   /**\n    * Creates a new Zip output stream, writing a zip archive.\n@@ -136,7 +137,7 @@ public void setLevel(int level)\n   /**\n    * Write an unsigned short in little endian byte order.\n    */\n-  private final void writeLeShort(int value) throws IOException \n+  private void writeLeShort(int value) throws IOException \n   {\n     out.write(value & 0xff);\n     out.write((value >> 8) & 0xff);\n@@ -145,7 +146,7 @@ private final void writeLeShort(int value) throws IOException\n   /**\n    * Write an int in little endian byte order.\n    */\n-  private final void writeLeInt(int value) throws IOException \n+  private void writeLeInt(int value) throws IOException \n   {\n     writeLeShort(value);\n     writeLeShort(value >> 16);"}]}