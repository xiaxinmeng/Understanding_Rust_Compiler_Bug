{"sha": "c9b9ec14ece5acf23bf0817633914e28c43c0678", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzliOWVjMTRlY2U1YWNmMjNiZjA4MTc2MzM5MTRlMjhjNDNjMDY3OA==", "commit": {"author": {"name": "Jerome Guitton", "email": "guitton@adacore.com", "date": "2007-08-14T08:42:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:42:09Z"}, "message": "s-taprop-lynxos.adb, [...] (Continue_Task, [...]): New functions; dummy implementations.\n\n2007-08-14  Jerome Guitton  <guitton@adacore.com>\n\n\t* s-taprop-lynxos.adb, s-taprop-tru64.adb, s-taprop-irix.adb, \n\ts-taprop-hpux-dce.adb, s-taprop-dummy.adb, s-taprop-solaris.adb, \n\ts-taprop-vms.adb, s-taprop-posix.adb (Continue_Task, Stop_All_Tasks):\n\tNew functions; dummy implementations.\n\n\t* s-osinte-vxworks.ads (Task_Stop, Task_Cont, Int_Lock, Int_Unlock): New\n\tfunctions, used to implement the multi-tasks mode routines on VxWorks.\n\n\t* s-osinte-vxworks.adb (Task_Cont, Task_Stop): New functions, thin\n\tbinding to the VxWorks routines which have changed between VxWorks 5\n\tand 6.\n\t(Int_Lock, Int_Unlock): New function, thin binding to kernel routines\n\twhich are not callable from a RTP.\n\n\t* s-taprop-vxworks.adb (Stop_All_Tasks, Continue_Task): New functions,\n\timplemented for the multi-tasks mode on VxWorks 5 and 6.\n\n\t* s-taprop.ads (Stop_All_Tasks, Continue_Task): New functions.\n\n\t* s-tasdeb.ads, s-tasdeb.adb (Continue_All_Tasks, Stop_All_Tasks): New\n\tfunctions.\n\nFrom-SVN: r127431", "tree": {"sha": "480e56c181a323ef84183f901c56c0bb92ecf9df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/480e56c181a323ef84183f901c56c0bb92ecf9df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9b9ec14ece5acf23bf0817633914e28c43c0678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b9ec14ece5acf23bf0817633914e28c43c0678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b9ec14ece5acf23bf0817633914e28c43c0678", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b9ec14ece5acf23bf0817633914e28c43c0678/comments", "author": {"login": "JeromeGuittonAdaCore", "id": 61921972, "node_id": "MDQ6VXNlcjYxOTIxOTcy", "avatar_url": "https://avatars.githubusercontent.com/u/61921972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeromeGuittonAdaCore", "html_url": "https://github.com/JeromeGuittonAdaCore", "followers_url": "https://api.github.com/users/JeromeGuittonAdaCore/followers", "following_url": "https://api.github.com/users/JeromeGuittonAdaCore/following{/other_user}", "gists_url": "https://api.github.com/users/JeromeGuittonAdaCore/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeromeGuittonAdaCore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeromeGuittonAdaCore/subscriptions", "organizations_url": "https://api.github.com/users/JeromeGuittonAdaCore/orgs", "repos_url": "https://api.github.com/users/JeromeGuittonAdaCore/repos", "events_url": "https://api.github.com/users/JeromeGuittonAdaCore/events{/privacy}", "received_events_url": "https://api.github.com/users/JeromeGuittonAdaCore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd28782c2f0a7ed7c3ccb2381d1f688e1ffdd8f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd28782c2f0a7ed7c3ccb2381d1f688e1ffdd8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd28782c2f0a7ed7c3ccb2381d1f688e1ffdd8f6"}], "stats": {"total": 363, "additions": 339, "deletions": 24}, "files": [{"sha": "417ab5d415a3f09b17ee45ccbb0c533cc8ccc220", "filename": "gcc/ada/s-osinte-vxworks.adb", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-osinte-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-osinte-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   B o d y                                --\n --                                                                          --\n---         Copyright (C) 1997-2006, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1997-2007, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,12 +33,12 @@\n \n --  This is the VxWorks version\n \n---  This package encapsulates all direct interfaces to OS services\n---  that are needed by children of System.\n+--  This package encapsulates all direct interfaces to OS services that are\n+--  needed by children of System.\n \n pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n+--  Turn off polling, we do not want ATC polling to take place during tasking\n+--  operations. It causes infinite loops and other problems.\n \n package body System.OS_Interface is\n \n@@ -59,6 +59,28 @@ package body System.OS_Interface is\n       return taskIdSelf;\n    end getpid;\n \n+   --------------\n+   -- Int_Lock --\n+   --------------\n+\n+   function Int_Lock return int is\n+      function intLock return int;\n+      pragma Import (C, intLock, \"intLock\");\n+   begin\n+      return intLock;\n+   end Int_Lock;\n+\n+   ----------------\n+   -- Int_Unlock --\n+   ----------------\n+\n+   function Int_Unlock return int is\n+      function intUnlock return int;\n+      pragma Import (C, intUnlock, \"intUnlock\");\n+   begin\n+      return intUnlock;\n+   end Int_Unlock;\n+\n    ----------\n    -- kill --\n    ----------\n@@ -107,6 +129,28 @@ package body System.OS_Interface is\n       end if;\n    end sigwait;\n \n+   ---------------\n+   -- Task_Cont --\n+   ---------------\n+\n+   function Task_Cont (tid : t_id) return int is\n+      function taskResume (tid : t_id) return int;\n+      pragma Import (C, taskResume, \"taskResume\");\n+   begin\n+      return taskResume (tid);\n+   end Task_Cont;\n+\n+   ---------------\n+   -- Task_Stop --\n+   ---------------\n+\n+   function Task_Stop (tid : t_id) return int is\n+      function taskSuspend (tid : t_id) return int;\n+      pragma Import (C, taskSuspend, \"taskSuspend\");\n+   begin\n+      return taskSuspend (tid);\n+   end Task_Stop;\n+\n    -----------------\n    -- To_Duration --\n    -----------------"}, {"sha": "b1a6d1d139abe262434b9d5858e81405f1c68a69", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -7,7 +7,7 @@\n --                                   S p e c                                --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---             Copyright (C) 1995-2006, Free Software Foundation, Inc.      --\n+--          Copyright (C) 1995-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -91,12 +91,14 @@ package System.OS_Interface is\n    -- Signal processing definitions --\n    -----------------------------------\n \n-   --  The how in sigprocmask().\n+   --  The how in sigprocmask()\n+\n    SIG_BLOCK   : constant := 1;\n    SIG_UNBLOCK : constant := 2;\n    SIG_SETMASK : constant := 3;\n \n-   --  The sa_flags in struct sigaction.\n+   --  The sa_flags in struct sigaction\n+\n    SA_SIGINFO   : constant := 16#0002#;\n    SA_ONSTACK   : constant := 16#0004#;\n \n@@ -157,6 +159,30 @@ package System.OS_Interface is\n    function getpid return t_id;\n    pragma Inline (getpid);\n \n+   function Task_Stop (tid : t_id) return int;\n+   pragma Inline (Task_Stop);\n+   --  If we are in the kernel space, stop the task whose t_id is\n+   --  given in parameter in such a way that it can be examined by the\n+   --  debugger. This typically maps to taskSuspend on VxWorks 5 and\n+   --  to taskStop on VxWorks 6.\n+\n+   function Task_Cont (tid : t_id) return int;\n+   pragma Inline (Task_Cont);\n+   --  If we are in the kernel space, continue the task whose t_id is\n+   --  given in parameter if it has been stopped previously to be examined\n+   --  by the debugger (e.g. by taskStop). It typically maps to taskResume\n+   --  on VxWorks 5 and to taskCont on VxWorks 6.\n+\n+   function Int_Lock return int;\n+   pragma Inline (Int_Lock);\n+   --  If we are in the kernel space, lock interrupts. It typically maps to\n+   --  intLock.\n+\n+   function Int_Unlock return int;\n+   pragma Inline (Int_Unlock);\n+   --  If we are in the kernel space, unlock interrupts. It typically maps to\n+   --  intUnlock.\n+\n    ----------\n    -- Time --\n    ----------"}, {"sha": "88d97680ba3e394629990de3e97f8fa5c04b0df7", "filename": "gcc/ada/s-taprop-dummy.adb", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-dummy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-dummy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-dummy.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2007, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -78,6 +78,15 @@ package body System.Task_Primitives.Operations is\n       return True;\n    end Check_No_Locks;\n \n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean is\n+   begin\n+      return False;\n+   end Continue_Task;\n+\n    -------------------\n    -- Current_State --\n    -------------------\n@@ -383,6 +392,15 @@ package body System.Task_Primitives.Operations is\n       return False;\n    end Suspend_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      null;\n+   end Stop_All_Tasks;\n+\n    ------------------------\n    -- Suspend_Until_True --\n    ------------------------"}, {"sha": "9b5d449f525f2a4ee6082c938c3e7ad6eb987340", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -1185,6 +1185,25 @@ package body System.Task_Primitives.Operations is\n       return False;\n    end Resume_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      null;\n+   end Stop_All_Tasks;\n+\n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean is\n+      pragma Unreferenced (T);\n+   begin\n+      return False;\n+   end Continue_Task;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "aec5d802548516fd6d14509221fde7a4932be0aa", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -1265,6 +1265,25 @@ package body System.Task_Primitives.Operations is\n       return False;\n    end Resume_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      null;\n+   end Stop_All_Tasks;\n+\n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean is\n+      pragma Unreferenced (T);\n+   begin\n+      return False;\n+   end Continue_Task;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "d6abf8abfed24c61b08944d5c88b67c26788bbe5", "filename": "gcc/ada/s-taprop-lynxos.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-lynxos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-lynxos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-lynxos.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -1333,6 +1333,25 @@ package body System.Task_Primitives.Operations is\n       return False;\n    end Resume_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      null;\n+   end Stop_All_Tasks;\n+\n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean is\n+      pragma Unreferenced (T);\n+   begin\n+      return False;\n+   end Continue_Task;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "baae9408750c1c71c8dc88d485e255ed430f0e97", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -1348,6 +1348,25 @@ package body System.Task_Primitives.Operations is\n       return False;\n    end Resume_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      null;\n+   end Stop_All_Tasks;\n+\n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean is\n+      pragma Unreferenced (T);\n+   begin\n+      return False;\n+   end Continue_Task;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "823d9f48a8d0d6b0bd76a19a4b5e2b510efd99aa", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -1948,4 +1948,23 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Resume_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      null;\n+   end Stop_All_Tasks;\n+\n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean is\n+      pragma Unreferenced (T);\n+   begin\n+      return False;\n+   end Continue_Task;\n+\n end System.Task_Primitives.Operations;"}, {"sha": "75d54eb8bdfe750b304ea2db8a9e66346f2ec998", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -1280,6 +1280,25 @@ package body System.Task_Primitives.Operations is\n       return False;\n    end Resume_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      null;\n+   end Stop_All_Tasks;\n+\n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean is\n+      pragma Unreferenced (T);\n+   begin\n+      return False;\n+   end Continue_Task;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "9652ce6bf3f67b3cab532dd41840617e575c747a", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -1209,6 +1209,25 @@ package body System.Task_Primitives.Operations is\n       return False;\n    end Resume_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      null;\n+   end Stop_All_Tasks;\n+\n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean is\n+      pragma Unreferenced (T);\n+   begin\n+      return False;\n+   end Continue_Task;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "7ba1ba5d9c14608d7349ffb7e50cf2567c6c8301", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -1282,6 +1282,49 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Resume_Task;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks\n+   is\n+      Thread_Self : constant Thread_Id := taskIdSelf;\n+      C           : Task_Id;\n+\n+      Dummy : int;\n+      pragma Unreferenced (Dummy);\n+\n+   begin\n+      Dummy := Int_Lock;\n+\n+      C := All_Tasks_List;\n+      while C /= null loop\n+         if C.Common.LL.Thread /= 0\n+           and then C.Common.LL.Thread /= Thread_Self\n+         then\n+            Dummy := Task_Stop (C.Common.LL.Thread);\n+         end if;\n+\n+         C := C.Common.All_Tasks_Link;\n+      end loop;\n+\n+      Dummy := Int_Unlock;\n+   end Stop_All_Tasks;\n+\n+   -------------------\n+   -- Continue_Task --\n+   -------------------\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean\n+   is\n+   begin\n+      if T.Common.LL.Thread /= 0 then\n+         return Task_Cont (T.Common.LL.Thread) = 0;\n+      else\n+         return True;\n+      end if;\n+   end Continue_Task;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "d7dc0f702472bbc40e369a5d92cbcd48d7e77c93", "filename": "gcc/ada/s-taprop.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -533,4 +533,15 @@ package System.Task_Primitives.Operations is\n    --  Such functionality is needed by gdb on some targets (e.g VxWorks)\n    --  Return True is the operation is successful\n \n+   procedure Stop_All_Tasks;\n+   --  Stop all tasks when the underlying thread library provides such\n+   --  functionality. Such functionality is needed by gdb on some targets (e.g\n+   --  VxWorks) This function can be run from an interrupt handler. Return True\n+   --  is the operation is successful\n+\n+   function Continue_Task (T : ST.Task_Id) return Boolean;\n+   --  Continue a specific task when the underlying thread library provides\n+   --  such functionality. Such functionality is needed by gdb on some targets\n+   --  (e.g VxWorks) Return True is the operation is successful\n+\n end System.Task_Primitives.Operations;"}, {"sha": "0dc102737fe3e060858203ce39d3a96f40303aff", "filename": "gcc/ada/s-tasdeb.adb", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-tasdeb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-tasdeb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb.adb?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -61,10 +61,32 @@ package body System.Tasking.Debug is\n    procedure Write (Fd : Integer; S : String; Count : Integer);\n \n    procedure Put (S : String);\n-   --  Display S on standard output.\n+   --  Display S on standard output\n \n    procedure Put_Line (S : String := \"\");\n-   --  Display S on standard output with an additional line terminator.\n+   --  Display S on standard output with an additional line terminator\n+\n+   ------------------------\n+   -- Continue_All_Tasks --\n+   ------------------------\n+\n+   procedure Continue_All_Tasks is\n+      C : Task_Id;\n+\n+      Dummy : Boolean;\n+      pragma Unreferenced (Dummy);\n+\n+   begin\n+      STPO.Lock_RTS;\n+\n+      C := All_Tasks_List;\n+      while C /= null loop\n+         Dummy := STPO.Continue_Task (C);\n+         C := C.Common.All_Tasks_Link;\n+      end loop;\n+\n+      STPO.Unlock_RTS;\n+   end Continue_All_Tasks;\n \n    --------------------\n    -- Get_User_State --\n@@ -225,6 +247,15 @@ package body System.Tasking.Debug is\n       STPO.Self.User_State := Value;\n    end Set_User_State;\n \n+   --------------------\n+   -- Stop_All_Tasks --\n+   --------------------\n+\n+   procedure Stop_All_Tasks is\n+   begin\n+      STPO.Stop_All_Tasks;\n+   end Stop_All_Tasks;\n+\n    -----------------------\n    -- Suspend_All_Tasks --\n    -----------------------"}, {"sha": "6f1673869354b8015b942c958518f034adfe94f9", "filename": "gcc/ada/s-tasdeb.ads", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-tasdeb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b9ec14ece5acf23bf0817633914e28c43c0678/gcc%2Fada%2Fs-tasdeb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb.ads?ref=c9b9ec14ece5acf23bf0817633914e28c43c0678", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1997-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -53,12 +53,12 @@ package System.Tasking.Debug is\n    --  the standard error file.\n \n    procedure Print_Task_Info (T : Task_Id);\n-   --  Similar to Print_Current_Task, for a given task.\n+   --  Similar to Print_Current_Task, for a given task\n \n    procedure Set_User_State (Value : Long_Integer);\n-   --  Set user state value in the current task.\n-   --  This state will be displayed when calling List_Tasks or\n-   --  Print_Current_Task. It is useful for setting task specific state.\n+   --  Set user state value in the current task. This state will be displayed\n+   --  when calling List_Tasks or Print_Current_Task. It is useful for setting\n+   --  task specific state.\n \n    function Get_User_State return Long_Integer;\n    --  Return the user state for the current task.\n@@ -68,8 +68,8 @@ package System.Tasking.Debug is\n    -------------------------\n \n    Known_Tasks : array (0 .. 999) of Task_Id := (others => null);\n-   --  Global array of tasks read by gdb, and updated by\n-   --  Create_Task and Finalize_TCB\n+   --  Global array of tasks read by gdb, and updated by Create_Task and\n+   --  Finalize_TCB\n \n    ----------------------------------\n    -- VxWorks specific GDB support --\n@@ -79,11 +79,11 @@ package System.Tasking.Debug is\n    --  manner, only VxWorks currently uses them.\n \n    procedure Task_Creation_Hook (Thread : OS_Interface.Thread_Id);\n-   --  This procedure is used to notify GDB of task's creation.\n-   --  It must be called by the task's creator.\n+   --  This procedure is used to notify GDB of task's creation. It must be\n+   --  called by the task's creator.\n \n    procedure Task_Termination_Hook;\n-   --  This procedure is used to notify GDB of task's termination.\n+   --  This procedure is used to notify GDB of task's termination\n \n    procedure Suspend_All_Tasks (Thread_Self : OS_Interface.Thread_Id);\n    --  Suspend all the tasks except the one whose associated thread is\n@@ -95,6 +95,16 @@ package System.Tasking.Debug is\n    --  Thread_Self by traversing All_Tasks_Lists and calling\n    --  System.Task_Primitives.Operations.Continue_Task.\n \n+   procedure Stop_All_Tasks;\n+   --  Stop all the tasks by traversing All_Tasks_Lists and calling\n+   --  System.Task_Primitives.Operations.Stop_Task. This function\n+   --  can be used in a interrupt handler.\n+\n+   procedure Continue_All_Tasks;\n+   --  Continue all the tasks by traversing All_Tasks_Lists and calling\n+   --  System.Task_Primitives.Operations.Continue_Task. This function\n+   --  can be used in a interrupt handler.\n+\n    -------------------------------\n    -- Run-time tracing routines --\n    -------------------------------\n@@ -111,8 +121,7 @@ package System.Tasking.Debug is\n    procedure Set_Trace\n      (Flag  : Character;\n       Value : Boolean := True);\n-   --  Enable or disable tracing for Flag.\n-   --  By default, flags in the range 'A' .. 'Z' are disabled, others are\n-   --  enabled.\n+   --  Enable or disable tracing for Flag. By default, flags in the range\n+   --  'A' .. 'Z' are disabled, others are enabled.\n \n end System.Tasking.Debug;"}]}