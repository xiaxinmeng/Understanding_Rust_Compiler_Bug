{"sha": "675ff4c7643263e605889ff424c2c9cc595b06ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc1ZmY0Yzc2NDMyNjNlNjA1ODg5ZmY0MjRjMmM5Y2M1OTViMDZhYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-17T10:24:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-17T10:24:59Z"}, "message": "sh.c (gen_datalabel_ref): Don't add SH_DATALABEL_ENCODING.\n\n        * config/sh/sh.c (gen_datalabel_ref): Don't add SH_DATALABEL_ENCODING.\n        (tls_symbolic_operand): Use SYMBOL_REF_TLS_MODEL.\n        (legitimize_pic_address): Use SYMBOL_REF_LOCAL_P.\n        (sh_encode_section_info): Remove.\n        (sh_strip_name_encoding): Remove.\n        * config/sh/sh.h (SH_DATALABEL_ENCODING): Remove.\n        (DATALABEL_SYMNAME_P, STRIP_DATALABEL_ENCODING): Remove.\n        (SH_TLS_ENCODING, TLS_SYMNAME_P, STRIP_TLS_ENCODING): Remove.\n        (ASM_OUTPUT_LABELREF): Remove.\n        (ASM_OUTPUT_SYMBOL_REF): Use SYMBOL_REF_FUNCTION_P.\n        * config/sh/sh.md (*): Use SYMBOL_REF_LOCAL_P.\n\nFrom-SVN: r65735", "tree": {"sha": "2488a95bf923daee8de90ff7dae47397b029784a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2488a95bf923daee8de90ff7dae47397b029784a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/675ff4c7643263e605889ff424c2c9cc595b06ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/675ff4c7643263e605889ff424c2c9cc595b06ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/675ff4c7643263e605889ff424c2c9cc595b06ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/675ff4c7643263e605889ff424c2c9cc595b06ac/comments", "author": null, "committer": null, "parents": [{"sha": "114278e7115aac1d32cd465a272f27e80a0e4dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114278e7115aac1d32cd465a272f27e80a0e4dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114278e7115aac1d32cd465a272f27e80a0e4dff"}], "stats": {"total": 219, "additions": 31, "deletions": 188}, "files": [{"sha": "b66de45414b64b1c5ce8a16b15b913ba12dd40f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675ff4c7643263e605889ff424c2c9cc595b06ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675ff4c7643263e605889ff424c2c9cc595b06ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=675ff4c7643263e605889ff424c2c9cc595b06ac", "patch": "@@ -1,3 +1,17 @@\n+2003-04-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/sh/sh.c (gen_datalabel_ref): Don't add SH_DATALABEL_ENCODING.\n+\t(tls_symbolic_operand): Use SYMBOL_REF_TLS_MODEL.\n+\t(legitimize_pic_address): Use SYMBOL_REF_LOCAL_P.\n+\t(sh_encode_section_info): Remove.\n+\t(sh_strip_name_encoding): Remove.\n+\t* config/sh/sh.h (SH_DATALABEL_ENCODING): Remove.\n+\t(DATALABEL_SYMNAME_P, STRIP_DATALABEL_ENCODING): Remove.\n+\t(SH_TLS_ENCODING, TLS_SYMNAME_P, STRIP_TLS_ENCODING): Remove.\n+\t(ASM_OUTPUT_LABELREF): Remove.\n+\t(ASM_OUTPUT_SYMBOL_REF): Use SYMBOL_REF_FUNCTION_P.\n+\t* config/sh/sh.md (*): Use SYMBOL_REF_LOCAL_P.\n+\n 2003-04-17  Richard Henderson  <rth@redhat.com>\n \n \t* config/s390/s390.c (SYMBOL_FLAG_ALIGN1): New."}, {"sha": "6cd8c1129d4eb4c1b2c6b2e55484dfd29a054267", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 127, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675ff4c7643263e605889ff424c2c9cc595b06ac/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675ff4c7643263e605889ff424c2c9cc595b06ac/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=675ff4c7643263e605889ff424c2c9cc595b06ac", "patch": "@@ -209,8 +209,6 @@ static bool sh_function_ok_for_sibcall PARAMS ((tree, tree));\n static bool sh_cannot_modify_jumps_p PARAMS ((void));\n static bool sh_ms_bitfield_layout_p PARAMS ((tree));\n \n-static void sh_encode_section_info PARAMS ((tree, int));\n-static const char *sh_strip_name_encoding PARAMS ((const char *));\n static void sh_init_builtins PARAMS ((void));\n static void sh_media_init_builtins PARAMS ((void));\n static rtx sh_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int));\n@@ -270,11 +268,6 @@ static int sh_address_cost PARAMS ((rtx));\n #undef TARGET_MS_BITFIELD_LAYOUT_P\n #define TARGET_MS_BITFIELD_LAYOUT_P sh_ms_bitfield_layout_p\n \n-#undef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO sh_encode_section_info\n-#undef TARGET_STRIP_NAME_ENCODING\n-#define TARGET_STRIP_NAME_ENCODING sh_strip_name_encoding\n-\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS sh_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n@@ -2479,8 +2472,6 @@ gen_datalabel_ref (sym)\n   if (GET_CODE (sym) != SYMBOL_REF)\n     abort ();\n \n-  XSTR (sym, 0) = concat (SH_DATALABEL_ENCODING, XSTR (sym, 0), NULL);\n-\n   return sym;\n }\n \n@@ -6556,28 +6547,9 @@ tls_symbolic_operand (op, mode)\n      rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  const char *str;\n-\n   if (GET_CODE (op) != SYMBOL_REF)\n     return 0;\n-\n-  str = XSTR (op, 0);\n-  STRIP_DATALABEL_ENCODING(str, str);  \n-  if (! TLS_SYMNAME_P (str))\n-    return 0;\n-\n-  switch (str[1])\n-    {\n-    case 'G':\n-      return TLS_MODEL_GLOBAL_DYNAMIC;\n-    case 'L':\n-      return TLS_MODEL_LOCAL_DYNAMIC;\n-    case 'i':\n-      return TLS_MODEL_INITIAL_EXEC;\n-    case 'l':\n-      return TLS_MODEL_LOCAL_EXEC;\n-    }\n-  return 0;\n+  return SYMBOL_REF_TLS_MODEL (op);\n }\n \n int\n@@ -7360,10 +7332,7 @@ legitimize_pic_address (orig, mode, reg)\n     return orig;\n \n   if (GET_CODE (orig) == LABEL_REF\n-      || (GET_CODE (orig) == SYMBOL_REF\n-\t  && (CONSTANT_POOL_ADDRESS_P (orig)\n-\t      /* SYMBOL_REF_FLAG is set on static symbols.  */\n-\t      || SYMBOL_REF_FLAG (orig))))\n+      || (GET_CODE (orig) == SYMBOL_REF && SYMBOL_REF_LOCAL_P (orig)))\n     {\n       if (reg == 0)\n \treg = gen_reg_rtx (Pmode);\n@@ -7687,100 +7656,6 @@ sh_ms_bitfield_layout_p (record_type)\n {\n   return TARGET_SH5;\n }\n-\n-/* If using PIC, mark a SYMBOL_REF for a non-global symbol so that we\n-   may access it using GOTOFF instead of GOT.  */\n-\n-static void\n-sh_encode_section_info (decl, first)\n-     tree decl;\n-     int first;\n-{\n-  rtx rtl, symbol;\n-\n-  if (DECL_P (decl))\n-    rtl = DECL_RTL (decl);\n-  else\n-    rtl = TREE_CST_RTL (decl);\n-  if (GET_CODE (rtl) != MEM)\n-    return;\n-  symbol = XEXP (rtl, 0);\n-  if (GET_CODE (symbol) != SYMBOL_REF)\n-    return;\n-\n-  if (flag_pic)\n-    SYMBOL_REF_FLAG (symbol) = (*targetm.binds_local_p) (decl);\n-\n-  if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n-    {\n-      const char *symbol_str, *orig_str;\n-      bool is_local;\n-      enum tls_model kind;\n-      char encoding;\n-      char *newstr;\n-      size_t len, dlen;\n-\n-      orig_str = XSTR (symbol, 0);\n-      is_local = (*targetm.binds_local_p) (decl);\n-\n-      if (! flag_pic)\n-\t{\n-\t  if (is_local)\n-\t    kind = TLS_MODEL_LOCAL_EXEC;\n-\t  else\n-\t    kind = TLS_MODEL_INITIAL_EXEC;\n-\t}\n-      else if (is_local)\n-\tkind = TLS_MODEL_LOCAL_DYNAMIC;\n-      else\n-\tkind = TLS_MODEL_GLOBAL_DYNAMIC;\n-      if (kind < flag_tls_default)\n-\tkind = flag_tls_default;\n-\n-      STRIP_DATALABEL_ENCODING (symbol_str, orig_str);\n-      dlen = symbol_str - orig_str;\n-\n-      encoding = \" GLil\"[kind];\n-      if (TLS_SYMNAME_P (symbol_str))\n-\t{\n-\t  if (encoding == symbol_str[1])\n-\t    return;\n-\t  /* Handle the changes from initial-exec to local-exec and\n-\t     from global-dynamic to local-dynamic.  */\n-\t  if ((encoding == 'l' && symbol_str[1] == 'i')\n-\t      || (encoding == 'L' && symbol_str[1] == 'G'))\n-\t    symbol_str += 2;\n-\t  else\n-\t    abort ();\n-\t}\n-\n-      len = strlen (symbol_str);\n-      newstr = alloca (dlen + len + 3);\n-      if (dlen)\n-\tmemcpy (newstr, orig_str, dlen);\n-      newstr[dlen + 0] = SH_TLS_ENCODING[0];\n-      newstr[dlen + 1] = encoding;\n-      memcpy (newstr + dlen + 2, symbol_str, len + 1);\n-\n-      XSTR (symbol, 0) = ggc_alloc_string (newstr, dlen + len + 2);\n-    }\n-\n-  if (TARGET_SH5 && first && TREE_CODE (decl) != FUNCTION_DECL)\n-    XEXP (rtl, 0) = gen_datalabel_ref (symbol);\n-}\n-\n-/* Undo the effects of the above.  */\n-\n-static const char *\n-sh_strip_name_encoding (str)\n-     const char *str;\n-{\n-  STRIP_DATALABEL_ENCODING (str, str);\n-  STRIP_TLS_ENCODING (str, str);\n-  str += *str == '*';\n-  return str;\n-}\n-\n \f\n /* \n    On the SH1..SH4, the trampoline looks like"}, {"sha": "29688cfd2bbf8fa62bdc4561cd67687088f027da", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675ff4c7643263e605889ff424c2c9cc595b06ac/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675ff4c7643263e605889ff424c2c9cc595b06ac/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=675ff4c7643263e605889ff424c2c9cc595b06ac", "patch": "@@ -2761,21 +2761,6 @@ while (0)\n \f\n /* Position Independent Code.  */\n \n-/* The prefix used to mark SYMBOL_REFs that refer to data symbols.  */\n-#define SH_DATALABEL_ENCODING \"#\"\n-\n-/* Return true if SYM_NAME starts with SH_DATALABEL_ENCODING.  */\n-#define DATALABEL_SYMNAME_P(SYM_NAME) \\\n-  (SH_DATALABEL_ENCODING[1] ? (abort (), 0) : \\\n-   (SYM_NAME)[0] == SH_DATALABEL_ENCODING[0])\n-\n-/* Skip an optional SH_DATALABEL_ENCODING in the beginning of\n-   SYM_NAME.  Then, remove a leading *, like the default definition in\n-   output.h.  */\n-#define STRIP_DATALABEL_ENCODING(VAR, SYM_NAME) \\\n-  (VAR) = (SYM_NAME) + (DATALABEL_SYMNAME_P (SYM_NAME) \\\n-\t\t\t? strlen (SH_DATALABEL_ENCODING) : 0)\n-\n /* We can't directly access anything that contains a symbol,\n    nor can we indirect via the constant pool.  */\n #define LEGITIMATE_PIC_OPERAND_P(X)\t\t\t\t\\\n@@ -2788,20 +2773,6 @@ while (0)\n ((GET_CODE (X) == SYMBOL_REF || GET_CODE (X) == LABEL_REF)\t\\\n   && nonpic_symbol_mentioned_p (X))\n \f\n-/* TLS.  */\n-\n-/* The prefix used to mark SYMBOL_REFs that refer to TLS symbols.  */\n-#define SH_TLS_ENCODING \"@\"\n-\n-/* Return true if SYM_NAME starts with SH_TLS_ENCODING.  */\n-#define TLS_SYMNAME_P(SYM_NAME) \\\n-  ((SYM_NAME)[0] == SH_TLS_ENCODING[0])\n-\n-/* Skip an optional SH_TLS_ENCODING in the beginning of SYM_NAME.  */\n-#define STRIP_TLS_ENCODING(VAR, SYM_NAME) \\\n-  (VAR) = (SYM_NAME) + (TLS_SYMNAME_P (SYM_NAME) \\\n-\t\t\t? strlen (SH_TLS_ENCODING) + 1 : 0)\n-\f\n /* Compute extra cost of moving data between one register class\n    and another.  */\n \n@@ -2958,29 +2929,12 @@ while (0)\n    ? (TARGET_SH5 ? 244 : 23) \\\n    : -1)\n \n-/* This is how to output a reference to a user-level label named NAME.  */\n-#define ASM_OUTPUT_LABELREF(FILE, NAME)\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      const char * lname;\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-      STRIP_DATALABEL_ENCODING (lname, (NAME));\t\t\\\n-      STRIP_TLS_ENCODING (lname, lname);\t\t\\\n-      if (lname[0] == '*')\t\t\t\t\\\n-\tfputs (lname + 1, (FILE));\t\t\t\\\n-      else\t\t\t\t\t\t\\\n-\tasm_fprintf ((FILE), \"%U%s\", lname);\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* This is how to output a reference to a symbol_ref.  On SH5,\n    references to non-code symbols must be preceded by `datalabel'.  */\n #define ASM_OUTPUT_SYMBOL_REF(FILE,SYM)\t\t\t\\\n   do \t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      if (TARGET_SH5\t\t\t\t\t\\\n-\t  && (DATALABEL_SYMNAME_P (XSTR ((SYM), 0))\t\\\n-\t      || CONSTANT_POOL_ADDRESS_P (SYM)))\t\\\n+      if (TARGET_SH5 && !SYMBOL_REF_FUNCTION_P (SYM))\t\\\n \tfputs (\"datalabel \", (FILE));\t\t\t\\\n       assemble_name ((FILE), XSTR ((SYM), 0));\t\t\\\n     }\t\t\t\t\t\t\t\\"}, {"sha": "f440eeca716a1fe28cdeea5408ac1d520962b2d6", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675ff4c7643263e605889ff424c2c9cc595b06ac/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675ff4c7643263e605889ff424c2c9cc595b06ac/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=675ff4c7643263e605889ff424c2c9cc595b06ac", "patch": "@@ -5572,7 +5572,7 @@\n {\n   rtx lab = PATTERN (gen_call_site ());\n \n-  if (SYMBOL_REF_FLAG (operands[0]))\n+  if (SYMBOL_REF_LOCAL_P (operands[0]))\n     emit_insn (gen_sym_label2reg (operands[2], operands[0], lab));\n   else\n     emit_insn (gen_symPLT_label2reg (operands[2], operands[0], lab));\n@@ -5672,7 +5672,7 @@\n {\n   rtx lab = PATTERN (gen_call_site ());\n \n-  if (SYMBOL_REF_FLAG (operands[1]))\n+  if (SYMBOL_REF_LOCAL_P (operands[1]))\n     emit_insn (gen_sym_label2reg (operands[3], operands[1], lab));\n   else\n     emit_insn (gen_symPLT_label2reg (operands[3], operands[1], lab));\n@@ -5744,7 +5744,7 @@\n       operands[0] = XEXP (operands[0], 0);\n       if (flag_pic && GET_CODE (operands[0]) == SYMBOL_REF)\n \t{\n-\t  if (! SYMBOL_REF_FLAG (operands[0]))\n+\t  if (! SYMBOL_REF_LOCAL_P (operands[0]))\n \t    {\n \t      rtx reg = gen_reg_rtx (Pmode);\n \n@@ -5787,7 +5787,7 @@\n \n       if (flag_pic)\n \t{\n-\t  if (GET_CODE (func) == SYMBOL_REF && ! SYMBOL_REF_FLAG (func))\n+\t  if (GET_CODE (func) == SYMBOL_REF && ! SYMBOL_REF_LOCAL_P (func))\n \t    {\n \t      rtx reg = gen_reg_rtx (Pmode);\n \n@@ -5831,7 +5831,7 @@\n     }\n   else if (TARGET_SHCOMPACT && flag_pic\n \t   && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF\n-\t   && ! SYMBOL_REF_FLAG (XEXP (operands[0], 0)))\n+\t   && ! SYMBOL_REF_LOCAL_P (XEXP (operands[0], 0)))\n     {\n       rtx reg = gen_reg_rtx (Pmode);\n \n@@ -5907,7 +5907,7 @@\n \n       if (flag_pic)\n \t{\n-\t  if (GET_CODE (func) == SYMBOL_REF && ! SYMBOL_REF_FLAG (func))\n+\t  if (GET_CODE (func) == SYMBOL_REF && ! SYMBOL_REF_LOCAL_P (func))\n \t    {\n \t      rtx reg = gen_reg_rtx (Pmode);\n \n@@ -5968,7 +5968,7 @@\n       operands[1] = XEXP (operands[1], 0);\n       if (flag_pic && GET_CODE (operands[1]) == SYMBOL_REF)\n \t{\n-\t  if (! SYMBOL_REF_FLAG (operands[1]))\n+\t  if (! SYMBOL_REF_LOCAL_P (operands[1]))\n \t    {\n \t      rtx reg = gen_reg_rtx (Pmode);\n \n@@ -6012,7 +6012,7 @@\n \n       if (flag_pic)\n \t{\n-\t  if (GET_CODE (func) == SYMBOL_REF && ! SYMBOL_REF_FLAG (func))\n+\t  if (GET_CODE (func) == SYMBOL_REF && ! SYMBOL_REF_LOCAL_P (func))\n \t    {\n \t      rtx reg = gen_reg_rtx (Pmode);\n \n@@ -6058,7 +6058,7 @@\n     }\n   else if (TARGET_SHCOMPACT && flag_pic\n \t   && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF\n-\t   && ! SYMBOL_REF_FLAG (XEXP (operands[1], 0)))\n+\t   && ! SYMBOL_REF_LOCAL_P (XEXP (operands[1], 0)))\n     {\n       rtx reg = gen_reg_rtx (Pmode);\n \n@@ -6176,7 +6176,7 @@\n       operands[0] = XEXP (operands[0], 0);\n       if (flag_pic && GET_CODE (operands[0]) == SYMBOL_REF)\n \t{\n-\t  if (! SYMBOL_REF_FLAG (operands[0]))\n+\t  if (! SYMBOL_REF_LOCAL_P (operands[0]))\n \t    {\n \t      rtx reg = gen_reg_rtx (Pmode);\n \n@@ -6222,7 +6222,7 @@\n \n       if (flag_pic)\n \t{\n-\t  if (GET_CODE (func) == SYMBOL_REF && ! SYMBOL_REF_FLAG (func))\n+\t  if (GET_CODE (func) == SYMBOL_REF && ! SYMBOL_REF_LOCAL_P (func))\n \t    {\n \t      rtx reg = gen_reg_rtx (Pmode);\n \n@@ -6277,7 +6277,7 @@\n     }\n   else if (TARGET_SHCOMPACT && flag_pic\n \t   && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF\n-\t   && ! SYMBOL_REF_FLAG (XEXP (operands[0], 0)))\n+\t   && ! SYMBOL_REF_LOCAL_P (XEXP (operands[0], 0)))\n     {\n       rtx reg = gen_reg_rtx (Pmode);\n \n@@ -6290,7 +6290,7 @@\n       /* The PLT needs the PIC register, but the epilogue would have\n \t to restore it, so we can only use PC-relative PIC calls for\n \t static functions.  */\n-      && SYMBOL_REF_FLAG (XEXP (operands[0], 0)))\n+      && SYMBOL_REF_LOCAL_P (XEXP (operands[0], 0)))\n     {\n       emit_call_insn (gen_sibcall_pcrel (XEXP (operands[0], 0), operands[1]));\n       DONE;\n@@ -6372,7 +6372,7 @@\n \n       if (flag_pic)\n \t{\n-\t  if (GET_CODE (func) == SYMBOL_REF && ! SYMBOL_REF_FLAG (func))\n+\t  if (GET_CODE (func) == SYMBOL_REF && ! SYMBOL_REF_LOCAL_P (func))\n \t    {\n \t      rtx reg = gen_reg_rtx (Pmode);\n "}]}