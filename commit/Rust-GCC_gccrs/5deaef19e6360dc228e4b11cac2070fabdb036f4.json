{"sha": "5deaef19e6360dc228e4b11cac2070fabdb036f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlYWVmMTllNjM2MGRjMjI4ZTRiMTFjYWMyMDcwZmFiZGIwMzZmNA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-05-10T22:33:30Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-05-10T22:33:30Z"}, "message": "tree-cfg.c (tree_duplicate_sese_region): Update profile.\n\n\t* tree-cfg.c (tree_duplicate_sese_region): Update profile.\n\t* tree-optimize.c (init_tree_optimization_passes) Swap\n\tpass_ch and pass_profile.\n\t* tree-ssa-loop-ch.c (copy_loop_headers): Do not update profile\n\there.  Remove rewrite_into_loop_closed_ssa call.\n\nFrom-SVN: r99547", "tree": {"sha": "60f4c57bd6dd81006748f1e3212df2fae47e1faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60f4c57bd6dd81006748f1e3212df2fae47e1faf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5deaef19e6360dc228e4b11cac2070fabdb036f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5deaef19e6360dc228e4b11cac2070fabdb036f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5deaef19e6360dc228e4b11cac2070fabdb036f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5deaef19e6360dc228e4b11cac2070fabdb036f4/comments", "author": null, "committer": null, "parents": [{"sha": "e0bba0931d059bafc61987a2aee817ed4d6c1064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bba0931d059bafc61987a2aee817ed4d6c1064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bba0931d059bafc61987a2aee817ed4d6c1064"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "7699a48945a96880547b66ef46dae69c75ebfa39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5deaef19e6360dc228e4b11cac2070fabdb036f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5deaef19e6360dc228e4b11cac2070fabdb036f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5deaef19e6360dc228e4b11cac2070fabdb036f4", "patch": "@@ -1,3 +1,11 @@\n+2005-05-10  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-cfg.c (tree_duplicate_sese_region): Update profile.\n+\t* tree-optimize.c (init_tree_optimization_passes) Swap\n+\tpass_ch and pass_profile.\n+\t* tree-ssa-loop-ch.c (copy_loop_headers): Do not update profile\n+\there.  Remove rewrite_into_loop_closed_ssa call.\n+\n 2005-05-10  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390.c: (s390_const_double_ok_for_constraint_p): New"}, {"sha": "c54305c898b5402de3e3887c9a647b6248197a6c", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5deaef19e6360dc228e4b11cac2070fabdb036f4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5deaef19e6360dc228e4b11cac2070fabdb036f4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=5deaef19e6360dc228e4b11cac2070fabdb036f4", "patch": "@@ -4847,6 +4847,7 @@ tree_duplicate_sese_region (edge entry, edge exit,\n   edge exit_copy;\n   basic_block *doms;\n   edge redirected;\n+  int total_freq, entry_freq;\n \n   if (!can_copy_bbs_p (region, n_region))\n     return false;\n@@ -4893,12 +4894,24 @@ tree_duplicate_sese_region (edge entry, edge exit,\n \n   gcc_assert (!need_ssa_update_p ());\n \n-  /* Record blocks outside the region that are duplicated by something\n+  /* Record blocks outside the region that are dominated by something\n      inside.  */\n   doms = xmalloc (sizeof (basic_block) * n_basic_blocks);\n   n_doms = get_dominated_by_region (CDI_DOMINATORS, region, n_region, doms);\n \n+  total_freq = entry->dest->frequency;\n+  entry_freq = EDGE_FREQUENCY (entry);\n+  /* Fix up corner cases, to avoid division by zero or creation of negative\n+     frequencies.  */\n+  if (total_freq == 0)\n+    total_freq = 1;\n+  else if (entry_freq > total_freq)\n+    entry_freq = total_freq;\n+\n   copy_bbs (region, n_region, region_copy, &exit, 1, &exit_copy, loop);\n+  scale_bbs_frequencies_int (region, n_region, total_freq - entry_freq,\n+\t\t\t     total_freq);\n+  scale_bbs_frequencies_int (region_copy, n_region, entry_freq, total_freq);\n \n   if (copying_header)\n     {"}, {"sha": "6b1d35554f4fa8686636fcf3c4b55eb4e45f1ee7", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5deaef19e6360dc228e4b11cac2070fabdb036f4/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5deaef19e6360dc228e4b11cac2070fabdb036f4/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=5deaef19e6360dc228e4b11cac2070fabdb036f4", "patch": "@@ -374,8 +374,8 @@ init_tree_optimization_passes (void)\n   NEXT_PASS (pass_phiopt);\n   NEXT_PASS (pass_may_alias);\n   NEXT_PASS (pass_tail_recursion);\n-  NEXT_PASS (pass_ch);\n   NEXT_PASS (pass_profile);\n+  NEXT_PASS (pass_ch);\n   NEXT_PASS (pass_stdarg);\n   NEXT_PASS (pass_sra);\n   /* FIXME: SRA may generate arbitrary gimple code, exposing new"}, {"sha": "378755c9eaa36791a93dc37bfd19a7ce944f2738", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5deaef19e6360dc228e4b11cac2070fabdb036f4/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5deaef19e6360dc228e4b11cac2070fabdb036f4/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=5deaef19e6360dc228e4b11cac2070fabdb036f4", "patch": "@@ -131,12 +131,10 @@ copy_loop_headers (void)\n   basic_block *bbs, *copied_bbs;\n   unsigned n_bbs;\n   unsigned bbs_size;\n-  gcov_type entry_count, body_count, total_count;\n \n   loops = loop_optimizer_init (dump_file);\n   if (!loops)\n     return;\n-  rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n   \n   /* We do not try to keep the information about irreducible regions\n      up-to-date.  */\n@@ -202,32 +200,13 @@ copy_loop_headers (void)\n \texit = single_succ_edge (loop_split_edge_with (exit, NULL));\n \n       entry = loop_preheader_edge (loop);\n-      entry_count = entry->src->count;\n-      body_count = exit->dest->count;\n \n       if (!tree_duplicate_sese_region (entry, exit, bbs, n_bbs, copied_bbs))\n \t{\n \t  fprintf (dump_file, \"Duplication failed.\\n\");\n \t  continue;\n \t}\n \n-      /* Fix profiling info.  Scaling is done in gcov_type arithmetic to\n-\t avoid losing information; this is slow, but is done at most\n-\t once per loop.  We special case 0 to avoid division by 0;\n-         probably other special cases exist.  */\n-      total_count = body_count + entry_count;\n-      if (total_count == 0LL)\n-\t{\n-\t  scale_bbs_frequencies_int (bbs, n_bbs, 0, 1);\n-\t  scale_bbs_frequencies_int (copied_bbs, n_bbs, 0, 1);\n-\t}\n-      else\n-\t{\n-\t  scale_bbs_frequencies_gcov_type (bbs, n_bbs, body_count, total_count);\n-\t  scale_bbs_frequencies_gcov_type (copied_bbs, n_bbs, entry_count, \n-\t\t\t\t           total_count);\n-\t}\n-\n       /* Ensure that the latch and the preheader is simple (we know that they\n \t are not now, since there was the loop exit condition.  */\n       loop_split_edge_with (loop_preheader_edge (loop), NULL);"}]}