{"sha": "047cff816d1457fa3894b7cd2a61752f669704c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3Y2ZmODE2ZDE0NTdmYTM4OTRiN2NkMmE2MTc1MmY2Njk3MDRjNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-08T06:18:41Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-08T06:18:41Z"}, "message": "compiler, runtime: Check make int64 args for overflow.\n\nFrom-SVN: r183994", "tree": {"sha": "0079e628bdcefa4ba284ae32a63173c4c470d869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0079e628bdcefa4ba284ae32a63173c4c470d869"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/047cff816d1457fa3894b7cd2a61752f669704c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047cff816d1457fa3894b7cd2a61752f669704c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047cff816d1457fa3894b7cd2a61752f669704c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047cff816d1457fa3894b7cd2a61752f669704c7/comments", "author": null, "committer": null, "parents": [{"sha": "7f57843fbebc7b50cfad7cc5bd3459a2d1077035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f57843fbebc7b50cfad7cc5bd3459a2d1077035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f57843fbebc7b50cfad7cc5bd3459a2d1077035"}], "stats": {"total": 83, "additions": 77, "deletions": 6}, "files": [{"sha": "395a37547dd8b08f0c3e4ddba703c32d25510e76", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047cff816d1457fa3894b7cd2a61752f669704c7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047cff816d1457fa3894b7cd2a61752f669704c7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=047cff816d1457fa3894b7cd2a61752f669704c7", "patch": "@@ -7744,6 +7744,10 @@ Builtin_call_expression::lower_make()\n       return Expression::make_error(this->location());\n     }\n \n+  bool have_big_args = false;\n+  Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n+  int uintptr_bits = uintptr_type->integer_type()->bits();\n+\n   ++parg;\n   Expression* len_arg;\n   if (parg == args->end())\n@@ -7767,6 +7771,9 @@ Builtin_call_expression::lower_make()\n \t  this->report_error(_(\"bad size for make\"));\n \t  return Expression::make_error(this->location());\n \t}\n+      if (len_arg->type()->integer_type() != NULL\n+\t  && len_arg->type()->integer_type()->bits() > uintptr_bits)\n+\thave_big_args = true;\n       ++parg;\n     }\n \n@@ -7779,6 +7786,9 @@ Builtin_call_expression::lower_make()\n \t  this->report_error(_(\"bad capacity when making slice\"));\n \t  return Expression::make_error(this->location());\n \t}\n+      if (cap_arg->type()->integer_type() != NULL\n+\t  && cap_arg->type()->integer_type()->bits() > uintptr_bits)\n+\thave_big_args = true;\n       ++parg;\n     }\n \n@@ -7801,16 +7811,26 @@ Builtin_call_expression::lower_make()\n   if (is_slice)\n     {\n       if (cap_arg == NULL)\n-\tcall = Runtime::make_call(Runtime::MAKESLICE1, loc, 2, type_arg,\n-\t\t\t\t  len_arg);\n+\tcall = Runtime::make_call((have_big_args\n+\t\t\t\t   ? Runtime::MAKESLICE1BIG\n+\t\t\t\t   : Runtime::MAKESLICE1),\n+\t\t\t\t  loc, 2, type_arg, len_arg);\n       else\n-\tcall = Runtime::make_call(Runtime::MAKESLICE2, loc, 3, type_arg,\n-\t\t\t\t  len_arg, cap_arg);\n+\tcall = Runtime::make_call((have_big_args\n+\t\t\t\t   ? Runtime::MAKESLICE2BIG\n+\t\t\t\t   : Runtime::MAKESLICE2),\n+\t\t\t\t  loc, 3, type_arg, len_arg, cap_arg);\n     }\n   else if (is_map)\n-    call = Runtime::make_call(Runtime::MAKEMAP, loc, 2, type_arg, len_arg);\n+    call = Runtime::make_call((have_big_args\n+\t\t\t       ? Runtime::MAKEMAPBIG\n+\t\t\t       : Runtime::MAKEMAP),\n+\t\t\t      loc, 2, type_arg, len_arg);\n   else if (is_chan)\n-    call = Runtime::make_call(Runtime::MAKECHAN, loc, 2, type_arg, len_arg);\n+    call = Runtime::make_call((have_big_args\n+\t\t\t       ? Runtime::MAKECHANBIG\n+\t\t\t       : Runtime::MAKECHAN),\n+\t\t\t      loc, 2, type_arg, len_arg);\n   else\n     go_unreachable();\n "}, {"sha": "7dda5398cfb3356ba17af862cc680964218254a2", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047cff816d1457fa3894b7cd2a61752f669704c7/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047cff816d1457fa3894b7cd2a61752f669704c7/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=047cff816d1457fa3894b7cd2a61752f669704c7", "patch": "@@ -72,10 +72,16 @@ DEF_GO_RUNTIME(STRING_TO_INT_ARRAY, \"__go_string_to_int_array\",\n DEF_GO_RUNTIME(MAKESLICE1, \"__go_make_slice1\", P2(TYPE, UINTPTR), R1(SLICE))\n DEF_GO_RUNTIME(MAKESLICE2, \"__go_make_slice2\", P3(TYPE, UINTPTR, UINTPTR),\n \t       R1(SLICE))\n+DEF_GO_RUNTIME(MAKESLICE1BIG, \"__go_make_slice1_big\", P2(TYPE, UINT64),\n+\t       R1(SLICE))\n+DEF_GO_RUNTIME(MAKESLICE2BIG, \"__go_make_slice2_big\", P3(TYPE, UINT64, UINT64),\n+\t       R1(SLICE))\n \n \n // Make a map.\n DEF_GO_RUNTIME(MAKEMAP, \"__go_new_map\", P2(MAPDESCRIPTOR, UINTPTR), R1(MAP))\n+DEF_GO_RUNTIME(MAKEMAPBIG, \"__go_new_map_big\", P2(MAPDESCRIPTOR, UINT64),\n+\t       R1(MAP))\n \n // Build a map from a composite literal.\n DEF_GO_RUNTIME(CONSTRUCT_MAP, \"__go_construct_map\",\n@@ -116,6 +122,7 @@ DEF_GO_RUNTIME(MAPITERNEXT, \"runtime.mapiternext\", P1(MAPITER), R0())\n \n // Make a channel.\n DEF_GO_RUNTIME(MAKECHAN, \"__go_new_channel\", P2(TYPE, UINTPTR), R1(CHAN))\n+DEF_GO_RUNTIME(MAKECHANBIG, \"__go_new_channel_big\", P2(TYPE, UINT64), R1(CHAN))\n \n // Get the length of a channel (the number of unread values).\n DEF_GO_RUNTIME(CHAN_LEN, \"__go_chan_len\", P1(CHAN), R1(INT))"}, {"sha": "4fc2d60365958aca9b711097d927aa5b4800dc47", "filename": "libgo/runtime/chan.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047cff816d1457fa3894b7cd2a61752f669704c7/libgo%2Fruntime%2Fchan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047cff816d1457fa3894b7cd2a61752f669704c7/libgo%2Fruntime%2Fchan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchan.c?ref=047cff816d1457fa3894b7cd2a61752f669704c7", "patch": "@@ -130,6 +130,12 @@ __go_new_channel(ChanType *t, uintptr hint)\n \treturn runtime_makechan_c(t, hint);\n }\n \n+Hchan*\n+__go_new_channel_big(ChanType *t, uint64 hint)\n+{\n+\treturn runtime_makechan_c(t, hint);\n+}\n+\n /*\n  * generic single channel send/recv\n  * if the bool pointer is nil,"}, {"sha": "42b412c772b000b2b033d2e537c8ae7ef0645768", "filename": "libgo/runtime/go-make-slice.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047cff816d1457fa3894b7cd2a61752f669704c7/libgo%2Fruntime%2Fgo-make-slice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047cff816d1457fa3894b7cd2a61752f669704c7/libgo%2Fruntime%2Fgo-make-slice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-make-slice.c?ref=047cff816d1457fa3894b7cd2a61752f669704c7", "patch": "@@ -57,3 +57,27 @@ __go_make_slice1 (const struct __go_type_descriptor *td, uintptr_t len)\n {\n   return __go_make_slice2 (td, len, len);\n }\n+\n+struct __go_open_array\n+__go_make_slice2_big (const struct __go_type_descriptor *td, uint64_t len,\n+\t\t      uint64_t cap)\n+{\n+  uintptr_t slen;\n+  uintptr_t scap;\n+\n+  slen = (uintptr_t) len;\n+  if ((uint64_t) slen != len)\n+    runtime_panicstring (\"makeslice: len out of range\");\n+\n+  scap = (uintptr_t) cap;\n+  if ((uint64_t) scap != cap)\n+    runtime_panicstring (\"makeslice: cap out of range\");\n+\n+  return __go_make_slice2 (td, slen, scap);\n+}\n+\n+struct __go_open_array\n+__go_make_slice1_big (const struct __go_type_descriptor *td, uint64_t len)\n+{\n+  return __go_make_slice2_big (td, len, len);\n+}"}, {"sha": "eef71ddf47c4120a049086b3bde1d0e7f53127e2", "filename": "libgo/runtime/go-new-map.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047cff816d1457fa3894b7cd2a61752f669704c7/libgo%2Fruntime%2Fgo-new-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047cff816d1457fa3894b7cd2a61752f669704c7/libgo%2Fruntime%2Fgo-new-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-new-map.c?ref=047cff816d1457fa3894b7cd2a61752f669704c7", "patch": "@@ -125,3 +125,17 @@ __go_new_map (const struct __go_map_descriptor *descriptor, uintptr_t entries)\n   __builtin_memset (ret->__buckets, 0, entries * sizeof (void *));\n   return ret;\n }\n+\n+/* Allocate a new map when the argument to make is a large type.  */\n+\n+struct __go_map *\n+__go_new_map_big (const struct __go_map_descriptor *descriptor,\n+\t\t  uint64_t entries)\n+{\n+  uintptr_t sentries;\n+\n+  sentries = (uintptr_t) entries;\n+  if ((uint64_t) sentries != entries)\n+    runtime_panicstring (\"map size out of range\");\n+  return __go_new_map (descriptor, sentries);\n+}"}]}