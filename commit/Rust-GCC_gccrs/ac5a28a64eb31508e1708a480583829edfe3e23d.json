{"sha": "ac5a28a64eb31508e1708a480583829edfe3e23d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM1YTI4YTY0ZWIzMTUwOGUxNzA4YTQ4MDU4MzgyOWVkZmUzZTIzZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-05-04T00:40:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-05-04T00:40:20Z"}, "message": "fold-const.c (fold_unary): Convert (T1)(X op Y) into ((T1)X op (T1)Y)...\n\n\t* fold-const.c (fold_unary): Convert (T1)(X op Y) into ((T1)X op (T1)Y),\n\tfor pointer type in more cases than before.\n\n\t* gimplify.c (gimplify_expr): Fold (void *)&a + 4.\n\n\t* tree-object-size.c (plus_expr_object_size): When operand size is\n\tunknown, return unknown.\n\nFrom-SVN: r124403", "tree": {"sha": "548d8cee6ec9b8410cd45e6a00facf64a630ea5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/548d8cee6ec9b8410cd45e6a00facf64a630ea5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac5a28a64eb31508e1708a480583829edfe3e23d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5a28a64eb31508e1708a480583829edfe3e23d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5a28a64eb31508e1708a480583829edfe3e23d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5a28a64eb31508e1708a480583829edfe3e23d/comments", "author": null, "committer": null, "parents": [{"sha": "2c40556556009a2300ec1cfe252e4c1d6ea407e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c40556556009a2300ec1cfe252e4c1d6ea407e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c40556556009a2300ec1cfe252e4c1d6ea407e9"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "1add00feeb6fb8cc5c63e284cfef12c93b263cdd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5a28a64eb31508e1708a480583829edfe3e23d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5a28a64eb31508e1708a480583829edfe3e23d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac5a28a64eb31508e1708a480583829edfe3e23d", "patch": "@@ -1,3 +1,13 @@\n+2007-05-03  Jan Hubicka  <jh@suse.cz>\n+\n+\t* fold-const.c (fold_unary): Convert (T1)(X op Y) into ((T1)X op (T1)Y),\n+\tfor pointer type in more cases than before.\n+\n+\t* gimplify.c (gimplify_expr): Fold (void *)&a + 4.\n+\n+\t* tree-object-size.c (plus_expr_object_size): When operand size is\n+\tunknown, return unknown.\n+\n 2007-05-03  Dirk Mueller  <dmueller@suse.de>\n \n \t* doc/invoke.texi (-m386,-m486,-mpentium,-mpentiumpro): Remove."}, {"sha": "ba17d464d05b434fdf96ad455dce53fca41832ab", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5a28a64eb31508e1708a480583829edfe3e23d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5a28a64eb31508e1708a480583829edfe3e23d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ac5a28a64eb31508e1708a480583829edfe3e23d", "patch": "@@ -7814,24 +7814,20 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t    }\n \t}\n \n-      /* Convert (T1)((T2)X op Y) into (T1)X op Y, for pointer types T1 and\n-\t T2 being pointers to types of the same size.  */\n-      if (POINTER_TYPE_P (type)\n+      /* Convert (T1)(X op Y) into ((T1)X op (T1)Y), for pointer type,\n+         when one of the new casts will fold away. Conservatively we assume\n+\t that this happens when X or Y is NOP_EXPR or Y is INTEGER_CST.  */\n+      if (POINTER_TYPE_P (type) && POINTER_TYPE_P (TREE_TYPE (arg0))\n \t  && BINARY_CLASS_P (arg0)\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == NOP_EXPR\n-\t  && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (arg0, 0))))\n+\t  && (TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n+\t      || TREE_CODE (TREE_OPERAND (arg0, 0)) == NOP_EXPR\n+\t      || TREE_CODE (TREE_OPERAND (arg0, 1)) == NOP_EXPR))\n \t{\n \t  tree arg00 = TREE_OPERAND (arg0, 0);\n-\t  tree t0 = type;\n-\t  tree t1 = TREE_TYPE (arg00);\n-\t  tree tt0 = TREE_TYPE (t0);\n-\t  tree tt1 = TREE_TYPE (t1);\n-\t  tree s0 = TYPE_SIZE (tt0);\n-\t  tree s1 = TYPE_SIZE (tt1);\n-\n-\t  if (s0 && s1 && operand_equal_p (s0, s1, OEP_ONLY_CONST))\n-\t    return build2 (TREE_CODE (arg0), t0, fold_convert (t0, arg00),\n-\t\t\t   TREE_OPERAND (arg0, 1));\n+\t  tree arg01 = TREE_OPERAND (arg0, 1);\n+\n+\t  return fold_build2 (TREE_CODE (arg0), type, fold_convert (type, arg00),\n+\t\t\t      fold_convert (type, arg01));\n \t}\n \n       /* Convert (T1)(~(T2)X) into ~(T1)X if T1 and T2 are integral types"}, {"sha": "3efb2b868c8412f86a073593a2811a81be83f89c", "filename": "gcc/gimplify.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5a28a64eb31508e1708a480583829edfe3e23d/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5a28a64eb31508e1708a480583829edfe3e23d/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=ac5a28a64eb31508e1708a480583829edfe3e23d", "patch": "@@ -5881,7 +5881,22 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t     {\n                *expr_p = build_fold_addr_expr_with_type (tmp,\n \t\t\t\t\t\t\t TREE_TYPE (*expr_p));\n-\t\tbreak;\n+\t       break;\n+\t     }\n+\t  /* Convert (void *)&a + 4 into (void *)&a[1].  */\n+\t  if (POINTER_TYPE_P (TREE_TYPE (*expr_p))\n+\t      && TREE_CODE (TREE_OPERAND (*expr_p, 0)) == NOP_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (*expr_p, 1)) == INTEGER_CST\n+\t      && (tmp = maybe_fold_offset_to_reference\n+\t\t\t (TREE_OPERAND (TREE_OPERAND (*expr_p, 0), 0),\n+\t\t\t  TREE_OPERAND (*expr_p, 1),\n+\t\t   \t  TREE_TYPE (TREE_TYPE\n+\t\t\t\t  (TREE_OPERAND (TREE_OPERAND (*expr_p, 0),\n+\t\t\t\t\t\t 0))))))\n+\t     {\n+               tmp = build_fold_addr_expr (tmp);\n+               *expr_p = fold_convert (TREE_TYPE (*expr_p), tmp);\n+\t       break;\n \t     }\n           /* FALLTHRU */\n \tdefault:"}, {"sha": "1eb09cbc50a56f9785da88d36243c48cc3a98509", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac5a28a64eb31508e1708a480583829edfe3e23d/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac5a28a64eb31508e1708a480583829edfe3e23d/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=ac5a28a64eb31508e1708a480583829edfe3e23d", "patch": "@@ -588,7 +588,9 @@ plus_expr_object_size (struct object_size_info *osi, tree var, tree value)\n \t  unsigned HOST_WIDE_INT off = tree_low_cst (op1, 1);\n \n \t  bytes = compute_builtin_object_size (op0, object_size_type);\n-\t  if (off > offset_limit)\n+\t  if (bytes == unknown[object_size_type])\n+\t    ;\n+\t  else if (off > offset_limit)\n \t    bytes = unknown[object_size_type];\n \t  else if (off > bytes)\n \t    bytes = 0;"}]}