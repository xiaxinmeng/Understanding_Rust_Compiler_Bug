{"sha": "ec1c89e60a0e1a3e793f694484fad42a2a7014a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMxYzg5ZTYwYTBlMWEzZTc5M2Y2OTQ0ODRmYWQ0MmEyYTcwMTRhMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-10-10T09:43:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-10-10T09:43:26Z"}, "message": "genrecog.c (add_to_sequence): Move allow_const_int test outside known predicate block...\n\n        * genrecog.c (add_to_sequence): Move allow_const_int test outside\n        known predicate block; default allow_const_int true.\n\nFrom-SVN: r29885", "tree": {"sha": "ecc36f88e3b35874748fedad2e98caa3f5d849dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecc36f88e3b35874748fedad2e98caa3f5d849dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec1c89e60a0e1a3e793f694484fad42a2a7014a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1c89e60a0e1a3e793f694484fad42a2a7014a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec1c89e60a0e1a3e793f694484fad42a2a7014a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec1c89e60a0e1a3e793f694484fad42a2a7014a3/comments", "author": null, "committer": null, "parents": [{"sha": "8015b78d4166d99163d6ae09d950e743005e77de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8015b78d4166d99163d6ae09d950e743005e77de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8015b78d4166d99163d6ae09d950e743005e77de"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "bdb5aeaad0475bc1ad7b9624774280ac0fb7b8c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec1c89e60a0e1a3e793f694484fad42a2a7014a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec1c89e60a0e1a3e793f694484fad42a2a7014a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec1c89e60a0e1a3e793f694484fad42a2a7014a3", "patch": "@@ -1,3 +1,8 @@\n+Sun Oct 10 02:41:41 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* genrecog.c (add_to_sequence): Move allow_const_int test outside\n+\tknown predicate block; default allow_const_int true.\n+\n Sun Oct 10 00:43:08 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* i386.h (CC1_SPEC): Typo -- use cc1_cpu."}, {"sha": "371e5b259cb2c57f278394de5e7dc859c78b28f1", "filename": "gcc/genrecog.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec1c89e60a0e1a3e793f694484fad42a2a7014a3/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec1c89e60a0e1a3e793f694484fad42a2a7014a3/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=ec1c89e60a0e1a3e793f694484fad42a2a7014a3", "patch": "@@ -402,6 +402,7 @@ add_to_sequence (pattern, last, position, insn_type, top)\n       {\n \tconst char *pred_name;\n \tRTX_CODE was_code = code;\n+\tint allows_const_int = 1;\n \n \tif (code == MATCH_SCRATCH)\n \t  {\n@@ -462,10 +463,6 @@ add_to_sequence (pattern, last, position, insn_type, top)\n \t\t      allows_const_int = 1;\n \t\t      break;\n \t\t    }\n-\n-\t\t/* Can't enforce a mode if we allow const_int.  */\n-\t\tif (allows_const_int)\n-\t\t  mode = VOIDmode;\n \t      }\n \t    else\n \t      {\n@@ -478,12 +475,10 @@ add_to_sequence (pattern, last, position, insn_type, top)\n #endif\n \t      }\n \t  }\n-\telse\n-\t  {\n-\t    /* Wildcard match.  Can't enforce a mode because we allow\n-\t       anything -- const_int included.  */\n-\t    mode = VOIDmode;\n-\t  }\n+\n+\t/* Can't enforce a mode if we allow const_int.  */\n+\tif (allows_const_int)\n+\t  mode = VOIDmode;\n \n \t/* Accept the operand, ie. record it in `operands'.  */\n \ttest = new_decision_test (DT_accept_op, &place);\n@@ -2417,3 +2412,14 @@ debug_decision (d)\n {\n   debug_decision_0 (d, 0, 1000000);\n }\n+\n+void\n+debug_decision_list (d)\n+     struct decision *d;\n+{\n+  while (d)\n+    {\n+      debug_decision_0 (d, 0, 0);\n+      d = d->next;\n+    }\n+}"}]}