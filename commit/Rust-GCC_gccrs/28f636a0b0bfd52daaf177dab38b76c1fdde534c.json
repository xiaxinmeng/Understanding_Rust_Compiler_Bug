{"sha": "28f636a0b0bfd52daaf177dab38b76c1fdde534c", "node_id": "C_kwDOANBUbNoAKDI4ZjYzNmEwYjBiZmQ1MmRhYWYxNzdkYWIzOGI3NmMxZmRkZTUzNGM", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-11-15T09:50:46Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-11-15T09:50:46Z"}, "message": "aarch64: Add support for widening LDAPR instructions\n\ngcc/ChangeLog:\n\n\t* config/aarch64/atomics.md\n\t(*aarch64_atomic_load<ALLX:mode>_rcpc_zext): New pattern.\n\t(*aarch64_atomic_load<ALLX:mode>_rcpc_sext): New pattern.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.target/aarch64/ldapr-ext.c: New test.", "tree": {"sha": "4d17030086a1077eaae86cd57eb014dba449054d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d17030086a1077eaae86cd57eb014dba449054d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28f636a0b0bfd52daaf177dab38b76c1fdde534c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f636a0b0bfd52daaf177dab38b76c1fdde534c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f636a0b0bfd52daaf177dab38b76c1fdde534c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f636a0b0bfd52daaf177dab38b76c1fdde534c/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0431e8ae5bdb854bda5f9005e41c8c4d03f6d74e"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "9670bef7d8cb2b32c5146536d806a7e8bdffb2e3", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f636a0b0bfd52daaf177dab38b76c1fdde534c/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f636a0b0bfd52daaf177dab38b76c1fdde534c/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=28f636a0b0bfd52daaf177dab38b76c1fdde534c", "patch": "@@ -704,6 +704,28 @@\n   }\n )\n \n+(define_insn \"*aarch64_atomic_load<ALLX:mode>_rcpc_zext\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+    (zero_extend:GPI\n+      (unspec_volatile:ALLX\n+        [(match_operand:ALLX 1 \"aarch64_sync_memory_operand\" \"Q\")\n+         (match_operand:SI 2 \"const_int_operand\")]\t\t\t;; model\n+       UNSPECV_LDAP)))]\n+  \"TARGET_RCPC\"\n+  \"ldapr<ALLX:atomic_sfx>\\t%<GPI:w>0, %1\"\n+)\n+\n+(define_insn \"*aarch64_atomic_load<ALLX:mode>_rcpc_sext\"\n+  [(set (match_operand:GPI  0 \"register_operand\" \"=r\")\n+    (sign_extend:GPI\n+      (unspec_volatile:ALLX\n+        [(match_operand:ALLX 1 \"aarch64_sync_memory_operand\" \"Q\")\n+         (match_operand:SI 2 \"const_int_operand\")]\t\t\t;; model\n+       UNSPECV_LDAP)))]\n+  \"TARGET_RCPC\"\n+  \"ldaprs<ALLX:atomic_sfx>\\t%<GPI:w>0, %1\"\n+)\n+\n (define_insn \"atomic_store<mode>\"\n   [(set (match_operand:ALLI 0 \"aarch64_rcpc_memory_operand\" \"=Q,Ust\")\n     (unspec_volatile:ALLI"}, {"sha": "aed27e06235b1d266decf11745dacf94cc59e76d", "filename": "gcc/testsuite/gcc.target/aarch64/ldapr-ext.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f636a0b0bfd52daaf177dab38b76c1fdde534c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-ext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f636a0b0bfd52daaf177dab38b76c1fdde534c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-ext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fldapr-ext.c?ref=28f636a0b0bfd52daaf177dab38b76c1fdde534c", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c99\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n+#include <stdatomic.h>\n+\n+#pragma GCC target \"+rcpc\"\n+\n+atomic_ullong u64;\n+atomic_llong s64;\n+atomic_uint u32;\n+atomic_int s32;\n+atomic_ushort u16;\n+atomic_short s16;\n+atomic_uchar u8;\n+atomic_schar s8;\n+\n+#define TEST(name, ldsize, rettype)\t\t\t\t\\\n+rettype\t\t\t\t\t\t\t\t\\\n+test_##name (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return atomic_load_explicit (&ldsize, memory_order_acquire);\t\\\n+}\n+\n+/*\n+**test_u8_u64:\n+**...\n+**\tldaprb\tx0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(u8_u64, u8, unsigned long long)\n+\n+/*\n+**test_s8_s64:\n+**...\n+**\tldaprsb\tx0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(s8_s64, s8, long long)\n+\n+/*\n+**test_u16_u64:\n+**...\n+**\tldaprh\tx0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(u16_u64, u16, unsigned long long)\n+\n+/*\n+**test_s16_s64:\n+**...\n+**\tldaprsh\tx0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(s16_s64, s16, long long)\n+\n+/*\n+**test_u8_u32:\n+**...\n+**\tldaprb\tw0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(u8_u32, u8, unsigned)\n+\n+/*\n+**test_s8_s32:\n+**...\n+**\tldaprsb\tw0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(s8_s32, s8, int)\n+\n+/*\n+**test_u16_u32:\n+**...\n+**\tldaprh\tw0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(u16_u32, u16, unsigned)\n+\n+/*\n+**test_s16_s32:\n+**...\n+**\tldaprsh\tw0, \\[x[0-9]+\\]\n+**\tret\n+*/\n+\n+TEST(s16_s32, s16, int)"}]}