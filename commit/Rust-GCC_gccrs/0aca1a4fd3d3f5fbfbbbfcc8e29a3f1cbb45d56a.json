{"sha": "0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFjYTFhNGZkM2QzZjVmYmZiYmJmY2M4ZTI5YTNmMWNiYjQ1ZDU2YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-31T10:24:40Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-31T10:24:40Z"}, "message": "c-parse.in (structsp): Pedwarn when \"enum foo\" refers to an incomplete type.\n\n\t* c-parse.in (structsp): Pedwarn when \"enum foo\" refers to an\n\tincomplete type.\n\t(typename): Call pending_xref_error after parsing typed_typespecs.\n\t* c-decl.c (lookup_tag): Give error immediately rather than\n\tleaving it pending if the tag of the wrong type is in the same\n\tbinding level.\n\t(xref_tag): Don't pedwarn for forward declarations of enum types\n\there.\n\t* gcc.texi (Actual Bugs): Remove entry for misuse of struct, union\n\tand enum tags.\n\ntestsuite:\n\t* gcc.dg/c99-tag-1.c: New test.\n\nFrom-SVN: r39372", "tree": {"sha": "34733a2dad346aaafe559de1ce988837b74efabf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34733a2dad346aaafe559de1ce988837b74efabf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92fa350add2e10d97b012085da56166db9ed4f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92fa350add2e10d97b012085da56166db9ed4f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92fa350add2e10d97b012085da56166db9ed4f0c"}], "stats": {"total": 187, "additions": 175, "deletions": 12}, "files": [{"sha": "eb1d068063c73d6c90e33910dfb1e8b352e08f77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "patch": "@@ -1,3 +1,16 @@\n+2001-01-31  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-parse.in (structsp): Pedwarn when \"enum foo\" refers to an\n+\tincomplete type.\n+\t(typename): Call pending_xref_error after parsing typed_typespecs.\n+\t* c-decl.c (lookup_tag): Give error immediately rather than\n+\tleaving it pending if the tag of the wrong type is in the same\n+\tbinding level.\n+\t(xref_tag): Don't pedwarn for forward declarations of enum types\n+\there.\n+\t* gcc.texi (Actual Bugs): Remove entry for misuse of struct, union\n+\tand enum tags.\n+\n 2001-01-31  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/float-sparc.h (LDBL_MAX) [sparc32]: Fix typo."}, {"sha": "b49f786b4c01deb07d2388558c34dcde9da64847", "filename": "gcc/c-decl.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "patch": "@@ -2815,6 +2815,7 @@ lookup_tag (code, name, binding_level, thislevel_only)\n      int thislevel_only;\n {\n   register struct binding_level *level;\n+  int thislevel = 1;\n \n   for (level = binding_level; level; level = level->level_chain)\n     {\n@@ -2829,12 +2830,22 @@ lookup_tag (code, name, binding_level, thislevel_only)\n \t\t  pending_invalid_xref = name;\n \t\t  pending_invalid_xref_file = input_filename;\n \t\t  pending_invalid_xref_line = lineno;\n+\t\t  /* If in the same binding level as a declaration as a tag\n+\t\t     of a different type, this must not be allowed to\n+\t\t     shadow that tag, so give the error immediately.\n+\t\t     (For example, \"struct foo; union foo;\" is invalid.)  */\n+\t\t  if (thislevel)\n+\t\t    pending_xref_error ();\n \t\t}\n \t      return TREE_VALUE (tail);\n \t    }\n \t}\n-      if (thislevel_only && ! level->tag_transparent)\n-\treturn NULL_TREE;\n+      if (! level->tag_transparent)\n+\t{\n+\t  if (thislevel_only)\n+\t    return NULL_TREE;\n+\t  thislevel = 0;\n+\t}\n     }\n   return NULL_TREE;\n }\n@@ -5112,9 +5123,6 @@ xref_tag (code, name)\n   ref = make_node (code);\n   if (code == ENUMERAL_TYPE)\n     {\n-      /* (In ANSI, Enums can be referred to only if already defined.)  */\n-      if (pedantic)\n-\tpedwarn (\"ISO C forbids forward references to `enum' types\");\n       /* Give the type a default layout like unsigned int\n \t to avoid crashing if it does not get defined.  */\n       TYPE_MODE (ref) = TYPE_MODE (unsigned_type_node);"}, {"sha": "a51161c85a8b140ae6719847f159cc4743a8459f", "filename": "gcc/c-parse.in", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "patch": "@@ -1397,7 +1397,11 @@ structsp:\n \t\t{ $$ = finish_enum ($<ttype>3, nreverse ($4),\n \t\t\t\t    chainon ($1, $7)); }\n \t| enum_head identifier\n-\t\t{ $$ = xref_tag (ENUMERAL_TYPE, $2); }\n+\t\t{ $$ = xref_tag (ENUMERAL_TYPE, $2);\n+\t\t  /* In ISO C, enumerated types can be referred to\n+\t\t     only if already defined.  */\n+\t\t  if (pedantic && !COMPLETE_TYPE_P ($$))\n+\t\t    pedwarn (\"ISO C forbids forward references to `enum' types\"); }\n \t;\n \n maybecomma:\n@@ -1534,8 +1538,10 @@ enumerator:\n \t;\n \n typename:\n-\ttyped_typespecs absdcl\n-\t\t{ $$ = build_tree_list ($1, $2); }\n+\t  typed_typespecs\n+\t\t{ pending_xref_error (); }\n+\t  absdcl\n+\t\t{ $$ = build_tree_list ($1, $3); }\n \t| nonempty_type_quals absdcl\n \t\t{ $$ = build_tree_list ($1, $2); }\n \t;"}, {"sha": "99f2433f89f2df6f748c64716a9904de8853f444", "filename": "gcc/gcc.texi", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "patch": "@@ -536,10 +536,6 @@ The @code{fixproto} script will sometimes add prototypes for the\n edit the offending file and place the typedef in front of the\n prototypes.\n \n-@item\n-There are several obscure case of mis-using struct, union, and\n-enum tags that are not detected as errors by the compiler.\n-\n @item\n When @samp{-pedantic-errors} is specified, GCC will incorrectly give\n an error message when a function name is specified in an expression"}, {"sha": "755db77284d208342d05df98cdbaaecbbcc06987", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "patch": "@@ -1,3 +1,7 @@\n+2001-01-31  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c99-tag-1.c: New test.\n+\n 2001-01-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n         * gcc.dg/cpp/tr-warn1.c: Add tests."}, {"sha": "293636154adaddf6c208f33f3ae60046c4e82caf", "filename": "gcc/testsuite/gcc.dg/c99-tag-1.c", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-tag-1.c?ref=0aca1a4fd3d3f5fbfbbbfcc8e29a3f1cbb45d56a", "patch": "@@ -0,0 +1,136 @@\n+/* Test for handling of tags (6.7.2.3).  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+void\n+foo (void)\n+{\n+  /* Forward declarations of structs and unions are OK; those of enums are\n+     not.  */\n+  {\n+    struct s0;\n+    struct s1 *x0;\n+    union u0;\n+    union u1 *x1;\n+    enum e0; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"forward\" \"enum forward 1\" { target *-*-* } 16 } */\n+    enum e1 *x2; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"forward\" \"enum forward 2\" { target *-*-* } 18 } */\n+    /* GCC used to fail to diagnose a use of an enum inside its definition.  */\n+    enum e2 { E2A = sizeof (enum e2 *) }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"forward\" \"enum forward 3\" { target *-*-* } 21 } */\n+  }\n+  /* A specific type shall have its content defined at most once.  But we\n+     may redeclare the tag in different scopes.  */\n+  {\n+    struct s0 { int i; };\n+    {\n+      struct s0 { long l; };\n+    }\n+    {\n+      union s0 { long l; };\n+    }\n+    struct s0 { int i; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"rede\" \"struct redef\" { target *-*-* } 34 } */\n+    union u0 { int i; };\n+    {\n+      union u0 { long l; };\n+    }\n+    {\n+      struct u0 { long l; };\n+    }\n+    union u0 { int i; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"rede\" \"union redef\" { target *-*-* } 43 } */\n+    enum e0 { E0A };\n+    {\n+      enum e0 { E0B };\n+    }\n+    {\n+      struct e0 { long l; };\n+    }\n+    enum e0 { E0B }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"rede\" \"enum redef\" { target *-*-* } 52 } */\n+  }\n+  /* Structure, union and enumerated types have a single namespace of tags.  */\n+  {\n+    struct s0;\n+    struct s1;\n+    struct s2 { int i; };\n+    struct s2;\n+    struct s3 { int i; };\n+    struct s2 sv;\n+    union u0;\n+    union u2 { int i; };\n+    union u2;\n+    union u2 uv;\n+    enum e0 { E0A };\n+    enum e1 { E1A };\n+    /* None of the following are allowed; some were not detected by GCC.  */\n+    union s0; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 70 } */\n+    union s1 { int i; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 72 } */\n+    union s2; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 74 } */\n+    union s3 { int i; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 76 } */\n+    enum u0 { U0A }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 78 } */\n+    enum u2 { U2A }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 80 } */\n+    struct e0; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 82 } */\n+    struct e1 { int i; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+    /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 84 } */\n+  }\n+  /* Explicit shadowing in inner scopes is OK, but references to the tag\n+     that don't explicitly shadow it must (whether in declarations or\n+     expressions) use the correct one of struct/union/enum.  */\n+  {\n+    struct s0;\n+    struct s1;\n+    struct s2 { int i; };\n+    struct s2;\n+    struct s3 { int i; };\n+    struct s2 sv;\n+    union u0;\n+    union u2 { int i; };\n+    union u2;\n+    union u2 uv;\n+    enum e0 { E0A };\n+    enum e1 { E1A };\n+    {\n+      union s0;\n+      union s1;\n+      union s2;\n+      union s3;\n+      struct u0;\n+      struct u2;\n+      struct e0;\n+      union e1;\n+    }\n+    {\n+      union s0 *x0; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+      /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 114 } */\n+      int x1[sizeof (union s1 *)]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+      /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 116 } */\n+      struct t;\n+      union s2 *x2;\n+      /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 119 } */\n+      int x3[sizeof (union s3 *)]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+      /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 121 } */\n+      struct u;\n+      enum u0 *y0; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+      /* { dg-error \"wrong|forward\" \"wrong tag type\" { target *-*-* } 124 } */\n+      int y1[sizeof (enum u2 *)]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+      /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 126 } */\n+      struct v;\n+      struct e0 *z0; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+      /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 129 } */\n+      int z1[sizeof (struct e1 *)]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+      /* { dg-error \"wrong\" \"wrong tag type\" { target *-*-* } 131 } */\n+      struct w;\n+    }\n+  }\n+}"}]}