{"sha": "5afd90c5f36bf45291ca09ef3791f4a574e90d5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmZDkwYzVmMzZiZjQ1MjkxY2EwOWVmMzc5MWY0YTU3NGU5MGQ1ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-20T07:33:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-10-29T17:09:18Z"}, "message": "c++: Fix constexpr dtors vs invisible ref [PR97388]\n\nFor arguments passed by invisible reference, in the IL until genericization\nwe have the source types on the callee side and while on the caller side\nwe already pass references to the actual argument slot in the caller, we\nundo that in cxx_bind_parameters_in_call's\n      if (TREE_ADDRESSABLE (type))\n        /* Undo convert_for_arg_passing work here.  */\n        x = convert_from_reference (x);\nThis works fine most of the time, except when the type also has constexpr\ndestructor; in that case the destructor is invoked in the caller and thus\nthe unsharing we do to make sure that the callee doesn't modify caller's\nvalues is in that case undesirable, it prevents the changes done in the\ncallee propagating to the caller which should see them for the constexpr\ndtor evaluation.\n\nThe following patch fixes that.  While it could be perhaps done for all\nTREE_ADDRESSABLE types, I don't see the need to change the behavior\nif there is no constexpr non-trivial dtor.\n\nJason: And we need to avoid memoizing the call, because a later equivalent\ncall also needs to modify its argument.  And we don't need to unshare\nconstructors when we aren't memoizing the call, because we already unshared\nthem when evaluating the TARGET_EXPR representing the copy-initialization of\nthe argument.\n\n2020-10-20  Jakub Jelinek  <jakub@redhat.com>\n\t    Jason Merrill  <jason@redhat.com>\n\n\tPR c++/97388\n\t* constexpr.c (cxx_bind_parameters_in_call): Set non_constant_args\n\tif the parameter type has a non-trivial destructor.\n\t(cxx_eval_call_expression): Only unshare arguments if we're\n\tmemoizing this evaluation.\n\n\t* g++.dg/cpp2a/constexpr-dtor5.C: New test.\n\t* g++.dg/cpp2a/constexpr-dtor6.C: New test.\n\t* g++.dg/cpp2a/constexpr-dtor7.C: New test.", "tree": {"sha": "4481aae044449d924fd7b2224343aa43db8cff51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4481aae044449d924fd7b2224343aa43db8cff51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5afd90c5f36bf45291ca09ef3791f4a574e90d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afd90c5f36bf45291ca09ef3791f4a574e90d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5afd90c5f36bf45291ca09ef3791f4a574e90d5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afd90c5f36bf45291ca09ef3791f4a574e90d5d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca6de338d405d8ebe4d8b80526c383540209007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca6de338d405d8ebe4d8b80526c383540209007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ca6de338d405d8ebe4d8b80526c383540209007"}], "stats": {"total": 109, "additions": 102, "deletions": 7}, "files": [{"sha": "c959b532ec3bcd44749b172f37971346b60fa5f6", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afd90c5f36bf45291ca09ef3791f4a574e90d5d/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afd90c5f36bf45291ca09ef3791f4a574e90d5d/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=5afd90c5f36bf45291ca09ef3791f4a574e90d5d", "patch": "@@ -1602,6 +1602,11 @@ cxx_bind_parameters_in_call (const constexpr_ctx *ctx, tree t,\n \t    arg = adjust_temp_type (type, arg);\n \t  if (!TREE_CONSTANT (arg))\n \t    *non_constant_args = true;\n+\t  else if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n+\t    /* The destructor needs to see any modifications the callee makes\n+\t       to the argument.  */\n+\t    *non_constant_args = true;\n+\n \t  /* For virtual calls, adjust the this argument, so that it is\n \t     the object on which the method is called, rather than\n \t     one of its bases.  */\n@@ -2626,14 +2631,14 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t\t     problems with verify_gimple.  */\n \t\t  arg = unshare_expr_without_location (arg);\n \t\t  TREE_VEC_ELT (bound, i) = arg;\n+\n+\t\t  /* And then unshare again so the callee doesn't change the\n+\t\t     argument values in the hash table. XXX Could we unshare\n+\t\t     lazily in cxx_eval_store_expression?  */\n+\t\t  arg = unshare_constructor (arg);\n+\t\t  if (TREE_CODE (arg) == CONSTRUCTOR)\n+\t\t    vec_safe_push (ctors, arg);\n \t\t}\n-\t      /* Don't share a CONSTRUCTOR that might be changed.  This is not\n-\t\t redundant with the unshare just above; we also don't want to\n-\t\t change the argument values in the hash table.  XXX Could we\n-\t\t unshare lazily in cxx_eval_store_expression?  */\n-\t      arg = unshare_constructor (arg);\n-\t      if (TREE_CODE (arg) == CONSTRUCTOR)\n-\t\tvec_safe_push (ctors, arg);\n \t      ctx->global->values.put (remapped, arg);\n \t      remapped = DECL_CHAIN (remapped);\n \t    }"}, {"sha": "1739afbcc680d9444038ef45a26c8e6ff5f14837", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor5.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afd90c5f36bf45291ca09ef3791f4a574e90d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afd90c5f36bf45291ca09ef3791f4a574e90d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor5.C?ref=5afd90c5f36bf45291ca09ef3791f4a574e90d5d", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/97388\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  int m;\n+  constexpr S () : m(1) {}\n+  constexpr ~S () noexcept (false) { if (m == 1) { throw; } }\n+};\n+\n+constexpr bool\n+foo (S v)\n+{\n+  v.m = 2;\n+  return true;\n+}\n+\n+constexpr bool\n+bar ()\n+{\n+  return foo (S ());\n+}\n+\n+constexpr bool\n+baz ()\n+{\n+  foo (S ());\n+  return foo (S ());\n+}\n+\n+static_assert (foo (S ()));\n+static_assert (bar ());\n+static_assert (baz ());\n+constexpr bool x = foo (S ());\n+constexpr bool y = bar ();\n+constexpr bool z = baz ();"}, {"sha": "ce783a1df8816499991d9b0696a7f02428875552", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor6.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afd90c5f36bf45291ca09ef3791f4a574e90d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afd90c5f36bf45291ca09ef3791f4a574e90d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor6.C?ref=5afd90c5f36bf45291ca09ef3791f4a574e90d5d", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/97388\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  int *s;\n+  constexpr S () : s(new int ()) {}\n+  constexpr S (S &&x) noexcept : s(x.s) { x.s = nullptr; }\n+  constexpr ~S () noexcept { delete s; }\n+};\n+\n+constexpr bool\n+foo (S v)\n+{\n+  auto x = static_cast<S &&> (v);\n+  return true;\n+}\n+\n+constexpr bool\n+bar ()\n+{\n+  return foo (S ());\n+}\n+\n+constexpr bool\n+baz ()\n+{\n+  foo (S ());\n+  return foo (S ());\n+}\n+\n+static_assert (foo (S ()));\n+static_assert (bar ());\n+static_assert (baz ());\n+constexpr bool x = foo (S ());\n+constexpr bool y = bar ();\n+constexpr bool z = baz ();"}, {"sha": "463eaca05394409761b853565195f0358e55eb44", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor7.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afd90c5f36bf45291ca09ef3791f4a574e90d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afd90c5f36bf45291ca09ef3791f4a574e90d5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor7.C?ref=5afd90c5f36bf45291ca09ef3791f4a574e90d5d", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/97388\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  int *s;\n+  constexpr S () : s(new int) {}\t// { dg-error \"is not a constant expression because allocated storage has not been deallocated\" }\n+  S (const S &) = delete;\n+  S &operator= (const S &) = delete;\n+  constexpr ~S () { delete s; }\n+};\n+\n+constexpr bool\n+foo (S v)\n+{\n+  v.s = nullptr;\n+  return true;\n+}\n+\n+static_assert (foo (S ()));\t// { dg-error \"non-constant condition for static assertion\" }"}]}