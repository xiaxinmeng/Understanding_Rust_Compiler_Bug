{"sha": "2139fd74f31449c01f347bd1005cfab52cde7969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzOWZkNzRmMzE0NDljMDFmMzQ3YmQxMDA1Y2ZhYjUyY2RlNzk2OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-12-13T15:57:24Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-12-13T15:57:24Z"}, "message": "[PR c++/87531] Fix second bug\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-12/msg00929.html\n\n\tPR c++/87531\n\t* class.c (finish_struct): Set DECL_CONTEXT of template assign op.\n\t* name-lookup.c (get_class_binding_direct): Don't strip using-decl\n\tof overload here.\n\t* parser.c (cp_parser_postfix_expression): Cope with using decl in\n\toverload set.\n\t* semantics.c (finish_id_expr): Likewise.\n\n\t* g++.dg/lookup/pr87531-2.C: New.\n\nFrom-SVN: r267096", "tree": {"sha": "d074b17ab6572bf9768b2c594b39ccb3092705fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d074b17ab6572bf9768b2c594b39ccb3092705fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2139fd74f31449c01f347bd1005cfab52cde7969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2139fd74f31449c01f347bd1005cfab52cde7969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2139fd74f31449c01f347bd1005cfab52cde7969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2139fd74f31449c01f347bd1005cfab52cde7969/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1d42e85ad96f0c2977118c019a8a31e895ea1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1d42e85ad96f0c2977118c019a8a31e895ea1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1d42e85ad96f0c2977118c019a8a31e895ea1da"}], "stats": {"total": 106, "additions": 90, "deletions": 16}, "files": [{"sha": "503bbbb7598a2066bb204e2b55d1ac639e41dd71", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2139fd74f31449c01f347bd1005cfab52cde7969", "patch": "@@ -1,3 +1,13 @@\n+2018-12-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/87531\n+\t* class.c (finish_struct): Set DECL_CONTEXT of template assign op.\n+\t* name-lookup.c (get_class_binding_direct): Don't strip using-decl\n+\tof overload here.\n+\t* parser.c (cp_parser_postfix_expression): Cope with using decl in\n+\toverload set.\n+\t* semantics.c (finish_id_expr): Likewise.\n+\n 2018-12-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (grokdeclarator): Fix location of error message about"}, {"sha": "36e17572a3322657694b97a3ea423d99a463681e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2139fd74f31449c01f347bd1005cfab52cde7969", "patch": "@@ -7158,6 +7158,7 @@ finish_struct (tree t, tree attributes)\n \t time.  */\n       tree ass_op = build_lang_decl (USING_DECL, assign_op_identifier,\n \t\t\t\t     NULL_TREE);\n+      DECL_CONTEXT (ass_op) = t;\n       USING_DECL_SCOPE (ass_op) = t;\n       DECL_DEPENDENT_P (ass_op) = true;\n       DECL_ARTIFICIAL (ass_op) = true;"}, {"sha": "39710fcb50598513a5110b4951fa78b2da595198", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=2139fd74f31449c01f347bd1005cfab52cde7969", "patch": "@@ -1242,17 +1242,6 @@ get_class_binding_direct (tree klass, tree name, int type_or_fns)\n \t}\n       else if (STAT_HACK_P (val))\n \tval = STAT_DECL (val);\n-\n-      if (val && TREE_CODE (val) == OVERLOAD\n-\t  && TREE_CODE (OVL_FUNCTION (val)) == USING_DECL)\n-\t{\n-\t  /* An overload with a dependent USING_DECL.  Does the caller\n-\t     want the USING_DECL or the functions?  */\n-\t  if (type_or_fns < 0)\n-\t    val = OVL_CHAIN (val);\n-\t  else\n-\t    val = OVL_FUNCTION (val);  \n-\t}\n     }\n   else\n     {"}, {"sha": "7ff113f3c0fa4ae44d63009ecc4023a37aecb055", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2139fd74f31449c01f347bd1005cfab52cde7969", "patch": "@@ -7240,14 +7240,19 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\telse if (!args->is_empty ()\n \t\t\t && is_overloaded_fn (postfix_expression))\n \t\t  {\n+\t\t    /* We only need to look at the first function,\n+\t\t       because all the fns share the attribute we're\n+\t\t       concerned with (all member fns or all local\n+\t\t       fns).  */\n \t\t    tree fn = get_first_fn (postfix_expression);\n \t\t    fn = STRIP_TEMPLATE (fn);\n \n \t\t    /* Do not do argument dependent lookup if regular\n \t\t       lookup finds a member function or a block-scope\n \t\t       function declaration.  [basic.lookup.argdep]/3  */\n-\t\t    if (!DECL_FUNCTION_MEMBER_P (fn)\n-\t\t\t&& !DECL_LOCAL_FUNCTION_P (fn))\n+\t\t    if (!((TREE_CODE (fn) == USING_DECL && DECL_DEPENDENT_P (fn))\n+\t\t\t  || DECL_FUNCTION_MEMBER_P (fn)\n+\t\t\t  || DECL_LOCAL_FUNCTION_P (fn)))\n \t\t      {\n \t\t\tkoenig_p = true;\n \t\t\tif (!any_type_dependent_arguments_p (args))"}, {"sha": "09ed97de2c7b3d9e79d7d4de92b89c3d20e10b7d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2139fd74f31449c01f347bd1005cfab52cde7969", "patch": "@@ -3805,9 +3805,10 @@ finish_id_expression (tree id_expression,\n \t    return error_mark_node;\n \n \t  if (!template_arg_p\n-\t      && TREE_CODE (first_fn) == FUNCTION_DECL\n-\t      && DECL_FUNCTION_MEMBER_P (first_fn)\n-\t      && !shared_member_p (decl))\n+\t      && (TREE_CODE (first_fn) == USING_DECL\n+\t\t  || (TREE_CODE (first_fn) == FUNCTION_DECL\n+\t\t      && DECL_FUNCTION_MEMBER_P (first_fn)\n+\t\t      && !shared_member_p (decl))))\n \t    {\n \t      /* A set of member functions.  */\n \t      decl = maybe_dummy_object (DECL_CONTEXT (first_fn), 0);"}, {"sha": "50ccb916eb22b1d2f353550983896894d7355401", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2139fd74f31449c01f347bd1005cfab52cde7969", "patch": "@@ -1,3 +1,8 @@\n+2018-12-13  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/87531\n+\t* g++.dg/lookup/pr87531-2.C: New.\n+\n 2018-12-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR testsuite/88041"}, {"sha": "93231ce45a18ac88096157335238b53dada7f8d6", "filename": "gcc/testsuite/g++.dg/lookup/pr87531-2.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr87531-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2139fd74f31449c01f347bd1005cfab52cde7969/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr87531-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr87531-2.C?ref=2139fd74f31449c01f347bd1005cfab52cde7969", "patch": "@@ -0,0 +1,63 @@\n+// PR 87531 part 2.  dependent using decls + template decls.\n+\n+template<typename T>\n+struct One\n+{\n+  One& operator=(T* p_)\n+  {\n+    return operator=<T>(p_); // Parse failed here\n+  }\n+\n+  template<typename U>\n+  One& operator=(U* p_);\n+  \n+};\n+\n+\n+template<typename T>\n+struct Two : T\n+{\n+  using T::f;\n+  template<typename U> void f ();\n+\n+  using T::operator T*;\n+  operator T * () const;\n+  \n+  int frob ()\n+  {\n+    return f<int> (1);\n+  }\n+\n+  T *quux ()\n+  {\n+    return operator T * ();\n+  }\n+\n+  T *quux () const\n+  {\n+    return operator T * ();\n+  }\n+};\n+\n+struct Base \n+{\n+  template <typename T> int f (T i) \n+  {\n+    return i;\n+  }\n+\n+  operator Base *() const;\n+};\n+\n+void foo ()\n+{\n+  One<int> one;\n+  Two<Base> two;\n+\n+  one = One<int> ();\n+\n+  two.frob ();\n+  two.quux ();\n+  const_cast <const Two<Base> &> (two).quux ();\n+}\n+"}]}