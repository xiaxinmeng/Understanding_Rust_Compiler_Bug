{"sha": "05794ce850979f99c29d11c470ab8fd33dffd065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU3OTRjZTg1MDk3OWY5OWMyOWQxMWM0NzBhYjhmZDMzZGZmZDA2NQ==", "commit": {"author": {"name": "Kyle Galloway", "email": "kgallowa@redhat.com", "date": "2007-01-16T15:06:28Z"}, "committer": {"name": "Kyle Galloway", "email": "kgallowa@gcc.gnu.org", "date": "2007-01-16T15:06:28Z"}, "message": "jvmti.cc (_Jv_JVMTI_GetAllThreads): New function.\n\n2007-01-16  Kyle Galloway  <kgallowa@redhat.com>\n\n\t* jvmti.cc (_Jv_JVMTI_GetAllThreads): New function.\n\t* testsuite/libjava.jvmti/getallthreads.java: New test.\n\t* testsuite/libjava.jvmti/natgetallthreads.cc: Ditto.\n\t* testsuite/libjava.jvmti/getallthreads.out: Ditto.\n\t* testsuite/libjava.jvmti/getallthreads.h: Ditto.\n\t* testsuite/libjava.jvmti/getallthreads.jar: Ditto.\n\nFrom-SVN: r120827", "tree": {"sha": "8a3866653315bfe7be70d28bf9d7d4f62e0bdc88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a3866653315bfe7be70d28bf9d7d4f62e0bdc88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05794ce850979f99c29d11c470ab8fd33dffd065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05794ce850979f99c29d11c470ab8fd33dffd065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05794ce850979f99c29d11c470ab8fd33dffd065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05794ce850979f99c29d11c470ab8fd33dffd065/comments", "author": null, "committer": null, "parents": [{"sha": "878aa8171752ad29ae47099e31fbe3df1dcf3133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878aa8171752ad29ae47099e31fbe3df1dcf3133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878aa8171752ad29ae47099e31fbe3df1dcf3133"}], "stats": {"total": 251, "additions": 250, "deletions": 1}, "files": [{"sha": "af8efa013836609839d8903d41b0bba8dffff4b3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=05794ce850979f99c29d11c470ab8fd33dffd065", "patch": "@@ -1,3 +1,12 @@\n+2007-01-16  Kyle Galloway  <kgallowa@redhat.com>\n+\n+\t* jvmti.cc (_Jv_JVMTI_GetAllThreads): New function.\n+\t* testsuite/libjava.jvmti/getallthreads.java: New test.\n+\t* testsuite/libjava.jvmti/natgetallthreads.cc: Ditto.\n+\t* testsuite/libjava.jvmti/getallthreads.out: Ditto.\n+\t* testsuite/libjava.jvmti/getallthreads.h: Ditto.\n+\t* testsuite/libjava.jvmti/getallthreads.jar: Ditto. \n+\n 2007-01-15  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/natVMVirtualMachine.cc (suspendThread): Use"}, {"sha": "b9646b7d1018e3165642afd5bfa484a3a39923e7", "filename": "libjava/jvmti.cc", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Fjvmti.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Fjvmti.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjvmti.cc?ref=05794ce850979f99c29d11c470ab8fd33dffd065", "patch": "@@ -28,7 +28,9 @@ details.  */\n #include <java/lang/Class.h>\n #include <java/lang/ClassLoader.h>\n #include <java/lang/Object.h>\n+#include <java/lang/OutOfMemoryError.h>\n #include <java/lang/Thread.h>\n+#include <java/lang/ThreadGroup.h>\n #include <java/lang/Throwable.h>\n #include <java/lang/VMClassLoader.h>\n #include <java/lang/reflect/Field.h>\n@@ -196,6 +198,51 @@ _Jv_JVMTI_InterruptThread (MAYBE_UNUSED jvmtiEnv *env, jthread thread)\n   return JVMTI_ERROR_NONE;\n }\n \n+jvmtiError\n+_Jv_JVMTI_GetAllThreads(MAYBE_UNUSED jvmtiEnv *env, jint *thread_cnt,\n+                        jthread **threads)\n+{\n+  REQUIRE_PHASE (env, JVMTI_PHASE_LIVE);\n+  NULL_CHECK (thread_cnt);\n+  NULL_CHECK (threads);\n+   \n+  using namespace java::lang;\n+  Thread *thr = Thread::currentThread ();\n+   \n+  ThreadGroup *root_grp = ThreadGroup::root;\n+  jint estimate = root_grp->activeCount ();\n+\n+  JArray<Thread *> *thr_arr;\n+\n+  // Allocate some extra space since threads can be created between calls\n+  try\n+    { \n+      thr_arr\n+\t\t\t  = reinterpret_cast<JArray<Thread *> *> (JvNewObjectArray \n+\t\t\t                                           ((estimate * 2),\n+                                                 &Thread::class$, NULL));\n+    }\n+  catch (java::lang::OutOfMemoryError *err)\n+    {\n+      return JVMTI_ERROR_OUT_OF_MEMORY;\n+    }\n+    \n+  *thread_cnt = root_grp->enumerate (thr_arr);\n+   \n+  jvmtiError jerr = env->Allocate ((jlong) ((*thread_cnt) * sizeof (jthread)),\n+                                   (unsigned char **) threads);\n+ \n+  if (jerr != JVMTI_ERROR_NONE)\n+    return jerr;\n+   \n+  // Transfer the threads to the result array\n+  jthread *tmp_arr = reinterpret_cast<jthread *> (elements (thr_arr));\n+ \n+  memcpy ((*threads), tmp_arr, (*thread_cnt));\n+   \n+  return JVMTI_ERROR_NONE;\n+}\n+\n static jvmtiError JNICALL\n _Jv_JVMTI_CreateRawMonitor (MAYBE_UNUSED jvmtiEnv *env, const char *name,\n \t\t\t    jrawMonitorID *result)\n@@ -1362,7 +1409,7 @@ struct _Jv_jvmtiEnv _Jv_JVMTI_Interface =\n   RESERVED,\t\t\t// reserved1\n   _Jv_JVMTI_SetEventNotificationMode, // SetEventNotificationMode\n   RESERVED,\t\t\t// reserved3\n-  UNIMPLEMENTED,\t\t// GetAllThreads\n+  _Jv_JVMTI_GetAllThreads,\t\t// GetAllThreads\n   _Jv_JVMTI_SuspendThread,\t// SuspendThread\n   _Jv_JVMTI_ResumeThread,\t// ResumeThread\n   UNIMPLEMENTED,\t\t// StopThread"}, {"sha": "7579892f3f7baa7e2af537e02a398717f2cbc696", "filename": "libjava/testsuite/libjava.jvmti/getallthreads.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.h?ref=05794ce850979f99c29d11c470ab8fd33dffd065", "patch": "@@ -0,0 +1,35 @@\n+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n+\n+#ifndef __getallthreads__\n+#define __getallthreads__\n+\n+#pragma interface\n+\n+#include <java/lang/Thread.h>\n+#include <gcj/array.h>\n+\n+extern \"Java\"\n+{\n+  class getallthreads;\n+}\n+\n+class getallthreads : public ::java::lang::Thread\n+{\n+public:\n+  getallthreads ();\n+  static void do_getallthreads_tests ();\n+  virtual void run ();\n+  virtual void natPlaceholder ();\n+  virtual void natRunner ();\n+  virtual void placeholder ();\n+  virtual void runner ();\n+  static void main (JArray< ::java::lang::String *> *);\n+  static jint thread_num;\n+  static ::java::util::ArrayList *threads;\n+  jint __attribute__((aligned(__alignof__( ::java::lang::Thread ))))  ex_frames;\n+  jboolean done;\n+\n+  static ::java::lang::Class class$;\n+};\n+\n+#endif /* __getallthreads__ */"}, {"sha": "3e59ccdc362c7e302ffb73c948e4c5a20393cb11", "filename": "libjava/testsuite/libjava.jvmti/getallthreads.jar", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.jar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.jar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.jar?ref=05794ce850979f99c29d11c470ab8fd33dffd065"}, {"sha": "00be3a75c00277214e252c402b3cbad8d30f4589", "filename": "libjava/testsuite/libjava.jvmti/getallthreads.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.java?ref=05794ce850979f99c29d11c470ab8fd33dffd065", "patch": "@@ -0,0 +1,80 @@\n+// Test JVMTI GetAllThreads\n+\n+import java.util.ArrayList;\n+\n+public class getallthreads extends Thread\n+{\n+\t public static int thread_num;\n+\t public static ArrayList threads;\n+\n+\t public int ex_frames;\n+  public boolean done = false;\n+  \n+  public static native void do_getallthreads_tests ();\n+\n+  public void run ()\n+\t {\n+    ex_frames = thread_num;\n+\t\t thread_num++;\n+\n+\t\t if (ex_frames > 0)\n+\t\t   {\n+        if ((ex_frames % 2) == 0)\n+\t\t\t\t\t placeholder ();\n+\t\t\t\t else\n+\t\t\t\t\t natPlaceholder ();\n+\t\t   }\n+\t\t else\n+      runner ();\n+\t }\n+\n+\t public native void natPlaceholder ();\n+\t public native void natRunner ();\n+\n+\t public void placeholder ()\n+\t {\n+\t\t ex_frames--;\n+\n+\t\t if (ex_frames > 0)\n+\t\t   {\n+\t\t\t\t if ((thread_num % 2) == 0)\n+\t\t\t\t\t placeholder ();\n+\t\t\t\t else\n+\t\t\t\t\t natPlaceholder ();\n+\t\t\t }\n+\t\t else\n+\t\t\t runner ();\n+   }\n+\n+\t public void runner ()\n+\t {\n+\t\t done = true;\n+\t\t while (done)\n+\t\t\tyield ();\n+\t }\n+\n+  public static void main (String[] args)\n+  {\n+    System.out.println (\"JVMTI GetAllThreads tests\");\n+    threads = new ArrayList (20);\n+\n+\t\tgetallthreads t;\n+\n+\t\tfor (int i = 0; i < 20; i++)\n+\t\t  {\n+\t\t\t\tt = new getallthreads ();\n+\t\t\t\tthreads.add (t);\n+\t\t\t\tt.start ();\n+\t\t\t\twhile (!t.done)\n+\t\t\t\t\tyield ();\n+\t\t\t}\n+\n+\t\tdo_getallthreads_tests ();\n+\n+\t\tfor (int i = 0; i < 20; i++)\n+\t\t  {\n+\t\t\t\tt = (getallthreads) threads.get(i);\n+\t\t\t\tt.done = false;\n+\t\t\t}\n+  }\n+}"}, {"sha": "8e05c4a4b625419822d0b1196a989f42d2eae918", "filename": "libjava/testsuite/libjava.jvmti/getallthreads.out", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fgetallthreads.out?ref=05794ce850979f99c29d11c470ab8fd33dffd065", "patch": "@@ -0,0 +1,23 @@\n+JVMTI GetAllThreads tests\n+Found thread 1\n+Found thread 2\n+Found thread 3\n+Found thread 4\n+Found thread 5\n+Found thread 6\n+Found thread 7\n+Found thread 8\n+Found thread 9\n+Found thread 10\n+Found thread 11\n+Found thread 12\n+Found thread 13\n+Found thread 14\n+Found thread 15\n+Found thread 16\n+Found thread 17\n+Found thread 18\n+Found thread 19\n+Found thread 20\n+Found thread 21\n+Found thread 22"}, {"sha": "9c4d69cde74adedafcff932e5946e515396822ca", "filename": "libjava/testsuite/libjava.jvmti/natgetallthreads.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Ftestsuite%2Flibjava.jvmti%2Fnatgetallthreads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05794ce850979f99c29d11c470ab8fd33dffd065/libjava%2Ftestsuite%2Flibjava.jvmti%2Fnatgetallthreads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jvmti%2Fnatgetallthreads.cc?ref=05794ce850979f99c29d11c470ab8fd33dffd065", "patch": "@@ -0,0 +1,55 @@\n+#include <gcj/cni.h>\n+\n+#include <jvm.h>\n+#include <jvmti.h>\n+#include <stdio.h>\n+\n+#include \"jvmti-int.h\"\n+#include \"getallthreads.h\"\n+\n+void\n+getallthreads::natPlaceholder ()\n+{\n+\t ex_frames--;\n+\n+\t if (ex_frames > 0)\n+\t   {\n+\t\t\t if ((getallthreads::thread_num % 2) == 0)\n+\t\t\t   placeholder ();\n+\t\t\t else\n+\t\t\t\t natPlaceholder ();\n+\t\t }\n+\t else\n+\t   natRunner ();\n+}\n+\n+void\n+getallthreads::natRunner ()\n+{\n+\t done = true;\n+\t while (done)\n+    yield ();\n+}\n+\n+void\n+getallthreads::do_getallthreads_tests ()\n+{\n+  jvmtiEnv *env;\n+  JavaVM *vm = _Jv_GetJavaVM ();\n+  vm->GetEnv (reinterpret_cast<void **> (&env), JVMTI_VERSION_1_0);\n+\n+\t jint num_threads;\n+\t jthread *thread_arr;\n+\n+\t jvmtiError jerr = env->GetAllThreads (&num_threads, &thread_arr);\n+\t if (jerr != JVMTI_ERROR_NONE)\n+\t   {\n+\t\t   printf (\"Test Failed, JVMTI Error!\\n\");\n+\t\t\t return;\n+\t\t }\n+\t env->Deallocate (reinterpret_cast<unsigned char *> (thread_arr));\n+\t\n+\t for (int i = 0; i < num_threads; i++)\n+  \t printf (\"Found thread %d\\n\", i+1 );\n+}\n+"}]}