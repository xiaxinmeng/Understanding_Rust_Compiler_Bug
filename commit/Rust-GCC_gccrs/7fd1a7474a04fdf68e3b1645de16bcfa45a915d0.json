{"sha": "7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZkMWE3NDc0YTA0ZmRmNjhlM2IxNjQ1ZGUxNmJjZmE0NWE5MTVkMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-21T08:12:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-21T08:12:27Z"}, "message": "tree-ssa-loop-ivcanon.c (constant_after_peeling): Do not require sth as strict as a simple_iv but a chrec without symbols and an...\n\n2016-04-21  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Do not require\n\tsth as strict as a simple_iv but a chrec without symbols and an\n\toperand defined in the loop we are peeling (and not some subloop).\n\t(propagate_constants_for_unrolling): Propagate all constants.\n\n\t* gcc.dg/vect/no-scevccp-outer-13.c: Adjust to prevent unrolling\n\tof inner loops.\n\t* gcc.dg/vect/no-scevccp-outer-7.c: Likewise.\n\t* gcc.dg/vect/vect-104.c: Likewise.\n\nFrom-SVN: r247048", "tree": {"sha": "bf12092837149c783d0f8f9f6414f5a29a9857a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf12092837149c783d0f8f9f6414f5a29a9857a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f23a412086f3ecaee7007ae85033e5bc3b70609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f23a412086f3ecaee7007ae85033e5bc3b70609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f23a412086f3ecaee7007ae85033e5bc3b70609"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "d2bd25abd15424cd85ba963a34c07fa3ad6efe3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "patch": "@@ -1,3 +1,10 @@\n+2016-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Do not require\n+\tsth as strict as a simple_iv but a chrec without symbols and an\n+\toperand defined in the loop we are peeling (and not some subloop).\n+\t(propagate_constants_for_unrolling): Propagate all constants.\n+\n 2017-04-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/79804"}, {"sha": "ffb00ec479986270e8928e351bc7dfa2445a3091", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "patch": "@@ -1,3 +1,10 @@\n+2016-04-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/no-scevccp-outer-13.c: Adjust to prevent unrolling\n+\tof inner loops.\n+\t* gcc.dg/vect/no-scevccp-outer-7.c: Likewise.\n+\t* gcc.dg/vect/vect-104.c: Likewise.\n+\n 2017-04-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR tree-optimization/80426"}, {"sha": "c5e373f8210444f7adbe16759cca8a8b6abd8bac", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-13.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-13.c?ref=7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"--param max-completely-peel-times=1\" } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "224148d2b1e6cf2bcd9ca11ccc4506d2a2499d64", "filename": "gcc/testsuite/gcc.dg/vect/no-scevccp-outer-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-scevccp-outer-7.c?ref=7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"--param max-completely-peel-times=1\" } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "c7478382915cd05ebeed39c7664f09db1fd42318", "filename": "gcc/testsuite/gcc.dg/vect/vect-104.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c?ref=7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"--param max-completely-peel-times=1\" } */\n \n #include <stdlib.h>\n #include <stdarg.h>"}, {"sha": "31dc616c0ccfe21b8b12769f7d5d34851b3ddb85", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd1a7474a04fdf68e3b1645de16bcfa45a915d0/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=7fd1a7474a04fdf68e3b1645de16bcfa45a915d0", "patch": "@@ -157,8 +157,6 @@ struct loop_size\n static bool\n constant_after_peeling (tree op, gimple *stmt, struct loop *loop)\n {\n-  affine_iv iv;\n-\n   if (is_gimple_min_invariant (op))\n     return true;\n \n@@ -188,12 +186,12 @@ constant_after_peeling (tree op, gimple *stmt, struct loop *loop)\n       return false;\n     }\n \n-  /* Induction variables are constants.  */\n-  if (!simple_iv (loop, loop_containing_stmt (stmt), op, &iv, false))\n-    return false;\n-  if (!is_gimple_min_invariant (iv.base))\n+  /* Induction variables are constants when defined in loop.  */\n+  if (loop_containing_stmt (stmt) != loop)\n     return false;\n-  if (!is_gimple_min_invariant (iv.step))\n+  tree ev = analyze_scalar_evolution (loop, op);\n+  if (chrec_contains_undetermined (ev)\n+      || chrec_contains_symbols (ev))\n     return false;\n   return true;\n }\n@@ -1259,7 +1257,7 @@ propagate_constants_for_unrolling (basic_block bb)\n \n       if (! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (result)\n \t  && gimple_phi_num_args (phi) == 1\n-\t  && TREE_CODE (arg) == INTEGER_CST)\n+\t  && CONSTANT_CLASS_P (arg))\n \t{\n \t  replace_uses_by (result, arg);\n \t  gsi_remove (&gsi, true);\n@@ -1276,7 +1274,7 @@ propagate_constants_for_unrolling (basic_block bb)\n       tree lhs;\n \n       if (is_gimple_assign (stmt)\n-\t  && gimple_assign_rhs_code (stmt) == INTEGER_CST\n+\t  && TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)) == tcc_constant\n \t  && (lhs = gimple_assign_lhs (stmt), TREE_CODE (lhs) == SSA_NAME)\n \t  && !SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n \t{"}]}