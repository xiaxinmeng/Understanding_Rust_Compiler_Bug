{"sha": "700d4cb08c88aec37c13e21e63dd61fd698baabc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAwZDRjYjA4Yzg4YWVjMzdjMTNlMjFlNjNkZDYxZmQ2OThiYWFiYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-17T12:52:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-17T12:52:19Z"}, "message": "Fix up duplicated duplicated words mostly in comments\n\nIn the r10-7197-gbae7b38cf8a21e068ad5c0bab089dedb78af3346 commit I've\nnoticed duplicated word in a message, which lead me to grep for those and\nwe have a tons of them.\nI've used\ngrep -v 'long long\\|optab optab\\|template template\\|double double' *.[chS] */*.[chS] *.def config/*/* 2>/dev/null | grep ' \\([a-zA-Z]\\+\\) \\1 '\nNote, the command will not detect the doubled words at the start or end of\nline or when one of the words is at the end of line and the next one at the\nstart of another one.\nSome of it is fairly obvious, e.g. all the \"the the\" cases which is\nsomething I've posted and committed patch for already e.g. in 2016,\nother cases are often valid, e.g. \"that that\" seems to look mostly ok to me.\nSome cases are quite hard to figure out, I've left out some of them from the\npatch (e.g. \"and and\" in some cases isn't talking about bitwise/logical and\nand so looks incorrect, but in other cases it is talking about those\noperations).\nIn most cases the right solution seems to be to remove one of the duplicated\nwords, but not always.\n\nI think most important are the ones with user visible messages (in the patch\n3 of the first 4 hunks), the rest is just comments (and internal\ndocumentation; for that see the doc/tm.texi changes).\n\n2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n\n\t* lra-spills.c (remove_pseudos): Fix up duplicated word issue in\n\ta dump message.\n\t* tree-sra.c (create_access_replacement): Fix up duplicated word issue\n\tin a comment.\n\t* read-rtl-function.c (find_param_by_name,\n\tfunction_reader::parse_enum_value, function_reader::get_insn_by_uid):\n\tLikewise.\n\t* spellcheck.c (get_edit_distance_cutoff): Likewise.\n\t* tree-data-ref.c (create_ifn_alias_checks): Likewise.\n\t* tree.def (SWITCH_EXPR): Likewise.\n\t* selftest.c (assert_str_contains): Likewise.\n\t* ipa-param-manipulation.h (class ipa_param_body_adjustments):\n\tLikewise.\n\t* tree-ssa-math-opts.c (convert_expand_mult_copysign): Likewise.\n\t* tree-ssa-loop-split.c (find_vdef_in_loop): Likewise.\n\t* langhooks.h (struct lang_hooks_for_decls): Likewise.\n\t* ipa-prop.h (struct ipa_param_descriptor): Likewise.\n\t* tree-ssa-strlen.c (handle_builtin_string_cmp, handle_store):\n\tLikewise.\n\t* tree-ssa-dom.c (simplify_stmt_for_jump_threading): Likewise.\n\t* tree-ssa-reassoc.c (reassociate_bb): Likewise.\n\t* tree.c (component_ref_size): Likewise.\n\t* hsa-common.c (hsa_init_compilation_unit_data): Likewise.\n\t* gimple-ssa-sprintf.c (get_string_length, format_string,\n\tformat_directive): Likewise.\n\t* omp-grid.c (grid_process_kernel_body_copy): Likewise.\n\t* input.c (string_concat_db::get_string_concatenation,\n\ttest_lexer_string_locations_ucn4): Likewise.\n\t* cfgexpand.c (pass_expand::execute): Likewise.\n\t* gimple-ssa-warn-restrict.c (builtin_memref::offset_out_of_bounds,\n\tmaybe_diag_overlap): Likewise.\n\t* rtl.c (RTX_CODE_HWINT_P_1): Likewise.\n\t* shrink-wrap.c (spread_components): Likewise.\n\t* tree-ssa-dse.c (initialize_ao_ref_for_dse, valid_ao_ref_for_dse):\n\tLikewise.\n\t* tree-call-cdce.c (shrink_wrap_one_built_in_call_with_conds):\n\tLikewise.\n\t* dwarf2out.c (dwarf2out_early_finish): Likewise.\n\t* gimple-ssa-store-merging.c: Likewise.\n\t* ira-costs.c (record_operand_costs): Likewise.\n\t* tree-vect-loop.c (vectorizable_reduction): Likewise.\n\t* target.def (dispatch): Likewise.\n\t(validate_dims, gen_ccmp_first): Fix up duplicated word issue\n\tin documentation text.\n\t* doc/tm.texi: Regenerated.\n\t* config/i386/x86-tune.def (X86_TUNE_PARTIAL_FLAG_REG_STALL): Fix up\n\tduplicated word issue in a comment.\n\t* config/i386/i386.c (ix86_test_loading_unspec): Likewise.\n\t* config/i386/i386-features.c (remove_partial_avx_dependency):\n\tLikewise.\n\t* config/msp430/msp430.c (msp430_select_section): Likewise.\n\t* config/gcn/gcn-run.c (load_image): Likewise.\n\t* config/aarch64/aarch64-sve.md (sve_ld1r<mode>): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_gen_adjusted_ldpstp): Likewise.\n\t* config/aarch64/falkor-tag-collision-avoidance.c\n\t(single_dest_per_chain): Likewise.\n\t* config/nvptx/nvptx.c (nvptx_record_fndecl): Likewise.\n\t* config/fr30/fr30.c (fr30_arg_partial_bytes): Likewise.\n\t* config/rs6000/rs6000-string.c (expand_cmp_vec_sequence): Likewise.\n\t* config/rs6000/rs6000-p8swap.c (replace_swapped_load_constant):\n\tLikewise.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Likewise.\n\t* config/rs6000/rs6000-logue.c\n\t(rs6000_emit_probe_stack_range_stack_clash): Likewise.\n\t* config/nds32/nds32-md-auxiliary.c (nds32_split_ashiftdi3): Likewise.\n\tFix various other issues in the comment.\nc-family/\n\t* c-common.c (resolve_overloaded_builtin): Fix up duplicated word\n\tissue in a diagnostic message.\ncp/\n\t* pt.c (tsubst): Fix up duplicated word issue in a diagnostic message.\n\t(lookup_template_class_1, tsubst_expr): Fix up duplicated word issue\n\tin a comment.\n\t* parser.c (cp_parser_statement, cp_parser_linkage_specification,\n\tcp_parser_placeholder_type_specifier,\n\tcp_parser_constraint_requires_parens): Likewise.\n\t* name-lookup.c (suggest_alternative_in_explicit_scope): Likewise.\nfortran/\n\t* array.c (gfc_check_iter_variable): Fix up duplicated word issue\n\tin a comment.\n\t* arith.c (gfc_arith_concat): Likewise.\n\t* resolve.c (gfc_resolve_ref): Likewise.\n\t* frontend-passes.c (matmul_lhs_realloc): Likewise.\n\t* module.c (gfc_match_submodule, load_needed): Likewise.\n\t* trans-expr.c (gfc_init_se): Likewise.", "tree": {"sha": "f02b4d3954543ef1a100a1f0e3b8757451885799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f02b4d3954543ef1a100a1f0e3b8757451885799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/700d4cb08c88aec37c13e21e63dd61fd698baabc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700d4cb08c88aec37c13e21e63dd61fd698baabc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/700d4cb08c88aec37c13e21e63dd61fd698baabc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/700d4cb08c88aec37c13e21e63dd61fd698baabc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f582ca0fd70c5de7f1bcb532241d58f9e7f0090a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f582ca0fd70c5de7f1bcb532241d58f9e7f0090a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f582ca0fd70c5de7f1bcb532241d58f9e7f0090a"}], "stats": {"total": 257, "additions": 176, "deletions": 81}, "files": [{"sha": "98fc289716d31a826ec1618e354380007d274db8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1,3 +1,73 @@\n+2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lra-spills.c (remove_pseudos): Fix up duplicated word issue in\n+\ta dump message.\n+\t* tree-sra.c (create_access_replacement): Fix up duplicated word issue\n+\tin a comment.\n+\t* read-rtl-function.c (find_param_by_name,\n+\tfunction_reader::parse_enum_value, function_reader::get_insn_by_uid):\n+\tLikewise.\n+\t* spellcheck.c (get_edit_distance_cutoff): Likewise.\n+\t* tree-data-ref.c (create_ifn_alias_checks): Likewise.\n+\t* tree.def (SWITCH_EXPR): Likewise.\n+\t* selftest.c (assert_str_contains): Likewise.\n+\t* ipa-param-manipulation.h (class ipa_param_body_adjustments):\n+\tLikewise.\n+\t* tree-ssa-math-opts.c (convert_expand_mult_copysign): Likewise.\n+\t* tree-ssa-loop-split.c (find_vdef_in_loop): Likewise.\n+\t* langhooks.h (struct lang_hooks_for_decls): Likewise.\n+\t* ipa-prop.h (struct ipa_param_descriptor): Likewise.\n+\t* tree-ssa-strlen.c (handle_builtin_string_cmp, handle_store):\n+\tLikewise.\n+\t* tree-ssa-dom.c (simplify_stmt_for_jump_threading): Likewise.\n+\t* tree-ssa-reassoc.c (reassociate_bb): Likewise.\n+\t* tree.c (component_ref_size): Likewise.\n+\t* hsa-common.c (hsa_init_compilation_unit_data): Likewise.\n+\t* gimple-ssa-sprintf.c (get_string_length, format_string,\n+\tformat_directive): Likewise.\n+\t* omp-grid.c (grid_process_kernel_body_copy): Likewise.\n+\t* input.c (string_concat_db::get_string_concatenation,\n+\ttest_lexer_string_locations_ucn4): Likewise.\n+\t* cfgexpand.c (pass_expand::execute): Likewise.\n+\t* gimple-ssa-warn-restrict.c (builtin_memref::offset_out_of_bounds,\n+\tmaybe_diag_overlap): Likewise.\n+\t* rtl.c (RTX_CODE_HWINT_P_1): Likewise.\n+\t* shrink-wrap.c (spread_components): Likewise.\n+\t* tree-ssa-dse.c (initialize_ao_ref_for_dse, valid_ao_ref_for_dse):\n+\tLikewise.\n+\t* tree-call-cdce.c (shrink_wrap_one_built_in_call_with_conds):\n+\tLikewise.\n+\t* dwarf2out.c (dwarf2out_early_finish): Likewise.\n+\t* gimple-ssa-store-merging.c: Likewise.\n+\t* ira-costs.c (record_operand_costs): Likewise.\n+\t* tree-vect-loop.c (vectorizable_reduction): Likewise.\n+\t* target.def (dispatch): Likewise.\n+\t(validate_dims, gen_ccmp_first): Fix up duplicated word issue\n+\tin documentation text.\n+\t* doc/tm.texi: Regenerated.\n+\t* config/i386/x86-tune.def (X86_TUNE_PARTIAL_FLAG_REG_STALL): Fix up\n+\tduplicated word issue in a comment.\n+\t* config/i386/i386.c (ix86_test_loading_unspec): Likewise.\n+\t* config/i386/i386-features.c (remove_partial_avx_dependency):\n+\tLikewise.\n+\t* config/msp430/msp430.c (msp430_select_section): Likewise.\n+\t* config/gcn/gcn-run.c (load_image): Likewise.\n+\t* config/aarch64/aarch64-sve.md (sve_ld1r<mode>): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_gen_adjusted_ldpstp): Likewise.\n+\t* config/aarch64/falkor-tag-collision-avoidance.c\n+\t(single_dest_per_chain): Likewise.\n+\t* config/nvptx/nvptx.c (nvptx_record_fndecl): Likewise.\n+\t* config/fr30/fr30.c (fr30_arg_partial_bytes): Likewise.\n+\t* config/rs6000/rs6000-string.c (expand_cmp_vec_sequence): Likewise.\n+\t* config/rs6000/rs6000-p8swap.c (replace_swapped_load_constant):\n+\tLikewise.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Likewise.\n+\t* config/rs6000/rs6000-logue.c\n+\t(rs6000_emit_probe_stack_range_stack_clash): Likewise.\n+\t* config/nds32/nds32-md-auxiliary.c (nds32_split_ashiftdi3): Likewise.\n+\tFix various other issues in the comment.\n+\n 2020-03-17  Mihail Ionescu  <mihail.ionescu@arm.com>\n \n \t* config/arm/t-rmprofile: create new multilib for"}, {"sha": "59661ef24e8e97cf7942128cc998b86e451cc039", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1,3 +1,8 @@\n+2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.c (resolve_overloaded_builtin): Fix up duplicated word\n+\tissue in a diagnostic message.\n+\n 2020-03-15  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* c.opt: Avoid redundancy in the help text."}, {"sha": "25020bf1415ed922b32d5b0cfc6752bb407ece65", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -7427,7 +7427,7 @@ resolve_overloaded_builtin (location_t loc, tree function,\n \t      warning_at (input_location, 0,\n \t\t\t  \"this target does not define a speculation barrier; \"\n \t\t\t  \"your program will still execute correctly, \"\n-\t\t\t  \"but incorrect speculation may not be be \"\n+\t\t\t  \"but incorrect speculation may not be \"\n \t\t\t  \"restricted\");\n \n \t    /* If the optional second argument is present, handle any side"}, {"sha": "a7ec77d5c85e9b11f545f3d13bb23ad32b734e14", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -6656,7 +6656,7 @@ pass_expand::execute (function *fun)\n   if (crtl->tail_call_emit)\n     fixup_tail_calls ();\n \n-  /* BB subdivision may have created basic blocks that are are only reachable\n+  /* BB subdivision may have created basic blocks that are only reachable\n      from unlikely bbs but not marked as such in the profile.  */\n   if (optimize)\n     propagate_unlikely_bbs_forward ();"}, {"sha": "f7a08935af689d3d552208856bb8ed9f97352f04", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -2477,7 +2477,7 @@\n )\n \n ;; This is used for vec_duplicate<mode>s from memory, but can also\n-;; be used by combine to optimize selects of a a vec_duplicate<mode>\n+;; be used by combine to optimize selects of a vec_duplicate<mode>\n ;; with zero.\n (define_insn \"sve_ld1r<mode>\"\n   [(set (match_operand:SVE_ALL 0 \"register_operand\" \"=w\")"}, {"sha": "285341ec07cb8b0c1c55a637ef6dfe1a05d3c59d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -21296,7 +21296,7 @@ aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n     {\n       base_off = 0x1000 - 1;\n       /* We must still make sure that the base offset is aligned with respect\n-\t to the address.  But it may may not be made any bigger.  */\n+\t to the address.  But it may not be made any bigger.  */\n       base_off -= (((base_off % msize) - (off_val_1 % msize)) + msize) % msize;\n     }\n "}, {"sha": "719df484ee61b2d570b73b9c9c54144e574aba61", "filename": "gcc/config/aarch64/falkor-tag-collision-avoidance.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Faarch64%2Ffalkor-tag-collision-avoidance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Faarch64%2Ffalkor-tag-collision-avoidance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ffalkor-tag-collision-avoidance.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -699,7 +699,7 @@ in_same_chain (rtx_insn *insn, rtx_insn *cand, unsigned regno)\n \n \n /* Callback function to traverse the tag map and drop loads that have the same\n-   destination and and in the same chain of occurrence.  Routine always returns\n+   destination and are in the same chain of occurrence.  Routine always returns\n    true to allow traversal through all of TAG_MAP.  */\n bool\n single_dest_per_chain (const rtx &t ATTRIBUTE_UNUSED, insn_info_list_t *v,"}, {"sha": "ffbb92134161a33e7cae779134406e532d9ac958", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -781,7 +781,7 @@ fr30_arg_partial_bytes (cumulative_args_t cum_v, const function_arg_info &arg)\n      are sufficient argument registers available (or if no registers\n      are needed because the parameter must be passed on the stack)\n      then return zero, as this parameter does not require partial\n-     register, partial stack stack space.  */\n+     register, partial stack space.  */\n   if (*cum + fr30_num_arg_regs (arg) <= FR30_NUM_ARG_REGS)\n     return 0;\n   "}, {"sha": "1e952e92b76bf5ccc58e7862e9fa8fa699192490", "filename": "gcc/config/gcn/gcn-run.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fgcn%2Fgcn-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fgcn%2Fgcn-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-run.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -575,7 +575,7 @@ found_main:;\n \t\tbreak;\n \t      case R_AMDGPU_REL64:\n \t\t/* FIXME\n-\t\t   LLD seems to emit REL64 where the the assembler has ABS64.\n+\t\t   LLD seems to emit REL64 where the assembler has ABS64.\n \t\t   This is clearly wrong because it's not what the compiler\n \t\t   is expecting.  Let's assume, for now, that it's a bug.\n \t\t   In any case, GCN kernels are always self contained and"}, {"sha": "6528832487e089eddbecef83ddb26a3c54ddd1c6", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -2224,7 +2224,7 @@ remove_partial_avx_dependency (void)\n       loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n \n       /* Generate a vxorps at entry of the nearest dominator for basic\n-\t blocks with conversions, which is in the the fake loop that\n+\t blocks with conversions, which is in the fake loop that\n \t contains the whole function, so that there is only a single\n \t vxorps in the whole function.   */\n       bb = nearest_common_dominator_for_set (CDI_DOMINATORS,"}, {"sha": "049ca4f4fdb0c72f86dc481a6499067a206d6c20", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -22928,7 +22928,7 @@ ix86_test_loading_unspec ()\n   /* Verify that the two mems are thus treated as equal.  */\n   ASSERT_TRUE (rtx_equal_p (dst, v0));\n \n-  /* Verify the the insn is recognized.  */\n+  /* Verify that the insn is recognized.  */\n   ASSERT_NE(-1, recog_memoized (insn));\n \n   /* Test of an UNSPEC_VOLATILE, which has its own enum values.  */"}, {"sha": "1776aba2d1715dc119c2f2c035baf22ef77ebfaa", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -70,7 +70,7 @@ DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY, \"sse_partial_reg_dependency\",\n    upper part undefined.  */\n DEF_TUNE (X86_TUNE_SSE_SPLIT_REGS, \"sse_split_regs\", m_ATHLON_K8)\n \n-/* X86_TUNE_PARTIAL_FLAG_REG_STALL: this flag disables use of of flags\n+/* X86_TUNE_PARTIAL_FLAG_REG_STALL: this flag disables use of flags\n    set by instructions affecting just some flags (in particular shifts).\n    This is because Core2 resolves dependencies on whole flags register\n    and such sequences introduce false dependency on previous instruction"}, {"sha": "cde14c838124e32ab8a2a913ba67e22e31d88751", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1916,7 +1916,7 @@ msp430_select_section (tree decl, int reloc, unsigned HOST_WIDE_INT align)\n     case SECCAT_RODATA_MERGE_CONST:\n       return default_elf_select_section (decl, reloc, align);\n \n-    /* The sections listed below are are not supported for MSP430.\n+    /* The sections listed below are not supported for MSP430.\n        They should not be generated, but in case they are, we use\n        default_select_section so they get placed in sections\n        the msp430 assembler and linker understand.  */"}, {"sha": "055a582d1adfaf1979d35583c89ed9e537e83042", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -3304,12 +3304,12 @@ nds32_split_ashiftdi3 (rtx dst, rtx src, rtx shiftamount)\n       ext_start = gen_reg_rtx (SImode);\n \n       /*\n-\t # In fact, we want to check shift amonut is great than or equal 32,\n-\t # but in some corner case, the shift amount might be very large value,\n-\t # however we've defined SHIFT_COUNT_TRUNCATED, so GCC think we've\n-\t # handle that correctly without any truncate.\n-\t # so check the the condition of (shiftamount & 32) is most\n-\t # safe way to do.\n+\t # In fact, we want to check shift amount is greater than or equal to\n+\t # 32, but in some corner case, the shift amount might be very large\n+\t # value, however we've defined SHIFT_COUNT_TRUNCATED, so GCC thinks\n+\t # we've handled that correctly without any truncate.\n+\t # So checking the condition of (shiftamount & 32) is the safest\n+\t # way to do it.\n \t if (shiftamount & 32)\n \t   dst_low_part = 0\n \t   dst_high_part = src_low_part << shiftamount & 0x1f"}, {"sha": "e3e84dfd4e41329cfc40abce1e71946bfadde71b", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -975,7 +975,7 @@ write_fn_proto_from_insn (std::stringstream &s, const char *name,\n }\n \n /* DECL is an external FUNCTION_DECL, make sure its in the fndecl hash\n-   table and and write a ptx prototype.  These are emitted at end of\n+   table and write a ptx prototype.  These are emitted at end of\n    compilation.  */\n \n static void"}, {"sha": "e59eff95cf4b11cd13f78b6bc97aac380525ed44", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -397,7 +397,7 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n \t(e.g. ISA_2_1_MASKS, ISA_3_0_MASKS_SERVER) and for a list of\n \tthe specific flags that are associated with each of the cpu\n \tchoices that can be specified as the target of a -mcpu=target\n-\tcompile option, or as the the target of a --with-cpu=target\n+\tcompile option, or as the target of a --with-cpu=target\n \tconfigure option.  Target flags that are specified in either\n \tof these two ways are considered \"implicit\" since the flags\n \tare not mentioned specifically by name."}, {"sha": "4cbf228eb79fdeb576bf72be1e6f1d4dc2fe9a03", "filename": "gcc/config/rs6000/rs6000-logue.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1547,7 +1547,7 @@ rs6000_emit_probe_stack_range_stack_clash (HOST_WIDE_INT orig_size,\n \n   /* If explicitly requested,\n        or the rounded size is not the same as the original size\n-       or the the rounded size is greater than a page,\n+       or the rounded size is greater than a page,\n      then we will need a copy of the original stack pointer.  */\n   if (rounded_size != orig_size\n       || rounded_size > probe_interval"}, {"sha": "3d5dc7d8aaec8912c8aeb340d059fe577cc3d79d", "filename": "gcc/config/rs6000/rs6000-p8swap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-p8swap.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1922,7 +1922,7 @@ replace_swapped_load_constant (swap_web_entry *insn_entry, rtx swap_insn)\n     XEXP (new_mem, 0) = base_reg;\n \n     /* Move the newly created insn ahead of the load insn.  */\n-    /* The last insn is the the insn that forced new_mem into a register.  */\n+    /* The last insn is the insn that forced new_mem into a register.  */\n     rtx_insn *force_insn = get_last_insn ();\n     /* Remove this insn from the end of the instruction sequence.  */\n     remove_insn (force_insn);"}, {"sha": "fe7177f10fdacd600fdd78a131dc9cd8f7b1960e", "filename": "gcc/config/rs6000/rs6000-string.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Frs6000%2Frs6000-string.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-string.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -679,7 +679,7 @@ expand_cmp_vec_sequence (unsigned HOST_WIDE_INT bytes_to_compare,\n \t bnl 6,.Lmismatch\n \n \t For the P8 LE case, we use lxvd2x and compare full 16 bytes\n-\t but then use use vgbbd and a shift to get two bytes with the\n+\t but then use vgbbd and a shift to get two bytes with the\n \t information we need in the correct order.\n \n \t VEC/VSX compare sequence if TARGET_P9_VECTOR:"}, {"sha": "2080c7d1d9b841d0c85daec64f830a57fef2b039", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -3956,7 +3956,7 @@ rs6000_option_override_internal (bool global_init_p)\n     }\n \n   /* Enable the default support for IEEE 128-bit floating point on Linux VSX\n-     sytems.  In GCC 7, we would enable the the IEEE 128-bit floating point\n+     sytems.  In GCC 7, we would enable the IEEE 128-bit floating point\n      infrastructure (-mfloat128-type) but not enable the actual __float128 type\n      unless the user used the explicit -mfloat128.  In GCC 8, we enable both\n      the keyword as well as the type.  */"}, {"sha": "15b3ccc99be6efd46acb7e1449e6e0de762e193c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1,3 +1,13 @@\n+2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* pt.c (tsubst): Fix up duplicated word issue in a diagnostic message.\n+\t(lookup_template_class_1, tsubst_expr): Fix up duplicated word issue\n+\tin a comment.\n+\t* parser.c (cp_parser_statement, cp_parser_linkage_specification,\n+\tcp_parser_placeholder_type_specifier,\n+\tcp_parser_constraint_requires_parens): Likewise.\n+\t* name-lookup.c (suggest_alternative_in_explicit_scope): Likewise.\n+\n 2020-03-15  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* coroutines.cc (co_await_expander): Fix indentation."}, {"sha": "d00bb5fbfa6ff981550d19f26009d9c918c99194", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -5938,7 +5938,7 @@ maybe_suggest_missing_header (location_t location, tree name, tree scope)\n /* Generate a name_hint at LOCATION for NAME, an IDENTIFIER_NODE for which name\n    lookup failed within the explicitly provided SCOPE.\n \n-   Suggest the the best meaningful candidates (if any), otherwise\n+   Suggest the best meaningful candidates (if any), otherwise\n    an empty name_hint is returned.  */\n \n name_hint"}, {"sha": "58a1bea33f3b330d2d96d59a0c9d3e5ef65641c4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -11346,8 +11346,8 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \t  /* This must be a namespace alias definition.  */\n \t  if (std_attrs != NULL_TREE)\n \t    {\n-\t      /*  Attributes should be parsed as part of the the\n-\t\t  declaration, so let's un-parse them.  */\n+\t      /* Attributes should be parsed as part of the\n+\t\t declaration, so let's un-parse them.  */\n \t      saved_tokens.rollback();\n \t      std_attrs = NULL_TREE;\n \t    }\n@@ -14554,7 +14554,7 @@ cp_parser_linkage_specification (cp_parser* parser)\n   /* We're now using the new linkage.  */\n   push_lang_context (linkage);\n \n-  /* Preserve the location of the the innermost linkage specification,\n+  /* Preserve the location of the innermost linkage specification,\n      tracking the locations of nested specifications via a local.  */\n   location_t saved_location\n     = parser->innermost_linkage_specification_location;\n@@ -18316,7 +18316,7 @@ cp_parser_placeholder_type_specifier (cp_parser *parser, location_t loc,\n     }\n \n   /* A type constraint constrains a contextually determined type or type\n-     parameter pack. However, the the Concepts TS does allow concepts\n+     parameter pack. However, the Concepts TS does allow concepts\n      to introduce non-type and template template parameters.  */\n   if (TREE_CODE (proto) != TYPE_DECL)\n     {\n@@ -27339,7 +27339,7 @@ cp_parser_constraint_requires_parens (cp_parser *parser, bool lambda_p)\n \n       case CPP_EQ:\n \t{\n-\t  /* An equal sign may be part of the the definition of a function,\n+\t  /* An equal sign may be part of the definition of a function,\n \t     and not an assignment operator, when parsing the expression\n \t     for a trailing requires-clause. For example:\n "}, {"sha": "c57d5707cfe18be57ab357709d6cff1b5db9aa28", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -9682,7 +9682,7 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n       if (entry)\n \treturn entry->spec;\n \n-      /* If the the template's constraints are not satisfied,\n+      /* If the template's constraints are not satisfied,\n          then we cannot form a valid type.\n \n          Note that the check is deferred until after the hash\n@@ -15688,7 +15688,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t    else if (TYPENAME_IS_CLASS_P (t) && !CLASS_TYPE_P (f))\n \t      {\n \t\tif (complain & tf_error)\n-\t\t  error (\"%qT resolves to %qT, which is is not a class type\",\n+\t\t  error (\"%qT resolves to %qT, which is not a class type\",\n \t\t\t t, f);\n \t\telse\n \t\t  return error_mark_node;\n@@ -17855,7 +17855,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n     case RANGE_FOR_STMT:\n       {\n \t/* Construct another range_for, if this is not a final\n-\t   substitution (for inside inside a generic lambda of a\n+\t   substitution (for inside a generic lambda of a\n \t   template).  Otherwise convert to a regular for.  */\n         tree decl, expr;\n         stmt = (processing_template_decl"}, {"sha": "64e7b003a482b510ac8d847bfc1f9c3be5becc63", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -6157,7 +6157,7 @@ but might be present in another OpenMP context in the same TU.\n This hook should check the launch dimensions provided for an OpenACC\n compute region, or routine.  Defaulted values are represented as -1\n and non-constant values as 0.  The @var{fn_level} is negative for the\n-function corresponding to the compute region.  For a routine is is the\n+function corresponding to the compute region.  For a routine it is the\n outermost level at which partitioned execution may be spawned.  The hook\n should verify non-default values.  If DECL is NULL, global defaults\n are being validated and unspecified defaults should be filled in.\n@@ -11858,7 +11858,7 @@ This function prepares to emit a comparison insn for the first compare in a\n  with @code{CC} for passing to @code{gen_ccmp_next} or @code{cbranch_optab}.\n  The insns to prepare the compare are saved in @var{prep_seq} and the compare\n  insns are saved in @var{gen_seq}.  They will be emitted when all the\n- compares in the the conditional comparision are generated without error.\n+ compares in the conditional comparision are generated without error.\n  @var{code} is the @code{rtx_code} of the compare for @var{op0} and @var{op1}.\n @end deftypefn\n "}, {"sha": "0c8606ae29cdd69b67a0ffb884e93bb59e5df105", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -32152,7 +32152,7 @@ dwarf2out_early_finish (const char *filename)\n      location related output removed and some LTO specific changes.\n      Some refactoring might make both smaller and easier to match up.  */\n \n-  /* Traverse the DIE's and add add sibling attributes to those DIE's\n+  /* Traverse the DIE's and add sibling attributes to those DIE's\n      that have children.  */\n   add_sibling_attributes (comp_unit_die ());\n   for (limbo_die_node *node = limbo_die_list; node; node = node->next)"}, {"sha": "99b13db8431d61d85b5000c52d5ae511f164ec55", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1,3 +1,13 @@\n+2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* array.c (gfc_check_iter_variable): Fix up duplicated word issue\n+\tin a comment.\n+\t* arith.c (gfc_arith_concat): Likewise.\n+\t* resolve.c (gfc_resolve_ref): Likewise.\n+\t* frontend-passes.c (matmul_lhs_realloc): Likewise.\n+\t* module.c (gfc_match_submodule, load_needed): Likewise.\n+\t* trans-expr.c (gfc_init_se): Likewise.\n+\n 2020-03-15  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* lang.opt: Avoid redundancy in the help text."}, {"sha": "7eb82d0ea5e91be641c0fe17d7fb499e86e12318", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -994,7 +994,7 @@ gfc_arith_concat (gfc_expr *op1, gfc_expr *op2, gfc_expr **resultp)\n   gfc_expr *result;\n   size_t len;\n \n-  /* By cleverly playing around with constructors, is is possible\n+  /* By cleverly playing around with constructors, it is possible\n      to get mismaching types here.  */\n   if (op1->ts.type != BT_CHARACTER || op2->ts.type != BT_CHARACTER\n       || op1->ts.kind != op2->ts.kind)"}, {"sha": "57972bc91760318014d5911738baa1163d3023b3", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1475,7 +1475,7 @@ static cons_stack *base;\n static bool check_constructor (gfc_constructor_base, bool (*) (gfc_expr *));\n \n /* Check an EXPR_VARIABLE expression in a constructor to make sure\n-   that that variable is an iteration variables.  */\n+   that that variable is an iteration variable.  */\n \n bool\n gfc_check_iter_variable (gfc_expr *expr)"}, {"sha": "d5d71b5fda479b7e36148fb3b23421df33c5f9be", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -3190,7 +3190,7 @@ matmul_lhs_realloc (gfc_expr *c, gfc_expr *a, gfc_expr *b,\n   gcc_assert (ar && ar->type == AR_FULL);\n \n   /* c comes in as a full ref.  Change it into a copy and make it into an\n-     element ref so it has the right form for for ALLOCATE.  In the same\n+     element ref so it has the right form for ALLOCATE.  In the same\n      switch statement, also generate the size comparison for the secod IF\n      statement.  */\n "}, {"sha": "73a3f202834fa2498cb4fffb79b52ac45a3d2464", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -743,7 +743,7 @@ gfc_match_use (void)\n    ordered pair whose first element is the ancestor module name and\n    whose second element is the submodule name. 'Submodule_name' is\n    used for the submodule filename and uses '@' as a separator, whilst\n-   the name of the symbol for the module uses '.' as a a separator.\n+   the name of the symbol for the module uses '.' as a separator.\n    The reasons for these choices are:\n    (i) To follow another leading brand in the submodule filenames;\n    (ii) Since '.' is not particularly visible in the filenames; and\n@@ -5044,7 +5044,7 @@ load_needed (pointer_info *p)\n   sym->attr.use_assoc = 1;\n \n   /* Unliked derived types, a STRUCTURE may share names with other symbols.\n-     We greedily converted the the symbol name to lowercase before we knew its\n+     We greedily converted the symbol name to lowercase before we knew its\n      type, so now we must fix it. */\n   if (sym->attr.flavor == FL_STRUCT)\n     sym->name = gfc_dt_upper_string (sym->name);"}, {"sha": "23b5a2b443914dabf2512eb43049ca19b89c8619", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -5318,7 +5318,7 @@ gfc_resolve_ref (gfc_expr *expr)\n \t    {\n \t      array_ref->u.ar.type = AR_ELEMENT;\n \t      expr->rank = 0;\n-\t      /* INQUIRY_LEN is not evaluated from the the rest of the expr\n+\t      /* INQUIRY_LEN is not evaluated from the rest of the expr\n \t\t but directly from the string length. This means that setting\n \t\t the array indices to one does not matter but might trigger\n \t\t a runtime bounds error. Suppress the check.  */"}, {"sha": "fdca9cc5539542c9c7f8240fa9aac48bf72a6ba0", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1639,7 +1639,7 @@ gfc_copy_se_loopvars (gfc_se * dest, gfc_se * src)\n \n    Care must be taken when multiple se are created with the same parent.\n    The child se must be kept in sync.  The easiest way is to delay creation\n-   of a child se until after after the previous se has been translated.  */\n+   of a child se until after the previous se has been translated.  */\n \n void\n gfc_init_se (gfc_se * se, gfc_se * parent)"}, {"sha": "13640e0fd36b67f8a707f9fa07b2e4b4bd7f8c90", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -2098,7 +2098,7 @@ get_string_length (tree str, unsigned eltsize, const vr_values *vr)\n   if (res.range.max < target_int_max ())\n     {\n       res.knownrange = true;\n-      /* When the the length of the longest string is known and not\n+      /* When the length of the longest string is known and not\n \t excessive use it as the likely length of the string(s).  */\n       res.range.likely = res.range.max;\n     }\n@@ -2478,7 +2478,7 @@ format_string (const directive &dir, tree arg, const vr_values *vr_values)\n \t     is bounded by MB_LEN_MAX * wcslen (S).  */\n \t  res.range.max *= target_mb_len_max ();\n \t  res.range.unlikely = res.range.max;\n-\t  /* It's likely that the the total length is not more that\n+\t  /* It's likely that the total length is not more that\n \t     2 * wcslen (S).*/\n \t  res.range.likely = res.range.min * 2;\n \n@@ -3337,7 +3337,7 @@ format_directive (const call_info &info,\n \t}\n       else if (!info.is_string_func ())\n \t{\n-\t  /* If the warning is for a file function function like fprintf\n+\t  /* If the warning is for a file function like fprintf\n \t     of printf with no destination size just print the computed\n \t     result.  */\n \t  if (min == max)"}, {"sha": "4d4f54947883e963b325a59f3af48b48b9d1ee8a", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -61,7 +61,7 @@\n    record the surrounding bit region, i.e. bits that could be stored in\n    a read-modify-write operation when storing the bit-field.  Record store\n    chains to different bases in a hash_map (m_stores) and make sure to\n-   terminate such chains when appropriate (for example when when the stored\n+   terminate such chains when appropriate (for example when the stored\n    values get used subsequently).\n    These stores can be a result of structure element initializers, array stores\n    etc.  A store_immediate_info object is recorded for every such store."}, {"sha": "a6a96353a8cd20df2b590533fdd4d634ab429c29", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -577,7 +577,7 @@ builtin_memref::offset_out_of_bounds (int strict, offset_int ooboff[3]) const\n   bool hib = wi::les_p (offrng[0], offrng[1]);\n   bool lob = !hib;\n \n-  /* Set to the size remaining in the object object after subtracting\n+  /* Set to the size remaining in the object after subtracting\n      REFOFF.  It may become negative as a result of negative indices\n      into the enclosing object, such as in:\n        extern struct S { char a[4], b[3], c[1]; } *p;\n@@ -1430,7 +1430,7 @@ builtin_access::overlap ()\n }\n \n /* Attempt to detect and diagnose an overlapping copy in a call expression\n-   EXPR involving an an access ACS to a built-in memory or string function.\n+   EXPR involving an access ACS to a built-in memory or string function.\n    Return true when one has been detected, false otherwise.  */\n \n static bool"}, {"sha": "4b0679137347ffc826f48daad165843818813663", "filename": "gcc/hsa-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fhsa-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fhsa-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-common.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -95,7 +95,7 @@ hsa_callable_function_p (tree fndecl)\n \t  && !lookup_attribute (\"oacc function\", DECL_ATTRIBUTES (fndecl)));\n }\n \n-/* Allocate HSA structures that are are used when dealing with different\n+/* Allocate HSA structures that are used when dealing with different\n    functions.  */\n \n void"}, {"sha": "dd1d23df2f75d07edf396e21fe99705a86dba63d", "filename": "gcc/input.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1296,7 +1296,7 @@ string_concat_db::record_string_concatenation (int num, location_t *locs)\n   m_table->put (key_loc, concat);\n }\n \n-/* Determine if LOC was the location of the the initial token of a\n+/* Determine if LOC was the location of the initial token of a\n    concatenation of string literal tokens.\n    If so, *OUT_NUM is written to with the number of tokens, and\n    *OUT_LOCS with the location of an array of locations of the\n@@ -2701,7 +2701,7 @@ test_lexer_string_locations_ucn4 (const line_table_case &case_)\n \n   /* Verify that cpp_interpret_string works.\n      The string should be encoded in the execution character\n-     set.  Assuming that that is UTF-8, we should have the following:\n+     set.  Assuming that is UTF-8, we should have the following:\n      -----------  ----  -----  -------  ----------------\n      Byte offset  Byte  Octal  Unicode  Source Column(s)\n      -----------  ----  -----  -------  ----------------"}, {"sha": "0b038ea57f1b46e0c0fb8cb6be60bbed5573e2d3", "filename": "gcc/ipa-param-manipulation.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fipa-param-manipulation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fipa-param-manipulation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.h?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -406,7 +406,7 @@ class ipa_param_body_adjustments\n \n   auto_vec<tree, 16> m_new_types;\n \n-  /* Vector of structures telling how to replace old parameters in in the\n+  /* Vector of structures telling how to replace old parameters in the\n      function body.  TODO: Even though there usually be only few, but should we\n      use a hash?  */\n "}, {"sha": "168c4c264430ef6dd8c4d5dfefabd424ed1c01ce", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -438,7 +438,7 @@ ipa_get_jf_ancestor_type_preserved (struct ipa_jump_func *jfunc)\n struct GTY(()) ipa_param_descriptor\n {\n   /* In analysis and modification phase, this is the PARAM_DECL of this\n-     parameter, in IPA LTO phase, this is the type of the the described\n+     parameter, in IPA LTO phase, this is the type of the described\n      parameter or NULL if not known.  Do not read this field directly but\n      through ipa_get_param and ipa_get_type as appropriate.  */\n   tree decl_or_type;"}, {"sha": "6891156b5aaa6cdc7d43e536a74e077e216eef0c", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1319,7 +1319,7 @@ record_operand_costs (rtx_insn *insn, enum reg_class *pref)\n \t  hard_reg_class = REGNO_REG_CLASS (other_regno);\n \t  bigger_hard_reg_class = ira_pressure_class_translate[hard_reg_class];\n \t  /* Target code may return any cost for mode which does not\n-\t     fit the the hard reg class (e.g. DImode for AREG on\n+\t     fit the hard reg class (e.g. DImode for AREG on\n \t     i386).  Check this and use a bigger class to get the\n \t     right cost.  */\n \t  if (bigger_hard_reg_class != NO_REGS"}, {"sha": "83069a9cf7fddfffd537cabc0fe28498317d4fab", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -227,7 +227,7 @@ struct lang_hooks_for_decls\n   bool (*ok_for_sibcall) (const_tree);\n \n   /* Return a tree for the actual data of an array descriptor - or NULL_TREE\n-     if original tree is not an array descriptor.  If the the second argument\n+     if original tree is not an array descriptor.  If the second argument\n      is true, only the TREE_TYPE is returned without generating a new tree.  */\n   tree (*omp_array_data) (tree, bool);\n "}, {"sha": "0caa4acd3b5c2672c4269d6c9754c2a20221be6e", "filename": "gcc/lra-spills.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Flra-spills.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Flra-spills.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-spills.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -434,7 +434,7 @@ remove_pseudos (rtx *loc, rtx_insn *insn)\n \t      lra_get_insn_recog_data (insn)->used_insn_alternative = -1;\n \t      if (lra_dump_file != NULL)\n \t\tfprintf (lra_dump_file,\n-\t\t\t \"Memory subreg was simplified in in insn #%u\\n\",\n+\t\t\t \"Memory subreg was simplified in insn #%u\\n\",\n \t\t\t INSN_UID (insn));\n \t    }\n \t}"}, {"sha": "b98e45de6a0e4c2273dce01896173cae2df89137", "filename": "gcc/omp-grid.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fomp-grid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fomp-grid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-grid.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1186,7 +1186,7 @@ grid_mark_tiling_parallels_and_loops (gimple_stmt_iterator *gsi,\n /* Given freshly copied top level kernel SEQ, identify the individual OMP\n    components, mark them as part of kernel, copy assignment leading to them\n    just before DST, remapping them using WI and adding new temporaries to\n-   TGT_BIND, and and return the loop that will be used for kernel dispatch.  */\n+   TGT_BIND, and return the loop that will be used for kernel dispatch.  */\n \n static gomp_for *\n grid_process_kernel_body_copy (grid_prop *grid, gimple_seq seq,"}, {"sha": "3379d6453db2e22a379a8a6113ca0b46f8ebe123", "filename": "gcc/read-rtl-function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fread-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fread-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl-function.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -532,7 +532,7 @@ function_reader::create_function ()\n \n }\n \n-/* Look within the the params of FNDECL for a param named NAME.\n+/* Look within the params of FNDECL for a param named NAME.\n    Return NULL_TREE if one isn't found.  */\n \n static tree\n@@ -969,7 +969,7 @@ function_reader::read_rtx_operand_u (rtx x, int idx)\n \n /* Read a name, looking for a match against a string found in array\n    STRINGS of size NUM_VALUES.\n-   Return the index of the the matched string, or emit an error.  */\n+   Return the index of the matched string, or emit an error.  */\n \n int\n function_reader::parse_enum_value (int num_values, const char *const *strings)\n@@ -1611,7 +1611,7 @@ function_reader::apply_fixups ()\n }\n \n /* Given a UID value, try to locate a pointer to the corresponding\n-   rtx_insn *, or NULL if if can't be found.  */\n+   rtx_insn *, or NULL if it can't be found.  */\n \n rtx_insn **\n function_reader::get_insn_by_uid (int uid)"}, {"sha": "4411e067ba865377b1040ff99c9c0372f98371e9", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -106,7 +106,7 @@ const enum rtx_class rtx_class[NUM_RTX_CODE] = {\n #undef DEF_RTL_EXPR\n };\n \n-/* Whether rtxs with the given code code store data in the hwint field.  */\n+/* Whether rtxs with the given code store data in the hwint field.  */\n \n #define RTX_CODE_HWINT_P_1(ENUM)\t\t\t\t\t\\\n     ((ENUM) == CONST_INT || (ENUM) == CONST_DOUBLE\t\t\t\\"}, {"sha": "f9368fab49f70f2bd3f4c3f00d992c4195d1dfb4", "filename": "gcc/selftest.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fselftest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fselftest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -95,7 +95,7 @@ assert_streq (const location &loc,\n }\n \n /* Implementation detail of ASSERT_STR_CONTAINS.\n-   Use strstr to determine if val_needle is is within val_haystack.\n+   Use strstr to determine if val_needle is within val_haystack.\n    ::selftest::pass if it is found.\n    ::selftest::fail if it is not found.  */\n "}, {"sha": "775db9ce888f31b21561cb25bc0ecf20d61341c9", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1380,7 +1380,7 @@ spread_components (sbitmap components)\n \n   todo.release ();\n \n-  /* Finally, mark everything not not needed both forwards and backwards.  */\n+  /* Finally, mark everything not needed both forwards and backwards.  */\n \n   bool did_changes = false;\n "}, {"sha": "7891260a2584b8ff6b028d41e6e52c33057cb2ed", "filename": "gcc/spellcheck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fspellcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Fspellcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -166,7 +166,7 @@ find_closest_string (const char *target,\n    to be meaningful, given a goal of length GOAL_LEN and a candidate of\n    length CANDIDATE_LEN.\n \n-   This is a third of the the length of the candidate or of the goal,\n+   This is a third of the length of the candidate or of the goal,\n    whichever is bigger.  */\n \n edit_distance_t"}, {"sha": "62e3d625a7f171976a394848371b8ca671162475", "filename": "gcc/target.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1519,7 +1519,7 @@ in its second parameter.\",\n void, (rtx_insn *insn, int x),\n hook_void_rtx_insn_int)\n \n-/* The following member value is a a function that returns true is\n+/* The following member value is a function that returns true is\n    dispatch schedling is supported in hardware and condition passed\n    as the second parameter is true.  */\n DEFHOOK\n@@ -1694,7 +1694,7 @@ DEFHOOK\n \"This hook should check the launch dimensions provided for an OpenACC\\n\\\n compute region, or routine.  Defaulted values are represented as -1\\n\\\n and non-constant values as 0.  The @var{fn_level} is negative for the\\n\\\n-function corresponding to the compute region.  For a routine is is the\\n\\\n+function corresponding to the compute region.  For a routine it is the\\n\\\n outermost level at which partitioned execution may be spawned.  The hook\\n\\\n should verify non-default values.  If DECL is NULL, global defaults\\n\\\n are being validated and unspecified defaults should be filled in.\\n\\\n@@ -2675,7 +2675,7 @@ DEFHOOK\n  with @code{CC} for passing to @code{gen_ccmp_next} or @code{cbranch_optab}.\\n\\\n  The insns to prepare the compare are saved in @var{prep_seq} and the compare\\n\\\n  insns are saved in @var{gen_seq}.  They will be emitted when all the\\n\\\n- compares in the the conditional comparision are generated without error.\\n\\\n+ compares in the conditional comparision are generated without error.\\n\\\n  @var{code} is the @code{rtx_code} of the compare for @var{op0} and @var{op1}.\",\n  rtx, (rtx_insn **prep_seq, rtx_insn **gen_seq, int code, tree op0, tree op1),\n  NULL)"}, {"sha": "79237ccf838c06c8b41ed38e1442281ec5e831db", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -832,7 +832,7 @@ shrink_wrap_one_built_in_call_with_conds (gcall *bi_call, vec <gimple *> conds,\n      4. [guard m]: [guard m+1] for 0 <= m <= n-2\n      5. [join]: [guard n-1]\n \n-     We punt for the more complex case case of [join] being old and\n+     We punt for the more complex case of [join] being old and\n      simply free the dominance info.  We also punt on postdominators,\n      which aren't expected to be available at this point anyway.  */\n   bi_call_bb = gimple_bb (bi_call);"}, {"sha": "851225e117176b33dbcd5448f02569103df2d572", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -1751,7 +1751,7 @@ create_ifn_alias_checks (tree *cond_expr,\n     return false;\n \n   /* Make sure that both DRs access the same pattern of bytes,\n-     with a constant length and and step.  */\n+     with a constant length and step.  */\n   poly_uint64 seg_len;\n   if (!operand_equal_p (dr_a.seg_len, dr_b.seg_len, 0)\n       || !poly_int_tree_p (dr_a.seg_len, &seg_len)"}, {"sha": "afff0ecd2e1dddda482e312c6bed5767a90d4a8c", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -2142,7 +2142,7 @@ sort_and_splice_var_accesses (tree var)\n /* Create a variable for the given ACCESS which determines the type, name and a\n    few other properties.  Return the variable declaration and store it also to\n    ACCESS->replacement.  REG_TREE is used when creating a declaration to base a\n-   default-definition SSA name on on in order to facilitate an uninitialized\n+   default-definition SSA name on in order to facilitate an uninitialized\n    warning.  It is used instead of the actual ACCESS type if that is not of a\n    gimple register type.  */\n "}, {"sha": "ee848fee2a8cd4f405ef57d013dabe2f08bda264", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -875,7 +875,7 @@ simplify_stmt_for_jump_threading (gimple *stmt,\n \t\t\t\t  class avail_exprs_stack *avail_exprs_stack,\n \t\t\t\t  basic_block bb ATTRIBUTE_UNUSED)\n {\n-  /* First query our hash table to see if the the expression is available\n+  /* First query our hash table to see if the expression is available\n      there.  A non-NULL return value will be either a constant or another\n      SSA_NAME.  */\n   tree cached_lhs =  avail_exprs_stack->lookup_avail_expr (stmt, false, true);"}, {"sha": "cc93f559286b465028f61d27b85dd0b380e9b297", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -88,7 +88,7 @@ static bitmap need_eh_cleanup;\n /* STMT is a statement that may write into memory.  Analyze it and\n    initialize WRITE to describe how STMT affects memory.\n \n-   Return TRUE if the the statement was analyzed, FALSE otherwise.\n+   Return TRUE if the statement was analyzed, FALSE otherwise.\n \n    It is always safe to return FALSE.  But typically better optimziation\n    can be achieved by analyzing more statements.  */\n@@ -147,7 +147,7 @@ initialize_ao_ref_for_dse (gimple *stmt, ao_ref *write)\n   return false;\n }\n \n-/* Given REF from the the alias oracle, return TRUE if it is a valid\n+/* Given REF from the alias oracle, return TRUE if it is a valid\n    memory reference for dead store elimination, false otherwise.\n \n    In particular, the reference must have a known base, known maximum"}, {"sha": "7de95b5888428d28c0b323a50fe92cd0fe864766", "filename": "gcc/tree-ssa-loop-split.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-loop-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-loop-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-split.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -770,7 +770,7 @@ find_vdef_in_loop (struct loop *loop)\n \n \t  /* Non-pure call statement is conservatively assumed to impact all\n \t     memory locations.  So place call statements ahead of other memory\n-\t     stores in the vector with an idea of of using them as shortcut\n+\t     stores in the vector with an idea of using them as shortcut\n \t     terminators to memory alias analysis.  */\n \t  if (gimple_code (stmt) == GIMPLE_CALL)\n \t    info->memory_stores.safe_push (stmt);"}, {"sha": "54ba035f5ee1cbd949b1b4bef835a8dfb3b16155", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -2477,7 +2477,7 @@ is_copysign_call_with_1 (gimple *call)\n }\n \n /* Try to expand the pattern x * copysign (1, y) into xorsign (x, y).\n-   This only happens when the the xorsign optab is defined, if the\n+   This only happens when the xorsign optab is defined, if the\n    pattern is not a xorsign pattern or if expansion fails FALSE is\n    returned, otherwise TRUE is returned.  */\n static bool"}, {"sha": "14f9550b094327b052463b0b1e7a0f8a8c67e9be", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -6373,7 +6373,7 @@ reassociate_bb (basic_block bb)\n \t\t  int width;\n \n \t\t  /* For binary bit operations, if there are at least 3\n-\t\t     operands and the last last operand in OPS is a constant,\n+\t\t     operands and the last operand in OPS is a constant,\n \t\t     move it to the front.  This helps ensure that we generate\n \t\t     (X & Y) & C rather than (X & C) & Y.  The former will\n \t\t     often match a canonical bit test when we get to RTL.  */"}, {"sha": "df4c1b6e74d416ae18ade8c5e1c1cafb06691c9d", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -4381,7 +4381,7 @@ handle_builtin_string_cmp (gimple_stmt_iterator *gsi, const vr_values *rvals)\n   int idx1 = get_stridx (arg1);\n   int idx2 = get_stridx (arg2);\n \n-  /* For strncmp set to the the value of the third argument if known.  */\n+  /* For strncmp set to the value of the third argument if known.  */\n   HOST_WIDE_INT bound = -1;\n   tree len = NULL_TREE;\n   /* Extract the strncmp bound.  */\n@@ -4965,7 +4965,7 @@ handle_store (gimple_stmt_iterator *gsi, bool *zero_write,\n   tree ssaname = NULL_TREE, lhs = gimple_assign_lhs (stmt);\n   tree rhs = gimple_assign_rhs1 (stmt);\n \n-  /* The offset of the first byte in LHS modified by the the store.  */\n+  /* The offset of the first byte in LHS modified by the store.  */\n   unsigned HOST_WIDE_INT offset = 0;\n \n   if (TREE_CODE (lhs) == MEM_REF"}, {"sha": "73e092c1d6c5b953444e6a5b83841ef441afcf44", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -6541,7 +6541,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, slp_tree slp_node,\n \t}\n       /* The epilogue code relies on the number of elements being a multiple\n \t of the group size.  The duplicate-and-interleave approach to setting\n-\t up the the initial vector does too.  */\n+\t up the initial vector does too.  */\n       if (!multiple_p (nunits_out, group_size))\n \t{\n \t  if (dump_enabled_p ())"}, {"sha": "ee4519363a7d0523dff6a539bd798c10569201bc", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -13663,7 +13663,7 @@ component_ref_size (tree ref, bool *interior_zero_length /* = NULL */)\n     }\n \n   /* BASE is the declared object of which MEMBER is either a member\n-     or that is is cast to REFTYPE (e.g., a char buffer used to store\n+     or that is cast to REFTYPE (e.g., a char buffer used to store\n      a REFTYPE object).  */\n   tree reftype = TREE_TYPE (TREE_OPERAND (ref, 0));\n   tree basetype = TREE_TYPE (base);"}, {"sha": "6c53fe1bf67cd8eee7084de0b20b8d217d70710a", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/700d4cb08c88aec37c13e21e63dd61fd698baabc/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=700d4cb08c88aec37c13e21e63dd61fd698baabc", "patch": "@@ -970,7 +970,7 @@ DEFTREECODE (SWITCH_EXPR, \"switch_expr\", tcc_statement, 2)\n      is a 'default' label.\n    Operand 1 is CASE_HIGH.  If it is NULL_TREE, the label is a simple\n      (one-value) case label.  If it is non-NULL_TREE, the case is a range.\n-   Operand 2 is CASE_LABEL, which is is the corresponding LABEL_DECL.\n+   Operand 2 is CASE_LABEL, which has the corresponding LABEL_DECL.\n    Operand 3 is CASE_CHAIN.  This operand is only used in tree-cfg.c to\n      speed up the lookup of case labels which use a particular edge in\n      the control flow graph.  */"}]}