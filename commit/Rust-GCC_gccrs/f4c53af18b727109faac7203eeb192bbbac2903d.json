{"sha": "f4c53af18b727109faac7203eeb192bbbac2903d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRjNTNhZjE4YjcyNzEwOWZhYWM3MjAzZWViMTkyYmJiYWMyOTAzZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2018-11-20T00:07:47Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-11-20T00:07:47Z"}, "message": "PR81878: fix --disable-bootstrap --enable-languages=ada\n\ngnattools build machinery uses just-build xgcc and xg++ as $(CC) and\n$(CXX) in native builds.  However, if C and C++ languages are not\nenabled, it won't find them.  So, enable C and C++ if Ada is enabled.\nMost of the time, this is probably no big deal: C is always enabled\nanyway, and C++ is already enabled for bootstraps.\n\nWe need not enable those for cross builds, however.  At first I just\ntook the logic from gnattools/configure, but found it to be lacking:\nit would use the just-built tools even in cross-back settings, whose\ntools just built for the host would not run on the build machine.  So\nI've narrowed down the test to rely on autoconf-detected cross-ness\n(build->host only), but also to ensure that host matches build, and\nthat target matches host.\n\nI've considered sourcing ada/config-lang.in from within\ngnattools/configure, and testing lang_requires as set by it, so as to\navoid a duplication of tests that ought to remain in sync, but decided\nit would be too fragile, as ada/config-lang.in does not expect srcdir\nto refer to gnattools.\n\nfor  gcc/ada/ChangeLog\n\n\tPR ada/81878\n\t* gcc-interface/config-lang.in (lang_requires): Set to \"c c++\"\n\twhen gnattools wants it.\n\nfor  gnattools/ChangeLog\n\n\tPR ada/81878\n\t* configure.ac (default_gnattools_target): Do not mistake\n\tjust-built host tools as native in cross-back toolchains.\n\t* configure: Rebuilt.\n\nFrom-SVN: r266290", "tree": {"sha": "44ef6ef0fd997ec5a8a98c4e447f94a4e7823ae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44ef6ef0fd997ec5a8a98c4e447f94a4e7823ae2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4c53af18b727109faac7203eeb192bbbac2903d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c53af18b727109faac7203eeb192bbbac2903d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4c53af18b727109faac7203eeb192bbbac2903d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c53af18b727109faac7203eeb192bbbac2903d/comments", "author": null, "committer": null, "parents": [{"sha": "502e897d1afa16df33326d255120d7cd15df9363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502e897d1afa16df33326d255120d7cd15df9363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502e897d1afa16df33326d255120d7cd15df9363"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "733bfe006e2a67ab2b005efcfdffd93806d6a1f6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c53af18b727109faac7203eeb192bbbac2903d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c53af18b727109faac7203eeb192bbbac2903d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f4c53af18b727109faac7203eeb192bbbac2903d", "patch": "@@ -1,3 +1,9 @@\n+2018-11-19  Alexandre Oliva <oliva@adacore.com>\n+\n+\tPR ada/81878\n+\t* gcc-interface/config-lang.in (lang_requires): Set to \"c c++\"\n+\twhen gnattools wants it.\n+\n 2018-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/cuintp.c (UI_From_gnu): Remove code for 32-bit hosts."}, {"sha": "8eacf7bb870e36e30ac31643b633ffc5719dbd07", "filename": "gcc/ada/gcc-interface/config-lang.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c53af18b727109faac7203eeb192bbbac2903d/gcc%2Fada%2Fgcc-interface%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c53af18b727109faac7203eeb192bbbac2903d/gcc%2Fada%2Fgcc-interface%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fconfig-lang.in?ref=f4c53af18b727109faac7203eeb192bbbac2903d", "patch": "@@ -34,6 +34,15 @@ gtfiles=\"\\$(srcdir)/ada/gcc-interface/ada-tree.h \\$(srcdir)/ada/gcc-interface/gi\n \n outputs=\"ada/gcc-interface/Makefile ada/Makefile\"\n \n+# gnattools native builds use both $(CC) and $(CXX), see PR81878.\n+# This is not too onerous: C is always enabled anyway, and C++ is\n+# always enabled for bootstrapping.  Use here the same logic used in\n+# gnattools/configure to decide whether to use -native or -cross tools\n+# for the build.\n+if test \"x$cross_compiling/$build/$host\" = \"xno/$host/$target\" ; then\n+  lang_requires=\"c c++\"\n+fi\n+\n target_libs=\"target-libada\"\n lang_dirs=\"gnattools\"\n "}, {"sha": "144cce05964245035fd50f1e87eab877d3805003", "filename": "gnattools/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c53af18b727109faac7203eeb192bbbac2903d/gnattools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c53af18b727109faac7203eeb192bbbac2903d/gnattools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2FChangeLog?ref=f4c53af18b727109faac7203eeb192bbbac2903d", "patch": "@@ -1,3 +1,10 @@\n+2018-11-19  Alexandre Oliva <oliva@adacore.com>\n+\n+\tPR ada/81878\n+\t* configure.ac (default_gnattools_target): Do not mistake\n+\tjust-built host tools as native in cross-back toolchains.\n+\t* configure: Rebuilt.\n+\n 2018-11-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/81878"}, {"sha": "c2d755b723a9b958c3d97b96393661d8f8487db9", "filename": "gnattools/configure", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c53af18b727109faac7203eeb192bbbac2903d/gnattools%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c53af18b727109faac7203eeb192bbbac2903d/gnattools%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2Fconfigure?ref=f4c53af18b727109faac7203eeb192bbbac2903d", "patch": "@@ -584,6 +584,7 @@ PACKAGE_URL=\n ac_unique_file=\"Makefile.in\"\n ac_subst_vars='LTLIBOBJS\n LIBOBJS\n+default_gnattools_target\n warn_cflags\n OBJEXT\n EXEEXT\n@@ -595,7 +596,6 @@ CC\n ADA_CFLAGS\n EXTRA_GNATTOOLS\n TOOLS_TARGET_PAIRS\n-default_gnattools_target\n LN_S\n target_noncanonical\n host_noncanonical\n@@ -2050,15 +2050,6 @@ $as_echo \"no, using $LN_S\" >&6; }\n fi\n \n \n-# Determine what to build for 'gnattools'\n-if test $build = $target ; then\n-  # Note that build=target is almost certainly the wrong test; FIXME\n-  default_gnattools_target=\"gnattools-native\"\n-else\n-  default_gnattools_target=\"gnattools-cross\"\n-fi\n-\n-\n # Target-specific stuff (defaults)\n TOOLS_TARGET_PAIRS=\n \n@@ -2134,6 +2125,8 @@ esac\n # From user or toplevel makefile.\n \n \n+# This is testing the CC passed from the toplevel Makefile, not the\n+# one we will select below.\n ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n@@ -2929,6 +2922,25 @@ if test \"x$GCC\" = \"xyes\"; then\n fi\n \n \n+# Determine what to build for 'gnattools'.  Test after the above,\n+# because testing for CC sets the final value of cross_compiling, even\n+# if we end up using a different CC.  We want to build\n+# gnattools-native when: (a) this is a native build, i.e.,\n+# cross_compiling=no, otherwise we know we cannot run binaries\n+# produced by the toolchain used for the build, not even the binaries\n+# created within ../gcc/; (b) build and host are the same, otherwise\n+# this is to be regarded as a cross build environment even if it seems\n+# that we can run host binaries; (c) host and target are the same,\n+# otherwise the tools in ../gcc/ generate code for a different\n+# platform.  If you change this test, be sure to adjust\n+# ../gcc/ada/gcc-interface/config-lang.in as well.\n+if test \"x$cross_compiling/$build/$host\" = \"xno/$host/$target\" ; then\n+  default_gnattools_target=\"gnattools-native\"\n+else\n+  default_gnattools_target=\"gnattools-cross\"\n+fi\n+\n+\n # Output: create a Makefile.\n ac_config_files=\"$ac_config_files Makefile\"\n "}, {"sha": "40d015ce8b0df76859340abe4882b76153acf91c", "filename": "gnattools/configure.ac", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c53af18b727109faac7203eeb192bbbac2903d/gnattools%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c53af18b727109faac7203eeb192bbbac2903d/gnattools%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2Fconfigure.ac?ref=f4c53af18b727109faac7203eeb192bbbac2903d", "patch": "@@ -51,15 +51,6 @@ ACX_NONCANONICAL_TARGET\n # Need to pass this down for now :-P\n AC_PROG_LN_S\n \n-# Determine what to build for 'gnattools'\n-if test $build = $target ; then\n-  # Note that build=target is almost certainly the wrong test; FIXME\n-  default_gnattools_target=\"gnattools-native\"\n-else\n-  default_gnattools_target=\"gnattools-cross\"\n-fi\n-AC_SUBST([default_gnattools_target])\n-\n # Target-specific stuff (defaults)\n TOOLS_TARGET_PAIRS=\n AC_SUBST(TOOLS_TARGET_PAIRS)\n@@ -135,13 +126,34 @@ esac\n # From user or toplevel makefile.\n AC_SUBST(ADA_CFLAGS)\n \n+# This is testing the CC passed from the toplevel Makefile, not the\n+# one we will select below.\n AC_PROG_CC\n warn_cflags=\n if test \"x$GCC\" = \"xyes\"; then\n   warn_cflags='$(GCC_WARN_CFLAGS)'\n fi\n AC_SUBST(warn_cflags)\n \n+# Determine what to build for 'gnattools'.  Test after the above,\n+# because testing for CC sets the final value of cross_compiling, even\n+# if we end up using a different CC.  We want to build\n+# gnattools-native when: (a) this is a native build, i.e.,\n+# cross_compiling=no, otherwise we know we cannot run binaries\n+# produced by the toolchain used for the build, not even the binaries\n+# created within ../gcc/; (b) build and host are the same, otherwise\n+# this is to be regarded as a cross build environment even if it seems\n+# that we can run host binaries; (c) host and target are the same,\n+# otherwise the tools in ../gcc/ generate code for a different\n+# platform.  If you change this test, be sure to adjust\n+# ../gcc/ada/gcc-interface/config-lang.in as well.\n+if test \"x$cross_compiling/$build/$host\" = \"xno/$host/$target\" ; then\n+  default_gnattools_target=\"gnattools-native\"\n+else\n+  default_gnattools_target=\"gnattools-cross\"\n+fi\n+AC_SUBST([default_gnattools_target])\n+\n # Output: create a Makefile.\n AC_CONFIG_FILES([Makefile])\n "}]}