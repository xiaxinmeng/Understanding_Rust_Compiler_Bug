{"sha": "f6bc1c4a12af78d96c951547d9693e6e805162da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiYzFjNGExMmFmNzhkOTZjOTUxNTQ3ZDk2OTNlNmU4MDUxNjJkYQ==", "commit": {"author": {"name": "Han Shen", "email": "shenhan@gcc.gnu.org", "date": "2013-05-07T21:33:01Z"}, "committer": {"name": "Han Shen", "email": "shenhan@gcc.gnu.org", "date": "2013-05-07T21:33:01Z"}, "message": "cfgexpand.c (record_or_union_type_has_array_p): New function.\n\n2013-05-07  Han Shen  <shenhan@google.com>\n\n    gcc/\n    * cfgexpand.c (record_or_union_type_has_array_p): New function.\n    (expand_used_vars): Add logic handling '-fstack-protector-strong'.\n    * common.opt (fstack-protector-strong): New option.\n    * doc/cpp.texi (__SSP_STRONG__): New builtin \"__SSP_STRONG__\".\n    * doc/invoke.texi (Optimization Options): Document\n    \"-fstack-protector-strong\".\n    * gcc.c (LINK_SSP_SPEC): Add 'fstack-protector-strong'.\n\n    gcc/testsuite/\n    * gcc.dg/fstack-protector-strong.c: New.\n    * g++.dg/fstack-protector-strong.C: New.\n\n    gcc/c-family/\n    * c-cppbuiltin.c (c_cpp_builtins): Added \"__SSP_STRONG__=3\".\n\nFrom-SVN: r198699", "tree": {"sha": "6334fbdf8bc242f31e69b43f0b15f26ac842169e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6334fbdf8bc242f31e69b43f0b15f26ac842169e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6bc1c4a12af78d96c951547d9693e6e805162da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bc1c4a12af78d96c951547d9693e6e805162da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6bc1c4a12af78d96c951547d9693e6e805162da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bc1c4a12af78d96c951547d9693e6e805162da/comments", "author": null, "committer": null, "parents": [{"sha": "703f140fb8dbe977cf5fabecd60e163267b6e227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703f140fb8dbe977cf5fabecd60e163267b6e227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703f140fb8dbe977cf5fabecd60e163267b6e227"}], "stats": {"total": 118, "additions": 108, "deletions": 10}, "files": [{"sha": "2cb6a745fbc00e053c288536799bb63ea3f367ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6bc1c4a12af78d96c951547d9693e6e805162da", "patch": "@@ -1,3 +1,13 @@\n+2013-05-07  Han Shen  <shenhan@google.com>\n+\n+\t* cfgexpand.c (record_or_union_type_has_array_p): New function.\n+\t(expand_used_vars): Add logic handling '-fstack-protector-strong'.\n+\t* common.opt (fstack-protector-strong): New option.\n+\t* doc/cpp.texi (__SSP_STRONG__): New builtin \"__SSP_STRONG__\".\n+\t* doc/invoke.texi (Optimization Options): Document\n+\t\"-fstack-protector-strong\".\n+\t* gcc.c (LINK_SSP_SPEC): Add 'fstack-protector-strong'.\n+\n 2013-05-06  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* config/mips/mips.c (mips_machine_reorg2): Return 0."}, {"sha": "44bad5c3771cacf04f48035be16bb13265b7fbbf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f6bc1c4a12af78d96c951547d9693e6e805162da", "patch": "@@ -1,3 +1,7 @@\n+2013-05-07  Han Shen  <shenhan@google.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Added \"__SSP_STRONG__=3\".\n+\n 2013-04-29  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* c-common.c (check_user_alignment): Emit error for negative values."}, {"sha": "0059626f6e34495c15292a74a871504e2ad4673f", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=f6bc1c4a12af78d96c951547d9693e6e805162da", "patch": "@@ -888,6 +888,8 @@ c_cpp_builtins (cpp_reader *pfile)\n   /* Make the choice of the stack protector runtime visible to source code.\n      The macro names and values here were chosen for compatibility with an\n      earlier implementation, i.e. ProPolice.  */\n+  if (flag_stack_protect == 3)\n+    cpp_define (pfile, \"__SSP_STRONG__=3\");\n   if (flag_stack_protect == 2)\n     cpp_define (pfile, \"__SSP_ALL__=2\");\n   else if (flag_stack_protect == 1)"}, {"sha": "c18727312407f4795e63031056aabe6516c55a78", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 68, "deletions": 7, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=f6bc1c4a12af78d96c951547d9693e6e805162da", "patch": "@@ -1291,6 +1291,12 @@ clear_tree_used (tree block)\n     clear_tree_used (t);\n }\n \n+enum {\n+  SPCT_FLAG_DEFAULT = 1,\n+  SPCT_FLAG_ALL = 2,\n+  SPCT_FLAG_STRONG = 3\n+};\n+\n /* Examine TYPE and determine a bit mask of the following features.  */\n \n #define SPCT_HAS_LARGE_CHAR_ARRAY\t1\n@@ -1360,7 +1366,8 @@ stack_protect_decl_phase (tree decl)\n   if (bits & SPCT_HAS_SMALL_CHAR_ARRAY)\n     has_short_buffer = true;\n \n-  if (flag_stack_protect == 2)\n+  if (flag_stack_protect == SPCT_FLAG_ALL\n+      || flag_stack_protect == SPCT_FLAG_STRONG)\n     {\n       if ((bits & (SPCT_HAS_SMALL_CHAR_ARRAY | SPCT_HAS_LARGE_CHAR_ARRAY))\n \t  && !(bits & SPCT_HAS_AGGREGATE))\n@@ -1514,6 +1521,27 @@ estimated_stack_frame_size (struct cgraph_node *node)\n   return size;\n }\n \n+/* Helper routine to check if a record or union contains an array field. */\n+\n+static int\n+record_or_union_type_has_array_p (const_tree tree_type)\n+{\n+  tree fields = TYPE_FIELDS (tree_type);\n+  tree f;\n+\n+  for (f = fields; f; f = DECL_CHAIN (f))\n+    if (TREE_CODE (f) == FIELD_DECL)\n+      {\n+\ttree field_type = TREE_TYPE (f);\n+\tif (RECORD_OR_UNION_TYPE_P (field_type)\n+\t    && record_or_union_type_has_array_p (field_type))\n+\t  return 1;\n+\tif (TREE_CODE (field_type) == ARRAY_TYPE)\n+\t  return 1;\n+      }\n+  return 0;\n+}\n+\n /* Expand all variables used in the function.  */\n \n static rtx\n@@ -1525,6 +1553,7 @@ expand_used_vars (void)\n   struct pointer_map_t *ssa_name_decls;\n   unsigned i;\n   unsigned len;\n+  bool gen_stack_protect_signal = false;\n \n   /* Compute the phase of the stack frame for this function.  */\n   {\n@@ -1576,6 +1605,24 @@ expand_used_vars (void)\n     }\n   pointer_map_destroy (ssa_name_decls);\n \n+  if (flag_stack_protect == SPCT_FLAG_STRONG)\n+    FOR_EACH_LOCAL_DECL (cfun, i, var)\n+      if (!is_global_var (var))\n+\t{\n+\t  tree var_type = TREE_TYPE (var);\n+\t  /* Examine local referenced variables that have their addresses taken,\n+\t     contain an array, or are arrays.  */\n+\t  if (TREE_CODE (var) == VAR_DECL\n+\t      && (TREE_CODE (var_type) == ARRAY_TYPE\n+\t\t  || TREE_ADDRESSABLE (var)\n+\t\t  || (RECORD_OR_UNION_TYPE_P (var_type)\n+\t\t      && record_or_union_type_has_array_p (var_type))))\n+\t    {\n+\t      gen_stack_protect_signal = true;\n+\t      break;\n+\t    }\n+\t}\n+\n   /* At this point all variables on the local_decls with TREE_USED\n      set are not associated with any block scope.  Lay them out.  */\n \n@@ -1662,12 +1709,26 @@ expand_used_vars (void)\n \tdump_stack_var_partition ();\n     }\n \n-  /* There are several conditions under which we should create a\n-     stack guard: protect-all, alloca used, protected decls present.  */\n-  if (flag_stack_protect == 2\n-      || (flag_stack_protect\n-\t  && (cfun->calls_alloca || has_protected_decls)))\n-    create_stack_guard ();\n+  switch (flag_stack_protect)\n+    {\n+    case SPCT_FLAG_ALL:\n+      create_stack_guard ();\n+      break;\n+\n+    case SPCT_FLAG_STRONG:\n+      if (gen_stack_protect_signal\n+\t  || cfun->calls_alloca || has_protected_decls)\n+\tcreate_stack_guard ();\n+      break;\n+\n+    case SPCT_FLAG_DEFAULT:\n+      if (cfun->calls_alloca || has_protected_decls)\n+\tcreate_stack_guard();\n+      break;\n+\n+    default:\n+      ;\n+    }\n \n   /* Assign rtl to each variable based on these partitions.  */\n   if (stack_vars_num > 0)"}, {"sha": "4c7933e587cc7a85887425795a14e65988c9f61a", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=f6bc1c4a12af78d96c951547d9693e6e805162da", "patch": "@@ -1942,6 +1942,10 @@ fstack-protector-all\n Common Report RejectNegative Var(flag_stack_protect, 2)\n Use a stack protection method for every function\n \n+fstack-protector-strong\n+Common Report RejectNegative Var(flag_stack_protect, 3)\n+Use a smart stack protection method for certain functions\n+\n fstack-usage\n Common RejectNegative Var(flag_stack_usage)\n Output stack usage information on a per-function basis"}, {"sha": "c605b3bcf5034339dd2dd7b21e7d6b6a0a1cc67d", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=f6bc1c4a12af78d96c951547d9693e6e805162da", "patch": "@@ -2349,6 +2349,10 @@ use.\n This macro is defined, with value 2, when @option{-fstack-protector-all} is\n in use.\n \n+@item __SSP_STRONG__\n+This macro is defined, with value 3, when @option{-fstack-protector-strong} is\n+in use.\n+\n @item __SANITIZE_ADDRESS__\n This macro is defined, with value 1, when @option{-fsanitize=address} is\n in use."}, {"sha": "f02c226e5a9d97f6d8bf22612b0ddbe557bc114e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f6bc1c4a12af78d96c951547d9693e6e805162da", "patch": "@@ -407,8 +407,8 @@ Objective-C and Objective-C++ Dialects}.\n -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops @gol\n -fshrink-wrap -fsignaling-nans -fsingle-precision-constant @gol\n -fsplit-ivs-in-unroller -fsplit-wide-types -fstack-protector @gol\n--fstack-protector-all -fstrict-aliasing -fstrict-overflow @gol\n--fthread-jumps -ftracer -ftree-bit-ccp @gol\n+-fstack-protector-all -fstack-protector-strong -fstrict-aliasing @gol\n+-fstrict-overflow -fthread-jumps -ftracer -ftree-bit-ccp @gol\n -ftree-builtin-call-dce -ftree-ccp -ftree-ch @gol\n -ftree-coalesce-inline-vars -ftree-coalesce-vars -ftree-copy-prop @gol\n -ftree-copyrename -ftree-dce -ftree-dominator-opts -ftree-dse @gol\n@@ -8957,6 +8957,12 @@ If a guard check fails, an error message is printed and the program exits.\n @opindex fstack-protector-all\n Like @option{-fstack-protector} except that all functions are protected.\n \n+@item -fstack-protector-strong\n+@opindex fstack-protector-strong\n+Like @option{-fstack-protector} but includes additional functions to\n+be protected --- those that have local array definitions, or have\n+references to local frame addresses.\n+\n @item -fsection-anchors\n @opindex fsection-anchors\n Try to reduce the number of symbolic address calculations by using"}, {"sha": "7aaf07dbe2cf0ef83cae6fb9934e8be8b1df3ed4", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f6bc1c4a12af78d96c951547d9693e6e805162da", "patch": "@@ -655,7 +655,7 @@ proper position among the other output files.  */\n #ifdef TARGET_LIBC_PROVIDES_SSP\n #define LINK_SSP_SPEC \"%{fstack-protector:}\"\n #else\n-#define LINK_SSP_SPEC \"%{fstack-protector|fstack-protector-all:-lssp_nonshared -lssp}\"\n+#define LINK_SSP_SPEC \"%{fstack-protector|fstack-protector-strong|fstack-protector-all:-lssp_nonshared -lssp}\"\n #endif\n #endif\n "}, {"sha": "2180495b38f1c5f11a7940fbb07cfd9efa98866e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6bc1c4a12af78d96c951547d9693e6e805162da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6bc1c4a12af78d96c951547d9693e6e805162da", "patch": "@@ -1,3 +1,9 @@\n+2013-04-16  Han Shen  <shenhan@google.com>\n+\n+\tTest cases for '-fstack-protector-strong'.\n+\t* gcc.dg/fstack-protector-strong.c: New.\n+\t* g++.dg/fstack-protector-strong.C: New.\n+\n 2013-05-07  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.target/aarch64/ands_1.c: New test. \n@@ -807,6 +813,7 @@\n \n \t* gcc.target/aarch64/negs.c: New.\n \n+>>>>>>> trunk\n 2013-04-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/56895"}]}