{"sha": "f8344bea51379fdab43668c99099b48d6d3e3681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgzNDRiZWE1MTM3OWZkYWI0MzY2OGM5OTA5OWI0OGQ2ZDNlMzY4MQ==", "commit": {"author": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-12T00:02:52Z"}, "committer": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-12T00:02:52Z"}, "message": "c-decl (finish_struct): Change type of min_align to unsigned.\n\na\ngcc/ChangeLog:\n\t* c-decl (finish_struct): Change type of min_align to unsigned.\n\t* cplus-dem.c (demangle_function_name): Change type of variable i to size_t;\n\tremove unused variable len.\n\t* dwarf2out.c (reg_save): Add explicit cast of -1 to unsigned and a\n\tcomment indicating this is proper behaviour.\n\t(reg_loc_descriptor): Remove redundant comparison of unsigned variable\n\treg >= 0.\n\t(based_loc_descr): Likewise.\n\t* enquire.c (bitpattern): Change type of variable i to unsigned.\n\t* final.c (output_asm_insn): Don't cast insn_noperands to unsigned.\n\t* flow.c (life_analysis): Change type of variable i to size_t;\n\tremove unused variable insn.\n\t* gcc.c (translate_options): Change type of variables optlen, arglen and\n\tcomplen to size_t.\n\t(input_filename_length): Change type to size_t.\n\t(do_spec_1): Change type of variable bufsize to size_t.\n\t(main): Change type of variables i and j to size_t;\n \tremove subblock local definition of variable i.\n\t(lookup_compiler): Change type of second argument to size_t;\n\tchange type of variable i to size_t.\n\t* genemit.c (output_init_mov_optab): Change type of variable i to size_t.\n\t* genopinit.c (get_insn): Change type of variable pindex to size_t.\n\t* genrecog.c (add_to_sequence): Change type of variable i to size_t.\n\t* global.c (global_alloc): Change type of variable i to size_t.\n\t* regclass.c (init_reg_sets): Change type of variables i and j to unsigned.\n\t* stmt.c (expand_end_bindings): Change type of variable i to size_t.\n\t(expand_end_case): Change type of variable count to size_t.\n\t* toplev.c (main): Change type of variable j to size_t.\n\t(set_target_switch): Change type of variable j to size_t.\n\t(print_switch_values): Change type of variable j to size_t;\n\tremove unused variable flags.\n\t* varasm.c (assemble_variable): Change type of variable align to size_t.\n\t(const_hash_rtx): Change type of variable i to size_t.\ngcc/cp/ChangeLog:\nSun Mar  8 17:13:38 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n\t* decl2.c (lang_decode_option): Change j's type to size_t.\n\t* tree.c (layout_vbasetypes): record_align and desired_align are of\n\ttype unsigned int; const_size and nonvirtual_const_size likewise.\n\nFrom-SVN: r18491", "tree": {"sha": "c9fd5e9d1380dfbaf5eb558fce6389ca8413a0d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9fd5e9d1380dfbaf5eb558fce6389ca8413a0d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8344bea51379fdab43668c99099b48d6d3e3681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8344bea51379fdab43668c99099b48d6d3e3681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8344bea51379fdab43668c99099b48d6d3e3681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8344bea51379fdab43668c99099b48d6d3e3681/comments", "author": null, "committer": null, "parents": [{"sha": "8506650392e4e0269e576c6331da763d79196e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8506650392e4e0269e576c6331da763d79196e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8506650392e4e0269e576c6331da763d79196e34"}], "stats": {"total": 127, "additions": 76, "deletions": 51}, "files": [{"sha": "35a2357544c36eb578293b82d984ec0495772849", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f8344bea51379fdab43668c99099b48d6d3e3681", "patch": "@@ -5834,7 +5834,7 @@ finish_struct (t, fieldlist, attributes)\n \t}\n       else if (TREE_TYPE (x) != error_mark_node)\n \t{\n-\t  int min_align = (DECL_PACKED (x) ? BITS_PER_UNIT\n+\t  unsigned int min_align = (DECL_PACKED (x) ? BITS_PER_UNIT\n \t\t\t   : TYPE_ALIGN (TREE_TYPE (x)));\n \t  /* Non-bit-fields are aligned for their type, except packed\n \t     fields which require only BITS_PER_UNIT alignment.  */"}, {"sha": "4fb17244c3a794e42ff299b83d46449fd96284f2", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=f8344bea51379fdab43668c99099b48d6d3e3681", "patch": "@@ -648,20 +648,20 @@ layout_vbasetypes (rec, max)\n   tree vbase_types = get_vbase_types (rec);\n \n #ifdef STRUCTURE_SIZE_BOUNDARY\n-  unsigned record_align = MAX (STRUCTURE_SIZE_BOUNDARY, TYPE_ALIGN (rec));\n+  unsigned int record_align = MAX (STRUCTURE_SIZE_BOUNDARY, TYPE_ALIGN (rec));\n #else\n-  unsigned record_align = MAX (BITS_PER_UNIT, TYPE_ALIGN (rec));\n+  unsigned int record_align = MAX (BITS_PER_UNIT, TYPE_ALIGN (rec));\n #endif\n-  int desired_align;\n+  unsigned int desired_align;\n \n   /* Record size so far is CONST_SIZE + VAR_SIZE bits,\n      where CONST_SIZE is an integer\n      and VAR_SIZE is a tree expression.\n      If VAR_SIZE is null, the size is just CONST_SIZE.\n      Naturally we try to avoid using VAR_SIZE.  */\n-  register unsigned const_size = 0;\n+  register unsigned int const_size = 0;\n   register tree var_size = 0;\n-  int nonvirtual_const_size;\n+  unsigned int nonvirtual_const_size;\n \n   CLASSTYPE_VBASECLASSES (rec) = vbase_types;\n \n@@ -809,7 +809,8 @@ layout_basetypes (rec, binfos)\n \n   for (i = 0; i < n_baseclasses; i++)\n     {\n-      int inc, desired_align, int_vbase_size;\n+      int inc, int_vbase_size;\n+      unsigned int desired_align;\n       register tree base_binfo = TREE_VEC_ELT (binfos, i);\n       register tree basetype = BINFO_TYPE (base_binfo);\n       tree decl, offset;"}, {"sha": "7c1f08ca0151a880afe68f5ffd3419213b985534", "filename": "gcc/cplus-dem.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcplus-dem.c?ref=f8344bea51379fdab43668c99099b48d6d3e3681", "patch": "@@ -2907,8 +2907,7 @@ demangle_function_name (work, mangled, declp, scan)\n      string *declp;\n      const char *scan;\n {\n-  int i;\n-  int len;\n+  size_t i;\n   string type;\n   const char *tem;\n \n@@ -2955,7 +2954,7 @@ demangle_function_name (work, mangled, declp, scan)\n \t{\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n-\t      len = declp->p - declp->b - 10;\n+\t      int len = declp->p - declp->b - 10;\n \t      if (strlen (optable[i].in) == len\n \t\t  && memcmp (optable[i].in, declp->b + 10, len) == 0)\n \t\t{"}, {"sha": "e8adb038c0d07f33eb38a2627ed69a7316c7c3e2", "filename": "gcc/enquire.c", "status": "modified", "additions": 61, "deletions": 37, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fenquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fenquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fenquire.c?ref=f8344bea51379fdab43668c99099b48d6d3e3681", "patch": "@@ -34,6 +34,9 @@\n    Changes by Stephen Moshier, installed Sep 93:\n    (FPROP): Recognize 80387 or 68881 XFmode format.\n \n+   Change by Manfred Hollstein, installed Mar 98:\n+   (bitpattern): Change type of variable i to unsigned int.\n+\n \n    COMPILING\n    With luck and a following wind, just the following will work:\n@@ -421,6 +424,13 @@\n \n #ifdef VERIFY\n #include \"limits.h\"\n+#endif\n+\n+#ifndef SYS_FLOAT_H_WRAP\n+#define SYS_FLOAT_H_WRAP 0\n+#endif\n+\n+#if SYS_FLOAT_H_WRAP || defined VERIFY\n #include \"float.h\"\n #endif\n \n@@ -477,7 +487,8 @@ Procedure endian ARGS((int bits_per_byte));\n int exponent ARGS((Long_double x, double *fract, int *exp));\n int floor_log ARGS((int base, Long_double x));\n Procedure f_define ARGS((char *desc, char *extra, char *sort, char *name,\n-\t\t\t int prec, Long_double val, char *mark));\n+\t\t\t int prec, Long_double val, Long_double req,\n+\t\t\t char *mark));\n Procedure i_define ARGS((char *desc, char *extra, char *sort, char *name,\n \t\t\t long val, long lim, long req, char *mark));\n Procedure u_define ARGS((char *desc, char *extra, char *sort, char *name,\n@@ -704,6 +715,8 @@ int main(argc, argv) int argc; char *argv[]; {\n \tif (F) {\n \t\tprintf (\"#ifndef _FLOAT_H___\\n\");\n \t\tprintf (\"#define _FLOAT_H___\\n\");\n+\t\tif (SYS_FLOAT_H_WRAP)\n+\t\t\tprintf (\"#include_next <float.h>\\n\");\n \t}\n #ifdef ID\n \tprintf(\"%sProduced on %s by enquire version %s, CWI, Amsterdam%s\\n\",\n@@ -772,7 +785,7 @@ int main(argc, argv) int argc; char *argv[]; {\n \t\t\tsize/=2;\n \t\t}\n \n-\t\tVprintf(\"%sMemory mallocatable ~= %ld Kbytes%s\\n\",\n+\t\tVprintf(\"%sMemory allocable ~= %ld Kbytes%s\\n\",\n \t\t\tco, (total+511)/512, oc);\n \t}\n #endif\n@@ -798,6 +811,8 @@ Procedure describe(description, extra) char *description, *extra; {\n \n Procedure i_define(desc, extra, sort, name, val, lim, req, mark)\n      char *desc, *extra, *sort, *name; long val, lim, req; char *mark; {\n+\tif (SYS_FLOAT_H_WRAP && F && val == req)\n+\t\treturn;\n \t/* Produce a #define for a signed int type */\n \tdescribe(desc, extra);\n \tprintf(\"#undef %s%s\\n\", sort, name);\n@@ -812,15 +827,13 @@ Procedure i_define(desc, extra, sort, name, val, lim, req, mark)\n \t} else {\n \t\tprintf(\"#define %s%s (%ld%s)\\n\", sort, name, val, mark);\n \t}\n-\t/* If VERIFY is not set, val and req are just the same value;\n-\t   if it is set, val is the value as calculated, and req is\n-\t   the #defined constant\n-\t*/\n+#ifdef VERIFY\n \tif (val != req) {\n \t\tprintf(\"%s*** Verify failed for above #define!\\n\", co);\n \t\tprintf(\"       Compiler has %ld for value%s\\n\\n\", req, oc);\n \t\tbugs++;\n \t}\n+#endif\n \tVprintf(\"\\n\");\n }\n \n@@ -830,17 +843,21 @@ Procedure u_define(desc, extra, sort, name, val, req, mark)\n \tdescribe(desc, extra);\n \tprintf(\"#undef %s%s\\n\", sort, name);\n \tprintf(\"#define %s%s %lu%s%s\\n\", sort, name, val, U, mark);\n+#ifdef VERIFY\n \tif (val != req) {\n \t\tprintf(\"%s*** Verify failed for above #define!\\n\", co);\n \t\tprintf(\"       Compiler has %lu for value%s\\n\\n\", req, oc);\n \t\tbugs++;\n \t}\n+#endif\n \tVprintf(\"\\n\");\n }\n \n-Procedure f_define(desc, extra, sort, name, precision, val, mark)\n+Procedure f_define(desc, extra, sort, name, precision, val, req, mark)\n      char *desc, *extra, *sort, *name; int precision;\n-     Long_double val; char *mark; {\n+     Long_double val, req; char *mark; {\n+\tif (SYS_FLOAT_H_WRAP && F && val == req)\n+\t\treturn;\n \t/* Produce a #define for a float/double/long double */\n \tdescribe(desc, extra);\n \tprintf (\"#undef %s%s\\n\", sort, name);\n@@ -960,7 +977,8 @@ char *f_rep(precision, val) int precision; Long_double val; {\n Procedure bitpattern(p, size) char *p; unsigned int size; {\n \t/* Printf the bit-pattern of p */\n \tchar c;\n-\tint i, j;\n+\tunsigned int i;\n+\tint j;\n \n \tfor (i=1; i<=size; i++) {\n \t\tc= *p;\n@@ -1590,18 +1608,20 @@ if (V) printf (\"%s%s %s %s%s\\n\", co, \"Type size_t is\",\n \n \tVprintf(\"\\n%sPROPERTIES OF POINTERS%s\\n\", co, oc);\n \n-\tif ((long) (char *) &variable == (long) (int *) &variable)\n+\tif ((long) (char *) &variable == (long) (int *) &variable) {\n \t\tVprintf(\"%sChar and int pointer formats seem identical%s\\n\",\n \t\t       co, oc);\n-\telse\n+\t} else {\n \t\tVprintf(\"%sChar and int pointer formats are different%s\\n\",\n \t\t       co, oc);\n-\tif ((long) (char *) &variable == (long) (function *) &variable)\n+\t}\n+\tif ((long) (char *) &variable == (long) (function *) &variable) {\n \t\tVprintf(\"%sChar and function pointer formats seem identical%s\\n\",\n \t\t       co, oc);\n-\telse\n+\t} else {\n \t\tVprintf(\"%sChar and function pointer formats are different%s\\n\",\n \t\t       co, oc);\n+\t}\n \n \tif (V) {\n \t\tif (\"abcd\"==\"abcd\")\n@@ -1745,7 +1765,6 @@ extern char *f_rep();\n #define UPROP\tusprop\n #define Uname\t\"USHRT\"\n \n-#ifdef VERIFY\n #ifdef SHRT_MAX\n #define I_MAX\t\tSHRT_MAX\n #endif\n@@ -1789,7 +1808,6 @@ extern char *f_rep();\n #ifdef FLT_MAX_10_EXP\n #define F_MAX_10_EXP\tFLT_MAX_10_EXP\n #endif\n-#endif /* VERIFY */\n \n #endif /* PASS1 */\n \n@@ -1831,7 +1849,6 @@ extern char *f_rep();\n #define UPROP\tuiprop\n #define Uname\t\"UINT\"\n \n-#ifdef VERIFY\n #ifdef INT_MAX\n #define I_MAX\t\tINT_MAX\n #endif\n@@ -1869,7 +1886,6 @@ extern char *f_rep();\n #ifdef DBL_MAX_10_EXP\n #define F_MAX_10_EXP\tDBL_MAX_10_EXP\n #endif\n-#endif /* VERIFY */\n \n #endif /* PASS2 */\n \n@@ -1917,7 +1933,6 @@ extern char *f_rep();\n #define UPROP\tulprop\n #define Uname\t\"ULONG\"\n \n-#ifdef VERIFY\n #ifdef LONG_MAX\n #define I_MAX\tLONG_MAX\n #endif\n@@ -1955,52 +1970,53 @@ extern char *f_rep();\n #ifdef LDBL_MAX_10_EXP\n #define F_MAX_10_EXP\tLDBL_MAX_10_EXP\n #endif\n-#endif /* VERIFY */\n \n #endif /* PASS3 */\n \n+#define UNDEFINED (-2)\n+\n #ifndef I_MAX\n-#define I_MAX\tint_max\n+#define I_MAX\t((unsigned long) UNDEFINED)\n #endif\n #ifndef I_MIN\n-#define I_MIN\tint_min\n+#define I_MIN\t((unsigned long) UNDEFINED)\n #endif\n #ifndef U_MAX\n-#define U_MAX\tu_max\n+#define U_MAX\t((unsigned long) UNDEFINED)\n #endif\n \n #ifndef F_RADIX\n-#define F_RADIX\t\tf_radix\n+#define F_RADIX\t\tUNDEFINED\n #endif\n #ifndef F_MANT_DIG\n-#define F_MANT_DIG\tf_mant_dig\n+#define F_MANT_DIG\tUNDEFINED\n #endif\n #ifndef F_DIG\n-#define F_DIG\t\tf_dig\n+#define F_DIG\t\tUNDEFINED\n #endif\n #ifndef F_ROUNDS\n-#define F_ROUNDS\tf_rounds\n+#define F_ROUNDS\tUNDEFINED\n #endif\n #ifndef F_EPSILON\n-#define F_EPSILON\tf_epsilon\n+#define F_EPSILON\t((Number) UNDEFINED)\n #endif\n #ifndef F_MIN_EXP\n-#define F_MIN_EXP\tf_min_exp\n+#define F_MIN_EXP\tUNDEFINED\n #endif\n #ifndef F_MIN\n-#define F_MIN\t\tf_min\n+#define F_MIN\t\t((Number) UNDEFINED)\n #endif\n #ifndef F_MIN_10_EXP\n-#define F_MIN_10_EXP\tf_min_10_exp\n+#define F_MIN_10_EXP\tUNDEFINED\n #endif\n #ifndef F_MAX_EXP\n-#define F_MAX_EXP\tf_max_exp\n+#define F_MAX_EXP\tUNDEFINED\n #endif\n #ifndef F_MAX\n-#define F_MAX\t\tf_max\n+#define F_MAX\t\t((Number) UNDEFINED)\n #endif\n #ifndef F_MAX_10_EXP\n-#define F_MAX_10_EXP\tf_max_10_exp\n+#define F_MAX_10_EXP\tUNDEFINED\n #endif\n \n #ifndef VERIFY\n@@ -2405,7 +2421,9 @@ int FPROP(bits_per_byte) int bits_per_byte; {\n \t}\n \tif (PASS == 1) { /* only for FLT */\n \t\tflt_rounds= f_rounds;\n-\t\tif (F)\n+\t\t/* Prefer system float.h definition of F_ROUNDS,\n+\t\t   since it's more likely to be right than our \"1\".  */\n+\t\tif (F && (!SYS_FLOAT_H_WRAP || F_ROUNDS == UNDEFINED))\n \t\t  i_define(D_FLT_ROUNDS, \"\", \"FLT\", \"_ROUNDS\",\n \t\t\t   (long) f_rounds, 1L, (long) F_ROUNDS, \"\");\n \t} else if (f_rounds != flt_rounds) {\n@@ -2492,7 +2510,9 @@ int FPROP(bits_per_byte) int bits_per_byte; {\n \n \t/* Possible loss of precision warnings here from non-stdc compilers */\n \tif (F) f_define(D_EPSILON, thing,\n-\t\t\tFname, \"_EPSILON\", digs, (Long_double) f_epsilon, MARK);\n+\t\t\tFname, \"_EPSILON\", digs,\n+\t\t\t(Long_double) f_epsilon,\n+\t\t\t(Long_double) F_EPSILON, MARK);\n \tif (V || F) F_check(digs, (Long_double) f_epsilon);\n \tUnexpected(21);\n \tif (F) Validate(digs, (Long_double) f_epsilon, (Long_double) F_EPSILON,\n@@ -2570,7 +2590,9 @@ int FPROP(bits_per_byte) int bits_per_byte; {\n \t/* Possible loss of precision warnings here from non-stdc compilers */\n \tif (setjmp(lab) == 0) {\n \t\tif (F) f_define(D_MIN, thing,\n-\t\t\t\tFname, \"_MIN\", digs, (Long_double) f_min, MARK);\n+\t\t\t\tFname, \"_MIN\", digs,\n+\t\t\t\t(Long_double) f_min,\n+\t\t\t\t(Long_double) F_MIN, MARK);\n \t\tif (V || F) F_check(digs, (Long_double) f_min);\n \t} else {\n \t\teek_a_bug(\"xxx_MIN caused a trap\");\n@@ -2664,7 +2686,9 @@ int FPROP(bits_per_byte) int bits_per_byte; {\n \tif (setjmp(lab)==0) {\n \t/* Possible loss of precision warnings here from non-stdc compilers */\n \t\tif (F) f_define(D_MAX, thing,\n-\t\t\t\tFname, \"_MAX\", digs, (Long_double) f_max, MARK);\n+\t\t\t\tFname, \"_MAX\", digs,\n+\t\t\t\t(Long_double) f_max,\n+\t\t\t\t(Long_double) F_MAX, MARK);\n \t\tif (V || F) F_check(digs, (Long_double) f_max);\n \t} else {\n \t\teek_a_bug(\"xxx_MAX caused a trap\");"}, {"sha": "a97c27d662f6bd47b1580c26b81941598c94b2eb", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=f8344bea51379fdab43668c99099b48d6d3e3681", "patch": "@@ -293,7 +293,7 @@ global_alloc (file)\n #endif\n        || FRAME_POINTER_REQUIRED);\n \n-  register int i;\n+  register size_t i;\n   rtx x;\n \n   max_allocno = 0;"}, {"sha": "3432c79124f039ea2504665f0e012884c2d675e7", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=f8344bea51379fdab43668c99099b48d6d3e3681", "patch": "@@ -328,7 +328,7 @@ init_reg_sets ()\n static void\n init_reg_sets_1 ()\n {\n-  register int i, j;\n+  register unsigned int i, j;\n \n   /* This macro allows the fixed or call-used registers\n      to depend on target flags.  */"}, {"sha": "b204b43c682a9e5d28c36ebca669ce1e9e435c42", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8344bea51379fdab43668c99099b48d6d3e3681/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f8344bea51379fdab43668c99099b48d6d3e3681", "patch": "@@ -1142,7 +1142,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n      int dont_output_data;\n {\n   register char *name;\n-  int align;\n+  unsigned int align;\n   tree size_tree;\n   int reloc = 0;\n   enum in_section saved_in_section;\n@@ -3216,7 +3216,8 @@ const_hash_rtx (mode, x)\n      enum machine_mode mode;\n      rtx x;\n {\n-  register int hi, i;\n+  register int hi;\n+  register size_t i;\n \n   struct rtx_const value;\n   decode_rtx_const (mode, x, &value);"}]}