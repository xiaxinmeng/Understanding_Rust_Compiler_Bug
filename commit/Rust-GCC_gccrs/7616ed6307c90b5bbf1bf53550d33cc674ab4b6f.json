{"sha": "7616ed6307c90b5bbf1bf53550d33cc674ab4b6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxNmVkNjMwN2M5MGI1YmJmMWJmNTM1NTBkMzNjYzY3NGFiNGI2Zg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-26T17:34:33Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-29T15:10:09Z"}, "message": "d: Return the correct value for C++ constructor calls (PR101664)\n\nC++ constructors return void, even though the front-end semantic treats\nthem as implicitly returning `this'.  To handle this correctly, the\nobject reference is cached and used as the result of the expression.\n\n\tPR d/101664\n\ngcc/d/ChangeLog:\n\n\t* expr.cc (ExprVisitor::visit (CallExp *)): Use object expression as\n\tresult for C++ constructor calls.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/extern-c++/extern-c++.exp: New.\n\t* gdc.dg/extern-c++/pr101664.d: New test.\n\t* gdc.dg/extern-c++/pr101664_1.cc: New test.", "tree": {"sha": "54b64dfacbd3bd53468ab91c176a033cb390383a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54b64dfacbd3bd53468ab91c176a033cb390383a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c9b7408dc578cb2ae142a5c1b724c183497bdb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9b7408dc578cb2ae142a5c1b724c183497bdb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c9b7408dc578cb2ae142a5c1b724c183497bdb2"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "85269c6b2bec710cf82384c1ea6e1bf0a37e7127", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=7616ed6307c90b5bbf1bf53550d33cc674ab4b6f", "patch": "@@ -1751,6 +1751,7 @@ class ExprVisitor : public Visitor\n     tree callee = NULL_TREE;\n     tree object = NULL_TREE;\n     tree cleanup = NULL_TREE;\n+    tree returnvalue = NULL_TREE;\n     TypeFunction *tf = NULL;\n \n     /* Calls to delegates can sometimes look like this.  */\n@@ -1819,6 +1820,15 @@ class ExprVisitor : public Visitor\n \t\telse\n \t\t  fndecl = build_address (fndecl);\n \n+\t\t/* C++ constructors return void, even though front-end semantic\n+\t\t   treats them as implicitly returning `this'.  Set returnvalue\n+\t\t   to override the result of this expression.  */\n+\t\tif (fd->isCtorDeclaration () && fd->linkage == LINKcpp)\n+\t\t  {\n+\t\t    thisexp = d_save_expr (thisexp);\n+\t\t    returnvalue = thisexp;\n+\t\t  }\n+\n \t\tcallee = build_method_call (fndecl, thisexp, fd->type);\n \t      }\n \t  }\n@@ -1885,6 +1895,9 @@ class ExprVisitor : public Visitor\n        build the call expression.  */\n     tree exp = d_build_call (tf, callee, object, e->arguments);\n \n+    if (returnvalue != NULL_TREE)\n+      exp = compound_expr (exp, returnvalue);\n+\n     if (tf->isref)\n       exp = build_deref (exp);\n "}, {"sha": "d38f993faaf0f0450d725af76b5b276ce0ad2079", "filename": "gcc/testsuite/gdc.dg/extern-c++/extern-c++.exp", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f/gcc%2Ftestsuite%2Fgdc.dg%2Fextern-c%2B%2B%2Fextern-c%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f/gcc%2Ftestsuite%2Fgdc.dg%2Fextern-c%2B%2B%2Fextern-c%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fextern-c%2B%2B%2Fextern-c%2B%2B.exp?ref=7616ed6307c90b5bbf1bf53550d33cc674ab4b6f", "patch": "@@ -0,0 +1,39 @@\n+#   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Load support procs.\n+load_lib gdc-dg.exp\n+\n+# We are mixing D and C++ code, need to pull in libstdc++\n+global GDC_INCLUDE_CXX_FLAGS\n+set GDC_INCLUDE_CXX_FLAGS 1\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+if [check_no_compiler_messages extern_c++_tests assembly {\n+   // C++\n+   int main() { return 0; }\n+}] {\n+    gdc-dg-runtest [lsort \\\n+\t   [glob -nocomplain $srcdir/$subdir/*.d ] ] \"\" \"\"\n+}\n+\n+set GDC_INCLUDE_CXX_FLAGS 0\n+\n+# All done.\n+dg-finish"}, {"sha": "57b3d90358230eea5943f28fc4828f2eabbf280f", "filename": "gcc/testsuite/gdc.dg/extern-c++/pr101664.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f/gcc%2Ftestsuite%2Fgdc.dg%2Fextern-c%2B%2B%2Fpr101664.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f/gcc%2Ftestsuite%2Fgdc.dg%2Fextern-c%2B%2B%2Fpr101664.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fextern-c%2B%2B%2Fpr101664.d?ref=7616ed6307c90b5bbf1bf53550d33cc674ab4b6f", "patch": "@@ -0,0 +1,15 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101664\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+// { dg-additional-sources \"pr101664_1.cc\" }\n+\n+extern(C++) struct S101664\n+{\n+    int i;\n+    this(int);\n+}\n+\n+void main()\n+{\n+    assert(S101664(1).i == 1);\n+}"}, {"sha": "066e784293d20f50eae8ce6a445dd480a7e29335", "filename": "gcc/testsuite/gdc.dg/extern-c++/pr101664_1.cc", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f/gcc%2Ftestsuite%2Fgdc.dg%2Fextern-c%2B%2B%2Fpr101664_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7616ed6307c90b5bbf1bf53550d33cc674ab4b6f/gcc%2Ftestsuite%2Fgdc.dg%2Fextern-c%2B%2B%2Fpr101664_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fextern-c%2B%2B%2Fpr101664_1.cc?ref=7616ed6307c90b5bbf1bf53550d33cc674ab4b6f", "patch": "@@ -0,0 +1,10 @@\n+struct S101664\n+{\n+  int i;\n+  S101664 (int n);\n+};\n+\n+S101664::S101664 (int n)\n+    : i(n)\n+{\n+}"}]}