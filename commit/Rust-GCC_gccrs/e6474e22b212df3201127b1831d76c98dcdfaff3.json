{"sha": "e6474e22b212df3201127b1831d76c98dcdfaff3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY0NzRlMjJiMjEyZGYzMjAxMTI3YjE4MzFkNzZjOThkY2RmYWZmMw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-04-22T13:50:36Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-04-22T13:56:51Z"}, "message": "testsuite: [arm/cde] Include arm_cde.h and arm_mve.h in arm_v8*m_main_cde*\n\nSince arm_cde.h includes stdint.h, its use requires the presence of\nthe right gnu/stub-*.h, so make sure to include it when checking the\narm_v8*m_main_cde* effective targets, otherwise we can decide CDE is\nsupported while it's not really (all tests that use arm_v8m_main_cde*\nalso include arm_cde.h aynway).\n\nSimilarly for the effective targets that also require MVE.\n\nThis makes several tests unsupported rather than fail.\n\n2020-04-22  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp (arm_v8m_main_cde, arm_v8m_main_cde_fp)\n\t(arm_v8_1m_main_cde_mve, arm_v8_1m_main_cde_mve_fp): Include\n\tarm_cde.h and arm_mve.h as ineeded.", "tree": {"sha": "0342878f35d338d51f45990052adcf7fcd994c27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0342878f35d338d51f45990052adcf7fcd994c27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6474e22b212df3201127b1831d76c98dcdfaff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6474e22b212df3201127b1831d76c98dcdfaff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6474e22b212df3201127b1831d76c98dcdfaff3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6474e22b212df3201127b1831d76c98dcdfaff3/comments", "author": null, "committer": null, "parents": [{"sha": "55ba33ccd3890036c5bc0b62b279a6d103da7d99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ba33ccd3890036c5bc0b62b279a6d103da7d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55ba33ccd3890036c5bc0b62b279a6d103da7d99"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "185a58ac309d735ab926c517da222a2c04d05999", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6474e22b212df3201127b1831d76c98dcdfaff3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6474e22b212df3201127b1831d76c98dcdfaff3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6474e22b212df3201127b1831d76c98dcdfaff3", "patch": "@@ -1,3 +1,10 @@\n+2020-04-22  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+        gcc/testsuite/\n+        * lib/target-supports.exp (arm_v8m_main_cde, arm_v8m_main_cde_fp)\n+        (arm_v8_1m_main_cde_mve, arm_v8_1m_main_cde_mve_fp): Include\n+        arm_cde.h and arm_mve.h as ineeded.\n+\n 2020-04-22  Christophe Lyon  <christophe.lyon@linaro.org>\n \n         * lib/target-supports.exp"}, {"sha": "9d2634a1da25fcb1e68baf0388a902c3147e5590", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6474e22b212df3201127b1831d76c98dcdfaff3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6474e22b212df3201127b1831d76c98dcdfaff3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=e6474e22b212df3201127b1831d76c98dcdfaff3", "patch": "@@ -5140,21 +5140,25 @@ proc add_options_for_arm_v8_2a_bf16_neon { flags } {\n #   /* { dg-add-options arm_v8m_main_cde } */\n # The tests are valid for Arm.\n \n-foreach { armfunc armflag armdef } {\n+foreach { armfunc armflag armdef arminc } {\n \tarm_v8m_main_cde\n \t\t\"-march=armv8-m.main+cdecp0+cdecp6 -mthumb\"\n \t\t\"defined (__ARM_FEATURE_CDE)\"\n+\t\t\"\"\n \tarm_v8m_main_cde_fp\n \t\t\"-march=armv8-m.main+fp+cdecp0+cdecp6 -mthumb -mfpu=auto\"\n \t\t\"defined (__ARM_FEATURE_CDE) && defined (__ARM_FP)\"\n+\t\t\"\"\n \tarm_v8_1m_main_cde_mve\n \t\t\"-march=armv8.1-m.main+mve+cdecp0+cdecp6 -mthumb -mfpu=auto\"\n \t\t\"defined (__ARM_FEATURE_CDE) && defined (__ARM_FEATURE_MVE)\"\n+\t\t\"#include <arm_mve.h>\"\n \tarm_v8_1m_main_cde_mve_fp\n \t\t\"-march=armv8.1-m.main+mve.fp+cdecp0+cdecp6 -mthumb -mfpu=auto\"\n \t\t\"defined (__ARM_FEATURE_CDE) || __ARM_FEATURE_MVE == 3\"\n+\t\t\"#include <arm_mve.h>\"\n \t} {\n-    eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef ] {\n+    eval [string map [list FUNC $armfunc FLAG $armflag DEF $armdef INC $arminc ] {\n \tproc check_effective_target_FUNC_ok_nocache { } {\n \t    global et_FUNC_flags\n \t    set et_FUNC_flags \"\"\n@@ -5167,6 +5171,8 @@ foreach { armfunc armflag armdef } {\n \t\t#if !(DEF)\n \t\t#error \"DEF failed\"\n \t\t#endif\n+\t\t#include <arm_cde.h>\n+\t\tINC\n \t    } \"FLAG\"] } {\n \t\t    set et_FUNC_flags \"FLAG\"\n \t\t    return 1"}]}