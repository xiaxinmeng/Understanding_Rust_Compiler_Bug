{"sha": "0e2b0f75cc7541b82abcb78494f20402b89e13b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUyYjBmNzVjYzc1NDFiODJhYmNiNzg0OTRmMjA0MDJiODllMTNiNg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2012-05-16T20:11:46Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2012-05-16T20:11:46Z"}, "message": "Fix var tracking ICE due to reorg.\n\nIf during reorg we delete a code label, and as a result we decide to\ndelete all the code following that label, we hit this condition in\njump.c:delete_related_insns():\n\n  if (was_code_label && prev && BARRIER_P (prev))                                \n\nwhich passes and then we proceed to delete insns until we hit a\nnon-deleted code label.\n\nDuring this traversal, we can end up deleting a CALL, but in doing so\nwe will leave the var tracking note for the call arguments around.\n\nLater in dwarf2_var_location() we will ICE, because we can't find the\nCALL when we search backwards for it.\n\nThe note searching scheme in the fix below is cribbed from code in\ntry_split() which has to handle a similar problem.\n\ngcc/\n\n\t* jump.c (delete_related_insns): If we remove a CALL, make sure\n\twe delete it's NOTE_INSN_CALL_ARG_LOCATION note too.\n\nFrom-SVN: r187606", "tree": {"sha": "b8d49404e63d907a5eb23b0906cca7c4c3e8e084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8d49404e63d907a5eb23b0906cca7c4c3e8e084"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e2b0f75cc7541b82abcb78494f20402b89e13b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2b0f75cc7541b82abcb78494f20402b89e13b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e2b0f75cc7541b82abcb78494f20402b89e13b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2b0f75cc7541b82abcb78494f20402b89e13b6/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e10f759e193e815c77411b6db93ccca2504878e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10f759e193e815c77411b6db93ccca2504878e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10f759e193e815c77411b6db93ccca2504878e8"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "6715f30cb7a19b22400c16f939506688da549a2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2b0f75cc7541b82abcb78494f20402b89e13b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2b0f75cc7541b82abcb78494f20402b89e13b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e2b0f75cc7541b82abcb78494f20402b89e13b6", "patch": "@@ -1,3 +1,8 @@\n+2012-05-16  David S. Miller  <davem@davemloft.net>\n+\n+\t* jump.c (delete_related_insns): If we remove a CALL, make sure\n+\twe delete it's NOTE_INSN_CALL_ARG_LOCATION note too.\n+\n 2012-05-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/53217"}, {"sha": "f5f644999d68147f56792707531417f8ebbabeb0", "filename": "gcc/jump.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e2b0f75cc7541b82abcb78494f20402b89e13b6/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e2b0f75cc7541b82abcb78494f20402b89e13b6/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=0e2b0f75cc7541b82abcb78494f20402b89e13b6", "patch": "@@ -1252,6 +1252,26 @@ delete_related_insns (rtx insn)\n   if (next != 0 && BARRIER_P (next))\n     delete_insn (next);\n \n+  /* If this is a call, then we have to remove the var tracking note\n+     for the call arguments.  */\n+\n+  if (CALL_P (insn)\n+      || (NONJUMP_INSN_P (insn)\n+\t  && GET_CODE (PATTERN (insn)) == SEQUENCE\n+\t  && CALL_P (XVECEXP (PATTERN (insn), 0, 0))))\n+    {\n+      rtx p = insn;\n+\n+      for (p = NEXT_INSN (p);\n+\t   p && NOTE_P (p);\n+\t   p = NEXT_INSN (p))\n+\tif (NOTE_KIND (p) == NOTE_INSN_CALL_ARG_LOCATION)\n+\t  {\n+\t    remove_insn (p);\n+\t    break;\n+\t  }\n+    }\n+\n   /* If deleting a jump, decrement the count of the label,\n      and delete the label if it is now unused.  */\n "}]}