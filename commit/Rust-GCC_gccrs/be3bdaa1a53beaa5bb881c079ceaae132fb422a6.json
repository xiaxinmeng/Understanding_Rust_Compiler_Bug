{"sha": "be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "node_id": "C_kwDOANBUbNoAKGJlM2JkYWExYTUzYmVhYTViYjg4MWMwNzljZWFhZTEzMmZiNDIyYTY", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2022-06-10T15:18:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-06T13:29:48Z"}, "message": "[Ada] Support ghost generic formal parameters\n\nThis adds support in GNAT for ghost generic formal parameters, as\nincluded in SPARK RM 6.9.\n\ngcc/ada/\n\n\t* ghost.adb (Check_Ghost_Context): Delay checking for generic\n\tassociations.\n\t(Check_Ghost_Context_In_Generic_Association): Perform ghost\n\tchecking in analyzed generic associations.\n\t(Check_Ghost_Formal_Procedure_Or_Package): Check SPARK RM\n\t6.9(13-14) for formal procedures and packages.\n\t(Check_Ghost_Formal_Variable): Check SPARK RM 6.9(13-14) for\n\tvariables.\n\t* ghost.ads: Declarations for the above.\n\t* sem_ch12.adb (Analyze_Associations): Apply delayed checking\n\tfor generic associations.\n\t(Analyze_Formal_Object_Declaration): Same.\n\t(Analyze_Formal_Subprogram_Declaration): Same.\n\t(Instantiate_Formal_Package): Same.\n\t(Instantiate_Formal_Subprogram): Same.\n\t(Instantiate_Object): Same.  Copy ghost aspect to newly declared\n\tobject for actual for IN formal object. Use new function\n\tGet_Enclosing_Deep_Object to retrieve root object.\n\t(Instantiate_Type): Copy ghost aspect to declared subtype for\n\tactual for formal type.\n\t* sem_prag.adb (Analyze_Pragma): Recognize new allowed\n\tdeclarations.\n\t* sem_util.adb (Copy_Ghost_Aspect): Copy the ghost aspect\n\tbetween nodes.\n\t(Get_Enclosing_Deep_Object): New function to return enclosing\n\tdeep object (or root for reachable part).\n\t* sem_util.ads (Copy_Ghost_Aspect): Same.\n\t(Get_Enclosing_Deep_Object): Same.\n\t* libgnat/s-imageu.ads: Declare formal subprograms as ghost.\n\t* libgnat/s-valuei.ads: Same.\n\t* libgnat/s-valuti.ads: Same.", "tree": {"sha": "8c1ee1b1cce7b99e11d0ce4e94542a4b343a8822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c1ee1b1cce7b99e11d0ce4e94542a4b343a8822"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28add0a4c82f52631b434e1e126588cd3f5b7782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28add0a4c82f52631b434e1e126588cd3f5b7782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28add0a4c82f52631b434e1e126588cd3f5b7782"}], "stats": {"total": 410, "additions": 347, "deletions": 63}, "files": [{"sha": "1ce1d6a91d9f52d2a8894c8db64666fe106fc7f8", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 129, "deletions": 13, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "patch": "@@ -472,6 +472,13 @@ package body Ghost is\n                if Is_Ignored_Ghost_Node (Par) then\n                   return True;\n \n+               --  It is not possible to check correct use of Ghost entities\n+               --  in generic instantiations until after the generic has been\n+               --  resolved. Postpone that verification to after resolution.\n+\n+               elsif Nkind (Par) = N_Generic_Association then\n+                  return True;\n+\n                --  A reference to a Ghost entity can appear within an aspect\n                --  specification (SPARK RM 6.9(10)). The precise checking will\n                --  occur when analyzing the corresponding pragma. We make an\n@@ -521,19 +528,6 @@ package body Ghost is\n                then\n                   return True;\n \n-               --  In the context of an instantiation, accept currently Ghost\n-               --  arguments for formal subprograms, as SPARK does not provide\n-               --  a way to distinguish Ghost formal parameters from non-Ghost\n-               --  ones. Illegal use of such arguments in a non-Ghost context\n-               --  will lead to errors inside the instantiation.\n-\n-               elsif Nkind (Parent (Par)) = N_Generic_Association\n-                 and then (Nkind (Par) in N_Has_Entity\n-                            and then Present (Entity (Par))\n-                            and then Is_Subprogram (Entity (Par)))\n-               then\n-                  return True;\n-\n                elsif Is_OK_Declaration (Par) then\n                   return True;\n \n@@ -680,6 +674,128 @@ package body Ghost is\n       end if;\n    end Check_Ghost_Context;\n \n+   ------------------------------------------------\n+   -- Check_Ghost_Context_In_Generic_Association --\n+   ------------------------------------------------\n+\n+   procedure Check_Ghost_Context_In_Generic_Association\n+     (Actual : Node_Id;\n+      Formal : Entity_Id)\n+   is\n+      function Emit_Error_On_Ghost_Reference\n+        (N : Node_Id)\n+         return Traverse_Result;\n+      --  Determine wether N denotes a reference to a ghost entity, and if so\n+      --  issue an error.\n+\n+      -----------------------------------\n+      -- Emit_Error_On_Ghost_Reference --\n+      -----------------------------------\n+\n+      function Emit_Error_On_Ghost_Reference\n+        (N : Node_Id)\n+         return Traverse_Result\n+      is\n+      begin\n+         if Is_Entity_Name (N)\n+           and then Present (Entity (N))\n+           and then Is_Ghost_Entity (Entity (N))\n+         then\n+            Error_Msg_N (\"ghost entity cannot appear in this context\", N);\n+            Error_Msg_Sloc := Sloc (Formal);\n+            Error_Msg_NE (\"\\formal & was not declared as ghost #\", N, Formal);\n+            return Abandon;\n+         end if;\n+\n+         return OK;\n+      end Emit_Error_On_Ghost_Reference;\n+\n+      procedure Check_Ghost_References is\n+        new Traverse_Proc (Emit_Error_On_Ghost_Reference);\n+\n+   --  Start of processing for Check_Ghost_Context_In_Generic_Association\n+\n+   begin\n+      --  The context is ghost when it appears within a Ghost package or\n+      --  subprogram.\n+\n+      if Ghost_Mode > None then\n+         return;\n+\n+      --  The context is ghost if Formal is explicitly marked as ghost\n+\n+      elsif Is_Ghost_Entity (Formal) then\n+         return;\n+\n+      else\n+         Check_Ghost_References (Actual);\n+      end if;\n+   end Check_Ghost_Context_In_Generic_Association;\n+\n+   ---------------------------------------------\n+   -- Check_Ghost_Formal_Procedure_Or_Package --\n+   ---------------------------------------------\n+\n+   procedure Check_Ghost_Formal_Procedure_Or_Package\n+     (N          : Node_Id;\n+      Actual     : Entity_Id;\n+      Formal     : Entity_Id;\n+      Is_Default : Boolean := False)\n+   is\n+   begin\n+      if not Is_Ghost_Entity (Formal) then\n+         return;\n+      end if;\n+\n+      if Present (Actual) and then Is_Ghost_Entity (Actual) then\n+         return;\n+      end if;\n+\n+      if Is_Default then\n+         Error_Msg_N (\"ghost procedure expected as default\", N);\n+         Error_Msg_NE (\"\\formal & is declared as ghost\", N, Formal);\n+\n+      else\n+         if Ekind (Formal) = E_Procedure then\n+            Error_Msg_N (\"ghost procedure expected for actual\", N);\n+         else\n+            Error_Msg_N (\"ghost package expected for actual\", N);\n+         end if;\n+\n+         Error_Msg_Sloc := Sloc (Formal);\n+         Error_Msg_NE (\"\\formal & was declared as ghost #\", N, Formal);\n+      end if;\n+   end Check_Ghost_Formal_Procedure_Or_Package;\n+\n+   ---------------------------------\n+   -- Check_Ghost_Formal_Variable --\n+   ---------------------------------\n+\n+   procedure Check_Ghost_Formal_Variable\n+     (Actual     : Node_Id;\n+      Formal     : Entity_Id;\n+      Is_Default : Boolean := False)\n+   is\n+      Actual_Obj : constant Entity_Id := Get_Enclosing_Deep_Object (Actual);\n+   begin\n+      if not Is_Ghost_Entity (Formal) then\n+         return;\n+      end if;\n+\n+      if No (Actual_Obj)\n+        or else not Is_Ghost_Entity (Actual_Obj)\n+      then\n+         if Is_Default then\n+            Error_Msg_N (\"ghost object expected as default\", Actual);\n+            Error_Msg_NE (\"\\formal & is declared as ghost\", Actual, Formal);\n+         else\n+            Error_Msg_N (\"ghost object expected for mutable actual\", Actual);\n+            Error_Msg_Sloc := Sloc (Formal);\n+            Error_Msg_NE (\"\\formal & was declared as ghost #\", Actual, Formal);\n+         end if;\n+      end if;\n+   end Check_Ghost_Formal_Variable;\n+\n    ----------------------------\n    -- Check_Ghost_Overriding --\n    ----------------------------"}, {"sha": "ca311bf960bbd9626a8f503d5bebd5c425fcfbbd", "filename": "gcc/ada/ghost.ads", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fghost.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fghost.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.ads?ref=be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "patch": "@@ -44,6 +44,33 @@ package Ghost is\n    --  Determine whether node Ghost_Ref appears within a Ghost-friendly context\n    --  where Ghost entity Ghost_Id can safely reside.\n \n+   procedure Check_Ghost_Context_In_Generic_Association\n+     (Actual : Node_Id;\n+      Formal : Entity_Id);\n+   --  Check that if Actual contains references to ghost entities, generic\n+   --  formal parameter Formal is ghost (SPARK RM 6.9(10)).\n+\n+   procedure Check_Ghost_Formal_Procedure_Or_Package\n+     (N          : Node_Id;\n+      Actual     : Entity_Id;\n+      Formal     : Entity_Id;\n+      Is_Default : Boolean := False);\n+   --  Verify that if generic formal procedure (resp. package) Formal is ghost,\n+   --  then Actual is not Empty and also a ghost procedure (resp. package)\n+   --  (SPARK RM 6.9(13-14)). The error if any is located on N. If\n+   --  Is_Default is False, N and Actual represent the actual parameter in an\n+   --  instantiation. Otherwise, they represent the default subprogram of a\n+   --  formal subprogram declaration.\n+\n+   procedure Check_Ghost_Formal_Variable\n+     (Actual     : Node_Id;\n+      Formal     : Entity_Id;\n+      Is_Default : Boolean := False);\n+   --  Verify that if Formal (either an IN OUT generic formal parameter, or an\n+   --  IN generic formal parameter of access-to-variable type) is ghost, then\n+   --  Actual is a ghost object (SPARK RM 6.9(13-14)). Is_Default is True when\n+   --  Actual is the default expression of the formal object declaration.\n+\n    procedure Check_Ghost_Overriding\n      (Subp            : Entity_Id;\n       Overridden_Subp : Entity_Id);"}, {"sha": "789cf65a9d2f42526b16f23a97842f211630d74f", "filename": "gcc/ada/libgnat/s-imageu.ads", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Flibgnat%2Fs-imageu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Flibgnat%2Fs-imageu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-imageu.ads?ref=be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "patch": "@@ -54,27 +54,34 @@ generic\n \n    Unsigned_Width_Ghost : Natural;\n \n-   with function Wrap_Option (Value : Uns) return Uns_Option;\n+   with function Wrap_Option (Value : Uns) return Uns_Option\n+      with Ghost;\n    with function Only_Decimal_Ghost\n      (Str      : String;\n       From, To : Integer)\n-      return Boolean;\n-   with function Hexa_To_Unsigned_Ghost (X : Character) return Uns;\n+      return Boolean\n+      with Ghost;\n+   with function Hexa_To_Unsigned_Ghost (X : Character) return Uns\n+      with Ghost;\n    with function Scan_Based_Number_Ghost\n      (Str      : String;\n       From, To : Integer;\n       Base     : Uns := 10;\n-      Acc      : Uns := 0) return Uns_Option;\n-   with function Is_Unsigned_Ghost (Str : String) return Boolean;\n+      Acc      : Uns := 0) return Uns_Option\n+      with Ghost;\n+   with function Is_Unsigned_Ghost (Str : String) return Boolean\n+      with Ghost;\n    with function Value_Unsigned (Str : String) return Uns;\n    with procedure Prove_Iter_Scan_Based_Number_Ghost\n      (Str1, Str2 : String;\n       From, To : Integer;\n       Base     : Uns := 10;\n-      Acc      : Uns := 0);\n+      Acc      : Uns := 0)\n+      with Ghost;\n    with procedure Prove_Scan_Only_Decimal_Ghost\n      (Str : String;\n-      Val : Uns);\n+      Val : Uns)\n+      with Ghost;\n \n package System.Image_U is\n "}, {"sha": "5e42773b36ac76f36d5148cff93cb136724009ba", "filename": "gcc/ada/libgnat/s-valuei.ads", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Flibgnat%2Fs-valuei.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Flibgnat%2Fs-valuei.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuei.ads?ref=be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "patch": "@@ -55,30 +55,37 @@ generic\n    --  Additional parameters for ghost subprograms used inside contracts\n \n    type Uns_Option is private;\n-   with function Wrap_Option (Value : Uns) return Uns_Option;\n-   with function Is_Raw_Unsigned_Format_Ghost (Str : String) return Boolean;\n+   with function Wrap_Option (Value : Uns) return Uns_Option\n+      with Ghost;\n+   with function Is_Raw_Unsigned_Format_Ghost (Str : String) return Boolean\n+      with Ghost;\n    with function Raw_Unsigned_Overflows_Ghost\n      (Str      : String;\n       From, To : Integer)\n-      return Boolean;\n+      return Boolean\n+      with Ghost;\n    with function Scan_Raw_Unsigned_Ghost\n      (Str      : String;\n       From, To : Integer)\n-      return Uns;\n+      return Uns\n+      with Ghost;\n    with function Raw_Unsigned_Last_Ghost\n      (Str      : String;\n       From, To : Integer)\n-      return Positive;\n+      return Positive\n+      with Ghost;\n    with function Only_Decimal_Ghost\n      (Str      : String;\n       From, To : Integer)\n-      return Boolean;\n+      return Boolean\n+      with Ghost;\n    with function Scan_Based_Number_Ghost\n      (Str      : String;\n       From, To : Integer;\n       Base     : Uns := 10;\n       Acc      : Uns := 0)\n-      return Uns_Option;\n+      return Uns_Option\n+      with Ghost;\n \n package System.Value_I is\n    pragma Preelaborate;"}, {"sha": "2b89b1246f2306287bac2eb9031befbf02014a7a", "filename": "gcc/ada/libgnat/s-valuti.ads", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Flibgnat%2Fs-valuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Flibgnat%2Fs-valuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuti.ads?ref=be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "patch": "@@ -384,27 +384,36 @@ is\n \n       Unsigned_Width_Ghost : Natural;\n \n-      with function Wrap_Option (Value : Uns) return Uns_Option;\n+      with function Wrap_Option (Value : Uns) return Uns_Option\n+         with Ghost;\n       with function Only_Decimal_Ghost\n         (Str      : String;\n          From, To : Integer)\n-         return Boolean;\n-      with function Hexa_To_Unsigned_Ghost (X : Character) return Uns;\n+         return Boolean\n+         with Ghost;\n+      with function Hexa_To_Unsigned_Ghost (X : Character) return Uns\n+         with Ghost;\n       with function Scan_Based_Number_Ghost\n         (Str      : String;\n          From, To : Integer;\n          Base     : Uns := 10;\n          Acc      : Uns := 0)\n-         return Uns_Option;\n-      with function Is_Integer_Ghost (Str : String) return Boolean;\n+         return Uns_Option\n+         with Ghost;\n+      with function Is_Integer_Ghost (Str : String) return Boolean\n+         with Ghost;\n       with procedure Prove_Iter_Scan_Based_Number_Ghost\n         (Str1, Str2 : String;\n          From, To : Integer;\n          Base     : Uns := 10;\n-         Acc      : Uns := 0);\n-      with procedure Prove_Scan_Only_Decimal_Ghost (Str : String; Val : Int);\n-      with function Abs_Uns_Of_Int (Val : Int) return Uns;\n-      with function Value_Integer (Str : String) return Int;\n+         Acc      : Uns := 0)\n+         with Ghost;\n+      with procedure Prove_Scan_Only_Decimal_Ghost (Str : String; Val : Int)\n+         with Ghost;\n+      with function Abs_Uns_Of_Int (Val : Int) return Uns\n+         with Ghost;\n+      with function Value_Integer (Str : String) return Int\n+         with Ghost;\n \n    package Int_Params is\n    end Int_Params;"}, {"sha": "af8bbbe2f9ea17d65508e6b8134476a07435a7cb", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 86, "deletions": 27, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "patch": "@@ -2204,6 +2204,19 @@ package body Sem_Ch12 is\n                   raise Program_Error;\n             end case;\n \n+            --  Check here the correct use of Ghost entities in generic\n+            --  instantiations, as now the generic has been resolved and\n+            --  we know which formal generic parameters are ghost (SPARK\n+            --  RM 6.9(10)).\n+\n+            if Nkind (Formal) not in N_Use_Package_Clause\n+                                   | N_Use_Type_Clause\n+            then\n+               Check_Ghost_Context_In_Generic_Association\n+                 (Actual => Match,\n+                  Formal => Defining_Entity (Analyzed_Formal));\n+            end if;\n+\n             Formal := Saved_Formal;\n             Next_Non_Pragma (Analyzed_Formal);\n          end loop;\n@@ -2715,6 +2728,17 @@ package body Sem_Ch12 is\n          if Present (E) then\n             Preanalyze_Spec_Expression (E, T);\n \n+            --  The default for a ghost generic formal IN parameter of\n+            --  access-to-variable type should be a ghost object (SPARK\n+            --  RM 6.9(13)).\n+\n+            if Is_Access_Variable (T) then\n+               Check_Ghost_Formal_Variable\n+                 (Actual     => E,\n+                  Formal     => Id,\n+                  Is_Default => True);\n+            end if;\n+\n             if Is_Limited_Type (T) and then not OK_For_Limited_Init (T, E) then\n                Error_Msg_N\n                  (\"initialization not allowed for limited types\", E);\n@@ -3398,6 +3422,25 @@ package body Sem_Ch12 is\n             goto Leave;\n          end if;\n \n+         --  The default for a ghost generic formal procedure should be a ghost\n+         --  procedure (SPARK RM 6.9(13)).\n+\n+         if Ekind (Nam) = E_Procedure then\n+            declare\n+               Def_E : Entity_Id := Empty;\n+            begin\n+               if Nkind (Def) in N_Has_Entity then\n+                  Def_E := Entity (Def);\n+               end if;\n+\n+               Check_Ghost_Formal_Procedure_Or_Package\n+                 (N          => Def,\n+                  Actual     => Def_E,\n+                  Formal     => Nam,\n+                  Is_Default => True);\n+            end;\n+         end if;\n+\n          --  Default name may be overloaded, in which case the interpretation\n          --  with the correct profile must be selected, as for a renaming.\n          --  If the definition is an indexed component, it must denote a\n@@ -10594,6 +10637,14 @@ package body Sem_Ch12 is\n          Gen_Parent := Generic_Parent (Specification (Analyzed_Formal));\n          Formal_Pack := Defining_Unit_Name (Specification (Analyzed_Formal));\n \n+         --  The actual for a ghost generic formal package should be a ghost\n+         --  package (SPARK RM 6.9(14)).\n+\n+         Check_Ghost_Formal_Procedure_Or_Package\n+           (N      => Actual,\n+            Actual => Actual_Pack,\n+            Formal => Formal_Pack);\n+\n          if Nkind (Parent (Actual_Pack)) = N_Defining_Program_Unit_Name then\n             Parent_Spec := Package_Specification (Actual_Pack);\n          else\n@@ -10881,6 +10932,18 @@ package body Sem_Ch12 is\n             Act_E := Empty;\n          end if;\n \n+         --  The actual for a ghost generic formal procedure should be a ghost\n+         --  procedure (SPARK RM 6.9(14)).\n+\n+         if Present (Act_E)\n+           and then Ekind (Act_E) = E_Procedure\n+         then\n+            Check_Ghost_Formal_Procedure_Or_Package\n+              (N      => Act,\n+               Actual => Act_E,\n+               Formal => Analyzed_S);\n+         end if;\n+\n          if (Present (Act_E) and then Is_Overloadable (Act_E))\n            or else Nkind (Act) in N_Attribute_Reference\n                                 | N_Indexed_Component\n@@ -11400,40 +11463,22 @@ package body Sem_Ch12 is\n          --  volatility refinement aspects.\n \n          declare\n-            Actual_Obj : Entity_Id;\n-            N          : Node_Id := Actual;\n+            Actual_Obj : constant Entity_Id :=\n+              Get_Enclosing_Deep_Object (Actual);\n          begin\n-            --  Similar to Sem_Util.Get_Enclosing_Object, but treat\n-            --  pointer dereference like component selection.\n-            loop\n-               if Is_Entity_Name (N) then\n-                  Actual_Obj := Entity (N);\n-                  exit;\n-               end if;\n-\n-               case Nkind (N) is\n-                  when N_Indexed_Component\n-                     | N_Selected_Component\n-                     | N_Slice\n-                     | N_Explicit_Dereference\n-                  =>\n-                     N := Prefix (N);\n-\n-                  when N_Type_Conversion =>\n-                     N := Expression (N);\n-\n-                  when others =>\n-                     Actual_Obj := Etype (N);\n-                     exit;\n-               end case;\n-            end loop;\n-\n             Check_Volatility_Compatibility\n               (Actual_Obj, A_Gen_Obj, \"actual object\",\n                \"its corresponding formal object of mode in out\",\n                Srcpos_Bearer => Actual);\n          end;\n \n+         --  The actual for a ghost generic formal IN OUT parameter should be a\n+         --  ghost object (SPARK RM 6.9(14)).\n+\n+         Check_Ghost_Formal_Variable\n+           (Actual => Actual,\n+            Formal => A_Gen_Obj);\n+\n       --  Formal in-parameter\n \n       else\n@@ -11459,6 +11504,7 @@ package body Sem_Ch12 is\n                 Object_Definition      => Def,\n                 Expression             => Actual);\n \n+            Copy_Ghost_Aspect (Formal, To => Decl_Node);\n             Set_Corresponding_Generic_Association (Decl_Node, Act_Assoc);\n \n             --  A generic formal object of a tagged type is defined to be\n@@ -11470,6 +11516,16 @@ package body Sem_Ch12 is\n \n             Append (Decl_Node, List);\n \n+            --  The actual for a ghost generic formal IN parameter of\n+            --  access-to-variable type should be a ghost object (SPARK\n+            --  RM 6.9(14)).\n+\n+            if Is_Access_Variable (Etype (A_Gen_Obj)) then\n+               Check_Ghost_Formal_Variable\n+                 (Actual => Actual,\n+                  Formal => A_Gen_Obj);\n+            end if;\n+\n             --  No need to repeat (pre-)analysis of some expression nodes\n             --  already handled in Preanalyze_Actuals.\n \n@@ -11543,6 +11599,7 @@ package body Sem_Ch12 is\n                 Expression             => New_Copy_Tree\n                                             (Default_Expression (Formal)));\n \n+            Copy_Ghost_Aspect (Formal, To => Decl_Node);\n             Set_Corresponding_Generic_Association\n               (Decl_Node, Expression (Decl_Node));\n \n@@ -14199,6 +14256,8 @@ package body Sem_Ch12 is\n           Defining_Identifier => Subt,\n           Subtype_Indication  => New_Occurrence_Of (Act_T, Loc));\n \n+      Copy_Ghost_Aspect (Formal, To => Decl_Node);\n+\n       --  Record whether the actual is private at this point, so that\n       --  Check_Generic_Actuals can restore its proper view before the\n       --  semantic analysis of the instance."}, {"sha": "ad43808635854efe69e998f3f96b79fdcd6ed9c2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "patch": "@@ -17002,6 +17002,9 @@ package body Sem_Prag is\n                --  The pragma applies to a legal construct, stop the traversal\n \n                elsif Nkind (Stmt) in N_Abstract_Subprogram_Declaration\n+                                   | N_Formal_Object_Declaration\n+                                   | N_Formal_Subprogram_Declaration\n+                                   | N_Formal_Type_Declaration\n                                    | N_Full_Type_Declaration\n                                    | N_Generic_Subprogram_Declaration\n                                    | N_Object_Declaration"}, {"sha": "942a77a34f2e2c5169579d97103a62372c19daa3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "patch": "@@ -7024,6 +7024,25 @@ package body Sem_Util is\n       return Comps;\n    end Copy_Component_List;\n \n+   -----------------------\n+   -- Copy_Ghost_Aspect --\n+   -----------------------\n+\n+   procedure Copy_Ghost_Aspect (From : Node_Id; To : Node_Id) is\n+      pragma Assert (not Has_Aspects (To));\n+      Asp : Node_Id;\n+\n+   begin\n+      if Has_Aspects (From) then\n+         Asp := Find_Aspect (Defining_Entity (From), Aspect_Ghost);\n+\n+         if Present (Asp) then\n+            Set_Aspect_Specifications (To, New_List (New_Copy_Tree (Asp)));\n+            Set_Has_Aspects (To, True);\n+         end if;\n+      end if;\n+   end Copy_Ghost_Aspect;\n+\n    -------------------------\n    -- Copy_Parameter_List --\n    -------------------------\n@@ -11004,6 +11023,32 @@ package body Sem_Util is\n       end if;\n    end Get_Enclosing_Object;\n \n+   -------------------------------\n+   -- Get_Enclosing_Deep_Object --\n+   -------------------------------\n+\n+   function Get_Enclosing_Deep_Object (N : Node_Id) return Entity_Id is\n+   begin\n+      if Is_Entity_Name (N) then\n+         return Entity (N);\n+      else\n+         case Nkind (N) is\n+            when N_Explicit_Dereference\n+               | N_Indexed_Component\n+               | N_Selected_Component\n+               | N_Slice\n+            =>\n+               return Get_Enclosing_Deep_Object (Prefix (N));\n+\n+            when N_Type_Conversion =>\n+               return Get_Enclosing_Deep_Object (Expression (N));\n+\n+            when others =>\n+               return Empty;\n+         end case;\n+      end if;\n+   end Get_Enclosing_Deep_Object;\n+\n    ---------------------------\n    -- Get_Enum_Lit_From_Pos --\n    ---------------------------"}, {"sha": "a8afda0cb6734d09c0e10d11b6bc229cc5370e1b", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3bdaa1a53beaa5bb881c079ceaae132fb422a6/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=be3bdaa1a53beaa5bb881c079ceaae132fb422a6", "patch": "@@ -625,6 +625,11 @@ package Sem_Util is\n    --  create a new compatible record type. Loc is the source location assigned\n    --  to the created nodes.\n \n+   procedure Copy_Ghost_Aspect (From : Node_Id; To : Node_Id);\n+   --  Copy the Ghost aspect if present in the aspect specifications of node\n+   --  From to node To. On entry it is assumed that To does not have aspect\n+   --  specifications. If From has no aspects, the routine has no effect.\n+\n    function Copy_Parameter_List (Subp_Id : Entity_Id) return List_Id;\n    --  Utility to create a parameter profile for a new subprogram spec, when\n    --  the subprogram has a body that acts as spec. This is done for some cases\n@@ -1183,6 +1188,12 @@ package Sem_Util is\n    --  If expression N references a part of an object, return this object.\n    --  Otherwise return Empty. Expression N should have been resolved already.\n \n+   function Get_Enclosing_Deep_Object (N : Node_Id) return Entity_Id;\n+   --  If expression N references a reachable part of an object (as defined in\n+   --  SPARK RM 6.9), return this object. Otherwise return Empty. It is similar\n+   --  to Get_Enclosing_Object, but treats pointer dereference like component\n+   --  selection. Expression N should have been resolved already.\n+\n    function Get_Generic_Entity (N : Node_Id) return Entity_Id;\n    --  Returns the true generic entity in an instantiation. If the name in the\n    --  instantiation is a renaming, the function returns the renamed generic."}]}