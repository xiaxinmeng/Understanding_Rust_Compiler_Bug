{"sha": "7aa840fc5fc9531742f67871d6ee07a528660544", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FhODQwZmM1ZmM5NTMxNzQyZjY3ODcxZDZlZTA3YTUyODY2MDU0NA==", "commit": {"author": {"name": "Andy Hutchinson", "email": "hutchinsonandy@aim.com", "date": "2008-06-02T22:39:12Z"}, "committer": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2008-06-02T22:39:12Z"}, "message": "avr.exp: Add avr testsuite.\n\n* gcc.target/avr/avr.exp: Add avr testsuite.\n* gcc.target/avr/trivial.c: Add simple test.\n* gcc.target/avr/torture/avr-torture.exp: Add avr-torture testsuite.\n* gcc.target/avr/torture/trivial.c: Add simple test.\n\nFrom-SVN: r136304", "tree": {"sha": "0569ae5f7ff08b3fa5450a401242d28dc969226d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0569ae5f7ff08b3fa5450a401242d28dc969226d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aa840fc5fc9531742f67871d6ee07a528660544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa840fc5fc9531742f67871d6ee07a528660544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa840fc5fc9531742f67871d6ee07a528660544", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa840fc5fc9531742f67871d6ee07a528660544/comments", "author": null, "committer": null, "parents": [{"sha": "ffd6ff7271cb576aa0d49e8939b0c4b3b7e9a720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd6ff7271cb576aa0d49e8939b0c4b3b7e9a720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffd6ff7271cb576aa0d49e8939b0c4b3b7e9a720"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "1f319a0e1201bc724e34cd632e05f041e2e1ffb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa840fc5fc9531742f67871d6ee07a528660544/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa840fc5fc9531742f67871d6ee07a528660544/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7aa840fc5fc9531742f67871d6ee07a528660544", "patch": "@@ -1,3 +1,10 @@\n+2008-06-02  Andy Hutchinson  <hutchinsonandy@aim.com>\n+\n+\t* gcc.target/avr/avr.exp: Add avr testsuite.\n+\t* gcc.target/avr/trivial.c: Add simple test.\n+\t* gcc.target/avr/torture/avr-torture.exp: Add avr-torture testsuite.\n+\t* gcc.target/avr/torture/trivial.c: Add simple test.\n+\n 2008-06-02  Andy Hutchinson  <hutchinsonandy@aim.com>\n \n \t* gcc.dg/pr19340.c: Disable for AVR as it has no scheduling."}, {"sha": "90aeed41e1fa1a4192eeffbfc8ded404edcfffae", "filename": "gcc/testsuite/gcc.target/avr/avr.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa840fc5fc9531742f67871d6ee07a528660544/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Favr.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa840fc5fc9531742f67871d6ee07a528660544/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Favr.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Favr.exp?ref=7aa840fc5fc9531742f67871d6ee07a528660544", "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 2008 Free Software Foundation, Inc.\r\n+\r\n+# This program is free software; you can redistribute it and/or modify\r\n+# it under the terms of the GNU General Public License as published by\r\n+# the Free Software Foundation; either version 3 of the License, or\r\n+# (at your option) any later version.\r\n+# \r\n+# This program is distributed in the hope that it will be useful,\r\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n+# GNU General Public License for more details.\r\n+# \r\n+# You should have received a copy of the GNU General Public License\r\n+# along with GCC; see the file COPYING3.  If not see\r\n+# <http://www.gnu.org/licenses/>.\r\n+\r\n+# GCC testsuite that uses the `dg.exp' driver.\r\n+\r\n+# Exit immediately if this isn't an AVR target.\r\n+if ![istarget avr-*-*] then {\r\n+  return\r\n+}\r\n+\r\n+# Load support procs.\r\n+load_lib gcc-dg.exp\r\n+\r\n+# If a testcase doesn't have special options, use these.\r\n+global DEFAULT_CFLAGS\r\n+if ![info exists DEFAULT_CFLAGS] then {\r\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\r\n+}\r\n+\r\n+# Initialize `dg'.\r\n+dg-init\r\n+\r\n+# Main loop.\r\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\r\n+\t\"\" $DEFAULT_CFLAGS\r\n+\r\n+# All done.\r\n+dg-finish\r"}, {"sha": "355b3ad88bd71c8c506510513707f83982f00be8", "filename": "gcc/testsuite/gcc.target/avr/torture/avr-torture.exp", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa840fc5fc9531742f67871d6ee07a528660544/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Favr-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa840fc5fc9531742f67871d6ee07a528660544/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Favr-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Favr-torture.exp?ref=7aa840fc5fc9531742f67871d6ee07a528660544", "patch": "@@ -0,0 +1,61 @@\n+#   Copyright (C) 2008 Free Software Foundation, Inc.\r\n+\r\n+# This program is free software; you can redistribute it and/or modify\r\n+# it under the terms of the GNU General Public License as published by\r\n+# the Free Software Foundation; either version 3 of the License, or\r\n+# (at your option) any later version.\r\n+# \r\n+# This program is distributed in the hope that it will be useful,\r\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n+# GNU General Public License for more details.\r\n+# \r\n+# You should have received a copy of the GNU General Public License\r\n+# along with GCC; see the file COPYING3.  If not see\r\n+# <http://www.gnu.org/licenses/>.\r\n+\r\n+# GCC testsuite that uses the `gcc-dg.exp' driver, looping over\r\n+# optimization options.\r\n+\r\n+# Exit immediately if this isn't a AVR target.\r\n+if { ![istarget avr-*-*] } then {\r\n+  return\r\n+}\r\n+\r\n+# Load support procs.\r\n+load_lib gcc-dg.exp\r\n+\r\n+# If a testcase doesn't have special options, use these.\r\n+global DEFAULT_CFLAGS\r\n+if ![info exists DEFAULT_CFLAGS] then {\r\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\r\n+}\r\n+\r\n+# Initialize `dg'.\r\n+dg-init\r\n+\r\n+    set AVR_TORTURE_OPTIONS [list \\\r\n+\t{ -O0 } \\\r\n+\t{ -O1 } \\\r\n+\t{ -O2 } \\\r\n+\t{ -O2 -mcall-prologues } \\\r\n+\t{ -Os -fomit-frame-pointer } \\\r\n+\t{ -Os -fomit-frame-pointer -finline-functions } \\\r\n+\t{ -O3 -g } \\\r\n+\t{ -Os -mcall-prologues} ]\r\n+\r\n+\r\n+#Initialize use of torture lists. \r\n+torture-init\r\n+\r\n+set-torture-options $AVR_TORTURE_OPTIONS\r\n+\r\n+\r\n+# Main loop.\r\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] $DEFAULT_CFLAGS\r\n+\r\n+# Finalize use of torture lists.\r\n+torture-finish\r\n+\r\n+# All done.\r\n+dg-finish\r"}, {"sha": "91163f9226e200d9cb22ec8eb769db991b06282c", "filename": "gcc/testsuite/gcc.target/avr/torture/trivial.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa840fc5fc9531742f67871d6ee07a528660544/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Ftrivial.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa840fc5fc9531742f67871d6ee07a528660544/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Ftrivial.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Ftrivial.c?ref=7aa840fc5fc9531742f67871d6ee07a528660544", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\r\n+#include <stdio.h>\r\n+\r\n+#define __ATTR_PROGMEM__ __attribute__((__progmem__))\r\n+\r\n+#define PROGMEM __ATTR_PROGMEM__\r\n+char PROGMEM a1 = 0x12; \r\n+int PROGMEM a2 = 0x2345; \r\n+long PROGMEM a3 = 0x12345678; \r\n+int main(void)\r\n+{\r\n+  printf(\"Hello World\\n\");\r\n+  return 0;\r\n+}\r"}, {"sha": "91163f9226e200d9cb22ec8eb769db991b06282c", "filename": "gcc/testsuite/gcc.target/avr/trivial.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa840fc5fc9531742f67871d6ee07a528660544/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftrivial.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa840fc5fc9531742f67871d6ee07a528660544/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftrivial.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftrivial.c?ref=7aa840fc5fc9531742f67871d6ee07a528660544", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\r\n+#include <stdio.h>\r\n+\r\n+#define __ATTR_PROGMEM__ __attribute__((__progmem__))\r\n+\r\n+#define PROGMEM __ATTR_PROGMEM__\r\n+char PROGMEM a1 = 0x12; \r\n+int PROGMEM a2 = 0x2345; \r\n+long PROGMEM a3 = 0x12345678; \r\n+int main(void)\r\n+{\r\n+  printf(\"Hello World\\n\");\r\n+  return 0;\r\n+}\r"}]}