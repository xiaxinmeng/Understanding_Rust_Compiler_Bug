{"sha": "be77ba2a461eefdf4a2676b19025f36ec092c598", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3N2JhMmE0NjFlZWZkZjRhMjY3NmIxOTAyNWYzNmVjMDkyYzU5OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-02-16T13:47:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-02-16T13:47:25Z"}, "message": "re PR tree-optimization/84037 (Speed regression of polyhedron benchmark since r256644)\n\n2018-02-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/84037\n\tPR tree-optimization/84016\n\tPR target/82862\n\t* config/i386/i386.c (ix86_builtin_vectorization_cost):\n\tAdjust vec_construct for the fact we need additional higher latency\n\t128bit inserts for AVX256 and AVX512 vector builds.\n\t(ix86_add_stmt_cost): Scale vector construction cost for\n\telementwise loads.\n\nFrom-SVN: r257734", "tree": {"sha": "7a02106de91bc43d8e50c5adb8b842c3ba9b3fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a02106de91bc43d8e50c5adb8b842c3ba9b3fc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be77ba2a461eefdf4a2676b19025f36ec092c598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be77ba2a461eefdf4a2676b19025f36ec092c598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be77ba2a461eefdf4a2676b19025f36ec092c598", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be77ba2a461eefdf4a2676b19025f36ec092c598/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe74f9b4ed572a3bb2f8a110ea178578df8e0563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe74f9b4ed572a3bb2f8a110ea178578df8e0563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe74f9b4ed572a3bb2f8a110ea178578df8e0563"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "01ca398965ebea92053a2ff5ec8de44c13e4f079", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be77ba2a461eefdf4a2676b19025f36ec092c598/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be77ba2a461eefdf4a2676b19025f36ec092c598/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be77ba2a461eefdf4a2676b19025f36ec092c598", "patch": "@@ -1,3 +1,14 @@\n+2018-02-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/84037\n+\tPR tree-optimization/84016\n+\tPR target/82862\n+\t* config/i386/i386.c (ix86_builtin_vectorization_cost):\n+\tAdjust vec_construct for the fact we need additional higher latency\n+\t128bit inserts for AVX256 and AVX512 vector builds.\n+\t(ix86_add_stmt_cost): Scale vector construction cost for\n+\telementwise loads.\n+\n 2018-02-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/84417"}, {"sha": "4a968a75a9e25d122f7db7ce717bf35be5b5c2c3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be77ba2a461eefdf4a2676b19025f36ec092c598/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be77ba2a461eefdf4a2676b19025f36ec092c598/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=be77ba2a461eefdf4a2676b19025f36ec092c598", "patch": "@@ -45906,7 +45906,18 @@ ix86_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n \t\t\t      ix86_cost->sse_op, true);\n \n       case vec_construct:\n-\treturn ix86_vec_cost (mode, ix86_cost->sse_op, false);\n+\t{\n+\t  /* N element inserts.  */\n+\t  int cost = ix86_vec_cost (mode, ix86_cost->sse_op, false);\n+\t  /* One vinserti128 for combining two SSE vectors for AVX256.  */\n+\t  if (GET_MODE_BITSIZE (mode) == 256)\n+\t    cost += ix86_vec_cost (mode, ix86_cost->addss, true);\n+\t  /* One vinserti64x4 and two vinserti128 for combining SSE\n+\t     and AVX256 vectors to AVX512.  */\n+\t  else if (GET_MODE_BITSIZE (mode) == 512)\n+\t    cost += 3 * ix86_vec_cost (mode, ix86_cost->addss, true);\n+\t  return cost;\n+\t}\n \n       default:\n         gcc_unreachable ();\n@@ -50245,6 +50256,18 @@ ix86_add_stmt_cost (void *data, int count, enum vect_cost_for_stmt kind,\n \t  break;\n \t}\n     }\n+  /* If we do elementwise loads into a vector then we are bound by\n+     latency and execution resources for the many scalar loads\n+     (AGU and load ports).  Try to account for this by scaling the\n+     construction cost by the number of elements involved.  */\n+  if (kind == vec_construct\n+      && stmt_info\n+      && stmt_info->type == load_vec_info_type\n+      && stmt_info->memory_access_type == VMAT_ELEMENTWISE)\n+    {\n+      stmt_cost = ix86_builtin_vectorization_cost (kind, vectype, misalign);\n+      stmt_cost *= TYPE_VECTOR_SUBPARTS (vectype);\n+    }\n   if (stmt_cost == -1)\n     stmt_cost = ix86_builtin_vectorization_cost (kind, vectype, misalign);\n "}]}