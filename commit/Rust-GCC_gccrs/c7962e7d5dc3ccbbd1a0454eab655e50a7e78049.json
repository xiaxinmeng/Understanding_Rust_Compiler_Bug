{"sha": "c7962e7d5dc3ccbbd1a0454eab655e50a7e78049", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5NjJlN2Q1ZGMzY2NiYmQxYTA0NTRlYWI2NTVlNTBhN2U3ODA0OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-11-20T18:40:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2008-11-20T18:40:52Z"}, "message": "re PR c++/37540 (ICE on __decltype of method call in function template)\n\n        PR c++/37540\n        * call.c (build_over_call): Take the address of the function even\n        in a template.\n        (build_new_method_call): Remember the type of the called function\n        in a template.\n\nFrom-SVN: r142054", "tree": {"sha": "cc8c1f53289edaf65ceafe1ed81a4ce5b237f004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc8c1f53289edaf65ceafe1ed81a4ce5b237f004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049/comments", "author": null, "committer": null, "parents": [{"sha": "19523300a00967225f9d377b241c8442aa261792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19523300a00967225f9d377b241c8442aa261792", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19523300a00967225f9d377b241c8442aa261792"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "558682bb5b580694261dd5968f22f8204a67fe39", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c7962e7d5dc3ccbbd1a0454eab655e50a7e78049", "patch": "@@ -1,3 +1,11 @@\n+2008-11-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/37540\n+\t* call.c (build_over_call): Take the address of the function even\n+\tin a template.\n+\t(build_new_method_call): Remember the type of the called function\n+\tin a template.\n+\n 2008-11-19  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/37142\n@@ -8,7 +16,7 @@\n \n \tPR c++/35405\n \t* pt.c (lookup_template_class): Check pointers before dereferencing\n-\t  Them.\n+\tthem.\n \t* error.c (dump_template_decl): Likewise.\n \n 2008-11-19  Jason Merrill  <jason@redhat.com>"}, {"sha": "bbd6a222d90f40fd31d0e0d76f8d4b12d49c0844", "filename": "gcc/cp/call.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c7962e7d5dc3ccbbd1a0454eab655e50a7e78049", "patch": "@@ -5103,7 +5103,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       tree expr;\n       tree return_type;\n       return_type = TREE_TYPE (TREE_TYPE (fn));\n-      expr = build_call_list (return_type, fn, args);\n+      expr = build_call_list (return_type, build_addr_func (fn), args);\n       if (TREE_THIS_VOLATILE (fn) && cfun)\n \tcurrent_function_returns_abnormally = 1;\n       if (!VOID_TYPE_P (return_type))\n@@ -5964,10 +5964,16 @@ build_new_method_call (tree instance, tree fns, tree args,\n     }\n \n   if (processing_template_decl && call != error_mark_node)\n-    call = (build_min_non_dep_call_list\n-\t    (call,\n-\t     build_min_nt (COMPONENT_REF, orig_instance, orig_fns, NULL_TREE),\n-\t     orig_args));\n+    {\n+      if (TREE_CODE (call) == INDIRECT_REF)\n+\tcall = TREE_OPERAND (call, 0);\n+      call = (build_min_non_dep_call_list\n+\t      (call,\n+\t       build_min (COMPONENT_REF, TREE_TYPE (CALL_EXPR_FN (call)),\n+\t\t\t  orig_instance, orig_fns, NULL_TREE),\n+\t       orig_args));\n+      call = convert_from_reference (call);\n+    }\n \n  /* Free all the conversions we allocated.  */\n   obstack_free (&conversion_obstack, p);"}, {"sha": "43454d2edfad0e15d08372db0f429101670b21f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7962e7d5dc3ccbbd1a0454eab655e50a7e78049", "patch": "@@ -1,3 +1,8 @@\n+2008-11-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/37540\n+\t* g++.dg/cpp0x/decltype14.C: New test.\n+\n 2008-11-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37868"}, {"sha": "9484173cd98f0b6e31f17157d1604f32e80601fa", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype14.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7962e7d5dc3ccbbd1a0454eab655e50a7e78049/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype14.C?ref=c7962e7d5dc3ccbbd1a0454eab655e50a7e78049", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/37540\n+\n+struct A\n+{\n+  int g() {return 0;}\n+};\n+\n+template <typename T_> \n+void f(A a)\n+{\n+  __decltype(a.g()) i;\n+}\n+\n+int main()\n+{\n+  f<int>(A());\n+}"}]}