{"sha": "7f68264126275b5431f08948e4595b6402593efa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y2ODI2NDEyNjI3NWI1NDMxZjA4OTQ4ZTQ1OTViNjQwMjU5M2VmYQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2003-12-05T09:38:33Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-12-05T09:38:33Z"}, "message": "d30v-protos.h [...]: Convert to ISO C90 function declarations and definitions.\n\n2003-12-05  Steven Bosscher  <stevenb@suse.de>\n\n\t* config/d30v/d30v-protos.h , config/d30v/d30v.c,\n\tconfig/dsp16xx/dsp16xx-protos.h, config/dsp16xx/dsp16xx.c,\n\tconfig/fr30/fr30-protos.h, config/fr30/fr30.c,\n\tconfig/i370/i370-protos.h, config/i370/i370.c,\n\tconfig/i960/i960-protos.h, config/i960/i960.c,\n\tconfig/ip2k/ip2k-protos.h, config/ip2k/ip2k.c,\n\tconfig/m32r/m32r-protos.h, config/m32r/m32r.c,\n\tconfig/mn10300/mn10300-protos.h, config/mn10300/mn10300.c,\n\tconfig/ns32k/ns32k-protos.h, config/ns32k/ns32k.c:\n\tConvert to ISO C90 function declarations and definitions.\n\nSee ChangeLog.9 for earlier changes.\n\nFrom-SVN: r74316", "tree": {"sha": "14d790c71f3bba4b331dbcc946efd23613e3f870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14d790c71f3bba4b331dbcc946efd23613e3f870"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f68264126275b5431f08948e4595b6402593efa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f68264126275b5431f08948e4595b6402593efa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f68264126275b5431f08948e4595b6402593efa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f68264126275b5431f08948e4595b6402593efa/comments", "author": null, "committer": null, "parents": [{"sha": "6429bc7c3ec8047e384ee49b6d892ac18394e6b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6429bc7c3ec8047e384ee49b6d892ac18394e6b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6429bc7c3ec8047e384ee49b6d892ac18394e6b6"}], "stats": {"total": 999, "additions": 497, "deletions": 502}, "files": [{"sha": "a4dd711426229442c4f6b73e644bd59aafe2dbc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -1,3 +1,16 @@\n+2003-12-05  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* config/d30v/d30v-protos.h , config/d30v/d30v.c,\n+\tconfig/dsp16xx/dsp16xx-protos.h, config/dsp16xx/dsp16xx.c,\n+\tconfig/fr30/fr30-protos.h, config/fr30/fr30.c,\n+\tconfig/i370/i370-protos.h, config/i370/i370.c,\n+\tconfig/i960/i960-protos.h, config/i960/i960.c,\n+\tconfig/ip2k/ip2k-protos.h, config/ip2k/ip2k.c,\n+\tconfig/m32r/m32r-protos.h, config/m32r/m32r.c,\n+\tconfig/mn10300/mn10300-protos.h, config/mn10300/mn10300.c,\n+\tconfig/ns32k/ns32k-protos.h, config/ns32k/ns32k.c:\n+\tConvert to ISO C90 function declarations and definitions.\n+\n 2003-12-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* doc/extend.texi (Constructing Calls): Add warning about"}, {"sha": "1f93f3b38b8421b51993a67f776d7c8784e9a7ec", "filename": "gcc/config/d30v/d30v-protos.h", "status": "modified", "additions": 85, "deletions": 91, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v-protos.h?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -21,118 +21,112 @@ Boston, MA 02111-1307, USA.  */\n \n /* External functions called.  */\n \n-extern void override_options\t\tPARAMS ((void));\n+extern void override_options (void);\n #ifdef RTX_CODE\n-extern int short_memory_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int long_memory_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int d30v_memory_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int single_reg_memory_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int const_addr_memory_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int call_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n-extern int gpr_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n-extern int accum_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int gpr_or_accum_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int cr_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n-extern int repeat_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int flag_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n-extern int br_flag_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int br_flag_or_constant_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int gpr_br_flag_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int f0_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n-extern int f1_operand\t\t\tPARAMS ((rtx, enum machine_mode));\n-extern int carry_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int reg_or_0_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int gpr_or_signed6_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int gpr_or_unsigned5_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int gpr_or_unsigned6_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int gpr_or_constant_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int gpr_or_dbl_const_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int gpr_or_memory_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int move_input_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int move_output_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int signed6_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int unsigned5_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int unsigned6_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int bitset_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int condexec_test_operator\tPARAMS ((rtx, enum machine_mode));\n-extern int condexec_branch_operator\tPARAMS ((rtx, enum machine_mode));\n-extern int condexec_unary_operator\tPARAMS ((rtx, enum machine_mode));\n-extern int condexec_addsub_operator\tPARAMS ((rtx, enum machine_mode));\n-extern int condexec_binary_operator\tPARAMS ((rtx, enum machine_mode));\n-extern int condexec_shiftl_operator\tPARAMS ((rtx, enum machine_mode));\n-extern int condexec_extend_operator\tPARAMS ((rtx, enum machine_mode));\n-extern int branch_zero_operator\t\tPARAMS ((rtx, enum machine_mode));\n-extern int cond_move_dest_operand\tPARAMS ((rtx, enum machine_mode));\n-extern int cond_move_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int cond_exec_operand\t\tPARAMS ((rtx, enum machine_mode));\n-extern int srelational_si_operator\tPARAMS ((rtx, enum machine_mode));\n-extern int urelational_si_operator\tPARAMS ((rtx, enum machine_mode));\n-extern int relational_di_operator\tPARAMS ((rtx, enum machine_mode));\n+extern int short_memory_operand (rtx, enum machine_mode);\n+extern int long_memory_operand (rtx, enum machine_mode);\n+extern int d30v_memory_operand (rtx, enum machine_mode);\n+extern int single_reg_memory_operand (rtx, enum machine_mode);\n+extern int const_addr_memory_operand (rtx, enum machine_mode);\n+extern int call_operand (rtx, enum machine_mode);\n+extern int gpr_operand (rtx, enum machine_mode);\n+extern int accum_operand (rtx, enum machine_mode);\n+extern int gpr_or_accum_operand (rtx, enum machine_mode);\n+extern int cr_operand (rtx, enum machine_mode);\n+extern int repeat_operand (rtx, enum machine_mode);\n+extern int flag_operand (rtx, enum machine_mode);\n+extern int br_flag_operand (rtx, enum machine_mode);\n+extern int br_flag_or_constant_operand (rtx, enum machine_mode);\n+extern int gpr_br_flag_operand (rtx, enum machine_mode);\n+extern int f0_operand (rtx, enum machine_mode);\n+extern int f1_operand (rtx, enum machine_mode);\n+extern int carry_operand (rtx, enum machine_mode);\n+extern int reg_or_0_operand (rtx, enum machine_mode);\n+extern int gpr_or_signed6_operand (rtx, enum machine_mode);\n+extern int gpr_or_unsigned5_operand (rtx, enum machine_mode);\n+extern int gpr_or_unsigned6_operand (rtx, enum machine_mode);\n+extern int gpr_or_constant_operand (rtx, enum machine_mode);\n+extern int gpr_or_dbl_const_operand (rtx, enum machine_mode);\n+extern int gpr_or_memory_operand (rtx, enum machine_mode);\n+extern int move_input_operand (rtx, enum machine_mode);\n+extern int move_output_operand (rtx, enum machine_mode);\n+extern int signed6_operand (rtx, enum machine_mode);\n+extern int unsigned5_operand (rtx, enum machine_mode);\n+extern int unsigned6_operand (rtx, enum machine_mode);\n+extern int bitset_operand (rtx, enum machine_mode);\n+extern int condexec_test_operator (rtx, enum machine_mode);\n+extern int condexec_branch_operator (rtx, enum machine_mode);\n+extern int condexec_unary_operator (rtx, enum machine_mode);\n+extern int condexec_addsub_operator (rtx, enum machine_mode);\n+extern int condexec_binary_operator (rtx, enum machine_mode);\n+extern int condexec_shiftl_operator (rtx, enum machine_mode);\n+extern int condexec_extend_operator (rtx, enum machine_mode);\n+extern int branch_zero_operator (rtx, enum machine_mode);\n+extern int cond_move_dest_operand (rtx, enum machine_mode);\n+extern int cond_move_operand (rtx, enum machine_mode);\n+extern int cond_exec_operand (rtx, enum machine_mode);\n+extern int srelational_si_operator (rtx, enum machine_mode);\n+extern int urelational_si_operator (rtx, enum machine_mode);\n+extern int relational_di_operator (rtx, enum machine_mode);\n #endif\n-extern d30v_stack_t *d30v_stack_info\tPARAMS ((void));\n-extern int direct_return\t\tPARAMS ((void));\n+extern d30v_stack_t *d30v_stack_info (void);\n+extern int direct_return (void);\n \n #ifdef TREE_CODE\n #ifdef RTX_CODE\n-extern void d30v_init_cumulative_args\tPARAMS ((CUMULATIVE_ARGS *, tree,\n-\t\t\t\t\t\t rtx, tree, int));\n+extern void d30v_init_cumulative_args (CUMULATIVE_ARGS *, tree,\n+\t\t\t\t       rtx, tree, int);\n #endif\n-extern int d30v_function_arg_boundary\tPARAMS ((enum machine_mode, tree));\n+extern int d30v_function_arg_boundary (enum machine_mode, tree);\n #ifdef RTX_CODE\n-extern rtx d30v_function_arg\t\tPARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t enum machine_mode,\n-\t\t\t\t\t\t tree, int, int));\n+extern rtx d30v_function_arg (CUMULATIVE_ARGS *,\n+\t\t\t      enum machine_mode, tree, int, int);\n #endif\n-extern int d30v_function_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t    enum machine_mode,\n-\t\t\t\t\t\t    tree, int));\n+extern int d30v_function_arg_partial_nregs (CUMULATIVE_ARGS *,\n+\t\t\t\t\t    enum machine_mode, tree, int);\n \n-extern int d30v_function_arg_pass_by_reference PARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t\tenum machine_mode,\n-\t\t\t\t\t\t\ttree, int));\n+extern int d30v_function_arg_pass_by_reference (CUMULATIVE_ARGS *,\n+\t\t\t\t\t\tenum machine_mode, tree, int);\n \n-extern void d30v_function_arg_advance\tPARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t enum machine_mode,\n-\t\t\t\t\t\t tree, int));\n+extern void d30v_function_arg_advance (CUMULATIVE_ARGS *,\n+\t\t\t\t       enum machine_mode, tree, int);\n #endif\n \n #ifdef RTX_CODE\n-extern rtx d30v_expand_builtin_saveregs\tPARAMS ((void));\n+extern rtx d30v_expand_builtin_saveregs (void);\n #endif\n #ifdef TREE_CODE\n-extern void d30v_setup_incoming_varargs\tPARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t enum machine_mode,\n-\t\t\t\t\t\t tree, int *, int));\n+extern void d30v_setup_incoming_varargs (CUMULATIVE_ARGS *,\n+\t\t\t\t\t enum machine_mode, tree, int *, int);\n #ifdef RTX_CODE\n-extern void d30v_expand_builtin_va_start PARAMS ((tree, rtx));\n-extern rtx d30v_expand_builtin_va_arg\tPARAMS ((tree, tree));\n-#endif\t/* RTX_CODE */\n-#endif\t/* TREE_CODE */\n-\n-extern void d30v_expand_prologue\tPARAMS ((void));\n-extern void d30v_expand_epilogue\tPARAMS ((void));\n-extern void d30v_function_profiler\tPARAMS ((FILE *, int));\n+extern void d30v_expand_builtin_va_start (tree, rtx);\n+extern rtx d30v_expand_builtin_va_arg (tree, tree);\n+#endif /* RTX_CODE */\n+#endif /* TREE_CODE */\n+\n+extern void d30v_expand_prologue (void);\n+extern void d30v_expand_epilogue (void);\n+extern void d30v_function_profiler (FILE *, int);\n #ifdef RTX_CODE\n-extern void d30v_split_double\t\tPARAMS ((rtx, rtx *, rtx *));\n-extern void d30v_print_operand\t\tPARAMS ((FILE *, rtx, int));\n-extern void d30v_print_operand_address\tPARAMS ((FILE *, rtx));\n+extern void d30v_split_double (rtx, rtx *, rtx *);\n+extern void d30v_print_operand (FILE *, rtx, int);\n+extern void d30v_print_operand_address (FILE *, rtx);\n #endif\n-extern int d30v_trampoline_size\t\tPARAMS ((void));\n+extern int d30v_trampoline_size (void);\n #ifdef RTX_CODE\n-extern void d30v_initialize_trampoline\tPARAMS ((rtx, rtx, rtx));\n-extern int d30v_legitimate_address_p\tPARAMS ((enum machine_mode, rtx, int));\n-extern rtx d30v_legitimize_address\tPARAMS ((rtx, rtx,\n-\t\t\t\t\t\t enum machine_mode, int));\n-extern int d30v_mode_dependent_address_p PARAMS ((rtx));\n-extern rtx d30v_emit_comparison\t\tPARAMS ((int, rtx, rtx, rtx));\n-extern const char *d30v_move_2words\tPARAMS ((rtx *, rtx));\n-extern int d30v_emit_cond_move\t\tPARAMS ((rtx, rtx, rtx, rtx));\n-extern rtx d30v_return_addr\t\tPARAMS ((void));\n+extern void d30v_initialize_trampoline (rtx, rtx, rtx);\n+extern int d30v_legitimate_address_p (enum machine_mode, rtx, int);\n+extern rtx d30v_legitimize_address (rtx, rtx, enum machine_mode, int);\n+extern int d30v_mode_dependent_address_p (rtx);\n+extern rtx d30v_emit_comparison (int, rtx, rtx, rtx);\n+extern const char *d30v_move_2words (rtx *, rtx);\n+extern int d30v_emit_cond_move (rtx, rtx, rtx, rtx);\n+extern rtx d30v_return_addr (void);\n #endif\n-extern void d30v_init_expanders\t\tPARAMS ((void));\n-extern void debug_stack_info\t\tPARAMS ((d30v_stack_t *));\n-\n+extern void d30v_init_expanders (void);\n+extern void debug_stack_info (d30v_stack_t *);\n \f\n+\n /* External variables referenced */\n \n /* Define the information needed to generate branch and scc insns.  This is"}, {"sha": "5794d0bb64f615a2bd7fde2791f80af5808ba986", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -46,16 +46,15 @@\n #include \"target-def.h\"\n #include \"langhooks.h\"\n \n-static void d30v_print_operand_memory_reference PARAMS ((FILE *, rtx));\n-static void d30v_build_long_insn PARAMS ((HOST_WIDE_INT, HOST_WIDE_INT,\n-\t\t\t\t\t  rtx, rtx));\n-static struct machine_function * d30v_init_machine_status PARAMS ((void));\n-static void d30v_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void d30v_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static int d30v_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n-static int d30v_issue_rate PARAMS ((void));\n-static bool d30v_rtx_costs PARAMS ((rtx, int, int, int *));\n-static tree d30v_build_builtin_va_list PARAMS ((void));\n+static void d30v_print_operand_memory_reference (FILE *, rtx);\n+static void d30v_build_long_insn (HOST_WIDE_INT, HOST_WIDE_INT, rtx, rtx);\n+static struct machine_function * d30v_init_machine_status (void);\n+static void d30v_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void d30v_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static int d30v_adjust_cost (rtx, rtx, rtx, int);\n+static int d30v_issue_rate (void);\n+static bool d30v_rtx_costs (rtx, int, int, int *);\n+static tree d30v_build_builtin_va_list (void);\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */"}, {"sha": "802c69b62ec8e50d5a0349eeff040a719608c302", "filename": "gcc/config/dsp16xx/dsp16xx-protos.h", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx-protos.h?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -20,67 +20,67 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #ifdef RTX_CODE\n-extern struct rtx_def *gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n-extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n-extern int arith_reg_operand PARAMS ((rtx, enum machine_mode));\n-extern int symbolic_address_operand PARAMS ((rtx, enum machine_mode));\n-extern int Y_address_operand PARAMS ((rtx, enum machine_mode));\n-extern int sp_operand PARAMS ((rtx, enum machine_mode));\n-extern int sp_operand2 PARAMS ((rtx, enum machine_mode));\n-extern int nonmemory_arith_operand PARAMS ((rtx, enum machine_mode));\n-extern int dsp16xx_comparison_operator PARAMS ((rtx, enum machine_mode));\n-extern int unx_comparison_operator PARAMS ((rtx, enum machine_mode));\n-extern int signed_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern struct rtx_def *gen_compare_reg (enum rtx_code, rtx, rtx);\n+extern int call_address_operand (rtx, enum machine_mode);\n+extern int arith_reg_operand (rtx, enum machine_mode);\n+extern int symbolic_address_operand (rtx, enum machine_mode);\n+extern int Y_address_operand (rtx, enum machine_mode);\n+extern int sp_operand (rtx, enum machine_mode);\n+extern int sp_operand2 (rtx, enum machine_mode);\n+extern int nonmemory_arith_operand (rtx, enum machine_mode);\n+extern int dsp16xx_comparison_operator (rtx, enum machine_mode);\n+extern int unx_comparison_operator (rtx, enum machine_mode);\n+extern int signed_comparison_operator (rtx, enum machine_mode);\n \n-extern void notice_update_cc PARAMS ((rtx));\n-extern void double_reg_from_memory PARAMS ((rtx[]));\n-extern void double_reg_to_memory PARAMS ((rtx[]));\n-extern enum rtx_code next_cc_user_code PARAMS ((rtx));\n-extern int next_cc_user_unsigned PARAMS ((rtx));\n-extern struct rtx_def *gen_tst_reg PARAMS ((rtx));\n-extern const char *output_block_move PARAMS ((rtx[]));\n-extern enum reg_class preferred_reload_class PARAMS ((rtx, enum reg_class));\n-extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n-\t\t\t\t\t\t      enum machine_mode, rtx));\n-extern int emit_move_sequence PARAMS ((rtx *, enum machine_mode));\n-extern void print_operand PARAMS ((FILE *, rtx, int));\n-extern void print_operand_address PARAMS ((FILE *, rtx));\n-extern void output_dsp16xx_float_const PARAMS ((rtx *));\n-extern void emit_1600_core_shift PARAMS ((enum rtx_code, rtx *, int));\n-extern int symbolic_address_p PARAMS ((rtx));\n-extern int uns_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern void notice_update_cc (rtx);\n+extern void double_reg_from_memory (rtx[]);\n+extern void double_reg_to_memory (rtx[]);\n+extern enum rtx_code next_cc_user_code (rtx);\n+extern int next_cc_user_unsigned (rtx);\n+extern struct rtx_def *gen_tst_reg (rtx);\n+extern const char *output_block_move (rtx[]);\n+extern enum reg_class preferred_reload_class (rtx, enum reg_class);\n+extern enum reg_class secondary_reload_class (enum reg_class,\n+\t\t\t\t\t      enum machine_mode, rtx);\n+extern int emit_move_sequence (rtx *, enum machine_mode);\n+extern void print_operand (FILE *, rtx, int);\n+extern void print_operand_address (FILE *, rtx);\n+extern void output_dsp16xx_float_const (rtx *);\n+extern void emit_1600_core_shift (enum rtx_code, rtx *, int);\n+extern int symbolic_address_p (rtx);\n+extern int uns_comparison_operator (rtx, enum machine_mode);\n #endif /* RTX_CODE */\n \n \n #ifdef TREE_CODE\n-extern struct rtx_def *dsp16xx_function_arg PARAMS ((CUMULATIVE_ARGS,\n-\t\t\t\t\t\t     enum machine_mode,\n-\t\t\t\t\t\t     tree, int));\n-extern void dsp16xx_function_arg_advance PARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t  enum machine_mode,\n-\t\t\t\t\t\t  tree, int));\n+extern struct rtx_def *dsp16xx_function_arg (CUMULATIVE_ARGS,\n+\t\t\t\t\t     enum machine_mode,\n+\t\t\t\t\t     tree, int);\n+extern void dsp16xx_function_arg_advance (CUMULATIVE_ARGS *,\n+\t\t\t\t\t  enum machine_mode,\n+\t\t\t\t\t  tree, int);\n #endif /* TREE_CODE */\n \n-extern void dsp16xx_invalid_register_for_compare PARAMS ((void));\n-extern int class_max_nregs PARAMS ((enum reg_class, enum machine_mode));\n-extern enum reg_class limit_reload_class PARAMS ((enum reg_class, enum machine_mode));\n-extern int dsp16xx_register_move_cost PARAMS ((enum reg_class, enum reg_class));\n-extern int dsp16xx_makes_calls PARAMS ((void));\n-extern long compute_frame_size PARAMS ((int));\n-extern int dsp16xx_call_saved_register PARAMS ((int));\n-extern int dsp16xx_call_saved_register PARAMS ((int));\n-extern void init_emulation_routines PARAMS ((void));\n-extern int ybase_regs_ever_used PARAMS ((void));\n-extern void override_options PARAMS ((void));\n-extern int dsp16xx_starting_frame_offset PARAMS ((void));\n-extern int initial_frame_pointer_offset PARAMS ((void));\n-extern void asm_output_common PARAMS ((FILE *, const char *, int, int));\n-extern void asm_output_local PARAMS ((FILE *, const char *, int, int));\n-extern void asm_output_float PARAMS ((FILE *, double));\n+extern void dsp16xx_invalid_register_for_compare (void);\n+extern int class_max_nregs (enum reg_class, enum machine_mode);\n+extern enum reg_class limit_reload_class (enum reg_class, enum machine_mode);\n+extern int dsp16xx_register_move_cost (enum reg_class, enum reg_class);\n+extern int dsp16xx_makes_calls (void);\n+extern long compute_frame_size (int);\n+extern int dsp16xx_call_saved_register (int);\n+extern int dsp16xx_call_saved_register (int);\n+extern void init_emulation_routines (void);\n+extern int ybase_regs_ever_used (void);\n+extern void override_options (void);\n+extern int dsp16xx_starting_frame_offset (void);\n+extern int initial_frame_pointer_offset (void);\n+extern void asm_output_common (FILE *, const char *, int, int);\n+extern void asm_output_local (FILE *, const char *, int, int);\n+extern void asm_output_float (FILE *, double);\n extern bool dsp16xx_compare_gen;\n-extern int hard_regno_mode_ok PARAMS ((int, enum machine_mode));\n-extern enum reg_class dsp16xx_reg_class_from_letter PARAMS ((int));\n-extern int regno_reg_class PARAMS ((int));\n-extern void function_prologue PARAMS ((FILE *, int));\n-extern void function_epilogue PARAMS ((FILE *, int));\n-extern int num_1600_core_shifts PARAMS ((int));\n+extern int hard_regno_mode_ok (int, enum machine_mode);\n+extern enum reg_class dsp16xx_reg_class_from_letter (int);\n+extern int regno_reg_class (int);\n+extern void function_prologue (FILE *, int);\n+extern void function_epilogue (FILE *, int);\n+extern int num_1600_core_shifts (int);"}, {"sha": "14d9c5e088e21515d56ee000fcf17e1d2407c8ee", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -148,12 +148,12 @@ static const char *const lshift_right_asm_first[] =\n   \"%0=%1>>16\\n\\t%0=%b0&0x0000\"\n };\n \n-static int reg_save_size PARAMS ((void));\n-static void dsp16xx_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void dsp16xx_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void dsp16xx_file_start PARAMS ((void));\n-static bool dsp16xx_rtx_costs PARAMS ((rtx, int, int, int *));\n-static int dsp16xx_address_cost PARAMS ((rtx));\n+static int reg_save_size (void);\n+static void dsp16xx_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void dsp16xx_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static void dsp16xx_file_start (void);\n+static bool dsp16xx_rtx_costs (rtx, int, int, int *);\n+static int dsp16xx_address_cost (rtx);\n \f\n /* Initialize the GCC target structure.  */\n "}, {"sha": "a7119042dd554ea86d353bb1170a8932b528a4b7", "filename": "gcc/config/fr30/fr30-protos.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30-protos.h?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -18,34 +18,34 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void  fr30_expand_prologue PARAMS ((void));\n-extern void  fr30_expand_epilogue PARAMS ((void));\n-extern unsigned int fr30_compute_frame_size PARAMS ((int, int));\n+extern void  fr30_expand_prologue (void);\n+extern void  fr30_expand_epilogue (void);\n+extern unsigned int fr30_compute_frame_size (int, int);\n \n #ifdef RTX_CODE\n-extern int   fr30_check_multiple_regs   PARAMS ((rtx *, int, int));\n-extern void  fr30_print_operand         PARAMS ((FILE *, rtx, int));\n-extern void  fr30_print_operand_address PARAMS ((FILE *, rtx));\n-extern rtx   fr30_move_double\t\tPARAMS ((rtx *));\n+extern int   fr30_check_multiple_regs (rtx *, int, int);\n+extern void  fr30_print_operand (FILE *, rtx, int);\n+extern void  fr30_print_operand_address (FILE *, rtx);\n+extern rtx   fr30_move_double (rtx *);\n #ifdef TREE_CODE\n-extern rtx   fr30_va_arg                PARAMS ((tree, tree));\n+extern rtx   fr30_va_arg (tree, tree);\n #endif /* TREE_CODE */\n #ifdef HAVE_MACHINE_MODES\n #define Mmode enum machine_mode\n-extern int   stack_add_operand          PARAMS ((rtx, Mmode));\n-extern int   add_immediate_operand      PARAMS ((rtx, Mmode));\n-extern int   high_register_operand      PARAMS ((rtx, Mmode));\n-extern int   low_register_operand       PARAMS ((rtx, Mmode));\n-extern int   call_operand               PARAMS ((rtx, Mmode));\n-extern int   di_operand \t\tPARAMS ((rtx, Mmode));\n-extern int   nonimmediate_di_operand \tPARAMS ((rtx, Mmode));\n-extern int   fr30_const_double_is_zero  PARAMS ((rtx));\n+extern int   stack_add_operand (rtx, Mmode);\n+extern int   add_immediate_operand (rtx, Mmode);\n+extern int   high_register_operand (rtx, Mmode);\n+extern int   low_register_operand (rtx, Mmode);\n+extern int   call_operand (rtx, Mmode);\n+extern int   di_operand (rtx, Mmode);\n+extern int   nonimmediate_di_operand (rtx, Mmode);\n+extern int   fr30_const_double_is_zero (rtx);\n #undef Mmode\n #endif /* HAVE_MACHINE_MODES */\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern int   fr30_num_arg_regs               PARAMS ((int, tree));\n-extern int   fr30_function_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS, int, tree, int));\n-extern void  fr30_setup_incoming_varargs     PARAMS ((CUMULATIVE_ARGS, int, tree, int *));\n+extern int   fr30_num_arg_regs (int, tree);\n+extern int   fr30_function_arg_partial_nregs (CUMULATIVE_ARGS, int, tree, int);\n+extern void  fr30_setup_incoming_varargs (CUMULATIVE_ARGS, int, tree, int *);\n #endif /* TREE_CODE */"}, {"sha": "0b83dac26655633e28246e4fd03bd36f34db81a9", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -120,8 +120,8 @@ static struct fr30_frame_info \tcurrent_frame_info;\n /* Zero structure to initialize current_frame_info.  */\n static struct fr30_frame_info \tzero_frame_info;\n \n-static rtx fr30_pass_by_reference PARAMS ((tree, tree));\n-static rtx fr30_pass_by_value PARAMS ((tree, tree));\n+static rtx fr30_pass_by_reference (tree, tree);\n+static rtx fr30_pass_by_value (tree, tree);\n \n #define FRAME_POINTER_MASK \t(1 << (FRAME_POINTER_REGNUM))\n #define RETURN_POINTER_MASK \t(1 << (RETURN_POINTER_REGNUM))"}, {"sha": "666db0b7aa601bcf78890bfc079009cf9f14e4de", "filename": "gcc/config/i370/i370-protos.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fi370%2Fi370-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fi370%2Fi370-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370-protos.h?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -24,32 +24,32 @@ Boston, MA 02111-1307, USA.  */\n #ifndef GCC_I370_PROTOS_H\n #define GCC_I370_PROTOS_H\n \n-extern void override_options PARAMS ((void));\n+extern void override_options (void);\n \n #ifdef RTX_CODE\n-extern int i370_branch_dest PARAMS ((rtx));\n-extern int i370_branch_length PARAMS ((rtx));\n-extern int i370_short_branch PARAMS ((rtx));\n-extern int s_operand PARAMS ((rtx, enum machine_mode));\n-extern int r_or_s_operand PARAMS ((rtx, enum machine_mode));\n-extern int unsigned_jump_follows_p PARAMS ((rtx));\n+extern int i370_branch_dest (rtx);\n+extern int i370_branch_length (rtx);\n+extern int i370_short_branch (rtx);\n+extern int s_operand (rtx, enum machine_mode);\n+extern int r_or_s_operand (rtx, enum machine_mode);\n+extern int unsigned_jump_follows_p (rtx);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern int handle_pragma PARAMS ((int (*)(void), void (*)(int), const char *));\n+extern int handle_pragma (int (*)(void), void (*)(int), const char *);\n #endif /* TREE_CODE */\n \n-extern void mvs_add_label PARAMS ((int));\n-extern int mvs_check_label PARAMS ((int));\n-extern int mvs_check_page PARAMS ((FILE *, int, int));\n-extern int mvs_function_check PARAMS ((const char *));\n-extern void mvs_add_alias PARAMS ((const char *, const char *, int));\n-extern int mvs_need_alias PARAMS ((const char *));\n-extern int mvs_get_alias PARAMS ((const char *, char *));\n-extern int mvs_check_alias PARAMS ((const char *, char *));\n-extern void check_label_emit PARAMS ((void));\n-extern void mvs_free_label_list PARAMS ((void));\n-\n-extern void i370_pr_map PARAMS ((struct cpp_reader *));\n+extern void mvs_add_label (int);\n+extern int mvs_check_label (int);\n+extern int mvs_check_page (FILE *, int, int);\n+extern int mvs_function_check (const char *);\n+extern void mvs_add_alias (const char *, const char *, int);\n+extern int mvs_need_alias (const char *);\n+extern int mvs_get_alias (const char *, char *);\n+extern int mvs_check_alias (const char *, char *);\n+extern void check_label_emit (void);\n+extern void mvs_free_label_list (void);\n+\n+extern void i370_pr_map (struct cpp_reader *);\n \n #endif /* ! GCC_I370_PROTOS_H */"}, {"sha": "2cfe4fe3269013f889dad8d0c4c01b2c5f545723", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -99,22 +99,22 @@ static label_node_t *free_anchor = 0;\n /* Assembler source file descriptor.  */\n static FILE *assembler_source = 0;\n \n-static label_node_t * mvs_get_label PARAMS ((int));\n-static void i370_label_scan PARAMS ((void));\n+static label_node_t * mvs_get_label (int);\n+static void i370_label_scan (void);\n #ifdef TARGET_HLASM\n-static bool i370_hlasm_assemble_integer PARAMS ((rtx, unsigned int, int));\n-static void i370_globalize_label PARAMS ((FILE *, const char *));\n+static bool i370_hlasm_assemble_integer (rtx, unsigned int, int);\n+static void i370_globalize_label (FILE *, const char *);\n #endif\n-static void i370_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void i370_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void i370_file_start PARAMS ((void));\n-static void i370_file_end PARAMS ((void));\n+static void i370_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void i370_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static void i370_file_start (void);\n+static void i370_file_end (void);\n \n #ifdef LONGEXTERNAL\n-static int mvs_hash_alias PARAMS ((const char *));\n+static int mvs_hash_alias (const char *);\n #endif\n-static void i370_internal_label PARAMS ((FILE *, const char *, unsigned long));\n-static bool i370_rtx_costs PARAMS ((rtx, int, int, int *));\n+static void i370_internal_label (FILE *, const char *, unsigned long);\n+static bool i370_rtx_costs (rtx, int, int, int *);\n \n /* ===================================================== */\n /* defines and functions specific to the HLASM assembler */"}, {"sha": "269a40be19cbbd99622c0cd221a1e2788cbd1c2a", "filename": "gcc/config/i960/i960-protos.h", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-protos.h?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -26,77 +26,77 @@ Boston, MA 02111-1307, USA.  */\n #define GCC_I960_PROTOS_H\n \n #ifdef RTX_CODE\n-extern struct rtx_def *legitimize_address PARAMS ((rtx, rtx, enum machine_mode));\n+extern struct rtx_def *legitimize_address (rtx, rtx, enum machine_mode);\n /* Define the function that build the compare insn for scc and bcc.  */\n \n-extern struct rtx_def *gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n+extern struct rtx_def *gen_compare_reg (enum rtx_code, rtx, rtx);\n \n /* Define functions in i960.c and used in insn-output.c.  */\n \n-extern const char *i960_output_ldconst PARAMS ((rtx, rtx));\n-extern const char *i960_output_call_insn PARAMS ((rtx, rtx, rtx, rtx));\n-extern const char *i960_output_ret_insn PARAMS ((rtx));\n-extern const char *i960_output_move_double PARAMS ((rtx, rtx));\n-extern const char *i960_output_move_double_zero PARAMS ((rtx));\n-extern const char *i960_output_move_quad PARAMS ((rtx, rtx));\n-extern const char *i960_output_move_quad_zero PARAMS ((rtx));\n+extern const char *i960_output_ldconst (rtx, rtx);\n+extern const char *i960_output_call_insn (rtx, rtx, rtx, rtx);\n+extern const char *i960_output_ret_insn (rtx);\n+extern const char *i960_output_move_double (rtx, rtx);\n+extern const char *i960_output_move_double_zero (rtx);\n+extern const char *i960_output_move_quad (rtx, rtx);\n+extern const char *i960_output_move_quad_zero (rtx);\n \n-extern int literal PARAMS ((rtx, enum machine_mode));\n-extern int hard_regno_mode_ok PARAMS ((int, enum machine_mode));\n-extern int fp_literal PARAMS ((rtx, enum machine_mode));\n-extern int signed_literal PARAMS ((rtx, enum machine_mode));\n-extern int legitimate_address_p PARAMS ((enum machine_mode, rtx, int));\n-extern void i960_print_operand PARAMS ((FILE *, rtx, int));\n-extern int fpmove_src_operand PARAMS ((rtx, enum machine_mode));\n-extern int arith_operand PARAMS ((rtx, enum machine_mode));\n-extern int logic_operand PARAMS ((rtx, enum machine_mode));\n-extern int fp_arith_operand PARAMS ((rtx, enum machine_mode));\n-extern int signed_arith_operand PARAMS ((rtx, enum machine_mode));\n-extern int fp_literal_one PARAMS ((rtx, enum machine_mode));\n-extern int fp_literal_zero PARAMS ((rtx, enum machine_mode));\n-extern int symbolic_memory_operand PARAMS ((rtx, enum machine_mode));\n-extern int eq_or_neq PARAMS ((rtx, enum machine_mode));\n-extern int arith32_operand PARAMS ((rtx, enum machine_mode));\n-extern int power2_operand PARAMS ((rtx, enum machine_mode));\n-extern int cmplpower2_operand PARAMS ((rtx, enum machine_mode));\n-extern enum machine_mode select_cc_mode PARAMS ((RTX_CODE, rtx));\n-extern int emit_move_sequence PARAMS ((rtx *, enum machine_mode));\n-extern int i960_bypass PARAMS ((rtx, rtx, rtx, int));\n-extern void i960_print_operand_addr PARAMS ((FILE *, rtx));\n-extern int i960_expr_alignment PARAMS ((rtx, int));\n-extern int i960_improve_align PARAMS ((rtx, rtx, int));\n-extern int i960_si_ti PARAMS ((rtx, rtx));\n-extern int i960_si_di PARAMS ((rtx, rtx));\n+extern int literal (rtx, enum machine_mode);\n+extern int hard_regno_mode_ok (int, enum machine_mode);\n+extern int fp_literal (rtx, enum machine_mode);\n+extern int signed_literal (rtx, enum machine_mode);\n+extern int legitimate_address_p (enum machine_mode, rtx, int);\n+extern void i960_print_operand (FILE *, rtx, int);\n+extern int fpmove_src_operand (rtx, enum machine_mode);\n+extern int arith_operand (rtx, enum machine_mode);\n+extern int logic_operand (rtx, enum machine_mode);\n+extern int fp_arith_operand (rtx, enum machine_mode);\n+extern int signed_arith_operand (rtx, enum machine_mode);\n+extern int fp_literal_one (rtx, enum machine_mode);\n+extern int fp_literal_zero (rtx, enum machine_mode);\n+extern int symbolic_memory_operand (rtx, enum machine_mode);\n+extern int eq_or_neq (rtx, enum machine_mode);\n+extern int arith32_operand (rtx, enum machine_mode);\n+extern int power2_operand (rtx, enum machine_mode);\n+extern int cmplpower2_operand (rtx, enum machine_mode);\n+extern enum machine_mode select_cc_mode (RTX_CODE, rtx);\n+extern int emit_move_sequence (rtx *, enum machine_mode);\n+extern int i960_bypass (rtx, rtx, rtx, int);\n+extern void i960_print_operand_addr (FILE *, rtx);\n+extern int i960_expr_alignment (rtx, int);\n+extern int i960_improve_align (rtx, rtx, int);\n+extern int i960_si_ti (rtx, rtx);\n+extern int i960_si_di (rtx, rtx);\n #ifdef TREE_CODE\n-extern struct rtx_def *i960_function_arg PARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t\t  enum machine_mode,\n-\t\t\t\t\t\t  tree, int));\n-extern rtx i960_va_arg PARAMS ((tree, tree));\n-extern void i960_va_start PARAMS ((tree, rtx));\n+extern struct rtx_def *i960_function_arg (CUMULATIVE_ARGS *,\n+\t\t\t\t\t  enum machine_mode,\n+\t\t\t\t\t  tree, int);\n+extern rtx i960_va_arg (tree, tree);\n+extern void i960_va_start (tree, rtx);\n #endif /* TREE_CODE */\n-extern enum reg_class secondary_reload_class PARAMS ((enum reg_class, enum machine_mode, rtx));\n+extern enum reg_class secondary_reload_class (enum reg_class, enum machine_mode, rtx);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern void i960_function_name_declare PARAMS ((FILE *, const char *, tree));\n-extern void i960_function_arg_advance PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n-extern int i960_round_align PARAMS ((int, tree));\n-extern void i960_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int));\n-extern int i960_final_reg_parm_stack_space PARAMS ((int, tree));\n-extern int i960_reg_parm_stack_space PARAMS ((tree));\n+extern void i960_function_name_declare (FILE *, const char *, tree);\n+extern void i960_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n+extern int i960_round_align (int, tree);\n+extern void i960_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int);\n+extern int i960_final_reg_parm_stack_space (int, tree);\n+extern int i960_reg_parm_stack_space (tree);\n #endif /* TREE_CODE */\n \n-extern int process_pragma PARAMS ((int(*)(void), void(*)(int), const char *));\n-extern int i960_object_bytes_bitalign PARAMS ((int));\n-extern void i960_initialize PARAMS ((void));\n-extern int bitpos PARAMS ((unsigned int));\n-extern int is_mask PARAMS ((unsigned int));\n-extern int bitstr PARAMS ((unsigned int, int *, int *));\n-extern int compute_frame_size PARAMS ((int));\n-extern void output_function_profiler PARAMS ((FILE *, int));\n-extern void i960_scan_opcode PARAMS ((const char *));\n+extern int process_pragma (int(*)(void), void(*)(int), const char *);\n+extern int i960_object_bytes_bitalign (int);\n+extern void i960_initialize (void);\n+extern int bitpos (unsigned int);\n+extern int is_mask (unsigned int);\n+extern int bitstr (unsigned int, int *, int *);\n+extern int compute_frame_size (int);\n+extern void output_function_profiler (FILE *, int);\n+extern void i960_scan_opcode (const char *);\n \n-extern void i960_pr_align PARAMS ((struct cpp_reader *));\n-extern void i960_pr_noalign PARAMS ((struct cpp_reader *));\n+extern void i960_pr_align (struct cpp_reader *);\n+extern void i960_pr_noalign (struct cpp_reader *);\n \n #endif /* ! GCC_I960_PROTOS_H  */"}, {"sha": "3d976b65fd4e32d732cb6693235f71cd18d87bcb", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -46,12 +46,12 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"target-def.h\"\n \n-static void i960_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void i960_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void i960_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n-\t\t\t\t\t  HOST_WIDE_INT, tree));\n-static bool i960_rtx_costs PARAMS ((rtx, int, int, int *));\n-static int i960_address_cost PARAMS ((rtx));\n+static void i960_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void i960_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static void i960_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t  HOST_WIDE_INT, tree);\n+static bool i960_rtx_costs (rtx, int, int, int *);\n+static int i960_address_cost (rtx);\n static tree i960_build_builtin_va_list (void);\n \n /* Save the operands last given to a compare for use when we\n@@ -1235,10 +1235,10 @@ struct reg_group\n   char length;\n };\n \n-static int i960_form_reg_groups PARAMS ((int, int, int *, int, struct reg_group *));\n-static int i960_reg_group_compare PARAMS ((const void *, const void *));\n-static int i960_split_reg_group PARAMS ((struct reg_group *, int, int));\n-static void i960_arg_size_and_align PARAMS ((enum machine_mode, tree, int *, int *));\n+static int i960_form_reg_groups (int, int, int *, int, struct reg_group *);\n+static int i960_reg_group_compare (const void *, const void *);\n+static int i960_split_reg_group (struct reg_group *, int, int);\n+static void i960_arg_size_and_align (enum machine_mode, tree, int *, int *);\n \n /* The following functions forms the biggest as possible register\n    groups with registers in STATE.  REGS contain states of the"}, {"sha": "e831f2f90a76ec4b4af8c204fc9f4e175fefc4f8", "filename": "gcc/config/ip2k/ip2k-protos.h", "status": "modified", "additions": 48, "deletions": 56, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k-protos.h?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -18,75 +18,67 @@\n    the Free Software Foundation, 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n-extern void function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-extern void function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-extern int find_one_set_bit_p PARAMS ((HOST_WIDE_INT));\n-extern int find_one_clear_bit_p PARAMS ((HOST_WIDE_INT));\n+extern void function_prologue (FILE *, HOST_WIDE_INT);\n+extern void function_epilogue (FILE *, HOST_WIDE_INT);\n+extern int find_one_set_bit_p (HOST_WIDE_INT);\n+extern int find_one_clear_bit_p (HOST_WIDE_INT);\n \n #ifdef TREE_CODE\n-extern void unique_section PARAMS ((tree, int));\n-extern void asm_output_section_name PARAMS ((FILE *, tree, const char *,\n-\t\t\t\t\t     int));\n-extern int valid_machine_type_attribute PARAMS ((tree, tree, tree, tree));\n-extern int valid_machine_decl_attribute PARAMS ((tree, tree, tree, tree));\n-extern int ip2k_return_pops_args PARAMS ((tree, tree, int));\n+extern void unique_section (tree, int);\n+extern void asm_output_section_name (FILE *, tree, const char *, int);\n+extern int valid_machine_type_attribute (tree, tree, tree, tree);\n+extern int valid_machine_decl_attribute (tree, tree, tree, tree);\n+extern int ip2k_return_pops_args (tree, tree, int);\n #endif /* TREE_CODE */\n \n #ifdef RTX_CODE\n-extern int legitimate_address_p PARAMS ((enum machine_mode, rtx, int));\n-extern int ip2k_extra_constraint PARAMS ((rtx, int));\n-extern rtx legitimize_address PARAMS ((rtx, rtx, enum machine_mode, rtx));\n-extern int adjust_insn_length PARAMS ((rtx insn, int len));\n-extern void asm_output_char PARAMS ((FILE *, rtx));\n-extern void asm_output_short PARAMS ((FILE *, rtx));\n-extern void asm_output_byte PARAMS ((FILE *, int));\n-extern void print_operand PARAMS ((FILE *, rtx, int));\n-extern void print_operand_address PARAMS ((FILE *, rtx));\n-extern int ip2k_jump_mode PARAMS ((rtx, rtx));\n-extern void ip2k_split_words PARAMS ((enum machine_mode, enum machine_mode,\n-\t\t\t\t      rtx *));\n-extern rtx ip2k_get_low_half PARAMS ((rtx, enum machine_mode));\n-extern rtx ip2k_get_high_half PARAMS ((rtx, enum machine_mode));\n-extern int ip2k_nonptr_operand PARAMS ((rtx, enum machine_mode));\n-extern int ip2k_ptr_operand PARAMS ((rtx, enum machine_mode));\n-extern int ip2k_ip_operand PARAMS ((rtx, enum machine_mode));\n-extern int ip2k_short_operand PARAMS ((rtx, enum machine_mode));\n-extern int ip2k_gen_operand PARAMS ((rtx, enum machine_mode));\n-extern int ip2k_nonsp_reg_operand PARAMS ((rtx, enum machine_mode));\n-extern int ip2k_symbol_ref_operand PARAMS ((rtx, enum machine_mode));\n-extern const char *ip2k_set_compare PARAMS ((rtx, rtx));\n-extern const char *ip2k_gen_sCOND PARAMS ((rtx, enum rtx_code, rtx));\n-extern const char *ip2k_gen_signed_comp_branch PARAMS ((rtx,\n-\t\t\t\t\t\t\tenum rtx_code,\n-\t\t\t\t\t\t\trtx));\n-extern const char *ip2k_gen_unsigned_comp_branch PARAMS ((rtx,\n-\t\t\t\t\t\t\t  enum rtx_code,\n-\t\t\t\t\t\t\t  rtx));\n-extern int is_regfile_address PARAMS ((rtx));\n-extern int ip2k_mode_dependent_address PARAMS ((rtx));\n-extern int ip2k_address_uses_reg_p PARAMS ((rtx, unsigned int));\n-extern int ip2k_xexp_not_uses_reg_p PARAMS ((rtx, unsigned int, int));\n-extern int ip2k_composite_xexp_not_uses_reg_p PARAMS ((rtx, unsigned int, int));\n-extern int ip2k_composite_xexp_not_uses_cc0_p PARAMS ((rtx));\n-extern int ip2k_signed_comparison_operator PARAMS ((rtx,\n-\t\t\t\t\t\t    enum machine_mode));\n-extern int ip2k_unsigned_comparison_operator PARAMS ((rtx,\n-\t\t\t\t\t\t      enum machine_mode));\n-extern int ip2k_unary_operator PARAMS ((rtx, enum machine_mode));\n-extern int ip2k_binary_operator PARAMS ((rtx, enum machine_mode));\n+extern int legitimate_address_p (enum machine_mode, rtx, int);\n+extern int ip2k_extra_constraint (rtx, int);\n+extern rtx legitimize_address (rtx, rtx, enum machine_mode, rtx);\n+extern int adjust_insn_length (rtx insn, int len);\n+extern void asm_output_char (FILE *, rtx);\n+extern void asm_output_short (FILE *, rtx);\n+extern void asm_output_byte (FILE *, int);\n+extern void print_operand (FILE *, rtx, int);\n+extern void print_operand_address (FILE *, rtx);\n+extern int ip2k_jump_mode (rtx, rtx);\n+extern void ip2k_split_words (enum machine_mode, enum machine_mode, rtx *);\n+extern rtx ip2k_get_low_half (rtx, enum machine_mode);\n+extern rtx ip2k_get_high_half (rtx, enum machine_mode);\n+extern int ip2k_nonptr_operand (rtx, enum machine_mode);\n+extern int ip2k_ptr_operand (rtx, enum machine_mode);\n+extern int ip2k_ip_operand (rtx, enum machine_mode);\n+extern int ip2k_short_operand (rtx, enum machine_mode);\n+extern int ip2k_gen_operand (rtx, enum machine_mode);\n+extern int ip2k_nonsp_reg_operand (rtx, enum machine_mode);\n+extern int ip2k_symbol_ref_operand (rtx, enum machine_mode);\n+extern const char *ip2k_set_compare (rtx, rtx);\n+extern const char *ip2k_gen_sCOND (rtx, enum rtx_code, rtx);\n+extern const char *ip2k_gen_signed_comp_branch (rtx, enum rtx_code, rtx);\n+extern const char *ip2k_gen_unsigned_comp_branch (rtx, enum rtx_code, rtx);\n+extern int is_regfile_address (rtx);\n+extern int ip2k_mode_dependent_address (rtx);\n+extern int ip2k_address_uses_reg_p (rtx, unsigned int);\n+extern int ip2k_xexp_not_uses_reg_p (rtx, unsigned int, int);\n+extern int ip2k_composite_xexp_not_uses_reg_p (rtx, unsigned int, int);\n+extern int ip2k_composite_xexp_not_uses_cc0_p (rtx);\n+extern int ip2k_signed_comparison_operator (rtx, enum machine_mode);\n+extern int ip2k_unsigned_comparison_operator (rtx, enum machine_mode);\n+extern int ip2k_unary_operator (rtx, enum machine_mode);\n+extern int ip2k_binary_operator (rtx, enum machine_mode);\n \n extern rtx ip2k_compare_operands[3];\n #endif /* RTX_CODE */\n \n #ifdef HAVE_MACHINE_MODES\n-extern int class_max_nregs PARAMS ((enum reg_class, enum machine_mode));\n-extern enum reg_class class_likely_spilled_p PARAMS ((int c));\n+extern int class_max_nregs (enum reg_class, enum machine_mode);\n+extern enum reg_class class_likely_spilled_p (int c);\n #endif /* HAVE_MACHINE_MODES */\n \n #ifdef REAL_VALUE_TYPE\n-extern void asm_output_float PARAMS ((FILE *, REAL_VALUE_TYPE));\n+extern void asm_output_float (FILE *, REAL_VALUE_TYPE);\n #endif \n \n-extern int ip2k_init_elim_offset PARAMS ((int, int));\n-extern void ip2k_init_local_alloc PARAMS ((int *));\n+extern int ip2k_init_elim_offset (int, int);\n+extern void ip2k_init_local_alloc (int *);\n "}, {"sha": "f11cfd18a1364b971a671c9cabf652ad528e6027", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -54,35 +54,33 @@\n    the stack offsets.  Isolate the decision process into a simple macro.  */\n #define CHAIN_FRAMES (frame_pointer_needed || FRAME_POINTER_REQUIRED)\n \n-static int ip2k_naked_function_p PARAMS ((tree));\n+static int ip2k_naked_function_p (tree);\n #ifdef IP2K_MD_REORG_PASS\n-static void mdr_resequence_xy_yx PARAMS ((rtx));\n-static void mdr_pres_replace_and_recurse PARAMS ((rtx, rtx, rtx));\n-static void mdr_propagate_reg_equivs_sequence PARAMS ((rtx, rtx, rtx));\n-static void mdr_propagate_reg_equivs PARAMS ((rtx));\n-static int track_dp_reload PARAMS ((rtx , rtx *, int , int));\n-static void mdr_try_dp_reload_elim PARAMS ((rtx));\n-static void mdr_try_move_dp_reload PARAMS ((rtx));\n-static void mdr_try_move_pushes PARAMS ((rtx));\n-static void mdr_try_propagate_clr_sequence PARAMS ((rtx, unsigned int));\n-static void mdr_try_propagate_clr PARAMS ((rtx));\n-static void mdr_try_propagate_move_sequence PARAMS ((rtx, rtx, rtx));\n-static void mdr_try_propagate_move PARAMS ((rtx));\n-static void mdr_try_remove_redundant_insns PARAMS ((rtx));\n-static int track_w_reload PARAMS ((rtx, rtx *, int , int));\n-static void mdr_try_wreg_elim PARAMS ((rtx));\n+static void mdr_resequence_xy_yx (rtx);\n+static void mdr_pres_replace_and_recurse (rtx, rtx, rtx);\n+static void mdr_propagate_reg_equivs_sequence (rtx, rtx, rtx);\n+static void mdr_propagate_reg_equivs (rtx);\n+static int track_dp_reload (rtx , rtx *, int , int);\n+static void mdr_try_dp_reload_elim (rtx);\n+static void mdr_try_move_dp_reload (rtx);\n+static void mdr_try_move_pushes (rtx);\n+static void mdr_try_propagate_clr_sequence (rtx, unsigned int);\n+static void mdr_try_propagate_clr (rtx);\n+static void mdr_try_propagate_move_sequence (rtx, rtx, rtx);\n+static void mdr_try_propagate_move (rtx);\n+static void mdr_try_remove_redundant_insns (rtx);\n+static int track_w_reload (rtx, rtx *, int , int);\n+static void mdr_try_wreg_elim (rtx);\n #endif /* IP2K_MD_REORG_PASS */\n-static void ip2k_reorg PARAMS ((void));\n-static int ip2k_check_can_adjust_stack_ref PARAMS ((rtx, int));\n-static void ip2k_adjust_stack_ref PARAMS ((rtx *, int));\n-static int ip2k_xexp_not_uses_reg_for_mem PARAMS ((rtx, unsigned int));\n-static tree ip2k_handle_progmem_attribute PARAMS ((tree *, tree, tree, int,\n-\t\t\t\t\t\t   bool *));\n-static tree ip2k_handle_fndecl_attribute PARAMS ((tree *, tree, tree, int,\n-\t\t\t\t\t\t  bool *));\n-static bool ip2k_rtx_costs PARAMS ((rtx, int, int, int *));\n-static int ip2k_address_cost PARAMS ((rtx));\n-static void ip2k_init_libfuncs PARAMS ((void));\n+static void ip2k_reorg (void);\n+static int ip2k_check_can_adjust_stack_ref (rtx, int);\n+static void ip2k_adjust_stack_ref (rtx *, int);\n+static int ip2k_xexp_not_uses_reg_for_mem (rtx, unsigned int);\n+static tree ip2k_handle_progmem_attribute (tree *, tree, tree, int, bool *);\n+static tree ip2k_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n+static bool ip2k_rtx_costs (rtx, int, int, int *);\n+static int ip2k_address_cost (rtx);\n+static void ip2k_init_libfuncs (void);\n \n const struct attribute_spec ip2k_attribute_table[];\n "}, {"sha": "cdd9db3296ae9dd4c1d3b6fdbf9758942bf2685a", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 57, "deletions": 58, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -22,77 +22,76 @@ Boston, MA 02111-1307, USA.  */\n    complications.  */\n #define Mmode enum machine_mode\n \n-extern void   sbss_section\t\t\tPARAMS ((void));\n-extern void   sdata_section\t\t\tPARAMS ((void));\n-extern void   m32r_init\t\t\t\tPARAMS ((void));\n-extern void   m32r_init_expanders\t\tPARAMS ((void));\n-extern unsigned m32r_compute_frame_size\t\tPARAMS ((int));\n-extern int    m32r_first_insn_address\t\tPARAMS ((void));\n-extern void   m32r_expand_prologue\t\tPARAMS ((void));\n-extern void   m32r_finalize_pic\t\t\tPARAMS ((void));\n-extern int    direct_return \t\t\tPARAMS ((void));\n+extern void   sbss_section (void);\n+extern void   sdata_section (void);\n+extern void   m32r_init (void);\n+extern void   m32r_init_expanders (void);\n+extern unsigned m32r_compute_frame_size (int);\n+extern int    m32r_first_insn_address (void);\n+extern void   m32r_expand_prologue (void);\n+extern void   m32r_finalize_pic (void);\n+extern int    direct_return (void);\n #ifdef TREE_CODE\n-extern enum m32r_function_type m32r_compute_function_type PARAMS ((tree));\n+extern enum m32r_function_type m32r_compute_function_type (tree);\n \n #ifdef HAVE_MACHINE_MODES\n-extern void   m32r_setup_incoming_varargs\tPARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int *, int));\n-extern int    function_arg_partial_nregs\tPARAMS ((CUMULATIVE_ARGS *, Mmode, tree, int));\n+extern void   m32r_setup_incoming_varargs (CUMULATIVE_ARGS *, Mmode, tree, int *, int);\n+extern int    function_arg_partial_nregs (CUMULATIVE_ARGS *, Mmode, tree, int);\n #endif\n #endif /* TREE_CODE */\n \n #ifdef RTX_CODE\n-extern int    easy_di_const\t\t\tPARAMS ((rtx));\n-extern int    easy_df_const\t\t\tPARAMS ((rtx));\n-extern rtx    gen_compare\t\t\tPARAMS ((enum rtx_code, rtx, rtx, int));\n-extern rtx    gen_split_move_double\t\tPARAMS ((rtx *));\n-extern int    m32r_address_code\t\t\tPARAMS ((rtx));\n-extern void   m32r_initialize_trampoline\tPARAMS ((rtx, rtx, rtx));\n-extern int    zero_and_one\t\t\tPARAMS ((rtx, rtx));\n-extern char * emit_cond_move\t\t\tPARAMS ((rtx *, rtx));\n-extern void   m32r_output_block_move \t\tPARAMS ((rtx, rtx *));\n-extern void   m32r_expand_block_move \t\tPARAMS ((rtx *));\n-extern void   m32r_print_operand\t\tPARAMS ((FILE *, rtx, int));\n-extern void   m32r_print_operand_address\tPARAMS ((FILE *, rtx));\n-extern int    m32r_not_same_reg \t\tPARAMS ((rtx, rtx));\n-extern int    m32r_hard_regno_rename_ok\t\tPARAMS ((unsigned int,\n-\t\t\t\t\t\t\t unsigned int));\n+extern int    easy_di_const (rtx);\n+extern int    easy_df_const (rtx);\n+extern rtx    gen_compare (enum rtx_code, rtx, rtx, int);\n+extern rtx    gen_split_move_double (rtx *);\n+extern int    m32r_address_code (rtx);\n+extern void   m32r_initialize_trampoline (rtx, rtx, rtx);\n+extern int    zero_and_one (rtx, rtx);\n+extern char * emit_cond_move (rtx *, rtx);\n+extern void   m32r_output_block_move (rtx, rtx *);\n+extern void   m32r_expand_block_move (rtx *);\n+extern void   m32r_print_operand (FILE *, rtx, int);\n+extern void   m32r_print_operand_address (FILE *, rtx);\n+extern int    m32r_not_same_reg (rtx, rtx);\n+extern int    m32r_hard_regno_rename_ok (unsigned int, unsigned int);\n \n #ifdef HAVE_MACHINE_MODES\n-extern int    call_address_operand\t\tPARAMS ((rtx, Mmode));\n-extern int    call_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    symbolic_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    small_data_operand\t\tPARAMS ((rtx, Mmode));\n-extern int    addr24_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    addr32_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    call26_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    seth_add3_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    cmp_int16_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    uint16_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    reg_or_int16_operand\t\tPARAMS ((rtx, Mmode));\n-extern int    reg_or_uint16_operand\t\tPARAMS ((rtx, Mmode));\n-extern int    reg_or_cmp_int16_operand\t\tPARAMS ((rtx, Mmode));\n-extern int    two_insn_const_operand\t\tPARAMS ((rtx, Mmode));\n-extern int    move_src_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    move_double_src_operand\t\tPARAMS ((rtx, Mmode));\n-extern int    move_dest_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    eqne_comparison_operator\t\tPARAMS ((rtx, Mmode));\n-extern int    signed_comparison_operator\tPARAMS ((rtx, Mmode));\n-extern int    memreg_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    small_insn_p\t\t\tPARAMS ((rtx, Mmode));\n-extern int    large_insn_p\t\t\tPARAMS ((rtx, Mmode));\n-extern int    conditional_move_operand\t\tPARAMS ((rtx, Mmode));\n-extern int    carry_compare_operand\t\tPARAMS ((rtx, Mmode));\n-extern int    m32r_block_immediate_operand \tPARAMS ((rtx, Mmode));\n-extern int    extend_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    reg_or_eq_int16_operand\t\tPARAMS ((rtx, Mmode));\n-extern int    int8_operand\t\t\tPARAMS ((rtx, Mmode));\n-extern int    reg_or_zero_operand               PARAMS ((rtx, Mmode));\n+extern int    call_address_operand (rtx, Mmode);\n+extern int    call_operand (rtx, Mmode);\n+extern int    symbolic_operand (rtx, Mmode);\n+extern int    small_data_operand (rtx, Mmode);\n+extern int    addr24_operand (rtx, Mmode);\n+extern int    addr32_operand (rtx, Mmode);\n+extern int    call26_operand (rtx, Mmode);\n+extern int    seth_add3_operand (rtx, Mmode);\n+extern int    cmp_int16_operand (rtx, Mmode);\n+extern int    uint16_operand (rtx, Mmode);\n+extern int    reg_or_int16_operand (rtx, Mmode);\n+extern int    reg_or_uint16_operand (rtx, Mmode);\n+extern int    reg_or_cmp_int16_operand (rtx, Mmode);\n+extern int    two_insn_const_operand (rtx, Mmode);\n+extern int    move_src_operand (rtx, Mmode);\n+extern int    move_double_src_operand (rtx, Mmode);\n+extern int    move_dest_operand (rtx, Mmode);\n+extern int    eqne_comparison_operator (rtx, Mmode);\n+extern int    signed_comparison_operator (rtx, Mmode);\n+extern int    memreg_operand (rtx, Mmode);\n+extern int    small_insn_p (rtx, Mmode);\n+extern int    large_insn_p (rtx, Mmode);\n+extern int    conditional_move_operand (rtx, Mmode);\n+extern int    carry_compare_operand (rtx, Mmode);\n+extern int    m32r_block_immediate_operand (rtx, Mmode);\n+extern int    extend_operand (rtx, Mmode);\n+extern int    reg_or_eq_int16_operand (rtx, Mmode);\n+extern int    int8_operand (rtx, Mmode);\n+extern int    reg_or_zero_operand (rtx, Mmode);\n \n #endif /* HAVE_MACHINE_MODES */\n \n #ifdef TREE_CODE\n-extern struct rtx_def * m32r_va_arg\t\tPARAMS ((tree, tree));\n-extern int m32r_pass_by_reference\t\tPARAMS ((tree));\n+extern struct rtx_def * m32r_va_arg (tree, tree);\n+extern int m32r_pass_by_reference (tree);\n #endif /* TREE_CODE */\n #endif /* RTX_CODE */\n "}, {"sha": "5e358e7f7b2425df96faeb2697b594b7a5e42d11", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -69,27 +69,27 @@ static int m32r_sched_odd_word_p;\n #define LIT_NAME_P(NAME) ((NAME)[0] == '*' && (NAME)[1] == '.')\n \n /* Forward declaration.  */\n-static void  init_reg_tables\t\t\tPARAMS ((void));\n-static void  block_move_call\t\t\tPARAMS ((rtx, rtx, rtx));\n-static int   m32r_is_insn\t\t\tPARAMS ((rtx));\n+static void  init_reg_tables (void);\n+static void  block_move_call (rtx, rtx, rtx);\n+static int   m32r_is_insn (rtx);\n const struct attribute_spec m32r_attribute_table[];\n-static tree  m32r_handle_model_attribute PARAMS ((tree *, tree, tree, int, bool *));\n-static void  m32r_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void  m32r_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-\n-static void  m32r_file_start PARAMS ((void));\n-\n-static int    m32r_adjust_cost \t   PARAMS ((rtx, rtx, rtx, int));\n-static int    m32r_adjust_priority PARAMS ((rtx, int));\n-static void   m32r_sched_init\t   PARAMS ((FILE *, int, int));\n-static int    m32r_sched_reorder   PARAMS ((FILE *, int, rtx *, int *, int));\n-static int    m32r_variable_issue  PARAMS ((FILE *, int, rtx, int));\n-static int    m32r_issue_rate\t   PARAMS ((void));\n-\n-static void m32r_encode_section_info PARAMS ((tree, rtx, int));\n-static bool m32r_in_small_data_p PARAMS ((tree));\n-static void init_idents PARAMS ((void));\n-static bool m32r_rtx_costs PARAMS ((rtx, int, int, int *));\n+static tree  m32r_handle_model_attribute (tree *, tree, tree, int, bool *);\n+static void  m32r_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void  m32r_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+\n+static void  m32r_file_start (void);\n+\n+static int    m32r_adjust_cost (rtx, rtx, rtx, int);\n+static int    m32r_adjust_priority (rtx, int);\n+static void   m32r_sched_init (FILE *, int, int);\n+static int    m32r_sched_reorder (FILE *, int, rtx *, int *, int);\n+static int    m32r_variable_issue (FILE *, int, rtx, int);\n+static int    m32r_issue_rate (void);\n+\n+static void m32r_encode_section_info (tree, rtx, int);\n+static bool m32r_in_small_data_p (tree);\n+static void init_idents (void);\n+static bool m32r_rtx_costs (rtx, int, int, int *);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE"}, {"sha": "1c6bc7a409518a93c05492bf5fde90e4872da9fb", "filename": "gcc/config/mn10300/mn10300-protos.h", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300-protos.h?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -22,41 +22,41 @@ Boston, MA 02111-1307, USA.  */\n #ifdef RTX_CODE\n \n #ifdef TREE_CODE\n-extern void mn10300_va_start PARAMS ((tree, rtx));\n+extern void mn10300_va_start (tree, rtx);\n #endif /* TREE_CODE */\n \n-extern struct rtx_def *legitimize_address PARAMS ((rtx, rtx, enum machine_mode));\n-extern rtx legitimize_pic_address   (rtx, rtx);\n+extern struct rtx_def *legitimize_address (rtx, rtx, enum machine_mode);\n+extern rtx legitimize_pic_address (rtx, rtx);\n extern int legitimate_pic_operand_p (rtx);\n-extern void print_operand PARAMS ((FILE *, rtx, int));\n-extern void print_operand_address PARAMS ((FILE *, rtx));\n-extern void mn10300_print_reg_list PARAMS ((FILE *, int));\n-extern int mn10300_get_live_callee_saved_regs PARAMS ((void));\n-extern void mn10300_gen_multiple_store PARAMS ((int));\n-extern void notice_update_cc PARAMS ((rtx, rtx));\n-extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n-\t\t\t\t\t\t      enum machine_mode, rtx));\n-extern const char *output_tst PARAMS ((rtx, rtx));\n-extern int store_multiple_operation PARAMS ((rtx, enum machine_mode));\n-extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n-extern int call_address_operand PARAMS ((rtx, enum machine_mode));\n-extern int impossible_plus_operand PARAMS ((rtx, enum machine_mode));\n-extern int const_8bit_operand PARAMS ((rtx, enum machine_mode));\n-\n-extern bool mn10300_wide_const_load_uses_clr PARAMS ((rtx operands[2]));\n+extern void print_operand (FILE *, rtx, int);\n+extern void print_operand_address (FILE *, rtx);\n+extern void mn10300_print_reg_list (FILE *, int);\n+extern int mn10300_get_live_callee_saved_regs (void);\n+extern void mn10300_gen_multiple_store (int);\n+extern void notice_update_cc (rtx, rtx);\n+extern enum reg_class secondary_reload_class (enum reg_class,\n+\t\t\t\t\t      enum machine_mode, rtx);\n+extern const char *output_tst (rtx, rtx);\n+extern int store_multiple_operation (rtx, enum machine_mode);\n+extern int symbolic_operand (rtx, enum machine_mode);\n+extern int call_address_operand (rtx, enum machine_mode);\n+extern int impossible_plus_operand (rtx, enum machine_mode);\n+extern int const_8bit_operand (rtx, enum machine_mode);\n+\n+extern bool mn10300_wide_const_load_uses_clr (rtx operands[2]);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern struct rtx_def *function_arg PARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t     enum machine_mode, tree, int));\n-extern int function_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS *,\n-\t\t\t\t\t       enum machine_mode, tree, int));\n-extern struct rtx_def *mn10300_va_arg PARAMS ((tree, tree));\n+extern struct rtx_def *function_arg (CUMULATIVE_ARGS *,\n+\t\t\t\t     enum machine_mode, tree, int);\n+extern int function_arg_partial_nregs (CUMULATIVE_ARGS *,\n+\t\t\t\t       enum machine_mode, tree, int);\n+extern struct rtx_def *mn10300_va_arg (tree, tree);\n #endif /* TREE_CODE */\n \n-extern struct rtx_def *mn10300_builtin_saveregs PARAMS ((void));\n-extern void expand_prologue PARAMS ((void));\n-extern void expand_epilogue PARAMS ((void));\n-extern int initial_offset PARAMS ((int, int));\n-extern int can_use_return_insn PARAMS ((void));\n-extern int mask_ok_for_mem_btst PARAMS ((int, int));\n+extern struct rtx_def *mn10300_builtin_saveregs (void);\n+extern void expand_prologue (void);\n+extern void expand_epilogue (void);\n+extern int initial_offset (int, int);\n+extern int can_use_return_insn (void);\n+extern int mask_ok_for_mem_btst (int, int);"}, {"sha": "3174a90e7c6070e145f9b17383cdaf001f8bf525", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -65,10 +65,10 @@ int mn10300_protect_label;\n \t\t\t\t|| regs_ever_live[16] || regs_ever_live[17]))\n \n \n-static int mn10300_address_cost_1 PARAMS ((rtx, int *));\n-static int mn10300_address_cost PARAMS ((rtx));\n-static bool mn10300_rtx_costs PARAMS ((rtx, int, int, int *));\n-static void mn10300_file_start PARAMS ((void));\n+static int mn10300_address_cost_1 (rtx, int *);\n+static int mn10300_address_cost (rtx);\n+static bool mn10300_rtx_costs (rtx, int, int, int *);\n+static void mn10300_file_start (void);\n \n \f\n /* Initialize the GCC target structure.  */"}, {"sha": "b5a2328c3c69e462ee23568bc2aa756559e268fc", "filename": "gcc/config/ns32k/ns32k-protos.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -22,24 +22,24 @@ Boston, MA 02111-1307, USA.  */\n /* Prototypes for functions in ns32k.c */\n \n #ifdef RTX_CODE\n-extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n-\t\t\t\t\t\t      enum machine_mode, rtx));\n-extern int reg_or_mem_operand PARAMS ((rtx, enum machine_mode));\n-\n-extern void split_di PARAMS ((rtx[], int, rtx[], rtx[]));\n-extern void expand_block_move PARAMS ((rtx[]));\n-extern int global_symbolic_reference_mentioned_p PARAMS ((rtx, int));\n-extern void print_operand PARAMS ((FILE *, rtx, int));\n-extern void print_operand_address PARAMS ((FILE *, rtx));\n-extern const char *output_move_double PARAMS ((rtx *));\n-extern const char *output_shift_insn PARAMS ((rtx *));\n-extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n+extern enum reg_class secondary_reload_class (enum reg_class,\n+\t\t\t\t\t      enum machine_mode, rtx);\n+extern int reg_or_mem_operand (rtx, enum machine_mode);\n+\n+extern void split_di (rtx[], int, rtx[], rtx[]);\n+extern void expand_block_move (rtx[]);\n+extern int global_symbolic_reference_mentioned_p (rtx, int);\n+extern void print_operand (FILE *, rtx, int);\n+extern void print_operand_address (FILE *, rtx);\n+extern const char *output_move_double (rtx *);\n+extern const char *output_shift_insn (rtx *);\n+extern int symbolic_reference_mentioned_p (rtx);\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n-extern int ns32k_return_pops_args PARAMS ((tree, tree, int));\n+extern int ns32k_return_pops_args (tree, tree, int);\n #endif /* TREE_CODE */\n \n-extern int hard_regno_mode_ok PARAMS ((int, enum machine_mode));\n-extern int register_move_cost PARAMS ((enum reg_class, enum reg_class));\n-extern const char *output_move_dconst PARAMS ((int, const char *));\n+extern int hard_regno_mode_ok (int, enum machine_mode);\n+extern int register_move_cost (enum reg_class, enum reg_class);\n+extern const char *output_move_dconst (int, const char *);"}, {"sha": "3573b711242efb1f25b03c0e3952741d9c9f9445", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f68264126275b5431f08948e4595b6402593efa/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=7f68264126275b5431f08948e4595b6402593efa", "patch": "@@ -64,15 +64,15 @@ const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n \n static const char *const ns32k_out_reg_names[] = OUTPUT_REGISTER_NAMES;\n \n-static rtx gen_indexed_expr PARAMS ((rtx, rtx, rtx));\n-static const char *singlemove_string PARAMS ((rtx *));\n-static void move_tail PARAMS ((rtx[], int, int));\n-static tree ns32k_handle_fntype_attribute PARAMS ((tree *, tree, tree, int, bool *));\n+static rtx gen_indexed_expr (rtx, rtx, rtx);\n+static const char *singlemove_string (rtx *);\n+static void move_tail (rtx[], int, int);\n+static tree ns32k_handle_fntype_attribute (tree *, tree, tree, int, bool *);\n const struct attribute_spec ns32k_attribute_table[];\n-static void ns32k_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void ns32k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static bool ns32k_rtx_costs PARAMS ((rtx, int, int, int *));\n-static int ns32k_address_cost PARAMS ((rtx));\n+static void ns32k_output_function_prologue (FILE *, HOST_WIDE_INT);\n+static void ns32k_output_function_epilogue (FILE *, HOST_WIDE_INT);\n+static bool ns32k_rtx_costs (rtx, int, int, int *);\n+static int ns32k_address_cost (rtx);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE"}]}