{"sha": "4a46cbfb11616480bfa04571be2145d7fa38986b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE0NmNiZmIxMTYxNjQ4MGJmYTA0NTcxYmUyMTQ1ZDdmYTM4OTg2Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-09-03T14:57:29Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-09-03T14:57:29Z"}, "message": "Makefile.in (c-objc-common.o): Kill gt-c-objc-common.h dependency.\n\n\n\t* Makefile.in (c-objc-common.o): Kill gt-c-objc-common.h dependency.\n\t* c-decl.c (finish_function):  Kill arguments, always use cgraph path.\n\t* c-objc-common.c: Kill include of gt-c-objc-common.h\n\t(expand_deferred_fns, deffer_fn): Kill function.\n\t(deferred_fns): Kill variable.\n\t(finish_cdtor): Update finish_function call.\n\t(c_objc_common_finish_file): Always call cgraph code.\n\t* c-parse.c: Regenerate.\n\t* c-parse.y: Regenerate.\n\t* c-tree.h (finish_function): Update prototype.\n\n\t* objc-acct.c (build_module_descriptor, finish_method_def):\n\tUpdate call of finish_function.\n\n\t* cgraphunit.c (cgraph_default_inline_p, cgraph_analyze_function): Add\n\tforward prototype.\n\t(cgraph_finalize_function): In non-unit-at-a-time mode analyze the\n\tfunction and assemble it if needed.\n\t(cgraph_finalize_compilation_unit): Do nothing in non-unit-at-a-time\n\tmode.\n\t(cgraph_optimize): Likewise.\n\t(cgraph_expand_function): In non-unit-at-a-time mode keep function body\n\teven when it has no inline callees.\n\t* c-parse.in: Update calls to finish_function.\n\nFrom-SVN: r71028", "tree": {"sha": "43fdb3d7f0644c079f62da1e10f12ecddb5b3649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43fdb3d7f0644c079f62da1e10f12ecddb5b3649"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a46cbfb11616480bfa04571be2145d7fa38986b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a46cbfb11616480bfa04571be2145d7fa38986b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a46cbfb11616480bfa04571be2145d7fa38986b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a46cbfb11616480bfa04571be2145d7fa38986b/comments", "author": null, "committer": null, "parents": [{"sha": "4c620c398ef5e70e2fe3c6aa7b210b8416d460df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c620c398ef5e70e2fe3c6aa7b210b8416d460df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c620c398ef5e70e2fe3c6aa7b210b8416d460df"}], "stats": {"total": 260, "additions": 94, "deletions": 166}, "files": [{"sha": "a3e2c4c155ed661b83ccb7ff01e340c00911507d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a46cbfb11616480bfa04571be2145d7fa38986b", "patch": "@@ -1,3 +1,28 @@\n+Wed Sep  3 16:55:25 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* Makefile.in (c-objc-common.o): Kill gt-c-objc-common.h dependency.\n+\t* c-decl.c (finish_function):  Kill arguments, always use cgraph path.\n+\t* c-objc-common.c: Kill include of gt-c-objc-common.h\n+\t(expand_deferred_fns, deffer_fn): Kill function.\n+\t(deferred_fns): Kill variable.\n+\t(finish_cdtor): Update finish_function call.\n+\t(c_objc_common_finish_file): Always call cgraph code.\n+\t* c-parse.c: Regenerate.\n+\t* c-parse.y: Regenerate.\n+\t* c-tree.h (finish_function): Update prototype.\n+\t* objc-acct.c (build_module_descriptor, finish_method_def):\n+\tUpdate call of finish_function.\n+\t* cgraphunit.c (cgraph_default_inline_p, cgraph_analyze_function): Add\n+\tforward prototype.\n+\t(cgraph_finalize_function): In non-unit-at-a-time mode analyze the\n+\tfunction and assemble it if needed.\n+\t(cgraph_finalize_compilation_unit): Do nothing in non-unit-at-a-time\n+\tmode.\n+\t(cgraph_optimize): Likewise.\n+\t(cgraph_expand_function): In non-unit-at-a-time mode keep function body\n+\teven when it has no inline callees.\n+\t* c-parse.in: Update calls to finish_function.\n+\n 2003-09-03  Nick Clifton  <nickc@redhat.com>\n \n \t* config/arm/arm.h: Handle TARGET_CPU_iwmmxt."}, {"sha": "b6dd4eedf2e6ea9e078c2e9c8c76264c8dac52cf", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4a46cbfb11616480bfa04571be2145d7fa38986b", "patch": "@@ -1290,7 +1290,7 @@ c-ppoutput.o : c-ppoutput.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) $(RTL_H) insn-config.h $(INTEGRATE_H) $(EXPR_H) $(C_TREE_H) \\\n     flags.h toplev.h tree-inline.h $(DIAGNOSTIC_H) $(VARRAY_H) \\\n-    langhooks.h $(GGC_H) gt-c-objc-common.h $(TARGET_H) cgraph.h\n+    langhooks.h $(GGC_H) $(TARGET_H) cgraph.h\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(C_TREE_H) flags.h toplev.h\n c-convert.o : c-convert.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n@@ -2038,7 +2038,7 @@ gt-lists.h gt-alias.h gt-cselib.h gt-fold-const.h gt-gcse.h \\\n gt-expr.h gt-sdbout.h gt-optabs.h gt-bitmap.h \\\n gt-dwarf2out.h gt-ra-build.h gt-reg-stack.h gt-dwarf2asm.h \\\n gt-dbxout.h gt-c-common.h gt-c-decl.h gt-c-parse.h \\\n-gt-c-pragma.h gt-c-objc-common.h gtype-c.h gt-input.h gt-cfglayout.h \\\n+gt-c-pragma.h gtype-c.h gt-input.h gt-cfglayout.h \\\n gt-stringpool.h gt-langhooks.h : s-gtype ; @true\n \n gtyp-gen.h: Makefile"}, {"sha": "31212ff42c5bc2226669974f14b82dc021a0e1af", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 75, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=4a46cbfb11616480bfa04571be2145d7fa38986b", "patch": "@@ -6028,13 +6028,10 @@ store_parm_decls (void)\n    all the way to assembler language output.  The free the storage\n    for the function definition.\n \n-   This is called after parsing the body of the function definition.\n-\n-   NESTED is nonzero if the function being finished is nested in another.\n-   CAN_DEFER_P is nonzero if the function may be deferred.  */\n+   This is called after parsing the body of the function definition.  */\n \n void\n-finish_function (int nested, int can_defer_p)\n+finish_function ()\n {\n   tree fndecl = current_function_decl;\n \n@@ -6107,74 +6104,13 @@ finish_function (int nested, int can_defer_p)\n      DECL_SAVED_INSNS, and we'll restore it in tree_rest_of_compilation.  */\n   cfun = NULL;\n \n-  if (flag_unit_at_a_time && can_defer_p)\n-    {\n-      cgraph_finalize_function (fndecl, DECL_SAVED_TREE (fndecl));\n-      current_function_decl = NULL;\n-      return;\n-    }\n-\n-  if (! nested)\n-    {\n-      /* Function is parsed.\n-\t Generate RTL for the body of this function or defer\n-\t it for later expansion.  */\n-      bool uninlinable = true;\n-\n-      /* There's no reason to do any of the work here if we're only doing\n-\t semantic analysis; this code just generates RTL.  */\n-      if (flag_syntax_only)\n-\t{\n-\t  current_function_decl = NULL;\n-\t  DECL_SAVED_TREE (fndecl) = NULL_TREE;\n-\t  return;\n-\t}\n-\n-      if (flag_inline_trees)\n-\t{\n-\t  /* First, cache whether the current function is inlinable.  Some\n-\t     predicates depend on cfun and current_function_decl to\n-\t     function completely.  */\n-\t  timevar_push (TV_INTEGRATION);\n-\t  uninlinable = !tree_inlinable_function_p (fndecl);\n-\n-\t  if (can_defer_p\n-\t      /* We defer functions marked inline *even if* the function\n-\t\t itself is not inlinable.  This is because we don't yet\n-\t\t know if the function will actually be used; we may be\n-\t\t able to avoid emitting it entirely.  */\n-\t      && (!uninlinable || DECL_DECLARED_INLINE_P (fndecl))\n-\t      /* Save function tree for inlining.  Should return 0 if the\n-\t\t language does not support function deferring or the\n-\t\t function could not be deferred.  */\n-\t      && defer_fn (fndecl))\n-\t    {\n-\t      /* Let the back-end know that this function exists.  */\n-\t      (*debug_hooks->deferred_inline_function) (fndecl);\n-\t      timevar_pop (TV_INTEGRATION);\n-\t      current_function_decl = NULL;\n-\t      return;\n-\t    }\n-\n-\t  /* Then, inline any functions called in it.  */\n-\t  optimize_inline_calls (fndecl);\n-\t  timevar_pop (TV_INTEGRATION);\n-\t}\n-\n-      c_expand_body (fndecl);\n-\n-      /* Keep the function body if it's needed for inlining or dumping.  */\n-      if (uninlinable && !dump_enabled_p (TDI_all))\n-\t{\n-\t  /* Allow the body of the function to be garbage collected.  */\n-\t  DECL_SAVED_TREE (fndecl) = NULL_TREE;\n-\t}\n-\n-      /* Let the error reporting routines know that we're outside a\n-\t function.  For a nested function, this value is used in\n-\t c_pop_function_context and then reset via pop_function_context.  */\n-      current_function_decl = NULL;\n-    }\n+  /* ??? Objc emits functions after finalizing the compilation unit.\n+     This should be cleaned up later and this conditional removed.  */\n+  if (!cgraph_global_info_ready)\n+    cgraph_finalize_function (fndecl, DECL_SAVED_TREE (fndecl));\n+  else\n+    c_expand_body (fndecl);\n+  current_function_decl = NULL;\n }\n \n /* Generate the RTL for a deferred function FNDECL.  */\n@@ -6199,8 +6135,7 @@ c_expand_deferred_function (tree fndecl)\n \n /* Generate the RTL for the body of FNDECL.  If NESTED_P is nonzero,\n    then we are already in the process of generating RTL for another\n-   function.  If can_defer_p is zero, we won't attempt to defer the\n-   generation of RTL.  */\n+   function.  */\n \n static void\n c_expand_body_1 (tree fndecl, int nested_p)"}, {"sha": "96d6855f303e884062989231fd9f20a2b7f5184a", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 3, "deletions": 73, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=4a46cbfb11616480bfa04571be2145d7fa38986b", "patch": "@@ -41,12 +41,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n static bool c_tree_printer (pretty_printer *, text_info *);\n static tree inline_forbidden_p (tree *, int *, void *);\n-static void expand_deferred_fns (void);\n static tree start_cdtor (int);\n static void finish_cdtor (tree);\n \n-static GTY(()) varray_type deferred_fns;\n-\n int\n c_missing_noreturn_ok_p (tree decl)\n {\n@@ -267,69 +264,9 @@ c_objc_common_init (void)\n \tmesg_implicit_function_declaration = 0;\n     }\n \n-  VARRAY_TREE_INIT (deferred_fns, 32, \"deferred_fns\");\n-\n   return true;\n }\n \n-/* Register a function tree, so that its optimization and conversion\n-   to RTL is only done at the end of the compilation.  */\n-\n-int\n-defer_fn (tree fn)\n-{\n-  VARRAY_PUSH_TREE (deferred_fns, fn);\n-\n-  return 1;\n-}\n-\n-/* Expand deferred functions for C and ObjC.  */\n-\n-static void\n-expand_deferred_fns (void)\n-{\n-  unsigned int i;\n-  bool reconsider;\n-\n-  do\n-    {\n-      reconsider = false;\n-      for (i = 0; i < VARRAY_ACTIVE_SIZE (deferred_fns); i++)\n-\t{\n-\t  tree decl = VARRAY_TREE (deferred_fns, i);\n-\n-\t  if (TREE_ASM_WRITTEN (decl))\n-\t    continue;\n-\n-\t  /* \"extern inline\" says the symbol exists externally,\n-\t      which means we should *never* expand it locally \n-\t      unless we're actually inlining it.  */\n-\t  /* ??? Why did we queue these in the first place?  */\n-\t  if (DECL_DECLARED_INLINE_P (decl) && DECL_EXTERNAL (decl))\n-\t    continue;\n-\t      \n-\t  /* With flag_keep_inline_functions, we're emitting everything,\n-\t     so we never need to reconsider.  */\n-\t  if (flag_keep_inline_functions)\n-\t    ;\n-\t  /* Must emit all public functions.  C doesn't have COMDAT\n-\t     functions, so we don't need to check that, like C++.  */\n-\t  else if (TREE_PUBLIC (decl))\n-\t    reconsider = true;\n-\t  /* Must emit if the symbol is referenced.  */\n-\t  else if (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n-\t    reconsider = true;\n-\t  else\n-\t    continue;\n-\n-\t  c_expand_deferred_function (decl);\n-\t}\n-    }\n-  while (reconsider);\n-\n-  deferred_fns = 0;\n-}\n-\n static tree\n start_cdtor (int method_type)\n {\n@@ -369,7 +306,7 @@ finish_cdtor (tree body)\n \n   RECHAIN_STMTS (body, COMPOUND_BODY (body));\n \n-  finish_function (0, 0);\n+  finish_function ();\n }\n \n /* Called at end of parsing, but before end-of-file processing.  */\n@@ -384,13 +321,8 @@ c_objc_common_finish_file (void)\n      them based on linkage rules.  */\n   merge_translation_unit_decls ();\n \n-  if (flag_unit_at_a_time)\n-    {\n-      cgraph_finalize_compilation_unit ();\n-      cgraph_optimize ();\n-    }\n-  else\n-    expand_deferred_fns ();\n+  cgraph_finalize_compilation_unit ();\n+  cgraph_optimize ();\n \n   if (static_ctors)\n     {\n@@ -468,5 +400,3 @@ c_tree_printer (pretty_printer *pp, text_info *text)\n       return false;\n     }\n }\n-\n-#include \"gt-c-objc-common.h\""}, {"sha": "1338455fda5f9ea9f5e5df007356cff0d663aff5", "filename": "gcc/c-parse.in", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=4a46cbfb11616480bfa04571be2145d7fa38986b", "patch": "@@ -417,7 +417,7 @@ fndef:\n \t\t{ DECL_SOURCE_LOCATION (current_function_decl) = $6;\n \t\t  store_parm_decls (); }\n \t  compstmt_or_error\n-\t\t{ finish_function (0, 1);\n+\t\t{ finish_function ();\n \t\t  POP_DECLSPEC_STACK; }\n \t| declspecs_ts setspecs declarator error\n \t\t{ POP_DECLSPEC_STACK; }\n@@ -430,7 +430,7 @@ fndef:\n \t\t{ DECL_SOURCE_LOCATION (current_function_decl) = $6;\n \t\t  store_parm_decls (); }\n \t  compstmt_or_error\n-\t\t{ finish_function (0, 1);\n+\t\t{ finish_function ();\n \t\t  POP_DECLSPEC_STACK; }\n \t| declspecs_nots setspecs notype_declarator error\n \t\t{ POP_DECLSPEC_STACK; }\n@@ -443,7 +443,7 @@ fndef:\n \t\t{ DECL_SOURCE_LOCATION (current_function_decl) = $5;\n \t\t  store_parm_decls (); }\n \t  compstmt_or_error\n-\t\t{ finish_function (0, 1);\n+\t\t{ finish_function ();\n \t\t  POP_DECLSPEC_STACK; }\n \t| setspecs notype_declarator error\n \t\t{ POP_DECLSPEC_STACK; }\n@@ -1566,7 +1566,7 @@ nested_function:\n    which called YYERROR1 again, and so on.  */\n \t  compstmt\n \t\t{ tree decl = current_function_decl;\n-\t\t  finish_function (1, 1);\n+\t\t  finish_function ();\n \t\t  pop_function_context ();\n \t\t  add_decl_stmt (decl); }\n \t;\n@@ -1597,7 +1597,7 @@ notype_nested_function:\n    which called YYERROR1 again, and so on.  */\n \t  compstmt\n \t\t{ tree decl = current_function_decl;\n-\t\t  finish_function (1, 1);\n+\t\t  finish_function ();\n \t\t  pop_function_context ();\n \t\t  add_decl_stmt (decl); }\n \t;"}, {"sha": "76c77ec05b250cab60765cf0b78dfe1a805cb450", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=4a46cbfb11616480bfa04571be2145d7fa38986b", "patch": "@@ -192,7 +192,7 @@ extern tree declare_label (tree);\n extern tree define_label (location_t, tree);\n extern void finish_decl (tree, tree, tree);\n extern tree finish_enum (tree, tree, tree);\n-extern void finish_function (int, int);\n+extern void finish_function (void);\n extern tree finish_struct (tree, tree, tree);\n extern tree get_parm_info (int);\n extern tree grokfield (tree, tree, tree);"}, {"sha": "05626cdeeaf06dfcb4dd44bcaee47980a5be95b4", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=4a46cbfb11616480bfa04571be2145d7fa38986b", "patch": "@@ -47,6 +47,8 @@ static void cgraph_expand_function (struct cgraph_node *);\n static tree record_call_1 (tree *, int *, void *);\n static void cgraph_mark_local_functions (void);\n static void cgraph_optimize_function (struct cgraph_node *);\n+static bool cgraph_default_inline_p (struct cgraph_node *n);\n+static void cgraph_analyze_function (struct cgraph_node *node);\n \n /* Statistics we collect about inlining algorithm.  */\n static int ncalls_inlined;\n@@ -69,6 +71,8 @@ cgraph_finalize_function (tree decl, tree body ATTRIBUTE_UNUSED)\n      if needed.  */\n   if (node->needed)\n     cgraph_mark_needed_node (node, 0);\n+  if (!flag_unit_at_a_time)\n+    cgraph_analyze_function (node);\n   if (/* Externally visible functions must be output.  The exception are\n \t COMDAT functions that must be output only when they are needed.\n \t Similarly are handled deferred functions and\n@@ -85,9 +89,28 @@ cgraph_finalize_function (tree decl, tree body ATTRIBUTE_UNUSED)\n       || (DECL_ASSEMBLER_NAME_SET_P (decl)\n \t  && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n       || lookup_attribute (\"used\", DECL_ATTRIBUTES (decl)))\n-    {\n-      cgraph_mark_needed_node (node, 1);\n-    }\n+     cgraph_mark_needed_node (node, 1);\n+  /* When not doing unit-at-a-time deffer only inline functions.  */\n+  else if (!flag_unit_at_a_time\n+\t   && !DECL_EXTERNAL (decl)\n+\t   && !node->origin\n+\t   && (!DECL_INLINE (decl)\n+\t       || (!node->local.disregard_inline_limits\n+\t\t   /* When declared inline, deffer even the uninlinable functions.\n+\t\t      This allows them to be elliminated when unused.  */\n+\t\t   && !DECL_DECLARED_INLINE_P (decl) \n+\t\t   && (node->local.inlinable\n+\t\t       || !cgraph_default_inline_p (node)))))\n+     cgraph_mark_needed_node (node, 1);\n+\n+  if (!flag_unit_at_a_time)\n+    while (cgraph_nodes_queue)\n+      {\n+\t struct cgraph_node *n = cgraph_nodes_queue;\n+\t cgraph_nodes_queue = cgraph_nodes_queue->next_needed;\n+\t if (!n->origin)\n+\t   cgraph_expand_function (n);\n+      }\n \n   (*debug_hooks->deferred_inline_function) (decl);\n }\n@@ -185,6 +208,9 @@ cgraph_finalize_compilation_unit (void)\n {\n   struct cgraph_node *node;\n \n+  if (!flag_unit_at_a_time)\n+    return;\n+\n   cgraph_varpool_assemble_pending_decls ();\n   if (!quiet_flag)\n     fprintf (stderr, \"\\nAnalyzing compilation unit\\n\");\n@@ -320,11 +346,21 @@ cgraph_expand_function (struct cgraph_node *node)\n      via lang_expand_decl_stmt.  */\n   (*lang_hooks.callgraph.expand_function) (decl);\n \n-  for (e = node->callers; e; e = e->next_caller)\n-    if (e->inline_call)\n-      break;\n-  if (!e)\n-    DECL_SAVED_TREE (decl) = NULL;\n+  if (!flag_unit_at_a_time)\n+    {\n+       if (!node->local.inlinable\n+\t   || (!node->local.disregard_inline_limits\n+\t       && !cgraph_default_inline_p (node)))\n+\t DECL_SAVED_TREE (node->decl) = NULL;\n+    }\n+  else\n+    {\n+      for (e = node->callers; e; e = e->next_caller)\n+\tif (e->inline_call)\n+\t  break;\n+      if (!e)\n+\tDECL_SAVED_TREE (decl) = NULL;\n+    }\n   current_function_decl = NULL;\n }\n \n@@ -1090,6 +1126,8 @@ cgraph_mark_local_functions (void)\n void\n cgraph_optimize (void)\n {\n+  if (!flag_unit_at_a_time)\n+    return;\n   timevar_push (TV_CGRAPHOPT);\n   if (!quiet_flag)\n     fprintf (stderr, \"Performing intraprocedural optimizations\\n\");"}, {"sha": "8350cb9e9867cc5bfc1601aec799e13b179fba40", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a46cbfb11616480bfa04571be2145d7fa38986b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=4a46cbfb11616480bfa04571be2145d7fa38986b", "patch": "@@ -1784,7 +1784,7 @@ build_module_descriptor ()\n \n     c_expand_expr_stmt (decelerator);\n \n-    finish_function (0, 0);\n+    finish_function ();\n \n     return XEXP (DECL_RTL (init_function_decl), 0);\n   }\n@@ -7391,7 +7391,7 @@ void\n finish_method_def ()\n {\n   lang_expand_function_end = objc_expand_function_end;\n-  finish_function (0, 1);\n+  finish_function ();\n   lang_expand_function_end = NULL;\n \n   /* Required to implement _msgSuper. This must be done AFTER finish_function,"}]}