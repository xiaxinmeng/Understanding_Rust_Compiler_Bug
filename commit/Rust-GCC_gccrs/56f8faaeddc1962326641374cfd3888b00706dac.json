{"sha": "56f8faaeddc1962326641374cfd3888b00706dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmOGZhYWVkZGMxOTYyMzI2NjQxMzc0Y2ZkMzg4OGIwMDcwNmRhYw==", "commit": {"author": {"name": "Cong Hou", "email": "congh@google.com", "date": "2014-04-25T00:20:44Z"}, "committer": {"name": "Cong Hou", "email": "congh@gcc.gnu.org", "date": "2014-04-25T00:20:44Z"}, "message": "re PR tree-optimization/60896 (ICE: in vect_get_vec_def_for_operand, at tree-vect-stmts.c:1449)\n\n2014-04-24  Cong Hou  <congh@google.com>\n\n    PR tree-optimization/60896\n    * tree-vect-patterns.c (vect_recog_dot_prod_pattern): Pick up\n    all statements in PATTERN_DEF_SEQ in recognized widen-mult pattern.\n    (vect_mark_pattern_stmts): Set the def type of all statements in\n    PATTERN_DEF_SEQ as vect_internal_def.\n\n2014-04-24  Cong Hou  <congh@google.com>\n\n    PR tree-optimization/60896\n    * g++.dg/vect/pr60896.cc: New test.\n\nFrom-SVN: r209773", "tree": {"sha": "6b19b1e15052fb164e0c0ddbd02376c4a36692e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b19b1e15052fb164e0c0ddbd02376c4a36692e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56f8faaeddc1962326641374cfd3888b00706dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f8faaeddc1962326641374cfd3888b00706dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56f8faaeddc1962326641374cfd3888b00706dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56f8faaeddc1962326641374cfd3888b00706dac/comments", "author": null, "committer": null, "parents": [{"sha": "9beb6f2b1db928682f33b45ab5dffaaf9320d9f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9beb6f2b1db928682f33b45ab5dffaaf9320d9f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9beb6f2b1db928682f33b45ab5dffaaf9320d9f1"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "3eb5c43f5a5befa3d6cb723fd86b8e9758c9c981", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f8faaeddc1962326641374cfd3888b00706dac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f8faaeddc1962326641374cfd3888b00706dac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56f8faaeddc1962326641374cfd3888b00706dac", "patch": "@@ -1,3 +1,11 @@\n+2014-04-24  Cong Hou  <congh@google.com>\n+\n+\tPR tree-optimization/60896\n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): Pick up\n+\tall statements in PATTERN_DEF_SEQ in recognized widen-mult pattern.\n+\t(vect_mark_pattern_stmts): Set the def type of all statements in\n+\tPATTERN_DEF_SEQ as vect_internal_def.\n+\n 2014-04-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* doc/extend.texi (PowerPC Built-in Functions): Document new"}, {"sha": "01912624d51a49862c66a0db0129432026834442", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f8faaeddc1962326641374cfd3888b00706dac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f8faaeddc1962326641374cfd3888b00706dac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56f8faaeddc1962326641374cfd3888b00706dac", "patch": "@@ -1,3 +1,8 @@\n+2014-04-24  Cong Hou  <congh@google.com>\n+\n+\tPR tree-optimization/60896\n+\t* g++.dg/vect/pr60896.cc: New test.\n+\n 2014-04-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/pack01.c: New test to test the new pack and"}, {"sha": "c6ce68b82a2848d630a2d26934d8a373fc583ee6", "filename": "gcc/testsuite/g++.dg/vect/pr60896.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f8faaeddc1962326641374cfd3888b00706dac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr60896.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f8faaeddc1962326641374cfd3888b00706dac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr60896.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr60896.cc?ref=56f8faaeddc1962326641374cfd3888b00706dac", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+struct A\n+{\n+  int m_fn1 ();\n+  short *m_fn2 ();\n+};\n+\n+struct B\n+{\n+  void *fC;\n+};\n+\n+int a, b;\n+unsigned char i;\n+void fn1 (unsigned char *p1, A &p2)\n+{\n+  int c = p2.m_fn1 ();\n+  for (int d = 0; c; d++)\n+    {\n+      short *e = p2.m_fn2 ();\n+      unsigned char *f = &p1[0];\n+      for (int g = 0; g < a; g++)\n+\t{\n+\t  int h = e[0];\n+\t  b += h * f[g];\n+\t}\n+    }\n+}\n+\n+void fn2 (A &p1, A &p2, B &p3)\n+{\n+  int j = p2.m_fn1 ();\n+  for (int k = 0; j; k++)\n+    if (0)\n+      ;\n+    else\n+      fn1 (&i, p1);\n+  if (p3.fC)\n+    ;\n+  else\n+    ;\n+}"}, {"sha": "365cf016213d09a5a8901084f19cd0346ed0feb6", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56f8faaeddc1962326641374cfd3888b00706dac/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56f8faaeddc1962326641374cfd3888b00706dac/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=56f8faaeddc1962326641374cfd3888b00706dac", "patch": "@@ -392,6 +392,8 @@ vect_recog_dot_prod_pattern (vec<gimple> *stmts, tree *type_in,\n       gcc_assert (STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_internal_def);\n       oprnd00 = gimple_assign_rhs1 (stmt);\n       oprnd01 = gimple_assign_rhs2 (stmt);\n+      STMT_VINFO_PATTERN_DEF_SEQ (vinfo_for_stmt (last_stmt))\n+\t  = STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo);\n     }\n   else\n     {\n@@ -3065,8 +3067,7 @@ vect_mark_pattern_stmts (gimple orig_stmt, gimple pattern_stmt,\n \t    }\n \t  gimple_set_bb (def_stmt, gimple_bb (orig_stmt));\n \t  STMT_VINFO_RELATED_STMT (def_stmt_info) = orig_stmt;\n-\t  STMT_VINFO_DEF_TYPE (def_stmt_info)\n-\t    = STMT_VINFO_DEF_TYPE (orig_stmt_info);\n+\t  STMT_VINFO_DEF_TYPE (def_stmt_info) = vect_internal_def;\n \t  if (STMT_VINFO_VECTYPE (def_stmt_info) == NULL_TREE)\n \t    STMT_VINFO_VECTYPE (def_stmt_info) = pattern_vectype;\n \t}"}]}