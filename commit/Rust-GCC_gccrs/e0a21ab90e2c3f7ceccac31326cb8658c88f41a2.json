{"sha": "e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBhMjFhYjkwZTJjM2Y3Y2VjY2FjMzEzMjZjYjg2NThjODhmNDFhMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-16T01:44:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-16T01:44:06Z"}, "message": "c-common.h: Fix comment formatting.\n\n\t* c-common.h: Fix comment formatting.\n\t* c-cppbuiltin.c: Likewise.\n\t* c-pragma.c: Likewise.\n\t* calls.c: Likewise.\n\t* collect2.c: Likewise.\n\t* cppcharset.c: Likewise.\n\t* cpptrad.c: Likewise.\n\t* dbxout.c: Likewise.\n\t* defaults.h: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* genautomata.c: Likewise.\n\t* genconditions.c: Likewise.\n\t* genflags.c: Likewise.\n\t* gengtype.c: Likewise.\n\t* integrate.c: Likewise.\n\t* loop.c: Likewise.\n\t* predict.c: Likewise.\n\t* sdbout.c: Likewise.\n\nFrom-SVN: r75957", "tree": {"sha": "d58fdf09d1370218eea249b7c56ec53f8e773a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d58fdf09d1370218eea249b7c56ec53f8e773a0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/comments", "author": null, "committer": null, "parents": [{"sha": "f57fc998eeab27e8292de128b37c94ffa37d8409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57fc998eeab27e8292de128b37c94ffa37d8409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57fc998eeab27e8292de128b37c94ffa37d8409"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "2384ba92d0bd264587298d44d3803b8f930c9f4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -1,3 +1,25 @@\n+2004-01-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-common.h: Fix comment formatting.\n+\t* c-cppbuiltin.c: Likewise.\n+\t* c-pragma.c: Likewise.\n+\t* calls.c: Likewise.\n+\t* collect2.c: Likewise.\n+\t* cppcharset.c: Likewise.\n+\t* cpptrad.c: Likewise.\n+\t* dbxout.c: Likewise.\n+\t* defaults.h: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* genautomata.c: Likewise.\n+\t* genconditions.c: Likewise.\n+\t* genflags.c: Likewise.\n+\t* gengtype.c: Likewise.\n+\t* integrate.c: Likewise.\n+\t* loop.c: Likewise.\n+\t* predict.c: Likewise.\n+\t* sdbout.c: Likewise.\n+\n 2004-01-15  Zack Weinberg  <zack@codesourcery.com>\n \n \t* config/ia64/ia64.md (*movti_internal): C output template"}, {"sha": "2b33373126d8e41ba4ea2d9788fe8704a502f2df", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -222,7 +222,8 @@ struct c_common_identifier GTY(())\n \n extern GTY(()) tree c_global_trees[CTI_MAX];\n \n-/* In a RECORD_TYPE, a sorted array of the fields of the type, not a tree for size reasons.  */\n+/* In a RECORD_TYPE, a sorted array of the fields of the type, not a\n+   tree for size reasons.  */\n struct sorted_fields_type GTY(())\n {\n   int len;"}, {"sha": "e02960e8532d7fada480349ca7bfbeb36f8eaed9", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -308,7 +308,7 @@ c_cpp_builtins (cpp_reader *pfile)\n   if (flag_exceptions)\n     cpp_define (pfile, \"__EXCEPTIONS\");\n \n-  /* represents the C++ ABI version, always defined so it can be used while\n+  /* Represents the C++ ABI version, always defined so it can be used while\n      preprocessing C and assembler.  */\n   if (flag_abi_version == 0)\n     /* Use a very large value so that:\n@@ -324,7 +324,7 @@ c_cpp_builtins (cpp_reader *pfile)\n        \"102\".  */\n     builtin_define_with_int_value (\"__GXX_ABI_VERSION\", 102);\n   else\n-    /* Newer versions have values 1002, 1003, ... */\n+    /* Newer versions have values 1002, 1003, ....  */\n     builtin_define_with_int_value (\"__GXX_ABI_VERSION\", \n \t\t\t\t   1000 + flag_abi_version);\n "}, {"sha": "00560459a4788a6b79d24b877230a8522d71308b", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -273,7 +273,7 @@ apply_pragma_weak (tree decl, tree value)\n     }\n \n   if (SUPPORTS_WEAK && DECL_EXTERNAL (decl) && TREE_USED (decl)\n-      && !DECL_WEAK (decl) /* don't complain about a redundant #pragma */\n+      && !DECL_WEAK (decl) /* Don't complain about a redundant #pragma.  */\n       && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n     warning (\"%Japplying #pragma weak '%D' after first use results \"\n              \"in unspecified behavior\", decl, decl);"}, {"sha": "c16bdf10b952768de488b9b1ff6ee713c1985662", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -4691,7 +4691,7 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t      if (XEXP (x, 0) != current_function_internal_arg_pointer)\n \t\ti = INTVAL (XEXP (XEXP (x, 0), 1));\n \n-\t      /* expand_call should ensure this */\n+\t      /* expand_call should ensure this.  */\n \t      if (arg->locate.offset.var || GET_CODE (size_rtx) != CONST_INT)\n \t\tabort ();\n "}, {"sha": "11858687ee41f287dacd28e6819bb376c088900e", "filename": "gcc/collect2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -2402,7 +2402,7 @@ scan_libraries (const char *prog_name)\n   if (debug)\n     fprintf (stderr, \"\\n\");\n \n-  /* now iterate through the library list adding their symbols to\n+  /* Now iterate through the library list adding their symbols to\n      the list.  */\n   for (list = libraries.first; list; list = list->next)\n     scan_prog_file (list->name, PASS_LIB);\n@@ -2538,7 +2538,7 @@ scan_libraries (const char *prog_name)\n   signal (SIGQUIT, quit_handler);\n #endif\n \n-  /* now iterate through the library list adding their symbols to\n+  /* Now iterate through the library list adding their symbols to\n      the list.  */\n   for (list = libraries.first; list; list = list->next)\n     scan_prog_file (list->name, PASS_LIB);\n@@ -2705,7 +2705,7 @@ scan_prog_file (const char *prog_name, enum pass which_pass)\n \t\t      char *name;\n \n \t\t      if ((name = ldgetname (ldptr, &symbol)) == NULL)\n-\t\t\tcontinue;\t\t/* should never happen */\n+\t\t\tcontinue;\t\t/* Should never happen.  */\n \n #ifdef XCOFF_DEBUGGING_INFO\n \t\t      /* All AIX function names have a duplicate entry"}, {"sha": "1b2d0b2a091ec7ecbfb5f2ec22db018e48fb4ad4", "filename": "gcc/cppcharset.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fcppcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fcppcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppcharset.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -887,7 +887,7 @@ convert_ucn (cpp_reader *pfile, const uchar *from, const uchar *limit,\n   struct cset_converter cvt\n     = wide ? pfile->wide_cset_desc : pfile->narrow_cset_desc;\n \n-  from++;  /* skip u/U */\n+  from++;  /* Skip u/U.  */\n   ucn = _cpp_valid_ucn (pfile, &from, limit, 0);\n \n   rval = one_cppchar_to_utf8 (ucn, &bufp, &bytesleft);\n@@ -966,7 +966,7 @@ convert_hex (cpp_reader *pfile, const uchar *from, const uchar *limit,\n     cpp_error (pfile, CPP_DL_WARNING,\n \t       \"the meaning of '\\\\x' is different in traditional C\");\n \n-  from++;  /* skip 'x' */\n+  from++;  /* Skip 'x'.  */\n   while (from < limit)\n     {\n       c = *from;\n@@ -1148,8 +1148,8 @@ cpp_interpret_string (cpp_reader *pfile, const cpp_string *from, size_t count,\n     {\n       p = from[i].text;\n       if (*p == 'L') p++;\n-      p++; /* skip leading quote */\n-      limit = from[i].text + from[i].len - 1; /* skip trailing quote */\n+      p++; /* Skip leading quote.  */\n+      limit = from[i].text + from[i].len - 1; /* Skip trailing quote.  */\n \n       for (;;)\n \t{"}, {"sha": "3d23cab1fe49ae5c2e81057d78d2b64eaefc7691", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -361,7 +361,7 @@ _cpp_scan_out_logical_line (cpp_reader *pfile, cpp_macro *macro)\n   pfile->out.cur = pfile->out.base;\n   pfile->out.first_line = pfile->line;\n   /* start_of_input_line is needed to make sure that directives really,\n-     really start at the first character of the line. */\n+     really start at the first character of the line.  */\n   start_of_input_line = pfile->buffer->cur;\n  new_context:\n   context = pfile->context;"}, {"sha": "46fc026482adbac64870981055e87210f5c50c65", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -2349,7 +2349,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t\t}\n \t      else if (TREE_CODE (TREE_TYPE (decl)) == REAL_TYPE)\n \t\t{\n-\t\t  /* don't know how to do this yet.  */\n+\t\t  /* Don't know how to do this yet.  */\n \t\t}\n \t      break;\n \t    }"}, {"sha": "23539485f51a354fef63530de727e8d98e2d66f1", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -86,7 +86,7 @@ do { fputs (integer_asm_op (POINTER_SIZE / UNITS_PER_WORD, TRUE), FILE); \\\n    } while (0)\n #endif\n \n-/* choose a reasonable default for ASM_OUTPUT_ASCII.  */\n+/* Choose a reasonable default for ASM_OUTPUT_ASCII.  */\n \n #ifndef ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(MYFILE, MYSTRING, MYLENGTH) \\"}, {"sha": "1ee8f9fcde19f062670896851ca5d47c6d78f8e5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -11916,7 +11916,7 @@ gen_namespace_die (tree decl)\n   dw_die_ref context_die = setup_namespace_context (decl, comp_unit_die);\n \n   /* Namespace aliases have a DECL_ABSTRACT_ORIGIN of the namespace\n-     they are an alias of. */\n+     they are an alias of.  */\n   if (DECL_ABSTRACT_ORIGIN (decl) == NULL)\n     {\n       /* Output a real namespace.  */"}, {"sha": "b226215e9b0f3ab871f5531881388cde77e6f62e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -798,7 +798,7 @@ div_and_round_double (enum tree_code code, int uns,\n       abort ();\n     }\n \n-  /* compute true remainder:  rem = num - (quo * den)  */\n+  /* Compute true remainder:  rem = num - (quo * den)  */\n   mul_double (*lquo, *hquo, lden_orig, hden_orig, lrem, hrem);\n   neg_double (*lrem, *hrem, lrem, hrem);\n   add_double (lnum_orig, hnum_orig, *lrem, *hrem, lrem, hrem);"}, {"sha": "179564ad052a3753c55cca2b7eada810f94debfd", "filename": "gcc/genautomata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -8666,7 +8666,7 @@ output_internal_insn_latency_func (void)\n       {\n \tdecl = description->decls[i];\n \tif (DECL_INSN_RESERV (decl)->default_latency > UCHAR_MAX\n-\t    && tabletype[0] != 'i')  /* don't shrink it */\n+\t    && tabletype[0] != 'i')  /* Don't shrink it.  */\n \t  tabletype = \"unsigned short\";\n \tif (DECL_INSN_RESERV (decl)->default_latency > USHRT_MAX)\n \t  tabletype = \"int\";"}, {"sha": "86e3544a7bfea6002ee3445473bf92de993e1f90", "filename": "gcc/genconditions.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fgenconditions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fgenconditions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconditions.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -35,7 +35,7 @@\n #include \"hashtab.h\"\n #include \"gensupport.h\"\n \n-/* so we can include except.h in the generated file */\n+/* so we can include except.h in the generated file.  */\n static int saw_eh_return;\n \n static htab_t condition_table;"}, {"sha": "66e6bd1df01b5781481745ce486514a6815eef5a", "filename": "gcc/genflags.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -209,7 +209,7 @@ gen_insn (rtx insn)\n     max_id_len = len;\n \n   if (truth == 0)\n-    /* emit nothing */;\n+    /* Emit nothing.  */;\n   else if (truth == 1)\n     printf (\"#define HAVE_%s 1\\n\", name);\n   else"}, {"sha": "6655d3cc37dc5079518bd0cde9e8994f58333c3d", "filename": "gcc/gengtype.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -1947,7 +1947,7 @@ write_func_for_structure  (type_p orig_s, type_p s, type_p *param,\n   d.bitmap = s->u.s.bitmap;\n   d.param = param;\n   d.prev_val[0] = \"*x\";\n-  d.prev_val[1] = \"not valid postage\";  /* guarantee an error */\n+  d.prev_val[1] = \"not valid postage\";  /* Guarantee an error.  */\n   d.prev_val[3] = \"x\";\n   d.val = \"(*x)\";\n \n@@ -2200,7 +2200,7 @@ write_local_func_for_structure (type_p orig_s, type_p s, type_p *param)\n   d.bitmap = s->u.s.bitmap;\n   d.param = param;\n   d.prev_val[0] = d.prev_val[2] = \"*x\";\n-  d.prev_val[1] = \"not valid postage\";  /* guarantee an error */\n+  d.prev_val[1] = \"not valid postage\";  /* Guarantee an error.  */\n   d.prev_val[3] = \"x\";\n   d.val = \"(*x)\";\n "}, {"sha": "b5efc02b1a68dc8c1beb7d877a1fbac4d78109a8", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -1421,7 +1421,7 @@ copy_insn_list (rtx insns, struct inline_remap *map, rtx static_chain_value)\n \t\t  gen_rtx_MEM (GET_MODE (static_chain_incoming_rtx),\n \t\t\t       SET_DEST (set));\n \n-\t      /* emit the instruction in case it is used for something\n+\t      /* Emit the instruction in case it is used for something\n \t\t other than setting the static chain; if it's not used,\n \t\t it can always be removed as dead code */\n \t      copy = emit_insn (copy_rtx_and_substitute (pattern, map, 0));"}, {"sha": "0892724b4afdeecc8444609bd80ee64345c9b821", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -8105,7 +8105,7 @@ check_dbra_loop (struct loop *loop, int insn_count)\n \t  && (INTVAL (bl->initial_value)\n \t      % (-INTVAL (bl->biv->add_val))) == 0)\n \t{\n-\t  /* register always nonnegative, add REG_NOTE to branch */\n+\t  /* Register always nonnegative, add REG_NOTE to branch.  */\n \t  if (! find_reg_note (jump, REG_NONNEG, NULL_RTX))\n \t    REG_NOTES (jump)\n \t      = gen_rtx_EXPR_LIST (REG_NONNEG, bl->biv->dest_reg,"}, {"sha": "f2b4068df1acbe574506d1c8199b9a4f0c68253e", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -468,7 +468,7 @@ estimate_probability (struct loops *loops_info)\n \t\t   / exits);\n \t}\n       \n-      /* Free basic blocks from get_loop_body. */\n+      /* Free basic blocks from get_loop_body.  */\n       free (bbs);\n     }\n "}, {"sha": "b6380ebb821c1deec27090ef6bb97bbfce8e8f60", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a21ab90e2c3f7ceccac31326cb8658c88f41a2/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=e0a21ab90e2c3f7ceccac31326cb8658c88f41a2", "patch": "@@ -1159,7 +1159,7 @@ sdbout_one_type (tree type)\n \t      }\n \t  }\n \n-\t/* output the individual fields */\n+\t/* Output the individual fields.  */\n \n \tif (TREE_CODE (type) == ENUMERAL_TYPE)\n \t  {\n@@ -1206,7 +1206,7 @@ sdbout_one_type (tree type)\n \t\t  }\n \t\tPUT_SDB_ENDEF;\n \t      }\n-\t/* output end of a structure,union, or enumeral definition */\n+\t/* Output end of a structure,union, or enumeral definition.  */\n \n \tPUT_SDB_PLAIN_DEF (\"eos\");\n \tPUT_SDB_INT_VAL (size);"}]}