{"sha": "c46bc0e2c76a7a333785108aff3bee05418fc342", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2YmMwZTJjNzZhN2EzMzM3ODUxMDhhZmYzYmVlMDU0MThmYzM0Mg==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2005-05-27T02:55:21Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-05-27T02:55:21Z"}, "message": "comp-types-8.m, [...]: New.\n\n        * objc.dg/comp-types-8.m, objc.dg/encode-6.m,\n        objc.dg/extra-semi.m, objc.dg/fix-and-continue-2.m,\n        objc.dg/isa-field-1.m, objc.dg/lookup-1.m, objc.dg/method-15.m,\n        objc.dg/method-16.m, objc.dg/method-17.m, objc.dg/method-18.m,\n        objc.dg/method-19.m, objc.dg/next-runtime-1.m,\n        objc.dg/no-extra-load.m, objc.dg/pragma-1.m, objc.dg/stubify-1.m,\n        objc.dg/stubify-2.m, objc.dg/super-class-4.m,\n        objc.dg/super-dealloc-1.m, objc.dg/super-dealloc-2.m,\n        objc.dg/try-catch-6.m, objc.dg/try-catch-7.m,\n        objc.dg/try-catch-8.m: New.\n\nFrom-SVN: r100241", "tree": {"sha": "c450d28bd5d2af1db16e855ea4cfb9169a217d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c450d28bd5d2af1db16e855ea4cfb9169a217d20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c46bc0e2c76a7a333785108aff3bee05418fc342", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46bc0e2c76a7a333785108aff3bee05418fc342", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c46bc0e2c76a7a333785108aff3bee05418fc342", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46bc0e2c76a7a333785108aff3bee05418fc342/comments", "author": null, "committer": null, "parents": [{"sha": "1acdf11bd5d3eb94bf6e1fdefe5d3705cd0b3741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1acdf11bd5d3eb94bf6e1fdefe5d3705cd0b3741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1acdf11bd5d3eb94bf6e1fdefe5d3705cd0b3741"}], "stats": {"total": 683, "additions": 683, "deletions": 0}, "files": [{"sha": "7f9c64a6f2e576ce79e908481e87020aad8e7385", "filename": "gcc/testsuite/objc.dg/comp-types-8.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcomp-types-8.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* Another gimplifier ICE... */\n+\n+#include <objc/Object.h>\n+\n+@interface MyView: Object {\n+  int _frame;\n+}\n+- (void)_finalize;\n+@end\n+\n+@interface MyViewTemplate: MyView {\n+  void *_className;\n+}\n+- (id)createRealObject;\n+@end\n+\n+@implementation MyViewTemplate\n+- (id)createRealObject {\n+    id realObj;\n+    *(MyView *)realObj = *(MyView *)self;\n+    return realObj;\n+}\n+@end"}, {"sha": "263b02ad0f3c805ad2b03a1784e309ed966e43fa", "filename": "gcc/testsuite/objc.dg/encode-6.m", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-6.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,22 @@\n+/* Test for graceful encoding of const-qualified fields and parameters.  */\n+/* Author: Ziemowit Laski  <zlaski@apple.com>  */\n+/* { dg-do compile } */\n+\n+struct Cxx {\n+  const struct Cxx *next;\n+};\n+\n+@interface ObjC {\n+  const struct Cxx *obj;\n+}\n+- (ObjC *)initWithCxx: (struct Cxx *const)c and: (const struct Cxx *)d;\n+@end\n+\n+@implementation ObjC\n+- (ObjC *)initWithCxx: (struct Cxx *const)c and: (const struct Cxx *)d {\n+  obj = d;\n+  return self;\n+}\n+@end \n+\n+/* { dg-final { scan-assembler \"@\\[0-9\\]+@0:\\[0-9\\]+r\\\\^{Cxx=\\\\^r{Cxx}}\\[0-9\\]+\\\\^r{Cxx}\" } } */"}, {"sha": "ad555962dbbc87687891fc540a8111c8d3ec6f8d", "filename": "gcc/testsuite/objc.dg/extra-semi.m", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fextra-semi.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fextra-semi.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fextra-semi.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,10 @@\n+/* Allow extra semicolons in between method declarations,\n+   for old times' sake.  */\n+\n+/* { dg-do compile } */\n+\n+@interface Foo\n+   -(Foo *) expiration;\n+   -(void) setExpiration:(Foo *) date;;\n+   -(int) getVersion;\n+@end"}, {"sha": "33cb8467dcd7dcd6abdf12a207d2cdb507ce2ff4", "filename": "gcc/testsuite/objc.dg/fix-and-continue-2.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-2.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,24 @@\n+/* Static variables, even if local, require indirect access through a stub\n+   if -mfix-and-continue is enabled.  */\n+\n+/* Author: Ziemowit Laski <zlaski@apple.com> */\n+   \n+/* { dg-do assemble { target *-*-darwin* } } */\n+/* { dg-options \"-mfix-and-continue\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface Foo: Object\n++ (Object *)indexableFileTypes;\n+@end\n+\n+@implementation Foo\n++ (Object *)indexableFileTypes\n+{\n+  static Object *fileTypes = 0;\n+  if(!fileTypes) {\n+    fileTypes = [Object new];\n+  }\n+  return fileTypes;\n+}\n+@end"}, {"sha": "70edd0e02e10968fa32cf923efd0959675a0be7a", "filename": "gcc/testsuite/objc.dg/isa-field-1.m", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fisa-field-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fisa-field-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fisa-field-1.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,43 @@\n+/* Ensure there are no bizarre difficulties with accessing the 'isa' field of objects.  */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@interface Object (Test)\n+- (Class) test1: (id)object;\n+@end\n+\n+@interface Derived: Object\n+- (Class) test2: (id)object;\n+@end\n+\n+@implementation Object (Test)\n+\n+Class test1(id object) {\n+    Class cls = object->isa;\n+    return cls;\n+}\n+- (Class) test1: (id)object {\n+    Class cls = object->isa;\n+    return cls;\n+}\n+\n+@end\n+\n+@implementation Derived\n+\n+Class test2(id object) {\n+    Class cls = object->isa;\n+    return cls;\n+}\n+- (Class) test2: (id)object {\n+    Class cls = object->isa;\n+    return cls;\n+}\n+\n+@end\n+\n+Class test3(id object) {\n+    Class cls = object->isa;\n+    return cls;\n+}"}, {"sha": "eaabcb2c04903ccc95088fa7dbecda3cf543ef32", "filename": "gcc/testsuite/objc.dg/lookup-1.m", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Flookup-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Flookup-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Flookup-1.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+typedef struct MyWidget {\n+  int a;\n+} MyWidget;\n+\n+MyWidget gWidget = { 17 };\n+\n+@protocol MyProto\n+- (MyWidget *)widget;\n+@end\n+\n+@interface Foo: Object\n+@end\n+\n+@interface Bar: Foo <MyProto>\n+@end\n+\n+@interface Container: Object\n++ (MyWidget *)elementForView:(Foo *)view;\n+@end\n+\n+@implementation Foo\n+@end\n+\n+@implementation Bar\n+- (MyWidget *)widget {\n+  return &gWidget;\n+}\n+@end\n+\n+@implementation Container\n++ (MyWidget *)elementForView:(Foo *)view\n+{\n+  MyWidget *widget = nil;\n+  if ([view conformsTo:@protocol(MyProto)]) {\n+    widget = [(Foo <MyProto> *)view widget];\n+  }\n+  return widget;\n+}\n+@end\n+\n+int main(void) {\n+  id view = [Bar new];\n+  MyWidget *w = [Container elementForView: view];\n+\n+  if (!w || w->a != 17)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "0ba3625a8177efe2578ad7a0e71b8e4e47c38bab", "filename": "gcc/testsuite/objc.dg/method-15.m", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-15.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-15.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-15.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,56 @@\n+/* Test if prior method lookup at method @implementation time is not\n+   overly aggressive, leading to methods being found in other classes.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@class NSString;\n+\n+@protocol NSMenuItem\n++ (void)setUsesUserKeyEquivalents:(BOOL)flag;\n++ (BOOL)usesUserKeyEquivalents;\n+@end\n+\n+@interface NSMenuItem : Object <NSMenuItem> {\n+  @private\n+  id _menu;\n+}\n+@end\n+\n+@interface NSResponder : Object <NSMenuItem>\n+{\n+  id _nextResponder;\n+}\n+@end\n+\n+@interface Object(NSMenuValidation)\n+- (BOOL)validateMenuItem:(id <NSMenuItem>)menuItem;\n+@end\n+\n+@interface NSResponder (NSStandardKeyBindingMethods)\n+- (void)insertText:(id)insertString;\n+- (void)doCommandBySelector:(SEL)aSelector;\n+@end\n+\n+@interface NSView : NSResponder\n+{\n+  id _superview;\n+  id _subviews;\n+}\n+@end\n+\n+@interface SKTGraphicView : NSView {\n+    @private\n+    float _gridSpacing;\n+}\n+@end\n+\n+@implementation SKTGraphicView\n+- (BOOL)validateMenuItem:(NSMenuItem *)item {\n+  return (BOOL)1;\n+}\n+- (void)insertText:(NSString *)str {\n+}\n+@end"}, {"sha": "c8394ffbb880ebe0722eef354cab4ef4dd5d891a", "filename": "gcc/testsuite/objc.dg/method-16.m", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-16.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-16.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-16.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,24 @@\n+/* Do not warn about \"slightly\" mismatched method signatures if \n+   -Wstrict-selector-match is off.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-strict-selector-match\" } */\n+\n+#include <objc/objc.h>\n+\n+@interface Base\n+- (id) meth1: (Base *)arg1;\n+- (id) window;\n+@end\n+\n+@interface Derived: Base\n+- (id) meth1: (Derived *)arg1;\n+- (Base *)window;\n+@end\n+\n+void foo(void) {\n+  id r;\n+\n+  [r meth1:r];\n+  [r window];\n+}"}, {"sha": "5e28ddc1bb782d1ff39a6b03d6c6139d99a3a008", "filename": "gcc/testsuite/objc.dg/method-17.m", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-17.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-17.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-17.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,26 @@\n+/* Test for spurious \"may or may not return a value\" warnings.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wextra\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface Foo: Object\n+- (id) meth1;\n+- (void) meth2;\n+@end\n+\n+extern int bar;\n+\n+@implementation Foo\n+- (id) meth1 {\n+  if (bar)\n+    return [Object new];\n+  return;\n+} /* { dg-warning \"this function may return with or without a value\" } */\n+- (void) meth2 {\n+  if (!bar)\n+    return;\n+  bar = 0;\n+} /* { dg-bogus \"this function may return with or without a value\" } */\n+@end"}, {"sha": "77fd3ef1b7fd73ec3a4846061254e7950ba2c2bc", "filename": "gcc/testsuite/objc.dg/method-18.m", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-18.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-18.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-18.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,29 @@\n+/* Do not warn about \"slightly\" mismatched method signatures if \n+   -Wstrict-selector-match is off.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-strict-selector-match\" } */\n+\n+#include <objc/objc.h>\n+\n+typedef enum { en1_1, en1_2 } En1;\n+typedef enum { en2_1, en2_2 } En2;\n+typedef struct { int a, b; } St1;\n+typedef struct { unsigned a, b; } St2;\n+\n+@interface Base\n+- (id) meth1: (En1)arg1;\n+- (St1) window;\n+@end\n+\n+@interface Derived: Base\n+- (id) meth1: (En2)arg1;\n+- (St2)window;\n+@end\n+\n+void foo(void) {\n+  id r;\n+  En1 en;\n+\n+  [r meth1:en];\n+  [r window];\n+}"}, {"sha": "47163711b3dc47bce401d4d5222eb6b9c9db4ba7", "filename": "gcc/testsuite/objc.dg/method-19.m", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-19.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,17 @@\n+/* The following should NOT generate \"may not respond to\" warnings, since a forward-declared\n+   @class (instance) should be treated like a 'Class') ('id').  */\n+\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@class NotKnown;\n+\n+void foo(NotKnown *n) {\n+  [NotKnown new];\n+  [n nonexistent_method]; /* { dg-warning \"no .\\\\-nonexistent_method. method found\" } */\n+}\n+\n+/* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 0 } */"}, {"sha": "db14897fe8d6c38325c332f869ad3ef6fe85bf98", "filename": "gcc/testsuite/objc.dg/next-runtime-1.m", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fnext-runtime-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fnext-runtime-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fnext-runtime-1.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,18 @@\n+/* Test that the correct version number (6) is set in the module descriptor\n+   when compiling for the NeXT runtime.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-fnext-runtime\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface FooBar: Object\n+- (void)boo;\n+@end\n+\n+@implementation FooBar\n+- (void)boo { }\n+@end\n+\n+/* { dg-final { scan-assembler \"L_OBJC_MODULES:\\n\\[ \\t\\]*\\.long\\t6\\n\" } } */"}, {"sha": "9b50e8358bacf4c35a7d08c129ab96028afe70be", "filename": "gcc/testsuite/objc.dg/no-extra-load.m", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fno-extra-load.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fno-extra-load.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fno-extra-load.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target *-*-darwin* } } */\n+\n+#import <Foundation/Foundation.h>\n+main() { [NSObject new]; }\n+\n+/* { dg-final { scan-assembler-not \"L_objc_msgSend\\\\\\$non_lazy_ptr\" } } */"}, {"sha": "14c4d7928a24f25cc844cfc65f2b9e5380131ef9", "filename": "gcc/testsuite/objc.dg/pragma-1.m", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fpragma-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fpragma-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpragma-1.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,23 @@\n+/* It is OK to use #pragma inside @implementation body. This test checks that.  */\n+/* Ziemowit Laski  <zlaski@apple.com>.  */\n+\n+@interface A\n+{\n+   int p;\n+}\n++(int) foo;\n+-(int) bar;\n+@end\n+\n+@implementation A\n+#pragma mark -\n+#pragma mark init / dealloc\n++ (int)foo {\n+  return 1;\n+}\n+#pragma mark -\n+#pragma mark Private Functions\n+- (int)bar {\n+  return 2;\n+}\n+@end"}, {"sha": "2b1aa61cf59d6b6681480c21fbbc16e49eeb6c60", "filename": "gcc/testsuite/objc.dg/stubify-1.m", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-1.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,33 @@\n+/* All calls must be properly stubified.  Complain about any \"call\n+   _objc_msgSend<end-of-line>\" without the $stub suffix.  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-Os -mdynamic-no-pic\" } */\n+\n+typedef struct objc_object { } *id ;\n+int x = 41 ;\n+extern id objc_msgSend(id self, char * op, ...);\n+extern int bogonic (int, int, int) ;\n+@interface Document {}\n+- (Document *) window;\n+- (Document *) class;\n+- (Document *) close;\n+@end\n+@implementation Document\n+- (Document *) class { }\n+- (Document *) close { }\n+- (Document *) window { }\n+- (void)willEndCloseSheet:(void *)sheet returnCode:(int)returnCode contextInfo:(void *)contextInfo {\n+  [[self window] close];\n+  ((void (*)(id, char *, int))objc_msgSend)([self class], (char *)contextInfo, 1);\n+  ((void (*)(id, char *, int))bogonic)([self class], (char *)contextInfo, 1);\n+  bogonic (3, 4, 5);\n+  x++;\n+}\n+@end\n+\n+/* { dg-final { scan-assembler-not \"\\(bl|call\\)\\[ \\t\\]+_objc_msgSend\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\(bl|call\\)\\[ \\t\\]+L_objc_msgSend\\\\\\$stub\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\(bl|call\\)\\[ \\t\\]+_bogonic\\n\" } } */\n+/* { dg-final { scan-assembler     \"\\(bl|call\\)\\[ \\t\\]+L_bogonic\\\\\\$stub\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$non_lazy_ptr\" } } */"}, {"sha": "6e9b3a019fdc44c17cebe03d0801c4fe75dcc03f", "filename": "gcc/testsuite/objc.dg/stubify-2.m", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstubify-2.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,31 @@\n+/* All calls must be properly stubified.  */\n+/* Testcase extracted from TextEdit:Document.m.  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-mdynamic-no-pic -fdump-rtl-jump\" } */\n+\n+typedef struct objc_object { } *id ;\n+int x = 41 ;\n+extern id objc_msgSend(id self, char * op, ...);\n+extern int bogonic (int, int, int) ;\n+@interface Document {}\n+- (Document *) window;\n+- (Document *) class;\n+- (Document *) close;\n+@end\n+@implementation Document\n+- (Document *) class { }\n+- (Document *) close { }\n+- (Document *) window { }\n+- (void)willEndCloseSheet:(void *)sheet returnCode:(int)returnCode contextInfo:(void *)contextInfo {\n+  [[self window] close];\n+  ((void (*)(id, char *, int))objc_msgSend)([self class], (char *)contextInfo, 1);\n+  ((void (*)(id, char *, int))bogonic)([self class], (char *)contextInfo, 1);\n+  bogonic (3, 4, 5);\n+  x++;\n+}\n+@end\n+\n+/* Any symbol_ref of an un-stubified objc_msgSend is an error; look\n+   for \"objc_msgSend\" in quotes, without the $stub suffix.  */\n+/* { dg-final { scan-file-not stubify-2.m.03.jump \"symbol_ref.*\\\"objc_msgSend\\\"\" } } */"}, {"sha": "5248123e79a7d0e58d2513895d75444c65518154", "filename": "gcc/testsuite/objc.dg/super-class-4.m", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-4.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,34 @@\n+/* Bail out gracefully if attempting to derive from a class that has only been\n+   forward-declared (via @class).  Conversely, @compatibility_alias declarations\n+   should be traversed to find the @interface.  */\n+/* { dg-do compile } */\n+\n+#include <objc/Object.h>\n+\n+@class MyWpModule;\n+\n+@compatibility_alias MyObject Object;\n+@compatibility_alias FictitiousModule MyWpModule;\n+\n+@protocol MySelTarget\n+- (id) meth1;\n+@end\n+\n+@protocol Img\n+- (id) meth2;\n+@end\n+\n+@interface FunnyModule: FictitiousModule <Img> /* { dg-error \".MyWpModule., superclass of .FunnyModule.\" } */\n+- (id) meth2;\n+@end\n+\n+@interface MyProjWpModule : MyWpModule <MySelTarget, Img> /* { dg-error \".MyWpModule., superclass of .MyProjWpModule.\" } */ {\n+  id i1, i2;\n+}\n+- (id) meth1;\n+- (id) meth2;\n+@end\n+\n+@interface AnotherModule: MyObject <MySelTarget>\n+- (id) meth1;\n+@end"}, {"sha": "0ab177bb73c9f0d2e6979279435d71a616626137", "filename": "gcc/testsuite/objc.dg/super-dealloc-1.m", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-dealloc-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-dealloc-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-dealloc-1.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,46 @@\n+/* Check for warnings about missing [super dealloc] calls.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-do compile } */\n+\n+@interface Foo {\n+  void *isa;\n+}\n+- (void) dealloc;\n+- (void) some_other;\n+@end\n+\n+@interface Bar: Foo {\n+  void *casa;\n+}\n+- (void) dealloc;\n+@end\n+\n+@interface Baz: Bar {\n+  void *usa;\n+}\n+- (void) dealloc;\n+@end\n+\n+@implementation Foo\n+- (void) dealloc {\n+  isa = 0;   /* Should not warn here.  */\n+}\n+- (void) some_other {\n+  isa = (void *)-1;\n+}\n+@end\n+\n+@implementation Bar\n+- (void) dealloc {\n+  casa = 0;\n+  [super some_other];\n+}  /* { dg-warning \"method possibly missing a .super dealloc. call\" } */\n+@end\n+\n+@implementation Baz\n+- (void) dealloc {\n+  usa = 0;\n+  [super dealloc];  /* Should not warn here.  */\n+}\n+@end"}, {"sha": "80dcf495062dfaa7ab080a0d79db030019be0523", "filename": "gcc/testsuite/objc.dg/super-dealloc-2.m", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-dealloc-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-dealloc-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-dealloc-2.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,46 @@\n+/* Check for warnings about missing [super dealloc] calls.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com>  */\n+\n+/* { dg-do compile } */\n+\n+@interface Foo {\n+  void *isa;\n+}\n+- (void) dealloc;\n+- (void) some_other;\n+@end\n+\n+@interface Bar: Foo {\n+  void *casa;\n+}\n+- (void) dealloc0;\n+@end\n+\n+@interface Baz: Bar {\n+  void *usa;\n+}\n+- (void) dealloc;\n+@end\n+\n+@implementation Foo\n+- (void) dealloc {\n+  isa = 0;   /* Should not warn here.  */\n+}\n+- (void) some_other {\n+  isa = (void *)-1;\n+}\n+@end\n+\n+@implementation Bar\n+- (void) dealloc0 {\n+  casa = 0;\n+  [super some_other];  /* Should not warn here.  */\n+} \n+@end\n+\n+@implementation Baz\n+- (void) dealloc {\n+  usa = 0;\n+  [super dealloc0]; \n+} /* { dg-warning \"method possibly missing a .super dealloc. call\" } */\n+@end"}, {"sha": "5276f0f68d1114424da354953811f88cf81e7d38", "filename": "gcc/testsuite/objc.dg/try-catch-6.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-6.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+\n+#include <objc/Object.h>\n+\n+int main (int argc, const char * argv[]) {\n+  Object * pool = [Object new];\n+  int a;\n+\n+  if ( 1 ) {\n+    \n+    @try {\n+      a = 1;\n+    }\n+    @catch (Object *e) {\n+      a = 2;\n+    }\n+    @finally {\n+      a = 3;\n+    }\n+  }\n+    \n+  [pool free];\n+  return 0;\n+}"}, {"sha": "b1e1cd191c6aec47fb7652d21b336d6dff90d1ad", "filename": "gcc/testsuite/objc.dg/try-catch-7.m", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-7.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,27 @@\n+/* Test for graceful compilation of @synchronized statements.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+\n+#include <objc/Object.h>\n+\n+@interface Derived: Object\n+- (id) meth;\n+@end\n+\n+@implementation Derived\n+- (id) meth {\n+  return self;\n+}\n+\n+static Derived* rewriteDict(void) {\n+  static Derived *sDict = 0;\n+  if (sDict == 0) {\n+    @synchronized ([Derived class]) {\n+      if (sDict == 0)\n+\tsDict = [Derived new];\n+    }\n+  } \n+  return sDict;\n+}\n+@end"}, {"sha": "384faa38114983f18e7b3b42d6aa4d22c6973543", "filename": "gcc/testsuite/objc.dg/try-catch-8.m", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46bc0e2c76a7a333785108aff3bee05418fc342/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-8.m?ref=c46bc0e2c76a7a333785108aff3bee05418fc342", "patch": "@@ -0,0 +1,65 @@\n+/* Check that local variables that get modified inside the @try\n+   block survive until the @catch block is reached.  */\n+/* Developed by Ziemowit Laski <zlaski@apple.com>.  */\n+\n+/* { dg-options \"-fobjc-exceptions -O2\" } */\n+/* { dg-do run } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+int gi1 = 9, gi2 = 19;\n+float gf1 = 9.0, gf2 = 19.0;\n+id obj2 = nil;\n+\n+void foo (int arg1, float *arg2)\n+{\n+  int *pi = &gi1;\n+  float *pf = &gf1;\n+  id obj1 = nil;\n+  int local1 = 45, local2 = 47;\n+  float local3 = 3.0, local4 = 4.0;\n+  register int local5 = 15;\n+  static float local6 = 16.0;\n+\n+  @try {\n+    local1 = 123;\n+    local2 = 345;\n+    local3 = 5.0;\n+    local4 = 6.0;\n+    local5 = 17;\n+    local6 = 18.0;\n+    pi = &gi2;\n+    pf = &gf2;\n+    obj2 = obj1 = [Object new];\n+    arg1 = 17;\n+    arg2 = &gf2;\n+    \n+    @throw [Object new];\n+  }\n+  @catch (Object *obj) {\n+    if (local1 != 123 || local2 != 345 || local3 != 5.0 || local4 != 6.0\n+       || local5 != 17 || local6 != 18.0) {\n+      printf(\"Abort 1\\n\");\n+      abort();\n+    }\n+    if(pi != &gi2 || pf != &gf2) {\n+      printf(\"Abort 2\\n\");\n+      abort();\n+    }\n+    if(!obj1 || obj1 != obj2) {\n+      printf(\"Abort 3\\n\");\n+      abort();\n+    }\n+    if(arg1 != 17 || arg2 != &gf2) {\n+      printf(\"Abort 4\\n\");\n+      abort();\n+    }\n+  }\n+}\n+\n+int main(void) {\n+  foo(15, &gf1);\n+  return 0;\n+}"}]}