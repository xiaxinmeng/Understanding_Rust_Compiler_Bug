{"sha": "36686ad6c0018b2f17eabe9d5578530b7661b964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2ODZhZDZjMDAxOGIyZjE3ZWFiZTlkNTU3ODUzMGI3NjYxYjk2NA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-12-01T23:48:13Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2005-12-01T23:48:13Z"}, "message": "simplify-rtx.c (simplify_plus_minus): Do simplify constants.\n\n\t* simplify-rtx.c (simplify_plus_minus): Do simplify constants.\n\tDelete dead code.\n\nFrom-SVN: r107840", "tree": {"sha": "e5acd90e1a6a766bad1b0202c0c04c3cd0f3f23c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5acd90e1a6a766bad1b0202c0c04c3cd0f3f23c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36686ad6c0018b2f17eabe9d5578530b7661b964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36686ad6c0018b2f17eabe9d5578530b7661b964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36686ad6c0018b2f17eabe9d5578530b7661b964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36686ad6c0018b2f17eabe9d5578530b7661b964/comments", "author": null, "committer": null, "parents": [{"sha": "728cdd0872eb752c12519e4e6c0b4f9fa5d226e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/728cdd0872eb752c12519e4e6c0b4f9fa5d226e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/728cdd0872eb752c12519e4e6c0b4f9fa5d226e1"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "e40030ad5fcad4d0a118488c8bea51358866e0eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36686ad6c0018b2f17eabe9d5578530b7661b964/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36686ad6c0018b2f17eabe9d5578530b7661b964/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36686ad6c0018b2f17eabe9d5578530b7661b964", "patch": "@@ -1,3 +1,8 @@\n+2005-12-02  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* simplify-rtx.c (simplify_plus_minus): Do simplify constants.\n+\tDelete dead code.\n+\n 2005-12-01  Richard Henderson  <rth@redhat.com>\n \n \t* optabs.c (expand_vec_cond_expr): Use EXPAND_NORMAL."}, {"sha": "9b39f0d97225cba63a26922916c2019da1bf4312", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36686ad6c0018b2f17eabe9d5578530b7661b964/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36686ad6c0018b2f17eabe9d5578530b7661b964/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=36686ad6c0018b2f17eabe9d5578530b7661b964", "patch": "@@ -2602,7 +2602,7 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n {\n   struct simplify_plus_minus_op_data ops[8];\n   rtx result, tem;\n-  int n_ops = 2, input_ops = 2, input_consts = 0, n_consts;\n+  int n_ops = 2, input_ops = 2;\n   int first, changed, canonicalized = 0;\n   int i, j;\n \n@@ -2661,7 +2661,6 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n \t\t  ops[n_ops].op = XEXP (XEXP (this_op, 0), 1);\n \t\t  ops[n_ops].neg = this_neg;\n \t\t  n_ops++;\n-\t\t  input_consts++;\n \t\t  changed = 1;\n \t          canonicalized = 1;\n \t\t}\n@@ -2699,7 +2698,16 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n \n   gcc_assert (n_ops >= 2);\n   if (!canonicalized)\n-    return NULL_RTX;\n+    {\n+      int n_constants = 0;\n+\n+      for (i = 0; i < n_ops; i++)\n+\tif (GET_CODE (ops[i].op) == CONST_INT)\n+\t  n_constants++;\n+\n+      if (n_constants <= 1)\n+\treturn NULL_RTX;\n+    }\n \n   /* If we only have two operands, we can avoid the loops.  */\n   if (n_ops == 2)\n@@ -2728,11 +2736,6 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n       return simplify_const_binary_operation (code, mode, lhs, rhs);\n     }\n \n-  /* Count the number of CONSTs we didn't split above.  */\n-  for (i = 0; i < n_ops; i++)\n-    if (GET_CODE (ops[i].op) == CONST)\n-      input_consts++;\n-\n   /* Now simplify each pair of operands until nothing changes.  The first\n      time through just simplify constants against each other.  */\n \n@@ -2835,12 +2838,6 @@ simplify_plus_minus (enum rtx_code code, enum machine_mode mode, rtx op0,\n       n_ops--;\n     }\n \n-  /* Count the number of CONSTs that we generated.  */\n-  n_consts = 0;\n-  for (i = 0; i < n_ops; i++)\n-    if (GET_CODE (ops[i].op) == CONST)\n-      n_consts++;\n-\n   /* Put a non-negated operand first, if possible.  */\n \n   for (i = 0; i < n_ops && ops[i].neg; i++)"}]}