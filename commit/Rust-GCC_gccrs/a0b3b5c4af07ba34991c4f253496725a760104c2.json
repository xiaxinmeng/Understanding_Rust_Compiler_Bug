{"sha": "a0b3b5c4af07ba34991c4f253496725a760104c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiM2I1YzRhZjA3YmEzNDk5MWM0ZjI1MzQ5NjcyNWE3NjAxMDRjMg==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-12-19T10:17:21Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-12-19T10:17:21Z"}, "message": "[nvptx] Make nvptx state propagation function names more generic\n\nRename state propagation functions to avoid worker/vector terminology.\n\nBuild and reg-tested on x86_64 with nvptx accelerator.\n\n2018-12-19  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.c (nvptx_gen_wcast): Rename as\n\tnvptx_gen_warp_bcast.\n\t(nvptx_gen_wcast): Rename to nvptx_gen_shared_bcast, add bool\n\tvector argument, and update call to nvptx_gen_shared_bcast.\n\t(propagator_fn): Add bool argument.\n\t(nvptx_propagate): New bool argument, pass bool argument to fn.\n\t(vprop_gen): Rename to warp_prop_gen, update call to\n\tnvptx_gen_warp_bcast.\n\t(nvptx_vpropagate): Rename to nvptx_warp_propagate, update call to\n\tnvptx_propagate.\n\t(wprop_gen): Rename to shared_prop_gen, update call to\n\tnvptx_gen_shared_bcast.\n\t(nvptx_wpropagate): Rename to nvptx_shared_propagate, update call\n\tto nvptx_propagate.\n\t(nvptx_wsync): Rename to nvptx_cta_sync.\n\t(nvptx_single): Update calls to nvptx_gen_warp_bcast,\n\tnvptx_gen_shared_bcast and nvptx_cta_sync.\n\t(nvptx_process_pars): Likewise.\n\t(write_worker_buffer): Rename as write_shared_buffer.\n\t(nvptx_file_end): Update calls to write_shared_buffer.\n\t(nvptx_expand_worker_addr): Rename as nvptx_expand_shared_addr.\n\t(nvptx_expand_builtin): Update call to nvptx_expand_shared_addr.\n\t(nvptx_get_worker_red_addr): Rename as nvptx_get_shared_red_addr.\n\t(nvptx_goacc_reduction_setup): Update call to\n\tnvptx_get_shared_red_addr.\n\t(nvptx_goacc_reduction_fini): Likewise.\n\t(nvptx_goacc_reduction_teardown): Likewise.\n\nFrom-SVN: r267260", "tree": {"sha": "5b11b5a684d3c6f49f873effa3e01ac51347ad67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b11b5a684d3c6f49f873effa3e01ac51347ad67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0b3b5c4af07ba34991c4f253496725a760104c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b3b5c4af07ba34991c4f253496725a760104c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b3b5c4af07ba34991c4f253496725a760104c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b3b5c4af07ba34991c4f253496725a760104c2/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ed57fb8b6988d649c787cbbc2c87acf823498c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed57fb8b6988d649c787cbbc2c87acf823498c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed57fb8b6988d649c787cbbc2c87acf823498c1"}], "stats": {"total": 126, "additions": 84, "deletions": 42}, "files": [{"sha": "ee201a533928eebb5d8174c5b0e600f880cc823b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b3b5c4af07ba34991c4f253496725a760104c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b3b5c4af07ba34991c4f253496725a760104c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0b3b5c4af07ba34991c4f253496725a760104c2", "patch": "@@ -1,3 +1,33 @@\n+2018-12-19  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.c (nvptx_gen_wcast): Rename as\n+\tnvptx_gen_warp_bcast.\n+\t(nvptx_gen_wcast): Rename to nvptx_gen_shared_bcast, add bool\n+\tvector argument, and update call to nvptx_gen_shared_bcast.\n+\t(propagator_fn): Add bool argument.\n+\t(nvptx_propagate): New bool argument, pass bool argument to fn.\n+\t(vprop_gen): Rename to warp_prop_gen, update call to\n+\tnvptx_gen_warp_bcast.\n+\t(nvptx_vpropagate): Rename to nvptx_warp_propagate, update call to\n+\tnvptx_propagate.\n+\t(wprop_gen): Rename to shared_prop_gen, update call to\n+\tnvptx_gen_shared_bcast.\n+\t(nvptx_wpropagate): Rename to nvptx_shared_propagate, update call\n+\tto nvptx_propagate.\n+\t(nvptx_wsync): Rename to nvptx_cta_sync.\n+\t(nvptx_single): Update calls to nvptx_gen_warp_bcast,\n+\tnvptx_gen_shared_bcast and nvptx_cta_sync.\n+\t(nvptx_process_pars): Likewise.\n+\t(write_worker_buffer): Rename as write_shared_buffer.\n+\t(nvptx_file_end): Update calls to write_shared_buffer.\n+\t(nvptx_expand_worker_addr): Rename as nvptx_expand_shared_addr.\n+\t(nvptx_expand_builtin): Update call to nvptx_expand_shared_addr.\n+\t(nvptx_get_worker_red_addr): Rename as nvptx_get_shared_red_addr.\n+\t(nvptx_goacc_reduction_setup): Update call to\n+\tnvptx_get_shared_red_addr.\n+\t(nvptx_goacc_reduction_fini): Likewise.\n+\t(nvptx_goacc_reduction_teardown): Likewise.\n+\n 2018-12-19  Tom de Vries  <tdevries@suse.de>\n \n \t* config/nvptx/nvptx.c (worker_bcast_size): Rename as"}, {"sha": "163f2268e5fdccca72e4e275b99c4d5367aae5b2", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 54, "deletions": 42, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b3b5c4af07ba34991c4f253496725a760104c2/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b3b5c4af07ba34991c4f253496725a760104c2/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=a0b3b5c4af07ba34991c4f253496725a760104c2", "patch": "@@ -1748,7 +1748,7 @@ nvptx_gen_shuffle (rtx dst, rtx src, rtx idx, nvptx_shuffle_kind kind)\n    across the vectors of a single warp.  */\n \n static rtx\n-nvptx_gen_vcast (rtx reg)\n+nvptx_gen_warp_bcast (rtx reg)\n {\n   return nvptx_gen_shuffle (reg, reg, const0_rtx, SHUFFLE_IDX);\n }\n@@ -1779,7 +1779,8 @@ enum propagate_mask\n    how many loop iterations will be executed (0 for not a loop).  */\n    \n static rtx\n-nvptx_gen_wcast (rtx reg, propagate_mask pm, unsigned rep, broadcast_data_t *data)\n+nvptx_gen_shared_bcast (rtx reg, propagate_mask pm, unsigned rep,\n+\t\t\tbroadcast_data_t *data, bool vector)\n {\n   rtx  res;\n   machine_mode mode = GET_MODE (reg);\n@@ -1793,7 +1794,7 @@ nvptx_gen_wcast (rtx reg, propagate_mask pm, unsigned rep, broadcast_data_t *dat\n \tstart_sequence ();\n \tif (pm & PM_read)\n \t  emit_insn (gen_sel_truesi (tmp, reg, GEN_INT (1), const0_rtx));\n-\temit_insn (nvptx_gen_wcast (tmp, pm, rep, data));\n+\temit_insn (nvptx_gen_shared_bcast (tmp, pm, rep, data, vector));\n \tif (pm & PM_write)\n \t  emit_insn (gen_rtx_SET (reg, gen_rtx_NE (BImode, tmp, const0_rtx)));\n \tres = get_insns ();\n@@ -1813,6 +1814,7 @@ nvptx_gen_wcast (rtx reg, propagate_mask pm, unsigned rep, broadcast_data_t *dat\n \t      oacc_bcast_align = align;\n \t    data->offset = (data->offset + align - 1) & ~(align - 1);\n \t    addr = data->base;\n+\t    gcc_assert (data->base != NULL);\n \t    if (data->offset)\n \t      addr = gen_rtx_PLUS (Pmode, addr, GEN_INT (data->offset));\n \t  }\n@@ -3803,11 +3805,11 @@ nvptx_find_sese (auto_vec<basic_block> &blocks, bb_pair_vec_t &regions)\n    regions and (b) only propagating stack entries that are used.  The\n    latter might be quite hard to determine.  */\n \n-typedef rtx (*propagator_fn) (rtx, propagate_mask, unsigned, void *);\n+typedef rtx (*propagator_fn) (rtx, propagate_mask, unsigned, void *, bool);\n \n static bool\n nvptx_propagate (bool is_call, basic_block block, rtx_insn *insn,\n-\t\t propagate_mask rw, propagator_fn fn, void *data)\n+\t\t propagate_mask rw, propagator_fn fn, void *data, bool vector)\n {\n   bitmap live = DF_LIVE_IN (block);\n   bitmap_iterator iterator;\n@@ -3842,7 +3844,7 @@ nvptx_propagate (bool is_call, basic_block block, rtx_insn *insn,\n \t  \n \t  emit_insn (gen_rtx_SET (idx, GEN_INT (fs)));\n \t  /* Allow worker function to initialize anything needed.  */\n-\t  rtx init = fn (tmp, PM_loop_begin, fs, data);\n+\t  rtx init = fn (tmp, PM_loop_begin, fs, data, vector);\n \t  if (init)\n \t    emit_insn (init);\n \t  emit_label (label);\n@@ -3851,15 +3853,15 @@ nvptx_propagate (bool is_call, basic_block block, rtx_insn *insn,\n \t}\n       if (rw & PM_read)\n \temit_insn (gen_rtx_SET (tmp, gen_rtx_MEM (DImode, ptr)));\n-      emit_insn (fn (tmp, rw, fs, data));\n+      emit_insn (fn (tmp, rw, fs, data, vector));\n       if (rw & PM_write)\n \temit_insn (gen_rtx_SET (gen_rtx_MEM (DImode, ptr), tmp));\n       if (fs)\n \t{\n \t  emit_insn (gen_rtx_SET (pred, gen_rtx_NE (BImode, idx, const0_rtx)));\n \t  emit_insn (gen_adddi3 (ptr, ptr, GEN_INT (GET_MODE_SIZE (DImode))));\n \t  emit_insn (gen_br_true_uni (pred, label));\n-\t  rtx fini = fn (tmp, PM_loop_end, fs, data);\n+\t  rtx fini = fn (tmp, PM_loop_end, fs, data, vector);\n \t  if (fini)\n \t    emit_insn (fini);\n \t  emit_insn (gen_rtx_CLOBBER (GET_MODE (idx), idx));\n@@ -3879,7 +3881,7 @@ nvptx_propagate (bool is_call, basic_block block, rtx_insn *insn,\n \n \tif (REGNO (reg) >= FIRST_PSEUDO_REGISTER)\n \t  {\n-\t    rtx bcast = fn (reg, rw, 0, data);\n+\t    rtx bcast = fn (reg, rw, 0, data, vector);\n \n \t    insn = emit_insn_after (bcast, insn);\n \t    empty = false;\n@@ -3888,32 +3890,35 @@ nvptx_propagate (bool is_call, basic_block block, rtx_insn *insn,\n   return empty;\n }\n \n-/* Worker for nvptx_vpropagate.  */\n+/* Worker for nvptx_warp_propagate.  */\n \n static rtx\n-vprop_gen (rtx reg, propagate_mask pm,\n-\t   unsigned ARG_UNUSED (count), void *ARG_UNUSED (data))\n+warp_prop_gen (rtx reg, propagate_mask pm,\n+\t       unsigned ARG_UNUSED (count), void *ARG_UNUSED (data),\n+\t       bool ARG_UNUSED (vector))\n {\n   if (!(pm & PM_read_write))\n     return 0;\n   \n-  return nvptx_gen_vcast (reg);\n+  return nvptx_gen_warp_bcast (reg);\n }\n \n /* Propagate state that is live at start of BLOCK across the vectors\n    of a single warp.  Propagation is inserted just after INSN.\n    IS_CALL and return as for nvptx_propagate.  */\n \n static bool\n-nvptx_vpropagate (bool is_call, basic_block block, rtx_insn *insn)\n+nvptx_warp_propagate (bool is_call, basic_block block, rtx_insn *insn)\n {\n-  return nvptx_propagate (is_call, block, insn, PM_read_write, vprop_gen, 0);\n+  return nvptx_propagate (is_call, block, insn, PM_read_write,\n+\t\t\t  warp_prop_gen, 0, false);\n }\n \n-/* Worker for nvptx_wpropagate.  */\n+/* Worker for nvptx_shared_propagate.  */\n \n static rtx\n-wprop_gen (rtx reg, propagate_mask pm, unsigned rep, void *data_)\n+shared_prop_gen (rtx reg, propagate_mask pm, unsigned rep, void *data_,\n+\t\t bool vector)\n {\n   broadcast_data_t *data = (broadcast_data_t *)data_;\n \n@@ -3937,7 +3942,7 @@ wprop_gen (rtx reg, propagate_mask pm, unsigned rep, void *data_)\n       return clobber;\n     }\n   else\n-    return nvptx_gen_wcast (reg, pm, rep, data);\n+    return nvptx_gen_shared_bcast (reg, pm, rep, data, vector);\n }\n \n /* Spill or fill live state that is live at start of BLOCK.  PRE_P\n@@ -3946,7 +3951,8 @@ wprop_gen (rtx reg, propagate_mask pm, unsigned rep, void *data_)\n    INSN.  IS_CALL and return as for nvptx_propagate.  */\n \n static bool\n-nvptx_wpropagate (bool pre_p, bool is_call, basic_block block, rtx_insn *insn)\n+nvptx_shared_propagate (bool pre_p, bool is_call, basic_block block,\n+\t\t\trtx_insn *insn, bool vector)\n {\n   broadcast_data_t data;\n \n@@ -3955,7 +3961,8 @@ nvptx_wpropagate (bool pre_p, bool is_call, basic_block block, rtx_insn *insn)\n   data.ptr = NULL_RTX;\n \n   bool empty = nvptx_propagate (is_call, block, insn,\n-\t\t\t\tpre_p ? PM_read : PM_write, wprop_gen, &data);\n+\t\t\t\tpre_p ? PM_read : PM_write, shared_prop_gen,\n+\t\t\t\t&data, vector);\n   gcc_assert (empty == !data.offset);\n   if (data.offset)\n     {\n@@ -3973,7 +3980,7 @@ nvptx_wpropagate (bool pre_p, bool is_call, basic_block block, rtx_insn *insn)\n    markers for before and after synchronizations.  */\n \n static rtx\n-nvptx_wsync (bool after)\n+nvptx_cta_sync (bool after)\n {\n   return gen_nvptx_barsync (GEN_INT (after), GEN_INT (0));\n }\n@@ -4328,7 +4335,7 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n \t  emit_insn_before (gen_rtx_SET (tmp, pvar), label);\n \t  emit_insn_before (gen_rtx_SET (pvar, tmp), tail);\n #endif\n-\t  emit_insn_before (nvptx_gen_vcast (pvar), tail);\n+\t  emit_insn_before (nvptx_gen_warp_bcast (pvar), tail);\n \t}\n       else\n \t{\n@@ -4343,16 +4350,18 @@ nvptx_single (unsigned mask, basic_block from, basic_block to)\n \t    oacc_bcast_size = GET_MODE_SIZE (SImode);\n \n \t  data.offset = 0;\n-\t  emit_insn_before (nvptx_gen_wcast (pvar, PM_read, 0, &data),\n+\t  emit_insn_before (nvptx_gen_shared_bcast (pvar, PM_read, 0, &data,\n+\t\t\t\t\t\t    false),\n \t\t\t    before);\n \t  /* Barrier so other workers can see the write.  */\n-\t  emit_insn_before (nvptx_wsync (false), tail);\n+\t  emit_insn_before (nvptx_cta_sync (false), tail);\n \t  data.offset = 0;\n-\t  emit_insn_before (nvptx_gen_wcast (pvar, PM_write, 0, &data), tail);\n+\t  emit_insn_before (nvptx_gen_shared_bcast (pvar, PM_write, 0, &data,\n+\t\t\t\t\t\t    false), tail);\n \t  /* This barrier is needed to avoid worker zero clobbering\n \t     the broadcast buffer before all the other workers have\n \t     had a chance to read this instance of it.  */\n-\t  emit_insn_before (nvptx_wsync (false), tail);\n+\t  emit_insn_before (nvptx_cta_sync (false), tail);\n \t}\n \n       extract_insn (tail);\n@@ -4469,19 +4478,21 @@ nvptx_process_pars (parallel *par)\n \n   if (par->mask & GOMP_DIM_MASK (GOMP_DIM_WORKER))\n     {\n-      nvptx_wpropagate (false, is_call, par->forked_block, par->forked_insn);\n-      bool empty = nvptx_wpropagate (true, is_call,\n-\t\t\t\t     par->forked_block, par->fork_insn);\n+      nvptx_shared_propagate (false, is_call, par->forked_block,\n+\t\t\t      par->forked_insn, false);\n+      bool empty = nvptx_shared_propagate (true, is_call,\n+\t\t\t\t\t   par->forked_block, par->fork_insn,\n+\t\t\t\t\t   false);\n \n       if (!empty || !is_call)\n \t{\n \t  /* Insert begin and end synchronizations.  */\n-\t  emit_insn_before (nvptx_wsync (false), par->forked_insn);\n-\t  emit_insn_before (nvptx_wsync (false), par->join_insn);\n+\t  emit_insn_before (nvptx_cta_sync (false), par->forked_insn);\n+\t  emit_insn_before (nvptx_cta_sync (false), par->join_insn);\n \t}\n     }\n   else if (par->mask & GOMP_DIM_MASK (GOMP_DIM_VECTOR))\n-    nvptx_vpropagate (is_call, par->forked_block, par->forked_insn);\n+    nvptx_warp_propagate (is_call, par->forked_block, par->forked_insn);\n \n   /* Now do siblings.  */\n   if (par->next)\n@@ -4945,10 +4956,11 @@ nvptx_file_start (void)\n   fputs (\"// END PREAMBLE\\n\", asm_out_file);\n }\n \n-/* Emit a declaration for a worker-level buffer in .shared memory.  */\n+/* Emit a declaration for a worker and vector-level buffer in .shared\n+   memory.  */\n \n static void\n-write_worker_buffer (FILE *file, rtx sym, unsigned align, unsigned size)\n+write_shared_buffer (FILE *file, rtx sym, unsigned align, unsigned size)\n {\n   const char *name = XSTR (sym, 0);\n \n@@ -4970,11 +4982,11 @@ nvptx_file_end (void)\n   fputs (func_decls.str().c_str(), asm_out_file);\n \n   if (oacc_bcast_size)\n-    write_worker_buffer (asm_out_file, oacc_bcast_sym,\n+    write_shared_buffer (asm_out_file, oacc_bcast_sym,\n \t\t\t oacc_bcast_align, oacc_bcast_size);\n \n   if (worker_red_size)\n-    write_worker_buffer (asm_out_file, worker_red_sym,\n+    write_shared_buffer (asm_out_file, worker_red_sym,\n \t\t\t worker_red_align, worker_red_size);\n \n   if (need_softstack_decl)\n@@ -5025,7 +5037,7 @@ nvptx_expand_shuffle (tree exp, rtx target, machine_mode mode, int ignore)\n /* Worker reduction address expander.  */\n \n static rtx\n-nvptx_expand_worker_addr (tree exp, rtx target,\n+nvptx_expand_shared_addr (tree exp, rtx target,\n \t\t\t  machine_mode ARG_UNUSED (mode), int ignore)\n {\n   if (ignore)\n@@ -5161,7 +5173,7 @@ nvptx_expand_builtin (tree exp, rtx target, rtx ARG_UNUSED (subtarget),\n       return nvptx_expand_shuffle (exp, target, mode, ignore);\n \n     case NVPTX_BUILTIN_WORKER_ADDR:\n-      return nvptx_expand_worker_addr (exp, target, mode, ignore);\n+      return nvptx_expand_shared_addr (exp, target, mode, ignore);\n \n     case NVPTX_BUILTIN_CMP_SWAP:\n     case NVPTX_BUILTIN_CMP_SWAPLL:\n@@ -5330,7 +5342,7 @@ nvptx_goacc_fork_join (gcall *call, const int dims[],\n    data at that location.  */\n \n static tree\n-nvptx_get_worker_red_addr (tree type, tree offset)\n+nvptx_get_shared_red_addr (tree type, tree offset)\n {\n   machine_mode mode = TYPE_MODE (type);\n   tree fndecl = nvptx_builtin_decl (NVPTX_BUILTIN_WORKER_ADDR, true);\n@@ -5672,7 +5684,7 @@ nvptx_goacc_reduction_setup (gcall *call)\n     {\n       /* Store incoming value to worker reduction buffer.  */\n       tree offset = gimple_call_arg (call, 5);\n-      tree call = nvptx_get_worker_red_addr (TREE_TYPE (var), offset);\n+      tree call = nvptx_get_shared_red_addr (TREE_TYPE (var), offset);\n       tree ptr = make_ssa_name (TREE_TYPE (call));\n \n       gimplify_assign (ptr, call, &seq);\n@@ -5814,7 +5826,7 @@ nvptx_goacc_reduction_fini (gcall *call)\n \t{\n \t  /* Get reduction buffer address.  */\n \t  tree offset = gimple_call_arg (call, 5);\n-\t  tree call = nvptx_get_worker_red_addr (TREE_TYPE (var), offset);\n+\t  tree call = nvptx_get_shared_red_addr (TREE_TYPE (var), offset);\n \t  tree ptr = make_ssa_name (TREE_TYPE (call));\n \n \t  gimplify_assign (ptr, call, &seq);\n@@ -5858,7 +5870,7 @@ nvptx_goacc_reduction_teardown (gcall *call)\n     {\n       /* Read the worker reduction buffer.  */\n       tree offset = gimple_call_arg (call, 5);\n-      tree call = nvptx_get_worker_red_addr(TREE_TYPE (var), offset);\n+      tree call = nvptx_get_shared_red_addr(TREE_TYPE (var), offset);\n       tree ptr = make_ssa_name (TREE_TYPE (call));\n \n       gimplify_assign (ptr, call, &seq);"}]}