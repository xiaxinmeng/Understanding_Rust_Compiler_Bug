{"sha": "9fb9da3d38513d320bfea72050f7a59688595e0b", "node_id": "C_kwDOANBUbNoAKDlmYjlkYTNkMzg1MTNkMzIwYmZlYTcyMDUwZjdhNTk2ODg1OTVlMGI", "commit": {"author": {"name": "Steve Kargl", "email": "kargl@gcc.gnu.org", "date": "2023-01-25T19:38:43Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2023-01-25T19:44:40Z"}, "message": "Fortran: ICE in gfc_compare_array_spec [PR108528]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/108528\n\t* array.cc (compare_bounds): Return false instead of generating an\n\tinternal error on an invalid argument type.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/108528\n\t* gfortran.dg/pr108528.f90: New test.", "tree": {"sha": "1a02abd4bbc401cac0bc2340e5d7ccbe4471d83e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a02abd4bbc401cac0bc2340e5d7ccbe4471d83e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fb9da3d38513d320bfea72050f7a59688595e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb9da3d38513d320bfea72050f7a59688595e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb9da3d38513d320bfea72050f7a59688595e0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb9da3d38513d320bfea72050f7a59688595e0b/comments", "author": null, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80cf2c5e8f496bed9c6facf55f9ae31d0d90fd28"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "be5eb8b6a0f63324628676de082e933128ab727b", "filename": "gcc/fortran/array.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb9da3d38513d320bfea72050f7a59688595e0b/gcc%2Ffortran%2Farray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb9da3d38513d320bfea72050f7a59688595e0b/gcc%2Ffortran%2Farray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.cc?ref=9fb9da3d38513d320bfea72050f7a59688595e0b", "patch": "@@ -967,7 +967,7 @@ gfc_copy_array_spec (gfc_array_spec *src)\n \n \n /* Returns nonzero if the two expressions are equal.\n-   We should not need to support more than constant values, as that\u2019s what is\n+   We should not need to support more than constant values, as that's what is\n    allowed in derived type component array spec.  However, we may create types\n    with non-constant array spec for dummy variable class container types, for\n    which the _data component holds the array spec of the variable declaration.\n@@ -979,7 +979,7 @@ compare_bounds (gfc_expr *bound1, gfc_expr *bound2)\n   if (bound1 == NULL || bound2 == NULL\n       || bound1->ts.type != BT_INTEGER\n       || bound2->ts.type != BT_INTEGER)\n-    gfc_internal_error (\"gfc_compare_array_spec(): Array spec clobbered\");\n+    return false;\n \n   /* What qualifies as identical bounds?  We could probably just check that the\n      expressions are exact clones.  We avoid rewriting a specific comparison"}, {"sha": "7a353cb7eab15745767c57a933ece4fdcd84daa9", "filename": "gcc/testsuite/gfortran.dg/pr108528.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fb9da3d38513d320bfea72050f7a59688595e0b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr108528.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fb9da3d38513d320bfea72050f7a59688595e0b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr108528.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr108528.f90?ref=9fb9da3d38513d320bfea72050f7a59688595e0b", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! PR fortran/108528 -\n+! Contributed by G.Steinmetz\n+\n+function f()         ! { dg-error \"mismatched array specifications\" }\n+  integer :: f((2.)) ! { dg-error \"must be of INTEGER type\" }\n+  integer :: g((2))\n+entry g()\n+end"}]}