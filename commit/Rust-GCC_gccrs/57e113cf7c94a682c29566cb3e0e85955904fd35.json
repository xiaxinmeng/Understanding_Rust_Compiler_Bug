{"sha": "57e113cf7c94a682c29566cb3e0e85955904fd35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlMTEzY2Y3Yzk0YTY4MmMyOTU2NmNiM2UwZTg1OTU1OTA0ZmQzNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-10T15:39:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-10T15:39:00Z"}, "message": "arm: Fix up arm_override_options_after_change [PR96939]\n\nAs mentioned in the PR, the testcase fails to link, because when set_cfun is\nbeing called on the crc function, arm_override_options_after_change is\ncalled from set_cfun -> invoke_set_current_function_hook:\n      /* Change optimization options if needed.  */\n      if (optimization_current_node != opts)\n        {\n          optimization_current_node = opts;\n          cl_optimization_restore (&global_options, TREE_OPTIMIZATION (opts));\n        }\nand at that point target_option_default_node actually matches even the\ncurrent state of options, so this means armv7 (or whatever) arch is set as\narm_active_target, then\n      targetm.set_current_function (fndecl);\nis called later in that function, which because the crc function's\nDECL_FUNCTION_SPECIFIC_TARGET is different from the current one will do:\n  cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\nwhich calls arm_option_restore and sets arm_active_target to armv8-a+crc\n(so far so good).\nLater arm_set_current_function calls:\n  save_restore_target_globals (new_tree);\nwhich in this case calls:\n      /* Call target_reinit and save the state for TARGET_GLOBALS.  */\n      TREE_TARGET_GLOBALS (new_tree) = save_target_globals_default_opts ();\nwhich because optimization_current_node != optimization_default_node\n(the testcase is LTO, so all functions have their\nDECL_FUNCTION_SPECIFIC_TARGET and TREE_OPTIMIZATION nodes) will call:\n      cl_optimization_restore\n        (&global_options,\n         TREE_OPTIMIZATION (optimization_default_node));\nand\n      cl_optimization_restore (&global_options,\n                               TREE_OPTIMIZATION (opts));\nThe problem is that these call arm_override_options_after_change again,\nand that one uses the target_option_default_node as what to set the\narm_active_target to (i.e. back to armv7 or whatever, but not to the\narmv8-a+crc that should be the active target for the crc function).\nThat means we then error on the builtin call in that function.\n\nNow, the targetm.override_options_after_change hook is called always at the\nend of cl_optimization_restore, i.e. when we change the Optimization marked\ngeneric options.  So it seems unnecessary to call arm_configure_build_target\nat that point (nothing it depends on changed), and additionally incorrect\n(because it uses the target_option_default_node, rather than the current\nset of options; we'd need to revert\nhttps://gcc.gnu.org/legacy-ml/gcc-patches/2016-12/msg01390.html\notherwise so that it works again with global_options otherwise).\nThe options that arm_configure_build_target cares about will change only\nduring option parsing (which is where it is called already), or during\narm_set_current_function, where it is done during the\ncl_target_option_restore.\nNow, arm_override_options_after_change_1 wants to adjust the\nstr_align_functions, which depends on the current Optimization options (e.g.\noptimize_size and flag_align_options and str_align_functions) as well as\nthe target options target_flags, so IMHO needs to be called both\nwhen the Optimization options (possibly) change, i.e. from\nthe targetm.override_options_after_change hook, and from when the target\noptions change (set_current_function hook).\n\n2020-09-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/96939\n\t* config/arm/arm.c (arm_override_options_after_change): Don't call\n\tarm_configure_build_target here.\n\t(arm_set_current_function): Call arm_override_options_after_change_1\n\tat the end.\n\n\t* gcc.target/arm/lto/pr96939_0.c: New test.\n\t* gcc.target/arm/lto/pr96939_1.c: New file.", "tree": {"sha": "35b84d74abf4f6410735df250c6e17e821b06ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35b84d74abf4f6410735df250c6e17e821b06ad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57e113cf7c94a682c29566cb3e0e85955904fd35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e113cf7c94a682c29566cb3e0e85955904fd35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e113cf7c94a682c29566cb3e0e85955904fd35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e113cf7c94a682c29566cb3e0e85955904fd35/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0894ae0e7b269d15932e7ddba1d56bb4f48931e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0894ae0e7b269d15932e7ddba1d56bb4f48931e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0894ae0e7b269d15932e7ddba1d56bb4f48931e"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "37fc15c837f40ba2a3636d91c32eb555895ee131", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e113cf7c94a682c29566cb3e0e85955904fd35/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e113cf7c94a682c29566cb3e0e85955904fd35/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=57e113cf7c94a682c29566cb3e0e85955904fd35", "patch": "@@ -3037,10 +3037,6 @@ arm_override_options_after_change_1 (struct gcc_options *opts)\n static void\n arm_override_options_after_change (void)\n {\n-  arm_configure_build_target (&arm_active_target,\n-\t\t\t      TREE_TARGET_OPTION (target_option_default_node),\n-\t\t\t      &global_options_set, false);\n-\n   arm_override_options_after_change_1 (&global_options);\n }\n \n@@ -32338,6 +32334,8 @@ arm_set_current_function (tree fndecl)\n   cl_target_option_restore (&global_options, TREE_TARGET_OPTION (new_tree));\n \n   save_restore_target_globals (new_tree);\n+\n+  arm_override_options_after_change_1 (&global_options);\n }\n \n /* Implement TARGET_OPTION_PRINT.  */"}, {"sha": "241ffd5da0a7ac10bd8f88af0f50f29615198407", "filename": "gcc/testsuite/gcc.target/arm/lto/pr96939_0.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e113cf7c94a682c29566cb3e0e85955904fd35/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr96939_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e113cf7c94a682c29566cb3e0e85955904fd35/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr96939_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr96939_0.c?ref=57e113cf7c94a682c29566cb3e0e85955904fd35", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/96939 */\n+/* { dg-lto-do link } */\n+/* { dg-require-effective-target arm_arch_v8a_ok } */\n+/* { dg-lto-options { { -flto -O2 } } } */\n+\n+extern unsigned crc (unsigned, const void *);\n+typedef unsigned (*fnptr) (unsigned, const void *);\n+volatile fnptr fn;\n+\n+int\n+main ()\n+{\n+  fn = crc;\n+  return 0;\n+}"}, {"sha": "53c6093e803d2971427b10be5da5d96bbc27be8e", "filename": "gcc/testsuite/gcc.target/arm/lto/pr96939_1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57e113cf7c94a682c29566cb3e0e85955904fd35/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr96939_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57e113cf7c94a682c29566cb3e0e85955904fd35/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr96939_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flto%2Fpr96939_1.c?ref=57e113cf7c94a682c29566cb3e0e85955904fd35", "patch": "@@ -0,0 +1,10 @@\n+/* PR target/96939 */\n+/* { dg-options \"-march=armv8-a+crc\" } */\n+\n+#include <arm_acle.h>\n+\n+unsigned\n+crc (unsigned x, const void *y)\n+{\n+  return __crc32cw (x, *(unsigned *) y);\n+}"}]}