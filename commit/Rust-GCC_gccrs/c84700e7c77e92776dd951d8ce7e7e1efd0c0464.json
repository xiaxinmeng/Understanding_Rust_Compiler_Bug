{"sha": "c84700e7c77e92776dd951d8ce7e7e1efd0c0464", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0NzAwZTdjNzdlOTI3NzZkZDk1MWQ4Y2U3ZTdlMWVmZDBjMDQ2NA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonber@gnat.com", "date": "2001-10-10T22:46:39Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-10T22:46:39Z"}, "message": "einfo.adb (Write_Field19_Name): Body_Entity is also defined for a generic package.\n\n\t* einfo.adb (Write_Field19_Name): Body_Entity is also defined for\n\ta generic package.\n\n\t* einfo.ads: Body_Entity is also defined for generic package.\n\tDocumentation change only\n\n\t* exp_aggr.adb (Build_Array_Aggr_Code): When expanding an\n\tothers_choice for a discriminated component initialization,\n\tconvert discriminant references into the corresponding discriminals.\n\n\t* exp_ch3.adb (Get_Simple_Init_Val): Add qualification to aggregate\n\tonly if original type is private and expression has to be wrapped\n\tin a conversion.\n\n\t* checks.adb:\n\t(Apply_Constraint_Check): Do not perform length check\n\tif expression is an aggregate with only an others_choice.\n\t(Length_N_Cond): two references to the same in_parameter\n\t(typically the discriminal in an init_proc) denote the same value.\n\tTwo useful optimization uncovered by bugfixes above.\n\nFrom-SVN: r46165", "tree": {"sha": "3da698f23b9d27cbcac4d67493ad5d4b6dcab477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3da698f23b9d27cbcac4d67493ad5d4b6dcab477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c84700e7c77e92776dd951d8ce7e7e1efd0c0464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84700e7c77e92776dd951d8ce7e7e1efd0c0464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c84700e7c77e92776dd951d8ce7e7e1efd0c0464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/comments", "author": null, "committer": null, "parents": [{"sha": "d8d80dcd6ca6561c46d2724d0724f6ce5a74d6b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d80dcd6ca6561c46d2724d0724f6ce5a74d6b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d80dcd6ca6561c46d2724d0724f6ce5a74d6b6"}], "stats": {"total": 110, "additions": 85, "deletions": 25}, "files": [{"sha": "ce9ca1862f573820632b11e7526034336bcac3e6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c84700e7c77e92776dd951d8ce7e7e1efd0c0464", "patch": "@@ -1,3 +1,26 @@\n+2001-10-10  Ed Schonberg <schonber@gnat.com>\n+\n+\t* einfo.adb (Write_Field19_Name): Body_Entity is also defined for \n+\ta generic package.\n+\n+\t* einfo.ads: Body_Entity is also defined for generic package.\n+\tDocumentation change only\n+\t\n+\t* exp_aggr.adb (Build_Array_Aggr_Code): When expanding an \n+\tothers_choice for a discriminated component initialization, \n+\tconvert discriminant references into the corresponding discriminals. \n+\t\n+\t* exp_ch3.adb (Get_Simple_Init_Val): Add qualification to aggregate \n+\tonly if original type is private and expression has to be wrapped \n+\tin a conversion.\n+\t\n+\t* checks.adb: \n+\t(Apply_Constraint_Check): Do not perform length check \n+\tif expression is an aggregate with only an others_choice.\n+\t(Length_N_Cond): two references to the same in_parameter \n+\t(typically the discriminal in an init_proc) denote the same value.\n+\tTwo useful optimization uncovered by bugfixes above.\n+\n 2001-10-10  Robert Dewar <dewar@gnat.com>\n \n \t* xeinfo.adb: Change int to char in translation of enumeration types. "}, {"sha": "27ccc084493fbc8028032c9a758181c7c2b9648f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=c84700e7c77e92776dd951d8ce7e7e1efd0c0464", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.205 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -692,6 +692,18 @@ package body Checks is\n \n       elsif Is_Array_Type (Typ) then\n \n+         --  A useful optimization: an aggregate with only an Others clause\n+         --  always has the right bounds.\n+\n+         if Nkind (N) = N_Aggregate\n+           and then No (Expressions (N))\n+           and then Nkind\n+            (First (Choices (First (Component_Associations (N)))))\n+              = N_Others_Choice\n+         then\n+            return;\n+         end if;\n+\n          if Is_Constrained (Typ) then\n             Apply_Length_Check (N, Typ);\n \n@@ -2805,8 +2817,9 @@ package body Checks is\n \n       function Same_Bounds (L : Node_Id; R : Node_Id) return Boolean;\n       --  True for equal literals and for nodes that denote the same constant\n-      --  entity, even if its value is not a static constant. This removes\n-      --  some obviously superfluous checks.\n+      --  entity, even if its value is not a static constant. This includes the\n+      --  case of a discriminal reference within an init_proc. Removes some\n+      --  obviously superfluous checks.\n \n       function Length_E_Cond\n         (Exptyp : Entity_Id;\n@@ -3038,7 +3051,14 @@ package body Checks is\n               and then Ekind (Entity (R)) = E_Constant\n               and then Nkind (L) = N_Type_Conversion\n               and then Is_Entity_Name (Expression (L))\n-              and then Entity (R) = Entity (Expression (L)));\n+              and then Entity (R) = Entity (Expression (L)))\n+\n+         or else\n+            (Is_Entity_Name (L)\n+              and then Is_Entity_Name (R)\n+              and then Entity (L) = Entity (R)\n+              and then Ekind (Entity (L)) = E_In_Parameter\n+              and then Inside_Init_Proc);\n       end Same_Bounds;\n \n    --  Start of processing for Selected_Length_Checks"}, {"sha": "6f7e0a3d3f6ca5f8e3202f9532d7bb27f64586be", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=c84700e7c77e92776dd951d8ce7e7e1efd0c0464", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.630 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -6569,7 +6569,8 @@ package body Einfo is\n          when E_Discriminant                             =>\n             Write_Str (\"Corresponding_Discriminant\");\n \n-         when E_Package                                  =>\n+         when E_Package                                  |\n+              E_Generic_Package                          =>\n             Write_Str (\"Body_Entity\");\n \n          when E_Package_Body                             |"}, {"sha": "b521971a19ba797b8839edad29c65c9e0ad2a225", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c84700e7c77e92776dd951d8ce7e7e1efd0c0464", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                            $Revision: 1.640 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -397,8 +397,8 @@ package Einfo is\n --       Present in block entities. Points to the Block_Statement itself.\n \n --    Body_Entity (Node19)\n---       Present in package entities, points to the corresponding package\n---       body entity if one is present.\n+--       Present in package and generic package entities, points to the\n+--       corresponding package body entity if one is present.\n \n --    C_Pass_By_Copy (Flag125) [implementation base type only]\n --       Present in record types. Set if a pragma Convention for the record"}, {"sha": "e32fe91642efca68479359e9815829646037e97c", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=c84700e7c77e92776dd951d8ce7e7e1efd0c0464", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.170 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -1136,6 +1136,24 @@ package body Exp_Aggr is\n                      High := Add (-1, To => Table (J + 1).Choice_Lo);\n                   end if;\n \n+                  --  If this is an expansion within an init_proc, make\n+                  --  sure that discriminant references are replaced by\n+                  --  the corresponding discriminal.\n+\n+                  if Inside_Init_Proc then\n+                     if Is_Entity_Name (Low)\n+                       and then Ekind (Entity (Low)) = E_Discriminant\n+                     then\n+                        Set_Entity (Low, Discriminal (Entity (Low)));\n+                     end if;\n+\n+                     if Is_Entity_Name (High)\n+                       and then Ekind (Entity (High)) = E_Discriminant\n+                     then\n+                        Set_Entity (High, Discriminal (Entity (High)));\n+                     end if;\n+                  end if;\n+\n                   if First\n                     or else not Empty_Range (Low, High)\n                   then"}, {"sha": "012e2543e50924afba971d4fc7d322f01daea41d", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84700e7c77e92776dd951d8ce7e7e1efd0c0464/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=c84700e7c77e92776dd951d8ce7e7e1efd0c0464", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                            $Revision: 1.481 $\n+--                            $Revision$\n --                                                                          --\n --          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n --                                                                          --\n@@ -4210,20 +4210,14 @@ package body Exp_Ch3 is\n       then\n          pragma Assert (Init_Or_Norm_Scalars);\n \n-         --  Build aggregate with an explicit qualification, because it\n-         --  may otherwise be ambiguous in context.\n-\n          return\n-           Make_Qualified_Expression (Loc,\n-             Subtype_Mark => New_Occurrence_Of (T, Loc),\n-             Expression =>\n-               Make_Aggregate (Loc,\n-                 Component_Associations => New_List (\n-                   Make_Component_Association (Loc,\n-                     Choices => New_List (\n-                       Make_Others_Choice (Loc)),\n-                     Expression =>\n-                       Get_Simple_Init_Val (Component_Type (T), Loc)))));\n+           Make_Aggregate (Loc,\n+             Component_Associations => New_List (\n+               Make_Component_Association (Loc,\n+                 Choices => New_List (\n+                   Make_Others_Choice (Loc)),\n+                 Expression =>\n+                   Get_Simple_Init_Val (Component_Type (T), Loc))));\n \n       --  Access type is initialized to null\n \n@@ -4267,8 +4261,12 @@ package body Exp_Ch3 is\n \n          --  A special case, if the underlying value is null, then qualify\n          --  it with the underlying type, so that the null is properly typed\n+         --  Similarly, if it is an aggregate it must be qualified, because\n+         --  an unchecked conversion does not provide a context for it.\n \n-         if Nkind (Val) = N_Null then\n+         if Nkind (Val) = N_Null\n+           or else Nkind (Val) = N_Aggregate\n+         then\n             Val :=\n               Make_Qualified_Expression (Loc,\n                 Subtype_Mark =>"}]}