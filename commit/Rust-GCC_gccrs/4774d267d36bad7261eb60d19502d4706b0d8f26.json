{"sha": "4774d267d36bad7261eb60d19502d4706b0d8f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3NGQyNjdkMzZiYWQ3MjYxZWI2MGQxOTUwMmQ0NzA2YjBkOGYyNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-11T04:29:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-11T04:29:04Z"}, "message": "re PR c++/50372 ([C++0x] pointers to static functions should be valid template parameters)\n\n\tPR c++/50372\n\t* pt.c (convert_nontype_argument_function): Allow decls with\n\tinternal linkage in C++11.\n\t(convert_nontype_argument): Likewise.\n\nFrom-SVN: r181280", "tree": {"sha": "e60aadb9585cca2e203bbb68325d42160fb8bb4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e60aadb9585cca2e203bbb68325d42160fb8bb4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4774d267d36bad7261eb60d19502d4706b0d8f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4774d267d36bad7261eb60d19502d4706b0d8f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4774d267d36bad7261eb60d19502d4706b0d8f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4774d267d36bad7261eb60d19502d4706b0d8f26/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e3929ed1b1b079f87d3bdc9342b9f05fa9cfd06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e3929ed1b1b079f87d3bdc9342b9f05fa9cfd06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e3929ed1b1b079f87d3bdc9342b9f05fa9cfd06"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "95680307615759547b6e0498f23c5d202eab7ec7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4774d267d36bad7261eb60d19502d4706b0d8f26", "patch": "@@ -1,5 +1,10 @@\n 2011-11-10  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/50372\n+\t* pt.c (convert_nontype_argument_function): Allow decls with\n+\tinternal linkage in C++11.\n+\t(convert_nontype_argument): Likewise.\n+\n \tPR c++/50973\n \t* decl2.c (mark_used): Defer synthesis of virtual functions.\n \t* method.c (use_thunk): Make sure the target function has"}, {"sha": "97380260ae46f5573e8990160f7ee14f4126f323", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4774d267d36bad7261eb60d19502d4706b0d8f26", "patch": "@@ -5324,6 +5324,7 @@ convert_nontype_argument_function (tree type, tree expr)\n {\n   tree fns = expr;\n   tree fn, fn_no_ptr;\n+  linkage_kind linkage;\n \n   fn = instantiate_type (type, fns, tf_none);\n   if (fn == error_mark_node)\n@@ -5340,12 +5341,19 @@ convert_nontype_argument_function (tree type, tree expr)\n      A template-argument for a non-type, non-template template-parameter\n      shall be one of:\n      [...]\n-     -- the address of an object or function with external linkage.  */\n-  if (!DECL_EXTERNAL_LINKAGE_P (fn_no_ptr))\n+     -- the address of an object or function with external [C++11: or\n+        internal] linkage.  */\n+  linkage = decl_linkage (fn_no_ptr);\n+  if (cxx_dialect >= cxx0x ? linkage == lk_none : linkage != lk_external)\n     {\n-      error (\"%qE is not a valid template argument for type %qT \"\n-\t     \"because function %qD has not external linkage\",\n-\t     expr, type, fn_no_ptr);\n+      if (cxx_dialect >= cxx0x)\n+\terror (\"%qE is not a valid template argument for type %qT \"\n+\t       \"because %qD has no linkage\",\n+\t       expr, type, fn_no_ptr);\n+      else\n+\terror (\"%qE is not a valid template argument for type %qT \"\n+\t       \"because %qD does not have external linkage\",\n+\t       expr, type, fn_no_ptr);\n       return NULL_TREE;\n     }\n \n@@ -5838,13 +5846,20 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t\t     expr, type, decl);\n \t      return NULL_TREE;\n \t    }\n-\t  else if (!DECL_EXTERNAL_LINKAGE_P (decl))\n+\t  else if (cxx_dialect < cxx0x && !DECL_EXTERNAL_LINKAGE_P (decl))\n \t    {\n \t      error (\"%qE is not a valid template argument of type %qT \"\n \t\t     \"because %qD does not have external linkage\",\n \t\t     expr, type, decl);\n \t      return NULL_TREE;\n \t    }\n+\t  else if (cxx_dialect >= cxx0x && decl_linkage (decl) == lk_none)\n+\t    {\n+\t      error (\"%qE is not a valid template argument of type %qT \"\n+\t\t     \"because %qD has no linkage\",\n+\t\t     expr, type, decl);\n+\t      return NULL_TREE;\n+\t    }\n \t}\n \n       expr = decay_conversion (expr);"}, {"sha": "0c9d088f8a5715e982f8bacf801c8b43ae4ccf20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4774d267d36bad7261eb60d19502d4706b0d8f26", "patch": "@@ -1,5 +1,9 @@\n 2011-11-10  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/template/linkage1.C: New.\n+\t* g++.dg/ext/visibility/anon8.C: Adjust for C++11.\n+\t* g++.old-deja/g++.other/linkage4.C: Likewise.\n+\n \tPR c++/50973\n \t* g++.dg/cpp0x/defaulted33.C: New.\n "}, {"sha": "5e58b5519940d5eb027378facd358c8a53f58cb0", "filename": "gcc/testsuite/g++.dg/ext/visibility/anon8.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon8.C?ref=4774d267d36bad7261eb60d19502d4706b0d8f26", "patch": "@@ -26,10 +26,8 @@ int main ()\n     static void fn2 () {}\n   };\n   call<&B1::fn1> ();\n-  call<&B2::fn2> ();\t// { dg-error \"not external linkage|no matching\" }\n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 29 }\n+  call<&B2::fn2> ();\t// { dg-error \"linkage|no matching\" }\n   call<&fn3> ();\n   call<&B1::fn4> ();\n-  call<&fn5> ();\t// { dg-error \"not external linkage|no matching\" }\n-  // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 33 }\n+  call<&fn5> ();\t// { dg-error \"linkage|no matching\" \"\" { target c++98 } }\n }"}, {"sha": "963d269028d6cc9d089bb930ab3f788fee8c5588", "filename": "gcc/testsuite/g++.dg/parse/template21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate21.C?ref=4774d267d36bad7261eb60d19502d4706b0d8f26", "patch": "@@ -2,4 +2,4 @@\n \n template <const int*> class Helper { };\n const int foo = 0;\n-typedef Helper<&foo> HelperType; // { dg-error \"linkage|type\" }\n+typedef Helper<&foo> HelperType; // { dg-error \"linkage|type\" \"\" { target c++98 } }"}, {"sha": "02aa96729636df49849d3f7a6bc94f4218fcedb9", "filename": "gcc/testsuite/g++.dg/template/linkage1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flinkage1.C?ref=4774d267d36bad7261eb60d19502d4706b0d8f26", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/50372\n+// Test that a template instantiation has the same linkage as its argument.\n+// { dg-final { scan-assembler \"(weak|glob)\\[^\\n\\]*_Z3fooIXadL_Z13external_funcvEEEvv\" } }\n+// { dg-final { scan-assembler-not \"(weak|glob)\\[^\\n\\]*_Z3fooIXadL_ZL11static_funcvEEEvv\" } }\n+\n+template<void (*fptr)(void)>\n+void foo() { }\n+\n+static void static_func() {}\n+void external_func() { }\n+\n+void test()\n+{\n+#if __cplusplus > 199711L\n+  foo<&static_func>();\n+#endif\n+  foo<&external_func>();\n+}"}, {"sha": "450733fab34eb5b7cdc7841e73f76c0866693e76", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4774d267d36bad7261eb60d19502d4706b0d8f26/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage4.C?ref=4774d267d36bad7261eb60d19502d4706b0d8f26", "patch": "@@ -8,4 +8,4 @@ void f () {}\n \n // Check that the strlen declaration here is given internal linkage by\n // using it as a non-type template argument, and expecting an error.\n-template void f<strlen>(); // { dg-error \"\" } no matching template\n+template void f<strlen>(); // { dg-error \"\" \"\" { target c++98 } } no matching template"}]}