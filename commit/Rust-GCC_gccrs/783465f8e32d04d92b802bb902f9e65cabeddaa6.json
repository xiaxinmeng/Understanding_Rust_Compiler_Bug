{"sha": "783465f8e32d04d92b802bb902f9e65cabeddaa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgzNDY1ZjhlMzJkMDRkOTJiODAyYmI5MDJmOWU2NWNhYmVkZGFhNg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2011-09-28T14:37:30Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2011-09-28T14:37:30Z"}, "message": "predicates.md (rx_minmax_operand): New predicate.\n\n\t* config/rx/predicates.md (rx_minmax_operand): New predicate.\n\tAccepts immediates and a restricted subset of MEMs.\n\t* config/rx/rx.md (int_modes): New iterator.\n\t(smaxsi3, sminsi3): Delete and replace with...\n\t(smax<int_mode>3, smin<int_mode>3): New patterns.\n\t(umax<>3_u, umax<>3_ur, umax<>3, umin<>3): New patterns.\n\nFrom-SVN: r179315", "tree": {"sha": "9916d9a539e45075c1ae0c85de0801dcd97d6724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9916d9a539e45075c1ae0c85de0801dcd97d6724"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/783465f8e32d04d92b802bb902f9e65cabeddaa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783465f8e32d04d92b802bb902f9e65cabeddaa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/783465f8e32d04d92b802bb902f9e65cabeddaa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/783465f8e32d04d92b802bb902f9e65cabeddaa6/comments", "author": null, "committer": null, "parents": [{"sha": "2996d8c3320a909bf339aa513fc76f6abf91e9b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2996d8c3320a909bf339aa513fc76f6abf91e9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2996d8c3320a909bf339aa513fc76f6abf91e9b7"}], "stats": {"total": 125, "additions": 114, "deletions": 11}, "files": [{"sha": "ad1d82bedf6ad1d7db499d1c2fd1327a6cf49a50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783465f8e32d04d92b802bb902f9e65cabeddaa6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783465f8e32d04d92b802bb902f9e65cabeddaa6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=783465f8e32d04d92b802bb902f9e65cabeddaa6", "patch": "@@ -1,3 +1,12 @@\n+2011-09-28  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rx/predicates.md (rx_minmax_operand): New predicate.\n+\tAccepts immediates and a restricted subset of MEMs.\n+\t* config/rx/rx.md (int_modes): New iterator.\n+\t(smaxsi3, sminsi3): Delete and replace with...\n+\t(smax<int_mode>3, smin<int_mode>3): New patterns.\n+\t(umax<>3_u, umax<>3_ur, umax<>3, umin<>3): New patterns.\n+\n 2011-09-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/50460\n@@ -29,7 +38,7 @@\n \n \t* output.h (SECTION_EXCLUDE): New macro.\n \t* varasm.c (default_elf_asm_named_section): Check for\n-\tSECTION_EXCLUDE.\t\n+\tSECTION_EXCLUDE.\n \n 2011-09-27  Richard Sandiford  <rdsandiford@googlemail.com>\n "}, {"sha": "aa0321e13b731eef553445cb0e5e5912b2491c68", "filename": "gcc/config/rx/predicates.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783465f8e32d04d92b802bb902f9e65cabeddaa6/gcc%2Fconfig%2Frx%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783465f8e32d04d92b802bb902f9e65cabeddaa6/gcc%2Fconfig%2Frx%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Fpredicates.md?ref=783465f8e32d04d92b802bb902f9e65cabeddaa6", "patch": "@@ -72,6 +72,16 @@\n        (match_operand 0 \"rx_restricted_mem_operand\"))\n )\n \n+;; Check that the operand is suitable as the source operand\n+;; for a min/max instruction.  This is the same as\n+;; rx_source_operand except that CONST_INTs are allowed but\n+;; REGs and SUBREGs are not.\n+\n+(define_predicate \"rx_minmaxex_operand\"\n+  (ior (match_operand 0 \"immediate_operand\")\n+       (match_operand 0 \"rx_restricted_mem_operand\"))\n+)\n+\n ;; Return true if OP is a store multiple operation.  This looks like:\n ;;\n ;;   [(set (SP) (MINUS (SP) (INT)))"}, {"sha": "f082ed2763cd7dca4b4821932e8587433603149a", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 94, "deletions": 10, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/783465f8e32d04d92b802bb902f9e65cabeddaa6/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/783465f8e32d04d92b802bb902f9e65cabeddaa6/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=783465f8e32d04d92b802bb902f9e65cabeddaa6", "patch": "@@ -22,6 +22,9 @@\n ;; This code iterator is used for sign- and zero- extensions.\n (define_mode_iterator small_int_modes [(HI \"\") (QI \"\")])\n \n+;; This code iterator is used for max and min operations.\n+(define_mode_iterator int_modes [(SI \"\") (HI \"\") (QI \"\")])\n+\n ;; We do not handle DFmode here because it is either\n ;; the same as SFmode, or if -m64bit-doubles is active\n ;; then all operations on doubles have to be handled by\n@@ -1160,28 +1163,109 @@\n    (set_attr \"timings\" \"22,44\")]\n )\n \n-(define_insn \"smaxsi3\"\n-  [(set (match_operand:SI          0 \"register_operand\" \"=r,r,r,r,r,r\")\n-\t(smax:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n-\t\t (match_operand:SI 2 \"rx_source_operand\"\n-\t\t\t\t   \"r,Sint08,Sint16,Sint24,i,Q\")))]\n+(define_insn \"smax<int_modes:mode>3\"\n+  [(set (match_operand:int_modes                 0 \"register_operand\" \"=r,r,r,r,r,r\")\n+\t(smax:int_modes (match_operand:int_modes 1 \"register_operand\" \"%0,0,0,0,0,0\")\n+\t\t\t(match_operand:int_modes 2 \"rx_source_operand\"\n+\t\t\t\t\t\t \"r,Sint08,Sint16,Sint24,i,Q\")))]\n   \"\"\n   \"max\\t%Q2, %0\"\n   [(set_attr \"length\" \"3,4,5,6,7,6\")\n    (set_attr \"timings\" \"11,11,11,11,11,33\")]\n )\n \n-(define_insn \"sminsi3\"\n-  [(set (match_operand:SI          0 \"register_operand\" \"=r,r,r,r,r,r\")\n-\t(smin:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n-\t\t (match_operand:SI 2 \"rx_source_operand\"\n-\t\t\t\t   \"r,Sint08,Sint16,Sint24,i,Q\")))]\n+(define_insn \"smin<int_modes:mode>3\"\n+  [(set (match_operand:int_modes                 0 \"register_operand\" \"=r,r,r,r,r,r\")\n+\t(smin:int_modes (match_operand:int_modes 1 \"register_operand\" \"%0,0,0,0,0,0\")\n+\t\t (match_operand:int_modes        2 \"rx_source_operand\"\n+\t\t\t\t\t\t \"r,Sint08,Sint16,Sint24,i,Q\")))]\n   \"\"\n   \"min\\t%Q2, %0\"\n   [(set_attr \"length\"  \"3,4,5,6,7,6\")\n    (set_attr \"timings\" \"11,11,11,11,11,33\")]\n )\n \n+(define_insn \"umax<small_int_modes:mode>3_u\"\n+  [(set (match_operand:SI          0 \"register_operand\" \"=r,r,r,r,r,r\")\n+\t(smax:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0\")\n+\t\t (zero_extend:SI (match_operand:small_int_modes 2 \"rx_minmaxex_operand\"\n+\t\t\t\t\t\t\t\t\"r,Sint08,Sint16,Sint24,i,Q\"))))]\n+  \"\"\n+  \"max\\t%R2, %0\"\n+  [(set_attr \"length\"  \"3,4,5,6,7,6\")\n+   (set_attr \"timings\" \"11,11,11,11,11,33\")]\n+)\n+\n+(define_insn \"umin<small_int_modes:mode>3_ur\"\n+  [(set (match_operand:SI          0 \"register_operand\" \"=r,r,r,r,r,r\")\n+\t(smin:SI (zero_extend:SI (match_operand:small_int_modes 2 \"rx_minmaxex_operand\"\n+\t\t\t\t\t\t\t\t\"r,Sint08,Sint16,Sint24,i,Q\"))\n+\t\t (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0\")))]\n+  \"\"\n+  \"min\\t%R2, %0\"\n+  [(set_attr \"length\"  \"3,4,5,6,7,6\")\n+   (set_attr \"timings\" \"11,11,11,11,11,33\")]\n+)\n+\n+(define_insn \"umax<small_int_modes:mode>3_ur\"\n+  [(set (match_operand:SI          0 \"register_operand\" \"=r,r,r,r,r,r\")\n+\t(smax:SI (zero_extend:SI (match_operand:small_int_modes 2 \"rx_minmaxex_operand\"\n+\t\t\t\t\t\t\t\t\"r,Sint08,Sint16,Sint24,i,Q\"))\n+\t\t (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0\")))]\n+  \"\"\n+  \"max\\t%R2, %0\"\n+  [(set_attr \"length\"  \"3,4,5,6,7,6\")\n+   (set_attr \"timings\" \"11,11,11,11,11,33\")]\n+)\n+\n+(define_expand \"umax<small_int_modes:mode>3\"\n+  [(set (match_dup 4)\n+\t(zero_extend:SI (match_operand:small_int_modes 1 \"register_operand\" \"%0,0,0,0,0,0\")))\n+   (set (match_dup 3)\n+\t(smax:SI (match_dup 4)\n+\t\t (match_operand:small_int_modes 2 \"rx_source_operand\"\n+\t\t\t\t\t\t\"r,Sint08,Sint16,Sint24,i,Q\")))\n+   (set (match_operand:small_int_modes          0 \"register_operand\" \"=r,r,r,r,r,r\")\n+\t(match_dup 6))\n+   ]\n+  \"\"\n+  \"operands[3] = gen_reg_rtx (SImode);\n+   operands[4] = gen_reg_rtx (SImode);\n+   operands[5] = gen_reg_rtx (SImode);\n+   operands[6] = gen_rtx_SUBREG (GET_MODE (operands[0]), operands[3],\n+     TARGET_BIG_ENDIAN_DATA ? (GET_MODE (operands[0]) == HImode ? 2 : 3) : 0);\n+   if (GET_CODE (operands[2]) != CONST_INT)\n+     {\n+       emit_move_insn (operands[5], gen_rtx_ZERO_EXTEND (SImode, operands[2]));\n+       operands[2] = operands[5];\n+     }\n+  \"\n+)\n+\n+(define_expand \"umin<small_int_modes:mode>3\"\n+  [(set (match_dup 4)\n+\t(zero_extend:SI (match_operand:small_int_modes 1 \"register_operand\" \"%0,0,0,0,0,0\")))\n+   (set (match_dup 3)\n+\t(smin:SI (match_dup 4)\n+\t\t (match_operand:small_int_modes 2 \"rx_source_operand\"\n+\t\t\t\t\t\t\"r,Sint08,Sint16,Sint24,i,Q\")))\n+   (set (match_operand:small_int_modes          0 \"register_operand\" \"=r,r,r,r,r,r\")\n+\t(match_dup 6))\n+   ]\n+  \"\"\n+  \"operands[3] = gen_reg_rtx (SImode);\n+   operands[4] = gen_reg_rtx (SImode);\n+   operands[5] = gen_reg_rtx (SImode);\n+   operands[6] = gen_rtx_SUBREG (GET_MODE (operands[0]), operands[3],\n+     TARGET_BIG_ENDIAN_DATA ? (GET_MODE (operands[0]) == HImode ? 2 : 3) : 0);\n+   if (GET_CODE (operands[2]) != CONST_INT)\n+     {\n+       emit_move_insn (operands[5], gen_rtx_ZERO_EXTEND (SImode, operands[2]));\n+       operands[2] = operands[5];\n+     }\n+   \"\n+)\n+\n (define_insn \"mulsi3\"\n   [(set (match_operand:SI          0 \"register_operand\" \"=r,r,r,r,r,r,r,r,r\")\n         (mult:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,0,r,r\")"}]}