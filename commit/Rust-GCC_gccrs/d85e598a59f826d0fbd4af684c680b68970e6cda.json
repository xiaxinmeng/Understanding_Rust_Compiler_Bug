{"sha": "d85e598a59f826d0fbd4af684c680b68970e6cda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg1ZTU5OGE1OWY4MjZkMGZiZDRhZjY4NGM2ODBiNjg5NzBlNmNkYQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-11-21T20:35:21Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-11-21T20:35:21Z"}, "message": "rs6000.md (movdi_internal32): Change constraints so that DImode can be allocated to FP/vector registers in...\n\n[gcc]\n2016-11-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.md (movdi_internal32): Change constraints\n\tso that DImode can be allocated to FP/vector registers in more\n\tcases, and we can avoid direct move operations.  If the register\n\tneeds reloading, prefer GPRs over FP/vector registers.  In the\n\tcase of FPR vs. Altivec registers, prefer FPR registers unless we\n\thave the ISA 3.0 reg+offset scalar instructions.\n\t(movdi_internal64): Likewise.\n\n[gcc/testsuite]\n2016-11-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/ppc-round2.c: Allow XSCVDPSXWS and XSCVDPUXWS\n\tto be generated instead of FCTIWUZ or FCTIWZ.\n\nFrom-SVN: r242679", "tree": {"sha": "66b37a5fdb0f33b31a0b7685fee5fb8fbc0a964d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66b37a5fdb0f33b31a0b7685fee5fb8fbc0a964d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d85e598a59f826d0fbd4af684c680b68970e6cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d85e598a59f826d0fbd4af684c680b68970e6cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d85e598a59f826d0fbd4af684c680b68970e6cda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d85e598a59f826d0fbd4af684c680b68970e6cda/comments", "author": null, "committer": null, "parents": [{"sha": "699e8cb7b4d067cabff5a92bdbbb2d0d0dddc262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/699e8cb7b4d067cabff5a92bdbbb2d0d0dddc262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/699e8cb7b4d067cabff5a92bdbbb2d0d0dddc262"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "842e8ff5f2c4df5b6afd87cf0c514b09c598ac32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85e598a59f826d0fbd4af684c680b68970e6cda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85e598a59f826d0fbd4af684c680b68970e6cda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d85e598a59f826d0fbd4af684c680b68970e6cda", "patch": "@@ -1,3 +1,13 @@\n+2016-11-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (movdi_internal32): Change constraints\n+\tso that DImode can be allocated to FP/vector registers in more\n+\tcases, and we can avoid direct move operations.  If the register\n+\tneeds reloading, prefer GPRs over FP/vector registers.  In the\n+\tcase of FPR vs. Altivec registers, prefer FPR registers unless we\n+\thave the ISA 3.0 reg+offset scalar instructions.\n+\t(movdi_internal64): Likewise.\n+\n 2016-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/67335"}, {"sha": "c932dac75a46d02e25ef4814cdb0cfad32484e9d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85e598a59f826d0fbd4af684c680b68970e6cda/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85e598a59f826d0fbd4af684c680b68970e6cda/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d85e598a59f826d0fbd4af684c680b68970e6cda", "patch": "@@ -8118,10 +8118,10 @@\n \n (define_insn \"*movdi_internal32\"\n   [(set (match_operand:DI 0 \"rs6000_nonimmediate_operand\"\n-         \"=Y,        r,         r,         ?m,        ?*d,        ?*d,\n-          r,         ?wY,       ?Z,        ?*wb,      ?*wv,       ?wi,\n-          ?wo,       ?wo,       ?wv,       ?wi,       ?wi,        ?wv,\n-          ?wv\")\n+         \"=Y,        r,         r,         ^m,        ^d,         ^d,\n+          r,         ^wY,       $Z,        ^wb,       $wv,        ^wi,\n+          *wo,       *wo,       *wv,       *wi,       *wi,        *wv,\n+          *wv\")\n \n \t(match_operand:DI 1 \"input_operand\"\n           \"r,        Y,         r,         d,         m,          d,\n@@ -8195,9 +8195,9 @@\n (define_insn \"*movdi_internal64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n                \"=Y,        r,         r,         r,         r,          r,\n-                ?m,        ?*d,       ?*d,       ?wY,       ?Z,         ?*wb,\n-                ?*wv,      ?wi,       ?wo,       ?wo,       ?wv,        ?wi,\n-                ?wi,       ?wv,       ?wv,       r,         *h,         *h,\n+                ^m,        ^d,        ^d,        ^Y,        $Z,         $wb,\n+                $wv,       ^wi,       *wo,       *wo,       *wv,        *wi,\n+                *wi,       *wv,       *wv,       r,         *h,         *h,\n                 ?*r,       ?*wg,      ?*r,       ?*wj\")\n \n \t(match_operand:DI 1 \"input_operand\""}, {"sha": "cef6a27712944d5cc199f8a77d8a3a6f5575c9d3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85e598a59f826d0fbd4af684c680b68970e6cda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85e598a59f826d0fbd4af684c680b68970e6cda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d85e598a59f826d0fbd4af684c680b68970e6cda", "patch": "@@ -1,3 +1,8 @@\n+2016-11-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/ppc-round2.c: Allow XSCVDPSXWS and XSCVDPUXWS\n+\tto be generated instead of FCTIWUZ or FCTIWZ.\n+\n 2016-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/67335"}, {"sha": "1890fca10be085b36111aa2b495a9ab9b6b4e73e", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-round2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d85e598a59f826d0fbd4af684c680b68970e6cda/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-round2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d85e598a59f826d0fbd4af684c680b68970e6cda/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-round2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-round2.c?ref=d85e598a59f826d0fbd4af684c680b68970e6cda", "patch": "@@ -5,8 +5,8 @@\n /* { dg-options \"-O2 -mcpu=power8\" } */\n /* { dg-final { scan-assembler-times \"fcfid \"      2 } } */\n /* { dg-final { scan-assembler-times \"fcfids \"     2 } } */\n-/* { dg-final { scan-assembler-times \"fctiwuz \"    2 } } */\n-/* { dg-final { scan-assembler-times \"fctiwz \"     2 } } */\n+/* { dg-final { scan-assembler-times \"fctiwuz \\|xscvdpuxws \" 2 } } */\n+/* { dg-final { scan-assembler-times \"fctiwz \\|xscvdpsxws \"  2 } } */\n /* { dg-final { scan-assembler-times \"mfvsrd \"     4 } } */\n /* { dg-final { scan-assembler-times \"mtvsrwa \"    2 } } */\n /* { dg-final { scan-assembler-times \"mtvsrwz \"    2 } } */"}]}