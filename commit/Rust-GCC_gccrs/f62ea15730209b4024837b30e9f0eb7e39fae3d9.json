{"sha": "f62ea15730209b4024837b30e9f0eb7e39fae3d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYyZWExNTczMDIwOWI0MDI0ODM3YjMwZTlmMGViN2UzOWZhZTNkOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-04-06T15:59:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-04-06T15:59:14Z"}, "message": "re PR c++/6179 (EH regression test failure for STLport-4.5.3)\n\n        PR c++/6179\n        * method.c (implicitly_declare_fn): Pass unqualified type to\n        synthesize_exception_spec.\n\nFrom-SVN: r51954", "tree": {"sha": "435bbbe81ab3ca81ec3ffb6b655d016f38641b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/435bbbe81ab3ca81ec3ffb6b655d016f38641b5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f62ea15730209b4024837b30e9f0eb7e39fae3d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62ea15730209b4024837b30e9f0eb7e39fae3d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f62ea15730209b4024837b30e9f0eb7e39fae3d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f62ea15730209b4024837b30e9f0eb7e39fae3d9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e9603b0c204c9ea0099bc379be3de18da9f9488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e9603b0c204c9ea0099bc379be3de18da9f9488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e9603b0c204c9ea0099bc379be3de18da9f9488"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "6f2a6abff11616241332879fa856774b4f9c2bd0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62ea15730209b4024837b30e9f0eb7e39fae3d9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62ea15730209b4024837b30e9f0eb7e39fae3d9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f62ea15730209b4024837b30e9f0eb7e39fae3d9", "patch": "@@ -1,3 +1,9 @@\n+2002-04-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/6179\n+\t* method.c (implicitly_declare_fn): Pass unqualified type to \n+\tsynthesize_exception_spec.\n+\n 2002-04-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp-lang.c (LANG_HOOKS_TRUTHVALUE_CONVERSION): Redefine."}, {"sha": "830771e4267eb86a6aa6d791540fc7cd9ee30f17", "filename": "gcc/cp/method.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62ea15730209b4024837b30e9f0eb7e39fae3d9/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62ea15730209b4024837b30e9f0eb7e39fae3d9/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=f62ea15730209b4024837b30e9f0eb7e39fae3d9", "patch": "@@ -770,8 +770,9 @@ synthesize_method (fndecl)\n \n /* Use EXTRACTOR to locate the relevant function called for each base &\n    class field of TYPE. CLIENT allows additional information to be passed\n-   to EXTRACTOR.  Generates the union of all exceptions generated by\n-   those functions.  */\n+   to EXTRACTOR.  Generates the union of all exceptions generated by those\n+   functions.  Note that we haven't updated TYPE_FIELDS and such of any\n+   variants yet, so we need to look at the main one.  */\n \n static tree\n synthesize_exception_spec (type, extractor, client)\n@@ -783,7 +784,7 @@ synthesize_exception_spec (type, extractor, client)\n   tree fields = TYPE_FIELDS (type);\n   int i, n_bases = CLASSTYPE_N_BASECLASSES (type);\n   tree binfos = TYPE_BINFO_BASETYPES (type);\n-  \n+\n   for (i = 0; i != n_bases; i++)\n     {\n       tree base = BINFO_TYPE (TREE_VEC_ELT (binfos, i));\n@@ -962,7 +963,7 @@ implicitly_declare_fn (kind, type, const_p)\n     case sfk_assignment_operator:\n     {\n       struct copy_data data;\n-      tree argtype;\n+      tree argtype = type;\n       \n       has_parm = 1;\n       data.name = NULL;\n@@ -978,10 +979,10 @@ implicitly_declare_fn (kind, type, const_p)\n       if (const_p)\n         {\n           data.quals = TYPE_QUAL_CONST;\n-          type = build_qualified_type (type, TYPE_QUAL_CONST);\n+          argtype = build_qualified_type (argtype, TYPE_QUAL_CONST);\n         }\n     \n-      argtype = build_reference_type (type);\n+      argtype = build_reference_type (argtype);\n       args = build_tree_list (hash_tree_chain (argtype, NULL_TREE),\n \t\t\t      get_identifier (\"_ctor_arg\"));\n       args = tree_cons (NULL_TREE, args, void_list_node);"}, {"sha": "ac3cab8b166f2ce726a542b383ec6df542df0fd2", "filename": "gcc/testsuite/g++.dg/eh/synth1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f62ea15730209b4024837b30e9f0eb7e39fae3d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsynth1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f62ea15730209b4024837b30e9f0eb7e39fae3d9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsynth1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsynth1.C?ref=f62ea15730209b4024837b30e9f0eb7e39fae3d9", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/6179\n+\n+// Bug: we tried to look at the fields of 'const A' to determine the proper\n+// exception specification for the synthesized copy constructor, but\n+// TYPE_FIELDS hadn't been set yet, so we incorrectly got a throw() spec.\n+\n+struct B\n+{\n+  B () {}\n+  B (const B&) { throw 1; }\n+};\n+\n+struct A;\n+void f (const A &) {}\n+struct A\n+{\n+  B b;\n+};\n+\n+int main ()\n+{\n+  A a;  \n+  try\n+    { A a2 (a); }\n+  catch (...)\n+    { }\n+}"}]}