{"sha": "df0b55f090b8591746d350a474d5f2291a9202be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwYjU1ZjA5MGI4NTkxNzQ2ZDM1MGE0NzRkNWYyMjkxYTkyMDJiZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-06-18T19:59:13Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-06-18T19:59:13Z"}, "message": "More rtx to rtx_insn * cleanups\n\ngcc/ChangeLog:\n\t* config/frv/frv-protos.h (frv_ifcvt_modify_insn): Strengthen 3rd\n\tparam from rtx to rtx_insn *.\n\t* config/frv/frv.c (frv_ifcvt_add_insn): Likewise for \"insn\"\n\tparam.\n\t(frv_ifcvt_modify_insn): Likwise.\n\t(frv_ifcvt_modify_final): Likwise for local \"existing_insn\",\n\tadding an as_a <rtx_insn *> cast.  Likewise for local \"insn\".\n\t* config/mips/mips.c (r10k_insert_cache_barriers): Add an\n\tas_a <rtx_insn *> cast to local \"unprotected_region\" once\n\tit's been established that it's not NULL or pc_rtx.\n\t* config/nds32/nds32-relax-opt.c (nds32_group_insns): Strengthen\n\tparam \"sethi\" from rtx to rtx_insn *.\n\t(nds32_group_float_insns): Likewise for param \"insn\".\n\t* config/vax/vax-protos.h (vax_output_int_add): Likewise for 1st\n\tparam.\n\t(vax_output_int_subtract): Likewise.\n\t* config/vax/vax.c (vax_output_int_add): Likewise for param\n\t\"insn\".\n\t(vax_output_int_subtract): Likewise.\n\t* emit-rtl.c (set_insn_deleted): Likewise, removing cast.\n\t(emit_pattern_after): Likewise for param \"after\".\n\t(emit_insn_after): Likewise.\n\t(emit_jump_insn_after): Likewise.\n\t(emit_call_insn_after): Likewise.\n\t(emit_debug_insn_after): Likewise.\n\t(emit_pattern_before): Likewise for param \"before\".\n\t(emit_insn_before): Likewise.\n\t(emit_jump_insn_before): Likewise.\n\t* final.c (get_insn_template): Likewise for param \"insn\", removing\n\ta cast.\n\t* output.h (get_insn_template): Likewise for 2nd param.\n\t* rtl.h (emit_insn_before): Likewise.\n\t(emit_jump_insn_before): Likewise.\n\t(emit_debug_insn_before_noloc): Likewise.\n\t(emit_insn_after): Likewise.\n\t(emit_jump_insn_after): Likewise.\n\t(emit_call_insn_after): Likewise.\n\t(emit_debug_insn_after): Likewise.\n\t(set_insn_deleted): Likewise for param.\n\nFrom-SVN: r261715", "tree": {"sha": "0a714cfc52fe9bad9e338c70d9b72c2c29f67824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a714cfc52fe9bad9e338c70d9b72c2c29f67824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df0b55f090b8591746d350a474d5f2291a9202be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0b55f090b8591746d350a474d5f2291a9202be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0b55f090b8591746d350a474d5f2291a9202be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0b55f090b8591746d350a474d5f2291a9202be/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a8886e45f7eb6684f4e27b9d823ea3d02df787c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8886e45f7eb6684f4e27b9d823ea3d02df787c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a8886e45f7eb6684f4e27b9d823ea3d02df787c"}], "stats": {"total": 115, "additions": 77, "deletions": 38}, "files": [{"sha": "fa80e8789f2a4408cb4448898987ee0f3b4c0cc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -1,3 +1,45 @@\n+2018-06-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/frv/frv-protos.h (frv_ifcvt_modify_insn): Strengthen 3rd\n+\tparam from rtx to rtx_insn *.\n+\t* config/frv/frv.c (frv_ifcvt_add_insn): Likewise for \"insn\"\n+\tparam.\n+\t(frv_ifcvt_modify_insn): Likwise.\n+\t(frv_ifcvt_modify_final): Likwise for local \"existing_insn\",\n+\tadding an as_a <rtx_insn *> cast.  Likewise for local \"insn\".\n+\t* config/mips/mips.c (r10k_insert_cache_barriers): Add an\n+\tas_a <rtx_insn *> cast to local \"unprotected_region\" once\n+\tit's been established that it's not NULL or pc_rtx.\n+\t* config/nds32/nds32-relax-opt.c (nds32_group_insns): Strengthen\n+\tparam \"sethi\" from rtx to rtx_insn *.\n+\t(nds32_group_float_insns): Likewise for param \"insn\".\n+\t* config/vax/vax-protos.h (vax_output_int_add): Likewise for 1st\n+\tparam.\n+\t(vax_output_int_subtract): Likewise.\n+\t* config/vax/vax.c (vax_output_int_add): Likewise for param\n+\t\"insn\".\n+\t(vax_output_int_subtract): Likewise.\n+\t* emit-rtl.c (set_insn_deleted): Likewise, removing cast.\n+\t(emit_pattern_after): Likewise for param \"after\".\n+\t(emit_insn_after): Likewise.\n+\t(emit_jump_insn_after): Likewise.\n+\t(emit_call_insn_after): Likewise.\n+\t(emit_debug_insn_after): Likewise.\n+\t(emit_pattern_before): Likewise for param \"before\".\n+\t(emit_insn_before): Likewise.\n+\t(emit_jump_insn_before): Likewise.\n+\t* final.c (get_insn_template): Likewise for param \"insn\", removing\n+\ta cast.\n+\t* output.h (get_insn_template): Likewise for 2nd param.\n+\t* rtl.h (emit_insn_before): Likewise.\n+\t(emit_jump_insn_before): Likewise.\n+\t(emit_debug_insn_before_noloc): Likewise.\n+\t(emit_insn_after): Likewise.\n+\t(emit_jump_insn_after): Likewise.\n+\t(emit_call_insn_after): Likewise.\n+\t(emit_debug_insn_after): Likewise.\n+\t(set_insn_deleted): Likewise for param.\n+\n 2018-06-18  Michael Meissner  <meissner@linux.ibm.com>\n \n \tPR target/85358"}, {"sha": "67c4b097dd9e8ef637cd18e1dd2ac4e569bac8dd", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -67,7 +67,7 @@ extern void frv_ifcvt_modify_tests\t(struct ce_if_block *, rtx *, rtx *);\n extern void frv_ifcvt_modify_multiple_tests\n \t\t\t\t\t(struct ce_if_block *, basic_block,\n \t\t\t\t\t rtx *, rtx *);\n-extern rtx frv_ifcvt_modify_insn\t(struct ce_if_block *, rtx, rtx);\n+extern rtx frv_ifcvt_modify_insn\t(struct ce_if_block *, rtx, rtx_insn *);\n extern void frv_ifcvt_modify_final\t(struct ce_if_block *);\n extern void frv_ifcvt_modify_cancel\t(struct ce_if_block *);\n #endif"}, {"sha": "78f1a80cdf98f3819f1350b2eab7b5c87920a4ae", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -318,7 +318,7 @@ static rtx frv_expand_mwtacc_builtin\t\t(enum insn_code, tree);\n static rtx frv_expand_noargs_builtin\t\t(enum insn_code);\n static void frv_split_iacc_move\t\t\t(rtx, rtx);\n static rtx frv_emit_comparison\t\t\t(enum rtx_code, rtx, rtx);\n-static void frv_ifcvt_add_insn\t\t\t(rtx, rtx, int);\n+static void frv_ifcvt_add_insn\t\t\t(rtx, rtx_insn *, int);\n static rtx frv_ifcvt_rewrite_mem\t\t(rtx, machine_mode, rtx);\n static rtx frv_ifcvt_load_value\t\t\t(rtx, rtx);\n static unsigned int frv_insn_unit\t\t(rtx_insn *);\n@@ -5160,7 +5160,7 @@ frv_ifcvt_machdep_init (void *ce_info ATTRIBUTE_UNUSED)\n    if the conditional execution conversion is successful.  */\n \n static void\n-frv_ifcvt_add_insn (rtx pattern, rtx insn, int before_p)\n+frv_ifcvt_add_insn (rtx pattern, rtx_insn *insn, int before_p)\n {\n   rtx link = alloc_EXPR_LIST (VOIDmode, pattern, insn);\n \n@@ -5842,7 +5842,7 @@ single_set_pattern (rtx pattern)\n rtx\n frv_ifcvt_modify_insn (ce_if_block *ce_info,\n                        rtx pattern,\n-                       rtx insn)\n+                       rtx_insn *insn)\n {\n   rtx orig_ce_pattern = pattern;\n   rtx set;\n@@ -6106,7 +6106,7 @@ frv_ifcvt_modify_insn (ce_if_block *ce_info,\n void\n frv_ifcvt_modify_final (ce_if_block *ce_info ATTRIBUTE_UNUSED)\n {\n-  rtx existing_insn;\n+  rtx_insn *existing_insn;\n   rtx check_insn;\n   rtx p = frv_ifcvt.added_insns_list;\n   int i;\n@@ -6121,7 +6121,7 @@ frv_ifcvt_modify_final (ce_if_block *ce_info ATTRIBUTE_UNUSED)\n       rtx old_p = p;\n \n       check_insn = XEXP (check_and_insert_insns, 0);\n-      existing_insn = XEXP (check_and_insert_insns, 1);\n+      existing_insn = as_a <rtx_insn *> (XEXP (check_and_insert_insns, 1));\n       p = XEXP (p, 1);\n \n       /* The jump bit is used to say that the new insn is to be inserted BEFORE\n@@ -6142,7 +6142,7 @@ frv_ifcvt_modify_final (ce_if_block *ce_info ATTRIBUTE_UNUSED)\n   /* Load up any constants needed into temp gprs */\n   for (i = 0; i < frv_ifcvt.cur_scratch_regs; i++)\n     {\n-      rtx insn = emit_insn_before (frv_ifcvt.scratch_regs[i], existing_insn);\n+      rtx_insn *insn = emit_insn_before (frv_ifcvt.scratch_regs[i], existing_insn);\n       if (! frv_ifcvt.scratch_insns_bitmap)\n \tfrv_ifcvt.scratch_insns_bitmap = BITMAP_ALLOC (NULL);\n       bitmap_set_bit (frv_ifcvt.scratch_insns_bitmap, INSN_UID (insn));"}, {"sha": "ad393040beed94b0e57282dc022010a9224c46ad", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -17823,7 +17823,7 @@ r10k_insert_cache_barriers (void)\n \t\t  if (r10k_needs_protection_p (insn))\n \t\t    {\n \t\t      emit_insn_before (gen_r10k_cache_barrier (),\n-\t\t\t\t\tunprotected_region);\n+\t\t\t\t\tas_a <rtx_insn *> (unprotected_region));\n \t\t      unprotected_region = NULL_RTX;\n \t\t    }\n \t\t}"}, {"sha": "e6609a09293b6c924f60d6fb71e1c1f789dd4a8f", "filename": "gcc/config/nds32/nds32-relax-opt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Fnds32%2Fnds32-relax-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Fnds32%2Fnds32-relax-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-relax-opt.c?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -304,7 +304,7 @@ nds32_pic_tls_symbol_type (rtx x)\n \n /* Group the relax candidates with group id.  */\n static void\n-nds32_group_insns (rtx sethi)\n+nds32_group_insns (rtx_insn *sethi)\n {\n   df_ref def_record, use_record;\n   df_link *link;\n@@ -435,7 +435,7 @@ nds32_float_reg_load_store_p (rtx_insn *insn)\n    flsi $rt, [$ra + offset] */\n \n static void\n-nds32_group_float_insns (rtx insn)\n+nds32_group_float_insns (rtx_insn *insn)\n {\n   df_ref def_record, use_record;\n   df_link *link;"}, {"sha": "a5260174999252930adfb8ddc35de1614df4c5aa", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -29,8 +29,8 @@ extern void print_operand (FILE *, rtx, int);\n extern void vax_notice_update_cc (rtx, rtx);\n extern void vax_expand_addsub_di_operands (rtx *, enum rtx_code);\n extern const char * vax_output_int_move (rtx, rtx *, machine_mode);\n-extern const char * vax_output_int_add (rtx, rtx *, machine_mode);\n-extern const char * vax_output_int_subtract (rtx, rtx *, machine_mode);\n+extern const char * vax_output_int_add (rtx_insn *, rtx *, machine_mode);\n+extern const char * vax_output_int_subtract (rtx_insn *, rtx *, machine_mode);\n extern const char * vax_output_movmemsi (rtx, rtx *);\n #endif /* RTX_CODE */\n "}, {"sha": "631c598d3b2f26f250d83b370e3e5ddc7ade0919", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -1354,7 +1354,7 @@ vax_output_int_move (rtx insn ATTRIBUTE_UNUSED, rtx *operands,\n    which are not modified very often.  */\n \n const char *\n-vax_output_int_add (rtx insn, rtx *operands, machine_mode mode)\n+vax_output_int_add (rtx_insn *insn, rtx *operands, machine_mode mode)\n {\n   switch (mode)\n     {\n@@ -1564,7 +1564,7 @@ vax_output_int_add (rtx insn, rtx *operands, machine_mode mode)\n }\n \n const char *\n-vax_output_int_subtract (rtx insn, rtx *operands, machine_mode mode)\n+vax_output_int_subtract (rtx_insn *insn, rtx *operands, machine_mode mode)\n {\n   switch (mode)\n     {"}, {"sha": "e4b070486e87e60e069178046f98a19304167128", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -4282,10 +4282,10 @@ add_insn_before (rtx_insn *insn, rtx_insn *before, basic_block bb)\n /* Replace insn with an deleted instruction note.  */\n \n void\n-set_insn_deleted (rtx insn)\n+set_insn_deleted (rtx_insn *insn)\n {\n   if (INSN_P (insn))\n-    df_insn_delete (as_a <rtx_insn *> (insn));\n+    df_insn_delete (insn);\n   PUT_CODE (insn, NOTE);\n   NOTE_KIND (insn) = NOTE_INSN_DELETED;\n }\n@@ -4861,10 +4861,9 @@ emit_pattern_after_setloc (rtx pattern, rtx_insn *after, location_t loc,\n    any DEBUG_INSNs.  */\n \n static rtx_insn *\n-emit_pattern_after (rtx pattern, rtx uncast_after, bool skip_debug_insns,\n+emit_pattern_after (rtx pattern, rtx_insn *after, bool skip_debug_insns,\n \t\t    rtx_insn *(*make_raw) (rtx))\n {\n-  rtx_insn *after = safe_as_a <rtx_insn *> (uncast_after);\n   rtx_insn *prev = after;\n \n   if (skip_debug_insns)\n@@ -4887,7 +4886,7 @@ emit_insn_after_setloc (rtx pattern, rtx_insn *after, location_t loc)\n \n /* Like emit_insn_after_noloc, but set INSN_LOCATION according to AFTER.  */\n rtx_insn *\n-emit_insn_after (rtx pattern, rtx after)\n+emit_insn_after (rtx pattern, rtx_insn *after)\n {\n   return emit_pattern_after (pattern, after, true, make_insn_raw);\n }\n@@ -4902,7 +4901,7 @@ emit_jump_insn_after_setloc (rtx pattern, rtx_insn *after, location_t loc)\n \n /* Like emit_jump_insn_after_noloc, but set INSN_LOCATION according to AFTER.  */\n rtx_jump_insn *\n-emit_jump_insn_after (rtx pattern, rtx after)\n+emit_jump_insn_after (rtx pattern, rtx_insn *after)\n {\n   return as_a <rtx_jump_insn *> (\n \temit_pattern_after (pattern, after, true, make_jump_insn_raw));\n@@ -4917,7 +4916,7 @@ emit_call_insn_after_setloc (rtx pattern, rtx_insn *after, location_t loc)\n \n /* Like emit_call_insn_after_noloc, but set INSN_LOCATION according to AFTER.  */\n rtx_insn *\n-emit_call_insn_after (rtx pattern, rtx after)\n+emit_call_insn_after (rtx pattern, rtx_insn *after)\n {\n   return emit_pattern_after (pattern, after, true, make_call_insn_raw);\n }\n@@ -4931,7 +4930,7 @@ emit_debug_insn_after_setloc (rtx pattern, rtx_insn *after, location_t loc)\n \n /* Like emit_debug_insn_after_noloc, but set INSN_LOCATION according to AFTER.  */\n rtx_insn *\n-emit_debug_insn_after (rtx pattern, rtx after)\n+emit_debug_insn_after (rtx pattern, rtx_insn *after)\n {\n   return emit_pattern_after (pattern, after, false, make_debug_insn_raw);\n }\n@@ -4976,10 +4975,9 @@ emit_pattern_before_setloc (rtx pattern, rtx_insn *before, location_t loc,\n    INSN as opposed to a JUMP_INSN, CALL_INSN, etc.  */\n \n static rtx_insn *\n-emit_pattern_before (rtx pattern, rtx uncast_before, bool skip_debug_insns,\n+emit_pattern_before (rtx pattern, rtx_insn *before, bool skip_debug_insns,\n \t\t     bool insnp, rtx_insn *(*make_raw) (rtx))\n {\n-  rtx_insn *before = safe_as_a <rtx_insn *> (uncast_before);\n   rtx_insn *next = before;\n \n   if (skip_debug_insns)\n@@ -5005,7 +5003,7 @@ emit_insn_before_setloc (rtx pattern, rtx_insn *before, location_t loc)\n \n /* Like emit_insn_before_noloc, but set INSN_LOCATION according to BEFORE.  */\n rtx_insn *\n-emit_insn_before (rtx pattern, rtx before)\n+emit_insn_before (rtx pattern, rtx_insn *before)\n {\n   return emit_pattern_before (pattern, before, true, true, make_insn_raw);\n }\n@@ -5021,7 +5019,7 @@ emit_jump_insn_before_setloc (rtx pattern, rtx_insn *before, location_t loc)\n \n /* Like emit_jump_insn_before_noloc, but set INSN_LOCATION according to BEFORE.  */\n rtx_jump_insn *\n-emit_jump_insn_before (rtx pattern, rtx before)\n+emit_jump_insn_before (rtx pattern, rtx_insn *before)\n {\n   return as_a <rtx_jump_insn *> (\n \temit_pattern_before (pattern, before, true, false,"}, {"sha": "a17a3a67b5426e579ca65b8ad5b472dd0aa9582f", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -2128,7 +2128,7 @@ final (rtx_insn *first, FILE *file, int optimize_p)\n }\n \f\n const char *\n-get_insn_template (int code, rtx insn)\n+get_insn_template (int code, rtx_insn *insn)\n {\n   switch (insn_data[code].output_format)\n     {\n@@ -2138,8 +2138,7 @@ get_insn_template (int code, rtx insn)\n       return insn_data[code].output.multi[which_alternative];\n     case INSN_OUTPUT_FORMAT_FUNCTION:\n       gcc_assert (insn);\n-      return (*insn_data[code].output.function) (recog_data.operand,\n-\t\t\t\t\t\t as_a <rtx_insn *> (insn));\n+      return (*insn_data[code].output.function) (recog_data.operand, insn);\n \n     default:\n       gcc_unreachable ();"}, {"sha": "afe72bece31d3c14ce2935e64371be63a39721b6", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -149,7 +149,7 @@ extern int only_leaf_regs_used (void);\n extern void leaf_renumber_regs_insn (rtx);\n \n /* Locate the proper template for the given insn-code.  */\n-extern const char *get_insn_template (int, rtx);\n+extern const char *get_insn_template (int, rtx_insn *);\n \n /* Functions in varasm.c.  */\n "}, {"sha": "565ce3abbe4e199609a6915de648736b43aa838d", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0b55f090b8591746d350a474d5f2291a9202be/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=df0b55f090b8591746d350a474d5f2291a9202be", "patch": "@@ -3214,32 +3214,32 @@ extern rtx simplify_subtraction (rtx);\n extern void decide_function_section (tree);\n \n /* In emit-rtl.c */\n-extern rtx_insn *emit_insn_before (rtx, rtx);\n+extern rtx_insn *emit_insn_before (rtx, rtx_insn *);\n extern rtx_insn *emit_insn_before_noloc (rtx, rtx_insn *, basic_block);\n extern rtx_insn *emit_insn_before_setloc (rtx, rtx_insn *, location_t);\n-extern rtx_jump_insn *emit_jump_insn_before (rtx, rtx);\n+extern rtx_jump_insn *emit_jump_insn_before (rtx, rtx_insn *);\n extern rtx_jump_insn *emit_jump_insn_before_noloc (rtx, rtx_insn *);\n extern rtx_jump_insn *emit_jump_insn_before_setloc (rtx, rtx_insn *,\n \t\t\t\t\t\t    location_t);\n extern rtx_insn *emit_call_insn_before (rtx, rtx_insn *);\n extern rtx_insn *emit_call_insn_before_noloc (rtx, rtx_insn *);\n extern rtx_insn *emit_call_insn_before_setloc (rtx, rtx_insn *, location_t);\n extern rtx_insn *emit_debug_insn_before (rtx, rtx_insn *);\n-extern rtx_insn *emit_debug_insn_before_noloc (rtx, rtx);\n+extern rtx_insn *emit_debug_insn_before_noloc (rtx, rtx_insn *);\n extern rtx_insn *emit_debug_insn_before_setloc (rtx, rtx_insn *, location_t);\n extern rtx_barrier *emit_barrier_before (rtx_insn *);\n extern rtx_code_label *emit_label_before (rtx_code_label *, rtx_insn *);\n extern rtx_note *emit_note_before (enum insn_note, rtx_insn *);\n-extern rtx_insn *emit_insn_after (rtx, rtx);\n+extern rtx_insn *emit_insn_after (rtx, rtx_insn *);\n extern rtx_insn *emit_insn_after_noloc (rtx, rtx_insn *, basic_block);\n extern rtx_insn *emit_insn_after_setloc (rtx, rtx_insn *, location_t);\n-extern rtx_jump_insn *emit_jump_insn_after (rtx, rtx);\n+extern rtx_jump_insn *emit_jump_insn_after (rtx, rtx_insn *);\n extern rtx_jump_insn *emit_jump_insn_after_noloc (rtx, rtx_insn *);\n extern rtx_jump_insn *emit_jump_insn_after_setloc (rtx, rtx_insn *, location_t);\n-extern rtx_insn *emit_call_insn_after (rtx, rtx);\n+extern rtx_insn *emit_call_insn_after (rtx, rtx_insn *);\n extern rtx_insn *emit_call_insn_after_noloc (rtx, rtx_insn *);\n extern rtx_insn *emit_call_insn_after_setloc (rtx, rtx_insn *, location_t);\n-extern rtx_insn *emit_debug_insn_after (rtx, rtx);\n+extern rtx_insn *emit_debug_insn_after (rtx, rtx_insn *);\n extern rtx_insn *emit_debug_insn_after_noloc (rtx, rtx_insn *);\n extern rtx_insn *emit_debug_insn_after_setloc (rtx, rtx_insn *, location_t);\n extern rtx_barrier *emit_barrier_after (rtx_insn *);\n@@ -3355,7 +3355,7 @@ extern const HARD_REG_SET &simplifiable_subregs (const subreg_shape &);\n extern rtx set_for_reg_notes (rtx);\n extern rtx set_unique_reg_note (rtx, enum reg_note, rtx);\n extern rtx set_dst_reg_note (rtx, enum reg_note, rtx, rtx);\n-extern void set_insn_deleted (rtx);\n+extern void set_insn_deleted (rtx_insn *);\n \n /* Functions in rtlanal.c */\n "}]}