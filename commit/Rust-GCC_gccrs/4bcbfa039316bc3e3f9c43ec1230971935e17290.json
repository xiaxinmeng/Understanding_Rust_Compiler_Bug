{"sha": "4bcbfa039316bc3e3f9c43ec1230971935e17290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJjYmZhMDM5MzE2YmMzZTNmOWM0M2VjMTIzMDk3MTkzNWUxNzI5MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T18:54:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T18:54:35Z"}, "message": "Makefile.in (target-globals.o): Depend on $(EXPR_H) and $(OPTABS_H).\n\ngcc/\n\t* Makefile.in (target-globals.o): Depend on $(EXPR_H) and $(OPTABS_H).\n\t* optabs.h (target_optabs): New structure.\n\t(default_target_optabs): Declare.\n\t(this_target_optabs): Declare as a variable or define as a macro.\n\t(optab_table, convert_optab_table, direct_optab_table): Redefine\n\tas macros.\n\t* optabs.c (default_target_optabs): New variable.\n\t(this_target_optabs): New conditional variable.\n\t(optab_table, convert_optab_table, direct_optab_table): Delete.\n\t* target-globals.h (this_target_optabs): Declare.\n\t(target_globals): Add a optabs field.\n\t(restore_target_globals): Copy the optabs field to\n\tthis_target_optabs.\n\t* target-globals.c: Include expr.h and optabs.h.\n\t(default_target_globals): Initialize the optabs field.\n\t(save_target_globals): Likewise.\n\nFrom-SVN: r162097", "tree": {"sha": "c920ed4d7946023638d154dfa81c2b963b87076a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c920ed4d7946023638d154dfa81c2b963b87076a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bcbfa039316bc3e3f9c43ec1230971935e17290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcbfa039316bc3e3f9c43ec1230971935e17290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bcbfa039316bc3e3f9c43ec1230971935e17290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcbfa039316bc3e3f9c43ec1230971935e17290/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6609375319133de3e9a46d3477369482b92f9fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6609375319133de3e9a46d3477369482b92f9fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6609375319133de3e9a46d3477369482b92f9fa"}], "stats": {"total": 84, "additions": 59, "deletions": 25}, "files": [{"sha": "08bcf6f6b68f02d51bfc54ea1ba18b1302ed2ef7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bcbfa039316bc3e3f9c43ec1230971935e17290", "patch": "@@ -1,3 +1,22 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in (target-globals.o): Depend on $(EXPR_H) and $(OPTABS_H).\n+\t* optabs.h (target_optabs): New structure.\n+\t(default_target_optabs): Declare.\n+\t(this_target_optabs): Declare as a variable or define as a macro.\n+\t(optab_table, convert_optab_table, direct_optab_table): Redefine\n+\tas macros.\n+\t* optabs.c (default_target_optabs): New variable.\n+\t(this_target_optabs): New conditional variable.\n+\t(optab_table, convert_optab_table, direct_optab_table): Delete.\n+\t* target-globals.h (this_target_optabs): Declare.\n+\t(target_globals): Add a optabs field.\n+\t(restore_target_globals): Copy the optabs field to\n+\tthis_target_optabs.\n+\t* target-globals.c: Include expr.h and optabs.h.\n+\t(default_target_globals): Initialize the optabs field.\n+\t(save_target_globals): Likewise.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* flags.h (target_flagstate): Add x_flag_excess_precision."}, {"sha": "8263b64d2612096d93b204d4b5734dcfc0d864aa", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4bcbfa039316bc3e3f9c43ec1230971935e17290", "patch": "@@ -3478,7 +3478,7 @@ lower-subreg.o : lower-subreg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(EXPR_H) $(EXCEPT_H) $(REGS_H) $(TREE_PASS_H) $(DF_H)\n target-globals.o : target-globals.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) insn-config.h $(MACHMODE_H) $(GGC_H) $(TOPLEV_H) target-globals.h \\\n-   $(FLAGS_H) $(REGS_H) $(RTL_H) reload.h expmed.h\n+   $(FLAGS_H) $(REGS_H) $(RTL_H) reload.h expmed.h $(EXPR_H) $(OPTABS_H)\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h conditions.h \\"}, {"sha": "e9487d0367e82e7ad75c8727d240b649cd98a938", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=4bcbfa039316bc3e3f9c43ec1230971935e17290", "patch": "@@ -45,26 +45,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"target.h\"\n \n-/* Each optab contains info on how this target machine\n-   can perform a particular operation\n-   for all sizes and kinds of operands.\n-\n-   The operation to be performed is often specified\n-   by passing one of these optabs as an argument.\n-\n-   See expr.h for documentation of these optabs.  */\n-\n-struct optab_d optab_table[OTI_MAX];\n+struct target_optabs default_target_optabs;\n+#if SWITCHABLE_TARGET\n+struct target_optabs *this_target_optabs = &default_target_optabs;\n+#endif\n \n rtx libfunc_table[LTI_MAX];\n \n-/* Tables of patterns for converting one mode to another.  */\n-struct convert_optab_d convert_optab_table[COI_MAX];\n-\n-/* Tables of patterns for direct optabs (i.e. those which cannot be\n-   implemented using a libcall).  */\n-struct direct_optab_d direct_optab_table[(int) DOI_MAX];\n-\n /* Contains the optab used for each rtx code.  */\n optab code_to_optab[NUM_RTX_CODE + 1];\n "}, {"sha": "547339bcee66ecfd53e3fccf586c2789a0af4e3c", "filename": "gcc/optabs.h", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=4bcbfa039316bc3e3f9c43ec1230971935e17290", "patch": "@@ -371,8 +371,6 @@ enum optab_index\n   OTI_MAX\n };\n \n-extern struct optab_d optab_table[OTI_MAX];\n-\n #define ssadd_optab (&optab_table[OTI_ssadd])\n #define usadd_optab (&optab_table[OTI_usadd])\n #define sssub_optab (&optab_table[OTI_sssub])\n@@ -574,8 +572,6 @@ enum convert_optab_index\n   COI_MAX\n };\n \n-extern struct convert_optab_d convert_optab_table[COI_MAX];\n-\n #define sext_optab (&convert_optab_table[COI_sext])\n #define zext_optab (&convert_optab_table[COI_zext])\n #define trunc_optab (&convert_optab_table[COI_trunc])\n@@ -676,8 +672,6 @@ struct direct_optab_d\n };\n typedef struct direct_optab_d *direct_optab;\n \n-extern struct direct_optab_d direct_optab_table[(int) DOI_MAX];\n-\n #ifdef HAVE_conditional_move\n #define movcc_optab (&direct_optab_table[(int) DOI_movcc])\n #endif\n@@ -715,6 +709,33 @@ extern struct direct_optab_d direct_optab_table[(int) DOI_MAX];\n #define sync_lock_release_optab \\\n   (&direct_optab_table[(int) DOI_sync_lock_release])\n \f\n+/* Target-dependent globals.  */\n+struct target_optabs {\n+  /* Tables of patterns that may have an associated libcall.  */\n+  struct optab_d x_optab_table[(int) OTI_MAX];\n+\n+  /* Tables of patterns for converting one mode to another.  */\n+  struct convert_optab_d x_convert_optab_table[(int) COI_MAX];\n+\n+  /* Tables of patterns for direct optabs (i.e. those which cannot be\n+     implemented using a libcall).  */\n+  struct direct_optab_d x_direct_optab_table[(int) DOI_MAX];\n+};\n+\n+extern struct target_optabs default_target_optabs;\n+#if SWITCHABLE_TARGET\n+extern struct target_optabs *this_target_optabs;\n+#else\n+#define this_target_optabs (&default_target_optabs)\n+#endif\n+\n+#define optab_table \\\n+  (this_target_optabs->x_optab_table)\n+#define convert_optab_table \\\n+  (this_target_optabs->x_convert_optab_table)\n+#define direct_optab_table \\\n+  (this_target_optabs->x_direct_optab_table)\n+\f\n /* Define functions given in optabs.c.  */\n \n extern rtx expand_widen_pattern_expr (sepops ops, rtx op0, rtx op1, rtx wide_op,"}, {"sha": "cfabb87c90988acc2ceec8f54f55092a31fc8de8", "filename": "gcc/target-globals.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=4bcbfa039316bc3e3f9c43ec1230971935e17290", "patch": "@@ -32,6 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hard-reg-set.h\"\n #include \"reload.h\"\n #include \"expmed.h\"\n+#include \"expr.h\"\n+#include \"optabs.h\"\n \n #if SWITCHABLE_TARGET\n struct target_globals default_target_globals = {\n@@ -40,7 +42,8 @@ struct target_globals default_target_globals = {\n   &default_target_rtl,\n   &default_target_hard_regs,\n   &default_target_reload,\n-  &default_target_expmed\n+  &default_target_expmed,\n+  &default_target_optabs\n };\n \n struct target_globals *\n@@ -55,6 +58,7 @@ save_target_globals (void)\n   g->hard_regs = XCNEW (struct target_hard_regs);\n   g->reload = XCNEW (struct target_reload);\n   g->expmed = XCNEW (struct target_expmed);\n+  g->optabs = XCNEW (struct target_optabs);\n   restore_target_globals (g);\n   target_reinit ();\n   return g;"}, {"sha": "a1f4866fb2a8ff717ee552758c57dfbecf802233", "filename": "gcc/target-globals.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcbfa039316bc3e3f9c43ec1230971935e17290/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=4bcbfa039316bc3e3f9c43ec1230971935e17290", "patch": "@@ -27,6 +27,7 @@ extern struct target_rtl *this_target_rtl;\n extern struct target_hard_regs *this_target_hard_regs;\n extern struct target_reload *this_target_reload;\n extern struct target_expmed *this_target_expmed;\n+extern struct target_optabs *this_target_optabs;\n \n struct GTY(()) target_globals {\n   struct target_flag_state *GTY((skip)) flag_state;\n@@ -35,6 +36,7 @@ struct GTY(()) target_globals {\n   struct target_hard_regs *GTY((skip)) hard_regs;\n   struct target_reload *GTY((skip)) reload;\n   struct target_expmed *GTY((skip)) expmed;\n+  struct target_optabs *GTY((skip)) optabs;\n };\n \n extern struct target_globals default_target_globals;\n@@ -50,6 +52,7 @@ restore_target_globals (struct target_globals *g)\n   this_target_hard_regs = g->hard_regs;\n   this_target_reload = g->reload;\n   this_target_expmed = g->expmed;\n+  this_target_optabs = g->optabs;\n }\n #endif\n "}]}