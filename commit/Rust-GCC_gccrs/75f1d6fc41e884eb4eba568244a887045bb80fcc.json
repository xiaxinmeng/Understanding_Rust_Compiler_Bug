{"sha": "75f1d6fc41e884eb4eba568244a887045bb80fcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVmMWQ2ZmM0MWU4ODRlYjRlYmE1NjgyNDRhODg3MDQ1YmI4MGZjYw==", "commit": {"author": {"name": "Sofiane Naci", "email": "sofiane.naci@arm.com", "date": "2012-11-19T18:10:09Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2012-11-19T18:10:09Z"}, "message": "gcc/\n\t* config/aarch64/aarch64.c\n\t(aarch64_output_mi_thunk): Refactor to generate RTL patterns.\n\nFrom-SVN: r193630", "tree": {"sha": "9f3169d4c9ca6f8c5462990a356552b154e7c6e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f3169d4c9ca6f8c5462990a356552b154e7c6e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75f1d6fc41e884eb4eba568244a887045bb80fcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f1d6fc41e884eb4eba568244a887045bb80fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75f1d6fc41e884eb4eba568244a887045bb80fcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f1d6fc41e884eb4eba568244a887045bb80fcc/comments", "author": null, "committer": null, "parents": [{"sha": "2adc5085c1a3273554022554950eb7517c73d3f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2adc5085c1a3273554022554950eb7517c73d3f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2adc5085c1a3273554022554950eb7517c73d3f4"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "c725501020f0465a8f5a479ace681cc3498585c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f1d6fc41e884eb4eba568244a887045bb80fcc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f1d6fc41e884eb4eba568244a887045bb80fcc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75f1d6fc41e884eb4eba568244a887045bb80fcc", "patch": "@@ -1,3 +1,8 @@\n+2012-11-19  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_output_mi_thunk): Refactor to generate RTL patterns.\n+\n 2012-11-19  Mans Rullgard  <mans@mansr.com>\n \n \tPR target/55276"}, {"sha": "7d1e7a2994a002a8b45a546b468a7f53e999ccbf", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f1d6fc41e884eb4eba568244a887045bb80fcc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f1d6fc41e884eb4eba568244a887045bb80fcc/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=75f1d6fc41e884eb4eba568244a887045bb80fcc", "patch": "@@ -2335,47 +2335,66 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n      to return a pointer to an aggregate.  On AArch64 a result value\n      pointer will be in x8.  */\n   int this_regno = R0_REGNUM;\n+  rtx this_rtx, temp0, temp1, addr, insn, funexp;\n \n-  /* Make sure unwind info is emitted for the thunk if needed.  */\n-  final_start_function (emit_barrier (), file, 1);\n+  reload_completed = 1;\n+  emit_note (NOTE_INSN_PROLOGUE_END);\n \n   if (vcall_offset == 0)\n     aarch64_add_constant (file, this_regno, IP1_REGNUM, delta);\n   else\n     {\n       gcc_assert ((vcall_offset & 0x7) == 0);\n \n-      if (delta == 0)\n-\tasm_fprintf (file, \"\\tldr\\t%r, [%r]\\n\", IP0_REGNUM, this_regno);\n-      else if (delta >= -256 && delta < 256)\n-\tasm_fprintf (file, \"\\tldr\\t%r, [%r,%wd]!\\n\", IP0_REGNUM, this_regno,\n-\t\t     delta);\n-      else\n-\t{\n-\t  aarch64_add_constant (file, this_regno, IP1_REGNUM, delta);\n+      this_rtx = gen_rtx_REG (Pmode, this_regno);\n+      temp0 = gen_rtx_REG (Pmode, IP0_REGNUM);\n+      temp1 = gen_rtx_REG (Pmode, IP1_REGNUM);\n \n-\t  asm_fprintf (file, \"\\tldr\\t%r, [%r]\\n\", IP0_REGNUM, this_regno);\n+      addr = this_rtx;\n+      if (delta != 0)\n+\t{\n+\t  if (delta >= -256 && delta < 256)\n+\t    addr = gen_rtx_PRE_MODIFY (Pmode, this_rtx,\n+\t\t\t\t       plus_constant (Pmode, this_rtx, delta));\n+\t  else\n+\t    aarch64_add_constant (file, this_regno, IP1_REGNUM, delta);\n \t}\n \n+      aarch64_emit_move (temp0, gen_rtx_MEM (Pmode, addr));\n+\n       if (vcall_offset >= -256 && vcall_offset < 32768)\n-\tasm_fprintf (file, \"\\tldr\\t%r, [%r,%wd]\\n\", IP1_REGNUM, IP0_REGNUM,\n-\t\t     vcall_offset);\n+\t  addr = plus_constant (Pmode, temp0, vcall_offset);\n       else\n \t{\n \t  aarch64_build_constant (file, IP1_REGNUM, vcall_offset);\n-\t  asm_fprintf (file, \"\\tldr\\t%r, [%r,%r]\\n\", IP1_REGNUM, IP0_REGNUM,\n-\t\t       IP1_REGNUM);\n+\t  addr = gen_rtx_PLUS (Pmode, temp0, temp1);\n \t}\n \n-      asm_fprintf (file, \"\\tadd\\t%r, %r, %r\\n\", this_regno, this_regno,\n-\t\t   IP1_REGNUM);\n+      aarch64_emit_move (temp1, gen_rtx_MEM (Pmode,addr));\n+      emit_insn (gen_add2_insn (this_rtx, temp1));\n     }\n \n-  output_asm_insn (\"b\\t%a0\", &XEXP (DECL_RTL (function), 0));\n+  /* Generate a tail call to the target function.  */\n+  if (!TREE_USED (function))\n+    {\n+      assemble_external (function);\n+      TREE_USED (function) = 1;\n+    }\n+  funexp = XEXP (DECL_RTL (function), 0);\n+  funexp = gen_rtx_MEM (FUNCTION_MODE, funexp);\n+  insn = emit_call_insn (gen_sibcall (funexp, const0_rtx, NULL_RTX));\n+  SIBLING_CALL_P (insn) = 1;\n+\n+  insn = get_insns ();\n+  shorten_branches (insn);\n+  final_start_function (insn, file, 1);\n+  final (insn, file, 1);\n   final_end_function ();\n+\n+  /* Stop pretending to be a post-reload pass.  */\n+  reload_completed = 0;\n }\n \n-\f\n static int\n aarch64_tls_operand_p_1 (rtx *x, void *data ATTRIBUTE_UNUSED)\n {"}]}