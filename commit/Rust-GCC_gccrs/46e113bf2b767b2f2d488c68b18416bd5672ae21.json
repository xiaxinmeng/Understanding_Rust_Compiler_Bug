{"sha": "46e113bf2b767b2f2d488c68b18416bd5672ae21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlMTEzYmYyYjc2N2IyZjJkNDg4YzY4YjE4NDE2YmQ1NjcyYWUyMQ==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-09-13T00:32:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-13T00:32:37Z"}, "message": "thread: New.\n\n2008-09-12  Chris Fairles <chris.fairles@gmail.com>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/thread: New.\n\t* include/Makefile.am: Update.\n\t* include/Makefile.in: Regenerate.\n\t* src/thread.cc: New.\n\t* src/Makefile.am: Update.\n\t* src/Makefile.in: Regenerate.\n\t* acinclude.m4: Add check for nanosleep.\n\t* configure.ac: Call it.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\t* config/abi/pre/gnu.ver: Add exports.\n\t* doc/doxygen/user.cfg.in: Add thread header.\n\t* testsuite/lib/libstdc++.exp (check_v3_target_nanosleep): Add.\n\t* testsuite/lib/dg-options.exp (dg-require-nanosleep): Add.\n\t* testsuite/30_threads/thread/cons/1.cc: New.\n\t* testsuite/30_threads/thread/cons/2.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/3.cc: Likewise.\n\t* testsuite/30_threads/thread/cons/4.cc: Likewise.\n\t* testsuite/30_threads/thread/algorithm/1.cc: Likewise.\n\t* testsuite/30_threads/thread/algorithm/2.cc: Likewise.\n\t* testsuite/30_threads/thread/member/1.cc: Likewise.\n\t* testsuite/30_threads/thread/member/2.cc: Likewise.\n\t* testsuite/30_threads/thread/member/3.cc: Likewise.\n\t* testsuite/30_threads/thread/this_thread/1.cc: Likewise.\n\t* testsuite/30_threads/thread/this_thread/2.cc: Likewise.\n\t* testsuite/30_threads/thread/this_thread/3.cc: Likewise.\n\t* testsuite/30_threads/thread/this_thread/4.cc: Likewise.\n\t* testsuite/30_threads/headers/thread/types_std_c++0x.cc: Likewise.\n\t* testsuite/30_threads/headers/thread/std_c++0x_neg.cc: Likewise.\n\t* testsuite/17_intro/headers/c++200x/all.cc: Add thread.\n\t* testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc: \n\tAdd thread, condition_variable and mutex.\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r140332", "tree": {"sha": "f1b80ccc46845ad9f382edf7149e9088a80f68c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1b80ccc46845ad9f382edf7149e9088a80f68c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46e113bf2b767b2f2d488c68b18416bd5672ae21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e113bf2b767b2f2d488c68b18416bd5672ae21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e113bf2b767b2f2d488c68b18416bd5672ae21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e113bf2b767b2f2d488c68b18416bd5672ae21/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8270e80020ae8387c24f212c29d5306c38569984", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8270e80020ae8387c24f212c29d5306c38569984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8270e80020ae8387c24f212c29d5306c38569984"}], "stats": {"total": 1858, "additions": 1854, "deletions": 4}, "files": [{"sha": "249eba7a9315055e55d50a77a1f93e3d17103df7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -1,3 +1,39 @@\n+2008-09-12  Chris Fairles <chris.fairles@gmail.com>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/thread: New.\n+\t* include/Makefile.am: Update.\n+\t* include/Makefile.in: Regenerate.\n+\t* src/thread.cc: New.\n+\t* src/Makefile.am: Update.\n+\t* src/Makefile.in: Regenerate.\n+\t* acinclude.m4: Add check for nanosleep.\n+\t* configure.ac: Call it.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* config/abi/pre/gnu.ver: Add exports.\n+\t* doc/doxygen/user.cfg.in: Add thread header.\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_nanosleep): Add.\n+\t* testsuite/lib/dg-options.exp (dg-require-nanosleep): Add.\n+\t* testsuite/30_threads/thread/cons/1.cc: New.\n+\t* testsuite/30_threads/thread/cons/2.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/3.cc: Likewise.\n+\t* testsuite/30_threads/thread/cons/4.cc: Likewise.\n+\t* testsuite/30_threads/thread/algorithm/1.cc: Likewise.\n+\t* testsuite/30_threads/thread/algorithm/2.cc: Likewise.\n+\t* testsuite/30_threads/thread/member/1.cc: Likewise.\n+\t* testsuite/30_threads/thread/member/2.cc: Likewise.\n+\t* testsuite/30_threads/thread/member/3.cc: Likewise.\n+\t* testsuite/30_threads/thread/this_thread/1.cc: Likewise.\n+\t* testsuite/30_threads/thread/this_thread/2.cc: Likewise.\n+\t* testsuite/30_threads/thread/this_thread/3.cc: Likewise.\n+\t* testsuite/30_threads/thread/this_thread/4.cc: Likewise.\n+\t* testsuite/30_threads/headers/thread/types_std_c++0x.cc: Likewise.\n+\t* testsuite/30_threads/headers/thread/std_c++0x_neg.cc: Likewise.\n+\t* testsuite/17_intro/headers/c++200x/all.cc: Add thread.\n+\t* testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc: \n+\tAdd thread, condition_variable and mutex.\n+\n 2008-09-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* src/ctype.cc (use_facet<ctype<char> >, use_facet<ctype<wchar_t>):"}, {"sha": "bec563f0b4f3dcecd6b2007dfc692bba5977c391", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -1200,6 +1200,39 @@ AC_DEFUN([GLIBCXX_CHECK_GETTIMEOFDAY], [\n   AC_LANG_RESTORE\n ])\n \n+dnl\n+dnl Check for nanosleep, used in the implementation of 30.2.2\n+dnl [thread.thread.this] in the current C++0x working draft.\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_NANOSLEEP], [\n+\n+  AC_MSG_CHECKING([for nanosleep])\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  ac_has_nanosleep=no;\n+  AC_CHECK_HEADERS(time.h, ac_has_time_h=yes, ac_has_time_h=no)\n+  if test x\"$ac_has_time_h\" = x\"yes\"; then\n+    AC_MSG_CHECKING([for nanosleep])\n+    AC_TRY_COMPILE([#include <time.h>],                                                                                                         \n+      [timespec ts; nanosleep(&ts, 0);],\n+      [ac_has_nanosleep=yes], [ac_has_nanosleep=no])\n+\n+    AC_MSG_RESULT($ac_has_nanosleep)\n+  fi\n+\n+  if test x\"$ac_has_nanosleep\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_NANOSLEEP, 1,\n+      [ Defined if nanosleep is available. ])\n+  fi\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+])\n+\n dnl\n dnl Check for ISO/IEC 9899:1999 \"C99\" support to ISO/IEC DTR 19768 \"TR1\"\n dnl facilities in Chapter 8, \"C compatibility\"."}, {"sha": "0cf3518b6399d318bd46eeecb86c79437b280b90", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -412,6 +412,9 @@\n /* Define to 1 if you have the <tgmath.h> header file. */\n #undef HAVE_TGMATH_H\n \n+/* Define to 1 if you have the <time.h> header file. */\n+#undef HAVE_TIME_H\n+\n /* Define to 1 if the target supports thread-local storage. */\n #undef HAVE_TLS\n \n@@ -791,6 +794,9 @@\n /* Define if code specialized for long long should be used. */\n #undef _GLIBCXX_USE_LONG_LONG\n \n+/* Defined if nanosleep is available. */\n+#undef _GLIBCXX_USE_NANOSLEEP\n+\n /* Define if NLS translations are to be used. */\n #undef _GLIBCXX_USE_NLS\n "}, {"sha": "df69c87c3775561926259e1e83906a873c2dc9b8", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -128,7 +128,11 @@ GLIBCXX_3.4 {\n       std::strstream*;\n       std::strstreambuf*;\n #     std::t[a-q]*;\n-      std::t[a-n]*;\n+      std::t[a-g]*;      \n+      std::th[a-h]*;\n+      std::th[j-q]*;\n+      std::th[s-z]*;\n+      std::t[i-n]*;\n       std::tr1::h[^a]*;\n       std::t[s-z]*;\n #     std::[A-Zu-z]*;\n@@ -900,6 +904,23 @@ GLIBCXX_3.4.11 {\n     _ZNSt22condition_variable_anyD1Ev;\n     _ZNSt22condition_variable_anyD2Ev;\n \n+    # thread\n+    _ZNKSt6thread6get_idEv;\n+    _ZNKSt6thread8joinableEv;\n+    _ZNSt10shared_ptrISt18__thread_data_baseED1Ev;\n+    _ZNSt11this_thread5yieldEv;\n+    _ZNSt11this_thread6get_idEv;\n+    _ZNSt12bad_weak_ptrD0Ev;\n+    _ZNSt12bad_weak_ptrD1Ev;\n+    _ZNSt6thread14__start_threadEv;\n+    _ZNSt6thread4joinEv;\n+    _ZNSt6thread4swapEOS_;\n+    _ZNSt6thread6detachEv;\n+    _ZNSt6threadC1Ev;\n+    _ZNSt6threadC2Ev;\n+    _ZNSt6threadD1Ev;\n+    _ZNSt6threadD2Ev;\n+\n     # system_error\n     _ZSt18get_posix_categoryv;\n     _ZSt19get_system_categoryv;"}, {"sha": "5f471504430e3d5315cba430c57c36c796fc677d", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -21736,6 +21736,246 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+# For nanosleep support\n+\n+\n+  echo \"$as_me:$LINENO: checking for nanosleep\" >&5\n+echo $ECHO_N \"checking for nanosleep... $ECHO_C\" >&6\n+\n+\n+\n+  ac_ext=cc\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  ac_has_nanosleep=no;\n+\n+for ac_header in time.h\n+do\n+as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+else\n+  # Is the header compilable?\n+echo \"$as_me:$LINENO: checking $ac_header usability\" >&5\n+echo $ECHO_N \"checking $ac_header usability... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+#include <$ac_header>\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_header_compiler=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_header_compiler=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_compiler\" >&5\n+echo \"${ECHO_T}$ac_header_compiler\" >&6\n+\n+# Is the header present?\n+echo \"$as_me:$LINENO: checking $ac_header presence\" >&5\n+echo $ECHO_N \"checking $ac_header presence... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <$ac_header>\n+_ACEOF\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_cpp conftest.$ac_ext\\\"\") >&5\n+  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } >/dev/null; then\n+  if test -s conftest.err; then\n+    ac_cpp_err=$ac_cxx_preproc_warn_flag\n+    ac_cpp_err=$ac_cpp_err$ac_cxx_werror_flag\n+  else\n+    ac_cpp_err=\n+  fi\n+else\n+  ac_cpp_err=yes\n+fi\n+if test -z \"$ac_cpp_err\"; then\n+  ac_header_preproc=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+  ac_header_preproc=no\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_preproc\" >&5\n+echo \"${ECHO_T}$ac_header_preproc\" >&6\n+\n+# So?  What about this header?\n+case $ac_header_compiler:$ac_header_preproc:$ac_cxx_preproc_warn_flag in\n+  yes:no: )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&5\n+echo \"$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the compiler's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the compiler's result\" >&2;}\n+    ac_header_preproc=yes\n+    ;;\n+  no:yes:* )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled\" >&5\n+echo \"$as_me: WARNING: $ac_header: present but cannot be compiled\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     check for missing prerequisite headers?\" >&5\n+echo \"$as_me: WARNING: $ac_header:     check for missing prerequisite headers?\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: see the Autoconf documentation\" >&5\n+echo \"$as_me: WARNING: $ac_header: see the Autoconf documentation\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&5\n+echo \"$as_me: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the preprocessor's result\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: in the future, the compiler will take precedence\" >&5\n+echo \"$as_me: WARNING: $ac_header: in the future, the compiler will take precedence\" >&2;}\n+    (\n+      cat <<\\_ASBOX\n+## ----------------------------------------- ##\n+## Report this to the package-unused lists.  ##\n+## ----------------------------------------- ##\n+_ASBOX\n+    ) |\n+      sed \"s/^/$as_me: WARNING:     /\" >&2\n+    ;;\n+esac\n+echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  eval \"$as_ac_Header=\\$ac_header_preproc\"\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+\n+fi\n+if test `eval echo '${'$as_ac_Header'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n+_ACEOF\n+ ac_has_time_h=yes\n+else\n+  ac_has_time_h=no\n+fi\n+\n+done\n+\n+  if test x\"$ac_has_time_h\" = x\"yes\"; then\n+    echo \"$as_me:$LINENO: checking for nanosleep\" >&5\n+echo $ECHO_N \"checking for nanosleep... $ECHO_C\" >&6\n+    cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <time.h>\n+int\n+main ()\n+{\n+timespec ts; nanosleep(&ts, 0);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_has_nanosleep=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_has_nanosleep=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+    echo \"$as_me:$LINENO: result: $ac_has_nanosleep\" >&5\n+echo \"${ECHO_T}$ac_has_nanosleep\" >&6\n+  fi\n+\n+  if test x\"$ac_has_nanosleep\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_NANOSLEEP 1\n+_ACEOF\n+\n+  fi\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n \n   if test \"${ac_cv_header_locale_h+set}\" = set; then\n   echo \"$as_me:$LINENO: checking for locale.h\" >&5"}, {"sha": "dca19cc42b0a4fc82bb1e6e63207607e5ac4c141", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -153,6 +153,9 @@ GLIBCXX_ENABLE_CLOCK_GETTIME([no])\n # For gthread support\n GLIBCXX_CHECK_GTHREADS\n \n+# For nanosleep support\n+GLIBCXX_CHECK_NANOSLEEP\n+\n AC_LC_MESSAGES\n \n # Check for available headers."}, {"sha": "7b7e2c5944039a053f48f4749545785070387037", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -63,6 +63,7 @@ std_headers = \\\n \t${std_srcdir}/streambuf \\\n \t${std_srcdir}/string \\\n \t${std_srcdir}/system_error \\\n+\t${std_srcdir}/thread \\\n \t${std_srcdir}/tuple \\\n \t${std_srcdir}/type_traits \\\n \t${std_srcdir}/unordered_map \\"}, {"sha": "b86ac51bf1f14eb12783bfd727d5f4af54940059", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -317,6 +317,7 @@ std_headers = \\\n \t${std_srcdir}/streambuf \\\n \t${std_srcdir}/string \\\n \t${std_srcdir}/system_error \\\n+\t${std_srcdir}/thread \\\n \t${std_srcdir}/tuple \\\n \t${std_srcdir}/type_traits \\\n \t${std_srcdir}/unordered_map \\"}, {"sha": "2a70100127187fac0924797f9ff97444c58b6552", "filename": "libstdc++-v3/include/std/thread", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,280 @@\n+// <thread> -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file thread\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_THREAD\n+#define _GLIBCXX_THREAD 1\n+\n+#pragma GCC system_header\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+# include <c++0x_warning.h>\n+#else\n+\n+#include <chrono>\n+#include <exception>\n+#include <functional>\n+#include <memory>\n+#include <mutex>\n+#include <condition_variable>\n+#include <type_traits>\n+#include <cstddef>\n+#include <bits/functexcept.h>\n+#include <bits/gthr.h>\n+\n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+\n+namespace std\n+{\n+  class __thread_data_base;\n+\n+  typedef shared_ptr<__thread_data_base> __thread_data_ptr;\n+\n+  class __thread_data_base : public enable_shared_from_this<__thread_data_base>\n+  {\n+  public:\n+    __thread_data_base() = default;\n+    virtual ~__thread_data_base() = default;\n+    \n+    virtual void __run() const = 0;\n+    \n+    __gthread_t \t_M_thread_handle;\n+    __thread_data_ptr \t_M_this_ptr;\n+    mutex \t\t_M_data_mutex;\n+  };\n+  \n+  template<typename _Callable>\n+    class __thread_data : public __thread_data_base\n+    {\n+    public:\n+      __thread_data(_Callable&& __f)\n+      : _M_func(std::forward<_Callable>(__f))\n+      { }\n+\n+      void __run() const\n+      { _M_func(); }\n+\n+    private:\n+      _Callable _M_func;\n+    };\n+\n+  /// thread\n+  class thread\n+  {\n+  public:\n+    // types\n+    class id;\n+    typedef __gthread_t native_handle_type;\n+\n+    // cons\n+    thread();\n+    \n+    template<typename _Callable>\n+      explicit thread(_Callable __f)\n+      : _M_thread_data(__make_thread_data(__f))\n+      { __start_thread(); }\n+\n+    template<typename _Callable, typename... _Args>\n+      thread(_Callable&& __f, _Args&&... __args)\n+      : _M_thread_data(__make_thread_data(std::bind(__f, __args...)))\n+      { __start_thread(); }\n+\n+    ~thread();\n+\n+    thread(const thread&) = delete;\n+    thread(thread&&);\n+    thread& operator=(const thread&) = delete;\n+    thread& operator=(thread&&);\n+\n+    // members\n+    void \n+    swap(thread&& __t);\n+\n+    bool \n+    joinable() const;\n+\n+    void \n+    join();\n+\n+    void \n+    detach();\n+\n+    id\n+    get_id() const;\n+\n+    native_handle_type \n+    native_handle()\n+    { return _M_thread_data->_M_thread_handle; }\n+\n+    // static members\n+    static unsigned hardware_concurrency();\n+\n+    __thread_data_ptr\n+    _M_get_thread_data() const\n+    {\n+      lock_guard<mutex> __l(_M_thread_data_mutex);\n+      return _M_thread_data;\n+    }\n+\n+  private:\n+    template<typename _Callable>\n+      __thread_data_ptr \n+      __make_thread_data(_Callable&& __f)\n+      { \n+\treturn __thread_data_ptr(\n+\t  new __thread_data<_Callable>(std::forward<_Callable>(__f)));\n+      }\n+    \n+    __thread_data_ptr\n+    __make_thread_data(void(*__f)())\n+    { return __thread_data_ptr(new __thread_data<void(*)()>(__f)); }\n+    \n+    void __start_thread();\n+\n+    __thread_data_ptr \t_M_thread_data;\n+    mutable mutex \t_M_thread_data_mutex;\n+  };\n+\n+  inline void\n+  swap(thread& __x, thread& __y)\n+  { __x.swap(__y); }\n+\n+  inline void\n+  swap(thread&& __x, thread& __y)\n+  { __x.swap(__y); }\n+  \n+  inline void\n+  swap(thread& __x, thread&& __y)\n+  { __x.swap(__y); }\n+\n+  namespace this_thread\n+  {\n+    thread::id\n+    get_id();\n+\n+    void\n+    yield();\n+\n+    template<typename _Clock, typename _Duration>\n+      void\n+      sleep_until(const chrono::time_point<_Clock, _Duration>& __atime)\n+      {\n+\tsleep_for(__atime - _Clock::now());\n+      }\n+\n+    template<typename _Rep, typename _Period>\n+      void\n+      sleep_for(const chrono::duration<_Rep, _Period>& __rtime)\n+      {\n+\tchrono::seconds __s =\n+\t  chrono::duration_cast<chrono::seconds>(__rtime);\n+\n+\tchrono::nanoseconds __ns =\n+\t  chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);\n+\n+\t__gthread_time_t __ts = \n+\t  {\n+\t    static_cast<std::time_t>(__s.count()),\n+\t    static_cast<long>(__ns.count())\n+\t  };\n+\n+#ifdef _GLIBCXX_USE_NANOSLEEP\n+\t::nanosleep(&__ts, 0);\n+#endif\n+      }\n+  }\n+\n+  /// thread::id\n+  class thread::id\n+  {\n+  public:\n+    id() : _M_thread_id() { }\n+\n+  private:\n+    friend class thread;\n+\n+    friend thread::id this_thread::get_id();\n+\n+    friend bool \n+    operator==(thread::id __x, thread::id __y)\n+    { \n+      return \n+\tstatic_cast<bool>(__gthread_equal(__x._M_thread_id, __y._M_thread_id));\n+    }\n+\n+    friend bool\n+    operator<(thread::id __x, thread::id __y)\n+    { return __x._M_thread_id < __y._M_thread_id; }\n+\n+    template<class _CharT, class _Traits>\n+      friend basic_ostream<_CharT, _Traits>&\n+      operator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id); \n+\n+    id(__gthread_t __id)\n+    : _M_thread_id(__id)\n+    { }\n+      \n+    __gthread_t _M_thread_id;\n+  };\n+\n+  inline bool\n+  operator!=(thread::id __x, thread::id __y)\n+  { return !(__x == __y); }\n+  \n+  inline bool\n+  operator<=(thread::id __x, thread::id __y)\n+  { return !(__y < __x); }\n+  \n+  inline bool\n+  operator>(thread::id __x, thread::id __y)\n+  { return __y < __x; }\n+  \n+  inline bool\n+  operator>=(thread::id __x, thread::id __y)\n+  { return !(__x < __y); }\n+  \n+  template<class _CharT, class _Traits>\n+    inline basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>&& __out, thread::id __id)\n+    {\n+      if(__id == thread::id())\n+\treturn __out << \"non-executing thread\";\n+      else\n+\treturn __out << __id._M_thread_id;\n+    }  \n+}\n+\n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n+#endif // _GLIBCXX_THREAD"}, {"sha": "4b086c6dc3407c31160d28f6d23e32ac1e2b3d27", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -187,6 +187,7 @@ sources = \\\n \tmutex.cc \\\n \tcondition_variable.cc \\\n \tchrono.cc \\\n+\tthread.cc \\\n \t${host_sources} \\\n \t${host_sources_extra} \n \n@@ -292,6 +293,11 @@ chrono.lo: chrono.cc\n chrono.o: chrono.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+thread.lo: thread.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+thread.o: thread.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n if GLIBCXX_LDBL_COMPAT\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64."}, {"sha": "50712547fe442951cc4924e85a9c7046f7367445", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -86,7 +86,7 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tostream-inst.cc sstream-inst.cc streambuf-inst.cc streambuf.cc \\\n \tstring-inst.cc valarray-inst.cc wlocale-inst.cc \\\n \twstring-inst.cc mutex.cc condition_variable.cc chrono.cc \\\n-\tatomicity.cc codecvt_members.cc collate_members.cc \\\n+\tthread.cc atomicity.cc codecvt_members.cc collate_members.cc \\\n \tctype_members.cc messages_members.cc monetary_members.cc \\\n \tnumeric_members.cc time_members.cc basic_file.cc c++locale.cc \\\n \tcompatibility-ldbl.cc parallel_list.cc parallel_settings.cc\n@@ -111,7 +111,7 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n \tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n \twstring-inst.lo mutex.lo condition_variable.lo chrono.lo \\\n-\t$(am__objects_1) $(am__objects_4)\n+\tthread.lo $(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -425,6 +425,7 @@ sources = \\\n \tmutex.cc \\\n \tcondition_variable.cc \\\n \tchrono.cc \\\n+\tthread.cc \\\n \t${host_sources} \\\n \t${host_sources_extra} \n \n@@ -889,6 +890,11 @@ chrono.lo: chrono.cc\n chrono.o: chrono.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+thread.lo: thread.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+thread.o: thread.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64.\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc"}, {"sha": "b869e07d6e0ed9a0401e25deee479ccc19bc68f6", "filename": "libstdc++-v3/src/thread.cc", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fthread.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,139 @@\n+// thread -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <bits/move.h> // std::move\n+\n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+\n+namespace std\n+{\n+  namespace \n+  {\n+    extern \"C\"\n+    {\n+      void* __thread_proxy(void* __p)\n+      {\n+\t__thread_data_base* __t = static_cast<__thread_data_base*>(__p);\n+\t__thread_data_ptr __local_thread_data = __t->_M_this_ptr;\n+\t__t->_M_this_ptr.reset();\n+\n+\ttry\n+\t  {\n+\t    __local_thread_data->__run();\n+\t  }\n+\tcatch(...)\n+\t  {\n+\t    std::terminate();\n+\t  }\n+\n+\treturn 0;\n+      }\n+    }\n+  }\n+\n+  thread::thread()\n+  { }\n+\n+  thread::~thread()\n+  {\n+    detach();\n+  }\n+\n+  thread::id\n+  thread::get_id() const\n+  {\n+    if(_M_thread_data)\n+      return thread::id(_M_thread_data->_M_thread_handle); \n+    else\n+      return thread::id();\n+  }\n+\n+  bool\n+  thread::joinable() const\n+  { return get_id() != id(); }\n+  \n+  void\n+  thread::join()\n+  {\n+    if(joinable())\n+      {\n+\tvoid* __r = 0;\n+\tint __e = __gthread_join(_M_thread_data->_M_thread_handle, &__r);\n+\tif(__e)\n+\t  __throw_system_error(__e);\n+\n+\tlock_guard<mutex> __lock(_M_thread_data_mutex);\n+\t_M_thread_data.reset();\n+      }\n+  }\n+\n+  void\n+  thread::detach()\n+  {    \n+    if(joinable())\n+      {\n+\tint __e = __gthread_detach(_M_thread_data->_M_thread_handle);\n+\tif(__e)\n+\t  __throw_system_error(__e);\n+\n+\tlock_guard<mutex> __lock(_M_thread_data_mutex);\n+\t_M_thread_data.reset();\n+      }\n+  }\n+\n+  void\n+  thread::swap(thread&& __t)\n+  {\n+    std::swap(_M_thread_data, __t._M_thread_data);\n+  }\n+\n+  void \n+  thread::__start_thread()\n+  {\n+    _M_thread_data->_M_this_ptr = _M_thread_data;\n+    int __e = __gthread_create(&_M_thread_data->_M_thread_handle, \n+\t\t\t       &__thread_proxy, _M_thread_data.get());\n+    if(__e)\n+      __throw_system_error(__e);\n+  }\n+\n+  namespace this_thread\n+  {\n+    thread::id\n+    get_id()\n+    { return thread::id(__gthread_self()); }\n+    \n+    void\n+    yield()\n+    { __gthread_yield(); }   \n+  }\n+}\n+\n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "9a4ff7262315e298e30f2f8b3d93c8e2f4910efb", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++200x/all.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -96,8 +96,8 @@\n #include <array>\n #include <bitset>\n #include <chrono>\n-#include <condition_variable>\n #include <complex>\n+#include <condition_variable>\n #include <deque>\n #include <exception>\n #include <fstream>\n@@ -128,6 +128,7 @@\n #include <streambuf>\n #include <string>\n #include <system_error>\n+#include <thread>\n #include <tuple>\n #include <typeinfo>\n #include <type_traits>"}, {"sha": "7402cf747fb7dbc8aa71f43ff0cdaeec0f3fa3f0", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_multiple_inclusion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_multiple_inclusion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_multiple_inclusion.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -95,6 +95,7 @@\n #include <bitset>\n #include <chrono>\n #include <complex>\n+#include <condition_variable>\n #include <deque>\n #include <exception>\n #include <fstream>\n@@ -110,6 +111,7 @@\n #include <locale>\n #include <map>\n #include <memory>\n+#include <mutex>\n #include <new>\n #include <numeric>\n #include <ostream>\n@@ -123,6 +125,7 @@\n #include <stdexcept>\n #include <streambuf>\n #include <string>\n+#include <thread>\n #include <tuple>\n #include <typeinfo>\n #include <type_traits>\n@@ -207,6 +210,7 @@\n #include <bitset>\n #include <chrono>\n #include <complex>\n+#include <condition_variable>\n #include <deque>\n #include <exception>\n #include <fstream>\n@@ -236,6 +240,7 @@\n #include <stdexcept>\n #include <streambuf>\n #include <string>\n+#include <thread>\n #include <tuple>\n #include <typeinfo>\n #include <type_traits>"}, {"sha": "a8abba38e3f335256b267991724123c1ec034198", "filename": "libstdc++-v3/testsuite/30_threads/headers/thread/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fthread%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fthread%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fthread%2Fstd_c%2B%2B0x_neg.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++98\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 }"}, {"sha": "cc69b1b0882e6bee3ae2294f9d9d73f5c26a9aaf", "filename": "libstdc++-v3/testsuite/30_threads/headers/thread/types_std_c++0x.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fthread%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fthread%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fthread%2Ftypes_std_c%2B%2B0x.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <thread>\n+\n+void test01()\n+{\n+  typedef std::thread t_t;\n+\n+  using namespace std::this_thread;\n+}"}, {"sha": "950ffb38bfe54c95ee6d38f3c9190887b4dcdc79", "filename": "libstdc++-v3/testsuite/30_threads/thread/algorithm/1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Falgorithm%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Falgorithm%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Falgorithm%2F1.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <bits/move.h> // std::move\n+#include <testsuite_hooks.h>\n+\n+void f() { }\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+\tstd::thread t1(f);\n+\tstd::thread::id t1_id = t1.get_id();\n+\t\n+\tstd::thread t2;\n+\tt2.swap(std::move(t1));\n+\t\n+\tVERIFY( t1.get_id() == std::thread::id() );\n+\tVERIFY( t2.get_id() == t1_id ); \n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "f587aac0cb4016c29584437b16d6ed4c38e2bd65", "filename": "libstdc++-v3/testsuite/30_threads/thread/algorithm/2.cc", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Falgorithm%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Falgorithm%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Falgorithm%2F2.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,115 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <bits/move.h> // std::move\n+#include <testsuite_hooks.h>\n+\n+void f() { }\n+\n+void test01()\n+{\n+  try\n+    {\n+      std::thread t1(f);\n+      std::thread::id t1_id = t1.get_id();\n+      \n+      std::thread t2;\n+      std::swap(t1, t2);\n+      \n+      VERIFY( t1.get_id() == std::thread::id() );\n+      VERIFY( t2.get_id() == t1_id );\n+    }\n+ catch (const std::system_error&)\n+   {\n+     VERIFY( false );\n+   }\n+ catch (...)\n+   {\n+     VERIFY( false );\n+   }  \n+}\n+\n+void test02()\n+{\n+  try\n+    {\n+      std::thread t1(f);\n+      std::thread::id t1_id = t1.get_id();\n+\n+      std::thread t2;\n+      std::swap(std::move(t1), t2);\n+\n+      VERIFY( t2.get_id() == t1_id );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+void test03()\n+{\n+  try\n+    {\n+      std::thread t1(f);\n+      std::thread::id t1_id = t1.get_id();\n+\n+      std::thread t2;\n+      std::swap(t2, std::move(t1));\n+\n+      VERIFY( t2.get_id() == t1_id );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "a631e7eabf8ea2fd4a7b28bc23da318e03a6f39a", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F1.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::thread t;\n+      VERIFY( !t.joinable() );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "e53b088449a10dee64cf2fa683344350ab9d20d1", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/2.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F2.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,74 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <utility> // std::ref\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+void\n+free_function(std::thread::id& id)\n+{\n+  id = std::this_thread::get_id();\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      std::thread::id t1_id1;\n+      std::thread t1(free_function, std::ref(t1_id1));\n+      std::thread::id t1_id2 = t1.get_id();\n+      VERIFY( t1.joinable() );\n+      t1.join();      \n+      VERIFY( !t1.joinable() );\n+      VERIFY( t1_id1 == t1_id2 );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "3df7ad050b97548da7ac8c8d9b74d951ea245d1e", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/3.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F3.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,98 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <functional> // std::unary_function\n+#include <utility> // std::ref\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+struct copyable : public std::unary_function<std::thread::id&, void>\n+{\n+  copyable() = default;\n+  ~copyable() = default;\n+  copyable(const copyable& c)\n+  { ++copy_count; }\n+\n+  void operator()(std::thread::id& id) const\n+  {\n+    id = std::this_thread::get_id();\n+  }\n+\n+  static int copy_count;\n+};\n+\n+int copyable::copy_count = 0;\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      std::thread::id t1_id1;\n+      copyable c1;\n+      std::thread t1(std::ref(c1), std::ref(t1_id1));\n+      std::thread::id t1_id2 = t1.get_id();\n+      VERIFY( t1.joinable() );\n+      t1.join();\n+      VERIFY( !t1.joinable() );\n+      VERIFY( t1_id1 == t1_id2 );\n+      VERIFY( copyable::copy_count == 0 );\n+\n+      std::thread::id t2_id1;\n+      copyable c2;\n+      std::thread t2(c2, std::ref(t2_id1));\n+      std::thread::id t2_id2 = t2.get_id();\n+      VERIFY( t2.joinable() );\n+      t2.join();\n+      VERIFY( !t2.joinable() );\n+      VERIFY( t2_id1 == t2_id2 );\n+      VERIFY( copyable::copy_count > 0 );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "76fc9ec3e452c08c2a8ea8faa089505ab70cd155", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/4.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F4.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,91 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <functional> // std::unary_function\n+#include <utility> // std::ref, std::cref\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+struct noncopyable : std::unary_function<std::thread::id&, void>\n+{\n+  noncopyable() = default;\n+  ~noncopyable() = default;\n+  noncopyable(const noncopyable&) = delete;\n+  noncopyable& operator=(const noncopyable&) = delete;\n+  void operator()(std::thread::id& id) const\n+  { \n+    id = std::this_thread::get_id();\n+  }\n+};\n+\n+void test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      std::thread::id t1_id1;\n+      noncopyable nc1;\n+      std::thread t1(std::ref(nc1), std::ref(t1_id1));\n+      std::thread::id t1_id2 = t1.get_id();\n+      VERIFY( t1.joinable() );\n+      t1.join();\n+      VERIFY( !t1.joinable() );\n+      VERIFY( t1_id1 == t1_id2 );\n+\n+      std::thread::id t2_id1;\n+      noncopyable nc2;\n+      std::thread t2(std::cref(nc2), std::ref(t2_id1));\n+      std::thread::id t2_id2 = t2.get_id();\n+      VERIFY( t2.joinable() );\n+      t2.join();\n+      VERIFY( !t2.joinable() );\n+      VERIFY( t2_id1 == t2_id2 );\n+    }\n+  catch(const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch(...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "a184cf10a2e3ad01f5c310b6ee3ae60ff3b9e919", "filename": "libstdc++-v3/testsuite/30_threads/thread/member/1.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F1.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,62 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+void f() { }\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+\tstd::thread t(f);\n+\tVERIFY( t.joinable() );\n+\tt.join();\n+\tVERIFY( !t.joinable() );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "f63313aa0cefdc45dc83cfdc3f41d7a9a3c98e8c", "filename": "libstdc++-v3/testsuite/30_threads/thread/member/2.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F2.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,62 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+void f() { }\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+\tstd::thread t(f);\n+\tVERIFY( t.joinable() );\n+\tt.detach();\n+\tVERIFY( !t.joinable() );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "cc52c329c3d743cf5d5bbee887320bc2b884ed86", "filename": "libstdc++-v3/testsuite/30_threads/thread/member/3.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fmember%2F3.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,62 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+void f() { }\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+\tstd::thread t(f);\n+\tVERIFY( t.get_id() != std::thread::id() );\n+\tt.join();\n+\tVERIFY( t.get_id() == std::thread::id() );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "c012ea923ff777874e05635dc1a8d710d6327ae2", "filename": "libstdc++-v3/testsuite/30_threads/thread/this_thread/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F1.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::thread::id id = std::this_thread::get_id();\n+      VERIFY( id != std::thread::id() );      \n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "cf60c2ccab220e3d0362c08328f8937a7598ab45", "filename": "libstdc++-v3/testsuite/30_threads/thread/this_thread/2.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F2.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::this_thread::yield();\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "335e41057fb16abc5420faaa1ab8fde764bf2ddb", "filename": "libstdc++-v3/testsuite/30_threads/thread/this_thread/3.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F3.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-nanosleep \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+namespace chr = std::chrono;\n+\n+void foo()\n+{\n+  chr::system_clock::time_point begin = chr::system_clock::now();\n+  chr::microseconds ms(500);\n+\n+  std::this_thread::sleep_for(ms);\n+  \n+  VERIFY( (chr::system_clock::now() - begin) >= ms );\n+}\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::thread t(foo);\n+      t.join();\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "3612779142f412f3ebdf56e881b20327f78f37b0", "filename": "libstdc++-v3/testsuite/30_threads/thread/this_thread/4.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fthis_thread%2F4.cc?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+// { dg-require-nanosleep \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <chrono>\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+namespace chr = std::chrono;\n+\n+void foo()\n+{\n+  chr::system_clock::time_point begin = chr::system_clock::now();\n+  chr::microseconds ms(500);\n+\n+  std::this_thread::sleep_until(chr::system_clock::now() + ms);\n+  \n+  VERIFY( (chr::system_clock::now() - begin) >= ms );\n+}\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::thread t(foo);\n+      t.join();\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "0f1bfcfe559fdc37c1358d69cfad8708956e0c4c", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -115,3 +115,12 @@ proc dg-require-gthreads { args } {\n     }\n     return\n }\n+\n+proc dg-require-nanosleep { args } {\n+    if { ![ check_v3_target_nanosleep ] } {\n+        upvar dg-do-what dg-do-what\n+        set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+        return\n+    }\n+    return\n+}"}, {"sha": "10eac6294b51e25b85726e29328f121d8c423117", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e113bf2b767b2f2d488c68b18416bd5672ae21/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=46e113bf2b767b2f2d488c68b18416bd5672ae21", "patch": "@@ -1178,3 +1178,61 @@ proc check_v3_target_gthreads { } {\n     verbose \"check_v3_target_gthreads: $et_gthreads\" 2\n     return $et_gthreads\n }\n+\n+proc check_v3_target_nanosleep { } {\n+    global cxxflags\n+    global DEFAULT_CXXFLAGS\n+    global et_nanosleep\n+\n+    global tool\n+\n+    if { ![info exists et_nanosleep_target_name] } {\n+        set et_nanosleep_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_nanosleep_target_name } {\n+        verbose \"check_v3_target_nanosleep: `$et_nanosleep_target_name'\" 2\n+        set et_nanosleep_target_name $current_target\n+        if [info exists et_nanosleep] {\n+            verbose \"check_v3_target_nanosleep: removing cached result\" 2\n+            unset et_nanosleep\n+        }\n+    }\n+\n+    if [info exists et_nanosleep] {\n+        verbose \"check_v3_target_nanosleep: using cached result\" 2\n+    } else {\n+        set et_nanosleep 0\n+\t\n+\t# Set up and compile a C++0x test program that depends\n+        # on the nanosleep facilities to be available.\n+        set src nanosleep[pid].cc\n+        set exe nanosleep[pid].exe\n+\n+        set f [open $src \"w\"]\n+        puts $f \"#include <bits/c++config.h>\"\n+        puts $f \"int main()\"\n+        puts $f \"#ifdef _GLIBCXX_USE_NANOSLEEP\"\n+        puts $f \"{ return 0; }\"\n+        puts $f \"#endif\"\n+        close $f\n+\n+        set cxxflags_saved $cxxflags\n+        set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\n+        set lines [v3_target_compile $src $exe executable \"\"]\n+        set cxxflags $cxxflags_saved\n+        file delete $src\n+\n+        if [string match \"\" $lines] {\n+            # No error message, compilation succeeded.\n+            set et_nanosleep 1\n+        } else {\n+            verbose \"check_v3_target_nanosleep: compilation failed\" 2\n+        }\n+    }\n+    verbose \"check_v3_target_nanosleep: $et_nanosleep\" 2\n+    return $et_nanosleep\n+}"}]}