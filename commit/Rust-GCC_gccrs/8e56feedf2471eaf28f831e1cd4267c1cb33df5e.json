{"sha": "8e56feedf2471eaf28f831e1cd4267c1cb33df5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU1NmZlZWRmMjQ3MWVhZjI4ZjgzMWUxY2Q0MjY3YzFjYjMzZGY1ZQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-05-23T23:01:28Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-05-23T23:01:28Z"}, "message": "Construct exception masks at compile time\ninstead of or'ing in bits at run time.\n\nFrom-SVN: r12085", "tree": {"sha": "4489e7ef4ce84b643b42af54968a7b8f20b6116c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4489e7ef4ce84b643b42af54968a7b8f20b6116c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e56feedf2471eaf28f831e1cd4267c1cb33df5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e56feedf2471eaf28f831e1cd4267c1cb33df5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e56feedf2471eaf28f831e1cd4267c1cb33df5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e56feedf2471eaf28f831e1cd4267c1cb33df5e/comments", "author": null, "committer": null, "parents": [{"sha": "118751b1c39d7347c1add600d9ba09ce28dc52d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118751b1c39d7347c1add600d9ba09ce28dc52d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/118751b1c39d7347c1add600d9ba09ce28dc52d8"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "e0eef090639df5a740eb54e279ef208d2eb2639d", "filename": "gcc/config/m68k/lb1sf68.asm", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e56feedf2471eaf28f831e1cd4267c1cb33df5e/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e56feedf2471eaf28f831e1cd4267c1cb33df5e/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm?ref=8e56feedf2471eaf28f831e1cd4267c1cb33df5e", "patch": "@@ -464,8 +464,7 @@ ROUND_TO_MINUS    = 3 | round result towards minus infinity\n Ld$den:\n | Return and signal a denormalized number\n \torl\td7,d0\n-\tmovew\tIMM (UNDERFLOW),d7\n-\torw\tIMM (INEXACT_RESULT),d7\n+\tmovew\tIMM (INEXACT_RESULT+UNDERFLOW),d7\n \tmovew\tIMM (DOUBLE_FLOAT),d6\n \tjmp\t$_exception_handler\n \n@@ -475,26 +474,23 @@ Ld$overflow:\n \tmovel\tIMM (0x7ff00000),d0\n \tmovel\tIMM (0),d1\n \torl\td7,d0\n-\tmovew\tIMM (OVERFLOW),d7\n-\torw\tIMM (INEXACT_RESULT),d7\n+\tmovew\tIMM (INEXACT_RESULT+OVERFLOW),d7\n \tmovew\tIMM (DOUBLE_FLOAT),d6\n \tjmp\t$_exception_handler\n \n Ld$underflow:\n | Return 0 and set the exception flags \n \tmovel\tIMM (0),d0\n \tmovel\td0,d1\n-\tmovew\tIMM (UNDERFLOW),d7\n-\torw\tIMM (INEXACT_RESULT),d7\n+\tmovew\tIMM (INEXACT_RESULT+UNDERFLOW),d7\n \tmovew\tIMM (DOUBLE_FLOAT),d6\n \tjmp\t$_exception_handler\n \n Ld$inop:\n | Return a quiet NaN and set the exception flags\n \tmovel\tIMM (QUIET_NaN),d0\n \tmovel\td0,d1\n-\tmovew\tIMM (INVALID_OPERATION),d7\n-\torw\tIMM (INEXACT_RESULT),d7\n+\tmovew\tIMM (INEXACT_RESULT+INVALID_OPERATION),d7\n \tmovew\tIMM (DOUBLE_FLOAT),d6\n \tjmp\t$_exception_handler\n \n@@ -503,8 +499,7 @@ Ld$div$0:\n \tmovel\tIMM (0x7ff00000),d0\n \tmovel\tIMM (0),d1\n \torl\td7,d0\n-\tmovew\tIMM (DIVIDE_BY_ZERO),d7\n-\torw\tIMM (INEXACT_RESULT),d7\n+\tmovew\tIMM (INEXACT_RESULT+DIVIDE_BY_ZERO),d7\n \tmovew\tIMM (DOUBLE_FLOAT),d6\n \tjmp\t$_exception_handler\n \n@@ -1719,8 +1714,7 @@ ROUND_TO_MINUS    = 3 | round result towards minus infinity\n Lf$den:\n | Return and signal a denormalized number\n \torl\td7,d0\n-\tmovew\tIMM (UNDERFLOW),d7\n-\torw\tIMM (INEXACT_RESULT),d7\n+\tmovew\tIMM (INEXACT_RESULT+UNDERFLOW),d7\n \tmovew\tIMM (SINGLE_FLOAT),d6\n \tjmp\t$_exception_handler\n \n@@ -1729,33 +1723,29 @@ Lf$overflow:\n | Return a properly signed INFINITY and set the exception flags \n \tmovel\tIMM (INFINITY),d0\n \torl\td7,d0\n-\tmovew\tIMM (OVERFLOW),d7\n-\torw\tIMM (INEXACT_RESULT),d7\n+\tmovew\tIMM (INEXACT_RESULT+OVERFLOW),d7\n \tmovew\tIMM (SINGLE_FLOAT),d6\n \tjmp\t$_exception_handler\n \n Lf$underflow:\n | Return 0 and set the exception flags \n \tmovel\tIMM (0),d0\n-\tmovew\tIMM (UNDERFLOW),d7\n-\torw\tIMM (INEXACT_RESULT),d7\n+\tmovew\tIMM (INEXACT_RESULT+UNDERFLOW),d7\n \tmovew\tIMM (SINGLE_FLOAT),d6\n \tjmp\t$_exception_handler\n \n Lf$inop:\n | Return a quiet NaN and set the exception flags\n \tmovel\tIMM (QUIET_NaN),d0\n-\tmovew\tIMM (INVALID_OPERATION),d7\n-\torw\tIMM (INEXACT_RESULT),d7\n+\tmovew\tIMM (INEXACT_RESULT+INVALID_OPERATION),d7\n \tmovew\tIMM (SINGLE_FLOAT),d6\n \tjmp\t$_exception_handler\n \n Lf$div$0:\n | Return a properly signed INFINITY and set the exception flags\n \tmovel\tIMM (INFINITY),d0\n \torl\td7,d0\n-\tmovew\tIMM (DIVIDE_BY_ZERO),d7\n-\torw\tIMM (INEXACT_RESULT),d7\n+\tmovew\tIMM (INEXACT_RESULT+DIVIDE_BY_ZERO),d7\n \tmovew\tIMM (SINGLE_FLOAT),d6\n \tjmp\t$_exception_handler\n "}]}