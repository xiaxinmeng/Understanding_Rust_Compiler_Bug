{"sha": "0975678f079e492fec38e1625c493579f4efa581", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk3NTY3OGYwNzllNDkyZmVjMzhlMTYyNWM0OTM1NzlmNGVmYTU4MQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2002-01-14T20:09:52Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2002-01-14T20:09:52Z"}, "message": "extend.texi: Move documentation of X86 built-in functions here.\n\n\t* doc/extend.texi: Move documentation of X86 built-in functions\n\there.\n\t* doc/invoke.texi: From here.\n\t* doc/sourcebuild.texi: Document location of documentation for\n\tmachine built-in functions.\n\nFrom-SVN: r48842", "tree": {"sha": "40de5738dfaa0e6dd55dc519a40978adc1cb453a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40de5738dfaa0e6dd55dc519a40978adc1cb453a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0975678f079e492fec38e1625c493579f4efa581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0975678f079e492fec38e1625c493579f4efa581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0975678f079e492fec38e1625c493579f4efa581", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0975678f079e492fec38e1625c493579f4efa581/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "969815c71e073e2d32b1ae48dea4bed89c51de65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969815c71e073e2d32b1ae48dea4bed89c51de65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/969815c71e073e2d32b1ae48dea4bed89c51de65"}], "stats": {"total": 474, "additions": 251, "deletions": 223}, "files": [{"sha": "20fe7a7c0dabfeda1f5b917ac2c8d0589f3e0216", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0975678f079e492fec38e1625c493579f4efa581/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0975678f079e492fec38e1625c493579f4efa581/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0975678f079e492fec38e1625c493579f4efa581", "patch": "@@ -1,3 +1,11 @@\n+2002-01-14  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/extend.texi: Move documentation of X86 built-in functions\n+\there.\n+\t* doc/invoke.texi: From here.\n+\t* doc/sourcebuild.texi: Document location of documentation for\n+\tmachine built-in functions.\n+\n 2002-01-13  Christopher Faylor  <cgf@redhat.com>\n \n \t* cppfiles.c (TEST_THRESHOLD): New macro."}, {"sha": "bf2948ba1924229a9755e109bfef483e06561a86", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 239, "deletions": 1, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0975678f079e492fec38e1625c493579f4efa581/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0975678f079e492fec38e1625c493579f4efa581/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0975678f079e492fec38e1625c493579f4efa581", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988,1989,1992,1993,1994,1996,1998,1999,2000,2001 Free Software Foundation, Inc.\n+@c Copyright (C) 1988,1989,1992,1993,1994,1996,1998,1999,2000,2001,2002 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -429,6 +429,7 @@ extensions, accepted by GCC in C89 mode and in C++.\n * Return Address::      Getting the return or frame address of a function.\n * Vector Extensions::   Using vector instructions through built-in functions.\n * Other Builtins::      Other built-in functions.\n+* Target Builtins::     Built-in functions specific to particular targets.\n * Pragmas::             Pragmas accepted by GCC.\n * Unnamed Fields::      Unnamed struct/union fields within structs/unions.\n @end menu\n@@ -4638,6 +4639,243 @@ is evaluated if it includes side effects but no other code is generated\n and GCC does not issue a warning.\n @end deftypefn\n \n+@node Target Builtins\n+@section Built-in Functions Specific to Particular Target Machines\n+\n+On some target machines, GCC supports many built-in functions specific\n+to those machines.  Generally these generate calls to specific machine\n+instructions, but allow the compiler to schedule those calls.\n+\n+@menu\n+* X86 Built-in Functions::\n+@end menu\n+\n+@node X86 Built-in Functions\n+@subsection X86 Built-in Functions\n+\n+These built-in functions are available for the i386 and x86-64 family\n+of computers, depending on the command-line switches used.\n+\n+The following machine modes are available for use with MMX built-in functions\n+(@pxref{Vector Extensions}): @code{V2SI} for a vector of two 32 bit integers,\n+@code{V4HI} for a vector of four 16 bit integers, and @code{V8QI} for a\n+vector of eight 8 bit integers.  Some of the built-in functions operate on\n+MMX registers as a whole 64 bit entity, these use @code{DI} as their mode.\n+\n+If 3Dnow extensions are enabled, @code{V2SF} is used as a mode for a vector\n+of two 32 bit floating point values.\n+\n+If SSE extensions are enabled, @code{V4SF} is used for a vector of four 32 bit\n+floating point values.  Some instructions use a vector of four 32 bit\n+integers, these use @code{V4SI}.  Finally, some instructions operate on an\n+entire vector register, interpreting it as a 128 bit integer, these use mode\n+@code{TI}.\n+\n+The following built-in functions are made available by @option{-mmmx}.\n+All of them generate the machine instruction that is part of the name.\n+\n+@example\n+v8qi __builtin_ia32_paddb (v8qi, v8qi)\n+v4hi __builtin_ia32_paddw (v4hi, v4hi)\n+v2si __builtin_ia32_paddd (v2si, v2si)\n+v8qi __builtin_ia32_psubb (v8qi, v8qi)\n+v4hi __builtin_ia32_psubw (v4hi, v4hi)\n+v2si __builtin_ia32_psubd (v2si, v2si)\n+v8qi __builtin_ia32_paddsb (v8qi, v8qi)\n+v4hi __builtin_ia32_paddsw (v4hi, v4hi)\n+v8qi __builtin_ia32_psubsb (v8qi, v8qi)\n+v4hi __builtin_ia32_psubsw (v4hi, v4hi)\n+v8qi __builtin_ia32_paddusb (v8qi, v8qi)\n+v4hi __builtin_ia32_paddusw (v4hi, v4hi)\n+v8qi __builtin_ia32_psubusb (v8qi, v8qi)\n+v4hi __builtin_ia32_psubusw (v4hi, v4hi)\n+v4hi __builtin_ia32_pmullw (v4hi, v4hi)\n+v4hi __builtin_ia32_pmulhw (v4hi, v4hi)\n+di __builtin_ia32_pand (di, di)\n+di __builtin_ia32_pandn (di,di)\n+di __builtin_ia32_por (di, di)\n+di __builtin_ia32_pxor (di, di)\n+v8qi __builtin_ia32_pcmpeqb (v8qi, v8qi)\n+v4hi __builtin_ia32_pcmpeqw (v4hi, v4hi)\n+v2si __builtin_ia32_pcmpeqd (v2si, v2si)\n+v8qi __builtin_ia32_pcmpgtb (v8qi, v8qi)\n+v4hi __builtin_ia32_pcmpgtw (v4hi, v4hi)\n+v2si __builtin_ia32_pcmpgtd (v2si, v2si)\n+v8qi __builtin_ia32_punpckhbw (v8qi, v8qi)\n+v4hi __builtin_ia32_punpckhwd (v4hi, v4hi)\n+v2si __builtin_ia32_punpckhdq (v2si, v2si)\n+v8qi __builtin_ia32_punpcklbw (v8qi, v8qi)\n+v4hi __builtin_ia32_punpcklwd (v4hi, v4hi)\n+v2si __builtin_ia32_punpckldq (v2si, v2si)\n+v8qi __builtin_ia32_packsswb (v4hi, v4hi)\n+v4hi __builtin_ia32_packssdw (v2si, v2si)\n+v8qi __builtin_ia32_packuswb (v4hi, v4hi)\n+@end example\n+\n+The following built-in functions are made available either with\n+@option{-msse}, or with a combination of @option{-m3dnow} and\n+@option{-march=athlon}.  All of them generate the machine\n+instruction that is part of the name.\n+\n+@example\n+v4hi __builtin_ia32_pmulhuw (v4hi, v4hi)\n+v8qi __builtin_ia32_pavgb (v8qi, v8qi)\n+v4hi __builtin_ia32_pavgw (v4hi, v4hi)\n+v4hi __builtin_ia32_psadbw (v8qi, v8qi)\n+v8qi __builtin_ia32_pmaxub (v8qi, v8qi)\n+v4hi __builtin_ia32_pmaxsw (v4hi, v4hi)\n+v8qi __builtin_ia32_pminub (v8qi, v8qi)\n+v4hi __builtin_ia32_pminsw (v4hi, v4hi)\n+int __builtin_ia32_pextrw (v4hi, int)\n+v4hi __builtin_ia32_pinsrw (v4hi, int, int)\n+int __builtin_ia32_pmovmskb (v8qi)\n+void __builtin_ia32_maskmovq (v8qi, v8qi, char *)\n+void __builtin_ia32_movntq (di *, di)\n+void __builtin_ia32_sfence (void)\n+@end example\n+\n+The following built-in functions are available when @option{-msse} is used.\n+All of them generate the machine instruction that is part of the name.\n+\n+@example\n+int __builtin_ia32_comieq (v4sf, v4sf)\n+int __builtin_ia32_comineq (v4sf, v4sf)\n+int __builtin_ia32_comilt (v4sf, v4sf)\n+int __builtin_ia32_comile (v4sf, v4sf)\n+int __builtin_ia32_comigt (v4sf, v4sf)\n+int __builtin_ia32_comige (v4sf, v4sf)\n+int __builtin_ia32_ucomieq (v4sf, v4sf)\n+int __builtin_ia32_ucomineq (v4sf, v4sf)\n+int __builtin_ia32_ucomilt (v4sf, v4sf)\n+int __builtin_ia32_ucomile (v4sf, v4sf)\n+int __builtin_ia32_ucomigt (v4sf, v4sf)\n+int __builtin_ia32_ucomige (v4sf, v4sf)\n+v4sf __builtin_ia32_addps (v4sf, v4sf)\n+v4sf __builtin_ia32_subps (v4sf, v4sf)\n+v4sf __builtin_ia32_mulps (v4sf, v4sf)\n+v4sf __builtin_ia32_divps (v4sf, v4sf)\n+v4sf __builtin_ia32_addss (v4sf, v4sf)\n+v4sf __builtin_ia32_subss (v4sf, v4sf)\n+v4sf __builtin_ia32_mulss (v4sf, v4sf)\n+v4sf __builtin_ia32_divss (v4sf, v4sf)\n+v4si __builtin_ia32_cmpeqps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpltps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpleps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpgtps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpgeps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpunordps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpneqps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpnltps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpnleps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpngtps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpngeps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpordps (v4sf, v4sf)\n+v4si __builtin_ia32_cmpeqss (v4sf, v4sf)\n+v4si __builtin_ia32_cmpltss (v4sf, v4sf)\n+v4si __builtin_ia32_cmpless (v4sf, v4sf)\n+v4si __builtin_ia32_cmpgtss (v4sf, v4sf)\n+v4si __builtin_ia32_cmpgess (v4sf, v4sf)\n+v4si __builtin_ia32_cmpunordss (v4sf, v4sf)\n+v4si __builtin_ia32_cmpneqss (v4sf, v4sf)\n+v4si __builtin_ia32_cmpnlts (v4sf, v4sf)\n+v4si __builtin_ia32_cmpnless (v4sf, v4sf)\n+v4si __builtin_ia32_cmpngtss (v4sf, v4sf)\n+v4si __builtin_ia32_cmpngess (v4sf, v4sf)\n+v4si __builtin_ia32_cmpordss (v4sf, v4sf)\n+v4sf __builtin_ia32_maxps (v4sf, v4sf)\n+v4sf __builtin_ia32_maxss (v4sf, v4sf)\n+v4sf __builtin_ia32_minps (v4sf, v4sf)\n+v4sf __builtin_ia32_minss (v4sf, v4sf)\n+v4sf __builtin_ia32_andps (v4sf, v4sf)\n+v4sf __builtin_ia32_andnps (v4sf, v4sf)\n+v4sf __builtin_ia32_orps (v4sf, v4sf)\n+v4sf __builtin_ia32_xorps (v4sf, v4sf)\n+v4sf __builtin_ia32_movss (v4sf, v4sf)\n+v4sf __builtin_ia32_movhlps (v4sf, v4sf)\n+v4sf __builtin_ia32_movlhps (v4sf, v4sf)\n+v4sf __builtin_ia32_unpckhps (v4sf, v4sf)\n+v4sf __builtin_ia32_unpcklps (v4sf, v4sf)\n+v4sf __builtin_ia32_cvtpi2ps (v4sf, v2si)\n+v4sf __builtin_ia32_cvtsi2ss (v4sf, int)\n+v2si __builtin_ia32_cvtps2pi (v4sf)\n+int __builtin_ia32_cvtss2si (v4sf)\n+v2si __builtin_ia32_cvttps2pi (v4sf)\n+int __builtin_ia32_cvttss2si (v4sf)\n+v4sf __builtin_ia32_rcpps (v4sf)\n+v4sf __builtin_ia32_rsqrtps (v4sf)\n+v4sf __builtin_ia32_sqrtps (v4sf)\n+v4sf __builtin_ia32_rcpss (v4sf)\n+v4sf __builtin_ia32_rsqrtss (v4sf)\n+v4sf __builtin_ia32_sqrtss (v4sf)\n+v4sf __builtin_ia32_shufps (v4sf, v4sf, int)\n+void __builtin_ia32_movntps (float *, v4sf)\n+int __builtin_ia32_movmskps (v4sf)\n+@end example\n+\n+The following built-in functions are available when @option{-msse} is used.\n+\n+@table @code\n+@item v4sf __builtin_ia32_loadaps (float *)\n+Generates the @code{movaps} machine instruction as a load from memory.\n+@item void __builtin_ia32_storeaps (float *, v4sf)\n+Generates the @code{movaps} machine instruction as a store to memory.\n+@item v4sf __builtin_ia32_loadups (float *)\n+Generates the @code{movups} machine instruction as a load from memory.\n+@item void __builtin_ia32_storeups (float *, v4sf)\n+Generates the @code{movups} machine instruction as a store to memory.\n+@item v4sf __builtin_ia32_loadsss (float *)\n+Generates the @code{movss} machine instruction as a load from memory.\n+@item void __builtin_ia32_storess (float *, v4sf)\n+Generates the @code{movss} machine instruction as a store to memory.\n+@item v4sf __builtin_ia32_loadhps (v4sf, v2si *)\n+Generates the @code{movhps} machine instruction as a load from memory.\n+@item v4sf __builtin_ia32_loadlps (v4sf, v2si *)\n+Generates the @code{movlps} machine instruction as a load from memory\n+@item void __builtin_ia32_storehps (v4sf, v2si *)\n+Generates the @code{movhps} machine instruction as a store to memory.\n+@item void __builtin_ia32_storelps (v4sf, v2si *)\n+Generates the @code{movlps} machine instruction as a store to memory.\n+@end table\n+\n+The following built-in functions are available when @option{-m3dnow} is used.\n+All of them generate the machine instruction that is part of the name.\n+\n+@example\n+void __builtin_ia32_femms (void)\n+v8qi __builtin_ia32_pavgusb (v8qi, v8qi)\n+v2si __builtin_ia32_pf2id (v2sf)\n+v2sf __builtin_ia32_pfacc (v2sf, v2sf)\n+v2sf __builtin_ia32_pfadd (v2sf, v2sf)\n+v2si __builtin_ia32_pfcmpeq (v2sf, v2sf)\n+v2si __builtin_ia32_pfcmpge (v2sf, v2sf)\n+v2si __builtin_ia32_pfcmpgt (v2sf, v2sf)\n+v2sf __builtin_ia32_pfmax (v2sf, v2sf)\n+v2sf __builtin_ia32_pfmin (v2sf, v2sf)\n+v2sf __builtin_ia32_pfmul (v2sf, v2sf)\n+v2sf __builtin_ia32_pfrcp (v2sf)\n+v2sf __builtin_ia32_pfrcpit1 (v2sf, v2sf)\n+v2sf __builtin_ia32_pfrcpit2 (v2sf, v2sf)\n+v2sf __builtin_ia32_pfrsqrt (v2sf)\n+v2sf __builtin_ia32_pfrsqrtit1 (v2sf, v2sf)\n+v2sf __builtin_ia32_pfsub (v2sf, v2sf)\n+v2sf __builtin_ia32_pfsubr (v2sf, v2sf)\n+v2sf __builtin_ia32_pi2fd (v2si)\n+v4hi __builtin_ia32_pmulhrw (v4hi, v4hi)\n+@end example\n+\n+The following built-in functions are available when both @option{-m3dnow}\n+and @option{-march=athlon} are used.  All of them generate the machine\n+instruction that is part of the name.\n+\n+@example\n+v2si __builtin_ia32_pf2iw (v2sf)\n+v2sf __builtin_ia32_pfnacc (v2sf, v2sf)\n+v2sf __builtin_ia32_pfpnacc (v2sf, v2sf)\n+v2sf __builtin_ia32_pi2fw (v2si)\n+v2sf __builtin_ia32_pswapdsf (v2sf)\n+v2si __builtin_ia32_pswapdsi (v2si)\n+@end example\n+\n @node Pragmas\n @section Pragmas Accepted by GCC\n @cindex pragmas"}, {"sha": "ef990b0c1c760a71792e953582aa74008d080422", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 219, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0975678f079e492fec38e1625c493579f4efa581/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0975678f079e492fec38e1625c493579f4efa581/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=0975678f079e492fec38e1625c493579f4efa581", "patch": "@@ -7735,225 +7735,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n These switches enable or disable the use of built-in functions that allow\n direct access to the MMX, SSE and 3Dnow extensions of the instruction set.\n \n-The following machine modes are available for use with MMX built-in functions\n-(@pxref{Vector Extensions}): @code{V2SI} for a vector of two 32 bit integers,\n-@code{V4HI} for a vector of four 16 bit integers, and @code{V8QI} for a\n-vector of eight 8 bit integers.  Some of the built-in functions operate on\n-MMX registers as a whole 64 bit entity, these use @code{DI} as their mode.\n-\n-If 3Dnow extensions are enabled, @code{V2SF} is used as a mode for a vector\n-of two 32 bit floating point values.\n-\n-If SSE extensions are enabled, @code{V4SF} is used for a vector of four 32 bit\n-floating point values.  Some instructions use a vector of four 32 bit\n-integers, these use @code{V4SI}.  Finally, some instructions operate on an\n-entire vector register, interpreting it as a 128 bit integer, these use mode\n-@code{TI}.\n-\n-The following built-in functions are made available by @option{-mmmx}.\n-All of them generate the machine instruction that is part of the name.\n-\n-@example\n-v8qi __builtin_ia32_paddb (v8qi, v8qi)\n-v4hi __builtin_ia32_paddw (v4hi, v4hi)\n-v2si __builtin_ia32_paddd (v2si, v2si)\n-v8qi __builtin_ia32_psubb (v8qi, v8qi)\n-v4hi __builtin_ia32_psubw (v4hi, v4hi)\n-v2si __builtin_ia32_psubd (v2si, v2si)\n-v8qi __builtin_ia32_paddsb (v8qi, v8qi)\n-v4hi __builtin_ia32_paddsw (v4hi, v4hi)\n-v8qi __builtin_ia32_psubsb (v8qi, v8qi)\n-v4hi __builtin_ia32_psubsw (v4hi, v4hi)\n-v8qi __builtin_ia32_paddusb (v8qi, v8qi)\n-v4hi __builtin_ia32_paddusw (v4hi, v4hi)\n-v8qi __builtin_ia32_psubusb (v8qi, v8qi)\n-v4hi __builtin_ia32_psubusw (v4hi, v4hi)\n-v4hi __builtin_ia32_pmullw (v4hi, v4hi)\n-v4hi __builtin_ia32_pmulhw (v4hi, v4hi)\n-di __builtin_ia32_pand (di, di)\n-di __builtin_ia32_pandn (di,di)\n-di __builtin_ia32_por (di, di)\n-di __builtin_ia32_pxor (di, di)\n-v8qi __builtin_ia32_pcmpeqb (v8qi, v8qi)\n-v4hi __builtin_ia32_pcmpeqw (v4hi, v4hi)\n-v2si __builtin_ia32_pcmpeqd (v2si, v2si)\n-v8qi __builtin_ia32_pcmpgtb (v8qi, v8qi)\n-v4hi __builtin_ia32_pcmpgtw (v4hi, v4hi)\n-v2si __builtin_ia32_pcmpgtd (v2si, v2si)\n-v8qi __builtin_ia32_punpckhbw (v8qi, v8qi)\n-v4hi __builtin_ia32_punpckhwd (v4hi, v4hi)\n-v2si __builtin_ia32_punpckhdq (v2si, v2si)\n-v8qi __builtin_ia32_punpcklbw (v8qi, v8qi)\n-v4hi __builtin_ia32_punpcklwd (v4hi, v4hi)\n-v2si __builtin_ia32_punpckldq (v2si, v2si)\n-v8qi __builtin_ia32_packsswb (v4hi, v4hi)\n-v4hi __builtin_ia32_packssdw (v2si, v2si)\n-v8qi __builtin_ia32_packuswb (v4hi, v4hi)\n-@end example\n-\n-The following built-in functions are made available either with\n-@option{-msse}, or with a combination of @option{-m3dnow} and\n-@option{-march=athlon}.  All of them generate the machine\n-instruction that is part of the name.\n-\n-@example\n-v4hi __builtin_ia32_pmulhuw (v4hi, v4hi)\n-v8qi __builtin_ia32_pavgb (v8qi, v8qi)\n-v4hi __builtin_ia32_pavgw (v4hi, v4hi)\n-v4hi __builtin_ia32_psadbw (v8qi, v8qi)\n-v8qi __builtin_ia32_pmaxub (v8qi, v8qi)\n-v4hi __builtin_ia32_pmaxsw (v4hi, v4hi)\n-v8qi __builtin_ia32_pminub (v8qi, v8qi)\n-v4hi __builtin_ia32_pminsw (v4hi, v4hi)\n-int __builtin_ia32_pextrw (v4hi, int)\n-v4hi __builtin_ia32_pinsrw (v4hi, int, int)\n-int __builtin_ia32_pmovmskb (v8qi)\n-void __builtin_ia32_maskmovq (v8qi, v8qi, char *)\n-void __builtin_ia32_movntq (di *, di)\n-void __builtin_ia32_sfence (void)\n-@end example\n-\n-The following built-in functions are available when @option{-msse} is used.\n-All of them generate the machine instruction that is part of the name.\n-\n-@example\n-int __builtin_ia32_comieq (v4sf, v4sf)\n-int __builtin_ia32_comineq (v4sf, v4sf)\n-int __builtin_ia32_comilt (v4sf, v4sf)\n-int __builtin_ia32_comile (v4sf, v4sf)\n-int __builtin_ia32_comigt (v4sf, v4sf)\n-int __builtin_ia32_comige (v4sf, v4sf)\n-int __builtin_ia32_ucomieq (v4sf, v4sf)\n-int __builtin_ia32_ucomineq (v4sf, v4sf)\n-int __builtin_ia32_ucomilt (v4sf, v4sf)\n-int __builtin_ia32_ucomile (v4sf, v4sf)\n-int __builtin_ia32_ucomigt (v4sf, v4sf)\n-int __builtin_ia32_ucomige (v4sf, v4sf)\n-v4sf __builtin_ia32_addps (v4sf, v4sf)\n-v4sf __builtin_ia32_subps (v4sf, v4sf)\n-v4sf __builtin_ia32_mulps (v4sf, v4sf)\n-v4sf __builtin_ia32_divps (v4sf, v4sf)\n-v4sf __builtin_ia32_addss (v4sf, v4sf)\n-v4sf __builtin_ia32_subss (v4sf, v4sf)\n-v4sf __builtin_ia32_mulss (v4sf, v4sf)\n-v4sf __builtin_ia32_divss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpeqps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpltps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpleps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpgtps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpgeps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpunordps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpneqps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpnltps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpnleps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpngtps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpngeps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpordps (v4sf, v4sf)\n-v4si __builtin_ia32_cmpeqss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpltss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpless (v4sf, v4sf)\n-v4si __builtin_ia32_cmpgtss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpgess (v4sf, v4sf)\n-v4si __builtin_ia32_cmpunordss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpneqss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpnlts (v4sf, v4sf)\n-v4si __builtin_ia32_cmpnless (v4sf, v4sf)\n-v4si __builtin_ia32_cmpngtss (v4sf, v4sf)\n-v4si __builtin_ia32_cmpngess (v4sf, v4sf)\n-v4si __builtin_ia32_cmpordss (v4sf, v4sf)\n-v4sf __builtin_ia32_maxps (v4sf, v4sf)\n-v4sf __builtin_ia32_maxss (v4sf, v4sf)\n-v4sf __builtin_ia32_minps (v4sf, v4sf)\n-v4sf __builtin_ia32_minss (v4sf, v4sf)\n-v4sf __builtin_ia32_andps (v4sf, v4sf)\n-v4sf __builtin_ia32_andnps (v4sf, v4sf)\n-v4sf __builtin_ia32_orps (v4sf, v4sf)\n-v4sf __builtin_ia32_xorps (v4sf, v4sf)\n-v4sf __builtin_ia32_movss (v4sf, v4sf)\n-v4sf __builtin_ia32_movhlps (v4sf, v4sf)\n-v4sf __builtin_ia32_movlhps (v4sf, v4sf)\n-v4sf __builtin_ia32_unpckhps (v4sf, v4sf)\n-v4sf __builtin_ia32_unpcklps (v4sf, v4sf)\n-v4sf __builtin_ia32_cvtpi2ps (v4sf, v2si)\n-v4sf __builtin_ia32_cvtsi2ss (v4sf, int)\n-v2si __builtin_ia32_cvtps2pi (v4sf)\n-int __builtin_ia32_cvtss2si (v4sf)\n-v2si __builtin_ia32_cvttps2pi (v4sf)\n-int __builtin_ia32_cvttss2si (v4sf)\n-v4sf __builtin_ia32_rcpps (v4sf)\n-v4sf __builtin_ia32_rsqrtps (v4sf)\n-v4sf __builtin_ia32_sqrtps (v4sf)\n-v4sf __builtin_ia32_rcpss (v4sf)\n-v4sf __builtin_ia32_rsqrtss (v4sf)\n-v4sf __builtin_ia32_sqrtss (v4sf)\n-v4sf __builtin_ia32_shufps (v4sf, v4sf, int)\n-void __builtin_ia32_movntps (float *, v4sf)\n-int __builtin_ia32_movmskps (v4sf)\n-@end example\n-\n-The following built-in functions are available when @option{-msse} is used.\n-\n-@table @code\n-@item v4sf __builtin_ia32_loadaps (float *)\n-Generates the @code{movaps} machine instruction as a load from memory.\n-@item void __builtin_ia32_storeaps (float *, v4sf)\n-Generates the @code{movaps} machine instruction as a store to memory.\n-@item v4sf __builtin_ia32_loadups (float *)\n-Generates the @code{movups} machine instruction as a load from memory.\n-@item void __builtin_ia32_storeups (float *, v4sf)\n-Generates the @code{movups} machine instruction as a store to memory.\n-@item v4sf __builtin_ia32_loadsss (float *)\n-Generates the @code{movss} machine instruction as a load from memory.\n-@item void __builtin_ia32_storess (float *, v4sf)\n-Generates the @code{movss} machine instruction as a store to memory.\n-@item v4sf __builtin_ia32_loadhps (v4sf, v2si *)\n-Generates the @code{movhps} machine instruction as a load from memory.\n-@item v4sf __builtin_ia32_loadlps (v4sf, v2si *)\n-Generates the @code{movlps} machine instruction as a load from memory\n-@item void __builtin_ia32_storehps (v4sf, v2si *)\n-Generates the @code{movhps} machine instruction as a store to memory.\n-@item void __builtin_ia32_storelps (v4sf, v2si *)\n-Generates the @code{movlps} machine instruction as a store to memory.\n-@end table\n-\n-The following built-in functions are available when @option{-m3dnow} is used.\n-All of them generate the machine instruction that is part of the name.\n-\n-@example\n-void __builtin_ia32_femms (void)\n-v8qi __builtin_ia32_pavgusb (v8qi, v8qi)\n-v2si __builtin_ia32_pf2id (v2sf)\n-v2sf __builtin_ia32_pfacc (v2sf, v2sf)\n-v2sf __builtin_ia32_pfadd (v2sf, v2sf)\n-v2si __builtin_ia32_pfcmpeq (v2sf, v2sf)\n-v2si __builtin_ia32_pfcmpge (v2sf, v2sf)\n-v2si __builtin_ia32_pfcmpgt (v2sf, v2sf)\n-v2sf __builtin_ia32_pfmax (v2sf, v2sf)\n-v2sf __builtin_ia32_pfmin (v2sf, v2sf)\n-v2sf __builtin_ia32_pfmul (v2sf, v2sf)\n-v2sf __builtin_ia32_pfrcp (v2sf)\n-v2sf __builtin_ia32_pfrcpit1 (v2sf, v2sf)\n-v2sf __builtin_ia32_pfrcpit2 (v2sf, v2sf)\n-v2sf __builtin_ia32_pfrsqrt (v2sf)\n-v2sf __builtin_ia32_pfrsqrtit1 (v2sf, v2sf)\n-v2sf __builtin_ia32_pfsub (v2sf, v2sf)\n-v2sf __builtin_ia32_pfsubr (v2sf, v2sf)\n-v2sf __builtin_ia32_pi2fd (v2si)\n-v4hi __builtin_ia32_pmulhrw (v4hi, v4hi)\n-@end example\n-\n-The following built-in functions are available when both @option{-m3dnow}\n-and @option{-march=athlon} are used.  All of them generate the machine\n-instruction that is part of the name.\n-\n-@example\n-v2si __builtin_ia32_pf2iw (v2sf)\n-v2sf __builtin_ia32_pfnacc (v2sf, v2sf)\n-v2sf __builtin_ia32_pfpnacc (v2sf, v2sf)\n-v2sf __builtin_ia32_pi2fw (v2si)\n-v2sf __builtin_ia32_pswapdsf (v2sf)\n-v2si __builtin_ia32_pswapdsi (v2si)\n-@end example\n+@xref{X86 Built-in Functions}, for details of the functions enabled\n+and disabled by these switches.\n \n @item -mpush-args\n @itemx -mno-push-args"}, {"sha": "d073a1b984b3b91ed7877ee46cf51f0d5d4a3f31", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0975678f079e492fec38e1625c493579f4efa581/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0975678f079e492fec38e1625c493579f4efa581/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=0975678f079e492fec38e1625c493579f4efa581", "patch": "@@ -692,9 +692,8 @@ enumerated in the manual.\n Documentation in @file{gcc/doc/extend.texi} for any target-specific\n pragmas supported.\n @item\n-Documentation of any target-specific built-in functions supported.\n-FIXME: where should this documentation be?  For MMX built-in functions\n-it is currently in @file{gcc/doc/invoke.texi}.\n+Documentation in @file{gcc/doc/extend.texi} of any target-specific\n+built-in functions supported.\n @item\n Documentation in @file{gcc/doc/md.texi} of any target-specific\n constraint letters (@pxref{Machine Constraints, , Constraints for"}]}