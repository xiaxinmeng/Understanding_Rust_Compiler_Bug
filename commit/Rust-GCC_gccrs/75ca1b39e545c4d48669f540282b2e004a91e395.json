{"sha": "75ca1b39e545c4d48669f540282b2e004a91e395", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjYTFiMzllNTQ1YzRkNDg2NjlmNTQwMjgyYjJlMDA0YTkxZTM5NQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-12-20T18:04:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-12-20T18:04:41Z"}, "message": "s390: Constraints, predicates, and op letters for contiguous bitmasks\n\n        * config/s390/constraints.md (NxxDq, NxxSq): New.\n        * config/s390/predicates.md (contiguous_bitmask_operand): New.\n        * config/s390/s390.c (print_operand) ['e', 'f', 's', 't']: New\n        operand letters.\n        * config/s390/s390.md (bfstart, bfend): New mode attrs.\n        (*insv<GPR>_zEC12_noshift): Use them.\n        (*insv<GPR>_z10_noshift): Likewise.\n        (*insv<GPR>_or_z10_noshift): Likewise.\n\nCo-Authored-By: Andreas Krebbel <Andreas.Krebbel@de.ibm.com>\n\nFrom-SVN: r194640", "tree": {"sha": "cc7a0724b4d6f5f4a3e6acde62660e3da29e0907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc7a0724b4d6f5f4a3e6acde62660e3da29e0907"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75ca1b39e545c4d48669f540282b2e004a91e395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ca1b39e545c4d48669f540282b2e004a91e395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ca1b39e545c4d48669f540282b2e004a91e395", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ca1b39e545c4d48669f540282b2e004a91e395/comments", "author": null, "committer": null, "parents": [{"sha": "00155043771e975120a8dd43be6daa81727a8c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00155043771e975120a8dd43be6daa81727a8c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00155043771e975120a8dd43be6daa81727a8c31"}], "stats": {"total": 195, "additions": 106, "deletions": 89}, "files": [{"sha": "e4aeb8996fd9f50e39971f5c923beb6ec78ffbd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ca1b39e545c4d48669f540282b2e004a91e395/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ca1b39e545c4d48669f540282b2e004a91e395/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75ca1b39e545c4d48669f540282b2e004a91e395", "patch": "@@ -1,3 +1,15 @@\n+2012-12-20  Richard Henderson  <rth@redhat.com>\n+\t    Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/constraints.md (NxxDq, NxxSq): New.\n+\t* config/s390/predicates.md (contiguous_bitmask_operand): New.\n+\t* config/s390/s390.c (print_operand) ['e', 'f', 's', 't']: New\n+\toperand letters.\n+\t* config/s390/s390.md (bfstart, bfend): New mode attrs.\n+\t(*insv<GPR>_zEC12_noshift): Use them.\n+\t(*insv<GPR>_z10_noshift): Likewise.\n+\t(*insv<GPR>_or_z10_noshift): Likewise.\n+\n 2012-12-20  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR bootstrap/55202"}, {"sha": "9d416adb16561aba7a7b611661fac36115227d0d", "filename": "gcc/config/s390/constraints.md", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ca1b39e545c4d48669f540282b2e004a91e395/gcc%2Fconfig%2Fs390%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ca1b39e545c4d48669f540282b2e004a91e395/gcc%2Fconfig%2Fs390%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fconstraints.md?ref=75ca1b39e545c4d48669f540282b2e004a91e395", "patch": "@@ -45,6 +45,8 @@\n ;;         H,Q:     mode of the part\n ;;         D,S,H:   mode of the containing operand\n ;;         0,F:     value of the other parts (F - all bits set)\n+;;         --\n+;;         xx[DS]q  satisfies s390_contiguous_bitmask_p for DImode or SImode\n ;;\n ;;         The constraint matches if the specified part of a constant\n ;;         has a value different from its other parts.  If the letter x\n@@ -330,8 +332,15 @@\n   (and (match_code \"const_int\")\n        (match_test \"s390_N_constraint_str (\\\"xQH0\\\", ival)\")))\n \n+(define_constraint \"NxxDq\"\n+  \"@internal\"\n+  (and (match_code \"const_int\")\n+       (match_test \"s390_contiguous_bitmask_p (ival, 64, NULL, NULL)\")))\n \n-\n+(define_constraint \"NxxSq\"\n+  \"@internal\"\n+  (and (match_code \"const_int\")\n+       (match_test \"s390_contiguous_bitmask_p (ival, 32, NULL, NULL)\")))\n \n ;;\n ;; Double-letter constraints starting with O follow."}, {"sha": "b9524ecc664545a989c25372c86394e72e11c6b3", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ca1b39e545c4d48669f540282b2e004a91e395/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ca1b39e545c4d48669f540282b2e004a91e395/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=75ca1b39e545c4d48669f540282b2e004a91e395", "patch": "@@ -154,6 +154,12 @@\n   return false;\n })\n \n+(define_predicate \"contiguous_bitmask_operand\"\n+  (match_code \"const_int\")\n+{\n+  return s390_contiguous_bitmask_p (INTVAL (op), GET_MODE_BITSIZE (mode), NULL, NULL);\n+})\n+\n ;; operators --------------------------------------------------------------\n \n ;; Return nonzero if OP is a valid comparison operator"}, {"sha": "d38ba7f79fb804b96e4f30b823e2c7170ca2d11b", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 63, "deletions": 29, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ca1b39e545c4d48669f540282b2e004a91e395/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ca1b39e545c4d48669f540282b2e004a91e395/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=75ca1b39e545c4d48669f540282b2e004a91e395", "patch": "@@ -5368,28 +5368,35 @@ print_operand_address (FILE *file, rtx addr)\n     'C': print opcode suffix for branch condition.\n     'D': print opcode suffix for inverse branch condition.\n     'E': print opcode suffix for branch on index instruction.\n-    'J': print tls_load/tls_gdcall/tls_ldcall suffix\n     'G': print the size of the operand in bytes.\n+    'J': print tls_load/tls_gdcall/tls_ldcall suffix\n+    'M': print the second word of a TImode operand.\n+    'N': print the second word of a DImode operand.\n     'O': print only the displacement of a memory reference.\n     'R': print only the base register of a memory reference.\n     'S': print S-type memory reference (base+displacement).\n-    'N': print the second word of a DImode operand.\n-    'M': print the second word of a TImode operand.\n     'Y': print shift count operand.\n \n     'b': print integer X as if it's an unsigned byte.\n     'c': print integer X as if it's an signed byte.\n-    'x': print integer X as if it's an unsigned halfword.\n+    'e': \"end\" of DImode contiguous bitmask X.\n+    'f': \"end\" of SImode contiguous bitmask X.\n     'h': print integer X as if it's a signed halfword.\n     'i': print the first nonzero HImode part of X.\n     'j': print the first HImode part unequal to -1 of X.\n     'k': print the first nonzero SImode part of X.\n     'm': print the first SImode part unequal to -1 of X.\n-    'o': print integer X as if it's an unsigned 32bit word.  */\n+    'o': print integer X as if it's an unsigned 32bit word.\n+    's': \"start\" of DImode contiguous bitmask X.\n+    't': \"start\" of SImode contiguous bitmask X.\n+    'x': print integer X as if it's an unsigned halfword.\n+*/\n \n void\n print_operand (FILE *file, rtx x, int code)\n {\n+  HOST_WIDE_INT ival;\n+\n   switch (code)\n     {\n     case 'C':\n@@ -5568,30 +5575,57 @@ print_operand (FILE *file, rtx x, int code)\n       break;\n \n     case CONST_INT:\n-      if (code == 'b')\n-        fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x) & 0xff);\n-      else if (code == 'c')\n-        fprintf (file, HOST_WIDE_INT_PRINT_DEC, ((INTVAL (x) & 0xff) ^ 0x80) - 0x80);\n-      else if (code == 'x')\n-        fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x) & 0xffff);\n-      else if (code == 'h')\n-        fprintf (file, HOST_WIDE_INT_PRINT_DEC, ((INTVAL (x) & 0xffff) ^ 0x8000) - 0x8000);\n-      else if (code == 'i')\n-\tfprintf (file, HOST_WIDE_INT_PRINT_DEC,\n-\t\t s390_extract_part (x, HImode, 0));\n-      else if (code == 'j')\n-\tfprintf (file, HOST_WIDE_INT_PRINT_DEC,\n-\t\t s390_extract_part (x, HImode, -1));\n-      else if (code == 'k')\n- \tfprintf (file, HOST_WIDE_INT_PRINT_DEC,\n- \t\t s390_extract_part (x, SImode, 0));\n-      else if (code == 'm')\n- \tfprintf (file, HOST_WIDE_INT_PRINT_DEC,\n- \t\t s390_extract_part (x, SImode, -1));\n-      else if (code == 'o')\n-\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x) & 0xffffffff);\n-      else\n-        fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n+      ival = INTVAL (x);\n+      switch (code)\n+\t{\n+\tcase 0:\n+\t  break;\n+\tcase 'b':\n+\t  ival &= 0xff;\n+\t  break;\n+\tcase 'c':\n+\t  ival = ((ival & 0xff) ^ 0x80) - 0x80;\n+\t  break;\n+\tcase 'x':\n+\t  ival &= 0xffff;\n+\t  break;\n+\tcase 'h':\n+\t  ival = ((ival & 0xffff) ^ 0x8000) - 0x8000;\n+\t  break;\n+\tcase 'i':\n+\t  ival = s390_extract_part (x, HImode, 0);\n+\t  break;\n+\tcase 'j':\n+\t  ival = s390_extract_part (x, HImode, -1);\n+\t  break;\n+\tcase 'k':\n+\t  ival = s390_extract_part (x, SImode, 0);\n+\t  break;\n+\tcase 'm':\n+\t  ival = s390_extract_part (x, SImode, -1);\n+\t  break;\n+\tcase 'o':\n+\t  ival &= 0xffffffff;\n+\t  break;\n+\tcase 'e': case 'f':\n+\tcase 's': case 't':\n+\t  {\n+\t    int pos, len;\n+\t    bool ok;\n+\n+\t    len = (code == 's' || code == 'e' ? 64 : 32);\n+\t    ok = s390_contiguous_bitmask_p (ival, len, &pos, &len);\n+\t    gcc_assert (ok);\n+\t    if (code == 's' || code == 't')\n+\t      ival = 64 - pos - len;\n+\t    else\n+\t      ival = 64 - 1 - pos;\n+\t  }\n+\t  break;\n+\tdefault:\n+\t  output_operand_lossage (\"invalid constant for output modifier '%c'\", code);\n+\t}\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, ival);\n       break;\n \n     case CONST_DOUBLE:"}, {"sha": "ee030ba43a4f7c7929905c27959bbb0ac7421da5", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 15, "deletions": 59, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ca1b39e545c4d48669f540282b2e004a91e395/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ca1b39e545c4d48669f540282b2e004a91e395/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=75ca1b39e545c4d48669f540282b2e004a91e395", "patch": "@@ -527,6 +527,10 @@\n ;; Maximum unsigned integer that fits in MODE.\n (define_mode_attr max_uint [(HI \"65535\") (QI \"255\")])\n \n+;; Start and end field computations for RISBG et al.\n+(define_mode_attr bfstart [(DI \"s\") (SI \"t\")])\n+(define_mode_attr bfend   [(DI \"e\") (SI \"f\")])\n+\n ;;\n ;;- Compare instructions.\n ;;\n@@ -3420,82 +3424,34 @@\n (define_insn \"*insv<mode>_zEC12_noshift\"\n   [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n \t(ior:GPR (and:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"d\")\n-\t\t\t  (match_operand 2 \"const_int_operand\" \"n\"))\n+\t\t\t  (match_operand:GPR 2 \"contiguous_bitmask_operand\" \"\"))\n \t\t (and:GPR (match_operand:GPR 3 \"nonimmediate_operand\" \"0\")\n-\t\t\t  (match_operand 4 \"const_int_operand\" \"n\"))))]\n-  \"TARGET_ZEC12\n-   && s390_contiguous_bitmask_p (INTVAL (operands[2]),\n-                                 GET_MODE_BITSIZE (<MODE>mode), NULL, NULL)\n-   && INTVAL (operands[2]) == ~(INTVAL (operands[4]))\"\n-\n-{\n-  int start;\n-  int size;\n-\n-  s390_contiguous_bitmask_p (INTVAL (operands[2]),\n-                             GET_MODE_BITSIZE (<MODE>mode), &start, &size);\n-\n-  operands[5] = GEN_INT (64 - start - size); /* start bit position */\n-  operands[6] = GEN_INT (64 - 1 - start);    /* end bit position */\n-  operands[7] = const0_rtx;                  /* left shift count */\n-\n-  return \"risbgn\\t%0,%1,%b5,%b6,%b7\";\n-}\n+\t\t\t  (match_operand:GPR 4 \"const_int_operand\" \"\"))))]\n+  \"TARGET_ZEC12 && INTVAL (operands[2]) == ~INTVAL (operands[4])\"\n+  \"risbgn\\t%0,%1,%<bfstart>2,%<bfend>2,0\"\n   [(set_attr \"op_type\" \"RIE\")])\n \n-; and op1 with a mask being 1 for the selected bits and 0 for the rest\n-; and op3=op0 with a mask being 0 for the selected bits and 1 for the rest\n (define_insn \"*insv<mode>_z10_noshift\"\n   [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n \t(ior:GPR (and:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"d\")\n-\t\t\t  (match_operand 2 \"const_int_operand\" \"n\"))\n+\t\t\t  (match_operand:GPR 2 \"contiguous_bitmask_operand\" \"\"))\n \t\t (and:GPR (match_operand:GPR 3 \"nonimmediate_operand\" \"0\")\n-\t\t\t  (match_operand 4 \"const_int_operand\" \"n\"))))\n+\t\t\t  (match_operand:GPR 4 \"const_int_operand\" \"\"))))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_Z10\n-   && s390_contiguous_bitmask_p (INTVAL (operands[2]),\n-                                 GET_MODE_BITSIZE (<MODE>mode), NULL, NULL)\n-   && INTVAL (operands[2]) == ~(INTVAL (operands[4]))\"\n-\n-{\n-  int start;\n-  int size;\n-\n-  s390_contiguous_bitmask_p (INTVAL (operands[2]),\n-                             GET_MODE_BITSIZE (<MODE>mode), &start, &size);\n-\n-  operands[5] = GEN_INT (64 - start - size); /* start bit position */\n-  operands[6] = GEN_INT (64 - 1 - start);    /* end bit position */\n-  operands[7] = const0_rtx;                  /* left shift count */\n-\n-  return \"risbg\\t%0,%1,%b5,%b6,%b7\";\n-}\n+  \"TARGET_Z10 && INTVAL (operands[2]) == ~INTVAL (operands[4])\"\n+  \"risbg\\t%0,%1,%<bfstart>2,%<bfend>2,0\"\n   [(set_attr \"op_type\" \"RIE\")\n    (set_attr \"z10prop\" \"z10_super_E1\")])\n \n ; and op1 with a mask being 1 for the selected bits and 0 for the rest\n (define_insn \"*insv<mode>_or_z10_noshift\"\n   [(set (match_operand:GPR 0 \"nonimmediate_operand\" \"=d\")\n \t(ior:GPR (and:GPR (match_operand:GPR 1 \"nonimmediate_operand\" \"d\")\n-\t\t\t  (match_operand 2 \"const_int_operand\" \"n\"))\n+\t\t\t  (match_operand:GPR 2 \"contiguous_bitmask_operand\" \"\"))\n \t\t(match_operand:GPR 3 \"nonimmediate_operand\" \"0\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_Z10\n-   && s390_contiguous_bitmask_p (INTVAL (operands[2]),\n-                                 GET_MODE_BITSIZE (<MODE>mode), NULL, NULL)\"\n-{\n-  int start;\n-  int size;\n-\n-  s390_contiguous_bitmask_p (INTVAL (operands[2]),\n-                             GET_MODE_BITSIZE (<MODE>mode), &start, &size);\n-\n-  operands[4] = GEN_INT (64 - start - size); /* start bit position */\n-  operands[5] = GEN_INT (64 - 1 - start);    /* end bit position */\n-  operands[6] = const0_rtx;                  /* left shift count */\n-\n-  return \"rosbg\\t%0,%1,%b4,%b5,%b6\";\n-}\n+  \"TARGET_Z10\"\n+  \"rosbg\\t%0,%1,%<bfstart>2,%<bfend>2,0\"\n   [(set_attr \"op_type\" \"RIE\")])\n \n (define_insn \"*insv<mode>_mem_reg\""}]}