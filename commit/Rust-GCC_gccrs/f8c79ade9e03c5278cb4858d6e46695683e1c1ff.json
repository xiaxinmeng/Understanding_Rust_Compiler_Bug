{"sha": "f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjNzlhZGU5ZTAzYzUyNzhjYjQ4NThkNmU0NjY5NTY4M2UxYzFmZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:20:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-29T13:20:26Z"}, "message": "[multiple changes]\n\n2014-07-29  Olivier Hainque  <hainque@adacore.com>\n\n\t* g-debpoo.adb\n\t(Default_Alignment): Rename as Storage_Alignment. This is not\n\ta \"default\" that can be overriden. Augment comment to clarify\n\tintent and document why we need to manage alignment padding.\n\t(Header_Offset): Set to Header'Object_Size instead of 'Size\n\trounded up to Storage_Alignment. Storage_Alignment on the\n\tallocation header is not required by our internals so was\n\toverkill. 'Object_Size is enough to ensure proper alignment\n\tof the header address when substracted from a storage address\n\taligned on Storage_Alignment.\n\t(Minimum_Allocation): Rename as Extra_Allocation, conveying that\n\tthis is always added on top of the incoming allocation requests.\n\t(Align): New function, to perform alignment rounding operations.\n\t(Allocate): Add comments on the Storage_Address computation\n\tscheme and adjust so that the alignment padding applies to that\n\t(Storage_Address) only.\n\n2014-07-29  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch3.adb (Default_Initialize_Object): Remove incorrect\n\tpragma Unreferenced.\n\t* cstand.adb (Create_Standard): Use E_Array_Type for standard\n\tstring types. Make sure index of Any_String/Any_Array is in a list.\n\t* errout.adb: Minor reformatting.\n\nFrom-SVN: r213169", "tree": {"sha": "0c0fb55c2de502e6ce69b8951a0c875da3b4a644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c0fb55c2de502e6ce69b8951a0c875da3b4a644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/comments", "author": null, "committer": null, "parents": [{"sha": "b329a739f8026e4d1ace1e7113c96b99e3193e17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b329a739f8026e4d1ace1e7113c96b99e3193e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b329a739f8026e4d1ace1e7113c96b99e3193e17"}], "stats": {"total": 308, "additions": 190, "deletions": 118}, "files": [{"sha": "07ac917b9f212858572f34ee03604c4413ec4926", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -1,3 +1,30 @@\n+2014-07-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* g-debpoo.adb\n+\t(Default_Alignment): Rename as Storage_Alignment. This is not\n+\ta \"default\" that can be overriden. Augment comment to clarify\n+\tintent and document why we need to manage alignment padding.\n+\t(Header_Offset): Set to Header'Object_Size instead of 'Size\n+\trounded up to Storage_Alignment. Storage_Alignment on the\n+\tallocation header is not required by our internals so was\n+\toverkill. 'Object_Size is enough to ensure proper alignment\n+\tof the header address when substracted from a storage address\n+\taligned on Storage_Alignment.\n+\t(Minimum_Allocation): Rename as Extra_Allocation, conveying that\n+\tthis is always added on top of the incoming allocation requests.\n+\t(Align): New function, to perform alignment rounding operations.\n+\t(Allocate): Add comments on the Storage_Address computation\n+\tscheme and adjust so that the alignment padding applies to that\n+\t(Storage_Address) only.\n+\n+2014-07-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch3.adb (Default_Initialize_Object): Remove incorrect\n+\tpragma Unreferenced.\n+\t* cstand.adb (Create_Standard): Use E_Array_Type for standard\n+\tstring types. Make sure index of Any_String/Any_Array is in a list.\n+\t* errout.adb: Minor reformatting.\n+\n 2014-07-29  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_ugn.texi: Clean up and correct documentation of warnings."}, {"sha": "0bb0d84c670e00b57714618ec9150558e62ad3a8", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 40, "deletions": 23, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -450,6 +450,9 @@ package body CStand is\n       --  Creates entities for all predefined floating point types, and\n       --  adds these to the Predefined_Float_Types list in package Standard.\n \n+      procedure Make_Dummy_Index (E : Entity_Id);\n+      --  Called to provide a dummy index field value for Any_Array/Any_String\n+\n       procedure Pack_String_Type (String_Type : Entity_Id);\n       --  Generate proper tree for pragma Pack that applies to given type, and\n       --  mark type as having the pragma.\n@@ -553,6 +556,27 @@ package body CStand is\n          end loop;\n       end Create_Float_Types;\n \n+      ----------------------\n+      -- Make_Dummy_Index --\n+      ----------------------\n+\n+      procedure Make_Dummy_Index (E : Entity_Id) is\n+         Index : Node_Id;\n+         Dummy : List_Id;\n+\n+      begin\n+         Index :=\n+           Make_Range (Sloc (E),\n+             Low_Bound  => Make_Integer (Uint_0),\n+             High_Bound => Make_Integer (Uint_2 ** Standard_Integer_Size));\n+         Set_Etype (Index, Standard_Integer);\n+         Set_First_Index (E, Index);\n+\n+         --  Make sure Index is a list as required, so Next_Index is Empty\n+\n+         Dummy := New_List (Index);\n+      end Make_Dummy_Index;\n+\n       ----------------------\n       -- Pack_String_Type --\n       ----------------------\n@@ -907,7 +931,7 @@ package body CStand is\n       Append (Identifier_For (S_Positive), Subtype_Marks (Tdef_Node));\n       Set_Type_Definition (Parent (Standard_String), Tdef_Node);\n \n-      Set_Ekind           (Standard_String, E_String_Type);\n+      Set_Ekind           (Standard_String, E_Array_Type);\n       Set_Etype           (Standard_String, Standard_String);\n       Set_Component_Type  (Standard_String, Standard_Character);\n       Set_Component_Size  (Standard_String, Uint_8);\n@@ -926,8 +950,8 @@ package body CStand is\n \n       --  Set index type of String\n \n-      E_Id := First\n-        (Subtype_Marks (Type_Definition (Parent (Standard_String))));\n+      E_Id :=\n+        First (Subtype_Marks (Type_Definition (Parent (Standard_String))));\n       Set_First_Index (Standard_String, E_Id);\n       Set_Entity (E_Id, Standard_Positive);\n       Set_Etype (E_Id, Standard_Positive);\n@@ -951,7 +975,7 @@ package body CStand is\n       Append (Identifier_For (S_Positive), Subtype_Marks (Tdef_Node));\n       Set_Type_Definition (Parent (Standard_Wide_String), Tdef_Node);\n \n-      Set_Ekind           (Standard_Wide_String, E_String_Type);\n+      Set_Ekind           (Standard_Wide_String, E_Array_Type);\n       Set_Etype           (Standard_Wide_String, Standard_Wide_String);\n       Set_Component_Type  (Standard_Wide_String, Standard_Wide_Character);\n       Set_Component_Size  (Standard_Wide_String, Uint_16);\n@@ -960,8 +984,9 @@ package body CStand is\n \n       --  Set index type of Wide_String\n \n-      E_Id := First\n-        (Subtype_Marks (Type_Definition (Parent (Standard_Wide_String))));\n+      E_Id :=\n+        First\n+          (Subtype_Marks (Type_Definition (Parent (Standard_Wide_String))));\n       Set_First_Index (Standard_Wide_String, E_Id);\n       Set_Entity (E_Id, Standard_Positive);\n       Set_Etype (E_Id, Standard_Positive);\n@@ -985,7 +1010,7 @@ package body CStand is\n       Append (Identifier_For (S_Positive), Subtype_Marks (Tdef_Node));\n       Set_Type_Definition (Parent (Standard_Wide_Wide_String), Tdef_Node);\n \n-      Set_Ekind            (Standard_Wide_Wide_String, E_String_Type);\n+      Set_Ekind            (Standard_Wide_Wide_String, E_Array_Type);\n       Set_Etype            (Standard_Wide_Wide_String,\n                             Standard_Wide_Wide_String);\n       Set_Component_Type   (Standard_Wide_Wide_String,\n@@ -997,8 +1022,10 @@ package body CStand is\n \n       --  Set index type of Wide_Wide_String\n \n-      E_Id := First\n-        (Subtype_Marks (Type_Definition (Parent (Standard_Wide_Wide_String))));\n+      E_Id :=\n+        First\n+         (Subtype_Marks\n+            (Type_Definition (Parent (Standard_Wide_Wide_String))));\n       Set_First_Index (Standard_Wide_Wide_String, E_Id);\n       Set_Entity (E_Id, Standard_Positive);\n       Set_Etype (E_Id, Standard_Positive);\n@@ -1213,12 +1240,13 @@ package body CStand is\n       Make_Name             (Any_Character, \"a character type\");\n \n       Any_Array := New_Standard_Entity;\n-      Set_Ekind             (Any_Array, E_String_Type);\n+      Set_Ekind             (Any_Array, E_Array_Type);\n       Set_Scope             (Any_Array, Standard_Standard);\n       Set_Etype             (Any_Array, Any_Array);\n       Set_Component_Type    (Any_Array, Any_Character);\n       Init_Size_Align       (Any_Array);\n       Make_Name             (Any_Array, \"an array type\");\n+      Make_Dummy_Index      (Any_Array);\n \n       Any_Boolean := New_Standard_Entity;\n       Set_Ekind             (Any_Boolean, E_Enumeration_Type);\n@@ -1305,24 +1333,13 @@ package body CStand is\n       Make_Name             (Any_Scalar, \"a scalar type\");\n \n       Any_String := New_Standard_Entity;\n-      Set_Ekind             (Any_String, E_String_Type);\n+      Set_Ekind             (Any_String, E_Array_Type);\n       Set_Scope             (Any_String, Standard_Standard);\n       Set_Etype             (Any_String, Any_String);\n       Set_Component_Type    (Any_String, Any_Character);\n       Init_Size_Align       (Any_String);\n       Make_Name             (Any_String, \"a string type\");\n-\n-      declare\n-         Index   : Node_Id;\n-\n-      begin\n-         Index :=\n-           Make_Range (Stloc,\n-             Low_Bound  => Make_Integer (Uint_0),\n-             High_Bound => Make_Integer (Uint_2 ** Standard_Integer_Size));\n-         Set_Etype (Index, Standard_Integer);\n-         Set_First_Index (Any_String, Index);\n-      end;\n+      Make_Dummy_Index      (Any_String);\n \n       Raise_Type := New_Standard_Entity;\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);"}, {"sha": "80f5be052780b0c157608128199e2ec150cbeb30", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -7185,11 +7185,10 @@ package body Einfo is\n \n    function Is_String_Type (Id : E) return B is\n    begin\n-      return Ekind (Id) in String_Kind\n-        or else (Is_Array_Type (Id)\n-                  and then Id /= Any_Composite\n-                  and then Number_Dimensions (Id) = 1\n-                  and then Is_Character_Type (Component_Type (Id)));\n+      return Is_Array_Type (Id)\n+        and then Id /= Any_Composite\n+        and then Number_Dimensions (Id) = 1\n+        and then Is_Character_Type (Component_Type (Id));\n    end Is_String_Type;\n \n    -------------------------------\n@@ -7555,15 +7554,15 @@ package body Einfo is\n       T : Node_Id;\n \n    begin\n-      if Ekind (Id) in String_Kind then\n+      if Ekind (Id) = E_String_Literal_Subtype then\n          return 1;\n \n       else\n          N := 0;\n          T := First_Index (Id);\n          while Present (T) loop\n             N := N + 1;\n-            T := Next (T);\n+            Next_Index (T);\n          end loop;\n \n          return N;\n@@ -8050,10 +8049,6 @@ package body Einfo is\n               E_Record_Subtype               =>\n             Kind := E_Record_Subtype;\n \n-         when E_String_Type                  |\n-              E_String_Subtype               =>\n-            Kind := E_String_Subtype;\n-\n          when Enumeration_Kind               =>\n             Kind := E_Enumeration_Subtype;\n "}, {"sha": "4117252280d41a984cefdae815711a5975c8949e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -1245,14 +1245,14 @@ package Einfo is\n --       all the extra formals (see description of Extra_Formals field).\n \n --    First_Index (Node17)\n---       Defined in array types and subtypes and in string types and subtypes.\n---       By introducing implicit subtypes for the index constraints, we have\n---       the same structure for constrained and unconstrained arrays, subtype\n---       marks and discrete ranges are both represented by a subtype. This\n---       function returns the tree node corresponding to an occurrence of the\n---       first index (NOT the entity for the type). Subsequent indices are\n---       obtained using Next_Index. Note that this field is defined for the\n---       case of string literal subtypes, but is always Empty.\n+--       Defined in array types and subtypes. By introducing implicit subtypes\n+--       for the index constraints, we have the same structure for constrained\n+--       and unconstrained arrays, subtype marks and discrete ranges are\n+--       both represented by a subtype. This function returns the tree node\n+--       corresponding to an occurrence of the first index (NOT the entity for\n+--       the type). Subsequent indices are obtained using Next_Index. Note that\n+--       this field is defined for the case of string literal subtypes, but is\n+--       always Empty.\n \n --    First_Literal (Node17)\n --       Defined in all enumeration types, including character and boolean\n@@ -4519,12 +4519,9 @@ package Einfo is\n       --  or the use of an anonymous array subtype.\n \n       E_String_Type,\n-      --  A string type, i.e. an array type whose component type is a character\n-      --  type, and for which string literals can thus be written.\n-\n       E_String_Subtype,\n-      --  A string subtype, created by an explicit subtype declaration for a\n-      --  string type, or the use of an anonymous subtype of a string type,\n+      --  These are obsolete and not used any more, they are retained to ease\n+      --  transition in getting rid of these obsolete entries.\n \n       E_String_Literal_Subtype,\n       --  A special string subtype, used only to describe the type of a string\n@@ -4758,8 +4755,6 @@ package Einfo is\n    subtype Aggregate_Kind              is Entity_Kind range\n        E_Array_Type ..\n    --  E_Array_Subtype\n-   --  E_String_Type\n-   --  E_String_Subtype\n    --  E_String_Literal_Subtype\n    --  E_Class_Wide_Type\n    --  E_Class_Wide_Subtype\n@@ -4769,8 +4764,6 @@ package Einfo is\n    subtype Array_Kind                  is Entity_Kind range\n        E_Array_Type ..\n    --  E_Array_Subtype\n-   --  E_String_Type\n-   --  E_String_Subtype\n        E_String_Literal_Subtype;\n \n    subtype Assignable_Kind             is Entity_Kind range\n@@ -4785,8 +4778,6 @@ package Einfo is\n    subtype Composite_Kind              is Entity_Kind range\n        E_Array_Type ..\n    --  E_Array_Subtype\n-   --  E_String_Type\n-   --  E_String_Subtype\n    --  E_String_Literal_Subtype\n    --  E_Class_Wide_Type\n    --  E_Class_Wide_Subtype\n@@ -5011,11 +5002,6 @@ package Einfo is\n    --  E_Floating_Point_Type\n        E_Floating_Point_Subtype;\n \n-   subtype String_Kind                 is Entity_Kind range\n-       E_String_Type ..\n-   --  E_String_Subtype\n-       E_String_Literal_Subtype;\n-\n    subtype Subprogram_Kind             is Entity_Kind range\n        E_Function ..\n    --  E_Operator\n@@ -5054,8 +5040,6 @@ package Einfo is\n    --  E_Anonymous_Access_Type\n    --  E_Array_Type\n    --  E_Array_Subtype\n-   --  E_String_Type\n-   --  E_String_Subtype\n    --  E_String_Literal_Subtype\n    --  E_Class_Wide_Subtype\n    --  E_Class_Wide_Type\n@@ -6085,18 +6069,6 @@ package Einfo is\n    --    Type_High_Bound                     (synth)\n    --    (plus type attributes)\n \n-   --  E_String_Type\n-   --  E_String_Subtype\n-   --    First_Index                         (Node17)\n-   --    Component_Type                      (Node20)   (base type only)\n-   --    Static_Real_Or_String_Predicate     (Node25)\n-   --    Is_Constrained                      (Flag12)\n-   --    SSO_Set_High_By_Default             (Flag273)  (base type only)\n-   --    SSO_Set_Low_By_Default              (Flag272)  (base type only)\n-   --    Next_Index                          (synth)\n-   --    Number_Dimensions                   (synth)\n-   --    (plus type attributes)\n-\n    --  E_String_Literal_Subtype\n    --    String_Literal_Low_Bound            (Node15)\n    --    String_Literal_Length               (Uint16)"}, {"sha": "e835ea47cb4a9323810cdafc548d39164f771779", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -1945,8 +1945,8 @@ package body Errout is\n \n                         Err_Flag :=\n                           E /= No_Error_Msg\n-                          and then Errors.Table (E).Line = N\n-                          and then Errors.Table (E).Sfile = Sfile;\n+                            and then Errors.Table (E).Line = N\n+                            and then Errors.Table (E).Sfile = Sfile;\n \n                         Output_Source_Line (N, Sfile, Err_Flag);\n "}, {"sha": "ae9f911cea35442ad06597c2b8ca90a3b9d8d467", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -5043,9 +5043,8 @@ package body Exp_Ch3 is\n          Obj_Ref    : Node_Id;\n \n          Dummy : Entity_Id;\n-         pragma Unreferenced (Dummy);\n-         --  This variable captures an unused dummy internal entity, see the\n-         --  comment associated with its use.\n+         --  This variable captures a dummy internal entity, see the comment\n+         --  associated with its use.\n \n       --  Start of processing for Default_Initialize_Object\n "}, {"sha": "ed3a90ae5b386f9f1a5e8f09f12eb6a1c61eab46", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -2082,7 +2082,7 @@ package body Freeze is\n \n          --  Processing that is done only for base types\n \n-         if Ekind (Arr) = E_Array_Type then  -- what about E_String_Type ???\n+         if Ekind (Arr) = E_Array_Type then\n \n             --  Deal with default setting of reverse storage order\n \n@@ -2231,8 +2231,7 @@ package body Freeze is\n \n                      if Has_Pragma_Pack (Arr)\n                        and then not Present (Comp_Size_C)\n-                       and then\n-                         (Csiz = 7 or else Csiz = 15 or else Csiz = 31)\n+                       and then (Csiz = 7 or else Csiz = 15 or else Csiz = 31)\n                        and then Esize (Base_Type (Ctyp)) = Csiz + 1\n                      then\n                         Error_Msg_Uint_1 := Csiz;\n@@ -2274,8 +2273,7 @@ package body Freeze is\n                         if Known_Static_Esize (Component_Type (Arr))\n                           and then Esize (Component_Type (Arr)) = Csiz\n                         then\n-                           Set_Has_Non_Standard_Rep\n-                             (Base_Type (Arr), False);\n+                           Set_Has_Non_Standard_Rep (Base_Type (Arr), False);\n                         end if;\n \n                         --  In all other cases, packing is indeed needed"}, {"sha": "07bff14fa2695f96d4bc7f5246b4f333d227064a", "filename": "gcc/ada/g-debpoo.adb", "status": "modified", "additions": 93, "deletions": 32, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Fg-debpoo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Fg-debpoo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-debpoo.adb?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,11 +45,39 @@ with Ada.Unchecked_Conversion;\n \n package body GNAT.Debug_Pools is\n \n-   Default_Alignment : constant := Standard'Maximum_Alignment;\n-   --  Alignment used for the memory chunks returned by Allocate. Using this\n-   --  value guarantees that this alignment will be compatible with all types\n-   --  and at the same time makes it easy to find the location of the extra\n-   --  header allocated for each chunk.\n+   Storage_Alignment : constant := Standard'Maximum_Alignment;\n+   --  Alignment enforced for all the memory chunks returned by Allocate,\n+   --  maximized to make sure that it will be compatible with all types.\n+   --\n+   --  The addresses returned by the underlying low-level allocator (be it\n+   --  'new' or a straight 'malloc') aren't guaranteed to be that much aligned\n+   --  on some targets, so we manage the needed alignment padding ourselves\n+   --  systematically. Use of a common value for every allocation allows\n+   --  significant simplifications in the code, nevertheless, for improved\n+   --  robustness and efficiency overall.\n+\n+   --  We combine a few internal devices to offer the pool services:\n+   --\n+   --  * A management header attached to each allocated memory block, located\n+   --    right ahead of it, like so:\n+   --\n+   --        Storage Address returned by the pool,\n+   --        aligned on Storage_Alignment\n+   --                       v\n+   --      +------+--------+---------------------\n+   --      | ~~~~ | HEADER | USER DATA ... |\n+   --      +------+--------+---------------------\n+   --       <---->\n+   --       alignment\n+   --       padding\n+   --\n+   --    The alignment padding is required\n+   --\n+   --  * A validity bitmap, which holds a validity bit for blocks managed by\n+   --    the pool. Enforcing Storage_Alignment on those blocks allows efficient\n+   --    validity management.\n+   --\n+   --  * A list of currently used blocks.\n \n    Max_Ignored_Levels : constant Natural := 10;\n    --  Maximum number of levels that will be ignored in backtraces. This is so\n@@ -192,20 +220,26 @@ package body GNAT.Debug_Pools is\n      (Traceback_Htable_Elem_Ptr, Traceback_Ptr_Or_Address);\n \n    Header_Offset : constant Storage_Count :=\n-                     Default_Alignment *\n-                       ((Allocation_Header'Size / System.Storage_Unit\n-                          + Default_Alignment - 1) / Default_Alignment);\n-   --  Offset of user data after allocation header\n-\n-   Minimum_Allocation : constant Storage_Count :=\n-                          Default_Alignment - 1 + Header_Offset;\n-   --  Minimal allocation: size of allocation_header rounded up to next\n-   --  multiple of default alignment + worst-case padding.\n+     (Allocation_Header'Object_Size / System.Storage_Unit);\n+   --  Offset, in bytes, from start of allocation Header to start of User\n+   --  data.  The start of user data is assumed to be aligned at least as much\n+   --  as what the header type requires, so applying this offset yields a\n+   --  suitably aligned address as well.\n+\n+   Extra_Allocation : constant Storage_Count :=\n+     (Storage_Alignment - 1 + Header_Offset);\n+   --  Amount we need to secure in addition to the user data for a given\n+   --  allocation request: room for the allocation header plus worst-case\n+   --  alignment padding.\n \n    -----------------------\n    -- Local subprograms --\n    -----------------------\n \n+   function Align (Addr : Integer_Address) return Integer_Address;\n+   pragma Inline (Align);\n+   --  Return the next address aligned on Storage_Alignment from Addr.\n+\n    function Find_Or_Create_Traceback\n      (Pool                : Debug_Pool;\n       Kind                : Traceback_Kind;\n@@ -289,6 +323,16 @@ package body GNAT.Debug_Pools is\n    --  addresses internal to this package). Depth is the number of levels that\n    --  the user is interested in.\n \n+   -----------\n+   -- Align --\n+   -----------\n+\n+   function Align (Addr : Integer_Address) return Integer_Address is\n+      Factor : constant Integer_Address := Storage_Alignment;\n+   begin\n+      return ((Addr + Factor - 1) / Factor) * Factor;\n+   end Align;\n+\n    ---------------\n    -- Header_Of --\n    ---------------\n@@ -522,7 +566,7 @@ package body GNAT.Debug_Pools is\n       --  that two chunk of allocated data are very far from each other.\n \n       Memory_Chunk_Size : constant Integer_Address := 2 ** 24; --  16 MB\n-      Validity_Divisor  : constant := Default_Alignment * System.Storage_Unit;\n+      Validity_Divisor  : constant := Storage_Alignment * System.Storage_Unit;\n \n       Max_Validity_Byte_Index : constant :=\n                                  Memory_Chunk_Size / Validity_Divisor;\n@@ -575,12 +619,12 @@ package body GNAT.Debug_Pools is\n          Int_Storage  : constant Integer_Address := To_Integer (Storage);\n \n       begin\n-         --  The pool only returns addresses aligned on Default_Alignment so\n+         --  The pool only returns addresses aligned on Storage_Alignment so\n          --  anything off cannot be a valid block address and we can return\n          --  early in this case. We actually have to since our data structures\n          --  map validity bits for such aligned addresses only.\n \n-         if Int_Storage mod Default_Alignment /= 0 then\n+         if Int_Storage mod Storage_Alignment /= 0 then\n             return False;\n          end if;\n \n@@ -592,7 +636,7 @@ package body GNAT.Debug_Pools is\n             Offset       : constant Integer_Address :=\n                              (Int_Storage -\n                                (Block_Number * Memory_Chunk_Size)) /\n-                                  Default_Alignment;\n+                                  Storage_Alignment;\n             Bit          : constant Byte :=\n                              2 ** Natural (Offset mod System.Storage_Unit);\n          begin\n@@ -615,7 +659,7 @@ package body GNAT.Debug_Pools is\n          Ptr          : Validity_Bits_Ref := Validy_Htable.Get (Block_Number);\n          Offset       : constant Integer_Address :=\n                           (Int_Storage - (Block_Number * Memory_Chunk_Size)) /\n-                             Default_Alignment;\n+                             Storage_Alignment;\n          Bit          : constant Byte :=\n                           2 ** Natural (Offset mod System.Storage_Unit);\n \n@@ -656,11 +700,12 @@ package body GNAT.Debug_Pools is\n       Size_In_Storage_Elements : Storage_Count;\n       Alignment                : Storage_Count)\n    is\n+\n       pragma Unreferenced (Alignment);\n-      --  Ignored, we always force 'Default_Alignment\n+      --  Ignored, we always force Storage_Alignment\n \n       type Local_Storage_Array is new Storage_Array\n-        (1 .. Size_In_Storage_Elements + Minimum_Allocation);\n+        (1 .. Size_In_Storage_Elements + Extra_Allocation);\n \n       type Ptr is access Local_Storage_Array;\n       --  On some systems, we might want to physically protect pages against\n@@ -705,17 +750,33 @@ package body GNAT.Debug_Pools is\n             P := new Local_Storage_Array;\n       end;\n \n-      Storage_Address :=\n-        To_Address\n-          (Default_Alignment *\n-             ((To_Integer (P.all'Address) + Default_Alignment - 1)\n-               / Default_Alignment)\n-           + Integer_Address (Header_Offset));\n+      --  Compute Storage_Address, aimed at receiving user data. We need room\n+      --  for the allocation header just ahead of the user data space plus\n+      --  alignment padding so Storage_Address is aligned on Storage_Alignment,\n+      --  like so:\n+      --\n+      --                         Storage_Address, aligned\n+      --                         on Storage_Alignment\n+      --                           v\n+      --          | ~~~~ | Header | User data ... |\n+      --                  ^........^\n+      --                  Header_Offset\n+      --\n+      --  Header_Offset is fixed so moving back and forth between user data\n+      --  and allocation header is straightforward. The value is also such\n+      --  that the header type alignment is honored when starting from\n+      --  Default_alignment.\n+\n+      --  For the purpose of computing Storage_Address, we just do as if the\n+      --  header was located first, followed by the alignment padding:\n+\n+      Storage_Address := To_Address\n+        (Align (To_Integer (P.all'Address) + Integer_Address (Header_Offset)));\n       --  Computation is done in Integer_Address, not Storage_Offset, because\n       --  the range of Storage_Offset may not be large enough.\n \n       pragma Assert ((Storage_Address - System.Null_Address)\n-                     mod Default_Alignment = 0);\n+                     mod Storage_Alignment = 0);\n       pragma Assert (Storage_Address + Size_In_Storage_Elements\n                      <= P.all'Address + P'Length);\n \n@@ -726,7 +787,7 @@ package body GNAT.Debug_Pools is\n       pragma Warnings (Off);\n       --  Turn warning on alignment for convert call off. We know that in fact\n       --  this conversion is safe since P itself is always aligned on\n-      --  Default_Alignment.\n+      --  Storage_Alignment.\n \n       Header_Of (Storage_Address).all :=\n         (Allocation_Address => P.all'Address,\n@@ -950,7 +1011,7 @@ package body GNAT.Debug_Pools is\n                     (Output_File (Pool),\n                      \"info: Freeing physical memory \"\n                        & Storage_Count'Image\n-                       ((abs Header.Block_Size) + Minimum_Allocation)\n+                       ((abs Header.Block_Size) + Extra_Allocation)\n                        & \" bytes at 0x\"\n                        & Address_Image (Header.Allocation_Address));\n                end if;\n@@ -1167,7 +1228,7 @@ package body GNAT.Debug_Pools is\n                  & Storage_Count'Image (Size_In_Storage_Elements)\n                  & \" bytes at 0x\" & Address_Image (Storage_Address)\n                  & \" (physically\"\n-                 & Storage_Count'Image (Header.Block_Size + Minimum_Allocation)\n+                 & Storage_Count'Image (Header.Block_Size + Extra_Allocation)\n                  & \" bytes at 0x\" & Address_Image (Header.Allocation_Address)\n                  & \"), at \");\n             Put_Line (Output_File (Pool), Pool.Stack_Trace_Depth, null,"}, {"sha": "b82f4b837c87b29d5ee7e4df00482a51170fb483", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -502,14 +502,18 @@ package Lib.Xref is\n       E_Signed_Integer_Subtype                     => 'I',\n       E_Signed_Integer_Type                        => 'I',\n       E_String_Literal_Subtype                     => ' ',\n-      E_String_Subtype                             => 'S',\n-      E_String_Type                                => 'S',\n       E_Subprogram_Type                            => ' ',\n       E_Task_Subtype                               => 'T',\n       E_Task_Type                                  => 'T',\n       E_Variable                                   => '*',\n       E_Void                                       => ' ',\n \n+      --  These are dummy entries which can be removed when we finally get\n+      --  rid of these obsolete entries once and for all.\n+\n+      E_String_Type                               => ' ',\n+      E_String_Subtype                            => ' ',\n+\n       --  The following entities are not ones to which we gather the cross-\n       --  references, since it does not make sense to do so (e.g. references to\n       --  a package are to the spec, not the body) Indeed the occurrence of the"}, {"sha": "028b2bc1a734126721be235274fbb7da7698bbad", "filename": "gcc/ada/prj-dect.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Fprj-dect.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Fprj-dect.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-dect.adb?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -1558,7 +1558,6 @@ package body Prj.Dect is\n       if Token = Tok_Right_Paren then\n          Scan (In_Tree);\n       end if;\n-\n    end Parse_String_Type_Declaration;\n \n    --------------------------------"}, {"sha": "19d34328e34d23641a3a9d3d31f969d28fb5029c", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c79ade9e03c5278cb4858d6e46695683e1c1ff/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=f8c79ade9e03c5278cb4858d6e46695683e1c1ff", "patch": "@@ -4083,7 +4083,7 @@ package body Sprint is\n \n                   --  Array types and string types\n \n-                  when E_Array_Type | E_String_Type =>\n+                  when E_Array_Type =>\n                      Write_Header;\n                      Write_Str (\"array (\");\n "}]}