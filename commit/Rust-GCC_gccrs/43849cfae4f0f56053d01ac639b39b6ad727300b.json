{"sha": "43849cfae4f0f56053d01ac639b39b6ad727300b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM4NDljZmFlNGYwZjU2MDUzZDAxYWM2MzliMzliNmFkNzI3MzAwYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-02T20:44:38Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-02T20:44:38Z"}, "message": "* config/m68hc11/m68hc11.h (target_flags, MASK_SHORT)\n\t(MASK_AUTO_INC_DEC, MASK_M6811, MASK_M6812, MASK_M68S12)\n\t(MASK_NO_DIRECT_MODE, MASK_MIN_MAX, MASK_LONG_CALLS)\n\t(TARGET_SHORT, TARGET_M6811, TARGET_M6812, TARGET_M68S12)\n\t(TARGET_AUTO_INC_DEC, TARGET_MIN_MAX, TARGET_NO_DIRECT_MODE)\n\t(TARGET_LONG_CALLS, TARGET_SWITCHES, TARGET_OPTIONS)\n\t(SUBTARGET_SWITCHES, SUBTARGET_OPTIONS, m68hc11_regparm_string)\n\t(m68hc11_reg_alloc_order, m68hc11_soft_reg_count)\n\t(TARGET_M68HC11): Delete.\n\t(TARGET_DEFAULT): Change the default setting from MASK_M6811 to 0.\n\t* config/m68hc11/m68hc12.h (TARGET_M68HC12): Delete.\n\t* config/m68hc11/m68hc11.c (m68hc11_regparm_string)\n\t(m68hc11_reg_alloc_order, m68hc11_soft_reg_count)\n\t(nb_soft_regs): Delete.\n\t(TARGET_DEFAULT_TARGET_FLAGS): Override default with TARGET_DEFAULT.\n\t(m68hc11_override_options): Remove the code that caters for MASK_M6811\n\tand MASK_M6812 being set simultaneously.  Change the code that sets\n\tthe default m68hc11_soft_reg_count to use integers instead of strings.\n\t(m68hc11_conditional_register_usage, hard_regno_mode_ok): Use\n\tm68hc11_soft_reg_count (which now has an int type) as the number\n\tof soft registers.\n\t* config/m68hc11/m68hc11.opt: New file.\n\nFrom-SVN: r97458", "tree": {"sha": "294acb214b5ea2c9fc0d777a703930946b8be196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/294acb214b5ea2c9fc0d777a703930946b8be196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43849cfae4f0f56053d01ac639b39b6ad727300b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43849cfae4f0f56053d01ac639b39b6ad727300b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43849cfae4f0f56053d01ac639b39b6ad727300b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43849cfae4f0f56053d01ac639b39b6ad727300b/comments", "author": null, "committer": null, "parents": [{"sha": "291387970dce86f883234b18735efd65463c4044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291387970dce86f883234b18735efd65463c4044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/291387970dce86f883234b18735efd65463c4044"}], "stats": {"total": 266, "additions": 135, "deletions": 131}, "files": [{"sha": "09b374f1b24b1543ebc5ffb73ab5f40552e38949", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43849cfae4f0f56053d01ac639b39b6ad727300b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43849cfae4f0f56053d01ac639b39b6ad727300b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43849cfae4f0f56053d01ac639b39b6ad727300b", "patch": "@@ -1,3 +1,28 @@\n+2005-04-02  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/m68hc11/m68hc11.h (target_flags, MASK_SHORT)\n+\t(MASK_AUTO_INC_DEC, MASK_M6811, MASK_M6812, MASK_M68S12)\n+\t(MASK_NO_DIRECT_MODE, MASK_MIN_MAX, MASK_LONG_CALLS)\n+\t(TARGET_SHORT, TARGET_M6811, TARGET_M6812, TARGET_M68S12)\n+\t(TARGET_AUTO_INC_DEC, TARGET_MIN_MAX, TARGET_NO_DIRECT_MODE)\n+\t(TARGET_LONG_CALLS, TARGET_SWITCHES, TARGET_OPTIONS)\n+\t(SUBTARGET_SWITCHES, SUBTARGET_OPTIONS, m68hc11_regparm_string)\n+\t(m68hc11_reg_alloc_order, m68hc11_soft_reg_count)\n+\t(TARGET_M68HC11): Delete.\n+\t(TARGET_DEFAULT): Change the default setting from MASK_M6811 to 0.\n+\t* config/m68hc11/m68hc12.h (TARGET_M68HC12): Delete.\n+\t* config/m68hc11/m68hc11.c (m68hc11_regparm_string)\n+\t(m68hc11_reg_alloc_order, m68hc11_soft_reg_count)\n+\t(nb_soft_regs): Delete.\n+\t(TARGET_DEFAULT_TARGET_FLAGS): Override default with TARGET_DEFAULT.\n+\t(m68hc11_override_options): Remove the code that caters for MASK_M6811\n+\tand MASK_M6812 being set simultaneously.  Change the code that sets\n+\tthe default m68hc11_soft_reg_count to use integers instead of strings.\n+\t(m68hc11_conditional_register_usage, hard_regno_mode_ok): Use\n+\tm68hc11_soft_reg_count (which now has an int type) as the number\n+\tof soft registers.\n+\t* config/m68hc11/m68hc11.opt: New file.\n+\n 2005-04-02  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/fr30/fr30.h (PREDICATE_CODES): Remove"}, {"sha": "bd3d606f25b46aca8c3bf5c4b7de0d4f991f057b", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43849cfae4f0f56053d01ac639b39b6ad727300b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43849cfae4f0f56053d01ac639b39b6ad727300b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=43849cfae4f0f56053d01ac639b39b6ad727300b", "patch": "@@ -226,14 +226,6 @@ static const struct processor_costs m6812_cost = {\n   /* divSI */\n   COSTS_N_INSNS (100)\n };\n-\n-/* Machine specific options */\n-\n-const char *m68hc11_regparm_string;\n-const char *m68hc11_reg_alloc_order;\n-const char *m68hc11_soft_reg_count;\n-\n-static int nb_soft_regs;\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -250,6 +242,9 @@ static int nb_soft_regs;\n #undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS TARGET_DEFAULT\n+\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO  m68hc11_encode_section_info\n \n@@ -302,13 +297,7 @@ m68hc11_override_options (void)\n   /* Configure for a 68hc11 processor.  */\n   if (TARGET_M6811)\n     {\n-      /* If gcc was built for a 68hc12, invalidate that because\n-         a -m68hc11 option was specified on the command line.  */\n-      if (TARGET_DEFAULT != MASK_M6811)\n-        target_flags &= ~TARGET_DEFAULT;\n-\n-      if (!TARGET_M6812)\n-        target_flags &= ~(TARGET_AUTO_INC_DEC | TARGET_MIN_MAX);\n+      target_flags &= ~(TARGET_AUTO_INC_DEC | TARGET_MIN_MAX);\n       m68hc11_cost = &m6811_cost;\n       m68hc11_min_offset = 0;\n       m68hc11_max_offset = 256;\n@@ -321,8 +310,8 @@ m68hc11_override_options (void)\n       m68hc11_tmp_regs_class = D_REGS;\n       m68hc11_addr_mode = ADDR_OFFSET;\n       m68hc11_mov_addr_mode = 0;\n-      if (m68hc11_soft_reg_count == 0 && !TARGET_M6812)\n-\tm68hc11_soft_reg_count = \"4\";\n+      if (m68hc11_soft_reg_count < 0)\n+\tm68hc11_soft_reg_count = 4;\n     }\n \n   /* Configure for a 68hc12 processor.  */\n@@ -344,10 +333,9 @@ m68hc11_override_options (void)\n         | (TARGET_AUTO_INC_DEC ? ADDR_INCDEC : 0);\n       m68hc11_mov_addr_mode = ADDR_OFFSET | ADDR_CONST\n         | (TARGET_AUTO_INC_DEC ? ADDR_INCDEC : 0);\n-      target_flags &= ~MASK_M6811;\n       target_flags |= MASK_NO_DIRECT_MODE;\n-      if (m68hc11_soft_reg_count == 0)\n-\tm68hc11_soft_reg_count = \"0\";\n+      if (m68hc11_soft_reg_count < 0)\n+\tm68hc11_soft_reg_count = 0;\n \n       if (TARGET_LONG_CALLS)\n         current_function_far = 1;\n@@ -360,15 +348,11 @@ void\n m68hc11_conditional_register_usage (void)\n {\n   int i;\n-  int cnt = atoi (m68hc11_soft_reg_count);\n \n-  if (cnt < 0)\n-    cnt = 0;\n-  if (cnt > SOFT_REG_LAST - SOFT_REG_FIRST)\n-    cnt = SOFT_REG_LAST - SOFT_REG_FIRST;\n+  if (m68hc11_soft_reg_count > SOFT_REG_LAST - SOFT_REG_FIRST)\n+    m68hc11_soft_reg_count = SOFT_REG_LAST - SOFT_REG_FIRST;\n \n-  nb_soft_regs = cnt;\n-  for (i = SOFT_REG_FIRST + cnt; i < SOFT_REG_LAST; i++)\n+  for (i = SOFT_REG_FIRST + m68hc11_soft_reg_count; i < SOFT_REG_LAST; i++)\n     {\n       fixed_regs[i] = 1;\n       call_used_regs[i] = 1;\n@@ -419,10 +403,11 @@ hard_regno_mode_ok (int regno, enum machine_mode mode)\n   switch (GET_MODE_SIZE (mode))\n     {\n     case 8:\n-      return S_REGNO_P (regno) && nb_soft_regs >= 4;\n+      return S_REGNO_P (regno) && m68hc11_soft_reg_count >= 4;\n \n     case 4:\n-      return X_REGNO_P (regno) || (S_REGNO_P (regno) && nb_soft_regs >= 2);\n+      return (X_REGNO_P (regno)\n+\t      || (S_REGNO_P (regno) && m68hc11_soft_reg_count >= 2));\n \n     case 2:\n       return G_REGNO_P (regno);"}, {"sha": "b513dcd18653687c8f08ff8bc18eb038e4498112", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 100, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43849cfae4f0f56053d01ac639b39b6ad727300b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43849cfae4f0f56053d01ac639b39b6ad727300b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=43849cfae4f0f56053d01ac639b39b6ad727300b", "patch": "@@ -118,44 +118,14 @@ typedef int enum_machine_mode;\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n-extern int target_flags;\n-\n extern short *reg_renumber;\t/* def in local_alloc.c */\n \n-/* Macros used in the machine description to test the flags.  */\n-\n-/* 6811 specific options\n- *\n- * For 68HC12, the auto inc/dec mode is disabled by default. The reason\n- * is that for most programs, the reload pass will fail because it needs\n- * more registers to save the value of the indexed register after the\n- * memory access.  For simple programs, you can enable this\n- * with -mauto-incdec.\n- */\n-\n-#define MASK_SHORT              0002\t/* Compile with 16-bit `int' */\n-#define MASK_AUTO_INC_DEC       0004\n-#define MASK_M6811              0010\n-#define MASK_M6812              0020\n-#define MASK_M68S12             0040\n-#define MASK_NO_DIRECT_MODE     0100\n-#define MASK_MIN_MAX            0200\n-#define MASK_LONG_CALLS         0400\n-\n #define TARGET_OP_TIME\t\t(optimize && optimize_size == 0)\n-#define TARGET_SHORT            (target_flags & MASK_SHORT)\n-#define TARGET_M6811            (target_flags & MASK_M6811)\n-#define TARGET_M6812            (target_flags & MASK_M6812)\n-#define TARGET_M68S12           (target_flags & MASK_M68S12)\n-#define TARGET_AUTO_INC_DEC     (target_flags & MASK_AUTO_INC_DEC)\n-#define TARGET_MIN_MAX          (target_flags & MASK_MIN_MAX)\n-#define TARGET_NO_DIRECT_MODE   (target_flags & MASK_NO_DIRECT_MODE)\n #define TARGET_RELAX            (TARGET_NO_DIRECT_MODE)\n-#define TARGET_LONG_CALLS       (target_flags & MASK_LONG_CALLS)\n \n /* Default target_flags if no switches specified.  */\n #ifndef TARGET_DEFAULT\n-# define TARGET_DEFAULT\t\t(MASK_M6811)\n+# define TARGET_DEFAULT\t\t0\n #endif\n \n /* Define this macro as a C expression for the initializer of an\n@@ -170,75 +140,6 @@ extern short *reg_renumber;\t/* def in local_alloc.c */\n # endif\n #endif\n \n-/* Macro to define tables used to set the flags. This is a list in braces of\n-   pairs in braces, each pair being { \"NAME\", VALUE } where VALUE is the bits\n-   to set or minus the bits to clear. An empty string NAME is used to\n-   identify the default VALUE.  */\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\\\n-{ { \"short\", MASK_SHORT,\t\t\t\t\t\\\n-    N_(\"Compile with 16-bit integer mode\")},\t\t\t\\\n-  { \"noshort\", - MASK_SHORT,\t\t\t\t\t\\\n-    N_(\"Compile with 32-bit integer mode\")},\t\t\t\\\n-  { \"auto-incdec\", MASK_AUTO_INC_DEC,\t\t\t\t\\\n-    N_(\"Auto pre/post decrement increment allowed\")},\t\t\\\n-  { \"noauto-incdec\", - MASK_AUTO_INC_DEC,\t\t\t\\\n-    N_(\"Auto pre/post decrement increment not allowed\")},\t\\\n-  { \"inmax\", MASK_MIN_MAX,                                      \\\n-    N_(\"Min/max instructions allowed\")},                        \\\n-  { \"nominmax\", - MASK_MIN_MAX,                                 \\\n-    N_(\"Min/max instructions not allowed\")},                    \\\n-  { \"long-calls\", MASK_LONG_CALLS,\t\t\t\t\\\n-    N_(\"Use call and rtc for function calls and returns\")},\t\\\n-  { \"nolong-calls\", - MASK_LONG_CALLS,\t\t\t\t\\\n-    N_(\"Use jsr and rts for function calls and returns\")},\t\\\n-  { \"relax\", MASK_NO_DIRECT_MODE,                               \\\n-    N_(\"Do not use direct addressing mode for soft registers\")},\\\n-  { \"norelax\", -MASK_NO_DIRECT_MODE,                            \\\n-    N_(\"Use direct addressing mode for soft registers\")},       \\\n-  { \"68hc11\", MASK_M6811,\t\t\t\t\t\\\n-    N_(\"Compile for a 68HC11\")},\t\t\t\t\\\n-  { \"68hc12\", MASK_M6812,\t\t\t\t\t\\\n-    N_(\"Compile for a 68HC12\")},\t\t\t\t\\\n-  { \"68hcs12\", MASK_M6812 | MASK_M68S12,\t\t\t\\\n-    N_(\"Compile for a 68HCS12\")},\t\t\t\t\\\n-  { \"6811\",   MASK_M6811,\t\t\t\t\t\\\n-    N_(\"Compile for a 68HC11\")},\t\t\t\t\\\n-  { \"6812\",   MASK_M6812,\t\t\t\t\t\\\n-    N_(\"Compile for a 68HC12\")},\t\t\t\t\\\n-  { \"68S12\",  MASK_M6812 | MASK_M68S12,\t\t\t\t\\\n-    N_(\"Compile for a 68HCS12\")},\t\t\t\t\\\n-  { \"\", TARGET_DEFAULT, 0 }}\n-\n-/* This macro is similar to `TARGET_SWITCHES' but defines names of\n-   command options that have values.  Its definition is an\n-   initializer with a subgrouping for each command option.\n-\n-   Each subgrouping contains a string constant, that defines the\n-   fixed part of the option name, and the address of a variable.  The\n-   variable, type `char *', is set to the variable part of the given\n-   option if the fixed part matches.  The actual option name is made\n-   by appending `-m' to the specified name.  */\n-#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{ { \"reg-alloc=\",\t&m68hc11_reg_alloc_order,                       \\\n-    N_(\"Specify the register allocation order\"), 0},\t\t\t\\\n-  { \"soft-reg-count=\",\t&m68hc11_soft_reg_count,                        \\\n-    N_(\"Indicate the number of soft registers available\"), 0},\t\t\\\n-  SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n-}\n-\n-/* These are meant to be redefined in the host dependent files */\n-#define SUBTARGET_SWITCHES\n-#define SUBTARGET_OPTIONS\n-\n-extern const char *m68hc11_regparm_string;\n-extern const char *m68hc11_reg_alloc_order;\n-extern const char *m68hc11_soft_reg_count;\n-\n-#ifndef TARGET_M68HC12\n-# define TARGET_M68HC11 1\n-#endif\n-\n /* Print subsidiary information on the compiler version in use.  */\n #define TARGET_VERSION\tfprintf (stderr, \" (MC68HC11/MC68HC12/MC68HCS12)\")\n "}, {"sha": "41748f102f3f8617221f92060698dbf836461f2d", "filename": "gcc/config/m68hc11/m68hc11.opt", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43849cfae4f0f56053d01ac639b39b6ad727300b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43849cfae4f0f56053d01ac639b39b6ad727300b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.opt?ref=43849cfae4f0f56053d01ac639b39b6ad727300b", "patch": "@@ -0,0 +1,95 @@\n+; Options for the Motorola 68HC11 and 68HC12 port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+m6811\n+Target RejectNegative InverseMask(M6812, M6811)\n+Compile for a 68HC11\n+\n+m6812\n+Target RejectNegative Mask(M6812)\n+Compile for a 68HC12\n+\n+m68hc11\n+Target RejectNegative InverseMask(M6812)\n+Compile for a 68HC11\n+\n+m68hc12\n+Target RejectNegative Mask(M6812) MaskExists\n+Compile for a 68HC12\n+\n+; At the moment, there is no difference between the code generated\n+; for -m68hc12 and -m68hcs12.\n+m68hcs12\n+Target RejectNegative Mask(M6812) MaskExists\n+Compile for a 68HCS12\n+\n+m68s12\n+Target RejectNegative Mask(M6812) MaskExists\n+Compile for a 68HCS12\n+\n+mauto-incdec\n+Target RejectNegative Report Mask(AUTO_INC_DEC)\n+Auto pre/post decrement increment allowed\n+\n+minmax\n+Target RejectNegative Report Mask(MIN_MAX)\n+Min/max instructions allowed\n+\n+mlong-calls\n+Target RejectNegative Report Mask(LONG_CALLS)\n+Use call and rtc for function calls and returns\n+\n+mnoauto-incdec\n+Target RejectNegative Report InverseMask(AUTO_INC_DEC)\n+Auto pre/post decrement increment not allowed\n+\n+mnolong-calls\n+Target RejectNegative Report InverseMask(LONG_CALLS)\n+Use jsr and rts for function calls and returns\n+\n+mnominmax\n+Target RejectNegative Report InverseMask(MIN_MAX)\n+Min/max instructions not allowed\n+\n+mnorelax\n+Target RejectNegative Report InverseMask(NO_DIRECT_MODE)\n+Use direct addressing mode for soft registers\n+\n+mnoshort\n+Target RejectNegative Report InverseMask(SHORT)\n+Compile with 32-bit integer mode\n+\n+; Currently ignored.\n+mreg-alloc=\n+Target RejectNegative Joined\n+Specify the register allocation order\n+\n+mrelax\n+Target RejectNegative Report Mask(NO_DIRECT_MODE)\n+Do not use direct addressing mode for soft registers\n+\n+mshort\n+Target RejectNegative Report Mask(SHORT)\n+Compile with 16-bit integer mode\n+\n+msoft-reg-count=\n+Target RejectNegative Joined UInteger Var(m68hc11_soft_reg_count) Init(-1)\n+Indicate the number of soft registers available"}, {"sha": "eddad29eff6af7b55c0488e5a57876a27c415ec7", "filename": "gcc/config/m68hc11/m68hc12.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43849cfae4f0f56053d01ac639b39b6ad727300b/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43849cfae4f0f56053d01ac639b39b6ad727300b/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h?ref=43849cfae4f0f56053d01ac639b39b6ad727300b", "patch": "@@ -44,5 +44,3 @@ Boston, MA 02111-1307, USA.  */\n \n /* Default target_flags if no switches specified.  */\n #define TARGET_DEFAULT\t\t(MASK_M6812)\n-\n-#define TARGET_M68HC12"}]}