{"sha": "72e3386e136205dcc69e61e538b94643832cf22a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlMzM4NmUxMzYyMDVkY2M2OWU2MWU1MzhiOTQ2NDM4MzJjZjIyYQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-06-04T23:31:32Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-06-04T23:31:32Z"}, "message": "rs6000: ww -> wa\n\n\"ww\" can always be \"wa\".\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"ww\"):\n\tDelete.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_ww.\n\t* config/rs6000/rs6000.md: Adjust.\n\t* config/rs6000/vsx.md: Adjust.\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271932", "tree": {"sha": "f732e498920c24401cb5611074f53bd46180d60d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f732e498920c24401cb5611074f53bd46180d60d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72e3386e136205dcc69e61e538b94643832cf22a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e3386e136205dcc69e61e538b94643832cf22a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e3386e136205dcc69e61e538b94643832cf22a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e3386e136205dcc69e61e538b94643832cf22a/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c5d4de7b573ba7f64097afbb6d2d1608c522ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c5d4de7b573ba7f64097afbb6d2d1608c522ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c5d4de7b573ba7f64097afbb6d2d1608c522ddf"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "f7eff36e5fc7a94462d4d9c454cdf1a2e3fc53eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72e3386e136205dcc69e61e538b94643832cf22a", "patch": "@@ -1,3 +1,15 @@\n+2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"ww\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_ww.\n+\t* config/rs6000/rs6000.md: Adjust.\n+\t* config/rs6000/vsx.md: Adjust.\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-06-04  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (SFDF, SFDF2): Adjust comments."}, {"sha": "b1dcee20eb8c55ac416655e6356bd6df6bb6443c", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=72e3386e136205dcc69e61e538b94643832cf22a", "patch": "@@ -76,9 +76,6 @@\n (define_register_constraint \"wr\" \"rs6000_constraints[RS6000_CONSTRAINT_wr]\"\n   \"General purpose register if 64-bit instructions are enabled or NO_REGS.\")\n \n-(define_register_constraint \"ww\" \"rs6000_constraints[RS6000_CONSTRAINT_ww]\"\n-  \"FP or VSX register to perform float operations under -mvsx or NO_REGS.\")\n-\n (define_register_constraint \"wx\" \"rs6000_constraints[RS6000_CONSTRAINT_wx]\"\n   \"Floating point register if the STFIWX instruction is enabled or NO_REGS.\")\n "}, {"sha": "eef4572418bec2330288ee5aad4d94c92a5b64a6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=72e3386e136205dcc69e61e538b94643832cf22a", "patch": "@@ -2512,7 +2512,6 @@ rs6000_debug_reg_global (void)\n \t   \"wp reg_class = %s\\n\"\n \t   \"wq reg_class = %s\\n\"\n \t   \"wr reg_class = %s\\n\"\n-\t   \"ww reg_class = %s\\n\"\n \t   \"wx reg_class = %s\\n\"\n \t   \"wA reg_class = %s\\n\"\n \t   \"\\n\",\n@@ -2524,7 +2523,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ww]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wx]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wA]]);\n \n@@ -3136,7 +3134,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twc - Reserved to represent individual CR bits (used in LLVM).\n \twn - always NO_REGS.\n \twr - GPR if 64-bit mode is permitted.\n-\tww - Register class to do SF conversions in with VSX operations.\n \twx - Float register if we can do 32-bit int stores.  */\n \n   if (TARGET_HARD_FLOAT)\n@@ -3159,11 +3156,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n       rs6000_constraints[RS6000_CONSTRAINT_wA] = BASE_REGS;\n     }\n \n-  if (TARGET_P8_VECTOR)\t\t\t\t\t\t/* SFmode  */\n-    rs6000_constraints[RS6000_CONSTRAINT_ww] = VSX_REGS;\n-  else if (TARGET_VSX)\n-    rs6000_constraints[RS6000_CONSTRAINT_ww] = FLOAT_REGS;\n-\n   if (TARGET_STFIWX)\n     rs6000_constraints[RS6000_CONSTRAINT_wx] = FLOAT_REGS;\t/* DImode  */\n "}, {"sha": "102fe1c422ff9f3e3ab843776c724e2c923c1aaf", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=72e3386e136205dcc69e61e538b94643832cf22a", "patch": "@@ -1260,7 +1260,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */\n   RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */\n-  RS6000_CONSTRAINT_ww,\t\t/* FP or VSX register for vsx float ops.  */\n   RS6000_CONSTRAINT_wx,\t\t/* FPR register for STFIWX */\n   RS6000_CONSTRAINT_wA,\t\t/* BASE_REGS if 64-bit.  */\n   RS6000_CONSTRAINT_MAX"}, {"sha": "2c86082e30ca15ba31606311f27bc10c7f23c19d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=72e3386e136205dcc69e61e538b94643832cf22a", "patch": "@@ -525,7 +525,7 @@\n ; ISA 2.06 (power7).  This includes instructions that normally target DF mode,\n ; but are used on SFmode, since internally SFmode values are kept in the DFmode\n ; format.\n-(define_mode_attr Fv\t\t[(SF \"ww\") (DF \"wa\") (DI \"wa\")])\n+(define_mode_attr Fv\t\t[(SF \"wa\") (DF \"wa\") (DI \"wa\")])\n \n ; Which isa is needed for those float instructions?\n (define_mode_attr Fisa\t\t[(SF \"p8v\")  (DF \"*\") (DI \"*\")])\n@@ -7298,11 +7298,11 @@\n (define_insn \"movsf_hardfloat\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n \t \"=!r,       f,         v,          wa,        m,         wY,\n-\t  Z,         m,         ww,         !r,        f,         ww,\n+\t  Z,         m,         wa,         !r,        f,         wa,\n \t  !r,        *c*l,      !r,         *h\")\n \t(match_operand:SF 1 \"input_operand\"\n \t \"m,         m,         wY,         Z,         f,         v,\n-\t  wa,        r,         j,          j,         f,         ww,\n+\t  wa,        r,         j,          j,         f,         wa,\n \t  r,         r,         *h,         0\"))]\n   \"(register_operand (operands[0], SFmode)\n    || register_operand (operands[1], SFmode))\n@@ -8695,7 +8695,7 @@\n \n (define_insn_and_split \"reload_gpr_from_vsxsf\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=r\")\n-\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"ww\")]\n+\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"wa\")]\n \t\t   UNSPEC_P8V_RELOAD_FROM_VSX))\n    (clobber (match_operand:V4SF 2 \"register_operand\" \"=wa\"))]\n   \"TARGET_POWERPC64 && TARGET_DIRECT_MOVE\""}, {"sha": "d08264537af70bd84f64ac6216b027c77ae5f523", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=72e3386e136205dcc69e61e538b94643832cf22a", "patch": "@@ -116,7 +116,7 @@\n \t\t\t (V2DF  \"wa\")\n \t\t\t (DI\t\"wa\")\n \t\t\t (DF    \"wa\")\n-\t\t\t (SF\t\"ww\")\n+\t\t\t (SF\t\"wa\")\n \t\t\t (TF\t\"wp\")\n \t\t\t (KF\t\"wq\")\n \t\t\t (V1TI  \"v\")\n@@ -127,7 +127,7 @@\n (define_mode_attr VSr3\t[(V2DF  \"wa\")\n \t\t\t (V4SF  \"wa\")\n \t\t\t (DF    \"wa\")\n-\t\t\t (SF\t\"ww\")\n+\t\t\t (SF\t\"wa\")\n \t\t\t (DI\t\"wa\")\n \t\t\t (KF\t\"wq\")\n \t\t\t (TF\t\"wp\")])\n@@ -155,7 +155,7 @@\n \t\t\t (V2DF  \"wa\")\n \t\t\t (DI\t\"wa\")\n \t\t\t (DF    \"wa\")\n-\t\t\t (SF\t\"ww\")\n+\t\t\t (SF\t\"wa\")\n \t\t\t (V1TI\t\"wa\")\n \t\t\t (TI    \"wa\")\n \t\t\t (TF\t\"wp\")\n@@ -2182,7 +2182,7 @@\n \n ;; Same as vsx_xscvspdp, but use SF as the type\n (define_insn \"vsx_xscvspdp_scalar2\"\n-  [(set (match_operand:SF 0 \"vsx_register_operand\" \"=ww\")\n+  [(set (match_operand:SF 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:SF [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa\")]\n \t\t   UNSPEC_VSX_CVSPDP))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n@@ -2202,15 +2202,15 @@\n ;; format of scalars is actually DF.\n (define_insn \"vsx_xscvdpsp_scalar\"\n   [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa\")\n-\t(unspec:V4SF [(match_operand:SF 1 \"vsx_register_operand\" \"ww\")]\n+\t(unspec:V4SF [(match_operand:SF 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_CVSPDP))]\n   \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n   \"xscvdpsp %x0,%x1\"\n   [(set_attr \"type\" \"fp\")])\n \n ;; ISA 2.07 xscvdpspn/xscvspdpn that does not raise an error on signalling NaNs\n (define_insn \"vsx_xscvdpspn\"\n-  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=ww\")\n+  [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:V4SF [(match_operand:DF 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_CVDPSPN))]\n   \"TARGET_XSCVDPSPN\"\n@@ -2227,7 +2227,7 @@\n \n (define_insn \"vsx_xscvdpspn_scalar\"\n   [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa\")\n-\t(unspec:V4SF [(match_operand:SF 1 \"vsx_register_operand\" \"ww\")]\n+\t(unspec:V4SF [(match_operand:SF 1 \"vsx_register_operand\" \"wa\")]\n \t\t     UNSPEC_VSX_CVDPSPN))]\n   \"TARGET_XSCVDPSPN\"\n   \"xscvdpspn %x0,%x1\"\n@@ -2921,8 +2921,8 @@\n (define_insn \"vsx_concat_v2sf\"\n   [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:V2DF\n-\t [(match_operand:SF 1 \"vsx_register_operand\" \"ww\")\n-\t  (match_operand:SF 2 \"vsx_register_operand\" \"ww\")]\n+\t [(match_operand:SF 1 \"vsx_register_operand\" \"wa\")\n+\t  (match_operand:SF 2 \"vsx_register_operand\" \"wa\")]\n \t UNSPEC_VSX_CONCAT))]\n   \"VECTOR_MEM_VSX_P (V2DFmode)\"\n {\n@@ -3287,7 +3287,7 @@\n \n ;; Extract a SF element from V4SF\n (define_insn_and_split \"vsx_extract_v4sf\"\n-  [(set (match_operand:SF 0 \"vsx_register_operand\" \"=ww\")\n+  [(set (match_operand:SF 0 \"vsx_register_operand\" \"=wa\")\n \t(vec_select:SF\n \t (match_operand:V4SF 1 \"vsx_register_operand\" \"wa\")\n \t (parallel [(match_operand:QI 2 \"u5bit_cint_operand\" \"n\")])))\n@@ -3339,7 +3339,7 @@\n \n ;; Variable V4SF extract\n (define_insn_and_split \"vsx_extract_v4sf_var\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=ww,ww,?r\")\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=wa,wa,?r\")\n \t(unspec:SF [(match_operand:V4SF 1 \"input_operand\" \"v,m,m\")\n \t\t    (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n \t\t   UNSPEC_VSX_EXTRACT))\n@@ -3786,7 +3786,7 @@\n ;; not double.  First convert the value to double, and then to the desired\n ;; type.\n (define_insn_and_split \"*vsx_extract_si_<uns>float_<mode>\"\n-  [(set (match_operand:VSX_EXTRACT_FL 0 \"gpc_reg_operand\" \"=ww\")\n+  [(set (match_operand:VSX_EXTRACT_FL 0 \"gpc_reg_operand\" \"=wa\")\n \t(any_float:VSX_EXTRACT_FL\n \t (vec_select:SI\n \t  (match_operand:V4SI 1 \"gpc_reg_operand\" \"v\")\n@@ -3920,7 +3920,7 @@\n   [(set (match_operand:V4SF 0 \"gpc_reg_operand\" \"=wa\")\n \t(unspec:V4SF\n \t [(match_operand:V4SF 1 \"gpc_reg_operand\" \"0\")\n-\t  (match_operand:SF 2 \"gpc_reg_operand\" \"ww\")\n+\t  (match_operand:SF 2 \"gpc_reg_operand\" \"wa\")\n \t  (match_operand:QI 3 \"const_0_to_3_operand\" \"n\")]\n \t UNSPEC_VSX_SET))\n    (clobber (match_scratch:SI 4 \"=&wa\"))]"}, {"sha": "04618f67370a5d68bbb0df996257f4fdbbe9ecca", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72e3386e136205dcc69e61e538b94643832cf22a/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=72e3386e136205dcc69e61e538b94643832cf22a", "patch": "@@ -3197,7 +3197,7 @@ Altivec vector register\n Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa},\n-@code{wp}, @code{wq}, or @code{ww})\n+@code{wp}, or @code{wq},\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n output in the assembly file will be incorrect if an Altivec register\n@@ -3260,9 +3260,6 @@ VSX register to use for IEEE 128-bit floating point, or NO_REGS.\n @item wr\n General purpose register if 64-bit instructions are enabled or NO_REGS.\n \n-@item ww\n-FP or VSX register to perform float operations under @option{-mvsx} or NO_REGS.\n-\n @item wx\n Floating point register if the STFIWX instruction is enabled or NO_REGS.\n "}]}