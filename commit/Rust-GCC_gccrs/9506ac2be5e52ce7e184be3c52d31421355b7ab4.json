{"sha": "9506ac2be5e52ce7e184be3c52d31421355b7ab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUwNmFjMmJlNWU1MmNlN2UxODRiZTNjNTJkMzE0MjEzNTViN2FiNA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-06-30T18:21:54Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-06-30T18:21:54Z"}, "message": "Conditionally compile support for --enable-mapped_location.\n\n\t* gengtype-lex.l:  Temporary kludge to avoid duplicate typedef.\n\t* gengtype.c:  Update for now typdefs in input.h.  More kludges.\n\t* modulo-sched.c (sms_schedule):  Use NOTE_EXPANDED_LOCATION macro.\n\t* ra-debug.c (ra_print_rtl):  Likewise.\n\t* sched-rgn.c:  Likewise.\n\t* sched-vis.c:  Likewise.\n\t* rtl.h (gen_rtx_ASM_OPERANDS):  Redefine if USE_MAPPED_LOCATION.\n\t* stmt.c (expand_asm_operands):  Adjust calls to gen_rtx_ASM_OPERANDS.\n\t* tree-cfg.c:  Use new macros and typedefs.\n\t* tree-flow-inline.h:  Likewise.\n\nFrom-SVN: r83922", "tree": {"sha": "e54e6194b2452bb0b1eea27a54b905b6672b2f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e54e6194b2452bb0b1eea27a54b905b6672b2f10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9506ac2be5e52ce7e184be3c52d31421355b7ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9506ac2be5e52ce7e184be3c52d31421355b7ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9506ac2be5e52ce7e184be3c52d31421355b7ab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9506ac2be5e52ce7e184be3c52d31421355b7ab4/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6773e15fa5ac64bf67b19088e149f4d3cda2cf9a"}], "stats": {"total": 126, "additions": 106, "deletions": 20}, "files": [{"sha": "2e424d7c14acfbd97d1ad84e979aefbd791dc9b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9506ac2be5e52ce7e184be3c52d31421355b7ab4", "patch": "@@ -79,6 +79,16 @@\n \t* rtl-error.c:  Likewise.\n \t* stmt.c (check_seenlabel):  Likewise.\n \t* tree-pretty-print.c:  Likewise.\n+\t* gengtype-lex.l:  Temporary kludge to avoid duplicate typedef.\n+\t* gengtype.c:  Update for now typdefs in input.h.  More kludges.\n+\t* modulo-sched.c (sms_schedule):  Use NOTE_EXPANDED_LOCATION macro.\n+\t* ra-debug.c (ra_print_rtl):  Likewise.\n+\t* sched-rgn.c:  Likewise.\n+\t* sched-vis.c:  Likewise.\n+\t* rtl.h (gen_rtx_ASM_OPERANDS):  Redefine if USE_MAPPED_LOCATION.\n+\t* stmt.c (expand_asm_operands):  Adjust calls to gen_rtx_ASM_OPERANDS.\n+\t* tree-cfg.c:  Use new macros and typedefs.\n+\t* tree-flow-inline.h:  Likewise.\n \n 2004-06-30  Richard Sandiford  <rsandifo@redhat.com>\n \t    Eric Christopher  <echristo@redhat.com>"}, {"sha": "22a5cd8ee0fdd988cbe09804600a6e41acbf3d2e", "filename": "gcc/gengtype-lex.l", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fgengtype-lex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fgengtype-lex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-lex.l?ref=9506ac2be5e52ce7e184be3c52d31421355b7ab4", "patch": "@@ -88,7 +88,12 @@ ITYPE\t{IWORD}({WS}{IWORD})*\n   t = find_structure (xmemdup (tagstart, taglen, taglen+1), union_p);\n   if (is_pointer)\n     t = create_pointer (t);\n-  do_typedef (xmemdup (namestart, namelen, namelen+1), t, &lexer_line);\n+  namestart = xmemdup (namestart, namelen, namelen+1);\n+#ifdef USE_MAPPED_LOCATION\n+  /* temporary kludge - gentype doesn't handle cpp conditionals */\n+  if (strcmp (namestart, \"location_t\") != 0)\n+#endif\n+  do_typedef (namestart, t, &lexer_line);\n   update_lineno (yytext, yyleng);\n }\n "}, {"sha": "6c19725f86808dbd27e97eaad5f0e5003b407b25", "filename": "gcc/gengtype.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=9506ac2be5e52ce7e184be3c52d31421355b7ab4", "patch": "@@ -1104,7 +1104,7 @@ open_base_files (void)\n     /* The order of files here matters very much.  */\n     static const char *const ifiles [] = {\n       \"config.h\", \"system.h\", \"coretypes.h\", \"tm.h\", \"varray.h\", \n-      \"hashtab.h\", \"splay-tree.h\", \"bitmap.h\", \"tree.h\", \"rtl.h\",\n+      \"hashtab.h\", \"splay-tree.h\", \"bitmap.h\", \"input.h\", \"tree.h\", \"rtl.h\",\n       \"function.h\", \"insn-config.h\", \"expr.h\", \"hard-reg-set.h\",\n       \"basic-block.h\", \"cselib.h\", \"insn-addr.h\", \"optabs.h\",\n       \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n@@ -2988,6 +2988,10 @@ main(int argc ATTRIBUTE_UNUSED, char **argv ATTRIBUTE_UNUSED)\n   do_scalar_typedef (\"uint8\", &pos);\n   do_scalar_typedef (\"jword\", &pos);\n   do_scalar_typedef (\"JCF_u2\", &pos);\n+#ifdef USE_MAPPED_LOCATION\n+  do_scalar_typedef (\"location_t\", &pos);\n+  do_scalar_typedef (\"source_locus\", &pos);\n+#endif\n   do_scalar_typedef (\"void\", &pos);\n \n   do_typedef (\"PTR\", create_pointer (resolve_typedef (\"void\", &pos)), &pos);\n@@ -3010,6 +3014,12 @@ main(int argc ATTRIBUTE_UNUSED, char **argv ATTRIBUTE_UNUSED)\n         }\n       if (!dupflag)\n         parse_file (all_files[i]);\n+#ifndef USE_MAPPED_LOCATION\n+      /* temporary kludge - gengtype doesn't handle conditionals.\n+\t Manually add source_locus *after* we've processed input.h. */\n+      if (i == 0)\n+\tdo_typedef (\"source_locus\", create_pointer (resolve_typedef (\"location_t\", &pos)), &pos);\n+#endif\n     }\n \n   if (hit_error != 0)"}, {"sha": "c14b58f8699211c51d32da4c5f4d9516f538e597", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=9506ac2be5e52ce7e184be3c52d31421355b7ab4", "patch": "@@ -900,8 +900,12 @@ sms_schedule (FILE *dump_file)\n \t      rtx line_note = find_line_note (tail);\n \n \t      if (line_note)\n-\t    \tfprintf (stats_file, \"SMS bb %s %d (file, line)\\n\",\n-\t\t     \t NOTE_SOURCE_FILE (line_note), NOTE_LINE_NUMBER (line_note));\n+\t\t{\n+\t\t  expanded_location xloc;\n+\t\t  NOTE_EXPANDED_LOCATION (xloc, line_note);\n+\t\t  fprintf (stats_file, \"SMS bb %s %d (file, line)\\n\",\n+\t\t\t   xloc.file, xloc.line);\n+\t\t}\n \t      fprintf (stats_file, \"SMS single-bb-loop\\n\");\n \t      if (profile_info && flag_branch_probabilities)\n \t    \t{\n@@ -996,8 +1000,12 @@ sms_schedule (FILE *dump_file)\n \t  rtx line_note = find_line_note (tail);\n \n \t  if (line_note)\n-\t    fprintf (stats_file, \"SMS bb %s %d (file, line)\\n\",\n-\t\t     NOTE_SOURCE_FILE (line_note), NOTE_LINE_NUMBER (line_note));\n+\t    {\n+\t      expanded_location xloc;\n+\t      NOTE_EXPANDED_LOCATION (xloc, line_note);\n+\t      fprintf (stats_file, \"SMS bb %s %d (file, line)\\n\",\n+\t\t       xloc.file, xloc.line);\n+\t    }\n \t  fprintf (stats_file, \"SMS single-bb-loop\\n\");\n \t  if (profile_info && flag_branch_probabilities)\n \t    {"}, {"sha": "9bbfeb7fdb8ad9fdf928259c8ac5032cf6f85aa9", "filename": "gcc/ra-debug.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fra-debug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fra-debug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-debug.c?ref=9506ac2be5e52ce7e184be3c52d31421355b7ab4", "patch": "@@ -389,9 +389,11 @@ ra_print_rtx (FILE *file, rtx x, int with_pn)\n \t    fprintf (file, \" %s\", GET_NOTE_INSN_NAME (ln));\n \t  else\n \t    {\n-\t      fprintf (file, \" line %d\", ln);\n-\t      if (NOTE_SOURCE_FILE (x))\n-\t\tfprintf (file, \":%s\", NOTE_SOURCE_FILE (x));\n+\t      expanded_location s;\n+\t      NOTE_EXPANDED_LOCATION (s, x);\n+\t      fprintf (file, \" line %d\", s.line);\n+\t      if (s.file != NULL)\n+\t\tfprintf (file, \":%s\", s.file);\n \t    }\n \t}\n       else"}, {"sha": "1630a3d297aeaf53e61901a58a9f6fa410004ad8", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=9506ac2be5e52ce7e184be3c52d31421355b7ab4", "patch": "@@ -2321,8 +2321,12 @@ debug_dependencies (void)\n \t\t      if (n < 0)\n \t\t\tfprintf (sched_dump, \"%s\\n\", GET_NOTE_INSN_NAME (n));\n \t\t      else\n-\t\t\tfprintf (sched_dump, \"line %d, file %s\\n\", n,\n-\t\t\t\t NOTE_SOURCE_FILE (insn));\n+\t\t\t{\n+\t\t\t  expanded_location xloc;\n+\t\t\t  NOTE_EXPANDED_LOCATION (xloc, insn);\n+\t\t\t  fprintf (sched_dump, \"line %d, file %s\\n\",\n+\t\t\t\t   xloc.line, xloc.file);\n+\t\t\t}\n \t\t    }\n \t\t  else\n \t\t    fprintf (sched_dump, \" {%s}\\n\", GET_RTX_NAME (GET_CODE (insn)));"}, {"sha": "856830693e656652f0f16cebc6c552ec801209ba", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=9506ac2be5e52ce7e184be3c52d31421355b7ab4", "patch": "@@ -787,8 +787,12 @@ print_insn (char *buf, rtx x, int verbose)\n       break;\n     case NOTE:\n       if (NOTE_LINE_NUMBER (x) > 0)\n-\tsprintf (buf, \"%4d note \\\"%s\\\" %d\", INSN_UID (x),\n-\t\t NOTE_SOURCE_FILE (x), NOTE_LINE_NUMBER (x));\n+\t{\n+\t  expanded_location xloc;\n+\t  NOTE_EXPANDED_LOCATION (xloc, x);\n+\t  sprintf (buf, \"%4d note \\\"%s\\\" %d\", INSN_UID (x),\n+\t\t   xloc.file, xloc.line);\n+\t}\n       else\n \tsprintf (buf, \"%4d %s\", INSN_UID (x),\n \t\t GET_NOTE_INSN_NAME (NOTE_LINE_NUMBER (x)));"}, {"sha": "509803cee991ef1242dfd755a0f5029bcb5e26fd", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9506ac2be5e52ce7e184be3c52d31421355b7ab4", "patch": "@@ -666,7 +666,11 @@ make_goto_expr_edges (basic_block bb)\n       if (simple_goto_p (goto_t))\n \t{\n \t  edge e = make_edge (bb, label_to_block (dest), EDGE_FALLTHRU);\n+#ifdef USE_MAPPED_LOCATION\n+\t  e->goto_locus = EXPR_LOCATION (goto_t);\n+#else\n \t  e->goto_locus = EXPR_LOCUS (goto_t);\n+#endif\n \t  bsi_remove (&last);\n \t  return;\n \t}\n@@ -1115,9 +1119,10 @@ static void remove_useless_stmts_1 (tree *, struct rus_data *);\n static bool\n remove_useless_stmts_warn_notreached (tree stmt)\n {\n-  if (EXPR_LOCUS (stmt))\n+  if (EXPR_HAS_LOCATION (stmt))\n     {\n-      warning (\"%Hwill never be executed\", EXPR_LOCUS (stmt));\n+      location_t loc = EXPR_LOCATION (stmt);\n+      warning (\"%Hwill never be executed\", &loc);\n       return true;\n     }\n \n@@ -1776,7 +1781,7 @@ static void\n remove_bb (basic_block bb)\n {\n   block_stmt_iterator i;\n-  location_t *loc = NULL;\n+  source_locus loc = 0;\n \n   if (dump_file)\n     {\n@@ -1799,16 +1804,24 @@ remove_bb (basic_block bb)\n \t jump threading, thus resulting in bogus warnings.  Not great,\n \t since this way we lose warnings for gotos in the original\n \t program that are indeed unreachable.  */\n-      if (TREE_CODE (stmt) != GOTO_EXPR && EXPR_LOCUS (stmt) && !loc)\n+      if (TREE_CODE (stmt) != GOTO_EXPR && EXPR_HAS_LOCATION (stmt) && !loc)\n+#ifdef USE_MAPPED_LOCATION\n+\tloc = EXPR_LOCATION (stmt);\n+#else\n \tloc = EXPR_LOCUS (stmt);\n+#endif\n     }\n \n   /* If requested, give a warning that the first statement in the\n      block is unreachable.  We walk statements backwards in the\n      loop above, so the last statement we process is the first statement\n      in the block.  */\n   if (warn_notreached && loc)\n+#ifdef USE_MAPPED_LOCATION\n+    warning (\"%Hwill never be executed\", &loc);\n+#else\n     warning (\"%Hwill never be executed\", loc);\n+#endif\n \n   remove_phi_nodes_and_edges_for_unreachable_block (bb);\n }\n@@ -2641,7 +2654,11 @@ disband_implicit_edges (void)\n       label = tree_block_label (e->dest);\n \n       stmt = build1 (GOTO_EXPR, void_type_node, label);\n+#ifdef USE_MAPPED_LOCATION\n+      SET_EXPR_LOCATION (stmt, e->goto_locus);\n+#else\n       SET_EXPR_LOCUS (stmt, e->goto_locus);\n+#endif\n       bsi_insert_after (&last, stmt, BSI_NEW_STMT);\n       e->flags &= ~EDGE_FALLTHRU;\n     }\n@@ -4759,7 +4776,11 @@ struct tree_opt_pass pass_split_crit_edges =\n static void\n execute_warn_function_return (void)\n {\n+#ifdef USE_MAPPED_LOCATION\n+  source_location location;\n+#else\n   location_t *locus;\n+#endif\n   tree last;\n   edge e;\n \n@@ -4774,17 +4795,31 @@ execute_warn_function_return (void)\n   if (TREE_THIS_VOLATILE (cfun->decl)\n       && EXIT_BLOCK_PTR->pred != NULL)\n     {\n+#ifdef USE_MAPPED_LOCATION\n+      location = UNKNOWN_LOCATION;\n+#else\n       locus = NULL;\n+#endif\n       for (e = EXIT_BLOCK_PTR->pred; e ; e = e->pred_next)\n \t{\n \t  last = last_stmt (e->src);\n \t  if (TREE_CODE (last) == RETURN_EXPR\n+#ifdef USE_MAPPED_LOCATION\n+\t      && (location = EXPR_LOCATION (last)) != UNKNOWN_LOCATION)\n+#else\n \t      && (locus = EXPR_LOCUS (last)) != NULL)\n+#endif\n \t    break;\n \t}\n+#ifdef USE_MAPPED_LOCATION\n+      if (location == UNKNOWN_LOCATION)\n+\tlocation = cfun->function_end_locus;\n+      warning (\"%H`noreturn' function does return\", &location);\n+#else\n       if (!locus)\n \tlocus = &cfun->function_end_locus;\n       warning (\"%H`noreturn' function does return\", locus);\n+#endif\n     }\n \n   /* If we see \"return;\" in some basic block, then we do reach the end\n@@ -4799,10 +4834,17 @@ execute_warn_function_return (void)\n \t  if (TREE_CODE (last) == RETURN_EXPR\n \t      && TREE_OPERAND (last, 0) == NULL)\n \t    {\n+#ifdef USE_MAPPED_LOCATION\n+\t      location = EXPR_LOCATION (last);\n+\t      if (location == UNKNOWN_LOCATION)\n+\t\t  location = cfun->function_end_locus;\n+\t      warning (\"%Hcontrol reaches end of non-void function\", &location);\n+#else\n \t      locus = EXPR_LOCUS (last);\n \t      if (!locus)\n \t\tlocus = &cfun->function_end_locus;\n \t      warning (\"%Hcontrol reaches end of non-void function\", locus);\n+#endif\n \t      break;\n \t    }\n \t}"}, {"sha": "bda65ca7f5c89234c9a9887863ac1810448b8ac4", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9506ac2be5e52ce7e184be3c52d31421355b7ab4/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=9506ac2be5e52ce7e184be3c52d31421355b7ab4", "patch": "@@ -126,7 +126,7 @@ get_lineno (tree expr)\n   if (TREE_CODE (expr) == COMPOUND_EXPR)\n     expr = TREE_OPERAND (expr, 0);\n \n-  if (! EXPR_LOCUS (expr))\n+  if (! EXPR_HAS_LOCATION (expr))\n     return -1;\n \n   return EXPR_LINENO (expr);\n@@ -137,14 +137,15 @@ get_lineno (tree expr)\n static inline const char *\n get_filename (tree expr)\n {\n+  const char *filename;\n   if (expr == NULL_TREE)\n     return \"???\";\n \n   if (TREE_CODE (expr) == COMPOUND_EXPR)\n     expr = TREE_OPERAND (expr, 0);\n \n-  if (EXPR_LOCUS (expr) && EXPR_FILENAME (expr))\n-    return EXPR_FILENAME (expr);\n+  if (EXPR_HAS_LOCATION (expr) && (filename = EXPR_FILENAME (expr)))\n+    return filename;\n   else\n     return \"???\";\n }"}]}