{"sha": "5de8da9b685658bc6132ef052ecbd06fe7163128", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlOGRhOWI2ODU2NThiYzYxMzJlZjA1MmVjYmQwNmZlNzE2MzEyOA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2010-01-09T14:40:59Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2010-01-09T14:40:59Z"}, "message": "re PR middle-end/42363 (ICE: verify_flow_info failed for gcc.c-torture/compile/pr37913.c -O1 -g)\n\ngcc/ChangeLog:\nPR middle-end/42363\n* gimplify.c (gimplify_modify_expr): Drop lhs on noreturn calls.\n* tree-cfg.c (is_ctrl_altering_stmt): Don't compute flags twice.\n(verify_gimple_call): Reject LHS in noreturn calls.\ngcc/testsuite/ChangeLog:\nPR middle-end/42363\n* gcc.dg/torture/pr42363.c: New.\n\nFrom-SVN: r155762", "tree": {"sha": "49595835261873911612415bb60c38eb029e5e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49595835261873911612415bb60c38eb029e5e77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5de8da9b685658bc6132ef052ecbd06fe7163128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de8da9b685658bc6132ef052ecbd06fe7163128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de8da9b685658bc6132ef052ecbd06fe7163128", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de8da9b685658bc6132ef052ecbd06fe7163128/comments", "author": null, "committer": null, "parents": [{"sha": "684f25f432c571fc5d2dfd03a3c3389a801b75bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684f25f432c571fc5d2dfd03a3c3389a801b75bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/684f25f432c571fc5d2dfd03a3c3389a801b75bc"}], "stats": {"total": 107, "additions": 105, "deletions": 2}, "files": [{"sha": "2e66d7e72d84e20096c2d6771ac22aa812dca114", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8da9b685658bc6132ef052ecbd06fe7163128/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8da9b685658bc6132ef052ecbd06fe7163128/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5de8da9b685658bc6132ef052ecbd06fe7163128", "patch": "@@ -1,3 +1,10 @@\n+2010-01-09  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR middle-end/42363\n+\t* gimplify.c (gimplify_modify_expr): Drop lhs on noreturn calls.\n+\t* tree-cfg.c (is_ctrl_altering_stmt): Don't compute flags twice.\n+\t(verify_gimple_call): Reject LHS in noreturn calls.\n+\n 2010-01-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42604"}, {"sha": "e09cb3e429be2df902dafa619895ea578d7a159b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8da9b685658bc6132ef052ecbd06fe7163128/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8da9b685658bc6132ef052ecbd06fe7163128/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=5de8da9b685658bc6132ef052ecbd06fe7163128", "patch": "@@ -4407,7 +4407,8 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n       /* Since the RHS is a CALL_EXPR, we need to create a GIMPLE_CALL\n \t instead of a GIMPLE_ASSIGN.  */\n       assign = gimple_build_call_from_tree (*from_p);\n-      gimple_call_set_lhs (assign, *to_p);\n+      if (!gimple_call_noreturn_p (assign))\n+\tgimple_call_set_lhs (assign, *to_p);\n     }\n   else\n     {"}, {"sha": "83535c06b0e36b0e86a114aa0a0046a7571fdc2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8da9b685658bc6132ef052ecbd06fe7163128/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8da9b685658bc6132ef052ecbd06fe7163128/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5de8da9b685658bc6132ef052ecbd06fe7163128", "patch": "@@ -1,3 +1,8 @@\n+2010-01-09  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR middle-end/42363\n+\t* gcc.dg/torture/pr42363.c: New.\n+\n 2010-01-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42604"}, {"sha": "9c9da1373dd49498705fcef8f87739fce228fc77", "filename": "gcc/testsuite/gcc.dg/torture/pr42363.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8da9b685658bc6132ef052ecbd06fe7163128/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr42363.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8da9b685658bc6132ef052ecbd06fe7163128/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr42363.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr42363.c?ref=5de8da9b685658bc6132ef052ecbd06fe7163128", "patch": "@@ -0,0 +1,84 @@\n+/* PR middle-end/pr42363, extended from the test for PR middle-end/37913.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-g\" } */\n+\n+void foo (void) __attribute__ ((noreturn));\n+\n+static int __attribute__ ((noreturn))\n+bar (void)\n+{\n+  foo ();\n+}\n+\n+int\n+baz (void)\n+{\n+  int i = bar ();\n+  return i + 1;\n+}\n+\n+int fooz (void) __attribute__ ((noreturn));\n+\n+static int __attribute__ ((noreturn))\n+bart (void)\n+{\n+  return fooz (); /* { dg-warning \"noreturn\" } */\n+}\n+\n+int bazr (void)\n+{\n+  int i = bart ();\n+  return i + 1;\n+}\n+\n+static inline int\n+bard (void)\n+{\n+  return fooz ();\n+}\n+\n+int bizr (void)\n+{\n+  int i, j;\n+\n+  i = j = bard ();\n+\n+  return i + 1;\n+}\n+\n+/* This might be regarded as pure and folded, rather than inlined.\n+   It's pure evil.  */\n+static int __attribute__ ((pure, const, noreturn))\n+barf (void)\n+{\n+} /* { dg-warning \"does return\" } */\n+\n+static int __attribute__ ((pure, const))\n+bark (void)\n+{\n+  barf ();\n+}\n+\n+int buzr (void)\n+{\n+  int i, j;\n+\n+  i = j = bark () + bark ();\n+\n+  return i + 1;\n+}\n+\n+int buzt (void)\n+{\n+  int i, j;\n+\n+  i = j = barf () + barf ();\n+\n+  return i + 1;\n+}\n+\n+void bust (void)\n+{\n+  while (barf ())\n+    ;\n+}"}, {"sha": "b6e9006072c154abe85c50734fa442d1c216a33a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8da9b685658bc6132ef052ecbd06fe7163128/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8da9b685658bc6132ef052ecbd06fe7163128/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=5de8da9b685658bc6132ef052ecbd06fe7163128", "patch": "@@ -2230,7 +2230,7 @@ is_ctrl_altering_stmt (gimple t)\n \t  return true;\n \n \t/* A call also alters control flow if it does not return.  */\n-\tif (gimple_call_flags (t) & ECF_NORETURN)\n+\tif (flags & ECF_NORETURN)\n \t  return true;\n       }\n       break;\n@@ -2963,6 +2963,12 @@ verify_gimple_call (gimple stmt)\n       return true;\n     }\n \n+  if (gimple_call_lhs (stmt) && gimple_call_noreturn_p (stmt))\n+    {\n+      error (\"LHS in noreturn call\");\n+      return true;\n+    }\n+\n   fntype = TREE_TYPE (TREE_TYPE (fn));\n   if (gimple_call_lhs (stmt)\n       && !useless_type_conversion_p (TREE_TYPE (gimple_call_lhs (stmt)),"}]}