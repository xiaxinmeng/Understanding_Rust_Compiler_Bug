{"sha": "90e6443f3aa73aebe087e6023efae68bb39e2cba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlNjQ0M2YzYWE3M2FlYmUwODdlNjAyM2VmYWU2OGJiMzllMmNiYQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2017-07-28T15:12:32Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-07-28T15:12:32Z"}, "message": "aarch64.md (mov<mode>): Generalize.\n\n2017-07-28  Tamar Christina  <tamar.christina@arm.com>\n            Richard Sandiford <richard.sandiford@linaro.org>\n\n        * config/aarch64/aarch64.md (mov<mode>): Generalize.\n        (*movhf_aarch64, *movsf_aarch64, *movdf_aarch64):\n        Add integer and movi cases.\n        (movi-split-hf-df-sf split, fp16): New.\n        (enabled): Added TARGET_FP_F16INST.\n        * config/aarch64/iterators.md (GPF_HF): New.\n        * config/aarch64/predicates.md (aarch64_reg_or_fp_float): New.\n\n\nCo-Authored-By: Richard Sandiford <richard.sandiford@linaro.org>\n\nFrom-SVN: r250673", "tree": {"sha": "01dc8b03334ab93ec3cdbfe18ee5d21599e6d4cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01dc8b03334ab93ec3cdbfe18ee5d21599e6d4cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90e6443f3aa73aebe087e6023efae68bb39e2cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e6443f3aa73aebe087e6023efae68bb39e2cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e6443f3aa73aebe087e6023efae68bb39e2cba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e6443f3aa73aebe087e6023efae68bb39e2cba/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a217096563e356fa03cc5163665148227613c62f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a217096563e356fa03cc5163665148227613c62f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a217096563e356fa03cc5163665148227613c62f"}], "stats": {"total": 108, "additions": 82, "deletions": 26}, "files": [{"sha": "67c914807c602dc4ddeed2a44ff03b8ecbc88e18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e6443f3aa73aebe087e6023efae68bb39e2cba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e6443f3aa73aebe087e6023efae68bb39e2cba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90e6443f3aa73aebe087e6023efae68bb39e2cba", "patch": "@@ -1,3 +1,14 @@\n+2017-07-28  Tamar Christina  <tamar.christina@arm.com>\n+\t    Richard Sandiford <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/aarch64.md (mov<mode>): Generalize.\n+\t(*movhf_aarch64, *movsf_aarch64, *movdf_aarch64):\n+\tAdd integer and movi cases.\n+\t(movi-split-hf-df-sf split, fp16): New.\n+\t(enabled): Added TARGET_FP_F16INST.\n+\t* config/aarch64/iterators.md (GPF_HF): New.\n+\t* config/aarch64/predicates.md (aarch64_reg_or_fp_float): New.\n+\n 2017-07-28  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/aarch64.c"}, {"sha": "33cbf1f7ac64da0ae23f786babe9e93ce0e2b35d", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 63, "deletions": 26, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e6443f3aa73aebe087e6023efae68bb39e2cba/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e6443f3aa73aebe087e6023efae68bb39e2cba/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=90e6443f3aa73aebe087e6023efae68bb39e2cba", "patch": "@@ -181,6 +181,11 @@\n ;; will be disabled when !TARGET_FLOAT.\n (define_attr \"fp\" \"no,yes\" (const_string \"no\"))\n \n+;; Attribute that specifies whether or not the instruction touches half\n+;; precision fp registers.  When this is set to yes for an alternative,\n+;; that alternative will be disabled when !TARGET_FP_F16INST.\n+(define_attr \"fp16\" \"no,yes\" (const_string \"no\"))\n+\n ;; Attribute that specifies whether or not the instruction touches simd\n ;; registers.  When this is set to yes for an alternative, that alternative\n ;; will be disabled when !TARGET_SIMD.\n@@ -194,11 +199,14 @@\n ;; registers when -mgeneral-regs-only is specified.\n (define_attr \"enabled\" \"no,yes\"\n   (cond [(ior\n-\t(and (eq_attr \"fp\" \"yes\")\n-\t     (eq (symbol_ref \"TARGET_FLOAT\") (const_int 0)))\n-\t(and (eq_attr \"simd\" \"yes\")\n-\t     (eq (symbol_ref \"TARGET_SIMD\") (const_int 0))))\n-\t     (const_string \"no\")\n+\t    (ior\n+\t\t(and (eq_attr \"fp\" \"yes\")\n+\t\t     (eq (symbol_ref \"TARGET_FLOAT\") (const_int 0)))\n+\t\t(and (eq_attr \"simd\" \"yes\")\n+\t\t     (eq (symbol_ref \"TARGET_SIMD\") (const_int 0))))\n+\t    (and (eq_attr \"fp16\" \"yes\")\n+\t\t (eq (symbol_ref \"TARGET_FP_F16INST\") (const_int 0))))\n+\t    (const_string \"no\")\n \t] (const_string \"yes\")))\n \n ;; Attribute that specifies whether we are dealing with a branch to a\n@@ -1064,65 +1072,94 @@\n )\n \n (define_insn \"*movhf_aarch64\"\n-  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=w,w  ,?r,w,w,m,r,m ,r\")\n-\t(match_operand:HF 1 \"general_operand\"      \"Y ,?rY, w,w,m,w,m,rY,r\"))]\n+  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=w,w  ,?r,w,w  ,w  ,w,m,r,m ,r\")\n+\t(match_operand:HF 1 \"general_operand\"      \"Y ,?rY, w,w,Ufc,Uvi,m,w,m,rY,r\"))]\n   \"TARGET_FLOAT && (register_operand (operands[0], HFmode)\n-    || aarch64_reg_or_fp_zero (operands[1], HFmode))\"\n+    || aarch64_reg_or_fp_float (operands[1], HFmode))\"\n   \"@\n    movi\\\\t%0.4h, #0\n-   mov\\\\t%0.h[0], %w1\n+   fmov\\\\t%h0, %w1\n    umov\\\\t%w0, %1.h[0]\n    mov\\\\t%0.h[0], %1.h[0]\n+   fmov\\\\t%h0, %1\n+   * return aarch64_output_scalar_simd_mov_immediate (operands[1], SImode);\n    ldr\\\\t%h0, %1\n    str\\\\t%h1, %0\n    ldrh\\\\t%w0, %1\n    strh\\\\t%w1, %0\n    mov\\\\t%w0, %w1\"\n-  [(set_attr \"type\" \"neon_move,neon_from_gp,neon_to_gp,neon_move,\\\n-                     f_loads,f_stores,load1,store1,mov_reg\")\n-   (set_attr \"simd\" \"yes,yes,yes,yes,*,*,*,*,*\")]\n+  [(set_attr \"type\" \"neon_move,f_mcr,neon_to_gp,neon_move,fconsts, \\\n+\t\t     neon_move,f_loads,f_stores,load1,store1,mov_reg\")\n+   (set_attr \"simd\" \"yes,*,yes,yes,*,yes,*,*,*,*,*\")\n+   (set_attr \"fp16\"   \"*,yes,*,*,yes,*,*,*,*,*,*\")]\n )\n \n (define_insn \"*movsf_aarch64\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=w,w  ,?r,w,w  ,w,m,r,m ,r\")\n-\t(match_operand:SF 1 \"general_operand\"      \"Y ,?rY, w,w,Ufc,m,w,m,rY,r\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=w,w  ,?r,w,w  ,w  ,w,m,r,m ,r,r\")\n+\t(match_operand:SF 1 \"general_operand\"      \"Y ,?rY, w,w,Ufc,Uvi,m,w,m,rY,r,M\"))]\n   \"TARGET_FLOAT && (register_operand (operands[0], SFmode)\n-    || aarch64_reg_or_fp_zero (operands[1], SFmode))\"\n+    || aarch64_reg_or_fp_float (operands[1], SFmode))\"\n   \"@\n    movi\\\\t%0.2s, #0\n    fmov\\\\t%s0, %w1\n    fmov\\\\t%w0, %s1\n    fmov\\\\t%s0, %s1\n    fmov\\\\t%s0, %1\n+   * return aarch64_output_scalar_simd_mov_immediate (operands[1], SImode);\n    ldr\\\\t%s0, %1\n    str\\\\t%s1, %0\n    ldr\\\\t%w0, %1\n    str\\\\t%w1, %0\n-   mov\\\\t%w0, %w1\"\n-  [(set_attr \"type\" \"neon_move,f_mcr,f_mrc,fmov,fconsts,\\\n-                     f_loads,f_stores,load1,store1,mov_reg\")\n-   (set_attr \"simd\" \"yes,*,*,*,*,*,*,*,*,*\")]\n+   mov\\\\t%w0, %w1\n+   mov\\\\t%w0, %1\"\n+  [(set_attr \"type\" \"neon_move,f_mcr,f_mrc,fmov,fconsts,neon_move,\\\n+\t\t     f_loads,f_stores,load1,store1,mov_reg,\\\n+\t\t     fconsts\")\n+   (set_attr \"simd\" \"yes,*,*,*,*,yes,*,*,*,*,*,*\")]\n )\n \n (define_insn \"*movdf_aarch64\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=w,w  ,?r,w,w  ,w,m,r,m ,r\")\n-\t(match_operand:DF 1 \"general_operand\"      \"Y ,?rY, w,w,Ufc,m,w,m,rY,r\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=w, w  ,?r,w,w  ,w  ,w,m,r,m ,r,r\")\n+\t(match_operand:DF 1 \"general_operand\"      \"Y , ?rY, w,w,Ufc,Uvi,m,w,m,rY,r,N\"))]\n   \"TARGET_FLOAT && (register_operand (operands[0], DFmode)\n-    || aarch64_reg_or_fp_zero (operands[1], DFmode))\"\n+    || aarch64_reg_or_fp_float (operands[1], DFmode))\"\n   \"@\n    movi\\\\t%d0, #0\n    fmov\\\\t%d0, %x1\n    fmov\\\\t%x0, %d1\n    fmov\\\\t%d0, %d1\n    fmov\\\\t%d0, %1\n+   * return aarch64_output_scalar_simd_mov_immediate (operands[1], DImode);\n    ldr\\\\t%d0, %1\n    str\\\\t%d1, %0\n    ldr\\\\t%x0, %1\n    str\\\\t%x1, %0\n-   mov\\\\t%x0, %x1\"\n-  [(set_attr \"type\" \"neon_move,f_mcr,f_mrc,fmov,fconstd,\\\n-                     f_loadd,f_stored,load1,store1,mov_reg\")\n-   (set_attr \"simd\" \"yes,*,*,*,*,*,*,*,*,*\")]\n+   mov\\\\t%x0, %x1\n+   mov\\\\t%x0, %1\"\n+  [(set_attr \"type\" \"neon_move,f_mcr,f_mrc,fmov,fconstd,neon_move,\\\n+\t\t     f_loadd,f_stored,load1,store1,mov_reg,\\\n+\t\t     fconstd\")\n+   (set_attr \"simd\" \"yes,*,*,*,*,yes,*,*,*,*,*,*\")]\n+)\n+\n+(define_split\n+  [(set (match_operand:GPF_HF 0 \"nonimmediate_operand\")\n+\t(match_operand:GPF_HF 1 \"general_operand\"))]\n+  \"can_create_pseudo_p ()\n+   && !aarch64_can_const_movi_rtx_p (operands[1], <MODE>mode)\n+   && !aarch64_float_const_representable_p (operands[1])\n+   &&  aarch64_float_const_rtx_p (operands[1])\"\n+  [(const_int 0)]\n+  {\n+    unsigned HOST_WIDE_INT ival;\n+    if (!aarch64_reinterpret_float_as_int (operands[1], &ival))\n+      FAIL;\n+\n+    rtx tmp = gen_reg_rtx (<FCVT_TARGET>mode);\n+    emit_move_insn (tmp, gen_int_mode (ival, <FCVT_TARGET>mode));\n+    emit_move_insn (operands[0], gen_lowpart (<MODE>mode, tmp));\n+    DONE;\n+  }\n )\n \n (define_insn \"*movtf_aarch64\""}, {"sha": "067cef785331a243632715e0d0fe35a314eeebff", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e6443f3aa73aebe087e6023efae68bb39e2cba/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e6443f3aa73aebe087e6023efae68bb39e2cba/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=90e6443f3aa73aebe087e6023efae68bb39e2cba", "patch": "@@ -44,6 +44,9 @@\n ;; Iterator for all scalar floating point modes (HF, SF, DF)\n (define_mode_iterator GPF_F16 [(HF \"AARCH64_ISA_F16\") SF DF])\n \n+;; Iterator for all scalar floating point modes (HF, SF, DF)\n+(define_mode_iterator GPF_HF [HF SF DF])\n+\n ;; Iterator for all scalar floating point modes (HF, SF, DF and TF)\n (define_mode_iterator GPF_TF_F16 [HF SF DF TF])\n "}, {"sha": "95d28cfa33c6e06c47b6c666af6d8c2d6cef20f4", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e6443f3aa73aebe087e6023efae68bb39e2cba/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e6443f3aa73aebe087e6023efae68bb39e2cba/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=90e6443f3aa73aebe087e6023efae68bb39e2cba", "patch": "@@ -57,6 +57,11 @@\n        (ior (match_operand 0 \"register_operand\")\n \t    (match_test \"op == const0_rtx\"))))\n \n+(define_predicate \"aarch64_reg_or_fp_float\"\n+  (ior (match_operand 0 \"register_operand\")\n+\t(and (match_code \"const_double\")\n+\t     (match_test \"aarch64_float_const_rtx_p (op)\"))))\n+\n (define_predicate \"aarch64_reg_or_fp_zero\"\n   (ior (match_operand 0 \"register_operand\")\n \t(and (match_code \"const_double\")"}]}