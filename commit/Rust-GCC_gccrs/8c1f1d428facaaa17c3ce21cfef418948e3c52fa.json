{"sha": "8c1f1d428facaaa17c3ce21cfef418948e3c52fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMxZjFkNDI4ZmFjYWFhMTdjM2NlMjFjZmVmNDE4OTQ4ZTNjNTJmYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-15T13:18:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-15T13:18:32Z"}, "message": "re PR tree-optimization/53355 (Autovectorization of a simple loop could be improved.)\n\n2012-05-15  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/53355\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Handle LSHIFT_EXPRs\n\tby constants.\n\n\t* gcc.dg/tree-ssa/vrp67.c: New testcase.\n\nFrom-SVN: r187535", "tree": {"sha": "83af2b9b3ebecd6808484f834799b5c45641c689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83af2b9b3ebecd6808484f834799b5c45641c689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c1f1d428facaaa17c3ce21cfef418948e3c52fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1f1d428facaaa17c3ce21cfef418948e3c52fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c1f1d428facaaa17c3ce21cfef418948e3c52fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1f1d428facaaa17c3ce21cfef418948e3c52fa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ce499ae1a08089cbafa46e9577de7096298f10a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce499ae1a08089cbafa46e9577de7096298f10a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce499ae1a08089cbafa46e9577de7096298f10a"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "c1e22974f437002f56e9d766caa1da577f329a4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1f1d428facaaa17c3ce21cfef418948e3c52fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1f1d428facaaa17c3ce21cfef418948e3c52fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c1f1d428facaaa17c3ce21cfef418948e3c52fa", "patch": "@@ -1,3 +1,9 @@\n+2012-05-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53355\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Handle LSHIFT_EXPRs\n+\tby constants.\n+\n 2012-05-15  Tristan Gingold  <gingold@adacore.com>\n \n       * tree-ssa-strlen.c (get_string_length): Convert lhs if needed."}, {"sha": "8e82b012b033fd6635af588b9d6ed2198c774b98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1f1d428facaaa17c3ce21cfef418948e3c52fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1f1d428facaaa17c3ce21cfef418948e3c52fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c1f1d428facaaa17c3ce21cfef418948e3c52fa", "patch": "@@ -1,3 +1,8 @@\n+2012-05-15  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53355\n+\t* gcc.dg/tree-ssa/vrp67.c: New testcase.\n+\n 2012-05-15  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* gfortran.dg/*.f90: Remove now redundant manual"}, {"sha": "f02d83780a6975eb506faa95c5c0e96cbb4708c0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp67.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1f1d428facaaa17c3ce21cfef418948e3c52fa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1f1d428facaaa17c3ce21cfef418948e3c52fa/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp67.c?ref=8c1f1d428facaaa17c3ce21cfef418948e3c52fa", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+unsigned foo (unsigned i)\n+{\n+  if (i == 2)\n+    {\n+      i = i << 2;\n+      if (i != 8)\n+\tlink_error ();\n+    }\n+  return i;\n+}\n+unsigned bar (unsigned i)\n+{\n+  if (i == 1 << (sizeof (unsigned) * 8 - 1))\n+    {\n+      i = i << 1;\n+      if (i != 0)\n+\tlink_error ();\n+    }\n+  return i;\n+}\n+unsigned baz (unsigned i)\n+{\n+  i = i & 15;\n+  if (i == 0)\n+    return 0;\n+  i = 1000 - i;\n+  i >>= 1;\n+  i <<= 1;\n+  if (i == 0)\n+    link_error ();\n+  return i;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Folding predicate\" 3 \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "4dc942cc388a99a9fcbc89b7c8953758dec5831c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1f1d428facaaa17c3ce21cfef418948e3c52fa/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1f1d428facaaa17c3ce21cfef418948e3c52fa/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=8c1f1d428facaaa17c3ce21cfef418948e3c52fa", "patch": "@@ -2403,6 +2403,7 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n       && code != ROUND_DIV_EXPR\n       && code != TRUNC_MOD_EXPR\n       && code != RSHIFT_EXPR\n+      && code != LSHIFT_EXPR\n       && code != MIN_EXPR\n       && code != MAX_EXPR\n       && code != BIT_AND_EXPR\n@@ -2596,6 +2597,40 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n       extract_range_from_multiplicative_op_1 (vr, code, &vr0, &vr1);\n       return;\n     }\n+  else if (code == LSHIFT_EXPR)\n+    {\n+      /* If we have a LSHIFT_EXPR with any shift values outside [0..prec-1],\n+\t then drop to VR_VARYING.  Outside of this range we get undefined\n+\t behavior from the shift operation.  We cannot even trust\n+\t SHIFT_COUNT_TRUNCATED at this stage, because that applies to rtl\n+\t shifts, and the operation at the tree level may be widened.  */\n+      if (vr1.type != VR_RANGE\n+\t  || !value_range_nonnegative_p (&vr1)\n+\t  || TREE_CODE (vr1.max) != INTEGER_CST\n+\t  || compare_tree_int (vr1.max, TYPE_PRECISION (expr_type) - 1) == 1)\n+\t{\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n+\t}\n+\n+      /* We can map shifts by constants to MULT_EXPR handling.  */\n+      if (range_int_cst_singleton_p (&vr1))\n+\t{\n+\t  value_range_t vr1p = { VR_RANGE, NULL_TREE, NULL_TREE, NULL };\n+\t  vr1p.min\n+\t    = double_int_to_tree (expr_type,\n+\t\t\t\t  double_int_lshift (double_int_one,\n+\t\t\t\t\t\t     TREE_INT_CST_LOW (vr1.min),\n+\t\t\t\t\t\t     TYPE_PRECISION (expr_type),\n+\t\t\t\t\t\t     false));\n+\t  vr1p.max = vr1p.min;\n+\t  extract_range_from_multiplicative_op_1 (vr, MULT_EXPR, &vr0, &vr1p);\n+\t  return;\n+\t}\n+\n+      set_value_range_to_varying (vr);\n+      return;\n+    }\n   else if (code == TRUNC_DIV_EXPR\n \t   || code == FLOOR_DIV_EXPR\n \t   || code == CEIL_DIV_EXPR"}]}