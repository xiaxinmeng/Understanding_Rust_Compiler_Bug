{"sha": "839b422f0838f87583907b8146e9fc7ad111cad0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM5YjQyMmYwODM4Zjg3NTgzOTA3YjgxNDZlOWZjN2FkMTExY2FkMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-03-21T11:53:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-03-21T11:53:39Z"}, "message": "tree.h (DECL_DEBUG_EXPR_IS_FROM): Rename to ...\n\n2013-03-21  Richard Biener  <rguenther@suse.de>\n\n\t* tree.h (DECL_DEBUG_EXPR_IS_FROM): Rename to ...\n\t(DECL_HAS_DEBUG_EXPR_P): ... this.  Guard properly.\n\t* tree.c (copy_node_stat): Do not copy DECL_HAS_DEBUG_EXPR_P.\n\t* dwarf2out.c (add_var_loc_to_decl): Use DECL_HAS_DEBUG_EXPR_P\n\tinstead of DECL_DEBUG_EXPR_IS_FROM.\n\t* gimplify.c (gimplify_modify_expr): Likewise.\n\t* tree-cfg.c (verify_expr_location_1): Likewise.\n\t* tree-complex.c (create_one_component_var): Likewise.\n\t* tree-sra.c (create_access_replacement): Likewise.\n\t* tree-ssa-live.c (clear_unused_block_pointer_1): Likewise.\n\t(clear_unused_block_pointer): Likewise.\n\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Likewise.\n\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Likewise.\n\t* var-tracking.c (var_debug_decl): Likewise.\n\t(track_expr_p): Likewise.\n\t* tree-inline.c (add_local_variables): Likewise.  Set\n\tDECL_HAS_DEBUG_EXPR_P after copying it.\n\t* tree-diagnostic.c (default_tree_printer): Use DECL_HAS_DEBUG_EXPR_P\n\tinstead of DECL_DEBUG_EXPR_IS_FROM.  Guard properly.\n\n\tc/\n\t* c-objc-common.c (c_tree_printer): Use DECL_HAS_DEBUG_EXPR_P\n\tinstead of DECL_DEBUG_EXPR_IS_FROM.  Guard properly.\n\n\tcp/\n\t* error.c (cp_printer): Use DECL_HAS_DEBUG_EXPR_P instead of\n\tDECL_DEBUG_EXPR_IS_FROM.  Guard properly.\n\nFrom-SVN: r196864", "tree": {"sha": "429a7a8909f7cb564dbe6f3302676338422f697f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/429a7a8909f7cb564dbe6f3302676338422f697f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/839b422f0838f87583907b8146e9fc7ad111cad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839b422f0838f87583907b8146e9fc7ad111cad0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839b422f0838f87583907b8146e9fc7ad111cad0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839b422f0838f87583907b8146e9fc7ad111cad0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe04878d00b2847e8982e96d0a274e8c3b8d8f0f"}], "stats": {"total": 100, "additions": 68, "deletions": 32}, "files": [{"sha": "499e9d30fb772063076a4f5dd3a95c9d29dde0a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -1,3 +1,25 @@\n+2013-03-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree.h (DECL_DEBUG_EXPR_IS_FROM): Rename to ...\n+\t(DECL_HAS_DEBUG_EXPR_P): ... this.  Guard properly.\n+\t* tree.c (copy_node_stat): Do not copy DECL_HAS_DEBUG_EXPR_P.\n+\t* dwarf2out.c (add_var_loc_to_decl): Use DECL_HAS_DEBUG_EXPR_P\n+\tinstead of DECL_DEBUG_EXPR_IS_FROM.\n+\t* gimplify.c (gimplify_modify_expr): Likewise.\n+\t* tree-cfg.c (verify_expr_location_1): Likewise.\n+\t* tree-complex.c (create_one_component_var): Likewise.\n+\t* tree-sra.c (create_access_replacement): Likewise.\n+\t* tree-ssa-live.c (clear_unused_block_pointer_1): Likewise.\n+\t(clear_unused_block_pointer): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Likewise.\n+\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Likewise.\n+\t* var-tracking.c (var_debug_decl): Likewise.\n+\t(track_expr_p): Likewise.\n+\t* tree-inline.c (add_local_variables): Likewise.  Set\n+\tDECL_HAS_DEBUG_EXPR_P after copying it.\n+\t* tree-diagnostic.c (default_tree_printer): Use DECL_HAS_DEBUG_EXPR_P\n+\tinstead of DECL_DEBUG_EXPR_IS_FROM.  Guard properly.\n+\n 2013-03-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR bootstrap/56656"}, {"sha": "a76fb3e88621ccda71f422785ff8c29d1e06f08e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -1,3 +1,8 @@\n+2013-03-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* c-objc-common.c (c_tree_printer): Use DECL_HAS_DEBUG_EXPR_P\n+\tinstead of DECL_DEBUG_EXPR_IS_FROM.  Guard properly.\n+\n 2013-02-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/44938"}, {"sha": "8e73856ac18815c6018d9f5b5d87614efc18ad72", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -112,7 +112,7 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n   switch (*spec)\n     {\n     case 'D':\n-      if (DECL_DEBUG_EXPR_IS_FROM (t) && DECL_DEBUG_EXPR (t))\n+      if (TREE_CODE (t) == VAR_DECL && DECL_HAS_DEBUG_EXPR_P (t))\n \t{\n \t  t = DECL_DEBUG_EXPR (t);\n \t  if (!DECL_P (t))"}, {"sha": "89a828f4ad2903174801c39e2a18497967244deb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -1,3 +1,8 @@\n+2013-03-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* error.c (cp_printer): Use DECL_HAS_DEBUG_EXPR_P instead of\n+\tDECL_DEBUG_EXPR_IS_FROM.  Guard properly.\n+\n 2013-03-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/56646"}, {"sha": "bcb0274c1b61826d0d044b1a3f783c5768bba910", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -3283,8 +3283,8 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n     case 'D':\n       {\n \ttree temp = next_tree;\n-\tif (DECL_P (temp)\n-\t    && DECL_DEBUG_EXPR_IS_FROM (temp) && DECL_DEBUG_EXPR (temp))\n+\tif (TREE_CODE (temp) == VAR_DECL\n+\t    && DECL_HAS_DEBUG_EXPR_P (temp))\n \t  {\n \t    temp = DECL_DEBUG_EXPR (temp);\n \t    if (!DECL_P (temp))"}, {"sha": "a5d5dc408a239d8698c75b285acbe7456ed63ee4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -5020,13 +5020,13 @@ add_var_loc_to_decl (tree decl, rtx loc_note, const char *label)\n   struct var_loc_node *loc = NULL;\n   HOST_WIDE_INT bitsize = -1, bitpos = -1;\n \n-  if (DECL_DEBUG_EXPR_IS_FROM (decl))\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && DECL_HAS_DEBUG_EXPR_P (decl))\n     {\n       tree realdecl = DECL_DEBUG_EXPR (decl);\n-      if (realdecl\n-\t  && (handled_component_p (realdecl)\n-\t      || (TREE_CODE (realdecl) == MEM_REF\n-\t\t  && TREE_CODE (TREE_OPERAND (realdecl, 0)) == ADDR_EXPR)))\n+      if (handled_component_p (realdecl)\n+\t  || (TREE_CODE (realdecl) == MEM_REF\n+\t      && TREE_CODE (TREE_OPERAND (realdecl, 0)) == ADDR_EXPR))\n \t{\n \t  HOST_WIDE_INT maxsize;\n \t  tree innerdecl;"}, {"sha": "a6a6565ce04fc1a59ec02a0a2b77217b2653d539", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -4947,7 +4947,7 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n       if (!DECL_NAME (*from_p) && DECL_NAME (*to_p))\n \tDECL_NAME (*from_p)\n \t  = create_tmp_var_name (IDENTIFIER_POINTER (DECL_NAME (*to_p)));\n-      DECL_DEBUG_EXPR_IS_FROM (*from_p) = 1;\n+      DECL_HAS_DEBUG_EXPR_P (*from_p) = 1;\n       SET_DECL_DEBUG_EXPR (*from_p, *to_p);\n    }\n "}, {"sha": "6e6b2c5525d71364551faaef5acc984f1841c3c1", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -4524,7 +4524,7 @@ verify_expr_location_1 (tree *tp, int *walk_subtrees, void *data)\n   struct pointer_set_t *blocks = (struct pointer_set_t *) data;\n \n   if (TREE_CODE (*tp) == VAR_DECL\n-      && DECL_DEBUG_EXPR_IS_FROM (*tp))\n+      && DECL_HAS_DEBUG_EXPR_P (*tp))\n     {\n       tree t = DECL_DEBUG_EXPR (*tp);\n       tree addr = walk_tree (&t, verify_expr_location_1, blocks, NULL);"}, {"sha": "f8dbe0a8519d425453818bcb1f34009d07ebb0bf", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -428,7 +428,7 @@ create_one_component_var (tree type, tree orig, const char *prefix,\n       DECL_NAME (r) = get_identifier (ACONCAT ((name, suffix, NULL)));\n \n       SET_DECL_DEBUG_EXPR (r, build1 (code, type, orig));\n-      DECL_DEBUG_EXPR_IS_FROM (r) = 1;\n+      DECL_HAS_DEBUG_EXPR_P (r) = 1;\n       DECL_IGNORED_P (r) = 0;\n       TREE_NO_WARNING (r) = TREE_NO_WARNING (orig);\n     }"}, {"sha": "087cf6acb715f7f7259937a415fa071423f17050", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -268,7 +268,7 @@ default_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \n     case 'D':\n       t = va_arg (*text->args_ptr, tree);\n-      if (DECL_DEBUG_EXPR_IS_FROM (t) && DECL_DEBUG_EXPR (t))\n+      if (TREE_CODE (t) == VAR_DECL && DECL_HAS_DEBUG_EXPR_P (t))\n \tt = DECL_DEBUG_EXPR (t);\n       break;\n "}, {"sha": "a41dd5aeb82523bf3514a5268d8f53dc5caddd56", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -3762,7 +3762,7 @@ add_local_variables (struct function *callee, struct function *caller,\n \n         /* Remap debug-expressions.  */\n \tif (TREE_CODE (new_var) == VAR_DECL\n-\t    && DECL_DEBUG_EXPR_IS_FROM (new_var)\n+\t    && DECL_HAS_DEBUG_EXPR_P (var)\n \t    && new_var != var)\n \t  {\n \t    tree tem = DECL_DEBUG_EXPR (var);\n@@ -3772,6 +3772,7 @@ add_local_variables (struct function *callee, struct function *caller,\n \t    id->remapping_type_depth--;\n \t    id->regimplify = old_regimplify;\n \t    SET_DECL_DEBUG_EXPR (new_var, tem);\n+\t    DECL_HAS_DEBUG_EXPR_P (new_var) = 1;\n \t  }\n \tadd_local_decl (caller, new_var);\n       }"}, {"sha": "93446c2151ae7d89989d8639336bb41ea9a25e4c", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -1961,7 +1961,7 @@ create_access_replacement (struct access *access)\n       if (!fail)\n \t{\n \t  SET_DECL_DEBUG_EXPR (repl, debug_expr);\n-\t  DECL_DEBUG_EXPR_IS_FROM (repl) = 1;\n+\t  DECL_HAS_DEBUG_EXPR_P (repl) = 1;\n \t}\n       if (access->grp_no_warning)\n \tTREE_NO_WARNING (repl) = 1;"}, {"sha": "713458f8e98a1b31bf6eb35520fa5fecfd0719fb", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -620,7 +620,7 @@ clear_unused_block_pointer_1 (tree *tp, int *, void *)\n   if (EXPR_P (*tp) && TREE_BLOCK (*tp)\n       && !TREE_USED (TREE_BLOCK (*tp)))\n     TREE_SET_BLOCK (*tp, NULL);\n-  if (TREE_CODE (*tp) == VAR_DECL && DECL_DEBUG_EXPR_IS_FROM (*tp))\n+  if (TREE_CODE (*tp) == VAR_DECL && DECL_HAS_DEBUG_EXPR_P (*tp))\n     {\n       tree debug_expr = DECL_DEBUG_EXPR (*tp);\n       walk_tree (&debug_expr, clear_unused_block_pointer_1, NULL, NULL);\n@@ -640,7 +640,7 @@ clear_unused_block_pointer (void)\n   unsigned i;\n \n   FOR_EACH_LOCAL_DECL (cfun, i, t)\n-    if (TREE_CODE (t) == VAR_DECL && DECL_DEBUG_EXPR_IS_FROM (t))\n+    if (TREE_CODE (t) == VAR_DECL && DECL_HAS_DEBUG_EXPR_P (t))\n       {\n \ttree debug_expr = DECL_DEBUG_EXPR (t);\n \twalk_tree (&debug_expr, clear_unused_block_pointer_1, NULL, NULL);"}, {"sha": "b5ead0f9eb7219e2ea2d894565a2d93afac0244d", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -203,7 +203,6 @@ unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_ARTIFICIAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_USER_ALIGN (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_PRESERVE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  DECL_DEBUG_EXPR_IS_FROM (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_EXTERNAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_GIMPLE_REG_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_ALIGN (expr) = (unsigned) bp_unpack_var_len_unsigned (bp);\n@@ -226,7 +225,10 @@ unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n     }\n \n   if (TREE_CODE (expr) == VAR_DECL)\n-    DECL_NONLOCAL_FRAME (expr) = (unsigned) bp_unpack_value (bp, 1);\n+    {\n+      DECL_HAS_DEBUG_EXPR_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n+      DECL_NONLOCAL_FRAME (expr) = (unsigned) bp_unpack_value (bp, 1);\n+    }\n \n   if (TREE_CODE (expr) == RESULT_DECL\n       || TREE_CODE (expr) == PARM_DECL"}, {"sha": "2625dd6b42f7b007c53ae39617ba4dc8f2e2cd8f", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -170,7 +170,6 @@ pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, DECL_ARTIFICIAL (expr), 1);\n   bp_pack_value (bp, DECL_USER_ALIGN (expr), 1);\n   bp_pack_value (bp, DECL_PRESERVE_P (expr), 1);\n-  bp_pack_value (bp, DECL_DEBUG_EXPR_IS_FROM (expr), 1);\n   bp_pack_value (bp, DECL_EXTERNAL (expr), 1);\n   bp_pack_value (bp, DECL_GIMPLE_REG_P (expr), 1);\n   bp_pack_var_len_unsigned (bp, DECL_ALIGN (expr));\n@@ -192,7 +191,10 @@ pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n     }\n \n   if (TREE_CODE (expr) == VAR_DECL)\n-    bp_pack_value (bp, DECL_NONLOCAL_FRAME (expr), 1);\n+    {\n+      bp_pack_value (bp, DECL_HAS_DEBUG_EXPR_P (expr), 1);\n+      bp_pack_value (bp, DECL_NONLOCAL_FRAME (expr), 1);\n+    }\n \n   if (TREE_CODE (expr) == RESULT_DECL\n       || TREE_CODE (expr) == PARM_DECL"}, {"sha": "65bc15f76379bbdd4b08215c71f22a015f7a107d", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -975,6 +975,9 @@ copy_node_stat (tree node MEM_STAT_DECL)\n \t  SET_DECL_VALUE_EXPR (t, DECL_VALUE_EXPR (node));\n \t  DECL_HAS_VALUE_EXPR_P (t) = 1;\n \t}\n+      /* DECL_DEBUG_EXPR is copied explicitely by callers.  */\n+      if (TREE_CODE (node) == VAR_DECL)\n+\tDECL_HAS_DEBUG_EXPR_P (t) = 0;\n       if (TREE_CODE (node) == VAR_DECL && DECL_HAS_INIT_PRIORITY_P (node))\n \t{\n \t  SET_DECL_INIT_PRIORITY (t, DECL_INIT_PRIORITY (node));"}, {"sha": "9aae8df17bc91c5ac98d193ef21c5702bcf044ed", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -2709,8 +2709,6 @@ struct GTY(()) tree_decl_minimal {\n    checked before any access to the former.  */\n #define DECL_FUNCTION_CODE(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.function_code)\n-#define DECL_DEBUG_EXPR_IS_FROM(NODE) \\\n-  (DECL_COMMON_CHECK (NODE)->decl_common.debug_expr_is_from)\n \n #define DECL_FUNCTION_PERSONALITY(NODE) \\\n   (FUNCTION_DECL_CHECK (NODE)->function_decl.personality)\n@@ -3223,9 +3221,9 @@ struct GTY(()) tree_decl_with_vis {\n \n extern tree decl_debug_expr_lookup (tree);\n extern void decl_debug_expr_insert (tree, tree);\n-/* For VAR_DECL, this is set to either an expression that it was split\n-   from (if DECL_DEBUG_EXPR_IS_FROM is true), otherwise a tree_list of\n-   subexpressions that it was split into.  */\n+/* For VAR_DECL, this is set to an expression that it was split from.  */\n+#define DECL_HAS_DEBUG_EXPR_P(NODE) \\\n+  (VAR_DECL_CHECK (NODE)->decl_common.debug_expr_is_from)\n #define DECL_DEBUG_EXPR(NODE) \\\n   (decl_debug_expr_lookup (VAR_DECL_CHECK (NODE)))\n "}, {"sha": "4855fb155b3cd67d336da3f665fd5b0460a39b3b", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/839b422f0838f87583907b8146e9fc7ad111cad0/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=839b422f0838f87583907b8146e9fc7ad111cad0", "patch": "@@ -1780,11 +1780,11 @@ vars_copy (htab_t dst, htab_t src)\n static inline tree\n var_debug_decl (tree decl)\n {\n-  if (decl && DECL_P (decl)\n-      && DECL_DEBUG_EXPR_IS_FROM (decl))\n+  if (decl && TREE_CODE (decl) == VAR_DECL\n+      && DECL_HAS_DEBUG_EXPR_P (decl))\n     {\n       tree debugdecl = DECL_DEBUG_EXPR (decl);\n-      if (debugdecl && DECL_P (debugdecl))\n+      if (DECL_P (debugdecl))\n \tdecl = debugdecl;\n     }\n \n@@ -5041,12 +5041,10 @@ track_expr_p (tree expr, bool need_rtl)\n      don't need to track this expression if the ultimate declaration is\n      ignored.  */\n   realdecl = expr;\n-  if (DECL_DEBUG_EXPR_IS_FROM (realdecl))\n+  if (TREE_CODE (realdecl) == VAR_DECL && DECL_HAS_DEBUG_EXPR_P (realdecl))\n     {\n       realdecl = DECL_DEBUG_EXPR (realdecl);\n-      if (realdecl == NULL_TREE)\n-\trealdecl = expr;\n-      else if (!DECL_P (realdecl))\n+      if (!DECL_P (realdecl))\n \t{\n \t  if (handled_component_p (realdecl)\n \t      || (TREE_CODE (realdecl) == MEM_REF"}]}