{"sha": "b15ad712574a975b0ba2a333bff74db3f19c17d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE1YWQ3MTI1NzRhOTc1YjBiYTJhMzMzYmZmNzRkYjNmMTljMTdkNA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-10-08T21:20:45Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-08T21:20:45Z"}, "message": "tm.texi (INTMAX_TYPE, [...]): Define.\n\n\t* tm.texi (INTMAX_TYPE, UINTMAX_TYPE): Define.\n\t* c-common.h (enum c_tree_index): Add CTI_INTMAX_TYPE and\n\tCTI_UINTMAX_TYPE.\n\t(intmax_type_node, uintmax_type_node): Define.\n\t* c-common.c (decl_attributes): If pedantic, warn if `mode'\n\tattributes create a type wider than intmax_t.\n\t(T_IM, T_UIM): Define properly.\n\t* c-decl.c (INTMAX_TYPE, UINTMAX_TYPE): Define if not already\n\tdefined.\n\t(init_decl_processing): Initialize intmax_type_node and\n\tuintmax_type_node.\n\t* c-lex.c (lex_number): When pedantic and warning for integer\n\tconstants that are too large, in C99 mode warn for those that have\n\ta type wider than long long.\n\ncp:\n\t* decl.c (INTMAX_TYPE, UINTMAX_TYPE): Define if not already\n\tdefined.\n\t(init_decl_processing): Initialize intmax_type_node and\n\tuintmax_type_node.\n\ntestsuite:\n\t* gcc.dg/c99-printf-1.c, gcc.dg/c99-scanf-1.c,\n\tgcc.dg/c90-printf-2.c, gcc.dg/c90-scanf-2.c: Define intmax_t and\n\tuintmax_t using <limits.h> to emulate the compiler's internal\n\tlogic.  No longer XFAIL %j tests.\n\nFrom-SVN: r36791", "tree": {"sha": "15af4058397b150088ce3bdbb721fc90ed1842f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15af4058397b150088ce3bdbb721fc90ed1842f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b15ad712574a975b0ba2a333bff74db3f19c17d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15ad712574a975b0ba2a333bff74db3f19c17d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15ad712574a975b0ba2a333bff74db3f19c17d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15ad712574a975b0ba2a333bff74db3f19c17d4/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2588e44e0019aac9b55c974efd69885eea663f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2588e44e0019aac9b55c974efd69885eea663f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2588e44e0019aac9b55c974efd69885eea663f54"}], "stats": {"total": 206, "additions": 176, "deletions": 30}, "files": [{"sha": "2109191eb078c42d0ca5b65e15638c1f9ecd4067", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -1,3 +1,20 @@\n+2000-10-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* tm.texi (INTMAX_TYPE, UINTMAX_TYPE): Define.\n+\t* c-common.h (enum c_tree_index): Add CTI_INTMAX_TYPE and\n+\tCTI_UINTMAX_TYPE.\n+\t(intmax_type_node, uintmax_type_node): Define.\n+\t* c-common.c (decl_attributes): If pedantic, warn if `mode'\n+\tattributes create a type wider than intmax_t.\n+\t(T_IM, T_UIM): Define properly.\n+\t* c-decl.c (INTMAX_TYPE, UINTMAX_TYPE): Define if not already\n+\tdefined.\n+\t(init_decl_processing): Initialize intmax_type_node and\n+\tuintmax_type_node.\n+\t* c-lex.c (lex_number): When pedantic and warning for integer\n+\tconstants that are too large, in C99 mode warn for those that have\n+\ta type wider than long long.\n+\n 2000-10-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (FMT_FLAG_ARG_CONVERT, FMT_FLAG_SCANF_A_KLUDGE,"}, {"sha": "7ae71c9a95005af6fd242024c87599fd8f4a6584", "filename": "gcc/c-common.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -761,6 +761,12 @@ decl_attributes (node, attributes, prefix_attributes)\n \t\terror (\"no data type for mode `%s'\", p);\n \t      else\n \t\t{\n+\t\t  if (TYPE_PRECISION (typefm) > (TREE_UNSIGNED (type)\n+\t\t\t\t\t\t ? TYPE_PRECISION(uintmax_type_node)\n+\t\t\t\t\t\t : TYPE_PRECISION(intmax_type_node))\n+\t\t      && pedantic)\n+\t\t    pedwarn (\"type with more precision than %s\",\n+\t\t\t     TREE_UNSIGNED (type) ? \"uintmax_t\" : \"intmax_t\");\n \t\t  TREE_TYPE (decl) = type = typefm;\n \t\t  DECL_SIZE (decl) = DECL_SIZE_UNIT (decl) = 0;\n \t\t  layout_decl (decl, 0);\n@@ -1589,9 +1595,9 @@ static const format_flag_pair strftime_flag_pairs[] =\n #define T99_PD\t{ STD_C99, \"ptrdiff_t\", T_PD }\n #define T_UPD   &unsigned_ptrdiff_type_node\n #define T99_UPD\t{ STD_C99, \"unsigned ptrdiff_t\", T_UPD }\n-#define T_IM    NULL /* intmax_t not yet implemented.  */\n+#define T_IM    &intmax_type_node\n #define T99_IM\t{ STD_C99, \"intmax_t\", T_IM }\n-#define T_UIM   NULL /* uintmax_t not yet implemented.  */\n+#define T_UIM   &uintmax_type_node\n #define T99_UIM\t{ STD_C99, \"uintmax_t\", T_UIM }\n \n static const format_char_info print_char_table[] ="}, {"sha": "18eb5fb54f74f794cd37341a6378ba03240b3f6b", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -119,6 +119,8 @@ enum c_tree_index\n     CTI_C_SIZE_TYPE, /* For format checking only.  */\n     CTI_SIGNED_SIZE_TYPE, /* For format checking only.  */\n     CTI_UNSIGNED_PTRDIFF_TYPE, /* For format checking only.  */\n+    CTI_INTMAX_TYPE,\n+    CTI_UINTMAX_TYPE,\n     CTI_WIDEST_INT_LIT_TYPE,\n     CTI_WIDEST_UINT_LIT_TYPE,\n \n@@ -161,6 +163,8 @@ enum c_tree_index\n #define c_size_type_node\t\tc_global_trees[CTI_C_SIZE_TYPE]\n #define signed_size_type_node\t\tc_global_trees[CTI_SIGNED_SIZE_TYPE]\n #define unsigned_ptrdiff_type_node\tc_global_trees[CTI_UNSIGNED_PTRDIFF_TYPE]\n+#define intmax_type_node\t\tc_global_trees[CTI_INTMAX_TYPE]\n+#define uintmax_type_node\t\tc_global_trees[CTI_UINTMAX_TYPE]\n #define widest_integer_literal_type_node c_global_trees[CTI_WIDEST_INT_LIT_TYPE]\n #define widest_unsigned_literal_type_node c_global_trees[CTI_WIDEST_UINT_LIT_TYPE]\n "}, {"sha": "39e0b4a978c46971ecf443a1a9d6df26ab746b27", "filename": "gcc/c-decl.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -77,6 +77,22 @@ enum decl_context\n #ifndef WINT_TYPE\n #define WINT_TYPE \"unsigned int\"\n #endif\n+\n+#ifndef INTMAX_TYPE\n+#define INTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t     ? \"int\"\t\t\t\t\t\\\n+\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t\t? \"long int\"\t\t\t\t\\\n+\t\t\t: \"long long int\"))\n+#endif\n+\n+#ifndef UINTMAX_TYPE\n+#define UINTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t     ? \"unsigned int\"\t\t\t\t\\\n+\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t\t? \"long unsigned int\"\t\t\t\\\n+\t\t\t: \"long long unsigned int\"))\n+#endif\n \f\n /* Do GC.  */\n int ggc_p = 1;\n@@ -3078,6 +3094,11 @@ init_decl_processing ()\n   wint_type_node =\n     TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (WINT_TYPE)));\n \n+  intmax_type_node =\n+    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (INTMAX_TYPE)));\n+  uintmax_type_node =\n+    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (UINTMAX_TYPE)));\n+\n   boolean_type_node = integer_type_node;\n   boolean_true_node = integer_one_node;\n   boolean_false_node = integer_zero_node;"}, {"sha": "343c9ccc6595ff47914c10a420a3772416b05b1a", "filename": "gcc/c-lex.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -2287,11 +2287,19 @@ lex_number (str, len)\n \t    warning (\"width of integer constant may change on other systems with -traditional\");\n \t}\n \n-      if (pedantic && !flag_traditional && !spec_long_long && !warn\n-\t  && (TYPE_PRECISION (long_integer_type_node) < TYPE_PRECISION (type)))\n+      if (pedantic && !flag_traditional && (flag_isoc99 || !spec_long_long)\n+\t  && !warn\n+\t  && ((flag_isoc99\n+\t       ? TYPE_PRECISION (long_long_integer_type_node)\n+\t       : TYPE_PRECISION (long_integer_type_node)) < TYPE_PRECISION (type)))\n \t{\n \t  warn = 1;\n-\t  pedwarn (\"integer constant larger than the maximum value of an unsigned long int\");\n+\t  pedwarn (\"integer constant larger than the maximum value of %s\",\n+\t\t   (flag_isoc99\n+\t\t    ? (TREE_UNSIGNED (type)\n+\t\t       ? \"an unsigned long long int\"\n+\t\t       : \"a long long int\")\n+\t\t    : \"an unsigned long int\"));\n \t}\n \n       if (base == 10 && ! spec_unsigned && TREE_UNSIGNED (type))"}, {"sha": "f0e2d4eab924e2793acc220dca938c0d66195c7c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -1,3 +1,10 @@\n+2000-10-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl.c (INTMAX_TYPE, UINTMAX_TYPE): Define if not already\n+\tdefined.\n+\t(init_decl_processing): Initialize intmax_type_node and\n+\tuintmax_type_node.\n+\n 2000-10-06  Richard Henderson  <rth@cygnus.com>\n \n \t* cp-tree.h (struct cp_language_function): Remove x_result_rtx."}, {"sha": "16d6ebd37c9e0ecf6593e9cc0054240111caf2b4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -83,6 +83,22 @@ int ggc_p = 1;\n #define WCHAR_TYPE \"int\"\n #endif\n \n+#ifndef INTMAX_TYPE\n+#define INTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t     ? \"int\"\t\t\t\t\t\\\n+\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t\t? \"long int\"\t\t\t\t\\\n+\t\t\t: \"long long int\"))\n+#endif\n+\n+#ifndef UINTMAX_TYPE\n+#define UINTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t     ? \"unsigned int\"\t\t\t\t\\\n+\t\t     : ((LONG_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n+\t\t\t? \"long unsigned int\"\t\t\t\\\n+\t\t\t: \"long long unsigned int\"))\n+#endif\n+\n static tree grokparms\t\t\t\tPARAMS ((tree, int));\n static const char *redeclaration_error_message\tPARAMS ((tree, tree));\n \n@@ -6542,6 +6558,11 @@ init_decl_processing ()\n   wchar_array_type_node\n     = build_array_type (wchar_type_node, array_domain_type);\n \n+  intmax_type_node =\n+    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (INTMAX_TYPE)));\n+  uintmax_type_node =\n+    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (UINTMAX_TYPE)));\n+\n   if (flag_vtable_thunks)\n     {\n       /* Make sure we get a unique function type, so we can give"}, {"sha": "9c48023ad07222b09141185ab663449d412b5cdc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -1,3 +1,10 @@\n+2000-10-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c99-printf-1.c, gcc.dg/c99-scanf-1.c,\n+\tgcc.dg/c90-printf-2.c, gcc.dg/c90-scanf-2.c: Define intmax_t and\n+\tuintmax_t using <limits.h> to emulate the compiler's internal\n+\tlogic.  No longer XFAIL %j tests.\n+\n 2000-10-08  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/c90-printf-1.c, gcc.dg/c90-scanf-1.c,"}, {"sha": "16082bee63d777f68d3d9e37aef4a96abb9d5532", "filename": "gcc/testsuite/gcc.dg/c90-printf-2.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-2.c?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -10,12 +10,17 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n \n __extension__ typedef long long int llong;\n \n-/* This next definition is broken.  When GCC has a <stdint.h> and\n-   an internal understanding of intmax_t, it should be\n-   replaced by an include of <stdint.h> or by a definition for internal\n-   macros or typedefs.\n+/* This next definition is a kludge.  When GCC has a <stdint.h> it\n+   should be used.\n */\n-__extension__ typedef long long int intmax_t;\n+#include <limits.h>\n+#if INT_MAX == LLONG_MAX\n+typedef int intmax_t;\n+#elif LONG_MAX == LLONG_MAX\n+typedef long intmax_t;\n+#else\n+__extension__ typedef long long intmax_t;\n+#endif\n \n extern int printf (const char *, ...);\n "}, {"sha": "7e3a8c55d525aff45bf5e17533daf4989d2fadec", "filename": "gcc/testsuite/gcc.dg/c90-scanf-2.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-2.c?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -10,12 +10,17 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n \n __extension__ typedef long long int llong;\n \n-/* This next definition is broken.  When GCC has a <stdint.h> and\n-   an internal understanding of intmax_t, it should be\n-   replaced by an include of <stdint.h> or by a definition for internal\n-   macros or typedefs.\n+/* This next definition is a kludge.  When GCC has a <stdint.h> it\n+   should be used.\n */\n-__extension__ typedef long long int intmax_t;\n+#include <limits.h>\n+#if INT_MAX == LLONG_MAX\n+typedef int intmax_t;\n+#elif LONG_MAX == LLONG_MAX\n+typedef long intmax_t;\n+#else\n+__extension__ typedef long long intmax_t;\n+#endif\n \n extern int scanf (const char *, ...);\n "}, {"sha": "179ea6e5516c22698fc07439e6868469e338fa78", "filename": "gcc/testsuite/gcc.dg/c99-printf-1.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-printf-1.c?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -16,13 +16,24 @@ typedef __PTRDIFF_TYPE__ ptrdiff_t;\n typedef __SIZE_TYPE__ signed_size_t;\n #undef unsigned\n \n-/* These next definitions are broken.  When GCC has a <stdint.h> and\n-   an internal understanding of intmax_t and uintmax_t, they should be\n-   replaced by an include of <stdint.h> or by definitions for internal\n-   macros or typedefs, and the corresponding xfails removed.\n+/* These next definitions are kludges.  When GCC has a <stdint.h> it\n+   should be used.\n */\n-typedef long long int intmax_t;\n-typedef unsigned long long int uintmax_t;\n+#include <limits.h>\n+#if INT_MAX == LLONG_MAX\n+typedef int intmax_t;\n+#elif LONG_MAX == LLONG_MAX\n+typedef long intmax_t;\n+#else\n+typedef long long intmax_t;\n+#endif\n+#if UINT_MAX == ULLONG_MAX\n+typedef unsigned int uintmax_t;\n+#elif ULONG_MAX == ULLONG_MAX\n+typedef unsigned long uintmax_t;\n+#else\n+typedef unsigned long long uintmax_t;\n+#endif\n \n extern int printf (const char *, ...);\n \n@@ -82,8 +93,8 @@ foo (int i, unsigned int u, double d, char *s, void *p, int *n,\n   printf (\"%llc\", i); /* { dg-warning \"length\" \"bad use of %ll\" } */\n   printf (\"%lls\", s); /* { dg-warning \"length\" \"bad use of %ll\" } */\n   printf (\"%llp\", p); /* { dg-warning \"length\" \"bad use of %ll\" } */\n-  printf (\"%jd%ji%jo%ju%jx%jX\", j, j, uj, uj, uj, uj); /* { dg-bogus \"length\" \"bogus %j warning\" { xfail *-*-* } } */\n-  printf (\"%jn\", jn); /* { dg-bogus \"length\" \"bogus %j warning\" { xfail *-*-* } } */\n+  printf (\"%jd%ji%jo%ju%jx%jX\", j, j, uj, uj, uj, uj); /* { dg-bogus \"length\" \"bogus %j warning\" { target *-*-* } } */\n+  printf (\"%jn\", jn); /* { dg-bogus \"length\" \"bogus %j warning\" { target *-*-* } } */\n   printf (\"%jf\", d); /* { dg-warning \"length\" \"bad use of %j\" } */\n   printf (\"%jF\", d); /* { dg-warning \"length\" \"bad use of %j\" } */\n   printf (\"%je\", d); /* { dg-warning \"length\" \"bad use of %j\" } */"}, {"sha": "369f02e667bd277847ddb1f5f8f0a657a74555b5", "filename": "gcc/testsuite/gcc.dg/c99-scanf-1.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-scanf-1.c?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -18,13 +18,24 @@ typedef __SIZE_TYPE__ signed_size_t;\n typedef unsigned __PTRDIFF_TYPE__ unsigned_ptrdiff_t;\n #undef signed\n \n-/* These next definitions are broken.  When GCC has a <stdint.h> and\n-   an internal understanding of intmax_t and uintmax_t, they should be\n-   replaced by an include of <stdint.h> or by definitions for internal\n-   macros or typedefs, and the corresponding xfails removed.\n+/* These next definitions are kludges.  When GCC has a <stdint.h> it\n+   should be used.\n */\n-typedef long long int intmax_t;\n-typedef unsigned long long int uintmax_t;\n+#include <limits.h>\n+#if INT_MAX == LLONG_MAX\n+typedef int intmax_t;\n+#elif LONG_MAX == LLONG_MAX\n+typedef long intmax_t;\n+#else\n+typedef long long intmax_t;\n+#endif\n+#if UINT_MAX == ULLONG_MAX\n+typedef unsigned int uintmax_t;\n+#elif ULONG_MAX == ULLONG_MAX\n+typedef unsigned long uintmax_t;\n+#else\n+typedef unsigned long long uintmax_t;\n+#endif\n \n extern int scanf (const char *, ...);\n \n@@ -102,7 +113,7 @@ foo (int *ip, unsigned int *uip, short int *hp, unsigned short int *uhp,\n   scanf (\"%ll[ac]\", s); /* { dg-warning \"length\" \"bad use of %ll\" } */\n   scanf (\"%llc\", s); /* { dg-warning \"length\" \"bad use of %ll\" } */\n   scanf (\"%llp\", pp); /* { dg-warning \"length\" \"bad use of %ll\" } */\n-  scanf (\"%jd%ji%jo%ju%jx%jX%jn\", jp, jp, ujp, ujp, ujp, ujp, jn); /* { dg-bogus \"length\" \"bogus %j warning\" { xfail *-*-* } } */\n+  scanf (\"%jd%ji%jo%ju%jx%jX%jn\", jp, jp, ujp, ujp, ujp, ujp, jn); /* { dg-bogus \"length\" \"bogus %j warning\" { target *-*-* } } */\n   scanf (\"%ja\", fp); /* { dg-warning \"length\" \"bad use of %j\" } */\n   scanf (\"%jA\", fp); /* { dg-warning \"length\" \"bad use of %j\" } */\n   scanf (\"%je\", fp); /* { dg-warning \"length\" \"bad use of %j\" } */"}, {"sha": "784943849a24a0c8a8e96a3e3b031565abe7361d", "filename": "gcc/tm.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b15ad712574a975b0ba2a333bff74db3f19c17d4/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=b15ad712574a975b0ba2a333bff74db3f19c17d4", "patch": "@@ -1331,6 +1331,29 @@ information.\n \n If you don't define this macro, the default is @code{\"unsigned int\"}.\n \n+@findex INTMAX_TYPE\n+@item INTMAX_TYPE\n+A C expression for a string describing the name of the data type that\n+can represent any value of any standard or extended signed integer type.\n+The typedef name @code{intmax_t} is defined using the contents of the\n+string.  See @code{SIZE_TYPE} above for more information.\n+\n+If you don't define this macro, the default is the first of\n+@code{\"int\"}, @code{\"long int\"}, or @code{\"long long int\"} that has as\n+much precision as @code{long long int}.\n+\n+@findex UINTMAX_TYPE\n+@item UINTMAX_TYPE\n+A C expression for a string describing the name of the data type that\n+can represent any value of any standard or extended unsigned integer\n+type.  The typedef name @code{uintmax_t} is defined using the contents\n+of the string.  See @code{SIZE_TYPE} above for more information.\n+\n+If you don't define this macro, the default is the first of\n+@code{\"unsigned int\"}, @code{\"long unsigned int\"}, or @code{\"long long\n+unsigned int\"} that has as much precision as @code{long long unsigned\n+int}.\n+\n @findex OBJC_INT_SELECTORS\n @item OBJC_INT_SELECTORS\n Define this macro if the type of Objective C selectors should be"}]}