{"sha": "0050faf8aa1be242fbeda7512c9908638c29f383", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA1MGZhZjhhYTFiZTI0MmZiZWRhNzUxMmM5OTA4NjM4YzI5ZjM4Mw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-04-22T12:36:52Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-04-22T12:36:52Z"}, "message": "[AArch64] Support vrecp<esx> neon intrinsics in RTL.\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_simd_builtin_type_mode): Handle SF types.\n\t(sf_UP): Define.\n\t(BUILTIN_GPF): Define.\n\t(aarch64_init_simd_builtins): Handle SF types.\n\t* config/aarch64/aarch64-simd-builtins.def (frecpe): Add support.\n\t(frecps): Likewise.\n\t(frecpx): Likewise.\n\t* config/aarch64/aarch64-simd.md\n\t(simd_types): Update simd_frcp<esx> to simd_frecp<esx>.\n\t(aarch64_frecpe<mode>): New.\n\t(aarch64_frecps<mode>): Likewise.\n\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_FRECP<ESX>.\n\t(v8type): Add frecp<esx>.\n\t(aarch64_frecp<FRECP:frecp_suffix><mode>): New.\n\t(aarch64_frecps<mode>): Likewise.\n\t* config/aarch64/iterators.md (FRECP): New.\n\t(frecp_suffix): Likewise.\n\t* config/aarch64/arm_neon.h\n\t(vrecp<esx><qsd>_<fd><32, 64>): Convert to using builtins.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vrecps.c: New.\n\t* gcc.target/aarch64/vrecpx.c: Likewise.\n\nFrom-SVN: r198136", "tree": {"sha": "d46a3f85bedcd34f88deb9c27706d36a3f386ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d46a3f85bedcd34f88deb9c27706d36a3f386ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0050faf8aa1be242fbeda7512c9908638c29f383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0050faf8aa1be242fbeda7512c9908638c29f383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0050faf8aa1be242fbeda7512c9908638c29f383", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0050faf8aa1be242fbeda7512c9908638c29f383/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee40cdc0f9f75125839fe7267c1fe7da2b665c42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee40cdc0f9f75125839fe7267c1fe7da2b665c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee40cdc0f9f75125839fe7267c1fe7da2b665c42"}], "stats": {"total": 520, "additions": 379, "deletions": 141}, "files": [{"sha": "5b1dce47d1f21301ff5cc00eec2eda12a3d55410", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0050faf8aa1be242fbeda7512c9908638c29f383", "patch": "@@ -1,3 +1,26 @@\n+2013-04-22  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_simd_builtin_type_mode): Handle SF types.\n+\t(sf_UP): Define.\n+\t(BUILTIN_GPF): Define.\n+\t(aarch64_init_simd_builtins): Handle SF types.\n+\t* config/aarch64/aarch64-simd-builtins.def (frecpe): Add support.\n+\t(frecps): Likewise.\n+\t(frecpx): Likewise.\n+\t* config/aarch64/aarch64-simd.md\n+\t(simd_types): Update simd_frcp<esx> to simd_frecp<esx>.\n+\t(aarch64_frecpe<mode>): New.\n+\t(aarch64_frecps<mode>): Likewise.\n+\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_FRECP<ESX>.\n+\t(v8type): Add frecp<esx>.\n+\t(aarch64_frecp<FRECP:frecp_suffix><mode>): New.\n+\t(aarch64_frecps<mode>): Likewise.\n+\t* config/aarch64/iterators.md (FRECP): New.\n+\t(frecp_suffix): Likewise.\n+\t* config/aarch64/arm_neon.h\n+\t(vrecp<esx><qsd>_<fd><32, 64>): Convert to using builtins.\n+\n 2013-04-22  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/56995"}, {"sha": "87c4f280c902abb4bb00f3d098bcb6c66c54796f", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=0050faf8aa1be242fbeda7512c9908638c29f383", "patch": "@@ -50,6 +50,7 @@ enum aarch64_simd_builtin_type_mode\n   T_OI,\n   T_XI,\n   T_SI,\n+  T_SF,\n   T_HI,\n   T_QI,\n   T_MAX\n@@ -72,6 +73,7 @@ enum aarch64_simd_builtin_type_mode\n #define oi_UP\t T_OI\n #define xi_UP\t T_XI\n #define si_UP    T_SI\n+#define sf_UP    T_SF\n #define hi_UP    T_HI\n #define qi_UP    T_QI\n \n@@ -172,6 +174,8 @@ typedef struct\n \n #define BUILTIN_DX(T, N) \\\n   VAR2 (T, N, di, df)\n+#define BUILTIN_GPF(T, N) \\\n+  VAR2 (T, N, sf, df)\n #define BUILTIN_SDQ_I(T, N) \\\n   VAR4 (T, N, qi, hi, si, di)\n #define BUILTIN_SD_HSI(T, N) \\\n@@ -609,7 +613,7 @@ aarch64_init_simd_builtins (void)\n       {\n \t\"v8qi\", \"v4hi\", \"v2si\", \"v2sf\", \"di\", \"df\",\n \t\"v16qi\", \"v8hi\", \"v4si\", \"v4sf\", \"v2di\", \"v2df\",\n-\t\"ti\", \"ei\", \"oi\", \"xi\", \"si\", \"hi\", \"qi\"\n+\t\"ti\", \"ei\", \"oi\", \"xi\", \"si\", \"sf\", \"hi\", \"qi\"\n       };\n       char namebuf[60];\n       tree ftype = NULL;"}, {"sha": "9c145c270354fe3c601ef7762e8c3219701a1b70", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=0050faf8aa1be242fbeda7512c9908638c29f383", "patch": "@@ -256,3 +256,12 @@\n   BUILTIN_VALL (BINOP, uzp2)\n   BUILTIN_VALL (BINOP, trn1)\n   BUILTIN_VALL (BINOP, trn2)\n+\n+  /* Implemented by\n+     aarch64_frecp<FRECP:frecp_suffix><mode>.  */\n+  BUILTIN_GPF (UNOP, frecpe)\n+  BUILTIN_GPF (BINOP, frecps)\n+  BUILTIN_GPF (UNOP, frecpx)\n+\n+  BUILTIN_VDQF (UNOP, frecpe)\n+  BUILTIN_VDQF (BINOP, frecps)"}, {"sha": "b1e3d8d614d7988755b1527aeb8754a1e0fcde36", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=0050faf8aa1be242fbeda7512c9908638c29f383", "patch": "@@ -59,9 +59,9 @@\n ; simd_fmul             floating point multiply.\n ; simd_fmul_elt         floating point multiply (by element).\n ; simd_fnegabs          floating point neg/abs.\n-; simd_frcpe            floating point reciprocal estimate.\n-; simd_frcps            floating point reciprocal step.\n-; simd_frecx            floating point reciprocal exponent.\n+; simd_frecpe            floating point reciprocal estimate.\n+; simd_frecps            floating point reciprocal step.\n+; simd_frecpx            floating point reciprocal exponent.\n ; simd_frint            floating point round to integer.\n ; simd_fsqrt            floating point square root.\n ; simd_icvtf            integer convert to floating point.\n@@ -163,9 +163,9 @@\n    simd_fmul,\\\n    simd_fmul_elt,\\\n    simd_fnegabs,\\\n-   simd_frcpe,\\\n-   simd_frcps,\\\n-   simd_frecx,\\\n+   simd_frecpe,\\\n+   simd_frecps,\\\n+   simd_frecpx,\\\n    simd_frint,\\\n    simd_fsqrt,\\\n    simd_icvtf,\\\n@@ -305,8 +305,8 @@\n \t  (eq_attr \"simd_type\" \"simd_store3,simd_store4\") (const_string \"neon_vst1_3_4_regs\")\n \t  (eq_attr \"simd_type\" \"simd_store1s,simd_store2s\") (const_string \"neon_vst1_vst2_lane\")\n \t  (eq_attr \"simd_type\" \"simd_store3s,simd_store4s\") (const_string \"neon_vst3_vst4_lane\")\n-\t  (and (eq_attr \"simd_type\" \"simd_frcpe,simd_frcps\") (eq_attr \"simd_mode\" \"V2SF\")) (const_string \"neon_fp_vrecps_vrsqrts_ddd\")\n-\t  (and (eq_attr \"simd_type\" \"simd_frcpe,simd_frcps\") (eq_attr \"simd_mode\" \"V4SF,V2DF\")) (const_string \"neon_fp_vrecps_vrsqrts_qqq\")\n+\t  (and (eq_attr \"simd_type\" \"simd_frecpe,simd_frecps\") (eq_attr \"simd_mode\" \"V2SF\")) (const_string \"neon_fp_vrecps_vrsqrts_ddd\")\n+\t  (and (eq_attr \"simd_type\" \"simd_frecpe,simd_frecps\") (eq_attr \"simd_mode\" \"V4SF,V2DF\")) (const_string \"neon_fp_vrecps_vrsqrts_qqq\")\n \t  (eq_attr \"simd_type\" \"none\") (const_string \"none\")\n   ]\n   (const_string \"unknown\")))\n@@ -3750,3 +3750,25 @@\n   \"ld1r\\\\t{%0.<Vtype>}, %1\"\n   [(set_attr \"simd_type\" \"simd_load1r\")\n    (set_attr \"simd_mode\" \"<MODE>\")])\n+\n+(define_insn \"aarch64_frecpe<mode>\"\n+  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n+\t(unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")]\n+\t\t    UNSPEC_FRECPE))]\n+  \"TARGET_SIMD\"\n+  \"frecpe\\\\t%0.<Vtype>, %1.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_frecpe\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"aarch64_frecps<mode>\"\n+  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n+\t(unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")\n+\t\t     (match_operand:VDQF 2 \"register_operand\" \"w\")]\n+\t\t    UNSPEC_FRECPS))]\n+  \"TARGET_SIMD\"\n+  \"frecps\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_frecps\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+"}, {"sha": "05974e3fb0ff832fc5b3eb47c30e5aab7c5f3b5a", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=0050faf8aa1be242fbeda7512c9908638c29f383", "patch": "@@ -68,6 +68,9 @@\n (define_c_enum \"unspec\" [\n     UNSPEC_CASESI\n     UNSPEC_CLS\n+    UNSPEC_FRECPE\n+    UNSPEC_FRECPS\n+    UNSPEC_FRECPX\n     UNSPEC_FRINTA\n     UNSPEC_FRINTI\n     UNSPEC_FRINTM\n@@ -230,6 +233,9 @@\n    fmovf2i,\\\n    fmovi2f,\\\n    fmul,\\\n+   frecpe,\\\n+   frecps,\\\n+   frecpx,\\\n    frint,\\\n    fsqrt,\\\n    load_acq,\\\n@@ -3362,6 +3368,27 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+(define_insn \"aarch64_frecp<FRECP:frecp_suffix><mode>\"\n+  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n+\t(unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n+\t\t    FRECP))]\n+  \"TARGET_FLOAT\"\n+  \"frecp<FRECP:frecp_suffix>\\\\t%<s>0, %<s>1\"\n+  [(set_attr \"v8type\" \"frecp<FRECP:frecp_suffix>\")\n+   (set_attr \"mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"aarch64_frecps<mode>\"\n+  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n+\t(unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")\n+\t\t     (match_operand:GPF 2 \"register_operand\" \"w\")]\n+\t\t    UNSPEC_FRECPS))]\n+  \"TARGET_FLOAT\"\n+  \"frecps\\\\t%<s>0, %<s>1, %<s>2\"\n+  [(set_attr \"v8type\" \"frecps\")\n+   (set_attr \"mode\" \"<MODE>\")]\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Reload support\n ;; -------------------------------------------------------------------"}, {"sha": "66989b851d1b6f8138455f412ca1c68e43dfae12", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 78, "deletions": 132, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=0050faf8aa1be242fbeda7512c9908638c29f383", "patch": "@@ -14556,17 +14556,6 @@ vrbitq_u8 (uint8x16_t a)\n   return result;\n }\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vrecpe_f32 (float32x2_t a)\n-{\n-  float32x2_t result;\n-  __asm__ (\"frecpe %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vrecpe_u32 (uint32x2_t a)\n {\n@@ -14578,39 +14567,6 @@ vrecpe_u32 (uint32x2_t a)\n   return result;\n }\n \n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vrecped_f64 (float64_t a)\n-{\n-  float64_t result;\n-  __asm__ (\"frecpe %d0,%d1\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vrecpeq_f32 (float32x4_t a)\n-{\n-  float32x4_t result;\n-  __asm__ (\"frecpe %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vrecpeq_f64 (float64x2_t a)\n-{\n-  float64x2_t result;\n-  __asm__ (\"frecpe %0.2d,%1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vrecpeq_u32 (uint32x4_t a)\n {\n@@ -14622,94 +14578,6 @@ vrecpeq_u32 (uint32x4_t a)\n   return result;\n }\n \n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vrecpes_f32 (float32_t a)\n-{\n-  float32_t result;\n-  __asm__ (\"frecpe %s0,%s1\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vrecps_f32 (float32x2_t a, float32x2_t b)\n-{\n-  float32x2_t result;\n-  __asm__ (\"frecps %0.2s,%1.2s,%2.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vrecpsd_f64 (float64_t a, float64_t b)\n-{\n-  float64_t result;\n-  __asm__ (\"frecps %d0,%d1,%d2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vrecpsq_f32 (float32x4_t a, float32x4_t b)\n-{\n-  float32x4_t result;\n-  __asm__ (\"frecps %0.4s,%1.4s,%2.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vrecpsq_f64 (float64x2_t a, float64x2_t b)\n-{\n-  float64x2_t result;\n-  __asm__ (\"frecps %0.2d,%1.2d,%2.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vrecpss_f32 (float32_t a, float32_t b)\n-{\n-  float32_t result;\n-  __asm__ (\"frecps %s0,%s1,%s2\"\n-           : \"=w\"(result)\n-           : \"w\"(a), \"w\"(b)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vrecpxd_f64 (float64_t a)\n-{\n-  float64_t result;\n-  __asm__ (\"frecpe %d0,%d1\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n-vrecpxs_f32 (float32_t a)\n-{\n-  float32_t result;\n-  __asm__ (\"frecpe %s0,%s1\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vrev16_p8 (poly8x8_t a)\n {\n@@ -23115,6 +22983,84 @@ vqsubd_u64 (uint64x1_t __a, uint64x1_t __b)\n   return (uint64x1_t) __builtin_aarch64_uqsubdi (__a, __b);\n }\n \n+/* vrecpe  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vrecpes_f32 (float32_t __a)\n+{\n+  return __builtin_aarch64_frecpesf (__a);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vrecped_f64 (float64_t __a)\n+{\n+  return __builtin_aarch64_frecpedf (__a);\n+}\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrecpe_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_frecpev2sf (__a);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrecpeq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_frecpev4sf (__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrecpeq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_frecpev2df (__a);\n+}\n+\n+/* vrecps  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vrecpss_f32 (float32_t __a, float32_t __b)\n+{\n+  return __builtin_aarch64_frecpssf (__a, __b);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vrecpsd_f64 (float64_t __a, float64_t __b)\n+{\n+  return __builtin_aarch64_frecpsdf (__a, __b);\n+}\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrecps_f32 (float32x2_t __a, float32x2_t __b)\n+{\n+  return __builtin_aarch64_frecpsv2sf (__a, __b);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrecpsq_f32 (float32x4_t __a, float32x4_t __b)\n+{\n+  return __builtin_aarch64_frecpsv4sf (__a, __b);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrecpsq_f64 (float64x2_t __a, float64x2_t __b)\n+{\n+  return __builtin_aarch64_frecpsv2df (__a, __b);\n+}\n+\n+/* vrecpx  */\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vrecpxs_f32 (float32_t __a)\n+{\n+  return __builtin_aarch64_frecpxsf (__a);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vrecpxd_f64 (float64_t __a)\n+{\n+  return __builtin_aarch64_frecpxdf (__a);\n+}\n+\n /* vrshl */\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))"}, {"sha": "017e1281bbb6aadab7e90ce39069766c0a154fa8", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=0050faf8aa1be242fbeda7512c9908638c29f383", "patch": "@@ -698,6 +698,8 @@\n (define_int_iterator FCVT [UNSPEC_FRINTZ UNSPEC_FRINTP UNSPEC_FRINTM\n \t\t\t    UNSPEC_FRINTA])\n \n+(define_int_iterator FRECP [UNSPEC_FRECPE UNSPEC_FRECPX])\n+\n ;; -------------------------------------------------------------------\n ;; Int Iterators Attributes.\n ;; -------------------------------------------------------------------\n@@ -803,3 +805,5 @@\n (define_int_attr perm_hilo [(UNSPEC_ZIP1 \"1\") (UNSPEC_ZIP2 \"2\")\n \t\t\t    (UNSPEC_TRN1 \"1\") (UNSPEC_TRN2 \"2\")\n \t\t\t    (UNSPEC_UZP1 \"1\") (UNSPEC_UZP2 \"2\")])\n+\n+(define_int_attr frecp_suffix  [(UNSPEC_FRECPE \"e\") (UNSPEC_FRECPX \"x\")])"}, {"sha": "0938ce462b6d385a686c811a85a24b4550947645", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0050faf8aa1be242fbeda7512c9908638c29f383", "patch": "@@ -1,3 +1,8 @@\n+2013-04-22  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/vrecps.c: New.\n+\t* gcc.target/aarch64/vrecpx.c: Likewise.\n+\n 2013-04-22  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/56995"}, {"sha": "c279a4493a9fe4207ce8f6e06489d351d301de69", "filename": "gcc/testsuite/gcc.target/aarch64/vrecps.c", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrecps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrecps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrecps.c?ref=0050faf8aa1be242fbeda7512c9908638c29f383", "patch": "@@ -0,0 +1,144 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <arm_neon.h>\n+#include <math.h>\n+#include <stdlib.h>\n+\n+int\n+test_frecps_float32_t (void)\n+{\n+  int i;\n+  float32_t value = 0.2;\n+  float32_t reciprocal = 5.0;\n+  float32_t step = vrecpes_f32 (value);\n+  /* 3 steps should give us within ~0.001 accuracy.  */\n+  for (i = 0; i < 3; i++)\n+    step = step * vrecpss_f32 (step, value);\n+\n+  return fabs (step - reciprocal) < 0.001;\n+}\n+\n+/* { dg-final { scan-assembler \"frecpe\\\\ts\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"frecps\\\\ts\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+\n+int\n+test_frecps_float32x2_t (void)\n+{\n+  int i;\n+  int ret = 1;\n+\n+  const float32_t value_pool[] = {0.2, 0.4};\n+  const float32_t reciprocal_pool[] = {5.0, 2.5};\n+  float32x2_t value = vld1_f32 (value_pool);\n+  float32x2_t reciprocal = vld1_f32 (reciprocal_pool);\n+\n+  float32x2_t step = vrecpe_f32 (value);\n+  /* 3 steps should give us within ~0.001 accuracy.  */\n+  for (i = 0; i < 3; i++)\n+    step = step * vrecps_f32 (step, value);\n+\n+  ret &= fabs (vget_lane_f32 (step, 0)\n+\t       - vget_lane_f32 (reciprocal, 0)) < 0.001;\n+  ret &= fabs (vget_lane_f32 (step, 1)\n+\t       - vget_lane_f32 (reciprocal, 1)) < 0.001;\n+\n+  return ret;\n+}\n+\n+/* { dg-final { scan-assembler \"frecpe\\\\tv\\[0-9\\]+.2s, v\\[0-9\\]+.2s\" } } */\n+/* { dg-final { scan-assembler \"frecps\\\\tv\\[0-9\\]+.2s, v\\[0-9\\]+.2s, v\\[0-9\\]+.2s\" } } */\n+\n+int\n+test_frecps_float32x4_t (void)\n+{\n+  int i;\n+  int ret = 1;\n+\n+  const float32_t value_pool[] = {0.2, 0.4, 0.5, 0.8};\n+  const float32_t reciprocal_pool[] = {5.0, 2.5, 2.0, 1.25};\n+  float32x4_t value = vld1q_f32 (value_pool);\n+  float32x4_t reciprocal = vld1q_f32 (reciprocal_pool);\n+\n+  float32x4_t step = vrecpeq_f32 (value);\n+  /* 3 steps should give us within ~0.001 accuracy.  */\n+  for (i = 0; i < 3; i++)\n+    step = step * vrecpsq_f32 (step, value);\n+\n+  ret &= fabs (vgetq_lane_f32 (step, 0)\n+\t       - vgetq_lane_f32 (reciprocal, 0)) < 0.001;\n+  ret &= fabs (vgetq_lane_f32 (step, 1)\n+\t       - vgetq_lane_f32 (reciprocal, 1)) < 0.001;\n+  ret &= fabs (vgetq_lane_f32 (step, 2)\n+\t       - vgetq_lane_f32 (reciprocal, 2)) < 0.001;\n+  ret &= fabs (vgetq_lane_f32 (step, 3)\n+\t       - vgetq_lane_f32 (reciprocal, 3)) < 0.001;\n+\n+  return ret;\n+}\n+\n+/* { dg-final { scan-assembler \"frecpe\\\\tv\\[0-9\\]+.4s, v\\[0-9\\]+.4s\" } } */\n+/* { dg-final { scan-assembler \"frecps\\\\tv\\[0-9\\]+.4s, v\\[0-9\\]+.4s, v\\[0-9\\]+.4s\" } } */\n+\n+int\n+test_frecps_float64_t (void)\n+{\n+  int i;\n+  float64_t value = 0.2;\n+  float64_t reciprocal = 5.0;\n+  float64_t step = vrecped_f64 (value);\n+  /* 3 steps should give us within ~0.001 accuracy.  */\n+  for (i = 0; i < 3; i++)\n+    step = step * vrecpsd_f64 (step, value);\n+\n+  return fabs (step - reciprocal) < 0.001;\n+}\n+\n+/* { dg-final { scan-assembler \"frecpe\\\\td\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+/* { dg-final { scan-assembler \"frecps\\\\td\\[0-9\\]+, d\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+\n+int\n+test_frecps_float64x2_t (void)\n+{\n+  int i;\n+  int ret = 1;\n+\n+  const float64_t value_pool[] = {0.2, 0.4};\n+  const float64_t reciprocal_pool[] = {5.0, 2.5};\n+  float64x2_t value = vld1q_f64 (value_pool);\n+  float64x2_t reciprocal = vld1q_f64 (reciprocal_pool);\n+\n+  float64x2_t step = vrecpeq_f64 (value);\n+  /* 3 steps should give us within ~0.001 accuracy.  */\n+  for (i = 0; i < 3; i++)\n+    step = step * vrecpsq_f64 (step, value);\n+\n+  ret &= fabs (vgetq_lane_f64 (step, 0)\n+\t       - vgetq_lane_f64 (reciprocal, 0)) < 0.001;\n+  ret &= fabs (vgetq_lane_f64 (step, 1)\n+\t       - vgetq_lane_f64 (reciprocal, 1)) < 0.001;\n+\n+  return ret;\n+}\n+\n+/* { dg-final { scan-assembler \"frecpe\\\\tv\\[0-9\\]+.2d, v\\[0-9\\]+.2d\" } } */\n+/* { dg-final { scan-assembler \"frecps\\\\tv\\[0-9\\]+.2d, v\\[0-9\\]+.2d, v\\[0-9\\]+.2d\" } } */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  if (!test_frecps_float32_t ())\n+    abort ();\n+  if (!test_frecps_float32x2_t ())\n+    abort ();\n+  if (!test_frecps_float32x4_t ())\n+    abort ();\n+  if (!test_frecps_float64_t ())\n+    abort ();\n+  if (!test_frecps_float64x2_t ())\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "63097f1d9cf3209236cb79aba498669ebe5598a6", "filename": "gcc/testsuite/gcc.target/aarch64/vrecpx.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrecpx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0050faf8aa1be242fbeda7512c9908638c29f383/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrecpx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvrecpx.c?ref=0050faf8aa1be242fbeda7512c9908638c29f383", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <arm_neon.h>\n+#include <math.h>\n+#include <stdlib.h>\n+\n+float32_t in_f[] =\n+{2.0, 4.0, 8.0, 16.0, 1.0, 0.5, 0.25, 0.125};\n+float32_t rec_f[] =\n+{1.0, 0.5, 0.25, 0.125, 2.0, 4.0, 8.0, 16.0};\n+float64_t in_d[] =\n+{2.0, 4.0, 8.0, 16.0, 1.0, 0.5, 0.25, 0.125};\n+float32_t rec_d[] =\n+{1.0, 0.5, 0.25, 0.125, 2.0, 4.0, 8.0, 16.0};\n+\n+int\n+test_frecpx_float32_t (void)\n+{\n+  int i = 0;\n+  int ret = 1;\n+  for (i = 0; i < 8; i++)\n+    ret &= fabs (vrecpxs_f32 (in_f[i]) - rec_f[i]) < 0.001;\n+\n+  return ret;\n+}\n+\n+/* { dg-final { scan-assembler \"frecpx\\\\ts\\[0-9\\]+, s\\[0-9\\]+\" } } */\n+\n+int\n+test_frecpx_float64_t (void)\n+{\n+  int i = 0;\n+  int ret = 1;\n+  for (i = 0; i < 8; i++)\n+    ret &= fabs (vrecpxd_f64 (in_d[i]) - rec_d[i]) < 0.001;\n+\n+  return ret;\n+}\n+\n+/* { dg-final { scan-assembler \"frecpx\\\\td\\[0-9\\]+, d\\[0-9\\]+\" } } */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  if (!test_frecpx_float32_t ())\n+    abort ();\n+  if (!test_frecpx_float64_t ())\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}