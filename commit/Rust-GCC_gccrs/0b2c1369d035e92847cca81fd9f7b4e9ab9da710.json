{"sha": "0b2c1369d035e92847cca81fd9f7b4e9ab9da710", "node_id": "C_kwDOANBUbNoAKDBiMmMxMzY5ZDAzNWU5Mjg0N2NjYTgxZmQ5ZjdiNGU5YWI5ZGE3MTA", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-12-23T09:56:30Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-12-23T09:58:13Z"}, "message": "PR target/107548: Handle vec_select in STV on x86.\n\nThis patch enhances x86's STV pass to handle VEC_SELECT during general\nscalar chain conversion, performing SImode scalar extraction from V4SI\nand DImode scalar extraction from V2DI in vector registers.\n\nThe motivating test case from bugzilla is:\n\ntypedef unsigned int v4si __attribute__((vector_size(16)));\n\nunsigned int f (v4si a, v4si b)\n{\n  a[0] += b[0];\n  return a[0] + a[1];\n}\n\ncurrently with -O2 -march=znver2 this generates:\n\n\tvpextrd\t$1, %xmm0, %edx\n\tvmovd\t%xmm0, %eax\n\taddl\t%edx, %eax\n\tvmovd\t%xmm1, %edx\n\taddl\t%edx, %eax\n\tret\n\nwhich performs three transfers from the vector unit to the scalar unit,\nand performs the two additions there.  With this patch, we now generate:\n\n\tvmovdqa\t%xmm0, %xmm2\n\tvpshufd\t$85, %xmm0, %xmm0\n\tvpaddd\t%xmm0, %xmm2, %xmm0\n\tvpaddd\t%xmm1, %xmm0, %xmm0\n\tvmovd\t%xmm0, %eax\n\tret\n\nwhich performs the two additions in the vector unit, and then transfers\nthe result to the scalar unit.  Technically the (cheap) movdqa isn't\nneeded with better register allocation (or this could be cleaned up\nduring peephole2), but even so this transform is still a win.\n\n2022-12-23  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR target/107548\n\t* config/i386/i386-features.cc (scalar_chain::add_insn): The\n\toperands of a VEC_SELECT don't need to added to the scalar chain.\n\t(general_scalar_chain::compute_convert_gain) <case VEC_SELECT>:\n\tProvide gains for performing STV on a VEC_SELECT.\n\t(general_scalar_chain::convert_insn): Convert VEC_SELECT to pshufd,\n\tpsrldq or no-op.\n\t(general_scalar_to_vector_candidate_p): Handle VEC_SELECT of a\n\tsingle element from a vector register to a scalar register.\n\ngcc/testsuite/ChangeLog\n\tPR target/107548\n\t* gcc.target/i386/pr107548-1.c: New test V4SI case.\n\t* gcc.target/i386/pr107548-2.c: New test V2DI case.", "tree": {"sha": "8f6144fdf97732e6ab03511cf8ae67dad75befdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f6144fdf97732e6ab03511cf8ae67dad75befdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b2c1369d035e92847cca81fd9f7b4e9ab9da710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2c1369d035e92847cca81fd9f7b4e9ab9da710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b2c1369d035e92847cca81fd9f7b4e9ab9da710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b2c1369d035e92847cca81fd9f7b4e9ab9da710/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24a7980d0f48671ea13da18c9162a43420b5af58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a7980d0f48671ea13da18c9162a43420b5af58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24a7980d0f48671ea13da18c9162a43420b5af58"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "0f59be0b6fa687ccd9c2e2ac90e9b615608df36e", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2c1369d035e92847cca81fd9f7b4e9ab9da710/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2c1369d035e92847cca81fd9f7b4e9ab9da710/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=0b2c1369d035e92847cca81fd9f7b4e9ab9da710", "patch": "@@ -429,6 +429,11 @@ scalar_chain::add_insn (bitmap candidates, unsigned int insn_uid)\n   for (ref = DF_INSN_UID_DEFS (insn_uid); ref; ref = DF_REF_NEXT_LOC (ref))\n     if (!HARD_REGISTER_P (DF_REF_REG (ref)))\n       analyze_register_chain (candidates, ref);\n+\n+  /* The operand(s) of VEC_SELECT don't need to be converted/convertible.  */\n+  if (def_set && GET_CODE (SET_SRC (def_set)) == VEC_SELECT)\n+    return;\n+\n   for (ref = DF_INSN_UID_USES (insn_uid); ref; ref = DF_REF_NEXT_LOC (ref))\n     if (!DF_REF_REG_MEM_P (ref))\n       analyze_register_chain (candidates, ref);\n@@ -629,6 +634,23 @@ general_scalar_chain::compute_convert_gain ()\n \t      }\n \t    break;\n \n+\t  case VEC_SELECT:\n+\t    if (XVECEXP (XEXP (src, 1), 0, 0) == const0_rtx)\n+\t      {\n+\t\t// movd (4 bytes) replaced with movdqa (4 bytes).\n+\t\tif (!optimize_insn_for_size_p ())\n+\t\t  igain += ix86_cost->sse_to_integer - ix86_cost->xmm_move;\n+\t      }\n+\t    else\n+\t      {\n+\t\t// pshufd; movd replaced with pshufd.\n+\t\tif (optimize_insn_for_size_p ())\n+\t\t  igain += COSTS_N_BYTES (4);\n+\t\telse\n+\t\t  igain += ix86_cost->sse_to_integer;\n+\t      }\n+\t    break;\n+\n \t  default:\n \t    gcc_unreachable ();\n \t  }\n@@ -1167,6 +1189,24 @@ general_scalar_chain::convert_insn (rtx_insn *insn)\n       convert_op (&src, insn);\n       break;\n \n+    case VEC_SELECT:\n+      if (XVECEXP (XEXP (src, 1), 0, 0) == const0_rtx)\n+\tsrc = XEXP (src, 0);\n+      else if (smode == DImode)\n+\t{\n+\t  rtx tmp = gen_lowpart (V1TImode, XEXP (src, 0));\n+\t  dst = gen_lowpart (V1TImode, dst);\n+\t  src = gen_rtx_LSHIFTRT (V1TImode, tmp, GEN_INT (64));\n+\t}\n+      else\n+\t{\n+\t  rtx tmp = XVECEXP (XEXP (src, 1), 0, 0);\n+\t  rtvec vec = gen_rtvec (4, tmp, tmp, tmp, tmp);\n+\t  rtx par = gen_rtx_PARALLEL (VOIDmode, vec);\n+\t  src = gen_rtx_VEC_SELECT (vmode, XEXP (src, 0), par);\n+\t}\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -1930,6 +1970,16 @@ general_scalar_to_vector_candidate_p (rtx_insn *insn, enum machine_mode mode)\n     case CONST_INT:\n       return REG_P (dst);\n \n+    case VEC_SELECT:\n+      /* Excluding MEM_P (dst) avoids intefering with vpextr[dq].  */\n+      return REG_P (dst)\n+\t     && REG_P (XEXP (src, 0))\n+\t     && GET_MODE (XEXP (src, 0)) == (mode == DImode ? V2DImode\n+\t\t\t\t\t\t\t    : V4SImode)\n+\t     && GET_CODE (XEXP (src, 1)) == PARALLEL\n+\t     && XVECLEN (XEXP (src, 1), 0) == 1\n+\t     && CONST_INT_P (XVECEXP (XEXP (src, 1), 0, 0));\n+\n     default:\n       return false;\n     }"}, {"sha": "da78f758fe298ebd16cf9b9a1b3625e623adb00f", "filename": "gcc/testsuite/gcc.target/i386/pr107548-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2c1369d035e92847cca81fd9f7b4e9ab9da710/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107548-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2c1369d035e92847cca81fd9f7b4e9ab9da710/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107548-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107548-1.c?ref=0b2c1369d035e92847cca81fd9f7b4e9ab9da710", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mstv -mno-stackrealign\" } */\n+typedef unsigned int v4si __attribute__((vector_size(16)));\n+\n+unsigned int foo1 (v4si a, v4si b)\n+{\n+  a[0] += b[0];\n+  return a[0] + a[1];\n+}\n+\n+unsigned int foo2 (v4si a, v4si b)\n+{\n+  a[0] += b[0];\n+  return a[0] + a[2];\n+}\n+\n+unsigned int foo3 (v4si a, v4si b)\n+{\n+  a[0] += b[0];\n+  return a[0] + a[3];\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tmovd\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"paddd\" 6 } } */\n+/* { dg-final { scan-assembler-not \"addl\" } } */"}, {"sha": "b57594e88214004f53f164324683955d41ddef72", "filename": "gcc/testsuite/gcc.target/i386/pr107548-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b2c1369d035e92847cca81fd9f7b4e9ab9da710/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107548-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b2c1369d035e92847cca81fd9f7b4e9ab9da710/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107548-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107548-2.c?ref=0b2c1369d035e92847cca81fd9f7b4e9ab9da710", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mstv -mno-stackrealign\" } */\n+typedef unsigned long long v2di __attribute__((vector_size(16)));\n+\n+unsigned long long foo(v2di a, v2di b)\n+{\n+  a[0] += b[0];\n+  return a[0] + a[1];\n+}\n+\n+/* { dg-final { scan-assembler-not \"\\taddq\\t\" } } */\n+/* { dg-final { scan-assembler-times \"paddq\" 2 } } */\n+/* { dg-final { scan-assembler \"psrldq\" } } */"}]}