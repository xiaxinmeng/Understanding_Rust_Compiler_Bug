{"sha": "b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBiNGEyNTMwODdlZGIzMmM3YzFiN2YwN2UxNTZkNmNhZjZmZjNiMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-10-31T01:09:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-10-31T01:09:59Z"}, "message": "forward_list.h (forward_list): Adjust comments.\n\n\t* include/bits/forward_list.h (forward_list): Adjust comments.\n\t(forward_list(const forward_list&, const _Alloc&)): Use\n\t_M_range_initialize to copy elements.\n\t(forward_list(forward_list&&, const _Alloc&)): Add exception\n\tspecification.\n\t(_Fwd_list_base(const _Fwd_list_base&, const _Node_alloc_type&)):\n\tRemove.\n\t* include/bits/forward_list.tcc (_Fwd_list_base(const _Fwd_list_base&,\n\tconst _Node_alloc_type&)): Remove.\n\t(_Fwd_list_base(_Fwd_list_base&&, const _Node_alloc_type&)): Fix\n\tmemory leak when allocators are not equal.\n\nFrom-SVN: r193009", "tree": {"sha": "60c03fea890c08bdd94869932fae96787b154638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60c03fea890c08bdd94869932fae96787b154638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e1866fe6f17ad219a2855ab21b5e45de225ce25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1866fe6f17ad219a2855ab21b5e45de225ce25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1866fe6f17ad219a2855ab21b5e45de225ce25"}], "stats": {"total": 74, "additions": 32, "deletions": 42}, "files": [{"sha": "3b2cb0d29ff476e0115749ec2f05c82a06ccd93a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3", "patch": "@@ -1,3 +1,17 @@\n+2012-10-31  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/forward_list.h (forward_list): Adjust comments.\n+\t(forward_list(const forward_list&, const _Alloc&)): Use\n+\t_M_range_initialize to copy elements.\n+\t(forward_list(forward_list&&, const _Alloc&)): Add exception\n+\tspecification.\n+\t(_Fwd_list_base(const _Fwd_list_base&, const _Node_alloc_type&)):\n+\tRemove.\n+\t* include/bits/forward_list.tcc (_Fwd_list_base(const _Fwd_list_base&,\n+\tconst _Node_alloc_type&)): Remove.\n+\t(_Fwd_list_base(_Fwd_list_base&&, const _Node_alloc_type&)): Fix\n+\tmemory leak when allocators are not equal.\n+\n 2012-10-29  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/55123\n@@ -336,7 +350,7 @@\n \n 2012-10-09  Daniel Krugler  <daniel.kruegler@gmail.com>\n \n-\t* include/std/type_traits (common_time): Provide \"SFINAE-friendly\"\n+\t* include/std/type_traits (common_type): Provide \"SFINAE-friendly\"\n \timplementation.\n \t(__success_type, __failure_type): Fix.\n \t* include/std/chrono (common_type): Likewise for the chrono::time_point"}, {"sha": "8d4915d0e4de6f9ea7dc19e3ec0ec1a7244dd387", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3", "patch": "@@ -314,8 +314,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _Fwd_list_base(const _Node_alloc_type& __a)\n       : _M_impl(__a) { }\n \n-      _Fwd_list_base(const _Fwd_list_base& __lst, const _Node_alloc_type& __a);\n-\n       _Fwd_list_base(_Fwd_list_base&& __lst, const _Node_alloc_type& __a);\n \n       _Fwd_list_base(_Fwd_list_base&& __lst)\n@@ -394,14 +392,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  Also unlike the other standard containers, std::forward_list provides\n    *  specialized algorithms %unique to linked lists, such as\n    *  splicing, sorting, and in-place reversal.\n-   *\n-   *  A couple points on memory allocation for forward_list<Tp>:\n-   *\n-   *  First, we never actually allocate a Tp, we allocate\n-   *  Fwd_list_node<Tp>'s and trust [20.1.5]/4 to DTRT.  This is to ensure\n-   *  that after elements from %forward_list<X,Alloc1> are spliced into\n-   *  %forward_list<X,Alloc2>, destroying the memory of the second %list is a\n-   *  valid operation, i.e., Alloc1 giveth and Alloc2 taketh away.\n    */\n   template<typename _Tp, typename _Alloc = allocator<_Tp> >\n     class forward_list : private _Fwd_list_base<_Tp, _Alloc>\n@@ -429,7 +419,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef std::ptrdiff_t                               difference_type;\n       typedef _Alloc                                       allocator_type;\n \n-      // 23.2.3.1 construct/copy/destroy:\n+      // 23.3.4.2 construct/copy/destroy:\n \n       /**\n        *  @brief  Creates a %forward_list with no elements.\n@@ -446,15 +436,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __al    An allocator object.\n        */\n       forward_list(const forward_list& __list, const _Alloc& __al)\n-      : _Base(__list, _Node_alloc_type(__al))\n-      { }\n+      : _Base(_Node_alloc_type(__al))\n+      { _M_range_initialize(__list.begin(), __list.end()); }\n \n       /**\n        *  @brief  Move constructor with allocator argument.\n        *  @param  __list  Input list to move.\n        *  @param  __al    An allocator object.\n        */\n       forward_list(forward_list&& __list, const _Alloc& __al)\n+      noexcept(_Node_alloc_traits::_S_always_equal())\n       : _Base(std::move(__list), _Node_alloc_type(__al))\n       { }\n \n@@ -504,7 +495,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  The %forward_list copy constructor.\n        *  @param  __list  A %forward_list of identical element and allocator\n-       *                types.\n+       *                  types.\n        */\n       forward_list(const forward_list& __list)\n       : _Base(_Node_alloc_traits::_S_select_on_copy(\n@@ -514,10 +505,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  The %forward_list move constructor.\n        *  @param  __list  A %forward_list of identical element and allocator\n-       *                types.\n+       *                  types.\n        *\n        *  The newly-created %forward_list contains the exact contents of @a\n-       *  forward_list. The contents of @a __list are a valid, but unspecified\n+       *  __list. The contents of @a __list are a valid, but unspecified\n        *  %forward_list.\n        */\n       forward_list(forward_list&& __list) noexcept\n@@ -647,7 +638,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       get_allocator() const noexcept\n       { return allocator_type(this->_M_get_Node_allocator()); }\n \n-      // 23.2.3.2 iterators:\n+      // 23.3.4.3 iterators:\n \n       /**\n        *  Returns a read/write iterator that points before the first element\n@@ -743,7 +734,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       max_size() const noexcept\n       { return _Node_alloc_traits::max_size(this->_M_get_Node_allocator()); }\n \n-      // 23.2.3.3 element access:\n+      // 23.3.4.4 element access:\n \n       /**\n        *  Returns a read/write reference to the data at the first\n@@ -767,7 +758,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         return __front->_M_value;\n       }\n \n-      // 23.2.3.4 modi\ufb01ers:\n+      // 23.3.4.5 modi\ufb01ers:\n \n       /**\n        *  @brief  Constructs object in %forward_list at the front of the\n@@ -1031,7 +1022,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       clear() noexcept\n       { this->_M_erase_after(&this->_M_impl._M_head, 0); }\n \n-      // 23.2.3.5 forward_list operations:\n+      // 23.3.4.6 forward_list operations:\n \n       /**\n        *  @brief  Insert contents of another %forward_list.\n@@ -1223,7 +1214,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { this->_M_impl._M_head._M_reverse_after(); }\n \n     private:\n-      // Called by the range constructor to implement [23.1.1]/9\n+      // Called by the range constructor to implement [23.3.4.2]/9\n       template<typename _InputIterator>\n         void\n         _M_range_initialize(_InputIterator __first, _InputIterator __last);"}, {"sha": "4f9a7fad4eb6da7c12d552f9184bb8a962321d82", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=b0b4a253087edb32c7c1b7f07e156d6caf6ff3b3", "patch": "@@ -34,30 +34,16 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n-  template<typename _Tp, typename _Alloc>\n-    _Fwd_list_base<_Tp, _Alloc>::\n-    _Fwd_list_base(const _Fwd_list_base& __lst, const _Node_alloc_type& __a)\n-    : _M_impl(__a)\n-    {\n-      this->_M_impl._M_head._M_next = 0;\n-      _Fwd_list_node_base* __to = &this->_M_impl._M_head;\n-      _Node* __curr = static_cast<_Node*>(__lst._M_impl._M_head._M_next);\n-\n-      while (__curr)\n-        {\n-          __to->_M_next = _M_create_node(__curr->_M_value);\n-          __to = __to->_M_next;\n-          __curr = static_cast<_Node*>(__curr->_M_next);\n-        }\n-    }\n-\n   template<typename _Tp, typename _Alloc>\n     _Fwd_list_base<_Tp, _Alloc>::\n     _Fwd_list_base(_Fwd_list_base&& __lst, const _Node_alloc_type& __a)\n     : _M_impl(__a)\n     {\n       if (__lst._M_get_Node_allocator() == __a)\n-        this->_M_impl._M_head._M_next = __lst._M_impl._M_head._M_next;\n+\t{\n+\t  this->_M_impl._M_head._M_next = __lst._M_impl._M_head._M_next;\n+\t  __lst._M_impl._M_head._M_next = 0;\n+\t}\n       else\n         {\n           this->_M_impl._M_head._M_next = 0;\n@@ -72,7 +58,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n               __curr = static_cast<_Node*>(__curr->_M_next);\n             }\n         }\n-      __lst._M_impl._M_head._M_next = 0;\n     }\n \n   template<typename _Tp, typename _Alloc>\n@@ -119,7 +104,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return __last;\n     }\n \n-  // Called by the range constructor to implement [23.1.1]/9\n+  // Called by the range constructor to implement [23.3.4.2]/9\n   template<typename _Tp, typename _Alloc>\n     template<typename _InputIterator>\n       void"}]}