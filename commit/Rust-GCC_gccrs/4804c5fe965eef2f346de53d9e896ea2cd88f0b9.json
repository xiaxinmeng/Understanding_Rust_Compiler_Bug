{"sha": "4804c5fe965eef2f346de53d9e896ea2cd88f0b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgwNGM1ZmU5NjVlZWYyZjM0NmRlNTNkOWU4OTZlYTJjZDg4ZjBiOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-19T20:50:29Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-14T23:55:00Z"}, "message": "analyzer: introduce a set of known async-signal-unsafe functions\n\nThis patch uses the class function_set from the previous patch to\ngeneralize the test for an fprintf inside a signal handler to\ncheck for a set of known async-signal-unsafe functions.\n\ngcc/analyzer/ChangeLog:\n\t* analyzer-selftests.cc (selftest::run_analyzer_selftests): Call\n\tselftest::analyzer_sm_signal_cc_tests.\n\t* analyzer-selftests.h (selftest::analyzer_sm_signal_cc_tests):\n\tNew decl.\n\t* sm-signal.cc: Include \"analyzer/function-set.h\" and\n\t\"analyzer/analyzer-selftests.h\".\n\t(get_async_signal_unsafe_fns): New function.\n\t(signal_unsafe_p): Reimplement in terms of the above.\n\t(selftest::analyzer_sm_signal_cc_tests): New function.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/signal-5.c: New test.", "tree": {"sha": "76c4abc5bfcbe0daa782d729afabba990b77dc42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76c4abc5bfcbe0daa782d729afabba990b77dc42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4804c5fe965eef2f346de53d9e896ea2cd88f0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4804c5fe965eef2f346de53d9e896ea2cd88f0b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4804c5fe965eef2f346de53d9e896ea2cd88f0b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b5f19c37001d7c9974248ffcb65aadba33283c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b5f19c37001d7c9974248ffcb65aadba33283c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b5f19c37001d7c9974248ffcb65aadba33283c"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "bb3ac7267d98ff175173fcd5d03974d725dd82be", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=4804c5fe965eef2f346de53d9e896ea2cd88f0b9", "patch": "@@ -1,3 +1,15 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer-selftests.cc (selftest::run_analyzer_selftests): Call\n+\tselftest::analyzer_sm_signal_cc_tests.\n+\t* analyzer-selftests.h (selftest::analyzer_sm_signal_cc_tests):\n+\tNew decl.\n+\t* sm-signal.cc: Include \"analyzer/function-set.h\" and\n+\t\"analyzer/analyzer-selftests.h\".\n+\t(get_async_signal_unsafe_fns): New function.\n+\t(signal_unsafe_p): Reimplement in terms of the above.\n+\t(selftest::analyzer_sm_signal_cc_tests): New function.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer-selftests.cc (selftest::run_analyzer_selftests): Call"}, {"sha": "2b8fa81fdb109cd91523fb8b4e88131e5035017e", "filename": "gcc/analyzer/analyzer-selftests.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Fanalyzer%2Fanalyzer-selftests.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Fanalyzer%2Fanalyzer-selftests.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-selftests.cc?ref=4804c5fe965eef2f346de53d9e896ea2cd88f0b9", "patch": "@@ -54,6 +54,7 @@ run_analyzer_selftests ()\n   analyzer_program_point_cc_tests ();\n   analyzer_program_state_cc_tests ();\n   analyzer_region_model_cc_tests ();\n+  analyzer_sm_signal_cc_tests ();\n #endif /* #if ENABLE_ANALYZER */\n }\n "}, {"sha": "80be32f4770b2307226141a741f770f79705662e", "filename": "gcc/analyzer/analyzer-selftests.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Fanalyzer%2Fanalyzer-selftests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Fanalyzer%2Fanalyzer-selftests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-selftests.h?ref=4804c5fe965eef2f346de53d9e896ea2cd88f0b9", "patch": "@@ -37,6 +37,7 @@ extern void analyzer_function_set_cc_tests ();\n extern void analyzer_program_point_cc_tests ();\n extern void analyzer_program_state_cc_tests ();\n extern void analyzer_region_model_cc_tests ();\n+extern void analyzer_sm_signal_cc_tests ();\n \n } /* end of namespace selftest.  */\n "}, {"sha": "0057ab96d4454392eb3396a14f1a57cd00af64a6", "filename": "gcc/analyzer/sm-signal.cc", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Fanalyzer%2Fsm-signal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Fanalyzer%2Fsm-signal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-signal.cc?ref=4804c5fe965eef2f346de53d9e896ea2cd88f0b9", "patch": "@@ -56,6 +56,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/diagnostic-manager.h\"\n #include \"shortest-paths.h\"\n #include \"analyzer/exploded-graph.h\"\n+#include \"analyzer/function-set.h\"\n+#include \"analyzer/analyzer-selftests.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -246,16 +248,40 @@ class register_signal_handler : public custom_transition\n   tree m_fndecl;\n };\n \n-/* Return true if CALL is known to be unsafe to call from a signal handler.  */\n+/* Get a set of functions that are known to be unsafe to call from an\n+   async signal handler.  */\n \n-static bool\n-signal_unsafe_p (tree callee_fndecl)\n+static function_set\n+get_async_signal_unsafe_fns ()\n {\n-  // TODO: maintain a list of known unsafe functions\n-  if (is_named_call_p (callee_fndecl, \"fprintf\"))\n-    return true;\n+  // TODO: populate this list more fully\n+  static const char * const async_signal_unsafe_fns[] = {\n+    /* This array must be kept sorted.  */\n+    \"fprintf\",\n+    \"free\",\n+    \"malloc\",\n+    \"printf\",\n+    \"snprintf\",\n+    \"sprintf\",\n+    \"vfprintf\",\n+    \"vprintf\",\n+    \"vsnprintf\",\n+    \"vsprintf\"\n+  };\n+  const size_t count\n+    = sizeof(async_signal_unsafe_fns) / sizeof (async_signal_unsafe_fns[0]);\n+  function_set fs (async_signal_unsafe_fns, count);\n+  return fs;\n+};\n \n-  return false;\n+/* Return true if FNDECL is known to be unsafe to call from a signal\n+   handler.  */\n+\n+static bool\n+signal_unsafe_p (tree fndecl)\n+{\n+  function_set fs = get_async_signal_unsafe_fns ();\n+  return fs.contains_decl_p (fndecl);\n }\n \n /* Implementation of state_machine::on_stmt vfunc for signal_state_machine.  */\n@@ -325,4 +351,21 @@ make_signal_state_machine (logger *logger)\n   return new signal_state_machine (logger);\n }\n \n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+analyzer_sm_signal_cc_tests ()\n+{\n+  function_set fs = get_async_signal_unsafe_fns ();\n+  fs.assert_sorted ();\n+  fs.assert_sane ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* CHECKING_P */\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "8013bdbc2eb84e14a285b9d6446c2abbc338db0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4804c5fe965eef2f346de53d9e896ea2cd88f0b9", "patch": "@@ -1,3 +1,7 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/signal-5.c: New test.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/data-model-1.c: Remove xfail."}, {"sha": "4e464fffda54864e5ad2fa005d9265aeea8a16b6", "filename": "gcc/testsuite/gcc.dg/analyzer/signal-5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4804c5fe965eef2f346de53d9e896ea2cd88f0b9/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsignal-5.c?ref=4804c5fe965eef2f346de53d9e896ea2cd88f0b9", "patch": "@@ -0,0 +1,21 @@\n+/* Example of other bad calls within a signal handler.  */\n+\n+#include <stdlib.h>\n+#include <signal.h>\n+\n+extern void do_stuff (void *ptr);\n+extern void body_of_program(void);\n+\n+static void handler(int signum)\n+{\n+  void *ptr = malloc (1024); /* { dg-warning \"call to 'malloc' from within signal handler\" } */\n+  do_stuff (ptr);\n+  free (ptr); /* { dg-warning \"call to 'free' from within signal handler\" } */\n+}\n+\n+int main(int argc, const char *argv)\n+{\n+  signal(SIGINT, handler); /* { dg-message \"registering 'handler' as signal handler\" } */\n+  body_of_program();\n+  return 0;\n+}"}]}