{"sha": "00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBhY2E2ZTgzYWU1NzdiNTIwZjgxMGFhZjcxOTdjMzBjMmVhZjFhMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-11-23T09:18:41Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-11-23T09:18:41Z"}, "message": "locale_facets.h (isspace, [...]): Add doxygen markup.\n\n\n2004-11-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.h (isspace, isprint, isupper,\n\tislower, isalpha, isdigit, ispunct, isxdigit, isalnum, isgraph,\n\ttoupper, tolower): Add doxygen markup.\n\t(codecvt_byname, ctype_byname, numpunct_byname, collate_byname,\n\ttime_get_byname, time_put_byname, moneypunct_byname,\n\tmessages_byname): Same.\n\t* include/std/std_fstream.h: Remove superfluous markup.\n\t* include/std/std_sstream.h: Same.\n\t* include/std/std_streambuf.h: Same.\n\t* include/ext/enc_filebuf.h: Adjust markup.\n\t* include/ext/stdio_filebuf.h: Same.\n\t* include/ext/stdio_sync_filebuf.h: Same.\n\t* include/bits/codecvt.h: Same.\n\t* config/os/gnu-linux/ctype_base.h: Same.\n\t* config/locale/ieee_1003.1-2001/codecvt_specializations.h: Same.\n\t* include/tr1/array: Add markup.\n\t* include/tr1/tuple: Same.\n\n\t* docs/doxygen/run_doxygen: Print arguments.\n\n\t* docs/doxygen/user.cfg.in: Tweaks.\n\nFrom-SVN: r91080", "tree": {"sha": "dd4eb2800fa7ed1cad2ed83efc3840252823267c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd4eb2800fa7ed1cad2ed83efc3840252823267c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/comments", "author": null, "committer": null, "parents": [{"sha": "402fbd4d555fc7a879927a70f1190f74bfabfe85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402fbd4d555fc7a879927a70f1190f74bfabfe85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402fbd4d555fc7a879927a70f1190f74bfabfe85"}], "stats": {"total": 293, "additions": 111, "deletions": 182}, "files": [{"sha": "62a9776c6813469be931fa6e485ae6f85596b804", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -1,3 +1,27 @@\n+2004-11-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.h (isspace, isprint, isupper,\n+\tislower, isalpha, isdigit, ispunct, isxdigit, isalnum, isgraph,\n+\ttoupper, tolower): Add doxygen markup.\n+\t(codecvt_byname, ctype_byname, numpunct_byname, collate_byname,\n+\ttime_get_byname, time_put_byname, moneypunct_byname,\n+\tmessages_byname): Same.\n+\t* include/std/std_fstream.h: Remove superfluous markup.\n+\t* include/std/std_sstream.h: Same.\n+\t* include/std/std_streambuf.h: Same.\n+\t* include/ext/enc_filebuf.h: Adjust markup.\n+\t* include/ext/stdio_filebuf.h: Same.\n+\t* include/ext/stdio_sync_filebuf.h: Same.\n+\t* include/bits/codecvt.h: Same.\n+\t* config/os/gnu-linux/ctype_base.h: Same.\n+\t* config/locale/ieee_1003.1-2001/codecvt_specializations.h: Same.\n+\t* include/tr1/array: Add markup.\n+\t* include/tr1/tuple: Same.\n+\t\n+\t* docs/doxygen/run_doxygen: Print arguments.\n+\n+\t* docs/doxygen/user.cfg.in: Tweaks.\n+\t\n 2004-11-19  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* include/bits/basic_string.h, include/bits/locale_classes.h,"}, {"sha": "268a79e362780600c165b3c795320b6e95d452fb", "filename": "libstdc++-v3/config/locale/ieee_1003.1-2001/codecvt_specializations.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fieee_1003.1-2001%2Fcodecvt_specializations.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -35,6 +35,11 @@\n \n // Written by Benjamin Kosnik <bkoz@cygnus.com>\n \n+/** @file bits/codecvt_specializations.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n   // XXX\n   // Define this here so codecvt.cc can have _S_max_size definition.\n #define _GLIBCXX_USE___ENC_TRAITS 1\n@@ -192,9 +197,9 @@\n     { return _M_ext_enc; }    \n   };\n \n-  /// Partial specialization.\n-  // This specialization takes advantage of iconv to provide code\n-  // conversions between a large number of character encodings.\n+  /// @brief  class codecvt<InternT, _ExternT, __enc_traits> specialization.\n+  // This partial specialization takes advantage of iconv to provide\n+  // code conversions between a large number of character encodings.\n   template<typename _InternT, typename _ExternT>\n     class codecvt<_InternT, _ExternT, __enc_traits>\n     : public __codecvt_abstract_base<_InternT, _ExternT, __enc_traits>"}, {"sha": "3a34bc602bd5683b0305961d34b7579a57a8b5b1", "filename": "libstdc++-v3/config/os/gnu-linux/ctype_base.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fctype_base.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,6 +32,11 @@\n // ISO C++ 14882: 22.1  Locales\n //\n   \n+/** @file ctype_base.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n // Information as gleaned from /usr/include/ctype.h\n   \n   /// @brief  Base class for ctype."}, {"sha": "6f98463d3eeb57827317b3016673965a5417e8d0", "filename": "libstdc++-v3/docs/doxygen/run_doxygen", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -108,6 +108,9 @@ enabled_sections=\n generate_tagfile=\n DATEtext=`date '+%Y-%m-%d'`\n \n+# Show how this script is called.\n+echo run_doxygen $*\n+\n parse_options $*\n find_doxygen\n "}, {"sha": "19118031a78d1076516e443ca56a82c3f779cf14", "filename": "libstdc++-v3/docs/doxygen/user.cfg.in", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fuser.cfg.in?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -35,16 +35,16 @@ SUBGROUPING            = YES\n EXTRACT_ALL            = NO\n EXTRACT_PRIVATE        = NO\n EXTRACT_STATIC         = YES\n-EXTRACT_LOCAL_CLASSES  = NO\n-EXTRACT_LOCAL_METHODS  = NO\n+EXTRACT_LOCAL_CLASSES  = YES\n+EXTRACT_LOCAL_METHODS  = YES\n HIDE_UNDOC_MEMBERS     = NO\n HIDE_UNDOC_CLASSES     = YES\n HIDE_FRIEND_COMPOUNDS  = NO\n HIDE_IN_BODY_DOCS      = NO\n INTERNAL_DOCS          = NO\n CASE_SENSE_NAMES       = NO\n HIDE_SCOPE_NAMES       = YES\n-SHOW_INCLUDE_FILES     = YES\n+SHOW_INCLUDE_FILES     = NO\n INLINE_INFO            = YES\n SORT_MEMBER_DOCS       = YES\n SORT_BRIEF_DOCS        = YES\n@@ -70,7 +70,9 @@ WARN_LOGFILE           =\n # configuration options related to the input files\n #---------------------------------------------------------------------------\n INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n-                         @srcdir@/src \\\n+\t\t\t include/@host_alias@/bits \\\n+                         include/bits \\\n+                         include/ext \\\n                          @srcdir@/libsupc++/exception \\\n                          @srcdir@/libsupc++/new \\\n                          @srcdir@/libsupc++/typeinfo \\\n@@ -101,8 +103,6 @@ INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n                          include/utility \\\n                          include/valarray \\\n                          include/vector \\\n-                         include/bits \\\n-                         include/ext \\\n                          include/ext/algorithm \\\n                          include/ext/functional \\\n                          include/ext/hash_map \\\n@@ -112,8 +112,7 @@ INPUT                  = @srcdir@/docs/doxygen/doxygroups.cc \\\n                          include/ext/rope \\\n                          include/ext/slist \\\n                          include/tr1/array \\\n-                         include/tr1/tuple \\\n-\t\t\t include/@host_alias@/bits\n+                         include/tr1/tuple \n FILE_PATTERNS          = *.h \\\n                          *.tcc\n RECURSIVE              = NO\n@@ -253,13 +252,13 @@ PERL_PATH              = /usr/bin/perl\n # Configuration options related to the dot tool   \n #---------------------------------------------------------------------------\n CLASS_DIAGRAMS         = YES\n-HIDE_UNDOC_RELATIONS   = YES\n+HIDE_UNDOC_RELATIONS   = NO\n HAVE_DOT               = NO\n CLASS_GRAPH            = YES\n-COLLABORATION_GRAPH    = YES\n+COLLABORATION_GRAPH    = NO\n UML_LOOK               = NO\n TEMPLATE_RELATIONS     = YES\n-INCLUDE_GRAPH          = YES\n+INCLUDE_GRAPH          = NO\n INCLUDED_BY_GRAPH      = NO\n CALL_GRAPH             = NO\n GRAPHICAL_HIERARCHY    = YES"}, {"sha": "51ad4dd7d1f125cf530b7b4fba9cf3205df4e9a3", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -33,7 +33,7 @@\n \n // Written by Benjamin Kosnik <bkoz@cygnus.com>\n \n-/** @file codecvt.h\n+/** @file bits/codecvt.h\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n  */\n@@ -43,10 +43,7 @@\n \n #pragma GCC system_header\n \n-  //  22.2.1.5  Template class codecvt\n-  /**\n-   *  @brief  Base class for codecvt facet providing conversion result enum.\n-   */\n+  /// @brief  Empty base class for codecvt facet [22.2.1.5].\n   class codecvt_base\n   {\n   public:\n@@ -59,12 +56,8 @@\n     };\n   };\n \n-  // Template class __codecvt_abstract_base\n-  // NB: An abstract base class that fills in the public inlines, so\n-  // that the specializations don't have to re-copy the public\n-  // interface.\n   /**\n-   *  @brief  Common base for codecvt facet\n+   *  @brief  Common base for codecvt functions.\n    *\n    *  This template class provides implementations of the public functions\n    *  that forward to the protected virtual functions.\n@@ -271,8 +264,8 @@\n       do_max_length() const throw() = 0;\n     };\n \n-  /// @brief  22.2.1.5 Template class codecvt\n-  // NB: Generic, mostly useless implementation.\n+  /// @brief class codecvt [22.2.1.5].\n+  /// NB: Generic, mostly useless implementation.\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     class codecvt\n     : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>\n@@ -334,7 +327,7 @@\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     locale::id codecvt<_InternT, _ExternT, _StateT>::id;\n \n-  /// @brief  codecvt<char, char, mbstate_t> required specialization\n+  /// @brief class codecvt<char, char, mbstate_t> specialization.\n   template<>\n     class codecvt<char, char, mbstate_t>\n     : public __codecvt_abstract_base<char, char, mbstate_t>\n@@ -392,7 +385,7 @@\n   };\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  /// @brief  codecvt<wchar_t, char, mbstate_t> required specialization\n+  /// @brief  class codecvt<wchar_t, char, mbstate_t> specialization.\n   template<>\n     class codecvt<wchar_t, char, mbstate_t>\n     : public __codecvt_abstract_base<wchar_t, char, mbstate_t>\n@@ -452,7 +445,7 @@\n     };\n #endif //_GLIBCXX_USE_WCHAR_T\n \n-  /// @brief  22.2.1.6  Template class codecvt_byname\n+  /// @brief class codecvt_byname [22.2.1.6].\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>\n     {"}, {"sha": "e6374243cebed692c2a7c000a9ff48d43ea5ede5", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -191,7 +191,7 @@ namespace std\n \n   // 27.4.2  Class ios_base\n   /**\n-   *  @brief  The very top of the I/O class hierarchy.\n+   *  @brief  The base of the I/O class hierarchy.\n    *\n    *  This class defines everything that can be defined about I/O that does\n    *  not depend on the type of characters being input or output.  Most"}, {"sha": "922ee21084a95551e532c2012681a081f9e2ed27", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -1511,7 +1511,7 @@ namespace std\n   // Include host and configuration specific ctype inlines.\n   #include <bits/ctype_inline.h>\n \n-  /// @brief  22.2.1.2  Template class ctype_byname\n+  /// @brief  class ctype_byname [22.2.1.2].\n   template<typename _CharT>\n     class ctype_byname : public ctype<_CharT>\n     {\n@@ -1526,7 +1526,7 @@ namespace std\n       ~ctype_byname() { };\n     };\n \n-  // 22.2.1.4  Class ctype_byname specializations.\n+  /// 22.2.1.4  Class ctype_byname specializations.\n   template<>\n     ctype_byname<char>::ctype_byname(const char*, size_t refs);\n \n@@ -1888,6 +1888,7 @@ namespace std\n     numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);\n #endif\n \n+  /// @brief  class numpunct_byname [22.2.3.2].\n   template<typename _CharT>\n     class numpunct_byname : public numpunct<_CharT>\n     {\n@@ -2640,6 +2641,7 @@ namespace std\n     collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;\n #endif\n \n+  /// @brief  class collate_byname [22.2.4.2].\n   template<typename _CharT>\n     class collate_byname : public collate<_CharT>\n     {\n@@ -3292,6 +3294,7 @@ namespace std\n   template<typename _CharT, typename _InIter>\n     locale::id time_get<_CharT, _InIter>::id;\n \n+  /// @brief  class time_get_byname [22.2.5.2].\n   template<typename _CharT, typename _InIter>\n     class time_get_byname : public time_get<_CharT, _InIter>\n     {\n@@ -3415,6 +3418,7 @@ namespace std\n   template<typename _CharT, typename _OutIter>\n     locale::id time_put<_CharT, _OutIter>::id;\n \n+  /// @brief  class time_put_byname [22.2.5.4].\n   template<typename _CharT, typename _OutIter>\n     class time_put_byname : public time_put<_CharT, _OutIter>\n     {\n@@ -3922,6 +3926,7 @@ namespace std\n \t\t\t\t\t\t\t const char*);\n #endif\n \n+  /// @brief  class moneypunct_byname [22.2.6.4].\n   template<typename _CharT, bool _Intl>\n     class moneypunct_byname : public moneypunct<_CharT, _Intl>\n     {\n@@ -4469,7 +4474,8 @@ namespace std\n     messages<wchar_t>::do_get(catalog, int, int, const wstring&) const;\n #endif\n \n-  template<typename _CharT>\n+   /// @brief class messages_byname [22.2.7.2].\n+   template<typename _CharT>\n     class messages_byname : public messages<_CharT>\n     {\n     public:\n@@ -4493,72 +4499,84 @@ namespace std\n   // NB: These are inline because, when used in a loop, some compilers\n   // can hoist the body out of the loop; then it's just as fast as the\n   // C is*() function.\n-  //@{\n-  /// Convenience interface to ctype.is().\n+\n+  /// Convenience interface to ctype.is(ctype_base::space, __c).\n   template<typename _CharT>\n     inline bool\n     isspace(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }\n \n+  /// Convenience interface to ctype.is(ctype_base::print, __c).\n   template<typename _CharT>\n     inline bool\n     isprint(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }\n \n+  /// Convenience interface to ctype.is(ctype_base::cntrl, __c).\n   template<typename _CharT>\n     inline bool\n     iscntrl(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }\n \n+  /// Convenience interface to ctype.is(ctype_base::upper, __c).\n   template<typename _CharT>\n     inline bool\n     isupper(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }\n \n+  /// Convenience interface to ctype.is(ctype_base::lower, __c).\n   template<typename _CharT>\n-    inline bool islower(_CharT __c, const locale& __loc)\n+    inline bool \n+    islower(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }\n \n+  /// Convenience interface to ctype.is(ctype_base::alpha, __c).\n   template<typename _CharT>\n     inline bool\n     isalpha(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }\n \n+  /// Convenience interface to ctype.is(ctype_base::digit, __c).\n   template<typename _CharT>\n     inline bool\n     isdigit(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }\n \n+  /// Convenience interface to ctype.is(ctype_base::punct, __c).\n   template<typename _CharT>\n     inline bool\n     ispunct(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }\n \n+  /// Convenience interface to ctype.is(ctype_base::xdigit, __c).\n   template<typename _CharT>\n     inline bool\n     isxdigit(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }\n \n+  /// Convenience interface to ctype.is(ctype_base::alnum, __c).\n   template<typename _CharT>\n     inline bool\n     isalnum(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }\n \n+  /// Convenience interface to ctype.is(ctype_base::graph, __c).\n   template<typename _CharT>\n     inline bool\n     isgraph(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }\n \n+  /// Convenience interface to ctype.toupper(__c).\n   template<typename _CharT>\n     inline _CharT\n     toupper(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }\n \n+  /// Convenience interface to ctype.tolower(__c).\n   template<typename _CharT>\n     inline _CharT\n     tolower(_CharT __c, const locale& __loc)\n     { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }\n-  //@}\n } // namespace std\n \n #endif"}, {"sha": "c4df9337afce5167e7047bfbfbf0dea8621365bb", "filename": "libstdc++-v3/include/ext/enc_filebuf.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -1,6 +1,6 @@\n // filebuf with __enc_traits state type -*- C++ -*-\n \n-// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -27,6 +27,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file ext/enc_filebuf.h\n+ *  This file is a GNU extension to the Standard C++ Library.\n+ */\n+\n #include <fstream>\n #include <locale>\n \n@@ -35,13 +39,15 @@ namespace __gnu_cxx\n   // Custom traits type with __enc_traits for the state type, and the\n   // associated fpos<__enc_traits> for the position type, all other\n   // bits equivalent to the required char_traits instantiations.\n+  /// @brief  class enc_char_traits.\n   template<typename _CharT>\n     struct enc_char_traits: public std::char_traits<_CharT>\n     {\n       typedef std::__enc_traits\t\t\tstate_type;\n       typedef typename std::fpos<state_type>\tpos_type;\n     };\n \n+  /// @brief  class enc_filebuf.\n   template<typename _CharT>\n     class enc_filebuf\n     : public std::basic_filebuf<_CharT, enc_char_traits<_CharT> >"}, {"sha": "b9cfc0c13f537d0e39488b3c96edfd64879d0260", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -41,7 +41,6 @@\n namespace __gnu_cxx\n {\n   /**\n-   *  @class stdio_filebuf ext/stdio_filebuf.h <ext/stdio_filebuf.h>\n    *  @brief Provides a layer of compatibility for C/POSIX.\n    *\n    *  This GNU extension provides extensions for working with standard C"}, {"sha": "ee51488e5b75245fc220edb6df52595d273d44d8", "filename": "libstdc++-v3/include/ext/stdio_sync_filebuf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_sync_filebuf.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -46,7 +46,7 @@\n \n namespace __gnu_cxx\n {\n-  /// @brief  Class stdio_sync_filebuf.\n+  /// @brief  class stdio_sync_filebuf.\n   template<typename _CharT, typename _Traits = std::char_traits<_CharT> >\n     class stdio_sync_filebuf : public std::basic_streambuf<_CharT, _Traits>\n     {"}, {"sha": "7ce5c0014afebdade99a9b631697d840b3a9acd5", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -76,37 +76,20 @@ namespace std\n       typedef typename traits_type::pos_type \t\tpos_type;\n       typedef typename traits_type::off_type \t\toff_type;\n \n-      //@{\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n       typedef basic_filebuf<char_type, traits_type>     __filebuf_type;\n       typedef __basic_file<char>\t\t        __file_type;\n       typedef typename traits_type::state_type          __state_type;\n       typedef codecvt<char_type, char, __state_type>    __codecvt_type;\n-      //@}\n \n       friend class ios_base; // For sync_with_stdio.\n \n     protected:\n       // Data Members:\n       // MT lock inherited from libio or other low-level io library.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __c_lock          \t_M_lock;\n \n       // External buffer.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __file_type \t\t_M_file;\n \n       /**\n@@ -117,30 +100,15 @@ namespace std\n       ios_base::openmode \t_M_mode;\n \n       // Beginning state type for codecvt.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __state_type \t\t_M_state_beg;\n \n       // During output, the state that corresponds to pptr(),\n       // during input, the state that corresponds to egptr() and\n       // _M_ext_next.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __state_type\t\t_M_state_cur;\n \n       // Not used for output. During input, the state that corresponds\n       // to eback() and _M_ext_buf.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __state_type\t\t_M_state_last;\n \n       /**\n@@ -160,11 +128,6 @@ namespace std\n       size_t\t\t\t_M_buf_size;\n \n       // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       bool\t\t\t_M_buf_allocated;\n \n       /**\n@@ -316,24 +279,13 @@ namespace std\n       close() throw();\n \n     protected:\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       void\n       _M_allocate_internal_buffer();\n \n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       void\n       _M_destroy_internal_buffer() throw();\n \n       // [27.8.1.4] overridden virtual functions\n-      // [documentation is inherited]\n       virtual streamsize\n       showmanyc();\n \n@@ -342,11 +294,9 @@ namespace std\n       // charater from the real input source when the buffer is empty.\n       // Buffered input uses underflow()\n \n-      // [documentation is inherited]\n       virtual int_type\n       underflow();\n \n-      // [documentation is inherited]\n       virtual int_type\n       pbackfail(int_type __c = _Traits::eof());\n \n@@ -357,21 +307,11 @@ namespace std\n       // character c.\n       // 27.5.2.4.5\n       // Consume some sequence of the characters in the pending sequence.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       virtual int_type\n       overflow(int_type __c = _Traits::eof());\n \n       // Convert internal byte sequence to external, char-based\n       // sequence via codecvt.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       bool\n       _M_convert_to_external(char_type*, streamsize);\n \n@@ -390,47 +330,31 @@ namespace std\n       virtual __streambuf_type*\n       setbuf(char_type* __s, streamsize __n);\n \n-      // [documentation is inherited]\n       virtual pos_type\n       seekoff(off_type __off, ios_base::seekdir __way,\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n-      // [documentation is inherited]\n       virtual pos_type\n       seekpos(pos_type __pos,\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n       // Common code for seekoff and seekpos\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       pos_type\n       _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);\n \n-      // [documentation is inherited]\n       virtual int\n       sync();\n \n-      // [documentation is inherited]\n       virtual void\n       imbue(const locale& __loc);\n \n-      // [documentation is inherited]\n       virtual streamsize\n       xsgetn(char_type* __s, streamsize __n);\n \n-      // [documentation is inherited]\n       virtual streamsize\n       xsputn(const char_type* __s, streamsize __n);\n \n       // Flushes output buffer, then writes unshift sequence.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       bool\n       _M_terminate_output();\n \n@@ -491,11 +415,6 @@ namespace std\n       typedef basic_istream<char_type, traits_type>\t__istream_type;\n \n     private:\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __filebuf_type\t_M_filebuf;\n \n     public:\n@@ -620,11 +539,6 @@ namespace std\n       typedef basic_ostream<char_type, traits_type>\t__ostream_type;\n \n     private:\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __filebuf_type\t_M_filebuf;\n \n     public:\n@@ -753,11 +667,6 @@ namespace std\n       typedef basic_iostream<char_type, traits_type>\t__iostream_type;\n \n     private:\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __filebuf_type\t_M_filebuf;\n \n     public:"}, {"sha": "07be5f9d20ca8843d83c395cba45c66422f96d16", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -73,16 +73,9 @@ namespace std\n       typedef typename traits_type::pos_type \t\tpos_type;\n       typedef typename traits_type::off_type \t\toff_type;\n \n-      //@{\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       typedef basic_streambuf<char_type, traits_type>  \t__streambuf_type;\n       typedef basic_string<char_type, _Traits, _Alloc> \t__string_type;\n       typedef typename __string_type::size_type\t\t__size_type;\n-      //@}\n \n     protected:\n       /**\n@@ -93,11 +86,6 @@ namespace std\n       ios_base::openmode \t_M_mode;\n \n       // Data Members:\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __string_type \t\t_M_string;\n \n     public:\n@@ -169,11 +157,6 @@ namespace std\n \n     protected:\n       // Common initialization code goes here.\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       void\n       _M_stringbuf_init(ios_base::openmode __mode)\n       {\n@@ -185,15 +168,12 @@ namespace std\n \t_M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);\n       }\n \n-      // [documentation is inherited]\n       virtual int_type\n       underflow();\n \n-      // [documentation is inherited]\n       virtual int_type\n       pbackfail(int_type __c = traits_type::eof());\n \n-      // [documentation is inherited]\n       virtual int_type\n       overflow(int_type __c = traits_type::eof());\n \n@@ -227,12 +207,10 @@ namespace std\n \treturn this;\n       }\n \n-      // [documentation is inherited]\n       virtual pos_type\n       seekoff(off_type __off, ios_base::seekdir __way,\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n-      // [documentation is inherited]\n       virtual pos_type\n       seekpos(pos_type __sp,\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n@@ -243,11 +221,6 @@ namespace std\n       // Assumes: contents of _M_string and internal buffer match exactly.\n       // __i == _M_in_cur - _M_in_beg\n       // __o == _M_out_cur - _M_out_beg\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       void\n       _M_sync(char_type* __base, __size_type __i, __size_type __o)\n       {\n@@ -320,11 +293,6 @@ namespace std\n       typedef basic_istream<char_type, traits_type>\t__istream_type;\n \n     private:\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __stringbuf_type\t_M_stringbuf;\n \n     public:\n@@ -438,11 +406,6 @@ namespace std\n       typedef basic_ostream<char_type, traits_type>\t__ostream_type;\n \n     private:\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __stringbuf_type\t_M_stringbuf;\n \n     public:\n@@ -556,11 +519,6 @@ namespace std\n       typedef basic_iostream<char_type, traits_type>\t__iostream_type;\n \n     private:\n-      /**\n-       *  @if maint\n-       *  @doctodo\n-       *  @endif\n-      */\n       __stringbuf_type\t_M_stringbuf;\n \n     public:"}, {"sha": "ef59ecc33a3c88b57854562e4c3ce8506af832f6", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -37,8 +37,8 @@\n  *  in your programs, rather than any of the \"st[dl]_*.h\" implementation files.\n  */\n \n-#ifndef _CLIBXX_STREAMBUF\n-#define _CLIBXX_STREAMBUF 1\n+#ifndef _GLIBXX_STREAMBUF\n+#define _GLIBXX_STREAMBUF 1\n \n #pragma GCC system_header\n "}, {"sha": "ce1ad2278f472e3fafae6ab3170845e78195abe7", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -27,6 +27,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n #ifndef _ARRAY\n #define _ARRAY 1\n \n@@ -40,8 +44,8 @@ namespace std\n {\n namespace tr1\n {\n-  /// @brief  [6.2.2] Class template array template\n-  // Requires complete type _Tp.\n+  /// @brief  struct array [6.2.2].\n+  /// NB: Requires complete type _Tp.\n   template<typename _Tp, size_t _Nm = 1>\n     struct array\n     {\n@@ -190,7 +194,7 @@ namespace tr1\n    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n    { return !(__one < __two); }\n \n-  // [6.2.2.2] Specialized algorithms.\n+  // Specialized algorithms [6.2.2.2].\n  template<typename _Tp, size_t _Nm>\n    void\n    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)"}, {"sha": "9a6dfa8f8682660d96525f553a03b71a00f2107a", "filename": "libstdc++-v3/include/tr1/tuple", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00aca6e83ae577b520f810aaf7197c30c2eaf1a0/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple?ref=00aca6e83ae577b520f810aaf7197c30c2eaf1a0", "patch": "@@ -22,6 +22,10 @@\n \n // This header is automatically generated: see maketuple.c for details.\n \n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n #ifndef _TUPLE\n #define _TUPLE 1\n \n@@ -35,15 +39,14 @@ namespace tr1\n   // when the tuple is not maximum possible size.\n   struct _NullClass { };\n \n-  /// @brief  Foward definition of the tuple class.\n   template<typename _Tp0 = _NullClass, typename _Tp1 = _NullClass,\n \t   typename _Tp2 = _NullClass, typename _Tp3 = _NullClass,\n \t   typename _Tp4 = _NullClass, typename _Tp5 = _NullClass,\n \t   typename _Tp6 = _NullClass, typename _Tp7 = _NullClass,\n \t   typename _Tp8 = _NullClass, typename _Tp9 = _NullClass>\n     class tuple;\n \n-  /// @brief  Gives the type of the ith element of a given tuple type.\n+  /// Gives the type of the ith element of a given tuple type.\n   template<int __i, typename _Tp>\n     struct tuple_element;\n \n@@ -110,14 +113,15 @@ namespace tr1\n \t\t\t\t  _Tp7, _Tp8, _Tp9> >\n     { typedef _Tp8 type; };\n \n+  /// @brief  class tuple_element\n   template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n \t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n \t   typename _Tp8, typename _Tp9>\n     struct tuple_element<9, tuple<_Tp0, _Tp1, _Tp2, _Tp3, _Tp4, _Tp5, _Tp6,\n \t\t\t\t  _Tp7, _Tp8, _Tp9> >\n     { typedef _Tp9 type; };\n \n-  /// @brief  Finds the size of a given tuple type.\n+  /// Finds the size of a given tuple type.\n   template<typename _Tp>\n     struct tuple_size;\n \n@@ -181,6 +185,7 @@ namespace tr1\n \t\t\t    _Tp8,  _NullClass> >\n     { static const int value = 9; };\n \n+  /// @brief  class tuple_size\n   template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n \t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n \t   typename _Tp8, typename _Tp9>\n@@ -821,6 +826,7 @@ namespace tr1\n         friend class tuple;\n   };\n \n+  /// @brief  Template class tuple\n   template<typename _Tp0, typename _Tp1, typename _Tp2, typename _Tp3,\n \t   typename _Tp4, typename _Tp5, typename _Tp6, typename _Tp7,\n \t   typename _Tp8, typename _Tp9>"}]}