{"sha": "d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5ZmE2YjVmMTM3MjQyOWU1NmMyZDRmOGQzODRlZDM4OGEyMmQyMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-11-06T23:51:19Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-11-06T23:51:19Z"}, "message": "c-decl.c (shadow_tag_warned, [...]): Handle _Alignas specifiers.\n\n\t* c-decl.c (shadow_tag_warned, grokdeclarator): Handle _Alignas\n\tspecifiers.\n\t(build_null_declspecs): Initialize align_log and alignas_p fields.\n\t(declspecs_add_alignas): New.\n\t* c-parser.c (c_token_starts_declspecs): Handle RID_ALIGNAS.\n\t(c_parser_declspecs): Handle _Alignas specifiers.\n\t(c_parser_alignas_specifier): New.\n\t(c_parser_alignof_expression): Diagnose alignof use for non-C1X.\n\tDiagnose _Alignof (expression).\n\t* c-tree.h (struct c_declspecs): Add align_log and alignas_p\n\tfields.\n\t(declspecs_add_alignas): Declare.\n\t* ginclude/stddef.h (max_align_t): Define for C1X and C++11.\n\t* ginclude/stdalign.h: New.\n\t* Makefile.in (USER_H): Add stdalign.h.\n\nc-family:\n\t* c-common.c (c_common_reswords): Add _Alignas and _Alignof.\n\t(c_sizeof_or_alignof_type): Diagnose alignof applied to a function\n\ttype.\n\t(check_user_alignment): New.  Split out of\n\thandle_aligned_attribute.  Disallow integer constants with\n\tnoninteger types.  Conditionally allow zero.\n\t(handle_aligned_attribute): Use check_user_alignment.\n\t* c-common.h (RID_ALIGNAS, check_user_alignment): New.\n\ntestsuite:\n\t* g++.dg/cpp0x/alignof3.C, gcc.dg/c1x-align-1.c,\n\tgcc.dg/c1x-align-2.c, gcc.dg/c1x-align-3.c, gcc.dg/c1x-align-4.c,\n\tgcc.dg/c90-align-1.c, gcc.dg/c99-align-1.c: New tests.\n\t* gcc.dg/gnu89-const-expr-1.c, gcc.dg/gnu90-const-expr-1.c,\n\tgcc.dg/gnu99-const-expr-1.c, gcc.dg/gnu99-static-1.c: Update\n\texpected diagnostics.\n\nFrom-SVN: r181048", "tree": {"sha": "665bdd624cc911e728a962281f278e5fbf2aefce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/665bdd624cc911e728a962281f278e5fbf2aefce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55d2e499d693df45f3065f8bf9f654fd816ae0fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55d2e499d693df45f3065f8bf9f654fd816ae0fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55d2e499d693df45f3065f8bf9f654fd816ae0fb"}], "stats": {"total": 528, "additions": 506, "deletions": 22}, "files": [{"sha": "c40541ff638ab85d4268026d062982f23ff438ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -1,3 +1,21 @@\n+2011-11-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (shadow_tag_warned, grokdeclarator): Handle _Alignas\n+\tspecifiers.\n+\t(build_null_declspecs): Initialize align_log and alignas_p fields.\n+\t(declspecs_add_alignas): New.\n+\t* c-parser.c (c_token_starts_declspecs): Handle RID_ALIGNAS.\n+\t(c_parser_declspecs): Handle _Alignas specifiers.\n+\t(c_parser_alignas_specifier): New.\n+\t(c_parser_alignof_expression): Diagnose alignof use for non-C1X.\n+\tDiagnose _Alignof (expression).\n+\t* c-tree.h (struct c_declspecs): Add align_log and alignas_p\n+\tfields.\n+\t(declspecs_add_alignas): Declare.\n+\t* ginclude/stddef.h (max_align_t): Define for C1X and C++11.\n+\t* ginclude/stdalign.h: New.\n+\t* Makefile.in (USER_H): Add stdalign.h.\n+\n 2011-11-06  Joern Rennecke  <joern.rennecke@embecosm.com>\n \t    Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "20bb98ae92c6f36ffb5d9f90a4434d5273de146e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -376,6 +376,7 @@ USER_H = $(srcdir)/ginclude/float.h \\\n \t $(srcdir)/ginclude/varargs.h \\\n \t $(srcdir)/ginclude/stdfix.h \\\n \t $(srcdir)/ginclude/stdnoreturn.h \\\n+\t $(srcdir)/ginclude/stdalign.h \\\n \t $(EXTRA_HEADERS)\n \n USER_H_INC_NEXT_PRE = @user_headers_inc_next_pre@"}, {"sha": "3cb29c0b3a2a3e40c8fd592b5be4a2c990249054", "filename": "gcc/c-decl.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -3707,6 +3707,17 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n \t      warned = 1;\n \t      pending_xref_error ();\n \t    }\n+\t  else if (declspecs->typespec_kind != ctsk_tagdef\n+                   && declspecs->typespec_kind != ctsk_tagfirstref\n+\t\t   && declspecs->alignas_p)\n+\t    {\n+\t      if (warned != 1)\n+\t\tpedwarn (input_location, 0,\n+\t\t\t \"empty declaration with %<_Alignas%> \"\n+\t\t\t  \"does not redeclare tag\");\n+\t      warned = 1;\n+\t      pending_xref_error ();\n+\t    }\n \t  else\n \t    {\n \t      pending_invalid_xref = 0;\n@@ -3782,6 +3793,12 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n       warned = 2;\n     }\n \n+  if (!warned && !in_system_header && declspecs->alignas_p)\n+    {\n+      warning (0, \"useless %<_Alignas%> in empty declaration\");\n+      warned = 2;\n+    }\n+\n   if (warned != 1)\n     {\n       if (!found_tag)\n@@ -4894,6 +4911,7 @@ grokdeclarator (const struct c_declarator *declarator,\n   tree expr_dummy;\n   bool expr_const_operands_dummy;\n   enum c_declarator_kind first_non_attr_kind;\n+  unsigned int alignas_align = 0;\n \n   if (TREE_CODE (type) == ERROR_MARK)\n     return error_mark_node;\n@@ -5737,6 +5755,46 @@ grokdeclarator (const struct c_declarator *declarator,\n   if (bitfield)\n     check_bitfield_type_and_width (&type, width, name);\n \n+  /* Reject invalid uses of _Alignas.  */\n+  if (declspecs->alignas_p)\n+    {\n+      if (storage_class == csc_typedef)\n+\terror_at (loc, \"alignment specified for typedef %qE\", name);\n+      else if (storage_class == csc_register)\n+\terror_at (loc, \"alignment specified for %<register%> object %qE\",\n+\t\t  name);\n+      else if (decl_context == PARM)\n+\t{\n+\t  if (name)\n+\t    error_at (loc, \"alignment specified for parameter %qE\", name);\n+\t  else\n+\t    error_at (loc, \"alignment specified for unnamed parameter\");\n+\t}\n+      else if (bitfield)\n+\t{\n+\t  if (name)\n+\t    error_at (loc, \"alignment specified for bit-field %qE\", name);\n+\t  else\n+\t    error_at (loc, \"alignment specified for unnamed bit-field\");\n+\t}\n+      else if (TREE_CODE (type) == FUNCTION_TYPE)\n+\terror_at (loc, \"alignment specified for function %qE\", name);\n+      else if (declspecs->align_log != -1)\n+\t{\n+\t  alignas_align = 1U << declspecs->align_log;\n+\t  if (alignas_align < TYPE_ALIGN_UNIT (type))\n+\t    {\n+\t      if (name)\n+\t\terror_at (loc, \"%<_Alignas%> specifiers cannot reduce \"\n+\t\t\t  \"alignment of %qE\", name);\n+\t      else\n+\t\terror_at (loc, \"%<_Alignas%> specifiers cannot reduce \"\n+\t\t\t  \"alignment of unnamed field\");\n+\t      alignas_align = 0;\n+\t    }\n+\t}\n+    }\n+\n   /* Did array size calculations overflow?  */\n \n   if (TREE_CODE (type) == ARRAY_TYPE\n@@ -6117,6 +6175,13 @@ grokdeclarator (const struct c_declarator *declarator,\n     /* Record constancy and volatility.  */\n     c_apply_type_quals_to_decl (type_quals, decl);\n \n+    /* Apply _Alignas specifiers.  */\n+    if (alignas_align)\n+      {\n+\tDECL_ALIGN (decl) = alignas_align * BITS_PER_UNIT;\n+\tDECL_USER_ALIGN (decl) = 1;\n+      }\n+\n     /* If a type has volatile components, it should be stored in memory.\n        Otherwise, the fact that those components are volatile\n        will be ignored, and would even crash the compiler.\n@@ -8709,6 +8774,7 @@ build_null_declspecs (void)\n   ret->expr = 0;\n   ret->decl_attr = 0;\n   ret->attrs = 0;\n+  ret->align_log = -1;\n   ret->typespec_word = cts_none;\n   ret->storage_class = csc_none;\n   ret->expr_const_operands = true;\n@@ -8732,6 +8798,7 @@ build_null_declspecs (void)\n   ret->volatile_p = false;\n   ret->restrict_p = false;\n   ret->saturating_p = false;\n+  ret->alignas_p = false;\n   ret->address_space = ADDR_SPACE_GENERIC;\n   return ret;\n }\n@@ -9522,6 +9589,22 @@ declspecs_add_attrs (struct c_declspecs *specs, tree attrs)\n   return specs;\n }\n \n+/* Add an _Alignas specifier (expression ALIGN, or type whose\n+   alignment is ALIGN) to the declaration specifiers SPECS, returning\n+   SPECS.  */\n+struct c_declspecs *\n+declspecs_add_alignas (struct c_declspecs *specs, tree align)\n+{\n+  int align_log;\n+  specs->alignas_p = true;\n+  if (align == error_mark_node)\n+    return specs;\n+  align_log = check_user_alignment (align, true);\n+  if (align_log > specs->align_log)\n+    specs->align_log = align_log;\n+  return specs;\n+}\n+\n /* Combine \"long\", \"short\", \"signed\", \"unsigned\" and \"_Complex\" type\n    specifiers with any other type specifier to determine the resulting\n    type.  This is where ISO C checks on complex types are made, since"}, {"sha": "3829411d7262a90fd8e1d2c2cec3438f427cdbe1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -1,3 +1,14 @@\n+2011-11-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (c_common_reswords): Add _Alignas and _Alignof.\n+\t(c_sizeof_or_alignof_type): Diagnose alignof applied to a function\n+\ttype.\n+\t(check_user_alignment): New.  Split out of\n+\thandle_aligned_attribute.  Disallow integer constants with\n+\tnoninteger types.  Conditionally allow zero.\n+\t(handle_aligned_attribute): Use check_user_alignment.\n+\t* c-common.h (RID_ALIGNAS, check_user_alignment): New.\n+\n 2011-11-06  Andrew MacLeod  <amacleod@redhat.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "0329bc7e01cb58456095b663971e4cbc3325305f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -404,6 +404,8 @@ static int resort_field_decl_cmp (const void *, const void *);\n */\n const struct c_common_resword c_common_reswords[] =\n {\n+  { \"_Alignas\",\t\tRID_ALIGNAS,   D_CONLY },\n+  { \"_Alignof\",\t\tRID_ALIGNOF,   D_CONLY },\n   { \"_Bool\",\t\tRID_BOOL,      D_CONLY },\n   { \"_Complex\",\t\tRID_COMPLEX,\t0 },\n   { \"_Imaginary\",\tRID_IMAGINARY, D_CONLY },\n@@ -4332,7 +4334,18 @@ c_sizeof_or_alignof_type (location_t loc,\n \t  value = size_one_node;\n \t}\n       else\n-\tvalue = size_int (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n+\t{\n+\t  if (complain)\n+\t    {\n+\t      if (c_dialect_cxx ())\n+\t\tpedwarn (loc, OPT_pedantic, \"ISO C++ does not permit \"\n+\t\t\t \"%<alignof%> applied to a function type\");\n+\t      else\n+\t\tpedwarn (loc, OPT_pedantic, \"ISO C does not permit \"\n+\t\t\t \"%<_Alignof%> applied to a function type\");\n+\t    }\n+\t  value = size_int (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n+\t}\n     }\n   else if (type_code == VOID_TYPE || type_code == ERROR_MARK)\n     {\n@@ -6670,6 +6683,36 @@ handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n   return NULL_TREE;\n }\n \n+/* Check whether ALIGN is a valid user-specified alignment.  If so,\n+   return its base-2 log; if not, output an error and return -1.  If\n+   ALLOW_ZERO then 0 is valid and should result in a return of -1 with\n+   no error.  */\n+int\n+check_user_alignment (const_tree align, bool allow_zero)\n+{\n+  int i;\n+\n+  if (!INTEGRAL_TYPE_P (TREE_TYPE (align))\n+      || TREE_CODE (align) != INTEGER_CST)\n+    {\n+      error (\"requested alignment is not an integer constant\");\n+      return -1;\n+    }\n+  else if (allow_zero && integer_zerop (align))\n+    return -1;\n+  else if ((i = tree_log2 (align)) == -1)\n+    {\n+      error (\"requested alignment is not a power of 2\");\n+      return -1;\n+    }\n+  else if (i >= HOST_BITS_PER_INT - BITS_PER_UNIT_LOG)\n+    {\n+      error (\"requested alignment is too large\");\n+      return -1;\n+    }\n+  return i;\n+}\n+\n /* Handle a \"aligned\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n@@ -6693,21 +6736,8 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n   else if (TYPE_P (*node))\n     type = node, is_type = 1;\n \n-  if (TREE_CODE (align_expr) != INTEGER_CST)\n-    {\n-      error (\"requested alignment is not a constant\");\n-      *no_add_attrs = true;\n-    }\n-  else if ((i = tree_log2 (align_expr)) == -1)\n-    {\n-      error (\"requested alignment is not a power of 2\");\n-      *no_add_attrs = true;\n-    }\n-  else if (i >= HOST_BITS_PER_INT - BITS_PER_UNIT_LOG)\n-    {\n-      error (\"requested alignment is too large\");\n-      *no_add_attrs = true;\n-    }\n+  if ((i = check_user_alignment (align_expr, false)) == -1)\n+    *no_add_attrs = true;\n   else if (is_type)\n     {\n       if ((flags & (int) ATTR_FLAG_TYPE_IN_PLACE))"}, {"sha": "bff6956cc1442614acaf04bd39d05febe70016a9", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -106,6 +106,9 @@ enum rid\n   RID_DFLOAT32, RID_DFLOAT64, RID_DFLOAT128,\n   RID_FRACT, RID_ACCUM,\n \n+  /* C1X */\n+  RID_ALIGNAS,\n+\n   /* This means to warn that this is a C++ keyword, and then treat it\n      as a normal identifier.  */\n   RID_CXX_COMPAT_WARN,\n@@ -724,6 +727,7 @@ extern void finish_fname_decls (void);\n extern const char *fname_as_string (int);\n extern tree fname_decl (location_t, unsigned, tree);\n \n+extern int check_user_alignment (const_tree, bool);\n extern void check_function_arguments (const_tree, int, tree *);\n extern void check_function_arguments_recurse (void (*)\n \t\t\t\t\t      (void *, tree,"}, {"sha": "58bcb0282a12ae404f7d95bbeccdba637e53811b", "filename": "gcc/c-parser.c", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -650,6 +650,7 @@ c_token_starts_declspecs (c_token *token)\n \tcase RID_FRACT:\n \tcase RID_ACCUM:\n \tcase RID_SAT:\n+\tcase RID_ALIGNAS:\n \t  return true;\n \tdefault:\n \t  return false;\n@@ -1120,6 +1121,7 @@ static struct c_typespec c_parser_enum_specifier (c_parser *);\n static struct c_typespec c_parser_struct_or_union_specifier (c_parser *);\n static tree c_parser_struct_declaration (c_parser *);\n static struct c_typespec c_parser_typeof_specifier (c_parser *);\n+static tree c_parser_alignas_specifier (c_parser *);\n static struct c_declarator *c_parser_declarator (c_parser *, bool, c_dtr_syn,\n \t\t\t\t\t\t bool *);\n static struct c_declarator *c_parser_direct_declarator (c_parser *, bool,\n@@ -1890,9 +1892,11 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n      type-specifier declaration-specifiers[opt]\n      type-qualifier declaration-specifiers[opt]\n      function-specifier declaration-specifiers[opt]\n+     alignment-specifier declaration-specifiers[opt]\n \n    Function specifiers (inline) are from C99, and are currently\n-   handled as storage class specifiers, as is __thread.\n+   handled as storage class specifiers, as is __thread.  Alignment\n+   specifiers are from C1X.\n \n    C90 6.5.1, C99 6.7.1:\n    storage-class-specifier:\n@@ -1991,6 +1995,7 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n     {\n       struct c_typespec t;\n       tree attrs;\n+      tree align;\n       location_t loc = c_parser_peek_token (parser)->location;\n \n       /* If we cannot accept a type, exit if the next token must start\n@@ -2169,6 +2174,10 @@ c_parser_declspecs (c_parser *parser, struct c_declspecs *specs,\n \t  attrs = c_parser_attributes (parser);\n \t  declspecs_add_attrs (specs, attrs);\n \t  break;\n+\tcase RID_ALIGNAS:\n+\t  align = c_parser_alignas_specifier (parser);\n+\t  declspecs_add_alignas (specs, align);\n+\t  break;\n \tdefault:\n \t  goto out;\n \t}\n@@ -2751,6 +2760,45 @@ c_parser_typeof_specifier (c_parser *parser)\n   return ret;\n }\n \n+/* Parse an alignment-specifier.\n+\n+   C1X 6.7.5:\n+\n+   alignment-specifier:\n+     _Alignas ( type-name )\n+     _Alignas ( constant-expression )\n+*/\n+\n+static tree\n+c_parser_alignas_specifier (c_parser * parser)\n+{\n+  tree ret = error_mark_node;\n+  location_t loc = c_parser_peek_token (parser)->location;\n+  gcc_assert (c_parser_next_token_is_keyword (parser, RID_ALIGNAS));\n+  c_parser_consume_token (parser);\n+  if (!flag_isoc1x)\n+    {\n+      if (flag_isoc99)\n+\tpedwarn (loc, OPT_pedantic,\n+\t\t \"ISO C99 does not support %<_Alignas%>\");\n+      else\n+\tpedwarn (loc, OPT_pedantic,\n+\t\t \"ISO C90 does not support %<_Alignas%>\");\n+    }\n+  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n+    return ret;\n+  if (c_parser_next_tokens_start_typename (parser, cla_prefer_id))\n+    {\n+      struct c_type_name *type = c_parser_type_name (parser);\n+      if (type != NULL)\n+\tret = c_alignof (loc, groktypename (type, NULL, NULL));\n+    }\n+  else\n+    ret = c_parser_expr_no_commas (parser, NULL).value;\n+  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, \"expected %<)%>\");\n+  return ret;\n+}\n+\n /* Parse a declarator, possibly an abstract declarator (C90 6.5.4,\n    6.5.5, C99 6.7.5, 6.7.6).  If TYPE_SEEN_P then a typedef name may\n    be redeclared; otherwise it may not.  KIND indicates which kind of\n@@ -5759,6 +5807,8 @@ c_parser_cast_expression (c_parser *parser, struct c_expr *after)\n      __alignof__ ( type-name )\n      && identifier\n \n+   (C1X permits _Alignof with type names only.)\n+\n    unary-operator: one of\n      __extension__ __real__ __imag__\n \n@@ -5942,7 +5992,21 @@ c_parser_alignof_expression (c_parser *parser)\n {\n   struct c_expr expr;\n   location_t loc = c_parser_peek_token (parser)->location;\n+  tree alignof_spelling = c_parser_peek_token (parser)->value;\n   gcc_assert (c_parser_next_token_is_keyword (parser, RID_ALIGNOF));\n+  /* A diagnostic is not required for the use of this identifier in\n+     the implementation namespace; only diagnose it for the C1X\n+     spelling because of existing code using the other spellings.  */\n+  if (!flag_isoc1x\n+      && strcmp (IDENTIFIER_POINTER (alignof_spelling), \"_Alignof\") == 0)\n+    {\n+      if (flag_isoc99)\n+\tpedwarn (loc, OPT_pedantic, \"ISO C99 does not support %qE\",\n+\t\t alignof_spelling);\n+      else\n+\tpedwarn (loc, OPT_pedantic, \"ISO C90 does not support %qE\",\n+\t\t alignof_spelling);\n+    }\n   c_parser_consume_token (parser);\n   c_inhibit_evaluation_warnings++;\n   in_alignof++;\n@@ -5991,6 +6055,8 @@ c_parser_alignof_expression (c_parser *parser)\n       mark_exp_read (expr.value);\n       c_inhibit_evaluation_warnings--;\n       in_alignof--;\n+      pedwarn (loc, OPT_pedantic, \"ISO C does not allow %<%E (expression)%>\",\n+\t       alignof_spelling);\n       ret.value = c_alignof_expr (loc, expr.value);\n       ret.original_code = ERROR_MARK;\n       ret.original_type = NULL;"}, {"sha": "6801db2b98b15eae70c6877286ee859c815d2f06", "filename": "gcc/c-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -238,6 +238,10 @@ struct c_declspecs {\n      NULL; attributes (possibly from multiple lists) will be passed\n      separately.  */\n   tree attrs;\n+  /* The base-2 log of the greatest alignment required by an _Alignas\n+     specifier, in bytes, or -1 if no such specifiers with nonzero\n+     alignment.  */\n+  int align_log;\n   /* The storage class specifier, or csc_none if none.  */\n   enum c_storage_class storage_class;\n   /* Any type specifier keyword used such as \"int\", not reflecting\n@@ -294,6 +298,9 @@ struct c_declspecs {\n   BOOL_BITFIELD restrict_p : 1;\n   /* Whether \"_Sat\" was specified.  */\n   BOOL_BITFIELD saturating_p : 1;\n+  /* Whether any alignment specifier (even with zero alignment) was\n+     specified.  */\n+  BOOL_BITFIELD alignas_p : 1;\n   /* The address space that the declaration belongs to.  */\n   addr_space_t address_space;\n };\n@@ -510,6 +517,7 @@ extern struct c_declspecs *declspecs_add_scspec (struct c_declspecs *, tree);\n extern struct c_declspecs *declspecs_add_attrs (struct c_declspecs *, tree);\n extern struct c_declspecs *declspecs_add_addrspace (struct c_declspecs *,\n \t\t\t\t\t\t    addr_space_t);\n+extern struct c_declspecs *declspecs_add_alignas (struct c_declspecs *, tree);\n extern struct c_declspecs *finish_declspecs (struct c_declspecs *);\n \n /* in c-objc-common.c */"}, {"sha": "fd55ed3010a316a24ce27d9d1b7695c309cbfc4b", "filename": "gcc/ginclude/stdalign.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fginclude%2Fstdalign.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fginclude%2Fstdalign.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdalign.h?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -0,0 +1,39 @@\n+/* Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* ISO C1X: 7.15 Alignment <stdalign.h>.  */\n+\n+#ifndef _STDALIGN_H\n+#define _STDALIGN_H\n+\n+#ifndef __cplusplus\n+\n+#define alignas _Alignas\n+#define alignof _Alignof\n+\n+#define __alignas_is_defined 1\n+#define __alignof_is_defined 1\n+\n+#endif\n+\n+#endif\t/* stdalign.h */"}, {"sha": "1cc3cb4e75a08493ffd5328eac735da10f78f277", "filename": "gcc/ginclude/stddef.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fginclude%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Fginclude%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstddef.h?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002, 2004, 2009\n+/* Copyright (C) 1989, 1997, 1998, 1999, 2000, 2002, 2004, 2009, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -412,6 +412,20 @@ typedef __WINT_TYPE__ wint_t;\n /* Offset of member MEMBER in a struct of type TYPE. */\n #define offsetof(TYPE, MEMBER) __builtin_offsetof (TYPE, MEMBER)\n \n+#if (defined (__STDC_VERSION__) && __STDC_VERSION__ > 199901L) \\\n+  || (defined(__cplusplus) && __cplusplus >= 201103L)\n+#ifndef _GCC_MAX_ALIGN_T\n+#define _GCC_MAX_ALIGN_T\n+/* Type whose alignment is supported in every context and is at least\n+   as great as that of any standard type not using alignment\n+   specifiers.  */\n+typedef struct {\n+  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));\n+  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));\n+} max_align_t;\n+#endif\n+#endif /* C1X or C++11.  */\n+\n #endif /* _STDDEF_H was defined this time */\n \n #endif /* !_STDDEF_H && !_STDDEF_H_ && !_ANSI_STDDEF_H && !__STDDEF_H__"}, {"sha": "62f76f9bccb4e2c63ee75cc139732d4f95c7a86d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -1,3 +1,12 @@\n+2011-11-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* g++.dg/cpp0x/alignof3.C, gcc.dg/c1x-align-1.c,\n+\tgcc.dg/c1x-align-2.c, gcc.dg/c1x-align-3.c, gcc.dg/c1x-align-4.c,\n+\tgcc.dg/c90-align-1.c, gcc.dg/c99-align-1.c: New tests.\n+\t* gcc.dg/gnu89-const-expr-1.c, gcc.dg/gnu90-const-expr-1.c,\n+\tgcc.dg/gnu99-const-expr-1.c, gcc.dg/gnu99-static-1.c: Update\n+\texpected diagnostics.\n+\n 2011-11-06  Andrew MacLeod  <amacleod@redhat.com>\n \t    Richard Henderson  <rth@redhat.com>\n \t    Aldy Hernandez  <aldyh@redhat.com>"}, {"sha": "50c6ac915e11dd5a5c7be758bbfe9b65acd1dae5", "filename": "gcc/testsuite/g++.dg/cpp0x/alignof3.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof3.C?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x -pedantic\" }\n+int main(void)\n+{\n+  alignof(void (void));   // { dg-warning \"function type\" }\n+}"}, {"sha": "9fe5757bed0a7ff9abad0a8771c248d9a3a1857c", "filename": "gcc/testsuite/gcc.dg/c1x-align-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-1.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -0,0 +1,41 @@\n+/* Test C1X alignment support.  Test valid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+#include <stddef.h>\n+\n+_Alignas (_Alignof (max_align_t)) char c;\n+extern _Alignas (max_align_t) char c;\n+extern char c;\n+\n+extern _Alignas (max_align_t) short s;\n+_Alignas (max_align_t) short s;\n+\n+_Alignas (int) int i;\n+extern int i;\n+\n+_Alignas (max_align_t) long l;\n+\n+_Alignas (max_align_t) long long ll;\n+\n+_Alignas (max_align_t) float f;\n+\n+_Alignas (max_align_t) double d;\n+\n+_Alignas (max_align_t) _Complex long double cld;\n+\n+_Alignas (0) _Alignas (int) _Alignas (char) char ca[10];\n+\n+_Alignas ((int) _Alignof (max_align_t) + 0) int x;\n+\n+enum e { E = _Alignof (max_align_t) };\n+_Alignas (E) int y;\n+\n+void\n+func (void)\n+{\n+  _Alignas (max_align_t) long long auto_ll;\n+}\n+\n+/* Valid, but useless.  */\n+_Alignas (0) struct s; /* { dg-warning \"useless\" } */"}, {"sha": "19f7dd6721403b9c0f307ad59664d6083b36d592", "filename": "gcc/testsuite/gcc.dg/c1x-align-2.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-2.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -0,0 +1,92 @@\n+/* Test C1X alignment support.  Test valid code using stdalign.h.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+#include <stdalign.h>\n+#include <stddef.h>\n+\n+extern int strcmp (const char *, const char *);\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+alignas (alignof (max_align_t)) char c;\n+extern alignas (max_align_t) char c;\n+extern char c;\n+\n+extern alignas (max_align_t) short s;\n+alignas (max_align_t) short s;\n+\n+alignas (int) int i;\n+extern int i;\n+\n+alignas (max_align_t) long l;\n+\n+alignas (max_align_t) long long ll;\n+\n+alignas (max_align_t) float f;\n+\n+alignas (max_align_t) double d;\n+\n+alignas (max_align_t) _Complex long double cld;\n+\n+alignas (0) alignas (int) alignas (char) char ca[10];\n+\n+alignas ((int) alignof (max_align_t) + 0) int x;\n+\n+enum e { E = alignof (max_align_t) };\n+alignas (E) int y;\n+\n+void\n+func (void)\n+{\n+  alignas (max_align_t) long long auto_ll;\n+}\n+\n+/* Valid, but useless.  */\n+alignas (0) struct s; /* { dg-warning \"useless\" } */\n+\n+#ifndef alignas\n+#error \"alignas not defined\"\n+#endif\n+\n+#ifndef alignof\n+#error \"alignof not defined\"\n+#endif\n+\n+#ifndef __alignas_is_defined\n+#error \"__alignas_is_defined not defined\"\n+#endif\n+\n+#if __alignas_is_defined != 1\n+#error \"__alignas_is_defined not 1\"\n+#endif\n+\n+#ifndef __alignof_is_defined\n+#error \"__alignof_is_defined not defined\"\n+#endif\n+\n+#if __alignof_is_defined != 1\n+#error \"__alignof_is_defined not 1\"\n+#endif\n+\n+#define str(x) #x\n+#define xstr(x) str(x)\n+\n+const char *s1 = xstr(alignas);\n+const char *s2 = xstr(alignof);\n+const char *s3 = xstr(__alignas_is_defined);\n+const char *s4 = xstr(__alignof_is_defined);\n+\n+int\n+main (void)\n+{\n+  if (strcmp (s1, \"_Alignas\") != 0)\n+    abort ();\n+  if (strcmp (s2, \"_Alignof\") != 0)\n+    abort ();\n+  if (strcmp (s3, \"1\") != 0)\n+    abort ();\n+  if (strcmp (s4, \"1\") != 0)\n+    abort ();\n+}"}, {"sha": "0b2a77fa6fae8e314412080a064f48b0f73b6896", "filename": "gcc/testsuite/gcc.dg/c1x-align-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-3.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -0,0 +1,42 @@\n+/* Test C1X alignment support.  Test invalid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+int a = _Alignof (void (void)); /* { dg-error \"function\" } */\n+struct s;\n+int b = _Alignof (struct s); /* { dg-error \"incomplete\" } */\n+int c = _Alignof (void); /* { dg-error \"void\" } */\n+int d = _Alignof (a); /* { dg-error \"expression\" } */\n+\n+_Alignas (void (void)) char e; /* { dg-error \"function\" } */\n+_Alignas (struct s) char f; /* { dg-error \"incomplete\" } */\n+_Alignas (void) char g; /* { dg-error \"void\" } */\n+\n+_Alignas (-__INT_MAX__-1) char h; /* { dg-error \"too large|power of 2\" } */\n+_Alignas (-__INT_MAX__) char h2; /* { dg-error \"too large|power of 2\" } */\n+_Alignas ((-__INT_MAX__-1)/2) char h3; /* { dg-error \"too large|power of 2\" } */\n+_Alignas ((-__INT_MAX__-1)/4) char h4; /* { dg-error \"too large|power of 2\" } */\n+_Alignas ((-__INT_MAX__-1)/8) char h5; /* { dg-error \"too large|power of 2\" } */\n+_Alignas (-__LONG_LONG_MAX__-1) char i; /* { dg-error \"too large|power of 2\" } */\n+_Alignas (-(__LONG_LONG_MAX__-1)/2) char i2; /* { dg-error \"too large|power of 2\" } */\n+_Alignas (-(__LONG_LONG_MAX__-1)/4) char i3; /* { dg-error \"too large|power of 2\" } */\n+_Alignas (-(__LONG_LONG_MAX__-1)/8) char i4; /* { dg-error \"too large|power of 2\" } */\n+_Alignas (-(__LONG_LONG_MAX__-1)/16) char i5; /* { dg-error \"too large|power of 2\" } */\n+_Alignas (-1) char j; /* { dg-error \"power of 2\" } */\n+_Alignas (3) char k; /* { dg-error \"power of 2\" } */\n+\n+_Alignas ((void *) 1) char k; /* { dg-error \"integer constant\" } */\n+int x;\n+_Alignas (x) char l; /* { dg-error \"integer constant\" } */\n+\n+_Alignas (0) struct s; /* { dg-error \"does not redeclare tag\" } */\n+\n+_Alignas (0) typedef int T; /* { dg-error \"alignment specified for typedef\" } */\n+void func (_Alignas (0) int); /* { dg-error \"alignment specified for unnamed parameter\" } */\n+void f2 (_Alignas (0) int parm2) {} /* { dg-error \"alignment specified for parameter\" } */\n+void\n+f3 (void)\n+{\n+  register _Alignas (0) int reg; /* { dg-error \"register\" } */\n+}\n+_Alignas (0) void f4 (void); /* { dg-error \"alignment specified for function\" } */"}, {"sha": "432650cf5dd3f7d046f38bc30166c19b226eaff4", "filename": "gcc/testsuite/gcc.dg/c1x-align-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc1x-align-4.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -0,0 +1,8 @@\n+/* Test C1X alignment support.  Test reducing alignment (assumes there\n+   are at least some alignment constraints).  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+#include <stddef.h>\n+\n+_Alignas (_Alignof (char)) max_align_t x; /* { dg-error \"reduce alignment\" } */"}, {"sha": "77510f4e0d9d1eb1778c189ec42f0c8c2f8fe49a", "filename": "gcc/testsuite/gcc.dg/c90-align-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-align-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-align-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-align-1.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -0,0 +1,6 @@\n+/* Test _Alignof and _Alignas not in C90.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+int a = _Alignof (int); /* { dg-error \"ISO C90 does not support '_Alignof'\" } */\n+_Alignas (int) int b; /* { dg-error \"ISO C90 does not support '_Alignas'\" } */"}, {"sha": "1fb2cb07110af5c2cabddedf4e39edf3f7e57ace", "filename": "gcc/testsuite/gcc.dg/c99-align-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-align-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-align-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-align-1.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -0,0 +1,6 @@\n+/* Test _Alignof and _Alignas not in C99.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+int a = _Alignof (int); /* { dg-error \"ISO C99 does not support '_Alignof'\" } */\n+_Alignas (int) int b; /* { dg-error \"ISO C99 does not support '_Alignas'\" } */"}, {"sha": "0cc14da599a67a5aa8b702c0e2dae9cb85459799", "filename": "gcc/testsuite/gcc.dg/gnu89-const-expr-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-const-expr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-const-expr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu89-const-expr-1.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -23,7 +23,7 @@ f (void)\n     E5 = __imag__ 0,\n     /* __alignof__ always constant.  */\n     E6 = __alignof__ (int[n]), /* { dg-error \"ISO C90 forbids variable length array\" } */\n-    E7 = __alignof__ (a),\n+    E7 = __alignof__ (a), /* { dg-error \"__alignof__ \\\\(expression\\\\)\" } */\n     /* __extension__ ignored for constant expression purposes.  */\n     E8 = __extension__ (1 ? 0 : i++), /* { dg-error \"constant expression\" } */\n     E9 = __extension__ 0,"}, {"sha": "e052114622c9acdc5d285a2017357b5233289aa6", "filename": "gcc/testsuite/gcc.dg/gnu90-const-expr-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu90-const-expr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu90-const-expr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu90-const-expr-1.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -23,7 +23,7 @@ f (void)\n     E5 = __imag__ 0,\n     /* __alignof__ always constant.  */\n     E6 = __alignof__ (int[n]), /* { dg-error \"ISO C90 forbids variable length array\" } */\n-    E7 = __alignof__ (a),\n+    E7 = __alignof__ (a), /* { dg-error \"__alignof__ \\\\(expression\\\\)\" } */\n     /* __extension__ ignored for constant expression purposes.  */\n     E8 = __extension__ (1 ? 0 : i++), /* { dg-error \"constant expression\" } */\n     E9 = __extension__ 0,"}, {"sha": "da7076ff8997ffae1d2e17061d2334ba03c4e369", "filename": "gcc/testsuite/gcc.dg/gnu99-const-expr-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-const-expr-1.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -23,7 +23,7 @@ f (void)\n     E5 = __imag__ 0,\n     /* __alignof__ always constant.  */\n     E6 = __alignof__ (int[n]),\n-    E7 = __alignof__ (a),\n+    E7 = __alignof__ (a), /* { dg-error \"__alignof__ \\\\(expression\\\\)\" } */\n     /* __extension__ ignored for constant expression purposes.  */\n     E8 = __extension__ (1 ? 0 : i++), /* { dg-error \"constant expression\" } */\n     E9 = __extension__ 0,"}, {"sha": "3fece615e0ed1b6ade6e55d4d986ebf1b671dfc6", "filename": "gcc/testsuite/gcc.dg/gnu99-static-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-static-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19fa6b5f1372429e56c2d4f8d384ed388a22d21/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-static-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu99-static-1.c?ref=d19fa6b5f1372429e56c2d4f8d384ed388a22d21", "patch": "@@ -11,7 +11,7 @@\n \n /* __alignof__, OK.  */\n static int f0(void);\n-void g0(void) { __alignof__(f0()); }\n+void g0(void) { __alignof__(f0()); } /* { dg-error \"__alignof__ \\\\(expression\\\\)\" } */\n \n /* __typeof__ not variably modified, OK.  */\n static int f1(void);"}]}