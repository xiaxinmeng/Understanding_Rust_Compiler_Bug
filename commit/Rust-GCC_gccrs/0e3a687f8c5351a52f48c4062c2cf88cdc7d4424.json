{"sha": "0e3a687f8c5351a52f48c4062c2cf88cdc7d4424", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUzYTY4N2Y4YzUzNTFhNTJmNDhjNDA2MmMyY2Y4OGNkYzdkNDQyNA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-12-12T10:02:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-12T10:02:19Z"}, "message": "[Ada] Compiler crash on prefix call in generic body\n\n2019-12-12  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch4.adb (Transform_Object_Operation): Deal properly with\n\tprefix notation in instances.\n\nFrom-SVN: r279285", "tree": {"sha": "19a1688f643bd59d2b5c647a55d6f4b1f262328e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a1688f643bd59d2b5c647a55d6f4b1f262328e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e3a687f8c5351a52f48c4062c2cf88cdc7d4424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3a687f8c5351a52f48c4062c2cf88cdc7d4424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e3a687f8c5351a52f48c4062c2cf88cdc7d4424", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3a687f8c5351a52f48c4062c2cf88cdc7d4424/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d878b2c9819e0ae9e942c87c3eb547b0bfb30dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d878b2c9819e0ae9e942c87c3eb547b0bfb30dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d878b2c9819e0ae9e942c87c3eb547b0bfb30dc5"}], "stats": {"total": 96, "additions": 50, "deletions": 46}, "files": [{"sha": "150ee5677852a6066a9dcf7a27023ef693a29c62", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3a687f8c5351a52f48c4062c2cf88cdc7d4424/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3a687f8c5351a52f48c4062c2cf88cdc7d4424/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0e3a687f8c5351a52f48c4062c2cf88cdc7d4424", "patch": "@@ -1,3 +1,8 @@\n+2019-12-12  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch4.adb (Transform_Object_Operation): Deal properly with\n+\tprefix notation in instances.\n+\n 2019-12-12  Claire Dross  <dross@adacore.com>\n \n \t* libgnat/a-cofove.adb, libgnat/a-cfinve.adb (Find_Index): Use"}, {"sha": "03c74408f94fab543fd7122dfc0a816698e2186d", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 45, "deletions": 46, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3a687f8c5351a52f48c4062c2cf88cdc7d4424/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3a687f8c5351a52f48c4062c2cf88cdc7d4424/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=0e3a687f8c5351a52f48c4062c2cf88cdc7d4424", "patch": "@@ -8574,7 +8574,7 @@ package body Sem_Ch4 is\n       procedure Transform_Object_Operation\n         (Call_Node       : out Node_Id;\n          Node_To_Replace : out Node_Id);\n-      --  Transform Obj.Operation (X, Y,,) into Operation (Obj, X, Y ..)\n+      --  Transform Obj.Operation (X, Y, ...) into Operation (Obj, X, Y ...).\n       --  Call_Node is the resulting subprogram call, Node_To_Replace is\n       --  either N or the parent of N, and Subprog is a reference to the\n       --  subprogram we are trying to match.\n@@ -9299,7 +9299,7 @@ package body Sem_Ch4 is\n          --  Prefix notation can also be used on operations that are not\n          --  primitives of the type, but are declared in the same immediate\n          --  declarative part, which can only mean the corresponding package\n-         --  body (See RM 4.1.3 (9.2/3)). If we are in that body we extend the\n+         --  body (see RM 4.1.3 (9.2/3)). If we are in that body we extend the\n          --  list of primitives with body operations with the same name that\n          --  may be candidates, so that Try_Primitive_Operations can examine\n          --  them if no real primitive is found.\n@@ -9425,56 +9425,55 @@ package body Sem_Ch4 is\n \n          function Extended_Primitive_Ops (T : Entity_Id) return Elist_Id is\n             Type_Scope : constant Entity_Id := Scope (T);\n-\n-            Body_Decls : List_Id;\n-            Op_Found   : Boolean;\n-            Op         : Entity_Id;\n-            Op_List    : Elist_Id;\n-\n+            Op_List    : Elist_Id := Primitive_Operations (T);\n          begin\n-            Op_List := Primitive_Operations (T);\n-\n-            if Ekind (Type_Scope) = E_Package\n-              and then In_Package_Body (Type_Scope)\n-              and then In_Open_Scopes (Type_Scope)\n+            if Ekind_In (Type_Scope, E_Package, E_Generic_Package)\n+              and then ((In_Package_Body (Type_Scope)\n+              and then In_Open_Scopes (Type_Scope)) or else In_Instance_Body)\n             then\n-               --  Retrieve list of declarations of package body.\n-\n-               Body_Decls :=\n-                 Declarations\n-                   (Unit_Declaration_Node\n-                     (Corresponding_Body\n-                       (Unit_Declaration_Node (Type_Scope))));\n-\n-               Op       := Current_Entity (Subprog);\n-               Op_Found := False;\n-               while Present (Op) loop\n-                  if Comes_From_Source (Op)\n-                    and then Is_Overloadable (Op)\n-\n-                    --  Exclude overriding primitive operations of a type\n-                    --  extension declared in the package body, to prevent\n-                    --  duplicates in extended list.\n-\n-                    and then not Is_Primitive (Op)\n-                    and then Is_List_Member (Unit_Declaration_Node (Op))\n-                    and then List_Containing (Unit_Declaration_Node (Op)) =\n-                                                                   Body_Decls\n-                  then\n-                     if not Op_Found then\n+               --  Retrieve list of declarations of package body if possible\n \n-                        --  Copy list of primitives so it is not affected for\n-                        --  other uses.\n+               declare\n+                  The_Body : constant Node_Id :=\n+                    Corresponding_Body (Unit_Declaration_Node (Type_Scope));\n+               begin\n+                  if Present (The_Body) then\n+                     declare\n+                        Body_Decls : constant List_Id :=\n+                          Declarations (Unit_Declaration_Node (The_Body));\n+                        Op_Found : Boolean := False;\n+                        Op : Entity_Id := Current_Entity (Subprog);\n+                     begin\n+                        while Present (Op) loop\n+                           if Comes_From_Source (Op)\n+                             and then Is_Overloadable (Op)\n+\n+                             --  Exclude overriding primitive operations of a\n+                             --  type extension declared in the package body,\n+                             --  to prevent duplicates in extended list.\n+\n+                             and then not Is_Primitive (Op)\n+                             and then Is_List_Member\n+                               (Unit_Declaration_Node (Op))\n+                             and then List_Containing\n+                               (Unit_Declaration_Node (Op)) = Body_Decls\n+                           then\n+                              if not Op_Found then\n+                                 --  Copy list of primitives so it is not\n+                                 --  affected for other uses.\n \n-                        Op_List  := New_Copy_Elist (Op_List);\n-                        Op_Found := True;\n-                     end if;\n+                                 Op_List  := New_Copy_Elist (Op_List);\n+                                 Op_Found := True;\n+                              end if;\n \n-                     Append_Elmt (Op, Op_List);\n-                  end if;\n+                              Append_Elmt (Op, Op_List);\n+                           end if;\n \n-                  Op := Homonym (Op);\n-               end loop;\n+                           Op := Homonym (Op);\n+                        end loop;\n+                     end;\n+                  end if;\n+               end;\n             end if;\n \n             return Op_List;"}]}