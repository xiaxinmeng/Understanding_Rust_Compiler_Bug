{"sha": "3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IwOGNkZThkZDJiMjc3NDBlMDRhNmYwZTUzMWYyYzA4NmE5ZWMxYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-11-24T12:02:53Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-11-24T12:02:53Z"}, "message": "re PR middle-end/78429 (ICE in set_value_range, at tree-vrp.c on non-standard boolean)\n\n\tPR middle-end/78429\n\t* tree.h (wi::fits_to_boolean_p): New predicate.\n\t(wi::fits_to_tree_p): Use it for boolean types.\n\t* tree.c (int_fits_type_p): Likewise.\n\nFrom-SVN: r242829", "tree": {"sha": "ff79e8ab3cb9680654f64078b74a188db96fca41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff79e8ab3cb9680654f64078b74a188db96fca41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/comments", "author": null, "committer": null, "parents": [{"sha": "bf2df7a9b39897740e6b2fc8c03b1b195748c98f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf2df7a9b39897740e6b2fc8c03b1b195748c98f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf2df7a9b39897740e6b2fc8c03b1b195748c98f"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "61f35aee1e0c595d74ecf02087c603d2e571f700", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b", "patch": "@@ -1,3 +1,10 @@\n+2016-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/78429\n+\t* tree.h (wi::fits_to_boolean_p): New predicate.\n+\t(wi::fits_to_tree_p): Use it for boolean types.\n+\t* tree.c (int_fits_type_p): Likewise.\n+\n 2016-11-24  Martin Liska  <mliska@suse.cz>\n \n \t* print-tree.c (struct bucket): Remove."}, {"sha": "a0646446232dc74afddb1a6d5c2520e0e704659a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b", "patch": "@@ -1,3 +1,7 @@\n+2016-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/compile/20161124-1.c: New test.\n+\n 2016-11-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/78493"}, {"sha": "93badb15755b375b6da6bcbf15d2bdbdebb66dd2", "filename": "gcc/testsuite/gcc.c-torture/compile/20161124-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20161124-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20161124-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20161124-1.c?ref=3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b", "patch": "@@ -0,0 +1,22 @@\n+/* PR middle-end/78429 */\n+/* Testcase by Chengnian Sun <chengniansun@gmail.com> */\n+\n+int a[6];\n+char b;\n+unsigned c;\n+short d;\n+volatile int e;\n+\n+int foo (void)\n+{\n+  int f;\n+  for (; c <= 2; c++) {\n+    d = 3;\n+    for (; d >= 0; d--) {\n+      int g = b;\n+      f = a[d] || b;\n+    }\n+    f || e;\n+  }\n+  return 0;\n+}"}, {"sha": "11e0abcbeb085668deea519c602c7666e7f1f0d5", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b", "patch": "@@ -9144,10 +9144,10 @@ int_fits_type_p (const_tree c, const_tree type)\n   bool ok_for_low_bound, ok_for_high_bound;\n   signop sgn_c = TYPE_SIGN (TREE_TYPE (c));\n \n-  /* Short-circuit boolean types since various transformations assume that\n-     they can only take values 0 and 1.  */\n+  /* Non-standard boolean types can have arbitrary precision but various\n+     transformations assume that they can only take values 0 and +/-1.  */\n   if (TREE_CODE (type) == BOOLEAN_TYPE)\n-    return integer_zerop (c) || integer_onep (c);\n+    return wi::fits_to_boolean_p (c, type);\n \n retry:\n   type_low_bound = TYPE_MIN_VALUE (type);"}, {"sha": "62cd7bb19c3a2ae41b13568b0020eaabac3e5cbb", "filename": "gcc/tree.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3b08cde8dd2b27740e04a6f0e531f2c086a9ec1b", "patch": "@@ -5295,6 +5295,9 @@ wi::extended_tree <N>::get_len () const\n \n namespace wi\n {\n+  template <typename T>\n+  bool fits_to_boolean_p (const T &x, const_tree);\n+\n   template <typename T>\n   bool fits_to_tree_p (const T &x, const_tree);\n \n@@ -5303,16 +5306,23 @@ namespace wi\n   wide_int from_mpz (const_tree, mpz_t, bool);\n }\n \n+template <typename T>\n+bool\n+wi::fits_to_boolean_p (const T &x, const_tree type)\n+{\n+  return eq_p (x, 0) || eq_p (x, TYPE_UNSIGNED (type) ? 1 : -1);\n+}\n+\n template <typename T>\n bool\n wi::fits_to_tree_p (const T &x, const_tree type)\n {\n-  /* Short-circuit boolean types since various transformations assume that\n-     they can only take values 0 and 1.  */\n+  /* Non-standard boolean types can have arbitrary precision but various\n+     transformations assume that they can only take values 0 and +/-1.  */\n   if (TREE_CODE (type) == BOOLEAN_TYPE)\n-    return eq_p (x, 0) || eq_p (x, 1);\n+    return fits_to_boolean_p (x, type);\n \n-  if (TYPE_SIGN (type) == UNSIGNED)\n+  if (TYPE_UNSIGNED (type))\n     return eq_p (x, zext (x, TYPE_PRECISION (type)));\n   else\n     return eq_p (x, sext (x, TYPE_PRECISION (type)));"}]}