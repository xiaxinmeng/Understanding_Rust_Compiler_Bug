{"sha": "5c4f4b18ccb88ee921e87664bda249f7d084993a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM0ZjRiMThjY2I4OGVlOTIxZTg3NjY0YmRhMjQ5ZjdkMDg0OTkzYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-01-23T09:16:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-01-23T09:16:56Z"}, "message": "sparc.c (scan_record_type): New function.\n\n\t* config/sparc/sparc.c (scan_record_type): New function.\n\t(function_arg_slotno): Use it to determine which kinds of\n\tregisters the record can be passed in.\n\nFrom-SVN: r76400", "tree": {"sha": "f19050d53a000dde06ec80356642f3e7d994b5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f19050d53a000dde06ec80356642f3e7d994b5f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c4f4b18ccb88ee921e87664bda249f7d084993a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4f4b18ccb88ee921e87664bda249f7d084993a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c4f4b18ccb88ee921e87664bda249f7d084993a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4f4b18ccb88ee921e87664bda249f7d084993a/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "402b0954bebd465944a8f2de9e346933be951076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402b0954bebd465944a8f2de9e346933be951076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402b0954bebd465944a8f2de9e346933be951076"}], "stats": {"total": 67, "additions": 47, "deletions": 20}, "files": [{"sha": "3abd95599f3d982f6eea93d9698b7b98fec48405", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4f4b18ccb88ee921e87664bda249f7d084993a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4f4b18ccb88ee921e87664bda249f7d084993a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c4f4b18ccb88ee921e87664bda249f7d084993a", "patch": "@@ -1,3 +1,9 @@\n+2004-01-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (scan_record_type): New function.\n+\t(function_arg_slotno): Use it to determine which kinds of\n+\tregisters the record can be passed in.\n+\n 2004-01-22  James A. Mmorrison  <ja2morri@uwaterloo.ca>\n \n \t* config/pa/fptr.c: Fix old-style definition.\n@@ -2224,3 +2230,4 @@\n \t* invoke.texi (-O1): Document change.\n \n See ChangeLog.10 for earlier changes.\n+"}, {"sha": "b5247b8e91df81260cc8d3b21b6ca9d8345fcc5a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4f4b18ccb88ee921e87664bda249f7d084993a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4f4b18ccb88ee921e87664bda249f7d084993a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5c4f4b18ccb88ee921e87664bda249f7d084993a", "patch": "@@ -137,6 +137,7 @@ static void sparc_init_modes (void);\n static int save_regs (FILE *, int, int, const char *, int, int, HOST_WIDE_INT);\n static int restore_regs (FILE *, int, int, const char *, int, int);\n static void build_big_number (FILE *, HOST_WIDE_INT, const char *);\n+static void scan_record_type (tree, int *, int *, int *);\n static int function_arg_slotno (const CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\ttree, int, int, int *, int *);\n \n@@ -4816,8 +4817,39 @@ init_cumulative_args (struct sparc_args *cum, tree fntype,\n   cum->libcall_p = fntype == 0;\n }\n \n+/* Scan the record type TYPE and return the following predicates:\n+    - INTREGS_P: the record contains at least one field or sub-field\n+      that is eligible for promotion in integer registers.\n+    - FP_REGS_P: the record contains at least one field or sub-field\n+      that is eligible for promotion in floating-point registers.\n+    - PACKED_P: the record contains at least one field that is packed.\n+\n+   Sub-fields are not taken into account for the PACKED_P predicate.  */\n+\n+static void\n+scan_record_type(tree type, int *intregs_p, int *fpregs_p, int *packed_p)\n+{\n+  tree field;\n+\n+  for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n+    {\n+      if (TREE_CODE (field) == FIELD_DECL)\n+\t{\n+\t  if (TREE_CODE (TREE_TYPE (field)) == RECORD_TYPE)\n+\t    scan_record_type (TREE_TYPE (field), intregs_p, fpregs_p, 0);\n+\t  else if (FLOAT_TYPE_P (TREE_TYPE (field)) && TARGET_FPU)\n+\t    *fpregs_p = 1;\n+\t  else\n+\t    *intregs_p = 1;\n+\n+\t  if (packed_p && DECL_PACKED (field))\n+\t    *packed_p = 1;\n+\t}\n+    }\n+}\n+\n /* Compute the slot number to pass an argument in.\n-   Returns the slot number or -1 if passing on the stack.\n+   Return the slot number or -1 if passing on the stack.\n \n    CUM is a variable of type CUMULATIVE_ARGS which gives info about\n     the preceding args and about the function being called.\n@@ -4916,26 +4948,14 @@ function_arg_slotno (const struct sparc_args *cum, enum machine_mode mode,\n \t}\n       else\n \t{\n-\t  tree field;\n-\t  int intregs_p = 0, fpregs_p = 0;\n-\t  /* The ABI obviously doesn't specify how packed\n-\t     structures are passed.  These are defined to be passed\n-\t     in int regs if possible, otherwise memory.  */\n-\t  int packed_p = 0;\n+\t  int intregs_p = 0, fpregs_p = 0, packed_p = 0;\n \n-\t  /* First see what kinds of registers we need.  */\n-\t  for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n-\t    {\n-\t      if (TREE_CODE (field) == FIELD_DECL)\n-\t\t{\n-\t\t  if (FLOAT_TYPE_P (TREE_TYPE (field)) && TARGET_FPU)\n-\t\t    fpregs_p = 1;\n-\t\t  else\n-\t\t    intregs_p = 1;\n-\t\t  if (DECL_PACKED (field))\n-\t\t    packed_p = 1;\n-\t\t}\n-\t    }\n+\t  /* First see what kinds of registers we would need.  */\n+\t  scan_record_type (type, &intregs_p, &fpregs_p, &packed_p);\n+\n+\t  /* The ABI obviously doesn't specify how packed structures\n+\t     are passed.  These are defined to be passed in int regs\n+\t     if possible, otherwise memory.  */\n \t  if (packed_p || !named)\n \t    fpregs_p = 0, intregs_p = 1;\n "}]}