{"sha": "ae0a44495fa7e8ef142c4ae1f98608238d40a5dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUwYTQ0NDk1ZmE3ZThlZjE0MmM0YWUxZjk4NjA4MjM4ZDQwYTVkYw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2009-09-08T17:40:45Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2009-09-08T17:40:45Z"}, "message": "tree-ssa-loop-ivopts.c (get_phi_with_result): Remove.\n\n* tree-ssa-loop-ivopts.c (get_phi_with_result): Remove.\n(remove_statement): Likewise.\n(rewrite_use_nonlinear_expr): Adjust.\n(remove_unused_ivs): Collect SSA NAMEs to remove and call...\n* tree-ssa.c (release_defs_bitset): ... this.  New.\n* tree-flow.h (release_defs_bitset): Declare.\n\nFrom-SVN: r151520", "tree": {"sha": "6f46f4c8824e9ae9b60929059979e43fed8167dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f46f4c8824e9ae9b60929059979e43fed8167dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc/comments", "author": null, "committer": null, "parents": [{"sha": "21719cea1138d7e095c0ba68402175550e62f5e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21719cea1138d7e095c0ba68402175550e62f5e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21719cea1138d7e095c0ba68402175550e62f5e1"}], "stats": {"total": 149, "additions": 92, "deletions": 57}, "files": [{"sha": "4d18f170e5733bbacce09443cde5349fc100d60c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae0a44495fa7e8ef142c4ae1f98608238d40a5dc", "patch": "@@ -1,3 +1,12 @@\n+2009-09-08  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* tree-ssa-loop-ivopts.c (get_phi_with_result): Remove.\n+\t(remove_statement): Likewise.\n+\t(rewrite_use_nonlinear_expr): Adjust.\n+\t(remove_unused_ivs): Collect SSA NAMEs to remove and call...\n+\t* tree-ssa.c (release_defs_bitset): ... this.  New.\n+\t* tree-flow.h (release_defs_bitset): Declare.\n+\n 2009-09-08  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/41232"}, {"sha": "9af6cbd4e32296482b1d73e466d2eacb426d808a", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=ae0a44495fa7e8ef142c4ae1f98608238d40a5dc", "patch": "@@ -637,9 +637,10 @@ typedef bool (*walk_use_def_chains_fn) (tree, gimple, void *);\n extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *, bool);\n \n void propagate_defs_into_debug_stmts (gimple, basic_block,\n-\t\t\t\t  const gimple_stmt_iterator *);\n+\t\t\t\t      const gimple_stmt_iterator *);\n void propagate_var_def_into_debug_stmts (tree, basic_block,\n-\t\t\t\t\t  const gimple_stmt_iterator *);\n+\t\t\t\t\t const gimple_stmt_iterator *);\n+void release_defs_bitset (bitmap toremove);\n \n /* In tree-into-ssa.c  */\n void update_ssa (unsigned);"}, {"sha": "42b2ef3625299c5d3d8bf6ed8f892dc21624af20", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 12, "deletions": 55, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=ae0a44495fa7e8ef142c4ae1f98608238d40a5dc", "patch": "@@ -5297,42 +5297,6 @@ create_new_ivs (struct ivopts_data *data, struct iv_ca *set)\n     }\n }\n \n-/* Returns the phi-node in BB with result RESULT.  */\n-\n-static gimple\n-get_phi_with_result (basic_block bb, tree result)\n-{\n-  gimple_stmt_iterator i = gsi_start_phis (bb);\n-\n-  for (; !gsi_end_p (i); gsi_next (&i))\n-    if (gimple_phi_result (gsi_stmt (i)) == result)\n-      return gsi_stmt (i);\n-\n-  gcc_unreachable ();\n-  return NULL;\n-}\n-\n-\n-/* Removes statement STMT (real or a phi node).  If INCLUDING_DEFINED_NAME\n-   is true, remove also the ssa name defined by the statement.  */\n-\n-static void\n-remove_statement (gimple stmt, bool including_defined_name)\n-{\n-  if (gimple_code (stmt) == GIMPLE_PHI)\n-    {\n-      gimple bb_phi = get_phi_with_result (gimple_bb (stmt), \n-\t\t\t\t\t gimple_phi_result (stmt));\n-      gimple_stmt_iterator bsi = gsi_for_stmt (bb_phi);\n-      remove_phi_node (&bsi, including_defined_name);\n-    }\n-  else\n-    {\n-      gimple_stmt_iterator bsi = gsi_for_stmt (stmt);\n-      gsi_remove (&bsi, true);\n-      release_defs (stmt); \n-    }\n-}\n \n /* Rewrites USE (definition of iv used in a nonlinear expression)\n    using candidate CAND.  */\n@@ -5435,7 +5399,9 @@ rewrite_use_nonlinear_expr (struct ivopts_data *data,\n     {\n       ass = gimple_build_assign (tgt, op);\n       gsi_insert_before (&bsi, ass, GSI_SAME_STMT);\n-      remove_statement (use->stmt, false);\n+\n+      bsi = gsi_for_stmt (use->stmt);\n+      remove_phi_node (&bsi, false);\n     }\n   else\n     {\n@@ -5611,7 +5577,11 @@ remove_unused_ivs (struct ivopts_data *data)\n {\n   unsigned j;\n   bitmap_iterator bi;\n+  bitmap toremove = BITMAP_ALLOC (NULL);\n \n+  /* Figure out an order in which to release SSA DEFs so that we don't\n+     release something that we'd have to propagate into a debug stmt\n+     afterwards.  */\n   EXECUTE_IF_SET_IN_BITMAP (data->relevant, 0, j, bi)\n     {\n       struct version_info *info;\n@@ -5622,25 +5592,12 @@ remove_unused_ivs (struct ivopts_data *data)\n \t  && !info->inv_id\n \t  && !info->iv->have_use_for\n \t  && !info->preserve_biv)\n-\t{\n-\t  if (MAY_HAVE_DEBUG_STMTS)\n-\t    {\n-\t      gimple stmt;\n-\t      imm_use_iterator iter;\n-\n-\t      FOR_EACH_IMM_USE_STMT (stmt, iter, info->iv->ssa_name)\n-\t\t{\n-\t\t  if (!gimple_debug_bind_p (stmt))\n-\t\t    continue;\n-\n-\t\t  /* ??? We can probably do better than this.  */\n-\t\t  gimple_debug_bind_reset_value (stmt);\n-\t\t  update_stmt (stmt);\n-\t\t}\n-\t    }\n-\t  remove_statement (SSA_NAME_DEF_STMT (info->iv->ssa_name), true);\n-\t}\n+\tbitmap_set_bit (toremove, SSA_NAME_VERSION (info->iv->ssa_name));\n     }\n+\n+  release_defs_bitset (toremove);\n+\n+  BITMAP_FREE (toremove);\n }\n \n /* Frees data allocated by the optimization of a single loop.  */"}, {"sha": "b5b6afe15e6c8a3e4601cc031ef19a68b714d982", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae0a44495fa7e8ef142c4ae1f98608238d40a5dc/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=ae0a44495fa7e8ef142c4ae1f98608238d40a5dc", "patch": "@@ -444,6 +444,74 @@ propagate_defs_into_debug_stmts (gimple def, basic_block tobb,\n     }\n }\n \n+/* Delete SSA DEFs for SSA versions in the TOREMOVE bitmap, removing\n+   dominated stmts before their dominators, so that release_ssa_defs\n+   stands a chance of propagating DEFs into debug bind stmts.  */\n+\n+void\n+release_defs_bitset (bitmap toremove)\n+{\n+  unsigned j;\n+  bitmap_iterator bi;\n+\n+  /* Performing a topological sort is probably overkill, this will\n+     most likely run in slightly superlinear time, rather than the\n+     pathological quadratic worst case.  */\n+  while (!bitmap_empty_p (toremove))\n+    EXECUTE_IF_SET_IN_BITMAP (toremove, 0, j, bi)\n+      {\n+\tbool remove_now = true;\n+\ttree var = ssa_name (j);\n+\tgimple stmt;\n+\timm_use_iterator uit;\n+\n+\tFOR_EACH_IMM_USE_STMT (stmt, uit, var)\n+\t  {\n+\t    ssa_op_iter dit;\n+\t    def_operand_p def_p;\n+\n+\t    /* We can't propagate PHI nodes into debug stmts.  */\n+\t    if (gimple_code (stmt) == GIMPLE_PHI\n+\t\t|| is_gimple_debug (stmt))\n+\t      continue;\n+\n+\t    /* If we find another definition to remove that uses\n+\t       the one we're looking at, defer the removal of this\n+\t       one, so that it can be propagated into debug stmts\n+\t       after the other is.  */\n+\t    FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, dit, SSA_OP_DEF)\n+\t      {\n+\t\ttree odef = DEF_FROM_PTR (def_p);\n+\n+\t\tif (bitmap_bit_p (toremove, SSA_NAME_VERSION (odef)))\n+\t\t  {\n+\t\t    remove_now = false;\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\n+\t    if (!remove_now)\n+\t      BREAK_FROM_IMM_USE_STMT (uit);\n+\t  }\n+\n+\tif (remove_now)\n+\t  {\n+\t    gimple def = SSA_NAME_DEF_STMT (var);\n+\t    gimple_stmt_iterator gsi = gsi_for_stmt (def);\n+\n+\t    if (gimple_code (def) == GIMPLE_PHI)\n+\t      remove_phi_node (&gsi, true);\n+\t    else\n+\t      {\n+\t\tgsi_remove (&gsi, true);\n+\t\trelease_defs (def);\n+\t      }\n+\n+\t    bitmap_clear_bit (toremove, j);\n+\t  }\n+      }\n+}\n+\n /* Return true if SSA_NAME is malformed and mark it visited.\n \n    IS_VIRTUAL is true if this SSA_NAME was found inside a virtual"}]}