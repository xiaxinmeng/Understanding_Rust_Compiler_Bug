{"sha": "c8b6aa7c12ab17f947bba5295d010f6f05be2383", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiNmFhN2MxMmFiMTdmOTQ3YmJhNTI5NWQwMTBmNmYwNWJlMjM4Mw==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-09-15T13:43:17Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-09-15T13:43:17Z"}, "message": "re PR target/52144 (ARM should support arm/thumb function attribute to permit different instruction sets in the same source)\n\n2015-09-15  Christian Bruel  <christian.bruel@st.com>\n\n\tPR target/52144\n\t* config/arm/arm.c (arm_option_params_internal): Remove opts parameter.\n\t* config/arm/arm-c.c (arm_cpu_builtins): Declare static.\n\tRemove flags parameter.\n\t* config/arm/arm.h (TARGET_32BIT_P, TARGET_ARM_QBIT_P)\n\t(TARGET_ARM_SAT_P, TARGET_IDIV_P, TARGET_HAVE_LDREX_P)\n\t(TARGET_HAVE_LDREXBH_P, TARGET_HAVE_LDREXD_P, TARGET_DSP_MULTIPLY_P)\n\t(TARGET_ARM_FEATURE_LDREX_P, TARGET_INT_SIMD_P): Redefine macros with...\n\t(TARGET_ARM_SAT, TARGET_IDIV, TARGET_HAVE_LDREX)\n\t(TARGET_HAVE_LDREXBH, TARGET_HAVE_LDREXD, TARGET_ARM_FEATURE_LDREX)\n\t(TARGET_DSP_MULTIPLY, TARGET_INT_SIMD): Redefined macros.\n\t* gcc/config/arm/arm-protos.h (arm_cpu_builtins): Remove declaration.\n\nFrom-SVN: r227795", "tree": {"sha": "3c9079b3638a9296726a171dbffa7e1c71148d10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c9079b3638a9296726a171dbffa7e1c71148d10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8b6aa7c12ab17f947bba5295d010f6f05be2383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b6aa7c12ab17f947bba5295d010f6f05be2383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b6aa7c12ab17f947bba5295d010f6f05be2383", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b6aa7c12ab17f947bba5295d010f6f05be2383/comments", "author": null, "committer": null, "parents": [{"sha": "635e66fec3addc5af7e2ab65793af7237e555922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635e66fec3addc5af7e2ab65793af7237e555922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635e66fec3addc5af7e2ab65793af7237e555922"}], "stats": {"total": 143, "additions": 66, "deletions": 77}, "files": [{"sha": "72de7ff9f6123289fb62c34ea6788f41daaff1bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b6aa7c12ab17f947bba5295d010f6f05be2383/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b6aa7c12ab17f947bba5295d010f6f05be2383/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8b6aa7c12ab17f947bba5295d010f6f05be2383", "patch": "@@ -1,3 +1,18 @@\n+2015-09-15  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/52144\n+\t* config/arm/arm.c (arm_option_params_internal): Remove opts parameter.\n+\t* config/arm/arm-c.c (arm_cpu_builtins): Declare static.\n+\tRemove flags parameter.\n+\t* config/arm/arm.h (TARGET_32BIT_P, TARGET_ARM_QBIT_P)\n+\t(TARGET_ARM_SAT_P, TARGET_IDIV_P, TARGET_HAVE_LDREX_P)\n+\t(TARGET_HAVE_LDREXBH_P, TARGET_HAVE_LDREXD_P, TARGET_DSP_MULTIPLY_P)\n+\t(TARGET_ARM_FEATURE_LDREX_P, TARGET_INT_SIMD_P): Redefine macros with:\n+\t(TARGET_ARM_SAT, TARGET_IDIV, TARGET_HAVE_LDREX)\n+\t(TARGET_HAVE_LDREXBH, TARGET_HAVE_LDREXD, TARGET_ARM_FEATURE_LDREX)\n+\t(TARGET_DSP_MULTIPLY, TARGET_INT_SIMD): Redefined macros.\n+\t* gcc/config/arm/arm-protos.h (arm_cpu_builtins): Remove declaration.\n+\n 2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64.h (AARCH64_VALID_SIMD_DREG_MODE): New."}, {"sha": "4754a15f52c8fe473d5cee2139a8e36a3a1ded38", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b6aa7c12ab17f947bba5295d010f6f05be2383/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b6aa7c12ab17f947bba5295d010f6f05be2383/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=c8b6aa7c12ab17f947bba5295d010f6f05be2383", "patch": "@@ -54,43 +54,40 @@ arm_lang_object_attributes_init (void)\n    #pragma GCC target, we need to adjust the macros dynamically.  */\n \n static void\n-def_or_undef_macro(struct cpp_reader* pfile, const char *name, bool def_p) \n+def_or_undef_macro(struct cpp_reader* pfile, const char *name, bool def_p)\n {\n   if (def_p)\n-    cpp_define (pfile, name); \n-  else  \n-    cpp_undef (pfile, name); \n-} \n+    cpp_define (pfile, name);\n+  else\n+    cpp_undef (pfile, name);\n+}\n \n-void\n-arm_cpu_builtins (struct cpp_reader* pfile, int flags)\n+static void\n+arm_cpu_builtins (struct cpp_reader* pfile)\n {\n-  def_or_undef_macro (pfile, \"__ARM_FEATURE_DSP\",\n-\t\t      TARGET_DSP_MULTIPLY_P (flags));\n-  def_or_undef_macro (pfile, \"__ARM_FEATURE_QBIT\",\n-\t\t      TARGET_ARM_QBIT_P (flags)); \n-  def_or_undef_macro (pfile, \"__ARM_FEATURE_SAT\",\n-\t\t      TARGET_ARM_SAT_P (flags));\n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_DSP\", TARGET_DSP_MULTIPLY);\n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_QBIT\", TARGET_ARM_QBIT); \n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_SAT\", TARGET_ARM_SAT);\n   if (TARGET_CRYPTO)\n     builtin_define (\"__ARM_FEATURE_CRYPTO\");\n   if (unaligned_access)\n     builtin_define (\"__ARM_FEATURE_UNALIGNED\");\n   if (TARGET_CRC32)\n     builtin_define (\"__ARM_FEATURE_CRC32\");\n \n-  def_or_undef_macro (pfile, \"__ARM_32BIT_STATE\", TARGET_32BIT_P (flags)); \n+  def_or_undef_macro (pfile, \"__ARM_32BIT_STATE\", TARGET_32BIT); \n \n-  if (TARGET_ARM_FEATURE_LDREX_P (flags))\n+  if (TARGET_ARM_FEATURE_LDREX)\n     builtin_define_with_int_value (\"__ARM_FEATURE_LDREX\", \n-\t\t\t\t   TARGET_ARM_FEATURE_LDREX_P (flags));\n+\t\t\t\t   TARGET_ARM_FEATURE_LDREX);\n   else\n     cpp_undef (pfile, \"__ARM_FEATURE_LDREX\");\n \n   def_or_undef_macro (pfile, \"__ARM_FEATURE_CLZ\",\n-\t\t      ((TARGET_ARM_ARCH >= 5 && !TARGET_THUMB_P (flags))\n+\t\t      ((TARGET_ARM_ARCH >= 5 && !TARGET_THUMB)\n \t\t       || TARGET_ARM_ARCH_ISA_THUMB >=2));\n \n-  def_or_undef_macro (pfile, \"__ARM_FEATURE_SIMD32\", TARGET_INT_SIMD_P (flags));\n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_SIMD32\", TARGET_INT_SIMD);\n \n   builtin_define_with_int_value (\"__ARM_SIZEOF_MINIMAL_ENUM\",\n \t\t\t\t flag_short_enums ? 1 : 4);\n@@ -108,12 +105,12 @@ arm_cpu_builtins (struct cpp_reader* pfile, int flags)\n     builtin_define (\"__ARM_ARCH_ISA_ARM\");\n   builtin_define (\"__APCS_32__\");\n \n-  def_or_undef_macro (pfile, \"__thumb__\", TARGET_THUMB_P (flags));\n-  def_or_undef_macro (pfile, \"__thumb2__\", TARGET_THUMB2_P (flags));\n+  def_or_undef_macro (pfile, \"__thumb__\", TARGET_THUMB);\n+  def_or_undef_macro (pfile, \"__thumb2__\", TARGET_THUMB2);\n   if (TARGET_BIG_END)\n-    def_or_undef_macro (pfile, \"__THUMBEB__\", TARGET_THUMB_P (flags));\n+    def_or_undef_macro (pfile, \"__THUMBEB__\", TARGET_THUMB);\n   else\n-    def_or_undef_macro (pfile, \"__THUMBEL__\", TARGET_THUMB_P (flags));\n+    def_or_undef_macro (pfile, \"__THUMBEL__\", TARGET_THUMB);\n \n   if (TARGET_ARM_ARCH_ISA_THUMB)\n     builtin_define_with_int_value (\"__ARM_ARCH_ISA_THUMB\",\n@@ -181,8 +178,8 @@ arm_cpu_builtins (struct cpp_reader* pfile, int flags)\n       builtin_define (\"__ARM_EABI__\");\n     }\n \n-  def_or_undef_macro (pfile, \"__ARM_ARCH_EXT_IDIV__\", TARGET_IDIV_P (flags));\n-  def_or_undef_macro (pfile, \"__ARM_FEATURE_IDIV\", TARGET_IDIV_P (flags));\n+  def_or_undef_macro (pfile, \"__ARM_ARCH_EXT_IDIV__\", TARGET_IDIV);\n+  def_or_undef_macro (pfile, \"__ARM_FEATURE_IDIV\", TARGET_IDIV);\n \n   def_or_undef_macro (pfile, \"__ARM_ASM_SYNTAX_UNIFIED__\", inline_asm_unified);\n }\n@@ -193,7 +190,7 @@ arm_cpu_cpp_builtins (struct cpp_reader * pfile)\n   builtin_assert (\"cpu=arm\");\n   builtin_assert (\"machine=arm\");\n \n-  arm_cpu_builtins (pfile, target_flags);\n+  arm_cpu_builtins (pfile);\n }\n \n /* Hook to validate the current #pragma GCC target and set the arch custom\n@@ -245,7 +242,8 @@ arm_pragma_target_parse (tree args, tree pop_target)\n       cpp_opts->warn_unused_macros = 0;\n \n       /* Update macros.  */\n-      arm_cpu_builtins (parse_in, cur_opt->x_target_flags);\n+      gcc_assert (cur_opt->x_target_flags == target_flags);\n+      arm_cpu_builtins (parse_in);\n \n       cpp_opts->warn_unused_macros = saved_warn_unused_macros;\n     }"}, {"sha": "d3d7216488e7a42b68fc3a0962198c7d128333e6", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b6aa7c12ab17f947bba5295d010f6f05be2383/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b6aa7c12ab17f947bba5295d010f6f05be2383/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c8b6aa7c12ab17f947bba5295d010f6f05be2383", "patch": "@@ -340,7 +340,6 @@ extern const char *arm_rewrite_selected_cpu (const char *name);\n extern void arm_lang_object_attributes_init (void);\n extern void arm_register_target_pragmas (void);\n extern void arm_cpu_cpp_builtins (struct cpp_reader *);\n-extern void arm_cpu_builtins (struct cpp_reader *, int);\n \n extern bool arm_is_constant_pool_ref (rtx);\n "}, {"sha": "214d0b15789949dcde80adad5a65ca2d24c69a00", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b6aa7c12ab17f947bba5295d010f6f05be2383/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b6aa7c12ab17f947bba5295d010f6f05be2383/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c8b6aa7c12ab17f947bba5295d010f6f05be2383", "patch": "@@ -2751,15 +2751,14 @@ arm_option_check_internal (struct gcc_options *opts)\n     error (\"-mslow-flash-data only supports non-pic code on armv7-m targets\");\n }\n \n-/* Set params depending on attributes and optimization options.  */\n+/* Recompute the global settings depending on target attribute options.  */\n+\n static void\n-arm_option_params_internal (struct gcc_options *opts)\n+arm_option_params_internal (void)\n {\n-  int flags = opts->x_target_flags;\n-\n- /* If we are not using the default (ARM mode) section anchor offset\n+  /* If we are not using the default (ARM mode) section anchor offset\n      ranges, then set the correct ranges now.  */\n-  if (TARGET_THUMB1_P (flags))\n+  if (TARGET_THUMB1)\n     {\n       /* Thumb-1 LDR instructions cannot have negative offsets.\n          Permissible positive offset ranges are 5-bit (for byte loads),\n@@ -2769,7 +2768,7 @@ arm_option_params_internal (struct gcc_options *opts)\n       targetm.min_anchor_offset = 0;\n       targetm.max_anchor_offset = 127;\n     }\n-  else if (TARGET_THUMB2_P (flags))\n+  else if (TARGET_THUMB2)\n     {\n       /* The minimum is set such that the total size of the block\n          for a particular anchor is 248 + 1 + 4095 bytes, which is\n@@ -2790,14 +2789,13 @@ arm_option_params_internal (struct gcc_options *opts)\n       max_insns_skipped = 6;\n \n       /* For THUMB2, we limit the conditional sequence to one IT block.  */\n-      if (TARGET_THUMB2_P (flags))\n-        max_insns_skipped = opts->x_arm_restrict_it ? 1 : 4;\n+      if (TARGET_THUMB2)\n+        max_insns_skipped = arm_restrict_it ? 1 : 4;\n     }\n   else\n     /* When -mrestrict-it is in use tone down the if-conversion.  */\n-    max_insns_skipped\n-      = (TARGET_THUMB2_P (opts->x_target_flags) && opts->x_arm_restrict_it)\n-         ? 1 : current_tune->max_insns_skipped;\n+    max_insns_skipped = (TARGET_THUMB2 && arm_restrict_it)\n+      ? 1 : current_tune->max_insns_skipped;\n }\n \n /* True if -mflip-thumb should next add an attribute for the default\n@@ -3385,7 +3383,7 @@ arm_option_override (void)\n \n   arm_option_override_internal (&global_options, &global_options_set);\n   arm_option_check_internal (&global_options);\n-  arm_option_params_internal (&global_options);\n+  arm_option_params_internal ();\n \n   /* Register global variables with the garbage collector.  */\n   arm_add_gc_roots ();\n@@ -29482,7 +29480,7 @@ arm_set_current_function (tree fndecl)\n \t  = save_target_globals_default_opts ();\n     }\n \n-  arm_option_params_internal (&global_options);\n+  arm_option_params_internal ();\n }\n \n /* Hook to determine if one function can safely inline another.  */\n@@ -29501,7 +29499,7 @@ arm_can_inline_p (tree caller ATTRIBUTE_UNUSED, tree callee ATTRIBUTE_UNUSED)\n    go over the list.  */\n \n static bool\n-arm_valid_target_attribute_rec (tree args,  struct gcc_options *opts)\n+arm_valid_target_attribute_rec (tree args, struct gcc_options *opts)\n {\n   if (TREE_CODE (args) == TREE_LIST)\n     {"}, {"sha": "87c9f904894f0367fb245b4a7f1e89c780dcc75c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 14, "deletions": 35, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b6aa7c12ab17f947bba5295d010f6f05be2383/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b6aa7c12ab17f947bba5295d010f6f05be2383/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=c8b6aa7c12ab17f947bba5295d010f6f05be2383", "patch": "@@ -160,8 +160,6 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_THUMB1\t\t\t(TARGET_THUMB && !arm_arch_thumb2)\n /* Arm or Thumb-2 32-bit code.  */\n #define TARGET_32BIT\t\t\t(TARGET_ARM || arm_arch_thumb2)\n-#define TARGET_32BIT_P(flags)\t\t(TARGET_ARM_P (flags) \\\n-\t\t\t\t\t || arm_arch_thumb2)\n /* 32-bit Thumb-2 code.  */\n #define TARGET_THUMB2\t\t\t(TARGET_THUMB && arm_arch_thumb2)\n /* Thumb-1 only.  */\n@@ -220,23 +218,18 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n   (TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP\t\t\t\\\n    && ARM_FPU_FSET_HAS (arm_fpu_desc->features, FPU_FL_NEON))\n \n-\n /* Q-bit is present.  */\n-#define TARGET_ARM_QBIT_P(flags) \\\n-  (TARGET_32BIT_P (flags) && arm_arch5e && (arm_arch_notm || arm_arch7))\n-#define TARGET_ARM_QBIT TARGET_ARM_QBIT_P(target_flags)\n+#define TARGET_ARM_QBIT \\\n+  (TARGET_32BIT && arm_arch5e && (arm_arch_notm || arm_arch7))\n /* Saturation operation, e.g. SSAT.  */\n-#define TARGET_ARM_SAT_P(flags) \\\n-  (TARGET_32BIT_P (flags) && arm_arch6 && (arm_arch_notm || arm_arch7))\n-#define TARGET_ARM_SAT TARGET_ARM_SAT_P(target_flags)\n+#define TARGET_ARM_SAT \\\n+  (TARGET_32BIT && arm_arch6 && (arm_arch_notm || arm_arch7))\n /* \"DSP\" multiply instructions, eg. SMULxy.  */\n-#define TARGET_DSP_MULTIPLY_P(flags) \\\n-  (TARGET_32BIT_P (flags) && arm_arch5e && (arm_arch_notm || arm_arch7em))\n-#define TARGET_DSP_MULTIPLY TARGET_DSP_MULTIPLY_P(target_flags)\n+#define TARGET_DSP_MULTIPLY \\\n+  (TARGET_32BIT && arm_arch5e && (arm_arch_notm || arm_arch7em))\n /* Integer SIMD instructions, and extend-accumulate instructions.  */\n-#define TARGET_INT_SIMD_P(flags) \\\n-  (TARGET_32BIT_P (flags) && arm_arch6 && (arm_arch_notm || arm_arch7em))\n-#define TARGET_INT_SIMD TARGET_INT_SIMD_P(target_flags)\n+#define TARGET_INT_SIMD \\\n+  (TARGET_32BIT && arm_arch6 && (arm_arch_notm || arm_arch7em))\n \n /* Should MOVW/MOVT be used in preference to a constant pool.  */\n #define TARGET_USE_MOVT \\\n@@ -259,30 +252,21 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_HAVE_MEMORY_BARRIER (TARGET_HAVE_DMB || TARGET_HAVE_DMB_MCR)\n \n /* Nonzero if this chip supports ldrex and strex */\n-#define TARGET_HAVE_LDREX_P(flags) ((arm_arch6 && TARGET_ARM_P (flags)) \\\n-\t\t\t\t    || arm_arch7)\n-#define TARGET_HAVE_LDREX\t  TARGET_HAVE_LDREX_P (target_flags) \n+#define TARGET_HAVE_LDREX        ((arm_arch6 && TARGET_ARM) || arm_arch7)\n \n /* Nonzero if this chip supports ldrex{bh} and strex{bh}.  */\n-#define TARGET_HAVE_LDREXBH_P(flags) ((arm_arch6k && TARGET_ARM_P (flags)) \\\n-\t\t\t\t      || arm_arch7)\n-#define TARGET_HAVE_LDREXBH\t     TARGET_HAVE_LDREXBH_P (target_flags)\n+#define TARGET_HAVE_LDREXBH ((arm_arch6k && TARGET_ARM) || arm_arch7)\n \n /* Nonzero if this chip supports ldrexd and strexd.  */\n-#define TARGET_HAVE_LDREXD_P(flags) (((arm_arch6k && TARGET_ARM_P (flags)) \\\n-\t\t\t\t      || arm_arch7) && arm_arch_notm)\n-#define TARGET_HAVE_LDREXD\t    TARGET_HAVE_LDREXD_P (target_flags)\n-\t\t\t\t\n+#define TARGET_HAVE_LDREXD (((arm_arch6k && TARGET_ARM) \\\n+\t\t\t     || arm_arch7) && arm_arch_notm)\n \n /* Nonzero if this chip supports load-acquire and store-release.  */\n #define TARGET_HAVE_LDACQ\t(TARGET_ARM_ARCH >= 8)\n \n /* Nonzero if integer division instructions supported.  */\n-#define TARGET_IDIV_P(flags)\t((TARGET_ARM_P (flags) && arm_arch_arm_hwdiv) \\\n-\t\t\t\t || (TARGET_THUMB2_P (flags)                  \\\n-\t\t\t\t     && arm_arch_thumb_hwdiv))\n-#define TARGET_IDIV             TARGET_IDIV_P (target_flags)\t\t\n-\n+#define TARGET_IDIV\t((TARGET_ARM && arm_arch_arm_hwdiv)\t\\\n+\t\t\t || (TARGET_THUMB2 && arm_arch_thumb_hwdiv))\n \n /* Nonzero if disallow volatile memory access in IT block.  */\n #define TARGET_NO_VOLATILE_CE\t\t(arm_arch_no_volatile_ce)\n@@ -2220,11 +2204,6 @@ extern int making_const_table;\n    | (TARGET_HAVE_LDREXBH ? 3 : 0)\t\t\t\t\\\n    | (TARGET_HAVE_LDREXD ? 8 : 0))\n \n-#define TARGET_ARM_FEATURE_LDREX_P(flags)\t\t\t\\\n-  ((TARGET_HAVE_LDREX_P (flags) ? 4 : 0)\t\t\t\\\n-   | (TARGET_HAVE_LDREXBH_P (flags) ? 3 : 0)\t\t\t\\\n-   | (TARGET_HAVE_LDREXD_P (flags) ? 8 : 0))\n-\n /* Set as a bit mask indicating the available widths of hardware floating\n    point types.  Where bit 1 indicates 16-bit support, bit 2 indicates\n    32-bit support, bit 3 indicates 64-bit support.  */"}]}