{"sha": "2c2e9f7a5d4b5db97f268ae247b3a82b1610a543", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMyZTlmN2E1ZDRiNWRiOTdmMjY4YWUyNDdiM2E4MmIxNjEwYTU0Mw==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2020-01-17T15:15:44Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2020-01-17T15:30:53Z"}, "message": "gdbinit.in: make shorthands accept an explicit argument\n\nMake gdb shorthands such as 'pr' accept an argument, in addition to\nimplictly taking register '$' as the thing to examine.\n\nThe 'eval ...' one-liners are used to workaround GDB bug #22466.\n\n\t* gdbinit.in (help-gcc-hooks): New command.\n\t(pp, pr, prl, pt, pct, pgg, pgq, pgs, pge, pmz, ptc, pdn, ptn, pdd, prc,\n\tpi, pbm, pel, trt): Take $arg0 instead of $ if supplied. Update\n\tdocumentation.", "tree": {"sha": "773d123b16f5b8500391a3cab07cdccbfaa01b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/773d123b16f5b8500391a3cab07cdccbfaa01b00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c2e9f7a5d4b5db97f268ae247b3a82b1610a543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2e9f7a5d4b5db97f268ae247b3a82b1610a543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c2e9f7a5d4b5db97f268ae247b3a82b1610a543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c2e9f7a5d4b5db97f268ae247b3a82b1610a543/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "568f0f355f259f58688dd73f749f4d80adc10e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568f0f355f259f58688dd73f749f4d80adc10e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568f0f355f259f58688dd73f749f4d80adc10e40"}], "stats": {"total": 180, "additions": 129, "deletions": 51}, "files": [{"sha": "3c6299a09763568f24ac6dad5992991f0b03fffe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2e9f7a5d4b5db97f268ae247b3a82b1610a543/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2e9f7a5d4b5db97f268ae247b3a82b1610a543/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c2e9f7a5d4b5db97f268ae247b3a82b1610a543", "patch": "@@ -1,3 +1,10 @@\n+2020-01-17  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* gdbinit.in (help-gcc-hooks): New command.\n+\t(pp, pr, prl, pt, pct, pgg, pgq, pgs, pge, pmz, ptc, pdn, ptn, pdd, prc,\n+\tpi, pbm, pel, trt): Take $arg0 instead of $ if supplied. Update\n+\tdocumentation.\n+\n 2020-01-17  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* config/aarch64/aarch64-sve.md (@aarch64_sve_ld1ro<mode>): Use the"}, {"sha": "0b4631dea414befdfae9d3b7e0ae1f4f011eb814", "filename": "gcc/gdbinit.in", "status": "modified", "additions": 122, "deletions": 51, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c2e9f7a5d4b5db97f268ae247b3a82b1610a543/gcc%2Fgdbinit.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c2e9f7a5d4b5db97f268ae247b3a82b1610a543/gcc%2Fgdbinit.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbinit.in?ref=2c2e9f7a5d4b5db97f268ae247b3a82b1610a543", "patch": "@@ -16,154 +16,216 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+define help-gcc-hooks\n+help help-gcc-hooks\n+end\n+\n+document help-gcc-hooks\n+GCC gdbinit file introduces several debugging shorthands:\n+\n+    pr [rtx], prl [rtx], prc [rtx], pi [rtx_insn],\n+    pt [tree], pct [tree], ptc [tree], trt [tree],\n+    pgs [tree], pge [tree], pdn [tree], ptn [tree],\n+    pgg [gimple], pgq [gimple_seq],\n+    pmz [mpz_t],\n+    pdd [dw_die_ref],\n+    pbm [bitmap],\n+    pel [location_t],\n+    pp, pbs, pcfun\n+\n+They are generally implemented by calling a function that prints to stderr,\n+and therefore will not work when the compiler is not executing.\n+\n+Most shorthands accept an optional argument. When it is not supplied,\n+they use value in GDB register $, i.e. the last printed value.\n+end\n+\n define pp\n-call debug ($)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call debug ($debug_arg)\n end\n \n document pp\n-Print a representation of the GCC data structure that is $.\n-Works only when an inferior is executing.\n+GCC hook: pp [any]\n+Print a representation of any GCC data structure for which an instance of\n+overloaded function 'debug' is available.\n+See also 'help-gcc-hooks'.\n end\n \n define pr\n-call debug_rtx ($)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call debug_rtx ($debug_arg)\n end\n \n document pr\n-Print the full structure of the rtx that is $.\n-Works only when an inferior is executing.\n+GCC hook: pr [rtx]\n+Print the full structure of given rtx.\n+See also 'help-gcc-hooks'.\n end\n \n define prl\n-call debug_rtx_list ($, debug_rtx_count)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call debug_rtx_list ($debug_arg, debug_rtx_count)\n end\n \n document prl\n-Print the full structure of all rtx insns beginning at $.\n-Works only when an inferior is executing.\n+GCC hook: prl [rtx]\n+Print the full structure of all rtx insns beginning at given rtx.\n Uses variable debug_rtx_count to control number of insns printed:\n-  debug_rtx_count > 0: print from $ on.\n-  debug_rtx_count < 0: print a window around $.\n+  debug_rtx_count > 0: print from given rtx on.\n+  debug_rtx_count < 0: print a window around given rtx.\n \n There is also debug_rtx_find (rtx, uid) that will scan a list for UID and print\n it using debug_rtx_list. Usage example: set $foo=debug_rtx_find(first, 42)\n end\n \n define pt\n-call debug_tree ($)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call debug_tree ($debug_arg)\n end\n \n document pt\n-Print the full structure of the tree that is $.\n-Works only when an inferior is executing.\n+GCC hook: pt [tree]\n+Print the full structure of given tree.\n+See also 'help-gcc-hooks'.\n end\n \n define pct\n-call debug_c_tree ($)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call debug_c_tree ($debug_arg)\n end\n \n document pct\n-Print the tree that is $ in C syntax.\n-Works only when an inferior is executing.\n+GCC hook: pct [tree]\n+Print given tree in C syntax.\n+See also 'help-gcc-hooks'.\n end\n \n define pgg\n-call debug_gimple_stmt ($)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call debug_gimple_stmt ($debug_arg)\n end\n \n document pgg\n-Print the Gimple statement that is $ in C syntax.\n-Works only when an inferior is executing.\n+GCC hook: pgg [gimple]\n+Print given GIMPLE statement in C syntax.\n+See also 'help-gcc-hooks'.\n end\n \n define pgq\n-call debug_gimple_seq ($)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call debug_gimple_seq ($debug_arg)\n end\n \n document pgq\n-Print the Gimple sequence that is $ in C syntax.\n-Works only when an inferior is executing.\n+GCC hook: pgq [gimple_seq]\n+Print given GIMPLE sequence in C syntax.\n+See also 'help-gcc-hooks'.\n end\n \n define pgs\n-call debug_generic_stmt ($)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call debug_generic_stmt ($debug_arg)\n end\n \n document pgs\n-Print the statement that is $ in C syntax.\n-Works only when an inferior is executing.\n+GCC hook: pgq [tree]\n+Print given GENERIC statement in C syntax.\n+See also 'help-gcc-hooks'.\n end\n \n define pge\n-call debug_generic_expr ($)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call debug_generic_expr ($debug_arg)\n end\n \n document pge\n-Print the expression that is $ in C syntax.\n-Works only when an inferior is executing.\n+GCC hook: pge [tree]\n+Print given GENERIC expression in C syntax.\n+See also 'help-gcc-hooks'.\n end\n \n define pmz\n-call mpz_out_str(stderr, 10, $)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call mpz_out_str(stderr, 10, $debug_arg)\n end\n \n document pmz\n-Print the mpz value that is $\n-Works only when an inferior is executing.\n+GCC hook: pmz [mpz_t]\n+Print given mpz value.\n+See also 'help-gcc-hooks'.\n end\n \n define ptc\n-output (enum tree_code) $.base.code\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+output (enum tree_code) $debug_arg.base.code\n echo \\n\n end\n \n document ptc\n-Print the tree-code of the tree node that is $.\n+GCC hook: ptc [tree]\n+Print the tree-code of given tree node.\n+See also 'help-gcc-hooks'.\n end\n \n define pdn\n-output $.decl_minimal.name->identifier.id.str\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+output $debug_arg.decl_minimal.name->identifier.id.str\n echo \\n\n end\n \n document pdn\n-Print the name of the decl-node that is $.\n+GCC hook: pdn [tree]\n+Print the name of given decl-node.\n+See also 'help-gcc-hooks'.\n end\n \n define ptn\n-output $.type.name->decl_minimal.name->identifier.id.str\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+output $debug_arg.type.name->decl_minimal.name->identifier.id.str\n echo \\n\n end\n \n document ptn\n-Print the name of the type-node that is $.\n+GCC hook: ptn [tree]\n+Print the name of given type-node.\n+See also 'help-gcc-hooks'.\n end\n \n define pdd\n-call debug_dwarf_die ($)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call debug_dwarf_die ($debug_arg)\n end\n \n document pdd\n-Print the dw_die_ref that is in $.\n+GCC hook: pdd [dw_die_ref]\n+Print given dw_die_ref.\n+See also 'help-gcc-hooks'.\n end\n \n define prc\n-output (enum rtx_code) $.code\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+output (enum rtx_code) $debug_arg.code\n echo \\ (\n-output $.mode\n+output $debug_arg.mode\n echo )\\n\n end\n \n document prc\n-Print the rtx-code and machine mode of the rtx that is $.\n+GCC hook: prc [rtx]\n+Print the rtx-code and machine mode of given rtx.\n+See also 'help-gcc-hooks'.\n end\n \n define pi\n-print $.u.fld[0].rt_rtx@7\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+print $debug_arg.u.fld[0].rt_rtx@7\n end\n \n document pi\n-Print the fields of an instruction that is $.\n+GCC hook: pi [rtx_insn]\n+Print the fields of given RTL instruction.\n+See also 'help-gcc-hooks'.\n end\n \n define pbs\n@@ -176,20 +238,26 @@ including the global binding level.\n end\n \n define pbm\n-call bitmap_print (stderr, $, \"\", \"\\n\")\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+call bitmap_print (stderr, $debug_arg, \"\", \"\\n\")\n end\n \n document pbm\n-Dump the bitmap that is in $ as a comma-separated list of numbers.\n+GCC hook: pbm [bitmap]\n+Dump given bitmap as a comma-separated list of numbers.\n+See also 'help-gcc-hooks'.\n end\n \n define pel\n-output expand_location ($)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+output expand_location ($debug_arg)\n echo \\n\n end\n \n document pel\n-Print expanded location of $.\n+GCC hook: pel [location_t]\n+Print given location.\n+See also 'help-gcc-hooks'.\n end\n \n define pcfun\n@@ -202,11 +270,14 @@ Print current function.\n end\n \n define trt\n-print ($.typed.type)\n+eval \"set $debug_arg = $%s\", $argc ? \"arg0\" : \"\"\n+print ($debug_arg.typed.type)\n end\n \n document trt\n-Print TREE_TYPE of the tree node that is $\n+GCC hook: trt [tree]\n+Print TREE_TYPE of given tree node.\n+See also 'help-gcc-hooks'.\n end\n \n define break-on-diagnostic"}]}