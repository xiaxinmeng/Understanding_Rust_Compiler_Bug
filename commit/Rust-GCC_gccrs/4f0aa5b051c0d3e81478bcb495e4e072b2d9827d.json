{"sha": "4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYwYWE1YjA1MWMwZDNlODE0NzhiY2I0OTVlNGUwNzJiMmQ5ODI3ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-17T19:31:50Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-09-17T19:32:43Z"}, "message": "c++: Add tests for fixed PRs.\n\nBugzilla inspection turned up a bunch of old(er) PRs that have been\nfixed.  Let's include them not to regress in the future.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/87530\n\tPR c++/58156\n\tPR c++/68828\n\tPR c++/86002\n\tPR c++/91525\n\tPR c++/96223\n\tPR c++/87032\n\tPR c++/35098\n\t* g++.dg/cpp0x/move-return4.C: New test.\n\t* g++.dg/cpp0x/vt-58156.C: New test.\n\t* g++.dg/cpp2a/concepts-pr68828.C: New test.\n\t* g++.dg/cpp2a/concepts-pr86002.C: New test.\n\t* g++.dg/cpp2a/concepts-pr91525.C: New test.\n\t* g++.dg/cpp2a/constexpr-indeterminate1.C: New test.\n\t* g++.dg/cpp2a/desig17.C: New test.\n\t* g++.dg/ext/attrib62.C: New test.", "tree": {"sha": "ad4dbd6d8399ae847e91f4fa4543a4c6c03cacc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad4dbd6d8399ae847e91f4fa4543a4c6c03cacc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c560591408440f441b8b327f5b41f9328d20b67b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c560591408440f441b8b327f5b41f9328d20b67b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c560591408440f441b8b327f5b41f9328d20b67b"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "3fc58089319355f394b68423018c251372fbc82b", "filename": "gcc/testsuite/g++.dg/cpp0x/move-return4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmove-return4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmove-return4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fmove-return4.C?ref=4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/87530\n+// { dg-do compile { target c++11 } }\n+\n+struct Base { };\n+\n+template<typename T>\n+struct A : Base\n+{\n+    A();\n+    A(Base&&);\n+};\n+\n+A<int> foo()\n+{\n+    A<double> v;\n+    return v; // { dg-error \"cannot bind rvalue reference\" \"\" { target c++17_down } }\n+}"}, {"sha": "f1362ee84b6bf12101f65b40d7012e69f197f412", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-58156.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-58156.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-58156.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-58156.C?ref=4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/58156\n+// { dg-do compile { target c++11 } }\n+\n+template <class T, class... U>\n+void Foo(U&...) {}\n+\n+template <class T, class... U>\n+void Foo(const U&...) {}\n+\n+void Bar() {\n+  const int a = 0;\n+  Foo<int>(a);\n+}"}, {"sha": "c9679eaa3699b4c98b0568b0a35875cc2eccad59", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr68828.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68828.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68828.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr68828.C?ref=4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/68828\n+// { dg-do compile { target c++20 } }\n+\n+template <typename... Types>\n+struct Var\n+{\n+};\n+\n+struct A\n+{\n+};\n+\n+template <typename T>\n+T\n+forward(T t)\n+{\n+  return static_cast<T>(t);\n+}\n+\n+template <typename V, typename... Types, typename... Args>\n+bool requires_types_args(V&& v, Var<Types...>&, Args&&... args)\n+{\n+  return (true && ... &&\n+    requires (V&& v, Types type, Args... args) {\n+      foo(forward<V>(v), forward<Types>(type), \n+        forward<Args>(args)...);\n+    }\n+  );\n+}\n+\n+void bar()\n+{\n+  Var<int, char> v;\n+  requires_types_args(A(), v, 1, 'b');\n+}"}, {"sha": "daa88c5a233f5b5b0849e36753653e16cf6cf760", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr86002.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr86002.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr86002.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr86002.C?ref=4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/86002\n+// { dg-do compile { target c++20 } }\n+\n+struct X {};\n+struct Y { int i; };\n+\n+template <typename T>\n+int f(T t)\n+{\n+    if constexpr (requires { t.i; })\n+        return t.i;\n+    else\n+        return {};\n+}\n+\n+int main()\n+{\n+    return f(X{}) + f(Y{});\n+}"}, {"sha": "700a1802a2ddbaae9b84a65d4dbfa3964d2ac7d0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr91525.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr91525.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr91525.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr91525.C?ref=4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/91525\n+// { dg-do compile { target c++20 } }\n+\n+struct X {\n+  void operator<<(long);\n+  void operator<<(bool);\n+} x;\n+struct B {\n+  template <bool = true> operator bool();\n+  template <bool = true> requires false operator bool();\n+} b;\n+\n+void\n+fn()\n+{\n+  x << b;\n+}"}, {"sha": "6e1eb68ff6889d6d5c04147ad4df1ec51f7d646c", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-indeterminate1.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-indeterminate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-indeterminate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-indeterminate1.C?ref=4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "patch": "@@ -0,0 +1,46 @@\n+// PR c++/96223\n+// { dg-do compile { target c++20 } }\n+// DR 1787 (if an indeterminate value is produced by an evaluation, the\n+// behavior is undefined except in certain cases)\n+// Note that P1331R2 explicitly disallows in a constant evaluation:\n+// - an lvalue-to-rvalue conversion that is applied to an object with\n+// indeterminate value ([basic.indet]).\n+\n+#include <cstddef>\n+\n+constexpr int\n+fn1 ()\n+{\n+  unsigned char foo;\n+  unsigned char u = foo; // { dg-error \"not usable in a constant expression\" }\n+  return 0;\n+}\n+\n+constexpr int\n+fn2 ()\n+{\n+  unsigned char foo;\n+  int i = foo; // { dg-error \"not usable in a constant expression\" }\n+  return 0;\n+}\n+\n+constexpr int\n+fn3 ()\n+{\n+  unsigned char foo;\n+  char8_t u = foo; // { dg-error \"not usable in a constant expression\" }\n+  return 0;\n+}\n+\n+constexpr int\n+fn4 ()\n+{\n+  std::byte foo;\n+  std::byte b = foo; // { dg-error \"not usable in a constant expression\" }\n+  return 0;\n+}\n+\n+constexpr int w1 = fn1 ();\n+constexpr int w2 = fn2 ();\n+constexpr int w3 = fn3 ();\n+constexpr int w4 = fn4 ();"}, {"sha": "8f55c549ca2df1789288d9a7d9592c67384986fb", "filename": "gcc/testsuite/g++.dg/cpp2a/desig17.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdesig17.C?ref=4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/87032\n+// { dg-do compile { target c++20 } }\n+\n+struct f1 {int x,y;};\n+struct f2 {int x,y,z,t;};\n+\n+struct T {\n+const char * name;\n+union {\n+       struct f1  fn1;\n+       struct f2  fn2;\n+} d;\n+};\n+\n+extern \"C\" void p(struct T);\n+\n+int main(){\n+p({\"%x\",{.fn2={1,2,3,4}}});\n+}"}, {"sha": "116ee829a2d01e0744021f3a9d3416fd2b39548f", "filename": "gcc/testsuite/g++.dg/ext/attrib62.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib62.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f0aa5b051c0d3e81478bcb495e4e072b2d9827d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib62.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib62.C?ref=4f0aa5b051c0d3e81478bcb495e4e072b2d9827d", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/35098\n+// { dg-do compile }\n+\n+template<typename T> struct A\n+{\n+  T a, __attribute((unused)) b; // { dg-warning \"attribute ignored\" }\n+};"}]}