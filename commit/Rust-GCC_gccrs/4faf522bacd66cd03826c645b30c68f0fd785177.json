{"sha": "4faf522bacd66cd03826c645b30c68f0fd785177", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZhZjUyMmJhY2Q2NmNkMDM4MjZjNjQ1YjMwYzY4ZjBmZDc4NTE3Nw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2018-11-14T11:42:10Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-11-14T11:42:10Z"}, "message": "[Ada] Crash on interface equality covered by a renaming declaration\n\nThe frontend crashes processing a tagged type that implements an\ninterface which has an equality primitive (that is, \"=\") and covers such\nprimitive by means of a renaming declaration.\n\n2018-11-14  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_disp.adb (Expand_Interface_Thunk): Extend handling of\n\trenamings of the predefined equality primitive.\n\t(Make_Secondary_DT): When calling Expand_Interface_Thunk() pass\n\tit the primitive, instead of its Ultimate_Alias; required to\n\tallow the called routine to identify renamings of the predefined\n\tequality operation.\n\ngcc/testsuite/\n\n\t* gnat.dg/equal5.adb, gnat.dg/equal5.ads: New testcase.\n\nFrom-SVN: r266130", "tree": {"sha": "bdbf608da71836e0a46d5adad0020c4da73b5d95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdbf608da71836e0a46d5adad0020c4da73b5d95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4faf522bacd66cd03826c645b30c68f0fd785177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4faf522bacd66cd03826c645b30c68f0fd785177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4faf522bacd66cd03826c645b30c68f0fd785177", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4faf522bacd66cd03826c645b30c68f0fd785177/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6eb7548cf927d541477146a195e2bdd25900012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6eb7548cf927d541477146a195e2bdd25900012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6eb7548cf927d541477146a195e2bdd25900012"}], "stats": {"total": 76, "additions": 67, "deletions": 9}, "files": [{"sha": "7390a5c5291c95d5824422e71edf066c236123e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4faf522bacd66cd03826c645b30c68f0fd785177/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4faf522bacd66cd03826c645b30c68f0fd785177/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4faf522bacd66cd03826c645b30c68f0fd785177", "patch": "@@ -1,3 +1,12 @@\n+2018-11-14  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Interface_Thunk): Extend handling of\n+\trenamings of the predefined equality primitive.\n+\t(Make_Secondary_DT): When calling Expand_Interface_Thunk() pass\n+\tit the primitive, instead of its Ultimate_Alias; required to\n+\tallow the called routine to identify renamings of the predefined\n+\tequality operation.\n+\n 2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* freeze.adb (Check_Pragma_Thread_Local_Storage): New routine. A"}, {"sha": "5a9124976f77aafaa96e6980173afca3fe0f3a66", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4faf522bacd66cd03826c645b30c68f0fd785177/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4faf522bacd66cd03826c645b30c68f0fd785177/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=4faf522bacd66cd03826c645b30c68f0fd785177", "patch": "@@ -1828,6 +1828,9 @@ package body Exp_Disp is\n       Formal        : Node_Id;\n       Ftyp          : Entity_Id;\n       Iface_Formal  : Node_Id := Empty;  -- initialize to prevent warning\n+      Is_Predef_Op  : constant Boolean :=\n+                        Is_Predefined_Dispatching_Operation (Prim)\n+                          or else Is_Predefined_Dispatching_Operation (Target);\n       New_Arg       : Node_Id;\n       Offset_To_Top : Node_Id;\n       Target_Formal : Entity_Id;\n@@ -1838,7 +1841,7 @@ package body Exp_Disp is\n \n       --  No thunk needed if the primitive has been eliminated\n \n-      if Is_Eliminated (Ultimate_Alias (Prim)) then\n+      if Is_Eliminated (Target) then\n          return;\n \n       --  In case of primitives that are functions without formals and a\n@@ -1859,9 +1862,10 @@ package body Exp_Disp is\n       --  actual object) generate code that modify its contents.\n \n       --  Note: This special management is not done for predefined primitives\n-      --  because???\n+      --  because they don't have available the Interface_Alias attribute (see\n+      --  Sem_Ch3.Add_Internal_Interface_Entities).\n \n-      if not Is_Predefined_Dispatching_Operation (Prim) then\n+      if not Is_Predef_Op then\n          Iface_Formal := First_Formal (Interface_Alias (Prim));\n       end if;\n \n@@ -1872,9 +1876,7 @@ package body Exp_Disp is\n          --  Use the interface type as the type of the controlling formal (see\n          --  comment above).\n \n-         if not Is_Controlling_Formal (Formal)\n-           or else Is_Predefined_Dispatching_Operation (Prim)\n-         then\n+         if not Is_Controlling_Formal (Formal) or else Is_Predef_Op then\n             Ftyp := Etype (Formal);\n             Expr := New_Copy_Tree (Expression (Parent (Formal)));\n          else\n@@ -1892,7 +1894,7 @@ package body Exp_Disp is\n              Parameter_Type => New_Occurrence_Of (Ftyp, Loc),\n              Expression => Expr));\n \n-         if not Is_Predefined_Dispatching_Operation (Prim) then\n+         if not Is_Predef_Op then\n             Next_Formal (Iface_Formal);\n          end if;\n \n@@ -4061,8 +4063,7 @@ package body Exp_Disp is\n                           Alias (Prim);\n \n                      else\n-                        Expand_Interface_Thunk\n-                          (Ultimate_Alias (Prim), Thunk_Id, Thunk_Code);\n+                        Expand_Interface_Thunk (Prim, Thunk_Id, Thunk_Code);\n \n                         if Present (Thunk_Id) then\n                            Append_To (Result, Thunk_Code);"}, {"sha": "1a5888b7c449541a4c83a3ed418bad980523fc6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4faf522bacd66cd03826c645b30c68f0fd785177/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4faf522bacd66cd03826c645b30c68f0fd785177/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4faf522bacd66cd03826c645b30c68f0fd785177", "patch": "@@ -1,3 +1,7 @@\n+2018-11-14  Javier Miranda  <miranda@adacore.com>\n+\n+\t* gnat.dg/equal5.adb, gnat.dg/equal5.ads: New testcase.\n+\n 2018-11-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/compile_time_error1.adb,"}, {"sha": "d98cff8cea6b7bbe8a3ee95d639282937ddd8a58", "filename": "gcc/testsuite/gnat.dg/equal5.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4faf522bacd66cd03826c645b30c68f0fd785177/gcc%2Ftestsuite%2Fgnat.dg%2Fequal5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4faf522bacd66cd03826c645b30c68f0fd785177/gcc%2Ftestsuite%2Fgnat.dg%2Fequal5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal5.adb?ref=4faf522bacd66cd03826c645b30c68f0fd785177", "patch": "@@ -0,0 +1,13 @@\n+--  { dg-do compile }\n+\n+package body Equal5 is\n+   function \"=\"\n+     (Left  : Eq_Parent;\n+      Right : Eq_Parent) return Boolean is (True);\n+\n+   procedure Op (Obj : Child_6) is null;\n+\n+   function Equals\n+     (Left  : Child_6;\n+      Right : Child_6) return Boolean is (True);\n+end Equal5;"}, {"sha": "0bf3be0bf7f43788a34e2e2396bc81375df488bf", "filename": "gcc/testsuite/gnat.dg/equal5.ads", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4faf522bacd66cd03826c645b30c68f0fd785177/gcc%2Ftestsuite%2Fgnat.dg%2Fequal5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4faf522bacd66cd03826c645b30c68f0fd785177/gcc%2Ftestsuite%2Fgnat.dg%2Fequal5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal5.ads?ref=4faf522bacd66cd03826c645b30c68f0fd785177", "patch": "@@ -0,0 +1,31 @@\n+package Equal5 is\n+   type Eq_Parent is tagged null record;\n+\n+   function \"=\"\n+     (Left  : Eq_Parent;\n+      Right : Eq_Parent) return Boolean;\n+\n+   type Eq_Iface is interface;\n+\n+   function \"=\"\n+     (Left  : Eq_Iface;\n+      Right : Eq_Iface) return Boolean is abstract;\n+   procedure Op (Obj : Eq_Iface) is abstract;\n+\n+   -----------------\n+   -- Derivations --\n+   -----------------\n+\n+   type Child_6 is new Eq_Parent and Eq_Iface with null record;\n+\n+   procedure Op (Obj : Child_6);\n+\n+   function Equals\n+     (Left  : Child_6;\n+      Right : Child_6) return Boolean;\n+\n+   function \"=\"\n+     (Left  : Child_6;\n+      Right : Child_6) return Boolean renames Equals;  --  Test\n+\n+end Equal5;"}]}