{"sha": "1f52178b3a8510309c5b8f739f6e74fff73895e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY1MjE3OGIzYTg1MTAzMDljNWI4ZjczOWY2ZTc0ZmZmNzM4OTVlNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-25T03:52:42Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-25T03:52:42Z"}, "message": "c-common.h: Fix comment typos.\n\n\t* c-common.h: Fix comment typos.\n\t* c-decl.c: Likewise.\n\t* cgraphunit.c: Likewise.\n\t* combine.c: Likewise.\n\t* et-forest.c: Likewise.\n\t* flow.c: Likewise.\n\t* function.c: Likewise.\n\t* ifcvt.c: Likewise.\n\t* integrate.c: Likewise.\n\t* jump.c: Likewise.\n\t* postreload.c: Likewise.\n\t* varray.c: Likewise.\n\nFrom-SVN: r76539", "tree": {"sha": "bf5e07ce58ea32552b2f08730c4b206c218b96ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5e07ce58ea32552b2f08730c4b206c218b96ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f52178b3a8510309c5b8f739f6e74fff73895e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f52178b3a8510309c5b8f739f6e74fff73895e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f52178b3a8510309c5b8f739f6e74fff73895e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f52178b3a8510309c5b8f739f6e74fff73895e5/comments", "author": null, "committer": null, "parents": [{"sha": "56ae131655af9274170eb9766c16ae034403a2bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ae131655af9274170eb9766c16ae034403a2bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56ae131655af9274170eb9766c16ae034403a2bc"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "0fcc6d9596881172cabbb97b2286cee3c9746746", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -1,3 +1,18 @@\n+2004-01-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-common.h: Fix comment typos.\n+\t* c-decl.c: Likewise.\n+\t* cgraphunit.c: Likewise.\n+\t* combine.c: Likewise.\n+\t* et-forest.c: Likewise.\n+\t* flow.c: Likewise.\n+\t* function.c: Likewise.\n+\t* ifcvt.c: Likewise.\n+\t* integrate.c: Likewise.\n+\t* jump.c: Likewise.\n+\t* postreload.c: Likewise.\n+\t* varray.c: Likewise.\n+\n 2004-01-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* doc/frontends.texi: Update copyright."}, {"sha": "aec0fc569e0c5b0b6de903232f70951382fb3a63", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -206,7 +206,7 @@ struct c_common_identifier GTY(())\n \n #define default_function_type\t\tc_global_trees[CTI_DEFAULT_FUNCTION_TYPE]\n \n-/* g77 integer types, which which must be kept in sync with f/com.h */\n+/* g77 integer types, which must be kept in sync with f/com.h */\n #define g77_integer_type_node\t\tc_global_trees[CTI_G77_INTEGER_TYPE]\n #define g77_uinteger_type_node\t\tc_global_trees[CTI_G77_UINTEGER_TYPE]\n #define g77_longint_type_node\t\tc_global_trees[CTI_G77_LONGINT_TYPE]"}, {"sha": "6dd6bc09272bb581e7f08b525e8a007c3051b428", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -792,7 +792,7 @@ match_builtin_function_types (tree newtype, tree oldtype)\n   return build_type_attribute_variant (trytype, TYPE_ATTRIBUTES (oldtype));\n }\n \n-/* Subroutine of diagnose_mismathed_decls.  Check for function type\n+/* Subroutine of diagnose_mismatched_decls.  Check for function type\n    mismatch involving an empty arglist vs a nonempty one and give clearer\n    diagnostics. */\n static void"}, {"sha": "3a7dcb3a4dc7583a7ba333e1526b61c82ed18807", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -844,7 +844,7 @@ cgraph_remove_unreachable_nodes (void)\n   /* Remove unreachable nodes.  Extern inline functions need special care;\n      Unreachable extern inline functions shall be removed.\n      Reachable extern inline functions we never inlined shall get their bodies\n-     elliminated\n+     eliminated.\n      Reachable extern inline functions we sometimes inlined will be turned into\n      unanalyzed nodes so they look like for true extern functions to the rest\n      of code.  */"}, {"sha": "f84c277b2397279f45bbae2d9ef50594b1ab7dd8", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -2467,7 +2467,7 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n \t\t\tundobuf.other_insn, NULL_RTX);\n     }\n #ifdef HAVE_cc0\n-  /* If I2 is the setter CC0 and I3 is the user CC0 then check whether\n+  /* If I2 is the CC0 setter and I3 is the CC0 user then check whether\n      they are adjacent to each other or not.  */\n   {\n     rtx p = prev_nonnote_insn (i3);"}, {"sha": "77194c630686d54e60b7cbbd3b71f2d014ce0de6", "filename": "gcc/et-forest.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fet-forest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fet-forest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fet-forest.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -37,7 +37,7 @@ Boston, MA 02111-1307, USA.\n #include \"basic-block.h\"\n #endif\n \n-/* The occurence of a node in the et tree.  */\n+/* The occurrence of a node in the et tree.  */\n struct et_occ\n {\n   struct et_node *of;\t\t/* The node.  */\n@@ -51,7 +51,7 @@ struct et_occ\n   int min;\t\t\t/* The minimum value of the depth in the subtree\n \t\t\t\t   is obtained by adding sum of depth fields\n \t\t\t\t   on the path to the root.  */\n-  struct et_occ *min_occ;\t/* The occurence in the subtree with the minimal\n+  struct et_occ *min_occ;\t/* The occurrence in the subtree with the minimal\n \t\t\t\t   depth.  */\n };\n \n@@ -112,7 +112,7 @@ set_next (struct et_occ *occ, struct et_occ *t)\n     t->parent = occ;\n }\n \n-/* Recompute minimum for occurence OCC.  */\n+/* Recompute minimum for occurrence OCC.  */\n \n static inline void\n et_recomp_min (struct et_occ *occ)\n@@ -310,7 +310,7 @@ check_path_after (struct et_occ *occ)\n \n #endif\n \n-/* Splay the occurence OCC to the root of the tree.  */\n+/* Splay the occurrence OCC to the root of the tree.  */\n \n static void\n et_splay (struct et_occ *occ)\n@@ -452,7 +452,7 @@ et_splay (struct et_occ *occ)\n #endif\n }\n \n-/* Create a new et tree occurence of NODE.  */\n+/* Create a new et tree occurrence of NODE.  */\n \n static struct et_occ *\n et_new_occ (struct et_node *node)"}, {"sha": "dbd8250360923cf167da45655ddb5ba2c59642b2", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -468,7 +468,7 @@ life_analysis (rtx f, FILE *file, int flags)\n \n   free_basic_block_vars (1);\n \n-  /* Removing dead insns should've made jumptables really dead.  */\n+  /* Removing dead insns should have made jumptables really dead.  */\n   delete_dead_jumptables ();\n }\n "}, {"sha": "f4c90b5cdc346213a52bb291ac6e53bcfa676770", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -269,7 +269,7 @@ static tree blocks_nreverse (tree);\n static int all_blocks (tree, tree *);\n static tree *get_block_vector (tree, int *);\n extern tree debug_find_var_in_block_tree (tree, tree);\n-/* We always define `record_insns' even if its not used so that we\n+/* We always define `record_insns' even if it's not used so that we\n    can always export `prologue_epilogue_contains'.  */\n static void record_insns (rtx, varray_type *) ATTRIBUTE_UNUSED;\n static int contains (rtx, varray_type);"}, {"sha": "ffcb0016298b66a139be20c394527134c1b9e066", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -1964,7 +1964,7 @@ noce_process_if_block (struct ce_if_block * ce_info)\n     }\n \n   /* Disallow the \"if (...) x = a;\" form (with an implicit \"else x = x;\")\n-     for most optimizations if writing to x may trap, i.e. its a memory\n+     for most optimizations if writing to x may trap, i.e. it's a memory\n      other than a static var or a stack slot.  */\n   if (! set_b\n       && GET_CODE (orig_x) == MEM"}, {"sha": "82e8114214bc57d50aa9e7ec9dca30814e13e8d9", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -191,7 +191,7 @@ function_cannot_inline_p (tree fndecl)\n   if (current_function_cannot_inline)\n     return current_function_cannot_inline;\n \n-  /* If its not even close, don't even look.  */\n+  /* If it's not even close, don't even look.  */\n   if (get_max_uid () > 3 * max_insns)\n     return N_(\"function too large to be inline\");\n "}, {"sha": "f62d2629ccc18f1fb08684fe00cc2b4e6c640db8", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -1051,7 +1051,7 @@ simplejump_p (rtx insn)\n /* Return nonzero if INSN is a (possibly) conditional jump\n    and nothing more.\n \n-   Use this function is deprecated, since we need to support combined\n+   Use of this function is deprecated, since we need to support combined\n    branch and compare insns.  Use any_condjump_p instead whenever possible.  */\n \n int"}, {"sha": "7b7e3d2cfddd1e4eabbe66f7aa32a3bd597e8711", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -410,7 +410,7 @@ reload_cse_simplify_operands (rtx insn, rtx testreg)\n \t{\n \t  rtx set = single_set (insn);\n \n-\t  /* We might have multiple sets, some of which do implict\n+\t  /* We might have multiple sets, some of which do implicit\n \t     extension.  Punt on this for now.  */\n \t  if (! set)\n \t    continue;"}, {"sha": "9c70b9f6dad00bdd360e5067b28b1ae39a759e4e", "filename": "gcc/varray.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fvarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f52178b3a8510309c5b8f739f6e74fff73895e5/gcc%2Fvarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.c?ref=1f52178b3a8510309c5b8f739f6e74fff73895e5", "patch": "@@ -33,7 +33,7 @@\n \n #ifdef GATHER_STATISTICS\n \n-/* Store infromation about each particular varray.  */\n+/* Store information about each particular varray.  */\n struct varray_descriptor\n {\n   const char *name;"}]}