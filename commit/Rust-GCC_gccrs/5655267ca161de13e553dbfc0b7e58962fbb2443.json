{"sha": "5655267ca161de13e553dbfc0b7e58962fbb2443", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY1NTI2N2NhMTYxZGUxM2U1NTNkYmZjMGI3ZTU4OTYyZmJiMjQ0Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-13T20:11:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-13T20:11:20Z"}, "message": "Pass empty class parameters like C.\n\n\t* call.c (pass_as_empty_struct, empty_class_arg): New.\n\t(type_passed_as, build_x_va_arg): Use pass_as_empty_struct.\n\t(build_call_a): Use empty_class_arg.\n\t* cp-tree.h (CPTI_EMPTY_STRUCT, empty_struct_type): New.\n\t* decl.c (cxx_init_decl_processing): Create empty_struct_type.\n\nFrom-SVN: r234959", "tree": {"sha": "e3b6ab9a03bc4e6ddada960bd1a94788283c70ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3b6ab9a03bc4e6ddada960bd1a94788283c70ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5655267ca161de13e553dbfc0b7e58962fbb2443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5655267ca161de13e553dbfc0b7e58962fbb2443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5655267ca161de13e553dbfc0b7e58962fbb2443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5655267ca161de13e553dbfc0b7e58962fbb2443/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88b5d499b5bc3e18c87917aedb817c98b027f47a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b5d499b5bc3e18c87917aedb817c98b027f47a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b5d499b5bc3e18c87917aedb817c98b027f47a"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "28541bc7857ee33b2498860835d8e0ade4a43052", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5655267ca161de13e553dbfc0b7e58962fbb2443/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5655267ca161de13e553dbfc0b7e58962fbb2443/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5655267ca161de13e553dbfc0b7e58962fbb2443", "patch": "@@ -1,3 +1,12 @@\n+2016-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPass empty class parameters like C.\n+\t* call.c (pass_as_empty_struct, empty_class_arg): New.\n+\t(type_passed_as, build_x_va_arg): Use pass_as_empty_struct.\n+\t(build_call_a): Use empty_class_arg.\n+\t* cp-tree.h (CPTI_EMPTY_STRUCT, empty_struct_type): New.\n+\t* decl.c (cxx_init_decl_processing): Create empty_struct_type.\n+\n 2016-04-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/70627"}, {"sha": "84b62436da3aa460c52d6d929b93636b8939df69", "filename": "gcc/cp/call.c", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5655267ca161de13e553dbfc0b7e58962fbb2443/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5655267ca161de13e553dbfc0b7e58962fbb2443/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5655267ca161de13e553dbfc0b7e58962fbb2443", "patch": "@@ -214,6 +214,8 @@ static void add_candidates (tree, tree, const vec<tree, va_gc> *, tree, tree,\n \t\t\t    tsubst_flags_t);\n static conversion *merge_conversion_sequences (conversion *, conversion *);\n static tree build_temp (tree, tree, int, diagnostic_t *, tsubst_flags_t);\n+static bool pass_as_empty_struct (tree type);\n+static tree empty_class_arg (tree);\n \n /* Returns nonzero iff the destructor name specified in NAME matches BASETYPE.\n    NAME can take many forms...  */\n@@ -383,12 +385,11 @@ build_call_a (tree function, int n, tree *argarray)\n     for (i = 0; i < n; i++)\n       {\n \ttree arg = CALL_EXPR_ARG (function, i);\n-\tif (is_empty_class (TREE_TYPE (arg))\n-\t    && ! TREE_ADDRESSABLE (TREE_TYPE (arg)))\n+\ttree type = TREE_TYPE (arg);\n+\tif (is_really_empty_class (type)\n+\t    && ! TREE_ADDRESSABLE (type))\n \t  {\n-\t    tree t = build0 (EMPTY_CLASS_EXPR, TREE_TYPE (arg));\n-\t    arg = build2 (COMPOUND_EXPR, TREE_TYPE (t), arg, t);\n-\t    CALL_EXPR_ARG (function, i) = arg;\n+\t    CALL_EXPR_ARG (function, i) = empty_class_arg (arg);\n \t  }\n       }\n \n@@ -6872,6 +6873,14 @@ build_x_va_arg (source_location loc, tree expr, tree type)\n       expr = build_va_arg (loc, expr, ref);\n       return convert_from_reference (expr);\n     }\n+  else if (is_really_empty_class (type) && !TREE_ADDRESSABLE (type))\n+    {\n+      /* Do the reverse of empty_class_arg.  */\n+      tree etype = pass_as_empty_struct (type) ? empty_struct_type : type;\n+      expr = build_va_arg (loc, expr, etype);\n+      tree ec = build0 (EMPTY_CLASS_EXPR, type);\n+      return build2 (COMPOUND_EXPR, type, expr, ec);\n+    }\n \n   return build_va_arg (loc, expr, type);\n }\n@@ -6968,6 +6977,34 @@ convert_default_arg (tree type, tree arg, tree fn, int parmnum,\n   return arg;\n }\n \n+/* Return true iff TYPE should be passed and returned as a size 0 type rather\n+   than its normal size, for compatibility with C.  */\n+\n+static bool\n+pass_as_empty_struct (tree type)\n+{\n+  return (abi_version_at_least (10)\n+\t  && type != error_mark_node\n+\t  && COMPLETE_TYPE_P (type)\n+\t  && !TREE_ADDRESSABLE (type)\n+\t  && is_really_empty_class (type));\n+}\n+\n+/* Adjust the value VAL of empty class type TYPE for argument passing.\n+   Keep this synced with build_x_va_arg.  */\n+\n+static tree\n+empty_class_arg (tree val)\n+{\n+  /* Don't pass empty class objects by value.  This is useful\n+     for tags in STL, which are used to control overload resolution.\n+     We don't need to handle other cases of copying empty classes.  */\n+  tree type = TREE_TYPE (val);\n+  tree etype = pass_as_empty_struct (type) ? empty_struct_type : type;\n+  tree empty = build0 (EMPTY_CLASS_EXPR, etype);\n+  return build2 (COMPOUND_EXPR, etype, val, empty);\n+}\n+\n /* Returns the type which will really be used for passing an argument of\n    type TYPE.  */\n \n@@ -6986,6 +7023,8 @@ type_passed_as (tree type)\n \t   && COMPLETE_TYPE_P (type)\n \t   && tree_int_cst_lt (TYPE_SIZE (type), TYPE_SIZE (integer_type_node)))\n     type = integer_type_node;\n+  else if (pass_as_empty_struct (type))\n+    type = empty_struct_type;\n \n   return type;\n }"}, {"sha": "faea452531c66504b3cbe99cb62196d35fde4c2a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5655267ca161de13e553dbfc0b7e58962fbb2443/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5655267ca161de13e553dbfc0b7e58962fbb2443/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5655267ca161de13e553dbfc0b7e58962fbb2443", "patch": "@@ -1150,6 +1150,8 @@ enum cp_tree_index\n     CPTI_NULLPTR,\n     CPTI_NULLPTR_TYPE,\n \n+    CPTI_EMPTY_STRUCT,\n+\n     CPTI_MAX\n };\n \n@@ -1185,6 +1187,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n #define current_aggr\t\t\tcp_global_trees[CPTI_AGGR_TAG]\n #define nullptr_node\t\t\tcp_global_trees[CPTI_NULLPTR]\n #define nullptr_type_node\t\tcp_global_trees[CPTI_NULLPTR_TYPE]\n+#define empty_struct_type\t\tcp_global_trees[CPTI_EMPTY_STRUCT]\n \n /* We cache these tree nodes so as to call get_identifier less\n    frequently.  */"}, {"sha": "5ca426bbd03c32b7157d8a223131d57d7133a169", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5655267ca161de13e553dbfc0b7e58962fbb2443/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5655267ca161de13e553dbfc0b7e58962fbb2443/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5655267ca161de13e553dbfc0b7e58962fbb2443", "patch": "@@ -4180,6 +4180,10 @@ cxx_init_decl_processing (void)\n     nullptr_node = build_int_cst (nullptr_type_node, 0);\n   }\n \n+  empty_struct_type = make_node (RECORD_TYPE);\n+  finish_builtin_struct (empty_struct_type, \"__empty_struct\",\n+\t\t\t NULL_TREE, NULL_TREE);\n+\n   abort_fndecl\n     = build_library_fn_ptr (\"__cxa_pure_virtual\", void_ftype,\n \t\t\t    ECF_NORETURN | ECF_NOTHROW);"}]}