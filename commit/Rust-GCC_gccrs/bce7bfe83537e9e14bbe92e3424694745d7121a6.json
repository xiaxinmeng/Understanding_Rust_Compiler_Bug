{"sha": "bce7bfe83537e9e14bbe92e3424694745d7121a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNlN2JmZTgzNTM3ZTllMTRiYmU5MmUzNDI0Njk0NzQ1ZDcxMjFhNg==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2001-08-27T21:29:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-27T21:29:15Z"}, "message": "* flow.c (verify_flow_info): Use checksums to verify edges.\n\nFrom-SVN: r45212", "tree": {"sha": "8aa6a9b0a909d575b8f77a1862cef46dd2934d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8aa6a9b0a909d575b8f77a1862cef46dd2934d94"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bce7bfe83537e9e14bbe92e3424694745d7121a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce7bfe83537e9e14bbe92e3424694745d7121a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce7bfe83537e9e14bbe92e3424694745d7121a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce7bfe83537e9e14bbe92e3424694745d7121a6/comments", "author": null, "committer": null, "parents": [{"sha": "ce4a5723b61d7be5cfd6d6cab6165aefcae9ceff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4a5723b61d7be5cfd6d6cab6165aefcae9ceff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4a5723b61d7be5cfd6d6cab6165aefcae9ceff"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "7e35852c2a982003182010abe86d4bff90fd09ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce7bfe83537e9e14bbe92e3424694745d7121a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce7bfe83537e9e14bbe92e3424694745d7121a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bce7bfe83537e9e14bbe92e3424694745d7121a6", "patch": "@@ -1,3 +1,7 @@\n+2001-08-27  Roman Zippel <zippel@linux-m68k.org>\n+\n+\t* flow.c (verify_flow_info): Use checksums to verify edges.\n+\n 2001-08-27  Richard Henderson  <rth@redhat.com>\n \n \t* genautomata.c (expand_automata): Always create a description."}, {"sha": "f1e7a6c3c7bfb59b246641ed41d606d9f900459c", "filename": "gcc/flow.c", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce7bfe83537e9e14bbe92e3424694745d7121a6/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce7bfe83537e9e14bbe92e3424694745d7121a6/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=bce7bfe83537e9e14bbe92e3424694745d7121a6", "patch": "@@ -8340,12 +8340,14 @@ verify_flow_info ()\n   const rtx rtx_first = get_insns ();\n   rtx last_head = get_last_insn ();\n   basic_block *bb_info, *last_visited;\n+  size_t *edge_checksum;\n   rtx x;\n   int i, last_bb_num_seen, num_bb_notes, err = 0;\n \n   bb_info = (basic_block *) xcalloc (max_uid, sizeof (basic_block));\n   last_visited = (basic_block *) xcalloc (n_basic_blocks + 2,\n \t\t\t\t\t  sizeof (basic_block));\n+  edge_checksum = (size_t *) xcalloc (n_basic_blocks + 2, sizeof (size_t));\n \n   for (i = n_basic_blocks - 1; i >= 0; i--)\n     {\n@@ -8396,9 +8398,8 @@ verify_flow_info ()\n   for (i = n_basic_blocks - 1; i >= 0; i--)\n     {\n       basic_block bb = BASIC_BLOCK (i);\n-      /* Check correctness of edge lists.  */\n-      edge e;\n       int has_fallthru = 0;\n+      edge e;\n \n       e = bb->succ;\n       while (e)\n@@ -8447,17 +8448,7 @@ verify_flow_info ()\n \t      fprintf (stderr, \"\\n\");\n \t      err = 1;\n \t    }\n-\t  if (e->dest != EXIT_BLOCK_PTR)\n-\t    {\n-\t      edge e2 = e->dest->pred;\n-\t      while (e2 && e2 != e)\n-\t\te2 = e2->pred_next;\n-\t      if (!e2)\n-\t\t{\n-\t\t  error (\"Basic block %i edge lists are corrupted\", bb->index);\n-\t\t  err = 1;\n-\t\t}\n-\t    }\n+\t  edge_checksum[e->dest->index + 2] += (size_t) e;\n \t  e = e->succ_next;\n \t}\n       if (!has_fallthru)\n@@ -8489,17 +8480,7 @@ verify_flow_info ()\n \t      fputc ('\\n', stderr);\n \t      err = 1;\n \t    }\n-\t  if (e->src != ENTRY_BLOCK_PTR)\n-\t    {\n-\t      edge e2 = e->src->succ;\n-\t      while (e2 && e2 != e)\n-\t\te2 = e2->succ_next;\n-\t      if (!e2)\n-\t\t{\n-\t\t  error (\"Basic block %i edge lists are corrupted\", bb->index);\n-\t\t  err = 1;\n-\t\t}\n-\t    }\n+\t  edge_checksum[e->dest->index + 2] -= (size_t) e;\n \t  e = e->pred_next;\n \t}\n \n@@ -8556,6 +8537,22 @@ verify_flow_info ()\n \t}\n     }\n \n+  /* Complete edge checksumming for ENTRY and EXIT.  */\n+  {\n+    edge e;\n+    for (e = ENTRY_BLOCK_PTR->succ; e ; e = e->succ_next)\n+      edge_checksum[e->dest->index + 2] += (size_t) e;\n+    for (e = EXIT_BLOCK_PTR->pred; e ; e = e->pred_next)\n+      edge_checksum[e->dest->index + 2] -= (size_t) e;\n+  }\n+\n+  for (i = -2; i < n_basic_blocks; ++i)\n+    if (edge_checksum[i + 2])\n+      {\n+\terror (\"Basic block %i edge lists are corrupted\", i);\n+\terr = 1;\n+      }\n+\n   last_bb_num_seen = -1;\n   num_bb_notes = 0;\n   x = rtx_first;\n@@ -8617,6 +8614,7 @@ verify_flow_info ()\n   /* Clean up.  */\n   free (bb_info);\n   free (last_visited);\n+  free (edge_checksum);\n }\n \f\n /* Functions to access an edge list with a vector representation."}]}