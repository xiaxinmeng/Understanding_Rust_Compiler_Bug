{"sha": "3ca6351daa2a4e90af9a97085f8fa316b6ede57f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NhNjM1MWRhYTJhNGU5MGFmOWE5NzA4NWY4ZmEzMTZiNmVkZTU3Zg==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2012-09-09T17:20:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-09-09T17:20:42Z"}, "message": "re PR bootstrap/54419 (Compiling libstdc++-v3/src/c++11/random.cc fails on platforms not knowing rdrand)\n\n2012-09-09  Ulrich Drepper  <drepper@gmail.com>\n\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n\t    Jack Howarth  <howarth@bromo.med.uc.edu>\n\n\tPR bootstrap/54419\n\t* acinclude.m4: Define GLIBCXX_CHECK_X86_RDRAND.\n\t* configure.ac: Use GLIBCXX_CHECK_X86_RDRAND to test for rdrand\n\tsupport in assembler.\n\t* src/c++11/random.cc (__x86_rdrand): Depend on _GLIBCXX_X86_RDRAND.\n\t(random_device::_M_init): Likewise.\n\t(random_device::_M_getval): Likewise.\n\t* configure: Regenerated.\n\t* config.h.in: Regenerated.\n\nCo-Authored-By: Dominique d'Humieres <dominiq@lps.ens.fr>\nCo-Authored-By: Jack Howarth <howarth@bromo.med.uc.edu>\n\nFrom-SVN: r191111", "tree": {"sha": "8969affc89fdebd06b8f119befc16b15679f6256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8969affc89fdebd06b8f119befc16b15679f6256"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ca6351daa2a4e90af9a97085f8fa316b6ede57f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca6351daa2a4e90af9a97085f8fa316b6ede57f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca6351daa2a4e90af9a97085f8fa316b6ede57f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef64d158fb3ff94c3e6a290586061f3e5a8983f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef64d158fb3ff94c3e6a290586061f3e5a8983f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef64d158fb3ff94c3e6a290586061f3e5a8983f3"}], "stats": {"total": 88, "additions": 85, "deletions": 3}, "files": [{"sha": "34a9d76db1da0ffb3b343456905389ee764089eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3ca6351daa2a4e90af9a97085f8fa316b6ede57f", "patch": "@@ -1,3 +1,17 @@\n+2012-09-09  Ulrich Drepper  <drepper@gmail.com>\n+\t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\t    Jack Howarth  <howarth@bromo.med.uc.edu>\n+\n+\tPR bootstrap/54419\n+\t* acinclude.m4: Define GLIBCXX_CHECK_X86_RDRAND.\n+\t* configure.ac: Use GLIBCXX_CHECK_X86_RDRAND to test for rdrand\n+\tsupport in assembler.\n+\t* src/c++11/random.cc (__x86_rdrand): Depend on _GLIBCXX_X86_RDRAND.\n+\t(random_device::_M_init): Likewise.\n+\t(random_device::_M_getval): Likewise.\n+\t* configure: Regenerated.\n+\t* config.h.in: Regenerated.\n+\n 2012-09-09  Ulrich Drepper  <drepper@gmail.com>\n \n \t* src/c++11/random.cc (random_device::_M_init): Use new macro"}, {"sha": "267302df660c420663be20898a03c5413a136dff", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=3ca6351daa2a4e90af9a97085f8fa316b6ede57f", "patch": "@@ -3359,6 +3359,26 @@ AC_DEFUN([AC_LC_MESSAGES], [\n   ])\n ])\n \n+dnl\n+dnl Check whether rdrand is supported in the assembler.\n+AC_DEFUN([GLIBCXX_CHECK_X86_RDRAND], [\n+  AC_MSG_CHECKING([for rdrand support in assembler])\n+  AC_CACHE_VAL($ac_cv_x86_rdrand, [\n+  ac_cv_x86_rdrand=no\n+  case \"$target\" in\n+    i?86-*-* | \\\n+    x86_64-*-*)\n+    AC_TRY_COMPILE(, [asm(\"rdrand %eax\");],\n+\t\t[ac_cv_x86_rdrand=yes], [ac_cv_x86_rdrand=no])\n+  esac\n+  ])\n+  if test $ac_cv_x86_rdrand = yes; then\n+    AC_DEFINE(_GLIBCXX_X86_RDRAND, 1,\n+\t\t[ Defined if as can handle rdrand. ])\n+  fi\n+  AC_MSG_RESULT($ac_cv_x86_rdrand)\n+])\n+\n dnl\n dnl Check whether get_nprocs is available in <sys/sysinfo.h>, and define _GLIBCXX_USE_GET_NPROCS.\n dnl"}, {"sha": "075c9f814a8d20c9dcd8ed230e5ab00a48d3e70d", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=3ca6351daa2a4e90af9a97085f8fa316b6ede57f", "patch": "@@ -845,6 +845,9 @@\n /* Define if code specialized for wchar_t should be used. */\n #undef _GLIBCXX_USE_WCHAR_T\n \n+/* Defined if as can handle rdrand. */\n+#undef _GLIBCXX_X86_RDRAND\n+\n /* Define to 1 if mutex_timedlock is available. */\n #undef _GTHREAD_USE_MUTEX_TIMEDLOCK\n "}, {"sha": "d55a9efa0b15a56c8cce1e71c404e4fa68518831", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3ca6351daa2a4e90af9a97085f8fa316b6ede57f", "patch": "@@ -70621,6 +70621,48 @@ $as_echo \"#define _GLIBCXX_LONG_DOUBLE_COMPAT 1\" >>confdefs.h\n esac\n \n \n+# Check if assembler supports rdrand opcode.\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for rdrand support in assembler\" >&5\n+$as_echo_n \"checking for rdrand support in assembler... \" >&6; }\n+  if { as_var=$ac_cv_x86_rdrand; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+  ac_cv_x86_rdrand=no\n+  case \"$target\" in\n+    i?86-*-* | \\\n+    x86_64-*-*)\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+asm(\"rdrand %eax\");\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_x86_rdrand=yes\n+else\n+  ac_cv_x86_rdrand=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  esac\n+\n+fi\n+\n+  if test $ac_cv_x86_rdrand = yes; then\n+\n+$as_echo \"#define _GLIBCXX_X86_RDRAND 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_x86_rdrand\" >&5\n+$as_echo \"$ac_cv_x86_rdrand\" >&6; }\n+\n+\n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n \n   if $GLIBCXX_IS_NATIVE ; then"}, {"sha": "555f380495bc299fb970c5447c4a3d679dd90137", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=3ca6351daa2a4e90af9a97085f8fa316b6ede57f", "patch": "@@ -330,6 +330,9 @@ case \"$target\" in\n esac\n GLIBCXX_CONDITIONAL(GLIBCXX_LDBL_COMPAT, test $ac_ldbl_compat = yes)\n \n+# Check if assembler supports rdrand opcode.\n+GLIBCXX_CHECK_X86_RDRAND\n+\n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n GLIBCXX_CONFIGURE_TESTSUITE\n "}, {"sha": "4342df4d546831e0cbb94f7f9bff8ce44fd1dac3", "filename": "libstdc++-v3/src/c++11/random.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca6351daa2a4e90af9a97085f8fa316b6ede57f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc?ref=3ca6351daa2a4e90af9a97085f8fa316b6ede57f", "patch": "@@ -50,7 +50,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n       return __ret;\n     }\n \n-#if defined __i386__ || defined __x86_64__\n+#if (defined __i386__ || defined __x86_64__) && defined _GLIBCXX_X86_RDRAND\n     unsigned int\n     __attribute__ ((target(\"rdrnd\")))\n     __x86_rdrand(void)\n@@ -75,7 +75,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n \n     if (token == \"default\")\n       {\n-#if defined __i386__ || defined __x86_64__\n+#if (defined __i386__ || defined __x86_64__) && defined _GLIBCXX_X86_RDRAND\n \tunsigned int eax, ebx, ecx, edx;\n \t// Check availability of cpuid and, for now at least, also the\n \t// CPU signature for Intel's\n@@ -118,7 +118,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n   random_device::result_type\n   random_device::_M_getval()\n   {\n-#if (defined __i386__ || defined __x86_64__)\n+#if (defined __i386__ || defined __x86_64__) && defined _GLIBCXX_X86_RDRAND\n     if (! _M_file)\n       return __x86_rdrand();\n #endif"}]}