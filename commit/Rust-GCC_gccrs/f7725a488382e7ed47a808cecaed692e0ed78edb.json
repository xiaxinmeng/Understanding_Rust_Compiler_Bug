{"sha": "f7725a488382e7ed47a808cecaed692e0ed78edb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc3MjVhNDg4MzgyZTdlZDQ3YTgwOGNlY2FlZDY5MmUwZWQ3OGVkYg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-01-10T10:00:05Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2020-01-10T10:00:05Z"}, "message": "IPA-CP: Always access param_ipcp_unit_growth through opt_for_fn\n\n2020-01-10  Martin Jambor  <mjambor@suse.cz>\n\n\t* params.opt (param_ipcp_unit_growth): Mark as Optimization.\n\t* ipa-cp.c (max_new_size): Removed.\n\t(orig_overall_size): New variable.\n\t(get_max_overall_size): New function.\n\t(estimate_local_effects): Use it.  Adjust dump.\n\t(decide_about_value): Likewise.\n\t(ipcp_propagate_stage): Do not calculate max_new_size, just store\n\torig_overall_size.  Adjust dump.\n\t(ipa_cp_c_finalize): Clear orig_overall_size instead of max_new_size.\n\nFrom-SVN: r280099", "tree": {"sha": "c32974af9191c6ad31e3548e52d29378406c6795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c32974af9191c6ad31e3548e52d29378406c6795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7725a488382e7ed47a808cecaed692e0ed78edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7725a488382e7ed47a808cecaed692e0ed78edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7725a488382e7ed47a808cecaed692e0ed78edb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7725a488382e7ed47a808cecaed692e0ed78edb/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de2e08355aa51eb1596cfe674bf1ab1a8fc83976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2e08355aa51eb1596cfe674bf1ab1a8fc83976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de2e08355aa51eb1596cfe674bf1ab1a8fc83976"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "6e9bdd07b38b929f95baed3d6eb18b013441ec51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7725a488382e7ed47a808cecaed692e0ed78edb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7725a488382e7ed47a808cecaed692e0ed78edb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7725a488382e7ed47a808cecaed692e0ed78edb", "patch": "@@ -1,3 +1,15 @@\n+2020-01-10  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* params.opt (param_ipcp_unit_growth): Mark as Optimization.\n+\t* ipa-cp.c (max_new_size): Removed.\n+\t(orig_overall_size): New variable.\n+\t(get_max_overall_size): New function.\n+\t(estimate_local_effects): Use it.  Adjust dump.\n+\t(decide_about_value): Likewise.\n+\t(ipcp_propagate_stage): Do not calculate max_new_size, just store\n+\torig_overall_size.  Adjust dump.\n+\t(ipa_cp_c_finalize): Clear orig_overall_size instead of max_new_size.\n+\n 2020-01-10  Martin Jambor  <mjambor@suse.cz>\n \n \t* params.opt (param_ipa_max_agg_items): Mark as Optimization"}, {"sha": "1c1103ca32b5d09706af723b5d6e862ea7466d62", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7725a488382e7ed47a808cecaed692e0ed78edb/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7725a488382e7ed47a808cecaed692e0ed78edb/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=f7725a488382e7ed47a808cecaed692e0ed78edb", "patch": "@@ -375,7 +375,7 @@ static profile_count max_count;\n \n /* Original overall size of the program.  */\n \n-static long overall_size, max_new_size;\n+static long overall_size, orig_overall_size;\n \n /* Node name to unique clone suffix number map.  */\n static hash_map<const char *, unsigned> *clone_num_suffixes;\n@@ -3420,6 +3420,23 @@ perform_estimation_of_a_value (cgraph_node *node, vec<tree> known_csts,\n   val->local_size_cost = size;\n }\n \n+/* Get the overall limit oof growth based on parameters extracted from growth.\n+   it does not really make sense to mix functions with different overall growth\n+   limits but it is possible and if it happens, we do not want to select one\n+   limit at random.  */\n+\n+static long\n+get_max_overall_size (cgraph_node *node)\n+{\n+  long max_new_size = orig_overall_size;\n+  long large_unit = opt_for_fn (node->decl, param_large_unit_insns);\n+  if (max_new_size < large_unit)\n+    max_new_size = large_unit;\n+  int unit_growth = opt_for_fn (node->decl, param_ipcp_unit_growth);\n+  max_new_size += max_new_size * unit_growth / 100 + 1;\n+  return max_new_size;\n+}\n+\n /* Iterate over known values of parameters of NODE and estimate the local\n    effects in terms of time and size they have.  */\n \n@@ -3482,7 +3499,7 @@ estimate_local_effects (struct cgraph_node *node)\n \t\t\t\t\t   stats.freq_sum, stats.count_sum,\n \t\t\t\t\t   size))\n \t{\n-\t  if (size + overall_size <= max_new_size)\n+\t  if (size + overall_size <= get_max_overall_size (node))\n \t    {\n \t      info->do_clone_for_all_contexts = true;\n \t      overall_size += size;\n@@ -3492,8 +3509,8 @@ estimate_local_effects (struct cgraph_node *node)\n \t\t\t \"known contexts, growth deemed beneficial.\\n\");\n \t    }\n \t  else if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"   Not cloning for all contexts because \"\n-\t\t     \"max_new_size would be reached with %li.\\n\",\n+\t    fprintf (dump_file, \"  Not cloning for all contexts because \"\n+\t\t     \"maximum unit size would be reached with %li.\\n\",\n \t\t     size + overall_size);\n \t}\n       else if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -3885,14 +3902,10 @@ ipcp_propagate_stage (class ipa_topo_info *topo)\n     max_count = max_count.max (node->count.ipa ());\n   }\n \n-  max_new_size = overall_size;\n-  if (max_new_size < param_large_unit_insns)\n-    max_new_size = param_large_unit_insns;\n-  max_new_size += max_new_size * param_ipa_cp_unit_growth / 100 + 1;\n+  orig_overall_size = overall_size;\n \n   if (dump_file)\n-    fprintf (dump_file, \"\\noverall_size: %li, max_new_size: %li\\n\",\n-\t     overall_size, max_new_size);\n+    fprintf (dump_file, \"\\noverall_size: %li\\n\", overall_size);\n \n   propagate_constants_topo (topo);\n   if (flag_checking)\n@@ -5405,11 +5418,11 @@ decide_about_value (struct cgraph_node *node, int index, HOST_WIDE_INT offset,\n       perhaps_add_new_callers (node, val);\n       return false;\n     }\n-  else if (val->local_size_cost + overall_size > max_new_size)\n+  else if (val->local_size_cost + overall_size > get_max_overall_size (node))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"   Ignoring candidate value because \"\n-\t\t \"max_new_size would be reached with %li.\\n\",\n+\t\t \"maximum unit size would be reached with %li.\\n\",\n \t\t val->local_size_cost + overall_size);\n       return false;\n     }\n@@ -5953,6 +5966,6 @@ ipa_cp_c_finalize (void)\n {\n   max_count = profile_count::uninitialized ();\n   overall_size = 0;\n-  max_new_size = 0;\n+  orig_overall_size = 0;\n   ipcp_free_transformation_sum ();\n }"}, {"sha": "25d045c7840b1c21acffbd7770d0dbd2dd744689", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7725a488382e7ed47a808cecaed692e0ed78edb/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7725a488382e7ed47a808cecaed692e0ed78edb/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=f7725a488382e7ed47a808cecaed692e0ed78edb", "patch": "@@ -246,6 +246,10 @@ Maximum pieces that IPA-SRA tracks per formal parameter, as a consequence, also\n Common Joined UInteger Var(param_ipa_sra_ptr_growth_factor) Init(2) Param Optimization\n Maximum allowed growth of number and total size of new parameters that ipa-sra replaces a pointer to an aggregate with.\n \n+-param=ipcp-unit-growth=\n+Common Joined UInteger Var(param_ipcp_unit_growth) Optimization Init(10) Param\n+How much can given compilation unit grow because of the interprocedural constant propagation (in percent).\n+\n -param=ira-loop-reserved-regs=\n Common Joined UInteger Var(param_ira_loop_reserved_regs) Init(2) Param Optimization\n The number of registers in each class kept unused by loop invariant motion."}]}