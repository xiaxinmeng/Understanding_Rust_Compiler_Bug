{"sha": "2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE1ZTlkMTY1ZWY2Y2MyY2IzYjc4M2I1YWExYzRhMzdkZmQxNjZhYQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2009-12-19T02:33:03Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2009-12-19T02:33:03Z"}, "message": "Makefile.in (PLUGIN_HEADERS): Add more headers.\n\n        * Makefile.in (PLUGIN_HEADERS): Add more headers.\n\n        * tree-pass.h (GCC_PASS_LISTS): Define.\n        (PASS_LIST_NO_all_lowering_passes): New enumeration value.\n        (PASS_LIST_NO_all_small_ipa_passes): Likewise.\n        (PASS_LIST_NO_all_regular_ipa_passes): Likewise.\n        (PASS_LIST_NO_all_lto_gen_passes): Likewise.\n        (PASS_LIST_NO_all_passes): Likewise.\n        (PASS_LIST_NUM): Likewise.\n        (gcc_pass_lists): Declare.\n        * passes.c (gcc_pass_lists): Define.\n\nFrom-SVN: r155354", "tree": {"sha": "64645446df1c6d17b691611d925a9573c34adf27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64645446df1c6d17b691611d925a9573c34adf27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa/comments", "author": null, "committer": null, "parents": [{"sha": "dedf9c63c43af91427465267a90db9b1c0840f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dedf9c63c43af91427465267a90db9b1c0840f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dedf9c63c43af91427465267a90db9b1c0840f9c"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "2c21b321a4b4266a3ee8cdcd91bafae349a837e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa", "patch": "@@ -1,3 +1,17 @@\n+2009-12-19  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\t* Makefile.in (PLUGIN_HEADERS): Add more headers.\n+\n+\t* tree-pass.h (GCC_PASS_LISTS): Define.\n+\t(PASS_LIST_NO_all_lowering_passes): New enumeration value.\n+\t(PASS_LIST_NO_all_small_ipa_passes): Likewise.\n+\t(PASS_LIST_NO_all_regular_ipa_passes): Likewise.\n+\t(PASS_LIST_NO_all_lto_gen_passes): Likewise.\n+\t(PASS_LIST_NO_all_passes): Likewise.\n+\t(PASS_LIST_NUM): Likewise.\n+\t(gcc_pass_lists): Declare.\n+\t* passes.c (gcc_pass_lists): Define.\n+\n 2009-12-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (copy_nary): New function."}, {"sha": "10638ef70d4ac96371a69c0a7bf8454c79e3f34c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa", "patch": "@@ -4275,7 +4275,8 @@ PLUGIN_HEADERS = $(TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   tree-iterator.h $(PLUGIN_H) $(TREE_FLOW_H) langhooks.h incpath.h \\\n   tree-ssa-sccvn.h real.h output.h $(IPA_UTILS_H) \\\n   $(C_PRAGMA_H)  $(CPPLIB_H)  $(FUNCTION_H) \\\n-  cppdefault.h flags.h $(MD5_H) params.def params.h prefix.h tree-inline.h\n+  cppdefault.h flags.h $(MD5_H) params.def params.h prefix.h tree-inline.h \\\n+  $(IPA_PROP_H) $(RTL_H) $(TM_P_H) $(CFGLOOP_H) $(EMIT_RTL_H)\n \n # generate the 'build fragment' b-header-vars\n s-header-vars: Makefile"}, {"sha": "fde3379b7c2f5a3e08926d9105067ce42ad78df6", "filename": "gcc/passes.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa", "patch": "@@ -337,6 +337,11 @@ struct rtl_opt_pass pass_postreload =\n struct opt_pass *all_passes, *all_small_ipa_passes, *all_lowering_passes,\n   *all_regular_ipa_passes, *all_lto_gen_passes;\n \n+/* This is used by plugins, and should also be used in register_pass.  */\n+#define DEF_PASS_LIST(LIST) &LIST,\n+struct opt_pass **gcc_pass_lists[] = { GCC_PASS_LISTS NULL };\n+#undef DEF_PASS_LIST\n+\n /* A map from static pass id to optimization pass.  */\n struct opt_pass **passes_by_id;\n int passes_by_id_size;"}, {"sha": "40cfb0f68912334d9d90336aaa423bd44bbf22b6", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=2a5e9d165ef6cc2cb3b783b5aa1c4a37dfd166aa", "patch": "@@ -562,6 +562,27 @@ extern struct gimple_opt_pass pass_convert_switch;\n extern struct opt_pass *all_passes, *all_small_ipa_passes, *all_lowering_passes,\n                        *all_regular_ipa_passes, *all_lto_gen_passes;\n \n+/* Define a list of pass lists so that both passes.c and plugins can easily\n+   find all the pass lists.  */\n+#define GCC_PASS_LISTS \\\n+  DEF_PASS_LIST (all_lowering_passes) \\\n+  DEF_PASS_LIST (all_small_ipa_passes) \\\n+  DEF_PASS_LIST (all_regular_ipa_passes) \\\n+  DEF_PASS_LIST (all_lto_gen_passes) \\\n+  DEF_PASS_LIST (all_passes)\n+\n+#define DEF_PASS_LIST(LIST) PASS_LIST_NO_##LIST,\n+enum\n+{\n+  GCC_PASS_LISTS\n+  PASS_LIST_NUM\n+};\n+#undef DEF_PASS_LIST\n+\n+/* This is used by plugins, and should also be used in\n+   passes.c:register_pass.  */\n+extern struct opt_pass **gcc_pass_lists[];\n+\n /* Current optimization pass.  */\n extern struct opt_pass *current_pass;\n "}]}