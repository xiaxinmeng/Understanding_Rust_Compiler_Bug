{"sha": "0019028b0b585fddd080e626e33c3c4420fbd486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAxOTAyOGIwYjU4NWZkZGQwODBlNjI2ZTMzYzNjNDQyMGZiZDQ4Ng==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2011-10-20T18:07:10Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2011-10-20T18:07:10Z"}, "message": "ishft_3.f90: Update test.\n\n2011-10-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n\t* gfortran.dg/ishft_3.f90:  Update test.\n \n2011-10-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n\t* check.c (less_than_bitsize1): Check |shift| <= bit_size(i).\n\t(gfc_check_ishftc):  Check |shift| <= bit_size(i) and check\n\tthat size is positive.\n\nFrom-SVN: r180264", "tree": {"sha": "97790bb4887f0402df98a32050b17ae9213d8e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97790bb4887f0402df98a32050b17ae9213d8e02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0019028b0b585fddd080e626e33c3c4420fbd486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0019028b0b585fddd080e626e33c3c4420fbd486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0019028b0b585fddd080e626e33c3c4420fbd486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0019028b0b585fddd080e626e33c3c4420fbd486/comments", "author": null, "committer": null, "parents": [{"sha": "86daf6d59d37755f3b73a10bb489e53f6c224a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86daf6d59d37755f3b73a10bb489e53f6c224a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86daf6d59d37755f3b73a10bb489e53f6c224a8c"}], "stats": {"total": 108, "additions": 97, "deletions": 11}, "files": [{"sha": "e58dd112aedc48d57dece3196004541f6734ec9c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0019028b0b585fddd080e626e33c3c4420fbd486/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0019028b0b585fddd080e626e33c3c4420fbd486/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0019028b0b585fddd080e626e33c3c4420fbd486", "patch": "@@ -1,9 +1,16 @@\n-2011-10-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n+2011-10-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/50514\n+\t* check.c (less_than_bitsize1): Check |shift| <= bit_size(i).\n+\t(gfc_check_ishftc):  Check |shift| <= bit_size(i) and check\n+\tthat size is positive.\n+\n+2011-10-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/50524\n \t* resolve.c (resolve_ref): Check return value of resolve_substring().\n \n-2011-10-30  Steven G. Kargl  <kargl@gcc.gnu.org>\n+2011-10-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* io.c (match_dt_format): Match a user-defined operator or a kind\n \ttype prefixed string."}, {"sha": "9aaad01ca36144d268ca2dae9402ea5baf837818", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0019028b0b585fddd080e626e33c3c4420fbd486/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0019028b0b585fddd080e626e33c3c4420fbd486/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=0019028b0b585fddd080e626e33c3c4420fbd486", "patch": "@@ -286,6 +286,22 @@ less_than_bitsize1 (const char *arg1, gfc_expr *expr1, const char *arg2,\n     {\n       gfc_extract_int (expr2, &i2);\n       i3 = gfc_validate_kind (BT_INTEGER, expr1->ts.kind, false);\n+ \n+      /* For ISHFT[C], check that |shift| <= bit_size(i).  */\n+      if (arg2 == NULL)\n+\t{\n+\t  if (i2 < 0)\n+\t    i2 = -i2;\n+\n+\t  if (i2 > gfc_integer_kinds[i3].bit_size)\n+\t    {\n+\t      gfc_error (\"The absolute value of SHIFT at %L must be less \"\n+\t\t\t \"than or equal to BIT_SIZE('%s')\",\n+\t\t\t &expr2->where, arg1);\n+\t      return FAILURE;\n+\t    }\n+\t}\n+\n       if (or_equal)\n \t{\n \t  if (i2 > gfc_integer_kinds[i3].bit_size)\n@@ -1927,6 +1943,9 @@ gfc_check_ishft (gfc_expr *i, gfc_expr *shift)\n       || type_check (shift, 1, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n+  if (less_than_bitsize1 (\"I\", i, NULL, shift, true) == FAILURE)\n+    return FAILURE;\n+\n   return SUCCESS;\n }\n \n@@ -1938,7 +1957,35 @@ gfc_check_ishftc (gfc_expr *i, gfc_expr *shift, gfc_expr *size)\n       || type_check (shift, 1, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n-  if (size != NULL && type_check (size, 2, BT_INTEGER) == FAILURE)\n+  if (size != NULL) \n+    {\n+      int i2, i3;\n+\n+      if (type_check (size, 2, BT_INTEGER) == FAILURE)\n+\treturn FAILURE;\n+\n+      if (less_than_bitsize1 (\"I\", i, \"SIZE\", size, true) == FAILURE)\n+\treturn FAILURE;\n+\n+      gfc_extract_int (size, &i3);\n+      if (i3 <= 0)\n+\t{\n+\t  gfc_error (\"SIZE at %L must be positive\", &size->where);\n+\t  return FAILURE;\n+\t}\n+\n+      gfc_extract_int (shift, &i2);\n+      if (i2 < 0)\n+\ti2 = -i2;\n+\n+      if (i2 > i3)\n+\t{\n+\t  gfc_error (\"The absolute value of SHIFT at %L must be less than \"\n+\t\t     \"or equal to SIZE at %L\", &shift->where, &size->where);\n+\t  return FAILURE;\n+\t}\n+    }\n+  else if (less_than_bitsize1 (\"I\", i, NULL, shift, true) == FAILURE)\n     return FAILURE;\n \n   return SUCCESS;"}, {"sha": "e5db96a1939c36fa17bac76cc6947c45d78fd5c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0019028b0b585fddd080e626e33c3c4420fbd486/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0019028b0b585fddd080e626e33c3c4420fbd486/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0019028b0b585fddd080e626e33c3c4420fbd486", "patch": "@@ -1,3 +1,8 @@\n+2011-10-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/50514\n+\t* gfortran.dg/ishft_3.f90:  Update test.\n+\n 2011-10-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/50524"}, {"sha": "626e71ce44ef7347435821fc1f01f9e9a1cd1243", "filename": "gcc/testsuite/gfortran.dg/ishft_3.f90", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0019028b0b585fddd080e626e33c3c4420fbd486/gcc%2Ftestsuite%2Fgfortran.dg%2Fishft_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0019028b0b585fddd080e626e33c3c4420fbd486/gcc%2Ftestsuite%2Fgfortran.dg%2Fishft_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fishft_3.f90?ref=0019028b0b585fddd080e626e33c3c4420fbd486", "patch": "@@ -1,11 +1,38 @@\n ! { dg-do compile }\n+! PR fortran/50514\n program ishft_3\n-  integer i, j\n-  write(*,*) ishftc( 3, 2, 3 )\n-  write(*,*) ishftc( 3, 2, i )\n-  write(*,*) ishftc( 3, i, j )\n-  write(*,*) ishftc( 3, 128 )     ! { dg-error \"exceeds BIT_SIZE of first\" }\n-  write(*,*) ishftc( 3, 0, 128 )  ! { dg-error \"exceeds BIT_SIZE of first\" }\n-  write(*,*) ishftc( 3, 0, 0 )    ! { dg-error \"Invalid third argument\" }\n-  write(*,*) ishftc( 3, 3, 2 )    ! { dg-error \"exceeds third argument\" }\n+\n+   implicit none\n+\n+   integer j, m\n+\n+   m = 42\n+   !\n+   ! These should compile.\n+   !\n+   j = ishft(m, 16)\n+   j = ishft(m, -16)\n+   j = ishftc(m, 16)\n+   j = ishftc(m, -16)\n+   !\n+   ! These should issue an error.\n+   !\n+   j = ishft(m, 640)    ! { dg-error \"absolute value of SHIFT\" }\n+   j = ishftc(m, 640)   ! { dg-error \"absolute value of SHIFT\" }\n+   j = ishft(m, -640)   ! { dg-error \"absolute value of SHIFT\" }\n+   j = ishftc(m, -640)  ! { dg-error \"absolute value of SHIFT\" }\n+\n+   ! abs(SHIFT) must be <= SIZE\n+\n+   j = ishftc(m,  1, 2)\n+   j = ishftc(m,  1, 2)\n+   j = ishftc(m, -1, 2)\n+   j = ishftc(m, -1, 2)\n+\n+   j = ishftc(m,  10, 2)! { dg-error \"absolute value of SHIFT\" }\n+   j = ishftc(m,  10, 2)! { dg-error \"absolute value of SHIFT\" }\n+   j = ishftc(m, -10, 2)! { dg-error \"absolute value of SHIFT\" }\n+   j = ishftc(m, -10, 2)! { dg-error \"absolute value of SHIFT\" }\n+\n+   j = ishftc(m, 1, -2) ! { dg-error \"must be positive\" }\n end program"}]}