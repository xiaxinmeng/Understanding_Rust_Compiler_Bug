{"sha": "edb9b69e5730fc6584899297bf5688282de6a1c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRiOWI2OWU1NzMwZmM2NTg0ODk5Mjk3YmY1Njg4MjgyZGU2YTFjNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-04-30T06:54:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-04-30T06:54:02Z"}, "message": "re PR testsuite/48809 (switch statement optimization error)\n\n\tPR tree-optimization/48809\n\t* tree-switch-conversion.c (build_arrays): Compute tidx in unsigned\n\ttype.\n\t(gen_inbound_check): Don't compute index_expr - range_min in utype\n\tagain, instead reuse SSA_NAME initialized in build_arrays.\n\tRemove two useless gsi_for_stmt calls.\n\n\t* gcc.c-torture/execute/pr48809.c: New test.\n\nFrom-SVN: r173207", "tree": {"sha": "976910c9fe824653665e5ee392c868d8cf10200d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/976910c9fe824653665e5ee392c868d8cf10200d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edb9b69e5730fc6584899297bf5688282de6a1c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edb9b69e5730fc6584899297bf5688282de6a1c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edb9b69e5730fc6584899297bf5688282de6a1c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edb9b69e5730fc6584899297bf5688282de6a1c7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6545a3d943012f72ba5d0ed49471412b0e308e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6545a3d943012f72ba5d0ed49471412b0e308e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6545a3d943012f72ba5d0ed49471412b0e308e8"}], "stats": {"total": 134, "additions": 92, "deletions": 42}, "files": [{"sha": "ee2340471ba2508f1d7b63fc66e959180989a115", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb9b69e5730fc6584899297bf5688282de6a1c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb9b69e5730fc6584899297bf5688282de6a1c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edb9b69e5730fc6584899297bf5688282de6a1c7", "patch": "@@ -1,3 +1,12 @@\n+2011-04-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/48809\n+\t* tree-switch-conversion.c (build_arrays): Compute tidx in unsigned\n+\ttype.\n+\t(gen_inbound_check): Don't compute index_expr - range_min in utype\n+\tagain, instead reuse SSA_NAME initialized in build_arrays.\n+\tRemove two useless gsi_for_stmt calls.\n+\n 2011-04-29  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-threadedge.c (thread_across_edge): Add missing return."}, {"sha": "5eaa00da46af22d04c32b644c9fb7b50c23ec878", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb9b69e5730fc6584899297bf5688282de6a1c7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb9b69e5730fc6584899297bf5688282de6a1c7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=edb9b69e5730fc6584899297bf5688282de6a1c7", "patch": "@@ -1,3 +1,8 @@\n+2011-04-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/48809\n+\t* gcc.c-torture/execute/pr48809.c: New test.\n+\n 2011-04-29  Jeff Law <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: New test."}, {"sha": "80de5bc8a3e36a01ce7cca3c9c76df6750ca7bbf", "filename": "gcc/testsuite/gcc.c-torture/execute/pr48809.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb9b69e5730fc6584899297bf5688282de6a1c7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr48809.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb9b69e5730fc6584899297bf5688282de6a1c7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr48809.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr48809.c?ref=edb9b69e5730fc6584899297bf5688282de6a1c7", "patch": "@@ -0,0 +1,60 @@\n+/* PR tree-optimization/48809 */\n+\n+extern void abort (void);\n+\n+int\n+foo (signed char x)\n+{\n+  int y = 0;\n+  switch (x)\n+    {\n+    case 0: y = 1; break;\n+    case 1: y = 7; break;\n+    case 2: y = 2; break;\n+    case 3: y = 19; break;\n+    case 4: y = 5; break;\n+    case 5: y = 17; break;\n+    case 6: y = 31; break;\n+    case 7: y = 8; break;\n+    case 8: y = 28; break;\n+    case 9: y = 16; break;\n+    case 10: y = 31; break;\n+    case 11: y = 12; break;\n+    case 12: y = 15; break;\n+    case 13: y = 111; break;\n+    case 14: y = 17; break;\n+    case 15: y = 10; break;\n+    case 16: y = 31; break;\n+    case 17: y = 7; break;\n+    case 18: y = 2; break;\n+    case 19: y = 19; break;\n+    case 20: y = 5; break;\n+    case 21: y = 107; break;\n+    case 22: y = 31; break;\n+    case 23: y = 8; break;\n+    case 24: y = 28; break;\n+    case 25: y = 106; break;\n+    case 26: y = 31; break;\n+    case 27: y = 102; break;\n+    case 28: y = 105; break;\n+    case 29: y = 111; break;\n+    case 30: y = 17; break;\n+    case 31: y = 10; break;\n+    case 32: y = 31; break;\n+    case 98: y = 18; break;\n+    case -62: y = 19; break;\n+    }\n+  return y;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (98) != 18 || foo (97) != 0 || foo (99) != 0)\n+    abort ();\n+  if (foo (-62) != 19 || foo (-63) != 0 || foo (-61) != 0)\n+    abort ();\n+  if (foo (28) != 105 || foo (27) != 102 || foo (29) != 111)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "a8928e53ab7c056252552115b8206441039e5028", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 18, "deletions": 42, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edb9b69e5730fc6584899297bf5688282de6a1c7/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edb9b69e5730fc6584899297bf5688282de6a1c7/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=edb9b69e5730fc6584899297bf5688282de6a1c7", "patch": "@@ -1,6 +1,6 @@\n /* Switch Conversion converts variable initializations based on switch\n    statements to initializations from a static array.\n-   Copyright (C) 2006, 2008, 2009, 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n    Contributed by Martin Jambor <jamborm@suse.cz>\n \n This file is part of GCC.\n@@ -656,22 +656,28 @@ static void\n build_arrays (gimple swtch)\n {\n   tree arr_index_type;\n-  tree tidx, sub, tmp;\n+  tree tidx, sub, tmp, utype;\n   gimple stmt;\n   gimple_stmt_iterator gsi;\n   int i;\n   location_t loc = gimple_location (swtch);\n \n   gsi = gsi_for_stmt (swtch);\n \n+  /* Make sure we do not generate arithmetics in a subrange.  */\n+  utype = TREE_TYPE (info.index_expr);\n+  if (TREE_TYPE (utype))\n+    utype = lang_hooks.types.type_for_mode (TYPE_MODE (TREE_TYPE (utype)), 1);\n+  else\n+    utype = lang_hooks.types.type_for_mode (TYPE_MODE (utype), 1);\n+\n   arr_index_type = build_index_type (info.range_size);\n-  tmp = create_tmp_var (TREE_TYPE (info.index_expr), \"csti\");\n+  tmp = create_tmp_var (utype, \"csui\");\n   add_referenced_var (tmp);\n   tidx = make_ssa_name (tmp, NULL);\n-  sub = fold_build2_loc (loc, MINUS_EXPR,\n-\t\t     TREE_TYPE (info.index_expr), info.index_expr,\n-\t\t     fold_convert_loc (loc, TREE_TYPE (info.index_expr),\n-\t\t\t\t       info.range_min));\n+  sub = fold_build2_loc (loc, MINUS_EXPR, utype,\n+\t\t\t fold_convert_loc (loc, utype, info.index_expr),\n+\t\t\t fold_convert_loc (loc, utype, info.range_min));\n   sub = force_gimple_operand_gsi (&gsi, sub,\n \t\t\t\t  false, NULL, true, GSI_SAME_STMT);\n   stmt = gimple_build_assign (tidx, sub);\n@@ -780,12 +786,7 @@ gen_inbound_check (gimple swtch)\n   tree label_decl2 = create_artificial_label (UNKNOWN_LOCATION);\n   tree label_decl3 = create_artificial_label (UNKNOWN_LOCATION);\n   gimple label1, label2, label3;\n-\n-  tree utype;\n-  tree tmp_u_1, tmp_u_2, tmp_u_var;\n-  tree cast;\n-  gimple cast_assign, minus_assign;\n-  tree ulb, minus;\n+  tree utype, tidx;\n   tree bound;\n \n   gimple cond_stmt;\n@@ -799,49 +800,24 @@ gen_inbound_check (gimple swtch)\n   gcc_assert (info.default_values);\n   bb0 = gimple_bb (swtch);\n \n-  /* Make sure we do not generate arithmetics in a subrange.  */\n-  if (TREE_TYPE (TREE_TYPE (info.index_expr)))\n-    utype = lang_hooks.types.type_for_mode\n-      (TYPE_MODE (TREE_TYPE (TREE_TYPE (info.index_expr))), 1);\n-  else\n-    utype = lang_hooks.types.type_for_mode\n-      (TYPE_MODE (TREE_TYPE (info.index_expr)), 1);\n+  tidx = gimple_assign_lhs (info.arr_ref_first);\n+  utype = TREE_TYPE (tidx);\n \n   /* (end of) block 0 */\n   gsi = gsi_for_stmt (info.arr_ref_first);\n-  tmp_u_var = create_tmp_var (utype, \"csui\");\n-  add_referenced_var (tmp_u_var);\n-  tmp_u_1 = make_ssa_name (tmp_u_var, NULL);\n-\n-  cast = fold_convert_loc (loc, utype, info.index_expr);\n-  cast_assign = gimple_build_assign (tmp_u_1, cast);\n-  SSA_NAME_DEF_STMT (tmp_u_1) = cast_assign;\n-  gsi_insert_before (&gsi, cast_assign, GSI_SAME_STMT);\n-  update_stmt (cast_assign);\n-\n-  ulb = fold_convert_loc (loc, utype, info.range_min);\n-  minus = fold_build2_loc (loc, MINUS_EXPR, utype, tmp_u_1, ulb);\n-  minus = force_gimple_operand_gsi (&gsi, minus, false, NULL, true,\n-\t\t\t\t    GSI_SAME_STMT);\n-  tmp_u_2 = make_ssa_name (tmp_u_var, NULL);\n-  minus_assign = gimple_build_assign (tmp_u_2, minus);\n-  SSA_NAME_DEF_STMT (tmp_u_2) = minus_assign;\n-  gsi_insert_before (&gsi, minus_assign, GSI_SAME_STMT);\n-  update_stmt (minus_assign);\n+  gsi_next (&gsi);\n \n   bound = fold_convert_loc (loc, utype, info.range_size);\n-  cond_stmt = gimple_build_cond (LE_EXPR, tmp_u_2, bound, NULL_TREE, NULL_TREE);\n+  cond_stmt = gimple_build_cond (LE_EXPR, tidx, bound, NULL_TREE, NULL_TREE);\n   gsi_insert_before (&gsi, cond_stmt, GSI_SAME_STMT);\n   update_stmt (cond_stmt);\n \n   /* block 2 */\n-  gsi = gsi_for_stmt (info.arr_ref_first);\n   label2 = gimple_build_label (label_decl2);\n   gsi_insert_before (&gsi, label2, GSI_SAME_STMT);\n   last_assign = gen_def_assigns (&gsi);\n \n   /* block 1 */\n-  gsi = gsi_for_stmt (info.arr_ref_first);\n   label1 = gimple_build_label (label_decl1);\n   gsi_insert_before (&gsi, label1, GSI_SAME_STMT);\n "}]}