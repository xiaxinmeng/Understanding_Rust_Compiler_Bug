{"sha": "7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU0OGMxYmUzYTFlZDFiMTBmNTc1MmE0MWQ4ZWZhM2EzZGZlMDFhYw==", "commit": {"author": {"name": "Wei Guozhi", "email": "carrot@google.com", "date": "2010-04-08T09:27:44Z"}, "committer": {"name": "Wei Guozhi", "email": "carrot@gcc.gnu.org", "date": "2010-04-08T09:27:44Z"}, "message": "re PR target/41653 (not optimal result for multiplication with constant when -Os is specified)\n\n        PR target/41653\n        * config/arm/arm.c (thumb1_size_rtx_costs): New function.\n        (arm_size_rtx_costs): Call the new function when optimized for size.\n\nFrom-SVN: r158110", "tree": {"sha": "14361a1246295c3256cc7bddaea25ac34bc0cfc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14361a1246295c3256cc7bddaea25ac34bc0cfc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac/comments", "author": {"login": "weiguozhi", "id": 57237827, "node_id": "MDQ6VXNlcjU3MjM3ODI3", "avatar_url": "https://avatars.githubusercontent.com/u/57237827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiguozhi", "html_url": "https://github.com/weiguozhi", "followers_url": "https://api.github.com/users/weiguozhi/followers", "following_url": "https://api.github.com/users/weiguozhi/following{/other_user}", "gists_url": "https://api.github.com/users/weiguozhi/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiguozhi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiguozhi/subscriptions", "organizations_url": "https://api.github.com/users/weiguozhi/orgs", "repos_url": "https://api.github.com/users/weiguozhi/repos", "events_url": "https://api.github.com/users/weiguozhi/events{/privacy}", "received_events_url": "https://api.github.com/users/weiguozhi/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa847cc8ec88e3eb7f6671ad9ea1988ae3d7edbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa847cc8ec88e3eb7f6671ad9ea1988ae3d7edbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa847cc8ec88e3eb7f6671ad9ea1988ae3d7edbf"}], "stats": {"total": 133, "additions": 131, "deletions": 2}, "files": [{"sha": "94860fafabb0b76f49925095d72fc0ede04daaf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac", "patch": "@@ -1,3 +1,9 @@\n+2010-04-08  Wei Guozhi  <carrot@google.com>\n+\n+\tPR target/41653\n+\t* config/arm/arm.c (thumb1_size_rtx_costs): New function.\n+\t(arm_size_rtx_costs): Call the new function when optimized for size.\n+\n 2010-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/43670"}, {"sha": "242ead5f02786046384c4281c46be3e546962bf3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 125, "deletions": 2, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7548c1be3a1ed1b10f5752a41d8efa3a3dfe01ac", "patch": "@@ -6884,6 +6884,130 @@ arm_rtx_costs_1 (rtx x, enum rtx_code outer, int* total, bool speed)\n     }\n }\n \n+/* Estimates the size cost of thumb1 instructions.\n+   For now most of the code is copied from thumb1_rtx_costs. We need more\n+   fine grain tuning when we have more related test cases.  */\n+static inline int\n+thumb1_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer)\n+{\n+  enum machine_mode mode = GET_MODE (x);\n+\n+  switch (code)\n+    {\n+    case ASHIFT:\n+    case ASHIFTRT:\n+    case LSHIFTRT:\n+    case ROTATERT:\n+    case PLUS:\n+    case MINUS:\n+    case COMPARE:\n+    case NEG:\n+    case NOT:\n+      return COSTS_N_INSNS (1);\n+\n+    case MULT:\n+      if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n+        {\n+          /* Thumb1 mul instruction can't operate on const. We must Load it\n+             into a register first.  */\n+          int const_size = thumb1_size_rtx_costs (XEXP (x, 1), CONST_INT, SET);\n+          return COSTS_N_INSNS (1) + const_size;\n+        }\n+      return COSTS_N_INSNS (1);\n+\n+    case SET:\n+      return (COSTS_N_INSNS (1)\n+              + 4 * ((GET_CODE (SET_SRC (x)) == MEM)\n+                     + GET_CODE (SET_DEST (x)) == MEM));\n+\n+    case CONST_INT:\n+      if (outer == SET)\n+        {\n+          if ((unsigned HOST_WIDE_INT) INTVAL (x) < 256)\n+            return 0;\n+          if (thumb_shiftable_const (INTVAL (x)))\n+            return COSTS_N_INSNS (2);\n+          return COSTS_N_INSNS (3);\n+        }\n+      else if ((outer == PLUS || outer == COMPARE)\n+               && INTVAL (x) < 256 && INTVAL (x) > -256)\n+        return 0;\n+      else if ((outer == IOR || outer == XOR || outer == AND)\n+               && INTVAL (x) < 256 && INTVAL (x) >= -256)\n+        return COSTS_N_INSNS (1);\n+      else if (outer == AND)\n+        {\n+          int i;\n+          /* This duplicates the tests in the andsi3 expander.  */\n+          for (i = 9; i <= 31; i++)\n+            if ((((HOST_WIDE_INT) 1) << i) - 1 == INTVAL (x)\n+                || (((HOST_WIDE_INT) 1) << i) - 1 == ~INTVAL (x))\n+              return COSTS_N_INSNS (2);\n+        }\n+      else if (outer == ASHIFT || outer == ASHIFTRT\n+               || outer == LSHIFTRT)\n+        return 0;\n+      return COSTS_N_INSNS (2);\n+\n+    case CONST:\n+    case CONST_DOUBLE:\n+    case LABEL_REF:\n+    case SYMBOL_REF:\n+      return COSTS_N_INSNS (3);\n+\n+    case UDIV:\n+    case UMOD:\n+    case DIV:\n+    case MOD:\n+      return 100;\n+\n+    case TRUNCATE:\n+      return 99;\n+\n+    case AND:\n+    case XOR:\n+    case IOR:\n+      /* XXX guess.  */\n+      return 8;\n+\n+    case MEM:\n+      /* XXX another guess.  */\n+      /* Memory costs quite a lot for the first word, but subsequent words\n+         load at the equivalent of a single insn each.  */\n+      return (10 + 4 * ((GET_MODE_SIZE (mode) - 1) / UNITS_PER_WORD)\n+              + ((GET_CODE (x) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (x))\n+                 ? 4 : 0));\n+\n+    case IF_THEN_ELSE:\n+      /* XXX a guess.  */\n+      if (GET_CODE (XEXP (x, 1)) == PC || GET_CODE (XEXP (x, 2)) == PC)\n+        return 14;\n+      return 2;\n+\n+    case ZERO_EXTEND:\n+      /* XXX still guessing.  */\n+      switch (GET_MODE (XEXP (x, 0)))\n+        {\n+          case QImode:\n+            return (1 + (mode == DImode ? 4 : 0)\n+                    + (GET_CODE (XEXP (x, 0)) == MEM ? 10 : 0));\n+\n+          case HImode:\n+            return (4 + (mode == DImode ? 4 : 0)\n+                    + (GET_CODE (XEXP (x, 0)) == MEM ? 10 : 0));\n+\n+          case SImode:\n+            return (1 + (GET_CODE (XEXP (x, 0)) == MEM ? 10 : 0));\n+\n+          default:\n+            return 99;\n+        }\n+\n+    default:\n+      return 99;\n+    }\n+}\n+\n /* RTX costs when optimizing for size.  */\n static bool\n arm_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n@@ -6892,8 +7016,7 @@ arm_size_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n   enum machine_mode mode = GET_MODE (x);\n   if (TARGET_THUMB1)\n     {\n-      /* XXX TBD.  For now, use the standard costs.  */\n-      *total = thumb1_rtx_costs (x, code, outer_code);\n+      *total = thumb1_size_rtx_costs (x, code, outer_code);\n       return true;\n     }\n "}]}