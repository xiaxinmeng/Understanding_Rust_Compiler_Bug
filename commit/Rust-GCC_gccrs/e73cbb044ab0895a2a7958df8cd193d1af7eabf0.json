{"sha": "e73cbb044ab0895a2a7958df8cd193d1af7eabf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczY2JiMDQ0YWIwODk1YTJhNzk1OGRmOGNkMTkzZDFhZjdlYWJmMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-31T13:23:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-31T13:23:56Z"}, "message": "(TRAMPOLINE_TEMPLATE, TRAMPOLINE_SIZE, INITIALIZE_TRAMPOLINE): Avoid need for helper function.\n\n(TRAMPOLINE_TEMPLATE, TRAMPOLINE_SIZE, INITIALIZE_TRAMPOLINE): Avoid need for\nhelper function.\n(TRAMPOLINE_ALIGNMENT): Renamed from TRAMPOLINE_ALIGN.\n\nFrom-SVN: r11134", "tree": {"sha": "843e0f48fa6b1b9828b5b7158d27dfc63473fb63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843e0f48fa6b1b9828b5b7158d27dfc63473fb63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e73cbb044ab0895a2a7958df8cd193d1af7eabf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73cbb044ab0895a2a7958df8cd193d1af7eabf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73cbb044ab0895a2a7958df8cd193d1af7eabf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73cbb044ab0895a2a7958df8cd193d1af7eabf0/comments", "author": null, "committer": null, "parents": [{"sha": "270eeaa5a8aa964dd14e8db99af0885f2b3146f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270eeaa5a8aa964dd14e8db99af0885f2b3146f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/270eeaa5a8aa964dd14e8db99af0885f2b3146f4"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "3ce56e161208556d34989cf862f910c2f8801fb6", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73cbb044ab0895a2a7958df8cd193d1af7eabf0/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73cbb044ab0895a2a7958df8cd193d1af7eabf0/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=e73cbb044ab0895a2a7958df8cd193d1af7eabf0", "patch": "@@ -993,56 +993,50 @@ while(0)\n    of a trampoline, leaving space for the variable parts.  */\n \n /* On the 68k, the trampoline looks like this:\n-     mov  @#.,a0\n-     jsr  @#___trampoline\n-     jsr  @#___trampoline\n+     movl pc@(8),a0\n+     movl pc@(8),sp@-\n+     rts\n      .long STATIC\n      .long FUNCTION\n-The reason for having three jsr insns is so that an entire line\n-of the instruction cache is filled in a predictable way\n-that will always be the same.\n-\n-We always use the assembler label ___trampoline\n-regardless of whether the system adds underscores.  */\n+The use of pc relative addressing mode ensures that the constants are\n+accessed through the data cache.  */\n \n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x207c));\t\\\n-  ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4eb9));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (SYMBOL_REF, SImode, \"*___trampoline\"));\\\n-  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4eb9));\t\\\n-  ASM_OUTPUT_INT (FILE, gen_rtx (SYMBOL_REF, SImode, \"*___trampoline\"));\\\n-  ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n-  ASM_OUTPUT_SHORT (FILE, const0_rtx);\t\t\t\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x207a));\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 8));\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x2f3a));\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 8));\t\t\\\n+  ASM_OUTPUT_SHORT (FILE, gen_rtx (CONST_INT, VOIDmode, 0x4e75));\t\\\n+  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n+  ASM_OUTPUT_INT (FILE, const0_rtx);\t\t\t\t\t\\\n }\n \n /* Length in units of the trampoline for entering a nested function.  */\n \n-#define TRAMPOLINE_SIZE 26\n+#define TRAMPOLINE_SIZE 18\n \n /* Alignment required for a trampoline.  16 is used to find the\n    beginning of a line in the instruction cache.  */\n \n-#define TRAMPOLINE_ALIGN 16\n+#define TRAMPOLINE_ALIGNMENT 16\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 2)), TRAMP); \\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 18)), CXT); \\\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 22)), FNADDR); \\\n+  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 10)), CXT); \\\n+  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (TRAMP, 14)), FNADDR); \\\n }\n \n /* This is the library routine that is used\n    to transfer control from the trampoline\n-   to the actual nested function.  */\n+   to the actual nested function.\n+   It is defined for backward compatibility,\n+   for linking with object code that used the old\n+   trampoline definition.  */\n \n /* A colon is used with no explicit operands\n    to cause the template string to be scanned for %-constructs.  */"}]}