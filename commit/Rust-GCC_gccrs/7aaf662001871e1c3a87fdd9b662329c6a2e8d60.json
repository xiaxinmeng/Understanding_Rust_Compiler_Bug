{"sha": "7aaf662001871e1c3a87fdd9b662329c6a2e8d60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FhZjY2MjAwMTg3MWUxYzNhODdmZGQ5YjY2MjMyOWM2YTJlOGQ2MA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-04-08T07:42:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-29T14:23:47Z"}, "message": "[Ada] Accept arrays and scalars as type views that can be validated\n\ngcc/ada/\n\n\t* exp_attr.adb (Build_Array_VS_Func): Restore uses of\n\tValidated_View.\n\t(Build_Record_VS_Func): Likewise.\n\t(Expand_N_Attribute_Reference): Likewise.\n\t* sem_util.adb (Validated_View): Behave as an identity function\n\tfor arrays and scalars.", "tree": {"sha": "420e5e0b2903bac94168dee717946be808f6001b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/420e5e0b2903bac94168dee717946be808f6001b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aaf662001871e1c3a87fdd9b662329c6a2e8d60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aaf662001871e1c3a87fdd9b662329c6a2e8d60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aaf662001871e1c3a87fdd9b662329c6a2e8d60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aaf662001871e1c3a87fdd9b662329c6a2e8d60/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "898edf758e03a6cc31219405a667c75b67a726ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/898edf758e03a6cc31219405a667c75b67a726ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/898edf758e03a6cc31219405a667c75b67a726ca"}], "stats": {"total": 65, "additions": 42, "deletions": 23}, "files": [{"sha": "2e1cb85d5dfa349146e3a9746ea9261c94aa0f29", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aaf662001871e1c3a87fdd9b662329c6a2e8d60/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aaf662001871e1c3a87fdd9b662329c6a2e8d60/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=7aaf662001871e1c3a87fdd9b662329c6a2e8d60", "patch": "@@ -248,7 +248,7 @@ package body Exp_Attr is\n    is\n       Loc      : constant Source_Ptr := Sloc (Attr);\n       Comp_Typ : constant Entity_Id :=\n-        Get_Fullest_View (Component_Type (Array_Typ));\n+        Validated_View (Component_Type (Array_Typ));\n \n       function Validate_Component\n         (Obj_Id  : Entity_Id;\n@@ -535,7 +535,7 @@ package body Exp_Attr is\n       is\n          Field_Id  : constant Entity_Id := Defining_Entity (Field);\n          Field_Nam : constant Name_Id   := Chars (Field_Id);\n-         Field_Typ : constant Entity_Id := Get_Fullest_View (Etype (Field_Id));\n+         Field_Typ : constant Entity_Id := Validated_View (Etype (Field_Id));\n          Attr_Nam  : Name_Id;\n \n       begin\n@@ -7396,7 +7396,7 @@ package body Exp_Attr is\n       -------------------\n \n       when Attribute_Valid_Scalars => Valid_Scalars : declare\n-         Val_Typ : constant Entity_Id := Get_Fullest_View (Ptyp);\n+         Val_Typ : constant Entity_Id := Validated_View (Ptyp);\n          Expr    : Node_Id;\n \n       begin\n@@ -7460,7 +7460,7 @@ package body Exp_Attr is\n                     (Build_Record_VS_Func\n                       (Attr       => N,\n                        Formal_Typ => Ptyp,\n-                       Rec_Typ    => Validated_View (Ptyp)),\n+                       Rec_Typ    => Val_Typ),\n                     Loc),\n                 Parameter_Associations => New_List (Pref));\n          end if;"}, {"sha": "f723781fd78d71a2b7fae869b5d0d0a71f527c09", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 38, "deletions": 19, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aaf662001871e1c3a87fdd9b662329c6a2e8d60/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aaf662001871e1c3a87fdd9b662329c6a2e8d60/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7aaf662001871e1c3a87fdd9b662329c6a2e8d60", "patch": "@@ -29473,34 +29473,53 @@ package body Sem_Util is\n \n    function Validated_View (Typ : Entity_Id) return Entity_Id is\n    begin\n+      --  Scalar types can be always validated. In fast, switiching to the base\n+      --  type would drop the range constraints and force validation to use a\n+      --  larger type than necessary.\n+\n+      if Is_Scalar_Type (Typ) then\n+         return Typ;\n+\n+      --  Array types can be validated even when they are derived, because\n+      --  validation only requires their bounds and component types to be\n+      --  accessible. In fact, switching to the parent type would pollute\n+      --  expansion of attribute Valid_Scalars with unnecessary conversion\n+      --  that might not be eliminated by the frontend.\n+\n+      elsif Is_Array_Type (Typ) then\n+         return Typ;\n+\n+      --  For other types, in particular for record subtypes, we switch to the\n+      --  base type.\n+\n+      elsif not Is_Base_Type (Typ) then\n+         return Validated_View (Base_Type (Typ));\n+\n       --  Obtain the full view of the input type by stripping away concurrency,\n       --  derivations, and privacy.\n \n-      if Is_Base_Type (Typ) then\n-         if Is_Concurrent_Type (Typ) then\n-            if Present (Corresponding_Record_Type (Typ)) then\n-               return Corresponding_Record_Type (Typ);\n-            else\n-               return Typ;\n-            end if;\n+      elsif Is_Concurrent_Type (Typ) then\n+         if Present (Corresponding_Record_Type (Typ)) then\n+            return Corresponding_Record_Type (Typ);\n+         else\n+            return Typ;\n+         end if;\n \n-         elsif Is_Derived_Type (Typ) then\n-            return Validated_View (Etype (Typ));\n+      elsif Is_Derived_Type (Typ) then\n+         return Validated_View (Etype (Typ));\n \n-         elsif Is_Private_Type (Typ) then\n-            if Present (Underlying_Full_View (Typ)) then\n-               return Validated_View (Underlying_Full_View (Typ));\n+      elsif Is_Private_Type (Typ) then\n+         if Present (Underlying_Full_View (Typ)) then\n+            return Validated_View (Underlying_Full_View (Typ));\n \n-            elsif Present (Full_View (Typ)) then\n-               return Validated_View (Full_View (Typ));\n-            else\n-               return Typ;\n-            end if;\n+         elsif Present (Full_View (Typ)) then\n+            return Validated_View (Full_View (Typ));\n+         else\n+            return Typ;\n          end if;\n \n-         return Typ;\n       else\n-         return Validated_View (Base_Type (Typ));\n+         return Typ;\n       end if;\n    end Validated_View;\n "}]}