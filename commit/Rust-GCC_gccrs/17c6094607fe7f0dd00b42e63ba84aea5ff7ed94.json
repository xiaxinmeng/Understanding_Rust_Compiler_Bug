{"sha": "17c6094607fe7f0dd00b42e63ba84aea5ff7ed94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdjNjA5NDYwN2ZlN2YwZGQwMGI0MmU2M2JhODRhZWE1ZmY3ZWQ5NA==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2004-03-07T21:01:26Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2004-03-07T21:01:26Z"}, "message": "m68hc11.md (\"*lshrsi3_const\"): Disable for 68HC12.\n\n\t* config/m68hc11/m68hc11.md (\"*lshrsi3_const\"): Disable for 68HC12.\n\t(\"*lshrsi3\"): Also accept an immediate for 68HC12.\n\t(\"*ashrsi3_const\"): Likewise.\n\t(\"*ashrsi3\"): Likewise.\n\t(\"*ashlsi3_const\"): Likewise.\n\t(\"*ashlsi3\"): Likewise.\n\t(\"cmphi_1_hc12\"): Compare two hard register by pushing them and\n\tcomparing with a pop; don't use a split for that.\n\t(\"cmphi split\"): Disable compare split for 68HC12.\n\n\t* config/m68hc11/m68hc11.c (m68hc11_notice_update_cc): Invalidate\n\tthe status operands if they have side effects.\n\nFrom-SVN: r79068", "tree": {"sha": "eb9442a79768f04c51c72cfc0c03cfa03d673962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb9442a79768f04c51c72cfc0c03cfa03d673962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17c6094607fe7f0dd00b42e63ba84aea5ff7ed94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c6094607fe7f0dd00b42e63ba84aea5ff7ed94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17c6094607fe7f0dd00b42e63ba84aea5ff7ed94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17c6094607fe7f0dd00b42e63ba84aea5ff7ed94/comments", "author": null, "committer": null, "parents": [{"sha": "3e759edad2bd521b72e9923956662741374214f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e759edad2bd521b72e9923956662741374214f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e759edad2bd521b72e9923956662741374214f4"}], "stats": {"total": 72, "additions": 55, "deletions": 17}, "files": [{"sha": "dc730edff7c8fdc001498d3483b28fd5e502fb1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c6094607fe7f0dd00b42e63ba84aea5ff7ed94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c6094607fe7f0dd00b42e63ba84aea5ff7ed94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17c6094607fe7f0dd00b42e63ba84aea5ff7ed94", "patch": "@@ -1,3 +1,18 @@\n+2004-03-07  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"*lshrsi3_const\"): Disable for 68HC12.\n+\t(\"*lshrsi3\"): Also accept an immediate for 68HC12.\n+\t(\"*ashrsi3_const\"): Likewise.\n+\t(\"*ashrsi3\"): Likewise.\n+\t(\"*ashlsi3_const\"): Likewise.\n+\t(\"*ashlsi3\"): Likewise.\n+\t(\"cmphi_1_hc12\"): Compare two hard register by pushing them and\n+\tcomparing with a pop; don't use a split for that.\n+\t(\"cmphi split\"): Disable compare split for 68HC12.\n+\n+\t* config/m68hc11/m68hc11.c (m68hc11_notice_update_cc): Invalidate\n+\tthe status operands if they have side effects.\n+\n 2004-03-07  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* defaults.h (LEGITIMIZE_ADDRESS): Provide a default"}, {"sha": "e4bd72abb6e98094b42716653b95ad6d7a5e4205", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c6094607fe7f0dd00b42e63ba84aea5ff7ed94/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c6094607fe7f0dd00b42e63ba84aea5ff7ed94/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=17c6094607fe7f0dd00b42e63ba84aea5ff7ed94", "patch": "@@ -4082,6 +4082,12 @@ m68hc11_notice_update_cc (rtx exp, rtx insn ATTRIBUTE_UNUSED)\n       && cc_status.value2\n       && reg_overlap_mentioned_p (cc_status.value1, cc_status.value2))\n     cc_status.value2 = 0;\n+\n+  else if (cc_status.value1 && side_effects_p (cc_status.value1))\n+    cc_status.value1 = 0;\n+\n+  else if (cc_status.value2 && side_effects_p (cc_status.value2))\n+    cc_status.value2 = 0;\n }\n \n /* The current instruction does not affect the flags but changes"}, {"sha": "5e6bc23a69292831a72897515fb3dd841686d1d2", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17c6094607fe7f0dd00b42e63ba84aea5ff7ed94/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17c6094607fe7f0dd00b42e63ba84aea5ff7ed94/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=17c6094607fe7f0dd00b42e63ba84aea5ff7ed94", "patch": "@@ -308,7 +308,7 @@\n   [(set (cc0)\n \t(compare (match_operand:HI 0 \"hard_reg_operand\" \"\")\n \t\t (match_operand:HI 1 \"hard_reg_operand\" \"\")))]\n-  \"TARGET_M6812\n+  \"0 && TARGET_M6812\n    && reload_completed && !(Z_REG_P (operands[0]) || Z_REG_P (operands[1]))\"\n   [(set (mem:HI (pre_dec:HI (reg:HI SP_REGNUM))) (match_dup 1))\n    (set (cc0)\n@@ -344,8 +344,10 @@\n       cc_status.flags |= CC_REVERSED;\n       return \\\"cp%1\\\\t%0\\\";\n     }\n+  else if (SP_REG_P (operands[1]))\n+    return \\\"sts\\\\t2,-sp\\n\\\\tcp%0\\\\t2,sp+\\\";\n   else if (H_REG_P (operands[1]))\n-    return \\\"#\\\";\n+    return \\\"psh%1\\n\\\\tcp%0\\\\t2,sp+\\\";\n   else\n     return \\\"cp%0\\\\t%1\\\";\n }\")\n@@ -4615,10 +4617,10 @@\n    \"\")\n \n (define_insn \"*ashlsi3_const1\"\n-  [(set (match_operand:SI 0 \"non_push_operand\" \"=D,D,D,m,*u\")\n-\t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,m,*u,m,*u\")\n+  [(set (match_operand:SI 0 \"non_push_operand\" \"=D,D,D,m,*u,*u\")\n+\t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,m,*u,m,*u,m\")\n \t           (const_int 1)))\n-   (clobber (match_scratch:HI 2 \"=X,X,X,&d,&d\"))]\n+   (clobber (match_scratch:HI 2 \"=X,X,X,&d,&d,&d\"))]\n    \"\"\n    \"*\n {\n@@ -4674,7 +4676,7 @@\n \t(ashift:SI (match_dup 0)\n \t           (match_operand:HI 1 \"const_int_operand\" \"\")))\n    (clobber (match_scratch:HI 2 \"=y\"))]\n-   \"\"\n+   \"TARGET_M6811 /* See *ashlsi3 note.  */\"\n    \"*\n {\n   CC_STATUS_INIT;\n@@ -4684,7 +4686,7 @@\n (define_insn \"*ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+D,D\")\n \t(ashift:SI (match_dup 0)\n-\t           (match_operand:HI 1 \"general_operand\" \"y,m\")))\n+\t           (match_operand:HI 1 \"general_operand\" \"y,mi\")))\n    (clobber (match_scratch:HI 2 \"=1,X\"))]\n    \"\"\n    \"*\n@@ -4697,7 +4699,12 @@\n      is not enough register in class A_REGS.\n \n      Assuming that 'operands[1]' does not refer to the stack (which \n-     is true for 68hc11 only, we save temporary the value of Y.  */\n+     is true for 68hc11 only, we save temporary the value of Y.\n+\n+     For 68HC12 we must also accept a constant because Z register is\n+     disabled when compiling with -fomit-frame-pointer.  We can come up\n+     with a reload problem and the *lshrsi3_const pattern was disabled\n+     for that reason.  */\n   if (!Y_REG_P (operands[2]))\n     {\n       rtx ops[1];\n@@ -5084,7 +5091,7 @@\n \t(ashiftrt:SI (match_dup 0)\n \t             (match_operand:HI 1 \"const_int_operand\" \"\")))\n    (clobber (match_scratch:HI 2 \"=y\"))]\n-   \"\"\n+   \"TARGET_M6811 /* See *ashrsi3 note.  */\"\n    \"*\n {\n   CC_STATUS_INIT;\n@@ -5094,7 +5101,7 @@\n (define_insn \"*ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+D,D\")\n \t(ashiftrt:SI (match_dup 0)\n-\t             (match_operand:HI 1 \"general_operand\" \"y,m\")))\n+\t             (match_operand:HI 1 \"general_operand\" \"y,mi\")))\n    (clobber (match_scratch:HI 2 \"=1,X\"))]\n    \"\"\n    \"*\n@@ -5106,7 +5113,12 @@\n      is not enough register in class A_REGS.\n \n      Assuming that 'operands[1]' does not refer to the stack (which \n-     is true for 68hc11 only, we save temporary the value of Y.  */\n+     is true for 68hc11 only, we save temporary the value of Y.\n+\n+     For 68HC12 we must also accept a constant because Z register is\n+     disabled when compiling with -fomit-frame-pointer.  We can come up\n+     with a reload problem and the *lshrsi3_const pattern was disabled\n+     for that reason.  */\n   if (!Y_REG_P (operands[2]))\n     {\n       rtx ops[1];\n@@ -5367,10 +5379,10 @@\n     #\")\n \n (define_insn \"*lshrsi3_const1\"\n-  [(set (match_operand:SI 0 \"non_push_operand\" \"=D,D,D,m,*u\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,m,*u,m,*u\")\n+  [(set (match_operand:SI 0 \"non_push_operand\" \"=D,D,D,m,*u,*u\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,m,*u,m,*u,m\")\n \t             (const_int 1)))\n-   (clobber (match_scratch:HI 2 \"=X,X,X,&d,&d\"))]\n+   (clobber (match_scratch:HI 2 \"=X,X,X,&d,&d,&d\"))]\n    \"\"\n    \"*\n {\n@@ -5421,7 +5433,7 @@\n \t(lshiftrt:SI (match_dup 0)\n \t             (match_operand:HI 1 \"const_int_operand\" \"\")))\n    (clobber (match_scratch:HI 2 \"=y\"))]\n-   \"\"\n+   \"TARGET_M6811 /* See *lshrsi3 note.  */\"\n    \"*\n {\n   CC_STATUS_INIT;\n@@ -5431,7 +5443,7 @@\n (define_insn \"*lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+D,D\")\n \t(lshiftrt:SI (match_dup 0)\n-\t             (match_operand:HI 1 \"general_operand\" \"y,m\")))\n+\t             (match_operand:HI 1 \"general_operand\" \"y,mi\")))\n    (clobber (match_scratch:HI 2 \"=1,X\"))]\n    \"\"\n    \"*\n@@ -5443,7 +5455,12 @@\n      is not enough register in class A_REGS.\n \n      Assuming that 'operands[1]' does not refer to the stack (which \n-     is true for 68hc11 only, we save temporary the value of Y.  */\n+     is true for 68hc11 only, we save temporary the value of Y.\n+\n+     For 68HC12 we must also accept a constant because Z register is\n+     disabled when compiling with -fomit-frame-pointer.  We can come up\n+     with a reload problem and the *lshrsi3_const pattern was disabled\n+     for that reason.  */\n   if (!Y_REG_P (operands[2]))\n     {\n       rtx ops[1];"}]}