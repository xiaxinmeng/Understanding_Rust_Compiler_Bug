{"sha": "abdbbf16d4e2366c55975b86998ae7a7c3bccab2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkYmJmMTZkNGUyMzY2YzU1OTc1Yjg2OTk4YWU3YTdjM2JjY2FiMg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-05-18T20:54:59Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-05-18T20:54:59Z"}, "message": "tree.h (build_int_cstu): Implement as static inline.\n\n\t* tree.h (build_int_cstu): Implement as static inline.\n\t* tree.c (build_int_cstu): Remove function.\n\t(double_int_to_tree, double_int_fits_to_tree_p): Handle size types as\n\tsign extended.\n\nFrom-SVN: r159544", "tree": {"sha": "55578260d871250a02af221648451770f28d925a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55578260d871250a02af221648451770f28d925a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abdbbf16d4e2366c55975b86998ae7a7c3bccab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdbbf16d4e2366c55975b86998ae7a7c3bccab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abdbbf16d4e2366c55975b86998ae7a7c3bccab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdbbf16d4e2366c55975b86998ae7a7c3bccab2/comments", "author": null, "committer": null, "parents": [{"sha": "f8a02aacf19d0e9c7c4daea13c5a598d5ea11cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a02aacf19d0e9c7c4daea13c5a598d5ea11cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8a02aacf19d0e9c7c4daea13c5a598d5ea11cab"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "b49191860aa09a52c3a49a3dcc45d72159fa4b15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdbbf16d4e2366c55975b86998ae7a7c3bccab2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdbbf16d4e2366c55975b86998ae7a7c3bccab2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abdbbf16d4e2366c55975b86998ae7a7c3bccab2", "patch": "@@ -1,3 +1,10 @@\n+2010-05-18  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* tree.h (build_int_cstu): Implement as static inline.\n+\t* tree.c (build_int_cstu): Remove function.\n+\t(double_int_to_tree, double_int_fits_to_tree_p): Handle size types as\n+\tsign extended.\n+\n 2010-05-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/44143"}, {"sha": "76be316eef9f58bdbdc85c9fb7aefbd3164ca361", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdbbf16d4e2366c55975b86998ae7a7c3bccab2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdbbf16d4e2366c55975b86998ae7a7c3bccab2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=abdbbf16d4e2366c55975b86998ae7a7c3bccab2", "patch": "@@ -1041,14 +1041,6 @@ build_int_cst (tree type, HOST_WIDE_INT low)\n   return build_int_cst_wide (type, low, low < 0 ? -1 : 0);\n }\n \n-/* Create an INT_CST node with a LOW value zero extended.  */\n-\n-tree\n-build_int_cstu (tree type, unsigned HOST_WIDE_INT low)\n-{\n-  return build_int_cst_wide (type, low, 0);\n-}\n-\n /* Create an INT_CST node with a LOW value in TYPE.  The value is sign extended\n    if it is negative.  This function is similar to build_int_cst, but\n    the extra bits outside of the type precision are cleared.  Constants\n@@ -1088,7 +1080,12 @@ build_int_cst_wide_type (tree type,\n tree\n double_int_to_tree (tree type, double_int cst)\n {\n-  cst = double_int_ext (cst, TYPE_PRECISION (type), TYPE_UNSIGNED (type));\n+  /* Size types *are* sign extended.  */\n+  bool sign_extended_type = (!TYPE_UNSIGNED (type)\n+\t\t\t     || (TREE_CODE (type) == INTEGER_TYPE\n+\t\t\t\t && TYPE_IS_SIZETYPE (type)));\n+\n+  cst = double_int_ext (cst, TYPE_PRECISION (type), !sign_extended_type);\n \n   return build_int_cst_wide (type, cst.low, cst.high);\n }\n@@ -1099,9 +1096,13 @@ double_int_to_tree (tree type, double_int cst)\n bool\n double_int_fits_to_tree_p (const_tree type, double_int cst)\n {\n-  double_int ext = double_int_ext (cst,\n-\t\t\t\t   TYPE_PRECISION (type),\n-\t\t\t\t   TYPE_UNSIGNED (type));\n+  /* Size types *are* sign extended.  */\n+  bool sign_extended_type = (!TYPE_UNSIGNED (type)\n+\t\t\t     || (TREE_CODE (type) == INTEGER_TYPE\n+\t\t\t\t && TYPE_IS_SIZETYPE (type)));\n+\n+  double_int ext\n+    = double_int_ext (cst, TYPE_PRECISION (type), !sign_extended_type);\n \n   return double_int_equal_p (cst, ext);\n }"}, {"sha": "e2f54a3f08f90d044072095e0de748c93b4cffff", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abdbbf16d4e2366c55975b86998ae7a7c3bccab2/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abdbbf16d4e2366c55975b86998ae7a7c3bccab2/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=abdbbf16d4e2366c55975b86998ae7a7c3bccab2", "patch": "@@ -4001,9 +4001,16 @@ tree_to_double_int (const_tree cst)\n extern tree double_int_to_tree (tree, double_int);\n extern bool double_int_fits_to_tree_p (const_tree, double_int);\n \n+/* Create an INT_CST node with a CST value zero extended.  */\n+\n+static inline tree\n+build_int_cstu (tree type, unsigned HOST_WIDE_INT cst)\n+{\n+  return double_int_to_tree (type, uhwi_to_double_int (cst));\n+}\n+\n extern tree build_int_cst (tree, HOST_WIDE_INT);\n extern tree build_int_cst_type (tree, HOST_WIDE_INT);\n-extern tree build_int_cstu (tree, unsigned HOST_WIDE_INT);\n extern tree build_int_cst_wide (tree, unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n extern tree build_int_cst_wide_type (tree,\n \t\t\t\t     unsigned HOST_WIDE_INT, HOST_WIDE_INT);"}]}