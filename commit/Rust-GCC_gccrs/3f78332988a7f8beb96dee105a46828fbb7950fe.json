{"sha": "3f78332988a7f8beb96dee105a46828fbb7950fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y3ODMzMjk4OGE3ZjhiZWI5NmRlZTEwNWE0NjgyOGZiYjc5NTBmZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-08T08:30:25Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-08T08:30:25Z"}, "message": "(invert_truthvalue): Never alter ARG.\n\nFrom-SVN: r2365", "tree": {"sha": "694a20b3d6aafc8dba4c76769dc210d48777008a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/694a20b3d6aafc8dba4c76769dc210d48777008a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f78332988a7f8beb96dee105a46828fbb7950fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f78332988a7f8beb96dee105a46828fbb7950fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f78332988a7f8beb96dee105a46828fbb7950fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f78332988a7f8beb96dee105a46828fbb7950fe/comments", "author": null, "committer": null, "parents": [{"sha": "abd09f97059f60d60ee20fa4b212a073b97a9710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd09f97059f60d60ee20fa4b212a073b97a9710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd09f97059f60d60ee20fa4b212a073b97a9710"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "9cb107ece79af3c65a7b9505f87264c64e17c034", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f78332988a7f8beb96dee105a46828fbb7950fe/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f78332988a7f8beb96dee105a46828fbb7950fe/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3f78332988a7f8beb96dee105a46828fbb7950fe", "patch": "@@ -1979,8 +1979,8 @@ omit_one_operand (type, result, omitted)\n   return t;\n }\n \f\n-/* Return a simplified tree node for the truth-negation of ARG\n-   (perhaps by altering ARG).  It is known that ARG is an operation that\n+/* Return a simplified tree node for the truth-negation of ARG.  This\n+   never alters ARG itself.  We assume that ARG is an operation that\n    returns a truth value (0 or 1).  */\n \n tree\n@@ -2000,10 +2000,8 @@ invert_truthvalue (arg)\n \t  && code != NE_EXPR && code != EQ_EXPR)\n \treturn build1 (TRUTH_NOT_EXPR, type, arg);\n       else\n-\t{\n-\t  TREE_SET_CODE (arg, invert_tree_comparison (code));\n-\t  return arg;\n-\t}\n+\treturn build (invert_tree_comparison (code),\n+\t\t      TREE_OPERAND (arg, 0), TREE_OPERAND (arg, 1));\n     }\n \n   switch (code)"}]}