{"sha": "bf9a0db3c8ce0aeea0a5371219eebc9323066284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY5YTBkYjNjOGNlMGFlZWEwYTUzNzEyMTllZWJjOTMyMzA2NjI4NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-09T17:31:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-09T17:31:06Z"}, "message": "reload1.c (reloads_conflict, gen_reload): Make them static.\n\n\t* reload1.c (reloads_conflict, gen_reload): Make them static.\n\t* reload.h: Remove the corresponding prototypes.\n\nFrom-SVN: r90350", "tree": {"sha": "43cc463e7cea0d25e71f2a0257aed1c7fddb0c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43cc463e7cea0d25e71f2a0257aed1c7fddb0c78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf9a0db3c8ce0aeea0a5371219eebc9323066284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9a0db3c8ce0aeea0a5371219eebc9323066284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf9a0db3c8ce0aeea0a5371219eebc9323066284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9a0db3c8ce0aeea0a5371219eebc9323066284/comments", "author": null, "committer": null, "parents": [{"sha": "10015a27fd82667b0b756059bd67e9d6fb330f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10015a27fd82667b0b756059bd67e9d6fb330f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10015a27fd82667b0b756059bd67e9d6fb330f0e"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "17a5627ca44136afccecd197087d1cee3a17c10b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a0db3c8ce0aeea0a5371219eebc9323066284/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a0db3c8ce0aeea0a5371219eebc9323066284/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf9a0db3c8ce0aeea0a5371219eebc9323066284", "patch": "@@ -1,3 +1,8 @@\n+2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* reload1.c (reloads_conflict, gen_reload): Make them static.\n+\t* reload.h: Remove the corresponding prototypes.\n+\n 2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* reload.c (refers_to_mem_for_reload_p,"}, {"sha": "7ddadb74141324a558eb523848f454f71b653b61", "filename": "gcc/reload.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a0db3c8ce0aeea0a5371219eebc9323066284/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a0db3c8ce0aeea0a5371219eebc9323066284/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=bf9a0db3c8ce0aeea0a5371219eebc9323066284", "patch": "@@ -331,7 +331,6 @@ extern int push_reload (rtx, rtx, rtx *, rtx *, enum reg_class,\n extern void reload_cse_regs (rtx);\n \n /* Functions in reload1.c:  */\n-extern int reloads_conflict (int, int);\n \n /* Initialize the reload pass once per compilation.  */\n extern void init_reload (void);\n@@ -347,11 +346,6 @@ extern void mark_home_live (int);\n    replacement (such as sp), plus an offset.  */\n extern rtx eliminate_regs (rtx, enum machine_mode, rtx);\n \n-/* Emit code to perform a reload from IN (which may be a reload register) to\n-   OUT (which may also be a reload register).  IN or OUT is from operand\n-   OPNUM with reload type TYPE.  */\n-extern rtx gen_reload (rtx, rtx, int, enum reload_type);\n-\n /* Deallocate the reload register used by reload number R.  */\n extern void deallocate_reload_reg (int r);\n "}, {"sha": "c38ec99f32eb47fb08239f50e08259dd46ea0f59", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9a0db3c8ce0aeea0a5371219eebc9323066284/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9a0db3c8ce0aeea0a5371219eebc9323066284/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=bf9a0db3c8ce0aeea0a5371219eebc9323066284", "patch": "@@ -430,6 +430,8 @@ static rtx inc_for_reload (rtx, rtx, rtx, int);\n static void add_auto_inc_notes (rtx, rtx);\n #endif\n static void copy_eh_notes (rtx, rtx);\n+static int reloads_conflict (int, int);\n+static rtx gen_reload (rtx, rtx, int, enum reload_type);\n \f\n /* Initialize the reload pass once per compilation.  */\n \n@@ -4593,7 +4595,7 @@ reload_reg_reaches_end_p (unsigned int regno, int opnum, enum reload_type type)\n \n    This function uses the same algorithm as reload_reg_free_p above.  */\n \n-int\n+static int\n reloads_conflict (int r1, int r2)\n {\n   enum reload_type r1_type = rld[r1].when_needed;\n@@ -7334,7 +7336,7 @@ emit_reload_insns (struct insn_chain *chain)\n \n    Returns first insn emitted.  */\n \n-rtx\n+static rtx\n gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n {\n   rtx last = get_last_insn ();"}]}