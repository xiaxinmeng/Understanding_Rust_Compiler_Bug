{"sha": "82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJmZWViOGQ2ODA0Y2ZhMjFkNDUxYWRlNmUxMTI0MGYwZGMwZDViOQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-23T17:02:15Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-23T17:02:15Z"}, "message": "Add BMI2 support.\n\ngcc/\n\n2011-08-23  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (type): Add imulx, ishiftx and rotatex.\n\t(length_immediate): Handle imulx, ishiftx and rotatex.\n\t(imm_disp): Ditto.\n\t(isa): Add bmi2.\n\t(enabled): Handle bmi2.\n\t(w): New mode attribute.\n\t(*mul<mode><dwi>3): Split from *<u>mul<mode><dwi>3.\n\t(*umul<mode><dwi>3): Ditto.  Add imulx BMI2 alternative.\n\t(*bmi2_umulditi3_1): New insn pattern.\n\t(*bmi2_umulsidi3_1): Ditto.\n\t(*umul<mode><dwi>3 splitter): New splitter to avoid flags\n\tdependency.\n\t(*bmi2_ashl<mode>3_1): New insn pattern.\n\t(*ashl<mode>3_1): Add ishiftx BMI2 alternative.\n\t(*ashl<mode>3_1 splitter): New splitter to avoid flags\n\tdependency.\n\t(*bmi2_ashlsi3_1_zext): New insn pattern.\n\t(*ashlsi3_1_zext): Add ishiftx BMI2 alternative.\n\t(*ashlsi3_1_zext splitter): New splitter to avoid flags\n\tdependency.\n\t(*bmi2_<shiftrt_insn><mode>3_1): New insn pattern.\n\t(*<shiftrt_insn><mode>3_1): Add ishiftx BMI2 alternative.\n\t(*<shiftrt_insn><mode>3_1 splitter): New splitter to avoid\n\tflags dependency.\n\t(*bmi2_<shiftrt_insn>si3_1_zext): New insn pattern.\n\t(*<shiftrt_insn>si3_1_zext): Add ishiftx BMI2 alternative.\n\t(*<shiftrt_insn>si3_1_zext splitter): New splitter to avoid\n\tflags dependency.\n\t(*bmi2_rorx<mode>3_1): New insn pattern.\n\t(*<rotate_insn><mode>3_1): Add rotatex BMI2 alternative.\n\t(*rotate<mode>3_1 splitter): New splitter to avoid flags\n\tdependency.\n\t(*rotatert<mode>3_1 splitter): Ditto.\n\t(*bmi2_rorxsi3_1_zext): New insn pattern.\n\t(*<rotate_insn>si3_1_zext): Add rotatex BMI2 alternative.\n\t(*rotatesi3_1_zext splitter): New splitter to avoid flags\n\tdependency.\n\t(*rotatertsi3_1_zext splitter): Ditto.\n\n2011-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_BMI2_SET):\n\tNew.\n\t(OPTION_MASK_ISA_BMI2_UNSET): Likewise.\n\t(ix86_handle_option): Handle OPT_mbmi2 case.\n\t* config.gcc (i[34567]86-*-*): Add bmi2intrin.h.\n\t(x86_64-*-*): Likewise.\n\t* config/i386/bmi2intrin.h: New file.\n\t* config/i386/cpuid.h (bit_BMI2): New.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n\tBMI2 feature.\n\t* config/i386/i386-c.c (ix86_target_macros_internal):\n\tConditionally define __BMI2__.\n\t* config/i386/i386.c (ix86_option_override_internal): Define PTA_BMI2.\n\tHandle BMI2 option.\n\t(ix86_valid_target_attribute_inner_p): Handle BMI2 option.\n\t(print_reg): New code.\n\t(ix86_print_operand): Likewise.\n\t(ix86_builtins): Add IX86_BUILTIN_BZHI32, IX86_BUILTIN_BZHI64,\n\tIX86_BUILTIN_PDEP32, IX86_BUILTIN_PDEP64, IX86_BUILTIN_PEXT32,\n\tIX86_BUILTIN_PEXT64.\n\t(bdesc_args): Add IX86_BUILTIN_BZHI32, IX86_BUILTIN_BZHI64,\n\tIX86_BUILTIN_PDEP32, IX86_BUILTIN_PDEP64, IX86_BUILTIN_PEXT32,\n\tIX86_BUILTIN_PEXT64.\n\t* config/i386/i386.h (TARGET_BMI2): New.\n\t* config/i386/i386.md (UNSPEC_PDEP): New.\n\t(UNSPEC_PEXT): Likewise.\n\t(*bmi2_bzhi_<mode>3): Likewise.\n\t(*bmi2_pdep_<mode>3): Likewise.\n\t(*bmi2_pext_<mode>3): Likewise.\n\t* config/i386/i386.opt (mbmi2): New.\n\t* config/i386/x86intrin.h: Include bmi2intrin.h when __BMI2__\n\tis defined.\n\t* doc/extend.texi: Document BMI2 built-in functions.\n\t* doc/invoke.texi: Document -mbmi2.\n\ngcc/testsuite/\n\n2011-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n\n\t* g++.dg/other/i386-2.C: Add -mbmi2 check.\n\t* g++.dg/other/i386-3.C: Likewise.\n\t* gcc.target/i386/bmi2-bzhi32-1.c: New testcase.\n\t* gcc.target/i386/bmi2-bzhi32-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-bzhi64-1.c: Likewise.\n\t* gcc.target/i386/bmi2-bzhi64-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-mulx32-1.c: Likewise.\n\t* gcc.target/i386/bmi2-mulx32-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-mulx64-1.c: Likewise.\n\t* gcc.target/i386/bmi2-mulx64-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-pdep32-1.c: Likewise.\n\t* gcc.target/i386/bmi2-pdep32-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-pdep64-1.c: Likewise.\n\t* gcc.target/i386/bmi2-pdep64-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-pext32-1.c: Likewise.\n\t* gcc.target/i386/bmi2-pext32-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-pext64-1.c: Likewise.\n\t* gcc.target/i386/bmi2-pext64-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-rorx32-1.c: Likewise.\n\t* gcc.target/i386/bmi2-rorx32-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-rorx64-1.c: Likewise.\n\t* gcc.target/i386/bmi2-rorx64-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-sarx32-1.c: Likewise.\n\t* gcc.target/i386/bmi2-sarx32-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-sarx64-1.c: Likewise.\n\t* gcc.target/i386/bmi2-sarx64-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-shlx32-1.c: Likewise.\n\t* gcc.target/i386/bmi2-shlx32-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-shlx64-1.c: Likewise.\n\t* gcc.target/i386/bmi2-shlx64-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-shrx32-1.c: Likewise.\n\t* gcc.target/i386/bmi2-shrx32-1a.c: Likewise.\n\t* gcc.target/i386/bmi2-shrx64-1.c: Likewise.\n\t* gcc.target/i386/bmi2-shrx64-1a.c: Likewise.\n\t* gcc.target/i386/i386.exp (check_effective_target_bmi2): New.\n\t* gcc.target/i386/sse-12.c: Add BMI2.\n\t* gcc.target/i386/sse-13.c: Likewise.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\t* gcc.target/i386/sse-22.c: Likewise.\n\t* gcc.target/i386/sse-23.c: Likewise.\n\nFrom-SVN: r178001", "tree": {"sha": "65c5f0f9a69559871dcc5e906bf7beb59b59158f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65c5f0f9a69559871dcc5e906bf7beb59b59158f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/comments", "author": null, "committer": null, "parents": [{"sha": "30d1352ecc56b7a0493c2b472eb229eb00404dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d1352ecc56b7a0493c2b472eb229eb00404dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d1352ecc56b7a0493c2b472eb229eb00404dbe"}], "stats": {"total": 1469, "additions": 1397, "deletions": 72}, "files": [{"sha": "2fed6fa063ce01f6b2ae3109f59a9ffc3a1e5a8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -1,3 +1,81 @@\n+2011-08-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (type): Add imulx, ishiftx and rotatex.\n+\t(length_immediate): Handle imulx, ishiftx and rotatex.\n+\t(imm_disp): Ditto.\n+\t(isa): Add bmi2.\n+\t(enabled): Handle bmi2.\n+\t(w): New mode attribute.\n+\t(*mul<mode><dwi>3): Split from *<u>mul<mode><dwi>3.\n+\t(*umul<mode><dwi>3): Ditto.  Add imulx BMI2 alternative.\n+\t(*bmi2_umulditi3_1): New insn pattern.\n+\t(*bmi2_umulsidi3_1): Ditto.\n+\t(*umul<mode><dwi>3 splitter): New splitter to avoid flags\n+\tdependency.\n+\t(*bmi2_ashl<mode>3_1): New insn pattern.\n+\t(*ashl<mode>3_1): Add ishiftx BMI2 alternative.\n+\t(*ashl<mode>3_1 splitter): New splitter to avoid flags\n+\tdependency.\n+\t(*bmi2_ashlsi3_1_zext): New insn pattern.\n+\t(*ashlsi3_1_zext): Add ishiftx BMI2 alternative.\n+\t(*ashlsi3_1_zext splitter): New splitter to avoid flags\n+\tdependency.\n+\t(*bmi2_<shiftrt_insn><mode>3_1): New insn pattern.\n+\t(*<shiftrt_insn><mode>3_1): Add ishiftx BMI2 alternative.\n+\t(*<shiftrt_insn><mode>3_1 splitter): New splitter to avoid\n+\tflags dependency.\n+\t(*bmi2_<shiftrt_insn>si3_1_zext): New insn pattern.\n+\t(*<shiftrt_insn>si3_1_zext): Add ishiftx BMI2 alternative.\n+\t(*<shiftrt_insn>si3_1_zext splitter): New splitter to avoid\n+\tflags dependency.\n+\t(*bmi2_rorx<mode>3_1): New insn pattern.\n+\t(*<rotate_insn><mode>3_1): Add rotatex BMI2 alternative.\n+\t(*rotate<mode>3_1 splitter): New splitter to avoid flags\n+\tdependency.\n+\t(*rotatert<mode>3_1 splitter): Ditto.\n+\t(*bmi2_rorxsi3_1_zext): New insn pattern.\n+\t(*<rotate_insn>si3_1_zext): Add rotatex BMI2 alternative.\n+\t(*rotatesi3_1_zext splitter): New splitter to avoid flags\n+\tdependency.\n+\t(*rotatertsi3_1_zext splitter): Ditto.\n+\n+2011-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_BMI2_SET):\n+\tNew.\n+\t(OPTION_MASK_ISA_BMI2_UNSET): Likewise.\n+\t(ix86_handle_option): Handle OPT_mbmi2 case.\n+\t* config.gcc (i[34567]86-*-*): Add bmi2intrin.h.\n+\t(x86_64-*-*): Likewise.\n+\t* config/i386/bmi2intrin.h: New file.\n+\t* config/i386/cpuid.h (bit_BMI2): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\tBMI2 feature.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal):\n+\tConditionally define __BMI2__.\n+\t* config/i386/i386.c (ix86_option_override_internal): Define PTA_BMI2.\n+\tHandle BMI2 option.\n+\t(ix86_valid_target_attribute_inner_p): Handle BMI2 option.\n+\t(print_reg): New code.\n+\t(ix86_print_operand): Likewise.\n+\t(ix86_builtins): Add IX86_BUILTIN_BZHI32, IX86_BUILTIN_BZHI64,\n+\tIX86_BUILTIN_PDEP32, IX86_BUILTIN_PDEP64, IX86_BUILTIN_PEXT32,\n+\tIX86_BUILTIN_PEXT64.\n+\t(bdesc_args): Add IX86_BUILTIN_BZHI32, IX86_BUILTIN_BZHI64,\n+\tIX86_BUILTIN_PDEP32, IX86_BUILTIN_PDEP64, IX86_BUILTIN_PEXT32,\n+\tIX86_BUILTIN_PEXT64.\n+\t* config/i386/i386.h (TARGET_BMI2): New.\n+\t* config/i386/i386.md (UNSPEC_PDEP): New.\n+\t(UNSPEC_PEXT): Likewise.\n+\t(*bmi2_bzhi_<mode>3): Likewise.\n+\t(*bmi2_pdep_<mode>3): Likewise.\n+\t(*bmi2_pext_<mode>3): Likewise.\n+\t* config/i386/i386.opt (mbmi2): New.\n+\t* config/i386/x86intrin.h: Include bmi2intrin.h when __BMI2__\n+\tis defined.\n+\t* doc/extend.texi: Document BMI2 built-in functions.\n+\t* doc/invoke.texi: Document -mbmi2.\n+\n 2011-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/50161"}, {"sha": "99643d65f9b6e070e36e05cc1cc5aa28b4544ec7", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -79,6 +79,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_ABM | OPTION_MASK_ISA_POPCNT)\n \n #define OPTION_MASK_ISA_BMI_SET OPTION_MASK_ISA_BMI\n+#define OPTION_MASK_ISA_BMI2_SET OPTION_MASK_ISA_BMI2\n #define OPTION_MASK_ISA_TBM_SET OPTION_MASK_ISA_TBM\n #define OPTION_MASK_ISA_POPCNT_SET OPTION_MASK_ISA_POPCNT\n #define OPTION_MASK_ISA_CX16_SET OPTION_MASK_ISA_CX16\n@@ -137,6 +138,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_PCLMUL_UNSET OPTION_MASK_ISA_PCLMUL\n #define OPTION_MASK_ISA_ABM_UNSET OPTION_MASK_ISA_ABM\n #define OPTION_MASK_ISA_BMI_UNSET OPTION_MASK_ISA_BMI\n+#define OPTION_MASK_ISA_BMI2_UNSET OPTION_MASK_ISA_BMI2\n #define OPTION_MASK_ISA_TBM_UNSET OPTION_MASK_ISA_TBM\n #define OPTION_MASK_ISA_POPCNT_UNSET OPTION_MASK_ISA_POPCNT\n #define OPTION_MASK_ISA_CX16_UNSET OPTION_MASK_ISA_CX16\n@@ -395,6 +397,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mbmi2:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_BMI2_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_BMI2_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_BMI2_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_BMI2_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mtbm:\n       if (value)\n \t{"}, {"sha": "67aae86d7400dbce677f6888b6798f4cec6e1d52", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -352,7 +352,8 @@ i[34567]86-*-*)\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n-\t\t       lzcntintrin.h bmiintrin.h tbmintrin.h avx2intrin.h\"\n+\t\t       lzcntintrin.h bmiintrin.h bmi2intrin.h tbmintrin.h\n+\t\t       avx2intrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -364,7 +365,8 @@ x86_64-*-*)\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n-\t\t       lzcntintrin.h bmiintrin.h tbmintrin.h avx2intrin.h\"\n+\t\t       lzcntintrin.h bmiintrin.h tbmintrin.h bmi2intrin.h\n+\t\t       avx2intrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "f3ffa52a916cb8257b770d786d92c24146cb7627", "filename": "gcc/config/i386/bmi2intrin.h", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmi2intrin.h?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,81 @@\n+/* Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _X86INTRIN_H_INCLUDED\n+# error \"Never use <bmi2intrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef __BMI2__\n+# error \"BMI2 instruction set not enabled\"\n+#endif /* __BMI2__ */\n+\n+#ifndef _BMI2INTRIN_H_INCLUDED\n+#define _BMI2INTRIN_H_INCLUDED\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bzhi_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return __builtin_ia32_bzhi_si (__X, __Y);\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pdep_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return __builtin_ia32_pdep_si (__X, __Y);\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pext_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return __builtin_ia32_pext_si (__X, __Y);\n+}\n+\n+#ifdef  __x86_64__\n+\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_bzhi_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  return __builtin_ia32_bzhi_di (__X, __Y);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pdep_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  return __builtin_ia32_pdep_di (__X, __Y);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_pext_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  return __builtin_ia32_pext_di (__X, __Y);\n+}\n+\n+#endif /* __x86_64__  */\n+\n+#endif /* _BMI2INTRIN_H_INCLUDED */"}, {"sha": "5da8fd2e9f4c2f0eda94cae235bb73804419e2a8", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -67,6 +67,7 @@\n #define bit_FSGSBASE\t(1 << 0)\n #define bit_BMI\t\t(1 << 3)\n #define bit_AVX2\t(1 << 5)\n+#define bit_BMI2\t(1 << 8)\n \n #if defined(__i386__) && defined(__PIC__)\n /* %ebx may be the PIC register.  */"}, {"sha": "8107ecee7c96ac821199cca8646bca0747066479", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -396,7 +396,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_popcnt = 0, has_aes = 0, has_avx = 0, has_avx2 = 0;\n   unsigned int has_pclmul = 0, has_abm = 0, has_lwp = 0;\n   unsigned int has_fma = 0, has_fma4 = 0, has_xop = 0;\n-  unsigned int has_bmi = 0, has_tbm = 0, has_lzcnt = 0;\n+  unsigned int has_bmi = 0, has_bmi2 = 0, has_tbm = 0, has_lzcnt = 0;\n \n   bool arch;\n \n@@ -475,6 +475,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \n       has_bmi = ebx & bit_BMI;\n       has_avx2 = ebx & bit_AVX2;\n+      has_bmi2 = ebx & bit_BMI2;\n     }\n \n   if (!arch)\n@@ -715,6 +716,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *fma4 = has_fma4 ? \" -mfma4\" : \" -mno-fma4\";\n       const char *xop = has_xop ? \" -mxop\" : \" -mno-xop\";\n       const char *bmi = has_bmi ? \" -mbmi\" : \" -mno-bmi\";\n+      const char *bmi2 = has_bmi2 ? \" -mbmi2\" : \" -mno-bmi2\";\n       const char *tbm = has_tbm ? \" -mtbm\" : \" -mno-tbm\";\n       const char *avx = has_avx ? \" -mavx\" : \" -mno-avx\";\n       const char *avx2 = has_avx2 ? \" -mavx2\" : \" -mno-avx2\";\n@@ -723,8 +725,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *lzcnt = has_lzcnt ? \" -mlzcnt\" : \" -mno-lzcnt\";\n \n       options = concat (options, cx16, sahf, movbe, ase, pclmul,\n-\t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, tbm,\n-\t\t\tavx2, avx, sse4_2, sse4_1, lzcnt, NULL);\n+\t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, bmi2,\n+\t\t\ttbm, avx, avx2, sse4_2, sse4_1, lzcnt, NULL);\n     }\n \n done:"}, {"sha": "d4b0b086b393f390cba8d03369d859ec546c9968", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -273,6 +273,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__ABM__\");\n   if (isa_flag & OPTION_MASK_ISA_BMI)\n     def_or_undef (parse_in, \"__BMI__\");\n+  if (isa_flag & OPTION_MASK_ISA_BMI2)\n+    def_or_undef (parse_in, \"__BMI2__\");\n   if (isa_flag & OPTION_MASK_ISA_LZCNT)\n     def_or_undef (parse_in, \"__LZCNT__\");\n   if (isa_flag & OPTION_MASK_ISA_TBM)"}, {"sha": "61f2c5c87e7e8f3134cd5978e28ddf9cdc2328a9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -2664,6 +2664,7 @@ ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n     { \"-mmmx\",\t\tOPTION_MASK_ISA_MMX },\n     { \"-mabm\",\t\tOPTION_MASK_ISA_ABM },\n     { \"-mbmi\",\t\tOPTION_MASK_ISA_BMI },\n+    { \"-mbmi2\", \tOPTION_MASK_ISA_BMI2 },\n     { \"-mlzcnt\",\tOPTION_MASK_ISA_LZCNT },\n     { \"-mtbm\",\t\tOPTION_MASK_ISA_TBM },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n@@ -2921,6 +2922,7 @@ ix86_option_override_internal (bool main_args_p)\n #define PTA_TBM\t\t \t(HOST_WIDE_INT_1 << 28)\n #define PTA_XOP\t\t \t(HOST_WIDE_INT_1 << 29)\n #define PTA_AVX2\t\t(HOST_WIDE_INT_1 << 30)\n+#define PTA_BMI2\t \t(HOST_WIDE_INT_1 << 31)\n /* if this reaches 64, need to widen struct pta flags below */\n \n   static struct pta\n@@ -2978,8 +2980,8 @@ ix86_option_override_internal (bool main_args_p)\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_SSE4_1 | PTA_SSE4_2 | PTA_AVX | PTA_AVX2\n \t| PTA_CX16 | PTA_POPCNT | PTA_AES | PTA_PCLMUL | PTA_FSGSBASE\n-\t| PTA_RDRND | PTA_F16C | PTA_BMI | PTA_LZCNT | PTA_FMA\n-\t| PTA_MOVBE},\n+\t| PTA_RDRND | PTA_F16C | PTA_BMI | PTA_BMI2 | PTA_LZCNT\n+        | PTA_FMA | PTA_MOVBE},\n       {\"atom\", PROCESSOR_ATOM, CPU_ATOM,\n \tPTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n \t| PTA_SSSE3 | PTA_CX16 | PTA_MOVBE},\n@@ -3300,6 +3302,9 @@ ix86_option_override_internal (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_TBM\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_TBM))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_TBM;\n+\tif (processor_alias_table[i].flags & PTA_BMI2\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_BMI2))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_BMI2;\n \tif (processor_alias_table[i].flags & PTA_CX16\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_CX16))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_CX16;\n@@ -4053,6 +4058,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"3dnow\",\tOPT_m3dnow),\n     IX86_ATTR_ISA (\"abm\",\tOPT_mabm),\n     IX86_ATTR_ISA (\"bmi\",\tOPT_mbmi),\n+    IX86_ATTR_ISA (\"bmi2\",\tOPT_mbmi2),\n     IX86_ATTR_ISA (\"lzcnt\",\tOPT_mlzcnt),\n     IX86_ATTR_ISA (\"tbm\",\tOPT_mtbm),\n     IX86_ATTR_ISA (\"aes\",\tOPT_maes),\n@@ -24242,6 +24248,13 @@ enum ix86_builtins\n   IX86_BUILTIN_BEXTRI32,\n   IX86_BUILTIN_BEXTRI64,\n \n+  /* BMI2 instructions. */\n+  IX86_BUILTIN_BZHI32,\n+  IX86_BUILTIN_BZHI64,\n+  IX86_BUILTIN_PDEP32,\n+  IX86_BUILTIN_PDEP64,\n+  IX86_BUILTIN_PEXT32,\n+  IX86_BUILTIN_PEXT64,\n \n   /* FSGSBASE instructions.  */\n   IX86_BUILTIN_RDFSBASE32,\n@@ -25375,6 +25388,14 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtph2ps256, \"__builtin_ia32_vcvtph2ps256\", IX86_BUILTIN_CVTPH2PS256, UNKNOWN, (int) V8SF_FTYPE_V8HI },\n   { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtps2ph, \"__builtin_ia32_vcvtps2ph\", IX86_BUILTIN_CVTPS2PH, UNKNOWN, (int) V8HI_FTYPE_V4SF_INT },\n   { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtps2ph256, \"__builtin_ia32_vcvtps2ph256\", IX86_BUILTIN_CVTPS2PH256, UNKNOWN, (int) V8HI_FTYPE_V8SF_INT },\n+\n+  /* BMI2 */\n+  { OPTION_MASK_ISA_BMI2, CODE_FOR_bmi2_bzhi_si3, \"__builtin_ia32_bzhi_si\", IX86_BUILTIN_BZHI32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT },\n+  { OPTION_MASK_ISA_BMI2, CODE_FOR_bmi2_bzhi_di3, \"__builtin_ia32_bzhi_di\", IX86_BUILTIN_BZHI64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64 },\n+  { OPTION_MASK_ISA_BMI2, CODE_FOR_bmi2_pdep_si3, \"__builtin_ia32_pdep_si\", IX86_BUILTIN_PDEP32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT },\n+  { OPTION_MASK_ISA_BMI2, CODE_FOR_bmi2_pdep_di3, \"__builtin_ia32_pdep_di\", IX86_BUILTIN_PDEP64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64 },\n+  { OPTION_MASK_ISA_BMI2, CODE_FOR_bmi2_pext_si3, \"__builtin_ia32_pext_si\", IX86_BUILTIN_PEXT32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT },\n+  { OPTION_MASK_ISA_BMI2, CODE_FOR_bmi2_pext_di3, \"__builtin_ia32_pext_di\", IX86_BUILTIN_PEXT64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64 },\n };\n \n /* FMA4 and XOP.  */"}, {"sha": "47442a0e50f18abca1e22a383433f6be5fe595ce", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -62,6 +62,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_ROUND\tOPTION_ISA_ROUND\n #define TARGET_ABM\tOPTION_ISA_ABM\n #define TARGET_BMI\tOPTION_ISA_BMI\n+#define TARGET_BMI2\tOPTION_ISA_BMI2\n #define TARGET_LZCNT\tOPTION_ISA_LZCNT\n #define TARGET_TBM\tOPTION_ISA_TBM\n #define TARGET_POPCNT\tOPTION_ISA_POPCNT"}, {"sha": "3ce2a015e3f559e8d085b01c9448764c651615d9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 423, "deletions": 53, "changes": 476, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -244,6 +244,10 @@\n \n   ;; For RDRAND support\n   UNSPEC_RDRAND\n+\n+  ;; For BMI2 support\n+  UNSPEC_PDEP\n+  UNSPEC_PEXT\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -385,7 +389,7 @@\n (define_attr \"type\"\n   \"other,multi,\n    alu,alu1,negnot,imov,imovx,lea,\n-   incdec,ishift,ishift1,rotate,rotate1,imul,idiv,\n+   incdec,ishift,ishiftx,ishift1,rotate,rotatex,rotate1,imul,imulx,idiv,\n    icmp,test,ibr,setcc,icmov,\n    push,pop,call,callv,leave,\n    str,bitmanip,\n@@ -418,12 +422,12 @@\n ;; The (bounding maximum) length of an instruction immediate.\n (define_attr \"length_immediate\" \"\"\n   (cond [(eq_attr \"type\" \"incdec,setcc,icmov,str,lea,other,multi,idiv,leave,\n-                          bitmanip\")\n+                          bitmanip,imulx\")\n \t   (const_int 0)\n \t (eq_attr \"unit\" \"i387,sse,mmx\")\n \t   (const_int 0)\n-\t (eq_attr \"type\" \"alu,alu1,negnot,imovx,ishift,rotate,ishift1,rotate1,\n-\t\t\t  imul,icmp,push,pop\")\n+\t (eq_attr \"type\" \"alu,alu1,negnot,imovx,ishift,ishiftx,ishift1,\n+\t\t\t  rotate,rotatex,rotate1,imul,icmp,push,pop\")\n \t   (symbol_ref \"ix86_attr_length_immediate_default (insn, true)\")\n \t (eq_attr \"type\" \"imov,test\")\n \t   (symbol_ref \"ix86_attr_length_immediate_default (insn, false)\")\n@@ -683,7 +687,7 @@\n \t      (and (match_operand 0 \"memory_displacement_operand\" \"\")\n \t\t   (match_operand 1 \"immediate_operand\" \"\")))\n \t   (const_string \"true\")\n-\t (and (eq_attr \"type\" \"alu,ishift,rotate,imul,idiv\")\n+\t (and (eq_attr \"type\" \"alu,ishift,ishiftx,rotate,rotatex,imul,idiv\")\n \t      (and (match_operand 0 \"memory_displacement_operand\" \"\")\n \t\t   (match_operand 2 \"immediate_operand\" \"\")))\n \t   (const_string \"true\")\n@@ -707,12 +711,13 @@\n (define_attr \"movu\" \"0,1\" (const_string \"0\"))\n \n ;; Used to control the \"enabled\" attribute on a per-instruction basis.\n-(define_attr \"isa\" \"base,noavx,avx\"\n+(define_attr \"isa\" \"base,noavx,avx,bmi2\"\n   (const_string \"base\"))\n \n (define_attr \"enabled\" \"\"\n   (cond [(eq_attr \"isa\" \"noavx\") (symbol_ref \"!TARGET_AVX\")\n \t (eq_attr \"isa\" \"avx\") (symbol_ref \"TARGET_AVX\")\n+\t (eq_attr \"isa\" \"bmi2\") (symbol_ref \"TARGET_BMI2\")\n \t]\n \t(const_int 1)))\n \n@@ -6853,16 +6858,103 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_QIMODE_MATH\")\n \n-(define_insn \"*<u>mul<mode><dwi>3_1\"\n+(define_insn \"*bmi2_umulditi3_1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(mult:DI\n+\t  (match_operand:DI 2 \"nonimmediate_operand\" \"%d\")\n+\t  (match_operand:DI 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:DI 1 \"register_operand\" \"=r\")\n+\t(truncate:DI\n+\t  (lshiftrt:TI\n+\t    (mult:TI (zero_extend:TI (match_dup 2))\n+\t\t     (zero_extend:TI (match_dup 3)))\n+\t    (const_int 64))))]\n+  \"TARGET_64BIT && TARGET_BMI2\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"mulx\\t{%3, %0, %1|%1, %0, %3}\"\n+  [(set_attr \"type\" \"imulx\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"DI\")])\n+\n+(define_insn \"*bmi2_umulsidi3_1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mult:SI\n+\t  (match_operand:SI 2 \"nonimmediate_operand\" \"%d\")\n+\t  (match_operand:SI 3 \"nonimmediate_operand\" \"rm\")))\n+   (set (match_operand:SI 1 \"register_operand\" \"=r\")\n+\t(truncate:SI\n+\t  (lshiftrt:DI\n+\t    (mult:DI (zero_extend:DI (match_dup 2))\n+\t\t     (zero_extend:DI (match_dup 3)))\n+\t    (const_int 32))))]\n+  \"!TARGET_64BIT && TARGET_BMI2\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"mulx\\t{%3, %0, %1|%1, %0, %3}\"\n+  [(set_attr \"type\" \"imulx\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*umul<mode><dwi>3_1\"\n+  [(set (match_operand:<DWI> 0 \"register_operand\" \"=A,r\")\n+\t(mult:<DWI>\n+\t  (zero_extend:<DWI>\n+\t    (match_operand:DWIH 1 \"nonimmediate_operand\" \"%0,d\"))\n+\t  (zero_extend:<DWI>\n+\t    (match_operand:DWIH 2 \"nonimmediate_operand\" \"rm,rm\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"@\n+   mul{<imodesuffix>}\\t%2\n+   #\"\n+  [(set_attr \"isa\" \"base,bmi2\")\n+   (set_attr \"type\" \"imul,imulx\")\n+   (set_attr \"length_immediate\" \"0,*\")\n+   (set (attr \"athlon_decode\")\n+\t(cond [(eq_attr \"alternative\" \"0\")\n+\t\t (if_then_else (eq_attr \"cpu\" \"athlon\")\n+\t\t   (const_string \"vector\")\n+\t\t   (const_string \"double\"))]\n+\t      (const_string \"*\")))\n+   (set_attr \"amdfam10_decode\" \"double,*\")\n+   (set_attr \"bdver1_decode\" \"direct,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Convert mul to the mulx pattern to avoid flags dependency.\n+(define_split\n+ [(set (match_operand:<DWI> 0 \"register_operand\" \"\")\n+       (mult:<DWI>\n+\t (zero_extend:<DWI>\n+\t   (match_operand:DWIH 1 \"register_operand\" \"\"))\n+\t (zero_extend:<DWI>\n+\t   (match_operand:DWIH 2 \"nonimmediate_operand\" \"\"))))\n+  (clobber (reg:CC FLAGS_REG))]\n+ \"TARGET_BMI2 && reload_completed\n+  && true_regnum (operands[1]) == DX_REG\"\n+  [(parallel [(set (match_dup 3)\n+\t\t   (mult:DWIH (match_dup 1) (match_dup 2)))\n+\t      (set (match_dup 4)\n+\t\t   (truncate:DWIH\n+\t\t     (lshiftrt:<DWI>\n+\t\t       (mult:<DWI> (zero_extend:<DWI> (match_dup 1))\n+\t\t\t\t   (zero_extend:<DWI> (match_dup 2)))\n+\t\t       (match_dup 5))))])]\n+{\n+  split_double_mode (<DWI>mode, &operands[0], 1, &operands[3], &operands[4]);\n+\n+  operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\n+})\n+\n+(define_insn \"*mul<mode><dwi>3_1\"\n   [(set (match_operand:<DWI> 0 \"register_operand\" \"=A\")\n \t(mult:<DWI>\n-\t  (any_extend:<DWI>\n+\t  (sign_extend:<DWI>\n \t    (match_operand:DWIH 1 \"nonimmediate_operand\" \"%0\"))\n-\t  (any_extend:<DWI>\n+\t  (sign_extend:<DWI>\n \t    (match_operand:DWIH 2 \"nonimmediate_operand\" \"rm\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n-  \"<sgnprefix>mul{<imodesuffix>}\\t%2\"\n+  \"imul{<imodesuffix>}\\t%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length_immediate\" \"0\")\n    (set (attr \"athlon_decode\")\n@@ -9060,16 +9152,26 @@\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*bmi2_ashl<mode>3_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(ashift:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+\t\t      (match_operand:SWI48 2 \"register_operand\" \"r\")))]\n+  \"TARGET_BMI2\"\n+  \"shlx\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ishiftx\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*ashl<mode>3_1\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(ashift:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,l\")\n-\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"c<S>,M\")))\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r,r\")\n+\t(ashift:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,l,rm\")\n+\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"c<S>,M,r\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_LEA:\n+    case TYPE_ISHIFTX:\n       return \"#\";\n \n     case TYPE_ALU:\n@@ -9085,9 +9187,12 @@\n \treturn \"sal{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n     }\n }\n-  [(set (attr \"type\")\n+  [(set_attr \"isa\" \"base,base,bmi2\")\n+   (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"1\")\n \t      (const_string \"lea\")\n+\t    (eq_attr \"alternative\" \"2\")\n+\t      (const_string \"ishiftx\")\n             (and (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n \t\t          (const_int 0))\n \t\t      (match_operand 0 \"register_operand\" \"\"))\n@@ -9106,17 +9211,39 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Convert shift to the shiftx pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"\")\n+\t(ashift:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"\")\n+\t\t      (match_operand:QI 2 \"register_operand\" \"\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(ashift:SWI48 (match_dup 1) (match_dup 2)))]\n+  \"operands[2] = gen_lowpart (<MODE>mode, operands[2]);\")\n+\n+(define_insn \"*bmi2_ashlsi3_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t\t     (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_64BIT && TARGET_BMI2\"\n+  \"shlx\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"type\" \"ishiftx\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"*ashlsi3_1_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n \t(zero_extend:DI\n-\t  (ashift:SI (match_operand:SI 1 \"register_operand\" \"0,l\")\n-\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"cI,M\"))))\n+\t  (ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,l,rm\")\n+\t\t     (match_operand:QI 2 \"nonmemory_operand\" \"cI,M,r\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_LEA:\n+    case TYPE_ISHIFTX:\n       return \"#\";\n \n     case TYPE_ALU:\n@@ -9131,9 +9258,12 @@\n \treturn \"sal{l}\\t{%2, %k0|%k0, %2}\";\n     }\n }\n-  [(set (attr \"type\")\n+  [(set_attr \"isa\" \"base,base,bmi2\")\n+   (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"1\")\n \t      (const_string \"lea\")\n+\t    (eq_attr \"alternative\" \"2\")\n+\t      (const_string \"ishiftx\")\n             (and (ne (symbol_ref \"TARGET_DOUBLE_WITH_ADD\")\n \t\t     (const_int 0))\n \t\t (match_operand 2 \"const1_operand\" \"\"))\n@@ -9151,6 +9281,18 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"SI\")])\n \n+;; Convert shift to the shiftx pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI\n+\t  (ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+\t\t     (match_operand:QI 2 \"register_operand\" \"\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && TARGET_BMI2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (ashift:SI (match_dup 1) (match_dup 2))))]\n+  \"operands[2] = gen_lowpart (SImode, operands[2]);\")\n+\n (define_insn \"*ashlhi3_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n@@ -9767,20 +9909,38 @@\n   DONE;\n })\n \n+(define_insn \"*bmi2_<shiftrt_insn><mode>3_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(any_shiftrt:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+\t\t\t   (match_operand:SWI48 2 \"register_operand\" \"r\")))]\n+  \"TARGET_BMI2\"\n+  \"<shiftrt>x\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ishiftx\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*<shiftrt_insn><mode>3_1\"\n-  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n-\t(any_shiftrt:SWI (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n-\t\t\t (match_operand:QI 2 \"nonmemory_operand\" \"c<S>\")))\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(any_shiftrt:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,rm\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"c<S>,r\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n-  if (operands[2] == const1_rtx\n-      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-    return \"<shiftrt>{<imodesuffix>}\\t%0\";\n-  else\n-    return \"<shiftrt>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ISHIFTX:\n+      return \"#\";\n+\n+    default:\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"<shiftrt>{<imodesuffix>}\\t%0\";\n+      else\n+\treturn \"<shiftrt>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+    }\n }\n-  [(set_attr \"type\" \"ishift\")\n+  [(set_attr \"isa\" \"base,bmi2\")\n+   (set_attr \"type\" \"ishift,ishiftx\")\n    (set (attr \"length_immediate\")\n      (if_then_else\n        (and (match_operand 2 \"const1_operand\" \"\")\n@@ -9790,19 +9950,84 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<shiftrt_insn>si3_1_zext\"\n+;; Convert shift to the shiftx pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"\")\n+\t(any_shiftrt:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"\")\n+\t\t\t   (match_operand:QI 2 \"register_operand\" \"\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(any_shiftrt:SWI48 (match_dup 1) (match_dup 2)))]\n+  \"operands[2] = gen_lowpart (<MODE>mode, operands[2]);\")\n+\n+(define_insn \"*bmi2_<shiftrt_insn>si3_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (any_shiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"cI\"))))\n+\t  (any_shiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t\t\t  (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_64BIT && TARGET_BMI2\"\n+  \"<shiftrt>x\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"type\" \"ishiftx\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*<shiftrt_insn>si3_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI\n+\t  (any_shiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm\")\n+\t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"cI,r\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ISHIFTX:\n+      return \"#\";\n+\n+    default:\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"<shiftrt>{l}\\t%k0\";\n+      else\n+\treturn \"<shiftrt>{l}\\t{%2, %k0|%k0, %2}\";\n+    }\n+}\n+  [(set_attr \"isa\" \"base,bmi2\")\n+   (set_attr \"type\" \"ishift,ishiftx\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (and (match_operand 2 \"const1_operand\" \"\")\n+\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t(const_int 0)))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n+   (set_attr \"mode\" \"SI\")])\n+\n+;; Convert shift to the shiftx pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI\n+\t  (any_shiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+\t\t\t  (match_operand:QI 2 \"register_operand\" \"\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && TARGET_BMI2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (any_shiftrt:SI (match_dup 1) (match_dup 2))))]\n+  \"operands[2] = gen_lowpart (SImode, operands[2]);\")\n+\n+(define_insn \"*<shiftrt_insn><mode>3_1\"\n+  [(set (match_operand:SWI12 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(any_shiftrt:SWI12\n+\t  (match_operand:SWI12 1 \"nonimmediate_operand\" \"0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"c<S>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n   if (operands[2] == const1_rtx\n       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-    return \"<shiftrt>{l}\\t%k0\";\n+    return \"<shiftrt>{<imodesuffix>}\\t%0\";\n   else\n-    return \"<shiftrt>{l}\\t{%2, %k0|%k0, %2}\";\n+    return \"<shiftrt>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n }\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length_immediate\")\n@@ -9812,7 +10037,7 @@\n \t\t(const_int 0)))\n        (const_string \"0\")\n        (const_string \"*\")))\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<shiftrt_insn>qi3_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n@@ -10064,42 +10289,151 @@\n   split_double_mode (<DWI>mode, &operands[0], 1, &operands[4], &operands[5]);\n })\n \n+(define_insn \"*bmi2_rorx<mode>3_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(rotatert:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+\t\t\t(match_operand:QI 2 \"immediate_operand\" \"<S>\")))]\n+  \"TARGET_BMI2\"\n+  \"rorx\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"rotatex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*<rotate_insn><mode>3_1\"\n-  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n-\t(any_rotate:SWI (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n-\t\t\t(match_operand:QI 2 \"nonmemory_operand\" \"c<S>\")))\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r\")\n+\t(any_rotate:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,rm\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"c<S>,<S>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n-  if (operands[2] == const1_rtx\n-      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-    return \"<rotate>{<imodesuffix>}\\t%0\";\n-  else\n-    return \"<rotate>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ROTATEX:\n+      return \"#\";\n+\n+    default:\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"<rotate>{<imodesuffix>}\\t%0\";\n+      else\n+\treturn \"<rotate>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+    }\n }\n-  [(set_attr \"type\" \"rotate\")\n+  [(set_attr \"isa\" \"base,bmi2\")\n+   (set_attr \"type\" \"rotate,rotatex\")\n    (set (attr \"length_immediate\")\n      (if_then_else\n-       (and (match_operand 2 \"const1_operand\" \"\")\n-\t    (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n-\t\t(const_int 0)))\n+       (and (eq_attr \"type\" \"rotate\")\n+\t    (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t     (const_int 0))))\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<rotate_insn>si3_1_zext\"\n+;; Convert rotate to the rotatex pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"\")\n+\t(rotate:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"\")\n+\t\t      (match_operand:QI 2 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(rotatert:SWI48 (match_dup 1) (match_dup 2)))]\n+{\n+  operands[2]\n+    = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - INTVAL (operands[2]));\n+})\n+\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"\")\n+\t(rotatert:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"\")\n+\t\t\t(match_operand:QI 2 \"immediate_operand\" \"\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(rotatert:SWI48 (match_dup 1) (match_dup 2)))])\n+\n+(define_insn \"*bmi2_rorxsi3_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (any_rotate:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t\t (match_operand:QI 2 \"nonmemory_operand\" \"cI\"))))\n+\t  (rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))))]\n+  \"TARGET_64BIT && TARGET_BMI2\"\n+  \"rorx\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"type\" \"rotatex\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*<rotate_insn>si3_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI\n+\t  (any_rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm\")\n+\t\t\t (match_operand:QI 2 \"nonmemory_operand\" \"cI,I\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n {\n-    if (operands[2] == const1_rtx\n-\t&& (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-    return \"<rotate>{l}\\t%k0\";\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ROTATEX:\n+      return \"#\";\n+\n+    default:\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"<rotate>{l}\\t%k0\";\n+      else\n+\treturn \"<rotate>{l}\\t{%2, %k0|%k0, %2}\";\n+    }\n+}\n+  [(set_attr \"isa\" \"base,bmi2\")\n+   (set_attr \"type\" \"rotate,rotatex\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (and (eq_attr \"type\" \"rotate\")\n+\t    (and (match_operand 2 \"const1_operand\" \"\")\n+\t\t (ne (symbol_ref \"TARGET_SHIFT1 || optimize_function_for_size_p (cfun)\")\n+\t\t     (const_int 0))))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n+   (set_attr \"mode\" \"SI\")])\n+\n+;; Convert rotate to the rotatex pattern to avoid flags dependency.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI\n+\t  (rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+\t\t     (match_operand:QI 2 \"immediate_operand\" \"\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && TARGET_BMI2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (rotatert:SI (match_dup 1) (match_dup 2))))]\n+{\n+  operands[2]\n+    = GEN_INT (GET_MODE_BITSIZE (SImode) - INTVAL (operands[2]));\n+})\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extend:DI\n+\t  (rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+\t\t       (match_operand:QI 2 \"immediate_operand\" \"\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && TARGET_BMI2 && reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (rotatert:SI (match_dup 1) (match_dup 2))))])\n+\n+(define_insn \"*<rotate_insn><mode>3_1\"\n+  [(set (match_operand:SWI12 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(any_rotate:SWI12 (match_operand:SWI12 1 \"nonimmediate_operand\" \"0\")\n+\t\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"c<S>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+{\n+  if (operands[2] == const1_rtx\n+      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+    return \"<rotate>{<imodesuffix>}\\t%0\";\n   else\n-    return \"<rotate>{l}\\t{%2, %k0|%k0, %2}\";\n+    return \"<rotate>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n }\n   [(set_attr \"type\" \"rotate\")\n    (set (attr \"length_immediate\")\n@@ -10109,7 +10443,7 @@\n \t\t(const_int 0)))\n        (const_string \"0\")\n        (const_string \"*\")))\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<rotate_insn>qi3_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))\n@@ -11951,6 +12285,41 @@\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; BMI2 instructions.\n+(define_insn \"bmi2_bzhi_<mode>3\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(and:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+\t\t   (lshiftrt:SWI48 (const_int -1)\n+\t\t\t\t   (match_operand:SWI48 2 \"register_operand\" \"r\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI2\"\n+  \"bzhi\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"bmi2_pdep_<mode>3\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (unspec:SWI48 [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+                       (match_operand:SWI48 2 \"register_operand\" \"r\")]\n+                       UNSPEC_PDEP))]\n+  \"TARGET_BMI2\"\n+  \"pdep\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"bmi2_pext_<mode>3\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (unspec:SWI48 [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+                       (match_operand:SWI48 2 \"register_operand\" \"r\")]\n+                       UNSPEC_PEXT))]\n+  \"TARGET_BMI2\"\n+  \"pext\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; TBM instructions.\n (define_insn \"tbm_bextri_<mode>\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n@@ -12350,6 +12719,7 @@\n   \"xor{b}\\t{%h0, %b0|%b0, %h0}\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"mode\" \"HI\")])\n+\n \f\n ;; Thread-local storage patterns for ELF.\n ;;"}, {"sha": "8e4d51b3f9faded0e6b55c2e39f98179707f9623", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -493,6 +493,10 @@ mbmi\n Target Report Mask(ISA_BMI) Var(ix86_isa_flags) Save\n Support BMI built-in functions and code generation\n \n+mbmi2\n+Target Report Mask(ISA_BMI2) Var(ix86_isa_flags) Save\n+Support BMI2 built-in functions and code generation\n+\n mlzcnt\n Target Report Mask(ISA_LZCNT) Var(ix86_isa_flags) Save\n Support LZCNT built-in function and code generation"}, {"sha": "e01ecd2a1ea864439812d74483c48ac0bbdbb634", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -81,6 +81,10 @@\n #include <bmiintrin.h>\n #endif\n \n+#ifdef __BMI2__\n+#include <bmi2intrin.h>\n+#endif\n+\n #ifdef __TBM__\n #include <tbmintrin.h>\n #endif"}, {"sha": "0b3633689e9edb16d900203f4983645524ed7599", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -9883,6 +9883,17 @@ unsigned int __builtin_ia32_bextr_u32(unsigned int, unsigned int);\n unsigned long long __builtin_ia32_bextr_u64 (unsigned long long, unsigned long long);\n @end smallexample\n \n+The following built-in functions are available when @option{-mbmi2} is used.\n+All of them generate the machine instruction that is part of the name.\n+@smallexample\n+unsigned int _bzhi_u32 (unsigned int, unsigned int)\n+unsigned int _pdep_u32 (unsigned int, unsigned int)\n+unsigned int _pext_u32 (unsigned int, unsigned int)\n+unsigned long long _bzhi_u64 (unsigned long long, unsigned long long)\n+unsigned long long _pdep_u64 (unsigned long long, unsigned long long)\n+unsigned long long _pext_u64 (unsigned long long, unsigned long long)\n+@end smallexample\n+\n The following built-in functions are available when @option{-mlzcnt} is used.\n All of them generate the machine instruction that is part of the name.\n @smallexample"}, {"sha": "cbf42766fe63dae58742806a36c13b98addc304c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -607,7 +607,7 @@ Objective-C and Objective-C++ Dialects}.\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -mavx2 -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n -msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n--mlwp -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n+-mbmi2 -mlwp -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n@@ -12697,7 +12697,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mabm\n @itemx -mno-abm\n @itemx -mbmi\n+@itemx -mbmi2\n @itemx -mno-bmi\n+@itemx -mno-bmi2\n @itemx -mlzcnt\n @itemx -mno-lzcnt\n @itemx -mtbm\n@@ -12709,8 +12711,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex m3dnow\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX, SSE,\n-SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA,\n-SSE4A, FMA4, XOP, LWP, ABM, BMI, LZCNT or 3DNow!@: extended instruction sets.\n+SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, F16C,\n+FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2, LZCNT or 3DNow!\n+@: extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and\n disabled by these switches."}, {"sha": "19e4579b5449f8b820f28aa7d3a494b5e92262d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -1,3 +1,46 @@\n+2011-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mbmi2 check.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\t* gcc.target/i386/bmi2-bzhi32-1.c: New testcase.\n+\t* gcc.target/i386/bmi2-bzhi32-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-bzhi64-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-bzhi64-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-mulx32-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-mulx32-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-mulx64-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-mulx64-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-pdep32-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-pdep32-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-pdep64-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-pdep64-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-pext32-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-pext32-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-pext64-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-pext64-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-rorx32-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-rorx32-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-rorx64-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-rorx64-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-sarx32-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-sarx32-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-sarx64-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-sarx64-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-shlx32-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-shlx32-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-shlx64-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-shlx64-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-shrx32-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-shrx32-1a.c: Likewise.\n+\t* gcc.target/i386/bmi2-shrx64-1.c: Likewise.\n+\t* gcc.target/i386/bmi2-shrx64-1a.c: Likewise.\n+\t* gcc.target/i386/i386.exp (check_effective_target_bmi2): New.\n+\t* gcc.target/i386/sse-12.c: Add BMI2.\n+\t* gcc.target/i386/sse-13.c: Likewise.\n+\t* gcc.target/i386/sse-14.c: Likewise.\n+\t* gcc.target/i386/sse-22.c: Likewise.\n+\t* gcc.target/i386/sse-23.c: Likewise.\n+\n 2011-08-23  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/template/crash7.C: Adjust expected errors."}, {"sha": "5f2eaf96b1eadb2952bffe71ee7380fb8e98aa04", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "76d4d19c1f129cf7b75e4f844d42273fecb0f648", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "68df8b71d1870265c6997d410351d8d5314cd81a", "filename": "gcc/testsuite/gcc.target/i386/bmi2-bzhi32-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi32-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target { bmi2 } } } */\n+/* { dg-options \"-mbmi2 -O2\" } */\n+\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned\n+calc_bzhi_u32 (unsigned a, int l)\n+{\n+  unsigned res = a;\n+  int i;\n+  for (i = 0; i < 32 - l; ++i)\n+    res &= ~(1 << (31 - i));\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned src = 0xce7ace0f;\n+  unsigned res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_bzhi_u32 (src, i * 2);\n+    res = _bzhi_u32 (src, i * 2);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "05be7a837109923b6724850c917b57bb18c971cd", "filename": "gcc/testsuite/gcc.target/i386/bmi2-bzhi32-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi32-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi32-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi32-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-bzhi32-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_bzhi_si3\" 1 } } */"}, {"sha": "1ffe135b4376f1d9f4f4bf302cbf1034137db835", "filename": "gcc/testsuite/gcc.target/i386/bmi2-bzhi64-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi64-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target { bmi2 && { ! ia32 } } } } */\n+/* { dg-options \"-mbmi2 -O2\" } */\n+\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_bzhi_u64 (unsigned long long a, int l)\n+{\n+  unsigned long long res = a;\n+  int i;\n+  for (i = 0; i < 64 - l; ++i)\n+    res &= ~(1LL << (63 - i));\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned long long src = 0xce7ace0ce7ace0ff;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_bzhi_u64 (src, i * 2);\n+    res = _bzhi_u64 (src, i * 2);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "dc4a94cc36911e3e829c42856a353dda2fd671df", "filename": "gcc/testsuite/gcc.target/i386/bmi2-bzhi64-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-bzhi64-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-bzhi64-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_bzhi_di3\" 1 } } */"}, {"sha": "5ffce44fc6eddb8ee3f2de916704c951024b0497", "filename": "gcc/testsuite/gcc.target/i386/bmi2-check.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-check.h?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,36 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"cpuid.h\"\n+\n+static void bmi2_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  bmi2_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  __cpuid_count (7, 0,  eax, ebx, ecx, edx);\n+\n+  /* Run BMI2 test only if host has BMI2 support.  */\n+  if (ebx & bit_BMI2)\n+    {\n+      do_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "a90ff1a511f8522db606501ead4aeec113850f3c", "filename": "gcc/testsuite/gcc.target/i386/bmi2-mulx32-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx32-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run { target { bmi2 && { ia32 } } } } */\n+/* { dg-options \"-mbmi2 -O2\" } */\n+\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_mul_u32 (unsigned volatile a, unsigned b)\n+{\n+  unsigned long long res = 0;\n+  int i;\n+  for (i = 0; i < b; ++i)\n+    res += a;\n+\n+  return res;\n+}\n+\n+__attribute__((noinline))\n+unsigned long long\n+gen_mulx (unsigned a, unsigned b)\n+{\n+  unsigned long long res;\n+\n+  res = (unsigned long long)a * b;\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned a = 0xce7ace0;\n+  unsigned b = 0xfacefff;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    a = a * (i + 1);\n+    b = b / (i + 1);\n+\n+    res_ref = calc_mul_u32 (a, b);\n+    res = gen_mulx (a, b);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "cf3bb085cfd44f4de9016f7a62e2950cb35c8d80", "filename": "gcc/testsuite/gcc.target/i386/bmi2-mulx32-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx32-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx32-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx32-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2 -mbmi2 -dp\" } */\n+\n+#include \"bmi2-mulx32-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_umulsidi3_1\" 1 } } */"}, {"sha": "68449466ceb9657000668cc125cca343d4b2eb44", "filename": "gcc/testsuite/gcc.target/i386/bmi2-mulx64-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx64-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target { bmi2 && { ! ia32 } } } } */\n+/* { dg-options \"-mbmi2 -O2\" } */\n+\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned __int128\n+calc_mul_u64 (unsigned long long volatile a, unsigned long long b)\n+{\n+  unsigned __int128 res = 0;\n+  int i;\n+  for (i = 0; i < b; ++i)\n+    res += (unsigned __int128) a;\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned long long a = 0xce7ace0ce7ace0;\n+  unsigned long long b = 0xface;\n+  unsigned __int128 res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    a = a * (i + 1);\n+    b = b / (i + 1);\n+\n+    res_ref = calc_mul_u64 (a, b);\n+    res = (unsigned __int128) a * b;\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "592d713e96c7c7c38d7411eb934c3f5663e8a180", "filename": "gcc/testsuite/gcc.target/i386/bmi2-mulx64-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-mulx64-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mbmi2 -dp\" } */\n+\n+#include \"bmi2-mulx64-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_umulditi3_1\" 1 } } */"}, {"sha": "5aecf5717dc7687948856978f350f8f387325a49", "filename": "gcc/testsuite/gcc.target/i386/bmi2-pdep32-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep32-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target { bmi2 } } } */\n+/* { dg-options \"-mbmi2 -O2\" } */\n+\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned\n+calc_pdep_u32 (unsigned a, int mask)\n+{\n+  unsigned res = 0;\n+  int i, k = 0;\n+\n+  for (i = 0; i < 32; ++i)\n+    if (mask & (1 << i)) {\n+      res |= ((a & (1 << k)) >> k) << i;\n+      ++k;\n+    }\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned src = 0xce7acc;\n+  unsigned res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_pdep_u32 (src, i * 3);\n+    res = _pdep_u32 (src, i * 3);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "87888fcff8280a13d3a018d814192ea1fbeae492", "filename": "gcc/testsuite/gcc.target/i386/bmi2-pdep32-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep32-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep32-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep32-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-pdep32-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_pdep_si3\" 1 } } */"}, {"sha": "f718b2f3587193460b4e530332d62762910d2866", "filename": "gcc/testsuite/gcc.target/i386/bmi2-pdep64-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep64-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target { bmi2 && { ! ia32 } } } } */\n+/* { dg-options \"-mbmi2 -O2\" } */\n+\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_pdep_u64 (unsigned long long a, unsigned long long mask)\n+{\n+  unsigned long long res = 0;\n+  unsigned long long i, k = 0;\n+\n+  for (i = 0; i < 64; ++i)\n+    if (mask & (1LL << i)) {\n+      res |= ((a & (1LL << k)) >> k) << i;\n+      ++k;\n+    }\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned long long i;\n+  unsigned long long src = 0xce7acce7acce7ac;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_pdep_u64 (src, ~(i * 3));\n+    res = _pdep_u64 (src, ~(i * 3));\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "8163c4062a0a51c5957c8166db469bb47e6a870f", "filename": "gcc/testsuite/gcc.target/i386/bmi2-pdep64-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pdep64-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-pdep64-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_pdep_di3\" 1 } } */"}, {"sha": "7fe78378ebf7b9ff1a7973b5892176017303b957", "filename": "gcc/testsuite/gcc.target/i386/bmi2-pext32-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext32-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target { bmi2 } } } */\n+/* { dg-options \"-mbmi2 -O2\" } */\n+\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned\n+calc_pext_u32 (unsigned a, unsigned mask)\n+{\n+  unsigned res = 0;\n+  int i, k = 0;\n+\n+  for (i = 0; i < 32; ++i)\n+    if (mask & (1 << i)) {\n+      res |= ((a & (1 << i)) >> i) << k;\n+      ++k;\n+    }\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned src = 0xce7acc;\n+  unsigned res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_pext_u32 (src, ~(i * 3));\n+    res = _pext_u32 (src, ~(i * 3));\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "c4a6deecaed587d36935fbaef15009d84d226c20", "filename": "gcc/testsuite/gcc.target/i386/bmi2-pext32-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext32-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext32-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext32-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-pext32-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_pext_si3\" 1 } } */"}, {"sha": "6850749660f1f58d44563c281fdb36895805a760", "filename": "gcc/testsuite/gcc.target/i386/bmi2-pext64-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext64-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target { bmi2 && { ! ia32 } } } } */\n+/* { dg-options \"-mbmi2 -O2\" } */\n+\n+#include <x86intrin.h>\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_pext_u64 (unsigned long long a, unsigned long long mask)\n+{\n+  unsigned long long res = 0;\n+  int i, k = 0;\n+\n+  for (i = 0; i < 64; ++i)\n+    if (mask & (1LL << i)) {\n+      res |= ((a & (1LL << i)) >> i) << k;\n+      ++k;\n+    }\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned long long i;\n+  unsigned long long src = 0xce7acce7acce7ac;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_pext_u64 (src, ~(i * 3));\n+    res = _pext_u64 (src, ~(i * 3));\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "aaf06c1f206d13623d784b092f30b369e74d3ca9", "filename": "gcc/testsuite/gcc.target/i386/bmi2-pext64-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-pext64-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-pext64-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_pext_di3\" 1 } } */"}, {"sha": "d7f6f3b62db23073635c9851d99850db65347e0a", "filename": "gcc/testsuite/gcc.target/i386/bmi2-rorx32-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx32-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target { bmi2 } } } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned\n+calc_rorx_u32 (unsigned a, int l)\n+{\n+  unsigned volatile res = a;\n+  int i;\n+  for (i = 0; i < l; ++i)\n+    res = (res >> 1) | ((res & 1) << 31);\n+\n+  return res;\n+}\n+\n+#define SHIFT_VAL 0x0e\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned src = 0xce7ace0;\n+  unsigned res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_rorx_u32 (src, SHIFT_VAL);\n+    res = (src >> SHIFT_VAL) | (src << (32 - SHIFT_VAL));\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "bb3b28d6c7fa2061cc15c3d80d4fa0aa9e286322", "filename": "gcc/testsuite/gcc.target/i386/bmi2-rorx32-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx32-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx32-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx32-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi2 -dp\" } */\n+\n+#include \"bmi2-rorx32-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_rorxsi3_1\" 1 } } */"}, {"sha": "ccd60c28a5ccb1656c5bbad3f0bc214a72635873", "filename": "gcc/testsuite/gcc.target/i386/bmi2-rorx64-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx64-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target { bmi2 && { ! ia32 } } } } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_rorx_u64 (unsigned long long a, int l)\n+{\n+  unsigned long long volatile res = a;\n+  int i;\n+  for (i = 0; i < l; ++i)\n+    res = (res >> 1) | ((res&1)<< 63);\n+\n+  return res;\n+}\n+\n+#define SHIFT_VAL 0x1e\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned long long src = 0xce7ace0ce7ace0;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_rorx_u64 (src, SHIFT_VAL);\n+    res = (src >> SHIFT_VAL) | (src << (64 - SHIFT_VAL));\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "2a7a7a08cede8cd9ac00564affe2b7485d3ab77c", "filename": "gcc/testsuite/gcc.target/i386/bmi2-rorx64-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-rorx64-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mbmi2 -dp\" } */\n+\n+#include \"bmi2-rorx64-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_rorxdi3_1\" 1 } } */"}, {"sha": "8224b6f60de148534686d1591123e91aebba4422", "filename": "gcc/testsuite/gcc.target/i386/bmi2-sarx32-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx32-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target { bmi2 } } } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+int\n+calc_sarx_u32 (int a, int l)\n+{\n+  int volatile res = a;\n+  int i;\n+  for (i = 0; i < l; ++i)\n+    res >>= 1;\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  int src = 0xfce7ace0;\n+  int res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_sarx_u32 (src, i + 1);\n+    res = src >> (i + 1);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "f10d60b3efa57f079567d5e6fcb8d489c51eb811", "filename": "gcc/testsuite/gcc.target/i386/bmi2-sarx32-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx32-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx32-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx32-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi2 -dp\" } */\n+\n+#include \"bmi2-sarx32-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_ashrsi3\" 1 } } */"}, {"sha": "a43b2025d3bfca8b1dda66cf8fec54901d3ef489", "filename": "gcc/testsuite/gcc.target/i386/bmi2-sarx64-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx64-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target { bmi2 && { ! ia32 } } } } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+long long\n+calc_sarx_u64 (long long a, int l)\n+{\n+  long long volatile res = a;\n+  int i;\n+  for (i = 0; i < l; ++i)\n+    res >>= 1;\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  long long src = 0xfce7ace0ce7ace0;\n+  long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_sarx_u64 (src, i + 1);\n+    res = src >> (i + 1);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "bcf0fd44c51d786ac867d0c23d4a9ab837f0b031", "filename": "gcc/testsuite/gcc.target/i386/bmi2-sarx64-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-sarx64-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mbmi2 -dp\" } */\n+\n+#include \"bmi2-sarx64-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_ashrdi3\" 1 } } */"}, {"sha": "0bf970282f2c441f6cc099b3d91b72d2ad359e75", "filename": "gcc/testsuite/gcc.target/i386/bmi2-shlx32-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shlx32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shlx32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shlx32-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target { bmi2 } } } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+int\n+calc_shlx_u32 (int a, int l)\n+{\n+  int volatile res = a;\n+  int i;\n+  for (i = 0; i < l; ++i)\n+    res <<= 1;\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  int src = 0xfce7ace0;\n+  int res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_shlx_u32 (src, i + 1);\n+    res = src << (i + 1);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "215e5d3d79ef566f13421f2b276ba0d03c8c1c16", "filename": "gcc/testsuite/gcc.target/i386/bmi2-shlx32-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shlx32-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shlx32-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shlx32-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi2 -dp\" } */\n+\n+#include \"bmi2-shlx32-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_ashlsi3\" 1 } } */"}, {"sha": "2d2ec155e6b6579fc9f3c04c06cd0c6afc6b2860", "filename": "gcc/testsuite/gcc.target/i386/bmi2-shrx32-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx32-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target { bmi2 } } } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned\n+calc_shrx_u32 (unsigned a, int l)\n+{\n+  unsigned volatile res = a;\n+  int i;\n+  for (i = 0; i < l; ++i)\n+    res >>= 1;\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned src = 0xce7ace0;\n+  unsigned res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_shrx_u32 (src, i + 1);\n+    res = src >> (i + 1);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "24c53d45807e6ac8637986e1bd4c6411abadcb74", "filename": "gcc/testsuite/gcc.target/i386/bmi2-shrx32-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx32-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx32-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx32-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi2 -dp\" } */\n+\n+#include \"bmi2-shrx32-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_lshrsi3\" 1 } } */"}, {"sha": "81d232e765fb3f41d05e9095e395076e102fba03", "filename": "gcc/testsuite/gcc.target/i386/bmi2-shrx64-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx64-1.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run { target { bmi2 && { ! ia32 } } } } */\n+/* { dg-options \"-mbmi2 -O2 -dp\" } */\n+\n+#include \"bmi2-check.h\"\n+\n+__attribute__((noinline))\n+unsigned long long\n+calc_shrx_u64 (unsigned long long a, int l)\n+{\n+  unsigned long long volatile res = a;\n+  int i;\n+  for (i = 0; i < l; ++i)\n+    res >>= 1;\n+\n+  return res;\n+}\n+\n+static void\n+bmi2_test ()\n+{\n+  unsigned i;\n+  unsigned long long src = 0xce7ace0ce7ace0;\n+  unsigned long long res, res_ref;\n+\n+  for (i = 0; i < 5; ++i) {\n+    src = src * (i + 1);\n+\n+    res_ref = calc_shrx_u64 (src, i + 1);\n+    res = src >> (i + 1);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "783043935fba06d5be53ca2b1f3356dd5c63f6d8", "filename": "gcc/testsuite/gcc.target/i386/bmi2-shrx64-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx64-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx64-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi2-shrx64-1a.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mbmi2 -dp\" } */\n+\n+#include \"bmi2-shrx64-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi2_lshrdi3\" 1 } } */"}, {"sha": "cff8a9a3cbacab919ed537ce642940fc112b4bc1", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -206,6 +206,17 @@ proc check_effective_target_bmi { } {\n     } \"-mbmi\" ]\n }\n \n+# Return 1 if bmi2 instructions can be compiled.\n+proc check_effective_target_bmi2 { } {\n+    return [check_no_compiler_messages bmi2 object {\n+\tunsigned int\n+\t_bzhi_u32 (unsigned int __X, unsigned int __Y)\n+\t{\n+\t    return __builtin_ia32_bzhi_si (__X, __Y);\n+\t}\n+    } \"-mbmi2\" ]\n+}\n+\n # If the linker used understands -M <mapfile>, pass it to clear hardware\n # capabilities set by the Sun assembler.\n set clearcap_ldflags \"-Wl,-M,$srcdir/$subdir/clearcap.map\""}, {"sha": "db949839eed466a903091049d91a256c0a0f367e", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "6b02df7b4ba117737d696699f7680e5cc1e0ae32", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "e5216b1aeaa88ed39028ff2e02010184cf753b2b", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "4660ba0b15a289c7500e4ca311907786b9de3bef", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -46,7 +46,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,tbm,lwp,fsgsbase,rdrnd,f16c\")\n+#pragma GCC target (\"sse4a,3dnow,avx,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,9 +220,9 @@ test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n #endif\n #include <popcntintrin.h>\n \n-/* x86intrin.h (FMA4/XOP/LWP/BMI/TBM/LZCNT). */\n+/* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"fma4,xop,lwp,bmi,tbm,lzcnt\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt\")\n #endif\n #include <x86intrin.h>\n /* xopintrin.h */"}, {"sha": "b2e52550c162559e422571f4b29664c5063abeff", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82feeb8d6804cfa21d451ade6e11240f0dc0d5b9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=82feeb8d6804cfa21d451ade6e11240f0dc0d5b9", "patch": "@@ -147,7 +147,7 @@\n #define __builtin_ia32_bextri_u32(X, Y) __builtin_ia32_bextr_u32 (X, 1)\n #define __builtin_ia32_bextri_u64(X, Y) __builtin_ia32_bextr_u64 (X, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,tbm,lwp,fsgsbase,rdrnd,f16c\")\n+#pragma GCC target (\"sse4a,3dnow,avx,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}