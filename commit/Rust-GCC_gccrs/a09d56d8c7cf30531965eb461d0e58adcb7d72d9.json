{"sha": "a09d56d8c7cf30531965eb461d0e58adcb7d72d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA5ZDU2ZDhjN2NmMzA1MzE5NjVlYjQ2MWQwZTU4YWRjYjdkNzJkOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-15T10:38:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-15T10:38:36Z"}, "message": "trans.c (gigi): Do not start statement group.\n\n\t* gcc-interface/trans.c (gigi): Do not start statement group.\n\t(Compilation_Unit_to_gnu): Set current_function_decl to NULL.\n\tStart statement group and push binding level here...\n\t(gnat_to_gnu) <N_Compilation_Unit>: ...and not here.\n\tDo not push fake contexts at top level.  Remove redundant code.\n\t(call_to_gnu): Rename a local variable and constify another.\n\t* gcc-interface/utils.c (gnat_pushlevel): Fix formatting nits.\n\t(set_current_block_context): Set it as the group's block.\n\t(gnat_init_decl_processing): Delete unrelated init code.\n\t(end_subprog_body): Use NULL_TREE.\n\nFrom-SVN: r158370", "tree": {"sha": "59b62469850fc88cb0fd96dfdb285e58527eec93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59b62469850fc88cb0fd96dfdb285e58527eec93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a09d56d8c7cf30531965eb461d0e58adcb7d72d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09d56d8c7cf30531965eb461d0e58adcb7d72d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09d56d8c7cf30531965eb461d0e58adcb7d72d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09d56d8c7cf30531965eb461d0e58adcb7d72d9/comments", "author": null, "committer": null, "parents": [{"sha": "932c865054836d348e629f70d71a07b2ab4ea607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932c865054836d348e629f70d71a07b2ab4ea607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/932c865054836d348e629f70d71a07b2ab4ea607"}], "stats": {"total": 90, "additions": 36, "deletions": 54}, "files": [{"sha": "7c97b6c65a5371cf8b35c2cec8f124f2d63c36e0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d56d8c7cf30531965eb461d0e58adcb7d72d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d56d8c7cf30531965eb461d0e58adcb7d72d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a09d56d8c7cf30531965eb461d0e58adcb7d72d9", "patch": "@@ -1,3 +1,16 @@\n+2010-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (gigi): Do not start statement group.\n+\t(Compilation_Unit_to_gnu): Set current_function_decl to NULL.\n+\tStart statement group and push binding level here...\n+\t(gnat_to_gnu) <N_Compilation_Unit>: ...and not here.\n+\tDo not push fake contexts at top level.  Remove redundant code.\n+\t(call_to_gnu): Rename a local variable and constify another.\n+\t* gcc-interface/utils.c (gnat_pushlevel): Fix formatting nits.\n+\t(set_current_block_context): Set it as the group's block.\n+\t(gnat_init_decl_processing): Delete unrelated init code.\n+\t(end_subprog_body): Use NULL_TREE.\n+\n 2010-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (call_to_gnu): Do not unnecessarily force"}, {"sha": "f11fa5b5babb1be7a9108a1eb7dc8331553493f4", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 14, "deletions": 41, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d56d8c7cf30531965eb461d0e58adcb7d72d9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d56d8c7cf30531965eb461d0e58adcb7d72d9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=a09d56d8c7cf30531965eb461d0e58adcb7d72d9", "patch": "@@ -620,7 +620,6 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n     gnat_init_gcc_eh ();\n \n   /* Now translate the compilation unit proper.  */\n-  start_stmt_group ();\n   Compilation_Unit_to_gnu (gnat_root);\n \n   /* Finally see if we have any elaboration procedures to deal with.  */\n@@ -2849,8 +2848,8 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n     {\n       /* List of FIELD_DECLs associated with the PARM_DECLs of the copy\n \t in copy out parameters.  */\n-      tree scalar_return_list = TYPE_CI_CO_LIST (gnu_subprog_type);\n-      int length = list_length (scalar_return_list);\n+      tree gnu_cico_list = TYPE_CI_CO_LIST (gnu_subprog_type);\n+      const int length = list_length (gnu_cico_list);\n \n       if (length > 1)\n \t{\n@@ -2888,8 +2887,7 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t      = length == 1\n \t\t? gnu_call\n \t\t: build_component_ref (gnu_call, NULL_TREE,\n-\t\t\t\t       TREE_PURPOSE (scalar_return_list),\n-\t\t\t\t       false);\n+\t\t\t\t       TREE_PURPOSE (gnu_cico_list), false);\n \n \t    /* If the actual is a conversion, get the inner expression, which\n \t       will be the real destination, and convert the result to the\n@@ -2952,7 +2950,7 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t\t\t\t\t  gnu_actual, gnu_result);\n \t    set_expr_location_from_node (gnu_result, gnat_node);\n \t    append_to_statement_list (gnu_result, &gnu_before_list);\n-\t    scalar_return_list = TREE_CHAIN (scalar_return_list);\n+\t    gnu_cico_list = TREE_CHAIN (gnu_cico_list);\n \t    gnu_name_list = TREE_CHAIN (gnu_name_list);\n \t  }\n     }\n@@ -3378,7 +3376,10 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   DECL_ELABORATION_PROC_P (gnu_elab_proc_decl) = 1;\n   allocate_struct_function (gnu_elab_proc_decl, false);\n   Sloc_to_locus (Sloc (gnat_unit_entity), &cfun->function_end_locus);\n+  current_function_decl = NULL_TREE;\n   set_cfun (NULL);\n+  start_stmt_group ();\n+  gnat_pushlevel ();\n \n   /* For a body, first process the spec if there is one.  */\n   if (Nkind (Unit (gnat_node)) == N_Package_Body\n@@ -3508,7 +3509,6 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t     N_Raise_Constraint_Error));\n \n   if ((IN (kind, N_Statement_Other_Than_Procedure_Call)\n-       && !IN (kind, N_SCIL_Node)\n        && kind != N_Null_Statement)\n       || kind == N_Procedure_Call_Statement\n       || kind == N_Label\n@@ -3517,13 +3517,10 @@ gnat_to_gnu (Node_Id gnat_node)\n       || (IN (kind, N_Raise_xxx_Error) && Ekind (Etype (gnat_node)) == E_Void))\n     {\n       /* If this is a statement and we are at top level, it must be part of\n-\t the elaboration procedure, so mark us as being in that procedure\n-\t and push our context.  */\n+\t the elaboration procedure, so mark us as being in that procedure.  */\n       if (!current_function_decl)\n \t{\n \t  current_function_decl = TREE_VALUE (gnu_elab_proc_stack);\n-\t  start_stmt_group ();\n-\t  gnat_pushlevel ();\n \t  went_into_elab_proc = true;\n \t}\n \n@@ -4866,12 +4863,7 @@ gnat_to_gnu (Node_Id gnat_node)\n     /*********************************************************/\n \n     case N_Compilation_Unit:\n-\n-      /* This is not called for the main unit, which is handled in function\n-\t gigi above.  */\n-      start_stmt_group ();\n-      gnat_pushlevel ();\n-\n+      /* This is not called for the main unit on which gigi is invoked.  */\n       Compilation_Unit_to_gnu (gnat_node);\n       gnu_result = alloc_stmt_list ();\n       break;\n@@ -5298,35 +5290,16 @@ gnat_to_gnu (Node_Id gnat_node)\n       gnu_result = alloc_stmt_list ();\n       break;\n \n-    case N_SCIL_Dispatch_Table_Object_Init:\n-    case N_SCIL_Dispatch_Table_Tag_Init:\n-    case N_SCIL_Dispatching_Call:\n-    case N_SCIL_Membership_Test:\n-    case N_SCIL_Tag_Init:\n-      /* SCIL nodes require no processing for GCC.  */\n-      gnu_result = alloc_stmt_list ();\n-      break;\n-\n-    case N_Raise_Statement:\n-    case N_Function_Specification:\n-    case N_Procedure_Specification:\n-    case N_Op_Concat:\n-    case N_Component_Association:\n-    case N_Task_Body:\n     default:\n-      gcc_assert (type_annotate_only);\n+      /* SCIL nodes require no processing for GCC.  Other nodes should only\n+\t be present when annotating types.  */\n+      gcc_assert (IN (kind, N_SCIL_Node) || type_annotate_only);\n       gnu_result = alloc_stmt_list ();\n     }\n \n-  /* If we pushed our level as part of processing the elaboration routine,\n-     pop it back now.  */\n+  /* If we pushed the processing of the elaboration routine, pop it back.  */\n   if (went_into_elab_proc)\n-    {\n-      add_stmt (gnu_result);\n-      gnat_poplevel ();\n-      gnu_result = end_stmt_group ();\n-      current_function_decl = NULL_TREE;\n-    }\n+    current_function_decl = NULL_TREE;\n \n   /* Set the location information on the result if it is a real expression.\n      References can be reused for multiple GNAT nodes and they would get"}, {"sha": "cd868a8c47903fe3514a424e8efb87a68760e89a", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a09d56d8c7cf30531965eb461d0e58adcb7d72d9/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a09d56d8c7cf30531965eb461d0e58adcb7d72d9/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=a09d56d8c7cf30531965eb461d0e58adcb7d72d9", "patch": "@@ -310,7 +310,7 @@ global_bindings_p (void)\n   return ((force_global || !current_function_decl) ? -1 : 0);\n }\n \n-/* Enter a new binding level. */\n+/* Enter a new binding level.  */\n \n void\n gnat_pushlevel (void)\n@@ -342,11 +342,11 @@ gnat_pushlevel (void)\n   if (current_binding_level)\n     BLOCK_SUPERCONTEXT (newlevel->block) = current_binding_level->block;\n \n-  BLOCK_VARS (newlevel->block) = BLOCK_SUBBLOCKS (newlevel->block) = NULL_TREE;\n+  BLOCK_VARS (newlevel->block) = NULL_TREE;\n+  BLOCK_SUBBLOCKS (newlevel->block) = NULL_TREE;\n   TREE_USED (newlevel->block) = 1;\n \n-  /* Add this level to the front of the chain (stack) of levels that are\n-     active.  */\n+  /* Add this level to the front of the chain (stack) of active levels.  */\n   newlevel->chain = current_binding_level;\n   newlevel->jmpbuf_decl = NULL_TREE;\n   current_binding_level = newlevel;\n@@ -360,6 +360,7 @@ set_current_block_context (tree fndecl)\n {\n   BLOCK_SUPERCONTEXT (current_binding_level->block) = fndecl;\n   DECL_INITIAL (fndecl) = current_binding_level->block;\n+  set_block_for_group (current_binding_level->block);\n }\n \n /* Set the jmpbuf_decl for the current binding level to DECL.  */\n@@ -378,7 +379,7 @@ get_block_jmpbuf_decl (void)\n   return current_binding_level->jmpbuf_decl;\n }\n \n-/* Exit a binding level. Set any BLOCK into the current code group.  */\n+/* Exit a binding level.  Set any BLOCK into the current code group.  */\n \n void\n gnat_poplevel (void)\n@@ -391,7 +392,7 @@ gnat_poplevel (void)\n \n   /* If this is a function-level BLOCK don't do anything.  Otherwise, if there\n      are no variables free the block and merge its subblocks into those of its\n-     parent block. Otherwise, add it to the list of its parent.  */\n+     parent block.  Otherwise, add it to the list of its parent.  */\n   if (TREE_CODE (BLOCK_SUPERCONTEXT (block)) == FUNCTION_DECL)\n     ;\n   else if (BLOCK_VARS (block) == NULL_TREE)\n@@ -518,12 +519,6 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n void\n gnat_init_decl_processing (void)\n {\n-  /* Make the binding_level structure for global names.  */\n-  current_function_decl = 0;\n-  current_binding_level = 0;\n-  free_binding_level = 0;\n-  gnat_pushlevel ();\n-\n   build_common_tree_nodes (true, true);\n \n   /* In Ada, we use a signed type for SIZETYPE.  Use the signed type\n@@ -1894,6 +1889,7 @@ begin_subprog_body (tree subprog_decl)\n   /* Enter a new binding level and show that all the parameters belong to\n      this function.  */\n   gnat_pushlevel ();\n+\n   for (param_decl = DECL_ARGUMENTS (subprog_decl); param_decl;\n        param_decl = TREE_CHAIN (param_decl))\n     DECL_CONTEXT (param_decl) = subprog_decl;\n@@ -1915,7 +1911,7 @@ end_subprog_body (tree body)\n \n   /* Mark the BLOCK for this level as being for this function and pop the\n      level.  Since the vars in it are the parameters, clear them.  */\n-  BLOCK_VARS (current_binding_level->block) = 0;\n+  BLOCK_VARS (current_binding_level->block) = NULL_TREE;\n   BLOCK_SUPERCONTEXT (current_binding_level->block) = fndecl;\n   DECL_INITIAL (fndecl) = current_binding_level->block;\n   gnat_poplevel ();"}]}