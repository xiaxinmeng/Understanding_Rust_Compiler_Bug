{"sha": "09ef422fadce393300ce84d2f8c8331a344de2ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDllZjQyMmZhZGNlMzkzMzAwY2U4NGQyZjhjODMzMWEzNDRkZTJlZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-08T16:39:11Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-08T16:39:11Z"}, "message": "testsuite: Add -mbig-endian stdint.h requirement\n\nSome AArch64 tests force -mbig-endian and indirectly include stdint.h.\nHowever, not all OSes support both endiannesses, leading to:\n\nFAIL: gcc.target/aarch64/advsimd-intrinsics/bf16_get-be.c   -O0  (test for excess errors)\nUNRESOLVED: gcc.target/aarch64/advsimd-intrinsics/bf16_get-be.c   -O1   check-function-bodies test_vget_high_bf16\nUNRESOLVED: gcc.target/aarch64/advsimd-intrinsics/bf16_get-be.c   -O1   check-function-bodies test_vget_low_bf16\n\netc.  This patch adds an (admittedly special-purpose) target\nselector for this.\n\ngcc/\n\t* doc/sourcebuild.texi (stdint_types_mbig_endian): Document.\n\ngcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_stdint_types_mbig_endian): New proc.\n\t* gcc.target/aarch64/advsimd-intrinsics/bf16_get-be.c: Require\n\tstdint_types_mbig_endian.\n\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-2.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vdot-3-2.c: Likewise.", "tree": {"sha": "90bd38c71e67f62a22515116d8d42b23fd98926c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90bd38c71e67f62a22515116d8d42b23fd98926c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09ef422fadce393300ce84d2f8c8331a344de2ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ef422fadce393300ce84d2f8c8331a344de2ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09ef422fadce393300ce84d2f8c8331a344de2ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ef422fadce393300ce84d2f8c8331a344de2ef/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5240c5ca2e2b1f362670791df233c4103d87cf5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5240c5ca2e2b1f362670791df233c4103d87cf5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5240c5ca2e2b1f362670791df233c4103d87cf5b"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "b0001247795947c9dcab1a14884ecd585976dfdd", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ef422fadce393300ce84d2f8c8331a344de2ef/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ef422fadce393300ce84d2f8c8331a344de2ef/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=09ef422fadce393300ce84d2f8c8331a344de2ef", "patch": "@@ -2447,6 +2447,10 @@ Target has the basic signed and unsigned C types in @code{stdint.h}.\n This will be obsolete when GCC ensures a working @code{stdint.h} for\n all targets.\n \n+@item stdint_types_mbig_endian\n+Target accepts the option @option{-mbig-endian} and @code{stdint.h}\n+can be included without error when @option{-mbig-endian} is passed.\n+\n @item stpcpy\n Target provides @code{stpcpy} function.\n "}, {"sha": "cd27098e63eacb63557e0fda9586ee10c531a89c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bf16_get-be.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ef422fadce393300ce84d2f8c8331a344de2ef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_get-be.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ef422fadce393300ce84d2f8c8331a344de2ef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_get-be.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_get-be.c?ref=09ef422fadce393300ce84d2f8c8331a344de2ef", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target stdint_types_mbig_endian } */\n /* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n /* { dg-add-options arm_v8_2a_bf16_neon } */\n /* { dg-additional-options \"-mbig-endian -save-temps\" } */"}, {"sha": "ae0a953f7b4e5fc5ede7e868859c1d8b5c28950d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfdot-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ef422fadce393300ce84d2f8c8331a344de2ef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ef422fadce393300ce84d2f8c8331a344de2ef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfdot-2.c?ref=09ef422fadce393300ce84d2f8c8331a344de2ef", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target stdint_types_mbig_endian } */\n /* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n /* { dg-add-options arm_v8_2a_bf16_neon }  */\n /* { dg-additional-options \"-mbig-endian --save-temps\" } */"}, {"sha": "61c7c51f5ec905e68b211962929708fd87a85598", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdot-3-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ef422fadce393300ce84d2f8c8331a344de2ef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ef422fadce393300ce84d2f8c8331a344de2ef/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdot-3-2.c?ref=09ef422fadce393300ce84d2f8c8331a344de2ef", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target stdint_types_mbig_endian } */\n /* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n /* { dg-add-options arm_v8_2a_i8mm }  */\n /* { dg-additional-options \"-mbig-endian -save-temps\" } */"}, {"sha": "ad323107f2ec5d55a77214beca5e4135643528b4", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09ef422fadce393300ce84d2f8c8331a344de2ef/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09ef422fadce393300ce84d2f8c8331a344de2ef/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=09ef422fadce393300ce84d2f8c8331a344de2ef", "patch": "@@ -8254,6 +8254,18 @@ proc check_effective_target_stdint_types { } {\n     }]\n }\n \n+# Like check_effective_target_stdint_types, but test what happens when\n+# -mbig-endian is passed.  This test only makes sense on targets that\n+# support -mbig-endian; it will fail elsewhere.\n+\n+proc check_effective_target_stdint_types_mbig_endian { } {\n+    return [check_no_compiler_messages stdint_types_mbig_endian assembly {\n+\t#include <stdint.h>\n+\tint8_t a; int16_t b; int32_t c; int64_t d;\n+\tuint8_t e; uint16_t f; uint32_t g; uint64_t h;\n+    } \"-mbig-endian\"]\n+}\n+\n # Return 1 if target has the basic signed and unsigned types in\n # <inttypes.h>, 0 otherwise.  This is for tests that GCC's notions of\n # these types agree with those in the header, as some systems have"}]}