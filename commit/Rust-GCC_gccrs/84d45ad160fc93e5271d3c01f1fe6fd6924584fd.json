{"sha": "84d45ad160fc93e5271d3c01f1fe6fd6924584fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRkNDVhZDE2MGZjOTNlNTI3MWQzYzAxZjFmZTZmZDY5MjQ1ODRmZA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2003-07-24T18:54:26Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-07-24T18:54:26Z"}, "message": "cfgloopmanip.c (duplicate_loop_to_header_edge): Update irreducible flag correctly.\n\n\t* cfgloopmanip.c (duplicate_loop_to_header_edge): Update irreducible\n\tflag correctly.\n\nFrom-SVN: r69755", "tree": {"sha": "4798d05ccd6a937afe3470ee03abe2ad6683fbaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4798d05ccd6a937afe3470ee03abe2ad6683fbaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84d45ad160fc93e5271d3c01f1fe6fd6924584fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d45ad160fc93e5271d3c01f1fe6fd6924584fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d45ad160fc93e5271d3c01f1fe6fd6924584fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d45ad160fc93e5271d3c01f1fe6fd6924584fd/comments", "author": null, "committer": null, "parents": [{"sha": "dbe4baf569251e48584bd613a4e7ac8cc564153d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe4baf569251e48584bd613a4e7ac8cc564153d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe4baf569251e48584bd613a4e7ac8cc564153d"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "e7685659ac96595116d7302997dd030de24bdde2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d45ad160fc93e5271d3c01f1fe6fd6924584fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d45ad160fc93e5271d3c01f1fe6fd6924584fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84d45ad160fc93e5271d3c01f1fe6fd6924584fd", "patch": "@@ -1,3 +1,8 @@\n+2003-07-24  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* cfgloopmanip.c (duplicate_loop_to_header_edge): Update irreducible\n+\tflag correctly.\n+\n 2003-07-24  Zack Weinberg  <zack@codesourcery.com>\n \n \t* c-decl.c: Search-and-replace change 'binding level' to"}, {"sha": "26eb9fd6e3bf6e4c8b16ba814a6cc901139f91c9", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d45ad160fc93e5271d3c01f1fe6fd6924584fd/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d45ad160fc93e5271d3c01f1fe6fd6924584fd/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=84d45ad160fc93e5271d3c01f1fe6fd6924584fd", "patch": "@@ -988,6 +988,27 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e, struct loops *loops,\n       /* Copy bbs.  */\n       copy_bbs (bbs, n, new_bbs, spec_edges, 2, new_spec_edges, loop, loops);\n \n+      /* Note whether the blocks and edges belong to an irreducible loop.  */\n+      if (add_irreducible_flag)\n+\t{\n+\t  for (i = 0; i < n; i++)\n+\t    new_bbs[i]->rbi->duplicated = 1;\n+\t  for (i = 0; i < n; i++)\n+\t    {\n+\t      new_bb = new_bbs[i];\n+\t      if (new_bb->loop_father == target)\n+\t\tnew_bb->flags |= BB_IRREDUCIBLE_LOOP;\n+\n+\t      for (ae = new_bb->succ; ae; ae = ae->succ_next)\n+\t\tif (ae->dest->rbi->duplicated\n+\t\t    && (ae->src->loop_father == target\n+\t\t\t|| ae->dest->loop_father == target))\n+\t\t  ae->flags |= EDGE_IRREDUCIBLE_LOOP;\n+\t    }\n+\t  for (i = 0; i < n; i++)\n+\t    new_bbs[i]->rbi->duplicated = 0;\n+\t}\n+\n       /* Redirect the special edges.  */\n       if (is_latch)\n \t{\n@@ -1011,22 +1032,6 @@ duplicate_loop_to_header_edge (struct loop *loop, edge e, struct loops *loops,\n       if (orig && TEST_BIT (wont_exit, j + 1))\n \tto_remove[(*n_to_remove)++] = new_spec_edges[SE_ORIG];\n \n-      /* Note whether the blocks and edges belong to an irreducible loop.  */\n-      if (add_irreducible_flag)\n-\t{\n-\t  for (i = 0; i < n; i++)\n-\t    {\n-\t      new_bb = new_bbs[i];\n-\t      if (new_bb->loop_father == target)\n-\t\tnew_bb->flags |= BB_IRREDUCIBLE_LOOP;\n-\n-\t      for (ae = new_bb->succ; ae; ae = ae->succ_next)\n-\t\tif (ae->src->loop_father == target\n-\t\t    || ae->dest->loop_father == target)\n-\t\t  ae->flags |= EDGE_IRREDUCIBLE_LOOP;\n-\t    }\n-\t}\n-\n       /* Record the first copy in the control flow order if it is not\n \t the original loop (i.e. in case of peeling).  */\n       if (!first_active_latch)"}]}