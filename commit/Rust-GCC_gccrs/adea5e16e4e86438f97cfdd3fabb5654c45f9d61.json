{"sha": "adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRlYTVlMTZlNGU4NjQzOGY5N2NmZGQzZmFiYjU2NTRjNDVmOWQ2MQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2007-03-14T19:26:38Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-03-14T19:26:38Z"}, "message": "re PR libfortran/30690 ([4.2, 4.1 only] Clean up m4 files)\n\n2007-03-14  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR libfortran/30690\n\t* all.m4: Quote everything, except for m4 macros.\n\t* any.m4: Likewise.\n\t* count.m4: Likewise.\n\t* cshift1.m4: Likewise.\n\t* eoshift1.m4: Likewise.\n\t* eoshift3.m4: Likewise.\n\t* exponent.m4: Likewise.\n\t* fraction.m4: Likewise.\n\t* in_pack.m4: Likewise.\n\t* in_unpack.m4: Likewise.\n\t* matmul.m4: Likewise.\n\t* matmull.m4: Likewise.\n\t* nearest.m4: Likewise.\n\t* pow.m4: Likewise.\n\t* product.m4: Likewise.\n\t* reshape.m4: Likewise.\n\t* rrspacing.m4: Likewise.\n\t* set_exponent.m4: Likewise.\n\t* shape.m4: Likewise.\n\t* spacing.m4: Likewise.\n\t* transpose.m4: Likewise.\n\nFrom-SVN: r122927", "tree": {"sha": "30e3cd3e0ab7d3d112d7ba8f0a2d73539d5d59fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30e3cd3e0ab7d3d112d7ba8f0a2d73539d5d59fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/comments", "author": null, "committer": null, "parents": [{"sha": "286d12f95e207376800e2f6fa79d4adc866408e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/286d12f95e207376800e2f6fa79d4adc866408e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/286d12f95e207376800e2f6fa79d4adc866408e8"}], "stats": {"total": 506, "additions": 267, "deletions": 239}, "files": [{"sha": "1b3cff570c3358cc45d928f78f1b7e8df05fd448", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -1,3 +1,28 @@\n+2007-03-14  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/30690\n+\t* all.m4: Quote everything, except for m4 macros.\n+\t* any.m4: Likewise.\n+\t* count.m4: Likewise.\n+\t* cshift1.m4: Likewise.\n+\t* eoshift1.m4: Likewise.\n+\t* eoshift3.m4: Likewise.\n+\t* exponent.m4: Likewise.\n+\t* fraction.m4: Likewise.\n+\t* in_pack.m4: Likewise.\n+\t* in_unpack.m4: Likewise.\n+\t* matmul.m4: Likewise.\n+\t* matmull.m4: Likewise.\n+\t* nearest.m4: Likewise.\n+\t* pow.m4: Likewise.\n+\t* product.m4: Likewise.\n+\t* reshape.m4: Likewise.\n+\t* rrspacing.m4: Likewise.\n+\t* set_exponent.m4: Likewise.\n+\t* shape.m4: Likewise.\n+\t* spacing.m4: Likewise.\n+\t* transpose.m4: Likewise.\n+\n 2007-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* io/unix.c (regular_file): For ACTION_UNSPECIFIED retry with"}, {"sha": "297e5f36708aa7c063b80da2b5d4213c2d477890", "filename": "libgfortran/m4/all.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fall.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fall.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fall.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -45,6 +45,6 @@ ARRAY_FUNCTION(1,\n     {\n       result = 0;\n       break;\n-    }')\n+    }')`\n \n-#endif\n+#endif'"}, {"sha": "70edff95440d44f9eee7128f0c0e6b13bdfe32d6", "filename": "libgfortran/m4/any.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fany.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fany.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fany.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -45,6 +45,6 @@ ARRAY_FUNCTION(0,\n     {\n       result = 1;\n       break;\n-    }')\n+    }')`\n \n-#endif\n+#endif'"}, {"sha": "245d9726d376f44528d636204010fd9156f643f5", "filename": "libgfortran/m4/count.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fcount.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fcount.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcount.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -41,6 +41,6 @@ include(ifunction.m4)dnl\n ARRAY_FUNCTION(0,\n `  result = 0;',\n `  if (*src)\n-    result++;')\n+    result++;')`\n \n-#endif\n+#endif'"}, {"sha": "edc95cee729ed7764cbbc14c78eff684ce9d1064", "filename": "libgfortran/m4/cshift1.m4", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fcshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fcshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcshift1.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -35,13 +35,13 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-`#if defined (HAVE_'atype_name`)'\n+`#if defined (HAVE_'atype_name`)\n \n static void\n cshift1 (gfc_array_char * const restrict ret, \n \tconst gfc_array_char * const restrict array,\n-\tconst atype * const restrict h, \n-\tconst atype_name * const restrict pwhich, \n+\tconst 'atype` * const restrict h, \n+\tconst 'atype_name` * const restrict pwhich, \n \tindex_type size)\n {\n   /* r.* indicates the return array.  */\n@@ -59,23 +59,23 @@ cshift1 (gfc_array_char * const restrict ret,\n   /* h.* indicates the shift array.  */\n   index_type hstride[GFC_MAX_DIMENSIONS];\n   index_type hstride0;\n-  const atype_name *hptr;\n+  const 'atype_name` *hptr;\n \n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n   index_type len;\n   index_type n;\n   int which;\n-  atype_name sh;\n+  'atype_name` sh;\n \n   if (pwhich)\n     which = *pwhich - 1;\n   else\n     which = 0;\n \n   if (which < 0 || (which + 1) > GFC_DESCRIPTOR_RANK (array))\n-    runtime_error (\"Argument 'DIM' is out of range in call to 'CSHIFT'\");\n+    runtime_error (\"Argument ''`DIM''` is out of range in call to ''`CSHIFT''`\");\n \n   if (ret->data == NULL)\n     {\n@@ -198,38 +198,38 @@ cshift1 (gfc_array_char * const restrict ret,\n     }\n }\n \n-void cshift1_`'atype_kind (gfc_array_char * const restrict, \n+void cshift1_'atype_kind` (gfc_array_char * const restrict, \n \tconst gfc_array_char * const restrict,\n-\tconst atype * const restrict, \n-\tconst atype_name * const restrict);\n-export_proto(cshift1_`'atype_kind);\n+\tconst 'atype` * const restrict, \n+\tconst 'atype_name` * const restrict);\n+export_proto(cshift1_'atype_kind`);\n \n void\n-cshift1_`'atype_kind (gfc_array_char * const restrict ret,\n+cshift1_'atype_kind` (gfc_array_char * const restrict ret,\n \tconst gfc_array_char * const restrict array,\n-\tconst atype * const restrict h, \n-\tconst atype_name * const restrict pwhich)\n+\tconst 'atype` * const restrict h, \n+\tconst 'atype_name` * const restrict pwhich)\n {\n   cshift1 (ret, array, h, pwhich, GFC_DESCRIPTOR_SIZE (array));\n }\n \n-void cshift1_`'atype_kind`'_char (gfc_array_char * const restrict ret, \n+void cshift1_'atype_kind`_char (gfc_array_char * const restrict ret, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict array,\n-\tconst atype * const restrict h, \n-\tconst atype_name * const restrict pwhich,\n+\tconst 'atype` * const restrict h, \n+\tconst 'atype_name` * const restrict pwhich,\n \tGFC_INTEGER_4);\n-export_proto(cshift1_`'atype_kind`'_char);\n+export_proto(cshift1_'atype_kind`_char);\n \n void\n-cshift1_`'atype_kind`'_char (gfc_array_char * const restrict ret,\n+cshift1_'atype_kind`_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 ret_length __attribute__((unused)),\n \tconst gfc_array_char * const restrict array,\n-\tconst atype * const restrict h, \n-\tconst atype_name * const restrict pwhich,\n+\tconst 'atype` * const restrict h, \n+\tconst 'atype_name` * const restrict pwhich,\n \tGFC_INTEGER_4 array_length)\n {\n   cshift1 (ret, array, h, pwhich, array_length);\n }\n \n-#endif\n+#endif'"}, {"sha": "d9be3423d3bd3cc22fba50824b8d367054ba29de", "filename": "libgfortran/m4/eoshift1.m4", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Feoshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Feoshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift1.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -35,14 +35,14 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-`#if defined (HAVE_'atype_name`)'\n+`#if defined (HAVE_'atype_name`)\n \n static void\n eoshift1 (gfc_array_char * const restrict ret, \n \tconst gfc_array_char * const restrict array, \n-\tconst atype * const restrict h,\n+\tconst 'atype` * const restrict h,\n \tconst char * const restrict pbound, \n-\tconst atype_name * const restrict pwhich, \n+\tconst 'atype_name` * const restrict pwhich, \n \tindex_type size, char filler)\n {\n   /* r.* indicates the return array.  */\n@@ -57,19 +57,19 @@ eoshift1 (gfc_array_char * const restrict ret,\n   index_type soffset;\n   const char *sptr;\n   const char *src;\n-`  /* h.* indicates the shift array.  */'\n+  /* h.* indicates the shift array.  */\n   index_type hstride[GFC_MAX_DIMENSIONS];\n   index_type hstride0;\n-  const atype_name *hptr;\n+  const 'atype_name` *hptr;\n \n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type dim;\n   index_type len;\n   index_type n;\n   int which;\n-  atype_name sh;\n-  atype_name delta;\n+  'atype_name` sh;\n+  'atype_name` delta;\n \n   /* The compiler cannot figure out that these are set, initialize\n      them to avoid warnings.  */\n@@ -145,7 +145,7 @@ eoshift1 (gfc_array_char * const restrict ret,\n \n   while (rptr)\n     {\n-`      /* Do the shift for this dimension.  */'\n+      /* Do the shift for this dimension.  */\n       sh = *hptr;\n       if (( sh >= 0 ? sh : -sh ) > len)\n \t{\n@@ -222,42 +222,42 @@ eoshift1 (gfc_array_char * const restrict ret,\n     }\n }\n \n-void eoshift1_`'atype_kind (gfc_array_char * const restrict, \n+void eoshift1_'atype_kind` (gfc_array_char * const restrict, \n \tconst gfc_array_char * const restrict,\n-\tconst atype * const restrict, const char * const restrict, \n-\tconst atype_name * const restrict);\n-export_proto(eoshift1_`'atype_kind);\n+\tconst 'atype` * const restrict, const char * const restrict, \n+\tconst 'atype_name` * const restrict);\n+export_proto(eoshift1_'atype_kind`);\n \n void\n-eoshift1_`'atype_kind (gfc_array_char * const restrict ret, \n+eoshift1_'atype_kind` (gfc_array_char * const restrict ret, \n \tconst gfc_array_char * const restrict array,\n-\tconst atype * const restrict h, \n+\tconst 'atype` * const restrict h, \n \tconst char * const restrict pbound,\n-\tconst atype_name * const restrict pwhich)\n+\tconst 'atype_name` * const restrict pwhich)\n {\n   eoshift1 (ret, array, h, pbound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n }\n \n-void eoshift1_`'atype_kind`'_char (gfc_array_char * const restrict, \n+void eoshift1_'atype_kind`_char (gfc_array_char * const restrict, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict, \n-\tconst atype * const restrict,\n+\tconst 'atype` * const restrict,\n \tconst char * const restrict, \n-\tconst atype_name * const restrict,\n+\tconst 'atype_name` * const restrict,\n \tGFC_INTEGER_4, GFC_INTEGER_4);\n-export_proto(eoshift1_`'atype_kind`'_char);\n+export_proto(eoshift1_'atype_kind`_char);\n \n void\n-eoshift1_`'atype_kind`'_char (gfc_array_char * const restrict ret,\n+eoshift1_'atype_kind`_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 ret_length __attribute__((unused)),\n \tconst gfc_array_char * const restrict array, \n-\tconst atype * const restrict h,\n+\tconst 'atype` * const restrict h,\n \tconst char *  const restrict pbound, \n-\tconst atype_name * const restrict pwhich,\n+\tconst 'atype_name` * const restrict pwhich,\n \tGFC_INTEGER_4 array_length,\n \tGFC_INTEGER_4 bound_length __attribute__((unused)))\n {\n-  eoshift1 (ret, array, h, pbound, pwhich, array_length, ' ');\n+  eoshift1 (ret, array, h, pbound, pwhich, array_length, ''` ''`);\n }\n \n-#endif\n+#endif'"}, {"sha": "58f12fcddd6410794f98d50cb87da60ccade1239", "filename": "libgfortran/m4/eoshift3.m4", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Feoshift3.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Feoshift3.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift3.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -35,14 +35,14 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-`#if defined (HAVE_'atype_name`)'\n+`#if defined (HAVE_'atype_name`)\n \n static void\n eoshift3 (gfc_array_char * const restrict ret, \n \tconst gfc_array_char * const restrict array, \n-\tconst atype * const restrict h,\n+\tconst 'atype` * const restrict h,\n \tconst gfc_array_char * const restrict bound, \n-\tconst atype_name * const restrict pwhich,\n+\tconst 'atype_name` * const restrict pwhich,\n \tindex_type size, char filler)\n {\n   /* r.* indicates the return array.  */\n@@ -57,10 +57,10 @@ eoshift3 (gfc_array_char * const restrict ret,\n   index_type soffset;\n   const char *sptr;\n   const char *src;\n-`  /* h.* indicates the shift array.  */'\n+  /* h.* indicates the shift array.  */\n   index_type hstride[GFC_MAX_DIMENSIONS];\n   index_type hstride0;\n-  const atype_name *hptr;\n+  const 'atype_name` *hptr;\n   /* b.* indicates the bound array.  */\n   index_type bstride[GFC_MAX_DIMENSIONS];\n   index_type bstride0;\n@@ -72,8 +72,8 @@ eoshift3 (gfc_array_char * const restrict ret,\n   index_type len;\n   index_type n;\n   int which;\n-  atype_name sh;\n-  atype_name delta;\n+  'atype_name` sh;\n+  'atype_name` delta;\n \n   /* The compiler cannot figure out that these are set, initialize\n      them to avoid warnings.  */\n@@ -160,7 +160,7 @@ eoshift3 (gfc_array_char * const restrict ret,\n \n   while (rptr)\n     {\n-`      /* Do the shift for this dimension.  */'\n+      /* Do the shift for this dimension.  */\n       sh = *hptr;\n       if (( sh >= 0 ? sh : -sh ) > len)\n \t{\n@@ -240,43 +240,43 @@ eoshift3 (gfc_array_char * const restrict ret,\n     }\n }\n \n-extern void eoshift3_`'atype_kind (gfc_array_char * const restrict, \n+extern void eoshift3_'atype_kind` (gfc_array_char * const restrict, \n \tconst gfc_array_char * const restrict,\n-\tconst atype * const restrict, \n+\tconst 'atype` * const restrict, \n \tconst gfc_array_char * const restrict,\n-\tconst atype_name *);\n-export_proto(eoshift3_`'atype_kind);\n+\tconst 'atype_name` *);\n+export_proto(eoshift3_'atype_kind`);\n \n void\n-eoshift3_`'atype_kind (gfc_array_char * const restrict ret, \n+eoshift3_'atype_kind` (gfc_array_char * const restrict ret, \n \tconst gfc_array_char * const restrict array,\n-\tconst atype * const restrict h, \n+\tconst 'atype` * const restrict h, \n \tconst gfc_array_char * const restrict bound,\n-\tconst atype_name * const restrict pwhich)\n+\tconst 'atype_name` * const restrict pwhich)\n {\n   eoshift3 (ret, array, h, bound, pwhich, GFC_DESCRIPTOR_SIZE (array), 0);\n }\n \n-extern void eoshift3_`'atype_kind`'_char (gfc_array_char * const restrict, \n+extern void eoshift3_'atype_kind`_char (gfc_array_char * const restrict, \n \tGFC_INTEGER_4,\n \tconst gfc_array_char * const restrict,\n-\tconst atype * const restrict,\n+\tconst 'atype` * const restrict,\n \tconst gfc_array_char * const restrict,\n-\tconst atype_name * const restrict, \n+\tconst 'atype_name` * const restrict, \n \tGFC_INTEGER_4, GFC_INTEGER_4);\n-export_proto(eoshift3_`'atype_kind`'_char);\n+export_proto(eoshift3_'atype_kind`_char);\n \n void\n-eoshift3_`'atype_kind`'_char (gfc_array_char * const restrict ret,\n+eoshift3_'atype_kind`_char (gfc_array_char * const restrict ret,\n \tGFC_INTEGER_4 ret_length __attribute__((unused)),\n \tconst gfc_array_char * const restrict array, \n-\tconst atype *  const restrict h,\n+\tconst 'atype` *  const restrict h,\n \tconst gfc_array_char * const restrict bound,\n-\tconst atype_name * const restrict pwhich,\n+\tconst 'atype_name` * const restrict pwhich,\n \tGFC_INTEGER_4 array_length,\n \tGFC_INTEGER_4 bound_length __attribute__((unused)))\n {\n-  eoshift3 (ret, array, h, bound, pwhich, array_length, ' ');\n+  eoshift3 (ret, array, h, bound, pwhich, array_length, ''` ''`);\n }\n \n-#endif\n+#endif'"}, {"sha": "46b42d0078f773734bdeef82efdf3ef33b91d65e", "filename": "libgfortran/m4/exponent.m4", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fexponent.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fexponent.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fexponent.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -34,17 +34,17 @@ Boston, MA 02110-1301, USA.  */\n \n include(`mtype.m4')dnl\n \n-`#if defined (HAVE_'real_type`) && defined (HAVE_FREXP'Q`)'\n+`#if defined (HAVE_'real_type`) && defined (HAVE_FREXP'Q`)\n \n-extern GFC_INTEGER_4 exponent_r`'kind (real_type s);\n-export_proto(exponent_r`'kind);\n+extern GFC_INTEGER_4 exponent_r'kind` ('real_type` s);\n+export_proto(exponent_r'kind`);\n \n GFC_INTEGER_4\n-exponent_r`'kind (real_type s)\n+exponent_r'kind` ('real_type` s)\n {\n   int ret;\n-  frexp`'q (s, &ret);\n+  frexp'q` (s, &ret);\n   return ret;\n }\n \n-#endif\n+#endif'"}, {"sha": "8179d47572d4d23c39549d29031b66cc4cc975ac", "filename": "libgfortran/m4/fraction.m4", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Ffraction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Ffraction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Ffraction.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -34,16 +34,16 @@ Boston, MA 02110-1301, USA.  */\n \n include(`mtype.m4')dnl\n \n-`#if defined (HAVE_'real_type`) && defined (HAVE_FREXP'Q`)'\n+`#if defined (HAVE_'real_type`) && defined (HAVE_FREXP'Q`)\n \n-extern real_type fraction_r`'kind (real_type s);\n-export_proto(fraction_r`'kind);\n+extern 'real_type` fraction_r'kind` ('real_type` s);\n+export_proto(fraction_r'kind`);\n \n-real_type\n-fraction_r`'kind (real_type s)\n+'real_type`\n+fraction_r'kind` ('real_type` s)\n {\n   int dummy_exp;\n-  return frexp`'q (s, &dummy_exp);\n+  return frexp'q` (s, &dummy_exp);\n }\n \n-#endif\n+#endif'"}, {"sha": "ca2436413290c480f638f927fe5d54bc131cda1b", "filename": "libgfortran/m4/in_pack.m4", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fin_pack.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fin_pack.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fin_pack.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -34,25 +34,25 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-`#if defined (HAVE_'rtype_name`)'\n+`#if defined (HAVE_'rtype_name`)\n \n /* Allocates a block of memory with internal_malloc if the array needs\n    repacking.  */\n-\n+'\n dnl The kind (ie size) is used to name the function for logicals, integers\n dnl and reals.  For complex, it's c4 or c8.\n-rtype_name *\n-`internal_pack_'rtype_ccode (rtype * source)\n+rtype_name` *\n+internal_pack_'rtype_ccode` ('rtype` * source)\n {\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type stride[GFC_MAX_DIMENSIONS];\n   index_type stride0;\n   index_type dim;\n   index_type ssize;\n-  const rtype_name *src;\n-  rtype_name *dest;\n-  rtype_name *destptr;\n+  const 'rtype_name` *src;\n+  'rtype_name` *dest;\n+  'rtype_name` *destptr;\n   int n;\n   int packed;\n \n@@ -84,7 +84,7 @@ rtype_name *\n     return source->data;\n \n   /* Allocate storage for the destination.  */\n-  destptr = (rtype_name *)internal_malloc_size (ssize * sizeof (rtype_name));\n+  destptr = ('rtype_name` *)internal_malloc_size (ssize * sizeof ('rtype_name`));\n   dest = destptr;\n   src = source->data;\n   stride0 = stride[0];\n@@ -124,3 +124,4 @@ rtype_name *\n }\n \n #endif\n+'\n\\ No newline at end of file"}, {"sha": "319c19f9cd01a44f24e43a9e91ebb42bf125a3e1", "filename": "libgfortran/m4/in_unpack.m4", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fin_unpack.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fin_unpack.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fin_unpack.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -39,16 +39,16 @@ include(iparm.m4)dnl\n \n dnl Only the kind (ie size) is used to name the function for integers,\n dnl reals and logicals.  For complex, it's c4 and c8.\n-void\n-`internal_unpack_'rtype_ccode (rtype * d, const rtype_name * src)\n+`void\n+internal_unpack_'rtype_ccode` ('rtype` * d, const 'rtype_name` * src)\n {\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type stride[GFC_MAX_DIMENSIONS];\n   index_type stride0;\n   index_type dim;\n   index_type dsize;\n-  rtype_name *dest;\n+  'rtype_name` *dest;\n   int n;\n \n   dest = d->data;\n@@ -73,7 +73,7 @@ void\n \n   if (dsize != 0)\n     {\n-      memcpy (dest, src, dsize * sizeof (rtype_name));\n+      memcpy (dest, src, dsize * sizeof ('rtype_name`));\n       return;\n     }\n \n@@ -112,3 +112,4 @@ void\n }\n \n #endif\n+'\n\\ No newline at end of file"}, {"sha": "3156fdcac0c43e5ba9b2ed92eaa9efac617c575c", "filename": "libgfortran/m4/matmul.m4", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fmatmul.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fmatmul.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmul.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -35,16 +35,16 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-`#if defined (HAVE_'rtype_name`)'\n+`#if defined (HAVE_'rtype_name`)\n \n /* Prototype for the BLAS ?gemm subroutine, a pointer to which can be\n-   passed to us by the front-end, in which case we'll call it for large\n+   passed to us by the front-end, in which case we''`ll call it for large\n    matrices.  */\n \n typedef void (*blas_call)(const char *, const char *, const int *, const int *,\n-                          const int *, const rtype_name *, const rtype_name *,\n-                          const int *, const rtype_name *, const int *,\n-                          const rtype_name *, rtype_name *, const int *,\n+                          const int *, const 'rtype_name` *, const 'rtype_name` *,\n+                          const int *, const 'rtype_name` *, const int *,\n+                          const 'rtype_name` *, 'rtype_name` *, const int *,\n                           int, int);\n \n /* The order of loops is different in the case of plain matrix\n@@ -76,19 +76,19 @@ typedef void (*blas_call)(const char *, const char *, const int *, const int *,\n    see if there is a way to perform the matrix multiplication by a call\n    to the BLAS gemm function.  */\n \n-extern void matmul_`'rtype_code (rtype * const restrict retarray, \n-\trtype * const restrict a, rtype * const restrict b, int try_blas,\n+extern void matmul_'rtype_code` ('rtype` * const restrict retarray, \n+\t'rtype` * const restrict a, 'rtype` * const restrict b, int try_blas,\n \tint blas_limit, blas_call gemm);\n-export_proto(matmul_`'rtype_code);\n+export_proto(matmul_'rtype_code`);\n \n void\n-matmul_`'rtype_code (rtype * const restrict retarray, \n-\trtype * const restrict a, rtype * const restrict b, int try_blas,\n+matmul_'rtype_code` ('rtype` * const restrict retarray, \n+\t'rtype` * const restrict a, 'rtype` * const restrict b, int try_blas,\n \tint blas_limit, blas_call gemm)\n {\n-  const rtype_name * restrict abase;\n-  const rtype_name * restrict bbase;\n-  rtype_name * restrict dest;\n+  const 'rtype_name` * restrict abase;\n+  const 'rtype_name` * restrict bbase;\n+  'rtype_name` * restrict dest;\n \n   index_type rxstride, rystride, axstride, aystride, bxstride, bystride;\n   index_type x, y, n, count, xcount, ycount;\n@@ -133,12 +133,12 @@ matmul_`'rtype_code (rtype * const restrict retarray,\n         }\n \n       retarray->data\n-\t= internal_malloc_size (sizeof (rtype_name) * size0 ((array_t *) retarray));\n+\t= internal_malloc_size (sizeof ('rtype_name`) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n-\n+'\n sinclude(`matmul_asm_'rtype_code`.m4')dnl\n-\n+`\n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {\n       /* One-dimensional result may be addressed in the code below\n@@ -196,7 +196,7 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n   dest = retarray->data;\n \n \n-  /* Now that everything is set up, we're performing the multiplication\n+  /* Now that everything is set up, we''`re performing the multiplication\n      itself.  */\n \n #define POW3(x) (((float) (x)) * ((float) (x)) * ((float) (x)))\n@@ -207,7 +207,7 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n           > POW3(blas_limit)))\n   {\n     const int m = xcount, n = ycount, k = count, ldc = rystride;\n-    const rtype_name one = 1, zero = 0;\n+    const 'rtype_name` one = 1, zero = 0;\n     const int lda = (axstride == 1) ? aystride : axstride,\n               ldb = (bxstride == 1) ? bystride : bxstride;\n \n@@ -222,18 +222,18 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n \n   if (rxstride == 1 && axstride == 1 && bxstride == 1)\n     {\n-      const rtype_name * restrict bbase_y;\n-      rtype_name * restrict dest_y;\n-      const rtype_name * restrict abase_n;\n-      rtype_name bbase_yn;\n+      const 'rtype_name` * restrict bbase_y;\n+      'rtype_name` * restrict dest_y;\n+      const 'rtype_name` * restrict abase_n;\n+      'rtype_name` bbase_yn;\n \n       if (rystride == xcount)\n-\tmemset (dest, 0, (sizeof (rtype_name) * xcount * ycount));\n+\tmemset (dest, 0, (sizeof ('rtype_name`) * xcount * ycount));\n       else\n \t{\n \t  for (y = 0; y < ycount; y++)\n \t    for (x = 0; x < xcount; x++)\n-\t      dest[x + y*rystride] = (rtype_name)0;\n+\t      dest[x + y*rystride] = ('rtype_name`)0;\n \t}\n \n       for (y = 0; y < ycount; y++)\n@@ -255,10 +255,10 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n     {\n       if (GFC_DESCRIPTOR_RANK (a) != 1)\n \t{\n-\t  const rtype_name *restrict abase_x;\n-\t  const rtype_name *restrict bbase_y;\n-\t  rtype_name *restrict dest_y;\n-\t  rtype_name s;\n+\t  const 'rtype_name` *restrict abase_x;\n+\t  const 'rtype_name` *restrict bbase_y;\n+\t  'rtype_name` *restrict dest_y;\n+\t  'rtype_name` s;\n \n \t  for (y = 0; y < ycount; y++)\n \t    {\n@@ -267,7 +267,7 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n \t      for (x = 0; x < xcount; x++)\n \t\t{\n \t\t  abase_x = &abase[x*axstride];\n-\t\t  s = (rtype_name) 0;\n+\t\t  s = ('rtype_name`) 0;\n \t\t  for (n = 0; n < count; n++)\n \t\t    s += abase_x[n] * bbase_y[n];\n \t\t  dest_y[x] = s;\n@@ -276,13 +276,13 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n \t}\n       else\n \t{\n-\t  const rtype_name *restrict bbase_y;\n-\t  rtype_name s;\n+\t  const 'rtype_name` *restrict bbase_y;\n+\t  'rtype_name` s;\n \n \t  for (y = 0; y < ycount; y++)\n \t    {\n \t      bbase_y = &bbase[y*bystride];\n-\t      s = (rtype_name) 0;\n+\t      s = ('rtype_name`) 0;\n \t      for (n = 0; n < count; n++)\n \t\ts += abase[n*axstride] * bbase_y[n];\n \t      dest[y*rystride] = s;\n@@ -293,7 +293,7 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n     {\n       for (y = 0; y < ycount; y++)\n \tfor (x = 0; x < xcount; x++)\n-\t  dest[x*rxstride + y*rystride] = (rtype_name)0;\n+\t  dest[x*rxstride + y*rystride] = ('rtype_name`)0;\n \n       for (y = 0; y < ycount; y++)\n \tfor (n = 0; n < count; n++)\n@@ -303,24 +303,24 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n     }\n   else if (GFC_DESCRIPTOR_RANK (a) == 1)\n     {\n-      const rtype_name *restrict bbase_y;\n-      rtype_name s;\n+      const 'rtype_name` *restrict bbase_y;\n+      'rtype_name` s;\n \n       for (y = 0; y < ycount; y++)\n \t{\n \t  bbase_y = &bbase[y*bystride];\n-\t  s = (rtype_name) 0;\n+\t  s = ('rtype_name`) 0;\n \t  for (n = 0; n < count; n++)\n \t    s += abase[n*axstride] * bbase_y[n*bxstride];\n \t  dest[y*rxstride] = s;\n \t}\n     }\n   else\n     {\n-      const rtype_name *restrict abase_x;\n-      const rtype_name *restrict bbase_y;\n-      rtype_name *restrict dest_y;\n-      rtype_name s;\n+      const 'rtype_name` *restrict abase_x;\n+      const 'rtype_name` *restrict bbase_y;\n+      'rtype_name` *restrict dest_y;\n+      'rtype_name` s;\n \n       for (y = 0; y < ycount; y++)\n \t{\n@@ -329,7 +329,7 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n \t  for (x = 0; x < xcount; x++)\n \t    {\n \t      abase_x = &abase[x*axstride];\n-\t      s = (rtype_name) 0;\n+\t      s = ('rtype_name`) 0;\n \t      for (n = 0; n < count; n++)\n \t\ts += abase_x[n*aystride] * bbase_y[n*bxstride];\n \t      dest_y[x*rxstride] = s;\n@@ -338,4 +338,4 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n     }\n }\n \n-#endif\n+#endif'"}, {"sha": "d4b0008e951bbe01948f1793a1f5bcc8cd22b377", "filename": "libgfortran/m4/matmull.m4", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fmatmull.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fmatmull.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmull.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -34,22 +34,22 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-`#if defined (HAVE_'rtype_name`)'\n+`#if defined (HAVE_'rtype_name`)\n \n /* Dimensions: retarray(x,y) a(x, count) b(count,y).\n    Either a or b can be rank 1.  In this case x or y is 1.  */\n \n-extern void matmul_`'rtype_code (rtype * const restrict, \n+extern void matmul_'rtype_code` ('rtype` * const restrict, \n \tgfc_array_l4 * const restrict, gfc_array_l4 * const restrict);\n-export_proto(matmul_`'rtype_code);\n+export_proto(matmul_'rtype_code`);\n \n void\n-matmul_`'rtype_code (rtype * const restrict retarray, \n+matmul_'rtype_code` ('rtype` * const restrict retarray, \n \tgfc_array_l4 * const restrict a, gfc_array_l4 * const restrict b)\n {\n   const GFC_INTEGER_4 * restrict abase;\n   const GFC_INTEGER_4 * restrict bbase;\n-  rtype_name * restrict dest;\n+  'rtype_name` * restrict dest;\n   index_type rxstride;\n   index_type rystride;\n   index_type xcount;\n@@ -95,7 +95,7 @@ matmul_`'rtype_code (rtype * const restrict retarray,\n         }\n           \n       retarray->data\n-\t= internal_malloc_size (sizeof (rtype_name) * size0 ((array_t *) retarray));\n+\t= internal_malloc_size (sizeof ('rtype_name`) * size0 ((array_t *) retarray));\n       retarray->offset = 0;\n     }\n \n@@ -112,9 +112,9 @@ matmul_`'rtype_code (rtype * const restrict retarray,\n       bbase = GFOR_POINTER_L8_TO_L4 (bbase);\n     }\n   dest = retarray->data;\n-\n+'\n sinclude(`matmul_asm_'rtype_code`.m4')dnl\n-\n+`\n   if (GFC_DESCRIPTOR_RANK (retarray) == 1)\n     {\n       rxstride = retarray->dim[0].stride;\n@@ -191,3 +191,4 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n }\n \n #endif\n+'\n\\ No newline at end of file"}, {"sha": "a3c000366e779077778cfe0a8906e5a405de47de", "filename": "libgfortran/m4/nearest.m4", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fnearest.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fnearest.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fnearest.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -35,23 +35,23 @@ Boston, MA 02110-1301, USA.  */\n \n include(`mtype.m4')dnl\n \n-`#if defined (HAVE_'real_type`) && defined (HAVE_COPYSIGN'Q`) && defined (HAVE_NEXTAFTER'Q`)'\n+`#if defined (HAVE_'real_type`) && defined (HAVE_COPYSIGN'Q`) && defined (HAVE_NEXTAFTER'Q`)\n \n-extern real_type nearest_r`'kind (real_type s, real_type dir);\n-export_proto(nearest_r`'kind);\n+extern 'real_type` nearest_r'kind` ('real_type` s, 'real_type` dir);\n+export_proto(nearest_r'kind`);\n \n-real_type\n-nearest_r`'kind (real_type s, real_type dir)\n+'real_type`\n+nearest_r'kind` ('real_type` s, 'real_type` dir)\n {\n-  dir = copysign`'q (__builtin_inf`'q (), dir);\n+  dir = copysign'q` (__builtin_inf'q` (), dir);\n   if (FLT_EVAL_METHOD != 0)\n     {\n       /* ??? Work around glibc bug on x86.  */\n-      volatile real_type r = nextafter`'q (s, dir);\n+      volatile 'real_type` r = nextafter'q` (s, dir);\n       return r;\n     }\n   else\n-    return nextafter`'q (s, dir);\n+    return nextafter'q` (s, dir);\n }\n \n-#endif\n+#endif'"}, {"sha": "8f1b6b21f99f232348cd1db71fa0ae3835283a24", "filename": "libgfortran/m4/pow.m4", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fpow.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fpow.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fpow.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -39,15 +39,15 @@ include(iparm.m4)dnl\n \n `#if defined (HAVE_'rtype_name`) && defined (HAVE_'atype_name`)'\n \n-rtype_name `pow_'rtype_code`_'atype_code (rtype_name a, atype_name b);\n-export_proto(pow_`'rtype_code`_'atype_code);\n+rtype_name `pow_'rtype_code`_'atype_code` ('rtype_name` a, 'atype_name` b);\n+export_proto(pow_'rtype_code`_'atype_code`);\n \n-rtype_name\n-`pow_'rtype_code`_'atype_code (rtype_name a, atype_name b)\n+'rtype_name`\n+pow_'rtype_code`_'atype_code` ('rtype_name` a, 'atype_name` b)\n {\n-  rtype_name pow, x;\n-  atype_name n;\n-  `GFC_UINTEGER_'atype_kind` u;'\n+  'rtype_name` pow, x;\n+  'atype_name` n;\n+  GFC_UINTEGER_'atype_kind` u;\n   \n   n = b;\n   x = a;\n@@ -56,7 +56,7 @@ rtype_name\n     {\n       if (n < 0)\n \t{\n-ifelse(rtype_letter,i,`dnl\n+'ifelse(rtype_letter,i,`dnl\n \t  if (x == 1)\n \t    return 1;\n \t  if (x == -1)\n@@ -66,7 +66,7 @@ ifelse(rtype_letter,i,`dnl\n \t  u = -n;\n \t  x = pow / x;\n ')dnl\n-\t}\n+`\t}\n       else\n \t{\n \t   u = n;\n@@ -85,4 +85,4 @@ ifelse(rtype_letter,i,`dnl\n   return pow;\n }\n \n-#endif\n+#endif'"}, {"sha": "77393022ebecebd2253e299f62191d4472ad64e1", "filename": "libgfortran/m4/product.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fproduct.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fproduct.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fproduct.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -49,4 +49,4 @@ MASKED_ARRAY_FUNCTION(1,\n \n SCALAR_ARRAY_FUNCTION(1)\n \n-#endif\n+`#endif'"}, {"sha": "2a877a2f8ab9a56b4e2f046eadf9ee899284c8ac", "filename": "libgfortran/m4/reshape.m4", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Freshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Freshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Freshape.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -34,27 +34,27 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-`#if defined (HAVE_'rtype_name`)'\n+`#if defined (HAVE_'rtype_name`)\n \n-typedef GFC_ARRAY_DESCRIPTOR(1, index_type) shape_type;\n+typedef GFC_ARRAY_DESCRIPTOR(1, 'index_type`) 'shape_type`;'\n \n dnl For integer routines, only the kind (ie size) is used to name the\n dnl function.  The same function will be used for integer and logical\n dnl arrays of the same kind.\n \n-extern void reshape_`'rtype_ccode (rtype * const restrict, \n-\trtype * const restrict, \n-\tshape_type * const restrict,\n-\trtype * const restrict, \n-\tshape_type * const restrict);\n-export_proto(reshape_`'rtype_ccode);\n+`extern void reshape_'rtype_ccode` ('rtype` * const restrict, \n+\t'rtype` * const restrict, \n+\t'shape_type` * const restrict,\n+\t'rtype` * const restrict, \n+\t'shape_type` * const restrict);\n+export_proto(reshape_'rtype_ccode`);\n \n void\n-reshape_`'rtype_ccode (rtype * const restrict ret, \n-\trtype * const restrict source, \n-\tshape_type * const restrict shape,\n-\trtype * const restrict pad, \n-\tshape_type * const restrict order)\n+reshape_'rtype_ccode` ('rtype` * const restrict ret, \n+\t'rtype` * const restrict source, \n+\t'shape_type` * const restrict shape,\n+\t'rtype` * const restrict pad, \n+\t'shape_type` * const restrict order)\n {\n   /* r.* indicates the return array.  */\n   index_type rcount[GFC_MAX_DIMENSIONS];\n@@ -65,24 +65,24 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n   index_type rsize;\n   index_type rs;\n   index_type rex;\n-  rtype_name *rptr;\n+  'rtype_name` *rptr;\n   /* s.* indicates the source array.  */\n   index_type scount[GFC_MAX_DIMENSIONS];\n   index_type sextent[GFC_MAX_DIMENSIONS];\n   index_type sstride[GFC_MAX_DIMENSIONS];\n   index_type sstride0;\n   index_type sdim;\n   index_type ssize;\n-  const rtype_name *sptr;\n+  const 'rtype_name` *sptr;\n   /* p.* indicates the pad array.  */\n   index_type pcount[GFC_MAX_DIMENSIONS];\n   index_type pextent[GFC_MAX_DIMENSIONS];\n   index_type pstride[GFC_MAX_DIMENSIONS];\n   index_type pdim;\n   index_type psize;\n-  const rtype_name *pptr;\n+  const 'rtype_name` *pptr;\n \n-  const rtype_name *src;\n+  const 'rtype_name` *src;\n   int n;\n   int dim;\n   int sempty, pempty;\n@@ -100,7 +100,7 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n \t  rs *= rex;\n \t}\n       ret->offset = 0;\n-      ret->data = internal_malloc_size ( rs * sizeof (rtype_name));\n+      ret->data = internal_malloc_size ( rs * sizeof ('rtype_name`));\n       ret->dtype = (source->dtype & ~GFC_DTYPE_RANK_MASK) | rdim;\n     }\n   else\n@@ -184,9 +184,9 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n \n   if (rsize != 0 && ssize != 0 && psize != 0)\n     {\n-      rsize *= sizeof (rtype_name);\n-      ssize *= sizeof (rtype_name);\n-      psize *= sizeof (rtype_name);\n+      rsize *= sizeof ('rtype_name`);\n+      ssize *= sizeof ('rtype_name`);\n+      psize *= sizeof ('rtype_name`);\n       reshape_packed ((char *)ret->data, rsize, (char *)source->data,\n \t\t      ssize, pad ? (char *)pad->data : NULL, psize);\n       return;\n@@ -210,7 +210,7 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n \t  scount[dim] = pcount[dim];\n \t  sextent[dim] = pextent[dim];\n \t  sstride[dim] = pstride[dim];\n-\t  sstride0 = sstride[0] * sizeof (rtype_name);\n+\t  sstride0 = sstride[0] * sizeof ('rtype_name`);\n \t}\n     }\n \n@@ -286,4 +286,4 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n     }\n }\n \n-#endif\n+#endif'"}, {"sha": "5e881c25293e0f2153c0deec9651c4fc61d2bb4c", "filename": "libgfortran/m4/rrspacing.m4", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Frrspacing.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Frrspacing.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Frrspacing.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -34,26 +34,26 @@ Boston, MA 02110-1301, USA.  */\n \n include(`mtype.m4')dnl\n \n-`#if defined (HAVE_'real_type`) && defined (HAVE_FABS'Q`) && defined (HAVE_FREXP'Q`)'\n+`#if defined (HAVE_'real_type`) && defined (HAVE_FABS'Q`) && defined (HAVE_FREXP'Q`)\n \n-extern real_type rrspacing_r`'kind (real_type s, int p);\n-export_proto(rrspacing_r`'kind);\n+extern 'real_type` rrspacing_r'kind` ('real_type` s, int p);\n+export_proto(rrspacing_r'kind`);\n \n-real_type\n-rrspacing_r`'kind (real_type s, int p)\n+'real_type`\n+rrspacing_r'kind` ('real_type` s, int p)\n {\n   int e;\n-  real_type x;\n-  x = fabs`'q (s);\n+  'real_type` x;\n+  x = fabs'q` (s);\n   if (x == 0.)\n     return 0.;\n-  frexp`'q (s, &e);\n-`#if defined (HAVE_LDEXP'Q`)'\n-  return ldexp`'q (x, p - e);\n+  frexp'q` (s, &e);\n+#if defined (HAVE_LDEXP'Q`)\n+  return ldexp'q` (x, p - e);\n #else\n-  return scalbn`'q (x, p - e);\n+  return scalbn'q` (x, p - e);\n #endif\n \n }\n \n-#endif\n+#endif'"}, {"sha": "417cc66b342870a52d06bb8a153f7679cdffc062", "filename": "libgfortran/m4/set_exponent.m4", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fset_exponent.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fset_exponent.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fset_exponent.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -34,16 +34,16 @@ Boston, MA 02110-1301, USA.  */\n \n include(`mtype.m4')dnl\n \n-`#if defined (HAVE_'real_type`) && defined (HAVE_SCALBN'Q`) && defined (HAVE_FREXP'Q`)'\n+`#if defined (HAVE_'real_type`) && defined (HAVE_SCALBN'Q`) && defined (HAVE_FREXP'Q`)\n \n-extern real_type set_exponent_r`'kind (real_type s, GFC_INTEGER_4 i);\n-export_proto(set_exponent_r`'kind);\n+extern 'real_type` set_exponent_r'kind` ('real_type` s, GFC_INTEGER_4 i);\n+export_proto(set_exponent_r'kind`);\n \n-real_type\n-set_exponent_r`'kind (real_type s, GFC_INTEGER_4 i)\n+'real_type`\n+set_exponent_r'kind` ('real_type` s, GFC_INTEGER_4 i)\n {\n   int dummy_exp;\n-  return scalbn`'q (frexp`'q (s, &dummy_exp), i);\n+  return scalbn'q` (frexp'q` (s, &dummy_exp), i);\n }\n \n-#endif\n+#endif'"}, {"sha": "1902d7514d61b3f7bbad3bb1807f519b7656671a", "filename": "libgfortran/m4/shape.m4", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fshape.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -34,15 +34,15 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-`#if defined (HAVE_'rtype_name`)'\n+`#if defined (HAVE_'rtype_name`)\n \n-extern void shape_`'rtype_kind (rtype * const restrict ret, \n-\tconst rtype * const restrict array);\n-export_proto(shape_`'rtype_kind);\n+extern void shape_'rtype_kind` ('rtype` * const restrict ret, \n+\tconst 'rtype` * const restrict array);\n+export_proto(shape_'rtype_kind`);\n \n void\n-shape_`'rtype_kind (rtype * const restrict ret, \n-\tconst rtype * const restrict array)\n+shape_'rtype_kind` ('rtype` * const restrict ret, \n+\tconst 'rtype` * const restrict array)\n {\n   int n;\n   index_type stride;\n@@ -56,4 +56,4 @@ shape_`'rtype_kind (rtype * const restrict ret,\n     }\n }\n \n-#endif\n+#endif'"}, {"sha": "cb46db79cd6d5ba274eece99fa4d36e65eeb631e", "filename": "libgfortran/m4/spacing.m4", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fspacing.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Fspacing.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fspacing.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -34,25 +34,25 @@ Boston, MA 02110-1301, USA.  */\n \n include(`mtype.m4')dnl\n \n-`#if defined (HAVE_'real_type`) && defined (HAVE_FREXP'Q`)'\n+`#if defined (HAVE_'real_type`) && defined (HAVE_FREXP'Q`)\n \n-extern real_type spacing_r`'kind (real_type s, int p, int emin, real_type tiny);\n-export_proto(spacing_r`'kind);\n+extern 'real_type` spacing_r'kind` ('real_type` s, int p, int emin, 'real_type` tiny);\n+export_proto(spacing_r'kind`);\n \n-real_type\n-spacing_r`'kind (real_type s, int p, int emin, real_type tiny)\n+'real_type`\n+spacing_r'kind` ('real_type` s, int p, int emin, 'real_type` tiny)\n {\n   int e;\n   if (s == 0.)\n     return tiny;\n-  frexp`'q (s, &e);\n+  frexp'q` (s, &e);\n   e = e - p;\n   e = e > emin ? e : emin;\n-`#if defined (HAVE_LDEXP'Q`)'\n-  return ldexp`'q (1., e);\n+#if defined (HAVE_LDEXP'Q`)\n+  return ldexp'q` (1., e);\n #else\n-  return scalbn`'q (1., e);\n+  return scalbn'q` (1., e);\n #endif\n }\n \n-#endif\n+#endif'"}, {"sha": "bd0577f089f14a2d5de4f0f7a0372e5d4ef6fbc7", "filename": "libgfortran/m4/transpose.m4", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Ftranspose.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adea5e16e4e86438f97cfdd3fabb5654c45f9d61/libgfortran%2Fm4%2Ftranspose.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Ftranspose.m4?ref=adea5e16e4e86438f97cfdd3fabb5654c45f9d61", "patch": "@@ -33,22 +33,22 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"'\n include(iparm.m4)dnl\n \n-`#if defined (HAVE_'rtype_name`)'\n+`#if defined (HAVE_'rtype_name`)\n \n-extern void transpose_`'rtype_code (rtype * const restrict ret, \n-\trtype * const restrict source);\n-export_proto(transpose_`'rtype_code);\n+extern void transpose_'rtype_code` ('rtype` * const restrict ret, \n+\t'rtype` * const restrict source);\n+export_proto(transpose_'rtype_code`);\n \n void\n-transpose_`'rtype_code (rtype * const restrict ret, \n-\trtype * const restrict source)\n+transpose_'rtype_code` ('rtype` * const restrict ret, \n+\t'rtype` * const restrict source)\n {\n   /* r.* indicates the return array.  */\n   index_type rxstride, rystride;\n-  rtype_name *rptr;\n+  'rtype_name` *rptr;\n   /* s.* indicates the source array.  */\n   index_type sxstride, systride;\n-  const rtype_name *sptr;\n+  const 'rtype_name` *sptr;\n \n   index_type xcount, ycount;\n   index_type x, y;\n@@ -68,7 +68,7 @@ transpose_`'rtype_code (rtype * const restrict ret,\n       ret->dim[1].ubound = source->dim[0].ubound - source->dim[0].lbound;\n       ret->dim[1].stride = ret->dim[0].ubound+1;\n \n-      ret->data = internal_malloc_size (sizeof (rtype_name) * size0 ((array_t *) ret));\n+      ret->data = internal_malloc_size (sizeof ('rtype_name`) * size0 ((array_t *) ret));\n       ret->offset = 0;\n     }\n \n@@ -97,4 +97,4 @@ transpose_`'rtype_code (rtype * const restrict ret,\n     }\n }\n \n-#endif\n+#endif'"}]}