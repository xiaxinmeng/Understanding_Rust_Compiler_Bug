{"sha": "cb731872870ff15c4d4a4dc081191ed607faaa2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I3MzE4NzI4NzBmZjE1YzRkNGE0ZGMwODExOTFlZDYwN2ZhYWEyYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-04-06T15:46:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-04-06T15:46:04Z"}, "message": "C++: suggest missing headers for implicit use of \"std\" (PR c++/85021)\n\nWe provide fix-it hints for the most common \"std\" names when an explicit\n\"std::\" prefix is present, however we don't yet provide fix-it hints for\nthis implicit case:\n\n  using namespace std;\n  void f() {  cout << \"test\"; }\n\nfor which we emit:\n\n  t.cc: In function 'void f()':\n  t.cc:2:13: error: 'cout' was not declared in this scope\n  void f() {  cout << \"test\"; }\n              ^~~~\n\nThis patch detects if a \"using namespace std;\" directive is present\nin the current namespace, and if so, offers a suggestion for\nunrecognized names that are in our list of common \"std\" names:\n\n  t.cc: In function 'void f()':\n  t.cc:2:13: error: 'cout' was not declared in this scope\n   void f() {  cout << \"test\"; }\n               ^~~~\n  t.cc:2:13: note: 'std::cout' is defined in header '<iostream>'; did you forget to '#include <iostream>'?\n  +#include <iostream>\n   using namespace std;\n   void f() {  cout << \"test\"; }\n               ^~~~\n\ngcc/cp/ChangeLog:\n\tPR c++/85021\n\t* name-lookup.c (using_directives_contain_std_p): New function.\n\t(has_using_namespace_std_directive_p): New function.\n\t(suggest_alternatives_for): Simplify if/else logic using early\n\treturns.  If no candidates were found, and there's a\n\t\"using namespace std;\" directive, call\n\tmaybe_suggest_missing_std_header.\n\t(maybe_suggest_missing_header): Split later part of the function\n\tinto..\n\t(maybe_suggest_missing_std_header): New.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/85021\n\t* g++.dg/lookup/missing-std-include-7.C: New test.\n\nFrom-SVN: r259179", "tree": {"sha": "3483741b7ae559112f750a988ecb3cdcd8369315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3483741b7ae559112f750a988ecb3cdcd8369315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb731872870ff15c4d4a4dc081191ed607faaa2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb731872870ff15c4d4a4dc081191ed607faaa2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb731872870ff15c4d4a4dc081191ed607faaa2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb731872870ff15c4d4a4dc081191ed607faaa2b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a82f886aa67b81ef2c8499b698c2803f262bb582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82f886aa67b81ef2c8499b698c2803f262bb582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a82f886aa67b81ef2c8499b698c2803f262bb582"}], "stats": {"total": 211, "additions": 197, "deletions": 14}, "files": [{"sha": "a27484b5e18a71cb4dcc897b924f0ae8a50614a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb731872870ff15c4d4a4dc081191ed607faaa2b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb731872870ff15c4d4a4dc081191ed607faaa2b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb731872870ff15c4d4a4dc081191ed607faaa2b", "patch": "@@ -1,3 +1,16 @@\n+2018-04-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85021\n+\t* name-lookup.c (using_directives_contain_std_p): New function.\n+\t(has_using_namespace_std_directive_p): New function.\n+\t(suggest_alternatives_for): Simplify if/else logic using early\n+\treturns.  If no candidates were found, and there's a\n+\t\"using namespace std;\" directive, call\n+\tmaybe_suggest_missing_std_header.\n+\t(maybe_suggest_missing_header): Split later part of the function\n+\tinto..\n+\t(maybe_suggest_missing_std_header): New.\n+\n 2018-04-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/85242 - ICE with class definition in template parm."}, {"sha": "dc7699d5366a810c77571b6ed45078375d4a9737", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 79, "deletions": 14, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb731872870ff15c4d4a4dc081191ed607faaa2b/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb731872870ff15c4d4a4dc081191ed607faaa2b/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=cb731872870ff15c4d4a4dc081191ed607faaa2b", "patch": "@@ -41,6 +41,7 @@ static cxx_binding *cxx_binding_make (tree value, tree type);\n static cp_binding_level *innermost_nonclass_level (void);\n static void set_identifier_type_value_with_scope (tree id, tree decl,\n \t\t\t\t\t\t  cp_binding_level *b);\n+static bool maybe_suggest_missing_std_header (location_t location, tree name);\n \n /* Create an overload suitable for recording an artificial TYPE_DECL\n    and another decl.  We use this machanism to implement the struct\n@@ -5330,6 +5331,48 @@ qualify_lookup (tree val, int flags)\n   return true;\n }\n \n+/* Is there a \"using namespace std;\" directive within USINGS?  */\n+\n+static bool\n+using_directives_contain_std_p (vec<tree, va_gc> *usings)\n+{\n+  if (!usings)\n+    return false;\n+\n+  for (unsigned ix = usings->length (); ix--;)\n+    if ((*usings)[ix] == std_node)\n+      return true;\n+\n+  return false;\n+}\n+\n+/* Is there a \"using namespace std;\" directive within the current\n+   namespace (or its ancestors)?\n+   Compare with name_lookup::search_unqualified.  */\n+\n+static bool\n+has_using_namespace_std_directive_p ()\n+{\n+  /* Look at local using-directives.  */\n+  for (cp_binding_level *level = current_binding_level;\n+       level->kind != sk_namespace;\n+       level = level->level_chain)\n+    if (using_directives_contain_std_p (level->using_directives))\n+      return true;\n+\n+  /* Look at this namespace and its ancestors.  */\n+  for (tree scope = current_namespace; scope; scope = CP_DECL_CONTEXT (scope))\n+    {\n+      if (using_directives_contain_std_p (DECL_NAMESPACE_USING (scope)))\n+\treturn true;\n+\n+      if (scope == global_namespace)\n+\tbreak;\n+    }\n+\n+  return false;\n+}\n+\n /* Suggest alternatives for NAME, an IDENTIFIER_NODE for which name\n    lookup failed.  Search through all available namespaces and print out\n    possible candidates.  If no exact matches are found, and\n@@ -5400,11 +5443,23 @@ suggest_alternatives_for (location_t location, tree name,\n \t  inform (location_of (val), \"  %qE\", val);\n \t}\n       candidates.release ();\n+      return;\n     }\n-  else if (!suggest_misspellings)\n-    ;\n-  else if (name_hint hint = lookup_name_fuzzy (name, FUZZY_LOOKUP_NAME,\n-\t\t\t\t\t       location))\n+\n+  /* No candidates were found in the available namespaces.  */\n+\n+  /* If there's a \"using namespace std;\" active, and this\n+     is one of the most common \"std::\" names, then it's probably a\n+     missing #include.  */\n+  if (has_using_namespace_std_directive_p ())\n+    if (maybe_suggest_missing_std_header (location, name))\n+      return;\n+\n+  /* Otherwise, consider misspellings.  */\n+  if (!suggest_misspellings)\n+    return;\n+  if (name_hint hint = lookup_name_fuzzy (name, FUZZY_LOOKUP_NAME,\n+\t\t\t\t\t  location))\n     {\n       /* Show a spelling correction.  */\n       gcc_rich_location richloc (location);\n@@ -5512,20 +5567,13 @@ get_std_name_hint (const char *name)\n   return NULL;\n }\n \n-/* If SCOPE is the \"std\" namespace, then suggest pertinent header\n-   files for NAME at LOCATION.\n+/* Suggest pertinent header files for NAME at LOCATION, for common\n+   names within the \"std\" namespace.\n    Return true iff a suggestion was offered.  */\n \n static bool\n-maybe_suggest_missing_header (location_t location, tree name, tree scope)\n+maybe_suggest_missing_std_header (location_t location, tree name)\n {\n-  if (scope == NULL_TREE)\n-    return false;\n-  if (TREE_CODE (scope) != NAMESPACE_DECL)\n-    return false;\n-  /* We only offer suggestions for the \"std\" namespace.  */\n-  if (scope != std_node)\n-    return false;\n   gcc_assert (TREE_CODE (name) == IDENTIFIER_NODE);\n \n   const char *name_str = IDENTIFIER_POINTER (name);\n@@ -5542,6 +5590,23 @@ maybe_suggest_missing_header (location_t location, tree name, tree scope)\n   return true;\n }\n \n+/* If SCOPE is the \"std\" namespace, then suggest pertinent header\n+   files for NAME at LOCATION.\n+   Return true iff a suggestion was offered.  */\n+\n+static bool\n+maybe_suggest_missing_header (location_t location, tree name, tree scope)\n+{\n+  if (scope == NULL_TREE)\n+    return false;\n+  if (TREE_CODE (scope) != NAMESPACE_DECL)\n+    return false;\n+  /* We only offer suggestions for the \"std\" namespace.  */\n+  if (scope != std_node)\n+    return false;\n+  return maybe_suggest_missing_std_header (location, name);\n+}\n+\n /* Look for alternatives for NAME, an IDENTIFIER_NODE for which name\n    lookup failed within the explicitly provided SCOPE.  Suggest the\n    the best meaningful candidates (if any) as a fix-it hint."}, {"sha": "e192061962e87a8b1e30581264a39acb873e248f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb731872870ff15c4d4a4dc081191ed607faaa2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb731872870ff15c4d4a4dc081191ed607faaa2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb731872870ff15c4d4a4dc081191ed607faaa2b", "patch": "@@ -1,3 +1,8 @@\n+2018-04-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85021\n+\t* g++.dg/lookup/missing-std-include-7.C: New test.\n+\n 2018-04-06  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.dg/struct-simple.c: Revert r254862."}, {"sha": "4c87c8c0c4fbb7e3933813975584265be7b62e7b", "filename": "gcc/testsuite/g++.dg/lookup/missing-std-include-7.C", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb731872870ff15c4d4a4dc081191ed607faaa2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb731872870ff15c4d4a4dc081191ed607faaa2b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fmissing-std-include-7.C?ref=cb731872870ff15c4d4a4dc081191ed607faaa2b", "patch": "@@ -0,0 +1,100 @@\n+/* PR c++/85021: Verify that we suggest missing headers for common names in std::\n+   if there's a \"using namespace std;\" active.  */\n+\n+/* No using-directive.  */\n+\n+void test_1 ()\n+{\n+  cout << \"test\"; // { dg-error \"'cout' was not declared in this scope\" }\n+  // { dg-bogus \"'<iostream>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Local using-directive.  */\n+\n+void test_2 ()\n+{\n+  using namespace std;\n+  cout << \"test\"; // { dg-error \"'cout' was not declared in this scope\" }\n+  // { dg-message \"'std::cout' is defined in header '<iostream>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Local using-directive, but not of \"std\".  */\n+\n+namespace not_std {}\n+void test_3 ()\n+{\n+  using namespace not_std;\n+  cout << \"test\"; // { dg-error \"'cout' was not declared in this scope\" }\n+  // { dg-bogus \"'<iostream>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Local using-directive in wrong block.  */\n+\n+void test_4 ()\n+{\n+  {\n+    using namespace std;\n+  }\n+  cout << \"test\"; // { dg-error \"'cout' was not declared in this scope\" }\n+  // { dg-bogus \"'<iostream>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+/* Local using-directive used from nested block.  */\n+\n+void test_5 ()\n+{\n+  using namespace std;\n+\n+  for (int i = 0; i < 10; i++)\n+    {\n+      cout << \"test\"; // { dg-error \"'cout' was not declared in this scope\" }\n+      // { dg-message \"'std::cout' is defined in header '<iostream>'\" \"\" { target *-*-* } .-1 }\n+    }\n+}\n+\n+namespace ns_1 {\n+\n+namespace ns_2 {\n+\n+using namespace std;\n+\n+/* using-directive within the same namespace.  */\n+\n+void test_6 ()\n+{\n+  cout << \"test\"; // { dg-error \"'cout' was not declared in this scope\" }\n+  // { dg-message \"'std::cout' is defined in header '<iostream>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+namespace ns_3 {\n+\n+/* Locate the using-directive within ns_2, the parent namespace.  */\n+\n+void test_7 ()\n+{\n+  cout << \"test\"; // { dg-error \"'cout' was not declared in this scope\" }\n+  // { dg-message \"'std::cout' is defined in header '<iostream>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+} // namespace ns_3\n+} // namespace ns_2\n+\n+/* Back in ns_1, should not locate the using-directive.  */\n+\n+void test_8 ()\n+{\n+  cout << \"test\"; // { dg-error \"'cout' was not declared in this scope\" }\n+  // { dg-bogus \"'<iostream>'\" \"\" { target *-*-* } .-1 }\n+}\n+\n+} // namespace ns_1\n+\n+/* using-directive in global namespace.  */\n+using namespace std;\n+\n+void test_9 ()\n+{\n+  cout << \"test\"; // { dg-error \"'cout' was not declared in this scope\" }\n+  // { dg-message \"'std::cout' is defined in header '<iostream>'\" \"\" { target *-*-* } .-1 }\n+}\n+"}]}