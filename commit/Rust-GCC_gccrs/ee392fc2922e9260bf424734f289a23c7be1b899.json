{"sha": "ee392fc2922e9260bf424734f289a23c7be1b899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzOTJmYzI5MjJlOTI2MGJmNDI0NzM0ZjI4OWEyM2M3YmUxYjg5OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-04-20T19:59:56Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-04-20T19:59:56Z"}, "message": "re PR c++/55635 (Deallocation function (\"operator delete\") not called when destructor throws exception)\n\n\tcp/\n\tPR c++/55635\n\t* init.c (build_vec_delete_1): Protect operator delete call in try\n\tfinally.\n\t(build_delete): Likewise.\n\t* optimize.c (build_delete_destructor_body): Likewise.\n\n\ttestsuite/\n\tPR c++/55635\n\t* g++.dg/eh/delete1.C: New.\n\nFrom-SVN: r235297", "tree": {"sha": "cc271a4402029d6096a19aed56d717400e6ea923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc271a4402029d6096a19aed56d717400e6ea923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee392fc2922e9260bf424734f289a23c7be1b899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee392fc2922e9260bf424734f289a23c7be1b899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee392fc2922e9260bf424734f289a23c7be1b899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee392fc2922e9260bf424734f289a23c7be1b899/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dda49daffdfdbb10768cd4b89c7c349d3dd45415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda49daffdfdbb10768cd4b89c7c349d3dd45415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda49daffdfdbb10768cd4b89c7c349d3dd45415"}], "stats": {"total": 128, "additions": 113, "deletions": 15}, "files": [{"sha": "50f3cc3bfd93f1fff5d99410eec21e2a9df49bb5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee392fc2922e9260bf424734f289a23c7be1b899/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee392fc2922e9260bf424734f289a23c7be1b899/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee392fc2922e9260bf424734f289a23c7be1b899", "patch": "@@ -1,3 +1,11 @@\n+2016-04-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/55635\n+\t* init.c (build_vec_delete_1): Protect operator delete call in try\n+\tfinally.\n+\t(build_delete): Likewise.\n+\t* optimize.c (build_delete_destructor_body): Likewise.\n+\n 2016-04-20  Ilya Verbin  <ilya.verbin@intel.com>\n \n \tPR c++/69363"}, {"sha": "4d19e46842ee4495aaea11199537c0ce55b049c0", "filename": "gcc/cp/init.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee392fc2922e9260bf424734f289a23c7be1b899/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee392fc2922e9260bf424734f289a23c7be1b899/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=ee392fc2922e9260bf424734f289a23c7be1b899", "patch": "@@ -3673,7 +3673,9 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n   else if (!body)\n     body = deallocate_expr;\n   else\n-    body = build_compound_expr (input_location, body, deallocate_expr);\n+    /* The delete operator mist be called, even if a destructor\n+       throws.  */\n+    body = build2 (TRY_FINALLY_EXPR, void_type_node, body, deallocate_expr);\n \n   if (!body)\n     body = integer_zero_node;\n@@ -4510,7 +4512,13 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n       if (expr == error_mark_node)\n \treturn error_mark_node;\n       if (do_delete)\n-\texpr = build2 (COMPOUND_EXPR, void_type_node, expr, do_delete);\n+\t/* The delete operator must be called, regardless of whether\n+\t   the destructor throws.\n+\n+\t   [expr.delete]/7 The deallocation function is called\n+\t   regardless of whether the destructor for the object or some\n+\t   element of the array throws an exception.  */\n+\texpr = build2 (TRY_FINALLY_EXPR, void_type_node, expr, do_delete);\n \n       /* We need to calculate this before the dtor changes the vptr.  */\n       if (head)"}, {"sha": "e2032c1d90ef633111e5c81da7aab0fab0fae912", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee392fc2922e9260bf424734f289a23c7be1b899/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee392fc2922e9260bf424734f289a23c7be1b899/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=ee392fc2922e9260bf424734f289a23c7be1b899", "patch": "@@ -112,26 +112,24 @@ clone_body (tree clone, tree fn, void *arg_map)\n static void\n build_delete_destructor_body (tree delete_dtor, tree complete_dtor)\n {\n-  tree call_dtor, call_delete;\n   tree parm = DECL_ARGUMENTS (delete_dtor);\n   tree virtual_size = cxx_sizeof (current_class_type);\n \n   /* Call the corresponding complete destructor.  */\n   gcc_assert (complete_dtor);\n-  call_dtor = build_cxx_call (complete_dtor, 1, &parm,\n-\t\t\t      tf_warning_or_error);\n-  add_stmt (call_dtor);\n-\n-  add_stmt (build_stmt (0, LABEL_EXPR, cdtor_label));\n+  tree call_dtor = build_cxx_call (complete_dtor, 1, &parm,\n+\t\t\t\t   tf_warning_or_error);\n \n   /* Call the delete function.  */\n-  call_delete = build_op_delete_call (DELETE_EXPR, current_class_ptr,\n-                                      virtual_size,\n-                                      /*global_p=*/false,\n-                                      /*placement=*/NULL_TREE,\n-                                      /*alloc_fn=*/NULL_TREE,\n-\t\t\t\t      tf_warning_or_error);\n-  add_stmt (call_delete);\n+  tree call_delete = build_op_delete_call (DELETE_EXPR, current_class_ptr,\n+\t\t\t\t\t   virtual_size,\n+\t\t\t\t\t   /*global_p=*/false,\n+\t\t\t\t\t   /*placement=*/NULL_TREE,\n+\t\t\t\t\t   /*alloc_fn=*/NULL_TREE,\n+\t\t\t\t\t   tf_warning_or_error);\n+\n+  /* Operator delete must be called, whether or not the dtor throws.  */\n+  add_stmt (build2 (TRY_FINALLY_EXPR, void_type_node, call_dtor, call_delete));\n \n   /* Return the address of the object.  */\n   if (targetm.cxx.cdtor_returns_this ())"}, {"sha": "c767cd59ae7221f20128bb87863621108a1d3463", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee392fc2922e9260bf424734f289a23c7be1b899/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee392fc2922e9260bf424734f289a23c7be1b899/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee392fc2922e9260bf424734f289a23c7be1b899", "patch": "@@ -1,3 +1,8 @@\n+2016-04-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/55635\n+\t* g++.dg/eh/delete1.C: New.\n+\n 2016-04-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/avx256-unaligned-store-2.c: Add"}, {"sha": "43d7bc077f0ac967dabc49ea0edf703d8250f54c", "filename": "gcc/testsuite/g++.dg/eh/delete1.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee392fc2922e9260bf424734f289a23c7be1b899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdelete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee392fc2922e9260bf424734f289a23c7be1b899/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdelete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdelete1.C?ref=ee392fc2922e9260bf424734f289a23c7be1b899", "patch": "@@ -0,0 +1,79 @@\n+// { dg-do run }\n+// pr 55635, the delete operator must be called, regardless of whether\n+// the dtor throws\n+\n+static int deleted;\n+\n+void operator delete (void *) throw ()\n+{\n+  deleted = 1;\n+}\n+\n+struct Foo {\n+  ~Foo() throw(int) {throw 1;}\n+};\n+\n+struct Baz {\n+  void operator delete (void *) throw ()\n+  {\n+    deleted = 2;\n+  }\n+  virtual ~Baz() throw(int) {throw 1;}\n+};\n+\n+int non_virt ()\n+{\n+  deleted = 0;\n+  \n+  Foo *p = new Foo;\n+  try { delete p; }\n+  catch (...) { return deleted != 1;}\n+  return 1;\n+}\n+\n+int virt_glob ()\n+{\n+  deleted = 0;\n+  \n+  Baz *p = ::new Baz;\n+  try { ::delete p; }\n+  catch (...) { return deleted != 1;}\n+  return 1;\n+}\n+\n+int virt_del ()\n+{\n+  deleted = 0;\n+  \n+  Baz *p = new Baz;\n+  try { delete p; }\n+  catch (...) { return deleted != 2;}\n+  return 1;\n+}\n+\n+int ary ()\n+{\n+  deleted = 0;\n+\n+  Baz *p = new Baz[5];\n+  try { delete[] p; }\n+  catch (...) { return deleted != 1;}\n+  return 1;\n+}\n+\n+int main ()\n+{\n+  if (non_virt ())\n+    return 1;\n+\n+  if (virt_glob ())\n+    return 2;\n+\n+  if (virt_del ())\n+    return 3;\n+\n+  if (ary ())\n+    return 4;\n+  \n+  return 0;\n+}"}]}