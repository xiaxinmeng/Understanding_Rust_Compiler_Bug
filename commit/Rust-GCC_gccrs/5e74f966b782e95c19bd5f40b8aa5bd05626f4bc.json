{"sha": "5e74f966b782e95c19bd5f40b8aa5bd05626f4bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU3NGY5NjZiNzgyZTk1YzE5YmQ1ZjQwYjhhYTViZDA1NjI2ZjRiYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-11-28T11:52:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-11-28T11:52:21Z"}, "message": "print-rtl.c (print_rtx): If RTX code is bad, just say so.\n\n\t* print-rtl.c (print_rtx): If RTX code is bad, just say so.\n\tAlso minor cleanups.\n\nFrom-SVN: r47408", "tree": {"sha": "41d1d2dd42ef2333d76b891bc6b51cd493b91d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41d1d2dd42ef2333d76b891bc6b51cd493b91d02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e74f966b782e95c19bd5f40b8aa5bd05626f4bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e74f966b782e95c19bd5f40b8aa5bd05626f4bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e74f966b782e95c19bd5f40b8aa5bd05626f4bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e74f966b782e95c19bd5f40b8aa5bd05626f4bc/comments", "author": null, "committer": null, "parents": [{"sha": "d2c35e6748325002d7db6efbf27dc0aa8fa7efa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c35e6748325002d7db6efbf27dc0aa8fa7efa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c35e6748325002d7db6efbf27dc0aa8fa7efa1"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "19efa9d45ca80d47a8d773c7d32d13f785bda9a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e74f966b782e95c19bd5f40b8aa5bd05626f4bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e74f966b782e95c19bd5f40b8aa5bd05626f4bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e74f966b782e95c19bd5f40b8aa5bd05626f4bc", "patch": "@@ -1,3 +1,8 @@\n+Wed Nov 28 08:21:47 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* print-rtl.c (print_rtx): If RTX code is bad, just say so.\n+\tAlso minor cleanups.\n+\n Wed Nov 28 10:42:19 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* cse.c (true_dependence_in_rtx): New function."}, {"sha": "3213a511926b11304db2a70f30aadb462e494f30", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e74f966b782e95c19bd5f40b8aa5bd05626f4bc/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e74f966b782e95c19bd5f40b8aa5bd05626f4bc/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=5e74f966b782e95c19bd5f40b8aa5bd05626f4bc", "patch": "@@ -94,8 +94,7 @@ print_rtx (in_rtx)\n       if (flag_simple)\n \tfputc (' ', outfile);\n       else\n-\tfprintf (outfile, \"\\n%s%*s\",\n-\t\t print_rtx_head, indent * 2, \"\");\n+\tfprintf (outfile, \"\\n%s%*s\", print_rtx_head, indent * 2, \"\");\n       sawclose = 0;\n     }\n \n@@ -105,21 +104,27 @@ print_rtx (in_rtx)\n       sawclose = 1;\n       return;\n     }\n+  else if (GET_CODE (in_rtx) > NUM_RTX_CODE)\n+    {\n+       fprintf (outfile, \"(??? bad code %d\\n)\", GET_CODE (in_rtx));\n+       sawclose = 1;\n+       return;\n+    }\n \n-  is_insn = (INSN_P (in_rtx));\n+  is_insn = INSN_P (in_rtx);\n \n   /* When printing in VCG format we write INSNs, NOTE, LABEL, and BARRIER\n      in separate nodes and therefore have to handle them special here.  */\n-  if (dump_for_graph &&\n-      (is_insn || GET_CODE (in_rtx) == NOTE || GET_CODE (in_rtx) == CODE_LABEL\n-       || GET_CODE (in_rtx) == BARRIER))\n+  if (dump_for_graph\n+      && (is_insn || GET_CODE (in_rtx) == NOTE\n+\t  || GET_CODE (in_rtx) == CODE_LABEL || GET_CODE (in_rtx) == BARRIER))\n     {\n       i = 3;\n       indent = 0;\n     }\n   else\n     {\n-      /* print name of expression code */\n+      /* Print name of expression code.  */\n       if (flag_simple && GET_CODE (in_rtx) == CONST_INT)\n \tfputc ('(', outfile);\n       else\n@@ -164,7 +169,6 @@ print_rtx (in_rtx)\n   /* Get the format string and skip the first elements if we have handled\n      them already.  */\n   format_ptr = GET_RTX_FORMAT (GET_CODE (in_rtx)) + i;\n-\n   for (; i < GET_RTX_LENGTH (GET_CODE (in_rtx)); i++)\n     switch (*format_ptr++)\n       {\n@@ -310,8 +314,7 @@ print_rtx (in_rtx)\n \t    indent -= 2;\n \t  }\n \tif (sawclose)\n-\t  fprintf (outfile, \"\\n%s%*s\",\n-                   print_rtx_head, indent * 2, \"\");\n+\t  fprintf (outfile, \"\\n%s%*s\", print_rtx_head, indent * 2, \"\");\n \n \tfputs (\"] \", outfile);\n \tsawclose = 1;\n@@ -510,7 +513,8 @@ print_rtx (in_rtx)\n \n \t  tem = XEXP (in_rtx, 1);\n \t  if (tem)\n-\t    fputs (\"\\n    ])\\n  (const_string \\\"tail_call\\\") (sequence [\", outfile);\n+\t    fputs (\"\\n    ])\\n  (const_string \\\"tail_call\\\") (sequence [\",\n+\t\t   outfile);\n \t  for (; tem != 0; tem = NEXT_INSN (tem))\n \t    {\n \t      fputs (\"\\n    \", outfile);\n@@ -519,7 +523,8 @@ print_rtx (in_rtx)\n \n \t  tem = XEXP (in_rtx, 2);\n \t  if (tem)\n-\t    fputs (\"\\n    ])\\n  (const_string \\\"tail_recursion\\\") (sequence [\", outfile);\n+\t    fputs (\"\\n    ])\\n  (const_string \\\"tail_recursion\\\") (sequence [\",\n+\t\t   outfile);\n \t  for (; tem != 0; tem = NEXT_INSN (tem))\n \t    {\n \t      fputs (\"\\n    \", outfile);"}]}