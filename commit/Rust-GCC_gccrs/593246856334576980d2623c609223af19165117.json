{"sha": "593246856334576980d2623c609223af19165117", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkzMjQ2ODU2MzM0NTc2OTgwZDI2MjNjNjA5MjIzYWYxOTE2NTExNw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-07-25T19:38:54Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-07-25T19:38:54Z"}, "message": "sh.h (LOAD_EXTEND_OP): QImode zero-extends on SHmedia.\n\n\t* sh.h (LOAD_EXTEND_OP): QImode zero-extends on SHmedia.\n\t* sh.md (truncdiqi2, movqi_media): Likewise.\n\nFrom-SVN: r55757", "tree": {"sha": "30b5ae60a5a44c7834136d3b07ad68825229669b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30b5ae60a5a44c7834136d3b07ad68825229669b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/593246856334576980d2623c609223af19165117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593246856334576980d2623c609223af19165117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/593246856334576980d2623c609223af19165117", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593246856334576980d2623c609223af19165117/comments", "author": null, "committer": null, "parents": [{"sha": "9b331d8d72e553110c391de8621d5e71da031823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b331d8d72e553110c391de8621d5e71da031823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b331d8d72e553110c391de8621d5e71da031823"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "ec0b39676caff956b2f478fa9fb7d7361d374d5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593246856334576980d2623c609223af19165117/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593246856334576980d2623c609223af19165117/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=593246856334576980d2623c609223af19165117", "patch": "@@ -1,3 +1,8 @@\n+Thu Jul 25 20:34:50 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.h (LOAD_EXTEND_OP): QImode zero-extends on SHmedia.\n+\t* sh.md (truncdiqi2, movqi_media): Likewise.\n+\n 2002-07-25  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* gcse.c (obstack_chunk_alloc): Remove."}, {"sha": "3002c3ea77251cca1a9536e66e8eccd1e6beb354", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593246856334576980d2623c609223af19165117/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593246856334576980d2623c609223af19165117/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=593246856334576980d2623c609223af19165117", "patch": "@@ -2623,9 +2623,12 @@ while (0)\n    will either zero-extend or sign-extend.  The value of this macro should\n    be the code that says which one of the two operations is implicitly\n    done, NIL if none.  */\n+/* For SHmedia, we can truncate to QImode easier using zero extension.  */\n /* FP registers can load SImode values, but don't implicitly sign-extend\n    them to DImode.  */\n-#define LOAD_EXTEND_OP(MODE) ((MODE) != SImode ? SIGN_EXTEND : NIL)\n+#define LOAD_EXTEND_OP(MODE) \\\n+ (((MODE) == QImode  && TARGET_SHMEDIA) ? ZERO_EXTEND \\\n+  : (MODE) != SImode ? SIGN_EXTEND : NIL)\n \n /* Define if loading short immediate values into registers sign extends.  */\n #define SHORT_IMMEDIATES_SIGN_EXTEND"}, {"sha": "aa64bf5cb813aff25461afc12a5f3e422a5f7987", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593246856334576980d2623c609223af19165117/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593246856334576980d2623c609223af19165117/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=593246856334576980d2623c609223af19165117", "patch": "@@ -3382,17 +3382,15 @@\n   [(set_attr \"type\"   \"arith_media,store_media\")\n    (set_attr \"length\" \"8,4\")])\n \n-; N.B. we want sign-extension here because\n-; - we need to be consistent with LOAD_EXTEND_OP and movqi\n-; - only sign extension allows us to do signed compares transparently.\n-;  unsigned compares don't care about the kind of extension as long as\n-;   it's consistent.\n+; N.B. This should agree with LOAD_EXTEND_OP and movqi.\n+; Because we use zero extension, we can't provide signed QImode compares\n+; using a simple compare or conditional banch insn.\n (define_insn \"truncdiqi2\"\n   [(set (match_operand:QI 0 \"general_movdst_operand\" \"=r,m\")\n \t(truncate:QI (match_operand:DI 1 \"register_operand\" \"r,r\")))]\n   \"TARGET_SHMEDIA\"\n   \"@\n-\tori\t%1, -256, %0\n+\tand\t%1, 255, %0\n \tst%M0.b\t%m0, %1\"\n   [(set_attr \"type\"   \"arith_media,store\")])\n \n@@ -3741,7 +3739,7 @@\n   \"@\n \tadd.l\t%1, r63, %0\n \tmovi\t%1, %0\n-\tld%M1.b\t%m1, %0\n+\tld%M1.ub\t%m1, %0\n \tst%M0.b\t%m0, %1\"\n   [(set_attr \"type\" \"arith_media,arith_media,load_media,store_media\")])\n "}]}