{"sha": "176bf572a8c64f8417cc11b30cc935e04697991e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc2YmY1NzJhOGM2NGY4NDE3Y2MxMWIzMGNjOTM1ZTA0Njk3OTkxZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-08-04T15:05:35Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-08-04T15:05:35Z"}, "message": "Fix GNU coding style in gcov.c\n\n\t* gcov.c (main): Fix GNU coding style.\n\t(output_intermediate_file): Likewise.\n\t(process_file): Likewise.\n\t(generate_results): Likewise.\n\t(release_structures): Likewise.\n\t(create_file_names): Likewise.\n\t(find_source): Likewise.\n\t(read_graph_file): Likewise.\n\t(find_exception_blocks): Likewise.\n\t(canonicalize_name): Likewise.\n\t(make_gcov_file_name): Likewise.\n\t(mangle_name): Likewise.\n\t(accumulate_line_counts): Likewise.\n\t(output_branch_count): Likewise.\n\t(read_line): Likewise.\n\nFrom-SVN: r239134", "tree": {"sha": "1a71ad8516e1d45f9173ec1488085afd659fe198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a71ad8516e1d45f9173ec1488085afd659fe198"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/176bf572a8c64f8417cc11b30cc935e04697991e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176bf572a8c64f8417cc11b30cc935e04697991e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/176bf572a8c64f8417cc11b30cc935e04697991e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176bf572a8c64f8417cc11b30cc935e04697991e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae9281fc64aebd40fbe0ce1705c6ca0aaffdb0c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9281fc64aebd40fbe0ce1705c6ca0aaffdb0c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae9281fc64aebd40fbe0ce1705c6ca0aaffdb0c4"}], "stats": {"total": 106, "additions": 60, "deletions": 46}, "files": [{"sha": "97e6d68444ba3bb2a73d09e89f998896a2e228af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/176bf572a8c64f8417cc11b30cc935e04697991e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/176bf572a8c64f8417cc11b30cc935e04697991e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=176bf572a8c64f8417cc11b30cc935e04697991e", "patch": "@@ -1,3 +1,21 @@\n+2016-08-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov.c (main): Fix GNU coding style.\n+\t(output_intermediate_file): Likewise.\n+\t(process_file): Likewise.\n+\t(generate_results): Likewise.\n+\t(release_structures): Likewise.\n+\t(create_file_names): Likewise.\n+\t(find_source): Likewise.\n+\t(read_graph_file): Likewise.\n+\t(find_exception_blocks): Likewise.\n+\t(canonicalize_name): Likewise.\n+\t(make_gcov_file_name): Likewise.\n+\t(mangle_name): Likewise.\n+\t(accumulate_line_counts): Likewise.\n+\t(output_branch_count): Likewise.\n+\t(read_line): Likewise.\n+\n 2016-08-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR rtl-optimization/71779"}, {"sha": "40701a11e5a04fdfc27bb0ef048196ea71b69889", "filename": "gcc/gcov.c", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/176bf572a8c64f8417cc11b30cc935e04697991e/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/176bf572a8c64f8417cc11b30cc935e04697991e/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=176bf572a8c64f8417cc11b30cc935e04697991e", "patch": "@@ -435,7 +435,7 @@ main (int argc, char **argv)\n   names = XNEWVEC (name_map_t, a_names);\n   a_sources = 10;\n   sources = XNEWVEC (source_t, a_sources);\n-  \n+\n   argno = process_args (argc, argv);\n   if (optind == argc)\n     print_usage (true);\n@@ -444,12 +444,12 @@ main (int argc, char **argv)\n     multiple_files = 1;\n \n   first_arg = argno;\n-  \n+\n   for (; argno != argc; argno++)\n     {\n       if (flag_display_progress)\n-        printf (\"Processing file %d out of %d\\n\",\n-\t\targno - first_arg + 1, argc - first_arg);\n+\tprintf (\"Processing file %d out of %d\\n\", argno - first_arg + 1,\n+\t\targc - first_arg);\n       process_file (argv[argno]);\n     }\n \n@@ -671,8 +671,8 @@ output_intermediate_file (FILE *gcov_file, source_t *src)\n     {\n       /* function:<name>,<line_number>,<execution_count> */\n       fprintf (gcov_file, \"function:%d,%s,%s\\n\", fn->line,\n-               format_gcov (fn->blocks[0].count, 0, -1),\n-               flag_demangled_names ? fn->demangled_name : fn->name);\n+\t       format_gcov (fn->blocks[0].count, 0, -1),\n+\t       flag_demangled_names ? fn->demangled_name : fn->name);\n     }\n \n   for (line_num = 1, line = &src->lines[line_num];\n@@ -681,8 +681,8 @@ output_intermediate_file (FILE *gcov_file, source_t *src)\n     {\n       arc_t *arc;\n       if (line->exists)\n-        fprintf (gcov_file, \"lcount:%u,%s\\n\", line_num,\n-                 format_gcov (line->count, 0, -1));\n+\tfprintf (gcov_file, \"lcount:%u,%s\\n\", line_num,\n+\t\t format_gcov (line->count, 0, -1));\n       if (flag_branches)\n         for (arc = line->u.branches; arc; arc = arc->line_next)\n           {\n@@ -705,7 +705,6 @@ output_intermediate_file (FILE *gcov_file, source_t *src)\n     }\n }\n \n-\n /* Process a single input file.  */\n \n static void\n@@ -717,7 +716,7 @@ process_file (const char *file_name)\n   fns = read_graph_file ();\n   if (!fns)\n     return;\n-  \n+\n   read_count_file (fns);\n   while (fns)\n     {\n@@ -767,7 +766,7 @@ process_file (const char *file_name)\n \t    }\n \t  if (line >= sources[src].num_lines)\n \t    sources[src].num_lines = line + 1;\n-\t  \n+\n \t  solve_flow_graph (fn);\n \t  if (fn->has_catch)\n \t    find_exception_blocks (fn);\n@@ -848,15 +847,14 @@ generate_results (const char *file_name)\n   if (flag_gcov_file && flag_intermediate_format)\n     {\n       /* Open the intermediate file.  */\n-      gcov_intermediate_filename =\n-        get_gcov_intermediate_filename (file_name);\n+      gcov_intermediate_filename = get_gcov_intermediate_filename (file_name);\n       gcov_intermediate_file = fopen (gcov_intermediate_filename, \"w\");\n       if (!gcov_intermediate_file)\n-        {\n-          fnotice (stderr, \"Cannot open intermediate output file %s\\n\",\n-                   gcov_intermediate_filename);\n-          return;\n-        }\n+\t{\n+\t  fnotice (stderr, \"Cannot open intermediate output file %s\\n\",\n+\t\t   gcov_intermediate_filename);\n+\t  return;\n+\t}\n     }\n \n   for (ix = n_sources, src = sources; ix--; src++)\n@@ -866,15 +864,15 @@ generate_results (const char *file_name)\n \t  /* Ignore this source, if it is an absolute path (after\n \t     source prefix removal).  */\n \t  char first = src->coverage.name[0];\n-      \n+\n #if HAVE_DOS_BASED_FILE_SYSTEM\n \t  if (first && src->coverage.name[1] == ':')\n \t    first = src->coverage.name[2];\n #endif\n \t  if (IS_DIR_SEPARATOR (first))\n \t    continue;\n \t}\n-      \n+\n       accumulate_line_counts (src);\n       function_summary (&src->coverage, \"File\");\n       total_lines += src->coverage.lines;\n@@ -938,7 +936,7 @@ release_structures (void)\n   for (ix = n_sources; ix--;)\n     free (sources[ix].lines);\n   free (sources);\n-  \n+\n   for (ix = n_names; ix--;)\n     free (names[ix].name);\n   free (names);\n@@ -982,7 +980,7 @@ create_file_names (const char *file_name)\n \n       base = !stat (object_directory, &status) && S_ISDIR (status.st_mode);\n       strcat (name, object_directory);\n-      if (base && (! IS_DIR_SEPARATOR (name[strlen (name) - 1])))\n+      if (base && (!IS_DIR_SEPARATOR (name[strlen (name) - 1])))\n \tstrcat (name, \"/\");\n     }\n   else\n@@ -1075,16 +1073,16 @@ find_source (const char *file_name)\n       free (names);\n       names = name_map;\n     }\n-  \n+\n   /* Not found, try the canonical name. */\n   canon = canonicalize_name (file_name);\n-  name_map = (name_map_t *)bsearch\n-    (canon, names, n_names, sizeof (*names), name_search);\n+  name_map = (name_map_t *) bsearch (canon, names, n_names, sizeof (*names),\n+\t\t\t\t     name_search);\n   if (!name_map)\n     {\n       /* Not found with canonical name, create a new source.  */\n       source_t *src;\n-      \n+\n       if (n_sources == a_sources)\n \t{\n \t  a_sources *= 2;\n@@ -1210,12 +1208,12 @@ read_graph_file (void)\n \n \t  fn = XCNEW (function_t);\n \t  fn->name = function_name;\n-          if (flag_demangled_names)\n-            {\n-              fn->demangled_name = cplus_demangle (fn->name, DMGL_PARAMS);\n-              if (!fn->demangled_name)\n-                fn->demangled_name = fn->name;\n-            }\n+\t  if (flag_demangled_names)\n+\t    {\n+\t      fn->demangled_name = cplus_demangle (fn->name, DMGL_PARAMS);\n+\t      if (!fn->demangled_name)\n+\t\tfn->demangled_name = fn->name;\n+\t    }\n \t  fn->ident = ident;\n \t  fn->lineno_checksum = lineno_checksum;\n \t  fn->cfg_checksum = cfg_checksum;\n@@ -1293,7 +1291,7 @@ read_graph_file (void)\n \t\t  else\n \t\t    {\n \t\t      /* Non-local return from a callee of this\n-\t\t         function. The destination block is a setjmp.  */\n+\t\t\t function.  The destination block is a setjmp.  */\n \t\t      arc->is_nonlocal_return = 1;\n \t\t      fn->blocks[dest].is_nonlocal_return = 1;\n \t\t    }\n@@ -1302,7 +1300,7 @@ read_graph_file (void)\n \t      if (!arc->on_tree)\n \t\tfn->num_counts++;\n \t    }\n-\t  \n+\n \t  if (mark_catches)\n \t    {\n \t      /* We have a fake exit from this block.  The other\n@@ -1774,7 +1772,7 @@ find_exception_blocks (function_t *fn)\n     {\n       block_t *block = queue[--ix];\n       const arc_t *arc;\n-      \n+\n       for (arc = block->succ; arc; arc = arc->succ_next)\n \tif (!arc->fake && !arc->is_throw && arc->dst->exceptional)\n \t  {\n@@ -1862,7 +1860,7 @@ executed_summary (unsigned lines, unsigned executed)\n   else\n     fnotice (stdout, \"No executable lines\\n\");\n }\n-  \n+\n /* Output summary info for a function or file.  */\n \n static void\n@@ -1921,7 +1919,7 @@ canonicalize_name (const char *name)\n   for (dd_base = ptr; *base; base = probe)\n     {\n       size_t len;\n-      \n+\n       for (probe = base; *probe; probe++)\n \tif (IS_DIR_SEPARATOR (*probe))\n \t  break;\n@@ -1942,7 +1940,7 @@ canonicalize_name (const char *name)\n \t      /* S_ISLNK is not POSIX.1-1996.  */\n \t      || stat (result, &buf) || S_ISLNK (buf.st_mode)\n #endif\n-\t      )\n+\t\t)\n \t    {\n \t      /* Cannot elide, or unreadable or a symlink.  */\n \t      dd_base = ptr + 2 + slash;\n@@ -1993,7 +1991,7 @@ make_gcov_file_name (const char *input_name, const char *src_name)\n     {\n       /* Generate the input filename part.  */\n       result = XNEWVEC (char, strlen (input_name) + strlen (src_name) + 10);\n-  \n+\n       ptr = result;\n       ptr = mangle_name (input_name, ptr);\n       ptr[0] = ptr[1] = '#';\n@@ -2007,15 +2005,15 @@ make_gcov_file_name (const char *input_name, const char *src_name)\n \n   ptr = mangle_name (src_name, ptr);\n   strcpy (ptr, \".gcov\");\n-  \n+\n   return result;\n }\n \n static char *\n mangle_name (char const *base, char *ptr)\n {\n   size_t len;\n-  \n+\n   /* Generate the source filename part.  */\n   if (!flag_preserve_paths)\n     {\n@@ -2061,7 +2059,7 @@ mangle_name (char const *base, char *ptr)\n \t    }\n \t}\n     }\n-  \n+\n   return ptr;\n }\n \n@@ -2152,8 +2150,7 @@ accumulate_line_counts (source_t *src)\n   unsigned ix;\n \n   /* Reverse the function order.  */\n-  for (fn = src->functions, fn_p = NULL; fn;\n-       fn_p = fn, fn = fn_n)\n+  for (fn = src->functions, fn_p = NULL; fn; fn_p = fn, fn = fn_n)\n     {\n       fn_n = fn->line_next;\n       fn->line_next = fn_p;\n@@ -2361,7 +2358,6 @@ output_branch_count (FILE *gcov_file, int ix, const arc_t *arc)\n   else\n     return 0;\n   return 1;\n-\n }\n \n static const char *\n@@ -2391,7 +2387,7 @@ read_line (FILE *file)\n       string = XRESIZEVEC (char, string, string_len * 2);\n       string_len *= 2;\n     }\n-      \n+\n   return pos ? string : NULL;\n }\n "}]}