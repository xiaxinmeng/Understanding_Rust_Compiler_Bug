{"sha": "07338cf892502dff03d25ec1e4ccb0a6758f8cd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDczMzhjZjg5MjUwMmRmZjAzZDI1ZWMxZTRjY2IwYTY3NThmOGNkOA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-01-21T07:25:48Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-01-21T07:25:48Z"}, "message": "Remove workaround for register stack overwrite bug in mmix.\n\n\t* config/mmix/mmix.c (mmix_target_asm_function_prologue): Remove\n\tsupport for TARGET_REG_STACK_FILL_BUG.\n\t* config/mmix/mmix.h: Remove member has_call_without_parameters.\n\t(TARGET_MASK_REG_STACK_FILL_BUG, TARGET_REG_STACK_FILL_BUG):\n\tDelete.\n\t(TARGET_DEFAULT): Remove TARGET_MASK_REG_STACK_FILL_BUG.\n\t(TARGET_SWITCHES): Remove -mreg-stack-fill-bug-workaround and\n\t-mno-reg-stack-fill-bug-workaround.\n\t* config/mmix/mmix.md (\"call\", \"call_value\"): Don't set struct\n\tmachine member has_call_without_parameters.\n\t* doc/invoke.texi (Option Summary) <MMIX Options>: Remove\n\t-mreg-stack-fill-bug-workaround\tand\n\t-mno-reg-stack-fill-bug-workaround.\n\t(MMIX Options): Ditto.\n\nFrom-SVN: r49035", "tree": {"sha": "613ff68211ce8262cf7baf386ca1553650891773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/613ff68211ce8262cf7baf386ca1553650891773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07338cf892502dff03d25ec1e4ccb0a6758f8cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07338cf892502dff03d25ec1e4ccb0a6758f8cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07338cf892502dff03d25ec1e4ccb0a6758f8cd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/comments", "author": null, "committer": null, "parents": [{"sha": "7192cbf1e29ab55637e9f20a4a9508a46c8ec18c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7192cbf1e29ab55637e9f20a4a9508a46c8ec18c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7192cbf1e29ab55637e9f20a4a9508a46c8ec18c"}], "stats": {"total": 98, "additions": 22, "deletions": 76}, "files": [{"sha": "8ee4aefe8c0cf64fa9fc6754e8a12529bf79a070", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07338cf892502dff03d25ec1e4ccb0a6758f8cd8", "patch": "@@ -1,3 +1,21 @@\n+2002-01-21  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\tRemove workaround for register stack overwrite bug in mmix.\n+\t* config/mmix/mmix.c (mmix_target_asm_function_prologue): Remove\n+\tsupport for TARGET_REG_STACK_FILL_BUG.\n+\t* config/mmix/mmix.h: Remove member has_call_without_parameters.\n+\t(TARGET_MASK_REG_STACK_FILL_BUG, TARGET_REG_STACK_FILL_BUG):\n+\tDelete.\n+\t(TARGET_DEFAULT): Remove TARGET_MASK_REG_STACK_FILL_BUG.\n+\t(TARGET_SWITCHES): Remove -mreg-stack-fill-bug-workaround and\n+\t-mno-reg-stack-fill-bug-workaround.\n+\t* config/mmix/mmix.md (\"call\", \"call_value\"): Don't set struct\n+\tmachine member has_call_without_parameters.\n+\t* doc/invoke.texi (Option Summary) <MMIX Options>: Remove\n+\t-mreg-stack-fill-bug-workaround\tand\n+\t-mno-reg-stack-fill-bug-workaround.\n+\t(MMIX Options): Ditto.\n+\n 2002-01-21  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/h8300.c (function_arg): Replace 0 with NULL_RTX"}, {"sha": "bbe8313a4b45d9c4199dab5fb6fa78498fbe2485", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=07338cf892502dff03d25ec1e4ccb0a6758f8cd8", "patch": "@@ -966,52 +966,6 @@ mmix_target_asm_function_prologue (stream, locals_size)\n       break;\n \n   mmix_highest_saved_stack_register = regno;\n-\n-  /* FIXME: Remove this when a corrected mmix version is released.\n-\n-     This kludge is a work-around for a presumed bug in the mmix simulator\n-     (reported to knuth-bug), all versions up and including \"Version of 14\n-     October 2001\".  When the circular register stack fills up, the parts\n-     that would be overwritten need to be written to memory.  If the\n-     \"filling\" instruction is a PUSHJ or PUSHGO, rL == 0 afterwards.  That\n-     precise condition (rS == rO && rL == 0) is the same as for an empty\n-     register stack, which means no more data is written to memory for\n-     that round.  A hack is to remove the \"&& L!=0\" from \"@<Increase\n-     rL@>=\" in mmix-sim.w: the register stack isn't empty under normal\n-     circumstances, unless SAVE or UNSAVE is used, interrupts are enabled\n-     or cases where rS == rO and rL is explicitly written to 0 as in\n-     \"PUT rL,0\".\n-\n-     A workaround is to make sure PUSHJ or PUSHGO isn't filling up the\n-     register stac.  This is accomplished if $16 or higher is written\n-     before the function call.  This doesn't happen from a leaf functions\n-     of course.  For the MMIXware ABI, this can't happen if all called\n-     functions have parameters, because parameters start at $16.\n-     Otherwise, and for the GNU ABI, if any register $16 and up is used,\n-     we can see if it's mentioned before any function-call without\n-     parameters.  This isn't too important; the bug will probably be fixed\n-     soon and there's an option to not emit the work-around code.  The\n-     call-with-parameters kludge wouldn't be there if it hadn't been for\n-     it being left-over from a previous mmix version.\n-\n-     The actual code makes sure any register stack fill happens as early\n-     as in the function prologue with a \"SET $16,$16\" (essentially a nop\n-     except for the effects on the register stack).  */\n-  if (TARGET_REG_STACK_FILL_BUG\n-      && ((TARGET_ABI_GNU && !leaf_function_p ())\n-\t  || (!TARGET_ABI_GNU\n-\t      && cfun->machine->has_call_without_parameters)))\n-    {\n-      /* We don't have a specific macro or derivable expression for the\n-\t first non-call-saved register.  If we need it in other places\n-\t than here (which is temporary code anyway), such a macro should\n-\t be added.  */\n-      int flush_regno\n-\t= TARGET_ABI_GNU ? mmix_highest_saved_stack_register + 2 : 16;\n-\n-      fprintf (stream, \"\\tSET %s,%s\\n\",\n-\t       reg_names[flush_regno], reg_names[flush_regno]);\n-    }\n }\n \n /* TARGET_ASM_FUNCTION_EPILOGUE.  */"}, {"sha": "9c1e2f13c25a3c8598b721c4efee77ad6e335b9b", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=07338cf892502dff03d25ec1e4ccb0a6758f8cd8", "patch": "@@ -90,7 +90,6 @@ extern struct rtx_def *mmix_compare_op1;\n    mmix.md too.  */\n struct machine_function\n  {\n-   int has_call_without_parameters;\n    int has_landing_pad;\n  };\n \n@@ -157,7 +156,6 @@ extern int target_flags;\n #define TARGET_MASK_KNUTH_DIVISION 16\n #define TARGET_MASK_TOPLEVEL_SYMBOLS 32\n #define TARGET_MASK_BRANCH_PREDICT 64\n-#define TARGET_MASK_REG_STACK_FILL_BUG 128\n \n /* FIXME: Get rid of this one.  */\n #define TARGET_LIBFUNC (target_flags & TARGET_MASK_LIBFUNCS)\n@@ -167,11 +165,9 @@ extern int target_flags;\n #define TARGET_KNUTH_DIVISION (target_flags & TARGET_MASK_KNUTH_DIVISION)\n #define TARGET_TOPLEVEL_SYMBOLS (target_flags & TARGET_MASK_TOPLEVEL_SYMBOLS)\n #define TARGET_BRANCH_PREDICT (target_flags & TARGET_MASK_BRANCH_PREDICT)\n-#define TARGET_REG_STACK_FILL_BUG \\\n- (target_flags & TARGET_MASK_REG_STACK_FILL_BUG)\n \n #define TARGET_DEFAULT \\\n- (TARGET_MASK_BRANCH_PREDICT | TARGET_MASK_REG_STACK_FILL_BUG)\n+ (TARGET_MASK_BRANCH_PREDICT)\n \n /* FIXME: Provide a way to *load* the epsilon register.  */\n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n@@ -202,12 +198,6 @@ extern int target_flags;\n    N_(\"Use P-mnemonics for branches statically predicted as taken\")},\t\\\n   {\"no-branch-predict\",\t-TARGET_MASK_BRANCH_PREDICT,\t\t\t\\\n    N_(\"Don't use P-mnemonics for branches\")},\t\t\t\t\\\n-  {\"reg-stack-fill-bug-workaround\",\tTARGET_MASK_REG_STACK_FILL_BUG,\t\\\n-   N_(\"Work around inconsistent behavior when a PUSHJ or PUSHGO\\\n- instruction fills the register stack\")},\t\t\t\t\\\n-  {\"no-reg-stack-fill-bug-workaround\",\t-TARGET_MASK_REG_STACK_FILL_BUG,\\\n-   N_(\"Don't work around inconsistent behavior when a PUSHJ or PUSHGO\\\n- instruction fills the register stack\")},\t\\\n   {\"\",\t\t\tTARGET_DEFAULT, \"\"}}\n \n /* Unfortunately, this must not reference anything in \"mmix.c\".  */"}, {"sha": "c8e0167c1db94ae36241f8bc0600a3c4d7be923c", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=07338cf892502dff03d25ec1e4ccb0a6758f8cd8", "patch": "@@ -996,11 +996,6 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n   if (operands[2] == NULL_RTX)\n     operands[2] = const0_rtx;\n \n-  /* FIXME: Documentation bug: operands[3] (operands[2] for 'call') is the\n-     *next* argument register, not the number of arguments in registers.  */\n-  cfun->machine->has_call_without_parameters\n-    |= REG_P (operands[2]) && REGNO (operands[2]) == MMIX_FIRST_ARG_REGNUM;\n-\n   operands[4] = gen_rtx_REG (DImode, MMIX_INCOMING_RETURN_ADDRESS_REGNUM);\n }\")\n \n@@ -1025,9 +1020,8 @@ DIVU %1,%1,%2\\;GET %0,:rR\\;NEGU %2,0,%0\\;CSNN %0,$255,%2\")\n     operands[3] = const0_rtx;\n \n   /* FIXME: Documentation bug: operands[3] (operands[2] for 'call') is the\n-     *next* argument register, not the number of arguments in registers.  */\n-  cfun->machine->has_call_without_parameters\n-    |= REG_P (operands[3]) && REGNO (operands[3]) == MMIX_FIRST_ARG_REGNUM;\n+     *next* argument register, not the number of arguments in registers.\n+     (There used to be code here where that mattered.)  */\n \n   operands[5] = gen_rtx_REG (DImode, MMIX_INCOMING_RETURN_ADDRESS_REGNUM);\n }\")"}, {"sha": "945819e70499280289f48be43ee1cd990d5f2e77", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07338cf892502dff03d25ec1e4ccb0a6758f8cd8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=07338cf892502dff03d25ec1e4ccb0a6758f8cd8", "patch": "@@ -593,8 +593,7 @@ in the following sections.\n @gccoptlist{\n -mlibfuncs -mno-libfuncs -mepsilon -mno-epsilon -mabi=gnu @gol\n -mabi=mmixware -mzero-extend -mknuthdiv -mtoplevel-symbols @gol\n--melf -mbranch-predict -mreg-stack-fill-bug-workaround @gol\n--mno-branch-predict -mno-reg-stack-fill-bug-workaround}\n+-melf -mbranch-predict -mno-branch-predict}\n \n @emph{IA-64 Options}\n @gccoptlist{\n@@ -9486,15 +9485,6 @@ Generate an executable in the ELF format, rather than the default\n @opindex mno-branch-predict\n Use (do not use) the probable-branch instructions, when static branch\n prediction indicates a probable branch.\n-\n-@item -mreg-stack-fill-bug-workaround\n-@itemx -mno-reg-stack-fill-bug-workaround\n-@opindex mreg-stack-fill-bug-workaround\n-@opindex mno-reg-stack-fill-bug-workaround\n-Work around (do not work around) an inconsistency in the circular\n-register stack mechanism in the @command{mmix} simulator, which\n-causes entries in the register stack to not be flushed to memory if\n-the instruction causing the fill-up is @code{PUSHJ} or @code{PUSHGO}.\n @end table\n \n @node PDP-11 Options"}]}