{"sha": "60108d34dc4958a8b4081ceb0c833f76648e7157", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAxMDhkMzRkYzQ5NThhOGI0MDgxY2ViMGM4MzNmNzY2NDhlNzE1Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-09-23T00:51:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-09-23T00:51:40Z"}, "message": "re PR debug/17389 (ICE in dwarf2out_finish, at dwarf2out.c:13566)\n\n\tPR debug/17389\n\t* dwarf2out.c (dwarf2out_finish): Deal with nested functions\n\tof fully inlined functions.\n\t* tree-inline.c (inline_forbidden_p_1): Nested functions can be\n\tinlined.\n\nFrom-SVN: r87911", "tree": {"sha": "101fce60f8be93e2d49a7ca27ef11256887c00e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101fce60f8be93e2d49a7ca27ef11256887c00e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60108d34dc4958a8b4081ceb0c833f76648e7157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60108d34dc4958a8b4081ceb0c833f76648e7157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60108d34dc4958a8b4081ceb0c833f76648e7157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60108d34dc4958a8b4081ceb0c833f76648e7157/comments", "author": null, "committer": null, "parents": [{"sha": "e53de54da399b14c108c994a81c047502cf4a513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53de54da399b14c108c994a81c047502cf4a513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53de54da399b14c108c994a81c047502cf4a513"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "ffbdcfb9edab38c71312df20ba2d7a1751e52cc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60108d34dc4958a8b4081ceb0c833f76648e7157/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60108d34dc4958a8b4081ceb0c833f76648e7157/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60108d34dc4958a8b4081ceb0c833f76648e7157", "patch": "@@ -1,5 +1,11 @@\n 2004-09-23  Jan Hubicka  <jh@suse.cz>\n \n+\tPR debug/17389\n+\t* dwarf2out.c (dwarf2out_finish): Deal with nested functions\n+\tof fully inlined functions.\n+\t* tree-inline.c (inline_forbidden_p_1): Nested functions can be\n+\tinlined.\n+\n \t* cfgexpand.c (add_reg_br_prob_note): New function.\n \t(expand_gimple_cond_expr): Use it.\n \t(tree_expand_cfg): No longer kill the profile."}, {"sha": "3c47864c85b86b6a8d5327453c3c14c3b7d330be", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60108d34dc4958a8b4081ceb0c833f76648e7157/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60108d34dc4958a8b4081ceb0c833f76648e7157/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=60108d34dc4958a8b4081ceb0c833f76648e7157", "patch": "@@ -13554,7 +13554,12 @@ dwarf2out_finish (const char *filename)\n \t\t nested function can be optimized away, which results\n \t\t in the nested function die being orphaned.  Likewise\n \t\t with the return type of that nested function.  Force\n-\t\t this to be a child of the containing function.  */\n+\t\t this to be a child of the containing function.\n+\n+\t\t It may happen that even the containing function got fully\n+\t\t inlined and optimized out.  In that case we are lost and\n+\t\t assign the empty child.  This should not be big issue as\n+\t\t the function is likely unreachable too.  */\n \t      tree context = NULL_TREE;\n \n \t      gcc_assert (node->created_for);\n@@ -13567,8 +13572,8 @@ dwarf2out_finish (const char *filename)\n \t      gcc_assert (context && TREE_CODE (context) == FUNCTION_DECL);\n \t      \n \t      origin = lookup_decl_die (context);\n-\t      gcc_assert (origin);\n-\t      add_child_die (origin, die);\n+\t      if (origin)\n+\t        add_child_die (origin, die);\n \t    }\n \t}\n     }"}, {"sha": "d026dca18ecf7687b744befc64dd6d2f1d149f0d", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60108d34dc4958a8b4081ceb0c833f76648e7157/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60108d34dc4958a8b4081ceb0c833f76648e7157/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=60108d34dc4958a8b4081ceb0c833f76648e7157", "patch": "@@ -993,20 +993,6 @@ inline_forbidden_p_1 (tree *nodep, int *walk_subtrees ATTRIBUTE_UNUSED,\n \t  }\n       break;\n \n-    case BIND_EXPR:\n-      for (t = BIND_EXPR_VARS (node); t ; t = TREE_CHAIN (t))\n-\t{\n-          /* We cannot inline functions that contain other functions.  */\n-\t  if (TREE_CODE (t) == FUNCTION_DECL && DECL_INITIAL (t))\n-\t    {\n-\t      inline_forbidden_reason\n-\t\t= N_(\"%Jfunction '%F' can never be inlined \"\n-\t\t     \"because it contains a nested function\");\n-\t      return node;\n-\t    }\n-\t}\n-      break;\n-\n     case GOTO_EXPR:\n       t = TREE_OPERAND (node, 0);\n "}]}