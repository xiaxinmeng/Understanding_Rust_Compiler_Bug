{"sha": "ce59f39f78b0a517eaa61b6845c25c60bc19c455", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U1OWYzOWY3OGIwYTUxN2VhYTYxYjY4NDVjMjVjNjBiYzE5YzQ1NQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-05-27T20:44:12Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-10T09:16:21Z"}, "message": "[Ada] Reformatting and typo corrections\n\ngcc/ada/\n\n\t* exp_aggr.adb, exp_spark.adb, sem_ch13.ads, sem_ch13.adb,\n\tsnames.ads-tmpl: Minor reformatting and typo fixes.", "tree": {"sha": "27441d7be9da9cb6cafefbf6af28604008af564c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27441d7be9da9cb6cafefbf6af28604008af564c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce59f39f78b0a517eaa61b6845c25c60bc19c455", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce59f39f78b0a517eaa61b6845c25c60bc19c455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce59f39f78b0a517eaa61b6845c25c60bc19c455", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce59f39f78b0a517eaa61b6845c25c60bc19c455/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3026d451dacabecc7ff42b5b81deaf420d758aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3026d451dacabecc7ff42b5b81deaf420d758aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3026d451dacabecc7ff42b5b81deaf420d758aa"}], "stats": {"total": 135, "additions": 68, "deletions": 67}, "files": [{"sha": "8c5881b07f1918e7cd253beff0b18bbdafbb681d", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce59f39f78b0a517eaa61b6845c25c60bc19c455/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce59f39f78b0a517eaa61b6845c25c60bc19c455/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=ce59f39f78b0a517eaa61b6845c25c60bc19c455", "patch": "@@ -6850,21 +6850,22 @@ package body Exp_Aggr is\n    --------------------------------\n \n    procedure Expand_Container_Aggregate (N : Node_Id) is\n-      Loc   : constant Source_Ptr := Sloc (N);\n-      Typ   : constant Entity_Id := Etype (N);\n-      Asp   : constant Node_Id := Find_Value_Of_Aspect (Typ, Aspect_Aggregate);\n+      Loc : constant Source_Ptr := Sloc (N);\n+      Typ : constant Entity_Id := Etype (N);\n+      Asp : constant Node_Id := Find_Value_Of_Aspect (Typ, Aspect_Aggregate);\n \n       Empty_Subp          : Node_Id := Empty;\n       Add_Named_Subp      : Node_Id := Empty;\n       Add_Unnamed_Subp    : Node_Id := Empty;\n       New_Indexed_Subp    : Node_Id := Empty;\n       Assign_Indexed_Subp : Node_Id := Empty;\n \n-      Aggr_Code  : constant List_Id := New_List;\n-      Temp       : constant Entity_Id :=  Make_Temporary (Loc, 'C', N);\n+      Aggr_Code : constant List_Id   := New_List;\n+      Temp      : constant Entity_Id := Make_Temporary (Loc, 'C', N);\n \n       Decl      : Node_Id;\n-      Init_Stat  : Node_Id;\n+      Init_Stat : Node_Id;\n+\n    begin\n       Parse_Aspect_Aggregate (Asp,\n         Empty_Subp, Add_Named_Subp, Add_Unnamed_Subp,\n@@ -6874,42 +6875,42 @@ package body Exp_Aggr is\n           Defining_Identifier => Temp,\n           Object_Definition   => New_Occurrence_Of (Typ, Loc));\n \n-         Insert_Action (N, Decl);\n-         if Ekind (Entity (Empty_Subp)) = E_Constant then\n-            Init_Stat := Make_Assignment_Statement (Loc,\n-              Name => New_Occurrence_Of (Temp, Loc),\n-              Expression => Make_Function_Call (Loc,\n-                Name => New_Occurrence_Of (Entity (Empty_Subp), Loc)));\n-         else\n-            Init_Stat := Make_Assignment_Statement (Loc,\n-              Name => New_Occurrence_Of (Temp, Loc),\n-              Expression => New_Occurrence_Of (Entity (Empty_Subp), Loc));\n-         end if;\n-         Append (Init_Stat, Aggr_Code);\n+      Insert_Action (N, Decl);\n+      if Ekind (Entity (Empty_Subp)) = E_Constant then\n+         Init_Stat := Make_Assignment_Statement (Loc,\n+           Name => New_Occurrence_Of (Temp, Loc),\n+           Expression => Make_Function_Call (Loc,\n+             Name => New_Occurrence_Of (Entity (Empty_Subp), Loc)));\n+      else\n+         Init_Stat := Make_Assignment_Statement (Loc,\n+           Name => New_Occurrence_Of (Temp, Loc),\n+           Expression => New_Occurrence_Of (Entity (Empty_Subp), Loc));\n+      end if;\n+      Append (Init_Stat, Aggr_Code);\n \n-         --  First case : positional aggregate.\n+      --  First case: positional aggregate\n \n-         if Present (Expressions (N)) then\n-            declare\n-               Insert : constant Entity_Id := Entity (Add_Unnamed_Subp);\n-               Comp   : Node_Id;\n-               Stat   : Node_Id;\n-            begin\n-               Comp := First (Expressions (N));\n-               while Present (Comp) loop\n-                  Stat := Make_Procedure_Call_Statement (Loc,\n-                    Name => New_Occurrence_Of (Insert, Loc),\n-                    Parameter_Associations =>\n-                      New_List (New_Occurrence_Of (Temp, Loc),\n-                         New_Copy_Tree (Comp)));\n-                  Append (Stat, Aggr_Code);\n-                  Next (Comp);\n-               end loop;\n-            end;\n-         end if;\n-         Insert_Actions (N, Aggr_Code);\n-         Rewrite (N, New_Occurrence_Of (Temp, Loc));\n-         Analyze_And_Resolve (N, Typ);\n+      if Present (Expressions (N)) then\n+         declare\n+            Insert : constant Entity_Id := Entity (Add_Unnamed_Subp);\n+            Comp   : Node_Id;\n+            Stat   : Node_Id;\n+         begin\n+            Comp := First (Expressions (N));\n+            while Present (Comp) loop\n+               Stat := Make_Procedure_Call_Statement (Loc,\n+                 Name => New_Occurrence_Of (Insert, Loc),\n+                 Parameter_Associations =>\n+                   New_List (New_Occurrence_Of (Temp, Loc),\n+                     New_Copy_Tree (Comp)));\n+               Append (Stat, Aggr_Code);\n+               Next (Comp);\n+            end loop;\n+         end;\n+      end if;\n+      Insert_Actions (N, Aggr_Code);\n+      Rewrite (N, New_Occurrence_Of (Temp, Loc));\n+      Analyze_And_Resolve (N, Typ);\n    end Expand_Container_Aggregate;\n \n    ------------------------------"}, {"sha": "40621bd9e33ad5530fedc23a0083d4fdcfae5fe4", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce59f39f78b0a517eaa61b6845c25c60bc19c455/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce59f39f78b0a517eaa61b6845c25c60bc19c455/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=ce59f39f78b0a517eaa61b6845c25c60bc19c455", "patch": "@@ -73,7 +73,7 @@ package body Exp_SPARK is\n    --  Rewrite operator /= based on operator = when defined explicitly\n \n    procedure Expand_SPARK_Delta_Or_Update (Typ : Entity_Id; Aggr : Node_Id);\n-   --  Common expansion of attribute Update and delta_aggregate\n+   --  Common expansion for attribute Update and delta aggregates\n \n    ------------------\n    -- Expand_SPARK --\n@@ -168,7 +168,7 @@ package body Exp_SPARK is\n \n       if Is_Array_Type (Typ) then\n \n-         --  Multi-dimensional array\n+         --  Multidimensional arrays\n \n          if Present (Next_Index (First_Index (Typ))) then\n             Assoc := First (Component_Associations (Aggr));\n@@ -206,7 +206,7 @@ package body Exp_SPARK is\n                Next (Assoc);\n             end loop;\n \n-         --  One-dimensional array\n+         --  One-dimensional arrays\n \n          else\n             Assoc := First (Component_Associations (Aggr));\n@@ -231,7 +231,7 @@ package body Exp_SPARK is\n                      Apply_Scalar_Range_Check\n                        (High_Bound (Index), Etype (Index_Typ));\n \n-                     --  Otherwise the index denotes a single element\n+                  --  Otherwise the index denotes a single element\n \n                   else\n                      Apply_Scalar_Range_Check (Index, Etype (Index_Typ));\n@@ -246,13 +246,13 @@ package body Exp_SPARK is\n \n       else pragma Assert (Is_Record_Type (Typ));\n \n-         --  If the aggregate has multiple component choices, e.g.\n+         --  If the aggregate has multiple component choices, e.g.:\n          --\n          --    X'Update (A | B | C => 123)\n          --\n-         --  then each component might be of a different type and might\n-         --  or might not require a range check. We first rewrite\n-         --  associations into single-component choices, e.g.:\n+         --  then each component might be of a different type and might or\n+         --  might not require a range check. We first rewrite associations\n+         --  into single-component choices, e.g.:\n          --\n          --    X'Update (A => 123, B => 123, C => 123)\n          --"}, {"sha": "bad6a96fe5ab9820de25262973069e4ccaee729c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce59f39f78b0a517eaa61b6845c25c60bc19c455/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce59f39f78b0a517eaa61b6845c25c60bc19c455/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ce59f39f78b0a517eaa61b6845c25c60bc19c455", "patch": "@@ -243,8 +243,8 @@ package body Sem_Ch13 is\n    --  are in keeping with the components of Address_Clause_Check_Record below.\n \n    procedure Validate_Aspect_Aggregate (N : Node_Id);\n-   --  Check legality of operations given in the Ada_2020 Aggregate aspect\n-   --  for containers.\n+   --  Check legality of operations given in the Ada 202x Aggregate aspect for\n+   --  containers.\n \n    procedure Resolve_Aspect_Aggregate\n     (Typ  : Entity_Id;\n@@ -5211,10 +5211,10 @@ package body Sem_Ch13 is\n          Indexing_Found : Boolean := False;\n \n          procedure Check_Inherited_Indexing;\n-         --  For a derived type, check tha for a derived type a specification\n-         --  of an indexing aspect can only be confirming, i.e. uses the\n-         --  the same name as in the parent type.\n-         --  AI12-0160: verify that an indexing cannot be specified for\n+         --  For a derived type, check that for a derived type, a specification\n+         --  of an indexing aspect can only be confirming, i.e. uses the same\n+         --  name as in the parent type.\n+         --  AI12-0160: Verify that an indexing cannot be specified for\n          --  a derived type unless it is specified for the parent.\n \n          procedure Check_One_Function (Subp : Entity_Id);\n@@ -14924,16 +14924,16 @@ package body Sem_Ch13 is\n     (Typ :  Entity_Id;\n      Expr : Node_Id)\n    is\n-      --  Predicates that establish the legality of each possible\n-      --  operation in an Aggregate aspect.\n+      --  Predicates that establish the legality of each possible operation in\n+      --  an Aggregate aspect.\n \n       function Valid_Empty          (E : Entity_Id) return Boolean;\n       function Valid_Add_Named      (E : Entity_Id) return Boolean;\n       function Valid_Add_Unnamed    (E : Entity_Id) return Boolean;\n       function Valid_New_Indexed    (E : Entity_Id) return Boolean;\n \n-      --  Note : the leglity rules for Assign_Indexed are the same\n-      --  as for Add_Named.\n+      --  Note: The legality rules for Assign_Indexed are the same as for\n+      --  Add_Named.\n \n       generic\n         with function Pred (Id : Node_Id) return Boolean;\n@@ -14955,7 +14955,7 @@ package body Sem_Ch13 is\n          elsif Ekind (E) = E_Function then\n             return No (First_Formal (E))\n               or else\n-               (Is_Integer_Type (Etype (First_Formal (E)))\n+                (Is_Integer_Type (Etype (First_Formal (E)))\n                   and then No (Next_Formal (First_Formal (E))));\n          else\n             return False;\n@@ -14998,7 +14998,7 @@ package body Sem_Ch13 is\n            and then Etype (First_Formal (E)) = Typ\n            and then Ekind (First_Formal (E)) = E_In_Out_Parameter\n            and then\n-              not Is_Limited_Type (Etype (Next_Formal (First_Formal (E))));\n+             not Is_Limited_Type (Etype (Next_Formal (First_Formal (E))));\n       end Valid_Add_Unnamed;\n \n       -----------------------\n@@ -15070,9 +15070,9 @@ package body Sem_Ch13 is\n       while Present (Assoc) loop\n          Op_Name := Chars (First (Choices (Assoc)));\n \n-         --  When verifying the consistency of aspects between\n-         --  the freeze point and the end of declarqtions, we\n-         --  use a copy which is not analyzed yet, so do it now.\n+         --  When verifying the consistency of aspects between the freeze point\n+         --  and the end of declarqtions, we use a copy which is not analyzed\n+         --  yet, so do it now.\n \n          Subp_Id := Expression (Assoc);\n          if No (Etype (Subp_Id)) then"}, {"sha": "43aea2a7aa6fdec912f2082e9e98f11b3a4ecfe6", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce59f39f78b0a517eaa61b6845c25c60bc19c455/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce59f39f78b0a517eaa61b6845c25c60bc19c455/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=ce59f39f78b0a517eaa61b6845c25c60bc19c455", "patch": "@@ -135,9 +135,9 @@ package Sem_Ch13 is\n       Add_Unnamed_Subp    : in out Node_Id;\n       New_Indexed_Subp    : in out Node_Id;\n       Assign_Indexed_Subp : in out Node_Id);\n-   --  Utility to unpack the subprogramz in an occurrence of asoect Aggregate,\n-   --  used to verify the structure of the asoect, and resolve and expand an\n-   --  aggregate for a container type that carries the asoect.\n+   --  Utility to unpack the subprograms in an occurrence of aspect Aggregate;\n+   --  used to verify the structure of the aspect, and resolve and expand an\n+   --  aggregate for a container type that carries the aspect.\n \n    function Rep_Item_Too_Early (T : Entity_Id; N : Node_Id) return Boolean;\n    --  Called at start of processing a representation clause/pragma. Used to"}, {"sha": "c4486ff3a71995fd2fcd5f31edc6b5cbed1d6595", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce59f39f78b0a517eaa61b6845c25c60bc19c455/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce59f39f78b0a517eaa61b6845c25c60bc19c455/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=ce59f39f78b0a517eaa61b6845c25c60bc19c455", "patch": "@@ -1550,7 +1550,7 @@ package Snames is\n    Name_Reference_Control_Type           : constant Name_Id := N + $;\n    Name_Get_Element_Access               : constant Name_Id := N + $;\n \n-   --  Names for Ada2020 Aggregate aspect. Nmme_Aggregate is already\n+   --  Names for Ada 202x Aggregate aspect. Name_Aggregate is already\n    --  present for gprbuild.\n \n    Name_Empty                            : constant Name_Id := N + $;"}]}