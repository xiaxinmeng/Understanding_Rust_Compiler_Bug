{"sha": "1728c537b4f697e2a4b4eba0b0c70165f2a02840", "node_id": "C_kwDOANBUbNoAKDE3MjhjNTM3YjRmNjk3ZTJhNGI0ZWJhMGIwYzcwMTY1ZjJhMDI4NDA", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-13T00:18:07Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-13T00:18:07Z"}, "message": "Daily bump.", "tree": {"sha": "908653a277766abd777b0069daf75f9dc7634104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/908653a277766abd777b0069daf75f9dc7634104"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1728c537b4f697e2a4b4eba0b0c70165f2a02840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1728c537b4f697e2a4b4eba0b0c70165f2a02840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1728c537b4f697e2a4b4eba0b0c70165f2a02840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1728c537b4f697e2a4b4eba0b0c70165f2a02840/comments", "author": null, "committer": null, "parents": [{"sha": "77ebee2bd04cc727161875869b135675d035c66e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ebee2bd04cc727161875869b135675d035c66e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ebee2bd04cc727161875869b135675d035c66e"}], "stats": {"total": 203, "additions": 202, "deletions": 1}, "files": [{"sha": "d1e87d6fccb25e3fafd6de778f4371fc5ea11e27", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1728c537b4f697e2a4b4eba0b0c70165f2a02840/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1728c537b4f697e2a4b4eba0b0c70165f2a02840/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=1728c537b4f697e2a4b4eba0b0c70165f2a02840", "patch": "@@ -1,3 +1,7 @@\n+2022-12-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog.py: Do not search PR entry in a file that is binary.\n+\n 2022-12-11  Martin Liska  <mliska@suse.cz>\n \n \t* check_GNU_style.py: Use newline=\\n."}, {"sha": "547b067ef3dcf6dc4a3a0ef9d5bbf55aefab6746", "filename": "gcc/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1728c537b4f697e2a4b4eba0b0c70165f2a02840", "patch": "@@ -1,3 +1,85 @@\n+2022-12-12  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\t* config/aarch64/aarch64.cc (aarch64_rtx_costs): Add correct costs\n+\tfor 24-bit and 12-bit shifted immediate add/sub.\n+\t(TARGET_CONST_ANCHOR): Define.\n+\t* config/aarch64/predicates.md (aarch64_pluslong_immediate):\n+\tFix range check.\n+\n+2022-12-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* match.pd: Add new rule.\n+\n+2022-12-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64.cc (aarch64_can_change_mode_class): Restrict\n+\tconversions between partial struct types properly.\n+\n+2022-12-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*tb<optab><mode>1): Rename to...\n+\t(*tb<optab><ALLI:mode><GPI:mode>1): ... this.\n+\t(tbranch_<code><mode>4): New.\n+\t* config/aarch64/iterators.md(ZEROM, zerom): New.\n+\n+2022-12-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* dojump.cc (do_jump): Pass along value.\n+\t(do_jump_by_parts_greater_rtx): Likewise.\n+\t(do_jump_by_parts_zero_rtx): Likewise.\n+\t(do_jump_by_parts_equality_rtx): Likewise.\n+\t(do_compare_rtx_and_jump): Likewise.\n+\t(do_compare_and_jump): Likewise.\n+\t* dojump.h (do_compare_rtx_and_jump): New.\n+\t* optabs.cc (emit_cmp_and_jump_insn_1): Refactor to take optab to check.\n+\t(validate_test_and_branch): New.\n+\t(emit_cmp_and_jump_insns): Optiobally take a value, and when value is\n+\tsupplied then check if it's suitable for tbranch.\n+\t* optabs.def (tbranch_eq$a4, tbranch_ne$a4): New.\n+\t* doc/md.texi (tbranch_@var{op}@var{mode}4): Document it.\n+\t* optabs.h (emit_cmp_and_jump_insns): New.\n+\t* tree.h (tree_zero_one_valued_p): New.\n+\n+2022-12-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_simd_movv2hf): New.\n+\t(mov<mode>, movmisalign<mode>, aarch64_dup_lane<mode>,\n+\taarch64_store_lane0<mode>, aarch64_simd_vec_set<mode>,\n+\t@aarch64_simd_vec_copy_lane<mode>, vec_set<mode>,\n+\treduc_<optab>_scal_<mode>, reduc_<fmaxmin>_scal_<mode>,\n+\taarch64_reduc_<optab>_internal<mode>, aarch64_get_lane<mode>,\n+\tvec_init<mode><Vel>, vec_extract<mode><Vel>): Support V2HF.\n+\t(aarch64_simd_dupv2hf): New.\n+\t* config/aarch64/aarch64.cc (aarch64_classify_vector_mode):\n+\tAdd E_V2HFmode.\n+\t* config/aarch64/iterators.md (VHSDF_P): New.\n+\t(V2F, VMOVE, nunits, Vtype, Vmtype, Vetype, stype, VEL,\n+\tVel, q, vp): Add V2HF.\n+\t* config/arm/types.md (neon_fp_reduc_add_h): New.\n+\n+2022-12-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-c.cc (aarch64_update_cpp_builtins): Define\n+\t__ARM_FEATURE_PAUTH and __ARM_FEATURE_BTI when appropriate.\n+\t* config/aarch64/aarch64.h (TARGET_BTI): Define.\n+\n+2022-12-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.cc (dt_simplify::gen): Revert last change.\n+\t* match.pd: Revert simplification of CONSTUCTOR leaf handling.\n+\t(&x cmp SSA_NAME): Handle ADDR_EXPR in SSA defs.\n+\t* fold-const.cc (split_address_to_core_and_offset): Handle\n+\tADDR_EXPRs in SSA defs.\n+\t(address_compare): Likewise.\n+\n+2022-12-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89317\n+\t* tree-ssa-ccp.cc (ccp_fold): Handle GIMPLE_COND via\n+\tgimple_fold_stmt_to_constant_1.\n+\t* match.pd (&a != &a + c): Apply to pointer_plus with non-ADDR_EXPR\n+\tbase as well.\n+\n 2022-12-11  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/89317"}, {"sha": "349ad3e1070d748bed879dfbf788f34a14118170", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1728c537b4f697e2a4b4eba0b0c70165f2a02840", "patch": "@@ -1 +1 @@\n-20221212\n+20221213"}, {"sha": "a4733bea3d673167b9b3ac533c985711a54afa4b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1728c537b4f697e2a4b4eba0b0c70165f2a02840", "patch": "@@ -1,3 +1,17 @@\n+2022-12-12  Jason Merrill  <jason@redhat.com>\n+\n+\tRevert:\n+\t2022-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105838\n+\t* call.cc (convert_like_internal) [ck_list]: Use\n+\tmaybe_init_list_as_array.\n+\t* constexpr.cc (cxx_eval_vec_init_1): Init might have\n+\ta different type.\n+\t* tree.cc (build_vec_init_elt): Likewise.\n+\t* init.cc (build_vec_init): Handle from_array from a\n+\tTARGET_EXPR.  Retain TARGET_EXPR of a different type.\n+\n 2022-12-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/105838"}, {"sha": "7630f24840156811bad76f2ea4399991cee0400a", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=1728c537b4f697e2a4b4eba0b0c70165f2a02840", "patch": "@@ -1,3 +1,11 @@\n+2022-12-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108055\n+\t* decl.cc (function_defined_in_root_p): Check all enclosing template\n+\tinstances for definition in a root module.\n+\t(function_needs_inline_definition_p): Replace call to\n+\tfunction_defined_in_root_p with test for outer module `isRoot'.\n+\n 2022-12-11  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/108050"}, {"sha": "4535398a81731ba1d733746a9afda087329c98b9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1728c537b4f697e2a4b4eba0b0c70165f2a02840", "patch": "@@ -1,3 +1,11 @@\n+2022-12-12  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102180\n+\t* array.cc (match_array_element_spec): Add check for bad\n+\tassumed-implied-spec.\n+\t(gfc_match_array_spec): Reorder logic so that the first bad array\n+\telement spec may trigger an error.\n+\n 2022-12-11  Steve Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/107995"}, {"sha": "643d9030fc928ba7e0a74e2ba1ed2c5c95758ddd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1728c537b4f697e2a4b4eba0b0c70165f2a02840/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1728c537b4f697e2a4b4eba0b0c70165f2a02840", "patch": "@@ -1,3 +1,51 @@\n+2022-12-12  Jason Merrill  <jason@redhat.com>\n+\n+\tRevert:\n+\t2022-12-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105838\n+\t* g++.dg/tree-ssa/initlist-opt2.C: New test.\n+\n+2022-12-12  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/102180\n+\t* gfortran.dg/pr102180.f90: New test.\n+\n+2022-12-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/108055\n+\t* gdc.dg/torture/imports/pr108055conv.d: New.\n+\t* gdc.dg/torture/imports/pr108055spec.d: New.\n+\t* gdc.dg/torture/imports/pr108055write.d: New.\n+\t* gdc.dg/torture/pr108055.d: New test.\n+\n+2022-12-12  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\t* gcc.target/aarch64/movk_3.c: New test.\n+\n+2022-12-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/if-compare_1.c: New test.\n+\t* gcc.target/aarch64/if-compare_2.c: New test.\n+\n+2022-12-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/tbz_1.c: New test.\n+\n+2022-12-12  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/sve/slp_1.c: Update testcase.\n+\n+2022-12-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/acle/bti_def.c: New test.\n+\t* gcc.target/aarch64/acle/pauth_def.c: New test.\n+\n+2022-12-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/89317\n+\t* gcc.dg/tree-ssa/pr89317.c: Amend.\n+\n 2022-12-11  Steve Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/107995"}, {"sha": "84afb9754d1a0d122d6106584b3124e4aeaf08a6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1728c537b4f697e2a4b4eba0b0c70165f2a02840/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1728c537b4f697e2a4b4eba0b0c70165f2a02840/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1728c537b4f697e2a4b4eba0b0c70165f2a02840", "patch": "@@ -1,3 +1,40 @@\n+2022-12-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/duration/arithmetic/overflow_c++20.cc: New\n+\ttest.\n+\n+2022-12-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108024\n+\t* include/std/format (basic_format_string): Fix constraint.\n+\t* testsuite/std/format/format_string.cc: New test.\n+\n+2022-12-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/chrono (hh_mm_ss): Rename __is_unsigned member to\n+\t_S_is_unsigned.\n+\t* include/std/format (basic_format_context): Rename _Out_\n+\ttemplate parameter to _Out2.\n+\t* testsuite/17_intro/names.cc: Add Windows SAL annotation\n+\tmacros.\n+\n+2022-12-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98034\n+\t* include/std/atomic (__cpp_lib_atomic_lock_free_type_aliases):\n+\tDefine macro.\n+\t(atomic_signed_lock_free, atomic_unsigned_lock_free): Define\n+\taliases.\n+\t* include/std/version (__cpp_lib_atomic_lock_free_type_aliases):\n+\tDefine macro.\n+\t* testsuite/29_atomics/atomic/lock_free_aliases.cc: New test.\n+\n+2022-12-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/stacktrace (operator<<): Only output to narrow\n+\tostreams (LWG 3515).\n+\t* testsuite/19_diagnostics/stacktrace/synopsis.cc:\n+\n 2022-12-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/108015"}]}