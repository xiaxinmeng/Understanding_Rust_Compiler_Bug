{"sha": "8177895b7177c070c22879df051bd881910444e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE3Nzg5NWI3MTc3YzA3MGMyMjg3OWRmMDUxYmQ4ODE5MTA0NDRlMw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-10-08T14:55:03Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-10-08T14:55:03Z"}, "message": "java_raw_api.c (ffi_java_raw_to_ptrarray): Interpret raw data as _Jv_word values, not ffi_raw.\n\n\t* src/java_raw_api.c (ffi_java_raw_to_ptrarray): Interpret\n\traw data as _Jv_word values, not ffi_raw.\n\t(ffi_java_ptrarray_to_raw): Likewise.\n\t(ffi_java_rvalue_to_raw): New function.\n\t(ffi_java_raw_call): Call it.\n\t(ffi_java_raw_to_rvalue): New function.\n\t(ffi_java_translate_args): Call it.\n\t* src/ffitest.c (closure_test_fn): Interpret return value\n\tas ffi_arg, not int.\n\t* src/s390/ffi.c (ffi_prep_cif_machdep): Add missing\n\tFFI_TYPE_POINTER case.\n\t(ffi_closure_helper_SYSV): Likewise.  Also, assume return\n\tvalues extended to word size.\n\nFrom-SVN: r57926", "tree": {"sha": "2bde663dbcb9369746d86132dad0b8213966d892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bde663dbcb9369746d86132dad0b8213966d892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8177895b7177c070c22879df051bd881910444e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8177895b7177c070c22879df051bd881910444e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8177895b7177c070c22879df051bd881910444e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8177895b7177c070c22879df051bd881910444e3/comments", "author": null, "committer": null, "parents": [{"sha": "4fdbcfb2c4f7f3f7d9cfd19da234b3480cffbd06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fdbcfb2c4f7f3f7d9cfd19da234b3480cffbd06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fdbcfb2c4f7f3f7d9cfd19da234b3480cffbd06"}], "stats": {"total": 131, "additions": 102, "deletions": 29}, "files": [{"sha": "adfa3885e7d8a29fc1de2132b416b5d1c1033cd3", "filename": "libffi/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8177895b7177c070c22879df051bd881910444e3/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8177895b7177c070c22879df051bd881910444e3/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=8177895b7177c070c22879df051bd881910444e3", "patch": "@@ -1,3 +1,19 @@\n+2002-10-08  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* src/java_raw_api.c (ffi_java_raw_to_ptrarray): Interpret\n+\traw data as _Jv_word values, not ffi_raw.\n+\t(ffi_java_ptrarray_to_raw): Likewise.\n+\t(ffi_java_rvalue_to_raw): New function.\n+\t(ffi_java_raw_call): Call it.\n+\t(ffi_java_raw_to_rvalue): New function.\n+\t(ffi_java_translate_args): Call it.\n+\t* src/ffitest.c (closure_test_fn): Interpret return value\n+\tas ffi_arg, not int.\n+\t* src/s390/ffi.c (ffi_prep_cif_machdep): Add missing\n+\tFFI_TYPE_POINTER case.\n+\t(ffi_closure_helper_SYSV): Likewise.  Also, assume return\n+\tvalues extended to word size.\n+\n 2002-10-02  Andreas Jaeger  <aj@suse.de>\n \n \t* src/x86/ffi64.c (ffi_prep_cif_machdep): Remove debug output."}, {"sha": "163c4a8c36e3f9dd794e6f95b4213c83190073cf", "filename": "libffi/src/ffitest.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8177895b7177c070c22879df051bd881910444e3/libffi%2Fsrc%2Fffitest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8177895b7177c070c22879df051bd881910444e3/libffi%2Fsrc%2Fffitest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fffitest.c?ref=8177895b7177c070c22879df051bd881910444e3", "patch": "@@ -262,7 +262,7 @@ static test_structure_9 struct9 (test_structure_9 ts)\n static void\n closure_test_fn(ffi_cif* cif,void* resp,void** args, void* userdata)\n {\n-  *(int*)resp = *(int*)args[0] + (int)(*(float*)args[1]) + (int)(long)userdata;\n+  *(ffi_arg*)resp = *(int*)args[0] + (int)(*(float*)args[1]) + (int)(long)userdata;\n }\n \n typedef int (*closure_test_type)(int, float);"}, {"sha": "cb5dd67a78edcf7909c5dc3a90ce72adda81eac4", "filename": "libffi/src/java_raw_api.c", "status": "modified", "additions": 79, "deletions": 12, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8177895b7177c070c22879df051bd881910444e3/libffi%2Fsrc%2Fjava_raw_api.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8177895b7177c070c22879df051bd881910444e3/libffi%2Fsrc%2Fjava_raw_api.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fjava_raw_api.c?ref=8177895b7177c070c22879df051bd881910444e3", "patch": "@@ -81,21 +81,14 @@ ffi_java_raw_to_ptrarray (ffi_cif *cif, ffi_raw *raw, void **args)\n \t{\n \tcase FFI_TYPE_UINT8:\n \tcase FFI_TYPE_SINT8:\n-\t  *args = (void*) ((char*)(raw++) + SIZEOF_ARG - 1);\n+\t  *args = (void*) ((char*)(raw++) + 3);\n \t  break;\n \t  \n \tcase FFI_TYPE_UINT16:\n \tcase FFI_TYPE_SINT16:\n-\t  *args = (void*) ((char*)(raw++) + SIZEOF_ARG - 2);\n+\t  *args = (void*) ((char*)(raw++) + 2);\n \t  break;\n \n-#if SIZEOF_ARG >= 4\t  \n-\tcase FFI_TYPE_UINT32:\n-\tcase FFI_TYPE_SINT32:\n-\t  *args = (void*) ((char*)(raw++) + SIZEOF_ARG - 4);\n-\t  break;\n-#endif\n-\t\n #if SIZEOF_ARG == 8\t  \n \tcase FFI_TYPE_UINT64:\n \tcase FFI_TYPE_SINT64:\n@@ -157,31 +150,54 @@ ffi_java_ptrarray_to_raw (ffi_cif *cif, void **args, ffi_raw *raw)\n       switch ((*tp)->type)\n \t{\n \tcase FFI_TYPE_UINT8:\n+#if WORDS_BIGENDIAN\n+\t  *(UINT32*)(raw++) = *(UINT8*) (*args);\n+#else\n \t  (raw++)->uint = *(UINT8*) (*args);\n+#endif\n \t  break;\n \n \tcase FFI_TYPE_SINT8:\n+#if WORDS_BIGENDIAN\n+\t  *(SINT32*)(raw++) = *(SINT8*) (*args);\n+#else\n \t  (raw++)->sint = *(SINT8*) (*args);\n+#endif\n \t  break;\n \n \tcase FFI_TYPE_UINT16:\n+#if WORDS_BIGENDIAN\n+\t  *(UINT32*)(raw++) = *(UINT16*) (*args);\n+#else\n \t  (raw++)->uint = *(UINT16*) (*args);\n+#endif\n \t  break;\n \n \tcase FFI_TYPE_SINT16:\n+#if WORDS_BIGENDIAN\n+\t  *(SINT32*)(raw++) = *(SINT16*) (*args);\n+#else\n \t  (raw++)->sint = *(SINT16*) (*args);\n+#endif\n \t  break;\n \n-#if SIZEOF_ARG >= 4\n \tcase FFI_TYPE_UINT32:\n+#if WORDS_BIGENDIAN\n+\t  *(UINT32*)(raw++) = *(UINT32*) (*args);\n+#else\n \t  (raw++)->uint = *(UINT32*) (*args);\n+#endif\n \t  break;\n \n \tcase FFI_TYPE_SINT32:\n+#if WORDS_BIGENDIAN\n+\t  *(SINT32*)(raw++) = *(SINT32*) (*args);\n+#else\n \t  (raw++)->sint = *(SINT32*) (*args);\n-\t  break;\n #endif\n-        case FFI_TYPE_FLOAT:\n+\t  break;\n+\n+\tcase FFI_TYPE_FLOAT:\n \t  (raw++)->flt = *(FLOAT32*) (*args);\n \t  break;\n \n@@ -211,6 +227,55 @@ ffi_java_ptrarray_to_raw (ffi_cif *cif, void **args, ffi_raw *raw)\n \n #if !FFI_NATIVE_RAW_API\n \n+static void\n+ffi_java_rvalue_to_raw (ffi_cif *cif, void *rvalue)\n+{\n+#if WORDS_BIGENDIAN && SIZEOF_ARG == 8\n+  switch (cif->rtype->type)\n+    {\n+    case FFI_TYPE_UINT8:\n+    case FFI_TYPE_UINT16:\n+    case FFI_TYPE_UINT32:\n+      *(UINT64 *)rvalue <<= 32;\n+      break;\n+\n+    case FFI_TYPE_SINT8:\n+    case FFI_TYPE_SINT16:\n+    case FFI_TYPE_SINT32:\n+    case FFI_TYPE_INT:\n+      *(SINT64 *)rvalue <<= 32;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+#endif\n+}\n+\n+static void\n+ffi_java_raw_to_rvalue (ffi_cif *cif, void *rvalue)\n+{\n+#if WORDS_BIGENDIAN && SIZEOF_ARG == 8\n+  switch (cif->rtype->type)\n+    {\n+    case FFI_TYPE_UINT8:\n+    case FFI_TYPE_UINT16:\n+    case FFI_TYPE_UINT32:\n+      *(UINT64 *)rvalue >>= 32;\n+      break;\n+\n+    case FFI_TYPE_SINT8:\n+    case FFI_TYPE_SINT16:\n+    case FFI_TYPE_SINT32:\n+    case FFI_TYPE_INT:\n+      *(SINT64 *)rvalue >>= 32;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+#endif\n+}\n \n /* This is a generic definition of ffi_raw_call, to be used if the\n  * native system does not provide a machine-specific implementation.\n@@ -227,6 +292,7 @@ void ffi_java_raw_call (/*@dependent@*/ ffi_cif *cif,\n   void **avalue = (void**) alloca (cif->nargs * sizeof (void*));\n   ffi_java_raw_to_ptrarray (cif, raw, avalue);\n   ffi_call (cif, fn, rvalue, avalue);\n+  ffi_java_rvalue_to_raw (cif, rvalue);\n }\n \n #if FFI_CLOSURES\t\t/* base system provides closures */\n@@ -240,6 +306,7 @@ ffi_java_translate_args (ffi_cif *cif, void *rvalue,\n \n   ffi_java_ptrarray_to_raw (cif, avalue, raw);\n   (*cl->fun) (cif, rvalue, raw, cl->user_data);\n+  ffi_java_raw_to_rvalue (cif, rvalue);\n }\n \n /* Again, here is the generic version of ffi_prep_raw_closure, which"}, {"sha": "9e7d16954f62ca93844bcb0331a366a743c74a83", "filename": "libffi/src/s390/ffi.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8177895b7177c070c22879df051bd881910444e3/libffi%2Fsrc%2Fs390%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8177895b7177c070c22879df051bd881910444e3/libffi%2Fsrc%2Fs390%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fs390%2Fffi.c?ref=8177895b7177c070c22879df051bd881910444e3", "patch": "@@ -369,6 +369,7 @@ ffi_prep_cif_machdep(ffi_cif *cif)\n \tcif->flags = FFI390_RET_INT64;\n \tbreak;\n \n+      case FFI_TYPE_POINTER:\n       case FFI_TYPE_INT:\n       case FFI_TYPE_UINT32:\n       case FFI_TYPE_SINT32:\n@@ -682,29 +683,18 @@ ffi_closure_helper_SYSV (ffi_closure *closure,\n #endif\n \tbreak;\n \n+      case FFI_TYPE_POINTER:\n       case FFI_TYPE_UINT32:\n-\tp_gpr[0] = *(unsigned int *) rvalue;\n+      case FFI_TYPE_UINT16:\n+      case FFI_TYPE_UINT8:\n+\tp_gpr[0] = *(unsigned long *) rvalue;\n \tbreak;\n \n       case FFI_TYPE_INT:\n       case FFI_TYPE_SINT32:\n-\tp_gpr[0] = *(signed int *) rvalue;\n-\tbreak;\n-\n-      case FFI_TYPE_UINT16:\n-\tp_gpr[0] = *(unsigned short *) rvalue;\n-\tbreak;\n-\n       case FFI_TYPE_SINT16:\n-\tp_gpr[0] = *(signed short *) rvalue;\n-\tbreak;\n-\n-      case FFI_TYPE_UINT8:\n-\tp_gpr[0] = *(unsigned char *) rvalue;\n-\tbreak;\n-\n       case FFI_TYPE_SINT8:\n-\tp_gpr[0] = *(signed char *) rvalue;\n+\tp_gpr[0] = *(signed long *) rvalue;\n \tbreak;\n \n       default:"}]}