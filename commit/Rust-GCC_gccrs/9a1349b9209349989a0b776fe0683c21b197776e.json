{"sha": "9a1349b9209349989a0b776fe0683c21b197776e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWExMzQ5YjkyMDkzNDk5ODlhMGI3NzZmZTA2ODNjMjFiMTk3Nzc2ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-16T11:00:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-16T11:00:52Z"}, "message": "re PR libstdc++/11723 (ctype<wchar_t>::do_is(mask, wchar_t) is slow)\n\n2003-12-16  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/11723\n\t* include/bits/locale_facets.h: Add _M_bit and _M_wmask,\n\tused to speed up the computation of ctype::do_is.\n\t* config/locale/generic/ctype_members.cc\n\t(_M_initialize_ctype): Fill _M_bit and _M_wmask.\n\t(ctype::do_is): Use _M_bit and _M_wmask.\n\t* config/locale/gnu/ctype_members.cc: Likewise.\n\t* testsuite/performance/is_wchar_t.cc: New.\n\n\t* testsuite/performance/narrow_widen_wchar_t.cc: Tweak\n\tstring literal (incorrect citation ;)\n\n\t* include/bits/locale_facets.h: Minor tweaks, const\n\tcorrectness, unsigned -> size_t.\n\nFrom-SVN: r74686", "tree": {"sha": "a5de1c73e744245f5ae1f7ee38776eaa37b059eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5de1c73e744245f5ae1f7ee38776eaa37b059eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a1349b9209349989a0b776fe0683c21b197776e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1349b9209349989a0b776fe0683c21b197776e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1349b9209349989a0b776fe0683c21b197776e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1349b9209349989a0b776fe0683c21b197776e/comments", "author": null, "committer": null, "parents": [{"sha": "a0c68737027348fb9ae1ff4a5a33a10d269962bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c68737027348fb9ae1ff4a5a33a10d269962bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c68737027348fb9ae1ff4a5a33a10d269962bb"}], "stats": {"total": 202, "additions": 157, "deletions": 45}, "files": [{"sha": "595922f46f8a6d374766e040cdc0f8d56cef4e76", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9a1349b9209349989a0b776fe0683c21b197776e", "patch": "@@ -1,3 +1,20 @@\n+2003-12-16  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/11723\n+\t* include/bits/locale_facets.h: Add _M_bit and _M_wmask,\n+\tused to speed up the computation of ctype::do_is.\n+\t* config/locale/generic/ctype_members.cc\n+\t(_M_initialize_ctype): Fill _M_bit and _M_wmask.\n+\t(ctype::do_is): Use _M_bit and _M_wmask.\n+\t* config/locale/gnu/ctype_members.cc: Likewise.\n+\t* testsuite/performance/is_wchar_t.cc: New.\n+\n+\t* testsuite/performance/narrow_widen_wchar_t.cc: Tweak\n+\tstring literal (incorrect citation ;)\n+\n+\t* include/bits/locale_facets.h: Minor tweaks, const\n+\tcorrectness, unsigned -> size_t.\n+\n 2003-12-16  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* include/bits/locale_facets.h (widen, narrow):  Uncomment the"}, {"sha": "31666756121478e7c4fd8183f9be6c72671ec57f", "filename": "libstdc++-v3/config/locale/generic/ctype_members.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fctype_members.cc?ref=9a1349b9209349989a0b776fe0683c21b197776e", "patch": "@@ -135,11 +135,12 @@ namespace std\n     // encoding of the various categories in /usr/include/ctype.h.\n     const size_t __bitmasksize = 15; \n     for (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n-      {\n-\tconst mask __bit = static_cast<mask>(1 << __bitcur);\n-\tif (__m & __bit)\n-\t  __ret |= iswctype(__c, _M_convert_to_wmask(__bit));\n-      }\n+      if (__m & _M_bit[__bitcur]\n+\t  && iswctype(__c, _M_wmask[__bitcur]))\n+\t{\n+\t  __ret = true;\n+\t  break;\n+\t}\n     return __ret;    \n   }\n   \n@@ -154,11 +155,8 @@ namespace std\n \tconst size_t __bitmasksize = 15; \n \tmask __m = 0;\n \tfor (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n-\t  { \n-\t    const mask __bit = static_cast<mask>(1 << __bitcur);\n-\t    if (iswctype(*__lo, _M_convert_to_wmask(__bit)))\n-\t      __m |= __bit;\n-\t  }\n+\t  if (iswctype(*__lo, _M_wmask[__bitcur]))\n+\t    __m |= _M_bit[__bitcur];\n \t*__vec = __m;\n       }\n     return __hi;\n@@ -258,6 +256,12 @@ namespace std\n     for (size_t __i = 0;\n \t __i < sizeof(_M_widen) / sizeof(wint_t); ++__i)\n       _M_widen[__i] = btowc(__i);\n+\n+    for (size_t __i = 0; __i <= 15; ++__i)\n+      { \n+\t_M_bit[__i] = static_cast<mask>(1 << __i);\n+\t_M_wmask[__i] = _M_convert_to_wmask(_M_bit[__i]);\n+      }  \n   }\n #endif //  _GLIBCXX_USE_WCHAR_T\n }"}, {"sha": "db01d2d391670390a5150a1bf5c71a0c485d467f", "filename": "libstdc++-v3/config/locale/gnu/ctype_members.cc", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fctype_members.cc?ref=9a1349b9209349989a0b776fe0683c21b197776e", "patch": "@@ -139,32 +139,28 @@ namespace std\n     bool __ret = false;\n     const size_t __bitmasksize = 11; \n     for (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n-      {\n-\tconst mask __bit = static_cast<mask>(_ISbit(__bitcur));\n-\tif (__m & __bit)\n-\t  __ret |= __iswctype_l(__c, _M_convert_to_wmask(__bit), \n-\t\t\t\t_M_c_locale_ctype); \n-      }\n+      if (__m & _M_bit[__bitcur]\n+\t  && __iswctype_l(__c, _M_wmask[__bitcur], _M_c_locale_ctype))\n+\t{\n+\t  __ret = true;\n+\t  break;\n+\t}\n     return __ret;    \n   }\n   \n   const wchar_t* \n   ctype<wchar_t>::\n   do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __vec) const\n   {\n-    for (;__lo < __hi; ++__vec, ++__lo)\n+    for (; __lo < __hi; ++__vec, ++__lo)\n       {\n \t// Highest bitmask in ctype_base == 10, but extra in \"C\"\n \t// library for blank.\n \tconst size_t __bitmasksize = 11; \n \tmask __m = 0;\n \tfor (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n-\t  { \n-\t    const mask __bit = static_cast<mask>(_ISbit(__bitcur));\n-\t    if (__iswctype_l(*__lo, _M_convert_to_wmask(__bit), \n-\t\t\t     _M_c_locale_ctype))\n-\t      __m |= __bit;\n-\t  }\n+\t  if (__iswctype_l(*__lo, _M_wmask[__bitcur], _M_c_locale_ctype))\n+\t    __m |= _M_bit[__bitcur];\n \t*__vec = __m;\n       }\n     return __hi;\n@@ -279,6 +275,12 @@ namespace std\n     for (size_t __i = 0;\n \t __i < sizeof(_M_widen) / sizeof(wint_t); ++__i)\n       _M_widen[__i] = btowc(__i);\n+\n+    for (size_t __i = 0; __i <= 11; ++__i)\n+      { \n+\t_M_bit[__i] = static_cast<mask>(_ISbit(__i));\n+\t_M_wmask[__i] = _M_convert_to_wmask(_M_bit[__i]);\n+      }\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     __uselocale(__old);\n #endif"}, {"sha": "055dc1ff775e98fce8b993f0c1b44fd5b17c141b", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=9a1349b9209349989a0b776fe0683c21b197776e", "patch": "@@ -247,7 +247,7 @@ namespace std\n \n       virtual const char_type*\n       do_narrow(const char_type* __lo, const char_type* __hi,\n-\t\t char __dfault, char* __dest) const = 0;\n+\t\tchar __dfault, char* __dest) const = 0;\n     };\n \n   // NB: Generic, mostly useless implementation.\n@@ -394,16 +394,16 @@ namespace std\n       narrow(char_type __c, char __dfault) const\n       {\n \tif (_M_narrow[__c]) return _M_narrow[__c];\n-\tchar __t = do_narrow(__c, __dfault);\n+\tconst char __t = do_narrow(__c, __dfault);\n \tif (__t != __dfault) _M_narrow[__c] = __t;\n \treturn __t;\n       }\n \n       const char_type*\n       narrow(const char_type* __lo, const char_type* __hi,\n-\t      char __dfault, char *__to) const\n+\t     char __dfault, char *__to) const\n       {\n-\tif (__builtin_expect(_M_narrow_ok==1,true))\n+\tif (__builtin_expect(_M_narrow_ok == 1,true))\n \t  {\n \t    memcpy(__to, __lo, __hi - __lo);\n \t    return __hi;\n@@ -464,13 +464,13 @@ namespace std\n       void _M_widen_init() const\n       {\n \tchar __tmp[sizeof(_M_widen)];\n-\tfor (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n+\tfor (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n \t  __tmp[__i] = __i;\n \tdo_widen(__tmp, __tmp + sizeof(__tmp), _M_widen);\n \t    \n \t_M_widen_ok = 1;\n \t// Set _M_widen_ok to 2 if memcpy can't be used.\n-\tfor (unsigned __i = 0; __i < sizeof(_M_widen); ++__i)\n+\tfor (size_t __i = 0; __i < sizeof(_M_widen); ++__i)\n \t  if (__tmp[__i] != _M_widen[__i])\n \t    {\n \t      _M_widen_ok = 2;\n@@ -484,26 +484,24 @@ namespace std\n       void _M_narrow_init() const\n       {\n \tchar __tmp[sizeof(_M_narrow)];\n-\tfor (unsigned __i = 0; __i < sizeof(_M_narrow); ++__i)\n+\tfor (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n \t  __tmp[__i] = __i;\n \tdo_narrow(__tmp, __tmp + sizeof(__tmp), 0, _M_narrow);\n \n \t// Check if any default values were created.  Do this by\n \t// renarrowing with a different default value and comparing.\n \tbool __consecutive = true;\n-\tfor (unsigned __i = 0; __i < sizeof(_M_narrow); ++__i)\n-\t  {\n-\t    char __c[1];\n-\t    if (!_M_narrow[__i])\n-\t      {\n-\t\tdo_narrow(__tmp + __i, __tmp + __i + 1, 1, __c);\n-\t\tif (__c[0] == 1)\n-\t\t  {\n-\t\t    __consecutive = false;\n-\t\t    break;\n-\t\t  }\n-\t      }\n-\t  }\n+\tfor (size_t __i = 0; __i < sizeof(_M_narrow); ++__i)\n+\t  if (!_M_narrow[__i])\n+\t    {\n+\t      char __c;\n+\t      do_narrow(__tmp + __i, __tmp + __i + 1, 1, &__c);\n+\t      if (__c == 1)\n+\t\t{\n+\t\t  __consecutive = false;\n+\t\t  break;\n+\t\t}\n+\t    }\n \t_M_narrow_ok = __consecutive ? 1 : 2;\n       }\n     };\n@@ -530,6 +528,10 @@ namespace std\n       char                      _M_narrow[128];\n       wint_t                    _M_widen[1 + static_cast<unsigned char>(-1)];\n \n+      // Pre-computed elements for do_is.\n+      mask                      _M_bit[16];\n+      __wmask_type              _M_wmask[16];\n+\n     public:\n       // Data Members:\n       static locale::id        \tid;"}, {"sha": "e35edd023cb8e73f03d5728cacf7c90a308264e9", "filename": "libstdc++-v3/testsuite/performance/is_wchar_t.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fis_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fis_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fis_wchar_t.cc?ref=9a1349b9209349989a0b776fe0683c21b197776e", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <locale>\n+#include <cwctype>\n+#include <cstddef>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+  const wchar_t str[] =\n+    L\"Is this the real life?\\n\"\n+    L\"Is this just fantasy?\\n\"\n+    L\"Caught in a landslide\\n\"\n+    L\"No escape from reality\\n\"\n+    L\"Open your eyes\\n\"\n+    L\"Look up to the skies and see\\n\"\n+    L\"I'm just a poor boy\\n\"\n+    L\"I need no sympathy\\n\"\n+    L\"Because I'm easy come, easy go\\n\"\n+    L\"Little high, little low\"\n+    L\"Anyway the wind blows\\n\"\n+    L\"Doesn't really matter to me\\n\"\n+    L\"To me\\n\"\n+    L\"                      -- Queen\\n\";\n+  const size_t len = sizeof(str) / sizeof(str[0]) - 1;\n+\n+  locale loc;\n+  const ctype<wchar_t>& ct = use_facet<ctype<wchar_t> >(loc);\n+\n+  // C\n+  wctype_t w = wctype(\"space\");\n+  start_counters(time, resource);\n+  for (int j = 0; j < 200000; ++j)\n+    {\n+      for (size_t i = 0; i < len; ++i)\n+\t{\n+\t  iswctype(str[i], w);\n+\t}\n+    }\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"C\", time, resource);\n+  clear_counters(time, resource);\n+\n+  // C++\n+  start_counters(time, resource);\n+  for (int j = 0; j < 200000; ++j)\n+    {\n+      for (size_t i = 0; i < len; ++i)\n+\t{\n+\t  ct.is(ctype_base::space, str[i]);\n+\t}\n+    }\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"C++\", time, resource);\n+\n+  return 0;\n+}"}, {"sha": "d6376b99bf6a4f28b4b593fd45ca9cba5a50afe4", "filename": "libstdc++-v3/testsuite/performance/narrow_widen_char.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_char.cc?ref=9a1349b9209349989a0b776fe0683c21b197776e", "patch": "@@ -37,7 +37,7 @@ int main()\n   resource_counter resource;\n   const long iters = 200000000;\n   char bufin[] = \"This was an attempt to bypass string construction just for test.\";\n-  char bufout[sizeof(bufin) + 1];\n+  char bufout[sizeof(bufin)];\n \n   locale loc;\n   const ctype<char>& ct = use_facet<ctype<char> >(loc);"}, {"sha": "da3e4f2115c602fe74eb0c940ac054326fd88855", "filename": "libstdc++-v3/testsuite/performance/narrow_widen_wchar_t.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1349b9209349989a0b776fe0683c21b197776e/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2Fnarrow_widen_wchar_t.cc?ref=9a1349b9209349989a0b776fe0683c21b197776e", "patch": "@@ -35,7 +35,7 @@ int main()\n \n   time_counter time;\n   resource_counter resource;\n-  wchar_t bufwc[] = L\"M'innamoravo di tutto (Fabrizio De Andre')\";\n+  wchar_t bufwc[] = L\"Mi innamoravo di tutto (Fabrizio De Andre')\";\n   char bufc[sizeof(bufwc) / sizeof(wchar_t)];\n \n   locale loc;"}]}