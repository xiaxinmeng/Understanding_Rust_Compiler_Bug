{"sha": "3c8e8595edb357b7ff80c86c46f79823ed1ecce1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M4ZTg1OTVlZGIzNTdiN2ZmODBjODZjNDZmNzk4MjNlZDFlY2NlMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2013-11-21T16:20:28Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2013-11-21T16:20:28Z"}, "message": "re PR rtl-optimization/55950 (Invalid sqrt constant propagation with -frounding-mode)\n\n\tPR rtl-optimization/55950\n\t* real.c (real_sqrt): Remove function.\n\t* real.h (real_sqrt): Remove prototype.\n\t* simplify-rtx.c (simplify_const_unary_operation): Do not fold\n\tSQRT using real_sqrt.\n\nFrom-SVN: r205223", "tree": {"sha": "83b4eb3d53777452e702fa4c144848ae515b5422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83b4eb3d53777452e702fa4c144848ae515b5422"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c8e8595edb357b7ff80c86c46f79823ed1ecce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c8e8595edb357b7ff80c86c46f79823ed1ecce1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c8e8595edb357b7ff80c86c46f79823ed1ecce1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c8e8595edb357b7ff80c86c46f79823ed1ecce1/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e693cc593824fa56a2e52b756e1e2e4bad2a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e693cc593824fa56a2e52b756e1e2e4bad2a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e693cc593824fa56a2e52b756e1e2e4bad2a27"}], "stats": {"total": 98, "additions": 10, "deletions": 88}, "files": [{"sha": "a16ae684f91467382d2dd68bbdc08845a2ad9909", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e8595edb357b7ff80c86c46f79823ed1ecce1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e8595edb357b7ff80c86c46f79823ed1ecce1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c8e8595edb357b7ff80c86c46f79823ed1ecce1", "patch": "@@ -1,3 +1,11 @@\n+2013-11-21  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR rtl-optimization/55950\n+\t* real.c (real_sqrt): Remove function.\n+\t* real.h (real_sqrt): Remove prototype.\n+\t* simplify-rtx.c (simplify_const_unary_operation): Do not fold\n+\tSQRT using real_sqrt.\n+\n 2013-11-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59058"}, {"sha": "c1af548b44f7ddb079804746e62ab2c5f87e13cf", "filename": "gcc/real.c", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e8595edb357b7ff80c86c46f79823ed1ecce1/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e8595edb357b7ff80c86c46f79823ed1ecce1/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=3c8e8595edb357b7ff80c86c46f79823ed1ecce1", "patch": "@@ -4765,84 +4765,6 @@ const struct real_format real_internal_format =\n     false\n   };\n \f\n-/* Calculate the square root of X in mode MODE, and store the result\n-   in R.  Return TRUE if the operation does not raise an exception.\n-   For details see \"High Precision Division and Square Root\",\n-   Alan H. Karp and Peter Markstein, HP Lab Report 93-93-42, June\n-   1993.  http://www.hpl.hp.com/techreports/93/HPL-93-42.pdf.  */\n-\n-bool\n-real_sqrt (REAL_VALUE_TYPE *r, enum machine_mode mode,\n-\t   const REAL_VALUE_TYPE *x)\n-{\n-  static REAL_VALUE_TYPE halfthree;\n-  static bool init = false;\n-  REAL_VALUE_TYPE h, t, i;\n-  int iter, exp;\n-\n-  /* sqrt(-0.0) is -0.0.  */\n-  if (real_isnegzero (x))\n-    {\n-      *r = *x;\n-      return false;\n-    }\n-\n-  /* Negative arguments return NaN.  */\n-  if (real_isneg (x))\n-    {\n-      get_canonical_qnan (r, 0);\n-      return false;\n-    }\n-\n-  /* Infinity and NaN return themselves.  */\n-  if (!real_isfinite (x))\n-    {\n-      *r = *x;\n-      return false;\n-    }\n-\n-  if (!init)\n-    {\n-      do_add (&halfthree, &dconst1, &dconsthalf, 0);\n-      init = true;\n-    }\n-\n-  /* Initial guess for reciprocal sqrt, i.  */\n-  exp = real_exponent (x);\n-  real_ldexp (&i, &dconst1, -exp/2);\n-\n-  /* Newton's iteration for reciprocal sqrt, i.  */\n-  for (iter = 0; iter < 16; iter++)\n-    {\n-      /* i(n+1) = i(n) * (1.5 - 0.5*i(n)*i(n)*x).  */\n-      do_multiply (&t, x, &i);\n-      do_multiply (&h, &t, &i);\n-      do_multiply (&t, &h, &dconsthalf);\n-      do_add (&h, &halfthree, &t, 1);\n-      do_multiply (&t, &i, &h);\n-\n-      /* Check for early convergence.  */\n-      if (iter >= 6 && real_identical (&i, &t))\n-\tbreak;\n-\n-      /* ??? Unroll loop to avoid copying.  */\n-      i = t;\n-    }\n-\n-  /* Final iteration: r = i*x + 0.5*i*x*(1.0 - i*(i*x)).  */\n-  do_multiply (&t, x, &i);\n-  do_multiply (&h, &t, &i);\n-  do_add (&i, &dconst1, &h, 1);\n-  do_multiply (&h, &t, &i);\n-  do_multiply (&i, &dconsthalf, &h);\n-  do_add (&h, &t, &i, 0);\n-\n-  /* ??? We need a Tuckerman test to get the last bit.  */\n-\n-  real_convert (r, mode, &h);\n-  return true;\n-}\n-\n /* Calculate X raised to the integer exponent N in mode MODE and store\n    the result in R.  Return true if the result may be inexact due to\n    loss of precision.  The algorithm is the classic \"left-to-right binary"}, {"sha": "c4e036e9ff5c565e454864d97330860f26cba002", "filename": "gcc/real.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e8595edb357b7ff80c86c46f79823ed1ecce1/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e8595edb357b7ff80c86c46f79823ed1ecce1/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=3c8e8595edb357b7ff80c86c46f79823ed1ecce1", "patch": "@@ -461,10 +461,6 @@ bool real_can_shorten_arithmetic (enum machine_mode, enum machine_mode);\n /* In tree.c: wrap up a REAL_VALUE_TYPE in a tree node.  */\n extern tree build_real (tree, REAL_VALUE_TYPE);\n \n-/* Calculate R as the square root of X in the given machine mode.  */\n-extern bool real_sqrt (REAL_VALUE_TYPE *, enum machine_mode,\n-\t\t       const REAL_VALUE_TYPE *);\n-\n /* Calculate R as X raised to the integer exponent N in mode MODE.  */\n extern bool real_powi (REAL_VALUE_TYPE *, enum machine_mode,\n \t\t       const REAL_VALUE_TYPE *, HOST_WIDE_INT);"}, {"sha": "ec138584c385ed3562e8e02d43925290cb218a44", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8e8595edb357b7ff80c86c46f79823ed1ecce1/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8e8595edb357b7ff80c86c46f79823ed1ecce1/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=3c8e8595edb357b7ff80c86c46f79823ed1ecce1", "patch": "@@ -1931,17 +1931,13 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t   && SCALAR_FLOAT_MODE_P (mode)\n \t   && SCALAR_FLOAT_MODE_P (GET_MODE (op)))\n     {\n-      REAL_VALUE_TYPE d, t;\n+      REAL_VALUE_TYPE d;\n       REAL_VALUE_FROM_CONST_DOUBLE (d, op);\n \n       switch (code)\n \t{\n \tcase SQRT:\n-\t  if (HONOR_SNANS (mode) && real_isnan (&d))\n-\t    return 0;\n-\t  real_sqrt (&t, mode, &d);\n-\t  d = t;\n-\t  break;\n+\t  return 0;\n \tcase ABS:\n \t  d = real_value_abs (&d);\n \t  break;"}]}