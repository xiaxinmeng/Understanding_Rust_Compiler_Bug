{"sha": "b22086c261f20a7576f233db3537ccf192e7160c", "node_id": "C_kwDOANBUbNoAKGIyMjA4NmMyNjFmMjBhNzU3NmYyMzNkYjM1MzdjY2YxOTJlNzE2MGM", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-08-10T08:50:45Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-08-11T05:37:02Z"}, "message": "rs6000: Simplify some code with rs6000_builtin_is_supported\n\nIn function rs6000_init_builtins, there is a oversight that\nin one target debugging hunk with TARGET_DEBUG_BUILTIN we\nmissed to handle enum bif_enable ENB_CELL.  It's easy to\nfix it by adding another if case.  But considering the long\nterm maintainability, this patch updates it with the existing\nfunction rs6000_builtin_is_supported, which centralizes the\nrelated conditions for different enum bif_enable, we only\nneed to update that function once some condition needs to\nbe changed later.  This also simplifies another usage in\nfunction rs6000_expand_builtin.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000-builtin.cc (rs6000_init_builtins): Fix the\n\toversight on ENB_CELL by simplifying with rs6000_builtin_is_supported.\n\t(rs6000_expand_builtin): Simplify with rs6000_builtin_is_supported.", "tree": {"sha": "a6f89232d3ad46408ed9892194463a2b6001f333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6f89232d3ad46408ed9892194463a2b6001f333"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b22086c261f20a7576f233db3537ccf192e7160c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b22086c261f20a7576f233db3537ccf192e7160c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b22086c261f20a7576f233db3537ccf192e7160c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b22086c261f20a7576f233db3537ccf192e7160c/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a0e252080e4175a7d6e408ea2aa7a017bb99cce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a0e252080e4175a7d6e408ea2aa7a017bb99cce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a0e252080e4175a7d6e408ea2aa7a017bb99cce"}], "stats": {"total": 65, "additions": 4, "deletions": 61}, "files": [{"sha": "12afa86854c367d57600fec26cd9d9985513a365", "filename": "gcc/config/rs6000/rs6000-builtin.cc", "status": "modified", "additions": 4, "deletions": 61, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b22086c261f20a7576f233db3537ccf192e7160c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b22086c261f20a7576f233db3537ccf192e7160c/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc?ref=b22086c261f20a7576f233db3537ccf192e7160c", "patch": "@@ -830,44 +830,8 @@ rs6000_init_builtins (void)\n       fprintf (stderr, \"\\nAutogenerated built-in functions:\\n\\n\");\n       for (int i = 1; i < (int) RS6000_BIF_MAX; i++)\n \t{\n-\t  bif_enable e = rs6000_builtin_info[i].enable;\n-\t  if (e == ENB_P5 && !TARGET_POPCNTB)\n-\t    continue;\n-\t  if (e == ENB_P6 && !TARGET_CMPB)\n-\t    continue;\n-\t  if (e == ENB_P6_64 && !(TARGET_CMPB && TARGET_POWERPC64))\n-\t    continue;\n-\t  if (e == ENB_ALTIVEC && !TARGET_ALTIVEC)\n-\t    continue;\n-\t  if (e == ENB_VSX && !TARGET_VSX)\n-\t    continue;\n-\t  if (e == ENB_P7 && !TARGET_POPCNTD)\n-\t    continue;\n-\t  if (e == ENB_P7_64 && !(TARGET_POPCNTD && TARGET_POWERPC64))\n-\t    continue;\n-\t  if (e == ENB_P8 && !TARGET_DIRECT_MOVE)\n-\t    continue;\n-\t  if (e == ENB_P8V && !TARGET_P8_VECTOR)\n-\t    continue;\n-\t  if (e == ENB_P9 && !TARGET_MODULO)\n-\t    continue;\n-\t  if (e == ENB_P9_64 && !(TARGET_MODULO && TARGET_POWERPC64))\n-\t    continue;\n-\t  if (e == ENB_P9V && !TARGET_P9_VECTOR)\n-\t    continue;\n-\t  if (e == ENB_IEEE128_HW && !TARGET_FLOAT128_HW)\n-\t    continue;\n-\t  if (e == ENB_DFP && !TARGET_DFP)\n-\t    continue;\n-\t  if (e == ENB_CRYPTO && !TARGET_CRYPTO)\n-\t    continue;\n-\t  if (e == ENB_HTM && !TARGET_HTM)\n-\t    continue;\n-\t  if (e == ENB_P10 && !TARGET_POWER10)\n-\t    continue;\n-\t  if (e == ENB_P10_64 && !(TARGET_POWER10 && TARGET_POWERPC64))\n-\t    continue;\n-\t  if (e == ENB_MMA && !TARGET_MMA)\n+\t  enum rs6000_gen_builtins fn_code = (enum rs6000_gen_builtins) i;\n+\t  if (!rs6000_builtin_is_supported (fn_code))\n \t    continue;\n \t  tree fntype = rs6000_builtin_info[i].fntype;\n \t  tree t = TREE_TYPE (fntype);\n@@ -3370,29 +3334,8 @@ rs6000_expand_builtin (tree exp, rtx target, rtx /* subtarget */,\n      but check for actual availability now, during expand time.  For\n      invalid builtins, generate a normal call.  */\n   bifdata *bifaddr = &rs6000_builtin_info[uns_fcode];\n-  bif_enable e = bifaddr->enable;\n-\n-  if (!(e == ENB_ALWAYS\n-\t|| (e == ENB_P5 && TARGET_POPCNTB)\n-\t|| (e == ENB_P6 && TARGET_CMPB)\n-\t|| (e == ENB_P6_64 && TARGET_CMPB && TARGET_POWERPC64)\n-\t|| (e == ENB_ALTIVEC && TARGET_ALTIVEC)\n-\t|| (e == ENB_CELL && TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL)\n-\t|| (e == ENB_VSX && TARGET_VSX)\n-\t|| (e == ENB_P7 && TARGET_POPCNTD)\n-\t|| (e == ENB_P7_64 && TARGET_POPCNTD && TARGET_POWERPC64)\n-\t|| (e == ENB_P8 && TARGET_DIRECT_MOVE)\n-\t|| (e == ENB_P8V && TARGET_P8_VECTOR)\n-\t|| (e == ENB_P9 && TARGET_MODULO)\n-\t|| (e == ENB_P9_64 && TARGET_MODULO && TARGET_POWERPC64)\n-\t|| (e == ENB_P9V && TARGET_P9_VECTOR)\n-\t|| (e == ENB_IEEE128_HW && TARGET_FLOAT128_HW)\n-\t|| (e == ENB_DFP && TARGET_DFP)\n-\t|| (e == ENB_CRYPTO && TARGET_CRYPTO)\n-\t|| (e == ENB_HTM && TARGET_HTM)\n-\t|| (e == ENB_P10 && TARGET_POWER10)\n-\t|| (e == ENB_P10_64 && TARGET_POWER10 && TARGET_POWERPC64)\n-\t|| (e == ENB_MMA && TARGET_MMA)))\n+\n+  if (!rs6000_builtin_is_supported (fcode))\n     {\n       rs6000_invalid_builtin (fcode);\n       return expand_call (exp, target, ignore);"}]}