{"sha": "223cdd1548cadbcf2ae3eee4931e569b4c603f96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIzY2RkMTU0OGNhZGJjZjJhZTNlZWU0OTMxZTU2OWI0YzYwM2Y5Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-02-18T18:55:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-02-18T18:55:35Z"}, "message": "re PR target/60205 (No ABI warning for AVX-512)\n\n\tPR target/60205\n\t* config/i386/i386.h (struct ix86_args): Add warn_avx512f.\n\t* config/i386/i386.c (init_cumulative_args): Initialize warn_avx512f.\n\t(type_natural_mode): Warn ABI change when %zmm register is not\n\tavailable for AVX512F vector value passing.\n\ntestsuite/ChangeLog:\n\n\tPR target/60205\n\t* gcc.target/i386/pr60205-1.c: New test.\n\t* gcc.target/i386/pr60205-2.c: Ditto.\n\nFrom-SVN: r207851", "tree": {"sha": "e6deec44a3be02109169c40115f733f62ad38feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6deec44a3be02109169c40115f733f62ad38feb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/223cdd1548cadbcf2ae3eee4931e569b4c603f96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/223cdd1548cadbcf2ae3eee4931e569b4c603f96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/223cdd1548cadbcf2ae3eee4931e569b4c603f96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/223cdd1548cadbcf2ae3eee4931e569b4c603f96/comments", "author": null, "committer": null, "parents": [{"sha": "0bb4fc0517da4f29db38d14d06b45f2fa20977dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb4fc0517da4f29db38d14d06b45f2fa20977dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb4fc0517da4f29db38d14d06b45f2fa20977dd"}], "stats": {"total": 92, "additions": 77, "deletions": 15}, "files": [{"sha": "663144a4781ca44d4942ddd6663cb3104e3e9adc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=223cdd1548cadbcf2ae3eee4931e569b4c603f96", "patch": "@@ -1,9 +1,17 @@\n+2014-02-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/60205\n+\t* config/i386/i386.h (struct ix86_args): Add warn_avx512f.\n+\t* config/i386/i386.c (init_cumulative_args): Initialize warn_avx512f.\n+\t(type_natural_mode): Warn ABI change when %zmm register is not\n+\tavailable for AVX512F vector value passing.\n+\n 2014-02-18  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/60193\n-\t* config/i386/i386.c (ix86_expand_prologue): Use\n-\trax register as displacement for restoring %r10, %rax.\n-\tAdditional fix wrong offset for restoring both-registers.\n+\t* config/i386/i386.c (ix86_expand_prologue): Use value in\n+\trax register as displacement when restoring %r10 or %rax.\n+\tFix wrong offset when restoring both registers.\n \n 2014-02-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -59,8 +67,7 @@\n \n 2014-02-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n-\t* config/rs6000/altivec.md (p8_vmrgew): Handle little endian\n-\ttargets.\n+\t* config/rs6000/altivec.md (p8_vmrgew): Handle little endian targets.\n \t(p8_vmrgow): Likewise.\n \n 2014-02-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n@@ -89,16 +96,14 @@\n 2014-02-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/60183\n-\t* tree-ssa-phiprop.c (propagate_with_phi): Avoid speculating\n-\tloads.\n+\t* tree-ssa-phiprop.c (propagate_with_phi): Avoid speculating loads.\n \t(tree_ssa_phiprop): Calculate and free post-dominators.\n \n 2014-02-14  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/60131\n \t* ree.c (get_extended_src_reg): New function.\n-\t(combine_reaching_defs): Use it rather than assuming location\n-\tof REG.\n+\t(combine_reaching_defs): Use it rather than assuming location of REG.\n \t(find_and_remove_re): Verify first operand of extension is\n \ta REG before adding the insns to the copy list.\n \n@@ -139,8 +144,7 @@\n \tDECL_FUNCTION_SPECIFIC_TARGET.\n \t(hash_tree): Do not hash DECL_FUNCTION_SPECIFIC_TARGET.\n \t* tree-streamer-out.c (pack_ts_target_option): Remove.\n-\t(streamer_pack_tree_bitfields): Do not stream\n-\tTS_TARGET_OPTION.\n+\t(streamer_pack_tree_bitfields): Do not stream TS_TARGET_OPTION.\n \t(write_ts_function_decl_tree_pointers): Do not stream\n \tDECL_FUNCTION_SPECIFIC_TARGET.\n \t* tree-streamer-in.c (unpack_ts_target_option): Remove.\n@@ -150,8 +154,7 @@\n \n 2014-02-14  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* tree-vect-loop.c (vect_is_slp_reduction): Don't set\n-\tuse_stmt twice.\n+\t* tree-vect-loop.c (vect_is_slp_reduction): Don't set use_stmt twice.\n \t(get_initial_def_for_induction, vectorizable_induction): Ignore\n \tdebug stmts when looking for exit_phi.\n \t(vectorizable_live_operation): Fix up condition."}, {"sha": "acfc021aea3d9a1884679179cfa575f310aa70b3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=223cdd1548cadbcf2ae3eee4931e569b4c603f96", "patch": "@@ -6129,6 +6129,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n     }\n   if (TARGET_MMX)\n     cum->mmx_nregs = MMX_REGPARM_MAX;\n+  cum->warn_avx512f = true;\n   cum->warn_avx = true;\n   cum->warn_sse = true;\n   cum->warn_mmx = true;\n@@ -6154,6 +6155,7 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \t  cum->nregs = 0;\n \t  cum->sse_nregs = 0;\n \t  cum->mmx_nregs = 0;\n+\t  cum->warn_avx512f = 0;\n \t  cum->warn_avx = 0;\n \t  cum->warn_sse = 0;\n \t  cum->warn_mmx = 0;\n@@ -6211,7 +6213,7 @@ type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum,\n   if (TREE_CODE (type) == VECTOR_TYPE && !VECTOR_MODE_P (mode))\n     {\n       HOST_WIDE_INT size = int_size_in_bytes (type);\n-      if ((size == 8 || size == 16 || size == 32)\n+      if ((size == 8 || size == 16 || size == 32 || size == 64)\n \t  /* ??? Generic code allows us to create width 1 vectors.  Ignore.  */\n \t  && TYPE_VECTOR_SUBPARTS (type) > 1)\n \t{\n@@ -6227,7 +6229,29 @@ type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum,\n \t    if (GET_MODE_NUNITS (mode) == TYPE_VECTOR_SUBPARTS (type)\n \t\t&& GET_MODE_INNER (mode) == innermode)\n \t      {\n-\t\tif (size == 32 && !TARGET_AVX)\n+\t\tif (size == 64 && !TARGET_AVX512F)\n+\t\t  {\n+\t\t    static bool warnedavx512f;\n+\t\t    static bool warnedavx512f_ret;\n+\n+\t\t    if (cum\n+\t\t\t&& !warnedavx512f\n+\t\t\t&& cum->warn_avx512f)\n+\t\t      {\n+\t\t\twarnedavx512f = true;\n+\t\t\twarning (0, \"AVX512F vector argument without AVX512F \"\n+\t\t\t\t \"enabled changes the ABI\");\n+\t\t      }\n+\t\t    else if (in_return & !warnedavx512f_ret)\n+\t\t      {\n+\t\t\twarnedavx512f_ret = true;\n+\t\t\twarning (0, \"AVX512F vector return without AVX512F \"\n+\t\t\t\t \"enabled changes the ABI\");\n+\t\t      }\n+\n+\t\t    return TYPE_MODE (type);\n+\t\t  }\n+\t\telse if (size == 32 && !TARGET_AVX)\n \t\t  {\n \t\t    static bool warnedavx;\n \t\t    static bool warnedavx_ret;"}, {"sha": "1b6460a0468acab2f69ec03bac3582a0b447b416", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=223cdd1548cadbcf2ae3eee4931e569b4c603f96", "patch": "@@ -1606,6 +1606,8 @@ typedef struct ix86_args {\n \t\t\t\t   is used */\n   int sse_words;\t\t/* # sse words passed so far */\n   int sse_nregs;\t\t/* # sse registers available for passing */\n+  int warn_avx512f;\t\t/* True when we want to warn\n+\t\t\t\t   about AVX512F ABI.  */\n   int warn_avx;\t\t\t/* True when we want to warn about AVX ABI.  */\n   int warn_sse;\t\t\t/* True when we want to warn about SSE ABI.  */\n   int warn_mmx;\t\t\t/* True when we want to warn about MMX ABI.  */"}, {"sha": "430ea451da07f4dbe219d4047fdf80b94f992f35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=223cdd1548cadbcf2ae3eee4931e569b4c603f96", "patch": "@@ -1,3 +1,9 @@\n+2014-02-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/60205\n+\t* gcc.target/i386/pr60205-1.c: New test.\n+\t* gcc.target/i386/pr60205-2.c: Ditto.\n+\n 2014-02-18  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/60193"}, {"sha": "9ae1212d6fd7e69fd75b988bbf6ac9cbe54bb08f", "filename": "gcc/testsuite/gcc.target/i386/pr60205-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60205-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60205-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60205-1.c?ref=223cdd1548cadbcf2ae3eee4931e569b4c603f96", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/60205 */\n+/* { dg-options \"-O2 -mno-avx512f -Wno-psabi\" } */\n+/* { dg-skip-if \"no AVX512F vector\" { *-*-mingw* } } */\n+\n+typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+extern __v16si x;\n+\n+extern void bar (__v16si);\n+void\n+foo (void)\n+{\n+  bar (x); /* { dg-message \"warning: AVX512F vector argument without AVX512F enabled changes the ABI\" } */\n+}"}, {"sha": "8a6558793c46edbbbc0eea3a9c99d6ab7d6cfba3", "filename": "gcc/testsuite/gcc.target/i386/pr60205-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60205-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/223cdd1548cadbcf2ae3eee4931e569b4c603f96/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60205-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr60205-2.c?ref=223cdd1548cadbcf2ae3eee4931e569b4c603f96", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/60205 */\n+/* { dg-options \"-O2 -mno-avx512f\" } */\n+/* { dg-skip-if \"no AVX512F vector\" { *-*-mingw* } } */\n+\n+typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+extern __v16si x;\n+\n+__v16si\n+foo (void)\n+{ /* { dg-warning \"AVX512F vector return without AVX512F enabled changes the ABI\" } */\n+  return x;\n+}"}]}