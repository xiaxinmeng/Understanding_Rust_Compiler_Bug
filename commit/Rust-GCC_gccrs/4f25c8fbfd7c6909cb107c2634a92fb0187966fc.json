{"sha": "4f25c8fbfd7c6909cb107c2634a92fb0187966fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYyNWM4ZmJmZDdjNjkwOWNiMTA3YzI2MzRhOTJmYjAxODc5NjZmYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-03-23T11:06:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-03-23T11:06:21Z"}, "message": "combine.c (try_combine): Adjust comment.\n\n\t* combine.c (try_combine): Adjust comment.  Do not add the set of\n\tinsn #0 if the destination indirectly is set or dies in insn #2.\n\tTidy up code to distribute a new note.\n\nFrom-SVN: r197002", "tree": {"sha": "db7557835407774778e395b1976034c6736053b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db7557835407774778e395b1976034c6736053b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f25c8fbfd7c6909cb107c2634a92fb0187966fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f25c8fbfd7c6909cb107c2634a92fb0187966fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f25c8fbfd7c6909cb107c2634a92fb0187966fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f25c8fbfd7c6909cb107c2634a92fb0187966fc/comments", "author": null, "committer": null, "parents": [{"sha": "956d29dff6023d5eadd029f6fb20a002fa7f8a0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/956d29dff6023d5eadd029f6fb20a002fa7f8a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/956d29dff6023d5eadd029f6fb20a002fa7f8a0c"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "1f04a1db8ec1e41590f7d9e4ef1d6a977a6ca4b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f25c8fbfd7c6909cb107c2634a92fb0187966fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f25c8fbfd7c6909cb107c2634a92fb0187966fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f25c8fbfd7c6909cb107c2634a92fb0187966fc", "patch": "@@ -1,3 +1,9 @@\n+2013-03-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* combine.c (try_combine): Adjust comment.  Do not add the set of\n+\tinsn #0 if the destination indirectly is set or dies in insn #2.\n+\tTidy up code to distribute a new note.\n+\n 2013-03-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*movdi_internal): Set prefix_rex attribute"}, {"sha": "acb4cb4c108aa826e4d1ee4a5eddff4b45d35b55", "filename": "gcc/combine.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f25c8fbfd7c6909cb107c2634a92fb0187966fc/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f25c8fbfd7c6909cb107c2634a92fb0187966fc/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=4f25c8fbfd7c6909cb107c2634a92fb0187966fc", "patch": "@@ -2845,13 +2845,13 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p,\n \n   /* See if the SETs in I1 or I2 need to be kept around in the merged\n      instruction: whenever the value set there is still needed past I3.\n-     For the SETs in I2, this is easy: we see if I2DEST dies or is set in I3.\n+     For the SET in I2, this is easy: we see if I2DEST dies or is set in I3.\n \n-     For the SET in I1, we have two cases:  If I1 and I2 independently\n-     feed into I3, the set in I1 needs to be kept around if I1DEST dies\n+     For the SET in I1, we have two cases: if I1 and I2 independently feed\n+     into I3, the set in I1 needs to be kept around unless I1DEST dies\n      or is set in I3.  Otherwise (if I1 feeds I2 which feeds I3), the set\n      in I1 needs to be kept around unless I1DEST dies or is set in either\n-     I2 or I3.  The same consideration applies to I0.  */\n+     I2 or I3.  The same considerations apply to I0.  */\n \n   added_sets_2 = !dead_or_set_p (i3, i2dest);\n \n@@ -2863,8 +2863,9 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p,\n \n   if (i0)\n     added_sets_0 =  !(dead_or_set_p (i3, i0dest)\n-\t\t      || (i0_feeds_i2_n && dead_or_set_p (i2, i0dest))\n-\t\t      || (i0_feeds_i1_n && dead_or_set_p (i1, i0dest)));\n+\t\t      || (i0_feeds_i1_n && dead_or_set_p (i1, i0dest))\n+\t\t      || ((i0_feeds_i2_n || (i0_feeds_i1_n && i1_feeds_i2_n))\n+\t\t\t  && dead_or_set_p (i2, i0dest)));\n   else\n     added_sets_0 = 0;\n \n@@ -4158,14 +4159,12 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p,\n \n     if (i3dest_killed)\n       {\n+\trtx new_note = alloc_reg_note (REG_DEAD, i3dest_killed, NULL_RTX);\n \tif (newi2pat && reg_set_p (i3dest_killed, newi2pat))\n-\t  distribute_notes (alloc_reg_note (REG_DEAD, i3dest_killed,\n-\t\t\t\t\t    NULL_RTX),\n-\t\t\t    NULL_RTX, i2, NULL_RTX, elim_i2, elim_i1, elim_i0);\n+\t  distribute_notes (new_note, NULL_RTX, i2, NULL_RTX, elim_i2,\n+\t\t\t    elim_i1, elim_i0);\n \telse\n-\t  distribute_notes (alloc_reg_note (REG_DEAD, i3dest_killed,\n-\t\t\t\t\t    NULL_RTX),\n-\t\t\t    NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n+\t  distribute_notes (new_note, NULL_RTX, i3, newi2pat ? i2 : NULL_RTX,\n \t\t\t    elim_i2, elim_i1, elim_i0);\n       }\n "}]}