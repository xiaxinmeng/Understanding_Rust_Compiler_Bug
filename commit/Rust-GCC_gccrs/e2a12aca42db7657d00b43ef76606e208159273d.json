{"sha": "e2a12aca42db7657d00b43ef76606e208159273d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJhMTJhY2E0MmRiNzY1N2QwMGI0M2VmNzY2MDZlMjA4MTU5MjczZA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-07-15T08:34:46Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-15T08:34:46Z"}, "message": "dbxout.c (dbxout_source_line): Make static, update prototype.\n\n\t* dbxout.c (dbxout_source_line): Make static, update prototype.\n\t(dbx_debug_hooks, xcoff_debug_hooks): Add new hooks.\n\t(dbxout_init, dbxout_finish, dbxout_source_line,\n\tdbxout_begin_block, dbxout_end_block): Update for new prototypes.\n\t* dbxout.h (dbxout_source_line): Delete.\n\t* debug.c (debug_nothing_file, debug_nothing_file_int,\n\tdebug_nothing_file_charstar_rtx): New.\n\t(do_nothing_debug_hooks): Update.\n\t(debug_nothing_void, debug_nothing_charstar_rtx,\n\tdwarf2out_end_epilogue): New.\n\t(debug_nothing_file_charstar, debug_nothing_file_int_int): Rename.\n\t* debug.h (struct rtx_def): Declare.\n\t(gcc_debug_hooks): New hooks source_line, end_epilogue\n\tand end_function.\n\t(debug_nothing_void, debug_nothing_charstar_rtx,\n\tdwarf2out_end_epilogue): New.\n\t(debug_nothing_file_charstar, debug_nothing_file_int_int): Rename.\n\t* dwarf2out.c (dwarf2out_source_line): Make static, update prototype.\n\t(dwarf2_debug_hooks): Update.\n\t(dwarf2out_init, dwarf2out_finish, dwarf2out_source_line,\n\tdwarf2out_begin_block, dwarf2out_end_block): Update for new prototypes.\n\t* dwarf2out.h (dwarf2out_source_line): Remove.\n\t* dwarfout.c (dwarfout_end_epilogue, dwarfout_end_function):\n\tMake static, update prototype.\n\t(dwarfout_init, dwarfout_finish, dwarfout_source_line,\n\tdwarfout_begin_block, dwarfout_end_block): Update for new prototypes.\n\t(dwarf_debug_hooks): Update.\n\t* dwarfout.h (dwarfout_end_epilogue, dwarfout_source_line,\n\tdwarfout_end_function): Remove.\n\t* final.c (profile_function): Use debug hooks for ending functions\n\tand epilogues.\n\t(output_source_line, final_end_function): Update prototype,\n\tuse debug hooks.\n\t(final_start_function, final_scan_insn): Update.\n\t* output.h (sdb_begin_function_line): Remove.\n\t(final_end_function): Update prototype.\n\t* sdbout.c (sdb_begin_function_line): Make static.\n\t(PUT_SDB_EPILOGUE_END): Move to sdbout_end_epilogue.\n\t(sdbout_source_line): New.\n\t(sdbout_end_epilogue, sdbout_end_function): Make static, update\n\tprototypes.\n\t(sdb_debug_hooks): Update.\n\t(sdbout_init, sdbout_source_line,\n\tsdbout_begin_block, sdbout_end_block): Update for new prototypes.\n\t* sdbout.h (sdbout_end_epilogue, sdbout_end_function): Remove.\n\t* toplev.c (compile_file, rest_of_compilation): Update.\n\t* tree.h (dwarf2out_end_epilogue): Move to debug.h.\n\t* xcoffout.c (xcoffout_source_line, xcoffout_begin_block,\n\txcoffout_end_block, xcoffout_end_epilogue, xcoffout_end_function):\n\tUpdate for prototype changes.\n\t* xcoffout.h (xcoffout_source_line, xcoffout_begin_block,\n\txcoffout_end_block, xcoffout_end_epilogue): Update prototypes.\n\nFrom-SVN: r44017", "tree": {"sha": "3f39c7aa98569361a789583a5906c27e2596de19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f39c7aa98569361a789583a5906c27e2596de19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2a12aca42db7657d00b43ef76606e208159273d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a12aca42db7657d00b43ef76606e208159273d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a12aca42db7657d00b43ef76606e208159273d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a12aca42db7657d00b43ef76606e208159273d/comments", "author": null, "committer": null, "parents": [{"sha": "be7b80f42726389bd25888ede4f13d276bb12ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7b80f42726389bd25888ede4f13d276bb12ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7b80f42726389bd25888ede4f13d276bb12ef0"}], "stats": {"total": 514, "additions": 271, "deletions": 243}, "files": [{"sha": "95e2f32433b6244d0af5055e26c3b66e7916c31f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -1,3 +1,58 @@\n+2001-07-15  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* dbxout.c (dbxout_source_line): Make static, update prototype.\n+\t(dbx_debug_hooks, xcoff_debug_hooks): Add new hooks.\n+\t(dbxout_init, dbxout_finish, dbxout_source_line,\n+\tdbxout_begin_block, dbxout_end_block): Update for new prototypes.\n+\t* dbxout.h (dbxout_source_line): Delete.\n+\t* debug.c (debug_nothing_file, debug_nothing_file_int,\n+\tdebug_nothing_file_charstar_rtx): New.\n+\t(do_nothing_debug_hooks): Update.\n+\t(debug_nothing_void, debug_nothing_charstar_rtx,\n+\tdwarf2out_end_epilogue): New.\n+\t(debug_nothing_file_charstar, debug_nothing_file_int_int): Rename.\n+\t* debug.h (struct rtx_def): Declare.\n+\t(gcc_debug_hooks): New hooks source_line, end_epilogue\n+\tand end_function.\n+\t(debug_nothing_void, debug_nothing_charstar_rtx,\n+\tdwarf2out_end_epilogue): New.\n+\t(debug_nothing_file_charstar, debug_nothing_file_int_int): Rename.\n+\t* dwarf2out.c (dwarf2out_source_line): Make static, update prototype.\n+\t(dwarf2_debug_hooks): Update.\n+\t(dwarf2out_init, dwarf2out_finish, dwarf2out_source_line,\n+\tdwarf2out_begin_block, dwarf2out_end_block): Update for new prototypes.\n+\t* dwarf2out.h (dwarf2out_source_line): Remove.\n+\t* dwarfout.c (dwarfout_end_epilogue, dwarfout_end_function):\n+\tMake static, update prototype.\n+\t(dwarfout_init, dwarfout_finish, dwarfout_source_line,\n+\tdwarfout_begin_block, dwarfout_end_block): Update for new prototypes.\n+\t(dwarf_debug_hooks): Update.\n+\t* dwarfout.h (dwarfout_end_epilogue, dwarfout_source_line,\n+\tdwarfout_end_function): Remove.\n+\t* final.c (profile_function): Use debug hooks for ending functions\n+\tand epilogues.\n+\t(output_source_line, final_end_function): Update prototype,\n+\tuse debug hooks.\n+\t(final_start_function, final_scan_insn): Update.\n+\t* output.h (sdb_begin_function_line): Remove.\n+\t(final_end_function): Update prototype.\n+\t* sdbout.c (sdb_begin_function_line): Make static.\n+\t(PUT_SDB_EPILOGUE_END): Move to sdbout_end_epilogue.\n+\t(sdbout_source_line): New.\n+\t(sdbout_end_epilogue, sdbout_end_function): Make static, update\n+\tprototypes.\n+\t(sdb_debug_hooks): Update.\n+\t(sdbout_init, sdbout_source_line,\n+\tsdbout_begin_block, sdbout_end_block): Update for new prototypes.\n+\t* sdbout.h (sdbout_end_epilogue, sdbout_end_function): Remove.\n+\t* toplev.c (compile_file, rest_of_compilation): Update.\n+\t* tree.h (dwarf2out_end_epilogue): Move to debug.h.\n+\t* xcoffout.c (xcoffout_source_line, xcoffout_begin_block,\n+\txcoffout_end_block, xcoffout_end_epilogue, xcoffout_end_function):\n+\tUpdate for prototype changes.\n+\t* xcoffout.h (xcoffout_source_line, xcoffout_begin_block,\n+\txcoffout_end_block, xcoffout_end_epilogue): Update prototypes.\n+\n 2001-07-15  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.h (TARGET_ABI_OSF): New."}, {"sha": "3dd3f80ecb3d4a9b2daa39ddbd9ab8daa50e6816", "filename": "gcc/dbxout.c", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -284,10 +284,11 @@ static int current_sym_nchars;\n #define CONTIN do { } while (0)\n #endif\n \n-static void dbxout_init\t\t\tPARAMS ((FILE *, const char *));\n-static void dbxout_finish\t\tPARAMS ((FILE *, const char *));\n+static void dbxout_init\t\t\tPARAMS ((const char *));\n+static void dbxout_finish\t\tPARAMS ((const char *));\n static void dbxout_start_source_file\tPARAMS ((unsigned, const char *));\n static void dbxout_end_source_file\tPARAMS ((unsigned));\n+static void dbxout_source_line\t\tPARAMS ((const char *, rtx));\n #if defined(ASM_OUTPUT_SECTION_NAME)\n static void dbxout_function_end\t\tPARAMS ((void));\n #endif\n@@ -314,8 +315,8 @@ static void dbxout_really_begin_function PARAMS ((tree));\n /* The debug hooks structure.  */\n #if defined (DBX_DEBUGGING_INFO)\n \n-static void dbxout_begin_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n-static void dbxout_end_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n+static void dbxout_begin_block\t\tPARAMS ((unsigned, unsigned));\n+static void dbxout_end_block\t\tPARAMS ((unsigned, unsigned));\n \n struct gcc_debug_hooks dbx_debug_hooks =\n {\n@@ -326,7 +327,10 @@ struct gcc_debug_hooks dbx_debug_hooks =\n   dbxout_start_source_file,\n   dbxout_end_source_file,\n   dbxout_begin_block,\n-  dbxout_end_block\n+  dbxout_end_block,\n+  dbxout_source_line,\n+  debug_nothing_void,\t\t/* end_epilogue */\n+  debug_nothing_int\t\t/* end function */\n };\n #endif /* DBX_DEBUGGING_INFO  */\n \n@@ -340,7 +344,10 @@ struct gcc_debug_hooks xcoff_debug_hooks =\n   dbxout_start_source_file,\n   dbxout_end_source_file,\n   xcoffout_begin_block,\n-  xcoffout_end_block\n+  xcoffout_end_block,\n+  xcoffout_source_line,\n+  xcoffout_end_epilogue,\n+  xcoffout_end_function\n };\n #endif /* XCOFF_DEBUGGING_INFO  */\n \f\n@@ -371,14 +378,13 @@ dbxout_function_end ()\n    Initialize `typevec' and output the standard data types of C.  */\n \n static void\n-dbxout_init (asm_file, input_file_name)\n-     FILE *asm_file;\n+dbxout_init (input_file_name)\n      const char *input_file_name;\n {\n   char ltext_label_name[100];\n   tree syms = getdecls ();\n \n-  asmfile = asm_file;\n+  asmfile = asm_out_file;\n \n   typevec_len = 100;\n   typevec = (struct typeinfo *) xcalloc (typevec_len, sizeof typevec[0]);\n@@ -556,18 +562,19 @@ dbxout_source_file (file, filename)\n /* Output a line number symbol entry into output stream FILE, \n    for source file FILENAME and line number LINENO.  */\n \n-void\n-dbxout_source_line (file, filename, lineno)\n-     FILE *file;\n+static void\n+dbxout_source_line (filename, note)\n      const char *filename;\n-     int lineno;\n+     rtx note;\n {\n-  dbxout_source_file (file, filename);\n+  unsigned int lineno = NOTE_LINE_NUMBER (note);\n+\n+  dbxout_source_file (asmfile, filename);\n \n #ifdef ASM_OUTPUT_SOURCE_LINE\n-  ASM_OUTPUT_SOURCE_LINE (file, lineno);\n+  ASM_OUTPUT_SOURCE_LINE (asmfile, lineno);\n #else\n-  fprintf (file, \"%s%d,0,%d\\n\", ASM_STABD_OP, N_SLINE, lineno);\n+  fprintf (asmfile, \"%s%d,0,%d\\n\", ASM_STABD_OP, N_SLINE, lineno);\n #endif\n }\n \n@@ -576,23 +583,21 @@ dbxout_source_line (file, filename, lineno)\n /* Describe the beginning of an internal block within a function.  */\n \n static void\n-dbxout_begin_block (file, line, n)\n-     FILE *file;\n+dbxout_begin_block (line, n)\n      unsigned int line ATTRIBUTE_UNUSED;\n      unsigned int n;\n {\n-  ASM_OUTPUT_INTERNAL_LABEL (file, \"LBB\", n);\n+  ASM_OUTPUT_INTERNAL_LABEL (asmfile, \"LBB\", n);\n }\n \n /* Describe the end line-number of an internal block within a function.  */\n \n static void\n-dbxout_end_block (file, line, n)\n-     FILE *file;\n+dbxout_end_block (line, n)\n      unsigned int line ATTRIBUTE_UNUSED;\n      unsigned int n;\n {\n-  ASM_OUTPUT_INTERNAL_LABEL (file, \"LBE\", n);\n+  ASM_OUTPUT_INTERNAL_LABEL (asmfile, \"LBE\", n);\n }\n \n #endif /* DBX_DEBUGGING_INFO  */\n@@ -602,12 +607,11 @@ dbxout_end_block (file, line, n)\n    to do nothing.  */\n \n static void\n-dbxout_finish (file, filename)\n-     FILE *file ATTRIBUTE_UNUSED;\n+dbxout_finish (filename)\n      const char *filename ATTRIBUTE_UNUSED;\n {\n #ifdef DBX_OUTPUT_MAIN_SOURCE_FILE_END\n-  DBX_OUTPUT_MAIN_SOURCE_FILE_END (file, filename);\n+  DBX_OUTPUT_MAIN_SOURCE_FILE_END (asmfile, filename);\n #endif /* DBX_OUTPUT_MAIN_SOURCE_FILE_END */\n }\n "}, {"sha": "e196b8f9bdd6dcc1df84fead3558e16dbf024a8b", "filename": "gcc/dbxout.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdbxout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdbxout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.h?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -26,5 +26,4 @@ extern void dbxout_parms\t\tPARAMS ((tree));\n extern void dbxout_reg_parms\t\tPARAMS ((tree));\n extern int dbxout_syms\t\t\tPARAMS ((tree));\n extern void dbxout_function\t\tPARAMS ((tree));\n-extern void dbxout_source_line\t\tPARAMS ((FILE *, const char *, int));\n extern void dbxout_begin_function\tPARAMS ((tree));"}, {"sha": "5aa651c72153d3ecc6fbeee1f3fbd92f0410d527", "filename": "gcc/debug.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -22,22 +22,29 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n /* The do-nothing debug hooks.  */\n struct gcc_debug_hooks do_nothing_debug_hooks =\n {\n-  debug_nothing_file_charstar,\n-  debug_nothing_file_charstar,\n+  debug_nothing_charstar,\n+  debug_nothing_charstar,\n   debug_nothing_int_charstar,\n   debug_nothing_int_charstar,\n   debug_nothing_int_charstar,\n   debug_nothing_int,\n-  debug_nothing_file_int_int,\n-  debug_nothing_file_int_int\n+  debug_nothing_int_int,\n+  debug_nothing_int_int,\n+  debug_nothing_charstar_rtx,\n+  debug_nothing_void,\n+  debug_nothing_int\n };\n \n /* This file contains implementations of each debug hook that do\n    nothing.  */\n \n void\n-debug_nothing_file_charstar (file, main_filename)\n-     FILE *file ATTRIBUTE_UNUSED;\n+debug_nothing_void ()\n+{\n+}\n+\n+void\n+debug_nothing_charstar (main_filename)\n      const char *main_filename ATTRIBUTE_UNUSED;\n {\n }\n@@ -56,9 +63,15 @@ debug_nothing_int (line)\n }\n \n void\n-debug_nothing_file_int_int (file, line, n)\n-     FILE *file ATTRIBUTE_UNUSED;\n+debug_nothing_int_int (line, n)\n      unsigned int line ATTRIBUTE_UNUSED;\n      unsigned int n ATTRIBUTE_UNUSED;\n {\n }\n+\n+void\n+debug_nothing_charstar_rtx (filename, note)\n+     const char *filename ATTRIBUTE_UNUSED;\n+     struct rtx_def *note ATTRIBUTE_UNUSED;\n+{\n+}"}, {"sha": "c2e31a84c9e3c3db1be754d242aadd80e5bd0ffc", "filename": "gcc/debug.h", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -18,17 +18,19 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #ifndef GCC_DEBUG_H\n #define GCC_DEBUG_H\n \n+struct rtx_def;\n+\n /* This structure contains hooks for the debug information output\n    functions, accessed through the global instance debug_hooks set in\n    toplev.c according to command line options.  */\n struct gcc_debug_hooks\n {\n-  /* Initialise debug output to FILE.  MAIN_FILENAME is the name of\n-     the main input file.  */\n-  void (* init) PARAMS ((FILE * file, const char *main_filename));\n+  /* Initialise debug output.  MAIN_FILENAME is the name of the main\n+     input file.  */\n+  void (* init) PARAMS ((const char *main_filename));\n \n-  /* Output debug symbols to FILE.  */\n-  void (* finish) PARAMS ((FILE * file, const char *main_filename));\n+  /* Output debug symbols.  */\n+  void (* finish) PARAMS ((const char *main_filename));\n \n   /* Macro defined on line LINE with name and expansion TEXT.  */\n   void (* define) PARAMS ((unsigned int line, const char *text));\n@@ -45,24 +47,38 @@ struct gcc_debug_hooks\n   void (* end_source_file) PARAMS ((unsigned int line));\n \n   /* Record the beginning of block N, counting from 1 and not\n-     including the function-scope block, at LINE.  Output to FILE.  */\n-  void (* begin_block) PARAMS ((FILE *, unsigned int line, unsigned int n));\n+     including the function-scope block, at LINE.  */\n+  void (* begin_block) PARAMS ((unsigned int line, unsigned int n));\n \n   /* Record the end of a block.  Arguments as for begin_block.  */\n-  void (* end_block) PARAMS ((FILE *, unsigned int line, unsigned int n));\n+  void (* end_block) PARAMS ((unsigned int line, unsigned int n));\n+\n+  /* Record a line based on NOTE.  Obtain the line number with\n+     NOTE_LINE_NUMBER (note).  */\n+  void (* source_line) PARAMS ((const char *filename, struct rtx_def *note));\n+\n+  /* Record end of epilogue code.  */\n+  void (* end_epilogue) PARAMS ((void));\n+\n+  /* Record end of function.  LINE is highest line number in function.  */\n+  void (* end_function) PARAMS ((unsigned int line));\n };\n \n extern struct gcc_debug_hooks *debug_hooks;\n \n /* The do-nothing hooks.  */\n-extern void debug_nothing_file_charstar\n-  PARAMS ((FILE *, const char *));\n+extern void debug_nothing_void\n+  PARAMS ((void));\n+extern void debug_nothing_charstar\n+  PARAMS ((const char *));\n extern void debug_nothing_int_charstar\n   PARAMS ((unsigned int, const char *));\n extern void debug_nothing_int\n   PARAMS ((unsigned int));\n-extern void debug_nothing_file_int_int\n-  PARAMS ((FILE *, unsigned int, unsigned int));\n+extern void debug_nothing_int_int\n+  PARAMS ((unsigned int, unsigned int));\n+extern void debug_nothing_charstar_rtx\n+  PARAMS ((const char *, struct rtx_def *));\n \n /* Hooks for various debug formats.  */\n extern struct gcc_debug_hooks do_nothing_debug_hooks;\n@@ -72,4 +88,9 @@ extern struct gcc_debug_hooks xcoff_debug_hooks;\n extern struct gcc_debug_hooks dwarf_debug_hooks;\n extern struct gcc_debug_hooks dwarf2_debug_hooks;\n \n+/* Dwarf2 frame information.  */\n+\n+extern void dwarf2out_end_epilogue\n+  PARAMS ((void));\n+\n #endif /* !GCC_DEBUG_H  */"}, {"sha": "207bda72c09d4c1ce38cfd6bdf37c3e8194bedcf", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -3001,14 +3001,15 @@ get_cfa_from_loc_descr (cfa, loc)\n /* And now, the support for symbolic debugging information.  */\n #ifdef DWARF2_DEBUGGING_INFO\n \n-static void dwarf2out_init \t\tPARAMS ((FILE *, const char *));\n-static void dwarf2out_finish\t\tPARAMS ((FILE *, const char *));\n+static void dwarf2out_init \t\tPARAMS ((const char *));\n+static void dwarf2out_finish\t\tPARAMS ((const char *));\n static void dwarf2out_define\t        PARAMS ((unsigned int, const char *));\n static void dwarf2out_undef\t        PARAMS ((unsigned int, const char *));\n static void dwarf2out_start_source_file\tPARAMS ((unsigned, const char *));\n static void dwarf2out_end_source_file\tPARAMS ((unsigned));\n-static void dwarf2out_begin_block\tPARAMS ((FILE *, unsigned, unsigned));\n-static void dwarf2out_end_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n+static void dwarf2out_begin_block\tPARAMS ((unsigned, unsigned));\n+static void dwarf2out_end_block\t\tPARAMS ((unsigned, unsigned));\n+static void dwarf2out_source_line\tPARAMS ((const char *, rtx));\n \n /* The debug hooks structure.  */\n \n@@ -3021,7 +3022,10 @@ struct gcc_debug_hooks dwarf2_debug_hooks =\n   dwarf2out_start_source_file,\n   dwarf2out_end_source_file,\n   dwarf2out_begin_block,\n-  dwarf2out_end_block\n+  dwarf2out_end_block,\n+  dwarf2out_source_line,\n+  dwarf2out_end_epilogue,\n+  debug_nothing_int\t\t/* end_function */\n };\n \f\n /* NOTE: In the comments in this file, many references are made to\n@@ -11108,8 +11112,7 @@ dwarf2out_decl (decl)\n    a lexical block.  */\n \n static void\n-dwarf2out_begin_block (file, line, blocknum)\n-     FILE *file ATTRIBUTE_UNUSED;\n+dwarf2out_begin_block (line, blocknum)\n      unsigned int line ATTRIBUTE_UNUSED;\n      unsigned int blocknum;\n {\n@@ -11121,8 +11124,7 @@ dwarf2out_begin_block (file, line, blocknum)\n    lexical block.  */\n \n static void\n-dwarf2out_end_block (file, line, blocknum)\n-     FILE *file ATTRIBUTE_UNUSED;\n+dwarf2out_end_block (line, blocknum)\n      unsigned int line ATTRIBUTE_UNUSED;\n      unsigned int blocknum;\n {\n@@ -11221,11 +11223,13 @@ init_file_table ()\n    and record information relating to this source line, in\n    'line_info_table' for later output of the .debug_line section.  */\n \n-void\n-dwarf2out_line (filename, line)\n+static void\n+dwarf2out_source_line (filename, note)\n      register const char *filename;\n-     register unsigned line;\n+     rtx note;\n {\n+  unsigned int line = NOTE_LINE_NUMBER (note);\n+\n   if (debug_info_level >= DINFO_LEVEL_NORMAL)\n     {\n       function_section (current_function_decl);\n@@ -11385,8 +11389,7 @@ dwarf2out_undef (lineno, buffer)\n /* Set up for Dwarf output at the start of compilation.  */\n \n static void\n-dwarf2out_init (asm_out_file, main_input_filename)\n-     register FILE *asm_out_file;\n+dwarf2out_init (main_input_filename)\n      register const char *main_input_filename;\n {\n   init_file_table ();\n@@ -11475,8 +11478,7 @@ dwarf2out_init (asm_out_file, main_input_filename)\n    and generate the DWARF-2 debugging info.  */\n \n static void\n-dwarf2out_finish (asm_out_file, input_filename)\n-     register FILE *asm_out_file;\n+dwarf2out_finish (input_filename)\n      register const char *input_filename ATTRIBUTE_UNUSED;\n {\n   limbo_die_node *node, *next_node;"}, {"sha": "83056e5cece5974638f984c84429f4a9aae0500c", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -20,7 +20,6 @@ Boston, MA 02111-1307, USA.  */\n \n extern int dwarf2out_ignore_block\tPARAMS ((tree));\n extern void dwarf2out_decl\t\tPARAMS ((tree));\t\n-extern void dwarf2out_line\t\tPARAMS ((const char *, unsigned));\n extern void dwarf2out_frame_init\tPARAMS ((void));\n extern void dwarf2out_frame_debug\tPARAMS ((rtx));\n extern void dwarf2out_frame_finish\tPARAMS ((void));"}, {"sha": "f6e984e0ee8e44f244744e36605429e9243e7b12", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -787,16 +787,19 @@ static int in_class;\n \n /* Forward declarations for functions defined in this file.  */\n \n-static void dwarfout_init \t\tPARAMS ((FILE *, const char *));\n-static void dwarfout_finish\t\tPARAMS ((FILE *, const char *));\n+static void dwarfout_init \t\tPARAMS ((const char *));\n+static void dwarfout_finish\t\tPARAMS ((const char *));\n static void dwarfout_define\t        PARAMS ((unsigned int, const char *));\n static void dwarfout_undef\t        PARAMS ((unsigned int, const char *));\n static void dwarfout_start_source_file\tPARAMS ((unsigned, const char *));\n static void dwarfout_start_source_file_check PARAMS ((unsigned, const char *));\n static void dwarfout_end_source_file\tPARAMS ((unsigned));\n static void dwarfout_end_source_file_check PARAMS ((unsigned));\n-static void dwarfout_begin_block\tPARAMS ((FILE *, unsigned, unsigned));\n-static void dwarfout_end_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n+static void dwarfout_begin_block\tPARAMS ((unsigned, unsigned));\n+static void dwarfout_end_block\t\tPARAMS ((unsigned, unsigned));\n+static void dwarfout_end_epilogue\tPARAMS ((void));\n+static void dwarfout_source_line\tPARAMS (( const char *, rtx));\n+static void dwarfout_end_function\tPARAMS ((unsigned int));\n static const char *dwarf_tag_name\tPARAMS ((unsigned));\n static const char *dwarf_attr_name\tPARAMS ((unsigned));\n static const char *dwarf_stack_op_name\tPARAMS ((unsigned));\n@@ -1379,7 +1382,10 @@ struct gcc_debug_hooks dwarf_debug_hooks =\n   dwarfout_start_source_file_check,\n   dwarfout_end_source_file_check,\n   dwarfout_begin_block,\n-  dwarfout_end_block\n+  dwarfout_end_block,\n+  dwarfout_source_line,\n+  dwarfout_end_epilogue,\n+  dwarfout_end_function\n };\n \f\n /************************ general utility functions **************************/\n@@ -5838,8 +5844,7 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n    for a lexical block.\t */\n \n static void\n-dwarfout_begin_block (file, line, blocknum)\n-     FILE *file ATTRIBUTE_UNUSED;\n+dwarfout_begin_block (line, blocknum)\n      unsigned int line ATTRIBUTE_UNUSED;\n      unsigned int blocknum;\n {\n@@ -5854,8 +5859,7 @@ dwarfout_begin_block (file, line, blocknum)\n    for a lexical block.\t */\n \n static void\n-dwarfout_end_block (file, line, blocknum)\n-     FILE *file ATTRIBUTE_UNUSED;\n+dwarfout_end_block (line, blocknum)\n      unsigned int line ATTRIBUTE_UNUSED;\n      unsigned int blocknum;\n {\n@@ -5885,8 +5889,9 @@ dwarfout_begin_function ()\n /* Output a marker (i.e. a label) for the point in the generated code where\n    the real body of the function ends (just before the epilogue code).  */\n \n-void\n-dwarfout_end_function ()\n+static void\n+dwarfout_end_function (line)\n+     unsigned int line ATTRIBUTE_UNUSED;\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n@@ -5901,7 +5906,7 @@ dwarfout_end_function ()\n    for a function definition.  This gets called *after* the epilogue code\n    has been generated.\t*/\n \n-void\n+static void\n dwarfout_end_epilogue ()\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n@@ -6053,11 +6058,13 @@ generate_srcinfo_entry (line_entry_num, files_entry_num)\n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n }\n \n-void\n-dwarfout_line (filename, line)\n-     register const char *filename;\n-     register unsigned line;\n+static void\n+dwarfout_source_line (filename, note)\n+     const char *filename;\n+     rtx note;\n {\n+  unsigned int line = NOTE_LINE_NUMBER (note);\n+\n   if (debug_info_level >= DINFO_LEVEL_NORMAL\n       /* We can't emit line number info for functions in separate sections,\n \t because the assembler can't subtract labels in different sections.  */\n@@ -6215,8 +6222,7 @@ dwarfout_undef (lineno, buffer)\n /* Set up for Dwarf output at the start of compilation.\t */\n \n static void\n-dwarfout_init (asm_out_file, main_input_filename)\n-     register FILE *asm_out_file;\n+dwarfout_init (main_input_filename)\n      register const char *main_input_filename;\n {\n   /* Remember the name of the primary input file.  */\n@@ -6405,8 +6411,7 @@ dwarfout_init (asm_out_file, main_input_filename)\n /* Output stuff that dwarf requires at the end of every file.  */\n \n static void\n-dwarfout_finish (asm_out_file, main_input_filename)\n-     register FILE *asm_out_file;\n+dwarfout_finish (main_input_filename)\n      register const char *main_input_filename ATTRIBUTE_UNUSED;\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];"}, {"sha": "bd4eaf3e6fcb392af0b55f8e9d325800cda4d917", "filename": "gcc/dwarfout.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdwarfout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fdwarfout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.h?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -21,8 +21,3 @@ Boston, MA 02111-1307, USA.  */\n extern void dwarfout_file_scope_decl \tPARAMS ((tree , int));\n \n extern void dwarfout_begin_function\tPARAMS ((void));\n-extern void dwarfout_end_function\tPARAMS ((void));\n-extern void dwarfout_begin_epilogue\tPARAMS ((void));\n-extern void dwarfout_end_epilogue\tPARAMS ((void));\n-\n-extern void dwarfout_line\t\tPARAMS ((const char *, unsigned));"}, {"sha": "83b2297cad36ad224816ceb82e74a0917b101397", "filename": "gcc/final.c", "status": "modified", "additions": 14, "deletions": 83, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -252,7 +252,7 @@ static void profile_function\tPARAMS ((FILE *));\n static void profile_after_prologue PARAMS ((FILE *));\n static void add_bb\t\tPARAMS ((FILE *));\n static int add_bb_string\tPARAMS ((const char *, int));\n-static void output_source_line\tPARAMS ((FILE *, rtx));\n+static void output_source_line\tPARAMS ((rtx));\n static rtx walk_alter_subreg\tPARAMS ((rtx));\n static void output_asm_name\tPARAMS ((void));\n static void output_operand\tPARAMS ((rtx, int));\n@@ -1606,7 +1606,7 @@ final_start_function (first, file, optimize)\n       /* But only output line number for other debug info types if -g2\n \t or better.  */\n       if (NOTE_LINE_NUMBER (first) != NOTE_INSN_DELETED)\n-\toutput_source_line (file, first);\n+\toutput_source_line (first);\n \n #ifdef LEAF_REG_REMAP\n   if (current_function_uses_only_leaf_regs)\n@@ -1757,52 +1757,24 @@ profile_function (file)\n    even though not all of them are needed.  */\n \n void\n-final_end_function (first, file, optimize)\n-     rtx first ATTRIBUTE_UNUSED;\n-     FILE *file ATTRIBUTE_UNUSED;\n-     int optimize ATTRIBUTE_UNUSED;\n+final_end_function ()\n {\n   app_disable ();\n \n-#ifdef SDB_DEBUGGING_INFO\n-  if (write_symbols == SDB_DEBUG)\n-    sdbout_end_function (high_function_linenum);\n-#endif\n-\n-#ifdef DWARF_DEBUGGING_INFO\n-  if (write_symbols == DWARF_DEBUG)\n-    dwarfout_end_function ();\n-#endif\n-\n-#ifdef XCOFF_DEBUGGING_INFO\n-  if (write_symbols == XCOFF_DEBUG)\n-    xcoffout_end_function (file, high_function_linenum);\n-#endif\n+  (*debug_hooks->end_function) (high_function_linenum);\n \n   /* Finally, output the function epilogue:\n      code to restore the stack frame and return to the caller.  */\n-  (*targetm.asm_out.function_epilogue) (file, get_frame_size ());\n+  (*targetm.asm_out.function_epilogue) (asm_out_file, get_frame_size ());\n \n-#ifdef SDB_DEBUGGING_INFO\n-  if (write_symbols == SDB_DEBUG)\n-    sdbout_end_epilogue ();\n-#endif\n+  /* And debug output.  */\n+  (*debug_hooks->end_epilogue) ();\n \n-#ifdef DWARF_DEBUGGING_INFO\n-  if (write_symbols == DWARF_DEBUG)\n-    dwarfout_end_epilogue ();\n-#endif\n-\n-#if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n-  if (dwarf2out_do_frame ())\n+#if defined (DWARF2_UNWIND_INFO)\n+  if (write_symbols != DWARF2_DEBUG && dwarf2out_do_frame ())\n     dwarf2out_end_epilogue ();\n #endif\n \n-#ifdef XCOFF_DEBUGGING_INFO\n-  if (write_symbols == XCOFF_DEBUG)\n-    xcoffout_end_epilogue (file);\n-#endif\n-\n   bb_func_label_num = -1;\t/* not in function, nuke label # */\n }\n \f\n@@ -2140,7 +2112,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t      high_block_linenum = last_linenum;\n \n \t      /* Output debugging info about the symbol-block beginning.  */\n-\t      (*debug_hooks->begin_block) (file, last_linenum, n);\n+\t      (*debug_hooks->begin_block) (last_linenum, n);\n \n \t      /* Mark this block as output.  */\n \t      TREE_ASM_WRITTEN (NOTE_BLOCK (insn)) = 1;\n@@ -2162,7 +2134,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t      if (block_depth < 0)\n \t\tabort ();\n \n-\t      (*debug_hooks->end_block) (file, high_block_linenum, n);\n+\t      (*debug_hooks->end_block) (high_block_linenum, n);\n \t    }\n \t  break;\n \n@@ -2219,7 +2191,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t    /* Output this line note if it is the first or the last line\n \t       note in a row.  */\n \t    if (!note_after)\n-\t      output_source_line (file, insn);\n+\t      output_source_line (insn);\n \t  }\n \t  break;\n \t}\n@@ -2934,8 +2906,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n    based on the NOTE-insn INSN, assumed to be a line number.  */\n \n static void\n-output_source_line (file, insn)\n-     FILE *file ATTRIBUTE_UNUSED;\n+output_source_line (insn)\n      rtx insn;\n {\n   register const char *filename = NOTE_SOURCE_FILE (insn);\n@@ -2953,47 +2924,7 @@ output_source_line (file, insn)\n   high_block_linenum = MAX (last_linenum, high_block_linenum);\n   high_function_linenum = MAX (last_linenum, high_function_linenum);\n \n-  if (write_symbols != NO_DEBUG)\n-    {\n-#ifdef SDB_DEBUGGING_INFO\n-      if (write_symbols == SDB_DEBUG\n-#if 0 /* People like having line numbers even in wrong file!  */\n-\t  /* COFF can't handle multiple source files--lose, lose.  */\n-\t  && !strcmp (filename, main_input_filename)\n-#endif\n-\t  /* COFF relative line numbers must be positive.  */\n-\t  && last_linenum > sdb_begin_function_line)\n-\t{\n-#ifdef ASM_OUTPUT_SOURCE_LINE\n-\t  ASM_OUTPUT_SOURCE_LINE (file, last_linenum);\n-#else\n-\t  fprintf (file, \"\\t.ln\\t%d\\n\",\n-\t\t   ((sdb_begin_function_line > -1)\n-\t\t    ? last_linenum - sdb_begin_function_line : 1));\n-#endif\n-\t}\n-#endif\n-\n-#if defined (DBX_DEBUGGING_INFO)\n-      if (write_symbols == DBX_DEBUG)\n-\tdbxout_source_line (file, filename, NOTE_LINE_NUMBER (insn));\n-#endif\n-\n-#if defined (XCOFF_DEBUGGING_INFO)\n-      if (write_symbols == XCOFF_DEBUG)\n-\txcoffout_source_line (file, filename, insn);\n-#endif\n-\n-#ifdef DWARF_DEBUGGING_INFO\n-      if (write_symbols == DWARF_DEBUG)\n-\tdwarfout_line (filename, NOTE_LINE_NUMBER (insn));\n-#endif\n-\n-#ifdef DWARF2_DEBUGGING_INFO\n-      if (write_symbols == DWARF2_DEBUG)\n-\tdwarf2out_line (filename, NOTE_LINE_NUMBER (insn));\n-#endif\n-    }\n+  (*debug_hooks->source_line) (filename, insn);\n }\n \f\n /* For each operand in INSN, simplify (subreg (reg)) so that it refers"}, {"sha": "93b94c41bc9108bff1d8011736f864b49b42f4e9", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -62,7 +62,7 @@ extern void final_start_function  PARAMS ((rtx, FILE *, int));\n /* Output assembler code for the end of a function.\n    For clarity, args are same as those of `final_start_function'\n    even though not all of them are needed.  */\n-extern void final_end_function  PARAMS ((rtx, FILE *, int));\n+extern void final_end_function  PARAMS ((void));\n \n /* Output assembler code for some insns: all or part of a function.  */\n extern void final\t\tPARAMS ((rtx, FILE *, int, int));\n@@ -374,13 +374,6 @@ extern void output_constant\t\tPARAMS ((tree, int));\n extern rtx final_sequence;\n #endif\n \n-/* The line number of the beginning of the current function.\n-   sdbout.c needs this so that it can output relative linenumbers.  */\n-\n-#ifdef SDB_DEBUGGING_INFO /* Avoid undef sym in certain broken linkers.  */\n-extern int sdb_begin_function_line;\n-#endif\n-\n /* File in which assembler code is being written.  */\n \n #ifdef BUFSIZ"}, {"sha": "1faffbede39264eb4e5920ede27ad2e44926a686", "filename": "gcc/sdbout.c", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -80,7 +80,7 @@ AT&T C compiler.  From the example below I would conclude the following:\n /* Line number of beginning of current function, minus one.\n    Negative means not in a function or not using sdb.  */\n \n-int sdb_begin_function_line = -1;\n+static int sdb_begin_function_line = -1;\n \n /* Counter to generate unique \"names\" for nameless struct members.  */\n \n@@ -92,11 +92,14 @@ extern tree current_function_decl;\n \n #include \"sdbout.h\"\n \n-static void sdbout_init\t\t\tPARAMS ((FILE *, const char *));\n+static void sdbout_init\t\t\tPARAMS ((const char *));\n static void sdbout_start_source_file\tPARAMS ((unsigned, const char *));\n static void sdbout_end_source_file\tPARAMS ((unsigned));\n-static void sdbout_begin_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n-static void sdbout_end_block\t\tPARAMS ((FILE *, unsigned, unsigned));\n+static void sdbout_begin_block\t\tPARAMS ((unsigned, unsigned));\n+static void sdbout_end_block\t\tPARAMS ((unsigned, unsigned));\n+static void sdbout_source_line\t\tPARAMS ((const char *, rtx));\n+static void sdbout_end_epilogue\t\tPARAMS ((void));\n+static void sdbout_end_function\t\tPARAMS ((unsigned int));\n static char *gen_fake_label\t\tPARAMS ((void));\n static int plain_type\t\t\tPARAMS ((tree));\n static int template_name_p\t\tPARAMS ((tree));\n@@ -225,15 +228,6 @@ do { fprintf (asm_out_file, \"\\t.tag\\t\");\t\\\n \t   SDB_DELIM, SDB_DELIM, SDB_DELIM, (LINE), SDB_DELIM)\n #endif\n \n-#ifndef PUT_SDB_EPILOGUE_END\n-#define PUT_SDB_EPILOGUE_END(NAME)\t\t\t\\\n-do { fprintf (asm_out_file, \"\\t.def\\t\");\t\t\\\n-     assemble_name (asm_out_file, NAME);\t\t\\\n-     fprintf (asm_out_file,\t\t\t\t\\\n-\t      \"%s\\t.val\\t.%s\\t.scl\\t-1%s\\t.endef\\n\",\t\\\n-\t      SDB_DELIM, SDB_DELIM, SDB_DELIM); } while (0)\n-#endif\n-\n #ifndef SDB_GENERATE_FAKE\n #define SDB_GENERATE_FAKE(BUFFER, NUMBER) \\\n   sprintf ((BUFFER), \".%dfake\", (NUMBER));\n@@ -297,13 +291,16 @@ static struct sdb_file *current_file;\n struct gcc_debug_hooks sdb_debug_hooks =\n {\n   sdbout_init,\n-  debug_nothing_file_charstar,\n+  debug_nothing_charstar,\n   debug_nothing_int_charstar,\n   debug_nothing_int_charstar,\n   sdbout_start_source_file,\n   sdbout_end_source_file,\n   sdbout_begin_block,\n-  sdbout_end_block\n+  sdbout_end_block,\n+  sdbout_source_line,\n+  sdbout_end_epilogue,\n+  sdbout_end_function\n };\n \f\n #if 0\n@@ -1471,8 +1468,7 @@ sdbout_reg_parms (parms)\n    if the count starts at 0 for the outermost one.  */\n \n static void\n-sdbout_begin_block (file, line, n)\n-     FILE *file ATTRIBUTE_UNUSED;\n+sdbout_begin_block (line, n)\n      unsigned int line;\n      unsigned int n;\n {\n@@ -1508,9 +1504,8 @@ sdbout_begin_block (file, line, n)\n \n /* Describe the end line-number of an internal block within a function.  */\n \n-void\n-sdbout_end_block (file, line, n)\n-     FILE *file ATTRIBUTE_UNUSED;\n+static void\n+sdbout_end_block (line, n)\n      unsigned int line;\n      unsigned int n ATTRIBUTE_UNUSED;\n {\n@@ -1525,6 +1520,26 @@ sdbout_end_block (file, line, n)\n   PUT_SDB_BLOCK_END (line - sdb_begin_function_line);\n }\n \n+static void\n+sdbout_source_line (filename, note)\n+     const char *filename ATTRIBUTE_UNUSED;\n+     rtx note;\n+{\n+  unsigned int line = NOTE_LINE_NUMBER (note);\n+\n+  /* COFF relative line numbers must be positive.  */\n+  if (line > sdb_begin_function_line)\n+    {\n+#ifdef ASM_OUTPUT_SOURCE_LINE\n+      ASM_OUTPUT_SOURCE_LINE (asm_out_file, line);\n+#else\n+      fprintf (asm_out_file, \"\\t.ln\\t%d\\n\",\n+\t       ((sdb_begin_function_line > -1)\n+\t\t? line - sdb_begin_function_line : 1));\n+#endif\n+    }\n+}\n+\n /* Output sdb info for the current function name.\n    Called from assemble_start_function.  */\n \n@@ -1553,9 +1568,9 @@ sdbout_begin_function (line)\n /* Called at end of function (before epilogue).\n    Describe end of outermost block.  */\n \n-void\n+static void\n sdbout_end_function (line)\n-     int line;\n+     unsigned int line;\n {\n #ifdef SDB_ALLOW_FORWARD_REFERENCES\n   sdbout_dequeue_anonymous_types ();\n@@ -1571,11 +1586,20 @@ sdbout_end_function (line)\n /* Output sdb info for the absolute end of a function.\n    Called after the epilogue is output.  */\n \n-void\n+static void\n sdbout_end_epilogue ()\n {\n-  PUT_SDB_EPILOGUE_END\n-    (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl)));\n+  const char *name\n+    = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl));\n+\n+#ifdef PUT_SDB_EPILOGUE_END\n+  PUT_SDB_EPILOGUE_END (name);\n+#else\n+  fprintf (asm_out_file, \"\\t.def\\t\");\n+  assemble_name (asm_out_file, name);\n+  fprintf (asm_out_file, \"%s\\t.val\\t.%s\\t.scl\\t-1%s\\t.endef\\n\",\n+\t   SDB_DELIM, SDB_DELIM, SDB_DELIM);\n+#endif\n }\n \n /* Output sdb info for the given label.  Called only if LABEL_NAME (insn)\n@@ -1628,8 +1652,7 @@ sdbout_end_source_file (line)\n /* Set up for SDB output at the start of compilation.  */\n \n static void\n-sdbout_init (asm_file, input_file_name)\n-     FILE *asm_file ATTRIBUTE_UNUSED;\n+sdbout_init (input_file_name)\n      const char *input_file_name ATTRIBUTE_UNUSED;\n {\n #ifdef MIPS_DEBUGGING_INFO"}, {"sha": "5a5ca8f8dcd66678c2bcab18cf6990662e67746b", "filename": "gcc/sdbout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fsdbout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fsdbout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.h?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -19,14 +19,11 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n extern void sdbout_begin_function\tPARAMS ((int));\n-extern void sdbout_end_function\t\tPARAMS ((int));\n \n extern void sdbout_label\t\tPARAMS ((rtx));\n extern void sdbout_symbol\t\tPARAMS ((tree, int));\n extern void sdbout_toplevel_data\tPARAMS ((tree));\n extern void sdbout_types\t\tPARAMS ((tree));\n \n-extern void sdbout_end_epilogue\t\tPARAMS ((void));\n-\n extern void sdbout_mark_begin_function\tPARAMS ((void));\n "}, {"sha": "e63fc47db67c9db3b6da7ea71cc2db4c465f166d", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -2343,7 +2343,7 @@ compile_file (name)\n     dwarf2out_frame_init ();\n #endif\n \n-  (*debug_hooks->init) (asm_out_file, main_input_filename);\n+  (*debug_hooks->init) (main_input_filename);\n   timevar_pop (TV_SYMOUT);\n \n   /* Initialize yet another pass.  */\n@@ -2422,7 +2422,7 @@ compile_file (name)\n     dwarf2out_frame_finish ();\n #endif\n \n-  (*debug_hooks->finish) (asm_out_file, main_input_filename);\n+  (*debug_hooks->finish) (main_input_filename);\n   timevar_pop (TV_SYMOUT);\n \n   /* Output some stuff at end of file if nec.  */\n@@ -3752,7 +3752,7 @@ rest_of_compilation (decl)\n     assemble_start_function (decl, fnname);\n     final_start_function (insns, asm_out_file, optimize);\n     final (insns, asm_out_file, optimize, 0);\n-    final_end_function (insns, asm_out_file, optimize);\n+    final_end_function ();\n \n #ifdef IA64_UNWIND_INFO\n     /* ??? The IA-64 \".handlerdata\" directive must be issued before"}, {"sha": "657b9712676dc555dafddee157dc2d814ef6101d", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -2924,10 +2924,6 @@ extern void dwarf2out_return_reg\tPARAMS ((const char *, unsigned));\n \n extern void dwarf2out_begin_prologue\tPARAMS ((void));\n \n-/* Output a marker (i.e. a label) for the absolute end of the generated\n-   code for a function definition.  */\n-\n-extern void dwarf2out_end_epilogue\tPARAMS ((void));\n \f\n /* Redefine abort to report an internal error w/o coredump, and\n    reporting the location of the error in the source file.  This logic"}, {"sha": "e8dd43ff1cfab4293a6cf99ed25df739300607b9", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -308,14 +308,13 @@ xcoffout_source_file (file, filename, inline_p)\n    for source file FILENAME and line number NOTE.  */\n \n void\n-xcoffout_source_line (file, filename, note)\n-     FILE *file;\n+xcoffout_source_line (filename, note)\n      const char *filename;\n      rtx note;\n {\n-  xcoffout_source_file (file, filename, RTX_INTEGRATED_P (note));\n+  xcoffout_source_file (asm_out_file, filename, RTX_INTEGRATED_P (note));\n \n-  ASM_OUTPUT_SOURCE_LINE (file, NOTE_LINE_NUMBER (note));\n+  ASM_OUTPUT_SOURCE_LINE (asm_out_file, NOTE_LINE_NUMBER (note));\n }\n \f\n /* Output the symbols defined in block number DO_BLOCK.\n@@ -368,17 +367,16 @@ xcoffout_block (block, depth, args)\n    if the count starts at 0 for the outermost one.  */\n \n void\n-xcoffout_begin_block (file, line, n)\n-     FILE *file;\n-     int line;\n-     int n;\n+xcoffout_begin_block (line, n)\n+     unsigned int line;\n+     unsigned int n;\n {\n   tree decl = current_function_decl;\n \n   /* The IBM AIX compiler does not emit a .bb for the function level scope,\n      so we avoid it here also.  */\n   if (n != 1)\n-    ASM_OUTPUT_LBB (file, line, n);\n+    ASM_OUTPUT_LBB (asm_out_file, line, n);\n \n   do_block = n;\n   xcoffout_block (DECL_INITIAL (decl), 0, DECL_ARGUMENTS (decl));\n@@ -387,13 +385,12 @@ xcoffout_begin_block (file, line, n)\n /* Describe the end line-number of an internal block within a function.  */\n \n void\n-xcoffout_end_block (file, line, n)\n-     FILE *file;\n-     int line;\n-     int n;\n+xcoffout_end_block (line, n)\n+     unsigned int line;\n+     unsigned int n;\n {\n   if (n != 1)\n-    ASM_OUTPUT_LBE (file, line, n);\n+    ASM_OUTPUT_LBE (asm_out_file, line, n);\n }\n \n /* Called at beginning of function (before prologue).\n@@ -462,19 +459,17 @@ xcoffout_begin_function (file, last_linenum)\n    Describe end of outermost block.  */\n \n void\n-xcoffout_end_function (file, last_linenum)\n-     FILE *file;\n-     int last_linenum;\n+xcoffout_end_function (last_linenum)\n+     unsigned int last_linenum;\n {\n-  ASM_OUTPUT_LFE (file, last_linenum);\n+  ASM_OUTPUT_LFE (asm_out_file, last_linenum);\n }\n \n /* Output xcoff info for the absolute end of a function.\n    Called after the epilogue is output.  */\n \n void\n-xcoffout_end_epilogue (file)\n-     FILE *file;\n+xcoffout_end_epilogue ()\n {\n   /* We need to pass the correct function size to .function, otherwise,\n      the xas assembler can't figure out the correct size for the function\n@@ -484,7 +479,7 @@ xcoffout_end_epilogue (file)\n   const char *fname = XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0);\n   if (*fname == '*')\n     ++fname;\n-  fprintf (file, \"FE..\");\n-  ASM_OUTPUT_LABEL (file, fname);\n+  fprintf (asm_out_file, \"FE..\");\n+  ASM_OUTPUT_LABEL (asm_out_file, fname);\n }\n #endif /* XCOFF_DEBUGGING_INFO */"}, {"sha": "a7cfe63c020636aece7d313b0c859dad9039d8ac", "filename": "gcc/xcoffout.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fxcoffout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a12aca42db7657d00b43ef76606e208159273d/gcc%2Fxcoffout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.h?ref=e2a12aca42db7657d00b43ef76606e208159273d", "patch": "@@ -200,10 +200,10 @@ extern const char *xcoff_lastfile;\n extern int stab_to_sclass\t\t\tPARAMS ((int));\n #ifdef BUFSIZ\n extern void xcoffout_begin_function\t\tPARAMS ((FILE *, int));\n-extern void xcoffout_begin_block\t\tPARAMS ((FILE *, int, int));\n-extern void xcoffout_end_epilogue\t\tPARAMS ((FILE *));\n-extern void xcoffout_end_function\t\tPARAMS ((FILE *, int));\n-extern void xcoffout_end_block\t\t\tPARAMS ((FILE *, int, int));\n+extern void xcoffout_begin_block\t\tPARAMS ((unsigned, unsigned));\n+extern void xcoffout_end_epilogue\t\tPARAMS ((void));\n+extern void xcoffout_end_function\t\tPARAMS ((unsigned int));\n+extern void xcoffout_end_block\t\t\tPARAMS ((unsigned, unsigned));\n #endif /* BUFSIZ */\n \n #ifdef TREE_CODE\n@@ -215,6 +215,6 @@ extern void xcoffout_declare_function\t\tPARAMS ((FILE *, tree, const char *));\n \n #ifdef RTX_CODE\n #ifdef BUFSIZ\n-extern void xcoffout_source_line\t\tPARAMS ((FILE *, const char *, rtx));\n+extern void xcoffout_source_line\t\tPARAMS ((const char *, rtx));\n #endif /* BUFSIZ */\n #endif /* RTX_CODE */"}]}