{"sha": "360f866c16da467d7851b72b3d9c6c3fd1653721", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYwZjg2NmMxNmRhNDY3ZDc4NTFiNzJiM2Q5YzZjM2ZkMTY1MzcyMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-11-23T20:49:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-23T20:49:02Z"}, "message": "re PR c++/30293 (ICE with extern \"Java\" in store_init_value)\n\n\tPR c++/30293\n\tPR c++/30294\n\t* decl.c (cp_finish_decl): Disallow variable or field\n\tdefinitions if extern \"Java\" aggregates.\n\t(grokparms): Disallow parameters with extern \"Java\"\n\taggregates.\n\t(check_function_type): Disallow function return values\n\twith extern \"Java\" aggregates.\n\t* init.c (build_new_1): Disallow placement new with\n\textern \"Java\" aggregates.\n\n\t* g++.dg/ext/java-2.C: New test.\n\nFrom-SVN: r130382", "tree": {"sha": "025c9ee6f18eef0c2f493c4725f5fb7431ae2dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/025c9ee6f18eef0c2f493c4725f5fb7431ae2dd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/360f866c16da467d7851b72b3d9c6c3fd1653721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/360f866c16da467d7851b72b3d9c6c3fd1653721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/360f866c16da467d7851b72b3d9c6c3fd1653721", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/360f866c16da467d7851b72b3d9c6c3fd1653721/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ca39fcbf6eb51d39d84916a4c742e20bb2c91e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca39fcbf6eb51d39d84916a4c742e20bb2c91e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca39fcbf6eb51d39d84916a4c742e20bb2c91e0"}], "stats": {"total": 138, "additions": 136, "deletions": 2}, "files": [{"sha": "90382709914f037bb7e72f735932d13e1dbf5004", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360f866c16da467d7851b72b3d9c6c3fd1653721/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360f866c16da467d7851b72b3d9c6c3fd1653721/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=360f866c16da467d7851b72b3d9c6c3fd1653721", "patch": "@@ -1,3 +1,16 @@\n+2007-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/30293\n+\tPR c++/30294\n+\t* decl.c (cp_finish_decl): Disallow variable or field\n+\tdefinitions if extern \"Java\" aggregates.\n+\t(grokparms): Disallow parameters with extern \"Java\"\n+\taggregates.\n+\t(check_function_type): Disallow function return values\n+\twith extern \"Java\" aggregates.\n+\t* init.c (build_new_1): Disallow placement new with\n+\textern \"Java\" aggregates.\n+\n 2007-11-23  Mark Mitchell  <mark@codesourcery.com>\n \t    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \t"}, {"sha": "f020c270f89d34f34eb0ba6e7a1d299084745b6e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360f866c16da467d7851b72b3d9c6c3fd1653721/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360f866c16da467d7851b72b3d9c6c3fd1653721/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=360f866c16da467d7851b72b3d9c6c3fd1653721", "patch": "@@ -5468,6 +5468,20 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t     is *not* defined.  */\n \t  && (!DECL_EXTERNAL (decl) || init))\n \t{\n+\t  if (TYPE_FOR_JAVA (type) && IS_AGGR_TYPE (type))\n+\t    {\n+\t      tree jclass\n+\t\t= IDENTIFIER_GLOBAL_VALUE (get_identifier (\"jclass\"));\n+\t      /* Allow libjava/prims.cc define primitive classes.  */\n+\t      if (init != NULL_TREE\n+\t\t  || jclass == NULL_TREE\n+\t\t  || TREE_CODE (jclass) != TYPE_DECL\n+\t\t  || !POINTER_TYPE_P (TREE_TYPE (jclass))\n+\t\t  || !same_type_ignoring_top_level_qualifiers_p\n+\t\t\t\t\t(type, TREE_TYPE (TREE_TYPE (jclass))))\n+\t\terror (\"Java object %qD not allocated with %<new%>\", decl);\n+\t      init = NULL_TREE;\n+\t    }\n \t  if (init)\n \t    {\n \t      DECL_NONTRIVIALLY_INITIALIZED_P (decl) = 1;\n@@ -5538,6 +5552,9 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       else if (TREE_CODE (type) == ARRAY_TYPE)\n \tlayout_type (type);\n     }\n+  else if (TREE_CODE (decl) == FIELD_DECL\n+\t   && TYPE_FOR_JAVA (type) && IS_AGGR_TYPE (type))\n+    error (\"non-static data member %qD has Java class type\", decl);\n \n   /* Add this declaration to the statement-tree.  This needs to happen\n      after the call to check_initializer so that the DECL_EXPR for a\n@@ -9328,6 +9345,16 @@ grokparms (cp_parameter_declarator *first_parm, tree *parms)\n \t  TREE_TYPE (decl) = error_mark_node;\n \t}\n \n+      if (type != error_mark_node\n+\t  && TYPE_FOR_JAVA (type)\n+\t  && IS_AGGR_TYPE (type))\n+\t{\n+\t  error (\"parameter %qD has Java class type\", decl);\n+\t  type = error_mark_node;\n+\t  TREE_TYPE (decl) = error_mark_node;\n+\t  init = NULL_TREE;\n+\t}\n+\n       if (type != error_mark_node)\n \t{\n \t  /* Top-level qualifiers on the parameters are\n@@ -10914,11 +10941,15 @@ check_function_type (tree decl, tree current_function_parms)\n \n   if (dependent_type_p (return_type))\n     return;\n-  if (!COMPLETE_OR_VOID_TYPE_P (return_type))\n+  if (!COMPLETE_OR_VOID_TYPE_P (return_type)\n+      || (TYPE_FOR_JAVA (return_type) && IS_AGGR_TYPE (return_type)))\n     {\n       tree args = TYPE_ARG_TYPES (fntype);\n \n-      error (\"return type %q#T is incomplete\", return_type);\n+      if (!COMPLETE_OR_VOID_TYPE_P (return_type))\n+\terror (\"return type %q#T is incomplete\", return_type);\n+      else\n+\terror (\"return type has Java class type %q#T\", return_type);\n \n       /* Make it return void instead.  */\n       if (TREE_CODE (fntype) == METHOD_TYPE)"}, {"sha": "202f3b68ebbdf14e65c7783c5af96072debe69b2", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360f866c16da467d7851b72b3d9c6c3fd1653721/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360f866c16da467d7851b72b3d9c6c3fd1653721/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=360f866c16da467d7851b72b3d9c6c3fd1653721", "patch": "@@ -1786,6 +1786,11 @@ build_new_1 (tree placement, tree type, tree nelts, tree init,\n \t\t    (alloc_fn,\n \t\t     build_tree_list (NULL_TREE, class_addr)));\n     }\n+  else if (TYPE_FOR_JAVA (elt_type))\n+    {\n+      error (\"Java class %q#T object allocated using placement new\", elt_type);\n+      return error_mark_node;\n+    }\n   else\n     {\n       tree fnname;"}, {"sha": "6bd778a3bacccc09713e3befb616262e418b43a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360f866c16da467d7851b72b3d9c6c3fd1653721/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360f866c16da467d7851b72b3d9c6c3fd1653721/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=360f866c16da467d7851b72b3d9c6c3fd1653721", "patch": "@@ -1,3 +1,9 @@\n+2007-11-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/30293\n+\tPR c++/30294\n+\t* g++.dg/ext/java-2.C: New test.\n+\n 2007-11-23  Mark Mitchell  <mark@codesourcery.com>\n \t    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \t"}, {"sha": "4015f00e29f4c6402a6f43cea8766abd63e901fd", "filename": "gcc/testsuite/g++.dg/ext/java-2.C", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/360f866c16da467d7851b72b3d9c6c3fd1653721/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fjava-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/360f866c16da467d7851b72b3d9c6c3fd1653721/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fjava-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fjava-2.C?ref=360f866c16da467d7851b72b3d9c6c3fd1653721", "patch": "@@ -0,0 +1,79 @@\n+// PR c++/30293\n+// PR c++/30294\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+extern \"Java\" {\n+typedef __java_byte jbyte;\n+namespace java {\n+namespace lang {\n+  class Object {};\n+  class Class {};\n+}\n+}\n+typedef struct java::lang::Object* jobject;\n+typedef java::lang::Class *jclass;\n+}\n+extern \"C\" jobject _Jv_AllocObject (jclass);\n+\n+extern \"Java\" {\n+  struct A { static java::lang::Class class$; };\n+}\n+\n+struct B {\n+  A a;\t\t// { dg-error \"has Java class type\" }\n+};\n+\n+void* operator new (__SIZE_TYPE__, void*) throw();\n+char buf[1024];\n+\n+A a;\t\t// { dg-error \"not allocated with\" }\n+A b = A ();\t// { dg-error \"not allocated with\" }\n+A *c = new ((void *) buf) A ();\t// { dg-error \"using placement new\" }\n+A *d = new A ();\n+jbyte e = 6;\n+\n+const A fn1 ()\t// { dg-error \"return type has Java class type\" }\n+{\n+  A a;\t\t// { dg-error \"not allocated with\" }\n+  return a;\n+}\n+\n+A fn2 ()\t// { dg-error \"return type has Java class type\" }\n+{\n+  A a;\t\t// { dg-error \"not allocated with\" }\n+  return a;\n+}\n+\n+A *fn3 ()\n+{\n+  return new A ();\n+}\n+\n+A &fn4 ()\n+{\n+  return *c;\n+}\n+\n+jbyte fn5 ()\n+{\n+  return 7;\n+}\n+\n+void fn6 (A x)\t// { dg-error \"has Java class type\" }\n+{\n+}\n+\n+void fn7 (const A x)\t// { dg-error \"has Java class type\" }\n+{\n+}\n+\n+void fn8 (A *x)\n+{\n+  (void) x;\n+}\n+\n+void fn9 (jbyte x)\n+{\n+  (void) x;\n+}"}]}