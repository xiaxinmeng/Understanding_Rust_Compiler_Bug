{"sha": "394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0ZDNhMmU4ZGVkYjlmZDk1YmI4MmJmMTY0N2I3YjQ0NWZmNDFjMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-07-19T16:46:02Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-07-19T16:46:02Z"}, "message": "expr.c (gfc_is_coarray): New function.\n\n2011-07-19  Tobias Burnus  <burnus@net-b.de>\n\n        * expr.c (gfc_is_coarray): New function.\n        * gfortran.h (gfc_is_coarray): New prototype.\n        * interface.c (compare_parameter): Use it.\n\n2011-07-19  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_args_1.f90: New.\n        * gfortran.dg/coarray_args_2.f90: New.\n\nFrom-SVN: r176467", "tree": {"sha": "baf3e502e46310d6a93f6c8c323e08c5eec38cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baf3e502e46310d6a93f6c8c323e08c5eec38cbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9dafd06325174321a2d27627b9fe65ad6515d750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dafd06325174321a2d27627b9fe65ad6515d750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dafd06325174321a2d27627b9fe65ad6515d750"}], "stats": {"total": 201, "additions": 166, "deletions": 35}, "files": [{"sha": "bf911123455a3c10071688566b0616f25e66eb78", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "patch": "@@ -1,3 +1,9 @@\n+2011-07-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* expr.c (gfc_is_coarray): New function.\n+\t* gfortran.h (gfc_is_coarray): New prototype.\n+\t* interface.c (compare_parameter): Use it.\n+\n 2011-07-19  Richard Guenther  <rguenther@suse.de>\n \n \t* trans-expr.c (fill_with_spaces): Use fold_build_pointer_plus."}, {"sha": "e5394b876df3d9f719e903e172d9bf069ab68eef", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "patch": "@@ -4154,6 +4154,73 @@ gfc_is_coindexed (gfc_expr *e)\n }\n \n \n+/* Coarrays are variables with a corank but not being coindexed. However, also\n+   the following is a coarray: A subobject of a coarray is a coarray if it does\n+   not have any cosubscripts, vector subscripts, allocatable component\n+   selection, or pointer component selection. (F2008, 2.4.7)  */\n+\n+bool\n+gfc_is_coarray (gfc_expr *e)\n+{\n+  gfc_ref *ref;\n+  gfc_symbol *sym;\n+  gfc_component *comp;\n+  bool coindexed;\n+  bool coarray;\n+  int i;\n+\n+  if (e->expr_type != EXPR_VARIABLE)\n+    return false;\n+\n+  coindexed = false;\n+  sym = e->symtree->n.sym;\n+\n+  if (sym->ts.type == BT_CLASS && sym->attr.class_ok)\n+    coarray = CLASS_DATA (sym)->attr.codimension;\n+  else\n+    coarray = sym->attr.codimension;\n+\n+  for (ref = e->ref; ref; ref = ref->next)\n+    switch (ref->type)\n+    {\n+      case REF_COMPONENT:\n+\tcomp = ref->u.c.component;\n+        if (comp->attr.pointer || comp->attr.allocatable)\n+\t  {\n+\t    coindexed = false;\n+\t    if (comp->ts.type == BT_CLASS && comp->attr.class_ok)\n+\t      coarray = CLASS_DATA (comp)->attr.codimension;\n+\t    else\n+\t      coarray = comp->attr.codimension;\n+\t  }\n+        break;\n+\n+     case REF_ARRAY:\n+\tif (!coarray)\n+\t  break;\n+\n+\tif (ref->u.ar.codimen > 0 && !gfc_ref_this_image (ref))\n+\t  {\n+\t    coindexed = true;\n+\t    break;\n+\t  }\n+\n+\tfor (i = 0; i < ref->u.ar.dimen; i++)\n+\t  if (ref->u.ar.dimen_type[i] == DIMEN_VECTOR)\n+\t    {\n+\t      coarray = false;\n+\t      break;\n+\t    }\n+\tbreak;\n+\n+     case REF_SUBSTRING:\n+\tbreak;\n+    }\n+\n+  return coarray && !coindexed;\n+}\n+\n+\n int\n gfc_get_corank (gfc_expr *e)\n {"}, {"sha": "acb54004e9d8159992d360839fd6b98e7ff6fadd", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "patch": "@@ -2735,6 +2735,7 @@ bool gfc_is_proc_ptr_comp (gfc_expr *, gfc_component **);\n \n bool gfc_ref_this_image (gfc_ref *ref);\n bool gfc_is_coindexed (gfc_expr *);\n+bool gfc_is_coarray (gfc_expr *);\n int gfc_get_corank (gfc_expr *);\n bool gfc_has_ultimate_allocatable (gfc_expr *);\n bool gfc_has_ultimate_pointer (gfc_expr *);"}, {"sha": "482a75e6fe0f106bf248676423a4345c8adf1102", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 17, "deletions": 35, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "patch": "@@ -1557,47 +1557,26 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t}\n     }\n \n-  if (formal->attr.codimension)\n+  if (formal->attr.codimension && !gfc_is_coarray (actual))\n     {\n-      gfc_ref *last = NULL;\n-\n-      if (actual->expr_type != EXPR_VARIABLE\n-\t  || !gfc_expr_attr (actual).codimension)\n-\t{\n-\t  if (where)\n-\t    gfc_error (\"Actual argument to '%s' at %L must be a coarray\",\n+      if (where)\n+\tgfc_error (\"Actual argument to '%s' at %L must be a coarray\",\n \t\t       formal->name, &actual->where);\n-\t  return 0;\n-\t}\n+      return 0;\n+    }\n \n-      if (gfc_is_coindexed (actual))\n-\t{\n-\t  if (where)\n-\t    gfc_error (\"Actual argument to '%s' at %L must be a coarray \"\n-\t\t       \"and not coindexed\", formal->name, &actual->where);\n-\t  return 0;\n-\t}\n+  if (formal->attr.codimension && formal->attr.allocatable)\n+    {\n+      gfc_ref *last = NULL;\n \n       for (ref = actual->ref; ref; ref = ref->next)\n-\t{\n-\t  if (ref->type == REF_ARRAY && ref->u.ar.as->corank\n-\t      && ref->u.ar.type != AR_FULL && ref->u.ar.dimen != 0)\n-\t    {\n-\t      if (where)\n-\t\tgfc_error (\"Actual argument to '%s' at %L must be a coarray \"\n-\t\t\t   \"and thus shall not have an array designator\",\n-\t\t\t   formal->name, &ref->u.ar.where);\n-\t      return 0;\n-\t    }\n-\t  if (ref->type == REF_COMPONENT)\n-\t    last = ref;\n-\t}\n+\tif (ref->type == REF_COMPONENT)\n+\t  last = ref;\n \n       /* F2008, 12.5.2.6.  */\n-      if (formal->attr.allocatable &&\n-\t  ((last && last->u.c.component->as->corank != formal->as->corank)\n-\t   || (!last\n-\t       && actual->symtree->n.sym->as->corank != formal->as->corank)))\n+      if ((last && last->u.c.component->as->corank != formal->as->corank)\n+\t  || (!last\n+\t      && actual->symtree->n.sym->as->corank != formal->as->corank))\n \t{\n \t  if (where)\n \t    gfc_error (\"Corank mismatch in argument '%s' at %L (%d and %d)\",\n@@ -1606,7 +1585,10 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t\t\t: actual->symtree->n.sym->as->corank);\n \t  return 0;\n \t}\n+    }\n \n+  if (formal->attr.codimension)\n+    {\n       /* F2008, 12.5.2.8.  */\n       if (formal->attr.dimension\n \t  && (formal->attr.contiguous || formal->as->type != AS_ASSUMED_SHAPE)\n@@ -1633,7 +1615,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t\t       formal->name, &actual->where);\n \t  return 0;\n \t}\n-      }\n+    }\n \n   /* F2008, C1239/C1240.  */\n   if (actual->expr_type == EXPR_VARIABLE"}, {"sha": "1216d41ff435089e65f8c3939fc80263c81d9630", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "patch": "@@ -1,3 +1,8 @@\n+2011-07-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_args_1.f90: New.\n+\t* gfortran.dg/coarray_args_2.f90: New.\n+\n 2011-07-19  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/49708"}, {"sha": "0a3cada90d2b0c9a5ffb01ec99df98f7ce0f78eb", "filename": "gcc/testsuite/gfortran.dg/coarray_args_1.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_args_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_args_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_args_1.f90?ref=394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! Argument checking\n+!\n+  implicit none\n+  type t\n+    integer :: i\n+    integer,allocatable :: j\n+  end type t\n+\n+  type(t), save :: x[*]\n+\n+  call sub1(x%i)\n+  call sub1(x[1]%i) ! { dg-error \"must be a coarray\" }\n+contains\n+  subroutine sub1(y)\n+    integer :: y[*]\n+  end subroutine sub1\n+end"}, {"sha": "66a5a921c66e22dc04e99d7654c8e7453025f205", "filename": "gcc/testsuite/gfortran.dg/coarray_args_2.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_args_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_args_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_args_2.f90?ref=394d3a2e8dedb9fd95bb82bf1647b7b445ff41c3", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! Check argument passing.\n+! Taken from Reinhold Bader's fortran_tests.\n+! \n+\n+module mod_rank_mismatch_02\n+  implicit none\n+  integer, parameter :: ndim = 2\n+contains\n+  subroutine subr(n,w)\n+    integer :: n\n+    real :: w(n,*)[*] \n+\n+    integer :: k, x\n+\n+    if (this_image() == 0) then\n+       x = 1.0\n+       do k = 1, num_images() \n+           if (abs(w(2,1)[k] - x) > 1.0e-5) then\n+              write(*, *) 'FAIL'\n+              error stop\n+           end if\n+           x = x + 1.0\n+       end do\n+    end if\n+\n+  end subroutine\n+end module\n+\n+program rank_mismatch_02\n+  use mod_rank_mismatch_02\n+  implicit none\n+  real :: a(ndim,2)[*]\n+\n+  a = 0.0\n+  a(2,2) = 1.0 * this_image() \n+\n+  sync all\n+\n+  call subr(ndim, a(1:1,2)) ! OK\n+  call subr(ndim, a(1,2)) ! { dg-error \"must be simply contiguous\" }\n+                          ! See also F08/0048 and PR 45859 about the validity\n+  if (this_image() == 1) then\n+     write(*, *) 'OK'\n+  end if\n+end program\n+\n+! { dg-final { cleanup-modules \"mod_rank_mismatch_02\" } }"}]}