{"sha": "5f59ecb70068d9c617519ae4823a3e96647f686c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1OWVjYjcwMDY4ZDljNjE3NTE5YWU0ODIzYTNlOTY2NDdmNjg2Yw==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-08-02T20:20:12Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1999-08-02T20:20:12Z"}, "message": "[multiple changes]\n\nMon Aug  2 16:15:57 1999  David Edelsohn  <edelsohn@gnu.org>\n\n\t* rs6000/aix43.h (SUBTARGET_SWITCHES): Use -m64 and -m32 instead of\n\t-maix64 and -maix32.\n\t(ASM_SPEC, ASM_CPU_SPEC, CPP_SPEC, CPP_CPU_SPEC, LIB_SPEC,\n\tLINK_SPEC): Change appropriately.\n\t* rs6000/rs6000.c (short_cint_operand): Use CONST_OK_FOR_LETTER_P.\n\t(u_short_cint_operand): Likewise.\n\t* rs6000/rs6000.md (movdi splitters): Add TARGET_POWERPC64 support\n\tfor 64-bit hosts.\n\t* rs6000/t-aix43 (MULTILIB): Change to -m64.\n\n\t* invoke.texi (RS/6000 Submodel): Document 64-bit processor options.\n\nMon Aug  2 16:15:57 1999  Geoff Keating  <geoffk@cygnus.com>\n\n\t* rs6000/rs6000.c (num_insns_constant_wide): Correct\n\tfor type promotion.\n\t(add_operand): Get test correct for 64-bit HOST_WIDE_INT.\n\t(non_add_cint_operand): Likewise.\n\t(logical_operand): Likewise.\n\t(non_logical_cint_operand): Likewise.\n\t(print_operand): Correct printf()s for 64-bit HOST_WIDE_INT.\n\t(print_operand_address): Correct printf() for 64-bit HOST_WIDE_INT.\n\t(rs6000_select_rtx_section): Suppress warning.\n\t(small_data_operand): Suppress warning.\n\t(rs6000_got_register): Suppress warning.\n\t* rs6000/rs6000.md (andsi3): HOST_WIDE_INT is a signed\n\ttype, so `J' is generally the wrong constraint for a SImode value;\n\tuse `L' instead.\n\t(andsi3_internal2): Likewise.\n\t(andsi3_internal3): Likewise.\n\t(iorsi3_internal1): Likewise.\n\t(xorsi3_internal1): Likewise.\n\t(movsi): Likewise.\n\t(movsf_softfloat): Likewise.\n\t(scc insns): Likewise.\n\t(movsi+2): Preserve sign bits of SImode constant.\n\t(floatsidf2_internal+1): Sign-extend SImode constant correctly.\n\t(movdf+1): Sign-extend properly.\n\t(movdi_32+1): Sign-extend properly.\n\t(scc insns): Sign-extend properly.\n\n\t* md.texi (RS/6000 EXTRA_CONSTRAINTS): Update documentation for J,\n\tK, L, and T.\n\nFrom-SVN: r28406", "tree": {"sha": "13b7623b92d56dc3916c41d02b918c2d6815130d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13b7623b92d56dc3916c41d02b918c2d6815130d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f59ecb70068d9c617519ae4823a3e96647f686c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f59ecb70068d9c617519ae4823a3e96647f686c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f59ecb70068d9c617519ae4823a3e96647f686c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f59ecb70068d9c617519ae4823a3e96647f686c/comments", "author": null, "committer": null, "parents": [{"sha": "981a828ea13437f11a9b4e0dd0fce40d5fe04e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981a828ea13437f11a9b4e0dd0fce40d5fe04e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/981a828ea13437f11a9b4e0dd0fce40d5fe04e99"}], "stats": {"total": 384, "additions": 249, "deletions": 135}, "files": [{"sha": "b5e1157f324146eec153e67cbf0a991abcd1e13a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f59ecb70068d9c617519ae4823a3e96647f686c", "patch": "@@ -1,3 +1,49 @@\n+Mon Aug  2 16:15:57 1999  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000/aix43.h (SUBTARGET_SWITCHES): Use -m64 and -m32 instead of\n+\t-maix64 and -maix32.\n+\t(ASM_SPEC, ASM_CPU_SPEC, CPP_SPEC, CPP_CPU_SPEC, LIB_SPEC,\n+\tLINK_SPEC): Change appropriately.\n+\t* rs6000/rs6000.c (short_cint_operand): Use CONST_OK_FOR_LETTER_P.\n+\t(u_short_cint_operand): Likewise.\n+\t* rs6000/rs6000.md (movdi splitters): Add TARGET_POWERPC64 support\n+\tfor 64-bit hosts.\n+\t* rs6000/t-aix43 (MULTILIB): Change to -m64.\n+\n+\t* invoke.texi (RS/6000 Submodel): Document 64-bit processor options.\n+\n+Mon Aug  2 16:15:57 1999  Geoff Keating  <geoffk@cygnus.com>\n+\n+\t* rs6000/rs6000.c (num_insns_constant_wide): Correct\n+\tfor type promotion.\n+\t(add_operand): Get test correct for 64-bit HOST_WIDE_INT.\n+\t(non_add_cint_operand): Likewise.\n+\t(logical_operand): Likewise.\n+\t(non_logical_cint_operand): Likewise.\n+\t(print_operand): Correct printf()s for 64-bit HOST_WIDE_INT.\n+\t(print_operand_address): Correct printf() for 64-bit HOST_WIDE_INT.\n+\t(rs6000_select_rtx_section): Suppress warning.\n+\t(small_data_operand): Suppress warning.\n+\t(rs6000_got_register): Suppress warning.\n+\t* rs6000/rs6000.md (andsi3): HOST_WIDE_INT is a signed\n+\ttype, so `J' is generally the wrong constraint for a SImode value;\n+\tuse `L' instead.\n+\t(andsi3_internal2): Likewise.\n+\t(andsi3_internal3): Likewise.\n+\t(iorsi3_internal1): Likewise.\n+\t(xorsi3_internal1): Likewise.\n+\t(movsi): Likewise.\n+\t(movsf_softfloat): Likewise.\n+\t(scc insns): Likewise.\n+\t(movsi+2): Preserve sign bits of SImode constant.\n+\t(floatsidf2_internal+1): Sign-extend SImode constant correctly.\n+\t(movdf+1): Sign-extend properly.\n+\t(movdi_32+1): Sign-extend properly.\n+\t(scc insns): Sign-extend properly.\n+\n+\t* md.texi (RS/6000 EXTRA_CONSTRAINTS): Update documentation for J,\n+\tK, L, and T.\n+\n 1999-08-02  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.c (override_options): Move ev6 alpha_tp frobbing out of"}, {"sha": "065302774fe5fb3527a6aa83e15e44b1a2d82758", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=5f59ecb70068d9c617519ae4823a3e96647f686c", "patch": "@@ -26,8 +26,8 @@ Boston, MA 02111-1307, USA.  */\n #define\tTARGET_XL_CALL\t\t(target_flags & MASK_XL_CALL)\n #undef  SUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\\\n-  {\"aix64\", \t\tMASK_64BIT | MASK_POWERPC64 | MASK_POWERPC}, \\\n-  {\"aix32\",\t\t- (MASK_64BIT | MASK_POWERPC64)},\t\\\n+  {\"64\", \t\tMASK_64BIT | MASK_POWERPC64 | MASK_POWERPC}, \\\n+  {\"32\",\t\t- (MASK_64BIT | MASK_POWERPC64)},\t\\\n   {\"xl-call\", \t\tMASK_XL_CALL},\t\t\t\t\\\n   {\"no-xl-call\",\t- MASK_XL_CALL}, \t\t\t\\\n   {\"threads\",\t\t0},\t\t\t\t\t\\\n@@ -48,25 +48,25 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (\"-maix64 and POWER architecture are incompatible.\");\t\\\n+      warning (\"-m64 and POWER architecture are incompatible.\");\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! (target_flags & MASK_POWERPC64))\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n-      warning (\"-maix64 requires PowerPC64 architecture remain enabled.\"); \\\n+      warning (\"-m64 requires PowerPC64 architecture remain enabled.\"); \\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0);\n \n #include \"rs6000/rs6000.h\"\n \n #undef ASM_SPEC\n-#define ASM_SPEC \"-u %{maix64:-a64 -mppc64} %(asm_cpu)\"\n+#define ASM_SPEC \"-u %{m64:-a64 -mppc64} %(asm_cpu)\"\n \n /* Common ASM definitions used by ASM_SPEC amonst the various targets\n    for handling -mcpu=xxx switches.  */\n #undef ASM_CPU_SPEC\n #define ASM_CPU_SPEC \\\n-\"%{!mcpu*: %{!maix64: \\\n+\"%{!mcpu*: %{!m64: \\\n   %{mpower: %{!mpower2: -mpwr}} \\\n   %{mpower2: -mpwr2} \\\n   %{mpowerpc*: %{!mpowerpc64: -mppc}} \\\n@@ -104,7 +104,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n-   %{maix64: -D__64BIT__ -D_ARCH_PPC}\\\n+   %{m64: -D__64BIT__ -D_ARCH_PPC}\\\n    %{mpe: -I/usr/lpp/ppe.poe/include}\\\n    %{mthreads: -D_THREAD_SAFE}\\\n    %(cpp_cpu)\"\n@@ -113,7 +113,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    for handling -mcpu=xxx switches.  */\n #undef CPP_CPU_SPEC\n #define CPP_CPU_SPEC \\\n-\"%{!mcpu*: %{!maix64: \\\n+\"%{!mcpu*: %{!m64: \\\n   %{mpower: %{!mpower2: -D_ARCH_PWR}} \\\n   %{mpower2: -D_ARCH_PWR2} \\\n   %{mpowerpc*: -D_ARCH_PPC} \\\n@@ -182,24 +182,24 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef LIB_SPEC\n #define LIB_SPEC \"%{pg:-L/lib/profiled -L/usr/lib/profiled}\\\n    %{p:-L/lib/profiled -L/usr/lib/profiled}\\\n-   %{!maix64:%{!shared:%{g*:-lg}}}\\\n+   %{!m64:%{!shared:%{g*:-lg}}}\\\n    %{mpe:-L/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n    %{mthreads:-L/usr/lib/threads -lpthreads -lc_r /usr/lib/libc.a}\\\n    %{!mthreads:-lc}\"\n \n #undef LINK_SPEC\n #define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro} -bnodelcsect\\\n-   %{static:-bnso %(link_syscalls) } %{!maix64:%{!shared:%{g*: %(link_libg) }}}\\\n-   %{shared:-bM:SRE %{!e:-bnoentry}} %{maix64:-b64}\"\n+   %{static:-bnso %(link_syscalls) } %{!m64:%{!shared:%{g*: %(link_libg) }}}\\\n+   %{shared:-bM:SRE %{!e:-bnoentry}} %{m64:-b64}\"\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"%{!shared:\\\n    %{mpe:%{pg:/usr/lpp/ppe.poe/lib/gcrt0.o}\\\n          %{!pg:%{p:/usr/lpp/ppe.poe/lib/mcrt0.o}\\\n                %{!p:/usr/lpp/ppe.poe/lib/crt0.o}}}\\\n    %{!mpe:\\\n-     %{maix64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n-     %{!maix64:\\\n+     %{m64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n+     %{!m64:\\\n        %{mthreads:%{pg:gcrt0_r%O%s}%{!pg:%{p:mcrt0_r%O%s}%{!p:crt0_r%O%s}}}\\\n        %{!mthreads:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}}\"\n "}, {"sha": "df67031f41c19fe09df08bd7e111452cf1904b81", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5f59ecb70068d9c617519ae4823a3e96647f686c", "patch": "@@ -515,8 +515,8 @@ short_cint_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  return ((GET_CODE (op) == CONST_INT\n-\t   && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) < 0x10000));\n+  return (GET_CODE (op) == CONST_INT\n+\t  && CONST_OK_FOR_LETTER_P (INTVAL (op), 'I'));\n }\n \n /* Similar for a unsigned D field.  */\n@@ -527,7 +527,7 @@ u_short_cint_operand (op, mode)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n-\t   && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0);\n+\t  && CONST_OK_FOR_LETTER_P (INTVAL (op), 'K'));\n }\n \n /* Return 1 if OP is a CONST_INT that cannot fit in a signed D field.  */\n@@ -663,19 +663,14 @@ num_insns_constant_wide (value)\n      HOST_WIDE_INT value;\n {\n   /* signed constant loadable with {cal|addi} */\n-  if (((unsigned HOST_WIDE_INT)value + 0x8000) < 0x10000)\n-    return 1;\n-\n-#if HOST_BITS_PER_WIDE_INT == 32\n-  /* constant loadable with {cau|addis} */\n-  else if ((value & 0xffff) == 0)\n+  if (CONST_OK_FOR_LETTER_P (value, 'I'))\n     return 1;\n \n-#else\n   /* constant loadable with {cau|addis} */\n-  else if ((value & 0xffff) == 0 && (value & ~0xffffffff) == 0)\n+  else if (CONST_OK_FOR_LETTER_P (value, 'L'))\n     return 1;\n \n+#if HOST_BITS_PER_WIDE_INT == 64\n   else if (TARGET_64BIT)\n     {\n       HOST_WIDE_INT low  = value & 0xffffffff;\n@@ -880,7 +875,7 @@ mem_or_easy_const_operand (op, mode)\n }\n \n /* Return 1 if the operand is either a non-special register or an item\n-   that can be used as the operand of an SI add insn.  */\n+   that can be used as the operand of a `mode' add insn.  */\n \n int\n add_operand (op, mode)\n@@ -889,7 +884,7 @@ add_operand (op, mode)\n {\n   return (reg_or_short_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT\n-\t      && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff0000)) == 0));\n+\t      && CONST_OK_FOR_LETTER_P (INTVAL(op), 'L')));\n }\n \n /* Return 1 if OP is a constant but not a valid add_operand.  */\n@@ -901,7 +896,7 @@ non_add_cint_operand (op, mode)\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) >= 0x10000\n-\t  && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff0000)) != 0);\n+\t  && ! CONST_OK_FOR_LETTER_P (INTVAL(op), 'L'));\n }\n \n /* Return 1 if the operand is a non-special register or a constant that\n@@ -914,8 +909,10 @@ logical_operand (op, mode)\n {\n   return (gpc_reg_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT\n-\t      && ((INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0\n-\t\t  || (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff0000)) == 0)));\n+\t      && ((INTVAL (op) & GET_MODE_MASK (mode)\n+\t\t   & (~ (HOST_WIDE_INT) 0xffff)) == 0\n+\t\t  || (INTVAL (op) & GET_MODE_MASK (mode)\n+\t\t      & (~ (HOST_WIDE_INT) 0xffff0000)) == 0)));\n }\n \n /* Return 1 if C is a constant that is not a logical operand (as\n@@ -924,11 +921,13 @@ logical_operand (op, mode)\n int\n non_logical_cint_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     enum machine_mode mode;\n {\n   return (GET_CODE (op) == CONST_INT\n-\t  && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) != 0\n-\t  && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff0000)) != 0);\n+\t  && (INTVAL (op) & GET_MODE_MASK (mode) &\n+\t      (~ (HOST_WIDE_INT) 0xffff)) != 0\n+\t  && (INTVAL (op) & GET_MODE_MASK (mode) &\n+\t      (~ (HOST_WIDE_INT) 0xffff0000)) != 0);\n }\n \n /* Return 1 if C is a constant that can be encoded in a 32-bit mask on the\n@@ -1198,7 +1197,7 @@ small_data_operand (op, mode)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n #if TARGET_ELF\n-  rtx sym_ref, const_part;\n+  rtx sym_ref;\n \n   if (rs6000_sdata == SDATA_NONE || rs6000_sdata == SDATA_DATA)\n     return 0;\n@@ -2474,7 +2473,7 @@ ccr_bit (op, scc_p)\n \n struct rtx_def *\n rs6000_got_register (value)\n-     rtx value;\n+     rtx value ATTRIBUTE_UNUSED;\n {\n   /* The second flow pass currently (June 1999) can't update regs_ever_live\n      without disturbing other parts of the compiler, so update it here to\n@@ -2627,7 +2626,7 @@ print_operand (file, x, code)\n       if (! INT_P (x))\n \toutput_operand_lossage (\"invalid %%b value\");\n \n-      fprintf (file, \"%d\", INT_LOWPART (x) & 0xffff);\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, INT_LOWPART (x) & 0xffff);\n       return;\n \n     case 'B':\n@@ -2713,7 +2712,7 @@ print_operand (file, x, code)\n       /* If constant, output low-order five bits.  Otherwise,\n \t write normally. */\n       if (INT_P (x))\n-\tfprintf (file, \"%d\", INT_LOWPART (x) & 31);\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INT_LOWPART (x) & 31);\n       else\n \tprint_operand (file, x, 0);\n       return;\n@@ -2722,7 +2721,7 @@ print_operand (file, x, code)\n       /* If constant, output low-order six bits.  Otherwise,\n \t write normally. */\n       if (INT_P (x))\n-\tfprintf (file, \"%d\", INT_LOWPART (x) & 63);\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INT_LOWPART (x) & 63);\n       else\n \tprint_operand (file, x, 0);\n       return;\n@@ -2759,7 +2758,7 @@ print_operand (file, x, code)\n       if (! INT_P (x))\n \toutput_operand_lossage (\"invalid %%k value\");\n \n-      fprintf (file, \"%d\", ~ INT_LOWPART (x));\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, ~ INT_LOWPART (x));\n       return;\n \n     case 'L':\n@@ -2903,7 +2902,7 @@ print_operand (file, x, code)\n       if (! INT_P (x))\n \toutput_operand_lossage (\"invalid %%s value\");\n \n-      fprintf (file, \"%d\", (32 - INT_LOWPART (x)) & 31);\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, (32 - INT_LOWPART (x)) & 31);\n       return;\n \n     case 'S':\n@@ -3006,7 +3005,8 @@ print_operand (file, x, code)\n       if (! INT_P (x))\n \toutput_operand_lossage (\"invalid %%u value\");\n \n-      fprintf (file, \"0x%x\", (INT_LOWPART (x) >> 16) & 0xffff);\n+      fprintf (file, HOST_WIDE_INT_PRINT_HEX, \n+\t       (INT_LOWPART (x) >> 16) & 0xffff);\n       return;\n \n     case 'v':\n@@ -3076,7 +3076,8 @@ print_operand (file, x, code)\n       /* If constant, low-order 16 bits of constant, signed.  Otherwise, write\n \t normally.  */\n       if (INT_P (x))\n-\tfprintf (file, \"%d\", ((INT_LOWPART (x) & 0xffff) ^ 0x8000) - 0x8000);\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, \n+\t\t ((INT_LOWPART (x) & 0xffff) ^ 0x8000) - 0x8000);\n       else\n \tprint_operand (file, x, 0);\n       return;\n@@ -3085,7 +3086,7 @@ print_operand (file, x, code)\n       /* If constant, low-order 16 bits of constant, unsigned.\n \t Otherwise, write normally.  */\n       if (INT_P (x))\n-\tfprintf (file, \"%d\", INT_LOWPART (x) & 0xffff);\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INT_LOWPART (x) & 0xffff);\n       else\n \tprint_operand (file, x, 0);\n       return;\n@@ -3221,7 +3222,10 @@ print_operand_address (file, x)\n \t\t reg_names[ REGNO (XEXP (x, 1)) ]);\n     }\n   else if (GET_CODE (x) == PLUS && GET_CODE (XEXP (x, 1)) == CONST_INT)\n-    fprintf (file, \"%d(%s)\", INTVAL (XEXP (x, 1)), reg_names[ REGNO (XEXP (x, 0)) ]);\n+    {\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (XEXP (x, 1)));\n+      fprintf (file, \"(%s)\", reg_names[ REGNO (XEXP (x, 0)) ]);\n+    }\n #if TARGET_ELF\n   else if (GET_CODE (x) == LO_SUM && GET_CODE (XEXP (x, 0)) == REG\n            && CONSTANT_P (XEXP (x, 1)))\n@@ -5649,7 +5653,7 @@ rs6000_longcall_ref (call_ref)\n \n void\n rs6000_select_rtx_section (mode, x)\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n      rtx x;\n {\n   if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (x))\n@@ -5761,17 +5765,17 @@ rs6000_encode_section_info (decl)\n \n       if ((size > 0 && size <= g_switch_value)\n \t  || (name\n-\t      && ((len == sizeof (\".sdata\")-1\n+\t      && ((len == sizeof (\".sdata\") - 1\n \t\t   && strcmp (name, \".sdata\") == 0)\n-\t\t  || (len == sizeof (\".sdata2\")-1\n+\t\t  || (len == sizeof (\".sdata2\") - 1\n \t\t      && strcmp (name, \".sdata2\") == 0)\n-\t\t  || (len == sizeof (\".sbss\")-1\n+\t\t  || (len == sizeof (\".sbss\") - 1\n \t\t      && strcmp (name, \".sbss\") == 0)\n-\t\t  || (len == sizeof (\".sbss2\")-1\n+\t\t  || (len == sizeof (\".sbss2\") - 1\n \t\t      && strcmp (name, \".sbss2\") == 0)\n-\t\t  || (len == sizeof (\".PPC.EMB.sdata0\")-1\n+\t\t  || (len == sizeof (\".PPC.EMB.sdata0\") - 1\n \t\t      && strcmp (name, \".PPC.EMB.sdata0\") == 0)\n-\t\t  || (len == sizeof (\".PPC.EMB.sbss0\")-1\n+\t\t  || (len == sizeof (\".PPC.EMB.sbss0\") - 1\n \t\t      && strcmp (name, \".PPC.EMB.sbss0\") == 0))))\n \t{\n \t  rtx sym_ref = XEXP (DECL_RTL (decl), 0);"}, {"sha": "5be4c710f42e6a205ae9b1fc994af636a923334d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 111, "deletions": 39, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=5f59ecb70068d9c617519ae4823a3e96647f686c", "patch": "@@ -1938,7 +1938,7 @@\n (define_insn \"andsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n-\t\t(match_operand:SI 2 \"and_operand\" \"?r,T,K,J\")))\n+\t\t(match_operand:SI 2 \"and_operand\" \"?r,T,K,L\")))\n    (clobber (match_scratch:CC 3 \"=X,X,x,x\"))]\n   \"\"\n   \"@\n@@ -1955,7 +1955,7 @@\n (define_insn \"*andsi3_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,x,?y,??y,??y,?y\")\n \t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r\")\n-\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,J,T,r,K,J,T\"))\n+\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,L,T,r,K,L,T\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r,r,r,r,r,r,r\"))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n@@ -1992,7 +1992,7 @@\n (define_insn \"*andsi3_internal3\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,x,x,?y,??y,??y,?y\")\n \t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r\")\n-\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,J,T,r,K,J,T\"))\n+\t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,L,T,r,K,L,T\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r,r,r\")\n \t(and:SI (match_dup 1)\n@@ -2054,7 +2054,7 @@\n (define_insn \"*iorsi3_internal1\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r\")\n \t(ior:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r\")\n-\t\t(match_operand:SI 2 \"logical_operand\" \"r,K,J\")))]\n+\t\t(match_operand:SI 2 \"logical_operand\" \"r,K,L\")))]\n   \"\"\n   \"@\n    or %0,%1,%2\n@@ -2161,7 +2161,7 @@\n (define_insn \"*xorsi3_internal1\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r\")\n \t(xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r\")\n-\t\t(match_operand:SI 2 \"logical_operand\" \"r,K,J\")))]\n+\t\t(match_operand:SI 2 \"logical_operand\" \"r,K,L\")))]\n   \"\"\n   \"@\n    xor %0,%1,%2\n@@ -4226,7 +4226,7 @@\n \t\t  (match_dup 3)))]\n   \"\n {\n-  operands[6] = GEN_INT (0x80000000);\n+  operands[6] = GEN_INT (~ (HOST_WIDE_INT) 0x7fffffff);\n   operands[7] = gen_rtx_REG (DFmode, FPMEM_REGNUM);\n }\")\n \n@@ -6127,7 +6127,7 @@\n \t\t(match_dup 3)))]\n   \"\n {\n-  operands[2] = GEN_INT (INTVAL (operands[1]) & 0xffff0000);\n+  operands[2] = GEN_INT (INTVAL (operands[1]) & (~ (HOST_WIDE_INT) 0xffff));\n   operands[3] = GEN_INT (INTVAL (operands[1]) & 0xffff);\n }\")\n \n@@ -6381,9 +6381,16 @@\n   \"\n {\n   int endian = (WORDS_BIG_ENDIAN == 0);\n+  HOST_WIDE_INT value = INTVAL (operands[1]);\n+\n   operands[2] = operand_subword (operands[0], endian, 0, DFmode);\n   operands[3] = operand_subword (operands[0], 1 - endian, 0, DFmode);\n-  operands[4] = (INTVAL (operands[1]) & 0x80000000) ? constm1_rtx : const0_rtx;\n+#if HOST_BITS_PER_WIDE_INT == 32\n+  operands[4] = (value & 0x80000000) ? constm1_rtx : const0_rtx;\n+#else\n+  operands[4] = GEN_INT (value >> 32);\n+  operands[1] = GEN_INT ((value & 0x7fffffff) - (value & 0x80000000));\n+#endif\n }\")\n \n (define_split\n@@ -6740,13 +6747,14 @@\n    (set (match_dup 3) (match_dup 1))]\n   \"\n {\n+  HOST_WIDE_INT value = INTVAL (operands[1]);\n   operands[2] = gen_rtx_SUBREG (SImode, operands[0], WORDS_BIG_ENDIAN == 0);\n   operands[3] = gen_rtx_SUBREG (SImode, operands[0], WORDS_BIG_ENDIAN != 0);\n #if HOST_BITS_PER_WIDE_INT == 32\n-  operands[4] = (INTVAL (operands[1]) & 0x80000000) ? constm1_rtx : const0_rtx;\n+  operands[4] = (value & 0x80000000) ? constm1_rtx : const0_rtx;\n #else\n-  operands[4] = GEN_INT ((HOST_WIDE_INT) INTVAL (operands[1]) >> 32);\n-  operands[1] = GEN_INT (INTVAL (operands[1]) & 0xffffffff);\n+  operands[4] = GEN_INT (value >> 32);\n+  operands[1] = GEN_INT ((value & 0x7fffffff) - (value & 0x80000000));\n #endif\n }\")\n \n@@ -6787,10 +6795,12 @@\n   [(set_attr \"type\" \"*,load,store,*,*,*,*,fp,fpload,fpstore,*,mtjmpr,*\")\n    (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4\")])\n \n+;; immediate value valid for a single instruction hiding in a const_double\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(match_operand:DI 1 \"const_double_operand\" \"F\"))]\n-  \"TARGET_POWERPC64 && GET_CODE (operands[1]) == CONST_DOUBLE\n+  \"HOST_BITS_PER_WIDE_INT == 32 && TARGET_POWERPC64\n+   && GET_CODE (operands[1]) == CONST_DOUBLE\n    && num_insns_constant (operands[1], DImode) == 1\"\n   \"*\n {\n@@ -6799,6 +6809,7 @@\n \t ? \\\"li %0,%1\\\" : \\\"lis %0,%v1\\\";\n }\")\n \n+;; sign-extended 32-bit value\n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(match_operand:DI 1 \"const_int_operand\" \"\"))]\n@@ -6822,7 +6833,7 @@\n    && GET_CODE (operands[1]) == CONST_DOUBLE\n    && ((CONST_DOUBLE_HIGH (operands[1]) == 0\n         && (CONST_DOUBLE_LOW (operands[1]) & 0x80000000) == 0)\n-       || (CONST_DOUBLE_HIGH (operands[1]) == (HOST_WIDE_INT) 0xffffffff\n+       || (CONST_DOUBLE_HIGH (operands[1]) == -1\n            && (CONST_DOUBLE_LOW (operands[1]) & 0x80000000) != 0))\"\n   [(set (match_dup 0)\n \t(match_dup 2))\n@@ -6835,6 +6846,28 @@\n   operands[3] = GEN_INT (CONST_DOUBLE_LOW (operands[1]) & 0xffff);\n }\")\n \n+(define_split\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(match_operand:DI 1 \"const_int_operand\" \"\"))]\n+  \"HOST_BITS_PER_WIDE_INT != 32 && TARGET_POWERPC64\n+   && GET_CODE (operands[1]) == CONST_INT\n+   && (((INTVAL (operands[1]) >> 32) == 0\n+        && (INTVAL (operands[1]) & 0x80000000) == 0)\n+       || ((INTVAL (operands[1]) >> 32) == -1\n+           && (INTVAL (operands[1]) & 0x80000000) != 0))\n+   && num_insns_constant (operands[1], DImode) > 1\"\n+  [(set (match_dup 0)\n+\t(match_dup 2))\n+   (set (match_dup 0)\n+\t(ior:DI (match_dup 0)\n+\t\t(match_dup 3)))]\n+  \"\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[1]) & 0xffff0000);\n+  operands[3] = GEN_INT (INTVAL (operands[1]) & 0xffff);\n+}\")\n+\n+;; zero-extended 32-bit value\n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(match_operand:DI 1 \"const_double_operand\" \"\"))]\n@@ -6849,6 +6882,22 @@\n   \"\n { operands[2] = GEN_INT (CONST_DOUBLE_LOW (operands[1])); }\")\n \n+(define_split\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(match_operand:DI 1 \"const_int_operand\" \"\"))]\n+  \"HOST_BITS_PER_WIDE_INT != 32 && TARGET_POWERPC64\n+   && GET_CODE (operands[1]) == CONST_INT\n+   && INTVAL (operands[1]) >> 32 == 0\n+   && (INTVAL (operands[1]) & 0x80000000) != 0\n+   && num_insns_constant (operands[1], DImode) > 1\"\n+  [(set (match_dup 0)\n+\t(match_dup 2))\n+   (set (match_dup 0)\n+\t(zero_extend:DI (subreg:SI (match_dup 0) 0)))]\n+  \"\n+{ operands[2] = GEN_INT ((INTVAL (operands[1]) << 32) >> 32); }\")\n+\n+;; 32-bit value in upper half of doubleword\n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(match_operand:DI 1 \"const_double_operand\" \"\"))]\n@@ -6863,6 +6912,20 @@\n   \"\n { operands[2] = GEN_INT (CONST_DOUBLE_HIGH (operands[1])); }\")\n \n+(define_split\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(match_operand:DI 1 \"const_int_operand\" \"\"))]\n+  \"HOST_BITS_PER_WIDE_INT != 32 && TARGET_POWERPC64\n+   && GET_CODE (operands[1]) == CONST_INT\n+   && INTVAL (operands[1]) & 0xffffffff == 0\"\n+  [(set (match_dup 0)\n+\t(match_dup 2))\n+   (set (match_dup 0)\n+\t(ashift:DI (match_dup 0)\n+\t\t   (const_int 32)))]\n+  \"\n+{ operands[2] = GEN_INT (INTVAL (operands[1]) >> 32); }\")\n+\n ;; Generate all one-bits and clear left or right.\n ;; Use (and:DI (rotate:DI ...)) to avoid anddi3 unnecessary clobber.\n (define_split\n@@ -6883,7 +6946,8 @@\n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(match_operand:DI 1 \"const_double_operand\" \"\"))]\n-  \"TARGET_POWERPC64 && num_insns_constant (operands[1], DImode) > 1\"\n+  \"HOST_BITS_PER_WIDE_INT == 32 && TARGET_POWERPC64\n+   && num_insns_constant (operands[1], DImode) > 1\"\n   [(set (match_dup 0)\n \t(match_dup 2))\n    (set (match_dup 0)\n@@ -6894,29 +6958,37 @@\n \t\t(match_dup 3)))]\n   \"\n {\n-  HOST_WIDE_INT low;\n-  HOST_WIDE_INT high;\n-\n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n-      low = CONST_DOUBLE_LOW (operands[1]);\n-      high = CONST_DOUBLE_HIGH (operands[1]);\n+      operands[2] = GEN_INT (CONST_DOUBLE_HIGH (operands[1]));\n+      operands[3] = GEN_INT (CONST_DOUBLE_LOW (operands[1]));\n     }\n   else\n-#if HOST_BITS_PER_WIDE_INT == 32\n-    {\n-      low = INTVAL (operands[1]);\n-      high = (low < 0) ? ~0 : 0;\n-    }\n-#else\n     {\n-      low = INTVAL (operands[1]) & 0xffffffff;\n-      high = (HOST_WIDE_INT) INTVAL (operands[1]) >> 32;\n+      HOST_WIDE_INT value = INTVAL (operands[1]);\n+      operands[2] = (value & 0x80000000) ? constm1_rtx : const0_rtx;\n+      operands[3] = operands[1];\n     }\n-#endif\n+}\")\n \n-  operands[2] = GEN_INT (high);\n-  operands[3] = GEN_INT (low);\n+(define_split\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t(match_operand:DI 1 \"const_int_operand\" \"\"))]\n+  \"HOST_BITS_PER_WIDE_INT != 32 && TARGET_POWERPC64\n+   && num_insns_constant (operands[1], DImode) > 1\"\n+  [(set (match_dup 0)\n+\t(match_dup 2))\n+   (set (match_dup 0)\n+\t(ashift:DI (match_dup 0)\n+\t\t   (const_int 32)))\n+   (set (match_dup 0)\n+\t(ior:DI (match_dup 0)\n+\t\t(match_dup 3)))]\n+  \"\n+{\n+  HOST_WIDE_INT value = INTVAL (operands[1]);\n+  operands[2] = GEN_INT (value >> 32);\n+  operands[3] = GEN_INT ((value & 0x7fffffff) - (value & 0x80000000));\n }\")\n \n (define_insn \"\"\n@@ -8893,9 +8965,9 @@\n      sign-extended to 16 bits.  Then see what constant could be XOR'ed\n      with C to get the sign-extended value.  */\n \n-  int c = INTVAL (operands[2]);\n-  int sextc = (c << 16) >> 16;\n-  int xorv = c ^ sextc;\n+  HOST_WIDE_INT c = INTVAL (operands[2]);\n+  HOST_WIDE_INT sextc = (c & 0x7fff) - (c & 0x8000);\n+  HOST_WIDE_INT xorv = c ^ sextc;\n \n   operands[4] = GEN_INT (xorv);\n   operands[5] = GEN_INT (sextc);\n@@ -9128,7 +9200,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n \t(eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,J,I\")))\n+\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\")))\n    (clobber (match_scratch:SI 3 \"=r,&r,r,r,r\"))]\n   \"\"\n   \"@\n@@ -9157,7 +9229,7 @@\n   [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,x,x,x,x\")\n \t(compare:CC\n \t (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,J,I\"))\n+\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n \t(eq:SI (match_dup 1) (match_dup 2)))\n@@ -9209,7 +9281,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n \t(plus:SI (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,J,I\"))\n+\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r\")))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r,&r\"))]\n   \"\"\n@@ -9226,7 +9298,7 @@\n \t(compare:CC\n \t (plus:SI\n \t  (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,J,I\"))\n+\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))\n \t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r,&r\"))]\n@@ -9245,7 +9317,7 @@\n \t(compare:CC\n \t (plus:SI\n \t  (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,J,I\"))\n+\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))\n \t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r\"))\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n@@ -9264,7 +9336,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n \t(neg:SI (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,J,I\"))))]\n+\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))))]\n   \"\"\n   \"@\n    xor %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0"}, {"sha": "c4e36316d50d8c4a28c657bdc74fc040e41982b9", "filename": "gcc/config/rs6000/t-aix43", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Fconfig%2Frs6000%2Ft-aix43", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Fconfig%2Frs6000%2Ft-aix43", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix43?ref=5f59ecb70068d9c617519ae4823a3e96647f686c", "patch": "@@ -17,13 +17,12 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n # different processor models\n \n MULTILIB_OPTIONS\t= msoft-float \\\n-\t\t\t  mcpu=common/mcpu=power/mcpu=powerpc/maix64\n+\t\t\t  mcpu=common/mcpu=power/mcpu=powerpc/m64\n \n MULTILIB_DIRNAMES\t= soft-float \\\n-\t\t\t  common power powerpc aix64\n+\t\t\t  common power powerpc ppc64\n \n MULTILIB_MATCHES\t= msoft-float=mcpu?403 \\\n-\t\t\t  maix64=maix64 \\\n \t\t\t  mcpu?power=mpower \\\n \t\t\t  mcpu?power=mrios1 \\\n \t\t\t  mcpu?power=mcpu?rios1 \\\n@@ -32,12 +31,15 @@ MULTILIB_MATCHES\t= msoft-float=mcpu?403 \\\n \t\t\t  mcpu?power=mpower2 \\\n \t\t\t  mcpu?power=mrios2 \\\n \t\t\t  mcpu?power=mcpu=rios2 \\\n+\t\t\t  mcpu?powerpc=mcpu?rs64a \\\n \t\t\t  mcpu?powerpc=mcpu?601 \\\n \t\t\t  mcpu?powerpc=mcpu?602 \\\n \t\t\t  mcpu?powerpc=mcpu?603 \\\n \t\t\t  mcpu?powerpc=mcpu?603e \\\n \t\t\t  mcpu?powerpc=mcpu?604 \\\n \t\t\t  mcpu?powerpc=mcpu?620 \\\n+\t\t\t  mcpu?powerpc=mcpu?630 \\\n+\t\t\t  mcpu?powerpc=mcpu?750 \\\n \t\t\t  mcpu?powerpc=mcpu?403 \\\n \t\t\t  mcpu?powerpc=mpowerpc \\\n \t\t\t  mcpu?powerpc=mpowerpc-gpopt \\"}, {"sha": "692f7537ae32b3560711797927ad9a98054ec912", "filename": "gcc/invoke.texi", "status": "modified", "additions": 26, "deletions": 40, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=5f59ecb70068d9c617519ae4823a3e96647f686c", "patch": "@@ -307,12 +307,12 @@ in the following sections.\n -mcpu=@var{cpu type}\n -mtune=@var{cpu type}\n -mpower  -mno-power  -mpower2  -mno-power2\n--mpowerpc  -mno-powerpc\n+-mpowerpc  -mpowerpc64  -mno-powerpc\n -mpowerpc-gpopt  -mno-powerpc-gpopt\n -mpowerpc-gfxopt  -mno-powerpc-gfxopt\n -mnew-mnemonics  -mno-new-mnemonics\n -mfull-toc   -mminimal-toc  -mno-fop-in-toc  -mno-sum-in-toc\n--maix64  -maix32  -mxl-call  -mno-xl-call  -mthreads  -mpe\n+-m64  -m32  -mxl-call  -mno-xl-call  -mthreads  -mpe\n -msoft-float  -mhard-float  -mmultiple  -mno-multiple\n -mstring  -mno-string  -mupdate  -mno-update\n -mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align\n@@ -4854,49 +4854,34 @@ should normally not specify either @samp{-mnew-mnemonics} or\n @kindex -mcpu\n Set architecture type, register usage, choice of mnemonics, and\n instruction scheduling parameters for machine type @var{cpu_type}.\n-Supported values for @var{cpu_type} are @samp{rs6000}, @samp{rios1},\n-@samp{rios2}, @samp{rsc}, @samp{601}, @samp{602}, @samp{603},\n-@samp{603e}, @samp{604}, @samp{604e}, @samp{620}, @samp{740},\n-@samp{750}, @samp{power}, @samp{power2}, @samp{powerpc}, @samp{403},\n-@samp{505}, @samp{801}, @samp{821}, @samp{823}, and @samp{860} and\n-@samp{common}.  @samp{-mcpu=power}, @samp{-mcpu=power2}, and\n-@samp{-mcpu=powerpc} specify generic POWER, POWER2 and pure PowerPC\n-(i.e., not MPC601) architecture machine types, with an appropriate,\n+Supported values for @var{cpu_type} are @samp{rios}, @samp{rios1},\n+@samp{rsc}, @samp{rios2}, @samp{rs64a}, @samp{601}, @samp{602},\n+@samp{603}, @samp{603e}, @samp{604}, @samp{604e}, @samp{620},\n+@samp{630}, @samp{740}, @samp{750}, @samp{power}, @samp{power2},\n+@samp{powerpc}, @samp{403}, @samp{505}, @samp{801}, @samp{821},\n+@samp{823}, and @samp{860} and @samp{common}.  @samp{-mcpu=power},\n+@samp{-mcpu=power2}, @samp{-mcpu=powerpc}, and @samp{-mcpu=powerpc64}\n+specify generic POWER, POWER2, pure 32-bit PowerPC (i.e., not MPC601),\n+and 64-bit PowerPC architecture machine types, with an appropriate,\n generic processor model assumed for scheduling purposes.@refill\n \n-@c overfull hbox here --bob 22 jul96\n-@c original text between ignore ... end ignore\n-@ignore\n-Specifying any of the @samp{-mcpu=rios1}, @samp{-mcpu=rios2},\n-@samp{-mcpu=rsc}, @samp{-mcpu=power}, or @samp{-mcpu=power2} options\n-enables the @samp{-mpower} option and disables the @samp{-mpowerpc}\n-option; @samp{-mcpu=601} enables both the @samp{-mpower} and\n-@samp{-mpowerpc} options; all of @samp{-mcpu=602}, @samp{-mcpu=603},\n-@samp{-mcpu=603e}, @samp{-mcpu=604}, @samp{-mcpu=604e},\n-@samp{-mcpu=620}, @samp{-mcpu=403}, @samp{-mcpu=505}, @samp{-mcpu=801},\n-@samp{-mcpu=821}, @samp{-mcpu=823}, @samp{-mcpu=860} and\n-@samp{-mcpu=powerpc} enable the @samp{-mpowerpc} option and disable the\n-@samp{-mpower} option; @samp{-mcpu=common} disables both the\n-@samp{-mpower} and @samp{-mpowerpc} options.@refill\n-@end ignore\n-@c            changed paragraph\n Specifying any of the following options: \n @samp{-mcpu=rios1}, @samp{-mcpu=rios2}, @samp{-mcpu=rsc},\n @samp{-mcpu=power}, or @samp{-mcpu=power2}  \n enables the @samp{-mpower} option and disables the @samp{-mpowerpc} option; \n @samp{-mcpu=601} enables both the @samp{-mpower} and @samp{-mpowerpc} options.\n-All of @samp{-mcpu=602}, @samp{-mcpu=603}, @samp{-mcpu=603e},\n-@samp{-mcpu=604}, @samp{-mcpu=620}, \n+All of @samp{-mcpu=rs64a}, @samp{-mcpu=602}, @samp{-mcpu=603},\n+@samp{-mcpu=603e}, @samp{-mcpu=604}, @samp{-mcpu=620}, @samp{-mcpu=630},\n+@samp{-mcpu=740}, and @samp{-mcpu=750}\n enable the @samp{-mpowerpc} option and disable the @samp{-mpower} option.  \n Exactly similarly, all of @samp{-mcpu=403},\n @samp{-mcpu=505}, @samp{-mcpu=821}, @samp{-mcpu=860} and @samp{-mcpu=powerpc} \n enable the @samp{-mpowerpc} option and disable the @samp{-mpower} option.\n @samp{-mcpu=common} disables both the \n @samp{-mpower} and @samp{-mpowerpc} options.@refill\n-@c             end changes to prevent overfull hboxes\n \n AIX versions 4 or greater selects @samp{-mcpu=common} by default, so\n-that code will operate on all members of the RS/6000 and PowerPC\n+that code will operate on all members of the RS/6000 POWER and PowerPC\n families.  In that case, GNU CC will use only the instructions in the\n common subset of both architectures plus some special AIX common-mode\n calls, and will not use the MQ register.  GNU CC assumes a generic\n@@ -4906,8 +4891,9 @@ Specifying any of the options @samp{-mcpu=rios1}, @samp{-mcpu=rios2},\n @samp{-mcpu=rsc}, @samp{-mcpu=power}, or @samp{-mcpu=power2} also\n disables the @samp{new-mnemonics} option.  Specifying @samp{-mcpu=601},\n @samp{-mcpu=602}, @samp{-mcpu=603}, @samp{-mcpu=603e}, @samp{-mcpu=604},\n-@samp{620}, @samp{403}, or @samp{-mcpu=powerpc} also enables the\n-@samp{new-mnemonics} option.@refill\n+@samp{-mcpu=620}, @samp{-mcpu=630}, @samp{-mcpu=403}, @samp{-mcpu=505},\n+@samp{-mcpu=821}, @samp{-mcpu=860} or @samp{-mcpu=powerpc} also enables\n+the @samp{new-mnemonics} option.@refill\n \n Specifying @samp{-mcpu=403}, @samp{-mcpu=821}, or @samp{-mcpu=860} also\n enables the @samp{-msoft-float} option.\n@@ -4950,15 +4936,15 @@ option, GNU CC will produce code that is slower and larger but which\n uses extremely little TOC space.  You may wish to use this option\n only on files that contain less frequently executed code. @refill\n \n-@item -maix64\n-@itemx -maix32\n-@kindex -maix64\n-@kindex -maix32\n-Enable AIX 64-bit ABI and calling convention: 64-bit pointers, 64-bit\n+@item -m64\n+@itemx -m32\n+@kindex -m64\n+@kindex -m32\n+Enable 64-bit PowerPC ABI and calling convention: 64-bit pointers, 64-bit\n @code{long} type, and the infrastructure needed to support them.\n-Specifying @samp{-maix64} implies @samp{-mpowerpc64} and\n-@samp{-mpowerpc}, while @samp{-maix32} disables the 64-bit ABI and\n-implies @samp{-mno-powerpc64}.  GNU CC defaults to @samp{-maix32}.\n+Specifying @samp{-m64} implies @samp{-mpowerpc64} and\n+@samp{-mpowerpc}, while @samp{-m32} disables the 64-bit ABI and\n+implies @samp{-mno-powerpc64}.  GNU CC defaults to @samp{-m32}.\n \n @item -mxl-call\n @itemx -mno-xl-call"}, {"sha": "13dc4421ae661df7db9f2f17335cde4a0d7b454f", "filename": "gcc/md.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f59ecb70068d9c617519ae4823a3e96647f686c/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=5f59ecb70068d9c617519ae4823a3e96647f686c", "patch": "@@ -1384,13 +1384,14 @@ Floating point register\n Signed 16 bit constant\n \n @item J\n-Constant whose low 16 bits are 0\n+Unsigned 16 bit constant shifted left 16 bits (use @samp{L} instead for \n+@code{SImode} constants)\n \n @item K\n-Constant whose high 16 bits are 0\n+Unsigned 16 bit constant\n \n @item L\n-Constant suitable as a mask operand\n+Signed 16 bit constant shifted left 16 bits\n \n @item M\n Constant larger than 31\n@@ -1418,6 +1419,9 @@ AIX TOC entry\n @item S\n Constant suitable as a 64-bit mask operand\n \n+@item T\n+Constant suitable as a 32-bit mask operand\n+\n @item U\n System V Release 4 small data area reference\n @end table"}]}