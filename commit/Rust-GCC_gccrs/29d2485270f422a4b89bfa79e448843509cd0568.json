{"sha": "29d2485270f422a4b89bfa79e448843509cd0568", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlkMjQ4NTI3MGY0MjJhNGI4OWJmYTc5ZTQ0ODg0MzUwOWNkMDU2OA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-01-05T00:57:30Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-01-05T00:57:30Z"}, "message": "PR c/88546 - Copy attribute unusable for weakrefs\n\ngcc/c-family/ChangeLog:\n\n\tPR c/88546\n\t* c-attribs.c (handle_copy_attribute): Avoid copying attribute leaf.\n\tHandle C++ empty throw specification and C11 _Noreturn.\n\t(has_attribute): Also handle C11 _Noreturn.\n\ngcc/ChangeLog:\n\n\tPR c/88546\n\t* attribs.c (decls_mismatched_attributes): Avoid warning for attribute\n\tleaf.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/88546\n\t* g++.dg/ext/attr-copy.C: New test.\n\t* gcc.dg/attr-copy-4.c: Disable macro expansion tracking.\n\t* gcc.dg/attr-copy-6.c: New test.\n\t* gcc.dg/attr-copy-7.c: New test.\n\nFrom-SVN: r267591", "tree": {"sha": "f1e8cf0a03dff36fd00f2c23d9cebce2ecbc3871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1e8cf0a03dff36fd00f2c23d9cebce2ecbc3871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29d2485270f422a4b89bfa79e448843509cd0568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d2485270f422a4b89bfa79e448843509cd0568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d2485270f422a4b89bfa79e448843509cd0568", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d2485270f422a4b89bfa79e448843509cd0568/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6be1179bb66624403d0f55620d67344d9d98c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6be1179bb66624403d0f55620d67344d9d98c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6be1179bb66624403d0f55620d67344d9d98c51"}], "stats": {"total": 315, "additions": 312, "deletions": 3}, "files": [{"sha": "87be8ae512a22fe69720a63ff10f091e3248c978", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -2,6 +2,12 @@\n \n \t* params.def (hot-bb-count-ws-permille): Set to 990.\n \n+2019-01-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/88546\n+\t* attribs.c (decls_mismatched_attributes): Avoid warning for attribute\n+\tleaf.\n+\n 2019-01-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/88363"}, {"sha": "d9b6a04f87af7d9491d180b18bab09664445c557", "filename": "gcc/attribs.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -1912,6 +1912,12 @@ decls_mismatched_attributes (tree tmpl, tree decl, tree attrlist,\n \n   for (unsigned i = 0; blacklist[i]; ++i)\n     {\n+      /* Attribute leaf only applies to extern functions.  Avoid mentioning\n+\t it when it's missing from a static declaration.  */\n+      if (!TREE_PUBLIC (decl)\n+\t  && !strcmp (\"leaf\", blacklist[i]))\n+\tcontinue;\n+\n       for (unsigned j = 0; j != 2; ++j)\n \t{\n \t  if (!has_attribute (tmpls[j], tmpl_attrs[j], blacklist[i]))"}, {"sha": "b407f1cc18e4bda0205bb4a6b114a9ac011be9e1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -1,3 +1,10 @@\n+2019-01-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/88546\n+\t* c-attribs.c (handle_copy_attribute): Avoid copying attribute leaf.\n+\tHandle C++ empty throw specification and C11 _Noreturn.\n+\t(has_attribute): Also handle C11 _Noreturn.\n+\n 2019-01-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/88363"}, {"sha": "c893baa48e3dc470fdf2409b2106f5f5ff079467", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -2461,6 +2461,12 @@ handle_copy_attribute (tree *node, tree name, tree args,\n \t      || is_attribute_p (\"weakref\", atname))\n \t    continue;\n \n+\t  /* Attribute leaf only applies to extern functions.\n+\t     Avoid copying it to static ones.  */\n+\t  if (!TREE_PUBLIC (decl)\n+\t      && is_attribute_p (\"leaf\", atname))\n+\t    continue;\n+\n \t  tree atargs = TREE_VALUE (at);\n \t  /* Create a copy of just the one attribute ar AT, including\n \t     its argumentsm and add it to DECL.  */\n@@ -2478,13 +2484,28 @@ handle_copy_attribute (tree *node, tree name, tree args,\n       return NULL_TREE;\n     }\n \n+  /* A function declared with attribute nothrow has the attribute\n+     attached to it, but a C++ throw() function does not.  */\n+  if (TREE_NOTHROW (ref))\n+    TREE_NOTHROW (decl) = true;\n+\n+  /* Similarly, a function declared with attribute noreturn has it\n+     attached on to it, but a C11 _Noreturn function does not.  */\n   tree reftype = ref;\n+  if (DECL_P (ref)\n+      && TREE_THIS_VOLATILE (ref)\n+      && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (reftype)))\n+    TREE_THIS_VOLATILE (decl) = true;\n+\n   if (DECL_P (ref) || EXPR_P (ref))\n     reftype = TREE_TYPE (ref);\n \n   if (POINTER_TYPE_P (reftype))\n     reftype = TREE_TYPE (reftype);\n \n+  if (!TYPE_P (reftype))\n+    return NULL_TREE;\n+\n   tree attrs = TYPE_ATTRIBUTES (reftype);\n \n   /* Copy type attributes from REF to DECL.  */\n@@ -4194,6 +4215,15 @@ has_attribute (location_t atloc, tree t, tree attr, tree (*convert)(tree))\n \t      if (expr && DECL_P (expr))\n \t\tfound_match = TREE_READONLY (expr);\n \t    }\n+\t  else if (!strcmp (\"noreturn\", namestr))\n+\t    {\n+\t      /* C11 _Noreturn sets the volatile bit without attaching\n+\t\t an attribute to the decl.  */\n+\t      if (expr\n+\t\t  && DECL_P (expr)\n+\t\t  && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (expr)))\n+\t\tfound_match = TREE_THIS_VOLATILE (expr);\n+\t    }\n \t  else if (!strcmp (\"pure\", namestr))\n \t    {\n \t      if (expr && DECL_P (expr))"}, {"sha": "b3f8d8883717b851f54f3ff06c03acbd2faeb146", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -1,3 +1,11 @@\n+2019-01-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/88546\n+\t* g++.dg/ext/attr-copy.C: New test.\n+\t* gcc.dg/attr-copy-4.c: Disable macro expansion tracking.\n+\t* gcc.dg/attr-copy-6.c: New test.\n+\t* gcc.dg/attr-copy-7.c: New test.\n+\n 2019-01-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/88363"}, {"sha": "d475cd5810312b970fce24c5099cb08ac55ada2f", "filename": "gcc/testsuite/g++.dg/ext/attr-copy.C", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-copy.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-copy.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-copy.C?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -0,0 +1,82 @@\n+/* PR middle-end/88546 - Copy attribute unusable for weakrefs\n+   { dg-do compile }\n+   { dg-options \"-O1 -Wall -fdump-tree-optimized\" }\n+   { dg-require-weak \"\" } */\n+\n+#define ATTR(...)   __attribute__ ((__VA_ARGS__))\n+#define ASRT(expr)   _Static_assert (expr, #expr)\n+\n+extern \"C\" {\n+\n+  ATTR (leaf, nothrow) int\n+  fnothrow ()\n+  {\n+    return 0;\n+  }\n+\n+  static __typeof__ (fnothrow)\n+    ATTR (weakref (\"fnothrow\"), copy (fnothrow))\n+    alias_fnothrow;\n+\n+\n+  ATTR (leaf) int\n+  fthrow_none () throw ()\n+  {\n+    return 0;\n+  }\n+\n+  // Verify that no warning is issued for the alias having less\n+  // restrictive attributes than the target: nothrow.\n+  static __typeof (fthrow_none)\n+    ATTR (weakref (\"fthrow_none\"), copy (fthrow_none))\n+    alias_fthrow_none;\n+\n+  // Same as above but with no definition of the target.\n+  ATTR (leaf) int\n+  fthrow_none_nodef () throw ();\n+\n+  static __typeof (fthrow_none_nodef)\n+    ATTR (weakref (\"fthrow_none_nodef\"), copy (fthrow_none_nodef))\n+    alias_fthrow_none_nodef;\n+\n+  // And again but without using typeof to make sure the nothrow\n+  // bit is copied by attribute copy alone.\n+  static int\n+  ATTR (weakref (\"fthrow_none_nodef\"), copy (fthrow_none_nodef))\n+    alias_fthrow_none_nodef_func ();\n+}\n+\n+\n+struct UsrClass\n+{\n+  ~UsrClass ();\n+};\n+\n+// Verify that the nothrow attribute/bit was copied to the alias and\n+// that no exception handling code is emitted in any of these calls.\n+\n+int call_alias_fnothrow ()\n+{\n+  UsrClass usr;\n+  return alias_fnothrow ();\n+}\n+\n+int call_alias_fthrow_none ()\n+{\n+  UsrClass usr;\n+  return alias_fthrow_none ();\n+}\n+\n+int call_alias_fthrow_none_nodef ()\n+{\n+  UsrClass usr;\n+  return alias_fthrow_none_nodef ();\n+}\n+\n+int call_alias_fthrow_none_nodef_func ()\n+{\n+  UsrClass usr;\n+  return alias_fthrow_none_nodef_func ();\n+}\n+\n+// { dg-final { scan-tree-dump-not \"__builtin_unwind\" \"optimized\" } }"}, {"sha": "1350a35ec945a9b7add7c8351e0b110f97add21f", "filename": "gcc/testsuite/gcc.dg/attr-copy-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-4.c?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -1,7 +1,7 @@\n /* PR middle-end/81824 - Warn for missing attributes with function aliases\n    Exercise attribute copy for types.\n    { dg-do compile }\n-   { dg-options \"-O2 -Wall\" } */\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n \n #define Assert(expr)   typedef char AssertExpr[2 * !!(expr) - 1]\n "}, {"sha": "17e714e2e4c7c19a5ead4841e2a5a7c9d1baa47f", "filename": "gcc/testsuite/gcc.dg/attr-copy-6.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-6.c?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -0,0 +1,93 @@\n+/* PR middle-end/88546 - Copy attribute unusable for weakrefs\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" }\n+   { dg-require-weak \"\" } */\n+\n+#define ATTR(...)   __attribute__ ((__VA_ARGS__))\n+#define ASRT(expr)   _Static_assert (expr, #expr)\n+\n+/* Variable that is local to this translation unit but that can\n+   be modified from other units by calling reset_unit_local().  */\n+static int unit_local;\n+\n+void reset_unit_local (void)\n+{\n+  unit_local = 0;\n+}\n+\n+/* Attribute leaf implies that fleaf() doesn't modify unit_local().  */\n+ATTR (leaf, returns_nonnull)\n+void* fleaf_retnz (void);\n+\n+/* Verify both attributes have been applied.  */\n+ASRT (__builtin_has_attribute (fleaf_retnz, leaf));\n+ASRT (__builtin_has_attribute (fleaf_retnz, returns_nonnull));\n+\n+/* Verify that attribute leaf has the expected effect.  */\n+void call_fleaf_retnz (void)\n+{\n+  int i = unit_local;\n+  void *p = fleaf_retnz ();\n+\n+  /* Expect both tests to be folded to false and the calls eliminated.  */\n+  extern void call_fleaf_retnz_test_leaf_eliminated (void);\n+  if (i != unit_local)\n+    call_fleaf_retnz_test_leaf_eliminated ();\n+\n+  extern void call_fleaf_retnz_test_nonnull_eliminated (void);\n+  if (p == 0)\n+    call_fleaf_retnz_test_nonnull_eliminated ();\n+}\n+\n+\n+/* Verify that attribute copy copies the returns_nonnull attribute\n+   but doesn't try to copy attribute leaf which only applies to extern\n+   function.  */\n+static ATTR (copy (fleaf_retnz), weakref (\"fleaf_retnz\"))\n+void* fweakref_fleaf_retnz_copy (void);\n+\n+ASRT (!__builtin_has_attribute (fweakref_fleaf_retnz_copy, leaf));\n+ASRT (__builtin_has_attribute (fweakref_fleaf_retnz_copy, returns_nonnull));\n+\n+void call_fweakref_fleaf_retnz_copy (void)\n+{\n+  int i = unit_local;\n+  void *p = fweakref_fleaf_retnz_copy ();\n+\n+  /* Since leaf is not copied, expect the following test not to be\n+     folded and the call to be emitted.  */\n+  extern void call_fweakref_test_leaf_emitted (void);\n+  if (i != unit_local)\n+    call_fweakref_test_leaf_emitted ();\n+\n+  /* Expect the following test to be folded to false and the call\n+     eliminated.  */\n+  extern void call_fweakref_fleaf_nonnull_eliminated (void);\n+  if (p == 0)\n+    call_fweakref_fleaf_nonnull_eliminated ();\n+}\n+\n+/* This is reduced from libgfortran/runtime/error.c.  Verify it\n+   doesn't trigger warnings and that the noreturn bit is copied\n+   to the alias by verifying that calling the alias in a non-void\n+   function with no return statement isn't diagnosed.  */\n+\n+extern _Noreturn void fnoreturn (void);\n+\n+extern __typeof (fnoreturn)\n+  ATTR (visibility (\"hidden\"))\n+  fnoreturn __asm__ (\"fnoreturn_name\");\n+\n+void fnoreturn (void)\n+{\n+  __builtin_abort ();\n+}\n+\n+extern __typeof (fnoreturn)\n+  ATTR (alias (\"fnoreturn_name\"), copy (fnoreturn))\n+  fnoreturn_alias;\n+\n+int call_fnoreturn_alias (void)\n+{\n+  fnoreturn_alias ();\n+}"}, {"sha": "a9c49bd704c4eb8d84c41aede87d99fe8ffacfd7", "filename": "gcc/testsuite/gcc.dg/attr-copy-7.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-7.c?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -0,0 +1,76 @@\n+/* PR middle-end/88546 - Copy attribute unusable for weakrefs\n+   Verify that attribute noreturn (represented as volatile on function\n+   decls) is interpreted correctly and doesn't affect variables.\n+   { dg-do compile }\n+   { dg-options \"-O1 -Wall -fdump-tree-optimized\" }*/\n+\n+#define ATTR(...)   __attribute__ ((__VA_ARGS__))\n+#define ASRT(expr)   _Static_assert (expr, #expr)\n+\n+ATTR (noreturn) void fnoreturn (void);\n+ATTR (copy (fnoreturn)) void fnoreturn_copy (void);\n+ASRT (__builtin_has_attribute (fnoreturn_copy, noreturn));\n+\n+int call_fnoreturn_copy (void)\n+{\n+  fnoreturn_copy ();\n+  fnoreturn_copy ();   // should be eliminated\n+}\n+\n+// { dg-final { scan-tree-dump-times \"fnoreturn_copy \\\\(\\\\);\" 1 \"optimized\" } }\n+\n+\n+_Noreturn void f_Noreturn (void);\n+ATTR (copy (f_Noreturn)) void f_Noreturn_copy (void);\n+ASRT (__builtin_has_attribute (f_Noreturn_copy, noreturn));\n+\n+int call_f_Noreturn_copy (void)\n+{\n+  f_Noreturn_copy ();\n+  f_Noreturn_copy ();   // should be eliminated\n+}\n+\n+// { dg-final { scan-tree-dump-times \"f_Noreturn_copy \\\\(\\\\);\" 1 \"optimized\" } }\n+\n+\n+// Verify the combination of both is accepted and works too,\n+// just for fun.\n+ATTR (noreturn) _Noreturn void fnoreturn_Noreturn (void);\n+ATTR (copy (fnoreturn_Noreturn)) void fnoreturn_Noreturn_copy (void);\n+ASRT (__builtin_has_attribute (fnoreturn_Noreturn_copy, noreturn));\n+\n+int call_fnoreturn_Noreturn_copy (void)\n+{\n+  fnoreturn_Noreturn_copy ();\n+  fnoreturn_Noreturn_copy ();   // should be eliminated\n+}\n+\n+// { dg-final { scan-tree-dump-times \"fnoreturn_Noreturn_copy \\\\(\\\\);\" 1 \"optimized\" } }\n+\n+\n+typedef void func_t (void);\n+\n+ATTR (noreturn) func_t func_noreturn;\n+ATTR (copy (func_noreturn)) func_t func_noreturn_copy;\n+ASRT (__builtin_has_attribute (func_noreturn_copy, noreturn));\n+\n+int call_func_noreturn_copy (void)\n+{\n+  func_noreturn_copy ();\n+  func_noreturn_copy ();   // should be eliminated\n+}\n+\n+// { dg-final { scan-tree-dump-times \"func_noreturn_copy \\\\(\\\\);\" 1 \"optimized\" } }\n+\n+\n+// Finally, verify that the volatile bit isn't copied for variables.\n+extern volatile int vi;\n+\n+int read_nonvolatile (void)\n+{\n+  ATTR (copy (vi)) int i = 0;\n+\n+  return i + i;   // should be folded to return 0;\n+}\n+\n+// { dg-final { scan-tree-dump-times \"return 0;\" 1 \"optimized\" } }"}, {"sha": "88cbc23937ec20b15b35c5adb7f9983282c6f084", "filename": "libgcc/gthr-posix.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/libgcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/libgcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgthr-posix.h?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -87,7 +87,8 @@ typedef struct timespec __gthread_time_t;\n #  define __gthrw_pragma(pragma)\n # endif\n # define __gthrw2(name,name2,type) \\\n-  static __typeof(type) name __attribute__ ((__weakref__(#name2))); \\\n+  static __typeof(type) name \\\n+    __attribute__ ((__weakref__(#name2), __copy__ (type))); \\\n   __gthrw_pragma(weak type)\n # define __gthrw_(name) __gthrw_ ## name\n #else"}, {"sha": "6b4775a1365fe1b25218ee8df1f241f2277d0e19", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29d2485270f422a4b89bfa79e448843509cd0568/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29d2485270f422a4b89bfa79e448843509cd0568/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=29d2485270f422a4b89bfa79e448843509cd0568", "patch": "@@ -202,7 +202,7 @@ extern int __mingw_snprintf (char *, size_t, const char *, ...)\n # define iexport(x)\t\tiexport1(x, IPREFIX(x))\n # define iexport1(x,y)\t\tiexport2(x,y)\n # define iexport2(x,y) \\\n-\textern __typeof(x) PREFIX(x) __attribute__((__alias__(#y)))\n+  extern __typeof(x) PREFIX(x) __attribute__((__alias__(#y), __copy__ (x)))\n #else\n # define export_proto(x)\tsym_rename(x, PREFIX(x))\n # define export_proto_np(x)\textern char swallow_semicolon"}]}