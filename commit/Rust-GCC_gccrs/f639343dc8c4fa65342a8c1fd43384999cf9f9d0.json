{"sha": "f639343dc8c4fa65342a8c1fd43384999cf9f9d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYzOTM0M2RjOGM0ZmE2NTM0MmE4YzFmZDQzMzg0OTk5Y2Y5ZjlkMA==", "commit": {"author": {"name": "Mike Crowe", "email": "mac@mcrowe.com", "date": "2020-09-11T13:24:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-11T13:24:59Z"}, "message": "libstdc++: Improve std::async test\n\nAdd tests for waiting for the future using both chrono::steady_clock and\nchrono::system_clock in preparation for dealing with those clocks\nproperly in futex.cc.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/30_threads/async/async.cc (test02): Test steady_clock\n\twith std::future::wait_until.\n\t(test03): Add new test templated on clock type waiting for future\n\tassociated with async to resolve.\n\t(main): Call test03 to test both system_clock and steady_clock.", "tree": {"sha": "b2f5b46ed3bb3e1a1d2c4c7f7aae64b4207d5a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2f5b46ed3bb3e1a1d2c4c7f7aae64b4207d5a36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f639343dc8c4fa65342a8c1fd43384999cf9f9d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f639343dc8c4fa65342a8c1fd43384999cf9f9d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f639343dc8c4fa65342a8c1fd43384999cf9f9d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f639343dc8c4fa65342a8c1fd43384999cf9f9d0/comments", "author": {"login": "mikecrowe", "id": 93615, "node_id": "MDQ6VXNlcjkzNjE1", "avatar_url": "https://avatars.githubusercontent.com/u/93615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikecrowe", "html_url": "https://github.com/mikecrowe", "followers_url": "https://api.github.com/users/mikecrowe/followers", "following_url": "https://api.github.com/users/mikecrowe/following{/other_user}", "gists_url": "https://api.github.com/users/mikecrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikecrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikecrowe/subscriptions", "organizations_url": "https://api.github.com/users/mikecrowe/orgs", "repos_url": "https://api.github.com/users/mikecrowe/repos", "events_url": "https://api.github.com/users/mikecrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/mikecrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55bdee9af3cff04192c64a573fa1767b48918efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55bdee9af3cff04192c64a573fa1767b48918efa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55bdee9af3cff04192c64a573fa1767b48918efa"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "2089b1c45eff88f7899d1e3495f09e408c99b5cb", "filename": "libstdc++-v3/testsuite/30_threads/async/async.cc", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f639343dc8c4fa65342a8c1fd43384999cf9f9d0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f639343dc8c4fa65342a8c1fd43384999cf9f9d0/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc?ref=f639343dc8c4fa65342a8c1fd43384999cf9f9d0", "patch": "@@ -50,17 +50,50 @@ void test02()\n   VERIFY( status == std::future_status::timeout );\n   status = f1.wait_until(std::chrono::system_clock::now());\n   VERIFY( status == std::future_status::timeout );\n+  status = f1.wait_until(std::chrono::steady_clock::now());\n+  VERIFY( status == std::future_status::timeout );\n   l.unlock();  // allow async thread to proceed\n   f1.wait();   // wait for it to finish\n   status = f1.wait_for(std::chrono::milliseconds(0));\n   VERIFY( status == std::future_status::ready );\n   status = f1.wait_until(std::chrono::system_clock::now());\n   VERIFY( status == std::future_status::ready );\n+  status = f1.wait_until(std::chrono::steady_clock::now());\n+  VERIFY( status == std::future_status::ready );\n+}\n+\n+// This test is prone to failures if run on a loaded machine where the\n+// kernel decides not to schedule us for several seconds. It also\n+// assumes that no-one will warp CLOCK whilst the test is\n+// running when CLOCK is std::chrono::system_clock.\n+template<typename CLOCK>\n+void test03()\n+{\n+  auto const start = CLOCK::now();\n+  future<void> f1 = async(launch::async, []() {\n+      std::this_thread::sleep_for(std::chrono::seconds(2));\n+    });\n+  std::future_status status;\n+\n+  status = f1.wait_for(std::chrono::milliseconds(500));\n+  VERIFY( status == std::future_status::timeout );\n+\n+  status = f1.wait_until(start + std::chrono::seconds(1));\n+  VERIFY( status == std::future_status::timeout );\n+\n+  status = f1.wait_until(start + std::chrono::seconds(5));\n+  VERIFY( status == std::future_status::ready );\n+\n+  auto const elapsed = CLOCK::now() - start;\n+  VERIFY( elapsed >= std::chrono::seconds(2) );\n+  VERIFY( elapsed < std::chrono::seconds(5) );\n }\n \n int main()\n {\n   test01();\n   test02();\n+  test03<std::chrono::system_clock>();\n+  test03<std::chrono::steady_clock>();\n   return 0;\n }"}]}