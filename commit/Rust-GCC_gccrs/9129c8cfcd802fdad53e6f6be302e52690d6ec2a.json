{"sha": "9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEyOWM4Y2ZjZDgwMmZkYWQ1M2U2ZjZiZTMwMmU1MjY5MGQ2ZWMyYQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-04-29T14:10:26Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-04-29T14:10:26Z"}, "message": "crt1.S: Remove SH5 support.\n\nlibgcc/\n\t* config/sh/crt1.S: Remove SH5 support.\n\t* config/sh/crti.S: Likewise.\n\t* config/sh/crtn.S: Likewise.\n\t* config/sh/lib1funcs-4-300.S: Likewise.\n\t* config/sh/lib1funcs-Os-4-200.S: Likewise.\n\t* config/sh/lib1funcs.S: Likewise.\n\t* config/sh/linux-unwind.h: Likewise.\n\t* config/sh/t-sh64: Delete.\n\nFrom-SVN: r235640", "tree": {"sha": "15d2bc8ceca715df49c7cfd223f262ce33671798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15d2bc8ceca715df49c7cfd223f262ce33671798"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/comments", "author": null, "committer": null, "parents": [{"sha": "cca535a4c158308a7a3a6486b6b66efb576da585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca535a4c158308a7a3a6486b6b66efb576da585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca535a4c158308a7a3a6486b6b66efb576da585"}], "stats": {"total": 2595, "additions": 21, "deletions": 2574}, "files": [{"sha": "6b199ab8e3a8d613d5414f319d85002571b47965", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "patch": "@@ -1,3 +1,14 @@\n+2016-04-29  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/crt1.S: Remove SH5 support.\n+\t* config/sh/crti.S: Likewise.\n+\t* config/sh/crtn.S: Likewise.\n+\t* config/sh/lib1funcs-4-300.S: Likewise.\n+\t* config/sh/lib1funcs-Os-4-200.S: Likewise.\n+\t* config/sh/lib1funcs.S: Likewise.\n+\t* config/sh/linux-unwind.h: Likewise.\n+\t* config/sh/t-sh64: Delete.\n+\n 2016-04-29  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/ieee-754/eqdf2.S: Handle FPX NaN."}, {"sha": "4e3c27d891ce5a101aa3e15d5a68e14bd49d7973", "filename": "libgcc/config/sh/crt1.S", "status": "modified", "additions": 0, "deletions": 643, "changes": 643, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Fcrt1.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Fcrt1.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Fcrt1.S?ref=9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "patch": "@@ -38,648 +38,6 @@ __timer_stack:\n \t/* ;----------------------------------------\n \tNormal newlib crt1.S */\n \n-#ifdef __SH5__\n-\t.section .data,\"aw\"\n-\t.global ___data\n-___data:\n-\n-\t.section .rodata,\"a\"\n-\t.global ___rodata\n-___rodata:\n-\n-#define ICCR_BASE  0x01600000\n-#define OCCR_BASE  0x01e00000\n-#define MMUIR_BASE 0x00000000\n-#define MMUDR_BASE 0x00800000\n-\n-#define PTE_ENABLED     1\n-#define PTE_DISABLED    0\n-\n-#define PTE_SHARED (1 << 1)\n-#define PTE_NOT_SHARED  0\n-\n-#define PTE_CB_UNCACHEABLE  0\n-#define PTE_CB_DEVICE       1\n-#define PTE_CB_CACHEABLE_WB 2\n-#define PTE_CB_CACHEABLE_WT 3\n-\n-#define PTE_SZ_4KB   (0 << 3)\n-#define PTE_SZ_64KB  (1 << 3)\n-#define PTE_SZ_1MB   (2 << 3)\n-#define PTE_SZ_512MB (3 << 3)\n-\n-#define PTE_PRR      (1 << 6)\n-#define PTE_PRX      (1 << 7)\n-#define PTE_PRW      (1 << 8)\n-#define PTE_PRU      (1 << 9)\n-\n-#define SR_MMU_BIT          31\n-#define SR_BL_BIT           28\n-\n-#define ALIGN_4KB  (0xfff)\n-#define ALIGN_1MB  (0xfffff)\n-#define ALIGN_512MB (0x1fffffff)\n-\n-#define DYNACON_BASE               0x0f000000\n-#define DM_CB_DLINK_BASE           0x0c000000\n-#define DM_DB_DLINK_BASE           0x0b000000\n-\n-#define FEMI_AREA_0                0x00000000\n-#define FEMI_AREA_1                0x04000000\n-#define FEMI_AREA_2                0x05000000\n-#define FEMI_AREA_3                0x06000000\n-#define FEMI_AREA_4                0x07000000\n-#define FEMI_CB                    0x08000000\n-\n-#define EMI_BASE                   0X80000000\n-\n-#define DMA_BASE                   0X0e000000\n-\n-#define CPU_BASE                   0X0d000000\n-\n-#define PERIPH_BASE                0X09000000\n-#define DMAC_BASE                  0x0e000000\n-#define INTC_BASE                  0x0a000000\n-#define CPRC_BASE                  0x0a010000\n-#define TMU_BASE                   0x0a020000\n-#define SCIF_BASE                  0x0a030000\n-#define RTC_BASE                   0x0a040000\n-\n-\n-\n-#define LOAD_CONST32(val, reg) \\\n-\tmovi\t((val) >> 16) & 65535, reg; \\\n-\tshori\t(val) & 65535, reg\n-\n-#define LOAD_PTEH_VAL(sym, align, bits, scratch_reg, reg) \\\n-\tLOAD_ADDR (sym, reg); \\\n-\tLOAD_CONST32 ((align), scratch_reg); \\\n-\tandc\treg, scratch_reg, reg; \\\n-\tLOAD_CONST32 ((bits), scratch_reg); \\\n-\tor\treg, scratch_reg, reg\n-\n-#define LOAD_PTEL_VAL(sym, align, bits, scratch_reg, reg) \\\n-\tLOAD_ADDR (sym, reg); \\\n-\tLOAD_CONST32 ((align), scratch_reg); \\\n-\tandc\treg, scratch_reg, reg; \\\n-\tLOAD_CONST32 ((bits), scratch_reg); \\\n-\tor\treg, scratch_reg, reg\n-\n-#define SET_PTE(pte_addr_reg, pteh_val_reg, ptel_val_reg) \\\n-\tputcfg  pte_addr_reg, 0, r63; \\\n-\tputcfg  pte_addr_reg, 1, ptel_val_reg; \\\n-\tputcfg  pte_addr_reg, 0, pteh_val_reg\n-\n-#if __SH5__ == 64\n-\t.section .text,\"ax\"\n-#define LOAD_ADDR(sym, reg) \\\n-\tmovi\t(sym >> 48) & 65535, reg; \\\n-\tshori\t(sym >> 32) & 65535, reg; \\\n-\tshori\t(sym >> 16) & 65535, reg; \\\n-\tshori\tsym & 65535, reg\n-#else\n-\t.mode\tSHmedia\n-\t.section .text..SHmedia32,\"ax\"\n-#define LOAD_ADDR(sym, reg) \\\n-\tmovi\t(sym >> 16) & 65535, reg; \\\n-\tshori\tsym & 65535, reg\n-#endif\n-\t.global start\n-start:\n-\tLOAD_ADDR (_stack, r15)\n-\n-#ifdef MMU_SUPPORT\n-\t! Set up the VM using the MMU and caches\n-\n-\t! .vm_ep is first instruction to execute\n-\t! after VM initialization\n-\tpt/l\t.vm_ep, tr1\n-\t\n-\t! Configure instruction cache (ICCR)\n-\tmovi\t3, r2\n-\tmovi\t0, r3\n-\tLOAD_ADDR (ICCR_BASE, r1)\n-\tputcfg\tr1, 0, r2\n-\tputcfg\tr1, 1, r3\n-\n-\t! movi\t7, r2 ! write through\n-\t! Configure operand cache (OCCR)\n-\tLOAD_ADDR (OCCR_BASE, r1)\n-\tputcfg\tr1, 0, r2\n-\tputcfg\tr1, 1, r3\n-\n-\t! Disable all PTE translations\n-\tLOAD_ADDR (MMUIR_BASE, r1)\n-\tLOAD_ADDR (MMUDR_BASE, r2)\n-\tmovi\t64, r3\n-\tpt/l\t.disable_ptes_loop, tr0\n-.disable_ptes_loop:\n-\tputcfg\tr1, 0, r63\n-\tputcfg\tr2, 0, r63\n-\taddi\tr1, 16, r1\n-\taddi\tr2, 16, r2\n-\taddi\tr3, -1, r3\n-\tbgt\tr3, r63, tr0\n-\n-\tLOAD_ADDR (MMUIR_BASE, r1)\n-\n-\t! FEMI instruction mappings\n-\t!   Area 0 - 1Mb cacheable at 0x00000000\n-\t!   Area 1 - None\n-\t!   Area 2 - 1Mb cacheable at 0x05000000\n-\t!          - 1Mb cacheable at 0x05100000\n-\t!   Area 3 - None\n-\t!   Area 4 - None\n-\n-\t! Map a 1Mb page for instructions at 0x00000000\n-\tLOAD_PTEH_VAL (FEMI_AREA_0, ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (FEMI_AREA_0, ALIGN_1MB, PTE_CB_CACHEABLE_WB | PTE_SZ_1MB | PTE_PRX | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 1Mb page for instructions at 0x05000000\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (FEMI_AREA_2, ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (FEMI_AREA_2, ALIGN_1MB, PTE_CB_CACHEABLE_WB | PTE_SZ_1MB | PTE_PRX | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 1Mb page for instructions at 0x05100000\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL ((FEMI_AREA_2+0x100000), ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((FEMI_AREA_2+0x100000), ALIGN_1MB, PTE_CB_CACHEABLE_WB | PTE_SZ_1MB | PTE_PRX | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 512M page for instructions at EMI base\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (EMI_BASE, ALIGN_512MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (EMI_BASE, ALIGN_512MB, PTE_CB_CACHEABLE_WB | PTE_SZ_512MB | PTE_PRX | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 4K page for instructions at DM_DB_DLINK_BASE\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (DM_DB_DLINK_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (DM_DB_DLINK_BASE, ALIGN_4KB, PTE_CB_CACHEABLE_WB | PTE_SZ_4KB | PTE_PRX | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\tLOAD_ADDR (MMUDR_BASE, r1)\n-\n-\t! FEMI data mappings\n-\t!   Area 0 - 1Mb cacheable at 0x00000000\n-\t!   Area 1 - 1Mb device at 0x04000000\n-\t!   Area 2 - 1Mb cacheable at 0x05000000\n-\t!          - 1Mb cacheable at 0x05100000\n-\t!   Area 3 - None\n-\t!   Area 4 - None\n-\t!   CB     - 1Mb device at 0x08000000\n-\n-\t! Map a 1Mb page for data at 0x00000000\n-\tLOAD_PTEH_VAL (FEMI_AREA_0, ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (FEMI_AREA_0, ALIGN_1MB, PTE_CB_CACHEABLE_WB | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 1Mb page for data at 0x04000000\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (FEMI_AREA_1, ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (FEMI_AREA_1, ALIGN_1MB, PTE_CB_DEVICE | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 1Mb page for data at 0x05000000\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (FEMI_AREA_2, ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (FEMI_AREA_2, ALIGN_1MB, PTE_CB_CACHEABLE_WB | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 1Mb page for data at 0x05100000\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL ((FEMI_AREA_2+0x100000), ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((FEMI_AREA_2+0x100000), ALIGN_1MB, PTE_CB_CACHEABLE_WB | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 4K page for registers at 0x08000000\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (FEMI_CB, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (FEMI_CB, ALIGN_4KB, PTE_CB_DEVICE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 512M page for data at EMI\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (EMI_BASE, ALIGN_512MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (EMI_BASE, ALIGN_512MB, PTE_CB_CACHEABLE_WB | PTE_SZ_512MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 4K page for DYNACON at DYNACON_BASE\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (DYNACON_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (DYNACON_BASE, ALIGN_4KB, PTE_CB_DEVICE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 4K page for instructions at DM_DB_DLINK_BASE\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (DM_DB_DLINK_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (DM_DB_DLINK_BASE, ALIGN_4KB, PTE_CB_CACHEABLE_WB | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 4K page for data at DM_DB_DLINK_BASE+0x1000\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL ((DM_DB_DLINK_BASE+0x1000), ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((DM_DB_DLINK_BASE+0x1000), ALIGN_4KB, PTE_CB_UNCACHEABLE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 4K page for stack DM_DB_DLINK_BASE+0x2000\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL ((DM_DB_DLINK_BASE+0x2000), ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((DM_DB_DLINK_BASE+0x2000), ALIGN_4KB, PTE_CB_CACHEABLE_WB | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 1M page for DM_CB_BASE2 at DM_CB_DLINK \n-\t! 0x0c000000 - 0x0c0fffff\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (DM_CB_DLINK_BASE, ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (DM_CB_DLINK_BASE, ALIGN_1MB, PTE_CB_DEVICE | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 1M page for DM_CB_BASE2 at DM_CB_DLINK \n-\t! 0x0c100000 - 0x0c1fffff\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL ((DM_CB_DLINK_BASE+0x100000), ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((DM_CB_DLINK_BASE+0x100000), ALIGN_1MB, PTE_CB_DEVICE | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 1M page for DM_CB_BASE2 at DM_CB_DLINK \n-\t! 0x0c200000 - 0x0c2fffff\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL ((DM_CB_DLINK_BASE+0x200000), ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((DM_CB_DLINK_BASE+0x200000), ALIGN_1MB, PTE_CB_DEVICE | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 1M page for DM_CB_BASE2 at DM_CB_DLINK \n-\t! 0x0c400000 - 0x0c4fffff\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL ((DM_CB_DLINK_BASE+0x400000), ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((DM_CB_DLINK_BASE+0x400000), ALIGN_1MB, PTE_CB_DEVICE | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 1M page for DM_CB_BASE2 at DM_CB_DLINK \n-\t! 0x0c800000 - 0x0c8fffff\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL ((DM_CB_DLINK_BASE+0x800000), ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((DM_CB_DLINK_BASE+0x800000), ALIGN_1MB, PTE_CB_DEVICE | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map a 4K page for DMA control registers\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (DMA_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (DMA_BASE, ALIGN_4KB, PTE_CB_DEVICE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map lots of 4K pages for peripherals\n-\n-\t! /* peripheral */\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (PERIPH_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (PERIPH_BASE, ALIGN_4KB, PTE_CB_DEVICE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\t! /* dmac */\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (DMAC_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (DMAC_BASE, ALIGN_4KB, PTE_CB_DEVICE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\t! /* intc */\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (INTC_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (INTC_BASE, ALIGN_4KB, PTE_CB_DEVICE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\t! /* rtc */\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (RTC_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (RTC_BASE, ALIGN_4KB, PTE_CB_DEVICE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\t! /* dmac */\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (TMU_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (TMU_BASE, ALIGN_4KB, PTE_CB_DEVICE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\t! /* scif */\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (SCIF_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (SCIF_BASE, ALIGN_4KB, PTE_CB_DEVICE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\t! /* cprc */\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (CPRC_BASE, ALIGN_4KB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (CPRC_BASE, ALIGN_4KB, PTE_CB_DEVICE | PTE_SZ_4KB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Map CPU WPC registers \n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL (CPU_BASE, ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL (CPU_BASE, ALIGN_1MB, PTE_CB_DEVICE | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\taddi\tr1, 16, r1\n-\n-\tLOAD_PTEH_VAL ((CPU_BASE+0x100000), ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((CPU_BASE+0x100000), ALIGN_1MB, PTE_CB_DEVICE | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL ((CPU_BASE+0x200000), ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((CPU_BASE+0x200000), ALIGN_1MB, PTE_CB_DEVICE | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\taddi\tr1, 16, r1\n-\tLOAD_PTEH_VAL ((CPU_BASE+0x400000), ALIGN_1MB, PTE_ENABLED | PTE_NOT_SHARED, r25, r2)\n-\tLOAD_PTEL_VAL ((CPU_BASE+0x400000), ALIGN_1MB, PTE_CB_DEVICE | PTE_SZ_1MB | PTE_PRR | PTE_PRW | PTE_PRU, r25, r3)\n-\tSET_PTE (r1, r2, r3)\n-\n-\t! Switch over to virtual addressing and enabled cache\n-\tgetcon\tsr, r1\n-\tmovi\t1, r2\n-\tshlli\tr2, SR_BL_BIT, r2\n-\tor\tr1, r2, r1\n-\tputcon\tr1, ssr\n-\tgetcon\tsr, r1\n-\tmovi\t1, r2\n-\tshlli\tr2, SR_MMU_BIT, r2\n-\tor\tr1, r2, r1\n-\tputcon\tr1, ssr\n-\tgettr\ttr1, r1\n-\tputcon\tr1, spc\n-\tsynco\n-\trte\n-\n-\t! VM entry point.  From now on, we are in VM mode.\n-.vm_ep:\n-\n-\t! Install the trap handler, by seeding vbr with the\n-\t! correct value, and by assigning sr.bl = 0.\n-\n-\tLOAD_ADDR (vbr_start, r1)\n-\tputcon\tr1, vbr\n-\tmovi\t~(1<<28), r1\n-\tgetcon\tsr, r2\n-\tand     r1, r2, r2\n-\tputcon\tr2, sr\n-#endif /* MMU_SUPPORT */\n-\n-\tpt/l\t.Lzero_bss_loop, tr0\n-\tpt/l\tGLOBAL(_init), tr5\n-\tpt/l\t___setup_argv_and_call_main, tr6\n-\tpt/l\t_exit, tr7\n-\n-\t! zero out bss\n-\tLOAD_ADDR (_edata, r0)\n-\tLOAD_ADDR (_end, r1)\n-.Lzero_bss_loop:\n-\tstx.q\tr0, r63, r63\n-\taddi\tr0, 8, r0\n-\tbgt/l\tr1, r0, tr0\n-\n-\tLOAD_ADDR (___data, r26)\n-\tLOAD_ADDR (___rodata, r27)\n-\n-#ifdef __SH_FPU_ANY__\n-\tgetcon\tsr, r0\n-\t! enable the FP unit, by resetting SR.FD\n-\t! also zero out SR.FR, SR.SZ and SR.PR, as mandated by the ABI\n-\tmovi\t0, r1\n-\tshori\t0xf000, r1\n-\tandc\tr0, r1, r0\n-\tputcon\tr0, sr\n-#if __SH5__ == 32\n-\tpt/l ___set_fpscr, tr0\n-\tmovi\t0, r4\n-\tblink\ttr0, r18\n-#endif\n-#endif\n-\n-\t! arrange for exit to call fini\n-\tpt/l\t_atexit, tr1\n-\tLOAD_ADDR (GLOBAL(_fini), r2)\n-\tblink\ttr1, r18\n-\n-\t! call init\n-\tblink\ttr5, r18\n-\n-\t! call the mainline\n-\tblink\ttr6, r18\n-\n-\t! call exit\n-\tblink\ttr7, r18\n-\t! We should never return from _exit but in case we do we would enter the\n-\t! the following tight loop. This avoids executing any data that might follow.\n-limbo:\n-\tpt/l limbo, tr0\n-\tblink tr0, r63\n-\t\n-#ifdef MMU_SUPPORT\n-\t! All these traps are handled in the same place. \n-\t.balign 256\n-vbr_start:\n-\tpt/l handler, tr0\t! tr0 trashed.\n-\tblink tr0, r63\n-\t.balign 256\n-vbr_100:\n-\tpt/l handler, tr0\t! tr0 trashed.\n-\tblink tr0, r63\n-vbr_100_end:\n-\t.balign 256\n-vbr_200:\n-\tpt/l handler, tr0\t! tr0 trashed.\n-\tblink tr0, r63\n-\t.balign 256\n-vbr_300:\n-\tpt/l handler, tr0\t! tr0 trashed.\n-\tblink tr0, r63\n-\t.balign 256\t\n-vbr_400:\t! Should be at vbr+0x400\n-handler:\n-\t/* If the trap handler is there call it */\n-\tLOAD_ADDR (__superh_trap_handler, r2)\n-\tpta chandler,tr2\n-\tbeq r2, r63, tr2 /* If zero, ie not present branch around to chandler */\n-\t/* Now call the trap handler with as much of the context unchanged as possible.\n-\t   Move trapping address into R18 to make it look like the trap point */\n-\tgetcon spc, r18\n-\tpt/l __superh_trap_handler, tr0\n-\tblink tr0, r7\n-chandler:\t\n-\tgetcon\tspc, r62\n-\tgetcon expevt, r2\n-\tpt/l\t_exit, tr0\n-\tblink\ttr0, r63\n-\n-\t/* Simulated trap handler */\n-\t.section\t.text..SHmedia32,\"ax\"\n-gcc2_compiled.:\n-\t.section\t.debug_abbrev\n-.Ldebug_abbrev0:\n-\t.section\t.text..SHmedia32\n-.Ltext0:\n-\t.section\t.debug_info\n-.Ldebug_info0:\n-\t.section\t.debug_line\n-.Ldebug_line0:\n-\t.section\t.text..SHmedia32,\"ax\"\n-\t.align 5\n-\t.global\t__superh_trap_handler\n-\t.type\t__superh_trap_handler,@function\n-__superh_trap_handler:\n-.LFB1:\n-\tptabs\tr18, tr0\n-\taddi.l\tr15, -8, r15\n-\tst.l\tr15, 4, r14\n-\taddi.l\tr15, -8, r15\n-\tadd.l\tr15, r63, r14\n-\tst.l\tr14, 0, r2\n-\t ptabs r7, tr0 \n-\taddi.l\tr14, 8, r14\n-\tadd.l\tr14, r63, r15\n-\tld.l\tr15, 4, r14\n-\taddi.l\tr15, 8, r15\n-\tblink\ttr0, r63\n-.LFE1:\n-.Lfe1:\n-\t.size\t__superh_trap_handler,.Lfe1-__superh_trap_handler\n-\n-\t.section\t.text..SHmedia32\n-.Letext0:\n-\n-\t.section\t.debug_info\n-\t.ualong\t0xa7\n-\t.uaword\t0x2\n-\t.ualong\t.Ldebug_abbrev0\n-\t.byte\t0x4\n-\t.byte\t0x1\n-\t.ualong\t.Ldebug_line0\n-\t.ualong\t.Letext0\n-\t.ualong\t.Ltext0\n-\t.string\t\"trap_handler.c\"\n-\n-\t.string\t\"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n-\n-\t.string\t\"GNU C 2.97-sh5-010522\"\n-\n-\t.byte\t0x1\n-\t.byte\t0x2\n-\t.ualong\t0x9a\n-\t.byte\t0x1\n-\t.string\t\"_superh_trap_handler\"\n-\n-\t.byte\t0x1\n-\t.byte\t0x2\n-\t.byte\t0x1\n-\t.ualong\t.LFB1\n-\t.ualong\t.LFE1\n-\t.byte\t0x1\n-\t.byte\t0x5e\n-\t.byte\t0x3\n-\t.string\t\"trap_reason\"\n-\n-\t.byte\t0x1\n-\t.byte\t0x1\n-\t.ualong\t0x9a\n-\t.byte\t0x2\n-\t.byte\t0x91\n-\t.byte\t0x0\n-\t.byte\t0x0\n-\t.byte\t0x4\n-\t.string\t\"unsigned int\"\n-\n-\t.byte\t0x4\n-\t.byte\t0x7\n-\t.byte\t0x0\n-\n-\t.section\t.debug_abbrev\n-\t.byte\t0x1\n-\t.byte\t0x11\n-\t.byte\t0x1\n-\t.byte\t0x10\n-\t.byte\t0x6\n-\t.byte\t0x12\n-\t.byte\t0x1\n-\t.byte\t0x11\n-\t.byte\t0x1\n-\t.byte\t0x3\n-\t.byte\t0x8\n-\t.byte\t0x1b\n-\t.byte\t0x8\n-\t.byte\t0x25\n-\t.byte\t0x8\n-\t.byte\t0x13\n-\t.byte\t0xb\n-\t.byte\t0,0\n-\t.byte\t0x2\n-\t.byte\t0x2e\n-\t.byte\t0x1\n-\t.byte\t0x1\n-\t.byte\t0x13\n-\t.byte\t0x3f\n-\t.byte\t0xc\n-\t.byte\t0x3\n-\t.byte\t0x8\n-\t.byte\t0x3a\n-\t.byte\t0xb\n-\t.byte\t0x3b\n-\t.byte\t0xb\n-\t.byte\t0x27\n-\t.byte\t0xc\n-\t.byte\t0x11\n-\t.byte\t0x1\n-\t.byte\t0x12\n-\t.byte\t0x1\n-\t.byte\t0x40\n-\t.byte\t0xa\n-\t.byte\t0,0\n-\t.byte\t0x3\n-\t.byte\t0x5\n-\t.byte\t0x0\n-\t.byte\t0x3\n-\t.byte\t0x8\n-\t.byte\t0x3a\n-\t.byte\t0xb\n-\t.byte\t0x3b\n-\t.byte\t0xb\n-\t.byte\t0x49\n-\t.byte\t0x13\n-\t.byte\t0x2\n-\t.byte\t0xa\n-\t.byte\t0,0\n-\t.byte\t0x4\n-\t.byte\t0x24\n-\t.byte\t0x0\n-\t.byte\t0x3\n-\t.byte\t0x8\n-\t.byte\t0xb\n-\t.byte\t0xb\n-\t.byte\t0x3e\n-\t.byte\t0xb\n-\t.byte\t0,0\n-\t.byte\t0\n-\n-\t.section\t.debug_pubnames\n-\t.ualong\t0x27\n-\t.uaword\t0x2\n-\t.ualong\t.Ldebug_info0\n-\t.ualong\t0xab\n-\t.ualong\t0x5b\n-\t.string\t\"_superh_trap_handler\"\n-\n-\t.ualong\t0x0\n-\n-\t.section\t.debug_aranges\n-\t.ualong\t0x1c\n-\t.uaword\t0x2\n-\t.ualong\t.Ldebug_info0\n-\t.byte\t0x4\n-\t.byte\t0x0\n-\t.uaword\t0x0,0\n-\t.ualong\t.Ltext0\n-\t.ualong\t.Letext0-.Ltext0\n-\t.ualong\t0x0\n-\t.ualong\t0x0\n-\t.ident\t\"GCC: (GNU) 2.97-sh5-010522\"\n-#endif /* MMU_SUPPORT */\n-#else /* ! __SH5__ */\n-\n \t! make a place to keep any previous value of the vbr register\n \t! this will only have a value if it has been set by redboot (for example)\n \t.section .bss\n@@ -1364,4 +722,3 @@ __superh_trap_handler:\n \t.ualong\t0x0\n \t.ualong\t0x0\n #endif /* VBR_SETUP */\n-#endif /* ! __SH5__ */"}, {"sha": "44e8dd5925f4c9a4c111192cf1bbc3f116d6c985", "filename": "libgcc/config/sh/crti.S", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Fcrti.S?ref=9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "patch": "@@ -47,19 +47,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \t.global\t GLOBAL(_init)\n GLOBAL(_init):\n-#if __SHMEDIA__\n-\taddi\tr15, -16, r15\n-\tst.q\tr15, 8, r14\n-\tst.q\tr15, 0, r18\n-\tadd\tr15, r63, r14\n-#elif __SH5__ && ! __SHMEDIA__\n-\tmov\tr15,r0\n-\tadd\t#-8,r15\n-\tmov.l\tr14,@-r0\n-\tsts.l\tpr,@-r0\n-\tmov\tr15,r14\n-\tnop\n-#else\n #ifdef __ELF__\n \tmov.l\tr12,@-r15\n \tmova\t0f,r0\n@@ -78,7 +65,6 @@ GLOBAL(_init):\n 0:\t.long\t_GLOBAL_OFFSET_TABLE_\n 1:\n #endif\n-#endif /* __SHMEDIA__ */\n \n \t.section .fini\n /* The alignment below can't be smaller, otherwise the mova below\n@@ -92,19 +78,6 @@ GLOBAL(_init):\n #endif\n \t.global  GLOBAL(_fini)\n GLOBAL(_fini):\t\n-#if __SHMEDIA__\n-\taddi\tr15, -16, r15\n-\tst.q\tr15, 8, r14\n-\tst.q\tr15, 0, r18\n-\tadd\tr15, r63, r14\n-#elif __SH5__ && ! __SHMEDIA__\n-\tmov\tr15,r0\n-\tadd\t#-8,r15\n-\tmov.l\tr14,@-r0\n-\tsts.l\tpr,@-r0\n-\tmov\tr15,r14\n-\tnop\n-#else\n #ifdef __ELF__\n \tmov.l\tr12,@-r15\n \tmova\t0f,r0\n@@ -123,4 +96,3 @@ GLOBAL(_fini):\n 0:\t.long\t_GLOBAL_OFFSET_TABLE_\n 1:\n #endif\n-#endif /* __SHMEDIA__ */"}, {"sha": "63b8421738e2d21ff4850060a489ae1fb02de824", "filename": "libgcc/config/sh/crtn.S", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Fcrtn.S?ref=9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "patch": "@@ -25,20 +25,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* See an explanation about .init and .fini in crti.S.  */\n \n \t.section .init\n-#if __SHMEDIA__\n-\tadd\tr14, r63, r15\n-\tld.q\tr15, 0, r18\n-\tptabs\tr18, tr0\n-\tld.q\tr15, 8, r14\n-\taddi\tr15, 16, r15\n-\tblink\ttr0, r63\n-#elif __SH5__ && ! __SHMEDIA__\n-\tmov\tr14,r15\n-\tlds.l\t@r14+,pr\n-\tmov.l\t@r14,r14\n-\trts\n-\tadd\t#8,r15\n-#else\n \tmov\tr14,r15\n \tlds.l\t@r15+,pr\n \tmov.l\t@r15+,r14\n@@ -48,23 +34,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #else\n \tnop\n #endif\n-#endif /* __SHMEDIA__ */\n \n \t.section .fini\n-#if __SHMEDIA__\n-\tadd\tr14, r63, r15\n-\tld.q\tr15, 0, r18\n-\tptabs\tr18, tr0\n-\tld.q\tr15, 8, r14\n-\taddi\tr15, 16, r15\n-\tblink\ttr0, r63\n-#elif __SH5__ && ! __SHMEDIA__\n-\tmov\tr14,r15\n-\tlds.l\t@r14+,pr\n-\tmov.l\t@r14,r14\n-\trts\n-\tadd\t#8,r15\n-#else\n \tmov\tr14,r15\n \tlds.l\t@r15+,pr\n \tmov.l\t@r15+,r14\n@@ -74,4 +45,3 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #else\n \tnop\n #endif\n-#endif /* __SHMEDIA__ */"}, {"sha": "651567bc1966c4b13a1c397558d60b72fb34f23c", "filename": "libgcc/config/sh/lib1funcs-4-300.S", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Flib1funcs-4-300.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Flib1funcs-4-300.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flib1funcs-4-300.S?ref=9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "patch": "@@ -25,7 +25,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"lib1funcs.h\"\n \n-#if !__SHMEDIA__\n #ifdef L_div_table\n #if defined (__SH3__) || defined (__SH3E__) || defined (__SH4__) || defined (__SH4_SINGLE__) || defined (__SH4_SINGLE_ONLY__) || defined (__SH4_NOFPU__)\n /* This code used shld, thus is not suitable for SH1 / SH2.  */\n@@ -933,4 +932,3 @@ LOCAL(div_table_inv):\n #endif /* SH3 / SH4 */\n \n #endif /* L_div_table */\n-#endif /* !__SHMEDIA__ */"}, {"sha": "4fcd8a67e4373236723021d6dae431791c27ae9d", "filename": "libgcc/config/sh/lib1funcs-Os-4-200.S", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Flib1funcs-Os-4-200.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Flib1funcs-Os-4-200.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flib1funcs-Os-4-200.S?ref=9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "patch": "@@ -25,7 +25,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"lib1funcs.h\"\n \n-#if !__SHMEDIA__\n #ifdef L_udivsi3_i4i\n \n /* 88 bytes; sh4-200 cycle counts:\n@@ -319,4 +318,3 @@ L1:\n \tENDFUNC(GLOBAL(sdivsi3_i4i))\n #endif /* __SH_FPU_DOUBLE__ */\n #endif /* L_sdivsi3_i4i */\n-#endif /* !__SHMEDIA__ */"}, {"sha": "33dd5fd6fa254b2770d34847d600074529363fdf", "filename": "libgcc/config/sh/lib1funcs.S", "status": "modified", "additions": 10, "deletions": 1764, "changes": 1774, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flib1funcs.S?ref=9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "patch": "@@ -46,7 +46,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define NO_FPSCR_VALUES\n #endif\n \t\n-#if ! __SH5__\n #ifdef L_ashiftrt\n \t.global\tGLOBAL(ashiftrt_r4_0)\n \t.global\tGLOBAL(ashiftrt_r4_1)\n@@ -1002,7 +1001,6 @@ hiset:\tsts\tmacl,r0\t\t! r0 = bb*dd\n \n \tENDFUNC(GLOBAL(mulsi3))\n #endif\n-#endif /* ! __SH5__ */\n \n /*------------------------------------------------------------------------------\n   32 bit signed integer division that uses FPU double precision division.  */\n@@ -1028,17 +1026,13 @@ GLOBAL(sdivsi3_i4):\n \n \tENDFUNC(GLOBAL(sdivsi3_i4))\n \n-#elif defined (__SH2A_SINGLE__) || defined (__SH2A_SINGLE_ONLY__) || defined(__SH4_SINGLE__) || defined(__SH4_SINGLE_ONLY__) || (defined (__SH5__) && ! defined __SH4_NOFPU__)\n+#elif defined (__SH2A_SINGLE__) || defined (__SH2A_SINGLE_ONLY__) || defined(__SH4_SINGLE__) || defined(__SH4_SINGLE_ONLY__)\n /* This variant is used when FPSCR.PR = 0 (sigle precision) is the default\n    setting.\n    Args in r4 and r5, result in fpul, clobber r2, dr0, dr2.\n    For this to work, we must temporarily switch the FPU do double precision,\n    but we better do not touch FPSCR.FR.  See PR 6526.  */\n \n-#if ! __SH5__ || __SH5__ == 32\n-#if __SH5__\n-\t.mode\tSHcompact\n-#endif\n \t.global\tGLOBAL(sdivsi3_i4)\n \tHIDDEN_FUNC(GLOBAL(sdivsi3_i4))\n GLOBAL(sdivsi3_i4):\n@@ -1074,7 +1068,6 @@ GLOBAL(sdivsi3_i4):\n #endif /* __SH4A__  */\n \n \tENDFUNC(GLOBAL(sdivsi3_i4))\n-#endif /* ! __SH5__ || __SH5__ == 32 */\n #endif /* ! __SH4__ || __SH2A__  */\n #endif /* L_sdivsi3_i4  */\n \n@@ -1091,226 +1084,8 @@ GLOBAL(sdivsi3_i4):\n !! args in r4 and r5, result in r0 clobber r1, r2, r3, and t bit\n \n \t.global\tGLOBAL(sdivsi3)\n-#if __SHMEDIA__\n-#if __SH5__ == 32\n-\t.section\t.text..SHmedia32,\"ax\"\n-#else\n-\t.text\n-#endif\n \t.align\t2\n-#if 0\n-/* The assembly code that follows is a hand-optimized version of the C\n-   code that follows.  Note that the registers that are modified are\n-   exactly those listed as clobbered in the patterns divsi3_i1 and\n-   divsi3_i1_media.\n-\t\n-int __sdivsi3 (i, j)\n-     int i, j;\n-{\n-  register unsigned long long r18 asm (\"r18\");\n-  register unsigned long long r19 asm (\"r19\");\n-  register unsigned long long r0 asm (\"r0\") = 0;\n-  register unsigned long long r1 asm (\"r1\") = 1;\n-  register int r2 asm (\"r2\") = i >> 31;\n-  register int r3 asm (\"r3\") = j >> 31;\n-\n-  r2 = r2 ? r2 : r1;\n-  r3 = r3 ? r3 : r1;\n-  r18 = i * r2;\n-  r19 = j * r3;\n-  r2 *= r3;\n-  \n-  r19 <<= 31;\n-  r1 <<= 31;\n-  do\n-    if (r18 >= r19)\n-      r0 |= r1, r18 -= r19;\n-  while (r19 >>= 1, r1 >>= 1);\n-\n-  return r2 * (int)r0;\n-}\n-*/\n-GLOBAL(sdivsi3):\n-\tpt/l\tLOCAL(sdivsi3_dontadd), tr2\n-\tpt/l\tLOCAL(sdivsi3_loop), tr1\n-\tptabs/l\tr18, tr0\n-\tmovi\t0, r0\n-\tmovi\t1, r1\n-\tshari.l\tr4, 31, r2\n-\tshari.l\tr5, 31, r3\n-\tcmveq\tr2, r1, r2\n-\tcmveq\tr3, r1, r3\n-\tmuls.l\tr4, r2, r18\n-\tmuls.l\tr5, r3, r19\n-\tmuls.l\tr2, r3, r2\n-\tshlli\tr19, 31, r19\n-\tshlli\tr1, 31, r1\n-LOCAL(sdivsi3_loop):\n-\tbgtu\tr19, r18, tr2\n-\tor\tr0, r1, r0\n-\tsub\tr18, r19, r18\n-LOCAL(sdivsi3_dontadd):\n-\tshlri\tr1, 1, r1\n-\tshlri\tr19, 1, r19\n-\tbnei\tr1, 0, tr1\n-\tmuls.l\tr0, r2, r0\n-\tadd.l\tr0, r63, r0\n-\tblink\ttr0, r63\n-#elif 0 /* ! 0 */\n- // inputs: r4,r5\n- // clobbered: r1,r2,r3,r18,r19,r20,r21,r25,tr0\n- // result in r0\n-GLOBAL(sdivsi3):\n- // can create absolute value without extra latency,\n- // but dependent on proper sign extension of inputs:\n- // shari.l r5,31,r2\n- // xor r5,r2,r20\n- // sub r20,r2,r20 // r20 is now absolute value of r5, zero-extended.\n- shari.l r5,31,r2\n- ori r2,1,r2\n- muls.l r5,r2,r20 // r20 is now absolute value of r5, zero-extended.\n- movi 0xffffffffffffbb0c,r19 // shift count eqiv 76\n- shari.l r4,31,r3\n- nsb r20,r0\n- shlld r20,r0,r25\n- shlri r25,48,r25\n- sub r19,r25,r1\n- mmulfx.w r1,r1,r2\n- mshflo.w r1,r63,r1\n- // If r4 was to be used in-place instead of r21, could use this sequence\n- // to compute absolute:\n- // sub r63,r4,r19 // compute absolute value of r4\n- // shlri r4,32,r3 // into lower 32 bit of r4, keeping\n- // mcmv r19,r3,r4 // the sign in the upper 32 bits intact.\n- ori r3,1,r3\n- mmulfx.w r25,r2,r2\n- sub r19,r0,r0\n- muls.l r4,r3,r21\n- msub.w r1,r2,r2\n- addi r2,-2,r1\n- mulu.l r21,r1,r19\n- mmulfx.w r2,r2,r2\n- shlli r1,15,r1\n- shlrd r19,r0,r19\n- mulu.l r19,r20,r3\n- mmacnfx.wl r25,r2,r1\n- ptabs r18,tr0\n- sub r21,r3,r25\n-\n- mulu.l r25,r1,r2\n- addi r0,14,r0\n- xor r4,r5,r18\n- shlrd r2,r0,r2\n- mulu.l r2,r20,r3\n- add r19,r2,r19\n- shari.l r18,31,r18\n- sub r25,r3,r25\n-\n- mulu.l r25,r1,r2\n- sub r25,r20,r25\n- add r19,r18,r19\n- shlrd r2,r0,r2\n- mulu.l r2,r20,r3\n- addi r25,1,r25\n- add r19,r2,r19\n-\n- cmpgt r25,r3,r25\n- add.l r19,r25,r0\n- xor r0,r18,r0\n- blink tr0,r63\n-#else /* ! 0 && ! 0 */\n-\n- // inputs: r4,r5\n- // clobbered: r1,r18,r19,r20,r21,r25,tr0\n- // result in r0\n-\tHIDDEN_FUNC(GLOBAL(sdivsi3_2))\n-#ifndef __pic__\n-\tFUNC(GLOBAL(sdivsi3))\n-GLOBAL(sdivsi3): /* this is the shcompact entry point */\n- // The special SHmedia entry point sdivsi3_1 prevents accidental linking\n- // with the SHcompact implementation, which clobbers tr1 / tr2.\n- .global GLOBAL(sdivsi3_1)\n-GLOBAL(sdivsi3_1):\n- .global GLOBAL(div_table_internal)\n- movi (GLOBAL(div_table_internal) >> 16) & 65535, r20\n- shori GLOBAL(div_table_internal) & 65535, r20\n-#endif\n- .global GLOBAL(sdivsi3_2)\n- // div_table in r20\n- // clobbered: r1,r18,r19,r21,r25,tr0\n-GLOBAL(sdivsi3_2):\n- nsb r5, r1\n- shlld r5, r1, r25    // normalize; [-2 ..1, 1..2) in s2.62\n- shari r25, 58, r21   // extract 5(6) bit index (s2.4 with hole -1..1)\n- ldx.ub r20, r21, r19 // u0.8\n- shari r25, 32, r25   // normalize to s2.30\n- shlli r21, 1, r21\n- muls.l r25, r19, r19 // s2.38\n- ldx.w r20, r21, r21  // s2.14\n-  ptabs r18, tr0\n- shari r19, 24, r19   // truncate to s2.14\n- sub r21, r19, r19    // some 11 bit inverse in s1.14\n- muls.l r19, r19, r21 // u0.28\n-  sub r63, r1, r1\n-  addi r1, 92, r1\n- muls.l r25, r21, r18 // s2.58\n- shlli r19, 45, r19   // multiply by two and convert to s2.58\n-  /* bubble */\n- sub r19, r18, r18\n- shari r18, 28, r18   // some 22 bit inverse in s1.30\n- muls.l r18, r25, r0  // s2.60\n-  muls.l r18, r4, r25 // s32.30\n-  /* bubble */\n- shari r0, 16, r19   // s-16.44\n- muls.l r19, r18, r19 // s-16.74\n-  shari r25, 63, r0\n-  shari r4, 14, r18   // s19.-14\n- shari r19, 30, r19   // s-16.44\n- muls.l r19, r18, r19 // s15.30\n-  xor r21, r0, r21    // You could also use the constant 1 << 27.\n-  add r21, r25, r21\n- sub r21, r19, r21\n- shard r21, r1, r21\n- sub r21, r0, r0\n- blink tr0, r63\n-#ifndef __pic__\n-\tENDFUNC(GLOBAL(sdivsi3))\n-#endif\n-\tENDFUNC(GLOBAL(sdivsi3_2))\n-#endif\n-#elif __SHMEDIA__\n-/* m5compact-nofpu */\n- // clobbered: r18,r19,r20,r21,r25,tr0,tr1,tr2\n-\t.mode\tSHmedia\n-\t.section\t.text..SHmedia32,\"ax\"\n-\t.align\t2\n-\tFUNC(GLOBAL(sdivsi3))\n-GLOBAL(sdivsi3):\n-\tpt/l LOCAL(sdivsi3_dontsub), tr0\n-\tpt/l LOCAL(sdivsi3_loop), tr1\n-\tptabs/l r18,tr2\n-\tshari.l r4,31,r18\n-\tshari.l r5,31,r19\n-\txor r4,r18,r20\n-\txor r5,r19,r21\n-\tsub.l r20,r18,r20\n-\tsub.l r21,r19,r21\n-\txor r18,r19,r19\n-\tshlli r21,32,r25\n-\taddi r25,-1,r21\n-\taddz.l r20,r63,r20\n-LOCAL(sdivsi3_loop):\n-\tshlli r20,1,r20\n-\tbgeu/u r21,r20,tr0\n-\tsub r20,r21,r20\n-LOCAL(sdivsi3_dontsub):\n-\taddi.l r25,-1,r25\n-\tbnei r25,-32,tr1\n-\txor r20,r19,r20\n-\tsub.l r20,r19,r0\n-\tblink tr2,r63\n-\tENDFUNC(GLOBAL(sdivsi3))\n-#else /* ! __SHMEDIA__ */\n+\n \tFUNC(GLOBAL(sdivsi3))\n GLOBAL(sdivsi3):\n \tmov\tr4,r1\n@@ -1397,7 +1172,6 @@ div0:\trts\n \tmov\t#0,r0\n \n \tENDFUNC(GLOBAL(sdivsi3))\n-#endif /* ! __SHMEDIA__  */\n #endif /* L_sdivsi3  */\n \n /*------------------------------------------------------------------------------\n@@ -1451,28 +1225,6 @@ L1:\n \n \tENDFUNC(GLOBAL(udivsi3_i4))\n \n-#elif defined (__SH5__) && ! defined (__SH4_NOFPU__) && ! defined (__SH2A_NOFPU__)\n-#if ! __SH5__ || __SH5__ == 32\n-!! args in r4 and r5, result in fpul, clobber r20, r21, dr0, fr33\n-\t.mode\tSHmedia\n-\t.global\tGLOBAL(udivsi3_i4)\n-\tHIDDEN_FUNC(GLOBAL(udivsi3_i4))\n-GLOBAL(udivsi3_i4):\n-\taddz.l\tr4,r63,r20\n-\taddz.l\tr5,r63,r21\n-\tfmov.qd\tr20,dr0\n-\tfmov.qd\tr21,dr32\n-\tptabs\tr18,tr0\n-\tfloat.qd dr0,dr0\n-\tfloat.qd dr32,dr32\n-\tfdiv.d\tdr0,dr32,dr0\n-\tftrc.dq dr0,dr32\n-\tfmov.s fr33,fr32\n-\tblink tr0,r63\n-\n-\tENDFUNC(GLOBAL(udivsi3_i4))\n-#endif /* ! __SH5__ || __SH5__ == 32 */\n-\n #elif defined (__SH2A_SINGLE__) || defined (__SH2A_SINGLE_ONLY__) || defined(__SH4_SINGLE__) || defined(__SH4_SINGLE_ONLY__)\n /* This variant is used when FPSCR.PR = 0 (sigle precision) is the default\n    setting.\n@@ -1581,133 +1333,6 @@ L1:\n \t.global\tGLOBAL(udivsi3)\n \tHIDDEN_FUNC(GLOBAL(udivsi3))\n \n-#if __SHMEDIA__\n-#if __SH5__ == 32\n-\t.section\t.text..SHmedia32,\"ax\"\n-#else\n-\t.text\n-#endif\n-\t.align\t2\n-#if 0\n-/* The assembly code that follows is a hand-optimized version of the C\n-   code that follows.  Note that the registers that are modified are\n-   exactly those listed as clobbered in the patterns udivsi3_i1 and\n-   udivsi3_i1_media.\n-\t\n-unsigned \n-__udivsi3 (i, j)\n-    unsigned i, j; \n-{\n-  register unsigned long long r0 asm (\"r0\") = 0;\n-  register unsigned long long r18 asm (\"r18\") = 1;\n-  register unsigned long long r4 asm (\"r4\") = i;\n-  register unsigned long long r19 asm (\"r19\") = j;\n-\n-  r19 <<= 31;\n-  r18 <<= 31;\n-  do\n-    if (r4 >= r19)\n-      r0 |= r18, r4 -= r19;\n-  while (r19 >>= 1, r18 >>= 1);\n-\n-  return r0;\n-}\n-*/\n-GLOBAL(udivsi3):\n-\tpt/l\tLOCAL(udivsi3_dontadd), tr2\n-\tpt/l\tLOCAL(udivsi3_loop), tr1\n-\tptabs/l\tr18, tr0\n-\tmovi\t0, r0\n-\tmovi\t1, r18\n-\taddz.l\tr5, r63, r19\n-\taddz.l\tr4, r63, r4\n-\tshlli\tr19, 31, r19\n-\tshlli\tr18, 31, r18\n-LOCAL(udivsi3_loop):\n-\tbgtu\tr19, r4, tr2\n-\tor\tr0, r18, r0\n-\tsub\tr4, r19, r4\n-LOCAL(udivsi3_dontadd):\n-\tshlri\tr18, 1, r18\n-\tshlri\tr19, 1, r19\n-\tbnei\tr18, 0, tr1\n-\tblink\ttr0, r63\n-#else\n-GLOBAL(udivsi3):\n- // inputs: r4,r5\n- // clobbered: r18,r19,r20,r21,r22,r25,tr0\n- // result in r0.\n- addz.l r5,r63,r22\n- nsb r22,r0\n- shlld r22,r0,r25\n- shlri r25,48,r25\n- movi 0xffffffffffffbb0c,r20 // shift count eqiv 76\n- sub r20,r25,r21\n- mmulfx.w r21,r21,r19\n- mshflo.w r21,r63,r21\n- ptabs r18,tr0\n- mmulfx.w r25,r19,r19\n- sub r20,r0,r0\n- /* bubble */\n- msub.w r21,r19,r19\n- addi r19,-2,r21 /* It would be nice for scheduling to do this add to r21\n-\t\t    before the msub.w, but we need a different value for\n-\t\t    r19 to keep errors under control.  */\n- mulu.l r4,r21,r18\n- mmulfx.w r19,r19,r19\n- shlli r21,15,r21\n- shlrd r18,r0,r18\n- mulu.l r18,r22,r20\n- mmacnfx.wl r25,r19,r21\n- /* bubble */\n- sub r4,r20,r25\n-\n- mulu.l r25,r21,r19\n- addi r0,14,r0\n- /* bubble */\n- shlrd r19,r0,r19\n- mulu.l r19,r22,r20\n- add r18,r19,r18\n- /* bubble */\n- sub.l r25,r20,r25\n-\n- mulu.l r25,r21,r19\n- addz.l r25,r63,r25\n- sub r25,r22,r25\n- shlrd r19,r0,r19\n- mulu.l r19,r22,r20\n- addi r25,1,r25\n- add r18,r19,r18\n-\n- cmpgt r25,r20,r25\n- add.l r18,r25,r0\n- blink tr0,r63\n-#endif\n-#elif __SHMEDIA__\n-/* m5compact-nofpu - more emphasis on code size than on speed, but don't\n-   ignore speed altogether - div1 needs 9 cycles, subc 7 and rotcl 4.\n-   So use a short shmedia loop.  */\n- // clobbered: r20,r21,r25,tr0,tr1,tr2\n-\t.mode\tSHmedia\n-\t.section\t.text..SHmedia32,\"ax\"\n-\t.align\t2\n-GLOBAL(udivsi3):\n- pt/l LOCAL(udivsi3_dontsub), tr0\n- pt/l LOCAL(udivsi3_loop), tr1\n- ptabs/l r18,tr2\n- shlli r5,32,r25\n- addi r25,-1,r21\n- addz.l r4,r63,r20\n-LOCAL(udivsi3_loop):\n- shlli r20,1,r20\n- bgeu/u r21,r20,tr0\n- sub r20,r21,r20\n-LOCAL(udivsi3_dontsub):\n- addi.l r25,-1,r25\n- bnei r25,-32,tr1\n- add.l r20,r63,r0\n- blink tr2,r63\n-#else /* ! __SHMEDIA__ */\n LOCAL(div8):\n  div1 r5,r4\n LOCAL(div7):\n@@ -1769,320 +1394,11 @@ LOCAL(large_divisor):\n  rotcl r0\n \n \tENDFUNC(GLOBAL(udivsi3))\n-#endif /* ! __SHMEDIA__ */\n #endif /* L_udivsi3 */\n \n-#ifdef L_udivdi3\n-#if __SHMEDIA__\n-\t.mode\tSHmedia\n-\t.section\t.text..SHmedia32,\"ax\"\n-\t.align\t2\n-\t.global\tGLOBAL(udivdi3)\n-\tFUNC(GLOBAL(udivdi3))\n-GLOBAL(udivdi3):\n-\tHIDDEN_ALIAS(udivdi3_internal,udivdi3)\n-\tshlri r3,1,r4\n-\tnsb r4,r22\n-\tshlld r3,r22,r6\n-\tshlri r6,49,r5\n-\tmovi 0xffffffffffffbaf1,r21 /* .l shift count 17.  */\n-\tsub r21,r5,r1\n-\tmmulfx.w r1,r1,r4\n-\tmshflo.w r1,r63,r1\n-\tsub r63,r22,r20 // r63 == 64 % 64\n-\tmmulfx.w r5,r4,r4\n-\tpta LOCAL(large_divisor),tr0\n-\taddi r20,32,r9\n-\tmsub.w r1,r4,r1\n-\tmadd.w r1,r1,r1\n-\tmmulfx.w r1,r1,r4\n-\tshlri r6,32,r7\n-\tbgt/u r9,r63,tr0 // large_divisor\n-\tmmulfx.w r5,r4,r4\n-\tshlri r2,32+14,r19\n-\taddi r22,-31,r0\n-\tmsub.w r1,r4,r1\n-\n-\tmulu.l r1,r7,r4\n-\taddi r1,-3,r5\n-\tmulu.l r5,r19,r5\n-\tsub r63,r4,r4 // Negate to make sure r1 ends up <= 1/r2\n-\tshlri r4,2,r4 /* chop off leading %0000000000000000 001.00000000000 - or, as\n-\t                 the case may be, %0000000000000000 000.11111111111, still */\n-\tmuls.l r1,r4,r4 /* leaving at least one sign bit.  */\n-\tmulu.l r5,r3,r8\n-\tmshalds.l r1,r21,r1\n-\tshari r4,26,r4\n-\tshlld r8,r0,r8\n-\tadd r1,r4,r1 // 31 bit unsigned reciprocal now in r1 (msb equiv. 0.5)\n-\tsub r2,r8,r2\n-\t/* Can do second step of 64 : 32 div now, using r1 and the rest in r2.  */\n-\n-\tshlri r2,22,r21\n-\tmulu.l r21,r1,r21\n-\tshlld r5,r0,r8\n-\taddi r20,30-22,r0\n-\tshlrd r21,r0,r21\n-\tmulu.l r21,r3,r5\n-\tadd r8,r21,r8\n-\tmcmpgt.l r21,r63,r21 // See Note 1\n-\taddi r20,30,r0\n-\tmshfhi.l r63,r21,r21\n-\tsub r2,r5,r2\n-\tandc r2,r21,r2\n-\n-\t/* small divisor: need a third divide step */\n-\tmulu.l r2,r1,r7\n-\tptabs r18,tr0\n-\taddi r2,1,r2\n-\tshlrd r7,r0,r7\n-\tmulu.l r7,r3,r5\n-\tadd r8,r7,r8\n-\tsub r2,r3,r2\n-\tcmpgt r2,r5,r5\n-\tadd r8,r5,r2\n-\t/* could test r3 here to check for divide by zero.  */\n-\tblink tr0,r63\n-\n-LOCAL(large_divisor):\n-\tmmulfx.w r5,r4,r4\n-\tshlrd r2,r9,r25\n-\tshlri r25,32,r8\n-\tmsub.w r1,r4,r1\n-\n-\tmulu.l r1,r7,r4\n-\taddi r1,-3,r5\n-\tmulu.l r5,r8,r5\n-\tsub r63,r4,r4 // Negate to make sure r1 ends up <= 1/r2\n-\tshlri r4,2,r4 /* chop off leading %0000000000000000 001.00000000000 - or, as\n-\t                 the case may be, %0000000000000000 000.11111111111, still */\n-\tmuls.l r1,r4,r4 /* leaving at least one sign bit.  */\n-\tshlri r5,14-1,r8\n-\tmulu.l r8,r7,r5\n-\tmshalds.l r1,r21,r1\n-\tshari r4,26,r4\n-\tadd r1,r4,r1 // 31 bit unsigned reciprocal now in r1 (msb equiv. 0.5)\n-\tsub r25,r5,r25\n-\t/* Can do second step of 64 : 32 div now, using r1 and the rest in r25.  */\n-\n-\tshlri r25,22,r21\n-\tmulu.l r21,r1,r21\n-\tpta LOCAL(no_lo_adj),tr0\n-\taddi r22,32,r0\n-\tshlri r21,40,r21\n-\tmulu.l r21,r7,r5\n-\tadd r8,r21,r8\n-\tshlld r2,r0,r2\n-\tsub r25,r5,r25\n-\tbgtu/u r7,r25,tr0 // no_lo_adj\n-\taddi r8,1,r8\n-\tsub r25,r7,r25\n-LOCAL(no_lo_adj):\n-\tmextr4 r2,r25,r2\n-\n-\t/* large_divisor: only needs a few adjustments.  */\n-\tmulu.l r8,r6,r5\n-\tptabs r18,tr0\n-\t/* bubble */\n-\tcmpgtu r5,r2,r5\n-\tsub r8,r5,r2\n-\tblink tr0,r63\n-\tENDFUNC(GLOBAL(udivdi3))\n-/* Note 1: To shift the result of the second divide stage so that the result\n-   always fits into 32 bits, yet we still reduce the rest sufficiently\n-   would require a lot of instructions to do the shifts just right.  Using\n-   the full 64 bit shift result to multiply with the divisor would require\n-   four extra instructions for the upper 32 bits (shift / mulu / shift / sub).\n-   Fortunately, if the upper 32 bits of the shift result are nonzero, we\n-   know that the rest after taking this partial result into account will\n-   fit into 32 bits.  So we just clear the upper 32 bits of the rest if the\n-   upper 32 bits of the partial result are nonzero.  */\n-#endif /* __SHMEDIA__ */\n-#endif /* L_udivdi3 */\n-\n-#ifdef L_divdi3\n-#if __SHMEDIA__\n-\t.mode\tSHmedia\n-\t.section\t.text..SHmedia32,\"ax\"\n-\t.align\t2\n-\t.global\tGLOBAL(divdi3)\n-\tFUNC(GLOBAL(divdi3))\n-GLOBAL(divdi3):\n-\tpta GLOBAL(udivdi3_internal),tr0\n-\tshari r2,63,r22\n-\tshari r3,63,r23\n-\txor r2,r22,r2\n-\txor r3,r23,r3\n-\tsub r2,r22,r2\n-\tsub r3,r23,r3\n-\tbeq/u r22,r23,tr0\n-\tptabs r18,tr1\n-\tblink tr0,r18\n-\tsub r63,r2,r2\n-\tblink tr1,r63\n-\tENDFUNC(GLOBAL(divdi3))\n-#endif /* __SHMEDIA__ */\n-#endif /* L_divdi3 */\n-\n-#ifdef L_umoddi3\n-#if __SHMEDIA__\n-\t.mode\tSHmedia\n-\t.section\t.text..SHmedia32,\"ax\"\n-\t.align\t2\n-\t.global\tGLOBAL(umoddi3)\n-\tFUNC(GLOBAL(umoddi3))\n-GLOBAL(umoddi3):\n-\tHIDDEN_ALIAS(umoddi3_internal,umoddi3)\n-\tshlri r3,1,r4\n-\tnsb r4,r22\n-\tshlld r3,r22,r6\n-\tshlri r6,49,r5\n-\tmovi 0xffffffffffffbaf1,r21 /* .l shift count 17.  */\n-\tsub r21,r5,r1\n-\tmmulfx.w r1,r1,r4\n-\tmshflo.w r1,r63,r1\n-\tsub r63,r22,r20 // r63 == 64 % 64\n-\tmmulfx.w r5,r4,r4\n-\tpta LOCAL(large_divisor),tr0\n-\taddi r20,32,r9\n-\tmsub.w r1,r4,r1\n-\tmadd.w r1,r1,r1\n-\tmmulfx.w r1,r1,r4\n-\tshlri r6,32,r7\n-\tbgt/u r9,r63,tr0 // large_divisor\n-\tmmulfx.w r5,r4,r4\n-\tshlri r2,32+14,r19\n-\taddi r22,-31,r0\n-\tmsub.w r1,r4,r1\n-\n-\tmulu.l r1,r7,r4\n-\taddi r1,-3,r5\n-\tmulu.l r5,r19,r5\n-\tsub r63,r4,r4 // Negate to make sure r1 ends up <= 1/r2\n-\tshlri r4,2,r4 /* chop off leading %0000000000000000 001.00000000000 - or, as\n-\t                 the case may be, %0000000000000000 000.11111111111, still */\n-\tmuls.l r1,r4,r4 /* leaving at least one sign bit.  */\n-\tmulu.l r5,r3,r5\n-\tmshalds.l r1,r21,r1\n-\tshari r4,26,r4\n-\tshlld r5,r0,r5\n-\tadd r1,r4,r1 // 31 bit unsigned reciprocal now in r1 (msb equiv. 0.5)\n-\tsub r2,r5,r2\n-\t/* Can do second step of 64 : 32 div now, using r1 and the rest in r2.  */\n-\n-\tshlri r2,22,r21\n-\tmulu.l r21,r1,r21\n-\taddi r20,30-22,r0\n-\t/* bubble */ /* could test r3 here to check for divide by zero.  */\n-\tshlrd r21,r0,r21\n-\tmulu.l r21,r3,r5\n-\tmcmpgt.l r21,r63,r21 // See Note 1\n-\taddi r20,30,r0\n-\tmshfhi.l r63,r21,r21\n-\tsub r2,r5,r2\n-\tandc r2,r21,r2\n-\n-\t/* small divisor: need a third divide step */\n-\tmulu.l r2,r1,r7\n-\tptabs r18,tr0\n-\tsub r2,r3,r8 /* re-use r8 here for rest - r3 */\n-\tshlrd r7,r0,r7\n-\tmulu.l r7,r3,r5\n-\t/* bubble */\n-\taddi r8,1,r7\n-\tcmpgt r7,r5,r7\n-\tcmvne r7,r8,r2\n-\tsub r2,r5,r2\n-\tblink tr0,r63\n-\n-LOCAL(large_divisor):\n-\tmmulfx.w r5,r4,r4\n-\tshlrd r2,r9,r25\n-\tshlri r25,32,r8\n-\tmsub.w r1,r4,r1\n-\n-\tmulu.l r1,r7,r4\n-\taddi r1,-3,r5\n-\tmulu.l r5,r8,r5\n-\tsub r63,r4,r4 // Negate to make sure r1 ends up <= 1/r2\n-\tshlri r4,2,r4 /* chop off leading %0000000000000000 001.00000000000 - or, as\n-\t                 the case may be, %0000000000000000 000.11111111111, still */\n-\tmuls.l r1,r4,r4 /* leaving at least one sign bit.  */\n-\tshlri r5,14-1,r8\n-\tmulu.l r8,r7,r5\n-\tmshalds.l r1,r21,r1\n-\tshari r4,26,r4\n-\tadd r1,r4,r1 // 31 bit unsigned reciprocal now in r1 (msb equiv. 0.5)\n-\tsub r25,r5,r25\n-\t/* Can do second step of 64 : 32 div now, using r1 and the rest in r25.  */\n-\n-\tshlri r25,22,r21\n-\tmulu.l r21,r1,r21\n-\tpta LOCAL(no_lo_adj),tr0\n-\taddi r22,32,r0\n-\tshlri r21,40,r21\n-\tmulu.l r21,r7,r5\n-\tadd r8,r21,r8\n-\tshlld r2,r0,r2\n-\tsub r25,r5,r25\n-\tbgtu/u r7,r25,tr0 // no_lo_adj\n-\taddi r8,1,r8\n-\tsub r25,r7,r25\n-LOCAL(no_lo_adj):\n-\tmextr4 r2,r25,r2\n-\n-\t/* large_divisor: only needs a few adjustments.  */\n-\tmulu.l r8,r6,r5\n-\tptabs r18,tr0\n-\tadd r2,r6,r7\n-\tcmpgtu r5,r2,r8\n-\tcmvne r8,r7,r2\n-\tsub r2,r5,r2\n-\tshlrd r2,r22,r2\n-\tblink tr0,r63\n-\tENDFUNC(GLOBAL(umoddi3))\n-/* Note 1: To shift the result of the second divide stage so that the result\n-   always fits into 32 bits, yet we still reduce the rest sufficiently\n-   would require a lot of instructions to do the shifts just right.  Using\n-   the full 64 bit shift result to multiply with the divisor would require\n-   four extra instructions for the upper 32 bits (shift / mulu / shift / sub).\n-   Fortunately, if the upper 32 bits of the shift result are nonzero, we\n-   know that the rest after taking this partial result into account will\n-   fit into 32 bits.  So we just clear the upper 32 bits of the rest if the\n-   upper 32 bits of the partial result are nonzero.  */\n-#endif /* __SHMEDIA__ */\n-#endif /* L_umoddi3 */\n-\n-#ifdef L_moddi3\n-#if __SHMEDIA__\n-\t.mode\tSHmedia\n-\t.section\t.text..SHmedia32,\"ax\"\n-\t.align\t2\n-\t.global\tGLOBAL(moddi3)\n-\tFUNC(GLOBAL(moddi3))\n-GLOBAL(moddi3):\n-\tpta GLOBAL(umoddi3_internal),tr0\n-\tshari r2,63,r22\n-\tshari r3,63,r23\n-\txor r2,r22,r2\n-\txor r3,r23,r3\n-\tsub r2,r22,r2\n-\tsub r3,r23,r3\n-\tbeq/u r22,r63,tr0\n-\tptabs r18,tr1\n-\tblink tr0,r18\n-\tsub r63,r2,r2\n-\tblink tr1,r63\n-\tENDFUNC(GLOBAL(moddi3))\n-#endif /* __SHMEDIA__ */\n-#endif /* L_moddi3 */\n-\n #ifdef L_set_fpscr\n #if !defined (__SH2A_NOFPU__)\n-#if defined (__SH2E__) || defined (__SH2A__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) || __SH5__ == 32\n-#ifdef __SH5__\n-\t.mode\tSHcompact\n-#endif\n+#if defined (__SH2E__) || defined (__SH2A__) || defined (__SH3E__) || defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__)\n \t.global GLOBAL(set_fpscr)\n \tHIDDEN_FUNC(GLOBAL(set_fpscr))\n GLOBAL(set_fpscr):\n@@ -2161,39 +1477,8 @@ LOCAL(set_fpscr_L1):\n #endif /* __SH2A_NOFPU__ */\n #endif /* L_set_fpscr */\n #ifdef L_ic_invalidate\n-#if __SH5__ == 32\n-\t.mode\tSHmedia\n-\t.section\t.text..SHmedia32,\"ax\"\n-\t.align\t2\n-\t.global\tGLOBAL(init_trampoline)\n-\tHIDDEN_FUNC(GLOBAL(init_trampoline))\n-GLOBAL(init_trampoline):\n-\tst.l\tr0,8,r2\n-#ifdef __LITTLE_ENDIAN__\n-\tmovi\t9,r20\n-\tshori\t0x402b,r20\n-\tshori\t0xd101,r20\n-\tshori\t0xd002,r20\n-#else\n-\tmovi\t0xffffffffffffd002,r20\n-\tshori\t0xd101,r20\n-\tshori\t0x402b,r20\n-\tshori\t9,r20\n-#endif\n-\tst.q\tr0,0,r20\n-\tst.l\tr0,12,r3\n-\tENDFUNC(GLOBAL(init_trampoline))\n-\t.global\tGLOBAL(ic_invalidate)\n-\tHIDDEN_FUNC(GLOBAL(ic_invalidate))\n-GLOBAL(ic_invalidate):\n-\tocbwb\tr0,0\n-\tsynco\n-\ticbi\tr0, 0\n-\tptabs\tr18, tr0\n-\tsynci\n-\tblink\ttr0, r63\n-\tENDFUNC(GLOBAL(ic_invalidate))\n-#elif defined(__SH4A__)\n+\n+#if defined(__SH4A__)\n \t.global GLOBAL(ic_invalidate)\n \tHIDDEN_FUNC(GLOBAL(ic_invalidate))\n GLOBAL(ic_invalidate):\n@@ -2203,7 +1488,7 @@ GLOBAL(ic_invalidate):\n \trts\n \t  nop\n \tENDFUNC(GLOBAL(ic_invalidate))\n-#elif defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) || (defined(__SH4_NOFPU__) && !defined(__SH5__))\n+#elif defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) || defined(__SH4_NOFPU__)\n \t/* For system code, we use ic_invalidate_line_i, but user code\n \t   needs a different mechanism.  A kernel call is generally not\n \t   available, and it would also be slow.  Different SH4 variants use\n@@ -2259,7 +1544,7 @@ GLOBAL(ic_invalidate):\n #endif /* L_ic_invalidate */\n \n #ifdef L_ic_invalidate_array\n-#if defined(__SH4A__) || (defined (__FORCE_SH4A__) && (defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) || (defined(__SH4_NOFPU__) && !defined(__SH5__))))\n+#if defined(__SH4A__) || (defined (__FORCE_SH4A__) && (defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) || defined(__SH4_NOFPU__)))\n \t.global GLOBAL(ic_invalidate_array)\n \t/* This is needed when an SH4 dso with trampolines is used on SH4A.  */\n \t.global GLOBAL(ic_invalidate_array)\n@@ -2273,7 +1558,7 @@ GLOBAL(ic_invalidate_array):\n \t.align 2\n \t.long\t0\n \tENDFUNC(GLOBAL(ic_invalidate_array))\n-#elif defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) || (defined(__SH4_NOFPU__) && !defined(__SH5__))\n+#elif defined(__SH4_SINGLE__) || defined(__SH4__) || defined(__SH4_SINGLE_ONLY__) || defined(__SH4_NOFPU__)\n \t.global GLOBAL(ic_invalidate_array)\n \t.p2align 5\n \tFUNC(GLOBAL(ic_invalidate_array))\n@@ -2329,1047 +1614,10 @@ GLOBAL(ic_invalidate_array):\n #endif /* SH4 */\n #endif /* L_ic_invalidate_array */\n \n-#if defined (__SH5__) && __SH5__ == 32\n-#ifdef L_shcompact_call_trampoline\n-\t.section\t.rodata\n-\t.align\t1\n-LOCAL(ct_main_table):\n-.word\tLOCAL(ct_r2_fp) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r2_ld) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r2_pop) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r3_fp) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r3_ld) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r3_pop) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r4_fp) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r4_ld) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r4_pop) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r5_fp) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r5_ld) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r5_pop) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r6_fph) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r6_fpl) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r6_ld) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r6_pop) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r7_fph) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r7_fpl) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r7_ld) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r7_pop) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r8_fph) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r8_fpl) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r8_ld) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r8_pop) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r9_fph) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r9_fpl) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r9_ld) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r9_pop) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_pop_seq) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_pop_seq) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_r9_pop) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_ret_wide) - datalabel LOCAL(ct_main_label)\n-.word\tLOCAL(ct_call_func) - datalabel LOCAL(ct_main_label)\n-\t.mode\tSHmedia\n-\t.section\t.text..SHmedia32, \"ax\"\n-\t.align\t2\n-\t\n-     /* This function loads 64-bit general-purpose registers from the\n-\tstack, from a memory address contained in them or from an FP\n-\tregister, according to a cookie passed in r1.  Its execution\n-\ttime is linear on the number of registers that actually have\n-\tto be copied.  See sh.h for details on the actual bit pattern.\n-\n-\tThe function to be called is passed in r0.  If a 32-bit return\n-\tvalue is expected, the actual function will be tail-called,\n-\totherwise the return address will be stored in r10 (that the\n-\tcaller should expect to be clobbered) and the return value\n-\twill be expanded into r2/r3 upon return.  */\n-\t\n-\t.global\tGLOBAL(GCC_shcompact_call_trampoline)\n-\tFUNC(GLOBAL(GCC_shcompact_call_trampoline))\n-GLOBAL(GCC_shcompact_call_trampoline):\n-\tptabs/l\tr0, tr0\t/* Prepare to call the actual function.  */\n-\tmovi\t((datalabel LOCAL(ct_main_table) - 31 * 2) >> 16) & 65535, r0\n-\tpt/l\tLOCAL(ct_loop), tr1\n-\taddz.l\tr1, r63, r1\n-\tshori\t((datalabel LOCAL(ct_main_table) - 31 * 2)) & 65535, r0\n-LOCAL(ct_loop):\n-\tnsb\tr1, r28\n-\tshlli\tr28, 1, r29\n-\tldx.w\tr0, r29, r30\n-LOCAL(ct_main_label):\n-\tptrel/l\tr30, tr2\n-\tblink\ttr2, r63\n-LOCAL(ct_r2_fp):\t/* Copy r2 from an FP register.  */\n-\t/* It must be dr0, so just do it.  */\n-\tfmov.dq\tdr0, r2\n-\tmovi\t7, r30\n-\tshlli\tr30, 29, r31\n-\tandc\tr1, r31, r1\n-\tblink\ttr1, r63\n-LOCAL(ct_r3_fp):\t/* Copy r3 from an FP register.  */\n-\t/* It is either dr0 or dr2.  */\n-\tmovi\t7, r30\n-\tshlri\tr1, 26, r32\n-\tshlli\tr30, 26, r31\n-\tandc\tr1, r31, r1\n-\tfmov.dq\tdr0, r3\n-\tbeqi/l\tr32, 4, tr1\n-\tfmov.dq\tdr2, r3\n-\tblink\ttr1, r63\n-LOCAL(ct_r4_fp):\t/* Copy r4 from an FP register.  */\n-\tshlri\tr1, 23 - 3, r34\n-\tandi\tr34, 3 << 3, r33\n-\taddi\tr33, LOCAL(ct_r4_fp_copy) - datalabel LOCAL(ct_r4_fp_base), r32\n-LOCAL(ct_r4_fp_base):\n-\tptrel/l\tr32, tr2\n-\tmovi\t7, r30\n-\tshlli\tr30, 23, r31\n-\tandc\tr1, r31, r1\n-\tblink\ttr2, r63\n-LOCAL(ct_r4_fp_copy):\n-\tfmov.dq\tdr0, r4\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr2, r4\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr4, r4\n-\tblink\ttr1, r63\n-LOCAL(ct_r5_fp):\t/* Copy r5 from an FP register.  */\n-\tshlri\tr1, 20 - 3, r34\n-\tandi\tr34, 3 << 3, r33\n-\taddi\tr33, LOCAL(ct_r5_fp_copy) - datalabel LOCAL(ct_r5_fp_base), r32\n-LOCAL(ct_r5_fp_base):\n-\tptrel/l\tr32, tr2\n-\tmovi\t7, r30\n-\tshlli\tr30, 20, r31\n-\tandc\tr1, r31, r1\n-\tblink\ttr2, r63\n-LOCAL(ct_r5_fp_copy):\n-\tfmov.dq\tdr0, r5\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr2, r5\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr4, r5\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr6, r5\n-\tblink\ttr1, r63\n-LOCAL(ct_r6_fph):\t/* Copy r6 from a high FP register.  */\n-\t/* It must be dr8.  */\n-\tfmov.dq\tdr8, r6\n-\tmovi\t15, r30\n-\tshlli\tr30, 16, r31\n-\tandc\tr1, r31, r1\n-\tblink\ttr1, r63\n-LOCAL(ct_r6_fpl):\t/* Copy r6 from a low FP register.  */\n-\tshlri\tr1, 16 - 3, r34\n-\tandi\tr34, 3 << 3, r33\n-\taddi\tr33, LOCAL(ct_r6_fp_copy) - datalabel LOCAL(ct_r6_fp_base), r32\n-LOCAL(ct_r6_fp_base):\n-\tptrel/l\tr32, tr2\n-\tmovi\t7, r30\n-\tshlli\tr30, 16, r31\n-\tandc\tr1, r31, r1\n-\tblink\ttr2, r63\n-LOCAL(ct_r6_fp_copy):\n-\tfmov.dq\tdr0, r6\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr2, r6\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr4, r6\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr6, r6\n-\tblink\ttr1, r63\n-LOCAL(ct_r7_fph):\t/* Copy r7 from a high FP register.  */\n-\t/* It is either dr8 or dr10.  */\n-\tmovi\t15 << 12, r31\n-\tshlri\tr1, 12, r32\n-\tandc\tr1, r31, r1\n-\tfmov.dq\tdr8, r7\n-\tbeqi/l\tr32, 8, tr1\n-\tfmov.dq\tdr10, r7\n-\tblink\ttr1, r63\n-LOCAL(ct_r7_fpl):\t/* Copy r7 from a low FP register.  */\n-\tshlri\tr1, 12 - 3, r34\n-\tandi\tr34, 3 << 3, r33\n-\taddi\tr33, LOCAL(ct_r7_fp_copy) - datalabel LOCAL(ct_r7_fp_base), r32\n-LOCAL(ct_r7_fp_base):\n-\tptrel/l\tr32, tr2\n-\tmovi\t7 << 12, r31\n-\tandc\tr1, r31, r1\n-\tblink\ttr2, r63\n-LOCAL(ct_r7_fp_copy):\n-\tfmov.dq\tdr0, r7\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr2, r7\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr4, r7\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr6, r7\n-\tblink\ttr1, r63\n-LOCAL(ct_r8_fph):\t/* Copy r8 from a high FP register.  */\n-\t/* It is either dr8 or dr10.  */\n-\tmovi\t15 << 8, r31\n-\tandi\tr1, 1 << 8, r32\n-\tandc\tr1, r31, r1\n-\tfmov.dq\tdr8, r8\n-\tbeq/l\tr32, r63, tr1\n-\tfmov.dq\tdr10, r8\n-\tblink\ttr1, r63\n-LOCAL(ct_r8_fpl):\t/* Copy r8 from a low FP register.  */\n-\tshlri\tr1, 8 - 3, r34\n-\tandi\tr34, 3 << 3, r33\n-\taddi\tr33, LOCAL(ct_r8_fp_copy) - datalabel LOCAL(ct_r8_fp_base), r32\n-LOCAL(ct_r8_fp_base):\n-\tptrel/l\tr32, tr2\n-\tmovi\t7 << 8, r31\n-\tandc\tr1, r31, r1\n-\tblink\ttr2, r63\n-LOCAL(ct_r8_fp_copy):\n-\tfmov.dq\tdr0, r8\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr2, r8\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr4, r8\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr6, r8\n-\tblink\ttr1, r63\n-LOCAL(ct_r9_fph):\t/* Copy r9 from a high FP register.  */\n-\t/* It is either dr8 or dr10.  */\n-\tmovi\t15 << 4, r31\n-\tandi\tr1, 1 << 4, r32\n-\tandc\tr1, r31, r1\n-\tfmov.dq\tdr8, r9\n-\tbeq/l\tr32, r63, tr1\n-\tfmov.dq\tdr10, r9\n-\tblink\ttr1, r63\n-LOCAL(ct_r9_fpl):\t/* Copy r9 from a low FP register.  */\n-\tshlri\tr1, 4 - 3, r34\n-\tandi\tr34, 3 << 3, r33\n-\taddi\tr33, LOCAL(ct_r9_fp_copy) - datalabel LOCAL(ct_r9_fp_base), r32\n-LOCAL(ct_r9_fp_base):\n-\tptrel/l\tr32, tr2\n-\tmovi\t7 << 4, r31\n-\tandc\tr1, r31, r1\n-\tblink\ttr2, r63\n-LOCAL(ct_r9_fp_copy):\n-\tfmov.dq\tdr0, r9\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr2, r9\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr4, r9\n-\tblink\ttr1, r63\n-\tfmov.dq\tdr6, r9\n-\tblink\ttr1, r63\n-LOCAL(ct_r2_ld):\t/* Copy r2 from a memory address.  */\n-\tpt/l\tLOCAL(ct_r2_load), tr2\n-\tmovi\t3, r30\n-\tshlli\tr30, 29, r31\n-\tand\tr1, r31, r32\n-\tandc\tr1, r31, r1\n-\tbeq/l\tr31, r32, tr2\n-\taddi.l\tr2, 8, r3\n-\tldx.q\tr2, r63, r2\n-\t/* Fall through.  */\n-LOCAL(ct_r3_ld):\t/* Copy r3 from a memory address.  */\n-\tpt/l\tLOCAL(ct_r3_load), tr2\n-\tmovi\t3, r30\n-\tshlli\tr30, 26, r31\n-\tand\tr1, r31, r32\n-\tandc\tr1, r31, r1\n-\tbeq/l\tr31, r32, tr2\n-\taddi.l\tr3, 8, r4\n-\tldx.q\tr3, r63, r3\n-LOCAL(ct_r4_ld):\t/* Copy r4 from a memory address.  */\n-\tpt/l\tLOCAL(ct_r4_load), tr2\n-\tmovi\t3, r30\n-\tshlli\tr30, 23, r31\n-\tand\tr1, r31, r32\n-\tandc\tr1, r31, r1\n-\tbeq/l\tr31, r32, tr2\n-\taddi.l\tr4, 8, r5\n-\tldx.q\tr4, r63, r4\n-LOCAL(ct_r5_ld):\t/* Copy r5 from a memory address.  */\n-\tpt/l\tLOCAL(ct_r5_load), tr2\n-\tmovi\t3, r30\n-\tshlli\tr30, 20, r31\n-\tand\tr1, r31, r32\n-\tandc\tr1, r31, r1\n-\tbeq/l\tr31, r32, tr2\n-\taddi.l\tr5, 8, r6\n-\tldx.q\tr5, r63, r5\n-LOCAL(ct_r6_ld):\t/* Copy r6 from a memory address.  */\n-\tpt/l\tLOCAL(ct_r6_load), tr2\n-\tmovi\t3 << 16, r31\n-\tand\tr1, r31, r32\n-\tandc\tr1, r31, r1\n-\tbeq/l\tr31, r32, tr2\n-\taddi.l\tr6, 8, r7\n-\tldx.q\tr6, r63, r6\n-LOCAL(ct_r7_ld):\t/* Copy r7 from a memory address.  */\n-\tpt/l\tLOCAL(ct_r7_load), tr2\n-\tmovi\t3 << 12, r31\n-\tand\tr1, r31, r32\n-\tandc\tr1, r31, r1\n-\tbeq/l\tr31, r32, tr2\n-\taddi.l\tr7, 8, r8\n-\tldx.q\tr7, r63, r7\n-LOCAL(ct_r8_ld):\t/* Copy r8 from a memory address.  */\n-\tpt/l\tLOCAL(ct_r8_load), tr2\n-\tmovi\t3 << 8, r31\n-\tand\tr1, r31, r32\n-\tandc\tr1, r31, r1\n-\tbeq/l\tr31, r32, tr2\n-\taddi.l\tr8, 8, r9\n-\tldx.q\tr8, r63, r8\n-LOCAL(ct_r9_ld):\t/* Copy r9 from a memory address.  */\n-\tpt/l\tLOCAL(ct_check_tramp), tr2\n-\tldx.q\tr9, r63, r9\n-\tblink\ttr2, r63\n-LOCAL(ct_r2_load):\n-\tldx.q\tr2, r63, r2\n-\tblink\ttr1, r63\n-LOCAL(ct_r3_load):\n-\tldx.q\tr3, r63, r3\n-\tblink\ttr1, r63\n-LOCAL(ct_r4_load):\n-\tldx.q\tr4, r63, r4\n-\tblink\ttr1, r63\n-LOCAL(ct_r5_load):\n-\tldx.q\tr5, r63, r5\n-\tblink\ttr1, r63\n-LOCAL(ct_r6_load):\n-\tldx.q\tr6, r63, r6\n-\tblink\ttr1, r63\n-LOCAL(ct_r7_load):\n-\tldx.q\tr7, r63, r7\n-\tblink\ttr1, r63\n-LOCAL(ct_r8_load):\n-\tldx.q\tr8, r63, r8\n-\tblink\ttr1, r63\n-LOCAL(ct_r2_pop):\t/* Pop r2 from the stack.  */\n-\tmovi\t1, r30\n-\tldx.q\tr15, r63, r2\n-\tshlli\tr30, 29, r31\n-\taddi.l\tr15, 8, r15\n-\tandc\tr1, r31, r1\n-\tblink\ttr1, r63\n-LOCAL(ct_r3_pop):\t/* Pop r3 from the stack.  */\n-\tmovi\t1, r30\n-\tldx.q\tr15, r63, r3\n-\tshlli\tr30, 26, r31\n-\taddi.l\tr15, 8, r15\n-\tandc\tr1, r31, r1\n-\tblink\ttr1, r63\n-LOCAL(ct_r4_pop):\t/* Pop r4 from the stack.  */\n-\tmovi\t1, r30\n-\tldx.q\tr15, r63, r4\n-\tshlli\tr30, 23, r31\n-\taddi.l\tr15, 8, r15\n-\tandc\tr1, r31, r1\n-\tblink\ttr1, r63\n-LOCAL(ct_r5_pop):\t/* Pop r5 from the stack.  */\n-\tmovi\t1, r30\n-\tldx.q\tr15, r63, r5\n-\tshlli\tr30, 20, r31\n-\taddi.l\tr15, 8, r15\n-\tandc\tr1, r31, r1\n-\tblink\ttr1, r63\n-LOCAL(ct_r6_pop):\t/* Pop r6 from the stack.  */\n-\tmovi\t1, r30\n-\tldx.q\tr15, r63, r6\n-\tshlli\tr30, 16, r31\n-\taddi.l\tr15, 8, r15\n-\tandc\tr1, r31, r1\n-\tblink\ttr1, r63\n-LOCAL(ct_r7_pop):\t/* Pop r7 from the stack.  */\n-\tldx.q\tr15, r63, r7\n-\tmovi\t1 << 12, r31\n-\taddi.l\tr15, 8, r15\n-\tandc\tr1, r31, r1\n-\tblink\ttr1, r63\n-LOCAL(ct_r8_pop):\t/* Pop r8 from the stack.  */\n-\tldx.q\tr15, r63, r8\n-\tmovi\t1 << 8, r31\n-\taddi.l\tr15, 8, r15\n-\tandc\tr1, r31, r1\n-\tblink\ttr1, r63\n-LOCAL(ct_pop_seq):\t/* Pop a sequence of registers off the stack.  */\n-\tandi\tr1, 7 << 1, r30\n-\tmovi\t(LOCAL(ct_end_of_pop_seq) >> 16) & 65535, r32\n-\tshlli\tr30, 2, r31\n-\tshori\tLOCAL(ct_end_of_pop_seq) & 65535, r32\n-\tsub.l\tr32, r31, r33\n-\tptabs/l\tr33, tr2\n-\tblink\ttr2, r63\n-LOCAL(ct_start_of_pop_seq):\t/* Beginning of pop sequence.  */\n-\tldx.q\tr15, r63, r3\n-\taddi.l\tr15, 8, r15\n-\tldx.q\tr15, r63, r4\n-\taddi.l\tr15, 8, r15\n-\tldx.q\tr15, r63, r5\n-\taddi.l\tr15, 8, r15\n-\tldx.q\tr15, r63, r6\n-\taddi.l\tr15, 8, r15\n-\tldx.q\tr15, r63, r7\n-\taddi.l\tr15, 8, r15\n-\tldx.q\tr15, r63, r8\n-\taddi.l\tr15, 8, r15\n-LOCAL(ct_r9_pop):\t/* Pop r9 from the stack.  */\n-\tldx.q\tr15, r63, r9\n-\taddi.l\tr15, 8, r15\n-LOCAL(ct_end_of_pop_seq): /* Label used to compute first pop instruction.  */\n-LOCAL(ct_check_tramp):\t/* Check whether we need a trampoline.  */\n-\tpt/u\tLOCAL(ct_ret_wide), tr2\n-\tandi\tr1, 1, r1\n-\tbne/u\tr1, r63, tr2\n-LOCAL(ct_call_func):\t/* Just branch to the function.  */\n-\tblink\ttr0, r63\n-LOCAL(ct_ret_wide):\t/* Call the function, so that we can unpack its \n-\t\t\t   64-bit return value.  */\n-\tadd.l\tr18, r63, r10\n-\tblink\ttr0, r18\n-\tptabs\tr10, tr0\n-#if __LITTLE_ENDIAN__\n-\tshari\tr2, 32, r3\n-\tadd.l\tr2, r63, r2\n-#else\n-\tadd.l\tr2, r63, r3\n-\tshari\tr2, 32, r2\n-#endif\n-\tblink\ttr0, r63\n-\n-\tENDFUNC(GLOBAL(GCC_shcompact_call_trampoline))\n-#endif /* L_shcompact_call_trampoline */\n-\n-#ifdef L_shcompact_return_trampoline\n-     /* This function does the converse of the code in `ret_wide'\n-\tabove.  It is tail-called by SHcompact functions returning\n-\t64-bit non-floating-point values, to pack the 32-bit values in\n-\tr2 and r3 into r2.  */\n-\n-\t.mode\tSHmedia\n-\t.section\t.text..SHmedia32, \"ax\"\n-\t.align\t2\n-\t.global\tGLOBAL(GCC_shcompact_return_trampoline)\n-\tHIDDEN_FUNC(GLOBAL(GCC_shcompact_return_trampoline))\n-GLOBAL(GCC_shcompact_return_trampoline):\n-\tptabs/l\tr18, tr0\n-#if __LITTLE_ENDIAN__\n-\taddz.l\tr2, r63, r2\n-\tshlli\tr3, 32, r3\n-#else\n-\taddz.l\tr3, r63, r3\n-\tshlli\tr2, 32, r2\n-#endif\n-\tor\tr3, r2, r2\n-\tblink\ttr0, r63\n-\n-\tENDFUNC(GLOBAL(GCC_shcompact_return_trampoline))\n-#endif /* L_shcompact_return_trampoline */\n-\n-#ifdef L_shcompact_incoming_args\n-\t.section\t.rodata\n-\t.align\t1\n-LOCAL(ia_main_table):\n-.word\t1 /* Invalid, just loop */\n-.word\tLOCAL(ia_r2_ld) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_r2_push) - datalabel LOCAL(ia_main_label)\n-.word\t1 /* Invalid, just loop */\n-.word\tLOCAL(ia_r3_ld) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_r3_push) - datalabel LOCAL(ia_main_label)\n-.word\t1 /* Invalid, just loop */\n-.word\tLOCAL(ia_r4_ld) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_r4_push) - datalabel LOCAL(ia_main_label)\n-.word\t1 /* Invalid, just loop */\n-.word\tLOCAL(ia_r5_ld) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_r5_push) - datalabel LOCAL(ia_main_label)\n-.word\t1 /* Invalid, just loop */\n-.word\t1 /* Invalid, just loop */\n-.word\tLOCAL(ia_r6_ld) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_r6_push) - datalabel LOCAL(ia_main_label)\n-.word\t1 /* Invalid, just loop */\n-.word\t1 /* Invalid, just loop */\n-.word\tLOCAL(ia_r7_ld) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_r7_push) - datalabel LOCAL(ia_main_label)\n-.word\t1 /* Invalid, just loop */\n-.word\t1 /* Invalid, just loop */\n-.word\tLOCAL(ia_r8_ld) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_r8_push) - datalabel LOCAL(ia_main_label)\n-.word\t1 /* Invalid, just loop */\n-.word\t1 /* Invalid, just loop */\n-.word\tLOCAL(ia_r9_ld) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_r9_push) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_push_seq) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_push_seq) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_r9_push) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_return) - datalabel LOCAL(ia_main_label)\n-.word\tLOCAL(ia_return) - datalabel LOCAL(ia_main_label)\n-\t.mode\tSHmedia\n-\t.section\t.text..SHmedia32, \"ax\"\n-\t.align\t2\n-\t\n-     /* This function stores 64-bit general-purpose registers back in\n-\tthe stack, and loads the address in which each register\n-\twas stored into itself.  The lower 32 bits of r17 hold the address\n-\tto begin storing, and the upper 32 bits of r17 hold the cookie.\n-\tIts execution time is linear on the\n-\tnumber of registers that actually have to be copied, and it is\n-\toptimized for structures larger than 64 bits, as opposed to\n-\tindividual `long long' arguments.  See sh.h for details on the\n-\tactual bit pattern.  */\n-\t\n-\t.global\tGLOBAL(GCC_shcompact_incoming_args)\n- \tFUNC(GLOBAL(GCC_shcompact_incoming_args))\n-GLOBAL(GCC_shcompact_incoming_args):\n-\tptabs/l\tr18, tr0\t/* Prepare to return.  */\n-\tshlri\tr17, 32, r0\t/* Load the cookie.  */\n-\tmovi\t((datalabel LOCAL(ia_main_table) - 31 * 2) >> 16) & 65535, r43\n-\tpt/l\tLOCAL(ia_loop), tr1\n-\tadd.l\tr17, r63, r17\n-\tshori\t((datalabel LOCAL(ia_main_table) - 31 * 2)) & 65535, r43\n-LOCAL(ia_loop):\n-\tnsb\tr0, r36\n-\tshlli\tr36, 1, r37\n-\tldx.w\tr43, r37, r38\n-LOCAL(ia_main_label):\n-\tptrel/l\tr38, tr2\n-\tblink\ttr2, r63\n-LOCAL(ia_r2_ld):\t/* Store r2 and load its address.  */\n-\tmovi\t3, r38\n-\tshlli\tr38, 29, r39\n-\tand\tr0, r39, r40\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r2\n-\tadd.l\tr17, r63, r2\n-\taddi.l\tr17, 8, r17\n-\tbeq/u\tr39, r40, tr1\n-LOCAL(ia_r3_ld):\t/* Store r3 and load its address.  */\n-\tmovi\t3, r38\n-\tshlli\tr38, 26, r39\n-\tand\tr0, r39, r40\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r3\n-\tadd.l\tr17, r63, r3\n-\taddi.l\tr17, 8, r17\n-\tbeq/u\tr39, r40, tr1\n-LOCAL(ia_r4_ld):\t/* Store r4 and load its address.  */\n-\tmovi\t3, r38\n-\tshlli\tr38, 23, r39\n-\tand\tr0, r39, r40\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r4\n-\tadd.l\tr17, r63, r4\n-\taddi.l\tr17, 8, r17\n-\tbeq/u\tr39, r40, tr1\n-LOCAL(ia_r5_ld):\t/* Store r5 and load its address.  */\n-\tmovi\t3, r38\n-\tshlli\tr38, 20, r39\n-\tand\tr0, r39, r40\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r5\n-\tadd.l\tr17, r63, r5\n-\taddi.l\tr17, 8, r17\n-\tbeq/u\tr39, r40, tr1\n-LOCAL(ia_r6_ld):\t/* Store r6 and load its address.  */\n-\tmovi\t3, r38\n-\tshlli\tr38, 16, r39\n-\tand\tr0, r39, r40\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r6\n-\tadd.l\tr17, r63, r6\n-\taddi.l\tr17, 8, r17\n-\tbeq/u\tr39, r40, tr1\n-LOCAL(ia_r7_ld):\t/* Store r7 and load its address.  */\n-\tmovi\t3 << 12, r39\n-\tand\tr0, r39, r40\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r7\n-\tadd.l\tr17, r63, r7\n-\taddi.l\tr17, 8, r17\n-\tbeq/u\tr39, r40, tr1\n-LOCAL(ia_r8_ld):\t/* Store r8 and load its address.  */\n-\tmovi\t3 << 8, r39\n-\tand\tr0, r39, r40\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r8\n-\tadd.l\tr17, r63, r8\n-\taddi.l\tr17, 8, r17\n-\tbeq/u\tr39, r40, tr1\n-LOCAL(ia_r9_ld):\t/* Store r9 and load its address.  */\n-\tstx.q\tr17, r63, r9\n-\tadd.l\tr17, r63, r9\n-\tblink\ttr0, r63\n-LOCAL(ia_r2_push):\t/* Push r2 onto the stack.  */\n-\tmovi\t1, r38\n-\tshlli\tr38, 29, r39\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r2\n-\taddi.l\tr17, 8, r17\n-\tblink\ttr1, r63\n-LOCAL(ia_r3_push):\t/* Push r3 onto the stack.  */\n-\tmovi\t1, r38\n-\tshlli\tr38, 26, r39\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r3\n-\taddi.l\tr17, 8, r17\n-\tblink\ttr1, r63\n-LOCAL(ia_r4_push):\t/* Push r4 onto the stack.  */\n-\tmovi\t1, r38\n-\tshlli\tr38, 23, r39\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r4\n-\taddi.l\tr17, 8, r17\n-\tblink\ttr1, r63\n-LOCAL(ia_r5_push):\t/* Push r5 onto the stack.  */\n-\tmovi\t1, r38\n-\tshlli\tr38, 20, r39\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r5\n-\taddi.l\tr17, 8, r17\n-\tblink\ttr1, r63\n-LOCAL(ia_r6_push):\t/* Push r6 onto the stack.  */\n-\tmovi\t1, r38\n-\tshlli\tr38, 16, r39\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r6\n-\taddi.l\tr17, 8, r17\n-\tblink\ttr1, r63\n-LOCAL(ia_r7_push):\t/* Push r7 onto the stack.  */\n-\tmovi\t1 << 12, r39\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r7\n-\taddi.l\tr17, 8, r17\n-\tblink\ttr1, r63\n-LOCAL(ia_r8_push):\t/* Push r8 onto the stack.  */\n-\tmovi\t1 << 8, r39\n-\tandc\tr0, r39, r0\n-\tstx.q\tr17, r63, r8\n-\taddi.l\tr17, 8, r17\n-\tblink\ttr1, r63\n-LOCAL(ia_push_seq):\t/* Push a sequence of registers onto the stack.  */\n-\tandi\tr0, 7 << 1, r38\n-\tmovi\t(LOCAL(ia_end_of_push_seq) >> 16) & 65535, r40\n-\tshlli\tr38, 2, r39\n-\tshori\tLOCAL(ia_end_of_push_seq) & 65535, r40\n-\tsub.l\tr40, r39, r41\n-\tptabs/l\tr41, tr2\n-\tblink\ttr2, r63\n-LOCAL(ia_stack_of_push_seq):\t /* Beginning of push sequence.  */\n-\tstx.q\tr17, r63, r3\n-\taddi.l\tr17, 8, r17\n-\tstx.q\tr17, r63, r4\n-\taddi.l\tr17, 8, r17\n-\tstx.q\tr17, r63, r5\n-\taddi.l\tr17, 8, r17\n-\tstx.q\tr17, r63, r6\n-\taddi.l\tr17, 8, r17\n-\tstx.q\tr17, r63, r7\n-\taddi.l\tr17, 8, r17\n-\tstx.q\tr17, r63, r8\n-\taddi.l\tr17, 8, r17\n-LOCAL(ia_r9_push):\t/* Push r9 onto the stack.  */\n-\tstx.q\tr17, r63, r9\n-LOCAL(ia_return):\t/* Return.  */\n-\tblink\ttr0, r63\n-LOCAL(ia_end_of_push_seq): /* Label used to compute the first push instruction.  */\n-\tENDFUNC(GLOBAL(GCC_shcompact_incoming_args))\n-#endif /* L_shcompact_incoming_args */\n-#endif\n-#if __SH5__\n-#ifdef L_nested_trampoline\n-#if __SH5__ == 32\n-\t.section\t.text..SHmedia32,\"ax\"\n-#else\n-\t.text\n-#endif\n-\t.align\t3 /* It is copied in units of 8 bytes in SHmedia mode.  */\n-\t.global\tGLOBAL(GCC_nested_trampoline)\n-\tHIDDEN_FUNC(GLOBAL(GCC_nested_trampoline))\n-GLOBAL(GCC_nested_trampoline):\n-\t.mode\tSHmedia\n-\tptrel/u\tr63, tr0\n-\tgettr\ttr0, r0\n-#if __SH5__ == 64\n-\tld.q\tr0, 24, r1\n-#else\n-\tld.l\tr0, 24, r1\n-#endif\n-\tptabs/l\tr1, tr1\n-#if __SH5__ == 64\n-\tld.q\tr0, 32, r1\n-#else\n-\tld.l\tr0, 28, r1\n-#endif\n-\tblink\ttr1, r63\n-\n-\tENDFUNC(GLOBAL(GCC_nested_trampoline))\n-#endif /* L_nested_trampoline */\n-#endif /* __SH5__ */\n-#if __SH5__ == 32\n-#ifdef L_push_pop_shmedia_regs\n-\t.section\t.text..SHmedia32,\"ax\"\n-\t.mode\tSHmedia\n-\t.align\t2\n-#ifndef __SH4_NOFPU__\t\n-\t.global\tGLOBAL(GCC_push_shmedia_regs)\n-\tFUNC(GLOBAL(GCC_push_shmedia_regs))\n-GLOBAL(GCC_push_shmedia_regs):\n-\taddi.l\tr15, -14*8, r15\n-\tfst.d\tr15, 13*8, dr62\n-\tfst.d\tr15, 12*8, dr60\n-\tfst.d\tr15, 11*8, dr58\n-\tfst.d\tr15, 10*8, dr56\n-\tfst.d\tr15,  9*8, dr54\n-\tfst.d\tr15,  8*8, dr52\n-\tfst.d\tr15,  7*8, dr50\n-\tfst.d\tr15,  6*8, dr48\n-\tfst.d\tr15,  5*8, dr46\n-\tfst.d\tr15,  4*8, dr44\n-\tfst.d\tr15,  3*8, dr42\n-\tfst.d\tr15,  2*8, dr40\n-\tfst.d\tr15,  1*8, dr38\n-\tfst.d\tr15,  0*8, dr36\n-#else /* ! __SH4_NOFPU__ */\n-\t.global\tGLOBAL(GCC_push_shmedia_regs_nofpu)\n-\tFUNC(GLOBAL(GCC_push_shmedia_regs_nofpu))\n-GLOBAL(GCC_push_shmedia_regs_nofpu):\n-#endif /* ! __SH4_NOFPU__ */\n-\tptabs/l\tr18, tr0\n-\taddi.l\tr15, -27*8, r15\n-\tgettr\ttr7, r62\n-\tgettr\ttr6, r61\n-\tgettr\ttr5, r60\n-\tst.q\tr15, 26*8, r62\n-\tst.q\tr15, 25*8, r61\n-\tst.q\tr15, 24*8, r60\n-\tst.q\tr15, 23*8, r59\n-\tst.q\tr15, 22*8, r58\n-\tst.q\tr15, 21*8, r57\n-\tst.q\tr15, 20*8, r56\n-\tst.q\tr15, 19*8, r55\n-\tst.q\tr15, 18*8, r54\n-\tst.q\tr15, 17*8, r53\n-\tst.q\tr15, 16*8, r52\n-\tst.q\tr15, 15*8, r51\n-\tst.q\tr15, 14*8, r50\n-\tst.q\tr15, 13*8, r49\n-\tst.q\tr15, 12*8, r48\n-\tst.q\tr15, 11*8, r47\n-\tst.q\tr15, 10*8, r46\n-\tst.q\tr15,  9*8, r45\n-\tst.q\tr15,  8*8, r44\n-\tst.q\tr15,  7*8, r35\n-\tst.q\tr15,  6*8, r34\n-\tst.q\tr15,  5*8, r33\n-\tst.q\tr15,  4*8, r32\n-\tst.q\tr15,  3*8, r31\n-\tst.q\tr15,  2*8, r30\n-\tst.q\tr15,  1*8, r29\n-\tst.q\tr15,  0*8, r28\n-\tblink\ttr0, r63\n-#ifndef __SH4_NOFPU__\t\n-\tENDFUNC(GLOBAL(GCC_push_shmedia_regs))\n-#else\n-\tENDFUNC(GLOBAL(GCC_push_shmedia_regs_nofpu))\n-#endif\n-#ifndef __SH4_NOFPU__\t\n-\t.global\tGLOBAL(GCC_pop_shmedia_regs)\n-\tFUNC(GLOBAL(GCC_pop_shmedia_regs))\n-GLOBAL(GCC_pop_shmedia_regs):\n-\tpt\t.L0, tr1\n-\tmovi\t41*8, r0\n-\tfld.d\tr15, 40*8, dr62\n-\tfld.d\tr15, 39*8, dr60\n-\tfld.d\tr15, 38*8, dr58\n-\tfld.d\tr15, 37*8, dr56\n-\tfld.d\tr15, 36*8, dr54\n-\tfld.d\tr15, 35*8, dr52\n-\tfld.d\tr15, 34*8, dr50\n-\tfld.d\tr15, 33*8, dr48\n-\tfld.d\tr15, 32*8, dr46\n-\tfld.d\tr15, 31*8, dr44\n-\tfld.d\tr15, 30*8, dr42\n-\tfld.d\tr15, 29*8, dr40\n-\tfld.d\tr15, 28*8, dr38\n-\tfld.d\tr15, 27*8, dr36\n-\tblink\ttr1, r63\n-#else /* ! __SH4_NOFPU__\t*/\n-\t.global\tGLOBAL(GCC_pop_shmedia_regs_nofpu)\n-\tFUNC(GLOBAL(GCC_pop_shmedia_regs_nofpu))\n-GLOBAL(GCC_pop_shmedia_regs_nofpu):\n-#endif /* ! __SH4_NOFPU__\t*/\n-\tmovi\t27*8, r0\n-.L0:\n-\tptabs\tr18, tr0\n-\tld.q\tr15, 26*8, r62\n-\tld.q\tr15, 25*8, r61\n-\tld.q\tr15, 24*8, r60\n-\tptabs\tr62, tr7\n-\tptabs\tr61, tr6\n-\tptabs\tr60, tr5\n-\tld.q\tr15, 23*8, r59\n-\tld.q\tr15, 22*8, r58\n-\tld.q\tr15, 21*8, r57\n-\tld.q\tr15, 20*8, r56\n-\tld.q\tr15, 19*8, r55\n-\tld.q\tr15, 18*8, r54\n-\tld.q\tr15, 17*8, r53\n-\tld.q\tr15, 16*8, r52\n-\tld.q\tr15, 15*8, r51\n-\tld.q\tr15, 14*8, r50\n-\tld.q\tr15, 13*8, r49\n-\tld.q\tr15, 12*8, r48\n-\tld.q\tr15, 11*8, r47\n-\tld.q\tr15, 10*8, r46\n-\tld.q\tr15,  9*8, r45\n-\tld.q\tr15,  8*8, r44\n-\tld.q\tr15,  7*8, r35\n-\tld.q\tr15,  6*8, r34\n-\tld.q\tr15,  5*8, r33\n-\tld.q\tr15,  4*8, r32\n-\tld.q\tr15,  3*8, r31\n-\tld.q\tr15,  2*8, r30\n-\tld.q\tr15,  1*8, r29\n-\tld.q\tr15,  0*8, r28\n-\tadd.l\tr15, r0, r15\n-\tblink\ttr0, r63\n-\n-#ifndef __SH4_NOFPU__\n-\tENDFUNC(GLOBAL(GCC_pop_shmedia_regs))\n-#else\n-\tENDFUNC(GLOBAL(GCC_pop_shmedia_regs_nofpu))\n-#endif\n-#endif /* __SH5__ == 32 */\n-#endif /* L_push_pop_shmedia_regs */\n \n #ifdef L_div_table\n-#if __SH5__\n-#if defined(__pic__) && __SHMEDIA__\n-\t.global\tGLOBAL(sdivsi3)\n-\tFUNC(GLOBAL(sdivsi3))\n-#if __SH5__ == 32\n-\t.section\t.text..SHmedia32,\"ax\"\n-#else\n-\t.text\n-#endif\n-#if 0\n-/* ??? FIXME: Presumably due to a linker bug, exporting data symbols\n-   in a text section does not work (at least for shared libraries):\n-   the linker sets the LSB of the address as if this was SHmedia code.  */\n-#define TEXT_DATA_BUG\n-#endif\n-\t.align\t2\n- // inputs: r4,r5\n- // clobbered: r1,r18,r19,r20,r21,r25,tr0\n- // result in r0\n- .global GLOBAL(sdivsi3)\n-GLOBAL(sdivsi3):\n-#ifdef TEXT_DATA_BUG\n- ptb datalabel Local_div_table,tr0\n-#else\n- ptb GLOBAL(div_table_internal),tr0\n-#endif\n- nsb r5, r1\n- shlld r5, r1, r25    // normalize; [-2 ..1, 1..2) in s2.62\n- shari r25, 58, r21   // extract 5(6) bit index (s2.4 with hole -1..1)\n- /* bubble */\n- gettr tr0,r20\n- ldx.ub r20, r21, r19 // u0.8\n- shari r25, 32, r25   // normalize to s2.30\n- shlli r21, 1, r21\n- muls.l r25, r19, r19 // s2.38\n- ldx.w r20, r21, r21  // s2.14\n-  ptabs r18, tr0\n- shari r19, 24, r19   // truncate to s2.14\n- sub r21, r19, r19    // some 11 bit inverse in s1.14\n- muls.l r19, r19, r21 // u0.28\n-  sub r63, r1, r1\n-  addi r1, 92, r1\n- muls.l r25, r21, r18 // s2.58\n- shlli r19, 45, r19   // multiply by two and convert to s2.58\n-  /* bubble */\n- sub r19, r18, r18\n- shari r18, 28, r18   // some 22 bit inverse in s1.30\n- muls.l r18, r25, r0  // s2.60\n-  muls.l r18, r4, r25 // s32.30\n-  /* bubble */\n- shari r0, 16, r19   // s-16.44\n- muls.l r19, r18, r19 // s-16.74\n-  shari r25, 63, r0\n-  shari r4, 14, r18   // s19.-14\n- shari r19, 30, r19   // s-16.44\n- muls.l r19, r18, r19 // s15.30\n-  xor r21, r0, r21    // You could also use the constant 1 << 27.\n-  add r21, r25, r21\n- sub r21, r19, r21\n- shard r21, r1, r21\n- sub r21, r0, r0\n- blink tr0, r63\n-\tENDFUNC(GLOBAL(sdivsi3))\n-/* This table has been generated by divtab.c .\n-Defects for bias -330:\n-   Max defect: 6.081536e-07 at -1.000000e+00\n-   Min defect: 2.849516e-08 at 1.030651e+00\n-   Max 2nd step defect: 9.606539e-12 at -1.000000e+00\n-   Min 2nd step defect: 0.000000e+00 at 0.000000e+00\n-   Defect at 1: 1.238659e-07\n-   Defect at -2: 1.061708e-07 */\n-#else /* ! __pic__ || ! __SHMEDIA__ */\n-\t.section\t.rodata\n-#endif /* __pic__ */\n-#if defined(TEXT_DATA_BUG) && defined(__pic__) && __SHMEDIA__\n-\t.balign 2\n-\t.type\tLocal_div_table,@object\n-\t.size\tLocal_div_table,128\n-/* negative division constants */\n-\t.word\t-16638\n-\t.word\t-17135\n-\t.word\t-17737\n-\t.word\t-18433\n-\t.word\t-19103\n-\t.word\t-19751\n-\t.word\t-20583\n-\t.word\t-21383\n-\t.word\t-22343\n-\t.word\t-23353\n-\t.word\t-24407\n-\t.word\t-25582\n-\t.word\t-26863\n-\t.word\t-28382\n-\t.word\t-29965\n-\t.word\t-31800\n-/* negative division factors */\n-\t.byte\t66\n-\t.byte\t70\n-\t.byte\t75\n-\t.byte\t81\n-\t.byte\t87\n-\t.byte\t93\n-\t.byte\t101\n-\t.byte\t109\n-\t.byte\t119\n-\t.byte\t130\n-\t.byte\t142\n-\t.byte\t156\n-\t.byte\t172\n-\t.byte\t192\n-\t.byte\t214\n-\t.byte\t241\n-\t.skip 16\n-Local_div_table:\n-\t.skip 16\n-/* positive division factors */\n-\t.byte\t241\n-\t.byte\t214\n-\t.byte\t192\n-\t.byte\t172\n-\t.byte\t156\n-\t.byte\t142\n-\t.byte\t130\n-\t.byte\t119\n-\t.byte\t109\n-\t.byte\t101\n-\t.byte\t93\n-\t.byte\t87\n-\t.byte\t81\n-\t.byte\t75\n-\t.byte\t70\n-\t.byte\t66\n-/* positive division constants */\n-\t.word\t31801\n-\t.word\t29966\n-\t.word\t28383\n-\t.word\t26864\n-\t.word\t25583\n-\t.word\t24408\n-\t.word\t23354\n-\t.word\t22344\n-\t.word\t21384\n-\t.word\t20584\n-\t.word\t19752\n-\t.word\t19104\n-\t.word\t18434\n-\t.word\t17738\n-\t.word\t17136\n-\t.word\t16639\n-\t.section\t.rodata\n-#endif /* TEXT_DATA_BUG */\n-\t.balign 2\n-\t.type\tGLOBAL(div_table),@object\n-\t.size\tGLOBAL(div_table),128\n-/* negative division constants */\n-\t.word\t-16638\n-\t.word\t-17135\n-\t.word\t-17737\n-\t.word\t-18433\n-\t.word\t-19103\n-\t.word\t-19751\n-\t.word\t-20583\n-\t.word\t-21383\n-\t.word\t-22343\n-\t.word\t-23353\n-\t.word\t-24407\n-\t.word\t-25582\n-\t.word\t-26863\n-\t.word\t-28382\n-\t.word\t-29965\n-\t.word\t-31800\n-/* negative division factors */\n-\t.byte\t66\n-\t.byte\t70\n-\t.byte\t75\n-\t.byte\t81\n-\t.byte\t87\n-\t.byte\t93\n-\t.byte\t101\n-\t.byte\t109\n-\t.byte\t119\n-\t.byte\t130\n-\t.byte\t142\n-\t.byte\t156\n-\t.byte\t172\n-\t.byte\t192\n-\t.byte\t214\n-\t.byte\t241\n-\t.skip 16\n-\t.global\tGLOBAL(div_table)\n-GLOBAL(div_table):\n-\tHIDDEN_ALIAS(div_table_internal,div_table)\n-\t.skip 16\n-/* positive division factors */\n-\t.byte\t241\n-\t.byte\t214\n-\t.byte\t192\n-\t.byte\t172\n-\t.byte\t156\n-\t.byte\t142\n-\t.byte\t130\n-\t.byte\t119\n-\t.byte\t109\n-\t.byte\t101\n-\t.byte\t93\n-\t.byte\t87\n-\t.byte\t81\n-\t.byte\t75\n-\t.byte\t70\n-\t.byte\t66\n-/* positive division constants */\n-\t.word\t31801\n-\t.word\t29966\n-\t.word\t28383\n-\t.word\t26864\n-\t.word\t25583\n-\t.word\t24408\n-\t.word\t23354\n-\t.word\t22344\n-\t.word\t21384\n-\t.word\t20584\n-\t.word\t19752\n-\t.word\t19104\n-\t.word\t18434\n-\t.word\t17738\n-\t.word\t17136\n-\t.word\t16639\n-\n-#elif defined (__SH2A__) || defined (__SH3__) || defined (__SH3E__) || defined (__SH4__) || defined (__SH4_SINGLE__) || defined (__SH4_SINGLE_ONLY__) || defined (__SH4_NOFPU__)\n+\n+#if defined (__SH2A__) || defined (__SH3__) || defined (__SH3E__) || defined (__SH4__) || defined (__SH4_SINGLE__) || defined (__SH4_SINGLE_ONLY__) || defined (__SH4_NOFPU__)\n /* This code uses shld, thus is not suitable for SH1 / SH2.  */\n \n /* Signed / unsigned division without use of FPU, optimized for SH4.\n@@ -3999,7 +2247,6 @@ LOCAL(div_table_inv):\n #endif /* L_div_table */\n \n #ifdef L_udiv_qrnnd_16\n-#if !__SHMEDIA__\n \tHIDDEN_FUNC(GLOBAL(udiv_qrnnd_16))\n \t/* r0: rn r1: qn */ /* r0: n1 r4: n0 r5: d r6: d1 */ /* r2: __m */\n \t/* n1 < d, but n1 might be larger than d1.  */\n@@ -4043,5 +2290,4 @@ GLOBAL(udiv_qrnnd_16):\n 0:\trts\n \tnop\n \tENDFUNC(GLOBAL(udiv_qrnnd_16))\n-#endif /* !__SHMEDIA__ */\n #endif /* L_udiv_qrnnd_16 */"}, {"sha": "65005beb2d14fadecaedd88aa90d43e288dc44ff", "filename": "libgcc/config/sh/linux-unwind.h", "status": "modified", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9129c8cfcd802fdad53e6f6be302e52690d6ec2a/libgcc%2Fconfig%2Fsh%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flinux-unwind.h?ref=9129c8cfcd802fdad53e6f6be302e52690d6ec2a", "patch": "@@ -33,14 +33,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <sys/ucontext.h>\n #include \"insn-constants.h\"\n \n-# if defined (__SH5__)\n-#define SH_DWARF_FRAME_GP0\t0\n-#define SH_DWARF_FRAME_FP0\t77\n-#define SH_DWARF_FRAME_BT0\t68\n-#define SH_DWARF_FRAME_PR_MEDIA\t18\n-#define SH_DWARF_FRAME_SR\t65\n-#define SH_DWARF_FRAME_FPSCR\t76\n-#else\n #define SH_DWARF_FRAME_GP0\t0\n #define SH_DWARF_FRAME_FP0\t25\n #define SH_DWARF_FRAME_XD0\t87\n@@ -52,96 +44,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define SH_DWARF_FRAME_SR\t22\n #define SH_DWARF_FRAME_FPUL\t23\n #define SH_DWARF_FRAME_FPSCR\t24\n-#endif /* defined (__SH5__) */\n-\n-#if defined (__SH5__)\n-\n-#define MD_FALLBACK_FRAME_STATE_FOR shmedia_fallback_frame_state\n-\n-static _Unwind_Reason_Code\n-shmedia_fallback_frame_state (struct _Unwind_Context *context,\n-\t\t\t      _Unwind_FrameState *fs)\n-{\n-  unsigned char *pc = context->ra;\n-  struct sigcontext *sc;\n-  long new_cfa;\n-  int i, r;\n-\n-  /* movi 0x10,r9; shori 0x77,r9; trapa\tr9; nop (sigreturn)  */\n-  /* movi 0x10,r9; shori 0xad,r9; trapa\tr9; nop (rt_sigreturn)  */\n-  if ((*(unsigned long *) (pc-1)  == 0xcc004090)\n-      && (*(unsigned long *) (pc+3)  == 0xc801dc90)\n-      && (*(unsigned long *) (pc+7)  == 0x6c91fff0)\n-      && (*(unsigned long *) (pc+11)  == 0x6ff0fff0))\n-    sc = context->cfa;\n-  else if ((*(unsigned long *) (pc-1)  == 0xcc004090)\n-\t   && (*(unsigned long *) (pc+3)  == 0xc802b490)\n-\t   && (*(unsigned long *) (pc+7)  == 0x6c91fff0)\n-\t   && (*(unsigned long *) (pc+11)  == 0x6ff0fff0))\n-    {\n-      struct rt_sigframe {\n-\tsiginfo_t *pinfo;\n-\tvoid *puc;\n-\tsiginfo_t info;\n-\tstruct ucontext uc;\n-      } *rt_ = context->cfa;\n-      /* The void * cast is necessary to avoid an aliasing warning.\n-         The aliasing warning is correct, but should not be a problem\n-         because it does not alias anything.  */\n-      sc = (struct sigcontext *) (void *) &rt_->uc.uc_mcontext;\n-    }\n-  else\n-    return _URC_END_OF_STACK;\n-\n-  new_cfa = sc->sc_regs[15];\n-  fs->regs.cfa_how = CFA_REG_OFFSET;\n-  fs->regs.cfa_reg = 15;\n-  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n-\n-  for (i = 0; i < 63; i++)\n-    {\n-      if (i == 15)\n-\tcontinue;\n-\n-      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n-      fs->regs.reg[i].loc.offset\n-\t= (long)&(sc->sc_regs[i]) - new_cfa;\n-    }\n-\n-  fs->regs.reg[SH_DWARF_FRAME_SR].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[SH_DWARF_FRAME_SR].loc.offset\n-    = (long)&(sc->sc_sr) - new_cfa;\n-\n-  r = SH_DWARF_FRAME_BT0;\n-  for (i = 0; i < 8; i++)\n-    {\n-      fs->regs.reg[r+i].how = REG_SAVED_OFFSET;\n-      fs->regs.reg[r+i].loc.offset\n-\t= (long)&(sc->sc_tregs[i]) - new_cfa;\n-    }\n-\n-  r = SH_DWARF_FRAME_FP0;\n-  for (i = 0; i < 32; i++)\n-    {\n-      fs->regs.reg[r+i].how = REG_SAVED_OFFSET;\n-      fs->regs.reg[r+i].loc.offset\n-\t= (long)&(sc->sc_fpregs[i]) - new_cfa;\n-    }\n-\n-  fs->regs.reg[SH_DWARF_FRAME_FPSCR].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[SH_DWARF_FRAME_FPSCR].loc.offset\n-    = (long)&(sc->sc_fpscr) - new_cfa;\n-\n-  /* We use the slot for the zero register to save return address.  */\n-  fs->regs.reg[63].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[63].loc.offset\n-    = (long)&(sc->sc_pc) - new_cfa;\n-  fs->retaddr_column = 63;\n-  fs->signal_frame = 1;\n-  return _URC_NO_REASON;\n-}\n-\n-#else /* defined (__SH5__) */\n \n #define MD_FALLBACK_FRAME_STATE_FOR sh_fallback_frame_state\n \n@@ -250,6 +152,5 @@ sh_fallback_frame_state (struct _Unwind_Context *context,\n   fs->signal_frame = 1;\n   return _URC_NO_REASON;\n }\n-#endif /* defined (__SH5__) */\n \n #endif /* inhibit_libc */"}, {"sha": "fa9950e03b2a8c359af957f206ce6dac8eb1c4a2", "filename": "libgcc/config/sh/t-sh64", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca535a4c158308a7a3a6486b6b66efb576da585/libgcc%2Fconfig%2Fsh%2Ft-sh64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca535a4c158308a7a3a6486b6b66efb576da585/libgcc%2Fconfig%2Fsh%2Ft-sh64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Ft-sh64?ref=cca535a4c158308a7a3a6486b6b66efb576da585", "patch": "@@ -1,6 +0,0 @@\n-LIB1ASMFUNCS = \\\n-  _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \\\n-  _shcompact_call_trampoline _shcompact_return_trampoline \\\n-  _shcompact_incoming_args _ic_invalidate _nested_trampoline \\\n-  _push_pop_shmedia_regs \\\n-  _udivdi3 _divdi3 _umoddi3 _moddi3 _div_table"}]}