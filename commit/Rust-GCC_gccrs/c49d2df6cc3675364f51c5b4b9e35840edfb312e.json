{"sha": "c49d2df6cc3675364f51c5b4b9e35840edfb312e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ5ZDJkZjZjYzM2NzUzNjRmNTFjNWI0YjllMzU4NDBlZGZiMzEyZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-10-05T18:55:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-10-05T18:55:54Z"}, "message": "gcc.c (set_multilib_dir): Don't access *end.\n\n\t* gcc.c (set_multilib_dir): Don't access *end.\n\tUse memcpy instead of strncpy.  Don't write beyond malloced buffer.\n\t(print_multilib_info): Don't show paths starting with \".:\".\n\t* genmultilib: Add new option, \"yes\" if multilibs are enabled.\n\tUpdate comments.  If multilibs not enabled, print .:${osdirout}\n\tfor each directory.  If multilibs are enabled, always print\n\t${dirout}:${osdirout}, even if the two are the same.\n\t* Makefile.in (s-mlib): Pass @enable_multilib@ to genmultilib.\n\tPass all MULTILIB_* variables to genmultilib even if\n\t--disable-multilib but MULTILIB_OSDIRNAMES is not empty.\n\nFrom-SVN: r57846", "tree": {"sha": "3f08c124b012b43d45c6dc5317707ba5f8e5e905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f08c124b012b43d45c6dc5317707ba5f8e5e905"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c49d2df6cc3675364f51c5b4b9e35840edfb312e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49d2df6cc3675364f51c5b4b9e35840edfb312e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c49d2df6cc3675364f51c5b4b9e35840edfb312e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c49d2df6cc3675364f51c5b4b9e35840edfb312e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d758c1db6bad001b7ff82cf36d075de21fa75e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d758c1db6bad001b7ff82cf36d075de21fa75e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d758c1db6bad001b7ff82cf36d075de21fa75e05"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "2019210cd249b2b00f24398d299adf7f5b566e9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49d2df6cc3675364f51c5b4b9e35840edfb312e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49d2df6cc3675364f51c5b4b9e35840edfb312e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c49d2df6cc3675364f51c5b4b9e35840edfb312e", "patch": "@@ -1,3 +1,16 @@\n+2002-10-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c (set_multilib_dir): Don't access *end.\n+\tUse memcpy instead of strncpy.  Don't write beyond malloced buffer.\n+\t(print_multilib_info): Don't show paths starting with \".:\".\n+\t* genmultilib: Add new option, \"yes\" if multilibs are enabled.\n+\tUpdate comments.  If multilibs not enabled, print .:${osdirout}\n+\tfor each directory.  If multilibs are enabled, always print\n+\t${dirout}:${osdirout}, even if the two are the same.\n+\t* Makefile.in (s-mlib): Pass @enable_multilib@ to genmultilib.\n+\tPass all MULTILIB_* variables to genmultilib even if\n+\t--disable-multilib but MULTILIB_OSDIRNAMES is not empty.\n+\n 2002-10-04  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixinc/inclhack.def(hpux11_abs):  use format fix"}, {"sha": "61a61b7d2e783ed8fe09a87777ebc8722fa61566", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49d2df6cc3675364f51c5b4b9e35840edfb312e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49d2df6cc3675364f51c5b4b9e35840edfb312e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c49d2df6cc3675364f51c5b4b9e35840edfb312e", "patch": "@@ -1061,7 +1061,8 @@ libgcc.a: $(LIBGCC_DEPS)\n # switches.\n multilib.h: s-mlib; @true\n s-mlib: $(srcdir)/genmultilib Makefile\n-\tif test @enable_multilib@ = yes; then \\\n+\tif test @enable_multilib@ = yes \\\n+\t   || test -n \"$(MULTILIB_OSDIRNAMES)\"; then \\\n \t  $(SHELL) $(srcdir)/genmultilib \\\n \t    \"$(MULTILIB_OPTIONS)\" \\\n \t    \"$(MULTILIB_DIRNAMES)\" \\\n@@ -1070,9 +1071,11 @@ s-mlib: $(srcdir)/genmultilib Makefile\n \t    \"$(MULTILIB_EXTRA_OPTS)\" \\\n \t    \"$(MULTILIB_EXCLUSIONS)\" \\\n \t    \"$(MULTILIB_OSDIRNAMES)\" \\\n+\t    \"@enable_multilib@\" \\\n \t    > tmp-mlib.h; \\\n \telse \\\n-\t  $(SHELL) $(srcdir)/genmultilib '' '' '' '' '' '' '' > tmp-mlib.h; \\\n+\t  $(SHELL) $(srcdir)/genmultilib '' '' '' '' '' '' '' no \\\n+\t    > tmp-mlib.h; \\\n \tfi\n \t$(SHELL) $(srcdir)/move-if-change tmp-mlib.h multilib.h\n \t$(STAMP) s-mlib"}, {"sha": "167dde77c396b13f7a2f64b6c11395bc8d8cf27f", "filename": "gcc/gcc.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49d2df6cc3675364f51c5b4b9e35840edfb312e/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49d2df6cc3675364f51c5b4b9e35840edfb312e/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c49d2df6cc3675364f51c5b4b9e35840edfb312e", "patch": "@@ -6926,11 +6926,11 @@ set_multilib_dir ()\n \n \t  while (q < end && *q != ':')\n \t    q++;\n-\t  if (*q == ':')\n+\t  if (q < end)\n \t    {\n \t      char *new_multilib_os_dir = xmalloc (end - q);\n-\t      strncpy (new_multilib_os_dir, q + 1, end - q - 1);\n-\t      new_multilib_os_dir[end - q] = '\\0';\n+\t      memcpy (new_multilib_os_dir, q + 1, end - q - 1);\n+\t      new_multilib_os_dir[end - q - 1] = '\\0';\n \t      multilib_os_dir = new_multilib_os_dir;\n \t      break;\n \t    }\n@@ -6986,6 +6986,12 @@ print_multilib_info ()\n \t  ++p;\n \t}\n \n+      /* When --disable-multilib was used but target defines\n+\t MULTILIB_OSDIRNAMES, entries starting with .: are there just\n+\t to find multilib_os_dir, so skip them from output.  */\n+      if (this_path[0] == '.' && this_path[1] == ':')\n+\tskip = 1;\n+\n       /* Check for matches with the multilib_exclusions. We don't bother\n          with the '!' in either list. If any of the exclusion rules match\n          all of its options with the select rule, we skip it.  */"}, {"sha": "ca3b71bdfa3dfd0af269b09dd1c41993aadda3e6", "filename": "gcc/genmultilib", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c49d2df6cc3675364f51c5b4b9e35840edfb312e/gcc%2Fgenmultilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c49d2df6cc3675364f51c5b4b9e35840edfb312e/gcc%2Fgenmultilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmultilib?ref=c49d2df6cc3675364f51c5b4b9e35840edfb312e", "patch": "@@ -68,6 +68,9 @@\n # The difference is that second argument describes multilib directories\n # in GCC conventions, while this one the OS multilib convention.\n \n+# The last option should be \"yes\" if multilibs are enabled.  If it is not\n+# \"yes\", all GCC multilib dir names will be \".\".\n+\n # The output looks like\n #   #define MULTILIB_MATCHES \"\\\n #   SUBDIRECTORY OPTIONS;\\\n@@ -85,7 +88,7 @@\n #   genmultilib 'm64/m32 mno-app-regs|mcmodel=medany' '64 32 alt'\n #\t\t'mcmodel?medany=mcmodel?medmid' 'm32/mno-app-regs* m32/mcmodel=*'\n #\t\t'' 'm32/!m64/mno-app-regs m32/!m64/mcmodel=medany'\n-#\t\t'../lib64 ../lib32 alt'\n+#\t\t'../lib64 ../lib32 alt' yes\n # This produces:\n #   \". !m64 !m32 !mno-app-regs !mcmodel=medany;\",\n #   \"64:../lib64 m64 !m32 !mno-app-regs !mcmodel=medany;\",\n@@ -113,6 +116,7 @@ exceptions=$4\n extra=$5\n exclusions=$6\n osdirnames=$7\n+enable_multilib=$8\n \n echo \"static const char *const multilib_raw[] = {\"\n \n@@ -292,9 +296,18 @@ for combo in ${combinations}; do\n     osdirout=`echo ${combo} | sed ${toosdirnames}`\n     # Remove the leading and trailing slashes.\n     osdirout=`echo ${osdirout} | sed -e 's|^/||' -e 's|/$||g'`\n-    if [ \"x${dirout}\" != \"x${osdirout}\" ]; then\n+    if [ \"x${enable_multilib}\" != xyes ]; then\n+      dirout=\".:${osdirout}\"\n+    else\n       dirout=\"${dirout}:${osdirout}\"\n     fi\n+  else\n+    if [ \"x${enable_multilib}\" != xyes ]; then\n+      # genmultilib with --disable-multilib should be\n+      # called with '' '' '' '' '' '' '' no\n+      # if MULTILIB_OSDIRNAMES is empty.\n+      exit 1\n+    fi\n   fi\n \n   # Look through the options.  We must output each option that is"}]}