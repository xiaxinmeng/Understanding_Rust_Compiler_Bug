{"sha": "a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3YjJiNzFhODZkODZkNDNhODQ1ZTdlM2M3ZDVjMWZhYmI3YmNkNg==", "commit": {"author": {"name": "Larin Hennessy", "email": "larin@science.oregonstate.edu", "date": "2003-05-23T18:19:21Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-23T18:19:21Z"}, "message": "explow.c (allocate_dynamic_stack_space): Remove call to gen_probe.\n\n2003-05-23  Larin Hennessy <larin@science.oregonstate.edu>\n\t    Zack Weinberg <zack@codesourcery.com>\n\n\t* explow.c (allocate_dynamic_stack_space): Remove call to gen_probe.\n\t* config/m68k/m68k.c (m68k_output_function_prologue):\n\tRemove code under #if NEED_PROBE.\n\t* config/m68k/m68k.h: Don't define NEED_PROBE.\n\t* config/m68k/m68k.md: Remove \"probe\" insn.\n\t* doc/md.texi: Remove documentation of \"probe\" pattern.\n\nCo-Authored-By: Zack Weinberg <zack@codesourcery.com>\n\nFrom-SVN: r67125", "tree": {"sha": "18f9dfdd3e4148ee3f19e0374e0d0a5c982aace9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18f9dfdd3e4148ee3f19e0374e0d0a5c982aace9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/comments", "author": null, "committer": null, "parents": [{"sha": "24bcc7214c19457d189acf509a2bd5dcfc0e20fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24bcc7214c19457d189acf509a2bd5dcfc0e20fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24bcc7214c19457d189acf509a2bd5dcfc0e20fd"}], "stats": {"total": 51, "additions": 10, "deletions": 41}, "files": [{"sha": "8c33e66e4074bd2f87be11f91887bf8ac4d556ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6", "patch": "@@ -1,3 +1,13 @@\n+2003-05-23  Larin Hennessy <larin@science.oregonstate.edu>\n+\t    Zack Weinberg <zack@codesourcery.com>\n+\n+\t* explow.c (allocate_dynamic_stack_space): Remove call to gen_probe.\n+\t* config/m68k/m68k.c (m68k_output_function_prologue):\n+\tRemove code under #if NEED_PROBE.\n+\t* config/m68k/m68k.h: Don't define NEED_PROBE.\n+\t* config/m68k/m68k.md: Remove \"probe\" insn.\n+\t* doc/md.texi: Remove documentation of \"probe\" pattern.\n+\n 2003-05-23  Dorit Naishlos  <gcchaifa@il.ibm.com>\n \n \t* config/rs6000/rs6000.md (save_fpregs_{si,di}): Add branch attribute."}, {"sha": "8f49f3cbd3d81ff0feeeb5fdd0f57be85070be78", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6", "patch": "@@ -519,14 +519,6 @@ m68k_output_function_prologue (stream, size)\n         num_saved_regs++;\n       }\n \n-#if NEED_PROBE\n-#ifdef MOTOROLA\n-  asm_fprintf (stream, \"\\ttst.l %d(%Rsp)\\n\", NEED_PROBE - num_saved_regs * 4);\n-#else\n-  asm_fprintf (stream, \"\\ttstl %Rsp@(%d)\\n\", NEED_PROBE - num_saved_regs * 4);\n-#endif\n-#endif\n-\n   /* If the stack limit is not a symbol, check it here.  \n      This has the disadvantage that it may be too late...  */\n   if (current_function_limit_stack)"}, {"sha": "a3f04e6766cfcba0aa2497a83e9e337577f6b3a8", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6", "patch": "@@ -671,11 +671,6 @@ enum reg_class {\n    makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n \n-/* Nonzero if we need to generate stack-probe insns.\n-   On most systems they are not needed.\n-   When they are needed, define this as the stack offset to probe at.  */\n-#define NEED_PROBE 0\n-\n /* Define this if the nominal address of the stack frame\n    is at the high-address end of the local variables;\n    that is, each additional local variable allocated"}, {"sha": "50039e3a1aba465cfb84ba913c29c4b9bd678d12", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6", "patch": "@@ -7000,15 +7000,6 @@\n   \"\"\n   \"nop\")\n \n-(define_insn \"probe\"\n- [(reg:SI 15)]\n- \"NEED_PROBE\"\n- \"*\n-{\n-  operands[0] = plus_constant (stack_pointer_rtx, NEED_PROBE);\n-  return \\\"tstl %a0\\\";\n-}\")\n-\n ;; Used for frameless functions which save no regs and allocate no locals.\n (define_insn \"return\"\n   [(return)]"}, {"sha": "d26fa232ad60a0c5fcc3243a20106a9c47a6d3f3", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6", "patch": "@@ -3270,18 +3270,6 @@ Some machines require other operations such as stack probes or\n maintaining the back chain.  Define this pattern to emit those\n operations in addition to updating the stack pointer.\n \n-@cindex @code{probe} instruction pattern\n-@item @samp{probe}\n-Some machines require instructions to be executed after space is\n-allocated from the stack, for example to generate a reference at\n-the bottom of the stack.\n-\n-If you need to emit instructions before the stack has been adjusted,\n-put them into the @samp{allocate_stack} pattern.  Otherwise, define\n-this pattern to emit the required instructions.\n-\n-No operands are provided.\n-\n @cindex @code{check_stack} instruction pattern\n @item @samp{check_stack}\n If stack checking cannot be done on your system by probing the stack with"}, {"sha": "da7e2b797b987f01664b392665912b2ee30f6625", "filename": "gcc/explow.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=a27b2b71a86d86d43a845e7e3c7d5c1fabb7bcd6", "patch": "@@ -1448,13 +1448,6 @@ allocate_dynamic_stack_space (size, target, known_align)\n \t\t\t    NULL_RTX, 1);\n     }\n \n-  /* Some systems require a particular insn to refer to the stack\n-     to make the pages exist.  */\n-#ifdef HAVE_probe\n-  if (HAVE_probe)\n-    emit_insn (gen_probe ());\n-#endif\n-\n   /* Record the new stack level for nonlocal gotos.  */\n   if (nonlocal_goto_handler_slots != 0)\n     emit_stack_save (SAVE_NONLOCAL, &nonlocal_goto_stack_level, NULL_RTX);"}]}