{"sha": "660a0ebdf668ed52fe75cd55380e37526ba8543b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYwYTBlYmRmNjY4ZWQ1MmZlNzVjZDU1MzgwZTM3NTI2YmE4NTQzYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "2000-04-15T00:00:02Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-04-15T00:00:02Z"}, "message": "Fix glibc math testsuite failures.\n\n\t* config/ia64/lib1funcs.asm (__divdi3, __moddi3, __udivdi3, __umoddi3):\n\tUse .s1 not .s0 for all FP instructions.\n\nFrom-SVN: r33160", "tree": {"sha": "d17e1577d4003df956589b2f6a2e5283df4b1e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d17e1577d4003df956589b2f6a2e5283df4b1e23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/660a0ebdf668ed52fe75cd55380e37526ba8543b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660a0ebdf668ed52fe75cd55380e37526ba8543b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/660a0ebdf668ed52fe75cd55380e37526ba8543b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660a0ebdf668ed52fe75cd55380e37526ba8543b/comments", "author": null, "committer": null, "parents": [{"sha": "f2d5f0cca244fc70acb45fbe557bd22411175f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d5f0cca244fc70acb45fbe557bd22411175f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d5f0cca244fc70acb45fbe557bd22411175f1b"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "1b520f8bed67d25e0ae087ebdd2e7ad5f6043296", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660a0ebdf668ed52fe75cd55380e37526ba8543b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660a0ebdf668ed52fe75cd55380e37526ba8543b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=660a0ebdf668ed52fe75cd55380e37526ba8543b", "patch": "@@ -1,3 +1,8 @@\n+Fri Apr 14 16:58:45 2000  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* config/ia64/lib1funcs.asm (__divdi3, __moddi3, __udivdi3, __umoddi3):\n+\tUse .s1 not .s0 for all FP instructions.\n+\n 2000-04-14  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpplex.c (cpp_output_tokens, cpp_scan_buffer_nooutput): New public"}, {"sha": "ea17112bba4d719ee43e0329eb53251f9c2fb9fd", "filename": "gcc/config/ia64/lib1funcs.asm", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660a0ebdf668ed52fe75cd55380e37526ba8543b/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660a0ebdf668ed52fe75cd55380e37526ba8543b/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flib1funcs.asm?ref=660a0ebdf668ed52fe75cd55380e37526ba8543b", "patch": "@@ -100,7 +100,7 @@ __divdi3:\n \tfcvt.xf f9 = f9\n \t;;\n \t// Compute the reciprocal approximation.\n-\tfrcpa f10, p6 = f8, f9\n+\tfrcpa.s1 f10, p6 = f8, f9\n \t;;\n \t// 3 Newton-Raphson iterations.\n (p6)\tfma.s1 f11 = farg0, f10, f0\n@@ -119,10 +119,10 @@ __divdi3:\n \t;;\n (p6)\tfnma.s1 f8 = f9, f11, f8\n \t;;\n-(p6)\tfma f10 = f8, f10, f11\n+(p6)\tfma.s1 f10 = f8, f10, f11\n \t;;\n \t// Round quotient to an integer.\n-\tfcvt.fx.trunc f8 = f10\n+\tfcvt.fx.trunc.s1 f8 = f10\n \t;;\n \t// Transfer result to GP registers.\n \tgetf.sig ret0 = f8\n@@ -160,7 +160,7 @@ __moddi3:\n \tfcvt.xf f9 = f9\n \t;;\n \t// Compute the reciprocal approximation.\n-\tfrcpa f10, p6 = f8, f9\n+\tfrcpa.s1 f10, p6 = f8, f9\n \t;;\n \t// 3 Newton-Raphson iterations.\n (p6)\tfma.s1 f11 = farg0, f10, f0\n@@ -179,19 +179,19 @@ __moddi3:\n \t;;\n (p6)\tfnma.s1 f12 = f9, f11, f8\n \t;;\n-(p6)\tfma f10 = f12, f10, f11\n+(p6)\tfma.s1 f10 = f12, f10, f11\n \t;;\n \t// Round quotient to an integer.\n-\tfcvt.fx.trunc f10 = f10\n+\tfcvt.fx.trunc.s1 f10 = f10\n \t;;\n \t// Renormalize.\n \tfcvt.xf f10 = f10\n \t;;\n \t// Compute remainder.\n-\tfnma f8 = f10, f9, f8\n+\tfnma.s1 f8 = f10, f9, f8\n \t;;\n \t// Round remainder to an integer.\n-\tfcvt.fx.trunc f8 = f8\n+\tfcvt.fx.trunc.s1 f8 = f8\n \t;;\n \t// Transfer result to GP registers.\n \tgetf.sig ret0 = f8\n@@ -225,11 +225,11 @@ __udivdi3:\n \tsetf.sig f9 = in1\n \t;;\n \t// Convert the inputs to FP, to avoid FP software-assist faults.\n-\tfcvt.xuf f8 = f8\n-\tfcvt.xuf f9 = f9\n+\tfcvt.xuf.s1 f8 = f8\n+\tfcvt.xuf.s1 f9 = f9\n \t;;\n \t// Compute the reciprocal approximation.\n-\tfrcpa f10, p6 = f8, f9\n+\tfrcpa.s1 f10, p6 = f8, f9\n \t;;\n \t// 3 Newton-Raphson iterations.\n (p6)\tfma.s1 f11 = farg0, f10, f0\n@@ -248,10 +248,10 @@ __udivdi3:\n \t;;\n (p6)\tfnma.s1 f8 = f9, f11, f8\n \t;;\n-(p6)\tfma f10 = f8, f10, f11\n+(p6)\tfma.s1 f10 = f8, f10, f11\n \t;;\n \t// Round quotient to an unsigned integer.\n-\tfcvt.fxu.trunc f8 = f10\n+\tfcvt.fxu.trunc.s1 f8 = f10\n \t;;\n \t// Transfer result to GP registers.\n \tgetf.sig ret0 = f8\n@@ -285,11 +285,11 @@ __umoddi3:\n \tsetf.sig f9 = in1\n \t;;\n \t// Convert the inputs to FP, to avoid FP software assist faults.\n-\tfcvt.xuf f8 = f8\n-\tfcvt.xuf f9 = f9\n+\tfcvt.xuf.s1 f8 = f8\n+\tfcvt.xuf.s1 f9 = f9\n \t;;\n \t// Compute the reciprocal approximation.\n-\tfrcpa f10, p6 = f8, f9\n+\tfrcpa.s1 f10, p6 = f8, f9\n \t;;\n \t// 3 Newton-Raphson iterations.\n (p6)\tfma.s1 f11 = farg0, f10, f0\n@@ -308,19 +308,19 @@ __umoddi3:\n \t;;\n (p6)\tfnma.s1 f12 = f9, f11, f8\n \t;;\n-(p6)\tfma f10 = f12, f10, f11\n+(p6)\tfma.s1 f10 = f12, f10, f11\n \t;;\n \t// Round quotient to an unsigned integer.\n-\tfcvt.fxu.trunc f10 = f10\n+\tfcvt.fxu.trunc.s1 f10 = f10\n \t;;\n \t// Renormalize.\n-\tfcvt.xuf f10 = f10\n+\tfcvt.xuf.s1 f10 = f10\n \t;;\n \t// Compute remainder.\n-\tfnma f8 = f10, f9, f8\n+\tfnma.s1 f8 = f10, f9, f8\n \t;;\n \t// Round remainder to an integer.\n-\tfcvt.fxu.trunc f8 = f8\n+\tfcvt.fxu.trunc.s1 f8 = f8\n \t;;\n \t// Transfer result to GP registers.\n \tgetf.sig ret0 = f8"}]}