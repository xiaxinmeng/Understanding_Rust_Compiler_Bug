{"sha": "06db992005654ed7993b9f7696e2c34751f82db2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZkYjk5MjAwNTY1NGVkNzk5M2I5Zjc2OTZlMmMzNDc1MWY4MmRiMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-23T10:13:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-23T10:13:12Z"}, "message": "Add constexpr to <iterator> and <array> for C++17\n\n\t* include/bits/c++config (_GLIBCXX17_CONSTEXPR): Define.\n\t* include/bits/range_access.h (begin, end, rbegin, rend, crbegin)\n\t(crend): Add _GLIBCXX17_CONSTEXPR as per P0031R0.\n\t* include/bits/stl_iterator.h (reverse_iterator, move_iterator)\n\t(__make_reverse_iterator, make_reverse_iterator, make_move_iterator):\n\tLikewise.\n\t* include/bits/stl_iterator_base_funcs.h (__distance, __advance): Add\n\t_GLIBCXX14_CONSTEXPR.\n\t(distance, advance, next, prev): Add _GLIBCXX17_CONSTEXPR.\n\t* include/std/array (array::begin, array::end, array::rbegin)\n\t(array::rend, array::cbegin, array:cend, array::crbegin)\n\t(array::crend, array::operator[], array::at, array::front)\n\t(array::back, array::data): Likewise.\n\t* testsuite/24_iterators/headers/iterator/range_access.cc: Replace\n\twith separate tests for C++11, C++14, and C++17.\n\t* testsuite/24_iterators/headers/iterator/range_access_c++11.cc: New.\n\t* testsuite/24_iterators/headers/iterator/range_access_c++14.cc: New.\n\t* testsuite/24_iterators/headers/iterator/range_access_c++17.cc: New.\n\nFrom-SVN: r239690", "tree": {"sha": "83e76da6cbb230216e97ba2baa9fed4240101792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83e76da6cbb230216e97ba2baa9fed4240101792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06db992005654ed7993b9f7696e2c34751f82db2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06db992005654ed7993b9f7696e2c34751f82db2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06db992005654ed7993b9f7696e2c34751f82db2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06db992005654ed7993b9f7696e2c34751f82db2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1135a1330cf66964e516fcd3f64beeaa7a4da848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1135a1330cf66964e516fcd3f64beeaa7a4da848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1135a1330cf66964e516fcd3f64beeaa7a4da848"}], "stats": {"total": 370, "additions": 261, "deletions": 109}, "files": [{"sha": "ab0c91b3e5ec90d4c4cab58a47a715a29578d86d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=06db992005654ed7993b9f7696e2c34751f82db2", "patch": "@@ -1,3 +1,24 @@\n+2016-08-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX17_CONSTEXPR): Define.\n+\t* include/bits/range_access.h (begin, end, rbegin, rend, crbegin)\n+\t(crend): Add _GLIBCXX17_CONSTEXPR as per P0031R0.\n+\t* include/bits/stl_iterator.h (reverse_iterator, move_iterator)\n+\t(__make_reverse_iterator, make_reverse_iterator, make_move_iterator):\n+\tLikewise.\n+\t* include/bits/stl_iterator_base_funcs.h (__distance, __advance): Add\n+\t_GLIBCXX14_CONSTEXPR.\n+\t(distance, advance, next, prev): Add _GLIBCXX17_CONSTEXPR.\n+\t* include/std/array (array::begin, array::end, array::rbegin)\n+\t(array::rend, array::cbegin, array:cend, array::crbegin)\n+\t(array::crend, array::operator[], array::at, array::front)\n+\t(array::back, array::data): Likewise.\n+\t* testsuite/24_iterators/headers/iterator/range_access.cc: Replace\n+\twith separate tests for C++11, C++14, and C++17.\n+\t* testsuite/24_iterators/headers/iterator/range_access_c++11.cc: New.\n+\t* testsuite/24_iterators/headers/iterator/range_access_c++14.cc: New.\n+\t* testsuite/24_iterators/headers/iterator/range_access_c++17.cc: New.\n+\n 2016-08-22  Tim Shen  <timshen@google.com>\n \n \tSplit _M_dfs() into smaller functions."}, {"sha": "656ef78101256f196ae4a7d1dde275254ad609a2", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=06db992005654ed7993b9f7696e2c34751f82db2", "patch": "@@ -111,6 +111,14 @@\n # endif\n #endif\n \n+#ifndef _GLIBCXX17_CONSTEXPR\n+# if __cplusplus > 201402L\n+#  define _GLIBCXX17_CONSTEXPR constexpr\n+# else\n+#  define _GLIBCXX17_CONSTEXPR\n+# endif\n+#endif\n+\n // Macro for noexcept, to support in mixed 03/0x mode.\n #ifndef _GLIBCXX_NOEXCEPT\n # if __cplusplus >= 201103L"}, {"sha": "27cc8ede45838a9135f8294660cac57308291af5", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=06db992005654ed7993b9f7696e2c34751f82db2", "patch": "@@ -48,7 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     begin(_Container& __cont) -> decltype(__cont.begin())\n     { return __cont.begin(); }\n \n@@ -58,7 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     begin(const _Container& __cont) -> decltype(__cont.begin())\n     { return __cont.begin(); }\n \n@@ -68,7 +68,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     end(_Container& __cont) -> decltype(__cont.end())\n     { return __cont.end(); }\n \n@@ -78,7 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     end(const _Container& __cont) -> decltype(__cont.end())\n     { return __cont.end(); }\n \n@@ -138,7 +138,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     rbegin(_Container& __cont) -> decltype(__cont.rbegin())\n     { return __cont.rbegin(); }\n \n@@ -148,7 +148,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     rbegin(const _Container& __cont) -> decltype(__cont.rbegin())\n     { return __cont.rbegin(); }\n \n@@ -158,7 +158,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     rend(_Container& __cont) -> decltype(__cont.rend())\n     { return __cont.rend(); }\n \n@@ -168,7 +168,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     rend(const _Container& __cont) -> decltype(__cont.rend())\n     { return __cont.rend(); }\n \n@@ -178,7 +178,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __arr  Array.\n    */\n   template<typename _Tp, size_t _Nm>\n-    inline reverse_iterator<_Tp*>\n+    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>\n     rbegin(_Tp (&__arr)[_Nm])\n     { return reverse_iterator<_Tp*>(__arr + _Nm); }\n \n@@ -188,7 +188,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __arr  Array.\n    */\n   template<typename _Tp, size_t _Nm>\n-    inline reverse_iterator<_Tp*>\n+    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Tp*>\n     rend(_Tp (&__arr)[_Nm])\n     { return reverse_iterator<_Tp*>(__arr); }\n \n@@ -198,7 +198,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __il  initializer_list.\n    */\n   template<typename _Tp>\n-    inline reverse_iterator<const _Tp*>\n+    inline _GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp*>\n     rbegin(initializer_list<_Tp> __il)\n     { return reverse_iterator<const _Tp*>(__il.end()); }\n \n@@ -208,7 +208,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __il  initializer_list.\n    */\n   template<typename _Tp>\n-    inline reverse_iterator<const _Tp*>\n+    inline _GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp*>\n     rend(initializer_list<_Tp> __il)\n     { return reverse_iterator<const _Tp*>(__il.begin()); }\n \n@@ -218,7 +218,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))\n     { return std::rbegin(__cont); }\n \n@@ -228,7 +228,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __cont  Container.\n    */\n   template<typename _Container>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     crend(const _Container& __cont) -> decltype(std::rend(__cont))\n     { return std::rend(__cont); }\n "}, {"sha": "037e9661f6c4baca304739c4cc37f0f852fbdfc1", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 71, "deletions": 61, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=06db992005654ed7993b9f7696e2c34751f82db2", "patch": "@@ -65,6 +65,10 @@\n #include <bits/move.h>\n #include <bits/ptr_traits.h>\n \n+#if __cplusplus > 201402L\n+# define __cpp_lib_array_constexpr 201603\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -118,17 +122,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       */\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 235 No specification of default ctor for reverse_iterator\n+      _GLIBCXX17_CONSTEXPR\n       reverse_iterator() : current() { }\n \n       /**\n        *  This %iterator will move in the opposite direction that @p x does.\n       */\n-      explicit\n+      explicit _GLIBCXX17_CONSTEXPR\n       reverse_iterator(iterator_type __x) : current(__x) { }\n \n       /**\n        *  The copy constructor is normal.\n       */\n+      _GLIBCXX17_CONSTEXPR\n       reverse_iterator(const reverse_iterator& __x)\n       : current(__x.current) { }\n \n@@ -137,13 +143,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  underlying %iterator can be converted to the type of @c current.\n       */\n       template<typename _Iter>\n+\t_GLIBCXX17_CONSTEXPR\n         reverse_iterator(const reverse_iterator<_Iter>& __x)\n \t: current(__x.base()) { }\n \n       /**\n        *  @return  @c current, the %iterator used for underlying work.\n       */\n-      iterator_type\n+      _GLIBCXX17_CONSTEXPR iterator_type\n       base() const\n       { return current; }\n \n@@ -157,7 +164,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *           @c *x remains valid after @c x has been modified or\n        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823\n       */\n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       operator*() const\n       {\n \t_Iterator __tmp = current;\n@@ -169,7 +176,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  This requires that @c --current is dereferenceable.\n       */\n-      pointer\n+      _GLIBCXX17_CONSTEXPR pointer\n       operator->() const\n       { return &(operator*()); }\n \n@@ -178,7 +185,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Decrements the underlying iterator.\n       */\n-      reverse_iterator&\n+      _GLIBCXX17_CONSTEXPR reverse_iterator&\n       operator++()\n       {\n \t--current;\n@@ -190,7 +197,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Decrements the underlying iterator.\n       */\n-      reverse_iterator\n+      _GLIBCXX17_CONSTEXPR reverse_iterator\n       operator++(int)\n       {\n \treverse_iterator __tmp = *this;\n@@ -203,7 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Increments the underlying iterator.\n       */\n-      reverse_iterator&\n+      _GLIBCXX17_CONSTEXPR reverse_iterator&\n       operator--()\n       {\n \t++current;\n@@ -215,7 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Increments the underlying iterator.\n       */\n-      reverse_iterator\n+      _GLIBCXX17_CONSTEXPR reverse_iterator\n       operator--(int)\n       {\n \treverse_iterator __tmp = *this;\n@@ -228,7 +235,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  The underlying iterator must be a Random Access Iterator.\n       */\n-      reverse_iterator\n+      _GLIBCXX17_CONSTEXPR reverse_iterator\n       operator+(difference_type __n) const\n       { return reverse_iterator(current - __n); }\n \n@@ -238,7 +245,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Moves the underlying iterator backwards @a __n steps.\n        *  The underlying iterator must be a Random Access Iterator.\n       */\n-      reverse_iterator&\n+      _GLIBCXX17_CONSTEXPR reverse_iterator&\n       operator+=(difference_type __n)\n       {\n \tcurrent -= __n;\n@@ -250,7 +257,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  The underlying iterator must be a Random Access Iterator.\n       */\n-      reverse_iterator\n+      _GLIBCXX17_CONSTEXPR reverse_iterator\n       operator-(difference_type __n) const\n       { return reverse_iterator(current + __n); }\n \n@@ -260,7 +267,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Moves the underlying iterator forwards @a __n steps.\n        *  The underlying iterator must be a Random Access Iterator.\n       */\n-      reverse_iterator&\n+      _GLIBCXX17_CONSTEXPR reverse_iterator&\n       operator-=(difference_type __n)\n       {\n \tcurrent += __n;\n@@ -272,7 +279,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  The underlying iterator must be a Random Access Iterator.\n       */\n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       operator[](difference_type __n) const\n       { return *(*this + __n); }\n     };\n@@ -288,95 +295,96 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n   */\n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const reverse_iterator<_Iterator>& __x,\n \t       const reverse_iterator<_Iterator>& __y)\n     { return __x.base() == __y.base(); }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator<(const reverse_iterator<_Iterator>& __x,\n \t      const reverse_iterator<_Iterator>& __y)\n     { return __y.base() < __x.base(); }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator!=(const reverse_iterator<_Iterator>& __x,\n \t       const reverse_iterator<_Iterator>& __y)\n     { return !(__x == __y); }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator>(const reverse_iterator<_Iterator>& __x,\n \t      const reverse_iterator<_Iterator>& __y)\n     { return __y < __x; }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator<=(const reverse_iterator<_Iterator>& __x,\n \t       const reverse_iterator<_Iterator>& __y)\n     { return !(__y < __x); }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const reverse_iterator<_Iterator>& __x,\n \t       const reverse_iterator<_Iterator>& __y)\n     { return !(__x < __y); }\n \n   template<typename _Iterator>\n-    inline typename reverse_iterator<_Iterator>::difference_type\n+    inline _GLIBCXX17_CONSTEXPR\n+    typename reverse_iterator<_Iterator>::difference_type\n     operator-(const reverse_iterator<_Iterator>& __x,\n \t      const reverse_iterator<_Iterator>& __y)\n     { return __y.base() - __x.base(); }\n \n   template<typename _Iterator>\n-    inline reverse_iterator<_Iterator>\n+    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>\n     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n \t      const reverse_iterator<_Iterator>& __x)\n     { return reverse_iterator<_Iterator>(__x.base() - __n); }\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 280. Comparison of reverse_iterator to const reverse_iterator.\n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     { return __x.base() == __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator<(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n     { return __y.base() < __x.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator!=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     { return !(__x == __y); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator>(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n     { return __y < __x; }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator<=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     { return !(__y < __x); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n     { return !(__x < __y); }\n \n   template<typename _IteratorL, typename _IteratorR>\n #if __cplusplus >= 201103L\n     // DR 685.\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     operator-(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n     -> decltype(__y.base() - __x.base())\n@@ -391,7 +399,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n   // Same as C++14 make_reverse_iterator but used in C++03 mode too.\n   template<typename _Iterator>\n-    inline reverse_iterator<_Iterator>\n+    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>\n     __make_reverse_iterator(_Iterator __i)\n     { return reverse_iterator<_Iterator>(__i); }\n \n@@ -402,7 +410,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // DR 2285. make_reverse_iterator\n   /// Generator function for reverse_iterator.\n   template<typename _Iterator>\n-    inline reverse_iterator<_Iterator>\n+    inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>\n     make_reverse_iterator(_Iterator __i)\n     { return reverse_iterator<_Iterator>(__i); }\n # endif\n@@ -1018,82 +1026,84 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t typename remove_reference<__base_ref>::type&&,\n \t\t\t __base_ref>::type\t\treference;\n \n+      _GLIBCXX17_CONSTEXPR\n       move_iterator()\n       : _M_current() { }\n \n-      explicit\n+      explicit _GLIBCXX17_CONSTEXPR\n       move_iterator(iterator_type __i)\n       : _M_current(__i) { }\n \n       template<typename _Iter>\n+\t_GLIBCXX17_CONSTEXPR\n \tmove_iterator(const move_iterator<_Iter>& __i)\n \t: _M_current(__i.base()) { }\n \n-      iterator_type\n+      _GLIBCXX17_CONSTEXPR iterator_type\n       base() const\n       { return _M_current; }\n \n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       operator*() const\n       { return static_cast<reference>(*_M_current); }\n \n-      pointer\n+      _GLIBCXX17_CONSTEXPR pointer\n       operator->() const\n       { return _M_current; }\n \n-      move_iterator&\n+      _GLIBCXX17_CONSTEXPR move_iterator&\n       operator++()\n       {\n \t++_M_current;\n \treturn *this;\n       }\n \n-      move_iterator\n+      _GLIBCXX17_CONSTEXPR move_iterator\n       operator++(int)\n       {\n \tmove_iterator __tmp = *this;\n \t++_M_current;\n \treturn __tmp;\n       }\n \n-      move_iterator&\n+      _GLIBCXX17_CONSTEXPR move_iterator&\n       operator--()\n       {\n \t--_M_current;\n \treturn *this;\n       }\n \n-      move_iterator\n+      _GLIBCXX17_CONSTEXPR move_iterator\n       operator--(int)\n       {\n \tmove_iterator __tmp = *this;\n \t--_M_current;\n \treturn __tmp;\n       }\n \n-      move_iterator\n+      _GLIBCXX17_CONSTEXPR move_iterator\n       operator+(difference_type __n) const\n       { return move_iterator(_M_current + __n); }\n \n-      move_iterator&\n+      _GLIBCXX17_CONSTEXPR move_iterator&\n       operator+=(difference_type __n)\n       {\n \t_M_current += __n;\n \treturn *this;\n       }\n \n-      move_iterator\n+      _GLIBCXX17_CONSTEXPR move_iterator\n       operator-(difference_type __n) const\n       { return move_iterator(_M_current - __n); }\n     \n-      move_iterator&\n+      _GLIBCXX17_CONSTEXPR move_iterator&\n       operator-=(difference_type __n)\n       { \n \t_M_current -= __n;\n \treturn *this;\n       }\n \n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       operator[](difference_type __n) const\n       { return std::move(_M_current[__n]); }\n     };\n@@ -1102,108 +1112,108 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // why there are always 2 versions for most of the move_iterator\n   // operators.\n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n     { return __x.base() == __y.base(); }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const move_iterator<_Iterator>& __x,\n \t       const move_iterator<_Iterator>& __y)\n     { return __x.base() == __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator!=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n     { return !(__x == __y); }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator!=(const move_iterator<_Iterator>& __x,\n \t       const move_iterator<_Iterator>& __y)\n     { return !(__x == __y); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator<(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n     { return __x.base() < __y.base(); }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator<(const move_iterator<_Iterator>& __x,\n \t      const move_iterator<_Iterator>& __y)\n     { return __x.base() < __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator<=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n     { return !(__y < __x); }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator<=(const move_iterator<_Iterator>& __x,\n \t       const move_iterator<_Iterator>& __y)\n     { return !(__y < __x); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator>(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n     { return __y < __x; }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator>(const move_iterator<_Iterator>& __x,\n \t      const move_iterator<_Iterator>& __y)\n     { return __y < __x; }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n     { return !(__x < __y); }\n \n   template<typename _Iterator>\n-    inline bool\n+    inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const move_iterator<_Iterator>& __x,\n \t       const move_iterator<_Iterator>& __y)\n     { return !(__x < __y); }\n \n   // DR 685.\n   template<typename _IteratorL, typename _IteratorR>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     operator-(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n     -> decltype(__x.base() - __y.base())\n     { return __x.base() - __y.base(); }\n \n   template<typename _Iterator>\n-    inline auto\n+    inline _GLIBCXX17_CONSTEXPR auto\n     operator-(const move_iterator<_Iterator>& __x,\n \t      const move_iterator<_Iterator>& __y)\n     -> decltype(__x.base() - __y.base())\n     { return __x.base() - __y.base(); }\n \n   template<typename _Iterator>\n-    inline move_iterator<_Iterator>\n+    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>\n     operator+(typename move_iterator<_Iterator>::difference_type __n,\n \t      const move_iterator<_Iterator>& __x)\n     { return __x + __n; }\n \n   template<typename _Iterator>\n-    inline move_iterator<_Iterator>\n+    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>\n     make_move_iterator(_Iterator __i)\n     { return move_iterator<_Iterator>(__i); }\n \n   template<typename _Iterator, typename _ReturnType\n     = typename conditional<__move_if_noexcept_cond\n       <typename iterator_traits<_Iterator>::value_type>::value,\n                 _Iterator, move_iterator<_Iterator>>::type>\n-    inline _ReturnType\n+    inline _GLIBCXX17_CONSTEXPR _ReturnType\n     __make_move_if_noexcept_iterator(_Iterator __i)\n     { return _ReturnType(__i); }\n \n@@ -1212,7 +1222,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _ReturnType\n     = typename conditional<__move_if_noexcept_cond<_Tp>::value,\n \t\t\t   const _Tp*, move_iterator<_Tp*>>::type>\n-    inline _ReturnType\n+    inline _GLIBCXX17_CONSTEXPR _ReturnType\n     __make_move_if_noexcept_iterator(_Tp* __i)\n     { return _ReturnType(__i); }\n "}, {"sha": "1fc646cf3d973ff0a153439e1e2e4f54ac62c18a", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=06db992005654ed7993b9f7696e2c34751f82db2", "patch": "@@ -75,7 +75,8 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _InputIterator>\n-    inline typename iterator_traits<_InputIterator>::difference_type\n+    inline _GLIBCXX14_CONSTEXPR\n+    typename iterator_traits<_InputIterator>::difference_type\n     __distance(_InputIterator __first, _InputIterator __last,\n                input_iterator_tag)\n     {\n@@ -92,7 +93,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _RandomAccessIterator>\n-    inline typename iterator_traits<_RandomAccessIterator>::difference_type\n+    inline _GLIBCXX14_CONSTEXPR\n+    typename iterator_traits<_RandomAccessIterator>::difference_type\n     __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,\n                random_access_iterator_tag)\n     {\n@@ -131,7 +133,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  and are constant time.  For other %iterator classes they are linear time.\n   */\n   template<typename _InputIterator>\n-    inline typename iterator_traits<_InputIterator>::difference_type\n+    inline _GLIBCXX17_CONSTEXPR\n+    typename iterator_traits<_InputIterator>::difference_type\n     distance(_InputIterator __first, _InputIterator __last)\n     {\n       // concept requirements -- taken care of in __distance\n@@ -140,7 +143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _InputIterator, typename _Distance>\n-    inline void\n+    inline _GLIBCXX14_CONSTEXPR void\n     __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)\n     {\n       // concept requirements\n@@ -151,7 +154,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _BidirectionalIterator, typename _Distance>\n-    inline void\n+    inline _GLIBCXX14_CONSTEXPR void\n     __advance(_BidirectionalIterator& __i, _Distance __n,\n \t      bidirectional_iterator_tag)\n     {\n@@ -167,7 +170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _RandomAccessIterator, typename _Distance>\n-    inline void\n+    inline _GLIBCXX14_CONSTEXPR void\n     __advance(_RandomAccessIterator& __i, _Distance __n,\n               random_access_iterator_tag)\n     {\n@@ -190,7 +193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  and are constant time.  For other %iterator classes they are linear time.\n   */\n   template<typename _InputIterator, typename _Distance>\n-    inline void\n+    inline _GLIBCXX17_CONSTEXPR void\n     advance(_InputIterator& __i, _Distance __n)\n     {\n       // concept requirements -- taken care of in __advance\n@@ -201,7 +204,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n \n   template<typename _ForwardIterator>\n-    inline _ForwardIterator\n+    inline _GLIBCXX17_CONSTEXPR _ForwardIterator\n     next(_ForwardIterator __x, typename\n \t iterator_traits<_ForwardIterator>::difference_type __n = 1)\n     {\n@@ -213,7 +216,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _BidirectionalIterator>\n-    inline _BidirectionalIterator\n+    inline _GLIBCXX17_CONSTEXPR _BidirectionalIterator\n     prev(_BidirectionalIterator __x, typename\n \t iterator_traits<_BidirectionalIterator>::difference_type __n = 1) \n     {"}, {"sha": "3ab0355cf08a711392a101e9c367d6d569778c88", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=06db992005654ed7993b9f7696e2c34751f82db2", "patch": "@@ -122,51 +122,51 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators.\n-      iterator\n+      _GLIBCXX17_CONSTEXPR iterator\n       begin() noexcept\n       { return iterator(data()); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       begin() const noexcept\n       { return const_iterator(data()); }\n \n-      iterator\n+      _GLIBCXX17_CONSTEXPR iterator\n       end() noexcept\n       { return iterator(data() + _Nm); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       end() const noexcept\n       { return const_iterator(data() + _Nm); }\n \n-      reverse_iterator\n+      _GLIBCXX17_CONSTEXPR reverse_iterator\n       rbegin() noexcept\n       { return reverse_iterator(end()); }\n \n-      const_reverse_iterator\n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       rbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n-      reverse_iterator\n+      _GLIBCXX17_CONSTEXPR reverse_iterator\n       rend() noexcept\n       { return reverse_iterator(begin()); }\n \n-      const_reverse_iterator\n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       rend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       cbegin() const noexcept\n       { return const_iterator(data()); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       cend() const noexcept\n       { return const_iterator(data() + _Nm); }\n \n-      const_reverse_iterator\n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n-      const_reverse_iterator\n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n@@ -181,15 +181,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       empty() const noexcept { return size() == 0; }\n \n       // Element access.\n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       operator[](size_type __n) noexcept\n       { return _AT_Type::_S_ref(_M_elems, __n); }\n \n       constexpr const_reference\n       operator[](size_type __n) const noexcept\n       { return _AT_Type::_S_ref(_M_elems, __n); }\n \n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       at(size_type __n)\n       {\n \tif (__n >= _Nm)\n@@ -211,15 +211,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       front() noexcept\n       { return *begin(); }\n \n       constexpr const_reference\n       front() const noexcept\n       { return _AT_Type::_S_ref(_M_elems, 0); }\n \n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       back() noexcept\n       { return _Nm ? *(end() - 1) : *end(); }\n \n@@ -230,11 +230,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n  \t           : _AT_Type::_S_ref(_M_elems, 0);\n       }\n \n-      pointer\n+      _GLIBCXX17_CONSTEXPR pointer\n       data() noexcept\n       { return _AT_Type::_S_ptr(_M_elems); }\n \n-      const_pointer\n+      _GLIBCXX17_CONSTEXPR const_pointer\n       data() const noexcept\n       { return _AT_Type::_S_ptr(_M_elems); }\n     };"}, {"sha": "6961a20883445fc4a7add4251dd1cb59f206611d", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/range_access_c++11.cc", "status": "renamed", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B11.cc?ref=06db992005654ed7993b9f7696e2c34751f82db2", "patch": "@@ -1,4 +1,5 @@\n-// { dg-do compile { target c++11 } }\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n \n // Copyright (C) 2010-2016 Free Software Foundation, Inc.\n //\n@@ -27,11 +28,6 @@ namespace std\n   template<class C> auto end(C& c) -> decltype(c.end());\n   template<class C> auto end(const C& c) -> decltype(c.end());\n \n-#if __cplusplus >= 201402L\n-  template<class T, size_t N> constexpr T* begin(T (&array)[N]);\n-  template<class T, size_t N> constexpr T* end(T (&array)[N]);\n-#else\n   template<class T, size_t N> T* begin(T (&array)[N]);\n   template<class T, size_t N> T* end(T (&array)[N]);\n-#endif\n }", "previous_filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/range_access.cc"}, {"sha": "6f39b56323ee8bc04613456c73efabc5fb31c539", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/range_access_c++14.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B14.cc?ref=06db992005654ed7993b9f7696e2c34751f82db2", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+\n+namespace std\n+{\n+  template<class C> auto begin(C& c) -> decltype(c.begin());\n+  template<class C> auto begin(const C& c) -> decltype(c.begin());\n+\n+  template<class C> auto end(C& c) -> decltype(c.end());\n+  template<class C> auto end(const C& c) -> decltype(c.end());\n+\n+  template<class T, size_t N> constexpr T* begin(T (&array)[N]);\n+  template<class T, size_t N> constexpr T* end(T (&array)[N]);\n+\n+  template<class C> auto cbegin(const C& c) -> decltype(c.begin());\n+  template<class C> auto cend(const C& c) -> decltype(c.end());\n+\n+  template<class C> auto rbegin(C& c) -> decltype(c.rbegin());\n+  template<class C> auto rbegin(const C& c) -> decltype(c.rbegin());\n+\n+  template<class C> auto rend(C& c) -> decltype(c.rend());\n+  template<class C> auto rend(const C& c) -> decltype(c.rend());\n+\n+  template<class T, size_t N>\n+    reverse_iterator<T*> rbegin(T (&array)[N]);\n+  template<class T, size_t N>\n+    reverse_iterator<T*> rend(T (&array)[N]);\n+\n+  template<class E>\n+    reverse_iterator<const E*> rbegin(initializer_list<E>);\n+  template<class E>\n+    reverse_iterator<const E*> rend(initializer_list<E>);\n+\n+  template<class C>\n+    auto crbegin(const C& c) -> decltype(std::rbegin(c));\n+  template<class C>\n+    auto cend(const C& c) -> decltype(std::rend(c));\n+}"}, {"sha": "3318809f3e78199c0b579289f0a0464c81d50b32", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/range_access_c++17.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B17.cc?ref=06db992005654ed7993b9f7696e2c34751f82db2", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <iterator>\n+\n+namespace std\n+{\n+  template<class C> constexpr auto begin(C& c) -> decltype(c.begin());\n+  template<class C> constexpr auto begin(const C& c) -> decltype(c.begin());\n+\n+  template<class C> constexpr auto end(C& c) -> decltype(c.end());\n+  template<class C> constexpr auto end(const C& c) -> decltype(c.end());\n+\n+  template<class T, size_t N> constexpr T* begin(T (&array)[N]);\n+  template<class T, size_t N> constexpr T* end(T (&array)[N]);\n+\n+  template<class C> constexpr auto cbegin(const C& c) -> decltype(c.begin());\n+  template<class C> constexpr auto cend(const C& c) -> decltype(c.end());\n+\n+  template<class C> constexpr auto rbegin(C& c) -> decltype(c.rbegin());\n+  template<class C> constexpr auto rbegin(const C& c) -> decltype(c.rbegin());\n+\n+  template<class C> constexpr auto rend(C& c) -> decltype(c.rend());\n+  template<class C> constexpr auto rend(const C& c) -> decltype(c.rend());\n+\n+  template<class T, size_t N>\n+    constexpr reverse_iterator<T*> rbegin(T (&array)[N]);\n+  template<class T, size_t N>\n+    constexpr reverse_iterator<T*> rend(T (&array)[N]);\n+\n+  template<class E>\n+    constexpr reverse_iterator<const E*> rbegin(initializer_list<E>);\n+  template<class E>\n+    constexpr reverse_iterator<const E*> rend(initializer_list<E>);\n+\n+  template<class C>\n+    constexpr auto crbegin(const C& c) -> decltype(std::rbegin(c));\n+  template<class C>\n+    constexpr auto cend(const C& c) -> decltype(std::rend(c));\n+}"}, {"sha": "874f3de1eb88e7cee37d8c716451250c33d0a2b7", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06db992005654ed7993b9f7696e2c34751f82db2/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=06db992005654ed7993b9f7696e2c34751f82db2", "patch": "@@ -25,7 +25,7 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 324 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 332 }\n \n // \"template argument 1 is invalid\"\n // { dg-prune-output \"tuple:993\" }"}]}