{"sha": "25bdcbc5242faed11b2f58c72c64cb2b0165d681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjViZGNiYzUyNDJmYWVkMTFiMmY1OGM3MmM2NGNiMmIwMTY1ZDY4MQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-08-17T21:50:48Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-08-17T21:50:48Z"}, "message": "decl.c (finit_leg_identifier_node): New global.\n\n2000-08-15  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * decl.c (finit_leg_identifier_node): New global.\n        (init_decl_processing): Use `finit$' to initialize\n        finit_identifier_node. Use `$finit$' to initialize\n        finit_leg_identifier_node.\n        * expr.c (expand_java_field_op): Use ID_FINIT_P.\n        * java-tree.h (finit_identifier_node): Changed attached comment.\n        (finit_leg_identifier_node): New declaration.\n        (ID_FINIT_P): Take finit_identifier_node and\n        finit_leg_identifier_node into account. This is a backward\n        compatibility hack.\n\n(http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00664.html\n See also the matching Java run-time patch:\n http://sources.redhat.com/ml/java-discuss/2000-08/msg00031.html)\n\nFrom-SVN: r35768", "tree": {"sha": "d6762210ff12f7bb57f95f7b1fd99819031fa631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6762210ff12f7bb57f95f7b1fd99819031fa631"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25bdcbc5242faed11b2f58c72c64cb2b0165d681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bdcbc5242faed11b2f58c72c64cb2b0165d681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25bdcbc5242faed11b2f58c72c64cb2b0165d681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25bdcbc5242faed11b2f58c72c64cb2b0165d681/comments", "author": null, "committer": null, "parents": [{"sha": "1492cacbf99161cbd34d92ae575b5e2de9a63fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1492cacbf99161cbd34d92ae575b5e2de9a63fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1492cacbf99161cbd34d92ae575b5e2de9a63fe7"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "99578ff0e0566a66f6e5b36a6bd4285a7dd2d10a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bdcbc5242faed11b2f58c72c64cb2b0165d681/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bdcbc5242faed11b2f58c72c64cb2b0165d681/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=25bdcbc5242faed11b2f58c72c64cb2b0165d681", "patch": "@@ -1,3 +1,16 @@\n+2000-08-15  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* decl.c (finit_leg_identifier_node): New global.\n+\t(init_decl_processing): Use `finit$' to initialize\n+\tfinit_identifier_node. Use `$finit$' to initialize\n+\tfinit_leg_identifier_node.\n+\t* expr.c (expand_java_field_op): Use ID_FINIT_P.\n+\t* java-tree.h (finit_identifier_node): Changed attached comment.\n+\t(finit_leg_identifier_node): New declaration.\n+\t(ID_FINIT_P): Take finit_identifier_node and\n+\tfinit_leg_identifier_node into account. This is a backward\n+\tcompatibility hack.\n+\n 2000-08-14  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* jcf-write.c (generate_bytecode_conditional): Re-installed lost\n@@ -40,7 +53,7 @@ Sun Aug 13 09:41:49 2000  Anthony Green  <green@redhat.com>\n \t`case' statement.\n \t(patch_assignment): Set DECL_INITIAL on integral final local.\n \n-2000-08-07  Alexandre Petit-Bianco  <apbianco@cygnus.com\n+2000-08-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (build_dot_class_method_invocation): Changed parameter\n \tname to `type.' Build signature from `type' and convert it to a"}, {"sha": "f57ed0157db87b4cdef5257d767edac8c9cb64ac", "filename": "gcc/java/decl.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bdcbc5242faed11b2f58c72c64cb2b0165d681/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bdcbc5242faed11b2f58c72c64cb2b0165d681/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=25bdcbc5242faed11b2f58c72c64cb2b0165d681", "patch": "@@ -360,6 +360,7 @@ tree TYPE_identifier_node;\n tree init_identifier_node;\n tree clinit_identifier_node;\n tree finit_identifier_node;\n+tree finit_leg_identifier_node;\n tree void_signature_node;\n tree length_identifier_node;\n tree this_identifier_node;\n@@ -646,7 +647,12 @@ init_decl_processing ()\n   TYPE_identifier_node = get_identifier (\"TYPE\");\n   init_identifier_node = get_identifier (\"<init>\");\n   clinit_identifier_node = get_identifier (\"<clinit>\");\n-  finit_identifier_node = get_identifier (\"$finit$\");\n+  /* Legacy `$finit$' special method identifier. This needs to be\n+     recognized as equivalent to `finit$' but isn't generated anymore.  */\n+  finit_leg_identifier_node = get_identifier (\"$finit$\");\n+  /* The new `finit$' special method identifier. This one is now\n+     generated in place of `$finit$'.  */\n+  finit_identifier_node = get_identifier (\"finit$\");\n   void_signature_node = get_identifier (\"()V\");\n   length_identifier_node = get_identifier (\"length\");\n   this_identifier_node = get_identifier (\"this\");"}, {"sha": "e3e5f8e935fc0232609b8323944a92093f62250f", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bdcbc5242faed11b2f58c72c64cb2b0165d681/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bdcbc5242faed11b2f58c72c64cb2b0165d681/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=25bdcbc5242faed11b2f58c72c64cb2b0165d681", "patch": "@@ -2210,7 +2210,7 @@ expand_java_field_op (is_static, is_putting, field_ref_index)\n \t    {\n \t      tree cfndecl_name = DECL_NAME (current_function_decl);\n \t      if (! DECL_CONSTRUCTOR_P (current_function_decl)\n-\t\t  && (cfndecl_name != finit_identifier_node))\n+\t\t  && !ID_FINIT_P (cfndecl_name))\n \t\terror_with_decl (field_decl, \"assignment to final field `%s' not in constructor\");\n \t    }\n \t}"}, {"sha": "a6098200dd176432bd8b169888b4f473dde81fe3", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25bdcbc5242faed11b2f58c72c64cb2b0165d681/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25bdcbc5242faed11b2f58c72c64cb2b0165d681/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=25bdcbc5242faed11b2f58c72c64cb2b0165d681", "patch": "@@ -253,7 +253,8 @@ extern tree double_array_vtable;\n extern tree TYPE_identifier_node;      /* \"TYPE\" */\n extern tree init_identifier_node;      /* \"<init>\" */\n extern tree clinit_identifier_node;      /* \"<clinit>\" */\n-extern tree finit_identifier_node;      /* \"$finit$\" */\n+extern tree finit_identifier_node;      /* \"finit$\" */\n+extern tree finit_leg_identifier_node;  /* \"$finit$\" */\n extern tree void_signature_node;       /* \"()V\" */\n extern tree length_identifier_node;  /* \"length\" */\n extern tree this_identifier_node;  /* \"this\" */\n@@ -821,7 +822,12 @@ struct rtx_def * java_lang_expand_expr PARAMS ((tree, rtx, enum machine_mode,\n /* Predicates on method identifiers. Kept close to other macros using\n    them  */\n #define ID_INIT_P(ID)   ((ID) == init_identifier_node)\n-#define ID_FINIT_P(ID)  ((ID) == finit_identifier_node)\n+/* Match ID to either `$finit$' or `finit$', so that `$finit$'\n+   continues to be recognized as an equivalent to `finit$' which is\n+   now the prefered name used for the field initialization special\n+   method.  */\n+#define ID_FINIT_P(ID)  ((ID) == finit_identifier_node \\\n+\t\t\t || (ID) == finit_leg_identifier_node)\n #define ID_CLINIT_P(ID) ((ID) == clinit_identifier_node)\n \n /* Access flags etc for a variable/field (a FIELD_DECL): */"}]}