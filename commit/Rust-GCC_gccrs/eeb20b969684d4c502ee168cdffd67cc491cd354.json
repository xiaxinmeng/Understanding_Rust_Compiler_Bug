{"sha": "eeb20b969684d4c502ee168cdffd67cc491cd354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWViMjBiOTY5Njg0ZDRjNTAyZWUxNjhjZGZmZDY3Y2M0OTFjZDM1NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2019-02-21T22:50:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-21T22:50:24Z"}, "message": "re PR go/89170 (FAIL: net/http)\n\n\tPR go/89170\n\t* varasm.c (decode_addr_const): Call lookup_constant_def rather\n\tthan output_constant_def.\n\t(add_constant_to_table): New static function.\n\t(output_constant_def): Call add_constant_to_table.\n\t(tree_output_constant_def): Likewise.\n\nFrom-SVN: r269079", "tree": {"sha": "17c1e8894257d72447914fb21cea42e77c15a042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17c1e8894257d72447914fb21cea42e77c15a042"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeb20b969684d4c502ee168cdffd67cc491cd354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb20b969684d4c502ee168cdffd67cc491cd354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb20b969684d4c502ee168cdffd67cc491cd354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb20b969684d4c502ee168cdffd67cc491cd354/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43574e4ff2afd4a2e47c179921a9b5661786ebf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43574e4ff2afd4a2e47c179921a9b5661786ebf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43574e4ff2afd4a2e47c179921a9b5661786ebf3"}], "stats": {"total": 90, "additions": 52, "deletions": 38}, "files": [{"sha": "46cc048e7eb0e89cbfde222c0aaf3cf99f80d42a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb20b969684d4c502ee168cdffd67cc491cd354/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb20b969684d4c502ee168cdffd67cc491cd354/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eeb20b969684d4c502ee168cdffd67cc491cd354", "patch": "@@ -1,3 +1,12 @@\n+2019-02-21  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR go/89170\n+\t* varasm.c (decode_addr_const): Call lookup_constant_def rather\n+\tthan output_constant_def.\n+\t(add_constant_to_table): New static function.\n+\t(output_constant_def): Call add_constant_to_table.\n+\t(tree_output_constant_def): Likewise.\n+\n 2019-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89285"}, {"sha": "84dc14104e2ca04a07a112fc63046822936ac97a", "filename": "gcc/varasm.c", "status": "modified", "additions": 43, "deletions": 38, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeb20b969684d4c502ee168cdffd67cc491cd354/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeb20b969684d4c502ee168cdffd67cc491cd354/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=eeb20b969684d4c502ee168cdffd67cc491cd354", "patch": "@@ -2961,7 +2961,9 @@ decode_addr_const (tree exp, struct addr_const *value)\n     case COMPLEX_CST:\n     case CONSTRUCTOR:\n     case INTEGER_CST:\n-      x = output_constant_def (target, 1);\n+      x = lookup_constant_def (target);\n+      /* Should have been added by output_addressed_constants.  */\n+      gcc_assert (x);\n       break;\n \n     case INDIRECT_REF:\n@@ -3424,6 +3426,43 @@ build_constant_desc (tree exp)\n   return desc;\n }\n \n+/* Subroutine of output_constant_def and tree_output_constant_def:\n+   Add a constant to the hash table that tracks which constants\n+   already have labels.  */\n+\n+static constant_descriptor_tree *\n+add_constant_to_table (tree exp)\n+{\n+  /* The hash table methods may call output_constant_def for addressed\n+     constants, so handle them first.  */\n+  output_addressed_constants (exp);\n+\n+  /* Sanity check to catch recursive insertion.  */\n+  static bool inserting;\n+  gcc_assert (!inserting);\n+  inserting = true;\n+\n+  /* Look up EXP in the table of constant descriptors.  If we didn't\n+     find it, create a new one.  */\n+  struct constant_descriptor_tree key;\n+  key.value = exp;\n+  key.hash = const_hash_1 (exp);\n+  constant_descriptor_tree **loc\n+    = const_desc_htab->find_slot_with_hash (&key, key.hash, INSERT);\n+\n+  inserting = false;\n+\n+  struct constant_descriptor_tree *desc = *loc;\n+  if (!desc)\n+    {\n+      desc = build_constant_desc (exp);\n+      desc->hash = key.hash;\n+      *loc = desc;\n+    }\n+\n+  return desc;\n+}\n+\n /* Return an rtx representing a reference to constant data in memory\n    for the constant expression EXP.\n \n@@ -3440,24 +3479,7 @@ build_constant_desc (tree exp)\n rtx\n output_constant_def (tree exp, int defer)\n {\n-  struct constant_descriptor_tree *desc;\n-  struct constant_descriptor_tree key;\n-\n-  /* Look up EXP in the table of constant descriptors.  If we didn't find\n-     it, create a new one.  */\n-  key.value = exp;\n-  key.hash = const_hash_1 (exp);\n-  constant_descriptor_tree **loc\n-    = const_desc_htab->find_slot_with_hash (&key, key.hash, INSERT);\n-\n-  desc = *loc;\n-  if (desc == 0)\n-    {\n-      desc = build_constant_desc (exp);\n-      desc->hash = key.hash;\n-      *loc = desc;\n-    }\n-\n+  struct constant_descriptor_tree *desc = add_constant_to_table (exp);\n   maybe_output_constant_def_contents (desc, defer);\n   return desc->rtl;\n }\n@@ -3591,25 +3613,8 @@ lookup_constant_def (tree exp)\n tree\n tree_output_constant_def (tree exp)\n {\n-  struct constant_descriptor_tree *desc, key;\n-  tree decl;\n-\n-  /* Look up EXP in the table of constant descriptors.  If we didn't find\n-     it, create a new one.  */\n-  key.value = exp;\n-  key.hash = const_hash_1 (exp);\n-  constant_descriptor_tree **loc\n-    = const_desc_htab->find_slot_with_hash (&key, key.hash, INSERT);\n-\n-  desc = *loc;\n-  if (desc == 0)\n-    {\n-      desc = build_constant_desc (exp);\n-      desc->hash = key.hash;\n-      *loc = desc;\n-    }\n-\n-  decl = SYMBOL_REF_DECL (XEXP (desc->rtl, 0));\n+  struct constant_descriptor_tree *desc = add_constant_to_table (exp);\n+  tree decl = SYMBOL_REF_DECL (XEXP (desc->rtl, 0));\n   varpool_node::finalize_decl (decl);\n   return decl;\n }"}]}