{"sha": "8593b74599267dec25b99d08db2e302852a3ccbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5M2I3NDU5OTI2N2RlYzI1Yjk5ZDA4ZGIyZTMwMjg1MmEzY2NiYw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-03-24T13:44:58Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-03-24T13:44:58Z"}, "message": "reload1.c (choose_reload_regs): If output-reloading for a simple move insn...\n\n\treload1.c (choose_reload_regs): If output-reloading for a\n\tsimple move insn, try to inherit an equivalence for the input.\n\nFrom-SVN: r25946", "tree": {"sha": "91d6e1c979fdd24e9d2177953cc8f1723819ed18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d6e1c979fdd24e9d2177953cc8f1723819ed18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8593b74599267dec25b99d08db2e302852a3ccbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8593b74599267dec25b99d08db2e302852a3ccbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8593b74599267dec25b99d08db2e302852a3ccbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8593b74599267dec25b99d08db2e302852a3ccbc/comments", "author": null, "committer": null, "parents": [{"sha": "32ec3c9d86fdcd0e65a7a60a7b40b1ebdc51189f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ec3c9d86fdcd0e65a7a60a7b40b1ebdc51189f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ec3c9d86fdcd0e65a7a60a7b40b1ebdc51189f"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "1dd7d6347534e3d35e9e8984df509b0cf25a0bcd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8593b74599267dec25b99d08db2e302852a3ccbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8593b74599267dec25b99d08db2e302852a3ccbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8593b74599267dec25b99d08db2e302852a3ccbc", "patch": "@@ -1,3 +1,8 @@\n+Wed Mar 24 21:42:15 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\treload1.c (choose_reload_regs): If output-reloading for a\n+\tsimple move insn, try to inherit an equivalence for the input.\n+\n 1999-02-24  Mike Stump  <mrs@wrs.com>\n \n \t* arm/aout.h (DBX_OUTPUT_MAIN_SOURCE_FILENAME): Fix quoting."}, {"sha": "c3d4e132c692b0f835b71086eecabf8aed21b3e4", "filename": "gcc/reload1.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8593b74599267dec25b99d08db2e302852a3ccbc/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8593b74599267dec25b99d08db2e302852a3ccbc/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=8593b74599267dec25b99d08db2e302852a3ccbc", "patch": "@@ -5808,6 +5808,7 @@ choose_reload_regs (chain)\n       for (j = 0; j < n_reloads; j++)\n \t{\n \t  register int r = reload_order[j];\n+\t  rtx search_equiv = NULL_RTX;\n \n \t  /* Ignore reloads that got marked inoperative.  */\n \t  if (reload_out[r] == 0 && reload_in[r] == 0\n@@ -6037,9 +6038,23 @@ choose_reload_regs (chain)\n \t\t  || GET_CODE (reload_in[r]) == MEM)\n \t      && (reload_nregs[r] == max_group_size\n \t\t  || ! reg_classes_intersect_p (reload_reg_class[r], group_class)))\n+\t    search_equiv = reload_in[r];\n+\t  /* If this is an output reload from a simple move insn, look\n+\t     if an equivalence for the input is available.  */\n+\t  else if (inheritance && reload_in[r] == 0 && reload_out[r] != 0)\n+\t    {\n+\t      rtx set = single_set (insn);\n+\n+\t      if (set\n+\t\t  && rtx_equal_p (reload_out[r], SET_DEST (set))\n+\t\t  && CONSTANT_P (SET_SRC (set)))\n+\t\tsearch_equiv = SET_SRC (set);\n+\t    }\n+\n+\t  if (search_equiv)\n \t    {\n \t      register rtx equiv\n-\t\t= find_equiv_reg (reload_in[r], insn, reload_reg_class[r],\n+\t\t= find_equiv_reg (search_equiv, insn, reload_reg_class[r],\n \t\t\t\t  -1, NULL_PTR, 0, reload_mode[r]);\n \t      int regno;\n \n@@ -6302,6 +6317,7 @@ choose_reload_regs (chain)\n \t     pass just to remove such reloads, make another pass, since the\n \t     removal of one reload might allow us to inherit another one.  */\n \t  else if ((! reload_out[r] || reload_out_reg[r])\n+\t\t   && reload_in[r]\n \t\t   && remove_address_replacements (reload_in[r]) && pass)\n \t    pass = 2;\n \t}"}]}