{"sha": "260a5334ee963f66745d0cb98316ee831737b22d", "node_id": "C_kwDOANBUbNoAKDI2MGE1MzM0ZWU5NjNmNjY3NDVkMGNiOTgzMTZlZTgzMTczN2IyMmQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-16T13:39:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-05T13:47:00Z"}, "message": "libstdc++: Improve std::regex_error::what() strings\n\nThis replaces the vague \"regex_error\" for std::regex_error::what() with\na string that corresponds to the error_type enum passed to the\nconstructor. This allows us to remove many of the strings passed to\n__throw_regex_error, because the default string is at least as good.\nWhen a string argument to __throw_regex_error is kept it should add some\ncontext-specific detail absent from the default string.\n\nAlso remove full stops (periods) from the end of those strings, to make\nit easier to include them in logs and other output. I've left them\nstarting with an upper-case letter, which is consistent with strerror\noutput for (at least) Glibc, Solaris and BSD. I'm ambivalent whether\nthat's the right choice.\n\nThis also adds the missing noreturn attribute to __throw_regex_error.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/regex_compiler.tcc: Adjust all calls to\n\t__throw_regex_error.\n\t* include/bits/regex_error.h (__throw_regex_error): Add noreturn\n\tattribute.\n\t* include/bits/regex_scanner.tcc: Likewise.\n\t* src/c++11/regex.cc (desc): New helper function.\n\t(regex_error::regex_error(error_type)): Use desc to get a string\n\tcorresponding to the error code.", "tree": {"sha": "48a67f6bea04924bdc63091cc22cd54cde7ab5a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48a67f6bea04924bdc63091cc22cd54cde7ab5a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/260a5334ee963f66745d0cb98316ee831737b22d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260a5334ee963f66745d0cb98316ee831737b22d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/260a5334ee963f66745d0cb98316ee831737b22d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260a5334ee963f66745d0cb98316ee831737b22d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1e701dc4adb11a5ed5f45c2fb31ba4689b718d0"}], "stats": {"total": 187, "additions": 111, "deletions": 76}, "files": [{"sha": "c12f750253830959a20f9e195780b9617c3669a0", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260a5334ee963f66745d0cb98316ee831737b22d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260a5334ee963f66745d0cb98316ee831737b22d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=260a5334ee963f66745d0cb98316ee831737b22d", "patch": "@@ -157,8 +157,7 @@ namespace __detail\n \t  auto __neg = _M_value[0] == 'n';\n \t  this->_M_disjunction();\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n-\t    __throw_regex_error(regex_constants::error_paren,\n-\t\t\t\t\"Parenthesis is not closed.\");\n+\t    __throw_regex_error(regex_constants::error_paren);\n \t  auto __tmp = _M_pop();\n \t  __tmp._M_append(_M_nfa->_M_insert_accept());\n \t  _M_stack.push(\n@@ -180,8 +179,7 @@ namespace __detail\n       auto __init = [this, &__neg]()\n \t{\n \t  if (_M_stack.empty())\n-\t    __throw_regex_error(regex_constants::error_badrepeat,\n-\t\t\t\t\"Nothing to repeat before a quantifier.\");\n+\t    __throw_regex_error(regex_constants::error_badrepeat);\n \t  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);\n \t};\n       if (_M_match_token(_ScannerT::_S_token_closure0))\n@@ -217,11 +215,9 @@ namespace __detail\n       else if (_M_match_token(_ScannerT::_S_token_interval_begin))\n \t{\n \t  if (_M_stack.empty())\n-\t    __throw_regex_error(regex_constants::error_badrepeat,\n-\t\t\t\t\"Nothing to repeat before a quantifier.\");\n+\t    __throw_regex_error(regex_constants::error_badrepeat);\n \t  if (!_M_match_token(_ScannerT::_S_token_dup_count))\n-\t    __throw_regex_error(regex_constants::error_badbrace,\n-\t\t\t\t\"Unexpected token in brace expression.\");\n+\t    __throw_regex_error(regex_constants::error_badbrace);\n \t  _StateSeqT __r(_M_pop());\n \t  _StateSeqT __e(*_M_nfa, _M_nfa->_M_insert_dummy());\n \t  long __min_rep = _M_cur_int_value(10);\n@@ -237,8 +233,7 @@ namespace __detail\n \t\t__infi = true;\n \t    }\n \t  if (!_M_match_token(_ScannerT::_S_token_interval_end))\n-\t    __throw_regex_error(regex_constants::error_brace,\n-\t\t\t\t\"Unexpected end of brace expression.\");\n+\t    __throw_regex_error(regex_constants::error_brace);\n \n \t  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);\n \n@@ -257,8 +252,7 @@ namespace __detail\n \t  else\n \t    {\n \t      if (__n < 0)\n-\t\t__throw_regex_error(regex_constants::error_badbrace,\n-\t\t\t\t    \"Invalid range in brace expression.\");\n+\t\t__throw_regex_error(regex_constants::error_badbrace);\n \t      auto __end = _M_nfa->_M_insert_dummy();\n \t      // _M_alt is the \"match more\" branch, and _M_next is the\n \t      // \"match less\" one. Switch _M_alt and _M_next of all created\n@@ -325,8 +319,7 @@ namespace __detail\n \t  _StateSeqT __r(*_M_nfa, _M_nfa->_M_insert_dummy());\n \t  this->_M_disjunction();\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n-\t    __throw_regex_error(regex_constants::error_paren,\n-\t\t\t\t\"Parenthesis is not closed.\");\n+\t    __throw_regex_error(regex_constants::error_paren);\n \t  __r._M_append(_M_pop());\n \t  _M_stack.push(__r);\n \t}\n@@ -335,8 +328,7 @@ namespace __detail\n \t  _StateSeqT __r(*_M_nfa, _M_nfa->_M_insert_subexpr_begin());\n \t  this->_M_disjunction();\n \t  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))\n-\t    __throw_regex_error(regex_constants::error_paren,\n-\t\t\t\t\"Parenthesis is not closed.\");\n+\t    __throw_regex_error(regex_constants::error_paren);\n \t  __r._M_append(_M_pop());\n \t  __r._M_append(_M_nfa->_M_insert_subexpr_end());\n \t  _M_stack.push(__r);\n@@ -503,7 +495,8 @@ namespace __detail\n \t    {\n \t      // \"\\\\w-\" is invalid, start of range must be a single char.\n \t      __throw_regex_error(regex_constants::error_range,\n-\t\t    \"Invalid start of range in bracket expression.\");\n+\t\t\t\t  \"Invalid start of '[x-x]' range in \"\n+\t\t\t\t  \"regular expression\");\n \t    }\n \t  else if (__last_char._M_is_char())\n \t    {\n@@ -521,7 +514,8 @@ namespace __detail\n \t\t}\n \t      else\n \t\t__throw_regex_error(regex_constants::error_range,\n-\t\t      \"Invalid end of range in bracket expression.\");\n+\t\t\t\t    \"Invalid end of '[x-x]' range in \"\n+\t\t\t\t    \"regular expression\");\n \t    }\n \t  else if (_M_flags & regex_constants::ECMAScript)\n \t    {\n@@ -532,7 +526,8 @@ namespace __detail\n \t    }\n \t  else\n \t    __throw_regex_error(regex_constants::error_range,\n-\t\t\t\t\"Invalid dash in bracket expression.\");\n+\t\t\t\t\"Invalid location of '-' within '[...]' in \"\n+\t\t\t\t\"POSIX regular expression\");\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_quoted_class))\n \t{\n@@ -543,8 +538,8 @@ namespace __detail\n \t}\n       else\n \t__throw_regex_error(regex_constants::error_brack,\n-\t\t\t    \"Unexpected character in bracket expression.\");\n-\n+\t\t\t    \"Unexpected character within '[...]' in \"\n+\t\t\t    \"regular expression\");\n       return true;\n     }\n "}, {"sha": "77d4925921bd8e6e96e96930be3c9a207c86a6bd", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260a5334ee963f66745d0cb98316ee831737b22d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260a5334ee963f66745d0cb98316ee831737b22d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=260a5334ee963f66745d0cb98316ee831737b22d", "patch": "@@ -133,7 +133,9 @@ namespace regex_constants\n    */\n   class regex_error : public std::runtime_error\n   {\n-    regex_constants::error_type _M_code;\n+    using error_type = regex_constants::error_type;\n+\n+    error_type _M_code;\n \n   public:\n     /**\n@@ -142,7 +144,7 @@ namespace regex_constants\n      * @param __ecode the regex error code.\n      */\n     explicit\n-    regex_error(regex_constants::error_type __ecode);\n+    regex_error(error_type __ecode);\n \n     virtual ~regex_error() throw();\n \n@@ -156,23 +158,30 @@ namespace regex_constants\n     { return _M_code; }\n \n   private:\n-    regex_error(regex_constants::error_type __ecode, const char* __what)\n+    regex_error(error_type __ecode, const char* __what)\n     : std::runtime_error(__what), _M_code(__ecode)\n     { }\n \n-    friend void __throw_regex_error(regex_constants::error_type, const char*);\n+    [[__noreturn__]]\n+    friend void\n+    __throw_regex_error(error_type __ecode __attribute__((__unused__)),\n+\t\t\tconst char* __what __attribute__((__unused__)))\n+    { _GLIBCXX_THROW_OR_ABORT(regex_error(__ecode, __what)); }\n   };\n \n-  ///@} // group regex\n+  /// @cond undocumented\n \n+  [[__noreturn__]]\n   void\n   __throw_regex_error(regex_constants::error_type __ecode);\n \n+  [[__noreturn__]]\n   inline void\n-  __throw_regex_error(regex_constants::error_type __ecode\n-\t\t\t__attribute__((__unused__)),\n-\t\t      const char* __what __attribute__((__unused__)))\n-  { _GLIBCXX_THROW_OR_ABORT(regex_error(__ecode, __what)); }\n+  __throw_regex_error(regex_constants::error_type __ecode, const char* __what);\n+\n+  /// @endcond\n+\n+  ///@} // group regex\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "2a1745b42f68a0f1c299fd33886e750f57dafc14", "filename": "libstdc++-v3/include/bits/regex_scanner.tcc", "status": "modified", "additions": 31, "deletions": 45, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260a5334ee963f66745d0cb98316ee831737b22d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260a5334ee963f66745d0cb98316ee831737b22d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc?ref=260a5334ee963f66745d0cb98316ee831737b22d", "patch": "@@ -108,7 +108,7 @@ namespace __detail\n \t  if (_M_current == _M_end)\n \t    __throw_regex_error(\n \t      regex_constants::error_escape,\n-\t      \"Unexpected end of regex when escaping.\");\n+\t      \"Invalid escape at end of regular expression\");\n \n \t  if (!_M_is_basic()\n \t      || (*_M_current != '('\n@@ -125,9 +125,7 @@ namespace __detail\n \t  if (_M_is_ecma() && *_M_current == '?')\n \t    {\n \t      if (++_M_current == _M_end)\n-\t\t__throw_regex_error(\n-\t\t  regex_constants::error_paren,\n-\t\t  \"Unexpected end of regex when in an open parenthesis.\");\n+\t\t__throw_regex_error(regex_constants::error_paren);\n \n \t      if (*_M_current == ':')\n \t\t{\n@@ -147,9 +145,9 @@ namespace __detail\n \t\t  _M_value.assign(1, 'n');\n \t\t}\n \t      else\n-\t\t__throw_regex_error(\n-\t\t  regex_constants::error_paren,\n-\t\t  \"Invalid special open parenthesis.\");\n+\t\t__throw_regex_error(regex_constants::error_paren,\n+\t\t\t\t    \"Invalid '(?...)' zero-width assertion \"\n+\t\t\t\t    \"in regular expression\");\n \t    }\n \t  else if (_M_flags & regex_constants::nosubs)\n \t    _M_token = _S_token_subexpr_no_group_begin;\n@@ -178,10 +176,7 @@ namespace __detail\n       else if (__builtin_expect(__c == _CharT(0), false))\n \t{\n \t  if (!_M_is_ecma())\n-\t    {\n-\t      __throw_regex_error(regex_constants::_S_null,\n-\t\t  \"Unexpected null character in regular expression\");\n-\t    }\n+\t    __throw_regex_error(regex_constants::_S_null);\n \t  _M_token = _S_token_ord_char;\n \t  _M_value.assign(1, __c);\n \t}\n@@ -213,9 +208,7 @@ namespace __detail\n     _M_scan_in_bracket()\n     {\n       if (_M_current == _M_end)\n-\t__throw_regex_error(\n-\t  regex_constants::error_brack,\n-\t  \"Unexpected end of regex when in bracket expression.\");\n+\t__throw_regex_error(regex_constants::error_brack);\n \n       auto __c = *_M_current++;\n \n@@ -225,7 +218,8 @@ namespace __detail\n \t{\n \t  if (_M_current == _M_end)\n \t    __throw_regex_error(regex_constants::error_brack,\n-\t\t\t\t\"Unexpected character class open bracket.\");\n+\t\t\t\t\"Incomplete '[[' character class in \"\n+\t\t\t\t\"regular expression\");\n \n \t  if (*_M_current == '.')\n \t    {\n@@ -250,7 +244,7 @@ namespace __detail\n \t}\n       // In POSIX, when encountering \"[]\" or \"[^]\", the ']' is interpreted\n       // literally. So \"[]]\" and \"[^]]\" are valid regexes. See the testcases\n-      // `*/empty_range.cc`.\n+      // `.../empty_range.cc`.\n       else if (__c == ']' && (_M_is_ecma() || !_M_at_bracket_start))\n \t{\n \t  _M_token = _S_token_bracket_end;\n@@ -275,9 +269,7 @@ namespace __detail\n     _M_scan_in_brace()\n     {\n       if (_M_current == _M_end)\n-\t__throw_regex_error(\n-\t  regex_constants::error_brace,\n-\t  \"Unexpected end of regex when in brace expression.\");\n+\t__throw_regex_error(regex_constants::error_brace);\n \n       auto __c = *_M_current++;\n \n@@ -301,17 +293,15 @@ namespace __detail\n \t      ++_M_current;\n \t    }\n \t  else\n-\t    __throw_regex_error(regex_constants::error_badbrace,\n-\t\t\t\t\"Unexpected character in brace expression.\");\n+\t    __throw_regex_error(regex_constants::error_badbrace);\n \t}\n       else if (__c == '}')\n \t{\n \t  _M_state = _S_state_normal;\n \t  _M_token = _S_token_interval_end;\n \t}\n       else\n-\t__throw_regex_error(regex_constants::error_badbrace,\n-\t\t\t    \"Unexpected character in brace expression.\");\n+\t__throw_regex_error(regex_constants::error_badbrace);\n     }\n \n   template<typename _CharT>\n@@ -320,8 +310,7 @@ namespace __detail\n     _M_eat_escape_ecma()\n     {\n       if (_M_current == _M_end)\n-\t__throw_regex_error(regex_constants::error_escape,\n-\t\t\t    \"Unexpected end of regex when escaping.\");\n+\t__throw_regex_error(regex_constants::error_escape);\n \n       auto __c = *_M_current++;\n       auto __pos = _M_find_escape(_M_ctype.narrow(__c, '\\0'));\n@@ -355,22 +344,26 @@ namespace __detail\n       else if (__c == 'c')\n \t{\n \t  if (_M_current == _M_end)\n-\t    __throw_regex_error(\n-\t      regex_constants::error_escape,\n-\t      \"Unexpected end of regex when reading control code.\");\n+\t    __throw_regex_error(regex_constants::error_escape,\n+\t\t\t\t\"invalid '\\\\cX' control character in \"\n+\t\t\t\t\"regular expression\");\n \t  _M_token = _S_token_ord_char;\n \t  _M_value.assign(1, *_M_current++);\n \t}\n       else if (__c == 'x' || __c == 'u')\n \t{\n-\t  _M_value.erase();\n-\t  for (int __i = 0; __i < (__c == 'x' ? 2 : 4); __i++)\n+\t  _M_value.clear();\n+\t  const int __n = __c == 'x' ? 2 : 4;\n+\t  for (int __i = 0; __i < __n; __i++)\n \t    {\n \t      if (_M_current == _M_end\n \t\t  || !_M_ctype.is(_CtypeT::xdigit, *_M_current))\n-\t\t__throw_regex_error(\n-\t\t  regex_constants::error_escape,\n-\t\t  \"Unexpected end of regex when ascii character.\");\n+\t\t__throw_regex_error(regex_constants::error_escape,\n+\t\t\t\t    __n == 2\n+\t\t\t\t    ? \"Invalid '\\\\xNN' control character in \"\n+\t\t\t\t      \"regular expression\"\n+\t\t\t\t    : \"Invalid '\\\\uNNNN' control character in \"\n+\t\t\t\t      \"regular expression\");\n \t      _M_value += *_M_current++;\n \t    }\n \t  _M_token = _S_token_hex_num;\n@@ -399,8 +392,7 @@ namespace __detail\n     _M_eat_escape_posix()\n     {\n       if (_M_current == _M_end)\n-\t__throw_regex_error(regex_constants::error_escape,\n-\t\t\t    \"Unexpected end of regex when escaping.\");\n+\t__throw_regex_error(regex_constants::error_escape);\n \n       auto __c = *_M_current;\n       auto __pos = __builtin_strchr(_M_spec_char, _M_ctype.narrow(__c, '\\0'));\n@@ -425,8 +417,7 @@ namespace __detail\n \t{\n #ifdef __STRICT_ANSI__\n \t  // POSIX says it is undefined to escape ordinary characters\n-\t  __throw_regex_error(regex_constants::error_escape,\n-\t\t\t      \"Unexpected escape character.\");\n+\t  __throw_regex_error(regex_constants::error_escape);\n #else\n \t  _M_token = _S_token_ord_char;\n \t  _M_value.assign(1, __c);\n@@ -466,8 +457,7 @@ namespace __detail\n \t  return;\n \t}\n       else\n-\t__throw_regex_error(regex_constants::error_escape,\n-\t\t\t    \"Unexpected escape character.\");\n+\t__throw_regex_error(regex_constants::error_escape);\n     }\n \n   // Eats a character class or throws an exception.\n@@ -485,12 +475,8 @@ namespace __detail\n \t  || _M_current == _M_end // skip __ch\n \t  || *_M_current++ != ']') // skip ']'\n \t{\n-\t  if (__ch == ':')\n-\t    __throw_regex_error(regex_constants::error_ctype,\n-\t\t\t\t\"Unexpected end of character class.\");\n-\t  else\n-\t    __throw_regex_error(regex_constants::error_collate,\n-\t\t\t\t\"Unexpected end of character class.\");\n+\t  __throw_regex_error(__ch == ':' ? regex_constants::error_ctype\n+\t\t\t\t\t  : regex_constants::error_collate);\n \t}\n     }\n "}, {"sha": "d5e1cc7612ac19d615ee42581e09b63d97695347", "filename": "libstdc++-v3/src/c++11/regex.cc", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260a5334ee963f66745d0cb98316ee831737b22d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fregex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260a5334ee963f66745d0cb98316ee831737b22d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fregex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fregex.cc?ref=260a5334ee963f66745d0cb98316ee831737b22d", "patch": "@@ -35,8 +35,53 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      __attribute__((unused)))\n   { _GLIBCXX_THROW_OR_ABORT(regex_error(__ecode)); }\n \n+namespace\n+{\n+  const char*\n+  desc(regex_constants::error_type e)\n+  {\n+    using namespace regex_constants;\n+    switch (e)\n+    {\n+    case error_collate:\n+      return \"Invalid collating element in regular expression\";\n+    case error_ctype:\n+      return \"Invalid character class in regular expression\";\n+    case error_escape:\n+      return \"Invalid escape in regular expression\";\n+    case error_backref:\n+      return \"Invalid back reference in regular expression\";\n+    case error_brack:\n+      return \"Mismatched '[' and ']' in regular expression\";\n+    case error_paren:\n+      return \"Mismatched '(' and ')' in regular expression\";\n+    case error_brace:\n+      return \"Mismatched '{' and '}' in regular expression\";\n+    case error_badbrace:\n+      return \"Invalid range in '{}' in regular expression\";\n+    case error_range:\n+      return \"Invalid character range in regular expression\";\n+    case error_space:\n+      return \"Insufficient memory to compile regular expression\";\n+    case error_badrepeat:\n+      return \"Invalid '?', '*', or '+' in regular expression\";\n+    case error_complexity:\n+      return \"Complexity of regex match exceeded implementation limits\";\n+    case error_stack:\n+      return \"Insufficient memory to determine regex match\";\n+    case _S_null:\n+      return \"Unexpected null character in regular expression\";\n+    case _S_grammar:\n+      return \"Conflicting regex grammar options\";\n+    default:\n+      return \"regex error\";\n+    };\n+\n+  }\n+}\n+\n   regex_error::regex_error(regex_constants::error_type __ecode)\n-  : std::runtime_error(\"regex_error\"), _M_code(__ecode)\n+  : std::runtime_error(desc(__ecode)), _M_code(__ecode)\n   { }\n \n   regex_error::~regex_error() throw() { }"}]}