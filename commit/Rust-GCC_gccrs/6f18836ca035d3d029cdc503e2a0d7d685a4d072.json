{"sha": "6f18836ca035d3d029cdc503e2a0d7d685a4d072", "node_id": "C_kwDOANBUbNoAKDZmMTg4MzZjYTAzNWQzZDAyOWNkYzUwM2UyYTBkN2Q2ODVhNGQwNzI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-12-14T08:13:01Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-12-19T14:23:18Z"}, "message": "RISC-V: Add testcases for VSETVL PASS 2\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-17.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-18.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-19.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-20.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-21.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-22.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-23.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-24.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-25.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-26.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-27.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-28.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_phi-9.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-9.c: New test.", "tree": {"sha": "a63cc96e121bd44f11089c29013ec3dd27c2c59f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63cc96e121bd44f11089c29013ec3dd27c2c59f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f18836ca035d3d029cdc503e2a0d7d685a4d072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f18836ca035d3d029cdc503e2a0d7d685a4d072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f18836ca035d3d029cdc503e2a0d7d685a4d072", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f18836ca035d3d029cdc503e2a0d7d685a4d072/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4433e075fc4ef06401c2255561ee6a508a49dcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4433e075fc4ef06401c2255561ee6a508a49dcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4433e075fc4ef06401c2255561ee6a508a49dcb"}], "stats": {"total": 2063, "additions": 2063, "deletions": 0}, "files": [{"sha": "cd58e53a822e8da9d3886a26520c288e979f1eb0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-1.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+      *(vint8mf8_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 200);\n+      *(vint8mf8_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 300);\n+      *(vint8mf8_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 400);\n+      *(vint8mf8_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + i);\n+      *(vint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,\\.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "1aaebdf4bc4dde14ec87d900060a179297731488", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-10.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-10.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + 100);\n+      *(vuint16mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + 200);\n+      *(vuint16mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + 300);\n+      *(vuint16mf2_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + 400);\n+      *(vuint16mf2_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + i);\n+      *(vuint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "813ea49e705626293325a472024e43659fcb4ebf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-11.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-11.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + 100);\n+      *(vint32mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+      *(vint32mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + 300);\n+      *(vint32mf2_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + 400);\n+      *(vint32mf2_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + i);\n+      *(vint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "9b59df9f78bd12d8b183d27167cb37affbe02da8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-12.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-12.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 100);\n+      *(vuint32mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 200);\n+      *(vuint32mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 300);\n+      *(vuint32mf2_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 400);\n+      *(vuint32mf2_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + i);\n+      *(vuint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "35e4fd190af486cdcbd35788d5c4d355756dac93", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-13.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-13.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 100);\n+      *(vfloat32mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 200);\n+      *(vfloat32mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 300);\n+      *(vfloat32mf2_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+      *(vfloat32mf2_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i);\n+      *(vfloat32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "2330d34246f80a51d57e5781e7578aa8036aefe6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-14.c", "status": "added", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-14.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,217 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + 100);\n+      *(vbool64_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + 200);\n+      *(vbool64_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + 300);\n+      *(vbool64_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + 400);\n+      *(vbool64_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + i);\n+      *(vbool64_t*)(out + i) = v;\n+    }\n+}\n+\n+void f2 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + 100);\n+      *(vbool32_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + 200);\n+      *(vbool32_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + 300);\n+      *(vbool32_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + 400);\n+      *(vbool32_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + i);\n+      *(vbool32_t*)(out + i) = v;\n+    }\n+}\n+\n+void f3 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + 100);\n+      *(vbool16_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + 200);\n+      *(vbool16_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + 300);\n+      *(vbool16_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + 400);\n+      *(vbool16_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + i);\n+      *(vbool16_t*)(out + i) = v;\n+    }\n+}\n+\n+void f4 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + 100);\n+      *(vbool8_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + 200);\n+      *(vbool8_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + 300);\n+      *(vbool8_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + 400);\n+      *(vbool8_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + i);\n+      *(vbool8_t*)(out + i) = v;\n+    }\n+}\n+\n+void f5 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + 100);\n+      *(vbool4_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + 200);\n+      *(vbool4_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + 300);\n+      *(vbool4_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + 400);\n+      *(vbool4_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + i);\n+      *(vbool4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f6 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + 100);\n+      *(vbool2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + 200);\n+      *(vbool2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + 300);\n+      *(vbool2_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + 400);\n+      *(vbool2_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + i);\n+      *(vbool2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f7 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + 100);\n+      *(vbool1_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + 200);\n+      *(vbool1_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + 300);\n+      *(vbool1_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + 400);\n+      *(vbool1_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + i);\n+      *(vbool1_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "687ecdf0fa3c0c343589e374225558f2d8621266", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-15.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-15.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 200);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 300);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 400);\n+    *(vint8mf8_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + i);\n+      *(vint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "d644fb6995557543e68381ce2466b7b8629184e4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-16.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-16.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 100);\n+    *(vuint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 200);\n+    *(vuint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 300);\n+    *(vuint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 400);\n+    *(vuint8mf8_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + i);\n+      *(vuint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "ea4d95554bc52d6a182bd923e49a84ba416514db", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-17.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-17.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 100);\n+    *(vint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 200);\n+    *(vint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 300);\n+    *(vint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 400);\n+    *(vint8mf4_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + i);\n+      *(vint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "cbbffb78966d814bc026fd3cfeb1c0d18f07f83b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-18.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-18.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 100);\n+    *(vuint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 200);\n+    *(vuint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 300);\n+    *(vuint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 400);\n+    *(vuint8mf4_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + i);\n+      *(vuint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "21d5cc913107c3d5ca9dd25673acf05d15079741", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-19.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-19.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 100);\n+    *(vint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 200);\n+    *(vint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 300);\n+    *(vint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 400);\n+    *(vint8mf2_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + i);\n+      *(vint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"   } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"   } } } } */"}, {"sha": "39d523b66764a09c41139426d5ab0fd2881194b5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-2.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + 100);\n+      *(vuint8mf8_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + 200);\n+      *(vuint8mf8_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + 300);\n+      *(vuint8mf8_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + 400);\n+      *(vuint8mf8_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + i);\n+      *(vuint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\"  no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "29dd2d6a774a80ed490d799c24db7b9bb6571656", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-20.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-20.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 100);\n+    *(vuint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 200);\n+    *(vuint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 300);\n+    *(vuint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 400);\n+    *(vuint8mf2_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + i);\n+      *(vuint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "286a7439fb66c529af29e13925f99045f04d0a50", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-21.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-21.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 100);\n+    *(vint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 200);\n+    *(vint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 300);\n+    *(vint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 400);\n+    *(vint16mf4_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + i);\n+      *(vint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s+\\.L[0-9]+\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "4cd8a5dfc79c5dbb27284d3397699470a9b6c2ed", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-22.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-22.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 100);\n+    *(vuint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 200);\n+    *(vuint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 300);\n+    *(vuint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 400);\n+    *(vuint16mf4_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + i);\n+      *(vuint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "5825f12a577fad3a2a39b8617ad13f079c290464", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-23.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-23.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 100);\n+    *(vint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 200);\n+    *(vint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 300);\n+    *(vint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 400);\n+    *(vint16mf2_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + i);\n+      *(vint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "e2b53313ee1811ccc61350ebe6195630159dd0c9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-24.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-24.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 100);\n+    *(vuint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 200);\n+    *(vuint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 300);\n+    *(vuint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 400);\n+    *(vuint16mf2_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + i);\n+      *(vuint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "f40ff57f57f0e2205d790b35c2cf119c2f2a7608", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-25.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-25.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 100);\n+    *(vint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 300);\n+    *(vint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 400);\n+    *(vint32mf2_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + i);\n+      *(vint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "26a9933e8e221520a93335663de362e2b575d475", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-26.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-26.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 100);\n+    *(vuint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 200);\n+    *(vuint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 300);\n+    *(vuint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 400);\n+    *(vuint32mf2_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + i);\n+      *(vuint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "7028d9118bb1b5a09df5b3c171de1a2cc05371e0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-27.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-27.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 100);\n+    *(vfloat32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 200);\n+    *(vfloat32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 300);\n+    *(vfloat32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 400);\n+    *(vfloat32mf2_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i);\n+      *(vfloat32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "aa4c1a7f51d69cd6f9251b0abbf4d38f045fe6d4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-28.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-28.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool64_t v = *(vbool64_t*)(in + 100);\n+    *(vbool64_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool64_t v = *(vbool64_t*)(in + 200);\n+    *(vbool64_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool64_t v = *(vbool64_t*)(in + 300);\n+    *(vbool64_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vbool64_t v = *(vbool64_t*)(in + 400);\n+    *(vbool64_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + i);\n+      *(vbool64_t*)(out + i) = v;\n+    }\n+}\n+\n+void f2 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool32_t v = *(vbool32_t*)(in + 100);\n+    *(vbool32_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool32_t v = *(vbool32_t*)(in + 200);\n+    *(vbool32_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool32_t v = *(vbool32_t*)(in + 300);\n+    *(vbool32_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vbool32_t v = *(vbool32_t*)(in + 400);\n+    *(vbool32_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + i);\n+      *(vbool32_t*)(out + i) = v;\n+    }\n+}\n+\n+void f3 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool16_t v = *(vbool16_t*)(in + 100);\n+    *(vbool16_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool16_t v = *(vbool16_t*)(in + 200);\n+    *(vbool16_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool16_t v = *(vbool16_t*)(in + 300);\n+    *(vbool16_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vbool16_t v = *(vbool16_t*)(in + 400);\n+    *(vbool16_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + i);\n+      *(vbool16_t*)(out + i) = v;\n+    }\n+}\n+\n+void f4 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool8_t v = *(vbool8_t*)(in + 100);\n+    *(vbool8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool8_t v = *(vbool8_t*)(in + 200);\n+    *(vbool8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool8_t v = *(vbool8_t*)(in + 300);\n+    *(vbool8_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vbool8_t v = *(vbool8_t*)(in + 400);\n+    *(vbool8_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + i);\n+      *(vbool8_t*)(out + i) = v;\n+    }\n+}\n+\n+void f5 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool4_t v = *(vbool4_t*)(in + 100);\n+    *(vbool4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool4_t v = *(vbool4_t*)(in + 200);\n+    *(vbool4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool4_t v = *(vbool4_t*)(in + 300);\n+    *(vbool4_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vbool4_t v = *(vbool4_t*)(in + 400);\n+    *(vbool4_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + i);\n+      *(vbool4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f6 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool2_t v = *(vbool2_t*)(in + 100);\n+    *(vbool2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool2_t v = *(vbool2_t*)(in + 200);\n+    *(vbool2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool2_t v = *(vbool2_t*)(in + 300);\n+    *(vbool2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vbool2_t v = *(vbool2_t*)(in + 400);\n+    *(vbool2_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + i);\n+      *(vbool2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f7 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool1_t v = *(vbool1_t*)(in + 100);\n+    *(vbool1_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool1_t v = *(vbool1_t*)(in + 200);\n+    *(vbool1_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool1_t v = *(vbool1_t*)(in + 300);\n+    *(vbool1_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    vbool1_t v = *(vbool1_t*)(in + 400);\n+    *(vbool1_t*)(out + 400) = v;\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + i);\n+      *(vbool1_t*)(out + i) = v;\n+    }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vlm\\.v\\s*(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 7 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\"  } } } } */"}, {"sha": "41585d012e1d089ea53fc59e164da51d21d44d54", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-3.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + 100);\n+      *(vint8mf4_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + 200);\n+      *(vint8mf4_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + 300);\n+      *(vint8mf4_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + 400);\n+      *(vint8mf4_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + i);\n+      *(vint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\"   no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\"   no-opts \"-flto\" } } } } */"}, {"sha": "d4890e31ff09bf8a35292002b09a742504e2f4fd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-4.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-4.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + 100);\n+      *(vuint8mf4_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + 200);\n+      *(vuint8mf4_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + 300);\n+      *(vuint8mf4_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + 400);\n+      *(vuint8mf4_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + i);\n+      *(vuint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\"  no-opts \"-flto\"  } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\"  no-opts \"-flto\"  } } } } */"}, {"sha": "53905fca6feb470b37c262b718089370fc2d72b9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-5.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-5.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 100);\n+      *(vint8mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 200);\n+      *(vint8mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 300);\n+      *(vint8mf2_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 400);\n+      *(vint8mf2_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + i);\n+      *(vint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "4d56ec5354071a2769d36dd5b646e9927fe27cfb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-6.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-6.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + 100);\n+      *(vuint8mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + 200);\n+      *(vuint8mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + 300);\n+      *(vuint8mf2_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + 400);\n+      *(vuint8mf2_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + i);\n+      *(vuint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "f722ec49c02fd668137a1c85612c21f51dbde420", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-7.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-7.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 100);\n+      *(vint16mf4_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 200);\n+      *(vint16mf4_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 300);\n+      *(vint16mf4_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 400);\n+      *(vint16mf4_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + i);\n+      *(vint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "69bd0be5fd662e473443f3bb515a7a91fe1ecc7c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-8.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-8.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + 100);\n+      *(vuint16mf4_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + 200);\n+      *(vuint16mf4_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + 300);\n+      *(vuint16mf4_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + 400);\n+      *(vuint16mf4_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + i);\n+      *(vuint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "208173fb4bbecff11b9f9aea3d630c4e238568d2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_phi-9.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_phi-9.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 100);\n+      *(vint16mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 200);\n+      *(vint16mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 300);\n+      *(vint16mf2_t*)(out + 300) = v;\n+    }\n+  else\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 400);\n+      *(vint16mf2_t*)(out + 400) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + i);\n+      *(vint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {ble\\tra|[sgtf]p|t[0-6]|s[0-9]|s10|s11|a[0-7],zero,.L[0-9]+\\s*\\.L[0-9]+\\:\\s*vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "c8601a69281471b628b5c9cbdff85e4499c88670", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-1.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vint16mf4_t v2 = *(vint16mf4_t*)(in + 2);\n+  vint32mf2_t v3 = *(vint32mf2_t*)(in + 3);\n+  vfloat32mf2_t v4 = *(vfloat32mf2_t*)(in + 4);\n+  \n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+  *(vint32mf2_t*)(out + 3) = v3;\n+  *(vfloat32mf2_t*)(out + 4) = v4;\n+  \n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + i + 5);\n+      *(vint8mf8_t*)(out + i + 5) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "b68932a680226736658c4aa01826f211701b6753", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-10.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-10.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 10000);\n+  *(vfloat32mf2_t*)(out + 10000) = v;\n+\n+  if (cond)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 30000);\n+      *(vfloat32mf2_t*)(out + 30000) = v;\n+    }\n+  else\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 20000);\n+      *(vint16mf2_t*)(out + 20000) = v;\n+    }\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v0 = *(vint32mf2_t*)(in + i + 100);\n+      \n+      vint16mf2_t v1 = *(vint16mf2_t*)(in + i + 200);\n+      vint8mf2_t v2 = *(vint8mf2_t*)(in + i + 300);\n+      vint8mf4_t v3 = *(vint8mf4_t*)(in + i + 400);\n+      vint8mf8_t v4 = *(vint8mf8_t*)(in + i + 500);\n+      vbool1_t v5 = *(vbool1_t*)(in + i + 600);\n+\n+      vint32mf2_t v6 = *(vint32mf2_t*)(in + i + 700);\n+\n+      *(vint32mf2_t*)(out + i + 100) = v0;\n+      *(vint16mf2_t*)(out + i + 200) = v1;\n+      *(vint8mf2_t*)(out + i + 300) = v2;\n+      *(vint8mf4_t*)(out + i + 400) = v3;\n+      *(vint8mf8_t*)(out + i + 500) = v4;\n+      *(vbool1_t*)(out + i + 600) = v5;\n+      *(vint32mf2_t*)(out + i + 700) = v6;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {\\s*\\.L[0-9]+:\\s*vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "a6530a2712fe67b36e70e70524231eef0ecedc0b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-11.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-11.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond1, int cond2)\n+{\n+  vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 10000);\n+  *(vfloat32mf2_t*)(out + 10000) = v;\n+\n+  if (cond1)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 30000);\n+      *(vfloat32mf2_t*)(out + 30000) = v;\n+    }\n+  else\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 20000);\n+      *(vint8mf8_t*)(out + 20000) = v;\n+    }\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v0 = *(vint32mf2_t*)(in + i + 100);\n+      \n+      vint16mf2_t v1 = *(vint16mf2_t*)(in + i + 200);\n+      vint8mf2_t v2 = *(vint8mf2_t*)(in + i + 300);\n+      vint8mf4_t v3 = *(vint8mf4_t*)(in + i + 400);\n+      vint8mf8_t v4 = *(vint8mf8_t*)(in + i + 500);\n+      vbool1_t v5 = *(vbool1_t*)(in + i + 600);\n+\n+      vint32mf2_t v6 = *(vint32mf2_t*)(in + i + 700);\n+\n+      *(vint32mf2_t*)(out + i + 100) = v0;\n+      *(vint16mf2_t*)(out + i + 200) = v1;\n+      *(vint8mf2_t*)(out + i + 300) = v2;\n+      *(vint8mf4_t*)(out + i + 400) = v3;\n+      *(vint8mf8_t*)(out + i + 500) = v4;\n+      *(vbool1_t*)(out + i + 600) = v5;\n+      *(vint32mf2_t*)(out + i + 700) = v6;\n+    }\n+  \n+  if (cond2)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 40000);\n+      *(vfloat32mf2_t*)(out + 40000) = v;\n+    }\n+  else\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 30000);\n+      *(vint16mf4_t*)(out + 30000) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "eaf69928d441b65ece498e0ce3bd152caa6119d1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-12.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-12.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond1, int cond2)\n+{\n+  vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 10000);\n+  *(vfloat32mf2_t*)(out + 10000) = v;\n+\n+  if (cond1)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 30000);\n+      *(vfloat32mf2_t*)(out + 30000) = v;\n+    }\n+  else\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 20000);\n+      *(vint8mf2_t*)(out + 20000) = v;\n+    }\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v0 = *(vint32mf2_t*)(in + i + 100);\n+      \n+      vint16mf2_t v1 = *(vint16mf2_t*)(in + i + 200);\n+      vint8mf2_t v2 = *(vint8mf2_t*)(in + i + 300);\n+      vint8mf4_t v3 = *(vint8mf4_t*)(in + i + 400);\n+      vint8mf8_t v4 = *(vint8mf8_t*)(in + i + 500);\n+      vbool1_t v5 = *(vbool1_t*)(in + i + 600);\n+\n+      vint32mf2_t v6 = *(vint32mf2_t*)(in + i + 700);\n+\n+      *(vint32mf2_t*)(out + i + 100) = v0;\n+      *(vint16mf2_t*)(out + i + 200) = v1;\n+      *(vint8mf2_t*)(out + i + 300) = v2;\n+      *(vint8mf4_t*)(out + i + 400) = v3;\n+      *(vint8mf8_t*)(out + i + 500) = v4;\n+      *(vbool1_t*)(out + i + 600) = v5;\n+      *(vint32mf2_t*)(out + i + 700) = v6;\n+    }\n+  \n+  if (cond2)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 40000);\n+      *(vfloat32mf2_t*)(out + 40000) = v;\n+    }\n+  else\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 30000);\n+      *(vint16mf4_t*)(out + 30000) = v;\n+    }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "1f6ed17437a32d1c0e30a91de000600933bcefdb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-13.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-13.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vint8mf8_t v1;\n+  vint16mf4_t v2;\n+  \n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "291916f26003baf0fa12cde35726ce5c5234a4c1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-14.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-14.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int32_t * a, int32_t * b, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    a[i] = a[i] + b[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    a[i] = a[i] * b[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    a[i] = a[i] - b[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v;\n+    *(vint32mf2_t*)(out + i + 7000) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v;\n+    *(vint64m1_t*)(out + i + 8000) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v;\n+    *(vint8mf8_t*)(out + i + 9000) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "42930b6af0c9485690395fadad203afbf9802e30", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-15.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-15.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int32_t * a, int32_t * b, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    a[i] = a[i] + b[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    a[i] = a[i] * b[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    a[i] = a[i] - b[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v;\n+    *(vint32mf2_t*)(out + i + 7000) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint16mf2_t v;\n+    *(vint16mf2_t*)(out + i + 777) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v;\n+    *(vint64m1_t*)(out + i + 8000) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v;\n+    *(vfloat32mf2_t*)(out + i + 7777) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vuint16mf2_t v;\n+    *(vuint16mf2_t*)(out + i + 888) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v;\n+    *(vint8mf8_t*)(out + i + 9000) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "087d97c0a6e84fee32dddfe2231613453d009d55", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-16.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-16.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int32_t * a, int32_t * b, int n, int cond)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint16mf4_t v;\n+    *(vint16mf4_t*)(out + i + 700) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    a[i] = a[i] + b[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    a[i] = a[i] * b[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    a[i] = a[i] - b[i];\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint32mf2_t v;\n+    *(vint32mf2_t*)(out + i + 7000) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint16mf2_t v;\n+    *(vint16mf2_t*)(out + i + 777) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v;\n+    *(vint64m1_t*)(out + i + 8000) = v;\n+  }\n+  if (cond == 0) {\n+    vbool64_t v;\n+    *(vbool64_t*)(out + 1234) = v;\n+  } else {\n+    vuint8mf8_t v;\n+    *(vuint8mf8_t*)(out + 5432) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vfloat32mf2_t v;\n+    *(vfloat32mf2_t*)(out + i + 7777) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vuint16mf2_t v;\n+    *(vuint16mf2_t*)(out + i + 888) = v;\n+  }\n+  for (int i = 0; i < n; i++) {\n+    vint8mf8_t v;\n+    *(vint8mf8_t*)(out + i + 9000) = v;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-funroll-loops\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 10 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "8bb6cbe7c35ceccd555e134cea4d5e2a32f6cb5e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-2.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vint16mf4_t v2 = *(vint16mf4_t*)(in + 2);\n+  vint32mf2_t v3 = *(vint32mf2_t*)(in + 3);\n+  vfloat32mf2_t v4 = *(vfloat32mf2_t*)(in + 4);\n+  \n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+  *(vint32mf2_t*)(out + 3) = v3;\n+  *(vfloat32mf2_t*)(out + 4) = v4;\n+  \n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + i + 5);\n+      *(vint16mf4_t*)(out + i + 5) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-funroll-loops\" no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" } } } } */"}, {"sha": "30c2e061c131398642022dea901279e0044a99f1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-3.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vint8mf8_t v1 = *(vint8mf8_t*)(in + 1);\n+  vint16mf4_t v2 = *(vint16mf4_t*)(in + 2);\n+  vint32mf2_t v3 = *(vint32mf2_t*)(in + 3);\n+  vfloat32mf2_t v4 = *(vfloat32mf2_t*)(in + 4);\n+  \n+  *(vint8mf8_t*)(out + 1) = v1;\n+  *(vint16mf4_t*)(out + 2) = v2;\n+  *(vint32mf2_t*)(out + 3) = v3;\n+  *(vfloat32mf2_t*)(out + 4) = v4;\n+  \n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + i + 5);\n+      *(vint16mf2_t*)(out + i + 5) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "7258f3f16060635fdd6ce69e9200fbd73b617495", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-4.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 10000);\n+  *(vfloat32mf2_t*)(out + 10000) = v;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v1 = *(vint16mf2_t*)(in + i + 1);\n+      vint32mf2_t v2 = *(vint32mf2_t*)(in + i + 2);\n+      *(vint16mf2_t*)(out + i + 1) = v1;\n+      *(vint32mf2_t*)(out + i + 2) = v2;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "7258f3f16060635fdd6ce69e9200fbd73b617495", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-5.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-5.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n)\n+{\n+  vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 10000);\n+  *(vfloat32mf2_t*)(out + 10000) = v;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v1 = *(vint16mf2_t*)(in + i + 1);\n+      vint32mf2_t v2 = *(vint32mf2_t*)(in + i + 2);\n+      *(vint16mf2_t*)(out + i + 1) = v1;\n+      *(vint32mf2_t*)(out + i + 2) = v2;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\"  no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-flto\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "32716591cded57f7c4ef531ff5ac81d697d74b4e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-6.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-6.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo (void * restrict in, void * restrict out, int n)\n+{\n+  vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 10000);\n+  *(vfloat32mf2_t*)(out + 10000) = v;\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v0 = *(vint32mf2_t*)(in + i + 100);\n+      \n+      vint16mf2_t v1 = *(vint16mf2_t*)(in + i + 200);\n+      vint8mf2_t v2 = *(vint8mf2_t*)(in + i + 300);\n+      vint8mf4_t v3 = *(vint8mf4_t*)(in + i + 400);\n+      vint8mf8_t v4 = *(vint8mf8_t*)(in + i + 500);\n+      vbool1_t v5 = *(vbool1_t*)(in + i + 600);\n+\n+      vint32mf2_t v6 = *(vint32mf2_t*)(in + i + 700);\n+\n+      *(vint32mf2_t*)(out + i + 100) = v0;\n+      *(vint16mf2_t*)(out + i + 200) = v1;\n+      *(vint8mf2_t*)(out + i + 300) = v2;\n+      *(vint8mf4_t*)(out + i + 400) = v3;\n+      *(vint8mf8_t*)(out + i + 500) = v4;\n+      *(vbool1_t*)(out + i + 600) = v5;\n+      *(vint32mf2_t*)(out + i + 700) = v6;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ea91f0e966ae84addcf621eb75138aad2f450741", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-7.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-7.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo (int8_t * restrict in, int8_t * restrict out, int n)\n+{\n+  vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 10000);\n+  *(vfloat32mf2_t*)(out + 10000) = v;\n+\n+  for (int i = 0 ; i < n * n; i++)\n+    out[i] = out[i] + out[i];\n+  \n+  for (int i = 0 ; i < n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0 ; i < n * n * n * n; i++)\n+    out[i] = out[i] * out[i];\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v0 = *(vint32mf2_t*)(in + i + 100);\n+      \n+      vint16mf2_t v1 = *(vint16mf2_t*)(in + i + 200);\n+      vint8mf2_t v2 = *(vint8mf2_t*)(in + i + 300);\n+      vint8mf4_t v3 = *(vint8mf4_t*)(in + i + 400);\n+      vint8mf8_t v4 = *(vint8mf8_t*)(in + i + 500);\n+      vbool1_t v5 = *(vbool1_t*)(in + i + 600);\n+\n+      vint32mf2_t v6 = *(vint32mf2_t*)(in + i + 700);\n+\n+      *(vint32mf2_t*)(out + i + 100) = v0;\n+      *(vint16mf2_t*)(out + i + 200) = v1;\n+      *(vint8mf2_t*)(out + i + 300) = v2;\n+      *(vint8mf4_t*)(out + i + 400) = v3;\n+      *(vint8mf8_t*)(out + i + 500) = v4;\n+      *(vbool1_t*)(out + i + 600) = v5;\n+      *(vint32mf2_t*)(out + i + 700) = v6;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "7537bfe925de9e885d596ff23066e409df51ccc1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-8.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-8.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 10000);\n+  *(vfloat32mf2_t*)(out + 10000) = v;\n+\n+  if (cond)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 20000);\n+      *(vfloat32mf2_t*)(out + 20000) = v;\n+    }\n+  else\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 20000);\n+      *(vint16mf4_t*)(out + 20000) = v;\n+    }\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v0 = *(vint32mf2_t*)(in + i + 100);\n+      \n+      vint16mf2_t v1 = *(vint16mf2_t*)(in + i + 200);\n+      vint8mf2_t v2 = *(vint8mf2_t*)(in + i + 300);\n+      vint8mf4_t v3 = *(vint8mf4_t*)(in + i + 400);\n+      vint8mf8_t v4 = *(vint8mf8_t*)(in + i + 500);\n+      vbool1_t v5 = *(vbool1_t*)(in + i + 600);\n+\n+      vint32mf2_t v6 = *(vint32mf2_t*)(in + i + 700);\n+\n+      *(vint32mf2_t*)(out + i + 100) = v0;\n+      *(vint16mf2_t*)(out + i + 200) = v1;\n+      *(vint8mf2_t*)(out + i + 300) = v2;\n+      *(vint8mf4_t*)(out + i + 400) = v3;\n+      *(vint8mf8_t*)(out + i + 500) = v4;\n+      *(vbool1_t*)(out + i + 600) = v5;\n+      *(vint32mf2_t*)(out + i + 700) = v6;\n+    }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16\\s*mf4,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "7537bfe925de9e885d596ff23066e409df51ccc1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-9.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f18836ca035d3d029cdc503e2a0d7d685a4d072/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-9.c?ref=6f18836ca035d3d029cdc503e2a0d7d685a4d072", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n+{\n+  vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 10000);\n+  *(vfloat32mf2_t*)(out + 10000) = v;\n+\n+  if (cond)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 20000);\n+      *(vfloat32mf2_t*)(out + 20000) = v;\n+    }\n+  else\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 20000);\n+      *(vint16mf4_t*)(out + 20000) = v;\n+    }\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v0 = *(vint32mf2_t*)(in + i + 100);\n+      \n+      vint16mf2_t v1 = *(vint16mf2_t*)(in + i + 200);\n+      vint8mf2_t v2 = *(vint8mf2_t*)(in + i + 300);\n+      vint8mf4_t v3 = *(vint8mf4_t*)(in + i + 400);\n+      vint8mf8_t v4 = *(vint8mf8_t*)(in + i + 500);\n+      vbool1_t v5 = *(vbool1_t*)(in + i + 600);\n+\n+      vint32mf2_t v6 = *(vint32mf2_t*)(in + i + 700);\n+\n+      *(vint32mf2_t*)(out + i + 100) = v0;\n+      *(vint16mf2_t*)(out + i + 200) = v1;\n+      *(vint8mf2_t*)(out + i + 300) = v2;\n+      *(vint8mf4_t*)(out + i + 400) = v3;\n+      *(vint8mf8_t*)(out + i + 500) = v4;\n+      *(vbool1_t*)(out + i + 600) = v5;\n+      *(vint32mf2_t*)(out + i + 700) = v6;\n+    }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16\\s*mf4,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}]}