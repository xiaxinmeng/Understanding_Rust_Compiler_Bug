{"sha": "f1a68574b1f8d2961d3a676dbcf0cc24b6368578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhNjg1NzRiMWY4ZDI5NjFkM2E2NzZkYmNmMGNjMjRiNjM2ODU3OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-20T11:46:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-20T11:50:50Z"}, "message": "libstdc++: Define __cpp_lib_to_chars for C++20 [PR 100146]\n\nThis defines the feature test macro when uselocale is available, because\nthe floating-point std::from_chars support currently depends on that.\n\nCo-authored-by: Jakub Jelinek <jakub@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100146\n\t* include/std/charconv (__cpp_lib_to_chars): Define\n\tconditionally.\n\t* include/std/version (__cpp_lib_to_chars): Likewise..\n\t* testsuite/20_util/from_chars/4.cc: Only check feature test\n\tmacro, not _GLIBCXX_HAVE_USELOCALE.\n\t* testsuite/20_util/from_chars/5.cc: Likewise.\n\t* testsuite/20_util/from_chars/6.cc: Likewise.\n\t* testsuite/20_util/to_chars/long_double.cc: Likewise.", "tree": {"sha": "a68040a623b4816c335a439560141b87d8ca96b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a68040a623b4816c335a439560141b87d8ca96b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1a68574b1f8d2961d3a676dbcf0cc24b6368578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a68574b1f8d2961d3a676dbcf0cc24b6368578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a68574b1f8d2961d3a676dbcf0cc24b6368578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96de14f46f13201abab6fa86fb6fcaf6f03d246d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96de14f46f13201abab6fa86fb6fcaf6f03d246d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96de14f46f13201abab6fa86fb6fcaf6f03d246d"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "6e407f31e30b0e4f5a4affb602c2f3b6ecebfd44", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=f1a68574b1f8d2961d3a676dbcf0cc24b6368578", "patch": "@@ -44,8 +44,9 @@\n #include <bits/error_constants.h> // for std::errc\n #include <ext/numeric_traits.h>\n \n-// FIXME: Define when floating point is supported:\n-// #define __cpp_lib_to_chars 201611L\n+#if _GLIBCXX_HAVE_USELOCALE\n+# define __cpp_lib_to_chars 201611L\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "d9f6a3c3dfd38d6e49b1a66c8e5e83ac836a95dc", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=f1a68574b1f8d2961d3a676dbcf0cc24b6368578", "patch": "@@ -161,7 +161,9 @@\n #endif\n #define __cpp_lib_shared_ptr_weak_type 201606\n #define __cpp_lib_string_view 201803L\n-// #define __cpp_lib_to_chars 201611L\n+#if _GLIBCXX_HAVE_USELOCALE\n+# define __cpp_lib_to_chars 201611L\n+#endif\n #define __cpp_lib_unordered_map_try_emplace 201411\n #define __cpp_lib_variant 201606L\n #endif"}, {"sha": "7cee4dcbc2320a6e0aee95d9240df80109812c9b", "filename": "libstdc++-v3/testsuite/20_util/from_chars/4.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F4.cc?ref=f1a68574b1f8d2961d3a676dbcf0cc24b6368578", "patch": "@@ -28,9 +28,7 @@\n \n // Test std::from_chars floating-point conversions.\n \n-// As of July 2020 __cpp_lib_to_chars is not defined, but std::from_chars\n-// works for floating-point types when _GLIBCXX_HAVE_USELOCALE is defined.\n-#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n+#if __cpp_lib_to_chars >= 201611L\n void\n test01()\n {\n@@ -363,7 +361,7 @@ test06()\n int\n main()\n {\n-#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n+#if __cpp_lib_to_chars >= 201611L\n   test01();\n   test02();\n   test03();"}, {"sha": "fa86ab7383cace2b5c8057d1428a1bb56b77c152", "filename": "libstdc++-v3/testsuite/20_util/from_chars/5.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F5.cc?ref=f1a68574b1f8d2961d3a676dbcf0cc24b6368578", "patch": "@@ -25,9 +25,7 @@\n \n // Test std::from_chars error handling.\n \n-// As of July 2020 __cpp_lib_to_chars is not defined, but std::from_chars\n-// works for floating-point types when _GLIBCXX_HAVE_USELOCALE is defined.\n-#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n+#if __cpp_lib_to_chars >= 201611L\n void\n test01()\n {\n@@ -160,7 +158,7 @@ test04()\n int\n main()\n {\n-#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n+#if __cpp_lib_to_chars >= 201611L\n   test01();\n   test02();\n   test03();"}, {"sha": "139a1811db0665783cbcb305f83a30e7a1dad53f", "filename": "libstdc++-v3/testsuite/20_util/from_chars/6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F6.cc?ref=f1a68574b1f8d2961d3a676dbcf0cc24b6368578", "patch": "@@ -27,7 +27,7 @@\n void\n test01()\n {\n-#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n+#if __cpp_lib_to_chars >= 201611L\n #if _GLIBCXX_USE_C99_FENV_TR1\n   double d;\n   std::fesetround(FE_DOWNWARD);"}, {"sha": "8cf45ad5e94184b5af5f4a1da85514a14f13951e", "filename": "libstdc++-v3/testsuite/20_util/to_chars/long_double.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a68574b1f8d2961d3a676dbcf0cc24b6368578/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc?ref=f1a68574b1f8d2961d3a676dbcf0cc24b6368578", "patch": "@@ -69,7 +69,7 @@ test01()\n   // Verifies correctness of the hexadecimal form [BEGIN,END) for VALUE by\n   // round-tripping it through from_chars (if available).\n   auto verify_via_from_chars = [] (char *begin, char *end, long double value) {\n-#if __cpp_lib_to_chars >= 201611L || _GLIBCXX_HAVE_USELOCALE\n+#if __cpp_lib_to_chars >= 201611L\n     long double roundtrip;\n     auto result = from_chars(begin, end, roundtrip, chars_format::hex);\n     VERIFY( result.ec == errc{} );"}]}