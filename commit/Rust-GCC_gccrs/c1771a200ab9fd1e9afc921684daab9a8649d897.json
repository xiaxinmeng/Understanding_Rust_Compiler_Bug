{"sha": "c1771a200ab9fd1e9afc921684daab9a8649d897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE3NzFhMjAwYWI5ZmQxZTlhZmM5MjE2ODRkYWFiOWE4NjQ5ZDg5Nw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-22T19:17:47Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-04-22T19:17:47Z"}, "message": "re PR c/44774 (-Werror=edantic)\n\n2012-04-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/44774\ngcc/\n\t* doc/invoke.texi (pedantic): Rename to Wpedantic.\n\t* common.opt (Wpedantic): New.\n\t(pedantic): Alias Wpedantic.\n\t* diagnostic.c (warning_at): Likewise.\n\t* c-decl.c (diagnose_mismatched_decls): Likewise.\n\t(build_array_declarator): Likewise.\n\t(mark_forward_parm_decls):\n\t(check_bitfield_type_and_width): Likewise.\n\t(grokdeclarator): Likewise.\n\t(grokfield): Likewise.\n\t(finish_struct): Likewise.\n\t(build_enumerator): Likewise.\n\t(store_parm_decls_oldstyle): Likewise.\n\t(declspecs_add_qual): Likewise.\n\t(declspecs_add_type): Likewise.\n\t(finish_declspecs): Likewise.\n\t* c-typeck.c (composite_type): Likewise.\n\t(comp_target_types): Likewise.\n\t(build_array_ref): Likewise.\n\t(pointer_diff): Likewise.\n\t(build_unary_op): Likewise.\n\t(build_conditional_expr): Likewise.\n\t(build_c_cast): Likewise.\n\t(convert_for_assignment): Likewise.\n\t(maybe_warn_string_init): Likewise.\n\t(digest_init): Likewise.\n\t(pop_init_level): Likewise.\n\t(set_init_index): Likewise.\n\t(c_finish_goto_label): Likewise.\n\t(c_finish_return): Likewise.\n\t(do_case): Likewise.\n\t(build_binary_op): Likewise.\n\t* c-parser.c (static): Likewise.\n\t(c_parser_external_declaration): Likewise.\n\t(c_parser_declaration_or_fndef): Likewise.\n\t(c_parser_static_assert_declaration_no_se): Likewise.\n\t(c_parser_enum_specifier): Likewise.\n\t(c_parser_struct_or_union_specifier): Likewise.\n\t(c_parser_struct_declaration): Likewise.\n\t(c_parser_alignas_specifier): Likewise.\n\t(c_parser_braced_init): Likewise.\n\t(c_parser_initelt): Likewise.\n\t(c_parser_compound_statement_nostart): Likewise.\n\t(c_parser_conditional_expression): Likewise.\n\t(c_parser_alignof_expression): Likewise.\n\t(c_parser_postfix_expression): Likewise.\n\t(c_parser_postfix_expression_after_paren_): Likewise.\n\t(c_parser_objc_class_instance_variables): Likewise.\n\t(c_parser_objc_method_definition): Likewise.\n\t(c_parser_objc_methodprotolist): Likewise.\n\nc-family/\n\t* c.opt (Wpedantic): New.\n\t(pedantic): Alias Wpedantic.\n\t* c-opts.c (c_common_handle_option): Replace -pedantic with -Wpedantic.\n\t(c_common_post_options): Likewise.\n\t(sanitize_cpp_opts): Likewise.\n\t* c-lex.c (interpret_float): Likewise.\n\t* c-format.c (check_format_types): Likewise.\n\t* c-common.c (pointer_int_sum): Likewise.\n\t(c_sizeof_or_alignof_type): Likewise.\n\t(c_add_case_label): Likewise.\n\t(c_do_switch_warnings): Likewise.\n\t* c-pragma.c (handle_pragma_float_const_decimal64): Likewise.\ncp/\n\t* typeck.c (composite_pointer_type): Likewise.\n\t(cxx_sizeof_or_alignof_type): Likewise.\n\t(cp_build_array_ref): Likewise.\n\t(cp_build_function_call_vec): Likewise.\n\t(cp_build_addr_expr_1): Likewise.\n\t(convert_member_func_to_ptr): Likewise.\n\t* decl.c (check_tag_decl): Likewise.\n\t(check_static_variable_definition): Likewise.\n\t(compute_array_index_type): Likewise.\n\t(create_array_type_for_decl): Likewise.\n\t(grokdeclarator): Likewise.\n\t(grok_op_properties): Likewise.\n\t* error.c (maybe_warn_cpp0x): Likewise.\n\t* pt.c (maybe_process_partial_specialization): Likewise.\n\t(convert_template_argument): Likewise.\n\t(do_decl_instantiation): Likewise.\n\t(do_type_instantiation): Likewise.\n\t* parser.c (cp_parser_primary_expression): Likewise.\n\t(cp_parser_postfix_expression): Likewise.\n\t(cp_parser_unary_expression): Likewise.\n\t(cp_parser_question_colon_clause): Likewise.\n\t(cp_parser_lambda_introducer): Likewise.\n\t(cp_parser_lambda_declarator_opt): Likewise.\n\t(cp_parser_compound_statement): Likewise.\n\t(cp_parser_jump_statement): Likewise.\n\t(cp_parser_declaration_seq_opt): Likewise.\n\t(cp_parser_enum_specifier): Likewise.\n\t(cp_parser_enumerator_list): Likewise.\n\t(cp_parser_initializer_list): Likewise.\n\t(cp_parser_member_declaration): Likewise.\n\t* call.c (build_conditional_expr_1): Likewise.\n\t* friend.c (make_friend_class): Likewise.\n\t* name-lookup.c (pushdecl_maybe_friend_1): Likewise.\n\nFrom-SVN: r186681", "tree": {"sha": "25f6840e8f549e45366fc499af6bd5be146d1839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f6840e8f549e45366fc499af6bd5be146d1839"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1771a200ab9fd1e9afc921684daab9a8649d897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1771a200ab9fd1e9afc921684daab9a8649d897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1771a200ab9fd1e9afc921684daab9a8649d897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1771a200ab9fd1e9afc921684daab9a8649d897/comments", "author": null, "committer": null, "parents": [{"sha": "f12e8bd5c3e7063f4e616bda3cab540ea73ac446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12e8bd5c3e7063f4e616bda3cab540ea73ac446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12e8bd5c3e7063f4e616bda3cab540ea73ac446"}], "stats": {"total": 524, "additions": 320, "deletions": 204}, "files": [{"sha": "1e80ca560b077a404dd31b4fa3fba9b0a74017fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -1,3 +1,57 @@\n+2012-04-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/44774\n+\t* doc/invoke.texi (pedantic): Rename to Wpedantic.\n+\t* common.opt (Wpedantic): New.\n+\t(pedantic): Alias Wpedantic.\n+\t* diagnostic.c (warning_at): Likewise.\n+\t* c-decl.c (diagnose_mismatched_decls): Likewise.\n+\t(build_array_declarator): Likewise.\n+\t(mark_forward_parm_decls):\n+\t(check_bitfield_type_and_width): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t(grokfield): Likewise.\n+\t(finish_struct): Likewise.\n+\t(build_enumerator): Likewise.\n+\t(store_parm_decls_oldstyle): Likewise.\n+\t(declspecs_add_qual): Likewise.\n+\t(declspecs_add_type): Likewise.\n+\t(finish_declspecs): Likewise.\n+\t* c-typeck.c (composite_type): Likewise.\n+\t(comp_target_types): Likewise.\n+\t(build_array_ref): Likewise.\n+\t(pointer_diff): Likewise.\n+\t(build_unary_op): Likewise.\n+\t(build_conditional_expr): Likewise.\n+\t(build_c_cast): Likewise.\n+\t(convert_for_assignment): Likewise.\n+\t(maybe_warn_string_init): Likewise.\n+\t(digest_init): Likewise.\n+\t(pop_init_level): Likewise.\n+\t(set_init_index): Likewise.\n+\t(c_finish_goto_label): Likewise.\n+\t(c_finish_return): Likewise.\n+\t(do_case): Likewise.\n+\t(build_binary_op): Likewise.\n+\t* c-parser.c (static): Likewise.\n+\t(c_parser_external_declaration): Likewise.\n+\t(c_parser_declaration_or_fndef): Likewise.\n+\t(c_parser_static_assert_declaration_no_se): Likewise.\n+\t(c_parser_enum_specifier): Likewise.\n+\t(c_parser_struct_or_union_specifier): Likewise.\n+\t(c_parser_struct_declaration): Likewise.\n+\t(c_parser_alignas_specifier): Likewise.\n+\t(c_parser_braced_init): Likewise.\n+\t(c_parser_initelt): Likewise.\n+\t(c_parser_compound_statement_nostart): Likewise.\n+\t(c_parser_conditional_expression): Likewise.\n+\t(c_parser_alignof_expression): Likewise.\n+\t(c_parser_postfix_expression): Likewise.\n+\t(c_parser_postfix_expression_after_paren_): Likewise.\n+\t(c_parser_objc_class_instance_variables): Likewise.\n+\t(c_parser_objc_method_definition): Likewise.\n+\t(c_parser_objc_methodprotolist): Likewise.\n+\n 2012-04-22  Ian Lance Taylor  <iant@google.com>\n \n \t* godump.c (go_output_typedef): Dump size of structs."}, {"sha": "10fd4c5a3a948e1028388cb6df3aacdcffea7a71", "filename": "gcc/c-decl.c", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -1837,7 +1837,7 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \t}\n       else if (pedantic && !flag_isoc11)\n \t{\n-\t  pedwarn (input_location, OPT_pedantic,\n+\t  pedwarn (input_location, OPT_Wpedantic,\n \t\t   \"redefinition of typedef %q+D\", newdecl);\n \t  locate_old_decl (olddecl);\n \t}\n@@ -3897,11 +3897,11 @@ build_array_declarator (location_t loc,\n   if (!flag_isoc99)\n     {\n       if (static_p || quals != NULL)\n-\tpedwarn (loc, OPT_pedantic,\n+\tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C90 does not support %<static%> or type \"\n \t\t \"qualifiers in parameter array declarators\");\n       if (vla_unspec_p)\n-\tpedwarn (loc, OPT_pedantic,\n+\tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C90 does not support %<[*]%> array declarators\");\n     }\n   if (vla_unspec_p)\n@@ -4594,7 +4594,7 @@ mark_forward_parm_decls (void)\n \n   if (pedantic && !current_scope->warned_forward_parm_decls)\n     {\n-      pedwarn (input_location, OPT_pedantic,\n+      pedwarn (input_location, OPT_Wpedantic,\n \t       \"ISO C forbids forward parameter declarations\");\n       current_scope->warned_forward_parm_decls = true;\n     }\n@@ -4746,7 +4746,7 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n \t{\n \t  *width = c_fully_fold (*width, false, NULL);\n \t  if (TREE_CODE (*width) == INTEGER_CST)\n-\t    pedwarn (input_location, OPT_pedantic,\n+\t    pedwarn (input_location, OPT_Wpedantic,\n \t\t     \"bit-field %qs width not an integer constant expression\",\n \t\t     name);\n \t}\n@@ -4782,7 +4782,7 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n       && type_mv != integer_type_node\n       && type_mv != unsigned_type_node\n       && type_mv != boolean_type_node)\n-    pedwarn (input_location, OPT_pedantic,\n+    pedwarn (input_location, OPT_Wpedantic,\n \t     \"type of bit-field %qs is a GCC extension\", name);\n \n   max_width = TYPE_PRECISION (*type);\n@@ -5076,11 +5076,11 @@ grokdeclarator (const struct c_declarator *declarator,\n   if (pedantic && !flag_isoc99)\n     {\n       if (constp > 1)\n-\tpedwarn (loc, OPT_pedantic, \"duplicate %<const%>\");\n+\tpedwarn (loc, OPT_Wpedantic, \"duplicate %<const%>\");\n       if (restrictp > 1)\n-\tpedwarn (loc, OPT_pedantic, \"duplicate %<restrict%>\");\n+\tpedwarn (loc, OPT_Wpedantic, \"duplicate %<restrict%>\");\n       if (volatilep > 1)\n-\tpedwarn (loc, OPT_pedantic, \"duplicate %<volatile%>\");\n+\tpedwarn (loc, OPT_Wpedantic, \"duplicate %<volatile%>\");\n     }\n \n   if (!ADDR_SPACE_GENERIC_P (as1) && !ADDR_SPACE_GENERIC_P (as2) && as1 != as2)\n@@ -5107,7 +5107,7 @@ grokdeclarator (const struct c_declarator *declarator,\n     {\n       if (storage_class == csc_auto)\n \tpedwarn (loc,\n-\t\t (current_scope == file_scope) ? 0 : OPT_pedantic,\n+\t\t (current_scope == file_scope) ? 0 : OPT_Wpedantic,\n \t\t \"function definition declared %<auto%>\");\n       if (storage_class == csc_register)\n \terror_at (loc, \"function definition declared %<register%>\");\n@@ -5173,7 +5173,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \terror_at (loc, \"file-scope declaration of %qE specifies %<auto%>\",\n \t    \t  name);\n       if (pedantic && storage_class == csc_register)\n-\tpedwarn (input_location, OPT_pedantic,\n+\tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"file-scope declaration of %qE specifies %<register%>\", name);\n     }\n   else\n@@ -5295,7 +5295,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      }\n \n \t    if (pedantic && !in_system_header && flexible_array_type_p (type))\n-\t      pedwarn (loc, OPT_pedantic,\n+\t      pedwarn (loc, OPT_Wpedantic,\n \t\t       \"invalid use of structure with flexible array member\");\n \n \t    if (size == error_mark_node)\n@@ -5335,10 +5335,10 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\tif (pedantic && size_maybe_const && integer_zerop (size))\n \t\t  {\n \t\t    if (name)\n-\t\t      pedwarn (loc, OPT_pedantic,\n+\t\t      pedwarn (loc, OPT_Wpedantic,\n \t\t\t       \"ISO C forbids zero-size array %qE\", name);\n \t\t    else\n-\t\t      pedwarn (loc, OPT_pedantic,\n+\t\t      pedwarn (loc, OPT_Wpedantic,\n \t\t\t       \"ISO C forbids zero-size array\");\n \t\t  }\n \n@@ -5463,7 +5463,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t  }\n \t\tif (flexible_array_member\n \t\t    && pedantic && !flag_isoc99 && !in_system_header)\n-\t\t  pedwarn (loc, OPT_pedantic,\n+\t\t  pedwarn (loc, OPT_Wpedantic,\n \t\t\t   \"ISO C90 does not support flexible array members\");\n \n \t\t/* ISO C99 Flexible array members are effectively\n@@ -5664,7 +5664,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \t    if (pedantic && TREE_CODE (type) == FUNCTION_TYPE\n \t\t&& type_quals)\n-\t      pedwarn (loc, OPT_pedantic,\n+\t      pedwarn (loc, OPT_Wpedantic,\n \t\t       \"ISO C forbids qualified function types\");\n \t    if (type_quals)\n \t      type = c_build_qualified_type (type, type_quals);\n@@ -5842,7 +5842,7 @@ grokdeclarator (const struct c_declarator *declarator,\n       tree decl;\n       if (pedantic && TREE_CODE (type) == FUNCTION_TYPE\n \t  && type_quals)\n-\tpedwarn (loc, OPT_pedantic,\n+\tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C forbids qualified function types\");\n       if (type_quals)\n \ttype = c_build_qualified_type (type, type_quals);\n@@ -5888,7 +5888,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t  && !declspecs->inline_p && !declspecs->noreturn_p);\n       if (pedantic && TREE_CODE (type) == FUNCTION_TYPE\n \t  && type_quals)\n-\tpedwarn (loc, OPT_pedantic,\n+\tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C forbids const or volatile function types\");\n       if (type_quals)\n \ttype = c_build_qualified_type (type, type_quals);\n@@ -5899,7 +5899,7 @@ grokdeclarator (const struct c_declarator *declarator,\n       && variably_modified_type_p (type, NULL_TREE))\n     {\n       /* C99 6.7.2.1p8 */\n-      pedwarn (loc, OPT_pedantic, \"a member of a structure or union cannot \"\n+      pedwarn (loc, OPT_Wpedantic, \"a member of a structure or union cannot \"\n \t       \"have a variably modified type\");\n     }\n \n@@ -5954,7 +5954,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \telse if (TREE_CODE (type) == FUNCTION_TYPE)\n \t  {\n \t    if (type_quals)\n-\t      pedwarn (loc, OPT_pedantic,\n+\t      pedwarn (loc, OPT_Wpedantic,\n \t\t       \"ISO C forbids qualified function types\");\n \t    if (type_quals)\n \t      type = c_build_qualified_type (type, type_quals);\n@@ -6032,7 +6032,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t       GCC allows 'auto', perhaps with 'inline', to support\n \t       nested functions.  */\n \t    if (storage_class == csc_auto)\n-\t\tpedwarn (loc, OPT_pedantic,\n+\t\tpedwarn (loc, OPT_Wpedantic,\n \t\t\t \"invalid storage class for function %qE\", name);\n \t    else if (storage_class == csc_static)\n \t      {\n@@ -6049,7 +6049,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \tdecl = build_decl_attribute_variant (decl, decl_attr);\n \n \tif (pedantic && type_quals && !DECL_IN_SYSTEM_HEADER (decl))\n-\t  pedwarn (loc, OPT_pedantic,\n+\t  pedwarn (loc, OPT_Wpedantic,\n \t\t   \"ISO C forbids qualified function types\");\n \n \t/* Every function declaration is an external reference\n@@ -6101,10 +6101,10 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\tif (!flag_isoc11)\n \t\t  {\n \t\t    if (flag_isoc99)\n-\t\t      pedwarn (loc, OPT_pedantic,\n+\t\t      pedwarn (loc, OPT_Wpedantic,\n \t\t\t       \"ISO C99 does not support %<_Noreturn%>\");\n \t\t    else\n-\t\t      pedwarn (loc, OPT_pedantic,\n+\t\t      pedwarn (loc, OPT_Wpedantic,\n \t\t\t       \"ISO C90 does not support %<_Noreturn%>\");\n \t\t  }\n \t\tTREE_THIS_VOLATILE (decl) = 1;\n@@ -6816,10 +6816,10 @@ grokfield (location_t loc,\n       if (!flag_isoc11)\n \t{\n \t  if (flag_isoc99)\n-\t    pedwarn (loc, OPT_pedantic,\n+\t    pedwarn (loc, OPT_Wpedantic,\n \t\t     \"ISO C99 doesn%'t support unnamed structs/unions\");\n \t  else\n-\t    pedwarn (loc, OPT_pedantic,\n+\t    pedwarn (loc, OPT_Wpedantic,\n \t\t     \"ISO C90 doesn%'t support unnamed structs/unions\");\n \t}\n     }\n@@ -7104,16 +7104,16 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n \t  if (TREE_CODE (t) == UNION_TYPE)\n \t    {\n \t      if (fieldlist)\n-\t\tpedwarn (loc, OPT_pedantic, \"union has no named members\");\n+\t\tpedwarn (loc, OPT_Wpedantic, \"union has no named members\");\n \t      else\n-\t\tpedwarn (loc, OPT_pedantic, \"union has no members\");\n+\t\tpedwarn (loc, OPT_Wpedantic, \"union has no members\");\n \t    }\n \t  else\n \t    {\n \t      if (fieldlist)\n-\t\tpedwarn (loc, OPT_pedantic, \"struct has no named members\");\n+\t\tpedwarn (loc, OPT_Wpedantic, \"struct has no named members\");\n \t      else\n-\t\tpedwarn (loc, OPT_pedantic, \"struct has no members\");\n+\t\tpedwarn (loc, OPT_Wpedantic, \"struct has no members\");\n \t    }\n \t}\n     }\n@@ -7195,7 +7195,7 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n \n       if (pedantic && TREE_CODE (t) == RECORD_TYPE\n \t  && flexible_array_type_p (TREE_TYPE (x)))\n-\tpedwarn (DECL_SOURCE_LOCATION (x), OPT_pedantic,\n+\tpedwarn (DECL_SOURCE_LOCATION (x), OPT_Wpedantic,\n \t\t \"invalid use of structure with flexible array member\");\n \n       if (DECL_NAME (x)\n@@ -7617,7 +7617,7 @@ build_enumerator (location_t decl_loc, location_t loc,\n \t    {\n \t      value = c_fully_fold (value, false, NULL);\n \t      if (TREE_CODE (value) == INTEGER_CST)\n-\t\tpedwarn (loc, OPT_pedantic,\n+\t\tpedwarn (loc, OPT_Wpedantic,\n \t\t\t \"enumerator value for %qE is not an integer \"\n \t\t\t \"constant expression\", name);\n \t    }\n@@ -7649,7 +7649,7 @@ build_enumerator (location_t decl_loc, location_t loc,\n      (6.4.4.3/2 in the C99 Standard).  GCC allows any integer type as\n      an extension.  */\n   else if (!int_fits_type_p (value, integer_type_node))\n-    pedwarn (loc, OPT_pedantic,\n+    pedwarn (loc, OPT_Wpedantic,\n \t     \"ISO C restricts enumerator values to range of %<int%>\");\n \n   /* The ISO C Standard mandates enumerators to have type int, even\n@@ -8195,14 +8195,14 @@ store_parm_decls_oldstyle (tree fndecl, const struct c_arg_info *arg_info)\n \t\t     old-style definition and discarded?  */\n \t\t  if (current_function_prototype_built_in)\n \t\t    warning_at (DECL_SOURCE_LOCATION (parm),\n-\t\t\t\tOPT_pedantic, \"promoted argument %qD \"\n+\t\t\t\tOPT_Wpedantic, \"promoted argument %qD \"\n \t\t\t\t\"doesn%'t match built-in prototype\", parm);\n \t\t  else\n \t\t    {\n \t\t      pedwarn (DECL_SOURCE_LOCATION (parm),\n-\t\t\t       OPT_pedantic, \"promoted argument %qD \"\n+\t\t\t       OPT_Wpedantic, \"promoted argument %qD \"\n \t\t\t       \"doesn%'t match prototype\", parm);\n-\t\t      pedwarn (current_function_prototype_locus, OPT_pedantic,\n+\t\t      pedwarn (current_function_prototype_locus, OPT_Wpedantic,\n \t\t\t       \"prototype declaration\");\n \t\t    }\n \t\t}\n@@ -8878,7 +8878,7 @@ declspecs_add_qual (struct c_declspecs *specs, tree qual)\n       gcc_unreachable ();\n     }\n   if (dupe && !flag_isoc99)\n-    pedwarn (input_location, OPT_pedantic, \"duplicate %qE\", qual);\n+    pedwarn (input_location, OPT_Wpedantic, \"duplicate %qE\", qual);\n   return specs;\n }\n \n@@ -9094,7 +9094,7 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t    case RID_COMPLEX:\n \t      dupe = specs->complex_p;\n \t      if (!flag_isoc99 && !in_system_header)\n-\t\tpedwarn (loc, OPT_pedantic,\n+\t\tpedwarn (loc, OPT_Wpedantic,\n \t\t\t \"ISO C90 does not support complex types\");\n \t      if (specs->typespec_word == cts_void)\n \t\terror_at (loc,\n@@ -9133,7 +9133,7 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t      break;\n \t    case RID_SAT:\n \t      dupe = specs->saturating_p;\n-\t      pedwarn (loc, OPT_pedantic,\n+\t      pedwarn (loc, OPT_Wpedantic,\n \t\t       \"ISO C does not support saturating types\");\n \t      if (specs->typespec_word == cts_int128)\n \t        {\n@@ -9212,7 +9212,7 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t\t  return specs;\n \t\t}\n \t      if (!in_system_header)\n-\t\tpedwarn (loc, OPT_pedantic,\n+\t\tpedwarn (loc, OPT_Wpedantic,\n \t\t\t \"ISO C does not support %<__int128%> type\");\n \n \t      if (specs->long_p)\n@@ -9415,7 +9415,7 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t\terror_at (loc,\n \t\t\t  (\"decimal floating point not supported \"\n \t\t\t   \"for this target\"));\n-\t      pedwarn (loc, OPT_pedantic,\n+\t      pedwarn (loc, OPT_Wpedantic,\n \t\t       \"ISO C does not support decimal floating point\");\n \t      return specs;\n \t    case RID_FRACT:\n@@ -9439,7 +9439,7 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t      if (!targetm.fixed_point_supported_p ())\n \t\terror_at (loc,\n \t\t\t  \"fixed-point types not supported for this target\");\n-\t      pedwarn (loc, OPT_pedantic,\n+\t      pedwarn (loc, OPT_Wpedantic,\n \t\t       \"ISO C does not support fixed-point types\");\n \t      return specs;\n \t    default:\n@@ -9675,7 +9675,7 @@ finish_declspecs (struct c_declspecs *specs)\n       else if (specs->complex_p)\n \t{\n \t  specs->typespec_word = cts_double;\n-\t  pedwarn (input_location, OPT_pedantic,\n+\t  pedwarn (input_location, OPT_Wpedantic,\n \t\t   \"ISO C does not support plain %<complex%> meaning \"\n \t\t   \"%<double complex%>\");\n \t}\n@@ -9720,7 +9720,7 @@ finish_declspecs (struct c_declspecs *specs)\n \tspecs->type = char_type_node;\n       if (specs->complex_p)\n \t{\n-\t  pedwarn (input_location, OPT_pedantic,\n+\t  pedwarn (input_location, OPT_Wpedantic,\n \t\t   \"ISO C does not support complex integer types\");\n \t  specs->type = build_complex_type (specs->type);\n \t}\n@@ -9733,7 +9733,7 @@ finish_declspecs (struct c_declspecs *specs)\n \t\t     : int128_integer_type_node);\n       if (specs->complex_p)\n \t{\n-\t  pedwarn (input_location, OPT_pedantic,\n+\t  pedwarn (input_location, OPT_Wpedantic,\n \t\t   \"ISO C does not support complex integer types\");\n \t  specs->type = build_complex_type (specs->type);\n \t}\n@@ -9759,7 +9759,7 @@ finish_declspecs (struct c_declspecs *specs)\n \t\t       : integer_type_node);\n       if (specs->complex_p)\n \t{\n-\t  pedwarn (input_location, OPT_pedantic,\n+\t  pedwarn (input_location, OPT_Wpedantic,\n \t\t   \"ISO C does not support complex integer types\");\n \t  specs->type = build_complex_type (specs->type);\n \t}"}, {"sha": "fb895315d432339a257bdfab480a973421c3ea74", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -1,3 +1,19 @@\n+2012-04-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/44774\n+\t* c.opt (Wpedantic): New.\n+\t(pedantic): Alias Wpedantic.\n+\t* c-opts.c (c_common_handle_option): Replace -pedantic with -Wpedantic.\n+\t(c_common_post_options): Likewise.\n+\t(sanitize_cpp_opts): Likewise.\n+\t* c-lex.c (interpret_float): Likewise.\n+\t* c-format.c (check_format_types): Likewise.\n+\t* c-common.c (pointer_int_sum): Likewise.\n+\t(c_sizeof_or_alignof_type): Likewise.\n+\t(c_add_case_label): Likewise.\n+\t(c_do_switch_warnings): Likewise.\n+\t* c-pragma.c (handle_pragma_float_const_decimal64): Likewise.\n+\n 2012-04-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/52818"}, {"sha": "4eacd198d779753dc7c2ed3c547aacdaeb09543e", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -3858,19 +3858,19 @@ pointer_int_sum (location_t loc, enum tree_code resultcode,\n \n   if (TREE_CODE (TREE_TYPE (result_type)) == VOID_TYPE)\n     {\n-      pedwarn (loc, pedantic ? OPT_pedantic : OPT_Wpointer_arith,\n+      pedwarn (loc, pedantic ? OPT_Wpedantic : OPT_Wpointer_arith,\n \t       \"pointer of type %<void *%> used in arithmetic\");\n       size_exp = integer_one_node;\n     }\n   else if (TREE_CODE (TREE_TYPE (result_type)) == FUNCTION_TYPE)\n     {\n-      pedwarn (loc, pedantic ? OPT_pedantic : OPT_Wpointer_arith,\n+      pedwarn (loc, pedantic ? OPT_Wpedantic : OPT_Wpointer_arith,\n \t       \"pointer to a function used in arithmetic\");\n       size_exp = integer_one_node;\n     }\n   else if (TREE_CODE (TREE_TYPE (result_type)) == METHOD_TYPE)\n     {\n-      pedwarn (loc, pedantic ? OPT_pedantic : OPT_Wpointer_arith,\n+      pedwarn (loc, pedantic ? OPT_Wpedantic : OPT_Wpointer_arith,\n \t       \"pointer to member function used in arithmetic\");\n       size_exp = integer_one_node;\n     }\n@@ -4449,7 +4449,7 @@ c_sizeof_or_alignof_type (location_t loc,\n       if (is_sizeof)\n \t{\n \t  if (complain && (pedantic || warn_pointer_arith))\n-\t    pedwarn (loc, pedantic ? OPT_pedantic : OPT_Wpointer_arith,\n+\t    pedwarn (loc, pedantic ? OPT_Wpedantic : OPT_Wpointer_arith,\n \t\t     \"invalid application of %<sizeof%> to a function type\");\n           else if (!complain)\n             return error_mark_node;\n@@ -4460,10 +4460,10 @@ c_sizeof_or_alignof_type (location_t loc,\n \t  if (complain)\n \t    {\n \t      if (c_dialect_cxx ())\n-\t\tpedwarn (loc, OPT_pedantic, \"ISO C++ does not permit \"\n+\t\tpedwarn (loc, OPT_Wpedantic, \"ISO C++ does not permit \"\n \t\t\t \"%<alignof%> applied to a function type\");\n \t      else\n-\t\tpedwarn (loc, OPT_pedantic, \"ISO C does not permit \"\n+\t\tpedwarn (loc, OPT_Wpedantic, \"ISO C does not permit \"\n \t\t\t \"%<_Alignof%> applied to a function type\");\n \t    }\n \t  value = size_int (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n@@ -4473,7 +4473,7 @@ c_sizeof_or_alignof_type (location_t loc,\n     {\n       if (type_code == VOID_TYPE\n \t  && complain && (pedantic || warn_pointer_arith))\n-\tpedwarn (loc, pedantic ? OPT_pedantic : OPT_Wpointer_arith,\n+\tpedwarn (loc, pedantic ? OPT_Wpedantic : OPT_Wpointer_arith,\n \t\t \"invalid application of %qs to a void type\", op_name);\n       else if (!complain)\n         return error_mark_node;\n@@ -5441,7 +5441,7 @@ c_add_case_label (location_t loc, splay_tree cases, tree cond, tree orig_type,\n \n   /* Case ranges are a GNU extension.  */\n   if (high_value)\n-    pedwarn (loc, OPT_pedantic,\n+    pedwarn (loc, OPT_Wpedantic,\n \t     \"range expressions in switch statements are non-standard\");\n \n   type = TREE_TYPE (cond);\n@@ -5755,7 +5755,7 @@ finish_label_address_expr (tree label, location_t loc)\n {\n   tree result;\n \n-  pedwarn (input_location, OPT_pedantic, \"taking the address of a label is non-standard\");\n+  pedwarn (input_location, OPT_Wpedantic, \"taking the address of a label is non-standard\");\n \n   if (label == error_mark_node)\n     return error_mark_node;"}, {"sha": "158e8dc12e7fadc7c9b1fac4910bf19a463cfddb", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -2424,13 +2424,13 @@ check_format_types (format_wanted_type *types)\n \tcontinue;\n       /* If we want 'void *', allow any pointer type.\n \t (Anything else would already have got a warning.)\n-\t With -pedantic, only allow pointers to void and to character\n+\t With -Wpedantic, only allow pointers to void and to character\n \t types.  */\n       if (wanted_type == void_type_node\n \t  && (!pedantic || (i == 1 && char_type_flag)))\n \tcontinue;\n       /* Don't warn about differences merely in signedness, unless\n-\t -pedantic.  With -pedantic, warn if the type is a pointer\n+\t -Wpedantic.  With -Wpedantic, warn if the type is a pointer\n \t target and not a character type, and for character types at\n \t a second level of indirection.  */\n       if (TREE_CODE (wanted_type) == INTEGER_TYPE"}, {"sha": "2a605f65e824217ced1feea0ed2d506963147f94", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -734,7 +734,7 @@ interpret_float (const cpp_token *token, unsigned int flags,\n \t    return error_mark_node;\n \t  }\n \telse\n-\t  pedwarn (input_location, OPT_pedantic, \"non-standard suffix on floating constant\");\n+\t  pedwarn (input_location, OPT_Wpedantic, \"non-standard suffix on floating constant\");\n \n \ttype = c_common_type_for_mode (mode, 0);\n \tgcc_assert (type);"}, {"sha": "17e1958ad58d63c16f6f49e21d70c8feee713670", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -740,11 +740,11 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \terror (\"output filename specified twice\");\n       break;\n \n-      /* We need to handle the -pedantic switches here, rather than in\n+      /* We need to handle the -Wpedantic switches here, rather than in\n \t c_common_post_options, so that a subsequent -Wno-endif-labels\n \t is not overridden.  */\n     case OPT_pedantic_errors:\n-    case OPT_pedantic:\n+    case OPT_Wpedantic:\n       cpp_opts->cpp_pedantic = 1;\n       cpp_opts->warn_endif_labels = 1;\n       if (warn_pointer_sign == -1)\n@@ -925,7 +925,7 @@ c_common_post_options (const char **pfilename)\n     warn_ignored_qualifiers = extra_warnings;\n \n   /* -Wpointer-sign is disabled by default, but it is enabled if any\n-     of -Wall or -pedantic are given.  */\n+     of -Wall or -Wpedantic are given.  */\n   if (warn_pointer_sign == -1)\n     warn_pointer_sign = 0;\n \n@@ -936,7 +936,7 @@ c_common_post_options (const char **pfilename)\n   if (warn_jump_misses_init == -1)\n     warn_jump_misses_init = 0;\n \n-  /* -Woverlength-strings is off by default, but is enabled by -pedantic.\n+  /* -Woverlength-strings is off by default, but is enabled by -Wpedantic.\n      It is never enabled in C++, as the minimum limit is not normative\n      in that standard.  */\n   if (warn_overlength_strings == -1 || c_dialect_cxx ())\n@@ -1278,8 +1278,8 @@ sanitize_cpp_opts (void)\n   cpp_opts->stdc_0_in_system_headers = STDC_0_IN_SYSTEM_HEADERS;\n \n   /* Wlong-long is disabled by default. It is enabled by:\n-      [-pedantic | -Wtraditional] -std=[gnu|c]++98 ; or\n-      [-pedantic | -Wtraditional] -std=non-c99 .\n+      [-Wpedantic | -Wtraditional] -std=[gnu|c]++98 ; or\n+      [-Wpedantic | -Wtraditional] -std=non-c99 .\n \n       Either -Wlong-long or -Wno-long-long override any other settings.  */\n   if (warn_long_long == -1)"}, {"sha": "ed847c07ae72c4e616ebe6a0e35779300c00942c", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -1127,7 +1127,7 @@ handle_pragma_float_const_decimal64 (cpp_reader *ARG_UNUSED (dummy))\n       return;\n     }\n \n-  pedwarn (input_location, OPT_pedantic,\n+  pedwarn (input_location, OPT_Wpedantic,\n \t   \"ISO C does not support %<#pragma STDC FLOAT_CONST_DECIMAL64%>\");\n \n   switch (handle_stdc_pragma (\"STDC FLOAT_CONST_DECIMAL64\"))"}, {"sha": "d8c944d7e13e7a4505f6aa1547acae41c6676b27", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -557,6 +557,10 @@ Wparentheses\n C ObjC C++ ObjC++ Var(warn_parentheses) Warning\n Warn about possibly missing parentheses\n \n+Wpedantic\n+C ObjC C++ ObjC++ Warning\n+; Documented in common.opt\n+\n Wpmf-conversions\n C++ ObjC++ Var(warn_pmf2ptr) Init(1) Warning\n Warn when converting the type of pointers to member functions\n@@ -1184,7 +1188,7 @@ C ObjC C++ ObjC++ Joined Separate\n ; Documented in common.opt\n \n pedantic\n-C ObjC C++ ObjC++\n+C ObjC C++ ObjC++ Alias(Wpedantic)\n ; Documented in common.opt\n \n pedantic-errors"}, {"sha": "87e43dc0ab7d4f4dffc9865a7d6680bc6f81a3c5", "filename": "gcc/c-parser.c", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -1238,7 +1238,7 @@ c_parser_translation_unit (c_parser *parser)\n {\n   if (c_parser_next_token_is (parser, CPP_EOF))\n     {\n-      pedwarn (c_parser_peek_token (parser)->location, OPT_pedantic,\n+      pedwarn (c_parser_peek_token (parser)->location, OPT_Wpedantic,\n \t       \"ISO C forbids an empty translation unit\");\n     }\n   else\n@@ -1336,7 +1336,7 @@ c_parser_external_declaration (c_parser *parser)\n \t}\n       break;\n     case CPP_SEMICOLON:\n-      pedwarn (c_parser_peek_token (parser)->location, OPT_pedantic,\n+      pedwarn (c_parser_peek_token (parser)->location, OPT_Wpedantic,\n \t       \"ISO C does not allow extra %<;%> outside of a function\");\n       c_parser_consume_token (parser);\n       break;\n@@ -1715,7 +1715,7 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n       /* Function definition (nested or otherwise).  */\n       if (nested)\n \t{\n-\t  pedwarn (here, OPT_pedantic, \"ISO C forbids nested functions\");\n+\t  pedwarn (here, OPT_Wpedantic, \"ISO C forbids nested functions\");\n \t  c_push_function_context ();\n \t}\n       if (!start_function (specs, declarator, all_prefix_attrs))\n@@ -1830,10 +1830,10 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n   if (!flag_isoc11)\n     {\n       if (flag_isoc99)\n-\tpedwarn (assert_loc, OPT_pedantic,\n+\tpedwarn (assert_loc, OPT_Wpedantic,\n \t\t \"ISO C99 does not support %<_Static_assert%>\");\n       else\n-\tpedwarn (assert_loc, OPT_pedantic,\n+\tpedwarn (assert_loc, OPT_Wpedantic,\n \t\t \"ISO C90 does not support %<_Static_assert%>\");\n     }\n   c_parser_consume_token (parser);\n@@ -1874,7 +1874,7 @@ c_parser_static_assert_declaration_no_semi (c_parser *parser)\n     {\n       value = c_fully_fold (value, false, NULL);\n       if (TREE_CODE (value) == INTEGER_CST)\n-\tpedwarn (value_loc, OPT_pedantic, \"expression in static assertion \"\n+\tpedwarn (value_loc, OPT_Wpedantic, \"expression in static assertion \"\n \t\t \"is not an integer constant expression\");\n     }\n   if (TREE_CODE (value) != INTEGER_CST)\n@@ -2292,7 +2292,7 @@ c_parser_enum_specifier (c_parser *parser)\n \t  if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n \t    {\n \t      if (seen_comma && !flag_isoc99)\n-\t\tpedwarn (comma_loc, OPT_pedantic, \"comma at end of enumerator list\");\n+\t\tpedwarn (comma_loc, OPT_Wpedantic, \"comma at end of enumerator list\");\n \t      c_parser_consume_token (parser);\n \t      break;\n \t    }\n@@ -2328,7 +2328,7 @@ c_parser_enum_specifier (c_parser *parser)\n   if (pedantic && !COMPLETE_TYPE_P (ret.spec))\n     {\n       gcc_assert (ident);\n-      pedwarn (enum_loc, OPT_pedantic,\n+      pedwarn (enum_loc, OPT_Wpedantic,\n \t       \"ISO C forbids forward references to %<enum%> types\");\n     }\n   return ret;\n@@ -2463,7 +2463,7 @@ c_parser_struct_or_union_specifier (c_parser *parser)\n \t  /* Parse any stray semicolon.  */\n \t  if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n \t    {\n-\t      pedwarn (c_parser_peek_token (parser)->location, OPT_pedantic,\n+\t      pedwarn (c_parser_peek_token (parser)->location, OPT_Wpedantic,\n \t\t       \"extra semicolon in struct or union specified\");\n \t      c_parser_consume_token (parser);\n \t      continue;\n@@ -2601,7 +2601,7 @@ c_parser_struct_declaration (c_parser *parser)\n       tree ret;\n       if (specs->typespec_kind == ctsk_none)\n \t{\n-\t  pedwarn (decl_loc, OPT_pedantic,\n+\t  pedwarn (decl_loc, OPT_Wpedantic,\n \t\t   \"ISO C forbids member declarations with no members\");\n \t  shadow_tag_warned (specs, pedantic);\n \t  ret = NULL_TREE;\n@@ -2785,10 +2785,10 @@ c_parser_alignas_specifier (c_parser * parser)\n   if (!flag_isoc11)\n     {\n       if (flag_isoc99)\n-\tpedwarn (loc, OPT_pedantic,\n+\tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C99 does not support %<_Alignas%>\");\n       else\n-\tpedwarn (loc, OPT_pedantic,\n+\tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C90 does not support %<_Alignas%>\");\n     }\n   if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n@@ -3745,7 +3745,7 @@ c_parser_braced_init (c_parser *parser, tree type, bool nested_p)\n     really_start_incremental_init (type);\n   if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n     {\n-      pedwarn (brace_loc, OPT_pedantic, \"ISO C forbids empty initializer braces\");\n+      pedwarn (brace_loc, OPT_Wpedantic, \"ISO C forbids empty initializer braces\");\n     }\n   else\n     {\n@@ -3795,7 +3795,7 @@ c_parser_initelt (c_parser *parser, struct obstack * braced_init_obstack)\n       set_init_label (c_parser_peek_token (parser)->value,\n \t\t      braced_init_obstack);\n       /* Use the colon as the error location.  */\n-      pedwarn (c_parser_peek_2nd_token (parser)->location, OPT_pedantic,\n+      pedwarn (c_parser_peek_2nd_token (parser)->location, OPT_Wpedantic,\n \t       \"obsolete use of designated initializer with %<:%>\");\n       c_parser_consume_token (parser);\n       c_parser_consume_token (parser);\n@@ -3935,7 +3935,7 @@ c_parser_initelt (c_parser *parser, struct obstack * braced_init_obstack)\n \t\t  c_parser_consume_token (parser);\n \t\t  set_init_index (first, second, braced_init_obstack);\n \t\t  if (second)\n-\t\t    pedwarn (ellipsis_loc, OPT_pedantic,\n+\t\t    pedwarn (ellipsis_loc, OPT_Wpedantic,\n \t\t\t     \"ISO C forbids specifying range of elements to initialize\");\n \t\t}\n \t      else\n@@ -3948,14 +3948,14 @@ c_parser_initelt (c_parser *parser, struct obstack * braced_init_obstack)\n \t  if (c_parser_next_token_is (parser, CPP_EQ))\n \t    {\n \t      if (!flag_isoc99)\n-\t\tpedwarn (des_loc, OPT_pedantic,\n+\t\tpedwarn (des_loc, OPT_Wpedantic,\n \t\t\t \"ISO C90 forbids specifying subobject to initialize\");\n \t      c_parser_consume_token (parser);\n \t    }\n \t  else\n \t    {\n \t      if (des_seen == 1)\n-\t\tpedwarn (c_parser_peek_token (parser)->location, OPT_pedantic,\n+\t\tpedwarn (c_parser_peek_token (parser)->location, OPT_Wpedantic,\n \t\t\t \"obsolete use of designated initializer without %<=%>\");\n \t      else\n \t\t{\n@@ -4120,7 +4120,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t    }\n \t  c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n \t}\n-      pedwarn (label_loc, OPT_pedantic, \"ISO C forbids label declarations\");\n+      pedwarn (label_loc, OPT_Wpedantic, \"ISO C forbids label declarations\");\n     }\n   /* We must now have at least one statement, label or declaration.  */\n   if (c_parser_next_token_is (parser, CPP_CLOSE_BRACE))\n@@ -4156,7 +4156,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t  if (last_stmt)\n \t    pedwarn_c90 (loc,\n \t\t\t (pedantic && !flag_isoc99)\n-\t\t\t ? OPT_pedantic\n+\t\t\t ? OPT_Wpedantic\n \t\t\t : OPT_Wdeclaration_after_statement,\n \t\t\t \"ISO C90 forbids mixed declarations and code\");\n \t  last_stmt = false;\n@@ -4186,7 +4186,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t      restore_extension_diagnostics (ext);\n \t      if (last_stmt)\n \t\tpedwarn_c90 (loc, (pedantic && !flag_isoc99)\n-\t\t\t     ? OPT_pedantic\n+\t\t\t     ? OPT_Wpedantic\n \t\t\t     : OPT_Wdeclaration_after_statement,\n \t\t\t     \"ISO C90 forbids mixed declarations and code\");\n \t      last_stmt = false;\n@@ -5441,7 +5441,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after)\n       tree eptype = NULL_TREE;\n \n       middle_loc = c_parser_peek_token (parser)->location;\n-      pedwarn (middle_loc, OPT_pedantic, \n+      pedwarn (middle_loc, OPT_Wpedantic, \n \t       \"ISO C forbids omitting the middle term of a ?: expression\");\n       warn_for_omitted_condop (middle_loc, cond.value);\n       if (TREE_CODE (cond.value) == EXCESS_PRECISION_EXPR)\n@@ -6049,10 +6049,10 @@ c_parser_alignof_expression (c_parser *parser)\n       && strcmp (IDENTIFIER_POINTER (alignof_spelling), \"_Alignof\") == 0)\n     {\n       if (flag_isoc99)\n-\tpedwarn (loc, OPT_pedantic, \"ISO C99 does not support %qE\",\n+\tpedwarn (loc, OPT_Wpedantic, \"ISO C99 does not support %qE\",\n \t\t alignof_spelling);\n       else\n-\tpedwarn (loc, OPT_pedantic, \"ISO C90 does not support %qE\",\n+\tpedwarn (loc, OPT_Wpedantic, \"ISO C90 does not support %qE\",\n \t\t alignof_spelling);\n     }\n   c_parser_consume_token (parser);\n@@ -6103,7 +6103,7 @@ c_parser_alignof_expression (c_parser *parser)\n       mark_exp_read (expr.value);\n       c_inhibit_evaluation_warnings--;\n       in_alignof--;\n-      pedwarn (loc, OPT_pedantic, \"ISO C does not allow %<%E (expression)%>\",\n+      pedwarn (loc, OPT_Wpedantic, \"ISO C does not allow %<%E (expression)%>\",\n \t       alignof_spelling);\n       ret.value = c_alignof_expr (loc, expr.value);\n       ret.original_code = ERROR_MARK;\n@@ -6329,7 +6329,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_compound_statement_nostart (parser);\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t     \"expected %<)%>\");\n-\t  pedwarn (loc, OPT_pedantic,\n+\t  pedwarn (loc, OPT_Wpedantic,\n \t\t   \"ISO C forbids braced-groups within expressions\");\n \t  expr.value = c_finish_stmt_expr (brace_loc, stmt);\n \t  mark_exp_read (expr.value);\n@@ -6640,7 +6640,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t\tbreak;\n \t      }\n \t    if (!flag_isoc99)\n-\t      pedwarn (loc, OPT_pedantic,\n+\t      pedwarn (loc, OPT_Wpedantic,\n \t\t       \"ISO C90 does not support complex types\");\n \t    expr.value = build2 (COMPLEX_EXPR,\n \t\t\t\t build_complex_type\n@@ -6819,7 +6819,7 @@ c_parser_postfix_expression_after_paren_type (c_parser *parser,\n     }\n \n   if (!flag_isoc99)\n-    pedwarn (start_loc, OPT_pedantic, \"ISO C90 forbids compound literals\");\n+    pedwarn (start_loc, OPT_Wpedantic, \"ISO C90 forbids compound literals\");\n   non_const = ((init.value && TREE_CODE (init.value) == CONSTRUCTOR)\n \t       ? CONSTRUCTOR_NON_CONST (init.value)\n \t       : init.original_code == C_MAYBE_CONST_EXPR);\n@@ -7238,7 +7238,7 @@ c_parser_objc_class_instance_variables (c_parser *parser)\n       /* Parse any stray semicolon.  */\n       if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n \t{\n-\t  pedwarn (c_parser_peek_token (parser)->location, OPT_pedantic,\n+\t  pedwarn (c_parser_peek_token (parser)->location, OPT_Wpedantic,\n \t\t   \"extra semicolon\");\n \t  c_parser_consume_token (parser);\n \t  continue;\n@@ -7486,7 +7486,7 @@ c_parser_objc_method_definition (c_parser *parser)\n   if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n     {\n       c_parser_consume_token (parser);\n-      pedwarn (c_parser_peek_token (parser)->location, OPT_pedantic,\n+      pedwarn (c_parser_peek_token (parser)->location, OPT_Wpedantic,\n \t       \"extra semicolon in method definition specified\");\n     }\n \n@@ -7538,7 +7538,7 @@ c_parser_objc_methodprotolist (c_parser *parser)\n       switch (c_parser_peek_token (parser)->type)\n \t{\n \tcase CPP_SEMICOLON:\n-\t  pedwarn (c_parser_peek_token (parser)->location, OPT_pedantic,\n+\t  pedwarn (c_parser_peek_token (parser)->location, OPT_Wpedantic,\n \t\t   \"ISO C does not allow extra %<;%> outside of a function\");\n \t  c_parser_consume_token (parser);\n \t  break;"}, {"sha": "7fd2c95b8377b58bbc683b6bad5282cc3f6b6ead", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -562,7 +562,7 @@ composite_type (tree t1, tree t2)\n \t\t      {\n \t\t\tTREE_VALUE (n) = composite_type (TREE_TYPE (memb),\n \t\t\t\t\t\t\t TREE_VALUE (p2));\n-\t\t\tpedwarn (input_location, OPT_pedantic,\n+\t\t\tpedwarn (input_location, OPT_Wpedantic,\n \t\t\t\t \"function types not truly compatible in ISO C\");\n \t\t\tgoto parm_done;\n \t\t      }\n@@ -587,7 +587,7 @@ composite_type (tree t1, tree t2)\n \t\t      {\n \t\t\tTREE_VALUE (n) = composite_type (TREE_TYPE (memb),\n \t\t\t\t\t\t\t TREE_VALUE (p1));\n-\t\t\tpedwarn (input_location, OPT_pedantic,\n+\t\t\tpedwarn (input_location, OPT_Wpedantic,\n \t\t\t\t \"function types not truly compatible in ISO C\");\n \t\t\tgoto parm_done;\n \t\t      }\n@@ -1217,7 +1217,7 @@ comp_target_types (location_t location, tree ttl, tree ttr)\n   val = comptypes_check_enum_int (mvl, mvr, &enum_and_int_p);\n \n   if (val == 2)\n-    pedwarn (location, OPT_pedantic, \"types are not quite compatible\");\n+    pedwarn (location, OPT_Wpedantic, \"types are not quite compatible\");\n \n   if (val == 1 && enum_and_int_p && warn_cxx_compat)\n     warning_at (location, OPT_Wc___compat,\n@@ -2394,10 +2394,10 @@ build_array_ref (location_t loc, tree array, tree index)\n \t  while (TREE_CODE (foo) == COMPONENT_REF)\n \t    foo = TREE_OPERAND (foo, 0);\n \t  if (TREE_CODE (foo) == VAR_DECL && C_DECL_REGISTER (foo))\n-\t    pedwarn (loc, OPT_pedantic,\n+\t    pedwarn (loc, OPT_Wpedantic,\n \t\t     \"ISO C forbids subscripting %<register%> array\");\n \t  else if (!flag_isoc99 && !lvalue_p (foo))\n-\t    pedwarn (loc, OPT_pedantic,\n+\t    pedwarn (loc, OPT_Wpedantic,\n \t\t     \"ISO C90 forbids subscripting non-lvalue array\");\n \t}\n \n@@ -3437,10 +3437,10 @@ pointer_diff (location_t loc, tree op0, tree op1)\n \n \n   if (TREE_CODE (target_type) == VOID_TYPE)\n-    pedwarn (loc, pedantic ? OPT_pedantic : OPT_Wpointer_arith,\n+    pedwarn (loc, pedantic ? OPT_Wpedantic : OPT_Wpointer_arith,\n \t     \"pointer of type %<void *%> used in subtraction\");\n   if (TREE_CODE (target_type) == FUNCTION_TYPE)\n-    pedwarn (loc, pedantic ? OPT_pedantic : OPT_Wpointer_arith,\n+    pedwarn (loc, pedantic ? OPT_Wpedantic : OPT_Wpointer_arith,\n \t     \"pointer to a function used in subtraction\");\n \n   /* If the conversion to ptrdiff_type does anything like widening or\n@@ -3604,7 +3604,7 @@ build_unary_op (location_t location,\n       else if (typecode == COMPLEX_TYPE)\n \t{\n \t  code = CONJ_EXPR;\n-\t  pedwarn (location, OPT_pedantic,\n+\t  pedwarn (location, OPT_Wpedantic,\n \t\t   \"ISO C does not support %<~%> for complex conjugation\");\n \t  if (!noconvert)\n \t    arg = default_conversion (arg);\n@@ -3710,7 +3710,7 @@ build_unary_op (location_t location,\n \t{\n \t  tree real, imag;\n \n-\t  pedwarn (location, OPT_pedantic,\n+\t  pedwarn (location, OPT_Wpedantic,\n \t\t   \"ISO C does not support %<++%> and %<--%> on complex types\");\n \n \t  arg = stabilize_reference (arg);\n@@ -3761,10 +3761,10 @@ build_unary_op (location_t location,\n \t\t     || TREE_CODE (TREE_TYPE (argtype)) == VOID_TYPE)\n \t      {\n \t\tif (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)\n-\t\t  pedwarn (location, pedantic ? OPT_pedantic : OPT_Wpointer_arith,\n+\t\t  pedwarn (location, pedantic ? OPT_Wpedantic : OPT_Wpointer_arith,\n \t\t\t   \"wrong type argument to increment\");\n \t\telse\n-\t\t  pedwarn (location, pedantic ? OPT_pedantic : OPT_Wpointer_arith,\n+\t\t  pedwarn (location, pedantic ? OPT_Wpedantic : OPT_Wpointer_arith,\n \t\t\t   \"wrong type argument to decrement\");\n \t      }\n \n@@ -4305,7 +4305,7 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n   else if (code1 == VOID_TYPE || code2 == VOID_TYPE)\n     {\n       if (code1 != VOID_TYPE || code2 != VOID_TYPE)\n-\tpedwarn (colon_loc, OPT_pedantic,\n+\tpedwarn (colon_loc, OPT_Wpedantic,\n \t\t \"ISO C forbids conditional expr with only one void side\");\n       result_type = void_type_node;\n     }\n@@ -4330,7 +4330,7 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n       else if (VOID_TYPE_P (TREE_TYPE (type1)))\n \t{\n \t  if (TREE_CODE (TREE_TYPE (type2)) == FUNCTION_TYPE)\n-\t    pedwarn (colon_loc, OPT_pedantic,\n+\t    pedwarn (colon_loc, OPT_Wpedantic,\n \t\t     \"ISO C forbids conditional expr between \"\n \t\t     \"%<void *%> and function pointer\");\n \t  result_type = build_pointer_type (qualify_type (TREE_TYPE (type1),\n@@ -4339,7 +4339,7 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n       else if (VOID_TYPE_P (TREE_TYPE (type2)))\n \t{\n \t  if (TREE_CODE (TREE_TYPE (type1)) == FUNCTION_TYPE)\n-\t    pedwarn (colon_loc, OPT_pedantic,\n+\t    pedwarn (colon_loc, OPT_Wpedantic,\n \t\t     \"ISO C forbids conditional expr between \"\n \t\t     \"%<void *%> and function pointer\");\n \t  result_type = build_pointer_type (qualify_type (TREE_TYPE (type2),\n@@ -4650,7 +4650,7 @@ build_c_cast (location_t loc, tree type, tree expr)\n     {\n       if (TREE_CODE (type) == RECORD_TYPE\n \t  || TREE_CODE (type) == UNION_TYPE)\n-\tpedwarn (loc, OPT_pedantic,\n+\tpedwarn (loc, OPT_Wpedantic,\n \t\t \"ISO C forbids casting nonscalar to the same type\");\n     }\n   else if (TREE_CODE (type) == UNION_TYPE)\n@@ -4668,7 +4668,7 @@ build_c_cast (location_t loc, tree type, tree expr)\n \t  tree t;\n \t  bool maybe_const = true;\n \n-\t  pedwarn (loc, OPT_pedantic, \"ISO C forbids casts to union type\");\n+\t  pedwarn (loc, OPT_Wpedantic, \"ISO C forbids casts to union type\");\n \t  t = c_fully_fold (value, false, &maybe_const);\n \t  t = build_constructor_single (type, field, t);\n \t  if (!maybe_const)\n@@ -4782,7 +4782,7 @@ build_c_cast (location_t loc, tree type, tree expr)\n \t  && TREE_CODE (otype) == POINTER_TYPE\n \t  && TREE_CODE (TREE_TYPE (otype)) == FUNCTION_TYPE\n \t  && TREE_CODE (TREE_TYPE (type)) != FUNCTION_TYPE)\n-\tpedwarn (loc, OPT_pedantic, \"ISO C forbids \"\n+\tpedwarn (loc, OPT_Wpedantic, \"ISO C forbids \"\n \t\t \"conversion of function pointer to object pointer type\");\n \n       if (pedantic\n@@ -4791,7 +4791,7 @@ build_c_cast (location_t loc, tree type, tree expr)\n \t  && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE\n \t  && TREE_CODE (TREE_TYPE (otype)) != FUNCTION_TYPE\n \t  && !null_pointer_constant_p (value))\n-\tpedwarn (loc, OPT_pedantic, \"ISO C forbids \"\n+\tpedwarn (loc, OPT_Wpedantic, \"ISO C forbids \"\n \t\t \"conversion of object pointer to function pointer type\");\n \n       ovalue = value;\n@@ -5503,7 +5503,7 @@ convert_for_assignment (location_t location, tree type, tree rhs,\n \t    }\n \n \t  if (!fundecl || !DECL_IN_SYSTEM_HEADER (fundecl))\n-\t    pedwarn (location, OPT_pedantic,\n+\t    pedwarn (location, OPT_Wpedantic,\n \t\t     \"ISO C prohibits argument conversion to union type\");\n \n \t  rhs = fold_convert_loc (location, TREE_TYPE (memb), rhs);\n@@ -5640,7 +5640,7 @@ convert_for_assignment (location_t location, tree type, tree rhs,\n \t\t  (VOID_TYPE_P (ttr)\n \t\t   && !null_pointer_constant\n \t\t   && TREE_CODE (ttl) == FUNCTION_TYPE)))\n-\t    WARN_FOR_ASSIGNMENT (location, OPT_pedantic,\n+\t    WARN_FOR_ASSIGNMENT (location, OPT_Wpedantic,\n \t\t\t\t G_(\"ISO C forbids passing argument %d of \"\n \t\t\t\t    \"%qE between function pointer \"\n \t\t\t\t    \"and %<void *%>\"),\n@@ -6077,7 +6077,7 @@ maybe_warn_string_init (tree type, struct c_expr expr)\n       && TREE_CODE (type) == ARRAY_TYPE\n       && TREE_CODE (expr.value) == STRING_CST\n       && expr.original_code != STRING_CST)\n-    pedwarn_init (input_location, OPT_pedantic,\n+    pedwarn_init (input_location, OPT_Wpedantic,\n \t\t  \"array initialized from parenthesized string constant\");\n }\n \n@@ -6150,7 +6150,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t  maybe_warn_string_init (type, expr);\n \n \t  if (TYPE_DOMAIN (type) && !TYPE_MAX_VALUE (TYPE_DOMAIN (type)))\n-\t    pedwarn_init (init_loc, OPT_pedantic,\n+\t    pedwarn_init (init_loc, OPT_Wpedantic,\n \t\t\t  \"initialization of a flexible array member\");\n \n \t  if (comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (inside_init)),\n@@ -6307,7 +6307,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t  return error_mark_node;\n \t}\n \n-      /* Compound expressions can only occur here if -pedantic or\n+      /* Compound expressions can only occur here if -Wpedantic or\n \t -pedantic-errors is specified.  In the later case, we always want\n \t an error.  In the former case, we simply want a warning.  */\n       if (require_constant && pedantic\n@@ -6319,7 +6319,7 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n \t  if (inside_init == error_mark_node)\n \t    error_init (\"initializer element is not constant\");\n \t  else\n-\t    pedwarn_init (init_loc, OPT_pedantic,\n+\t    pedwarn_init (init_loc, OPT_Wpedantic,\n \t\t\t  \"initializer element is not constant\");\n \t  if (flag_pedantic_errors)\n \t    inside_init = error_mark_node;\n@@ -7025,7 +7025,7 @@ pop_init_level (int implicit, struct obstack * braced_init_obstack)\n \t  if (constructor_depth > 2)\n \t    error_init (\"initialization of flexible array member in a nested context\");\n \t  else\n-\t    pedwarn_init (input_location, OPT_pedantic,\n+\t    pedwarn_init (input_location, OPT_Wpedantic,\n \t\t\t  \"initialization of a flexible array member\");\n \n \t  /* We have already issued an error message for the existence\n@@ -7262,7 +7262,7 @@ set_init_index (tree first, tree last,\n     {\n       first = c_fully_fold (first, false, NULL);\n       if (TREE_CODE (first) == INTEGER_CST)\n-\tpedwarn_init (input_location, OPT_pedantic,\n+\tpedwarn_init (input_location, OPT_Wpedantic,\n \t\t      \"array index in initializer is not \"\n \t\t      \"an integer constant expression\");\n     }\n@@ -7271,7 +7271,7 @@ set_init_index (tree first, tree last,\n     {\n       last = c_fully_fold (last, false, NULL);\n       if (TREE_CODE (last) == INTEGER_CST)\n-\tpedwarn_init (input_location, OPT_pedantic,\n+\tpedwarn_init (input_location, OPT_Wpedantic,\n \t\t      \"array index in initializer is not \"\n \t\t      \"an integer constant expression\");\n     }\n@@ -8704,7 +8704,7 @@ tree\n c_finish_goto_ptr (location_t loc, tree expr)\n {\n   tree t;\n-  pedwarn (loc, OPT_pedantic, \"ISO C forbids %<goto *expr;%>\");\n+  pedwarn (loc, OPT_Wpedantic, \"ISO C forbids %<goto *expr;%>\");\n   expr = c_fully_fold (expr, false, NULL);\n   expr = convert (ptr_type_node, expr);\n   t = build1 (GOTO_EXPR, void_type_node, expr);\n@@ -8761,7 +8761,7 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n \tpedwarn (loc, 0,\n \t\t \"%<return%> with a value, in function returning void\");\n       else\n-\tpedwarn (loc, OPT_pedantic, \"ISO C forbids \"\n+\tpedwarn (loc, OPT_Wpedantic, \"ISO C forbids \"\n \t\t \"%<return%> with expression, in function returning void\");\n     }\n   else\n@@ -8943,15 +8943,15 @@ do_case (location_t loc, tree low_value, tree high_value)\n     {\n       low_value = c_fully_fold (low_value, false, NULL);\n       if (TREE_CODE (low_value) == INTEGER_CST)\n-\tpedwarn (input_location, OPT_pedantic,\n+\tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"case label is not an integer constant expression\");\n     }\n \n   if (high_value && TREE_CODE (high_value) != INTEGER_CST)\n     {\n       high_value = c_fully_fold (high_value, false, NULL);\n       if (TREE_CODE (high_value) == INTEGER_CST)\n-\tpedwarn (input_location, OPT_pedantic,\n+\tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"case label is not an integer constant expression\");\n     }\n \n@@ -10123,13 +10123,13 @@ build_binary_op (location_t location, enum tree_code code,\n \t  else if (VOID_TYPE_P (tt0))\n \t    {\n \t      if (pedantic && TREE_CODE (tt1) == FUNCTION_TYPE)\n-\t\tpedwarn (location, OPT_pedantic, \"ISO C forbids \"\n+\t\tpedwarn (location, OPT_Wpedantic, \"ISO C forbids \"\n \t\t\t \"comparison of %<void *%> with function pointer\");\n \t    }\n \t  else if (VOID_TYPE_P (tt1))\n \t    {\n \t      if (pedantic && TREE_CODE (tt0) == FUNCTION_TYPE)\n-\t\tpedwarn (location, OPT_pedantic, \"ISO C forbids \"\n+\t\tpedwarn (location, OPT_Wpedantic, \"ISO C forbids \"\n \t\t\t \"comparison of %<void *%> with function pointer\");\n \t    }\n \t  else\n@@ -10206,7 +10206,7 @@ build_binary_op (location_t location, enum tree_code code,\n \t\tpedwarn (location, 0,\n \t\t\t \"comparison of complete and incomplete pointers\");\n \t      else if (TREE_CODE (TREE_TYPE (type0)) == FUNCTION_TYPE)\n-\t\tpedwarn (location, OPT_pedantic, \"ISO C forbids \"\n+\t\tpedwarn (location, OPT_Wpedantic, \"ISO C forbids \"\n \t\t\t \"ordered comparisons of pointers to functions\");\n \t      else if (null_pointer_constant_p (orig_op0)\n \t\t       || null_pointer_constant_p (orig_op1))\n@@ -10233,7 +10233,7 @@ build_binary_op (location_t location, enum tree_code code,\n \t{\n \t  result_type = type0;\n \t  if (pedantic)\n-\t    pedwarn (location, OPT_pedantic,\n+\t    pedwarn (location, OPT_Wpedantic,\n \t\t     \"ordered comparison of pointer with integer zero\");\n \t  else if (extra_warnings)\n \t    warning_at (location, OPT_Wextra,\n@@ -10243,7 +10243,7 @@ build_binary_op (location_t location, enum tree_code code,\n \t{\n \t  result_type = type1;\n \t  if (pedantic)\n-\t    pedwarn (location, OPT_pedantic,\n+\t    pedwarn (location, OPT_Wpedantic,\n \t\t     \"ordered comparison of pointer with integer zero\");\n \t  else if (extra_warnings)\n \t    warning_at (location, OPT_Wextra,"}, {"sha": "aa6ebfe5e94e89c7dda2a7a2ab1f698954200af0", "filename": "gcc/common.opt", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -307,7 +307,7 @@ Common Driver Joined Alias(o) MissingArgError(missing filename after %qs)\n Driver Alias(pass-exit-codes)\n \n -pedantic\n-Common Alias(pedantic)\n+Common Alias(Wpedantic)\n \n -pedantic-errors\n Common Alias(pedantic-errors)\n@@ -582,6 +582,10 @@ Wpadded\n Common Var(warn_padded) Warning\n Warn when padding is required to align structure members\n \n+Wpedantic\n+Common Var(pedantic) Warning\n+Issue warnings needed for strict compliance to the standard\n+\n Wshadow\n Common Var(warn_shadow) Warning\n Warn when one local variable shadows another\n@@ -2292,8 +2296,7 @@ pass-exit-codes\n Driver Var(pass_exit_codes)\n \n pedantic\n-Common Var(pedantic)\n-Issue warnings needed for strict compliance to the standard\n+Common Alias(Wpedantic)\n \n pedantic-errors\n Common Var(flag_pedantic_errors)"}, {"sha": "825d2bc2d26ba259e65133cc6ee173a6f2ddd8f2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -1,3 +1,40 @@\n+2012-04-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/44774\n+\t* typeck.c (composite_pointer_type): Likewise.\n+\t(cxx_sizeof_or_alignof_type): Likewise.\n+\t(cp_build_array_ref): Likewise.\n+\t(cp_build_function_call_vec): Likewise.\n+\t(cp_build_addr_expr_1): Likewise.\n+\t(convert_member_func_to_ptr): Likewise.\n+\t* decl.c (check_tag_decl): Likewise.\n+\t(check_static_variable_definition): Likewise.\n+\t(compute_array_index_type): Likewise.\n+\t(create_array_type_for_decl): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t(grok_op_properties): Likewise.\n+\t* error.c (maybe_warn_cpp0x): Likewise.\n+\t* pt.c (maybe_process_partial_specialization): Likewise.\n+\t(convert_template_argument): Likewise.\n+\t(do_decl_instantiation): Likewise.\n+\t(do_type_instantiation): Likewise.\n+\t* parser.c (cp_parser_primary_expression): Likewise.\n+\t(cp_parser_postfix_expression): Likewise.\n+\t(cp_parser_unary_expression): Likewise.\n+\t(cp_parser_question_colon_clause): Likewise.\n+\t(cp_parser_lambda_introducer): Likewise.\n+\t(cp_parser_lambda_declarator_opt): Likewise.\n+\t(cp_parser_compound_statement): Likewise.\n+\t(cp_parser_jump_statement): Likewise.\n+\t(cp_parser_declaration_seq_opt): Likewise.\n+\t(cp_parser_enum_specifier): Likewise.\n+\t(cp_parser_enumerator_list): Likewise.\n+\t(cp_parser_initializer_list): Likewise.\n+\t(cp_parser_member_declaration): Likewise.\n+\t* call.c (build_conditional_expr_1): Likewise.\n+\t* friend.c (make_friend_class): Likewise.\n+\t* name-lookup.c (pushdecl_maybe_friend_1): Likewise.\n+\n 2012-04-21  Jan Hubicka  <jh@suse.cz>\n \n \t* method.c (make_alias_for): Do not set TREE_SYMBOL_REFERENCED."}, {"sha": "4223f6cb16ebb01d2a24d22a89a20d03456b6c3e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -4335,7 +4335,7 @@ build_conditional_expr_1 (tree arg1, tree arg2, tree arg3,\n   if (!arg2)\n     {\n       if (complain & tf_error)\n-\tpedwarn (input_location, OPT_pedantic, \n+\tpedwarn (input_location, OPT_Wpedantic, \n \t\t \"ISO C++ forbids omitting the middle term of a ?: expression\");\n \n       /* Make sure that lvalues remain lvalues.  See g++.oliva/ext1.C.  */"}, {"sha": "870b6b3092cc9cececdd37d7d86d8168a2b74d10", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -4193,7 +4193,7 @@ check_tag_decl (cp_decl_specifier_seq *declspecs)\n       SET_ANON_AGGR_TYPE_P (declared_type);\n \n       if (TREE_CODE (declared_type) != UNION_TYPE && !in_system_header)\n-\tpedwarn (input_location, OPT_pedantic, \"ISO C++ prohibits anonymous structs\");\n+\tpedwarn (input_location, OPT_Wpedantic, \"ISO C++ prohibits anonymous structs\");\n     }\n \n   else\n@@ -7877,7 +7877,7 @@ check_static_variable_definition (tree decl, tree type)\n \t   \"static member %qD\",\n \t   decl);\n   else if (!INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n-    pedwarn (input_location, OPT_pedantic, \"ISO C++ forbids initialization of member constant \"\n+    pedwarn (input_location, OPT_Wpedantic, \"ISO C++ forbids initialization of member constant \"\n \t     \"%qD of non-integral type %qT\", decl, type);\n \n   return 0;\n@@ -8050,9 +8050,9 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t  else if (in_system_header)\n \t    /* Allow them in system headers because glibc uses them.  */;\n \t  else if (name)\n-\t    pedwarn (input_location, OPT_pedantic, \"ISO C++ forbids zero-size array %qD\", name);\n+\t    pedwarn (input_location, OPT_Wpedantic, \"ISO C++ forbids zero-size array %qD\", name);\n \t  else\n-\t    pedwarn (input_location, OPT_pedantic, \"ISO C++ forbids zero-size array\");\n+\t    pedwarn (input_location, OPT_Wpedantic, \"ISO C++ forbids zero-size array\");\n \t}\n     }\n   else if (TREE_CONSTANT (size)\n@@ -8178,7 +8178,7 @@ create_array_type_for_decl (tree name, tree type, tree size)\n   /* 8.3.4/1: If the type of the identifier of D contains the auto\n      type-specifier, the program is ill-formed.  */\n   if (pedantic && type_uses_auto (type))\n-    pedwarn (input_location, OPT_pedantic,\n+    pedwarn (input_location, OPT_Wpedantic,\n \t     \"declaration of %qD as array of %<auto%>\", name);\n \n   /* If there are some types which cannot be array elements,\n@@ -8773,7 +8773,7 @@ grokdeclarator (const cp_declarator *declarator,\n       else if (! is_main)\n \tpermerror (input_location, \"ISO C++ forbids declaration of %qs with no type\", name);\n       else if (pedantic)\n-\tpedwarn (input_location, OPT_pedantic,\n+\tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"ISO C++ forbids declaration of %qs with no type\", name);\n       else\n \twarning (OPT_Wreturn_type,\n@@ -8792,7 +8792,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  explicit_int128 = false;\n \t}\n       else if (pedantic && ! in_system_header)\n-\tpedwarn (input_location, OPT_pedantic,\n+\tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"ISO C++ does not support %<__int128%> for %qs\", name);\n     }\n \n@@ -8843,7 +8843,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  ok = 1;\n \t  if (!explicit_int && !defaulted_int && !explicit_char && !explicit_int128 && pedantic)\n \t    {\n-\t      pedwarn (input_location, OPT_pedantic, \n+\t      pedwarn (input_location, OPT_Wpedantic, \n \t\t       \"long, short, signed or unsigned used invalidly for %qs\",\n \t\t       name);\n \t      if (flag_pedantic_errors)\n@@ -10354,11 +10354,11 @@ grokdeclarator (const cp_declarator *declarator,\n \t    && pedantic)\n \t  {\n \t    if (storage_class == sc_static)\n-\t      pedwarn (input_location, OPT_pedantic, \n+\t      pedwarn (input_location, OPT_Wpedantic, \n \t\t       \"%<static%> specified invalid for function %qs \"\n \t\t       \"declared out of global scope\", name);\n \t    else\n-\t      pedwarn (input_location, OPT_pedantic, \n+\t      pedwarn (input_location, OPT_Wpedantic, \n \t\t       \"%<inline%> specifier invalid for function %qs \"\n \t\t       \"declared out of global scope\", name);\n \t  }\n@@ -10452,7 +10452,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t      }\n \t    if (storage_class == sc_extern && pedantic)\n \t      {\n-\t\tpedwarn (input_location, OPT_pedantic, \n+\t\tpedwarn (input_location, OPT_Wpedantic, \n \t\t\t \"cannot explicitly declare member %q#D to have \"\n \t\t\t \"extern linkage\", decl);\n \t\tstorage_class = sc_none;\n@@ -11418,7 +11418,7 @@ grok_op_properties (tree decl, bool complain)\n \t    if (operator_code == POSTINCREMENT_EXPR\n \t\t|| operator_code == POSTDECREMENT_EXPR)\n \t      {\n-\t\tpedwarn (input_location, OPT_pedantic, \"%qD cannot have default arguments\", \n+\t\tpedwarn (input_location, OPT_Wpedantic, \"%qD cannot have default arguments\", \n \t\t\t decl);\n \t      }\n \t    else"}, {"sha": "6595063637bd355918414ed9d4889abced0473cd", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -3306,7 +3306,7 @@ maybe_warn_cpp0x (cpp0x_warn_str str)\n \t\t \"only available with -std=c++11 or -std=gnu++11\");\n \tbreak;\n       case CPP0X_INLINE_NAMESPACES:\n-\tpedwarn (input_location, OPT_pedantic,\n+\tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"inline namespaces \"\n \t\t \"only available with -std=c++11 or -std=gnu++11\");\n \tbreak;"}, {"sha": "98cde9a1d056433d18d14461956e597cdfc91a3b", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -232,7 +232,7 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \n          So don't complain in C++0x mode.  */\n       if (cxx_dialect < cxx0x)\n-\tpedwarn (input_location, complain ? 0 : OPT_pedantic,\n+\tpedwarn (input_location, complain ? 0 : OPT_Wpedantic,\n \t\t \"invalid type %qT declared %<friend%>\", friend_type);\n       return;\n     }"}, {"sha": "3693f7b2db958fa5fc9569877e21e91e777086c7", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -766,7 +766,7 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t  else if (t == wchar_decl_node)\n \t    {\n \t      if (! DECL_IN_SYSTEM_HEADER (x))\n-\t\tpedwarn (input_location, OPT_pedantic, \"redeclaration of %<wchar_t%> as %qT\",\n+\t\tpedwarn (input_location, OPT_Wpedantic, \"redeclaration of %<wchar_t%> as %qT\",\n \t\t\t TREE_TYPE (x));\n \t      \n \t      /* Throw away the redeclaration.  */"}, {"sha": "3b5a476cdd05125c146ad74a96e74708ae835715", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -4011,7 +4011,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t    && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t  {\n \t    /* Statement-expressions are not allowed by the standard.  */\n-\t    pedwarn (token->location, OPT_pedantic, \n+\t    pedwarn (token->location, OPT_Wpedantic, \n \t\t     \"ISO C++ forbids braced-groups within expressions\");\n \n \t    /* And they're not allowed outside of a function-body; you\n@@ -5550,7 +5550,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t      {\n \t\t/* Warn the user that a compound literal is not\n \t\t   allowed in standard C++.  */\n-\t\tpedwarn (input_location, OPT_pedantic, \"ISO C++ forbids compound-literals\");\n+\t\tpedwarn (input_location, OPT_Wpedantic, \"ISO C++ forbids compound-literals\");\n \t\t/* For simplicity, we disallow compound literals in\n \t\t   constant-expressions.  We could\n \t\t   allow compound literals of integer type, whose\n@@ -6393,7 +6393,7 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t   expressions. So pedwarn if alignof is used with a non-\n \t\t   type expression. However, __alignof__ is ok.  */\n \t\tif (!strcmp (IDENTIFIER_POINTER (token->u.value), \"alignof\"))\n-\t\t  pedwarn (token->location, OPT_pedantic,\n+\t\t  pedwarn (token->location, OPT_Wpedantic,\n \t\t\t   \"ISO C++ does not allow %<alignof%> \"\n \t\t\t   \"with a non-type\");\n \n@@ -7434,7 +7434,7 @@ cp_parser_question_colon_clause (cp_parser* parser, tree logical_or_expr)\n   if (cp_parser_allow_gnu_extensions_p (parser)\n       && token->type == CPP_COLON)\n     {\n-      pedwarn (token->location, OPT_pedantic, \n+      pedwarn (token->location, OPT_Wpedantic, \n                \"ISO C++ does not allow ?: with omitted middle operand\");\n       /* Implicit true clause.  */\n       expr = NULL_TREE;\n@@ -8238,7 +8238,7 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t{\n \t  /* An explicit expression exists.  */\n \t  cp_lexer_consume_token (parser->lexer);\n-          pedwarn (input_location, OPT_pedantic,\n+          pedwarn (input_location, OPT_Wpedantic,\n                    \"ISO C++ does not allow initializers \"\n                    \"in lambda expression capture lists\");\n \t  capture_init_expr = cp_parser_assignment_expression (parser,\n@@ -8368,7 +8368,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \t parameter-declaration-clause of a lambda-declarator.  */\n       for (t = param_list; t; t = TREE_CHAIN (t))\n \tif (TREE_PURPOSE (t))\n-\t  pedwarn (DECL_SOURCE_LOCATION (TREE_VALUE (t)), OPT_pedantic,\n+\t  pedwarn (DECL_SOURCE_LOCATION (TREE_VALUE (t)), OPT_Wpedantic,\n \t\t   \"default argument specified for lambda parameter\");\n \n       cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n@@ -8939,7 +8939,7 @@ cp_parser_compound_statement (cp_parser *parser, tree in_statement_expr,\n     return error_mark_node;\n   if (DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n       && !function_body)\n-    pedwarn (input_location, OPT_pedantic,\n+    pedwarn (input_location, OPT_Wpedantic,\n \t     \"compound-statement in constexpr function\");\n   /* Begin the compound-statement.  */\n   compound_stmt = begin_compound_stmt (in_try ? BCS_TRY_BLOCK : 0);\n@@ -9910,7 +9910,7 @@ cp_parser_jump_statement (cp_parser* parser)\n       if (cp_lexer_next_token_is (parser->lexer, CPP_MULT))\n \t{\n \t  /* Issue a warning about this use of a GNU extension.  */\n-\t  pedwarn (token->location, OPT_pedantic, \"ISO C++ forbids computed gotos\");\n+\t  pedwarn (token->location, OPT_Wpedantic, \"ISO C++ forbids computed gotos\");\n \t  /* Consume the '*' token.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t  /* Parse the dependent expression.  */\n@@ -10055,7 +10055,7 @@ cp_parser_declaration_seq_opt (cp_parser* parser)\n \t     invalid.  Allow it unless we're being pedantic.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t  if (!in_system_header)\n-\t    pedwarn (input_location, OPT_pedantic, \"extra %<;%>\");\n+\t    pedwarn (input_location, OPT_Wpedantic, \"extra %<;%>\");\n \t  continue;\n \t}\n \n@@ -14362,7 +14362,7 @@ cp_parser_enum_specifier (cp_parser* parser)\n \t    {\n \t      /* Are template enums allowed in ISO? */\n \t      if (template_parm_scope_p ())\n-\t\tpedwarn (type_start_token->location, OPT_pedantic,\n+\t\tpedwarn (type_start_token->location, OPT_Wpedantic,\n \t\t\t \"%qD is an enumeration template\", name);\n \t      /* ignore a typename reference, for it will be solved by name\n \t         in start_enum.  */\n@@ -14615,7 +14615,7 @@ cp_parser_enumerator_list (cp_parser* parser, tree type)\n       if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))\n \t{\n \t  if (cxx_dialect < cxx0x && !in_system_header)\n-\t    pedwarn (input_location, OPT_pedantic,\n+\t    pedwarn (input_location, OPT_Wpedantic,\n                      \"comma at end of enumerator list\");\n \t  break;\n \t}\n@@ -17634,7 +17634,7 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p)\n \t  && cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_COLON)\n \t{\n \t  /* Warn the user that they are using an extension.  */\n-\t  pedwarn (input_location, OPT_pedantic, \n+\t  pedwarn (input_location, OPT_Wpedantic, \n \t\t   \"ISO C++ does not allow designated initializers\");\n \t  /* Consume the identifier.  */\n \t  designator = cp_lexer_consume_token (parser->lexer)->u.value;\n@@ -17648,7 +17648,7 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p)\n \t       && cp_lexer_peek_nth_token (parser->lexer, 3)->type == CPP_EQ)\n \t{\n \t  /* Warn the user that they are using an extension.  */\n-\t  pedwarn (input_location, OPT_pedantic,\n+\t  pedwarn (input_location, OPT_Wpedantic,\n \t\t   \"ISO C++ does not allow C99 designated initializers\");\n \t  /* Consume the `.'.  */\n \t  cp_lexer_consume_token (parser->lexer);\n@@ -18864,7 +18864,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t{\n \t  cp_token *token = cp_lexer_peek_token (parser->lexer);\n \t  if (!in_system_header_at (token->location))\n-\t    pedwarn (token->location, OPT_pedantic, \"extra %<;%>\");\n+\t    pedwarn (token->location, OPT_Wpedantic, \"extra %<;%>\");\n \t}\n       else\n \t{\n@@ -18882,7 +18882,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      /* If the `friend' keyword was present, the friend must\n \t\t be introduced with a class-key.  */\n \t       if (!declares_class_or_enum && cxx_dialect < cxx0x)\n-\t\t pedwarn (decl_spec_token_start->location, OPT_pedantic,\n+\t\t pedwarn (decl_spec_token_start->location, OPT_Wpedantic,\n \t\t\t  \"in C++03 a class-key must be used \"\n \t\t\t  \"when declaring a friend\");\n \t       /* In this case:"}, {"sha": "636909db5c078f067256e41c214c36348ad7b8e8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -943,7 +943,7 @@ maybe_process_partial_specialization (tree type)\n        /* Someday C++0x may allow for enum template specialization.  */\n       if (cxx_dialect > cxx98 && TREE_CODE (type) == ENUMERAL_TYPE\n \t  && CLASS_TYPE_P (context) && CLASSTYPE_USE_TEMPLATE (context))\n-\tpedwarn (input_location, OPT_pedantic, \"template specialization \"\n+\tpedwarn (input_location, OPT_Wpedantic, \"template specialization \"\n \t\t \"of %qD not allowed by ISO C++\", type);\n       else\n \t{\n@@ -6433,7 +6433,7 @@ convert_template_argument (tree parm,\n \t  if (cxx_dialect >= cxx0x)\n \t    /* OK under DR 1004.  */;\n \t  else if (complain & tf_warning_or_error)\n-\t    pedwarn (input_location, OPT_pedantic, \"injected-class-name %qD\"\n+\t    pedwarn (input_location, OPT_Wpedantic, \"injected-class-name %qD\"\n \t\t     \" used as template template argument\", TYPE_NAME (arg));\n \t  else if (flag_pedantic_errors)\n \t    t = arg;\n@@ -17909,7 +17909,7 @@ do_decl_instantiation (tree decl, tree storage)\n   else if (storage == ridpointers[(int) RID_EXTERN])\n     {\n       if (!in_system_header && (cxx_dialect == cxx98))\n-\tpedwarn (input_location, OPT_pedantic, \n+\tpedwarn (input_location, OPT_Wpedantic, \n \t\t \"ISO C++ 1998 forbids the use of %<extern%> on explicit \"\n \t\t \"instantiations\");\n       extern_p = 1;\n@@ -18006,12 +18006,12 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n \t  if (storage == ridpointers[(int) RID_EXTERN])\n \t    {\n \t      if (cxx_dialect == cxx98)\n-\t\tpedwarn (input_location, OPT_pedantic, \n+\t\tpedwarn (input_location, OPT_Wpedantic, \n \t\t\t \"ISO C++ 1998 forbids the use of %<extern%> on \"\n \t\t\t \"explicit instantiations\");\n \t    }\n \t  else\n-\t    pedwarn (input_location, OPT_pedantic, \n+\t    pedwarn (input_location, OPT_Wpedantic, \n \t\t     \"ISO C++ forbids the use of %qE\"\n \t\t     \" on explicit instantiations\", storage);\n \t}"}, {"sha": "3aabbe95c56081b9f2415c87c9983efac201afa8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -605,17 +605,17 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n           switch (operation)\n               {\n               case CPO_COMPARISON:\n-                pedwarn (input_location, OPT_pedantic, \n+                pedwarn (input_location, OPT_Wpedantic, \n                          \"ISO C++ forbids comparison between \"\n                          \"pointer of type %<void *%> and pointer-to-function\");\n                 break;\n               case CPO_CONVERSION:\n-                pedwarn (input_location, OPT_pedantic,\n+                pedwarn (input_location, OPT_Wpedantic,\n                          \"ISO C++ forbids conversion between \"\n                          \"pointer of type %<void *%> and pointer-to-function\");\n                 break;\n               case CPO_CONDITIONAL_EXPR:\n-                pedwarn (input_location, OPT_pedantic,\n+                pedwarn (input_location, OPT_Wpedantic,\n                          \"ISO C++ forbids conditional expression between \"\n                          \"pointer of type %<void *%> and pointer-to-function\");\n                 break;\n@@ -1526,7 +1526,7 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool complain)\n   if (TREE_CODE (type) == METHOD_TYPE)\n     {\n       if (complain)\n-\tpedwarn (input_location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n+\tpedwarn (input_location, pedantic ? OPT_Wpedantic : OPT_Wpointer_arith, \n \t\t \"invalid application of %qs to a member function\", \n \t\t operator_name_info[(int) op].name);\n       value = size_one_node;\n@@ -2961,7 +2961,7 @@ cp_build_array_ref (location_t loc, tree array, tree idx,\n \t}\n \n       if (!lvalue_p (array) && (complain & tf_error))\n-\tpedwarn (loc, OPT_pedantic, \n+\tpedwarn (loc, OPT_Wpedantic, \n \t         \"ISO C++ forbids subscripting non-lvalue array\");\n \n       /* Note in C++ it is valid to subscript a `register' array, since\n@@ -3287,7 +3287,7 @@ cp_build_function_call_vec (tree function, VEC(tree,gc) **params,\n \n       /* Convert anything with function type to a pointer-to-function.  */\n       if (DECL_MAIN_P (function) && (complain & tf_error))\n-\tpedwarn (input_location, OPT_pedantic, \n+\tpedwarn (input_location, OPT_Wpedantic, \n \t\t \"ISO C++ forbids calling %<::main%> from within program\");\n \n       function = build_addr_func (function, complain);\n@@ -4935,9 +4935,9 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n     {\n       /* ARM $3.4 */\n       /* Apparently a lot of autoconf scripts for C++ packages do this,\n-\t so only complain if -pedantic.  */\n+\t so only complain if -Wpedantic.  */\n       if (complain & (flag_pedantic_errors ? tf_error : tf_warning))\n-\tpedwarn (input_location, OPT_pedantic,\n+\tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"ISO C++ forbids taking address of function %<::main%>\");\n       else if (flag_pedantic_errors)\n \treturn error_mark_node;\n@@ -6194,7 +6194,7 @@ convert_member_func_to_ptr (tree type, tree expr, tsubst_flags_t complain)\n     return error_mark_node;\n \n   if (pedantic || warn_pmf2ptr)\n-    pedwarn (input_location, pedantic ? OPT_pedantic : OPT_Wpmf_conversions,\n+    pedwarn (input_location, pedantic ? OPT_Wpedantic : OPT_Wpmf_conversions,\n \t     \"converting from %qT to %qT\", intype, type);\n \n   if (TREE_CODE (intype) == METHOD_TYPE)"}, {"sha": "4496803f2ff7946f68903e650635f554a89c1026", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -809,10 +809,10 @@ warning_at (location_t location, int opt, const char *gmsgid, ...)\n    language standard, if you have chosen not to make them errors.\n \n    Note that these diagnostics are issued independent of the setting\n-   of the -pedantic command-line switch.  To get a warning enabled\n+   of the -Wpedantic command-line switch.  To get a warning enabled\n    only with that switch, use either \"if (pedantic) pedwarn\n-   (OPT_pedantic,...)\" or just \"pedwarn (OPT_pedantic,..)\".  To get a\n-   pedwarn independently of the -pedantic switch use \"pedwarn (0,...)\".\n+   (OPT_Wpedantic,...)\" or just \"pedwarn (OPT_Wpedantic,..)\".  To get a\n+   pedwarn independently of the -Wpedantic switch use \"pedwarn (0,...)\".\n \n    Returns true if the warning was printed, false if it was inhibited.  */\n "}, {"sha": "8ca2f4ecd02654496d16bc9cba815342018e66e5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1771a200ab9fd1e9afc921684daab9a8649d897/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c1771a200ab9fd1e9afc921684daab9a8649d897", "patch": "@@ -39,7 +39,7 @@ included in the gfdl(7) man page.\n @c man begin SYNOPSIS\n gcc [@option{-c}|@option{-S}|@option{-E}] [@option{-std=}@var{standard}]\n     [@option{-g}] [@option{-pg}] [@option{-O}@var{level}]\n-    [@option{-W}@var{warn}@dots{}] [@option{-pedantic}]\n+    [@option{-W}@var{warn}@dots{}] [@option{-Wpedantic}]\n     [@option{-I}@var{dir}@dots{}] [@option{-L}@var{dir}@dots{}]\n     [@option{-D}@var{macro}[=@var{defn}]@dots{}] [@option{-U}@var{macro}]\n     [@option{-f}@var{option}@dots{}] [@option{-m}@var{machine-option}@dots{}]\n@@ -234,7 +234,7 @@ Objective-C and Objective-C++ Dialects}.\n \n @item Warning Options\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n-@gccoptlist{-fsyntax-only  -fmax-errors=@var{n}  -pedantic @gol\n+@gccoptlist{-fsyntax-only  -fmax-errors=@var{n}  -Wpedantic @gol\n -pedantic-errors @gol\n -w  -Wextra  -Wall  -Waddress  -Waggregate-return  -Warray-bounds @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n@@ -1516,7 +1516,7 @@ such as @code{__unix__} and @code{__vax__} are also available, with or\n without @option{-ansi}.\n \n The @option{-ansi} option does not cause non-ISO programs to be\n-rejected gratuitously.  For that, @option{-pedantic} is required in\n+rejected gratuitously.  For that, @option{-Wpedantic} is required in\n addition to @option{-ansi}.  @xref{Warning Options}.\n \n The macro @code{__STRICT_ANSI__} is predefined when the @option{-ansi}\n@@ -1550,10 +1550,10 @@ expression. On the other hand, by specifying a GNU dialect of a\n standard, all features the compiler support are enabled, even when\n those features change the meaning of the base standard and some\n strict-conforming programs may be rejected.  The particular standard\n-is used by @option{-pedantic} to identify which features are GNU\n+is used by @option{-Wpedantic} to identify which features are GNU\n extensions given that version of the standard. For example\n-@option{-std=gnu90 -pedantic} warns about C++ style @samp{//}\n-comments, while @option{-std=gnu99 -pedantic} does not.\n+@option{-std=gnu90 -Wpedantic} warns about C++ style @samp{//}\n+comments, while @option{-std=gnu99 -Wpedantic} does not.\n \n A value for this option must be provided; possible values are\n \n@@ -2059,7 +2059,7 @@ errors if these functions are not inlined everywhere they are called.\n \n @item -fms-extensions\n @opindex fms-extensions\n-Disable pedantic warnings about constructs used in MFC, such as implicit\n+Disable Wpedantic warnings about constructs used in MFC, such as implicit\n int and getting a pointer to member function via non-standard syntax.\n \n @item -fno-nonansi-builtins\n@@ -2994,8 +2994,10 @@ with old compilers, but if something goes wrong, the compiler\n warns that an unrecognized option is present.\n \n @table @gcctabopt\n-@item -pedantic\n+@item -Wpedantic\n+@itemx -pedantic\n @opindex pedantic\n+@opindex Wpedantic\n Issue all the warnings demanded by strict ISO C and ISO C++;\n reject all programs that use forbidden extensions, and some other\n programs that do not follow ISO C and ISO C++.  For ISO C, follows the\n@@ -3007,28 +3009,28 @@ this option (though a rare few require @option{-ansi} or a\n without this option, certain GNU extensions and traditional C and C++\n features are supported as well.  With this option, they are rejected.\n \n-@option{-pedantic} does not cause warning messages for use of the\n+@option{-Wpedantic} does not cause warning messages for use of the\n alternate keywords whose names begin and end with @samp{__}.  Pedantic\n warnings are also disabled in the expression that follows\n @code{__extension__}.  However, only system header files should use\n these escape routes; application programs should avoid them.\n @xref{Alternate Keywords}.\n \n-Some users try to use @option{-pedantic} to check programs for strict ISO\n+Some users try to use @option{-Wpedantic} to check programs for strict ISO\n C conformance.  They soon find that it does not do quite what they want:\n it finds some non-ISO practices, but not all---only those for which\n ISO C @emph{requires} a diagnostic, and some others for which\n diagnostics have been added.\n \n A feature to report any failure to conform to ISO C might be useful in\n some instances, but would require considerable additional work and would\n-be quite different from @option{-pedantic}.  We don't have plans to\n+be quite different from @option{-Wpedantic}.  We don't have plans to\n support such a feature in the near future.\n \n Where the standard specified with @option{-std} represents a GNU\n extended dialect of C, such as @samp{gnu90} or @samp{gnu99}, there is a\n corresponding @dfn{base standard}, the version of ISO C on which the GNU\n-extended dialect is based.  Warnings from @option{-pedantic} are given\n+extended dialect is based.  Warnings from @option{-Wpedantic} are given\n where they are required by the base standard.  (It does not make sense\n for such warnings to be given only for features not in the specified GNU\n C dialect, since by definition the GNU dialects of C include all\n@@ -3037,7 +3039,7 @@ nothing to warn about.)\n \n @item -pedantic-errors\n @opindex pedantic-errors\n-Like @option{-pedantic}, except that errors are produced rather than\n+Like @option{-Wpedantic}, except that errors are produced rather than\n warnings.\n \n @item -Wall\n@@ -3223,7 +3225,7 @@ libc version 2.2.  These include all ISO C90 and C99 features, as well\n as features from the Single Unix Specification and some BSD and GNU\n extensions.  Other library implementations may not support all these\n features; GCC does not support warning about features that go beyond a\n-particular library's limitations.  However, if @option{-pedantic} is used\n+particular library's limitations.  However, if @option{-Wpedantic} is used\n with @option{-Wformat}, warnings are given about format features not\n in the selected standard version (but not for @code{strfmon} formats,\n since those are not in any version of the C standard).  @xref{C Dialect\n@@ -3366,7 +3368,7 @@ Warn if the type of @samp{main} is suspicious.  @samp{main} should be\n a function with external linkage, returning int, taking either zero\n arguments, two, or three arguments of appropriate types.  This warning\n is enabled by default in C++ and is enabled by either @option{-Wall}\n-or @option{-pedantic}.\n+or @option{-Wpedantic}.\n \n @item -Wmissing-braces\n @opindex Wmissing-braces\n@@ -4107,7 +4109,7 @@ such assumptions.\n Disables the warnings about non-ISO @code{printf} / @code{scanf} format\n width specifiers @code{I32}, @code{I64}, and @code{I} used on Windows targets\n depending on the MS runtime, when you are using the options @option{-Wformat}\n-and @option{-pedantic} without gnu-extensions.\n+and @option{-Wpedantic} without gnu-extensions.\n \n @item -Wpointer-arith\n @opindex Wpointer-arith\n@@ -4116,7 +4118,7 @@ Warn about anything that depends on the ``size of'' a function type or\n of @code{void}.  GNU C assigns these types a size of 1, for\n convenience in calculations with @code{void *} pointers and pointers\n to functions.  In C++, warn also when an arithmetic operation involves\n-@code{NULL}.  This warning is also enabled by @option{-pedantic}.\n+@code{NULL}.  This warning is also enabled by @option{-Wpedantic}.\n \n @item -Wtype-limits\n @opindex Wtype-limits\n@@ -4621,7 +4623,7 @@ the search path but can't be used.\n @opindex Wlong-long\n @opindex Wno-long-long\n Warn if @samp{long long} type is used.  This is enabled by either\n-@option{-pedantic} or @option{-Wtraditional} in ISO C90 and C++98\n+@option{-Wpedantic} or @option{-Wtraditional} in ISO C90 and C++98\n modes.  To inhibit the warning messages, use @option{-Wno-long-long}.\n \n @item -Wvariadic-macros\n@@ -4647,7 +4649,7 @@ scalar type.\n @opindex Wvla\n @opindex Wno-vla\n Warn if variable length array is used in the code.\n-@option{-Wno-vla} prevents the @option{-pedantic} warning of\n+@option{-Wno-vla} prevents the @option{-Wpedantic} warning of\n the variable length array.\n \n @item -Wvolatile-register-var\n@@ -4673,7 +4675,7 @@ itself is likely to take inordinate amounts of time.\n @opindex Wno-pointer-sign\n Warn for pointer argument passing or assignment with different signedness.\n This option is only supported for C and Objective-C@.  It is implied by\n-@option{-Wall} and by @option{-pedantic}, which can be disabled with\n+@option{-Wall} and by @option{-Wpedantic}, which can be disabled with\n @option{-Wno-pointer-sign}.\n \n @item -Wstack-protector\n@@ -4701,7 +4703,7 @@ not count the trailing NUL@.  In C90, the limit was 509 characters; in\n C99, it was raised to 4095.  C++98 does not specify a normative\n minimum maximum, so we do not diagnose overlength strings in C++@.\n \n-This option is implied by @option{-pedantic}, and can be disabled with\n+This option is implied by @option{-Wpedantic}, and can be disabled with\n @option{-Wno-overlength-strings}.\n \n @item -Wunsuffixed-float-constants @r{(C and Objective-C only)}"}]}