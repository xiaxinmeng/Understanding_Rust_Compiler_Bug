{"sha": "881b2a9652748adad442a2d634eb2970a476fe42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxYjJhOTY1Mjc0OGFkYWQ0NDJhMmQ2MzRlYjI5NzBhNDc2ZmU0Mg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-02-16T01:35:38Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-02-16T01:35:38Z"}, "message": "i386.c (x86_ext_80387_constants): Use 80387 insns to load mathematical constants on K6, Athlon, Pentium 4 and PPro.\n\n2003-02-15  Roger Sayle  <roger@eyesopen.com>\n\n\t* config/i386/i386.c (x86_ext_80387_constants): Use 80387 insns\n\tto load mathematical constants on K6, Athlon, Pentium 4 and PPro.\n\t(ext_80387_constants_table): Global table of 80387 special constants\n\tguarded by ext_80387_constants_init flag when not initialized.\n\t(init_ext_80387_constants): New function to initialize this table.\n\t(standard_80387_constant_p): Extend to recognize extra 80387\n\tconstants, in XFmode, on processors where this is a win.\n\t(standard_80387_constant_opcode): New function to return the\n\topcode associated with standard_80387_constant_p.\n\t(standard_80387_constant_rtx): New function to return the XFmode\n\tCONST_DOUBLE associated with standard_80387_constant_p.\n\t(ix86_rtx_costs): Give the new constants the same cost as 1.0.\n\n\t* config/i386/i386-protos.h (standard_80387_constant_opcode):\n\tPrototype here.\n\t(standard_80387_constant_rtx): Likewise.\n\n\t* config/i386/i386.md (*movsf1, *movsf1_nointerunit, *movdf_nointeger,\n\t*movdf_integer, *movxf_nointeger, *movtf_nointeger, *movxf_integer,\n\t*movtf_integer): Simplify using new standard_80387_constant_opcode.\n\n\t* gcc.dg/i386-387-3.c: New test case.\n\nFrom-SVN: r62958", "tree": {"sha": "c5992b263188c567bbeaa331e4c8c317af271e2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5992b263188c567bbeaa331e4c8c317af271e2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/881b2a9652748adad442a2d634eb2970a476fe42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881b2a9652748adad442a2d634eb2970a476fe42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/881b2a9652748adad442a2d634eb2970a476fe42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/881b2a9652748adad442a2d634eb2970a476fe42/comments", "author": null, "committer": null, "parents": [{"sha": "d203738b3a8967e2f096288da68075154c81bcb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d203738b3a8967e2f096288da68075154c81bcb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d203738b3a8967e2f096288da68075154c81bcb2"}], "stats": {"total": 230, "additions": 159, "deletions": 71}, "files": [{"sha": "bbd38c38325031714c10ba3ca992f10602001fe2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=881b2a9652748adad442a2d634eb2970a476fe42", "patch": "@@ -1,3 +1,26 @@\n+2003-02-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.c (x86_ext_80387_constants): Use 80387 insns\n+\tto load mathematical constants on K6, Athlon, Pentium 4 and PPro.\n+\t(ext_80387_constants_table): Global table of 80387 special constants\n+\tguarded by ext_80387_constants_init flag when not initialized.\n+\t(init_ext_80387_constants): New function to initialize this table.\n+\t(standard_80387_constant_p): Extend to recognize extra 80387\n+\tconstants, in XFmode, on processors where this is a win.\n+\t(standard_80387_constant_opcode): New function to return the\n+\topcode associated with standard_80387_constant_p.\n+\t(standard_80387_constant_rtx): New function to return the XFmode\n+\tCONST_DOUBLE associated with standard_80387_constant_p.\n+\t(ix86_rtx_costs): Give the new constants the same cost as 1.0.\n+\n+\t* config/i386/i386-protos.h (standard_80387_constant_opcode):\n+\tPrototype here.\n+\t(standard_80387_constant_rtx): Likewise.\n+\n+\t* config/i386/i386.md (*movsf1, *movsf1_nointerunit, *movdf_nointeger,\n+\t*movdf_integer, *movxf_nointeger, *movtf_nointeger, *movxf_integer,\n+\t*movtf_integer): Simplify using new standard_80387_constant_opcode.\n+\n 2003-02-15  Geoffrey Keating  <geoffk@apple.com>\n \n \t* doc/invoke.texi (Optimize Options): Correct @option syntax."}, {"sha": "b83aae745c822353cfb520f7f95b4f7334801dcd", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=881b2a9652748adad442a2d634eb2970a476fe42", "patch": "@@ -39,6 +39,8 @@ extern void ix86_output_addr_diff_elt PARAMS ((FILE *, int, int));\n extern int ix86_aligned_p PARAMS ((rtx));\n \n extern int standard_80387_constant_p PARAMS ((rtx));\n+extern const char *standard_80387_constant_opcode PARAMS ((rtx));\n+extern rtx standard_80387_constant_rtx PARAMS ((int));\n extern int standard_sse_constant_p PARAMS ((rtx));\n extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n extern bool extended_reg_mentioned_p PARAMS ((rtx));"}, {"sha": "fd7a9c7531197e609cbc6fe83c6d7ae43bba7fa0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 112, "deletions": 7, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=881b2a9652748adad442a2d634eb2970a476fe42", "patch": "@@ -522,6 +522,7 @@ const int x86_sse_load0_by_pxor = m_PPRO | m_PENT4;\n const int x86_use_ffreep = m_ATHLON_K8;\n const int x86_rep_movl_optimal = m_386 | m_PENT | m_PPRO | m_K6;\n const int x86_inter_unit_moves = ~(m_ATHLON_K8);\n+const int x86_ext_80387_constants = m_K6 | m_ATHLON | m_PENT4 | m_PPRO;\n \n /* In case the average insn count for single function invocation is\n    lower than this constant, emit fast (but longer) prologue and\n@@ -934,6 +935,11 @@ static rtx construct_container PARAMS ((enum machine_mode, tree, int, int, int,\n \t\t\t\t\tconst int *, int));\n static enum x86_64_reg_class merge_classes PARAMS ((enum x86_64_reg_class,\n \t\t\t\t\t\t    enum x86_64_reg_class));\n+\n+/* Table of constants used by fldpi, fldln2, etc...  */\n+static REAL_VALUE_TYPE ext_80387_constants_table [5];\n+static bool ext_80387_constants_init = 0;\n+static void init_ext_80387_constants PARAMS ((void));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -4214,26 +4220,124 @@ aligned_operand (op, mode)\n   return 1;\n }\n \f\n+/* Initialize the table of extra 80387 mathematical constants.  */\n+\n+static void\n+init_ext_80387_constants ()\n+{\n+  static const char * cst[5] =\n+  {\n+    \"0.3010299956639811952256464283594894482\",  /* 0: fldlg2  */\n+    \"0.6931471805599453094286904741849753009\",  /* 1: fldln2  */\n+    \"1.4426950408889634073876517827983434472\",  /* 2: fldl2e  */\n+    \"3.3219280948873623478083405569094566090\",  /* 3: fldl2t  */\n+    \"3.1415926535897932385128089594061862044\",  /* 4: fldpi   */\n+  };\n+  int i;\n+\n+  for (i = 0; i < 5; i++)\n+    {\n+      real_from_string (&ext_80387_constants_table[i], cst[i]);\n+      /* Ensure each constant is rounded to XFmode precision.  */\n+      real_convert (&ext_80387_constants_table[i], XFmode,\n+\t\t    &ext_80387_constants_table[i]);\n+    }\n+\n+  ext_80387_constants_init = 1;\n+}\n+\n /* Return true if the constant is something that can be loaded with\n-   a special instruction.  Only handle 0.0 and 1.0; others are less\n-   worthwhile.  */\n+   a special instruction.  */\n \n int\n standard_80387_constant_p (x)\n      rtx x;\n {\n   if (GET_CODE (x) != CONST_DOUBLE || !FLOAT_MODE_P (GET_MODE (x)))\n     return -1;\n-  /* Note that on the 80387, other constants, such as pi, that we should support\n-     too.  On some machines, these are much slower to load as standard constant,\n-     than to load from doubles in memory.  */\n+\n   if (x == CONST0_RTX (GET_MODE (x)))\n     return 1;\n   if (x == CONST1_RTX (GET_MODE (x)))\n     return 2;\n+\n+  /* For XFmode constants, try to find a special 80387 instruction on\n+     those CPUs that benefit from them.  */\n+  if (GET_MODE (x) == XFmode\n+      && x86_ext_80387_constants & CPUMASK)\n+    {\n+      REAL_VALUE_TYPE r;\n+      int i;\n+\n+      if (! ext_80387_constants_init)\n+\tinit_ext_80387_constants ();\n+\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n+      for (i = 0; i < 5; i++)\n+        if (real_identical (&r, &ext_80387_constants_table[i]))\n+\t  return i + 3;\n+    }\n+\n   return 0;\n }\n \n+/* Return the opcode of the special instruction to be used to load\n+   the constant X.  */\n+\n+const char *\n+standard_80387_constant_opcode (x)\n+     rtx x;\n+{\n+  switch (standard_80387_constant_p (x))\n+    {\n+    case 1: \n+      return \"fldz\";\n+    case 2:\n+      return \"fld1\";\n+    case 3: \n+      return \"fldlg2\";\n+    case 4:\n+      return \"fldln2\";\n+    case 5: \n+      return \"fldl2e\";\n+    case 6:\n+      return \"fldl2t\";\n+    case 7: \n+      return \"fldpi\";\n+    }\n+  abort ();\n+}\n+\n+/* Return the CONST_DOUBLE representing the 80387 constant that is\n+   loaded by the specified special instruction.  The argument IDX\n+   matches the return value from standard_80387_constant_p.  */\n+\n+rtx\n+standard_80387_constant_rtx (idx)\n+     int idx;\n+{\n+  int i;\n+\n+  if (! ext_80387_constants_init)\n+    init_ext_80387_constants ();\n+\n+  switch (idx)\n+    {\n+    case 3:\n+    case 4:\n+    case 5:\n+    case 6:\n+    case 7:\n+      i = idx - 3;\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+\n+  return CONST_DOUBLE_FROM_REAL_VALUE (ext_80387_constants_table[i], XFmode);\n+}\n+\n /* Return 1 if X is FP constant we can load to SSE register w/o using memory.\n  */\n int\n@@ -14737,10 +14841,11 @@ ix86_rtx_costs (x, code, outer_code, total)\n \t  case 1: /* 0.0 */\n \t    *total = 1;\n \t    break;\n-\t  case 2: /* 1.0 */\n+\t  default: /* Other constants */\n \t    *total = 2;\n \t    break;\n-\t  default:\n+\t  case 0:\n+\t  case -1:\n \t    /* Start with (MEM (SYMBOL_REF)), since that's where\n \t       it'll probably end up.  Add a penalty for size.  */\n \t    *total = (COSTS_N_INSNS (1)"}, {"sha": "94206fab766b95b0ad915f6b9e5a3a89265de08c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 64, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=881b2a9652748adad442a2d634eb2970a476fe42", "patch": "@@ -2248,14 +2248,7 @@\n         return \"fst%z0\\t%y0\";\n \n     case 2:\n-      switch (standard_80387_constant_p (operands[1]))\n-        {\n-        case 1:\n-\t  return \"fldz\";\n-\tcase 2:\n-\t  return \"fld1\";\n-\t}\n-      abort();\n+      return standard_80387_constant_opcode (operands[1]);\n \n     case 3:\n     case 4:\n@@ -2354,14 +2347,7 @@\n         return \"fst%z0\\t%y0\";\n \n     case 2:\n-      switch (standard_80387_constant_p (operands[1]))\n-        {\n-        case 1:\n-\t  return \"fldz\";\n-\tcase 2:\n-\t  return \"fld1\";\n-\t}\n-      abort();\n+      return standard_80387_constant_opcode (operands[1]);\n \n     case 3:\n     case 4:\n@@ -2536,14 +2522,7 @@\n         return \"fst%z0\\t%y0\";\n \n     case 2:\n-      switch (standard_80387_constant_p (operands[1]))\n-        {\n-        case 1:\n-\t  return \"fldz\";\n-\tcase 2:\n-\t  return \"fld1\";\n-\t}\n-      abort();\n+      return standard_80387_constant_opcode (operands[1]);\n \n     case 3:\n     case 4:\n@@ -2655,14 +2634,7 @@\n         return \"fst%z0\\t%y0\";\n \n     case 2:\n-      switch (standard_80387_constant_p (operands[1]))\n-        {\n-        case 1:\n-\t  return \"fldz\";\n-\tcase 2:\n-\t  return \"fld1\";\n-\t}\n-      abort();\n+      return standard_80387_constant_opcode (operands[1]);\n \n     case 3:\n     case 4:\n@@ -2902,14 +2874,7 @@\n         return \"fstp%z0\\t%y0\";\n \n     case 2:\n-      switch (standard_80387_constant_p (operands[1]))\n-        {\n-        case 1:\n-\t  return \"fldz\";\n-\tcase 2:\n-\t  return \"fld1\";\n-\t}\n-      break;\n+      return standard_80387_constant_opcode (operands[1]);\n \n     case 3: case 4:\n       return \"#\";\n@@ -2954,14 +2919,7 @@\n         return \"fstp%z0\\t%y0\";\n \n     case 2:\n-      switch (standard_80387_constant_p (operands[1]))\n-        {\n-        case 1:\n-\t  return \"fldz\";\n-\tcase 2:\n-\t  return \"fld1\";\n-\t}\n-      break;\n+      return standard_80387_constant_opcode (operands[1]);\n \n     case 3: case 4:\n       return \"#\";\n@@ -3006,14 +2964,7 @@\n         return \"fstp%z0\\t%y0\";\n \n     case 2:\n-      switch (standard_80387_constant_p (operands[1]))\n-        {\n-        case 1:\n-\t  return \"fldz\";\n-\tcase 2:\n-\t  return \"fld1\";\n-\t}\n-      break;\n+      return standard_80387_constant_opcode (operands[1]);\n \n     case 3: case 4:\n       return \"#\";\n@@ -3058,14 +3009,7 @@\n         return \"fstp%z0\\t%y0\";\n \n     case 2:\n-      switch (standard_80387_constant_p (operands[1]))\n-        {\n-        case 1:\n-\t  return \"fldz\";\n-\tcase 2:\n-\t  return \"fld1\";\n-\t}\n-      break;\n+      return standard_80387_constant_opcode (operands[1]);\n \n     case 3: case 4:\n       return \"#\";"}, {"sha": "18044bbf1b69ddbf48786d497a082ceaf158b482", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=881b2a9652748adad442a2d634eb2970a476fe42", "patch": "@@ -1,3 +1,7 @@\n+2003-02-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/i386-387-3.c: New test case.\n+\n 2003-02-14  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* gcc.dg/20030213-1.c: Expect warning for unsupported -fpic on"}, {"sha": "f61cd6100e2bb926475830ed2e17835edebd2e9d", "filename": "gcc/testsuite/gcc.dg/i386-387-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/881b2a9652748adad442a2d634eb2970a476fe42/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-3.c?ref=881b2a9652748adad442a2d634eb2970a476fe42", "patch": "@@ -0,0 +1,10 @@\n+/* Verify that 387 mathematical constants are recognized.  */\n+/* { dg-do compile { target \"i?86-*-*\" } } */\n+/* { dg-options \"-O2 -march=i686\" } */\n+/* { dg-final { scan-assembler \"fldpi\" } } */\n+\n+long double add_pi(long double x)\n+{\n+  return x + 3.1415926535897932385128089594061862044L;\n+}\n+"}]}