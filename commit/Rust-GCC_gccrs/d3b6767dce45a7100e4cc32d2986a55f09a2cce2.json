{"sha": "d3b6767dce45a7100e4cc32d2986a55f09a2cce2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNiNjc2N2RjZTQ1YTcxMDBlNGNjMzJkMjk4NmE1NWYwOWEyY2NlMg==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-06-02T13:41:21Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-06-02T14:35:56Z"}, "message": "amdgcn: Remove -mlocal-symbol-id option\n\nThis patch removes the obsolete -mlocal-symbol-id option.  This was used to\ncontrol mangling of local symbol names in order to work around a ROCm runtime\nbug, but that has not been needed in some time, and the mangling was removed\nalready.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-hsa.h (CC1_SPEC): Delete.\n\t* config/gcn/gcn.opt (-mlocal-symbol-id): Delete.\n\t* config/gcn/mkoffload.c (main): Don't use -mlocal-symbol-id.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/intermod-1.c: Don't use -mlocal-symbol-id.", "tree": {"sha": "2f8f0b8e8f26b8b3c8b4b20eb3006ebb7753f085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f8f0b8e8f26b8b3c8b4b20eb3006ebb7753f085"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3b6767dce45a7100e4cc32d2986a55f09a2cce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b6767dce45a7100e4cc32d2986a55f09a2cce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b6767dce45a7100e4cc32d2986a55f09a2cce2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b6767dce45a7100e4cc32d2986a55f09a2cce2/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b6dcfd542aed2d14a0bcd2bee116d0779cc1d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6dcfd542aed2d14a0bcd2bee116d0779cc1d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6dcfd542aed2d14a0bcd2bee116d0779cc1d48"}], "stats": {"total": 25, "additions": 2, "deletions": 23}, "files": [{"sha": "2eaf4149f4c924ba011c7ab20919e18125391ef6", "filename": "gcc/config/gcn/gcn-hsa.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b6767dce45a7100e4cc32d2986a55f09a2cce2/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b6767dce45a7100e4cc32d2986a55f09a2cce2/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h?ref=d3b6767dce45a7100e4cc32d2986a55f09a2cce2", "patch": "@@ -79,16 +79,6 @@ extern unsigned int gcn_local_sym_hash (const char *name);\n #define ASM_SPEC  \"-triple=amdgcn--amdhsa -mattr=-code-object-v3 \"  \\\n \t\t  \"%:last_arg(%{march=*:-mcpu=%*}) \" \\\n \t\t  \"-filetype=obj\"\n-/* Add -mlocal-symbol-id=<source-file-basename> unless the user (or mkoffload)\n-   passes the option explicitly on the command line.  The option also causes\n-   several dump-matching tests to fail in the testsuite, so the option is not\n-   added when or tree dump/compare-debug options used in the testsuite are\n-   present.\n-   This has the potential for surprise, but a user can still use an explicit\n-   -mlocal-symbol-id=<whatever> option manually together with -fdump-tree or\n-   -fcompare-debug options.  */\n-#define CC1_SPEC \"%{!mlocal-symbol-id=*:%{!fdump-tree-*:\"\t\\\n-\t\t \"%{!fdump-ipa-*:%{!fcompare-debug*:-mlocal-symbol-id=%b}}}}\"\n #define LINK_SPEC \"--pie\"\n #define LIB_SPEC  \"-lc\"\n "}, {"sha": "e1b9942ebed1080562744020d2845880a973eed4", "filename": "gcc/config/gcn/gcn.opt", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b6767dce45a7100e4cc32d2986a55f09a2cce2/gcc%2Fconfig%2Fgcn%2Fgcn.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b6767dce45a7100e4cc32d2986a55f09a2cce2/gcc%2Fconfig%2Fgcn%2Fgcn.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.opt?ref=d3b6767dce45a7100e4cc32d2986a55f09a2cce2", "patch": "@@ -70,9 +70,6 @@ mstack-size=\n Target Report RejectNegative Joined UInteger Var(stack_size_opt) Init(-1)\n -mstack-size=<number>\tSet the private segment size per wave-front, in bytes.\n \n-mlocal-symbol-id=\n-Target RejectNegative Report JoinedOrMissing Var(local_symbol_id) Init(0)\n-\n Wopenacc-dims\n Target Var(warn_openacc_dims) Warning\n Warn about invalid OpenACC dimensions."}, {"sha": "4a99d70e312e2666c5838dd203ab4988b95321ea", "filename": "gcc/config/gcn/mkoffload.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b6767dce45a7100e4cc32d2986a55f09a2cce2/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b6767dce45a7100e4cc32d2986a55f09a2cce2/gcc%2Fconfig%2Fgcn%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.c?ref=d3b6767dce45a7100e4cc32d2986a55f09a2cce2", "patch": "@@ -524,7 +524,7 @@ main (int argc, char **argv)\n   FILE *in = stdin;\n   FILE *out = stdout;\n   FILE *cfile = stdout;\n-  const char *outname = 0, *offloadsrc = 0;\n+  const char *outname = 0;\n \n   progname = \"mkoffload\";\n   diagnostic_initialize (global_dc, 0);\n@@ -653,18 +653,11 @@ main (int argc, char **argv)\n       if (!strcmp (argv[ix], \"-o\") && ix + 1 != argc)\n \toutname = argv[++ix];\n       else\n-\t{\n-\t  obstack_ptr_grow (&cc_argv_obstack, argv[ix]);\n-\n-\t  if (argv[ix][0] != '-')\n-\t    offloadsrc = argv[ix];\n-\t}\n+\tobstack_ptr_grow (&cc_argv_obstack, argv[ix]);\n     }\n \n   obstack_ptr_grow (&cc_argv_obstack, \"-o\");\n   obstack_ptr_grow (&cc_argv_obstack, gcn_s1_name);\n-  obstack_ptr_grow (&cc_argv_obstack,\n-\t\t    concat (\"-mlocal-symbol-id=\", offloadsrc, NULL));\n   obstack_ptr_grow (&cc_argv_obstack, NULL);\n   const char **cc_argv = XOBFINISH (&cc_argv_obstack, const char **);\n "}, {"sha": "9f8d19deb6a3784aabcfa686af739b706735089c", "filename": "gcc/testsuite/gcc.dg/intermod-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3b6767dce45a7100e4cc32d2986a55f09a2cce2/gcc%2Ftestsuite%2Fgcc.dg%2Fintermod-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3b6767dce45a7100e4cc32d2986a55f09a2cce2/gcc%2Ftestsuite%2Fgcc.dg%2Fintermod-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fintermod-1.c?ref=d3b6767dce45a7100e4cc32d2986a55f09a2cce2", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-additional-options \"-mlocal-symbol-id=\" { target amdgcn-*-* } } */\n /* { dg-final { scan-assembler-not {foo[1-9]\\.[0-9]} } } */\n \n /* Check that we don't get .0 suffixes on static variables when not using"}]}