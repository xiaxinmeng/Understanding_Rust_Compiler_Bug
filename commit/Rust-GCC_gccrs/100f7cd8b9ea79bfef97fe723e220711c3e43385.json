{"sha": "100f7cd8b9ea79bfef97fe723e220711c3e43385", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwZjdjZDhiOWVhNzliZmVmOTdmZTcyM2UyMjA3MTFjM2U0MzM4NQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1999-10-22T05:27:34Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-10-22T05:27:34Z"}, "message": "re GNATS gcj/37 (gcj fails to compile \"jBYTEmark\" from source code when optimization is used)\n\nWed Oct 20 01:41:47 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse.y (java_complete_tree): fold_constant_for_init to work on\n \tpermanent_obstack.\n\t(java_complete_lhs): Likewise.\n\t(array_constructor_check_entry): Complete an initializer element\n \ton permanent_obstack.\n\nThis patch fixes the net PR #37\n(http://sourceware.cygnus.com/ml/java-prs/1999-q3/msg00043.html)\n\nFrom-SVN: r30126", "tree": {"sha": "db668a8231c0e086a62c51a4d6c1e2fdbb0d73b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db668a8231c0e086a62c51a4d6c1e2fdbb0d73b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/100f7cd8b9ea79bfef97fe723e220711c3e43385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100f7cd8b9ea79bfef97fe723e220711c3e43385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100f7cd8b9ea79bfef97fe723e220711c3e43385", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100f7cd8b9ea79bfef97fe723e220711c3e43385/comments", "author": null, "committer": null, "parents": [{"sha": "d84319deb3c0a19ef89a4208b5c46454f17d55ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84319deb3c0a19ef89a4208b5c46454f17d55ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d84319deb3c0a19ef89a4208b5c46454f17d55ad"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "8bbdad3cfe702bcf31f5d4a8f643b92048460c46", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100f7cd8b9ea79bfef97fe723e220711c3e43385/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100f7cd8b9ea79bfef97fe723e220711c3e43385/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=100f7cd8b9ea79bfef97fe723e220711c3e43385", "patch": "@@ -1,3 +1,11 @@\n+Wed Oct 20 01:41:47 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (java_complete_tree): fold_constant_for_init to work on\n+ \tpermanent_obstack.\n+\t(java_complete_lhs): Likewise.\n+\t(array_constructor_check_entry): Complete an initializer element\n+ \ton permanent_obstack.\n+\n 1999-10-19  Tom Tromey  <tromey@cygnus.com>\n \n \t* jcf-parse.c (parse_source_file): Call jcf_dependency_add_file."}, {"sha": "863d1eca308b5c586f3885e7108350ac732b6e74", "filename": "gcc/java/parse.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100f7cd8b9ea79bfef97fe723e220711c3e43385/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100f7cd8b9ea79bfef97fe723e220711c3e43385/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=100f7cd8b9ea79bfef97fe723e220711c3e43385", "patch": "@@ -2388,8 +2388,10 @@ int yydebug;\t\t\t/*  nonzero means print parse trace\t*/\n \n /* Prevent warning if -Wstrict-prototypes.  */\n #ifdef __GNUC__\n+#ifndef YYPARSE_PARAM\n int yyparse (void);\n #endif\n+#endif\n \f\n #if __GNUC__ > 1\t\t/* GNU C and GNU C++ define this.  */\n #define __yy_memcpy(TO,FROM,COUNT)\t__builtin_memcpy(TO,FROM,COUNT)\n@@ -10613,7 +10615,9 @@ java_complete_tree (node)\n     {\n       tree value = DECL_INITIAL (node);\n       DECL_INITIAL (node) = NULL_TREE;\n+      push_obstacks (&permanent_obstack, &permanent_obstack);\n       value = fold_constant_for_init (value, node);\n+      pop_obstacks ();\n       DECL_INITIAL (node) = value;\n       if (value != NULL_TREE)\n \treturn value;\n@@ -10815,8 +10819,12 @@ java_complete_lhs (node)\n \t  && JDECL_P (TREE_OPERAND (cn, 1))\n \t  && FIELD_FINAL (TREE_OPERAND (cn, 1))\n \t  && DECL_INITIAL (TREE_OPERAND (cn, 1)))\n-\tcn = fold_constant_for_init (DECL_INITIAL (TREE_OPERAND (cn, 1)),\n-\t\t\t\t     TREE_OPERAND (cn, 1));\n+\t{\n+\t  push_obstacks (&permanent_obstack, &permanent_obstack);\n+\t  cn = fold_constant_for_init (DECL_INITIAL (TREE_OPERAND (cn, 1)),\n+\t\t\t\t       TREE_OPERAND (cn, 1));\n+\t  pop_obstacks ();\n+\t}\n \n       if (!TREE_CONSTANT (cn) && !flag_emit_xref)\n \t{\n@@ -11069,7 +11077,11 @@ java_complete_lhs (node)\n \t  && TREE_CODE (nn) == VAR_DECL && TREE_STATIC (nn)\n \t  && DECL_INITIAL (nn) != NULL_TREE)\n \t{\n-\t  tree value = fold_constant_for_init (nn, nn);\n+\t  tree value;\n+\t  \n+\t  push_obstacks (&permanent_obstack, &permanent_obstack);\n+\t  value = fold_constant_for_init (nn, nn);\n+\t  pop_obstacks ();\n \t  if (value != NULL_TREE)\n \t    {\n \t      tree type = TREE_TYPE (value);\n@@ -13456,6 +13468,7 @@ array_constructor_check_entry (type, entry)\n   new_value = NULL_TREE;\n   wfl_value = TREE_VALUE (entry);\n \n+  push_obstacks (&permanent_obstack, &permanent_obstack);\n   value = java_complete_tree (TREE_VALUE (entry));\n   /* patch_string return error_mark_node if arg is error_mark_node */\n   if ((patched = patch_string (value)))\n@@ -13471,7 +13484,8 @@ array_constructor_check_entry (type, entry)\n   new_value = try_builtin_assignconv (wfl_operator, type, value);\n   if (!new_value && (new_value = try_reference_assignconv (type, value)))\n     type_value = promote_type (type);\n-  \n+\n+  pop_obstacks ();\n   /* Check and report errors */\n   if (!new_value)\n     {"}, {"sha": "1fabf8071f40fd5336c059a486ead90f6c525fab", "filename": "gcc/java/parse.y", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100f7cd8b9ea79bfef97fe723e220711c3e43385/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100f7cd8b9ea79bfef97fe723e220711c3e43385/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=100f7cd8b9ea79bfef97fe723e220711c3e43385", "patch": "@@ -8028,7 +8028,9 @@ java_complete_tree (node)\n     {\n       tree value = DECL_INITIAL (node);\n       DECL_INITIAL (node) = NULL_TREE;\n+      push_obstacks (&permanent_obstack, &permanent_obstack);\n       value = fold_constant_for_init (value, node);\n+      pop_obstacks ();\n       DECL_INITIAL (node) = value;\n       if (value != NULL_TREE)\n \treturn value;\n@@ -8230,8 +8232,12 @@ java_complete_lhs (node)\n \t  && JDECL_P (TREE_OPERAND (cn, 1))\n \t  && FIELD_FINAL (TREE_OPERAND (cn, 1))\n \t  && DECL_INITIAL (TREE_OPERAND (cn, 1)))\n-\tcn = fold_constant_for_init (DECL_INITIAL (TREE_OPERAND (cn, 1)),\n-\t\t\t\t     TREE_OPERAND (cn, 1));\n+\t{\n+\t  push_obstacks (&permanent_obstack, &permanent_obstack);\n+\t  cn = fold_constant_for_init (DECL_INITIAL (TREE_OPERAND (cn, 1)),\n+\t\t\t\t       TREE_OPERAND (cn, 1));\n+\t  pop_obstacks ();\n+\t}\n \n       if (!TREE_CONSTANT (cn) && !flag_emit_xref)\n \t{\n@@ -8484,7 +8490,11 @@ java_complete_lhs (node)\n \t  && TREE_CODE (nn) == VAR_DECL && TREE_STATIC (nn)\n \t  && DECL_INITIAL (nn) != NULL_TREE)\n \t{\n-\t  tree value = fold_constant_for_init (nn, nn);\n+\t  tree value;\n+\t  \n+\t  push_obstacks (&permanent_obstack, &permanent_obstack);\n+\t  value = fold_constant_for_init (nn, nn);\n+\t  pop_obstacks ();\n \t  if (value != NULL_TREE)\n \t    {\n \t      tree type = TREE_TYPE (value);\n@@ -10871,6 +10881,7 @@ array_constructor_check_entry (type, entry)\n   new_value = NULL_TREE;\n   wfl_value = TREE_VALUE (entry);\n \n+  push_obstacks (&permanent_obstack, &permanent_obstack);\n   value = java_complete_tree (TREE_VALUE (entry));\n   /* patch_string return error_mark_node if arg is error_mark_node */\n   if ((patched = patch_string (value)))\n@@ -10886,7 +10897,8 @@ array_constructor_check_entry (type, entry)\n   new_value = try_builtin_assignconv (wfl_operator, type, value);\n   if (!new_value && (new_value = try_reference_assignconv (type, value)))\n     type_value = promote_type (type);\n-  \n+\n+  pop_obstacks ();\n   /* Check and report errors */\n   if (!new_value)\n     {"}]}