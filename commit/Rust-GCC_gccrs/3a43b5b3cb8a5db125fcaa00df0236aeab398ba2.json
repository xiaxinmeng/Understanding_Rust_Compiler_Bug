{"sha": "3a43b5b3cb8a5db125fcaa00df0236aeab398ba2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E0M2I1YjNjYjhhNWRiMTI1ZmNhYTAwZGYwMjM2YWVhYjM5OGJhMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-06-01T14:30:43Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-06-01T14:30:43Z"}, "message": "decl.c (add_global_entry): Take locus.\n\n2013-06-01  Tobias Burnus  <burnus@net-b.de>\n\n        * decl.c (add_global_entry): Take locus.\n        (gfc_match_entry): Update call.\n        (gfc_match_end): Better error location.\n        * parse.c (parse_block_data, parse_module, add_global_procedure,\n        add_global_program): Use better locus data.\n\nFrom-SVN: r199580", "tree": {"sha": "d371d9ce0e3b5001524b40fc29fad0cad6f82e38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d371d9ce0e3b5001524b40fc29fad0cad6f82e38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a43b5b3cb8a5db125fcaa00df0236aeab398ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a43b5b3cb8a5db125fcaa00df0236aeab398ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a43b5b3cb8a5db125fcaa00df0236aeab398ba2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a43b5b3cb8a5db125fcaa00df0236aeab398ba2/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40a7fe1e382e97dda78b7cff9e05bc8e17bc9216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a7fe1e382e97dda78b7cff9e05bc8e17bc9216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40a7fe1e382e97dda78b7cff9e05bc8e17bc9216"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "4d76a444f93c5a7a62893b8aa942807087fd521a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a43b5b3cb8a5db125fcaa00df0236aeab398ba2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a43b5b3cb8a5db125fcaa00df0236aeab398ba2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3a43b5b3cb8a5db125fcaa00df0236aeab398ba2", "patch": "@@ -1,3 +1,11 @@\n+2013-06-01  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* decl.c (add_global_entry): Take locus.\n+\t(gfc_match_entry): Update call.\n+\t(gfc_match_end): Better error location.\n+\t* parse.c (parse_block_data, parse_module, add_global_procedure,\n+\tadd_global_program): Use better locus data.\n+\n 2013-05-31  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/57456"}, {"sha": "f1aa31e07be7997c6e08edd932e19e248959841f", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a43b5b3cb8a5db125fcaa00df0236aeab398ba2/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a43b5b3cb8a5db125fcaa00df0236aeab398ba2/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=3a43b5b3cb8a5db125fcaa00df0236aeab398ba2", "patch": "@@ -5354,7 +5354,8 @@ gfc_match_function_decl (void)\n    to return false upon finding an existing global entry.  */\n \n static bool\n-add_global_entry (const char *name, const char *binding_label, bool sub)\n+add_global_entry (const char *name, const char *binding_label, bool sub,\n+\t\t  locus *where)\n {\n   gfc_gsymbol *s;\n   enum gfc_symbol_type type;\n@@ -5369,14 +5370,14 @@ add_global_entry (const char *name, const char *binding_label, bool sub)\n \n       if (s->defined || (s->type != GSYM_UNKNOWN && s->type != type))\n \t{\n-\t  gfc_global_used(s, NULL);\n+\t  gfc_global_used (s, where);\n \t  return false;\n \t}\n       else\n \t{\n \t  s->type = type;\n \t  s->sym_name = name;\n-\t  s->where = gfc_current_locus;\n+\t  s->where = *where;\n \t  s->defined = 1;\n \t  s->ns = gfc_current_ns;\n \t}\n@@ -5391,15 +5392,15 @@ add_global_entry (const char *name, const char *binding_label, bool sub)\n \n       if (s->defined || (s->type != GSYM_UNKNOWN && s->type != type))\n \t{\n-\t  gfc_global_used(s, NULL);\n+\t  gfc_global_used (s, where);\n \t  return false;\n \t}\n       else\n \t{\n \t  s->type = type;\n \t  s->sym_name = name;\n \t  s->binding_label = binding_label;\n-\t  s->where = gfc_current_locus;\n+\t  s->where = *where;\n \t  s->defined = 1;\n \t  s->ns = gfc_current_ns;\n \t}\n@@ -5528,6 +5529,7 @@ gfc_match_entry (void)\n \n   /* Check what next non-whitespace character is so we can tell if there\n      is the required parens if we have a BIND(C).  */\n+  old_loc = gfc_current_locus;\n   gfc_gobble_whitespace ();\n   peek_char = gfc_peek_ascii_char ();\n \n@@ -5555,7 +5557,8 @@ gfc_match_entry (void)\n \t}\n \n       if (!gfc_current_ns->parent\n-\t  && !add_global_entry (name, entry->binding_label, true))\n+\t  && !add_global_entry (name, entry->binding_label, true,\n+\t\t\t\t&old_loc))\n \treturn MATCH_ERROR;\n \n       /* An entry in a subroutine.  */\n@@ -5574,7 +5577,6 @@ gfc_match_entry (void)\n \t    ENTRY f() RESULT (r)\n \t can't be written as\n \t    ENTRY f RESULT (r).  */\n-      old_loc = gfc_current_locus;\n       if (gfc_match_eos () == MATCH_YES)\n \t{\n \t  gfc_current_locus = old_loc;\n@@ -5624,7 +5626,8 @@ gfc_match_entry (void)\n \t}\n \n       if (!gfc_current_ns->parent\n-\t  && !add_global_entry (name, entry->binding_label, false))\n+\t  && !add_global_entry (name, entry->binding_label, false,\n+\t\t\t\t&old_loc))\n \treturn MATCH_ERROR;\n     }\n \n@@ -6108,6 +6111,7 @@ gfc_match_end (gfc_statement *st)\n       goto cleanup;\n     }\n \n+  old_loc = gfc_current_locus;\n   if (gfc_match_eos () == MATCH_YES)\n     {\n       if (!eos_ok && (*st == ST_END_SUBROUTINE || *st == ST_END_FUNCTION))\n@@ -6131,10 +6135,12 @@ gfc_match_end (gfc_statement *st)\n   /* Verify that we've got the sort of end-block that we're expecting.  */\n   if (gfc_match (target) != MATCH_YES)\n     {\n-      gfc_error (\"Expecting %s statement at %C\", gfc_ascii_statement (*st));\n+      gfc_error (\"Expecting %s statement at %L\", gfc_ascii_statement (*st),\n+\t\t &old_loc);\n       goto cleanup;\n     }\n \n+  old_loc = gfc_current_locus;\n   /* If we're at the end, make sure a block name wasn't required.  */\n   if (gfc_match_eos () == MATCH_YES)\n     {\n@@ -6147,8 +6153,8 @@ gfc_match_end (gfc_statement *st)\n       if (!block_name)\n \treturn MATCH_YES;\n \n-      gfc_error (\"Expected block name of '%s' in %s statement at %C\",\n-\t\t block_name, gfc_ascii_statement (*st));\n+      gfc_error (\"Expected block name of '%s' in %s statement at %L\",\n+\t\t block_name, gfc_ascii_statement (*st), &old_loc);\n \n       return MATCH_ERROR;\n     }"}, {"sha": "f98a21399e328382915fc86708229066ff411f75", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a43b5b3cb8a5db125fcaa00df0236aeab398ba2/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a43b5b3cb8a5db125fcaa00df0236aeab398ba2/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=3a43b5b3cb8a5db125fcaa00df0236aeab398ba2", "patch": "@@ -4270,11 +4270,11 @@ parse_block_data (void)\n       s = gfc_get_gsymbol (gfc_new_block->name);\n       if (s->defined\n \t  || (s->type != GSYM_UNKNOWN && s->type != GSYM_BLOCK_DATA))\n-       gfc_global_used(s, NULL);\n+       gfc_global_used (s, &gfc_new_block->declared_at);\n       else\n        {\n \t s->type = GSYM_BLOCK_DATA;\n-\t s->where = gfc_current_locus;\n+\t s->where = gfc_new_block->declared_at;\n \t s->defined = 1;\n        }\n     }\n@@ -4302,11 +4302,11 @@ parse_module (void)\n \n   s = gfc_get_gsymbol (gfc_new_block->name);\n   if (s->defined || (s->type != GSYM_UNKNOWN && s->type != GSYM_MODULE))\n-    gfc_global_used(s, NULL);\n+    gfc_global_used (s, &gfc_new_block->declared_at);\n   else\n     {\n       s->type = GSYM_MODULE;\n-      s->where = gfc_current_locus;\n+      s->where = gfc_new_block->declared_at;\n       s->defined = 1;\n     }\n \n@@ -4360,15 +4360,15 @@ add_global_procedure (bool sub)\n \t  || (s->type != GSYM_UNKNOWN\n \t      && s->type != (sub ? GSYM_SUBROUTINE : GSYM_FUNCTION)))\n \t{\n-\t  gfc_global_used (s, NULL);\n+\t  gfc_global_used (s, &gfc_new_block->declared_at);\n \t  /* Silence follow-up errors.  */\n \t  gfc_new_block->binding_label = NULL;\n \t}\n       else\n \t{\n \t  s->type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n \t  s->sym_name = gfc_new_block->name;\n-\t  s->where = gfc_current_locus;\n+\t  s->where = gfc_new_block->declared_at;\n \t  s->defined = 1;\n \t  s->ns = gfc_current_ns;\n \t}\n@@ -4385,7 +4385,7 @@ add_global_procedure (bool sub)\n \t  || (s->type != GSYM_UNKNOWN\n \t      && s->type != (sub ? GSYM_SUBROUTINE : GSYM_FUNCTION)))\n \t{\n-\t  gfc_global_used (s, NULL);\n+\t  gfc_global_used (s, &gfc_new_block->declared_at);\n \t  /* Silence follow-up errors.  */\n \t  gfc_new_block->binding_label = NULL;\n \t}\n@@ -4394,7 +4394,7 @@ add_global_procedure (bool sub)\n \t  s->type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n \t  s->sym_name = gfc_new_block->name;\n \t  s->binding_label = gfc_new_block->binding_label;\n-\t  s->where = gfc_current_locus;\n+\t  s->where = gfc_new_block->declared_at;\n \t  s->defined = 1;\n \t  s->ns = gfc_current_ns;\n \t}\n@@ -4414,11 +4414,11 @@ add_global_program (void)\n   s = gfc_get_gsymbol (gfc_new_block->name);\n \n   if (s->defined || (s->type != GSYM_UNKNOWN && s->type != GSYM_PROGRAM))\n-    gfc_global_used(s, NULL);\n+    gfc_global_used (s, &gfc_new_block->declared_at);\n   else\n     {\n       s->type = GSYM_PROGRAM;\n-      s->where = gfc_current_locus;\n+      s->where = gfc_new_block->declared_at;\n       s->defined = 1;\n       s->ns = gfc_current_ns;\n     }"}]}