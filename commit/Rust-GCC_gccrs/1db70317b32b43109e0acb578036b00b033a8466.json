{"sha": "1db70317b32b43109e0acb578036b00b033a8466", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRiNzAzMTdiMzJiNDMxMDllMGFjYjU3ODAzNmIwMGIwMzNhODQ2Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-21T16:06:50Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-21T16:06:50Z"}, "message": "i386.c (x86_sse_partial_regs_for_cvtsd2ss): Remove.\n\n        * config/i386/i386.c (x86_sse_partial_regs_for_cvtsd2ss): Remove.\n        * config/i386/i386.h (TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS): Remove.\n        * config/i386/i386.md (truncdfsf2_1_sse): Don't test it.\n        (truncdfsf2_2, truncdfsf2_sse_only): Likewise.\n        (truncdfsf2_1_sse_nooverlap, truncdfsf2_2_nooverlap): Remove.\n        (truncdfsf2_sse_only_nooverlap): Remove.\n\nFrom-SVN: r92457", "tree": {"sha": "cbe7b79f1ffec31da80f6eff762481cdceed8049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbe7b79f1ffec31da80f6eff762481cdceed8049"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1db70317b32b43109e0acb578036b00b033a8466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db70317b32b43109e0acb578036b00b033a8466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db70317b32b43109e0acb578036b00b033a8466", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db70317b32b43109e0acb578036b00b033a8466/comments", "author": null, "committer": null, "parents": [{"sha": "944c6ecc79adae0e4f32c9a34f47be0a7b9d63da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/944c6ecc79adae0e4f32c9a34f47be0a7b9d63da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/944c6ecc79adae0e4f32c9a34f47be0a7b9d63da"}], "stats": {"total": 112, "additions": 11, "deletions": 101}, "files": [{"sha": "7a7b649e999f4e24e4d592f705828bd679f0f0d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db70317b32b43109e0acb578036b00b033a8466/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db70317b32b43109e0acb578036b00b033a8466/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1db70317b32b43109e0acb578036b00b033a8466", "patch": "@@ -1,5 +1,12 @@\n 2004-12-21  Richard Henderson  <rth@redhat.com>\n \n+\t* config/i386/i386.c (x86_sse_partial_regs_for_cvtsd2ss): Remove.\n+\t* config/i386/i386.h (TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS): Remove.\n+\t* config/i386/i386.md (truncdfsf2_1_sse): Don't test it.\n+\t(truncdfsf2_2, truncdfsf2_sse_only): Likewise.\n+\t(truncdfsf2_1_sse_nooverlap, truncdfsf2_2_nooverlap): Remove.\n+\t(truncdfsf2_sse_only_nooverlap): Remove.\n+\n \t* config/i386/i386.h (TARGET_SSE_TYPELESS_LOAD0): Remove.\n \n 2004-12-21  Eric Botcazou  <ebotcazou@libertysurf.fr>"}, {"sha": "ad46febf36522d9b7bcb6ceda51d80beff190e19", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db70317b32b43109e0acb578036b00b033a8466/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db70317b32b43109e0acb578036b00b033a8466/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1db70317b32b43109e0acb578036b00b033a8466", "patch": "@@ -566,9 +566,6 @@ const int x86_sse_partial_reg_dependency = m_PENT4 | m_NOCONA | m_PPRO;\n    parts instead of whole registers, so we may maintain just lower part of\n    scalar values in proper format leaving the upper part undefined.  */\n const int x86_sse_partial_regs = m_ATHLON_K8;\n-/* Athlon optimizes partial-register FPS special case, thus avoiding the\n-   need for extra instructions beforehand  */\n-const int x86_sse_partial_regs_for_cvtsd2ss = 0;\n const int x86_sse_typeless_stores = m_ATHLON_K8;\n const int x86_sse_load0_by_pxor = m_PPRO | m_PENT4 | m_NOCONA;\n const int x86_use_ffreep = m_ATHLON_K8;"}, {"sha": "80fe6cdb0294fe6cd3d269041c4d34e76e06d7d8", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db70317b32b43109e0acb578036b00b033a8466/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db70317b32b43109e0acb578036b00b033a8466/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=1db70317b32b43109e0acb578036b00b033a8466", "patch": "@@ -287,8 +287,6 @@ extern int x86_prefetch_sse;\n #define TARGET_SSE_PARTIAL_REG_DEPENDENCY \\\n \t\t\t\t      (x86_sse_partial_reg_dependency & TUNEMASK)\n #define TARGET_SSE_PARTIAL_REGS (x86_sse_partial_regs & TUNEMASK)\n-#define TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS \\\n-\t\t\t\t(x86_sse_partial_regs_for_cvtsd2ss & TUNEMASK)\n #define TARGET_SSE_TYPELESS_STORES (x86_sse_typeless_stores & TUNEMASK)\n #define TARGET_SSE_LOAD0_BY_PXOR (x86_sse_load0_by_pxor & TUNEMASK)\n #define TARGET_MEMORY_MISMATCH_STALL (x86_memory_mismatch_stall & TUNEMASK)"}, {"sha": "3cdfc71517cb84a22a05e71a1e9eb09fab8e61d6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 96, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1db70317b32b43109e0acb578036b00b033a8466/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1db70317b32b43109e0acb578036b00b033a8466/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1db70317b32b43109e0acb578036b00b033a8466", "patch": "@@ -3696,30 +3696,7 @@\n \t(float_truncate:SF\n \t (match_operand:DF 1 \"nonimmediate_operand\" \"f#Y,f#Y,f#Y,f#Y,mY#f\")))\n    (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m,X\"))]\n-  \"TARGET_80387 && TARGET_SSE2 && !TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\treturn \"fstp%z0\\t%y0\";\n-      else\n-\treturn \"fst%z0\\t%y0\";\n-    case 4:\n-      return \"#\";\n-    default:\n-      abort ();\n-    }\n-}\n-  [(set_attr \"type\" \"fmov,multi,multi,multi,ssecvt\")\n-   (set_attr \"mode\" \"SF,SF,SF,SF,DF\")])\n-\n-(define_insn \"*truncdfsf2_1_sse_nooverlap\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=*!m,?f#rx,?r#fx,?x#rf,&Y\")\n-\t(float_truncate:SF\n-\t (match_operand:DF 1 \"nonimmediate_operand\" \"f#Y,f#Y,f#Y,f#Y,mY#f\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m,X\"))]\n-  \"TARGET_80387 && TARGET_SSE2 && TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS\"\n+  \"TARGET_80387 && TARGET_SSE2\"\n {\n   switch (which_alternative)\n     {\n@@ -3741,7 +3718,7 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=Y,Y,!m\")\n \t(float_truncate:SF\n \t (match_operand:DF 1 \"nonimmediate_operand\" \"Y,mY,f#Y\")))]\n-  \"TARGET_80387 && TARGET_SSE2 && !TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS\n+  \"TARGET_80387 && TARGET_SSE2\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n   switch (which_alternative)\n@@ -3762,29 +3739,6 @@\n    (set_attr \"athlon_decode\" \"vector,double,*\")\n    (set_attr \"mode\" \"SF,SF,SF\")])\n \n-(define_insn \"*truncdfsf2_2_nooverlap\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=&Y,!m\")\n-\t(float_truncate:SF\n-\t (match_operand:DF 1 \"nonimmediate_operand\" \"mY,f\")))]\n-  \"TARGET_80387 && TARGET_SSE2 && TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      return \"#\";\n-    case 1:\n-      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\treturn \"fstp%z0\\t%y0\";\n-      else\n-\treturn \"fst%z0\\t%y0\";\n-    default:\n-      abort ();\n-    }\n-}\n-  [(set_attr \"type\" \"ssecvt,fmov\")\n-   (set_attr \"mode\" \"DF,SF\")])\n-\n (define_insn \"*truncdfsf2_3\"\n   [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:SF\n@@ -3803,21 +3757,12 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=Y,Y\")\n \t(float_truncate:SF\n \t (match_operand:DF 1 \"nonimmediate_operand\" \"Y,mY\")))]\n-  \"!TARGET_80387 && TARGET_SSE2 && !TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS\"\n+  \"!TARGET_80387 && TARGET_SSE2\"\n   \"cvtsd2ss\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"athlon_decode\" \"vector,double\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*truncdfsf2_sse_only_nooverlap\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=&Y\")\n-\t(float_truncate:SF\n-\t (match_operand:DF 1 \"nonimmediate_operand\" \"mY\")))]\n-  \"!TARGET_80387 && TARGET_SSE2 && TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS\"\n-  \"#\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"mode\" \"DF\")])\n-\n (define_split\n   [(set (match_operand:SF 0 \"memory_operand\" \"\")\n \t(float_truncate:SF\n@@ -3827,8 +3772,6 @@\n   [(set (match_dup 0) (float_truncate:SF (match_dup 1)))]\n   \"\")\n \n-; Avoid possible reformatting penalty on the destination by first\n-; zeroing it out\n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(float_truncate:SF\n@@ -3839,42 +3782,7 @@\n    && !STACK_REG_P (operands[1])\"\n   [(const_int 0)]\n {\n-  rtx src, dest;\n-  if (!TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS)\n-    emit_insn (gen_truncdfsf2_sse_only (operands[0], operands[1]));\n-  else\n-    {\n-      dest = simplify_gen_subreg (V4SFmode, operands[0], SFmode, 0);\n-      src = simplify_gen_subreg (V2DFmode, operands[1], DFmode, 0);\n-      /* simplify_gen_subreg refuses to widen memory references.  */\n-      if (GET_CODE (src) == SUBREG)\n-\talter_subreg (&src);\n-      if (reg_overlap_mentioned_p (operands[0], operands[1]))\n-\tabort ();\n-      emit_insn (gen_sse_clrv4sf (dest, CONST0_RTX (V4SFmode)));\n-      emit_insn (gen_cvtsd2ss (dest, dest, src));\n-    }\n-  DONE;\n-})\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float_truncate:SF\n-\t (match_operand:DF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_80387 && reload_completed\n-   && SSE_REG_P (operands[0]) && TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS\"\n-  [(const_int 0)]\n-{\n-  rtx src, dest;\n-  dest = simplify_gen_subreg (V4SFmode, operands[0], SFmode, 0);\n-  src = simplify_gen_subreg (V2DFmode, operands[1], DFmode, 0);\n-  /* simplify_gen_subreg refuses to widen memory references.  */\n-  if (GET_CODE (src) == SUBREG)\n-    alter_subreg (&src);\n-  if (reg_overlap_mentioned_p (operands[0], operands[1]))\n-    abort ();\n-  emit_insn (gen_sse_clrv4sf (dest, CONST0_RTX (V4SFmode)));\n-  emit_insn (gen_cvtsd2ss (dest, dest, src));\n+  emit_insn (gen_truncdfsf2_sse_only (operands[0], operands[1]));\n   DONE;\n })\n "}]}