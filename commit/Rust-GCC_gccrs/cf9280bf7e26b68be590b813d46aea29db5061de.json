{"sha": "cf9280bf7e26b68be590b813d46aea29db5061de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y5MjgwYmY3ZTI2YjY4YmU1OTBiODEzZDQ2YWVhMjlkYjUwNjFkZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-19T18:55:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-19T18:55:40Z"}, "message": "array (array): Add pointer and const_pointer typedefs in C++0x mode, per DR 1306.\n\n2010-02-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/tr1_impl/array (array): Add pointer and const_pointer\n\ttypedefs in C++0x mode, per DR 1306.\n\t* testsuite/util/testsuite_containers.h (basic_types): Add pointer\n\tand const_pointer typedefs.\n\t(pointer_aware_types): Remove.\n\t* testsuite/util/testsuite_container_traits.h: Adjust.\n\nFrom-SVN: r156906", "tree": {"sha": "9d69046b666a19b9d58f0acc29aa4106a83a521a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d69046b666a19b9d58f0acc29aa4106a83a521a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf9280bf7e26b68be590b813d46aea29db5061de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9280bf7e26b68be590b813d46aea29db5061de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9280bf7e26b68be590b813d46aea29db5061de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9280bf7e26b68be590b813d46aea29db5061de/comments", "author": null, "committer": null, "parents": [{"sha": "25c0cad4febcc3c1297ccf500559fa76af4b3b18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c0cad4febcc3c1297ccf500559fa76af4b3b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c0cad4febcc3c1297ccf500559fa76af4b3b18"}], "stats": {"total": 56, "additions": 22, "deletions": 34}, "files": [{"sha": "f89d8bc30c0f02ee9109be835d9df01a58abaa3f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9280bf7e26b68be590b813d46aea29db5061de/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9280bf7e26b68be590b813d46aea29db5061de/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cf9280bf7e26b68be590b813d46aea29db5061de", "patch": "@@ -1,3 +1,12 @@\n+2010-02-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/tr1_impl/array (array): Add pointer and const_pointer\n+\ttypedefs in C++0x mode, per DR 1306.\n+\t* testsuite/util/testsuite_containers.h (basic_types): Add pointer\n+\tand const_pointer typedefs.\n+\t(pointer_aware_types): Remove.\n+\t* testsuite/util/testsuite_container_traits.h: Adjust.\n+\n 2010-02-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algo.h (for_each): Implement resolution of DR 1110."}, {"sha": "183f63696c775dfd2bd2a6d82ff37a7d009007a3", "filename": "libstdc++-v3/include/tr1_impl/array", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9280bf7e26b68be590b813d46aea29db5061de/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9280bf7e26b68be590b813d46aea29db5061de/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Farray?ref=cf9280bf7e26b68be590b813d46aea29db5061de", "patch": "@@ -1,6 +1,6 @@\n // class template array -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -49,6 +49,10 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     struct array\n     {\n       typedef _Tp \t    \t\t\t      value_type;\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+      typedef _Tp*                                    pointer;\n+      typedef const _Tp*                              const_pointer;\n+#endif\n       typedef value_type&                   \t      reference;\n       typedef const value_type&             \t      const_reference;\n       typedef value_type*          \t\t      iterator;"}, {"sha": "789384336bf4941f02b5b11880631e3a32bf3c7e", "filename": "libstdc++-v3/testsuite/util/testsuite_container_traits.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9280bf7e26b68be590b813d46aea29db5061de/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9280bf7e26b68be590b813d46aea29db5061de/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h?ref=cf9280bf7e26b68be590b813d46aea29db5061de", "patch": "@@ -34,7 +34,6 @@ namespace __gnu_test\n     typedef std::false_type\tis_adaptor;\n     typedef std::false_type\tis_reversible;\n     typedef std::false_type\tis_allocator_aware;\n-    typedef std::false_type\tis_pointer_aware;\n     typedef std::false_type\tis_associative;\n     typedef std::false_type\tis_unordered;\n     typedef std::false_type\tis_mapped;\n@@ -64,7 +63,6 @@ namespace __gnu_test\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_reversible;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n \n       typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n@@ -77,7 +75,6 @@ namespace __gnu_test\n     {\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n \n       typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n@@ -91,7 +88,6 @@ namespace __gnu_test\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_reversible;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n \n       typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n@@ -105,7 +101,6 @@ namespace __gnu_test\n       typedef std::true_type    is_container;\n       typedef std::true_type    is_reversible;\n       typedef std::true_type    is_allocator_aware;\n-      typedef std::true_type    is_pointer_aware;\n \n       typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n@@ -118,7 +113,6 @@ namespace __gnu_test\n       typedef std::true_type    is_container;\n       typedef std::true_type    is_reversible;\n       typedef std::true_type    is_allocator_aware;\n-      typedef std::true_type    is_pointer_aware;\n \n       typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n@@ -132,7 +126,6 @@ namespace __gnu_test\n       typedef std::true_type    is_container;\n       typedef std::true_type    is_reversible;\n       typedef std::true_type    is_allocator_aware;\n-      typedef std::true_type    is_pointer_aware;\n \n       typedef std::true_type\thas_erase;\n       typedef std::true_type\thas_insert;\n@@ -144,7 +137,6 @@ namespace __gnu_test\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_reversible;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n       typedef std::true_type\tis_associative;\n       typedef std::true_type\tis_mapped;\n \n@@ -157,7 +149,6 @@ namespace __gnu_test\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_reversible;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n       typedef std::true_type\tis_associative;\n       typedef std::true_type\tis_mapped;\n \n@@ -170,7 +161,6 @@ namespace __gnu_test\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_reversible;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n       typedef std::true_type\tis_associative;\n \n       typedef std::true_type\thas_insert;\n@@ -182,7 +172,6 @@ namespace __gnu_test\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_reversible;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n       typedef std::true_type\tis_associative;\n \n       typedef std::true_type\thas_insert;\n@@ -213,7 +202,6 @@ namespace __gnu_test\n     {\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n       typedef std::true_type\tis_unordered;\n       typedef std::true_type\tis_mapped;\n \n@@ -228,7 +216,6 @@ namespace __gnu_test\n     {\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n       typedef std::true_type\tis_unordered;\n       typedef std::true_type\tis_mapped;\n \n@@ -241,7 +228,6 @@ namespace __gnu_test\n     {\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n       typedef std::true_type\tis_unordered;\n \n       typedef std::true_type\thas_size_type_constructor;\n@@ -254,7 +240,6 @@ namespace __gnu_test\n     {\n       typedef std::true_type\tis_container;\n       typedef std::true_type\tis_allocator_aware;\n-      typedef std::true_type\tis_pointer_aware;\n       typedef std::true_type\tis_unordered;\n \n       typedef std::true_type\thas_size_type_constructor;"}, {"sha": "24133cdc5878f3bcde973cbcb8040d46948f45e9", "filename": "libstdc++-v3/testsuite/util/testsuite_containers.h", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9280bf7e26b68be590b813d46aea29db5061de/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9280bf7e26b68be590b813d46aea29db5061de/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h?ref=cf9280bf7e26b68be590b813d46aea29db5061de", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -33,6 +33,8 @@ namespace __gnu_test\n       // Base container requirements (table 80)\n       typedef _Tp \t\t\t\t\ttest_type;\n       typedef typename test_type::value_type \t\tvalue_type;\n+      typedef typename test_type::pointer \t\tpointer;\n+      typedef typename test_type::const_pointer \tconst_pointer;\n       typedef typename test_type::reference \t\treference;\n       typedef typename test_type::const_reference \tconst_reference;\n       typedef typename test_type::iterator \t\titerator;\n@@ -59,15 +61,6 @@ namespace __gnu_test\n       typedef typename test_type::allocator_type      \t allocator_type;\n     };\n \n-  template<typename _Tp, bool _Bt = traits<_Tp>::is_pointer_aware::value>\n-    struct pointer_aware_types\n-    {\n-      // Allocator-aware requirements (table 82)\n-      typedef _Tp \t\t\t\t\t test_type;\n-      typedef typename test_type::pointer\t\t pointer;\n-      typedef typename test_type::const_pointer\t\t const_pointer;\n-    };\n-\n   template<typename _Tp, bool _Bt = traits<_Tp>::is_associative::value>\n     struct associative_types\n     {\n@@ -114,13 +107,13 @@ namespace __gnu_test\n     struct basic_types<_Tp, false> { };\n \n   template<typename _Tp>\n-    struct reversible_types<_Tp, false> { };\n+    struct adaptor_types<_Tp, false> { };\n \n   template<typename _Tp>\n-    struct allocator_aware_types<_Tp, false> { };\n+    struct reversible_types<_Tp, false> { };\n \n   template<typename _Tp>\n-    struct pointer_aware_types<_Tp, false> { };\n+    struct allocator_aware_types<_Tp, false> { };\n \n   template<typename _Tp>\n     struct associative_types<_Tp, false> { };\n@@ -131,15 +124,12 @@ namespace __gnu_test\n   template<typename _Tp>\n     struct mapped_types<_Tp, false> { };\n \n-  template<typename _Tp>\n-    struct adaptor_types<_Tp, false> { };\n-\n   // Primary template.\n   template<typename _Tp>\n     struct types\n     : basic_types<_Tp>, adaptor_types<_Tp>, reversible_types<_Tp>,\n-      allocator_aware_types<_Tp>, pointer_aware_types<_Tp>,\n-      associative_types<_Tp>, unordered_types<_Tp>, mapped_types<_Tp>\n+      allocator_aware_types<_Tp>, associative_types<_Tp>,\n+      unordered_types<_Tp>, mapped_types<_Tp>\n     { };\n \n "}]}