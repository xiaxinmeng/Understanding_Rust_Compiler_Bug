{"sha": "d030f3a45173ca7496c50d47e651638e3ff2f00f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAzMGYzYTQ1MTczY2E3NDk2YzUwZDQ3ZTY1MTYzOGUzZmYyZjAwZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-06T13:38:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-06T13:38:37Z"}, "message": "[multiple changes]\n\n2016-07-06  Arnaud Charlet  <charlet@adacore.com>\n\n\t* lib.adb (Check_Same_Extended_Unit): Complete previous change.\n\t* sem_intr.adb (Errint): New parameter Relaxed. Refine previous\n\tchange to only disable errors selectively.\n\t* sem_util.adb: minor style fix in object declaration\n\n2016-07-06  Yannick Moy  <moy@adacore.com>\n\n\t* sem_warn.adb (Check_Infinite_Loop_Warning.Find_Var): Special case a\n\tcall to a volatile function, so that it does not lead to a warning in\n\tthat case.\n\n2016-07-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch12.adb, sem_ch4.adb, sem_ch6.adb: Minor reformatting.\n\n2016-07-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* gnat1drv.adb: Code clean up. Do not emit any\n\tcode generation errors when the unit is ignored Ghost.\n\n2016-07-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_eval.adb (Check_Non_Static_Context): If the expression\n\tis a real literal of a floating point type that is part of a\n\tlarger expression and is not a static expression, transform it\n\tinto a machine number now so that the rest of the computation,\n\teven if other components are static, is not evaluated with\n\textra precision.\n\n2016-07-06  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch13.adb (Freeze_Entity_Checks): Undo previous patch and move the\n\tneeded functionality to Analyze_Freeze_Generic_Entity.\n\t(Analyze_Freeze_Generic_Entity): If the entity is not already frozen\n\tand has delayed aspects then analyze them.\n\n2016-07-06  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma.Process_Inline.Set_Inline_Flags):\n\tSpecial case for unanalyzed body entity of ghost expression function.\n\nFrom-SVN: r238050", "tree": {"sha": "ad27a4d348abcf31d84547e3e7c75bcc828006d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad27a4d348abcf31d84547e3e7c75bcc828006d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d030f3a45173ca7496c50d47e651638e3ff2f00f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d030f3a45173ca7496c50d47e651638e3ff2f00f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d030f3a45173ca7496c50d47e651638e3ff2f00f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d030f3a45173ca7496c50d47e651638e3ff2f00f/comments", "author": null, "committer": null, "parents": [{"sha": "6ffe854859e61fd04e1db8694e2c519f4010647b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffe854859e61fd04e1db8694e2c519f4010647b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ffe854859e61fd04e1db8694e2c519f4010647b"}], "stats": {"total": 349, "additions": 224, "deletions": 125}, "files": [{"sha": "8f060caf8ab01c934048fe039f5f83aa9bc2957d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -1,3 +1,46 @@\n+2016-07-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* lib.adb (Check_Same_Extended_Unit): Complete previous change.\n+\t* sem_intr.adb (Errint): New parameter Relaxed. Refine previous\n+\tchange to only disable errors selectively.\n+\t* sem_util.adb: minor style fix in object declaration\n+\n+2016-07-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_warn.adb (Check_Infinite_Loop_Warning.Find_Var): Special case a\n+\tcall to a volatile function, so that it does not lead to a warning in\n+\tthat case.\n+\n+2016-07-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch12.adb, sem_ch4.adb, sem_ch6.adb: Minor reformatting.\n+\n+2016-07-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat1drv.adb: Code clean up. Do not emit any\n+\tcode generation errors when the unit is ignored Ghost.\n+\n+2016-07-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_eval.adb (Check_Non_Static_Context): If the expression\n+\tis a real literal of a floating point type that is part of a\n+\tlarger expression and is not a static expression, transform it\n+\tinto a machine number now so that the rest of the computation,\n+\teven if other components are static, is not evaluated with\n+\textra precision.\n+\n+2016-07-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch13.adb (Freeze_Entity_Checks): Undo previous patch and move the\n+\tneeded functionality to Analyze_Freeze_Generic_Entity.\n+\t(Analyze_Freeze_Generic_Entity): If the entity is not already frozen\n+\tand has delayed aspects then analyze them.\n+\n+2016-07-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma.Process_Inline.Set_Inline_Flags):\n+\tSpecial case for unanalyzed body entity of ghost expression function.\n+\n 2016-07-06  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch7.adb (Analyze_Package_Specification): Insert its"}, {"sha": "acb79a569809101f4da90a4d7193d02b7c1dcd4c", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 98, "deletions": 76, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -89,24 +89,16 @@ with System.OS_Lib;\n --------------\n \n procedure Gnat1drv is\n-   Main_Unit_Node : Node_Id;\n-   --  Compilation unit node for main unit\n-\n-   Main_Kind : Node_Kind;\n-   --  Kind of main compilation unit node\n-\n-   Back_End_Mode : Back_End.Back_End_Mode_Type;\n-   --  Record back-end mode\n-\n    procedure Adjust_Global_Switches;\n    --  There are various interactions between front-end switch settings,\n    --  including debug switch settings and target dependent parameters.\n    --  This procedure takes care of properly handling these interactions.\n    --  We do it after scanning out all the switches, so that we are not\n    --  depending on the order in which switches appear.\n \n-   procedure Check_Bad_Body;\n-   --  Called to check if the unit we are compiling has a bad body\n+   procedure Check_Bad_Body (Unit_Node : Node_Id; Unit_Kind : Node_Kind);\n+   --  Called to check whether a unit described by its compilation unit node\n+   --  and kind has a bad body.\n \n    procedure Check_Rep_Info;\n    --  Called when we are not generating code, to check if -gnatR was requested\n@@ -712,10 +704,8 @@ procedure Gnat1drv is\n    -- Check_Bad_Body --\n    --------------------\n \n-   procedure Check_Bad_Body is\n-      Sname   : Unit_Name_Type;\n-      Src_Ind : Source_File_Index;\n-      Fname   : File_Name_Type;\n+   procedure Check_Bad_Body (Unit_Node : Node_Id; Unit_Kind : Node_Kind) is\n+      Fname : File_Name_Type;\n \n       procedure Bad_Body_Error (Msg : String);\n       --  Issue message for bad body found\n@@ -726,11 +716,16 @@ procedure Gnat1drv is\n \n       procedure Bad_Body_Error (Msg : String) is\n       begin\n-         Error_Msg_N (Msg, Main_Unit_Node);\n+         Error_Msg_N (Msg, Unit_Node);\n          Error_Msg_File_1 := Fname;\n-         Error_Msg_N (\"remove incorrect body in file{!\", Main_Unit_Node);\n+         Error_Msg_N (\"remove incorrect body in file{!\", Unit_Node);\n       end Bad_Body_Error;\n \n+      --  Local variables\n+\n+      Sname   : Unit_Name_Type;\n+      Src_Ind : Source_File_Index;\n+\n    --  Start of processing for Check_Bad_Body\n \n    begin\n@@ -743,13 +738,13 @@ procedure Gnat1drv is\n \n       --  Check for body not allowed\n \n-      if (Main_Kind = N_Package_Declaration\n-           and then not Body_Required (Main_Unit_Node))\n-        or else (Main_Kind = N_Generic_Package_Declaration\n-                  and then not Body_Required (Main_Unit_Node))\n-        or else Main_Kind = N_Package_Renaming_Declaration\n-        or else Main_Kind = N_Subprogram_Renaming_Declaration\n-        or else Nkind (Original_Node (Unit (Main_Unit_Node)))\n+      if (Unit_Kind = N_Package_Declaration\n+           and then not Body_Required (Unit_Node))\n+        or else (Unit_Kind = N_Generic_Package_Declaration\n+                  and then not Body_Required (Unit_Node))\n+        or else Unit_Kind = N_Package_Renaming_Declaration\n+        or else Unit_Kind = N_Subprogram_Renaming_Declaration\n+        or else Nkind (Original_Node (Unit (Unit_Node)))\n                          in N_Generic_Instantiation\n       then\n          Sname := Unit_Name (Main_Unit);\n@@ -793,32 +788,32 @@ procedure Gnat1drv is\n             --  be incorrect (we may have misinterpreted a junk spec as not\n             --  needing a body when it really does).\n \n-            if Main_Kind = N_Package_Declaration\n+            if Unit_Kind = N_Package_Declaration\n               and then Ada_Version = Ada_83\n               and then Operating_Mode = Generate_Code\n               and then Distribution_Stub_Mode /= Generate_Caller_Stub_Body\n               and then not Compilation_Errors\n             then\n                Error_Msg_N\n-                 (\"package $$ does not require a body??\", Main_Unit_Node);\n+                 (\"package $$ does not require a body??\", Unit_Node);\n                Error_Msg_File_1 := Fname;\n-               Error_Msg_N (\"body in file{ will be ignored??\", Main_Unit_Node);\n+               Error_Msg_N (\"body in file{ will be ignored??\", Unit_Node);\n \n                --  Ada 95 cases of a body file present when no body is\n                --  permitted. This we consider to be an error.\n \n             else\n                --  For generic instantiations, we never allow a body\n \n-               if Nkind (Original_Node (Unit (Main_Unit_Node))) in\n+               if Nkind (Original_Node (Unit (Unit_Node))) in\n                                                     N_Generic_Instantiation\n                then\n                   Bad_Body_Error\n                     (\"generic instantiation for $$ does not allow a body\");\n \n-                  --  A library unit that is a renaming never allows a body\n+               --  A library unit that is a renaming never allows a body\n \n-               elsif Main_Kind in N_Renaming_Declaration then\n+               elsif Unit_Kind in N_Renaming_Declaration then\n                   Bad_Body_Error\n                     (\"renaming declaration for $$ does not allow a body!\");\n \n@@ -829,11 +824,11 @@ procedure Gnat1drv is\n                   --  body when in fact it does.\n \n                elsif not Compilation_Errors then\n-                  if Main_Kind = N_Package_Declaration then\n+                  if Unit_Kind = N_Package_Declaration then\n                      Bad_Body_Error\n                        (\"package $$ does not allow a body!\");\n \n-                  elsif Main_Kind = N_Generic_Package_Declaration then\n+                  elsif Unit_Kind = N_Generic_Package_Declaration then\n                      Bad_Body_Error\n                        (\"generic package $$ does not allow a body!\");\n                   end if;\n@@ -893,9 +888,18 @@ procedure Gnat1drv is\n       if AAMP_On_Target then\n          Sem_Ch13.Validate_Independence;\n       end if;\n-\n    end Post_Compilation_Validation_Checks;\n \n+   --  Local variables\n+\n+   Back_End_Mode : Back_End.Back_End_Mode_Type;\n+\n+   Main_Unit_Kind : Node_Kind;\n+   --  Kind of main compilation unit node\n+\n+   Main_Unit_Node : Node_Id;\n+   --  Compilation unit node for main unit\n+\n --  Start of processing for Gnat1drv\n \n begin\n@@ -1065,8 +1069,9 @@ begin\n       end if;\n \n       Main_Unit_Node := Cunit (Main_Unit);\n-      Main_Kind := Nkind (Unit (Main_Unit_Node));\n-      Check_Bad_Body;\n+      Main_Unit_Kind := Nkind (Unit (Main_Unit_Node));\n+\n+      Check_Bad_Body (Main_Unit_Node, Main_Unit_Kind);\n \n       --  In CodePeer mode we always delete old SCIL files before regenerating\n       --  new ones, in case of e.g. errors, and also to remove obsolete scilx\n@@ -1159,21 +1164,23 @@ begin\n       --  subunits. Note that we always generate code for all generic units (a\n       --  change from some previous versions of GNAT).\n \n-      elsif Main_Kind = N_Subprogram_Body and then not Subunits_Missing then\n+      elsif Main_Unit_Kind = N_Subprogram_Body\n+        and then not Subunits_Missing\n+      then\n          Back_End_Mode := Generate_Object;\n \n       --  We can generate code for a package body unless there are subunits\n       --  missing (note that we always generate code for generic units, which\n       --  is a change from some earlier versions of GNAT).\n \n-      elsif Main_Kind = N_Package_Body and then not Subunits_Missing then\n+      elsif Main_Unit_Kind = N_Package_Body and then not Subunits_Missing then\n          Back_End_Mode := Generate_Object;\n \n       --  We can generate code for a package declaration or a subprogram\n       --  declaration only if it does not required a body.\n \n-      elsif Nkind_In (Main_Kind, N_Package_Declaration,\n-                                 N_Subprogram_Declaration)\n+      elsif Nkind_In (Main_Unit_Kind, N_Package_Declaration,\n+                                      N_Subprogram_Declaration)\n         and then\n           (not Body_Required (Main_Unit_Node)\n              or else Distribution_Stub_Mode = Generate_Caller_Stub_Body)\n@@ -1183,24 +1190,24 @@ begin\n       --  We can generate code for a generic package declaration of a generic\n       --  subprogram declaration only if does not require a body.\n \n-      elsif Nkind_In (Main_Kind, N_Generic_Package_Declaration,\n-                                 N_Generic_Subprogram_Declaration)\n+      elsif Nkind_In (Main_Unit_Kind, N_Generic_Package_Declaration,\n+                                      N_Generic_Subprogram_Declaration)\n         and then not Body_Required (Main_Unit_Node)\n       then\n          Back_End_Mode := Generate_Object;\n \n       --  Compilation units that are renamings do not require bodies, so we can\n       --  generate code for them.\n \n-      elsif Nkind_In (Main_Kind, N_Package_Renaming_Declaration,\n-                                 N_Subprogram_Renaming_Declaration)\n+      elsif Nkind_In (Main_Unit_Kind, N_Package_Renaming_Declaration,\n+                                      N_Subprogram_Renaming_Declaration)\n       then\n          Back_End_Mode := Generate_Object;\n \n       --  Compilation units that are generic renamings do not require bodies\n       --  so we can generate code for them.\n \n-      elsif Main_Kind in N_Generic_Renaming_Declaration then\n+      elsif Main_Unit_Kind in N_Generic_Renaming_Declaration then\n          Back_End_Mode := Generate_Object;\n \n       --  It is not an error to analyze in CodePeer mode a spec which requires\n@@ -1240,45 +1247,61 @@ begin\n       --  generate code).\n \n       if Back_End_Mode = Skip then\n-         Set_Standard_Error;\n-         Write_Str (\"cannot generate code for file \");\n-         Write_Name (Unit_File_Name (Main_Unit));\n \n-         if Subunits_Missing then\n-            Write_Str (\" (missing subunits)\");\n-            Write_Eol;\n+         --  An ignored Ghost unit is rewritten into a null statement because\n+         --  it must not produce an ALI or object file. Do not emit any errors\n+         --  related to code generation because the unit does not exist.\n \n-            --  Force generation of ALI file, for backward compatibility\n+         if Main_Unit_Kind = N_Null_Statement\n+           and then Is_Ignored_Ghost_Node\n+                      (Original_Node (Unit (Main_Unit_Node)))\n+         then\n+            null;\n \n-            Opt.Force_ALI_Tree_File := True;\n+         --  Otherwise the unit is missing a crucial piece that prevents code\n+         --  generation.\n \n-         elsif Main_Kind = N_Subunit then\n-            Write_Str (\" (subunit)\");\n-            Write_Eol;\n+         else\n+            Set_Standard_Error;\n+            Write_Str (\"cannot generate code for file \");\n+            Write_Name (Unit_File_Name (Main_Unit));\n \n-            --  Force generation of ALI file, for backward compatibility\n+            if Subunits_Missing then\n+               Write_Str (\" (missing subunits)\");\n+               Write_Eol;\n \n-            Opt.Force_ALI_Tree_File := True;\n+               --  Force generation of ALI file, for backward compatibility\n \n-         elsif Main_Kind = N_Subprogram_Declaration then\n-            Write_Str (\" (subprogram spec)\");\n-            Write_Eol;\n+               Opt.Force_ALI_Tree_File := True;\n \n-         --  Generic package body in GNAT implementation mode\n+            elsif Main_Unit_Kind = N_Subunit then\n+               Write_Str (\" (subunit)\");\n+               Write_Eol;\n \n-         elsif Main_Kind = N_Package_Body and then GNAT_Mode then\n-            Write_Str (\" (predefined generic)\");\n-            Write_Eol;\n+               --  Force generation of ALI file, for backward compatibility\n \n-            --  Force generation of ALI file, for backward compatibility\n+               Opt.Force_ALI_Tree_File := True;\n \n-            Opt.Force_ALI_Tree_File := True;\n+            elsif Main_Unit_Kind = N_Subprogram_Declaration then\n+               Write_Str (\" (subprogram spec)\");\n+               Write_Eol;\n \n-         --  Only other case is a package spec\n+            --  Generic package body in GNAT implementation mode\n \n-         else\n-            Write_Str (\" (package spec)\");\n-            Write_Eol;\n+            elsif Main_Unit_Kind = N_Package_Body and then GNAT_Mode then\n+               Write_Str (\" (predefined generic)\");\n+               Write_Eol;\n+\n+               --  Force generation of ALI file, for backward compatibility\n+\n+               Opt.Force_ALI_Tree_File := True;\n+\n+            --  Only other case is a package spec\n+\n+            else\n+               Write_Str (\" (package spec)\");\n+               Write_Eol;\n+            end if;\n          end if;\n \n          Set_Standard_Output;\n@@ -1320,7 +1343,7 @@ begin\n       if Back_End_Mode = Declarations_Only\n         and then\n           (not (Back_Annotate_Rep_Info or Generate_SCIL or GNATprove_Mode)\n-            or else Main_Kind = N_Subunit\n+            or else Main_Unit_Kind = N_Subunit\n             or else Frontend_Layout_On_Target\n             or else ASIS_GNSA_Mode)\n       then\n@@ -1465,11 +1488,10 @@ begin\n       when Program_Error =>\n          Comperr.Compiler_Abort (\"Program_Error\");\n \n-      when Storage_Error =>\n-\n-         --  Assume this is a bug. If it is real, the message will in any case\n-         --  say Storage_Error, giving a strong hint.\n+      --  Assume this is a bug. If it is real, the message will in any case\n+      --  say Storage_Error, giving a strong hint.\n \n+      when Storage_Error =>\n          Comperr.Compiler_Abort (\"Storage_Error\");\n \n       when Unrecoverable_Error =>\n@@ -1482,7 +1504,7 @@ begin\n    <<End_Of_Program>>\n    null;\n \n-   --  The outer exception handles an unrecoverable error\n+--  The outer exception handler handles an unrecoverable error\n \n exception\n    when Unrecoverable_Error =>"}, {"sha": "0ba9f9ad245d28de0e192070fb3c2ffe722b90c0", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -445,7 +445,14 @@ package body Lib is\n          --  Prevent looping forever\n \n          if Counter > Max_Iterations then\n-            raise Program_Error;\n+            --  ??? Not quite right, but return a value to be able to generate\n+            --  SCIL files and hope for the best.\n+\n+            if CodePeer_Mode then\n+               return No;\n+            else\n+               raise Program_Error;\n+            end if;\n          end if;\n       end loop;\n    end Check_Same_Extended_Unit;"}, {"sha": "aecf7d4355d27f745483792885477b2056a1e1ae", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -14879,8 +14879,8 @@ package body Sem_Ch12 is\n                     and then Is_Global (Entity (Orig_N2_Parent))\n                   then\n                      N2 := Aux_N2;\n-                     Set_Associated_Node (Parent (N),\n-                       Original_Node (Parent (N2)));\n+                     Set_Associated_Node\n+                       (Parent (N), Original_Node (Parent (N2)));\n \n                   --  Common case\n "}, {"sha": "89a17c8755f0ed6623b5b183f7a3fbfeee4a6a4c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -6618,7 +6618,13 @@ package body Sem_Ch13 is\n    -----------------------------------\n \n    procedure Analyze_Freeze_Generic_Entity (N : Node_Id) is\n+      E : constant Entity_Id := Entity (N);\n+\n    begin\n+      if not Is_Frozen (E) and then Has_Delayed_Aspects (E) then\n+         Analyze_Aspects_At_Freeze_Point (E);\n+      end if;\n+\n       Freeze_Entity_Checks (N);\n    end Analyze_Freeze_Generic_Entity;\n \n@@ -10789,20 +10795,10 @@ package body Sem_Ch13 is\n       --  the subtype name in the saved expression so that they will not cause\n       --  trouble in the preanalysis.\n \n-      --  Case 1: Generic case. For freezing nodes of types defined in generics\n-      --  we must perform the analysis of its aspects; needed to ensure that\n-      --  they have the minimum decoration needed by ASIS.\n-\n-      if not Non_Generic_Case then\n-         if Has_Delayed_Aspects (E) then\n-            Push_Scope (Scope (E));\n-            Analyze_Aspects_At_Freeze_Point (E);\n-            Pop_Scope;\n-         end if;\n-\n-      --  Case 2: Non-generic case\n+      --  This is also not needed in the generic case\n \n-      elsif Has_Delayed_Aspects (E)\n+      if Non_Generic_Case\n+        and then Has_Delayed_Aspects (E)\n         and then Scope (E) = Current_Scope\n       then\n          --  Retrieve the visibility to the discriminants in order to properly"}, {"sha": "45ad8d63a1166d0aa5d0a65788aac0a9ab037936", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -3495,11 +3495,11 @@ package body Sem_Ch4 is\n                --      generic\n                --         type Inner_T is private;\n                --         with function Func (Formal : Inner_T)   --  (1)\n-               --                            return ... is <>;\n+               --           return ... is <>;\n \n                --      package Inner_Gen is\n                --         function Inner_Func (Formal : Inner_T)  --  (2)\n-               --                             return ... is (Func (Formal));\n+               --           return ... is (Func (Formal));\n                --      end Inner_Gen;\n                --   end Outer_Generic;\n \n@@ -3509,15 +3509,15 @@ package body Sem_Ch4 is\n                --  In the example above, the type of parameter\n                --  Inner_Func.Formal at (2) is incompatible with the type of\n                --  Func.Formal at (1) in the context of instantiations\n-               --  Outer_Inst and Inner_Inst. In reality both types are\n-               --  generic actual subtypes renaming base type Actual_T as\n-               --  part of the generic prologues for the instantiations.\n-\n-               --  Recognize this case and add a type conversion to allow\n-               --  this kind of generic actual subtype conformance. Note that\n-               --  this is done only when the call is non-overloaded because\n-               --  the resolution mechanism already has the means to\n-               --  disambiguate similar cases.\n+               --  Outer_Inst and Inner_Inst. In reality both types are generic\n+               --  actual subtypes renaming base type Actual_T as part of the\n+               --  generic prologues for the instantiations.\n+\n+               --  Recognize this case and add a type conversion to allow this\n+               --  kind of generic actual subtype conformance. Note that this\n+               --  is done only when the call is non-overloaded because the\n+               --  resolution mechanism already has the means to disambiguate\n+               --  similar cases.\n \n                elsif not Is_Overloaded (Name (N))\n                  and then Is_Type (Etype (Actual))"}, {"sha": "86083eb69550eca993da3603053b7e3bd4ed4d15", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -2143,17 +2143,18 @@ package body Sem_Ch6 is\n    --  the subprogram, or to perform conformance checks.\n \n    procedure Analyze_Subprogram_Body_Helper (N : Node_Id) is\n-      Loc          : constant Source_Ptr := Sloc (N);\n-      Body_Spec    : Node_Id             := Specification (N);\n-      Body_Id      : Entity_Id           := Defining_Entity (Body_Spec);\n-      Prev_Id      : constant Entity_Id  := Current_Entity_In_Scope (Body_Id);\n-      Exch_Views   : Elist_Id            := No_Elist;\n-      Desig_View   : Entity_Id           := Empty;\n-      Conformant   : Boolean;\n-      HSS          : Node_Id;\n-      Prot_Typ     : Entity_Id := Empty;\n-      Spec_Id      : Entity_Id;\n-      Spec_Decl    : Node_Id   := Empty;\n+      Body_Spec : Node_Id             := Specification (N);\n+      Body_Id   : Entity_Id           := Defining_Entity (Body_Spec);\n+      Loc       : constant Source_Ptr := Sloc (N);\n+      Prev_Id   : constant Entity_Id  := Current_Entity_In_Scope (Body_Id);\n+\n+      Conformant : Boolean;\n+      Desig_View : Entity_Id := Empty;\n+      Exch_Views : Elist_Id  := No_Elist;\n+      HSS        : Node_Id;\n+      Prot_Typ   : Entity_Id := Empty;\n+      Spec_Decl  : Node_Id   := Empty;\n+      Spec_Id    : Entity_Id;\n \n       Last_Real_Spec_Entity : Entity_Id := Empty;\n       --  When we analyze a separate spec, the entity chain ends up containing"}, {"sha": "314c110fb8d86311343175dc88b8a47f1dbd56a9", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -445,11 +445,24 @@ package body Sem_Eval is\n       --  that an infinity will result.\n \n       if not Is_Static_Expression (N) then\n-         if Is_Floating_Point_Type (T)\n-           and then Is_Out_Of_Range (N, Base_Type (T), Assume_Valid => True)\n-         then\n-            Error_Msg_N\n-              (\"??float value out of range, infinity will be generated\", N);\n+         if Is_Floating_Point_Type (T) then\n+            if Is_Out_Of_Range (N, Base_Type (T), Assume_Valid => True) then\n+               Error_Msg_N\n+                 (\"??float value out of range, infinity will be generated\", N);\n+\n+            --  The literal may be the result of constant-folding of a non-\n+            --  static subexpression of a larger expression (e.g. a conversion\n+            --  of a non-static variable whose value happens to be known). At\n+            --  this point we must reduce the value of the subexpression to a\n+            --  machine number (RM 4.9 (38/2)).\n+\n+            elsif Nkind (N) = N_Real_Literal\n+              and then Nkind (Parent (N)) in N_Subexpr\n+            then\n+               Rewrite (N, New_Copy (N));\n+               Set_Realval\n+                 (N, Machine (Base_Type (T), Realval (N), Round_Even, N));\n+            end if;\n          end if;\n \n          return;"}, {"sha": "c038dc4d799c0e30afc1b8ce6d0b5597febd309f", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -62,11 +62,14 @@ package body Sem_Intr is\n    --  as for Check_Intrinsic_Subprogram (i.e. the entity of the subprogram\n    --  declaration, and the node for the pragma argument, used for messages).\n \n-   procedure Errint (Msg : String; S : Node_Id; N : Node_Id);\n+   procedure Errint\n+     (Msg : String; S : Node_Id; N : Node_Id; Relaxed : Boolean := False);\n    --  Post error message for bad intrinsic, the message itself is posted\n    --  on the appropriate spec node and another message is placed on the\n    --  pragma itself, referring to the spec. S is the node in the spec on\n    --  which the message is to be placed, and N is the pragma argument node.\n+   --  Relaxed is True if the message should not be emitted in\n+   --  Relaxed_RM_Semantics mode.\n \n    ------------------------------\n    -- Check_Exception_Function --\n@@ -432,7 +435,7 @@ package body Sem_Intr is\n       then\n          Errint\n            (\"first argument for shift must have size 8, 16, 32 or 64\",\n-            Ptyp1, N);\n+            Ptyp1, N, Relaxed => True);\n          return;\n \n       elsif Non_Binary_Modulus (Typ1) then\n@@ -450,7 +453,7 @@ package body Sem_Intr is\n       then\n          Errint\n            (\"modular type for shift must have modulus of 2'*'*8, \"\n-            & \"2'*'*16, 2'*'*32, or 2'*'*64\", Ptyp1, N);\n+            & \"2'*'*16, 2'*'*32, or 2'*'*64\", Ptyp1, N, Relaxed => True);\n \n       elsif Etype (Arg1) /= Etype (E) then\n          Errint\n@@ -465,12 +468,13 @@ package body Sem_Intr is\n    -- Errint --\n    ------------\n \n-   procedure Errint (Msg : String; S : Node_Id; N : Node_Id) is\n+   procedure Errint\n+     (Msg : String; S : Node_Id; N : Node_Id; Relaxed : Boolean := False) is\n    begin\n       --  Ignore errors on Intrinsic in Relaxed_RM_Semantics mode where we can\n       --  be more liberal.\n \n-      if not Relaxed_RM_Semantics then\n+      if not (Relaxed and Relaxed_RM_Semantics) then\n          Error_Msg_N (Msg, S);\n          Error_Msg_N (\"incorrect intrinsic subprogram, see spec\", N);\n       end if;"}, {"sha": "3b9d9841f47a0c0622cbaa2e18a3378b543d2aa3", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -9080,6 +9080,14 @@ package body Sem_Prag is\n                   Ghost_Id := Subp;\n                end if;\n \n+            --  Do not issue an error on an unanalyzed subprogram body entity.\n+            --  It may lead to spurious errors on unanalyzed body entities of\n+            --  expression functions, which are not yet marked as ghost, yet\n+            --  identified as the Corresponding_Body of the ghost declaration.\n+\n+            elsif Ekind (Subp) = E_Void then\n+               null;\n+\n             --  Otherwise the subprogram is non-Ghost. It is illegal to mix\n             --  references to Ghost and non-Ghost entities (SPARK RM 6.9).\n "}, {"sha": "e8a22fa64e1ac52049355d10a0742bc1993111f3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -11500,7 +11500,7 @@ package body Sem_Util is\n    ------------------------------------------\n \n    procedure Inspect_Deferred_Constant_Completion (Decls : List_Id) is\n-      Decl   : Node_Id;\n+      Decl : Node_Id;\n \n    begin\n       Decl := First (Decls);"}, {"sha": "d9050959ff2427f1689a27de6b94e9058719622c", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d030f3a45173ca7496c50d47e651638e3ff2f00f/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=d030f3a45173ca7496c50d47e651638e3ff2f00f", "patch": "@@ -314,6 +314,11 @@ package body Sem_Warn is\n             elsif Is_Suspicious_Function_Name (Entity (Name (N))) then\n                return;\n \n+            --  Forget it if function is marked Volatile_Function\n+\n+            elsif Is_Volatile_Function (Entity (Name (N))) then\n+               return;\n+\n             --  Forget it if warnings are suppressed on function entity\n \n             elsif Has_Warnings_Off (Entity (Name (N))) then"}]}