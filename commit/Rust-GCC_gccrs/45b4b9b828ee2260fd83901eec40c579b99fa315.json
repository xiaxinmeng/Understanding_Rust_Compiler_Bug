{"sha": "45b4b9b828ee2260fd83901eec40c579b99fa315", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDViNGI5YjgyOGVlMjI2MGZkODM5MDFlZWM0MGM1NzliOTlmYTMxNQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2015-09-12T00:13:23Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2015-09-12T00:13:23Z"}, "message": "Convert SPARC backend over to LRA.\n\ngcc/\n\n\t* config/sparc/constraints.md: Make \"U\" constraint a real register\n\tconstraint.\n\t* config/sparc/sparc.c (TARGET_LRA_P): Define.\n\t(D_MODES, DF_MODES): Add missing cast.\n\t(TF_MODES, TF_MODES_NO_S): Include T_MODE.\n\t(OF_MODES, OF_MODES_NO_S): Include O_MODE.\n\t(sparc_register_move_cost): Decrease Niagara/UltrsSPARC memory\n\tcost to 8.\n\t* config/sparc/sparc.h (PROMOTE_MODE): Define.\n\t* config/sparc/sparc.md (*movsi_lo_sum, *movsi_high): Do not\n\tprovide these insn when flag_pic.\n\nFrom-SVN: r227701", "tree": {"sha": "a395fd4312e88049565eda0f10320eb1cd26473e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a395fd4312e88049565eda0f10320eb1cd26473e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45b4b9b828ee2260fd83901eec40c579b99fa315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b4b9b828ee2260fd83901eec40c579b99fa315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45b4b9b828ee2260fd83901eec40c579b99fa315", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45b4b9b828ee2260fd83901eec40c579b99fa315/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8500ff57774af2a6b3a08464a735f837a917b677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8500ff57774af2a6b3a08464a735f837a917b677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8500ff57774af2a6b3a08464a735f837a917b677"}], "stats": {"total": 95, "additions": 41, "deletions": 54}, "files": [{"sha": "13804485d42487a25c13fe96ffef8a6ec024e466", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b4b9b828ee2260fd83901eec40c579b99fa315/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b4b9b828ee2260fd83901eec40c579b99fa315/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45b4b9b828ee2260fd83901eec40c579b99fa315", "patch": "@@ -1,3 +1,17 @@\n+2015-09-11  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/constraints.md: Make \"U\" constraint a real register\n+\tconstraint.\n+\t* config/sparc/sparc.c (TARGET_LRA_P): Define.\n+\t(D_MODES, DF_MODES): Add missing cast.\n+\t(TF_MODES, TF_MODES_NO_S): Include T_MODE.\n+\t(OF_MODES, OF_MODES_NO_S): Include O_MODE.\n+\t(sparc_register_move_cost): Decrease Niagara/UltrsSPARC memory\n+\tcost to 8.\n+\t* config/sparc/sparc.h (PROMOTE_MODE): Define.\n+\t* config/sparc/sparc.md (*movsi_lo_sum, *movsi_high): Do not\n+\tprovide these insn when flag_pic.\n+\n 2015-09-11  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/47679"}, {"sha": "7a188795d4396819a72055136b489f81cbe33c58", "filename": "gcc/config/sparc/constraints.md", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b4b9b828ee2260fd83901eec40c579b99fa315/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b4b9b828ee2260fd83901eec40c579b99fa315/gcc%2Fconfig%2Fsparc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fconstraints.md?ref=45b4b9b828ee2260fd83901eec40c579b99fa315", "patch": "@@ -44,6 +44,8 @@\n (define_register_constraint \"h\" \"(TARGET_V9 && TARGET_V8PLUS ? I64_REGS : NO_REGS)\"\n  \"64-bit global or out register in V8+ mode\")\n \n+(define_register_constraint \"U\" \"(TARGET_ARCH32 ? GENERAL_REGS : NO_REGS)\")\n+\n ;; Floating-point constant constraints\n \n (define_constraint \"G\"\n@@ -135,51 +137,6 @@\n       (match_code \"mem\")\n       (match_test \"memory_ok_for_ldd (op)\")))\n \n-;; This awkward register constraint is necessary because it is not\n-;; possible to express the \"must be even numbered register\" condition\n-;; using register classes.  The problem is that membership in a\n-;; register class requires that all registers of a multi-regno\n-;; register be included in the set.  It is add_to_hard_reg_set\n-;; and in_hard_reg_set_p which populate and test regsets with these\n-;; semantics.\n-;;\n-;; So this means that we would have to put both the even and odd\n-;; register into the register class, which would not restrict things\n-;; at all.\n-;;\n-;; Using a combination of GENERAL_REGS and HARD_REGNO_MODE_OK is not a\n-;; full solution either.  In fact, even though IRA uses the macro\n-;; HARD_REGNO_MODE_OK to calculate which registers are prohibited from\n-;; use in certain modes, it still can allocate an odd hard register\n-;; for DImode values.  This is due to how IRA populates the table\n-;; ira_useful_class_mode_regs[][].  It suffers from the same problem\n-;; as using a register class to describe this restriction.  Namely, it\n-;; sets both the odd and even part of an even register pair in the\n-;; regset.  Therefore IRA can and will allocate odd registers for\n-;; DImode values on 32-bit.\n-;;\n-;; There are legitimate cases where DImode values can end up in odd\n-;; hard registers, the most notable example is argument passing.\n-;;\n-;; What saves us is reload and the DImode splitters.  Both are\n-;; necessary.  The odd register splitters cannot match if, for\n-;; example, we have a non-offsetable MEM.  Reload will notice this\n-;; case and reload the address into a single hard register.\n-;;\n-;; The real downfall of this awkward register constraint is that it does\n-;; not evaluate to a true register class like a bonafide use of\n-;; define_register_constraint would.  This currently means that we cannot\n-;; use LRA on Sparc, since the constraint processing of LRA really depends\n-;; upon whether an extra constraint is for registers or not.  It uses\n-;; reg_class_for_constraint, and checks it against NO_REGS.\n-(define_constraint \"U\"\n- \"Pseudo-register or hard even-numbered integer register\"\n- (and (match_test \"TARGET_ARCH32\")\n-      (match_code \"reg\")\n-      (ior (match_test \"REGNO (op) < FIRST_PSEUDO_REGISTER\")\n-\t   (not (match_test \"reload_in_progress && reg_renumber [REGNO (op)] < 0\")))\n-      (match_test \"register_ok_for_ldd (op)\")))\n-\n ;; Equivalent to 'T' but available in 64-bit mode\n (define_memory_constraint \"W\"\n  \"Memory reference for 'e' constraint floating-point register\""}, {"sha": "b41800cb5ab4635eb1e111900b31b102ecad4ec2", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b4b9b828ee2260fd83901eec40c579b99fa315/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b4b9b828ee2260fd83901eec40c579b99fa315/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=45b4b9b828ee2260fd83901eec40c579b99fa315", "patch": "@@ -808,6 +808,9 @@ char sparc_hard_reg_printed[8];\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE sparc_can_eliminate\n \n+#undef TARGET_LRA_P\n+#define TARGET_LRA_P hook_bool_void_true\n+\n #undef  TARGET_PREFERRED_RELOAD_CLASS\n #define TARGET_PREFERRED_RELOAD_CLASS sparc_preferred_reload_class\n \n@@ -4691,7 +4694,7 @@ enum sparc_mode_class {\n   ((1 << (int) H_MODE) | (1 << (int) S_MODE) | (1 << (int) SF_MODE))\n \n /* Modes for double-word and smaller quantities.  */\n-#define D_MODES (S_MODES | (1 << (int) D_MODE) | (1 << DF_MODE))\n+#define D_MODES (S_MODES | (1 << (int) D_MODE) | (1 << (int) DF_MODE))\n \n /* Modes for quad-word and smaller quantities.  */\n #define T_MODES (D_MODES | (1 << (int) T_MODE) | (1 << (int) TF_MODE))\n@@ -4703,22 +4706,24 @@ enum sparc_mode_class {\n #define SF_MODES ((1 << (int) S_MODE) | (1 << (int) SF_MODE))\n \n /* Modes for double-float and smaller quantities.  */\n-#define DF_MODES (SF_MODES | (1 << (int) D_MODE) | (1 << DF_MODE))\n+#define DF_MODES (SF_MODES | (1 << (int) D_MODE) | (1 << (int) DF_MODE))\n \n /* Modes for quad-float and smaller quantities.  */\n-#define TF_MODES (DF_MODES | (1 << (int) TF_MODE))\n+#define TF_MODES (DF_MODES | (1 << (int) T_MODE) | (1 << (int) TF_MODE))\n \n /* Modes for quad-float pairs and smaller quantities.  */\n-#define OF_MODES (TF_MODES | (1 << (int) OF_MODE))\n+#define OF_MODES (TF_MODES | (1 << (int) O_MODE) | (1 << (int) OF_MODE))\n \n /* Modes for double-float only quantities.  */\n #define DF_MODES_NO_S ((1 << (int) D_MODE) | (1 << (int) DF_MODE))\n \n /* Modes for quad-float and double-float only quantities.  */\n-#define TF_MODES_NO_S (DF_MODES_NO_S | (1 << (int) TF_MODE))\n+#define TF_MODES_NO_S \\\n+  (DF_MODES_NO_S | (1 << (int) T_MODE) | (1 << (int) TF_MODE))\n \n /* Modes for quad-float pairs and double-float only quantities.  */\n-#define OF_MODES_NO_S (TF_MODES_NO_S | (1 << (int) OF_MODE))\n+#define OF_MODES_NO_S \\\n+  (TF_MODES_NO_S | (1 << (int) O_MODE) | (1 << (int) OF_MODE))\n \n /* Modes for condition codes.  */\n #define CC_MODES (1 << (int) CC_MODE)\n@@ -11188,7 +11193,7 @@ sparc_register_move_cost (machine_mode mode ATTRIBUTE_UNUSED,\n \t  || sparc_cpu == PROCESSOR_NIAGARA2\n \t  || sparc_cpu == PROCESSOR_NIAGARA3\n \t  || sparc_cpu == PROCESSOR_NIAGARA4)\n-\treturn 12;\n+\treturn 8;\n \n       return 6;\n     }"}, {"sha": "83436715c4c680f8d73da81c5f40129f31a3dc75", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b4b9b828ee2260fd83901eec40c579b99fa315/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b4b9b828ee2260fd83901eec40c579b99fa315/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=45b4b9b828ee2260fd83901eec40c579b99fa315", "patch": "@@ -452,6 +452,17 @@ extern enum cmodel sparc_cmodel;\n \f\n /* target machine storage layout */\n \n+/* Define this macro if it is advisable to hold scalars in registers\n+   in a wider mode than that declared by the program.  In such cases,\n+   the value is constrained to be within the bounds of the declared\n+   type, but kept valid in the wider mode.  The signedness of the\n+   extension may differ from that of the type.  */\n+\n+#define PROMOTE_MODE(MODE,UNSIGNEDP,TYPE)\t\\\n+  if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n+      && GET_MODE_SIZE (MODE) < (TARGET_ARCH64 ? 8 : 4)) \\\n+    (MODE) = TARGET_ARCH64 ? DImode : SImode;\n+\n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.  */\n #define BITS_BIG_ENDIAN 1"}, {"sha": "f514d9fbcbe628ebbe0865d62c10e202b7587310", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45b4b9b828ee2260fd83901eec40c579b99fa315/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45b4b9b828ee2260fd83901eec40c579b99fa315/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=45b4b9b828ee2260fd83901eec40c579b99fa315", "patch": "@@ -1467,13 +1467,13 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n                    (match_operand:SI 2 \"immediate_operand\" \"in\")))]\n-  \"\"\n+  \"! flag_pic\"\n   \"or\\t%1, %%lo(%a2), %0\")\n \n (define_insn \"*movsi_high\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(high:SI (match_operand:SI 1 \"immediate_operand\" \"in\")))]\n-  \"\"\n+  \"! flag_pic\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n ;; The next two patterns must wrap the SYMBOL_REF in an UNSPEC"}]}