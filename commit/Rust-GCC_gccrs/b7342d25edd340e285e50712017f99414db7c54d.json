{"sha": "b7342d25edd340e285e50712017f99414db7c54d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjczNDJkMjVlZGQzNDBlMjg1ZTUwNzEyMDE3Zjk5NDE0ZGI3YzU0ZA==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-06-04T16:22:17Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-06-04T16:22:17Z"}, "message": "AArch64 - Improve MOVI handling (5/5)\n\nFrom-SVN: r199658", "tree": {"sha": "598ec1ab3255ae219b9c423346f9765600045a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/598ec1ab3255ae219b9c423346f9765600045a5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7342d25edd340e285e50712017f99414db7c54d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7342d25edd340e285e50712017f99414db7c54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7342d25edd340e285e50712017f99414db7c54d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7342d25edd340e285e50712017f99414db7c54d/comments", "author": null, "committer": null, "parents": [{"sha": "81c2dfb933fc8a33f96ac365a7740e7794bf86df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c2dfb933fc8a33f96ac365a7740e7794bf86df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81c2dfb933fc8a33f96ac365a7740e7794bf86df"}], "stats": {"total": 144, "additions": 113, "deletions": 31}, "files": [{"sha": "9e2740990bf4263a8078ed7821b79a60c219fb07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7342d25edd340e285e50712017f99414db7c54d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7342d25edd340e285e50712017f99414db7c54d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7342d25edd340e285e50712017f99414db7c54d", "patch": "@@ -1,3 +1,13 @@\n+2013-06-04  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*mov<mode>_aarch64): Call\n+\tinto function to generate MOVI instruction.\n+\t* config/aarch64/aarch64.c (aarch64_simd_container_mode):\n+\tNew function.\n+\t(aarch64_preferred_simd_mode): Turn into wrapper.\n+\t(aarch64_output_scalar_simd_mov_immediate): New function.\n+\t* config/aarch64/aarch64-protos.h: Add prototype for above.\n+\n 2013-06-04  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/aarch64/aarch64.c (simd_immediate_info): Remove"}, {"sha": "8e099bf7f919d94f557f9500884e5f77aaeb632e", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7342d25edd340e285e50712017f99414db7c54d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7342d25edd340e285e50712017f99414db7c54d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=b7342d25edd340e285e50712017f99414db7c54d", "patch": "@@ -149,6 +149,7 @@ bool aarch64_legitimate_pic_operand_p (rtx);\n bool aarch64_move_imm (HOST_WIDE_INT, enum machine_mode);\n bool aarch64_mov_operand_p (rtx, enum aarch64_symbol_context,\n \t\t\t    enum machine_mode);\n+char *aarch64_output_scalar_simd_mov_immediate (rtx, enum machine_mode);\n char *aarch64_output_simd_mov_immediate (rtx, enum machine_mode, unsigned);\n bool aarch64_pad_arg_upward (enum machine_mode, const_tree);\n bool aarch64_pad_reg_upward (enum machine_mode, const_tree, bool);"}, {"sha": "4471ee1be1b67c3cbccc36db7ccd467ce876790d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7342d25edd340e285e50712017f99414db7c54d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7342d25edd340e285e50712017f99414db7c54d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b7342d25edd340e285e50712017f99414db7c54d", "patch": "@@ -5989,32 +5989,57 @@ aarch64_vector_mode_supported_p (enum machine_mode mode)\n   return false;\n }\n \n-/* Return quad mode as the preferred SIMD mode.  */\n+/* Return appropriate SIMD container\n+   for MODE within a vector of WIDTH bits.  */\n static enum machine_mode\n-aarch64_preferred_simd_mode (enum machine_mode mode)\n+aarch64_simd_container_mode (enum machine_mode mode, unsigned width)\n {\n+  gcc_assert (width == 64 || width == 128);\n   if (TARGET_SIMD)\n-    switch (mode)\n-      {\n-      case DFmode:\n-        return V2DFmode;\n-      case SFmode:\n-        return V4SFmode;\n-      case SImode:\n-        return V4SImode;\n-      case HImode:\n-        return V8HImode;\n-      case QImode:\n-        return V16QImode;\n-      case DImode:\n-          return V2DImode;\n-        break;\n-\n-      default:;\n-      }\n+    {\n+      if (width == 128)\n+\tswitch (mode)\n+\t  {\n+\t  case DFmode:\n+\t    return V2DFmode;\n+\t  case SFmode:\n+\t    return V4SFmode;\n+\t  case SImode:\n+\t    return V4SImode;\n+\t  case HImode:\n+\t    return V8HImode;\n+\t  case QImode:\n+\t    return V16QImode;\n+\t  case DImode:\n+\t    return V2DImode;\n+\t  default:\n+\t    break;\n+\t  }\n+      else\n+\tswitch (mode)\n+\t  {\n+\t  case SFmode:\n+\t    return V2SFmode;\n+\t  case SImode:\n+\t    return V2SImode;\n+\t  case HImode:\n+\t    return V4HImode;\n+\t  case QImode:\n+\t    return V8QImode;\n+\t  default:\n+\t    break;\n+\t  }\n+    }\n   return word_mode;\n }\n \n+/* Return 128-bit container as the preferred SIMD mode for MODE.  */\n+static enum machine_mode\n+aarch64_preferred_simd_mode (enum machine_mode mode)\n+{\n+  return aarch64_simd_container_mode (mode, 128);\n+}\n+\n /* Return the bitmask of possible vector sizes for the vectorizer\n    to iterate over.  */\n static unsigned int\n@@ -7282,6 +7307,18 @@ aarch64_output_simd_mov_immediate (rtx const_vector,\n   return templ;\n }\n \n+char*\n+aarch64_output_scalar_simd_mov_immediate (rtx immediate,\n+\t\t\t\t\t  enum machine_mode mode)\n+{\n+  enum machine_mode vmode;\n+\n+  gcc_assert (!VECTOR_MODE_P (mode));\n+  vmode = aarch64_simd_container_mode (mode, 64);\n+  rtx v_op = aarch64_simd_gen_const_vector_dup (vmode, INTVAL (immediate));\n+  return aarch64_output_simd_mov_immediate (v_op, vmode, 64);\n+}\n+\n /* Split operands into moves from op[1] + op[2] into op[0].  */\n \n void"}, {"sha": "e88e5be894e92d378583ed300ffb1a09d0367738", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7342d25edd340e285e50712017f99414db7c54d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7342d25edd340e285e50712017f99414db7c54d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=b7342d25edd340e285e50712017f99414db7c54d", "patch": "@@ -774,17 +774,34 @@\n         (match_operand:SHORT 1 \"general_operand\"      \" r,M,D<hq>,m, m,rZ,*w,*w, r,*w\"))]\n   \"(register_operand (operands[0], <MODE>mode)\n     || aarch64_reg_or_zero (operands[1], <MODE>mode))\"\n-  \"@\n-   mov\\\\t%w0, %w1\n-   mov\\\\t%w0, %1\n-   movi\\\\t%0.<Vallxd>, %1\n-   ldr<size>\\\\t%w0, %1\n-   ldr\\\\t%<size>0, %1\n-   str<size>\\\\t%w1, %0\n-   str\\\\t%<size>1, %0\n-   umov\\\\t%w0, %1.<v>[0]\n-   dup\\\\t%0.<Vallxd>, %w1\n-   dup\\\\t%0, %1.<v>[0]\"\n+{\n+   switch (which_alternative)\n+     {\n+     case 0:\n+       return \"mov\\t%w0, %w1\";\n+     case 1:\n+       return \"mov\\t%w0, %1\";\n+     case 2:\n+       return aarch64_output_scalar_simd_mov_immediate (operands[1],\n+\t\t\t\t\t\t\t<MODE>mode);\n+     case 3:\n+       return \"ldr<size>\\t%w0, %1\";\n+     case 4:\n+       return \"ldr\\t%<size>0, %1\";\n+     case 5:\n+       return \"str<size>\\t%w1, %0\";\n+     case 6:\n+       return \"str\\t%<size>1, %0\";\n+     case 7:\n+       return \"umov\\t%w0, %1.<v>[0]\";\n+     case 8:\n+       return \"dup\\t%0.<Vallxd>, %w1\";\n+     case 9:\n+       return \"dup\\t%0, %1.<v>[0]\";\n+     default:\n+       gcc_unreachable ();\n+     }\n+}\n   [(set_attr \"v8type\" \"move,alu,alu,load1,load1,store1,store1,*,*,*\")\n    (set_attr \"simd_type\" \"*,*,simd_move_imm,*,*,*,*,simd_movgp,simd_dupgp,simd_dup\")\n    (set_attr \"simd\" \"*,*,yes,*,*,*,*,yes,yes,yes\")"}, {"sha": "451a488fc4e7089ad37048215cbf7727d7d7cca9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7342d25edd340e285e50712017f99414db7c54d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7342d25edd340e285e50712017f99414db7c54d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7342d25edd340e285e50712017f99414db7c54d", "patch": "@@ -1,3 +1,7 @@\n+2013-06-04  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc.target/aarch64/movi_1.c: New test.\n+\n 2013-06-04  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/37336"}, {"sha": "e2842b39e02413e4b333a157405f7dcf605071ce", "filename": "gcc/testsuite/gcc.target/aarch64/movi_1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7342d25edd340e285e50712017f99414db7c54d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovi_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7342d25edd340e285e50712017f99414db7c54d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovi_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovi_1.c?ref=b7342d25edd340e285e50712017f99414db7c54d", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void\n+dummy (short* b)\n+{\n+  /* { dg-final { scan-assembler \"movi\\tv\\[0-9\\]+\\.4h, 0x4, lsl 8\" } } */\n+  /* { dg-final { scan-assembler-not \"movi\\tv\\[0-9\\]+\\.4h, 0x400\" } } */\n+  /* { dg-final { scan-assembler-not \"movi\\tv\\[0-9\\]+\\.4h, 1024\" } } */\n+  register short x asm (\"h8\") = 1024;\n+  asm volatile (\"\" : : \"w\" (x));\n+  *b = x;\n+}"}]}