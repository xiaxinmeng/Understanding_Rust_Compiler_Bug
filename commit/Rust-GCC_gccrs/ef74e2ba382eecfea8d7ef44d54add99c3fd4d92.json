{"sha": "ef74e2ba382eecfea8d7ef44d54add99c3fd4d92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3NGUyYmEzODJlZWNmZWE4ZDdlZjQ0ZDU0YWRkOTljM2ZkNGQ5Mg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-07-21T22:57:59Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-07-21T22:57:59Z"}, "message": "Infer types based on lb and ub.\n\n2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR middle-end/47654\n\tPR middle-end/49649\n\t* graphite-clast-to-gimple.c (type_for_clast_term): Pass v1 and v2\n\tin parameter.  Initialize v1 and v2 based on the values returned\n\tby clast_name_to_lb_ub.\n\t(type_for_clast_red): Pass v1 and v2 in parameter, and set their\n\tvalues.\n\t(type_for_clast_bin): Same.\n\t(type_for_clast_expr): Same.\n\t(type_for_clast_eq): Update calls to type_for_clast_expr.\n\t(type_for_clast_for): Same.\n\t(build_iv_mapping): Same.\n\t* graphite-ppl.h (value_min): New.\n\n\t* gcc.dg/graphite/run-id-pr47654.c: New.\n\nFrom-SVN: r176605", "tree": {"sha": "ab76d08fcdd37605200b9cce9a27a5b59935ea1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab76d08fcdd37605200b9cce9a27a5b59935ea1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f2ffea18c756f4c07e35e771739319f515711e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f2ffea18c756f4c07e35e771739319f515711e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f2ffea18c756f4c07e35e771739319f515711e"}], "stats": {"total": 241, "additions": 204, "deletions": 37}, "files": [{"sha": "9cfa21b5ef7639abc6d69cb96afedafbc22624d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef74e2ba382eecfea8d7ef44d54add99c3fd4d92", "patch": "@@ -1,3 +1,19 @@\n+2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/47654\n+\tPR middle-end/49649\n+\t* graphite-clast-to-gimple.c (type_for_clast_term): Pass v1 and v2\n+\tin parameter.  Initialize v1 and v2 based on the values returned\n+\tby clast_name_to_lb_ub.\n+\t(type_for_clast_red): Pass v1 and v2 in parameter, and set their\n+\tvalues.\n+\t(type_for_clast_bin): Same.\n+\t(type_for_clast_expr): Same.\n+\t(type_for_clast_eq): Update calls to type_for_clast_expr.\n+\t(type_for_clast_for): Same.\n+\t(build_iv_mapping): Same.\n+\t* graphite-ppl.h (value_min): New.\n+\n 2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-clast-to-gimple.c (type_for_interval): Generate signed"}, {"sha": "ddf6d3d7d271b3a6fae047e3af97cb319106a43c", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 147, "deletions": 37, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=ef74e2ba382eecfea8d7ef44d54add99c3fd4d92", "patch": "@@ -488,79 +488,164 @@ type_for_value (mpz_t val)\n   return type_for_interval (val, val);\n }\n \n-/* Return the type for the clast_term T used in STMT.  */\n+/* Return the type for the clast_term T.  Initializes V1 and V2 to the\n+   bounds of the term.  */\n \n static tree\n-type_for_clast_term (struct clast_term *t, ivs_params_p ip)\n+type_for_clast_term (struct clast_term *t, ivs_params_p ip, mpz_t v1, mpz_t v2)\n {\n+  clast_name_p name = t->var;\n+  bool found = false;\n+\n   gcc_assert (t->expr.type == clast_expr_term);\n \n-  if (!t->var)\n-    return type_for_value (t->val);\n+  if (!name)\n+    {\n+      mpz_set (v1, t->val);\n+      mpz_set (v2, t->val);\n+      return type_for_value (t->val);\n+    }\n+\n+  if (ip->params && ip->params_index)\n+    found = clast_name_to_lb_ub (name, ip->params_index, v1, v2);\n \n-  return TREE_TYPE (clast_name_to_gcc (t->var, ip));\n+  if (!found)\n+    {\n+      gcc_assert (*(ip->newivs) && ip->newivs_index);\n+      found = clast_name_to_lb_ub (name, ip->newivs_index, v1, v2);\n+      gcc_assert (found);\n+    }\n+\n+  mpz_mul (v1, v1, t->val);\n+  mpz_mul (v2, v2, t->val);\n+\n+  return TREE_TYPE (clast_name_to_gcc (name, ip));\n }\n \n static tree\n-type_for_clast_expr (struct clast_expr *, ivs_params_p);\n+type_for_clast_expr (struct clast_expr *, ivs_params_p, mpz_t, mpz_t);\n \n-/* Return the type for the clast_reduction R used in STMT.  */\n+/* Return the type for the clast_reduction R.  Initializes V1 and V2\n+   to the bounds of the reduction expression.  */\n \n static tree\n-type_for_clast_red (struct clast_reduction *r, ivs_params_p ip)\n+type_for_clast_red (struct clast_reduction *r, ivs_params_p ip,\n+\t\t    mpz_t v1, mpz_t v2)\n {\n   int i;\n-  tree type = NULL_TREE;\n+  tree type = type_for_clast_expr (r->elts[0], ip, v1, v2);\n+  mpz_t b1, b2, m1, m2;\n \n   if (r->n == 1)\n-    return type_for_clast_expr (r->elts[0], ip);\n-\n-  switch (r->type)\n-    {\n-    case clast_red_sum:\n-    case clast_red_min:\n-    case clast_red_max:\n-      type = type_for_clast_expr (r->elts[0], ip);\n-      for (i = 1; i < r->n; i++)\n-\ttype = max_precision_type\n-\t  (type, type_for_clast_expr (r->elts[i], ip));\n+    return type;\n \n-      return type;\n+  mpz_init (b1);\n+  mpz_init (b2);\n+  mpz_init (m1);\n+  mpz_init (m2);\n \n-    default:\n-      break;\n+  for (i = 1; i < r->n; i++)\n+    {\n+      tree t = type_for_clast_expr (r->elts[i], ip, b1, b2);\n+      type = max_precision_type (type, t);\n+\n+      switch (r->type)\n+\t{\n+\tcase clast_red_sum:\n+\t  value_min (m1, v1, v2);\n+\t  value_min (m2, b1, b2);\n+\t  mpz_add (v1, m1, m2);\n+\n+\t  value_max (m1, v1, v2);\n+\t  value_max (m2, b1, b2);\n+\t  mpz_add (v2, m1, m2);\n+\t  break;\n+\n+\tcase clast_red_min:\n+\t  value_min (v1, v1, v2);\n+\t  value_min (v2, b1, b2);\n+\t  break;\n+\n+\tcase clast_red_max:\n+\t  value_max (v1, v1, v2);\n+\t  value_max (v2, b1, b2);\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t  break;\n+\t}\n     }\n \n-  gcc_unreachable ();\n-  return NULL_TREE;\n+  mpz_clear (b1);\n+  mpz_clear (b2);\n+  mpz_clear (m1);\n+  mpz_clear (m2);\n+\n+  /* Return a type that can represent the result of the reduction.  */\n+  return max_precision_type (type, type_for_interval (v1, v2));\n }\n \n /* Return the type for the clast_binary B used in STMT.  */\n \n static tree\n-type_for_clast_bin (struct clast_binary *b, ivs_params_p ip)\n+type_for_clast_bin (struct clast_binary *b, ivs_params_p ip, mpz_t v1, mpz_t v2)\n {\n-  tree l = type_for_clast_expr ((struct clast_expr *) b->LHS, ip);\n+  mpz_t one;\n+  tree l = type_for_clast_expr ((struct clast_expr *) b->LHS, ip, v1, v2);\n   tree r = type_for_value (b->RHS);\n-  return max_precision_type (l, r);\n+  tree type = max_precision_type (l, r);\n+\n+  switch (b->type)\n+    {\n+    case clast_bin_fdiv:\n+      mpz_mdiv (v1, v1, b->RHS);\n+      mpz_mdiv (v2, v2, b->RHS);\n+      break;\n+\n+    case clast_bin_cdiv:\n+      mpz_mdiv (v1, v1, b->RHS);\n+      mpz_mdiv (v2, v2, b->RHS);\n+      mpz_init (one);\n+      mpz_add (v1, v1, one);\n+      mpz_add (v2, v2, one);\n+      mpz_clear (one);\n+      break;\n+\n+    case clast_bin_div:\n+      mpz_div (v1, v1, b->RHS);\n+      mpz_div (v2, v2, b->RHS);\n+      break;\n+\n+    case clast_bin_mod:\n+      mpz_mod (v1, v1, b->RHS);\n+      mpz_mod (v2, v2, b->RHS);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  /* Return a type that can represent the result of the reduction.  */\n+  return max_precision_type (type, type_for_interval (v1, v2));\n }\n \n /* Returns the type for the CLAST expression E when used in statement\n    STMT.  */\n \n static tree\n-type_for_clast_expr (struct clast_expr *e, ivs_params_p ip)\n+type_for_clast_expr (struct clast_expr *e, ivs_params_p ip, mpz_t v1, mpz_t v2)\n {\n   switch (e->type)\n     {\n     case clast_expr_term:\n-      return type_for_clast_term ((struct clast_term *) e, ip);\n+      return type_for_clast_term ((struct clast_term *) e, ip, v1, v2);\n \n     case clast_expr_red:\n-      return type_for_clast_red ((struct clast_reduction *) e, ip);\n+      return type_for_clast_red ((struct clast_reduction *) e, ip, v1, v2);\n \n     case clast_expr_bin:\n-      return type_for_clast_bin ((struct clast_binary *) e, ip);\n+      return type_for_clast_bin ((struct clast_binary *) e, ip, v1, v2);\n \n     default:\n       gcc_unreachable ();\n@@ -574,8 +659,17 @@ type_for_clast_expr (struct clast_expr *e, ivs_params_p ip)\n static tree\n type_for_clast_eq (struct clast_equation *cleq, ivs_params_p ip)\n {\n-  tree l = type_for_clast_expr (cleq->LHS, ip);\n-  tree r = type_for_clast_expr (cleq->RHS, ip);\n+  mpz_t v1, v2;\n+  tree l, r;\n+\n+  mpz_init (v1);\n+  mpz_init (v2);\n+\n+  l = type_for_clast_expr (cleq->LHS, ip, v1, v2);\n+  r = type_for_clast_expr (cleq->RHS, ip, v1, v2);\n+\n+  mpz_clear (v1);\n+  mpz_clear (v2);\n   return max_precision_type (l, r);\n }\n \n@@ -727,8 +821,17 @@ clast_get_body_of_loop (struct clast_stmt *stmt)\n static tree\n type_for_clast_for (struct clast_for *stmt_for, ivs_params_p ip)\n {\n-  tree lb_type = type_for_clast_expr (stmt_for->LB, ip);\n-  tree ub_type = type_for_clast_expr (stmt_for->UB, ip);\n+  mpz_t v1, v2;\n+  tree lb_type, ub_type;\n+\n+  mpz_init (v1);\n+  mpz_init (v2);\n+\n+  lb_type = type_for_clast_expr (stmt_for->LB, ip, v1, v2);\n+  ub_type = type_for_clast_expr (stmt_for->UB, ip, v1, v2);\n+\n+  mpz_clear (v1);\n+  mpz_clear (v2);\n \n   return max_precision_type (lb_type, ub_type);\n }\n@@ -784,17 +887,24 @@ build_iv_mapping (VEC (tree, heap) *iv_map, struct clast_user_stmt *user_stmt,\n   CloogStatement *cs = user_stmt->statement;\n   poly_bb_p pbb = (poly_bb_p) cloog_statement_usr (cs);\n   gimple_bb_p gbb = PBB_BLACK_BOX (pbb);\n+  mpz_t v1, v2;\n+\n+  mpz_init (v1);\n+  mpz_init (v2);\n \n   for (t = user_stmt->substitutions; t; t = t->next, depth++)\n     {\n       struct clast_expr *expr = (struct clast_expr *)\n        ((struct clast_assignment *)t)->RHS;\n-      tree type = type_for_clast_expr (expr, ip);\n+      tree type = type_for_clast_expr (expr, ip, v1, v2);\n       tree new_name = clast_to_gcc_expression (type, expr, ip);\n       loop_p old_loop = gbb_loop_at_index (gbb, ip->region, depth);\n \n       VEC_replace (tree, iv_map, old_loop->num, new_name);\n     }\n+\n+  mpz_clear (v1);\n+  mpz_clear (v2);\n }\n \n /* Construct bb_pbb_def with BB and PBB.  */"}, {"sha": "5820e19927dc024b492eb10f08d49eccae61bdc0", "filename": "gcc/graphite-ppl.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/gcc%2Fgraphite-ppl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/gcc%2Fgraphite-ppl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-ppl.h?ref=ef74e2ba382eecfea8d7ef44d54add99c3fd4d92", "patch": "@@ -124,6 +124,17 @@ ppl_set_coef_tree (ppl_Linear_Expression_t e, ppl_dimension_type i, tree x)\n   mpz_clear (v);\n }\n \n+/* Sets RES to the min of V1 and V2.  */\n+\n+static inline void\n+value_min (mpz_t res, mpz_t v1, mpz_t v2)\n+{\n+  if (mpz_cmp (v1, v2) < 0)\n+    mpz_set (res, v1);\n+  else\n+    mpz_set (res, v2);\n+}\n+\n /* Sets RES to the max of V1 and V2.  */\n \n static inline void"}, {"sha": "a63b6474cbb870eafe7732bf72f52071e483a90c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef74e2ba382eecfea8d7ef44d54add99c3fd4d92", "patch": "@@ -1,3 +1,9 @@\n+2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/47654\n+\tPR middle-end/49649\n+\t* gcc.dg/graphite/run-id-pr47654.c: New.\n+\n 2011-07-21  Ian Lance Taylor  <iant@google.com>\n \n \tPR middle-end/49705"}, {"sha": "85b6e8b70f5e853cbf4ff3f342db3d0fa84632fd", "filename": "gcc/testsuite/gcc.dg/graphite/run-id-pr47654.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-pr47654.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef74e2ba382eecfea8d7ef44d54add99c3fd4d92/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-pr47654.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Frun-id-pr47654.c?ref=ef74e2ba382eecfea8d7ef44d54add99c3fd4d92", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-options \"-O -floop-strip-mine\" } */\n+\n+int a[128][40];\n+\n+void __attribute__ ((noinline, noclone))\n+foo (void)\n+{\n+  int i, j;\n+  for (i = 0; i < 40; i++)\n+    for (j = 0; j < 128; j++)\n+      a[j][i] = 4;\n+}\n+\n+int\n+main ()\n+{\n+  int i, j;\n+  foo ();\n+  for (i = 0; i < 40; i++)\n+    for (j = 0; j < 128; j++)\n+      if (a[j][i] != 4)\n+\t__builtin_abort ();\n+  return 0;\n+}"}]}