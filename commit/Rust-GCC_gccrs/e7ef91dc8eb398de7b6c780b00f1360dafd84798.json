{"sha": "e7ef91dc8eb398de7b6c780b00f1360dafd84798", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdlZjkxZGM4ZWIzOThkZTdiNmM3ODBiMDBmMTM2MGRhZmQ4NDc5OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-01-18T07:45:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-01-18T07:45:12Z"}, "message": "re PR rtl-optimization/47299 (Widening multiply optimization generates bad code)\n\n\tPR rtl-optimization/47299\n\t* expr.c (expand_expr_real_2) <case WIDEN_MULT_EXPR>: Don't use\n\tsubtarget.  Use normal multiplication if both operands are\n\tconstants.\n\t* expmed.c (expand_widening_mult): Don't try to optimize constant\n\tmultiplication if op0 has VOIDmode.  Convert op1 constant to mode\n\tbefore using it.\n\n\t* gcc.c-torture/execute/pr47299.c: New test.\n\nFrom-SVN: r168944", "tree": {"sha": "020c8a49163b7cf9347b1c3455970378ec548bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/020c8a49163b7cf9347b1c3455970378ec548bc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7ef91dc8eb398de7b6c780b00f1360dafd84798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ef91dc8eb398de7b6c780b00f1360dafd84798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7ef91dc8eb398de7b6c780b00f1360dafd84798", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7ef91dc8eb398de7b6c780b00f1360dafd84798/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb70168707ecbe4175c069f6c36baa8986a075bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb70168707ecbe4175c069f6c36baa8986a075bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb70168707ecbe4175c069f6c36baa8986a075bd"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "0ed4f0186326624b21f5fa145df41eb96b73e97f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ef91dc8eb398de7b6c780b00f1360dafd84798/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ef91dc8eb398de7b6c780b00f1360dafd84798/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7ef91dc8eb398de7b6c780b00f1360dafd84798", "patch": "@@ -1,3 +1,13 @@\n+2011-01-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/47299\n+\t* expr.c (expand_expr_real_2) <case WIDEN_MULT_EXPR>: Don't use\n+\tsubtarget.  Use normal multiplication if both operands are\n+\tconstants.\n+\t* expmed.c (expand_widening_mult): Don't try to optimize constant\n+\tmultiplication if op0 has VOIDmode.  Convert op1 constant to mode\n+\tbefore using it.\n+\n 2011-01-17  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* doc/lto.texi (LTO): Ensure two spaces after period.  Fix"}, {"sha": "f17abb53568657eb89d66f8e830737e0b89686ce", "filename": "gcc/expmed.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ef91dc8eb398de7b6c780b00f1360dafd84798/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ef91dc8eb398de7b6c780b00f1360dafd84798/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=e7ef91dc8eb398de7b6c780b00f1360dafd84798", "patch": "@@ -1,7 +1,8 @@\n /* Medium-level subroutines: convert bit-field store and extract\n    and shifts, multiplies and divides to rtl instructions.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -3188,12 +3189,17 @@ expand_widening_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \t\t      int unsignedp, optab this_optab)\n {\n   bool speed = optimize_insn_for_speed_p ();\n+  rtx cop1;\n \n   if (CONST_INT_P (op1)\n-      && (INTVAL (op1) >= 0\n+      && GET_MODE (op0) != VOIDmode\n+      && (cop1 = convert_modes (mode, GET_MODE (op0), op1,\n+\t\t\t\tthis_optab == umul_widen_optab))\n+      && CONST_INT_P (cop1)\n+      && (INTVAL (cop1) >= 0\n \t  || GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT))\n     {\n-      HOST_WIDE_INT coeff = INTVAL (op1);\n+      HOST_WIDE_INT coeff = INTVAL (cop1);\n       int max_cost;\n       enum mult_variant variant;\n       struct algorithm algorithm;"}, {"sha": "7441548884e4942cd39c9d1e94e6529c72e2f752", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ef91dc8eb398de7b6c780b00f1360dafd84798/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ef91dc8eb398de7b6c780b00f1360dafd84798/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e7ef91dc8eb398de7b6c780b00f1360dafd84798", "patch": "@@ -1,6 +1,6 @@\n /* Convert tree expression to rtl instructions, for GNU compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -7631,10 +7631,10 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n \t      if (optab_handler (this_optab, mode) != CODE_FOR_nothing)\n \t\t{\n \t\t  if (TYPE_UNSIGNED (TREE_TYPE (treeop0)))\n-\t\t    expand_operands (treeop0, treeop1, subtarget, &op0, &op1,\n+\t\t    expand_operands (treeop0, treeop1, NULL_RTX, &op0, &op1,\n \t\t\t\t     EXPAND_NORMAL);\n \t\t  else\n-\t\t    expand_operands (treeop0, treeop1, subtarget, &op1, &op0,\n+\t\t    expand_operands (treeop0, treeop1, NULL_RTX, &op1, &op0,\n \t\t\t\t     EXPAND_NORMAL);\n \t\t  goto binop3;\n \t\t}\n@@ -7652,7 +7652,8 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n \t  optab other_optab = zextend_p ? smul_widen_optab : umul_widen_optab;\n \t  this_optab = zextend_p ? umul_widen_optab : smul_widen_optab;\n \n-\t  if (mode == GET_MODE_2XWIDER_MODE (innermode))\n+\t  if (mode == GET_MODE_2XWIDER_MODE (innermode)\n+\t      && TREE_CODE (treeop0) != INTEGER_CST)\n \t    {\n \t      if (optab_handler (this_optab, mode) != CODE_FOR_nothing)\n \t\t{"}, {"sha": "19a6ab962efb5de8e2f088f1c47e3461e124186d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ef91dc8eb398de7b6c780b00f1360dafd84798/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ef91dc8eb398de7b6c780b00f1360dafd84798/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7ef91dc8eb398de7b6c780b00f1360dafd84798", "patch": "@@ -1,3 +1,8 @@\n+2011-01-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/47299\n+\t* gcc.c-torture/execute/pr47299.c: New test.\n+\n 2011-01-17  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-virtual.C: New."}, {"sha": "4f3d1f9cb12a13a474ffaf88bc7edd0c704f8a83", "filename": "gcc/testsuite/gcc.c-torture/execute/pr47299.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7ef91dc8eb398de7b6c780b00f1360dafd84798/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47299.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7ef91dc8eb398de7b6c780b00f1360dafd84798/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47299.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr47299.c?ref=e7ef91dc8eb398de7b6c780b00f1360dafd84798", "patch": "@@ -0,0 +1,17 @@\n+/* PR rtl-optimization/47299 */\n+\n+extern void abort (void);\n+\n+__attribute__ ((noinline, noclone)) unsigned short\n+foo (unsigned char x)\n+{\n+  return x * 255;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (0x40) != 0x3fc0)\n+    abort ();\n+  return 0;\n+}"}]}