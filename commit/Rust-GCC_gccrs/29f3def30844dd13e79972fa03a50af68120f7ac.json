{"sha": "29f3def30844dd13e79972fa03a50af68120f7ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmM2RlZjMwODQ0ZGQxM2U3OTk3MmZhMDNhNTBhZjY4MTIwZjdhYw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2019-11-07T09:19:31Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2019-11-07T09:19:31Z"}, "message": "Support 64-bit double and 64-bit long double configurations.\n\ngcc/\n\tSupport 64-bit double and 64-bit long double configurations.\n\n\tPR target/92055\n\t* config.gcc (tm_defines) [avr]: Set from --with-double=,\n\t--with-long-double=.\n\t* config/avr/t-multilib: Remove.\n\t* config/avr/t-avr: Output of genmultilib.awk is now fully\n\tdynamically generated and no more part of the repo.\n\t(HAVE_DOUBLE_MULTILIB, HAVE_LONG_DOUBLE_MULTILIB): New variables.\n\tPass them down to...\n\t* config/avr/genmultilib.awk: ...here and handle them.\n\t* gcc/config/avr/avr.opt (-mdouble=, avr_double). New option and var.\n\t(-mlong-double=, avr_long_double). New option and var.\n\t* common/config/avr/avr-common.c (opts.h, diagnostic.h): Include.\n\t(TARGET_OPTION_OPTIMIZATION_TABLE) <-mdouble=, -mlong-double=>:\n\tSet default as requested by --with-double=\n\t(TARGET_HANDLE_OPTION): Define to this...\n\t(avr_handle_option): ...new hook worker.\n\t* config/avr/avr.h (DOUBLE_TYPE_SIZE): Define to avr_double.\n\t(LONG_DOUBLE_TYPE_SIZE): Define to avr_long_double.\n\t(avr_double_lib): New proto for spec function.\n\t(EXTRA_SPEC_FUNCTIONS) <double-lib>: Add.\n\t(DRIVER_SELF_SPECS): Call %:double-lib.\n\t* config/avr/avr.c (avr_option_override): Assert\n\tsizeof(long double) >= sizeof(double) for the target.\n\t* config/avr/avr-c.c (avr_cpu_cpp_builtins)\n\t[__HAVE_DOUBLE_MULTILIB__, __HAVE_LONG_DOUBLE_MULTILIB__]\n\t[__HAVE_DOUBLE64__, __HAVE_DOUBLE32__, __DEFAULT_DOUBLE__=]\n\t[__HAVE_LONG_DOUBLE64__, __HAVE_LONG_DOUBLE32__]\n\t[__HAVE_LONG_DOUBLE_IS_DOUBLE__, __DEFAULT_LONG_DOUBLE__=]:\n\tNew built-in define depending on --with-double=, --with-long-double=.\n\t* config/avr/driver-avr.c (avr_double_lib): New spec function.\n\t* doc/invoke.tex (AVR Options) <-mdouble=,-mlong-double=>: Doc.\n\t* doc/install.texi (Cross-Compiler-Specific Options)\n\t<--with-double=, --with-long-double=>: Doc.\n\nlibgcc/\n\tSupport 64-bit double and 64-bit long double configurations.\n\n\tPR target/92055\n\t* config/avr/t-avr (HOST_LIBGCC2_CFLAGS): Only add -DF=SF if\n\tlong double is a 32-bit type.\n\t* config/avr/t-avrlibc: Copy double64 and long-double64\n\tmultilib(s) from the vanilla one.\n\t* config/avr/t-copy-libgcc: New Makefile snip.\n\nFrom-SVN: r277908", "tree": {"sha": "270260e9909fa2a95f28ea376624c6c735ad5f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/270260e9909fa2a95f28ea376624c6c735ad5f73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f3def30844dd13e79972fa03a50af68120f7ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f3def30844dd13e79972fa03a50af68120f7ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f3def30844dd13e79972fa03a50af68120f7ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f3def30844dd13e79972fa03a50af68120f7ac/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76bc24ff68284d90bc8d334b72c9690382747add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76bc24ff68284d90bc8d334b72c9690382747add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76bc24ff68284d90bc8d334b72c9690382747add"}], "stats": {"total": 595, "additions": 534, "deletions": 61}, "files": [{"sha": "d64d6b7139d35d8739f51b4b0355e985a9bdffa7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -1,3 +1,41 @@\n+2019-11-07  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tSupport 64-bit double and 64-bit long double configurations.\n+\n+\tPR target/92055\n+\t* config.gcc (tm_defines) [avr]: Set from --with-double=,\n+\t--with-long-double=.\n+\t* config/avr/t-multilib: Remove.\n+\t* config/avr/t-avr: Output of genmultilib.awk is now fully\n+\tdynamically generated and no more part of the repo.\n+\t(HAVE_DOUBLE_MULTILIB, HAVE_LONG_DOUBLE_MULTILIB): New variables.\n+\tPass them down to...\n+\t* config/avr/genmultilib.awk: ...here and handle them.\n+\t* gcc/config/avr/avr.opt (-mdouble=, avr_double). New option and var.\n+\t(-mlong-double=, avr_long_double). New option and var.\n+\t* common/config/avr/avr-common.c (opts.h, diagnostic.h): Include.\n+\t(TARGET_OPTION_OPTIMIZATION_TABLE) <-mdouble=, -mlong-double=>:\n+\tSet default as requested by --with-double=\n+\t(TARGET_HANDLE_OPTION): Define to this...\n+\t(avr_handle_option): ...new hook worker.\n+\t* config/avr/avr.h (DOUBLE_TYPE_SIZE): Define to avr_double.\n+\t(LONG_DOUBLE_TYPE_SIZE): Define to avr_long_double.\n+\t(avr_double_lib): New proto for spec function.\n+\t(EXTRA_SPEC_FUNCTIONS) <double-lib>: Add.\n+\t(DRIVER_SELF_SPECS): Call %:double-lib.\n+\t* config/avr/avr.c (avr_option_override): Assert\n+\tsizeof(long double) >= sizeof(double) for the target.\n+\t* config/avr/avr-c.c (avr_cpu_cpp_builtins)\n+\t[__HAVE_DOUBLE_MULTILIB__, __HAVE_LONG_DOUBLE_MULTILIB__]\n+\t[__HAVE_DOUBLE64__, __HAVE_DOUBLE32__, __DEFAULT_DOUBLE__=]\n+\t[__HAVE_LONG_DOUBLE64__, __HAVE_LONG_DOUBLE32__]\n+\t[__HAVE_LONG_DOUBLE_IS_DOUBLE__, __DEFAULT_LONG_DOUBLE__=]:\n+\tNew built-in define depending on --with-double=, --with-long-double=.\n+\t* config/avr/driver-avr.c (avr_double_lib): New spec function.\n+\t* doc/invoke.tex (AVR Options) <-mdouble=,-mlong-double=>: Doc.\n+\t* doc/install.texi (Cross-Compiler-Specific Options)\n+\t<--with-double=, --with-long-double=>: Doc.\n+\n 2019-11-07  Richard Biener  <rguenther@suse.de>\n \n \t* dbgcnt.def (gimple_unroll): New."}, {"sha": "55a75790e1b6d691e17b5e721fca274e6736287a", "filename": "gcc/common/config/avr/avr-common.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Favr%2Favr-common.c?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -23,6 +23,8 @@\n #include \"tm.h\"\n #include \"common/common-target.h\"\n #include \"common/common-target-def.h\"\n+#include \"opts.h\"\n+#include \"diagnostic.h\"\n \n /* Implement TARGET_OPTION_OPTIMIZATION_TABLE.  */\n static const struct default_options avr_option_optimization_table[] =\n@@ -43,9 +45,102 @@ static const struct default_options avr_option_optimization_table[] =\n        performance decrease. For the AVR though, disallowing data races\n        introduces additional code in LIM and increases reg pressure.  */\n     { OPT_LEVELS_ALL, OPT_fallow_store_data_races, NULL, 1 },\n+\n+#if defined (WITH_DOUBLE64)\n+    { OPT_LEVELS_ALL, OPT_mdouble_, NULL, 64 },\n+#elif defined (WITH_DOUBLE32)\n+    { OPT_LEVELS_ALL, OPT_mdouble_, NULL, 32 },\n+#else\n+#error \"align this with config.gcc\"\n+#endif\n+\n+#if defined (WITH_LONG_DOUBLE64)\n+    { OPT_LEVELS_ALL, OPT_mlong_double_, NULL, 64 },\n+#elif defined (WITH_LONG_DOUBLE32)\n+    { OPT_LEVELS_ALL, OPT_mlong_double_, NULL, 32 },\n+#else\n+#error \"align this with config.gcc\"\n+#endif\n+\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n \n+\n+/* Implement `TARGET_HANDLE_OPTION'.  */\n+\n+/* This is the same logic that driver-avr.c:avr_double_lib() applies\n+   during DRIVER_SELF_SPECS, but this time we complain about -mdouble=\n+   and -mlong-double= that are not provided by --with-double= resp.\n+   --with-long-double=  */\n+\n+static bool\n+avr_handle_option (struct gcc_options *opts, struct gcc_options*,\n+                   const struct cl_decoded_option *decoded, location_t loc)\n+{\n+  int value = decoded->value;\n+\n+  switch (decoded->opt_index)\n+    {\n+    case OPT_mdouble_:\n+      if (value == 64)\n+        {\n+#if !defined (HAVE_DOUBLE64)\n+          error_at (loc, \"option %<-mdouble=64%> is only available if \"\n+                    \"configured %<--with-double={64|64,32|32,64}%>\");\n+#endif\n+          opts->x_avr_long_double = 64;\n+        }\n+      else if (value == 32)\n+        {\n+#if !defined (HAVE_DOUBLE32)\n+          error_at (loc, \"option %<-mdouble=32%> is only available if \"\n+                    \"configured %<--with-double={|32|32,64|64,32}%>\");\n+#endif\n+        }\n+      else\n+        gcc_unreachable();\n+\n+#if defined (HAVE_LONG_DOUBLE_IS_DOUBLE)\n+      opts->x_avr_long_double = value;\n+#endif\n+      break; // -mdouble=\n+\n+    case OPT_mlong_double_:\n+      if (value == 64)\n+        {\n+#if !defined (HAVE_LONG_DOUBLE64)\n+          error_at (loc, \"option %<-mlong-double=64%> is only available if \"\n+                    \"configured %<--with-long-double={64|64,32|32,64}%>, \"\n+                    \"or %<--with-long-double=double%> together with \"\n+                    \"%<--with-double={64|64,32|32,64}%>\");\n+#endif\n+        }\n+      else if (value == 32)\n+        {\n+#if !defined (HAVE_LONG_DOUBLE32)\n+          error_at (loc, \"option %<-mlong-double=32%> is only available if \"\n+                    \"configured %<--with-long-double={|32|32,64|64,32}%>, \"\n+                    \"or %<--with-long-double=double%> together with \"\n+                    \"%<--with-double={|32|32,64|64,32}%>\");\n+#endif\n+          opts->x_avr_double = 32;\n+        }\n+      else\n+        gcc_unreachable();\n+\n+#if defined (HAVE_LONG_DOUBLE_IS_DOUBLE)\n+      opts->x_avr_double = value;\n+#endif\n+      break; // -mlong-double=\n+    }\n+\n+  return true;\n+}\n+\n+\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION avr_handle_option\n+\n #undef TARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE avr_option_optimization_table\n "}, {"sha": "72f656408f11802c669c3de953bf3020020ca312", "filename": "gcc/config.gcc", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -1287,6 +1287,88 @@ avr-*-*)\n \t    tm_file=\"${tm_file} ${cpu_type}/avrlibc.h\"\n \t    tm_defines=\"${tm_defines} WITH_AVRLIBC\"\n \tfi\n+\tcase y${with_double} in\n+\t    y | y32)\n+\t\tavr_double=32\n+\t\ttm_defines=\"${tm_defines} HAVE_DOUBLE32\"\n+\t\t;;\n+\t    y64)\n+\t\tavr_double=64\n+\t\ttm_defines=\"${tm_defines} HAVE_DOUBLE64\"\n+\t\t;;\n+\t    y64,32)\n+\t\tavr_double=64\n+\t\tavr_double_multilib=1\n+\t\ttm_defines=\"${tm_defines} HAVE_DOUBLE32\"\n+\t\ttm_defines=\"${tm_defines} HAVE_DOUBLE64\"\n+\t\ttm_defines=\"${tm_defines} HAVE_DOUBLE_MULTILIB\"\n+\t\t;;\n+\t    y32,64)\n+\t\tavr_double=32\n+\t\tavr_double_multilib=1\n+\t\ttm_defines=\"${tm_defines} HAVE_DOUBLE32\"\n+\t\ttm_defines=\"${tm_defines} HAVE_DOUBLE64\"\n+\t\ttm_defines=\"${tm_defines} HAVE_DOUBLE_MULTILIB\"\n+\t\t;;\n+\t    *)\n+\t\techo \"Error: --with-double= can only be used with: '32', '32,64', '64,32', '64'\" 1>&2\n+\t\texit 1\n+\t\t;;\n+\tesac\n+\tcase y${with_long_double} in\n+\t    y | y32)\n+\t\tavr_long_double=32\n+\t\ttm_defines=\"${tm_defines} HAVE_LONG_DOUBLE32\"\n+\t\t;;\n+\t    y64)\n+\t\tavr_long_double=64\n+\t\ttm_defines=\"${tm_defines} HAVE_LONG_DOUBLE64\"\n+\t\t;;\n+\t    y64,32)\n+\t\tavr_long_double=64\n+\t\tavr_long_double_multilib=1\n+\t\ttm_defines=\"${tm_defines} HAVE_LONG_DOUBLE32\"\n+\t\ttm_defines=\"${tm_defines} HAVE_LONG_DOUBLE64\"\n+\t\ttm_defines=\"${tm_defines} HAVE_LONG_DOUBLE_MULTILIB\"\n+\t\t;;\n+\t    y32,64)\n+\t\tavr_long_double=32\n+\t\tavr_long_double_multilib=1\n+\t\ttm_defines=\"${tm_defines} HAVE_LONG_DOUBLE32\"\n+\t\ttm_defines=\"${tm_defines} HAVE_LONG_DOUBLE64\"\n+\t\ttm_defines=\"${tm_defines} HAVE_LONG_DOUBLE_MULTILIB\"\n+\t\t;;\n+\t    ydouble)\n+\t\tavr_long_double=${avr_double}\n+\t\ttm_defines=\"${tm_defines} HAVE_LONG_DOUBLE_IS_DOUBLE\"\n+\t\tif test y${avr_double_multilib} = y1; then\n+\t\t    tm_defines=\"${tm_defines} HAVE_LONG_DOUBLE32\"\n+\t\t    tm_defines=\"${tm_defines} HAVE_LONG_DOUBLE64\"\n+\t\telse\n+\t\t    tm_defines=\"${tm_defines} HAVE_LONG_DOUBLE${avr_long_double}\"\n+\t\tfi\n+\t\t;;\n+\t    *)\n+\t\techo \"Error: --with-long_double= can only be used with: '32', '32,64', '64,32', '64', 'double'\" 1>&2\n+\t\texit 1\n+\t\t;;\n+\tesac\n+\tif test ${avr_long_double}x${avr_long_double_multilib}y${avr_double_multilib}z = 32xy1z; then\n+\t    if test y${with_long_double} != ydouble; then\n+\t\techo \"Error: --with-double=${with_double} requests a multilib for double, but long double is always 32 bits wide due to --with-long-double=${with_long_double}\" 1>&2\n+\t\texit 1\n+\t    fi\n+\tfi\n+\tif test ${avr_double}x${avr_long_double_multilib}y${avr_double_multilib}z = 64x1yz; then\n+\t    echo \"Error: --with-long-double=${with_long_double} requests a multilib for long double, but double is always 64 bits wide due to --with-double=64\" 1>&2\n+\t    exit 1\n+\tfi\n+\tif test y${avr_double}${avr_long_double} = y6432; then\n+\t    echo \"Error: double default of 64 bits from --with-double=${with_double} conflicts with default of 32 bits for long double from --with-long-double=${with_long_double}\" 1>&2\n+\t    exit 1\n+\tfi\n+\ttm_defines=\"${tm_defines} WITH_DOUBLE${avr_double}\"\n+\ttm_defines=\"${tm_defines} WITH_LONG_DOUBLE${avr_long_double}\"\n \ttmake_file=\"${tmake_file} avr/t-avr avr/t-multilib\"\n \tuse_gcc_stdint=wrap\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\""}, {"sha": "91aaae0f035f235b4616c61c216aa601ecdc4b56", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -390,6 +390,55 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n   cpp_define (pfile, \"__WITH_AVRLIBC__\");\n #endif /* WITH_AVRLIBC */\n \n+  // From configure --with-double={|32|32,64|64,32|64}\n+\n+#ifdef HAVE_DOUBLE_MULTILIB\n+  cpp_define (pfile, \"__HAVE_DOUBLE_MULTILIB__\");\n+#endif\n+\n+#ifdef HAVE_DOUBLE64\n+  cpp_define (pfile, \"__HAVE_DOUBLE64__\");\n+#endif\n+\n+#ifdef HAVE_DOUBLE32\n+  cpp_define (pfile, \"__HAVE_DOUBLE32__\");\n+#endif\n+\n+#if defined (WITH_DOUBLE64)\n+  cpp_define (pfile, \"__DEFAULT_DOUBLE__=64\");\n+#elif defined (WITH_DOUBLE32)\n+  cpp_define (pfile, \"__DEFAULT_DOUBLE__=32\");\n+#else\n+#error \"align this with config.gcc\"\n+#endif\n+\n+  // From configure --with-long-double={|32|32,64|64,32|64|double}\n+\n+#ifdef HAVE_LONG_DOUBLE_MULTILIB\n+  cpp_define (pfile, \"__HAVE_LONG_DOUBLE_MULTILIB__\");\n+#endif\n+\n+#ifdef HAVE_LONG_DOUBLE64\n+  cpp_define (pfile, \"__HAVE_LONG_DOUBLE64__\");\n+#endif\n+\n+#ifdef HAVE_LONG_DOUBLE32\n+  cpp_define (pfile, \"__HAVE_LONG_DOUBLE32__\");\n+#endif\n+\n+#ifdef HAVE_LONG_DOUBLE_IS_DOUBLE\n+  cpp_define (pfile, \"__HAVE_LONG_DOUBLE_IS_DOUBLE__\");\n+#endif\n+\n+#if defined (WITH_LONG_DOUBLE64)\n+  cpp_define (pfile, \"__DEFAULT_LONG_DOUBLE__=64\");\n+#elif defined (WITH_LONG_DOUBLE32)\n+  cpp_define (pfile, \"__DEFAULT_LONG_DOUBLE__=32\");\n+#else\n+#error \"align this with config.gcc\"\n+#endif\n+\n+  \n   /* Define builtin macros so that the user can easily query whether\n      non-generic address spaces (and which) are supported or not.\n      This is only supported for C.  For C++, a language extension is needed"}, {"sha": "8fc2e71489d348de8d97839910359e9c4235164d", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -768,6 +768,9 @@ avr_option_override (void)\n   if (!avr_set_core_architecture())\n     return;\n \n+  /* Sould be set by avr-common.c */\n+  gcc_assert (avr_long_double >= avr_double && avr_double >= 32);\n+\n   /* RAM addresses of some SFRs common to all devices in respective arch. */\n \n   /* SREG: Status Register containing flags like I (global IRQ) */"}, {"sha": "b38813d468b46fc1eea4161a613e4a5702b953a9", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -140,8 +140,9 @@ FIXME: DRIVER_SELF_SPECS has changed.\n #define LONG_TYPE_SIZE (INT_TYPE_SIZE == 8 ? 16 : 32)\n #define LONG_LONG_TYPE_SIZE (INT_TYPE_SIZE == 8 ? 32 : 64)\n #define FLOAT_TYPE_SIZE 32\n-#define DOUBLE_TYPE_SIZE 32\n-#define LONG_DOUBLE_TYPE_SIZE 32\n+#define DOUBLE_TYPE_SIZE (avr_double)\n+#define LONG_DOUBLE_TYPE_SIZE (avr_long_double)\n+\n #define LONG_LONG_ACCUM_TYPE_SIZE 64\n \n #define DEFAULT_SIGNED_CHAR 1\n@@ -507,16 +508,19 @@ typedef struct avr_args\n     (LENGTH = avr_adjust_insn_length (INSN, LENGTH))\n \n extern const char *avr_devicespecs_file (int, const char**);\n+extern const char *avr_double_lib (int, const char**);\n \n-#define EXTRA_SPEC_FUNCTIONS                                   \\\n+#define EXTRA_SPEC_FUNCTIONS                            \\\n+  { \"double-lib\", avr_double_lib },                     \\\n   { \"device-specs-file\", avr_devicespecs_file },\n \n /* Driver self specs has lmited functionality w.r.t. '%s' for dynamic specs.\n    Apply '%s' to a static string to inflate the file (directory) name which\n    is used to diagnose problems with reading the specs file.  */\n \n #undef  DRIVER_SELF_SPECS\n-#define DRIVER_SELF_SPECS                       \\\n+#define DRIVER_SELF_SPECS                               \\\n+  \" %:double-lib(%{m*:m%*})\"                            \\\n   \" %:device-specs-file(device-specs%s %{mmcu=*:%*})\"\n \n /* No libstdc++ for now.  Empty string doesn't work.  */"}, {"sha": "ac2d9551258f448d1954c713f9d5a46b5ea1d754", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -115,6 +115,24 @@ mabsdata\n Target Report Mask(ABSDATA)\n Assume that all data in static storage can be accessed by LDS / STS.  This option is only useful for reduced Tiny devices.\n \n+mdouble=\n+Target Report Joined RejectNegative Var(avr_double) Init(0) Enum(avr_bits_e)\n+mdouble=<BITS>\tUse <BITS> bits wide double type.\n+\n+mlong-double=\n+Target Report Joined RejectNegative Var(avr_long_double) Init(0) Enum(avr_bits_e)\n+mlong-double=<BITS>\tUse <BITS> bits wide long double type.\n+\n nodevicelib\n Driver Target Report RejectNegative\n Do not link against the device-specific library lib<MCU>.a.\n+\n+Enum\n+Name(avr_bits_e) Type(int)\n+Available BITS selections:\n+\n+EnumValue\n+Enum(avr_bits_e) String(32)  Value(32)\n+\n+EnumValue\n+Enum(avr_bits_e) String(64) Value(64)"}, {"sha": "a6239dac949fe3797fd97516e84547fc8e701e2a", "filename": "gcc/config/avr/driver-avr.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fdriver-avr.c?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -111,3 +111,60 @@ avr_devicespecs_file (int argc, const char **argv)\n #endif\n                  NULL);\n }\n+\n+\n+/* Re-build the -mdouble= and -mlong-double= options.  This is needed\n+   because multilib selection is based on the physical presence of an\n+   option on the command line, which is not the case for, say, when the\n+   double=64 multilib is to be selected by --with-double=64 but the user\n+   does not specify -mdouble=64 explicitly.  */\n+\n+const char*\n+avr_double_lib (int argc, const char **argv)\n+{\n+#if defined (WITH_DOUBLE64)\n+  int dbl = 64;\n+#elif defined (WITH_DOUBLE32)\n+  int dbl = 32;\n+#else\n+#error \"align this with config.gcc\"\n+#endif\n+\n+#if defined (WITH_LONG_DOUBLE64)\n+  int ldb = 64;\n+#elif defined (WITH_LONG_DOUBLE32)\n+  int ldb = 32;\n+#else\n+#error \"align this with config.gcc\"\n+#endif\n+\n+  for (int i = 0; i < argc; i++)\n+    {\n+      if (strcmp (argv[i], \"mdouble=32\") == 0)\n+        {\n+          dbl = 32;\n+#ifdef HAVE_LONG_DOUBLE_IS_DOUBLE\n+          ldb = dbl;\n+#endif\n+        }\n+      else if (strcmp (argv[i], \"mdouble=64\") == 0)\n+        {\n+          ldb = dbl = 64;\n+        }\n+      else if (strcmp (argv[i], \"mlong-double=32\") == 0)\n+        {\n+          ldb = dbl = 32;\n+        }\n+      else if (strcmp (argv[i], \"mlong-double=64\") == 0)\n+        {\n+          ldb = 64;\n+#ifdef HAVE_LONG_DOUBLE_IS_DOUBLE\n+          dbl = ldb;\n+#endif\n+        }\n+    }\n+\n+  return concat (\" %<mdouble=* -mdouble=\", dbl == 32 ? \"32\" : \"64\",\n+                 \" %<mlong-double=* -mlong-double=\", ldb == 32 ? \"32\" : \"64\",\n+                 NULL);\n+}"}, {"sha": "1228022837755e1ed21164e9672355c1ed5ea11e", "filename": "gcc/config/avr/genmultilib.awk", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Fgenmultilib.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Fgenmultilib.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgenmultilib.awk?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -38,15 +38,26 @@ BEGIN {\n     dir_rcall = \"short-calls\"\n     opt_rcall = \"mshort-calls\"\n \n+    dir_double64 = \"double64\"\n+    opt_double64 = \"mdouble=64\"\n+\n+    dir_long_double64 = \"long-double64\"\n+    opt_long_double64 = \"mlong-double=64\"\n+\n     #    awk Variable         Makefile Variable  \n     #  ------------------------------------------\n     #    m_options     <->    MULTILIB_OPTIONS\n     #    m_dirnames    <->    MULTILIB_DIRNAMES\n     #    m_required    <->    MULTILIB_REQUIRED\n+    #    m_reuse       <->    MULTILIB_REUSE\n     m_sep = \"\"\n     m_options    = \"\\nMULTILIB_OPTIONS = \"\n     m_dirnames   = \"\\nMULTILIB_DIRNAMES =\"\n     m_required   = \"\\nMULTILIB_REQUIRED =\"\n+    m_reuse      = \"\\nMULTILIB_REUSE =\"\n+\n+    have_double_multi = (HAVE_DOUBLE_MULTILIB == \"HAVE_DOUBLE_MULTILIB\")\n+    have_long_double_multi = (HAVE_LONG_DOUBLE_MULTILIB == \"HAVE_LONG_DOUBLE_MULTILIB\")\n }\n \n ##################################################################\n@@ -130,7 +141,26 @@ BEGIN {\n \t# leading \"mmcu=avr2/\" in order not to confuse genmultilib.\n \tgsub (/^mmcu=avr2\\//, \"\", opts)\n \tif (opts != \"mmcu=avr2\")\n+\t{\n \t    m_required = m_required \" \\\\\\n\\t\" opts\n+\t    if (have_double_multi && have_long_double_multi)\n+\t    {\n+\t\tm_required = m_required \" \\\\\\n\\t\" opts \"/\" opt_double64\n+\t\tm_required = m_required \" \\\\\\n\\t\" opts \"/\" opt_long_double64\n+\n+\t\t# -mlong-double=64 -mdouble=64 is the same as -mdouble=64,\n+\t\t# hence add a respective reuse.\n+\t\td_opts  = opts \"/\" opt_double64\n+\t\td_reuse = opts \"/\" opt_double64 \"/\" opt_long_double64\n+\t\tgsub (/=/, \".\", d_opts)\n+\t\tgsub (/=/, \".\", d_reuse)\n+\t\tm_reuse = m_reuse \" \\\\\\n\\t\" d_opts \"=\" d_reuse\n+\t    }\n+\t    else if (have_double_multi)\n+\t\tm_required = m_required \" \\\\\\n\\t\" opts \"/\" opt_double64\n+\t    else if (have_long_double_multi)\n+\t\tm_required = m_required \" \\\\\\n\\t\" opts \"/\" opt_long_double64\n+\t}\n     }\n }\n \n@@ -143,9 +173,37 @@ END {\n     # Output that Stuff\n     ############################################################\n \n-    # Intended Target: ./gcc/config/avr/t-multilib\n+    # Intended Target: $(top_builddir)/gcc/t-multilib-avr\n+\n+    if (have_double_multi && have_long_double_multi)\n+    {\n+\tprint m_options  \" \" opt_tiny \" \" opt_rcall \" \" opt_double64 \"/\" opt_long_double64\n+\tprint m_dirnames \" \" dir_tiny \" \" dir_rcall \" \" dir_double64 \" \" dir_long_double64\n+\t# Notice that the ./double64 and ./long-double64 variants cannot\n+\t# be copied by t-avrlibc because the . default multilib is built\n+\t# after all the others.\n+\tm_required = m_required \" \\\\\\n\\t\" opt_double64\n+\tm_required = m_required \" \\\\\\n\\t\" opt_long_double64\n+\tm_reuse = m_reuse \" \\\\\\n\\tmdouble.64=mdouble.64/mlong-double.64\"\n+    }\n+    else if (have_double_multi)\n+    {\n+\tprint m_options  \" \" opt_tiny \" \" opt_rcall \" \" opt_double64\n+\tprint m_dirnames \" \" dir_tiny \" \" dir_rcall \" \" dir_double64\n+\tm_required = m_required \" \\\\\\n\\t\" opt_double64\n+    }\n+    else if (have_long_double_multi)\n+    {\n+\tprint m_options  \" \" opt_tiny \" \" opt_rcall \" \" opt_long_double64\n+\tprint m_dirnames \" \" dir_tiny \" \" dir_rcall \" \" dir_long_double64\n+\tm_required = m_required \" \\\\\\n\\t\" opt_long_double64\n+    }\n+    else\n+    {\n+\tprint m_options  \" \" opt_tiny \" \" opt_rcall\n+\tprint m_dirnames \" \" dir_tiny \" \" dir_rcall\n+    }\n \n-    print m_options  \" \" opt_tiny \" \" opt_rcall\n-    print m_dirnames \" \" dir_tiny \" \" dir_rcall\n     print m_required\n+    print m_reuse\n }"}, {"sha": "23dae38c66fdf9144d0c50947fc2f6107a83f7a1", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -16,6 +16,9 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+HAVE_DOUBLE_MULTILIB = $(findstring HAVE_DOUBLE_MULTILIB, $(tm_defines))\n+HAVE_LONG_DOUBLE_MULTILIB = $(findstring HAVE_LONG_DOUBLE_MULTILIB, $(tm_defines))\n+\n PASSES_EXTRA += $(srcdir)/config/avr/avr-passes.def\n \n driver-avr.o: $(srcdir)/config/avr/driver-avr.c \\\n@@ -93,9 +96,14 @@ install-device-specs: s-device-specs installdirs\n # MULTILIB_OPTIONS\n # MULTILIB_DIRNAMES\n # MULTILIB_REQUIRED\n+# MULTILIB_REUSE\n \n-s-mlib: $(srcdir)/config/avr/t-multilib\n+multilib.h Makefile s-mlib: t-multilib-avr\n \n-$(srcdir)/config/avr/t-multilib: $(srcdir)/config/avr/genmultilib.awk \\\n+t-multilib-avr: $(srcdir)/config/avr/genmultilib.awk \\\n \t\t\t\t $(AVR_MCUS)\n-\t$(AWK) -f $< $< $(AVR_MCUS) > $@\n+\t$(AWK)\t-v HAVE_DOUBLE_MULTILIB=$(HAVE_DOUBLE_MULTILIB) \\\n+\t\t-v HAVE_LONG_DOUBLE_MULTILIB=$(HAVE_LONG_DOUBLE_MULTILIB) \\\n+\t\t-f $< $< $(AVR_MCUS) > $@\n+\n+include t-multilib-avr"}, {"sha": "8bda0f747c978ae62e01d3047050e400ec22fac5", "filename": "gcc/config/avr/t-multilib", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76bc24ff68284d90bc8d334b72c9690382747add/gcc%2Fconfig%2Favr%2Ft-multilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76bc24ff68284d90bc8d334b72c9690382747add/gcc%2Fconfig%2Favr%2Ft-multilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-multilib?ref=76bc24ff68284d90bc8d334b72c9690382747add", "patch": "@@ -1,46 +0,0 @@\n-# Auto-generated Makefile Snip\n-# Generated by    : ./gcc/config/avr/genmultilib.awk\n-# Generated from  : ./gcc/config/avr/avr-mcus.def\n-# Used by         : tmake_file from Makefile and genmultilib\n-\n-# Copyright (C) 2011-2019 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify it under\n-# the terms of the GNU General Public License as published by the Free\n-# Software Foundation; either version 3, or (at your option) any later\n-# version.\n-#\n-# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-MULTILIB_OPTIONS = mmcu=avr2/mmcu=avr25/mmcu=avr3/mmcu=avr31/mmcu=avr35/mmcu=avr4/mmcu=avr5/mmcu=avr51/mmcu=avr6/mmcu=avrxmega2/mmcu=avrxmega3/mmcu=avrxmega4/mmcu=avrxmega5/mmcu=avrxmega6/mmcu=avrxmega7/mmcu=avrtiny msp8 mshort-calls\n-\n-MULTILIB_DIRNAMES = avr2 avr25 avr3 avr31 avr35 avr4 avr5 avr51 avr6 avrxmega2 avrxmega3 avrxmega4 avrxmega5 avrxmega6 avrxmega7 avrtiny tiny-stack short-calls\n-\n-MULTILIB_REQUIRED = \\\n-\tmsp8 \\\n-\tmmcu=avr25 \\\n-\tmmcu=avr25/msp8 \\\n-\tmmcu=avr3 \\\n-\tmmcu=avr31 \\\n-\tmmcu=avr35 \\\n-\tmmcu=avr4 \\\n-\tmmcu=avr5 \\\n-\tmmcu=avr51 \\\n-\tmmcu=avr6 \\\n-\tmmcu=avrxmega2 \\\n-\tmmcu=avrxmega3/mshort-calls \\\n-\tmmcu=avrxmega3 \\\n-\tmmcu=avrxmega4 \\\n-\tmmcu=avrxmega5 \\\n-\tmmcu=avrxmega6 \\\n-\tmmcu=avrxmega7 \\\n-\tmmcu=avrtiny"}, {"sha": "2cb8a342a2c3b41c264fa86ac4273a71b8b609ca", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -2276,16 +2276,49 @@ being used as the target C library.  This causes @code{__eprintf} to be\n omitted from @file{libgcc.a} on the assumption that it will be provided by\n @samp{newlib}.\n \n+@html\n+<a name=\"avr\"></a>\n+@end html\n @item --with-avrlibc\n-Specifies that @samp{AVR-Libc} is\n-being used as the target C library.  This causes float support\n+Only supported for the AVR target. Specifies that @samp{AVR-Libc} is\n+being used as the target C@tie{} library.  This causes float support\n functions like @code{__addsf3} to be omitted from @file{libgcc.a} on\n the assumption that it will be provided by @file{libm.a}.  For more\n technical details, cf. @uref{http://gcc.gnu.org/PR54461,,PR54461}.\n-This option is only supported for the AVR target.  It is not supported for\n+It is not supported for\n RTEMS configurations, which currently use newlib.  The option is\n supported since version 4.7.2 and is the default in 4.8.0 and newer.\n \n+@item --with-double=@{32|64|32,64|64,32@}\n+@itemx --with-long-double=@{32|64|32,64|64,32|double@}\n+Only supported for the AVR target since version@tie{}10.\n+Specify the default layout available for the C/C++ @samp{double}\n+and @samp{long double} type, respectively. The following rules apply:\n+@itemize\n+@item\n+The first value after the @samp{=} specifies the default layout (in bits)\n+of the type and also the default for the @option{-mdouble=} resp.\n+@option{-mlong-double=} compiler option.\n+@item\n+If more than one value is specified, respective multilib variants are\n+available, and  @option{-mdouble=} resp. @option{-mlong-double=} acts\n+as a multilib option.\n+@item\n+If @option{--with-long-double=double} is specified, @samp{double} and\n+@samp{long double} will have the same layout.\n+@item\n+If the configure option is not set, it defaults to @samp{32} which\n+is compatible with older versions of the compiler that use non-standard\n+32-bit types for @samp{double} and @samp{long double}.\n+@end itemize\n+Not all combinations of @option{--with-double=} and\n+@option{--with-long-double=} are valid.  For example, the combination\n+@option{--with-double=32,64} @option{--with-long-double=32} will be\n+rejected because the first option specifies the availability of\n+multilibs for @samp{double}, whereas the second option implies\n+that @samp{long double} --- and hence also @samp{double} --- is always\n+32@tie{}bits wide.\n+\n @item --with-nds32-lib=@var{library}\n Specifies that @var{library} setting is used for building @file{libgcc.a}.\n Currently, the valid @var{library} is @samp{newlib} or @samp{mculib}."}, {"sha": "42db3287cae3c868fa1260eb43ff0ffc4ad18c8a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -723,6 +723,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-mmcu=@var{mcu}  -mabsdata  -maccumulate-args @gol\n -mbranch-cost=@var{cost} @gol\n -mcall-prologues  -mgas-isr-prologues  -mint8 @gol\n+-mdouble=@var{bits} -mlong-double=@var{bits} @gol\n -mn_flash=@var{size}  -mno-interrupts @gol\n -mmain-is-OS_task  -mrelax  -mrmw  -mstrict-X  -mtiny-stack @gol\n -mfract-convert-truncate @gol\n@@ -18279,6 +18280,17 @@ integers. The default branch cost is 0.\n Functions prologues/epilogues are expanded as calls to appropriate\n subroutines.  Code size is smaller.\n \n+@item -mdouble=@var{bits}\n+@itemx -mlong-double=@var{bits}\n+@opindex mdouble\n+@opindex mlong-double\n+Set the size (in bits) of the @code{double} or @code{long double} type,\n+respectively.  Possible values for @var{bits} are 32 an 64.\n+Whether or not a specific value for @var{bits} is allowed depends on\n+the @code{--with--double=} and @code{--with-long-double=}\n+@w{@uref{https://gcc.gnu.org/install/configure.html#avr,configure options}},\n+and the same applies for the default values of the options.\n+\n @item -mgas-isr-prologues\n @opindex mgas-isr-prologues\n Interrupt service routines (ISRs) may use the @code{__gcc_isr} pseudo"}, {"sha": "ff26a0ced5de54b6c1753992a9708fa455180257", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -1,3 +1,14 @@\n+2019-11-07  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tSupport 64-bit double and 64-bit long double configurations.\n+\n+\tPR target/92055\n+\t* config/avr/t-avr (HOST_LIBGCC2_CFLAGS): Only add -DF=SF if\n+\tlong double is a 32-bit type.\n+\t* config/avr/t-avrlibc: Copy double64 and long-double64\n+\tmultilib(s) from the vanilla one.\n+\t* config/avr/t-copy-libgcc: New Makefile snip.\n+\n 2019-11-04  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* crtstuff.c: Define USE_TM_CLONE_REGISTRY to 0 if it's undefined and"}, {"sha": "0b8eb4e5d73cf8b76139cd40d6be16e462a5e9eb", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -505,6 +505,9 @@ avr-*-*)\n \t    tmake_file=\"$tmake_file ${cpu_type}/t-avrlibc\"\n \tfi\n \ttm_file=\"$tm_file avr/avr-lib.h\"\n+\tif test x${with_fixed_point} = xno; then\n+\t    fixed_point=no\n+\tfi\n \t;;\n bfin*-elf*)\n \ttmake_file=\"bfin/t-bfin bfin/t-crtlibid bfin/t-crtstuff t-libgcc-pic t-fdpbit\""}, {"sha": "e4f867be3d8767b095b1f4514ab1502925202c9b", "filename": "libgcc/config/avr/t-avr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/libgcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/libgcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Ft-avr?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -112,10 +112,14 @@ LIB2FUNCS_EXCLUDE = \\\n \t_clrsbdi2 \\\n \n \n-# We do not have the DF type.\n+ifeq ($(long_double_type_size),32)\n+# We do not have the DFtype.\n+HOST_LIBGCC2_CFLAGS += -DDF=SF\n+endif\n+\n # Most of the C functions in libgcc2 use almost all registers,\n # so use -mcall-prologues for smaller code size.\n-HOST_LIBGCC2_CFLAGS += -DDF=SF -Dinhibit_libc -mcall-prologues -Os\n+HOST_LIBGCC2_CFLAGS += -Dinhibit_libc -mcall-prologues -Os\n \n # Extra 16-bit integer functions.\n intfuncs16 = _absvXX2 _addvXX3 _subvXX3 _mulvXX3 _negvXX2 _clrsbXX2"}, {"sha": "2424d66356516e463aed2543abfdc5bc3250edd2", "filename": "libgcc/config/avr/t-avrlibc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/libgcc%2Fconfig%2Favr%2Ft-avrlibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/libgcc%2Fconfig%2Favr%2Ft-avrlibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Ft-avrlibc?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -64,3 +64,34 @@ LIB2FUNCS_EXCLUDE += \\\n \t_fixunssfsi _fixsfdi \\\n \t_fixunssfdi \\\n \t_floatdisf _floatundisf\n+\n+ifneq (,$(findstring avr,$(MULTISUBDIR)))\n+\n+# We are not in the avr2 (default) subdir, hence copying will work.\n+# In default dir, copying won'twork because the default multilib is\n+# built after all the others.\n+\n+ifneq (,$(findstring double64,$(MULTISUBDIR)))\n+\n+# We are in double64/libgcc or long-double64/libgcc:\n+# Just copy from the [long ]double=float multilib; we would remove any DFmode\n+# bits from this multilib variant, anyway, because the current assumption\n+# is that avr-libc hosts *all* the IEEE-double stuff.\n+\n+LIB2FUNCS_EXCLUDE := %\n+LIB1ASMFUNCS :=\n+libgcc-objects :=\n+libgcov-objects :=\n+objects :=\n+\n+t-copy-libgcc.dep: $(srcdir)/config/avr/t-copy-libgcc\n+\t-rm -f libgcc.a\n+\t-rm -f libgcov.a\n+\tcp $< $@\n+\n+libgcc.a libgcov.a libgcc_tm.h: t-copy-libgcc.dep\n+\n+Makefile: t-copy-libgcc.dep\n+\n+endif\n+endif"}, {"sha": "d34cbde731b08ccf2389080465c7a608eed1eaf7", "filename": "libgcc/config/avr/t-copy-libgcc", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f3def30844dd13e79972fa03a50af68120f7ac/libgcc%2Fconfig%2Favr%2Ft-copy-libgcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f3def30844dd13e79972fa03a50af68120f7ac/libgcc%2Fconfig%2Favr%2Ft-copy-libgcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Ft-copy-libgcc?ref=29f3def30844dd13e79972fa03a50af68120f7ac", "patch": "@@ -0,0 +1,13 @@\n+# Only used with --with-avrlibc & (-mlong-double=64 | -mdouble=64)\n+#\n+# Inserted at the end of Makefile by magic[tm].\n+# We need this *after* Makefile's rules so we can override them.\n+\n+libgcc.a: ../../libgcc/libgcc.a\n+\tcp $< $@\n+\n+libgcov.a: ../../libgcc/libgcov.a\n+\t@:\n+ifeq ($(enable_gcov),yes)\n+\tcp $< $@\n+endif"}]}