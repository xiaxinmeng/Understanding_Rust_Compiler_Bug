{"sha": "d4b29c1370b2d3a6092b3f016618d8b7b0a53f06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiMjljMTM3MGIyZDNhNjA5MmIzZjAxNjYxOGQ4YjdiMGE1M2YwNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-07-14T20:40:12Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-07-14T20:40:12Z"}, "message": "trans-intrinsic.c (conv_intrinsic_atomic_ref): Fix handling for kind mismatch with -fcoarray=lib.\n\n2014-06-14  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-intrinsic.c (conv_intrinsic_atomic_ref): Fix handling\n        for kind mismatch with -fcoarray=lib.\n\nFrom-SVN: r212525", "tree": {"sha": "d830416471cb8307789a3bc2758967dd3f855857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d830416471cb8307789a3bc2758967dd3f855857"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4b29c1370b2d3a6092b3f016618d8b7b0a53f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b29c1370b2d3a6092b3f016618d8b7b0a53f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b29c1370b2d3a6092b3f016618d8b7b0a53f06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b29c1370b2d3a6092b3f016618d8b7b0a53f06/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d110c52ee3620c3ba0f23f113383b3e8e7b3c0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d110c52ee3620c3ba0f23f113383b3e8e7b3c0eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d110c52ee3620c3ba0f23f113383b3e8e7b3c0eb"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "2c362916a5607d70b5c46f2b89ae1f5ece38e62c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b29c1370b2d3a6092b3f016618d8b7b0a53f06/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b29c1370b2d3a6092b3f016618d8b7b0a53f06/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d4b29c1370b2d3a6092b3f016618d8b7b0a53f06", "patch": "@@ -1,3 +1,8 @@\n+2014-06-14  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-intrinsic.c (conv_intrinsic_atomic_ref): Fix handling\n+\tfor kind mismatch with -fcoarray=lib.\n+\n 2014-07-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/61780"}, {"sha": "3de0b096759b52240d6c58787c353495cca4e691", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b29c1370b2d3a6092b3f016618d8b7b0a53f06/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b29c1370b2d3a6092b3f016618d8b7b0a53f06/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=d4b29c1370b2d3a6092b3f016618d8b7b0a53f06", "patch": "@@ -8563,7 +8563,8 @@ conv_intrinsic_atomic_ref (gfc_code *code)\n   atom = argse.expr;\n \n   gfc_init_se (&argse, NULL);\n-  if (gfc_option.coarray == GFC_FCOARRAY_LIB)\n+  if (gfc_option.coarray == GFC_FCOARRAY_LIB\n+      && code->ext.actual->expr->ts.kind == atom_expr->ts.kind)\n     argse.want_pointer = 1;\n   gfc_conv_expr (&argse, code->ext.actual->expr);\n   gfc_add_block_to_block (&block, &argse.pre);\n@@ -8589,6 +8590,7 @@ conv_intrinsic_atomic_ref (gfc_code *code)\n   if (gfc_option.coarray == GFC_FCOARRAY_LIB)\n     {\n       tree image_index, caf_decl, offset, token;\n+      tree orig_value = NULL_TREE, vardecl = NULL_TREE;\n \n       caf_decl = gfc_get_tree_for_caf_expr (atom_expr);\n       if (TREE_CODE (TREE_TYPE (caf_decl)) == REFERENCE_TYPE)\n@@ -8601,13 +8603,24 @@ conv_intrinsic_atomic_ref (gfc_code *code)\n \n       get_caf_token_offset (&token, &offset, caf_decl, atom, atom_expr);\n \n+      /* Different type, need type conversion.  */\n+      if (!POINTER_TYPE_P (TREE_TYPE (value)))\n+\t{\n+\t  vardecl = gfc_create_var (TREE_TYPE (TREE_TYPE (atom)), \"value\");\n+          orig_value = value;\n+          value = gfc_build_addr_expr (NULL_TREE, vardecl);\n+\t}\n+\n       tmp = build_call_expr_loc (input_location, gfor_fndecl_caf_atomic_ref, 7,\n \t\t\t\t token, offset, image_index, value, stat,\n \t\t\t\t build_int_cst (integer_type_node,\n \t\t\t\t\t\t(int) atom_expr->ts.type),\n \t\t\t\t build_int_cst (integer_type_node,\n \t\t\t\t\t\t(int) atom_expr->ts.kind));\n       gfc_add_expr_to_block (&block, tmp);\n+      if (vardecl != NULL_TREE)\n+\tgfc_add_modify (&block, orig_value,\n+\t\t\tfold_convert (TREE_TYPE (orig_value), vardecl));\n       gfc_add_block_to_block (&block, &post_block);\n       return gfc_finish_block (&block);\n     }"}]}