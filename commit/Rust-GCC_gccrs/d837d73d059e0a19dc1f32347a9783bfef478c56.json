{"sha": "d837d73d059e0a19dc1f32347a9783bfef478c56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgzN2Q3M2QwNTllMGExOWRjMWYzMjM0N2E5NzgzYmZlZjQ3OGM1Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-10-12T13:19:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-12T13:19:34Z"}, "message": "re PR middle-end/50700 (__builtin_object_size computed wrong)\n\n2011-10-12  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/50700\n\t* tree-object-size.c (addr_object_size): Simplify and treat\n\tMEM_REF bases consistently.\n\n\t* gcc.dg/builtin-object-size-12.c: New testcase.\n\nFrom-SVN: r179850", "tree": {"sha": "c797f996cea74203f9d25c593129df92728201bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c797f996cea74203f9d25c593129df92728201bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d837d73d059e0a19dc1f32347a9783bfef478c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d837d73d059e0a19dc1f32347a9783bfef478c56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d837d73d059e0a19dc1f32347a9783bfef478c56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d837d73d059e0a19dc1f32347a9783bfef478c56/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39d52ae5c1cb0d399743039e388481f77b7aa112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d52ae5c1cb0d399743039e388481f77b7aa112", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d52ae5c1cb0d399743039e388481f77b7aa112"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "6bc0bd6809bec612ebf71b78a3101f515b8dccc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d837d73d059e0a19dc1f32347a9783bfef478c56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d837d73d059e0a19dc1f32347a9783bfef478c56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d837d73d059e0a19dc1f32347a9783bfef478c56", "patch": "@@ -1,3 +1,9 @@\n+2011-10-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/50700\n+\t* tree-object-size.c (addr_object_size): Simplify and treat\n+\tMEM_REF bases consistently.\n+\n 2011-10-12  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* function.c (prepare_shrink_wrap, bb_active_p): New function."}, {"sha": "827aa2dced8565171aa9088b605c8882de7f5ccb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d837d73d059e0a19dc1f32347a9783bfef478c56/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d837d73d059e0a19dc1f32347a9783bfef478c56/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d837d73d059e0a19dc1f32347a9783bfef478c56", "patch": "@@ -1,3 +1,8 @@\n+2011-10-12  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/50700\n+\t* gcc.dg/builtin-object-size-12.c: New testcase.\n+\n 2011-10-12  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/50565"}, {"sha": "b21eb0071b340325360e0f4922d41276cf3b7642", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-12.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d837d73d059e0a19dc1f32347a9783bfef478c56/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d837d73d059e0a19dc1f32347a9783bfef478c56/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-12.c?ref=d837d73d059e0a19dc1f32347a9783bfef478c56", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+struct S {\n+    int len;\n+    char s[0];\n+};\n+int main()\n+{\n+  char buf[sizeof (struct S) + 32];\n+  if (__builtin_object_size (((struct S *)&buf[0])->s, 1) != 32)\n+    abort ();\n+  if (__builtin_object_size (((struct S *)&buf[1])->s, 1) != 31)\n+    abort ();\n+  if (__builtin_object_size (((struct S *)&buf[64])->s, 0) != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "017f8c5e933c9c1b9ed54b9c71c3ef4baf8e26c5", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d837d73d059e0a19dc1f32347a9783bfef478c56/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d837d73d059e0a19dc1f32347a9783bfef478c56/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=d837d73d059e0a19dc1f32347a9783bfef478c56", "patch": "@@ -166,24 +166,19 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n   gcc_assert (TREE_CODE (ptr) == ADDR_EXPR);\n \n   pt_var = TREE_OPERAND (ptr, 0);\n-  if (REFERENCE_CLASS_P (pt_var))\n-    pt_var = get_base_address (pt_var);\n+  while (handled_component_p (pt_var))\n+    pt_var = TREE_OPERAND (pt_var, 0);\n \n   if (pt_var\n-      && TREE_CODE (pt_var) == MEM_REF\n-      && TREE_CODE (TREE_OPERAND (pt_var, 0)) == SSA_NAME\n-      && POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (pt_var, 0))))\n+      && TREE_CODE (pt_var) == MEM_REF)\n     {\n       unsigned HOST_WIDE_INT sz;\n \n-      if (!osi || (object_size_type & 1) != 0)\n+      if (!osi || (object_size_type & 1) != 0\n+\t  || TREE_CODE (pt_var) != SSA_NAME)\n \t{\n \t  sz = compute_builtin_object_size (TREE_OPERAND (pt_var, 0),\n \t\t\t\t\t    object_size_type & ~1);\n-\t  if (host_integerp (TREE_OPERAND (pt_var, 1), 0))\n-\t    sz -= TREE_INT_CST_LOW (TREE_OPERAND (pt_var, 1));\n-\t  else\n-\t    sz = offset_limit;\n \t}\n       else\n \t{\n@@ -195,10 +190,17 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t    sz = object_sizes[object_size_type][SSA_NAME_VERSION (var)];\n \t  else\n \t    sz = unknown[object_size_type];\n-\t  if (host_integerp (TREE_OPERAND (pt_var, 1), 0))\n-\t    sz -= TREE_INT_CST_LOW (TREE_OPERAND (pt_var, 1));\n+\t}\n+      if (sz != unknown[object_size_type])\n+\t{\n+\t  double_int dsz = double_int_sub (uhwi_to_double_int (sz),\n+\t\t\t\t\t   mem_ref_offset (pt_var));\n+\t  if (double_int_negative_p (dsz))\n+\t    sz = 0;\n+\t  else if (double_int_fits_in_uhwi_p (dsz))\n+\t    sz = double_int_to_uhwi (dsz);\n \t  else\n-\t    sz = offset_limit;\n+\t    sz = unknown[object_size_type];\n \t}\n \n       if (sz != unknown[object_size_type] && sz < offset_limit)\n@@ -211,7 +213,7 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t        tree_low_cst (DECL_SIZE_UNIT (pt_var), 1) < offset_limit)\n     pt_var_size = DECL_SIZE_UNIT (pt_var);\n   else if (pt_var\n-\t   && (SSA_VAR_P (pt_var) || TREE_CODE (pt_var) == STRING_CST)\n+\t   && TREE_CODE (pt_var) == STRING_CST\n \t   && TYPE_SIZE_UNIT (TREE_TYPE (pt_var))\n \t   && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)), 1)\n \t   && (unsigned HOST_WIDE_INT)"}]}