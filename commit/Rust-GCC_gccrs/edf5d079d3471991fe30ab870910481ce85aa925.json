{"sha": "edf5d079d3471991fe30ab870910481ce85aa925", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRmNWQwNzlkMzQ3MTk5MWZlMzBhYjg3MDkxMDQ4MWNlODVhYTkyNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-12-30T15:10:45Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-12-30T15:10:45Z"}, "message": "predicates.md (ext_register_operand): Do not reject registers without upper parts here.\n\n\t* config/i386/predicates.md (ext_register_operand): Do not reject\n\tregisters without upper parts here.\n\t* config/i386/i386.md (extv<mode>): Copy registers without\n\tupper parts in operand 1 to a pseudo.\n\t(extzv<mode>): Ditto.\n\t(insv<mode>): Ditto.\n\nFrom-SVN: r243976", "tree": {"sha": "c5d0d6be903ba286884bf40bd4d88d8758899848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5d0d6be903ba286884bf40bd4d88d8758899848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edf5d079d3471991fe30ab870910481ce85aa925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf5d079d3471991fe30ab870910481ce85aa925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edf5d079d3471991fe30ab870910481ce85aa925", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edf5d079d3471991fe30ab870910481ce85aa925/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54aecc5ad92c9f73b011f74d82068b9c6f4194d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54aecc5ad92c9f73b011f74d82068b9c6f4194d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54aecc5ad92c9f73b011f74d82068b9c6f4194d6"}], "stats": {"total": 49, "additions": 30, "deletions": 19}, "files": [{"sha": "629c5509a92442bfdba5ebf08c43b7f95611255f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf5d079d3471991fe30ab870910481ce85aa925/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf5d079d3471991fe30ab870910481ce85aa925/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edf5d079d3471991fe30ab870910481ce85aa925", "patch": "@@ -1,3 +1,12 @@\n+2016-12-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (ext_register_operand): Do not reject\n+\tregisters without upper parts here.\n+\t* config/i386/i386.md (extv<mode>): Copy registers without\n+\tupper parts in operand 1 to a pseudo.\n+\t(extzv<mode>): Ditto.\n+\t(insv<mode>): Ditto.\n+\n 2016-12-30  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/standards.texi (Standards): Remove broken reference to"}, {"sha": "b1a8814b1f91b768a71016c3029ee3273c093d70", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf5d079d3471991fe30ab870910481ce85aa925/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf5d079d3471991fe30ab870910481ce85aa925/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=edf5d079d3471991fe30ab870910481ce85aa925", "patch": "@@ -2766,7 +2766,10 @@\n   if (INTVAL (operands[2]) != 8 || INTVAL (operands[3]) != 8)\n     FAIL;\n \n-  if (! ext_register_operand (operands[1], VOIDmode))\n+  unsigned int regno = reg_or_subregno (operands[1]);\n+\n+  /* Be careful to expand only with registers having upper parts.  */\n+  if (regno <= LAST_VIRTUAL_REGISTER && !QI_REGNO_P (regno))\n     operands[1] = copy_to_reg (operands[1]);\n })\n \n@@ -2794,7 +2797,10 @@\n   if (INTVAL (operands[2]) != 8 || INTVAL (operands[3]) != 8)\n     FAIL;\n \n-  if (! ext_register_operand (operands[1], VOIDmode))\n+  unsigned int regno = reg_or_subregno (operands[1]);\n+\n+  /* Be careful to expand only with registers having upper parts.  */\n+  if (regno <= LAST_VIRTUAL_REGISTER && !QI_REGNO_P (regno))\n     operands[1] = copy_to_reg (operands[1]);\n })\n \n@@ -2878,10 +2884,13 @@\n   if (INTVAL (operands[1]) != 8 || INTVAL (operands[2]) != 8)\n     FAIL;\n \n-  dst = operands[0];\n-  \n-  if (!ext_register_operand (dst, VOIDmode))\n-    dst = copy_to_reg (dst);\n+  unsigned int regno = reg_or_subregno (operands[0]);\n+\n+  /* Be careful to expand only with registers having upper parts.  */\n+  if (regno <= LAST_VIRTUAL_REGISTER && !QI_REGNO_P (regno))\n+    dst = copy_to_reg (operands[0]);\n+  else\n+    dst = operands[0];\n \n   emit_insn (gen_insv<mode>_1 (dst, operands[3]));\n "}, {"sha": "b0b9ce22705b2329b914d96c01f7034bdcedc237", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edf5d079d3471991fe30ab870910481ce85aa925/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edf5d079d3471991fe30ab870910481ce85aa925/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=edf5d079d3471991fe30ab870910481ce85aa925", "patch": "@@ -85,20 +85,13 @@\n   (and (match_code \"reg\")\n        (match_test \"REGNO (op) == FLAGS_REG\")))\n \n-;; Match an SI or HImode register for a zero_extract.\n+;; Match a DI, SI or HImode register for a zero_extract.\n (define_special_predicate \"ext_register_operand\"\n-  (match_operand 0 \"register_operand\")\n-{\n-  if ((!TARGET_64BIT || GET_MODE (op) != DImode)\n-      && GET_MODE (op) != SImode && GET_MODE (op) != HImode)\n-    return false;\n-  if (SUBREG_P (op))\n-    op = SUBREG_REG (op);\n-\n-  /* Be careful to accept only registers having upper parts.  */\n-  return (REG_P (op)\n-\t  && (REGNO (op) > LAST_VIRTUAL_REGISTER || QI_REGNO_P (REGNO (op))));\n-})\n+  (and (match_operand 0 \"register_operand\")\n+       (ior (and (match_test \"TARGET_64BIT\")\n+\t\t (match_test \"GET_MODE (op) == DImode\"))\n+\t    (match_test \"GET_MODE (op) == SImode\")\n+\t    (match_test \"GET_MODE (op) == HImode\"))))\n \n ;; Match register operands, but include memory operands for TARGET_SSE_MATH.\n (define_predicate \"register_ssemem_operand\""}]}