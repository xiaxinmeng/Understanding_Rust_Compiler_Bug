{"sha": "57d76ee9cf6265e012fad6286adfaeaba9414c11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkNzZlZTljZjYyNjVlMDEyZmFkNjI4NmFkZmFlYWJhOTQxNGMxMQ==", "commit": {"author": {"name": "JeanHeyd Meneide", "email": "phdofthehouse@gmail.com", "date": "2020-12-03T19:17:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-03T19:17:13Z"}, "message": "libtdc++: Define std::source_location for C++20\n\nThis doesn't define a new _GLIBCXX_HAVE_BUILTIN_SOURCE_LOCATION macro.\nbecause using __has_builtin(__builtin_source_location) is sufficient.\nCurrently only GCC supports it, but if/when Clang and Intel add it the\n__has_builtin check should for them too.\n\nCo-authored-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/doxygen/user.cfg.in (INPUT): Add <source_location>.\n\t* include/Makefile.am: Add <source_location>.\n\t* include/Makefile.in: Regenerate.\n\t* include/std/version (__cpp_lib_source_location): Define.\n\t* include/std/source_location: New file.\n\t* testsuite/18_support/source_location/1.cc: New test.\n\t* testsuite/18_support/source_location/consteval.cc: New test.\n\t* testsuite/18_support/source_location/srcloc.h: New test.\n\t* testsuite/18_support/source_location/version.cc: New test.", "tree": {"sha": "1ff09050c875a5ad18866930b481a3a235e3abf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff09050c875a5ad18866930b481a3a235e3abf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57d76ee9cf6265e012fad6286adfaeaba9414c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d76ee9cf6265e012fad6286adfaeaba9414c11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d76ee9cf6265e012fad6286adfaeaba9414c11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d76ee9cf6265e012fad6286adfaeaba9414c11/comments", "author": {"login": "ThePhD", "id": 2886436, "node_id": "MDQ6VXNlcjI4ODY0MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/2886436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePhD", "html_url": "https://github.com/ThePhD", "followers_url": "https://api.github.com/users/ThePhD/followers", "following_url": "https://api.github.com/users/ThePhD/following{/other_user}", "gists_url": "https://api.github.com/users/ThePhD/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePhD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePhD/subscriptions", "organizations_url": "https://api.github.com/users/ThePhD/orgs", "repos_url": "https://api.github.com/users/ThePhD/repos", "events_url": "https://api.github.com/users/ThePhD/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePhD/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e433b3461ab64b38350817392a77efb67bb78b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e433b3461ab64b38350817392a77efb67bb78b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e433b3461ab64b38350817392a77efb67bb78b4"}], "stats": {"total": 454, "additions": 454, "deletions": 0}, "files": [{"sha": "2261d572efb3ac526bbe0e680b0b7b1e591beef2", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=57d76ee9cf6265e012fad6286adfaeaba9414c11", "patch": "@@ -891,6 +891,7 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/semaphore \\\n                          include/set \\\n                          include/shared_mutex \\\n+                         include/source_location \\\n                          include/span \\\n                          include/sstream \\\n                          include/stack \\"}, {"sha": "9dbc7dcb32db896b3796700bca450b99518f7302", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=57d76ee9cf6265e012fad6286adfaeaba9414c11", "patch": "@@ -73,6 +73,7 @@ std_headers = \\\n \t${std_srcdir}/semaphore \\\n \t${std_srcdir}/set \\\n \t${std_srcdir}/shared_mutex \\\n+\t${std_srcdir}/source_location \\\n \t${std_srcdir}/span \\\n \t${std_srcdir}/sstream \\\n \t${std_srcdir}/syncstream \\"}, {"sha": "0cb0fdf5ef17d01cb72db4173f1fbbdd7b14b9aa", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=57d76ee9cf6265e012fad6286adfaeaba9414c11", "patch": "@@ -419,6 +419,7 @@ std_headers = \\\n \t${std_srcdir}/semaphore \\\n \t${std_srcdir}/set \\\n \t${std_srcdir}/shared_mutex \\\n+\t${std_srcdir}/source_location \\\n \t${std_srcdir}/span \\\n \t${std_srcdir}/sstream \\\n \t${std_srcdir}/syncstream \\"}, {"sha": "13d4bd488570ee0ba12e165044c1d5fba9ca41b7", "filename": "libstdc++-v3/include/std/source_location", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsource_location", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsource_location", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsource_location?ref=57d76ee9cf6265e012fad6286adfaeaba9414c11", "patch": "@@ -0,0 +1,92 @@\n+// <source_location> -*- C++ -*-\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/source_location\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_SRCLOC\n+#define _GLIBCXX_SRCLOC 1\n+\n+#if __cplusplus > 201703L && __has_builtin(__builtin_source_location)\n+#include <bits/c++config.h>\n+\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+#define __cpp_lib_source_location 201907L\n+\n+  /// A class that describes a location in source code.\n+  struct source_location\n+  {\n+  private:\n+    using uint_least32_t = __UINT_LEAST32_TYPE__;\n+\n+  public:\n+\n+    // [support.srcloc.cons], creation\n+    static consteval source_location\n+    current(const void* __p = __builtin_source_location()) noexcept\n+    {\n+      source_location __ret;\n+      __ret._M_impl = static_cast <const __impl*>(__p);\n+      return __ret;\n+    }\n+\n+    constexpr source_location() noexcept { }\n+\n+    // [support.srcloc.obs], observers\n+    constexpr uint_least32_t\n+    line() const noexcept\n+    { return _M_impl ? _M_impl->_M_line : 0u; }\n+\n+    constexpr uint_least32_t\n+    column() const noexcept\n+    { return _M_impl ? _M_impl->_M_column : 0u; }\n+\n+    constexpr const char*\n+    file_name() const noexcept\n+    { return _M_impl ? _M_impl->_M_file_name : \"\"; }\n+\n+    constexpr const char*\n+    function_name() const noexcept\n+    { return _M_impl ? _M_impl->_M_function_name : \"\"; }\n+\n+  private:\n+    struct __impl\n+    {\n+      const char* _M_file_name;\n+      const char* _M_function_name;\n+      unsigned _M_line;\n+      unsigned _M_column;\n+    };\n+\n+    const __impl* _M_impl = nullptr;\n+  };\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+#endif // C++20 && __builtin_source_location\n+#endif // _GLIBCXX_SRCLOC"}, {"sha": "e4a8bed52ab6609942c35d23049f6f03fa3c3947", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=57d76ee9cf6265e012fad6286adfaeaba9414c11", "patch": "@@ -238,6 +238,9 @@\n # define __cpp_lib_semaphore 201907L\n #endif\n #define __cpp_lib_shift 201806L\n+#if __has_builtin(__builtin_source_location)\n+# define __cpp_lib_source_location 201907L\n+#endif\n #if __cpp_lib_concepts\n # define __cpp_lib_span 202002L\n #endif"}, {"sha": "c945aaa4d97cffda6056cb7ded3664f4a914f284", "filename": "libstdc++-v3/testsuite/18_support/source_location/1.cc", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2F1.cc?ref=57d76ee9cf6265e012fad6286adfaeaba9414c11", "patch": "@@ -0,0 +1,155 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Example from C++ Standard Working Draft N4842, November 2019 Mailing\n+// Adapted for testing.\n+\n+// { dg-options \"-std=gnu++2a -include string -include stdexcept\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <source_location>\n+\n+#ifndef __cpp_lib_source_location\n+# error \"Feature-test macro for source_location missing in <source_location>\"\n+#elif __cpp_lib_source_location != 201907L\n+# error \"Feature-test macro for source_location has wrong value in <source_location>\"\n+#endif\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+#include \"srcloc.h\"\n+\n+\n+struct s {\n+  std::source_location member = std::source_location::current();\n+  int other_member = 1;\n+\n+  s(std::source_location loc = std::source_location::current())\n+    : member(loc) // values of member refer to calling function\n+  { }\n+\n+  s(int blather) : // values of member refer to this location\n+    other_member(blather)\n+  { }\n+};\n+\n+std::source_location\n+f(std::source_location a = std::source_location::current());\n+\n+std::source_location\n+f(std::source_location a)\n+{ return a; }\n+\n+auto\n+g()\n+{\n+  struct srcloc_and_line\n+  {\n+    std::source_location sl;\n+    unsigned line;\n+  };\n+\n+  std::source_location c = std::source_location::current();\n+  return srcloc_and_line{ f(c), __LINE__ - 1 };\n+}\n+\n+int main ()\n+{\n+  std::source_location main_sl = std::source_location::current();\n+  unsigned main_sl_line = __LINE__ - 1;\n+  std::source_location f_arg_sl = f(main_sl);\n+  unsigned f_arg_sl_line = main_sl_line;\n+  auto [g_sl, g_sl_line] = g();\n+  std::source_location f_sl = f();\n+  unsigned f_sl_line = __LINE__ - 1;\n+  std::source_location h_sl = h(); // defined in ./srcloc.h\n+  s member_main_sl(main_sl);\n+  s member_defaulted_sl(1);\n+  s member_sl = s{};\n+  const unsigned member_sl_line = __LINE__ - 1;\n+\n+  using namespace std::string_view_literals;\n+\n+  std::string_view main_sl_fn_name(main_sl.function_name());\n+  std::string_view main_sl_fi_name(main_sl.file_name());\n+  VERIFY(main_sl.line() == main_sl_line);\n+  // closing paren of call\n+  VERIFY(main_sl.column() == 64);\n+  VERIFY(main_sl_fn_name.ends_with(\"main\"sv));\n+  VERIFY(main_sl_fi_name.ends_with(\"1.cc\"sv));\n+\n+  std::string_view f_arg_sl_fn_name(f_arg_sl.function_name());\n+  std::string_view f_arg_sl_fi_name(f_arg_sl.file_name());\n+  VERIFY(f_arg_sl.line() == f_arg_sl_line);\n+  // closing paren of call\n+  VERIFY(f_arg_sl.column() == 64);\n+  VERIFY(f_arg_sl_fn_name.ends_with(\"main\"sv));\n+  VERIFY(f_arg_sl_fi_name.ends_with(\"1.cc\"sv));\n+\n+  std::string_view g_sl_fn_name(g_sl.function_name());\n+  std::string_view g_sl_fi_name(g_sl.file_name());\n+  VERIFY(g_sl.line() == g_sl_line);\n+  VERIFY(g_sl.column() == 58); // closing paren of call\n+  VERIFY(g_sl_fn_name.ends_with(\"g\"sv));\n+  VERIFY(g_sl_fi_name.ends_with(\"1.cc\"sv));\n+\n+  std::string_view h_sl_fn_name(h_sl.function_name());\n+  std::string_view h_sl_fi_name(h_sl.file_name());\n+  VERIFY(h_sl.line() == 23);\n+  VERIFY(h_sl.column() == 58); // closing paren of call\n+  VERIFY(h_sl_fn_name.ends_with(\"h\"sv));\n+  VERIFY(h_sl_fi_name.ends_with(\"srcloc.h\"sv));\n+\n+  std::string_view member_main_sl_fn_name(member_main_sl.member.function_name());\n+  std::string_view member_main_sl_fi_name(member_main_sl.member.file_name());\n+  VERIFY(member_main_sl.member.line() == main_sl_line);\n+  VERIFY(member_main_sl.member.column() == 64);\n+  VERIFY(member_main_sl_fn_name.ends_with(\"main\"sv));\n+  VERIFY(member_main_sl_fi_name.ends_with(\"1.cc\"sv));\n+\n+  std::string_view member_defaulted_sl_fi_name(\n+    member_defaulted_sl.member.file_name());\n+  std::string_view member_defaulted_sl_fn_name(\n+    member_defaulted_sl.member.function_name());\n+  VERIFY(member_defaulted_sl.member.line() == 46);\n+  // closing paren of constructor declaration\n+  VERIFY(member_defaulted_sl.member.column() == 25);\n+#if 0\n+  VERIFY(member_defaulted_sl_fn_name.starts_with(\"s::s(int)\"sv));\n+#endif\n+  VERIFY(member_defaulted_sl_fi_name.ends_with(\"1.cc\"sv));\n+\n+  std::string_view member_sl_fi_name(\n+    member_sl.member.file_name());\n+  std::string_view member_sl_fn_name(\n+    member_sl.member.function_name());\n+  VERIFY(member_sl.member.line() == member_sl_line);\n+  // closing brace/paren of constructor\n+  VERIFY(member_sl.member.column() == 19);\n+  VERIFY(member_sl_fn_name.starts_with(\"main\"sv));\n+  VERIFY(member_sl_fi_name.ends_with(\"1.cc\"sv));\n+\n+  std::string_view f_sl_fi_name(f_sl.file_name());\n+  std::string_view f_sl_fn_name(f_sl.function_name());\n+  VERIFY(f_sl.line() == f_sl_line);\n+  // closing paren of call\n+  VERIFY(f_sl.column() == 33);\n+  VERIFY(f_sl_fn_name.ends_with(\"main\"sv));\n+  VERIFY(f_sl_fi_name.ends_with(\"1.cc\"sv));\n+\n+  return 0;\n+}"}, {"sha": "9b137f8641d3c47d7d3ca81463ca2062419484fc", "filename": "libstdc++-v3/testsuite/18_support/source_location/consteval.cc", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fconsteval.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fconsteval.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fconsteval.cc?ref=57d76ee9cf6265e012fad6286adfaeaba9414c11", "patch": "@@ -0,0 +1,149 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Example from C++ Standard Working Draft N4842, November 2019 Mailing\n+// Adapted for testing.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <source_location>\n+#include <string_view>\n+\n+struct s {\n+  std::source_location member = std::source_location::current();\n+  int other_member = 1;\n+\n+  constexpr s(std::source_location loc = std::source_location::current())\n+    : member(loc) // values of member refer to calling function\n+  { }\n+\n+  constexpr s(int blather) : // values of member refer to this location\n+    other_member(blather)\n+  { }\n+};\n+\n+constexpr std::source_location\n+f(std::source_location a = std::source_location::current())\n+{ return a; }\n+\n+constexpr auto\n+g()\n+{\n+  struct srcloc_and_line\n+  {\n+    std::source_location sl;\n+    unsigned line;\n+  };\n+\n+  std::source_location c = std::source_location::current();\n+  return srcloc_and_line{ f(c), __LINE__ - 1 };\n+}\n+\n+#include \"srcloc.h\"\n+\n+int main ()\n+{\n+  constexpr std::source_location main_sl = std::source_location::current();\n+  constexpr unsigned main_sl_line = __LINE__ - 1;\n+  constexpr std::source_location f_arg_sl = f(main_sl);\n+  constexpr unsigned f_arg_sl_line = main_sl_line;\n+  constexpr std::source_location g_sl = g().sl;\n+  constexpr unsigned g_sl_line = g().line;\n+  constexpr std::source_location f_sl = f();\n+  constexpr unsigned f_sl_line = __LINE__ - 1;\n+  constexpr std::source_location h_sl = h(); // defined in ./srcloc.h\n+  constexpr s member_main_sl(main_sl);\n+  constexpr s member_defaulted_sl(1);\n+  constexpr s member_sl = s{};\n+  constexpr unsigned member_sl_line = __LINE__ - 1;\n+\n+  using namespace std::string_view_literals;\n+\n+  static_assert (std::source_location::current ().line () == __LINE__);\n+  static_assert (std::source_location::current ().column () == 49);\n+\n+\n+  constexpr std::string_view main_sl_fn_name(main_sl.function_name());\n+  constexpr std::string_view main_sl_fi_name(main_sl.file_name());\n+  static_assert(main_sl.line() == main_sl_line);\n+  // closing paren of call\n+  static_assert(main_sl.column() == 74);\n+  static_assert(main_sl_fn_name.ends_with(\"main\"sv));\n+  static_assert(main_sl_fi_name.ends_with(\"consteval.cc\"sv));\n+\n+  constexpr std::string_view f_arg_sl_fn_name(f_arg_sl.function_name());\n+  constexpr std::string_view f_arg_sl_fi_name(f_arg_sl.file_name());\n+  static_assert(f_arg_sl.line() == f_arg_sl_line);\n+  // closing paren of call\n+  static_assert(f_arg_sl.column() == 74);\n+  static_assert(f_arg_sl_fn_name.ends_with(\"main\"sv));\n+  static_assert(f_arg_sl_fi_name.ends_with(\"consteval.cc\"sv));\n+\n+  constexpr std::string_view g_sl_fn_name(g_sl.function_name());\n+  constexpr std::string_view g_sl_fi_name(g_sl.file_name());\n+  static_assert(g_sl.line() == g_sl_line);\n+  static_assert(g_sl.column() == 58); // closing paren of call\n+  static_assert(g_sl_fn_name.ends_with(\"g\"sv));\n+  static_assert(g_sl_fi_name.ends_with(\"consteval.cc\"sv));\n+\n+  constexpr std::string_view h_sl_fn_name(h_sl.function_name());\n+  constexpr std::string_view h_sl_fi_name(h_sl.file_name());\n+  static_assert(h_sl.line() == 23);\n+  static_assert(h_sl.column() == 58); // closing paren of call\n+  static_assert(h_sl_fn_name.ends_with(\"h\"sv));\n+  static_assert(h_sl_fi_name.ends_with(\"srcloc.h\"sv));\n+\n+  constexpr std::string_view member_main_sl_fn_name(member_main_sl.member.function_name());\n+  constexpr std::string_view member_main_sl_fi_name(member_main_sl.member.file_name());\n+  static_assert(member_main_sl.member.line() == main_sl_line);\n+  static_assert(member_main_sl.member.column() == 74);\n+  static_assert(member_main_sl_fn_name.ends_with(\"main\"sv));\n+  static_assert(member_main_sl_fi_name.ends_with(\"consteval.cc\"sv));\n+\n+  constexpr std::string_view member_defaulted_sl_fi_name(\n+    member_defaulted_sl.member.file_name());\n+  constexpr std::string_view member_defaulted_sl_fn_name(\n+    member_defaulted_sl.member.function_name());\n+  static_assert(member_defaulted_sl.member.line() == 36);\n+  // closing paren of constructor declaration\n+  static_assert(member_defaulted_sl.member.column() == 25);\n+#if 0\n+  static_assert(member_defaulted_sl_fn_name.ends_with(\"s::s(int)\"sv));\n+#endif\n+  static_assert(member_defaulted_sl_fi_name.ends_with(\"consteval.cc\"sv));\n+\n+  constexpr std::string_view member_sl_fi_name(\n+    member_sl.member.file_name());\n+  constexpr std::string_view member_sl_fn_name(\n+    member_sl.member.function_name());\n+  static_assert(member_sl.member.line() == member_sl_line);\n+  // closing brace/paren of constructor\n+  static_assert(member_sl.member.column() == 29);\n+  static_assert(member_sl_fn_name.starts_with(\"main\"sv));\n+  static_assert(member_sl_fi_name.ends_with(\"consteval.cc\"sv));\n+\n+  constexpr std::string_view f_sl_fi_name(f_sl.file_name());\n+  constexpr std::string_view f_sl_fn_name(f_sl.function_name());\n+  static_assert(f_sl.line() == f_sl_line);\n+  // closing paren of call\n+  static_assert(f_sl.column() == 43);\n+  static_assert(f_sl_fn_name.ends_with(\"main\"sv));\n+  static_assert(f_sl_fi_name.ends_with(\"consteval.cc\"sv));\n+\n+  return 0;\n+}"}, {"sha": "9b05458ee2fa8d22b016cd853b68476907785551", "filename": "libstdc++-v3/testsuite/18_support/source_location/srcloc.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fsrcloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fsrcloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fsrcloc.h?ref=57d76ee9cf6265e012fad6286adfaeaba9414c11", "patch": "@@ -0,0 +1,25 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <source_location>\n+\n+constexpr std::source_location\n+h()\n+{\n+  std::source_location a = std::source_location::current();\n+  return a;\n+}"}, {"sha": "f2b3bf6fa1ed2df307b73d4807608d2177d6c897", "filename": "libstdc++-v3/testsuite/18_support/source_location/version.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d76ee9cf6265e012fad6286adfaeaba9414c11/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fsource_location%2Fversion.cc?ref=57d76ee9cf6265e012fad6286adfaeaba9414c11", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do preprocess { target c++2a } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_source_location\n+# error \"Feature-test macro for source_location missing in <version>\"\n+#elif __cpp_lib_source_location != 201907L\n+# error \"Feature-test macro for source_location has wrong value in <version>\"\n+#endif"}]}