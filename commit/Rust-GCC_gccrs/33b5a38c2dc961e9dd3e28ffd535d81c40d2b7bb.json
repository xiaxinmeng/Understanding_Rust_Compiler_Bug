{"sha": "33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNiNWEzOGMyZGM5NjFlOWRkM2UyOGZmZDUzNWQ4MWM0MGQyYjdiYg==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2019-01-16T18:29:00Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2019-01-16T18:29:00Z"}, "message": "aarch64-builtins.c (aarch64_simd_expand_args): Use correct max nunits for endian swap.\n\n2019-01-16  Tamar Christina  <tamar.christina@arm.com>\n\n\t* config/aarch64/aarch64-builtins.c (aarch64_simd_expand_args): Use\n\tcorrect max nunits for endian swap.\n\t(aarch64_expand_fcmla_builtin): Correct subreg code.\n\t* config/aarch64/aarch64-simd.md (aarch64_fcmla_lane<rot><mode>,\n\taarch64_fcmla_laneq<rot>v4hf, aarch64_fcmlaq_lane<rot><mode>): Correct\n\tlane endianness.\n\nFrom-SVN: r267983", "tree": {"sha": "97ae3064583c6ca6839ea87941b7f2de97780fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ae3064583c6ca6839ea87941b7f2de97780fdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e7cbff5c2a391f025b29cc0ce05e1d7d01b5d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7cbff5c2a391f025b29cc0ce05e1d7d01b5d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7cbff5c2a391f025b29cc0ce05e1d7d01b5d59"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "9460ad2bcdca999d3ee2eb721f54661d06646c29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb", "patch": "@@ -1,3 +1,12 @@\n+2019-01-16  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_simd_expand_args): Use\n+\tcorrect max nunits for endian swap.\n+\t(aarch64_expand_fcmla_builtin): Correct subreg code.\n+\t* config/aarch64/aarch64-simd.md (aarch64_fcmla_lane<rot><mode>,\n+\taarch64_fcmla_laneq<rot>v4hf, aarch64_fcmlaq_lane<rot><mode>): Correct\n+\tlane endianness.\n+\n 2019-01-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.c (alpha_gimplify_va_arg):"}, {"sha": "c8f5a555f6724433dc6cea1cff3547c0c66c54a7", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb", "patch": "@@ -1197,7 +1197,9 @@ aarch64_simd_expand_args (rtx target, int icode, int have_retval,\n \t\t    = GET_MODE_NUNITS (vmode).to_constant ();\n \t\t  aarch64_simd_lane_bounds (op[opc], 0, nunits / 2, exp);\n \t\t  /* Keep to GCC-vector-extension lane indices in the RTL.  */\n-\t\t  op[opc] = aarch64_endian_lane_rtx (vmode, INTVAL (op[opc]));\n+\t\t  int lane = INTVAL (op[opc]);\n+\t\t  op[opc] = gen_int_mode (ENDIAN_LANE_N (nunits / 2, lane),\n+\t\t\t\t\t  SImode);\n \t\t}\n \t      /* Fall through - if the lane index isn't a constant then\n \t\t the next case will error.  */\n@@ -1443,14 +1445,12 @@ aarch64_expand_fcmla_builtin (tree exp, rtx target, int fcode)\n   int nunits = GET_MODE_NUNITS (quadmode).to_constant ();\n   aarch64_simd_lane_bounds (lane_idx, 0, nunits / 2, exp);\n \n-  /* Keep to GCC-vector-extension lane indices in the RTL.  */\n-  lane_idx = aarch64_endian_lane_rtx (quadmode, INTVAL (lane_idx));\n-\n   /* Generate the correct register and mode.  */\n   int lane = INTVAL (lane_idx);\n \n   if (lane < nunits / 4)\n-    op2 = simplify_gen_subreg (d->mode, op2, quadmode, 0);\n+    op2 = simplify_gen_subreg (d->mode, op2, quadmode,\n+\t\t\t       subreg_lowpart_offset (d->mode, quadmode));\n   else\n     {\n       /* Select the upper 64 bits, either a V2SF or V4HF, this however\n@@ -1460,15 +1460,24 @@ aarch64_expand_fcmla_builtin (tree exp, rtx target, int fcode)\n \t gen_highpart_mode generates code that isn't optimal.  */\n       rtx temp1 = gen_reg_rtx (d->mode);\n       rtx temp2 = gen_reg_rtx (DImode);\n-      temp1 = simplify_gen_subreg (d->mode, op2, quadmode, 0);\n+      temp1 = simplify_gen_subreg (d->mode, op2, quadmode,\n+\t\t\t\t   subreg_lowpart_offset (d->mode, quadmode));\n       temp1 = simplify_gen_subreg (V2DImode, temp1, d->mode, 0);\n-      emit_insn (gen_aarch64_get_lanev2di (temp2, temp1     , const1_rtx));\n+      if (BYTES_BIG_ENDIAN)\n+\temit_insn (gen_aarch64_get_lanev2di (temp2, temp1, const0_rtx));\n+      else\n+\temit_insn (gen_aarch64_get_lanev2di (temp2, temp1, const1_rtx));\n       op2 = simplify_gen_subreg (d->mode, temp2, GET_MODE (temp2), 0);\n \n       /* And recalculate the index.  */\n       lane -= nunits / 4;\n     }\n \n+  /* Keep to GCC-vector-extension lane indices in the RTL, only nunits / 4\n+     (max nunits in range check) are valid.  Which means only 0-1, so we\n+     only need to know the order in a V2mode.  */\n+  lane_idx = aarch64_endian_lane_rtx (V2DImode, lane);\n+\n   if (!target)\n     target = gen_reg_rtx (d->mode);\n   else\n@@ -1477,8 +1486,7 @@ aarch64_expand_fcmla_builtin (tree exp, rtx target, int fcode)\n   rtx pat = NULL_RTX;\n \n   if (d->lane)\n-    pat = GEN_FCN (d->icode) (target, op0, op1, op2,\n-\t\t\t      gen_int_mode (lane, SImode));\n+    pat = GEN_FCN (d->icode) (target, op0, op1, op2, lane_idx);\n   else\n     pat = GEN_FCN (d->icode) (target, op0, op1, op2);\n "}, {"sha": "805d7a895fad4c7370260fd77ef9864805206b07", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=33b5a38c2dc961e9dd3e28ffd535d81c40d2b7bb", "patch": "@@ -455,7 +455,10 @@\n \t\t\t\t   (match_operand:SI 4 \"const_int_operand\" \"n\")]\n \t\t\t\t   FCMLA)))]\n   \"TARGET_COMPLEX\"\n-  \"fcmla\\t%0.<Vtype>, %2.<Vtype>, %3.<FCMLA_maybe_lane>, #<rot>\"\n+{\n+  operands[4] = aarch64_endian_lane_rtx (<VHALF>mode, INTVAL (operands[4]));\n+  return \"fcmla\\t%0.<Vtype>, %2.<Vtype>, %3.<FCMLA_maybe_lane>, #<rot>\";\n+}\n   [(set_attr \"type\" \"neon_fcmla\")]\n )\n \n@@ -467,7 +470,10 @@\n \t\t\t\t (match_operand:SI 4 \"const_int_operand\" \"n\")]\n \t\t\t\t FCMLA)))]\n   \"TARGET_COMPLEX\"\n-  \"fcmla\\t%0.4h, %2.4h, %3.h[%4], #<rot>\"\n+{\n+  operands[4] = aarch64_endian_lane_rtx (V4HFmode, INTVAL (operands[4]));\n+  return \"fcmla\\t%0.4h, %2.4h, %3.h[%4], #<rot>\";\n+}\n   [(set_attr \"type\" \"neon_fcmla\")]\n )\n \n@@ -479,7 +485,12 @@\n \t\t\t\t     (match_operand:SI 4 \"const_int_operand\" \"n\")]\n \t\t\t\t     FCMLA)))]\n   \"TARGET_COMPLEX\"\n-  \"fcmla\\t%0.<Vtype>, %2.<Vtype>, %3.<FCMLA_maybe_lane>, #<rot>\"\n+{\n+  int nunits = GET_MODE_NUNITS (<VHALF>mode).to_constant ();\n+  operands[4]\n+    = gen_int_mode (ENDIAN_LANE_N (nunits / 2, INTVAL (operands[4])), SImode);\n+  return \"fcmla\\t%0.<Vtype>, %2.<Vtype>, %3.<FCMLA_maybe_lane>, #<rot>\";\n+}\n   [(set_attr \"type\" \"neon_fcmla\")]\n )\n "}]}