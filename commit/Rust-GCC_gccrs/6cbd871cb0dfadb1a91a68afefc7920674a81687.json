{"sha": "6cbd871cb0dfadb1a91a68afefc7920674a81687", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNiZDg3MWNiMGRmYWRiMWE5MWE2OGFmZWZjNzkyMDY3NGE4MTY4Nw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-06-29T21:24:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-06-29T21:24:57Z"}, "message": "Makefile.am (pch1_input, [...]): Move from pch_*.\n\n2006-06-29  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/Makefile.am (pch1_input, pch1_output_builddir,\n\tpch1_outputj_installdir, pch1_source): Move from pch_*.\n\t(pch2_input, pch2_output_builddir,\n\tpch2_output_installdir, pch2_source): Clone for ext.\n\t(pch3_input, pch3_output_builddir,\n\tpch3_output_installdir, pch3_source): Clone for tr1.\n\t(install-pch): Same.\n\t* include/Makefile.in: Regenerate.\n\n\t* include/precompiled: New directory.\n\t* include/stdc++.h: Move...\n\t* include/precompiled/stdc++.h: ... here.\t\t\n\t* include/precompiled/stdtr1c++.h: New.\n\t* include/precompiled/extc++.h: New.\n\n\t* testsuite/lib/libstdc++.exp (libstdc++_init): Set PCH_CXXFLAGS\n\tto -include bits/stdtr1c++.h.\n\nFrom-SVN: r115078", "tree": {"sha": "2deec29f022ee46f26c33e1d77182ddca0ead37b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2deec29f022ee46f26c33e1d77182ddca0ead37b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cbd871cb0dfadb1a91a68afefc7920674a81687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbd871cb0dfadb1a91a68afefc7920674a81687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cbd871cb0dfadb1a91a68afefc7920674a81687", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cbd871cb0dfadb1a91a68afefc7920674a81687/comments", "author": null, "committer": null, "parents": [{"sha": "5656a184e839836bcacf8f8ed4b94b565159c190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5656a184e839836bcacf8f8ed4b94b565159c190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5656a184e839836bcacf8f8ed4b94b565159c190"}], "stats": {"total": 253, "additions": 226, "deletions": 27}, "files": [{"sha": "67d3879c833ed9c4795e8ff322f8bf715fd79cde", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6cbd871cb0dfadb1a91a68afefc7920674a81687", "patch": "@@ -1,3 +1,23 @@\n+2006-06-29  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/Makefile.am (pch1_input, pch1_output_builddir,\n+\tpch1_outputj_installdir, pch1_source): Move from pch_*.\n+\t(pch2_input, pch2_output_builddir,\n+\tpch2_output_installdir, pch2_source): Clone for ext.\n+\t(pch3_input, pch3_output_builddir,\n+\tpch3_output_installdir, pch3_source): Clone for tr1.\n+\t(install-pch): Same.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* include/precompiled: New directory.\n+\t* include/stdc++.h: Move...\n+\t* include/precompiled/stdc++.h: ... here.\t\t\n+\t* include/precompiled/stdtr1c++.h: New.\n+\t* include/precompiled/extc++.h: New.\n+\n+\t* testsuite/lib/libstdc++.exp (libstdc++_init): Set PCH_CXXFLAGS\n+\tto -include bits/stdtr1c++.h.\n+\n 2006-06-29  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/lib/libstdc++.exp (v3_target_compile): Set timeout to"}, {"sha": "dbaae32751fa37b927e3f8984796a763410cc8d9", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=6cbd871cb0dfadb1a91a68afefc7920674a81687", "patch": "@@ -763,10 +763,22 @@ thread_host_headers = \\\n \t${host_builddir}/gthr-tpf.h \\\n \t${host_builddir}/gthr-default.h\n \n-pch_input = ${host_builddir}/stdc++.h\n-pch_output_builddir = ${host_builddir}/stdc++.h.gch\n-pch_output_installdir = ${host_installdir}/stdc++.h.gch\n-pch_source = ${glibcxx_srcdir}/include/stdc++.h\n+pch1_input = ${host_builddir}/stdc++.h\n+pch1_output_builddir = ${host_builddir}/stdc++.h.gch\n+pch1_output_installdir = ${host_installdir}/stdc++.h.gch\n+pch1_source = ${glibcxx_srcdir}/include/precompiled/stdc++.h\n+\n+pch2_input = ${host_builddir}/stdtr1c++.h\n+pch2_output_builddir = ${host_builddir}/stdtr1c++.h.gch\n+pch2_output_installdir = ${host_installdir}/stdtr1c++.h.gch\n+pch2_source = ${glibcxx_srcdir}/include/precompiled/stdtr1c++.h\n+\n+pch3_input = ${host_builddir}/extc++.h\n+pch3_output_builddir = ${host_builddir}/extc++.h.gch\n+pch3_output_installdir = ${host_installdir}/extc++.h.gch\n+pch3_source = ${glibcxx_srcdir}/include/precompiled/extc++.h\n+\n+pch_input = ${pch1_input} ${pch2_input} ${pch3_input}\n PCHFLAGS=-Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n if GLIBCXX_BUILD_PCH\n pch_build = ${pch_input}\n@@ -1026,13 +1038,32 @@ ${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcxx_thread_h} \\\n \t    < ${toplevel_srcdir}/gcc/${glibcxx_thread_h} > $@\n \n # Build a precompiled C++ include, stdc++.h.gch.\n-${pch_input}: ${allstamped} ${host_builddir}/c++config.h ${pch_source}\n-\ttouch ${pch_input}; \\\n-\tif [ ! -d \"${pch_output_builddir}\" ]; then \\\n-\t  mkdir -p ${pch_output_builddir}; \\\n+${pch1_input}: ${allstamped} ${host_builddir}/c++config.h ${pch1_source}\n+\ttouch ${pch1_input}; \\\n+\tif [ ! -d \"${pch1_output_builddir}\" ]; then \\\n+\t  mkdir -p ${pch1_output_builddir}; \\\n+\tfi; \\\n+\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch1_source} -O0 -g -o ${pch1_output_builddir}/O0g.gch; \\\n+\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch1_source} -O2 -g -o ${pch1_output_builddir}/O2g.gch;\n+\n+\n+# Build a precompiled TR1 include, stdtr1c++.h.gch.\n+${pch2_input}: ${allstamped} ${host_builddir}/c++config.h ${pch2_source} ${pch1_input}\n+\ttouch ${pch2_input}; \\\n+\tif [ ! -d \"${pch2_output_builddir}\" ]; then \\\n+\t  mkdir -p ${pch2_output_builddir}; \\\n \tfi; \\\n-\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch_source} -O0 -g -o ${pch_output_builddir}/O0g.gch; \\\n-\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch_source} -O2 -g -o ${pch_output_builddir}/O2g.gch;\n+\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch2_source} -O2 -g -o ${pch2_output_builddir}/O2g.gch; \n+\n+\n+# Build a precompiled extension include, extc++.h.gch.\n+${pch3_input}: ${allstamped} ${host_builddir}/c++config.h ${pch3_source} ${pch2_input}\n+\ttouch ${pch3_input}; \\\n+\tif [ ! -d \"${pch3_output_builddir}\" ]; then \\\n+\t  mkdir -p ${pch3_output_builddir}; \\\n+\tfi; \\\n+\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch3_source} -O2 -g -o ${pch3_output_builddir}/O2g.gch; \n+\n \n # For robustness sake (in light of junk files or in-source\n # configuration), copy from the build or source tree to the install\n@@ -1132,9 +1163,12 @@ install-headers:\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${host_installdir}; done\n \n install-pch:\n-\t$(mkinstalldirs) $(DESTDIR)${pch_output_installdir}\n-\tfor file in ${pch_output_builddir}/*; do \\\n-\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch_output_installdir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${pch1_output_installdir}\n+\tfor file in ${pch1_output_builddir}/*; do \\\n+\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch1_output_installdir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${pch2_output_installdir}\n+\tfor file in ${pch2_output_builddir}/*; do \\\n+\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch2_output_installdir}; done\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = ${pch_input} ${pch_output_builddir}/*"}, {"sha": "184cc80616b8e7f69a6ed8f3a17f81e29d1310b8", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=6cbd871cb0dfadb1a91a68afefc7920674a81687", "patch": "@@ -978,10 +978,19 @@ thread_host_headers = \\\n \t${host_builddir}/gthr-tpf.h \\\n \t${host_builddir}/gthr-default.h\n \n-pch_input = ${host_builddir}/stdc++.h\n-pch_output_builddir = ${host_builddir}/stdc++.h.gch\n-pch_output_installdir = ${host_installdir}/stdc++.h.gch\n-pch_source = ${glibcxx_srcdir}/include/stdc++.h\n+pch1_input = ${host_builddir}/stdc++.h\n+pch1_output_builddir = ${host_builddir}/stdc++.h.gch\n+pch1_output_installdir = ${host_installdir}/stdc++.h.gch\n+pch1_source = ${glibcxx_srcdir}/include/precompiled/stdc++.h\n+pch2_input = ${host_builddir}/stdtr1c++.h\n+pch2_output_builddir = ${host_builddir}/stdtr1c++.h.gch\n+pch2_output_installdir = ${host_installdir}/stdtr1c++.h.gch\n+pch2_source = ${glibcxx_srcdir}/include/precompiled/stdtr1c++.h\n+pch3_input = ${host_builddir}/extc++.h\n+pch3_output_builddir = ${host_builddir}/extc++.h.gch\n+pch3_output_installdir = ${host_installdir}/extc++.h.gch\n+pch3_source = ${glibcxx_srcdir}/include/precompiled/extc++.h\n+pch_input = ${pch1_input} ${pch2_input} ${pch3_input}\n PCHFLAGS = -Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n @GLIBCXX_BUILD_PCH_FALSE@pch_build = \n @GLIBCXX_BUILD_PCH_TRUE@pch_build = ${pch_input}\n@@ -1401,13 +1410,29 @@ ${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcxx_thread_h} \\\n \t    < ${toplevel_srcdir}/gcc/${glibcxx_thread_h} > $@\n \n # Build a precompiled C++ include, stdc++.h.gch.\n-${pch_input}: ${allstamped} ${host_builddir}/c++config.h ${pch_source}\n-\ttouch ${pch_input}; \\\n-\tif [ ! -d \"${pch_output_builddir}\" ]; then \\\n-\t  mkdir -p ${pch_output_builddir}; \\\n+${pch1_input}: ${allstamped} ${host_builddir}/c++config.h ${pch1_source}\n+\ttouch ${pch1_input}; \\\n+\tif [ ! -d \"${pch1_output_builddir}\" ]; then \\\n+\t  mkdir -p ${pch1_output_builddir}; \\\n \tfi; \\\n-\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch_source} -O0 -g -o ${pch_output_builddir}/O0g.gch; \\\n-\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch_source} -O2 -g -o ${pch_output_builddir}/O2g.gch;\n+\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch1_source} -O0 -g -o ${pch1_output_builddir}/O0g.gch; \\\n+\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch1_source} -O2 -g -o ${pch1_output_builddir}/O2g.gch;\n+\n+# Build a precompiled TR1 include, stdtr1c++.h.gch.\n+${pch2_input}: ${allstamped} ${host_builddir}/c++config.h ${pch2_source} ${pch1_input}\n+\ttouch ${pch2_input}; \\\n+\tif [ ! -d \"${pch2_output_builddir}\" ]; then \\\n+\t  mkdir -p ${pch2_output_builddir}; \\\n+\tfi; \\\n+\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch2_source} -O2 -g -o ${pch2_output_builddir}/O2g.gch; \n+\n+# Build a precompiled extension include, extc++.h.gch.\n+${pch3_input}: ${allstamped} ${host_builddir}/c++config.h ${pch3_source} ${pch2_input}\n+\ttouch ${pch3_input}; \\\n+\tif [ ! -d \"${pch3_output_builddir}\" ]; then \\\n+\t  mkdir -p ${pch3_output_builddir}; \\\n+\tfi; \\\n+\t$(CXX) $(PCHFLAGS) $(AM_CPPFLAGS) ${pch3_source} -O2 -g -o ${pch3_output_builddir}/O2g.gch; \n \n # For robustness sake (in light of junk files or in-source\n # configuration), copy from the build or source tree to the install\n@@ -1504,9 +1529,12 @@ install-headers:\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${host_installdir}; done\n \n install-pch:\n-\t$(mkinstalldirs) $(DESTDIR)${pch_output_installdir}\n-\tfor file in ${pch_output_builddir}/*; do \\\n-\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch_output_installdir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${pch1_output_installdir}\n+\tfor file in ${pch1_output_builddir}/*; do \\\n+\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch1_output_installdir}; done\n+\t$(mkinstalldirs) $(DESTDIR)${pch2_output_installdir}\n+\tfor file in ${pch2_output_builddir}/*; do \\\n+\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch2_output_installdir}; done\n \n # Stop implicit '.o' make rules from ever stomping on extensionless\n # headers, in the improbable case where some foolish, crack-addled"}, {"sha": "2d7169276689faf4fe026a8072ee7d2dc9164b0b", "filename": "libstdc++-v3/include/precompiled/extc++.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h?ref=6cbd871cb0dfadb1a91a68afefc7920674a81687", "patch": "@@ -0,0 +1,61 @@\n+// C++ includes used for precompiling extensions -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <bits/stdtr1c++.h>\n+\n+#include <ext/algorithm>\n+#include <ext/array_allocator.h>\n+#include <ext/bitmap_allocator.h>\n+#include <ext/codecvt_specializations.h>\n+#include <ext/debug_allocator.h>\n+#include <ext/functional>\n+#include <ext/hash_map>\n+#include <ext/hash_set>\n+#include <ext/iterator>\n+#include <ext/malloc_allocator.h>\n+#include <ext/memory>\n+#include <ext/mt_allocator.h>\n+#include <ext/new_allocator.h>\n+#include <ext/numeric>\n+#include <ext/pod_char_traits.h>\n+#include <ext/pool_allocator.h>\n+#include <ext/rb_tree>\n+#include <ext/rope>\n+#include <ext/slist>\n+#include <ext/stdio_filebuf.h>\n+#include <ext/stdio_sync_filebuf.h>\n+#include <ext/typelist.h>\n+#include <ext/vstring.h>\n+#include <ext/pb_ds/assoc_container.hpp>\n+#include <ext/pb_ds/priority_queue.hpp>\n+#include <ext/pb_ds/exception.hpp>\n+#include <ext/pb_ds/hash_policy.hpp>\n+#include <ext/pb_ds/list_update_policy.hpp>\n+#include <ext/pb_ds/tree_policy.hpp>\n+#include <ext/pb_ds/trie_policy.hpp>"}, {"sha": "c2816792938727c14701f5d833e4d3854db92da3", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=6cbd871cb0dfadb1a91a68afefc7920674a81687", "previous_filename": "libstdc++-v3/include/stdc++.h"}, {"sha": "08822a011d2851a71c603be61335b2fa2acf78a5", "filename": "libstdc++-v3/include/precompiled/stdtr1c++.h", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdtr1c%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdtr1c%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdtr1c%2B%2B.h?ref=6cbd871cb0dfadb1a91a68afefc7920674a81687", "patch": "@@ -0,0 +1,54 @@\n+// C++ includes used for precompiling TR1 -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <bits/stdc++.h>\n+\n+#include <tr1/array>\n+#include <tr1/cctype>\n+#include <tr1/cfenv>\n+#include <tr1/cfloat>\n+#include <tr1/cinttypes>\n+#include <tr1/climits>\n+#include <tr1/cmath>\n+#include <tr1/complex>\n+#include <tr1/cstdarg>\n+#include <tr1/cstdbool>\n+#include <tr1/cstdint>\n+#include <tr1/cstdio>\n+#include <tr1/cstdlib>\n+#include <tr1/ctgmath>\n+#include <tr1/ctime>\n+#include <tr1/cwchar>\n+#include <tr1/cwctype>\n+#include <tr1/functional>\n+#include <tr1/random>\n+#include <tr1/tuple>\n+#include <tr1/unordered_map>\n+#include <tr1/unordered_set>\n+#include <tr1/utility>"}, {"sha": "64ce9d18b379db11d0682df31e58e24a950ee892", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cbd871cb0dfadb1a91a68afefc7920674a81687/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=6cbd871cb0dfadb1a91a68afefc7920674a81687", "patch": "@@ -213,7 +213,9 @@ proc libstdc++_init { testfile } {\n \tset lines [v3_target_compile $src \"config[pid].o\" object \\\n \t\t   \"additional_flags=-include additional_flags=bits/stdc++.h\"]\n \tif {$lines == \"\" } {\n-\t    set PCH_CXXFLAGS \"-include bits/stdc++.h\"\n+#\t    set PCH_CXXFLAGS \"-include bits/extc++.h\"\n+\t    set PCH_CXXFLAGS \"-include bits/stdtr1c++.h\"\n+#\t    set PCH_CXXFLAGS \"-include bits/stdc++.h\"\n \t} else {\n \t    set PCH_CXXFLAGS \"\"\n \t}"}]}