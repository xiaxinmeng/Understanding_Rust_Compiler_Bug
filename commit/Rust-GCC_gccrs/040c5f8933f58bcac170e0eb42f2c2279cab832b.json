{"sha": "040c5f8933f58bcac170e0eb42f2c2279cab832b", "node_id": "C_kwDOANBUbNoAKDA0MGM1Zjg5MzNmNThiY2FjMTcwZTBlYjQyZjJjMjI3OWNhYjgzMmI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-09-27T13:50:39Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-09-28T09:54:59Z"}, "message": "dump: Emit visibility when dumping items", "tree": {"sha": "47013a7d4f0adb3a12ebf5667dfd97fb7e16d159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47013a7d4f0adb3a12ebf5667dfd97fb7e16d159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/040c5f8933f58bcac170e0eb42f2c2279cab832b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040c5f8933f58bcac170e0eb42f2c2279cab832b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040c5f8933f58bcac170e0eb42f2c2279cab832b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040c5f8933f58bcac170e0eb42f2c2279cab832b/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "960d9d289e47ecad67a32f6cf5ace0c11ab84191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/960d9d289e47ecad67a32f6cf5ace0c11ab84191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/960d9d289e47ecad67a32f6cf5ace0c11ab84191"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "3d1b42d70e334e332060f5a8f69553fcfc90ba58", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040c5f8933f58bcac170e0eb42f2c2279cab832b/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040c5f8933f58bcac170e0eb42f2c2279cab832b/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=040c5f8933f58bcac170e0eb42f2c2279cab832b", "patch": "@@ -108,6 +108,31 @@ Dump::emit_attrib (const Attribute &attrib)\n   stream << \"]\";\n }\n \n+void\n+Dump::emit_visibility (const Visibility &vis)\n+{\n+  switch (vis.get_vis_type ())\n+    {\n+    case Visibility::PUB:\n+      stream << \"pub \";\n+      break;\n+    case Visibility::PUB_CRATE:\n+      stream << \"pub(crate) \";\n+      break;\n+    case Visibility::PUB_SELF:\n+      stream << \"pub(self) \";\n+      break;\n+    case Visibility::PUB_SUPER:\n+      stream << \"pub(super) \";\n+      break;\n+    case Visibility::PUB_IN_PATH:\n+      stream << \"pub(in \" << vis.get_path ().as_string () << \") \";\n+      break;\n+    case Visibility::PRIV:\n+      break;\n+    }\n+}\n+\n std::ostream &\n Dump::emit_indented_string (const std::string &value,\n \t\t\t    const std::string &comment)\n@@ -522,7 +547,10 @@ Dump::visit (TypeBoundWhereClauseItem &item)\n void\n Dump::visit (Method &method)\n {\n-  stream << indentation << \"fn \" << method.get_method_name () << '(';\n+  // FIXME: Do we really need to dump the indentation here?\n+  stream << indentation;\n+  emit_visibility (method.get_visibility ());\n+  stream << \"fn \" << method.get_method_name () << '(';\n \n   auto &self = method.get_self_param ();\n   stream << self.as_string ();\n@@ -579,6 +607,7 @@ Dump::visit (UseDeclaration &use_decl)\n void\n Dump::visit (Function &function)\n {\n+  emit_visibility (function.get_visibility ());\n   stream << \"fn \" << function.get_function_name ();\n \n   if (function.has_generics ())\n@@ -674,6 +703,7 @@ void\n Dump::format_function_common (std::unique_ptr<Type> &return_type,\n \t\t\t      std::unique_ptr<BlockExpr> &block)\n {\n+  // FIXME: This should format the `<vis> fn <name> ( [args] )` as well\n   if (return_type)\n     {\n       stream << \"-> \";\n@@ -714,7 +744,13 @@ void\n Dump::visit (TraitItemMethod &item)\n {\n   auto method = item.get_trait_method_decl ();\n-  stream << indentation << \"fn \" << method.get_identifier () << '(';\n+\n+  // FIXME: Do we really need to dump the indentation here?\n+  stream << indentation;\n+\n+  // FIXME: Can we have visibility here?\n+  // emit_visibility (method.get_visibility ());\n+  stream << \"fn \" << method.get_identifier () << '(';\n \n   auto &self = method.get_self_param ();\n   stream << self.as_string ();\n@@ -754,6 +790,8 @@ Dump::visit (Trait &trait)\n       stream << \"\\n\" << indentation;\n     }\n \n+  emit_visibility (trait.get_visibility ());\n+\n   stream << \"trait \" << trait.get_identifier ();\n \n   // Traits actually have an implicit Self thrown at the start so we must expect\n@@ -834,6 +872,8 @@ Dump::visit (ExternalStaticItem &item)\n void\n Dump::visit (ExternalFunctionItem &function)\n {\n+  emit_visibility (function.get_visibility ());\n+\n   stream << \"fn \" << function.get_identifier () << '(';\n \n   for (size_t i = 0; i < function.get_function_params ().size (); i++)"}, {"sha": "a5a99f2b03e4a90d93b19c099da7e86f56283714", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/040c5f8933f58bcac170e0eb42f2c2279cab832b/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/040c5f8933f58bcac170e0eb42f2c2279cab832b/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=040c5f8933f58bcac170e0eb42f2c2279cab832b", "patch": "@@ -80,8 +80,17 @@ class Dump : public ASTVisitor\n    * Format a function's definition parameter\n    */\n   void format_function_param (FunctionParam &param);\n+\n+  /**\n+   * Emit an attribute\n+   */\n   void emit_attrib (const Attribute &attrib);\n \n+  /**\n+   * Emit an item's visibility\n+   */\n+  void emit_visibility (const Visibility &vis);\n+\n   /**\n    * Emit an indented string with an optional extra comment\n    */"}]}