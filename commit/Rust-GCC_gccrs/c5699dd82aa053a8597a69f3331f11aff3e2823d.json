{"sha": "c5699dd82aa053a8597a69f3331f11aff3e2823d", "node_id": "C_kwDOANBUbNoAKGM1Njk5ZGQ4MmFhMDUzYTg1OTdhNjlmMzMzMWYxMWFmZjNlMjgyM2Q", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-08-24T20:31:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-01T12:33:46Z"}, "message": "c++: set TYPE_STRING_FLAG for char8_t\n\nWhile looking at the DWARF handling of char8_t I wondered why we weren't\nsetting TREE_STRING_FLAG on it.  I hoped that setting that flag would be an\neasy fix for PR102958, but it doesn't seem to be sufficicent.  But it still\nseems correct.\n\nI also tried setting the flag on char16_t and char32_t, but that broke\nbecause braced_list_to_string assumes char-sized elements.  Since we don't\nset the flag on wchar_t, I abandoned that idea.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.cc (c_common_nodes_and_builtins): Set TREE_STRING_FLAG on\n\tchar8_t.\n\t(braced_list_to_string): Check for char-sized elements.", "tree": {"sha": "daccdb73056af2cc89492fbc634516371479807e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daccdb73056af2cc89492fbc634516371479807e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5699dd82aa053a8597a69f3331f11aff3e2823d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5699dd82aa053a8597a69f3331f11aff3e2823d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5699dd82aa053a8597a69f3331f11aff3e2823d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5699dd82aa053a8597a69f3331f11aff3e2823d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0550e306d4b5aaf7bdb6e908d265dbaa63344271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0550e306d4b5aaf7bdb6e908d265dbaa63344271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0550e306d4b5aaf7bdb6e908d265dbaa63344271"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "9746504195b26512160db11e4f87b8110b828919", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5699dd82aa053a8597a69f3331f11aff3e2823d/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5699dd82aa053a8597a69f3331f11aff3e2823d/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=c5699dd82aa053a8597a69f3331f11aff3e2823d", "patch": "@@ -4550,6 +4550,7 @@ c_common_nodes_and_builtins (void)\n   if (c_dialect_cxx ())\n     {\n       char8_type_node = make_unsigned_type (char8_type_size);\n+      TYPE_STRING_FLAG (char8_type_node) = true;\n \n       if (flag_char8_t)\n         record_builtin_type (RID_CHAR8, \"char8_t\", char8_type_node);\n@@ -9345,12 +9346,15 @@ braced_list_to_string (tree type, tree ctor, bool member)\n   if (!member && !tree_fits_uhwi_p (typesize))\n     return ctor;\n \n-  /* If the target char size differes from the host char size, we'd risk\n+  /* If the target char size differs from the host char size, we'd risk\n      loosing data and getting object sizes wrong by converting to\n      host chars.  */\n   if (TYPE_PRECISION (char_type_node) != CHAR_BIT)\n     return ctor;\n \n+  /* STRING_CST doesn't support wide characters.  */\n+  gcc_checking_assert (TYPE_PRECISION (TREE_TYPE (type)) == CHAR_BIT);\n+\n   /* If the array has an explicit bound, use it to constrain the size\n      of the string.  If it doesn't, be sure to create a string that's\n      as long as implied by the index of the last zero specified via"}]}