{"sha": "34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964", "node_id": "C_kwDOANBUbNoAKDM0YmEzZDlhMmJmNzI3NDJiMWMxNTBhMmRkMTdkMTBlM2UzZjA5NjQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-08T13:46:13Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-08T13:46:13Z"}, "message": "c++: constrained auto in lambda using outer tparms [PR103706]\n\nHere we're crashing during satisfaction of the lambda's placeholder type\nconstraints because the constraints depend on the template arguments\nfrom the enclosing scope, which aren't part of the lambda's DECL_TI_ARGS.\n\nThis patch fixes this by making do_auto_deduction consider the\n\"regenerating\" template arguments of a lambda for satisfaction,\nmirroring what's done in satisfy_declaration_constraints.\n\n\tPR c++/103706\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (satisfy_declaration_constraints): Use\n\tlambda_regenerating_args instead.\n\t* cp-tree.h (lambda_regenerating_args): Declare.\n\t* pt.cc (lambda_regenerating_args): Define, split out from\n\tsatisfy_declaration_constraints.\n\t(do_auto_deduction): Use lambda_regenerating_args to obtain the\n\tfull set of outer template arguments for satisfaction when\n\tinside a lambda.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-lambda18.C: New test.", "tree": {"sha": "96d3de214b499a8a4bcfab81c3b7031a429884f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96d3de214b499a8a4bcfab81c3b7031a429884f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964/comments", "author": null, "committer": null, "parents": [{"sha": "61b783995fac5355827ada1f8544052119a23606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b783995fac5355827ada1f8544052119a23606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61b783995fac5355827ada1f8544052119a23606"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "b7b9439f34bbf1e264f3ff581b421b01b027cd35", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964", "patch": "@@ -3154,12 +3154,11 @@ satisfy_declaration_constraints (tree t, sat_info info)\n \t set of template arguments.  Augment this with the outer template\n \t arguments that were used to regenerate the lambda.  */\n       gcc_assert (!args || TMPL_ARGS_DEPTH (args) == 1);\n-      tree lambda = CLASSTYPE_LAMBDA_EXPR (DECL_CONTEXT (t));\n-      tree outer_args = TI_ARGS (LAMBDA_EXPR_REGEN_INFO (lambda));\n+      tree regen_args = lambda_regenerating_args (t);\n       if (args)\n-\targs = add_to_template_args (outer_args, args);\n+\targs = add_to_template_args (regen_args, args);\n       else\n-\targs = outer_args;\n+\targs = regen_args;\n     }\n \n   /* If any arguments depend on template parameters, we can't"}, {"sha": "f09055e4852043250086e1c12a9a09687b746b0e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964", "patch": "@@ -7742,6 +7742,7 @@ extern void finish_lambda_scope\t\t\t(void);\n extern tree start_lambda_function\t\t(tree fn, tree lambda_expr);\n extern void finish_lambda_function\t\t(tree body);\n extern bool regenerated_lambda_fn_p\t\t(tree);\n+extern tree lambda_regenerating_args\t\t(tree);\n extern tree most_general_lambda\t\t\t(tree);\n extern tree finish_omp_target\t\t\t(location_t, tree, tree, bool);\n extern void finish_omp_target_clauses\t\t(location_t, tree, tree *);"}, {"sha": "b58067d50e9d01ba2c5b528220d7773973c9177b", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964", "patch": "@@ -14446,6 +14446,21 @@ most_general_lambda (tree t)\n   return t;\n }\n \n+/* Return the set of template arguments used to regenerate the lambda T\n+   from its most general lambda.  */\n+\n+tree\n+lambda_regenerating_args (tree t)\n+{\n+  if (LAMBDA_FUNCTION_P (t))\n+    t = CLASSTYPE_LAMBDA_EXPR (DECL_CONTEXT (t));\n+  gcc_assert (TREE_CODE (t) == LAMBDA_EXPR);\n+  if (tree ti = LAMBDA_EXPR_REGEN_INFO (t))\n+    return TI_ARGS (ti);\n+  else\n+    return NULL_TREE;\n+}\n+\n /* We're instantiating a variable from template function TCTX.  Return the\n    corresponding current enclosing scope.  We can match them up using\n    DECL_SOURCE_LOCATION because lambdas only ever have one source location, and\n@@ -30127,12 +30142,24 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t    return type;\n \t}\n \n-      if ((context == adc_return_type\n-\t   || context == adc_variable_type\n-\t   || context == adc_decomp_type)\n-\t  && current_function_decl\n-\t  && DECL_TEMPLATE_INFO (current_function_decl))\n-\touter_targs = DECL_TI_ARGS (current_function_decl);\n+      if (context == adc_return_type\n+\t  || context == adc_variable_type\n+\t  || context == adc_decomp_type)\n+\tif (tree fn = current_function_decl)\n+\t  if (DECL_TEMPLATE_INFO (fn) || LAMBDA_FUNCTION_P (fn))\n+\t    {\n+\t      outer_targs = DECL_TEMPLATE_INFO (fn)\n+\t\t? DECL_TI_ARGS (fn) : NULL_TREE;\n+\t      if (LAMBDA_FUNCTION_P (fn))\n+\t\t{\n+\t\t  /* As in satisfy_declaration_constraints.  */\n+\t\t  tree regen_args = lambda_regenerating_args (fn);\n+\t\t  if (outer_targs)\n+\t\t    outer_targs = add_to_template_args (regen_args, outer_targs);\n+\t\t  else\n+\t\t    outer_targs = regen_args;\n+\t\t}\n+\t    }\n \n       tree full_targs = add_to_template_args (outer_targs, targs);\n "}, {"sha": "f1058daf31715711f3c26d665e4e803208e829c5", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda18.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda18.C?ref=34ba3d9a2bf72742b1c150a2dd17d10e3e3f0964", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/103706\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, class U> concept C = __is_same(U, int);\n+\n+template<class T> void f() {\n+  []() -> C<T> auto {\n+    C<T> auto x = T(); // { dg-error \"constraints\" }\n+    return T(); // { dg-error \"constraints\" }\n+  }();\n+}\n+\n+template void f<int>(); // { dg-bogus \"\" }\n+template void f<char>(); // { dg-message \"required from here\" }"}]}