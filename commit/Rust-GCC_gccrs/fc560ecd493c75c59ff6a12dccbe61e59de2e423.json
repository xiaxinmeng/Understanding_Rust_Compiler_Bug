{"sha": "fc560ecd493c75c59ff6a12dccbe61e59de2e423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1NjBlY2Q0OTNjNzVjNTlmZjZhMTJkY2NiZTYxZTU5ZGUyZTQyMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-12T09:15:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-12T09:15:54Z"}, "message": "re PR libfortran/88807 (misleading indentation warnings building libgfortran)\n\n\tPR libfortran/88807\n\t* m4/minloc0.m4: Reindent to avoid -Wmisleading-indentation warnings.\n\t* generated/minloc0_4_i1.c: Regenerated.\n\t* generated/minloc0_4_i2.c: Regenerated.\n\t* generated/minloc0_4_i4.c: Regenerated.\n\t* generated/minloc0_4_i8.c: Regenerated.\n\t* generated/minloc0_4_i16.c: Regenerated.\n\t* generated/minloc0_4_r4.c: Regenerated.\n\t* generated/minloc0_4_r8.c: Regenerated.\n\t* generated/minloc0_4_r10.c: Regenerated.\n\t* generated/minloc0_4_r16.c: Regenerated.\n\t* generated/minloc0_8_i1.c: Regenerated.\n\t* generated/minloc0_8_i2.c: Regenerated.\n\t* generated/minloc0_8_i4.c: Regenerated.\n\t* generated/minloc0_8_i8.c: Regenerated.\n\t* generated/minloc0_8_i16.c: Regenerated.\n\t* generated/minloc0_8_r4.c: Regenerated.\n\t* generated/minloc0_8_r8.c: Regenerated.\n\t* generated/minloc0_8_r10.c: Regenerated.\n\t* generated/minloc0_8_r16.c: Regenerated.\n\t* generated/minloc0_16_i1.c: Regenerated.\n\t* generated/minloc0_16_i2.c: Regenerated.\n\t* generated/minloc0_16_i4.c: Regenerated.\n\t* generated/minloc0_16_i8.c: Regenerated.\n\t* generated/minloc0_16_i16.c: Regenerated.\n\t* generated/minloc0_16_r4.c: Regenerated.\n\t* generated/minloc0_16_r8.c: Regenerated.\n\t* generated/minloc0_16_r10.c: Regenerated.\n\t* generated/minloc0_16_r16.c: Regenerated.\n\nFrom-SVN: r267875", "tree": {"sha": "516e028f095be1bc9a067c12b360d511455fe7ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/516e028f095be1bc9a067c12b360d511455fe7ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc560ecd493c75c59ff6a12dccbe61e59de2e423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc560ecd493c75c59ff6a12dccbe61e59de2e423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc560ecd493c75c59ff6a12dccbe61e59de2e423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc560ecd493c75c59ff6a12dccbe61e59de2e423/comments", "author": null, "committer": null, "parents": [{"sha": "831a2e2f86dcc1aa5989424af3e16f4a607c6e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/831a2e2f86dcc1aa5989424af3e16f4a607c6e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/831a2e2f86dcc1aa5989424af3e16f4a607c6e9e"}], "stats": {"total": 1212, "additions": 622, "deletions": 590}, "files": [{"sha": "d5fdb484377c17cb4bd25d72657fccf092845d24", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -1,3 +1,35 @@\n+2019-01-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libfortran/88807\n+\t* m4/minloc0.m4: Reindent to avoid -Wmisleading-indentation warnings.\n+\t* generated/minloc0_4_i1.c: Regenerated.\n+\t* generated/minloc0_4_i2.c: Regenerated.\n+\t* generated/minloc0_4_i4.c: Regenerated.\n+\t* generated/minloc0_4_i8.c: Regenerated.\n+\t* generated/minloc0_4_i16.c: Regenerated.\n+\t* generated/minloc0_4_r4.c: Regenerated.\n+\t* generated/minloc0_4_r8.c: Regenerated.\n+\t* generated/minloc0_4_r10.c: Regenerated.\n+\t* generated/minloc0_4_r16.c: Regenerated.\n+\t* generated/minloc0_8_i1.c: Regenerated.\n+\t* generated/minloc0_8_i2.c: Regenerated.\n+\t* generated/minloc0_8_i4.c: Regenerated.\n+\t* generated/minloc0_8_i8.c: Regenerated.\n+\t* generated/minloc0_8_i16.c: Regenerated.\n+\t* generated/minloc0_8_r4.c: Regenerated.\n+\t* generated/minloc0_8_r8.c: Regenerated.\n+\t* generated/minloc0_8_r10.c: Regenerated.\n+\t* generated/minloc0_8_r16.c: Regenerated.\n+\t* generated/minloc0_16_i1.c: Regenerated.\n+\t* generated/minloc0_16_i2.c: Regenerated.\n+\t* generated/minloc0_16_i4.c: Regenerated.\n+\t* generated/minloc0_16_i8.c: Regenerated.\n+\t* generated/minloc0_16_i16.c: Regenerated.\n+\t* generated/minloc0_16_r4.c: Regenerated.\n+\t* generated/minloc0_16_r8.c: Regenerated.\n+\t* generated/minloc0_16_r10.c: Regenerated.\n+\t* generated/minloc0_16_r16.c: Regenerated.\n+\n 2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR other/16615\n@@ -6,8 +38,8 @@\n \t* io/unit.c: Likewise.\n \n 2019-01-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n-\tHarald Anlauf <anlauf@gmx.de>\n-\tTobias Burnus <burnus@gcc.gnu.org>\n+\t    Harald Anlauf <anlauf@gmx.de>\n+\t    Tobias Burnus <burnus@gcc.gnu.org>\n \n \tPR fortran/45424\n \t* Makefile.am: Add intrinsics/is_contiguous.c."}, {"sha": "b49cafaf17da6c0025185c8a1c357a8c7926f189", "filename": "libgfortran/generated/minloc0_16_i1.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i1.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "df9ed4290cc067c7a80b45fd2de70ac267910da0", "filename": "libgfortran/generated/minloc0_16_i16.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i16.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "86f5137e7dd2209d3aac3c1637c98c1134977bab", "filename": "libgfortran/generated/minloc0_16_i2.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i2.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "8ef528c91efd7190df21017f1836cace600ff483", "filename": "libgfortran/generated/minloc0_16_i4.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i4.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "e749a71cb39c3ba889dab3a0b8c3b5a4bfac33e8", "filename": "libgfortran/generated/minloc0_16_i8.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i8.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "517d0c5e538eb1d9dcb55c7491259a7681acfb1b", "filename": "libgfortran/generated/minloc0_16_r10.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r10.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "c367e3a10b6a0445a394330dab30abb34ede6e78", "filename": "libgfortran/generated/minloc0_16_r16.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r16.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "c64ed5062999ed2d043b46f788f6b1eeb8f7dd33", "filename": "libgfortran/generated/minloc0_16_r4.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r4.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "bf644c64d8e0fde9da0a09255bc6c17428d92590", "filename": "libgfortran/generated/minloc0_16_r8.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r8.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "b89d50497f66fe16119fef76bfc21b0dc1f7c9d8", "filename": "libgfortran/generated/minloc0_4_i1.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i1.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "b449d61dc7cea9d6112e3709730fa54592c7b84e", "filename": "libgfortran/generated/minloc0_4_i16.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i16.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "3df8baea2a2f1a744e215d2fa8891897fdb3b7c7", "filename": "libgfortran/generated/minloc0_4_i2.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i2.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "a8f6a5d405dc58e4f257fd2cdf75493f530a7793", "filename": "libgfortran/generated/minloc0_4_i4.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i4.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "c7472b263babd2f18b6103b0ab8e2b6103bf77ae", "filename": "libgfortran/generated/minloc0_4_i8.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i8.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "ef161be46544ea7b5651254628a39cc96d01205e", "filename": "libgfortran/generated/minloc0_4_r10.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r10.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "1f285adb604f28bc759271099bed6798923c1c44", "filename": "libgfortran/generated/minloc0_4_r16.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r16.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "bb7a5de3f1571386eb08d033b6ceb7dfbe4b62b0", "filename": "libgfortran/generated/minloc0_4_r4.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r4.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "741dd3003fb575559bf477576afb230baee5fda0", "filename": "libgfortran/generated/minloc0_4_r8.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r8.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "2f486e53bd95168c4cc86782340922906504062c", "filename": "libgfortran/generated/minloc0_8_i1.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i1.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "c717ec7a1ca9d85799781f10bcab56e582210f26", "filename": "libgfortran/generated/minloc0_8_i16.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i16.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "75405c77cfbb524b85f3c5e852653205d883ac74", "filename": "libgfortran/generated/minloc0_8_i2.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i2.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "c04074fb7b85318f5020cfa5397036e25c641fdf", "filename": "libgfortran/generated/minloc0_8_i4.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i4.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "1820918afce6943e8c23f4955aa29ba2d96aaf52", "filename": "libgfortran/generated/minloc0_8_i8.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i8.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "b3229eb0bb299d81ecca779e450dd0aa7d80b9e8", "filename": "libgfortran/generated/minloc0_8_r10.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r10.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "cc8336406c910eb46ce7bfc0ffee0882ac399d2d", "filename": "libgfortran/generated/minloc0_8_r16.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r16.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "46e749fb995b2adddc7e8775766319189a0daf69", "filename": "libgfortran/generated/minloc0_8_r4.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r4.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "b741b242408953ff35f881ef7760721f184e37d3", "filename": "libgfortran/generated/minloc0_8_r8.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r8.c?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -123,27 +123,27 @@ minloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n \t  /* Implementation end.  */\n \t  /* Advance to the next element.  */\n \t  base += sstride[0];"}, {"sha": "959bad3936c4295970d5034472b0fe41f3d9c438", "filename": "libgfortran/m4/minloc0.m4", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fm4%2Fminloc0.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc560ecd493c75c59ff6a12dccbe61e59de2e423/libgfortran%2Fm4%2Fminloc0.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fminloc0.m4?ref=fc560ecd493c75c59ff6a12dccbe61e59de2e423", "patch": "@@ -63,27 +63,27 @@ FOREACH_FUNCTION(\n \t}\n       else\n #endif\n-    if (back)\n-      do\n-\t{\n-\t  if (unlikely (*base <= minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t\tdest[n * dstride] = count[n] + 1;\n-\t    }\n-\t  base += sstride[0];\n-\t}\n-      while (++count[0] != extent[0]);\n-    else\n-      do\n-        {\n-\t  if (unlikely (*base < minval))\n-\t    {\n-\t      minval = *base;\n-\t      for (n = 0; n < rank; n++)\n-\t        dest[n * dstride] = count[n] + 1;\n-\t    }')\n+      if (back)\n+\tdo\n+\t  {\n+\t    if (unlikely (*base <= minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }\n+\t    base += sstride[0];\n+\t  }\n+\twhile (++count[0] != extent[0]);\n+      else\n+\tdo\n+\t  {\n+\t    if (unlikely (*base < minval))\n+\t      {\n+\t\tminval = *base;\n+\t\tfor (n = 0; n < rank; n++)\n+\t\t  dest[n * dstride] = count[n] + 1;\n+\t      }')\n MASKED_FOREACH_FUNCTION(\n `  atype_name minval;\n    int fast = 0;"}]}