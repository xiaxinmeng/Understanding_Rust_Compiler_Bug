{"sha": "5f29a394cdb78df249577d86e39b8c37aab2875d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyOWEzOTRjZGI3OGRmMjQ5NTc3ZDg2ZTM5YjhjMzdhYWIyODc1ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-18T21:17:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-18T21:17:51Z"}, "message": "misc.c: Move global variables to the top of the file.\n\n\t* gcc-interface/misc.c: Move global variables to the top of the file.\n\t(gnat_handle_option): Remove obsolete ATTRIBUTE_UNUSED markers.\n\t(gnat_init_options): Minor tweak.\n\t(gnat_post_options): Set -fstrict-overflow if not done by the user.\n\t(internal_error_function): Minor reformatting.\n\nFrom-SVN: r230569", "tree": {"sha": "1cf089adf1f5a0d1780ded1dc1a15349185a7842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cf089adf1f5a0d1780ded1dc1a15349185a7842"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f29a394cdb78df249577d86e39b8c37aab2875d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f29a394cdb78df249577d86e39b8c37aab2875d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f29a394cdb78df249577d86e39b8c37aab2875d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f29a394cdb78df249577d86e39b8c37aab2875d/comments", "author": null, "committer": null, "parents": [{"sha": "21c7259c1c6d5de223a4150d5bd0420eef1f2925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c7259c1c6d5de223a4150d5bd0420eef1f2925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c7259c1c6d5de223a4150d5bd0420eef1f2925"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "2f8dfc99650ddc16c1c4c26873e68119915cfa10", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f29a394cdb78df249577d86e39b8c37aab2875d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f29a394cdb78df249577d86e39b8c37aab2875d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5f29a394cdb78df249577d86e39b8c37aab2875d", "patch": "@@ -1,3 +1,11 @@\n+2015-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/misc.c: Move global variables to the top of the file.\n+\t(gnat_handle_option): Remove obsolete ATTRIBUTE_UNUSED markers.\n+\t(gnat_init_options): Minor tweak.\n+\t(gnat_post_options): Set -fstrict-overflow if not done by the user.\n+\t(internal_error_function): Minor reformatting.\n+\n 2015-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Use case #1\n@@ -269,7 +277,6 @@\n 2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \tPR ada/66242\n-\n \t* exp_ch3.adb (Default_Initialize_Object): Reimplemented. Abort\n \tdefer / undefer pairs are now encapsulated in a block with\n \tan AT END handler. Partial finalization now takes restriction\n@@ -7919,7 +7926,6 @@\n 2015-03-01  Arnaud Charlet  <charlet@adacore.com>\n \n \tPR ada/65259\n-\n \t* doc/gnat_ugn/gnat_project_manager.rst,\n \tdoc/gnat_ugn/platform_specific_information.rst: Remove reference to\n \timage, too troublesome with texi format."}, {"sha": "2a651427865315b24dbf91234278a15b5f53dbef", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f29a394cdb78df249577d86e39b8c37aab2875d/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f29a394cdb78df249577d86e39b8c37aab2875d/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=5f29a394cdb78df249577d86e39b8c37aab2875d", "patch": "@@ -62,9 +62,28 @@ void *callgraph_info_file = NULL;\n unsigned int save_argc;\n const char **save_argv;\n \n-/* GNAT argc and argv.  */\n+/* GNAT argc and argv generated by the binder for all Ada programs.  */\n extern int gnat_argc;\n-extern char **gnat_argv;\n+extern const char **gnat_argv;\n+\n+/* Ada code requires variables for these settings rather than elements\n+   of the global_options structure because they are imported.  */\n+int gnat_encodings = 0;\n+\n+#undef optimize\n+int optimize;\n+\n+#undef optimize_size\n+int optimize_size;\n+\n+#undef flag_compare_debug\n+int flag_compare_debug;\n+\n+#undef flag_short_enums\n+int flag_short_enums;\n+\n+#undef flag_stack_check\n+enum stack_check_type flag_stack_check = NO_STACK_CHECK;\n \n #ifdef __cplusplus\n extern \"C\" {\n@@ -118,9 +137,8 @@ gnat_option_lang_mask (void)\n    are marked as Ada-specific.  Return true on success or false on failure.  */\n \n static bool\n-gnat_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED, int value,\n-\t\t    int kind ATTRIBUTE_UNUSED, location_t loc ATTRIBUTE_UNUSED,\n-\t\t    const struct cl_option_handlers *handlers ATTRIBUTE_UNUSED)\n+gnat_handle_option (size_t scode, const char *arg, int value, int kind,\n+\t\t    location_t loc, const struct cl_option_handlers *handlers)\n {\n   enum opt_code code = (enum opt_code) scode;\n \n@@ -164,8 +182,8 @@ gnat_handle_option (size_t scode, const char *arg ATTRIBUTE_UNUSED, int value,\n \n   Ada_handle_option_auto (&global_options, &global_options_set,\n \t\t\t  scode, arg, value,\n-\t\t\t  gnat_option_lang_mask (), kind,\n-\t\t\t  loc, handlers, global_dc);\n+\t\t\t  gnat_option_lang_mask (), kind, loc,\n+\t\t\t  handlers, global_dc);\n   return true;\n }\n \n@@ -194,11 +212,9 @@ gnat_init_options (unsigned int decoded_options_count,\n      ??? back_end.adb should not rely on this; instead, it should work with\n      decoded options without such reparsing, to ensure consistency in how\n      options are decoded.  */\n-  unsigned int i;\n-\n   save_argv = XNEWVEC (const char *, 2 * decoded_options_count + 1);\n   save_argc = 0;\n-  for (i = 0; i < decoded_options_count; i++)\n+  for (unsigned int i = 0; i < decoded_options_count; i++)\n     {\n       size_t num_elements = decoded_options[i].canonical_option_num_elements;\n \n@@ -223,25 +239,12 @@ gnat_init_options (unsigned int decoded_options_count,\n     }\n   save_argv[save_argc] = NULL;\n \n-  gnat_argv = (char **) xmalloc (sizeof (save_argv[0]));\n-  gnat_argv[0] = xstrdup (save_argv[0]);     /* name of the command */\n+  /* Pass just the name of the command through the regular channel.  */\n+  gnat_argv = (const char **) xmalloc (sizeof (char *));\n+  gnat_argv[0] = xstrdup (save_argv[0]);\n   gnat_argc = 1;\n }\n \n-/* Ada code requires variables for these settings rather than elements\n-   of the global_options structure.  */\n-#undef optimize\n-#undef optimize_size\n-#undef flag_compare_debug\n-#undef flag_short_enums\n-#undef flag_stack_check\n-int gnat_encodings = 0;\n-int optimize;\n-int optimize_size;\n-int flag_compare_debug;\n-int flag_short_enums;\n-enum stack_check_type flag_stack_check = NO_STACK_CHECK;\n-\n /* Settings adjustments after switches processing by the back-end.\n    Note that the front-end switches processing (Scan_Compiler_Arguments)\n    has not been done yet at this point!  */\n@@ -262,6 +265,10 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n   if (!global_options_set.x_flag_diagnostics_show_caret)\n     global_dc->show_caret = false;\n \n+  /* Set strict overflow by default for Ada.  */\n+  if (!global_options_set.x_flag_strict_overflow)\n+    global_options.x_flag_strict_overflow = true;\n+\n   /* Warn only if STABS is not the default: we don't want to emit a warning if\n      the user did not use a -gstabs option.  */\n   if (PREFERRED_DEBUGGING_TYPE != DBX_DEBUG && write_symbols == DBX_DEBUG)\n@@ -287,8 +294,8 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n /* Here is the function to handle the compiler error processing in GCC.  */\n \n static void\n-internal_error_function (diagnostic_context *context,\n-\t\t\t const char *msgid, va_list *ap)\n+internal_error_function (diagnostic_context *context, const char *msgid,\n+\t\t\t va_list *ap)\n {\n   text_info tinfo;\n   char *buffer, *p, *loc;"}, {"sha": "d9d30e461ef183e233774f6fdc6db6f01ebadb92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f29a394cdb78df249577d86e39b8c37aab2875d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f29a394cdb78df249577d86e39b8c37aab2875d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f29a394cdb78df249577d86e39b8c37aab2875d", "patch": "@@ -1,3 +1,7 @@\n+2015-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt52.adb: New test.\n+\n 2015-11-18  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gcc.dg/goacc/nvptx-sese-1.c: New."}, {"sha": "d2541c26410c67ea5501ef4cd592ebfe1742493d", "filename": "gcc/testsuite/gnat.dg/opt52.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f29a394cdb78df249577d86e39b8c37aab2875d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt52.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f29a394cdb78df249577d86e39b8c37aab2875d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt52.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt52.adb?ref=5f29a394cdb78df249577d86e39b8c37aab2875d", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -fdump-tree-optimized\" }\n+\n+procedure Opt52 (I : Integer) is\n+begin\n+  if I + 1 < I then\n+    raise Program_Error;\n+  end if;\n+end;\n+\n+-- { dg-final { scan-tree-dump-not \"check_PE_Explicit_Raise\" \"optimized\" } }"}]}