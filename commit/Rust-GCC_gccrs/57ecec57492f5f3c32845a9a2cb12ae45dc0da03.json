{"sha": "57ecec57492f5f3c32845a9a2cb12ae45dc0da03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdlY2VjNTc0OTJmNWYzYzMyODQ1YTlhMmNiMTJhZTQ1ZGMwZGEwMw==", "commit": {"author": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-04-01T15:59:09Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2005-04-01T15:59:09Z"}, "message": "arm.c (thumb_call_via_label): Include space for SP.\n\n2005-04-01  Paul Brook  <paul@codesourcery.com>\n\n\t* config/arm/arm.c (thumb_call_via_label): Include space for SP.\n\t(arm_output_function_epilogue): Allow call_via_SP.\n\t(thumb_call_via_reg, arm_file_end): Ditto.\n\t* config/arm/arm.h (struct machine_function): Include space for SP.\n\t(thumb_call_via_label): Update declaration.\n\nFrom-SVN: r97402", "tree": {"sha": "7641dd8f80ab012df6d4376aa3c7ac1ee7f23456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7641dd8f80ab012df6d4376aa3c7ac1ee7f23456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57ecec57492f5f3c32845a9a2cb12ae45dc0da03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ecec57492f5f3c32845a9a2cb12ae45dc0da03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ecec57492f5f3c32845a9a2cb12ae45dc0da03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ecec57492f5f3c32845a9a2cb12ae45dc0da03/comments", "author": null, "committer": null, "parents": [{"sha": "f972113f868313ff7817efc8d837c51a369a5b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f972113f868313ff7817efc8d837c51a369a5b56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f972113f868313ff7817efc8d837c51a369a5b56"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "83c5b857ed999f796762cd880d5a6ab76fe452ae", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ecec57492f5f3c32845a9a2cb12ae45dc0da03/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ecec57492f5f3c32845a9a2cb12ae45dc0da03/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=57ecec57492f5f3c32845a9a2cb12ae45dc0da03", "patch": "@@ -368,7 +368,7 @@ const char * structure_size_string = NULL;\n int    arm_structure_size_boundary = DEFAULT_STRUCTURE_SIZE_BOUNDARY;\n \n /* Used for Thumb call_via trampolines.  */\n-rtx thumb_call_via_label[13];\n+rtx thumb_call_via_label[14];\n static int thumb_call_reg_needed;\n \n /* Bit values used to identify processor capabilities.  */\n@@ -9680,7 +9680,7 @@ arm_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n \n       /* Emit any call-via-reg trampolines that are needed for v4t support\n \t of call_reg and call_value_reg type insns.  */\n-      for (regno = 0; regno < SP_REGNUM; regno++)\n+      for (regno = 0; regno < LR_REGNUM; regno++)\n \t{\n \t  rtx label = cfun->machine->call_via[regno];\n \n@@ -13775,7 +13775,7 @@ thumb_call_via_reg (rtx reg)\n   int regno = REGNO (reg);\n   rtx *labelp;\n \n-  gcc_assert (regno < SP_REGNUM);\n+  gcc_assert (regno < LR_REGNUM);\n \n   /* If we are in the normal text section we can use a single instance\n      per compilation unit.  If we are doing function sections, then we need\n@@ -13921,7 +13921,7 @@ arm_file_end (void)\n   asm_fprintf (asm_out_file, \"\\t.code 16\\n\");\n   ASM_OUTPUT_ALIGN (asm_out_file, 1);\n \n-  for (regno = 0; regno < SP_REGNUM; regno++)\n+  for (regno = 0; regno < LR_REGNUM; regno++)\n     {\n       rtx label = thumb_call_via_label[regno];\n "}, {"sha": "6e223c875b3a599287e593f39e6e9a49797f092c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ecec57492f5f3c32845a9a2cb12ae45dc0da03/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ecec57492f5f3c32845a9a2cb12ae45dc0da03/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=57ecec57492f5f3c32845a9a2cb12ae45dc0da03", "patch": "@@ -1712,14 +1712,15 @@ typedef struct machine_function GTY(())\n      register is needed to preserve stack alignment.  */\n   int sibcall_blocked;\n   /* Labels for per-function Thumb call-via stubs.  One per potential calling\n-     register.  We can never call via SP, LR or PC.  */\n-  rtx call_via[13];\n+     register.  We can never call via LR or PC.  We can call via SP if a\n+     trampoline happens to be on the top of the stack.  */\n+  rtx call_via[14];\n }\n machine_function;\n \n /* As in the machine_function, a global set of call-via labels, for code \n    that is in text_section().  */\n-extern GTY(()) rtx thumb_call_via_label[13];\n+extern GTY(()) rtx thumb_call_via_label[14];\n \n /* A C type for declaring a variable that is used as the first argument of\n    `FUNCTION_ARG' and other related values.  For some target machines, the"}]}