{"sha": "ee25a7a5f655464616cfb7faafb0d434f8174d92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUyNWE3YTVmNjU1NDY0NjE2Y2ZiN2ZhYWZiMGQ0MzRmODE3NGQ5Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-03-05T22:35:27Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-03-05T22:35:27Z"}, "message": "basic-block.h (ALLOCA_REG_SET): Remove.\n\n\t* basic-block.h (ALLOCA_REG_SET): Remove.\n\t(INITIALIZE_REG_SET): New macro.\n\t* flow.c (update_life_info): Use it.\n\t(calculate_global_regs_live): Likewise.\n\t(propagate_block): Likewise.\n\t* global.c (build_insn_chain): Likewise.\n\t* haifa-sched.c (schedule_region): Likewise.\n\nFrom-SVN: r32350", "tree": {"sha": "446e504da7f74a87b0b65d998b5b7fd43cb89914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/446e504da7f74a87b0b65d998b5b7fd43cb89914"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee25a7a5f655464616cfb7faafb0d434f8174d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee25a7a5f655464616cfb7faafb0d434f8174d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee25a7a5f655464616cfb7faafb0d434f8174d92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee25a7a5f655464616cfb7faafb0d434f8174d92/comments", "author": null, "committer": null, "parents": [{"sha": "008b7307cbdb0f150ff8f19aae2d39fc675e6bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008b7307cbdb0f150ff8f19aae2d39fc675e6bae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/008b7307cbdb0f150ff8f19aae2d39fc675e6bae"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "5e410297e9288f397559d2cd4a533ae069291963", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee25a7a5f655464616cfb7faafb0d434f8174d92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee25a7a5f655464616cfb7faafb0d434f8174d92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee25a7a5f655464616cfb7faafb0d434f8174d92", "patch": "@@ -1,3 +1,13 @@\n+2000-03-05  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* basic-block.h (ALLOCA_REG_SET): Remove.\n+\t(INITIALIZE_REG_SET): New macro.\n+\t* flow.c (update_life_info): Use it.\n+\t(calculate_global_regs_live): Likewise.\n+\t(propagate_block): Likewise.\n+\t* global.c (build_insn_chain): Likewise.\n+\t* haifa-sched.c (schedule_region): Likewise.\n+\n 2000-03-05  Stephane Carrez  <stcarrez@worldnet.fr>\n \n \t* dwarf2out.c (UNALIGNED_WORD_ASM_OP): Support 2 bytes pointer."}, {"sha": "0aef32b23531ba65661f3d8448b2c77c69bcd7fd", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee25a7a5f655464616cfb7faafb0d434f8174d92/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee25a7a5f655464616cfb7faafb0d434f8174d92/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=ee25a7a5f655464616cfb7faafb0d434f8174d92", "patch": "@@ -98,8 +98,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Allocate a register set with oballoc.  */\n #define OBSTACK_ALLOC_REG_SET(OBSTACK) BITMAP_OBSTACK_ALLOC (OBSTACK)\n \n-/* Allocate a register set with alloca.  */\n-#define ALLOCA_REG_SET() BITMAP_ALLOCA ()\n+/* Initialize a register set.  Returns the new register set.  */\n+#define INITIALIZE_REG_SET(HEAD) bitmap_initialize (&HEAD)\n \n /* Do any cleanup needed on a regset when it is no longer used.  */\n #define FREE_REG_SET(REGSET) BITMAP_FREE(REGSET)"}, {"sha": "e134794f38cd5605254906cb3c3ea69026a37e7d", "filename": "gcc/flow.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee25a7a5f655464616cfb7faafb0d434f8174d92/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee25a7a5f655464616cfb7faafb0d434f8174d92/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=ee25a7a5f655464616cfb7faafb0d434f8174d92", "patch": "@@ -2643,9 +2643,10 @@ update_life_info (blocks, extent, prop_flags)\n      int prop_flags;\n {\n   regset tmp;\n+  regset_head tmp_head;\n   int i;\n \n-  tmp = ALLOCA_REG_SET ();\n+  tmp = INITIALIZE_REG_SET (tmp_head);\n \n   /* For a global update, we go through the relaxation process again.  */\n   if (extent != UPDATE_LIFE_LOCAL)\n@@ -2949,10 +2950,12 @@ calculate_global_regs_live (blocks_in, blocks_out, flags)\n {\n   basic_block *queue, *qhead, *qtail, *qend;\n   regset tmp, new_live_at_end;\n+  regset_head tmp_head;\n+  regset_head new_live_at_end_head;\n   int i;\n \n-  tmp = ALLOCA_REG_SET ();\n-  new_live_at_end = ALLOCA_REG_SET ();\n+  tmp = INITIALIZE_REG_SET (tmp_head);\n+  new_live_at_end = INITIALIZE_REG_SET (new_live_at_end_head);\n \n   /* Create a worklist.  Allocate an extra slot for ENTRY_BLOCK, and one\n      because the `head == tail' style test for an empty queue doesn't \n@@ -3177,16 +3180,18 @@ propagate_block (bb, old, significant, flags)\n   register rtx insn;\n   rtx prev;\n   regset live;\n+  regset_head live_head;\n   regset dead;\n+  regset_head dead_head;\n \n   /* Find the loop depth for this block.  Ignore loop level changes in the\n      middle of the basic block -- for register allocation purposes, the \n      important uses will be in the blocks wholely contained within the loop\n      not in the loop pre-header or post-trailer.  */\n   loop_depth = bb->loop_depth;\n \n-  dead = ALLOCA_REG_SET ();\n-  live = ALLOCA_REG_SET ();\n+  dead = INITIALIZE_REG_SET (live_head);\n+  live = INITIALIZE_REG_SET (dead_head);\n \n   cc0_live = 0;\n "}, {"sha": "74d9fd2a6b736fedea3ba61f5b46589e259a6a0f", "filename": "gcc/global.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee25a7a5f655464616cfb7faafb0d434f8174d92/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee25a7a5f655464616cfb7faafb0d434f8174d92/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=ee25a7a5f655464616cfb7faafb0d434f8174d92", "patch": "@@ -1764,8 +1764,9 @@ build_insn_chain (first)\n   struct insn_chain **p = &reload_insn_chain;\n   struct insn_chain *prev = 0;\n   int b = 0;\n+  regset_head live_relevant_regs_head;\n \n-  live_relevant_regs = ALLOCA_REG_SET ();\n+  live_relevant_regs = INITIALIZE_REG_SET (live_relevant_regs_head);\n \n   for (; first; first = NEXT_INSN (first))\n     {"}, {"sha": "eb6f121d0b7c8d882f1bc8c2f99fc8edebdc3ae4", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee25a7a5f655464616cfb7faafb0d434f8174d92/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee25a7a5f655464616cfb7faafb0d434f8174d92/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=ee25a7a5f655464616cfb7faafb0d434f8174d92", "patch": "@@ -6631,13 +6631,15 @@ schedule_region (rgn)\n   int bb;\n   int rgn_n_insns = 0;\n   int sched_rgn_n_insns = 0;\n+  regset_head reg_pending_sets_head;\n+  regset_head reg_pending_clobbers_head;\n \n   /* Set variables for the current region.  */\n   current_nr_blocks = RGN_NR_BLOCKS (rgn);\n   current_blocks = RGN_BLOCKS (rgn);\n \n-  reg_pending_sets = ALLOCA_REG_SET ();\n-  reg_pending_clobbers = ALLOCA_REG_SET ();\n+  reg_pending_sets = INITIALIZE_REG_SET (reg_pending_sets_head);\n+  reg_pending_clobbers = INITIALIZE_REG_SET (reg_pending_clobbers_head);\n   reg_pending_sets_all = 0;\n \n   /* Initializations for region data dependence analyisis.  */"}]}