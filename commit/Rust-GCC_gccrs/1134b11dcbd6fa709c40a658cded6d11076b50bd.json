{"sha": "1134b11dcbd6fa709c40a658cded6d11076b50bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzNGIxMWRjYmQ2ZmE3MDljNDBhNjU4Y2RlZDZkMTEwNzZiNTBiZA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-03-27T19:27:31Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-03-27T19:27:31Z"}, "message": "configure.ac (ac_c_preproc_warn_flag): Remove -Wtraditional flags.\n\n\n\t* configure.ac (ac_c_preproc_warn_flag): Remove -Wtraditional\n\tflags.\n\t* configure: Regenerated.\n\nFrom-SVN: r97116", "tree": {"sha": "c0cd3ef7327eb9b12781c3859b2e7b08b4dc5aec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0cd3ef7327eb9b12781c3859b2e7b08b4dc5aec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1134b11dcbd6fa709c40a658cded6d11076b50bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1134b11dcbd6fa709c40a658cded6d11076b50bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1134b11dcbd6fa709c40a658cded6d11076b50bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1134b11dcbd6fa709c40a658cded6d11076b50bd/comments", "author": null, "committer": null, "parents": [{"sha": "ae3f39991dd40e454f83123783a3d39fcd1d93dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3f39991dd40e454f83123783a3d39fcd1d93dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae3f39991dd40e454f83123783a3d39fcd1d93dd"}], "stats": {"total": 168, "additions": 87, "deletions": 81}, "files": [{"sha": "f0a1f64955786993cfdd2e46a1d0ad0094c03703", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 85, "deletions": 79, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1134b11dcbd6fa709c40a658cded6d11076b50bd/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1134b11dcbd6fa709c40a658cded6d11076b50bd/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=1134b11dcbd6fa709c40a658cded6d11076b50bd", "patch": "@@ -1,28 +1,34 @@\n+2005-03-27  Andreas Jaeger  <aj@suse.de>\n+\n+\t* configure.ac (ac_c_preproc_warn_flag): Remove -Wtraditional\n+\tflags.\n+\t* configure: Regenerated.\n+\n 2005-03-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* getopt1.c (getopt_long_only): Fix thinko.\n \n 2005-03-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert libiberty to use ISO C prototype style 4/n.\n-\t* hashtab.c (higher_prime_index, hash_pointer, eq_pointer, \n-\thtab_size, htab_elements, htab_mod_1, htab_mod, htab_mod_m2, \n-\thtab_create_alloc, htab_set_functions_ex, htab_create, \n-\thtab_try_create, htab_delete, htab_empty, \n-\tfind_empty_slot_for_expand, htab_expand, htab_find_with_hash, \n-\thtab_find, htab_find_slot_with_hash, htab_find_slot, \n-\thtab_remove_elt, htab_remove_elt_with_hash, htab_clear_slot, \n-\thtab_traverse_noresize, htab_traverse, htab_collisions, \n+\t* hashtab.c (higher_prime_index, hash_pointer, eq_pointer,\n+\thtab_size, htab_elements, htab_mod_1, htab_mod, htab_mod_m2,\n+\thtab_create_alloc, htab_set_functions_ex, htab_create,\n+\thtab_try_create, htab_delete, htab_empty,\n+\tfind_empty_slot_for_expand, htab_expand, htab_find_with_hash,\n+\thtab_find, htab_find_slot_with_hash, htab_find_slot,\n+\thtab_remove_elt, htab_remove_elt_with_hash, htab_clear_slot,\n+\thtab_traverse_noresize, htab_traverse, htab_collisions,\n \thtab_hash_string, iterative_hash): Use ISO C prototype.\n \t* hex.c (hex_init): Likewise.\n \t* index.c (index): Likewise.\n-\t* insque.c (insque, remque): Likewise. \n+\t* insque.c (insque, remque): Likewise.\n \t* lbasename.c (lbasename): Likewise.\n \t* lrealpath.c (lrealpath): Likewise.\n-\t* make-relative-prefix.c (save_string, split_directories, \n+\t* make-relative-prefix.c (save_string, split_directories,\n \tfree_split_directories, make_relative_prefix): Likewise.\n-\t* make-temp-file.c (try, choose_tmpdir, make_temp_file): Likewise. \n-\t* md5.c (md5_init_ctx, md5_read_ctx, md5_finish_ctx, md5_stream, \n+\t* make-temp-file.c (try, choose_tmpdir, make_temp_file): Likewise.\n+\t* md5.c (md5_init_ctx, md5_read_ctx, md5_finish_ctx, md5_stream,\n \tmd5_buffer, md5_process_bytes, md5_process_block): Likewise.\n \t* memchr.c (memchr): Likewise.\n \t* memcpy.c (memcpy): Likewise.\n@@ -32,90 +38,90 @@\n \t* getpwd.c (getpwd, getpwd): Likewise.\n \t* getpagesize.c (getpagesize): Likewise.\n \t* getopt1.c (getopt_long, getopt_long_only, main): Likewise.\n-\t* getopt.c (my_index, exchange, _getopt_initialize, \n+\t* getopt.c (my_index, exchange, _getopt_initialize,\n \t_getopt_internal, getopt, main): Likewise.\n \t* getcwd.c (getcwd): Likewise.\n \t* fnmatch.c (fnmatch): Likewise.\n-\t* floatformat.c (floatformat_always_valid, \n-\tfloatformat_i387_ext_is_valid, get_field, floatformat_to_double, \n-\tput_field, floatformat_from_double, floatformat_is_valid, \n+\t* floatformat.c (floatformat_always_valid,\n+\tfloatformat_i387_ext_is_valid, get_field, floatformat_to_double,\n+\tput_field, floatformat_from_double, floatformat_is_valid,\n \tieee_test, main): Likewise.\n-\t* fibheap.c (fibheap_new, fibnode_new, fibheap_compare, \n-\tfibheap_comp_data, fibheap_insert, fibheap_min, fibheap_min_key, \n-\tfibheap_union, fibheap_extract_min, fibheap_replace_key_data, \n-\tfibheap_replace_key, fibheap_replace_data, fibheap_delete_node, \n-\tfibheap_delete, fibheap_empty, fibheap_extr_min_node, \n-\tfibheap_ins_root, fibheap_rem_root, fibheap_consolidate, \n-\tfibheap_link, fibheap_cut, fibheap_cascading_cut, \n+\t* fibheap.c (fibheap_new, fibnode_new, fibheap_compare,\n+\tfibheap_comp_data, fibheap_insert, fibheap_min, fibheap_min_key,\n+\tfibheap_union, fibheap_extract_min, fibheap_replace_key_data,\n+\tfibheap_replace_key, fibheap_replace_data, fibheap_delete_node,\n+\tfibheap_delete, fibheap_empty, fibheap_extr_min_node,\n+\tfibheap_ins_root, fibheap_rem_root, fibheap_consolidate,\n+\tfibheap_link, fibheap_cut, fibheap_cascading_cut,\n \tfibnode_insert_after, fibnode_remove): Likewise.\n \t* ffs.c (ffs): Likewise.\n \t* fdmatch.c (fdmatch): Likewise.\n-\t* dyn-string.c (dyn_string_init, dyn_string_new, \n-\tdyn_string_delete, dyn_string_release, dyn_string_resize, \n-\tdyn_string_clear, dyn_string_copy, dyn_string_copy_cstr, \n-\tdyn_string_prepend, dyn_string_prepend_cstr, dyn_string_insert, \n-\tdyn_string_insert_cstr, dyn_string_insert_char, \n-\tdyn_string_append, dyn_string_append_cstr, \n+\t* dyn-string.c (dyn_string_init, dyn_string_new,\n+\tdyn_string_delete, dyn_string_release, dyn_string_resize,\n+\tdyn_string_clear, dyn_string_copy, dyn_string_copy_cstr,\n+\tdyn_string_prepend, dyn_string_prepend_cstr, dyn_string_insert,\n+\tdyn_string_insert_cstr, dyn_string_insert_char,\n+\tdyn_string_append, dyn_string_append_cstr,\n \tdyn_string_append_char, dyn_string_substring, dyn_string_eq):\n-\tLikewise. \n+\tLikewise.\n \n 2005-03-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert libiberty to use ISO C prototype style 3/n.\n-\t* cplus-dem.c (set_cplus_marker_for_demangling, consume_count, \n-\tconsume_count_with_underscores, code_for_qualifier, \n-\tqualifier_string, demangle_qualifier, cplus_demangle_opname, \n-\tcplus_mangle_opname, cplus_demangle_set_style, \n-\tcplus_demangle_name_to_style, cplus_demangle, grow_vect, \n+\t* cplus-dem.c (set_cplus_marker_for_demangling, consume_count,\n+\tconsume_count_with_underscores, code_for_qualifier,\n+\tqualifier_string, demangle_qualifier, cplus_demangle_opname,\n+\tcplus_mangle_opname, cplus_demangle_set_style,\n+\tcplus_demangle_name_to_style, cplus_demangle, grow_vect,\n \tada_demangle, internal_cplus_demangle, squangle_mop_up,\n-\twork_stuff_copy_to_from, delete_non_B_K_work_stuff, \n-\tdelete_work_stuff, mop_up, demangle_signature, \n-\tdemangle_method_args, demangle_template_template_parm, \n-\tdemangle_expression, demangle_integral_value, \n-\tdemangle_real_value, demangle_template_value_parm, \n-\tdemangle_template, arm_pt, demangle_arm_hp_template, \n-\tdemangle_class_name, demangle_class, iterate_demangle_function, \n-\tdemangle_prefix, gnu_special, recursively_demangle, arm_special, \n-\tdemangle_qualified, get_count, do_type, demangle_fund_type, \n-\tdo_hpacc_template_const_value, do_hpacc_template_literal, \n-\tsnarf_numeric_literal, do_arg, remember_type, remember_Ktype, \n-\tregister_Btype, remember_Btype, forget_B_and_K_types, \n-\tforget_types, demangle_args, demangle_nested_args, \n-\tdemangle_function_name, string_need, string_delete, string_init, \n-\tstring_clear, string_empty, string_append, string_appends, \n+\twork_stuff_copy_to_from, delete_non_B_K_work_stuff,\n+\tdelete_work_stuff, mop_up, demangle_signature,\n+\tdemangle_method_args, demangle_template_template_parm,\n+\tdemangle_expression, demangle_integral_value,\n+\tdemangle_real_value, demangle_template_value_parm,\n+\tdemangle_template, arm_pt, demangle_arm_hp_template,\n+\tdemangle_class_name, demangle_class, iterate_demangle_function,\n+\tdemangle_prefix, gnu_special, recursively_demangle, arm_special,\n+\tdemangle_qualified, get_count, do_type, demangle_fund_type,\n+\tdo_hpacc_template_const_value, do_hpacc_template_literal,\n+\tsnarf_numeric_literal, do_arg, remember_type, remember_Ktype,\n+\tregister_Btype, remember_Btype, forget_B_and_K_types,\n+\tforget_types, demangle_args, demangle_nested_args,\n+\tdemangle_function_name, string_need, string_delete, string_init,\n+\tstring_clear, string_empty, string_append, string_appends,\n \tstring_appendn, string_prepend, string_prepends, string_prependn,\n \tstring_append_template_idx): Use ISO C prootype style.\n \t* cp-demint.c (cplus_demangle_fill_component,\n-\tcplus_demangle_fill_builtin_type, cplus_demangle_fill_operator, \n+\tcplus_demangle_fill_builtin_type, cplus_demangle_fill_operator,\n \tcplus_demangle_v3_components): Likewise.\n \n 2005-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert libiberty to use ISO C prototype style 2/n.\n \t* cp-demangle.h: Remove uses of PARAMS.\n \t* cp-demangle.c: Likewise.\n-\t(d_dump, cplus_demangle_fill_name, \n-\tcplus_demangle_fill_extended_operator, cplus_demangle_fill_ctor, \n-\tcplus_demangle_fill_dtor, d_make_empty, d_make_comp, d_make_name, \n-\td_make_builtin_type, d_make_operator, d_make_extended_operator, \n-\td_make_ctor, d_make_dtor, d_make_template_param, d_make_sub, \n-\tcplus_demangle_mangled_name, has_return_type, \n-\tis_ctor_dtor_or_conversion, d_encoding, d_name, d_nested_name, \n-\td_prefix, d_unqualified_name, d_source_name, d_number, \n-\td_identifier, d_operator_name, d_special_name, d_call_offset, \n-\td_ctor_dtor_name, cplus_demangle_type, d_cv_qualifiers, \n-\td_function_type, d_bare_function_type, d_class_enum_type, \n-\td_array_type, d_pointer_to_member_type, d_template_param, \n-\td_template_args, d_template_arg, d_expression, d_expr_primary, \n-\td_local_name, d_discriminator, d_add_substitution, \n-\td_substitution, d_print_resize, d_print_append_char, \n-\td_print_append_buffer, d_print_error, cplus_demangle_print, \n-\td_print_comp, d_print_java_identifier, d_print_mod_list, \n-\td_print_mod, d_print_function_type, d_print_array_type, \n-\td_print_expr_op, d_print_cast, cplus_demangle_init_info, \n-\td_demangle, __cxa_demangle, cplus_demangle_v3, java_demangle_v3, \n+\t(d_dump, cplus_demangle_fill_name,\n+\tcplus_demangle_fill_extended_operator, cplus_demangle_fill_ctor,\n+\tcplus_demangle_fill_dtor, d_make_empty, d_make_comp, d_make_name,\n+\td_make_builtin_type, d_make_operator, d_make_extended_operator,\n+\td_make_ctor, d_make_dtor, d_make_template_param, d_make_sub,\n+\tcplus_demangle_mangled_name, has_return_type,\n+\tis_ctor_dtor_or_conversion, d_encoding, d_name, d_nested_name,\n+\td_prefix, d_unqualified_name, d_source_name, d_number,\n+\td_identifier, d_operator_name, d_special_name, d_call_offset,\n+\td_ctor_dtor_name, cplus_demangle_type, d_cv_qualifiers,\n+\td_function_type, d_bare_function_type, d_class_enum_type,\n+\td_array_type, d_pointer_to_member_type, d_template_param,\n+\td_template_args, d_template_arg, d_expression, d_expr_primary,\n+\td_local_name, d_discriminator, d_add_substitution,\n+\td_substitution, d_print_resize, d_print_append_char,\n+\td_print_append_buffer, d_print_error, cplus_demangle_print,\n+\td_print_comp, d_print_java_identifier, d_print_mod_list,\n+\td_print_mod, d_print_function_type, d_print_array_type,\n+\td_print_expr_op, d_print_cast, cplus_demangle_init_info,\n+\td_demangle, __cxa_demangle, cplus_demangle_v3, java_demangle_v3,\n \tis_ctor_or_dtor, is_gnu_v3_mangled_ctor, is_gnu_v3_mangled_dtor,\n-\tprint_usage, main): \n+\tprint_usage, main):\n \n 2005-03-26  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n@@ -125,10 +131,10 @@\n \t(_doprnt, checkit, main): Use ISO C prototype.\n \t* alloca.c (find_stack_direction, C_alloca): Use ISO C prototype.\n \t* argv.c: Remove conditional #includes on ANSI_PROTOTYPES.\n-\t(dupargv, freeargv, buildargv, main): Use ISO C prototype. \n+\t(dupargv, freeargv, buildargv, main): Use ISO C prototype.\n \t* atexit.c (atexit): Likewise\n \t* asprintf.c: Remove conditional include on ANSI_PROTOTYPES.\n-\t(asprintf): Use ISO C prototype. \n+\t(asprintf): Use ISO C prototype.\n \t* basename.c (basename): Likewise\n \t* bcmp.c (bcmp): Likewise.\n \t* bcopy.c (bcopy): Likewise.\n@@ -139,7 +145,7 @@\n \t(calloc): Use ISO C prototype.\n \t* clock.c (clock): Likewise.\n \t* concat.c: Remove conditional #include on ANSI_PROTOTYPES.\n-\t(vconcat_length, vconcat_copy, concat_length, concat_copy, \n+\t(vconcat_length, vconcat_copy, concat_length, concat_copy,\n \tconcat_copy2, concat, reconcat, main): Use ISO C prototype.\n \t* copysign.c (copysign): Likewise.\n \n@@ -215,7 +221,7 @@\n \t* hex.c (hex_value): Group 'unsigned int' together to get correct\n \tmarkup.\n \t* functions.texi: Regenerated.\n-\t\n+\n 2004-12-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.in: Undo to 2004-12-17.\n@@ -328,15 +334,15 @@\n \n \t* vasprintf.c: Accept __va_copy in addition to va_copy.\n \n-2004-09-03  Paolo Bonzini  <bonzini@gnu.org> \n+2004-09-03  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure: Regenerate.\n \n-2004-09-02  Paolo Bonzini  <bonzini@gnu.org> \n+2004-09-02  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* configure.ac: Do not enable multilibs for build-side libiberty.\n \n-2004-06-29  Danny Smith  <dannysmith@users.sourceforge.net> \n+2004-06-29  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* lrealpath.c (lrealpath): Add _WIN32 support.\n "}, {"sha": "1435cd26f5d43a2a4c5ca3cf37821c88fd99ee5e", "filename": "libiberty/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1134b11dcbd6fa709c40a658cded6d11076b50bd/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1134b11dcbd6fa709c40a658cded6d11076b50bd/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=1134b11dcbd6fa709c40a658cded6d11076b50bd", "patch": "@@ -2930,7 +2930,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n ac_c_preproc_warn_flag=yes\n \n if test x$GCC = xyes; then\n-  ac_libiberty_warn_cflags='-W -Wall -Wtraditional -pedantic'\n+  ac_libiberty_warn_cflags='-W -Wall -pedantic'\n fi\n \n "}, {"sha": "e000825e383df493ebc0b886f2fc5852c7984c70", "filename": "libiberty/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1134b11dcbd6fa709c40a658cded6d11076b50bd/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1134b11dcbd6fa709c40a658cded6d11076b50bd/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=1134b11dcbd6fa709c40a658cded6d11076b50bd", "patch": "@@ -114,7 +114,7 @@ AC_PROG_CC\n AC_PROG_CPP_WERROR\n \n if test x$GCC = xyes; then\n-  ac_libiberty_warn_cflags='-W -Wall -Wtraditional -pedantic'\n+  ac_libiberty_warn_cflags='-W -Wall -pedantic'\n fi\n AC_SUBST(ac_libiberty_warn_cflags)\n "}]}