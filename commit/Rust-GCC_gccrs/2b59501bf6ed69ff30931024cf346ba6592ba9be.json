{"sha": "2b59501bf6ed69ff30931024cf346ba6592ba9be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI1OTUwMWJmNmVkNjlmZjMwOTMxMDI0Y2YzNDZiYTY1OTJiYTliZQ==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2003-02-18T18:50:05Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2003-02-18T18:50:05Z"}, "message": "langhooks.h, [...]: introduce new langhook...\n\n\n       * langhooks.h, langhooks-def.h: introduce new langhook,\n       final_write_globals, with write_global_declarations as default.\n       * toplev.c: Move invocation of wrapup_global_declarations from\n       compile_file to new function, write_global_declarations.  Change\n       compile_file to use final_write_globals hook.  Change\n       wrapup_global_declarations so writing to DECL_DEFER_OUTPUT is\n       conditional.\n\n       * cp/cp-lang.c: Change lang hooks so that final_write_globals does\n       nothing for C++.\n       * cp/decl.c (wrapup_globals_for_namespace): Remove special\n       handling of global namespace.\n\nFrom-SVN: r63051", "tree": {"sha": "f2d1ae8da2b00770c1682fd0408e81e6c1fb7257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2d1ae8da2b00770c1682fd0408e81e6c1fb7257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b59501bf6ed69ff30931024cf346ba6592ba9be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b59501bf6ed69ff30931024cf346ba6592ba9be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b59501bf6ed69ff30931024cf346ba6592ba9be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b59501bf6ed69ff30931024cf346ba6592ba9be/comments", "author": null, "committer": null, "parents": [{"sha": "131efcd8e006ff180e498a50ad47261716539346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/131efcd8e006ff180e498a50ad47261716539346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/131efcd8e006ff180e498a50ad47261716539346"}], "stats": {"total": 99, "additions": 65, "deletions": 34}, "files": [{"sha": "051a5d0b62cee6d8758e787e262c2fec8a66b714", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b59501bf6ed69ff30931024cf346ba6592ba9be", "patch": "@@ -1,3 +1,13 @@\n+2003-02-18  Matt Austern <austern@apple.com>\n+\t\n+\t* langhooks.h, langhooks-def.h: introduce new langhook,\n+\tfinal_write_globals, with write_global_declarations as default.\n+\t* toplev.c: Move invocation of wrapup_global_declarations from\n+\tcompile_file to new function, write_global_declarations.  Change\n+\tcompile_file to use final_write_globals hook.  Change\n+\twrapup_global_declarations so writing to DECL_DEFER_OUTPUT is\n+\tconditional. \n+\t\n 2003-02-18  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.md: Correct and enhance comment."}, {"sha": "73676fc06681b94577eaf5b777b1e1d53ae455ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2b59501bf6ed69ff30931024cf346ba6592ba9be", "patch": "@@ -1,3 +1,10 @@\n+2003-02-18  Matt Austern <austern@apple.com>\n+\t\n+\t* cp/cp-lang.c: Change lang hooks so that final_write_globals does\n+\tnothing for C++.\n+\t* cp/decl.c (wrapup_globals_for_namespace): Remove special\n+\thandling of global namespace.\n+\t\n 2003-02-18  Geoffrey Keating  <geoffk@apple.com>\n \n \t* cp-tree.h (rid_to_yy): Delete."}, {"sha": "3671027ebe6b4737b75b99ca15189a595afabf0f", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=2b59501bf6ed69ff30931024cf346ba6592ba9be", "patch": "@@ -92,6 +92,9 @@ static bool cp_var_mod_type_p (tree);\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION\tcxx_print_error_function\n #undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL cxx_warn_unused_global_decl\n+#undef LANG_HOOKS_WRITE_GLOBALS\n+#define LANG_HOOKS_WRITE_GLOBALS lhd_do_nothing\n+\n \n #undef LANG_HOOKS_FUNCTION_INIT\n #define LANG_HOOKS_FUNCTION_INIT cxx_push_function_context"}, {"sha": "94cd4c3e7d2bf52d7dcaa8bec5216f57b79460fb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2b59501bf6ed69ff30931024cf346ba6592ba9be", "patch": "@@ -1855,10 +1855,6 @@ wrapup_globals_for_namespace (tree namespace, void* data)\n   tree decl;\n   int last_time = (data != 0);\n \n-  if (last_time && namespace == global_namespace)\n-    /* Let compile_file handle the global namespace.  */\n-    return 0;\n-\n   /* Process the decls in reverse order--earliest first.\n      Put them into VEC from back to front, then take out from front.  */       \n   for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))"}, {"sha": "6fc10603a7f8b3d1f7435cafd05bf9f9ec09b2a7", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=2b59501bf6ed69ff30931024cf346ba6592ba9be", "patch": "@@ -82,6 +82,9 @@ int lhd_tree_inlining_start_inlining\t\tPARAMS ((tree));\n void lhd_tree_inlining_end_inlining\t\tPARAMS ((tree));\n tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n \n+/* In toplev.c */\n+void write_global_declarations PARAMS ((void));\n+\n #define LANG_HOOKS_NAME\t\t\t\"GNU unknown\"\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct lang_identifier)\n #define LANG_HOOKS_INIT\t\t\tlhd_do_nothing\n@@ -217,6 +220,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n #define LANG_HOOKS_PUSHDECL\tpushdecl\n #define LANG_HOOKS_GETDECLS\tgetdecls\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n+#define LANG_HOOKS_WRITE_GLOBALS write_global_declarations\n \n #define LANG_HOOKS_DECLS { \\\n   LANG_HOOKS_PUSHLEVEL, \\\n@@ -226,7 +230,8 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_SET_BLOCK, \\\n   LANG_HOOKS_PUSHDECL, \\\n   LANG_HOOKS_GETDECLS, \\\n-  LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL \\\n+  LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\\n+  LANG_HOOKS_WRITE_GLOBALS \\\n }\n \n /* The whole thing.  The structure is defined in langhooks.h.  */"}, {"sha": "4e2685b81464c1368a66934320275b6249419107", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=2b59501bf6ed69ff30931024cf346ba6592ba9be", "patch": "@@ -176,6 +176,10 @@ struct lang_hooks_for_decls\n   /* Returns true when we should warn for an unused global DECL.\n      We will already have checked that it has static binding.  */\n   bool (*warn_unused_global) PARAMS ((tree));\n+\n+  /* Obtain a list of globals and do final output on them at end\n+     of compilation */\n+  void (*final_write_globals) PARAMS ((void));\n };\n \n /* Language-specific hooks.  See langhooks-def.h for defaults.  */"}, {"sha": "09e67b35dcf88ad25930959411d5ee7f7b0fd8dd", "filename": "gcc/toplev.c", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b59501bf6ed69ff30931024cf346ba6592ba9be/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2b59501bf6ed69ff30931024cf346ba6592ba9be", "patch": "@@ -1933,8 +1933,10 @@ wrapup_global_declarations (vec, len)\n     {\n       decl = vec[i];\n \n-      /* We're not deferring this any longer.  */\n-      DECL_DEFER_OUTPUT (decl) = 0;\n+      /* We're not deferring this any longer.  Assignment is\n+\t conditional to avoid needlessly dirtying PCH pages. */\n+      if (DECL_DEFER_OUTPUT (decl) != 0)\n+\tDECL_DEFER_OUTPUT (decl) = 0;\n \n       if (TREE_CODE (decl) == VAR_DECL && DECL_SIZE (decl) == 0)\n \t(*lang_hooks.finish_incomplete_decl) (decl);\n@@ -2141,8 +2143,6 @@ pop_srcloc ()\n static void\n compile_file ()\n {\n-  tree globals;\n-\n   /* Initialize yet another pass.  */\n \n   init_final (main_input_filename);\n@@ -2165,38 +2165,14 @@ compile_file ()\n   if (flag_syntax_only)\n     return;\n \n-  globals = (*lang_hooks.decls.getdecls) ();\n-\n-  /* Really define vars that have had only a tentative definition.\n-     Really output inline functions that must actually be callable\n-     and have not been output so far.  */\n-\n-  {\n-    int len = list_length (globals);\n-    tree *vec = (tree *) xmalloc (sizeof (tree) * len);\n-    int i;\n-    tree decl;\n-\n-    /* Process the decls in reverse order--earliest first.\n-       Put them into VEC from back to front, then take out from front.  */\n-\n-    for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))\n-      vec[len - i - 1] = decl;\n-\n-    wrapup_global_declarations (vec, len);\n+  (*lang_hooks.decls.final_write_globals)();\n \n     if (profile_arc_flag)\n       /* This must occur after the loop to output deferred functions.\n          Else the profiler initializer would not be emitted if all the\n          functions in this compilation unit were deferred.  */\n       create_profiler ();\n \n-    check_global_declarations (vec, len);\n-\n-    /* Clean up.  */\n-    free (vec);\n-  }\n-\n   /* Write out any pending weak symbol declarations.  */\n \n   weak_finish ();\n@@ -2248,6 +2224,36 @@ compile_file ()\n       timevar_pop (TV_DUMP);\n     }\n }\n+\n+/* Default for lang_hooks.decls.final_write_globals */\n+void write_global_declarations ()\n+{\n+  tree globals = (*lang_hooks.decls.getdecls) ();\n+\n+  /* Really define vars that have had only a tentative definition.\n+     Really output inline functions that must actually be callable\n+     and have not been output so far.  */\n+\n+  {\n+    int len = list_length (globals);\n+    tree *vec = (tree *) xmalloc (sizeof (tree) * len);\n+    int i;\n+    tree decl;\n+\n+    /* Process the decls in reverse order--earliest first.\n+       Put them into VEC from back to front, then take out from front.  */\n+\n+    for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))\n+      vec[len - i - 1] = decl;\n+\n+    wrapup_global_declarations (vec, len);\n+\n+    check_global_declarations (vec, len);\n+\n+    /* Clean up.  */\n+    free (vec);\n+  }\n+}\n \f\n /* This is called from various places for FUNCTION_DECL, VAR_DECL,\n    and TYPE_DECL nodes."}]}