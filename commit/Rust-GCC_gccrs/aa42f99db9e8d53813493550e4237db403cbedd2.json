{"sha": "aa42f99db9e8d53813493550e4237db403cbedd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0MmY5OWRiOWU4ZDUzODEzNDkzNTUwZTQyMzdkYjQwM2NiZWRkMg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2004-03-04T21:21:36Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2004-03-04T21:21:36Z"}, "message": "ia64.md (divdf3_internal_thr): Fix algorithm.\n\n\t* config/ia64/ia64.md (divdf3_internal_thr): Fix algorithm.\n\t* testsuite/gcc.dg/20040303-1.c: New test.\n\nFrom-SVN: r78934", "tree": {"sha": "edecb1ac540effb999058b7890aead137e40f670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edecb1ac540effb999058b7890aead137e40f670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa42f99db9e8d53813493550e4237db403cbedd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa42f99db9e8d53813493550e4237db403cbedd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa42f99db9e8d53813493550e4237db403cbedd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa42f99db9e8d53813493550e4237db403cbedd2/comments", "author": null, "committer": null, "parents": [{"sha": "56bab4461e068180a6221184fc399adadc909035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56bab4461e068180a6221184fc399adadc909035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56bab4461e068180a6221184fc399adadc909035"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "16fa29c669b3a281e52beb5554c532a01ac5296e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa42f99db9e8d53813493550e4237db403cbedd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa42f99db9e8d53813493550e4237db403cbedd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa42f99db9e8d53813493550e4237db403cbedd2", "patch": "@@ -1,3 +1,8 @@\n+2004-03-04  Steve Ellcey  <sje@cup.hp.com>\n+\n+\t* config/ia64/ia64.md (divdf3_internal_thr): Fix algorithm.\n+\t* testsuite/gcc.dg/20040303-1.c: New test.\n+\n 2004-03-04  Steven Bosscher  <stevenb@suse.de>\n \n \t* ppro.md: Rewrite as a DFA pipeline description."}, {"sha": "1c0cc1230e5daf666b158c948fee978b4d405bb7", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa42f99db9e8d53813493550e4237db403cbedd2/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa42f99db9e8d53813493550e4237db403cbedd2/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=aa42f99db9e8d53813493550e4237db403cbedd2", "patch": "@@ -3177,7 +3177,7 @@\n    (cond_exec (ne (match_dup 5) (const_int 0))\n      (parallel [(set (match_dup 9)\n \t\t     (float_truncate:DF\n-\t\t       (mult:XF (match_dup 7) (match_dup 3))))\n+\t\t       (mult:XF (match_dup 7) (match_dup 6))))\n \t\t(use (const_int 1))]))\n    (cond_exec (ne (match_dup 5) (const_int 0))\n      (parallel [(set (match_dup 4)"}, {"sha": "325853860b6e3eaf5a1e840946e3b52520210133", "filename": "gcc/testsuite/gcc.dg/20040303-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa42f99db9e8d53813493550e4237db403cbedd2/gcc%2Ftestsuite%2Fgcc.dg%2F20040303-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa42f99db9e8d53813493550e4237db403cbedd2/gcc%2Ftestsuite%2Fgcc.dg%2F20040303-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20040303-1.c?ref=aa42f99db9e8d53813493550e4237db403cbedd2", "patch": "@@ -0,0 +1,20 @@\n+/* Test floating point division on ia64.  There was a bug in the\n+   max-throughput version of the inline division code.  Expecting an\n+   exact value from a floating point expression is unwise but GCC\n+   depends on it in allocno_compare.  */\n+\n+/* { dg-do run { target ia64-*-* } } */\n+/* { dg-options \"-minline-float-divide-max-throughput\" { target ia64-*-* } } */\n+\n+extern void abort (void);\n+\n+volatile int i = 24;\n+volatile int j = 30;\n+volatile int k = 1;\n+\n+int main()\n+{\n+        int pri2 = (((double) i / j) * (10000 / 1000) * k);\n+        if (pri2 != 8) abort();\n+\treturn 0;\n+}"}]}