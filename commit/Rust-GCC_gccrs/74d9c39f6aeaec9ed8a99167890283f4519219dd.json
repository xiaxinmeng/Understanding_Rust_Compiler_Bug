{"sha": "74d9c39f6aeaec9ed8a99167890283f4519219dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRkOWMzOWY2YWVhZWM5ZWQ4YTk5MTY3ODkwMjgzZjQ1MTkyMTlkZA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2005-11-16T17:08:05Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2005-11-16T17:08:05Z"}, "message": "unwind-arm.c (abort): Add prototype here.\n\ngcc/\n\t* config/arm/unwind-arm.c (abort): Add prototype here.\n\t(UCB_FORCED_STOP_ARG): Correct typo in macro argument.\n\t(struct phase1_vrs): Add prev_sp.\n\t(unwind_phase2_forced): Save the original core registers instead of\n\tmodifying entry_vrs.  Take a new flag argument for resuming unwinding\n\tand set action flags accordingly.  Always set _US_END_OF_STACK when\n\tget_eit_entry fails.  Unwind before calling the stop function.\n\t(_Unwind_GetCFA): New function.\n\t(__gnu_Unwind_ForcedUnwind): Update call to unwind_phase2_forced.\n\t(__gnu_Unwind_Resume_or_Rethrow): Likewise.\n\t(__gnu_Unwind_Resume): Do not unwind here for forced unwinding;\n\tjust call unwind_phase2_forced.\n\t(_Unwind_GetDataRelBase, _Unwind_GetTextRelBase): Move to here.\n\t* config/arm/unwind-arm.h (abort): Remove prototype.\n\t(_Unwind_GetDataRelBase, _Unwind_GetTextRelBase): Change to\n\tprototypes.\n\t(_Unwind_GetCFA): New prototype.\n\t* config/arm/pr-support.c (abort): Add prototype here.\n\t* unwind-c.c (PERSONALITY_FUNCTION) [__ARM_EABI_UNWINDER__]: Handle\n\tforced unwinding.\n\t* config/arm/arm.c (arm_expand_prologue, thumb_expand_prologue): Do\n\tnot schedule the prologue with non-call exceptions and EABI.\ngcc/testsuite/\n\t* gcc.dg/cleanup-5.c, gcc.dg/cleanup-8.c, gcc.dg/cleanup-9.c,\n\tgcc.dg/cleanup-10.c, gcc.dg/cleanup-11.c: Update for ARM EABI.\n\nFrom-SVN: r107091", "tree": {"sha": "099343db634a03965f65fd2dcff754e631fadd4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099343db634a03965f65fd2dcff754e631fadd4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74d9c39f6aeaec9ed8a99167890283f4519219dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d9c39f6aeaec9ed8a99167890283f4519219dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d9c39f6aeaec9ed8a99167890283f4519219dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d9c39f6aeaec9ed8a99167890283f4519219dd/comments", "author": null, "committer": null, "parents": [{"sha": "1dcca6f3616f620f7ac81e9f4b814b06b246b093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcca6f3616f620f7ac81e9f4b814b06b246b093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcca6f3616f620f7ac81e9f4b814b06b246b093"}], "stats": {"total": 207, "additions": 154, "deletions": 53}, "files": [{"sha": "0b14036d431b8a123d0cc82117ebe4923b65bc30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -1,3 +1,28 @@\n+2005-11-16  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* config/arm/unwind-arm.c (abort): Add prototype here.\n+\t(UCB_FORCED_STOP_ARG): Correct typo in macro argument.\n+\t(struct phase1_vrs): Add prev_sp.\n+\t(unwind_phase2_forced): Save the original core registers instead of\n+\tmodifying entry_vrs.  Take a new flag argument for resuming unwinding\n+\tand set action flags accordingly.  Always set _US_END_OF_STACK when\n+\tget_eit_entry fails.  Unwind before calling the stop function.\n+\t(_Unwind_GetCFA): New function.\n+\t(__gnu_Unwind_ForcedUnwind): Update call to unwind_phase2_forced.\n+\t(__gnu_Unwind_Resume_or_Rethrow): Likewise.\n+\t(__gnu_Unwind_Resume): Do not unwind here for forced unwinding;\n+\tjust call unwind_phase2_forced.\n+\t(_Unwind_GetDataRelBase, _Unwind_GetTextRelBase): Move to here.\n+\t* config/arm/unwind-arm.h (abort): Remove prototype.\n+\t(_Unwind_GetDataRelBase, _Unwind_GetTextRelBase): Change to\n+\tprototypes.\n+\t(_Unwind_GetCFA): New prototype.\n+\t* config/arm/pr-support.c (abort): Add prototype here.\n+\t* unwind-c.c (PERSONALITY_FUNCTION) [__ARM_EABI_UNWINDER__]: Handle\n+\tforced unwinding.\n+\t* config/arm/arm.c (arm_expand_prologue, thumb_expand_prologue): Do\n+\tnot schedule the prologue with non-call exceptions and EABI.\n+\n 2005-11-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/arm/unwind-arm.h: Reorder interface function declarations."}, {"sha": "b2fad5634e1c4f431bdb4ccca463ca0496a381a7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -10850,8 +10850,11 @@ arm_expand_prologue (void)\n \n   /* If we are profiling, make sure no instructions are scheduled before\n      the call to mcount.  Similarly if the user has requested no\n-     scheduling in the prolog.  */\n-  if (current_function_profile || !TARGET_SCHED_PROLOG)\n+     scheduling in the prolog.  Similarly if we want non-call exceptions\n+     using the EABI unwinder, to prevent faulting instructions from being\n+     swapped with a stack adjustment.  */\n+  if (current_function_profile || !TARGET_SCHED_PROLOG\n+      || (ARM_EABI_UNWIND_TABLES && flag_non_call_exceptions))\n     emit_insn (gen_blockage ());\n \n   /* If the link register is being kept alive, with the return address in it,\n@@ -13714,7 +13717,13 @@ thumb_expand_prologue (void)\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n-  if (current_function_profile || !TARGET_SCHED_PROLOG)\n+  /* If we are profiling, make sure no instructions are scheduled before\n+     the call to mcount.  Similarly if the user has requested no\n+     scheduling in the prolog.  Similarly if we want non-call exceptions\n+     using the EABI unwinder, to prevent faulting instructions from being\n+     swapped with a stack adjustment.  */\n+  if (current_function_profile || !TARGET_SCHED_PROLOG\n+      || (ARM_EABI_UNWIND_TABLES && flag_non_call_exceptions))\n     emit_insn (gen_blockage ());\n \n   cfun->machine->lr_save_eliminated = !thumb_force_lr_save ();"}, {"sha": "072b4a98d5cd474d974d9527504ebf5085be32ae", "filename": "gcc/config/arm/pr-support.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Fconfig%2Farm%2Fpr-support.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Fconfig%2Farm%2Fpr-support.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpr-support.c?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -27,6 +27,10 @@\n    Boston, MA 02110-1301, USA.  */\n #include \"unwind.h\"\n \n+/* We add a prototype for abort here to avoid creating a dependency on\n+   target headers.  */\n+extern void abort (void);\n+\n typedef struct _ZSt9type_info type_info; /* This names C++ type_info type */\n \n /* Misc constants.  */"}, {"sha": "b3f8a00dcb59a87bf44aacd713c99561bb1e07a9", "filename": "gcc/config/arm/unwind-arm.c", "status": "modified", "additions": 93, "deletions": 28, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Fconfig%2Farm%2Funwind-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Fconfig%2Farm%2Funwind-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funwind-arm.c?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -27,6 +27,10 @@\n    Boston, MA 02110-1301, USA.  */\n #include \"unwind.h\"\n \n+/* We add a prototype for abort here to avoid creating a dependency on\n+   target headers.  */\n+extern void abort (void);\n+\n /* Definitions for C++ runtime support routines.  We make these weak\n    declarations to avoid pulling in libsupc++ unnecessarily.  */\n typedef unsigned char bool;\n@@ -54,7 +58,7 @@ __gnu_Unwind_Find_exidx (_Unwind_Ptr, int *);\n #define UCB_FORCED_STOP_FN(ucbp) ((ucbp)->unwinder_cache.reserved1)\n #define UCB_PR_ADDR(ucbp) ((ucbp)->unwinder_cache.reserved2)\n #define UCB_SAVED_CALLSITE_ADDR(ucbp) ((ucbp)->unwinder_cache.reserved3)\n-#define UCB_FORCED_STOP_ARG(ucb) ((ucbp)->unwinder_cache.reserved4)\n+#define UCB_FORCED_STOP_ARG(ucbp) ((ucbp)->unwinder_cache.reserved4)\n \n struct core_regs\n {\n@@ -107,6 +111,7 @@ typedef struct\n   /* The first fields must be the same as a phase2_vrs.  */\n   _uw demand_save_flags;\n   struct core_regs core;\n+  _uw prev_sp; /* Only valid during forced unwinding.  */\n   struct vfp_regs vfp;\n   struct fpa_regs fpa;\n } phase1_vrs;\n@@ -497,11 +502,21 @@ unwind_phase2 (_Unwind_Control_Block * ucbp, phase2_vrs * vrs)\n /* Perform phase2 forced unwinding.  */\n \n static _Unwind_Reason_Code\n-unwind_phase2_forced (_Unwind_Control_Block *ucbp, phase2_vrs *entry_vrs)\n+unwind_phase2_forced (_Unwind_Control_Block *ucbp, phase2_vrs *entry_vrs,\n+\t\t      int resuming)\n {\n   _Unwind_Stop_Fn stop_fn = (_Unwind_Stop_Fn) UCB_FORCED_STOP_FN (ucbp);\n   void *stop_arg = (void *)UCB_FORCED_STOP_ARG (ucbp);\n-  _Unwind_Reason_Code pr_result;\n+  _Unwind_Reason_Code pr_result = 0;\n+  /* We use phase1_vrs here even though we do not demand save, for the\n+     prev_sp field.  */\n+  phase1_vrs saved_vrs, next_vrs;\n+\n+  /* Save the core registers.  */\n+  saved_vrs.core = entry_vrs->core;\n+  /* We don't need to demand-save the non-core registers, because we\n+     unwind in a single pass.  */\n+  saved_vrs.demand_save_flags = 0;\n \n   /* Unwind until we reach a propagation barrier.  */\n   do\n@@ -511,27 +526,51 @@ unwind_phase2_forced (_Unwind_Control_Block *ucbp, phase2_vrs *entry_vrs)\n       _Unwind_Reason_Code stop_code;\n \n       /* Find the entry for this routine.  */\n-      entry_code = get_eit_entry (ucbp, entry_vrs->core.r[R_PC]);\n+      entry_code = get_eit_entry (ucbp, saved_vrs.core.r[R_PC]);\n \n-      action = _US_UNWIND_FRAME_STARTING | _US_FORCE_UNWIND;\n-      if (entry_code == _URC_END_OF_STACK)\n-\taction |= _US_END_OF_STACK;\n-      else if (entry_code != _URC_OK)\n-\treturn _URC_FAILURE;\n+      if (resuming)\n+\t{\n+\t  action = _US_UNWIND_FRAME_RESUME | _US_FORCE_UNWIND;\n+\t  resuming = 0;\n+\t}\n+      else\n+\taction = _US_UNWIND_FRAME_STARTING | _US_FORCE_UNWIND;\n+\n+      if (entry_code == _URC_OK)\n+\t{\n+\t  UCB_SAVED_CALLSITE_ADDR (ucbp) = saved_vrs.core.r[R_PC];\n+\n+\t  next_vrs = saved_vrs;\n+\n+\t  /* Call the pr to decide what to do.  */\n+\t  pr_result = ((personality_routine) UCB_PR_ADDR (ucbp))\n+\t    (action, ucbp, (void *) &next_vrs);\n+\n+\t  saved_vrs.prev_sp = next_vrs.core.r[R_SP];\n+\t}\n+      else\n+\t{\n+\t  /* Treat any failure as the end of unwinding, to cope more\n+\t     gracefully with missing EH information.  Mixed EH and\n+\t     non-EH within one object will usually result in failure,\n+\t     because the .ARM.exidx tables do not indicate the end\n+\t     of the code to which they apply; but mixed EH and non-EH\n+\t     shared objects should return an unwind failure at the\n+\t     entry of a non-EH shared object.  */\n+\t  action |= _US_END_OF_STACK;\n+\n+\t  saved_vrs.prev_sp = saved_vrs.core.r[R_SP];\n+\t}\n \n       stop_code = stop_fn (1, action, ucbp->exception_class, ucbp,\n-\t\t\t   (void *)entry_vrs, stop_arg);\n+\t\t\t   (void *)&saved_vrs, stop_arg);\n       if (stop_code != _URC_NO_REASON)\n \treturn _URC_FAILURE;\n \n-      if (entry_code == _URC_END_OF_STACK)\n+      if (entry_code != _URC_OK)\n \treturn entry_code;\n \n-      UCB_SAVED_CALLSITE_ADDR (ucbp) = entry_vrs->core.r[R_PC];\n-\n-      /* Call the pr to decide what to do.  */\n-      pr_result = ((personality_routine) UCB_PR_ADDR (ucbp))\n-\t(action, ucbp, (void *) entry_vrs);\n+      saved_vrs = next_vrs;\n     }\n   while (pr_result == _URC_CONTINUE_UNWIND);\n \n@@ -542,7 +581,20 @@ unwind_phase2_forced (_Unwind_Control_Block *ucbp, phase2_vrs *entry_vrs)\n       return _URC_FAILURE;\n     }\n \n-  restore_core_regs (&entry_vrs->core);\n+  restore_core_regs (&saved_vrs.core);\n+}\n+\n+/* This is a very limited implementation of _Unwind_GetCFA.  It returns\n+   the stack pointer as it is about to be unwound, and is only valid\n+   while calling the stop function during forced unwinding.  If the\n+   current personality routine result is going to run a cleanup, this\n+   will not be the CFA; but when the frame is really unwound, it will\n+   be.  */\n+\n+_Unwind_Word\n+_Unwind_GetCFA (_Unwind_Context *context)\n+{\n+  return ((phase1_vrs *) context)->prev_sp;\n }\n \n /* Perform phase1 unwinding.  UCBP is the exception being thrown, and\n@@ -610,7 +662,7 @@ __gnu_Unwind_ForcedUnwind (_Unwind_Control_Block *ucbp,\n   /* Set the pc to the call site.  */\n   entry_vrs->core.r[R_PC] = entry_vrs->core.r[R_LR];\n \n-  return unwind_phase2_forced (ucbp, entry_vrs);\n+  return unwind_phase2_forced (ucbp, entry_vrs, 0);\n }\n \n _Unwind_Reason_Code\n@@ -620,18 +672,21 @@ _Unwind_Reason_Code\n __gnu_Unwind_Resume (_Unwind_Control_Block * ucbp, phase2_vrs * entry_vrs)\n {\n   _Unwind_Reason_Code pr_result;\n-  _Unwind_State action;\n \n   /* Recover the saved address.  */\n   entry_vrs->core.r[R_PC] = UCB_SAVED_CALLSITE_ADDR (ucbp);\n \n-  /* Call the cached PR.  */\n-  action = _US_UNWIND_FRAME_RESUME;\n   if (UCB_FORCED_STOP_FN (ucbp))\n-    action |= _US_FORCE_UNWIND;\n+    {\n+      unwind_phase2_forced (ucbp, entry_vrs, 1);\n \n+      /* We can't return failure at this point.  */\n+      abort ();\n+    }\n+\n+  /* Call the cached PR.  */\n   pr_result = ((personality_routine) UCB_PR_ADDR (ucbp))\n-\t(action, ucbp, (_Unwind_Context *) entry_vrs);\n+\t(_US_UNWIND_FRAME_RESUME, ucbp, (_Unwind_Context *) entry_vrs);\n \n   switch (pr_result)\n     {\n@@ -641,10 +696,7 @@ __gnu_Unwind_Resume (_Unwind_Control_Block * ucbp, phase2_vrs * entry_vrs)\n \n     case _URC_CONTINUE_UNWIND:\n       /* Continue unwinding the next frame.  */\n-      if (UCB_FORCED_STOP_FN (ucbp))\n-\treturn unwind_phase2_forced (ucbp, entry_vrs);\n-      else\n-\tunwind_phase2 (ucbp, entry_vrs);\n+      unwind_phase2 (ucbp, entry_vrs);\n \n     default:\n       abort ();\n@@ -664,7 +716,7 @@ __gnu_Unwind_Resume_or_Rethrow (_Unwind_Control_Block * ucbp,\n   /* Set the pc to the call site.  */\n   entry_vrs->core.r[R_PC] = entry_vrs->core.r[R_LR];\n   /* Continue unwinding the next frame.  */\n-  return unwind_phase2_forced (ucbp, entry_vrs);\n+  return unwind_phase2_forced (ucbp, entry_vrs, 0);\n }\n \n /* Clean up an exception object when unwinding is complete.  */\n@@ -947,3 +999,16 @@ __aeabi_unwind_cpp_pr2 (_Unwind_State state,\n {\n   return __gnu_unwind_pr_common (state, ucbp, context, 2);\n }\n+\n+/* These two should never be used.  */\n+_Unwind_Ptr\n+_Unwind_GetDataRelBase (_Unwind_Context *context __attribute__ ((unused)))\n+{\n+  abort ();\n+}\n+\n+_Unwind_Ptr\n+_Unwind_GetTextRelBase (_Unwind_Context *context __attribute__ ((unused)))\n+{\n+  abort ();\n+}"}, {"sha": "dd8d2affe39cb8faa92c19d168c94ca3899b268a", "filename": "gcc/config/arm/unwind-arm.h", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Fconfig%2Farm%2Funwind-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Fconfig%2Farm%2Funwind-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funwind-arm.h?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -37,10 +37,6 @@\n #ifdef __cplusplus\n extern \"C\" {\n #endif\n-  /* We add a prototype for abort here to avoid creating a dependency on\n-     target headers.  */\n-  extern void abort();\n-\n   typedef unsigned _Unwind_Word __attribute__((__mode__(__word__)));\n   typedef signed _Unwind_Sword __attribute__((__mode__(__word__)));\n   typedef unsigned _Unwind_Ptr __attribute__((__mode__(__pointer__)));\n@@ -195,18 +191,9 @@ extern \"C\" {\n   void * _Unwind_GetLanguageSpecificData (_Unwind_Context *);\n   _Unwind_Ptr _Unwind_GetRegionStart (_Unwind_Context *);\n \n-  /* These two should never be used */\n-  static inline _Unwind_Ptr\n-  _Unwind_GetDataRelBase (_Unwind_Context * context __attribute__ ((unused)))\n-    {\n-      abort ();\n-    }\n-\n-  static inline _Unwind_Ptr\n-  _Unwind_GetTextRelBase (_Unwind_Context * context __attribute__ ((unused)))\n-    {\n-      abort ();\n-    }\n+  /* These two should never be used.  */\n+  _Unwind_Ptr _Unwind_GetDataRelBase (_Unwind_Context *);\n+  _Unwind_Ptr _Unwind_GetTextRelBase (_Unwind_Context *);\n \n   /* Interface functions: */\n   _Unwind_Reason_Code _Unwind_RaiseException(_Unwind_Control_Block *ucbp);\n@@ -218,6 +205,7 @@ extern \"C\" {\n \t_Unwind_Control_Block *, struct _Unwind_Context *, void *);\n   _Unwind_Reason_Code _Unwind_ForcedUnwind (_Unwind_Control_Block *,\n \t\t\t\t\t    _Unwind_Stop_Fn, void *);\n+  _Unwind_Word _Unwind_GetCFA (struct _Unwind_Context *);\n   void _Unwind_Complete(_Unwind_Control_Block *ucbp);\n   void _Unwind_DeleteException (_Unwind_Exception *);\n "}, {"sha": "22335ac22fc710c4d6dc3865314af1bf11c9a953", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -1,3 +1,8 @@\n+2005-11-16  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* gcc.dg/cleanup-5.c, gcc.dg/cleanup-8.c, gcc.dg/cleanup-9.c,\n+\tgcc.dg/cleanup-10.c, gcc.dg/cleanup-11.c: Update for ARM EABI.\n+\n 2005-11-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/eh/forced1.C: Adjust to cope with ARM EABI"}, {"sha": "e8ae3bca78e2d108a715b0666a4060d34ca799ba", "filename": "gcc/testsuite/gcc.dg/cleanup-10.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-10.c?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -7,6 +7,7 @@\n #include <stdlib.h>\n #include <signal.h>\n #include <unistd.h>\n+#include <string.h>\n \n static _Unwind_Reason_Code\n force_unwind_stop (int version, _Unwind_Action actions,\n@@ -23,7 +24,7 @@ force_unwind_stop (int version, _Unwind_Action actions,\n static void force_unwind ()\n {\n   struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n-  exc->exception_class = 0;\n+  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n   exc->exception_cleanup = 0;\n                    \n #ifndef __USING_SJLJ_EXCEPTIONS__"}, {"sha": "ff315f73d7a7c474598466c4f5ade4f42a6edf2b", "filename": "gcc/testsuite/gcc.dg/cleanup-11.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-11.c?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -7,6 +7,7 @@\n #include <stdlib.h>\n #include <signal.h>\n #include <unistd.h>\n+#include <string.h>\n \n static _Unwind_Reason_Code\n force_unwind_stop (int version, _Unwind_Action actions,\n@@ -23,7 +24,7 @@ force_unwind_stop (int version, _Unwind_Action actions,\n static void force_unwind ()\n {\n   struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n-  exc->exception_class = 0;\n+  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n   exc->exception_cleanup = 0;\n                    \n #ifndef __USING_SJLJ_EXCEPTIONS__"}, {"sha": "c335c1e4492335cb95c459f77bc63c0e1b986f0e", "filename": "gcc/testsuite/gcc.dg/cleanup-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-5.c?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -6,6 +6,7 @@\n \n #include <unwind.h>\n #include <stdlib.h>\n+#include <string.h>\n \n static _Unwind_Reason_Code\n force_unwind_stop (int version, _Unwind_Action actions,\n@@ -22,7 +23,7 @@ force_unwind_stop (int version, _Unwind_Action actions,\n static void force_unwind ()\n {\n   struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n-  exc->exception_class = 0;\n+  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n   exc->exception_cleanup = 0;\n                    \n #ifndef __USING_SJLJ_EXCEPTIONS__"}, {"sha": "321e1f029df190a4e3cb160f34765cb9063ea119", "filename": "gcc/testsuite/gcc.dg/cleanup-8.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-8.c?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -6,6 +6,7 @@\n #include <unwind.h>\n #include <stdlib.h>\n #include <signal.h>\n+#include <string.h>\n \n static _Unwind_Reason_Code\n force_unwind_stop (int version, _Unwind_Action actions,\n@@ -22,7 +23,7 @@ force_unwind_stop (int version, _Unwind_Action actions,\n static void force_unwind ()\n {\n   struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n-  exc->exception_class = 0;\n+  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n   exc->exception_cleanup = 0;\n                    \n #ifndef __USING_SJLJ_EXCEPTIONS__"}, {"sha": "c3ac5fb726bfad07d75dc4182ebe7ba8958caed2", "filename": "gcc/testsuite/gcc.dg/cleanup-9.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcleanup-9.c?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -6,6 +6,7 @@\n #include <unwind.h>\n #include <stdlib.h>\n #include <signal.h>\n+#include <string.h>\n \n static _Unwind_Reason_Code\n force_unwind_stop (int version, _Unwind_Action actions,\n@@ -22,7 +23,7 @@ force_unwind_stop (int version, _Unwind_Action actions,\n static void force_unwind ()\n {\n   struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n-  exc->exception_class = 0;\n+  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n   exc->exception_cleanup = 0;\n                    \n #ifndef __USING_SJLJ_EXCEPTIONS__"}, {"sha": "e3e2eca1804bb24a8f4693f1ca1e61cc9708a48d", "filename": "gcc/unwind-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Funwind-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d9c39f6aeaec9ed8a99167890283f4519219dd/gcc%2Funwind-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-c.c?ref=74d9c39f6aeaec9ed8a99167890283f4519219dd", "patch": "@@ -129,7 +129,7 @@ PERSONALITY_FUNCTION (int version,\n   _Unwind_Ptr landing_pad, ip;\n \n #ifdef __ARM_EABI_UNWINDER__\n-  if (state != _US_UNWIND_FRAME_STARTING)\n+  if ((state & _US_ACTION_MASK) != _US_UNWIND_FRAME_STARTING)\n     CONTINUE_UNWINDING;\n \n   /* The dwarf unwinder assumes the context structure holds things like the"}]}