{"sha": "8c048b48516bfee7eb758e5ac86ae94181638c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMwNDhiNDg1MTZiZmVlN2ViNzU4ZTVhYzg2YWU5NDE4MTYzOGM5OQ==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-02-26T18:43:27Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-02-26T18:43:27Z"}, "message": "configure.in: Remove more obsolete, bogus code.\n\n\t* configure.in: Remove more obsolete, bogus code.\n\t* configure: Regenerate.\n\nFrom-SVN: r78512", "tree": {"sha": "03db2ab4e496b63c19db57d6650228c589441ca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03db2ab4e496b63c19db57d6650228c589441ca3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c048b48516bfee7eb758e5ac86ae94181638c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c048b48516bfee7eb758e5ac86ae94181638c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c048b48516bfee7eb758e5ac86ae94181638c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c048b48516bfee7eb758e5ac86ae94181638c99/comments", "author": null, "committer": null, "parents": [{"sha": "b178305dfd934a716c1175039bec2f5f73215fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b178305dfd934a716c1175039bec2f5f73215fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b178305dfd934a716c1175039bec2f5f73215fc1"}], "stats": {"total": 57, "additions": 9, "deletions": 48}, "files": [{"sha": "1f239d92b2563f23d7392d1c1676aa7f0b182995", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c048b48516bfee7eb758e5ac86ae94181638c99/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c048b48516bfee7eb758e5ac86ae94181638c99/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=8c048b48516bfee7eb758e5ac86ae94181638c99", "patch": "@@ -1,5 +1,8 @@\n 2004-02-26  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n+\t* configure.in: Remove more obsolete, bogus code.\n+\t* configure: Regenerate.\n+\n \t* acinclude.m4: Remove obsolete and bogus constructs.\n \t* aclocal.m4: Regenerate.\n \t* configure: Regnerate."}, {"sha": "928944aacc4343806a8500c361896e84fa78cafa", "filename": "boehm-gc/configure", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c048b48516bfee7eb758e5ac86ae94181638c99/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c048b48516bfee7eb758e5ac86ae94181638c99/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=8c048b48516bfee7eb758e5ac86ae94181638c99", "patch": "@@ -4726,16 +4726,6 @@ fi\n   MAINT=$MAINTAINER_MODE_TRUE\n \n \n-# automake wants to see AC_EXEEXT.  But we don't need it.  And having\n-# it is actually a problem, because the compiler we're passed can't\n-# necessarily do a full link.  So we fool automake here.\n-if false; then\n-  # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands\n-  # to nothing, so nothing would remain between `then' and `fi' if it\n-  # were not for the `:' below.\n-  :\n-\n-fi\n \n echo \"$as_me:$LINENO: checking for thread model used by GCC\" >&5\n echo $ECHO_N \"checking for thread model used by GCC... $ECHO_C\" >&6\n@@ -5867,17 +5857,6 @@ if test \"${with_cross_host+set}\" = set; then\n \n fi;\n \n-# automake wants to see AC_EXEEXT.  But we don't need it.  And having\n-# it is actually a problem, because the compiler we're passed can't\n-# necessarily do a full link.  So we fool automake here.\n-if false; then\n-  # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands\n-  # to nothing, so nothing would remain between `then' and `fi' if it\n-  # were not for the `:' below.\n-  :\n-\n-fi\n-\n echo \"$as_me:$LINENO: checking whether Solaris gcc optimization fix is necessary\" >&5\n echo $ECHO_N \"checking whether Solaris gcc optimization fix is necessary... $ECHO_C\" >&6\n case \"$host\" in"}, {"sha": "e58ca15424c4e5d2599d546603a5ddd0f26e8cbb", "filename": "boehm-gc/configure.in", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c048b48516bfee7eb758e5ac86ae94181638c99/boehm-gc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c048b48516bfee7eb758e5ac86ae94181638c99/boehm-gc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.in?ref=8c048b48516bfee7eb758e5ac86ae94181638c99", "patch": "@@ -81,16 +81,6 @@ AC_ARG_WITH(cross-host,\n [  --with-cross-host=HOST  configuring with a cross compiler])\n \n AM_MAINTAINER_MODE\n-# automake wants to see AC_EXEEXT.  But we don't need it.  And having\n-# it is actually a problem, because the compiler we're passed can't\n-# necessarily do a full link.  So we fool automake here.\n-if false; then\n-  # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands\n-  # to nothing, so nothing would remain between `then' and `fi' if it\n-  # were not for the `:' below.\n-  :\n-  AC_EXEEXT\n-fi\n \n AC_MSG_CHECKING([for thread model used by GCC])\n THREADS=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n@@ -214,7 +204,7 @@ AC_MSG_RESULT($THREADLIBS)\n esac\n AC_SUBST(THREADLIBS)\n \n-case \"$host\" in \n+case \"$host\" in\n    powerpc-*-darwin*)\n       powerpc_darwin=true\n       ;;\n@@ -225,7 +215,7 @@ AM_CONDITIONAL(POWERPC_DARWIN,test x$powerpc_darwin = xtrue)\n # dyld calls anyway\n case \"$host\" in\n   *-*-darwin*) ;;\n-  *) \n+  *)\n     AC_CHECK_LIB(dl, dlopen, EXTRA_TEST_LIBS=\"$EXTRA_TEST_LIBS -ldl\")\n     ;;\n esac\n@@ -296,7 +286,7 @@ esac\n # some variations of Power PC, where trampolines don't contain\n # executable code.\n #\n-AC_MSG_CHECKING(which machine-dependent code should be used) \n+AC_MSG_CHECKING(which machine-dependent code should be used)\n machdep=\n case \"$host\" in\n  alpha*-*-openbsd*)\n@@ -321,8 +311,8 @@ case \"$host\" in\n     ;;\n  mips-nec-sysv*|mips-unknown-sysv*)\n     ;;\n- mips*-*-linux*) \n-    ;; \n+ mips*-*-linux*)\n+    ;;\n  mips-*-*)\n     machdep=\"mips_sgi_mach_dep.lo\"\n     ;;\n@@ -361,7 +351,7 @@ ac_is_dgux=no\n AC_CHECK_HEADER(sys/dg_sys_info.h,\n [ac_is_dgux=yes;])\n \n-AC_MSG_RESULT($ac_is_dgux) \n+AC_MSG_RESULT($ac_is_dgux)\n     ## :GOTCHA: we do not check anything but sys/dg_sys_info.h\n if test $ac_is_dgux = yes; then\n     if test \"$enable_full_debug\" = \"yes\"; then\n@@ -382,17 +372,6 @@ AC_ARG_WITH(target-subdir,\n AC_ARG_WITH(cross-host,\n [  --with-cross-host=HOST  configuring with a cross compiler])\n \n-# automake wants to see AC_EXEEXT.  But we don't need it.  And having\n-# it is actually a problem, because the compiler we're passed can't\n-# necessarily do a full link.  So we fool automake here.\n-if false; then\n-  # autoconf 2.50 runs AC_EXEEXT by default, and the macro expands\n-  # to nothing, so nothing would remain between `then' and `fi' if it\n-  # were not for the `:' below.\n-  :\n-  AC_EXEEXT\n-fi\n-\n dnl As of 4.13a2, the collector will not properly work on Solaris when\n dnl built with gcc and -O.  So we remove -O in the appropriate case.\n dnl"}]}