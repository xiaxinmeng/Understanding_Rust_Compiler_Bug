{"sha": "ca43f0efca4d2a74447d0e150730f6869877f374", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0M2YwZWZjYTRkMmE3NDQ0N2QwZTE1MDczMGY2ODY5ODc3ZjM3NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2009-12-17T08:34:27Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-12-17T08:34:27Z"}, "message": "sync.md (IMODE): Remove mode iterator.\n\n\t* config/i386/sync.md (IMODE): Remove mode iterator.\n\t(modesuffix): Remove mode attribute.\n\t(modeconstraint): Ditto.\n\t(immconstraint): Ditto.\n\t(*sync_compare_and_swap<mode>): Use SWI mode iterator instead of\n\tIMODE mode iterator, imodesuffix mode attribute instead of modesuffix,\n\t<r> mode attribute instead of modeconstraint and <i> mode attribute\n\tinstead of immconstraint.\n\t(sync_double_compare_and_swap<mode>): Ditto.\n\t(sync_old_add<mode>): Ditto.\n\t(sync_lock_test_and_set<mode>): Ditto.\n\t(sync_add<mode>): Ditto.\n\t(sync_sub<mode>): Ditto.\n\t(sync_and<mode>): Ditto.\n\t(sync_ior<mode>): Ditto.\n\t(sync_xor<mode>): Ditto.\n\t(sync_<code><mode>): Macroize insn pattern from\n\tsync_{and,ior,xor}<mode> using any_logic code iterator.\n\nFrom-SVN: r155304", "tree": {"sha": "cb2b3e7926710250674eb8c1cb53e19468b8539c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb2b3e7926710250674eb8c1cb53e19468b8539c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca43f0efca4d2a74447d0e150730f6869877f374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca43f0efca4d2a74447d0e150730f6869877f374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca43f0efca4d2a74447d0e150730f6869877f374", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca43f0efca4d2a74447d0e150730f6869877f374/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ad86035e8e75ebb5b93278ec0d46a1120334a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad86035e8e75ebb5b93278ec0d46a1120334a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ad86035e8e75ebb5b93278ec0d46a1120334a1a"}], "stats": {"total": 127, "additions": 62, "deletions": 65}, "files": [{"sha": "8f921a415d63d0bc1242a8913d9aca3b1e5e7278", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca43f0efca4d2a74447d0e150730f6869877f374/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca43f0efca4d2a74447d0e150730f6869877f374/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca43f0efca4d2a74447d0e150730f6869877f374", "patch": "@@ -1,3 +1,24 @@\n+2009-12-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sync.md (IMODE): Remove mode iterator.\n+\t(modesuffix): Remove mode attribute.\n+\t(modeconstraint): Ditto.\n+\t(immconstraint): Ditto.\n+\t(*sync_compare_and_swap<mode>): Use SWI mode iterator instead of\n+\tIMODE mode iterator, imodesuffix mode attribute instead of modesuffix,\n+\t<r> mode attribute instead of modeconstraint and <i> mode attribute\n+\tinstead of immconstraint.\n+\t(sync_double_compare_and_swap<mode>): Ditto.\n+\t(sync_old_add<mode>): Ditto.\n+\t(sync_lock_test_and_set<mode>): Ditto.\n+\t(sync_add<mode>): Ditto.\n+\t(sync_sub<mode>): Ditto.\n+\t(sync_and<mode>): Ditto.\n+\t(sync_ior<mode>): Ditto.\n+\t(sync_xor<mode>): Ditto.\n+\t(sync_<code><mode>): Macroize insn pattern from\n+\tsync_{and,ior,xor}<mode> using any_logic code iterator.\n+\n 2009-12-17  Shujing Zhao  <pearly.zhao@oracle.com>\n \n \tPR c/40885"}, {"sha": "0df85c730375e363d4cb930701cffd1d619d1a82", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 41, "deletions": 65, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca43f0efca4d2a74447d0e150730f6869877f374/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca43f0efca4d2a74447d0e150730f6869877f374/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=ca43f0efca4d2a74447d0e150730f6869877f374", "patch": "@@ -18,13 +18,9 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_mode_iterator IMODE [QI HI SI (DI \"TARGET_64BIT\")])\n-(define_mode_attr modesuffix [(QI \"b\") (HI \"w\") (SI \"l\") (DI \"q\")])\n-(define_mode_attr modeconstraint [(QI \"q\") (HI \"r\") (SI \"r\") (DI \"r\")])\n-(define_mode_attr immconstraint [(QI \"i\") (HI \"i\") (SI \"i\") (DI \"e\")])\n-\n-(define_mode_iterator CASMODE [QI HI SI (DI \"TARGET_64BIT || TARGET_CMPXCHG8B\")\n-\t\t\t   (TI \"TARGET_64BIT && TARGET_CMPXCHG16B\")])\n+(define_mode_iterator CASMODE\n+  [QI HI SI (DI \"TARGET_64BIT || TARGET_CMPXCHG8B\")\n+\t    (TI \"TARGET_64BIT && TARGET_CMPXCHG16B\")])\n (define_mode_iterator DCASMODE\n   [(DI \"!TARGET_64BIT && TARGET_CMPXCHG8B && !flag_pic\")\n    (TI \"TARGET_64BIT && TARGET_CMPXCHG16B\")])\n@@ -105,21 +101,21 @@\n })\n \n (define_insn \"*sync_compare_and_swap<mode>\"\n-  [(set (match_operand:IMODE 0 \"register_operand\" \"=a\")\n-\t(match_operand:IMODE 1 \"memory_operand\" \"+m\"))\n+  [(set (match_operand:SWI 0 \"register_operand\" \"=a\")\n+\t(match_operand:SWI 1 \"memory_operand\" \"+m\"))\n    (set (match_dup 1)\n-\t(unspec_volatile:IMODE\n+\t(unspec_volatile:SWI\n \t  [(match_dup 1)\n-\t   (match_operand:IMODE 2 \"register_operand\" \"a\")\n-\t   (match_operand:IMODE 3 \"register_operand\" \"<modeconstraint>\")]\n+\t   (match_operand:SWI 2 \"register_operand\" \"a\")\n+\t   (match_operand:SWI 3 \"register_operand\" \"<r>\")]\n \t  UNSPECV_CMPXCHG))\n    (set (reg:CCZ FLAGS_REG)\n         (compare:CCZ\n-          (unspec_volatile:IMODE\n+          (unspec_volatile:SWI\n             [(match_dup 1) (match_dup 2) (match_dup 3)] UNSPECV_CMPXCHG)\n           (match_dup 2)))]\n   \"TARGET_CMPXCHG\"\n-  \"lock{%;| }cmpxchg{<modesuffix>}\\t{%3, %1|%1, %3}\")\n+  \"lock{%;| }cmpxchg{<imodesuffix>}\\t{%3, %1|%1, %3}\")\n \n (define_insn \"sync_double_compare_and_swap<mode>\"\n   [(set (match_operand:DCASMODE 0 \"register_operand\" \"=A\")\n@@ -169,92 +165,72 @@\n   \"xchg{l}\\t%%ebx, %3\\;lock{%;| }cmpxchg8b\\t%1\\;xchg{l}\\t%%ebx, %3\")\n \n (define_insn \"sync_old_add<mode>\"\n-  [(set (match_operand:IMODE 0 \"register_operand\" \"=<modeconstraint>\")\n-\t(unspec_volatile:IMODE\n-\t  [(match_operand:IMODE 1 \"memory_operand\" \"+m\")] UNSPECV_XCHG))\n+  [(set (match_operand:SWI 0 \"register_operand\" \"=<r>\")\n+\t(unspec_volatile:SWI\n+\t  [(match_operand:SWI 1 \"memory_operand\" \"+m\")] UNSPECV_XCHG))\n    (set (match_dup 1)\n-\t(plus:IMODE (match_dup 1)\n-\t\t    (match_operand:IMODE 2 \"register_operand\" \"0\")))\n+\t(plus:SWI (match_dup 1)\n+\t\t  (match_operand:SWI 2 \"register_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_XADD\"\n-  \"lock{%;| }xadd{<modesuffix>}\\t{%0, %1|%1, %0}\")\n+  \"lock{%;| }xadd{<imodesuffix>}\\t{%0, %1|%1, %0}\")\n \n ;; Recall that xchg implicitly sets LOCK#, so adding it again wastes space.\n (define_insn \"sync_lock_test_and_set<mode>\"\n-  [(set (match_operand:IMODE 0 \"register_operand\" \"=<modeconstraint>\")\n-\t(unspec_volatile:IMODE\n-\t  [(match_operand:IMODE 1 \"memory_operand\" \"+m\")] UNSPECV_XCHG))\n+  [(set (match_operand:SWI 0 \"register_operand\" \"=<r>\")\n+\t(unspec_volatile:SWI\n+\t  [(match_operand:SWI 1 \"memory_operand\" \"+m\")] UNSPECV_XCHG))\n    (set (match_dup 1)\n-\t(match_operand:IMODE 2 \"register_operand\" \"0\"))]\n+\t(match_operand:SWI 2 \"register_operand\" \"0\"))]\n   \"\"\n-  \"xchg{<modesuffix>}\\t{%1, %0|%0, %1}\")\n+  \"xchg{<imodesuffix>}\\t{%1, %0|%0, %1}\")\n \n (define_insn \"sync_add<mode>\"\n-  [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n-\t(unspec_volatile:IMODE\n-\t  [(plus:IMODE (match_dup 0)\n-\t     (match_operand:IMODE 1 \"nonmemory_operand\" \"<modeconstraint><immconstraint>\"))]\n+  [(set (match_operand:SWI 0 \"memory_operand\" \"+m\")\n+\t(unspec_volatile:SWI\n+\t  [(plus:SWI (match_dup 0)\n+\t\t     (match_operand:SWI 1 \"nonmemory_operand\" \"<r><i>\"))]\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n {\n   if (TARGET_USE_INCDEC)\n     {\n       if (operands[1] == const1_rtx)\n-\treturn \"lock{%;| }inc{<modesuffix>}\\t%0\";\n+\treturn \"lock{%;| }inc{<imodesuffix>}\\t%0\";\n       if (operands[1] == constm1_rtx)\n-\treturn \"lock{%;| }dec{<modesuffix>}\\t%0\";\n+\treturn \"lock{%;| }dec{<imodesuffix>}\\t%0\";\n     }\n \n-  return \"lock{%;| }add{<modesuffix>}\\t{%1, %0|%0, %1}\";\n+  return \"lock{%;| }add{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n (define_insn \"sync_sub<mode>\"\n-  [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n-\t(unspec_volatile:IMODE\n-\t  [(minus:IMODE (match_dup 0)\n-\t     (match_operand:IMODE 1 \"nonmemory_operand\" \"<modeconstraint><immconstraint>\"))]\n+  [(set (match_operand:SWI 0 \"memory_operand\" \"+m\")\n+\t(unspec_volatile:SWI\n+\t  [(minus:SWI (match_dup 0)\n+\t\t      (match_operand:SWI 1 \"nonmemory_operand\" \"<r><i>\"))]\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n {\n   if (TARGET_USE_INCDEC)\n     {\n       if (operands[1] == const1_rtx)\n-\treturn \"lock{%;| }dec{<modesuffix>}\\t%0\";\n+\treturn \"lock{%;| }dec{<imodesuffix>}\\t%0\";\n       if (operands[1] == constm1_rtx)\n-\treturn \"lock{%;| }inc{<modesuffix>}\\t%0\";\n+\treturn \"lock{%;| }inc{<imodesuffix>}\\t%0\";\n     }\n \n-  return \"lock{%;| }sub{<modesuffix>}\\t{%1, %0|%0, %1}\";\n+  return \"lock{%;| }sub{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n })\n \n-(define_insn \"sync_ior<mode>\"\n-  [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n-\t(unspec_volatile:IMODE\n-\t  [(ior:IMODE (match_dup 0)\n-\t     (match_operand:IMODE 1 \"nonmemory_operand\" \"<modeconstraint><immconstraint>\"))]\n-\t  UNSPECV_LOCK))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"lock{%;| }or{<modesuffix>}\\t{%1, %0|%0, %1}\")\n-\n-(define_insn \"sync_and<mode>\"\n-  [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n-\t(unspec_volatile:IMODE\n-\t  [(and:IMODE (match_dup 0)\n-\t     (match_operand:IMODE 1 \"nonmemory_operand\" \"<modeconstraint><immconstraint>\"))]\n-\t  UNSPECV_LOCK))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"lock{%;| }and{<modesuffix>}\\t{%1, %0|%0, %1}\")\n-\n-(define_insn \"sync_xor<mode>\"\n-  [(set (match_operand:IMODE 0 \"memory_operand\" \"+m\")\n-\t(unspec_volatile:IMODE\n-\t  [(xor:IMODE (match_dup 0)\n-\t     (match_operand:IMODE 1 \"nonmemory_operand\" \"<modeconstraint><immconstraint>\"))]\n+(define_insn \"sync_<code><mode>\"\n+  [(set (match_operand:SWI 0 \"memory_operand\" \"+m\")\n+\t(unspec_volatile:SWI\n+\t  [(any_logic:SWI (match_dup 0)\n+\t\t\t  (match_operand:SWI 1 \"nonmemory_operand\" \"<r><i>\"))]\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"lock{%;| }xor{<modesuffix>}\\t{%1, %0|%0, %1}\")\n+  \"lock{%;| }<logicprefix>{<imodesuffix>}\\t{%1, %0|%0, %1}\")"}]}