{"sha": "e15379347231bed38c764cf3619e21cb56767150", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE1Mzc5MzQ3MjMxYmVkMzhjNzY0Y2YzNjE5ZTIxY2I1Njc2NzE1MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-09-09T10:15:44Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-09T10:15:44Z"}, "message": "tree-outof-ssa.c (free_temp_expr_table): Add missed assert.\n\n\t* tree-outof-ssa.c (free_temp_expr_table): Add missed assert.\n\t* tree-ssa-ccp.c (set_lattice_value): Correct missapplied de\n\tMorgan's theorem in last checkin.\n\nFrom-SVN: r87226", "tree": {"sha": "2fc626669ace4163616695592962200ca0d36fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fc626669ace4163616695592962200ca0d36fcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e15379347231bed38c764cf3619e21cb56767150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15379347231bed38c764cf3619e21cb56767150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e15379347231bed38c764cf3619e21cb56767150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15379347231bed38c764cf3619e21cb56767150/comments", "author": null, "committer": null, "parents": [{"sha": "6273ba378d377424a8752183a7520b9223806476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6273ba378d377424a8752183a7520b9223806476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6273ba378d377424a8752183a7520b9223806476"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "64fca50b81c350b4e918f8d84a76fe3fb359075c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15379347231bed38c764cf3619e21cb56767150/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15379347231bed38c764cf3619e21cb56767150/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e15379347231bed38c764cf3619e21cb56767150", "patch": "@@ -1,3 +1,9 @@\n+2004-09-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* tree-outof-ssa.c (free_temp_expr_table): Add missed assert.\n+\t* tree-ssa-ccp.c (set_lattice_value): Correct missapplied de\n+\tMorgan's theorem in last checkin.\n+\n 2004-09-09  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \t    Nathan Sidwell  <nathan@codesourcery.com>\n "}, {"sha": "bff545e432d2338966c2e6b1a42c625e8f4d28e6", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15379347231bed38c764cf3619e21cb56767150/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15379347231bed38c764cf3619e21cb56767150/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=e15379347231bed38c764cf3619e21cb56767150", "patch": "@@ -1280,8 +1280,7 @@ free_temp_expr_table (temp_expr_table_p t)\n #ifdef ENABLE_CHECKING\n   int x;\n   for (x = 0; x <= num_var_partitions (t->map); x++)\n-    if (t->partition_dep_list[x] != NULL)\n-      gcc_unreachable ();\n+    gcc_assert (!t->partition_dep_list[x]);\n #endif\n \n   while ((p = t->free_list))"}, {"sha": "54ff28a08dcf23a41f022be85b73cf7e21a08272", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e15379347231bed38c764cf3619e21cb56767150/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e15379347231bed38c764cf3619e21cb56767150/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=e15379347231bed38c764cf3619e21cb56767150", "patch": "@@ -219,8 +219,8 @@ set_lattice_value (tree var, value val)\n   else if (val.lattice_val == CONSTANT)\n     /* VARYING -> CONSTANT is an invalid state transition, except\n \tfor objects which start off in a VARYING state.  */\n-    gcc_assert (old->lattice_val == VARYING\n-\t\t|| get_default_value (var).lattice_val != VARYING);\n+    gcc_assert (old->lattice_val != VARYING\n+\t\t|| get_default_value (var).lattice_val == VARYING);\n \n   /* If the constant for VAR has changed, then this VAR is really varying.  */\n   if (old->lattice_val == CONSTANT"}]}