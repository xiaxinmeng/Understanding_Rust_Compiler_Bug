{"sha": "b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhNWUxYjJiY2ZmODkwYmNkZjg1NjhhMmNiYmUyNGVlZGIyOGFiNA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-23T00:16:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-23T00:16:22Z"}, "message": "Daily bump.", "tree": {"sha": "62c640a1b3a1f1590dc179b8928c75ae711602c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62c640a1b3a1f1590dc179b8928c75ae711602c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4/comments", "author": null, "committer": null, "parents": [{"sha": "e23f47ec4065e9eec53c4ad9db91bc36a4f90793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23f47ec4065e9eec53c4ad9db91bc36a4f90793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23f47ec4065e9eec53c4ad9db91bc36a4f90793"}], "stats": {"total": 162, "additions": 161, "deletions": 1}, "files": [{"sha": "dc49f5c1f08ed505ae06963d3c45640856af7b38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4", "patch": "@@ -1,3 +1,142 @@\n+2020-11-22  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/97873\n+\t* config/i386/i386.md (abs<mode>2): Use SWI48DWI mode iterator.\n+\t(*abs<dwi>2_doubleword): Use DWIH mode iterator.\n+\t(<maxmin:code><mode>3): Use SWI48DWI mode iterator.\n+\t(*<maxmin:code><dwi>3_doubleword): Use DWIH mode iterator.\n+\n+2020-11-22  Austin Law  <austinklaw@gmail.com>\n+\n+\t* config/h8300/addsub.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output of\n+\tthe splitters.\n+\t(add<mod>3_incdec): Remove pattern\n+\t(adds/subs splitter): Only run before reload.\n+\t* config/h8300/bitfield.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output\n+\tof the splitters.\n+\t(cstoreqi4, cstorehi4, cstoresi4): Comment out\n+\t(*bstzhireg, *cmpstz, *bstz, *bistz, *cmpcondset): Likewise\n+\t(*condbset, *cmpcondbclr, *condbclr): Likewise.\n+\t(*cmpcondbsetreg, *condbsetreg, *cmpcondbclrreg): Likewise.\n+\t(*condbclrreg): Likewise.\n+\t* config/h8300/combiner.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output of\n+\tthe splitters.  Add appropriate CC register clobbers to\n+\texisting splitters.\n+\t(*addsi3_and_r_1): Disable for now.\n+\t(*addsi3_and_not_r_1, bit-test branches): Likewise.\n+\t* config/h8300/divmod.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output of\n+\tthe splitters.\n+\t* config/h8300/extensions.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output of\n+\tthe splitters.\n+\t* config/h8300/genmova.sh: Drop \"cc\" attribute from patterns.\n+\t* config/h8300/mova.md: Drop \"cc\" attribute from patterns.\n+\t* config/h8300/h8300-modes.def: Add CCZN and CCZNV modes.\n+\t* config/h8300/h8300-protos.h (output_plussi): Update prototype.\n+\t(compute_plussi_length): Likewise.\n+\t(h8300_select_cc_mode): Add prototype.\n+\t(compute_a_shift_cc): Remove prototype\n+\t(cmpute_logical_op_cc): Likewise.\n+\t* config/h8300/h8300.c (names_big): Add \"cc\" register.\n+\t(names_extended, names_upper_extended): Likewise.\n+\t(h8300_emit_stack_adjustment): Be more selective about setting\n+\tRTX_FRAME_RELATED_P.\n+\t(h8300_print_operand): Handle CCZN mode\n+\t(h8300_select_cc_mode): New function.\n+\t(notice_update_cc): if-0 out.  Only kept for reference purposes.\n+\t(h8300_expand_store): Likewise.\n+\t(h8300_binary_length): Handle new insn forms.\n+\t(output_plussi): Add argument for NEED_FLAGS and handle that case.\n+\t(compute_plussi_length): Likewise.\n+\t(compute_logical_op_cc): Return integer.\n+\t(TARGET_FLAGS_REGNUM): Define.\n+\t* config/h8300/h8300.h (FIRST_PSEUDO_REGISTER): Bump for cc register.\n+\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Handle cc register.\n+\t(REG_ALLOC_ORDER, REGISTER_NAMES): Likewise.\n+\t(SELECT_CC_MODE): Define.\n+\t* config/h8300/h8300.md: Add CC_REG.\n+\tDo not include peepholes.md for now.\n+\t* config/h8300/jumpcall.md (cbranchqi4): Consolidate into\n+\tcbranch<mode>4.\n+\t(cbranchhi4, cbranchsi4): Likewise.\n+\t(cbranch<mode>4): New expander.\n+\t(branch): New define_insn_and_split for use before reload.\n+\t(branch_1, branch_1_false): New patterns to match splitter output.\n+\tRemove code to manage cc_status.flags.\n+\t* config/h8300/logical.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output of\n+\tthe splitters.  Move various peepholes into this file.\n+\t* config/h8300/movepush.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output of\n+\tthe splitters.\n+\t* config/h8300/multiply.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output of\n+\tthe splitters.\n+\t* config/h8300/other.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output of\n+\tthe splitters.\n+\t* config/h8300/peepholes.md: Remove peepholes that were moved\n+\telsewhere.\n+\t* config/h8300/predicates.md (simple_memory_operand): New.\n+\t* config/h8300/proepi.md: Drop \"cc\" attribute setting.\n+\t* config/h8300/shiftrotate.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output of\n+\tthe splitters.\n+\t* config/h8300/testcompare.md: Turn existing patterns into\n+\tdefine_insn_and_split style patterns where the splitter\n+\tadds a clobber of the condition code register.  Drop \"cc\"\n+\tattribute.  Add _clobber_flags patterns to match output of\n+\tthe splitters.  Disable various patterns for now.\n+\tMove some peepholes that were previously in peepholes.md here.\n+\t* config/h8300/save.md: New file.\n+\n+2020-11-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95853\n+\t* tree-ssa-math-opts.c (uaddsub_overflow_check_p): Add maxval\n+\targument, if non-NULL, instead look for r > maxval or r <= maxval\n+\tcomparisons.\n+\t(match_uaddsub_overflow): Pattern recognize even other forms of\n+\t__builtin_add_overflow, in particular when addition is performed\n+\tin a wider type and result compared to maximum of the narrower\n+\ttype.\n+\n+2020-11-22  Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/jumpcall.md (branch_true, branch_false): Revert\n+\trecent change.  Ensure operand[0] is always the target label.\n+\n+2020-11-22  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin-c.c (struct f_align_stack): Rename\n+\tto type from align_stack to f_align_stack.\n+\t(push_field_alignment): Likewise.\n+\t(pop_field_alignment): Likewise.\n+\n 2020-11-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94695"}, {"sha": "62b5bb217752f0038acb722b07b4744510c57542", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4", "patch": "@@ -1 +1 @@\n-20201122\n+20201123"}, {"sha": "b3a31dd929425ac2eb8c9dcb67d5ccf847dca9c6", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4", "patch": "@@ -1,3 +1,9 @@\n+2020-11-22  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/97889\n+\t* expr.cc (ExprVisitor::visit (CatAssignExp *)): Enforce LTR order of\n+\tevaluation on left and right hand side expressions.\n+\n 2020-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/97911"}, {"sha": "f4e51b02aeddcba8deabd1ff03e76200881ea0c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4", "patch": "@@ -1,3 +1,18 @@\n+2020-11-22  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/97873\n+\t* gcc.target/i386/pr97873-2.c: New test.\n+\n+2020-11-22  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/97889\n+\t* gdc.dg/torture/pr97889.d: New test.\n+\n+2020-11-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95853\n+\t* gcc.dg/pr95853.c: New test.\n+\n 2020-11-21  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94695"}]}