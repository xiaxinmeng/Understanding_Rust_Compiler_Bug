{"sha": "3462dc4515c41c0eaa075629897e84660da0a406", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2MmRjNDUxNWM0MWMwZWFhMDc1NjI5ODk3ZTg0NjYwZGEwYTQwNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-01-11T03:09:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-01-11T03:09:10Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r176", "tree": {"sha": "b9725b8a4849d1593d897f631e2907fdc8cadd85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9725b8a4849d1593d897f631e2907fdc8cadd85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3462dc4515c41c0eaa075629897e84660da0a406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3462dc4515c41c0eaa075629897e84660da0a406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3462dc4515c41c0eaa075629897e84660da0a406", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3462dc4515c41c0eaa075629897e84660da0a406/comments", "author": null, "committer": null, "parents": [{"sha": "68e9eb95abfdbc595dcc04c57774eb3f7f0f812b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e9eb95abfdbc595dcc04c57774eb3f7f0f812b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e9eb95abfdbc595dcc04c57774eb3f7f0f812b"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "2f4d85619c903c5782b972de4b3edff431fd40ba", "filename": "gcc/genemit.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3462dc4515c41c0eaa075629897e84660da0a406/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3462dc4515c41c0eaa075629897e84660da0a406/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=3462dc4515c41c0eaa075629897e84660da0a406", "patch": "@@ -459,9 +459,10 @@ gen_split (split)\n   int operands;\n \n   if (XVEC (split, 0) == 0)\n-    fatal (\"define_split %d lacks a pattern\", insn_index_number);\n+    fatal (\"define_split (definition %d) lacks a pattern\", insn_index_number);\n   else if (XVEC (split, 2) == 0)\n-    fatal (\"define_split %d lacks a replacement pattern\", insn_index_number);\n+    fatal (\"define_split (definition %d) lacks a replacement pattern\",\n+\t   insn_index_number);\n \n   /* Find out how many operands this function has.  */\n "}, {"sha": "46f1ada5040117c385f28882349d988f08e2f03d", "filename": "gcc/reorg.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3462dc4515c41c0eaa075629897e84660da0a406/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3462dc4515c41c0eaa075629897e84660da0a406/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=3462dc4515c41c0eaa075629897e84660da0a406", "patch": "@@ -303,8 +303,8 @@ mark_referenced_resources (x, res, include_called_routine)\n       if (include_called_routine)\n \t{\n \t  /* A CALL references memory, the frame pointer if it exists, the\n-\t     stack pointer, and any registers given in USE insns immediately\n-\t     in front of the CALL.\n+\t     stack pointer, any global registers and any registers given in\n+\t     USE insns immediately in front of the CALL.\n \n \t     However, we may have moved some of the parameter loading insns\n \t     into the delay slot of this CALL.  If so, the USE's for them\n@@ -328,6 +328,10 @@ mark_referenced_resources (x, res, include_called_routine)\n \t  if (frame_pointer_needed)\n \t    SET_HARD_REG_BIT (res->regs, FRAME_POINTER_REGNUM);\n \n+\t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\t    if (global_regs[i])\n+\t      SET_HARD_REG_BIT (res->regs, i);\n+\n \t  /* Skip any labels between the CALL_INSN and possible USE insns.  */\n \t  while (GET_CODE (insn) == CODE_LABEL)\n \t    insn = PREV_INSN (insn);\n@@ -403,16 +407,16 @@ mark_set_resources (insn, res, include_called_routine)\n \n     case CALL_INSN:\n       /* Called routine modifies the condition code, memory, any registers\n-\t that aren't saved across calls, and anything explicitly CLOBBERed\n-\t immediately after the CALL_INSN.  */\n+\t that aren't saved across calls, global registers and anything\n+\t explicitly CLOBBERed immediately after the CALL_INSN.  */\n \n       if (include_called_routine)\n \t{\n \t  rtx next = NEXT_INSN (insn);\n \n \t  res->cc = res->memory = 1;\n \t  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\t    if (call_used_regs[i])\n+\t    if (call_used_regs[i] || global_regs[i])\n \t      SET_HARD_REG_BIT (res->regs, i);\n \n \t  /* Skip any possible labels between the CALL_INSN and CLOBBERs.  */"}]}