{"sha": "18c2511ccbc14dc2899b0fb6ec60935ac87087c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThjMjUxMWNjYmMxNGRjMjg5OWIwZmI2ZWM2MDkzNWFjODcwODdjMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-05-23T03:46:53Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-05-23T03:46:53Z"}, "message": "real.c (real_maxval): New function to return the largest finite value representable in a given mode (i.e.\n\n\n\t* real.c (real_maxval): New function to return the largest finite\n\tvalue representable in a given mode (i.e. FLT_MAX and DBL_MAX).\n\t* real.h (real_maxval): Prototype here.\n\t* fold-const.c (fold_inf_compare): Transform comparisons against\n\t+-Infinity into comparisons against DBL_MAX (or equivalent).\n\n\t* gcc.c-torture/execute/ieee/inf-2.c: New test case.\n\nFrom-SVN: r67112", "tree": {"sha": "5b38df8d0da0fa5e04c432815e2f600b41d5f2e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b38df8d0da0fa5e04c432815e2f600b41d5f2e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18c2511ccbc14dc2899b0fb6ec60935ac87087c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c2511ccbc14dc2899b0fb6ec60935ac87087c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18c2511ccbc14dc2899b0fb6ec60935ac87087c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/comments", "author": null, "committer": null, "parents": [{"sha": "a8e097d6db75fdb7fb530bd571647a656376fe97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8e097d6db75fdb7fb530bd571647a656376fe97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8e097d6db75fdb7fb530bd571647a656376fe97"}], "stats": {"total": 161, "additions": 154, "deletions": 7}, "files": [{"sha": "fa4639ecacd72689ea0a56f0508b741b1e2061f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18c2511ccbc14dc2899b0fb6ec60935ac87087c2", "patch": "@@ -1,3 +1,11 @@\n+2003-05-22  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* real.c (real_maxval): New function to return the largest finite\n+\tvalue representable in a given mode (i.e. FLT_MAX and DBL_MAX).\n+\t* real.h (real_maxval): Prototype here.\n+\t* fold-const.c (fold_inf_compare): Transform comparisons against\n+\t+-Infinity into comparisons against DBL_MAX (or equivalent).\n+\n 2003-05-22  Mike Stump  <mrs@apple.com>\n \n \t* config.gcc (*-*-darwin*): Remove use_collect2=no, as it is the"}, {"sha": "6a4e2290e39f653546d871ca1b0fed799aac4100", "filename": "gcc/fold-const.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=18c2511ccbc14dc2899b0fb6ec60935ac87087c2", "patch": "@@ -4820,23 +4820,31 @@ fold_inf_compare (code, type, arg0, arg1)\n      enum tree_code code;\n      tree type, arg0, arg1;\n {\n+  enum machine_mode mode;\n+  REAL_VALUE_TYPE max;\n+  tree temp;\n+  bool neg;\n+\n+  mode = TYPE_MODE (TREE_TYPE (arg0));\n+\n   /* For negative infinity swap the sense of the comparison.  */\n-  if (REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg1)))\n+  neg = REAL_VALUE_NEGATIVE (TREE_REAL_CST (arg1));\n+  if (neg)\n     code = swap_tree_comparison (code);\n \n   switch (code)\n     {\n     case GT_EXPR:\n       /* x > +Inf is always false, if with ignore sNANs.  */\n-      if (HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg0))))\n+      if (HONOR_SNANS (mode))\n         return NULL_TREE;\n       return omit_one_operand (type,\n \t\t\t       convert (type, integer_zero_node),\n \t\t\t       arg0);\n \n     case LE_EXPR:\n       /* x <= +Inf is always true, if we don't case about NaNs.  */\n-      if (! HONOR_NANS (TYPE_MODE (TREE_TYPE (arg0))))\n+      if (! HONOR_NANS (mode))\n \treturn omit_one_operand (type,\n \t\t\t\t convert (type, integer_one_node),\n \t\t\t\t arg0);\n@@ -4850,10 +4858,28 @@ fold_inf_compare (code, type, arg0, arg1)\n \t}\n       break;\n \n-    case EQ_EXPR:  /* ??? x == +Inf is x > DBL_MAX  */\n-    case GE_EXPR:  /* ??? x >= +Inf is x > DBL_MAX  */\n-    case LT_EXPR:  /* ??? x < +Inf is x <= DBL_MAX  */\n-    case NE_EXPR:  /* ??? x != +Inf is !(x > DBL_MAX)  */\n+    case EQ_EXPR:\n+    case GE_EXPR:\n+      /* x == +Inf and x >= +Inf are always equal to x > DBL_MAX.  */\n+      real_maxval (&max, neg, mode);\n+      return fold (build (neg ? LT_EXPR : GT_EXPR, type,\n+\t\t\t  arg0, build_real (TREE_TYPE (arg0), max)));\n+\n+    case LT_EXPR:\n+      /* x < +Inf is always equal to x <= DBL_MAX.  */\n+      real_maxval (&max, neg, mode);\n+      return fold (build (neg ? GE_EXPR : LE_EXPR, type,\n+\t\t\t  arg0, build_real (TREE_TYPE (arg0), max)));\n+\n+    case NE_EXPR:\n+      /* x != +Inf is always equal to !(x > DBL_MAX).  */\n+      real_maxval (&max, neg, mode);\n+      if (! HONOR_NANS (mode))\n+\treturn fold (build (neg ? GE_EXPR : LE_EXPR, type,\n+\t\t\t    arg0, build_real (TREE_TYPE (arg0), max)));\n+      temp = fold (build (neg ? LT_EXPR : GT_EXPR, type,\n+\t\t\t  arg0, build_real (TREE_TYPE (arg0), max)));\n+      return fold (build1 (TRUTH_NOT_EXPR, type, temp));\n \n     default:\n       break;"}, {"sha": "4a4b04012ce04ab6f37dcf19f843d0d37cabd0d5", "filename": "gcc/real.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=18c2511ccbc14dc2899b0fb6ec60935ac87087c2", "patch": "@@ -2280,6 +2280,33 @@ real_nan (r, str, quiet, mode)\n   return true;\n }\n \n+/* Fills R with the largest finite value representable in mode MODE.\n+   If SIGN is non-zero, R is set to the most negative finite value.  */\n+\n+void\n+real_maxval (r, sign, mode)\n+     REAL_VALUE_TYPE *r;\n+     int sign;\n+     enum machine_mode mode;\n+{\n+  const struct real_format *fmt;\n+  int np2;\n+\n+  fmt = real_format_for_mode[mode - QFmode];\n+  if (fmt == NULL)\n+    abort ();\n+\n+  r->class = rvc_normal;\n+  r->sign = sign;\n+  r->signalling = 0;\n+  r->canonical = 0;\n+  r->exp = fmt->emax * fmt->log2_b;\n+\n+  np2 = SIGNIFICAND_BITS - fmt->p * fmt->log2_b;\n+  memset (r->sig, -1, SIGSZ * sizeof (unsigned long));\n+  clear_significand_below (r, np2);\n+}\n+\n /* Fills R with 2**N.  */\n \n void"}, {"sha": "15a5d93e444462280e322f648eb4cbd5d0b13226", "filename": "gcc/real.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=18c2511ccbc14dc2899b0fb6ec60935ac87087c2", "patch": "@@ -219,6 +219,9 @@ extern void real_inf\t\tPARAMS ((REAL_VALUE_TYPE *));\n extern bool real_nan\t\tPARAMS ((REAL_VALUE_TYPE *, const char *,\n \t\t\t\t\t int, enum machine_mode));\n \n+extern void real_maxval\t\tPARAMS ((REAL_VALUE_TYPE *, int,\n+\t\t\t\t\t enum machine_mode));\n+\n extern void real_2expN\t\tPARAMS ((REAL_VALUE_TYPE *, int));\n \n extern unsigned int real_hash\tPARAMS ((const REAL_VALUE_TYPE *));"}, {"sha": "6774aeac0a6ef0ff686443fac862a951aa7aa1ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=18c2511ccbc14dc2899b0fb6ec60935ac87087c2", "patch": "@@ -1,3 +1,7 @@\n+2003-05-22  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/execute/ieee/inf-2.c: New test case.\n+\n 2003-05-21  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.dg/compat/scalar-return-1_main.c: New file."}, {"sha": "40270c0f6abcb8bd2e1a7d0e452b8e4fc61bc561", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/inf-2.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Finf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18c2511ccbc14dc2899b0fb6ec60935ac87087c2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Finf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Finf-2.c?ref=18c2511ccbc14dc2899b0fb6ec60935ac87087c2", "patch": "@@ -0,0 +1,79 @@\n+extern void abort (void);\n+\n+void test(double f, double i)\n+{\n+  if (f == __builtin_inf())\n+    abort ();\n+  if (f == -__builtin_inf())\n+    abort ();\n+  if (i == -__builtin_inf())\n+    abort ();\n+  if (i != __builtin_inf())\n+    abort ();\n+\n+  if (f >= __builtin_inf())\n+    abort ();\n+  if (f > __builtin_inf())\n+    abort ();\n+  if (i > __builtin_inf())\n+    abort ();\n+  if (f <= -__builtin_inf())\n+    abort ();\n+  if (f < -__builtin_inf())\n+    abort ();\n+}\n+\n+void testf(float f, float i)\n+{\n+  if (f == __builtin_inff())\n+    abort ();\n+  if (f == -__builtin_inff())\n+    abort ();\n+  if (i == -__builtin_inff())\n+    abort ();\n+  if (i != __builtin_inff())\n+    abort ();\n+\n+  if (f >= __builtin_inff())\n+    abort ();\n+  if (f > __builtin_inff())\n+    abort ();\n+  if (i > __builtin_inff())\n+    abort ();\n+  if (f <= -__builtin_inff())\n+    abort ();\n+  if (f < -__builtin_inff())\n+    abort ();\n+}\n+\n+void testl(long double f, long double i)\n+{\n+  if (f == __builtin_infl())\n+    abort ();\n+  if (f == -__builtin_infl())\n+    abort ();\n+  if (i == -__builtin_infl())\n+    abort ();\n+  if (i != __builtin_infl())\n+    abort ();\n+\n+  if (f >= __builtin_infl())\n+    abort ();\n+  if (f > __builtin_infl())\n+    abort ();\n+  if (i > __builtin_infl())\n+    abort ();\n+  if (f <= -__builtin_infl())\n+    abort ();\n+  if (f < -__builtin_infl())\n+    abort ();\n+}\n+\n+int main()\n+{\n+  test (34.0, __builtin_inf());\n+  testf (34.0f, __builtin_inff());\n+  testf (34.0l, __builtin_infl());\n+  return 0;\n+}\n+"}]}