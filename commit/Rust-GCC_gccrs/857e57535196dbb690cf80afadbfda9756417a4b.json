{"sha": "857e57535196dbb690cf80afadbfda9756417a4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3ZTU3NTM1MTk2ZGJiNjkwY2Y4MGFmYWRiZmRhOTc1NjQxN2E0Yg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-05-08T21:09:49Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-05-08T21:09:49Z"}, "message": "re PR target/27158 (ICE in extract_insn with -maltivec)\n\n\n\tPR target/27158\n\t* reload.c (find_reloads_toplev): Only return the simplified SUBREG\n\tof a reg_equiv_constant if the result is a legitimate constant.\n\n\t* gcc.target/powerpc/pr27158.c: New test case.\n\nFrom-SVN: r113632", "tree": {"sha": "d279562bb2861a814d3e5dfb410f57178f971f5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d279562bb2861a814d3e5dfb410f57178f971f5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/857e57535196dbb690cf80afadbfda9756417a4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857e57535196dbb690cf80afadbfda9756417a4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/857e57535196dbb690cf80afadbfda9756417a4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/857e57535196dbb690cf80afadbfda9756417a4b/comments", "author": null, "committer": null, "parents": [{"sha": "13637c491f74ce8bb97d14d2fd6a7c935800e724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13637c491f74ce8bb97d14d2fd6a7c935800e724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13637c491f74ce8bb97d14d2fd6a7c935800e724"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "f660c99ec6bc8faa66c0cafc9e0866a59b62626e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857e57535196dbb690cf80afadbfda9756417a4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857e57535196dbb690cf80afadbfda9756417a4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=857e57535196dbb690cf80afadbfda9756417a4b", "patch": "@@ -1,3 +1,9 @@\n+2006-05-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/27158\n+\t* reload.c (find_reloads_toplev): Only return the simplified SUBREG\n+\tof a reg_equiv_constant if the result is a legitimate constant.\n+\n 2006-05-08  Uros Bizjak  <uros@kss-loka.si>\n \n \tPR target/27277"}, {"sha": "03b5ba6beef4a068e214b579798f9423ecadc3ff", "filename": "gcc/reload.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857e57535196dbb690cf80afadbfda9756417a4b/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857e57535196dbb690cf80afadbfda9756417a4b/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=857e57535196dbb690cf80afadbfda9756417a4b", "patch": "@@ -4559,20 +4559,24 @@ find_reloads_toplev (rtx x, int opnum, enum reload_type type,\n       rtx tem;\n \n       if (subreg_lowpart_p (x)\n-\t  && regno >= FIRST_PSEUDO_REGISTER && reg_renumber[regno] < 0\n+\t  && regno >= FIRST_PSEUDO_REGISTER\n+\t  && reg_renumber[regno] < 0\n \t  && reg_equiv_constant[regno] != 0\n \t  && (tem = gen_lowpart_common (GET_MODE (x),\n-\t\t\t\t\treg_equiv_constant[regno])) != 0)\n+\t\t\t\t\treg_equiv_constant[regno])) != 0\n+\t  && LEGITIMATE_CONSTANT_P (tem))\n \treturn tem;\n \n-      if (regno >= FIRST_PSEUDO_REGISTER && reg_renumber[regno] < 0\n+      if (regno >= FIRST_PSEUDO_REGISTER\n+\t  && reg_renumber[regno] < 0\n \t  && reg_equiv_constant[regno] != 0)\n \t{\n \t  tem =\n \t    simplify_gen_subreg (GET_MODE (x), reg_equiv_constant[regno],\n \t\t\t\t GET_MODE (SUBREG_REG (x)), SUBREG_BYTE (x));\n \t  gcc_assert (tem);\n-\t  return tem;\n+\t  if (LEGITIMATE_CONSTANT_P (tem))\n+\t    return tem;\n \t}\n \n       /* If the subreg contains a reg that will be converted to a mem,\n@@ -4588,7 +4592,7 @@ find_reloads_toplev (rtx x, int opnum, enum reload_type type,\n \t a wider mode if we have a paradoxical SUBREG.  find_reloads will\n \t force a reload in that case.  So we should not do anything here.  */\n \n-      else if (regno >= FIRST_PSEUDO_REGISTER\n+      if (regno >= FIRST_PSEUDO_REGISTER\n #ifdef LOAD_EXTEND_OP\n \t       && (GET_MODE_SIZE (GET_MODE (x))\n \t\t   <= GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))"}, {"sha": "0911cd99898f306c68a40636cf99b4c0f9512a1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857e57535196dbb690cf80afadbfda9756417a4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857e57535196dbb690cf80afadbfda9756417a4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=857e57535196dbb690cf80afadbfda9756417a4b", "patch": "@@ -1,3 +1,8 @@\n+2006-05-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/27158\n+\t* gcc.target/powerpc/pr27158.c: New test case.\n+\n 2006-05-08  Laurent GUERBY  <laurent@guerby.net>\n \n \tPR testsuite/27476"}, {"sha": "4228e9a358424bf2de972debd0ccdd57ba8a099c", "filename": "gcc/testsuite/gcc.target/powerpc/pr27158.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/857e57535196dbb690cf80afadbfda9756417a4b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr27158.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/857e57535196dbb690cf80afadbfda9756417a4b/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr27158.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr27158.c?ref=857e57535196dbb690cf80afadbfda9756417a4b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-xfail-if \"\" { \"powerpc-*-eabispe*\" \"powerpc-ibm-aix*\" } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O2 -maltivec\" } */\n+#define REGLIST                                                              \\\n+         \"77\",  \"78\",  \"79\",  \"80\",  \"81\",  \"82\",  \"83\",  \"84\",  \"85\",  \"86\",\\\n+         \"87\",  \"88\",  \"89\",  \"90\",  \"91\",  \"92\",  \"93\",  \"94\",  \"95\",  \"96\",\\\n+         \"97\",  \"98\",  \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\",\\\n+        \"107\", \"108\"\n+\n+typedef __attribute__ ((vector_size (16))) float v4sf;\n+\n+void\n+foo (int H)\n+{\n+  volatile v4sf tmp;\n+  while (H-- > 0)\n+    {\n+      asm (\"\" : : : REGLIST);\n+      tmp = (v4sf) __builtin_altivec_vspltisw (1);\n+    }\n+}\n+"}]}