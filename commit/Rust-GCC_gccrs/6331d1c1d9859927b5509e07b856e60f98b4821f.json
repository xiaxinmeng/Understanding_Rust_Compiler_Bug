{"sha": "6331d1c1d9859927b5509e07b856e60f98b4821f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMzMWQxYzFkOTg1OTkyN2I1NTA5ZTA3Yjg1NmU2MGY5OGI0ODIxZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-07-06T11:38:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-07-06T11:38:41Z"}, "message": "dwarf2out.c (mem_loc_descriptor): Only look through a constant pool reference if...\n\n        * dwarf2out.c (mem_loc_descriptor): Only look through a constant pool\n        reference if the target constant is also a SYMBOL_REF.\n\nFrom-SVN: r43805", "tree": {"sha": "670e27a40e7ff30b068cdb104c7a8814b9421bae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/670e27a40e7ff30b068cdb104c7a8814b9421bae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6331d1c1d9859927b5509e07b856e60f98b4821f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6331d1c1d9859927b5509e07b856e60f98b4821f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6331d1c1d9859927b5509e07b856e60f98b4821f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6331d1c1d9859927b5509e07b856e60f98b4821f/comments", "author": null, "committer": null, "parents": [{"sha": "d15a05b3acd56e54de35f8e410799e914b9ca604", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15a05b3acd56e54de35f8e410799e914b9ca604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d15a05b3acd56e54de35f8e410799e914b9ca604"}], "stats": {"total": 71, "additions": 37, "deletions": 34}, "files": [{"sha": "d08abdf03649bef62f80a68d13213686e7c44072", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6331d1c1d9859927b5509e07b856e60f98b4821f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6331d1c1d9859927b5509e07b856e60f98b4821f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6331d1c1d9859927b5509e07b856e60f98b4821f", "patch": "@@ -1,35 +1,40 @@\n+2001-07-02  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* dwarf2out.c (mem_loc_descriptor): Only look through a constant pool\n+\treference if the target constant is also a SYMBOL_REF.\n+\n 2001-07-05  Eric Christopher  <echristo@redhat.com>\n \n-        * config/mips/mips.h (MASK_MIPS3900): Remove.\n-        (MASK_MIPS16,MASK_NO_CHECK_ZERO_DIV,MASK_CHECK_RANGE_DIV,\n-        MASK_UNINIT_CONST_IN_RODATA): Change for 3900 mask removal.\n-        (TARGET_MIPS3900): Change to use mips_arch.\n-        (TARGET_MIPS4000): New.\n-        (TARGET_MIPS4100): New.\n-        (TARGET_MIPS4300): New.\n-        (TARGET_SWITCHES): Change 3900 and 4650 options to NULL.\n-        (SUBTARGET_TARGET_OPTIONS): Add -march. Change help text\n-        for -mipsX.\n-        (GENERATE_BRANCHLIKELY): Move TARGET_MIPS3900.\n-        (ISA_HAS_BRANCHLIKELY): To here.\n-        (CC1_CPU_SPEC):  New.\n-        (CC1_SPEC): Use here.  Remove 4650 and 3900 options.\n-        (mips_arch_string): Declare.\n-        (mips_arch): Declare.\n-        (TARGET_OPTIONS): Add -march and -mtune.\n-\n-        * config/mips/mips.c (mips_arch_string): New.\n-        (mips_arch): New.\n-        (override_options): Handle -march for codegen and -mtune\n-        for scheduling. Use mips_arch. Move tx39 target default here.\n-        (mips_parse_cpu): Move error message to override_options.\n-\n-        * config/mips/r3900.h (TARGET_DEFAULT): Remove.\n-\n-        * config/mips/mips.md: Use TARGET_MIPS4000 and TARGET_MIPS4300.\n-\n-        * doc/invoke.texi (Option Summary): Add -march and -mtune entries.\n-        (MIPS Options): Ditto.  Change mcpu entry to historical text.\n+\t* config/mips/mips.h (MASK_MIPS3900): Remove.\n+\t(MASK_MIPS16,MASK_NO_CHECK_ZERO_DIV,MASK_CHECK_RANGE_DIV,\n+\tMASK_UNINIT_CONST_IN_RODATA): Change for 3900 mask removal.\n+\t(TARGET_MIPS3900): Change to use mips_arch.\n+\t(TARGET_MIPS4000): New.\n+\t(TARGET_MIPS4100): New.\n+\t(TARGET_MIPS4300): New.\n+\t(TARGET_SWITCHES): Change 3900 and 4650 options to NULL.\n+\t(SUBTARGET_TARGET_OPTIONS): Add -march. Change help text\n+\tfor -mipsX.\n+\t(GENERATE_BRANCHLIKELY): Move TARGET_MIPS3900.\n+\t(ISA_HAS_BRANCHLIKELY): To here.\n+\t(CC1_CPU_SPEC):\t New.\n+\t(CC1_SPEC): Use here.  Remove 4650 and 3900 options.\n+\t(mips_arch_string): Declare.\n+\t(mips_arch): Declare.\n+\t(TARGET_OPTIONS): Add -march and -mtune.\n+\n+\t* config/mips/mips.c (mips_arch_string): New.\n+\t(mips_arch): New.\n+\t(override_options): Handle -march for codegen and -mtune\n+\tfor scheduling. Use mips_arch. Move tx39 target default here.\n+\t(mips_parse_cpu): Move error message to override_options.\n+\n+\t* config/mips/r3900.h (TARGET_DEFAULT): Remove.\n+\n+\t* config/mips/mips.md: Use TARGET_MIPS4000 and TARGET_MIPS4300.\n+\n+\t* doc/invoke.texi (Option Summary): Add -march and -mtune entries.\n+\t(MIPS Options): Ditto.\tChange mcpu entry to historical text.\n \n 2001-07-05  H.J. Lu  (hjl@gnu.org)\n "}, {"sha": "7e385d05747dafad30e4675eb7b28e0bd2a39937", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6331d1c1d9859927b5509e07b856e60f98b4821f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6331d1c1d9859927b5509e07b856e60f98b4821f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6331d1c1d9859927b5509e07b856e60f98b4821f", "patch": "@@ -7427,18 +7427,16 @@ mem_loc_descriptor (rtl, mode)\n  \t pool.  */\n     case CONST:\n     case SYMBOL_REF:\n-      /* Alternatively, the symbol in the constant pool can be referenced\n+      /* Alternatively, the symbol in the constant pool might be referenced\n \t by a different symbol.  */\n       if (GET_CODE (rtl) == SYMBOL_REF\n \t  && CONSTANT_POOL_ADDRESS_P (rtl))\n \t{\n \t  rtx tmp = get_pool_constant (rtl);\n-\t  /* Doesn't work for floating point constants.  */\n-\t  if (! (GET_CODE (tmp) == CONST_DOUBLE && GET_MODE (tmp) != VOIDmode))\n+\t  if (GET_CODE (tmp) == SYMBOL_REF)\n \t    rtl = tmp;\n \t}\n \n-\n       mem_loc_result = new_loc_descr (DW_OP_addr, 0, 0);\n       mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_addr;\n       mem_loc_result->dw_loc_oprnd1.v.val_addr = save_rtx (rtl);"}]}