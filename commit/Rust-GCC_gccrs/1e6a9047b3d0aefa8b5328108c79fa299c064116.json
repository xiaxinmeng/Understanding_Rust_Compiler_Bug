{"sha": "1e6a9047b3d0aefa8b5328108c79fa299c064116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU2YTkwNDdiM2QwYWVmYThiNTMyODEwOGM3OWZhMjk5YzA2NDExNg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-08-25T10:30:13Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-08-25T10:30:13Z"}, "message": "md.texi (automata_option): Document collapse-ndfa.\n\n\t* doc/md.texi (automata_option): Document collapse-ndfa.\n\t* genautomata.c (COLLAPSE_OPTION): New macro.\n\t(collapse_flag): New static variable.\n\t(struct description): New member normal_decls_num.\n\t(struct automaton): New members advance_ainsn and collapse_ainsn.\n\t(gen_automata_option): Check for COLLAPSE_OPTION.\n\t(collapse_ndfa_insn_decl): New static variable.\n\t(add_collapse_ndfa_insn_decl, special_decl_p): New functions.\n\t(find_arc): If insn is the collapse-ndfa insn, accept any arc we\n\tfind.\n\t(transform_insn_regexps): Call add_collapse_ndfa_insn_decl if\n\tnecessary.  Use normal_decls_num rather than decls_num, remove\n\ttest for special decls.\n\t(create_alt_states, form_ainsn_with_same_reservs): Use\n\tspecial_decl_p.\n\t(make_automaton); Likewise.  Use the new advance_cycle_insn member\n\tof struct automaton.\n\t(create_composed_state): Disallow advance-cycle arcs if collapse_flag\n\tis set.\n\t(NDFA_to_DFA): Don't create composed states for the collapse-ndfa\n\ttransition.  Create the necessary transitions for it.\n\t(create_ainsns): Return void.  Take an automaton_t argument, and\n\tupdate its ainsn_list, advance_ainsn and collapse_ainsn members.  All\n\tcallers changed.\n\t(COLLAPSE_NDFA_VALUE_NAME): New macro.\n\t(output_tables): Output code to define it.\n\t(output_internal_insn_code_evaluation): Output code to accept\n\tconst0_rtx as collapse-ndfa transition.\n\t(output_default_latencies, output_print_reservation_func,\n\toutput_print_description): Reorganize loops to use normal_decls_num\n\tas loop bound; remove special case for advance_cycle_insn_decl.\n\t(initiate_automaton_gen): Handle COLLAPSE_OPTION.\n\t(check_automata_insn_issues): Check for collapse_ainsn.\n\t(expand_automate): Allocate sufficient space.  Initialize\n\tnormal_decls_num.\n\nFrom-SVN: r178059", "tree": {"sha": "2bc05072e284ac9a5ae52a632b1622df1cc4ef4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bc05072e284ac9a5ae52a632b1622df1cc4ef4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e6a9047b3d0aefa8b5328108c79fa299c064116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6a9047b3d0aefa8b5328108c79fa299c064116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e6a9047b3d0aefa8b5328108c79fa299c064116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6a9047b3d0aefa8b5328108c79fa299c064116/comments", "author": null, "committer": null, "parents": [{"sha": "07f1047289e46cd17161bac16f53c610a7cc2bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f1047289e46cd17161bac16f53c610a7cc2bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f1047289e46cd17161bac16f53c610a7cc2bd8"}], "stats": {"total": 220, "additions": 174, "deletions": 46}, "files": [{"sha": "25547664d771284e27ee85c2881d62a3b024974a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6a9047b3d0aefa8b5328108c79fa299c064116/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6a9047b3d0aefa8b5328108c79fa299c064116/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e6a9047b3d0aefa8b5328108c79fa299c064116", "patch": "@@ -1,5 +1,43 @@\n+2011-08-25  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* doc/md.texi (automata_option): Document collapse-ndfa.\n+\t* genautomata.c (COLLAPSE_OPTION): New macro.\n+\t(collapse_flag): New static variable.\n+\t(struct description): New member normal_decls_num.\n+\t(struct automaton): New members advance_ainsn and collapse_ainsn.\n+\t(gen_automata_option): Check for COLLAPSE_OPTION.\n+\t(collapse_ndfa_insn_decl): New static variable.\n+\t(add_collapse_ndfa_insn_decl, special_decl_p): New functions.\n+\t(find_arc): If insn is the collapse-ndfa insn, accept any arc we\n+\tfind.\n+\t(transform_insn_regexps): Call add_collapse_ndfa_insn_decl if\n+\tnecessary.  Use normal_decls_num rather than decls_num, remove\n+\ttest for special decls.\n+\t(create_alt_states, form_ainsn_with_same_reservs): Use\n+\tspecial_decl_p.\n+\t(make_automaton); Likewise.  Use the new advance_cycle_insn member\n+\tof struct automaton.\n+\t(create_composed_state): Disallow advance-cycle arcs if collapse_flag\n+\tis set.\n+\t(NDFA_to_DFA): Don't create composed states for the collapse-ndfa\n+\ttransition.  Create the necessary transitions for it.\n+\t(create_ainsns): Return void.  Take an automaton_t argument, and\n+\tupdate its ainsn_list, advance_ainsn and collapse_ainsn members.  All\n+\tcallers changed.\n+\t(COLLAPSE_NDFA_VALUE_NAME): New macro.\n+\t(output_tables): Output code to define it.\n+\t(output_internal_insn_code_evaluation): Output code to accept\n+\tconst0_rtx as collapse-ndfa transition.\n+\t(output_default_latencies, output_print_reservation_func,\n+\toutput_print_description): Reorganize loops to use normal_decls_num\n+\tas loop bound; remove special case for advance_cycle_insn_decl.\n+\t(initiate_automaton_gen): Handle COLLAPSE_OPTION.\n+\t(check_automata_insn_issues): Check for collapse_ainsn.\n+\t(expand_automate): Allocate sufficient space.  Initialize\n+\tnormal_decls_num.\n+\n 2011-08-25  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* config/avr/avr.md: Fix indentation from r177991.\n \n 2011-08-25  Bernd Schmidt  <bernds@codesourcery.com>"}, {"sha": "da5b799e6bc84ce0e836b89f1c1776896e356040", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6a9047b3d0aefa8b5328108c79fa299c064116/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6a9047b3d0aefa8b5328108c79fa299c064116/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=1e6a9047b3d0aefa8b5328108c79fa299c064116", "patch": "@@ -7961,6 +7961,16 @@ if the reservation is not possible, the second alternative.  The\n nondeterministic treatment means trying all alternatives, some of them\n may be rejected by reservations in the subsequent insns.\n \n+@item\n+@dfn{collapse-ndfa} modifies the behaviour of the generator when\n+producing an automaton.  An additional state transition to collapse a\n+nondeterministic @acronym{NDFA} state to a deterministic @acronym{DFA}\n+state is generated.  It can be triggered by passing @code{const0_rtx} to\n+state_transition.  In such an automaton, cycle advance transitions are\n+available only for these collapsed states.  This option is useful for\n+ports that want to use the @code{ndfa} option, but also want to use\n+@code{define_query_cpu_unit} to assign units to insns issued in a cycle.\n+\n @item\n @dfn{progress} means output of a progress bar showing how many states\n were generated so far for automaton being processed.  This is useful"}, {"sha": "d614e3a855d98aa7d235809e6142b9aab72bc9b2", "filename": "gcc/genautomata.c", "status": "modified", "additions": 125, "deletions": 45, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e6a9047b3d0aefa8b5328108c79fa299c064116/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e6a9047b3d0aefa8b5328108c79fa299c064116/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=1e6a9047b3d0aefa8b5328108c79fa299c064116", "patch": "@@ -252,13 +252,19 @@ static arc_t next_out_arc              (arc_t);\n #define V_OPTION \"-v\"\n #define W_OPTION \"-w\"\n #define NDFA_OPTION \"-ndfa\"\n+#define COLLAPSE_OPTION \"-collapse-ndfa\"\n #define PROGRESS_OPTION \"-progress\"\n \n /* The following flags are set up by function `initiate_automaton_gen'.  */\n \n /* Make automata with nondeterministic reservation by insns (`-ndfa').  */\n static int ndfa_flag;\n \n+/* When making an NDFA, produce additional transitions that collapse\n+   NDFA state into a deterministic one suitable for querying CPU units.\n+   Provide avance-state transitions only for deterministic states.  */\n+static int collapse_flag;\n+\n /* Do not make minimization of DFA (`-no-minimization').  */\n static int no_minimization_flag;\n \n@@ -604,7 +610,7 @@ struct regexp\n    NDFA.  */\n struct description\n {\n-  int decls_num;\n+  int decls_num, normal_decls_num;\n \n   /* The following fields are defined by checker.  */\n \n@@ -624,9 +630,8 @@ struct description\n   automaton_t first_automaton;\n \n   /* The following field is created by pipeline hazard parser and\n-     contains all declarations.  We allocate additional entry for\n-     special insn \"cycle advancing\" which is added by the automaton\n-     generator.  */\n+     contains all declarations.  We allocate additional entries for\n+     two special insns which are added by the automaton generator.  */\n   decl_t decls [1];\n };\n \n@@ -811,6 +816,9 @@ struct automaton\n   /* The following field value is the list of insn declarations for\n      given automaton.  */\n   ainsn_t ainsn_list;\n+  /* Pointers to the ainsns corresponding to the special reservations.  */\n+  ainsn_t advance_ainsn, collapse_ainsn;\n+\n   /* The following field value is the corresponding automaton\n      declaration.  This field is not NULL only if the automatic\n      partition on automata is not used.  */\n@@ -1529,6 +1537,8 @@ gen_automata_option (rtx def)\n     w_flag = 1;\n   else if (strcmp (XSTR (def, 0), NDFA_OPTION + 1) == 0)\n     ndfa_flag = 1;\n+  else if (strcmp (XSTR (def, 0), COLLAPSE_OPTION + 1) == 0)\n+    collapse_flag = 1;\n   else if (strcmp (XSTR (def, 0), PROGRESS_OPTION + 1) == 0)\n     progress_flag = 1;\n   else\n@@ -3202,6 +3212,10 @@ static ticker_t all_time;\n \n /* Pseudo insn decl which denotes advancing cycle.  */\n static decl_t advance_cycle_insn_decl;\n+/* Pseudo insn decl which denotes collapsing the NDFA state.  */\n+static decl_t collapse_ndfa_insn_decl;\n+\n+/* Create and record a decl for the special advance-cycle transition.  */\n static void\n add_advance_cycle_insn_decl (void)\n {\n@@ -3217,6 +3231,31 @@ add_advance_cycle_insn_decl (void)\n   description->insns_num++;\n }\n \n+/* Create and record a decl for the special collapse-NDFA transition.  */\n+static void\n+add_collapse_ndfa_insn_decl (void)\n+{\n+  collapse_ndfa_insn_decl = XCREATENODE (struct decl);\n+  collapse_ndfa_insn_decl->mode = dm_insn_reserv;\n+  collapse_ndfa_insn_decl->pos = no_pos;\n+  DECL_INSN_RESERV (collapse_ndfa_insn_decl)->regexp = NULL;\n+  DECL_INSN_RESERV (collapse_ndfa_insn_decl)->name = \"$collapse_ndfa\";\n+  DECL_INSN_RESERV (collapse_ndfa_insn_decl)->insn_num\n+    = description->insns_num;\n+  description->decls [description->decls_num] = collapse_ndfa_insn_decl;\n+  description->decls_num++;\n+  description->insns_num++;\n+}\n+\n+/* True if DECL is either of the two special decls we created.  */\n+static bool\n+special_decl_p (struct insn_reserv_decl *decl)\n+{\n+  return (decl == DECL_INSN_RESERV (advance_cycle_insn_decl)\n+\t  || (collapse_flag\n+\t      && decl == DECL_INSN_RESERV (collapse_ndfa_insn_decl)));\n+}\n+\n \f\n /* Abstract data `alternative states' which represents\n    nondeterministic nature of the description (see comments for\n@@ -3971,7 +4010,12 @@ find_arc (state_t from_state, state_t to_state, ainsn_t insn)\n   arc_t arc;\n \n   for (arc = first_out_arc (from_state); arc != NULL; arc = next_out_arc (arc))\n-    if (arc->to_state == to_state && arc->insn == insn)\n+    if (arc->insn == insn\n+\t&& (arc->to_state == to_state\n+\t    || (collapse_flag\n+\t\t/* Any arc is good enough for a collapse-ndfa transition.  */\n+\t\t&& (insn->insn_reserv_decl\n+\t\t    == DECL_INSN_RESERV (collapse_ndfa_insn_decl)))))\n       return arc;\n   return NULL;\n }\n@@ -4956,12 +5000,14 @@ transform_insn_regexps (void)\n \n   transform_time = create_ticker ();\n   add_advance_cycle_insn_decl ();\n+  if (collapse_flag)\n+    add_collapse_ndfa_insn_decl ();\n   if (progress_flag)\n     fprintf (stderr, \"Reservation transformation...\");\n-  for (i = 0; i < description->decls_num; i++)\n+  for (i = 0; i < description->normal_decls_num; i++)\n     {\n       decl = description->decls [i];\n-      if (decl->mode == dm_insn_reserv && decl != advance_cycle_insn_decl)\n+      if (decl->mode == dm_insn_reserv)\n \tDECL_INSN_RESERV (decl)->transformed_regexp\n \t  = transform_regexp (copy_insn_regexp\n \t\t\t      (DECL_INSN_RESERV (decl)->regexp));\n@@ -5432,7 +5478,7 @@ create_alt_states (automaton_t automaton)\n        curr_ainsn = curr_ainsn->next_ainsn)\n     {\n       reserv_decl = curr_ainsn->insn_reserv_decl;\n-      if (reserv_decl != DECL_INSN_RESERV (advance_cycle_insn_decl))\n+      if (!special_decl_p (reserv_decl))\n         {\n           curr_ainsn->alt_states = NULL;\n           process_alts_for_forming_states (reserv_decl->transformed_regexp,\n@@ -5461,8 +5507,7 @@ form_ainsn_with_same_reservs (automaton_t automaton)\n   for (curr_ainsn = automaton->ainsn_list;\n        curr_ainsn != NULL;\n        curr_ainsn = curr_ainsn->next_ainsn)\n-    if (curr_ainsn->insn_reserv_decl\n-\t== DECL_INSN_RESERV (advance_cycle_insn_decl))\n+    if (special_decl_p (curr_ainsn->insn_reserv_decl))\n       {\n         curr_ainsn->next_same_reservs_insn = NULL;\n         curr_ainsn->first_insn_with_same_reservs = 1;\n@@ -5530,7 +5575,6 @@ make_automaton (automaton_t automaton)\n   state_t state;\n   state_t start_state;\n   state_t state2;\n-  ainsn_t advance_cycle_ainsn;\n   VEC(state_t, heap) *state_stack = VEC_alloc(state_t, heap, 150);\n   int states_n;\n   reserv_sets_t reservs_matter = form_reservs_matter (automaton);\n@@ -5544,14 +5588,13 @@ make_automaton (automaton_t automaton)\n   while (VEC_length (state_t, state_stack) != 0)\n     {\n       state = VEC_pop (state_t, state_stack);\n-      advance_cycle_ainsn = NULL;\n       for (ainsn = automaton->ainsn_list;\n \t   ainsn != NULL;\n \t   ainsn = ainsn->next_ainsn)\n         if (ainsn->first_insn_with_same_reservs)\n           {\n             insn_reserv_decl = ainsn->insn_reserv_decl;\n-            if (insn_reserv_decl != DECL_INSN_RESERV (advance_cycle_insn_decl))\n+            if (!special_decl_p (insn_reserv_decl))\n               {\n \t\t/* We process alt_states in the same order as they are\n                    present in the description.  */\n@@ -5578,8 +5621,6 @@ make_automaton (automaton_t automaton)\n                       }\n                   }\n               }\n-            else\n-              advance_cycle_ainsn = ainsn;\n           }\n       /* Add transition to advance cycle.  */\n       state2 = state_shift (state, reservs_matter);\n@@ -5591,8 +5632,7 @@ make_automaton (automaton_t automaton)\n \t  if (progress_flag && states_n % 100 == 0)\n \t    fprintf (stderr, \".\");\n         }\n-      gcc_assert (advance_cycle_ainsn);\n-      add_arc (state, state2, advance_cycle_ainsn);\n+      add_arc (state, state2, automaton->advance_ainsn);\n     }\n   VEC_free (state_t, heap, state_stack);\n }\n@@ -5700,7 +5740,13 @@ create_composed_state (state_t original_state, arc_t arcs_marked_by_insn,\n                 for (curr_arc = first_out_arc (curr_alt_state->state);\n                      curr_arc != NULL;\n                      curr_arc = next_out_arc (curr_arc))\n-\t\t  add_arc (state, curr_arc->to_state, curr_arc->insn);\n+\t\t  if (!collapse_flag\n+\t\t      /* When producing collapse-NDFA transitions, we\n+\t\t\t only add advance-cycle transitions to the\n+\t\t\t collapsed states.  */\n+\t\t      || (curr_arc->insn->insn_reserv_decl\n+\t\t\t  != DECL_INSN_RESERV (advance_cycle_insn_decl)))\n+\t\t    add_arc (state, curr_arc->to_state, curr_arc->insn);\n             }\n           arcs_marked_by_insn->to_state = state;\n           for (alts_number = 0,\n@@ -5750,6 +5796,7 @@ NDFA_to_DFA (automaton_t automaton)\n \t{\n \t  decl = description->decls [i];\n \t  if (decl->mode == dm_insn_reserv\n+\t      && decl != collapse_ndfa_insn_decl\n \t      && create_composed_state\n \t         (state, DECL_INSN_RESERV (decl)->arcs_marked_by_insn,\n \t\t  &state_stack))\n@@ -5759,6 +5806,22 @@ NDFA_to_DFA (automaton_t automaton)\n \t\tfprintf (stderr, \".\");\n \t    }\n \t}\n+      /* Add a transition to collapse the NDFA.  */\n+      if (collapse_flag)\n+\t{\n+\t  if (state->component_states != NULL)\n+\t    {\n+\t      state_t state2 = state->component_states->state;\n+\t      if (!state2->it_was_placed_in_stack_for_DFA_forming)\n+\t\t{\n+\t\t  state2->it_was_placed_in_stack_for_DFA_forming = 1;\n+\t\t  VEC_safe_push (state_t, heap, state_stack, state2);\n+\t\t}\n+\t      add_arc (state, state2, automaton->collapse_ainsn);\n+\t    }\n+\t  else\n+\t    add_arc (state, state, automaton->collapse_ainsn);\n+\t}\n     }\n   VEC_free (state_t, heap, state_stack);\n }\n@@ -5814,8 +5877,7 @@ add_achieved_state (state_t state)\n \n /* The function sets up equivalence numbers of insns which mark all\n    out arcs of STATE by equiv_class_num_1 (if ODD_ITERATION_FLAG has\n-   nonzero value) or by equiv_class_num_2 of the destination state.\n-   The function returns number of out arcs of STATE.  */\n+   nonzero value) or by equiv_class_num_2 of the destination state.  */\n static void\n set_out_arc_insns_equiv_num (state_t state, int odd_iteration_flag)\n {\n@@ -6583,8 +6645,8 @@ units_to_automata_heuristic_distr (void)\n /* The functions creates automaton insns for each automata.  Automaton\n    insn is simply insn for given automaton which makes reservation\n    only of units of the automaton.  */\n-static ainsn_t\n-create_ainsns (void)\n+static void\n+create_ainsns (automaton_t automaton)\n {\n   decl_t decl;\n   ainsn_t first_ainsn;\n@@ -6607,10 +6669,14 @@ create_ainsns (void)\n \t    first_ainsn = curr_ainsn;\n \t  else\n \t    prev_ainsn->next_ainsn = curr_ainsn;\n+\t  if (decl == advance_cycle_insn_decl)\n+\t    automaton->advance_ainsn = curr_ainsn;\n+\t  else if (decl == collapse_ndfa_insn_decl)\n+\t    automaton->collapse_ainsn = curr_ainsn;\n \t  prev_ainsn = curr_ainsn;\n \t}\n     }\n-  return first_ainsn;\n+  automaton->ainsn_list = first_ainsn;\n }\n \n /* The function assigns automata to units according to constructions\n@@ -6658,7 +6724,7 @@ create_automata (void)\n            curr_automaton_num++, prev_automaton = curr_automaton)\n         {\n \t  curr_automaton = XCREATENODE (struct automaton);\n-\t  curr_automaton->ainsn_list = create_ainsns ();\n+\t  create_ainsns (curr_automaton);\n \t  curr_automaton->corresponding_automaton_decl = NULL;\n \t  curr_automaton->next_automaton = NULL;\n           curr_automaton->automaton_order_num = curr_automaton_num;\n@@ -6679,7 +6745,7 @@ create_automata (void)\n \t      && DECL_AUTOMATON (decl)->automaton_is_used)\n \t    {\n \t      curr_automaton = XCREATENODE (struct automaton);\n-\t      curr_automaton->ainsn_list = create_ainsns ();\n+\t      create_ainsns (curr_automaton);\n \t      curr_automaton->corresponding_automaton_decl\n \t\t= DECL_AUTOMATON (decl);\n \t      curr_automaton->next_automaton = NULL;\n@@ -6696,7 +6762,7 @@ create_automata (void)\n       if (curr_automaton_num == 0)\n \t{\n \t  curr_automaton = XCREATENODE (struct automaton);\n-\t  curr_automaton->ainsn_list = create_ainsns ();\n+\t  create_ainsns (curr_automaton);\n \t  curr_automaton->corresponding_automaton_decl = NULL;\n \t  curr_automaton->next_automaton = NULL;\n \t  description->first_automaton = curr_automaton;\n@@ -6925,10 +6991,11 @@ output_temp_chip_member_name (FILE *f, automaton_t automaton)\n   output_chip_member_name (f, automaton);\n }\n \n-/* This is name of macro value which is code of pseudo_insn\n-   representing advancing cpu cycle.  Its value is used as internal\n-   code unknown insn.  */\n+/* This is name of macro value which is code of pseudo_insns\n+   representing advancing cpu cycle and collapsing the NDFA.\n+   Its value is used as internal code unknown insn.  */\n #define ADVANCE_CYCLE_VALUE_NAME \"DFA__ADVANCE_CYCLE\"\n+#define COLLAPSE_NDFA_VALUE_NAME \"NDFA__COLLAPSE\"\n \n /* Output name of translate vector for given automaton.  */\n static void\n@@ -7803,6 +7870,9 @@ output_tables (void)\n     }\n   fprintf (output_file, \"\\n#define %s %d\\n\\n\", ADVANCE_CYCLE_VALUE_NAME,\n            DECL_INSN_RESERV (advance_cycle_insn_decl)->insn_num);\n+  if (collapse_flag)\n+    fprintf (output_file, \"\\n#define %s %d\\n\\n\", COLLAPSE_NDFA_VALUE_NAME,\n+\t     DECL_INSN_RESERV (collapse_ndfa_insn_decl)->insn_num);\n }\n \n /* The function outputs definition and value of PHR interface variable\n@@ -8080,13 +8150,20 @@ output_internal_insn_code_evaluation (const char *insn_name,\n \t\t\t\t      const char *insn_code_name,\n \t\t\t\t      int code)\n {\n-  fprintf (output_file, \"\\n  if (%s != 0)\\n    {\\n\", insn_name);\n+  fprintf (output_file, \"\\n  if (%s == 0)\\n\", insn_name);\n+  fprintf (output_file, \"    %s = %s;\\n\\n\",\n+\t   insn_code_name, ADVANCE_CYCLE_VALUE_NAME);\n+  if (collapse_flag)\n+    {\n+      fprintf (output_file, \"\\n  else if (%s == const0_rtx)\\n\", insn_name);\n+      fprintf (output_file, \"    %s = %s;\\n\\n\",\n+\t       insn_code_name, COLLAPSE_NDFA_VALUE_NAME);\n+    }\n+  fprintf (output_file, \"\\n  else\\n    {\\n\");\n   fprintf (output_file, \"      %s = %s (%s);\\n\", insn_code_name,\n \t   DFA_INSN_CODE_FUNC_NAME, insn_name);\n-  fprintf (output_file, \"      if (%s > %s)\\n        return %d;\\n\",\n+  fprintf (output_file, \"      if (%s > %s)\\n        return %d;\\n    }\\n\",\n \t   insn_code_name, ADVANCE_CYCLE_VALUE_NAME, code);\n-  fprintf (output_file, \"    }\\n  else\\n    %s = %s;\\n\\n\",\n-\t   insn_code_name, ADVANCE_CYCLE_VALUE_NAME);\n }\n \n \n@@ -8287,9 +8364,8 @@ output_default_latencies (void)\n   fprintf (output_file, \"  static const %s default_latencies[] =\\n    {\",\n \t   tabletype);\n \n-  for (i = 0, j = 0, col = 7; i < description->decls_num; i++)\n-    if (description->decls[i]->mode == dm_insn_reserv\n-\t&& description->decls[i] != advance_cycle_insn_decl)\n+  for (i = 0, j = 0, col = 7; i < description->normal_decls_num; i++)\n+    if (description->decls[i]->mode == dm_insn_reserv)\n       {\n \tif ((col = (col+1) % 8) == 0)\n \t  fputs (\"\\n     \", output_file);\n@@ -8298,7 +8374,7 @@ output_default_latencies (void)\n \tfprintf (output_file, \"% 4d,\",\n \t\t DECL_INSN_RESERV (decl)->default_latency);\n       }\n-  gcc_assert (j == DECL_INSN_RESERV (advance_cycle_insn_decl)->insn_num);\n+  gcc_assert (j == description->insns_num - (collapse_flag ? 2 : 1));\n   fputs (\"\\n    };\\n\", output_file);\n }\n \n@@ -8479,10 +8555,10 @@ output_print_reservation_func (void)\n   fputs (\"  static const char *const reservation_names[] =\\n    {\",\n \t output_file);\n \n-  for (i = 0, j = 0; i < description->decls_num; i++)\n+  for (i = 0, j = 0; i < description->normal_decls_num; i++)\n     {\n       decl = description->decls [i];\n-      if (decl->mode == dm_insn_reserv && decl != advance_cycle_insn_decl)\n+      if (decl->mode == dm_insn_reserv)\n \t{\n \t  gcc_assert (j == DECL_INSN_RESERV (decl)->insn_num);\n \t  j++;\n@@ -8492,7 +8568,7 @@ output_print_reservation_func (void)\n \t  finish_regexp_representation ();\n \t}\n     }\n-  gcc_assert (j == DECL_INSN_RESERV (advance_cycle_insn_decl)->insn_num);\n+  gcc_assert (j == description->insns_num - (collapse_flag ? 2 : 1));\n \n   fprintf (output_file, \"\\n      \\\"%s\\\"\\n    };\\n  int %s;\\n\\n\",\n \t   NOTHING_NAME, INTERNAL_INSN_CODE_NAME);\n@@ -8802,7 +8878,7 @@ output_description (void)\n \t}\n     }\n   fprintf (output_description_file, \"\\n\");\n-  for (i = 0; i < description->decls_num; i++)\n+  for (i = 0; i < description->normal_decls_num; i++)\n     {\n       decl = description->decls [i];\n       if (decl->mode == dm_reserv)\n@@ -8812,7 +8888,7 @@ output_description (void)\n           output_regexp (DECL_RESERV (decl)->regexp);\n           fprintf (output_description_file, \"\\n\");\n         }\n-      else if (decl->mode == dm_insn_reserv && decl != advance_cycle_insn_decl)\n+      else if (decl->mode == dm_insn_reserv)\n         {\n           fprintf (output_description_file, \"insn reservation %s \",\n \t\t   DECL_INSN_RESERV (decl)->name);\n@@ -9218,6 +9294,8 @@ initiate_automaton_gen (int argc, char **argv)\n       w_flag = 1;\n     else if (strcmp (argv [i], NDFA_OPTION) == 0)\n       ndfa_flag = 1;\n+    else if (strcmp (argv [i], COLLAPSE_OPTION) == 0)\n+      collapse_flag = 1;\n     else if (strcmp (argv [i], PROGRESS_OPTION) == 0)\n       progress_flag = 1;\n     else if (strcmp (argv [i], \"-split\") == 0)\n@@ -9260,7 +9338,8 @@ check_automata_insn_issues (void)\n       for (ainsn = automaton->ainsn_list;\n \t   ainsn != NULL;\n \t   ainsn = ainsn->next_ainsn)\n-\tif (ainsn->first_insn_with_same_reservs && !ainsn->arc_exists_p)\n+\tif (ainsn->first_insn_with_same_reservs && !ainsn->arc_exists_p\n+\t    && ainsn != automaton->collapse_ainsn)\n \t  {\n \t    for (reserv_ainsn = ainsn;\n \t\t reserv_ainsn != NULL;\n@@ -9374,9 +9453,10 @@ expand_automata (void)\n \n   description = XCREATENODEVAR (struct description,\n \t\t\t\tsizeof (struct description)\n-\t\t\t\t/* One entry for cycle advancing insn.  */\n-\t\t\t\t+ sizeof (decl_t) * VEC_length (decl_t, decls));\n+\t\t\t\t/* Two entries for special insns.  */\n+\t\t\t\t+ sizeof (decl_t) * (VEC_length (decl_t, decls) + 1));\n   description->decls_num = VEC_length (decl_t, decls);\n+  description->normal_decls_num = description->decls_num;\n   description->query_units_num = 0;\n   for (i = 0; i < description->decls_num; i++)\n     {"}]}