{"sha": "be88b0c7819ecf82f4020ab037cba99c5b0e99ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU4OGIwYzc4MTllY2Y4MmY0MDIwYWIwMzdjYmE5OWM1YjBlOTlhZA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-07-15T16:25:38Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-07-15T16:25:38Z"}, "message": "predicates.md (const_m255_to_m1_operand): New.\n\n\t* config/avr/predicates.md (const_m255_to_m1_operand): New.\n\t* config/avr/constraints.md (Cn8, Ca1, Co1, Yx2): New constraints.\n\t* config/avr/avr.md (add<mode>3) <ALL1>: Make \"r,0,r\" more\n\texpensive.\n\t(*cmphi.zero-extend.0, *cmphi.zero-extend.1)\n\t(*usum_widenqihi3, *udiff_widenqihi3)\n\t(*addhi3_zero_extend.const): New combiner insns.\n\t(andqi3, iorqi3): Provide \"l\" (NO_LD_REGS) alternative if\n\tjust 1 bit is affected.\n\t* config/avr/avr.c (avr_out_bitop) <QImode>: Don't access xop[3].\n\t(avr_out_compare) [EQ,NE]: Tweak comparing d-regs against -1.\n\nFrom-SVN: r238381", "tree": {"sha": "bcd5d773d7bef7e04623303af8ec0ccb16ada3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcd5d773d7bef7e04623303af8ec0ccb16ada3e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be88b0c7819ecf82f4020ab037cba99c5b0e99ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be88b0c7819ecf82f4020ab037cba99c5b0e99ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be88b0c7819ecf82f4020ab037cba99c5b0e99ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eed9a887bb0bcccc6d8298609423bf917932964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eed9a887bb0bcccc6d8298609423bf917932964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eed9a887bb0bcccc6d8298609423bf917932964"}], "stats": {"total": 146, "additions": 131, "deletions": 15}, "files": [{"sha": "fc83e01c3b9141d1170dfc0151a3877520db3b22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be88b0c7819ecf82f4020ab037cba99c5b0e99ad", "patch": "@@ -1,3 +1,17 @@\n+2016-07-15  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/predicates.md (const_m255_to_m1_operand): New.\n+\t* config/avr/constraints.md (Cn8, Ca1, Co1, Yx2): New constraints.\n+\t* config/avr/avr.md (add<mode>3) <ALL1>: Make \"r,0,r\" more\n+\texpensive.\n+\t(*cmphi.zero-extend.0, *cmphi.zero-extend.1)\n+\t(*usum_widenqihi3, *udiff_widenqihi3)\n+\t(*addhi3_zero_extend.const): New combiner insns.\n+\t(andqi3, iorqi3): Provide \"l\" (NO_LD_REGS) alternative if\n+\tjust 1 bit is affected.\n+\t* config/avr/avr.c (avr_out_bitop) <QImode>: Don't access xop[3].\n+\t(avr_out_compare) [EQ,NE]: Tweak comparing d-regs against -1.\n+\n 2016-07-15  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* omp-low.c (lower_omp_target): Mark data clauses with"}, {"sha": "2c0d884d0fbee28b794f870e9d75e9624ec7d712", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=be88b0c7819ecf82f4020ab037cba99c5b0e99ad", "patch": "@@ -5346,6 +5346,34 @@ avr_out_compare (rtx_insn *insn, rtx *xop, int *plen)\n         }\n     }\n \n+  /* Comparisons == -1 and != -1 of a d-register that's used after the\n+     comparison.  (If it's unused after we use CPI / SBCI or ADIW sequence\n+     from below.)  Instead of  CPI Rlo,-1 / LDI Rx,-1 / CPC Rhi,Rx  we can\n+     use  CPI Rlo,-1 / CPC Rhi,Rlo  which is 1 instruction shorter:\n+     If CPI is true then Rlo contains -1 and we can use Rlo instead of Rx\n+     when CPC'ing the high part.  If CPI is false then CPC cannot render\n+     the result to true.  This also works for the more generic case where\n+     the constant is of the form 0xabab.  */\n+\n+  if (n_bytes == 2\n+      && xval != 0\n+      && test_hard_reg_class (LD_REGS, xreg)\n+      && compare_eq_p (insn)\n+      && !reg_unused_after (insn, xreg))\n+    {\n+      rtx xlo8 = simplify_gen_subreg (QImode, xval, mode, 0);\n+      rtx xhi8 = simplify_gen_subreg (QImode, xval, mode, 1);\n+\n+      if (INTVAL (xlo8) == INTVAL (xhi8))\n+        {\n+          xop[0] = xreg;\n+          xop[1] = xlo8;\n+\n+          return avr_asm_len (\"cpi %A0,%1\"  CR_TAB\n+                              \"cpc %B0,%A0\", xop, plen, 2);\n+        }\n+    }\n+\n   for (i = 0; i < n_bytes; i++)\n     {\n       /* We compare byte-wise.  */\n@@ -7687,11 +7715,11 @@ avr_out_bitop (rtx insn, rtx *xop, int *plen)\n \n   /* op[0]: 8-bit destination register\n      op[1]: 8-bit const int\n-     op[2]: 8-bit clobber register or SCRATCH\n+     op[2]: 8-bit clobber register, SCRATCH or NULL_RTX.\n      op[3]: 8-bit register containing 0xff or NULL_RTX  */\n   rtx op[4];\n \n-  op[2] = xop[3];\n+  op[2] = QImode == mode ? NULL_RTX : xop[3];\n   op[3] = NULL_RTX;\n \n   if (plen)"}, {"sha": "13c5373a11a5f3bf45e2737272842d0dc51b78f3", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 61, "deletions": 13, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=be88b0c7819ecf82f4020ab037cba99c5b0e99ad", "patch": "@@ -1175,7 +1175,7 @@\n \tinc %0\\;inc %0\n \tdec %0\\;dec %0\"\n   [(set_attr \"length\" \"1,1,1,1,2,2\")\n-   (set_attr \"cc\" \"set_czn,set_czn,set_vzn,set_vzn,set_vzn,set_vzn\")])\n+   (set_attr \"cc\" \"set_czn,set_czn,set_vzn,set_vzn,set_zn,set_zn\")])\n \n ;; \"addhi3\"\n ;; \"addhq3\" \"adduhq3\"\n@@ -1240,6 +1240,33 @@\n   [(set_attr \"length\" \"5\")\n    (set_attr \"cc\" \"clobber\")])\n \n+(define_insn \"*addhi3_zero_extend.const\"\n+  [(set (match_operand:HI 0 \"register_operand\"                         \"=d\")\n+        (plus:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"0\"))\n+                 (match_operand:HI 2 \"const_m255_to_m1_operand\"         \"Cn8\")))]\n+  \"\"\n+  \"subi %A0,%n2\\;sbc %B0,%B0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"set_czn\")])\n+\n+(define_insn \"*usum_widenqihi3\"\n+  [(set (match_operand:HI 0 \"register_operand\"                          \"=r\")\n+        (plus:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\"  \"0\"))\n+                 (zero_extend:HI (match_operand:QI 2 \"register_operand\"  \"r\"))))]\n+  \"\"\n+  \"add %A0,%2\\;clr %B0\\;rol %B0\"\n+  [(set_attr \"length\" \"3\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn \"*udiff_widenqihi3\"\n+  [(set (match_operand:HI 0 \"register_operand\"                           \"=r\")\n+        (minus:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\"  \"0\"))\n+                  (zero_extend:HI (match_operand:QI 2 \"register_operand\"  \"r\"))))]\n+  \"\"\n+  \"sub %A0,%2\\;sbc %B0,%B0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"set_czn\")])\n+    \n (define_insn \"*addhi3_sp\"\n   [(set (match_operand:HI 1 \"stack_register_operand\"           \"=q\")\n         (plus:HI (match_operand:HI 2 \"stack_register_operand\"   \"q\")\n@@ -3102,15 +3129,16 @@\n ; and\n \n (define_insn \"andqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\"       \"=??r,d\")\n-        (and:QI (match_operand:QI 1 \"register_operand\" \"%0,0\")\n-                (match_operand:QI 2 \"nonmemory_operand\" \"r,i\")))]\n+  [(set (match_operand:QI 0 \"register_operand\"       \"=??r,d,*l\")\n+        (and:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0\")\n+                (match_operand:QI 2 \"nonmemory_operand\" \"r,i,Ca1\")))]\n   \"\"\n   \"@\n \tand %0,%2\n-\tandi %0,lo8(%2)\"\n-  [(set_attr \"length\" \"1,1\")\n-   (set_attr \"cc\" \"set_zn,set_zn\")])\n+\tandi %0,lo8(%2)\n+\t* return avr_out_bitop (insn, operands, NULL);\"\n+  [(set_attr \"length\" \"1,1,2\")\n+   (set_attr \"cc\" \"set_zn,set_zn,none\")])\n \n (define_insn \"andhi3\"\n   [(set (match_operand:HI 0 \"register_operand\"       \"=??r,d,d,r  ,r\")\n@@ -3184,15 +3212,16 @@\n ;; ior\n \n (define_insn \"iorqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\"       \"=??r,d\")\n-        (ior:QI (match_operand:QI 1 \"register_operand\" \"%0,0\")\n-                (match_operand:QI 2 \"nonmemory_operand\" \"r,i\")))]\n+  [(set (match_operand:QI 0 \"register_operand\"       \"=??r,d,*l\")\n+        (ior:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0\")\n+                (match_operand:QI 2 \"nonmemory_operand\" \"r,i,Co1\")))]\n   \"\"\n   \"@\n \tor %0,%2\n-\tori %0,lo8(%2)\"\n-  [(set_attr \"length\" \"1,1\")\n-   (set_attr \"cc\" \"set_zn,set_zn\")])\n+\tori %0,lo8(%2)\n+        * return avr_out_bitop (insn, operands, NULL);\"\n+  [(set_attr \"length\" \"1,1,2\")\n+   (set_attr \"cc\" \"set_zn,set_zn,none\")])\n \n (define_insn \"iorhi3\"\n   [(set (match_operand:HI 0 \"register_operand\"       \"=??r,d,d,r  ,r\")\n@@ -4607,6 +4636,25 @@\n   [(set_attr \"cc\" \"compare\")\n    (set_attr \"length\" \"1\")])\n \n+\n+(define_insn \"*cmphi.zero-extend.0\"\n+  [(set (cc0)\n+        (compare (zero_extend:HI (match_operand:QI 0 \"register_operand\" \"r\"))\n+                 (match_operand:HI 1 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"cp %0,%A1\\;cpc __zero_reg__,%B1\"\n+  [(set_attr \"cc\" \"compare\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"*cmphi.zero-extend.1\"\n+  [(set (cc0)\n+        (compare (match_operand:HI 0 \"register_operand\" \"r\")\n+                 (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"cp %A0,%1\\;cpc %B0,__zero_reg__\"\n+  [(set_attr \"cc\" \"compare\")\n+   (set_attr \"length\" \"2\")])\n+\n ;; \"*cmphi\"\n ;; \"*cmphq\" \"*cmpuhq\"\n ;; \"*cmpha\" \"*cmpuha\""}, {"sha": "80cff0c60c347666c5ee2e12cab6866390c16ec3", "filename": "gcc/config/avr/constraints.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/gcc%2Fconfig%2Favr%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/gcc%2Fconfig%2Favr%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fconstraints.md?ref=be88b0c7819ecf82f4020ab037cba99c5b0e99ad", "patch": "@@ -133,6 +133,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"ival == 7\")))\n \n+(define_constraint \"Ca1\"\n+  \"Constant 1-byte integer that allows AND by means of CLT + BLD.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"avr_popcount_each_byte (op, 1, 1<<7)\")))\n+\n (define_constraint \"Ca2\"\n   \"Constant 2-byte integer that allows AND without clobber register.\"\n   (and (match_code \"const_int\")\n@@ -148,6 +153,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"avr_popcount_each_byte (op, 4, (1<<0) | (1<<7) | (1<<8))\")))\n \n+(define_constraint \"Co1\"\n+  \"Constant 1-byte integer that allows AND by means of SET + BLD.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"avr_popcount_each_byte (op, 1, 1<<1)\")))\n+\n (define_constraint \"Co2\"\n   \"Constant 2-byte integer that allows OR without clobber register.\"\n   (and (match_code \"const_int\")\n@@ -193,6 +203,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"!avr_has_nibble_0xf (op)\")))\n \n+(define_constraint \"Cn8\"\n+  \"A negative constant integer in the range @minus{}255 @dots{} @minus{}1.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, -255, -1)\")))\n+\n ;; CONST_FIXED is no element of 'n' so cook our own.\n ;; \"i\" or \"s\" would match but because the insn uses iterators that cover\n ;; INT_MODE, \"i\" or \"s\" is not always possible.\n@@ -230,6 +245,12 @@\n             (match_test \"-2 == INTVAL (avr_to_int_mode (op))\"))\n        (match_test \"satisfies_constraint_Cm2 (op)\")))\n \n+(define_constraint \"Yx2\"\n+  \"Fixed-point or integer constant not in the range @minus{}2 @dots{} 2\"\n+  (and (ior (match_code \"const_int\")\n+            (match_code \"const_fixed\"))\n+       (match_test \"!IN_RANGE (INTVAL (avr_to_int_mode (op)), -2, 2)\")))\n+\n ;; Similar to \"IJ\" used with ADIW/SBIW, but for CONST_FIXED.\n \n (define_constraint \"YIJ\""}, {"sha": "c7d3a24960f7a63f6b928ef726b7845f4c7deb0b", "filename": "gcc/config/avr/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/gcc%2Fconfig%2Favr%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be88b0c7819ecf82f4020ab037cba99c5b0e99ad/gcc%2Fconfig%2Favr%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fpredicates.md?ref=be88b0c7819ecf82f4020ab037cba99c5b0e99ad", "patch": "@@ -114,6 +114,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 2, 6)\")))\n \n+;; Return 1 if OP is constant integer -255..-1.\n+(define_predicate \"const_m255_to_m1_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), -255, -1)\")))\n+\n ;; Returns true if OP is either the constant zero or a register.\n (define_predicate \"reg_or_0_operand\"\n   (ior (match_operand 0 \"register_operand\")"}]}