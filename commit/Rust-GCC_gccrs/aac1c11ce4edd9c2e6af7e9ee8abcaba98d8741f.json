{"sha": "aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFjMWMxMWNlNGVkZDljMmU2YWY3ZTllZThhYmNhYmE5OGQ4NzQxZg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-10-31T11:27:35Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-10-31T11:27:35Z"}, "message": "[ARC] Add BI/BIH instruction support.\n\nUse BI/BIH instruction to implement casesi pattern. Only ARC V2.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * config/arc/arc.c (arc_override_options): Remove\n        TARGET_COMPACT_CASESI.\n        * config/arc/arc.h (ASM_OUTPUT_ADDR_DIFF_ELT): Update.\n        (CASE_VECTOR_MODE): Likewise.\n        (CASE_VECTOR_PC_RELATIVE): Likewise.\n        (CASE_VECTOR_SHORTEN_MODE): Likewise.\n        (CASE_VECTOR_SHORTEN_MODE1): Delete.\n        (ADDR_VEC_ALIGN): Update.\n        (ASM_OUTPUT_CASE_LABEL): Undefine.\n        (ASM_OUTPUT_BEFORE_CASE_LABEL): Undefine.\n        (TARGET_BI_BIH): Define.\n        (DEFAULT_BRANCH_INDEX): Likewise.\n        * config/arc/arc.md (casesi): Rework to accept BI/BIH\n        instructions, remove compact_casesi use case.\n        (casesi_compact_jump): Remove.\n        (casesi_dispatch): New pattern.\n        * config/arc/arc.opt: Add mbranch-index option. Deprecate\n        compact_casesi option.\n        * doc/invoke.texi: Document mbranch-index option.\n\ngcc/testsuite\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * gcc.target/arc/jumptable.c: New test.\n\nFrom-SVN: r265675", "tree": {"sha": "07e0408043af521dfe832f263dea8d6e7cea5011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07e0408043af521dfe832f263dea8d6e7cea5011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8efa18d693207598020f6d7aabb680397ff3815c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efa18d693207598020f6d7aabb680397ff3815c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efa18d693207598020f6d7aabb680397ff3815c"}], "stats": {"total": 408, "additions": 192, "deletions": 216}, "files": [{"sha": "051d46209983aeed576899b1b90a9ac025df4e72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "patch": "@@ -1,3 +1,25 @@\n+2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_override_options): Remove\n+\tTARGET_COMPACT_CASESI.\n+\t* config/arc/arc.h (ASM_OUTPUT_ADDR_DIFF_ELT): Update.\n+\t(CASE_VECTOR_MODE): Likewise.\n+\t(CASE_VECTOR_PC_RELATIVE): Likewise.\n+\t(CASE_VECTOR_SHORTEN_MODE): Likewise.\n+\t(CASE_VECTOR_SHORTEN_MODE1): Delete.\n+\t(ADDR_VEC_ALIGN): Update.\n+\t(ASM_OUTPUT_CASE_LABEL): Undefine.\n+\t(ASM_OUTPUT_BEFORE_CASE_LABEL): Undefine.\n+\t(TARGET_BI_BIH): Define.\n+\t(DEFAULT_BRANCH_INDEX): Likewise.\n+\t* config/arc/arc.md (casesi): Rework to accept BI/BIH\n+\tinstructions, remove compact_casesi use case.\n+\t(casesi_compact_jump): Remove.\n+\t(casesi_dispatch): New pattern.\n+\t* config/arc/arc.opt: Add mbranch-index option. Deprecate\n+\tcompact_casesi option.\n+\t* doc/invoke.texi: Document mbranch-index option.\n+\n 2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_get_tp): Remove function."}, {"sha": "00ec77d120b3d9df26509edced9fedb9bc473ae9", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "patch": "@@ -1290,33 +1290,14 @@ arc_override_options (void)\n   if (arc_size_opt_level == 3)\n     optimize_size = 1;\n \n-  /* Compact casesi is not a valid option for ARCv2 family.  */\n-  if (TARGET_V2)\n-    {\n-      if (TARGET_COMPACT_CASESI)\n-\t{\n-\t  warning (OPT_mcompact_casesi,\n-\t\t   \"compact-casesi is not applicable to ARCv2\");\n-\t  TARGET_COMPACT_CASESI = 0;\n-\t}\n-    }\n-  else if (optimize_size == 1\n-\t   && !global_options_set.x_TARGET_COMPACT_CASESI)\n-    TARGET_COMPACT_CASESI = 1;\n-\n   if (flag_pic)\n     target_flags |= MASK_NO_SDATA_SET;\n \n   if (flag_no_common == 255)\n     flag_no_common = !TARGET_NO_SDATA_SET;\n \n-  /* TARGET_COMPACT_CASESI needs the \"q\" register class.  */\n   if (TARGET_MIXED_CODE)\n     TARGET_Q_CLASS = 1;\n-  if (!TARGET_Q_CLASS)\n-    TARGET_COMPACT_CASESI = 0;\n-  if (TARGET_COMPACT_CASESI)\n-    TARGET_CASE_VECTOR_PC_RELATIVE = 1;\n \n   /* Check for small data option */\n   if (!global_options_set.x_g_switch_value && !TARGET_NO_SDATA_SET)"}, {"sha": "58d66d74ebcc311074dab5bbd09dfd6cd4492dbe", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 65, "deletions": 45, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "patch": "@@ -1266,29 +1266,45 @@ do {\t\t\t\t\t\t\t\\\n   ASM_GENERATE_INTERNAL_LABEL (label, \"L\", VALUE);\t\\\n   fprintf (FILE, \"\\t.word \");\t\t\t\t\\\n   assemble_name (FILE, label);\t\t\t\t\\\n-  fprintf(FILE, \"\\n\");\t\t\t\t\t\\\n+  fprintf (FILE, \"\\n\");\t\t\t\t\t\\\n } while (0)\n \n /* This is how to output an element of a case-vector that is relative.  */\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\\n-do {\t\t\t\t\t\t\t\\\n-  char label[30];\t\t\t\t\t\\\n-  ASM_GENERATE_INTERNAL_LABEL (label, \"L\", VALUE);\t\\\n-  switch (GET_MODE (BODY))\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-    case E_QImode: fprintf (FILE, \"\\t.byte \"); break;\t\\\n-    case E_HImode: fprintf (FILE, \"\\t.hword \"); break;\t\\\n-    case E_SImode: fprintf (FILE, \"\\t.word \"); break;\t\\\n-    default: gcc_unreachable ();\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  assemble_name (FILE, label);\t\t\t\t\\\n-  fprintf (FILE, \"-\");\t\t\t\t\t\\\n-  ASM_GENERATE_INTERNAL_LABEL (label, \"L\", REL);\t\\\n-  assemble_name (FILE, label);\t\t\t\t\\\n-  if (TARGET_COMPACT_CASESI)\t\t\t\t\\\n-    fprintf (FILE, \" + %d\", 4 + arc_get_unalign ());\t\\\n-  fprintf(FILE, \"\\n\");                                  \\\n-} while (0)\n+#define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL)\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    char label[30];\t\t\t\t\t\t\\\n+    ASM_GENERATE_INTERNAL_LABEL (label, \"L\", VALUE);\t\t\\\n+    if (!TARGET_BI_BIH)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tswitch (GET_MODE (BODY))\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t  case E_QImode: fprintf (FILE, \"\\t.byte \"); break;\t\\\n+\t  case E_HImode: fprintf (FILE, \"\\t.hword \"); break;\t\\\n+\t  case E_SImode: fprintf (FILE, \"\\t.word \"); break;\t\\\n+\t  default: gcc_unreachable ();\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\tassemble_name (FILE, label);\t\t\t\t\\\n+\tfprintf (FILE, \"-\");\t\t\t\t\t\\\n+\tASM_GENERATE_INTERNAL_LABEL (label, \"L\", REL);\t\t\\\n+\tassemble_name (FILE, label);\t\t\t\t\\\n+\tfprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+      switch (GET_MODE (BODY))\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\tcase E_SImode: fprintf (FILE, \"\\tb\\t@\"); break;\t\t\\\n+\tcase E_HImode:\t\t\t\t\t\t\\\n+\tcase E_QImode: fprintf (FILE, \"\\tb_s\\t@\"); break;\t\\\n+\tdefault: gcc_unreachable ();\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      assemble_name (FILE, label);\t\t\t\t\\\n+      fprintf(FILE, \"\\n\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Defined to also emit an .align in elfos.h.  We don't want that.  */\n+#undef ASM_OUTPUT_CASE_LABEL\n \n /* ADDR_DIFF_VECs are in the text section and thus can affect the\n    current alignment.  */\n@@ -1386,36 +1402,34 @@ do { \\\n    for the index in the tablejump instruction.\n    If we have pc relative case vectors, we start the case vector shortening\n    with QImode.  */\n-#define CASE_VECTOR_MODE \\\n-  ((optimize && (CASE_VECTOR_PC_RELATIVE || flag_pic)) ? QImode : Pmode)\n+#define CASE_VECTOR_MODE\t\t\t\t\t\t\\\n+  (TARGET_BI_BIH ? SImode\t\t\t\t\t\t\\\n+   : (optimize && (CASE_VECTOR_PC_RELATIVE || flag_pic)) ? QImode : Pmode)\n \n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n    table.\n    Do not define this if the table should contain absolute addresses.  */\n-#define CASE_VECTOR_PC_RELATIVE TARGET_CASE_VECTOR_PC_RELATIVE\n-\n-#define CASE_VECTOR_SHORTEN_MODE(MIN_OFFSET, MAX_OFFSET, BODY) \\\n-  CASE_VECTOR_SHORTEN_MODE_1 \\\n-    (MIN_OFFSET, TARGET_COMPACT_CASESI ? MAX_OFFSET + 6 : MAX_OFFSET, BODY)\n-\n-#define CASE_VECTOR_SHORTEN_MODE_1(MIN_OFFSET, MAX_OFFSET, BODY) \\\n-((MIN_OFFSET) >= 0 && (MAX_OFFSET) <= 255 \\\n- ? (ADDR_DIFF_VEC_FLAGS (BODY).offset_unsigned = 1, QImode) \\\n- : (MIN_OFFSET) >= -128 && (MAX_OFFSET) <= 127 \\\n- ? (ADDR_DIFF_VEC_FLAGS (BODY).offset_unsigned = 0, QImode) \\\n- : (MIN_OFFSET) >= 0 && (MAX_OFFSET) <= 65535 \\\n- ? (ADDR_DIFF_VEC_FLAGS (BODY).offset_unsigned = 1, HImode) \\\n- : (MIN_OFFSET) >= -32768 && (MAX_OFFSET) <= 32767 \\\n- ? (ADDR_DIFF_VEC_FLAGS (BODY).offset_unsigned = 0, HImode) \\\n- : SImode)\n-\n-#define ADDR_VEC_ALIGN(VEC_INSN) \\\n-  (exact_log2 (GET_MODE_SIZE (as_a <scalar_int_mode> \\\n-\t\t\t      (GET_MODE (PATTERN (VEC_INSN))))))\n-#undef ASM_OUTPUT_BEFORE_CASE_LABEL\n-#define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE) \\\n-  ASM_OUTPUT_ALIGN ((FILE), ADDR_VEC_ALIGN (TABLE))\n+#define CASE_VECTOR_PC_RELATIVE\t\t\t\t\t\\\n+  (TARGET_CASE_VECTOR_PC_RELATIVE || TARGET_BI_BIH)\n+\n+#define CASE_VECTOR_SHORTEN_MODE(MIN_OFFSET, MAX_OFFSET, BODY)\t\t\\\n+  (TARGET_BI_BIH ?\t\t\t\t\t\t\\\n+   ((MIN_OFFSET) >= -512 && (MAX_OFFSET) <= 508 ? HImode : SImode)\t\\\n+   : ((MIN_OFFSET) >= 0 && (MAX_OFFSET) <= 255\t\t\t\t\\\n+      ? (ADDR_DIFF_VEC_FLAGS (BODY).offset_unsigned = 1, QImode)\t\\\n+      : (MIN_OFFSET) >= -128 && (MAX_OFFSET) <= 127\t\t\t\\\n+      ? (ADDR_DIFF_VEC_FLAGS (BODY).offset_unsigned = 0, QImode)\t\\\n+      : (MIN_OFFSET) >= 0 && (MAX_OFFSET) <= 65535\t\t\t\\\n+      ? (ADDR_DIFF_VEC_FLAGS (BODY).offset_unsigned = 1, HImode)\t\\\n+      : (MIN_OFFSET) >= -32768 && (MAX_OFFSET) <= 32767\t\t\t\\\n+      ? (ADDR_DIFF_VEC_FLAGS (BODY).offset_unsigned = 0, HImode)\t\\\n+      : SImode))\n+\n+#define ADDR_VEC_ALIGN(VEC_INSN)\t\t\t\t\t\\\n+  (TARGET_BI_BIH ? 0\t\t\t\t\t\t\t\\\n+   : exact_log2 (GET_MODE_SIZE (as_a <scalar_int_mode>\t\t\t\\\n+\t\t\t\t(GET_MODE (PATTERN (VEC_INSN))))))\n \n #define INSN_LENGTH_ALIGNMENT(INSN)\t\t  \\\n   ((JUMP_TABLE_DATA_P (INSN)\t\t\t  \\\n@@ -1638,4 +1652,10 @@ enum\n /* DBNZ support is available for ARCv2 core3 and newer cpus.  */\n #define TARGET_DBNZ (TARGET_V2 && (arc_tune >= ARC_TUNE_CORE_3))\n \n+/* BI/BIH feature macro.  */\n+#define TARGET_BI_BIH (TARGET_BRANCH_INDEX && TARGET_CODE_DENSITY)\n+\n+/* The default option for BI/BIH instructions.  */\n+#define DEFAULT_BRANCH_INDEX 0\n+\n #endif /* GCC_ARC_H */"}, {"sha": "8afc40ff96887152480b081435d7904b9b80008f", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 55, "deletions": 149, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "patch": "@@ -3968,60 +3968,70 @@ archs4x, archs4xd, archs4xd_slow\"\n    (set_attr \"cond\" \"canuse,canuse_limm,canuse,canuse,canuse\")])\n \n ;; Implement a switch statement.\n-\n (define_expand \"casesi\"\n-  [(set (match_dup 5)\n-\t(minus:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t  (match_operand:SI 1 \"nonmemory_operand\" \"\")))\n-   (set (reg:CC CC_REG)\n-\t(compare:CC (match_dup 5)\n-\t\t    (match_operand:SI 2 \"nonmemory_operand\" \"\")))\n-   (set (pc)\n-\t(if_then_else (gtu (reg:CC CC_REG)\n-\t\t\t   (const_int 0))\n-\t\t      (label_ref (match_operand 4 \"\" \"\"))\n-\t\t      (pc)))\n-   (set (match_dup 6)\n-\t(unspec:SI [(match_operand 3 \"\" \"\")\n-\t\t    (match_dup 5) (match_dup 7)] UNSPEC_ARC_CASESI))\n-   (parallel [(set (pc) (match_dup 6)) (use (match_dup 7))])]\n+  [(match_operand:SI 0 \"register_operand\" \"\")\t; Index\n+   (match_operand:SI 1 \"const_int_operand\" \"\")\t; Lower bound\n+   (match_operand:SI 2 \"const_int_operand\" \"\")\t; Total range\n+   (match_operand:SI 3 \"\" \"\")\t\t; Table label\n+   (match_operand:SI 4 \"\" \"\")]\t\t; Out of range label\n   \"\"\n-  \"\n {\n-  rtx x;\n-\n-  operands[5] = gen_reg_rtx (SImode);\n-  operands[6] = gen_reg_rtx (SImode);\n-  operands[7] = operands[3];\n-  emit_insn (gen_subsi3 (operands[5], operands[0], operands[1]));\n-  emit_insn (gen_cmpsi_cc_insn_mixed (operands[5], operands[2]));\n-  x = gen_rtx_GTU (VOIDmode, gen_rtx_REG (CCmode, CC_REG), const0_rtx);\n-  x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n-\t\t\t    gen_rtx_LABEL_REF (VOIDmode, operands[4]), pc_rtx);\n-  emit_jump_insn (gen_rtx_SET (pc_rtx, x));\n-  if (TARGET_COMPACT_CASESI)\n+  if (operands[1] != const0_rtx)\n     {\n-      emit_jump_insn (gen_casesi_compact_jump (operands[5], operands[7]));\n+      rtx reg = gen_reg_rtx (SImode);\n+      emit_insn (gen_subsi3 (reg, operands[0], operands[1]));\n+      operands[0] = reg;\n     }\n+  emit_jump_insn (gen_cbranchsi4 (gen_rtx_GTU (SImode, operands[0],\n+\t\t\t\t\t       operands[2]),\n+\t\t\t\t  operands[0], operands[2], operands[4]));\n+  if (TARGET_BI_BIH)\n+    emit_jump_insn (gen_casesi_dispatch (operands[0], operands[3]));\n   else\n     {\n+      rtx reg = gen_reg_rtx (SImode);\n+      rtx lbl = operands[3];\n       operands[3] = gen_rtx_LABEL_REF (VOIDmode, operands[3]);\n-      if (flag_pic || !cse_not_expected)\n+      if (flag_pic)\n \toperands[3] = force_reg (Pmode, operands[3]);\n-      emit_insn (gen_casesi_load (operands[6],\n-\t\t\t\t  operands[3], operands[5], operands[7]));\n+      emit_insn (gen_casesi_load (reg,\n+\t\t\t\t  operands[3], operands[0], lbl));\n       if (CASE_VECTOR_PC_RELATIVE || flag_pic)\n-\temit_insn (gen_addsi3 (operands[6], operands[6], operands[3]));\n-      emit_jump_insn (gen_casesi_jump (operands[6], operands[7]));\n+\temit_insn (gen_addsi3 (reg, reg, operands[3]));\n+      emit_jump_insn (gen_casesi_jump (reg, lbl));\n     }\n   DONE;\n-}\")\n+})\n+\n+(define_insn \"casesi_dispatch\"\n+  [(set (pc)\n+\t(unspec:SI [(match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t    (label_ref (match_operand 1 \"\" \"\"))]\n+\t\t   UNSPEC_ARC_CASESI))]\n+  \"TARGET_BI_BIH\"\n+{\n+  rtx diff_vec = PATTERN (next_nonnote_insn (as_a<rtx_insn *> (operands[1])));\n+  gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n+  switch (GET_MODE (diff_vec))\n+    {\n+    case E_SImode:\n+      return \\\"bi\\\\t[%0]\\\";\n+    case E_HImode:\n+    case E_QImode:\n+      return \\\"bih\\\\t[%0]\\\";\n+    default: gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"type\" \"brcc_no_delay_slot\")\n+   (set_attr \"iscompact\" \"false\")\n+   (set_attr \"length\" \"4\")])\n \n (define_insn \"casesi_load\"\n-  [(set (match_operand:SI 0 \"register_operand\"             \"=Rcq,r,r\")\n-\t(unspec:SI [(match_operand:SI 1 \"nonmemory_operand\" \"Rcq,c,Cal\")\n-\t\t    (match_operand:SI 2 \"register_operand\"  \"Rcq,c,c\")\n-\t\t    (label_ref (match_operand 3 \"\" \"\"))] UNSPEC_ARC_CASESI))]\n+  [(set (match_operand:SI 0 \"register_operand\"             \"=q,r,r\")\n+\t(mem:SI (unspec:SI [(match_operand:SI 1 \"nonmemory_operand\" \"q,r,Cal\")\n+\t\t\t    (match_operand:SI 2 \"register_operand\"  \"q,r,r\")]\n+\t\t\t   UNSPEC_ARC_CASESI)))\n+   (use (label_ref (match_operand 3 \"\" \"\")))]\n   \"\"\n   \"*\n {\n@@ -4037,15 +4047,15 @@ archs4x, archs4xd, archs4xd_slow\"\n   switch (GET_MODE (diff_vec))\n     {\n     case E_SImode:\n-      return \\\"ld.as %0,[%1,%2]%&\\\";\n+      return \\\"ld.as\\\\t%0,[%1,%2]%&\\\";\n     case E_HImode:\n       if (ADDR_DIFF_VEC_FLAGS (diff_vec).offset_unsigned)\n-\treturn \\\"ld%_.as %0,[%1,%2]\\\";\n-      return \\\"ld%_.x.as %0,[%1,%2]\\\";\n+\treturn \\\"ld%_.as\\\\t%0,[%1,%2]\\\";\n+      return \\\"ld%_.x.as\\\\t%0,[%1,%2]\\\";\n     case E_QImode:\n       if (ADDR_DIFF_VEC_FLAGS (diff_vec).offset_unsigned)\n-\treturn \\\"ldb%? %0,[%1,%2]%&\\\";\n-      return \\\"ldb.x %0,[%1,%2]\\\";\n+\treturn \\\"ldb%?\\\\t%0,[%1,%2]%&\\\";\n+      return \\\"ldb.x\\\\t%0,[%1,%2]\\\";\n     default:\n       gcc_unreachable ();\n     }\n@@ -4085,110 +4095,6 @@ archs4x, archs4xd, archs4xd_slow\"\n    (set_attr \"iscompact\" \"false,maybe,false\")\n    (set_attr \"cond\" \"canuse\")])\n \n-(define_insn \"casesi_compact_jump\"\n-  [(set (pc)\n-\t(unspec:SI [(match_operand:SI 0 \"register_operand\" \"c,q\")]\n-\t\t   UNSPEC_ARC_CASESI))\n-   (use (label_ref (match_operand 1 \"\" \"\")))\n-   (clobber (match_scratch:SI 2 \"=q,0\"))]\n-  \"TARGET_COMPACT_CASESI\"\n-  \"*\n-{\n-  rtx diff_vec = PATTERN (next_nonnote_insn (as_a<rtx_insn *> (operands[1])));\n-  int unalign = arc_get_unalign ();\n-  rtx xop[3];\n-  const char *s;\n-\n-  xop[0] = operands[0];\n-  xop[2] = operands[2];\n-  gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n-\n-  switch (GET_MODE (diff_vec))\n-    {\n-    case E_SImode:\n-      /* Max length can be 12 in this case, but this is OK because\n-\t 2 of these are for alignment, and are anticipated in the length\n-\t of the ADDR_DIFF_VEC.  */\n-      if (unalign && !satisfies_constraint_Rcq (xop[0]))\n-\ts = \\\"add2 %2,pcl,%0\\n\\tld_s %2,[%2,12]\\\";\n-      else if (unalign)\n-\ts = \\\"add_s %2,%0,2\\n\\tld.as %2,[pcl,%2]\\\";\n-      else\n-\ts = \\\"add %2,%0,2\\n\\tld.as %2,[pcl,%2]\\\";\n-      arc_clear_unalign ();\n-      break;\n-    case E_HImode:\n-      if (ADDR_DIFF_VEC_FLAGS (diff_vec).offset_unsigned)\n-\t{\n-\t  if (satisfies_constraint_Rcq (xop[0]))\n-\t    {\n-\t      s = \\\"add_s %2,%0,%1\\n\\tld%_.as %2,[pcl,%2]\\\";\n-\t      xop[1] = GEN_INT ((10 - unalign) / 2U);\n-\t    }\n-\t  else\n-\t    {\n-\t      s = \\\"add1 %2,pcl,%0\\n\\tld%__s %2,[%2,%1]\\\";\n-\t      xop[1] = GEN_INT (10 + unalign);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  if (satisfies_constraint_Rcq (xop[0]))\n-\t    {\n-\t      s = \\\"add_s %2,%0,%1\\n\\tld%_.x.as %2,[pcl,%2]\\\";\n-\t      xop[1] = GEN_INT ((10 - unalign) / 2U);\n-\t    }\n-\t  else\n-\t    {\n-\t      s = \\\"add1 %2,pcl,%0\\n\\tld%__s.x %2,[%2,%1]\\\";\n-\t      xop[1] = GEN_INT (10 + unalign);\n-\t    }\n-\t}\n-      arc_toggle_unalign ();\n-      break;\n-    case E_QImode:\n-      if (ADDR_DIFF_VEC_FLAGS (diff_vec).offset_unsigned)\n-\t{\n-\t  if ((rtx_equal_p (xop[2], xop[0])\n-\t       || find_reg_note (insn, REG_DEAD, xop[0]))\n-\t      && satisfies_constraint_Rcq (xop[0]))\n-\t    {\n-\t      s = \\\"add_s %0,%0,pcl\\n\\tldb_s %2,[%0,%1]\\\";\n-\t      xop[1] = GEN_INT (8 + unalign);\n-\t    }\n-\t  else\n-\t    {\n-\t      s = \\\"add %2,%0,pcl\\n\\tldb_s %2,[%2,%1]\\\";\n-\t      xop[1] = GEN_INT (10 + unalign);\n-\t      arc_toggle_unalign ();\n-\t    }\n-\t}\n-      else if ((rtx_equal_p (xop[0], xop[2])\n-\t\t|| find_reg_note (insn, REG_DEAD, xop[0]))\n-\t       && satisfies_constraint_Rcq (xop[0]))\n-\t{\n-\t  s = \\\"add_s %0,%0,%1\\n\\tldb.x %2,[pcl,%0]\\\";\n-\t  xop[1] = GEN_INT (10 - unalign);\n-\t  arc_toggle_unalign ();\n-\t}\n-      else\n-\t{\n-\t  /* ??? Length is 12.  */\n-\t  s = \\\"add %2,%0,%1\\n\\tldb.x %2,[pcl,%2]\\\";\n-\t  xop[1] = GEN_INT (8 + unalign);\n-\t}\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-  output_asm_insn (s, xop);\n-  return \\\"add_s %2,%2,pcl\\n\\tj_s%* [%2]\\\";\n-}\"\n-  [(set_attr \"length\" \"10\")\n-   (set_attr \"type\" \"jump\")\n-   (set_attr \"iscompact\" \"true\")\n-   (set_attr \"cond\" \"nocond\")])\n-\n (define_expand \"call\"\n   ;; operands[1] is stack_size_rtx\n   ;; operands[2] is next_arg_register"}, {"sha": "ad72d0414c95fc553bfbfd79d36306becdb27286", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "patch": "@@ -328,7 +328,7 @@ Target Var(TARGET_CASE_VECTOR_PC_RELATIVE)\n Use pc-relative switch case tables - this enables case table shortening.\n \n mcompact-casesi\n-Target Var(TARGET_COMPACT_CASESI)\n+Target Warn(%qs is deprecated)\n Enable compact casesi pattern.\n \n mq-class\n@@ -531,3 +531,7 @@ Enum(arc_lpc) String(32) Value(32)\n mrf16\n Target Report Mask(RF16)\n Enable 16-entry register file.\n+\n+mbranch-index\n+Target Report Var(TARGET_BRANCH_INDEX) Init(DEFAULT_BRANCH_INDEX)\n+Enable use of BI/BIH instructions when available."}, {"sha": "284594df010ba2bb0747da4e44159e77aac3b05b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "patch": "@@ -651,7 +651,7 @@ Objective-C and Objective-C++ Dialects}.\n -mmixed-code  -mq-class  -mRcq  -mRcw  -msize-level=@var{level} @gol\n -mtune=@var{cpu}  -mmultcost=@var{num} @gol\n -munalign-prob-threshold=@var{probability}  -mmpy-option=@var{multo} @gol\n--mdiv-rem  -mcode-density  -mll64  -mfpu=@var{fpu} -mrf16}\n+-mdiv-rem  -mcode-density  -mll64  -mfpu=@var{fpu} -mrf16  -mbranch-index}\n \n @emph{ARM Options}\n @gccoptlist{-mapcs-frame  -mno-apcs-frame @gol\n@@ -15839,6 +15839,11 @@ This option instructs the compiler to generate code for a 16-entry\n register file.  This option defines the @code{__ARC_RF16__}\n preprocessor macro.\n \n+@item -mbranch-index\n+@opindex mbranch-index\n+Enable use of @code{bi} or @code{bih} instructions to implement jump\n+tables.\n+\n @end table\n \n The following options are passed through to the assembler, and also\n@@ -16010,7 +16015,7 @@ This is the default for @option{-Os}.\n @item -mcompact-casesi\n @opindex mcompact-casesi\n Enable compact @code{casesi} pattern.  This is the default for @option{-Os},\n-and only available for ARCv1 cores.\n+and only available for ARCv1 cores.  This option is deprecated.\n \n @item -mno-cond-exec\n @opindex mno-cond-exec"}, {"sha": "f2a4a8dad1145aa658f96725d6e81acc6739d9b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "patch": "@@ -1,3 +1,7 @@\n+2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/jumptable.c: New test.\n+\n 2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/tls-gd.c: New file."}, {"sha": "fbc58e331498f685bbd0c0bd6cf3a1fdf6c7902d", "filename": "gcc/testsuite/gcc.target/arc/jumptable.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjumptable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjumptable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fjumptable.c?ref=aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { arc700 || arc6xx } } */\n+/* { dg-options \"-O2 -mbranch-index -mcode-density\" { target { arcem || archs } } } */\n+\n+extern void max( int,int);\n+\n+int switchCase(int value, int b)\n+{\n+  switch(value){\n+  case 100:\n+    value = b * value;\n+    break;\n+  case 101:\n+    value = b << value;\n+    break;\n+  case 102:\n+    value = b / value;\n+    break;\n+  case 103:\n+    value = b >> value;\n+    break;\n+  case 104:\n+    value = b + value;\n+    break;\n+  case 105:\n+    value = b - value;\n+    break;\n+  }\n+  max(value, b);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bih\" 1 } } */\n+/* { dg-final { scan-assembler-times \"b_s\" 8 } } */"}]}