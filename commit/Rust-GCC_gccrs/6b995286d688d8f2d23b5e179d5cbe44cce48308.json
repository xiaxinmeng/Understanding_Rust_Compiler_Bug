{"sha": "6b995286d688d8f2d23b5e179d5cbe44cce48308", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5OTUyODZkNjg4ZDhmMmQyM2I1ZTE3OWQ1Y2JlNDRjY2U0ODMwOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-14T16:04:32Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-14T16:04:32Z"}, "message": "convex-protos.h: New file.\n\n\t* convex-protos.h: New file.\n\n\t* convex.c: Include tm_p.h.  Add static prototypes.  Fix compile\n\ttime warnings.\n\n\t* convex.h: Move prototypes to convex-protos.h.  Fix compile time\n\twarnings.\n\nFrom-SVN: r31415", "tree": {"sha": "7c1decd8188ee45df99065ae16b5bb385263fdaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c1decd8188ee45df99065ae16b5bb385263fdaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b995286d688d8f2d23b5e179d5cbe44cce48308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b995286d688d8f2d23b5e179d5cbe44cce48308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b995286d688d8f2d23b5e179d5cbe44cce48308", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b995286d688d8f2d23b5e179d5cbe44cce48308/comments", "author": null, "committer": null, "parents": [{"sha": "ab526045918871bdd1f351b9e7ce98946a8403d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab526045918871bdd1f351b9e7ce98946a8403d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab526045918871bdd1f351b9e7ce98946a8403d9"}], "stats": {"total": 125, "additions": 94, "deletions": 31}, "files": [{"sha": "d1a86ab5a970ac21a078a3dd5f714e1a671754b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b995286d688d8f2d23b5e179d5cbe44cce48308/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b995286d688d8f2d23b5e179d5cbe44cce48308/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b995286d688d8f2d23b5e179d5cbe44cce48308", "patch": "@@ -1,3 +1,13 @@\n+2000-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* convex-protos.h: New file.\n+\n+\t* convex.c: Include tm_p.h.  Add static prototypes.  Fix compile\n+\ttime warnings.\n+\t\n+\t* convex.h: Move prototypes to convex-protos.h.  Fix compile time\n+\twarnings.\n+\n 2000-01-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* elxsi-protos.h: New file."}, {"sha": "9ec9680309bf4f7409aef91ed7ff1bcf29f2b6fa", "filename": "gcc/config/convex/convex-protos.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b995286d688d8f2d23b5e179d5cbe44cce48308/gcc%2Fconfig%2Fconvex%2Fconvex-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b995286d688d8f2d23b5e179d5cbe44cce48308/gcc%2Fconfig%2Fconvex%2Fconvex-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex-protos.h?ref=6b995286d688d8f2d23b5e179d5cbe44cce48308", "patch": "@@ -0,0 +1,50 @@\n+/* Definitions of target machine for GNU compiler.  Convex version.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+extern int const_double_low_int PARAMS ((rtx));\n+extern int const_double_high_int PARAMS ((rtx));\n+extern const char *output_cmp PARAMS ((rtx, rtx, int));\n+extern const char *output_condjump PARAMS ((rtx, const char *, int));\n+extern const char *output_call PARAMS ((rtx, rtx *));\n+extern rtx simplify_for_convex PARAMS ((rtx));\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern void print_operand_address PARAMS ((FILE *, rtx));\n+extern void expand_movstr PARAMS ((rtx *));\n+\n+extern int nonmemory_operand PARAMS ((rtx, enum machine_mode));\n+extern int nonmemory_cmpsf_operand PARAMS ((rtx, enum machine_mode));\n+#endif /* RTX_CODE */\n+\n+#ifdef TREE_CODE\n+extern void asm_declare_function_name PARAMS ((FILE *, const char *, tree));\n+#endif /* TREE_CODE */\n+\n+#ifdef REAL_VALUE_TYPE\n+extern int check_float_value PARAMS ((enum machine_mode, REAL_VALUE_TYPE *,\n+\t\t\t\t      int));\n+extern void outfloat PARAMS ((FILE *, REAL_VALUE_TYPE, const char *,\n+\t\t\t      const char *, const char *));\n+#endif /* REAL_VALUE_TYPE */\n+\n+extern void psw_disable_float PARAMS ((void));\n+extern void init_convex PARAMS ((void));\n+extern void replace_arg_pushes PARAMS ((void));\n+extern void emit_ap_optimizations PARAMS ((void));"}, {"sha": "69e1339367bed70ec8733ea14eca9390b1f403ce", "filename": "gcc/config/convex/convex.c", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b995286d688d8f2d23b5e179d5cbe44cce48308/gcc%2Fconfig%2Fconvex%2Fconvex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b995286d688d8f2d23b5e179d5cbe44cce48308/gcc%2Fconfig%2Fconvex%2Fconvex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.c?ref=6b995286d688d8f2d23b5e179d5cbe44cce48308", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Convex.\n-   Copyright (C) 1988, 93, 94, 97, 98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 93, 94, 97-99, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"function.h\"\n #include \"expr.h\"\n+#include \"tm_p.h\"\n \n /* Tables used in convex.h */\n \n@@ -55,13 +56,16 @@ static char cmp_modech;\n \n /* Forwards */\n \n+#if 0\n static rtx frame_argblock;\n static int frame_argblock_size;\n static rtx convert_arg_pushes ();\n-static void expand_movstr_call ();\n+#endif\n+static void expand_movstr_call PARAMS ((rtx *));\n \n /* Here from OVERRIDE_OPTIONS at startup.  Initialize constant tables. */\n \n+void\n init_convex ()\n {\n   int regno;\n@@ -101,6 +105,7 @@ init_convex ()\n   psw_disable_float ();\n }\n \n+void\n psw_disable_float ()\n {\n #if __convex__ && __GNUC__\n@@ -117,10 +122,10 @@ psw_disable_float ()\n /* Here to output code for a compare insn.  Output nothing, just\n    record the operands and their mode. */\n \n-char *\n+const char *\n output_cmp (operand0, operand1, modech)\n      rtx operand0, operand1;\n-     char modech;\n+     int modech;\n {\n   cmp_operand0 = operand0;\n   cmp_operand1 = operand1;\n@@ -137,11 +142,11 @@ output_cmp (operand0, operand1, modech)\n        (beq L5)\n  */\n \n-char *\n+const char *\n output_condjump (label, cond, jbr_sense)\n      rtx label;\n-     char *cond;\n-     char jbr_sense;\n+     const char *cond;\n+     int jbr_sense;\n {\n   rtx operands[3];\n   char cmp_op[4];\n@@ -251,6 +256,8 @@ simplify_for_convex (x)\n \n     case CONST:\n       return simplify_for_convex (XEXP (x, 0));\n+    default:\n+      break;\n     }\n \n   return x;\n@@ -458,13 +465,13 @@ check_float_value (mode, dp, overflow)\n void\n asm_declare_function_name (file, name, decl)\n     FILE *file;\n-    char *name;\n+    const char *name;\n     tree decl;\n {\n-  tree parms;\n   int nargs = list_length (DECL_ARGUMENTS (decl));\n \n-  char *p, c;\n+  const char *p;\n+  char c;\n   extern char *version_string;\n   static char vers[4];\n   int i;\n@@ -498,10 +505,11 @@ asm_declare_function_name (file, name, decl)\n     %z prints a CONST_INT shift count as a multiply operand -- viz. 1 << n.\n  */\n \n+void\n print_operand (file, x, code)\n      FILE *file;\n      rtx x;\n-     char code;\n+     int code;\n {\n   long u[2];\n   REAL_VALUE_TYPE d;\n@@ -531,9 +539,9 @@ print_operand (file, x, code)\n \t}\n #endif\n \tif (code == 'u')\n-\t  fprintf (file, \"#%#x\", u[0]);\n+\t  fprintf (file, \"#%#lx\", u[0]);\n \telse if (code == 'v')\n-\t  fprintf (file, \"#%#x\", u[1]);\n+\t  fprintf (file, \"#%#lx\", u[1]);\n \telse\n \t  outfloat (file, d, \"%.17e\", \"#\", \"\");\n \tbreak;\n@@ -565,6 +573,7 @@ print_operand (file, x, code)\n \n /* Print a memory operand whose address is X, on file FILE. */\n \n+void\n print_operand_address (file, addr)\n      FILE *file;\n      rtx addr;\n@@ -612,10 +621,11 @@ print_operand_address (file, addr)\n /* Output a float to FILE, value VALUE, format FMT, preceded by PFX\n    and followed by SFX. */\n \n+void\n outfloat (file, value, fmt, pfx, sfx)\n      FILE *file;\n      REAL_VALUE_TYPE value;\n-     char *fmt, *pfx, *sfx;\n+     const char *fmt, *pfx, *sfx;\n {\n   char buf[64];\n   fputs (pfx, file);\n@@ -631,6 +641,7 @@ outfloat (file, value, fmt, pfx, sfx)\n    and the calling sequence does not require the arg block to be at the\n    top of the stack.  */\n \n+void\n replace_arg_pushes ()\n {\n   /* Doesn't work yet. */\n@@ -644,9 +655,9 @@ replace_arg_pushes ()\n      4 - address of the arg list.  \n  */\n \n-char *\n+const char *\n output_call (insn, operands)\n-     rtx insn, *operands;\n+     rtx insn ATTRIBUTE_UNUSED, *operands;\n {\n   if (operands[4] == stack_pointer_rtx)\n     output_asm_insn (\"mov sp,ap\", operands);\n@@ -669,6 +680,7 @@ output_call (insn, operands)\n \n /* Here after reloading, before the second scheduling pass. */\n \n+void\n emit_ap_optimizations ()\n {\n   /* Removed for now. */"}, {"sha": "86dc07ea1ab1fa6a30d3022687ff15ce7c75490b", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b995286d688d8f2d23b5e179d5cbe44cce48308/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b995286d688d8f2d23b5e179d5cbe44cce48308/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=6b995286d688d8f2d23b5e179d5cbe44cce48308", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Convex version.\n-   Copyright (C) 1988, 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994, 1995, 1996, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -628,7 +628,7 @@ enum reg_class {\n    of length N_REG_CLASSES.  */\n \n #define REG_CLASS_CONTENTS \\\n-  { 0, 0x00ff, 0xfe00, 0x0100, 0xff00, 0xfeff, 0xffff }\n+  { {0}, {0x00ff}, {0xfe00}, {0x0100}, {0xff00}, {0xfeff}, {0xffff} }\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n@@ -1107,7 +1107,7 @@ enum reg_class {\n \n #define RTX_COSTS(RTX,CODE,OUTER_CODE) \\\n   case PLUS:\t\t\t\t\t\t\t\t\\\n-    if (regno_pointer_flag != 0\t\t\t\t\t\t\\\n+    if (cfun->emit->regno_pointer_flag != 0\t\t\t\t\\\n \t&& GET_CODE (XEXP (RTX, 0)) == REG\t\t\t\t\\\n \t&& REGNO_POINTER_FLAG (REGNO (XEXP (RTX, 0)))\t\t\t\\\n \t&& GET_CODE (XEXP (RTX, 1)) == CONST_INT)\t\t\t\\\n@@ -1172,11 +1172,10 @@ enum reg_class {\n \n /* But must prevent real.c from constructing Vax dfloats */\n #define REAL_VALUE_ATOF(X,S) atof (X)\n-extern double atof();\n \n /* Check a `double' value for validity for a particular machine mode.  */\n #define CHECK_FLOAT_VALUE(MODE, D, OVERFLOW) \\\n-   OVERFLOW = check_float_value (MODE, &D, OVERFLOW)\n+   (OVERFLOW = check_float_value (MODE, &D, OVERFLOW))\n \f\n /* Tell final.c how to eliminate redundant test instructions.  */\n \n@@ -1235,13 +1234,13 @@ extern double atof();\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */\n \n-#define ASM_OUTPUT_ALIGN(FILE,LOG)  \\\n+#define ASM_OUTPUT_ALIGN(FILE,LOG) do { \\\n   if (current_section_is_text && (LOG) > 1)\t\t\t\t\\\n     fprintf (FILE, \".text %d\\n\", LOG);\t\t\t\t\t\\\n   else if (current_section_is_text)\t\t\t\t\t\\\n     fprintf (FILE, \".text\\n.align %d\\n\", 1 << (LOG));\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \".align %d\\n\", 1 << (LOG))\n+    fprintf (FILE, \".align %d\\n\", 1 << (LOG)); } while (0)\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n@@ -1493,11 +1492,3 @@ extern enum reg_class reg_class_from_letter[];\n extern char regno_ok_for_index_p_base[];\n #define regno_ok_for_index_p (regno_ok_for_index_p_base + 1)\n \n-extern int const_double_low_int ();\n-extern int const_double_high_int ();\n-extern char *output_cmp ();\n-extern char *output_condjump ();\n-extern char *output_call ();\n-extern void gen_ap_for_call ();\n-extern int check_float_value ();\n-extern void asm_declare_function_name ();"}]}