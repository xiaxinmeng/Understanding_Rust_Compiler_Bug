{"sha": "c3843cea61f838af76b6a77ea5b38f9026c9bb8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM4NDNjZWE2MWY4MzhhZjc2YjZhNzdlYTViMzhmOTAyNmM5YmI4Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-01-04T17:26:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-01-04T17:26:12Z"}, "message": "tradcpp.c (deps_file, [...]): New variables.\n\n\t* tradcpp.c (deps_file, print_deps_missing_files): New variables.\n\t(main): Handle -MG, -MD, -MMD.  Bail out if -MG is given without -M\n\tor -MM.\n\t(do_include): Handle missing headers like cpp0.\n\t* cppfiles.c (_cpp_execute_include): Don't prefix absolute header\n\tpaths with first include pathname.  Don't strcat to uninitialized\n\tstring.\n\nFrom-SVN: r38683", "tree": {"sha": "a5ea1c92dfd04317ba19d5e37d7d49c0b97ac469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5ea1c92dfd04317ba19d5e37d7d49c0b97ac469"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3843cea61f838af76b6a77ea5b38f9026c9bb8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3843cea61f838af76b6a77ea5b38f9026c9bb8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3843cea61f838af76b6a77ea5b38f9026c9bb8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3843cea61f838af76b6a77ea5b38f9026c9bb8f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4d578da666c948839a56e141071b0ee9c50f555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4d578da666c948839a56e141071b0ee9c50f555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4d578da666c948839a56e141071b0ee9c50f555"}], "stats": {"total": 138, "additions": 103, "deletions": 35}, "files": [{"sha": "bda576330d50837de2a35e05ba09d45f9d81356a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3843cea61f838af76b6a77ea5b38f9026c9bb8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3843cea61f838af76b6a77ea5b38f9026c9bb8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3843cea61f838af76b6a77ea5b38f9026c9bb8f", "patch": "@@ -1,3 +1,13 @@\n+2001-01-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tradcpp.c (deps_file, print_deps_missing_files): New variables.\n+\t(main): Handle -MG, -MD, -MMD.  Bail out if -MG is given without -M\n+\tor -MM.\n+\t(do_include): Handle missing headers like cpp0.\n+\t* cppfiles.c (_cpp_execute_include): Don't prefix absolute header\n+\tpaths with first include pathname.  Don't strcat to uninitialized\n+\tstring.\n+\n 2001-01-04  Bernd Schmidt  <bernds@redhat.com>\n \n \t* regrename.c (regrename_optimize): Don't rename from frame pointer"}, {"sha": "b0678d7def896f191afcd60c1c006a137a54100b", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3843cea61f838af76b6a77ea5b38f9026c9bb8f/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3843cea61f838af76b6a77ea5b38f9026c9bb8f/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=c3843cea61f838af76b6a77ea5b38f9026c9bb8f", "patch": "@@ -648,27 +648,28 @@ _cpp_execute_include (pfile, header, no_reinclude, include_next)\n   if (CPP_OPTION (pfile, print_deps_missing_files)\n       && PRINT_THIS_DEP (pfile, angle_brackets))\n     {\n-      if (!angle_brackets)\n+      if (!angle_brackets || *fname == '/')\n \tdeps_add_dep (pfile->deps, fname);\n       else\n \t{\n \t  char *p;\n \t  struct file_name_list *ptr;\n+\t  int len = strlen (ptr->name);\n+\n \t  /* If requested as a system header, assume it belongs in\n \t     the first system header directory. */\n \t  if (CPP_OPTION (pfile, bracket_include))\n \t    ptr = CPP_OPTION (pfile, bracket_include);\n \t  else\n \t    ptr = CPP_OPTION (pfile, quote_include);\n \n-\t  p = (char *) alloca (strlen (ptr->name)\n-\t\t\t       + strlen (fname) + 2);\n-\t  if (*ptr->name != '\\0')\n+\t  p = (char *) alloca (len + strlen (fname) + 2);\n+\t  if (len)\n \t    {\n-\t      strcpy (p, ptr->name);\n-\t      strcat (p, \"/\");\n+\t      memcpy (p, ptr->name, len);\n+\t      p[len++] = '/';\n \t    }\n-\t  strcat (p, fname);\n+\t  strcpy (p + len, fname);\n \t  _cpp_simplify_pathname (p);\n \t  deps_add_dep (pfile->deps, p);\n \t}"}, {"sha": "ff43902a184b370f6c02d6beb0c7c12e52be1cb7", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 85, "deletions": 28, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3843cea61f838af76b6a77ea5b38f9026c9bb8f/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3843cea61f838af76b6a77ea5b38f9026c9bb8f/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=c3843cea61f838af76b6a77ea5b38f9026c9bb8f", "patch": "@@ -46,6 +46,16 @@ int put_out_comments = 0;\n \n int print_deps = 0;\n \n+/* File name which deps are being written to.  This is 0 if deps are\n+   being written to stdout.  */\n+\n+const char *deps_file = 0;\n+\n+/* Nonzero if missing .h files in -M output are assumed to be\n+   generated files and not errors.  */\n+\n+int print_deps_missing_files = 0;\n+       \n /* Nonzero means don't output line number information.  */\n \n int no_line_commands;\n@@ -608,11 +618,32 @@ main (argc, argv)\n \tbreak;\n \n       case 'M':\n-\tif (!strcmp (argv[i], \"-M\"))\n-\t  print_deps = 2;\n-\telse if (!strcmp (argv[i], \"-MM\"))\n-\t  print_deps = 1;\n-\tinhibit_output = 1;\n+\t{\n+\t  char *p = NULL;\n+\n+\t  if (!strncmp (argv[i], \"-MD\", 3)) {\n+\t    p = argv[i] + 3;\n+\t    print_deps = 2;\n+\t  } else if (!strncmp (argv[i], \"-MMD\", 4)) {\n+\t    p = argv[i] + 4;\n+\t    print_deps = 1;\n+\t  } else if (!strcmp (argv[i], \"-M\")) {\n+\t    print_deps = 2;\n+\t    inhibit_output = 1;\n+\t  } else if (!strcmp (argv[i], \"-MM\")) {\n+\t    print_deps = 1;\n+\t    inhibit_output = 1;\n+\t  } else if (!strcmp (argv[i], \"-MG\"))\n+\t    print_deps_missing_files = 1;\n+\t  if (p) {\n+\t    if (*p)\n+\t      deps_file = p;\n+\t    else if (i + 1 == argc)\n+\t      fatal (\"Filename missing after %s option\", argv[i]);\n+\t    else\n+\t      deps_file = argv[++i];\n+\t  }\n+\t}\n \tbreak;\n \n       case 'd':\n@@ -716,6 +747,9 @@ main (argc, argv)\n     }\n   }\n \n+  if (print_deps_missing_files && (!print_deps || !inhibit_output))\n+    fatal (\"-MG must be specified with one of -M or -MM\");\n+\n   if (user_label_prefix == 0)\n     user_label_prefix = USER_LABEL_PREFIX;\n \n@@ -809,7 +843,6 @@ main (argc, argv)\n     {\n       char *spec = getenv (\"DEPENDENCIES_OUTPUT\");\n       char *s;\n-      char *output_file;\n \n       if (spec == 0)\n \t{\n@@ -823,28 +856,33 @@ main (argc, argv)\n       s = strchr (spec, ' ');\n       if (s)\n \t{\n+\t  char *out_file;\n+\n \t  deps_target = s + 1;\n-\t  output_file = (char *) xmalloc (s - spec + 1);\n-\t  memcpy (output_file, spec, s - spec);\n-\t  output_file[s - spec] = 0;\n+\t  out_file = (char *) xmalloc (s - spec + 1);\n+\t  memcpy (out_file, spec, s - spec);\n+\t  out_file[s - spec] = 0;\n+\t  deps_file = out_file;\n \t}\n       else\n \t{\n \t  deps_target = 0;\n-\t  output_file = spec;\n+\t  deps_file = spec;\n \t}\n-      \n-      deps_stream = fopen (output_file, \"a\");\n-      if (deps_stream == 0)\n-\tpfatal_with_name (output_file);\n     }\n-  /* If the -M option was used, output the deps to standard output.  */\n-  else if (print_deps)\n-    deps_stream = stdout;\n \n   /* For -M, print the expected object file name\n      as the target of this Make-rule.  */\n   if (print_deps) {\n+\n+    if (deps_file) {\n+      deps_stream = fopen (deps_file, \"a\");\n+      if (deps_stream == 0)\n+\tpfatal_with_name (deps_file);\n+    } else\n+      /* If the -M option was used, output the deps to standard output.  */\n+      deps_stream = stdout;\n+\n     deps_allocated_size = 200;\n     deps_buffer = (char *) xmalloc (deps_allocated_size);\n     deps_buffer[0] = 0;\n@@ -2334,19 +2372,38 @@ do_include (buf, limit, op)\n   if (f < 0) {\n     strncpy (fname, (const char *)fbeg, flen);\n     fname[flen] = 0;\n-    error_from_errno (fname);\n+    if (print_deps_missing_files\n+\t&& print_deps > (system_header_p || (system_include_depth > 0))) {\n \n-    /* For -M, add this file to the dependencies.  */\n-    if (print_deps > (system_header_p || (system_include_depth > 0))) {\n-      if (system_header_p)\n-\twarning (\"nonexistent file <%.*s> omitted from dependency output\",\n-\t\t flen, fbeg);\n+      /* If requested as a system header, assume it belongs in\n+\t the first system header directory. */\n+      if (first_bracket_include)\n+\tstackp = first_bracket_include;\n       else\n-\t{\n-\t  deps_output ((const char *)fbeg, flen);\n-\t  deps_output (\" \", 0);\n-\t}\n-    }\n+\tstackp = include;\n+\n+      if (!system_header_p || *fbeg == '/' || !stackp->fname)\n+\tdeps_output ((const char *)fbeg, flen);\n+      else {\n+\tchar *p;\n+\tint len = strlen(stackp->fname);\n+\n+\tp = (char *) alloca (len + flen + 2);\n+\tmemcpy (p, stackp->fname, len);\n+\tp[len++] = '/';\n+\tmemcpy (p + len, fbeg, flen);\n+\tlen += flen;\n+\tdeps_output (p, len);\n+      }\n+      deps_output (\" \", 0);\n+\n+    } else if (print_deps\n+\t       && print_deps <= (system_header_p\n+\t\t\t\t || (system_include_depth > 0)))\n+      warning (\"No include path in which to find %.*s\", flen, fbeg);\n+    else\n+      error_from_errno (fname);\n+\n   } else {\n \n     /* Check to see if this include file is a once-only include file."}]}