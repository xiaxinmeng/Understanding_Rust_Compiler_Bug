{"sha": "3a89c57d9eceff3a49b1500a34d0c7fec32be089", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E4OWM1N2Q5ZWNlZmYzYTQ5YjE1MDBhMzRkMGM3ZmVjMzJiZTA4OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-09T10:05:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-09T10:05:15Z"}, "message": "[multiple changes]\n\n2010-09-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Build_Untagged_Equality): Do not set alias of implicit\n\tinequality, it is always rewritten as the negation of the corresponding\n\tequality operation.\n\t* exp_ch8.adb (Expand_N_Subprogram_Renaming): If the subprogram renames\n\tthe predefined equality of an untagged record, create a body at the\n\tpoint of the renaming, to capture the current meaning of equality for\n\tthe type.\n\n2010-09-09  Robert Dewar  <dewar@adacore.com>\n\n\t* sem.adb, sem_warn.adb: Minor reformatting.\n\nFrom-SVN: r164064", "tree": {"sha": "397af612f836c05f010182011b707abab41f6e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/397af612f836c05f010182011b707abab41f6e35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a89c57d9eceff3a49b1500a34d0c7fec32be089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a89c57d9eceff3a49b1500a34d0c7fec32be089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a89c57d9eceff3a49b1500a34d0c7fec32be089", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a89c57d9eceff3a49b1500a34d0c7fec32be089/comments", "author": null, "committer": null, "parents": [{"sha": "a24008b659b386107044f7ad3fcac3e3a6216ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24008b659b386107044f7ad3fcac3e3a6216ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a24008b659b386107044f7ad3fcac3e3a6216ea5"}], "stats": {"total": 106, "additions": 96, "deletions": 10}, "files": [{"sha": "fe15868da08c64d30d7e25117ef136b6be7b0682", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a89c57d9eceff3a49b1500a34d0c7fec32be089/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a89c57d9eceff3a49b1500a34d0c7fec32be089/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3a89c57d9eceff3a49b1500a34d0c7fec32be089", "patch": "@@ -1,3 +1,17 @@\n+2010-09-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Untagged_Equality): Do not set alias of implicit\n+\tinequality, it is always rewritten as the negation of the corresponding\n+\tequality operation.\n+\t* exp_ch8.adb (Expand_N_Subprogram_Renaming): If the subprogram renames\n+\tthe predefined equality of an untagged record, create a body at the\n+\tpoint of the renaming, to capture the current meaning of equality for\n+\tthe type.\n+\n+2010-09-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem.adb, sem_warn.adb: Minor reformatting.\n+\n 2010-09-09  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb: Improve error message on untagged equality."}, {"sha": "1aec34c013a90490747d3674ec7d41f25710b9db", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a89c57d9eceff3a49b1500a34d0c7fec32be089/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a89c57d9eceff3a49b1500a34d0c7fec32be089/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=3a89c57d9eceff3a49b1500a34d0c7fec32be089", "patch": "@@ -3873,7 +3873,6 @@ package body Exp_Ch3 is\n                        (Op, Is_Abstract_Subprogram (Eq_Op));\n \n                      if Chars (Next_Entity (Op)) = Name_Op_Ne then\n-                        Set_Alias (Next_Entity (Op), NE_Op);\n                         Set_Is_Abstract_Subprogram\n                           (Next_Entity (Op), Is_Abstract_Subprogram (NE_Op));\n                      end if;"}, {"sha": "b81fb425a2879cc77cc94fac09b321071c51aa6b", "filename": "gcc/ada/exp_ch8.adb", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a89c57d9eceff3a49b1500a34d0c7fec32be089/gcc%2Fada%2Fexp_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a89c57d9eceff3a49b1500a34d0c7fec32be089/gcc%2Fada%2Fexp_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch8.adb?ref=3a89c57d9eceff3a49b1500a34d0c7fec32be089", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -25,16 +25,22 @@\n \n with Atree;    use Atree;\n with Einfo;    use Einfo;\n+with Exp_Ch4;  use Exp_Ch4;\n with Exp_Ch6;  use Exp_Ch6;\n with Exp_Dbug; use Exp_Dbug;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n+with Namet;    use Namet;\n+with Nmake;    use Nmake;\n with Nlists;   use Nlists;\n with Opt;      use Opt;\n with Sem;      use Sem;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n+with Snames;   use Snames;\n with Stand;    use Stand;\n+with Tbuild;   use Tbuild;\n \n package body Exp_Ch8 is\n \n@@ -350,6 +356,74 @@ package body Exp_Ch8 is\n       elsif Nkind (Nam) = N_Explicit_Dereference then\n          Force_Evaluation (Prefix (Nam));\n       end if;\n+\n+      --  Check whether this is a renaming of a predefined equality on an\n+      --  untagged record type  (AI05-0123).\n+\n+      if Is_Entity_Name (Nam)\n+        and then Chars (Entity (Nam)) = Name_Op_Eq\n+        and then Scope (Entity (Nam)) = Standard_Standard\n+        and then Ada_Version >= Ada_2012\n+      then\n+         declare\n+            Loc : constant Source_Ptr := Sloc (N);\n+            Id  : constant Entity_Id  := Defining_Entity (N);\n+            Typ : constant Entity_Id  := Etype (First_Formal (Id));\n+\n+            Decl : Node_Id;\n+            Body_Id : constant Entity_Id\n+              := Make_Defining_Identifier (Sloc (N), Chars (Id));\n+\n+         begin\n+            if Is_Record_Type (Typ)\n+              and then not Is_Tagged_Type (Typ)\n+              and then not Is_Frozen (Typ)\n+            then\n+               --  Build body for renamed equality, to capture its current\n+               --  meaning. It may be redefined later, but the renaming is\n+               --  elaborated where it occurs. This is technically known as\n+               --  Squirreling semantics. Renaming is rewritten as a subprogram\n+               --  declaration, and the body is inserted at the end of the\n+               --  current declaration list to prevent premature freezing.\n+\n+               Set_Alias (Id, Empty);\n+               Set_Has_Completion (Id, False);\n+               Rewrite (N,\n+                 Make_Subprogram_Declaration (Sloc (N),\n+                   Specification => Specification (N)));\n+               Set_Has_Delayed_Freeze (Id);\n+\n+               Decl := Make_Subprogram_Body (Loc,\n+                 Specification =>\n+                   Make_Function_Specification (Loc,\n+                     Defining_Unit_Name => Body_Id,\n+                     Parameter_Specifications => Copy_Parameter_List (Id),\n+                     Result_Definition =>\n+                       New_Occurrence_Of (Standard_Boolean, Loc)),\n+                 Declarations => Empty_List,\n+                 Handled_Statement_Sequence => Empty);\n+\n+               Set_Handled_Statement_Sequence (Decl,\n+                 Make_Handled_Sequence_Of_Statements (Loc,\n+                   Statements => New_List (\n+                     Make_Simple_Return_Statement (Loc,\n+                       Expression =>\n+                          Expand_Record_Equality (\n+                            Id,\n+                            Typ => Typ,\n+                            Lhs =>\n+                              Make_Identifier (Loc,\n+                                Chars (First_Formal (Id))),\n+                            Rhs =>\n+                              Make_Identifier (Loc,\n+                                Chars (Next_Formal (First_Formal (Id)))),\n+                            Bodies => Declarations (Decl))))));\n+\n+               Append (Decl, List_Containing (N));\n+               Set_Debug_Info_Needed (Body_Id);\n+            end if;\n+         end;\n+      end if;\n    end Expand_N_Subprogram_Renaming_Declaration;\n \n end Exp_Ch8;"}, {"sha": "2955b1c9d69c452c7bbfc44b663f80acac3ad5d0", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a89c57d9eceff3a49b1500a34d0c7fec32be089/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a89c57d9eceff3a49b1500a34d0c7fec32be089/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=3a89c57d9eceff3a49b1500a34d0c7fec32be089", "patch": "@@ -1452,18 +1452,18 @@ package body Sem is\n          end if;\n \n          --  Do analysis, and then append the compilation unit onto the\n-         --  Comp_Unit_List, if appropriate. This is done after analysis, so\n-         --  if this unit depends on some others, they have already been\n+         --  Comp_Unit_List, if appropriate. This is done after analysis,\n+         --  so if this unit depends on some others, they have already been\n          --  appended. We ignore bodies, except for the main unit itself, and\n-         --   for subprogram bodies that act as specs. We have also to guard\n-         --   against ill-formed subunits that have an improper context.\n+         --  for subprogram bodies that act as specs. We have also to guard\n+         --  against ill-formed subunits that have an improper context.\n \n          Do_Analyze;\n \n          if Present (Comp_Unit)\n            and then Nkind (Unit (Comp_Unit)) in N_Proper_Body\n            and then (Nkind (Unit (Comp_Unit)) /= N_Subprogram_Body\n-             or else not Acts_As_Spec (Comp_Unit))\n+                       or else not Acts_As_Spec (Comp_Unit))\n            and then not In_Extended_Main_Source_Unit (Comp_Unit)\n          then\n             null;"}, {"sha": "95d082693175b97247d598ed30446150747eb677", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a89c57d9eceff3a49b1500a34d0c7fec32be089/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a89c57d9eceff3a49b1500a34d0c7fec32be089/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=3a89c57d9eceff3a49b1500a34d0c7fec32be089", "patch": "@@ -1422,8 +1422,7 @@ package body Sem_Warn is\n                      or else\n                        Referenced_As_Out_Parameter_Check_Spec (E1))\n \n-               --  Labels, and enumeration literals, and exceptions. The\n-               --  warnings are also placed on local packages that cannot be\n+               --  All other entities, including local packages that cannot be\n                --  referenced from elsewhere, including those declared within a\n                --  package body.\n \n@@ -1568,7 +1567,7 @@ package body Sem_Warn is\n                if not Warnings_Off_E1 then\n                   Unreferenced_Entities.Append (E1);\n \n-               --  Force warning on entity\n+                  --  Force warning on entity\n \n                   Set_Referenced (E1, False);\n                end if;"}]}