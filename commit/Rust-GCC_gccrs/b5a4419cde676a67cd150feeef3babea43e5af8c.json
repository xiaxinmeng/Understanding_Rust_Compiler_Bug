{"sha": "b5a4419cde676a67cd150feeef3babea43e5af8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVhNDQxOWNkZTY3NmE2N2NkMTUwZmVlZWYzYmFiZWE0M2U1YWY4Yw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-02-27T14:32:02Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-02-27T14:32:02Z"}, "message": "re PR fortran/33387 (Fortran front-end should translate intrinsics by calling C99 function instead of libgfortran functions)\n\n\tPR fortran/33387\n\n\t* trans.h: Remove prototypes for gfor_fndecl_math_exponent4,\n\tgfor_fndecl_math_exponent8, gfor_fndecl_math_exponent10 and\n\tgfor_fndecl_math_exponent16.\n\t* f95-lang.c (build_builtin_fntypes): Add new function types.\n\t(gfc_init_builtin_functions): Add new builtins for nextafter,\n\tfrexp, ldexp, fabs, scalbn and inf.\n\t* iresolve.c (gfc_resolve_rrspacing): Don't add hidden arguments.\n\t(gfc_resolve_scale): Don't convert type of second argument.\n\t(gfc_resolve_set_exponent): Likewise.\n\t(gfc_resolve_size): Don't add hidden arguments.\n\t* trans-decl.c: Remove gfor_fndecl_math_exponent4,\n\tgfor_fndecl_math_exponent8, gfor_fndecl_math_exponent10 and\n\tgfor_fndecl_math_exponent16.\n\t* trans-intrinsic.c (gfc_intrinsic_map): Remove intrinsics\n\tfor scalbn, fraction, nearest, rrspacing, set_exponent and\n\tspacing.\n\t(gfc_conv_intrinsic_exponent): Directly call frexp.\n\t(gfc_conv_intrinsic_fraction, gfc_conv_intrinsic_nearest,\n\tgfc_conv_intrinsic_spacing, gfc_conv_intrinsic_rrspacing,\n\tgfc_conv_intrinsic_scale, gfc_conv_intrinsic_set_exponent): New\n\tfunctions.\n\t(gfc_conv_intrinsic_function): Use the new functions above.\n\nFrom-SVN: r132713", "tree": {"sha": "64de6d9997d0e3e22c4eeefedf20b872963e2089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64de6d9997d0e3e22c4eeefedf20b872963e2089"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5a4419cde676a67cd150feeef3babea43e5af8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a4419cde676a67cd150feeef3babea43e5af8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5a4419cde676a67cd150feeef3babea43e5af8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a4419cde676a67cd150feeef3babea43e5af8c/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bf6e2702881e7d34ee9b127f716d30fc6ee0adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf6e2702881e7d34ee9b127f716d30fc6ee0adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf6e2702881e7d34ee9b127f716d30fc6ee0adf"}], "stats": {"total": 608, "additions": 431, "deletions": 177}, "files": [{"sha": "0b69dd5927ad5a6bec797b33997b677be343e6bd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b5a4419cde676a67cd150feeef3babea43e5af8c", "patch": "@@ -1,3 +1,29 @@\n+2008-02-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/33387\n+\t* trans.h: Remove prototypes for gfor_fndecl_math_exponent4,\n+\tgfor_fndecl_math_exponent8, gfor_fndecl_math_exponent10 and\n+\tgfor_fndecl_math_exponent16.\n+\t* f95-lang.c (build_builtin_fntypes): Add new function types.\n+\t(gfc_init_builtin_functions): Add new builtins for nextafter,\n+\tfrexp, ldexp, fabs, scalbn and inf.\n+\t* iresolve.c (gfc_resolve_rrspacing): Don't add hidden arguments.\n+\t(gfc_resolve_scale): Don't convert type of second argument.\n+\t(gfc_resolve_set_exponent): Likewise.\n+\t(gfc_resolve_size): Don't add hidden arguments.\n+\t* trans-decl.c: Remove gfor_fndecl_math_exponent4,\n+\tgfor_fndecl_math_exponent8, gfor_fndecl_math_exponent10 and\n+\tgfor_fndecl_math_exponent16.\n+\t* trans-intrinsic.c (gfc_intrinsic_map): Remove intrinsics\n+\tfor scalbn, fraction, nearest, rrspacing, set_exponent and\n+\tspacing.\n+\t(gfc_conv_intrinsic_exponent): Directly call frexp.\n+\t(gfc_conv_intrinsic_fraction, gfc_conv_intrinsic_nearest,\n+\tgfc_conv_intrinsic_spacing, gfc_conv_intrinsic_rrspacing,\n+\tgfc_conv_intrinsic_scale, gfc_conv_intrinsic_set_exponent): New\n+\tfunctions.\n+\t(gfc_conv_intrinsic_function): Use the new functions above.\n+\n 2008-02-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/35033"}, {"sha": "7a3e413caf396befd72d14ae59bf8451eb46d75d", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=b5a4419cde676a67cd150feeef3babea43e5af8c", "patch": "@@ -756,6 +756,16 @@ build_builtin_fntypes (tree *fntype, tree type)\n   tmp = tree_cons (NULL_TREE, integer_type_node, void_list_node);\n   tmp = tree_cons (NULL_TREE, type, tmp);\n   fntype[2] = build_function_type (type, tmp);\n+  /* type (*) (void) */\n+  fntype[3] = build_function_type (type, void_list_node);\n+  /* type (*) (type, &int) */\n+  tmp = tree_cons (NULL_TREE, type, void_list_node);\n+  tmp = tree_cons (NULL_TREE, build_pointer_type (integer_type_node), tmp);\n+  fntype[4] = build_function_type (type, tmp);\n+  /* type (*) (type, int) */\n+  tmp = tree_cons (NULL_TREE, type, void_list_node);\n+  tmp = tree_cons (NULL_TREE, integer_type_node, tmp);\n+  fntype[5] = build_function_type (type, tmp);\n }\n \n \n@@ -806,12 +816,12 @@ gfc_init_builtin_functions (void)\n     ATTR_CONST_NOTHROW_LIST\n   };\n \n-  tree mfunc_float[3];\n-  tree mfunc_double[3];\n-  tree mfunc_longdouble[3];\n-  tree mfunc_cfloat[3];\n-  tree mfunc_cdouble[3];\n-  tree mfunc_clongdouble[3];\n+  tree mfunc_float[6];\n+  tree mfunc_double[6];\n+  tree mfunc_longdouble[6];\n+  tree mfunc_cfloat[6];\n+  tree mfunc_cdouble[6];\n+  tree mfunc_clongdouble[6];\n   tree func_cfloat_float, func_float_cfloat;\n   tree func_cdouble_double, func_double_cdouble;\n   tree func_clongdouble_longdouble, func_longdouble_clongdouble;\n@@ -902,13 +912,48 @@ gfc_init_builtin_functions (void)\n   gfc_define_builtin (\"__builtin_copysignf\", mfunc_float[1], \n \t\t      BUILT_IN_COPYSIGNF, \"copysignf\", true);\n  \n+  gfc_define_builtin (\"__builtin_nextafterl\", mfunc_longdouble[1], \n+\t\t      BUILT_IN_NEXTAFTERL, \"nextafterl\", true);\n+  gfc_define_builtin (\"__builtin_nextafter\", mfunc_double[1], \n+\t\t      BUILT_IN_NEXTAFTER, \"nextafter\", true);\n+  gfc_define_builtin (\"__builtin_nextafterf\", mfunc_float[1], \n+\t\t      BUILT_IN_NEXTAFTERF, \"nextafterf\", true);\n+ \n+  gfc_define_builtin (\"__builtin_frexpl\", mfunc_longdouble[4], \n+\t\t      BUILT_IN_FREXPL, \"frexpl\", false);\n+  gfc_define_builtin (\"__builtin_frexp\", mfunc_double[4], \n+\t\t      BUILT_IN_FREXP, \"frexp\", false);\n+  gfc_define_builtin (\"__builtin_frexpf\", mfunc_float[4], \n+\t\t      BUILT_IN_FREXPF, \"frexpf\", false);\n+ \n+  gfc_define_builtin (\"__builtin_fabsl\", mfunc_longdouble[0], \n+\t\t      BUILT_IN_FABSL, \"fabsl\", true);\n+  gfc_define_builtin (\"__builtin_fabs\", mfunc_double[0], \n+\t\t      BUILT_IN_FABS, \"fabs\", true);\n+  gfc_define_builtin (\"__builtin_fabsf\", mfunc_float[0], \n+\t\t      BUILT_IN_FABSF, \"fabsf\", true);\n+ \n+  gfc_define_builtin (\"__builtin_scalbnl\", mfunc_longdouble[5], \n+\t\t      BUILT_IN_SCALBNL, \"scalbnl\", true);\n+  gfc_define_builtin (\"__builtin_scalbn\", mfunc_double[5], \n+\t\t      BUILT_IN_SCALBN, \"scalbn\", true);\n+  gfc_define_builtin (\"__builtin_scalbnf\", mfunc_float[5], \n+\t\t      BUILT_IN_SCALBNF, \"scalbnf\", true);\n+ \n   gfc_define_builtin (\"__builtin_fmodl\", mfunc_longdouble[1], \n \t\t      BUILT_IN_FMODL, \"fmodl\", true);\n   gfc_define_builtin (\"__builtin_fmod\", mfunc_double[1], \n \t\t      BUILT_IN_FMOD, \"fmod\", true);\n   gfc_define_builtin (\"__builtin_fmodf\", mfunc_float[1], \n \t\t      BUILT_IN_FMODF, \"fmodf\", true);\n \n+  gfc_define_builtin (\"__builtin_infl\", mfunc_longdouble[3], \n+\t\t      BUILT_IN_INFL, \"__builtin_infl\", true);\n+  gfc_define_builtin (\"__builtin_inf\", mfunc_double[3], \n+\t\t      BUILT_IN_INF, \"__builtin_inf\", true);\n+  gfc_define_builtin (\"__builtin_inff\", mfunc_float[3], \n+\t\t      BUILT_IN_INFF, \"__builtin_inff\", true);\n+\n   /* lround{f,,l} and llround{f,,l} */\n   type = tree_cons (NULL_TREE, float_type_node, void_list_node);\n   tmp = build_function_type (long_integer_type_node, type); "}, {"sha": "27a0022261febd00818f691bae0fe3afa273fac2", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 3, "deletions": 98, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=b5a4419cde676a67cd150feeef3babea43e5af8c", "patch": "@@ -1853,47 +1853,15 @@ gfc_resolve_reshape (gfc_expr *f, gfc_expr *source, gfc_expr *shape,\n void\n gfc_resolve_rrspacing (gfc_expr *f, gfc_expr *x)\n {\n-  int k;\n-  gfc_actual_arglist *prec;\n-\n   f->ts = x->ts;\n   f->value.function.name = gfc_get_string (\"__rrspacing_%d\", x->ts.kind);\n-\n-  /* Create a hidden argument to the library routines for rrspacing.  This\n-     hidden argument is the precision of x.  */\n-  k = gfc_validate_kind (BT_REAL, x->ts.kind, false);\n-  prec = gfc_get_actual_arglist ();\n-  prec->name = \"p\";\n-  prec->expr = gfc_int_expr (gfc_real_kinds[k].digits);\n-  /* The library routine expects INTEGER(4).  */\n-  if (prec->expr->ts.kind != gfc_c_int_kind)\n-    {\n-      gfc_typespec ts;\n-      gfc_clear_ts (&ts);\n-      ts.type = BT_INTEGER;\n-      ts.kind = gfc_c_int_kind;\n-      gfc_convert_type (prec->expr, &ts, 2);\n-    }\n-  f->value.function.actual->next = prec;\n }\n \n \n void\n-gfc_resolve_scale (gfc_expr *f, gfc_expr *x, gfc_expr *i)\n+gfc_resolve_scale (gfc_expr *f, gfc_expr *x, gfc_expr *i ATTRIBUTE_UNUSED)\n {\n   f->ts = x->ts;\n-\n-  /* The implementation calls scalbn which takes an int as the\n-     second argument.  */\n-  if (i->ts.kind != gfc_c_int_kind)\n-    {\n-      gfc_typespec ts;\n-      gfc_clear_ts (&ts);\n-      ts.type = BT_INTEGER;\n-      ts.kind = gfc_c_int_kind;\n-      gfc_convert_type_warn (i, &ts, 2, 0);\n-    }\n-\n   f->value.function.name = gfc_get_string (\"__scale_%d\", x->ts.kind);\n }\n \n@@ -1921,22 +1889,10 @@ gfc_resolve_secnds (gfc_expr *t1, gfc_expr *t0)\n \n \n void\n-gfc_resolve_set_exponent (gfc_expr *f, gfc_expr *x, gfc_expr *i)\n+gfc_resolve_set_exponent (gfc_expr *f, gfc_expr *x,\n+\t\t\t  gfc_expr *i ATTRIBUTE_UNUSED)\n {\n   f->ts = x->ts;\n-\n-  /* The library implementation uses GFC_INTEGER_4 unconditionally,\n-     convert type so we don't have to implement all possible\n-     permutations.  */\n-  if (i->ts.kind != gfc_c_int_kind)\n-    {\n-      gfc_typespec ts;\n-      gfc_clear_ts (&ts);\n-      ts.type = BT_INTEGER;\n-      ts.kind = gfc_c_int_kind;\n-      gfc_convert_type_warn (i, &ts, 2, 0);\n-    }\n-\n   f->value.function.name = gfc_get_string (\"__set_exponent_%d\", x->ts.kind);\n }\n \n@@ -2016,59 +1972,8 @@ gfc_resolve_size (gfc_expr *f, gfc_expr *array ATTRIBUTE_UNUSED,\n void\n gfc_resolve_spacing (gfc_expr *f, gfc_expr *x)\n {\n-  int k; \n-  gfc_actual_arglist *prec, *tiny, *emin_1;\n- \n   f->ts = x->ts;\n   f->value.function.name = gfc_get_string (\"__spacing_%d\", x->ts.kind);\n-\n-  /* Create hidden arguments to the library routine for spacing.  These\n-     hidden arguments are tiny(x), min_exponent - 1,  and the precision\n-     of x.  */\n-\n-  k = gfc_validate_kind (BT_REAL, x->ts.kind, false);\n-\n-  tiny = gfc_get_actual_arglist ();\n-  tiny->name = \"tiny\";\n-  tiny->expr = gfc_get_expr ();\n-  tiny->expr->expr_type = EXPR_CONSTANT;\n-  tiny->expr->where = gfc_current_locus;\n-  tiny->expr->ts.type = x->ts.type;\n-  tiny->expr->ts.kind = x->ts.kind;\n-  mpfr_init (tiny->expr->value.real);\n-  mpfr_set (tiny->expr->value.real, gfc_real_kinds[k].tiny, GFC_RND_MODE);\n-\n-  emin_1 = gfc_get_actual_arglist ();\n-  emin_1->name = \"emin\";\n-  emin_1->expr = gfc_int_expr (gfc_real_kinds[k].min_exponent - 1);\n-\n-  /* The library routine expects INTEGER(4).  */\n-  if (emin_1->expr->ts.kind != gfc_c_int_kind)\n-    {\n-      gfc_typespec ts;\n-      gfc_clear_ts (&ts);\n-      ts.type = BT_INTEGER;\n-      ts.kind = gfc_c_int_kind;\n-      gfc_convert_type (emin_1->expr, &ts, 2);\n-    }\n-  emin_1->next = tiny;\n-\n-  prec = gfc_get_actual_arglist ();\n-  prec->name = \"prec\";\n-  prec->expr = gfc_int_expr (gfc_real_kinds[k].digits);\n-\n-  /* The library routine expects INTEGER(4).  */\n-  if (prec->expr->ts.kind != gfc_c_int_kind)\n-    {\n-      gfc_typespec ts;\n-      gfc_clear_ts (&ts);\n-      ts.type = BT_INTEGER;\n-      ts.kind = gfc_c_int_kind;\n-      gfc_convert_type (prec->expr, &ts, 2);\n-    }\n-  prec->next = emin_1;\n-\n-  f->value.function.actual->next = prec;\n }\n \n "}, {"sha": "bf07a88f238e331e9b3d421072cac8988b050f39", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=b5a4419cde676a67cd150feeef3babea43e5af8c", "patch": "@@ -102,10 +102,6 @@ gfc_powdecl_list gfor_fndecl_math_powi[4][3];\n tree gfor_fndecl_math_ishftc4;\n tree gfor_fndecl_math_ishftc8;\n tree gfor_fndecl_math_ishftc16;\n-tree gfor_fndecl_math_exponent4;\n-tree gfor_fndecl_math_exponent8;\n-tree gfor_fndecl_math_exponent10;\n-tree gfor_fndecl_math_exponent16;\n \n \n /* String functions.  */\n@@ -2010,10 +2006,6 @@ gfc_build_intrinsic_function_decls (void)\n   tree gfc_int8_type_node = gfc_get_int_type (8);\n   tree gfc_int16_type_node = gfc_get_int_type (16);\n   tree gfc_logical4_type_node = gfc_get_logical_type (4);\n-  tree gfc_real4_type_node = gfc_get_real_type (4);\n-  tree gfc_real8_type_node = gfc_get_real_type (8);\n-  tree gfc_real10_type_node = gfc_get_real_type (10);\n-  tree gfc_real16_type_node = gfc_get_real_type (16);\n \n   /* String functions.  */\n   gfor_fndecl_compare_string =\n@@ -2199,25 +2191,6 @@ gfc_build_intrinsic_function_decls (void)\n \t\t\t\t       gfc_int4_type_node,\n \t\t\t\t       gfc_int4_type_node);\n \n-  gfor_fndecl_math_exponent4 =\n-    gfc_build_library_function_decl (get_identifier (PREFIX(\"exponent_r4\")),\n-\t\t\t\t     gfc_int4_type_node,\n-\t\t\t\t     1, gfc_real4_type_node);\n-  gfor_fndecl_math_exponent8 =\n-    gfc_build_library_function_decl (get_identifier (PREFIX(\"exponent_r8\")),\n-\t\t\t\t     gfc_int4_type_node,\n-\t\t\t\t     1, gfc_real8_type_node);\n-  if (gfc_real10_type_node)\n-    gfor_fndecl_math_exponent10 =\n-      gfc_build_library_function_decl (get_identifier (PREFIX(\"exponent_r10\")),\n-\t\t\t\t       gfc_int4_type_node, 1,\n-\t\t\t\t       gfc_real10_type_node);\n-  if (gfc_real16_type_node)\n-    gfor_fndecl_math_exponent16 =\n-      gfc_build_library_function_decl (get_identifier (PREFIX(\"exponent_r16\")),\n-\t\t\t\t       gfc_int4_type_node, 1,\n-\t\t\t\t       gfc_real16_type_node);\n-\n   /* BLAS functions.  */\n   {\n     tree pint = build_pointer_type (integer_type_node);"}, {"sha": "77bad73d51de40f8f5b1182048b480bc09d498aa", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 351, "deletions": 42, "changes": 393, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=b5a4419cde676a67cd150feeef3babea43e5af8c", "patch": "@@ -104,43 +104,19 @@ gfc_intrinsic_map_t;\n     true, true, NAME, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, \\\n     NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE},\n \n-#define LIBM_FUNCTION(ID, NAME, HAVE_COMPLEX) \\\n-  { GFC_ISYM_ ## ID, END_BUILTINS, END_BUILTINS, END_BUILTINS, END_BUILTINS, \\\n-    END_BUILTINS, END_BUILTINS, END_BUILTINS, END_BUILTINS, \\\n-    true, HAVE_COMPLEX, true, NAME, NULL_TREE, NULL_TREE, NULL_TREE, \\\n-    NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE }\n-\n-#define LIBF_FUNCTION(ID, NAME, HAVE_COMPLEX) \\\n-  { GFC_ISYM_ ## ID, END_BUILTINS, END_BUILTINS, END_BUILTINS, END_BUILTINS, \\\n-    END_BUILTINS, END_BUILTINS, END_BUILTINS, END_BUILTINS, \\\n-    false, HAVE_COMPLEX, true, NAME, NULL_TREE, NULL_TREE, NULL_TREE, \\\n-    NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE }\n-\n static GTY(()) gfc_intrinsic_map_t gfc_intrinsic_map[] =\n {\n   /* Functions built into gcc itself.  */\n #include \"mathbuiltins.def\"\n \n-  /* Functions in libm.  */\n-  /* ??? This does exist as BUILT_IN_SCALBN, but doesn't quite fit the\n-     pattern for other mathbuiltins.def entries.  At present we have no\n-     optimizations for this in the common sources.  */\n-  LIBM_FUNCTION (SCALE, \"scalbn\", false),\n-\n-  /* Functions in libgfortran.  */\n-  LIBF_FUNCTION (FRACTION, \"fraction\", false),\n-  LIBF_FUNCTION (NEAREST, \"nearest\", false),\n-  LIBF_FUNCTION (RRSPACING, \"rrspacing\", false),\n-  LIBF_FUNCTION (SET_EXPONENT, \"set_exponent\", false),\n-  LIBF_FUNCTION (SPACING, \"spacing\", false),\n-\n   /* End the list.  */\n-  LIBF_FUNCTION (NONE, NULL, false)\n+  { GFC_ISYM_NONE, END_BUILTINS, END_BUILTINS, END_BUILTINS, END_BUILTINS,\n+    END_BUILTINS, END_BUILTINS, END_BUILTINS, END_BUILTINS,\n+    true, false, true, NULL, NULL_TREE, NULL_TREE, NULL_TREE,\n+    NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE }\n };\n #undef DEFINE_MATH_BUILTIN\n #undef DEFINE_MATH_BUILTIN_C\n-#undef LIBM_FUNCTION\n-#undef LIBF_FUNCTION\n \n /* Structure for storing components of a floating number to be used by\n    elemental functions to manipulate reals.  */\n@@ -727,38 +703,43 @@ gfc_conv_intrinsic_lib_function (gfc_se * se, gfc_expr * expr)\n   se->expr = build_call_array (rettype, fndecl, num_args, args);\n }\n \n-/* Generate code for EXPONENT(X) intrinsic function.  */\n+/* The EXPONENT(s) intrinsic function is translated into\n+       int ret;\n+       frexp (s, &ret);\n+       return ret;\n+ */\n \n static void\n gfc_conv_intrinsic_exponent (gfc_se *se, gfc_expr *expr)\n {\n-  tree arg, fndecl, type;\n-  gfc_expr *a1;\n-\n-  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  tree arg, type, res, tmp;\n+  int frexp;\n \n-  a1 = expr->value.function.actual->expr;\n-  switch (a1->ts.kind)\n+  switch (expr->value.function.actual->expr->ts.kind)\n     {\n     case 4:\n-      fndecl = gfor_fndecl_math_exponent4;\n+      frexp = BUILT_IN_FREXPF;\n       break;\n     case 8:\n-      fndecl = gfor_fndecl_math_exponent8;\n+      frexp = BUILT_IN_FREXP;\n       break;\n     case 10:\n-      fndecl = gfor_fndecl_math_exponent10;\n-      break;\n     case 16:\n-      fndecl = gfor_fndecl_math_exponent16;\n+      frexp = BUILT_IN_FREXPL;\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  /* Convert it to the required type.  */\n+  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+\n+  res = gfc_create_var (integer_type_node, NULL);\n+  tmp = build_call_expr (built_in_decls[frexp], 2, arg,\n+\t\t\t build_fold_addr_expr (res));\n+  gfc_add_expr_to_block (&se->pre, tmp);\n+\n   type = gfc_typenode_for_spec (&expr->ts);\n-  se->expr = fold_convert (type, build_call_expr (fndecl, 1, arg));\n+  se->expr = fold_convert (type, res);\n }\n \n /* Evaluate a single upper or lower bound.  */\n@@ -2823,6 +2804,310 @@ gfc_conv_intrinsic_merge (gfc_se * se, gfc_expr * expr)\n }\n \n \n+/* FRACTION (s) is translated into frexp (s, &dummy_int).  */\n+static void\n+gfc_conv_intrinsic_fraction (gfc_se * se, gfc_expr * expr)\n+{\n+  tree arg, type, tmp;\n+  int frexp;\n+\n+  switch (expr->ts.kind)\n+    {\n+      case 4:\n+\tfrexp = BUILT_IN_FREXPF;\n+\tbreak;\n+      case 8:\n+\tfrexp = BUILT_IN_FREXP;\n+\tbreak;\n+      case 10:\n+      case 16:\n+\tfrexp = BUILT_IN_FREXPL;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  type = gfc_typenode_for_spec (&expr->ts);\n+  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  tmp = gfc_create_var (integer_type_node, NULL);\n+  se->expr = build_call_expr (built_in_decls[frexp], 2,\n+\t\t\t      fold_convert (type, arg),\n+\t\t\t      build_fold_addr_expr (tmp));\n+  se->expr = fold_convert (type, se->expr);\n+}\n+\n+\n+/* NEAREST (s, dir) is translated into\n+     tmp = copysign (INF, dir);\n+     return nextafter (s, tmp);\n+ */\n+static void\n+gfc_conv_intrinsic_nearest (gfc_se * se, gfc_expr * expr)\n+{\n+  tree args[2], type, tmp;\n+  int nextafter, copysign, inf;\n+\n+  switch (expr->ts.kind)\n+    {\n+      case 4:\n+\tnextafter = BUILT_IN_NEXTAFTERF;\n+\tcopysign = BUILT_IN_COPYSIGNF;\n+\tinf = BUILT_IN_INFF;\n+\tbreak;\n+      case 8:\n+\tnextafter = BUILT_IN_NEXTAFTER;\n+\tcopysign = BUILT_IN_COPYSIGN;\n+\tinf = BUILT_IN_INF;\n+\tbreak;\n+      case 10:\n+      case 16:\n+\tnextafter = BUILT_IN_NEXTAFTERL;\n+\tcopysign = BUILT_IN_COPYSIGNL;\n+\tinf = BUILT_IN_INFL;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  type = gfc_typenode_for_spec (&expr->ts);\n+  gfc_conv_intrinsic_function_args (se, expr, args, 2);\n+  tmp = build_call_expr (built_in_decls[copysign], 2,\n+\t\t\t build_call_expr (built_in_decls[inf], 0),\n+\t\t\t fold_convert (type, args[1]));\n+  se->expr = build_call_expr (built_in_decls[nextafter], 2,\n+\t\t\t      fold_convert (type, args[0]), tmp);\n+  se->expr = fold_convert (type, se->expr);\n+}\n+\n+\n+/* SPACING (s) is translated into\n+    int e;\n+    if (s == 0)\n+      res = tiny;\n+    else\n+    {\n+      frexp (s, &e);\n+      e = e - prec;\n+      e = MAX_EXPR (e, emin);\n+      res = scalbn (1., e);\n+    }\n+    return res;\n+\n+ where prec is the precision of s, gfc_real_kinds[k].digits,\n+       emin is min_exponent - 1, gfc_real_kinds[k].min_exponent - 1,\n+   and tiny is tiny(s), gfc_real_kinds[k].tiny.  */\n+\n+static void\n+gfc_conv_intrinsic_spacing (gfc_se * se, gfc_expr * expr)\n+{\n+  tree arg, type, prec, emin, tiny, res, e;\n+  tree cond, tmp;\n+  int frexp, scalbn, k;\n+  stmtblock_t block;\n+\n+  k = gfc_validate_kind (BT_REAL, expr->ts.kind, false);\n+  prec = build_int_cst (NULL_TREE, gfc_real_kinds[k].digits);\n+  emin = build_int_cst (NULL_TREE, gfc_real_kinds[k].min_exponent - 1);\n+  tiny = gfc_conv_mpfr_to_tree (gfc_real_kinds[k].tiny, expr->ts.kind);\n+\n+  switch (expr->ts.kind)\n+    {\n+      case 4:\n+\tfrexp = BUILT_IN_FREXPF;\n+\tscalbn = BUILT_IN_SCALBNF;\n+\tbreak;\n+      case 8:\n+\tfrexp = BUILT_IN_FREXP;\n+\tscalbn = BUILT_IN_SCALBN;\n+\tbreak;\n+      case 10:\n+      case 16:\n+\tfrexp = BUILT_IN_FREXPL;\n+\tscalbn = BUILT_IN_SCALBNL;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  arg = gfc_evaluate_now (arg, &se->pre);\n+\n+  type = gfc_typenode_for_spec (&expr->ts);\n+  e = gfc_create_var (integer_type_node, NULL);\n+  res = gfc_create_var (type, NULL);\n+\n+\n+  /* Build the block for s /= 0.  */\n+  gfc_start_block (&block);\n+  tmp = build_call_expr (built_in_decls[frexp], 2, arg,\n+\t\t\t build_fold_addr_expr (e));\n+  gfc_add_expr_to_block (&block, tmp);\n+\n+  tmp = fold_build2 (MINUS_EXPR, integer_type_node, e, prec);\n+  gfc_add_modify_expr (&block, e, fold_build2 (MAX_EXPR, integer_type_node,\n+\t\t\t\t\t       tmp, emin));\n+\n+  tmp = build_call_expr (built_in_decls[scalbn], 2,\n+\t\t\t build_real_from_int_cst (type, integer_one_node), e);\n+  gfc_add_modify_expr (&block, res, tmp);\n+\n+  /* Finish by building the IF statement.  */\n+  cond = fold_build2 (EQ_EXPR, boolean_type_node, arg,\n+\t\t      build_real_from_int_cst (type, integer_zero_node));\n+  tmp = build3_v (COND_EXPR, cond, build2_v (MODIFY_EXPR, res, tiny),\n+\t\t  gfc_finish_block (&block));\n+\n+  gfc_add_expr_to_block (&se->pre, tmp);\n+  se->expr = res;\n+}\n+\n+\n+/* RRSPACING (s) is translated into\n+      int e;\n+      real x;\n+      x = fabs (s);\n+      if (x != 0)\n+      {\n+\tfrexp (s, &e);\n+\tx = scalbn (x, precision - e);\n+      }\n+      return x;\n+\n+ where precision is gfc_real_kinds[k].digits.  */\n+\n+static void\n+gfc_conv_intrinsic_rrspacing (gfc_se * se, gfc_expr * expr)\n+{\n+  tree arg, type, e, x, cond, stmt, tmp;\n+  int frexp, scalbn, fabs, prec, k;\n+  stmtblock_t block;\n+\n+  k = gfc_validate_kind (BT_REAL, expr->ts.kind, false);\n+  prec = gfc_real_kinds[k].digits;\n+  switch (expr->ts.kind)\n+    {\n+      case 4:\n+\tfrexp = BUILT_IN_FREXPF;\n+\tscalbn = BUILT_IN_SCALBNF;\n+\tfabs = BUILT_IN_FABSF;\n+\tbreak;\n+      case 8:\n+\tfrexp = BUILT_IN_FREXP;\n+\tscalbn = BUILT_IN_SCALBN;\n+\tfabs = BUILT_IN_FABS;\n+\tbreak;\n+      case 10:\n+      case 16:\n+\tfrexp = BUILT_IN_FREXPL;\n+\tscalbn = BUILT_IN_SCALBNL;\n+\tfabs = BUILT_IN_FABSL;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  type = gfc_typenode_for_spec (&expr->ts);\n+  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  arg = gfc_evaluate_now (arg, &se->pre);\n+\n+  e = gfc_create_var (integer_type_node, NULL);\n+  x = gfc_create_var (type, NULL);\n+  gfc_add_modify_expr (&se->pre, x,\n+\t\t       build_call_expr (built_in_decls[fabs], 1, arg));\n+\n+\n+  gfc_start_block (&block);\n+  tmp = build_call_expr (built_in_decls[frexp], 2, arg,\n+\t\t\t build_fold_addr_expr (e));\n+  gfc_add_expr_to_block (&block, tmp);\n+\n+  tmp = fold_build2 (MINUS_EXPR, integer_type_node,\n+\t\t     build_int_cst (NULL_TREE, prec), e);\n+  tmp = build_call_expr (built_in_decls[scalbn], 2, x, tmp);\n+  gfc_add_modify_expr (&block, x, tmp);\n+  stmt = gfc_finish_block (&block);\n+\n+  cond = fold_build2 (NE_EXPR, boolean_type_node, x,\n+\t\t      build_real_from_int_cst (type, integer_zero_node));\n+  tmp = build3_v (COND_EXPR, cond, stmt, build_empty_stmt ());\n+  gfc_add_expr_to_block (&se->pre, tmp);\n+\n+  se->expr = fold_convert (type, x);\n+}\n+\n+\n+/* SCALE (s, i) is translated into scalbn (s, i).  */\n+static void\n+gfc_conv_intrinsic_scale (gfc_se * se, gfc_expr * expr)\n+{\n+  tree args[2], type;\n+  int scalbn;\n+\n+  switch (expr->ts.kind)\n+    {\n+      case 4:\n+\tscalbn = BUILT_IN_SCALBNF;\n+\tbreak;\n+      case 8:\n+\tscalbn = BUILT_IN_SCALBN;\n+\tbreak;\n+      case 10:\n+      case 16:\n+\tscalbn = BUILT_IN_SCALBNL;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  type = gfc_typenode_for_spec (&expr->ts);\n+  gfc_conv_intrinsic_function_args (se, expr, args, 2);\n+  se->expr = build_call_expr (built_in_decls[scalbn], 2,\n+\t\t\t      fold_convert (type, args[0]),\n+\t\t\t      fold_convert (integer_type_node, args[1]));\n+  se->expr = fold_convert (type, se->expr);\n+}\n+\n+\n+/* SET_EXPONENT (s, i) is translated into\n+   scalbn (frexp (s, &dummy_int), i).  */\n+static void\n+gfc_conv_intrinsic_set_exponent (gfc_se * se, gfc_expr * expr)\n+{\n+  tree args[2], type, tmp;\n+  int frexp, scalbn;\n+\n+  switch (expr->ts.kind)\n+    {\n+      case 4:\n+\tfrexp = BUILT_IN_FREXPF;\n+\tscalbn = BUILT_IN_SCALBNF;\n+\tbreak;\n+      case 8:\n+\tfrexp = BUILT_IN_FREXP;\n+\tscalbn = BUILT_IN_SCALBN;\n+\tbreak;\n+      case 10:\n+      case 16:\n+\tfrexp = BUILT_IN_FREXPL;\n+\tscalbn = BUILT_IN_SCALBNL;\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+    }\n+\n+  type = gfc_typenode_for_spec (&expr->ts);\n+  gfc_conv_intrinsic_function_args (se, expr, args, 2);\n+\n+  tmp = gfc_create_var (integer_type_node, NULL);\n+  tmp = build_call_expr (built_in_decls[frexp], 2,\n+\t\t\t fold_convert (type, args[0]),\n+\t\t\t build_fold_addr_expr (tmp));\n+  se->expr = build_call_expr (built_in_decls[scalbn], 2, tmp,\n+\t\t\t      fold_convert (integer_type_node, args[1]));\n+  se->expr = fold_convert (type, se->expr);\n+}\n+\n+\n static void\n gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n {\n@@ -3899,6 +4184,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_fdate (se, expr);\n       break;\n \n+    case GFC_ISYM_FRACTION:\n+      gfc_conv_intrinsic_fraction (se, expr);\n+      break;\n+\n     case GFC_ISYM_IAND:\n       gfc_conv_intrinsic_bitop (se, expr, BIT_AND_EXPR);\n       break;\n@@ -4037,6 +4326,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_minmaxval (se, expr, LT_EXPR);\n       break;\n \n+    case GFC_ISYM_NEAREST:\n+      gfc_conv_intrinsic_nearest (se, expr);\n+      break;\n+\n     case GFC_ISYM_NOT:\n       gfc_conv_intrinsic_not (se, expr);\n       break;\n@@ -4053,6 +4346,18 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_arith (se, expr, MULT_EXPR);\n       break;\n \n+    case GFC_ISYM_RRSPACING:\n+      gfc_conv_intrinsic_rrspacing (se, expr);\n+      break;\n+\n+    case GFC_ISYM_SET_EXPONENT:\n+      gfc_conv_intrinsic_set_exponent (se, expr);\n+      break;\n+\n+    case GFC_ISYM_SCALE:\n+      gfc_conv_intrinsic_scale (se, expr);\n+      break;\n+\n     case GFC_ISYM_SIGN:\n       gfc_conv_intrinsic_sign (se, expr);\n       break;\n@@ -4065,6 +4370,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_sizeof (se, expr);\n       break;\n \n+    case GFC_ISYM_SPACING:\n+      gfc_conv_intrinsic_spacing (se, expr);\n+      break;\n+\n     case GFC_ISYM_SUM:\n       gfc_conv_intrinsic_arith (se, expr, PLUS_EXPR);\n       break;"}, {"sha": "eac320a9e018a74be457b4e0e8ef7e63566b9ac1", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5a4419cde676a67cd150feeef3babea43e5af8c/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=b5a4419cde676a67cd150feeef3babea43e5af8c", "patch": "@@ -529,10 +529,6 @@ extern GTY(()) gfc_powdecl_list gfor_fndecl_math_powi[4][3];\n extern GTY(()) tree gfor_fndecl_math_ishftc4;\n extern GTY(()) tree gfor_fndecl_math_ishftc8;\n extern GTY(()) tree gfor_fndecl_math_ishftc16;\n-extern GTY(()) tree gfor_fndecl_math_exponent4;\n-extern GTY(()) tree gfor_fndecl_math_exponent8;\n-extern GTY(()) tree gfor_fndecl_math_exponent10;\n-extern GTY(()) tree gfor_fndecl_math_exponent16;\n \n /* BLAS functions.  */\n extern GTY(()) tree gfor_fndecl_sgemm;"}]}