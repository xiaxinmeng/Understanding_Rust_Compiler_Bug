{"sha": "4239f144ce50c94f2c6cc232028f167b6ebfd506", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIzOWYxNDRjZTUwYzk0ZjJjNmNjMjMyMDI4ZjE2N2I2ZWJmZDUwNg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2018-11-05T23:03:55Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2018-11-05T23:03:55Z"}, "message": "Update most of libquadmath/math/ from glibc, automate update (PR libquadmath/68686).\n\nlibquadmath sources are mostly based on glibc sources at present, but\nderived from them by a manual editing / substitution process and with\nsubsequent manual merges.  The manual effort involved in merges means\nthey are sometimes incomplete and long-delayed.\n\nSince libquadmath was first created, glibc's support for this format\nhas undergone significant changes so that it can also be used in glibc\nto provide *f128 functions for the _Float128 type from TS 18661-3.\nThis makes it significantly easier to use it for libquadmath in a more\nautomated fashion, since glibc has a float128_private.h header that\nredefines many identifiers as macros as needed for building *f128\nfunctions.\n\nSimply using float128_private.h directly in libquadmath, with\nunmodified glibc sources except for changing function names in that\none header to be *q instead of *f128, would be tricky, given its\ndependence on lots of other glibc-internal headers (whereas\nlibquadmath supports non-glibc systems), and also given how some libm\nfunctions in glibc are built from type-generic templates using a\nfurther set of macros rather than from separate function\nimplementations for each type.\n\nSo instead this patch adds a script update-quadmath.py to convert\nglibc sources into libquadmath ones, and the script reads\nfloat128_private.h to identify many of the substitutions it should\nmake.  quadmath-imp.h is updated with various new internal\ndefinitions, taken from glibc as needed; this is the main place\nexpected to need updating manually when subsequent merges from glibc\nare done using the script.  No attempt is made to make the script\noutput match the details of existing formatting, although the\ndifferences are of a size that makes a rough comparison (ignoring\nwhitespace) possible.\n\nTwo new public interfaces are added to libquadmath, exp2q and\nissignalingq, at a new QUADMATH_1.2 symbol version, since those\ninterfaces are used internally by some of the glibc sources being\nmerged into libquadmath; although there is a new symbol version, no\nchange however is made to the libtool version in the libtool-version\nfile.  Although there are various other interfaces now in glibc libm\nbut not in libquadmath, this patch does nothing to add such interfaces\n(although adding many of them would in fact be easy to do, given the\nscript).\n\nOne internal file (not providing any public interfaces),\nmath/isinf_nsq.c, is removed, as no longer used by anything in\nlibquadmath after the merge.\n\nConditionals in individual source files on <fenv.h> availability or\nfeatures are moved into quadmath-imp.h (providing trivial macro\nversions of the functions if real implementations aren't available),\nto simplify the substitutions in individual source files.  Note\nhowever that I haven't tested for any configurations lacking <fenv.h>,\nso further changes could well be needed there.\n\nTwo files in libquadmath/math/ are based on glibc sources but not\nupdated in this patch: fmaq.c and rem_pio2q.c.  Both could be updated\nafter further changes to the script (and quadmath-imp.h as needed); in\nthe case of rem_pio2q.c, based on two separate glibc source files,\nthose separate files would naturally be split out into separate\nlibquadmath source files in the process (as done in this patch with\nexpq_table.h and tanq_kernel.c, where previously two glibc source\nfiles had been merged into one libquadmath source file).  complex.c,\nnanq.c and sqrtq.c are not based on glibc sources (though four of the\n(trivial) functions in complex.c could readily be replaced by instead\nusing the four corresponding files from glibc, if desired).\n\nlibquadmath also has printf/ and strtod/ sources based on glibc, also\nmostly not updated for a long time.  Again the script could no doubt\nbe made to generate those automatically, although that would be a\nlarger change (effectively some completely separate logic in the\nscript, not sharing much if anything with the existing code).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\n\tPR libquadmath/68686\n\t* Makefile.am: (libquadmath_la_SOURCES): Remove math/isinf_nsq.c.\n\tAdd math/exp2q.c math/issignalingq.c math/lgammaq_neg.c\n\tmath/lgammaq_product.c math/tanq_kernel.c math/tgammaq_product.c\n\tmath/casinhq_kernel.c.\n\t* Makefile.in: Regenerate.\n\t* libquadmath.texi (exp2q, issignalingq): Document.\n\t* quadmath-imp.h: Include <errno.h>, <limits.h>, <stdbool.h> and\n\t<fenv.h>.\n\t(HIGH_ORDER_BIT_IS_SET_FOR_SNAN, FIX_FLT128_LONG_CONVERT_OVERFLOW)\n\t(FIX_FLT128_LLONG_CONVERT_OVERFLOW, __quadmath_kernel_tanq)\n\t(__quadmath_gamma_productq, __quadmath_gammaq_r)\n\t(__quadmath_lgamma_negq, __quadmath_lgamma_productq)\n\t(__quadmath_lgammaq_r, __quadmath_kernel_casinhq, mul_splitq)\n\t(math_check_force_underflow_complex, __glibc_likely)\n\t(__glibc_unlikely, struct rm_ctx, SET_RESTORE_ROUNDF128)\n\t(libc_feholdsetround_ctx, libc_feresetround_ctx): New.\n\t(feraiseexcept, fenv_t, feholdexcept, fesetround, feupdateenv)\n\t(fesetenv, fetestexcept, feclearexcept): Define if not supported\n\tthrough <fenv.h>.\n\t(__quadmath_isinf_nsq): Remove.\n\t* quadmath.h (exp2q, issignalingq): New.\n\t* quadmath.map (QUADMATH_1.2): New.\n\t* quadmath_weak.h (exp2q, issignalingq): New.\n\t* update-quadmath.py: New file.\n\t* math/isinf_nsq.c: Remove file.\n\t* math/casinhq_kernel.c, math/exp2q.c, math/expq_table.h,\n\tmath/issignalingq.c, math/lgammaq_neg.c, math/lgammaq_product.c,\n\tmath/tanq_kernel.c, math/tgammaq_product.c: New files.  Generated\n\tfrom glibc sources with update-quadmath.py.\n\t* math/acoshq.c, math/acosq.c, math/asinhq.c, math/asinq.c,\n\tmath/atan2q.c, math/atanhq.c, math/atanq.c, math/cacoshq.c,\n\tmath/cacosq.c, math/casinhq.c, math/casinq.c, math/catanhq.c,\n\tmath/catanq.c, math/cbrtq.c, math/ccoshq.c, math/ceilq.c,\n\tmath/cexpq.c, math/cimagq.c, math/clog10q.c, math/clogq.c,\n\tmath/conjq.c, math/copysignq.c, math/coshq.c, math/cosq.c,\n\tmath/cosq_kernel.c, math/cprojq.c, math/crealq.c, math/csinhq.c,\n\tmath/csinq.c, math/csqrtq.c, math/ctanhq.c, math/ctanq.c,\n\tmath/erfq.c, math/expm1q.c, math/expq.c, math/fabsq.c,\n\tmath/fdimq.c, math/finiteq.c, math/floorq.c, math/fmaxq.c,\n\tmath/fminq.c, math/fmodq.c, math/frexpq.c, math/hypotq.c,\n\tmath/ilogbq.c, math/isinfq.c, math/isnanq.c, math/j0q.c,\n\tmath/j1q.c, math/jnq.c, math/ldexpq.c, math/lgammaq.c,\n\tmath/llrintq.c, math/llroundq.c, math/log10q.c, math/log1pq.c,\n\tmath/log2q.c, math/logbq.c, math/logq.c, math/lrintq.c,\n\tmath/lroundq.c, math/modfq.c, math/nearbyintq.c,\n\tmath/nextafterq.c, math/powq.c, math/remainderq.c, math/remquoq.c,\n\tmath/rintq.c, math/roundq.c, math/scalblnq.c, math/scalbnq.c,\n\tmath/signbitq.c, math/sincos_table.c, math/sincosq.c,\n\tmath/sincosq_kernel.c, math/sinhq.c, math/sinq.c,\n\tmath/sinq_kernel.c, math/tanhq.c, math/tanq.c, math/tgammaq.c,\n\tmath/truncq.c, math/x2y2m1q.c: Regenerate from glibc sources with\n\tupdate-quadmath.py.\n\nFrom-SVN: r265822", "tree": {"sha": "9effaf7dacd8e3e4533a6d6baf3f09e88a990825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9effaf7dacd8e3e4533a6d6baf3f09e88a990825"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4239f144ce50c94f2c6cc232028f167b6ebfd506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4239f144ce50c94f2c6cc232028f167b6ebfd506", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4239f144ce50c94f2c6cc232028f167b6ebfd506", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4239f144ce50c94f2c6cc232028f167b6ebfd506/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f31a750311079962cb1082bc1202584da491aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f31a750311079962cb1082bc1202584da491aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f31a750311079962cb1082bc1202584da491aba"}], "stats": {"total": 7387, "additions": 4544, "deletions": 2843}, "files": [{"sha": "e169a3d8fd443e446419b696ac3a5dab660f36e8", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,3 +1,59 @@\n+2018-11-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR libquadmath/68686\n+\t* Makefile.am: (libquadmath_la_SOURCES): Remove math/isinf_nsq.c.\n+\tAdd math/exp2q.c math/issignalingq.c math/lgammaq_neg.c\n+\tmath/lgammaq_product.c math/tanq_kernel.c math/tgammaq_product.c\n+\tmath/casinhq_kernel.c.\n+\t* Makefile.in: Regenerate.\n+\t* libquadmath.texi (exp2q, issignalingq): Document.\n+\t* quadmath-imp.h: Include <errno.h>, <limits.h>, <stdbool.h> and\n+\t<fenv.h>.\n+\t(HIGH_ORDER_BIT_IS_SET_FOR_SNAN, FIX_FLT128_LONG_CONVERT_OVERFLOW)\n+\t(FIX_FLT128_LLONG_CONVERT_OVERFLOW, __quadmath_kernel_tanq)\n+\t(__quadmath_gamma_productq, __quadmath_gammaq_r)\n+\t(__quadmath_lgamma_negq, __quadmath_lgamma_productq)\n+\t(__quadmath_lgammaq_r, __quadmath_kernel_casinhq, mul_splitq)\n+\t(math_check_force_underflow_complex, __glibc_likely)\n+\t(__glibc_unlikely, struct rm_ctx, SET_RESTORE_ROUNDF128)\n+\t(libc_feholdsetround_ctx, libc_feresetround_ctx): New.\n+\t(feraiseexcept, fenv_t, feholdexcept, fesetround, feupdateenv)\n+\t(fesetenv, fetestexcept, feclearexcept): Define if not supported\n+\tthrough <fenv.h>.\n+\t(__quadmath_isinf_nsq): Remove.\n+\t* quadmath.h (exp2q, issignalingq): New.\n+\t* quadmath.map (QUADMATH_1.2): New.\n+\t* quadmath_weak.h (exp2q, issignalingq): New.\n+\t* update-quadmath.py: New file.\n+\t* math/isinf_nsq.c: Remove file.\n+\t* math/casinhq_kernel.c, math/exp2q.c, math/expq_table.h,\n+\tmath/issignalingq.c, math/lgammaq_neg.c, math/lgammaq_product.c,\n+\tmath/tanq_kernel.c, math/tgammaq_product.c: New files.  Generated\n+\tfrom glibc sources with update-quadmath.py.\n+\t* math/acoshq.c, math/acosq.c, math/asinhq.c, math/asinq.c,\n+\tmath/atan2q.c, math/atanhq.c, math/atanq.c, math/cacoshq.c,\n+\tmath/cacosq.c, math/casinhq.c, math/casinq.c, math/catanhq.c,\n+\tmath/catanq.c, math/cbrtq.c, math/ccoshq.c, math/ceilq.c,\n+\tmath/cexpq.c, math/cimagq.c, math/clog10q.c, math/clogq.c,\n+\tmath/conjq.c, math/copysignq.c, math/coshq.c, math/cosq.c,\n+\tmath/cosq_kernel.c, math/cprojq.c, math/crealq.c, math/csinhq.c,\n+\tmath/csinq.c, math/csqrtq.c, math/ctanhq.c, math/ctanq.c,\n+\tmath/erfq.c, math/expm1q.c, math/expq.c, math/fabsq.c,\n+\tmath/fdimq.c, math/finiteq.c, math/floorq.c, math/fmaxq.c,\n+\tmath/fminq.c, math/fmodq.c, math/frexpq.c, math/hypotq.c,\n+\tmath/ilogbq.c, math/isinfq.c, math/isnanq.c, math/j0q.c,\n+\tmath/j1q.c, math/jnq.c, math/ldexpq.c, math/lgammaq.c,\n+\tmath/llrintq.c, math/llroundq.c, math/log10q.c, math/log1pq.c,\n+\tmath/log2q.c, math/logbq.c, math/logq.c, math/lrintq.c,\n+\tmath/lroundq.c, math/modfq.c, math/nearbyintq.c,\n+\tmath/nextafterq.c, math/powq.c, math/remainderq.c, math/remquoq.c,\n+\tmath/rintq.c, math/roundq.c, math/scalblnq.c, math/scalbnq.c,\n+\tmath/signbitq.c, math/sincos_table.c, math/sincosq.c,\n+\tmath/sincosq_kernel.c, math/sinhq.c, math/sinq.c,\n+\tmath/sinq_kernel.c, math/tanhq.c, math/tanq.c, math/tgammaq.c,\n+\tmath/truncq.c, math/x2y2m1q.c: Regenerate from glibc sources with\n+\tupdate-quadmath.py.\n+\n 2018-10-31  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR bootstrap/82856"}, {"sha": "35dffb46f6e61f02589ca9dd03c57fa0b9fb119b", "filename": "libquadmath/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.am?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -44,7 +44,7 @@ nodist_libsubinclude_HEADERS = quadmath.h quadmath_weak.h\n libsubincludedir = $(libdir)/gcc/$(target_alias)/$(gcc_version)/include\n \n libquadmath_la_SOURCES = \\\n-  math/x2y2m1q.c math/isinf_nsq.c math/acoshq.c math/fmodq.c \\\n+  math/x2y2m1q.c math/acoshq.c math/fmodq.c \\\n   math/acosq.c math/frexpq.c \\\n   math/rem_pio2q.c math/asinhq.c math/hypotq.c math/remainderq.c \\\n   math/asinq.c math/rintq.c math/atan2q.c math/isinfq.c \\\n@@ -58,6 +58,8 @@ libquadmath_la_SOURCES = \\\n   math/tanhq.c math/expq.c math/modfq.c math/tanq.c math/fabsq.c \\\n   math/nanq.c math/tgammaq.c math/finiteq.c math/nextafterq.c \\\n   math/truncq.c math/floorq.c math/powq.c math/fmaq.c math/logbq.c \\\n+  math/exp2q.c math/issignalingq.c math/lgammaq_neg.c math/lgammaq_product.c \\\n+  math/tanq_kernel.c math/tgammaq_product.c math/casinhq_kernel.c \\\n   math/cacoshq.c math/cacosq.c math/casinhq.c math/casinq.c \\\n   math/catanhq.c math/catanq.c math/cimagq.c math/conjq.c math/cprojq.c \\\n   math/crealq.c math/fdimq.c math/fmaxq.c math/fminq.c math/ilogbq.c \\"}, {"sha": "32cf50985089b93951eeb4c326a732eae75781c4", "filename": "libquadmath/Makefile.in", "status": "modified", "additions": 75, "deletions": 50, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.in?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -147,53 +147,58 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(infodir)\" \\\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__dirstamp = $(am__leading_dot)dirstamp\n @BUILD_LIBQUADMATH_TRUE@am_libquadmath_la_OBJECTS = math/x2y2m1q.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/isinf_nsq.lo math/acoshq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/fmodq.lo math/acosq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/frexpq.lo math/rem_pio2q.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/asinhq.lo math/hypotq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/remainderq.lo math/asinq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/rintq.lo math/atan2q.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/isinfq.lo math/roundq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/atanhq.lo math/isnanq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/scalblnq.lo math/atanq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/j0q.lo math/scalbnq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/cbrtq.lo math/j1q.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/signbitq.lo math/ceilq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/jnq.lo math/sincos_table.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/complex.lo math/ldexpq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/sincosq.lo math/copysignq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/lgammaq.lo math/sincosq_kernel.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/coshq.lo math/llroundq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/sinhq.lo math/cosq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/log10q.lo math/sinq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/cosq_kernel.lo math/log1pq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/sinq_kernel.lo math/erfq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/logq.lo math/sqrtq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/expm1q.lo math/lroundq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/tanhq.lo math/expq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/modfq.lo math/tanq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/fabsq.lo math/nanq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/tgammaq.lo math/finiteq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/nextafterq.lo math/truncq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/floorq.lo math/powq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/fmaq.lo math/logbq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/cacoshq.lo math/cacosq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/casinhq.lo math/casinq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/catanhq.lo math/catanq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/cimagq.lo math/conjq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/cprojq.lo math/crealq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/fdimq.lo math/fmaxq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/fminq.lo math/ilogbq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/llrintq.lo math/log2q.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/lrintq.lo math/nearbyintq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/remquoq.lo math/ccoshq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/cexpq.lo math/clog10q.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/clogq.lo math/csinq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/csinhq.lo math/csqrtq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/ctanq.lo math/ctanhq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tprintf/addmul_1.lo printf/add_n.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tprintf/cmp.lo printf/divrem.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tprintf/flt1282mpn.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/acoshq.lo math/fmodq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/acosq.lo math/frexpq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/rem_pio2q.lo math/asinhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/hypotq.lo math/remainderq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/asinq.lo math/rintq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/atan2q.lo math/isinfq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/roundq.lo math/atanhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/isnanq.lo math/scalblnq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/atanq.lo math/j0q.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/scalbnq.lo math/cbrtq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/j1q.lo math/signbitq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/ceilq.lo math/jnq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/sincos_table.lo math/complex.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/ldexpq.lo math/sincosq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/copysignq.lo math/lgammaq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/sincosq_kernel.lo math/coshq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/llroundq.lo math/sinhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/cosq.lo math/log10q.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/sinq.lo math/cosq_kernel.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/log1pq.lo math/sinq_kernel.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/erfq.lo math/logq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/sqrtq.lo math/expm1q.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/lroundq.lo math/tanhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/expq.lo math/modfq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/tanq.lo math/fabsq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/nanq.lo math/tgammaq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/finiteq.lo math/nextafterq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/truncq.lo math/floorq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/powq.lo math/fmaq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/logbq.lo math/exp2q.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/issignalingq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/lgammaq_neg.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/lgammaq_product.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/tanq_kernel.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/tgammaq_product.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/casinhq_kernel.lo math/cacoshq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/cacosq.lo math/casinhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/casinq.lo math/catanhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/catanq.lo math/cimagq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/conjq.lo math/cprojq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/crealq.lo math/fdimq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/fmaxq.lo math/fminq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/ilogbq.lo math/llrintq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/log2q.lo math/lrintq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/nearbyintq.lo math/remquoq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/ccoshq.lo math/cexpq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/clog10q.lo math/clogq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/csinq.lo math/csinhq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/csqrtq.lo math/ctanq.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tmath/ctanhq.lo printf/addmul_1.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tprintf/add_n.lo printf/cmp.lo \\\n+@BUILD_LIBQUADMATH_TRUE@\tprintf/divrem.lo printf/flt1282mpn.lo \\\n @BUILD_LIBQUADMATH_TRUE@\tprintf/fpioconst.lo printf/lshift.lo \\\n @BUILD_LIBQUADMATH_TRUE@\tprintf/mul_1.lo printf/mul_n.lo \\\n @BUILD_LIBQUADMATH_TRUE@\tprintf/mul.lo printf/printf_fphex.lo \\\n@@ -464,7 +469,7 @@ AUTOMAKE_OPTIONS = foreign info-in-builddir\n @BUILD_LIBQUADMATH_TRUE@nodist_libsubinclude_HEADERS = quadmath.h quadmath_weak.h\n @BUILD_LIBQUADMATH_TRUE@libsubincludedir = $(libdir)/gcc/$(target_alias)/$(gcc_version)/include\n @BUILD_LIBQUADMATH_TRUE@libquadmath_la_SOURCES = \\\n-@BUILD_LIBQUADMATH_TRUE@  math/x2y2m1q.c math/isinf_nsq.c math/acoshq.c math/fmodq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/x2y2m1q.c math/acoshq.c math/fmodq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/acosq.c math/frexpq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/rem_pio2q.c math/asinhq.c math/hypotq.c math/remainderq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/asinq.c math/rintq.c math/atan2q.c math/isinfq.c \\\n@@ -478,6 +483,8 @@ AUTOMAKE_OPTIONS = foreign info-in-builddir\n @BUILD_LIBQUADMATH_TRUE@  math/tanhq.c math/expq.c math/modfq.c math/tanq.c math/fabsq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/nanq.c math/tgammaq.c math/finiteq.c math/nextafterq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/truncq.c math/floorq.c math/powq.c math/fmaq.c math/logbq.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/exp2q.c math/issignalingq.c math/lgammaq_neg.c math/lgammaq_product.c \\\n+@BUILD_LIBQUADMATH_TRUE@  math/tanq_kernel.c math/tgammaq_product.c math/casinhq_kernel.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/cacoshq.c math/cacosq.c math/casinhq.c math/casinq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/catanhq.c math/catanq.c math/cimagq.c math/conjq.c math/cprojq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/crealq.c math/fdimq.c math/fmaxq.c math/fminq.c math/ilogbq.c \\\n@@ -661,7 +668,6 @@ math/$(DEPDIR)/$(am__dirstamp):\n \t@$(MKDIR_P) math/$(DEPDIR)\n \t@: > math/$(DEPDIR)/$(am__dirstamp)\n math/x2y2m1q.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n-math/isinf_nsq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/acoshq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/fmodq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/acosq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n@@ -727,6 +733,19 @@ math/floorq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/powq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/fmaq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/logbq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/exp2q.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/issignalingq.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/lgammaq_neg.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/lgammaq_product.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/tanq_kernel.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/tgammaq_product.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n+math/casinhq_kernel.lo: math/$(am__dirstamp) \\\n+\tmath/$(DEPDIR)/$(am__dirstamp)\n math/cacoshq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/cacosq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/casinhq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n@@ -830,6 +849,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cacoshq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/cacosq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/casinhq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/casinhq_kernel.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/casinq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/catanhq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/catanq.Plo@am__quote@\n@@ -854,6 +874,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/ctanhq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/ctanq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/erfq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/exp2q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/expm1q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/expq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fabsq.Plo@am__quote@\n@@ -867,14 +888,16 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/frexpq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/hypotq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/ilogbq.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/isinf_nsq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/isinfq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/isnanq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/issignalingq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/j0q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/j1q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/jnq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/ldexpq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/lgammaq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/lgammaq_neg.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/lgammaq_product.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/llrintq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/llroundq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/log10q.Plo@am__quote@\n@@ -906,7 +929,9 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/sqrtq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/tanhq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/tanq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/tanq_kernel.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/tgammaq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/tgammaq_product.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/truncq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/x2y2m1q.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@printf/$(DEPDIR)/add_n.Plo@am__quote@"}, {"sha": "b2cda531917dbbc99f885e4c320b3e4287411f12", "filename": "libquadmath/libquadmath.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Flibquadmath.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Flibquadmath.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Flibquadmath.texi?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -157,6 +157,7 @@ The following mathematical functions are available:\n @item @code{cosq}: cosine function\n @item @code{erfq}: error function\n @item @code{erfcq}: complementary error function\n+@item @code{exp2q}: base 2 exponential function\n @item @code{expq}: exponential function\n @item @code{expm1q}: exponential minus 1 function\n @need 800\n@@ -173,6 +174,7 @@ The following mathematical functions are available:\n @item @code{ilogbq}: get exponent of the value\n @item @code{isinfq}: check for infinity\n @item @code{isnanq}: check for not a number\n+@item @code{issignalingq}: check for signaling not a number\n @item @code{j0q}: Bessel function of the first kind, first order\n @item @code{j1q}: Bessel function of the first kind, second order\n @item @code{jnq}: Bessel function of the first kind, @var{n}-th order"}, {"sha": "6e500a822b5f68efa8888c93dbca00d253077f1f", "filename": "libquadmath/math/acoshq.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Facoshq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Facoshq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Facoshq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* acoshq.c -- __float128 version of e_acosh.c.\n+/* e_acoshl.c -- long double version of e_acosh.c.\n  * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -16,11 +16,11 @@\n /* acoshq(x)\n  * Method :\n  *\tBased on\n- *\t\tacoshl(x) = logl [ x + sqrtl(x*x-1) ]\n+ *\t\tacoshl(x) = logq [ x + sqrtq(x*x-1) ]\n  *\twe have\n- *\t\tacoshl(x) := logl(x)+ln2,\tif x is large; else\n- *\t\tacoshl(x) := logl(2x-1/(sqrtl(x*x-1)+x)) if x>2; else\n- *\t\tacoshl(x) := log1pl(t+sqrtl(2.0*t+t*t)); where t=x-1.\n+ *\t\tacoshl(x) := logq(x)+ln2,\tif x is large; else\n+ *\t\tacoshl(x) := logq(2x-1/(sqrtq(x*x-1)+x)) if x>2; else\n+ *\t\tacoshl(x) := log1pq(t+sqrtq(2.0*t+t*t)); where t=x-1.\n  *\n  * Special cases:\n  *\tacoshl(x) is NaN with signal if x<1.\n@@ -30,11 +30,11 @@\n #include \"quadmath-imp.h\"\n \n static const __float128\n-one\t= 1.0Q,\n+one\t= 1.0,\n ln2\t= 0.6931471805599453094172321214581766Q;\n \n __float128\n-acoshq (__float128 x)\n+acoshq(__float128 x)\n {\n \t__float128 t;\n \tuint64_t lx;\n@@ -44,16 +44,16 @@ acoshq (__float128 x)\n \t    return (x-x)/(x-x);\n \t} else if(hx >=0x4035000000000000LL) {\t/* x > 2**54 */\n \t    if(hx >=0x7fff000000000000LL) {\t/* x is inf of NaN */\n-\t        return x+x;\n+\t\treturn x+x;\n \t    } else\n-\t\treturn logq(x)+ln2;\t/* acoshl(huge)=logl(2x) */\n+\t\treturn logq(x)+ln2;\t/* acoshl(huge)=logq(2x) */\n \t} else if(((hx-0x3fff000000000000LL)|lx)==0) {\n-\t    return 0.0Q;\t\t\t/* acosh(1) = 0 */\n+\t    return 0;\t\t\t/* acosh(1) = 0 */\n \t} else if (hx > 0x4000000000000000LL) {\t/* 2**28 > x > 2 */\n \t    t=x*x;\n-\t    return logq(2.0Q*x-one/(x+sqrtq(t-one)));\n+\t    return logq(2*x-one/(x+sqrtq(t-one)));\n \t} else {\t\t\t/* 1<x<2 */\n \t    t = x-one;\n-\t    return log1pq(t+sqrtq(2.0Q*t+t*t));\n+\t    return log1pq(t+sqrtq(2*t+t*t));\n \t}\n }"}, {"sha": "2690cd3192df07f6cdc93b19cca6e6d222e09b8f", "filename": "libquadmath/math/acosq.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Facosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Facosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Facosq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -10,11 +10,11 @@\n  */\n \n /*\n-   __float128 expansions are\n+   Long double expansions are\n    Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n-   and are incorporated herein by permission of the author.  The author \n+   and are incorporated herein by permission of the author.  The author\n    reserves the right to distribute this material elsewhere under different\n-   copying permissions.  These modifications are distributed here under \n+   copying permissions.  These modifications are distributed here under\n    the following terms:\n \n     This library is free software; you can redistribute it and/or\n@@ -28,8 +28,8 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n /* acosq(x)\n  * Method :\n@@ -57,7 +57,7 @@\n #include \"quadmath-imp.h\"\n \n static const __float128\n-  one = 1.0Q,\n+  one = 1,\n   pio2_hi = 1.5707963267948966192313216916397514420986Q,\n   pio2_lo = 4.3359050650618905123985220130216759843812E-35Q,\n \n@@ -272,11 +272,11 @@ acosq (__float128 x)\n       s = sqrtq (z);\n       /* Compute an extended precision square root from\n \t the Newton iteration  s -> 0.5 * (s + z / s).\n-         The change w from s to the improved value is\n+\t The change w from s to the improved value is\n \t    w = 0.5 * (s + z / s) - s  = (s^2 + z)/2s - s = (z - s^2)/2s.\n-          Express s = f1 + f2 where f1 * f1 is exactly representable.\n+\t  Express s = f1 + f2 where f1 * f1 is exactly representable.\n \t  w = (z - s^2)/2s = (z - f1^2 - 2 f1 f2 - f2^2)/2s .\n-          s + w has extended precision.  */\n+\t  s + w has extended precision.  */\n       u.value = s;\n       u.words32.w2 = 0;\n       u.words32.w3 = 0;"}, {"sha": "95235893ee64f822075ea67fad11970ede2a72f1", "filename": "libquadmath/math/asinhq.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fasinhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fasinhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fasinhq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* asinhq.c -- __float128 version of s_asinh.c.\n+/* s_asinhl.c -- long double version of s_asinh.c.\n  * Conversion to long double by Ulrich Drepper,\n  * Cygnus Support, drepper@cygnus.com.\n  */\n@@ -14,21 +14,25 @@\n  * ====================================================\n  */\n \n-/* asinhl(x)\n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n+/* asinhq(x)\n  * Method :\n  *      Based on\n- *              asinhl(x) = signl(x) * logl [ |x| + sqrtl(x*x+1) ]\n+ *              asinhq(x) = signl(x) * logq [ |x| + sqrtq(x*x+1) ]\n  *      we have\n- *      asinhl(x) := x  if  1+x*x=1,\n- *                := signl(x)*(logl(x)+ln2)) for large |x|, else\n- *                := signl(x)*logl(2|x|+1/(|x|+sqrtl(x*x+1))) if|x|>2, else\n- *                := signl(x)*log1pl(|x| + x^2/(1 + sqrtl(1+x^2)))\n+ *      asinhq(x) := x  if  1+x*x=1,\n+ *                := signl(x)*(logq(x)+ln2)) for large |x|, else\n+ *                := signl(x)*logq(2|x|+1/(|x|+sqrtq(x*x+1))) if|x|>2, else\n+ *                := signl(x)*log1pq(|x| + x^2/(1 + sqrtq(1+x^2)))\n  */\n \n #include \"quadmath-imp.h\"\n \n static const __float128\n-  one = 1.0Q,\n+  one = 1,\n   ln2 = 6.931471805599453094172321214581765681e-1Q,\n   huge = 1.0e+4900Q;\n "}, {"sha": "ab98c3ba868318ee37f0119fa73baf6bbcf62ced", "filename": "libquadmath/math/asinq.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fasinq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fasinq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fasinq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -10,11 +10,11 @@\n  */\n \n /*\n-  __float128 expansions are\n+  Long double expansions are\n   Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n-  and are incorporated herein by permission of the author.  The author \n-  reserves the right to distribute this material elsewhere under different \n-  copying permissions.  These modifications are distributed here under the \n+  and are incorporated herein by permission of the author.  The author\n+  reserves the right to distribute this material elsewhere under different\n+  copying permissions.  These modifications are distributed here under the\n   following terms:\n \n     This library is free software; you can redistribute it and/or\n@@ -28,10 +28,10 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n-/* asinq(x)\n+/* __ieee754_asin(x)\n  * Method :\n  *\tSince  asin(x) = x + x^3/6 + x^5*3/40 + x^7*15/336 + ...\n  *\twe approximate asin(x) on [0,0.5] by\n@@ -58,11 +58,10 @@\n  *\n  */\n \n-\n #include \"quadmath-imp.h\"\n \n static const __float128\n-  one = 1.0Q,\n+  one = 1,\n   huge = 1.0e+4932Q,\n   pio2_hi = 1.5707963267948966192313216916397514420986Q,\n   pio2_lo = 4.3359050650618905123985220130216759843812E-35Q,\n@@ -129,8 +128,7 @@ static const __float128\n __float128\n asinq (__float128 x)\n {\n-  __float128 t = 0;\n-  __float128 w, p, q, c, r, s;\n+  __float128 t, w, p, q, c, r, s;\n   int32_t ix, sign, flag;\n   ieee854_float128 u;\n "}, {"sha": "07dd28fd0c561707e4bd6853ecd964bd2358b9b3", "filename": "libquadmath/math/atan2q.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fatan2q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fatan2q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fatan2q.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* atan2q.c -- __float128 version of e_atan2.c.\n+/* e_atan2l.c -- long double version of e_atan2.c.\n  * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -15,9 +15,9 @@\n \n /* atan2q(y,x)\n  * Method :\n- *\t1. Reduce y to positive by atan2q(y,x)=-atan2q(-y,x).\n+ *\t1. Reduce y to positive by atan2l(y,x)=-atan2l(-y,x).\n  *\t2. Reduce x to positive by (if x and y are unexceptional):\n- *\t\tARG (x+iy) = arctan(y/x)   \t   ... if x > 0,\n+ *\t\tARG (x+iy) = arctan(y/x)\t   ... if x > 0,\n  *\t\tARG (x+iy) = pi - arctan[y/(-x)]   ... if x < 0,\n  *\n  * Special cases:\n@@ -51,7 +51,7 @@ pi      = 3.14159265358979323846264338327950280e+00Q, /* 4000921fb54442d18469898\n pi_lo   = 8.67181013012378102479704402604335225e-35Q; /* 3f8dcd129024e088a67cc74020bbea64 */\n \n __float128\n-atan2q (__float128 y, __float128 x)\n+atan2q(__float128 y, __float128 x)\n {\n \t__float128 z;\n \tint64_t k,m,hx,hy,ix,iy;\n@@ -64,14 +64,14 @@ atan2q (__float128 y, __float128 x)\n \tif(((ix|((lx|-lx)>>63))>0x7fff000000000000LL)||\n \t   ((iy|((ly|-ly)>>63))>0x7fff000000000000LL))\t/* x or y is NaN */\n \t   return x+y;\n-\tif(((hx-0x3fff000000000000LL)|lx)==0) return atanq(y);   /* x=1.0Q */\n+\tif(((hx-0x3fff000000000000LL)|lx)==0) return atanq(y);   /* x=1.0L */\n \tm = ((hy>>63)&1)|((hx>>62)&2);\t/* 2*sign(x)+sign(y) */\n \n     /* when y = 0 */\n \tif((iy|ly)==0) {\n \t    switch(m) {\n \t\tcase 0:\n-\t\tcase 1: return y; \t/* atan(+-0,+anything)=+-0 */\n+\t\tcase 1: return y;\t/* atan(+-0,+anything)=+-0 */\n \t\tcase 2: return  pi+tiny;/* atan(+0,-anything) = pi */\n \t\tcase 3: return -pi-tiny;/* atan(-0,-anything) =-pi */\n \t    }\n@@ -85,8 +85,8 @@ atan2q (__float128 y, __float128 x)\n \t\tswitch(m) {\n \t\t    case 0: return  pi_o_4+tiny;/* atan(+INF,+INF) */\n \t\t    case 1: return -pi_o_4-tiny;/* atan(-INF,+INF) */\n-\t\t    case 2: return  3.0Q*pi_o_4+tiny;/*atan(+INF,-INF)*/\n-\t\t    case 3: return -3.0Q*pi_o_4-tiny;/*atan(-INF,-INF)*/\n+\t\t    case 2: return  3*pi_o_4+tiny;/*atan(+INF,-INF)*/\n+\t\t    case 3: return -3*pi_o_4-tiny;/*atan(-INF,-INF)*/\n \t\t}\n \t    } else {\n \t\tswitch(m) {\n@@ -102,19 +102,19 @@ atan2q (__float128 y, __float128 x)\n \n     /* compute y/x */\n \tk = (iy-ix)>>48;\n-\tif(k > 120) z=pi_o_2+0.5Q*pi_lo; \t/* |y/x| >  2**120 */\n-\telse if(hx<0&&k<-120) z=0.0Q; \t\t/* |y|/x < -2**120 */\n+\tif(k > 120) z=pi_o_2+0.5Q*pi_lo;\t/* |y/x| >  2**120 */\n+\telse if(hx<0&&k<-120) z=0;\t\t/* |y|/x < -2**120 */\n \telse z=atanq(fabsq(y/x));\t\t/* safe to do y/x */\n \tswitch (m) {\n \t    case 0: return       z  ;\t/* atan(+,+) */\n \t    case 1: {\n-\t    \t      uint64_t zh;\n+\t\t      uint64_t zh;\n \t\t      GET_FLT128_MSW64(zh,z);\n \t\t      SET_FLT128_MSW64(z,zh ^ 0x8000000000000000ULL);\n \t\t    }\n \t\t    return       z  ;\t/* atan(-,+) */\n \t    case 2: return  pi-(z-pi_lo);/* atan(+,-) */\n \t    default: /* case 3 */\n-\t    \t    return  (z-pi_lo)-pi;/* atan(-,-) */\n+\t\t    return  (z-pi_lo)-pi;/* atan(-,-) */\n \t}\n }"}, {"sha": "c285f4a44215c40b98d03e912a90c63a4873f55b", "filename": "libquadmath/math/atanhq.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fatanhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fatanhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fatanhq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* s_atanhl.c -- __float128 version of s_atan.c.\n- * Conversion to __float128 by Ulrich Drepper,\n+/* s_atanhl.c -- long double version of s_atan.c.\n+ * Conversion to long double by Ulrich Drepper,\n  * Cygnus Support, drepper@cygnus.com.\n  */\n \n@@ -22,8 +22,8 @@\n  *\tatanhl(x) = --- * log(1 + -------) = 0.5 * log1p(2 * --------)\n  *                   2             1 - x                      1 - x\n  *\n- * \tFor x<0.5\n- *\tatanhl(x) = 0.5*log1pl(2x+2x*x/(1-x))\n+ *\tFor x<0.5\n+ *\tatanhl(x) = 0.5*log1pq(2x+2x*x/(1-x))\n  *\n  * Special cases:\n  *\tatanhl(x) is NaN if |x| > 1 with signal;\n@@ -34,11 +34,12 @@\n \n #include \"quadmath-imp.h\"\n \n-static const __float128 one = 1.0Q, huge = 1e4900Q;\n-static const __float128 zero = 0.0Q;\n+static const __float128 one = 1, huge = 1e4900Q;\n+\n+static const __float128 zero = 0;\n \n __float128\n-atanhq (__float128 x)\n+atanhq(__float128 x)\n {\n \t__float128 t;\n \tuint32_t jx, ix;"}, {"sha": "051d30a7b3f78817a8d953f0bfa972f76fb23154", "filename": "libquadmath/math/atanq.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fatanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fatanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fatanq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,15 +1,15 @@\n /*\t\t\t\t\t\t\ts_atanl.c\n  *\n- *\tInverse circular tangent for 128-bit __float128 precision\n+ *\tInverse circular tangent for 128-bit long double precision\n  *      (arctangent)\n  *\n  *\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, atanl();\n+ * long double x, y, atanq();\n  *\n- * y = atanl( x );\n+ * y = atanq( x );\n  *\n  *\n  *\n@@ -55,9 +55,8 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n-\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n@@ -228,7 +227,7 @@ atanq (__float128 x)\n       /* Index of nearest table element.\n \t Roundoff to integer is asymmetrical to avoid cancellation when t < 0\n          (cf. fdlibm). */\n-      k = 8.0Q * x + 0.25Q;\n+      k = 8.0 * x + 0.25;\n       u = 0.125Q * k;\n       /* Small arctan argument.  */\n       t = (x - u) / (1.0 + x * u);"}, {"sha": "2b170880edc96fe461d296f9f0baae30b7190e93", "filename": "libquadmath/math/cacoshq.c", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcacoshq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcacoshq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcacoshq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Return arc hyperbole cosine for __float128 value.\n-   Copyright (C) 1997, 1998, 2006 Free Software Foundation, Inc.\n+/* Return arc hyperbolic cosine for a complex type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,13 +14,11 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n __complex128\n cacoshq (__complex128 x)\n {\n@@ -38,57 +36,54 @@ cacoshq (__complex128 x)\n \t    __imag__ res = nanq (\"\");\n \t  else\n \t    __imag__ res = copysignq ((rcls == QUADFP_INFINITE\n-\t\t\t\t       ? (__real__ x < 0.0\n-\t\t\t\t\t  ? M_PIq - M_PI_4q : M_PI_4q)\n-\t\t\t\t       : M_PI_2q), __imag__ x);\n+\t\t\t\t\t? (__real__ x < 0\n+\t\t\t\t\t   ? M_PIq - M_PI_4q\n+\t\t\t\t\t   : M_PI_4q)\n+\t\t\t\t\t: M_PI_2q), __imag__ x);\n \t}\n       else if (rcls == QUADFP_INFINITE)\n \t{\n \t  __real__ res = HUGE_VALQ;\n \n \t  if (icls >= QUADFP_ZERO)\n-\t    __imag__ res = copysignq (signbitq (__real__ x) ? M_PIq : 0.0,\n-\t\t\t\t      __imag__ x);\n+\t    __imag__ res = copysignq (signbitq (__real__ x)\n+\t\t\t\t       ? M_PIq : 0, __imag__ x);\n \t  else\n \t    __imag__ res = nanq (\"\");\n \t}\n       else\n \t{\n \t  __real__ res = nanq (\"\");\n-\t  __imag__ res = nanq (\"\");\n+\t  if (rcls == QUADFP_ZERO)\n+\t    __imag__ res = M_PI_2q;\n+\t  else\n+\t    __imag__ res = nanq (\"\");\n \t}\n     }\n   else if (rcls == QUADFP_ZERO && icls == QUADFP_ZERO)\n     {\n-      __real__ res = 0.0;\n+      __real__ res = 0;\n       __imag__ res = copysignq (M_PI_2q, __imag__ x);\n     }\n-  /* The factor 16 is just a guess.  */\n-  else if (16.0Q * fabsq (__imag__ x) < fabsq (__real__ x))\n-    {\n-      /* Kahan's formula which avoid cancellation through subtraction in\n-\t some cases.  */\n-      res = 2.0Q * clogq (csqrtq ((x + 1.0Q) / 2.0Q)\n-\t\t\t    + csqrtq ((x - 1.0Q) / 2.0Q));\n-      if (signbitq (__real__ res))\n-\t__real__ res = 0.0Q;\n-    }\n   else\n     {\n       __complex128 y;\n \n-      __real__ y = (__real__ x - __imag__ x) * (__real__ x + __imag__ x) - 1.0;\n-      __imag__ y = 2.0 * __real__ x * __imag__ x;\n-\n-      y = csqrtq (y);\n+      __real__ y = -__imag__ x;\n+      __imag__ y = __real__ x;\n \n-      if (signbitq (x))\n-\ty = -y;\n+      y = __quadmath_kernel_casinhq (y, 1);\n \n-      __real__ y += __real__ x;\n-      __imag__ y += __imag__ x;\n-\n-      res = clogq (y);\n+      if (signbitq (__imag__ x))\n+\t{\n+\t  __real__ res = __real__ y;\n+\t  __imag__ res = -__imag__ y;\n+\t}\n+      else\n+\t{\n+\t  __real__ res = -__real__ y;\n+\t  __imag__ res = __imag__ y;\n+\t}\n     }\n \n   return res;"}, {"sha": "0862c3aba63d8aa8264e06ede21cb3c81a1a5308", "filename": "libquadmath/math/cacosq.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcacosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcacosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcacosq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Return cosine of complex __float128 value.\n-   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+/* Return cosine of a complex type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,9 +14,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n@@ -25,11 +24,29 @@ cacosq (__complex128 x)\n {\n   __complex128 y;\n   __complex128 res;\n-\n-  y = casinq (x);\n-\n-  __real__ res = M_PI_2q - __real__ y;\n-  __imag__ res = -__imag__ y;\n+  int rcls = fpclassifyq (__real__ x);\n+  int icls = fpclassifyq (__imag__ x);\n+\n+  if (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE\n+      || (rcls == QUADFP_ZERO && icls == QUADFP_ZERO))\n+    {\n+      y = casinq (x);\n+\n+      __real__ res = (__float128) M_PI_2q - __real__ y;\n+      if (__real__ res == 0)\n+\t__real__ res = 0;\n+      __imag__ res = -__imag__ y;\n+    }\n+  else\n+    {\n+      __real__ y = -__imag__ x;\n+      __imag__ y = __real__ x;\n+\n+      y = __quadmath_kernel_casinhq (y, 1);\n+\n+      __real__ res = __imag__ y;\n+      __imag__ res = __real__ y;\n+    }\n \n   return res;\n }"}, {"sha": "878a6c2b31722c2ad02d2eabd4fb847ed59b2135", "filename": "libquadmath/math/casinhq.c", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcasinhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcasinhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcasinhq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Return arc hyperbole sine for __float128 value.\n-   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+/* Return arc hyperbolic sine for a complex float type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,13 +14,11 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n __complex128\n casinhq (__complex128 x)\n {\n@@ -37,15 +35,16 @@ casinhq (__complex128 x)\n \t  if (rcls == QUADFP_NAN)\n \t    __imag__ res = nanq (\"\");\n \t  else\n-\t    __imag__ res = copysignq (rcls >= QUADFP_ZERO ? M_PI_2q : M_PI_4q,\n-\t\t\t\t      __imag__ x);\n+\t    __imag__ res = copysignq ((rcls >= QUADFP_ZERO\n+\t\t\t\t        ? M_PI_2q : M_PI_4q),\n+\t\t\t\t       __imag__ x);\n \t}\n       else if (rcls <= QUADFP_INFINITE)\n \t{\n \t  __real__ res = __real__ x;\n \t  if ((rcls == QUADFP_INFINITE && icls >= QUADFP_ZERO)\n \t      || (rcls == QUADFP_NAN && icls == QUADFP_ZERO))\n-\t    __imag__ res = copysignq (0.0, __imag__ x);\n+\t    __imag__ res = copysignq (0, __imag__ x);\n \t  else\n \t    __imag__ res = nanq (\"\");\n \t}\n@@ -61,22 +60,7 @@ casinhq (__complex128 x)\n     }\n   else\n     {\n-      __complex128 y;\n-\n-      __real__ y = (__real__ x - __imag__ x) * (__real__ x + __imag__ x) + 1.0;\n-      __imag__ y = 2.0 * __real__ x * __imag__ x;\n-\n-      y = csqrtq (y);\n-\n-      __real__ y += __real__ x;\n-      __imag__ y += __imag__ x;\n-\n-      res = clogq (y);\n-\n-      /* Ensure zeros have correct sign and results are correct if\n-\t very close to branch cuts.  */\n-      __real__ res = copysignq (__real__ res, __real__ x);\n-      __imag__ res = copysignq (__imag__ res, __imag__ x);\n+      res = __quadmath_kernel_casinhq (x, 0);\n     }\n \n   return res;"}, {"sha": "af384efd611fc37058a38e72ff3c45b58ed74405", "filename": "libquadmath/math/casinhq_kernel.c", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcasinhq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcasinhq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcasinhq_kernel.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -0,0 +1,202 @@\n+/* Return arc hyperbolic sine for a complex float type, with the\n+   imaginary part of the result possibly adjusted for use in\n+   computing other functions.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+/* Return the complex inverse hyperbolic sine of finite nonzero Z,\n+   with the imaginary part of the result subtracted from pi/2 if ADJ\n+   is nonzero.  */\n+\n+__complex128\n+__quadmath_kernel_casinhq (__complex128 x, int adj)\n+{\n+  __complex128 res;\n+  __float128 rx, ix;\n+  __complex128 y;\n+\n+  /* Avoid cancellation by reducing to the first quadrant.  */\n+  rx = fabsq (__real__ x);\n+  ix = fabsq (__imag__ x);\n+\n+  if (rx >= 1 / FLT128_EPSILON || ix >= 1 / FLT128_EPSILON)\n+    {\n+      /* For large x in the first quadrant, x + csqrt (1 + x * x)\n+\t is sufficiently close to 2 * x to make no significant\n+\t difference to the result; avoid possible overflow from\n+\t the squaring and addition.  */\n+      __real__ y = rx;\n+      __imag__ y = ix;\n+\n+      if (adj)\n+\t{\n+\t  __float128 t = __real__ y;\n+\t  __real__ y = copysignq (__imag__ y, __imag__ x);\n+\t  __imag__ y = t;\n+\t}\n+\n+      res = clogq (y);\n+      __real__ res += (__float128) M_LN2q;\n+    }\n+  else if (rx >= 0.5Q && ix < FLT128_EPSILON / 8)\n+    {\n+      __float128 s = hypotq (1, rx);\n+\n+      __real__ res = logq (rx + s);\n+      if (adj)\n+\t__imag__ res = atan2q (s, __imag__ x);\n+      else\n+\t__imag__ res = atan2q (ix, s);\n+    }\n+  else if (rx < FLT128_EPSILON / 8 && ix >= 1.5Q)\n+    {\n+      __float128 s = sqrtq ((ix + 1) * (ix - 1));\n+\n+      __real__ res = logq (ix + s);\n+      if (adj)\n+\t__imag__ res = atan2q (rx, copysignq (s, __imag__ x));\n+      else\n+\t__imag__ res = atan2q (s, rx);\n+    }\n+  else if (ix > 1 && ix < 1.5Q && rx < 0.5Q)\n+    {\n+      if (rx < FLT128_EPSILON * FLT128_EPSILON)\n+\t{\n+\t  __float128 ix2m1 = (ix + 1) * (ix - 1);\n+\t  __float128 s = sqrtq (ix2m1);\n+\n+\t  __real__ res = log1pq (2 * (ix2m1 + ix * s)) / 2;\n+\t  if (adj)\n+\t    __imag__ res = atan2q (rx, copysignq (s, __imag__ x));\n+\t  else\n+\t    __imag__ res = atan2q (s, rx);\n+\t}\n+      else\n+\t{\n+\t  __float128 ix2m1 = (ix + 1) * (ix - 1);\n+\t  __float128 rx2 = rx * rx;\n+\t  __float128 f = rx2 * (2 + rx2 + 2 * ix * ix);\n+\t  __float128 d = sqrtq (ix2m1 * ix2m1 + f);\n+\t  __float128 dp = d + ix2m1;\n+\t  __float128 dm = f / dp;\n+\t  __float128 r1 = sqrtq ((dm + rx2) / 2);\n+\t  __float128 r2 = rx * ix / r1;\n+\n+\t  __real__ res = log1pq (rx2 + dp + 2 * (rx * r1 + ix * r2)) / 2;\n+\t  if (adj)\n+\t    __imag__ res = atan2q (rx + r1, copysignq (ix + r2, __imag__ x));\n+\t  else\n+\t    __imag__ res = atan2q (ix + r2, rx + r1);\n+\t}\n+    }\n+  else if (ix == 1 && rx < 0.5Q)\n+    {\n+      if (rx < FLT128_EPSILON / 8)\n+\t{\n+\t  __real__ res = log1pq (2 * (rx + sqrtq (rx))) / 2;\n+\t  if (adj)\n+\t    __imag__ res = atan2q (sqrtq (rx), copysignq (1, __imag__ x));\n+\t  else\n+\t    __imag__ res = atan2q (1, sqrtq (rx));\n+\t}\n+      else\n+\t{\n+\t  __float128 d = rx * sqrtq (4 + rx * rx);\n+\t  __float128 s1 = sqrtq ((d + rx * rx) / 2);\n+\t  __float128 s2 = sqrtq ((d - rx * rx) / 2);\n+\n+\t  __real__ res = log1pq (rx * rx + d + 2 * (rx * s1 + s2)) / 2;\n+\t  if (adj)\n+\t    __imag__ res = atan2q (rx + s1, copysignq (1 + s2, __imag__ x));\n+\t  else\n+\t    __imag__ res = atan2q (1 + s2, rx + s1);\n+\t}\n+    }\n+  else if (ix < 1 && rx < 0.5Q)\n+    {\n+      if (ix >= FLT128_EPSILON)\n+\t{\n+\t  if (rx < FLT128_EPSILON * FLT128_EPSILON)\n+\t    {\n+\t      __float128 onemix2 = (1 + ix) * (1 - ix);\n+\t      __float128 s = sqrtq (onemix2);\n+\n+\t      __real__ res = log1pq (2 * rx / s) / 2;\n+\t      if (adj)\n+\t\t__imag__ res = atan2q (s, __imag__ x);\n+\t      else\n+\t\t__imag__ res = atan2q (ix, s);\n+\t    }\n+\t  else\n+\t    {\n+\t      __float128 onemix2 = (1 + ix) * (1 - ix);\n+\t      __float128 rx2 = rx * rx;\n+\t      __float128 f = rx2 * (2 + rx2 + 2 * ix * ix);\n+\t      __float128 d = sqrtq (onemix2 * onemix2 + f);\n+\t      __float128 dp = d + onemix2;\n+\t      __float128 dm = f / dp;\n+\t      __float128 r1 = sqrtq ((dp + rx2) / 2);\n+\t      __float128 r2 = rx * ix / r1;\n+\n+\t      __real__ res = log1pq (rx2 + dm + 2 * (rx * r1 + ix * r2)) / 2;\n+\t      if (adj)\n+\t\t__imag__ res = atan2q (rx + r1, copysignq (ix + r2,\n+\t\t\t\t\t\t\t     __imag__ x));\n+\t      else\n+\t\t__imag__ res = atan2q (ix + r2, rx + r1);\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  __float128 s = hypotq (1, rx);\n+\n+\t  __real__ res = log1pq (2 * rx * (rx + s)) / 2;\n+\t  if (adj)\n+\t    __imag__ res = atan2q (s, __imag__ x);\n+\t  else\n+\t    __imag__ res = atan2q (ix, s);\n+\t}\n+      math_check_force_underflow_nonneg (__real__ res);\n+    }\n+  else\n+    {\n+      __real__ y = (rx - ix) * (rx + ix) + 1;\n+      __imag__ y = 2 * rx * ix;\n+\n+      y = csqrtq (y);\n+\n+      __real__ y += rx;\n+      __imag__ y += ix;\n+\n+      if (adj)\n+\t{\n+\t  __float128 t = __real__ y;\n+\t  __real__ y = copysignq (__imag__ y, __imag__ x);\n+\t  __imag__ y = t;\n+\t}\n+\n+      res = clogq (y);\n+    }\n+\n+  /* Give results the correct sign for the original argument.  */\n+  __real__ res = copysignq (__real__ res, __real__ x);\n+  __imag__ res = copysignq (__imag__ res, (adj ? 1 : __imag__ x));\n+\n+  return res;\n+}"}, {"sha": "24ba60035e2a6b30b6d4daa6a0783740715b8b5e", "filename": "libquadmath/math/casinq.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcasinq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcasinq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcasinq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Return arc sine of complex __float128 value.\n-   Copyright (C) 1997 Free Software Foundation, Inc.\n+/* Return arc sine of a complex float type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,21 +14,19 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n __complex128\n casinq (__complex128 x)\n {\n   __complex128 res;\n \n   if (isnanq (__real__ x) || isnanq (__imag__ x))\n     {\n-      if (__real__ x == 0.0)\n+      if (__real__ x == 0)\n \t{\n \t  res = x;\n \t}"}, {"sha": "adc0a9dddec1dc053bf96cc88a9c713eabb18f67", "filename": "libquadmath/math/catanhq.c", "status": "modified", "additions": 73, "deletions": 19, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcatanhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcatanhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcatanhq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Return arc hyperbole tangent for __float128 value.\n-   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+/* Return arc hyperbolic tangent for a complex float type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,30 +14,28 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n __complex128\n catanhq (__complex128 x)\n {\n   __complex128 res;\n   int rcls = fpclassifyq (__real__ x);\n   int icls = fpclassifyq (__imag__ x);\n \n-  if (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE)\n+  if (__glibc_unlikely (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE))\n     {\n       if (icls == QUADFP_INFINITE)\n \t{\n-\t  __real__ res = copysignq (0.0, __real__ x);\n+\t  __real__ res = copysignq (0, __real__ x);\n \t  __imag__ res = copysignq (M_PI_2q, __imag__ x);\n \t}\n       else if (rcls == QUADFP_INFINITE || rcls == QUADFP_ZERO)\n \t{\n-\t  __real__ res = copysignq (0.0, __real__ x);\n+\t  __real__ res = copysignq (0, __real__ x);\n \t  if (icls >= QUADFP_ZERO)\n \t    __imag__ res = copysignq (M_PI_2q, __imag__ x);\n \t  else\n@@ -49,27 +47,83 @@ catanhq (__complex128 x)\n \t  __imag__ res = nanq (\"\");\n \t}\n     }\n-  else if (rcls == QUADFP_ZERO && icls == QUADFP_ZERO)\n+  else if (__glibc_unlikely (rcls == QUADFP_ZERO && icls == QUADFP_ZERO))\n     {\n       res = x;\n     }\n   else\n     {\n-      __float128 i2, num, den;\n+      if (fabsq (__real__ x) >= 16 / FLT128_EPSILON\n+\t  || fabsq (__imag__ x) >= 16 / FLT128_EPSILON)\n+\t{\n+\t  __imag__ res = copysignq (M_PI_2q, __imag__ x);\n+\t  if (fabsq (__imag__ x) <= 1)\n+\t    __real__ res = 1 / __real__ x;\n+\t  else if (fabsq (__real__ x) <= 1)\n+\t    __real__ res = __real__ x / __imag__ x / __imag__ x;\n+\t  else\n+\t    {\n+\t      __float128 h = hypotq (__real__ x / 2, __imag__ x / 2);\n+\t      __real__ res = __real__ x / h / h / 4;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  if (fabsq (__real__ x) == 1\n+\t      && fabsq (__imag__ x) < FLT128_EPSILON * FLT128_EPSILON)\n+\t    __real__ res = (copysignq (0.5Q, __real__ x)\n+\t\t\t    * ((__float128) M_LN2q\n+\t\t\t       - logq (fabsq (__imag__ x))));\n+\t  else\n+\t    {\n+\t      __float128 i2 = 0;\n+\t      if (fabsq (__imag__ x) >= FLT128_EPSILON * FLT128_EPSILON)\n+\t\ti2 = __imag__ x * __imag__ x;\n+\n+\t      __float128 num = 1 + __real__ x;\n+\t      num = i2 + num * num;\n \n-      i2 = __imag__ x * __imag__ x;\n+\t      __float128 den = 1 - __real__ x;\n+\t      den = i2 + den * den;\n \n-      num = 1.0 + __real__ x;\n-      num = i2 + num * num;\n+\t      __float128 f = num / den;\n+\t      if (f < 0.5Q)\n+\t\t__real__ res = 0.25Q * logq (f);\n+\t      else\n+\t\t{\n+\t\t  num = 4 * __real__ x;\n+\t\t  __real__ res = 0.25Q * log1pq (num / den);\n+\t\t}\n+\t    }\n \n-      den = 1.0 - __real__ x;\n-      den = i2 + den * den;\n+\t  __float128 absx, absy, den;\n \n-      __real__ res = 0.25 * (logq (num) - logq (den));\n+\t  absx = fabsq (__real__ x);\n+\t  absy = fabsq (__imag__ x);\n+\t  if (absx < absy)\n+\t    {\n+\t      __float128 t = absx;\n+\t      absx = absy;\n+\t      absy = t;\n+\t    }\n \n-      den = 1 - __real__ x * __real__ x - i2;\n+\t  if (absy < FLT128_EPSILON / 2)\n+\t    {\n+\t      den = (1 - absx) * (1 + absx);\n+\t      if (den == 0)\n+\t\tden = 0;\n+\t    }\n+\t  else if (absx >= 1)\n+\t    den = (1 - absx) * (1 + absx) - absy * absy;\n+\t  else if (absx >= 0.75Q || absy >= 0.5Q)\n+\t    den = -__quadmath_x2y2m1q (absx, absy);\n+\t  else\n+\t    den = (1 - absx) * (1 + absx) - absy * absy;\n+\n+\t  __imag__ res = 0.5Q * atan2q (2 * __imag__ x, den);\n+\t}\n \n-      __imag__ res = 0.5 * atan2q (2.0 * __imag__ x, den);\n+      math_check_force_underflow_complex (res);\n     }\n \n   return res;"}, {"sha": "c1c50b7a5a731f77e3dc2ea7284b65a6626b9f98", "filename": "libquadmath/math/catanq.c", "status": "modified", "additions": 75, "deletions": 20, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcatanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcatanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcatanq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Return arc tangent of complex __float128 value.\n-   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+/* Return arc tangent of complex float type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,67 +14,122 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n __complex128\n catanq (__complex128 x)\n {\n   __complex128 res;\n   int rcls = fpclassifyq (__real__ x);\n   int icls = fpclassifyq (__imag__ x);\n \n-  if (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE)\n+  if (__glibc_unlikely (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE))\n     {\n       if (rcls == QUADFP_INFINITE)\n \t{\n \t  __real__ res = copysignq (M_PI_2q, __real__ x);\n-\t  __imag__ res = copysignq (0.0, __imag__ x);\n+\t  __imag__ res = copysignq (0, __imag__ x);\n \t}\n       else if (icls == QUADFP_INFINITE)\n \t{\n \t  if (rcls >= QUADFP_ZERO)\n \t    __real__ res = copysignq (M_PI_2q, __real__ x);\n \t  else\n \t    __real__ res = nanq (\"\");\n-\t  __imag__ res = copysignq (0.0, __imag__ x);\n+\t  __imag__ res = copysignq (0, __imag__ x);\n \t}\n       else if (icls == QUADFP_ZERO || icls == QUADFP_INFINITE)\n \t{\n \t  __real__ res = nanq (\"\");\n-\t  __imag__ res = copysignq (0.0, __imag__ x);\n+\t  __imag__ res = copysignq (0, __imag__ x);\n \t}\n       else\n \t{\n \t  __real__ res = nanq (\"\");\n \t  __imag__ res = nanq (\"\");\n \t}\n     }\n-  else if (rcls == QUADFP_ZERO && icls == QUADFP_ZERO)\n+  else if (__glibc_unlikely (rcls == QUADFP_ZERO && icls == QUADFP_ZERO))\n     {\n       res = x;\n     }\n   else\n     {\n-      __float128 r2, num, den;\n+      if (fabsq (__real__ x) >= 16 / FLT128_EPSILON\n+\t  || fabsq (__imag__ x) >= 16 / FLT128_EPSILON)\n+\t{\n+\t  __real__ res = copysignq (M_PI_2q, __real__ x);\n+\t  if (fabsq (__real__ x) <= 1)\n+\t    __imag__ res = 1 / __imag__ x;\n+\t  else if (fabsq (__imag__ x) <= 1)\n+\t    __imag__ res = __imag__ x / __real__ x / __real__ x;\n+\t  else\n+\t    {\n+\t      __float128 h = hypotq (__real__ x / 2, __imag__ x / 2);\n+\t      __imag__ res = __imag__ x / h / h / 4;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  __float128 den, absx, absy;\n \n-      r2 = __real__ x * __real__ x;\n+\t  absx = fabsq (__real__ x);\n+\t  absy = fabsq (__imag__ x);\n+\t  if (absx < absy)\n+\t    {\n+\t      __float128 t = absx;\n+\t      absx = absy;\n+\t      absy = t;\n+\t    }\n \n-      den = 1 - r2 - __imag__ x * __imag__ x;\n+\t  if (absy < FLT128_EPSILON / 2)\n+\t    {\n+\t      den = (1 - absx) * (1 + absx);\n+\t      if (den == 0)\n+\t\tden = 0;\n+\t    }\n+\t  else if (absx >= 1)\n+\t    den = (1 - absx) * (1 + absx) - absy * absy;\n+\t  else if (absx >= 0.75Q || absy >= 0.5Q)\n+\t    den = -__quadmath_x2y2m1q (absx, absy);\n+\t  else\n+\t    den = (1 - absx) * (1 + absx) - absy * absy;\n+\n+\t  __real__ res = 0.5Q * atan2q (2 * __real__ x, den);\n+\n+\t  if (fabsq (__imag__ x) == 1\n+\t      && fabsq (__real__ x) < FLT128_EPSILON * FLT128_EPSILON)\n+\t    __imag__ res = (copysignq (0.5Q, __imag__ x)\n+\t\t\t    * ((__float128) M_LN2q\n+\t\t\t       - logq (fabsq (__real__ x))));\n+\t  else\n+\t    {\n+\t      __float128 r2 = 0, num, f;\n+\n+\t      if (fabsq (__real__ x) >= FLT128_EPSILON * FLT128_EPSILON)\n+\t\tr2 = __real__ x * __real__ x;\n \n-      __real__ res = 0.5 * atan2q (2.0 * __real__ x, den);\n+\t      num = __imag__ x + 1;\n+\t      num = r2 + num * num;\n \n-      num = __imag__ x + 1.0;\n-      num = r2 + num * num;\n+\t      den = __imag__ x - 1;\n+\t      den = r2 + den * den;\n \n-      den = __imag__ x - 1.0;\n-      den = r2 + den * den;\n+\t      f = num / den;\n+\t      if (f < 0.5Q)\n+\t\t__imag__ res = 0.25Q * logq (f);\n+\t      else\n+\t\t{\n+\t\t  num = 4 * __imag__ x;\n+\t\t  __imag__ res = 0.25Q * log1pq (num / den);\n+\t\t}\n+\t    }\n+\t}\n \n-      __imag__ res = 0.25 * logq (num / den);\n+      math_check_force_underflow_complex (res);\n     }\n \n   return res;"}, {"sha": "5b8c30ea763c2c5fec696a93325a490401eeb917", "filename": "libquadmath/math/cbrtq.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcbrtq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcbrtq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcbrtq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,12 +1,12 @@\n /*\t\t\t\t\t\t\tcbrtq.c\n  *\n- *\tCube root, __float128 precision\n+ *\tCube root, long double precision\n  *\n  *\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, cbrtq();\n+ * long double x, y, cbrtq();\n  *\n  * y = cbrtq( x );\n  *\n@@ -53,7 +53,6 @@ Adapted for glibc October, 2001.\n     License along with this library; if not, see\n     <http://www.gnu.org/licenses/>.  */\n \n-\n #include \"quadmath-imp.h\"\n \n static const __float128 CBRT2 = 1.259921049894873164767210607278228350570251Q;\n@@ -63,7 +62,7 @@ static const __float128 CBRT4I = 0.6299605249474365823836053036391141752851257Q;\n \n \n __float128\n-cbrtq ( __float128 x)\n+cbrtq (__float128 x)\n {\n   int e, rem, sign;\n   __float128 z;"}, {"sha": "3772c1aa15404eb6b20b3a03b31bf0c3dcd07ffa", "filename": "libquadmath/math/ccoshq.c", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fccoshq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fccoshq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fccoshq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Complex cosine hyperbole function for complex __float128.\n-   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n+/* Complex cosine hyperbolic function for float types.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -19,35 +19,30 @@\n \n #include \"quadmath-imp.h\"\n \n-#ifdef HAVE_FENV_H\n-# include <fenv.h>\n-#endif\n-\n-\n __complex128\n ccoshq (__complex128 x)\n {\n   __complex128 retval;\n   int rcls = fpclassifyq (__real__ x);\n   int icls = fpclassifyq (__imag__ x);\n \n-  if (__builtin_expect (rcls >= QUADFP_ZERO, 1))\n+  if (__glibc_likely (rcls >= QUADFP_ZERO))\n     {\n       /* Real part is finite.  */\n-      if (__builtin_expect (icls >= QUADFP_ZERO, 1))\n+      if (__glibc_likely (icls >= QUADFP_ZERO))\n \t{\n \t  /* Imaginary part is finite.  */\n \t  const int t = (int) ((FLT128_MAX_EXP - 1) * M_LN2q);\n \t  __float128 sinix, cosix;\n \n-\t  if (__builtin_expect (icls != QUADFP_SUBNORMAL, 1))\n+\t  if (__glibc_likely (fabsq (__imag__ x) > FLT128_MIN))\n \t    {\n \t      sincosq (__imag__ x, &sinix, &cosix);\n \t    }\n \t  else\n \t    {\n \t      sinix = __imag__ x;\n-\t      cosix = 1.0Q;\n+\t      cosix = 1;\n \t    }\n \n \t  if (fabsq (__real__ x) > t)\n@@ -57,8 +52,8 @@ ccoshq (__complex128 x)\n \t      if (signbitq (__real__ x))\n \t\tsinix = -sinix;\n \t      rx -= t;\n-\t      sinix *= exp_t / 2.0Q;\n-\t      cosix *= exp_t / 2.0Q;\n+\t      sinix *= exp_t / 2;\n+\t      cosix *= exp_t / 2;\n \t      if (rx > t)\n \t\t{\n \t\t  rx -= t;\n@@ -83,62 +78,53 @@ ccoshq (__complex128 x)\n \t      __real__ retval = coshq (__real__ x) * cosix;\n \t      __imag__ retval = sinhq (__real__ x) * sinix;\n \t    }\n+\n+\t  math_check_force_underflow_complex (retval);\n \t}\n       else\n \t{\n-\t  __imag__ retval = __real__ x == 0.0Q ? 0.0Q : nanq (\"\");\n-\t  __real__ retval = nanq (\"\") + nanq (\"\");\n-\n-#ifdef HAVE_FENV_H\n-\t  if (icls == QUADFP_INFINITE)\n-\t    feraiseexcept (FE_INVALID);\n-#endif\n-        }\n+\t  __imag__ retval = __real__ x == 0 ? 0 : nanq (\"\");\n+\t  __real__ retval = __imag__ x - __imag__ x;\n+\t}\n     }\n   else if (rcls == QUADFP_INFINITE)\n     {\n       /* Real part is infinite.  */\n-      if (__builtin_expect (icls > QUADFP_ZERO, 1))\n+      if (__glibc_likely (icls > QUADFP_ZERO))\n \t{\n \t  /* Imaginary part is finite.  */\n \t  __float128 sinix, cosix;\n \n-\t  if (__builtin_expect (icls != QUADFP_SUBNORMAL, 1))\n+\t  if (__glibc_likely (fabsq (__imag__ x) > FLT128_MIN))\n \t    {\n \t      sincosq (__imag__ x, &sinix, &cosix);\n \t    }\n \t  else\n \t    {\n \t      sinix = __imag__ x;\n-\t      cosix = 1.0Q;\n+\t      cosix = 1;\n \t    }\n \n \t  __real__ retval = copysignq (HUGE_VALQ, cosix);\n \t  __imag__ retval = (copysignq (HUGE_VALQ, sinix)\n-\t\t\t     * copysignq (1.0Q, __real__ x));\n+\t\t\t     * copysignq (1, __real__ x));\n \t}\n       else if (icls == QUADFP_ZERO)\n \t{\n \t  /* Imaginary part is 0.0.  */\n \t  __real__ retval = HUGE_VALQ;\n-\t  __imag__ retval = __imag__ x * copysignq (1.0Q, __real__ x);\n+\t  __imag__ retval = __imag__ x * copysignq (1, __real__ x);\n \t}\n       else\n \t{\n-\t  /* The addition raises the invalid exception.  */\n \t  __real__ retval = HUGE_VALQ;\n-\t  __imag__ retval = nanq (\"\") + nanq (\"\");\n-\n-#ifdef HAVE_FENV_H\n-\t  if (icls == QUADFP_INFINITE)\n-\t    feraiseexcept (FE_INVALID);\n-#endif\n-\t }\n+\t  __imag__ retval = __imag__ x - __imag__ x;\n+\t}\n     }\n   else\n     {\n       __real__ retval = nanq (\"\");\n-      __imag__ retval = __imag__ x == 0.0 ? __imag__ x : nanq (\"\");\n+      __imag__ retval = __imag__ x == 0 ? __imag__ x : nanq (\"\");\n     }\n \n   return retval;"}, {"sha": "5d2219766654e48b6425d3c349ace18cb7f266ab", "filename": "libquadmath/math/ceilq.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fceilq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fceilq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fceilq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* ceilq.c -- __float128 version of s_ceil.c.\n+/* s_ceill.c -- long double version of s_ceil.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -13,10 +13,22 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n+/*\n+ * ceilq(x)\n+ * Return x rounded toward -inf to integral value\n+ * Method:\n+ *\tBit twiddling.\n+ */\n+\n+#define NO_MATH_REDIRECT\n+\n #include \"quadmath-imp.h\"\n \n-__float128\n-ceilq (__float128 x)\n+__float128 ceilq(__float128 x)\n {\n \tint64_t i0,i1,j0;\n \tuint64_t i,j;"}, {"sha": "73bb4858b022fd543bfa0451b956f66bdbc7783c", "filename": "libquadmath/math/cexpq.c", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcexpq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Return value of complex exponential function for complex __float128 value.\n-   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n+/* Return value of complex exponential function for a float type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -19,35 +19,30 @@\n \n #include \"quadmath-imp.h\"\n \n-#ifdef HAVE_FENV_H\n-# include <fenv.h>\n-#endif\n-\n-\n __complex128\n cexpq (__complex128 x)\n {\n   __complex128 retval;\n   int rcls = fpclassifyq (__real__ x);\n   int icls = fpclassifyq (__imag__ x);\n \n-  if (__builtin_expect (rcls >= QUADFP_ZERO, 1))\n+  if (__glibc_likely (rcls >= QUADFP_ZERO))\n     {\n       /* Real part is finite.  */\n-      if (__builtin_expect (icls >= QUADFP_ZERO, 1))\n+      if (__glibc_likely (icls >= QUADFP_ZERO))\n \t{\n \t  /* Imaginary part is finite.  */\n \t  const int t = (int) ((FLT128_MAX_EXP - 1) * M_LN2q);\n \t  __float128 sinix, cosix;\n \n-\t  if (__builtin_expect (icls != QUADFP_SUBNORMAL, 1))\n+\t  if (__glibc_likely (fabsq (__imag__ x) > FLT128_MIN))\n \t    {\n \t      sincosq (__imag__ x, &sinix, &cosix);\n \t    }\n \t  else\n \t    {\n \t      sinix = __imag__ x;\n-\t      cosix = 1.0Q;\n+\t      cosix = 1;\n \t    }\n \n \t  if (__real__ x > t)\n@@ -75,6 +70,7 @@ cexpq (__complex128 x)\n \t      __real__ retval = exp_val * cosix;\n \t      __imag__ retval = exp_val * sinix;\n \t    }\n+\t  math_check_force_underflow_complex (retval);\n \t}\n       else\n \t{\n@@ -83,18 +79,16 @@ cexpq (__complex128 x)\n \t  __real__ retval = nanq (\"\");\n \t  __imag__ retval = nanq (\"\");\n \n-#ifdef HAVE_FENV_H\n \t  feraiseexcept (FE_INVALID);\n-#endif\n \t}\n     }\n-  else if (__builtin_expect (rcls == QUADFP_INFINITE, 1))\n+  else if (__glibc_likely (rcls == QUADFP_INFINITE))\n     {\n       /* Real part is infinite.  */\n-      if (__builtin_expect (icls >= QUADFP_ZERO, 1))\n+      if (__glibc_likely (icls >= QUADFP_ZERO))\n \t{\n \t  /* Imaginary part is finite.  */\n-\t  __float128 value = signbitq (__real__ x) ? 0.0Q : HUGE_VALQ;\n+\t  __float128 value = signbitq (__real__ x) ? 0 : HUGE_VALQ;\n \n \t  if (icls == QUADFP_ZERO)\n \t    {\n@@ -106,14 +100,14 @@ cexpq (__complex128 x)\n \t    {\n \t      __float128 sinix, cosix;\n \n-\t      if (__builtin_expect (icls != QUADFP_SUBNORMAL, 1))\n+\t      if (__glibc_likely (fabsq (__imag__ x) > FLT128_MIN))\n \t\t{\n \t\t  sincosq (__imag__ x, &sinix, &cosix);\n \t\t}\n \t      else\n \t\t{\n \t\t  sinix = __imag__ x;\n-\t\t  cosix = 1.0Q;\n+\t\t  cosix = 1;\n \t\t}\n \n \t      __real__ retval = copysignq (value, cosix);\n@@ -123,29 +117,28 @@ cexpq (__complex128 x)\n       else if (signbitq (__real__ x) == 0)\n \t{\n \t  __real__ retval = HUGE_VALQ;\n-\t  __imag__ retval = nanq (\"\");\n-\n-#ifdef HAVE_FENV_H\n-\t  if (icls == QUADFP_INFINITE)\n-\t    feraiseexcept (FE_INVALID);\n-#endif\n+\t  __imag__ retval = __imag__ x - __imag__ x;\n \t}\n       else\n \t{\n-\t  __real__ retval = 0.0Q;\n-\t  __imag__ retval = copysignq (0.0Q, __imag__ x);\n+\t  __real__ retval = 0;\n+\t  __imag__ retval = copysignq (0, __imag__ x);\n \t}\n     }\n   else\n     {\n-      /* If the real part is NaN the result is NaN + iNaN.  */\n+      /* If the real part is NaN the result is NaN + iNaN unless the\n+\t imaginary part is zero.  */\n       __real__ retval = nanq (\"\");\n-      __imag__ retval = nanq (\"\");\n+      if (icls == QUADFP_ZERO)\n+\t__imag__ retval = __imag__ x;\n+      else\n+\t{\n+\t  __imag__ retval = nanq (\"\");\n \n-#ifdef HAVE_FENV_H\n-      if (rcls != QUADFP_NAN || icls != QUADFP_NAN)\n-\tferaiseexcept (FE_INVALID);\n-#endif\n+\t  if (rcls != QUADFP_NAN || icls != QUADFP_NAN)\n+\t    feraiseexcept (FE_INVALID);\n+\t}\n     }\n \n   return retval;"}, {"sha": "d75b0a916762e4f3a0f052e1f30047616e4483cd", "filename": "libquadmath/math/cimagq.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcimagq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcimagq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcimagq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Return imaginary part of complex __float128 value.\n-   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+/* Return imaginary part of complex float type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,9 +14,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n "}, {"sha": "a6b46805f000aadf2cd05dc9bb155c7e65c23b4c", "filename": "libquadmath/math/clog10q.c", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fclog10q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fclog10q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fclog10q.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Compute complex base 10 logarithm for complex __float128.\n-   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n+/* Compute complex base 10 logarithm.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -19,10 +19,11 @@\n \n #include \"quadmath-imp.h\"\n \n-\n /* log_10 (2).  */\n-#define M_LOG10_2q 0.3010299956639811952137388947244930267682Q\n+#define LOG10_2 0.3010299956639811952137388947244930267682Q\n \n+/* pi * log10 (e).  */\n+#define PI_LOG10E 1.364376353841841347485783625431355770210Q\n \n __complex128\n clog10q (__complex128 x)\n@@ -31,15 +32,15 @@ clog10q (__complex128 x)\n   int rcls = fpclassifyq (__real__ x);\n   int icls = fpclassifyq (__imag__ x);\n \n-  if (__builtin_expect (rcls == QUADFP_ZERO && icls == QUADFP_ZERO, 0))\n+  if (__glibc_unlikely (rcls == QUADFP_ZERO && icls == QUADFP_ZERO))\n     {\n       /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbitq (__real__ x) ? M_PIq : 0.0Q;\n+      __imag__ result = signbitq (__real__ x) ? PI_LOG10E : 0;\n       __imag__ result = copysignq (__imag__ result, __imag__ x);\n       /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0Q / fabsq (__real__ x);\n+      __real__ result = -1 / fabsq (__real__ x);\n     }\n-  else if (__builtin_expect (rcls != QUADFP_NAN && icls != QUADFP_NAN, 1))\n+  else if (__glibc_likely (rcls != QUADFP_NAN && icls != QUADFP_NAN))\n     {\n       /* Neither real nor imaginary part is NaN.  */\n       __float128 absx = fabsq (__real__ x), absy = fabsq (__imag__ x);\n@@ -52,11 +53,11 @@ clog10q (__complex128 x)\n \t  absy = t;\n \t}\n \n-      if (absx > FLT128_MAX / 2.0Q)\n+      if (absx > FLT128_MAX / 2)\n \t{\n \t  scale = -1;\n \t  absx = scalbnq (absx, scale);\n-\t  absy = (absy >= FLT128_MIN * 2.0Q ? scalbnq (absy, scale) : 0.0Q);\n+\t  absy = (absy >= FLT128_MIN * 2 ? scalbnq (absy, scale) : 0);\n \t}\n       else if (absx < FLT128_MIN && absy < FLT128_MIN)\n \t{\n@@ -65,39 +66,39 @@ clog10q (__complex128 x)\n \t  absy = scalbnq (absy, scale);\n \t}\n \n-      if (absx == 1.0Q && scale == 0)\n+      if (absx == 1 && scale == 0)\n \t{\n-\t  __float128 absy2 = absy * absy;\n-\t  if (absy2 <= FLT128_MIN * 2.0Q * M_LN10q)\n-\t    __real__ result\n-\t      = (absy2 / 2.0Q - absy2 * absy2 / 4.0Q) * M_LOG10Eq;\n-\t  else\n-\t    __real__ result = log1pq (absy2) * (M_LOG10Eq / 2.0Q);\n+\t  __real__ result = (log1pq (absy * absy)\n+\t\t\t     * ((__float128) M_LOG10Eq / 2));\n+\t  math_check_force_underflow_nonneg (__real__ result);\n \t}\n-      else if (absx > 1.0Q && absx < 2.0Q && absy < 1.0Q && scale == 0)\n+      else if (absx > 1 && absx < 2 && absy < 1 && scale == 0)\n \t{\n-\t  __float128 d2m1 = (absx - 1.0Q) * (absx + 1.0Q);\n+\t  __float128 d2m1 = (absx - 1) * (absx + 1);\n \t  if (absy >= FLT128_EPSILON)\n \t    d2m1 += absy * absy;\n-\t  __real__ result = log1pq (d2m1) * (M_LOG10Eq / 2.0Q);\n+\t  __real__ result = log1pq (d2m1) * ((__float128) M_LOG10Eq / 2);\n \t}\n-      else if (absx < 1.0Q\n-\t       && absx >= 0.75Q\n-\t       && absy < FLT128_EPSILON / 2.0Q\n+      else if (absx < 1\n+\t       && absx >= 0.5Q\n+\t       && absy < FLT128_EPSILON / 2\n \t       && scale == 0)\n \t{\n-\t  __float128 d2m1 = (absx - 1.0Q) * (absx + 1.0Q);\n-\t  __real__ result = log1pq (d2m1) * (M_LOG10Eq / 2.0Q);\n+\t  __float128 d2m1 = (absx - 1) * (absx + 1);\n+\t  __real__ result = log1pq (d2m1) * ((__float128) M_LOG10Eq / 2);\n \t}\n-      else if (absx < 1.0Q && (absx >= 0.75Q || absy >= 0.5Q) && scale == 0)\n+      else if (absx < 1\n+\t       && absx >= 0.5Q\n+\t       && scale == 0\n+\t       && absx * absx + absy * absy >= 0.5Q)\n \t{\n \t  __float128 d2m1 = __quadmath_x2y2m1q (absx, absy);\n-\t  __real__ result = log1pq (d2m1) * (M_LOG10Eq / 2.0Q);\n+\t  __real__ result = log1pq (d2m1) * ((__float128) M_LOG10Eq / 2);\n \t}\n       else\n \t{\n \t  __float128 d = hypotq (absx, absy);\n-\t  __real__ result = log10q (d) - scale * M_LOG10_2q;\n+\t  __real__ result = log10q (d) - scale * LOG10_2;\n \t}\n \n       __imag__ result = M_LOG10Eq * atan2q (__imag__ x, __real__ x);"}, {"sha": "b20da52dd280da6e604bd9dc7f47b08d286776ea", "filename": "libquadmath/math/clogq.c", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fclogq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fclogq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fclogq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Compute complex natural logarithm for complex __float128.\n-   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n+/* Compute complex natural logarithm.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -19,23 +19,22 @@\n \n #include \"quadmath-imp.h\"\n \n-\n __complex128\n clogq (__complex128 x)\n {\n   __complex128 result;\n   int rcls = fpclassifyq (__real__ x);\n   int icls = fpclassifyq (__imag__ x);\n \n-  if (__builtin_expect (rcls == QUADFP_ZERO && icls == QUADFP_ZERO, 0))\n+  if (__glibc_unlikely (rcls == QUADFP_ZERO && icls == QUADFP_ZERO))\n     {\n       /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbitq (__real__ x) ? M_PIq : 0.0Q;\n+      __imag__ result = signbitq (__real__ x) ? (__float128) M_PIq : 0;\n       __imag__ result = copysignq (__imag__ result, __imag__ x);\n       /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0Q / fabsq (__real__ x);\n+      __real__ result = -1 / fabsq (__real__ x);\n     }\n-  else if (__builtin_expect (rcls != QUADFP_NAN && icls != QUADFP_NAN, 1))\n+  else if (__glibc_likely (rcls != QUADFP_NAN && icls != QUADFP_NAN))\n     {\n       /* Neither real nor imaginary part is NaN.  */\n       __float128 absx = fabsq (__real__ x), absy = fabsq (__imag__ x);\n@@ -48,11 +47,11 @@ clogq (__complex128 x)\n \t  absy = t;\n \t}\n \n-      if (absx > FLT128_MAX / 2.0)\n+      if (absx > FLT128_MAX / 2)\n \t{\n \t  scale = -1;\n \t  absx = scalbnq (absx, scale);\n-\t  absy = (absy >= FLT128_MIN * 2.0Q ? scalbnq (absy, scale) : 0.0Q);\n+\t  absy = (absy >= FLT128_MIN * 2 ? scalbnq (absy, scale) : 0);\n \t}\n       else if (absx < FLT128_MIN && absy < FLT128_MIN)\n \t{\n@@ -61,38 +60,38 @@ clogq (__complex128 x)\n \t  absy = scalbnq (absy, scale);\n \t}\n \n-      if (absx == 1.0Q && scale == 0)\n+      if (absx == 1 && scale == 0)\n \t{\n-\t  __float128 absy2 = absy * absy;\n-\t  if (absy2 <= FLT128_MIN * 2.0Q)\n-\t    __real__ result = absy2 / 2.0Q - absy2 * absy2 / 4.0Q;\n-\t  else\n-\t    __real__ result = log1pq (absy2) / 2.0Q;\n+\t  __real__ result = log1pq (absy * absy) / 2;\n+\t  math_check_force_underflow_nonneg (__real__ result);\n \t}\n-      else if (absx > 1.0Q && absx < 2.0Q && absy < 1.0Q && scale == 0)\n+      else if (absx > 1 && absx < 2 && absy < 1 && scale == 0)\n \t{\n-\t  __float128 d2m1 = (absx - 1.0Q) * (absx + 1.0Q);\n+\t  __float128 d2m1 = (absx - 1) * (absx + 1);\n \t  if (absy >= FLT128_EPSILON)\n \t    d2m1 += absy * absy;\n-\t  __real__ result = log1pq (d2m1) / 2.0Q;\n+\t  __real__ result = log1pq (d2m1) / 2;\n \t}\n-      else if (absx < 1.0Q\n-\t       && absx >= 0.75Q\n-\t       && absy < FLT128_EPSILON / 2.0Q\n+      else if (absx < 1\n+\t       && absx >= 0.5Q\n+\t       && absy < FLT128_EPSILON / 2\n \t       && scale == 0)\n \t{\n-\t  __float128 d2m1 = (absx - 1.0Q) * (absx + 1.0Q);\n-\t  __real__ result = log1pq (d2m1) / 2.0Q;\n+\t  __float128 d2m1 = (absx - 1) * (absx + 1);\n+\t  __real__ result = log1pq (d2m1) / 2;\n \t}\n-      else if (absx < 1.0 && (absx >= 0.75Q || absy >= 0.5Q) && scale == 0)\n+      else if (absx < 1\n+\t       && absx >= 0.5Q\n+\t       && scale == 0\n+\t       && absx * absx + absy * absy >= 0.5Q)\n \t{\n \t  __float128 d2m1 = __quadmath_x2y2m1q (absx, absy);\n-\t  __real__ result = log1pq (d2m1) / 2.0Q;\n+\t  __real__ result = log1pq (d2m1) / 2;\n \t}\n       else\n \t{\n \t  __float128 d = hypotq (absx, absy);\n-\t  __real__ result = logq (d) - scale * M_LN2q;\n+\t  __real__ result = logq (d) - scale * (__float128) M_LN2q;\n \t}\n \n       __imag__ result = atan2q (__imag__ x, __real__ x);"}, {"sha": "0ab86f8ddb6e58fc926ca3c92ddb99f6b6f390a1", "filename": "libquadmath/math/conjq.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fconjq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fconjq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fconjq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Return complex conjugate of complex __float128 value.\n-   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+/* Return complex conjugate of complex float type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,9 +14,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n "}, {"sha": "935264286eb75e999a631b9ea6804daf3804cf94", "filename": "libquadmath/math/copysignq.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcopysignq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcopysignq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcopysignq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* copysignq.c -- __float128 version of s_copysign.c.\n+/* s_copysignl.c -- long double version of s_copysign.c.\n  * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -13,14 +13,26 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n+/*\n+ * copysignq(long double x, long double y)\n+ * copysignq(x,y) returns a value with the magnitude of x and\n+ * with the sign bit of y.\n+ */\n+\n+#define NO_MATH_REDIRECT\n+\n #include \"quadmath-imp.h\"\n \n-__float128\n-copysignq (__float128 x, __float128 y)\n+__float128 copysignq(__float128 x, __float128 y)\n {\n-  uint64_t hx,hy;\n-  GET_FLT128_MSW64(hx,x);\n-  GET_FLT128_MSW64(hy,y);\n-  SET_FLT128_MSW64(x,(hx&0x7fffffffffffffffULL)|(hy&0x8000000000000000ULL));\n-  return x;\n+\tuint64_t hx,hy;\n+\tGET_FLT128_MSW64(hx,x);\n+\tGET_FLT128_MSW64(hy,y);\n+\tSET_FLT128_MSW64(x,(hx&0x7fffffffffffffffULL)\n+\t\t\t    |(hy&0x8000000000000000ULL));\n+        return x;\n }"}, {"sha": "7664c0862ec2bda3612788bd81198d42f29b0c9a", "filename": "libquadmath/math/coshq.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcoshq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcoshq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcoshq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -9,11 +9,11 @@\n  * ====================================================\n  */\n \n-/* Changes for 128-bit __float128 are\n+/* Changes for 128-bit long double are\n    Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n-   and are incorporated herein by permission of the author.  The author \n+   and are incorporated herein by permission of the author.  The author\n    reserves the right to distribute this material elsewhere under different\n-   copying permissions.  These modifications are distributed here under \n+   copying permissions.  These modifications are distributed here under\n    the following terms:\n \n     This library is free software; you can redistribute it and/or\n@@ -27,34 +27,34 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n /* coshq(x)\n  * Method :\n- * mathematically coshq(x) if defined to be (exp(x)+exp(-x))/2\n- *      1. Replace x by |x| (coshq(x) = coshq(-x)).\n+ * mathematically coshl(x) if defined to be (exp(x)+exp(-x))/2\n+ *      1. Replace x by |x| (coshl(x) = coshl(-x)).\n  *      2.\n  *                                                      [ exp(x) - 1 ]^2\n- *          0        <= x <= ln2/2  :  coshq(x) := 1 + -------------------\n+ *          0        <= x <= ln2/2  :  coshl(x) := 1 + -------------------\n  *                                                         2*exp(x)\n  *\n  *                                                 exp(x) +  1/exp(x)\n- *          ln2/2    <= x <= 22     :  coshq(x) := -------------------\n+ *          ln2/2    <= x <= 22     :  coshl(x) := -------------------\n  *                                                         2\n- *          22       <= x <= lnovft :  coshq(x) := expq(x)/2\n- *          lnovft   <= x <= ln2ovft:  coshq(x) := expq(x/2)/2 * expq(x/2)\n- *          ln2ovft  <  x           :  coshq(x) := huge*huge (overflow)\n+ *          22       <= x <= lnovft :  coshl(x) := expq(x)/2\n+ *          lnovft   <= x <= ln2ovft:  coshl(x) := expq(x/2)/2 * expq(x/2)\n+ *          ln2ovft  <  x           :  coshl(x) := huge*huge (overflow)\n  *\n  * Special cases:\n- *      coshq(x) is |x| if x is +INF, -INF, or NaN.\n- *      only coshq(0)=1 is exact for finite x.\n+ *      coshl(x) is |x| if x is +INF, -INF, or NaN.\n+ *      only coshl(0)=1 is exact for finite x.\n  */\n \n #include \"quadmath-imp.h\"\n \n-static const __float128 one = 1.0Q, half = 0.5Q, huge = 1.0e4900Q,\n-  ovf_thresh = 1.1357216553474703894801348310092223067821E4Q;\n+static const __float128 one = 1.0, half = 0.5, huge = 1.0e4900Q,\n+ovf_thresh = 1.1357216553474703894801348310092223067821E4Q;\n \n __float128\n coshq (__float128 x)\n@@ -73,7 +73,7 @@ coshq (__float128 x)\n   if (ex >= 0x7fff0000)\n     return x * x;\n \n-  /* |x| in [0,0.5*ln2], return 1+expm1l(|x|)^2/(2*expq(|x|)) */\n+  /* |x| in [0,0.5*ln2], return 1+expm1q(|x|)^2/(2*expq(|x|)) */\n   if (ex < 0x3ffd62e4) /* 0.3465728759765625 */\n     {\n       if (ex < 0x3fb80000) /* |x| < 2^-116 */"}, {"sha": "6aabf0cc9ba5b73be86e94aae07241fcbb6fa212", "filename": "libquadmath/math/cosq.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcosq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* cosq.c -- __float128 version of s_cos.c.\n+/* s_cosl.c -- long double version of s_cos.c.\n  * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -17,8 +17,8 @@\n  * Return cosine function of x.\n  *\n  * kernel function:\n- *\t__quadmath_kernel_sinq\t... sine function on [-pi/4,pi/4]\n- *\t__quadmath_kernel_cosq\t... cosine function on [-pi/4,pi/4]\n+ *\t__quadmath_kernel_sinq\t\t... sine function on [-pi/4,pi/4]\n+ *\t__quadmath_kernel_cosq\t\t... cosine function on [-pi/4,pi/4]\n  *\t__quadmath_rem_pio2q\t... argument reduction routine\n  *\n  * Method.\n@@ -46,10 +46,9 @@\n \n #include \"quadmath-imp.h\"\n \n-__float128\n-cosq (__float128 x)\n+__float128 cosq(__float128 x)\n {\n-\t__float128 y[2],z=0.0Q;\n+\t__float128 y[2],z=0;\n \tint64_t n, ix;\n \n     /* High word of x. */\n@@ -64,6 +63,8 @@ cosq (__float128 x)\n \telse if (ix>=0x7fff000000000000LL) {\n \t    if (ix == 0x7fff000000000000LL) {\n \t\tGET_FLT128_LSW64(n,x);\n+\t\tif (n == 0)\n+\t\t    errno = EDOM;\n \t    }\n \t    return x-x;\n \t}"}, {"sha": "0bffbc82df9096f5433094d510ca252c759ac302", "filename": "libquadmath/math/cosq_kernel.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcosq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcosq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcosq_kernel.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Quad-precision floating point cosine on <-pi/4,pi/4>.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n \n@@ -14,9 +14,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n@@ -70,14 +69,14 @@ static const __float128 c[] = {\n -2.50521016467996193495359189395805639E-08Q, /* bfe5ae644ee90c47dc71839de75b2787 */\n };\n \n-#define SINCOSQ_COS_HI 0\n-#define SINCOSQ_COS_LO 1\n-#define SINCOSQ_SIN_HI 2\n-#define SINCOSQ_SIN_LO 3\n+#define SINCOSL_COS_HI 0\n+#define SINCOSL_COS_LO 1\n+#define SINCOSL_SIN_HI 2\n+#define SINCOSL_SIN_LO 3\n extern const __float128 __sincosq_table[];\n \n __float128\n-__quadmath_kernel_cosq (__float128 x, __float128 y)\n+__quadmath_kernel_cosq(__float128 x, __float128 y)\n {\n   __float128 h, l, z, sin_l, cos_l_m1;\n   int64_t ix;\n@@ -98,18 +97,18 @@ __quadmath_kernel_cosq (__float128 x, __float128 y)\n   else\n     {\n       /* So that we don't have to use too large polynomial,  we find\n-\t l and h such that x = l + h,  where fabsl(l) <= 1.0/256 with 83\n+\t l and h such that x = l + h,  where fabsq(l) <= 1.0/256 with 83\n \t possible values for h.  We look up cosq(h) and sinq(h) in\n \t pre-computed tables,  compute cosq(l) and sinq(l) using a\n \t Chebyshev polynomial of degree 10(11) and compute\n \t cosq(h+l) = cosq(h)cosq(l) - sinq(h)sinq(l).  */\n       index = 0x3ffe - (tix >> 16);\n       hix = (tix + (0x200 << index)) & (0xfffffc00 << index);\n       if (signbitq (x))\n-       {\n-         x = -x;\n-         y = -y;\n-       }\n+\t{\n+\t  x = -x;\n+\t  y = -y;\n+\t}\n       switch (index)\n \t{\n \tcase 0: index = ((45 << 10) + hix - 0x3ffe0000) >> 8; break;\n@@ -123,9 +122,9 @@ __quadmath_kernel_cosq (__float128 x, __float128 y)\n       z = l * l;\n       sin_l = l*(ONE+z*(SSIN1+z*(SSIN2+z*(SSIN3+z*(SSIN4+z*SSIN5)))));\n       cos_l_m1 = z*(SCOS1+z*(SCOS2+z*(SCOS3+z*(SCOS4+z*SCOS5))));\n-      return __sincosq_table [index + SINCOSQ_COS_HI]\n-\t     + (__sincosq_table [index + SINCOSQ_COS_LO]\n-\t\t- (__sincosq_table [index + SINCOSQ_SIN_HI] * sin_l\n-\t\t   - __sincosq_table [index + SINCOSQ_COS_HI] * cos_l_m1));\n+      return __sincosq_table [index + SINCOSL_COS_HI]\n+\t     + (__sincosq_table [index + SINCOSL_COS_LO]\n+\t\t- (__sincosq_table [index + SINCOSL_SIN_HI] * sin_l\n+\t\t   - __sincosq_table [index + SINCOSL_COS_HI] * cos_l_m1));\n     }\n }"}, {"sha": "0497760aced33546f4ee5f8bb19187f98c9cd2ef", "filename": "libquadmath/math/cprojq.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcprojq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcprojq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcprojq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Compute projection of complex __float128 value to Riemann sphere.\n-   Copyright (C) 1997, 1999, 2010 Free Software Foundation, Inc.\n+/* Compute projection of complex float type value to Riemann sphere.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,24 +14,20 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n __complex128\n cprojq (__complex128 x)\n {\n-  if (isnanq (__real__ x) && isnanq (__imag__ x))\n-    return x;\n-  else if (!finiteq (__real__ x) || !finiteq (__imag__ x))\n+  if (isinfq (__real__ x) || isinfq (__imag__ x))\n     {\n       __complex128 res;\n \n       __real__ res = __builtin_inf ();\n-      __imag__ res = copysignq (0.0, __imag__ x);\n+      __imag__ res = copysignq (0, __imag__ x);\n \n       return res;\n     }"}, {"sha": "2577d31aa24bd114f785d196d1838940ec39c6d4", "filename": "libquadmath/math/crealq.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcrealq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcrealq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcrealq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Return real part of complex __float128 value.\n-   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+/* Return real part of complex float type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,9 +14,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n "}, {"sha": "bfe740b4ec98b35964bd052b585de88003c80a29", "filename": "libquadmath/math/csinhq.c", "status": "modified", "additions": 19, "deletions": 35, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcsinhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcsinhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcsinhq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Complex sine hyperbole function for complex __float128.\n-   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n+/* Complex sine hyperbole function for float types.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -19,11 +19,6 @@\n \n #include \"quadmath-imp.h\"\n \n-#ifdef HAVE_FENV_H\n-# include <fenv.h>\n-#endif\n-\n-\n __complex128\n csinhq (__complex128 x)\n {\n@@ -34,34 +29,37 @@ csinhq (__complex128 x)\n \n   __real__ x = fabsq (__real__ x);\n \n-  if (__builtin_expect (rcls >= QUADFP_ZERO, 1))\n+  if (__glibc_likely (rcls >= QUADFP_ZERO))\n     {\n       /* Real part is finite.  */\n-      if (__builtin_expect (icls >= QUADFP_ZERO, 1))\n+      if (__glibc_likely (icls >= QUADFP_ZERO))\n \t{\n \t  /* Imaginary part is finite.  */\n \t  const int t = (int) ((FLT128_MAX_EXP - 1) * M_LN2q);\n \t  __float128 sinix, cosix;\n \n-\t  if (__builtin_expect (icls != QUADFP_SUBNORMAL, 1))\n+\t  if (__glibc_likely (fabsq (__imag__ x) > FLT128_MIN))\n \t    {\n \t      sincosq (__imag__ x, &sinix, &cosix);\n \t    }\n \t  else\n \t    {\n \t      sinix = __imag__ x;\n-\t      cosix = 1.0Q;\n+\t      cosix = 1;\n \t    }\n \n+\t  if (negate)\n+\t    cosix = -cosix;\n+\n \t  if (fabsq (__real__ x) > t)\n \t    {\n \t      __float128 exp_t = expq (t);\n \t      __float128 rx = fabsq (__real__ x);\n \t      if (signbitq (__real__ x))\n \t\tcosix = -cosix;\n \t      rx -= t;\n-\t      sinix *= exp_t / 2.0Q;\n-\t      cosix *= exp_t / 2.0Q;\n+\t      sinix *= exp_t / 2;\n+\t      cosix *= exp_t / 2;\n \t      if (rx > t)\n \t\t{\n \t\t  rx -= t;\n@@ -87,49 +85,41 @@ csinhq (__complex128 x)\n \t      __imag__ retval = coshq (__real__ x) * sinix;\n \t    }\n \n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n+\t  math_check_force_underflow_complex (retval);\n \t}\n       else\n \t{\n \t  if (rcls == QUADFP_ZERO)\n \t    {\n \t      /* Real part is 0.0.  */\n-\t      __real__ retval = copysignq (0.0Q, negate ? -1.0Q : 1.0Q);\n-\t      __imag__ retval = nanq (\"\") + nanq (\"\");\n-\n-#ifdef HAVE_FENV_H\n-\t      if (icls == QUADFP_INFINITE)\n-\t\tferaiseexcept (FE_INVALID);\n-#endif\n+\t      __real__ retval = copysignq (0, negate ? -1 : 1);\n+\t      __imag__ retval = __imag__ x - __imag__ x;\n \t    }\n \t  else\n \t    {\n \t      __real__ retval = nanq (\"\");\n \t      __imag__ retval = nanq (\"\");\n \n-#ifdef HAVE_FENV_H\n \t      feraiseexcept (FE_INVALID);\n-#endif\n \t    }\n \t}\n     }\n   else if (rcls == QUADFP_INFINITE)\n     {\n       /* Real part is infinite.  */\n-      if (__builtin_expect (icls > QUADFP_ZERO, 1))\n+      if (__glibc_likely (icls > QUADFP_ZERO))\n \t{\n \t  /* Imaginary part is finite.  */\n \t  __float128 sinix, cosix;\n \n-\t  if (__builtin_expect (icls != QUADFP_SUBNORMAL, 1))\n+\t  if (__glibc_likely (fabsq (__imag__ x) > FLT128_MIN))\n \t    {\n \t      sincosq (__imag__ x, &sinix, &cosix);\n \t    }\n \t  else\n \t    {\n \t      sinix = __imag__ x;\n-\t      cosix = 1.0;\n+\t      cosix = 1;\n \t    }\n \n \t  __real__ retval = copysignq (HUGE_VALQ, cosix);\n@@ -146,20 +136,14 @@ csinhq (__complex128 x)\n \t}\n       else\n \t{\n-\t  /* The addition raises the invalid exception.  */\n \t  __real__ retval = HUGE_VALQ;\n-\t  __imag__ retval = nanq (\"\") + nanq (\"\");\n-\n-#ifdef HAVE_FENV_H\n-\t  if (icls == QUADFP_INFINITE)\n-\t    feraiseexcept (FE_INVALID);\n-#endif\n+\t  __imag__ retval = __imag__ x - __imag__ x;\n \t}\n     }\n   else\n     {\n       __real__ retval = nanq (\"\");\n-      __imag__ retval = __imag__ x == 0.0Q ? __imag__ x : nanq (\"\");\n+      __imag__ retval = __imag__ x == 0 ? __imag__ x : nanq (\"\");\n     }\n \n   return retval;"}, {"sha": "a38da8eebc55ad78a62c3a006229e50a25f47964", "filename": "libquadmath/math/csinq.c", "status": "modified", "additions": 18, "deletions": 34, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcsinq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcsinq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcsinq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Complex sine function for complex __float128.\n-   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n+/* Complex sine function for float types.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -19,11 +19,6 @@\n \n #include \"quadmath-imp.h\"\n \n-#ifdef HAVE_FENV_H\n-# include <fenv.h>\n-#endif\n-\n-\n __complex128\n csinq (__complex128 x)\n {\n@@ -34,34 +29,37 @@ csinq (__complex128 x)\n \n   __real__ x = fabsq (__real__ x);\n \n-  if (__builtin_expect (icls >= QUADFP_ZERO, 1))\n+  if (__glibc_likely (icls >= QUADFP_ZERO))\n     {\n       /* Imaginary part is finite.  */\n-      if (__builtin_expect (rcls >= QUADFP_ZERO, 1))\n+      if (__glibc_likely (rcls >= QUADFP_ZERO))\n \t{\n \t  /* Real part is finite.  */\n \t  const int t = (int) ((FLT128_MAX_EXP - 1) * M_LN2q);\n \t  __float128 sinix, cosix;\n \n-\t  if (__builtin_expect (rcls != QUADFP_SUBNORMAL, 1))\n+\t  if (__glibc_likely (__real__ x > FLT128_MIN))\n \t    {\n \t      sincosq (__real__ x, &sinix, &cosix);\n \t    }\n \t  else\n \t    {\n \t      sinix = __real__ x;\n-\t      cosix = 1.0Q;\n+\t      cosix = 1;\n \t    }\n \n+\t  if (negate)\n+\t    sinix = -sinix;\n+\n \t  if (fabsq (__imag__ x) > t)\n \t    {\n \t      __float128 exp_t = expq (t);\n \t      __float128 ix = fabsq (__imag__ x);\n \t      if (signbitq (__imag__ x))\n \t\tcosix = -cosix;\n \t      ix -= t;\n-\t      sinix *= exp_t / 2.0Q;\n-\t      cosix *= exp_t / 2.0Q;\n+\t      sinix *= exp_t / 2;\n+\t      cosix *= exp_t / 2;\n \t      if (ix > t)\n \t\t{\n \t\t  ix -= t;\n@@ -87,30 +85,22 @@ csinq (__complex128 x)\n \t      __imag__ retval = sinhq (__imag__ x) * cosix;\n \t    }\n \n-\t  if (negate)\n-\t    __real__ retval = -__real__ retval;\n+\t  math_check_force_underflow_complex (retval);\n \t}\n       else\n \t{\n \t  if (icls == QUADFP_ZERO)\n \t    {\n \t      /* Imaginary part is 0.0.  */\n-\t      __real__ retval = nanq (\"\");\n+\t      __real__ retval = __real__ x - __real__ x;\n \t      __imag__ retval = __imag__ x;\n-\n-#ifdef HAVE_FENV_H\n-\t      if (rcls == QUADFP_INFINITE)\n-\t\tferaiseexcept (FE_INVALID);\n-#endif\n \t    }\n \t  else\n \t    {\n \t      __real__ retval = nanq (\"\");\n \t      __imag__ retval = nanq (\"\");\n \n-#ifdef HAVE_FENV_H\n \t      feraiseexcept (FE_INVALID);\n-#endif\n \t    }\n \t}\n     }\n@@ -120,22 +110,22 @@ csinq (__complex128 x)\n       if (rcls == QUADFP_ZERO)\n \t{\n \t  /* Real part is 0.0.  */\n-\t  __real__ retval = copysignq (0.0Q, negate ? -1.0Q : 1.0Q);\n+\t  __real__ retval = copysignq (0, negate ? -1 : 1);\n \t  __imag__ retval = __imag__ x;\n \t}\n       else if (rcls > QUADFP_ZERO)\n \t{\n \t  /* Real part is finite.  */\n \t  __float128 sinix, cosix;\n \n-\t  if (__builtin_expect (rcls != QUADFP_SUBNORMAL, 1))\n+\t  if (__glibc_likely (__real__ x > FLT128_MIN))\n \t    {\n \t      sincosq (__real__ x, &sinix, &cosix);\n \t    }\n \t  else\n \t    {\n \t      sinix = __real__ x;\n-\t      cosix = 1.0;\n+\t      cosix = 1;\n \t    }\n \n \t  __real__ retval = copysignq (HUGE_VALQ, sinix);\n@@ -148,20 +138,14 @@ csinq (__complex128 x)\n \t}\n       else\n \t{\n-\t  /* The addition raises the invalid exception.  */\n-\t  __real__ retval = nanq (\"\");\n+\t  __real__ retval = __real__ x - __real__ x;\n \t  __imag__ retval = HUGE_VALQ;\n-\n-#ifdef HAVE_FENV_H\n-\t  if (rcls == QUADFP_INFINITE)\n-\t    feraiseexcept (FE_INVALID);\n-#endif\n \t}\n     }\n   else\n     {\n       if (rcls == QUADFP_ZERO)\n-\t__real__ retval = copysignq (0.0Q, negate ? -1.0Q : 1.0Q);\n+\t__real__ retval = copysignq (0, negate ? -1 : 1);\n       else\n \t__real__ retval = nanq (\"\");\n       __imag__ retval = nanq (\"\");"}, {"sha": "2add9dba7881989b42a0a6e281178f92945e81ba", "filename": "libquadmath/math/csqrtq.c", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcsqrtq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fcsqrtq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcsqrtq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Complex square root of __float128 value.\n-   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n+/* Complex square root of a float type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Based on an algorithm by Stephen L. Moshier <moshier@world.std.com>.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n@@ -20,19 +20,14 @@\n \n #include \"quadmath-imp.h\"\n \n-#ifdef HAVE_FENV_H\n-# include <fenv.h>\n-#endif\n-\n-\n __complex128\n csqrtq (__complex128 x)\n {\n   __complex128 res;\n   int rcls = fpclassifyq (__real__ x);\n   int icls = fpclassifyq (__imag__ x);\n \n-  if (__builtin_expect (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE, 0))\n+  if (__glibc_unlikely (rcls <= QUADFP_INFINITE || icls <= QUADFP_INFINITE))\n     {\n       if (icls == QUADFP_INFINITE)\n \t{\n@@ -41,7 +36,7 @@ csqrtq (__complex128 x)\n \t}\n       else if (rcls == QUADFP_INFINITE)\n \t{\n-\t  if (__real__ x < 0.0Q)\n+\t  if (__real__ x < 0)\n \t    {\n \t      __real__ res = icls == QUADFP_NAN ? nanq (\"\") : 0;\n \t      __imag__ res = copysignq (HUGE_VALQ, __imag__ x);\n@@ -50,7 +45,7 @@ csqrtq (__complex128 x)\n \t    {\n \t      __real__ res = __real__ x;\n \t      __imag__ res = (icls == QUADFP_NAN\n-\t\t\t      ? nanq (\"\") : copysignq (0.0Q, __imag__ x));\n+\t\t\t      ? nanq (\"\") : copysignq (0, __imag__ x));\n \t    }\n \t}\n       else\n@@ -61,27 +56,26 @@ csqrtq (__complex128 x)\n     }\n   else\n     {\n-      if (__builtin_expect (icls == QUADFP_ZERO, 0))\n+      if (__glibc_unlikely (icls == QUADFP_ZERO))\n \t{\n-\t  if (__real__ x < 0.0Q)\n+\t  if (__real__ x < 0)\n \t    {\n-\t      __real__ res = 0.0Q;\n-\t      __imag__ res = copysignq (sqrtq (-__real__ x),\n-\t\t\t\t\t__imag__ x);\n+\t      __real__ res = 0;\n+\t      __imag__ res = copysignq (sqrtq (-__real__ x), __imag__ x);\n \t    }\n \t  else\n \t    {\n \t      __real__ res = fabsq (sqrtq (__real__ x));\n-\t      __imag__ res = copysignq (0.0Q, __imag__ x);\n+\t      __imag__ res = copysignq (0, __imag__ x);\n \t    }\n \t}\n-      else if (__builtin_expect (rcls == QUADFP_ZERO, 0))\n+      else if (__glibc_unlikely (rcls == QUADFP_ZERO))\n \t{\n \t  __float128 r;\n-\t  if (fabsq (__imag__ x) >= 2.0Q * FLT128_MIN)\n+\t  if (fabsq (__imag__ x) >= 2 * FLT128_MIN)\n \t    r = sqrtq (0.5Q * fabsq (__imag__ x));\n \t  else\n-\t    r = 0.5Q * sqrtq (2.0Q * fabsq (__imag__ x));\n+\t    r = 0.5Q * sqrtq (2 * fabsq (__imag__ x));\n \n \t  __real__ res = r;\n \t  __imag__ res = copysignq (r, __imag__ x);\n@@ -91,25 +85,25 @@ csqrtq (__complex128 x)\n \t  __float128 d, r, s;\n \t  int scale = 0;\n \n-\t  if (fabsq (__real__ x) > FLT128_MAX / 4.0Q)\n+\t  if (fabsq (__real__ x) > FLT128_MAX / 4)\n \t    {\n \t      scale = 1;\n \t      __real__ x = scalbnq (__real__ x, -2 * scale);\n \t      __imag__ x = scalbnq (__imag__ x, -2 * scale);\n \t    }\n-\t  else if (fabsq (__imag__ x) > FLT128_MAX / 4.0Q)\n+\t  else if (fabsq (__imag__ x) > FLT128_MAX / 4)\n \t    {\n \t      scale = 1;\n-\t      if (fabsq (__real__ x) >= 4.0Q * FLT128_MIN)\n+\t      if (fabsq (__real__ x) >= 4 * FLT128_MIN)\n \t\t__real__ x = scalbnq (__real__ x, -2 * scale);\n \t      else\n-\t\t__real__ x = 0.0Q;\n+\t\t__real__ x = 0;\n \t      __imag__ x = scalbnq (__imag__ x, -2 * scale);\n \t    }\n-\t  else if (fabsq (__real__ x) < FLT128_MIN\n-\t\t   && fabsq (__imag__ x) < FLT128_MIN)\n+\t  else if (fabsq (__real__ x) < 2 * FLT128_MIN\n+\t\t   && fabsq (__imag__ x) < 2 * FLT128_MIN)\n \t    {\n-\t      scale = -(FLT128_MANT_DIG / 2);\n+\t      scale = -((FLT128_MANT_DIG + 1) / 2);\n \t      __real__ x = scalbnq (__real__ x, -2 * scale);\n \t      __imag__ x = scalbnq (__imag__ x, -2 * scale);\n \t    }\n@@ -120,12 +114,28 @@ csqrtq (__complex128 x)\n \t  if (__real__ x > 0)\n \t    {\n \t      r = sqrtq (0.5Q * (d + __real__ x));\n-\t      s = 0.5Q * (__imag__ x / r);\n+\t      if (scale == 1 && fabsq (__imag__ x) < 1)\n+\t\t{\n+\t\t  /* Avoid possible intermediate underflow.  */\n+\t\t  s = __imag__ x / r;\n+\t\t  r = scalbnq (r, scale);\n+\t\t  scale = 0;\n+\t\t}\n+\t      else\n+\t\ts = 0.5Q * (__imag__ x / r);\n \t    }\n \t  else\n \t    {\n \t      s = sqrtq (0.5Q * (d - __real__ x));\n-\t      r = fabsq (0.5Q * (__imag__ x / s));\n+\t      if (scale == 1 && fabsq (__imag__ x) < 1)\n+\t\t{\n+\t\t  /* Avoid possible intermediate underflow.  */\n+\t\t  r = fabsq (__imag__ x / s);\n+\t\t  s = scalbnq (s, scale);\n+\t\t  scale = 0;\n+\t\t}\n+\t      else\n+\t\tr = fabsq (0.5Q * (__imag__ x / s));\n \t    }\n \n \t  if (scale)\n@@ -134,6 +144,9 @@ csqrtq (__complex128 x)\n \t      s = scalbnq (s, scale);\n \t    }\n \n+\t  math_check_force_underflow (r);\n+\t  math_check_force_underflow (s);\n+\n \t  __real__ res = r;\n \t  __imag__ res = copysignq (s, __imag__ x);\n \t}"}, {"sha": "cb077f26b80d190695d2ce1fbb33f3144c953fbb", "filename": "libquadmath/math/ctanhq.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fctanhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fctanhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fctanhq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Complex hyperbole tangent for __float128.\n-   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n+/* Complex hyperbolic tangent for float types.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -19,56 +19,58 @@\n \n #include \"quadmath-imp.h\"\n \n-#ifdef HAVE_FENV_H\n-# include <fenv.h>\n-#endif\n-\n-\n __complex128\n ctanhq (__complex128 x)\n {\n   __complex128 res;\n \n-  if (__builtin_expect (!finiteq (__real__ x) || !finiteq (__imag__ x), 0))\n+  if (__glibc_unlikely (!finiteq (__real__ x) || !finiteq (__imag__ x)))\n     {\n-      if (__quadmath_isinf_nsq (__real__ x))\n+      if (isinfq (__real__ x))\n \t{\n-\t  __real__ res = copysignq (1.0Q, __real__ x);\n-\t  __imag__ res = copysignq (0.0Q, __imag__ x);\n+\t  __real__ res = copysignq (1, __real__ x);\n+\t  if (finiteq (__imag__ x) && fabsq (__imag__ x) > 1)\n+\t    {\n+\t      __float128 sinix, cosix;\n+\t      sincosq (__imag__ x, &sinix, &cosix);\n+\t      __imag__ res = copysignq (0, sinix * cosix);\n+\t    }\n+\t  else\n+\t    __imag__ res = copysignq (0, __imag__ x);\n \t}\n-      else if (__imag__ x == 0.0Q)\n+      else if (__imag__ x == 0)\n \t{\n \t  res = x;\n \t}\n       else\n \t{\n-\t  __real__ res = nanq (\"\");\n+\t  if (__real__ x == 0)\n+\t    __real__ res = __real__ x;\n+\t  else\n+\t    __real__ res = nanq (\"\");\n \t  __imag__ res = nanq (\"\");\n \n-#ifdef HAVE_FENV_H\n-\t  if (__quadmath_isinf_nsq (__imag__ x))\n+\t  if (isinfq (__imag__ x))\n \t    feraiseexcept (FE_INVALID);\n-#endif\n \t}\n     }\n   else\n     {\n       __float128 sinix, cosix;\n       __float128 den;\n       const int t = (int) ((FLT128_MAX_EXP - 1) * M_LN2q / 2);\n-      int icls = fpclassifyq (__imag__ x);\n \n       /* tanh(x+iy) = (sinh(2x) + i*sin(2y))/(cosh(2x) + cos(2y))\n \t = (sinh(x)*cosh(x) + i*sin(y)*cos(y))/(sinh(x)^2 + cos(y)^2).  */\n \n-      if (__builtin_expect (icls != QUADFP_SUBNORMAL, 1))\n+      if (__glibc_likely (fabsq (__imag__ x) > FLT128_MIN))\n \t{\n \t  sincosq (__imag__ x, &sinix, &cosix);\n \t}\n       else\n \t{\n \t  sinix = __imag__ x;\n-\t  cosix = 1.0Q;\n+\t  cosix = 1;\n \t}\n \n       if (fabsq (__real__ x) > t)\n@@ -79,7 +81,7 @@ ctanhq (__complex128 x)\n \t     sin(y)*cos(y)/sinh(x)^2 = 4*sin(y)*cos(y)/exp(2x).  */\n \t  __float128 exp_2t = expq (2 * t);\n \n-\t  __real__ res = copysignq (1.0, __real__ x);\n+\t  __real__ res = copysignq (1, __real__ x);\n \t  __imag__ res = 4 * sinix * cosix;\n \t  __real__ x = fabsq (__real__ x);\n \t  __real__ x -= t;\n@@ -104,7 +106,7 @@ ctanhq (__complex128 x)\n \t  else\n \t    {\n \t      sinhrx = __real__ x;\n-\t      coshrx = 1.0Q;\n+\t      coshrx = 1;\n \t    }\n \n \t  if (fabsq (sinhrx) > fabsq (cosix) * FLT128_EPSILON)\n@@ -114,6 +116,7 @@ ctanhq (__complex128 x)\n \t  __real__ res = sinhrx * coshrx / den;\n \t  __imag__ res = sinix * cosix / den;\n \t}\n+      math_check_force_underflow_complex (res);\n     }\n \n   return res;"}, {"sha": "e50b548f125504133dfd91aeec3e06822d574d44", "filename": "libquadmath/math/ctanq.c", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fctanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fctanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fctanq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Complex tangent function for complex __float128.\n-   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n+/* Complex tangent function for a complex float type.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -19,56 +19,58 @@\n \n #include \"quadmath-imp.h\"\n \n-#ifdef HAVE_FENV_H\n-# include <fenv.h>\n-#endif\n-\n-\n __complex128\n ctanq (__complex128 x)\n {\n   __complex128 res;\n \n-  if (__builtin_expect (!finiteq (__real__ x) || !finiteq (__imag__ x), 0))\n+  if (__glibc_unlikely (!finiteq (__real__ x) || !finiteq (__imag__ x)))\n     {\n-      if (__quadmath_isinf_nsq (__imag__ x))\n+      if (isinfq (__imag__ x))\n \t{\n-\t  __real__ res = copysignq (0.0Q, __real__ x);\n-\t  __imag__ res = copysignq (1.0Q, __imag__ x);\n+\t  if (finiteq (__real__ x) && fabsq (__real__ x) > 1)\n+\t    {\n+\t      __float128 sinrx, cosrx;\n+\t      sincosq (__real__ x, &sinrx, &cosrx);\n+\t      __real__ res = copysignq (0, sinrx * cosrx);\n+\t    }\n+\t  else\n+\t    __real__ res = copysignq (0, __real__ x);\n+\t  __imag__ res = copysignq (1, __imag__ x);\n \t}\n-      else if (__real__ x == 0.0Q)\n+      else if (__real__ x == 0)\n \t{\n \t  res = x;\n \t}\n       else\n \t{\n \t  __real__ res = nanq (\"\");\n-\t  __imag__ res = nanq (\"\");\n+\t  if (__imag__ x == 0)\n+\t    __imag__ res = __imag__ x;\n+\t  else\n+\t    __imag__ res = nanq (\"\");\n \n-#ifdef HAVE_FENV_H\n-\t  if (__quadmath_isinf_nsq (__real__ x))\n+\t  if (isinfq (__real__ x))\n \t    feraiseexcept (FE_INVALID);\n-#endif\n \t}\n     }\n   else\n     {\n       __float128 sinrx, cosrx;\n       __float128 den;\n-      const int t = (int) ((FLT128_MAX_EXP - 1) * M_LN2q / 2.0Q);\n-      int rcls = fpclassifyq (__real__ x);\n+      const int t = (int) ((FLT128_MAX_EXP - 1) * M_LN2q / 2);\n \n       /* tan(x+iy) = (sin(2x) + i*sinh(2y))/(cos(2x) + cosh(2y))\n \t = (sin(x)*cos(x) + i*sinh(y)*cosh(y)/(cos(x)^2 + sinh(y)^2). */\n \n-      if (__builtin_expect (rcls != QUADFP_SUBNORMAL, 1))\n+      if (__glibc_likely (fabsq (__real__ x) > FLT128_MIN))\n \t{\n \t  sincosq (__real__ x, &sinrx, &cosrx);\n \t}\n       else\n \t{\n \t  sinrx = __real__ x;\n-\t  cosrx = 1.0Q;\n+\t  cosrx = 1;\n \t}\n \n       if (fabsq (__imag__ x) > t)\n@@ -79,7 +81,7 @@ ctanq (__complex128 x)\n \t     sin(x)*cos(x)/sinh(y)^2 = 4*sin(x)*cos(x)/exp(2y).  */\n \t  __float128 exp_2t = expq (2 * t);\n \n-\t  __imag__ res = copysignq (1.0Q, __imag__ x);\n+\t  __imag__ res = copysignq (1, __imag__ x);\n \t  __real__ res = 4 * sinrx * cosrx;\n \t  __imag__ x = fabsq (__imag__ x);\n \t  __imag__ x -= t;\n@@ -104,7 +106,7 @@ ctanq (__complex128 x)\n \t  else\n \t    {\n \t      sinhix = __imag__ x;\n-\t      coshix = 1.0Q;\n+\t      coshix = 1;\n \t    }\n \n \t  if (fabsq (sinhix) > fabsq (cosrx) * FLT128_EPSILON)\n@@ -114,6 +116,7 @@ ctanq (__complex128 x)\n \t  __real__ res = sinrx * cosrx / den;\n \t  __imag__ res = sinhix * coshix / den;\n \t}\n+      math_check_force_underflow_complex (res);\n     }\n \n   return res;"}, {"sha": "82a65ab1e1e4267774248760f277ed6748c49e4c", "filename": "libquadmath/math/erfq.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ferfq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ferfq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ferfq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -27,11 +27,11 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n-/* __float128 erfq(__float128 x)\n- * __float128 erfcq(__float128 x)\n+/* double erf(double x)\n+ * double erfc(double x)\n  *\t\t\t     x\n  *\t\t      2      |\\\n  *     erf(x)  =  ---------  | exp(-t*t)dt\n@@ -96,14 +96,8 @@\n  *\t\terfc/erf(NaN) is NaN\n  */\n \n-#include <errno.h>\n #include \"quadmath-imp.h\"\n \n-\n-\n-__float128 erfcq (__float128);\n-\n-\n /* Evaluate P[n] x^n  +  P[n-1] x^(n-1)  +  ...  +  P[0] */\n \n static __float128\n@@ -143,8 +137,8 @@ deval (__float128 x, const __float128 *p, int n)\n \n static const __float128\n tiny = 1e-4931Q,\n-  one = 1.0Q,\n-  two = 2.0Q,\n+  one = 1,\n+  two = 2,\n   /* 2/sqrt(pi) - 1 */\n   efx = 1.2837916709551257389615890312154517168810E-1Q;\n \n@@ -810,7 +804,7 @@ erfq (__float128 x)\n __float128\n erfcq (__float128 x)\n {\n-  __float128 y = 0.0Q, z, p, r;\n+  __float128 y, z, p, r;\n   int32_t i, ix, sign;\n   ieee854_float128 u;\n \n@@ -868,7 +862,7 @@ erfcq (__float128 x)\n \t  y += C18a;\n \t  break;\n \tcase 8:\n-\t  z = x - 1.0Q;\n+\t  z = x - 1;\n \t  y = C19b + z * neval (z, RNr19, NRNr19) / deval (z, RDr19, NRDr19);\n \t  y += C19a;\n \t  break;\n@@ -879,7 +873,7 @@ erfcq (__float128 x)\n \t  break;\n \t}\n       if (sign & 0x80000000)\n-\ty = 2.0Q - y;\n+\ty = 2 - y;\n       return y;\n     }\n   /* 1.25 < |x| < 107 */\n@@ -924,7 +918,8 @@ erfcq (__float128 x)\n       u.words32.w3 = 0;\n       u.words32.w2 &= 0xfe000000;\n       z = u.value;\n-      r = expq (-z * z - 0.5625) * expq ((z - x) * (z + x) + p);\n+      r = expq (-z * z - 0.5625) *\n+\texpq ((z - x) * (z + x) + p);\n       if ((sign & 0x80000000) == 0)\n \t{\n \t  __float128 ret = r / x;"}, {"sha": "f012264a3df821af24c868191b8b31ed18772a66", "filename": "libquadmath/math/exp2q.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fexp2q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fexp2q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fexp2q.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -0,0 +1,51 @@\n+/* Compute 2^x.\n+   Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+__float128\n+exp2q (__float128 x)\n+{\n+  if (__glibc_likely (__builtin_isless (x, (__float128) FLT128_MAX_EXP)))\n+    {\n+      if (__builtin_expect (__builtin_isgreaterequal (x, (__float128) (FLT128_MIN_EXP - FLT128_MANT_DIG\n+\t\t\t\t\t\t\t- 1)), 1))\n+\t{\n+\t  int intx = (int) x;\n+\t  __float128 fractx = x - intx;\n+\t  __float128 result;\n+\t  if (fabsq (fractx) < FLT128_EPSILON / 4)\n+\t    result = scalbnq (1 + fractx, intx);\n+\t  else\n+\t    result = scalbnq (expq (M_LN2q * fractx), intx);\n+\t  math_check_force_underflow_nonneg (result);\n+\t  return result;\n+\t}\n+      else\n+\t{\n+\t  /* Underflow or exact zero.  */\n+\t  if (isinfq (x))\n+\t    return 0;\n+\t  else\n+\t    return FLT128_MIN * FLT128_MIN;\n+\t}\n+    }\n+  else\n+    /* Infinity, NaN or overflow.  */\n+    return FLT128_MAX * x;\n+}"}, {"sha": "f64d8d56b7c4e11adbbcf25c10535f3b6c9ce3f4", "filename": "libquadmath/math/expm1q.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fexpm1q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fexpm1q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fexpm1q.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,15 +1,15 @@\n-/*\t\t\t\t\t\t\texpm1l.c\n+/*\t\t\t\t\t\t\texpm1q.c\n  *\n  *\tExponential function, minus 1\n- *      128-bit __float128 precision\n+ *      128-bit long double precision\n  *\n  *\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, expm1l();\n+ * long double x, y, expm1q();\n  *\n- * y = expm1l( x );\n+ * y = expm1q( x );\n  *\n  *\n  *\n@@ -48,12 +48,9 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n-\n-\n-#include <errno.h>\n #include \"quadmath-imp.h\"\n \n /* exp(x) - 1 = x + 0.5 x^2 + x^3 P(x)/Q(x)\n@@ -83,7 +80,7 @@ static const __float128\n   C1 = 6.93145751953125E-1Q,\n   C2 = 1.428606820309417232121458176568075500134E-6Q,\n /* ln 2^-114 */\n-  minarg = -7.9018778583833765273564461846232128760607E1Q;\n+  minarg = -7.9018778583833765273564461846232128760607E1Q, big = 1e4932Q;\n \n \n __float128\n@@ -108,7 +105,7 @@ expm1q (__float128 x)\n     {\n       /* Infinity (which must be negative infinity). */\n       if (((ix & 0xffff) | u.words32.w1 | u.words32.w2 | u.words32.w3) == 0)\n-\treturn -1.0Q;\n+\treturn -1;\n       /* NaN.  Invalid exception if signaling.  */\n       return x + x;\n     }\n@@ -119,7 +116,7 @@ expm1q (__float128 x)\n \n   /* Minimum value.  */\n   if (x < minarg)\n-    return (4.0/HUGE_VALQ - 1.0Q);\n+    return (4.0/big - 1);\n \n   /* Avoid internal underflow when result does not underflow, while\n      ensuring underflow (without returning a zero of the wrong sign)\n@@ -156,7 +153,7 @@ expm1q (__float128 x)\n   exp(x) - 1 = 2^k (qx + 1) - 1\n              = 2^k qx + 2^k - 1.  */\n \n-  px = ldexpq (1.0Q, k);\n+  px = ldexpq (1, k);\n   x = px * qx + (px - 1.0);\n   return x;\n }"}, {"sha": "1aaad91c244622c93a54722c71d3623b8087ece3", "filename": "libquadmath/math/expq.c", "status": "modified", "additions": 25, "deletions": 995, "changes": 1020, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fexpq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Quad-precision floating point e^x.\n-   Copyright (C) 1999-2017 Free Software Foundation, Inc.\n+   Copyright (C) 1999-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n    Partly based on double-precision code\n@@ -16,977 +16,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n-\n-#include \"quadmath-imp.h\"\n-#ifdef HAVE_FENV_H\n-# include <fenv.h>\n-# if defined HAVE_FEHOLDEXCEPT && defined HAVE_FESETROUND \\\n-     && defined HAVE_FESETENV && defined FE_TONEAREST\n-#  define USE_FENV_H\n-# endif\n-#endif\n-\n-\n-/* __expq_table basically consists of four tables, T_EXPL_ARG{1,2} and\n-   T_EXPL_RES{1,2}. All tables use positive and negative indexes, the 0 points\n-   are marked by T_EXPL_* defines.\n-   For ARG1 and RES1 tables lets B be 89 and S 256.0, for ARG2 and RES2 B is 65\n-   and S 32768.0.\n-   These table have the property that, for all integers -B <= i <= B\n-   expl(__expq_table[T_EXPL_ARGN+2*i]+__expq_table[T_EXPL_ARGN+2*i+1]+r) ==\n-   __expq_table[T_EXPL_RESN+i], __expq_table[T_EXPL_RESN+i] is some exact number\n-   with the low 58 bits of the mantissa 0,\n-   __expq_table[T_EXPL_ARGN+2*i] == i/S+s\n-   where absl(s) <= 2^-54 and absl(r) <= 2^-212.  */\n-\n-static const __float128 __expq_table [] = {\n- -3.47656250000000000584188889839535373E-01Q, /* bffd640000000000002b1b04213cf000 */\n-  6.90417668990715641167244540876988960E-32Q, /* 3f97667c3fdb588a6ae1af8748357a17 */\n- -3.43749999999999981853132895957607418E-01Q, /* bffd5ffffffffffffac4ff5f4050b000 */\n- -7.16021898043268093462818380603370350E-33Q, /* bf94296c8219427edc1431ac2498583e */\n- -3.39843750000000013418643523138766329E-01Q, /* bffd5c000000000003de1f027a30e000 */\n-  8.16920774283317801641347327589583265E-32Q, /* 3f97a82b65774bdca1b4440d749ed8d3 */\n- -3.35937500000000014998092453039303051E-01Q, /* bffd5800000000000452a9f4d8857000 */\n- -6.55865578425428447938248396879359670E-32Q, /* bf97548b7d240f3d034b395e6eecfac8 */\n- -3.32031250000000000981984049529998541E-01Q, /* bffd540000000000004875277cda5000 */\n-  6.91213046334032232108944519541512737E-32Q, /* 3f9766e5f925338a19045c94443b66e1 */\n- -3.28124999999999986646017645350399708E-01Q, /* bffd4ffffffffffffc26a667bf44d000 */\n- -6.16281060996110316602421505683742661E-32Q, /* bf973ffdcdcffb6fbffc86b2b8d42f5d */\n- -3.24218749999999991645717430645867963E-01Q, /* bffd4bfffffffffffd97901063e48000 */\n- -7.90797211087760527593856542417304137E-32Q, /* bf979a9afaaca1ada6a8ed1c80584d60 */\n- -3.20312499999999998918211610690789652E-01Q, /* bffd47ffffffffffffb02d9856d71000 */\n-  8.64024799457616856987630373786503376E-32Q, /* 3f97c0a098623f95579d5d9b2b67342d */\n- -3.16406249999999998153974811017181883E-01Q, /* bffd43ffffffffffff77c991f1076000 */\n- -2.73176610180696076418536105483668404E-32Q, /* bf961baeccb32f9b1fcbb8e60468e95a */\n- -3.12500000000000011420976192575972779E-01Q, /* bffd400000000000034ab8240483d000 */\n-  7.16573502812389453744433792609989420E-32Q, /* 3f977410f4c2cfc4335f28446c0fb363 */\n- -3.08593750000000001735496343854851414E-01Q, /* bffd3c000000000000800e995c176000 */\n- -1.56292999645122272621237565671593071E-32Q, /* bf95449b9cbdaff6ac1246adb2c826ac */\n- -3.04687499999999982592401295899221626E-01Q, /* bffd37fffffffffffafb8bc1e061a000 */\n-  6.48993208584888904958594509625158417E-32Q, /* 3f9750f9fe8366d82d77afa0031a92e1 */\n- -3.00781249999999999230616898937763959E-01Q, /* bffd33ffffffffffffc73ac39da54000 */\n-  6.57082437496961397305801409357792029E-32Q, /* 3f97552d3cb598ea80135cf3feb27ec4 */\n- -2.96874999999999998788769281703245722E-01Q, /* bffd2fffffffffffffa6a07fa5021000 */\n- -3.26588297198283968096426564544269170E-32Q, /* bf9653260fc1802f46b629aee171809b */\n- -2.92968750000000015318089182805941695E-01Q, /* bffd2c0000000000046a468614bd6000 */\n- -1.73291974845198589684358727559290718E-32Q, /* bf9567e9d158f52e483c8d8dcb5961dd */\n- -2.89062500000000007736778942676309681E-01Q, /* bffd280000000000023adf9f4c3d3000 */\n- -6.83629745986675744404029225571026236E-32Q, /* bf9762f5face6281c1daf1c6aedbdb45 */\n- -2.85156250000000001367091555763661937E-01Q, /* bffd2400000000000064dfa11e3fb000 */\n- -5.44898442619766878281110054067026237E-32Q, /* bf971aed6d2db9f542986a785edae072 */\n- -2.81249999999999986958718100227029406E-01Q, /* bffd1ffffffffffffc3db9265ca9d000 */\n-  1.13007318374506125723591889451107046E-32Q, /* 3f94d569fe387f456a97902907ac3856 */\n- -2.77343750000000000356078829380495179E-01Q, /* bffd1c0000000000001a462390083000 */\n- -4.98979365468978332358409063436543102E-32Q, /* bf970315bbf3e0d14b5c94c900702d4c */\n- -2.73437499999999990276993957508540484E-01Q, /* bffd17fffffffffffd32919bcdc94000 */\n- -8.79390484115892344533724650295100871E-32Q, /* bf97c89b0b89cc19c3ab2b60da9bbbc3 */\n- -2.69531250000000002434203866460082225E-01Q, /* bffd14000000000000b39ccf9e130000 */\n-  9.44060754687026590886751809927191596E-32Q, /* 3f97ea2f32cfecca5c64a26137a9210f */\n- -2.65624999999999997296320716986257179E-01Q, /* bffd0fffffffffffff3880f13a2bc000 */\n-  2.07142664067265697791007875348396921E-32Q, /* 3f95ae37ee685b9122fbe377bd205ee4 */\n- -2.61718750000000010237478733739017956E-01Q, /* bffd0c000000000002f3648179d40000 */\n- -6.10552936159265665298996309192680256E-32Q, /* bf973d0467d31e407515a3cca0f3b4e2 */\n- -2.57812500000000011948220522778370303E-01Q, /* bffd08000000000003719f81275bd000 */\n-  6.72477169058908902499239631466443836E-32Q, /* 3f975d2b8c475d3160cf72d227d8e6f9 */\n- -2.53906249999999991822993360536596860E-01Q, /* bffd03fffffffffffda4a4b62f818000 */\n- -2.44868296623215865054704392917190994E-32Q, /* bf95fc92516c6d057d29fc2528855976 */\n- -2.49999999999999986862019457428548084E-01Q, /* bffcfffffffffffff86d2d20d5ff4000 */\n- -3.85302898949105073614122724961613078E-32Q, /* bf96901f147cb7d643af71b6129ce929 */\n- -2.46093750000000000237554160737318435E-01Q, /* bffcf8000000000000230e8ade26b000 */\n- -1.52823675242678363494345369284988589E-32Q, /* bf953d6700c5f3fc303f79d0ec8c680a */\n- -2.42187500000000003023380963205457065E-01Q, /* bffcf0000000000001be2c1a78bb0000 */\n- -7.78402037952209709489481182714311699E-34Q, /* bf9102ab1f3998e887f0ee4cf940faa5 */\n- -2.38281249999999995309623303145485725E-01Q, /* bffce7fffffffffffd4bd2940f43f000 */\n- -3.54307216794236899443913216397197696E-32Q, /* bf966fef03ab69c3f289436205b21d02 */\n- -2.34374999999999998425804947623207526E-01Q, /* bffcdfffffffffffff17b097a6092000 */\n- -2.86038428948386602859761879407549696E-32Q, /* bf96290a0eba0131efe3a05fe188f2e3 */\n- -2.30468749999999993822207406785200832E-01Q, /* bffcd7fffffffffffc70519834eae000 */\n- -2.54339521031747516806893838749365762E-32Q, /* bf96081f0ad7f9107ae6cddb32c178ab */\n- -2.26562499999999997823524030344489884E-01Q, /* bffccffffffffffffebecf10093df000 */\n-  4.31904611473158635644635628922959401E-32Q, /* 3f96c083f0b1faa7c4c686193e38d67c */\n- -2.22656250000000004835132405125162742E-01Q, /* bffcc8000000000002c98a233f19f000 */\n-  2.54709791629335691650310168420597566E-33Q, /* 3f92a735903f5eed07a716ab931e20d9 */\n- -2.18749999999999988969454021829236626E-01Q, /* bffcbffffffffffff9a42dc14ce36000 */\n- -3.77236096429336082213752014054909454E-32Q, /* bf9687be8e5b2fca54d3e81157eac660 */\n- -2.14843750000000010613256919115758495E-01Q, /* bffcb80000000000061e3d828ecac000 */\n- -4.55194148712216691177097854305964738E-32Q, /* bf96d8b35c776aa3e1a4768271380503 */\n- -2.10937499999999993204656148110447201E-01Q, /* bffcaffffffffffffc152f2aea118000 */\n- -2.95044199165561453749332254271716417E-32Q, /* bf96326433b00b2439094d9bef22ddd1 */\n- -2.07031250000000012233944895423355677E-01Q, /* bffca80000000000070d695ee0e94000 */\n-  1.93146788688385419095981415411012357E-32Q, /* 3f959126729135a5e390d4bb802a0bde */\n- -2.03125000000000008030983633336321863E-01Q, /* bffca0000000000004a129fbc51af000 */\n-  2.37361904671826193563212931215900137E-32Q, /* 3f95ecfb3c4ba1b97ea3ad45cbb1e68a */\n- -1.99218750000000001763815712796132779E-01Q, /* bffc98000000000001044b12d9950000 */\n- -3.63171243370923753295192486732883239E-33Q, /* bf932db5fb3f27c38e0fa7bbcfc64f55 */\n- -1.95312500000000004883660234506677272E-01Q, /* bffc90000000000002d0b3779d1f9000 */\n- -3.19989507343607877747980892249711601E-33Q, /* bf9309d63de96bb3ef744c865f22f1bd */\n- -1.91406250000000013720152363227519348E-01Q, /* bffc88000000000007e8bcb387121000 */\n- -1.89295754093147174148371614722178860E-32Q, /* bf958926e2e67dfe812c508290add2e7 */\n- -1.87500000000000000182342082774432620E-01Q, /* bffc800000000000001ae8b06a39f000 */\n- -2.96812835183184815200854214892983927E-32Q, /* bf96343a62d156bbe71f55d14ca4b6e5 */\n- -1.83593750000000012410147185883290345E-01Q, /* bffc78000000000007276a1adda8d000 */\n- -2.02191931237489669058466239995304587E-32Q, /* bf95a3efab92d26ec2df90df036a117f */\n- -1.79687499999999997439177363346082917E-01Q, /* bffc6ffffffffffffe8616db2927d000 */\n- -9.92752326937775530007399526834009465E-33Q, /* bf949c5f88ed17041e1a3f1829d543cd */\n- -1.75781249999999995824373974504785174E-01Q, /* bffc67fffffffffffd97c94f13ea3000 */\n-  1.44184772065335613487885714828816178E-32Q, /* 3f952b75c63476e7fcc2f5841c27bcce */\n- -1.71874999999999986685050259043077809E-01Q, /* bffc5ffffffffffff8530f6bc531a000 */\n- -3.49007014971241147689894940544402482E-32Q, /* bf966a6dfaa012aea8ffe6d90b02330f */\n- -1.67968749999999997316058782350439701E-01Q, /* bffc57fffffffffffe73eb914f2aa000 */\n-  3.34025733574205019081305778794376391E-32Q, /* 3f965adf4572561fd5456a6c13d8babf */\n- -1.64062499999999993322730602128318480E-01Q, /* bffc4ffffffffffffc269be4f68f3000 */\n- -1.83345916769684984022099095506340635E-32Q, /* bf957ccb69026cb2f6024c211576d5f4 */\n- -1.60156249999999992419000744447607979E-01Q, /* bffc47fffffffffffba13df21784a000 */\n-  2.73442789798110494773517431626534726E-32Q, /* 3f961bf58ff22c9b30f1e2b39f26d7d5 */\n- -1.56249999999999987665010524130393080E-01Q, /* bffc3ffffffffffff8e3ad45e7508000 */\n-  2.02695576464836145806428118889332191E-32Q, /* 3f95a4fb7435a4a2f71de81eb8ae75d1 */\n- -1.52343749999999989905291167951491803E-01Q, /* bffc37fffffffffffa2e48aecfc24000 */\n- -3.61436631548815190395331054871041524E-32Q, /* bf967756567ebd108075ae527cc2e7f0 */\n- -1.48437500000000006686107754967759751E-01Q, /* bffc30000000000003dab20261b3c000 */\n- -2.15524270159131591469319477922198390E-32Q, /* bf95bfa05b82ef3a708c4f0395e9fcf6 */\n- -1.44531250000000005132889939177166485E-01Q, /* bffc28000000000002f57b1969e7b000 */\n-  2.74741116529653547935086189244019604E-32Q, /* 3f961d4eb77c1185d34fe1b04a3f3cf5 */\n- -1.40625000000000000707469094533647325E-01Q, /* bffc2000000000000068676d3d5c4000 */\n-  4.40607097220049957013547629906723266E-33Q, /* 3f936e0ac425daf795b42913cf0ef881 */\n- -1.36718749999999995713752139187543306E-01Q, /* bffc17fffffffffffd87762255991000 */\n- -3.73751317180116492404578048203389108E-32Q, /* bf9684202491e9cbb7ceb67d9ff7e0c9 */\n- -1.32812500000000007198453630478482191E-01Q, /* bffc10000000000004264de3a4379000 */\n- -3.97050085179660203884930593717220728E-32Q, /* bf969c52048de14be3c9c1971e50869c */\n- -1.28906250000000006070486371645733082E-01Q, /* bffc080000000000037fd87db2cb0000 */\n-  3.59610068058504988294019521946586131E-32Q, /* 3f967570c10687cb8e9ebd0b280abf5a */\n- -1.25000000000000003700729208608337966E-01Q, /* bffc00000000000002222198bbc74000 */\n-  3.23464851393124362331846965931995969E-33Q, /* 3f930cb95da3bfc847e593716c91d57a */\n- -1.21093750000000013729038501177102555E-01Q, /* bffbf000000000000fd418d1f5fda000 */\n-  2.45242487730722066611358741283977619E-32Q, /* 3f95fd5945ad86a464292e26ac192a84 */\n- -1.17187499999999999765305306880205578E-01Q, /* bffbdfffffffffffffbabaf869845000 */\n- -1.14557520298960389903199646350205537E-32Q, /* bf94dbda735322179d9bcf392e1dd06d */\n- -1.13281250000000009579647893740755690E-01Q, /* bffbd000000000000b0b69bae7ab9000 */\n-  2.37873962873837390105423621772752350E-32Q, /* 3f95ee0b7e0bd5ac1f6fab1e2a71abc3 */\n- -1.09375000000000008981153004560108539E-01Q, /* bffbc000000000000a5ac4bc1d2c3000 */\n-  1.53152444860014076105003555837231015E-32Q, /* 3f953e15ce931e12ef9a152522e32bdd */\n- -1.05468749999999992399063850363228723E-01Q, /* bffbaffffffffffff73c998091408000 */\n- -8.75920903597804862471749360196688834E-33Q, /* bf946bd7e310a01bae5687ebdc47fcc5 */\n- -1.01562500000000007685885179918350550E-01Q, /* bffba0000000000008dc7910a648c000 */\n- -4.63820993797174451904075397785059501E-33Q, /* bf938153d0e54001a472da180fb5e8aa */\n- -9.76562499999999887262211517861331814E-02Q, /* bffb8ffffffffffff300915aa6fd6000 */\n- -2.63767025974952608658936466715705903E-33Q, /* bf92b64215bb8d520be5404620d38088 */\n- -9.37499999999999939650246024457439795E-02Q, /* bffb7ffffffffffff90aca26bd0fc000 */\n- -1.72047822349322956713582039121348377E-32Q, /* bf9565545015c5b9b56d02cfefca2c7d */\n- -8.98437500000000033088896383977486369E-02Q, /* bffb70000000000003d09ca1e3cbe000 */\n-  3.04831994420989436248526129869697270E-33Q, /* 3f92fa7d30d2ed90e7ebbd6231fd08b1 */\n- -8.59374999999999947312400115121319225E-02Q, /* bffb5ffffffffffff9ecefc03376e000 */\n-  1.50416954438393392150792422537312281E-32Q, /* 3f9538675ee99bd722fad0023c09c915 */\n- -8.20312500000000054182280847004695514E-02Q, /* bffb500000000000063f2dbd40200000 */\n-  2.68399664523430004488075638997207289E-33Q, /* 3f92bdf49766629882c49a3da88928ed */\n- -7.81250000000000114767533968079748798E-02Q, /* bffb4000000000000d3b56f81ba70000 */\n-  1.72318124201659121296305402819694281E-32Q, /* 3f9565e407aaabfb359e8a567d760de3 */\n- -7.42187500000000035531829472486812869E-02Q, /* bffb3000000000000418b6e9b5388000 */\n-  2.09401756478514117051383998628099655E-32Q, /* 3f95b2e91221fcd74be0a86d8ad658d2 */\n- -7.03124999999999987474933134860732535E-02Q, /* bffb1ffffffffffffe8e53453d2ac000 */\n-  2.28515798224350800271565551341211666E-32Q, /* 3f95da9bd6adf00894f05b5cc5530125 */\n- -6.64062500000000042267533361089054159E-02Q, /* bffb10000000000004df8473dbcf2000 */\n-  1.97576478800281368377376002585430031E-32Q, /* 3f959a59acbddb2f53bd3096b66370e9 */\n- -6.25000000000000066329769382774201686E-02Q, /* bffb00000000000007a5b5914e336000 */\n- -1.46422615813786836245343723048221678E-33Q, /* bf91e69295f069fc0c4a9db181ea25a3 */\n- -5.85937500000000002823707957982406053E-02Q, /* bffae0000000000000a6aeab10592000 */\n-  9.25637741701318872896718218457555829E-33Q, /* 3f94807eb021f1f40a37d4015b1eb76b */\n- -5.46875000000000081586888005226044448E-02Q, /* bffac0000000000012d00a3171e3a000 */\n- -4.87144542459404765480424673678105050E-33Q, /* bf9394b42faba6b7036fe7b36269daf3 */\n- -5.07812499999999927720348253140567013E-02Q, /* bffa9fffffffffffef555cc8dd914000 */\n- -3.01901021987395945826043649523451725E-33Q, /* bf92f59e7e3025691f290f8f67277faf */\n- -4.68749999999999935349476738962633103E-02Q, /* bffa7ffffffffffff117b4ea2b876000 */\n-  1.21521638219189777347767475937119750E-32Q, /* 3f94f8c7f88c5b56674b94d984ac8ecb */\n- -4.29687500000000056305562847814228219E-02Q, /* bffa6000000000000cfbb19be30c0000 */\n- -1.18643699217679276275559592978275214E-32Q, /* bf94ecd39f0833a876550e83eb012b99 */\n- -3.90624999999999962692914526031373542E-02Q, /* bffa3ffffffffffff765c743922f9000 */\n- -4.91277156857520035712509544689973679E-33Q, /* bf939823189996193872e58ac0dececb */\n- -3.51562500000000108152468207687602886E-02Q, /* bffa20000000000018f031e41177f000 */\n-  1.18599806302656253755207072755609820E-32Q, /* 3f94eca4f23e787fab73ce8f6b9b8d64 */\n- -3.12500000000000077376981036742289578E-02Q, /* bffa00000000000011d787e0b386f000 */\n-  9.97730386477005171963635210799577079E-33Q, /* 3f949e70e498c46a0173ac0d46c699fc */\n- -2.73437500000000139436129596418623235E-02Q, /* bff9c00000000000404db66e70a08000 */\n-  2.25755321633070123579875157841633859E-33Q, /* 3f927719b1a93074bdf9f3c2cb784785 */\n- -2.34375000000000088003629211828324876E-02Q, /* bff98000000000002895a27d45feb000 */\n-  2.84374279216848803102126617873942975E-33Q, /* 3f92d87f70e749d6da6c260b68dc210b */\n- -1.95312500000000107408831063404855424E-02Q, /* bff9400000000000318898ba69f71000 */\n-  2.47348089686935458989103979140011912E-33Q, /* 3f929afa3de45086fe909fdddb41edce */\n- -1.56250000000000081443917555362290635E-02Q, /* bff9000000000000258f335e9cdd6000 */\n- -2.43379314483517422161458863218426254E-33Q, /* bf9294621c8a9ccacf2b020ec19cad27 */\n- -1.17187500000000051490597418161403184E-02Q, /* bff88000000000002f7ddfa26221f000 */\n-  1.83405297208145390679150568810924707E-33Q, /* 3f9230bbfc5d5fe1b534fbcda0465bb9 */\n- -7.81249999999999715861805208310174953E-03Q, /* bff7ffffffffffffcb95f3fff157d000 */\n-  3.51548384878710915171654413641872451E-34Q, /* 3f8fd349b76c22966f77a39fc37ed704 */\n- -3.90625000000000309326013918295097128E-03Q, /* bff7000000000000390f820c8e153000 */\n-  6.38058004651791109324060099097251911E-36Q, /* 3f8a0f665d3ac25a1ac94d688273dbcd */\n-#define T_EXPL_ARG1 (2*89)\n-  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n-  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n-  3.90625000000000245479958859972588985E-03Q, /* 3ff70000000000002d48769ac9874000 */\n- -6.58439598384342854976169982902779828E-36Q, /* bf8a1811b923e6c626b07ef29761482a */\n-  7.81250000000001311374391093664996358E-03Q, /* 3ff800000000000078f3f3cd89111000 */\n-  2.60265650555493781464273319671555602E-33Q, /* 3f92b070c3b635b87af426735a71fc87 */\n-  1.17187500000000269581156218247101912E-02Q, /* 3ff8800000000000f8a50d02fe20d000 */\n-  1.00961747974945520631836275894919326E-33Q, /* 3f914f80c1a4f8042044fe3b757b030b */\n-  1.56249999999999797878275270751825475E-02Q, /* 3ff8ffffffffffff45935b69da62e000 */\n-  2.03174577741375590087897353146748580E-33Q, /* 3f925194e863496e0f6e91cbf6b22e26 */\n-  1.95312499999999760319884511789111533E-02Q, /* 3ff93fffffffffff917790ff9a8f4000 */\n-  4.62788519658803722282100289809515007E-33Q, /* 3f9380783ba81295feeb3e4879d7d52d */\n-  2.34374999999999822953909016349145918E-02Q, /* 3ff97fffffffffffae5a163bd3cd5000 */\n- -3.19499956304699705390404384504876533E-33Q, /* bf93096e2037ced8194cf344c692f8d6 */\n-  2.73437500000000137220327275871555682E-02Q, /* 3ff9c000000000003f481dea5dd51000 */\n- -2.25757776523031994464630107442723424E-33Q, /* bf92771abcf988a02b414bf2614e3734 */\n-  3.12499999999999790857640618332718621E-02Q, /* 3ff9ffffffffffff9f8cd40b51509000 */\n- -4.22479470489989916319395454536511458E-33Q, /* bf935efb7245612f371deca17cb7b30c */\n-  3.51562499999999840753382405747597346E-02Q, /* 3ffa1fffffffffffdb47bd275f722000 */\n-  1.08459658374118041980976756063083500E-34Q, /* 3f8e2055d18b7117c9db1c318b1e889b */\n-  3.90624999999999989384433621470426757E-02Q, /* 3ffa3ffffffffffffd8d5e18b042e000 */\n- -7.41674226146122000759491297811091830E-33Q, /* bf94341454e48029e5b0205d91baffdc */\n-  4.29687500000000107505739500500200462E-02Q, /* 3ffa60000000000018ca04cd9085c000 */\n- -4.74689012756713017494437969420919847E-34Q, /* bf903b7c268103c6f7fbaaa24142e287 */\n-  4.68749999999999978700749928325717352E-02Q, /* 3ffa7ffffffffffffb16b6d5479e3000 */\n- -1.06208165308448830117773486334902917E-32Q, /* bf94b92be4b3b5b5a596a0a5187cc955 */\n-  5.07812499999999815072625435955786253E-02Q, /* 3ffa9fffffffffffd55bd086d5cbc000 */\n- -9.37038897148383660401929567549111394E-33Q, /* bf94853b111b0175b491c80d00419416 */\n-  5.46874999999999809511553152189867394E-02Q, /* 3ffabfffffffffffd4138bfa74a61000 */\n-  1.06642963074562437340498606682822123E-32Q, /* 3f94bafa3fe991b39255d563dfa05d89 */\n-  5.85937500000000184331996330905145551E-02Q, /* 3ffae000000000002a810a5f2f8bf000 */\n- -1.76639977694797200820296641773791945E-34Q, /* bf8ed596f07ce4408f1705c8ec16864c */\n-  6.25000000000000021544696744852045001E-02Q, /* 3ffb000000000000027be32045e2b000 */\n-  1.68616371995798354366633034788947149E-32Q, /* 3f955e33d7440794d8a1b25233d086ab */\n-  6.64062499999999965563110718495802889E-02Q, /* 3ffb0ffffffffffffc079a38a3fed000 */\n- -1.82463217667830160048872113565316215E-32Q, /* bf957af6163bcdb97cefab44a942482a */\n-  7.03124999999999759989183341261898222E-02Q, /* 3ffb1fffffffffffe454218acea05000 */\n- -1.07843770101525495515646940862541503E-32Q, /* bf94bff72aada26d94e76e71c07e0580 */\n-  7.42187499999999898968873730710101412E-02Q, /* 3ffb2ffffffffffff45a166496dc1000 */\n-  1.28629441689592874462780757154138223E-32Q, /* 3f950b2724597b8b93ce1e9d1cf4d035 */\n-  7.81249999999999957198938523510804668E-02Q, /* 3ffb3ffffffffffffb10bc52adbc5000 */\n-  1.13297573459968118467100063135856856E-33Q, /* 3f91787eea895b3c245899cf34ad0abd */\n-  8.20312500000000199911640621145851159E-02Q, /* 3ffb500000000000170c59a661a89000 */\n- -1.51161335208135146756554123073528707E-32Q, /* bf9539f326c5ca84e7db5401566f3775 */\n-  8.59375000000000134175373433347670743E-02Q, /* 3ffb6000000000000f78287547af0000 */\n-  1.09763629458404270323909815379924900E-32Q, /* 3f94c7f0b61b6e3e27d44b9f5bbc7e9d */\n-  8.98437500000000036533922600308306335E-02Q, /* 3ffb70000000000004364a83b7a14000 */\n-  3.11459653680110433194288029777718358E-33Q, /* 3f9302c0248136d65cebeab69488d949 */\n-  9.37500000000000184977946245216914691E-02Q, /* 3ffb800000000000155395d870b17000 */\n- -4.66656154468277949130395786965043927E-33Q, /* bf9383aec9b993b6db492b1ede786d8a */\n-  9.76562500000000237839723100419376084E-02Q, /* 3ffb9000000000001b6bca237f6c4000 */\n- -1.03028043424658760249140747856831301E-32Q, /* bf94abf6352e3d2bb398e47919a343fb */\n-  1.01562500000000012345545575236836572E-01Q, /* 3ffba000000000000e3bc30cd9a1f000 */\n-  2.15755372310795701322789783729456319E-32Q, /* 3f95c01b3b819edd9d07548fafd61550 */\n-  1.05468749999999976493840484471911438E-01Q, /* 3ffbafffffffffffe4e634cd77985000 */\n-  1.78771847038773333029677216592309083E-32Q, /* 3f95734b6ae650f33dd43c49a1df9fc0 */\n-  1.09375000000000002267015055992785402E-01Q, /* 3ffbc00000000000029d1ad08de7b000 */\n-  6.23263106693943817730045115112427717E-33Q, /* 3f9402e4b39ce2198a45e1d045868cd6 */\n-  1.13281250000000022354208618429577398E-01Q, /* 3ffbd0000000000019c5cc3f9d2b5000 */\n-  5.40514416644786448581426756221178868E-33Q, /* 3f93c10ab4021472c662f69435de9269 */\n-  1.17187500000000013252367133076817603E-01Q, /* 3ffbe000000000000f47688cc561b000 */\n- -7.12412585457324989451327215568641325E-33Q, /* bf9427ecb343a8d1758990565fcfbf45 */\n-  1.21093750000000020759863992944300792E-01Q, /* 3ffbf0000000000017ef3af97bf04000 */\n-  6.26591408357572503875647872077266444E-33Q, /* 3f940446a09a2da771b45fc075514d12 */\n-  1.25000000000000004739659392396765618E-01Q, /* 3ffc00000000000002bb7344ecd89000 */\n- -1.55611398459729463981000080101758830E-32Q, /* bf95433135febefa9e6aa4db39e263d2 */\n-  1.28906249999999982360888081057894783E-01Q, /* 3ffc07fffffffffff5d4ed3154361000 */\n- -1.77531518652835570781208599686606474E-32Q, /* bf9570b7f225ea076f97f418d11359c1 */\n-  1.32812500000000010568583998727400436E-01Q, /* 3ffc1000000000000617a5d09526a000 */\n-  2.12104021624990594668286391598300893E-32Q, /* 3f95b885d767a1048d93055927a27adc */\n-  1.36718749999999998434125157367005292E-01Q, /* 3ffc17ffffffffffff18eaebc7970000 */\n-  2.50454798592543203967309921276955297E-32Q, /* 3f9604164e5598528a76faff26cd1c97 */\n-  1.40625000000000015550032422969330356E-01Q, /* 3ffc20000000000008f6c79d8928c000 */\n-  7.80972982879849783680252962992639832E-33Q, /* 3f9444674acf2b3225c7647e0d95edf3 */\n-  1.44531250000000012402535562111122522E-01Q, /* 3ffc28000000000007264a8bc1ff1000 */\n-  2.79662468716455159585514763921671876E-32Q, /* 3f96226b095bd78aa650faf95a221993 */\n-  1.48437500000000007761020440087419948E-01Q, /* 3ffc3000000000000479530ff8fe3000 */\n-  2.15518492972728435680556239996258527E-32Q, /* 3f95bf9d49295e73a957906a029768cb */\n-  1.52343750000000001733189947520484032E-01Q, /* 3ffc38000000000000ffc6109f71f000 */\n-  8.34032236093545825619420380704500188E-33Q, /* 3f945a71851226a1d0ce5e656693153e */\n-  1.56249999999999988073295321246958484E-01Q, /* 3ffc3ffffffffffff91fedd62ae0f000 */\n-  2.44119337150624789345260194989620908E-32Q, /* 3f95fb041a57bc1c1280680ac1620bea */\n-  1.60156250000000002076894210913572460E-01Q, /* 3ffc48000000000001327ed84a199000 */\n- -7.36124501128859978061216696286151753E-33Q, /* bf9431c62f01e59d2c1e00f195a0037f */\n-  1.64062500000000000950861276373482172E-01Q, /* 3ffc500000000000008c5285fba85000 */\n- -4.80566184447001164583855800470217373E-33Q, /* bf938f3d1fcafd390f22f80e6c19421f */\n-  1.67968749999999989878071706155265999E-01Q, /* 3ffc57fffffffffffa2a445c548c5000 */\n- -4.42154428718618459799673088733365064E-32Q, /* bf96cb28cf1c1b28006d53ffe633b22a */\n-  1.71874999999999999459734108403218175E-01Q, /* 3ffc5fffffffffffffb04554e9dd4000 */\n- -3.29736288190321377985697972236270628E-32Q, /* bf96566af0ebc852e84be12859b24a31 */\n-  1.75781249999999997987525759778901845E-01Q, /* 3ffc67fffffffffffed702df6ffff000 */\n- -1.28800728638468399687523924685844352E-32Q, /* bf950b8236b88ca0c1b739dc91a7e3fc */\n-  1.79687500000000004929565820437175783E-01Q, /* 3ffc70000000000002d779bb32d2e000 */\n-  1.60624461317978482424582320675174225E-32Q, /* 3f954d9a9cc0c963fd081f3dc922d04e */\n-  1.83593750000000016873727045739708856E-01Q, /* 3ffc78000000000009ba1f6263c9a000 */\n- -3.83390389582056606880506003118452558E-32Q, /* bf968e22a5d826f77f19ee788474df22 */\n-  1.87500000000000013443068740761666872E-01Q, /* 3ffc80000000000007bfd8c72a1bf000 */\n- -2.74141662712926256150154726565203091E-32Q, /* bf961caf5ac59c7f941f928e324c2cc1 */\n-  1.91406249999999981494101786848611970E-01Q, /* 3ffc87fffffffffff55502eeae001000 */\n-  3.68992437075565165346469517256118001E-32Q, /* 3f967f2f03f9096793372a27b92ad79d */\n-  1.95312499999999989069921848800501648E-01Q, /* 3ffc8ffffffffffff9b3015280394000 */\n-  3.69712249337856518452988332367785220E-32Q, /* 3f967fee5fdb5bd501ff93516999faa0 */\n-  1.99218750000000021148042946919300804E-01Q, /* 3ffc9800000000000c30e67939095000 */\n-  2.50142536781142175091322844848566649E-32Q, /* 3f9603c34ae58e10b300b07137ee618a */\n-  2.03124999999999977732559198825437141E-01Q, /* 3ffc9ffffffffffff329e7df079e4000 */\n- -2.41951877287895024779300892731537816E-32Q, /* bf95f683aefe6965f080df8f59dd34a1 */\n-  2.07031249999999996744030653771913124E-01Q, /* 3ffca7fffffffffffe1f80f4b73ca000 */\n- -1.94346475904454000031592792989765585E-32Q, /* bf9593a44f87870a3d100d498501ecc7 */\n-  2.10937500000000000251399259834392298E-01Q, /* 3ffcb000000000000025199873310000 */\n- -1.33528748788094249098998693871759411E-33Q, /* bf91bbb9b25c813668d6103d08acac35 */\n-  2.14843749999999993936323609611875097E-01Q, /* 3ffcb7fffffffffffc8128c866236000 */\n-  1.14839877977014974625242788556545292E-32Q, /* 3f94dd06b4655c9b83a1305b240e7a42 */\n-  2.18750000000000015181732784749663837E-01Q, /* 3ffcc0000000000008c06da5fff24000 */\n-  1.42689085313142539755499441881408391E-32Q, /* 3f95285a87dfa7ea7dad5b3be8c669f4 */\n-  2.22656249999999992172647770539596569E-01Q, /* 3ffcc7fffffffffffb7ce2fe531f6000 */\n- -3.34421462850496887359128610229650547E-32Q, /* bf965b487962b5c2d9056ca6ac0c2e5c */\n-  2.26562499999999989595607223847082419E-01Q, /* 3ffccffffffffffffa0095277be5c000 */\n- -3.08983588107248752517344356508205569E-32Q, /* bf9640dded57157f8eded311213bdbcd */\n-  2.30468749999999979130462438434567117E-01Q, /* 3ffcd7fffffffffff3f8332996560000 */\n- -3.01407539802851697849105682795217019E-32Q, /* bf9638ffde35dbdfe1a1ffe45185de5d */\n-  2.34375000000000012194252337217891971E-01Q, /* 3ffce0000000000007078dd402c86000 */\n- -8.46879710915628592284714319904522657E-33Q, /* bf945fc7b29a2ac6c9eff9eb258a510f */\n-  2.38281249999999982991877076137149870E-01Q, /* 3ffce7fffffffffff6320b486eece000 */\n- -2.93563878880439245627127095245798544E-32Q, /* bf9630daaa4f40ff05caf29ace2ea7d4 */\n-  2.42187499999999981447559841442773990E-01Q, /* 3ffceffffffffffff54e24a09a8d5000 */\n- -4.56766746558806021264215486909850481E-32Q, /* bf96da556dee11f3113e5a3467b908e6 */\n-  2.46093749999999991067720539980207318E-01Q, /* 3ffcf7fffffffffffad9d405dcb5d000 */\n-  2.14033004219908074003010247652128251E-32Q, /* 3f95bc8776e8f9ae098884aa664cc3df */\n-  2.50000000000000016613825838126835953E-01Q, /* 3ffd00000000000004c9e24c12bb3000 */\n-  2.57617532593749185996714235009382870E-32Q, /* 3f960b867cc01178c0ec68226c6cb47d */\n-  2.53906250000000013372004437827044321E-01Q, /* 3ffd04000000000003daae05b3168000 */\n-  7.20177123439204414298152646284640101E-32Q, /* 3f9775eff59ddad7e7530b83934af87f */\n-  2.57812499999999995765234725413886085E-01Q, /* 3ffd07fffffffffffec7878bad9d5000 */\n-  6.51253187532920882777046064603770602E-32Q, /* 3f975226659ca241402e71c2011583b0 */\n-  2.61718750000000007647689994011222248E-01Q, /* 3ffd0c000000000002344cc793a0f000 */\n-  3.02370610028725823590045201871491395E-32Q, /* 3f9639ffe55fa2fa011674448b4e5b96 */\n-  2.65624999999999986893899042596554269E-01Q, /* 3ffd0ffffffffffffc38f0c0a1e9f000 */\n- -2.07683715950724761146070082510569258E-32Q, /* bf95af579a92e872fef81abfdf06bae8 */\n-  2.69531249999999979842788204900639327E-01Q, /* 3ffd13fffffffffffa30a908d67db000 */\n-  8.71465252506557329027658736641075706E-32Q, /* 3f97c47d99e19830447a42b1c0ffac61 */\n-  2.73437500000000006712165837793818271E-01Q, /* 3ffd18000000000001ef453a58edb000 */\n- -6.62704045767568912140550474455810301E-32Q, /* bf9758187a204dcb06ece46588aeeaba */\n-  2.77343749999999994411329302988535617E-01Q, /* 3ffd1bfffffffffffe63a0fec9c9e000 */\n- -4.87273466291944117406493607771338767E-32Q, /* bf96fa0381b0844a0be46bac2d673f0c */\n-  2.81250000000000012677892447379453135E-01Q, /* 3ffd20000000000003a7769e125d6000 */\n- -8.55871796664700790726282049552906783E-32Q, /* bf97bc64e01332cf7616b0091b8dff2c */\n-  2.85156249999999998558643013736363981E-01Q, /* 3ffd23ffffffffffff95a5894bccf000 */\n- -1.33068334720606220176455289635046875E-32Q, /* bf95145f43290ecf5b7adcb24697bc73 */\n-  2.89062500000000008831431235621753924E-01Q, /* 3ffd280000000000028ba504fac59000 */\n- -9.34157398616814623985483776710704237E-32Q, /* bf97e50ad1115b941fcb5f0c88a428f7 */\n-  2.92968750000000019840235286110877063E-01Q, /* 3ffd2c000000000005b7f372d184f000 */\n-  4.99302093775173155906059132992249671E-33Q, /* 3f939ecdcfb97bad3f8dbec5df5ec67d */\n-  2.96875000000000015867911730971630513E-01Q, /* 3ffd3000000000000492d860c79db000 */\n-  7.86107787827057767235127454590866211E-33Q, /* 3f944689517ee8f16cdb97d6a6938f32 */\n-  3.00781250000000015814100002286124758E-01Q, /* 3ffd340000000000048edfe73a17d000 */\n- -1.65419431293024229981937172317171504E-32Q, /* bf9557900e3efca16c89646b57f68dc0 */\n-  3.04687499999999985213157159965287195E-01Q, /* 3ffd37fffffffffffbbcec6f99b36000 */\n-  9.68753602893894024018934325652944198E-32Q, /* 3f97f70170e5458660c33a7e8d43d049 */\n-  3.08593749999999989969324338045156215E-01Q, /* 3ffd3bfffffffffffd1bdde4d0fb1000 */\n-  7.10268609610294706092252562643261106E-32Q, /* 3f9770cae45cdf615010401a4b37d8d4 */\n-  3.12500000000000002971606591018488854E-01Q, /* 3ffd40000000000000db440fbc06b000 */\n-  6.38924218802905979887732294952782964E-32Q, /* 3f974bbf988bb5622bd8fbaa46e8b811 */\n-  3.16406250000000006594921047402056305E-01Q, /* 3ffd44000000000001e69e8954814000 */\n-  3.96079878754651470094149874444850097E-32Q, /* 3f969b5017b9fa7a1e86975258c73d3d */\n-  3.20312500000000006713799366908329147E-01Q, /* 3ffd48000000000001ef64159c065000 */\n- -1.86401314975634286055150437995880517E-32Q, /* bf958323f0434911794e5fb8bfe136ba */\n-  3.24218749999999987061246567584951210E-01Q, /* 3ffd4bfffffffffffc4549db9b928000 */\n- -3.18643523744758601387071062700407431E-32Q, /* bf964ae5fa7e26c2c3981bed12e14372 */\n-  3.28124999999999991782776266707412953E-01Q, /* 3ffd4ffffffffffffda1ad0840ca8000 */\n- -4.46964199751314296839915534813144652E-32Q, /* bf96d0277729ffd74727150df6d15547 */\n-  3.32031250000000000393816557756032682E-01Q, /* 3ffd540000000000001d0efc04fad000 */\n- -9.03246333902065439930373230002688649E-33Q, /* bf947731a008748cc6dee948839ef7ae */\n-  3.35937499999999983810482995064392173E-01Q, /* 3ffd57fffffffffffb556cab8ae61000 */\n-  5.27742727066129518825981597650621794E-32Q, /* 3f9712050a6ddbf1cabf1b971f4b5d0b */\n-  3.39843750000000004310441349760912471E-01Q, /* 3ffd5c0000000000013e0def5ddc4000 */\n- -3.85927263474732591932884416445586106E-32Q, /* bf9690c51088ef3db9ca000829c450c2 */\n-  3.43749999999999990248130003997484364E-01Q, /* 3ffd5ffffffffffffd3070624a0af000 */\n-  9.62005170171527308106468341512327487E-34Q, /* 3f913fae595cea84432eb01430817fca */\n-  3.47656250000000004085726414568625697E-01Q, /* 3ffd640000000000012d79309e291000 */\n- -6.59664093705705297250259434519072507E-32Q, /* bf97568465eafb0e662e64a5dbfaf35f */\n-\n- -1.98364257812501251077851763965418372E-03Q, /* bff6040000000001cd90f658cf0b1000 */\n- -3.71984513103117734260309047540278737E-34Q, /* bf8fee73c54483194782aac4a6154d11 */\n- -1.95312500000000378520649630233891879E-03Q, /* bff60000000000008ba643bb5e2e8000 */\n- -1.12194202736719050440745599339855038E-34Q, /* bf8e2a436aeff7bc529873354f47a3f5 */\n- -1.92260742187499397430259771221991482E-03Q, /* bff5f7fffffffffe4361cb51170da000 */\n- -2.30068299876822157331268484824540848E-34Q, /* bf8f31d02f85cfe8c0cc02276ce0f437 */\n- -1.89208984375001137424603270262074989E-03Q, /* bff5f0000000000347456ed490c23000 */\n- -1.15012507244426243338260435466985403E-34Q, /* bf8e31c174d5677a937a34ad8d2a70b4 */\n- -1.86157226562500172319250342061336738E-03Q, /* bff5e800000000007f262fa3617b4000 */\n- -3.12438344643346437509767736937785561E-34Q, /* bf8f9f4d426a2457c273d34ef7d9bde9 */\n- -1.83105468749999505256246872355430379E-03Q, /* bff5dffffffffffe92f18c1c2b6fa000 */\n- -5.91130415288336591179087455220308942E-35Q, /* bf8d3a4c80b42dc036bae446c9807f78 */\n- -1.80053710937499445182387245573120522E-03Q, /* bff5d7fffffffffe669dea82b4a4c000 */\n- -1.92396289352411531324908916321392100E-34Q, /* bf8eff7a2123fb573ba9778550d669bd */\n- -1.77001953125000387737631542516323906E-03Q, /* bff5d000000000011e19915c3ddb7000 */\n-  7.91101758977203355387806553469731354E-36Q, /* 3f8a507f5a70faaccf469e3461873dea */\n- -1.73950195312500034854670281415554486E-03Q, /* bff5c8000000000019b7dc6ef97bd000 */\n-  1.55906551582436824067407021178835755E-34Q, /* 3f8e9e7880333e34955aebcde3cfb053 */\n- -1.70898437499998955782591472611429852E-03Q, /* bff5bffffffffffcfd80e88aa6b96000 */\n-  8.22951661962611381718215899498500357E-35Q, /* 3f8db58e6031a779b59f6ece191de7cc */\n- -1.67846679687500586652037711131708544E-03Q, /* bff5b80000000001b0df6fd21c133000 */\n- -8.96642618848426299713145894522897419E-35Q, /* bf8ddcbcab46d531801bfae4121f2f8a */\n- -1.64794921875000109499161354039904782E-03Q, /* bff5b0000000000050cbce8915575000 */\n- -2.88077905394253859590587789680486639E-34Q, /* bf8f7eebd4dd860ef73b674d5e707959 */\n- -1.61743164062501133830507079150388351E-03Q, /* bff5a80000000003449e8700c3e82000 */\n- -3.68271725851639066312899986829350273E-34Q, /* bf8fe9845fe20a5fe74059e0cae185d6 */\n- -1.58691406249999015546015764131101956E-03Q, /* bff59ffffffffffd2999e668cdd28000 */\n-  8.48197657099957029953716507898788812E-35Q, /* 3f8dc2faaebb97392e451b07b28c4b12 */\n- -1.55639648437500317366570219290722587E-03Q, /* bff5980000000000ea2cd9a40d256000 */\n- -3.45156704719737676412949957712570373E-36Q, /* bf8925a079505516c8e317ac1ff53255 */\n- -1.52587890625000568759013197767046039E-03Q, /* bff5900000000001a3ab8a3f6b698000 */\n- -1.01902948542497496574967177677556729E-34Q, /* bf8e0ee78d94d9b5ad3d63ae35c9b554 */\n- -1.49536132812500945889014955936485340E-03Q, /* bff5880000000002b9f1621b57743000 */\n- -3.32264697086631598830366079048117140E-34Q, /* bf8fb9a7d14c32289204fbb0c9eb20e0 */\n- -1.46484374999999931883259902869504725E-03Q, /* bff57fffffffffffcdbd1c90e1b4a000 */\n- -1.76487524793892929381101031660811433E-34Q, /* bf8ed52f2f724bc1ae870b18356337b4 */\n- -1.43432617187498876325946983333888768E-03Q, /* bff577fffffffffcc2dff8faa5570000 */\n- -3.54550084538495708816233114576143814E-34Q, /* bf8fd74724576915868c1e8ce9f430f1 */\n- -1.40380859374999215367421282192718062E-03Q, /* bff56ffffffffffdbd0b18aac65ed000 */\n- -1.90585907028351204486765167064669639E-34Q, /* bf8efaaa0c0e23e50c11b2120348054f */\n- -1.37329101562499692341771212945644892E-03Q, /* bff567ffffffffff1cfd00f1b0577000 */\n- -3.59631150411372589637918252836880320E-34Q, /* bf8fde08239ac74942a46298ea4fb715 */\n- -1.34277343749999137467356674296739172E-03Q, /* bff55ffffffffffd839030b05d53d000 */\n- -1.49571076125940368185068762485268117E-35Q, /* bf8b3e1a3d5c684b27a9f835b1d8d3c9 */\n- -1.31225585937499247038404301859788734E-03Q, /* bff557fffffffffdd469936e691e3000 */\n-  3.10375845385355395586146533282311300E-34Q, /* 3f8f9c8f6d63b7a4145716ffd92491fb */\n- -1.28173828124999024755581675764821898E-03Q, /* bff54ffffffffffd306589b0ab21d000 */\n- -1.98541096105909793397376077900810019E-34Q, /* bf8f07e808bbb1e35106c294ffbb9687 */\n- -1.25122070312500340204619591143332523E-03Q, /* bff5480000000000fb06d5f16ad2c000 */\n-  3.62884195935761446237911443317457521E-34Q, /* 3f8fe25b17d623178a386a6fa6c5afb2 */\n- -1.22070312499999591578388993012071279E-03Q, /* bff53ffffffffffed2a356c440074000 */\n- -2.96756662615653130862526710937493307E-35Q, /* bf8c3b90d8ff2a991e5bd16718fb0645 */\n- -1.19018554687498821966212632349422735E-03Q, /* bff537fffffffffc9ac3b585dda89000 */\n-  1.44659971891167323357060028901142644E-34Q, /* 3f8e809279ab249edf1dad9fe13fb0bf */\n- -1.15966796875000160938908064907298384E-03Q, /* bff530000000000076c0800db9639000 */\n-  2.50088010538742402346270685365928513E-34Q, /* 3f8f4c6c8a483b60201d30c1a83c3cb7 */\n- -1.12915039062500267151512523291939657E-03Q, /* bff5280000000000c51f7e7315137000 */\n-  7.56402096465615210500092443924888831E-35Q, /* 3f8d922c1e485d99aea2668ed32b55a6 */\n- -1.09863281249998665006360103291051571E-03Q, /* bff51ffffffffffc26f2d4c9ce2ba000 */\n-  1.43982174467233642713619821353592061E-34Q, /* 3f8e7ec530b3d92b6303bec1c81214d1 */\n- -1.06811523437500522742248711752028025E-03Q, /* bff518000000000181b7380f10446000 */\n-  5.41265133745862349181293024531133174E-35Q, /* 3f8d1fc9313d018b30e790e06b6be723 */\n- -1.03759765624999980942114138999770552E-03Q, /* bff50ffffffffffff1f01130490e1000 */\n-  1.21525139612685854366189534669623436E-34Q, /* 3f8e4311b96b6fcde412caf3f0d86fb9 */\n- -1.00708007812499602697537601515759439E-03Q, /* bff507fffffffffedad7afcce7051000 */\n-  1.00020246351201558505328236381833392E-34Q, /* 3f8e09e640992512b1300744a7e984ed */\n- -9.76562499999992592487302113340463694E-04Q, /* bff4fffffffffffbbad8151f8adf6000 */\n- -1.64984406575162932060422892046851002E-34Q, /* bf8eb69a919986e8054b86fc34300f24 */\n- -9.46044921874989085824996924138179594E-04Q, /* bff4effffffffff9b55a204fd9792000 */\n- -9.29539174108308550334255350011347171E-35Q, /* bf8dee3a50ed896b4656fa577a1df3d7 */\n- -9.15527343750013735214860599791540029E-04Q, /* bff4e00000000007eaf5bf103f82d000 */\n-  3.07557018309280519949818825519490586E-35Q, /* 3f8c470cfbef77d32c74cb8042f6ee81 */\n- -8.85009765625012292294986105781516428E-04Q, /* bff4d000000000071605c65403b97000 */\n-  4.77499983783821950338363358545463558E-35Q, /* 3f8cfbc3dc18884c4c4f9e07d90d7bd3 */\n- -8.54492187499986941239470706817188192E-04Q, /* bff4bffffffffff878ddf9cab264a000 */\n- -1.60128240346239526958630011447901568E-34Q, /* bf8ea9b1a21e19e2d5bd84b0fbffcf95 */\n- -8.23974609374996290174598690241743810E-04Q, /* bff4affffffffffddc86c249ebe06000 */\n-  1.61677540391961912631535763471935882E-34Q, /* 3f8eadd00841366b0dc2bc262c2c8c36 */\n- -7.93457031249988696952538334288757473E-04Q, /* bff49ffffffffff97bf6f0aa85a5f000 */\n-  1.22318577008381887076634753347515709E-34Q, /* 3f8e452db5b5d250878f71040da06d14 */\n- -7.62939453124996723316499040007097041E-04Q, /* bff48ffffffffffe1c7265b431108000 */\n- -1.03845161748762410745671891558398468E-34Q, /* bf8e14115ad884c96d1a820c73647220 */\n- -7.32421874999998242520117923997325794E-04Q, /* bff47ffffffffffefca4498b7aa8a000 */\n-  5.64005211953031009549514026639438083E-35Q, /* 3f8d2be06950f68f1a6d8ff829a6928e */\n- -7.01904296874999772890934814265622012E-04Q, /* bff46fffffffffffde7c0fe5d8041000 */\n-  5.90245467325173644235991233229525762E-35Q, /* 3f8d39d40cc49002189243c194b1db0e */\n- -6.71386718750008699269643939210658742E-04Q, /* bff460000000000503c91d798b60c000 */\n- -5.20515801723324452151498579012322191E-35Q, /* bf8d14c0f08a6a9285b32b8bda003eb5 */\n- -6.40869140625005499535275057463709988E-04Q, /* bff45000000000032b969184e9751000 */\n- -6.69469163285461870099846471658294534E-35Q, /* bf8d63f36bab7b24d936c9380e3d3fa6 */\n- -6.10351562499999293780097329596079841E-04Q, /* bff43fffffffffff97c7c433e35ed000 */\n- -1.16941808547394177991845382085515086E-34Q, /* bf8e36e27886f10b234a7dd8fc588bf0 */\n- -5.79833984375000068291972326409994795E-04Q, /* bff43000000000000a13ff6dcf2bf000 */\n-  1.17885044988246219185041488459766001E-34Q, /* 3f8e3964677e001a00412aab52790842 */\n- -5.49316406249990904622170867910987793E-04Q, /* bff41ffffffffffac1c25739c716b000 */\n- -3.31875702128137033065075734368960972E-35Q, /* bf8c60e928d8982c3c99aef4f885a121 */\n- -5.18798828125011293653756992177727236E-04Q, /* bff410000000000682a62cff36775000 */\n- -5.69971237642088463334239430962628187E-35Q, /* bf8d2f0c76f8757d61cd1abc7ea7d066 */\n- -4.88281249999990512232251384917893121E-04Q, /* bff3fffffffffff50fb48992320df000 */\n-  1.02144616714408655325510171265051108E-35Q, /* 3f8ab279a3626612710b9b3ac71734ac */\n- -4.57763671874997554564967307956493434E-04Q, /* bff3dffffffffffd2e3c272e3cca9000 */\n- -8.25484058867957231164162481843653503E-35Q, /* bf8db6e71158e7bf93e2e683f07aa841 */\n- -4.27246093749991203999790346349633286E-04Q, /* bff3bffffffffff5dbe103cba0eb2000 */\n- -3.51191203319375193921924105905691755E-35Q, /* bf8c757356d0f3dd7fbefc0dd419ab50 */\n- -3.96728515624986649402960638705483281E-04Q, /* bff39ffffffffff09b996882706ec000 */\n- -5.51925962073095883016589497244931171E-36Q, /* bf89d586d49f22289cfc860bebb99056 */\n- -3.66210937499999945095511981300980754E-04Q, /* bff37fffffffffffefcb88bfc7df6000 */\n- -2.11696465278144529364423332249588595E-35Q, /* bf8bc23a84d28e5496c874ef9833be25 */\n- -3.35693359374992480958458008559640163E-04Q, /* bff35ffffffffff754c548a8798f2000 */\n- -8.58941791799705081104736787493668352E-35Q, /* bf8dc8b1192fb7c3662826d43acb7c68 */\n- -3.05175781250009811036303273640122156E-04Q, /* bff340000000000b4fb4f1aad1c76000 */\n- -8.61173897858769926480551302277426632E-35Q, /* bf8dc9e0eabb1c0b33051011b64769fa */\n- -2.74658203124987298321920308390303850E-04Q, /* bff31ffffffffff15b2056ac252fd000 */\n-  3.35152809454778381053519808988046631E-37Q, /* 3f85c82fb59ff8d7c80d44e635420ab1 */\n- -2.44140624999999992770514819575735516E-04Q, /* bff2fffffffffffffbbb82d6a7636000 */\n-  3.54445837111124472730013879165516908E-35Q, /* 3f8c78e955b01378be647b1c92aa9a77 */\n- -2.13623046875012756463165168672749438E-04Q, /* bff2c0000000001d6a1635fea6bbf000 */\n-  1.50050816288650121729916777279129473E-35Q, /* 3f8b3f1f6f616a61129a58e131cbd31d */\n- -1.83105468749991323078784464300306893E-04Q, /* bff27fffffffffebfe0cbd0c82399000 */\n- -9.14919506501448661140572099029756008E-37Q, /* bf873754bacaa9d9513b6127e791eb47 */\n- -1.52587890625013337032336300236461546E-04Q, /* bff240000000001ec0cb57f2cc995000 */\n-  2.84906084373176180870418394956384516E-35Q, /* 3f8c2ef6d03a7e6ab087c4f099e4de89 */\n- -1.22070312499990746786116828458007518E-04Q, /* bff1ffffffffffd553bbb49f35a34000 */\n-  6.71618008964968339584520728412444537E-36Q, /* 3f8a1dacb99c60071fc9cd2349495bf0 */\n- -9.15527343750029275602791047595142231E-05Q, /* bff180000000000d8040cd6ecde28000 */\n- -1.95753652091078750312541716951402172E-35Q, /* bf8ba0526cfb24d8d59122f1c7a09a14 */\n- -6.10351562499913258461494008080572701E-05Q, /* bff0ffffffffffaffebbb92d7f6a9000 */\n-  5.69868489273961111703398456218119973E-36Q, /* 3f89e4ca5df09ef4a4386dd5b3bf0331 */\n- -3.05175781250092882818419203884960853E-05Q, /* bff0000000000055ab55de88fac1d000 */\n-  9.03341100018476837609128961872915953E-36Q, /* 3f8a803d229fa3a0e834a63abb06662b */\n-#define T_EXPL_ARG2 (2*T_EXPL_ARG1 + 2 + 2*65)\n-  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n-  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n-  3.05175781249814607084128277672749162E-05Q, /* 3feffffffffffeaa02abb9102f499000 */\n-  1.00271855391179733380665816525889949E-36Q, /* 3f8755351afa042ac3f58114824d4c10 */\n-  6.10351562500179243748093427073421439E-05Q, /* 3ff1000000000052a95de07a4c26d000 */\n-  1.67231624299180373502350811501181670E-36Q, /* 3f881c87a53691cae9d77f4e40d66616 */\n-  9.15527343749970728685313252158399200E-05Q, /* 3ff17ffffffffff28040cc2acde28000 */\n-  2.43665747834893104318707597514407880E-36Q, /* 3f889e9366c7c6c6a2ecb78dc9b0509e */\n-  1.22070312500027751961838150070880064E-04Q, /* 3ff200000000003ffddde6c153b53000 */\n- -1.73322146370624186623546452226755405E-35Q, /* bf8b709d8d658ed5dbbe943de56ee84e */\n-  1.52587890624995916105682628143179430E-04Q, /* 3ff23ffffffffff6954b56e285d23000 */\n-  1.23580432650945898349135528000443828E-35Q, /* 3f8b06d396601dde16de7d7bc27346e6 */\n-  1.83105468750008670314358488289621794E-04Q, /* 3ff2800000000013fe0cdc8c823b7000 */\n-  4.30446229148833293310207915930740796E-35Q, /* 3f8cc9ba9bfe554a4f7f2fece291eb23 */\n-  2.13623046875005741337455947623248132E-04Q, /* 3ff2c0000000000d3d1662de21a3f000 */\n- -3.96110759869520786681660669615255057E-35Q, /* bf8ca5379b04ff4a31aab0ceacc917e6 */\n-  2.44140624999981493573336463433440506E-04Q, /* 3ff2ffffffffffd553bbdf48e0534000 */\n- -1.39617373942387888957350179316792928E-35Q, /* bf8b28eeedc286015802b63f96b8c5cd */\n-  2.74658203124984920706309918754626834E-04Q, /* 3ff31fffffffffee9d60c8439ec1d000 */\n- -3.16168080483901830349738314447356223E-36Q, /* bf890cf74f81c77a611abc1243812444 */\n-  3.05175781250008648918265055410966055E-04Q, /* 3ff3400000000009f8b5c9a346636000 */\n-  8.54421306185008998867856704677221443E-35Q, /* 3f8dc649cd40922fc08adc6b6b20ead0 */\n-  3.35693359374988945462612499316774515E-04Q, /* 3ff35ffffffffff34146c540f15b2000 */\n-  7.96443137431639500475160850431097078E-35Q, /* 3f8da77638ed3148fc4d99d1c9e13446 */\n-  3.66210937500027690542093987739604535E-04Q, /* 3ff380000000001fecce34bea89c4000 */\n-  2.14507323877752361258862577769090367E-35Q, /* 3f8bc834e554d38894cf91957b0253d3 */\n-  3.96728515625003928083564943615052121E-04Q, /* 3ff3a00000000004875d9a4acf6ab000 */\n-  4.88358523466632050664019922448605508E-35Q, /* 3f8d03a7eaeef1a9f78c71a12c44dd28 */\n-  4.27246093750017799227172345607351585E-04Q, /* 3ff3c00000000014856794c3ee850000 */\n-  6.66520494592631402182216588784828935E-35Q, /* 3f8d6262118fcdb59b8f16108f5f1a6c */\n-  4.57763671875002108342364320152138181E-04Q, /* 3ff3e000000000026e45d855410b9000 */\n-  7.21799615960261390920033272189522298E-35Q, /* 3f8d7fc645cff8879462296af975c9fd */\n-  4.88281249999999768797631616370963356E-04Q, /* 3ff3ffffffffffffbbc2d7cc004df000 */\n- -5.30564629906905979452258114088325361E-35Q, /* bf8d1a18b71929a30d67a217a27ae851 */\n-  5.18798828124997339054881383202487041E-04Q, /* 3ff40ffffffffffe775055eea5851000 */\n- -4.03682911253647925867848180522846377E-35Q, /* bf8cad44f0f3e5199d8a589d9332acad */\n-  5.49316406249980511907933706754958501E-04Q, /* 3ff41ffffffffff4c410b29bb62fb000 */\n- -2.08166843948323917121806956728438051E-35Q, /* bf8bbab8cf691403249fe5b699e25143 */\n-  5.79833984374989593561576568548497165E-04Q, /* 3ff42ffffffffffa0047df328d817000 */\n- -1.72745033420153042445343706432627539E-34Q, /* bf8ecb3c2d7d3a9e6e960576be901fdf */\n-  6.10351562500008540711511259540838154E-04Q, /* 3ff4400000000004ec62f54f8c271000 */\n-  7.41889382604319545724663095428976499E-35Q, /* 3f8d8a74c002c81a47c93b8e05d15f8e */\n-  6.40869140625020444702875407535884986E-04Q, /* 3ff450000000000bc91b09718515d000 */\n- -4.47321009727305792048065440180490107E-35Q, /* bf8cdbac5c8fe70822081d8993eb5cb6 */\n-  6.71386718750007531635964622352684074E-04Q, /* 3ff460000000000457792973db05c000 */\n-  5.13698959677949336513874456684462092E-35Q, /* 3f8d112114436949c5ef38d8049004ab */\n-  7.01904296875006634673332887754430334E-04Q, /* 3ff4700000000003d31adf2cb8b1d000 */\n- -8.25665755717729437292989870760751482E-35Q, /* bf8db6ffcc8ef71f8e648e3a8b160f5a */\n-  7.32421874999998244664170215504673504E-04Q, /* 3ff47ffffffffffefcf5498bd5c8a000 */\n- -5.64005234937832153139057628112753364E-35Q, /* bf8d2be06a1dfe90e7bf90fba7c12a98 */\n-  7.62939453125017456345986752604096408E-04Q, /* 3ff490000000000a101a1b093d4a8000 */\n- -1.11084094120417622468550608896588329E-34Q, /* bf8e274feabd2d94f6694507a46accb1 */\n-  7.93457031249987558617598988993908016E-04Q, /* 3ff49ffffffffff8d3f9dcab74bbf000 */\n- -1.22966480225449015129079129940978828E-34Q, /* bf8e46e6a65eef8fa9e42eddf3da305e */\n-  8.23974609374997378723747633335135819E-04Q, /* 3ff4affffffffffe7d2afbaa55b26000 */\n- -1.62270010016794279091906973366704963E-34Q, /* bf8eaf633f057ebdb664a34566401c4e */\n-  8.54492187500023938282350821569920958E-04Q, /* 3ff4c0000000000dccaabce399e59000 */\n- -1.39076361712838158775374263169606160E-34Q, /* bf8e71ba779364b3bbdba7841f2c4ca1 */\n-  8.85009765624987932362186815286691297E-04Q, /* 3ff4cffffffffff90b218886edc2a000 */\n-  4.07328275060905585228261577392403980E-35Q, /* 3f8cb1254dbb6ea4b8cfa5ed4cf28d24 */\n-  9.15527343749975579461305518559161974E-04Q, /* 3ff4dffffffffff1ec2a21f25df33000 */\n-  1.16855112459192484947855553716334015E-35Q, /* 3f8af10bf319e9f5270cf249eeffbe5c */\n-  9.46044921875016761584725882821122521E-04Q, /* 3ff4f00000000009a992c46c16d71000 */\n-  9.51660680007524262741115611071680436E-35Q, /* 3f8df9fd56e81f8edf133843910ee831 */\n-  9.76562499999974118878133088548272636E-04Q, /* 3ff4fffffffffff1149edc46a6df6000 */\n- -5.65271128977550656964071208289181661E-36Q, /* bf89e0e12689dd721aa2314c81eb6429 */\n-  1.00708007812498671732140389760347830E-03Q, /* 3ff507fffffffffc2be94b90ed091000 */\n- -1.43355074891483635310132767255371379E-34Q, /* bf8e7d1a688c247b16022daab1316d55 */\n-  1.03759765625002637786192745235343007E-03Q, /* 3ff51000000000079a57b966bc158000 */\n-  2.95905815240957629366749917020106928E-34Q, /* 3f8f895387fc73bb38f8a1b254c01a60 */\n-  1.06811523437500860568717813047520763E-03Q, /* 3ff51800000000027afcd5b35f5e6000 */\n- -5.98328495358586628195372356742878314E-35Q, /* bf8d3e204130013bf6328f1b70ff8c76 */\n-  1.09863281250001439958487251556220070E-03Q, /* 3ff5200000000004268077c6c66bd000 */\n-  2.41371837889426603334113000868144760E-34Q, /* 3f8f40d6948edf864054ccf151f9815e */\n-  1.12915039062501298413451613770002366E-03Q, /* 3ff5280000000003be0f5dd8fe81b000 */\n- -1.28815268997394164973472617519705703E-34Q, /* bf8e567321172ea089dce4bc8354ecb7 */\n-  1.15966796874997272036339054191407232E-03Q, /* 3ff52ffffffffff8231e3bcfff1e8000 */\n-  1.02996064554316248496839462594377804E-34Q, /* 3f8e11cf7d402789244f68e2d4f985b1 */\n-  1.19018554687502744121802585360546796E-03Q, /* 3ff5380000000007e8cdf3f8f6c20000 */\n- -1.43453217726255628994625761307322163E-34Q, /* bf8e7d5d3370d85a374f5f4802fc517a */\n-  1.22070312499997743541996266398850614E-03Q, /* 3ff53ffffffffff97f0722561f454000 */\n- -1.41086259180534339713692694428211646E-34Q, /* bf8e77125519ff76244dfec5fbd58402 */\n-  1.25122070312501024092560690174507039E-03Q, /* 3ff5480000000002f3a59d8820691000 */\n-  3.84102646020099293168698506729765213E-34Q, /* 3f8ffe8f5b86f9c3569c8f26e19b1f50 */\n-  1.28173828124997986521442660131425390E-03Q, /* 3ff54ffffffffffa3250a764439d9000 */\n-  1.44644589735033114377952806106652650E-34Q, /* 3f8e808801b80dcf38323cdbfdca2549 */\n-  1.31225585937501665804856968749058137E-03Q, /* 3ff5580000000004cd25a414c6d62000 */\n-  1.67474574742200577294563576414361377E-34Q, /* 3f8ebd394a151dbda4f81d5d83c0f1e9 */\n-  1.34277343749997290265837386401818888E-03Q, /* 3ff55ffffffffff83091b042cfd59000 */\n- -1.55650565030381326742591837551559103E-34Q, /* bf8e9dca490d7fecfadba9625ffb91c5 */\n-  1.37329101562497720784949380297774268E-03Q, /* 3ff567fffffffff96e3c7312f5ccf000 */\n-  1.65279335325630026116581677369221748E-34Q, /* 3f8eb763496f5bd7404f2298b402074f */\n-  1.40380859374999099958354100336136647E-03Q, /* 3ff56ffffffffffd67e2f09f2a381000 */\n-  1.89919944388961890195706641264717076E-34Q, /* 3f8ef8e4d0ffdfeba982aa8829501389 */\n-  1.43432617187497484122173130998160625E-03Q, /* 3ff577fffffffff8bf9c1d71af8a8000 */\n-  2.57638517142061429772064578590009568E-34Q, /* 3f8f5675d82c1cc4ada70fd3a957b89a */\n-  1.46484374999999929342158925502052945E-03Q, /* 3ff57fffffffffffcbdd1c7671b46000 */\n-  1.76487201934184070490166772482073801E-34Q, /* 3f8ed52ef732458f6e4c5c07504f33cc */\n-  1.49536132812502318451070466256902933E-03Q, /* 3ff5880000000006aeb7066c8ad43000 */\n-  2.38068367275295804321313550609246656E-34Q, /* 3f8f3c7277ae6fc390ace5e06c0b025b */\n-  1.52587890625000448053340248672949543E-03Q, /* 3ff59000000000014a9ae2104b3bc000 */\n-  1.01174455568392813258454590274740959E-34Q, /* 3f8e0cf7c434762991bb38e12acee215 */\n-  1.55639648437501113499837053523090913E-03Q, /* 3ff5980000000003359e2c204355e000 */\n- -2.82398418808099749023517211651363693E-35Q, /* bf8c2c4c2971d88caa95e15fb1ccb1a1 */\n-  1.58691406249999937955142588308171026E-03Q, /* 3ff59fffffffffffd2380ecbc87c2000 */\n- -1.27361695572422741562701199136538047E-34Q, /* bf8e5295e0e206dfb0f0266c07225448 */\n-  1.61743164062498000531048954475329309E-03Q, /* 3ff5a7fffffffffa3ca6fe61ed94c000 */\n- -1.22606548862580061633942923016222044E-34Q, /* bf8e45f1b17bb61039d21a351bb207b8 */\n-  1.64794921875001835451453858682255576E-03Q, /* 3ff5b000000000054a52fa20f6565000 */\n-  1.39132339594152335892305491425264583E-34Q, /* 3f8e71e0904c5449b414ee49b191cef2 */\n-  1.67846679687501263995029340691547953E-03Q, /* 3ff5b80000000003a4a9e912c910b000 */\n-  6.67245854693585315412242764786197029E-35Q, /* 3f8d62c4ccac1e7511a617d469468ccd */\n-  1.70898437500002646861403514115369655E-03Q, /* 3ff5c00000000007a109fbaa7e015000 */\n-  6.87367172354719289559624829652240928E-36Q, /* 3f8a245fa835eceb42bae8128d9336db */\n-  1.73950195312501174308226096992992128E-03Q, /* 3ff5c80000000003627c8d637a005000 */\n- -2.20824271875474985927385878948759352E-34Q, /* bf8f25869b1cbefb25e735992f232f57 */\n-  1.77001953124997491747605207736194513E-03Q, /* 3ff5cffffffffff8c53c84b6883b8000 */\n-  3.43123048533596296514343180408963705E-34Q, /* 3f8fc816b91d173ddadbbf09b1287906 */\n-  1.80053710937497698911127570705069398E-03Q, /* 3ff5d7fffffffff95e1899f4a8430000 */\n-  3.99231237340890073475077494556136100E-35Q, /* 3f8ca889148f62fa854da5674df41279 */\n-  1.83105468750002267094899598630423914E-03Q, /* 3ff5e0000000000688d21e62ba674000 */\n- -3.22274595655810623999007524769365273E-34Q, /* bf8fac605cb9ae01eb719675ced25560 */\n-  1.86157226562500499224728040579690330E-03Q, /* 3ff5e80000000001705ce28a6d89e000 */\n-  3.07094985075881613489605622068441083E-34Q, /* 3f8f98330225ec7e2c8f3c0d1c432b91 */\n-  1.89208984374998234666824993196980949E-03Q, /* 3ff5effffffffffae969fdc7cd8cf000 */\n- -3.06287628722973914692165056776495733E-34Q, /* bf8f9720477d9cfa10e464df7f91020c */\n-  1.92260742187501225343755557292811682E-03Q, /* 3ff5f800000000038824e428ed49a000 */\n-  6.30049124729794620592961282769623368E-35Q, /* 3f8d4efdd7cd4336d88a6aa49e1e96bc */\n-  1.95312499999998514894032051116231258E-03Q, /* 3ff5fffffffffffbb82f6a04f1ae0000 */\n- -6.14610057507500948543216998736262902E-35Q, /* bf8d46c862d39255370e7974d48daa7e */\n-  1.98364257812501222021119324146882732E-03Q, /* 3ff6040000000001c2d8a1aa5188d000 */\n-  3.71942298418113774118754986159801984E-34Q, /* 3f8fee6567d9940495519ffe62cbc9a4 */\n-\n-  7.06341639425619532977052017486130353E-01Q, /* 3ffe69a59c8245a9ac00000000000000 */\n-  7.09106182437398424589503065362805501E-01Q, /* 3ffe6b0ff72deb89d000000000000000 */\n-  7.11881545564596485142772053222870454E-01Q, /* 3ffe6c7bbce9a6d93000000000000000 */\n-  7.14667771155948150507697391731198877E-01Q, /* 3ffe6de8ef213d71e000000000000000 */\n-  7.17464901725936049503573599395167548E-01Q, /* 3ffe6f578f41e1a9e400000000000000 */\n-  7.20272979955439790478166628417966422E-01Q, /* 3ffe70c79eba33c06c00000000000000 */\n-  7.23092048692387218133958981525211129E-01Q, /* 3ffe72391efa434c7400000000000000 */\n-  7.25922150952408251622927082280511968E-01Q, /* 3ffe73ac117390acd800000000000000 */\n-  7.28763329919491220643124052003258839E-01Q, /* 3ffe752077990e79d000000000000000 */\n-  7.31615628946641782803794740175362676E-01Q, /* 3ffe769652df22f7e000000000000000 */\n-  7.34479091556544505525749855223693885E-01Q, /* 3ffe780da4bba98c4800000000000000 */\n-  7.37353761442226890432394270646909717E-01Q, /* 3ffe79866ea5f432d400000000000000 */\n-  7.40239682467726090031590047146892175E-01Q, /* 3ffe7b00b216ccf53000000000000000 */\n-  7.43136898668758316688354170764796436E-01Q, /* 3ffe7c7c70887763c000000000000000 */\n-  7.46045454253390638577059235103661194E-01Q, /* 3ffe7df9ab76b20fd000000000000000 */\n-  7.48965393602715662213498148958024103E-01Q, /* 3ffe7f78645eb8076400000000000000 */\n-  7.51896761271528629722027403659012634E-01Q, /* 3ffe80f89cbf42526400000000000000 */\n-  7.54839601989007347171423134568613023E-01Q, /* 3ffe827a561889716000000000000000 */\n-  7.57793960659394638668118204805068672E-01Q, /* 3ffe83fd91ec46ddc000000000000000 */\n-  7.60759882362683631518152083117456641E-01Q, /* 3ffe858251bdb68b8c00000000000000 */\n-  7.63737412355305483879774897104653064E-01Q, /* 3ffe87089711986c9400000000000000 */\n-  7.66726596070820082262642358728044201E-01Q, /* 3ffe8890636e31f54400000000000000 */\n-  7.69727479120609181517664865168626420E-01Q, /* 3ffe8a19b85b4fa2d800000000000000 */\n-  7.72740107294572486917871856348938309E-01Q, /* 3ffe8ba4976246833800000000000000 */\n-  7.75764526561826289752232810315035749E-01Q, /* 3ffe8d31020df5be4400000000000000 */\n-  7.78800783071404878477039801509818062E-01Q, /* 3ffe8ebef9eac820b000000000000000 */\n-  7.81848923152964780936002853195532225E-01Q, /* 3ffe904e8086b5a87800000000000000 */\n-  7.84908993317491698871180005880887620E-01Q, /* 3ffe91df97714512d800000000000000 */\n-  7.87981040258010162480317717381694820E-01Q, /* 3ffe9372403b8d6bcc00000000000000 */\n-  7.91065110850296016042904057030682452E-01Q, /* 3ffe95067c78379f2800000000000000 */\n-  7.94161252153591734614934694036492147E-01Q, /* 3ffe969c4dbb800b4800000000000000 */\n-  7.97269511411324433014513601847284008E-01Q, /* 3ffe9833b59b38154400000000000000 */\n-  8.00389936051826789142893403550260700E-01Q, /* 3ffe99ccb5aec7bec800000000000000 */\n-  8.03522573689060742863077280162542593E-01Q, /* 3ffe9b674f8f2f3d7c00000000000000 */\n-  8.06667472123343942680406826184480451E-01Q, /* 3ffe9d0384d70893f800000000000000 */\n-  8.09824679342079301047618855591281317E-01Q, /* 3ffe9ea15722892c7800000000000000 */\n-  8.12994243520486992160556383169023320E-01Q, /* 3ffea040c80f8374f000000000000000 */\n-  8.16176213022339780422953481320291758E-01Q, /* 3ffea1e1d93d687d0000000000000000 */\n-  8.19370636400700819157449927843117621E-01Q, /* 3ffea3848c4d49954c00000000000000 */\n-  8.22577562398664585696650419777142815E-01Q, /* 3ffea528e2e1d9f09800000000000000 */\n-  8.25797039950100647542896581398963463E-01Q, /* 3ffea6cede9f70467c00000000000000 */\n-  8.29029118180400342863478613253391813E-01Q, /* 3ffea876812c0877bc00000000000000 */\n-  8.32273846407226292054559735333896242E-01Q, /* 3ffeaa1fcc2f45343800000000000000 */\n-  8.35531274141265073440720811959181447E-01Q, /* 3ffeabcac15271a2a400000000000000 */\n-  8.38801451086982535754188461396552157E-01Q, /* 3ffead7762408309bc00000000000000 */\n-  8.42084427143382358016410194068157580E-01Q, /* 3ffeaf25b0a61a7b4c00000000000000 */\n-  8.45380252404767357221615498019673396E-01Q, /* 3ffeb0d5ae318680c400000000000000 */\n-  8.48688977161503960155997106085123960E-01Q, /* 3ffeb2875c92c4c99400000000000000 */\n-  8.52010651900789478530029441571969073E-01Q, /* 3ffeb43abd7b83db1c00000000000000 */\n-  8.55345327307422548246407245642330963E-01Q, /* 3ffeb5efd29f24c26400000000000000 */\n-  8.58693054264576483003423845730139874E-01Q, /* 3ffeb7a69db2bcc77800000000000000 */\n-  8.62053883854575708767242758767679334E-01Q, /* 3ffeb95f206d17228000000000000000 */\n-  8.65427867359675251357487013592617586E-01Q, /* 3ffebb195c86b6b29000000000000000 */\n-  8.68815056262843166123843730019871145E-01Q, /* 3ffebcd553b9d7b62000000000000000 */\n-  8.72215502248546159513864495238522068E-01Q, /* 3ffebe9307c271855000000000000000 */\n-  8.75629257203538208242932228131394368E-01Q, /* 3ffec0527a5e384ddc00000000000000 */\n-  8.79056373217652342599848225290770642E-01Q, /* 3ffec213ad4c9ed0d800000000000000 */\n-  8.82496902584595399599010079327854328E-01Q, /* 3ffec3d6a24ed8221800000000000000 */\n-  8.85950897802745995779361010136199184E-01Q, /* 3ffec59b5b27d9696800000000000000 */\n-  8.89418411575955636383383762222365476E-01Q, /* 3ffec761d99c5ba58800000000000000 */\n-  8.92899496814352794382685374330321793E-01Q, /* 3ffec92a1f72dd70d400000000000000 */\n-  8.96394206635150403439382671422208659E-01Q, /* 3ffecaf42e73a4c7d800000000000000 */\n-  8.99902594363456265202927397695020773E-01Q, /* 3ffeccc00868c0d18800000000000000 */\n-  9.03424713533086704009278378180169966E-01Q, /* 3ffece8daf1e0ba94c00000000000000 */\n-  9.06960617887383580004723171441582963E-01Q, /* 3ffed05d24612c2af000000000000000 */\n-  9.10510361380034133338412516422977205E-01Q, /* 3ffed22e6a0197c02c00000000000000 */\n-  9.14073998175894436579724811053893063E-01Q, /* 3ffed40181d094303400000000000000 */\n-  9.17651582651815816982221463149471674E-01Q, /* 3ffed5d66da13970f400000000000000 */\n-  9.21243169397474526149949269893113524E-01Q, /* 3ffed7ad2f48737a2000000000000000 */\n-  9.24848813216204823639543519675498828E-01Q, /* 3ffed985c89d041a3000000000000000 */\n-  9.28468569125835141431224428743007593E-01Q, /* 3ffedb603b7784cd1800000000000000 */\n-  9.32102492359527579068867453315760940E-01Q, /* 3ffedd3c89b26894e000000000000000 */\n-  9.35750638366620729469147477175283711E-01Q, /* 3ffedf1ab529fdd41c00000000000000 */\n-  9.39413062813475779888605643463961314E-01Q, /* 3ffee0fabfbc702a3c00000000000000 */\n-  9.43089821584325888048638830696290825E-01Q, /* 3ffee2dcab49ca51b400000000000000 */\n-  9.46780970782128888929563004239753354E-01Q, /* 3ffee4c079b3f8000400000000000000 */\n-  9.50486566729423443256052905780961737E-01Q, /* 3ffee6a62cdec7c7b000000000000000 */\n-  9.54206665969188322362626308859034907E-01Q, /* 3ffee88dc6afecfbfc00000000000000 */\n-  9.57941325265705301283958306157728657E-01Q, /* 3ffeea77490f0196b000000000000000 */\n-  9.61690601605425299247542625380447134E-01Q, /* 3ffeec62b5e5881fb000000000000000 */\n-  9.65454552197837823079851204965962097E-01Q, /* 3ffeee500f1eed967000000000000000 */\n-  9.69233234476344074348475032820715569E-01Q, /* 3ffef03f56a88b5d7800000000000000 */\n-  9.73026706099133165128733935489435680E-01Q, /* 3ffef2308e71a927a800000000000000 */\n-  9.76835024950062025261843245971249416E-01Q, /* 3ffef423b86b7ee79000000000000000 */\n-  9.80658249139538557015427500118676107E-01Q, /* 3ffef618d68936c09c00000000000000 */\n-  9.84496437005408397968864164795377292E-01Q, /* 3ffef80feabfeefa4800000000000000 */\n-  9.88349647113845042323276857132441364E-01Q, /* 3ffefa08f706bbf53800000000000000 */\n-  9.92217938260243514925207364285597578E-01Q, /* 3ffefc03fd56aa225000000000000000 */\n-  9.96101369470117486981664001177705359E-01Q, /* 3ffefe00ffaabffbbc00000000000000 */\n-#define T_EXPL_RES1 (T_EXPL_ARG2 + 2 + 2*65 + 89)\n-  1.00000000000000000000000000000000000E+00Q, /* 3fff0000000000000000000000000000 */\n-  1.00391388933834757590801700644078664E+00Q, /* 3fff0100802ab5577800000000000000 */\n-  1.00784309720644799091004983893071767E+00Q, /* 3fff0202015600445c00000000000000 */\n-  1.01178768355933151879000320150225889E+00Q, /* 3fff0304848362076c00000000000000 */\n-  1.01574770858668572692806719715008512E+00Q, /* 3fff04080ab55de39000000000000000 */\n-  1.01972323271377413034244341361045372E+00Q, /* 3fff050c94ef7a206c00000000000000 */\n-  1.02371431660235789884438872832106426E+00Q, /* 3fff06122436410dd000000000000000 */\n-  1.02772102115162167201845022646011785E+00Q, /* 3fff0718b98f42085000000000000000 */\n-  1.03174340749910264936062276319717057E+00Q, /* 3fff08205601127ec800000000000000 */\n-  1.03578153702162378824169763902318664E+00Q, /* 3fff0928fa934ef90800000000000000 */\n-  1.03983547133622999947277776300325058E+00Q, /* 3fff0a32a84e9c1f5800000000000000 */\n-  1.04390527230112850620713516036630608E+00Q, /* 3fff0b3d603ca7c32800000000000000 */\n-  1.04799100201663270004459604933799710E+00Q, /* 3fff0c49236829e8bc00000000000000 */\n-  1.05209272282610977189420964350574650E+00Q, /* 3fff0d55f2dce5d1e800000000000000 */\n-  1.05621049731693195106174698594259098E+00Q, /* 3fff0e63cfa7ab09d000000000000000 */\n-  1.06034438832143151909548350886325352E+00Q, /* 3fff0f72bad65671b800000000000000 */\n-  1.06449445891785943185681162503897212E+00Q, /* 3fff1082b577d34ed800000000000000 */\n-  1.06866077243134810492719566354935523E+00Q, /* 3fff1193c09c1c595c00000000000000 */\n-  1.07284339243487741866189821848820429E+00Q, /* 3fff12a5dd543ccc4c00000000000000 */\n-  1.07704238275024494209120007326419000E+00Q, /* 3fff13b90cb25176a400000000000000 */\n-  1.08125780744903959851299646288680378E+00Q, /* 3fff14cd4fc989cd6400000000000000 */\n-  1.08548973085361949442173568058933597E+00Q, /* 3fff15e2a7ae28fecc00000000000000 */\n-  1.08973821753809324563988525369495619E+00Q, /* 3fff16f9157587069400000000000000 */\n-  1.09400333232930546678574046381982043E+00Q, /* 3fff18109a3611c35000000000000000 */\n-  1.09828514030782586896606289883493446E+00Q, /* 3fff192937074e0cd800000000000000 */\n-  1.10258370680894224324930519287590869E+00Q, /* 3fff1a42ed01d8cbc800000000000000 */\n-  1.10689909742365749645287564817408565E+00Q, /* 3fff1b5dbd3f68122400000000000000 */\n-  1.11123137799969046168868658241990488E+00Q, /* 3fff1c79a8dacc350c00000000000000 */\n-  1.11558061464248076122274255794764031E+00Q, /* 3fff1d96b0eff0e79400000000000000 */\n-  1.11994687371619722204840741142106708E+00Q, /* 3fff1eb4d69bde569c00000000000000 */\n-  1.12433022184475073235176978414529003E+00Q, /* 3fff1fd41afcba45e800000000000000 */\n-  1.12873072591281087273529237791080959E+00Q, /* 3fff20f47f31c92e4800000000000000 */\n-  1.13314845306682632219974493636982515E+00Q, /* 3fff2216045b6f5cd000000000000000 */\n-  1.13758347071604959399593326452304609E+00Q, /* 3fff2338ab9b32134800000000000000 */\n-  1.14203584653356560174586320499656722E+00Q, /* 3fff245c7613b8a9b000000000000000 */\n-  1.14650564845732405583333957110880874E+00Q, /* 3fff258164e8cdb0d800000000000000 */\n-  1.15099294469117646722011727433709893E+00Q, /* 3fff26a7793f60164400000000000000 */\n-  1.15549780370591653744227755851170514E+00Q, /* 3fff27ceb43d84490400000000000000 */\n-  1.16002029424032515603215642840950750E+00Q, /* 3fff28f7170a755fd800000000000000 */\n-  1.16456048530221917269855680387991015E+00Q, /* 3fff2a20a2ce96406400000000000000 */\n-  1.16911844616950438835445424956560601E+00Q, /* 3fff2b4b58b372c79400000000000000 */\n-  1.17369424639123270948104504896036815E+00Q, /* 3fff2c7739e3c0f32c00000000000000 */\n-  1.17828795578866324378353169777255971E+00Q, /* 3fff2da4478b620c7400000000000000 */\n-  1.18289964445632783673900689791480545E+00Q, /* 3fff2ed282d763d42400000000000000 */\n-  1.18752938276310060494722620205720887E+00Q, /* 3fff3001ecf601af7000000000000000 */\n-  1.19217724135327157730657177125976887E+00Q, /* 3fff31328716a5d63c00000000000000 */\n-  1.19684329114762477708211463323095813E+00Q, /* 3fff32645269ea829000000000000000 */\n-  1.20152760334452030077656559114984702E+00Q, /* 3fff339750219b212c00000000000000 */\n-  1.20623024942098072687102217059873510E+00Q, /* 3fff34cb8170b5835400000000000000 */\n-  1.21095130113378179892436037334846333E+00Q, /* 3fff3600e78b6b11d000000000000000 */\n-  1.21569083052054743854242246925423387E+00Q, /* 3fff373783a722012400000000000000 */\n-  1.22044890990084875515009343871497549E+00Q, /* 3fff386f56fa7686e800000000000000 */\n-  1.22522561187730755216662714701669756E+00Q, /* 3fff39a862bd3c106400000000000000 */\n-  1.23002100933670455162882717559114099E+00Q, /* 3fff3ae2a8287e7a8000000000000000 */\n-  1.23483517545109100499445276000187732E+00Q, /* 3fff3c1e2876834aa800000000000000 */\n-  1.23966818367890557750499169742397498E+00Q, /* 3fff3d5ae4e2cae92c00000000000000 */\n-  1.24452010776609517384017067342938390E+00Q, /* 3fff3e98deaa11dcbc00000000000000 */\n-  1.24939102174724003813111039562500082E+00Q, /* 3fff3fd8170a52071800000000000000 */\n-  1.25428099994668373895478907797951251E+00Q, /* 3fff41188f42c3e32000000000000000 */\n-  1.25919011697966698459794088194030337E+00Q, /* 3fff425a4893dfc3f800000000000000 */\n-  1.26411844775346637881341393949696794E+00Q, /* 3fff439d443f5f159000000000000000 */\n-  1.26906606746853711786826579555054195E+00Q, /* 3fff44e183883d9e4800000000000000 */\n-  1.27403305161966090564007458851847332E+00Q, /* 3fff462707b2bac20c00000000000000 */\n-  1.27901947599709753244923149395617656E+00Q, /* 3fff476dd2045ac67800000000000000 */\n-  1.28402541668774150540599521264084615E+00Q, /* 3fff48b5e3c3e8186800000000000000 */\n-  1.28905095007628295311619126550795045E+00Q, /* 3fff49ff3e397492bc00000000000000 */\n-  1.29409615284637330434591717676084954E+00Q, /* 3fff4b49e2ae5ac67400000000000000 */\n-  1.29916110198179535206719492634874769E+00Q, /* 3fff4c95d26d3f440800000000000000 */\n-  1.30424587476763775839572190307080746E+00Q, /* 3fff4de30ec211e60000000000000000 */\n-  1.30935054879147461104338390214252286E+00Q, /* 3fff4f3198fa0f1cf800000000000000 */\n-  1.31447520194454914310711046709911898E+00Q, /* 3fff50817263c13cd000000000000000 */\n-  1.31961991242296217130558488861424848E+00Q, /* 3fff51d29c4f01cb3000000000000000 */\n-  1.32478475872886558573071624778094701E+00Q, /* 3fff5325180cfacf7800000000000000 */\n-  1.32996981967165983640200010995613411E+00Q, /* 3fff5478e6f02823d000000000000000 */\n-  1.33517517436919680440254865061433520E+00Q, /* 3fff55ce0a4c58c7bc00000000000000 */\n-  1.34040090224898678084031189428060316E+00Q, /* 3fff57248376b033d800000000000000 */\n-  1.34564708304941055283521222918352578E+00Q, /* 3fff587c53c5a7af0400000000000000 */\n-  1.35091379682093615244298234756570309E+00Q, /* 3fff59d57c910fa4e000000000000000 */\n-  1.35620112392734021300455538039386738E+00Q, /* 3fff5b2fff3210fd9400000000000000 */\n-  1.36150914504693443252136830778908916E+00Q, /* 3fff5c8bdd032e770800000000000000 */\n-  1.36683794117379636690046140756749082E+00Q, /* 3fff5de9176045ff5400000000000000 */\n-  1.37218759361900544124779344201670028E+00Q, /* 3fff5f47afa69210a800000000000000 */\n-  1.37755818401188367960941150158760138E+00Q, /* 3fff60a7a734ab0e8800000000000000 */\n-  1.38294979430124120867162673675920814E+00Q, /* 3fff6208ff6a88a46000000000000000 */\n-  1.38836250675662681297595213436579797E+00Q, /* 3fff636bb9a983258400000000000000 */\n-  1.39379640396958309755959248832368758E+00Q, /* 3fff64cfd75454ee7c00000000000000 */\n-  1.39925156885490681313299887733592186E+00Q, /* 3fff663559cf1bc7c400000000000000 */\n-  1.40472808465191417726103395580139477E+00Q, /* 3fff679c427f5a49f400000000000000 */\n-  1.41022603492571069194738697660795879E+00Q, /* 3fff690492cbf9432c00000000000000 */\n-  1.41574550356846662335641440222389065E+00Q, /* 3fff6a6e4c1d491e1800000000000000 */\n-\n-  9.98018323540573404351050612604012713E-01Q, /* 3ffefefc41f8d4bdb000000000000000 */\n-  9.98048781107475468932221929208026268E-01Q, /* 3ffeff003ff556aa8800000000000000 */\n-  9.98079239603882895082165305211674422E-01Q, /* 3ffeff043df9d4986000000000000000 */\n-  9.98109699029824021243584297735651489E-01Q, /* 3ffeff083c064e972c00000000000000 */\n-  9.98140159385327269125909310787392315E-01Q, /* 3ffeff0c3a1ac4b6ec00000000000000 */\n-  9.98170620670420977171843901487591211E-01Q, /* 3ffeff10383737079400000000000000 */\n-  9.98201082885133511579667242585856002E-01Q, /* 3ffeff14365ba5991c00000000000000 */\n-  9.98231546029493238547658506831794512E-01Q, /* 3ffeff183488107b7c00000000000000 */\n-  9.98262010103528552029672482603928074E-01Q, /* 3ffeff1c32bc77beb000000000000000 */\n-  9.98292475107267818223988342651864514E-01Q, /* 3ffeff2030f8db72b000000000000000 */\n-  9.98322941040739375573309644096298143E-01Q, /* 3ffeff242f3d3ba77000000000000000 */\n-  9.98353407903971645787066790944663808E-01Q, /* 3ffeff282d89986cf000000000000000 */\n-  9.98383875696992967307963340317655820E-01Q, /* 3ffeff2c2bddf1d32400000000000000 */\n-  9.98414344419831761845429696222709026E-01Q, /* 3ffeff302a3a47ea0c00000000000000 */\n-  9.98444814072516340086593800151604228E-01Q, /* 3ffeff34289e9ac19800000000000000 */\n-  9.98475284655075123740886056111776270E-01Q, /* 3ffeff38270aea69c800000000000000 */\n-  9.98505756167536479006585636852832977E-01Q, /* 3ffeff3c257f36f29400000000000000 */\n-  9.98536228609928799837547330753295682E-01Q, /* 3ffeff4023fb806bf800000000000000 */\n-  9.98566701982280452432050310562772211E-01Q, /* 3ffeff44227fc6e5ec00000000000000 */\n-  9.98597176284619802988373749030870385E-01Q, /* 3ffeff48210c0a706800000000000000 */\n-  9.98627651516975245460372434536111541E-01Q, /* 3ffeff4c1fa04b1b6800000000000000 */\n-  9.98658127679375173801901155457017012E-01Q, /* 3ffeff501e3c88f6e800000000000000 */\n-  9.98688604771847954211239084543194622E-01Q, /* 3ffeff541ce0c412e000000000000000 */\n-  9.98719082794421980642241010173165705E-01Q, /* 3ffeff581b8cfc7f4c00000000000000 */\n-  9.98749561747125619293186105096538085E-01Q, /* 3ffeff5c1a41324c2400000000000000 */\n-  9.98780041629987291873504773320746608E-01Q, /* 3ffeff6018fd65896800000000000000 */\n-  9.98810522443035364581476187595399097E-01Q, /* 3ffeff6417c196471000000000000000 */\n-  9.98841004186298203615379520670103375E-01Q, /* 3ffeff68168dc4951400000000000000 */\n-  9.98871486859804230684645176552294288E-01Q, /* 3ffeff6c1561f0837400000000000000 */\n-  9.98901970463581839743127943620493170E-01Q, /* 3ffeff70143e1a222c00000000000000 */\n-  9.98932454997659369233531378995394334E-01Q, /* 3ffeff74132241813000000000000000 */\n-  9.98962940462065268620861502313346136E-01Q, /* 3ffeff78120e66b08400000000000000 */\n-  9.98993426856827904103397486323956400E-01Q, /* 3ffeff7c110289c02000000000000000 */\n-  9.99023914181975669634994119405746460E-01Q, /* 3ffeff800ffeaac00000000000000000 */\n-  9.99054402437536959169506189937237650E-01Q, /* 3ffeff840f02c9c02000000000000000 */\n-  9.99084891623540138905212870668037795E-01Q, /* 3ffeff880e0ee6d07800000000000000 */\n-  9.99115381740013658307120181234495249E-01Q, /* 3ffeff8c0d2302010c00000000000000 */\n-  9.99145872786985911329082910015131347E-01Q, /* 3ffeff900c3f1b61d800000000000000 */\n-  9.99176364764485236413804614130640402E-01Q, /* 3ffeff940b633302d000000000000000 */\n-  9.99206857672540083026291313217370771E-01Q, /* 3ffeff980a8f48f3f800000000000000 */\n-  9.99237351511178817364822180024930276E-01Q, /* 3ffeff9c09c35d454800000000000000 */\n-  9.99267846280429861138827618560753763E-01Q, /* 3ffeffa008ff7006c000000000000000 */\n-  9.99298341980321608302162417203362565E-01Q, /* 3ffeffa4084381485c00000000000000 */\n-  9.99328838610882452808681364331278019E-01Q, /* 3ffeffa8078f911a1800000000000000 */\n-  9.99359336172140816367814863951934967E-01Q, /* 3ffeffac06e39f8bf400000000000000 */\n-  9.99389834664125092933417704443854745E-01Q, /* 3ffeffb0063facadec00000000000000 */\n-  9.99420334086863676459344674185558688E-01Q, /* 3ffeffb405a3b88ffc00000000000000 */\n-  9.99450834440384988655026177184481639E-01Q, /* 3ffeffb8050fc3422400000000000000 */\n-  9.99481335724717395718741386190231424E-01Q, /* 3ffeffbc0483ccd45c00000000000000 */\n-  9.99511837939889374871071936468069907E-01Q, /* 3ffeffc003ffd556ac00000000000000 */\n-  9.99542341085929264554721385138691403E-01Q, /* 3ffeffc40383dcd90800000000000000 */\n-  9.99572845162865514234695751838444266E-01Q, /* 3ffeffc8030fe36b7400000000000000 */\n-  9.99603350170726517864849824945849832E-01Q, /* 3ffeffcc02a3e91dec00000000000000 */\n-  9.99633856109540669399038392839429434E-01Q, /* 3ffeffd0023fee006c00000000000000 */\n-  9.99664362979336418302267475155531429E-01Q, /* 3ffeffd401e3f222f800000000000000 */\n-  9.99694870780142130772816244643763639E-01Q, /* 3ffeffd8018ff5958800000000000000 */\n-  9.99725379511986284031266336569387931E-01Q, /* 3ffeffdc0143f8682400000000000000 */\n-  9.99755889174897216520321308053098619E-01Q, /* 3ffeffe000fffaaac000000000000000 */\n-  9.99786399768903377704987178731244057E-01Q, /* 3ffeffe400c3fc6d6000000000000000 */\n-  9.99816911294033217050269968240172602E-01Q, /* 3ffeffe8008ffdc00800000000000000 */\n-  9.99847423750315072998873233700578567E-01Q, /* 3ffeffec0063feb2ac00000000000000 */\n-  9.99877937137777450526954226006637327E-01Q, /* 3ffefff0003fff555800000000000000 */\n-  9.99908451456448688077216502279043198E-01Q, /* 3ffefff40023ffb80000000000000000 */\n-  9.99938966706357262870241697783058044E-01Q, /* 3ffefff8000fffeaac00000000000000 */\n-  9.99969482887531541104308985268289689E-01Q, /* 3ffefffc0003fffd5400000000000000 */\n-#define T_EXPL_RES2 (T_EXPL_RES1 + 1 + 89 + 65)\n-  1.00000000000000000000000000000000000E+00Q, /* 3fff0000000000000000000000000000 */\n-  1.00003051804379100575559391472779680E+00Q, /* 3fff0002000200015400000000000000 */\n-  1.00006103701893306334724798034585547E+00Q, /* 3fff00040008000aac00000000000000 */\n-  1.00009155692545448346209013834595680E+00Q, /* 3fff0006001200240000000000000000 */\n-  1.00012207776338379883185325525118969E+00Q, /* 3fff0008002000555800000000000000 */\n-  1.00015259953274932014366527255333494E+00Q, /* 3fff000a003200a6ac00000000000000 */\n-  1.00018312223357958012925905677548144E+00Q, /* 3fff000c004801200400000000000000 */\n-  1.00021364586590294498691378066723701E+00Q, /* 3fff000e006201c95c00000000000000 */\n-  1.00024417042974783642605984823603649E+00Q, /* 3fff0010008002aab400000000000000 */\n-  1.00027469592514273166727889474714175E+00Q, /* 3fff001200a203cc1000000000000000 */\n-  1.00030522235211605242000132420798764E+00Q, /* 3fff001400c805357000000000000000 */\n-  1.00033574971069616488250630936818197E+00Q, /* 3fff001600f206eed000000000000000 */\n-  1.00036627800091160178652671675081365E+00Q, /* 3fff0018012009003800000000000000 */\n-  1.00039680722279067381919048784766346E+00Q, /* 3fff001a01520b71a000000000000000 */\n-  1.00042733737636191371223048918182030E+00Q, /* 3fff001c01880e4b1000000000000000 */\n-  1.00045786846165368766392589350289200E+00Q, /* 3fff001e01c211948400000000000000 */\n-  1.00048840047869447289485833607614040E+00Q, /* 3fff0020020015560000000000000000 */\n-  1.00051893342751269111445822090900037E+00Q, /* 3fff0022024219978400000000000000 */\n-  1.00054946730813676403215595200890675E+00Q, /* 3fff002402881e611000000000000000 */\n-  1.00058000212059516886853316464112140E+00Q, /* 3fff002602d223baa800000000000000 */\n-  1.00061053786491632733302026281307917E+00Q, /* 3fff0028032029ac4c00000000000000 */\n-  1.00064107454112866113504765053221490E+00Q, /* 3fff002a0372303dfc00000000000000 */\n-  1.00067161214926059198404573180596344E+00Q, /* 3fff002c03c83777b800000000000000 */\n-  1.00070215068934059710059614189958666E+00Q, /* 3fff002e04223f618400000000000000 */\n-  1.00073269016139709819412928482051939E+00Q, /* 3fff0030048048036000000000000000 */\n-  1.00076323056545857248522679583402351E+00Q, /* 3fff003204e251655000000000000000 */\n-  1.00079377190155338617216784768970683E+00Q, /* 3fff003405485b8f5000000000000000 */\n-  1.00082431416971007198668530691065826E+00Q, /* 3fff003605b266896800000000000000 */\n-  1.00085485736995705163820957750431262E+00Q, /* 3fff00380620725b9800000000000000 */\n-  1.00088540150232269132501983222027775E+00Q, /* 3fff003a06927f0ddc00000000000000 */\n-  1.00091594656683552377884893758164253E+00Q, /* 3fff003c07088ca83c00000000000000 */\n-  1.00094649256352402622027852885366883E+00Q, /* 3fff003e07829b32bc00000000000000 */\n-  1.00097703949241650933643654752813745E+00Q, /* 3fff00400800aab55400000000000000 */\n-  1.00100758735354156137020709138596430E+00Q, /* 3fff00420882bb381000000000000000 */\n-  1.00103813614692760403102056443458423E+00Q, /* 3fff00440908ccc2f000000000000000 */\n-  1.00106868587260300351715613942360505E+00Q, /* 3fff00460992df5df000000000000000 */\n-  1.00109923653059629256034668287611566E+00Q, /* 3fff00480a20f3111800000000000000 */\n-  1.00112978812093589287002259879955091E+00Q, /* 3fff004a0ab307e46800000000000000 */\n-  1.00116034064365022615561429120134562E+00Q, /* 3fff004c0b491ddfe000000000000000 */\n-  1.00119089409876788066000585786241572E+00Q, /* 3fff004e0be3350b8c00000000000000 */\n-  1.00122144848631711155917400901671499E+00Q, /* 3fff00500c814d6f6000000000000000 */\n-  1.00125200380632656260715407370298635E+00Q, /* 3fff00520d2367136c00000000000000 */\n-  1.00128256005882454449107399341301061E+00Q, /* 3fff00540dc981ffa800000000000000 */\n-  1.00131311724383964545381786592770368E+00Q, /* 3fff00560e739e3c2000000000000000 */\n-  1.00134367536140017618251363273884635E+00Q, /* 3fff00580f21bbd0cc00000000000000 */\n-  1.00137423441153472492004539162735455E+00Q, /* 3fff005a0fd3dac5b800000000000000 */\n-  1.00140479439427171337584354660066310E+00Q, /* 3fff005c1089fb22e400000000000000 */\n-  1.00143535530963956325933850166620687E+00Q, /* 3fff005e11441cf05000000000000000 */\n-  1.00146591715766680730226312334707472E+00Q, /* 3fff0060120240360400000000000000 */\n-  1.00149647993838186721404781565070152E+00Q, /* 3fff006212c464fc0000000000000000 */\n-  1.00152704365181316470412298258452211E+00Q, /* 3fff0064138a8b4a4400000000000000 */\n-  1.00155760829798923250422149067162536E+00Q, /* 3fff00661454b328d800000000000000 */\n-  1.00158817387693849232377374391944613E+00Q, /* 3fff00681522dc9fbc00000000000000 */\n-  1.00161874038868942138336137759324629E+00Q, /* 3fff006a15f507b6f400000000000000 */\n-  1.00164930783327055241471725821611471E+00Q, /* 3fff006c16cb34768800000000000000 */\n-  1.00167987621071025161612055853765924E+00Q, /* 3fff006e17a562e67400000000000000 */\n-  1.00171044552103705171930414508096874E+00Q, /* 3fff00701883930ec000000000000000 */\n-  1.00174101576427937443369842185347807E+00Q, /* 3fff00721965c4f76c00000000000000 */\n-  1.00177158694046569697988502412044909E+00Q, /* 3fff00741a4bf8a87c00000000000000 */\n-  1.00180215904962455208959681840497069E+00Q, /* 3fff00761b362e29f800000000000000 */\n-  1.00183273209178441698341543997230474E+00Q, /* 3fff00781c246583e400000000000000 */\n-  1.00186330606697365785962006157205906E+00Q, /* 3fff007a1d169ebe3c00000000000000 */\n-  1.00189388097522080744994354972732253E+00Q, /* 3fff007c1e0cd9e10800000000000000 */\n-  1.00192445681655439848611877096118405E+00Q, /* 3fff007e1f0716f45000000000000000 */\n-  1.00195503359100279716642489802325144E+00Q, /* 3fff0080200556001000000000000000 */\n-  1.00198561129859459173374602869444061E+00Q, /* 3fff00822107970c5400000000000000 */\n-};\n-\n-\n-\n-\f\n-\n-\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n /* The basic design here is from\n    Abraham Ziv, \"Fast Evaluation of Elementary Mathematical Functions with\n@@ -1019,18 +50,24 @@ static const __float128 __expq_table [] = {\n    - p(x) is a polynomial approximating e(x)-1\n    - e^(arg1[t1]_0 + arg1[t1]_1) is obtained from a table\n    - e^(arg2[t2]_0 + arg2[t2]_1) likewise\n-   - n_1 + n_0 = n, so that |n_0| < -LDBL_MIN_EXP-1.\n+   - n_1 + n_0 = n, so that |n_0| < -FLT128_MIN_EXP-1.\n \n    If it happens that n_1 == 0 (this is the usual case), that multiplication\n    is omitted.\n    */\n \n+#ifndef _GNU_SOURCE\n+#define _GNU_SOURCE\n+#endif\n+\n+#include \"quadmath-imp.h\"\n+#include \"expq_table.h\"\n \n static const __float128 C[] = {\n /* Smallest integer x for which e^x overflows.  */\n #define himark C[0]\n  11356.523406294143949491931077970765Q,\n- \n+\n /* Largest integer x for which e^x underflows.  */\n #define lomark C[1]\n -11433.4627433362978788372438434526231Q,\n@@ -1069,11 +106,11 @@ static const __float128 C[] = {\n \n /* 256 */\n #define TWO8 C[10]\n- 256.0Q,\n+ 256,\n \n /* 32768 */\n #define TWO15 C[11]\n- 32768.0Q,\n+ 32768,\n \n /* Chebyshev polynom coefficients for (exp(x)-1)/x */\n #define P1 C[12]\n@@ -1090,7 +127,6 @@ static const __float128 C[] = {\n  1.98412698413981650382436541785404286E-04Q,\n };\n \n-\n __float128\n expq (__float128 x)\n {\n@@ -1100,13 +136,11 @@ expq (__float128 x)\n       int tval1, tval2, unsafe, n_i;\n       __float128 x22, n, t, result, xl;\n       ieee854_float128 ex2_u, scale_u;\n-#ifdef USE_FENV_H\n       fenv_t oldenv;\n \n       feholdexcept (&oldenv);\n-# ifdef FE_TONEAREST\n+#ifdef FE_TONEAREST\n       fesetround (FE_TONEAREST);\n-# endif\n #endif\n \n       /* Calculate n.  */\n@@ -1146,18 +180,18 @@ expq (__float128 x)\n       ex2_u.ieee.exponent += n_i >> unsafe;\n \n       /* Compute scale = 2^n_1.  */\n-      scale_u.value = 1.0Q;\n+      scale_u.value = 1;\n       scale_u.ieee.exponent += n_i - (n_i >> unsafe);\n \n       /* Approximate e^x2 - 1, using a seventh-degree polynomial,\n \t with maximum error in [-2^-16-2^-53,2^-16+2^-53]\n \t less than 4.8e-39.  */\n       x22 = x + x*x*(P1+x*(P2+x*(P3+x*(P4+x*(P5+x*P6)))));\n+      math_force_eval (x22);\n \n       /* Return result.  */\n-#ifdef USE_FENV_H\n       fesetenv (&oldenv);\n-#endif\n+\n       result = x22 * ex2_u.value + ex2_u.value;\n \n       /* Now we can test whether the result is ultimate or if we are unsure.\n@@ -1169,26 +203,22 @@ expq (__float128 x)\n \t Without proc2 routine maximum error which has been seen is\n \t 0.5000262 ulp.\n \n-\t  union ieee854_long_double ex3_u;\n+\t  ieee854_float128 ex3_u;\n \n-#ifdef USE_FENV_H\n \t  #ifdef FE_TONEAREST\n \t    fesetround (FE_TONEAREST);\n \t  #endif\n-#endif\n-\t  ex3_u.d = (result - ex2_u.d) - x22 * ex2_u.d;\n-\t  ex2_u.d = result;\n-\t  ex3_u.ieee.exponent += LDBL_MANT_DIG + 15 + IEEE854_LONG_DOUBLE_BIAS\n+\t  ex3_u.value = (result - ex2_u.value) - x22 * ex2_u.value;\n+\t  ex2_u.value = result;\n+\t  ex3_u.ieee.exponent += FLT128_MANT_DIG + 15 + IEEE854_FLOAT128_BIAS\n \t\t\t\t - ex2_u.ieee.exponent;\n-\t  n_i = abs (ex3_u.d);\n+\t  n_i = abs (ex3_u.value);\n \t  n_i = (n_i + 1) / 2;\n-#ifdef USE_FENV_H\n \t  fesetenv (&oldenv);\n \t  #ifdef FE_TONEAREST\n \t  if (fegetround () == FE_TONEAREST)\n \t    n_i -= 0x4000;\n \t  #endif\n-#endif\n \t  if (!n_i) {\n \t    return __ieee754_expl_proc2 (origx);\n \t  }\n@@ -1212,7 +242,7 @@ expq (__float128 x)\n \t/* Underflow */\n \treturn TINY * TINY;\n     }\n-\n-  /* Return x, if x is a NaN or Inf; or overflow, otherwise.  */\n-  return TWO16383*x;\n+  else\n+    /* Return x, if x is a NaN or Inf; or overflow, otherwise.  */\n+    return TWO16383*x;\n }"}, {"sha": "830b32ff378c0db2cf8484628cad05307f71fb4f", "filename": "libquadmath/math/expq_table.h", "status": "added", "additions": 970, "deletions": 0, "changes": 970, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fexpq_table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fexpq_table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fexpq_table.h?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -0,0 +1,970 @@\n+/* Accurate table for expq().\n+   Copyright (C) 1999-2018 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* __expq_table basically consists of four tables, T_EXPL_ARG{1,2} and\n+   T_EXPL_RES{1,2}. All tables use positive and negative indexes, the 0 points\n+   are marked by T_EXPL_* defines.\n+   For ARG1 and RES1 tables lets B be 89 and S 256.0, for ARG2 and RES2 B is 65\n+   and S 32768.0.\n+   These table have the property that, for all integers -B <= i <= B\n+   expq(__expq_table[T_EXPL_ARGN+2*i]+__expq_table[T_EXPL_ARGN+2*i+1]+r) ==\n+   __expq_table[T_EXPL_RESN+i], __expq_table[T_EXPL_RESN+i] is some exact number\n+   with the low 58 bits of the mantissa 0,\n+   __expq_table[T_EXPL_ARGN+2*i] == i/S+s\n+   where absl(s) <= 2^-54 and absl(r) <= 2^-212.  */\n+\n+static const __float128 __expq_table [] = {\n+ -3.47656250000000000584188889839535373E-01Q, /* bffd640000000000002b1b04213cf000 */\n+  6.90417668990715641167244540876988960E-32Q, /* 3f97667c3fdb588a6ae1af8748357a17 */\n+ -3.43749999999999981853132895957607418E-01Q, /* bffd5ffffffffffffac4ff5f4050b000 */\n+ -7.16021898043268093462818380603370350E-33Q, /* bf94296c8219427edc1431ac2498583e */\n+ -3.39843750000000013418643523138766329E-01Q, /* bffd5c000000000003de1f027a30e000 */\n+  8.16920774283317801641347327589583265E-32Q, /* 3f97a82b65774bdca1b4440d749ed8d3 */\n+ -3.35937500000000014998092453039303051E-01Q, /* bffd5800000000000452a9f4d8857000 */\n+ -6.55865578425428447938248396879359670E-32Q, /* bf97548b7d240f3d034b395e6eecfac8 */\n+ -3.32031250000000000981984049529998541E-01Q, /* bffd540000000000004875277cda5000 */\n+  6.91213046334032232108944519541512737E-32Q, /* 3f9766e5f925338a19045c94443b66e1 */\n+ -3.28124999999999986646017645350399708E-01Q, /* bffd4ffffffffffffc26a667bf44d000 */\n+ -6.16281060996110316602421505683742661E-32Q, /* bf973ffdcdcffb6fbffc86b2b8d42f5d */\n+ -3.24218749999999991645717430645867963E-01Q, /* bffd4bfffffffffffd97901063e48000 */\n+ -7.90797211087760527593856542417304137E-32Q, /* bf979a9afaaca1ada6a8ed1c80584d60 */\n+ -3.20312499999999998918211610690789652E-01Q, /* bffd47ffffffffffffb02d9856d71000 */\n+  8.64024799457616856987630373786503376E-32Q, /* 3f97c0a098623f95579d5d9b2b67342d */\n+ -3.16406249999999998153974811017181883E-01Q, /* bffd43ffffffffffff77c991f1076000 */\n+ -2.73176610180696076418536105483668404E-32Q, /* bf961baeccb32f9b1fcbb8e60468e95a */\n+ -3.12500000000000011420976192575972779E-01Q, /* bffd400000000000034ab8240483d000 */\n+  7.16573502812389453744433792609989420E-32Q, /* 3f977410f4c2cfc4335f28446c0fb363 */\n+ -3.08593750000000001735496343854851414E-01Q, /* bffd3c000000000000800e995c176000 */\n+ -1.56292999645122272621237565671593071E-32Q, /* bf95449b9cbdaff6ac1246adb2c826ac */\n+ -3.04687499999999982592401295899221626E-01Q, /* bffd37fffffffffffafb8bc1e061a000 */\n+  6.48993208584888904958594509625158417E-32Q, /* 3f9750f9fe8366d82d77afa0031a92e1 */\n+ -3.00781249999999999230616898937763959E-01Q, /* bffd33ffffffffffffc73ac39da54000 */\n+  6.57082437496961397305801409357792029E-32Q, /* 3f97552d3cb598ea80135cf3feb27ec4 */\n+ -2.96874999999999998788769281703245722E-01Q, /* bffd2fffffffffffffa6a07fa5021000 */\n+ -3.26588297198283968096426564544269170E-32Q, /* bf9653260fc1802f46b629aee171809b */\n+ -2.92968750000000015318089182805941695E-01Q, /* bffd2c0000000000046a468614bd6000 */\n+ -1.73291974845198589684358727559290718E-32Q, /* bf9567e9d158f52e483c8d8dcb5961dd */\n+ -2.89062500000000007736778942676309681E-01Q, /* bffd280000000000023adf9f4c3d3000 */\n+ -6.83629745986675744404029225571026236E-32Q, /* bf9762f5face6281c1daf1c6aedbdb45 */\n+ -2.85156250000000001367091555763661937E-01Q, /* bffd2400000000000064dfa11e3fb000 */\n+ -5.44898442619766878281110054067026237E-32Q, /* bf971aed6d2db9f542986a785edae072 */\n+ -2.81249999999999986958718100227029406E-01Q, /* bffd1ffffffffffffc3db9265ca9d000 */\n+  1.13007318374506125723591889451107046E-32Q, /* 3f94d569fe387f456a97902907ac3856 */\n+ -2.77343750000000000356078829380495179E-01Q, /* bffd1c0000000000001a462390083000 */\n+ -4.98979365468978332358409063436543102E-32Q, /* bf970315bbf3e0d14b5c94c900702d4c */\n+ -2.73437499999999990276993957508540484E-01Q, /* bffd17fffffffffffd32919bcdc94000 */\n+ -8.79390484115892344533724650295100871E-32Q, /* bf97c89b0b89cc19c3ab2b60da9bbbc3 */\n+ -2.69531250000000002434203866460082225E-01Q, /* bffd14000000000000b39ccf9e130000 */\n+  9.44060754687026590886751809927191596E-32Q, /* 3f97ea2f32cfecca5c64a26137a9210f */\n+ -2.65624999999999997296320716986257179E-01Q, /* bffd0fffffffffffff3880f13a2bc000 */\n+  2.07142664067265697791007875348396921E-32Q, /* 3f95ae37ee685b9122fbe377bd205ee4 */\n+ -2.61718750000000010237478733739017956E-01Q, /* bffd0c000000000002f3648179d40000 */\n+ -6.10552936159265665298996309192680256E-32Q, /* bf973d0467d31e407515a3cca0f3b4e2 */\n+ -2.57812500000000011948220522778370303E-01Q, /* bffd08000000000003719f81275bd000 */\n+  6.72477169058908902499239631466443836E-32Q, /* 3f975d2b8c475d3160cf72d227d8e6f9 */\n+ -2.53906249999999991822993360536596860E-01Q, /* bffd03fffffffffffda4a4b62f818000 */\n+ -2.44868296623215865054704392917190994E-32Q, /* bf95fc92516c6d057d29fc2528855976 */\n+ -2.49999999999999986862019457428548084E-01Q, /* bffcfffffffffffff86d2d20d5ff4000 */\n+ -3.85302898949105073614122724961613078E-32Q, /* bf96901f147cb7d643af71b6129ce929 */\n+ -2.46093750000000000237554160737318435E-01Q, /* bffcf8000000000000230e8ade26b000 */\n+ -1.52823675242678363494345369284988589E-32Q, /* bf953d6700c5f3fc303f79d0ec8c680a */\n+ -2.42187500000000003023380963205457065E-01Q, /* bffcf0000000000001be2c1a78bb0000 */\n+ -7.78402037952209709489481182714311699E-34Q, /* bf9102ab1f3998e887f0ee4cf940faa5 */\n+ -2.38281249999999995309623303145485725E-01Q, /* bffce7fffffffffffd4bd2940f43f000 */\n+ -3.54307216794236899443913216397197696E-32Q, /* bf966fef03ab69c3f289436205b21d02 */\n+ -2.34374999999999998425804947623207526E-01Q, /* bffcdfffffffffffff17b097a6092000 */\n+ -2.86038428948386602859761879407549696E-32Q, /* bf96290a0eba0131efe3a05fe188f2e3 */\n+ -2.30468749999999993822207406785200832E-01Q, /* bffcd7fffffffffffc70519834eae000 */\n+ -2.54339521031747516806893838749365762E-32Q, /* bf96081f0ad7f9107ae6cddb32c178ab */\n+ -2.26562499999999997823524030344489884E-01Q, /* bffccffffffffffffebecf10093df000 */\n+  4.31904611473158635644635628922959401E-32Q, /* 3f96c083f0b1faa7c4c686193e38d67c */\n+ -2.22656250000000004835132405125162742E-01Q, /* bffcc8000000000002c98a233f19f000 */\n+  2.54709791629335691650310168420597566E-33Q, /* 3f92a735903f5eed07a716ab931e20d9 */\n+ -2.18749999999999988969454021829236626E-01Q, /* bffcbffffffffffff9a42dc14ce36000 */\n+ -3.77236096429336082213752014054909454E-32Q, /* bf9687be8e5b2fca54d3e81157eac660 */\n+ -2.14843750000000010613256919115758495E-01Q, /* bffcb80000000000061e3d828ecac000 */\n+ -4.55194148712216691177097854305964738E-32Q, /* bf96d8b35c776aa3e1a4768271380503 */\n+ -2.10937499999999993204656148110447201E-01Q, /* bffcaffffffffffffc152f2aea118000 */\n+ -2.95044199165561453749332254271716417E-32Q, /* bf96326433b00b2439094d9bef22ddd1 */\n+ -2.07031250000000012233944895423355677E-01Q, /* bffca80000000000070d695ee0e94000 */\n+  1.93146788688385419095981415411012357E-32Q, /* 3f959126729135a5e390d4bb802a0bde */\n+ -2.03125000000000008030983633336321863E-01Q, /* bffca0000000000004a129fbc51af000 */\n+  2.37361904671826193563212931215900137E-32Q, /* 3f95ecfb3c4ba1b97ea3ad45cbb1e68a */\n+ -1.99218750000000001763815712796132779E-01Q, /* bffc98000000000001044b12d9950000 */\n+ -3.63171243370923753295192486732883239E-33Q, /* bf932db5fb3f27c38e0fa7bbcfc64f55 */\n+ -1.95312500000000004883660234506677272E-01Q, /* bffc90000000000002d0b3779d1f9000 */\n+ -3.19989507343607877747980892249711601E-33Q, /* bf9309d63de96bb3ef744c865f22f1bd */\n+ -1.91406250000000013720152363227519348E-01Q, /* bffc88000000000007e8bcb387121000 */\n+ -1.89295754093147174148371614722178860E-32Q, /* bf958926e2e67dfe812c508290add2e7 */\n+ -1.87500000000000000182342082774432620E-01Q, /* bffc800000000000001ae8b06a39f000 */\n+ -2.96812835183184815200854214892983927E-32Q, /* bf96343a62d156bbe71f55d14ca4b6e5 */\n+ -1.83593750000000012410147185883290345E-01Q, /* bffc78000000000007276a1adda8d000 */\n+ -2.02191931237489669058466239995304587E-32Q, /* bf95a3efab92d26ec2df90df036a117f */\n+ -1.79687499999999997439177363346082917E-01Q, /* bffc6ffffffffffffe8616db2927d000 */\n+ -9.92752326937775530007399526834009465E-33Q, /* bf949c5f88ed17041e1a3f1829d543cd */\n+ -1.75781249999999995824373974504785174E-01Q, /* bffc67fffffffffffd97c94f13ea3000 */\n+  1.44184772065335613487885714828816178E-32Q, /* 3f952b75c63476e7fcc2f5841c27bcce */\n+ -1.71874999999999986685050259043077809E-01Q, /* bffc5ffffffffffff8530f6bc531a000 */\n+ -3.49007014971241147689894940544402482E-32Q, /* bf966a6dfaa012aea8ffe6d90b02330f */\n+ -1.67968749999999997316058782350439701E-01Q, /* bffc57fffffffffffe73eb914f2aa000 */\n+  3.34025733574205019081305778794376391E-32Q, /* 3f965adf4572561fd5456a6c13d8babf */\n+ -1.64062499999999993322730602128318480E-01Q, /* bffc4ffffffffffffc269be4f68f3000 */\n+ -1.83345916769684984022099095506340635E-32Q, /* bf957ccb69026cb2f6024c211576d5f4 */\n+ -1.60156249999999992419000744447607979E-01Q, /* bffc47fffffffffffba13df21784a000 */\n+  2.73442789798110494773517431626534726E-32Q, /* 3f961bf58ff22c9b30f1e2b39f26d7d5 */\n+ -1.56249999999999987665010524130393080E-01Q, /* bffc3ffffffffffff8e3ad45e7508000 */\n+  2.02695576464836145806428118889332191E-32Q, /* 3f95a4fb7435a4a2f71de81eb8ae75d1 */\n+ -1.52343749999999989905291167951491803E-01Q, /* bffc37fffffffffffa2e48aecfc24000 */\n+ -3.61436631548815190395331054871041524E-32Q, /* bf967756567ebd108075ae527cc2e7f0 */\n+ -1.48437500000000006686107754967759751E-01Q, /* bffc30000000000003dab20261b3c000 */\n+ -2.15524270159131591469319477922198390E-32Q, /* bf95bfa05b82ef3a708c4f0395e9fcf6 */\n+ -1.44531250000000005132889939177166485E-01Q, /* bffc28000000000002f57b1969e7b000 */\n+  2.74741116529653547935086189244019604E-32Q, /* 3f961d4eb77c1185d34fe1b04a3f3cf5 */\n+ -1.40625000000000000707469094533647325E-01Q, /* bffc2000000000000068676d3d5c4000 */\n+  4.40607097220049957013547629906723266E-33Q, /* 3f936e0ac425daf795b42913cf0ef881 */\n+ -1.36718749999999995713752139187543306E-01Q, /* bffc17fffffffffffd87762255991000 */\n+ -3.73751317180116492404578048203389108E-32Q, /* bf9684202491e9cbb7ceb67d9ff7e0c9 */\n+ -1.32812500000000007198453630478482191E-01Q, /* bffc10000000000004264de3a4379000 */\n+ -3.97050085179660203884930593717220728E-32Q, /* bf969c52048de14be3c9c1971e50869c */\n+ -1.28906250000000006070486371645733082E-01Q, /* bffc080000000000037fd87db2cb0000 */\n+  3.59610068058504988294019521946586131E-32Q, /* 3f967570c10687cb8e9ebd0b280abf5a */\n+ -1.25000000000000003700729208608337966E-01Q, /* bffc00000000000002222198bbc74000 */\n+  3.23464851393124362331846965931995969E-33Q, /* 3f930cb95da3bfc847e593716c91d57a */\n+ -1.21093750000000013729038501177102555E-01Q, /* bffbf000000000000fd418d1f5fda000 */\n+  2.45242487730722066611358741283977619E-32Q, /* 3f95fd5945ad86a464292e26ac192a84 */\n+ -1.17187499999999999765305306880205578E-01Q, /* bffbdfffffffffffffbabaf869845000 */\n+ -1.14557520298960389903199646350205537E-32Q, /* bf94dbda735322179d9bcf392e1dd06d */\n+ -1.13281250000000009579647893740755690E-01Q, /* bffbd000000000000b0b69bae7ab9000 */\n+  2.37873962873837390105423621772752350E-32Q, /* 3f95ee0b7e0bd5ac1f6fab1e2a71abc3 */\n+ -1.09375000000000008981153004560108539E-01Q, /* bffbc000000000000a5ac4bc1d2c3000 */\n+  1.53152444860014076105003555837231015E-32Q, /* 3f953e15ce931e12ef9a152522e32bdd */\n+ -1.05468749999999992399063850363228723E-01Q, /* bffbaffffffffffff73c998091408000 */\n+ -8.75920903597804862471749360196688834E-33Q, /* bf946bd7e310a01bae5687ebdc47fcc5 */\n+ -1.01562500000000007685885179918350550E-01Q, /* bffba0000000000008dc7910a648c000 */\n+ -4.63820993797174451904075397785059501E-33Q, /* bf938153d0e54001a472da180fb5e8aa */\n+ -9.76562499999999887262211517861331814E-02Q, /* bffb8ffffffffffff300915aa6fd6000 */\n+ -2.63767025974952608658936466715705903E-33Q, /* bf92b64215bb8d520be5404620d38088 */\n+ -9.37499999999999939650246024457439795E-02Q, /* bffb7ffffffffffff90aca26bd0fc000 */\n+ -1.72047822349322956713582039121348377E-32Q, /* bf9565545015c5b9b56d02cfefca2c7d */\n+ -8.98437500000000033088896383977486369E-02Q, /* bffb70000000000003d09ca1e3cbe000 */\n+  3.04831994420989436248526129869697270E-33Q, /* 3f92fa7d30d2ed90e7ebbd6231fd08b1 */\n+ -8.59374999999999947312400115121319225E-02Q, /* bffb5ffffffffffff9ecefc03376e000 */\n+  1.50416954438393392150792422537312281E-32Q, /* 3f9538675ee99bd722fad0023c09c915 */\n+ -8.20312500000000054182280847004695514E-02Q, /* bffb500000000000063f2dbd40200000 */\n+  2.68399664523430004488075638997207289E-33Q, /* 3f92bdf49766629882c49a3da88928ed */\n+ -7.81250000000000114767533968079748798E-02Q, /* bffb4000000000000d3b56f81ba70000 */\n+  1.72318124201659121296305402819694281E-32Q, /* 3f9565e407aaabfb359e8a567d760de3 */\n+ -7.42187500000000035531829472486812869E-02Q, /* bffb3000000000000418b6e9b5388000 */\n+  2.09401756478514117051383998628099655E-32Q, /* 3f95b2e91221fcd74be0a86d8ad658d2 */\n+ -7.03124999999999987474933134860732535E-02Q, /* bffb1ffffffffffffe8e53453d2ac000 */\n+  2.28515798224350800271565551341211666E-32Q, /* 3f95da9bd6adf00894f05b5cc5530125 */\n+ -6.64062500000000042267533361089054159E-02Q, /* bffb10000000000004df8473dbcf2000 */\n+  1.97576478800281368377376002585430031E-32Q, /* 3f959a59acbddb2f53bd3096b66370e9 */\n+ -6.25000000000000066329769382774201686E-02Q, /* bffb00000000000007a5b5914e336000 */\n+ -1.46422615813786836245343723048221678E-33Q, /* bf91e69295f069fc0c4a9db181ea25a3 */\n+ -5.85937500000000002823707957982406053E-02Q, /* bffae0000000000000a6aeab10592000 */\n+  9.25637741701318872896718218457555829E-33Q, /* 3f94807eb021f1f40a37d4015b1eb76b */\n+ -5.46875000000000081586888005226044448E-02Q, /* bffac0000000000012d00a3171e3a000 */\n+ -4.87144542459404765480424673678105050E-33Q, /* bf9394b42faba6b7036fe7b36269daf3 */\n+ -5.07812499999999927720348253140567013E-02Q, /* bffa9fffffffffffef555cc8dd914000 */\n+ -3.01901021987395945826043649523451725E-33Q, /* bf92f59e7e3025691f290f8f67277faf */\n+ -4.68749999999999935349476738962633103E-02Q, /* bffa7ffffffffffff117b4ea2b876000 */\n+  1.21521638219189777347767475937119750E-32Q, /* 3f94f8c7f88c5b56674b94d984ac8ecb */\n+ -4.29687500000000056305562847814228219E-02Q, /* bffa6000000000000cfbb19be30c0000 */\n+ -1.18643699217679276275559592978275214E-32Q, /* bf94ecd39f0833a876550e83eb012b99 */\n+ -3.90624999999999962692914526031373542E-02Q, /* bffa3ffffffffffff765c743922f9000 */\n+ -4.91277156857520035712509544689973679E-33Q, /* bf939823189996193872e58ac0dececb */\n+ -3.51562500000000108152468207687602886E-02Q, /* bffa20000000000018f031e41177f000 */\n+  1.18599806302656253755207072755609820E-32Q, /* 3f94eca4f23e787fab73ce8f6b9b8d64 */\n+ -3.12500000000000077376981036742289578E-02Q, /* bffa00000000000011d787e0b386f000 */\n+  9.97730386477005171963635210799577079E-33Q, /* 3f949e70e498c46a0173ac0d46c699fc */\n+ -2.73437500000000139436129596418623235E-02Q, /* bff9c00000000000404db66e70a08000 */\n+  2.25755321633070123579875157841633859E-33Q, /* 3f927719b1a93074bdf9f3c2cb784785 */\n+ -2.34375000000000088003629211828324876E-02Q, /* bff98000000000002895a27d45feb000 */\n+  2.84374279216848803102126617873942975E-33Q, /* 3f92d87f70e749d6da6c260b68dc210b */\n+ -1.95312500000000107408831063404855424E-02Q, /* bff9400000000000318898ba69f71000 */\n+  2.47348089686935458989103979140011912E-33Q, /* 3f929afa3de45086fe909fdddb41edce */\n+ -1.56250000000000081443917555362290635E-02Q, /* bff9000000000000258f335e9cdd6000 */\n+ -2.43379314483517422161458863218426254E-33Q, /* bf9294621c8a9ccacf2b020ec19cad27 */\n+ -1.17187500000000051490597418161403184E-02Q, /* bff88000000000002f7ddfa26221f000 */\n+  1.83405297208145390679150568810924707E-33Q, /* 3f9230bbfc5d5fe1b534fbcda0465bb9 */\n+ -7.81249999999999715861805208310174953E-03Q, /* bff7ffffffffffffcb95f3fff157d000 */\n+  3.51548384878710915171654413641872451E-34Q, /* 3f8fd349b76c22966f77a39fc37ed704 */\n+ -3.90625000000000309326013918295097128E-03Q, /* bff7000000000000390f820c8e153000 */\n+  6.38058004651791109324060099097251911E-36Q, /* 3f8a0f665d3ac25a1ac94d688273dbcd */\n+#define T_EXPL_ARG1 (2*89)\n+  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n+  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n+  3.90625000000000245479958859972588985E-03Q, /* 3ff70000000000002d48769ac9874000 */\n+ -6.58439598384342854976169982902779828E-36Q, /* bf8a1811b923e6c626b07ef29761482a */\n+  7.81250000000001311374391093664996358E-03Q, /* 3ff800000000000078f3f3cd89111000 */\n+  2.60265650555493781464273319671555602E-33Q, /* 3f92b070c3b635b87af426735a71fc87 */\n+  1.17187500000000269581156218247101912E-02Q, /* 3ff8800000000000f8a50d02fe20d000 */\n+  1.00961747974945520631836275894919326E-33Q, /* 3f914f80c1a4f8042044fe3b757b030b */\n+  1.56249999999999797878275270751825475E-02Q, /* 3ff8ffffffffffff45935b69da62e000 */\n+  2.03174577741375590087897353146748580E-33Q, /* 3f925194e863496e0f6e91cbf6b22e26 */\n+  1.95312499999999760319884511789111533E-02Q, /* 3ff93fffffffffff917790ff9a8f4000 */\n+  4.62788519658803722282100289809515007E-33Q, /* 3f9380783ba81295feeb3e4879d7d52d */\n+  2.34374999999999822953909016349145918E-02Q, /* 3ff97fffffffffffae5a163bd3cd5000 */\n+ -3.19499956304699705390404384504876533E-33Q, /* bf93096e2037ced8194cf344c692f8d6 */\n+  2.73437500000000137220327275871555682E-02Q, /* 3ff9c000000000003f481dea5dd51000 */\n+ -2.25757776523031994464630107442723424E-33Q, /* bf92771abcf988a02b414bf2614e3734 */\n+  3.12499999999999790857640618332718621E-02Q, /* 3ff9ffffffffffff9f8cd40b51509000 */\n+ -4.22479470489989916319395454536511458E-33Q, /* bf935efb7245612f371deca17cb7b30c */\n+  3.51562499999999840753382405747597346E-02Q, /* 3ffa1fffffffffffdb47bd275f722000 */\n+  1.08459658374118041980976756063083500E-34Q, /* 3f8e2055d18b7117c9db1c318b1e889b */\n+  3.90624999999999989384433621470426757E-02Q, /* 3ffa3ffffffffffffd8d5e18b042e000 */\n+ -7.41674226146122000759491297811091830E-33Q, /* bf94341454e48029e5b0205d91baffdc */\n+  4.29687500000000107505739500500200462E-02Q, /* 3ffa60000000000018ca04cd9085c000 */\n+ -4.74689012756713017494437969420919847E-34Q, /* bf903b7c268103c6f7fbaaa24142e287 */\n+  4.68749999999999978700749928325717352E-02Q, /* 3ffa7ffffffffffffb16b6d5479e3000 */\n+ -1.06208165308448830117773486334902917E-32Q, /* bf94b92be4b3b5b5a596a0a5187cc955 */\n+  5.07812499999999815072625435955786253E-02Q, /* 3ffa9fffffffffffd55bd086d5cbc000 */\n+ -9.37038897148383660401929567549111394E-33Q, /* bf94853b111b0175b491c80d00419416 */\n+  5.46874999999999809511553152189867394E-02Q, /* 3ffabfffffffffffd4138bfa74a61000 */\n+  1.06642963074562437340498606682822123E-32Q, /* 3f94bafa3fe991b39255d563dfa05d89 */\n+  5.85937500000000184331996330905145551E-02Q, /* 3ffae000000000002a810a5f2f8bf000 */\n+ -1.76639977694797200820296641773791945E-34Q, /* bf8ed596f07ce4408f1705c8ec16864c */\n+  6.25000000000000021544696744852045001E-02Q, /* 3ffb000000000000027be32045e2b000 */\n+  1.68616371995798354366633034788947149E-32Q, /* 3f955e33d7440794d8a1b25233d086ab */\n+  6.64062499999999965563110718495802889E-02Q, /* 3ffb0ffffffffffffc079a38a3fed000 */\n+ -1.82463217667830160048872113565316215E-32Q, /* bf957af6163bcdb97cefab44a942482a */\n+  7.03124999999999759989183341261898222E-02Q, /* 3ffb1fffffffffffe454218acea05000 */\n+ -1.07843770101525495515646940862541503E-32Q, /* bf94bff72aada26d94e76e71c07e0580 */\n+  7.42187499999999898968873730710101412E-02Q, /* 3ffb2ffffffffffff45a166496dc1000 */\n+  1.28629441689592874462780757154138223E-32Q, /* 3f950b2724597b8b93ce1e9d1cf4d035 */\n+  7.81249999999999957198938523510804668E-02Q, /* 3ffb3ffffffffffffb10bc52adbc5000 */\n+  1.13297573459968118467100063135856856E-33Q, /* 3f91787eea895b3c245899cf34ad0abd */\n+  8.20312500000000199911640621145851159E-02Q, /* 3ffb500000000000170c59a661a89000 */\n+ -1.51161335208135146756554123073528707E-32Q, /* bf9539f326c5ca84e7db5401566f3775 */\n+  8.59375000000000134175373433347670743E-02Q, /* 3ffb6000000000000f78287547af0000 */\n+  1.09763629458404270323909815379924900E-32Q, /* 3f94c7f0b61b6e3e27d44b9f5bbc7e9d */\n+  8.98437500000000036533922600308306335E-02Q, /* 3ffb70000000000004364a83b7a14000 */\n+  3.11459653680110433194288029777718358E-33Q, /* 3f9302c0248136d65cebeab69488d949 */\n+  9.37500000000000184977946245216914691E-02Q, /* 3ffb800000000000155395d870b17000 */\n+ -4.66656154468277949130395786965043927E-33Q, /* bf9383aec9b993b6db492b1ede786d8a */\n+  9.76562500000000237839723100419376084E-02Q, /* 3ffb9000000000001b6bca237f6c4000 */\n+ -1.03028043424658760249140747856831301E-32Q, /* bf94abf6352e3d2bb398e47919a343fb */\n+  1.01562500000000012345545575236836572E-01Q, /* 3ffba000000000000e3bc30cd9a1f000 */\n+  2.15755372310795701322789783729456319E-32Q, /* 3f95c01b3b819edd9d07548fafd61550 */\n+  1.05468749999999976493840484471911438E-01Q, /* 3ffbafffffffffffe4e634cd77985000 */\n+  1.78771847038773333029677216592309083E-32Q, /* 3f95734b6ae650f33dd43c49a1df9fc0 */\n+  1.09375000000000002267015055992785402E-01Q, /* 3ffbc00000000000029d1ad08de7b000 */\n+  6.23263106693943817730045115112427717E-33Q, /* 3f9402e4b39ce2198a45e1d045868cd6 */\n+  1.13281250000000022354208618429577398E-01Q, /* 3ffbd0000000000019c5cc3f9d2b5000 */\n+  5.40514416644786448581426756221178868E-33Q, /* 3f93c10ab4021472c662f69435de9269 */\n+  1.17187500000000013252367133076817603E-01Q, /* 3ffbe000000000000f47688cc561b000 */\n+ -7.12412585457324989451327215568641325E-33Q, /* bf9427ecb343a8d1758990565fcfbf45 */\n+  1.21093750000000020759863992944300792E-01Q, /* 3ffbf0000000000017ef3af97bf04000 */\n+  6.26591408357572503875647872077266444E-33Q, /* 3f940446a09a2da771b45fc075514d12 */\n+  1.25000000000000004739659392396765618E-01Q, /* 3ffc00000000000002bb7344ecd89000 */\n+ -1.55611398459729463981000080101758830E-32Q, /* bf95433135febefa9e6aa4db39e263d2 */\n+  1.28906249999999982360888081057894783E-01Q, /* 3ffc07fffffffffff5d4ed3154361000 */\n+ -1.77531518652835570781208599686606474E-32Q, /* bf9570b7f225ea076f97f418d11359c1 */\n+  1.32812500000000010568583998727400436E-01Q, /* 3ffc1000000000000617a5d09526a000 */\n+  2.12104021624990594668286391598300893E-32Q, /* 3f95b885d767a1048d93055927a27adc */\n+  1.36718749999999998434125157367005292E-01Q, /* 3ffc17ffffffffffff18eaebc7970000 */\n+  2.50454798592543203967309921276955297E-32Q, /* 3f9604164e5598528a76faff26cd1c97 */\n+  1.40625000000000015550032422969330356E-01Q, /* 3ffc20000000000008f6c79d8928c000 */\n+  7.80972982879849783680252962992639832E-33Q, /* 3f9444674acf2b3225c7647e0d95edf3 */\n+  1.44531250000000012402535562111122522E-01Q, /* 3ffc28000000000007264a8bc1ff1000 */\n+  2.79662468716455159585514763921671876E-32Q, /* 3f96226b095bd78aa650faf95a221993 */\n+  1.48437500000000007761020440087419948E-01Q, /* 3ffc3000000000000479530ff8fe3000 */\n+  2.15518492972728435680556239996258527E-32Q, /* 3f95bf9d49295e73a957906a029768cb */\n+  1.52343750000000001733189947520484032E-01Q, /* 3ffc38000000000000ffc6109f71f000 */\n+  8.34032236093545825619420380704500188E-33Q, /* 3f945a71851226a1d0ce5e656693153e */\n+  1.56249999999999988073295321246958484E-01Q, /* 3ffc3ffffffffffff91fedd62ae0f000 */\n+  2.44119337150624789345260194989620908E-32Q, /* 3f95fb041a57bc1c1280680ac1620bea */\n+  1.60156250000000002076894210913572460E-01Q, /* 3ffc48000000000001327ed84a199000 */\n+ -7.36124501128859978061216696286151753E-33Q, /* bf9431c62f01e59d2c1e00f195a0037f */\n+  1.64062500000000000950861276373482172E-01Q, /* 3ffc500000000000008c5285fba85000 */\n+ -4.80566184447001164583855800470217373E-33Q, /* bf938f3d1fcafd390f22f80e6c19421f */\n+  1.67968749999999989878071706155265999E-01Q, /* 3ffc57fffffffffffa2a445c548c5000 */\n+ -4.42154428718618459799673088733365064E-32Q, /* bf96cb28cf1c1b28006d53ffe633b22a */\n+  1.71874999999999999459734108403218175E-01Q, /* 3ffc5fffffffffffffb04554e9dd4000 */\n+ -3.29736288190321377985697972236270628E-32Q, /* bf96566af0ebc852e84be12859b24a31 */\n+  1.75781249999999997987525759778901845E-01Q, /* 3ffc67fffffffffffed702df6ffff000 */\n+ -1.28800728638468399687523924685844352E-32Q, /* bf950b8236b88ca0c1b739dc91a7e3fc */\n+  1.79687500000000004929565820437175783E-01Q, /* 3ffc70000000000002d779bb32d2e000 */\n+  1.60624461317978482424582320675174225E-32Q, /* 3f954d9a9cc0c963fd081f3dc922d04e */\n+  1.83593750000000016873727045739708856E-01Q, /* 3ffc78000000000009ba1f6263c9a000 */\n+ -3.83390389582056606880506003118452558E-32Q, /* bf968e22a5d826f77f19ee788474df22 */\n+  1.87500000000000013443068740761666872E-01Q, /* 3ffc80000000000007bfd8c72a1bf000 */\n+ -2.74141662712926256150154726565203091E-32Q, /* bf961caf5ac59c7f941f928e324c2cc1 */\n+  1.91406249999999981494101786848611970E-01Q, /* 3ffc87fffffffffff55502eeae001000 */\n+  3.68992437075565165346469517256118001E-32Q, /* 3f967f2f03f9096793372a27b92ad79d */\n+  1.95312499999999989069921848800501648E-01Q, /* 3ffc8ffffffffffff9b3015280394000 */\n+  3.69712249337856518452988332367785220E-32Q, /* 3f967fee5fdb5bd501ff93516999faa0 */\n+  1.99218750000000021148042946919300804E-01Q, /* 3ffc9800000000000c30e67939095000 */\n+  2.50142536781142175091322844848566649E-32Q, /* 3f9603c34ae58e10b300b07137ee618a */\n+  2.03124999999999977732559198825437141E-01Q, /* 3ffc9ffffffffffff329e7df079e4000 */\n+ -2.41951877287895024779300892731537816E-32Q, /* bf95f683aefe6965f080df8f59dd34a1 */\n+  2.07031249999999996744030653771913124E-01Q, /* 3ffca7fffffffffffe1f80f4b73ca000 */\n+ -1.94346475904454000031592792989765585E-32Q, /* bf9593a44f87870a3d100d498501ecc7 */\n+  2.10937500000000000251399259834392298E-01Q, /* 3ffcb000000000000025199873310000 */\n+ -1.33528748788094249098998693871759411E-33Q, /* bf91bbb9b25c813668d6103d08acac35 */\n+  2.14843749999999993936323609611875097E-01Q, /* 3ffcb7fffffffffffc8128c866236000 */\n+  1.14839877977014974625242788556545292E-32Q, /* 3f94dd06b4655c9b83a1305b240e7a42 */\n+  2.18750000000000015181732784749663837E-01Q, /* 3ffcc0000000000008c06da5fff24000 */\n+  1.42689085313142539755499441881408391E-32Q, /* 3f95285a87dfa7ea7dad5b3be8c669f4 */\n+  2.22656249999999992172647770539596569E-01Q, /* 3ffcc7fffffffffffb7ce2fe531f6000 */\n+ -3.34421462850496887359128610229650547E-32Q, /* bf965b487962b5c2d9056ca6ac0c2e5c */\n+  2.26562499999999989595607223847082419E-01Q, /* 3ffccffffffffffffa0095277be5c000 */\n+ -3.08983588107248752517344356508205569E-32Q, /* bf9640dded57157f8eded311213bdbcd */\n+  2.30468749999999979130462438434567117E-01Q, /* 3ffcd7fffffffffff3f8332996560000 */\n+ -3.01407539802851697849105682795217019E-32Q, /* bf9638ffde35dbdfe1a1ffe45185de5d */\n+  2.34375000000000012194252337217891971E-01Q, /* 3ffce0000000000007078dd402c86000 */\n+ -8.46879710915628592284714319904522657E-33Q, /* bf945fc7b29a2ac6c9eff9eb258a510f */\n+  2.38281249999999982991877076137149870E-01Q, /* 3ffce7fffffffffff6320b486eece000 */\n+ -2.93563878880439245627127095245798544E-32Q, /* bf9630daaa4f40ff05caf29ace2ea7d4 */\n+  2.42187499999999981447559841442773990E-01Q, /* 3ffceffffffffffff54e24a09a8d5000 */\n+ -4.56766746558806021264215486909850481E-32Q, /* bf96da556dee11f3113e5a3467b908e6 */\n+  2.46093749999999991067720539980207318E-01Q, /* 3ffcf7fffffffffffad9d405dcb5d000 */\n+  2.14033004219908074003010247652128251E-32Q, /* 3f95bc8776e8f9ae098884aa664cc3df */\n+  2.50000000000000016613825838126835953E-01Q, /* 3ffd00000000000004c9e24c12bb3000 */\n+  2.57617532593749185996714235009382870E-32Q, /* 3f960b867cc01178c0ec68226c6cb47d */\n+  2.53906250000000013372004437827044321E-01Q, /* 3ffd04000000000003daae05b3168000 */\n+  7.20177123439204414298152646284640101E-32Q, /* 3f9775eff59ddad7e7530b83934af87f */\n+  2.57812499999999995765234725413886085E-01Q, /* 3ffd07fffffffffffec7878bad9d5000 */\n+  6.51253187532920882777046064603770602E-32Q, /* 3f975226659ca241402e71c2011583b0 */\n+  2.61718750000000007647689994011222248E-01Q, /* 3ffd0c000000000002344cc793a0f000 */\n+  3.02370610028725823590045201871491395E-32Q, /* 3f9639ffe55fa2fa011674448b4e5b96 */\n+  2.65624999999999986893899042596554269E-01Q, /* 3ffd0ffffffffffffc38f0c0a1e9f000 */\n+ -2.07683715950724761146070082510569258E-32Q, /* bf95af579a92e872fef81abfdf06bae8 */\n+  2.69531249999999979842788204900639327E-01Q, /* 3ffd13fffffffffffa30a908d67db000 */\n+  8.71465252506557329027658736641075706E-32Q, /* 3f97c47d99e19830447a42b1c0ffac61 */\n+  2.73437500000000006712165837793818271E-01Q, /* 3ffd18000000000001ef453a58edb000 */\n+ -6.62704045767568912140550474455810301E-32Q, /* bf9758187a204dcb06ece46588aeeaba */\n+  2.77343749999999994411329302988535617E-01Q, /* 3ffd1bfffffffffffe63a0fec9c9e000 */\n+ -4.87273466291944117406493607771338767E-32Q, /* bf96fa0381b0844a0be46bac2d673f0c */\n+  2.81250000000000012677892447379453135E-01Q, /* 3ffd20000000000003a7769e125d6000 */\n+ -8.55871796664700790726282049552906783E-32Q, /* bf97bc64e01332cf7616b0091b8dff2c */\n+  2.85156249999999998558643013736363981E-01Q, /* 3ffd23ffffffffffff95a5894bccf000 */\n+ -1.33068334720606220176455289635046875E-32Q, /* bf95145f43290ecf5b7adcb24697bc73 */\n+  2.89062500000000008831431235621753924E-01Q, /* 3ffd280000000000028ba504fac59000 */\n+ -9.34157398616814623985483776710704237E-32Q, /* bf97e50ad1115b941fcb5f0c88a428f7 */\n+  2.92968750000000019840235286110877063E-01Q, /* 3ffd2c000000000005b7f372d184f000 */\n+  4.99302093775173155906059132992249671E-33Q, /* 3f939ecdcfb97bad3f8dbec5df5ec67d */\n+  2.96875000000000015867911730971630513E-01Q, /* 3ffd3000000000000492d860c79db000 */\n+  7.86107787827057767235127454590866211E-33Q, /* 3f944689517ee8f16cdb97d6a6938f32 */\n+  3.00781250000000015814100002286124758E-01Q, /* 3ffd340000000000048edfe73a17d000 */\n+ -1.65419431293024229981937172317171504E-32Q, /* bf9557900e3efca16c89646b57f68dc0 */\n+  3.04687499999999985213157159965287195E-01Q, /* 3ffd37fffffffffffbbcec6f99b36000 */\n+  9.68753602893894024018934325652944198E-32Q, /* 3f97f70170e5458660c33a7e8d43d049 */\n+  3.08593749999999989969324338045156215E-01Q, /* 3ffd3bfffffffffffd1bdde4d0fb1000 */\n+  7.10268609610294706092252562643261106E-32Q, /* 3f9770cae45cdf615010401a4b37d8d4 */\n+  3.12500000000000002971606591018488854E-01Q, /* 3ffd40000000000000db440fbc06b000 */\n+  6.38924218802905979887732294952782964E-32Q, /* 3f974bbf988bb5622bd8fbaa46e8b811 */\n+  3.16406250000000006594921047402056305E-01Q, /* 3ffd44000000000001e69e8954814000 */\n+  3.96079878754651470094149874444850097E-32Q, /* 3f969b5017b9fa7a1e86975258c73d3d */\n+  3.20312500000000006713799366908329147E-01Q, /* 3ffd48000000000001ef64159c065000 */\n+ -1.86401314975634286055150437995880517E-32Q, /* bf958323f0434911794e5fb8bfe136ba */\n+  3.24218749999999987061246567584951210E-01Q, /* 3ffd4bfffffffffffc4549db9b928000 */\n+ -3.18643523744758601387071062700407431E-32Q, /* bf964ae5fa7e26c2c3981bed12e14372 */\n+  3.28124999999999991782776266707412953E-01Q, /* 3ffd4ffffffffffffda1ad0840ca8000 */\n+ -4.46964199751314296839915534813144652E-32Q, /* bf96d0277729ffd74727150df6d15547 */\n+  3.32031250000000000393816557756032682E-01Q, /* 3ffd540000000000001d0efc04fad000 */\n+ -9.03246333902065439930373230002688649E-33Q, /* bf947731a008748cc6dee948839ef7ae */\n+  3.35937499999999983810482995064392173E-01Q, /* 3ffd57fffffffffffb556cab8ae61000 */\n+  5.27742727066129518825981597650621794E-32Q, /* 3f9712050a6ddbf1cabf1b971f4b5d0b */\n+  3.39843750000000004310441349760912471E-01Q, /* 3ffd5c0000000000013e0def5ddc4000 */\n+ -3.85927263474732591932884416445586106E-32Q, /* bf9690c51088ef3db9ca000829c450c2 */\n+  3.43749999999999990248130003997484364E-01Q, /* 3ffd5ffffffffffffd3070624a0af000 */\n+  9.62005170171527308106468341512327487E-34Q, /* 3f913fae595cea84432eb01430817fca */\n+  3.47656250000000004085726414568625697E-01Q, /* 3ffd640000000000012d79309e291000 */\n+ -6.59664093705705297250259434519072507E-32Q, /* bf97568465eafb0e662e64a5dbfaf35f */\n+\n+ -1.98364257812501251077851763965418372E-03Q, /* bff6040000000001cd90f658cf0b1000 */\n+ -3.71984513103117734260309047540278737E-34Q, /* bf8fee73c54483194782aac4a6154d11 */\n+ -1.95312500000000378520649630233891879E-03Q, /* bff60000000000008ba643bb5e2e8000 */\n+ -1.12194202736719050440745599339855038E-34Q, /* bf8e2a436aeff7bc529873354f47a3f5 */\n+ -1.92260742187499397430259771221991482E-03Q, /* bff5f7fffffffffe4361cb51170da000 */\n+ -2.30068299876822157331268484824540848E-34Q, /* bf8f31d02f85cfe8c0cc02276ce0f437 */\n+ -1.89208984375001137424603270262074989E-03Q, /* bff5f0000000000347456ed490c23000 */\n+ -1.15012507244426243338260435466985403E-34Q, /* bf8e31c174d5677a937a34ad8d2a70b4 */\n+ -1.86157226562500172319250342061336738E-03Q, /* bff5e800000000007f262fa3617b4000 */\n+ -3.12438344643346437509767736937785561E-34Q, /* bf8f9f4d426a2457c273d34ef7d9bde9 */\n+ -1.83105468749999505256246872355430379E-03Q, /* bff5dffffffffffe92f18c1c2b6fa000 */\n+ -5.91130415288336591179087455220308942E-35Q, /* bf8d3a4c80b42dc036bae446c9807f78 */\n+ -1.80053710937499445182387245573120522E-03Q, /* bff5d7fffffffffe669dea82b4a4c000 */\n+ -1.92396289352411531324908916321392100E-34Q, /* bf8eff7a2123fb573ba9778550d669bd */\n+ -1.77001953125000387737631542516323906E-03Q, /* bff5d000000000011e19915c3ddb7000 */\n+  7.91101758977203355387806553469731354E-36Q, /* 3f8a507f5a70faaccf469e3461873dea */\n+ -1.73950195312500034854670281415554486E-03Q, /* bff5c8000000000019b7dc6ef97bd000 */\n+  1.55906551582436824067407021178835755E-34Q, /* 3f8e9e7880333e34955aebcde3cfb053 */\n+ -1.70898437499998955782591472611429852E-03Q, /* bff5bffffffffffcfd80e88aa6b96000 */\n+  8.22951661962611381718215899498500357E-35Q, /* 3f8db58e6031a779b59f6ece191de7cc */\n+ -1.67846679687500586652037711131708544E-03Q, /* bff5b80000000001b0df6fd21c133000 */\n+ -8.96642618848426299713145894522897419E-35Q, /* bf8ddcbcab46d531801bfae4121f2f8a */\n+ -1.64794921875000109499161354039904782E-03Q, /* bff5b0000000000050cbce8915575000 */\n+ -2.88077905394253859590587789680486639E-34Q, /* bf8f7eebd4dd860ef73b674d5e707959 */\n+ -1.61743164062501133830507079150388351E-03Q, /* bff5a80000000003449e8700c3e82000 */\n+ -3.68271725851639066312899986829350273E-34Q, /* bf8fe9845fe20a5fe74059e0cae185d6 */\n+ -1.58691406249999015546015764131101956E-03Q, /* bff59ffffffffffd2999e668cdd28000 */\n+  8.48197657099957029953716507898788812E-35Q, /* 3f8dc2faaebb97392e451b07b28c4b12 */\n+ -1.55639648437500317366570219290722587E-03Q, /* bff5980000000000ea2cd9a40d256000 */\n+ -3.45156704719737676412949957712570373E-36Q, /* bf8925a079505516c8e317ac1ff53255 */\n+ -1.52587890625000568759013197767046039E-03Q, /* bff5900000000001a3ab8a3f6b698000 */\n+ -1.01902948542497496574967177677556729E-34Q, /* bf8e0ee78d94d9b5ad3d63ae35c9b554 */\n+ -1.49536132812500945889014955936485340E-03Q, /* bff5880000000002b9f1621b57743000 */\n+ -3.32264697086631598830366079048117140E-34Q, /* bf8fb9a7d14c32289204fbb0c9eb20e0 */\n+ -1.46484374999999931883259902869504725E-03Q, /* bff57fffffffffffcdbd1c90e1b4a000 */\n+ -1.76487524793892929381101031660811433E-34Q, /* bf8ed52f2f724bc1ae870b18356337b4 */\n+ -1.43432617187498876325946983333888768E-03Q, /* bff577fffffffffcc2dff8faa5570000 */\n+ -3.54550084538495708816233114576143814E-34Q, /* bf8fd74724576915868c1e8ce9f430f1 */\n+ -1.40380859374999215367421282192718062E-03Q, /* bff56ffffffffffdbd0b18aac65ed000 */\n+ -1.90585907028351204486765167064669639E-34Q, /* bf8efaaa0c0e23e50c11b2120348054f */\n+ -1.37329101562499692341771212945644892E-03Q, /* bff567ffffffffff1cfd00f1b0577000 */\n+ -3.59631150411372589637918252836880320E-34Q, /* bf8fde08239ac74942a46298ea4fb715 */\n+ -1.34277343749999137467356674296739172E-03Q, /* bff55ffffffffffd839030b05d53d000 */\n+ -1.49571076125940368185068762485268117E-35Q, /* bf8b3e1a3d5c684b27a9f835b1d8d3c9 */\n+ -1.31225585937499247038404301859788734E-03Q, /* bff557fffffffffdd469936e691e3000 */\n+  3.10375845385355395586146533282311300E-34Q, /* 3f8f9c8f6d63b7a4145716ffd92491fb */\n+ -1.28173828124999024755581675764821898E-03Q, /* bff54ffffffffffd306589b0ab21d000 */\n+ -1.98541096105909793397376077900810019E-34Q, /* bf8f07e808bbb1e35106c294ffbb9687 */\n+ -1.25122070312500340204619591143332523E-03Q, /* bff5480000000000fb06d5f16ad2c000 */\n+  3.62884195935761446237911443317457521E-34Q, /* 3f8fe25b17d623178a386a6fa6c5afb2 */\n+ -1.22070312499999591578388993012071279E-03Q, /* bff53ffffffffffed2a356c440074000 */\n+ -2.96756662615653130862526710937493307E-35Q, /* bf8c3b90d8ff2a991e5bd16718fb0645 */\n+ -1.19018554687498821966212632349422735E-03Q, /* bff537fffffffffc9ac3b585dda89000 */\n+  1.44659971891167323357060028901142644E-34Q, /* 3f8e809279ab249edf1dad9fe13fb0bf */\n+ -1.15966796875000160938908064907298384E-03Q, /* bff530000000000076c0800db9639000 */\n+  2.50088010538742402346270685365928513E-34Q, /* 3f8f4c6c8a483b60201d30c1a83c3cb7 */\n+ -1.12915039062500267151512523291939657E-03Q, /* bff5280000000000c51f7e7315137000 */\n+  7.56402096465615210500092443924888831E-35Q, /* 3f8d922c1e485d99aea2668ed32b55a6 */\n+ -1.09863281249998665006360103291051571E-03Q, /* bff51ffffffffffc26f2d4c9ce2ba000 */\n+  1.43982174467233642713619821353592061E-34Q, /* 3f8e7ec530b3d92b6303bec1c81214d1 */\n+ -1.06811523437500522742248711752028025E-03Q, /* bff518000000000181b7380f10446000 */\n+  5.41265133745862349181293024531133174E-35Q, /* 3f8d1fc9313d018b30e790e06b6be723 */\n+ -1.03759765624999980942114138999770552E-03Q, /* bff50ffffffffffff1f01130490e1000 */\n+  1.21525139612685854366189534669623436E-34Q, /* 3f8e4311b96b6fcde412caf3f0d86fb9 */\n+ -1.00708007812499602697537601515759439E-03Q, /* bff507fffffffffedad7afcce7051000 */\n+  1.00020246351201558505328236381833392E-34Q, /* 3f8e09e640992512b1300744a7e984ed */\n+ -9.76562499999992592487302113340463694E-04Q, /* bff4fffffffffffbbad8151f8adf6000 */\n+ -1.64984406575162932060422892046851002E-34Q, /* bf8eb69a919986e8054b86fc34300f24 */\n+ -9.46044921874989085824996924138179594E-04Q, /* bff4effffffffff9b55a204fd9792000 */\n+ -9.29539174108308550334255350011347171E-35Q, /* bf8dee3a50ed896b4656fa577a1df3d7 */\n+ -9.15527343750013735214860599791540029E-04Q, /* bff4e00000000007eaf5bf103f82d000 */\n+  3.07557018309280519949818825519490586E-35Q, /* 3f8c470cfbef77d32c74cb8042f6ee81 */\n+ -8.85009765625012292294986105781516428E-04Q, /* bff4d000000000071605c65403b97000 */\n+  4.77499983783821950338363358545463558E-35Q, /* 3f8cfbc3dc18884c4c4f9e07d90d7bd3 */\n+ -8.54492187499986941239470706817188192E-04Q, /* bff4bffffffffff878ddf9cab264a000 */\n+ -1.60128240346239526958630011447901568E-34Q, /* bf8ea9b1a21e19e2d5bd84b0fbffcf95 */\n+ -8.23974609374996290174598690241743810E-04Q, /* bff4affffffffffddc86c249ebe06000 */\n+  1.61677540391961912631535763471935882E-34Q, /* 3f8eadd00841366b0dc2bc262c2c8c36 */\n+ -7.93457031249988696952538334288757473E-04Q, /* bff49ffffffffff97bf6f0aa85a5f000 */\n+  1.22318577008381887076634753347515709E-34Q, /* 3f8e452db5b5d250878f71040da06d14 */\n+ -7.62939453124996723316499040007097041E-04Q, /* bff48ffffffffffe1c7265b431108000 */\n+ -1.03845161748762410745671891558398468E-34Q, /* bf8e14115ad884c96d1a820c73647220 */\n+ -7.32421874999998242520117923997325794E-04Q, /* bff47ffffffffffefca4498b7aa8a000 */\n+  5.64005211953031009549514026639438083E-35Q, /* 3f8d2be06950f68f1a6d8ff829a6928e */\n+ -7.01904296874999772890934814265622012E-04Q, /* bff46fffffffffffde7c0fe5d8041000 */\n+  5.90245467325173644235991233229525762E-35Q, /* 3f8d39d40cc49002189243c194b1db0e */\n+ -6.71386718750008699269643939210658742E-04Q, /* bff460000000000503c91d798b60c000 */\n+ -5.20515801723324452151498579012322191E-35Q, /* bf8d14c0f08a6a9285b32b8bda003eb5 */\n+ -6.40869140625005499535275057463709988E-04Q, /* bff45000000000032b969184e9751000 */\n+ -6.69469163285461870099846471658294534E-35Q, /* bf8d63f36bab7b24d936c9380e3d3fa6 */\n+ -6.10351562499999293780097329596079841E-04Q, /* bff43fffffffffff97c7c433e35ed000 */\n+ -1.16941808547394177991845382085515086E-34Q, /* bf8e36e27886f10b234a7dd8fc588bf0 */\n+ -5.79833984375000068291972326409994795E-04Q, /* bff43000000000000a13ff6dcf2bf000 */\n+  1.17885044988246219185041488459766001E-34Q, /* 3f8e3964677e001a00412aab52790842 */\n+ -5.49316406249990904622170867910987793E-04Q, /* bff41ffffffffffac1c25739c716b000 */\n+ -3.31875702128137033065075734368960972E-35Q, /* bf8c60e928d8982c3c99aef4f885a121 */\n+ -5.18798828125011293653756992177727236E-04Q, /* bff410000000000682a62cff36775000 */\n+ -5.69971237642088463334239430962628187E-35Q, /* bf8d2f0c76f8757d61cd1abc7ea7d066 */\n+ -4.88281249999990512232251384917893121E-04Q, /* bff3fffffffffff50fb48992320df000 */\n+  1.02144616714408655325510171265051108E-35Q, /* 3f8ab279a3626612710b9b3ac71734ac */\n+ -4.57763671874997554564967307956493434E-04Q, /* bff3dffffffffffd2e3c272e3cca9000 */\n+ -8.25484058867957231164162481843653503E-35Q, /* bf8db6e71158e7bf93e2e683f07aa841 */\n+ -4.27246093749991203999790346349633286E-04Q, /* bff3bffffffffff5dbe103cba0eb2000 */\n+ -3.51191203319375193921924105905691755E-35Q, /* bf8c757356d0f3dd7fbefc0dd419ab50 */\n+ -3.96728515624986649402960638705483281E-04Q, /* bff39ffffffffff09b996882706ec000 */\n+ -5.51925962073095883016589497244931171E-36Q, /* bf89d586d49f22289cfc860bebb99056 */\n+ -3.66210937499999945095511981300980754E-04Q, /* bff37fffffffffffefcb88bfc7df6000 */\n+ -2.11696465278144529364423332249588595E-35Q, /* bf8bc23a84d28e5496c874ef9833be25 */\n+ -3.35693359374992480958458008559640163E-04Q, /* bff35ffffffffff754c548a8798f2000 */\n+ -8.58941791799705081104736787493668352E-35Q, /* bf8dc8b1192fb7c3662826d43acb7c68 */\n+ -3.05175781250009811036303273640122156E-04Q, /* bff340000000000b4fb4f1aad1c76000 */\n+ -8.61173897858769926480551302277426632E-35Q, /* bf8dc9e0eabb1c0b33051011b64769fa */\n+ -2.74658203124987298321920308390303850E-04Q, /* bff31ffffffffff15b2056ac252fd000 */\n+  3.35152809454778381053519808988046631E-37Q, /* 3f85c82fb59ff8d7c80d44e635420ab1 */\n+ -2.44140624999999992770514819575735516E-04Q, /* bff2fffffffffffffbbb82d6a7636000 */\n+  3.54445837111124472730013879165516908E-35Q, /* 3f8c78e955b01378be647b1c92aa9a77 */\n+ -2.13623046875012756463165168672749438E-04Q, /* bff2c0000000001d6a1635fea6bbf000 */\n+  1.50050816288650121729916777279129473E-35Q, /* 3f8b3f1f6f616a61129a58e131cbd31d */\n+ -1.83105468749991323078784464300306893E-04Q, /* bff27fffffffffebfe0cbd0c82399000 */\n+ -9.14919506501448661140572099029756008E-37Q, /* bf873754bacaa9d9513b6127e791eb47 */\n+ -1.52587890625013337032336300236461546E-04Q, /* bff240000000001ec0cb57f2cc995000 */\n+  2.84906084373176180870418394956384516E-35Q, /* 3f8c2ef6d03a7e6ab087c4f099e4de89 */\n+ -1.22070312499990746786116828458007518E-04Q, /* bff1ffffffffffd553bbb49f35a34000 */\n+  6.71618008964968339584520728412444537E-36Q, /* 3f8a1dacb99c60071fc9cd2349495bf0 */\n+ -9.15527343750029275602791047595142231E-05Q, /* bff180000000000d8040cd6ecde28000 */\n+ -1.95753652091078750312541716951402172E-35Q, /* bf8ba0526cfb24d8d59122f1c7a09a14 */\n+ -6.10351562499913258461494008080572701E-05Q, /* bff0ffffffffffaffebbb92d7f6a9000 */\n+  5.69868489273961111703398456218119973E-36Q, /* 3f89e4ca5df09ef4a4386dd5b3bf0331 */\n+ -3.05175781250092882818419203884960853E-05Q, /* bff0000000000055ab55de88fac1d000 */\n+  9.03341100018476837609128961872915953E-36Q, /* 3f8a803d229fa3a0e834a63abb06662b */\n+#define T_EXPL_ARG2 (2*T_EXPL_ARG1 + 2 + 2*65)\n+  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n+  0.00000000000000000000000000000000000E+00Q, /* 00000000000000000000000000000000 */\n+  3.05175781249814607084128277672749162E-05Q, /* 3feffffffffffeaa02abb9102f499000 */\n+  1.00271855391179733380665816525889949E-36Q, /* 3f8755351afa042ac3f58114824d4c10 */\n+  6.10351562500179243748093427073421439E-05Q, /* 3ff1000000000052a95de07a4c26d000 */\n+  1.67231624299180373502350811501181670E-36Q, /* 3f881c87a53691cae9d77f4e40d66616 */\n+  9.15527343749970728685313252158399200E-05Q, /* 3ff17ffffffffff28040cc2acde28000 */\n+  2.43665747834893104318707597514407880E-36Q, /* 3f889e9366c7c6c6a2ecb78dc9b0509e */\n+  1.22070312500027751961838150070880064E-04Q, /* 3ff200000000003ffddde6c153b53000 */\n+ -1.73322146370624186623546452226755405E-35Q, /* bf8b709d8d658ed5dbbe943de56ee84e */\n+  1.52587890624995916105682628143179430E-04Q, /* 3ff23ffffffffff6954b56e285d23000 */\n+  1.23580432650945898349135528000443828E-35Q, /* 3f8b06d396601dde16de7d7bc27346e6 */\n+  1.83105468750008670314358488289621794E-04Q, /* 3ff2800000000013fe0cdc8c823b7000 */\n+  4.30446229148833293310207915930740796E-35Q, /* 3f8cc9ba9bfe554a4f7f2fece291eb23 */\n+  2.13623046875005741337455947623248132E-04Q, /* 3ff2c0000000000d3d1662de21a3f000 */\n+ -3.96110759869520786681660669615255057E-35Q, /* bf8ca5379b04ff4a31aab0ceacc917e6 */\n+  2.44140624999981493573336463433440506E-04Q, /* 3ff2ffffffffffd553bbdf48e0534000 */\n+ -1.39617373942387888957350179316792928E-35Q, /* bf8b28eeedc286015802b63f96b8c5cd */\n+  2.74658203124984920706309918754626834E-04Q, /* 3ff31fffffffffee9d60c8439ec1d000 */\n+ -3.16168080483901830349738314447356223E-36Q, /* bf890cf74f81c77a611abc1243812444 */\n+  3.05175781250008648918265055410966055E-04Q, /* 3ff3400000000009f8b5c9a346636000 */\n+  8.54421306185008998867856704677221443E-35Q, /* 3f8dc649cd40922fc08adc6b6b20ead0 */\n+  3.35693359374988945462612499316774515E-04Q, /* 3ff35ffffffffff34146c540f15b2000 */\n+  7.96443137431639500475160850431097078E-35Q, /* 3f8da77638ed3148fc4d99d1c9e13446 */\n+  3.66210937500027690542093987739604535E-04Q, /* 3ff380000000001fecce34bea89c4000 */\n+  2.14507323877752361258862577769090367E-35Q, /* 3f8bc834e554d38894cf91957b0253d3 */\n+  3.96728515625003928083564943615052121E-04Q, /* 3ff3a00000000004875d9a4acf6ab000 */\n+  4.88358523466632050664019922448605508E-35Q, /* 3f8d03a7eaeef1a9f78c71a12c44dd28 */\n+  4.27246093750017799227172345607351585E-04Q, /* 3ff3c00000000014856794c3ee850000 */\n+  6.66520494592631402182216588784828935E-35Q, /* 3f8d6262118fcdb59b8f16108f5f1a6c */\n+  4.57763671875002108342364320152138181E-04Q, /* 3ff3e000000000026e45d855410b9000 */\n+  7.21799615960261390920033272189522298E-35Q, /* 3f8d7fc645cff8879462296af975c9fd */\n+  4.88281249999999768797631616370963356E-04Q, /* 3ff3ffffffffffffbbc2d7cc004df000 */\n+ -5.30564629906905979452258114088325361E-35Q, /* bf8d1a18b71929a30d67a217a27ae851 */\n+  5.18798828124997339054881383202487041E-04Q, /* 3ff40ffffffffffe775055eea5851000 */\n+ -4.03682911253647925867848180522846377E-35Q, /* bf8cad44f0f3e5199d8a589d9332acad */\n+  5.49316406249980511907933706754958501E-04Q, /* 3ff41ffffffffff4c410b29bb62fb000 */\n+ -2.08166843948323917121806956728438051E-35Q, /* bf8bbab8cf691403249fe5b699e25143 */\n+  5.79833984374989593561576568548497165E-04Q, /* 3ff42ffffffffffa0047df328d817000 */\n+ -1.72745033420153042445343706432627539E-34Q, /* bf8ecb3c2d7d3a9e6e960576be901fdf */\n+  6.10351562500008540711511259540838154E-04Q, /* 3ff4400000000004ec62f54f8c271000 */\n+  7.41889382604319545724663095428976499E-35Q, /* 3f8d8a74c002c81a47c93b8e05d15f8e */\n+  6.40869140625020444702875407535884986E-04Q, /* 3ff450000000000bc91b09718515d000 */\n+ -4.47321009727305792048065440180490107E-35Q, /* bf8cdbac5c8fe70822081d8993eb5cb6 */\n+  6.71386718750007531635964622352684074E-04Q, /* 3ff460000000000457792973db05c000 */\n+  5.13698959677949336513874456684462092E-35Q, /* 3f8d112114436949c5ef38d8049004ab */\n+  7.01904296875006634673332887754430334E-04Q, /* 3ff4700000000003d31adf2cb8b1d000 */\n+ -8.25665755717729437292989870760751482E-35Q, /* bf8db6ffcc8ef71f8e648e3a8b160f5a */\n+  7.32421874999998244664170215504673504E-04Q, /* 3ff47ffffffffffefcf5498bd5c8a000 */\n+ -5.64005234937832153139057628112753364E-35Q, /* bf8d2be06a1dfe90e7bf90fba7c12a98 */\n+  7.62939453125017456345986752604096408E-04Q, /* 3ff490000000000a101a1b093d4a8000 */\n+ -1.11084094120417622468550608896588329E-34Q, /* bf8e274feabd2d94f6694507a46accb1 */\n+  7.93457031249987558617598988993908016E-04Q, /* 3ff49ffffffffff8d3f9dcab74bbf000 */\n+ -1.22966480225449015129079129940978828E-34Q, /* bf8e46e6a65eef8fa9e42eddf3da305e */\n+  8.23974609374997378723747633335135819E-04Q, /* 3ff4affffffffffe7d2afbaa55b26000 */\n+ -1.62270010016794279091906973366704963E-34Q, /* bf8eaf633f057ebdb664a34566401c4e */\n+  8.54492187500023938282350821569920958E-04Q, /* 3ff4c0000000000dccaabce399e59000 */\n+ -1.39076361712838158775374263169606160E-34Q, /* bf8e71ba779364b3bbdba7841f2c4ca1 */\n+  8.85009765624987932362186815286691297E-04Q, /* 3ff4cffffffffff90b218886edc2a000 */\n+  4.07328275060905585228261577392403980E-35Q, /* 3f8cb1254dbb6ea4b8cfa5ed4cf28d24 */\n+  9.15527343749975579461305518559161974E-04Q, /* 3ff4dffffffffff1ec2a21f25df33000 */\n+  1.16855112459192484947855553716334015E-35Q, /* 3f8af10bf319e9f5270cf249eeffbe5c */\n+  9.46044921875016761584725882821122521E-04Q, /* 3ff4f00000000009a992c46c16d71000 */\n+  9.51660680007524262741115611071680436E-35Q, /* 3f8df9fd56e81f8edf133843910ee831 */\n+  9.76562499999974118878133088548272636E-04Q, /* 3ff4fffffffffff1149edc46a6df6000 */\n+ -5.65271128977550656964071208289181661E-36Q, /* bf89e0e12689dd721aa2314c81eb6429 */\n+  1.00708007812498671732140389760347830E-03Q, /* 3ff507fffffffffc2be94b90ed091000 */\n+ -1.43355074891483635310132767255371379E-34Q, /* bf8e7d1a688c247b16022daab1316d55 */\n+  1.03759765625002637786192745235343007E-03Q, /* 3ff51000000000079a57b966bc158000 */\n+  2.95905815240957629366749917020106928E-34Q, /* 3f8f895387fc73bb38f8a1b254c01a60 */\n+  1.06811523437500860568717813047520763E-03Q, /* 3ff51800000000027afcd5b35f5e6000 */\n+ -5.98328495358586628195372356742878314E-35Q, /* bf8d3e204130013bf6328f1b70ff8c76 */\n+  1.09863281250001439958487251556220070E-03Q, /* 3ff5200000000004268077c6c66bd000 */\n+  2.41371837889426603334113000868144760E-34Q, /* 3f8f40d6948edf864054ccf151f9815e */\n+  1.12915039062501298413451613770002366E-03Q, /* 3ff5280000000003be0f5dd8fe81b000 */\n+ -1.28815268997394164973472617519705703E-34Q, /* bf8e567321172ea089dce4bc8354ecb7 */\n+  1.15966796874997272036339054191407232E-03Q, /* 3ff52ffffffffff8231e3bcfff1e8000 */\n+  1.02996064554316248496839462594377804E-34Q, /* 3f8e11cf7d402789244f68e2d4f985b1 */\n+  1.19018554687502744121802585360546796E-03Q, /* 3ff5380000000007e8cdf3f8f6c20000 */\n+ -1.43453217726255628994625761307322163E-34Q, /* bf8e7d5d3370d85a374f5f4802fc517a */\n+  1.22070312499997743541996266398850614E-03Q, /* 3ff53ffffffffff97f0722561f454000 */\n+ -1.41086259180534339713692694428211646E-34Q, /* bf8e77125519ff76244dfec5fbd58402 */\n+  1.25122070312501024092560690174507039E-03Q, /* 3ff5480000000002f3a59d8820691000 */\n+  3.84102646020099293168698506729765213E-34Q, /* 3f8ffe8f5b86f9c3569c8f26e19b1f50 */\n+  1.28173828124997986521442660131425390E-03Q, /* 3ff54ffffffffffa3250a764439d9000 */\n+  1.44644589735033114377952806106652650E-34Q, /* 3f8e808801b80dcf38323cdbfdca2549 */\n+  1.31225585937501665804856968749058137E-03Q, /* 3ff5580000000004cd25a414c6d62000 */\n+  1.67474574742200577294563576414361377E-34Q, /* 3f8ebd394a151dbda4f81d5d83c0f1e9 */\n+  1.34277343749997290265837386401818888E-03Q, /* 3ff55ffffffffff83091b042cfd59000 */\n+ -1.55650565030381326742591837551559103E-34Q, /* bf8e9dca490d7fecfadba9625ffb91c5 */\n+  1.37329101562497720784949380297774268E-03Q, /* 3ff567fffffffff96e3c7312f5ccf000 */\n+  1.65279335325630026116581677369221748E-34Q, /* 3f8eb763496f5bd7404f2298b402074f */\n+  1.40380859374999099958354100336136647E-03Q, /* 3ff56ffffffffffd67e2f09f2a381000 */\n+  1.89919944388961890195706641264717076E-34Q, /* 3f8ef8e4d0ffdfeba982aa8829501389 */\n+  1.43432617187497484122173130998160625E-03Q, /* 3ff577fffffffff8bf9c1d71af8a8000 */\n+  2.57638517142061429772064578590009568E-34Q, /* 3f8f5675d82c1cc4ada70fd3a957b89a */\n+  1.46484374999999929342158925502052945E-03Q, /* 3ff57fffffffffffcbdd1c7671b46000 */\n+  1.76487201934184070490166772482073801E-34Q, /* 3f8ed52ef732458f6e4c5c07504f33cc */\n+  1.49536132812502318451070466256902933E-03Q, /* 3ff5880000000006aeb7066c8ad43000 */\n+  2.38068367275295804321313550609246656E-34Q, /* 3f8f3c7277ae6fc390ace5e06c0b025b */\n+  1.52587890625000448053340248672949543E-03Q, /* 3ff59000000000014a9ae2104b3bc000 */\n+  1.01174455568392813258454590274740959E-34Q, /* 3f8e0cf7c434762991bb38e12acee215 */\n+  1.55639648437501113499837053523090913E-03Q, /* 3ff5980000000003359e2c204355e000 */\n+ -2.82398418808099749023517211651363693E-35Q, /* bf8c2c4c2971d88caa95e15fb1ccb1a1 */\n+  1.58691406249999937955142588308171026E-03Q, /* 3ff59fffffffffffd2380ecbc87c2000 */\n+ -1.27361695572422741562701199136538047E-34Q, /* bf8e5295e0e206dfb0f0266c07225448 */\n+  1.61743164062498000531048954475329309E-03Q, /* 3ff5a7fffffffffa3ca6fe61ed94c000 */\n+ -1.22606548862580061633942923016222044E-34Q, /* bf8e45f1b17bb61039d21a351bb207b8 */\n+  1.64794921875001835451453858682255576E-03Q, /* 3ff5b000000000054a52fa20f6565000 */\n+  1.39132339594152335892305491425264583E-34Q, /* 3f8e71e0904c5449b414ee49b191cef2 */\n+  1.67846679687501263995029340691547953E-03Q, /* 3ff5b80000000003a4a9e912c910b000 */\n+  6.67245854693585315412242764786197029E-35Q, /* 3f8d62c4ccac1e7511a617d469468ccd */\n+  1.70898437500002646861403514115369655E-03Q, /* 3ff5c00000000007a109fbaa7e015000 */\n+  6.87367172354719289559624829652240928E-36Q, /* 3f8a245fa835eceb42bae8128d9336db */\n+  1.73950195312501174308226096992992128E-03Q, /* 3ff5c80000000003627c8d637a005000 */\n+ -2.20824271875474985927385878948759352E-34Q, /* bf8f25869b1cbefb25e735992f232f57 */\n+  1.77001953124997491747605207736194513E-03Q, /* 3ff5cffffffffff8c53c84b6883b8000 */\n+  3.43123048533596296514343180408963705E-34Q, /* 3f8fc816b91d173ddadbbf09b1287906 */\n+  1.80053710937497698911127570705069398E-03Q, /* 3ff5d7fffffffff95e1899f4a8430000 */\n+  3.99231237340890073475077494556136100E-35Q, /* 3f8ca889148f62fa854da5674df41279 */\n+  1.83105468750002267094899598630423914E-03Q, /* 3ff5e0000000000688d21e62ba674000 */\n+ -3.22274595655810623999007524769365273E-34Q, /* bf8fac605cb9ae01eb719675ced25560 */\n+  1.86157226562500499224728040579690330E-03Q, /* 3ff5e80000000001705ce28a6d89e000 */\n+  3.07094985075881613489605622068441083E-34Q, /* 3f8f98330225ec7e2c8f3c0d1c432b91 */\n+  1.89208984374998234666824993196980949E-03Q, /* 3ff5effffffffffae969fdc7cd8cf000 */\n+ -3.06287628722973914692165056776495733E-34Q, /* bf8f9720477d9cfa10e464df7f91020c */\n+  1.92260742187501225343755557292811682E-03Q, /* 3ff5f800000000038824e428ed49a000 */\n+  6.30049124729794620592961282769623368E-35Q, /* 3f8d4efdd7cd4336d88a6aa49e1e96bc */\n+  1.95312499999998514894032051116231258E-03Q, /* 3ff5fffffffffffbb82f6a04f1ae0000 */\n+ -6.14610057507500948543216998736262902E-35Q, /* bf8d46c862d39255370e7974d48daa7e */\n+  1.98364257812501222021119324146882732E-03Q, /* 3ff6040000000001c2d8a1aa5188d000 */\n+  3.71942298418113774118754986159801984E-34Q, /* 3f8fee6567d9940495519ffe62cbc9a4 */\n+\n+  7.06341639425619532977052017486130353E-01Q, /* 3ffe69a59c8245a9ac00000000000000 */\n+  7.09106182437398424589503065362805501E-01Q, /* 3ffe6b0ff72deb89d000000000000000 */\n+  7.11881545564596485142772053222870454E-01Q, /* 3ffe6c7bbce9a6d93000000000000000 */\n+  7.14667771155948150507697391731198877E-01Q, /* 3ffe6de8ef213d71e000000000000000 */\n+  7.17464901725936049503573599395167548E-01Q, /* 3ffe6f578f41e1a9e400000000000000 */\n+  7.20272979955439790478166628417966422E-01Q, /* 3ffe70c79eba33c06c00000000000000 */\n+  7.23092048692387218133958981525211129E-01Q, /* 3ffe72391efa434c7400000000000000 */\n+  7.25922150952408251622927082280511968E-01Q, /* 3ffe73ac117390acd800000000000000 */\n+  7.28763329919491220643124052003258839E-01Q, /* 3ffe752077990e79d000000000000000 */\n+  7.31615628946641782803794740175362676E-01Q, /* 3ffe769652df22f7e000000000000000 */\n+  7.34479091556544505525749855223693885E-01Q, /* 3ffe780da4bba98c4800000000000000 */\n+  7.37353761442226890432394270646909717E-01Q, /* 3ffe79866ea5f432d400000000000000 */\n+  7.40239682467726090031590047146892175E-01Q, /* 3ffe7b00b216ccf53000000000000000 */\n+  7.43136898668758316688354170764796436E-01Q, /* 3ffe7c7c70887763c000000000000000 */\n+  7.46045454253390638577059235103661194E-01Q, /* 3ffe7df9ab76b20fd000000000000000 */\n+  7.48965393602715662213498148958024103E-01Q, /* 3ffe7f78645eb8076400000000000000 */\n+  7.51896761271528629722027403659012634E-01Q, /* 3ffe80f89cbf42526400000000000000 */\n+  7.54839601989007347171423134568613023E-01Q, /* 3ffe827a561889716000000000000000 */\n+  7.57793960659394638668118204805068672E-01Q, /* 3ffe83fd91ec46ddc000000000000000 */\n+  7.60759882362683631518152083117456641E-01Q, /* 3ffe858251bdb68b8c00000000000000 */\n+  7.63737412355305483879774897104653064E-01Q, /* 3ffe87089711986c9400000000000000 */\n+  7.66726596070820082262642358728044201E-01Q, /* 3ffe8890636e31f54400000000000000 */\n+  7.69727479120609181517664865168626420E-01Q, /* 3ffe8a19b85b4fa2d800000000000000 */\n+  7.72740107294572486917871856348938309E-01Q, /* 3ffe8ba4976246833800000000000000 */\n+  7.75764526561826289752232810315035749E-01Q, /* 3ffe8d31020df5be4400000000000000 */\n+  7.78800783071404878477039801509818062E-01Q, /* 3ffe8ebef9eac820b000000000000000 */\n+  7.81848923152964780936002853195532225E-01Q, /* 3ffe904e8086b5a87800000000000000 */\n+  7.84908993317491698871180005880887620E-01Q, /* 3ffe91df97714512d800000000000000 */\n+  7.87981040258010162480317717381694820E-01Q, /* 3ffe9372403b8d6bcc00000000000000 */\n+  7.91065110850296016042904057030682452E-01Q, /* 3ffe95067c78379f2800000000000000 */\n+  7.94161252153591734614934694036492147E-01Q, /* 3ffe969c4dbb800b4800000000000000 */\n+  7.97269511411324433014513601847284008E-01Q, /* 3ffe9833b59b38154400000000000000 */\n+  8.00389936051826789142893403550260700E-01Q, /* 3ffe99ccb5aec7bec800000000000000 */\n+  8.03522573689060742863077280162542593E-01Q, /* 3ffe9b674f8f2f3d7c00000000000000 */\n+  8.06667472123343942680406826184480451E-01Q, /* 3ffe9d0384d70893f800000000000000 */\n+  8.09824679342079301047618855591281317E-01Q, /* 3ffe9ea15722892c7800000000000000 */\n+  8.12994243520486992160556383169023320E-01Q, /* 3ffea040c80f8374f000000000000000 */\n+  8.16176213022339780422953481320291758E-01Q, /* 3ffea1e1d93d687d0000000000000000 */\n+  8.19370636400700819157449927843117621E-01Q, /* 3ffea3848c4d49954c00000000000000 */\n+  8.22577562398664585696650419777142815E-01Q, /* 3ffea528e2e1d9f09800000000000000 */\n+  8.25797039950100647542896581398963463E-01Q, /* 3ffea6cede9f70467c00000000000000 */\n+  8.29029118180400342863478613253391813E-01Q, /* 3ffea876812c0877bc00000000000000 */\n+  8.32273846407226292054559735333896242E-01Q, /* 3ffeaa1fcc2f45343800000000000000 */\n+  8.35531274141265073440720811959181447E-01Q, /* 3ffeabcac15271a2a400000000000000 */\n+  8.38801451086982535754188461396552157E-01Q, /* 3ffead7762408309bc00000000000000 */\n+  8.42084427143382358016410194068157580E-01Q, /* 3ffeaf25b0a61a7b4c00000000000000 */\n+  8.45380252404767357221615498019673396E-01Q, /* 3ffeb0d5ae318680c400000000000000 */\n+  8.48688977161503960155997106085123960E-01Q, /* 3ffeb2875c92c4c99400000000000000 */\n+  8.52010651900789478530029441571969073E-01Q, /* 3ffeb43abd7b83db1c00000000000000 */\n+  8.55345327307422548246407245642330963E-01Q, /* 3ffeb5efd29f24c26400000000000000 */\n+  8.58693054264576483003423845730139874E-01Q, /* 3ffeb7a69db2bcc77800000000000000 */\n+  8.62053883854575708767242758767679334E-01Q, /* 3ffeb95f206d17228000000000000000 */\n+  8.65427867359675251357487013592617586E-01Q, /* 3ffebb195c86b6b29000000000000000 */\n+  8.68815056262843166123843730019871145E-01Q, /* 3ffebcd553b9d7b62000000000000000 */\n+  8.72215502248546159513864495238522068E-01Q, /* 3ffebe9307c271855000000000000000 */\n+  8.75629257203538208242932228131394368E-01Q, /* 3ffec0527a5e384ddc00000000000000 */\n+  8.79056373217652342599848225290770642E-01Q, /* 3ffec213ad4c9ed0d800000000000000 */\n+  8.82496902584595399599010079327854328E-01Q, /* 3ffec3d6a24ed8221800000000000000 */\n+  8.85950897802745995779361010136199184E-01Q, /* 3ffec59b5b27d9696800000000000000 */\n+  8.89418411575955636383383762222365476E-01Q, /* 3ffec761d99c5ba58800000000000000 */\n+  8.92899496814352794382685374330321793E-01Q, /* 3ffec92a1f72dd70d400000000000000 */\n+  8.96394206635150403439382671422208659E-01Q, /* 3ffecaf42e73a4c7d800000000000000 */\n+  8.99902594363456265202927397695020773E-01Q, /* 3ffeccc00868c0d18800000000000000 */\n+  9.03424713533086704009278378180169966E-01Q, /* 3ffece8daf1e0ba94c00000000000000 */\n+  9.06960617887383580004723171441582963E-01Q, /* 3ffed05d24612c2af000000000000000 */\n+  9.10510361380034133338412516422977205E-01Q, /* 3ffed22e6a0197c02c00000000000000 */\n+  9.14073998175894436579724811053893063E-01Q, /* 3ffed40181d094303400000000000000 */\n+  9.17651582651815816982221463149471674E-01Q, /* 3ffed5d66da13970f400000000000000 */\n+  9.21243169397474526149949269893113524E-01Q, /* 3ffed7ad2f48737a2000000000000000 */\n+  9.24848813216204823639543519675498828E-01Q, /* 3ffed985c89d041a3000000000000000 */\n+  9.28468569125835141431224428743007593E-01Q, /* 3ffedb603b7784cd1800000000000000 */\n+  9.32102492359527579068867453315760940E-01Q, /* 3ffedd3c89b26894e000000000000000 */\n+  9.35750638366620729469147477175283711E-01Q, /* 3ffedf1ab529fdd41c00000000000000 */\n+  9.39413062813475779888605643463961314E-01Q, /* 3ffee0fabfbc702a3c00000000000000 */\n+  9.43089821584325888048638830696290825E-01Q, /* 3ffee2dcab49ca51b400000000000000 */\n+  9.46780970782128888929563004239753354E-01Q, /* 3ffee4c079b3f8000400000000000000 */\n+  9.50486566729423443256052905780961737E-01Q, /* 3ffee6a62cdec7c7b000000000000000 */\n+  9.54206665969188322362626308859034907E-01Q, /* 3ffee88dc6afecfbfc00000000000000 */\n+  9.57941325265705301283958306157728657E-01Q, /* 3ffeea77490f0196b000000000000000 */\n+  9.61690601605425299247542625380447134E-01Q, /* 3ffeec62b5e5881fb000000000000000 */\n+  9.65454552197837823079851204965962097E-01Q, /* 3ffeee500f1eed967000000000000000 */\n+  9.69233234476344074348475032820715569E-01Q, /* 3ffef03f56a88b5d7800000000000000 */\n+  9.73026706099133165128733935489435680E-01Q, /* 3ffef2308e71a927a800000000000000 */\n+  9.76835024950062025261843245971249416E-01Q, /* 3ffef423b86b7ee79000000000000000 */\n+  9.80658249139538557015427500118676107E-01Q, /* 3ffef618d68936c09c00000000000000 */\n+  9.84496437005408397968864164795377292E-01Q, /* 3ffef80feabfeefa4800000000000000 */\n+  9.88349647113845042323276857132441364E-01Q, /* 3ffefa08f706bbf53800000000000000 */\n+  9.92217938260243514925207364285597578E-01Q, /* 3ffefc03fd56aa225000000000000000 */\n+  9.96101369470117486981664001177705359E-01Q, /* 3ffefe00ffaabffbbc00000000000000 */\n+#define T_EXPL_RES1 (T_EXPL_ARG2 + 2 + 2*65 + 89)\n+  1.00000000000000000000000000000000000E+00Q, /* 3fff0000000000000000000000000000 */\n+  1.00391388933834757590801700644078664E+00Q, /* 3fff0100802ab5577800000000000000 */\n+  1.00784309720644799091004983893071767E+00Q, /* 3fff0202015600445c00000000000000 */\n+  1.01178768355933151879000320150225889E+00Q, /* 3fff0304848362076c00000000000000 */\n+  1.01574770858668572692806719715008512E+00Q, /* 3fff04080ab55de39000000000000000 */\n+  1.01972323271377413034244341361045372E+00Q, /* 3fff050c94ef7a206c00000000000000 */\n+  1.02371431660235789884438872832106426E+00Q, /* 3fff06122436410dd000000000000000 */\n+  1.02772102115162167201845022646011785E+00Q, /* 3fff0718b98f42085000000000000000 */\n+  1.03174340749910264936062276319717057E+00Q, /* 3fff08205601127ec800000000000000 */\n+  1.03578153702162378824169763902318664E+00Q, /* 3fff0928fa934ef90800000000000000 */\n+  1.03983547133622999947277776300325058E+00Q, /* 3fff0a32a84e9c1f5800000000000000 */\n+  1.04390527230112850620713516036630608E+00Q, /* 3fff0b3d603ca7c32800000000000000 */\n+  1.04799100201663270004459604933799710E+00Q, /* 3fff0c49236829e8bc00000000000000 */\n+  1.05209272282610977189420964350574650E+00Q, /* 3fff0d55f2dce5d1e800000000000000 */\n+  1.05621049731693195106174698594259098E+00Q, /* 3fff0e63cfa7ab09d000000000000000 */\n+  1.06034438832143151909548350886325352E+00Q, /* 3fff0f72bad65671b800000000000000 */\n+  1.06449445891785943185681162503897212E+00Q, /* 3fff1082b577d34ed800000000000000 */\n+  1.06866077243134810492719566354935523E+00Q, /* 3fff1193c09c1c595c00000000000000 */\n+  1.07284339243487741866189821848820429E+00Q, /* 3fff12a5dd543ccc4c00000000000000 */\n+  1.07704238275024494209120007326419000E+00Q, /* 3fff13b90cb25176a400000000000000 */\n+  1.08125780744903959851299646288680378E+00Q, /* 3fff14cd4fc989cd6400000000000000 */\n+  1.08548973085361949442173568058933597E+00Q, /* 3fff15e2a7ae28fecc00000000000000 */\n+  1.08973821753809324563988525369495619E+00Q, /* 3fff16f9157587069400000000000000 */\n+  1.09400333232930546678574046381982043E+00Q, /* 3fff18109a3611c35000000000000000 */\n+  1.09828514030782586896606289883493446E+00Q, /* 3fff192937074e0cd800000000000000 */\n+  1.10258370680894224324930519287590869E+00Q, /* 3fff1a42ed01d8cbc800000000000000 */\n+  1.10689909742365749645287564817408565E+00Q, /* 3fff1b5dbd3f68122400000000000000 */\n+  1.11123137799969046168868658241990488E+00Q, /* 3fff1c79a8dacc350c00000000000000 */\n+  1.11558061464248076122274255794764031E+00Q, /* 3fff1d96b0eff0e79400000000000000 */\n+  1.11994687371619722204840741142106708E+00Q, /* 3fff1eb4d69bde569c00000000000000 */\n+  1.12433022184475073235176978414529003E+00Q, /* 3fff1fd41afcba45e800000000000000 */\n+  1.12873072591281087273529237791080959E+00Q, /* 3fff20f47f31c92e4800000000000000 */\n+  1.13314845306682632219974493636982515E+00Q, /* 3fff2216045b6f5cd000000000000000 */\n+  1.13758347071604959399593326452304609E+00Q, /* 3fff2338ab9b32134800000000000000 */\n+  1.14203584653356560174586320499656722E+00Q, /* 3fff245c7613b8a9b000000000000000 */\n+  1.14650564845732405583333957110880874E+00Q, /* 3fff258164e8cdb0d800000000000000 */\n+  1.15099294469117646722011727433709893E+00Q, /* 3fff26a7793f60164400000000000000 */\n+  1.15549780370591653744227755851170514E+00Q, /* 3fff27ceb43d84490400000000000000 */\n+  1.16002029424032515603215642840950750E+00Q, /* 3fff28f7170a755fd800000000000000 */\n+  1.16456048530221917269855680387991015E+00Q, /* 3fff2a20a2ce96406400000000000000 */\n+  1.16911844616950438835445424956560601E+00Q, /* 3fff2b4b58b372c79400000000000000 */\n+  1.17369424639123270948104504896036815E+00Q, /* 3fff2c7739e3c0f32c00000000000000 */\n+  1.17828795578866324378353169777255971E+00Q, /* 3fff2da4478b620c7400000000000000 */\n+  1.18289964445632783673900689791480545E+00Q, /* 3fff2ed282d763d42400000000000000 */\n+  1.18752938276310060494722620205720887E+00Q, /* 3fff3001ecf601af7000000000000000 */\n+  1.19217724135327157730657177125976887E+00Q, /* 3fff31328716a5d63c00000000000000 */\n+  1.19684329114762477708211463323095813E+00Q, /* 3fff32645269ea829000000000000000 */\n+  1.20152760334452030077656559114984702E+00Q, /* 3fff339750219b212c00000000000000 */\n+  1.20623024942098072687102217059873510E+00Q, /* 3fff34cb8170b5835400000000000000 */\n+  1.21095130113378179892436037334846333E+00Q, /* 3fff3600e78b6b11d000000000000000 */\n+  1.21569083052054743854242246925423387E+00Q, /* 3fff373783a722012400000000000000 */\n+  1.22044890990084875515009343871497549E+00Q, /* 3fff386f56fa7686e800000000000000 */\n+  1.22522561187730755216662714701669756E+00Q, /* 3fff39a862bd3c106400000000000000 */\n+  1.23002100933670455162882717559114099E+00Q, /* 3fff3ae2a8287e7a8000000000000000 */\n+  1.23483517545109100499445276000187732E+00Q, /* 3fff3c1e2876834aa800000000000000 */\n+  1.23966818367890557750499169742397498E+00Q, /* 3fff3d5ae4e2cae92c00000000000000 */\n+  1.24452010776609517384017067342938390E+00Q, /* 3fff3e98deaa11dcbc00000000000000 */\n+  1.24939102174724003813111039562500082E+00Q, /* 3fff3fd8170a52071800000000000000 */\n+  1.25428099994668373895478907797951251E+00Q, /* 3fff41188f42c3e32000000000000000 */\n+  1.25919011697966698459794088194030337E+00Q, /* 3fff425a4893dfc3f800000000000000 */\n+  1.26411844775346637881341393949696794E+00Q, /* 3fff439d443f5f159000000000000000 */\n+  1.26906606746853711786826579555054195E+00Q, /* 3fff44e183883d9e4800000000000000 */\n+  1.27403305161966090564007458851847332E+00Q, /* 3fff462707b2bac20c00000000000000 */\n+  1.27901947599709753244923149395617656E+00Q, /* 3fff476dd2045ac67800000000000000 */\n+  1.28402541668774150540599521264084615E+00Q, /* 3fff48b5e3c3e8186800000000000000 */\n+  1.28905095007628295311619126550795045E+00Q, /* 3fff49ff3e397492bc00000000000000 */\n+  1.29409615284637330434591717676084954E+00Q, /* 3fff4b49e2ae5ac67400000000000000 */\n+  1.29916110198179535206719492634874769E+00Q, /* 3fff4c95d26d3f440800000000000000 */\n+  1.30424587476763775839572190307080746E+00Q, /* 3fff4de30ec211e60000000000000000 */\n+  1.30935054879147461104338390214252286E+00Q, /* 3fff4f3198fa0f1cf800000000000000 */\n+  1.31447520194454914310711046709911898E+00Q, /* 3fff50817263c13cd000000000000000 */\n+  1.31961991242296217130558488861424848E+00Q, /* 3fff51d29c4f01cb3000000000000000 */\n+  1.32478475872886558573071624778094701E+00Q, /* 3fff5325180cfacf7800000000000000 */\n+  1.32996981967165983640200010995613411E+00Q, /* 3fff5478e6f02823d000000000000000 */\n+  1.33517517436919680440254865061433520E+00Q, /* 3fff55ce0a4c58c7bc00000000000000 */\n+  1.34040090224898678084031189428060316E+00Q, /* 3fff57248376b033d800000000000000 */\n+  1.34564708304941055283521222918352578E+00Q, /* 3fff587c53c5a7af0400000000000000 */\n+  1.35091379682093615244298234756570309E+00Q, /* 3fff59d57c910fa4e000000000000000 */\n+  1.35620112392734021300455538039386738E+00Q, /* 3fff5b2fff3210fd9400000000000000 */\n+  1.36150914504693443252136830778908916E+00Q, /* 3fff5c8bdd032e770800000000000000 */\n+  1.36683794117379636690046140756749082E+00Q, /* 3fff5de9176045ff5400000000000000 */\n+  1.37218759361900544124779344201670028E+00Q, /* 3fff5f47afa69210a800000000000000 */\n+  1.37755818401188367960941150158760138E+00Q, /* 3fff60a7a734ab0e8800000000000000 */\n+  1.38294979430124120867162673675920814E+00Q, /* 3fff6208ff6a88a46000000000000000 */\n+  1.38836250675662681297595213436579797E+00Q, /* 3fff636bb9a983258400000000000000 */\n+  1.39379640396958309755959248832368758E+00Q, /* 3fff64cfd75454ee7c00000000000000 */\n+  1.39925156885490681313299887733592186E+00Q, /* 3fff663559cf1bc7c400000000000000 */\n+  1.40472808465191417726103395580139477E+00Q, /* 3fff679c427f5a49f400000000000000 */\n+  1.41022603492571069194738697660795879E+00Q, /* 3fff690492cbf9432c00000000000000 */\n+  1.41574550356846662335641440222389065E+00Q, /* 3fff6a6e4c1d491e1800000000000000 */\n+\n+  9.98018323540573404351050612604012713E-01Q, /* 3ffefefc41f8d4bdb000000000000000 */\n+  9.98048781107475468932221929208026268E-01Q, /* 3ffeff003ff556aa8800000000000000 */\n+  9.98079239603882895082165305211674422E-01Q, /* 3ffeff043df9d4986000000000000000 */\n+  9.98109699029824021243584297735651489E-01Q, /* 3ffeff083c064e972c00000000000000 */\n+  9.98140159385327269125909310787392315E-01Q, /* 3ffeff0c3a1ac4b6ec00000000000000 */\n+  9.98170620670420977171843901487591211E-01Q, /* 3ffeff10383737079400000000000000 */\n+  9.98201082885133511579667242585856002E-01Q, /* 3ffeff14365ba5991c00000000000000 */\n+  9.98231546029493238547658506831794512E-01Q, /* 3ffeff183488107b7c00000000000000 */\n+  9.98262010103528552029672482603928074E-01Q, /* 3ffeff1c32bc77beb000000000000000 */\n+  9.98292475107267818223988342651864514E-01Q, /* 3ffeff2030f8db72b000000000000000 */\n+  9.98322941040739375573309644096298143E-01Q, /* 3ffeff242f3d3ba77000000000000000 */\n+  9.98353407903971645787066790944663808E-01Q, /* 3ffeff282d89986cf000000000000000 */\n+  9.98383875696992967307963340317655820E-01Q, /* 3ffeff2c2bddf1d32400000000000000 */\n+  9.98414344419831761845429696222709026E-01Q, /* 3ffeff302a3a47ea0c00000000000000 */\n+  9.98444814072516340086593800151604228E-01Q, /* 3ffeff34289e9ac19800000000000000 */\n+  9.98475284655075123740886056111776270E-01Q, /* 3ffeff38270aea69c800000000000000 */\n+  9.98505756167536479006585636852832977E-01Q, /* 3ffeff3c257f36f29400000000000000 */\n+  9.98536228609928799837547330753295682E-01Q, /* 3ffeff4023fb806bf800000000000000 */\n+  9.98566701982280452432050310562772211E-01Q, /* 3ffeff44227fc6e5ec00000000000000 */\n+  9.98597176284619802988373749030870385E-01Q, /* 3ffeff48210c0a706800000000000000 */\n+  9.98627651516975245460372434536111541E-01Q, /* 3ffeff4c1fa04b1b6800000000000000 */\n+  9.98658127679375173801901155457017012E-01Q, /* 3ffeff501e3c88f6e800000000000000 */\n+  9.98688604771847954211239084543194622E-01Q, /* 3ffeff541ce0c412e000000000000000 */\n+  9.98719082794421980642241010173165705E-01Q, /* 3ffeff581b8cfc7f4c00000000000000 */\n+  9.98749561747125619293186105096538085E-01Q, /* 3ffeff5c1a41324c2400000000000000 */\n+  9.98780041629987291873504773320746608E-01Q, /* 3ffeff6018fd65896800000000000000 */\n+  9.98810522443035364581476187595399097E-01Q, /* 3ffeff6417c196471000000000000000 */\n+  9.98841004186298203615379520670103375E-01Q, /* 3ffeff68168dc4951400000000000000 */\n+  9.98871486859804230684645176552294288E-01Q, /* 3ffeff6c1561f0837400000000000000 */\n+  9.98901970463581839743127943620493170E-01Q, /* 3ffeff70143e1a222c00000000000000 */\n+  9.98932454997659369233531378995394334E-01Q, /* 3ffeff74132241813000000000000000 */\n+  9.98962940462065268620861502313346136E-01Q, /* 3ffeff78120e66b08400000000000000 */\n+  9.98993426856827904103397486323956400E-01Q, /* 3ffeff7c110289c02000000000000000 */\n+  9.99023914181975669634994119405746460E-01Q, /* 3ffeff800ffeaac00000000000000000 */\n+  9.99054402437536959169506189937237650E-01Q, /* 3ffeff840f02c9c02000000000000000 */\n+  9.99084891623540138905212870668037795E-01Q, /* 3ffeff880e0ee6d07800000000000000 */\n+  9.99115381740013658307120181234495249E-01Q, /* 3ffeff8c0d2302010c00000000000000 */\n+  9.99145872786985911329082910015131347E-01Q, /* 3ffeff900c3f1b61d800000000000000 */\n+  9.99176364764485236413804614130640402E-01Q, /* 3ffeff940b633302d000000000000000 */\n+  9.99206857672540083026291313217370771E-01Q, /* 3ffeff980a8f48f3f800000000000000 */\n+  9.99237351511178817364822180024930276E-01Q, /* 3ffeff9c09c35d454800000000000000 */\n+  9.99267846280429861138827618560753763E-01Q, /* 3ffeffa008ff7006c000000000000000 */\n+  9.99298341980321608302162417203362565E-01Q, /* 3ffeffa4084381485c00000000000000 */\n+  9.99328838610882452808681364331278019E-01Q, /* 3ffeffa8078f911a1800000000000000 */\n+  9.99359336172140816367814863951934967E-01Q, /* 3ffeffac06e39f8bf400000000000000 */\n+  9.99389834664125092933417704443854745E-01Q, /* 3ffeffb0063facadec00000000000000 */\n+  9.99420334086863676459344674185558688E-01Q, /* 3ffeffb405a3b88ffc00000000000000 */\n+  9.99450834440384988655026177184481639E-01Q, /* 3ffeffb8050fc3422400000000000000 */\n+  9.99481335724717395718741386190231424E-01Q, /* 3ffeffbc0483ccd45c00000000000000 */\n+  9.99511837939889374871071936468069907E-01Q, /* 3ffeffc003ffd556ac00000000000000 */\n+  9.99542341085929264554721385138691403E-01Q, /* 3ffeffc40383dcd90800000000000000 */\n+  9.99572845162865514234695751838444266E-01Q, /* 3ffeffc8030fe36b7400000000000000 */\n+  9.99603350170726517864849824945849832E-01Q, /* 3ffeffcc02a3e91dec00000000000000 */\n+  9.99633856109540669399038392839429434E-01Q, /* 3ffeffd0023fee006c00000000000000 */\n+  9.99664362979336418302267475155531429E-01Q, /* 3ffeffd401e3f222f800000000000000 */\n+  9.99694870780142130772816244643763639E-01Q, /* 3ffeffd8018ff5958800000000000000 */\n+  9.99725379511986284031266336569387931E-01Q, /* 3ffeffdc0143f8682400000000000000 */\n+  9.99755889174897216520321308053098619E-01Q, /* 3ffeffe000fffaaac000000000000000 */\n+  9.99786399768903377704987178731244057E-01Q, /* 3ffeffe400c3fc6d6000000000000000 */\n+  9.99816911294033217050269968240172602E-01Q, /* 3ffeffe8008ffdc00800000000000000 */\n+  9.99847423750315072998873233700578567E-01Q, /* 3ffeffec0063feb2ac00000000000000 */\n+  9.99877937137777450526954226006637327E-01Q, /* 3ffefff0003fff555800000000000000 */\n+  9.99908451456448688077216502279043198E-01Q, /* 3ffefff40023ffb80000000000000000 */\n+  9.99938966706357262870241697783058044E-01Q, /* 3ffefff8000fffeaac00000000000000 */\n+  9.99969482887531541104308985268289689E-01Q, /* 3ffefffc0003fffd5400000000000000 */\n+#define T_EXPL_RES2 (T_EXPL_RES1 + 1 + 89 + 65)\n+  1.00000000000000000000000000000000000E+00Q, /* 3fff0000000000000000000000000000 */\n+  1.00003051804379100575559391472779680E+00Q, /* 3fff0002000200015400000000000000 */\n+  1.00006103701893306334724798034585547E+00Q, /* 3fff00040008000aac00000000000000 */\n+  1.00009155692545448346209013834595680E+00Q, /* 3fff0006001200240000000000000000 */\n+  1.00012207776338379883185325525118969E+00Q, /* 3fff0008002000555800000000000000 */\n+  1.00015259953274932014366527255333494E+00Q, /* 3fff000a003200a6ac00000000000000 */\n+  1.00018312223357958012925905677548144E+00Q, /* 3fff000c004801200400000000000000 */\n+  1.00021364586590294498691378066723701E+00Q, /* 3fff000e006201c95c00000000000000 */\n+  1.00024417042974783642605984823603649E+00Q, /* 3fff0010008002aab400000000000000 */\n+  1.00027469592514273166727889474714175E+00Q, /* 3fff001200a203cc1000000000000000 */\n+  1.00030522235211605242000132420798764E+00Q, /* 3fff001400c805357000000000000000 */\n+  1.00033574971069616488250630936818197E+00Q, /* 3fff001600f206eed000000000000000 */\n+  1.00036627800091160178652671675081365E+00Q, /* 3fff0018012009003800000000000000 */\n+  1.00039680722279067381919048784766346E+00Q, /* 3fff001a01520b71a000000000000000 */\n+  1.00042733737636191371223048918182030E+00Q, /* 3fff001c01880e4b1000000000000000 */\n+  1.00045786846165368766392589350289200E+00Q, /* 3fff001e01c211948400000000000000 */\n+  1.00048840047869447289485833607614040E+00Q, /* 3fff0020020015560000000000000000 */\n+  1.00051893342751269111445822090900037E+00Q, /* 3fff0022024219978400000000000000 */\n+  1.00054946730813676403215595200890675E+00Q, /* 3fff002402881e611000000000000000 */\n+  1.00058000212059516886853316464112140E+00Q, /* 3fff002602d223baa800000000000000 */\n+  1.00061053786491632733302026281307917E+00Q, /* 3fff0028032029ac4c00000000000000 */\n+  1.00064107454112866113504765053221490E+00Q, /* 3fff002a0372303dfc00000000000000 */\n+  1.00067161214926059198404573180596344E+00Q, /* 3fff002c03c83777b800000000000000 */\n+  1.00070215068934059710059614189958666E+00Q, /* 3fff002e04223f618400000000000000 */\n+  1.00073269016139709819412928482051939E+00Q, /* 3fff0030048048036000000000000000 */\n+  1.00076323056545857248522679583402351E+00Q, /* 3fff003204e251655000000000000000 */\n+  1.00079377190155338617216784768970683E+00Q, /* 3fff003405485b8f5000000000000000 */\n+  1.00082431416971007198668530691065826E+00Q, /* 3fff003605b266896800000000000000 */\n+  1.00085485736995705163820957750431262E+00Q, /* 3fff00380620725b9800000000000000 */\n+  1.00088540150232269132501983222027775E+00Q, /* 3fff003a06927f0ddc00000000000000 */\n+  1.00091594656683552377884893758164253E+00Q, /* 3fff003c07088ca83c00000000000000 */\n+  1.00094649256352402622027852885366883E+00Q, /* 3fff003e07829b32bc00000000000000 */\n+  1.00097703949241650933643654752813745E+00Q, /* 3fff00400800aab55400000000000000 */\n+  1.00100758735354156137020709138596430E+00Q, /* 3fff00420882bb381000000000000000 */\n+  1.00103813614692760403102056443458423E+00Q, /* 3fff00440908ccc2f000000000000000 */\n+  1.00106868587260300351715613942360505E+00Q, /* 3fff00460992df5df000000000000000 */\n+  1.00109923653059629256034668287611566E+00Q, /* 3fff00480a20f3111800000000000000 */\n+  1.00112978812093589287002259879955091E+00Q, /* 3fff004a0ab307e46800000000000000 */\n+  1.00116034064365022615561429120134562E+00Q, /* 3fff004c0b491ddfe000000000000000 */\n+  1.00119089409876788066000585786241572E+00Q, /* 3fff004e0be3350b8c00000000000000 */\n+  1.00122144848631711155917400901671499E+00Q, /* 3fff00500c814d6f6000000000000000 */\n+  1.00125200380632656260715407370298635E+00Q, /* 3fff00520d2367136c00000000000000 */\n+  1.00128256005882454449107399341301061E+00Q, /* 3fff00540dc981ffa800000000000000 */\n+  1.00131311724383964545381786592770368E+00Q, /* 3fff00560e739e3c2000000000000000 */\n+  1.00134367536140017618251363273884635E+00Q, /* 3fff00580f21bbd0cc00000000000000 */\n+  1.00137423441153472492004539162735455E+00Q, /* 3fff005a0fd3dac5b800000000000000 */\n+  1.00140479439427171337584354660066310E+00Q, /* 3fff005c1089fb22e400000000000000 */\n+  1.00143535530963956325933850166620687E+00Q, /* 3fff005e11441cf05000000000000000 */\n+  1.00146591715766680730226312334707472E+00Q, /* 3fff0060120240360400000000000000 */\n+  1.00149647993838186721404781565070152E+00Q, /* 3fff006212c464fc0000000000000000 */\n+  1.00152704365181316470412298258452211E+00Q, /* 3fff0064138a8b4a4400000000000000 */\n+  1.00155760829798923250422149067162536E+00Q, /* 3fff00661454b328d800000000000000 */\n+  1.00158817387693849232377374391944613E+00Q, /* 3fff00681522dc9fbc00000000000000 */\n+  1.00161874038868942138336137759324629E+00Q, /* 3fff006a15f507b6f400000000000000 */\n+  1.00164930783327055241471725821611471E+00Q, /* 3fff006c16cb34768800000000000000 */\n+  1.00167987621071025161612055853765924E+00Q, /* 3fff006e17a562e67400000000000000 */\n+  1.00171044552103705171930414508096874E+00Q, /* 3fff00701883930ec000000000000000 */\n+  1.00174101576427937443369842185347807E+00Q, /* 3fff00721965c4f76c00000000000000 */\n+  1.00177158694046569697988502412044909E+00Q, /* 3fff00741a4bf8a87c00000000000000 */\n+  1.00180215904962455208959681840497069E+00Q, /* 3fff00761b362e29f800000000000000 */\n+  1.00183273209178441698341543997230474E+00Q, /* 3fff00781c246583e400000000000000 */\n+  1.00186330606697365785962006157205906E+00Q, /* 3fff007a1d169ebe3c00000000000000 */\n+  1.00189388097522080744994354972732253E+00Q, /* 3fff007c1e0cd9e10800000000000000 */\n+  1.00192445681655439848611877096118405E+00Q, /* 3fff007e1f0716f45000000000000000 */\n+  1.00195503359100279716642489802325144E+00Q, /* 3fff0080200556001000000000000000 */\n+  1.00198561129859459173374602869444061E+00Q, /* 3fff00822107970c5400000000000000 */\n+};"}, {"sha": "27e8b2824786c9b5b6d3fae4a147ebf22b14bd99", "filename": "libquadmath/math/fabsq.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffabsq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffabsq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffabsq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* fabsq.c -- __float128 version of s_fabs.c.\n+/* s_fabsl.c -- long double version of s_fabs.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -13,13 +13,20 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n+/*\n+ * fabsq(x) returns the absolute value of x.\n+ */\n+\n #include \"quadmath-imp.h\"\n \n-__float128\n-fabsq (__float128 x)\n+__float128 fabsq(__float128 x)\n {\n-  uint64_t hx;\n-  GET_FLT128_MSW64(hx,x);\n-  SET_FLT128_MSW64(x,hx&0x7fffffffffffffffLL);\n-  return x;\n+\tuint64_t hx;\n+\tGET_FLT128_MSW64(hx,x);\n+\tSET_FLT128_MSW64(x,hx&0x7fffffffffffffffLL);\n+        return x;\n }"}, {"sha": "501e91695202889add1a11cbee0a6b0466436982", "filename": "libquadmath/math/fdimq.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffdimq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffdimq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffdimq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Return positive difference between arguments.\n-   Copyright (C) 1997, 2004, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,29 +14,19 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n-#include <errno.h>\n #include \"quadmath-imp.h\"\n \n __float128\n fdimq (__float128 x, __float128 y)\n {\n-  int clsx = fpclassifyq (x);\n-  int clsy = fpclassifyq (y);\n+  if (__builtin_islessequal (x, y))\n+    return 0;\n \n-  if (clsx == QUADFP_NAN || clsy == QUADFP_NAN\n-      || (y < 0 && clsx == QUADFP_INFINITE && clsy == QUADFP_INFINITE))\n-    /* Raise invalid flag.  */\n-    return x - y;\n-\n-  if (x <= y)\n-    return 0.0Q;\n-\n-  __float128 r = x - y;\n-  if (isinfq (r))\n+  __float128 r = math_narrow_eval (x - y);\n+  if (isinfq (r) && !isinfq (x) && !isinfq (y))\n     errno = ERANGE;\n \n   return r;"}, {"sha": "5d554a02204eb3ef1a915aabf8798b12c1957701", "filename": "libquadmath/math/finiteq.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffiniteq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffiniteq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffiniteq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* finiteq.c -- __float128 version of s_finite.c.\n+/* s_finitel.c -- long double version of s_finite.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -13,18 +13,21 @@\n  * ====================================================\n  */\n \n-#include \"quadmath-imp.h\"\n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n \n /*\n  * finiteq(x) returns 1 is x is finite, else 0;\n  * no branching!\n  */\n \n-int\n-finiteq (const __float128 x)\n+#include \"quadmath-imp.h\"\n+\n+int finiteq(__float128 x)\n {\n-  int64_t hx;\n-  GET_FLT128_MSW64(hx,x);\n-  return (int)((uint64_t)((hx&0x7fff000000000000LL)\n-\t\t\t   -0x7fff000000000000LL)>>63);\n+\tint64_t hx;\n+\tGET_FLT128_MSW64(hx,x);\n+\treturn (int)((uint64_t)((hx&0x7fff000000000000LL)\n+\t\t\t\t-0x7fff000000000000LL)>>63);\n }"}, {"sha": "4e18a39f3585ea3b841465df2d09fbb9b8bf626c", "filename": "libquadmath/math/floorq.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffloorq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffloorq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffloorq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* floorq.c -- __float128 version of s_floor.c.\n+/* s_floorl.c -- long double version of s_floor.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -13,10 +13,22 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n+/*\n+ * floorq(x)\n+ * Return x rounded toward -inf to integral value\n+ * Method:\n+ *\tBit twiddling.\n+ */\n+\n+#define NO_MATH_REDIRECT\n+\n #include \"quadmath-imp.h\"\n \n-__float128\n-floorq (__float128 x)\n+__float128 floorq(__float128 x)\n {\n \tint64_t i0,i1,j0;\n \tuint64_t i,j;"}, {"sha": "661bb6b6ef257effa90cf5bae3e9a9d61c4a3f57", "filename": "libquadmath/math/fmaxq.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffmaxq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffmaxq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffmaxq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Return maximum numeric value of X and Y.\n-   Copyright (C) 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,15 +14,20 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n __float128\n fmaxq (__float128 x, __float128 y)\n {\n-  return (__builtin_isgreaterequal (x, y) || isnanq (y)) ? x : y;\n+  if (__builtin_isgreaterequal (x, y))\n+    return x;\n+  else if (__builtin_isless (x, y))\n+    return y;\n+  else if (issignalingq (x) || issignalingq (y))\n+    return x + y;\n+  else\n+    return isnanq (y) ? x : y;\n }"}, {"sha": "60998094020170ef4117e8c3bfe13b813644f6ec", "filename": "libquadmath/math/fminq.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffminq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffminq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffminq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Return minimum numeric value of X and Y.\n-   Copyright (C) 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n \n@@ -14,15 +14,20 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n __float128\n fminq (__float128 x, __float128 y)\n {\n-  return (__builtin_islessequal (x, y) || isnanq (y)) ? x : y;\n+  if (__builtin_islessequal (x, y))\n+    return x;\n+  else if (__builtin_isgreater (x, y))\n+    return y;\n+  else if (issignalingq (x) || issignalingq (y))\n+    return x + y;\n+  else\n+    return isnanq (y) ? x : y;\n }"}, {"sha": "4b1c476d68be22c38cd6223f3d084ad4646d46b0", "filename": "libquadmath/math/fmodq.c", "status": "modified", "additions": 98, "deletions": 98, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffmodq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffmodq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffmodq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,18 +1,18 @@\n-/* fmodq.c -- __float128 version of e_fmod.c.\n+/* e_fmodl.c -- long double version of e_fmod.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n /*\n  * ====================================================\n- * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ * Copyright (C) 1993, 2011 by Sun Microsystems, Inc. All rights reserved.\n  *\n  * Developed at SunPro, a Sun Microsystems, Inc. business.\n  * Permission to use, copy, modify, and distribute this\n- * software is freely granted, provided that this notice \n+ * software is freely granted, provided that this notice\n  * is preserved.\n  * ====================================================\n  */\n \n-/* \n+/*\n  * fmodq(x,y)\n  * Return x mod y in exact arithmetic\n  * Method: shift and subtract\n@@ -25,105 +25,105 @@ static const __float128 one = 1.0, Zero[] = {0.0, -0.0,};\n __float128\n fmodq (__float128 x, __float128 y)\n {\n-  int64_t n,hx,hy,hz,ix,iy,sx,i;\n-  uint64_t lx,ly,lz;\n+\tint64_t n,hx,hy,hz,ix,iy,sx,i;\n+\tuint64_t lx,ly,lz;\n \n-  GET_FLT128_WORDS64(hx,lx,x);\n-  GET_FLT128_WORDS64(hy,ly,y);\n-  sx = hx&0x8000000000000000ULL;\t/* sign of x */\n-  hx ^=sx;\t\t\t\t/* |x| */\n-  hy &= 0x7fffffffffffffffLL;\t\t/* |y| */\n+\tGET_FLT128_WORDS64(hx,lx,x);\n+\tGET_FLT128_WORDS64(hy,ly,y);\n+\tsx = hx&0x8000000000000000ULL;\t\t/* sign of x */\n+\thx ^=sx;\t\t\t\t/* |x| */\n+\thy &= 0x7fffffffffffffffLL;\t\t/* |y| */\n \n-  /* purge off exception values */\n-  if((hy|ly)==0||(hx>=0x7fff000000000000LL)|| /* y=0,or x not finite */\n-    ((hy|((ly|-ly)>>63))>0x7fff000000000000LL))\t/* or y is NaN */\n-      return (x*y)/(x*y);\n-  if(hx<=hy) {\n-      if((hx<hy)||(lx<ly)) return x;\t/* |x|<|y| return x */\n-      if(lx==ly) \n-\t  return Zero[(uint64_t)sx>>63];\t/* |x|=|y| return x*0*/\n-  }\n+    /* purge off exception values */\n+\tif((hy|ly)==0||(hx>=0x7fff000000000000LL)|| /* y=0,or x not finite */\n+\t  ((hy|((ly|-ly)>>63))>0x7fff000000000000LL))\t/* or y is NaN */\n+\t    return (x*y)/(x*y);\n+\tif(hx<=hy) {\n+\t    if((hx<hy)||(lx<ly)) return x;\t/* |x|<|y| return x */\n+\t    if(lx==ly)\n+\t\treturn Zero[(uint64_t)sx>>63];\t/* |x|=|y| return x*0*/\n+\t}\n \n-  /* determine ix = ilogb(x) */\n-  if(hx<0x0001000000000000LL) {\t/* subnormal x */\n-      if(hx==0) {\n-\t  for (ix = -16431, i=lx; i>0; i<<=1) ix -=1;\n-      } else {\n-\t  for (ix = -16382, i=hx<<15; i>0; i<<=1) ix -=1;\n-      }\n-  } else ix = (hx>>48)-0x3fff;\n+    /* determine ix = ilogb(x) */\n+\tif(hx<0x0001000000000000LL) {\t/* subnormal x */\n+\t    if(hx==0) {\n+\t\tfor (ix = -16431, i=lx; i>0; i<<=1) ix -=1;\n+\t    } else {\n+\t\tfor (ix = -16382, i=hx<<15; i>0; i<<=1) ix -=1;\n+\t    }\n+\t} else ix = (hx>>48)-0x3fff;\n \n-  /* determine iy = ilogb(y) */\n-      if(hy<0x0001000000000000LL) {\t/* subnormal y */\n-\t  if(hy==0) {\n-\t      for (iy = -16431, i=ly; i>0; i<<=1) iy -=1;\n-\t  } else {\n-\t      for (iy = -16382, i=hy<<15; i>0; i<<=1) iy -=1;\n-\t  }\n-      } else iy = (hy>>48)-0x3fff;\n+    /* determine iy = ilogb(y) */\n+\tif(hy<0x0001000000000000LL) {\t/* subnormal y */\n+\t    if(hy==0) {\n+\t\tfor (iy = -16431, i=ly; i>0; i<<=1) iy -=1;\n+\t    } else {\n+\t\tfor (iy = -16382, i=hy<<15; i>0; i<<=1) iy -=1;\n+\t    }\n+\t} else iy = (hy>>48)-0x3fff;\n \n-  /* set up {hx,lx}, {hy,ly} and align y to x */\n-      if(ix >= -16382) \n-\t  hx = 0x0001000000000000LL|(0x0000ffffffffffffLL&hx);\n-      else {\t\t/* subnormal x, shift x to normal */\n-\t  n = -16382-ix;\n-\t  if(n<=63) {\n-\t      hx = (hx<<n)|(lx>>(64-n));\n-\t      lx <<= n;\n-\t  } else {\n-\t      hx = lx<<(n-64);\n-\t      lx = 0;\n-\t  }\n-      }\n-      if(iy >= -16382) \n-\t  hy = 0x0001000000000000LL|(0x0000ffffffffffffLL&hy);\n-      else {\t\t/* subnormal y, shift y to normal */\n-\t  n = -16382-iy;\n-\t  if(n<=63) {\n-\t      hy = (hy<<n)|(ly>>(64-n));\n-\t      ly <<= n;\n-\t  } else {\n-\t      hy = ly<<(n-64);\n-\t      ly = 0;\n-\t  }\n-      }\n+    /* set up {hx,lx}, {hy,ly} and align y to x */\n+\tif(ix >= -16382)\n+\t    hx = 0x0001000000000000LL|(0x0000ffffffffffffLL&hx);\n+\telse {\t\t/* subnormal x, shift x to normal */\n+\t    n = -16382-ix;\n+\t    if(n<=63) {\n+\t\thx = (hx<<n)|(lx>>(64-n));\n+\t\tlx <<= n;\n+\t    } else {\n+\t\thx = lx<<(n-64);\n+\t\tlx = 0;\n+\t    }\n+\t}\n+\tif(iy >= -16382)\n+\t    hy = 0x0001000000000000LL|(0x0000ffffffffffffLL&hy);\n+\telse {\t\t/* subnormal y, shift y to normal */\n+\t    n = -16382-iy;\n+\t    if(n<=63) {\n+\t\thy = (hy<<n)|(ly>>(64-n));\n+\t\tly <<= n;\n+\t    } else {\n+\t\thy = ly<<(n-64);\n+\t\tly = 0;\n+\t    }\n+\t}\n \n-  /* fix point fmod */\n-      n = ix - iy;\n-      while(n--) {\n-\t  hz=hx-hy;lz=lx-ly; if(lx<ly) hz -= 1;\n-\t  if(hz<0){hx = hx+hx+(lx>>63); lx = lx+lx;}\n-\t  else {\n-\t      if((hz|lz)==0) \t\t/* return sign(x)*0 */\n-\t\t  return Zero[(uint64_t)sx>>63];\n-\t      hx = hz+hz+(lz>>63); lx = lz+lz;\n-\t  }\n-      }\n-      hz=hx-hy;lz=lx-ly; if(lx<ly) hz -= 1;\n-      if(hz>=0) {hx=hz;lx=lz;}\n+    /* fix point fmod */\n+\tn = ix - iy;\n+\twhile(n--) {\n+\t    hz=hx-hy;lz=lx-ly; if(lx<ly) hz -= 1;\n+\t    if(hz<0){hx = hx+hx+(lx>>63); lx = lx+lx;}\n+\t    else {\n+\t\tif((hz|lz)==0)\t\t/* return sign(x)*0 */\n+\t\t    return Zero[(uint64_t)sx>>63];\n+\t\thx = hz+hz+(lz>>63); lx = lz+lz;\n+\t    }\n+\t}\n+\thz=hx-hy;lz=lx-ly; if(lx<ly) hz -= 1;\n+\tif(hz>=0) {hx=hz;lx=lz;}\n \n-  /* convert back to floating value and restore the sign */\n-      if((hx|lx)==0) \t\t\t/* return sign(x)*0 */\n-\t  return Zero[(uint64_t)sx>>63];\t\n-      while(hx<0x0001000000000000LL) {\t/* normalize x */\n-\t  hx = hx+hx+(lx>>63); lx = lx+lx;\n-\t  iy -= 1;\n-      }\n-      if(iy>= -16382) {\t/* normalize output */\n-\t  hx = ((hx-0x0001000000000000LL)|((iy+16383)<<48));\n-\t  SET_FLT128_WORDS64(x,hx|sx,lx);\n-      } else {\t\t/* subnormal output */\n-\t  n = -16382 - iy;\n-\t  if(n<=48) {\n-\t      lx = (lx>>n)|((uint64_t)hx<<(64-n));\n-\t      hx >>= n;\n-\t  } else if (n<=63) {\n-\t      lx = (hx<<(64-n))|(lx>>n); hx = sx;\n-\t  } else {\n-\t      lx = hx>>(n-64); hx = sx;\n-\t  }\n-\t  SET_FLT128_WORDS64(x,hx|sx,lx);\n-\t  x *= one;\t\t/* create necessary signal */\n-      }\n-      return x;\t\t/* exact output */\n+    /* convert back to floating value and restore the sign */\n+\tif((hx|lx)==0)\t\t\t/* return sign(x)*0 */\n+\t    return Zero[(uint64_t)sx>>63];\n+\twhile(hx<0x0001000000000000LL) {\t/* normalize x */\n+\t    hx = hx+hx+(lx>>63); lx = lx+lx;\n+\t    iy -= 1;\n+\t}\n+\tif(iy>= -16382) {\t/* normalize output */\n+\t    hx = ((hx-0x0001000000000000LL)|((iy+16383)<<48));\n+\t    SET_FLT128_WORDS64(x,hx|sx,lx);\n+\t} else {\t\t/* subnormal output */\n+\t    n = -16382 - iy;\n+\t    if(n<=48) {\n+\t\tlx = (lx>>n)|((uint64_t)hx<<(64-n));\n+\t\thx >>= n;\n+\t    } else if (n<=63) {\n+\t\tlx = (hx<<(64-n))|(lx>>n); hx = sx;\n+\t    } else {\n+\t\tlx = hx>>(n-64); hx = sx;\n+\t    }\n+\t    SET_FLT128_WORDS64(x,hx|sx,lx);\n+\t    x *= one;\t\t/* create necessary signal */\n+\t}\n+\treturn x;\t\t/* exact output */\n }"}, {"sha": "2c381e590df90c7eacfbd8be3d9929dc75f1fdac", "filename": "libquadmath/math/frexpq.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffrexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ffrexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffrexpq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* frexpq.c -- __float128 version of s_frexp.c.\n+/* s_frexpl.c -- long double version of s_frexp.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -13,10 +13,14 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n /*\n  * for non-zero x\n  *\tx = frexpq(arg,&exp);\n- * return a __float128 fp quantity x such that 0.5 <= |x| <1.0\n+ * return a long double fp quantity x such that 0.5 <= |x| <1.0\n  * and the corresponding binary exponent \"exp\". That is\n  *\targ = x*2^exp.\n  * If arg is inf, 0.0, or NaN, then frexpq(arg,&exp) returns arg\n@@ -28,22 +32,21 @@\n static const __float128\n two114 = 2.0769187434139310514121985316880384E+34Q; /* 0x4071000000000000, 0 */\n \n-__float128\n-frexpq (__float128 x, int *eptr)\n+__float128 frexpq(__float128 x, int *eptr)\n {\n-  uint64_t hx, lx, ix;\n-  GET_FLT128_WORDS64(hx,lx,x);\n-  ix = 0x7fffffffffffffffULL&hx;\n-  *eptr = 0;\n-  if(ix>=0x7fff000000000000ULL||((ix|lx)==0)) return x + x;/* 0,inf,nan */\n-  if (ix<0x0001000000000000ULL) {\t\t/* subnormal */\n-    x *= two114;\n-    GET_FLT128_MSW64(hx,x);\n-    ix = hx&0x7fffffffffffffffULL;\n-    *eptr = -114;\n-  }\n-  *eptr += (ix>>48)-16382;\n-  hx = (hx&0x8000ffffffffffffULL) | 0x3ffe000000000000ULL;\n-  SET_FLT128_MSW64(x,hx);\n-  return x;\n+\tuint64_t hx, lx, ix;\n+\tGET_FLT128_WORDS64(hx,lx,x);\n+\tix = 0x7fffffffffffffffULL&hx;\n+\t*eptr = 0;\n+\tif(ix>=0x7fff000000000000ULL||((ix|lx)==0)) return x + x;/* 0,inf,nan */\n+\tif (ix<0x0001000000000000ULL) {\t\t/* subnormal */\n+\t    x *= two114;\n+\t    GET_FLT128_MSW64(hx,x);\n+\t    ix = hx&0x7fffffffffffffffULL;\n+\t    *eptr = -114;\n+\t}\n+\t*eptr += (ix>>48)-16382;\n+\thx = (hx&0x8000ffffffffffffULL) | 0x3ffe000000000000ULL;\n+\tSET_FLT128_MSW64(x,hx);\n+\treturn x;\n }"}, {"sha": "8dcb749819e7345a1bc205d248002f25018f1210", "filename": "libquadmath/math/hypotq.c", "status": "modified", "additions": 95, "deletions": 94, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fhypotq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fhypotq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fhypotq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,3 +1,7 @@\n+/* e_hypotl.c -- long double version of e_hypot.c.\n+ * Conversion to long double by Jakub Jelinek, jakub@redhat.com.\n+ */\n+\n /*\n  * ====================================================\n  * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n@@ -9,19 +13,14 @@\n  * ====================================================\n  */\n \n-/* From e_hypotl.c -- long double version of e_hypot.c.\n- * Conversion to long double by Jakub Jelinek, jakub@redhat.com.\n- * Conversion to __float128 by FX Coudert, fxcoudert@gcc.gnu.org.\n- */\n-\n /* hypotq(x,y)\n  *\n  * Method :\n  *\tIf (assume round-to-nearest) z=x*x+y*y\n- *\thas error less than sqrtl(2)/2 ulp, than\n- *\tsqrtl(z) has error less than 1 ulp (exercise).\n+ *\thas error less than sqrtq(2)/2 ulp, than\n+ *\tsqrtq(z) has error less than 1 ulp (exercise).\n  *\n- *\tSo, compute sqrtl(x*x+y*y) with some care as\n+ *\tSo, compute sqrtq(x*x+y*y) with some care as\n  *\tfollows to get the error below 1 ulp:\n  *\n  *\tAssume x>y>0;\n@@ -38,100 +37,102 @@\n  *\t      large or too tiny\n  *\n  * Special cases:\n- *\thypotq(x,y) is INF if x or y is +INF or -INF; else\n- *\thypotq(x,y) is NAN if x or y is NAN.\n+ *\thypotl(x,y) is INF if x or y is +INF or -INF; else\n+ *\thypotl(x,y) is NAN if x or y is NAN.\n  *\n  * Accuracy:\n- * \thypotq(x,y) returns sqrtl(x^2+y^2) with error less\n- * \tthan 1 ulps (units in the last place)\n+ *\thypotl(x,y) returns sqrtq(x^2+y^2) with error less\n+ *\tthan 1 ulps (units in the last place)\n  */\n \n #include \"quadmath-imp.h\"\n \n __float128\n-hypotq (__float128 x, __float128 y)\n+hypotq(__float128 x, __float128 y)\n {\n-  __float128 a, b, t1, t2, y1, y2, w;\n-  int64_t j, k, ha, hb;\n+\t__float128 a,b,t1,t2,y1,y2,w;\n+\tint64_t j,k,ha,hb;\n \n-  GET_FLT128_MSW64(ha,x);\n-  ha &= 0x7fffffffffffffffLL;\n-  GET_FLT128_MSW64(hb,y);\n-  hb &= 0x7fffffffffffffffLL;\n-  if(hb > ha) {a=y;b=x;j=ha; ha=hb;hb=j;} else {a=x;b=y;}\n-  SET_FLT128_MSW64(a,ha);\t/* a <- |a| */\n-  SET_FLT128_MSW64(b,hb);\t/* b <- |b| */\n-  if((ha-hb)>0x78000000000000LL) {return a+b;} /* x/y > 2**120 */\n-  k=0;\n-  if(ha > 0x5f3f000000000000LL) {\t/* a>2**8000 */\n-     if(ha >= 0x7fff000000000000LL) {\t/* Inf or NaN */\n-         uint64_t low;\n-         w = a+b;\t\t\t/* for sNaN */\n-         GET_FLT128_LSW64(low,a);\n-         if(((ha&0xffffffffffffLL)|low)==0) w = a;\n-         GET_FLT128_LSW64(low,b);\n-         if(((hb^0x7fff000000000000LL)|low)==0) w = b;\n-         return w;\n-     }\n-     /* scale a and b by 2**-9600 */\n-     ha -= 0x2580000000000000LL;\n-     hb -= 0x2580000000000000LL;\tk += 9600;\n-     SET_FLT128_MSW64(a,ha);\n-     SET_FLT128_MSW64(b,hb);\n-  }\n-  if(hb < 0x20bf000000000000LL) {\t/* b < 2**-8000 */\n-      if(hb <= 0x0000ffffffffffffLL) {\t/* subnormal b or 0 */\n-          uint64_t low;\n-  \tGET_FLT128_LSW64(low,b);\n-  \tif((hb|low)==0) return a;\n-  \tt1=0;\n-  \tSET_FLT128_MSW64(t1,0x7ffd000000000000LL); /* t1=2^16382 */\n-  \tb *= t1;\n-  \ta *= t1;\n-  \tk -= 16382;\n-\tGET_FLT128_MSW64 (ha, a);\n-\tGET_FLT128_MSW64 (hb, b);\n-\tif (hb > ha)\n-\t  {\n-\t    t1 = a;\n-\t    a = b;\n-\t    b = t1;\n-\t    j = ha;\n-\t    ha = hb;\n-\t    hb = j;\n-\t  }\n-      } else {\t\t/* scale a and b by 2^9600 */\n-          ha += 0x2580000000000000LL; \t/* a *= 2^9600 */\n-  \thb += 0x2580000000000000LL;\t/* b *= 2^9600 */\n-  \tk -= 9600;\n-  \tSET_FLT128_MSW64(a,ha);\n-  \tSET_FLT128_MSW64(b,hb);\n-      }\n-  }\n+\tGET_FLT128_MSW64(ha,x);\n+\tha &= 0x7fffffffffffffffLL;\n+\tGET_FLT128_MSW64(hb,y);\n+\thb &= 0x7fffffffffffffffLL;\n+\tif(hb > ha) {a=y;b=x;j=ha; ha=hb;hb=j;} else {a=x;b=y;}\n+\tSET_FLT128_MSW64(a,ha);\t/* a <- |a| */\n+\tSET_FLT128_MSW64(b,hb);\t/* b <- |b| */\n+\tif((ha-hb)>0x78000000000000LL) {return a+b;} /* x/y > 2**120 */\n+\tk=0;\n+\tif(ha > 0x5f3f000000000000LL) {\t/* a>2**8000 */\n+\t   if(ha >= 0x7fff000000000000LL) {\t/* Inf or NaN */\n+\t       uint64_t low;\n+\t       w = a+b;\t\t\t/* for sNaN */\n+\t       if (issignalingq (a) || issignalingq (b))\n+\t\t return w;\n+\t       GET_FLT128_LSW64(low,a);\n+\t       if(((ha&0xffffffffffffLL)|low)==0) w = a;\n+\t       GET_FLT128_LSW64(low,b);\n+\t       if(((hb^0x7fff000000000000LL)|low)==0) w = b;\n+\t       return w;\n+\t   }\n+\t   /* scale a and b by 2**-9600 */\n+\t   ha -= 0x2580000000000000LL;\n+\t   hb -= 0x2580000000000000LL;\tk += 9600;\n+\t   SET_FLT128_MSW64(a,ha);\n+\t   SET_FLT128_MSW64(b,hb);\n+\t}\n+\tif(hb < 0x20bf000000000000LL) {\t/* b < 2**-8000 */\n+\t    if(hb <= 0x0000ffffffffffffLL) {\t/* subnormal b or 0 */\n+\t\tuint64_t low;\n+\t\tGET_FLT128_LSW64(low,b);\n+\t\tif((hb|low)==0) return a;\n+\t\tt1=0;\n+\t\tSET_FLT128_MSW64(t1,0x7ffd000000000000LL); /* t1=2^16382 */\n+\t\tb *= t1;\n+\t\ta *= t1;\n+\t\tk -= 16382;\n+\t\tGET_FLT128_MSW64 (ha, a);\n+\t\tGET_FLT128_MSW64 (hb, b);\n+\t\tif (hb > ha)\n+\t\t  {\n+\t\t    t1 = a;\n+\t\t    a = b;\n+\t\t    b = t1;\n+\t\t    j = ha;\n+\t\t    ha = hb;\n+\t\t    hb = j;\n+\t\t  }\n+\t    } else {\t\t/* scale a and b by 2^9600 */\n+\t\tha += 0x2580000000000000LL;\t/* a *= 2^9600 */\n+\t\thb += 0x2580000000000000LL;\t/* b *= 2^9600 */\n+\t\tk -= 9600;\n+\t\tSET_FLT128_MSW64(a,ha);\n+\t\tSET_FLT128_MSW64(b,hb);\n+\t    }\n+\t}\n     /* medium size a and b */\n-  w = a-b;\n-  if (w>b) {\n-      t1 = 0;\n-      SET_FLT128_MSW64(t1,ha);\n-      t2 = a-t1;\n-      w  = sqrtq(t1*t1-(b*(-b)-t2*(a+t1)));\n-  } else {\n-      a  = a+a;\n-      y1 = 0;\n-      SET_FLT128_MSW64(y1,hb);\n-      y2 = b - y1;\n-      t1 = 0;\n-      SET_FLT128_MSW64(t1,ha+0x0001000000000000LL);\n-      t2 = a - t1;\n-      w  = sqrtq(t1*y1-(w*(-w)-(t1*y2+t2*b)));\n-  }\n-  if(k!=0) {\n-      uint64_t high;\n-      t1 = 1.0Q;\n-      GET_FLT128_MSW64(high,t1);\n-      SET_FLT128_MSW64(t1,high+(k<<48));\n-      w *= t1;\n-      math_check_force_underflow_nonneg (w);\n-      return w;\n-  } else return w;\n+\tw = a-b;\n+\tif (w>b) {\n+\t    t1 = 0;\n+\t    SET_FLT128_MSW64(t1,ha);\n+\t    t2 = a-t1;\n+\t    w  = sqrtq(t1*t1-(b*(-b)-t2*(a+t1)));\n+\t} else {\n+\t    a  = a+a;\n+\t    y1 = 0;\n+\t    SET_FLT128_MSW64(y1,hb);\n+\t    y2 = b - y1;\n+\t    t1 = 0;\n+\t    SET_FLT128_MSW64(t1,ha+0x0001000000000000LL);\n+\t    t2 = a - t1;\n+\t    w  = sqrtq(t1*y1-(w*(-w)-(t1*y2+t2*b)));\n+\t}\n+\tif(k!=0) {\n+\t    uint64_t high;\n+\t    t1 = 1;\n+\t    GET_FLT128_MSW64(high,t1);\n+\t    SET_FLT128_MSW64(t1,high+(k<<48));\n+\t    w *= t1;\n+\t    math_check_force_underflow_nonneg (w);\n+\t    return w;\n+\t} else return w;\n }"}, {"sha": "7b66c29d6dda47741682bfa6d84a76ef59bb962a", "filename": "libquadmath/math/ilogbq.c", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Filogbq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Filogbq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Filogbq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* ilogbq.c -- __float128 version of s_ilogb.c.\n+/* s_ilogbl.c -- long double version of s_ilogb.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -17,27 +17,23 @@\n static char rcsid[] = \"$NetBSD: $\";\n #endif\n \n-/* ilogbl(__float128 x)\n+/* ilogbl(long double x)\n  * return the binary exponent of non-zero x\n  * ilogbl(0) = FP_ILOGB0\n  * ilogbl(NaN) = FP_ILOGBNAN (no signal is raised)\n  * ilogbl(+-Inf) = INT_MAX (no signal is raised)\n  */\n \n-#include <limits.h>\n #include <math.h>\n-#include <errno.h>\n #include \"quadmath-imp.h\"\n-\n #ifndef FP_ILOGB0\n # define FP_ILOGB0 INT_MIN\n #endif\n #ifndef FP_ILOGBNAN\n # define FP_ILOGBNAN INT_MAX\n #endif\n \n-int\n-ilogbq (__float128 x)\n+int ilogbq (__float128 x)\n {\n \tint64_t hx,lx;\n \tint ix;\n@@ -46,13 +42,7 @@ ilogbq (__float128 x)\n \thx &= 0x7fffffffffffffffLL;\n \tif(hx <= 0x0001000000000000LL) {\n \t    if((hx|lx)==0)\n-\t      {\n-\t\terrno = EDOM;\n-#ifdef USE_FENV_H\n-\t\tferaiseexcept (FE_INVALID);\n-#endif\n-\t\treturn FP_ILOGB0;\t/* ilogbl(0) = FP_ILOGB0 */\n-\t      }\n+\t\t{ errno = EDOM; feraiseexcept (FE_INVALID); return FP_ILOGB0; }\t/* ilogbl(0) = FP_ILOGB0 */\n \t    else\t\t\t/* subnormal x */\n \t\tif(hx==0) {\n \t\t    for (ix = -16431; lx>0; lx<<=1) ix -=1;\n@@ -65,18 +55,7 @@ ilogbq (__float128 x)\n \telse if (FP_ILOGBNAN != INT_MAX) {\n \t    /* ISO C99 requires ilogbl(+-Inf) == INT_MAX.  */\n \t    if (((hx^0x7fff000000000000LL)|lx) == 0)\n-\t      {\n-\t\terrno = EDOM;\n-#ifdef USE_FENV_H\n-\t\tferaiseexcept (FE_INVALID);\n-#endif\n-\t\treturn INT_MAX;\n-\t      }\n+\t\t{ errno = EDOM; feraiseexcept (FE_INVALID); return INT_MAX; }\n \t}\n-\n-\terrno = EDOM;\n-#ifdef USE_FENV_H\n-\tferaiseexcept (FE_INVALID);\n-#endif\n-\treturn FP_ILOGBNAN;\n+\t{ errno = EDOM; feraiseexcept (FE_INVALID); return FP_ILOGBNAN; }\n }"}, {"sha": "2f0834361c5f9d4bb5ba92c229bf2fd8e1e95576", "filename": "libquadmath/math/isinf_nsq.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f31a750311079962cb1082bc1202584da491aba/libquadmath%2Fmath%2Fisinf_nsq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f31a750311079962cb1082bc1202584da491aba/libquadmath%2Fmath%2Fisinf_nsq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fisinf_nsq.c?ref=0f31a750311079962cb1082bc1202584da491aba", "patch": "@@ -1,19 +0,0 @@\n-/*\n- * Written by Ulrich Drepper <drepper@gmail.com>\n- */\n-\n-/*\n- * __quadmath_isinf_nsq (x) returns != 0 if x is \u00b1inf, else 0;\n- * no branching!\n- */\n-\n-#include \"quadmath-imp.h\"\n-\n-int\n-__quadmath_isinf_nsq (__float128 x)\n-{\n-        int64_t hx,lx;\n-        GET_FLT128_WORDS64(hx,lx,x);\n-        return !(lx | ((hx & 0x7fffffffffffffffLL) ^ 0x7fff000000000000LL));\n-}\n-"}, {"sha": "673fd22caf816bb4ad595f62e8416695073101bf", "filename": "libquadmath/math/isinfq.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fisinfq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fisinfq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fisinfq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -4,14 +4,23 @@\n  * Public domain.\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n+/*\n+ * isinfq(x) returns 1 if x is inf, -1 if x is -inf, else 0;\n+ * no branching!\n+ */\n+\n #include \"quadmath-imp.h\"\n \n int\n isinfq (__float128 x)\n {\n-  int64_t hx,lx;\n-  GET_FLT128_WORDS64(hx,lx,x);\n-  lx |= (hx & 0x7fffffffffffffffLL) ^ 0x7fff000000000000LL;\n-  lx |= -lx;\n-  return ~(lx >> 63) & (hx >> 62);\n+\tint64_t hx,lx;\n+\tGET_FLT128_WORDS64(hx,lx,x);\n+\tlx |= (hx & 0x7fffffffffffffffLL) ^ 0x7fff000000000000LL;\n+\tlx |= -lx;\n+\treturn ~(lx >> 63) & (hx >> 62);\n }"}, {"sha": "633409816c680192077e91ae7284bdf30a6f7f76", "filename": "libquadmath/math/isnanq.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fisnanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fisnanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fisnanq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* isnanq.c -- __float128 version of s_isnan.c.\n+/* s_isnanl.c -- long double version of s_isnan.c.\n  * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -13,15 +13,23 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n+/*\n+ * isnanq(x) returns 1 is x is nan, else 0;\n+ * no branching!\n+ */\n+\n #include \"quadmath-imp.h\"\n \n-int\n-isnanq (const __float128 x)\n+int isnanq(__float128 x)\n {\n-  int64_t hx,lx;\n-  GET_FLT128_WORDS64(hx,lx,x);\n-  hx &= 0x7fffffffffffffffLL;\n-  hx |= (uint64_t)(lx|(-lx))>>63;\n-  hx = 0x7fff000000000000LL - hx;\n-  return (int)((uint64_t)hx>>63);\n+\tint64_t hx,lx;\n+\tGET_FLT128_WORDS64(hx,lx,x);\n+\thx &= 0x7fffffffffffffffLL;\n+\thx |= (uint64_t)(lx|(-lx))>>63;\n+\thx = 0x7fff000000000000LL - hx;\n+\treturn (int)((uint64_t)hx>>63);\n }"}, {"sha": "a3b597f3fa9c8bc5490f57fcf4fbffd9ceeca85b", "filename": "libquadmath/math/issignalingq.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fissignalingq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fissignalingq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fissignalingq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -0,0 +1,43 @@\n+/* Test for signaling NaN.\n+   Copyright (C) 2013-2018 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+int\n+issignalingq (__float128 x)\n+{\n+  uint64_t hxi, lxi __attribute__ ((unused));\n+  GET_FLT128_WORDS64 (hxi, lxi, x);\n+#if HIGH_ORDER_BIT_IS_SET_FOR_SNAN\n+  /* We only have to care about the high-order bit of x's significand, because\n+     having it set (sNaN) already makes the significand different from that\n+     used to designate infinity.  */\n+  return ((hxi & UINT64_C (0x7fff800000000000))\n+          == UINT64_C (0x7fff800000000000));\n+#else\n+  /* To keep the following comparison simple, toggle the quiet/signaling bit,\n+     so that it is set for sNaNs.  This is inverse to IEEE 754-2008 (as well as\n+     common practice for IEEE 754-1985).  */\n+  hxi ^= UINT64_C (0x0000800000000000);\n+  /* If lxi != 0, then set any suitable bit of the significand in hxi.  */\n+  hxi |= (lxi | -lxi) >> 63;\n+  /* We have to compare for greater (instead of greater or equal), because x's\n+     significand being all-zero designates infinity not NaN.  */\n+  return (hxi & UINT64_C (0x7fffffffffffffff)) > UINT64_C (0x7fff800000000000);\n+#endif\n+}"}, {"sha": "8fe60464f1993d67741c4f3d3505d212b72ed6d8", "filename": "libquadmath/math/j0q.c", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fj0q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fj0q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fj0q.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -6,7 +6,7 @@\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, j0l();\n+ * long double x, y, j0l();\n  *\n  * y = j0l( x );\n  *\n@@ -52,7 +52,7 @@\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, y0l();\n+ * double x, y, y0l();\n  *\n  * y = y0l( x );\n  *\n@@ -88,16 +88,16 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n /* 1 / sqrt(pi) */\n static const __float128 ONEOSQPI = 5.6418958354775628694807945156077258584405E-1Q;\n /* 2 / pi */\n static const __float128 TWOOPI = 6.3661977236758134307553505349005744813784E-1Q;\n-static const __float128 zero = 0.0Q;\n+static const __float128 zero = 0;\n \n /* J0(x) = 1 - x^2/4 + x^2 x^2 R(x^2)\n    Peak relative error 3.4e-37\n@@ -683,21 +683,21 @@ j0q (__float128 x)\n       if (x != x)\n \treturn x + x;\n       else\n-\treturn 0.0Q;\n+\treturn 0;\n     }\n-  if (x == 0.0Q)\n-    return 1.0Q;\n+  if (x == 0)\n+    return 1;\n \n   xx = fabsq (x);\n-  if (xx <= 2.0Q)\n+  if (xx <= 2)\n     {\n       if (xx < 0x1p-57Q)\n-\treturn 1.0Q;\n+\treturn 1;\n       /* 0 <= x <= 2 */\n       z = xx * xx;\n       p = z * z * neval (z, J0_2N, NJ0_2N) / deval (z, J0_2D, NJ0_2D);\n       p -= 0.25Q * z;\n-      p += 1.0Q;\n+      p += 1;\n       return p;\n     }\n \n@@ -711,7 +711,7 @@ j0q (__float128 x)\n   sincosq (xx, &s, &c);\n   ss = s - c;\n   cc = s + c;\n-  if (xx <= FLT128_MAX / 2.0Q)\n+  if (xx <= FLT128_MAX / 2)\n     {\n       z = -cosq (xx + xx);\n       if ((s * c) < 0)\n@@ -723,7 +723,7 @@ j0q (__float128 x)\n   if (xx > 0x1p256Q)\n     return ONEOSQPI * cc / sqrtq (xx);\n \n-  xinv = 1.0Q / xx;\n+  xinv = 1 / xx;\n   z = xinv * xinv;\n   if (xinv <= 0.25)\n     {\n@@ -781,19 +781,20 @@ j0q (__float128 x)\n \t  q = neval (z, Q2_2r3N, NQ2_2r3N) / deval (z, Q2_2r3D, NQ2_2r3D);\n \t}\n     }\n-  p = 1.0Q + z * p;\n+  p = 1 + z * p;\n   q = z * xinv * q;\n   q = q - 0.125Q * xinv;\n   z = ONEOSQPI * (p * cc - q * ss) / sqrtq (xx);\n   return z;\n }\n \n \n+\n /* Y0(x) = 2/pi * log(x) * J0(x) + R(x^2)\n    Peak absolute error 1.7e-36 (relative where Y0 > 1)\n    0 <= x <= 2   */\n #define NY0_2N 7\n-static __float128 Y0_2N[NY0_2N + 1] = {\n+static const __float128 Y0_2N[NY0_2N + 1] = {\n  -1.062023609591350692692296993537002558155E19Q,\n   2.542000883190248639104127452714966858866E19Q,\n  -1.984190771278515324281415820316054696545E18Q,\n@@ -804,7 +805,7 @@ static __float128 Y0_2N[NY0_2N + 1] = {\n   8.230845651379566339707130644134372793322E6Q,\n };\n #define NY0_2D 7\n-static __float128 Y0_2D[NY0_2D + 1] = {\n+static const __float128 Y0_2D[NY0_2D + 1] = {\n   1.438972634353286978700329883122253752192E20Q,\n   1.856409101981569254247700169486907405500E18Q,\n   1.219693352678218589553725579802986255614E16Q,\n@@ -821,22 +822,22 @@ static const __float128 U0 = -7.3804295108687225274343927948483016310862e-02Q;\n /* Bessel function of the second kind, order zero.  */\n \n __float128\n-y0q (__float128 x)\n+ y0q(__float128 x)\n {\n   __float128 xx, xinv, z, p, q, c, s, cc, ss;\n \n   if (! finiteq (x))\n     return 1 / (x + x * x);\n-  if (x <= 0.0Q)\n+  if (x <= 0)\n     {\n-      if (x < 0.0Q)\n+      if (x < 0)\n \treturn (zero / (zero * x));\n       return -1 / zero; /* -inf and divide by zero exception.  */\n     }\n   xx = fabsq (x);\n   if (xx <= 0x1p-57)\n     return U0 + TWOOPI * logq (x);\n-  if (xx <= 2.0Q)\n+  if (xx <= 2)\n     {\n       /* 0 <= x <= 2 */\n       z = xx * xx;\n@@ -855,7 +856,7 @@ y0q (__float128 x)\n   sincosq (x, &s, &c);\n   ss = s - c;\n   cc = s + c;\n-  if (xx <= FLT128_MAX / 2.0Q)\n+  if (xx <= FLT128_MAX / 2)\n     {\n       z = -cosq (x + x);\n       if ((s * c) < 0)\n@@ -867,7 +868,7 @@ y0q (__float128 x)\n   if (xx > 0x1p256Q)\n     return ONEOSQPI * ss / sqrtq (x);\n \n-  xinv = 1.0Q / xx;\n+  xinv = 1 / xx;\n   z = xinv * xinv;\n   if (xinv <= 0.25)\n     {\n@@ -925,7 +926,7 @@ y0q (__float128 x)\n \t  q = neval (z, Q2_2r3N, NQ2_2r3N) / deval (z, Q2_2r3D, NQ2_2r3D);\n \t}\n     }\n-  p = 1.0Q + z * p;\n+  p = 1 + z * p;\n   q = z * xinv * q;\n   q = q - 0.125Q * xinv;\n   z = ONEOSQPI * (p * ss + q * cc) / sqrtq (x);"}, {"sha": "b18e881276b104a9c39258f582189d9d0cfa1d42", "filename": "libquadmath/math/j1q.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fj1q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fj1q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fj1q.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -6,9 +6,9 @@\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, j1q();\n+ * long double x, y, j1l();\n  *\n- * y = j1q( x );\n+ * y = j1l( x );\n  *\n  *\n  *\n@@ -52,9 +52,9 @@\n  *\n  * SYNOPSIS:\n  *\n- * __float128, y, y1q();\n+ * double x, y, y1l();\n  *\n- * y = y1q( x );\n+ * y = y1l( x );\n  *\n  *\n  *\n@@ -92,17 +92,16 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n-#include <errno.h>\n #include \"quadmath-imp.h\"\n \n /* 1 / sqrt(pi) */\n static const __float128 ONEOSQPI = 5.6418958354775628694807945156077258584405E-1Q;\n /* 2 / pi */\n static const __float128 TWOOPI = 6.3661977236758134307553505349005744813784E-1Q;\n-static const __float128 zero = 0.0Q;\n+static const __float128 zero = 0;\n \n /* J1(x) = .5x + x x^2 R(x^2)\n    Peak relative error 1.9e-35\n@@ -126,7 +125,7 @@ static const __float128 J0_2D[NJ0_2D + 1] = {\n   5.673775894803172808323058205986256928794E8Q,\n   1.080329960080981204840966206372671147224E6Q,\n   1.411951256636576283942477881535283304912E3Q,\n- /* 1.000000000000000000000000000000000000000E0Q */\n+ /* 1.000000000000000000000000000000000000000E0L */\n };\n \n /* J1(x)cosX + Y1(x)sinX = sqrt( 2/(pi x)) P1(x), P1(x) = 1 + 1/x^2 R(1/x^2),\n@@ -690,9 +689,9 @@ j1q (__float128 x)\n       if (x != x)\n \treturn x + x;\n       else\n-\treturn 0.0Q;\n+\treturn 0;\n     }\n-  if (x == 0.0Q)\n+  if (x == 0)\n     return x;\n   xx = fabsq (x);\n   if (xx <= 0x1p-58Q)\n@@ -703,7 +702,7 @@ j1q (__float128 x)\n \terrno = ERANGE;\n       return ret;\n     }\n-  if (xx <= 2.0Q)\n+  if (xx <= 2)\n     {\n       /* 0 <= x <= 2 */\n       z = xx * xx;\n@@ -723,7 +722,7 @@ j1q (__float128 x)\n   sincosq (xx, &s, &c);\n   ss = -s - c;\n   cc = s - c;\n-  if (xx <= FLT128_MAX / 2.0Q)\n+  if (xx <= FLT128_MAX / 2)\n     {\n       z = cosq (xx + xx);\n       if ((s * c) > 0)\n@@ -740,7 +739,7 @@ j1q (__float128 x)\n       return z;\n     }\n \n-  xinv = 1.0Q / xx;\n+  xinv = 1 / xx;\n   z = xinv * xinv;\n   if (xinv <= 0.25)\n     {\n@@ -798,7 +797,7 @@ j1q (__float128 x)\n \t  q = neval (z, Q2_2r3N, NQ2_2r3N) / deval (z, Q2_2r3D, NQ2_2r3D);\n \t}\n     }\n-  p = 1.0Q + z * p;\n+  p = 1 + z * p;\n   q = z * q;\n   q = q * xinv + 0.375Q * xinv;\n   z = ONEOSQPI * (p * cc - q * ss) / sqrtq (xx);\n@@ -808,11 +807,12 @@ j1q (__float128 x)\n }\n \n \n+\n /* Y1(x) = 2/pi * (log(x) * J1(x) - 1/x) + x R(x^2)\n    Peak relative error 6.2e-38\n    0 <= x <= 2   */\n #define NY0_2N 7\n-static __float128 Y0_2N[NY0_2N + 1] = {\n+static const __float128 Y0_2N[NY0_2N + 1] = {\n   -6.804415404830253804408698161694720833249E19Q,\n   1.805450517967019908027153056150465849237E19Q,\n   -8.065747497063694098810419456383006737312E17Q,\n@@ -823,7 +823,7 @@ static __float128 Y0_2N[NY0_2N + 1] = {\n   9.541172044989995856117187515882879304461E5Q,\n };\n #define NY0_2D 7\n-static __float128 Y0_2D[NY0_2D + 1] = {\n+static const __float128 Y0_2D[NY0_2D + 1] = {\n   3.470629591820267059538637461549677594549E20Q,\n   4.120796439009916326855848107545425217219E18Q,\n   2.477653371652018249749350657387030814542E16Q,\n@@ -845,9 +845,9 @@ y1q (__float128 x)\n \n   if (! finiteq (x))\n     return 1 / (x + x * x);\n-  if (x <= 0.0Q)\n+  if (x <= 0)\n     {\n-      if (x < 0.0Q)\n+      if (x < 0)\n \treturn (zero / (zero * x));\n       return -1 / zero; /* -inf and divide by zero exception.  */\n     }\n@@ -859,10 +859,10 @@ y1q (__float128 x)\n \terrno = ERANGE;\n       return z;\n     }\n-  if (xx <= 2.0Q)\n-   {\n+  if (xx <= 2)\n+    {\n       /* 0 <= x <= 2 */\n-      /* FIXME:  SET_RESTORE_ROUNDL (FE_TONEAREST);  */\n+      SET_RESTORE_ROUNDF128 (FE_TONEAREST);\n       z = xx * xx;\n       p = xx * neval (z, Y0_2N, NY0_2N) / deval (z, Y0_2D, NY0_2D);\n       p = -TWOOPI / xx + p;\n@@ -879,7 +879,7 @@ y1q (__float128 x)\n   sincosq (xx, &s, &c);\n   ss = -s - c;\n   cc = s - c;\n-  if (xx <= FLT128_MAX / 2.0Q)\n+  if (xx <= FLT128_MAX / 2)\n     {\n       z = cosq (xx + xx);\n       if ((s * c) > 0)\n@@ -891,7 +891,7 @@ y1q (__float128 x)\n   if (xx > 0x1p256Q)\n     return ONEOSQPI * ss / sqrtq (xx);\n \n-  xinv = 1.0Q / xx;\n+  xinv = 1 / xx;\n   z = xinv * xinv;\n   if (xinv <= 0.25)\n     {\n@@ -949,7 +949,7 @@ y1q (__float128 x)\n \t  q = neval (z, Q2_2r3N, NQ2_2r3N) / deval (z, Q2_2r3D, NQ2_2r3D);\n \t}\n     }\n-  p = 1.0Q + z * p;\n+  p = 1 + z * p;\n   q = z * q;\n   q = q * xinv + 0.375Q * xinv;\n   z = ONEOSQPI * (p * ss + q * cc) / sqrtq (xx);"}, {"sha": "ae318ac36b7d9d18acafd13e5e4ae4cf396e4345", "filename": "libquadmath/math/jnq.c", "status": "modified", "additions": 276, "deletions": 255, "changes": 531, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fjnq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fjnq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fjnq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -27,8 +27,8 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n /*\n  * __ieee754_jn(n, x), __ieee754_yn(n, x)\n@@ -56,22 +56,21 @@\n  *\n  */\n \n-#include <errno.h>\n #include \"quadmath-imp.h\"\n \n static const __float128\n   invsqrtpi = 5.6418958354775628694807945156077258584405E-1Q,\n-  two = 2.0e0Q,\n-  one = 1.0e0Q,\n-  zero = 0.0Q;\n+  two = 2,\n+  one = 1,\n+  zero = 0;\n \n \n __float128\n jnq (int n, __float128 x)\n {\n   uint32_t se;\n   int32_t i, ix, sgn;\n-  __float128 a, b, temp, di;\n+  __float128 a, b, temp, di, ret;\n   __float128 z, w;\n   ieee854_float128 u;\n \n@@ -104,201 +103,213 @@ jnq (int n, __float128 x)\n   sgn = (n & 1) & (se >> 31);\t/* even n -- 0, odd n -- sign(x) */\n   x = fabsq (x);\n \n-  if (x == 0.0Q || ix >= 0x7fff0000)\t/* if x is 0 or inf */\n-    b = zero;\n-  else if ((__float128) n <= x)\n-    {\n-      /* Safe to use J(n+1,x)=2n/x *J(n,x)-J(n-1,x) */\n-      if (ix >= 0x412D0000)\n-\t{\t\t\t/* x > 2**302 */\n+  {\n+    SET_RESTORE_ROUNDF128 (FE_TONEAREST);\n+    if (x == 0 || ix >= 0x7fff0000)\t/* if x is 0 or inf */\n+      return sgn == 1 ? -zero : zero;\n+    else if ((__float128) n <= x)\n+      {\n+\t/* Safe to use J(n+1,x)=2n/x *J(n,x)-J(n-1,x) */\n+\tif (ix >= 0x412D0000)\n+\t  {\t\t\t/* x > 2**302 */\n \n-\t  /* ??? Could use an expansion for large x here.  */\n+\t    /* ??? Could use an expansion for large x here.  */\n \n-\t  /* (x >> n**2)\n-\t   *      Jn(x) = cos(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n-\t   *      Yn(x) = sin(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n-\t   *      Let s=sin(x), c=cos(x),\n-\t   *          xn=x-(2n+1)*pi/4, sqt2 = sqrt(2),then\n-\t   *\n-\t   *             n    sin(xn)*sqt2    cos(xn)*sqt2\n-\t   *          ----------------------------------\n-\t   *             0     s-c             c+s\n-\t   *             1    -s-c            -c+s\n-\t   *             2    -s+c            -c-s\n-\t   *             3     s+c             c-s\n-\t   */\n-\t  __float128 s;\n-\t  __float128 c;\n-\t  sincosq (x, &s, &c);\n-\t  switch (n & 3)\n-\t    {\n-\t    case 0:\n-\t      temp = c + s;\n-\t      break;\n-\t    case 1:\n-\t      temp = -c + s;\n-\t      break;\n-\t    case 2:\n-\t      temp = -c - s;\n-\t      break;\n-\t    case 3:\n-\t      temp = c - s;\n-\t      break;\n-\t    }\n-\t  b = invsqrtpi * temp / sqrtq (x);\n-\t}\n-      else\n-\t{\n-\t  a = j0q (x);\n-\t  b = j1q (x);\n-\t  for (i = 1; i < n; i++)\n-\t    {\n-\t      temp = b;\n-\t      b = b * ((__float128) (i + i) / x) - a;\t/* avoid underflow */\n-\t      a = temp;\n-\t    }\n-\t}\n-    }\n-  else\n-    {\n-      if (ix < 0x3fc60000)\n-\t{\t\t\t/* x < 2**-57 */\n-\t  /* x is tiny, return the first Taylor expansion of J(n,x)\n-\t   * J(n,x) = 1/n!*(x/2)^n  - ...\n-\t   */\n-\t  if (n >= 400)\t\t/* underflow, result < 10^-4952 */\n-\t    b = zero;\n-\t  else\n-\t    {\n-\t      temp = x * 0.5;\n-\t      b = temp;\n-\t      for (a = one, i = 2; i <= n; i++)\n-\t\t{\n-\t\t  a *= (__float128) i;\t/* a = n! */\n-\t\t  b *= temp;\t/* b = (x/2)^n */\n-\t\t}\n-\t      b = b / a;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  /* use backward recurrence */\n-\t  /*                      x      x^2      x^2\n-\t   *  J(n,x)/J(n-1,x) =  ----   ------   ------   .....\n-\t   *                      2n  - 2(n+1) - 2(n+2)\n-\t   *\n-\t   *                      1      1        1\n-\t   *  (for large x)   =  ----  ------   ------   .....\n-\t   *                      2n   2(n+1)   2(n+2)\n-\t   *                      -- - ------ - ------ -\n-\t   *                       x     x         x\n-\t   *\n-\t   * Let w = 2n/x and h=2/x, then the above quotient\n-\t   * is equal to the continued fraction:\n-\t   *                  1\n-\t   *      = -----------------------\n-\t   *                     1\n-\t   *         w - -----------------\n-\t   *                        1\n-\t   *              w+h - ---------\n-\t   *                     w+2h - ...\n-\t   *\n-\t   * To determine how many terms needed, let\n-\t   * Q(0) = w, Q(1) = w(w+h) - 1,\n-\t   * Q(k) = (w+k*h)*Q(k-1) - Q(k-2),\n-\t   * When Q(k) > 1e4      good for single\n-\t   * When Q(k) > 1e9      good for double\n-\t   * When Q(k) > 1e17     good for quadruple\n-\t   */\n-\t  /* determine k */\n-\t  __float128 t, v;\n-\t  __float128 q0, q1, h, tmp;\n-\t  int32_t k, m;\n-\t  w = (n + n) / (__float128) x;\n-\t  h = 2.0Q / (__float128) x;\n-\t  q0 = w;\n-\t  z = w + h;\n-\t  q1 = w * z - 1.0Q;\n-\t  k = 1;\n-\t  while (q1 < 1.0e17Q)\n-\t    {\n-\t      k += 1;\n-\t      z += h;\n-\t      tmp = z * q1 - q0;\n-\t      q0 = q1;\n-\t      q1 = tmp;\n-\t    }\n-\t  m = n + n;\n-\t  for (t = zero, i = 2 * (n + k); i >= m; i -= 2)\n-\t    t = one / (i / x - t);\n-\t  a = t;\n-\t  b = one;\n-\t  /*  estimate log((2/x)^n*n!) = n*log(2/x)+n*ln(n)\n-\t   *  Hence, if n*(log(2n/x)) > ...\n-\t   *  single 8.8722839355e+01\n-\t   *  double 7.09782712893383973096e+02\n-\t   *  __float128 1.1356523406294143949491931077970765006170e+04\n-\t   *  then recurrent value may overflow and the result is\n-\t   *  likely underflow to zero\n-\t   */\n-\t  tmp = n;\n-\t  v = two / x;\n-\t  tmp = tmp * logq (fabsq (v * tmp));\n+\t    /* (x >> n**2)\n+\t     *      Jn(x) = cos(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n+\t     *      Yn(x) = sin(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n+\t     *      Let s=sin(x), c=cos(x),\n+\t     *          xn=x-(2n+1)*pi/4, sqt2 = sqrt(2),then\n+\t     *\n+\t     *             n    sin(xn)*sqt2    cos(xn)*sqt2\n+\t     *          ----------------------------------\n+\t     *             0     s-c             c+s\n+\t     *             1    -s-c            -c+s\n+\t     *             2    -s+c            -c-s\n+\t     *             3     s+c             c-s\n+\t     */\n+\t    __float128 s;\n+\t    __float128 c;\n+\t    sincosq (x, &s, &c);\n+\t    switch (n & 3)\n+\t      {\n+\t      case 0:\n+\t\ttemp = c + s;\n+\t\tbreak;\n+\t      case 1:\n+\t\ttemp = -c + s;\n+\t\tbreak;\n+\t      case 2:\n+\t\ttemp = -c - s;\n+\t\tbreak;\n+\t      case 3:\n+\t\ttemp = c - s;\n+\t\tbreak;\n+\t      }\n+\t    b = invsqrtpi * temp / sqrtq (x);\n+\t  }\n+\telse\n+\t  {\n+\t    a = j0q (x);\n+\t    b = j1q (x);\n+\t    for (i = 1; i < n; i++)\n+\t      {\n+\t\ttemp = b;\n+\t\tb = b * ((__float128) (i + i) / x) - a;\t/* avoid underflow */\n+\t\ta = temp;\n+\t      }\n+\t  }\n+      }\n+    else\n+      {\n+\tif (ix < 0x3fc60000)\n+\t  {\t\t\t/* x < 2**-57 */\n+\t    /* x is tiny, return the first Taylor expansion of J(n,x)\n+\t     * J(n,x) = 1/n!*(x/2)^n  - ...\n+\t     */\n+\t    if (n >= 400)\t\t/* underflow, result < 10^-4952 */\n+\t      b = zero;\n+\t    else\n+\t      {\n+\t\ttemp = x * 0.5;\n+\t\tb = temp;\n+\t\tfor (a = one, i = 2; i <= n; i++)\n+\t\t  {\n+\t\t    a *= (__float128) i;\t/* a = n! */\n+\t\t    b *= temp;\t/* b = (x/2)^n */\n+\t\t  }\n+\t\tb = b / a;\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    /* use backward recurrence */\n+\t    /*                      x      x^2      x^2\n+\t     *  J(n,x)/J(n-1,x) =  ----   ------   ------   .....\n+\t     *                      2n  - 2(n+1) - 2(n+2)\n+\t     *\n+\t     *                      1      1        1\n+\t     *  (for large x)   =  ----  ------   ------   .....\n+\t     *                      2n   2(n+1)   2(n+2)\n+\t     *                      -- - ------ - ------ -\n+\t     *                       x     x         x\n+\t     *\n+\t     * Let w = 2n/x and h=2/x, then the above quotient\n+\t     * is equal to the continued fraction:\n+\t     *                  1\n+\t     *      = -----------------------\n+\t     *                     1\n+\t     *         w - -----------------\n+\t     *                        1\n+\t     *              w+h - ---------\n+\t     *                     w+2h - ...\n+\t     *\n+\t     * To determine how many terms needed, let\n+\t     * Q(0) = w, Q(1) = w(w+h) - 1,\n+\t     * Q(k) = (w+k*h)*Q(k-1) - Q(k-2),\n+\t     * When Q(k) > 1e4      good for single\n+\t     * When Q(k) > 1e9      good for double\n+\t     * When Q(k) > 1e17     good for quadruple\n+\t     */\n+\t    /* determine k */\n+\t    __float128 t, v;\n+\t    __float128 q0, q1, h, tmp;\n+\t    int32_t k, m;\n+\t    w = (n + n) / (__float128) x;\n+\t    h = 2 / (__float128) x;\n+\t    q0 = w;\n+\t    z = w + h;\n+\t    q1 = w * z - 1;\n+\t    k = 1;\n+\t    while (q1 < 1.0e17Q)\n+\t      {\n+\t\tk += 1;\n+\t\tz += h;\n+\t\ttmp = z * q1 - q0;\n+\t\tq0 = q1;\n+\t\tq1 = tmp;\n+\t      }\n+\t    m = n + n;\n+\t    for (t = zero, i = 2 * (n + k); i >= m; i -= 2)\n+\t      t = one / (i / x - t);\n+\t    a = t;\n+\t    b = one;\n+\t    /*  estimate log((2/x)^n*n!) = n*log(2/x)+n*ln(n)\n+\t     *  Hence, if n*(log(2n/x)) > ...\n+\t     *  single 8.8722839355e+01\n+\t     *  double 7.09782712893383973096e+02\n+\t     *  long double 1.1356523406294143949491931077970765006170e+04\n+\t     *  then recurrent value may overflow and the result is\n+\t     *  likely underflow to zero\n+\t     */\n+\t    tmp = n;\n+\t    v = two / x;\n+\t    tmp = tmp * logq (fabsq (v * tmp));\n \n-\t  if (tmp < 1.1356523406294143949491931077970765006170e+04Q)\n-\t    {\n-\t      for (i = n - 1, di = (__float128) (i + i); i > 0; i--)\n-\t\t{\n-\t\t  temp = b;\n-\t\t  b *= di;\n-\t\t  b = b / x - a;\n-\t\t  a = temp;\n-\t\t  di -= two;\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      for (i = n - 1, di = (__float128) (i + i); i > 0; i--)\n-\t\t{\n-\t\t  temp = b;\n-\t\t  b *= di;\n-\t\t  b = b / x - a;\n-\t\t  a = temp;\n-\t\t  di -= two;\n-\t\t  /* scale b to avoid spurious overflow */\n-\t\t  if (b > 1e100Q)\n-\t\t    {\n-\t\t      a /= b;\n-\t\t      t /= b;\n-\t\t      b = one;\n-\t\t    }\n-\t\t}\n-\t    }\n-\t  /* j0() and j1() suffer enormous loss of precision at and\n-\t   * near zero; however, we know that their zero points never\n-\t   * coincide, so just choose the one further away from zero.\n-\t   */\n-\t  z = j0q (x);\n-\t  w = j1q (x);\n-\t  if (fabsq (z) >= fabsq (w))\n-\t    b = (t * z / b);\n-\t  else\n-\t    b = (t * w / a);\n-\t}\n+\t    if (tmp < 1.1356523406294143949491931077970765006170e+04Q)\n+\t      {\n+\t\tfor (i = n - 1, di = (__float128) (i + i); i > 0; i--)\n+\t\t  {\n+\t\t    temp = b;\n+\t\t    b *= di;\n+\t\t    b = b / x - a;\n+\t\t    a = temp;\n+\t\t    di -= two;\n+\t\t  }\n+\t      }\n+\t    else\n+\t      {\n+\t\tfor (i = n - 1, di = (__float128) (i + i); i > 0; i--)\n+\t\t  {\n+\t\t    temp = b;\n+\t\t    b *= di;\n+\t\t    b = b / x - a;\n+\t\t    a = temp;\n+\t\t    di -= two;\n+\t\t    /* scale b to avoid spurious overflow */\n+\t\t    if (b > 1e100Q)\n+\t\t      {\n+\t\t\ta /= b;\n+\t\t\tt /= b;\n+\t\t\tb = one;\n+\t\t      }\n+\t\t  }\n+\t      }\n+\t    /* j0() and j1() suffer enormous loss of precision at and\n+\t     * near zero; however, we know that their zero points never\n+\t     * coincide, so just choose the one further away from zero.\n+\t     */\n+\t    z = j0q (x);\n+\t    w = j1q (x);\n+\t    if (fabsq (z) >= fabsq (w))\n+\t      b = (t * z / b);\n+\t    else\n+\t      b = (t * w / a);\n+\t  }\n+      }\n+    if (sgn == 1)\n+      ret = -b;\n+    else\n+      ret = b;\n+  }\n+  if (ret == 0)\n+    {\n+      ret = copysignq (FLT128_MIN, ret) * FLT128_MIN;\n+      errno = ERANGE;\n     }\n-  if (sgn == 1)\n-    return -b;\n   else\n-    return b;\n+    math_check_force_underflow (ret);\n+  return ret;\n }\n \n+\n __float128\n ynq (int n, __float128 x)\n {\n   uint32_t se;\n   int32_t i, ix;\n   int32_t sign;\n-  __float128 a, b, temp;\n+  __float128 a, b, temp, ret;\n   ieee854_float128 u;\n \n   u.value = x;\n@@ -311,10 +322,10 @@ ynq (int n, __float128 x)\n       if ((u.words32.w0 & 0xffff) | u.words32.w1 | u.words32.w2 | u.words32.w3)\n \treturn x + x;\n     }\n-  if (x <= 0.0Q)\n+  if (x <= 0)\n     {\n-      if (x == 0.0Q)\n-\treturn -HUGE_VALQ + x;\n+      if (x == 0)\n+\treturn ((n < 0 && (n & 1) != 0) ? 1 : -1) / 0.0Q;\n       if (se & 0x80000000)\n \treturn zero / (zero * x);\n     }\n@@ -326,69 +337,79 @@ ynq (int n, __float128 x)\n     }\n   if (n == 0)\n     return (y0q (x));\n-  if (n == 1)\n-    return (sign * y1q (x));\n-  if (ix >= 0x7fff0000)\n-    return zero;\n-  if (ix >= 0x412D0000)\n-    {\t\t\t\t/* x > 2**302 */\n+  {\n+    SET_RESTORE_ROUNDF128 (FE_TONEAREST);\n+    if (n == 1)\n+      {\n+\tret = sign * y1q (x);\n+\tgoto out;\n+      }\n+    if (ix >= 0x7fff0000)\n+      return zero;\n+    if (ix >= 0x412D0000)\n+      {\t\t\t\t/* x > 2**302 */\n \n-      /* ??? See comment above on the possible futility of this.  */\n+\t/* ??? See comment above on the possible futility of this.  */\n \n-      /* (x >> n**2)\n-       *      Jn(x) = cos(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n-       *      Yn(x) = sin(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n-       *      Let s=sin(x), c=cos(x),\n-       *          xn=x-(2n+1)*pi/4, sqt2 = sqrt(2),then\n-       *\n-       *             n    sin(xn)*sqt2    cos(xn)*sqt2\n-       *          ----------------------------------\n-       *             0     s-c             c+s\n-       *             1    -s-c            -c+s\n-       *             2    -s+c            -c-s\n-       *             3     s+c             c-s\n-       */\n-      __float128 s;\n-      __float128 c;\n-      sincosq (x, &s, &c);\n-      switch (n & 3)\n-\t{\n-\tcase 0:\n-\t  temp = s - c;\n-\t  break;\n-\tcase 1:\n-\t  temp = -s - c;\n-\t  break;\n-\tcase 2:\n-\t  temp = -s + c;\n-\t  break;\n-\tcase 3:\n-\t  temp = s + c;\n-\t  break;\n-\t}\n-      b = invsqrtpi * temp / sqrtq (x);\n-    }\n-  else\n-    {\n-      a = y0q (x);\n-      b = y1q (x);\n-      /* quit if b is -inf */\n-      u.value = b;\n-      se = u.words32.w0 & 0xffff0000;\n-      for (i = 1; i < n && se != 0xffff0000; i++)\n-\t{\n-\t  temp = b;\n-\t  b = ((__float128) (i + i) / x) * b - a;\n-\t  u.value = b;\n-\t  se = u.words32.w0 & 0xffff0000;\n-\t  a = temp;\n-\t}\n-    }\n-  /* If B is +-Inf, set up errno accordingly.  */\n-  if (! finiteq (b))\n-    errno = ERANGE;\n-  if (sign > 0)\n-    return b;\n-  else\n-    return -b;\n+\t/* (x >> n**2)\n+\t *      Jn(x) = cos(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n+\t *      Yn(x) = sin(x-(2n+1)*pi/4)*sqrt(2/x*pi)\n+\t *      Let s=sin(x), c=cos(x),\n+\t *          xn=x-(2n+1)*pi/4, sqt2 = sqrt(2),then\n+\t *\n+\t *             n    sin(xn)*sqt2    cos(xn)*sqt2\n+\t *          ----------------------------------\n+\t *             0     s-c             c+s\n+\t *             1    -s-c            -c+s\n+\t *             2    -s+c            -c-s\n+\t *             3     s+c             c-s\n+\t */\n+\t__float128 s;\n+\t__float128 c;\n+\tsincosq (x, &s, &c);\n+\tswitch (n & 3)\n+\t  {\n+\t  case 0:\n+\t    temp = s - c;\n+\t    break;\n+\t  case 1:\n+\t    temp = -s - c;\n+\t    break;\n+\t  case 2:\n+\t    temp = -s + c;\n+\t    break;\n+\t  case 3:\n+\t    temp = s + c;\n+\t    break;\n+\t  }\n+\tb = invsqrtpi * temp / sqrtq (x);\n+      }\n+    else\n+      {\n+\ta = y0q (x);\n+\tb = y1q (x);\n+\t/* quit if b is -inf */\n+\tu.value = b;\n+\tse = u.words32.w0 & 0xffff0000;\n+\tfor (i = 1; i < n && se != 0xffff0000; i++)\n+\t  {\n+\t    temp = b;\n+\t    b = ((__float128) (i + i) / x) * b - a;\n+\t    u.value = b;\n+\t    se = u.words32.w0 & 0xffff0000;\n+\t    a = temp;\n+\t  }\n+      }\n+    /* If B is +-Inf, set up errno accordingly.  */\n+    if (! finiteq (b))\n+      errno = ERANGE;\n+    if (sign > 0)\n+      ret = b;\n+    else\n+      ret = -b;\n+  }\n+ out:\n+  if (isinfq (ret))\n+    ret = copysignq (FLT128_MAX, ret) * FLT128_MAX;\n+  return ret;\n }"}, {"sha": "73e63f1a9cea4230f803601c46207dd5ca131034", "filename": "libquadmath/math/ldexpq.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fldexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fldexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fldexpq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,8 +1,4 @@\n-/* ldexpq.c -- __float128 version of s_ldexp.c.\n- * Conversion to long double by Ulrich Drepper,\n- * Cygnus Support, drepper@cygnus.com.\n- */\n-\n+/* @(#)s_ldexp.c 5.1 93/09/24 */\n /*\n  * ====================================================\n  * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n@@ -14,14 +10,23 @@\n  * ====================================================\n  */\n \n-#include <errno.h>\n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: s_ldexp.c,v 1.6 1995/05/10 20:47:40 jtc Exp $\";\n+#endif\n+\n #include \"quadmath-imp.h\"\n \n __float128\n ldexpq (__float128 value, int exp)\n {\n-  if(!finiteq(value)||value==0.0Q) return value;\n-  value = scalbnq(value,exp);\n-  if(!finiteq(value)||value==0.0Q) errno = ERANGE;\n-  return value;\n+\tif(!finiteq(value)||value==0) return value + value;\n+\tvalue = scalbnq(value,exp);\n+\tif(!finiteq(value)||value==0) errno = ERANGE;\n+\treturn value;\n }\n+\n+\n+\n+\n+\n+/* Note, versioning issues are punted to ldbl-opt in this case.  */"}, {"sha": "f127fe3ee7e684d584f1fabfa27d3e2dba233ae5", "filename": "libquadmath/math/lgammaq.c", "status": "modified", "additions": 80, "deletions": 71, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flgammaq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flgammaq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flgammaq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -6,7 +6,7 @@\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, lgammal();\n+ * long double x, y, lgammal();\n  * extern int sgngam;\n  *\n  * y = lgammal(x);\n@@ -18,7 +18,7 @@\n  * Returns the base e (2.718...) logarithm of the absolute\n  * value of the gamma function of the argument.\n  * The sign (+1 or -1) of the gamma function is returned in a\n- * global (extern) variable named signgam.\n+ * global (extern) variable named sgngam.\n  *\n  * The positive domain is partitioned into numerous segments for approximation.\n  * For x > 10,\n@@ -65,20 +65,26 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n-\n #ifdef HAVE_MATH_H_SIGNGAM\n-#include <math.h>  /* For POSIX's extern int signgam.  */\n+# include <math.h>\n+#endif\n+__float128\n+lgammaq (__float128 x)\n+{\n+#ifndef HAVE_MATH_H_SIGNGAM\n+  int signgam;\n #endif\n+  return __quadmath_lgammaq_r (x, &signgam);\n+}\n \n-static const __float128 PIQ = 3.1415926535897932384626433832795028841972E0Q;\n+static const __float128 PIL = 3.1415926535897932384626433832795028841972E0Q;\n static const __float128 MAXLGM = 1.0485738685148938358098967157129705071571E4928Q;\n-static const __float128 one = 1.0Q;\n-static const __float128 zero = 0.0Q;\n-static const __float128 huge = 1.0e4000Q;\n+static const __float128 one = 1;\n+static const __float128 huge = FLT128_MAX;\n \n /* log gamma(x) = ( x - 0.5 ) * log(x) - x + LS2PI + 1/x P(1/x^2)\n    1/x <= 0.0741 (x >= 13.495...)\n@@ -131,7 +137,7 @@ static const __float128 RD13[NRD13 + 1] =\n   1.178186288833066430952276702931512870676E7Q,\n   1.519928623743264797939103740132278337476E5Q,\n   7.989298844938119228411117593338850892311E2Q\n- /* 1.0E0Q */\n+ /* 1.0E0L */\n };\n \n \n@@ -163,7 +169,7 @@ static const __float128 RD12[NRD12 + 1] =\n   9.236680081763754597872713592701048455890E6Q,\n   1.292246897881650919242713651166596478850E5Q,\n   7.366532445427159272584194816076600211171E2Q\n- /* 1.0E0Q */\n+ /* 1.0E0L */\n };\n \n \n@@ -195,7 +201,7 @@ static const __float128 RD11[NRD11 + 1] =\n   7.089478198662651683977290023829391596481E6Q,\n   1.083246385105903533237139380509590158658E5Q,\n   6.744420991491385145885727942219463243597E2Q\n- /* 1.0E0Q */\n+ /* 1.0E0L */\n };\n \n \n@@ -228,7 +234,7 @@ static const __float128 RD10[NRD10 + 1] =\n   -1.632090155573373286153427982504851867131E8Q,\n   -1.483575879240631280658077826889223634921E6Q,\n   -4.002806669713232271615885826373550502510E3Q\n- /* 1.0E0Q */\n+ /* 1.0E0L */\n };\n \n \n@@ -261,7 +267,7 @@ static const __float128 RD9[NRD9 + 1] =\n   -1.164573656694603024184768200787835094317E8Q,\n   -1.177343939483908678474886454113163527909E6Q,\n   -3.529391059783109732159524500029157638736E3Q\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -295,7 +301,7 @@ static const __float128 RD8[NRD8 + 1] =\n   5.790862854275238129848491555068073485086E6Q,\n   9.305213264307921522842678835618803553589E4Q,\n   6.216974105861848386918949336819572333622E2Q\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -329,7 +335,7 @@ static const __float128 RD7[NRD7 + 1] =\n   3.845638971184305248268608902030718674691E6Q,\n   7.081730675423444975703917836972720495507E4Q,\n   5.423122582741398226693137276201344096370E2Q\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -364,7 +370,7 @@ static const __float128 RD6[NRD6 + 1] =\n   -6.564058379709759600836745035871373240904E7Q,\n   -7.861511116647120540275354855221373571536E5Q,\n   -2.821943442729620524365661338459579270561E3Q\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -400,7 +406,7 @@ static const __float128 RD5[NRD5 + 1] =\n   2.698552646016599923609773122139463150403E6Q,\n   5.526516251532464176412113632726150253215E4Q,\n   4.772343321713697385780533022595450486932E2Q\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -437,7 +443,7 @@ static const __float128 RD4[NRD4 + 1] =\n   -3.416703082301143192939774401370222822430E7Q,\n   -4.981791914177103793218433195857635265295E5Q,\n   -2.192507743896742751483055798411231453733E3Q\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -475,7 +481,7 @@ static const __float128 RD3[NRD3 + 1] =\n   -1.505316381525727713026364396635522516989E7Q,\n   -2.856327162923716881454613540575964890347E5Q,\n   -1.622140448015769906847567212766206894547E3Q\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -509,7 +515,7 @@ static const __float128 RD2r5[NRD2r5 + 1] =\n   -4.101991193844953082400035444146067511725E6Q,\n   -1.174082735875715802334430481065526664020E5Q,\n   -9.932840389994157592102947657277692978511E2Q\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -579,7 +585,7 @@ static const __float128 RD1r75[NRD1r75 + 1] =\n   -1.201296501404876774861190604303728810836E6Q,\n   -5.007966406976106636109459072523610273928E4Q,\n   -6.155817990560743422008969155276229018209E2Q\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -616,7 +622,7 @@ static const __float128 RD1r5[NRD1r5 + 1] =\n   5.741463295366557346748361781768833633256E4Q,\n   4.226404539738182992856094681115746692030E3Q,\n   1.316980975410327975566999780608618774469E2Q,\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -652,7 +658,7 @@ static const __float128 RD1r25[NRD1r25 + 1] =\n   3.822267399625696880571810137601310855419E4Q,\n   3.228463206479133236028576845538387620856E3Q,\n   1.152133170470059555646301189220117965514E2Q\n-  /* 1.0E0Q */\n+  /* 1.0E0L */\n };\n \n \n@@ -758,60 +764,61 @@ deval (__float128 x, const __float128 *p, int n)\n \n \n __float128\n-lgammaq (__float128 x)\n+__quadmath_lgammaq_r (__float128 x, int *signgamp)\n {\n   __float128 p, q, w, z, nx;\n   int i, nn;\n-#ifndef HAVE_MATH_H_SIGNGAM\n-  int signgam;\n-#endif\n \n-  signgam = 1;\n+  *signgamp = 1;\n \n   if (! finiteq (x))\n     return x * x;\n \n-  if (x == 0.0Q)\n+  if (x == 0)\n     {\n       if (signbitq (x))\n-\tsigngam = -1;\n+\t*signgamp = -1;\n     }\n \n-  if (x < 0.0Q)\n+  if (x < 0)\n     {\n+      if (x < -2 && x > -50)\n+\treturn __quadmath_lgamma_negq (x, signgamp);\n       q = -x;\n       p = floorq (q);\n       if (p == q)\n-\treturn (one / (p - p));\n-      i = p;\n-      if ((i & 1) == 0)\n-\tsigngam = -1;\n+\treturn (one / fabsq (p - p));\n+      __float128 halfp = p * 0.5Q;\n+      if (halfp == floorq (halfp))\n+\t*signgamp = -1;\n       else\n-\tsigngam = 1;\n+\t*signgamp = 1;\n+      if (q < 0x1p-120Q)\n+\treturn -logq (q);\n       z = q - p;\n       if (z > 0.5Q)\n \t{\n-\t  p += 1.0Q;\n+\t  p += 1;\n \t  z = p - q;\n \t}\n-      z = q * sinq (PIQ * z);\n-      if (z == 0.0Q)\n-\treturn (signgam * huge * huge);\n-      w = lgammaq (q);\n-      z = logq (PIQ / z) - w;\n+      z = q * sinq (PIL * z);\n+      w = __quadmath_lgammaq_r (q, &i);\n+      z = logq (PIL / z) - w;\n       return (z);\n     }\n \n   if (x < 13.5Q)\n     {\n-      p = 0.0Q;\n+      p = 0;\n       nx = floorq (x + 0.5Q);\n       nn = nx;\n       switch (nn)\n \t{\n \tcase 0:\n \t  /* log gamma (x + 1) = log(x) + log gamma(x) */\n-\t  if (x <= 0.125)\n+\t  if (x < 0x1p-120Q)\n+\t    return -logq (x);\n+\t  else if (x <= 0.125)\n \t    {\n \t      p = x * neval (x, RN1, NRN1) / deval (x, RD1, NRD1);\n \t    }\n@@ -824,7 +831,7 @@ lgammaq (__float128 x)\n \t    }\n \t  else if (x <= 0.625)\n \t    {\n-\t      z = x + (1.0Q - x0a);\n+\t      z = x + (1 - x0a);\n \t      z = z - x0b;\n \t      p = neval (z, RN1r5, NRN1r5) / deval (z, RD1r5, NRD1r5);\n \t      p = p * z * z;\n@@ -840,7 +847,7 @@ lgammaq (__float128 x)\n \t    }\n \t  else\n \t    {\n-\t      z = x - 1.0Q;\n+\t      z = x - 1;\n \t      p = z * neval (z, RN2, NRN2) / deval (z, RD2, NRD2);\n \t    }\n \t  p = p - logq (x);\n@@ -851,7 +858,7 @@ lgammaq (__float128 x)\n \t    {\n \t      if (x <= 0.625)\n \t\t{\n-\t\t  z = x + (1.0Q - x0a);\n+\t\t  z = x + (1 - x0a);\n \t\t  z = z - x0b;\n \t\t  p = neval (z, RN1r5, NRN1r5) / deval (z, RD1r5, NRD1r5);\n \t\t  p = p * z * z;\n@@ -868,21 +875,21 @@ lgammaq (__float128 x)\n \t\t}\n \t      else\n \t\t{\n-\t\t  z = x - 1.0Q;\n+\t\t  z = x - 1;\n \t\t  p = z * neval (z, RN2, NRN2) / deval (z, RD2, NRD2);\n \t\t}\n \t      p = p - logq (x);\n \t    }\n-\t  else if (x < 1.0Q)\n+\t  else if (x < 1)\n \t    {\n-\t      z = x - 1.0Q;\n+\t      z = x - 1;\n \t      p = z * neval (z, RNr9, NRNr9) / deval (z, RDr9, NRDr9);\n \t    }\n-\t  else if (x == 1.0Q)\n-\t    p = 0.0Q;\n+\t  else if (x == 1)\n+\t    p = 0;\n \t  else if (x <= 1.125Q)\n \t    {\n-\t      z = x - 1.0Q;\n+\t      z = x - 1;\n \t      p = z * neval (z, RN1, NRN1) / deval (z, RD1, NRD1);\n \t    }\n \t  else if (x <= 1.375)\n@@ -921,11 +928,11 @@ lgammaq (__float128 x)\n \t      p += lgam1r75b;\n \t      p += lgam1r75a;\n \t    }\n-\t  else if (x == 2.0Q)\n-\t    p = 0.0Q;\n+\t  else if (x == 2)\n+\t    p = 0;\n \t  else if (x < 2.375Q)\n \t    {\n-\t      z = x - 2.0Q;\n+\t      z = x - 2;\n \t      p = z * neval (z, RN2, NRN2) / deval (z, RD2, NRD2);\n \t    }\n \t  else\n@@ -947,78 +954,78 @@ lgammaq (__float128 x)\n \t    }\n \t  else\n \t    {\n-\t      z = x - 3.0Q;\n+\t      z = x - 3;\n \t      p = z * neval (z, RN3, NRN3) / deval (z, RD3, NRD3);\n \t      p += lgam3b;\n \t      p += lgam3a;\n \t    }\n \t  break;\n \n \tcase 4:\n-\t  z = x - 4.0Q;\n+\t  z = x - 4;\n \t  p = z * neval (z, RN4, NRN4) / deval (z, RD4, NRD4);\n \t  p += lgam4b;\n \t  p += lgam4a;\n \t  break;\n \n \tcase 5:\n-\t  z = x - 5.0Q;\n+\t  z = x - 5;\n \t  p = z * neval (z, RN5, NRN5) / deval (z, RD5, NRD5);\n \t  p += lgam5b;\n \t  p += lgam5a;\n \t  break;\n \n \tcase 6:\n-\t  z = x - 6.0Q;\n+\t  z = x - 6;\n \t  p = z * neval (z, RN6, NRN6) / deval (z, RD6, NRD6);\n \t  p += lgam6b;\n \t  p += lgam6a;\n \t  break;\n \n \tcase 7:\n-\t  z = x - 7.0Q;\n+\t  z = x - 7;\n \t  p = z * neval (z, RN7, NRN7) / deval (z, RD7, NRD7);\n \t  p += lgam7b;\n \t  p += lgam7a;\n \t  break;\n \n \tcase 8:\n-\t  z = x - 8.0Q;\n+\t  z = x - 8;\n \t  p = z * neval (z, RN8, NRN8) / deval (z, RD8, NRD8);\n \t  p += lgam8b;\n \t  p += lgam8a;\n \t  break;\n \n \tcase 9:\n-\t  z = x - 9.0Q;\n+\t  z = x - 9;\n \t  p = z * neval (z, RN9, NRN9) / deval (z, RD9, NRD9);\n \t  p += lgam9b;\n \t  p += lgam9a;\n \t  break;\n \n \tcase 10:\n-\t  z = x - 10.0Q;\n+\t  z = x - 10;\n \t  p = z * neval (z, RN10, NRN10) / deval (z, RD10, NRD10);\n \t  p += lgam10b;\n \t  p += lgam10a;\n \t  break;\n \n \tcase 11:\n-\t  z = x - 11.0Q;\n+\t  z = x - 11;\n \t  p = z * neval (z, RN11, NRN11) / deval (z, RD11, NRD11);\n \t  p += lgam11b;\n \t  p += lgam11a;\n \t  break;\n \n \tcase 12:\n-\t  z = x - 12.0Q;\n+\t  z = x - 12;\n \t  p = z * neval (z, RN12, NRN12) / deval (z, RD12, NRD12);\n \t  p += lgam12b;\n \t  p += lgam12a;\n \t  break;\n \n \tcase 13:\n-\t  z = x - 13.0Q;\n+\t  z = x - 13;\n \t  p = z * neval (z, RN13, NRN13) / deval (z, RD13, NRD13);\n \t  p += lgam13b;\n \t  p += lgam13a;\n@@ -1028,14 +1035,16 @@ lgammaq (__float128 x)\n     }\n \n   if (x > MAXLGM)\n-    return (signgam * huge * huge);\n+    return (*signgamp * huge * huge);\n \n+  if (x > 0x1p120Q)\n+    return x * (logq (x) - 1);\n   q = ls2pi - x;\n   q = (x - 0.5Q) * logq (x) + q;\n   if (x > 1.0e18Q)\n     return (q);\n \n-  p = 1.0Q / (x * x);\n+  p = 1 / (x * x);\n   q += neval (p, RASY, NRASY) / x;\n   return (q);\n }"}, {"sha": "227d529aa97fa54c6e68721844866934b33f5db2", "filename": "libquadmath/math/lgammaq_neg.c", "status": "added", "additions": 549, "deletions": 0, "changes": 549, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flgammaq_neg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flgammaq_neg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flgammaq_neg.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -0,0 +1,549 @@\n+/* lgammal expanding around zeros.\n+   Copyright (C) 2015-2018 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128 lgamma_zeros[][2] =\n+  {\n+    { -0x2.74ff92c01f0d82abec9f315f1a08p+0Q, 0xe.d3ccb7fb2658634a2b9f6b2ba81p-116Q },\n+    { -0x2.bf6821437b20197995a4b4641eaep+0Q, -0xb.f4b00b4829f961e428533e6ad048p-116Q },\n+    { -0x3.24c1b793cb35efb8be699ad3d9bap+0Q, -0x6.5454cb7fac60e3f16d9d7840c2ep-116Q },\n+    { -0x3.f48e2a8f85fca170d4561291236cp+0Q, -0xc.320a4887d1cb4c711828a75d5758p-116Q },\n+    { -0x4.0a139e16656030c39f0b0de18114p+0Q, 0x1.53e84029416e1242006b2b3d1cfp-112Q },\n+    { -0x4.fdd5de9bbabf3510d0aa40769884p+0Q, -0x1.01d7d78125286f78d1e501f14966p-112Q },\n+    { -0x5.021a95fc2db6432a4c56e595394cp+0Q, -0x1.ecc6af0430d4fe5746fa7233356fp-112Q },\n+    { -0x5.ffa4bd647d0357dd4ed62cbd31ecp+0Q, -0x1.f8e3f8e5deba2d67dbd70dd96ce1p-112Q },\n+    { -0x6.005ac9625f233b607c2d96d16384p+0Q, -0x1.cb86ac569340cf1e5f24df7aab7bp-112Q },\n+    { -0x6.fff2fddae1bbff3d626b65c23fd4p+0Q, 0x1.e0bfcff5c457ebcf4d3ad9674167p-112Q },\n+    { -0x7.000cff7b7f87adf4482dcdb98784p+0Q, 0x1.54d99e35a74d6407b80292df199fp-112Q },\n+    { -0x7.fffe5fe05673c3ca9e82b522b0ccp+0Q, 0x1.62d177c832e0eb42c2faffd1b145p-112Q },\n+    { -0x8.0001a01459fc9f60cb3cec1cec88p+0Q, 0x2.8998835ac7277f7bcef67c47f188p-112Q },\n+    { -0x8.ffffd1c425e80ffc864e95749258p+0Q, -0x1.e7e20210e7f81cf781b44e9d2b02p-112Q },\n+    { -0x9.00002e3bb47d86d6d843fedc352p+0Q, 0x2.14852f613a16291751d2ab751f7ep-112Q },\n+    { -0x9.fffffb606bdfdcd062ae77a50548p+0Q, 0x3.962d1490cc2e8f031c7007eaa1ap-116Q },\n+    { -0xa.0000049f93bb9927b45d95e1544p+0Q, -0x1.e03086db9146a9287bd4f2172d5ap-112Q },\n+    { -0xa.ffffff9466e9f1b36dacd2adbd18p+0Q, -0xd.05a4e458062f3f95345a4d9c9b6p-116Q },\n+    { -0xb.0000006b9915315d965a6ffea41p+0Q, 0x1.b415c6fff233e7b7fdc3a094246fp-112Q },\n+    { -0xb.fffffff7089387387de41acc3d4p+0Q, 0x3.687427c6373bd74a10306e10a28ep-112Q },\n+    { -0xc.00000008f76c7731567c0f0250fp+0Q, -0x3.87920df5675833859190eb128ef6p-112Q },\n+    { -0xc.ffffffff4f6dcf617f97a5ffc758p+0Q, 0x2.ab72d76f32eaee2d1a42ed515d3ap-116Q },\n+    { -0xd.00000000b092309c06683dd1b9p+0Q, -0x3.e3700857a15c19ac5a611de9688ap-112Q },\n+    { -0xd.fffffffff36345ab9e184a3e09dp+0Q, -0x1.176dc48e47f62d917973dd44e553p-112Q },\n+    { -0xe.000000000c9cba545e94e75ec57p+0Q, -0x1.8f753e2501e757a17cf2ecbeeb89p-112Q },\n+    { -0xe.ffffffffff28c060c6604ef3037p+0Q, -0x1.f89d37357c9e3dc17c6c6e63becap-112Q },\n+    { -0xf.0000000000d73f9f399bd0e420f8p+0Q, -0x5.e9ee31b0b890744fc0e3fbc01048p-116Q },\n+    { -0xf.fffffffffff28c060c6621f512e8p+0Q, 0xd.1b2eec9d960bd9adc5be5f5fa5p-116Q },\n+    { -0x1.000000000000d73f9f399da1424cp+4Q, 0x6.c46e0e88305d2800f0e414c506a8p-116Q },\n+    { -0x1.0ffffffffffff3569c47e7a93e1cp+4Q, -0x4.6a08a2e008a998ebabb8087efa2cp-112Q },\n+    { -0x1.1000000000000ca963b818568887p+4Q, -0x6.ca5a3a64ec15db0a95caf2c9ffb4p-112Q },\n+    { -0x1.1fffffffffffff4bec3ce234132dp+4Q, -0x8.b2b726187c841cb92cd5221e444p-116Q },\n+    { -0x1.20000000000000b413c31dcbeca5p+4Q, 0x3.c4d005344b6cd0e7231120294abcp-112Q },\n+    { -0x1.2ffffffffffffff685b25cbf5f54p+4Q, -0x5.ced932e38485f7dd296b8fa41448p-112Q },\n+    { -0x1.30000000000000097a4da340a0acp+4Q, 0x7.e484e0e0ffe38d406ebebe112f88p-112Q },\n+    { -0x1.3fffffffffffffff86af516ff7f7p+4Q, -0x6.bd67e720d57854502b7db75e1718p-112Q },\n+    { -0x1.40000000000000007950ae900809p+4Q, 0x6.bec33375cac025d9c073168c5d9p-112Q },\n+    { -0x1.4ffffffffffffffffa391c4248c3p+4Q, 0x5.c63022b62b5484ba346524db607p-112Q },\n+    { -0x1.500000000000000005c6e3bdb73dp+4Q, -0x5.c62f55ed5322b2685c5e9a51e6a8p-112Q },\n+    { -0x1.5fffffffffffffffffbcc71a492p+4Q, -0x1.eb5aeb96c74d7ad25e060528fb5p-112Q },\n+    { -0x1.6000000000000000004338e5b6ep+4Q, 0x1.eb5aec04b2f2eb663e4e3d8a018cp-112Q },\n+    { -0x1.6ffffffffffffffffffd13c97d9dp+4Q, -0x3.8fcc4d08d6fe5aa56ab04307ce7ep-112Q },\n+    { -0x1.70000000000000000002ec368263p+4Q, 0x3.8fcc4d090cee2f5d0b69a99c353cp-112Q },\n+    { -0x1.7fffffffffffffffffffe0d30fe7p+4Q, 0x7.2f577cca4b4c8cb1dc14001ac5ecp-112Q },\n+    { -0x1.800000000000000000001f2cf019p+4Q, -0x7.2f577cca4b3442e35f0040b3b9e8p-112Q },\n+    { -0x1.8ffffffffffffffffffffec0c332p+4Q, -0x2.e9a0572b1bb5b95f346a92d67a6p-112Q },\n+    { -0x1.90000000000000000000013f3ccep+4Q, 0x2.e9a0572b1bb5c371ddb3561705ap-112Q },\n+    { -0x1.9ffffffffffffffffffffff3b8bdp+4Q, -0x1.cad8d32e386fd783e97296d63dcbp-116Q },\n+    { -0x1.a0000000000000000000000c4743p+4Q, 0x1.cad8d32e386fd7c1ab8c1fe34c0ep-116Q },\n+    { -0x1.afffffffffffffffffffffff8b95p+4Q, -0x3.8f48cc5737d5979c39db806c5406p-112Q },\n+    { -0x1.b00000000000000000000000746bp+4Q, 0x3.8f48cc5737d5979c3b3a6bda06f6p-112Q },\n+    { -0x1.bffffffffffffffffffffffffbd8p+4Q, 0x6.2898d42174dcf171470d8c8c6028p-112Q },\n+    { -0x1.c000000000000000000000000428p+4Q, -0x6.2898d42174dcf171470d18ba412cp-112Q },\n+    { -0x1.cfffffffffffffffffffffffffdbp+4Q, -0x4.c0ce9794ea50a839e311320bde94p-112Q },\n+    { -0x1.d000000000000000000000000025p+4Q, 0x4.c0ce9794ea50a839e311322f7cf8p-112Q },\n+    { -0x1.dfffffffffffffffffffffffffffp+4Q, 0x3.932c5047d60e60caded4c298a174p-112Q },\n+    { -0x1.e000000000000000000000000001p+4Q, -0x3.932c5047d60e60caded4c298973ap-112Q },\n+    { -0x1.fp+4Q, 0xa.1a6973c1fade2170f7237d35fe3p-116Q },\n+    { -0x1.fp+4Q, -0xa.1a6973c1fade2170f7237d35fe08p-116Q },\n+    { -0x2p+4Q, 0x5.0d34b9e0fd6f10b87b91be9aff1p-120Q },\n+    { -0x2p+4Q, -0x5.0d34b9e0fd6f10b87b91be9aff0cp-120Q },\n+    { -0x2.1p+4Q, 0x2.73024a9ba1aa36a7059bff52e844p-124Q },\n+    { -0x2.1p+4Q, -0x2.73024a9ba1aa36a7059bff52e844p-124Q },\n+    { -0x2.2p+4Q, 0x1.2710231c0fd7a13f8a2b4af9d6b7p-128Q },\n+    { -0x2.2p+4Q, -0x1.2710231c0fd7a13f8a2b4af9d6b7p-128Q },\n+    { -0x2.3p+4Q, 0x8.6e2ce38b6c8f9419e3fad3f0312p-136Q },\n+    { -0x2.3p+4Q, -0x8.6e2ce38b6c8f9419e3fad3f0312p-136Q },\n+    { -0x2.4p+4Q, 0x3.bf30652185952560d71a254e4eb8p-140Q },\n+    { -0x2.4p+4Q, -0x3.bf30652185952560d71a254e4eb8p-140Q },\n+    { -0x2.5p+4Q, 0x1.9ec8d1c94e85af4c78b15c3d89d3p-144Q },\n+    { -0x2.5p+4Q, -0x1.9ec8d1c94e85af4c78b15c3d89d3p-144Q },\n+    { -0x2.6p+4Q, 0xa.ea565ce061d57489e9b85276274p-152Q },\n+    { -0x2.6p+4Q, -0xa.ea565ce061d57489e9b85276274p-152Q },\n+    { -0x2.7p+4Q, 0x4.7a6512692eb37804111dabad30ecp-156Q },\n+    { -0x2.7p+4Q, -0x4.7a6512692eb37804111dabad30ecp-156Q },\n+    { -0x2.8p+4Q, 0x1.ca8ed42a12ae3001a07244abad2bp-160Q },\n+    { -0x2.8p+4Q, -0x1.ca8ed42a12ae3001a07244abad2bp-160Q },\n+    { -0x2.9p+4Q, 0xb.2f30e1ce812063f12e7e8d8d96e8p-168Q },\n+    { -0x2.9p+4Q, -0xb.2f30e1ce812063f12e7e8d8d96e8p-168Q },\n+    { -0x2.ap+4Q, 0x4.42bd49d4c37a0db136489772e428p-172Q },\n+    { -0x2.ap+4Q, -0x4.42bd49d4c37a0db136489772e428p-172Q },\n+    { -0x2.bp+4Q, 0x1.95db45257e5122dcbae56def372p-176Q },\n+    { -0x2.bp+4Q, -0x1.95db45257e5122dcbae56def372p-176Q },\n+    { -0x2.cp+4Q, 0x9.3958d81ff63527ecf993f3fb6f48p-184Q },\n+    { -0x2.cp+4Q, -0x9.3958d81ff63527ecf993f3fb6f48p-184Q },\n+    { -0x2.dp+4Q, 0x3.47970e4440c8f1c058bd238c9958p-188Q },\n+    { -0x2.dp+4Q, -0x3.47970e4440c8f1c058bd238c9958p-188Q },\n+    { -0x2.ep+4Q, 0x1.240804f65951062ca46e4f25c608p-192Q },\n+    { -0x2.ep+4Q, -0x1.240804f65951062ca46e4f25c608p-192Q },\n+    { -0x2.fp+4Q, 0x6.36a382849fae6de2d15362d8a394p-200Q },\n+    { -0x2.fp+4Q, -0x6.36a382849fae6de2d15362d8a394p-200Q },\n+    { -0x3p+4Q, 0x2.123680d6dfe4cf4b9b1bcb9d8bdcp-204Q },\n+    { -0x3p+4Q, -0x2.123680d6dfe4cf4b9b1bcb9d8bdcp-204Q },\n+    { -0x3.1p+4Q, 0xa.d21786ff5842eca51fea0870919p-212Q },\n+    { -0x3.1p+4Q, -0xa.d21786ff5842eca51fea0870919p-212Q },\n+    { -0x3.2p+4Q, 0x3.766dedc259af040be140a68a6c04p-216Q },\n+  };\n+\n+static const __float128 e_hi = 0x2.b7e151628aed2a6abf7158809cf4p+0Q;\n+static const __float128 e_lo = 0xf.3c762e7160f38b4da56a784d9048p-116Q;\n+\n+\n+/* Coefficients B_2k / 2k(2k-1) of x^-(2k-1) in Stirling's\n+   approximation to lgamma function.  */\n+\n+static const __float128 lgamma_coeff[] =\n+  {\n+    0x1.5555555555555555555555555555p-4Q,\n+    -0xb.60b60b60b60b60b60b60b60b60b8p-12Q,\n+    0x3.4034034034034034034034034034p-12Q,\n+    -0x2.7027027027027027027027027028p-12Q,\n+    0x3.72a3c5631fe46ae1d4e700dca8f2p-12Q,\n+    -0x7.daac36664f1f207daac36664f1f4p-12Q,\n+    0x1.a41a41a41a41a41a41a41a41a41ap-8Q,\n+    -0x7.90a1b2c3d4e5f708192a3b4c5d7p-8Q,\n+    0x2.dfd2c703c0cfff430edfd2c703cp-4Q,\n+    -0x1.6476701181f39edbdb9ce625987dp+0Q,\n+    0xd.672219167002d3a7a9c886459cp+0Q,\n+    -0x9.cd9292e6660d55b3f712eb9e07c8p+4Q,\n+    0x8.911a740da740da740da740da741p+8Q,\n+    -0x8.d0cc570e255bf59ff6eec24b49p+12Q,\n+    0xa.8d1044d3708d1c219ee4fdc446ap+16Q,\n+    -0xe.8844d8a169abbc406169abbc406p+20Q,\n+    0x1.6d29a0f6433b79890cede62433b8p+28Q,\n+    -0x2.88a233b3c8cddaba9809357125d8p+32Q,\n+    0x5.0dde6f27500939a85c40939a85c4p+36Q,\n+    -0xb.4005bde03d4642a243581714af68p+40Q,\n+    0x1.bc8cd6f8f1f755c78753cdb5d5c9p+48Q,\n+    -0x4.bbebb143bb94de5a0284fa7ec424p+52Q,\n+    0xe.2e1337f5af0bed90b6b0a352d4fp+56Q,\n+    -0x2.e78250162b62405ad3e4bfe61b38p+64Q,\n+    0xa.5f7eef9e71ac7c80326ab4cc8bfp+68Q,\n+    -0x2.83be0395e550213369924971b21ap+76Q,\n+    0xa.8ebfe48da17dd999790760b0cep+80Q,\n+  };\n+\n+#define NCOEFF (sizeof (lgamma_coeff) / sizeof (lgamma_coeff[0]))\n+\n+/* Polynomial approximations to (|gamma(x)|-1)(x-n)/(x-x0), where n is\n+   the integer end-point of the half-integer interval containing x and\n+   x0 is the zero of lgamma in that half-integer interval.  Each\n+   polynomial is expressed in terms of x-xm, where xm is the midpoint\n+   of the interval for which the polynomial applies.  */\n+\n+static const __float128 poly_coeff[] =\n+  {\n+    /* Interval [-2.125, -2] (polynomial degree 23).  */\n+    -0x1.0b71c5c54d42eb6c17f30b7aa8f5p+0Q,\n+    -0xc.73a1dc05f34951602554c6d7506p-4Q,\n+    -0x1.ec841408528b51473e6c425ee5ffp-4Q,\n+    -0xe.37c9da26fc3c9a3c1844c8c7f1cp-4Q,\n+    -0x1.03cd87c519305703b021fa33f827p-4Q,\n+    -0xe.ae9ada65e09aa7f1c75216128f58p-4Q,\n+    0x9.b11855a4864b5731cf85736015a8p-8Q,\n+    -0xe.f28c133e697a95c28607c9701dep-4Q,\n+    0x2.6ec14a1c586a72a7cc33ee569d6ap-4Q,\n+    -0xf.57cab973e14464a262fc24723c38p-4Q,\n+    0x4.5b0fc25f16e52997b2886bbae808p-4Q,\n+    -0xf.f50e59f1a9b56e76e988dac9ccf8p-4Q,\n+    0x6.5f5eae15e9a93369e1d85146c6fcp-4Q,\n+    -0x1.0d2422daac459e33e0994325ed23p+0Q,\n+    0x8.82000a0e7401fb1117a0e6606928p-4Q,\n+    -0x1.1f492f178a3f1b19f58a2ca68e55p+0Q,\n+    0xa.cb545f949899a04c160b19389abp-4Q,\n+    -0x1.36165a1b155ba3db3d1b77caf498p+0Q,\n+    0xd.44c5d5576f74302e5cf79e183eep-4Q,\n+    -0x1.51f22e0cdd33d3d481e326c02f3ep+0Q,\n+    0xf.f73a349c08244ac389c007779bfp-4Q,\n+    -0x1.73317bf626156ba716747c4ca866p+0Q,\n+    0x1.379c3c97b9bc71e1c1c4802dd657p+0Q,\n+    -0x1.a72a351c54f902d483052000f5dfp+0Q,\n+    /* Interval [-2.25, -2.125] (polynomial degree 24).  */\n+    -0xf.2930890d7d675a80c36afb0fd5e8p-4Q,\n+    -0xc.a5cfde054eab5c6770daeca577f8p-4Q,\n+    0x3.9c9e0fdebb07cdf89c61d41c9238p-4Q,\n+    -0x1.02a5ad35605fcf4af65a6dbacb84p+0Q,\n+    0x9.6e9b1185bb48be9de1918e00a2e8p-4Q,\n+    -0x1.4d8332f3cfbfa116fd611e9ce90dp+0Q,\n+    0x1.1c0c8cb4d9f4b1d490e1a41fae4dp+0Q,\n+    -0x1.c9a6f5ae9130cd0299e293a42714p+0Q,\n+    0x1.d7e9307fd58a2ea997f29573a112p+0Q,\n+    -0x2.921cb3473d96178ca2a11d2a8d46p+0Q,\n+    0x2.e8d59113b6f3409ff8db226e9988p+0Q,\n+    -0x3.cbab931625a1ae2b26756817f264p+0Q,\n+    0x4.7d9f0f05d5296d18663ca003912p+0Q,\n+    -0x5.ade9cba12a14ea485667b7135bbp+0Q,\n+    0x6.dc983a5da74fb48e767b7fec0a3p+0Q,\n+    -0x8.8d9ed454ae31d9e138dd8ee0d1a8p+0Q,\n+    0xa.6fa099d4e7c202e0c0fd6ed8492p+0Q,\n+    -0xc.ebc552a8090a0f0115e92d4ebbc8p+0Q,\n+    0xf.d695e4772c0d829b53fba9ca5568p+0Q,\n+    -0x1.38c32ae38e5e9eb79b2a4c5570a9p+4Q,\n+    0x1.8035145646cfab49306d0999a51bp+4Q,\n+    -0x1.d930adbb03dd342a4c2a8c4e1af6p+4Q,\n+    0x2.45c2edb1b4943ddb3686cd9c6524p+4Q,\n+    -0x2.e818ebbfafe2f916fa21abf7756p+4Q,\n+    0x3.9804ce51d0fb9a430a711fd7307p+4Q,\n+    /* Interval [-2.375, -2.25] (polynomial degree 25).  */\n+    -0xd.7d28d505d6181218a25f31d5e45p-4Q,\n+    -0xe.69649a3040985140cdf946829fap-4Q,\n+    0xb.0d74a2827d053a8d44595012484p-4Q,\n+    -0x1.924b0922853617cac181afbc08ddp+0Q,\n+    0x1.d49b12bccf0a568582e2d3c410f3p+0Q,\n+    -0x3.0898bb7d8c4093e636279c791244p+0Q,\n+    0x4.207a6cac711cb53868e8a5057eep+0Q,\n+    -0x6.39ee63ea4fb1dcab0c9144bf3ddcp+0Q,\n+    0x8.e2e2556a797b649bf3f53bd26718p+0Q,\n+    -0xd.0e83ac82552ef12af508589e7a8p+0Q,\n+    0x1.2e4525e0ce6670563c6484a82b05p+4Q,\n+    -0x1.b8e350d6a8f2b222fa390a57c23dp+4Q,\n+    0x2.805cd69b919087d8a80295892c2cp+4Q,\n+    -0x3.a42585424a1b7e64c71743ab014p+4Q,\n+    0x5.4b4f409f98de49f7bfb03c05f984p+4Q,\n+    -0x7.b3c5827fbe934bc820d6832fb9fcp+4Q,\n+    0xb.33b7b90cc96c425526e0d0866e7p+4Q,\n+    -0x1.04b77047ac4f59ee3775ca10df0dp+8Q,\n+    0x1.7b366f5e94a34f41386eac086313p+8Q,\n+    -0x2.2797338429385c9849ca6355bfc2p+8Q,\n+    0x3.225273cf92a27c9aac1b35511256p+8Q,\n+    -0x4.8f078aa48afe6cb3a4e89690f898p+8Q,\n+    0x6.9f311d7b6654fc1d0b5195141d04p+8Q,\n+    -0x9.a0c297b6b4621619ca9bacc48ed8p+8Q,\n+    0xe.ce1f06b6f90d92138232a76e4cap+8Q,\n+    -0x1.5b0e6806fa064daf011613e43b17p+12Q,\n+    /* Interval [-2.5, -2.375] (polynomial degree 27).  */\n+    -0xb.74ea1bcfff94b2c01afba9daa7d8p-4Q,\n+    -0x1.2a82bd590c37538cab143308de4dp+0Q,\n+    0x1.88020f828b966fec66b8649fd6fcp+0Q,\n+    -0x3.32279f040eb694970e9db24863dcp+0Q,\n+    0x5.57ac82517767e68a721005853864p+0Q,\n+    -0x9.c2aedcfe22833de43834a0a6cc4p+0Q,\n+    0x1.12c132f1f5577f99e1a0ed3538e1p+4Q,\n+    -0x1.ea94e26628a3de3597f7bb55a948p+4Q,\n+    0x3.66b4ac4fa582f58b59f96b2f7c7p+4Q,\n+    -0x6.0cf746a9cf4cba8c39afcc73fc84p+4Q,\n+    0xa.c102ef2c20d75a342197df7fedf8p+4Q,\n+    -0x1.31ebff06e8f14626782df58db3b6p+8Q,\n+    0x2.1fd6f0c0e710994e059b9dbdb1fep+8Q,\n+    -0x3.c6d76040407f447f8b5074f07706p+8Q,\n+    0x6.b6d18e0d8feb4c2ef5af6a40ed18p+8Q,\n+    -0xb.efaf542c529f91e34217f24ae6a8p+8Q,\n+    0x1.53852d873210e7070f5d9eb2296p+12Q,\n+    -0x2.5b977c0ddc6d540717173ac29fc8p+12Q,\n+    0x4.310d452ae05100eff1e02343a724p+12Q,\n+    -0x7.73a5d8f20c4f986a7dd1912b2968p+12Q,\n+    0xd.3f5ea2484f3fca15eab1f4d1a218p+12Q,\n+    -0x1.78d18aac156d1d93a2ffe7e08d3fp+16Q,\n+    0x2.9df49ca75e5b567f5ea3e47106cp+16Q,\n+    -0x4.a7149af8961a08aa7c3233b5bb94p+16Q,\n+    0x8.3db10ffa742c707c25197d989798p+16Q,\n+    -0xe.a26d6dd023cadd02041a049ec368p+16Q,\n+    0x1.c825d90514e7c57c7fa5316f947cp+20Q,\n+    -0x3.34bb81e5a0952df8ca1abdc6684cp+20Q,\n+    /* Interval [-2.625, -2.5] (polynomial degree 28).  */\n+    -0x3.d10108c27ebafad533c20eac32bp-4Q,\n+    0x1.cd557caff7d2b2085f41dbec5106p+0Q,\n+    0x3.819b4856d399520dad9776ea2cacp+0Q,\n+    0x6.8505cbad03dc34c5e42e8b12eb78p+0Q,\n+    0xb.c1b2e653a9e38f82b399c94e7f08p+0Q,\n+    0x1.50a53a38f148138105124df65419p+4Q,\n+    0x2.57ae00cbe5232cbeeed34d89727ap+4Q,\n+    0x4.2b156301b8604db85a601544bfp+4Q,\n+    0x7.6989ed23ca3ca7579b3462592b5cp+4Q,\n+    0xd.2dd2976557939517f831f5552cc8p+4Q,\n+    0x1.76e1c3430eb860969bce40cd494p+8Q,\n+    0x2.9a77bf5488742466db3a2c7c1ec6p+8Q,\n+    0x4.a0d62ed7266e8eb36f725a8ebcep+8Q,\n+    0x8.3a6184dd3021067df2f8b91e99c8p+8Q,\n+    0xe.a0ade1538245bf55d39d7e436b1p+8Q,\n+    0x1.a01359fae8617b5826dd74428e9p+12Q,\n+    0x2.e3b0a32caae77251169acaca1ad4p+12Q,\n+    0x5.2301257c81589f62b38fb5993ee8p+12Q,\n+    0x9.21c9275db253d4e719b73b18cb9p+12Q,\n+    0x1.03c104bc96141cda3f3fa4b112bcp+16Q,\n+    0x1.cdc8ed65119196a08b0c78f1445p+16Q,\n+    0x3.34f31d2eaacf34382cdb0073572ap+16Q,\n+    0x5.b37628cadf12bf0000907d0ef294p+16Q,\n+    0xa.22d8b332c0b1e6a616f425dfe5ap+16Q,\n+    0x1.205b01444804c3ff922cd78b4c42p+20Q,\n+    0x1.fe8f0cea9d1e0ff25be2470b4318p+20Q,\n+    0x3.8872aebeb368399aee02b39340aep+20Q,\n+    0x6.ebd560d351e84e26a4381f5b293cp+20Q,\n+    0xc.c3644d094b0dae2fbcbf682cd428p+20Q,\n+    /* Interval [-2.75, -2.625] (polynomial degree 26).  */\n+    -0x6.b5d252a56e8a75458a27ed1c2dd4p-4Q,\n+    0x1.28d60383da3ac721aed3c5794da9p+0Q,\n+    0x1.db6513ada8a66ea77d87d9a8827bp+0Q,\n+    0x2.e217118f9d348a27f7506a707e6ep+0Q,\n+    0x4.450112c5cbf725a0fb9802396c9p+0Q,\n+    0x6.4af99151eae7810a75df2a0303c4p+0Q,\n+    0x9.2db598b4a97a7f69aeef32aec758p+0Q,\n+    0xd.62bef9c22471f5ee47ea1b9c0b5p+0Q,\n+    0x1.379f294e412bd62328326d4222f9p+4Q,\n+    0x1.c5827349d8865f1e8825c37c31c6p+4Q,\n+    0x2.93a7e7a75b7568cc8cbe8c016c12p+4Q,\n+    0x3.bf9bb882afe57edb383d41879d3ap+4Q,\n+    0x5.73c737828cee095c43a5566731c8p+4Q,\n+    0x7.ee4653493a7f81e0442062b3823cp+4Q,\n+    0xb.891c6b83fc8b55bd973b5d962d6p+4Q,\n+    0x1.0c775d7de3bf9b246c0208e0207ep+8Q,\n+    0x1.867ee43ec4bd4f4fd56abc05110ap+8Q,\n+    0x2.37fe9ba6695821e9822d8c8af0a6p+8Q,\n+    0x3.3a2c667e37c942f182cd3223a936p+8Q,\n+    0x4.b1b500eb59f3f782c7ccec88754p+8Q,\n+    0x6.d3efd3b65b3d0d8488d30b79fa4cp+8Q,\n+    0x9.ee8224e65bed5ced8b75eaec609p+8Q,\n+    0xe.72416e510cca77d53fc615c1f3dp+8Q,\n+    0x1.4fb538b0a2dfe567a8904b7e0445p+12Q,\n+    0x1.e7f56a9266cf525a5b8cf4cb76cep+12Q,\n+    0x2.f0365c983f68c597ee49d099cce8p+12Q,\n+    0x4.53aa229e1b9f5b5e59625265951p+12Q,\n+    /* Interval [-2.875, -2.75] (polynomial degree 24).  */\n+    -0x8.a41b1e4f36ff88dc820815607d68p-4Q,\n+    0xc.da87d3b69dc0f2f9c6f368b8ca1p-4Q,\n+    0x1.1474ad5c36158a7bea04fd2f98c6p+0Q,\n+    0x1.761ecb90c555df6555b7dba955b6p+0Q,\n+    0x1.d279bff9ae291caf6c4b4bcb3202p+0Q,\n+    0x2.4e5d00559a6e2b9b5d7fe1f6689cp+0Q,\n+    0x2.d57545a75cee8743ae2b17bc8d24p+0Q,\n+    0x3.8514eee3aac88b89bec2307021bap+0Q,\n+    0x4.5235e3b6e1891ffeb87fed9f8a24p+0Q,\n+    0x5.562acdb10eef3c9a773b3e27a864p+0Q,\n+    0x6.8ec8965c76efe03c26bff60b1194p+0Q,\n+    0x8.15251aca144877af32658399f9b8p+0Q,\n+    0x9.f08d56aba174d844138af782c0f8p+0Q,\n+    0xc.3dbbeda2679e8a1346ccc3f6da88p+0Q,\n+    0xf.0f5bfd5eacc26db308ffa0556fa8p+0Q,\n+    0x1.28a6ccd84476fbc713d6bab49ac9p+4Q,\n+    0x1.6d0a3ae2a3b1c8ff400641a3a21fp+4Q,\n+    0x1.c15701b28637f87acfb6a91d33b5p+4Q,\n+    0x2.28fbe0eccf472089b017651ca55ep+4Q,\n+    0x2.a8a453004f6e8ffaacd1603bc3dp+4Q,\n+    0x3.45ae4d9e1e7cd1a5dba0e4ec7f6cp+4Q,\n+    0x4.065fbfacb7fad3e473cb577a61e8p+4Q,\n+    0x4.f3d1473020927acac1944734a39p+4Q,\n+    0x6.54bb091245815a36fb74e314dd18p+4Q,\n+    0x7.d7f445129f7fb6c055e582d3f6ep+4Q,\n+    /* Interval [-3, -2.875] (polynomial degree 23).  */\n+    -0xa.046d667e468f3e44dcae1afcc648p-4Q,\n+    0x9.70b88dcc006c214d8d996fdf5ccp-4Q,\n+    0xa.a8a39421c86d3ff24931a0929fp-4Q,\n+    0xd.2f4d1363f324da2b357c8b6ec94p-4Q,\n+    0xd.ca9aa1a3a5c00de11bf60499a97p-4Q,\n+    0xf.cf09c31eeb52a45dfa7ebe3778dp-4Q,\n+    0x1.04b133a39ed8a09691205660468bp+0Q,\n+    0x1.22b547a06edda944fcb12fd9b5ecp+0Q,\n+    0x1.2c57fce7db86a91df09602d344b3p+0Q,\n+    0x1.4aade4894708f84795212fe257eep+0Q,\n+    0x1.579c8b7b67ec4afed5b28c8bf787p+0Q,\n+    0x1.776820e7fc80ae5284239733078ap+0Q,\n+    0x1.883ab28c7301fde4ca6b8ec26ec8p+0Q,\n+    0x1.aa2ef6e1ae52eb42c9ee83b206e3p+0Q,\n+    0x1.bf4ad50f0a9a9311300cf0c51ee7p+0Q,\n+    0x1.e40206e0e96b1da463814dde0d09p+0Q,\n+    0x1.fdcbcffef3a21b29719c2bd9feb1p+0Q,\n+    0x2.25e2e8948939c4d42cf108fae4bep+0Q,\n+    0x2.44ce14d2b59c1c0e6bf2cfa81018p+0Q,\n+    0x2.70ee80bbd0387162be4861c43622p+0Q,\n+    0x2.954b64d2c2ebf3489b949c74476p+0Q,\n+    0x2.c616e133a811c1c9446105208656p+0Q,\n+    0x3.05a69dfe1a9ba1079f90fcf26bd4p+0Q,\n+    0x3.410d2ad16a0506de29736e6aafdap+0Q,\n+  };\n+\n+static const size_t poly_deg[] =\n+  {\n+    23,\n+    24,\n+    25,\n+    27,\n+    28,\n+    26,\n+    24,\n+    23,\n+  };\n+\n+static const size_t poly_end[] =\n+  {\n+    23,\n+    48,\n+    74,\n+    102,\n+    131,\n+    158,\n+    183,\n+    207,\n+  };\n+\n+/* Compute sin (pi * X) for -0.25 <= X <= 0.5.  */\n+\n+static __float128\n+lg_sinpi (__float128 x)\n+{\n+  if (x <= 0.25Q)\n+    return sinq (M_PIq * x);\n+  else\n+    return cosq (M_PIq * (0.5Q - x));\n+}\n+\n+/* Compute cos (pi * X) for -0.25 <= X <= 0.5.  */\n+\n+static __float128\n+lg_cospi (__float128 x)\n+{\n+  if (x <= 0.25Q)\n+    return cosq (M_PIq * x);\n+  else\n+    return sinq (M_PIq * (0.5Q - x));\n+}\n+\n+/* Compute cot (pi * X) for -0.25 <= X <= 0.5.  */\n+\n+static __float128\n+lg_cotpi (__float128 x)\n+{\n+  return lg_cospi (x) / lg_sinpi (x);\n+}\n+\n+/* Compute lgamma of a negative argument -50 < X < -2, setting\n+   *SIGNGAMP accordingly.  */\n+\n+__float128\n+__quadmath_lgamma_negq (__float128 x, int *signgamp)\n+{\n+  /* Determine the half-integer region X lies in, handle exact\n+     integers and determine the sign of the result.  */\n+  int i = floorq (-2 * x);\n+  if ((i & 1) == 0 && i == -2 * x)\n+    return 1.0Q / 0.0Q;\n+  __float128 xn = ((i & 1) == 0 ? -i / 2 : (-i - 1) / 2);\n+  i -= 4;\n+  *signgamp = ((i & 2) == 0 ? -1 : 1);\n+\n+  SET_RESTORE_ROUNDF128 (FE_TONEAREST);\n+\n+  /* Expand around the zero X0 = X0_HI + X0_LO.  */\n+  __float128 x0_hi = lgamma_zeros[i][0], x0_lo = lgamma_zeros[i][1];\n+  __float128 xdiff = x - x0_hi - x0_lo;\n+\n+  /* For arguments in the range -3 to -2, use polynomial\n+     approximations to an adjusted version of the gamma function.  */\n+  if (i < 2)\n+    {\n+      int j = floorq (-8 * x) - 16;\n+      __float128 xm = (-33 - 2 * j) * 0.0625Q;\n+      __float128 x_adj = x - xm;\n+      size_t deg = poly_deg[j];\n+      size_t end = poly_end[j];\n+      __float128 g = poly_coeff[end];\n+      for (size_t j = 1; j <= deg; j++)\n+\tg = g * x_adj + poly_coeff[end - j];\n+      return log1pq (g * xdiff / (x - xn));\n+    }\n+\n+  /* The result we want is log (sinpi (X0) / sinpi (X))\n+     + log (gamma (1 - X0) / gamma (1 - X)).  */\n+  __float128 x_idiff = fabsq (xn - x), x0_idiff = fabsq (xn - x0_hi - x0_lo);\n+  __float128 log_sinpi_ratio;\n+  if (x0_idiff < x_idiff * 0.5Q)\n+    /* Use log not log1p to avoid inaccuracy from log1p of arguments\n+       close to -1.  */\n+    log_sinpi_ratio = logq (lg_sinpi (x0_idiff)\n+\t\t\t\t      / lg_sinpi (x_idiff));\n+  else\n+    {\n+      /* Use log1p not log to avoid inaccuracy from log of arguments\n+\t close to 1.  X0DIFF2 has positive sign if X0 is further from\n+\t XN than X is from XN, negative sign otherwise.  */\n+      __float128 x0diff2 = ((i & 1) == 0 ? xdiff : -xdiff) * 0.5Q;\n+      __float128 sx0d2 = lg_sinpi (x0diff2);\n+      __float128 cx0d2 = lg_cospi (x0diff2);\n+      log_sinpi_ratio = log1pq (2 * sx0d2\n+\t\t\t\t  * (-sx0d2 + cx0d2 * lg_cotpi (x_idiff)));\n+    }\n+\n+  __float128 log_gamma_ratio;\n+  __float128 y0 = 1 - x0_hi;\n+  __float128 y0_eps = -x0_hi + (1 - y0) - x0_lo;\n+  __float128 y = 1 - x;\n+  __float128 y_eps = -x + (1 - y);\n+  /* We now wish to compute LOG_GAMMA_RATIO\n+     = log (gamma (Y0 + Y0_EPS) / gamma (Y + Y_EPS)).  XDIFF\n+     accurately approximates the difference Y0 + Y0_EPS - Y -\n+     Y_EPS.  Use Stirling's approximation.  First, we may need to\n+     adjust into the range where Stirling's approximation is\n+     sufficiently accurate.  */\n+  __float128 log_gamma_adj = 0;\n+  if (i < 20)\n+    {\n+      int n_up = (21 - i) / 2;\n+      __float128 ny0, ny0_eps, ny, ny_eps;\n+      ny0 = y0 + n_up;\n+      ny0_eps = y0 - (ny0 - n_up) + y0_eps;\n+      y0 = ny0;\n+      y0_eps = ny0_eps;\n+      ny = y + n_up;\n+      ny_eps = y - (ny - n_up) + y_eps;\n+      y = ny;\n+      y_eps = ny_eps;\n+      __float128 prodm1 = __quadmath_lgamma_productq (xdiff, y - n_up, y_eps, n_up);\n+      log_gamma_adj = -log1pq (prodm1);\n+    }\n+  __float128 log_gamma_high\n+    = (xdiff * log1pq ((y0 - e_hi - e_lo + y0_eps) / e_hi)\n+       + (y - 0.5Q + y_eps) * log1pq (xdiff / y) + log_gamma_adj);\n+  /* Compute the sum of (B_2k / 2k(2k-1))(Y0^-(2k-1) - Y^-(2k-1)).  */\n+  __float128 y0r = 1 / y0, yr = 1 / y;\n+  __float128 y0r2 = y0r * y0r, yr2 = yr * yr;\n+  __float128 rdiff = -xdiff / (y * y0);\n+  __float128 bterm[NCOEFF];\n+  __float128 dlast = rdiff, elast = rdiff * yr * (yr + y0r);\n+  bterm[0] = dlast * lgamma_coeff[0];\n+  for (size_t j = 1; j < NCOEFF; j++)\n+    {\n+      __float128 dnext = dlast * y0r2 + elast;\n+      __float128 enext = elast * yr2;\n+      bterm[j] = dnext * lgamma_coeff[j];\n+      dlast = dnext;\n+      elast = enext;\n+    }\n+  __float128 log_gamma_low = 0;\n+  for (size_t j = 0; j < NCOEFF; j++)\n+    log_gamma_low += bterm[NCOEFF - 1 - j];\n+  log_gamma_ratio = log_gamma_high + log_gamma_low;\n+\n+  return log_sinpi_ratio + log_gamma_ratio;\n+}"}, {"sha": "73091a8281e09d11b42cc71cf9ad52874169a8e6", "filename": "libquadmath/math/lgammaq_product.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flgammaq_product.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flgammaq_product.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flgammaq_product.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -0,0 +1,50 @@\n+/* Compute a product of 1 + (T/X), 1 + (T/(X+1)), ....\n+   Copyright (C) 2015-2018 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+/* Compute the product of 1 + (T / (X + X_EPS)), 1 + (T / (X + X_EPS +\n+   1)), ..., 1 + (T / (X + X_EPS + N - 1)), minus 1.  X is such that\n+   all the values X + 1, ..., X + N - 1 are exactly representable, and\n+   X_EPS / X is small enough that factors quadratic in it can be\n+   neglected.  */\n+\n+__float128\n+__quadmath_lgamma_productq (__float128 t, __float128 x, __float128 x_eps, int n)\n+{\n+  __float128 ret = 0, ret_eps = 0;\n+  for (int i = 0; i < n; i++)\n+    {\n+      __float128 xi = x + i;\n+      __float128 quot = t / xi;\n+      __float128 mhi, mlo;\n+      mul_splitq (&mhi, &mlo, quot, xi);\n+      __float128 quot_lo = (t - mhi - mlo) / xi - t * x_eps / (xi * xi);\n+      /* We want (1 + RET + RET_EPS) * (1 + QUOT + QUOT_LO) - 1.  */\n+      __float128 rhi, rlo;\n+      mul_splitq (&rhi, &rlo, ret, quot);\n+      __float128 rpq = ret + quot;\n+      __float128 rpq_eps = (ret - rpq) + quot;\n+      __float128 nret = rpq + rhi;\n+      __float128 nret_eps = (rpq - nret) + rhi;\n+      ret_eps += (rpq_eps + nret_eps + rlo + ret_eps * quot\n+\t\t  + quot_lo + quot_lo * (ret + ret_eps));\n+      ret = nret;\n+    }\n+  return ret + ret_eps;\n+}"}, {"sha": "5cc0a4461c301642e2d52f3013b78abe0cdc2f7e", "filename": "libquadmath/math/llrintq.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fllrintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fllrintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fllrintq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,6 +1,6 @@\n /* Round argument to nearest integral value according to current rounding\n    direction.\n-   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n@@ -16,9 +16,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n@@ -53,9 +52,7 @@ llrintq (__float128 x)\n \t  /* In the event of overflow we must raise the \"invalid\"\n \t     exception, but not \"inexact\".  */\n \t  t = nearbyintq (x);\n-#ifdef USE_FENV_H\n \t  feraiseexcept (t == LLONG_MAX ? FE_INEXACT : FE_INVALID);\n-#endif\n \t}\n       else\n #endif\n@@ -82,21 +79,21 @@ llrintq (__float128 x)\n \t unspecified.  */\n #if defined FE_INVALID || defined FE_INEXACT\n       if (x < (__float128) LLONG_MIN\n-\t  && x > (__float128) LLONG_MIN - 1.0Q)\n+\t  && x > (__float128) LLONG_MIN - 1)\n \t{\n \t  /* If truncation produces LLONG_MIN, the cast will not raise\n \t     the exception, but may raise \"inexact\".  */\n \t  t = nearbyintq (x);\n-#ifdef USE_FENV_H\n \t  feraiseexcept (t == LLONG_MIN ? FE_INEXACT : FE_INVALID);\n-#endif\n \t  return LLONG_MIN;\n \t}\n+      else if (FIX_FLT128_LLONG_CONVERT_OVERFLOW && x != (__float128) LLONG_MIN)\n+\t{\n+\t  feraiseexcept (FE_INVALID);\n+\t  return sx == 0 ? LLONG_MAX : LLONG_MIN;\n+\t}\n \n #endif\n-\n-      /* The number is too large.  It is left implementation defined\n-\t what happens.  */\n       return (long long int) x;\n     }\n "}, {"sha": "f22ad5a56c40a88ec33c93d0701dfdae86540893", "filename": "libquadmath/math/llroundq.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fllroundq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fllroundq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fllroundq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Round __float128 value to long long int.\n-   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+/* Round long double value to long long int.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n@@ -15,13 +15,11 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n long long int\n llroundq (__float128 x)\n {\n@@ -61,7 +59,7 @@ llroundq (__float128 x)\n \t  else\n \t    {\n \t      result = ((long long int) i0 << (j0 - 48)) | (j >> (112 - j0));\n-#if defined FE_INVALID && defined USE_FENV_H\n+#ifdef FE_INVALID\n \t      if (sign == 1 && result == LLONG_MIN)\n \t\t/* Rounding brought the value out of range.  */\n \t\tferaiseexcept (FE_INVALID);\n@@ -75,13 +73,18 @@ llroundq (__float128 x)\n \t FE_INVALID must be raised and the return value is\n \t unspecified.  */\n #ifdef FE_INVALID\n-      if (x <= (__float128) LLONG_MIN - 0.5Q)\n+      if (FIX_FLT128_LLONG_CONVERT_OVERFLOW\n+\t  && !(sign == -1 && x > (__float128) LLONG_MIN - 0.5Q))\n+\t{\n+\t  feraiseexcept (FE_INVALID);\n+\t  return sign == 1 ? LLONG_MAX : LLONG_MIN;\n+\t}\n+      else if (!FIX_FLT128_LLONG_CONVERT_OVERFLOW\n+\t       && x <= (__float128) LLONG_MIN - 0.5Q)\n \t{\n \t  /* If truncation produces LLONG_MIN, the cast will not raise\n \t     the exception, but may raise \"inexact\".  */\n-#ifdef USE_FENV_H\n \t  feraiseexcept (FE_INVALID);\n-#endif\n \t  return LLONG_MIN;\n \t}\n #endif"}, {"sha": "2c0c05440ba878e9cab8fdfd68e0b3c28524b87e", "filename": "libquadmath/math/log10q.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flog10q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flog10q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flog10q.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,14 +1,14 @@\n-/*\t\t\t\t\t\t\tlog10q.c\n+/*\t\t\t\t\t\t\tlog10l.c\n  *\n- *\tCommon logarithm, 128-bit __float128 precision\n+ *\tCommon logarithm, 128-bit long double precision\n  *\n  *\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, log10l();\n+ * long double x, y, log10l();\n  *\n- * y = log10q( x );\n+ * y = log10l( x );\n  *\n  *\n  *\n@@ -57,9 +57,7 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA \n-\n+    License along with this library; if not, see <http://www.gnu.org/licenses/>.\n  */\n \n #include \"quadmath-imp.h\"\n@@ -99,7 +97,7 @@ static const __float128 Q[12] =\n   9.147150349299596453976674231612674085381E3Q,\n   9.104928120962988414618126155557301584078E2Q,\n   4.839208193348159620282142911143429644326E1Q\n-/* 1.000000000000000000000000000000000000000E0Q, */\n+/* 1.000000000000000000000000000000000000000E0L, */\n };\n \n /* Coefficients for log(x) = z + z^3 P(z^2)/Q(z^2),\n@@ -125,7 +123,7 @@ static const __float128 S[6] =\n  -5.748542087379434595104154610899551484314E4Q,\n   3.998526750980007367835804959888064681098E3Q,\n  -1.186359407982897997337150403816839480438E2Q\n-/* 1.000000000000000000000000000000000000000E0Q, */\n+/* 1.000000000000000000000000000000000000000E0L, */\n };\n \n static const __float128\n@@ -188,14 +186,14 @@ log10q (__float128 x)\n /* Test for domain */\n   GET_FLT128_WORDS64 (hx, lx, x);\n   if (((hx & 0x7fffffffffffffffLL) | lx) == 0)\n-    return (-1.0Q / fabsq (x));\t\t/* log10l(+-0)=-inf  */\n+    return (-1 / fabsq (x));\t\t/* log10l(+-0)=-inf  */\n   if (hx < 0)\n     return (x - x) / (x - x);\n   if (hx >= 0x7fff000000000000LL)\n     return (x + x);\n \n-  if (x == 1.0Q)\n-    return 0.0Q;\n+  if (x == 1)\n+    return 0;\n \n /* separate mantissa from exponent */\n \n@@ -234,11 +232,11 @@ log10q (__float128 x)\n   if (x < SQRTH)\n     {\n       e -= 1;\n-      x = 2.0 * x - 1.0Q;\t/*  2x - 1  */\n+      x = 2.0 * x - 1;\t/*  2x - 1  */\n     }\n   else\n     {\n-      x = x - 1.0Q;\n+      x = x - 1;\n     }\n   z = x * x;\n   y = x * (z * neval (x, P, 12) / deval (x, Q, 11));"}, {"sha": "96e3d980b91ec9692b6ae6075bddf1a96f1a7e4f", "filename": "libquadmath/math/log1pq.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flog1pq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flog1pq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flog1pq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,13 +1,13 @@\n-/*\t\t\t\t\t\t\tlog1pl.c\n+/*\t\t\t\t\t\t\tlog1pq.c\n  *\n  *      Relative error logarithm\n- *\tNatural logarithm of 1+x for __float128 precision\n+ *\tNatural logarithm of 1+x, 128-bit long double precision\n  *\n  *\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, log1pl();\n+ * long double x, y, log1pq();\n  *\n  * y = log1pq( x );\n  *\n@@ -49,9 +49,8 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n-\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n@@ -74,7 +73,7 @@ static const __float128\n   P2 = 2.014652742082537582487669938141683759923E5Q,\n   P1 = 7.771154681358524243729929227226708890930E4Q,\n   P0 = 1.313572404063446165910279910527789794488E4Q,\n-  /* Q12 = 1.000000000000000000000000000000000000000E0Q, */\n+  /* Q12 = 1.000000000000000000000000000000000000000E0L, */\n   Q11 = 4.839208193348159620282142911143429644326E1Q,\n   Q10 = 9.104928120962988414618126155557301584078E2Q,\n   Q9 = 9.147150349299596453976674231612674085381E3Q,\n@@ -101,7 +100,7 @@ static const __float128\n   R2 = 2.048819892795278657810231591630928516206E4Q,\n   R1 = -8.977257995689735303686582344659576526998E4Q,\n   R0 = 1.418134209872192732479751274970992665513E5Q,\n-  /* S6 = 1.000000000000000000000000000000000000000E0Q, */\n+  /* S6 = 1.000000000000000000000000000000000000000E0L, */\n   S5 = -1.186359407982897997337150403816839480438E2Q,\n   S4 = 3.998526750980007367835804959888064681098E3Q,\n   S3 = -5.748542087379434595104154610899551484314E4Q,\n@@ -114,8 +113,8 @@ static const __float128 C1 = 6.93145751953125E-1Q;\n static const __float128 C2 = 1.428606820309417232121458176568075500134E-6Q;\n \n static const __float128 sqrth = 0.7071067811865475244008443621048490392848Q;\n-static const __float128 zero = 0.0Q;\n-\n+/* ln (2^16384 * (1 - 2^-113)) */\n+static const __float128 zero = 0;\n \n __float128\n log1pq (__float128 xm1)\n@@ -140,19 +139,19 @@ log1pq (__float128 xm1)\n     {\n       math_check_force_underflow (xm1);\n       if ((int) xm1 == 0)\n-       return xm1;\n+\treturn xm1;\n     }\n \n   if (xm1 >= 0x1p113Q)\n     x = xm1;\n   else\n-    x = xm1 + 1.0Q;\n+    x = xm1 + 1;\n \n   /* log1p(-1) = -inf */\n-  if (x <= 0.0Q)\n+  if (x <= 0)\n     {\n-      if (x == 0.0Q)\n-\treturn (-1.0Q / zero);\t/* log1p(-1) = -inf */\n+      if (x == 0)\n+\treturn (-1 / zero);  /* log1p(-1) = -inf */\n       else\n \treturn (zero / (x - x));\n     }\n@@ -207,14 +206,14 @@ log1pq (__float128 xm1)\n     {\n       e -= 1;\n       if (e != 0)\n-\tx = 2.0Q * x - 1.0Q;\t/*  2x - 1  */\n+\tx = 2 * x - 1;\t/*  2x - 1  */\n       else\n \tx = xm1;\n     }\n   else\n     {\n       if (e != 0)\n-\tx = x - 1.0Q;\n+\tx = x - 1;\n       else\n \tx = xm1;\n     }"}, {"sha": "6dcc9cfdc682a8bd5ae245ed99ee46b15a24a817", "filename": "libquadmath/math/log2q.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flog2q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flog2q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flog2q.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,13 +1,13 @@\n-/*                                                      log2q.c\n- *      Base 2 logarithm for __float128 precision\n+/*                                                      log2l.c\n+ *      Base 2 logarithm, 128-bit long double precision\n  *\n  *\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, log2q();\n+ * long double x, y, log2l();\n  *\n- * y = log2q( x );\n+ * y = log2l( x );\n  *\n  *\n  *\n@@ -56,8 +56,7 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA \n+    License along with this library; if not, see <http://www.gnu.org/licenses/>.\n  */\n \n #include \"quadmath-imp.h\"\n@@ -97,7 +96,7 @@ static const __float128 Q[12] =\n   9.147150349299596453976674231612674085381E3Q,\n   9.104928120962988414618126155557301584078E2Q,\n   4.839208193348159620282142911143429644326E1Q\n-/* 1.000000000000000000000000000000000000000E0Q, */\n+/* 1.000000000000000000000000000000000000000E0L, */\n };\n \n /* Coefficients for log(x) = z + z^3 P(z^2)/Q(z^2),\n@@ -123,7 +122,7 @@ static const __float128 S[6] =\n  -5.748542087379434595104154610899551484314E4Q,\n   3.998526750980007367835804959888064681098E3Q,\n  -1.186359407982897997337150403816839480438E2Q\n-/* 1.000000000000000000000000000000000000000E0Q, */\n+/* 1.000000000000000000000000000000000000000E0L, */\n };\n \n static const __float128\n@@ -181,14 +180,14 @@ log2q (__float128 x)\n /* Test for domain */\n   GET_FLT128_WORDS64 (hx, lx, x);\n   if (((hx & 0x7fffffffffffffffLL) | lx) == 0)\n-    return (-1.0Q / fabsq (x));\t\t/* log2l(+-0)=-inf  */\n+    return (-1 / fabsq (x));\t\t/* log2l(+-0)=-inf  */\n   if (hx < 0)\n     return (x - x) / (x - x);\n   if (hx >= 0x7fff000000000000LL)\n     return (x + x);\n \n-  if (x == 1.0Q)\n-    return 0.0Q;\n+  if (x == 1)\n+    return 0;\n \n /* separate mantissa from exponent */\n \n@@ -227,11 +226,11 @@ log2q (__float128 x)\n   if (x < SQRTH)\n     {\n       e -= 1;\n-      x = 2.0 * x - 1.0Q;\t/*  2x - 1  */\n+      x = 2.0 * x - 1;\t/*  2x - 1  */\n     }\n   else\n     {\n-      x = x - 1.0Q;\n+      x = x - 1;\n     }\n   z = x * x;\n   y = x * (z * neval (x, P, 12) / deval (x, Q, 11));"}, {"sha": "a1012add4020d9f3e7cd34ff0675f2000b0525a1", "filename": "libquadmath/math/logbq.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flogbq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flogbq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flogbq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -13,8 +13,12 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n /*\n- * long double logbl(x)\n+ * long double logbq(x)\n  * IEEE 754 logb. Included to pass IEEE test suite. Not recommend.\n  * Use ilogb instead.\n  */"}, {"sha": "6fdfc2d48e1f886956739973562b6ddc2b376efb", "filename": "libquadmath/math/logq.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flogq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flogq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flogq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,12 +1,12 @@\n-/*\t\t\t\t\t\t\tlogq.c\n+/*\t\t\t\t\t\t\tlogll.c\n  *\n- * Natural logarithm for __float128 precision.\n+ * Natural logarithm for 128-bit long double precision.\n  *\n  *\n  *\n  * SYNOPSIS:\n  *\n- * __float128 x, y, logq();\n+ * long double x, y, logq();\n  *\n  * y = logq( x );\n  *\n@@ -42,7 +42,7 @@\n  *\n  */\n \n-/* Copyright 2001 by Stephen L. Moshier <moshier@na-net.ornl.gov> \n+/* Copyright 2001 by Stephen L. Moshier <moshier@na-net.ornl.gov>\n \n     This library is free software; you can redistribute it and/or\n     modify it under the terms of the GNU Lesser General Public\n@@ -55,8 +55,8 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n@@ -183,7 +183,7 @@ static const __float128\n   ln2b = 1.4286068203094172321214581765680755001344E-6Q;\n \n __float128\n-logq (__float128 x)\n+logq(__float128 x)\n {\n   __float128 z, y, w;\n   ieee854_float128 u, t;\n@@ -240,19 +240,19 @@ logq (__float128 x)\n   /* On this interval the table is not used due to cancellation error.  */\n   if ((x <= 1.0078125Q) && (x >= 0.9921875Q))\n     {\n-      if (x == 1.0Q)\n-\treturn 0.0Q;\n-      z = x - 1.0Q;\n+      if (x == 1)\n+\treturn 0;\n+      z = x - 1;\n       k = 64;\n-      t.value  = 1.0Q;\n+      t.value  = 1;\n       e = 0;\n     }\n   else\n     {\n       /* log(u) = log( t u/t ) = log(t) + log(u/t)\n \t log(t) is tabulated in the lookup table.\n \t Express log(u/t) = log(1+z),  where z = u/t - 1 = (u-t)/t.\n-         cf. Cody & Waite. */\n+\t cf. Cody & Waite. */\n       z = (u.value - t.value) / t.value;\n     }\n   /* Series expansion of log(1+z).  */\n@@ -274,7 +274,7 @@ logq (__float128 x)\n   y += e * ln2b;  /* Base 2 exponent offset times ln(2).  */\n   y += z;\n   y += logtbl[k-26]; /* log(t) - (t-1) */\n-  y += (t.value - 1.0Q);\n+  y += (t.value - 1);\n   y += e * ln2a;\n   return y;\n }"}, {"sha": "e32b28c388c44b772962a200d1f2d40c0270dfe9", "filename": "libquadmath/math/lrintq.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flrintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flrintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flrintq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,6 +1,6 @@\n /* Round argument to nearest integral value according to current rounding\n    direction.\n-   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n@@ -16,9 +16,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n@@ -56,9 +55,7 @@ lrintq (__float128 x)\n \t      /* In the event of overflow we must raise the \"invalid\"\n \t\t exception, but not \"inexact\".  */\n \t      t = nearbyintq (x);\n-#ifdef USE_FENV_H\n \t      feraiseexcept (t == LONG_MAX ? FE_INEXACT : FE_INVALID);\n-#endif\n \t    }\n \t  else\n #endif\n@@ -85,9 +82,7 @@ lrintq (__float128 x)\n \t      /* In the event of overflow we must raise the \"invalid\"\n \t\t exception, but not \"inexact\".  */\n \t      t = nearbyintq (x);\n-#ifdef USE_FENV_H\n \t      feraiseexcept (t == LONG_MAX ? FE_INEXACT : FE_INVALID);\n-#endif\n \t    }\n \t  else\n #endif\n@@ -113,16 +108,20 @@ lrintq (__float128 x)\n \t unspecified.  */\n #if defined FE_INVALID || defined FE_INEXACT\n       if (x < (__float128) LONG_MIN\n-\t  && x > (__float128) LONG_MIN - 1.0Q)\n+\t  && x > (__float128) LONG_MIN - 1)\n \t{\n \t  /* If truncation produces LONG_MIN, the cast will not raise\n \t     the exception, but may raise \"inexact\".  */\n \t  t = nearbyintq (x);\n-#ifdef USE_FENV_H\n \t  feraiseexcept (t == LONG_MIN ? FE_INEXACT : FE_INVALID);\n-#endif\n \t  return LONG_MIN;\n \t}\n+      else if (FIX_FLT128_LONG_CONVERT_OVERFLOW && x != (__float128) LONG_MIN)\n+\t{\n+\t  feraiseexcept (FE_INVALID);\n+\t  return sx == 0 ? LONG_MAX : LONG_MIN;\n+\t}\n+\n #endif\n       return (long int) x;\n     }"}, {"sha": "0ce4ce0c1bcb4df25f32997d199f869afb689cf5", "filename": "libquadmath/math/lroundq.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flroundq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Flroundq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Flroundq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Round __float128 value to long int.\n-   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+/* Round long double value to long int.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n@@ -15,13 +15,11 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n long int\n lroundq (__float128 x)\n {\n@@ -46,7 +44,7 @@ lroundq (__float128 x)\n \t    {\n \t      i0 += 0x0000800000000000LL >> j0;\n \t      result = i0 >> (48 - j0);\n-#if defined FE_INVALID && defined USE_FENV_H\n+#ifdef FE_INVALID\n \t      if (sizeof (long int) == 4\n \t\t  && sign == 1\n \t\t  && result == LONG_MIN)\n@@ -68,7 +66,7 @@ lroundq (__float128 x)\n \t  else\n \t    {\n \t      result = ((long int) i0 << (j0 - 48)) | (j >> (112 - j0));\n-#if defined FE_INVALID && defined USE_FENV_H\n+#ifdef FE_INVALID\n \t      if (sizeof (long int) == 8\n \t\t  && sign == 1\n \t\t  && result == LONG_MIN)\n@@ -84,16 +82,23 @@ lroundq (__float128 x)\n \t FE_INVALID must be raised and the return value is\n \t unspecified.  */\n #ifdef FE_INVALID\n-      if (x <= (__float128) LONG_MIN - 0.5Q)\n+      if (FIX_FLT128_LONG_CONVERT_OVERFLOW\n+\t  && !(sign == -1 && x > (__float128) LONG_MIN - 0.5Q))\n+\t{\n+\t  feraiseexcept (FE_INVALID);\n+\t  return sign == 1 ? LONG_MAX : LONG_MIN;\n+\t}\n+      else if (!FIX_FLT128_LONG_CONVERT_OVERFLOW\n+\t       && x <= (__float128) LONG_MIN - 0.5Q)\n \t{\n \t  /* If truncation produces LONG_MIN, the cast will not raise\n \t     the exception, but may raise \"inexact\".  */\n-#ifdef USE_FENV_H\n \t  feraiseexcept (FE_INVALID);\n-#endif\n \t  return LONG_MIN;\n \t}\n #endif\n+      /* The number is too large.  It is left implementation defined\n+\t what happens.  */\n       return (long int) x;\n     }\n "}, {"sha": "12a87e75ee1ed007bcb813a406f0c3676e4ee157", "filename": "libquadmath/math/modfq.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fmodfq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fmodfq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fmodfq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* modfq.c -- __float128 version of s_modf.c.\n+/* s_modfl.c -- long double version of s_modf.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -13,12 +13,25 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n+/*\n+ * modfq(long double x, long double *iptr)\n+ * return fraction part of x, and return x's integral part in *iptr.\n+ * Method:\n+ *\tBit twiddling.\n+ *\n+ * Exception:\n+ *\tNo exception.\n+ */\n+\n #include \"quadmath-imp.h\"\n \n static const __float128 one = 1.0;\n \n-__float128\n-modfq (__float128 x, __float128 *iptr)\n+__float128 modfq(__float128 x, __float128 *iptr)\n {\n \tint64_t i0,i1,j0;\n \tuint64_t i;"}, {"sha": "1e24c46da8bd2d442b4aa08604b7342b8630cbab", "filename": "libquadmath/math/nearbyintq.c", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fnearbyintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fnearbyintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fnearbyintq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* nearbyintq.c -- __float128 version of s_nearbyint.c.\n+/* s_nearbyintl.c -- long double version of s_nearbyint.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -24,25 +24,16 @@\n  */\n \n #include \"quadmath-imp.h\"\n-#ifdef HAVE_FENV_H\n-# include <fenv.h>\n-# if defined HAVE_FEHOLDEXCEPT && defined HAVE_FESETENV\n-#   define USE_FENV_H\n-# endif\n-#endif\n \n static const __float128\n TWO112[2]={\n   5.19229685853482762853049632922009600E+33Q, /* 0x406F000000000000, 0 */\n  -5.19229685853482762853049632922009600E+33Q  /* 0xC06F000000000000, 0 */\n };\n \n-__float128\n-nearbyintq(__float128 x)\n+__float128 nearbyintq(__float128 x)\n {\n-#ifdef USE_FENV_H\n \tfenv_t env;\n-#endif\n \tint64_t i0,j0,sx;\n \tuint64_t i1 __attribute__ ((unused));\n \t__float128 w,t;\n@@ -51,15 +42,11 @@ nearbyintq(__float128 x)\n \tj0 = ((i0>>48)&0x7fff)-0x3fff;\n \tif(j0<112) {\n \t    if(j0<0) {\n-#ifdef USE_FENV_H\n \t\tfeholdexcept (&env);\n-#endif\n-\t        w = TWO112[sx]+x;\n+\t        w = TWO112[sx] + math_opt_barrier (x);\n \t        t = w-TWO112[sx];\n \t\tmath_force_eval (t);\n-#ifdef USE_FENV_H\n \t        fesetenv (&env);\n-#endif\n \t\tGET_FLT128_MSW64(i0,t);\n \t\tSET_FLT128_MSW64(t,(i0&0x7fffffffffffffffLL)|(sx<<63));\n \t        return t;\n@@ -68,14 +55,10 @@ nearbyintq(__float128 x)\n \t    if(j0==0x4000) return x+x;\t/* inf or NaN */\n \t    else return x;\t\t/* x is integral */\n \t}\n-#ifdef USE_FENV_H\n \tfeholdexcept (&env);\n-#endif\n-\tw = TWO112[sx]+x;\n+\tw = TWO112[sx] + math_opt_barrier (x);\n \tt = w-TWO112[sx];\n \tmath_force_eval (t);\n-#ifdef USE_FENV_H\t\n \tfesetenv (&env);\n-#endif\n \treturn t;\n }"}, {"sha": "5f1fae92e5b3234b85f6f9b70a754789a51d7165", "filename": "libquadmath/math/nextafterq.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fnextafterq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fnextafterq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fnextafterq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* nextafterq.c -- __float128 version of s_nextafter.c.\n+/* s_nextafterl.c -- long double version of s_nextafter.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -13,11 +13,20 @@\n  * ====================================================\n  */\n \n-#include <errno.h>\n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n+/* IEEE functions\n+ *\tnextafterq(x,y)\n+ *\treturn the next machine floating-point number of x in the\n+ *\tdirection toward y.\n+ *   Special cases:\n+ */\n+\n #include \"quadmath-imp.h\"\n \n-__float128\n-nextafterq (__float128 x, __float128 y)\n+__float128 nextafterq(__float128 x, __float128 y)\n {\n \tint64_t hx,hy,ix,iy;\n \tuint64_t lx,ly;\n@@ -32,9 +41,11 @@ nextafterq (__float128 x, __float128 y)\n \t   return x+y;\n \tif(x==y) return y;\t\t/* x=y, return y */\n \tif((ix|lx)==0) {\t\t\t/* x == 0 */\n+\t    __float128 u;\n \t    SET_FLT128_WORDS64(x,hy&0x8000000000000000ULL,1);/* return +-minsubnormal */\n-\n-\t    /* here we should raise an underflow flag */\n+\t    u = math_opt_barrier (x);\n+\t    u = u * u;\n+\t    math_force_eval (u);\t\t/* raise underflow flag */\n \t    return x;\n \t}\n \tif(hx>=0) {\t\t\t/* x > 0 */\n@@ -61,7 +72,7 @@ nextafterq (__float128 x, __float128 y)\n \t    errno = ERANGE;\n \t}\n \tif(hy==0) {\n-\t    __float128 u = x*x;\t\t\t/* underflow */\n+\t    __float128 u = x*x;\t\t/* underflow */\n \t    math_force_eval (u);\t\t/* raise underflow flag */\n \t    errno = ERANGE;\n \t}"}, {"sha": "b825020743131d9526f80b7c07556b8f925388f0", "filename": "libquadmath/math/powq.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fpowq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fpowq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fpowq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -11,9 +11,9 @@\n \n /* Expansions and modifications for 128-bit long double are\n    Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n-   and are incorporated herein by permission of the author.  The author \n+   and are incorporated herein by permission of the author.  The author\n    reserves the right to distribute this material elsewhere under different\n-   copying permissions.  These modifications are distributed here under \n+   copying permissions.  These modifications are distributed here under\n    the following terms:\n \n     This library is free software; you can redistribute it and/or\n@@ -27,8 +27,8 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n /* powq(x,y) return x**y\n  *\n@@ -67,7 +67,7 @@\n #include \"quadmath-imp.h\"\n \n static const __float128 bp[] = {\n-  1.0Q,\n+  1,\n   1.5Q,\n };\n \n@@ -83,9 +83,9 @@ static const __float128 dp_l[] = {\n   1.0579781240112554492329533686862998106046E-16Q\n };\n \n-static const __float128 zero = 0.0Q,\n-  one = 1.0Q,\n-  two = 2.0Q,\n+static const __float128 zero = 0,\n+  one = 1,\n+  two = 2,\n   two113 = 1.0384593717069655257060992658440192E34Q,\n   huge = 1.0e3000Q,\n   tiny = 1.0e-3000Q;\n@@ -164,13 +164,14 @@ powq (__float128 x, __float128 y)\n \n \n   /* y==zero: x**0 = 1 */\n-  if ((iy | q.words32.w1 | q.words32.w2 | q.words32.w3) == 0)\n+  if ((iy | q.words32.w1 | q.words32.w2 | q.words32.w3) == 0\n+      && !issignalingq (x))\n     return one;\n \n   /* 1.0**y = 1; -1.0**+-Inf = 1 */\n-  if (x == one)\n+  if (x == one && !issignalingq (y))\n     return one;\n-  if (x == -1.0Q && iy == 0x7fff0000\n+  if (x == -1 && iy == 0x7fff0000\n       && (q.words32.w1 | q.words32.w2 | q.words32.w3) == 0)\n     return one;\n \n@@ -264,7 +265,7 @@ powq (__float128 x, __float128 y)\n   /* sgn (sign of result -ve**odd) = -1 else = 1 */\n   sgn = one;\n   if (((((uint32_t) hx >> 31) - 1) | (yisint - 1)) == 0)\n-    sgn = -one;\t\t\t\t/* (-ve)**(odd int) */\n+    sgn = -one;\t\t\t/* (-ve)**(odd int) */\n \n   /* |y| is huge.\n      2^-16495 = 1/2 of smallest representable value."}, {"sha": "5aa1f1a4caabcfe018ed35828dbdb05e975924e0", "filename": "libquadmath/math/remainderq.c", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fremainderq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fremainderq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fremainderq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* fmodq.c -- __float128 version of e_fmod.c.\n+/* e_fmodl.c -- long double version of e_fmod.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n /*\n@@ -7,61 +7,63 @@\n  *\n  * Developed at SunPro, a Sun Microsystems, Inc. business.\n  * Permission to use, copy, modify, and distribute this\n- * software is freely granted, provided that this notice \n+ * software is freely granted, provided that this notice\n  * is preserved.\n  * ====================================================\n  */\n \n /* remainderq(x,p)\n- * Return :                  \n- * \treturns  x REM p  =  x - [x/p]*p as if in infinite \n- * \tprecise arithmetic, where [x/p] is the (infinite bit) \n+ * Return :\n+ *\treturns  x REM p  =  x - [x/p]*p as if in infinite\n+ *\tprecise arithmetic, where [x/p] is the (infinite bit)\n  *\tinteger nearest x/p (in half way case choose the even one).\n- * Method : \n- *\tBased on fmodq() return x-[x/p]chopped*p exactlp.\n+ * Method :\n+ *\tBased on fmodl() return x-[x/p]chopped*p exactlp.\n  */\n \n #include \"quadmath-imp.h\"\n \n-static const __float128 zero = 0.0Q;\n+static const __float128 zero = 0;\n+\n \n __float128\n-remainderq (__float128 x, __float128 p)\n+remainderq(__float128 x, __float128 p)\n {\n-  int64_t hx,hp;\n-  uint64_t sx,lx,lp;\n-  __float128 p_half;\n+\tint64_t hx,hp;\n+\tuint64_t sx,lx,lp;\n+\t__float128 p_half;\n+\n+\tGET_FLT128_WORDS64(hx,lx,x);\n+\tGET_FLT128_WORDS64(hp,lp,p);\n+\tsx = hx&0x8000000000000000ULL;\n+\thp &= 0x7fffffffffffffffLL;\n+\thx &= 0x7fffffffffffffffLL;\n \n-  GET_FLT128_WORDS64(hx,lx,x);\n-  GET_FLT128_WORDS64(hp,lp,p);\n-  sx = hx&0x8000000000000000ULL;\n-  hp &= 0x7fffffffffffffffLL;\n-  hx &= 0x7fffffffffffffffLL;\n+    /* purge off exception values */\n+\tif((hp|lp)==0) return (x*p)/(x*p);\t/* p = 0 */\n+\tif((hx>=0x7fff000000000000LL)||\t\t\t/* x not finite */\n+\t  ((hp>=0x7fff000000000000LL)&&\t\t\t/* p is NaN */\n+\t  (((hp-0x7fff000000000000LL)|lp)!=0)))\n+\t    return (x*p)/(x*p);\n \n-  /* purge off exception values */\n-  if((hp|lp)==0) return (x*p)/(x*p); \t/* p = 0 */\n-  if((hx>=0x7fff000000000000LL)||\t\t\t/* x not finite */\n-    ((hp>=0x7fff000000000000LL)&&\t\t\t/* p is NaN */\n-    (((hp-0x7fff000000000000LL)|lp)!=0)))\n-      return (x*p)/(x*p);\n \n-  if (hp<=0x7ffdffffffffffffLL) x = fmodq (x,p+p);\t/* now x < 2p */\n-  if (((hx-hp)|(lx-lp))==0) return zero*x;\n-  x  = fabsq(x);\n-  p  = fabsq(p);\n-  if (hp<0x0002000000000000LL) {\n-      if(x+x>p) {\n-\t  x-=p;\n-\t  if(x+x>=p) x -= p;\n-      }\n-  } else {\n-      p_half = 0.5Q*p;\n-      if(x>p_half) {\n-\t  x-=p;\n-\t  if(x>=p_half) x -= p;\n-      }\n-  }\n-  GET_FLT128_MSW64(hx,x);\n-  SET_FLT128_MSW64(x,hx^sx);\n-  return x;\n+\tif (hp<=0x7ffdffffffffffffLL) x = fmodq(x,p+p);\t/* now x < 2p */\n+\tif (((hx-hp)|(lx-lp))==0) return zero*x;\n+\tx  = fabsq(x);\n+\tp  = fabsq(p);\n+\tif (hp<0x0002000000000000LL) {\n+\t    if(x+x>p) {\n+\t\tx-=p;\n+\t\tif(x+x>=p) x -= p;\n+\t    }\n+\t} else {\n+\t    p_half = 0.5Q*p;\n+\t    if(x>p_half) {\n+\t\tx-=p;\n+\t\tif(x>=p_half) x -= p;\n+\t    }\n+\t}\n+\tGET_FLT128_MSW64(hx,x);\n+\tSET_FLT128_MSW64(x,hx^sx);\n+\treturn x;\n }"}, {"sha": "36a5eedf77490c5b557663703a1e57101f95e9f3", "filename": "libquadmath/math/remquoq.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fremquoq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fremquoq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fremquoq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Compute remainder and a congruent to the quotient.\n-   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n@@ -15,13 +15,11 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n-\n static const __float128 zero = 0.0;\n \n \n@@ -102,8 +100,8 @@ remquoq (__float128 x, __float128 y, int *quo)\n   *quo = qs ? -cquo : cquo;\n \n   /* Ensure correct sign of zero result in round-downward mode.  */\n-  if (x == 0.0Q)\n-    x = 0.0Q;\n+  if (x == 0)\n+    x = 0;\n   if (sx)\n     x = -x;\n   return x;"}, {"sha": "a11d8f1ed1da9ec823b7810ec0833f9dc58050a4", "filename": "libquadmath/math/rintq.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Frintq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Frintq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Frintq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* rintq.c -- __float128 version of s_rint.c.\n+/* s_rintl.c -- long double version of s_rint.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -13,6 +13,10 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n /*\n  * rintq(x)\n  * Return x rounded to integral value according to the prevailing\n@@ -23,16 +27,17 @@\n  *\tInexact flag raised if x not equal to rintq(x).\n  */\n \n+#define NO_MATH_REDIRECT\n+\n #include \"quadmath-imp.h\"\n \n static const __float128\n TWO112[2]={\n-  5.19229685853482762853049632922009600E+33Q, /* 0x406F000000000000, 0 */\n- -5.19229685853482762853049632922009600E+33Q  /* 0xC06F000000000000, 0 */\n+  5.19229685853482762853049632922009600E+33L, /* 0x406F000000000000, 0 */\n+ -5.19229685853482762853049632922009600E+33L  /* 0xC06F000000000000, 0 */\n };\n \n-__float128\n-rintq (__float128 x)\n+__float128 rintq(__float128 x)\n {\n \tint64_t i0,j0,sx;\n \tuint64_t i1 __attribute__ ((unused));"}, {"sha": "5d6d28b3771bb7f061b8d6e7aa7fec519fe97a0b", "filename": "libquadmath/math/roundq.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Froundq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Froundq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Froundq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* Round __float128 to integer away from zero.\n-   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+/* Round long double to integer away from zero.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n@@ -15,9 +15,10 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#define NO_MATH_REDIRECT\n \n #include \"quadmath-imp.h\"\n \n@@ -44,6 +45,7 @@ roundq (__float128 x)\n \t  if (((i0 & i) | i1) == 0)\n \t    /* X is integral.  */\n \t    return x;\n+\n \t  i0 += 0x0000800000000000LL >> j0;\n \t  i0 &= ~i;\n \t  i1 = 0;"}, {"sha": "a7a355ea70d1b06fa1b178d5a82a626ee1c4a99c", "filename": "libquadmath/math/scalblnq.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fscalblnq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fscalblnq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fscalblnq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,7 +1,8 @@\n-/* scalblnq.c -- __float128 version of s_scalbn.c.\n+/* s_scalblnl.c -- long double version of s_scalbn.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n+/* @(#)s_scalbn.c 5.1 93/09/24 */\n /*\n  * ====================================================\n  * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n@@ -13,9 +14,13 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n+\n /*\n- * scalblnq (_float128 x, long int n)\n- * scalblnq(x,n) returns x* 2**n  computed by  exponent\n+ * scalblnl (long double x, long int n)\n+ * scalblnl(x,n) returns x* 2**n  computed by  exponent\n  * manipulation rather than by actually performing an\n  * exponentiation or a multiplication.\n  */\n@@ -28,8 +33,7 @@ twom114 = 4.8148248609680896326399448564623183E-35Q, /* 0x3F8D000000000000, 0 */\n huge   = 1.0E+4900Q,\n tiny   = 1.0E-4900Q;\n \n-__float128\n-scalblnq (__float128 x, long int n)\n+__float128 scalblnq (__float128 x, long int n)\n {\n \tint64_t k,hx,lx;\n \tGET_FLT128_WORDS64(hx,lx,x);"}, {"sha": "4167a4b219305d608f30b98290861a144a494b7d", "filename": "libquadmath/math/scalbnq.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fscalbnq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fscalbnq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fscalbnq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,7 +1,8 @@\n-/* scalbnq.c -- __float128 version of s_scalbn.c.\n+/* s_scalbnl.c -- long double version of s_scalbn.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n+/* @(#)s_scalbn.c 5.1 93/09/24 */\n /*\n  * ====================================================\n  * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n@@ -13,9 +14,12 @@\n  * ====================================================\n  */\n \n+#if defined(LIBM_SCCS) && !defined(lint)\n+static char rcsid[] = \"$NetBSD: $\";\n+#endif\n \n /*\n- * scalbnq (__float128 x, int n)\n+ * scalbnq (long double x, int n)\n  * scalbnq(x,n) returns x* 2**n  computed by  exponent\n  * manipulation rather than by actually performing an\n  * exponentiation or a multiplication.\n@@ -29,8 +33,7 @@ twom114 = 4.8148248609680896326399448564623183E-35Q, /* 0x3F8D000000000000, 0 */\n huge   = 1.0E+4900Q,\n tiny   = 1.0E-4900Q;\n \n-__float128\n-scalbnq (__float128 x, int n)\n+__float128 scalbnq (__float128 x, int n)\n {\n \tint64_t k,hx,lx;\n \tGET_FLT128_WORDS64(hx,lx,x);"}, {"sha": "8f7020e349ed737e30741d8fdca7db52d4d4b403", "filename": "libquadmath/math/signbitq.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsignbitq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsignbitq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsignbitq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,10 +1,26 @@\n-#include \"quadmath-imp.h\"\n+/* Return nonzero value if number is negative.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n \n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"quadmath-imp.h\"\n \n int\n-signbitq (const __float128 x)\n+signbitq (__float128 x)\n {\n-  ieee854_float128 f;\n-  f.value = x;\n-  return f.ieee.negative;\n+  return __builtin_signbit (x);\n }"}, {"sha": "7f50b8c1704353919aabd7cb091177a39584b9a0", "filename": "libquadmath/math/sincos_table.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsincos_table.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsincos_table.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincos_table.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Quad-precision floating point sine and cosine tables.\n-   Copyright (C) 1999-2017 Free Software Foundation, Inc.\n+   Copyright (C) 1999-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n \n@@ -14,9 +14,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n /* For 0.1484375 + n/128.0, n=0..82 this table contains\n    first 113 bits of cosine, then at least 113 additional\n@@ -26,11 +25,13 @@\n    Computed using gmp.\n  */\n \n+/* Include to grab typedefs and wrappers for __float128 and such.  */\n+\n #include \"quadmath-imp.h\"\n \n const __float128 __sincosq_table[] = {\n \n-/* x =  1.48437500000000000000000000000000000e-01Q 3ffc3000000000000000000000000000 */\n+/* x =  1.48437500000000000000000000000000000e-01L 3ffc3000000000000000000000000000 */\n /* cos(x) = 0.fd2f5320e1b790209b4dda2f98f79caaa7b873aff1014b0fbc5243766d03cb006bc837c4358 */\n  9.89003367927322909016887196069562069e-01Q, /* 3ffefa5ea641c36f2041369bb45f31ef */\n  2.15663692029265697782289400027743703e-35Q, /* 3f8bcaaa7b873aff1014b0fbc5243767 */"}, {"sha": "83bc328ac2de949bf21845ac949902ded41962ff", "filename": "libquadmath/math/sincosq.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsincosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsincosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincosq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Compute sine and cosine of argument.\n-   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>.\n@@ -15,11 +15,9 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n-#include <errno.h>\n #include \"quadmath-imp.h\"\n \n void\n@@ -33,7 +31,7 @@ sincosq (__float128 x, __float128 *sinx, __float128 *cosx)\n   /* |x| ~< pi/4 */\n   ix &= 0x7fffffffffffffffLL;\n   if (ix <= 0x3ffe921fb54442d1LL)\n-    __quadmath_kernel_sincosq (x, 0.0Q, sinx, cosx, 0);\n+    __quadmath_kernel_sincosq (x, 0, sinx, cosx, 0);\n   else if (ix >= 0x7fff000000000000LL)\n     {\n       /* sin(Inf or NaN) is NaN */"}, {"sha": "9f0671bf1d0dc72fd93fc6a74745632114e44cce", "filename": "libquadmath/math/sincosq_kernel.c", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsincosq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsincosq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincosq_kernel.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Quad-precision floating point sine and cosine on <-pi/4,pi/4>.\n-   Copyright (C) 1999-2017 Free Software Foundation, Inc.\n+   Copyright (C) 1999-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n \n@@ -14,9 +14,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n@@ -89,15 +88,14 @@ static const __float128 c[] = {\n  2.81068754939739570236322404393398135e-15Q, /* 3fce9510115aabf87aceb2022a9a9180 */\n };\n \n-#define SINCOSQ_COS_HI 0\n-#define SINCOSQ_COS_LO 1\n-#define SINCOSQ_SIN_HI 2\n-#define SINCOSQ_SIN_LO 3\n+#define SINCOSL_COS_HI 0\n+#define SINCOSL_COS_LO 1\n+#define SINCOSL_SIN_HI 2\n+#define SINCOSL_SIN_LO 3\n extern const __float128 __sincosq_table[];\n \n void\n-__quadmath_kernel_sincosq(__float128 x, __float128 y, __float128 *sinx,\n-\t\t\t  __float128 *cosx, int iy)\n+__quadmath_kernel_sincosq(__float128 x, __float128 y, __float128 *sinx, __float128 *cosx, int iy)\n {\n   __float128 h, l, z, sin_l, cos_l_m1;\n   int64_t ix;\n@@ -128,7 +126,7 @@ __quadmath_kernel_sincosq(__float128 x, __float128 y, __float128 *sinx,\n   else\n     {\n       /* So that we don't have to use too large polynomial,  we find\n-\t l and h such that x = l + h,  where fabsl(l) <= 1.0/256 with 83\n+\t l and h such that x = l + h,  where fabsq(l) <= 1.0/256 with 83\n \t possible values for h.  We look up cosq(h) and sinq(h) in\n \t pre-computed tables,  compute cosq(l) and sinq(l) using a\n \t Chebyshev polynomial of degree 10(11) and compute\n@@ -137,10 +135,10 @@ __quadmath_kernel_sincosq(__float128 x, __float128 y, __float128 *sinx,\n       index = 0x3ffe - (tix >> 16);\n       hix = (tix + (0x200 << index)) & (0xfffffc00 << index);\n       if (signbitq (x))\n-       {\n-         x = -x;\n-         y = -y;\n-       }\n+\t{\n+\t  x = -x;\n+\t  y = -y;\n+\t}\n       switch (index)\n \t{\n \tcase 0: index = ((45 << 10) + hix - 0x3ffe0000) >> 8; break;\n@@ -157,14 +155,14 @@ __quadmath_kernel_sincosq(__float128 x, __float128 y, __float128 *sinx,\n       z = l * l;\n       sin_l = l*(ONE+z*(SSIN1+z*(SSIN2+z*(SSIN3+z*(SSIN4+z*SSIN5)))));\n       cos_l_m1 = z*(SCOS1+z*(SCOS2+z*(SCOS3+z*(SCOS4+z*SCOS5))));\n-      z = __sincosq_table [index + SINCOSQ_SIN_HI]\n-\t  + (__sincosq_table [index + SINCOSQ_SIN_LO]\n-\t     + (__sincosq_table [index + SINCOSQ_SIN_HI] * cos_l_m1)\n-\t     + (__sincosq_table [index + SINCOSQ_COS_HI] * sin_l));\n+      z = __sincosq_table [index + SINCOSL_SIN_HI]\n+\t  + (__sincosq_table [index + SINCOSL_SIN_LO]\n+\t     + (__sincosq_table [index + SINCOSL_SIN_HI] * cos_l_m1)\n+\t     + (__sincosq_table [index + SINCOSL_COS_HI] * sin_l));\n       *sinx = (ix < 0) ? -z : z;\n-      *cosx = __sincosq_table [index + SINCOSQ_COS_HI]\n-\t      + (__sincosq_table [index + SINCOSQ_COS_LO]\n-\t\t - (__sincosq_table [index + SINCOSQ_SIN_HI] * sin_l\n-\t\t    - __sincosq_table [index + SINCOSQ_COS_HI] * cos_l_m1));\n+      *cosx = __sincosq_table [index + SINCOSL_COS_HI]\n+\t      + (__sincosq_table [index + SINCOSL_COS_LO]\n+\t\t - (__sincosq_table [index + SINCOSL_SIN_HI] * sin_l\n+\t\t    - __sincosq_table [index + SINCOSL_COS_HI] * cos_l_m1));\n     }\n }"}, {"sha": "9e59460de9c547012a69de0ef8a8a10f6a23b530", "filename": "libquadmath/math/sinhq.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsinhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsinhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsinhq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* sinhq.c -- __float128 version of e_sinh.c.\n- * Conversion to __float128 by Ulrich Drepper,\n+/* e_sinhl.c -- long double version of e_sinh.c.\n+ * Conversion to long double by Ulrich Drepper,\n  * Cygnus Support, drepper@cygnus.com.\n  */\n \n@@ -14,11 +14,11 @@\n  * ====================================================\n  */\n \n-/* Changes for 128-bit __float128 are\n+/* Changes for 128-bit long double are\n    Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n-   and are incorporated herein by permission of the author.  The author \n+   and are incorporated herein by permission of the author.  The author\n    reserves the right to distribute this material elsewhere under different\n-   copying permissions.  These modifications are distributed here under \n+   copying permissions.  These modifications are distributed here under\n    the following terms:\n \n     This library is free software; you can redistribute it and/or\n@@ -32,31 +32,31 @@\n     Lesser General Public License for more details.\n \n     You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n \n /* sinhq(x)\n  * Method :\n  * mathematically sinh(x) if defined to be (exp(x)-exp(-x))/2\n- *      1. Replace x by |x| (sinhq(-x) = -sinhq(x)).\n+ *      1. Replace x by |x| (sinhl(-x) = -sinhl(x)).\n  *      2.\n  *                                                   E + E/(E+1)\n- *          0        <= x <= 25     :  sinhq(x) := --------------, E=expm1q(x)\n+ *          0        <= x <= 25     :  sinhl(x) := --------------, E=expm1q(x)\n  *                                                       2\n  *\n- *          25       <= x <= lnovft :  sinhq(x) := expq(x)/2\n- *          lnovft   <= x <= ln2ovft:  sinhq(x) := expq(x/2)/2 * expq(x/2)\n- *          ln2ovft  <  x           :  sinhq(x) := x*shuge (overflow)\n+ *          25       <= x <= lnovft :  sinhl(x) := expq(x)/2\n+ *          lnovft   <= x <= ln2ovft:  sinhl(x) := expq(x/2)/2 * expq(x/2)\n+ *          ln2ovft  <  x           :  sinhl(x) := x*shuge (overflow)\n  *\n  * Special cases:\n- *      sinhq(x) is |x| if x is +INF, -INF, or NaN.\n- *      only sinhq(0)=0 is exact for finite x.\n+ *      sinhl(x) is |x| if x is +INF, -INF, or NaN.\n+ *      only sinhl(0)=0 is exact for finite x.\n  */\n \n #include \"quadmath-imp.h\"\n \n static const __float128 one = 1.0, shuge = 1.0e4931Q,\n-  ovf_thresh = 1.1357216553474703894801348310092223067821E4Q;\n+ovf_thresh = 1.1357216553474703894801348310092223067821E4Q;\n \n __float128\n sinhq (__float128 x)\n@@ -74,7 +74,7 @@ sinhq (__float128 x)\n   if (ix >= 0x7fff0000)\n     return x + x;\n \n-  h = 0.5Q;\n+  h = 0.5;\n   if (jx & 0x80000000)\n     h = -h;\n \n@@ -92,7 +92,7 @@ sinhq (__float128 x)\n \t}\n       t = expm1q (u.value);\n       if (ix < 0x3fff0000)\n-\treturn h * (2.0Q * t - t * t / (t + one));\n+\treturn h * (2.0 * t - t * t / (t + one));\n       return h * (t + t / (t + one));\n     }\n \n@@ -104,11 +104,11 @@ sinhq (__float128 x)\n      Overflow threshold is log(2 * maxdouble).  */\n   if (u.value <= ovf_thresh)\n     {\n-      w = expq (0.5Q * u.value);\n+      w = expq (0.5 * u.value);\n       t = h * w;\n       return t * w;\n     }\n \n-  /* |x| > overflowthreshold, sinhq(x) overflow */\n+  /* |x| > overflowthreshold, sinhl(x) overflow */\n   return x * shuge;\n }"}, {"sha": "d381f3ac40af82f1ba1fda4ebe78d374c3ac5124", "filename": "libquadmath/math/sinq.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsinq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsinq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsinq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,4 +1,4 @@\n-/* sinq.c -- __float128 version of s_sin.c.\n+/* s_sinl.c -- long double version of s_sin.c.\n  * Conversion to long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -17,8 +17,8 @@\n  * Return sine function of x.\n  *\n  * kernel function:\n- *\t__quadmath_kernel_sinq\t... sine function on [-pi/4,pi/4]\n- *\t__quadmath_kernel_cosq\t... cose function on [-pi/4,pi/4]\n+ *\t__quadmath_kernel_sinq\t\t... sine function on [-pi/4,pi/4]\n+ *\t__quadmath_kernel_cosq\t\t... cose function on [-pi/4,pi/4]\n  *\t__quadmath_rem_pio2q\t... argument reduction routine\n  *\n  * Method.\n@@ -46,10 +46,9 @@\n \n #include \"quadmath-imp.h\"\n \n-__float128\n-sinq (__float128 x)\n+__float128 sinq(__float128 x)\n {\n-\t__float128 y[2],z=0.0Q;\n+\t__float128 y[2],z=0;\n \tint64_t n, ix;\n \n     /* High word of x. */\n@@ -64,6 +63,8 @@ sinq (__float128 x)\n \telse if (ix>=0x7fff000000000000LL) {\n \t    if (ix == 0x7fff000000000000LL) {\n \t\tGET_FLT128_LSW64(n,x);\n+\t\tif (n == 0)\n+\t\t    errno = EDOM;\n \t    }\n \t    return x-x;\n \t}"}, {"sha": "9425d2494519fa763bec0b764a6f3bae7aa72172", "filename": "libquadmath/math/sinq_kernel.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsinq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fsinq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsinq_kernel.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Quad-precision floating point sine on <-pi/4,pi/4>.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek <jj@ultra.linux.cz>\n \n@@ -14,9 +14,8 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n \n@@ -70,14 +69,14 @@ static const __float128 c[] = {\n -2.50521016467996193495359189395805639E-08Q, /* bfe5ae644ee90c47dc71839de75b2787 */\n };\n \n-#define SINCOSQ_COS_HI 0\n-#define SINCOSQ_COS_LO 1\n-#define SINCOSQ_SIN_HI 2\n-#define SINCOSQ_SIN_LO 3\n+#define SINCOSL_COS_HI 0\n+#define SINCOSL_COS_LO 1\n+#define SINCOSL_SIN_HI 2\n+#define SINCOSL_SIN_LO 3\n extern const __float128 __sincosq_table[];\n \n __float128\n-__quadmath_kernel_sinq (__float128 x, __float128 y, int iy)\n+__quadmath_kernel_sinq(__float128 x, __float128 y, int iy)\n {\n   __float128 h, l, z, sin_l, cos_l_m1;\n   int64_t ix;\n@@ -101,7 +100,7 @@ __quadmath_kernel_sinq (__float128 x, __float128 y, int iy)\n   else\n     {\n       /* So that we don't have to use too large polynomial,  we find\n-\t l and h such that x = l + h,  where fabsl(l) <= 1.0/256 with 83\n+\t l and h such that x = l + h,  where fabsq(l) <= 1.0/256 with 83\n \t possible values for h.  We look up cosq(h) and sinq(h) in\n \t pre-computed tables,  compute cosq(l) and sinq(l) using a\n \t Chebyshev polynomial of degree 10(11) and compute\n@@ -125,10 +124,10 @@ __quadmath_kernel_sinq (__float128 x, __float128 y, int iy)\n       z = l * l;\n       sin_l = l*(ONE+z*(SSIN1+z*(SSIN2+z*(SSIN3+z*(SSIN4+z*SSIN5)))));\n       cos_l_m1 = z*(SCOS1+z*(SCOS2+z*(SCOS3+z*(SCOS4+z*SCOS5))));\n-      z = __sincosq_table [index + SINCOSQ_SIN_HI]\n-\t  + (__sincosq_table [index + SINCOSQ_SIN_LO]\n-\t     + (__sincosq_table [index + SINCOSQ_SIN_HI] * cos_l_m1)\n-\t     + (__sincosq_table [index + SINCOSQ_COS_HI] * sin_l));\n+      z = __sincosq_table [index + SINCOSL_SIN_HI]\n+\t  + (__sincosq_table [index + SINCOSL_SIN_LO]\n+\t     + (__sincosq_table [index + SINCOSL_SIN_HI] * cos_l_m1)\n+\t     + (__sincosq_table [index + SINCOSL_COS_HI] * sin_l));\n       return (ix < 0) ? -z : z;\n     }\n }"}, {"sha": "21c0f937d60529e89921f1eae9d0de2b2f7ebf9b", "filename": "libquadmath/math/tanhq.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftanhq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftanhq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftanhq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n-/* s_tanhl.c -- __float128 version of s_tanh.c.\n- * Conversion to __float128 by Ulrich Drepper,\n+/* s_tanhl.c -- long double version of s_tanh.c.\n+ * Conversion to long double by Ulrich Drepper,\n  * Cygnus Support, drepper@cygnus.com.\n  */\n \n@@ -14,36 +14,36 @@\n  * ====================================================\n  */\n \n-/* Changes for 128-bit __float128 contributed by\n+/* Changes for 128-bit long double contributed by\n    Stephen L. Moshier <moshier@na-net.ornl.gov> */\n \n-/* tanhl(x)\n+/* tanhq(x)\n  * Return the Hyperbolic Tangent of x\n  *\n  * Method :\n  *                                      x    -x\n  *                                     e  - e\n- *      0. tanhl(x) is defined to be -----------\n+ *      0. tanhq(x) is defined to be -----------\n  *                                      x    -x\n  *                                     e  + e\n- *      1. reduce x to non-negative by tanhl(-x) = -tanhl(x).\n- *      2.  0      <= x <= 2**-57 : tanhl(x) := x*(one+x)\n+ *      1. reduce x to non-negative by tanhq(-x) = -tanhq(x).\n+ *      2.  0      <= x <= 2**-57 : tanhq(x) := x*(one+x)\n  *                                               -t\n- *          2**-57 <  x <=  1     : tanhl(x) := -----; t = expm1l(-2x)\n+ *          2**-57 <  x <=  1     : tanhq(x) := -----; t = expm1q(-2x)\n  *                                              t + 2\n  *                                                    2\n- *          1      <= x <=  40.0  : tanhl(x) := 1-  ----- ; t=expm1l(2x)\n+ *          1      <= x <=  40.0  : tanhq(x) := 1-  ----- ; t=expm1q(2x)\n  *                                                  t + 2\n- *          40.0   <  x <= INF    : tanhl(x) := 1.\n+ *          40.0   <  x <= INF    : tanhq(x) := 1.\n  *\n  * Special cases:\n- *      tanhl(NaN) is NaN;\n- *      only tanhl(0)=0 is exact for finite argument.\n+ *      tanhq(NaN) is NaN;\n+ *      only tanhq(0)=0 is exact for finite argument.\n  */\n \n #include \"quadmath-imp.h\"\n \n-static const __float128 one = 1.0Q, two = 2.0Q, tiny = 1.0e-4900Q;\n+static const __float128 one = 1.0, two = 2.0, tiny = 1.0e-4900Q;\n \n __float128\n tanhq (__float128 x)\n@@ -59,11 +59,11 @@ tanhq (__float128 x)\n   /* x is INF or NaN */\n   if (ix >= 0x7fff0000)\n     {\n-      /* for NaN it's not important which branch: tanhl(NaN) = NaN */\n+      /* for NaN it's not important which branch: tanhq(NaN) = NaN */\n       if (jx & 0x80000000)\n-\treturn one / x - one;\t/* tanhl(-inf)= -1; */\n+\treturn one / x - one;\t/* tanhq(-inf)= -1; */\n       else\n-\treturn one / x + one;\t/* tanhl(+inf)=+1 */\n+\treturn one / x + one;\t/* tanhq(+inf)=+1 */\n     }\n \n   /* |x| < 40 */"}, {"sha": "bbbce86d7ddf4cb1ea286fb7baf923b8f4fd67f7", "filename": "libquadmath/math/tanq.c", "status": "modified", "additions": 11, "deletions": 176, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftanq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,171 +1,4 @@\n-/*\n- * ====================================================\n- * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n- *\n- * Developed at SunPro, a Sun Microsystems, Inc. business.\n- * Permission to use, copy, modify, and distribute this\n- * software is freely granted, provided that this notice\n- * is preserved.\n- * ====================================================\n- */\n-\n-/*\n-  Long double expansions are\n-  Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n-  and are incorporated herein by permission of the author.  The author\n-  reserves the right to distribute this material elsewhere under different\n-  copying permissions.  These modifications are distributed here under\n-  the following terms:\n-\n-    This library is free software; you can redistribute it and/or\n-    modify it under the terms of the GNU Lesser General Public\n-    License as published by the Free Software Foundation; either\n-    version 2.1 of the License, or (at your option) any later version.\n-\n-    This library is distributed in the hope that it will be useful,\n-    but WITHOUT ANY WARRANTY; without even the implied warranty of\n-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-    Lesser General Public License for more details.\n-\n-    You should have received a copy of the GNU Lesser General Public\n-    License along with this library; if not, write to the Free Software\n-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n-\n-/* __quadmath_kernel_tanq( x, y, k )\n- * kernel tan function on [-pi/4, pi/4], pi/4 ~ 0.7854\n- * Input x is assumed to be bounded by ~pi/4 in magnitude.\n- * Input y is the tail of x.\n- * Input k indicates whether tan (if k=1) or\n- * -1/tan (if k= -1) is returned.\n- *\n- * Algorithm\n- *\t1. Since tan(-x) = -tan(x), we need only to consider positive x.\n- *\t2. if x < 2^-57, return x with inexact if x!=0.\n- *\t3. tan(x) is approximated by a rational form x + x^3 / 3 + x^5 R(x^2)\n- *          on [0,0.67433].\n- *\n- *\t   Note: tan(x+y) = tan(x) + tan'(x)*y\n- *\t\t          ~ tan(x) + (1+x*x)*y\n- *\t   Therefore, for better accuracy in computing tan(x+y), let\n- *\t\tr = x^3 * R(x^2)\n- *\t   then\n- *\t\ttan(x+y) = x + (x^3 / 3 + (x^2 *(r+y)+y))\n- *\n- *      4. For x in [0.67433,pi/4],  let y = pi/4 - x, then\n- *\t\ttan(x) = tan(pi/4-y) = (1-tan(y))/(1+tan(y))\n- *\t\t       = 1 - 2*(tan(y) - (tan(y)^2)/(1+tan(y)))\n- */\n-\n-#include \"quadmath-imp.h\"\n-\n-\n-\n-static const __float128\n-  one = 1.0Q,\n-  pio4hi = 7.8539816339744830961566084581987569936977E-1Q,\n-  pio4lo = 2.1679525325309452561992610065108379921906E-35Q,\n-\n-  /* tan x = x + x^3 / 3 + x^5 T(x^2)/U(x^2)\n-     0 <= x <= 0.6743316650390625\n-     Peak relative error 8.0e-36  */\n- TH =  3.333333333333333333333333333333333333333E-1Q,\n- T0 = -1.813014711743583437742363284336855889393E7Q,\n- T1 =  1.320767960008972224312740075083259247618E6Q,\n- T2 = -2.626775478255838182468651821863299023956E4Q,\n- T3 =  1.764573356488504935415411383687150199315E2Q,\n- T4 = -3.333267763822178690794678978979803526092E-1Q,\n-\n- U0 = -1.359761033807687578306772463253710042010E8Q,\n- U1 =  6.494370630656893175666729313065113194784E7Q,\n- U2 = -4.180787672237927475505536849168729386782E6Q,\n- U3 =  8.031643765106170040139966622980914621521E4Q,\n- U4 = -5.323131271912475695157127875560667378597E2Q;\n-  /* 1.000000000000000000000000000000000000000E0 */\n-\n-\n-static __float128\n-__quadmath_kernel_tanq (__float128 x, __float128 y, int iy)\n-{\n-  __float128 z, r, v, w, s;\n-  int32_t ix, sign = 1;\n-  ieee854_float128 u, u1;\n-\n-  u.value = x;\n-  ix = u.words32.w0 & 0x7fffffff;\n-  if (ix < 0x3fc60000)\t\t/* x < 2**-57 */\n-    {\n-      if ((int) x == 0)\n-\t{\t\t\t/* generate inexact */\n-\t  if ((ix | u.words32.w1 | u.words32.w2 | u.words32.w3\n-\t       | (iy + 1)) == 0)\n-\t    return one / fabsq (x);\n-\t  else if (iy == 1)\n-\t    {\n-\t      math_check_force_underflow (x);\n-\t      return x;\n-\t    }\n-\t  else\n-\t    return -one / x;\n-\t}\n-    }\n-  if (ix >= 0x3ffe5942) /* |x| >= 0.6743316650390625 */\n-    {\n-      if ((u.words32.w0 & 0x80000000) != 0)\n-\t{\n-\t  x = -x;\n-\t  y = -y;\n-\t  sign = -1;\n-\t}\n-      else\n-\tsign = 1;\n-      z = pio4hi - x;\n-      w = pio4lo - y;\n-      x = z + w;\n-      y = 0.0;\n-    }\n-  z = x * x;\n-  r = T0 + z * (T1 + z * (T2 + z * (T3 + z * T4)));\n-  v = U0 + z * (U1 + z * (U2 + z * (U3 + z * (U4 + z))));\n-  r = r / v;\n-\n-  s = z * x;\n-  r = y + z * (s * r + y);\n-  r += TH * s;\n-  w = x + r;\n-  if (ix >= 0x3ffe5942)\n-    {\n-      v = (__float128) iy;\n-      w = (v - 2.0Q * (x - (w * w / (w + v) - r)));\n-      if (sign < 0)\n-\tw = -w;\n-      return w;\n-    }\n-  if (iy == 1)\n-    return w;\n-  else\n-    {\t\t\t\t/* if allow error up to 2 ulp,\n-\t\t\t\t   simply return -1.0/(x+r) here */\n-      /*  compute -1.0/(x+r) accurately */\n-      u1.value = w;\n-      u1.words32.w2 = 0;\n-      u1.words32.w3 = 0;\n-      v = r - (u1.value - x);\t\t/* u1+v = r+x */\n-      z = -1.0 / w;\n-      u.value = z;\n-      u.words32.w2 = 0;\n-      u.words32.w3 = 0;\n-      s = 1.0 + u.value * u1.value;\n-      return u.value + z * (s + u.value * v);\n-    }\n-}\n-\n-\n-\n-\f\n-\n-\n-\n-/* tanq.c -- __float128 version of s_tan.c.\n+/* s_tanl.c -- long double version of s_tan.c.\n  * Conversion to IEEE quad long double by Jakub Jelinek, jj@ultra.linux.cz.\n  */\n \n@@ -181,11 +14,11 @@ __quadmath_kernel_tanq (__float128 x, __float128 y, int iy)\n  * ====================================================\n  */\n \n-/* tanl(x)\n+/* tanq(x)\n  * Return tangent function of x.\n  *\n  * kernel function:\n- *\t__quadmath_kernel_tanq\t... tangent function on [-pi/4,pi/4]\n+ *\t__quadmath_kernel_tanq\t\t... tangent function on [-pi/4,pi/4]\n  *\t__quadmath_rem_pio2q\t... argument reduction routine\n  *\n  * Method.\n@@ -211,11 +44,11 @@ __quadmath_kernel_tanq (__float128 x, __float128 y, int iy)\n  *\tTRIG(x) returns trig(x) nearly rounded\n  */\n \n+#include \"quadmath-imp.h\"\n \n-__float128\n-tanq (__float128 x)\n+__float128 tanq(__float128 x)\n {\n-\t__float128 y[2],z=0.0Q;\n+\t__float128 y[2],z=0;\n \tint64_t n, ix;\n \n     /* High word of x. */\n@@ -225,18 +58,20 @@ tanq (__float128 x)\n \tix &= 0x7fffffffffffffffLL;\n \tif(ix <= 0x3ffe921fb54442d1LL) return __quadmath_kernel_tanq(x,z,1);\n \n-    /* tanl(Inf or NaN) is NaN */\n+    /* tanq(Inf or NaN) is NaN */\n \telse if (ix>=0x7fff000000000000LL) {\n \t    if (ix == 0x7fff000000000000LL) {\n \t\tGET_FLT128_LSW64(n,x);\n+\t\tif (n == 0)\n+\t\t    errno = EDOM;\n \t    }\n \t    return x-x;\t\t/* NaN */\n \t}\n \n     /* argument reduction needed */\n \telse {\n \t    n = __quadmath_rem_pio2q(x,y);\n-\t\t\t\t\t/*   1 -- n even, -1 -- n odd */\n-\t    return __quadmath_kernel_tanq(y[0],y[1],1-((n&1)<<1));\n+\t    return __quadmath_kernel_tanq(y[0],y[1],1-((n&1)<<1)); /*   1 -- n even\n+\t\t\t\t\t\t\t-1 -- n odd */\n \t}\n }"}, {"sha": "2de3a11b637f00abcdd9d047fef661962a4d95bd", "filename": "libquadmath/math/tanq_kernel.c", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftanq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftanq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftanq_kernel.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -0,0 +1,165 @@\n+/*\n+ * ====================================================\n+ * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n+ *\n+ * Developed at SunPro, a Sun Microsystems, Inc. business.\n+ * Permission to use, copy, modify, and distribute this\n+ * software is freely granted, provided that this notice\n+ * is preserved.\n+ * ====================================================\n+ */\n+\n+/*\n+  Long double expansions are\n+  Copyright (C) 2001 Stephen L. Moshier <moshier@na-net.ornl.gov>\n+  and are incorporated herein by permission of the author.  The author\n+  reserves the right to distribute this material elsewhere under different\n+  copying permissions.  These modifications are distributed here under\n+  the following terms:\n+\n+    This library is free software; you can redistribute it and/or\n+    modify it under the terms of the GNU Lesser General Public\n+    License as published by the Free Software Foundation; either\n+    version 2.1 of the License, or (at your option) any later version.\n+\n+    This library is distributed in the hope that it will be useful,\n+    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+    Lesser General Public License for more details.\n+\n+    You should have received a copy of the GNU Lesser General Public\n+    License along with this library; if not, see\n+    <http://www.gnu.org/licenses/>.  */\n+\n+/* __quadmath_kernel_tanq( x, y, k )\n+ * kernel tan function on [-pi/4, pi/4], pi/4 ~ 0.7854\n+ * Input x is assumed to be bounded by ~pi/4 in magnitude.\n+ * Input y is the tail of x.\n+ * Input k indicates whether tan (if k=1) or\n+ * -1/tan (if k= -1) is returned.\n+ *\n+ * Algorithm\n+ *\t1. Since tan(-x) = -tan(x), we need only to consider positive x.\n+ *\t2. if x < 2^-57, return x with inexact if x!=0.\n+ *\t3. tan(x) is approximated by a rational form x + x^3 / 3 + x^5 R(x^2)\n+ *          on [0,0.67433].\n+ *\n+ *\t   Note: tan(x+y) = tan(x) + tan'(x)*y\n+ *\t\t          ~ tan(x) + (1+x*x)*y\n+ *\t   Therefore, for better accuracy in computing tan(x+y), let\n+ *\t\tr = x^3 * R(x^2)\n+ *\t   then\n+ *\t\ttan(x+y) = x + (x^3 / 3 + (x^2 *(r+y)+y))\n+ *\n+ *      4. For x in [0.67433,pi/4],  let y = pi/4 - x, then\n+ *\t\ttan(x) = tan(pi/4-y) = (1-tan(y))/(1+tan(y))\n+ *\t\t       = 1 - 2*(tan(y) - (tan(y)^2)/(1+tan(y)))\n+ */\n+\n+#include \"quadmath-imp.h\"\n+\n+static const __float128\n+  one = 1,\n+  pio4hi = 7.8539816339744830961566084581987569936977E-1Q,\n+  pio4lo = 2.1679525325309452561992610065108379921906E-35Q,\n+\n+  /* tan x = x + x^3 / 3 + x^5 T(x^2)/U(x^2)\n+     0 <= x <= 0.6743316650390625\n+     Peak relative error 8.0e-36  */\n+ TH =  3.333333333333333333333333333333333333333E-1Q,\n+ T0 = -1.813014711743583437742363284336855889393E7Q,\n+ T1 =  1.320767960008972224312740075083259247618E6Q,\n+ T2 = -2.626775478255838182468651821863299023956E4Q,\n+ T3 =  1.764573356488504935415411383687150199315E2Q,\n+ T4 = -3.333267763822178690794678978979803526092E-1Q,\n+\n+ U0 = -1.359761033807687578306772463253710042010E8Q,\n+ U1 =  6.494370630656893175666729313065113194784E7Q,\n+ U2 = -4.180787672237927475505536849168729386782E6Q,\n+ U3 =  8.031643765106170040139966622980914621521E4Q,\n+ U4 = -5.323131271912475695157127875560667378597E2Q;\n+  /* 1.000000000000000000000000000000000000000E0 */\n+\n+\n+__float128\n+__quadmath_kernel_tanq (__float128 x, __float128 y, int iy)\n+{\n+  __float128 z, r, v, w, s;\n+  int32_t ix, sign;\n+  ieee854_float128 u, u1;\n+\n+  u.value = x;\n+  ix = u.words32.w0 & 0x7fffffff;\n+  if (ix < 0x3fc60000)\t\t/* x < 2**-57 */\n+    {\n+      if ((int) x == 0)\n+\t{\t\t\t/* generate inexact */\n+\t  if ((ix | u.words32.w1 | u.words32.w2 | u.words32.w3\n+\t       | (iy + 1)) == 0)\n+\t    return one / fabsq (x);\n+\t  else if (iy == 1)\n+\t    {\n+\t      math_check_force_underflow (x);\n+\t      return x;\n+\t    }\n+\t  else\n+\t    return -one / x;\n+\t}\n+    }\n+  if (ix >= 0x3ffe5942) /* |x| >= 0.6743316650390625 */\n+    {\n+      if ((u.words32.w0 & 0x80000000) != 0)\n+\t{\n+\t  x = -x;\n+\t  y = -y;\n+\t  sign = -1;\n+\t}\n+      else\n+\tsign = 1;\n+      z = pio4hi - x;\n+      w = pio4lo - y;\n+      x = z + w;\n+      y = 0.0;\n+    }\n+  z = x * x;\n+  r = T0 + z * (T1 + z * (T2 + z * (T3 + z * T4)));\n+  v = U0 + z * (U1 + z * (U2 + z * (U3 + z * (U4 + z))));\n+  r = r / v;\n+\n+  s = z * x;\n+  r = y + z * (s * r + y);\n+  r += TH * s;\n+  w = x + r;\n+  if (ix >= 0x3ffe5942)\n+    {\n+      v = (__float128) iy;\n+      w = (v - 2.0 * (x - (w * w / (w + v) - r)));\n+      /* SIGN is set for arguments that reach this code, but not\n+\t otherwise, resulting in warnings that it may be used\n+\t uninitialized although in the cases where it is used it has\n+\t always been set.  */\n+\n+\n+      if (sign < 0)\n+\tw = -w;\n+\n+      return w;\n+    }\n+  if (iy == 1)\n+    return w;\n+  else\n+    {\t\t\t\t/* if allow error up to 2 ulp,\n+\t\t\t\t   simply return -1.0/(x+r) here */\n+      /*  compute -1.0/(x+r) accurately */\n+      u1.value = w;\n+      u1.words32.w2 = 0;\n+      u1.words32.w3 = 0;\n+      v = r - (u1.value - x);\t\t/* u1+v = r+x */\n+      z = -1.0 / w;\n+      u.value = z;\n+      u.words32.w2 = 0;\n+      u.words32.w3 = 0;\n+      s = 1.0 + u.value * u1.value;\n+      return u.value + z * (s + u.value * v);\n+    }\n+}"}, {"sha": "03eae0d13be4be331fdfc786d57f9eb83b374040", "filename": "libquadmath/math/tgammaq.c", "status": "modified", "additions": 192, "deletions": 22, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftgammaq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftgammaq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftgammaq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of gamma function according to ISO C.\n-   Copyright (C) 1997, 1999, 2002, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n-   \t\t  Jakub Jelinek <jj@ultra.linux.cz, 1999.\n+\t\t  Jakub Jelinek <jj@ultra.linux.cz, 1999.\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n@@ -15,39 +15,209 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n+__float128\n+tgammaq (__float128 x)\n+{\n+  int sign;\n+  __float128 ret;\n+  ret = __quadmath_gammaq_r (x, &sign);\n+  return sign < 0 ? -ret : ret;\n+}\n+\n+/* Coefficients B_2k / 2k(2k-1) of x^-(2k-1) inside exp in Stirling's\n+   approximation to gamma function.  */\n+\n+static const __float128 gamma_coeff[] =\n+  {\n+    0x1.5555555555555555555555555555p-4Q,\n+    -0xb.60b60b60b60b60b60b60b60b60b8p-12Q,\n+    0x3.4034034034034034034034034034p-12Q,\n+    -0x2.7027027027027027027027027028p-12Q,\n+    0x3.72a3c5631fe46ae1d4e700dca8f2p-12Q,\n+    -0x7.daac36664f1f207daac36664f1f4p-12Q,\n+    0x1.a41a41a41a41a41a41a41a41a41ap-8Q,\n+    -0x7.90a1b2c3d4e5f708192a3b4c5d7p-8Q,\n+    0x2.dfd2c703c0cfff430edfd2c703cp-4Q,\n+    -0x1.6476701181f39edbdb9ce625987dp+0Q,\n+    0xd.672219167002d3a7a9c886459cp+0Q,\n+    -0x9.cd9292e6660d55b3f712eb9e07c8p+4Q,\n+    0x8.911a740da740da740da740da741p+8Q,\n+    -0x8.d0cc570e255bf59ff6eec24b49p+12Q,\n+  };\n+\n+#define NCOEFF (sizeof (gamma_coeff) / sizeof (gamma_coeff[0]))\n \n+/* Return gamma (X), for positive X less than 1775, in the form R *\n+   2^(*EXP2_ADJ), where R is the return value and *EXP2_ADJ is set to\n+   avoid overflow or underflow in intermediate calculations.  */\n+\n+static __float128\n+gammal_positive (__float128 x, int *exp2_adj)\n+{\n+  int local_signgam;\n+  if (x < 0.5Q)\n+    {\n+      *exp2_adj = 0;\n+      return expq (__quadmath_lgammaq_r (x + 1, &local_signgam)) / x;\n+    }\n+  else if (x <= 1.5Q)\n+    {\n+      *exp2_adj = 0;\n+      return expq (__quadmath_lgammaq_r (x, &local_signgam));\n+    }\n+  else if (x < 12.5Q)\n+    {\n+      /* Adjust into the range for using exp (lgamma).  */\n+      *exp2_adj = 0;\n+      __float128 n = ceilq (x - 1.5Q);\n+      __float128 x_adj = x - n;\n+      __float128 eps;\n+      __float128 prod = __quadmath_gamma_productq (x_adj, 0, n, &eps);\n+      return (expq (__quadmath_lgammaq_r (x_adj, &local_signgam))\n+\t      * prod * (1 + eps));\n+    }\n+  else\n+    {\n+      __float128 eps = 0;\n+      __float128 x_eps = 0;\n+      __float128 x_adj = x;\n+      __float128 prod = 1;\n+      if (x < 24)\n+\t{\n+\t  /* Adjust into the range for applying Stirling's\n+\t     approximation.  */\n+\t  __float128 n = ceilq (24 - x);\n+\t  x_adj = x + n;\n+\t  x_eps = (x - (x_adj - n));\n+\t  prod = __quadmath_gamma_productq (x_adj - n, x_eps, n, &eps);\n+\t}\n+      /* The result is now gamma (X_ADJ + X_EPS) / (PROD * (1 + EPS)).\n+\t Compute gamma (X_ADJ + X_EPS) using Stirling's approximation,\n+\t starting by computing pow (X_ADJ, X_ADJ) with a power of 2\n+\t factored out.  */\n+      __float128 exp_adj = -eps;\n+      __float128 x_adj_int = roundq (x_adj);\n+      __float128 x_adj_frac = x_adj - x_adj_int;\n+      int x_adj_log2;\n+      __float128 x_adj_mant = frexpq (x_adj, &x_adj_log2);\n+      if (x_adj_mant < M_SQRT1_2q)\n+\t{\n+\t  x_adj_log2--;\n+\t  x_adj_mant *= 2;\n+\t}\n+      *exp2_adj = x_adj_log2 * (int) x_adj_int;\n+      __float128 ret = (powq (x_adj_mant, x_adj)\n+\t\t       * exp2q (x_adj_log2 * x_adj_frac)\n+\t\t       * expq (-x_adj)\n+\t\t       * sqrtq (2 * M_PIq / x_adj)\n+\t\t       / prod);\n+      exp_adj += x_eps * logq (x_adj);\n+      __float128 bsum = gamma_coeff[NCOEFF - 1];\n+      __float128 x_adj2 = x_adj * x_adj;\n+      for (size_t i = 1; i <= NCOEFF - 1; i++)\n+\tbsum = bsum / x_adj2 + gamma_coeff[NCOEFF - 1 - i];\n+      exp_adj += bsum / x_adj;\n+      return ret + ret * expm1q (exp_adj);\n+    }\n+}\n \n __float128\n-tgammaq (__float128 x)\n+__quadmath_gammaq_r (__float128 x, int *signgamp)\n {\n-  /* We don't have a real gamma implementation now.  We'll use lgamma\n-     and the exp function.  But due to the required boundary\n-     conditions we must check some values separately.  */\n   int64_t hx;\n   uint64_t lx;\n-  __float128 res;\n-  int sign;\n+  __float128 ret;\n \n   GET_FLT128_WORDS64 (hx, lx, x);\n \n   if (((hx & 0x7fffffffffffffffLL) | lx) == 0)\n-    /* Return value for x == 0 is Inf with divide by zero exception.  */\n-    return 1.0 / x;\n-\n+    {\n+      /* Return value for x == 0 is Inf with divide by zero exception.  */\n+      *signgamp = 0;\n+      return 1.0 / x;\n+    }\n   if (hx < 0 && (uint64_t) hx < 0xffff000000000000ULL && rintq (x) == x)\n-    /* Return value for integer x < 0 is NaN with invalid exception.  */\n-    return (x - x) / (x - x);\n-\n+    {\n+      /* Return value for integer x < 0 is NaN with invalid exception.  */\n+      *signgamp = 0;\n+      return (x - x) / (x - x);\n+    }\n   if (hx == 0xffff000000000000ULL && lx == 0)\n-    /* x == -Inf.  According to ISO this is NaN.  */\n-    return x - x;\n+    {\n+      /* x == -Inf.  According to ISO this is NaN.  */\n+      *signgamp = 0;\n+      return x - x;\n+    }\n+  if ((hx & 0x7fff000000000000ULL) == 0x7fff000000000000ULL)\n+    {\n+      /* Positive infinity (return positive infinity) or NaN (return\n+\t NaN).  */\n+      *signgamp = 0;\n+      return x + x;\n+    }\n \n-  /* XXX FIXME.  */\n-  res = expq (lgammaq (x));\n-  return signbitq (x) ? -res : res;\n+  if (x >= 1756)\n+    {\n+      /* Overflow.  */\n+      *signgamp = 0;\n+      return FLT128_MAX * FLT128_MAX;\n+    }\n+  else\n+    {\n+      SET_RESTORE_ROUNDF128 (FE_TONEAREST);\n+      if (x > 0)\n+\t{\n+\t  *signgamp = 0;\n+\t  int exp2_adj;\n+\t  ret = gammal_positive (x, &exp2_adj);\n+\t  ret = scalbnq (ret, exp2_adj);\n+\t}\n+      else if (x >= -FLT128_EPSILON / 4)\n+\t{\n+\t  *signgamp = 0;\n+\t  ret = 1 / x;\n+\t}\n+      else\n+\t{\n+\t  __float128 tx = truncq (x);\n+\t  *signgamp = (tx == 2 * truncq (tx / 2)) ? -1 : 1;\n+\t  if (x <= -1775)\n+\t    /* Underflow.  */\n+\t    ret = FLT128_MIN * FLT128_MIN;\n+\t  else\n+\t    {\n+\t      __float128 frac = tx - x;\n+\t      if (frac > 0.5Q)\n+\t\tfrac = 1 - frac;\n+\t      __float128 sinpix = (frac <= 0.25Q\n+\t\t\t\t  ? sinq (M_PIq * frac)\n+\t\t\t\t  : cosq (M_PIq * (0.5Q - frac)));\n+\t      int exp2_adj;\n+\t      ret = M_PIq / (-x * sinpix\n+\t\t\t     * gammal_positive (-x, &exp2_adj));\n+\t      ret = scalbnq (ret, -exp2_adj);\n+\t      math_check_force_underflow_nonneg (ret);\n+\t    }\n+\t}\n+    }\n+  if (isinfq (ret) && x != 0)\n+    {\n+      if (*signgamp < 0)\n+\treturn -(-copysignq (FLT128_MAX, ret) * FLT128_MAX);\n+      else\n+\treturn copysignq (FLT128_MAX, ret) * FLT128_MAX;\n+    }\n+  else if (ret == 0)\n+    {\n+      if (*signgamp < 0)\n+\treturn -(-copysignq (FLT128_MIN, ret) * FLT128_MIN);\n+      else\n+\treturn copysignq (FLT128_MIN, ret) * FLT128_MIN;\n+    }\n+  else\n+    return ret;\n }"}, {"sha": "8f9e56dbac2c6051eca9dfe6cd6ce64c03a6ba90", "filename": "libquadmath/math/tgammaq_product.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftgammaq_product.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftgammaq_product.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftgammaq_product.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -0,0 +1,43 @@\n+/* Compute a product of X, X+1, ..., with an error estimate.\n+   Copyright (C) 2013-2018 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"quadmath-imp.h\"\n+\n+/* Compute the product of X + X_EPS, X + X_EPS + 1, ..., X + X_EPS + N\n+   - 1, in the form R * (1 + *EPS) where the return value R is an\n+   approximation to the product and *EPS is set to indicate the\n+   approximate error in the return value.  X is such that all the\n+   values X + 1, ..., X + N - 1 are exactly representable, and X_EPS /\n+   X is small enough that factors quadratic in it can be\n+   neglected.  */\n+\n+__float128\n+__quadmath_gamma_productq (__float128 x, __float128 x_eps, int n, __float128 *eps)\n+{\n+  SET_RESTORE_ROUNDF128 (FE_TONEAREST);\n+  __float128 ret = x;\n+  *eps = x_eps / x;\n+  for (int i = 1; i < n; i++)\n+    {\n+      *eps += x_eps / (x + i);\n+      __float128 lo;\n+      mul_splitq (&ret, &lo, ret, x + i);\n+      *eps += lo / ret;\n+    }\n+  return ret;\n+}"}, {"sha": "2b9f2fc660925f42c4f89b72da7d0c03a01de8c2", "filename": "libquadmath/math/truncq.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftruncq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Ftruncq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftruncq.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Truncate argument to nearest integral value not larger than the argument.\n-   Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997 and\n \t\t  Jakub Jelinek <jj@ultra.linux.cz>, 1999.\n@@ -15,12 +15,12 @@\n    Lesser General Public License for more details.\n \n    You should have received a copy of the GNU Lesser General Public\n-   License along with the GNU C Library; if not, write to the Free\n-   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-   02111-1307 USA.  */\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n-#include \"quadmath-imp.h\"\n+#define NO_MATH_REDIRECT\n \n+#include \"quadmath-imp.h\"\n \n __float128\n truncq (__float128 x)"}, {"sha": "f58b38afbc38972a491191885d2d232ee24d0707", "filename": "libquadmath/math/x2y2m1q.c", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fx2y2m1q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fmath%2Fx2y2m1q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fx2y2m1q.c?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -1,5 +1,5 @@\n /* Compute x^2 + y^2 - 1, without large cancellation error.\n-   Copyright (C) 2012 Free Software Foundation, Inc.\n+   Copyright (C) 2012-2018 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n \n    The GNU C Library is free software; you can redistribute it and/or\n@@ -17,7 +17,6 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #include \"quadmath-imp.h\"\n-#include <stdlib.h>\n \n /* Calculate X + Y exactly and store the result in *HI + *LO.  It is\n    given that |X| >= |Y| and the values are small enough that no\n@@ -31,18 +30,6 @@ add_split (__float128 *hi, __float128 *lo, __float128 x, __float128 y)\n   *lo = (x - *hi) + y;\n }\n \n-/* Calculate X * Y exactly and store the result in *HI + *LO.  It is\n-   given that the values are small enough that no overflow occurs and\n-   large enough (or zero) that no underflow occurs.  */\n-\n-static inline void\n-mul_split (__float128 *hi, __float128 *lo, __float128 x, __float128 y)\n-{\n-  /* Fast built-in fused multiply-add.  */\n-  *hi = x * y;\n-  *lo = fmaq (x, y, -*hi);\n-}\n-\n /* Compare absolute values of floating-point values pointed to by P\n    and Q for qsort.  */\n \n@@ -60,34 +47,26 @@ compare (const void *p, const void *q)\n }\n \n /* Return X^2 + Y^2 - 1, computed without large cancellation error.\n-   It is given that 1 > X >= Y >= epsilon / 2, and that either X >=\n-   0.75 or Y >= 0.5.  */\n+   It is given that 1 > X >= Y >= epsilon / 2, and that X^2 + Y^2 >=\n+   0.5.  */\n \n __float128\n __quadmath_x2y2m1q (__float128 x, __float128 y)\n {\n-  __float128 vals[4];\n-  size_t i;\n-\n-  /* FIXME:  SET_RESTORE_ROUNDL (FE_TONEAREST);  */\n-  mul_split (&vals[1], &vals[0], x, x);\n-  mul_split (&vals[3], &vals[2], y, y);\n-  if (x >= 0.75Q)\n-    vals[1] -= 1.0Q;\n-  else\n-    {\n-      vals[1] -= 0.5Q;\n-      vals[3] -= 0.5Q;\n-    }\n-  qsort (vals, 4, sizeof (__float128), compare);\n+  __float128 vals[5];\n+  SET_RESTORE_ROUNDF128 (FE_TONEAREST);\n+  mul_splitq (&vals[1], &vals[0], x, x);\n+  mul_splitq (&vals[3], &vals[2], y, y);\n+  vals[4] = -1;\n+  qsort (vals, 5, sizeof (__float128), compare);\n   /* Add up the values so that each element of VALS has absolute value\n      at most equal to the last set bit of the next nonzero\n      element.  */\n-  for (i = 0; i <= 2; i++)\n+  for (size_t i = 0; i <= 3; i++)\n     {\n       add_split (&vals[i + 1], &vals[i], vals[i + 1], vals[i]);\n-      qsort (vals + i + 1, 3 - i, sizeof (__float128), compare);\n+      qsort (vals + i + 1, 4 - i, sizeof (__float128), compare);\n     }\n   /* Now any error from this addition will be small.  */\n-  return vals[3] + vals[2] + vals[1] + vals[0];\n+  return vals[4] + vals[3] + vals[2] + vals[1] + vals[0];\n }"}, {"sha": "8d22248504a06f636f0628930ae929bb5189a13f", "filename": "libquadmath/quadmath-imp.h", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fquadmath-imp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fquadmath-imp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath-imp.h?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -21,10 +21,16 @@ Boston, MA 02110-1301, USA.  */\n #ifndef QUADMATH_IMP_H\n #define QUADMATH_IMP_H\n \n+#include <errno.h>\n+#include <limits.h>\n+#include <stdbool.h>\n #include <stdint.h>\n #include <stdlib.h>\n #include \"quadmath.h\"\n #include \"config.h\"\n+#ifdef HAVE_FENV_H\n+# include <fenv.h>\n+#endif\n \n \n /* Under IEEE 754, an architecture may determine tininess of\n@@ -36,16 +42,35 @@ Boston, MA 02110-1301, USA.  */\n \n #define TININESS_AFTER_ROUNDING   1\n \n+#define HIGH_ORDER_BIT_IS_SET_FOR_SNAN 0\n+\n+#define FIX_FLT128_LONG_CONVERT_OVERFLOW 0\n+#define FIX_FLT128_LLONG_CONVERT_OVERFLOW 0\n \n /* Prototypes for internal functions.  */\n extern int32_t __quadmath_rem_pio2q (__float128, __float128 *);\n extern void __quadmath_kernel_sincosq (__float128, __float128, __float128 *,\n \t\t\t\t       __float128 *, int);\n extern __float128 __quadmath_kernel_sinq (__float128, __float128, int);\n extern __float128 __quadmath_kernel_cosq (__float128, __float128);\n+extern __float128 __quadmath_kernel_tanq (__float128, __float128, int);\n+extern __float128 __quadmath_gamma_productq (__float128, __float128, int,\n+\t\t\t\t\t     __float128 *);\n+extern __float128 __quadmath_gammaq_r (__float128, int *);\n+extern __float128 __quadmath_lgamma_negq (__float128, int *);\n+extern __float128 __quadmath_lgamma_productq (__float128, __float128,\n+\t\t\t\t\t      __float128, int);\n+extern __float128 __quadmath_lgammaq_r (__float128, int *);\n extern __float128 __quadmath_x2y2m1q (__float128 x, __float128 y);\n-extern int __quadmath_isinf_nsq (__float128 x);\n+extern __complex128 __quadmath_kernel_casinhq (__complex128, int);\n \n+static inline void\n+mul_splitq (__float128 *hi, __float128 *lo, __float128 x, __float128 y)\n+{\n+  /* Fast built-in fused multiply-add.  */\n+  *hi = x * y;\n+  *lo = fmaq (x, y, -*hi);\n+}\n \n \n \n@@ -227,4 +252,86 @@ do {                                   \\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* Likewise, for both real and imaginary parts of a complex\n+   result.  */\n+#define math_check_force_underflow_complex(x)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      __typeof (x) force_underflow_complex_tmp = (x);\t\t\t\\\n+      math_check_force_underflow (__real__ force_underflow_complex_tmp); \\\n+      math_check_force_underflow (__imag__ force_underflow_complex_tmp); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#ifndef HAVE_FENV_H\n+# define feraiseexcept(arg) ((void) 0)\n+typedef int fenv_t;\n+# define feholdexcept(arg) ((void) 0)\n+# define fesetround(arg) ((void) 0)\n+# define feupdateenv(arg) ((void) (arg))\n+# define fesetenv(arg) ((void) (arg))\n+# define fetestexcept(arg) 0\n+# define feclearexcept(arg) ((void) 0)\n+#else\n+# ifndef HAVE_FEHOLDEXCEPT\n+#  define feholdexcept(arg) ((void) 0)\n+# endif\n+# ifndef HAVE_FESETROUND\n+#  define fesetround(arg) ((void) 0)\n+# endif\n+# ifndef HAVE_FEUPDATEENV\n+#  define feupdateenv(arg) ((void) (arg))\n+# endif\n+# ifndef HAVE_FESETENV\n+#  define fesetenv(arg) ((void) (arg))\n+# endif\n+# ifndef HAVE_FETESTEXCEPT\n+#  define fetestexcept(arg) 0\n+# endif\n+#endif\n+\n+#ifndef __glibc_likely\n+# define __glibc_likely(cond)\t__builtin_expect ((cond), 1)\n+#endif\n+\n+#ifndef __glibc_unlikely\n+# define __glibc_unlikely(cond)\t__builtin_expect ((cond), 0)\n+#endif\n+\n+#if defined HAVE_FENV_H && defined HAVE_FESETROUND && defined HAVE_FEUPDATEENV\n+struct rm_ctx\n+{\n+  fenv_t env;\n+  bool updated_status;\n+};\n+\n+# define SET_RESTORE_ROUNDF128(RM)\t\t\t\t\t\\\n+  struct rm_ctx ctx __attribute__((cleanup (libc_feresetround_ctx)));\t\\\n+  libc_feholdsetround_ctx (&ctx, (RM))\n+\n+static inline __attribute__ ((always_inline)) void\n+libc_feholdsetround_ctx (struct rm_ctx *ctx, int round)\n+{\n+  ctx->updated_status = false;\n+\n+  /* Update rounding mode only if different.  */\n+  if (__glibc_unlikely (round != fegetround ()))\n+    {\n+      ctx->updated_status = true;\n+      fegetenv (&ctx->env);\n+      fesetround (round);\n+    }\n+}\n+\n+static inline __attribute__ ((always_inline)) void\n+libc_feresetround_ctx (struct rm_ctx *ctx)\n+{\n+  /* Restore the rounding mode if updated.  */\n+  if (__glibc_unlikely (ctx->updated_status))\n+    feupdateenv (&ctx->env);\n+}\n+#else\n+# define SET_RESTORE_ROUNDF128(RM) ((void) 0)\n+#endif\n+\n #endif"}, {"sha": "76275b51b62041e344ea754a3c6ad9efb90cc9ef", "filename": "libquadmath/quadmath.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fquadmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fquadmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.h?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -58,6 +58,7 @@ extern __float128 coshq (__float128) __quadmath_throw;\n extern __float128 cosq (__float128) __quadmath_throw;\n extern __float128 erfq (__float128) __quadmath_throw;\n extern __float128 erfcq (__float128) __quadmath_throw;\n+extern __float128 exp2q (__float128) __quadmath_throw;\n extern __float128 expq (__float128) __quadmath_throw;\n extern __float128 expm1q (__float128) __quadmath_throw;\n extern __float128 fabsq (__float128) __quadmath_throw;\n@@ -73,6 +74,7 @@ extern __float128 hypotq (__float128, __float128) __quadmath_throw;\n extern int isinfq (__float128) __quadmath_throw;\n extern int ilogbq (__float128) __quadmath_throw;\n extern int isnanq (__float128) __quadmath_throw;\n+extern int issignalingq (__float128) __quadmath_throw;\n extern __float128 j0q (__float128) __quadmath_throw;\n extern __float128 j1q (__float128) __quadmath_throw;\n extern __float128 jnq (int, __float128) __quadmath_throw;"}, {"sha": "dbdda7029de59ce040a8e9ec0e59d2c369ee581c", "filename": "libquadmath/quadmath.map", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fquadmath.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fquadmath.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.map?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -101,3 +101,9 @@ QUADMATH_1.1 {\n   global:\n     logbq;\n } QUADMATH_1.0;\n+\n+QUADMATH_1.2 {\n+  global:\n+    exp2q;\n+    issignalingq;\n+} QUADMATH_1.1;"}, {"sha": "f7100ded224b95b1d42357a1a7269d30fdd54fbb", "filename": "libquadmath/quadmath_weak.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fquadmath_weak.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fquadmath_weak.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath_weak.h?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -50,6 +50,7 @@ __qmath3 (coshq)\n __qmath3 (cosq)\n __qmath3 (erfq)\n __qmath3 (erfcq)\n+__qmath3 (exp2q)\n __qmath3 (expq)\n __qmath3 (expm1q)\n __qmath3 (fabsq)\n@@ -65,6 +66,7 @@ __qmath3 (hypotq)\n __qmath3 (ilogbq)\n __qmath3 (isinfq)\n __qmath3 (isnanq)\n+__qmath3 (issignalingq)\n __qmath3 (j0q)\n __qmath3 (j1q)\n __qmath3 (jnq)"}, {"sha": "ca6c9f0c7c774734fed95d53c201b67a60cb8324", "filename": "libquadmath/update-quadmath.py", "status": "added", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fupdate-quadmath.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4239f144ce50c94f2c6cc232028f167b6ebfd506/libquadmath%2Fupdate-quadmath.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fupdate-quadmath.py?ref=4239f144ce50c94f2c6cc232028f167b6ebfd506", "patch": "@@ -0,0 +1,255 @@\n+#!/usr/bin/python3\n+# Update libquadmath code from glibc sources.\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+# This file is part of the libquadmath library.\n+#\n+# Libquadmath is free software; you can redistribute it and/or\n+# modify it under the terms of the GNU Lesser General Public\n+# License as published by the Free Software Foundation; either\n+# version 2.1 of the License, or (at your option) any later version.\n+#\n+# Libquadmath is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+# Lesser General Public License for more details.\n+#\n+# You should have received a copy of the GNU Lesser General Public\n+# License along with libquadmath; if not, see\n+# <https://www.gnu.org/licenses/>.\n+\n+# Usage: update-quadmath.py glibc_srcdir quadmath_srcdir\n+\n+import argparse\n+from collections import defaultdict\n+import os.path\n+import re\n+\n+\n+def replace_in_file(repl_map, extra_map, src, dest):\n+    \"\"\"Apply the replacements in repl_map, then those in extra_map, to the\n+    file src, producing dest.\"\"\"\n+    with open(src, 'r') as src_file:\n+        text = src_file.read()\n+    for re_src, re_repl in sorted(repl_map.items()):\n+        text = re.sub(re_src, re_repl, text)\n+    for re_src, re_repl in sorted(extra_map.items()):\n+        text = re.sub(re_src, re_repl, text)\n+    text = text.rstrip() + '\\n'\n+    with open(dest, 'w') as dest_file:\n+        dest_file.write(text)\n+\n+\n+def update_sources(glibc_srcdir, quadmath_srcdir):\n+    \"\"\"Update libquadmath sources.\"\"\"\n+    glibc_ldbl128 = os.path.join(glibc_srcdir, 'sysdeps/ieee754/ldbl-128')\n+    glibc_math = os.path.join(glibc_srcdir, 'math')\n+    quadmath_math = os.path.join(quadmath_srcdir, 'math')\n+    float128_h = os.path.join(glibc_srcdir,\n+                              'sysdeps/ieee754/float128/float128_private.h')\n+    repl_map = {}\n+    # Use float128_private.h to get an initial list of names to\n+    # replace for libquadmath.\n+    repl_names = {}\n+    with open(float128_h, 'r') as header:\n+        for line in header:\n+            line = line.strip()\n+            if not line.startswith('#define '):\n+                continue\n+            match = re.fullmatch('^#define[ \\t]+([a-zA-Z0-9_]+)'\n+                                 '[ \\t]+([a-zA-Z0-9_]+)', line)\n+            if not match:\n+                continue\n+            macro = match.group(1)\n+            result = match.group(2)\n+            result = result.replace('f128', 'q')\n+            result = result.replace('__ieee754_', '')\n+            if result not in ('__expq_table', '__sincosq_table',\n+                              '__builtin_signbit'):\n+                result = result.replace('__', '')\n+            result = result.replace('_do_not_use', '')\n+            if result in ('rem_pio2q', 'kernel_sincosq', 'kernel_sinq',\n+                          'kernel_cosq', 'kernel_tanq', 'gammaq_r',\n+                          'gamma_productq', 'lgamma_negq', 'lgamma_productq',\n+                          'lgammaq_r', 'x2y2m1q'):\n+                # Internal function names, for which the above removal\n+                # of leading '__' was inappropriate and a leading\n+                # '__quadmath_' needs adding instead.  In the\n+                # libquadmath context, lgammaq_r is an internal name.\n+                result = '__quadmath_' + result\n+            if result == 'ieee854_float128_shape_type':\n+                result = 'ieee854_float128'\n+            if result == 'HUGE_VAL_F128':\n+                result = 'HUGE_VALQ'\n+            repl_names[macro] = result\n+    # More such names that aren't simply defined as object-like macros\n+    # in float128_private.h.\n+    repl_names['_Float128'] = '__float128'\n+    repl_names['SET_RESTORE_ROUNDL'] = 'SET_RESTORE_ROUNDF128'\n+    repl_names['parts32'] = 'words32'\n+    for macro in ('GET_LDOUBLE_LSW64', 'GET_LDOUBLE_MSW64',\n+                  'GET_LDOUBLE_WORDS64', 'SET_LDOUBLE_LSW64',\n+                  'SET_LDOUBLE_MSW64', 'SET_LDOUBLE_WORDS64'):\n+        repl_names[macro] = macro.replace('LDOUBLE', 'FLT128')\n+    # The classication macros are replaced.\n+    for macro in ('FP_NAN', 'FP_INFINITE', 'FP_ZERO', 'FP_SUBNORMAL',\n+                  'FP_NORMAL'):\n+        repl_names[macro] = 'QUAD' + macro\n+    for macro in ('fpclassify', 'signbit', 'isnan', 'isinf', 'issignaling'):\n+        repl_names[macro] = macro + 'q'\n+    repl_names['isfinite'] = 'finiteq'\n+    # Map comparison macros to the __builtin forms.\n+    for macro in ('isgreater', 'isgreaterequal', 'isless', 'islessequal',\n+                  'islessgreater', 'isunordered'):\n+        repl_names[macro] = '__builtin_' + macro\n+    # Replace macros used in type-generic templates in glibc.\n+    repl_names['FLOAT'] = '__float128'\n+    repl_names['CFLOAT'] = '__complex128'\n+    repl_names['M_NAN'] = 'nanq (\"\")'\n+    repl_names['M_HUGE_VAL'] = 'HUGE_VALQ'\n+    repl_names['INFINITY'] = '__builtin_inf ()'\n+    for macro in ('MIN_EXP', 'MAX_EXP', 'MIN', 'MAX', 'MANT_DIG', 'EPSILON'):\n+        repl_names['M_%s' % macro] = 'FLT128_%s' % macro\n+    for macro in ('COPYSIGN', 'FABS', 'SINCOS', 'SCALBN', 'LOG1P', 'ATAN2',\n+                  'COSH', 'EXP', 'HYPOT', 'LOG', 'SINH', 'SQRT'):\n+        repl_names['M_%s' % macro] = macro.lower() + 'q'\n+    # Each such name is replaced when it appears as a whole word.\n+    for macro in repl_names:\n+        repl_map[r'\\b%s\\b' % macro] = repl_names[macro]\n+    # Also replace the L macro for constants; likewise M_LIT and M_MLIT.\n+    repl_map[r'\\bL *\\((.*?)\\)'] = r'\\1Q'\n+    repl_map[r'\\bM_LIT *\\((.*?)\\)'] = r'\\1Q'\n+    repl_map[r'\\bM_MLIT *\\((.*?)\\)'] = r'\\1q'\n+    # M_DECL_FUNC and M_SUF need similar replacements.\n+    repl_map[r'\\bM_DECL_FUNC *\\((?:__)?(?:ieee754_)?(.*?)\\)'] = r'\\1q'\n+    repl_map[r'\\bM_SUF *\\((?:__)?(?:ieee754_)?(.*?)\\)'] = r'\\1q'\n+    # Further adjustments are then needed for certain internal\n+    # functions called via M_SUF.\n+    repl_map[r'\\bx2y2m1q\\b'] = '__quadmath_x2y2m1q'\n+    repl_map[r'\\bkernel_casinhq\\b'] = '__quadmath_kernel_casinhq'\n+    # Replace calls to __set_errno.\n+    repl_map[r'\\b__set_errno *\\((.*?)\\)'] = r'errno = \\1'\n+    # Eliminate glibc diagnostic macros.\n+    repl_map[r' *\\bDIAG_PUSH_NEEDS_COMMENT;'] = ''\n+    repl_map[r' *\\bDIAG_IGNORE_NEEDS_COMMENT *\\(.*?\\);'] = ''\n+    repl_map[r' *\\bDIAG_POP_NEEDS_COMMENT;'] = ''\n+    # Different names used in union.\n+    repl_map[r'\\.d\\b'] = '.value'\n+    repl_map[r'\\bunion ieee854_float128\\b'] = 'ieee854_float128'\n+    # Calls to alias and hidden_def macros are all eliminated.\n+    for macro in ('strong_alias', 'weak_alias', 'libm_alias_ldouble',\n+                  'declare_mgen_alias', 'declare_mgen_finite_alias',\n+                  'libm_hidden_def', 'mathx_hidden_def'):\n+        repl_map[r'\\b%s *\\(.*?\\);?' % macro] = ''\n+    # Replace all #includes with a single include of quadmath-imp.h.\n+    repl_map['(\\n+#include[^\\n]*)+\\n+'] = '\\n\\n#include \"quadmath-imp.h\"\\n\\n'\n+    # Omitted from this list because code comes from more than one\n+    # glibc source file: rem_pio2.  Omitted because of a union not\n+    # currently provided in libquadmath: fma.\n+    ldbl_files = {\n+        'e_acoshl.c': 'acoshq.c', 'e_acosl.c': 'acosq.c',\n+        's_asinhl.c': 'asinhq.c', 'e_asinl.c': 'asinq.c',\n+        'e_atan2l.c': 'atan2q.c', 'e_atanhl.c': 'atanhq.c',\n+        's_atanl.c': 'atanq.c', 's_cbrtl.c': 'cbrtq.c', 's_ceill.c': 'ceilq.c',\n+        's_copysignl.c': 'copysignq.c', 'e_coshl.c': 'coshq.c',\n+        's_cosl.c': 'cosq.c', 'k_cosl.c': 'cosq_kernel.c',\n+        's_erfl.c': 'erfq.c', 's_expm1l.c': 'expm1q.c', 'e_expl.c': 'expq.c',\n+        't_expl.h': 'expq_table.h', 's_fabsl.c': 'fabsq.c',\n+        's_finitel.c': 'finiteq.c', 's_floorl.c': 'floorq.c',\n+        'e_fmodl.c': 'fmodq.c', 's_frexpl.c': 'frexpq.c',\n+        'e_lgammal_r.c': 'lgammaq.c', 'lgamma_negl.c': 'lgammaq_neg.c',\n+        'lgamma_productl.c': 'lgammaq_product.c', 'e_hypotl.c': 'hypotq.c',\n+        'e_ilogbl.c': 'ilogbq.c', 's_isinfl.c': 'isinfq.c',\n+        's_isnanl.c': 'isnanq.c', 's_issignalingl.c': 'issignalingq.c',\n+        'e_j0l.c': 'j0q.c', 'e_j1l.c': 'j1q.c', 'e_jnl.c': 'jnq.c',\n+        's_llrintl.c': 'llrintq.c', 's_llroundl.c': 'llroundq.c',\n+        'e_log10l.c': 'log10q.c', 's_log1pl.c': 'log1pq.c',\n+        'e_log2l.c': 'log2q.c', 's_logbl.c': 'logbq.c', 'e_logl.c': 'logq.c',\n+        's_lrintl.c': 'lrintq.c', 's_lroundl.c': 'lroundq.c',\n+        's_modfl.c': 'modfq.c', 's_nearbyintl.c': 'nearbyintq.c',\n+        's_nextafterl.c': 'nextafterq.c', 'e_powl.c': 'powq.c',\n+        'e_remainderl.c': 'remainderq.c', 's_remquol.c': 'remquoq.c',\n+        's_rintl.c': 'rintq.c', 's_roundl.c': 'roundq.c',\n+        's_scalblnl.c': 'scalblnq.c', 's_scalbnl.c': 'scalbnq.c',\n+        's_signbitl.c': 'signbitq.c', 't_sincosl.c': 'sincos_table.c',\n+        's_sincosl.c': 'sincosq.c', 'k_sincosl.c': 'sincosq_kernel.c',\n+        'e_sinhl.c': 'sinhq.c', 's_sinl.c': 'sinq.c',\n+        'k_sinl.c': 'sinq_kernel.c', 's_tanhl.c': 'tanhq.c',\n+        's_tanl.c': 'tanq.c', 'k_tanl.c': 'tanq_kernel.c',\n+        'e_gammal_r.c': 'tgammaq.c', 'gamma_productl.c': 'tgammaq_product.c',\n+        's_truncl.c': 'truncq.c', 'x2y2m1l.c': 'x2y2m1q.c'\n+        }\n+    template_files = {\n+        's_cacosh_template.c': 'cacoshq.c', 's_cacos_template.c': 'cacosq.c',\n+        's_casinh_template.c': 'casinhq.c',\n+        'k_casinh_template.c': 'casinhq_kernel.c',\n+        's_casin_template.c': 'casinq.c', 's_catanh_template.c': 'catanhq.c',\n+        's_catan_template.c': 'catanq.c', 's_ccosh_template.c': 'ccoshq.c',\n+        's_cexp_template.c': 'cexpq.c', 'cimag_template.c': 'cimagq.c',\n+        's_clog10_template.c': 'clog10q.c', 's_clog_template.c': 'clogq.c',\n+        'conj_template.c': 'conjq.c', 's_cproj_template.c': 'cprojq.c',\n+        'creal_template.c': 'crealq.c', 's_csinh_template.c': 'csinhq.c',\n+        's_csin_template.c': 'csinq.c', 's_csqrt_template.c': 'csqrtq.c',\n+        's_ctanh_template.c': 'ctanhq.c', 's_ctan_template.c': 'ctanq.c',\n+        'e_exp2_template.c': 'exp2q.c', 's_fdim_template.c': 'fdimq.c',\n+        's_fmax_template.c': 'fmaxq.c', 's_fmin_template.c': 'fminq.c',\n+        's_ldexp_template.c': 'ldexpq.c'\n+        }\n+    # Some files have extra substitutions to apply.\n+    extra_maps = defaultdict(dict)\n+    extra_maps['expq.c'] = {r'#include \"quadmath-imp\\.h\"\\n':\n+                            '#include \"quadmath-imp.h\"\\n'\n+                            '#include \"expq_table.h\"\\n'}\n+    extra_maps['ilogbq.c'] = {r'#include \"quadmath-imp\\.h\"\\n':\n+                              '#include <math.h>\\n'\n+                              '#include \"quadmath-imp.h\"\\n'\n+                              '#ifndef FP_ILOGB0\\n'\n+                              '# define FP_ILOGB0 INT_MIN\\n'\n+                              '#endif\\n'\n+                              '#ifndef FP_ILOGBNAN\\n'\n+                              '# define FP_ILOGBNAN INT_MAX\\n'\n+                              '#endif\\n',\n+                              r'return ([A-Z0-9_]+);':\n+                              r'{ errno = EDOM; feraiseexcept (FE_INVALID); '\n+                              r'return \\1; }'}\n+    extra_maps['lgammaq.c'] = {r'#include \"quadmath-imp\\.h\"\\n':\n+                               '#include \"quadmath-imp.h\"\\n'\n+                               '#ifdef HAVE_MATH_H_SIGNGAM\\n'\n+                               '# include <math.h>\\n'\n+                               '#endif\\n'\n+                               '__float128\\n'\n+                               'lgammaq (__float128 x)\\n'\n+                               '{\\n'\n+                               '#ifndef HAVE_MATH_H_SIGNGAM\\n'\n+                               '  int signgam;\\n'\n+                               '#endif\\n'\n+                               '  return __quadmath_lgammaq_r (x, &signgam);\\n'\n+                               '}\\n'}\n+    extra_maps['tgammaq.c'] = {r'#include \"quadmath-imp\\.h\"\\n':\n+                               '#include \"quadmath-imp.h\"\\n'\n+                               '__float128\\n'\n+                               'tgammaq (__float128 x)\\n'\n+                               '{\\n'\n+                               '  int sign;\\n'\n+                               '  __float128 ret;\\n'\n+                               '  ret = __quadmath_gammaq_r (x, &sign);\\n'\n+                               '  return sign < 0 ? -ret : ret;\\n'\n+                               '}\\n'}\n+    for src, dest in ldbl_files.items():\n+        replace_in_file(repl_map, extra_maps[dest],\n+                        os.path.join(glibc_ldbl128, src),\n+                        os.path.join(quadmath_math, dest))\n+    for src, dest in template_files.items():\n+        replace_in_file(repl_map, extra_maps[dest],\n+                        os.path.join(glibc_math, src),\n+                        os.path.join(quadmath_math, dest))\n+\n+def main():\n+    parser = argparse.ArgumentParser(description='Update libquadmath code.')\n+    parser.add_argument('glibc_srcdir', help='glibc source directory')\n+    parser.add_argument('quadmath_srcdir', help='libquadmath source directory')\n+    args = parser.parse_args()\n+    update_sources(args.glibc_srcdir, args.quadmath_srcdir)\n+\n+\n+if __name__ == '__main__':\n+    main()"}]}