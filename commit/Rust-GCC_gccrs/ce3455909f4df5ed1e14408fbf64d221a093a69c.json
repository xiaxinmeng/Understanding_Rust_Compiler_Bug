{"sha": "ce3455909f4df5ed1e14408fbf64d221a093a69c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UzNDU1OTA5ZjRkZjVlZDFlMTQ0MDhmYmY2NGQyMjFhMDkzYTY5Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-03-06T09:00:14Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-06T09:00:14Z"}, "message": "locale_facets.tcc (num_get<>::_M_extract_float, [...]): Prefer plain operator== to traits::eq().\n\n2004-03-06  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float,\n\tnum_get<>::_M_extract_int, num_get<>::do_get(bool&),\n\t__pad<>::_S_pad): Prefer plain operator== to traits::eq().\n\t* testsuite/testsuite_character.h (struct __gnu_test::character):\n\tProvide operator==.\n\t* testsuite/testsuite_hooks.h (struct __gnu_test::pod_char):\n\tLikewise.\n\nFrom-SVN: r79011", "tree": {"sha": "7ec7abc49cca14ff54e4a784eaf98c3183a12eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ec7abc49cca14ff54e4a784eaf98c3183a12eed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce3455909f4df5ed1e14408fbf64d221a093a69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce3455909f4df5ed1e14408fbf64d221a093a69c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce3455909f4df5ed1e14408fbf64d221a093a69c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce3455909f4df5ed1e14408fbf64d221a093a69c/comments", "author": null, "committer": null, "parents": [{"sha": "3fdf09a1fbca1d29b8187daf202a2f9cdd519f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fdf09a1fbca1d29b8187daf202a2f9cdd519f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fdf09a1fbca1d29b8187daf202a2f9cdd519f59"}], "stats": {"total": 98, "additions": 52, "deletions": 46}, "files": [{"sha": "ef11a7ff21b50dda31969586626fd16cf3049161", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3455909f4df5ed1e14408fbf64d221a093a69c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3455909f4df5ed1e14408fbf64d221a093a69c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ce3455909f4df5ed1e14408fbf64d221a093a69c", "patch": "@@ -1,3 +1,13 @@\n+2004-03-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float,\n+\tnum_get<>::_M_extract_int, num_get<>::do_get(bool&),\n+\t__pad<>::_S_pad): Prefer plain operator== to traits::eq().\n+\t* testsuite/testsuite_character.h (struct __gnu_test::character):\n+\tProvide operator==.\n+\t* testsuite/testsuite_hooks.h (struct __gnu_test::pod_char):\n+\tLikewise.\n+\n 2004-03-05  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/27_io/fpos/14320-2.cc: Remove xfail."}, {"sha": "705a11f769ebb8b7367bf561ebbe66189988d095", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 34, "deletions": 46, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3455909f4df5ed1e14408fbf64d221a093a69c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3455909f4df5ed1e14408fbf64d221a093a69c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=ce3455909f4df5ed1e14408fbf64d221a093a69c", "patch": "@@ -182,11 +182,10 @@ namespace std\n       if (__beg != __end)\n \t{\n \t  const char_type __c = *__beg;\n-\t  const bool __plus = __traits_type::eq(__c, __lit[_S_iplus]);\n-\t  if ((__plus || __traits_type::eq(__c, __lit[_S_iminus]))\n-\t      && (!__lc->_M_use_grouping\n-\t\t  || !__traits_type::eq(__c, __lc->_M_thousands_sep))\n-\t      && !__traits_type::eq(__c, __lc->_M_decimal_point))\n+\t  const bool __plus = __c == __lit[_S_iplus];\n+\t  if ((__plus || __c == __lit[_S_iminus])\n+\t      && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n+\t      && !(__c == __lc->_M_decimal_point))\n \t    {\n \t      __xtrc += __plus ? '+' : '-';\n \t      ++__beg;\n@@ -197,11 +196,10 @@ namespace std\n       while (__beg != __end)\n \t{\n \t  const char_type __c = *__beg;\n-\t  if (__lc->_M_use_grouping\n-\t      && __traits_type::eq(__c, __lc->_M_thousands_sep)\n-\t      || __traits_type::eq(__c, __lc->_M_decimal_point))\n+\t  if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep\n+\t      || __c == __lc->_M_decimal_point)\n \t    break;\n-\t  else if (__traits_type::eq(__c, __lit[_S_izero]))\n+\t  else if (__c == __lit[_S_izero])\n \t    {\n \t      if (!__found_mantissa)\n \t\t{\n@@ -228,8 +226,7 @@ namespace std\n \t  // According to 22.2.2.1.2, p8-9, first look for thousands_sep\n \t  // and decimal_point.\n \t  const char_type __c = *__beg;\n-          if (__lc->_M_use_grouping\n-\t      && __traits_type::eq(__c, __lc->_M_thousands_sep))\n+          if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t    {\n \t      if (!__found_dec && !__found_sci)\n \t\t{\n@@ -250,7 +247,7 @@ namespace std\n \t      else\n \t\tbreak;\n             }\n-\t  else if (__traits_type::eq(__c, __lc->_M_decimal_point))\n+\t  else if (__c == __lc->_M_decimal_point)\n \t    {\n \t      if (!__found_dec && !__found_sci)\n \t\t{\n@@ -273,8 +270,7 @@ namespace std\n \t      ++__sep_pos;\n \t      ++__beg;\n \t    }\n-\t  else if ((__traits_type::eq(__c, __lit[_S_ie])\n-\t\t    || __traits_type::eq(__c, __lit[_S_iE]))\n+\t  else if ((__c == __lit[_S_ie] || __c == __lit[_S_iE])\n \t\t   && __found_mantissa && !__found_sci)\n \t    {\n \t      // Scientific notation.\n@@ -286,12 +282,11 @@ namespace std\n \t      // Remove optional plus or minus sign, if they exist.\n \t      if (++__beg != __end)\n \t\t{\n-\t\t  const bool __plus = __traits_type::eq(*__beg,\n-\t\t\t\t\t\t\t__lit[_S_iplus]);\n-\t\t  if ((__plus || __traits_type::eq(*__beg, __lit[_S_iminus]))\n-\t\t      && (!__lc->_M_use_grouping\n-\t\t\t  || !__traits_type::eq(*__beg, __lc->_M_thousands_sep))\n-\t\t      && !__traits_type::eq(*__beg, __lc->_M_decimal_point))\n+\t\t  const bool __plus = *__beg == __lit[_S_iplus];\n+\t\t  if ((__plus || *__beg == __lit[_S_iminus])\n+\t\t      && !(__lc->_M_use_grouping\n+\t\t\t   && *__beg == __lc->_M_thousands_sep)\n+\t\t      && !(*__beg == __lc->_M_decimal_point))\n \t\t    {\n \t\t      __xtrc += __plus ? '+' : '-';\n \t\t      ++__beg;\n@@ -351,11 +346,10 @@ namespace std\n \t  {\n \t    const char_type __c = *__beg;\n \t    if (numeric_limits<_ValueT>::is_signed)\n-\t      __negative = __traits_type::eq(__c, __lit[_S_iminus]);\n-\t    if ((__negative || __traits_type::eq(__c, __lit[_S_iplus]))\n-\t\t&& (!__lc->_M_use_grouping\n-\t\t    || !__traits_type::eq(__c, __lc->_M_thousands_sep))\n-\t\t&& !__traits_type::eq(__c, __lc->_M_decimal_point))\n+\t      __negative = __c == __lit[_S_iminus];\n+\t    if ((__negative || __c == __lit[_S_iplus])\n+\t\t&& !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n+\t\t&& !(__c == __lc->_M_decimal_point))\n \t      ++__beg;\n \t  }\n \n@@ -364,20 +358,17 @@ namespace std\n \twhile (__beg != __end)\n \t  {\n \t    const char_type __c = *__beg;\n-\t    if (__lc->_M_use_grouping\n-\t\t&& __traits_type::eq(__c, __lc->_M_thousands_sep)\n-\t\t|| __traits_type::eq(__c, __lc->_M_decimal_point))\n+\t    if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep\n+\t\t|| __c == __lc->_M_decimal_point)\n \t      break;\n-\t    else if (__traits_type::eq(__c, __lit[_S_izero])\n-\t\t     && (!__found_num || __base == 10))\n+\t    else if (__c == __lit[_S_izero] && (!__found_num || __base == 10))\n \t      {\n \t\t__found_num = true;\n \t\t++__beg;\n \t      }\n \t    else if (__found_num)\n \t      {\n-\t\tif (__traits_type::eq(__c, __lit[_S_ix])\n-\t\t    || __traits_type::eq(__c, __lit[_S_iX]))\n+\t\tif (__c == __lit[_S_ix] || __c == __lit[_S_iX])\n \t\t  {\n \t\t    if (__basefield == 0)\n \t\t      __base = 16;\n@@ -416,8 +407,7 @@ namespace std\n \t\t// According to 22.2.2.1.2, p8-9, first look for thousands_sep\n \t\t// and decimal_point.\n \t\tconst char_type __c = *__beg;\n-\t\tif (__lc->_M_use_grouping\n-\t\t    && __traits_type::eq(__c, __lc->_M_thousands_sep))\n+\t\tif (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t\t  {\n \t\t    // NB: Thousands separator at the beginning of a string\n \t\t    // is a no-no, as is two consecutive thousands separators.\n@@ -432,7 +422,7 @@ namespace std\n \t\t\tbreak;\n \t\t      }\n \t\t  }\n-\t\telse if (__traits_type::eq(__c, __lc->_M_decimal_point))\n+\t\telse if (__c == __lc->_M_decimal_point)\n \t\t  break;\n \t\telse if (__q = __traits_type::find(__lit_zero, __len, __c))\n \t\t  {\n@@ -462,8 +452,7 @@ namespace std\n \t    for (; __beg != __end; ++__beg)\n \t      {\n \t\tconst char_type __c = *__beg;\n-\t\tif (__lc->_M_use_grouping\n-\t\t    && __traits_type::eq(__c, __lc->_M_thousands_sep))\n+\t\tif (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t\t  {\n \t\t    if (__sep_pos)\n \t\t      {\n@@ -476,7 +465,7 @@ namespace std\n \t\t\tbreak;\n \t\t      }\n \t\t  }\n-\t\telse if (__traits_type::eq(__c, __lc->_M_decimal_point))\n+\t\telse if (__c == __lc->_M_decimal_point)\n \t\t  break;\n \t\telse if (__q = __traits_type::find(__lit_zero, __len, __c))\n \t\t  {\n@@ -560,13 +549,13 @@ namespace std\n             {\n \t      if (__testf)\n \t\tif (__n < __lc->_M_falsename_size)\n-\t\t  __testf = __traits_type::eq(*__beg, __lc->_M_falsename[__n]);\n+\t\t  __testf = *__beg == __lc->_M_falsename[__n];\n \t\telse\n \t\t  break;\n \n \t      if (__testt)\n \t\tif (__n < __lc->_M_truename_size)\n-\t\t  __testt = __traits_type::eq(*__beg, __lc->_M_truename[__n]);\n+\t\t  __testt = *__beg == __lc->_M_truename[__n];\n \t\telse\n \t\t  break;\n \n@@ -2330,13 +2319,12 @@ namespace std\n           const locale& __loc = __io._M_getloc();\n \t  const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);\n \n-\t  const bool __testsign = _Traits::eq(__ctype.widen('-'), __olds[0])\n-\t                          || _Traits::eq(__ctype.widen('+'), __olds[0]);\n-\t  const bool __testhex = (_Traits::eq(__ctype.widen('0'), __olds[0])\n+\t  const bool __testsign = (__ctype.widen('-') == __olds[0]\n+\t\t\t\t   || __ctype.widen('+') == __olds[0]);\n+\t  const bool __testhex = (__ctype.widen('0') == __olds[0]\n \t\t\t\t  && __oldlen > 1\n-\t\t\t\t  && (_Traits::eq(__ctype.widen('x'), __olds[1])\n-\t\t\t\t      || _Traits::eq(__ctype.widen('X'),\n-\t\t\t\t\t\t     __olds[1])));\n+\t\t\t\t  && (__ctype.widen('x') == __olds[1]\n+\t\t\t\t      || __ctype.widen('X') == __olds[1]));\n \t  if (__testhex)\n \t    {\n \t      __news[0] = __olds[0];"}, {"sha": "9442fe13341e6a9b4bfd10ab065d7a4df3e91466", "filename": "libstdc++-v3/testsuite/testsuite_character.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3455909f4df5ed1e14408fbf64d221a093a69c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3455909f4df5ed1e14408fbf64d221a093a69c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_character.h?ref=ce3455909f4df5ed1e14408fbf64d221a093a69c", "patch": "@@ -51,6 +51,10 @@ namespace __gnu_test\n     }\n   };\n \n+  inline bool\n+  operator==(const character& lhs, const character& rhs)\n+  { return lhs.val == rhs.val; }\n+\n   // State type.\n   struct conversion_state\n   {"}, {"sha": "e36162ad23b077c16b46e3a6bb87a9857f0a7a08", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce3455909f4df5ed1e14408fbf64d221a093a69c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce3455909f4df5ed1e14408fbf64d221a093a69c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=ce3455909f4df5ed1e14408fbf64d221a093a69c", "patch": "@@ -152,6 +152,10 @@ namespace __gnu_test\n   {\n     unsigned char c;\n   };\n+\n+  inline bool\n+  operator==(const pod_char& lhs, const pod_char& rhs)\n+  { return lhs.c == rhs.c; }\n   \n   struct pod_int\n   {"}]}