{"sha": "ffb112289452f58fbf00a4e57c0d7de930aca6b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiMTEyMjg5NDUyZjU4ZmJmMDBhNGU1N2MwZDdkZTkzMGFjYTZiMQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-12T12:13:27Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-28T20:12:46Z"}, "message": "aarch64: Use RTL builtins for v[q]tbl intrinsics\n\nRewrite v[q]tbl Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-02-12  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add tbl1 builtin\n\tgenerator macros.\n\t* config/aarch64/arm_neon.h (vqtbl1_p8): Use RTL builtin\n\tinstead of inline asm.\n\t(vqtbl1_s8): Likewise.\n\t(vqtbl1_u8): Likewise.\n\t(vqtbl1q_p8): Likewise.\n\t(vqtbl1q_s8): Likewise.\n\t(vqtbl1q_u8): Likewise.\n\t(vtbl1_s8): Likewise.\n\t(vtbl1_u8): Likewise.\n\t(vtbl1_p8): Likewise.\n\t(vtbl2_s8): Likewise.\n\t(vtbl2_u8): Likewise.\n\t(vtbl2_p8): Likewise.", "tree": {"sha": "6d304c794924e04c633ffdc0415c4ca10c43d002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d304c794924e04c633ffdc0415c4ca10c43d002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffb112289452f58fbf00a4e57c0d7de930aca6b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb112289452f58fbf00a4e57c0d7de930aca6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb112289452f58fbf00a4e57c0d7de930aca6b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb112289452f58fbf00a4e57c0d7de930aca6b1/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d66367a71ef969235e10c77685f5ca4551bf519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d66367a71ef969235e10c77685f5ca4551bf519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d66367a71ef969235e10c77685f5ca4551bf519"}], "stats": {"total": 113, "additions": 32, "deletions": 81}, "files": [{"sha": "04b392bf3d007cdb933293cba705a79e10096dee", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb112289452f58fbf00a4e57c0d7de930aca6b1/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb112289452f58fbf00a4e57c0d7de930aca6b1/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=ffb112289452f58fbf00a4e57c0d7de930aca6b1", "patch": "@@ -696,6 +696,10 @@\n   VAR1 (BINOP, tbl3, 0, NONE, v8qi)\n   VAR1 (BINOP, tbl3, 0, NONE, v16qi)\n \n+  /* Implemented by aarch64_tbl1<mode>.  */\n+  VAR2 (BINOP, tbl1, 0, NONE, v8qi, v16qi)\n+  VAR2 (BINOPU, tbl1, 0, NONE, v8qi, v16qi)\n+\n   /* Implemented by aarch64_qtbl3<mode>.  */\n   VAR1 (BINOP, qtbl3, 0, NONE, v8qi)\n   VAR1 (BINOP, qtbl3, 0, NONE, v16qi)"}, {"sha": "08171290c3bbb5493ec38b1a14d360920e5c149d", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 28, "deletions": 81, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb112289452f58fbf00a4e57c0d7de930aca6b1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb112289452f58fbf00a4e57c0d7de930aca6b1/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=ffb112289452f58fbf00a4e57c0d7de930aca6b1", "patch": "@@ -9579,74 +9579,46 @@ vqrdmulhq_laneq_s32 (int32x4_t __a, int32x4_t __b, const int __c)\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqtbl1_p8 (poly8x16_t __a, uint8x8_t __b)\n+vqtbl1_p8 (poly8x16_t __tab, uint8x8_t __idx)\n {\n-  poly8x8_t __result;\n-  __asm__ (\"tbl %0.8b, {%1.16b}, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (poly8x8_t) __builtin_aarch64_tbl1v8qi ((int8x16_t) __tab,\n+\t\t\t\t\t\t (int8x8_t) __idx);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqtbl1_s8 (int8x16_t __a, uint8x8_t __b)\n+vqtbl1_s8 (int8x16_t __tab, uint8x8_t __idx)\n {\n-  int8x8_t __result;\n-  __asm__ (\"tbl %0.8b, {%1.16b}, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbl1v8qi (__tab, (int8x8_t) __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqtbl1_u8 (uint8x16_t __a, uint8x8_t __b)\n+vqtbl1_u8 (uint8x16_t __tab, uint8x8_t __idx)\n {\n-  uint8x8_t __result;\n-  __asm__ (\"tbl %0.8b, {%1.16b}, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbl1v8qi_uuu (__tab, __idx);\n }\n \n __extension__ extern __inline poly8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqtbl1q_p8 (poly8x16_t __a, uint8x16_t __b)\n+vqtbl1q_p8 (poly8x16_t __tab, uint8x16_t __idx)\n {\n-  poly8x16_t __result;\n-  __asm__ (\"tbl %0.16b, {%1.16b}, %2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return (poly8x16_t) __builtin_aarch64_tbl1v16qi ((int8x16_t) __tab,\n+\t\t\t\t\t\t   (int8x16_t) __idx);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqtbl1q_s8 (int8x16_t __a, uint8x16_t __b)\n+vqtbl1q_s8 (int8x16_t __tab, uint8x16_t __idx)\n {\n-  int8x16_t __result;\n-  __asm__ (\"tbl %0.16b, {%1.16b}, %2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbl1v16qi (__tab, (int8x16_t) __idx);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n-vqtbl1q_u8 (uint8x16_t __a, uint8x16_t __b)\n+vqtbl1q_u8 (uint8x16_t __tab, uint8x16_t __idx)\n {\n-  uint8x16_t __result;\n-  __asm__ (\"tbl %0.16b, {%1.16b}, %2.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbl1v16qi_uuu (__tab, __idx);\n }\n \n __extension__ extern __inline int8x8_t\n@@ -9727,78 +9699,53 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl1_s8 (int8x8_t __tab, int8x8_t __idx)\n {\n-  int8x8_t __result;\n-  int8x16_t __temp = vcombine_s8 (__tab, vcreate_s8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"tbl %0.8b, {%1.16b}, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__temp), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  int8x16_t __temp = vcombine_s8 (__tab,\n+\t\t\t\t  vcreate_s8 (__AARCH64_UINT64_C (0x0)));\n+  return __builtin_aarch64_tbl1v8qi (__temp, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl1_u8 (uint8x8_t __tab, uint8x8_t __idx)\n {\n-  uint8x8_t __result;\n-  uint8x16_t __temp = vcombine_u8 (__tab, vcreate_u8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"tbl %0.8b, {%1.16b}, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__temp), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  uint8x16_t __temp = vcombine_u8 (__tab,\n+\t\t\t\t   vcreate_u8 (__AARCH64_UINT64_C (0x0)));\n+  return __builtin_aarch64_tbl1v8qi_uuu (__temp, __idx);\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl1_p8 (poly8x8_t __tab, uint8x8_t __idx)\n {\n-  poly8x8_t __result;\n-  poly8x16_t __temp = vcombine_p8 (__tab, vcreate_p8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"tbl %0.8b, {%1.16b}, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__temp), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  poly8x16_t __temp = vcombine_p8 (__tab,\n+\t\t\t\t   vcreate_p8 (__AARCH64_UINT64_C (0x0)));\n+  return (poly8x8_t) __builtin_aarch64_tbl1v8qi ((int8x16_t) __temp,\n+\t\t\t\t\t\t (int8x8_t) __idx);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl2_s8 (int8x8x2_t __tab, int8x8_t __idx)\n {\n-  int8x8_t __result;\n   int8x16_t __temp = vcombine_s8 (__tab.val[0], __tab.val[1]);\n-  __asm__ (\"tbl %0.8b, {%1.16b}, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__temp), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbl1v8qi (__temp, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl2_u8 (uint8x8x2_t __tab, uint8x8_t __idx)\n {\n-  uint8x8_t __result;\n   uint8x16_t __temp = vcombine_u8 (__tab.val[0], __tab.val[1]);\n-  __asm__ (\"tbl %0.8b, {%1.16b}, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__temp), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_tbl1v8qi_uuu (__temp, __idx);\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl2_p8 (poly8x8x2_t __tab, uint8x8_t __idx)\n {\n-  poly8x8_t __result;\n   poly8x16_t __temp = vcombine_p8 (__tab.val[0], __tab.val[1]);\n-  __asm__ (\"tbl %0.8b, {%1.16b}, %2.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__temp), \"w\"(__idx)\n-           : /* No clobbers */);\n-  return __result;\n+  return (poly8x8_t) __builtin_aarch64_tbl1v8qi ((int8x16_t) __temp,\n+\t\t\t\t\t\t (int8x8_t) __idx);\n }\n \n __extension__ extern __inline int8x8_t"}]}