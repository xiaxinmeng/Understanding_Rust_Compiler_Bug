{"sha": "0c3de9003f8e0684664149aec9628c8c5b73d62a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMzZGU5MDAzZjhlMDY4NDY2NDE0OWFlYzk2MjhjOGM1YjczZDYyYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-10-11T21:48:54Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-10-11T21:48:54Z"}, "message": "Convert ext/hash_map, set to tr1/functional, tr1/unordered_map, set.\n\n2007-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tConvert ext/hash_map, set to tr1/functional, tr1/unordered_map, set.\n\t* include/ext/rope: Use tr1/functional hash instead of ext/hash_fun.h.\n\t* include/ext/pb_ds/detail/standard_policies.hpp: Same.\n\t* include/precompiled/extc++.h: Remove hash_map, hash_set.\n\t* testsuite/util/testsuite_abi.h (__gnu_cxx): Use unordered_map\n\tinstead of hash_map. Remove hash specialization for string.\n\t* testsuite/util/testsuite_abi.cc: Include <vector>.\n\t* testsuite/util/native_type/assoc/native_hash_set.hpp: Remove\n\thash_set code.\n\t* testsuite/util/native_type/assoc/native_hash_map.hpp: Remove\n\thash_map code.\n\t* testsuite/util/native_type/assoc/native_hash_multimap.hpp:\n\tChange hash_multimap to unordered_multimap.\n\t* testsuite/util/testsuite_common_types.h: Remove hash_map, hash_set.\n\t* testsuite/ext/headers.cc: Same.\n\t* testsuite/17_intro/headers/all_c++200x_compatibility.cc: Remove\n\thash_map.h, hash_set.h.\n\t* testsuite/17_intro/headers/all.cc: Same.\n\t* testsuite/17_intro/headers/all_pedantic_errors.cc: Same.\n\n\t* include/ext/pb_ds/detail/standard_policies.hpp: Format.\n\t* testsuite/util/native_type/assoc/native_set.hpp: Same, \n\tupdate comment.\n\t* testsuite/util/native_type/assoc/native_map.hpp: Same.\n\t* testsuite/util/native_type/assoc/native_multimap.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/\n\tmultimap_insert_test.hpp: Same.\n\t* testsuite/util/performance/assoc/timing/multimap_find_test.hpp: Same.\n\nFrom-SVN: r129243", "tree": {"sha": "e598b6bde9e2ff6b64640158545d8f70dfec1abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e598b6bde9e2ff6b64640158545d8f70dfec1abc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c3de9003f8e0684664149aec9628c8c5b73d62a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3de9003f8e0684664149aec9628c8c5b73d62a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3de9003f8e0684664149aec9628c8c5b73d62a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3de9003f8e0684664149aec9628c8c5b73d62a/comments", "author": null, "committer": null, "parents": [{"sha": "d1cf5fcabd07a1b842ea2d88f00e5f1195efb528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1cf5fcabd07a1b842ea2d88f00e5f1195efb528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1cf5fcabd07a1b842ea2d88f00e5f1195efb528"}], "stats": {"total": 322, "additions": 107, "deletions": 215}, "files": [{"sha": "f5e60e8529ced4401469a9f68d8eca1cbfeb31db", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -1,3 +1,34 @@\n+2007-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tConvert ext/hash_map, set to tr1/functional, tr1/unordered_map, set.\n+\t* include/ext/rope: Use tr1/functional hash instead of ext/hash_fun.h.\n+\t* include/ext/pb_ds/detail/standard_policies.hpp: Same.\n+\t* include/precompiled/extc++.h: Remove hash_map, hash_set.\n+\t* testsuite/util/testsuite_abi.h (__gnu_cxx): Use unordered_map\n+\tinstead of hash_map. Remove hash specialization for string.\n+\t* testsuite/util/testsuite_abi.cc: Include <vector>.\n+\t* testsuite/util/native_type/assoc/native_hash_set.hpp: Remove\n+\thash_set code.\n+\t* testsuite/util/native_type/assoc/native_hash_map.hpp: Remove\n+\thash_map code.\n+\t* testsuite/util/native_type/assoc/native_hash_multimap.hpp:\n+\tChange hash_multimap to unordered_multimap.\n+\t* testsuite/util/testsuite_common_types.h: Remove hash_map, hash_set.\n+\t* testsuite/ext/headers.cc: Same.\n+\t* testsuite/17_intro/headers/all_c++200x_compatibility.cc: Remove\n+\thash_map.h, hash_set.h.\n+\t* testsuite/17_intro/headers/all.cc: Same.\n+\t* testsuite/17_intro/headers/all_pedantic_errors.cc: Same.\n+\n+\t* include/ext/pb_ds/detail/standard_policies.hpp: Format.\n+\t* testsuite/util/native_type/assoc/native_set.hpp: Same, \n+\tupdate comment.\n+\t* testsuite/util/native_type/assoc/native_map.hpp: Same.\n+\t* testsuite/util/native_type/assoc/native_multimap.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/\n+\tmultimap_insert_test.hpp: Same.\n+\t* testsuite/util/performance/assoc/timing/multimap_find_test.hpp: Same.\n+\n 2007-10-11  Chris Jefferson  <chris@bubblescope.net>\n \t    Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "47bc143090b923eae99636407e27b2cd45d77da3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/standard_policies.hpp", "status": "modified", "additions": 26, "deletions": 47, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fstandard_policies.hpp?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -54,7 +54,7 @@\n #include <ext/pb_ds/detail/basic_tree_policy/null_node_metadata.hpp>\n #include <ext/pb_ds/trie_policy.hpp>\n #include <ext/pb_ds/tag_and_trait.hpp>\n-#include <ext/hash_map>\n+#include <tr1/functional>\n \n namespace __gnu_pbds\n {\n@@ -63,13 +63,13 @@ namespace __gnu_pbds\n     template<typename Key>\n     struct default_hash_fn\n     {\n-      typedef __gnu_cxx::hash< Key> type;\n+      typedef std::tr1::hash<Key> type;\n     };\n \n     template<typename Key>\n     struct default_eq_fn\n     {\n-      typedef std::equal_to< Key> type;\n+      typedef std::equal_to<Key> type;\n     };\n \n     enum\n@@ -88,27 +88,17 @@ namespace __gnu_pbds\n     private:\n       typedef typename Comb_Hash_Fn::size_type size_type;\n \n-      typedef\n-      typename __conditional_type<\n-\tis_same<\n-\t__gnu_pbds::direct_mask_range_hashing<\n-\tsize_type>,\n-\tComb_Hash_Fn>::value,\n-\t__gnu_pbds::hash_exponential_size_policy<\n-\tsize_type>,\n-\t__gnu_pbds::hash_prime_size_policy>::__type\n-      size_policy_type;\n+      typedef __gnu_pbds::direct_mask_range_hashing<size_type> default_fn;\n+      typedef is_same<default_fn, Comb_Hash_Fn> same_type;\n+      typedef __gnu_pbds::hash_exponential_size_policy<size_type> iftrue;\n+      typedef __gnu_pbds::hash_prime_size_policy iffalse;\n+      typedef __conditional_type<same_type::value, iftrue, iffalse> cond_type;\n+      typedef typename cond_type::__type size_policy_type;\n+\n+      typedef __gnu_pbds::hash_load_check_resize_trigger<false, size_type> trigger;\n \n     public:\n-      typedef\n-      __gnu_pbds::hash_standard_resize_policy<\n-      size_policy_type,\n-      __gnu_pbds::hash_load_check_resize_trigger<\n-      false,\n-      size_type>,\n-      false,\n-      size_type>\n-      type;\n+      typedef __gnu_pbds::hash_standard_resize_policy<size_policy_type, trigger, false, size_type> type;\n     };\n \n     struct default_update_policy\n@@ -122,38 +112,27 @@ namespace __gnu_pbds\n     private:\n       typedef typename Comb_Probe_Fn::size_type size_type;\n \n+      typedef __gnu_pbds::direct_mask_range_hashing<size_type> default_fn;\n+      typedef is_same<default_fn, Comb_Probe_Fn> same_type;\n+      typedef __gnu_pbds::linear_probe_fn<size_type> iftrue;\n+      typedef __gnu_pbds::quadratic_probe_fn<size_type> iffalse;\n+      typedef __conditional_type<same_type::value, iftrue, iffalse> cond_type;\n+\n     public:\n-      typedef\n-      typename __conditional_type<\n-      is_same<\n-      __gnu_pbds::direct_mask_range_hashing<size_t>,\n-      Comb_Probe_Fn>::value,\n-      __gnu_pbds::linear_probe_fn<\n-      size_type>,\n-      __gnu_pbds::quadratic_probe_fn<\n-      size_type> >::__type\n-      type;\n+      typedef typename cond_type::__type type;\n     };\n \n     template<typename Key>\n     struct default_trie_e_access_traits;\n \n     template<typename Char, class Char_Traits>\n-    struct default_trie_e_access_traits<\n-      std::basic_string<\n-      Char,\n-      Char_Traits,\n-      std::allocator<\n-      char> > >\n+    struct default_trie_e_access_traits<std::basic_string<Char, Char_Traits, std::allocator<char> > >\n     {\n-      typedef\n-      __gnu_pbds::string_trie_e_access_traits<\n-\tstd::basic_string<\n-\tChar,\n-\tChar_Traits,\n-\tstd::allocator<\n-\tchar> > >\n-      type;\n+    private:\n+      typedef std::basic_string<Char, Char_Traits, std::allocator<char> > string_type;\n+\n+    public:\n+      typedef __gnu_pbds::string_trie_e_access_traits<string_type> type;\n     };\n \n   } // namespace detail"}, {"sha": "ed1df5bc925b6071165089343129d75374276a3a", "filename": "libstdc++-v3/include/ext/rope", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frope?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -56,8 +56,8 @@\n #include <bits/stl_function.h>\n #include <bits/stl_numeric.h>\n #include <bits/allocator.h>\n-#include <ext/hash_fun.h>\n #include <bits/gthr.h>\n+#include <tr1/functional>\n \n # ifdef __GC\n #   define __GC_CONST const\n@@ -2906,12 +2906,18 @@ protected:\n     swap(rope<_CharT, _Alloc>& __x, rope<_CharT, _Alloc>& __y)\n     { __x.swap(__y); }\n \n-  // Hash functions should probably be revisited later:\n+_GLIBCXX_END_NAMESPACE\n+\n+\n+namespace std\n+{ \n+namespace tr1\n+{\n   template<>\n-    struct hash<crope>\n+    struct hash<__gnu_cxx::crope>\n     {\n       size_t\n-      operator()(const crope& __str) const\n+      operator()(const __gnu_cxx::crope& __str) const\n       {\n \tsize_t __size = __str.size();\n \tif (0 == __size)\n@@ -2922,19 +2928,19 @@ protected:\n \n \n   template<>\n-    struct hash<wrope>\n+    struct hash<__gnu_cxx::wrope>\n     {\n       size_t\n-      operator()(const wrope& __str) const\n+      operator()(const __gnu_cxx::wrope& __str) const\n       {\n \tsize_t __size = __str.size();\n \tif (0 == __size)\n \t  return 0;\n \treturn 13 * __str[0] + 5 * __str[__size - 1] + __size;\n       }\n     };\n-\n-_GLIBCXX_END_NAMESPACE\n+} // namespace tr1\n+} // namespace std\n \n # include <ext/ropeimpl.h>\n "}, {"sha": "8d0b3de90b73264bc7787f5e13fe76e2f38a811b", "filename": "libstdc++-v3/include/precompiled/extc++.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -40,8 +40,6 @@\n #include <ext/concurrence.h>\n #include <ext/debug_allocator.h>\n #include <ext/functional>\n-#include <ext/hash_map>\n-#include <ext/hash_set>\n #include <ext/iterator>\n #include <ext/malloc_allocator.h>\n #include <ext/memory>"}, {"sha": "662bad6b10f89d45a5183ea41bfd7793a2ef9a11", "filename": "libstdc++-v3/testsuite/17_intro/headers/all.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall.cc?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -117,8 +117,6 @@\n #include <ext/debug_allocator.h>\n #include <ext/enc_filebuf.h>\n #include <ext/functional>\n-#include <ext/hash_map>\n-#include <ext/hash_set>\n #include <ext/iterator>\n #include <ext/malloc_allocator.h>\n #include <ext/memory>"}, {"sha": "9410805a0857bb3ab2b7fba082aa3350f92d1f5d", "filename": "libstdc++-v3/testsuite/17_intro/headers/all_c++200x_compatibility.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_c%2B%2B200x_compatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_c%2B%2B200x_compatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_c%2B%2B200x_compatibility.cc?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -118,8 +118,6 @@\n #include <ext/debug_allocator.h>\n #include <ext/enc_filebuf.h>\n #include <ext/functional>\n-#include <ext/hash_map>\n-#include <ext/hash_set>\n #include <ext/iterator>\n #include <ext/malloc_allocator.h>\n #include <ext/memory>"}, {"sha": "2b72a3928a52eee84a2b8cb26b89fbb32cb51156", "filename": "libstdc++-v3/testsuite/17_intro/headers/all_pedantic_errors.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_pedantic_errors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_pedantic_errors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fall_pedantic_errors.cc?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -118,8 +118,6 @@\n #include <ext/debug_allocator.h>\n #include <ext/enc_filebuf.h>\n #include <ext/functional>\n-#include <ext/hash_map>\n-#include <ext/hash_set>\n #include <ext/iterator>\n #include <ext/malloc_allocator.h>\n #include <ext/memory>"}, {"sha": "a1bdbb350f5b3b851cb6445269eb431a1ac774b2", "filename": "libstdc++-v3/testsuite/ext/headers.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // 1999-06-23 bkoz \n \n-// Copyright (C) 1999, 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2003, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,8 +33,6 @@\n #include <ext/debug_allocator.h>\n #include <ext/enc_filebuf.h>\n #include <ext/functional>\n-#include <ext/hash_map>\n-#include <ext/hash_set>\n #include <ext/iterator>\n #include <ext/malloc_allocator.h>\n #include <ext/memory>"}, {"sha": "5db3611060137d0ac98f3d4c25ee3310ecc05b94", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_map.hpp", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_map.hpp?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -41,7 +41,7 @@\n \n /**\n  * @file native_hash_map.hpp\n- * Contains an adapter to Dinkumware/SGI hash tables\n+ * Contains an adapter to TR1 unordered containers.\n  */\n \n #ifndef PB_DS_NATIVE_HASH_MAP_HPP\n@@ -52,40 +52,23 @@\n #include <ext/pb_ds/detail/standard_policies.hpp>\n #include <native_type/assoc/native_hash_tag.hpp>\n #include <io/xml.hpp>\n-\n-// Default to using tr1.\n-#define PB_DS_USE_TR1 1\n-\n-#ifdef PB_DS_USE_TR1\n #include <tr1/unordered_map>\n-#else\n-#include <ext/hash_map>\n-#endif \n \n namespace __gnu_pbds\n {\n   namespace test\n   {\n-#ifdef PB_DS_USE_TR1\n #define PB_DS_BASE_C_DEC \\\n     std::tr1::__unordered_map<Key, Data, Hash_Fn, Eq_Fn, \\\n     typename Allocator::template rebind<std::pair<const Key, Data> >::other, Cache_Hash>\n-#else \n-#define PB_DS_BASE_C_DEC \\\n-    __gnu_cxx::hash_map<Key, Data, Hash_Fn, Eq_Fn, \\\n-    typename Allocator::template rebind<std::pair<const Key, Data> >::other>\n-#endif\n \n     template<typename Key,\n \t     typename Data,\n \t     size_t Init_Size = 8,\n \t     typename Hash_Fn = typename __gnu_pbds::detail::default_hash_fn<Key>::type,\n \t     typename Eq_Fn = std::equal_to<Key>,\n \t     typename Less_Fn = std::less<Key>,\n-\t     typename Allocator = std::allocator<char>\n-#ifdef PB_DS_USE_TR1\n-\t     , bool Cache_Hash = false\n-#endif\n+\t     typename Allocator = std::allocator<char>, bool Cache_Hash = false\n \t     >\n     class native_hash_map : public PB_DS_BASE_C_DEC\n     {\n@@ -104,28 +87,20 @@ namespace __gnu_pbds\n       static std::string\n       name()\n       {\n-#ifdef PB_DS_USE_TR1\n         return std::string(\"n_hash_map_\") \n                + (Cache_Hash ? std::string(\"cah\") : std::string(\"ncah\"));\n-#else \n-        return std::string(\"n_hash_map_ncah\");\n-#endif\n       }\n \n       static std::string\n       desc()\n       {\n-#ifdef PB_DS_USE_TR1\n         const std::string cache_hash_desc =\n \tmake_xml_tag(\"cache_hash_code\",\n \t\t     \"value\",\n \t\t    (Cache_Hash ? std::string(\"true\") : std::string(\"false\")));\n \n         return make_xml_tag(\"type\", \"value\", \"std_tr1_unordered_map\", \n \t\t\t    cache_hash_desc);\n-#else \n-        return make_xml_tag(\"type\", \"value\", \"__gnucxx_hash_map\");\n-#endif \n       }\n     };\n "}, {"sha": "b9d5aa19a311fe4ed1b88e50c6252c6b512f1fff", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_multimap.hpp", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_multimap.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_multimap.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_multimap.hpp?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -41,13 +41,14 @@\n \n /**\n  * @file native_hash_multimap.hpp\n- * Contains an adapter to Dinkumware/SGI hash tables\n+ * Contains an adapter to TR1 unordered containers.\n  */\n \n #ifndef PB_DS_NATIVE_HASH_MULTIMAP_HPP\n #define PB_DS_NATIVE_HASH_MULTIMAP_HPP\n \n #include <string>\n+#include <tr1/unordered_map>\n #include <ext/hash_map>\n #include <ext/pb_ds/detail/type_utils.hpp>\n #include <ext/pb_ds/detail/standard_policies.hpp>\n@@ -59,32 +60,29 @@ namespace __gnu_pbds\n   namespace test\n   {\n #define PB_DS_BASE_C_DEC \\\n-    __gnu_cxx::hash_multimap<Key, Data, Hash_Fn, Eq_Fn, Allocator>\n+    std::tr1::unordered_multimap<Key, Data, Hash_Fn, Eq_Fn, Allocator>\n \n     template<typename Key,\n \t     typename Data,\n \t     size_t Init_Size = 8,\n-\t     class Hash_Fn = typename __gnu_pbds::detail::default_hash_fn<Key>::type,\n+       class Hash_Fn = typename __gnu_pbds::detail::default_hash_fn<Key>::type,\n \t     class Eq_Fn = std::equal_to<Key>,\n \t     class Less_Fn = std::less<Key>,\n \t     class Allocator = std::allocator<char> >\n     class native_hash_multimap : public PB_DS_BASE_C_DEC\n     {\n     private:\n-      typedef PB_DS_BASE_C_DEC base_type;\n+      typedef PB_DS_BASE_C_DEC \t\t\tbase_type;\n+      typedef std::pair<Key, Data> \t\tpair_type;\n \n     public:\n-      typedef native_hash_tag container_category;\n-\n-      typedef Allocator allocator;\n-\n-      typedef typename base_type::iterator iterator;\n-\n+      typedef native_hash_tag \t\t\tcontainer_category;\n+      typedef Allocator \t\t\tallocator;\n+      typedef typename base_type::iterator \titerator;\n       typedef typename base_type::const_iterator const_iterator;\n \n       typedef\n-      typename Allocator::template rebind<\n-\tstd::pair<Key, Data> >::other::const_reference\n+      typename allocator::template rebind<pair_type>::other::const_reference\n       const_reference;\n \n       native_hash_multimap() : base_type(Init_Size)\n@@ -95,7 +93,7 @@ namespace __gnu_pbds\n       { }\n \n       inline void\n-      insert(typename base_type::const_reference r_val)\n+      insert(const_reference r_val)\n       {\n         typedef std::pair<iterator, iterator> eq_range_t;\n         eq_range_t f = base_type::equal_range(r_val.first);\n@@ -148,9 +146,7 @@ namespace __gnu_pbds\n \n       static std::string\n       desc()\n-      {\n-        return make_xml_tag(\"type\", \"value\", \"__gnucxx_hash_multimap\");\n-      }\n+      { return make_xml_tag(\"type\", \"value\", \"__gnucxx_hash_multimap\"); }\n     };\n \n #undef PB_DS_BASE_C_DEC"}, {"sha": "86ad2482132abdc054d65c65bdd807998d2337bb", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_hash_set.hpp", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_set.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_set.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_hash_set.hpp?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -41,7 +41,7 @@\n \n /**\n  * @file native_hash_set.hpp\n- * Contains an adapter to Dinkumware/SGI hash tables\n+ * Contains an adapter to TR1 unordered containers.\n  */\n \n #ifndef PB_DS_NATIVE_HASH_SET_HPP\n@@ -52,39 +52,22 @@\n #include <ext/pb_ds/detail/standard_policies.hpp>\n #include <native_type/assoc/native_hash_tag.hpp>\n #include <io/xml.hpp>\n-\n-// Default to using tr1.\n-#define PB_DS_USE_TR1 1\n-\n-#ifdef PB_DS_USE_TR1\n #include <tr1/unordered_set>\n-#else \n-#include <ext/hash_set>\n-#endif\n \n namespace __gnu_pbds\n {\n   namespace test\n   {\n-#ifdef PB_DS_USE_TR1\n #define PB_DS_BASE_C_DEC \\\n     std::tr1::__unordered_set<Key, Hash_Fn, Eq_Fn, \\\n     typename Allocator::template rebind<Key>::other, Cache_Hash>\n-#else\n-#define PB_DS_BASE_C_DEC \\\n-    __gnu_cxx::hash_set<Key, Hash_Fn, Eq_Fn, \\\n-    typename Allocator::template rebind<Key>::other>\n-#endif\n \n     template<typename Key,\n \t     size_t Init_Size = 8,\n          typename Hash_Fn = typename __gnu_pbds::detail::default_hash_fn<Key>::type,\n \t     typename Eq_Fn = std::equal_to<Key>,\n \t     typename Less_Fn = std::less<Key>,\n-\t     typename Allocator = std::allocator<char>\n-#ifdef PB_DS_USE_TR1\n-\t     , bool Cache_Hash = false\n-#endif\n+\t     typename Allocator = std::allocator<char>, bool Cache_Hash = false\n \t     >\n     class native_hash_set : public PB_DS_BASE_C_DEC\n     {\n@@ -129,27 +112,19 @@ namespace __gnu_pbds\n       static std::string\n       name()\n       {\n-#ifdef PB_DS_USE_TR1\n         return std::string(\"n_hash_set_\") \n \t       + (Cache_Hash ? std::string(\"cah\") : std::string(\"ncah\"));\n-#else\n-        return std::string(\"n_hash_set_ncah\");\n-#endif\n       }\n \n       static std::string\n       desc()\n       {\n-#ifdef PB_DS_USE_TR1\n         const std::string cache_hash_desc =\n \tmake_xml_tag(\"cache_hash_code\", \"value\",\n \t\t     Cache_Hash ? std::string(\"true\") : std::string(\"false\"));\n \n         return make_xml_tag(\"type\", \"value\", \"std_tr1_unordered_set\", \n \t\t\t    cache_hash_desc);\n-#else\n-        return make_xml_tag(\"type\", \"value\", \"__gnucxx_hash_set\");\n-#endif\n       }\n     };\n "}, {"sha": "1be7ee5984fc4a3b6988a0af24f8f1bcf51077bc", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_map.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_map.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_map.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_map.hpp?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -41,7 +41,7 @@\n \n /**\n  * @file native_map.hpp\n- * Contains an adapter to Dinkumware/SGI tree tables\n+ * Contains an adapter to std::map\n  */\n \n #ifndef PB_DS_NATIVE_MAP_HPP"}, {"sha": "906fca3244ec5c00bdd2dc2026e4450b751b2964", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_multimap.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_multimap.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_multimap.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_multimap.hpp?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -41,7 +41,7 @@\n \n /**\n  * @file native_multimap.hpp\n- * Contains an adapter to Dinkumware/SGI tables\n+ * Contains an adapter to std::multimap\n  */\n \n #ifndef PB_DS_NATIVE_MULTIMAP_HPP"}, {"sha": "b25f2bac29e448aefda323c292dd56fe685ea691", "filename": "libstdc++-v3/testsuite/util/native_type/assoc/native_set.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_set.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_set.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fnative_type%2Fassoc%2Fnative_set.hpp?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -41,7 +41,7 @@\n \n /**\n  * @file native_set.hpp\n- * Contains an adapter to Dinkumware/SGI tree tables\n+ * Contains an adapter to std::set\n  */\n \n #ifndef PB_DS_NATIVE_SET_HPP"}, {"sha": "4d639d38c4e482c7ca8f0c8c23dce2db151a34f8", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/multimap_find_test.hpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_find_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_find_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_find_test.hpp?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -128,7 +128,8 @@ namespace __gnu_pbds\n \n \n     template<typename It, bool Native>\n-    class multimap_find_test : private __gnu_pbds::test::detail::timing_test_base\n+    class multimap_find_test \n+    : private __gnu_pbds::test::detail::timing_test_base\n     {\n     public:\n       multimap_find_test(It ins_b, size_t ins_vn, size_t vs, size_t ins_vm)"}, {"sha": "f35d95217b5f2c70ad72eb1dafab4fe5c258a5a8", "filename": "libstdc++-v3/testsuite/util/performance/assoc/timing/multimap_insert_test.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_insert_test.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_insert_test.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fperformance%2Fassoc%2Ftiming%2Fmultimap_insert_test.hpp?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -97,7 +97,7 @@ namespace __gnu_pbds\n \t    {\n \t      Cntnr cntnr;\n \t      for (It ins_it = m_ins_it_b; ins_it != m_ins_it_e; ++ins_it)\n-                cntnr.insert((typename Cntnr::const_reference)(*ins_it));\n+\t\tcntnr.insert((typename Cntnr::const_reference)(*ins_it));\n \t    }\n \t}\n \n@@ -108,7 +108,8 @@ namespace __gnu_pbds\n     } // namespace detail\n \n     template<typename It, bool Native>\n-    class multimap_insert_test : private __gnu_pbds::test::detail::timing_test_base\n+    class multimap_insert_test \n+    : private __gnu_pbds::test::detail::timing_test_base\n     {\n     public:\n       multimap_insert_test(It b, size_t ins_vn, size_t ins_vs, size_t ins_vm) \n@@ -122,7 +123,6 @@ namespace __gnu_pbds\n     private:\n       multimap_insert_test(const multimap_insert_test&);\n \n-    private:\n       const It m_ins_b;\n       const size_t m_ins_vn;\n       const size_t m_ins_vs;"}, {"sha": "6efabecbe23c475054356793998017a802dcf97b", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -30,10 +30,11 @@\n // Benjamin Kosnik  <bkoz@redhat.com>\n \n #include \"testsuite_abi.h\"\n+#include <cstdlib>\n #include <sstream>\n #include <fstream>\n #include <iostream>\n-#include <cstdlib>\n+#include <vector>\n \n using namespace std;\n "}, {"sha": "a659ef4a7429675468e7c46fe52b0fd7c565eb3e", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.h", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.h?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -33,7 +33,7 @@\n #include <stdexcept>\n #include <deque>\n #include <locale>\n-#include <ext/hash_map>\n+#include <tr1/unordered_map>\n #include <cxxabi.h>\n \n // Encapsulates symbol characteristics.\n@@ -75,7 +75,7 @@ struct symbol\n   init(std::string& data);\n };\n \n-typedef __gnu_cxx::hash_map<std::string, symbol> \tsymbol_objects;\n+typedef std::tr1::unordered_map<std::string, symbol> \tsymbol_objects;\n \n typedef std::deque<std::string>\t\t\t\tsymbol_names;\n \n@@ -110,20 +110,3 @@ create_symbols(const char* file);\n \n const char*\n demangle(const std::string& mangled);\n-\n-\n-// Specialization.\n-namespace __gnu_cxx\n-{\n-  using namespace std;\n-\n-  template<> \n-    struct hash<string>\n-    {\n-      size_t operator()(const string& s) const \n-      { \n-\tconst collate<char>& c = use_facet<collate<char> >(locale::classic());\n-\treturn c.hash(s.c_str(), s.c_str() + s.size());\n-      }\n-    }; \n-}"}, {"sha": "b560ae3a0ac9c67033f5fdb698a979721bfa2460", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 6, "deletions": 51, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3de9003f8e0684664149aec9628c8c5b73d62a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=0c3de9003f8e0684664149aec9628c8c5b73d62a", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // typelist for the C++ library testsuite. \n //\n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -47,8 +47,7 @@\n \n #include <map>\n #include <set>\n-#include <ext/hash_map>\n-#include <ext/hash_set>\n+#include <tr1/functional>\n #include <tr1/unordered_map>\n #include <tr1/unordered_set>\n \n@@ -160,7 +159,7 @@ namespace __gnu_test\n       typedef typename append<a1, a2>::type type;\n     };\n \n-  // Typelists for map, set, hash_map, hash_set, unordered_set, unordered_map.\n+  // Typelists for map, set, unordered_set, unordered_map.\n   template<typename Tp, bool Thread>\n     struct maps\n     {\n@@ -181,26 +180,6 @@ namespace __gnu_test\n       typedef typename transform<allocator_typelist, container>::type type;\n     };\n \n-  template<typename Tp, bool Thread>\n-    struct hash_maps\n-    {\n-      typedef Tp\t\t\t    \t\tvalue_type;\n-      typedef Tp \t\t\t\t\tkey_type;\n-      typedef __gnu_cxx::hash<key_type>      \t\thash_function;\n-      typedef std::equal_to<key_type>      \t\tequality_function;\n-\n-      template<typename Tl>\n-        struct container\n-\t{\n-\t  typedef Tl \t\t\t\t\tallocator_type;\n-\t  typedef __gnu_cxx::hash_map<key_type, value_type, hash_function, equality_function, allocator_type>\ttype;\n-\t};\n-\n-      typedef allocator_policies<value_type, Thread>\tallocator_types;\n-      typedef typename allocator_types::type \t\tallocator_typelist;\n-      typedef typename transform<allocator_typelist, container>::type type;\n-    };\n-\n   template<typename Tp, bool Thread>\n     struct unordered_maps\n     {\n@@ -241,26 +220,6 @@ namespace __gnu_test\n       typedef typename transform<allocator_typelist, container>::type type;\n     };\n \n-  template<typename Tp, bool Thread>\n-    struct hash_sets\n-    {\n-      typedef Tp\t\t\t    \t\tvalue_type;\n-      typedef Tp \t\t\t\t\tkey_type;\n-      typedef __gnu_cxx::hash<key_type>      \t\thash_function;\n-      typedef std::equal_to<key_type>      \t\tequality_function;\n-\n-      template<typename Tl>\n-        struct container\n-\t{\n-\t  typedef Tl \t\t\t\t\tallocator_type;\n-\t  typedef __gnu_cxx::hash_set<key_type, hash_function, equality_function, allocator_type>\ttype;\n-\t};\n-\n-      typedef allocator_policies<key_type, Thread>\tallocator_types;\n-      typedef typename allocator_types::type \t\tallocator_typelist;\n-      typedef typename transform<allocator_typelist, container>::type type;\n-    };\n-\n   template<typename Tp, bool Thread>\n     struct unordered_sets\n     {\n@@ -291,16 +250,12 @@ namespace __gnu_test\n \n       typedef typename maps<value_type, Thread>::type map_typelist;\n       typedef typename sets<value_type, Thread>::type set_typelist;\n-      typedef typename hash_maps<value_type, Thread>::type hash_map_typelist;\n-      typedef typename hash_sets<value_type, Thread>::type hash_set_typelist;\n       typedef typename unordered_maps<value_type, Thread>::type unordered_map_typelist;\n       typedef typename unordered_sets<value_type, Thread>::type unordered_set_typelist;\n \n-      typedef typename append<map_typelist, hash_map_typelist>::type a1;\n-      typedef typename append<a1, unordered_map_typelist>::type a2;\n-      typedef typename append<set_typelist, hash_set_typelist>::type a3;\n-      typedef typename append<a3, unordered_set_typelist>::type a4;\n-      typedef typename append<a2, a4>::type type;\n+      typedef typename append<map_typelist, unordered_map_typelist>::type a1;\n+      typedef typename append<set_typelist, unordered_set_typelist>::type a2;\n+      typedef typename append<a1, a2>::type type;\n     };\n \n } // namespace __gnu_test"}]}