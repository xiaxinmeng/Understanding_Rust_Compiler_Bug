{"sha": "8ef63e6259422264b8ce8ff074db8e70628d31b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVmNjNlNjI1OTQyMjI2NGI4Y2U4ZmYwNzRkYjhlNzA2MjhkMzFiMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-08T18:34:29Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-08T18:34:29Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1527", "tree": {"sha": "4d73d054672f3cd985baf3477f23c6c9fe6a6677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d73d054672f3cd985baf3477f23c6c9fe6a6677"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ef63e6259422264b8ce8ff074db8e70628d31b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ef63e6259422264b8ce8ff074db8e70628d31b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ef63e6259422264b8ce8ff074db8e70628d31b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ef63e6259422264b8ce8ff074db8e70628d31b1/comments", "author": null, "committer": null, "parents": [{"sha": "cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb712ad45a0ab19659e3b5b70a6a4dd8ab54af27"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "743a0c28380f0daf2125f42b8d0f7ba87885718e", "filename": "gcc/integrate.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ef63e6259422264b8ce8ff074db8e70628d31b1/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ef63e6259422264b8ce8ff074db8e70628d31b1/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=8ef63e6259422264b8ce8ff074db8e70628d31b1", "patch": "@@ -1615,11 +1615,12 @@ expand_inline_function (fndecl, parms, target, ignore, type, structure_value_add\n      in SAVE_EXPRs for TYPE_SIZEs as local.  */\n \n   inline_function_decl = fndecl;\n-  integrate_decl_tree ((tree) ORIGINAL_DECL_INITIAL (header), 0, map, 0);\n   integrate_parm_decls (DECL_ARGUMENTS (fndecl), map, arg_vector);\n+  integrate_decl_tree ((tree) ORIGINAL_DECL_INITIAL (header), 0, map);\n   inline_function_decl = 0;\n \n-  /* End the scope containing the copied formal parameter variables.  */\n+  /* End the scope containing the copied formal parameter variables\n+     and copied LABEL_DECLs.  */\n \n   expand_end_bindings (getdecls (), 1, 1);\n   poplevel (1, 1, 0);\n@@ -1670,33 +1671,29 @@ integrate_parm_decls (args, map, arg_vector)\n    current function a tree of contexts isomorphic to the one that is given.\n \n    LEVEL indicates how far down into the BLOCK tree is the node we are\n-   currently traversing.  It is always zero for the initial call.\n+   currently traversing.  It is always zero except for recursive calls.\n \n    MAP, if nonzero, is a pointer to a inline_remap map which indicates how\n    registers used in the DECL_RTL field should be remapped.  If it is zero,\n-   no mapping is necessary.\n-\n-   FUNCTIONBODY indicates whether the top level block tree corresponds to\n-   a function body.  This is identical in meaning to the functionbody\n-   argument of poplevel.  */\n+   no mapping is necessary.  */\n \n static void\n-integrate_decl_tree (let, level, map, functionbody)\n+integrate_decl_tree (let, level, map)\n      tree let;\n      int level;\n      struct inline_remap *map;\n-     int functionbody;\n {\n   tree t, node;\n \n-  pushlevel (0);\n+  if (level > 0)\n+    pushlevel (0);\n   \n   for (t = BLOCK_VARS (let); t; t = TREE_CHAIN (t))\n     {\n       tree d = build_decl (TREE_CODE (t), DECL_NAME (t), TREE_TYPE (t));\n       DECL_SOURCE_LINE (d) = DECL_SOURCE_LINE (t);\n       DECL_SOURCE_FILE (d) = DECL_SOURCE_FILE (t);\n-      if (! functionbody && DECL_RTL (t) != 0)\n+      if (DECL_RTL (t) != 0)\n \t{\n \t  DECL_RTL (d) = copy_rtx_and_substitute (DECL_RTL (t), map);\n \t  /* Fully instantiate the address with the equivalent form so that the\n@@ -1723,11 +1720,14 @@ integrate_decl_tree (let, level, map, functionbody)\n     }\n \n   for (t = BLOCK_SUBBLOCKS (let); t; t = TREE_CHAIN (t))\n-    integrate_decl_tree (t, level + 1, map, functionbody);\n+    integrate_decl_tree (t, level + 1, map);\n \n-  node = poplevel (level > 0, 0, level == 0 && functionbody);\n-  if (node)\n-    TREE_USED (node) = TREE_USED (let);\n+  if (level > 0)\n+    {\n+      node = poplevel (1, 0, 0);\n+      if (node)\n+\tTREE_USED (node) = TREE_USED (let);\n+    }\n }\n \f\n /* Create a new copy of an rtx."}]}