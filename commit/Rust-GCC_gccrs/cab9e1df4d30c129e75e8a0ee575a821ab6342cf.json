{"sha": "cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiOWUxZGY0ZDMwYzEyOWU3NWU4YTBlZTU3NWE4MjFhYjYzNDJjZg==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2016-09-23T10:57:20Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-09-23T10:57:20Z"}, "message": "[PATCH 17/17][ARM] Add tests for NEON FP16 ACLE intrinsics.\n\ntestsuite/\n2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* gcc.target/advsimd-intrinsics/advsimd-intrinsics.exp: Enable\n\t-march=armv8.2-a+fp16 when supported by the hardware.\n\t* gcc.target/aarch64/advsimd-intrinsics/binary_op_float.inc: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/binary_op_no64.inc:\n\tAdd F16 tests, enabled if macro HAS_FLOAT16_VARIANT is defined.  Add\n\tsemi-colons to a macro invocations.\n\t* gcc.target/aarch64/advsimd-intrinsics/cmp_fp_op.inc: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.\n\t* gcc.target/aarch64/advsimd-intrinsics/cmp_op.inc: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/cmp_zero_op.inc: New.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vabd.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vabs.c: Likewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vadd.c: Likewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcage.c: Likewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcagt.c: Likewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcale.c: Likewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcalt.c: Likewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vceq.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vceqz_1.c: New.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcge.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcgez_1.c: New.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcgt.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcgtz_1.c: New.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcle.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.\n\t* gcc.target/aarch64/advsimd-intrinsics/vclez_1.c: New.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vclt.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcltz_1.c: New.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcvt.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.  Also fix some white-space.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtX.inc: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvta_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtm_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtp_1.c: New.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vfma.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.  Also fix some long lines and white-space.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vfms.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.  Also fix some long lines and white-space.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vmax.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmaxnm_1.c: New.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vmin.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.\n\t* gcc.target/aarch64/advsimd-intrinsics/vminnm_1.c: New.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vmul.c: Add F16\n\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n\tdefined.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmul_lane.c: Likewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vmul_n.c:\n\tLikewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vneg.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc: Likewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpadd.c:\n\tLikewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpmax.c:\n\tLikewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpmin.c:\n\tLikewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrecpe.c:\n\tLikewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrecps.c:\n\tLikewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrnd.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrndX.inc: Likewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrnda.c:\n\tLikewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndm.c:\n\tLikewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndn.c:\n\tLikewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndp.c:\n\tLikewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndx.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrsqrte.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrsqrts.c: Likewise.\n\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vsub.c:\n\tLikewise.\n\nFrom-SVN: r240427", "tree": {"sha": "d0297d1bb5c15644e683b37adfefb489aa885aad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0297d1bb5c15644e683b37adfefb489aa885aad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/comments", "author": null, "committer": null, "parents": [{"sha": "da9b2e696a433e3d201b02d42e21e3e29c8f920a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9b2e696a433e3d201b02d42e21e3e29c8f920a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9b2e696a433e3d201b02d42e21e3e29c8f920a"}], "stats": {"total": 2293, "additions": 2276, "deletions": 17}, "files": [{"sha": "8305520fbdd5a5c2c3d278dd0ae1bbb125085d91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -1,3 +1,101 @@\n+2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/advsimd-intrinsics/advsimd-intrinsics.exp: Enable\n+\t-march=armv8.2-a+fp16 when supported by the hardware.\n+\t* gcc.target/aarch64/advsimd-intrinsics/binary_op_float.inc: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/binary_op_no64.inc:\n+\tAdd F16 tests, enabled if macro HAS_FLOAT16_VARIANT is defined.  Add\n+\tsemi-colons to a macro invocations.\n+\t* gcc.target/aarch64/advsimd-intrinsics/cmp_fp_op.inc: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.\n+\t* gcc.target/aarch64/advsimd-intrinsics/cmp_op.inc: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/cmp_zero_op.inc: New.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vabd.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vabs.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vadd.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcage.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcagt.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcale.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcalt.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vceq.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vceqz_1.c: New.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcge.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcgez_1.c: New.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcgt.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcgtz_1.c: New.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcle.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vclez_1.c: New.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vclt.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcltz_1.c: New.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vcvt.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.  Also fix some white-space.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtX.inc: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvta_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtm_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtp_1.c: New.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vfma.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.  Also fix some long lines and white-space.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vfms.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.  Also fix some long lines and white-space.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vmax.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmaxnm_1.c: New.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vmin.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vminnm_1.c: New.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vmul.c: Add F16\n+\ttests, enabled if macro __ARM_FEATURE_FP16_VECTOR_ARITHMETIC is\n+\tdefined.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmul_lane.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vmul_n.c:\n+\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vneg.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpadd.c:\n+\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpmax.c:\n+\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vpmin.c:\n+\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrecpe.c:\n+\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrecps.c:\n+\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrnd.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrndX.inc: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrnda.c:\n+\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndm.c:\n+\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndn.c:\n+\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndp.c:\n+\tLikewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vrndx.c:\n+\tLikewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrsqrte.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrsqrts.c: Likewise.\n+\t* gcc.target/gcc.target/aarch64/advsimd-intrinsics/vsub.c:\n+\tLikewise.\n+\n 2016-09-23  Jiong Wang  <jiong.wang@arm.com>\n \t    Matthew Wahab  <matthew.wahab@arm.com>\n "}, {"sha": "e93b8d5cd5a7e3948c07b72f6b7ea401c07def14", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/advsimd-intrinsics.exp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fadvsimd-intrinsics.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fadvsimd-intrinsics.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fadvsimd-intrinsics.exp?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -53,7 +53,10 @@ torture-init\n set-torture-options $C_TORTURE_OPTIONS {{}} $LTO_TORTURE_OPTIONS\n \n # Make sure Neon flags are provided, if necessary.  Use fp16 if we can.\n-if {[check_effective_target_arm_neon_fp16_ok]} then {\n+# Use fp16 arithmetic operations if the hardware supports it.\n+if {[check_effective_target_arm_v8_2a_fp16_neon_hw]} then {\n+  set additional_flags [add_options_for_arm_v8_2a_fp16_neon \"\"]\n+} elseif {[check_effective_target_arm_neon_fp16_ok]} then {\n   set additional_flags [add_options_for_arm_neon_fp16 \"\"]\n } else {\n   set additional_flags [add_options_for_arm_neon \"\"]"}, {"sha": "cc1bfb3e7bfeb520b8efff857c031926d3635182", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/binary_op_float.inc", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op_float.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op_float.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op_float.inc?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,170 @@\n+/* Floating-point only version of binary_op_no64.inc template.  Currently only\n+   float16_t is used.  */\n+\n+#include <math.h>\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  int i;\n+\n+  /* Basic test: z = INSN (x, y), then store the result.  */\n+#define TEST_BINARY_OP1(INSN, Q, T1, T2, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define TEST_BINARY_OP(INSN, Q, T1, T2, W, N)   \\\n+  TEST_BINARY_OP1(INSN, Q, T1, T2, W, N)\t\\\n+\n+#ifdef HAS_FLOAT16_VARIANT\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+\n+  DECL_VARIABLE(vector, float, 16, 8);\n+  DECL_VARIABLE(vector2, float, 16, 8);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n+\n+#ifdef HAS_FLOAT_VARIANT\n+  DECL_VARIABLE(vector, float, 32, 2);\n+  DECL_VARIABLE(vector2, float, 32, 2);\n+  DECL_VARIABLE(vector_res, float, 32, 2);\n+\n+  DECL_VARIABLE(vector, float, 32, 4);\n+  DECL_VARIABLE(vector2, float, 32, 4);\n+  DECL_VARIABLE(vector_res, float, 32, 4);\n+#endif\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+#ifdef HAS_FLOAT16_VARIANT\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+  VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n+#ifdef HAS_FLOAT_VARIANT\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n+  VLOAD(vector, buffer, q, float, f, 32, 4);\n+#endif\n+\n+  /* Choose init value arbitrarily, will be used as comparison value.  */\n+#ifdef HAS_FLOAT16_VARIANT\n+  VDUP(vector2, , float, f, 16, 4, -15.5f);\n+  VDUP(vector2, q, float, f, 16, 8, -14.5f);\n+#endif\n+#ifdef HAS_FLOAT_VARIANT\n+  VDUP(vector2, , float, f, 32, 2, -15.5f);\n+  VDUP(vector2, q, float, f, 32, 4, -14.5f);\n+#endif\n+\n+#ifdef HAS_FLOAT16_VARIANT\n+#define FLOAT16_VARIANT(MACRO, VAR)\t\t\t\\\n+  MACRO(VAR, , float, f, 16, 4);\t\t\t\\\n+  MACRO(VAR, q, float, f, 16, 8);\n+#else\n+#define FLOAT16_VARIANT(MACRO, VAR)\n+#endif\n+\n+#ifdef HAS_FLOAT_VARIANT\n+#define FLOAT_VARIANT(MACRO, VAR)\t\t\t\\\n+  MACRO(VAR, , float, f, 32, 2);\t\t\t\\\n+  MACRO(VAR, q, float, f, 32, 4);\n+#else\n+#define FLOAT_VARIANT(MACRO, VAR)\n+#endif\n+\n+#define TEST_MACRO_NO64BIT_VARIANT_1_5(MACRO, VAR)\t\\\n+\n+  /* Apply a binary operator named INSN_NAME.  */\n+  FLOAT16_VARIANT(TEST_BINARY_OP, INSN_NAME);\n+  FLOAT_VARIANT(TEST_BINARY_OP, INSN_NAME);\n+\n+#ifdef HAS_FLOAT16_VARIANT\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+\n+  /* Extra FP tests with special values (NaN, ....)  */\n+  VDUP(vector, q, float, f, 16, 8, 1.0f);\n+  VDUP(vector2, q, float, f, 16, 8, NAN);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_nan,\n+\t   \" FP special (NaN)\");\n+\n+  VDUP(vector, q, float, f, 16, 8, -NAN);\n+  VDUP(vector2, q, float, f, 16, 8, 1.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_mnan,\n+\t   \" FP special (-NaN)\");\n+\n+  VDUP(vector, q, float, f, 16, 8, 1.0f);\n+  VDUP(vector2, q, float, f, 16, 8, HUGE_VALF);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_inf,\n+\t   \" FP special (inf)\");\n+\n+  VDUP(vector, q, float, f, 16, 8, -HUGE_VALF);\n+  VDUP(vector2, q, float, f, 16, 8, 1.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_minf,\n+\t   \" FP special (-inf)\");\n+\n+  VDUP(vector, q, float, f, 16, 8, 0.0f);\n+  VDUP(vector2, q, float, f, 16, 8, -0.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_zero1,\n+\t   \" FP special (-0.0)\");\n+\n+  VDUP(vector, q, float, f, 16, 8, -0.0f);\n+  VDUP(vector2, q, float, f, 16, 8, 0.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_zero2,\n+\t   \" FP special (-0.0)\");\n+#endif\n+\n+#ifdef HAS_FLOAT_VARIANT\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n+\n+  /* Extra FP tests with special values (NaN, ....)  */\n+  VDUP(vector, q, float, f, 32, 4, 1.0f);\n+  VDUP(vector2, q, float, f, 32, 4, NAN);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_nan, \" FP special (NaN)\");\n+\n+  VDUP(vector, q, float, f, 32, 4, -NAN);\n+  VDUP(vector2, q, float, f, 32, 4, 1.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_mnan, \" FP special (-NaN)\");\n+\n+  VDUP(vector, q, float, f, 32, 4, 1.0f);\n+  VDUP(vector2, q, float, f, 32, 4, HUGE_VALF);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_inf, \" FP special (inf)\");\n+\n+  VDUP(vector, q, float, f, 32, 4, -HUGE_VALF);\n+  VDUP(vector2, q, float, f, 32, 4, 1.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_minf, \" FP special (-inf)\");\n+\n+  VDUP(vector, q, float, f, 32, 4, 0.0f);\n+  VDUP(vector2, q, float, f, 32, 4, -0.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_zero1, \" FP special (-0.0)\");\n+\n+  VDUP(vector, q, float, f, 32, 4, -0.0f);\n+  VDUP(vector2, q, float, f, 32, 4, 0.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_zero2, \" FP special (-0.0)\");\n+#endif\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "a30f420e02fc530541be67bd6bfd787f0d4db6e9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/binary_op_no64.inc", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op_no64.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op_no64.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_op_no64.inc?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -28,6 +28,10 @@ void FNNAME (INSN_NAME) (void)\n \n   /* Initialize input \"vector\" from \"buffer\".  */\n   TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+#ifdef HAS_FLOAT16_VARIANT\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+  VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n #ifdef HAS_FLOAT_VARIANT\n   VLOAD(vector, buffer, , float, f, 32, 2);\n   VLOAD(vector, buffer, q, float, f, 32, 4);\n@@ -46,15 +50,27 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, q, uint, u, 8, 16, 0xf9);\n   VDUP(vector2, q, uint, u, 16, 8, 0xfff2);\n   VDUP(vector2, q, uint, u, 32, 4, 0xfffffff1);\n+#ifdef HAS_FLOAT16_VARIANT\n+  VDUP(vector2, , float, f, 16, 4, -15.5f);\n+  VDUP(vector2, q, float, f, 16, 8, -14.5f);\n+#endif\n #ifdef HAS_FLOAT_VARIANT\n   VDUP(vector2, , float, f, 32, 2, -15.5f);\n   VDUP(vector2, q, float, f, 32, 4, -14.5f);\n #endif\n \n+#ifdef HAS_FLOAT16_VARIANT\n+#define FLOAT16_VARIANT(MACRO, VAR)\t\t\t\\\n+  MACRO(VAR, , float, f, 16, 4);\t\t\t\\\n+  MACRO(VAR, q, float, f, 16, 8);\n+#else\n+#define FLOAT16_VARIANT(MACRO, VAR)\n+#endif\n+\n #ifdef HAS_FLOAT_VARIANT\n #define FLOAT_VARIANT(MACRO, VAR)\t\t\t\\\n   MACRO(VAR, , float, f, 32, 2);\t\t\t\\\n-  MACRO(VAR, q, float, f, 32, 4)\n+  MACRO(VAR, q, float, f, 32, 4);\n #else\n #define FLOAT_VARIANT(MACRO, VAR)\n #endif\n@@ -72,7 +88,8 @@ void FNNAME (INSN_NAME) (void)\n   MACRO(VAR, q, uint, u, 8, 16);\t\t\t\\\n   MACRO(VAR, q, uint, u, 16, 8);\t\t\t\\\n   MACRO(VAR, q, uint, u, 32, 4);\t\t\t\\\n-  FLOAT_VARIANT(MACRO, VAR)\n+  FLOAT_VARIANT(MACRO, VAR);\t\t\t\t\\\n+  FLOAT16_VARIANT(MACRO, VAR);\n \n   /* Apply a binary operator named INSN_NAME.  */\n   TEST_MACRO_NO64BIT_VARIANT_1_5(TEST_BINARY_OP, INSN_NAME);\n@@ -90,6 +107,42 @@ void FNNAME (INSN_NAME) (void)\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n \n+#ifdef HAS_FLOAT16_VARIANT\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+\n+  /* Extra FP tests with special values (NaN, ....)  */\n+  VDUP(vector, q, float, f, 16, 8, 1.0f);\n+  VDUP(vector2, q, float, f, 16, 8, NAN);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_nan, \" FP special (NaN)\");\n+\n+  VDUP(vector, q, float, f, 16, 8, -NAN);\n+  VDUP(vector2, q, float, f, 16, 8, 1.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_mnan, \" FP special (-NaN)\");\n+\n+  VDUP(vector, q, float, f, 16, 8, 1.0f);\n+  VDUP(vector2, q, float, f, 16, 8, HUGE_VALF);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_inf, \" FP special (inf)\");\n+\n+  VDUP(vector, q, float, f, 16, 8, -HUGE_VALF);\n+  VDUP(vector2, q, float, f, 16, 8, 1.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_minf, \" FP special (-inf)\");\n+\n+  VDUP(vector, q, float, f, 16, 8, 0.0f);\n+  VDUP(vector2, q, float, f, 16, 8, -0.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_zero1, \" FP special (-0.0)\");\n+\n+  VDUP(vector, q, float, f, 16, 8, -0.0f);\n+  VDUP(vector2, q, float, f, 16, 8, 0.0f);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_zero2, \" FP special (-0.0)\");\n+#endif\n+\n #ifdef HAS_FLOAT_VARIANT\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");"}, {"sha": "313badb2fb6cac13b76b3aea5eb27a4f9eda5ad6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/cmp_fp_op.inc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_fp_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_fp_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_fp_op.inc?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -15,6 +15,10 @@\n    each test file.  */\n extern ARRAY(expected2, uint, 32, 2);\n extern ARRAY(expected2, uint, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+extern ARRAY(expected2, uint, 16, 4);\n+extern ARRAY(expected2, uint, 16, 8);\n+#endif\n \n #define FNNAME1(NAME) exec_ ## NAME\n #define FNNAME(NAME) FNNAME1(NAME)\n@@ -37,17 +41,33 @@ void FNNAME (INSN_NAME) (void)\n   DECL_VARIABLE(vector2, float, 32, 4);\n   DECL_VARIABLE(vector_res, uint, 32, 2);\n   DECL_VARIABLE(vector_res, uint, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+  DECL_VARIABLE(vector2, float, 16, 8);\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+#endif\n \n   clean_results ();\n \n   /* Initialize input \"vector\" from \"buffer\".  */\n   VLOAD(vector, buffer, , float, f, 32, 2);\n   VLOAD(vector, buffer, q, float, f, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+  VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n \n   /* Choose init value arbitrarily, will be used for vector\n      comparison.  */\n   VDUP(vector2, , float, f, 32, 2, -16.0f);\n   VDUP(vector2, q, float, f, 32, 4, -14.0f);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector2, , float, f, 16, 4, -16.0f);\n+  VDUP(vector2, q, float, f, 16, 8, -14.0f);\n+#endif\n \n   /* Apply operator named INSN_NAME.  */\n   TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n@@ -56,15 +76,36 @@ void FNNAME (INSN_NAME) (void)\n   TEST_VCOMP(INSN_NAME, q, float, f, uint, 32, 4);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n+\n+  TEST_VCOMP(INSN_NAME, q, float, f, uint, 16, 8);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+#endif\n+\n   /* Test again, with different input values.  */\n   VDUP(vector2, , float, f, 32, 2, -10.0f);\n   VDUP(vector2, q, float, f, 32, 4, 10.0f);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector2, , float, f, 16, 4, -10.0f);\n+  VDUP(vector2, q, float, f, 16, 8, 10.0f);\n+#endif\n+\n   TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected2, \"\");\n \n   TEST_VCOMP(INSN_NAME, q, float, f, uint, 32, 4);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected2,\"\");\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VCOMP(INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected2, \"\");\n+\n+  TEST_VCOMP(INSN_NAME, q, float, f, uint, 16, 8);\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected2,\"\");\n+#endif\n }\n \n int main (void)"}, {"sha": "c8c5dfe83f933470e17d7ce13b2803ae88ef6582", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/cmp_op.inc", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_op.inc?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -11,6 +11,17 @@ extern ARRAY(expected_uint, uint, 32, 2);\n extern ARRAY(expected_q_uint, uint, 8, 16);\n extern ARRAY(expected_q_uint, uint, 16, 8);\n extern ARRAY(expected_q_uint, uint, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+extern ARRAY(expected_float, uint, 16, 4);\n+extern ARRAY(expected_q_float, uint, 16, 8);\n+extern ARRAY(expected_nan, uint, 16, 4);\n+extern ARRAY(expected_mnan, uint, 16, 4);\n+extern ARRAY(expected_nan2, uint, 16, 4);\n+extern ARRAY(expected_inf, uint, 16, 4);\n+extern ARRAY(expected_minf, uint, 16, 4);\n+extern ARRAY(expected_inf2, uint, 16, 4);\n+extern ARRAY(expected_mzero, uint, 16, 4);\n+#endif\n extern ARRAY(expected_float, uint, 32, 2);\n extern ARRAY(expected_q_float, uint, 32, 4);\n extern ARRAY(expected_uint2, uint, 32, 2);\n@@ -48,13 +59,19 @@ void FNNAME (INSN_NAME) (void)\n   DECL_VARIABLE(vector, uint, 8, 8);\n   DECL_VARIABLE(vector, uint, 16, 4);\n   DECL_VARIABLE(vector, uint, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE (vector, float, 16, 4);\n+#endif\n   DECL_VARIABLE(vector, float, 32, 2);\n   DECL_VARIABLE(vector, int, 8, 16);\n   DECL_VARIABLE(vector, int, 16, 8);\n   DECL_VARIABLE(vector, int, 32, 4);\n   DECL_VARIABLE(vector, uint, 8, 16);\n   DECL_VARIABLE(vector, uint, 16, 8);\n   DECL_VARIABLE(vector, uint, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE (vector, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector, float, 32, 4);\n \n   DECL_VARIABLE(vector2, int, 8, 8);\n@@ -63,13 +80,19 @@ void FNNAME (INSN_NAME) (void)\n   DECL_VARIABLE(vector2, uint, 8, 8);\n   DECL_VARIABLE(vector2, uint, 16, 4);\n   DECL_VARIABLE(vector2, uint, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE (vector2, float, 16, 4);\n+#endif\n   DECL_VARIABLE(vector2, float, 32, 2);\n   DECL_VARIABLE(vector2, int, 8, 16);\n   DECL_VARIABLE(vector2, int, 16, 8);\n   DECL_VARIABLE(vector2, int, 32, 4);\n   DECL_VARIABLE(vector2, uint, 8, 16);\n   DECL_VARIABLE(vector2, uint, 16, 8);\n   DECL_VARIABLE(vector2, uint, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE (vector2, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector2, float, 32, 4);\n \n   DECL_VARIABLE(vector_res, uint, 8, 8);\n@@ -88,6 +111,9 @@ void FNNAME (INSN_NAME) (void)\n   VLOAD(vector, buffer, , uint, u, 8, 8);\n   VLOAD(vector, buffer, , uint, u, 16, 4);\n   VLOAD(vector, buffer, , uint, u, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD (vector, buffer, , float, f, 16, 4);\n+#endif\n   VLOAD(vector, buffer, , float, f, 32, 2);\n \n   VLOAD(vector, buffer, q, int, s, 8, 16);\n@@ -96,6 +122,9 @@ void FNNAME (INSN_NAME) (void)\n   VLOAD(vector, buffer, q, uint, u, 8, 16);\n   VLOAD(vector, buffer, q, uint, u, 16, 8);\n   VLOAD(vector, buffer, q, uint, u, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD (vector, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector, buffer, q, float, f, 32, 4);\n \n   /* Choose init value arbitrarily, will be used for vector\n@@ -106,6 +135,9 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, , uint, u, 8, 8, 0xF3);\n   VDUP(vector2, , uint, u, 16, 4, 0xFFF2);\n   VDUP(vector2, , uint, u, 32, 2, 0xFFFFFFF1);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP (vector2, , float, f, 16, 4, -15.0f);\n+#endif\n   VDUP(vector2, , float, f, 32, 2, -15.0f);\n \n   VDUP(vector2, q, int, s, 8, 16, -4);\n@@ -114,6 +146,9 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, q, uint, u, 8, 16, 0xF4);\n   VDUP(vector2, q, uint, u, 16, 8, 0xFFF6);\n   VDUP(vector2, q, uint, u, 32, 4, 0xFFFFFFF2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP (vector2, q, float, f, 16, 8, -14.0f);\n+#endif\n   VDUP(vector2, q, float, f, 32, 4, -14.0f);\n \n   /* The comparison operators produce only unsigned results, which\n@@ -154,9 +189,17 @@ void FNNAME (INSN_NAME) (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_q_uint, \"\");\n \n   /* The float variants.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_float, \"\");\n+#endif\n   TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_float, \"\");\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VCOMP (INSN_NAME, q, float, f, uint, 16, 8);\n+  CHECK (TEST_MSG, uint, 16, 8, PRIx16, expected_q_float, \"\");\n+#endif\n   TEST_VCOMP(INSN_NAME, q, float, f, uint, 32, 4);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_q_float, \"\");\n \n@@ -176,6 +219,43 @@ void FNNAME (INSN_NAME) (void)\n \n \n   /* Extra FP tests with special values (NaN, ....).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP (vector, , float, f, 16, 4, 1.0);\n+  VDUP (vector2, , float, f, 16, 4, NAN);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_nan, \"FP special (NaN)\");\n+\n+  VDUP (vector, , float, f, 16, 4, 1.0);\n+  VDUP (vector2, , float, f, 16, 4, -NAN);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_mnan, \" FP special (-NaN)\");\n+\n+  VDUP (vector, , float, f, 16, 4, NAN);\n+  VDUP (vector2, , float, f, 16, 4, 1.0);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_nan2, \" FP special (NaN)\");\n+\n+  VDUP (vector, , float, f, 16, 4, 1.0);\n+  VDUP (vector2, , float, f, 16, 4, HUGE_VALF);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_inf, \" FP special (inf)\");\n+\n+  VDUP (vector, , float, f, 16, 4, 1.0);\n+  VDUP (vector2, , float, f, 16, 4, -HUGE_VALF);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_minf, \" FP special (-inf)\");\n+\n+  VDUP (vector, , float, f, 16, 4, HUGE_VALF);\n+  VDUP (vector2, , float, f, 16, 4, 1.0);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_inf2, \" FP special (inf)\");\n+\n+  VDUP (vector, , float, f, 16, 4, -0.0);\n+  VDUP (vector2, , float, f, 16, 4, 0.0);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_mzero, \" FP special (-0.0)\");\n+#endif\n+\n   VDUP(vector, , float, f, 32, 2, 1.0);\n   VDUP(vector2, , float, f, 32, 2, NAN);\n   TEST_VCOMP(INSN_NAME, , float, f, uint, 32, 2);"}, {"sha": "610272f8c15d59b12ce79b27fb9131eeede5afea", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/cmp_zero_op.inc", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_zero_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_zero_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fcmp_zero_op.inc?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,111 @@\n+/* Template file for the validation of compare against zero operators.\n+\n+   This file is base on cmp_op.inc.  It is meant to be included by the relevant\n+   test files, which have to define the intrinsic family to test.  If a given\n+   intrinsic supports variants which are not supported by all the other\n+   operators, these can be tested by providing a definition for EXTRA_TESTS.  */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Additional expected results declaration, they are initialized in\n+   each test file.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+extern ARRAY(expected_float, uint, 16, 4);\n+extern ARRAY(expected_q_float, uint, 16, 8);\n+extern ARRAY(expected_uint2, uint, 16, 4);\n+extern ARRAY(expected_uint3, uint, 16, 4);\n+extern ARRAY(expected_uint4, uint, 16, 4);\n+extern ARRAY(expected_nan, uint, 16, 4);\n+extern ARRAY(expected_mnan, uint, 16, 4);\n+extern ARRAY(expected_inf, uint, 16, 4);\n+extern ARRAY(expected_minf, uint, 16, 4);\n+extern ARRAY(expected_zero, uint, 16, 4);\n+extern ARRAY(expected_mzero, uint, 16, 4);\n+#endif\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: y=vcomp(x1,x2), then store the result.  */\n+#define TEST_VCOMP1(INSN, Q, T1, T2, T3, W, N)\t\t\t\t\\\n+  VECT_VAR(vector_res, T3, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\t\t\\\n+  vst1##Q##_u##W(VECT_VAR(result, T3, W, N), VECT_VAR(vector_res, T3, W, N))\n+\n+#define TEST_VCOMP(INSN, Q, T1, T2, T3, W, N)\t\t\t\t\\\n+  TEST_VCOMP1(INSN, Q, T1, T2, T3, W, N)\n+\n+  /* No need for 64 bits elements.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE (vector, float, 16, 4);\n+  DECL_VARIABLE (vector, float, 16, 8);\n+#endif\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 16, 8);\n+#endif\n+\n+  clean_results ();\n+\n+  /* Choose init value arbitrarily, will be used for vector\n+     comparison.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP (vector, , float, f, 16, 4, -15.0f);\n+  VDUP (vector, q, float, f, 16, 8, 14.0f);\n+#endif\n+\n+  /* Float variants.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  TEST_VCOMP (INSN_NAME, q, float, f, uint, 16, 8);\n+#endif\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_float, \"\");\n+  CHECK (TEST_MSG, uint, 16, 8, PRIx16, expected_q_float, \"\");\n+#endif\n+\n+  /* Extra FP tests with special values (NaN, ....).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP (vector, , float, f, 16, 4, NAN);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_nan, \"FP special (NaN)\");\n+\n+  VDUP (vector, , float, f, 16, 4, -NAN);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_mnan, \" FP special (-NaN)\");\n+\n+  VDUP (vector, , float, f, 16, 4, HUGE_VALF);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_inf, \" FP special (inf)\");\n+\n+  VDUP (vector, , float, f, 16, 4, -HUGE_VALF);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_minf, \" FP special (-inf)\");\n+\n+  VDUP (vector, , float, f, 16, 4, 0.0);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_zero, \" FP special (0.0)\");\n+\n+  VDUP (vector, , float, f, 16, 4, 0.0);\n+  TEST_VCOMP (INSN_NAME, , float, f, uint, 16, 4);\n+  CHECK (TEST_MSG, uint, 16, 4, PRIx16, expected_mzero, \" FP special (-0.0)\");\n+#endif\n+\n+#ifdef EXTRA_TESTS\n+  EXTRA_TESTS();\n+#endif\n+}\n+\n+int main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+\n+  return 0;\n+}"}, {"sha": "30490653a185e09d7d02ddd19775be58f3918154", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vabd.c", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabd.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -30,10 +30,20 @@ VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffd0, 0xffffffd1,\n \t\t\t\t\t 0xffffffd2, 0xffffffd3 };\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x42407ae1, 0x423c7ae1,\n \t\t\t\t\t   0x42387ae1, 0x42347ae1 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0x4e13, 0x4dd3,\n+\t\t\t\t\t      0x4d93, 0x4d53 };\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0x5204, 0x51e4, 0x51c4, 0x51a4,\n+\t\t\t\t\t      0x5184, 0x5164, 0x5144, 0x5124 };\n+#endif\n \n /* Additional expected results for float32 variants with specially\n    chosen input values.  */\n VECT_VAR_DECL(expected_float32,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_float16, hfloat, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t      0x0, 0x0, 0x0, 0x0 };\n+#endif\n \n #define TEST_MSG \"VABD/VABDQ\"\n void exec_vabd (void)\n@@ -65,6 +75,17 @@ void exec_vabd (void)\n   DECL_VABD_VAR(vector2);\n   DECL_VABD_VAR(vector_res);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector1, float, 16, 4);\n+  DECL_VARIABLE(vector1, float, 16, 8);\n+\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+  DECL_VARIABLE(vector2, float, 16, 8);\n+\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n+\n   clean_results ();\n \n   /* Initialize input \"vector1\" from \"buffer\".  */\n@@ -82,6 +103,12 @@ void exec_vabd (void)\n   VLOAD(vector1, buffer, q, uint, u, 16, 8);\n   VLOAD(vector1, buffer, q, uint, u, 32, 4);\n   VLOAD(vector1, buffer, q, float, f, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector1, buffer, , float, f, 16, 4);\n+  VLOAD(vector1, buffer, , float, f, 16, 4);\n+  VLOAD(vector1, buffer, q, float, f, 16, 8);\n+  VLOAD(vector1, buffer, q, float, f, 16, 8);\n+#endif\n \n   /* Choose init value arbitrarily.  */\n   VDUP(vector2, , int, s, 8, 8, 1);\n@@ -98,6 +125,10 @@ void exec_vabd (void)\n   VDUP(vector2, q, uint, u, 16, 8, 12);\n   VDUP(vector2, q, uint, u, 32, 4, 32);\n   VDUP(vector2, q, float, f, 32, 4, 32.12f);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector2, , float, f, 16, 4, 8.3f);\n+  VDUP(vector2, q, float, f, 16, 8, 32.12f);\n+#endif\n \n   /* Execute the tests.  */\n   TEST_VABD(, int, s, 8, 8);\n@@ -115,6 +146,11 @@ void exec_vabd (void)\n   TEST_VABD(q, uint, u, 32, 4);\n   TEST_VABD(q, float, f, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VABD(, float, f, 16, 4);\n+  TEST_VABD(q, float, f, 16, 8);\n+#endif\n+\n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n@@ -129,19 +165,38 @@ void exec_vabd (void)\n   CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n-\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+#endif\n \n   /* Extra FP tests with special values (-0.0, ....) */\n   VDUP(vector1, q, float, f, 32, 4, -0.0f);\n   VDUP(vector2, q, float, f, 32, 4, 0.0);\n   TEST_VABD(q, float, f, 32, 4);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \" FP special (-0.0)\");\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector1, q, float, f, 16, 8, -0.0f);\n+  VDUP(vector2, q, float, f, 16, 8, 0.0);\n+  TEST_VABD(q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_float16,\n+\t   \" FP special (-0.0)\");\n+#endif\n+\n   /* Extra FP tests with special values (-0.0, ....) */\n   VDUP(vector1, q, float, f, 32, 4, 0.0f);\n   VDUP(vector2, q, float, f, 32, 4, -0.0);\n   TEST_VABD(q, float, f, 32, 4);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \" FP special (-0.0)\");\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector1, q, float, f, 16, 8, 0.0f);\n+  VDUP(vector2, q, float, f, 16, 8, -0.0);\n+  TEST_VABD(q, float, f, 16, 8);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_float16,\n+\t   \" FP special (-0.0)\");\n+#endif\n }\n \n int main (void)"}, {"sha": "9d6d5b21cf467f3aacfb4e17aa91b056be83b7b1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vabs.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabs.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -21,24 +21,52 @@ VECT_VAR_DECL(expected,int,32,4) [] = { 0x10, 0xf, 0xe, 0xd };\n /* Expected results for float32 variants. Needs to be separated since\n    the generic test function does not test floating-point\n    versions.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_float16, hfloat, 16, 4) [] = { 0x409a, 0x409a,\n+\t\t\t\t\t\t      0x409a, 0x409a };\n+VECT_VAR_DECL(expected_float16, hfloat, 16, 8) [] = { 0x42cd, 0x42cd,\n+\t\t\t\t\t\t      0x42cd, 0x42cd,\n+\t\t\t\t\t\t      0x42cd, 0x42cd,\n+\t\t\t\t\t\t      0x42cd, 0x42cd };\n+#endif\n VECT_VAR_DECL(expected_float32,hfloat,32,2) [] = { 0x40133333, 0x40133333 };\n VECT_VAR_DECL(expected_float32,hfloat,32,4) [] = { 0x4059999a, 0x4059999a,\n \t\t\t\t\t\t   0x4059999a, 0x4059999a };\n \n void exec_vabs_f32(void)\n {\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector, float, 32, 2);\n   DECL_VARIABLE(vector, float, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector_res, float, 32, 2);\n   DECL_VARIABLE(vector_res, float, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, -2.3f);\n+  VDUP(vector, q, float, f, 16, 8, 3.4f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, -2.3f);\n   VDUP(vector, q, float, f, 32, 4, 3.4f);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_UNARY_OP(INSN_NAME, , float, f, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, q, float, f, 16, 8);\n+#endif\n   TEST_UNARY_OP(INSN_NAME, , float, f, 32, 2);\n   TEST_UNARY_OP(INSN_NAME, q, float, f, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_float16, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_float16, \"\");\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_float32, \"\");\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \"\");\n }"}, {"sha": "1561dc1c2626e08dc3aeadc07d58a8f8f1bd7ea2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vadd.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvadd.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -43,6 +43,14 @@ VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff3,\n VECT_VAR_DECL(expected_float32,hfloat,32,2) [] = { 0x40d9999a, 0x40d9999a };\n VECT_VAR_DECL(expected_float32,hfloat,32,4) [] = { 0x41100000, 0x41100000,\n \t\t\t\t\t\t   0x41100000, 0x41100000 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_float16, hfloat, 16, 4) [] = { 0x46cd, 0x46cd,\n+\t\t\t\t\t\t      0x46cd, 0x46cd };\n+VECT_VAR_DECL(expected_float16, hfloat, 16, 8) [] = { 0x4880, 0x4880,\n+\t\t\t\t\t\t      0x4880, 0x4880,\n+\t\t\t\t\t\t      0x4880, 0x4880,\n+\t\t\t\t\t\t      0x4880, 0x4880 };\n+#endif\n \n void exec_vadd_f32(void)\n {\n@@ -66,4 +74,27 @@ void exec_vadd_f32(void)\n \n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_float32, \"\");\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \"\");\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+  DECL_VARIABLE(vector2, float, 16, 8);\n+\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+\n+  VDUP(vector, , float, f, 16, 4, 2.3f);\n+  VDUP(vector, q, float, f, 16, 8, 3.4f);\n+\n+  VDUP(vector2, , float, f, 16, 4, 4.5f);\n+  VDUP(vector2, q, float, f, 16, 8, 5.6f);\n+\n+  TEST_BINARY_OP(INSN_NAME, , float, f, 16, 4);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_float16, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_float16, \"\");\n+#endif\n }"}, {"sha": "ab00b961ef41e53dec3746fea0f46727c2893f98", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcage.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcage.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -11,3 +11,13 @@ VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n VECT_VAR_DECL(expected2,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n VECT_VAR_DECL(expected2,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n \t\t\t\t\t  0xffffffff, 0xffffffff };\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected, uint, 16, 4) [] = { 0xffff, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected, uint, 16, 8) [] = { 0xffff, 0xffff, 0xffff, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected2, uint, 16, 4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL (expected2, uint, 16, 8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t      0xffff, 0xffff, 0xffff, 0x0 };\n+#endif"}, {"sha": "81c46a64840977f656bf9b8e70d4e5b29cc54641", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcagt.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcagt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcagt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcagt.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -11,3 +11,13 @@ VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n VECT_VAR_DECL(expected2,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n VECT_VAR_DECL(expected2,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n \t\t\t\t\t  0xffffffff, 0xffffffff };\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected, uint, 16, 8) [] = { 0xffff, 0xffff, 0x0, 0x0,\n+\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected2, uint, 16, 4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL (expected2, uint, 16, 8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n+\t\t\t\t\t      0xffff, 0xffff, 0x0, 0x0 };\n+#endif"}, {"sha": "091ffaf6b83393204188893fef285d34b5852b81", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcale.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcale.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcale.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcale.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -9,3 +9,13 @@ VECT_VAR_DECL(expected,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0xffffffff };\n \n VECT_VAR_DECL(expected2,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected2,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected, uint, 16, 4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL (expected, uint, 16, 8) [] = { 0x0, 0x0, 0xffff, 0xffff,\n+\t\t\t\t\t     0xffff, 0xffff, 0xffff, 0xffff };\n+\n+VECT_VAR_DECL (expected2, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected2, uint, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0xffff, 0xffff };\n+#endif"}, {"sha": "525176afa0e0fa6d3a8e60f7a41f36e22dec694c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcalt.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcalt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcalt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcalt.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -9,3 +9,13 @@ VECT_VAR_DECL(expected,uint,32,4) [] = { 0x0, 0x0, 0x0, 0xffffffff };\n \n VECT_VAR_DECL(expected2,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected2,uint,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected, uint, 16, 4) [] = { 0x0, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL (expected, uint, 16, 8) [] = { 0x0, 0x0, 0x0, 0xffff,\n+\t\t\t\t\t     0xffff, 0xffff, 0xffff, 0xffff };\n+\n+VECT_VAR_DECL (expected2, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected2, uint, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t      0x0, 0x0, 0x0, 0xffff };\n+#endif"}, {"sha": "ede01fb1afae073a901eb682f1a5bb93b7eb4c93", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vceq.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceq.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -32,13 +32,31 @@ VECT_VAR_DECL(expected_q_uint,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t\t0x0, 0x0, 0xffff, 0x0 };\n VECT_VAR_DECL(expected_q_uint,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0x0 };\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_float, uint, 16, 4) [] = { 0x0, 0xffff, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_q_float, uint, 16, 8) [] = { 0x0, 0x0, 0xffff, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0, };\n+#endif\n+\n VECT_VAR_DECL(expected_float,uint,32,2) [] = { 0x0, 0xffffffff };\n VECT_VAR_DECL(expected_q_float,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0x0 };\n \n VECT_VAR_DECL(expected_uint2,uint,32,2) [] = { 0xffffffff, 0x0 };\n VECT_VAR_DECL(expected_uint3,uint,32,2) [] = { 0x0, 0xffffffff };\n VECT_VAR_DECL(expected_uint4,uint,32,2) [] = { 0xffffffff, 0x0 };\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_nan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_mnan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_nan2, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected_inf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_minf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_inf2, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_mzero, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff };\n+#endif\n+\n VECT_VAR_DECL(expected_nan,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_mnan,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_nan2,uint,32,2) [] = { 0x0, 0x0 };"}, {"sha": "eefaa7acfb51e23a4e56da83d8fbe3c3c0a6de75", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vceqz_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceqz_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceqz_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvceqz_1.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,27 @@\n+/* This file tests an intrinsic which currently has only an f16 variant and that\n+   is only available when FP16 arithmetic instructions are supported.  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+\n+#define INSN_NAME vceqz\n+#define TEST_MSG \"VCEQZ/VCEQZQ\"\n+\n+#include \"cmp_zero_op.inc\"\n+\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_float, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_q_float, uint, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0, 0x0, 0x0 };\n+#endif\n+\n+/* Extra FP tests with special values (NaN, ....).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_nan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_mnan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_inf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_minf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_zero, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL (expected_mzero, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff };\n+#endif"}, {"sha": "0ec7c7b07a45cd50aab801562a95ca21cceacd95", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcge.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcge.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -28,13 +28,35 @@ VECT_VAR_DECL(expected_q_uint,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t\t0, 0x0, 0xffff, 0xffff };\n VECT_VAR_DECL(expected_q_uint,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0xffffffff };\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_float, uint, 16, 4) [] = { 0x0, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL (expected_q_float, uint, 16, 8) [] = { 0x0, 0x0,\n+\t\t\t\t\t\t     0xffff, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0xffff };\n+#endif\n+\n VECT_VAR_DECL(expected_float,uint,32,2) [] = { 0x0, 0xffffffff };\n VECT_VAR_DECL(expected_q_float,uint,32,4) [] = { 0x0, 0x0, 0xffffffff, 0xffffffff };\n \n VECT_VAR_DECL(expected_uint2,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n VECT_VAR_DECL(expected_uint3,uint,32,2) [] = { 0x0, 0xffffffff };\n VECT_VAR_DECL(expected_uint4,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_nan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_mnan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_nan2, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected_inf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_minf, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL (expected_inf2, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL (expected_mzero, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff };\n+#endif\n+\n VECT_VAR_DECL(expected_nan,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_mnan,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_nan2,uint,32,2) [] = { 0x0, 0x0 };"}, {"sha": "3ce74f26a9ced358bb191e418b2b93bfdadfc187", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcgez_1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgez_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgez_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgez_1.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,30 @@\n+/* This file tests an intrinsic which currently has only an f16 variant and that\n+   is only available when FP16 arithmetic instructions are supported.  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+\n+#define INSN_NAME vcgez\n+#define TEST_MSG \"VCGEZ/VCGEZQ\"\n+\n+#include \"cmp_zero_op.inc\"\n+\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_float, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_q_float, uint, 16, 8) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0xffff };\n+#endif\n+\n+/* Extra FP tests with special values (NaN, ....).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_nan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_mnan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_inf, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t 0xffff, 0xffff };\n+VECT_VAR_DECL (expected_minf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_zero, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL (expected_mzero, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff };\n+#endif"}, {"sha": "3976d57202d33d0cbe501029846273fc3e4965b6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcgt.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgt.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -28,13 +28,34 @@ VECT_VAR_DECL(expected_q_uint,uint,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n \t\t\t\t\t\t0x0, 0x0, 0x0, 0xffff };\n VECT_VAR_DECL(expected_q_uint,uint,32,4) [] = { 0x0, 0x0, 0x0, 0xffffffff };\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_float, uint, 16, 4) [] = { 0x0, 0x0, 0xffff, 0xffff };\n+VECT_VAR_DECL (expected_q_float, uint, 16, 8) [] = { 0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0xffff };\n+#endif\n+\n VECT_VAR_DECL(expected_float,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_q_float,uint,32,4) [] = { 0x0, 0x0, 0x0, 0xffffffff };\n \n VECT_VAR_DECL(expected_uint2,uint,32,2) [] = { 0x0, 0xffffffff };\n VECT_VAR_DECL(expected_uint3,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_uint4,uint,32,2) [] = { 0x0, 0xffffffff };\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_nan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_mnan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_nan2, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected_inf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_minf, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL (expected_inf2, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL (expected_mzero, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+#endif\n+\n VECT_VAR_DECL(expected_nan,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_mnan,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_nan2,uint,32,2) [] = { 0x0, 0x0 };"}, {"sha": "a096dc793f3fa8bc06f4be17129bf0d24e7845f8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcgtz_1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgtz_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgtz_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcgtz_1.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,28 @@\n+/* This file tests an intrinsic which currently has only an f16 variant and that\n+   is only available when FP16 arithmetic instructions are supported.  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+\n+#define INSN_NAME vcgtz\n+#define TEST_MSG \"VCGTZ/VCGTZQ\"\n+\n+#include \"cmp_zero_op.inc\"\n+\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_float, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_q_float, uint, 16, 8) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0xffff };\n+#endif\n+\n+/* Extra FP tests with special values (NaN, ....).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_nan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_mnan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_inf, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t 0xffff, 0xffff };\n+VECT_VAR_DECL (expected_minf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_zero, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_mzero, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+#endif"}, {"sha": "49f89d800632463e4b646246712ca5d855910fa7", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcle.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcle.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -31,6 +31,14 @@ VECT_VAR_DECL(expected_q_uint,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n VECT_VAR_DECL(expected_q_uint,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n \t\t\t\t\t\t0xffffffff, 0x0 };\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_float, uint, 16, 4) [] = { 0xffff, 0xffff, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_q_float, uint, 16, 8) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t     0xffff, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0 };\n+#endif\n+\n VECT_VAR_DECL(expected_float,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n VECT_VAR_DECL(expected_q_float,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n \t\t\t\t\t\t 0xffffffff, 0x0 };\n@@ -39,6 +47,20 @@ VECT_VAR_DECL(expected_uint2,uint,32,2) [] = { 0xffffffff, 0x0 };\n VECT_VAR_DECL(expected_uint3,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n VECT_VAR_DECL(expected_uint4,uint,32,2) [] = { 0xffffffff, 0x0 };\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_nan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_mnan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_nan2, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected_inf, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t 0xffff, 0xffff };\n+VECT_VAR_DECL (expected_minf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_inf2, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected_mzero, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff };\n+#endif\n+\n VECT_VAR_DECL(expected_nan,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_mnan,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_nan2,uint,32,2) [] = { 0x0, 0x0 };"}, {"sha": "7e18e3d3b72afff759b3685465c8fe0849b979dc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vclez_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclez_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclez_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclez_1.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,29 @@\n+/* This file tests an intrinsic which currently has only an f16 variant and that\n+   is only available when FP16 arithmetic instructions are supported.  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+\n+#define INSN_NAME vclez\n+#define TEST_MSG \"VCLEZ/VCLEZQ\"\n+\n+#include \"cmp_zero_op.inc\"\n+\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_float, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff };\n+VECT_VAR_DECL (expected_q_float, uint, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0 };\n+#endif\n+\n+/* Extra FP tests with special values (NaN, ....).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_nan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_mnan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_inf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected_minf, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL (expected_zero, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL (expected_mzero, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff };\n+#endif"}, {"sha": "b6f8d872daebc33b80345b9355ca809efde02742", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vclt.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvclt.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -30,6 +30,14 @@ VECT_VAR_DECL(expected_q_uint,uint,16,8) [] = { 0xffff, 0xffff, 0xffff, 0xffff,\n VECT_VAR_DECL(expected_q_uint,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n \t\t\t\t\t\t0x0, 0x0 };\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_float, uint, 16, 4) [] = { 0xffff, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_q_float, uint, 16, 8) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t     0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0,\n+\t\t\t\t\t\t     0x0, 0x0 };\n+#endif\n+\n VECT_VAR_DECL(expected_float,uint,32,2) [] = { 0xffffffff, 0x0 };\n VECT_VAR_DECL(expected_q_float,uint,32,4) [] = { 0xffffffff, 0xffffffff,\n \t\t\t\t\t\t 0x0, 0x0 };\n@@ -38,6 +46,19 @@ VECT_VAR_DECL(expected_uint2,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_uint3,uint,32,2) [] = { 0xffffffff, 0x0 };\n VECT_VAR_DECL(expected_uint4,uint,32,2) [] = { 0x0, 0x0 };\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_nan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_mnan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_nan2, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected_inf, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t 0xffff, 0xffff };\n+VECT_VAR_DECL (expected_minf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_inf2, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected_mzero, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+#endif\n+\n VECT_VAR_DECL(expected_nan,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_mnan,uint,32,2) [] = { 0x0, 0x0 };\n VECT_VAR_DECL(expected_nan2,uint,32,2) [] = { 0x0, 0x0 };"}, {"sha": "9b75cc7973de5f86582ecf184e0305c271258c73", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcltz_1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcltz_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcltz_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcltz_1.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,27 @@\n+/* This file tests an intrinsic which currently has only an f16 variant and that\n+   is only available when FP16 arithmetic instructions are supported.  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+\n+#define INSN_NAME vcltz\n+#define TEST_MSG \"VCLTZ/VCLTZQ\"\n+\n+#include \"cmp_zero_op.inc\"\n+\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_float, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t   0xffff, 0xffff };\n+VECT_VAR_DECL (expected_q_float, uint, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0 };\n+#endif\n+\n+/* Extra FP tests with special values (NaN, ....).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected_nan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0  };\n+VECT_VAR_DECL (expected_mnan, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_inf, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+VECT_VAR_DECL (expected_minf, uint, 16, 4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t  0xffff, 0xffff };\n+VECT_VAR_DECL (expected_zero, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL (expected_mzero, uint, 16, 4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+#endif"}, {"sha": "b2b861af8e4050d78ea646d5adaf752d37db6cdc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvt.c", "status": "modified", "additions": 182, "deletions": 7, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvt.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -4,36 +4,99 @@\n #include <math.h>\n \n /* Expected results for vcvt.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_s, hfloat, 16, 4) [] =\n+{ 0xcc00, 0xcb80, 0xcb00, 0xca80 };\n+VECT_VAR_DECL(expected_u, hfloat, 16, 4) [] =\n+{ 0x7c00, 0x7c00, 0x7c00, 0x7c00, };\n+VECT_VAR_DECL(expected_s, hfloat, 16, 8) [] =\n+{ 0xcc00, 0xcb80, 0xcb00, 0xca80,\n+  0xca00, 0xc980, 0xc900, 0xc880 };\n+VECT_VAR_DECL(expected_u, hfloat, 16, 8) [] =\n+{ 0x7c00, 0x7c00, 0x7c00, 0x7c00,\n+  0x7c00, 0x7c00, 0x7c00, 0x7c00, };\n+#endif\n VECT_VAR_DECL(expected_s,hfloat,32,2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL(expected_u,hfloat,32,2) [] = { 0x4f800000, 0x4f800000 };\n VECT_VAR_DECL(expected_s,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n-\t\t\t\t\t   0xc1600000, 0xc1500000 };\n+\t\t\t\t\t     0xc1600000, 0xc1500000 };\n VECT_VAR_DECL(expected_u,hfloat,32,4) [] = { 0x4f800000, 0x4f800000,\n-\t\t\t\t\t   0x4f800000, 0x4f800000 };\n+\t\t\t\t\t     0x4f800000, 0x4f800000 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, int, 16, 4) [] = { 0xfff1, 0x5, 0xfff1, 0x5 };\n+VECT_VAR_DECL(expected, uint, 16, 4) [] = { 0x0, 0x5, 0x0, 0x5 };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x0, 0x0, 0xf, 0xfff1,\n+\t\t\t\t\t   0x0, 0x0, 0xf, 0xfff1 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x0, 0x0, 0xf, 0x0,\n+\t\t\t\t\t    0x0, 0x0, 0xf, 0x0 };\n+#endif\n VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff1, 0x5 };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0x0, 0x5 };\n VECT_VAR_DECL(expected,int,32,4) [] = { 0x0, 0x0, 0xf, 0xfffffff1 };\n VECT_VAR_DECL(expected,uint,32,4) [] = { 0x0, 0x0, 0xf, 0x0 };\n \n /* Expected results for vcvt_n.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_vcvt_n_s, hfloat, 16, 4) [] = { 0xc400, 0xc380,\n+\t\t\t\t\t\t       0xc300, 0xc280 };\n+VECT_VAR_DECL(expected_vcvt_n_u, hfloat, 16, 4) [] = { 0x6000, 0x6000,\n+\t\t\t\t\t\t       0x6000, 0x6000 };\n+VECT_VAR_DECL(expected_vcvt_n_s, hfloat, 16, 8) [] = { 0xb000, 0xaf80,\n+\t\t\t\t\t\t       0xaf00, 0xae80,\n+\t\t\t\t\t\t       0xae00, 0xad80,\n+\t\t\t\t\t\t       0xad00, 0xac80 };\n+VECT_VAR_DECL(expected_vcvt_n_u, hfloat, 16, 8) [] = { 0x4c00, 0x4c00,\n+\t\t\t\t\t\t       0x4c00, 0x4c00,\n+\t\t\t\t\t\t       0x4c00, 0x4c00,\n+\t\t\t\t\t\t       0x4c00, 0x4c00 };\n+#endif\n VECT_VAR_DECL(expected_vcvt_n_s,hfloat,32,2) [] = { 0xc0800000, 0xc0700000 };\n VECT_VAR_DECL(expected_vcvt_n_u,hfloat,32,2) [] = { 0x4c000000, 0x4c000000 };\n VECT_VAR_DECL(expected_vcvt_n_s,hfloat,32,4) [] = { 0xb2800000, 0xb2700000,\n \t\t\t\t\t\t  0xb2600000, 0xb2500000 };\n VECT_VAR_DECL(expected_vcvt_n_u,hfloat,32,4) [] = { 0x49800000, 0x49800000,\n \t\t\t\t\t\t  0x49800000, 0x49800000 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_vcvt_n, int, 16, 4) [] = { 0xffc3, 0x15,\n+\t\t\t\t\t\t  0xffc3, 0x15 };\n+VECT_VAR_DECL(expected_vcvt_n, uint, 16, 4) [] = { 0x0, 0x2a6, 0x0, 0x2a6 };\n+VECT_VAR_DECL(expected_vcvt_n, int, 16, 8) [] = { 0x0, 0x0, 0x78f, 0xf871,\n+\t\t\t\t\t\t  0x0, 0x0, 0x78f, 0xf871 };\n+VECT_VAR_DECL(expected_vcvt_n, uint, 16, 8) [] = { 0x0, 0x0, 0xf1e0, 0x0,\n+\t\t\t\t\t\t   0x0, 0x0, 0xf1e0, 0x0 };\n+#endif\n VECT_VAR_DECL(expected_vcvt_n,int,32,2) [] = { 0xff0b3333, 0x54cccd };\n VECT_VAR_DECL(expected_vcvt_n,uint,32,2) [] = { 0x0, 0x15 };\n VECT_VAR_DECL(expected_vcvt_n,int,32,4) [] = { 0x0, 0x0, 0x1e3d7, 0xfffe1c29 };\n VECT_VAR_DECL(expected_vcvt_n,uint,32,4) [] = { 0x0, 0x0, 0x1e, 0x0 };\n \n /* Expected results for vcvt with rounding.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_rounding, int, 16, 4) [] = { 0xa, 0xa, 0xa, 0xa };\n+VECT_VAR_DECL(expected_rounding, uint, 16, 4) [] = { 0xa, 0xa, 0xa, 0xa };\n+VECT_VAR_DECL(expected_rounding, int, 16, 8) [] = { 0x7d, 0x7d, 0x7d, 0x7d,\n+\t\t\t\t\t\t    0x7d, 0x7d, 0x7d, 0x7d };\n+VECT_VAR_DECL(expected_rounding, uint, 16, 8) [] = { 0x7d, 0x7d, 0x7d, 0x7d,\n+\t\t\t\t\t\t     0x7d, 0x7d, 0x7d, 0x7d };\n+#endif\n VECT_VAR_DECL(expected_rounding,int,32,2) [] = { 0xa, 0xa };\n VECT_VAR_DECL(expected_rounding,uint,32,2) [] = { 0xa, 0xa };\n VECT_VAR_DECL(expected_rounding,int,32,4) [] = { 0x7d, 0x7d, 0x7d, 0x7d };\n VECT_VAR_DECL(expected_rounding,uint,32,4) [] = { 0x7d, 0x7d, 0x7d, 0x7d };\n \n /* Expected results for vcvt_n with rounding.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_vcvt_n_rounding, int, 16, 4) [] =\n+{ 0x533, 0x533, 0x533, 0x533 };\n+VECT_VAR_DECL(expected_vcvt_n_rounding, uint, 16, 4) [] =\n+{ 0x533, 0x533, 0x533, 0x533 };\n+VECT_VAR_DECL(expected_vcvt_n_rounding, int, 16, 8) [] =\n+{ 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+  0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_vcvt_n_rounding, uint, 16, 8) [] =\n+{ 0xffff, 0xffff, 0xffff, 0xffff,\n+  0xffff, 0xffff, 0xffff, 0xffff };\n+#endif\n VECT_VAR_DECL(expected_vcvt_n_rounding,int,32,2) [] = { 0xa66666, 0xa66666 };\n VECT_VAR_DECL(expected_vcvt_n_rounding,uint,32,2) [] = { 0xa66666, 0xa66666 };\n VECT_VAR_DECL(expected_vcvt_n_rounding,int,32,4) [] = { 0xfbccc, 0xfbccc,\n@@ -42,11 +105,17 @@ VECT_VAR_DECL(expected_vcvt_n_rounding,uint,32,4) [] = { 0xfbccc, 0xfbccc,\n \t\t\t\t\t\t0xfbccc, 0xfbccc };\n \n /* Expected results for vcvt_n with saturation.  */\n-VECT_VAR_DECL(expected_vcvt_n_saturation,int,32,2) [] = { 0x7fffffff,\n-\t\t\t\t\t\t\t  0x7fffffff };\n-VECT_VAR_DECL(expected_vcvt_n_saturation,int,32,4) [] = { 0x7fffffff,\n-\t\t\t\t\t\t\t  0x7fffffff,\n-\t\t\t\t\t       0x7fffffff, 0x7fffffff };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_vcvt_n_saturation, int, 16, 4) [] =\n+{ 0x533, 0x533, 0x533, 0x533 };\n+VECT_VAR_DECL(expected_vcvt_n_saturation, int, 16, 8) [] =\n+{ 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+  0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+#endif\n+VECT_VAR_DECL(expected_vcvt_n_saturation,int,32,2) [] =\n+{ 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_vcvt_n_saturation,int,32,4) [] =\n+{ 0x7fffffff, 0x7fffffff, 0x7fffffff, 0x7fffffff };\n \n #define TEST_MSG \"VCVT/VCVTQ\"\n void exec_vcvt (void)\n@@ -89,11 +158,26 @@ void exec_vcvt (void)\n \n   /* Initialize input \"vector\" from \"buffer\".  */\n   TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+  VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector, buffer, , float, f, 32, 2);\n   VLOAD(vector, buffer, q, float, f, 32, 4);\n \n   /* Make sure some elements have a fractional part, to exercise\n      integer conversions.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VSET_LANE(vector, , float, f, 16, 4, 0, -15.3f);\n+  VSET_LANE(vector, , float, f, 16, 4, 1, 5.3f);\n+  VSET_LANE(vector, , float, f, 16, 4, 2, -15.3f);\n+  VSET_LANE(vector, , float, f, 16, 4, 3, 5.3f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 4, -15.3f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 5, 5.3f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 6, -15.3f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 7, 5.3f);\n+#endif\n+\n   VSET_LANE(vector, , float, f, 32, 2, 0, -15.3f);\n   VSET_LANE(vector, , float, f, 32, 2, 1, 5.3f);\n   VSET_LANE(vector, q, float, f, 32, 4, 2, -15.3f);\n@@ -103,23 +187,55 @@ void exec_vcvt (void)\n      before overwriting them.  */\n #define TEST_MSG2 \"\"\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt_f16_xx.  */\n+  TEST_VCVT_FP(, float, f, 16, 4, int, s, expected_s);\n+  TEST_VCVT_FP(, float, f, 16, 4, uint, u, expected_u);\n+#endif\n   /* vcvt_f32_xx.  */\n   TEST_VCVT_FP(, float, f, 32, 2, int, s, expected_s);\n   TEST_VCVT_FP(, float, f, 32, 2, uint, u, expected_u);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvtq_f16_xx.  */\n+  TEST_VCVT_FP(q, float, f, 16, 8, int, s, expected_s);\n+  TEST_VCVT_FP(q, float, f, 16, 8, uint, u, expected_u);\n+#endif\n   /* vcvtq_f32_xx.  */\n   TEST_VCVT_FP(q, float, f, 32, 4, int, s, expected_s);\n   TEST_VCVT_FP(q, float, f, 32, 4, uint, u, expected_u);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt_xx_f16.  */\n+  TEST_VCVT(, int, s, 16, 4, float, f, expected);\n+  TEST_VCVT(, uint, u, 16, 4, float, f, expected);\n+#endif\n   /* vcvt_xx_f32.  */\n   TEST_VCVT(, int, s, 32, 2, float, f, expected);\n   TEST_VCVT(, uint, u, 32, 2, float, f, expected);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VSET_LANE(vector, q, float, f, 16, 8, 0, 0.0f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 1, -0.0f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 2, 15.12f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 3, -15.12f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 4, 0.0f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 5, -0.0f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 6, 15.12f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 7, -15.12f);\n+#endif\n+\n   VSET_LANE(vector, q, float, f, 32, 4, 0, 0.0f);\n   VSET_LANE(vector, q, float, f, 32, 4, 1, -0.0f);\n   VSET_LANE(vector, q, float, f, 32, 4, 2, 15.12f);\n   VSET_LANE(vector, q, float, f, 32, 4, 3, -15.12f);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvtq_xx_f16.  */\n+  TEST_VCVT(q, int, s, 16, 8, float, f, expected);\n+  TEST_VCVT(q, uint, u, 16, 8, float, f, expected);\n+#endif\n+\n   /* vcvtq_xx_f32.  */\n   TEST_VCVT(q, int, s, 32, 4, float, f, expected);\n   TEST_VCVT(q, uint, u, 32, 4, float, f, expected);\n@@ -129,18 +245,38 @@ void exec_vcvt (void)\n #undef TEST_MSG\n #define TEST_MSG \"VCVT_N/VCVTQ_N\"\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt_n_f16_xx.  */\n+  TEST_VCVT_N_FP(, float, f, 16, 4, int, s, 2, expected_vcvt_n_s);\n+  TEST_VCVT_N_FP(, float, f, 16, 4, uint, u, 7, expected_vcvt_n_u);\n+#endif\n   /* vcvt_n_f32_xx.  */\n   TEST_VCVT_N_FP(, float, f, 32, 2, int, s, 2, expected_vcvt_n_s);\n   TEST_VCVT_N_FP(, float, f, 32, 2, uint, u, 7, expected_vcvt_n_u);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvtq_n_f16_xx.  */\n+  TEST_VCVT_N_FP(q, float, f, 16, 8, int, s, 7, expected_vcvt_n_s);\n+  TEST_VCVT_N_FP(q, float, f, 16, 8, uint, u, 12, expected_vcvt_n_u);\n+#endif\n   /* vcvtq_n_f32_xx.  */\n   TEST_VCVT_N_FP(q, float, f, 32, 4, int, s, 30, expected_vcvt_n_s);\n   TEST_VCVT_N_FP(q, float, f, 32, 4, uint, u, 12, expected_vcvt_n_u);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt_n_xx_f16.  */\n+  TEST_VCVT_N(, int, s, 16, 4, float, f, 2, expected_vcvt_n);\n+  TEST_VCVT_N(, uint, u, 16, 4, float, f, 7, expected_vcvt_n);\n+#endif\n   /* vcvt_n_xx_f32.  */\n   TEST_VCVT_N(, int, s, 32, 2, float, f, 20, expected_vcvt_n);\n   TEST_VCVT_N(, uint, u, 32, 2, float, f, 2, expected_vcvt_n);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvtq_n_xx_f16.  */\n+  TEST_VCVT_N(q, int, s, 16, 8, float, f, 7, expected_vcvt_n);\n+  TEST_VCVT_N(q, uint, u, 16, 8, float, f, 12, expected_vcvt_n);\n+#endif\n   /* vcvtq_n_xx_f32.  */\n   TEST_VCVT_N(q, int, s, 32, 4, float, f, 13, expected_vcvt_n);\n   TEST_VCVT_N(q, uint, u, 32, 4, float, f, 1, expected_vcvt_n);\n@@ -150,20 +286,49 @@ void exec_vcvt (void)\n #define TEST_MSG \"VCVT/VCVTQ\"\n #undef TEST_MSG2\n #define TEST_MSG2 \"(check rounding)\"\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, 10.4f);\n+  VDUP(vector, q, float, f, 16, 8, 125.9f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, 10.4f);\n   VDUP(vector, q, float, f, 32, 4, 125.9f);\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt_xx_f16.  */\n+  TEST_VCVT(, int, s, 16, 4, float, f, expected_rounding);\n+  TEST_VCVT(, uint, u, 16, 4, float, f, expected_rounding);\n+#endif\n   /* vcvt_xx_f32.  */\n   TEST_VCVT(, int, s, 32, 2, float, f, expected_rounding);\n   TEST_VCVT(, uint, u, 32, 2, float, f, expected_rounding);\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvtq_xx_f16.  */\n+  TEST_VCVT(q, int, s, 16, 8, float, f, expected_rounding);\n+  TEST_VCVT(q, uint, u, 16, 8, float, f, expected_rounding);\n+#endif\n   /* vcvtq_xx_f32.  */\n   TEST_VCVT(q, int, s, 32, 4, float, f, expected_rounding);\n   TEST_VCVT(q, uint, u, 32, 4, float, f, expected_rounding);\n \n #undef TEST_MSG\n #define TEST_MSG \"VCVT_N/VCVTQ_N\"\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt_n_xx_f16.  */\n+  TEST_VCVT_N(, int, s, 16, 4, float, f, 7, expected_vcvt_n_rounding);\n+  TEST_VCVT_N(, uint, u, 16, 4, float, f, 7, expected_vcvt_n_rounding);\n+#endif\n   /* vcvt_n_xx_f32.  */\n   TEST_VCVT_N(, int, s, 32, 2, float, f, 20, expected_vcvt_n_rounding);\n   TEST_VCVT_N(, uint, u, 32, 2, float, f, 20, expected_vcvt_n_rounding);\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvtq_n_xx_f16.  */\n+  TEST_VCVT_N(q, int, s, 16, 8, float, f, 13, expected_vcvt_n_rounding);\n+  TEST_VCVT_N(q, uint, u, 16, 8, float, f, 13, expected_vcvt_n_rounding);\n+#endif\n   /* vcvtq_n_xx_f32.  */\n   TEST_VCVT_N(q, int, s, 32, 4, float, f, 13, expected_vcvt_n_rounding);\n   TEST_VCVT_N(q, uint, u, 32, 4, float, f, 13, expected_vcvt_n_rounding);\n@@ -172,8 +337,18 @@ void exec_vcvt (void)\n #define TEST_MSG \"VCVT_N/VCVTQ_N\"\n #undef TEST_MSG2\n #define TEST_MSG2 \"(check saturation)\"\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt_n_xx_f16.  */\n+  TEST_VCVT_N(, int, s, 16, 4, float, f, 7, expected_vcvt_n_saturation);\n+#endif\n   /* vcvt_n_xx_f32.  */\n   TEST_VCVT_N(, int, s, 32, 2, float, f, 31, expected_vcvt_n_saturation);\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvtq_n_xx_f16.  */\n+  TEST_VCVT_N(q, int, s, 16, 8, float, f, 13, expected_vcvt_n_saturation);\n+#endif\n   /* vcvtq_n_xx_f32.  */\n   TEST_VCVT_N(q, int, s, 32, 4, float, f, 31, expected_vcvt_n_saturation);\n }"}, {"sha": "e0a479f5bbefe2612d72772487ef640a3e3bf393", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtX.inc", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvcvtX.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvcvtX.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvcvtX.inc?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,113 @@\n+/* Template file for VCVT operator validation.\n+\n+   This file is meant to be included by the relevant test files, which\n+   have to define the intrinsic family to test.  If a given intrinsic\n+   supports variants which are not supported by all the other vcvt\n+   operators, these can be tested by providing a definition for\n+   EXTRA_TESTS.\n+\n+   This file is only used for VCVT? tests, which currently have only f16 to\n+   integer variants.  It is based on vcvt.c.  */\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1 (NAME)\n+\n+void FNNAME (INSN_NAME) (void)\n+{\n+  int i;\n+\n+  /* Basic test: y=vcvt(x), then store the result.  */\n+#define TEST_VCVT1(INSN, Q, T1, T2, W, N, TS1, TS2, EXP)\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\\\n+    INSN##Q##_##T2##W##_##TS2##W(VECT_VAR(vector, TS1, W, N));\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\\\n+  CHECK(TEST_MSG, T1, W, N, PRIx##W, EXP, TEST_MSG2);\n+\n+#define TEST_VCVT(INSN, Q, T1, T2, W, N, TS1, TS2, EXP)\t\t\\\n+  TEST_VCVT1 (INSN, Q, T1, T2, W, N, TS1, TS2, EXP)\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+  VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n+\n+  /* Make sure some elements have a fractional part, to exercise\n+     integer conversions.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VSET_LANE(vector, , float, f, 16, 4, 0, -15.3f);\n+  VSET_LANE(vector, , float, f, 16, 4, 1, 5.3f);\n+  VSET_LANE(vector, , float, f, 16, 4, 2, -15.3f);\n+  VSET_LANE(vector, , float, f, 16, 4, 3, 5.3f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 4, -15.3f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 5, 5.3f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 6, -15.3f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 7, 5.3f);\n+#endif\n+\n+  /* The same result buffers are used multiple times, so we check them\n+     before overwriting them.  */\n+#define TEST_MSG2 \"\"\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt?_xx_f16.  */\n+  TEST_VCVT(INSN_NAME, , int, s, 16, 4, float, f, expected);\n+  TEST_VCVT(INSN_NAME, , uint, u, 16, 4, float, f, expected);\n+#endif\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VSET_LANE(vector, q, float, f, 16, 8, 0, 0.0f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 1, -0.0f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 2, 15.12f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 3, -15.12f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 4, 0.0f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 5, -0.0f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 6, 15.12f);\n+  VSET_LANE(vector, q, float, f, 16, 8, 7, -15.12f);\n+#endif\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt?q_xx_f16.  */\n+  TEST_VCVT(INSN_NAME, q, int, s, 16, 8, float, f, expected);\n+  TEST_VCVT(INSN_NAME, q, uint, u, 16, 8, float, f, expected);\n+#endif\n+\n+  /* Check rounding.  */\n+#undef TEST_MSG2\n+#define TEST_MSG2 \"(check rounding)\"\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, 10.4f);\n+  VDUP(vector, q, float, f, 16, 8, 125.9f);\n+#endif\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt?_xx_f16.  */\n+  TEST_VCVT(INSN_NAME, , int, s, 16, 4, float, f, expected_rounding);\n+  TEST_VCVT(INSN_NAME, , uint, u, 16, 4, float, f, expected_rounding);\n+#endif\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  /* vcvt?q_xx_f16.  */\n+  TEST_VCVT(INSN_NAME, q, int, s, 16, 8, float, f, expected_rounding);\n+  TEST_VCVT(INSN_NAME, q, uint, u, 16, 8, float, f, expected_rounding);\n+#endif\n+\n+#ifdef EXTRA_TESTS\n+  EXTRA_TESTS();\n+#endif\n+}\n+\n+int\n+main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+  return 0;\n+}"}, {"sha": "c467f053145ae12d94cdb8ae8ca5e507a44b04a5", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvta_1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvta_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvta_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvta_1.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,33 @@\n+/* This file tests an intrinsic which currently has only an f16 variant and that\n+   is only available when FP16 arithmetic instructions are supported.  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, int, 16, 4) [] = { 0xfff1, 0x5, 0xfff1, 0x5 };\n+VECT_VAR_DECL(expected, uint, 16, 4) [] = { 0x0, 0x5, 0x0, 0x5 };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x0, 0x0, 0xf, 0xfff1,\n+\t\t\t\t\t   0x0, 0x0, 0xf, 0xfff1 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x0, 0x0, 0xf, 0x0,\n+\t\t\t\t\t    0x0, 0x0, 0xf, 0x0 };\n+#endif\n+\n+/* Expected results with rounding.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_rounding, int, 16, 4) [] = { 0xa, 0xa, 0xa, 0xa };\n+VECT_VAR_DECL(expected_rounding, uint, 16, 4) [] = { 0xa, 0xa, 0xa, 0xa };\n+VECT_VAR_DECL(expected_rounding, int, 16, 8) [] = { 0x7e, 0x7e, 0x7e, 0x7e,\n+\t\t\t\t\t\t    0x7e, 0x7e, 0x7e, 0x7e };\n+VECT_VAR_DECL(expected_rounding, uint, 16, 8) [] = { 0x7e, 0x7e, 0x7e, 0x7e,\n+\t\t\t\t\t\t     0x7e, 0x7e, 0x7e, 0x7e };\n+#endif\n+\n+#define TEST_MSG \"VCVTA/VCVTAQ\"\n+#define INSN_NAME vcvta\n+\n+#include \"vcvtX.inc\""}, {"sha": "1c227729bf89f4fe061f710bee3c3f5b927dd15c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtm_1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtm_1.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,33 @@\n+/* This file tests an intrinsic which currently has only an f16 variant and that\n+   is only available when FP16 arithmetic instructions are supported.  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, int, 16, 4) [] = { 0xfff0, 0x5, 0xfff0, 0x5 };\n+VECT_VAR_DECL(expected, uint, 16, 4) [] = { 0x0, 0x5, 0x0, 0x5 };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x0, 0x0, 0xf, 0xfff0, 0x0,\n+\t\t\t\t\t   0x0, 0xf, 0xfff0 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x0, 0x0, 0xf, 0x0,\n+\t\t\t\t\t    0x0, 0x0, 0xf, 0x0 };\n+#endif\n+\n+/* Expected results with rounding.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_rounding, int, 16, 4) [] = { 0xa, 0xa, 0xa, 0xa };\n+VECT_VAR_DECL(expected_rounding, uint, 16, 4) [] = { 0xa, 0xa, 0xa, 0xa };\n+VECT_VAR_DECL(expected_rounding, int, 16, 8) [] = { 0x7d, 0x7d, 0x7d, 0x7d,\n+\t\t\t\t\t\t    0x7d, 0x7d, 0x7d, 0x7d };\n+VECT_VAR_DECL(expected_rounding, uint, 16, 8) [] = { 0x7d, 0x7d, 0x7d, 0x7d,\n+\t\t\t\t\t\t     0x7d, 0x7d, 0x7d, 0x7d };\n+#endif\n+\n+#define TEST_MSG \"VCVTM/VCVTMQ\"\n+#define INSN_NAME vcvtm\n+\n+#include \"vcvtX.inc\""}, {"sha": "7057909f855076f65398af1ddff5f6fdd0ec2b42", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtp_1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtp_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtp_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtp_1.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,33 @@\n+/* This file tests an intrinsic which currently has only an f16 variant and that\n+   is only available when FP16 arithmetic instructions are supported.  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, int, 16, 4) [] = { 0xfff1, 0x6, 0xfff1, 0x6 };\n+VECT_VAR_DECL(expected, uint, 16, 4) [] = { 0x0, 0x6, 0x0, 0x6 };\n+VECT_VAR_DECL(expected, int, 16, 8) [] = { 0x0, 0x0, 0x10, 0xfff1,\n+\t\t\t\t\t   0x0, 0x0, 0x10, 0xfff1 };\n+VECT_VAR_DECL(expected, uint, 16, 8) [] = { 0x0, 0x0, 0x10, 0x0,\n+\t\t\t\t\t    0x0, 0x0, 0x10, 0x0 };\n+#endif\n+\n+/* Expected results with rounding.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_rounding, int, 16, 4) [] = { 0xb, 0xb, 0xb, 0xb };\n+VECT_VAR_DECL(expected_rounding, uint, 16, 4) [] = { 0xb, 0xb, 0xb, 0xb };\n+VECT_VAR_DECL(expected_rounding, int, 16, 8) [] = { 0x7e, 0x7e, 0x7e, 0x7e,\n+\t\t\t\t\t\t    0x7e, 0x7e, 0x7e, 0x7e };\n+VECT_VAR_DECL(expected_rounding, uint, 16, 8) [] = { 0x7e, 0x7e, 0x7e, 0x7e,\n+\t\t\t\t\t\t     0x7e, 0x7e, 0x7e, 0x7e };\n+#endif\n+\n+#define TEST_MSG \"VCVTP/VCVTPQ\"\n+#define INSN_NAME vcvtp\n+\n+#include \"vcvtX.inc\""}, {"sha": "2cf68fe895d715bd644ac6cd98f6c321b50736a8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vfma.c", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfma.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -3,11 +3,19 @@\n #include \"compute-ref-data.h\"\n \n #ifdef __ARM_FEATURE_FMA\n+\n /* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0x61c6, 0x61c8, 0x61ca, 0x61cc };\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0x6435, 0x6436, 0x6437, 0x6438,\n+\t\t\t\t\t      0x6439, 0x643a, 0x643b, 0x643c };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x4438ca3d, 0x44390a3d };\n-VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x44869eb8, 0x4486beb8, 0x4486deb8, 0x4486feb8 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x44869eb8, 0x4486beb8,\n+\t\t\t\t\t   0x4486deb8, 0x4486feb8 };\n #ifdef __aarch64__\n-VECT_VAR_DECL(expected,hfloat,64,2) [] = { 0x408906e1532b8520, 0x40890ee1532b8520 };\n+VECT_VAR_DECL(expected,hfloat,64,2) [] = { 0x408906e1532b8520,\n+\t\t\t\t\t   0x40890ee1532b8520 };\n #endif\n \n #define TEST_MSG \"VFMA/VFMAQ\"\n@@ -44,6 +52,18 @@ void exec_vfma (void)\n   DECL_VARIABLE(VAR, float, 32, 4);\n #endif\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector1, float, 16, 4);\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+  DECL_VARIABLE(vector3, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+\n+  DECL_VARIABLE(vector1, float, 16, 8);\n+  DECL_VARIABLE(vector2, float, 16, 8);\n+  DECL_VARIABLE(vector3, float, 16, 8);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n+\n   DECL_VFMA_VAR(vector1);\n   DECL_VFMA_VAR(vector2);\n   DECL_VFMA_VAR(vector3);\n@@ -52,33 +72,53 @@ void exec_vfma (void)\n   clean_results ();\n \n   /* Initialize input \"vector1\" from \"buffer\".  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector1, buffer, , float, f, 16, 4);\n+  VLOAD(vector1, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector1, buffer, , float, f, 32, 2);\n   VLOAD(vector1, buffer, q, float, f, 32, 4);\n #ifdef __aarch64__\n   VLOAD(vector1, buffer, q, float, f, 64, 2);\n #endif\n \n   /* Choose init value arbitrarily.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector2, , float, f, 16, 4, 9.3f);\n+  VDUP(vector2, q, float, f, 16, 8, 29.7f);\n+#endif\n   VDUP(vector2, , float, f, 32, 2, 9.3f);\n   VDUP(vector2, q, float, f, 32, 4, 29.7f);\n #ifdef __aarch64__\n   VDUP(vector2, q, float, f, 64, 2, 15.8f);\n #endif\n-  \n+\n   /* Choose init value arbitrarily.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector3, , float, f, 16, 4, 81.2f);\n+  VDUP(vector3, q, float, f, 16, 8, 36.8f);\n+#endif\n   VDUP(vector3, , float, f, 32, 2, 81.2f);\n   VDUP(vector3, q, float, f, 32, 4, 36.8f);\n #ifdef __aarch64__\n   VDUP(vector3, q, float, f, 64, 2, 51.7f);\n #endif\n \n   /* Execute the tests.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VFMA(, float, f, 16, 4);\n+  TEST_VFMA(q, float, f, 16, 8);\n+#endif\n   TEST_VFMA(, float, f, 32, 2);\n   TEST_VFMA(q, float, f, 32, 4);\n #ifdef __aarch64__\n   TEST_VFMA(q, float, f, 64, 2);\n #endif\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+#endif\n   CHECK_VFMA_RESULTS (TEST_MSG, \"\");\n }\n #endif"}, {"sha": "555654d0ac5ed512d8486a2d6c43d6d3cf1c4ae9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vfms.c", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfms.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfms.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfms.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -4,10 +4,17 @@\n \n #ifdef __ARM_FEATURE_FMA\n /* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xe206, 0xe204, 0xe202, 0xe200 };\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xe455, 0xe454, 0xe453, 0xe452,\n+\t\t\t\t\t      0xe451, 0xe450, 0xe44f, 0xe44e };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc440ca3d, 0xc4408a3d };\n-VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc48a9eb8, 0xc48a7eb8, 0xc48a5eb8, 0xc48a3eb8 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc48a9eb8, 0xc48a7eb8,\n+\t\t\t\t\t   0xc48a5eb8, 0xc48a3eb8 };\n #ifdef __aarch64__\n-VECT_VAR_DECL(expected,hfloat,64,2) [] = { 0xc08a06e1532b8520, 0xc089fee1532b8520 };\n+VECT_VAR_DECL(expected,hfloat,64,2) [] = { 0xc08a06e1532b8520,\n+\t\t\t\t\t   0xc089fee1532b8520 };\n #endif\n \n #define TEST_MSG \"VFMS/VFMSQ\"\n@@ -44,6 +51,18 @@ void exec_vfms (void)\n   DECL_VARIABLE(VAR, float, 32, 4);\n #endif\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector1, float, 16, 4);\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+  DECL_VARIABLE(vector3, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+\n+  DECL_VARIABLE(vector1, float, 16, 8);\n+  DECL_VARIABLE(vector2, float, 16, 8);\n+  DECL_VARIABLE(vector3, float, 16, 8);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n+\n   DECL_VFMS_VAR(vector1);\n   DECL_VFMS_VAR(vector2);\n   DECL_VFMS_VAR(vector3);\n@@ -52,33 +71,53 @@ void exec_vfms (void)\n   clean_results ();\n \n   /* Initialize input \"vector1\" from \"buffer\".  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector1, buffer, , float, f, 16, 4);\n+  VLOAD(vector1, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector1, buffer, , float, f, 32, 2);\n   VLOAD(vector1, buffer, q, float, f, 32, 4);\n #ifdef __aarch64__\n   VLOAD(vector1, buffer, q, float, f, 64, 2);\n #endif\n \n   /* Choose init value arbitrarily.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector2, , float, f, 16, 4, 9.3f);\n+  VDUP(vector2, q, float, f, 16, 8, 29.7f);\n+#endif\n   VDUP(vector2, , float, f, 32, 2, 9.3f);\n   VDUP(vector2, q, float, f, 32, 4, 29.7f);\n #ifdef __aarch64__\n   VDUP(vector2, q, float, f, 64, 2, 15.8f);\n #endif\n-  \n+\n   /* Choose init value arbitrarily.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector3, , float, f, 16, 4, 81.2f);\n+  VDUP(vector3, q, float, f, 16, 8, 36.8f);\n+#endif\n   VDUP(vector3, , float, f, 32, 2, 81.2f);\n   VDUP(vector3, q, float, f, 32, 4, 36.8f);\n #ifdef __aarch64__\n   VDUP(vector3, q, float, f, 64, 2, 51.7f);\n #endif\n \n   /* Execute the tests.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VFMS(, float, f, 16, 4);\n+  TEST_VFMS(q, float, f, 16, 8);\n+#endif\n   TEST_VFMS(, float, f, 32, 2);\n   TEST_VFMS(q, float, f, 32, 4);\n #ifdef __aarch64__\n   TEST_VFMS(q, float, f, 64, 2);\n #endif\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+#endif\n   CHECK_VFMS_RESULTS (TEST_MSG, \"\");\n }\n #endif"}, {"sha": "80f8bec1212483fb90c34fe794cef7141f6d5d0b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmax.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmax.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -7,6 +7,10 @@\n \n #define HAS_FLOAT_VARIANT\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+#define HAS_FLOAT16_VARIANT\n+#endif\n+\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,8,8) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n \t\t\t\t       0xf4, 0xf5, 0xf6, 0xf7 };\n@@ -16,6 +20,9 @@ VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n \t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7 };\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff1, 0xfff1, 0xfff2, 0xfff3 };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff1 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xcbc0, 0xcb80, 0xcb00, 0xca80 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1780000, 0xc1700000 };\n VECT_VAR_DECL(expected,int,8,16) [] = { 0xf4, 0xf4, 0xf4, 0xf4,\n \t\t\t\t\t0xf4, 0xf5, 0xf6, 0xf7,\n@@ -33,10 +40,36 @@ VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff2, 0xfff2, 0xfff2, 0xfff3,\n \t\t\t\t\t 0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff1, 0xfffffff1,\n \t\t\t\t\t 0xfffffff2, 0xfffffff3 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xcb40, 0xcb40, 0xcb00, 0xca80,\n+\t\t\t\t\t      0xca00, 0xc980, 0xc900, 0xc880 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1680000, 0xc1680000,\n \t\t\t\t\t   0xc1600000, 0xc1500000 };\n \n /* Expected results with special FP values.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_nan, hfloat, 16, 8) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00 };\n+VECT_VAR_DECL(expected_mnan, hfloat, 16, 8) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t   0x7e00, 0x7e00,\n+\t\t\t\t\t\t   0x7e00, 0x7e00,\n+\t\t\t\t\t\t   0x7e00, 0x7e00 };\n+VECT_VAR_DECL(expected_inf, hfloat, 16, 8) [] = { 0x7c00, 0x7c00,\n+\t\t\t\t\t\t  0x7c00, 0x7c00,\n+\t\t\t\t\t\t  0x7c00, 0x7c00,\n+\t\t\t\t\t\t  0x7c00, 0x7c00 };\n+VECT_VAR_DECL(expected_minf, hfloat, 16, 8) [] = { 0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00 };\n+VECT_VAR_DECL(expected_zero1, hfloat, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_zero2, hfloat, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+#endif\n VECT_VAR_DECL(expected_nan,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n \t\t\t\t\t       0x7fc00000, 0x7fc00000 };\n VECT_VAR_DECL(expected_mnan,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,"}, {"sha": "e546bd5367e360c50b66a7d81f30e37ee6f8d25b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmaxnm_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxnm_1.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,47 @@\n+/* This file tests an intrinsic which currently has only an f16 variant and that\n+   is only available when FP16 arithmetic instructions are supported.  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vmaxnm\n+#define TEST_MSG \"VMAXNM/VMAXNMQ\"\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+#define HAS_FLOAT16_VARIANT\n+#endif\n+\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xcbc0, 0xcb80, 0xcb00, 0xca80 };\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xcb40, 0xcb40, 0xcb00, 0xca80,\n+\t\t\t\t\t      0xca00, 0xc980, 0xc900, 0xc880 };\n+#endif\n+\n+/* Expected results with special FP values.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_nan, hfloat, 16, 8) [] = { 0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00 };\n+VECT_VAR_DECL(expected_mnan, hfloat, 16, 8) [] = { 0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00 };\n+VECT_VAR_DECL(expected_inf, hfloat, 16, 8) [] = { 0x7c00, 0x7c00,\n+\t\t\t\t\t\t  0x7c00, 0x7c00,\n+\t\t\t\t\t\t  0x7c00, 0x7c00,\n+\t\t\t\t\t\t  0x7c00, 0x7c00 };\n+VECT_VAR_DECL(expected_minf, hfloat, 16, 8) [] = { 0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00 };\n+VECT_VAR_DECL(expected_zero1, hfloat, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_zero2, hfloat, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+#endif\n+\n+#include \"binary_op_float.inc\""}, {"sha": "4ee3c1ee77f61abd881fd7dac32838b4d25231b3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmin.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmin.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -7,6 +7,10 @@\n \n #define HAS_FLOAT_VARIANT\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+#define HAS_FLOAT16_VARIANT\n+#endif\n+\n /* Expected results.  */\n VECT_VAR_DECL(expected,int,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t       0xf3, 0xf3, 0xf3, 0xf3 };\n@@ -16,6 +20,9 @@ VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t0xf3, 0xf3, 0xf3, 0xf3 };\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff0, 0xfff1, 0xfff1, 0xfff1 };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xcc00, 0xcbc0, 0xcbc0, 0xcbc0 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800000, 0xc1780000 };\n VECT_VAR_DECL(expected,int,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t0xf4, 0xf4, 0xf4, 0xf4,\n@@ -31,11 +38,41 @@ VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf0, 0xf1, 0xf2, 0xf3,\n \t\t\t\t\t 0xf9, 0xf9, 0xf9, 0xf9 };\n VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff2,\n \t\t\t\t\t 0xfff2, 0xfff2, 0xfff2, 0xfff2 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xcc00, 0xcb80, 0xcb40, 0xcb40,\n+\t\t\t\t\t      0xcb40, 0xcb40, 0xcb40, 0xcb40 };\n+#endif\n VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff0, 0xfffffff1,\n \t\t\t\t\t 0xfffffff1, 0xfffffff1 };\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t   0xc1680000, 0xc1680000 };\n /* Expected results with special FP values.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_nan, hfloat, 16, 8) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00 };\n+VECT_VAR_DECL(expected_mnan, hfloat, 16, 8) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t   0x7e00, 0x7e00,\n+\t\t\t\t\t\t   0x7e00, 0x7e00,\n+\t\t\t\t\t\t   0x7e00, 0x7e00 };\n+VECT_VAR_DECL(expected_inf, hfloat, 16, 8) [] = { 0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00 };\n+VECT_VAR_DECL(expected_minf, hfloat, 16, 8) [] = { 0xfc00, 0xfc00,\n+\t\t\t\t\t\t   0xfc00, 0xfc00,\n+\t\t\t\t\t\t   0xfc00, 0xfc00,\n+\t\t\t\t\t\t   0xfc00, 0xfc00 };\n+VECT_VAR_DECL(expected_zero1, hfloat, 16, 8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_zero2, hfloat, 16, 8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000 };\n+#endif\n VECT_VAR_DECL(expected_nan,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n \t\t\t\t\t       0x7fc00000, 0x7fc00000 };\n VECT_VAR_DECL(expected_mnan,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,"}, {"sha": "975fc56bbb1c6314c988be42fb133da6ff2d0677", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vminnm_1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminnm_1.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -0,0 +1,51 @@\n+/* This file tests an intrinsic which currently has only an f16 variant and that\n+   is only available when FP16 arithmetic instructions are supported.  */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define INSN_NAME vminnm\n+#define TEST_MSG \"VMINNM/VMINMQ\"\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+#define HAS_FLOAT16_VARIANT\n+#endif\n+\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xcc00, 0xcbc0, 0xcbc0, 0xcbc0 };\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xcc00, 0xcb80, 0xcb40, 0xcb40,\n+\t\t\t\t\t      0xcb40, 0xcb40, 0xcb40, 0xcb40 };\n+#endif\n+\n+/* Expected results with special FP values.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_nan, hfloat, 16, 8) [] = { 0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00 };\n+VECT_VAR_DECL(expected_mnan, hfloat, 16, 8) [] = { 0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00,\n+\t\t\t\t\t\t   0x3c00, 0x3c00 };\n+VECT_VAR_DECL(expected_inf, hfloat, 16, 8) [] = { 0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00,\n+\t\t\t\t\t\t  0x3c00, 0x3c00 };\n+VECT_VAR_DECL(expected_minf, hfloat, 16, 8) [] = { 0xfc00, 0xfc00,\n+\t\t\t\t\t\t   0xfc00, 0xfc00,\n+\t\t\t\t\t\t   0xfc00, 0xfc00,\n+\t\t\t\t\t\t   0xfc00, 0xfc00 };\n+VECT_VAR_DECL(expected_zero1, hfloat, 16, 8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000 };\n+VECT_VAR_DECL(expected_zero2, hfloat, 16, 8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000,\n+\t\t\t\t\t\t    0x8000, 0x8000 };\n+#endif\n+\n+#include \"binary_op_float.inc\""}, {"sha": "c5fe31a56fbf8008bf80d0d7c017ed3d3406a336", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmul.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -13,6 +13,10 @@ VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfab0, 0xfb05, 0xfb5a, 0xfbaf };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffff9a0, 0xfffffa06 };\n VECT_VAR_DECL(expected,poly,8,8) [] = { 0xc0, 0x84, 0x48, 0xc,\n \t\t\t\t\t0xd0, 0x94, 0x58, 0x1c };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xe02a, 0xdfcf,\n+\t\t\t\t\t      0xdf4a, 0xdec4 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc4053333, 0xc3f9c000 };\n VECT_VAR_DECL(expected,int,8,16) [] = { 0x90, 0x7, 0x7e, 0xf5,\n \t\t\t\t\t0x6c, 0xe3, 0x5a, 0xd1,\n@@ -34,6 +38,10 @@ VECT_VAR_DECL(expected,poly,8,16) [] = { 0x60, 0xca, 0x34, 0x9e,\n \t\t\t\t\t 0xc8, 0x62, 0x9c, 0x36,\n \t\t\t\t\t 0x30, 0x9a, 0x64, 0xce,\n \t\t\t\t\t 0x98, 0x32, 0xcc, 0x66 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xe63a, 0xe5d6, 0xe573, 0xe50f,\n+\t\t\t\t\t      0xe4ac, 0xe448, 0xe3c8, 0xe301 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc4c73333, 0xc4bac000,\n \t\t\t\t\t   0xc4ae4ccd, 0xc4a1d999 };\n \n@@ -78,6 +86,17 @@ void FNNAME (INSN_NAME) (void)\n   DECL_VMUL(poly, 8, 16);\n   DECL_VMUL(float, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector1, float, 16, 4);\n+  DECL_VARIABLE(vector1, float, 16, 8);\n+\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+  DECL_VARIABLE(vector2, float, 16, 8);\n+\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n+\n   clean_results ();\n \n   /* Initialize input \"vector1\" from \"buffer\".  */\n@@ -97,6 +116,10 @@ void FNNAME (INSN_NAME) (void)\n   VLOAD(vector1, buffer, q, uint, u, 32, 4);\n   VLOAD(vector1, buffer, q, poly, p, 8, 16);\n   VLOAD(vector1, buffer, q, float, f, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector1, buffer, , float, f, 16, 4);\n+  VLOAD(vector1, buffer, q, float, f, 16, 8);\n+#endif\n \n   /* Choose init value arbitrarily.  */\n   VDUP(vector2, , int, s, 8, 8, 0x11);\n@@ -115,6 +138,10 @@ void FNNAME (INSN_NAME) (void)\n   VDUP(vector2, q, uint, u, 32, 4, 0xCC);\n   VDUP(vector2, q, poly, p, 8, 16, 0xAA);\n   VDUP(vector2, q, float, f, 32, 4, 99.6f);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector2, , float, f, 16, 4, 33.3f);\n+  VDUP(vector2, q, float, f, 16, 8, 99.6f);\n+#endif\n \n   /* Execute the tests.  */\n   TEST_VMUL(INSN_NAME, , int, s, 8, 8);\n@@ -133,6 +160,10 @@ void FNNAME (INSN_NAME) (void)\n   TEST_VMUL(INSN_NAME, q, uint, u, 32, 4);\n   TEST_VMUL(INSN_NAME, q, poly, p, 8, 16);\n   TEST_VMUL(INSN_NAME, q, float, f, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VMUL(INSN_NAME, , float, f, 16, 4);\n+  TEST_VMUL(INSN_NAME, q, float, f, 16, 8);\n+#endif\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n   CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n@@ -150,6 +181,10 @@ void FNNAME (INSN_NAME) (void)\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, poly, 8, 16, PRIx8, expected, \"\");\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+#endif\n }\n \n int main (void)"}, {"sha": "e6cf4d72c3724fabfb7265b35615cefeda1190bd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmul_lane.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_lane.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -7,6 +7,9 @@ VECT_VAR_DECL(expected,int,16,4) [] = { 0xffc0, 0xffc4, 0xffc8, 0xffcc };\n VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffde0, 0xfffffe02 };\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0xbbc0, 0xc004, 0xc448, 0xc88c };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffface0, 0xffffb212 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xddb3, 0xdd58, 0xdcfd, 0xdca1 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc3b66666, 0xc3ab0000 };\n VECT_VAR_DECL(expected,int,16,8) [] = { 0xffc0, 0xffc4, 0xffc8, 0xffcc,\n \t\t\t\t\t0xffd0, 0xffd4, 0xffd8, 0xffdc };\n@@ -16,6 +19,10 @@ VECT_VAR_DECL(expected,uint,16,8) [] = { 0xbbc0, 0xc004, 0xc448, 0xc88c,\n \t\t\t\t\t 0xccd0, 0xd114, 0xd558, 0xd99c };\n VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffface0, 0xffffb212,\n \t\t\t\t\t 0xffffb744, 0xffffbc76 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xddb3, 0xdd58, 0xdcfd, 0xdca1,\n+\t\t\t\t\t      0xdc46, 0xdbd6, 0xdb20, 0xda69 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc3b66666, 0xc3ab0000,\n \t\t\t\t\t   0xc39f9999, 0xc3943333 };\n \n@@ -45,11 +52,20 @@ void exec_vmul_lane (void)\n \n   DECL_VMUL(vector);\n   DECL_VMUL(vector_res);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n \n   DECL_VARIABLE(vector2, int, 16, 4);\n   DECL_VARIABLE(vector2, int, 32, 2);\n   DECL_VARIABLE(vector2, uint, 16, 4);\n   DECL_VARIABLE(vector2, uint, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+#endif\n   DECL_VARIABLE(vector2, float, 32, 2);\n \n   clean_results ();\n@@ -59,41 +75,62 @@ void exec_vmul_lane (void)\n   VLOAD(vector, buffer, , int, s, 32, 2);\n   VLOAD(vector, buffer, , uint, u, 16, 4);\n   VLOAD(vector, buffer, , uint, u, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+#endif\n   VLOAD(vector, buffer, , float, f, 32, 2);\n   VLOAD(vector, buffer, q, int, s, 16, 8);\n   VLOAD(vector, buffer, q, int, s, 32, 4);\n   VLOAD(vector, buffer, q, uint, u, 16, 8);\n   VLOAD(vector, buffer, q, uint, u, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector, buffer, q, float, f, 32, 4);\n \n   /* Initialize vector2.  */\n   VDUP(vector2, , int, s, 16, 4, 0x4);\n   VDUP(vector2, , int, s, 32, 2, 0x22);\n   VDUP(vector2, , uint, u, 16, 4, 0x444);\n   VDUP(vector2, , uint, u, 32, 2, 0x532);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector2, , float, f, 16, 4, 22.8f);\n+#endif\n   VDUP(vector2, , float, f, 32, 2, 22.8f);\n \n   /* Choose lane arbitrarily.  */\n   TEST_VMUL_LANE(, int, s, 16, 4, 4, 2);\n   TEST_VMUL_LANE(, int, s, 32, 2, 2, 1);\n   TEST_VMUL_LANE(, uint, u, 16, 4, 4, 2);\n   TEST_VMUL_LANE(, uint, u, 32, 2, 2, 1);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VMUL_LANE(, float, f, 16, 4, 4, 1);\n+#endif\n   TEST_VMUL_LANE(, float, f, 32, 2, 2, 1);\n   TEST_VMUL_LANE(q, int, s, 16, 8, 4, 2);\n   TEST_VMUL_LANE(q, int, s, 32, 4, 2, 0);\n   TEST_VMUL_LANE(q, uint, u, 16, 8, 4, 2);\n   TEST_VMUL_LANE(q, uint, u, 32, 4, 2, 1);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VMUL_LANE(q, float, f, 16, 8, 4, 0);\n+#endif\n   TEST_VMUL_LANE(q, float, f, 32, 4, 2, 0);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 16, 4, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, int, 16, 8, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 16, 8, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n }\n "}, {"sha": "16f7dac6b0bb7a83add4f7b9e1daea6750979a50", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmul_n.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_n.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -7,6 +7,9 @@ VECT_VAR_DECL(expected,int,16,4) [] = { 0xfef0, 0xff01, 0xff12, 0xff23 };\n VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffde0, 0xfffffe02 };\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfcd0, 0xfd03, 0xfd36, 0xfd69 };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffbc0, 0xfffffc04 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xdd93, 0xdd3a, 0xdce1, 0xdc87 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc3b26666, 0xc3a74000 };\n VECT_VAR_DECL(expected,int,16,8) [] = { 0xfab0, 0xfb05, 0xfb5a, 0xfbaf,\n \t\t\t\t\t0xfc04, 0xfc59, 0xfcae, 0xfd03 };\n@@ -16,6 +19,10 @@ VECT_VAR_DECL(expected,uint,16,8) [] = { 0xf890, 0xf907, 0xf97e, 0xf9f5,\n \t\t\t\t\t 0xfa6c, 0xfae3, 0xfb5a, 0xfbd1 };\n VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffff780, 0xfffff808,\n \t\t\t\t\t 0xfffff890, 0xfffff918 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xe58e, 0xe535, 0xe4dc, 0xe483,\n+\t\t\t\t\t      0xe42a, 0xe3a3, 0xe2f2, 0xe240 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc4b1cccd, 0xc4a6b000,\n \t\t\t\t\t   0xc49b9333, 0xc4907667 };\n \n@@ -50,41 +57,66 @@ void FNNAME (INSN_NAME) (void)\n   DECL_VMUL(vector);\n   DECL_VMUL(vector_res);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n+\n   clean_results ();\n \n   /* Initialize vector from pre-initialized values.  */\n   VLOAD(vector, buffer, , int, s, 16, 4);\n   VLOAD(vector, buffer, , int, s, 32, 2);\n   VLOAD(vector, buffer, , uint, u, 16, 4);\n   VLOAD(vector, buffer, , uint, u, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+#endif\n   VLOAD(vector, buffer, , float, f, 32, 2);\n   VLOAD(vector, buffer, q, int, s, 16, 8);\n   VLOAD(vector, buffer, q, int, s, 32, 4);\n   VLOAD(vector, buffer, q, uint, u, 16, 8);\n   VLOAD(vector, buffer, q, uint, u, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vector, buffer, q, float, f, 32, 4);\n \n   /* Choose multiplier arbitrarily.  */\n   TEST_VMUL_N(, int, s, 16, 4, 0x11);\n   TEST_VMUL_N(, int, s, 32, 2, 0x22);\n   TEST_VMUL_N(, uint, u, 16, 4, 0x33);\n   TEST_VMUL_N(, uint, u, 32, 2, 0x44);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VMUL_N(, float, f, 16, 4, 22.3f);\n+#endif\n   TEST_VMUL_N(, float, f, 32, 2, 22.3f);\n   TEST_VMUL_N(q, int, s, 16, 8, 0x55);\n   TEST_VMUL_N(q, int, s, 32, 4, 0x66);\n   TEST_VMUL_N(q, uint, u, 16, 8, 0x77);\n   TEST_VMUL_N(q, uint, u, 32, 4, 0x88);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VMUL_N(q, float, f, 16, 8, 88.9f);\n+#endif\n   TEST_VMUL_N(q, float, f, 32, 4, 88.9f);\n \n   CHECK(TEST_MSG, int, 16, 4, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 16, 4, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, int, 16, 8, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 16, 8, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n }\n "}, {"sha": "7bd9d555bddae959f2b8ce6c6afa9ac0c3b11a12", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vneg.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvneg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvneg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvneg.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -21,24 +21,53 @@ VECT_VAR_DECL(expected,int,32,4) [] = { 0x10, 0xf, 0xe, 0xd };\n /* Expected results for float32 variants. Needs to be separated since\n    the generic test function does not test floating-point\n    versions.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_float16, hfloat, 16, 4) [] = { 0xc09a, 0xc09a,\n+\t\t\t\t\t\t      0xc09a, 0xc09a };\n+VECT_VAR_DECL(expected_float16, hfloat, 16, 8) [] = { 0xc2cd, 0xc2cd,\n+\t\t\t\t\t\t      0xc2cd, 0xc2cd,\n+\t\t\t\t\t\t      0xc2cd, 0xc2cd,\n+\t\t\t\t\t\t      0xc2cd, 0xc2cd };\n+#endif\n VECT_VAR_DECL(expected_float32,hfloat,32,2) [] = { 0xc0133333, 0xc0133333 };\n VECT_VAR_DECL(expected_float32,hfloat,32,4) [] = { 0xc059999a, 0xc059999a,\n \t\t\t\t\t\t   0xc059999a, 0xc059999a };\n \n void exec_vneg_f32(void)\n {\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector, float, 32, 2);\n   DECL_VARIABLE(vector, float, 32, 4);\n \n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector_res, float, 32, 2);\n   DECL_VARIABLE(vector_res, float, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, 2.3f);\n+  VDUP(vector, q, float, f, 16, 8, 3.4f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, 2.3f);\n   VDUP(vector, q, float, f, 32, 4, 3.4f);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_UNARY_OP(INSN_NAME, , float, f, 16, 4);\n+  TEST_UNARY_OP(INSN_NAME, q, float, f, 16, 8);\n+#endif\n   TEST_UNARY_OP(INSN_NAME, , float, f, 32, 2);\n   TEST_UNARY_OP(INSN_NAME, q, float, f, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_float16, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_float16, \"\");\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_float32, \"\");\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \"\");\n }"}, {"sha": "a9b0c62c7e3203ed6d038691dff35a0c73ed0e7a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpXXX.inc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXX.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXX.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvpXXX.inc?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -21,6 +21,9 @@ void FNNAME (INSN_NAME) (void)\n   DECL_VARIABLE(vector, uint, 8, 8);\n   DECL_VARIABLE(vector, uint, 16, 4);\n   DECL_VARIABLE(vector, uint, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+#endif\n   DECL_VARIABLE(vector, float, 32, 2);\n \n   DECL_VARIABLE(vector_res, int, 8, 8);\n@@ -29,6 +32,9 @@ void FNNAME (INSN_NAME) (void)\n   DECL_VARIABLE(vector_res, uint, 8, 8);\n   DECL_VARIABLE(vector_res, uint, 16, 4);\n   DECL_VARIABLE(vector_res, uint, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+#endif\n   DECL_VARIABLE(vector_res, float, 32, 2);\n \n   clean_results ();\n@@ -40,6 +46,9 @@ void FNNAME (INSN_NAME) (void)\n   VLOAD(vector, buffer, , uint, u, 8, 8);\n   VLOAD(vector, buffer, , uint, u, 16, 4);\n   VLOAD(vector, buffer, , uint, u, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD(vector, buffer, , float, f, 16, 4);\n+#endif\n   VLOAD(vector, buffer, , float, f, 32, 2);\n \n   /* Apply a binary operator named INSN_NAME.  */\n@@ -49,6 +58,9 @@ void FNNAME (INSN_NAME) (void)\n   TEST_VPXXX(INSN_NAME, uint, u, 8, 8);\n   TEST_VPXXX(INSN_NAME, uint, u, 16, 4);\n   TEST_VPXXX(INSN_NAME, uint, u, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VPXXX(INSN_NAME, float, f, 16, 4);\n+#endif\n   TEST_VPXXX(INSN_NAME, float, f, 32, 2);\n \n   CHECK(TEST_MSG, int, 8, 8, PRIx32, expected, \"\");\n@@ -57,6 +69,9 @@ void FNNAME (INSN_NAME) (void)\n   CHECK(TEST_MSG, uint, 8, 8, PRIx32, expected, \"\");\n   CHECK(TEST_MSG, uint, 16, 4, PRIx64, expected, \"\");\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n }\n "}, {"sha": "f1bbe0964f9b7f2ab05bac0fbed40e1d890414ee", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpadd.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpadd.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -14,6 +14,9 @@ VECT_VAR_DECL(expected,uint,8,8) [] = { 0xe1, 0xe5, 0xe9, 0xed,\n \t\t\t\t\t0xe1, 0xe5, 0xe9, 0xed };\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffe1, 0xffe5, 0xffe1, 0xffe5 };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffe1, 0xffffffe1 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xcfc0, 0xcec0, 0xcfc0, 0xcec0 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1f80000, 0xc1f80000 };\n \n #include \"vpXXX.inc\""}, {"sha": "c9621146a9a3dd69a3f1a9990f5b25ab22386b92", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpmax.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmax.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -15,6 +15,9 @@ VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf1, 0xf3, 0xf5, 0xf7,\n \t\t\t\t\t0xf1, 0xf3, 0xf5, 0xf7 };\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff1, 0xfff3, 0xfff1, 0xfff3 };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff1, 0xfffffff1 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xcb80, 0xca80, 0xcb80, 0xca80 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1700000, 0xc1700000 };\n \n #include \"vpXXX.inc\""}, {"sha": "7c75cf53988177553759aabbbc0dd2ec793aefd3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpmin.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpmin.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -15,6 +15,9 @@ VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf0, 0xf2, 0xf4, 0xf6,\n \t\t\t\t\t0xf0, 0xf2, 0xf4, 0xf6 };\n VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff0, 0xfff2, 0xfff0, 0xfff2 };\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xcc00, 0xcb00, 0xcc00, 0xcb00 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800000, 0xc1800000 };\n \n #include \"vpXXX.inc\""}, {"sha": "cd6a17f34b13455d70eddd0355bb2c0619e3d600", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrecpe.c", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpe.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -7,6 +7,14 @@\n VECT_VAR_DECL(expected_positive,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n VECT_VAR_DECL(expected_positive,uint,32,4) [] = { 0xbf000000, 0xbf000000,\n \t\t\t\t\t\t  0xbf000000, 0xbf000000 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_positive, hfloat, 16, 4) [] = { 0x3834, 0x3834,\n+\t\t\t\t\t\t       0x3834, 0x3834 };\n+VECT_VAR_DECL(expected_positive, hfloat, 16, 8) [] = { 0x2018, 0x2018,\n+\t\t\t\t\t\t       0x2018, 0x2018,\n+\t\t\t\t\t\t       0x2018, 0x2018,\n+\t\t\t\t\t\t       0x2018, 0x2018 };\n+#endif\n VECT_VAR_DECL(expected_positive,hfloat,32,2) [] = { 0x3f068000, 0x3f068000 };\n VECT_VAR_DECL(expected_positive,hfloat,32,4) [] = { 0x3c030000, 0x3c030000,\n \t\t\t\t\t\t    0x3c030000, 0x3c030000 };\n@@ -15,24 +23,56 @@ VECT_VAR_DECL(expected_positive,hfloat,32,4) [] = { 0x3c030000, 0x3c030000,\n VECT_VAR_DECL(expected_negative,uint,32,2) [] = { 0x80000000, 0x80000000 };\n VECT_VAR_DECL(expected_negative,uint,32,4) [] = { 0xee800000, 0xee800000,\n \t\t\t\t\t\t  0xee800000, 0xee800000 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_negative, hfloat, 16, 4) [] = { 0xae64, 0xae64,\n+\t\t\t\t\t\t       0xae64, 0xae64 };\n+VECT_VAR_DECL(expected_negative, hfloat, 16, 8) [] = { 0xa018, 0xa018,\n+\t\t\t\t\t\t       0xa018, 0xa018,\n+\t\t\t\t\t\t       0xa018, 0xa018,\n+\t\t\t\t\t\t       0xa018, 0xa018 };\n+#endif\n VECT_VAR_DECL(expected_negative,hfloat,32,2) [] = { 0xbdcc8000, 0xbdcc8000 };\n VECT_VAR_DECL(expected_negative,hfloat,32,4) [] = { 0xbc030000, 0xbc030000,\n \t\t\t\t\t\t    0xbc030000, 0xbc030000 };\n \n /* Expected results with FP special values (NaN, infinity).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp1, hfloat, 16, 4) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00 };\n+VECT_VAR_DECL(expected_fp1, hfloat, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+#endif\n VECT_VAR_DECL(expected_fp1,hfloat,32,2) [] = { 0x7fc00000, 0x7fc00000 };\n VECT_VAR_DECL(expected_fp1,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n /* Expected results with FP special values (zero, large value).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp2, hfloat, 16, 4) [] = { 0x7c00, 0x7c00,\n+\t\t\t\t\t\t  0x7c00, 0x7c00 };\n+VECT_VAR_DECL(expected_fp2, hfloat, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+#endif\n VECT_VAR_DECL(expected_fp2,hfloat,32,2) [] = { 0x7f800000, 0x7f800000 };\n VECT_VAR_DECL(expected_fp2,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n /* Expected results with FP special values (-0, -infinity).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp3, hfloat, 16, 4) [] = { 0xfc00, 0xfc00,\n+\t\t\t\t\t\t  0xfc00, 0xfc00};\n+VECT_VAR_DECL(expected_fp3, hfloat, 16, 8) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000 };\n+#endif\n VECT_VAR_DECL(expected_fp3,hfloat,32,2) [] = { 0xff800000, 0xff800000 };\n VECT_VAR_DECL(expected_fp3,hfloat,32,4) [] = { 0x80000000, 0x80000000,\n \t\t\t\t\t       0x80000000, 0x80000000 };\n \n /* Expected results with FP special large negative value.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp4, hfloat, 16, 4) [] = { 0x8000, 0x8000,\n+\t\t\t\t\t\t  0x8000, 0x8000 };\n+#endif\n VECT_VAR_DECL(expected_fp4,hfloat,32,2) [] = { 0x80000000, 0x80000000 };\n \n #define TEST_MSG \"VRECPE/VRECPEQ\"\n@@ -50,100 +90,185 @@ void exec_vrecpe(void)\n   /* No need for 64 bits variants.  */\n   DECL_VARIABLE(vector, uint, 32, 2);\n   DECL_VARIABLE(vector, uint, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector, float, 32, 2);\n   DECL_VARIABLE(vector, float, 32, 4);\n \n   DECL_VARIABLE(vector_res, uint, 32, 2);\n   DECL_VARIABLE(vector_res, uint, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector_res, float, 32, 2);\n   DECL_VARIABLE(vector_res, float, 32, 4);\n \n   clean_results ();\n \n   /* Choose init value arbitrarily, positive.  */\n   VDUP(vector, , uint, u, 32, 2, 0x12345678);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, 1.9f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, 1.9f);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, q, float, f, 16, 8, 125.0f);\n+#endif\n   VDUP(vector, q, uint, u, 32, 4, 0xABCDEF10);\n   VDUP(vector, q, float, f, 32, 4, 125.0f);\n \n   /* Apply the operator.  */\n   TEST_VRECPE(, uint, u, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPE(, float, f, 16, 4);\n+#endif\n   TEST_VRECPE(, float, f, 32, 2);\n   TEST_VRECPE(q, uint, u, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPE(q, float, f, 16, 8);\n+#endif\n   TEST_VRECPE(q, float, f, 32, 4);\n \n #define CMT \" (positive input)\"\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_positive, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_positive, CMT);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_positive, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_positive, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_positive, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_positive, CMT);\n \n   /* Choose init value arbitrarily,negative.  */\n   VDUP(vector, , uint, u, 32, 2, 0xFFFFFFFF);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, -10.0f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, -10.0f);\n   VDUP(vector, q, uint, u, 32, 4, 0x89081234);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, q, float, f, 16, 8, -125.0f);\n+#endif\n   VDUP(vector, q, float, f, 32, 4, -125.0f);\n \n   /* Apply the operator.  */\n   TEST_VRECPE(, uint, u, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPE(, float, f, 16, 4);\n+#endif\n   TEST_VRECPE(, float, f, 32, 2);\n   TEST_VRECPE(q, uint, u, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPE(q, float, f, 16, 8);\n+#endif\n   TEST_VRECPE(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" (negative input)\"\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_negative, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_negative, CMT);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_negative, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_negative, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_negative, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_negative, CMT);\n \n   /* Test FP variants with special input values (NaN, infinity).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, NAN);\n+  VDUP(vector, q, float, f, 16, 8, HUGE_VALF);\n+#endif\n   VDUP(vector, , float, f, 32, 2, NAN);\n   VDUP(vector, q, float, f, 32, 4, HUGE_VALF);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPE(, float, f, 16, 4);\n+  TEST_VRECPE(q, float, f, 16, 8);\n+#endif\n   TEST_VRECPE(, float, f, 32, 2);\n   TEST_VRECPE(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (NaN, infinity)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp1, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp1, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp1, CMT);\n \n   /* Test FP variants with special input values (zero, large value).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, 0.0f);\n+  VDUP(vector, q, float, f, 16, 8, 8.97229e37f /*9.0e37f*/);\n+#endif\n   VDUP(vector, , float, f, 32, 2, 0.0f);\n   VDUP(vector, q, float, f, 32, 4, 8.97229e37f /*9.0e37f*/);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPE(, float, f, 16, 4);\n+  TEST_VRECPE(q, float, f, 16, 8);\n+#endif\n   TEST_VRECPE(, float, f, 32, 2);\n   TEST_VRECPE(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (zero, large value)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp2, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp2, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp2, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp2, CMT);\n \n   /* Test FP variants with special input values (-0, -infinity).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, -0.0f);\n+  VDUP(vector, q, float, f, 16, 8, -HUGE_VALF);\n+#endif\n   VDUP(vector, , float, f, 32, 2, -0.0f);\n   VDUP(vector, q, float, f, 32, 4, -HUGE_VALF);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPE(, float, f, 16, 4);\n+  TEST_VRECPE(q, float, f, 16, 8);\n+#endif\n   TEST_VRECPE(, float, f, 32, 2);\n   TEST_VRECPE(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (-0, -infinity)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp3, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp3, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp3, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp3, CMT);\n \n   /* Test FP variants with special input values (large negative value).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, -9.0e37f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, -9.0e37f);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPE(, float, f, 16, 4);\n+#endif\n   TEST_VRECPE(, float, f, 32, 2);\n \n #undef CMT\n #define CMT \" FP special (large negative value)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp4, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp4, CMT);\n }\n "}, {"sha": "b06da2230211df0fed1cc7e8da9f958ee730e765", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrecps.c", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecps.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -4,22 +4,51 @@\n #include <math.h>\n \n /* Expected results with positive input.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xd70c, 0xd70c, 0xd70c, 0xd70c };\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xcedc, 0xcedc, 0xcedc, 0xcedc,\n+\t\t\t\t\t      0xcedc, 0xcedc, 0xcedc, 0xcedc };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc2e19eb7, 0xc2e19eb7 };\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1db851f, 0xc1db851f,\n \t\t\t\t\t   0xc1db851f, 0xc1db851f };\n \n /* Expected results with FP special values (NaN).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp1, hfloat, 16, 4) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00 };\n+VECT_VAR_DECL(expected_fp1, hfloat, 16, 8) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00 };\n+#endif\n VECT_VAR_DECL(expected_fp1,hfloat,32,2) [] = { 0x7fc00000, 0x7fc00000 };\n VECT_VAR_DECL(expected_fp1,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n \t\t\t\t\t       0x7fc00000, 0x7fc00000 };\n \n /* Expected results with FP special values (infinity, 0) and normal\n    values.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp2, hfloat, 16, 4) [] = { 0xfc00, 0xfc00,\n+\t\t\t\t\t\t  0xfc00, 0xfc00 };\n+VECT_VAR_DECL(expected_fp2, hfloat, 16, 8) [] = { 0x4000, 0x4000,\n+\t\t\t\t\t\t  0x4000, 0x4000,\n+\t\t\t\t\t\t  0x4000, 0x4000,\n+\t\t\t\t\t\t  0x4000, 0x4000 };\n+#endif\n VECT_VAR_DECL(expected_fp2,hfloat,32,2) [] = { 0xff800000, 0xff800000 };\n VECT_VAR_DECL(expected_fp2,hfloat,32,4) [] = { 0x40000000, 0x40000000,\n \t\t\t\t\t       0x40000000, 0x40000000 };\n \n /* Expected results with FP special values (infinity, 0).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp3, hfloat, 16, 4) [] = { 0x4000, 0x4000,\n+\t\t\t\t\t\t  0x4000, 0x4000 };\n+VECT_VAR_DECL(expected_fp3, hfloat, 16, 8) [] = { 0x4000, 0x4000,\n+\t\t\t\t\t\t  0x4000, 0x4000,\n+\t\t\t\t\t\t  0x4000, 0x4000,\n+\t\t\t\t\t\t  0x4000, 0x4000 };\n+#endif\n VECT_VAR_DECL(expected_fp3,hfloat,32,2) [] = { 0x40000000, 0x40000000 };\n VECT_VAR_DECL(expected_fp3,hfloat,32,4) [] = { 0x40000000, 0x40000000,\n \t\t\t\t\t       0x40000000, 0x40000000 };\n@@ -38,74 +67,143 @@ void exec_vrecps(void)\n \t\t    VECT_VAR(vector_res, T1, W, N))\n \n   /* No need for integer variants.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector, float, 32, 2);\n   DECL_VARIABLE(vector, float, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+  DECL_VARIABLE(vector2, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector2, float, 32, 2);\n   DECL_VARIABLE(vector2, float, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector_res, float, 32, 2);\n   DECL_VARIABLE(vector_res, float, 32, 4);\n \n   clean_results ();\n \n   /* Choose init value arbitrarily.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, 12.9f);\n+  VDUP(vector, q, float, f, 16, 8, 9.2f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, 12.9f);\n   VDUP(vector, q, float, f, 32, 4, 9.2f);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector2, , float, f, 16, 4, 8.9f);\n+  VDUP(vector2, q, float, f, 16, 8, 3.2f);\n+#endif\n   VDUP(vector2, , float, f, 32, 2, 8.9f);\n   VDUP(vector2, q, float, f, 32, 4, 3.2f);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPS(, float, f, 16, 4);\n+  TEST_VRECPS(q, float, f, 16, 8);\n+#endif\n   TEST_VRECPS(, float, f, 32, 2);\n   TEST_VRECPS(q, float, f, 32, 4);\n \n #define CMT \" (positive input)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, CMT);\n \n \n   /* Test FP variants with special input values (NaN).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, NAN);\n+  VDUP(vector2, q, float, f, 16, 8, NAN);\n+#endif\n   VDUP(vector, , float, f, 32, 2, NAN);\n   VDUP(vector2, q, float, f, 32, 4, NAN);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPS(, float, f, 16, 4);\n+  TEST_VRECPS(q, float, f, 16, 8);\n+#endif\n   TEST_VRECPS(, float, f, 32, 2);\n   TEST_VRECPS(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (NaN)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp1, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp1, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp1, CMT);\n \n \n   /* Test FP variants with special input values (infinity, 0).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, HUGE_VALF);\n+  VDUP(vector, q, float, f, 16, 8, 0.0f);\n+  VDUP(vector2, q, float, f, 16, 8, 3.2f); /* Restore a normal value.  */\n+#endif\n   VDUP(vector, , float, f, 32, 2, HUGE_VALF);\n   VDUP(vector, q, float, f, 32, 4, 0.0f);\n   VDUP(vector2, q, float, f, 32, 4, 3.2f); /* Restore a normal value.  */\n \n+\n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPS(, float, f, 16, 4);\n+  TEST_VRECPS(q, float, f, 16, 8);\n+#endif\n   TEST_VRECPS(, float, f, 32, 2);\n   TEST_VRECPS(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (infinity, 0) and normal value\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp2, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp2, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp2, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp2, CMT);\n \n \n   /* Test FP variants with only special input values (infinity, 0).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, HUGE_VALF);\n+  VDUP(vector, q, float, f, 16, 8, 0.0f);\n+  VDUP(vector2, , float, f, 16, 4, 0.0f);\n+  VDUP(vector2, q, float, f, 16, 8, HUGE_VALF);\n+#endif\n   VDUP(vector, , float, f, 32, 2, HUGE_VALF);\n   VDUP(vector, q, float, f, 32, 4, 0.0f);\n   VDUP(vector2, , float, f, 32, 2, 0.0f);\n   VDUP(vector2, q, float, f, 32, 4, HUGE_VALF);\n \n+\n   /* Apply the operator */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRECPS(, float, f, 16, 4);\n+  TEST_VRECPS(q, float, f, 16, 8);\n+#endif\n   TEST_VRECPS(, float, f, 32, 2);\n   TEST_VRECPS(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (infinity, 0)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp3, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp3, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp3, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp3, CMT);\n }"}, {"sha": "fe6715f3ceefbfa95b0519ad56d18c9301867afa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrnd.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrnd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrnd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrnd.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -6,6 +6,14 @@\n #include \"compute-ref-data.h\"\n \n /* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected, hfloat, 16, 4) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80 };\n+VECT_VAR_DECL (expected, hfloat, 16, 8) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80,\n+\t\t\t\t\t       0xca00, 0xc980,\n+\t\t\t\t\t       0xc900, 0xc880 };\n+#endif\n VECT_VAR_DECL (expected, hfloat, 32, 2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL (expected, hfloat, 32, 4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t       0xc1600000, 0xc1500000 };"}, {"sha": "bb4a6ba442ab07744bbb15ffd13806924bae63a3", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndX.inc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvrndX.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvrndX.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvrndX.inc?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -17,20 +17,40 @@ void FNNAME (INSN) (void)\n #define TEST_VRND(Q, T1, T2, W, N)\t\t\\\n   TEST_VRND1 (INSN, Q, T1, T2, W, N)\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+#endif\n   DECL_VARIABLE (vector, float, 32, 2);\n   DECL_VARIABLE (vector, float, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n   DECL_VARIABLE (vector_res, float, 32, 2);\n   DECL_VARIABLE (vector_res, float, 32, 4);\n \n   clean_results ();\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VLOAD (vector, buffer, , float, f, 16, 4);\n+  VLOAD (vector, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD (vector, buffer, , float, f, 32, 2);\n   VLOAD (vector, buffer, q, float, f, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRND ( , float, f, 16, 4);\n+  TEST_VRND (q, float, f, 16, 8);\n+#endif\n   TEST_VRND ( , float, f, 32, 2);\n   TEST_VRND (q, float, f, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected, \"\");\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected, \"\");\n+#endif\n   CHECK_FP (TEST_MSG, float, 32, 2, PRIx32, expected, \"\");\n   CHECK_FP (TEST_MSG, float, 32, 4, PRIx32, expected, \"\");\n }"}, {"sha": "9c0f7ffcf38946a97b28fbe35783a5b41351f925", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrnda.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrnda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrnda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrnda.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -6,6 +6,15 @@\n #include \"compute-ref-data.h\"\n \n /* Expected results.  */\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected, hfloat, 16, 4) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80 };\n+VECT_VAR_DECL (expected, hfloat, 16, 8) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80,\n+\t\t\t\t\t       0xca00, 0xc980,\n+\t\t\t\t\t       0xc900, 0xc880 };\n+#endif\n VECT_VAR_DECL (expected, hfloat, 32, 2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL (expected, hfloat, 32, 4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t       0xc1600000, 0xc1500000 };"}, {"sha": "9bfaffceaeb0793457f73379ec1180467be8673f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndm.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndm.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -6,6 +6,15 @@\n #include \"compute-ref-data.h\"\n \n /* Expected results.  */\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected, hfloat, 16, 4) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80 };\n+VECT_VAR_DECL (expected, hfloat, 16, 8) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80,\n+\t\t\t\t\t       0xca00, 0xc980,\n+\t\t\t\t\t       0xc900, 0xc880 };\n+#endif\n VECT_VAR_DECL (expected, hfloat, 32, 2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL (expected, hfloat, 32, 4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t       0xc1600000, 0xc1500000 };"}, {"sha": "52b99424d28643a6414a2b1e29d6438ffa37172d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndn.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndn.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -6,6 +6,15 @@\n #include \"compute-ref-data.h\"\n \n /* Expected results.  */\n+/* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected, hfloat, 16, 4) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80 };\n+VECT_VAR_DECL (expected, hfloat, 16, 8) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80,\n+\t\t\t\t\t       0xca00, 0xc980,\n+\t\t\t\t\t       0xc900, 0xc880 };\n+#endif\n VECT_VAR_DECL (expected, hfloat, 32, 2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL (expected, hfloat, 32, 4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t       0xc1600000, 0xc1500000 };"}, {"sha": "2e888b9caf616a0ad0ecda42bc9ed41905d1d2ca", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndp.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndp.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -6,6 +6,14 @@\n #include \"compute-ref-data.h\"\n \n /* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected, hfloat, 16, 4) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80 };\n+VECT_VAR_DECL (expected, hfloat, 16, 8) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80,\n+\t\t\t\t\t       0xca00, 0xc980,\n+\t\t\t\t\t       0xc900, 0xc880 };\n+#endif\n VECT_VAR_DECL (expected, hfloat, 32, 2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL (expected, hfloat, 32, 4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t       0xc1600000, 0xc1500000 };"}, {"sha": "400ddf84f9b71ee4a12da4c512df555b0e2e1101", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndx.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndx.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -6,6 +6,14 @@\n #include \"compute-ref-data.h\"\n \n /* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL (expected, hfloat, 16, 4) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80 };\n+VECT_VAR_DECL (expected, hfloat, 16, 8) [] = { 0xcc00, 0xcb80,\n+\t\t\t\t\t       0xcb00, 0xca80,\n+\t\t\t\t\t       0xca00, 0xc980,\n+\t\t\t\t\t       0xc900, 0xc880 };\n+#endif\n VECT_VAR_DECL (expected, hfloat, 32, 2) [] = { 0xc1800000, 0xc1700000 };\n VECT_VAR_DECL (expected, hfloat, 32, 4) [] = { 0xc1800000, 0xc1700000,\n \t\t\t\t\t       0xc1600000, 0xc1500000 };"}, {"sha": "77e221023c4e419efaa39a369cbb134389b41e2b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrsqrte.c", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrte.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -7,6 +7,11 @@\n VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n VECT_VAR_DECL(expected,uint,32,4) [] = { 0x9c800000, 0x9c800000,\n \t\t\t\t\t 0x9c800000, 0x9c800000 };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0x324c, 0x324c, 0x324c, 0x324c };\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0x3380, 0x3380, 0x3380, 0x3380,\n+\t\t\t\t\t      0x3380, 0x3380, 0x3380, 0x3380 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x3e498000, 0x3e498000 };\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x3e700000, 0x3e700000,\n \t\t\t\t\t   0x3e700000, 0x3e700000 };\n@@ -22,17 +27,39 @@ VECT_VAR_DECL(expected_2,uint,32,4) [] = { 0xed000000, 0xed000000,\n \t\t\t\t\t   0xed000000, 0xed000000 };\n \n /* Expected results with FP special inputs values (NaNs, ...).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp1, hfloat, 16, 4) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00 };\n+VECT_VAR_DECL(expected_fp1, hfloat, 16, 8) [] = { 0x7c00, 0x7c00,\n+\t\t\t\t\t\t  0x7c00, 0x7c00,\n+\t\t\t\t\t\t  0x7c00, 0x7c00,\n+\t\t\t\t\t\t  0x7c00, 0x7c00 };\n+#endif\n VECT_VAR_DECL(expected_fp1,hfloat,32,2) [] = { 0x7fc00000, 0x7fc00000 };\n VECT_VAR_DECL(expected_fp1,hfloat,32,4) [] = { 0x7f800000, 0x7f800000,\n \t\t\t\t\t       0x7f800000, 0x7f800000 };\n \n /* Expected results with FP special inputs values\n    (negative, infinity).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp2, hfloat, 16, 4) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00 };\n+VECT_VAR_DECL(expected_fp2, hfloat, 16, 8) [] = { 0x0, 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t  0x0, 0x0, 0x0 };\n+#endif\n VECT_VAR_DECL(expected_fp2,hfloat,32,2) [] = { 0x7fc00000, 0x7fc00000 };\n VECT_VAR_DECL(expected_fp2,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n \n /* Expected results with FP special inputs values\n    (-0, -infinity).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp3, hfloat, 16, 4) [] = { 0xfc00, 0xfc00,\n+\t\t\t\t\t\t  0xfc00, 0xfc00 };\n+VECT_VAR_DECL(expected_fp3, hfloat, 16, 8) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00 };\n+#endif\n VECT_VAR_DECL(expected_fp3,hfloat,32,2) [] = { 0xff800000, 0xff800000 };\n VECT_VAR_DECL(expected_fp3,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n \t\t\t\t\t       0x7fc00000, 0x7fc00000 };\n@@ -50,32 +77,60 @@ void exec_vrsqrte(void)\n \t\t    VECT_VAR(vector_res, T1, W, N))\n \n   DECL_VARIABLE(vector, uint, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+#endif\n   DECL_VARIABLE(vector, float, 32, 2);\n   DECL_VARIABLE(vector, uint, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector, float, 32, 4);\n \n   DECL_VARIABLE(vector_res, uint, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+#endif\n   DECL_VARIABLE(vector_res, float, 32, 2);\n   DECL_VARIABLE(vector_res, uint, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector_res, float, 32, 4);\n \n   clean_results ();\n \n   /* Choose init value arbitrarily.  */\n   VDUP(vector, , uint, u, 32, 2, 0x12345678);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, 25.799999f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, 25.799999f);\n   VDUP(vector, q, uint, u, 32, 4, 0xABCDEF10);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, q, float, f, 16, 8, 18.2f);\n+#endif\n   VDUP(vector, q, float, f, 32, 4, 18.2f);\n \n   /* Apply the operator.  */\n   TEST_VRSQRTE(, uint, u, 32, 2);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRSQRTE(, float, f, 16, 4);\n+#endif\n   TEST_VRSQRTE(, float, f, 32, 2);\n   TEST_VRSQRTE(q, uint, u, 32, 4);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRSQRTE(q, float, f, 16, 8);\n+#endif\n   TEST_VRSQRTE(q, float, f, 32, 4);\n \n #define CMT \"\"\n   CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n   CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, CMT);\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, CMT);\n \n@@ -110,42 +165,78 @@ void exec_vrsqrte(void)\n \n \n   /* Test FP variants with special input values (NaNs, ...).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, NAN);\n+  VDUP(vector, q, float, f, 16, 8, 0.0f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, NAN);\n   VDUP(vector, q, float, f, 32, 4, 0.0f);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRSQRTE(, float, f, 16, 4);\n+  TEST_VRSQRTE(q, float, f, 16, 8);\n+#endif\n   TEST_VRSQRTE(, float, f, 32, 2);\n   TEST_VRSQRTE(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (NaN, 0)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp1, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp1, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp1, CMT);\n \n \n   /* Test FP variants with special input values (negative, infinity).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, -1.0f);\n+  VDUP(vector, q, float, f, 16, 8, HUGE_VALF);\n+#endif\n   VDUP(vector, , float, f, 32, 2, -1.0f);\n   VDUP(vector, q, float, f, 32, 4, HUGE_VALF);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRSQRTE(, float, f, 16, 4);\n+  TEST_VRSQRTE(q, float, f, 16, 8);\n+#endif\n   TEST_VRSQRTE(, float, f, 32, 2);\n   TEST_VRSQRTE(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (negative, infinity)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp2, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp2, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp2, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp2, CMT);\n \n   /* Test FP variants with special input values (-0, -infinity).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, -0.0f);\n+  VDUP(vector, q, float, f, 16, 8, -HUGE_VALF);\n+#endif\n   VDUP(vector, , float, f, 32, 2, -0.0f);\n   VDUP(vector, q, float, f, 32, 4, -HUGE_VALF);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRSQRTE(, float, f, 16, 4);\n+  TEST_VRSQRTE(q, float, f, 16, 8);\n+#endif\n   TEST_VRSQRTE(, float, f, 32, 2);\n   TEST_VRSQRTE(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (-0, -infinity)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp3, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp3, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp3, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp3, CMT);\n }"}, {"sha": "06626e4088560398c8aff15d2b9add91ea62f790", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrsqrts.c", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrsqrts.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -4,22 +4,51 @@\n #include <math.h>\n \n /* Expected results.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected, hfloat, 16, 4) [] = { 0xd3cb, 0xd3cb, 0xd3cb, 0xd3cb };\n+VECT_VAR_DECL(expected, hfloat, 16, 8) [] = { 0xc726, 0xc726, 0xc726, 0xc726,\n+\t\t\t\t\t      0xc726, 0xc726, 0xc726, 0xc726 };\n+#endif\n VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc2796b84, 0xc2796b84 };\n VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc0e4a3d8, 0xc0e4a3d8,\n \t\t\t\t\t   0xc0e4a3d8, 0xc0e4a3d8 };\n \n /* Expected results with input=NaN.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_nan, hfloat, 16, 4) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00 };\n+VECT_VAR_DECL(expected_nan, hfloat, 16, 8) [] = { 0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00,\n+\t\t\t\t\t\t  0x7e00, 0x7e00 };\n+#endif\n VECT_VAR_DECL(expected_nan,hfloat,32,2) [] = { 0x7fc00000, 0x7fc00000 };\n VECT_VAR_DECL(expected_nan,hfloat,32,4) [] = { 0x7fc00000, 0x7fc00000,\n \t\t\t\t\t       0x7fc00000, 0x7fc00000 };\n \n /* Expected results with FP special inputs values (infinity, 0).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp1, hfloat, 16, 4) [] = { 0xfc00, 0xfc00,\n+\t\t\t\t\t\t  0xfc00, 0xfc00 };\n+VECT_VAR_DECL(expected_fp1, hfloat, 16, 8) [] = { 0x3e00, 0x3e00,\n+\t\t\t\t\t\t  0x3e00, 0x3e00,\n+\t\t\t\t\t\t  0x3e00, 0x3e00,\n+\t\t\t\t\t\t  0x3e00, 0x3e00 };\n+#endif\n VECT_VAR_DECL(expected_fp1,hfloat,32,2) [] = { 0xff800000, 0xff800000 };\n VECT_VAR_DECL(expected_fp1,hfloat,32,4) [] = { 0x3fc00000, 0x3fc00000,\n \t\t\t\t\t       0x3fc00000, 0x3fc00000 };\n \n /* Expected results with only FP special inputs values (infinity,\n    0).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_fp2, hfloat, 16, 4) [] = { 0x3e00, 0x3e00,\n+\t\t\t\t\t\t  0x3e00, 0x3e00 };\n+VECT_VAR_DECL(expected_fp2, hfloat, 16, 8) [] = { 0x3e00, 0x3e00,\n+\t\t\t\t\t\t  0x3e00, 0x3e00,\n+\t\t\t\t\t\t  0x3e00, 0x3e00,\n+\t\t\t\t\t\t  0x3e00, 0x3e00 };\n+#endif\n VECT_VAR_DECL(expected_fp2,hfloat,32,2) [] = { 0x3fc00000, 0x3fc00000 };\n VECT_VAR_DECL(expected_fp2,hfloat,32,4) [] = { 0x3fc00000, 0x3fc00000,\n \t\t\t\t\t       0x3fc00000, 0x3fc00000 };\n@@ -38,75 +67,143 @@ void exec_vrsqrts(void)\n \t\t    VECT_VAR(vector_res, T1, W, N))\n \n   /* No need for integer variants.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector, float, 32, 2);\n   DECL_VARIABLE(vector, float, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+  DECL_VARIABLE(vector2, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector2, float, 32, 2);\n   DECL_VARIABLE(vector2, float, 32, 4);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+#endif\n   DECL_VARIABLE(vector_res, float, 32, 2);\n   DECL_VARIABLE(vector_res, float, 32, 4);\n \n   clean_results ();\n \n   /* Choose init value arbitrarily.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, 12.9f);\n+  VDUP(vector, q, float, f, 16, 8, 9.1f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, 12.9f);\n   VDUP(vector, q, float, f, 32, 4, 9.1f);\n \n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector2, , float, f, 16, 4, 9.9f);\n+  VDUP(vector2, q, float, f, 16, 8, 1.9f);\n+#endif\n   VDUP(vector2, , float, f, 32, 2, 9.9f);\n   VDUP(vector2, q, float, f, 32, 4, 1.9f);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRSQRTS(, float, f, 16, 4);\n+  TEST_VRSQRTS(q, float, f, 16, 8);\n+#endif\n   TEST_VRSQRTS(, float, f, 32, 2);\n   TEST_VRSQRTS(q, float, f, 32, 4);\n \n #define CMT \"\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected, CMT);\n \n \n   /* Test FP variants with special input values (NaN).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, NAN);\n+  VDUP(vector2, q, float, f, 16, 8, NAN);\n+#endif\n   VDUP(vector, , float, f, 32, 2, NAN);\n   VDUP(vector2, q, float, f, 32, 4, NAN);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRSQRTS(, float, f, 16, 4);\n+  TEST_VRSQRTS(q, float, f, 16, 8);\n+#endif\n   TEST_VRSQRTS(, float, f, 32, 2);\n   TEST_VRSQRTS(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (NAN) and normal values\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_nan, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_nan, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_nan, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_nan, CMT);\n \n \n   /* Test FP variants with special input values (infinity, 0).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, HUGE_VALF);\n+  VDUP(vector, q, float, f, 16, 8, 0.0f);\n+  /* Restore a normal value in vector2.  */\n+  VDUP(vector2, q, float, f, 16, 8, 3.2f);\n+#endif\n   VDUP(vector, , float, f, 32, 2, HUGE_VALF);\n   VDUP(vector, q, float, f, 32, 4, 0.0f);\n   /* Restore a normal value in vector2.  */\n   VDUP(vector2, q, float, f, 32, 4, 3.2f);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRSQRTS(, float, f, 16, 4);\n+  TEST_VRSQRTS(q, float, f, 16, 8);\n+#endif\n   TEST_VRSQRTS(, float, f, 32, 2);\n   TEST_VRSQRTS(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" FP special (infinity, 0) and normal values\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp1, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp1, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp1, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp1, CMT);\n \n \n   /* Test FP variants with only special input values (infinity, 0).  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  VDUP(vector, , float, f, 16, 4, HUGE_VALF);\n+  VDUP(vector, q, float, f, 16, 8, 0.0f);\n+  VDUP(vector2, , float, f, 16, 4, -0.0f);\n+  VDUP(vector2, q, float, f, 16, 8, HUGE_VALF);\n+#endif\n   VDUP(vector, , float, f, 32, 2, HUGE_VALF);\n   VDUP(vector, q, float, f, 32, 4, 0.0f);\n   VDUP(vector2, , float, f, 32, 2, -0.0f);\n   VDUP(vector2, q, float, f, 32, 4, HUGE_VALF);\n \n   /* Apply the operator.  */\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  TEST_VRSQRTS(, float, f, 16, 4);\n+  TEST_VRSQRTS(q, float, f, 16, 8);\n+#endif\n   TEST_VRSQRTS(, float, f, 32, 2);\n   TEST_VRSQRTS(q, float, f, 32, 4);\n \n #undef CMT\n #define CMT \" only FP special (infinity, 0)\"\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_fp2, CMT);\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_fp2, CMT);\n+#endif\n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp2, CMT);\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp2, CMT);\n }"}, {"sha": "19d1fd2270be4596a678917dc46f6243ecd9da6a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsub.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsub.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab9e1df4d30c129e75e8a0ee575a821ab6342cf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsub.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsub.c?ref=cab9e1df4d30c129e75e8a0ee575a821ab6342cf", "patch": "@@ -44,6 +44,14 @@ VECT_VAR_DECL(expected,uint,64,2) [] = { 0xffffffffffffffed,\n VECT_VAR_DECL(expected_float32,hfloat,32,2) [] = { 0xc00ccccd, 0xc00ccccd };\n VECT_VAR_DECL(expected_float32,hfloat,32,4) [] = { 0xc00ccccc, 0xc00ccccc,\n \t\t\t\t\t\t   0xc00ccccc, 0xc00ccccc };\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+VECT_VAR_DECL(expected_float16, hfloat, 16, 4) [] = { 0xc066, 0xc066,\n+\t\t\t\t\t\t      0xc066, 0xc066 };\n+VECT_VAR_DECL(expected_float16, hfloat, 16, 8) [] = { 0xc067, 0xc067,\n+\t\t\t\t\t\t      0xc067, 0xc067,\n+\t\t\t\t\t\t      0xc067, 0xc067,\n+\t\t\t\t\t\t      0xc067, 0xc067 };\n+#endif\n \n void exec_vsub_f32(void)\n {\n@@ -67,4 +75,27 @@ void exec_vsub_f32(void)\n \n   CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_float32, \"\");\n   CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \"\");\n+\n+#if defined (__ARM_FEATURE_FP16_VECTOR_ARITHMETIC)\n+  DECL_VARIABLE(vector, float, 16, 4);\n+  DECL_VARIABLE(vector, float, 16, 8);\n+\n+  DECL_VARIABLE(vector2, float, 16, 4);\n+  DECL_VARIABLE(vector2, float, 16, 8);\n+\n+  DECL_VARIABLE(vector_res, float, 16, 4);\n+  DECL_VARIABLE(vector_res, float, 16, 8);\n+\n+  VDUP(vector, , float, f, 16, 4, 2.3f);\n+  VDUP(vector, q, float, f, 16, 8, 3.4f);\n+\n+  VDUP(vector2, , float, f, 16, 4, 4.5f);\n+  VDUP(vector2, q, float, f, 16, 8, 5.6f);\n+\n+  TEST_BINARY_OP(INSN_NAME, , float, f, 16, 4);\n+  TEST_BINARY_OP(INSN_NAME, q, float, f, 16, 8);\n+\n+  CHECK_FP(TEST_MSG, float, 16, 4, PRIx16, expected_float16, \"\");\n+  CHECK_FP(TEST_MSG, float, 16, 8, PRIx16, expected_float16, \"\");\n+#endif\n }"}]}