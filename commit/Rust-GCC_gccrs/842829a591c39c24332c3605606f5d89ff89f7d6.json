{"sha": "842829a591c39c24332c3605606f5d89ff89f7d6", "node_id": "C_kwDOANBUbNoAKDg0MjgyOWE1OTFjMzljMjQzMzJjMzYwNTYwNmY1ZDg5ZmY4OWY3ZDY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-29T11:37:13Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-31T09:16:59Z"}, "message": "ast: Only expand expressions and types if the kind is right", "tree": {"sha": "07749137e8a463b76a8a172e560e416b690871f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07749137e8a463b76a8a172e560e416b690871f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/842829a591c39c24332c3605606f5d89ff89f7d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842829a591c39c24332c3605606f5d89ff89f7d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842829a591c39c24332c3605606f5d89ff89f7d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842829a591c39c24332c3605606f5d89ff89f7d6/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bf4f17d1ff0dbfd5c21776f45094d518f01cd49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bf4f17d1ff0dbfd5c21776f45094d518f01cd49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bf4f17d1ff0dbfd5c21776f45094d518f01cd49"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "0b032a6637f5aa2504df632984a801c50f04b192", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842829a591c39c24332c3605606f5d89ff89f7d6/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842829a591c39c24332c3605606f5d89ff89f7d6/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=842829a591c39c24332c3605606f5d89ff89f7d6", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-hir-map.h\"\n #include \"rust-token.h\"\n #include \"rust-location.h\"\n+#include \"rust-diagnostics.h\"\n \n namespace Rust {\n // TODO: remove typedefs and make actual types for these\n@@ -1868,6 +1869,10 @@ class ASTFragment\n    */\n \n   bool is_single_fragment () const { return nodes.size () == 1; }\n+  bool is_single_fragment (SingleASTNode::NodeType expected) const\n+  {\n+    return is_single_fragment () && nodes[0].get_kind () == expected;\n+  }\n \n   bool is_single_fragment_kind (SingleASTNode::NodeType kind) const\n   {\n@@ -1913,6 +1918,16 @@ class ASTFragment\n \n   bool should_expand () const { return !is_error (); }\n \n+  bool is_expression_fragment () const\n+  {\n+    return is_single_fragment (SingleASTNode::NodeType::EXPRESSION);\n+  }\n+\n+  bool is_type_fragment () const\n+  {\n+    return is_single_fragment (SingleASTNode::NodeType::TYPE);\n+  }\n+\n   std::unique_ptr<Expr> take_expression_fragment ()\n   {\n     rust_assert (is_single_fragment_kind (SingleASTNode::NodeType::EXPRESSION));"}, {"sha": "12b8cec5d09dbe985dfd5dc3bd0dc6c5fa806bad", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842829a591c39c24332c3605606f5d89ff89f7d6/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842829a591c39c24332c3605606f5d89ff89f7d6/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=842829a591c39c24332c3605606f5d89ff89f7d6", "patch": "@@ -2662,7 +2662,7 @@ AttrVisitor::visit (AST::InherentImpl &impl)\n   for (auto &param : impl.get_generic_params ())\n     param->accept_vis (*this);\n \n-  expander.push_context (MacroExpander::ContextType::TYPE);\n+  expander.push_context (MacroExpander::ContextType::ITEM);\n \n   auto &type = impl.get_type ();\n   type->accept_vis (*this);\n@@ -2706,7 +2706,7 @@ AttrVisitor::visit (AST::TraitImpl &impl)\n   for (auto &param : impl.get_generic_params ())\n     param->accept_vis (*this);\n \n-  expander.push_context (MacroExpander::ContextType::TYPE);\n+  expander.push_context (MacroExpander::ContextType::ITEM);\n \n   auto &type = impl.get_type ();\n   type->accept_vis (*this);\n@@ -3427,19 +3427,22 @@ AttrVisitor::visit (AST::BareFunctionType &type)\n \n   // no where clause, apparently\n }\n+\n void\n AttrVisitor::maybe_expand_expr (std::unique_ptr<AST::Expr> &expr)\n {\n   auto final_fragment = expand_macro_fragment_recursive ();\n-  if (final_fragment.should_expand ())\n+  if (final_fragment.should_expand ()\n+      && final_fragment.is_expression_fragment ())\n     expr = final_fragment.take_expression_fragment ();\n }\n \n void\n AttrVisitor::maybe_expand_type (std::unique_ptr<AST::Type> &type)\n {\n   auto final_fragment = expand_macro_fragment_recursive ();\n-  if (final_fragment.should_expand ())\n+  if (final_fragment.should_expand () && final_fragment.is_type_fragment ())\n     type = final_fragment.take_type_fragment ();\n }\n+\n } // namespace Rust"}, {"sha": "dd8d468aad1d3dc589e8bf9c4ea66c3c2e2bb98c", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842829a591c39c24332c3605606f5d89ff89f7d6/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842829a591c39c24332c3605606f5d89ff89f7d6/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=842829a591c39c24332c3605606f5d89ff89f7d6", "patch": "@@ -864,7 +864,9 @@ transcribe_expression (Parser<MacroInvocLexer> &parser)\n static AST::ASTFragment\n transcribe_type (Parser<MacroInvocLexer> &parser)\n {\n-  auto type = parser.parse_type ();\n+  auto type = parser.parse_type (true);\n+  for (auto err : parser.get_errors ())\n+    err.emit_error ();\n \n   return AST::ASTFragment ({std::move (type)});\n }"}]}