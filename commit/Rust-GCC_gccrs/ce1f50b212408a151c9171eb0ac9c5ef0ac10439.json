{"sha": "ce1f50b212408a151c9171eb0ac9c5ef0ac10439", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UxZjUwYjIxMjQwOGExNTFjOTE3MWViMGFjOWM1ZWYwYWMxMDQzOQ==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2004-01-08T07:25:56Z"}, "committer": {"name": "Hartmut Penner", "email": "hpenner@gcc.gnu.org", "date": "2004-01-08T07:25:56Z"}, "message": "rs6000.c (easy_vector_constant): Accept all vector constant loadable by vsplt*.\n\n      * gcc/config/rs6000/rs6000.c (easy_vector_constant): Accept\n      all vector constant loadable by vsplt*.\n      (output_vec_const_move): Likewise.\n\nFrom-SVN: r75534", "tree": {"sha": "8070be9e9dd4f29c408ab94529e8246bf9df6c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8070be9e9dd4f29c408ab94529e8246bf9df6c2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce1f50b212408a151c9171eb0ac9c5ef0ac10439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1f50b212408a151c9171eb0ac9c5ef0ac10439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce1f50b212408a151c9171eb0ac9c5ef0ac10439", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce1f50b212408a151c9171eb0ac9c5ef0ac10439/comments", "author": null, "committer": null, "parents": [{"sha": "11e584edfe93b8c03e5353739f790909d1f8ae9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e584edfe93b8c03e5353739f790909d1f8ae9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e584edfe93b8c03e5353739f790909d1f8ae9d"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "96e10ab6c3714a3b6ef8b9d7f2932278f41b0f22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1f50b212408a151c9171eb0ac9c5ef0ac10439/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1f50b212408a151c9171eb0ac9c5ef0ac10439/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce1f50b212408a151c9171eb0ac9c5ef0ac10439", "patch": "@@ -1,3 +1,9 @@\n+2004-01-08  Hartmut Penner  <hpenner@de.ibm.com>\n+\n+\t* gcc/config/rs6000/rs6000.c (easy_vector_constant): Accept \n+\tall vector constant loadable by vsplt*.  \n+\t(output_vec_const_move): Likewise.\n+\n 2004-01-07  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/6024"}, {"sha": "bef470f2ebadfc602cd4ff4626eca3b2c35b23fe", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce1f50b212408a151c9171eb0ac9c5ef0ac10439/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce1f50b212408a151c9171eb0ac9c5ef0ac10439/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ce1f50b212408a151c9171eb0ac9c5ef0ac10439", "patch": "@@ -1676,8 +1676,27 @@ easy_vector_constant (rtx op, enum machine_mode mode)\n       && cst2 >= -0x7fff && cst2 <= 0x7fff)\n     return 1;\n \n-  if (TARGET_ALTIVEC && EASY_VECTOR_15 (cst, op, mode))\n-    return 1;\n+  if (TARGET_ALTIVEC)\n+    switch (mode) \n+      {\n+      case V4SImode:\n+\tif (EASY_VECTOR_15 (cst, op, mode))\n+\t  return 1;\n+\tif ((cst & 0xffff) != ((cst >> 16) & 0xffff))\n+\t  break;\n+\tcst = cst >> 16;\n+      case V8HImode:\n+\tif (EASY_VECTOR_15 (cst, op, mode))\n+\t  return 1;\n+\tif ((cst & 0xff) != ((cst >> 8) & 0xff))\n+\t  break;\n+\tcst = cst >> 8;\n+      case V16QImode:\n+\tif (EASY_VECTOR_15 (cst, op, mode))\n+\t  return 1;\n+      default: \n+\tbreak;\n+      }\n \n   if (TARGET_ALTIVEC && EASY_VECTOR_15_ADD_SELF (cst, op, mode))\n     return 1;\n@@ -1718,23 +1737,37 @@ output_vec_const_move (rtx *operands)\n     {\n       if (zero_constant (vec, mode))\n \treturn \"vxor %0,%0,%0\";\n-      else if (EASY_VECTOR_15 (cst, vec, mode))\n+      else if (EASY_VECTOR_15_ADD_SELF (cst, vec, mode))\n+\treturn \"#\";\n+      else if (easy_vector_constant (vec, mode))\n \t{\n \t  operands[1] = GEN_INT (cst);\n \t  switch (mode)\n \t    {\n \t    case V4SImode:\n-\t      return \"vspltisw %0,%1\";\n+\t      if (EASY_VECTOR_15 (cst, vec, mode))\n+\t\t{\n+\t\t  operands[1] = GEN_INT (cst);\n+\t\t  return \"vspltisw %0,%1\";\n+\t\t}\n+\t      cst = cst >> 16;\n \t    case V8HImode:\n-\t      return \"vspltish %0,%1\";\n+\t      if (EASY_VECTOR_15 (cst, vec, mode))\n+\t\t{\n+\t\t  operands[1] = GEN_INT (cst);\n+\t\t  return \"vspltish %0,%1\";\n+\t\t}\n+\t      cst = cst >> 8;\n \t    case V16QImode:\n-\t      return \"vspltisb %0,%1\";\n+\t      if (EASY_VECTOR_15 (cst, vec, mode))\n+\t\t{\n+\t\t  operands[1] = GEN_INT (cst);\n+\t\t  return \"vspltisb %0,%1\";\n+\t\t}\n \t    default:\n \t      abort ();\n \t    }\n \t}\n-      else if (EASY_VECTOR_15_ADD_SELF (cst, vec, mode))\n-\treturn \"#\";\n       else\n \tabort ();\n     }"}]}