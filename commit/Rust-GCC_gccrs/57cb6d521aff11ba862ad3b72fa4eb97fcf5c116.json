{"sha": "57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjYjZkNTIxYWZmMTFiYTg2MmFkM2I3MmZhNGViOTdmY2Y1YzExNg==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2001-07-30T18:04:33Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-07-30T18:04:33Z"}, "message": "jump.c: Add prototype for mark_modified_reg.\n\n        * jump.c: Add prototype for mark_modified_reg.\n\n        * cse.c (set_live_p): Add unused attribute.\n\n        * gcov.c (calculate_branch_probs): Use gcov_type to avoid\n        overflow.\n        (scan_for_source_files): Use long for count to avoid overflow.\n        (output_data): Likewise.\n        (output_data): Don't use string concatatenation to silence gcc\n        -traditional.\n\n        * predict.c: Fix typos and grammar.\n\n        * gcse.c (insert_insn_end_bb): Remove unused variables.\n\nFor cp:\n        * decl2.c: Remove unused var global_temp_name_counter.\n\nFrom-SVN: r44479", "tree": {"sha": "6f14be388d2d55c84523eb6739cdd6963a3f8f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f14be388d2d55c84523eb6739cdd6963a3f8f37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d76cbbc844a6f08555965f384c094f0626da8d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76cbbc844a6f08555965f384c094f0626da8d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76cbbc844a6f08555965f384c094f0626da8d3d"}], "stats": {"total": 141, "additions": 77, "deletions": 64}, "files": [{"sha": "1f96e87554f29e6e29f4c3527a405ccc0e801099", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "patch": "@@ -1,3 +1,7 @@\n+2001-07-30  Andreas Jaeger  <aj@suse.de>\n+\n+        * decl2.c: Remove unused var global_temp_name_counter.\n+\n 2001-07-28  Richard Henderson  <rth@redhat.com>\n \n \t* method.c (pending_inlines): Remove.\n@@ -46,7 +50,7 @@\n \tdeclaring a function, and create last_function_parms correctly.\n \n 2001-07-25  Jason Merrill  <jason_merrill@redhat.com>\n-\t\n+\n \t* call.c (joust): Only prefer a non-builtin candidate to a builtin\n \tone if they have the same signature.\n \n@@ -232,7 +236,7 @@\n \t* pt.c (instantiate_class_template): Don't set\n \tTYPE_VEC_DELETE_TAKES_SIZE.\n \t* NEWS: Document ABI changes from GCC 3.0.\n-\t\n+\n 2001-07-18  Xavier Delacour <xavier@fmaudio.net>,\n             Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n "}, {"sha": "7ce343c08997ed6e25ab311c64f805fe4c1a30b6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "patch": "@@ -104,10 +104,6 @@ static varray_type deferred_fns;\n #define deferred_fns_used \\\n   (deferred_fns ? deferred_fns->elements_used : 0)\n \n-/* Same, but not reset.  Local temp variables and global temp variables\n-   can have the same name.  */\n-static int global_temp_name_counter;\n-\n /* Flag used when debugging spew.c */\n \n extern int spew_debug;"}, {"sha": "5802ec553e6193c43cc90ef1fd66b8e767d94e8b", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "patch": "@@ -7489,7 +7489,7 @@ count_reg_usage (x, counts, dest, incr)\n static bool\n set_live_p (set, insn, counts)\n      rtx set;\n-     rtx insn;\n+     rtx insn ATTRIBUTE_UNUSED;\t/* Only used with HAVE_cc0.  */\n      int *counts;\n {\n #ifdef HAVE_cc0"}, {"sha": "ab218206f2363670477448fb643724d4682c610f", "filename": "gcc/gcov.c", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "patch": "@@ -788,7 +788,7 @@ scan_for_source_files ()\n {\n   struct sourcefile *s_ptr = NULL;\n   char *ptr;\n-  int count;\n+  long count;\n   long line_num;\n \n   /* Search the bb_data to find:\n@@ -878,7 +878,7 @@ calculate_branch_probs (current_graph, block_num, branch_probs, last_line_num)\n      struct arcdata **branch_probs;\n      int last_line_num;\n {\n-  int total;\n+  gcov_type total;\n   struct adj_list *arcptr;\n   struct arcdata *end_ptr, *a_ptr;\n \n@@ -990,7 +990,7 @@ output_data ()\n   char *source_file_name;\n   FILE *source_file;\n   struct bb_info_list *current_graph;\n-  int count;\n+  long count;\n   char *cptr;\n   long block_num;\n   long line_num;\n@@ -1360,16 +1360,23 @@ output_data ()\n \t\t            else\n \t\t\t      {\n \t\t\t\tif (output_branch_counts)\n-\t\t\t\t  fnotice (gcov_file,\n-\t\t\t\t           \"call %d returns = \"\n-\t\t\t\t\t   HOST_WIDEST_INT_PRINT_DEC \"\\n\",\n-\t\t\t\t           i, a_ptr->total - a_ptr->hits);\n+\t\t\t\t  {\n+\t\t\t\t    char c[20];\n+\t\t\t\t    sprintf (c, HOST_WIDEST_INT_PRINT_DEC,\n+\t\t\t\t\t     a_ptr->total - a_ptr->hits);\n+\t\t\t\t    fnotice (gcov_file,\n+\t\t\t\t\t     \"call %d returns = %s\\n\", i, c);\n+\t\t\t\t  }\n \t\t\t        else\n-                                  fnotice (gcov_file,\n-\t\t\t\t           \"call %d returns = \"\n-\t\t\t\t\t   HOST_WIDEST_INT_PRINT_DEC \"%%\\n\",\n-\t\t\t\t            i, 100 - ((a_ptr->hits * 100) +\n-                                           (a_ptr->total >> 1))/a_ptr->total);\n+\t\t\t\t  {\n+\t\t\t\t    char c[20];\n+\t\t\t\t    sprintf (c, HOST_WIDEST_INT_PRINT_DEC,\n+\t\t\t\t\t     100 - ((a_ptr->hits * 100)\n+\t\t\t\t\t\t    + (a_ptr->total >> 1))\n+\t\t\t\t\t     / a_ptr->total);\n+\t\t\t\t    fnotice (gcov_file,\n+\t\t\t\t\t     \"call %d returns = %s%%\\n\", i, c);\n+\t\t\t\t  }\n \t\t\t      }\n \t\t\t}\n \t\t      else\n@@ -1380,18 +1387,23 @@ output_data ()\n \t\t\t  else\n \t\t\t    {\n \t\t\t      if (output_branch_counts)\n-\t\t\t        fnotice (gcov_file,\n-\t\t\t\t         \"branch %d taken = \"\n-\t\t\t\t\t HOST_WIDEST_INT_PRINT_DEC \"\\n\",\n-                                         i, a_ptr->hits);\n+\t\t\t\t{\n+\t\t\t\t  char c[20];\n+\t\t\t\t  sprintf (c, HOST_WIDEST_INT_PRINT_DEC,\n+\t\t\t\t\t   a_ptr->hits);\n+\t\t\t\t  fnotice (gcov_file,\n+\t\t\t\t\t   \"branch %d taken = %s\\n\", i, c);\n+\t\t\t\t}\n \t\t\t      else\n+\t\t\t\t{\n+\t\t\t\t  char c[20];\n+\t\t\t\t  sprintf (c, HOST_WIDEST_INT_PRINT_DEC,\n+\t\t\t\t\t   ((a_ptr->hits * 100)\n+\t\t\t\t\t    + (a_ptr->total >> 1))\n+\t\t\t\t\t   / a_ptr->total);\n                                 fnotice (gcov_file,\n-                                         \"branch %d taken = \"\n-\t\t\t\t\t HOST_WIDEST_INT_PRINT_DEC \"%%\\n\", i,\n-                                         ((a_ptr->hits * 100) +\n-                                          (a_ptr->total >> 1))/\n-                                          a_ptr->total);\n-\n+                                         \"branch %d taken = %s%%\\n\", i, c);\n+\t\t\t\t}\n \t\t\t    }\n \t\t\t}\n \t\t   }"}, {"sha": "4fe1b3be60159861fa8b219c5d3da7df9b38c597", "filename": "gcc/gcse.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "patch": "@@ -4628,10 +4628,6 @@ insert_insn_end_bb (expr, bb, pre)\n      of exception handling.  */\n   else if (GET_CODE (insn) == CALL_INSN)\n     {\n-      HARD_REG_SET parm_regs;\n-      int nparm_regs;\n-      rtx p;\n-\n       /* Keeping in mind SMALL_REGISTER_CLASSES and parameters in registers,\n \t we search backward and place the instructions before the first\n \t parameter is loaded.  Do this for everyone for consistency and a"}, {"sha": "ddef4a1453ce126145d8e79c9d7e35b063f1d24a", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "patch": "@@ -69,6 +69,7 @@ static void invert_exp_1\t\tPARAMS ((rtx));\n static int invert_exp\t\t\tPARAMS ((rtx));\n static int returnjump_p_1\t        PARAMS ((rtx *, void *));\n static void delete_prior_computation    PARAMS ((rtx, rtx));\n+static void mark_modified_reg\t\tPARAMS ((rtx, rtx, void *));\n \f\n /* Alternate entry into the jump optimizer.  This entry point only rebuilds\n    the JUMP_LABEL field in jumping insns and REG_LABEL notes in non-jumping"}, {"sha": "36f59e0c0ae21380c1409f8414dd3aef8a8aa562", "filename": "gcc/predict.c", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb6d521aff11ba862ad3b72fa4eb97fcf5c116/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=57cb6d521aff11ba862ad3b72fa4eb97fcf5c116", "patch": "@@ -228,7 +228,7 @@ combine_predictions_for_insn (insn, bb)\n \t     bb->index);\n \n   /* We implement \"first match\" heuristics and use probability guessed\n-     by predictor with smallest index.  In future we will use better\n+     by predictor with smallest index.  In the future we will use better\n      probability combination techniques.  */\n   while (*pnote)\n     {\n@@ -304,8 +304,8 @@ estimate_probability (loops_info)\n \t    {\n \t      int header_found = 0;\n \t      edge e;\n-\t  \n-\t      /* Loop branch heruistics - predict as taken an edge back to\n+\n+\t      /* Loop branch heuristics - predict as taken an edge back to\n \t         a loop's head.  */\n \t      for (e = BASIC_BLOCK(j)->succ; e; e = e->succ_next)\n \t\tif (e->dest == loops_info->array[i].header\n@@ -314,8 +314,9 @@ estimate_probability (loops_info)\n \t\t    header_found = 1;\n \t\t    predict_edge_def (e, PRED_LOOP_BRANCH, TAKEN);\n \t\t  }\n-\t      /* Loop exit heruistics - predict as not taken an edge exiting\n-\t         the loop if the conditinal has no loop header successors  */\n+\t      /* Loop exit heuristics - predict as not taken an edge\n+\t         exiting the loop if the conditinal has no loop header\n+\t         successors.  */\n \t      if (!header_found)\n \t\tfor (e = BASIC_BLOCK(j)->succ; e; e = e->succ_next)\n \t\t  if (e->dest->index <= 0\n@@ -408,7 +409,7 @@ estimate_probability (loops_info)\n \t      && (XEXP (cond, 1) == const0_rtx\n \t\t  || (GET_CODE (XEXP (cond, 1)) == REG\n \t\t      && REG_POINTER (XEXP (cond, 1)))))\n-\t    \n+\n \t    predict_insn_def (last_insn, PRED_POINTER, NOT_TAKEN);\n \t  break;\n \tcase NE:\n@@ -487,7 +488,7 @@ estimate_probability (loops_info)\n }\n \f\n /* __builtin_expect dropped tokens into the insn stream describing\n-   expected values of registers.  Generate branch probabilities \n+   expected values of registers.  Generate branch probabilities\n    based off these values.  */\n \n void\n@@ -535,7 +536,7 @@ expected_value_to_br_prob ()\n \t\t(set r71 -1)\n \t\t(set r80 (lt r70 r71))\n \t\t(set pc (if_then_else (ne r80 0) ...))\n-\t as canonicalize_condition will render this to us as \n+\t as canonicalize_condition will render this to us as\n \t\t(lt r70, r71)\n \t Could use cselib to try and reduce this further.  */\n       cond = XEXP (SET_SRC (PATTERN (insn)), 0);\n@@ -545,7 +546,7 @@ expected_value_to_br_prob ()\n \t  || GET_CODE (XEXP (cond, 1)) != CONST_INT)\n \tcontinue;\n \n-      /* Substitute and simplify.  Given that the expression we're \n+      /* Substitute and simplify.  Given that the expression we're\n \t building involves two constants, we should wind up with either\n \t true or false.  */\n       cond = gen_rtx_fmt_ee (GET_CODE (cond), VOIDmode,\n@@ -560,7 +561,7 @@ expected_value_to_br_prob ()\n     }\n }\n \f\n-/* This is used to carry information about basic blocks.  It is \n+/* This is used to carry information about basic blocks.  It is\n    attached to the AUX field of the standard CFG block.  */\n \n typedef struct block_info_def\n@@ -620,19 +621,22 @@ propagate_freq (head)\n \t    if (!BLOCK_INFO (e->src)->visited && !EDGE_INFO (e)->back_edge)\n \t      break;\n \n-\t  /* We didn't proceeded all predecesors of edge e yet.  These may\n-\t     be waiting in the queue or we may hit irreducible region.\n-\n-\t     To avoid infinite looping on irrecudible regions, count number\n-\t     of block proceeded at the time basic block has been queued.  In the\n-\t     case number didn't changed, we've hit irreducible region and we\n-\t     forget the backward edge.  This can increase time complexity\n-\t     by the number of irreducible blocks, but in same way standard the\n-\t     loop does, so it should not result in noticeable slowodwn.\n-\n-\t     Alternativly we may distinquish backward and cross edges in the\n-\t     DFS tree by preprocesing pass and ignore existence of non-loop\n-\t     backward edges.  */\n+\t  /* We haven't proceeded all predecessors of edge e yet.\n+\t     These may be waiting in the queue or we may hit an\n+\t     irreducible region.\n+\n+\t     To avoid infinite looping on irrecudible regions, count\n+\t     the number of blocks proceeded at the time the basic\n+\t     block has been queued.  In the case the number doesn't\n+\t     change, we've hit an irreducible region and we can forget\n+\t     the backward edge.\t This can increase the time complexity\n+\t     by the number of irreducible blocks, but in the same way\n+\t     the standard the loop does, so it should not result in a\n+\t     noticeable slowdown.\n+\n+\t     Alternatively we may distinguish backward and cross edges\n+\t     in the DFS tree by the preprocessing pass and ignore the\n+\t     existence of non-loop backward edges.  */\n \t  if (e && BLOCK_INFO (bb)->nvisited != nvisited)\n \t    {\n \t      if (!nextbb)\n@@ -670,7 +674,7 @@ propagate_freq (head)\n \t\t\t\t\t   * BLOCK_INFO (bb)->frequency\n \t\t\t\t\t   / REG_BR_PROB_BASE);\n \n-      /* Propagate to succesor blocks.  */\n+      /* Propagate to successor blocks.  */\n       for (e = bb->succ; e; e = e->succ_next)\n \tif (!EDGE_INFO (e)->back_edge\n \t    && !BLOCK_INFO (e->dest)->visited\n@@ -687,7 +691,7 @@ propagate_freq (head)\n     }\n }\n \n-/* Estimate probabilities of the loopback edges in loops at same nest level.  */\n+/* Estimate probabilities of loopback edges in loops at same nest level.  */\n static void\n estimate_loops_at_level (first_loop)\n      struct loop *first_loop;\n@@ -701,13 +705,13 @@ estimate_loops_at_level (first_loop)\n \n       estimate_loops_at_level (loop->inner);\n \n-      /* find current loop back edge and mark it.  */\n+      /* Find current loop back edge and mark it.  */\n       for (e = loop->latch->succ; e->dest != loop->header; e = e->succ_next);\n \n       EDGE_INFO (e)->back_edge = 1;\n \n-      /* In case loop header is shared, ensure that it is the last one sharing\n-         same header, so we avoid redundant work.  */\n+      /* In case the loop header is shared, ensure that it is the last\n+\t one sharing the same header, so we avoid redundant work.  */\n       if (loop->shared)\n \t{\n \t  for (l = loop->next; l; l = l->next)\n@@ -778,12 +782,12 @@ estimate_bb_frequencies (loops)\n       edge fallthru, branch;\n \n       if (GET_CODE (last_insn) != JUMP_INSN || !any_condjump_p (last_insn)\n-\t  /* Avoid handling of conditionals jump jumping to fallthru edge.  */\n+\t  /* Avoid handling of conditional jumps jumping to fallthru edge.  */\n \t  || BASIC_BLOCK (i)->succ->succ_next == NULL)\n \t{\n \t  /* We can predict only conditional jumps at the moment.\n-\t     Expect each edge to be equall probable.\n-\t     ?? In future we want to make abnormal edges improbable.  */\n+\t     Expect each edge to be equally probable.\n+\t     ?? In the future we want to make abnormal edges improbable.  */\n \t  int nedges = 0;\n \t  edge e;\n "}]}