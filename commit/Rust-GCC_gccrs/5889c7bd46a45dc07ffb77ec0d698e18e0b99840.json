{"sha": "5889c7bd46a45dc07ffb77ec0d698e18e0b99840", "node_id": "C_kwDOANBUbNoAKDU4ODljN2JkNDZhNDVkYzA3ZmZiNzdlYzBkNjk4ZTE4ZTBiOTk4NDA", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2023-03-20T06:13:54Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2023-03-20T06:13:54Z"}, "message": "Fortran: Allow external function from in an associate block [PR87127]\n\n2023-03-20  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/87127\n\t* resolve.cc (check_host_association): If an external function\n\tis typed but not declared explicitly to be external, change the\n\told symbol from a variable to an external function.\n\ngcc/testsuite/\n\tPR fortran/87127\n\t* gfortran.dg/external_procedures_4.f90: New test.", "tree": {"sha": "d5dd5805b9712f90ef22c38f7ee4f02d220068ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5dd5805b9712f90ef22c38f7ee4f02d220068ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5889c7bd46a45dc07ffb77ec0d698e18e0b99840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5889c7bd46a45dc07ffb77ec0d698e18e0b99840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5889c7bd46a45dc07ffb77ec0d698e18e0b99840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5889c7bd46a45dc07ffb77ec0d698e18e0b99840/comments", "author": null, "committer": null, "parents": [{"sha": "09abeb73b8e1d5c83da5d36f391f16481499cb88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09abeb73b8e1d5c83da5d36f391f16481499cb88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09abeb73b8e1d5c83da5d36f391f16481499cb88"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "1d973d12ff103714828b298ac5d0aedfaf616aad", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5889c7bd46a45dc07ffb77ec0d698e18e0b99840/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5889c7bd46a45dc07ffb77ec0d698e18e0b99840/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=5889c7bd46a45dc07ffb77ec0d698e18e0b99840", "patch": "@@ -6079,11 +6079,14 @@ resolve_variable (gfc_expr *e)\n \n \n /* Checks to see that the correct symbol has been host associated.\n-   The only situation where this arises is that in which a twice\n-   contained function is parsed after the host association is made.\n-   Therefore, on detecting this, change the symbol in the expression\n-   and convert the array reference into an actual arglist if the old\n-   symbol is a variable.  */\n+   The only situations where this arises are:\n+\t(i)  That in which a twice contained function is parsed after\n+\t     the host association is made. On detecting this, change\n+\t     the symbol in the expression and convert the array reference\n+\t     into an actual arglist if the old symbol is a variable; or\n+\t(ii) That in which an external function is typed but not declared\n+\t     explcitly to be external. Here, the old symbol is changed\n+\t     from a variable to an external function.  */\n static bool\n check_host_association (gfc_expr *e)\n {\n@@ -6185,6 +6188,27 @@ check_host_association (gfc_expr *e)\n \t  gfc_resolve_expr (e);\n \t  sym->refs++;\n \t}\n+      /* This case corresponds to a call, from a block or a contained\n+\t procedure, to an external function, which has not been declared\n+\t as being external in the main program but has been typed.  */\n+      else if (sym && old_sym != sym\n+\t       && !e->ref\n+\t       && sym->ts.type == BT_UNKNOWN\n+\t       && old_sym->ts.type != BT_UNKNOWN\n+\t       && sym->attr.flavor == FL_PROCEDURE\n+\t       && old_sym->attr.flavor == FL_VARIABLE\n+\t       && sym->ns->parent == old_sym->ns\n+\t       && sym->ns->proc_name\n+\t       && sym->ns->proc_name->attr.proc != PROC_MODULE\n+\t       && (sym->ns->proc_name->attr.flavor == FL_LABEL\n+\t\t   || sym->ns->proc_name->attr.flavor == FL_PROCEDURE))\n+\t{\n+\t  old_sym->attr.flavor = FL_PROCEDURE;\n+\t  old_sym->attr.external = 1;\n+\t  old_sym->attr.function = 1;\n+\t  old_sym->result = old_sym;\n+\t  gfc_resolve_expr (e);\n+\t}\n     }\n   /* This might have changed!  */\n   return e->expr_type == EXPR_FUNCTION;"}, {"sha": "252bae580d12210c3eb2a1c04ebb5cebec5e81f2", "filename": "gcc/testsuite/gfortran.dg/external_procedures_4.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5889c7bd46a45dc07ffb77ec0d698e18e0b99840/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_procedures_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5889c7bd46a45dc07ffb77ec0d698e18e0b99840/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_procedures_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fexternal_procedures_4.f90?ref=5889c7bd46a45dc07ffb77ec0d698e18e0b99840", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR87127 in which the references to exfunc cause\n+! the error \"exfunc at (1) is not a function\".\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+function exfunc(i)\n+  implicit none\n+  integer :: exfunc,i\n+  exfunc = 2*i\n+end function\n+\n+! contents of test.f90\n+program test\n+  implicit none\n+  integer :: exfunc,i\n+  integer,parameter :: array(2)=[6,7]\n+  associate(i=>array(2))            ! Original bug\n+    if (exfunc(i) .ne. 2*i) stop 1\n+  end associate\n+  i = 99\n+  call foo\n+contains\n+  subroutine foo()                  ! Comment #3\n+    if (exfunc(i) .ne. 2*i) stop 2\n+  end subroutine foo\n+end program"}]}