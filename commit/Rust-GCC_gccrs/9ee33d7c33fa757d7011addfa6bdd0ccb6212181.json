{"sha": "9ee33d7c33fa757d7011addfa6bdd0ccb6212181", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVlMzNkN2MzM2ZhNzU3ZDcwMTFhZGRmYTZiZGQwY2NiNjIxMjE4MQ==", "commit": {"author": {"name": "Geng Qi", "email": "gengqi@linux.alibaba.com", "date": "2021-01-18T06:09:27Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-01-19T03:44:47Z"}, "message": "RISC-V: The 'multilib-generator' enhancement.\n\nThink about this case:\n  ./multilib-generator rv32imc-ilp32-rv32imac,rv32imacxthead-f\nHere are 2 problems:\n  1. A unexpected 'xtheadf' extension was made.\n  2. The arch 'rv32imac' was not be created.\nThis modification fix these two, and also sorts 'multi-letter'.\n\ngcc/ChangeLog:\n\t* config/riscv/arch-canonicalize (longext_sort): New function for\n\t sorting 'multi-letter'.\n\t* config/riscv/multilib-generator: Adjusting the loop of 'alt' in\n\t'alts'.\tThe 'arch' may not be the first of 'alts'.\n\t(_expand_combination): Add underline for the 'ext' without '*'.\n\tThis is because, a single-letter extension can always be treated well\n\twith a '_' prefix, but it cannot be separated out if it is appended\n\tto a multi-letter.", "tree": {"sha": "6d289384d757b5782758fef8d9c925ea6add286d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d289384d757b5782758fef8d9c925ea6add286d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ee33d7c33fa757d7011addfa6bdd0ccb6212181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee33d7c33fa757d7011addfa6bdd0ccb6212181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ee33d7c33fa757d7011addfa6bdd0ccb6212181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ee33d7c33fa757d7011addfa6bdd0ccb6212181/comments", "author": {"login": "Geng-Qi-alibaba", "id": 74535016, "node_id": "MDQ6VXNlcjc0NTM1MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/74535016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geng-Qi-alibaba", "html_url": "https://github.com/Geng-Qi-alibaba", "followers_url": "https://api.github.com/users/Geng-Qi-alibaba/followers", "following_url": "https://api.github.com/users/Geng-Qi-alibaba/following{/other_user}", "gists_url": "https://api.github.com/users/Geng-Qi-alibaba/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geng-Qi-alibaba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geng-Qi-alibaba/subscriptions", "organizations_url": "https://api.github.com/users/Geng-Qi-alibaba/orgs", "repos_url": "https://api.github.com/users/Geng-Qi-alibaba/repos", "events_url": "https://api.github.com/users/Geng-Qi-alibaba/events{/privacy}", "received_events_url": "https://api.github.com/users/Geng-Qi-alibaba/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c907e4394133b3f4b58feccfb3a415f9ae5ee1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c907e4394133b3f4b58feccfb3a415f9ae5ee1f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c907e4394133b3f4b58feccfb3a415f9ae5ee1f4"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "ea95a0693f3289bcc8e879a1a7487a0402fed671", "filename": "gcc/config/riscv/arch-canonicalize", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee33d7c33fa757d7011addfa6bdd0ccb6212181/gcc%2Fconfig%2Friscv%2Farch-canonicalize", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee33d7c33fa757d7011addfa6bdd0ccb6212181/gcc%2Fconfig%2Friscv%2Farch-canonicalize", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Farch-canonicalize?ref=9ee33d7c33fa757d7011addfa6bdd0ccb6212181", "patch": "@@ -74,8 +74,20 @@ def arch_canonicalize(arch):\n   # becasue we just append extensions list to the arch string.\n   std_exts += list(filter(lambda x:len(x) == 1, long_exts))\n \n+  def longext_sort (exts):\n+    if not exts.startswith(\"zxm\") and exts.startswith(\"z\"):\n+      # If \"Z\" extensions are named, they should be ordered first by CANONICAL.\n+      if exts[1] not in CANONICAL_ORDER:\n+        raise Exception(\"Unsupported extension `%s`\" % exts)\n+      canonical_sort = CANONICAL_ORDER.index(exts[1])\n+    else:\n+      canonical_sort = -1\n+    return (exts.startswith(\"x\"), exts.startswith(\"zxm\"),\n+            LONG_EXT_PREFIXES.index(exts[0]), canonical_sort, exts[1:])\n+\n   # Multi-letter extension must be in lexicographic order.\n-  long_exts = list(sorted(filter(lambda x:len(x) != 1, long_exts)))\n+  long_exts = list(sorted(filter(lambda x:len(x) != 1, long_exts),\n+                          key=longext_sort))\n \n   # Put extensions in canonical order.\n   for ext in CANONICAL_ORDER:"}, {"sha": "a20454374c96da021773f3c43aaf962516d2e6e6", "filename": "gcc/config/riscv/multilib-generator", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ee33d7c33fa757d7011addfa6bdd0ccb6212181/gcc%2Fconfig%2Friscv%2Fmultilib-generator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ee33d7c33fa757d7011addfa6bdd0ccb6212181/gcc%2Fconfig%2Friscv%2Fmultilib-generator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fmultilib-generator?ref=9ee33d7c33fa757d7011addfa6bdd0ccb6212181", "patch": "@@ -68,15 +68,15 @@ def arch_canonicalize(arch):\n def _expand_combination(ext):\n   exts = list(ext.split(\"*\"))\n \n-  # No need to expand if there is no `*`.\n-  if len(exts) == 1:\n-    return [(exts[0],)]\n-\n   # Add underline to every extension.\n   # e.g.\n   #  _b * zvamo => _b * _zvamo\n   exts = list(map(lambda x: '_' + x, exts))\n \n+  # No need to expand if there is no `*`.\n+  if len(exts) == 1:\n+    return [(exts[0],)]\n+\n   # Generate combination!\n   ext_combs = []\n   for comb_len in range(1, len(exts)+1):\n@@ -147,7 +147,9 @@ for cfg in sys.argv[1:]:\n   # Drop duplicated entry.\n   alts = unique(alts)\n \n-  for alt in alts[1:]:\n+  for alt in alts:\n+    if alt == arch:\n+      continue\n     arches[alt] = 1\n     reuse.append('march.%s/mabi.%s=march.%s/mabi.%s' % (arch, abi, alt, abi))\n   required.append('march=%s/mabi=%s' % (arch, abi))"}]}