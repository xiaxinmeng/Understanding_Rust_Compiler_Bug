{"sha": "1cb8292f2ef25a34d7d9efa20ba615514599d900", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiODI5MmYyZWYyNWEzNGQ3ZDllZmEyMGJhNjE1NTE0NTk5ZDkwMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-02-28T20:15:34Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-02-28T20:15:34Z"}, "message": "re PR c++/9879 (ICE / endless compile with \"new int[2]()\")\n\n\tPR c++/9879\n\t* cp-tree.h (build_zero_init): Add parameter.\n\t* decl.c (cp_finish_decl): Adjust call.\n\t* init.c (build_zero_init): Add nelts parameter.  Adjust recursive\n\tcalls.\n\t(build_default_init): Add nelts parameter.  Adjust calls to\n\tbuild_zero_init.\n\t(build_new_1): Adjust call to build_default_init.\n\t* typeck2.c (process_init_constructor): Adjust call to build_zero_init.\n\n\tPR c++/9879\n\t* testsuite/g++.dg/init/new4.C: New test.\n\nFrom-SVN: r63579", "tree": {"sha": "3ea59f18a92962b95d5ab1ea899640ed3c1057c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ea59f18a92962b95d5ab1ea899640ed3c1057c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cb8292f2ef25a34d7d9efa20ba615514599d900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb8292f2ef25a34d7d9efa20ba615514599d900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb8292f2ef25a34d7d9efa20ba615514599d900", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb8292f2ef25a34d7d9efa20ba615514599d900/comments", "author": null, "committer": null, "parents": [{"sha": "f8f0e56649f3f768c10fdada122f616055b3d680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f0e56649f3f768c10fdada122f616055b3d680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f0e56649f3f768c10fdada122f616055b3d680"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "8fd10b17bdf0dbb369aa9731afe99eb83423c035", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1cb8292f2ef25a34d7d9efa20ba615514599d900", "patch": "@@ -1,3 +1,15 @@\n+2003-02-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9879\n+\t* cp-tree.h (build_zero_init): Add parameter.\n+\t* decl.c (cp_finish_decl): Adjust call.\n+\t* init.c (build_zero_init): Add nelts parameter.  Adjust recursive\n+\tcalls.\n+\t(build_default_init): Add nelts parameter.  Adjust calls to\n+\tbuild_zero_init.\n+\t(build_new_1): Adjust call to build_default_init.\n+\t* typeck2.c (process_init_constructor): Adjust call to build_zero_init.\n+\t\n 2003-02-26  Devang Patel  <dpatel@apple.com>\n \n \t* decl.c (finish_enum): Merge two 'for' loops. Copy value node if required."}, {"sha": "408024838cf11582e75bd8930dd31873402dc71e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1cb8292f2ef25a34d7d9efa20ba615514599d900", "patch": "@@ -3912,7 +3912,7 @@ extern tree build_init\t\t\t\t(tree, tree, int);\n extern int is_aggr_type\t\t\t\t(tree, int);\n extern tree get_aggr_from_typedef\t\t(tree, int);\n extern tree get_type_value\t\t\t(tree);\n-extern tree build_zero_init       \t\t(tree, bool);\n+extern tree build_zero_init       \t\t(tree, tree, bool);\n extern tree build_member_call\t\t\t(tree, tree, tree);\n extern tree build_offset_ref\t\t\t(tree, tree);\n extern tree resolve_offset_ref\t\t\t(tree);"}, {"sha": "cd15f25315da52b2c8f40441c9f713f89256aaed", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1cb8292f2ef25a34d7d9efa20ba615514599d900", "patch": "@@ -8209,6 +8209,7 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n \t     necessary zero-initialization has already been performed.  */\n \t  if (TREE_STATIC (decl) && !DECL_INITIAL (decl))\n \t    DECL_INITIAL (decl) = build_zero_init (TREE_TYPE (decl),\n+\t\t\t\t\t\t   /*nelts=*/NULL_TREE,\n \t\t\t\t\t\t   /*static_storage_p=*/true);\n \t  /* Remember that the initialization for this variable has\n \t     taken place.  */"}, {"sha": "1b8651392918e68980d5760ec8bc7d4ecfa669fc", "filename": "gcc/cp/init.c", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1cb8292f2ef25a34d7d9efa20ba615514599d900", "patch": "@@ -48,7 +48,7 @@ static tree initializing_context PARAMS ((tree));\n static void expand_cleanup_for_base PARAMS ((tree, tree));\n static tree get_temp_regvar PARAMS ((tree, tree));\n static tree dfs_initialize_vtbl_ptrs PARAMS ((tree, void *));\n-static tree build_default_init PARAMS ((tree));\n+static tree build_default_init PARAMS ((tree, tree));\n static tree build_new_1\tPARAMS ((tree));\n static tree get_cookie_size PARAMS ((tree));\n static tree build_dtor_call PARAMS ((tree, special_function_kind, int));\n@@ -159,12 +159,14 @@ initialize_vtbl_ptrs (addr)\n    that T is a scalar), or a CONSTRUCTOR (in the case that T is an\n    aggregate).  In either case, the value can be used as DECL_INITIAL\n    for a decl of the indicated TYPE; it is a valid static initializer.\n-   If STATIC_STORAGE_P is TRUE, initializers are only generated for\n-   entities for which zero-initialization does not simply mean filling\n-   the storage with zero bytes.  */\n+   If NELTS is non-NULL, and TYPE is an ARRAY_TYPE, NELTS is the\n+   number of elements in the array.  If STATIC_STORAGE_P is TRUE,\n+   initializers are only generated for entities for which\n+   zero-initialization does not simply mean filling the storage with\n+   zero bytes.  */\n \n tree\n-build_zero_init (tree type, bool static_storage_p)\n+build_zero_init (tree type, tree nelts, bool static_storage_p)\n {\n   tree init = NULL_TREE;\n \n@@ -217,6 +219,7 @@ build_zero_init (tree type, bool static_storage_p)\n \t  if (static_storage_p && !zero_init_p (TREE_TYPE (field)))\n \t    inits = tree_cons (field, \n \t\t\t       build_zero_init (TREE_TYPE (field),\n+\t\t\t\t\t\t/*nelts=*/NULL_TREE,\n \t\t\t\t\t\tstatic_storage_p),\n \t\t\t       inits);\n \n@@ -236,11 +239,13 @@ build_zero_init (tree type, bool static_storage_p)\n       init = build (CONSTRUCTOR, type, NULL_TREE, NULL_TREE);\n       /* Iterate over the array elements, building initializations.  */\n       inits = NULL_TREE;\n-      for (index = size_zero_node, max_index = array_type_nelts (type);\n+      max_index = nelts ? nelts : array_type_nelts (type);\n+      for (index = size_zero_node;\n \t   !tree_int_cst_lt (max_index, index);\n \t   index = size_binop (PLUS_EXPR, index, size_one_node))\n \tinits = tree_cons (index,\n-\t\t\t   build_zero_init (TREE_TYPE (type), \n+\t\t\t   build_zero_init (TREE_TYPE (type),\n+\t\t\t\t\t    /*nelts=*/NULL_TREE,\n \t\t\t\t\t    static_storage_p),\n \t\t\t   inits);\n       CONSTRUCTOR_ELTS (init) = nreverse (inits);\n@@ -257,14 +262,17 @@ build_zero_init (tree type, bool static_storage_p)\n   return init;\n }\n \n-/* Build an expression for the default-initialization of an object\n-   with type T.  If initialization T requires calling constructors,\n-   this function returns NULL_TREE; the caller is responsible for\n-   arranging for the constructors to be called.  */\n+/* Build an expression for the default-initialization of an object of\n+   the indicated TYPE.  If NELTS is non-NULL, and TYPE is an\n+   ARRAY_TYPE, NELTS is the number of elements in the array.  If\n+   initialization of TYPE requires calling constructors, this function\n+   returns NULL_TREE; the caller is responsible for arranging for the\n+   constructors to be called.  */\n \n static tree\n-build_default_init (type)\n+build_default_init (type, nelts)\n      tree type;\n+     tree nelts;\n {\n   /* [dcl.init]:\n \n@@ -298,7 +306,7 @@ build_default_init (type)\n       \n   /* At this point, TYPE is either a POD class type, an array of POD\n      classes, or something even more inoccuous.  */\n-  return build_zero_init (type, /*static_storage_p=*/false);\n+  return build_zero_init (type, nelts, /*static_storage_p=*/false);\n }\n \n /* Initialize MEMBER, a FIELD_DECL, with INIT, a TREE_LIST of\n@@ -364,7 +372,7 @@ perform_member_init (tree member, tree init)\n \t{\n \t  if (explicit)\n \t    {\n-\t      init = build_default_init (type);\n+\t      init = build_default_init (type, /*nelts=*/NULL_TREE);\n \t      if (TREE_CODE (type) == REFERENCE_TYPE)\n \t\twarning\n \t\t  (\"default-initialization of `%#D', which has reference type\",\n@@ -2367,7 +2375,7 @@ build_new_1 (exp)\n       init_expr = build_indirect_ref (alloc_node, NULL);\n \n       if (init == void_zero_node)\n-\tinit = build_default_init (full_type);\n+\tinit = build_default_init (full_type, nelts);\n       else if (init && pedantic && has_array)\n \tpedwarn (\"ISO C++ forbids initialization in array new\");\n "}, {"sha": "a4558790bbb59bf7b819fb70a5eb31acf33f9453", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=1cb8292f2ef25a34d7d9efa20ba615514599d900", "patch": "@@ -733,6 +733,7 @@ process_init_constructor (type, init, elts)\n \t    }\n \t  else if (! zero_init_p (TREE_TYPE (type)))\n \t    next1 = build_zero_init (TREE_TYPE (type),\n+\t\t\t\t     /*nelts=*/NULL_TREE,\n \t\t\t\t     /*static_storage_p=*/false);\n \t  else\n \t    /* The default zero-initialization is fine for us; don't\n@@ -851,6 +852,7 @@ process_init_constructor (type, init, elts)\n \n \t      if (! zero_init_p (TREE_TYPE (field)))\n \t\tnext1 = build_zero_init (TREE_TYPE (field),\n+\t\t\t\t\t /*nelts=*/NULL_TREE,\n \t\t\t\t\t /*static_storage_p=*/false);\n \t      else\n \t\t/* The default zero-initialization is fine for us; don't"}, {"sha": "ac2985ca824007f126f448d631068b794660fc4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cb8292f2ef25a34d7d9efa20ba615514599d900", "patch": "@@ -1,3 +1,8 @@\n+2003-02-28  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9879\n+\t* testsuite/g++.dg/init/new4.C: New test.\n+\n 2003-02-28  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* gcc.dg/arm-asm.c: Enable for StrongARM and XScale targets."}, {"sha": "ab2fe31314d9dbefa8e9a2446183d7f944639a69", "filename": "gcc/testsuite/g++.dg/init/new4.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb8292f2ef25a34d7d9efa20ba615514599d900/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew4.C?ref=1cb8292f2ef25a34d7d9efa20ba615514599d900", "patch": "@@ -0,0 +1 @@\n+int *x = new int [2] ();"}]}