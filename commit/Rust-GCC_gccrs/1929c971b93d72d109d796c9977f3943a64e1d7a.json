{"sha": "1929c971b93d72d109d796c9977f3943a64e1d7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyOWM5NzFiOTNkNzJkMTA5ZDc5NmM5OTc3ZjM5NDNhNjRlMWQ3YQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-03-18T22:25:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-03-18T22:25:50Z"}, "message": "calls.c (precompute_arguments): Do not assume that temporaries can be destroyed after expanding the argument.\n\n\t* calls.c (precompute_arguments): Do not assume that temporaries\n\tcan be destroyed after expanding the argument.\n\t(expand_call): Likewise.\n\nFrom-SVN: r51011", "tree": {"sha": "a61150ba3082d4f91fd8fd52b640fe7ad9a9343a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a61150ba3082d4f91fd8fd52b640fe7ad9a9343a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1929c971b93d72d109d796c9977f3943a64e1d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1929c971b93d72d109d796c9977f3943a64e1d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1929c971b93d72d109d796c9977f3943a64e1d7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1929c971b93d72d109d796c9977f3943a64e1d7a/comments", "author": null, "committer": null, "parents": [{"sha": "9d5e46be343e18f9798d68c52884a02c19cbc8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5e46be343e18f9798d68c52884a02c19cbc8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d5e46be343e18f9798d68c52884a02c19cbc8e0"}], "stats": {"total": 91, "additions": 80, "deletions": 11}, "files": [{"sha": "ecaedd0dec5a4e8d1014721389cb7b50dd349f42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1929c971b93d72d109d796c9977f3943a64e1d7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1929c971b93d72d109d796c9977f3943a64e1d7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1929c971b93d72d109d796c9977f3943a64e1d7a", "patch": "@@ -1,3 +1,9 @@\n+2002-03-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* calls.c (precompute_arguments): Do not assume that temporaries \n+\tcan be destroyed after expanding the argument.\n+\t(expand_call): Likewise.\n+\n 2002-03-15  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.md (movdf_internal2): Add two new move constraints."}, {"sha": "67715229b8d5db0454050fed370526405c6f84aa", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1929c971b93d72d109d796c9977f3943a64e1d7a/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1929c971b93d72d109d796c9977f3943a64e1d7a/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=1929c971b93d72d109d796c9977f3943a64e1d7a", "patch": "@@ -1511,14 +1511,9 @@ precompute_arguments (flags, num_actuals, args)\n \tif (TREE_ADDRESSABLE (TREE_TYPE (args[i].tree_value)))\n \t  abort ();\n \n-\tpush_temp_slots ();\n-\n \targs[i].value\n \t  = expand_expr (args[i].tree_value, NULL_RTX, VOIDmode, 0);\n \n-\tpreserve_temp_slots (args[i].value);\n-\tpop_temp_slots ();\n-\n \t/* ANSI doesn't require a sequence point here,\n \t   but PCC has one, so this will avoid some problems.  */\n \temit_queue ();\n@@ -2681,10 +2676,6 @@ expand_call (exp, target, ignore)\n       if (pass && (flags & ECF_LIBCALL_BLOCK))\n \tNO_DEFER_POP;\n \n-      /* Push the temporary stack slot level so that we can free any\n-\t temporaries we make.  */\n-      push_temp_slots ();\n-\n #ifdef FINAL_REG_PARM_STACK_SPACE\n       reg_parm_stack_space = FINAL_REG_PARM_STACK_SPACE (args_size.constant,\n \t\t\t\t\t\t\t args_size.var);\n@@ -3334,8 +3325,6 @@ expand_call (exp, target, ignore)\n       if ((flags & ECF_MAY_BE_ALLOCA) && nonlocal_goto_handler_slots != 0)\n \temit_stack_save (SAVE_NONLOCAL, &nonlocal_goto_stack_level, NULL_RTX);\n \n-      pop_temp_slots ();\n-\n       /* Free up storage we no longer need.  */\n       for (i = 0; i < num_actuals; ++i)\n \tif (args[i].aligned_regs)"}, {"sha": "ea2bcb376989c42868c3ef130193e70d7be8f5b6", "filename": "gcc/testsuite/g++.dg/opt/alias2.C", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1929c971b93d72d109d796c9977f3943a64e1d7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Falias2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1929c971b93d72d109d796c9977f3943a64e1d7a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Falias2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Falias2.C?ref=1929c971b93d72d109d796c9977f3943a64e1d7a", "patch": "@@ -0,0 +1,74 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" int printf (...);\n+\n+struct _Deque_iterator {\n+  int _M_cur;\n+  int x[2];\n+  int* _M_node;\n+\n+  _Deque_iterator() : _M_cur(0), _M_node(0) {}\n+  _Deque_iterator(const _Deque_iterator& __x)\n+    : _M_cur(__x._M_cur),\n+      _M_node(__x._M_node) {}\n+};\n+\n+class _Deque_base\n+{\n+public:\n+  int yy;\n+\n+  _Deque_base()\n+    : _M_start()\n+    { _M_initialize_map(); }\n+  ~_Deque_base();   \n+\n+  void _M_initialize_map();\n+  _Deque_iterator _M_start;\n+};\n+\n+\n+_Deque_base::~_Deque_base() {\n+  printf (\"bb %x %x\\n\", this, *_M_start._M_node);\n+}\n+\n+void\n+_Deque_base::_M_initialize_map()\n+{\n+  yy = 0x123;\n+  printf (\"aa %x %x\\n\", this, yy);\n+\n+  _M_start._M_node = &yy;\n+  _M_start._M_cur = yy;\n+}\n+\n+\n+class deque : protected _Deque_base\n+{\n+public:\n+  deque () {}\n+  deque(const deque& __x) {}\n+  ~deque() {\n+    _Deque_iterator i = _M_start;\n+  }\n+};\n+\n+\n+\n+class GeometryAddress {\n+public:\n+  GeometryAddress(deque addressStack) {}\n+};\n+\n+void yyy (const GeometryAddress& gb)\n+{\n+}\n+\n+deque temp1;\n+\n+int main()\n+{\n+  yyy (GeometryAddress (temp1));\n+  return 0;\n+}"}]}