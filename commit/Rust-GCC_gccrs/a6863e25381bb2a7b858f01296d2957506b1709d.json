{"sha": "a6863e25381bb2a7b858f01296d2957506b1709d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY4NjNlMjUzODFiYjJhN2I4NThmMDEyOTZkMjk1NzUwNmIxNzA5ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-10T23:50:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-10T23:50:39Z"}, "message": "Makefile.am (LIBSUPCXX_INCLUDES): Adjust.\n\n\n2000-10-10  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* Makefile.am (LIBSUPCXX_INCLUDES): Adjust.\n\t* libsupc++/include: Remove\n\t* libsupc++/include/*: Move to ...\n\t* libsupc++: Here.\n\t* libsupc++/Makefile.am (glibcppinstall_HEADERS): Install headers.\n\t(glibcppinstalldir): New.\n\n\t* src/Makefile.am (c_base_headers): New.\n\t(c_shadow_headers): New\n\t(c_headers): New.\n\t(myinstallheaders): Correct install issues.\n\t* src/Makefile.in: Regenerate.\n\n\t* Makefile.am (CSHADOW_INCLUDES): Simplify.\n\t* Makefile.in: Regenerate.\n\t* acinclude.m4 (GLIBCPP_ENABLE_SHADOW): Add c_include_dir.\n\t* aclocal.m4: Regenerate.\n\t* mkcheck.in (SRC_DIR): Use it.\n\n\t* include/bits/std_stdexcept.h: And here.\n\t* include/bits/std_ios.h: Change std_exception.h to exception.\n\t* src/locale.cc: And here.\n\t* src/locale-inst.cc: And here.\n\n\t* include/bits/valarray_array.h: And here.\n\t* include/bits/stl_alloc.h: And here.\n\t* include/bits/stl_algobase.h: And here.\n\t* include/bits/pthread_allocimpl.h: And here.\n\t* include/bits/stl_construct.h: Change to std_new.h to new.\n\n\t* include/bits/locale_facets.h: Change std_typeinfo.h to typeinfo.\n\n\t* src/Makefile.am (INCLUDES): Add LIBSUPCXX_INCLUDES.\n\t(headers): Remove duplicated headers.\n\t(std_headers): And here.\n\t* src/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am (LIBSUPCXX_INCLUDES): Remove.\n\t* libsupc++/Makefile.in: Regenerate.\n\t* Makefile.am (LIBSUPCXX_INCLUDES): Add here.\n\t(AM_MAKEFLAGS): And here.\n\t* Makefile.in: Regenerate.\n\t* include/bits/std_typeinfo.h: Remove.\n\t* include/bits/std_new.h: Remove\n\t* include/bits/std_exception.h: Remove.\n\t* std/new: Remove.\n\t* std/typeinfo: Remove.\n\t* std/exception: Remove.\n\n\t* libio/_G_config.h (__need_ptrdiff_t): Add.\n\n\t* libsupc++/include/new: Change stddef.h to cstddef.\n\t* libsupc++/tinfo.h: Change limits.h to climits.\n\t* libsupc++/pure.cc: Comment out _GNU_LIBRARY_ bits, as this\n\trenders the file uncompilable. Add copyright.\n\n\t* include/c_std/bits/std_cstddef.h: Don't bring wchar_t into std\n\tnamespace, as it is a fundamental type.\n\nFrom-SVN: r36833", "tree": {"sha": "2b0d68fe0d88e4667b60241906cee89a82313711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b0d68fe0d88e4667b60241906cee89a82313711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6863e25381bb2a7b858f01296d2957506b1709d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6863e25381bb2a7b858f01296d2957506b1709d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6863e25381bb2a7b858f01296d2957506b1709d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6863e25381bb2a7b858f01296d2957506b1709d/comments", "author": null, "committer": null, "parents": [{"sha": "6305f20ac3f877c5fa02793f7027273bafb9dd16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6305f20ac3f877c5fa02793f7027273bafb9dd16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6305f20ac3f877c5fa02793f7027273bafb9dd16"}], "stats": {"total": 2204, "additions": 1177, "deletions": 1027}, "files": [{"sha": "babc5bc9aa809e47dbdc21c0e498bd0aaeace990", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -1,3 +1,63 @@\n+2000-10-10  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* Makefile.am (LIBSUPCXX_INCLUDES): Adjust.\n+\t* libsupc++/include: Remove\n+\t* libsupc++/include/*: Move to ...\n+\t* libsupc++: Here.\n+\t* libsupc++/Makefile.am (glibcppinstall_HEADERS): Install headers.\n+\t(glibcppinstalldir): New.\n+\t\n+\t* src/Makefile.am (c_base_headers): New.\n+\t(c_shadow_headers): New\n+\t(c_headers): New.\n+\t(myinstallheaders): Correct install issues.\n+\t* src/Makefile.in: Regenerate.\n+\t\n+\t* Makefile.am (CSHADOW_INCLUDES): Simplify.\n+\t* Makefile.in: Regenerate.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_SHADOW): Add c_include_dir.\n+\t* aclocal.m4: Regenerate.\n+\t* mkcheck.in (SRC_DIR): Use it.\n+\t\n+\t* include/bits/std_stdexcept.h: And here.\n+\t* include/bits/std_ios.h: Change std_exception.h to exception.\n+\t* src/locale.cc: And here.\n+\t* src/locale-inst.cc: And here.\n+\t\n+\t* include/bits/valarray_array.h: And here.\n+\t* include/bits/stl_alloc.h: And here.\n+\t* include/bits/stl_algobase.h: And here.\n+\t* include/bits/pthread_allocimpl.h: And here.\n+\t* include/bits/stl_construct.h: Change to std_new.h to new.\n+\n+\t* include/bits/locale_facets.h: Change std_typeinfo.h to typeinfo.\n+\n+\t* src/Makefile.am (INCLUDES): Add LIBSUPCXX_INCLUDES.\n+\t(headers): Remove duplicated headers.\n+\t(std_headers): And here.\n+\t* src/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am (LIBSUPCXX_INCLUDES): Remove.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* Makefile.am (LIBSUPCXX_INCLUDES): Add here.\n+\t(AM_MAKEFLAGS): And here.\n+\t* Makefile.in: Regenerate.\n+\t* include/bits/std_typeinfo.h: Remove.\n+\t* include/bits/std_new.h: Remove\n+\t* include/bits/std_exception.h: Remove.\n+\t* std/new: Remove.\n+\t* std/typeinfo: Remove.\n+\t* std/exception: Remove.\n+\n+\t* libio/_G_config.h (__need_ptrdiff_t): Add.\n+\t\n+\t* libsupc++/include/new: Change stddef.h to cstddef.\n+\t* libsupc++/tinfo.h: Change limits.h to climits.\n+\t* libsupc++/pure.cc: Comment out _GNU_LIBRARY_ bits, as this\n+\trenders the file uncompilable. Add copyright.\n+\n+\t* include/c_std/bits/std_cstddef.h: Don't bring wchar_t into std\n+\tnamespace, as it is a fundamental type.\n+\n 2000-10-09  Richard Henderson  <rth@cygnus.com>\n \n \t* libsupc++/pure.cc: New file."}, {"sha": "530ccc36fd1322f766be7d33343abc0a42510d4e", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -53,7 +53,12 @@ CONFIG_CXXFLAGS = \\\n \n \n # Root level of the include sources.\n-GLIBCPP_INCLUDES = $(top_srcdir)/include\n+GLIBCPP_INCLUDE_DIR = $(top_srcdir)/include\n+\n+# Can either use include/c or include/c_std to grab \"C\" headers. This\n+# variable is set to the include directory currently in use.\n+C_INCLUDE_DIR = $(GLIBCPP_INCLUDE_DIR)/@c_include_dir@\n+\n \n # Passed down for cross compilers, canadian crosses.\n TOPLEVEL_INCLUDES = -I$(includedir)\n@@ -67,15 +72,12 @@ else\n LIBIO_INCLUDES = -I$(top_srcdir)/libio\n endif\n \n-# XXX may need to add this in later to enabled shadow header includes\n+LIBSUPCXX_INCLUDES = -I$(top_srcdir)/libsupc++\n+\n+# XXX May need to add this in later to enabled shadow header includes\n #\t-I$(top_builddir)/cshadow\n-if GLIBCPP_USE_CSHADOW\n CSHADOW_INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDES)/std -I$(GLIBCPP_INCLUDES)/c_std\n-else\n-CSHADOW_INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDES)/std -I$(GLIBCPP_INCLUDES)/c\n-endif\n+\t-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)\n \n \n # Use $(blddir) instead of $(top_builddir) for arguments to \"mkcheck\"\n@@ -176,9 +178,10 @@ AM_MAKEFLAGS = \\\n \t\"OPTIMIZE_CXXFLAGS=$(OPTIMIZE_CXXFLAGS)\" \\\n \t\"WARN_CXXFLAGS=$(WARN_CXXFLAGS)\" \\\n \t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \\\n-\t\"GLIBCPP_INCLUDES=$(GLIBCPP_INCLUDES)\" \\\n+\t\"GLIBCPP_INCLUDE_DIR=$(GLIBCPP_INCLUDE_DIR)\" \\\n+\t\"C_INCLUDE_DIR=$(C_INCLUDE_DIR)\" \\\n \t\"TOPLEVEL_INCLUDES=$(TOPLEVEL_INCLUDES)\" \\\n \t\"LIBMATH_INCLUDES=$(LIBMATH_INCLUDES)\" \\\n \t\"LIBIO_INCLUDES=$(LIBIO_INCLUDES)\" \\\n-\t\"CSHADOW_INCLUDES=$(CSHADOW_INCLUDES)\"\n-\n+\t\"CSHADOW_INCLUDES=$(CSHADOW_INCLUDES)\" \\\n+\t\"LIBSUPCXX_INCLUDES=$(LIBSUPCXX_INCLUDES)\""}, {"sha": "a69a41ebe79c8eee9fc74033d9619d8e8357e059", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -97,6 +97,7 @@ USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n+c_include_dir = @c_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -129,16 +130,25 @@ CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLA\n \n \n # Root level of the include sources.\n-GLIBCPP_INCLUDES = $(top_srcdir)/include\n+GLIBCPP_INCLUDE_DIR = $(top_srcdir)/include\n+\n+# Can either use include/c or include/c_std to grab \"C\" headers. This\n+# variable is set to the include directory currently in use.\n+C_INCLUDE_DIR = $(GLIBCPP_INCLUDE_DIR)/@c_include_dir@\n \n # Passed down for cross compilers, canadian crosses.\n TOPLEVEL_INCLUDES = -I$(includedir)\n \n LIBMATH_INCLUDES = -I$(top_srcdir)/libmath\n @GLIBCPP_NEED_LIBIO_TRUE@LIBIO_INCLUDES = \t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_INCLUDES = -I$(top_srcdir)/libio\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_INCLUDES = \t-I$(GLIBCPP_INCLUDES)/std -I$(GLIBCPP_INCLUDES)/c_std\n-@GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_INCLUDES = \t-I$(GLIBCPP_INCLUDES)/std -I$(GLIBCPP_INCLUDES)/c\n+\n+LIBSUPCXX_INCLUDES = -I$(top_srcdir)/libsupc++\n+\n+# XXX May need to add this in later to enabled shadow header includes\n+#\t-I$(top_builddir)/cshadow\n+CSHADOW_INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)\n+\n \n # Multilib support.\n MAKEOVERRIDES = \n@@ -154,7 +164,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \t\"OPTIMIZE_CXXFLAGS=$(OPTIMIZE_CXXFLAGS)\" \t\"WARN_CXXFLAGS=$(WARN_CXXFLAGS)\" \t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \t\"GLIBCPP_INCLUDES=$(GLIBCPP_INCLUDES)\" \t\"TOPLEVEL_INCLUDES=$(TOPLEVEL_INCLUDES)\" \t\"LIBMATH_INCLUDES=$(LIBMATH_INCLUDES)\" \t\"LIBIO_INCLUDES=$(LIBIO_INCLUDES)\" \t\"CSHADOW_INCLUDES=$(CSHADOW_INCLUDES)\"\n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \t\"OPTIMIZE_CXXFLAGS=$(OPTIMIZE_CXXFLAGS)\" \t\"WARN_CXXFLAGS=$(WARN_CXXFLAGS)\" \t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \t\"GLIBCPP_INCLUDE_DIR=$(GLIBCPP_INCLUDE_DIR)\" \t\"C_INCLUDE_DIR=$(C_INCLUDE_DIR)\" \t\"TOPLEVEL_INCLUDES=$(TOPLEVEL_INCLUDES)\" \t\"LIBMATH_INCLUDES=$(LIBMATH_INCLUDES)\" \t\"LIBIO_INCLUDES=$(LIBIO_INCLUDES)\" \t\"CSHADOW_INCLUDES=$(CSHADOW_INCLUDES)\" \t\"LIBSUPCXX_INCLUDES=$(LIBSUPCXX_INCLUDES)\"\n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}, {"sha": "2df0986bdd83a78050a300462ccfd0cf90638d06", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -1478,13 +1478,16 @@ changequote([, ])\n     yes) \n \tCSHADOWFLAGS=\"-fno-builtin\"\n         AC_DEFINE(_GLIBCPP_USE_SHADOW_HEADERS)\n+\tc_include_dir=c_std\n \t;;\n     no)   \n \tCSHADOWFLAGS=\"\"\n+\tc_include_dir=c\n         ;;\n   esac\n \n   AC_SUBST(CSHADOWFLAGS)\n+  AC_SUBST(c_include_dir)\n   AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cshadow_headers\" = yes)\n ])\n "}, {"sha": "fd7099a65b7cf571c09d65462bf782c90ef5b673", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -1490,13 +1490,16 @@ changequote([, ])\n     yes) \n \tCSHADOWFLAGS=\"-fno-builtin\"\n         AC_DEFINE(_GLIBCPP_USE_SHADOW_HEADERS)\n+\tc_include_dir=c_std\n \t;;\n     no)   \n \tCSHADOWFLAGS=\"\"\n+\tc_include_dir=c\n         ;;\n   esac\n \n   AC_SUBST(CSHADOWFLAGS)\n+  AC_SUBST(c_include_dir)\n   AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cshadow_headers\" = yes)\n ])\n "}, {"sha": "71f4b5bbf2ad13b21f4e625a5b26ddfa56745db7", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 912, "deletions": 908, "changes": 1820, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a6863e25381bb2a7b858f01296d2957506b1709d"}, {"sha": "6f4ae6a23da7d76ec5d410008c95254d6ad7a90f", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -37,7 +37,7 @@\n #define _CPP_BITS_LOCFACETS_H\t1\n \n #include <bits/std_ctime.h>\t// For struct tm\n-#include <bits/std_typeinfo.h> \t// For bad_cast, which shouldn't be here.\n+#include <typeinfo> \t\t// For bad_cast, which shouldn't be here.\n #include <bits/std_ios.h>\t// For ios_base\n #include <bits/std_cwctype.h>\t// For wctype_t\n "}, {"sha": "dd99150b2c7740ead065c3ddcda1e6b9ac6ab824", "filename": "libstdc++-v3/include/bits/pthread_allocimpl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -35,7 +35,7 @@\n #endif\n \n #ifndef __STL_NO_BAD_ALLOC\n-#  include <bits/std_new.h>\n+#  include <new>\n #endif\n \n __STL_BEGIN_NAMESPACE"}, {"sha": "7fba3d75b2e10b6bc9768c774c912c1e54169f64", "filename": "libstdc++-v3/include/bits/std_ios.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -35,7 +35,7 @@\n #define _CPP_IOS\t1\n \n #include <bits/std_iosfwd.h>\n-#include <bits/std_exception.h> // For ios_base::failure\n+#include <exception> \t\t// For ios_base::failure\n #include <bits/char_traits.h> \t// For char_traits, streamoff, streamsize, fpos\n #include <bits/stl_string_fwd.h>// For string.\n #include <bits/std_cstdio.h> \t// For SEEK_SET, SEEK_CUR, SEEK_END"}, {"sha": "05b351116cd18f44f36ff5dc275ae66724f4fb8e", "filename": "libstdc++-v3/include/bits/std_stdexcept.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stdexcept.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -14,7 +14,7 @@\n #ifndef _CPP_STDEXCEPT\n #define _CPP_STDEXCEPT 1\n \n-#include <bits/std_exception.h>\n+#include <exception>\n \n #if defined(__STL_USE_EXCEPTIONS) || \\\n     !(defined(_MIPS_SIM) && defined(_ABIO32) && _MIPS_SIM == _ABIO32)"}, {"sha": "5a8a576e97f6534138449b6b39df3716cc92504d", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -44,7 +44,7 @@\n #include <bits/std_climits.h>\n #include <bits/std_cstdlib.h>\n #include <bits/std_cstddef.h>\n-#include <bits/std_new.h>\n+#include <new>\n \n #ifdef __STL_USE_NEW_IOSTREAMS \n #include <iosfwd>"}, {"sha": "c8332167f017372c0c44725e33f42eb26384dda5", "filename": "libstdc++-v3/include/bits/stl_alloc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -44,7 +44,7 @@\n #    include <bits/std_cstdlib.h>\n #    define __THROW_BAD_ALLOC fprintf(stderr, \"out of memory\\n\"); exit(1)\n #  else /* Standard conforming out-of-memory handling */\n-#    include <bits/std_new.h>\n+#    include <new>\n #    define __THROW_BAD_ALLOC throw std::bad_alloc()\n #  endif\n #endif"}, {"sha": "c23b77ea993a77bdc18b2b97d3c768000257ce41", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -31,7 +31,7 @@\n #ifndef _CPP_BITS_STL_CONSTRUCT_H\n #define _CPP_BITS_STL_CONSTRUCT_H 1\n \n-#include <bits/std_new.h>\n+#include <new>\n \n __STL_BEGIN_NAMESPACE\n "}, {"sha": "a97bec9856f4d5df43cc8b7a24f844181c763c7e", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -36,7 +36,7 @@\n #include <bits/cpp_type_traits.h>\n #include <bits/std_cstdlib.h>\n #include <bits/std_cstring.h>\n-#include <bits/std_new.h>\n+#include <new>\n \n namespace std\n {"}, {"sha": "a0c1f2c0194744bf5d0d2e4d224dd275b6647a59", "filename": "libstdc++-v3/include/c_std/bits/std_cstddef.h", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstddef.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -47,12 +47,8 @@ namespace _C_legacy {\n #   define _IN_C_LEGACY_\n #   pragma GCC system_header\n \n-    // XXX\n-    // glibc 2.1.x time.h is on crack\n-#   define __need_wchar_t\n-#   define __need_ptrdiff_t\n-#   define __need_size_t\n-\n+//#   define __need_ptrdiff_t\n+//#   define __need_size_t\n #   include_next <stddef.h>\n   }\n } // namespace _C_legacy\n@@ -64,7 +60,6 @@ namespace _C_legacy {\n namespace std {\n   using _C_legacy::ptrdiff_t;\n   using _C_legacy::size_t;\n-  using _C_legacy::wchar_t;\n } // namespace std\n   \n # undef _IN_C_LEGACY_\n@@ -73,7 +68,11 @@ namespace std {\n   // some names and types with the std:: C++ version.\n   using std::ptrdiff_t;\n   using std::size_t;\n-  using std::wchar_t;\n+\n+  // 3.9.1 Fundamental Types\n+  // p 5\n+  // wchar_t is a fundamental type\n+  // using std::wchar_t;\n \n # ifdef _STDDEF_NEED_C_LEGACY_\n   // dive back into the \"swamp\""}, {"sha": "99ff6977303703f582319b0c57ab7e39ba25073a", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -1,3 +1,7 @@\n+2000-10-10  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* _G_config.h (__need_ptrdiff_t): Add.\n+\n 2000-10-08  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* Makefile.am (INCLUDES): Simplify."}, {"sha": "a5544d2f262caf57963dea47eafa899270f56f35", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -28,7 +28,7 @@ noinst_LTLIBRARIES = libio.la\n \n INCLUDES = \\\n \t-nostdinc++ \\\n-\t-I$(top_builddir) -I$(GLIBCPP_INCLUDES) \\\n+\t-I$(top_builddir) -I$(GLIBCPP_INCLUDE_DIR) \\\n \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n libio_headers = \\"}, {"sha": "0a6397acfb5511e3c7e20a59f9da4fcd3ad49067", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -97,6 +97,7 @@ USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n+c_include_dir = @c_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -105,7 +106,7 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libio.la\n \n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir) -I$(GLIBCPP_INCLUDES) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n libio_headers =          libio.h libioP.h iolibio.h"}, {"sha": "2cdeee358e97e6b530811284dabbcf80021f9c6e", "filename": "libstdc++-v3/libio/_G_config.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibio%2F_G_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2F_G_config.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -16,6 +16,7 @@\n #define __need_wchar_t\n #define __need_wint_t\n #define __need_NULL\n+#define __need_ptrdiff_t\n #ifdef __cplusplus\n # include <cstddef>\n #else"}, {"sha": "6b89b8b5494acc0e3a825dd8c897241b346889fc", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -50,7 +50,7 @@ libmath_la_SOURCES = \\\n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n \n-INCLUDES = -I$(GLIBCPP_INCLUDES) $(TOPLEVEL_INCLUDES)\n+INCLUDES = -I$(GLIBCPP_INCLUDE_DIR) $(TOPLEVEL_INCLUDES)\n \n \n "}, {"sha": "d5e7c9c789222a75652e0828ecb2f5a1fdf67981", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -97,6 +97,7 @@ USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n+c_include_dir = @c_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -121,7 +122,7 @@ libmath_la_SOURCES =  \tsignbit.c signbitf.c cabs.c cabsf.c\n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n \n-INCLUDES = -I$(GLIBCPP_INCLUDES) $(TOPLEVEL_INCLUDES)\n+INCLUDES = -I$(GLIBCPP_INCLUDE_DIR) $(TOPLEVEL_INCLUDES)\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "1f4f9e4c0e6e365234307535fb1412d228c210c8", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -42,19 +42,13 @@ toolexeclib_LTLIBRARIES = libsupc++.la\n noinst_LTLIBRARIES = libsupc++convenience.la\n \n \n-LIBSUPCXX_INCLUDES = -I$(top_srcdir)/libsupc++/include\n-\n INCLUDES = \\\n \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \\\n-\t$(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDES) \\\n+\t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n \t$(CONFIG_INCLUDES) -I$(top_builddir)\n \n headers = \\\n-\tinclude/cxxabi.h \\\n-\tinclude/exception \\\n-\tinclude/new \\\n-\tinclude/new.h \\\n-\tinclude/typeinfo\n+\tcxxabi.h exception new new.h typeinfo\n \n sources = \\\n \tdel_op.cc \\\n@@ -75,6 +69,10 @@ sources = \\\n libsupc___la_SOURCES = $(sources)\n libsupc__convenience_la_SOURCES = $(sources)\n \n+# This insanely simple bit of install magic courtesy of Mr. Tromey.\n+glibcppinstalldir= $(prefix)/include/g++-v3\n+glibcppinstall_HEADERS = $(headers)\n+\n # Flags to force separate libtool library to be static only.\n LIBTOOL = @LIBTOOL@ --tag disable-shared\n LIBSUPCXX_CXXFLAGS = -prefer-pic"}, {"sha": "747823211112b34473178dbfb424388ae1ed38ca", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -96,6 +96,7 @@ USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n+c_include_dir = @c_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -113,12 +114,10 @@ toolexeclib_LTLIBRARIES = libsupc++.la\n # 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n noinst_LTLIBRARIES = libsupc++convenience.la\n \n-LIBSUPCXX_INCLUDES = -I$(top_srcdir)/libsupc++/include\n+INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(CONFIG_INCLUDES) -I$(top_builddir)\n \n-INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDES) \t$(CONFIG_INCLUDES)\t-I$(top_builddir)\n \n-\n-headers =  \tinclude/cxxabi.h \tinclude/exception \tinclude/new \tinclude/new.h \tinclude/typeinfo\n+headers =  \tcxxabi.h exception new new.h typeinfo\n \n \n sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n@@ -127,6 +126,10 @@ sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception.cc \tnew_\n libsupc___la_SOURCES = $(sources)\n libsupc__convenience_la_SOURCES = $(sources)\n \n+# This insanely simple bit of install magic courtesy of Mr. Tromey.\n+glibcppinstalldir = $(prefix)/include/g++-v3\n+glibcppinstall_HEADERS = $(headers)\n+\n # Flags to force separate libtool library to be static only.\n LIBTOOL = @LIBTOOL@ --tag disable-shared\n LIBSUPCXX_CXXFLAGS = -prefer-pic\n@@ -177,6 +180,8 @@ exception.lo new_handler.lo new_op.lo new_opnt.lo new_opv.lo \\\n new_opvnt.lo pure.lo tinfo.lo tinfo2.lo vec.lo\n CXXFLAGS = @CXXFLAGS@\n CXXLD = $(CXX)\n+HEADERS =  $(glibcppinstall_HEADERS)\n+\n DIST_COMMON =  Makefile.am Makefile.in configure configure.in\n \n \n@@ -288,6 +293,21 @@ libsupc++.la: $(libsupc___la_OBJECTS) $(libsupc___la_DEPENDENCIES)\n .cc.lo:\n \t$(LTCXXCOMPILE) -c $<\n \n+install-glibcppinstallHEADERS: $(glibcppinstall_HEADERS)\n+\t@$(NORMAL_INSTALL)\n+\t$(mkinstalldirs) $(DESTDIR)$(glibcppinstalldir)\n+\t@list='$(glibcppinstall_HEADERS)'; for p in $$list; do \\\n+\t  if test -f \"$$p\"; then d= ; else d=\"$(srcdir)/\"; fi; \\\n+\t  echo \" $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcppinstalldir)/$$p\"; \\\n+\t  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(glibcppinstalldir)/$$p; \\\n+\tdone\n+\n+uninstall-glibcppinstallHEADERS:\n+\t@$(NORMAL_UNINSTALL)\n+\tlist='$(glibcppinstall_HEADERS)'; for p in $$list; do \\\n+\t  rm -f $(DESTDIR)$(glibcppinstalldir)/$$p; \\\n+\tdone\n+\n tags: TAGS\n \n ID: $(HEADERS) $(SOURCES) $(LISP)\n@@ -345,20 +365,22 @@ install-info: install-info-am\n install-exec-am: install-toolexeclibLTLIBRARIES\n install-exec: install-exec-am\n \n-install-data-am:\n+install-data-am: install-glibcppinstallHEADERS\n install-data: install-data-am\n \n install-am: all-am\n \t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n install: install-am\n-uninstall-am: uninstall-toolexeclibLTLIBRARIES\n+uninstall-am: uninstall-toolexeclibLTLIBRARIES \\\n+\t\tuninstall-glibcppinstallHEADERS\n uninstall: uninstall-am\n-all-am: Makefile $(LTLIBRARIES)\n+all-am: Makefile $(LTLIBRARIES) $(HEADERS)\n all-redirect: all-am\n install-strip:\n \t$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install\n installdirs:\n-\t$(mkinstalldirs)  $(DESTDIR)$(toolexeclibdir)\n+\t$(mkinstalldirs)  $(DESTDIR)$(toolexeclibdir) \\\n+\t\t$(DESTDIR)$(glibcppinstalldir)\n \n \n mostlyclean-generic:\n@@ -408,12 +430,13 @@ clean-toolexeclibLTLIBRARIES maintainer-clean-toolexeclibLTLIBRARIES \\\n uninstall-toolexeclibLTLIBRARIES install-toolexeclibLTLIBRARIES \\\n mostlyclean-compile distclean-compile clean-compile \\\n maintainer-clean-compile mostlyclean-libtool distclean-libtool \\\n-clean-libtool maintainer-clean-libtool tags mostlyclean-tags \\\n-distclean-tags clean-tags maintainer-clean-tags distdir info-am info \\\n-dvi-am dvi check check-am installcheck-am installcheck install-info-am \\\n-install-info install-exec-am install-exec install-data-am install-data \\\n-install-am install uninstall-am uninstall all-redirect all-am all \\\n-installdirs mostlyclean-generic distclean-generic clean-generic \\\n+clean-libtool maintainer-clean-libtool uninstall-glibcppinstallHEADERS \\\n+install-glibcppinstallHEADERS tags mostlyclean-tags distclean-tags \\\n+clean-tags maintainer-clean-tags distdir info-am info dvi-am dvi check \\\n+check-am installcheck-am installcheck install-info-am install-info \\\n+install-exec-am install-exec install-data-am install-data install-am \\\n+install uninstall-am uninstall all-redirect all-am all installdirs \\\n+mostlyclean-generic distclean-generic clean-generic \\\n maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n "}, {"sha": "c217d8aac5a6317e641e9fe8b4904eab2289ae35", "filename": "libstdc++-v3/libsupc++/pure.cc", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fpure.cc?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -1,16 +1,45 @@\n+// -*- C++ -*- \n+// Copyright (C) 2000 Free Software Foundation\n+//\n+// This file is part of GNU CC.\n+//\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n #include <bits/c++config.h>\n \n #ifdef _GLIBCPP_HAVE_UNISTD_H\n-#include <unistd.h>\n-#define writestr(str)\twrite(2, str, sizeof(str) - 1)\n-#ifdef __GNU_LIBRARY__\n+# include <unistd.h>\n+# define writestr(str)\twrite(2, str, sizeof(str) - 1)\n+# ifdef __GNU_LIBRARY__\n   /* Avoid forcing the library's meaning of `write' on the user program\n      by using the \"internal\" name (for use within the library).  */\n-#define write(fd, buf, n)\t__write((fd), (buf), (n))\n-#endif\n+/*#  define write(fd, buf, n)\t__write((fd), (buf), (n))*/\n+# endif\n #else\n-#include <stdio.h>\n-#define writestr(str)\tfputs(str, stderr)\n+# include <stdio.h>\n+# define writestr(str)\tfputs(str, stderr)\n #endif\n \n extern \"C\" {"}, {"sha": "5ff6418e6270ad3113bd50a3b7db7c7ba59a0316", "filename": "libstdc++-v3/libsupc++/tinfo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.h?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -175,7 +175,7 @@ class __si_type_info : public __user_type_info {\n \n // type_info for a general class.\n \n-#include <limits.h>\n+#include <climits>\n \n #if INT_MAX == 2147483647\n typedef int myint32;"}, {"sha": "1649698d616d79ab803568aea3504ea623a41ff1", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -56,7 +56,8 @@ fi\n # INC_PATH == include path to new headers for use on gcc command-line\n if [ $WHICH != \"1\" ]; then\n   INC_PATH=\"@CSHADOWFLAGS@ -I$BUILD_DIR -I$BUILD_DIR/libio \\\n-    -I$SRC_DIR/include/std -I$SRC_DIR/include -I$SRC_DIR/libio \\\n+    -I$SRC_DIR/include/std  -I$SRC_DIR/include/@c_include_dir@ \\\n+    -I$SRC_DIR/include -I$SRC_DIR/libsupc++/include -I$SRC_DIR/libio \\\n     -I$SRC_DIR/testsuite\"\n elif [ $WHICH -eq 1 ]; then\n   INC_PATH=\"-I$SRC_DIR/testsuite\""}, {"sha": "5b4ec253d1f1bd1f5a1145e611e79dda3e11e42d", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 43, "deletions": 44, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.36 2000/10/07 18:54:08 bkoz Exp $\n+## $Id: Makefile.am,v 1.37 2000/10/09 08:55:06 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -41,28 +41,20 @@ EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n \n INCLUDES = \\\n-\t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \\\n-\t-I$(top_builddir) -I$(GLIBCPP_INCLUDES) \\\n-\t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \\\n+\t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir) \\\n \t$(TOPLEVEL_INCLUDES)\t\n \n-headers = \\\n-\tbits/std_cctype.h \\\n+base_headers = \\\n \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n \tbits/basic_string.h bits/std_string.h  bits/string.tcc \\\n \tbits/generic_shadow.h bits/std_utility.h \\\n \tbits/std_complex.h \\\n \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/std_cassert.h bits/std_cwctype.h \\\n-\tbits/std_cerrno.h bits/std_cfloat.h bits/std_climits.h \\\n-\tbits/std_clocale.h bits/std_cmath.h \\\n-\tbits/std_csetjmp.h bits/std_csignal.h bits/std_cstdarg.h \\\n-\tbits/std_cstddef.h bits/std_cstdio.h bits/std_cstdlib.h \\\n-\tbits/std_cstring.h bits/std_ctime.h bits/std_cwchar.h \\\n-\tbits/std_typeinfo.h bits/std_new.h \\\n-\tbits/std_exception.h bits/exception_support.h \\\n+\tbits/exception_support.h \\\n \tbits/std_fstream.h bits/std_iomanip.h \\\n \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n@@ -102,34 +94,38 @@ headers = \\\n \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \\\n \text/stl_hashtable.h ext/stl_hash_fun.h \\\n \text/hash_map ext/hash_set ext/rope ext/slist \\\n-\text/tree ext/bvector \\\n-\tshadow/assert.h shadow/ctype.h shadow/errno.h shadow/float.h \\\n-\tshadow/fcntl.h shadow/libio.h shadow/iolibio.h shadow/libioP.h \\\n-\tshadow/limits.h shadow/locale.h shadow/math.h shadow/setjmp.h \\\n-\tshadow/signal.h shadow/stdarg.h shadow/stddef.h shadow/stdio.h \\\n-\tshadow/stdlib.h shadow/string.h shadow/time.h \\\n-\tshadow/pthread.h shadow/iconv.h shadow/wchar.h shadow/wctype.h \\\n-\tshadow/bits/std_cassert.h shadow/bits/std_cctype.h \\\n-\tshadow/bits/std_cerrno.h shadow/bits/std_cfloat.h \\\n-\tshadow/bits/std_climits.h shadow/bits/std_clocale.h \\\n-\tshadow/bits/std_cmath.h shadow/bits/std_csetjmp.h \\\n-\tshadow/bits/std_csignal.h shadow/bits/std_cstdarg.h \\\n-\tshadow/bits/std_cstddef.h shadow/bits/std_cstdio.h \\\n-\tshadow/bits/std_cstdlib.h shadow/bits/std_cstring.h \\\n-\tshadow/bits/std_ctime.h shadow/bits/std_cwchar.h \\\n-\tshadow/bits/std_cwctype.h \\\n-\tshadow/bits/wrap_libio.h shadow/bits/wrap_iolibio.h \\\n-\tshadow/bits/wrap_libioP.h shadow/bits/wrap_iconv.h \\\n-\tshadow/bits/wrap_fcntl.h shadow/bits/wrap_pthread.h \\\n-\tshadow/sys/cdefs.h \n+\text/tree ext/bvector \n+\n+c_base_headers = \\\n+\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n+\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n+\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n+\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n+\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n+\tbits/std_cwchar.h bits/std_cwctype.h \n+\n+c_shadow_headers = \\\n+\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n+\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n+\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n+\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n+\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n+\tsys/cdefs.h \n+\n+if GLIBCPP_USE_CSHADOW\n+c_headers = $(c_base_headers) $(c_shadow_headers)\n+else\n+c_headers = $(c_base_headers)\n+endif\n \n std_headers = \\\n-\talgorithm bitset cassert cctype cerrno cfloat climits clocale ciso646 \\\n-\tcmath complex csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n-\tcstring ctime cwchar cwctype deque exception fstream functional \\\n+\talgorithm bitset complex deque fstream functional \\\n \tiomanip ios iosfwd iostream istream iterator limits list locale \\\n-\tmap memory new numeric ostream queue set sstream stack stdexcept \\\n-\tstreambuf string strstream typeinfo utility valarray vector \n+\tmap memory numeric ostream queue set sstream stack stdexcept \\\n+\tstreambuf string strstream utility valarray vector \\\n+\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n+\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n+\tcstring ctime cwchar cwctype\n \n if GLIBCPP_NEED_LIBIO \n libio_headers = \\\n@@ -141,10 +137,13 @@ endif\n build_headers = \\\n \t$(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \\\n \t$(top_builddir)/bits/c++io.h $(top_builddir)/bits/c++threads.h \\\n-\t$(top_builddir)/bits/atomicity.h $(top_builddir)/bits/ctype_base.h \\\n+\t$(top_builddir)/bits/atomicity.h $(top_builddir)/bits/os_defines.h \\\n+\t$(top_builddir)/bits/ctype_base.h \\\n \t$(top_builddir)/bits/ctype_noninline.h \\\n \t$(top_builddir)/bits/ctype_inline.h \n \n+headers = $(base_headers) $(c_headers)\n+\n sources = \\\n \tlimitsMEMBERS.cc \\\n \tcmath.cc \\\n@@ -158,8 +157,8 @@ wstring_sources = \\\n \twstring-inst.cc\n \n VPATH += $(top_srcdir) $(top_srcdir)/src\n-VPATH += $(GLIBCPP_INCLUDES) $(top_srcdir)/std\n-\n+VPATH += $(GLIBCPP_INCLUDE_DIR) \n+VPATH += $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n # Actual sources for the distro, but don't build these.\n #EXTRA_sources = string-inst.cc \n@@ -208,8 +207,8 @@ install: myinstallheaders\n myinstallheaders: $(headers:%=$(myincludep)%)\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(std_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $(GLIBCPP_INCLUDES)/std/$$i $(myincludep)\"; \\\n-\t        $(INSTALL_DATA) $(GLIBCPP_INCLUDES)/std/$$i $(myincludep); \\\n+\t  echo \"$(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep)\";\\\n+\t        $(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n \t  echo \"$(INSTALL_DATA) $$i $(myincludep)bits/\"; \\"}, {"sha": "5aaeb1b84268c968836d2c75d07cfeae59e8b2ae", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -96,6 +96,7 @@ USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n+c_include_dir = @c_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -109,26 +110,36 @@ MAINT_CHARSET = latin1\n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n-INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ $(CSHADOW_INCLUDES) \t-I$(top_builddir) -I$(GLIBCPP_INCLUDES) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir) \t$(TOPLEVEL_INCLUDES)\t\n \n \n-headers =  \tbits/std_cctype.h \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_cassert.h bits/std_cwctype.h \tbits/std_cerrno.h bits/std_cfloat.h bits/std_climits.h \tbits/std_clocale.h bits/std_cmath.h \tbits/std_csetjmp.h bits/std_csignal.h bits/std_cstdarg.h \tbits/std_cstddef.h bits/std_cstdio.h bits/std_cstdlib.h \tbits/std_cstring.h bits/std_ctime.h bits/std_cwchar.h \tbits/std_typeinfo.h bits/std_new.h \tbits/std_exception.h bits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \tshadow/assert.h shadow/ctype.h shadow/errno.h shadow/float.h \tshadow/fcntl.h shadow/libio.h shadow/iolibio.h shadow/libioP.h \tshadow/limits.h shadow/locale.h shadow/math.h shadow/setjmp.h \tshadow/signal.h shadow/stdarg.h shadow/stddef.h shadow/stdio.h \tshadow/stdlib.h shadow/string.h shadow/time.h \tshadow/pthread.h shadow/iconv.h shadow/wchar.h shadow/wctype.h \tshadow/bits/std_cassert.h shadow/bits/std_cctype.h \tshadow/bits/std_cerrno.h shadow/bits/std_cfloat.h \tshadow/bits/std_climits.h shadow/bits/std_clocale.h \tshadow/bits/std_cmath.h shadow/bits/std_csetjmp.h \tshadow/bits/std_csignal.h shadow/bits/std_cstdarg.h \tshadow/bits/std_cstddef.h shadow/bits/std_cstdio.h \tshadow/bits/std_cstdlib.h shadow/bits/std_cstring.h \tshadow/bits/std_ctime.h shadow/bits/std_cwchar.h \tshadow/bits/std_cwctype.h \tshadow/bits/wrap_libio.h shadow/bits/wrap_iolibio.h \tshadow/bits/wrap_libioP.h shadow/bits/wrap_iconv.h \tshadow/bits/wrap_fcntl.h shadow/bits/wrap_pthread.h \tshadow/sys/cdefs.h \n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n \n \n-std_headers =  \talgorithm bitset cassert cctype cerrno cfloat climits clocale ciso646 \tcmath complex csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype deque exception fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory new numeric ostream queue set sstream stack stdexcept \tstreambuf string strstream typeinfo utility valarray vector \n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h \n+\n+\n+c_shadow_headers =  \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tsys/cdefs.h \n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_headers = $(c_base_headers) $(c_shadow_headers)\n+@GLIBCPP_USE_CSHADOW_FALSE@c_headers = $(c_base_headers)\n+\n+std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string strstream utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n \n @GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers =  \t$(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \t$(top_builddir)/bits/c++io.h $(top_builddir)/bits/c++threads.h \t$(top_builddir)/bits/atomicity.h $(top_builddir)/bits/ctype_base.h \t$(top_builddir)/bits/ctype_noninline.h \t$(top_builddir)/bits/ctype_inline.h \n+build_headers =  \t$(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \t$(top_builddir)/bits/c++io.h $(top_builddir)/bits/c++threads.h \t$(top_builddir)/bits/atomicity.h $(top_builddir)/bits/os_defines.h \t$(top_builddir)/bits/ctype_base.h \t$(top_builddir)/bits/ctype_noninline.h \t$(top_builddir)/bits/ctype_inline.h \n+\n \n+headers = $(base_headers) $(c_headers)\n \n sources =  \tlimitsMEMBERS.cc \tcmath.cc \tcomplex.cc complexf.cc complexl.cc complex_io.cc \tstdexcept.cc \tc++io.cc ios.cc stdstreams.cc strstream.cc \tlocale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n wstring_sources =  \twstring-inst.cc\n \n-VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDES) $(top_srcdir)/std\n+VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n # Actual sources for the distro, but don't build these.\n #EXTRA_sources = string-inst.cc \n@@ -439,8 +450,8 @@ install: myinstallheaders\n myinstallheaders: $(headers:%=$(myincludep)%)\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(std_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $(GLIBCPP_INCLUDES)/std/$$i $(myincludep)\"; \\\n-\t        $(INSTALL_DATA) $(GLIBCPP_INCLUDES)/std/$$i $(myincludep); \\\n+\t  echo \"$(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep)\";\\\n+\t        $(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n \t  echo \"$(INSTALL_DATA) $$i $(myincludep)bits/\"; \\"}, {"sha": "a0a1d63f30d19dd6410c93b81cf74082aabfa24c", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -35,7 +35,7 @@\n #include <bits/std_cstring.h>\n #include <bits/std_cassert.h>\n #include <bits/std_limits.h>\n-#include <bits/std_exception.h>\n+#include <exception>\n #include <bits/std_stdexcept.h>\n #include <bits/std_locale.h>\n #include <bits/locale_facets.tcc>"}, {"sha": "9049e09f0ede15ff810d54abe9693cd87ab776cf", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6863e25381bb2a7b858f01296d2957506b1709d/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=a6863e25381bb2a7b858f01296d2957506b1709d", "patch": "@@ -30,7 +30,7 @@\n #include <bits/std_cassert.h>\n #include <bits/std_cctype.h>\n #include <bits/std_limits.h>\n-#include <bits/std_exception.h>\n+#include <exception>\n #include <bits/std_stdexcept.h>\n #include <bits/std_locale.h>\n #include <bits/std_istream.h>"}]}