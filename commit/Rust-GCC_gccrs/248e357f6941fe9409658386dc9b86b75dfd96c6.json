{"sha": "248e357f6941fe9409658386dc9b86b75dfd96c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ4ZTM1N2Y2OTQxZmU5NDA5NjU4Mzg2ZGM5Yjg2Yjc1ZGZkOTZjNg==", "commit": {"author": {"name": "Fei Yang", "email": "felix.yang@huawei.com", "date": "2020-05-11T14:18:47Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-11T14:18:47Z"}, "message": "aarch64: Fix ICE when expanding scalar floating move with -mgeneral-regs-only. [PR94991]\n\nIn the testcase for PR94991, we are doing FAIL for scalar floating move expand\npattern since TARGET_FLOAT is false with option -mgeneral-regs-only. But move\nexpand pattern cannot fail. It would be better to replace the FAIL with code\nthat bitcasts to the equivalent integer mode using gen_lowpart.\n\n2020-05-11  Felix Yang  <felix.yang@huawei.com>\n\ngcc/\n\tPR target/94991\n\t* config/aarch64/aarch64.md (mov<mode>):\n\tBitcasts to the equivalent integer mode using gen_lowpart\n\tinstead of doing FAIL for scalar floating point move.\n\ngcc/testsuite/\n\tPR target/94991\n\t* gcc.target/aarch64/mgeneral-regs_5.c: New test.", "tree": {"sha": "86b3702b8559afab5603438ccf0436c89bf5d12e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86b3702b8559afab5603438ccf0436c89bf5d12e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/248e357f6941fe9409658386dc9b86b75dfd96c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248e357f6941fe9409658386dc9b86b75dfd96c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248e357f6941fe9409658386dc9b86b75dfd96c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248e357f6941fe9409658386dc9b86b75dfd96c6/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d572ad49217c09ca09e382774fdc6c407db4fc20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d572ad49217c09ca09e382774fdc6c407db4fc20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d572ad49217c09ca09e382774fdc6c407db4fc20"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "ae022d5cf52e94706710e4cfcdbbdc773a6ed977", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e357f6941fe9409658386dc9b86b75dfd96c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e357f6941fe9409658386dc9b86b75dfd96c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=248e357f6941fe9409658386dc9b86b75dfd96c6", "patch": "@@ -1,3 +1,10 @@\n+2020-05-11  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR target/94991\n+\t* config/aarch64/aarch64.md (mov<mode>):\n+\tBitcasts to the equivalent integer mode using gen_lowpart\n+\tinstead of doing FAIL for scalar floating point move.\n+\n 2020-05-11  Alex Coplan  <alex.coplan@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_if_then_else_costs): Add case"}, {"sha": "deca0004fedcb41c1e6b88ef3f8b4b187b4eecf8", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e357f6941fe9409658386dc9b86b75dfd96c6/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e357f6941fe9409658386dc9b86b75dfd96c6/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=248e357f6941fe9409658386dc9b86b75dfd96c6", "patch": "@@ -1364,7 +1364,11 @@\n     if (!TARGET_FLOAT)\n       {\n \taarch64_err_no_fpadvsimd (<MODE>mode);\n-\tFAIL;\n+\tmachine_mode intmode\n+\t  = int_mode_for_size (GET_MODE_BITSIZE (<MODE>mode), 0).require ();\n+\temit_move_insn (gen_lowpart (intmode, operands[0]),\n+\t\t\tgen_lowpart (intmode, operands[1]));\n+\tDONE;\n       }\n \n     if (GET_CODE (operands[0]) == MEM"}, {"sha": "6484633738ab33c0baa046475812f1c75bd85e21", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e357f6941fe9409658386dc9b86b75dfd96c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e357f6941fe9409658386dc9b86b75dfd96c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=248e357f6941fe9409658386dc9b86b75dfd96c6", "patch": "@@ -1,3 +1,8 @@\n+2020-05-11  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR target/94991\n+\t* gcc.target/aarch64/mgeneral-regs_5.c: New test.\n+\n 2020-05-11  Alex Coplan  <alex.coplan@arm.com>\n \n \t* gcc.target/aarch64/csinv-neg.c: New test."}, {"sha": "589509a7a88920f46faf7cb5cfd320ef38f61a09", "filename": "gcc/testsuite/gcc.target/aarch64/mgeneral-regs_5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248e357f6941fe9409658386dc9b86b75dfd96c6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248e357f6941fe9409658386dc9b86b75dfd96c6/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_5.c?ref=248e357f6941fe9409658386dc9b86b75dfd96c6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-options \"-mgeneral-regs-only -O2\" } */\n+\n+struct S { float d; };\n+\n+void bar (struct S);\n+\n+void\n+f0 (int x)\n+{\n+  struct S s = { .d = 0.0f }; /* { dg-error \"'-mgeneral-regs-only' is incompatible with the use of floating-point types\" } */\n+  ((char *) &s.d)[0] = x;\n+  s.d *= 7.0; /* { dg-error \"'-mgeneral-regs-only' is incompatible with the use of floating-point types\" } */\n+  bar (s); /* { dg-error \"'-mgeneral-regs-only' is incompatible with the use of floating-point types\" } */\n+}"}]}