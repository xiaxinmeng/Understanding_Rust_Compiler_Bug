{"sha": "247f410b83797a1840573840cc2a539ef9d7f96b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ3ZjQxMGI4Mzc5N2ExODQwNTczODQwY2MyYTUzOWVmOWQ3Zjk2Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T14:00:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T15:27:49Z"}, "message": "libstdc++: Remove std::span::cbegin and std::span::cend (LWG 3320)\n\n\t* include/std/span (span::const_iterator, span::const_reverse_iterator)\n\t(span::cbegin(), span::cend(), span::crbegin(), span::crend()):\n\tRemove (LWG 3320).\n\t* testsuite/23_containers/span/everything.cc: Replace uses of cbegin\n\tand cend.\n\t* testsuite/20_util/specialized_algorithms/destroy/constrained.cc:\n\tLikewise.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n\tconstrained.cc: Likewise.\n\t* testsuite/20_util/specialized_algorithms/\n\tuninitialized_default_construct/constrained.cc: Likewise.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/\n\tconstrained.cc: Likewise.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_move/\n\tconstrained.cc: Likewise.\n\t* testsuite/20_util/specialized_algorithms/\n\tuninitialized_value_construct/constrained.cc: Likewise.", "tree": {"sha": "cc6b433183b78afc87be527680163a67f5ab1712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc6b433183b78afc87be527680163a67f5ab1712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/247f410b83797a1840573840cc2a539ef9d7f96b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247f410b83797a1840573840cc2a539ef9d7f96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247f410b83797a1840573840cc2a539ef9d7f96b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247f410b83797a1840573840cc2a539ef9d7f96b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f91aa3e6cb808f8dfc6b45fa135f7583a7549161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91aa3e6cb808f8dfc6b45fa135f7583a7549161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f91aa3e6cb808f8dfc6b45fa135f7583a7549161"}], "stats": {"total": 115, "additions": 57, "deletions": 58}, "files": [{"sha": "f5f8b6fd5001bb511a4ece44df52a579fe56b800", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=247f410b83797a1840573840cc2a539ef9d7f96b", "patch": "@@ -1,5 +1,23 @@\n 2020-02-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/span (span::const_iterator, span::const_reverse_iterator)\n+\t(span::cbegin(), span::cend(), span::crbegin(), span::crend()):\n+\tRemove (LWG 3320).\n+\t* testsuite/23_containers/span/everything.cc: Replace uses of cbegin\n+\tand cend.\n+\t* testsuite/20_util/specialized_algorithms/destroy/constrained.cc:\n+\tLikewise.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n+\tconstrained.cc: Likewise.\n+\t* testsuite/20_util/specialized_algorithms/\n+\tuninitialized_default_construct/constrained.cc: Likewise.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/\n+\tconstrained.cc: Likewise.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_move/\n+\tconstrained.cc: Likewise.\n+\t* testsuite/20_util/specialized_algorithms/\n+\tuninitialized_value_construct/constrained.cc: Likewise.\n+\n \t* include/bits/range_access.h (range_size_t): Define alias template.\n \t* include/std/ranges (all_view): Rename to views::all_t (LWG 3335).\n \t* testsuite/std/ranges/adaptors/filter.cc: Adjust to new name."}, {"sha": "ccfd7db39fef7e65bd5389d98980b28ddb54aaa7", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=247f410b83797a1840573840cc2a539ef9d7f96b", "patch": "@@ -141,9 +141,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using reference              = element_type&;\n       using const_reference        = const element_type&;\n       using iterator = __gnu_cxx::__normal_iterator<pointer, span>;\n-      using const_iterator = __gnu_cxx::__normal_iterator<const_pointer, span>;\n       using reverse_iterator       = std::reverse_iterator<iterator>;\n-      using const_reverse_iterator = std::reverse_iterator<const_iterator>;\n \n       // member constants\n       static constexpr size_t extent = _Extent;\n@@ -297,34 +295,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       begin() const noexcept\n       { return iterator(this->_M_ptr); }\n \n-      constexpr const_iterator\n-      cbegin() const noexcept\n-      { return const_iterator(this->_M_ptr); }\n-\n       constexpr iterator\n       end() const noexcept\n       { return iterator(this->_M_ptr + this->size()); }\n \n-      constexpr const_iterator\n-      cend() const noexcept\n-      { return const_iterator(this->_M_ptr + this->size()); }\n-\n       constexpr reverse_iterator\n       rbegin() const noexcept\n       { return reverse_iterator(this->end()); }\n \n-      constexpr const_reverse_iterator\n-      crbegin() const noexcept\n-      { return const_reverse_iterator(this->cend()); }\n-\n       constexpr reverse_iterator\n       rend() const noexcept\n       { return reverse_iterator(this->begin()); }\n \n-      constexpr const_reverse_iterator\n-      crend() const noexcept\n-      { return const_reverse_iterator(this->cbegin()); }\n-\n       // subviews\n \n       template<size_t _Count>"}, {"sha": "c04049de0b5e481d4b7a8e94f5a9a77f60131210", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/destroy/constrained.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fdestroy%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fdestroy%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fdestroy%2Fconstrained.cc?ref=247f410b83797a1840573840cc2a539ef9d7f96b", "patch": "@@ -54,7 +54,7 @@ test01()\n       ranges::uninitialized_default_construct(rx);\n       VERIFY( X::count == size );\n \n-      auto i = rx.cbegin();\n+      auto i = rx.begin();\n       if (k == 0)\n \ti = ranges::destroy(rx);\n       else if (k == 1)\n@@ -64,7 +64,7 @@ test01()\n       else\n \t__builtin_abort();\n \n-      VERIFY( i == rx.cend() );\n+      VERIFY( i == rx.end() );\n       VERIFY( X::count == 0 );\n     }\n }"}, {"sha": "c1a50c45df9c2668da6681c7ba4f1f64d3f06590", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/constrained.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fconstrained.cc?ref=247f410b83797a1840573840cc2a539ef9d7f96b", "patch": "@@ -47,7 +47,7 @@ test01(const std::vector<T> &ix)\n       auto buffer = std::unique_ptr<char[]>(new char[sizeof(T)*size]);\n       std::span<T> rx((T *)buffer.get(), size);\n \n-      ranges::uninitialized_copy_result res = {ix.cbegin(), rx.cbegin()};\n+      ranges::uninitialized_copy_result res = {ix.begin(), rx.begin()};\n       if (k == 0)\n \tres = ranges::uninitialized_copy(ix.begin(), ix.end(),\n \t\t\t\t\t rx.begin(), rx.end());\n@@ -58,33 +58,33 @@ test01(const std::vector<T> &ix)\n \t\t\t\t\t   rx.begin(), rx.end());\n       else if (k == 3)\n \tres = ranges::uninitialized_copy(ix.begin(), ix.end(),\n-\t\t\t\t\t rx.cbegin(), rx.cend());\n+\t\t\t\t\t rx.begin(), rx.end());\n       else if (k == 4)\n \tres = ranges::uninitialized_copy(ix, std::as_const(rx));\n       else if (k == 5)\n \tres = ranges::uninitialized_copy_n(ix.begin(), size,\n-\t\t\t\t\t   rx.cbegin(), rx.cend());\n+\t\t\t\t\t   rx.begin(), rx.end());\n       else if (k == 6)\n \tres = ranges::uninitialized_copy_n(ix.begin(), size/2,\n-\t\t\t\t\t   rx.cbegin(), rx.cend());\n+\t\t\t\t\t   rx.begin(), rx.end());\n       else if (k == 7)\n \tres = ranges::uninitialized_copy_n(ix.begin(), size,\n-\t\t\t\t\t   rx.cbegin(), rx.cbegin()+size/2);\n+\t\t\t\t\t   rx.begin(), rx.begin()+size/2);\n       else\n \t__builtin_abort();\n \n       if (k == 6 || k == 7)\n \t{\n-\t  VERIFY( ranges::distance(ix.cbegin(), res.in) == size/2 );\n-\t  VERIFY( ranges::distance(rx.cbegin(), res.out) == size/2 );\n+\t  VERIFY( ranges::distance(ix.begin(), res.in) == size/2 );\n+\t  VERIFY( ranges::distance(rx.begin(), res.out) == size/2 );\n \t  VERIFY( ranges::equal(ix.begin(), ix.begin()+size/2,\n \t\t\t\trx.begin(), rx.begin()+size/2) );\n \t  ranges::destroy(rx.begin(), rx.begin()+size/2);\n \t}\n       else\n \t{\n-\t  VERIFY( res.in == ix.cend() );\n-\t  VERIFY( res.out == rx.cend() );\n+\t  VERIFY( res.in == ix.end() );\n+\t  VERIFY( res.out == rx.end() );\n \t  VERIFY( ranges::equal(ix, rx) );\n \t  ranges::destroy(rx);\n \t}"}, {"sha": "d6ccfc7c7e48b897c3ee60079175b4f64a5445ea", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_default_construct/constrained.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_default_construct%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_default_construct%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_default_construct%2Fconstrained.cc?ref=247f410b83797a1840573840cc2a539ef9d7f96b", "patch": "@@ -53,7 +53,7 @@ test01()\n \t  ranges::fill(rx, t);\n \t}\n \n-      auto i = rx.cbegin();\n+      auto i = rx.begin();\n       if (k == 0)\n \ti = ranges::uninitialized_default_construct(rx.begin(), rx.end());\n       else if (k == 1)\n@@ -63,15 +63,15 @@ test01()\n       else if constexpr (std::is_fundamental_v<T>)\n \tcontinue;\n       else if (k == 3)\n-\ti = ranges::uninitialized_default_construct(rx.cbegin(), rx.cend());\n+\ti = ranges::uninitialized_default_construct(rx.begin(), rx.end());\n       else if (k == 4)\n \ti = ranges::uninitialized_default_construct(std::as_const(rx));\n       else if (k == 5)\n-\ti = ranges::uninitialized_default_construct_n(rx.cbegin(), 1024);\n+\ti = ranges::uninitialized_default_construct_n(rx.begin(), 1024);\n       else\n \t__builtin_abort();\n \n-      VERIFY( i == rx.cend() );\n+      VERIFY( i == rx.end() );\n       VERIFY( ranges::find_if(rx, [&t](const T& v) { return t != v; }) == i );\n \n       ranges::destroy(rx);"}, {"sha": "0fbbd1fa49f335aace1c7ab1904c77c8d33e971c", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill/constrained.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2Fconstrained.cc?ref=247f410b83797a1840573840cc2a539ef9d7f96b", "patch": "@@ -45,23 +45,23 @@ test01(const T& value)\n       auto buffer = std::unique_ptr<char[]>(new char[sizeof(T)*size]);\n       std::span<T> rx((T *)buffer.get(), size);\n \n-      auto i = rx.cbegin();\n+      auto i = rx.begin();\n       if (k == 0)\n \ti = ranges::uninitialized_fill(rx.begin(), rx.end(), value);\n       else if (k == 1)\n \ti = ranges::uninitialized_fill(rx, value);\n       else if (k == 2)\n \ti = ranges::uninitialized_fill_n(rx.begin(), 1024, value);\n       else if (k == 3)\n-\ti = ranges::uninitialized_fill(rx.cbegin(), rx.cend(), value);\n+\ti = ranges::uninitialized_fill(rx.begin(), rx.end(), value);\n       else if (k == 4)\n \ti = ranges::uninitialized_fill(std::as_const(rx), value);\n       else if (k == 5)\n-\ti = ranges::uninitialized_fill_n(rx.cbegin(), 1024, value);\n+\ti = ranges::uninitialized_fill_n(rx.begin(), 1024, value);\n       else\n \t__builtin_abort();\n \n-      VERIFY( i == rx.cend() );\n+      VERIFY( i == rx.end() );\n       VERIFY( ranges::find_if(rx, [&value](const T& v) { return value != v; }) == i );\n \n       ranges::destroy(rx);"}, {"sha": "a7d6fd39b3848f8c7f2a47405622f2e5223cbd90", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_move/constrained.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_move%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_move%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_move%2Fconstrained.cc?ref=247f410b83797a1840573840cc2a539ef9d7f96b", "patch": "@@ -51,7 +51,7 @@ test01(std::vector<T> ix)\n       auto buffer = std::unique_ptr<char[]>(new char[sizeof(T)*size]);\n       std::span<T> rx((T *)buffer.get(), size);\n \n-      ranges::uninitialized_move_result res = {ix.cbegin(), rx.cbegin()};\n+      ranges::uninitialized_move_result res = {ix.begin(), rx.begin()};\n       if (k == 0)\n \tres = ranges::uninitialized_move(ix.begin(), ix.end(),\n \t\t\t\t\t rx.begin(), rx.end());\n@@ -62,33 +62,33 @@ test01(std::vector<T> ix)\n \t\t\t\t\t   rx.begin(), rx.end());\n       else if (k == 3)\n \tres = ranges::uninitialized_move(ix.begin(), ix.end(),\n-\t\t\t\t\t rx.cbegin(), rx.cend());\n+\t\t\t\t\t rx.begin(), rx.end());\n       else if (k == 4)\n \tres = ranges::uninitialized_move(ix, std::as_const(rx));\n       else if (k == 5)\n \tres = ranges::uninitialized_move_n(ix.begin(), size,\n-\t\t\t\t\t   rx.cbegin(), rx.cend());\n+\t\t\t\t\t   rx.begin(), rx.end());\n       else if (k == 6)\n \tres = ranges::uninitialized_move_n(ix.begin(), size/2,\n-\t\t\t\t\t   rx.cbegin(), rx.cend());\n+\t\t\t\t\t   rx.begin(), rx.end());\n       else if (k == 7)\n \tres = ranges::uninitialized_move_n(ix.begin(), size,\n-\t\t\t\t\t   rx.cbegin(), rx.cbegin()+size/2);\n+\t\t\t\t\t   rx.begin(), rx.begin()+size/2);\n       else\n \t__builtin_abort();\n \n       if (k == 6 || k == 7)\n \t{\n-\t  VERIFY( ranges::distance(ix.cbegin(), res.in) == size/2 );\n-\t  VERIFY( ranges::distance(rx.cbegin(), res.out) == size/2 );\n+\t  VERIFY( ranges::distance(ix.begin(), res.in) == size/2 );\n+\t  VERIFY( ranges::distance(rx.begin(), res.out) == size/2 );\n \t  VERIFY( ranges::equal(saved_ix.begin(), saved_ix.begin()+size/2,\n \t\t\t\trx.begin(), rx.begin()+size/2) );\n \t  ranges::destroy(rx.begin(), rx.begin()+size/2);\n \t}\n       else\n \t{\n-\t  VERIFY( res.in == ix.cend() );\n-\t  VERIFY( res.out == rx.cend() );\n+\t  VERIFY( res.in == ix.end() );\n+\t  VERIFY( res.out == rx.end() );\n \t  VERIFY( ranges::equal(saved_ix, rx) );\n \t  ranges::destroy(rx);\n \t}"}, {"sha": "ba3799b103ebec4e94ff5de801cf8c7bb42f810e", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_value_construct/constrained.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct%2Fconstrained.cc?ref=247f410b83797a1840573840cc2a539ef9d7f96b", "patch": "@@ -48,23 +48,23 @@ test01()\n \n       T t{};\n \n-      auto i = rx.cbegin();\n+      auto i = rx.begin();\n       if (k == 0)\n \ti = ranges::uninitialized_value_construct(rx.begin(), rx.end());\n       else if (k == 1)\n \ti = ranges::uninitialized_value_construct(rx);\n       else if (k == 2)\n \ti = ranges::uninitialized_value_construct_n(rx.begin(), 1024);\n       else if (k == 3)\n-\ti = ranges::uninitialized_value_construct(rx.cbegin(), rx.cend());\n+\ti = ranges::uninitialized_value_construct(rx.begin(), rx.end());\n       else if (k == 4)\n \ti = ranges::uninitialized_value_construct(std::as_const(rx));\n       else if (k == 5)\n-\ti = ranges::uninitialized_value_construct_n(rx.cbegin(), 1024);\n+\ti = ranges::uninitialized_value_construct_n(rx.begin(), 1024);\n       else\n \t__builtin_abort();\n \n-      VERIFY( i == rx.cend() );\n+      VERIFY( i == rx.end() );\n       VERIFY( ranges::find_if(rx, [&t](const T& v) { return t != v; }) == i );\n \n       ranges::destroy(rx);"}, {"sha": "0ae4d741d0e0996fc352126aca5bffe9407c29cc", "filename": "libstdc++-v3/testsuite/23_containers/span/everything.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Feverything.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/247f410b83797a1840573840cc2a539ef9d7f96b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Feverything.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Feverything.cc?ref=247f410b83797a1840573840cc2a539ef9d7f96b", "patch": "@@ -162,9 +162,8 @@ main()\n   bool really_empty1 = std::empty(shorts);\n   bool really_empty2 = shorts.data() == nullptr;\n   bool really_empty3 = shorts.begin() == shorts.end();\n-  bool really_empty4 = shorts.cbegin() == shorts.cend();\n   bool really_empty =\n-    really_empty0 && really_empty1 && really_empty2 && really_empty3 && really_empty4;\n+    really_empty0 && really_empty1 && really_empty2 && really_empty3;\n   (void)really_empty;\n   VERIFY(really_empty);\n \n@@ -179,19 +178,19 @@ main()\n   std::span<const std::byte> muh_byte_span   = std::as_bytes(muh_span);\n   std::span<std::byte> muh_mutable_byte_span = std::as_writable_bytes(muh_span);\n   std::span<std::byte> muh_original_byte_span(original_bytes, original_bytes + 4);\n-  bool definitely_reinterpret_casted0 = std::equal(muh_byte_span.cbegin(), muh_byte_span.cend(),\n-    muh_original_byte_span.cbegin(), muh_original_byte_span.cend());\n-  bool definitely_reinterpret_casted1 = std::equal(muh_mutable_byte_span.cbegin(),\n-    muh_mutable_byte_span.cend(), muh_original_byte_span.cbegin(), muh_original_byte_span.cend());\n+  bool definitely_reinterpret_casted0 = std::equal(muh_byte_span.begin(), muh_byte_span.end(),\n+    muh_original_byte_span.begin(), muh_original_byte_span.end());\n+  bool definitely_reinterpret_casted1 = std::equal(muh_mutable_byte_span.begin(),\n+    muh_mutable_byte_span.end(), muh_original_byte_span.begin(), muh_original_byte_span.end());\n   bool definitely_reinterpret_casted =\n     definitely_reinterpret_casted0 && definitely_reinterpret_casted1;\n   (void)definitely_reinterpret_casted;\n   VERIFY(definitely_reinterpret_casted);\n \n   std::span<std::byte> muh_original_byte_span_ptr_size(original_bytes, 4);\n   bool definitely_equivalent =\n-    std::equal(muh_original_byte_span_ptr_size.cbegin(), muh_original_byte_span_ptr_size.cend(),\n-      muh_original_byte_span.cbegin(), muh_original_byte_span.cend());\n+    std::equal(muh_original_byte_span_ptr_size.begin(), muh_original_byte_span_ptr_size.end(),\n+      muh_original_byte_span.begin(), muh_original_byte_span.end());\n   (void)definitely_equivalent;\n   VERIFY(definitely_equivalent);\n "}]}