{"sha": "aec17bfe911ec61571db80eb5b0093a5b19e39e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVjMTdiZmU5MTFlYzYxNTcxZGI4MGViNWIwMDkzYTViMTllMzllNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-11-27T08:59:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-11-27T08:59:55Z"}, "message": "re PR c/63326 (whether a #pragma is a statement depends on the type of pragma)\n\n\tPR c/63326\n\t* c-parser.c (c_parser_compound_statement_nostart): If\n\tlast_label is true, use pragma_stmt instead of pragma_compound\n\tas second c_parser_pragma argument.\n\t(c_parser_omp_ordered, c_parser_omp_target_update,\n\tc_parser_omp_target_enter_data, c_parser_omp_target_exit_data): Pass\n\tfalse as second argument to c_parser_skip_to_pragma_eol after\n\tdiagnosing standalone directives used in pragma_stmt context.\n\n\t* parser.c (cp_parser_statement): Clear in_compound after labels.\n\n\t* gcc.dg/gomp/barrier-2.c (f2): Expect another error after label.\n\t* c-c++-common/gomp/pr63326.c: New test.\n\n\t* testsuite/libgomp.c/cancel-parallel-2.c (foo): Add semicolon\n\tin between case label and OpenMP standalone directives.\n\t* testsuite/libgomp.c++/cancel-parallel-2.C (foo): Likewise.\n\nFrom-SVN: r230999", "tree": {"sha": "e72671d0f3333ec8e1457d802ba502e75e9746ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e72671d0f3333ec8e1457d802ba502e75e9746ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aec17bfe911ec61571db80eb5b0093a5b19e39e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec17bfe911ec61571db80eb5b0093a5b19e39e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec17bfe911ec61571db80eb5b0093a5b19e39e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec17bfe911ec61571db80eb5b0093a5b19e39e4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e48d8a09e4aefa3cdd6e0971c52b1665ef69e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e48d8a09e4aefa3cdd6e0971c52b1665ef69e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e48d8a09e4aefa3cdd6e0971c52b1665ef69e34"}], "stats": {"total": 531, "additions": 521, "deletions": 10}, "files": [{"sha": "2f58369bf4a6c1f8010bef5144e8dfd87b62cd82", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=aec17bfe911ec61571db80eb5b0093a5b19e39e4", "patch": "@@ -1,3 +1,14 @@\n+2015-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/63326\n+\t* c-parser.c (c_parser_compound_statement_nostart): If\n+\tlast_label is true, use pragma_stmt instead of pragma_compound\n+\tas second c_parser_pragma argument.\n+\t(c_parser_omp_ordered, c_parser_omp_target_update,\n+\tc_parser_omp_target_enter_data, c_parser_omp_target_exit_data): Pass\n+\tfalse as second argument to c_parser_skip_to_pragma_eol after\n+\tdiagnosing standalone directives used in pragma_stmt context.\n+\n 2015-11-24  Ilya Verbin  <ilya.verbin@intel.com>\n \n \t* c-parser.c (c_parser_oacc_declare): Replace \"ifdef ENABLE_OFFLOADING\""}, {"sha": "0259f66aeb4d2b319bbe8e7c3496cefc37aef693", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=aec17bfe911ec61571db80eb5b0093a5b19e39e4", "patch": "@@ -4729,7 +4729,8 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t     syntactically.  This ensures that the user doesn't put them\n \t     places that would turn into syntax errors if the directive\n \t     were ignored.  */\n-\t  if (c_parser_pragma (parser, pragma_compound))\n+\t  if (c_parser_pragma (parser,\n+\t\t\t       last_label ? pragma_stmt : pragma_compound))\n \t    last_label = false, last_stmt = true;\n \t}\n       else if (c_parser_next_token_is (parser, CPP_EOF))\n@@ -14988,7 +14989,7 @@ c_parser_omp_ordered (c_parser *parser, enum pragma_context context)\n \t      error_at (loc,\n \t\t\t\"%<#pragma omp ordered%> with %<depend> clause may \"\n \t\t\t\"only be used in compound statements\");\n-\t      c_parser_skip_to_pragma_eol (parser);\n+\t      c_parser_skip_to_pragma_eol (parser, false);\n \t      return false;\n \t    }\n \n@@ -15636,7 +15637,7 @@ c_parser_omp_target_update (location_t loc, c_parser *parser,\n       error_at (loc,\n \t\t\"%<#pragma omp target update%> may only be \"\n \t\t\"used in compound statements\");\n-      c_parser_skip_to_pragma_eol (parser);\n+      c_parser_skip_to_pragma_eol (parser, false);\n       return false;\n     }\n \n@@ -15696,7 +15697,7 @@ c_parser_omp_target_enter_data (location_t loc, c_parser *parser,\n       error_at (loc,\n \t\t\"%<#pragma omp target enter data%> may only be \"\n \t\t\"used in compound statements\");\n-      c_parser_skip_to_pragma_eol (parser);\n+      c_parser_skip_to_pragma_eol (parser, false);\n       return NULL_TREE;\n     }\n \n@@ -15781,7 +15782,7 @@ c_parser_omp_target_exit_data (location_t loc, c_parser *parser,\n       error_at (loc,\n \t\t\"%<#pragma omp target exit data%> may only be \"\n \t\t\"used in compound statements\");\n-      c_parser_skip_to_pragma_eol (parser);\n+      c_parser_skip_to_pragma_eol (parser, false);\n       return NULL_TREE;\n     }\n "}, {"sha": "bb54dce0fe945c358c4f4e98cd5229f3fe379617", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aec17bfe911ec61571db80eb5b0093a5b19e39e4", "patch": "@@ -1,3 +1,8 @@\n+2015-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/63326\n+\t* parser.c (cp_parser_statement): Clear in_compound after labels.\n+\n 2015-11-27  Martin Liska  <mliska@suse.cz>\n \n \t* parser.c (cp_parser_late_parsing_cilk_simd_fn_info):"}, {"sha": "90a0673a38cf0f62ccc7048247c5091661cae866", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=aec17bfe911ec61571db80eb5b0093a5b19e39e4", "patch": "@@ -10003,6 +10003,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \t     Parse the label, and then use tail recursion to parse\n \t     the statement.  */\n \t  cp_parser_label_for_labeled_statement (parser, std_attrs);\n+\t  in_compound = false;\n \t  goto restart;\n \n \tcase RID_IF:\n@@ -10100,6 +10101,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \t     the statement.  */\n \n \t  cp_parser_label_for_labeled_statement (parser, std_attrs);\n+\t  in_compound = false;\n \t  goto restart;\n \t}\n     }"}, {"sha": "e946a6f24dcb448095539e6d1920dc95cefd118c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aec17bfe911ec61571db80eb5b0093a5b19e39e4", "patch": "@@ -1,3 +1,9 @@\n+2015-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/63326\n+\t* gcc.dg/gomp/barrier-2.c (f2): Expect another error after label.\n+\t* c-c++-common/gomp/pr63326.c: New test.\n+\n 2015-11-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68553"}, {"sha": "e319f49701117c1b4387de496b6de61b7d5ef88f", "filename": "gcc/testsuite/c-c++-common/gomp/pr63326.c", "status": "added", "additions": 479, "deletions": 0, "changes": 479, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr63326.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr63326.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr63326.c?ref=aec17bfe911ec61571db80eb5b0093a5b19e39e4", "patch": "@@ -0,0 +1,479 @@\n+/* PR c/63326 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp\" } */\n+\n+void\n+f1 (int x)\n+{\n+  int i;\n+  if (x)\n+    #pragma omp barrier\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  if (x)\n+    #pragma omp flush\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  if (x)\n+    #pragma omp taskwait\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  if (x)\n+    #pragma omp taskyield\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  #pragma omp parallel\n+  {\n+    if (x)\n+      #pragma omp cancel parallel\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    ;\n+  }\n+  #pragma omp parallel\n+  {\n+    if (x)\n+      #pragma omp cancellation point parallel\t/* { dg-error \"may only be used in compound statements\" } */\n+    ;\n+  }\n+  #pragma omp for ordered(1)\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (x)\n+\t#pragma omp ordered depend(source)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+      if (x)\n+\t#pragma omp ordered depend(sink: i-1)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  if (x)\n+    #pragma omp target enter data map(to:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  if (x)\n+    #pragma omp target update to(i)\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  if (x)\n+    #pragma omp target exit data map(from:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+}\n+\n+void\n+f2 (int x)\n+{\n+  int i;\n+  while (x)\n+    #pragma omp barrier\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  while (x)\n+    #pragma omp flush\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  while (x)\n+    #pragma omp taskwait\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  while (x)\n+    #pragma omp taskyield\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  #pragma omp parallel\n+  {\n+    while (x)\n+      #pragma omp cancel parallel\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    ;\n+  }\n+  #pragma omp parallel\n+  {\n+    while (x)\n+      #pragma omp cancellation point parallel\t/* { dg-error \"may only be used in compound statements\" } */\n+    ;\n+  }\n+  #pragma omp for ordered(1)\n+  for (i = 0; i < 16; i++)\n+    {\n+      while (x)\n+\t#pragma omp ordered depend(source)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+      while (x)\n+\t#pragma omp ordered depend(sink: i-1)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  while (x)\n+    #pragma omp target enter data map(to:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  while (x)\n+    #pragma omp target update to(i)\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  while (x)\n+    #pragma omp target exit data map(from:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+}\n+\n+void\n+f3 (int x)\n+{\n+  int i;\n+  for (x = 0; x < 10; x++)\n+    #pragma omp barrier\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  for (x = 0; x < 10; x++)\n+    #pragma omp flush\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  for (x = 0; x < 10; x++)\n+    #pragma omp taskwait\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  for (x = 0; x < 10; x++)\n+    #pragma omp taskyield\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  #pragma omp parallel\n+  {\n+    for (x = 0; x < 10; x++)\n+      #pragma omp cancel parallel\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    ;\n+  }\n+  #pragma omp parallel\n+  {\n+    for (x = 0; x < 10; x++)\n+      #pragma omp cancellation point parallel\t/* { dg-error \"may only be used in compound statements\" } */\n+    ;\n+  }\n+  #pragma omp for ordered(1)\n+  for (i = 0; i < 16; i++)\n+    {\n+      for (x = 0; x < 10; x++)\n+\t#pragma omp ordered depend(source)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+      for (x = 0; x < 10; x++)\n+\t#pragma omp ordered depend(sink: i-1)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  for (x = 0; x < 10; x++)\n+    #pragma omp target enter data map(to:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  for (x = 0; x < 10; x++)\n+    #pragma omp target update to(i)\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  for (x = 0; x < 10; x++)\n+    #pragma omp target exit data map(from:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+}\n+\n+void\n+f4 (int x)\n+{\n+  int i;\n+  {\n+    do\n+      #pragma omp barrier\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    while (0);\n+  } /* { dg-error \"before\" \"\" { target c++ } } */\n+  {\n+    do\n+      #pragma omp flush\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    while (0);\n+  } /* { dg-error \"before\" \"\" { target c++ } } */\n+  {\n+    do\n+      #pragma omp taskwait\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    while (0);\n+  } /* { dg-error \"before\" \"\" { target c++ } } */\n+  {\n+    do\n+      #pragma omp taskyield\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    while (0);\n+  } /* { dg-error \"before\" \"\" { target c++ } } */\n+  #pragma omp parallel\n+  {\n+    do\n+      #pragma omp cancel parallel\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    while (0);\n+  } /* { dg-error \"before\" \"\" { target c++ } } */\n+  #pragma omp parallel\n+  {\n+    do\n+      #pragma omp cancellation point parallel\t/* { dg-error \"may only be used in compound statements\" } */\n+    while (0);\n+  } /* { dg-error \"before\" \"\" { target c++ } } */\n+  #pragma omp for ordered(1)\n+  for (i = 0; i < 16; i++)\n+    {\n+      {\n+\tdo\n+\t  #pragma omp ordered depend(source)\t/* { dg-error \"may only be used in compound statements\" } */\n+\twhile (0);\n+      } /* { dg-error \"before\" \"\" { target c++ } } */\n+      {\n+\tdo\n+\t  #pragma omp ordered depend(sink: i-1)\t/* { dg-error \"may only be used in compound statements\" } */\n+\twhile (0);\n+      } /* { dg-error \"before\" \"\" { target c++ } } */\n+    }\n+  {\n+    do\n+      #pragma omp target enter data map(to:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+    while (0);\n+  } /* { dg-error \"before\" \"\" { target c++ } } */\n+  {\n+    do\n+      #pragma omp target update to(i)\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    while (0);\n+  } /* { dg-error \"before\" \"\" { target c++ } } */\n+  {\n+    do\n+      #pragma omp target exit data map(from:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+    while (0);\n+  } /* { dg-error \"before\" \"\" { target c++ } } */\n+}\n+\n+void\n+f5 (int x)\n+{\n+  int i;\n+  switch (x)\n+    #pragma omp barrier\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  switch (x)\n+    #pragma omp flush\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  switch (x)\n+    #pragma omp taskwait\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  switch (x)\n+    #pragma omp taskyield\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  #pragma omp parallel\n+  {\n+    switch (x)\n+      #pragma omp cancel parallel\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    ;\n+  }\n+  #pragma omp parallel\n+  {\n+    switch (x)\n+      #pragma omp cancellation point parallel\t/* { dg-error \"may only be used in compound statements\" } */\n+    ;\n+  }\n+  #pragma omp for ordered(1)\n+  for (i = 0; i < 16; i++)\n+    {\n+      switch (x)\n+\t#pragma omp ordered depend(source)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+      switch (x)\n+\t#pragma omp ordered depend(sink: i-1)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    #pragma omp target enter data map(to:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  switch (x)\n+    #pragma omp target update to(i)\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  switch (x)\n+    #pragma omp target exit data map(from:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+}\n+\n+void\n+f6 (int x)\n+{\n+  int i;\n+  switch (x)\n+    {\n+    case 1:\n+      #pragma omp barrier\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    {\n+    case 1:\n+      #pragma omp flush\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    {\n+    case 1:\n+      #pragma omp taskwait\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    {\n+    case 1:\n+      #pragma omp taskyield\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  #pragma omp parallel\n+  {\n+    switch (x)\n+      {\n+      case 1:\n+\t#pragma omp cancel parallel\t\t/* { dg-error \"may only be used in compound statements\" } */\n+\t;\n+      }\n+  }\n+  #pragma omp parallel\n+  {\n+    switch (x)\n+      {\n+      case 1:\n+\t#pragma omp cancellation point parallel\t/* { dg-error \"may only be used in compound statements\" } */\n+\t;\n+      }\n+  }\n+  #pragma omp for ordered(1)\n+  for (i = 0; i < 16; i++)\n+    {\n+      switch (x)\n+\t{\n+\tcase 1:\n+\t  #pragma omp ordered depend(source)\t/* { dg-error \"may only be used in compound statements\" } */\n+\t  ;\n+\t}\n+      switch (x)\n+\t{\n+\tcase 1:\n+\t  #pragma omp ordered depend(sink: i-1)\t/* { dg-error \"may only be used in compound statements\" } */\n+\t  ;\n+\t}\n+    }\n+  switch (x)\n+    {\n+    case 1:\n+      #pragma omp target enter data map(to:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    {\n+    case 1:\n+      #pragma omp target update to(i)\t\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    {\n+    case 1:\n+      #pragma omp target exit data map(from:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+}\n+\n+void\n+f7 (int x)\n+{\n+  int i;\n+  switch (x)\n+    {\n+    default:\n+      #pragma omp barrier\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    {\n+    default:\n+      #pragma omp flush\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    {\n+    default:\n+      #pragma omp taskwait\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    {\n+    default:\n+      #pragma omp taskyield\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  #pragma omp parallel\n+  {\n+    switch (x)\n+      {\n+      default:\n+\t#pragma omp cancel parallel\t\t/* { dg-error \"may only be used in compound statements\" } */\n+\t;\n+      }\n+  }\n+  #pragma omp parallel\n+  {\n+    switch (x)\n+      {\n+      default:\n+\t#pragma omp cancellation point parallel\t/* { dg-error \"may only be used in compound statements\" } */\n+\t;\n+      }\n+  }\n+  #pragma omp for ordered(1)\n+  for (i = 0; i < 16; i++)\n+    {\n+      switch (x)\n+\t{\n+\tdefault:\n+\t  #pragma omp ordered depend(source)\t/* { dg-error \"may only be used in compound statements\" } */\n+\t  ;\n+\t}\n+      switch (x)\n+\t{\n+\tdefault:\n+\t  #pragma omp ordered depend(sink: i-1)\t/* { dg-error \"may only be used in compound statements\" } */\n+\t  ;\n+\t}\n+    }\n+  switch (x)\n+    {\n+    default:\n+      #pragma omp target enter data map(to:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    {\n+    default:\n+      #pragma omp target update to(i)\t\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  switch (x)\n+    {\n+    default:\n+      #pragma omp target exit data map(from:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+}\n+\n+void\n+f8 (int x)\n+{\n+  int i;\n+  lab1:\n+    #pragma omp barrier\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  lab2:\n+    #pragma omp flush\t\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  lab3:\n+    #pragma omp taskwait\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  lab4:\n+    #pragma omp taskyield\t\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  #pragma omp parallel\n+  {\n+    lab5:\n+      #pragma omp cancel parallel\t\t/* { dg-error \"may only be used in compound statements\" } */\n+    ;\n+  }\n+  #pragma omp parallel\n+  {\n+    lab6:\n+      #pragma omp cancellation point parallel\t/* { dg-error \"may only be used in compound statements\" } */\n+    ;\n+  }\n+  #pragma omp for ordered(1)\n+  for (i = 0; i < 16; i++)\n+    {\n+      lab7:\n+\t#pragma omp ordered depend(source)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+      lab8:\n+\t#pragma omp ordered depend(sink: i-1)\t/* { dg-error \"may only be used in compound statements\" } */\n+      ;\n+    }\n+  lab9:\n+    #pragma omp target enter data map(to:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  lab10:\n+    #pragma omp target update to(i)\t\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+  lab11:\n+    #pragma omp target exit data map(from:i)\t/* { dg-error \"may only be used in compound statements\" } */\n+  ;\n+}"}, {"sha": "5a7091946c4c93edbca6de23e2cb5236cc4c9af3", "filename": "gcc/testsuite/gcc.dg/gomp/barrier-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fbarrier-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec17bfe911ec61571db80eb5b0093a5b19e39e4/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fbarrier-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fbarrier-2.c?ref=aec17bfe911ec61571db80eb5b0093a5b19e39e4", "patch": "@@ -16,7 +16,7 @@ void f1(void)\n void f2(void)\n {\n   label:       /* { dg-error \"label at end of compound statement\" } */\n-    #pragma omp barrier\n+    #pragma omp barrier\t\t/* { dg-error \"may only be used in compound statements\" } */\n }\n \n void f3(_Bool p)"}, {"sha": "9b320b3cd55ca58c06d6a6f0873597addfc19683", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec17bfe911ec61571db80eb5b0093a5b19e39e4/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec17bfe911ec61571db80eb5b0093a5b19e39e4/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=aec17bfe911ec61571db80eb5b0093a5b19e39e4", "patch": "@@ -1,3 +1,10 @@\n+2015-11-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/63326\n+\t* testsuite/libgomp.c/cancel-parallel-2.c (foo): Add semicolon\n+\tin between case label and OpenMP standalone directives.\n+\t* testsuite/libgomp.c++/cancel-parallel-2.C (foo): Likewise.\n+\n 2015-11-26  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* configure: Regenerate."}, {"sha": "23b8caa410efeb90b6941acd966a66da383889ad", "filename": "libgomp/testsuite/libgomp.c++/cancel-parallel-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec17bfe911ec61571db80eb5b0093a5b19e39e4/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fcancel-parallel-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec17bfe911ec61571db80eb5b0093a5b19e39e4/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fcancel-parallel-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fcancel-parallel-2.C?ref=aec17bfe911ec61571db80eb5b0093a5b19e39e4", "patch": "@@ -17,7 +17,7 @@ foo (int *x)\n     int thr = omp_get_thread_num ();\n     switch (x[thr])\n       {\n-      case 4:\n+      case 4:;\n \t#pragma omp cancel parallel\n \tbreak;\n       case 3:\n@@ -31,7 +31,7 @@ foo (int *x)\n       case 2:\n \tusleep (1000);\n \t/* FALLTHRU */\n-      case 1:\n+      case 1:;\n \t#pragma omp cancellation point parallel\n \tbreak;\n       }"}, {"sha": "20adb55507f7ca23e143cc09f1e35e095a101420", "filename": "libgomp/testsuite/libgomp.c/cancel-parallel-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aec17bfe911ec61571db80eb5b0093a5b19e39e4/libgomp%2Ftestsuite%2Flibgomp.c%2Fcancel-parallel-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aec17bfe911ec61571db80eb5b0093a5b19e39e4/libgomp%2Ftestsuite%2Flibgomp.c%2Fcancel-parallel-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fcancel-parallel-2.c?ref=aec17bfe911ec61571db80eb5b0093a5b19e39e4", "patch": "@@ -13,7 +13,7 @@ foo (int *x)\n     int thr = omp_get_thread_num ();\n     switch (x[thr])\n       {\n-      case 4:\n+      case 4:;\n \t#pragma omp cancel parallel\n \tbreak;\n       case 3:\n@@ -27,7 +27,7 @@ foo (int *x)\n       case 2:\n \tusleep (1000);\n \t/* FALLTHRU */\n-      case 1:\n+      case 1:;\n \t#pragma omp cancellation point parallel\n \tbreak;\n       }"}]}