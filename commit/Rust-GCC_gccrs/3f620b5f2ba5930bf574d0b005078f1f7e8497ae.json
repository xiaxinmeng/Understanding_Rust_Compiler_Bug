{"sha": "3f620b5f2ba5930bf574d0b005078f1f7e8497ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y2MjBiNWYyYmE1OTMwYmY1NzRkMGIwMDUwNzhmMWY3ZTg0OTdhZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-04-17T19:29:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-04-17T19:29:01Z"}, "message": "alpha.c (va_list_skip_additions): Only define if TARGET_ABI_OSF.\n\n        * config/alpha/alpha.c (va_list_skip_additions): Only define if\n        TARGET_ABI_OSF.\n        (TARGET_STDARG_OPTIMIZE_HOOK): Likewise.\n        (alpha_stdarg_optimize_hook): Likewise.  Allow for one more round\n        of indirection through ssa names while looking for the gpr counter\n        field.\n        (alpha_setup_incoming_varargs) <TARGET_ABI_OSF>: Make use of the\n        saved va_list_gpr_size and va_list_fpr_size.\n\nFrom-SVN: r98286", "tree": {"sha": "124cd813eb7186bfce104b9cb177db9730eca331", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/124cd813eb7186bfce104b9cb177db9730eca331"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f620b5f2ba5930bf574d0b005078f1f7e8497ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f620b5f2ba5930bf574d0b005078f1f7e8497ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f620b5f2ba5930bf574d0b005078f1f7e8497ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f620b5f2ba5930bf574d0b005078f1f7e8497ae/comments", "author": null, "committer": null, "parents": [{"sha": "deac22846847de2768528d9ef838b5d50359927b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deac22846847de2768528d9ef838b5d50359927b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deac22846847de2768528d9ef838b5d50359927b"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "4b409decfa2de23bcc85145864eb46659388b987", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f620b5f2ba5930bf574d0b005078f1f7e8497ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f620b5f2ba5930bf574d0b005078f1f7e8497ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f620b5f2ba5930bf574d0b005078f1f7e8497ae", "patch": "@@ -1,3 +1,14 @@\n+2005-04-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (va_list_skip_additions): Only define if\n+\tTARGET_ABI_OSF.\n+\t(TARGET_STDARG_OPTIMIZE_HOOK): Likewise.\n+\t(alpha_stdarg_optimize_hook): Likewise.  Allow for one more round\n+\tof indirection through ssa names while looking for the gpr counter\n+\tfield.\n+\t(alpha_setup_incoming_varargs) <TARGET_ABI_OSF>: Make use of the\n+\tsaved va_list_gpr_size and va_list_fpr_size.\n+\n 2005-04-17  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-vrp.c (compare_values): Check that VAL1 and VAL2 are"}, {"sha": "71ba4496f174c31fb265c5138c79c52326931d51", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 45, "deletions": 23, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f620b5f2ba5930bf574d0b005078f1f7e8497ae/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f620b5f2ba5930bf574d0b005078f1f7e8497ae/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=3f620b5f2ba5930bf574d0b005078f1f7e8497ae", "patch": "@@ -5582,6 +5582,7 @@ alpha_build_builtin_va_list (void)\n   return record;\n }\n \n+#if TARGET_ABI_OSF\n /* Helper function for alpha_stdarg_optimize_hook.  Skip over casts\n    and constant additions.  */\n \n@@ -5685,17 +5686,16 @@ alpha_stdarg_optimize_hook (struct stdarg_info *si, tree lhs, tree rhs)\n \n       arg1 = va_list_skip_additions (PHI_ARG_DEF (offset, 0));\n       arg2 = va_list_skip_additions (PHI_ARG_DEF (offset, 1));\n-      if (TREE_CODE (arg1) != COMPONENT_REF)\n+      if (TREE_CODE (arg2) != MINUS_EXPR && TREE_CODE (arg2) != PLUS_EXPR)\n \t{\n \t  tree tem = arg1;\n-\n \t  arg1 = arg2;\n \t  arg2 = tem;\n-\t}\n \n-      if ((TREE_CODE (arg2) != MINUS_EXPR\n-\t   && TREE_CODE (arg2) != PLUS_EXPR)\n-\t  || !host_integerp (TREE_OPERAND (arg2, 1), 0))\n+\t  if (TREE_CODE (arg2) != MINUS_EXPR && TREE_CODE (arg2) != PLUS_EXPR)\n+\t    goto escapes;\n+\t}\n+      if (!host_integerp (TREE_OPERAND (arg2, 1), 0))\n \tgoto escapes;\n \n       sub = tree_low_cst (TREE_OPERAND (arg2, 1), 0);\n@@ -5705,8 +5705,13 @@ alpha_stdarg_optimize_hook (struct stdarg_info *si, tree lhs, tree rhs)\n \tgoto escapes;\n \n       arg2 = va_list_skip_additions (TREE_OPERAND (arg2, 0));\n-      if (arg1 != arg2\n-\t  || TREE_CODE (arg1) != COMPONENT_REF\n+      if (arg1 != arg2)\n+\tgoto escapes;\n+\n+      if (TREE_CODE (arg1) == SSA_NAME)\n+\targ1 = va_list_skip_additions (arg1);\n+\n+      if (TREE_CODE (arg1) != COMPONENT_REF\n \t  || TREE_OPERAND (arg1, 1) != va_list_gpr_counter_field\n \t  || get_base_address (arg1) != base)\n \tgoto escapes;\n@@ -5727,6 +5732,7 @@ alpha_stdarg_optimize_hook (struct stdarg_info *si, tree lhs, tree rhs)\n   si->va_list_escapes = true;\n   return false;\n }\n+#endif\n \n /* Perform any needed actions needed for a function that is receiving a\n    variable number of arguments.  */\n@@ -5787,21 +5793,38 @@ alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n \n   if (!no_rtl)\n     {\n-      int set = get_varargs_alias_set ();\n+      int count, set = get_varargs_alias_set ();\n       rtx tmp;\n \n-      tmp = gen_rtx_MEM (BLKmode,\n-\t\t\t plus_constant (virtual_incoming_args_rtx,\n-\t\t\t\t\t(cum + 6) * UNITS_PER_WORD));\n-      set_mem_alias_set (tmp, set);\n-      move_block_from_reg (16 + cum, tmp, 6 - cum);\n+      count = cfun->va_list_gpr_size / UNITS_PER_WORD;\n+      if (count > 6 - cum)\n+\tcount = 6 - cum;\n \n-      tmp = gen_rtx_MEM (BLKmode,\n-\t\t\t plus_constant (virtual_incoming_args_rtx,\n-\t\t\t\t\tcum * UNITS_PER_WORD));\n-      set_mem_alias_set (tmp, set);\n-      move_block_from_reg (16 + cum + TARGET_FPREGS*32, tmp, 6 - cum);\n-    }\n+      /* Detect whether integer registers or floating-point registers\n+\t are needed by the detected va_arg statements.  See above for\n+\t how these values are computed.  Note that the \"escape\" value\n+\t is VA_LIST_MAX_FPR_SIZE, which is 255, which has both of \n+\t these bits set.  */\n+      gcc_assert ((VA_LIST_MAX_FPR_SIZE & 3) == 3);\n+\n+      if (cfun->va_list_fpr_size & 1)\n+\t{\n+\t  tmp = gen_rtx_MEM (BLKmode,\n+\t\t\t     plus_constant (virtual_incoming_args_rtx,\n+\t\t\t\t\t    (cum + 6) * UNITS_PER_WORD));\n+\t  set_mem_alias_set (tmp, set);\n+\t  move_block_from_reg (16 + cum, tmp, count);\n+\t}\n+\n+      if (cfun->va_list_fpr_size & 2)\n+\t{\n+\t  tmp = gen_rtx_MEM (BLKmode,\n+\t\t\t     plus_constant (virtual_incoming_args_rtx,\n+\t\t\t\t\t    cum * UNITS_PER_WORD));\n+\t  set_mem_alias_set (tmp, set);\n+\t  move_block_from_reg (16 + cum + TARGET_FPREGS*32, tmp, count);\n+\t}\n+     }\n   *pretend_size = 12 * UNITS_PER_WORD;\n #endif\n }\n@@ -10300,6 +10323,8 @@ alpha_init_libfuncs (void)\n #define TARGET_ASM_OUTPUT_MI_THUNK alpha_output_mi_thunk_osf\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n #define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n+#undef TARGET_STDARG_OPTIMIZE_HOOK\n+#define TARGET_STDARG_OPTIMIZE_HOOK alpha_stdarg_optimize_hook\n #endif\n \n #undef TARGET_RTX_COSTS\n@@ -10353,9 +10378,6 @@ alpha_init_libfuncs (void)\n #undef TARGET_HANDLE_OPTION\n #define TARGET_HANDLE_OPTION alpha_handle_option\n \n-#undef TARGET_STDARG_OPTIMIZE_HOOK\n-#define TARGET_STDARG_OPTIMIZE_HOOK alpha_stdarg_optimize_hook\n-\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f"}]}