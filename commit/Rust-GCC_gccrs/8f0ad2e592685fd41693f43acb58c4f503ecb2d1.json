{"sha": "8f0ad2e592685fd41693f43acb58c4f503ecb2d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwYWQyZTU5MjY4NWZkNDE2OTNmNDNhY2I1OGM0ZjUwM2VjYjJkMQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2014-04-11T10:36:58Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2014-04-11T10:36:58Z"}, "message": "htm-nofloat-1.c: Rename to ...\n\n2014-04-11  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.target/s390/htm-nofloat-1.c: Rename to ...\n\t* gcc.target/s390/htm-nofloat-compile-1.c: ... this one.\n\t* gcc.target/s390/htm-nofloat-2.c: Add check for htm target and\n\trename to ...\n\t* gcc.target/s390/htm-nofloat-1.c: ... this one.\n\t* gcc.target/s390/s390.exp: Make sure the assembler supports htm\n\tinstructions as well.\n\nFrom-SVN: r209294", "tree": {"sha": "36c45831c288ce31ef30c46ee7ce8c410c62304d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36c45831c288ce31ef30c46ee7ce8c410c62304d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f0ad2e592685fd41693f43acb58c4f503ecb2d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0ad2e592685fd41693f43acb58c4f503ecb2d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0ad2e592685fd41693f43acb58c4f503ecb2d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0ad2e592685fd41693f43acb58c4f503ecb2d1/comments", "author": null, "committer": null, "parents": [{"sha": "d8d6ea53a713ae30e8e4ccbe14ebec2002ce1f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d6ea53a713ae30e8e4ccbe14ebec2002ce1f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d6ea53a713ae30e8e4ccbe14ebec2002ce1f2c"}], "stats": {"total": 141, "additions": 73, "deletions": 68}, "files": [{"sha": "f880e75a43e60545e4834a09f412646481b9ca8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0ad2e592685fd41693f43acb58c4f503ecb2d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0ad2e592685fd41693f43acb58c4f503ecb2d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f0ad2e592685fd41693f43acb58c4f503ecb2d1", "patch": "@@ -1,3 +1,13 @@\n+2014-04-11  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.target/s390/htm-nofloat-1.c: Rename to ...\n+\t* gcc.target/s390/htm-nofloat-compile-1.c: ... this one.\n+\t* gcc.target/s390/htm-nofloat-2.c: Add check for htm target and\n+\trename to ...\n+\t* gcc.target/s390/htm-nofloat-1.c: ... this one.\n+\t* gcc.target/s390/s390.exp: Make sure the assembler supports htm\n+\tinstructions as well.\n+\n 2014-04-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/60663"}, {"sha": "6022efb97fee277ebe19a8a23028c34806afb2d7", "filename": "gcc/testsuite/gcc.target/s390/htm-nofloat-1.c", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0ad2e592685fd41693f43acb58c4f503ecb2d1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0ad2e592685fd41693f43acb58c4f503ecb2d1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-1.c?ref=8f0ad2e592685fd41693f43acb58c4f503ecb2d1", "patch": "@@ -1,12 +1,50 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O3 -march=zEC12 -mzarch\" } */\n+/* { dg-do run } */\n+/* { dg-require-effective-target htm } */\n+/* { dg-options \"-O3 -march=zEC12 -mzarch --save-temps\" } */\n \n-int\n-foo ()\n+/* __builtin_tbegin has to emit clobbers for all FPRs since the tbegin\n+   instruction does not automatically preserves them.  If the\n+   transaction body is fully contained in a function the backend tries\n+   after reload to get rid of the FPR save/restore operations\n+   triggered by the clobbers.  This testcase failed since the backend\n+   was able to get rid of all FPR saves/restores and since these were\n+   the only stack operations also of the entire stack space.  So even\n+   the save/restore of the stack pointer was omitted in the end.\n+   However, since the frame layout has been fixed before, the prologue\n+   still generated the stack pointer decrement making foo return with\n+   a modified stack pointer.  */\n+\n+void abort(void);\n+\n+void __attribute__((noinline))\n+foo (int a)\n+{\n+  if (__builtin_tbegin (0) == 0)\n+    __builtin_tend ();\n+}\n+\n+#ifdef __s390x__\n+#define GET_STACK_POINTER(SP)\t\t\t\\\n+  asm volatile (\"stg %%r15, %0\" : \"=QRST\" (SP));\n+#else\n+#define GET_STACK_POINTER(SP)\t\t\t\\\n+  asm volatile (\"st %%r15, %0\" : \"=QR\" (SP));\n+#endif\n+\n+int main(void)\n {\n-  __builtin_tbegin_nofloat (0);\n-  __builtin_tbegin_retry_nofloat (0, 42);\n+  unsigned long new_sp, old_sp;\n+\n+  GET_STACK_POINTER (old_sp);\n+  foo(42);\n+  GET_STACK_POINTER (new_sp);\n+\n+  if (old_sp != new_sp)\n+    abort ();\n+\n+  return 0;\n }\n+\n /* Make sure no FPR saves/restores are emitted.  */\n-/* { dg-final { scan-assembler-not \"std\" } } */\n-/* { dg-final { scan-assembler-not \"ld\" } } */\n+/* { dg-final { scan-assembler-not \"\\tstd\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tld\\t\" } } */"}, {"sha": "59621a4c19bbfaddb384544b2604a38ef16fb060", "filename": "gcc/testsuite/gcc.target/s390/htm-nofloat-2.c", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d6ea53a713ae30e8e4ccbe14ebec2002ce1f2c/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d6ea53a713ae30e8e4ccbe14ebec2002ce1f2c/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-2.c?ref=d8d6ea53a713ae30e8e4ccbe14ebec2002ce1f2c", "patch": "@@ -1,55 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-O3 -mhtm -Wa,-march=zEC12,-mzarch --save-temps\" } */\n-\n-/* __builtin_tbegin has to emit clobbers for all FPRs since the tbegin\n-   instruction does not automatically preserves them.  If the\n-   transaction body is fully contained in a function the backend tries\n-   after reload to get rid of the FPR save/restore operations\n-   triggered by the clobbers.  This testcase failed since the backend\n-   was able to get rid of all FPR saves/restores and since these were\n-   the only stack operations also of the entire stack space.  So even\n-   the save/restore of the stack pointer was omitted in the end.\n-   However, since the frame layout has been fixed before, the prologue\n-   still generated the stack pointer decrement making foo return with\n-   a modified stack pointer.  */\n-\n-void abort(void);\n-\n-void __attribute__((noinline))\n-foo (int a)\n-{\n-  /* This is just to prevent the tbegin code from actually being\n-     executed.  That way the test may even run on machines prior to\n-     zEC12.  */\n-  if (a == 42)\n-    return;\n-\n-  if (__builtin_tbegin (0) == 0)\n-    __builtin_tend ();\n-}\n-\n-#ifdef __s390x__\n-#define GET_STACK_POINTER(SP)\t\t\t\\\n-  asm volatile (\"stg %%r15, %0\" : \"=QRST\" (SP));\n-#else\n-#define GET_STACK_POINTER(SP)\t\t\t\\\n-  asm volatile (\"st %%r15, %0\" : \"=QR\" (SP));\n-#endif\n-\n-int main(void)\n-{\n-  unsigned long new_sp, old_sp;\n-\n-  GET_STACK_POINTER (old_sp);\n-  foo(42);\n-  GET_STACK_POINTER (new_sp);\n-\n-  if (old_sp != new_sp)\n-    abort ();\n-\n-  return 0;\n-}\n-\n-/* Make sure no FPR saves/restores are emitted.  */\n-/* { dg-final { scan-assembler-not \"\\tstd\\t\" } } */\n-/* { dg-final { scan-assembler-not \"\\tld\\t\" } } */"}, {"sha": "df7e2bac874b2f3e14a6243836775ac9057b0a7a", "filename": "gcc/testsuite/gcc.target/s390/htm-nofloat-compile-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0ad2e592685fd41693f43acb58c4f503ecb2d1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-compile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0ad2e592685fd41693f43acb58c4f503ecb2d1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-compile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fhtm-nofloat-compile-1.c?ref=8f0ad2e592685fd41693f43acb58c4f503ecb2d1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=zEC12 -mzarch\" } */\n+\n+int\n+foo ()\n+{\n+  __builtin_tbegin_nofloat (0);\n+  __builtin_tbegin_retry_nofloat (0, 42);\n+}\n+/* Make sure no FPR saves/restores are emitted.  */\n+/* { dg-final { scan-assembler-not \"std\" } } */\n+/* { dg-final { scan-assembler-not \"ld\" } } */"}, {"sha": "f2ba9298615247b63c8c352230cd595f35e060e5", "filename": "gcc/testsuite/gcc.target/s390/s390.exp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0ad2e592685fd41693f43acb58c4f503ecb2d1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0ad2e592685fd41693f43acb58c4f503ecb2d1/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp?ref=8f0ad2e592685fd41693f43acb58c4f503ecb2d1", "patch": "@@ -24,17 +24,17 @@ if ![istarget s390*-*-*] then {\n # Load support procs.\n load_lib gcc-dg.exp\n \n-# Return 1 if htm (etnd - extract nesting depth) instructions can be\n-# compiled.\n+# Return 1 if htm (etnd - extract nesting depth) instructions are\n+# understood by the assembler and can be executed.\n proc check_effective_target_htm { } {\n     if { ![check_runtime s390_check_htm [subst {\n \tint main (void)\n \t{\n-\t    unsigned int nd = 77;\n-\t    asm (\".insn rre,0xb2ec0000,%0,0\" : \"=d\" (nd));\n+\t    unsigned int nd;\n+\t    asm (\"etnd %0\" : \"=d\" (nd));\n \t    return nd;\n \t}\n-    }]] } { return 0 } else { return 1 }\n+    }] \"-march=zEC12 -mzarch\" ] } { return 0 } else { return 1 }\n }\n \n # If a testcase doesn't have special options, use these."}]}