{"sha": "6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVmYzZiN2YwNWQ3ZWE1YmFlMGZiMThkZDJjOGNlYzRhYTY5ZWI0OA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2014-12-19T04:51:53Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2014-12-19T04:51:53Z"}, "message": "* [SH] Modify movsi_ie and movsf_ie patterns for LRA.\n\nFrom-SVN: r218890", "tree": {"sha": "efc586deab7e998c98127f76a9a43a385ca1c0fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efc586deab7e998c98127f76a9a43a385ca1c0fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48/comments", "author": null, "committer": null, "parents": [{"sha": "fc1fcfa0b666f04e7891b5665f418136f2731fad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc1fcfa0b666f04e7891b5665f418136f2731fad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc1fcfa0b666f04e7891b5665f418136f2731fad"}], "stats": {"total": 150, "additions": 148, "deletions": 2}, "files": [{"sha": "255b8dbd61f7e6768c7e6c0ed49404f4b9ae30fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48", "patch": "@@ -1,3 +1,13 @@\n+2014-12-19  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh-protos.h (sh_movsf_ie_ra_split_p): Declare.\n+\t* config/sh/sh.c (sh_movsf_ie_ra_split_p): New function.\n+\t* config/sh/sh.md (movsi_ie): Use \"mr\" constraint for the 8-th\n+\taltarnative of operand 0.\n+\t(movesf_ie): Use \"X\" constraint instead of \"Bsc\".\n+\t(movsf_ie_ra): New insn_and_split.\n+\t(movsf): Use movsfie_ra when lra_in_progress is true.\n+\n 2014-12-19  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/predicates.md (general_movsrc_operand): Allow only"}, {"sha": "b0fc67a07b9747eb7bf880ce167b45179f6e1258", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48", "patch": "@@ -159,6 +159,7 @@ extern rtx sh_find_equiv_gbr_addr (rtx_insn* cur_insn, rtx mem);\n extern int sh_eval_treg_value (rtx op);\n extern HOST_WIDE_INT sh_disp_addr_displacement (rtx mem_op);\n extern int sh_max_mov_insn_displacement (machine_mode mode, bool consider_sh2a);\n+extern bool sh_movsf_ie_ra_split_p (rtx, rtx, rtx);\n \n /* Result value of sh_find_set_of_reg.  */\n struct set_of_reg"}, {"sha": "7851fe86863e7be0b05d97d5f06094a32c4d8755", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48", "patch": "@@ -13291,6 +13291,35 @@ sh_legitimize_address_displacement (rtx *disp, rtx *offs,\n   return false;\n }\n \n+/* Return true if movsf insn should be splited with an additional\n+   register.  */\n+bool\n+sh_movsf_ie_ra_split_p (rtx op0, rtx op1, rtx op2)\n+{\n+  /* op0 == op1 */\n+  if (rtx_equal_p (op0, op1))\n+    return true;\n+  /* fy, FQ, reg */\n+  if (GET_CODE (op1) == CONST_DOUBLE\n+      && ! satisfies_constraint_G (op1)\n+      && ! satisfies_constraint_H (op1)\n+      && REG_P (op0)\n+      && REG_P (op2))\n+    return true;\n+  /* f, r, y */\n+  if (REG_P (op0) && FP_REGISTER_P (REGNO (op0))\n+      && REG_P (op1) && GENERAL_REGISTER_P (REGNO (op1))\n+      && REG_P (op2) && (REGNO (op2) == FPUL_REG))\n+    return true;\n+  /* r, f, y */\n+  if (REG_P (op1) && FP_REGISTER_P (REGNO (op1))\n+      && REG_P (op0) && GENERAL_REGISTER_P (REGNO (op0))\n+      && REG_P (op2) && (REGNO (op2) == FPUL_REG))\n+    return true;\n+\n+  return false;\n+}\n+\n static void\n sh_conditional_register_usage (void)\n {"}, {"sha": "76f5c4ad1ab5b91e97b20d6877279a46c0fbe3a5", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 108, "deletions": 2, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=6efc6b7f05d7ea5bae0fb18dd2c8cec4aa69eb48", "patch": "@@ -6665,7 +6665,7 @@ label:\n ;; TARGET_FMOVD is in effect, and mode switching is done before reload.\n (define_insn \"movsi_ie\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\"\n-\t    \"=r,r,r,r,r,r,r,r,m,<,<,x,l,x,l,y,<,r,y,r,*f,y,*f,y\")\n+\t    \"=r,r,r,r,r,r,r,r,mr,<,<,x,l,x,l,y,<,r,y,r,*f,y,*f,y\")\n \t(match_operand:SI 1 \"general_movsrc_operand\"\n \t \"Q,r,I08,I20,I28,mr,x,l,r,x,l,r,r,>,>,>,y,i,r,y,y,*f,*f,y\"))]\n   \"(TARGET_SH2E || TARGET_SH2A)\n@@ -8329,7 +8329,7 @@ label:\n \t(match_operand:SF 1 \"general_movsrc_operand\"\n \t  \"f,r,G,H,FQ,mf,f,FQ,mr,r,y,f,>,fr,y,r,y,>,y\"))\n    (use (reg:SI FPSCR_MODES_REG))\n-   (clobber (match_scratch:SI 2 \"=X,X,Bsc,Bsc,&z,X,X,X,X,X,X,X,X,y,X,X,X,X,X\"))]\n+   (clobber (match_scratch:SI 2 \"=X,X,X,X,&z,X,X,X,X,X,X,X,X,y,X,X,X,X,X\"))]\n   \"TARGET_SH2E\n    && (arith_reg_operand (operands[0], SFmode) || fpul_operand (operands[0], SFmode)\n        || arith_reg_operand (operands[1], SFmode) || fpul_operand (operands[1], SFmode)\n@@ -8409,6 +8409,104 @@ label:\n       (const_string \"none\")\n       (const_string \"none\")])])\n \n+(define_insn_and_split \"movsf_ie_ra\"\n+  [(set (match_operand:SF 0 \"general_movdst_operand\"\n+\t \"=f,r,f,f,fy,f,m,r,r,m,f,y,y,rf,r,y,<,y,y\")\n+\t(match_operand:SF 1 \"general_movsrc_operand\"\n+\t  \"f,r,G,H,FQ,m,f,FQ,m,r,y,f,>,fr,y,r,y,>,y\"))\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (clobber (match_scratch:SF 2 \"=r,r,X,X,&z,r,r,X,r,r,r,r,r,y,r,r,r,r,r\"))\n+   (const_int 0)]\n+  \"TARGET_SH2E\n+   && (arith_reg_operand (operands[0], SFmode)\n+       || fpul_operand (operands[0], SFmode)\n+       || arith_reg_operand (operands[1], SFmode)\n+       || fpul_operand (operands[1], SFmode))\"\n+  \"@\n+\tfmov\t%1,%0\n+\tmov\t%1,%0\n+\tfldi0\t%0\n+\tfldi1\t%0\n+\t#\n+\tfmov.s\t%1,%0\n+\tfmov.s\t%1,%0\n+\tmov.l\t%1,%0\n+\tmov.l\t%1,%0\n+\tmov.l\t%1,%0\n+\tfsts\tfpul,%0\n+\tflds\t%1,fpul\n+\tlds.l\t%1,%0\n+\t#\n+\tsts\t%1,%0\n+\tlds\t%1,%0\n+\tsts.l\t%1,%0\n+\tlds.l\t%1,%0\n+\t! move optimized away\"\n+  \"reload_completed\n+   && sh_movsf_ie_ra_split_p (operands[0], operands[1], operands[2])\"\n+  [(const_int 0)]\n+{\n+  if (! rtx_equal_p (operands[0], operands[1]))\n+    {\n+      emit_insn (gen_movsf_ie (operands[2], operands[1]));\n+      emit_insn (gen_movsf_ie (operands[0], operands[2]));\n+    }\n+}\n+  [(set_attr \"type\" \"fmove,move,fmove,fmove,pcfload,fload,fstore,pcload,load,\n+\t\t     store,fmove,fmove,load,*,fpul_gp,gp_fpul,fstore,load,nil\")\n+   (set_attr \"late_fp_use\" \"*,*,*,*,*,*,yes,*,*,*,*,*,*,*,yes,*,yes,*,*\")\n+   (set_attr_alternative \"length\"\n+     [(const_int 2)\n+      (const_int 2)\n+      (const_int 2)\n+      (const_int 2)\n+      (const_int 4)\n+      (if_then_else\n+\t(match_test \"TARGET_SH2A\")\n+\t(const_int 4) (const_int 2))\n+      (if_then_else\n+\t(match_test \"TARGET_SH2A\")\n+\t(const_int 4) (const_int 2))\n+      (const_int 2)\n+      (if_then_else\n+\t(match_test \"TARGET_SH2A\")\n+\t(const_int 4) (const_int 2))\n+      (if_then_else\n+\t(match_test \"TARGET_SH2A\")\n+\t(const_int 4) (const_int 2))\n+      (const_int 2)\n+      (const_int 2)\n+      (const_int 2)\n+      (const_int 4)\n+      (const_int 2)\n+      (const_int 2)\n+      (const_int 2)\n+      (const_int 2)\n+      (const_int 0)])\n+  (set_attr_alternative \"fp_mode\"\n+     [(if_then_else (eq_attr \"fmovd\" \"yes\")\n+\t\t    (const_string \"single\") (const_string \"none\"))\n+      (const_string \"none\")\n+      (const_string \"single\")\n+      (const_string \"single\")\n+      (const_string \"none\")\n+      (if_then_else (eq_attr \"fmovd\" \"yes\")\n+\t\t    (const_string \"single\") (const_string \"none\"))\n+      (if_then_else (eq_attr \"fmovd\" \"yes\")\n+\t\t    (const_string \"single\") (const_string \"none\"))\n+      (const_string \"none\")\n+      (const_string \"none\")\n+      (const_string \"none\")\n+      (const_string \"none\")\n+      (const_string \"none\")\n+      (const_string \"none\")\n+      (const_string \"none\")\n+      (const_string \"none\")\n+      (const_string \"none\")\n+      (const_string \"none\")\n+      (const_string \"none\")\n+      (const_string \"none\")])])\n+\n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(match_operand:SF 1 \"register_operand\" \"\"))\n@@ -8439,6 +8537,14 @@ label:\n     }\n   if (TARGET_SH2E)\n     {\n+      if (lra_in_progress)\n+\t{\n+\t  if (GET_CODE (operands[0]) == SCRATCH)\n+\t    DONE;\n+\t  emit_insn (gen_movsf_ie_ra (operands[0], operands[1]));\n+\t  DONE;\n+\t}\n+\n       emit_insn (gen_movsf_ie (operands[0], operands[1]));\n       DONE;\n     }"}]}