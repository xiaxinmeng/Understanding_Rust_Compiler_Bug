{"sha": "50c35c691517291dbb77b1661761bc59950ba101", "node_id": "C_kwDOANBUbNoAKDUwYzM1YzY5MTUxNzI5MWRiYjc3YjE2NjE3NjFiYzU5OTUwYmExMDE", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-10-06T16:42:32Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-10-06T16:44:09Z"}, "message": "openmp: Map holds clause to IFN_ASSUME for Fortran\n\nSame as r13-3107-g847f5addc4d07a2f3b95f5daa50ab4a64dfd957d did for C/C++.\nConvert '!$omp assume holds(cond)' to IFN_ASSUME (cond).\n\ngcc/fortran/\n\t* trans-openmp.cc (gfc_trans_omp_assume): New.\n\t(gfc_trans_omp_directive): Call it.\n\ngcc/testsuite/\n\t* gfortran.dg/gomp/assume-3.f90: New test.\n\t* gfortran.dg/gomp/assume-4.f90: New test.", "tree": {"sha": "3d750d59c788fd9914260ce3a1f62506a462e596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d750d59c788fd9914260ce3a1f62506a462e596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50c35c691517291dbb77b1661761bc59950ba101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c35c691517291dbb77b1661761bc59950ba101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50c35c691517291dbb77b1661761bc59950ba101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50c35c691517291dbb77b1661761bc59950ba101/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa258f6894801aef6785f0327594dc803da63fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa258f6894801aef6785f0327594dc803da63fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa258f6894801aef6785f0327594dc803da63fbd"}], "stats": {"total": 133, "additions": 132, "deletions": 1}, "files": [{"sha": "8ea573f7d029909bd025f49094564b4893acc0cc", "filename": "gcc/fortran/trans-openmp.cc", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c35c691517291dbb77b1661761bc59950ba101/gcc%2Ffortran%2Ftrans-openmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c35c691517291dbb77b1661761bc59950ba101/gcc%2Ffortran%2Ftrans-openmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.cc?ref=50c35c691517291dbb77b1661761bc59950ba101", "patch": "@@ -4570,6 +4570,41 @@ gfc_trans_oacc_wait_directive (gfc_code *code)\n static tree gfc_trans_omp_sections (gfc_code *, gfc_omp_clauses *);\n static tree gfc_trans_omp_workshare (gfc_code *, gfc_omp_clauses *);\n \n+static tree\n+gfc_trans_omp_assume (gfc_code *code)\n+{\n+  stmtblock_t block;\n+  gfc_init_block (&block);\n+  gfc_omp_assumptions *assume = code->ext.omp_clauses->assume;\n+  if (assume)\n+    for (gfc_expr_list *el = assume->holds; el; el = el->next)\n+      {\n+\tlocation_t loc = gfc_get_location (&el->expr->where);\n+\tgfc_se se;\n+\tgfc_init_se (&se, NULL);\n+\tgfc_conv_expr (&se, el->expr);\n+\ttree t;\n+\tif (se.pre.head == NULL_TREE && se.post.head == NULL_TREE)\n+\t  t = se.expr;\n+\telse\n+\t  {\n+\t    tree var = gfc_create_var (TREE_TYPE (se.expr), NULL);\n+\t    stmtblock_t block2;\n+\t    gfc_init_block (&block2);\n+\t    gfc_add_block_to_block (&block2, &se.pre);\n+\t    gfc_add_modify_loc (loc, &block2, var, se.expr);\n+\t    gfc_add_block_to_block (&block2, &se.post);\n+\t    t = gfc_finish_block (&block2);\n+\t    t = build4 (TARGET_EXPR, boolean_type_node, var, t, NULL, NULL);\n+\t  }\n+\tt = build_call_expr_internal_loc (loc, IFN_ASSUME,\n+\t\t\t\t\t  void_type_node, 1, t);\n+\tgfc_add_expr_to_block (&block, t);\n+      }\n+  gfc_add_expr_to_block (&block, gfc_trans_omp_code (code->block->next, true));\n+  return gfc_finish_block (&block);\n+}\n+\n static tree\n gfc_trans_omp_atomic (gfc_code *code)\n {\n@@ -7488,7 +7523,7 @@ gfc_trans_omp_directive (gfc_code *code)\n   switch (code->op)\n     {\n     case EXEC_OMP_ASSUME:\n-      return gfc_trans_omp_code (code->block->next, true);\n+      return gfc_trans_omp_assume (code);\n     case EXEC_OMP_ATOMIC:\n       return gfc_trans_omp_atomic (code);\n     case EXEC_OMP_BARRIER:"}, {"sha": "e5deace306e1c4493ab7cb99d14658f6818a2893", "filename": "gcc/testsuite/gfortran.dg/gomp/assume-3.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c35c691517291dbb77b1661761bc59950ba101/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fassume-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c35c691517291dbb77b1661761bc59950ba101/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fassume-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fassume-3.f90?ref=50c35c691517291dbb77b1661761bc59950ba101", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -O2 -fdump-tree-optimized -fdump-tree-original\" }\n+\n+! { dg-final { scan-tree-dump-times \".ASSUME \\\\(x == 42\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \".ASSUME \\\\(x <= 41\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \".ASSUME \\\\(y <= 6\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \".ASSUME \\\\(y > 5\\\\);\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"return 42;\" 3 \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"return -1;\" \"optimized\" } }\n+\n+integer function foo (x)\n+  implicit none\n+  integer, value :: x\n+  integer :: y\n+  !$omp assume holds (x == 42)\n+    y = x;\n+  !$omp end assume\n+  foo = y\n+end\n+\n+integer function bar (x)\n+  implicit none\n+  integer, value :: x\n+  !$omp assume holds (x < 42)\n+  block\n+  end block\n+  if (x == 42) then\n+    bar = -1\n+    return\n+  end if\n+  bar = 42\n+end\n+\n+integer function foobar (y)\n+  implicit none\n+  integer, value :: y\n+  !$omp assume holds(y > 5) holds (y < 7)\n+  block\n+    if (y == 6) then\n+      foobar = 42\n+      return\n+    end if\n+  end block\n+  foobar = -1\n+end"}, {"sha": "45857c43516e915bd40dc52be2d6bbf24218f1d4", "filename": "gcc/testsuite/gfortran.dg/gomp/assume-4.f90", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50c35c691517291dbb77b1661761bc59950ba101/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fassume-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50c35c691517291dbb77b1661761bc59950ba101/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fassume-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fassume-4.f90?ref=50c35c691517291dbb77b1661761bc59950ba101", "patch": "@@ -0,0 +1,50 @@\n+! { dg-do compile }\n+! { dg-options \"-fopenmp -O2 -fdump-tree-original -fdump-tree-optimized\" }\n+! { dg-final { scan-tree-dump-times \".ASSUME \\\\(i_lower_bound \\\\(\\\\) < i\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \".ASSUME \\\\(TARGET_EXPR <D.\\[0-9\\]+, D.\\[0-9\\]+ = j_upper_bound \\\\(\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 1 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-not \"i_lower_bound\" \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"j_upper_bound\" \"optimized\" } }\n+! { dg-final { scan-tree-dump-not \"__builtin_free\" \"optimized\" } }\n+\n+! Note: Currently, the assumption does not help with optimization in either variant.\n+\n+\n+integer function f(i)\n+  implicit none\n+  integer, value :: i\n+\n+  !$omp assume holds(i > i_lower_bound ())\n+  block\n+    if (i > 4) then\n+      f = 42\n+    else\n+      f = -1\n+    end if\n+  end block\n+contains\n+  function i_lower_bound ()\n+    integer :: i_lower_bound\n+    i_lower_bound = 5\n+  end function\n+end\n+\n+integer function g(j)\n+  implicit none\n+  integer, value :: j\n+\n+  !$omp assume holds(j < j_upper_bound ())\n+  block\n+    if (j < 10) then\n+      g = 42\n+    else\n+      g = -1\n+    end if\n+  end block\n+contains\n+  function j_upper_bound ()\n+    integer, allocatable :: j_upper_bound\n+    j_upper_bound = 10\n+  end function\n+end"}]}