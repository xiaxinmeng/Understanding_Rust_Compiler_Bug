{"sha": "9551c7ec222937e23a96c415de1ca5b55dc4d922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU1MWM3ZWMyMjI5MzdlMjNhOTZjNDE1ZGUxY2E1YjU1ZGM0ZDkyMg==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2014-04-22T15:55:53Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-04-22T15:55:53Z"}, "message": "[AArch64] vqneg and vqabs intrinsics implementation.\n\nThis patch implements vqneg_s64, vqnegd_s64, vqabs_s64 and vqabsd_s64\nAArch64 intrinsics.\n\nFrom-SVN: r209640", "tree": {"sha": "4b27d2d9458997c1bd0383d0b7ddd78f6be17458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b27d2d9458997c1bd0383d0b7ddd78f6be17458"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9551c7ec222937e23a96c415de1ca5b55dc4d922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9551c7ec222937e23a96c415de1ca5b55dc4d922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9551c7ec222937e23a96c415de1ca5b55dc4d922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9551c7ec222937e23a96c415de1ca5b55dc4d922/comments", "author": null, "committer": null, "parents": [{"sha": "f2a2c4b5730db5d407688a732210b4c933515c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a2c4b5730db5d407688a732210b4c933515c0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a2c4b5730db5d407688a732210b4c933515c0c"}], "stats": {"total": 152, "additions": 147, "deletions": 5}, "files": [{"sha": "23d05eeb8a39f3cc08d423eaa936d4997ab8f785", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9551c7ec222937e23a96c415de1ca5b55dc4d922", "patch": "@@ -1,3 +1,15 @@\n+2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc/config/aarch64/aarch64-simd.md (aarch64_s<optab><mode>):\n+\tPattern extended.\n+\t* config/aarch64/aarch64-simd-builtins.def (sqneg): Iterator\n+\textended.\n+\t(sqabs): Likewise.\n+\t* config/aarch64/arm_neon.h (vqneg_s64): New intrinsic.\n+\t(vqnegd_s64): Likewise.\n+\t(vqabs_s64): Likewise.\n+\t(vqabsd_s64): Likewise.\n+\n 2014-04-22  Richard Henderson  <rth@redhat.com>\n \n \t* config/sparc/sparc.c (sparc_init_modes): Hoist GET_MODE_SIZE"}, {"sha": "d4c7403748d00ade9a602fa4ed2bf74e950ce9d5", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=9551c7ec222937e23a96c415de1ca5b55dc4d922", "patch": "@@ -142,8 +142,8 @@\n   BUILTIN_VSQN_HSDI (UNOP, sqmovn, 0)\n   BUILTIN_VSQN_HSDI (UNOP, uqmovn, 0)\n   /* Implemented by aarch64_s<optab><mode>.  */\n-  BUILTIN_VSDQ_I_BHSI (UNOP, sqabs, 0)\n-  BUILTIN_VSDQ_I_BHSI (UNOP, sqneg, 0)\n+  BUILTIN_VSDQ_I (UNOP, sqabs, 0)\n+  BUILTIN_VSDQ_I (UNOP, sqneg, 0)\n \n   BUILTIN_VSD_HSI (QUADOP, sqdmlal_lane, 0)\n   BUILTIN_VSD_HSI (QUADOP, sqdmlsl_lane, 0)"}, {"sha": "753ca1c9e9e65ea5dcec0a3b220117f04269f842", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9551c7ec222937e23a96c415de1ca5b55dc4d922", "patch": "@@ -2610,9 +2610,9 @@\n ;; <su>q<absneg>\n \n (define_insn \"aarch64_s<optab><mode>\"\n-  [(set (match_operand:VSDQ_I_BHSI 0 \"register_operand\" \"=w\")\n-\t(UNQOPS:VSDQ_I_BHSI\n-\t  (match_operand:VSDQ_I_BHSI 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VSDQ_I 0 \"register_operand\" \"=w\")\n+\t(UNQOPS:VSDQ_I\n+\t  (match_operand:VSDQ_I 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"s<optab>\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>\"\n   [(set_attr \"type\" \"neon_<optab><q>\")]"}, {"sha": "75a62e522a0eac78412d2b22d5fe032fce9db7f9", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=9551c7ec222937e23a96c415de1ca5b55dc4d922", "patch": "@@ -2318,6 +2318,12 @@ vqneg_s32 (int32x2_t __a)\n   return (int32x2_t) __builtin_aarch64_sqnegv2si (__a);\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vqneg_s64 (int64x1_t __a)\n+{\n+  return __builtin_aarch64_sqnegdi (__a);\n+}\n+\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vqnegq_s8 (int8x16_t __a)\n {\n@@ -2354,6 +2360,12 @@ vqabs_s32 (int32x2_t __a)\n   return (int32x2_t) __builtin_aarch64_sqabsv2si (__a);\n }\n \n+__extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n+vqabs_s64 (int64x1_t __a)\n+{\n+  return __builtin_aarch64_sqabsdi (__a);\n+}\n+\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vqabsq_s8 (int8x16_t __a)\n {\n@@ -20943,6 +20955,12 @@ vqabss_s32 (int32x1_t __a)\n   return (int32x1_t) __builtin_aarch64_sqabssi (__a);\n }\n \n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vqabsd_s64 (int64_t __a)\n+{\n+  return __builtin_aarch64_sqabsdi (__a);\n+}\n+\n /* vqadd */\n \n __extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n@@ -21561,6 +21579,12 @@ vqnegs_s32 (int32x1_t __a)\n   return (int32x1_t) __builtin_aarch64_sqnegsi (__a);\n }\n \n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vqnegd_s64 (int64_t __a)\n+{\n+  return __builtin_aarch64_sqnegdi (__a);\n+}\n+\n /* vqrdmulh */\n \n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))"}, {"sha": "908646d6823ab14fd3eeba728e8dee4349637430", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9551c7ec222937e23a96c415de1ca5b55dc4d922", "patch": "@@ -1,3 +1,8 @@\n+2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc.target/aarch64/vqneg_s64_1.c: New testcase.\n+\t* gcc.target/aarch64/vqabs_s64_1.c: New testcase.\n+\n 2014-04-22  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.dg/memcpy-5.c: New test."}, {"sha": "3ea532278d6db7aedc0b6cc6c2498658ad80a72b", "filename": "gcc/testsuite/gcc.target/aarch64/vqabs_s64_1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvqabs_s64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvqabs_s64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvqabs_s64_1.c?ref=9551c7ec222937e23a96c415de1ca5b55dc4d922", "patch": "@@ -0,0 +1,54 @@\n+/* Test vqabs_s64 intrinsics work correctly.  */\n+/* { dg-do run } */\n+/* { dg-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+int __attribute__ ((noinline))\n+test_vqabs_s64 (int64x1_t passed, int64_t expected)\n+{\n+  return vget_lane_s64 (vqabs_s64 (passed), 0) != expected;\n+}\n+\n+int __attribute__ ((noinline))\n+test_vqabsd_s64 (int64_t passed, int64_t expected)\n+{\n+  return vqabsd_s64 (passed) != expected;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqabs\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  /* Basic test.  */\n+  if (test_vqabs_s64 (vcreate_s64 (-1), 1))\n+    abort ();\n+  if (test_vqabsd_s64 (-1, 1))\n+    abort ();\n+\n+  /* Getting absolute value of min int64_t.\n+     Note, exact result cannot be represented in int64_t,\n+     so max int64_t is expected.  */\n+  if (test_vqabs_s64 (vcreate_s64 (0x8000000000000000), 0x7fffffffffffffff))\n+    abort ();\n+  if (test_vqabsd_s64 (0x8000000000000000, 0x7fffffffffffffff))\n+    abort ();\n+\n+  /* Another input that gets max int64_t.  */\n+  if (test_vqabs_s64 (vcreate_s64 (0x8000000000000001), 0x7fffffffffffffff))\n+    abort ();\n+  if (test_vqabsd_s64 (0x8000000000000001, 0x7fffffffffffffff))\n+    abort ();\n+\n+  /* Checking that large positive numbers stay the same.  */\n+  if (test_vqabs_s64 (vcreate_s64 (0x7fffffffffffffff), 0x7fffffffffffffff))\n+    abort ();\n+  if (test_vqabsd_s64 (0x7fffffffffffffff, 0x7fffffffffffffff))\n+    abort ();\n+\n+  return 0;\n+}\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a555b6529cba1200c77a1d587ec2d34386e9df97", "filename": "gcc/testsuite/gcc.target/aarch64/vqneg_s64_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvqneg_s64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9551c7ec222937e23a96c415de1ca5b55dc4d922/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvqneg_s64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvqneg_s64_1.c?ref=9551c7ec222937e23a96c415de1ca5b55dc4d922", "patch": "@@ -0,0 +1,47 @@\n+/* Test vqneg_s64 intrinsics work correctly.  */\n+/* { dg-do run } */\n+/* { dg-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+int __attribute__ ((noinline))\n+test_vqneg_s64 (int64x1_t passed, int64_t expected)\n+{\n+  return vget_lane_s64 (vqneg_s64 (passed), 0) != expected;\n+}\n+\n+int __attribute__ ((noinline))\n+test_vqnegd_s64 (int64_t passed, int64_t expected)\n+{\n+  return vqnegd_s64 (passed) != expected;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqneg\\\\td\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  /* Basic test.  */\n+  if (test_vqneg_s64 (vcreate_s64 (-1), 1))\n+    abort ();\n+  if (test_vqnegd_s64 (-1, 1))\n+    abort ();\n+\n+  /* Negating max int64_t.  */\n+  if (test_vqneg_s64 (vcreate_s64 (0x7fffffffffffffff), 0x8000000000000001))\n+    abort ();\n+  if (test_vqnegd_s64 (0x7fffffffffffffff, 0x8000000000000001))\n+    abort ();\n+\n+  /* Negating min int64_t.\n+     Note, exact negation cannot be represented as int64_t.  */\n+  if (test_vqneg_s64 (vcreate_s64 (0x8000000000000000), 0x7fffffffffffffff))\n+    abort ();\n+  if (test_vqnegd_s64 (0x8000000000000000, 0x7fffffffffffffff))\n+    abort ();\n+\n+  return 0;\n+}\n+/* { dg-final { cleanup-saved-temps } } */"}]}