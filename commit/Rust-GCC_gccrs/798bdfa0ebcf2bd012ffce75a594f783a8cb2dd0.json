{"sha": "798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4YmRmYTBlYmNmMmJkMDEyZmZjZTc1YTU5NGY3ODNhOGNiMmRkMA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-17T12:11:33Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-18T09:22:18Z"}, "message": "d: Fix LHS of array concatentation evaluated before the RHS.\n\nIn an array append expression:\n\n    array ~= fun(array);\n\nThe array in the left hand side of the expression was extended before\nevaluating the result of the right hand side, which resulted in the\nnewly uninitialized array index being used before set.\n\nThis fixes that so that the result of the right hand side is always\nsaved in a reusable temporary before assigning to the destination.\n\ngcc/d/ChangeLog:\n\n\tPR d/97843\n\t* d-codegen.cc (build_assign): Evaluate TARGET_EXPR before use in\n\tthe right hand side of an assignment.\n\t* expr.cc (ExprVisitor::visit (CatAssignExp *)): Force a TARGET_EXPR\n\ton the element to append if it is a CALL_EXPR.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/97843\n\t* gdc.dg/torture/pr97843.d: New test.", "tree": {"sha": "46cce232509d2f6ff158cb16d730c099e92cb874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46cce232509d2f6ff158cb16d730c099e92cb874"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d8c3516b67c0f5a8fe8970d0558ee3b97e8281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d8c3516b67c0f5a8fe8970d0558ee3b97e8281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d8c3516b67c0f5a8fe8970d0558ee3b97e8281"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "4c16f6a822b34acc2dc4459f28c247be3f4fd741", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0", "patch": "@@ -1343,7 +1343,10 @@ build_assign (tree_code code, tree lhs, tree rhs)\n \t since that would cause the LHS to be constructed twice.\n \t So we force the TARGET_EXPR to be expanded without a target.  */\n       if (code != INIT_EXPR)\n-\trhs = compound_expr (rhs, TARGET_EXPR_SLOT (rhs));\n+\t{\n+\t  init = compound_expr (init, rhs);\n+\t  rhs = TARGET_EXPR_SLOT (rhs);\n+\t}\n       else\n \t{\n \t  d_mark_addressable (lhs);"}, {"sha": "ef2bf5f2e3689f508181263180a48e3ba5a16c7b", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0", "patch": "@@ -884,6 +884,9 @@ class ExprVisitor : public Visitor\n \t    tree t2 = build_expr (e->e2);\n \t    tree expr = stabilize_expr (&t2);\n \n+\t    if (TREE_CODE (t2) == CALL_EXPR)\n+\t      t2 = force_target_expr (t2);\n+\n \t    result = modify_expr (build_deref (ptrexp), t2);\n \n \t    this->result_ = compound_expr (expr, result);"}, {"sha": "1a417b3235933b0ecd959616d7bb321857c109f7", "filename": "gcc/testsuite/gdc.dg/torture/pr97843.d", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr97843.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr97843.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr97843.d?ref=798bdfa0ebcf2bd012ffce75a594f783a8cb2dd0", "patch": "@@ -0,0 +1,37 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97843\n+// { dg-additional-options \"-fmain -funittest\" }\n+// { dg-do run }\n+// { dg-skip-if \"needs gcc/config.d\" { ! d_runtime } }\n+\n+struct Sdtor\n+{\n+    int value;\n+    ~this() { }\n+}\n+\n+Sdtor sum(Sdtor[] sdtors)\n+{\n+    int result;\n+    foreach (s; sdtors)\n+        result += s.value;\n+    return Sdtor(result);\n+}\n+\n+uint sum(uint[] ints)\n+{\n+    uint result;\n+    foreach(i; ints)\n+        result += i;\n+    return result;\n+}\n+\n+unittest\n+{\n+    Sdtor[] sdtors = [Sdtor(0), Sdtor(1)];\n+    sdtors ~= sum(sdtors);\n+    assert(sdtors == [Sdtor(0), Sdtor(1), Sdtor(1)]);\n+\n+    uint[] ints = [0, 1];\n+    ints ~= ints.sum;\n+    assert(ints == [0, 1, 1]);\n+}"}]}