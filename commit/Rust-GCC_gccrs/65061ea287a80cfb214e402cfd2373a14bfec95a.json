{"sha": "65061ea287a80cfb214e402cfd2373a14bfec95a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwNjFlYTI4N2E4MGNmYjIxNGU0MDJjZmQyMzczYTE0YmZlYzk1YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-18T08:08:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-18T08:08:51Z"}, "message": "phiopt: Optimize partial_ordering spaceship >= 0 -ffinite-math-only [PR94589]\n\nAs mentioned earlier, spaceship_replacement didn't optimize partial_ordering\n>= 0 comparisons, because the possible values are -1, 0, 1, 2 and the\n>= comparison is implemented as (res & 1) == res to choose the 0 and 1\ncases from that.  As we optimize that only with -ffinite-math-only, the\n2 case is assumed not to happen and my earlier match.pd change optimizes\n(res & 1) == res into (res & ~1) == 0, so this patch pattern matches\nthat case and handles it like res >= 0.\n\n2021-05-18  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94589\n\t* tree-ssa-phiopt.c (spaceship_replacement): Pattern match\n\tphi result used in (res & ~1) == 0 comparison as res >= 0 as\n\tres == 2 would be UB with -ffinite-math-only.\n\n\t* g++.dg/opt/pr94589-2.C: Adjust scan-tree-dump count from 14 to 12.", "tree": {"sha": "1f99a7d4ffd69642018df6da8b634301e0fce7ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f99a7d4ffd69642018df6da8b634301e0fce7ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65061ea287a80cfb214e402cfd2373a14bfec95a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65061ea287a80cfb214e402cfd2373a14bfec95a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65061ea287a80cfb214e402cfd2373a14bfec95a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65061ea287a80cfb214e402cfd2373a14bfec95a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2a09773155892e426b90ce8367e2ed6996b44ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a09773155892e426b90ce8367e2ed6996b44ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a09773155892e426b90ce8367e2ed6996b44ef"}], "stats": {"total": 76, "additions": 65, "deletions": 11}, "files": [{"sha": "e9ef84b1912336954c946286c53a63970f8446f2", "filename": "gcc/testsuite/g++.dg/opt/pr94589-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65061ea287a80cfb214e402cfd2373a14bfec95a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65061ea287a80cfb214e402cfd2373a14bfec95a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94589-2.C?ref=65061ea287a80cfb214e402cfd2373a14bfec95a", "patch": "@@ -1,8 +1,8 @@\n // PR tree-optimization/94589\n // { dg-do compile { target c++20 } }\n // { dg-options \"-O2 -g0 -ffast-math -fdump-tree-optimized\" }\n-// { dg-final { scan-tree-dump-times \"\\[ij]_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) \\[ij]_\\[0-9]+\\\\(D\\\\)\" 14 \"optimized\" } }\n-// { dg-final { scan-tree-dump-times \"i_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) 5\\\\.0\" 14 \"optimized\" } }\n+// { dg-final { scan-tree-dump-times \"\\[ij]_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) \\[ij]_\\[0-9]+\\\\(D\\\\)\" 12 \"optimized\" } }\n+// { dg-final { scan-tree-dump-times \"i_\\[0-9]+\\\\(D\\\\) (?:<|<=|==|!=|>|>=) 5\\\\.0\" 12 \"optimized\" } }\n \n #include <compare>\n "}, {"sha": "8e8a08bc6790095ee00e8a3b6e57eb91ece7cf7d", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 63, "deletions": 9, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65061ea287a80cfb214e402cfd2373a14bfec95a/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65061ea287a80cfb214e402cfd2373a14bfec95a/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=65061ea287a80cfb214e402cfd2373a14bfec95a", "patch": "@@ -1887,8 +1887,9 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\t       edge e0, edge e1, gphi *phi,\n \t\t       tree arg0, tree arg1)\n {\n-  if (!INTEGRAL_TYPE_P (TREE_TYPE (PHI_RESULT (phi)))\n-      || TYPE_UNSIGNED (TREE_TYPE (PHI_RESULT (phi)))\n+  tree phires = PHI_RESULT (phi);\n+  if (!INTEGRAL_TYPE_P (TREE_TYPE (phires))\n+      || TYPE_UNSIGNED (TREE_TYPE (phires))\n       || !tree_fits_shwi_p (arg0)\n       || !tree_fits_shwi_p (arg1)\n       || !IN_RANGE (tree_to_shwi (arg0), -1, 2)\n@@ -1902,12 +1903,32 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n \n   use_operand_p use_p;\n   gimple *use_stmt;\n-  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (PHI_RESULT (phi)))\n+  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (phires))\n     return false;\n-  if (!single_imm_use (PHI_RESULT (phi), &use_p, &use_stmt))\n+  if (!single_imm_use (phires, &use_p, &use_stmt))\n     return false;\n   enum tree_code cmp;\n   tree lhs, rhs;\n+  gimple *orig_use_stmt = use_stmt;\n+  tree orig_use_lhs = NULL_TREE;\n+  int prec = TYPE_PRECISION (TREE_TYPE (phires));\n+  if (is_gimple_assign (use_stmt)\n+      && gimple_assign_rhs_code (use_stmt) == BIT_AND_EXPR\n+      && TREE_CODE (gimple_assign_rhs2 (use_stmt)) == INTEGER_CST\n+      && (wi::to_wide (gimple_assign_rhs2 (use_stmt))\n+\t  == wi::shifted_mask (1, prec - 1, false, prec)))\n+    {\n+      /* For partial_ordering result operator>= with unspec as second\n+\t argument is (res & 1) == res, folded by match.pd into\n+\t (res & ~1) == 0.  */\n+      orig_use_lhs = gimple_assign_lhs (use_stmt);\n+      if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (orig_use_lhs))\n+\treturn false;\n+      if (EDGE_COUNT (phi_bb->preds) != 4)\n+\treturn false;\n+      if (!single_imm_use (orig_use_lhs, &use_p, &use_stmt))\n+\treturn false;\n+    }\n   if (gimple_code (use_stmt) == GIMPLE_COND)\n     {\n       cmp = gimple_cond_code (use_stmt);\n@@ -1948,10 +1969,19 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n     default:\n       return false;\n     }\n-  if (lhs != PHI_RESULT (phi)\n+  if (lhs != (orig_use_lhs ? orig_use_lhs : phires)\n       || !tree_fits_shwi_p (rhs)\n       || !IN_RANGE (tree_to_shwi (rhs), -1, 1))\n     return false;\n+  if (orig_use_lhs)\n+    {\n+      if ((cmp != EQ_EXPR && cmp != NE_EXPR) || !integer_zerop (rhs))\n+\treturn false;\n+      /* As for -ffast-math we assume the 2 return to be\n+\t impossible, canonicalize (res & ~1) == 0 into\n+\t res >= 0 and (res & ~1) != 0 as res < 0.  */\n+      cmp = cmp == EQ_EXPR ? GE_EXPR : LT_EXPR;\n+    }\n \n   if (!empty_block_p (middle_bb))\n     return false;\n@@ -2092,7 +2122,7 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\t\t\t? EDGE_TRUE_VALUE : EDGE_FALSE_VALUE)) == 0)\n     return false;\n \n-  /* lhs1 one_cmp rhs1 results in PHI_RESULT (phi) of 1.  */\n+  /* lhs1 one_cmp rhs1 results in phires of 1.  */\n   enum tree_code one_cmp;\n   if ((cmp1 == LT_EXPR)\n       ^ (!integer_onep ((e1->flags & EDGE_TRUE_VALUE) ? arg1 : arg0)))\n@@ -2185,13 +2215,29 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n       use_operand_p use_p;\n       imm_use_iterator iter;\n       bool has_debug_uses = false;\n-      FOR_EACH_IMM_USE_FAST (use_p, iter, PHI_RESULT (phi))\n+      FOR_EACH_IMM_USE_FAST (use_p, iter, phires)\n \t{\n \t  gimple *use_stmt = USE_STMT (use_p);\n+\t  if (orig_use_lhs && use_stmt == orig_use_stmt)\n+\t    continue;\n \t  gcc_assert (is_gimple_debug (use_stmt));\n \t  has_debug_uses = true;\n \t  break;\n \t}\n+      if (orig_use_lhs)\n+\t{\n+\t  if (!has_debug_uses)\n+\t    FOR_EACH_IMM_USE_FAST (use_p, iter, orig_use_lhs)\n+\t      {\n+\t\tgimple *use_stmt = USE_STMT (use_p);\n+\t\tgcc_assert (is_gimple_debug (use_stmt));\n+\t\thas_debug_uses = true;\n+\t      }\n+\t  gimple_stmt_iterator gsi = gsi_for_stmt (orig_use_stmt);\n+\t  tree zero = build_zero_cst (TREE_TYPE (orig_use_lhs));\n+\t  gimple_assign_set_rhs_with_ops (&gsi, INTEGER_CST, zero);\n+\t  update_stmt (orig_use_stmt);\n+\t}\n \n       if (has_debug_uses)\n \t{\n@@ -2203,7 +2249,7 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n \t     Ignore the value of 2, because if NaNs aren't expected,\n \t     all floating point numbers should be comparable.  */\n \t  gimple_stmt_iterator gsi = gsi_after_labels (gimple_bb (phi));\n-\t  tree type = TREE_TYPE (PHI_RESULT (phi));\n+\t  tree type = TREE_TYPE (phires);\n \t  tree temp1 = make_node (DEBUG_EXPR_DECL);\n \t  DECL_ARTIFICIAL (temp1) = 1;\n \t  TREE_TYPE (temp1) = type;\n@@ -2221,10 +2267,18 @@ spaceship_replacement (basic_block cond_bb, basic_block middle_bb,\n \t  t = build3 (COND_EXPR, type, t, build_zero_cst (type), temp1);\n \t  g = gimple_build_debug_bind (temp2, t, phi);\n \t  gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n-\t  replace_uses_by (PHI_RESULT (phi), temp2);\n+\t  replace_uses_by (phires, temp2);\n+\t  if (orig_use_lhs)\n+\t    replace_uses_by (orig_use_lhs, temp2);\n \t}\n     }\n \n+  if (orig_use_lhs)\n+    {\n+      gimple_stmt_iterator gsi = gsi_for_stmt (orig_use_stmt);\n+      gsi_remove (&gsi, true);\n+    }\n+\n   gimple_stmt_iterator psi = gsi_for_stmt (phi);\n   remove_phi_node (&psi, true);\n "}]}