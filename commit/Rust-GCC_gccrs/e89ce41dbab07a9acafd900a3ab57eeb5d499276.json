{"sha": "e89ce41dbab07a9acafd900a3ab57eeb5d499276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5Y2U0MWRiYWIwN2E5YWNhZmQ5MDBhM2FiNTdlZWI1ZDQ5OTI3Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-11-10T15:23:24Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-11-10T15:23:24Z"}, "message": "GCOV: create one intermediate file per a gcno file (PR gcov-profile/82702).\n\n2017-11-10  Martin Liska  <mliska@suse.cz>\n\n\tPR gcov-profile/82702\n\t* gcov.c (main): Handle intermediate files in a different\n\tway.\n\t(get_gcov_intermediate_filename): New function.\n\t(output_gcov_file): Remove support of intermediate files.\n\t(generate_results): Allocate intermediate file.\n\t(release_structures): Clean-up properly fn_end.\n\t(output_intermediate_file): Start iterating with line 1.\n\nFrom-SVN: r254629", "tree": {"sha": "bb60851e031de827e88d896c2c17c15f615561a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb60851e031de827e88d896c2c17c15f615561a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e89ce41dbab07a9acafd900a3ab57eeb5d499276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89ce41dbab07a9acafd900a3ab57eeb5d499276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89ce41dbab07a9acafd900a3ab57eeb5d499276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89ce41dbab07a9acafd900a3ab57eeb5d499276/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "127ef36981ebdfbe3be0f8df710090642a2a4abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/127ef36981ebdfbe3be0f8df710090642a2a4abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/127ef36981ebdfbe3be0f8df710090642a2a4abe"}], "stats": {"total": 107, "additions": 87, "deletions": 20}, "files": [{"sha": "0b547335bee6b64eb586c30bf4db6828a494d2f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89ce41dbab07a9acafd900a3ab57eeb5d499276/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89ce41dbab07a9acafd900a3ab57eeb5d499276/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e89ce41dbab07a9acafd900a3ab57eeb5d499276", "patch": "@@ -1,3 +1,14 @@\n+2017-11-10  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/82702\n+\t* gcov.c (main): Handle intermediate files in a different\n+\tway.\n+\t(get_gcov_intermediate_filename): New function.\n+\t(output_gcov_file): Remove support of intermediate files.\n+\t(generate_results): Allocate intermediate file.\n+\t(release_structures): Clean-up properly fn_end.\n+\t(output_intermediate_file): Start iterating with line 1.\n+\n 2017-11-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/82929"}, {"sha": "3c2c2700ab6b86066fbfa2cb127cee130e93cfdf", "filename": "gcc/gcov.c", "status": "modified", "additions": 76, "deletions": 20, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89ce41dbab07a9acafd900a3ab57eeb5d499276/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89ce41dbab07a9acafd900a3ab57eeb5d499276/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=e89ce41dbab07a9acafd900a3ab57eeb5d499276", "patch": "@@ -784,11 +784,13 @@ main (int argc, char **argv)\n \tprintf (\"Processing file %d out of %d\\n\", argno - first_arg + 1,\n \t\targc - first_arg);\n       process_file (argv[argno]);\n-    }\n-\n-  generate_results (multiple_files ? NULL : argv[argc - 1]);\n \n-  release_structures ();\n+      if (flag_intermediate_format || argno == argc - 1)\n+\t{\n+\t  generate_results (argv[argno]);\n+\t  release_structures ();\n+\t}\n+    }\n \n   return 0;\n }\n@@ -991,6 +993,31 @@ output_intermediate_line (FILE *f, line_info *line, unsigned line_num)\n       }\n }\n \n+/* Get the name of the gcov file.  The return value must be free'd.\n+\n+   It appends the '.gcov' extension to the *basename* of the file.\n+   The resulting file name will be in PWD.\n+\n+   e.g.,\n+   input: foo.da,       output: foo.da.gcov\n+   input: a/b/foo.cc,   output: foo.cc.gcov  */\n+\n+static char *\n+get_gcov_intermediate_filename (const char *file_name)\n+{\n+  const char *gcov = \".gcov\";\n+  char *result;\n+  const char *cptr;\n+\n+  /* Find the 'basename'.  */\n+  cptr = lbasename (file_name);\n+\n+  result = XNEWVEC (char, strlen (cptr) + strlen (gcov) + 1);\n+  sprintf (result, \"%s%s\", cptr, gcov);\n+\n+  return result;\n+}\n+\n /* Output the result in intermediate format used by 'lcov'.\n \n The intermediate format contains a single file named 'foo.cc.gcov',\n@@ -1017,7 +1044,7 @@ output_intermediate_file (FILE *gcov_file, source_info *src)\n \t       flag_demangled_names ? (*it)->demangled_name : (*it)->name);\n     }\n \n-  for (unsigned line_num = 0; line_num <= src->lines.size (); line_num++)\n+  for (unsigned line_num = 1; line_num <= src->lines.size (); line_num++)\n     {\n       vector<function_t *> fns = src->get_functions_at_location (line_num);\n \n@@ -1200,19 +1227,16 @@ output_gcov_file (const char *file_name, source_info *src)\n     {\n       FILE *gcov_file = fopen (gcov_file_name, \"w\");\n       if (gcov_file)\n-        {\n-          fnotice (stdout, \"Creating '%s'\\n\", gcov_file_name);\n-\n-\t  if (flag_intermediate_format)\n-\t    output_intermediate_file (gcov_file, src);\n-\t  else\n-\t    output_lines (gcov_file, src);\n-          if (ferror (gcov_file))\n-            fnotice (stderr, \"Error writing output file '%s'\\n\", gcov_file_name);\n-          fclose (gcov_file);\n-        }\n+\t{\n+\t  fnotice (stdout, \"Creating '%s'\\n\", gcov_file_name);\n+\t  output_lines (gcov_file, src);\n+\t  if (ferror (gcov_file))\n+\t    fnotice (stderr, \"Error writing output file '%s'\\n\",\n+\t\t     gcov_file_name);\n+\t  fclose (gcov_file);\n+\t}\n       else\n-        fnotice (stderr, \"Could not open output file '%s'\\n\", gcov_file_name);\n+\tfnotice (stderr, \"Could not open output file '%s'\\n\", gcov_file_name);\n     }\n   else\n     {\n@@ -1226,6 +1250,8 @@ static void\n generate_results (const char *file_name)\n {\n   function_t *fn;\n+  FILE *gcov_intermediate_file = NULL;\n+  char *gcov_intermediate_filename = NULL;\n \n   for (fn = functions; fn; fn = fn->next)\n     {\n@@ -1256,6 +1282,19 @@ generate_results (const char *file_name)\n \tfile_name = canonicalize_name (file_name);\n     }\n \n+  if (flag_gcov_file && flag_intermediate_format)\n+    {\n+      /* Open the intermediate file.  */\n+      gcov_intermediate_filename = get_gcov_intermediate_filename (file_name);\n+      gcov_intermediate_file = fopen (gcov_intermediate_filename, \"w\");\n+      if (!gcov_intermediate_file)\n+\t{\n+\t  fnotice (stderr, \"Cannot open intermediate output file %s\\n\",\n+\t\t   gcov_intermediate_filename);\n+\t  return;\n+\t}\n+    }\n+\n   for (vector<source_info>::iterator it = sources.begin ();\n        it != sources.end (); it++)\n     {\n@@ -1280,9 +1319,21 @@ generate_results (const char *file_name)\n       total_executed += src->coverage.lines_executed;\n       if (flag_gcov_file)\n \t{\n-\t  output_gcov_file (file_name, src);\n-          fnotice (stdout, \"\\n\");\n-        }\n+\t  if (flag_intermediate_format)\n+\t    /* Output the intermediate format without requiring source\n+\t       files.  This outputs a section to a *single* file.  */\n+\t    output_intermediate_file (gcov_intermediate_file, src);\n+\t  else\n+\t    output_gcov_file (file_name, src);\n+\t  fnotice (stdout, \"\\n\");\n+\t}\n+    }\n+\n+  if (flag_gcov_file && flag_intermediate_format)\n+    {\n+      /* Now we've finished writing the intermediate file.  */\n+      fclose (gcov_intermediate_file);\n+      XDELETEVEC (gcov_intermediate_filename);\n     }\n \n   if (!file_name)\n@@ -1296,11 +1347,16 @@ release_structures (void)\n {\n   function_t *fn;\n \n+  sources.resize (0);\n+  names.resize (0);\n+\n   while ((fn = functions))\n     {\n       functions = fn->next;\n       delete fn;\n     }\n+\n+  fn_end = &functions;\n }\n \n /* Generate the names of the graph and data files.  If OBJECT_DIRECTORY"}]}