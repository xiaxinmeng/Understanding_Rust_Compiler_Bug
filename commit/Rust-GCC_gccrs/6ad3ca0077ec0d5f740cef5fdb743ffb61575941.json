{"sha": "6ad3ca0077ec0d5f740cef5fdb743ffb61575941", "node_id": "C_kwDOANBUbNoAKDZhZDNjYTAwNzdlYzBkNWY3NDBjZWY1ZmRiNzQzZmZiNjE1NzU5NDE", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-25T23:36:37Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-04-25T23:36:37Z"}, "message": "analyzer: fix ICEs on complex constants [PR105365,105366]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/105365\n\tPR analyzer/105366\n\t* svalue.cc\n\t(cmp_cst): Rename to...\n\t(cmp_csts_same_type): ...this.  Convert all recursive calls to\n\tcalls to...\n\t(cmp_csts_and_types): ....this new function.\n\t(svalue::cmp_ptr): Update for renaming of cmp_cst\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/105365\n\tPR analyzer/105366\n\t* gcc.dg/analyzer/pr105365.c: New test.\n\t* gcc.dg/analyzer/pr105366.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "6e69ab62de7a80c21214f93b150b014466186d29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e69ab62de7a80c21214f93b150b014466186d29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ad3ca0077ec0d5f740cef5fdb743ffb61575941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad3ca0077ec0d5f740cef5fdb743ffb61575941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad3ca0077ec0d5f740cef5fdb743ffb61575941", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad3ca0077ec0d5f740cef5fdb743ffb61575941/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5dc2641add6b4f54086d40ae706fda3cdaac7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5dc2641add6b4f54086d40ae706fda3cdaac7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5dc2641add6b4f54086d40ae706fda3cdaac7f5"}], "stats": {"total": 66, "additions": 57, "deletions": 9}, "files": [{"sha": "ed289c6fc317c2806b7a8640086e12f57f5b1c5e", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad3ca0077ec0d5f740cef5fdb743ffb61575941/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad3ca0077ec0d5f740cef5fdb743ffb61575941/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=6ad3ca0077ec0d5f740cef5fdb743ffb61575941", "patch": "@@ -59,6 +59,8 @@ along with GCC; see the file COPYING3.  If not see\n \n namespace ana {\n \n+static int cmp_csts_and_types (const_tree cst1, const_tree cst2);\n+\n /* class svalue and its various subclasses.  */\n \n /* class svalue.  */\n@@ -304,7 +306,7 @@ svalue::implicitly_live_p (const svalue_set *, const region_model *) const\n    of the same type.  */\n \n static int\n-cmp_cst (const_tree cst1, const_tree cst2)\n+cmp_csts_same_type (const_tree cst1, const_tree cst2)\n {\n   gcc_assert (TREE_TYPE (cst1) == TREE_TYPE (cst2));\n   gcc_assert (TREE_CODE (cst1) == TREE_CODE (cst2));\n@@ -323,9 +325,10 @@ cmp_cst (const_tree cst1, const_tree cst2)\n \t\t     TREE_REAL_CST_PTR (cst2),\n \t\t     sizeof (real_value));\n     case COMPLEX_CST:\n-      if (int cmp_real = cmp_cst (TREE_REALPART (cst1), TREE_REALPART (cst2)))\n+      if (int cmp_real = cmp_csts_and_types (TREE_REALPART (cst1),\n+\t\t\t\t\t     TREE_REALPART (cst2)))\n \treturn cmp_real;\n-      return cmp_cst (TREE_IMAGPART (cst1), TREE_IMAGPART (cst2));\n+      return cmp_csts_and_types (TREE_IMAGPART (cst1), TREE_IMAGPART (cst2));\n     case VECTOR_CST:\n       if (int cmp_log2_npatterns\n \t    = ((int)VECTOR_CST_LOG2_NPATTERNS (cst1)\n@@ -340,17 +343,26 @@ cmp_cst (const_tree cst1, const_tree cst2)\n \t{\n \t  const_tree elt1 = VECTOR_CST_ENCODED_ELT (cst1, i);\n \t  const_tree elt2 = VECTOR_CST_ENCODED_ELT (cst2, i);\n-\t  int t1 = TYPE_UID (TREE_TYPE (elt1));\n-\t  int t2 = TYPE_UID (TREE_TYPE (elt2));\n-\t  if (int cmp_type = t1 - t2)\n-\t    return cmp_type;\n-\t  if (int el_cmp = cmp_cst (elt1, elt2))\n+\t  if (int el_cmp = cmp_csts_and_types (elt1, elt2))\n \t    return el_cmp;\n \t}\n       return 0;\n     }\n }\n \n+/* Comparator for imposing a deterministic order on constants that might\n+   not be of the same type.  */\n+\n+static int\n+cmp_csts_and_types (const_tree cst1, const_tree cst2)\n+{\n+  int t1 = TYPE_UID (TREE_TYPE (cst1));\n+  int t2 = TYPE_UID (TREE_TYPE (cst2));\n+  if (int cmp_type = t1 - t2)\n+    return cmp_type;\n+  return cmp_csts_same_type (cst1, cst2);\n+}\n+\n /* Comparator for imposing a deterministic order on svalues.  */\n \n int\n@@ -382,7 +394,7 @@ svalue::cmp_ptr (const svalue *sval1, const svalue *sval2)\n \tconst constant_svalue *constant_sval2 = (const constant_svalue *)sval2;\n \tconst_tree cst1 = constant_sval1->get_constant ();\n \tconst_tree cst2 = constant_sval2->get_constant ();\n-\treturn cmp_cst (cst1, cst2);\n+\treturn cmp_csts_same_type (cst1, cst2);\n       }\n       break;\n     case SK_UNKNOWN:"}, {"sha": "aa576d086328950e4c8a15b2314f826a33b10a75", "filename": "gcc/testsuite/gcc.dg/analyzer/pr105365.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad3ca0077ec0d5f740cef5fdb743ffb61575941/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105365.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad3ca0077ec0d5f740cef5fdb743ffb61575941/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105365.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105365.c?ref=6ad3ca0077ec0d5f740cef5fdb743ffb61575941", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-require-effective-target int128 } */\n+\n+typedef _Float32 f32;\n+typedef _Complex _Float32 cf32;\n+_Float32 g;\n+__int128 i;\n+\n+extern void bar(int);\n+\n+void\n+foo(_Float32 k) {\n+  f32 f = 0;\n+  f /= (_Complex char)__builtin_llround(g);\n+  k /= (cf32)__builtin_copysignf(0, i);\n+  bar(f + k);\n+  foo(0);\n+}"}, {"sha": "3dba870e4e96031ae0cfe2ee68c6b4d445e014e2", "filename": "gcc/testsuite/gcc.dg/analyzer/pr105366.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad3ca0077ec0d5f740cef5fdb743ffb61575941/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105366.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad3ca0077ec0d5f740cef5fdb743ffb61575941/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105366.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpr105366.c?ref=6ad3ca0077ec0d5f740cef5fdb743ffb61575941", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-require-effective-target int128 } */\n+/* { dg-additional-options \"-O\" } */\n+\n+extern void bar(int);\n+extern void baz(void);\n+\n+typedef unsigned u32;\n+\n+void\n+foo(u32 u, __int128 i) {\n+  baz();\n+  _Complex int c = i;\n+  c /= (u32)(__UINTPTR_TYPE__)foo;\n+  short s = (short)(__UINTPTR_TYPE__)foo;\n+  u /= (_Complex short)s;\n+  u32 r = u + c;\n+  bar(r);\n+  foo(0, 0);\n+}"}]}