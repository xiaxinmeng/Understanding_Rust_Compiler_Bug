{"sha": "8197ac2f3070fdaa79aac6541e45fbfdec64ccc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE5N2FjMmYzMDcwZmRhYTc5YWFjNjU0MWU0NWZiZmRlYzY0Y2NjNA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-08-10T17:43:28Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-08-10T17:43:28Z"}, "message": "print-tree.c (print_node): Print location using the established format %s:%i%i.\n\n\ngcc/ChangeLog:\n\n\t* print-tree.c (print_node): Print location using the established\n\tformat %s:%i%i.\n\tReplace spaces with colons.\n\t(debug_raw, debug): Ditto.\n\nFrom-SVN: r251030", "tree": {"sha": "86e32f92c1db431db6daf6e3578363e0c540a08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86e32f92c1db431db6daf6e3578363e0c540a08a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8197ac2f3070fdaa79aac6541e45fbfdec64ccc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8197ac2f3070fdaa79aac6541e45fbfdec64ccc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8197ac2f3070fdaa79aac6541e45fbfdec64ccc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8197ac2f3070fdaa79aac6541e45fbfdec64ccc4/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a8923facae32e5cb1886f885fb5eb64d4614b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a8923facae32e5cb1886f885fb5eb64d4614b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a8923facae32e5cb1886f885fb5eb64d4614b73"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "cc434d2d33b4a629fed6fe2b51f2c5bf322c750a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8197ac2f3070fdaa79aac6541e45fbfdec64ccc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8197ac2f3070fdaa79aac6541e45fbfdec64ccc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8197ac2f3070fdaa79aac6541e45fbfdec64ccc4", "patch": "@@ -1,3 +1,10 @@\n+2017-08-10  Martin Sebor  <msebor@redhat.com>\n+\n+\t* print-tree.c (print_node): Print location using the established\n+\tformat %s:%i%i.\n+\tReplace spaces with colons.\n+\t(debug_raw, debug): Ditto.\n+\n 2017-08-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/81586"}, {"sha": "30c8d721433728b152f3bdbb711283cd988077b2", "filename": "gcc/print-tree.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8197ac2f3070fdaa79aac6541e45fbfdec64ccc4/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8197ac2f3070fdaa79aac6541e45fbfdec64ccc4/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=8197ac2f3070fdaa79aac6541e45fbfdec64ccc4", "patch": "@@ -444,39 +444,39 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \n \n       xloc = expand_location (DECL_SOURCE_LOCATION (node));\n-      fprintf (file, \" file %s line %d col %d\", xloc.file, xloc.line,\n+      fprintf (file, \" %s:%d:%d\", xloc.file, xloc.line,\n \t       xloc.column);\n \n       if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n \t{\n \t  print_node (file, \"size\", DECL_SIZE (node), indent + 4);\n-\t  print_node (file, \"unit size\", DECL_SIZE_UNIT (node), indent + 4);\n+\t  print_node (file, \"unit-size\", DECL_SIZE_UNIT (node), indent + 4);\n \n \t  if (code != FUNCTION_DECL || DECL_BUILT_IN (node))\n \t    indent_to (file, indent + 3);\n \n \t  if (DECL_USER_ALIGN (node))\n \t    fprintf (file, \" user\");\n \n-\t  fprintf (file, \" align %d\", DECL_ALIGN (node));\n+\t  fprintf (file, \" align:%d\", DECL_ALIGN (node));\n \t  if (code == FIELD_DECL)\n \t    fprintf (file, \" offset_align \" HOST_WIDE_INT_PRINT_UNSIGNED,\n \t\t     DECL_OFFSET_ALIGN (node));\n \n \t  if (code == FUNCTION_DECL && DECL_BUILT_IN (node))\n \t    {\n \t      if (DECL_BUILT_IN_CLASS (node) == BUILT_IN_MD)\n-\t\tfprintf (file, \" built-in BUILT_IN_MD %d\", DECL_FUNCTION_CODE (node));\n+\t\tfprintf (file, \" built-in: BUILT_IN_MD:%d\", DECL_FUNCTION_CODE (node));\n \t      else\n-\t\tfprintf (file, \" built-in %s:%s\",\n+\t\tfprintf (file, \" built-in: %s:%s\",\n \t\t\t built_in_class_names[(int) DECL_BUILT_IN_CLASS (node)],\n \t\t\t built_in_names[(int) DECL_FUNCTION_CODE (node)]);\n \t    }\n \t}\n       if (code == FIELD_DECL)\n \t{\n \t  print_node (file, \"offset\", DECL_FIELD_OFFSET (node), indent + 4);\n-\t  print_node (file, \"bit offset\", DECL_FIELD_BIT_OFFSET (node),\n+\t  print_node (file, \"bit-offset\", DECL_FIELD_BIT_OFFSET (node),\n \t\t      indent + 4);\n \t  if (DECL_BIT_FIELD_TYPE (node))\n \t    print_node (file, \"bit_field_type\", DECL_BIT_FIELD_TYPE (node),\n@@ -597,27 +597,27 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n       fprintf (file, \" %s\", GET_MODE_NAME (mode));\n \n       print_node (file, \"size\", TYPE_SIZE (node), indent + 4);\n-      print_node (file, \"unit size\", TYPE_SIZE_UNIT (node), indent + 4);\n+      print_node (file, \"unit-size\", TYPE_SIZE_UNIT (node), indent + 4);\n       indent_to (file, indent + 3);\n \n       if (TYPE_USER_ALIGN (node))\n \tfprintf (file, \" user\");\n \n-      fprintf (file, \" align %d symtab %d alias set \" HOST_WIDE_INT_PRINT_DEC,\n+      fprintf (file, \" align:%d symtab:%d alias-set \" HOST_WIDE_INT_PRINT_DEC,\n \t       TYPE_ALIGN (node), TYPE_SYMTAB_ADDRESS (node),\n \t       (HOST_WIDE_INT) TYPE_ALIAS_SET (node));\n \n       if (TYPE_STRUCTURAL_EQUALITY_P (node))\n-\tfprintf (file, \" structural equality\");\n+\tfprintf (file, \" structural-equality\");\n       else\n-\tdump_addr (file, \" canonical type \", TYPE_CANONICAL (node));\n+\tdump_addr (file, \" canonical-type \", TYPE_CANONICAL (node));\n \n       print_node (file, \"attributes\", TYPE_ATTRIBUTES (node), indent + 4);\n \n       if (INTEGRAL_TYPE_P (node) || code == REAL_TYPE\n \t  || code == FIXED_POINT_TYPE)\n \t{\n-\t  fprintf (file, \" precision %d\", TYPE_PRECISION (node));\n+\t  fprintf (file, \" precision:%d\", TYPE_PRECISION (node));\n \t  print_node_brief (file, \"min\", TYPE_MIN_VALUE (node), indent + 4);\n \t  print_node_brief (file, \"max\", TYPE_MAX_VALUE (node), indent + 4);\n \t}\n@@ -627,7 +627,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n       else if (code == ARRAY_TYPE)\n \tprint_node (file, \"domain\", TYPE_DOMAIN (node), indent + 4);\n       else if (code == VECTOR_TYPE)\n-\tfprintf (file, \" nunits %d\", (int) TYPE_VECTOR_SUBPARTS (node));\n+\tfprintf (file, \" nunits:%d\", (int) TYPE_VECTOR_SUBPARTS (node));\n       else if (code == RECORD_TYPE\n \t       || code == UNION_TYPE\n \t       || code == QUAL_UNION_TYPE)\n@@ -686,7 +686,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t      /* Buffer big enough to format a 32-bit UINT_MAX into, plus\n \t\t the text.  */\n \t      char temp[15];\n-\t      sprintf (temp, \"arg %u\", i);\n+\t      sprintf (temp, \"arg:%u\", i);\n \t      print_node (file, temp, arg, indent + 4);\n \t      i++;\n \t    }\n@@ -701,7 +701,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t\t the text.  */\n \t      char temp[15];\n \n-\t      sprintf (temp, \"arg %d\", i);\n+\t      sprintf (temp, \"arg:%d\", i);\n \t      print_node (file, temp, TREE_OPERAND (node, i), indent + 4);\n \t    }\n \t}\n@@ -771,9 +771,9 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t\t    break;\n \t\tj--;\n \t\tif (i == j)\n-\t\t  sprintf (buf, \"elt%u: \", i);\n+\t\t  sprintf (buf, \"elt:%u: \", i);\n \t\telse\n-\t\t  sprintf (buf, \"elt%u...elt%u: \", i, j);\n+\t\t  sprintf (buf, \"elt:%u...%u: \", i, j);\n \t\tprint_node (file, buf, VECTOR_CST_ELT (node, i), indent + 4);\n \t\ti = j;\n \t      }\n@@ -814,14 +814,14 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \n \tcase TREE_VEC:\n \t  len = TREE_VEC_LENGTH (node);\n-\t  fprintf (file, \" length %d\", len);\n+\t  fprintf (file, \" length:%d\", len);\n \t  for (i = 0; i < len; i++)\n \t    if (TREE_VEC_ELT (node, i))\n \t      {\n \t      /* Buffer big enough to format a 32-bit UINT_MAX into, plus\n \t\t the text.  */\n \t\tchar temp[15];\n-\t\tsprintf (temp, \"elt %d\", i);\n+\t\tsprintf (temp, \"elt:%d\", i);\n \t\tprint_node (file, temp, TREE_VEC_ELT (node, i), indent + 4);\n \t      }\n \t  break;\n@@ -831,7 +831,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t    unsigned HOST_WIDE_INT cnt;\n \t    tree index, value;\n \t    len = CONSTRUCTOR_NELTS (node);\n-\t    fprintf (file, \" lngt %d\", len);\n+\t    fprintf (file, \" length:%d\", len);\n \t    FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (node),\n \t\t\t\t      cnt, index, value)\n \t      {\n@@ -885,7 +885,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t  }\n \n \t  indent_to (file, indent + 4);\n-\t  fprintf (file, \"version %u\", SSA_NAME_VERSION (node));\n+\t  fprintf (file, \"version:%u\", SSA_NAME_VERSION (node));\n \t  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (node))\n \t    fprintf (file, \" in-abnormal-phi\");\n \t  if (SSA_NAME_IN_FREE_LIST (node))\n@@ -907,7 +907,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t      for (i = 0; i < omp_clause_num_ops[OMP_CLAUSE_CODE (node)]; i++)\n \t\t{\n \t\t  indent_to (file, indent + 4);\n-\t\t  fprintf (file, \"op %d:\", i);\n+\t\t  fprintf (file, \"op-%d:\", i);\n \t\t  print_node_brief (file, \"\", OMP_CLAUSE_OPERAND (node, i), 0);\n \t\t}\n \t    }\n@@ -921,19 +921,19 @@ print_node (FILE *file, const char *prefix, tree node, int indent,\n \t  cl_target_option_print (file, indent + 4, TREE_TARGET_OPTION (node));\n \t  break;\n \tcase IMPORTED_DECL:\n-\t  fprintf (file, \" imported declaration\");\n-\t  print_node_brief (file, \"associated declaration\",\n+\t  fprintf (file, \" imported-declaration\");\n+\t  print_node_brief (file, \"associated-declaration\",\n \t\t\t    IMPORTED_DECL_ASSOCIATED_DECL (node),\n \t\t\t    indent + 4);\n \t  break;\n \n \tcase TREE_BINFO:\n-\t  fprintf (file, \" bases %d\",\n+\t  fprintf (file, \" bases:%d\",\n \t\t   vec_safe_length (BINFO_BASE_BINFOS (node)));\n \t  print_node_brief (file, \"offset\", BINFO_OFFSET (node), indent + 4);\n \t  print_node_brief (file, \"virtuals\", BINFO_VIRTUALS (node),\n \t\t\t    indent + 4);\n-\t  print_node_brief (file, \"inheritance chain\",\n+\t  print_node_brief (file, \"inheritance-chain\",\n \t\t\t    BINFO_INHERITANCE_CHAIN (node),\n \t\t\t    indent + 4);\n \t  break;\n@@ -1086,7 +1086,7 @@ debug_raw (vec<tree, va_gc> &ref)\n \n   FOR_EACH_VEC_ELT (ref, ix, elt)\n     {\n-      fprintf (stderr, \"elt %d \", ix);\n+      fprintf (stderr, \"elt:%d \", ix);\n       debug_raw (elt);\n     }\n }\n@@ -1103,7 +1103,7 @@ debug (vec<tree, va_gc> &ref)\n \n   FOR_EACH_VEC_ELT (ref, ix, elt)\n     {\n-      fprintf (stderr, \"elt %d \", ix);\n+      fprintf (stderr, \"elt:%d \", ix);\n       debug (elt);\n     }\n }"}]}