{"sha": "692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkyYjExMzFhN2NjMGM1YmZhMzEzN2E2NDg5YjRlZjk3MTViNjM1ZQ==", "commit": {"author": {"name": "Max Ostapenko", "email": "m.ostapenko@partner.samsung.com", "date": "2015-10-22T09:47:17Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2015-10-22T09:47:17Z"}, "message": "Fix bootstrap on x86_64-apple-darwin14 after r229119.\n\nlibsanitizer/\n\n\tPR bootstrap/68041\n\t* configure.ac (link_sanitizer_common): Link against librt only if it\n\tcontains shm_open, required by sanitizers.\n\t(CXX_ABI_NEEDED): Remove variable.\n\t* configure: Regenerate.\n\t* ubsan/Makefile.am (libubsan_la_LIBADD): Do not add -lc++abi anymore.\n\t* ubsan/Makefile.in: Regenerate.\n\nFrom-SVN: r229168", "tree": {"sha": "b707a17b008e0a523dd80cc5934ebfd02843aad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b707a17b008e0a523dd80cc5934ebfd02843aad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/comments", "author": null, "committer": null, "parents": [{"sha": "a8fc25795155d4c4d18c8c5b099748a8178b38f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8fc25795155d4c4d18c8c5b099748a8178b38f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8fc25795155d4c4d18c8c5b099748a8178b38f6"}], "stats": {"total": 159, "additions": 128, "deletions": 31}, "files": [{"sha": "f105e47b9f0537988c28f1d3b187bcf5a0c046e4", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "patch": "@@ -1,3 +1,13 @@\n+2015-10-22  Maxim Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\tPR bootstrap/68041\n+\t* configure.ac (link_sanitizer_common): Link against librt only if it\n+\tcontains shm_open, required by sanitizers.\n+\t(CXX_ABI_NEEDED): Remove variable.\n+\t* configure: Regenerate.\n+\t* ubsan/Makefile.am (libubsan_la_LIBADD): Do not add -lc++abi anymore.\n+\t* ubsan/Makefile.in: Regenerate.\n+\n 2015-10-21  Maxim Ostapenko  <m.ostapenko@partner.samsung.com>\n \n \t* HOWTO_MERGE: New file."}, {"sha": "2701ee7a8ee0a1423810a43c1867b661e5f5f65b", "filename": "libsanitizer/configure", "status": "modified", "additions": 97, "deletions": 19, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/libsanitizer%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/libsanitizer%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure?ref=692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "patch": "@@ -616,8 +616,6 @@ BACKTRACE_SUPPORTED\n FORMAT_FILE\n SANITIZER_SUPPORTED_FALSE\n SANITIZER_SUPPORTED_TRUE\n-USE_CXX_ABI_FLAG_FALSE\n-USE_CXX_ABI_FLAG_TRUE\n USING_MAC_INTERPOSE_FALSE\n USING_MAC_INTERPOSE_TRUE\n link_liblsan\n@@ -12029,7 +12027,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12032 \"configure\"\n+#line 12030 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12135,7 +12133,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12138 \"configure\"\n+#line 12136 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15516,7 +15514,51 @@ done\n \n \n # Common libraries that we need to link against for all sanitizer libs.\n-link_sanitizer_common='-lrt -lpthread -ldl -lm'\n+link_sanitizer_common='-lpthread -ldl -lm'\n+\n+# At least for glibc, shm_open is in librt.  But don't pull that\n+# in if it still doesn't give us the function we want.  This\n+# test is copied from libgomp.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for shm_open in -lrt\" >&5\n+$as_echo_n \"checking for shm_open in -lrt... \" >&6; }\n+if test \"${ac_cv_lib_rt_shm_open+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lrt  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char shm_open ();\n+int\n+main ()\n+{\n+return shm_open ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_rt_shm_open=yes\n+else\n+  ac_cv_lib_rt_shm_open=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_rt_shm_open\" >&5\n+$as_echo \"$ac_cv_lib_rt_shm_open\" >&6; }\n+if test \"x$ac_cv_lib_rt_shm_open\" = x\"\"yes; then :\n+  link_sanitizer_common=\"-lrt $link_sanitizer_common\"\n+fi\n+\n \n # Set up the set of additional libraries that we need to link against for libasan.\n link_libasan=$link_sanitizer_common\n@@ -15534,9 +15576,57 @@ link_libubsan=$link_sanitizer_common\n link_liblsan=$link_sanitizer_common\n \n \n+\n+# At least for glibc, clock_gettime is in librt.  But don't pull that\n+# in if it still doesn't give us the function we want.  This\n+# test is copied from libgomp.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for clock_gettime in -lrt\" >&5\n+$as_echo_n \"checking for clock_gettime in -lrt... \" >&6; }\n+if test \"${ac_cv_lib_rt_clock_gettime+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lrt  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char clock_gettime ();\n+int\n+main ()\n+{\n+return clock_gettime ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_rt_clock_gettime=yes\n+else\n+  ac_cv_lib_rt_clock_gettime=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_rt_clock_gettime\" >&5\n+$as_echo \"$ac_cv_lib_rt_clock_gettime\" >&6; }\n+if test \"x$ac_cv_lib_rt_clock_gettime\" = x\"\"yes; then :\n+  link_libasan=\"-lrt $link_libasan\"\n+link_libtsan=\"-lrt $link_libtsan\"\n+# Other sanitizers do not override clock_* API\n+\n+fi\n+\n+\n case \"$host\" in\n-  *-*-darwin*) MAC_INTERPOSE=true ; enable_static=no ; CXX_ABI_NEEDED=true ;;\n-  *) MAC_INTERPOSE=false ; CXX_ABI_NEEDED=false ;;\n+  *-*-darwin*) MAC_INTERPOSE=true ; enable_static=no ;;\n+  *) MAC_INTERPOSE=false ;;\n esac\n  if $MAC_INTERPOSE; then\n   USING_MAC_INTERPOSE_TRUE=\n@@ -15546,14 +15636,6 @@ else\n   USING_MAC_INTERPOSE_FALSE=\n fi\n \n- if $CXX_ABI_NEEDED; then\n-  USE_CXX_ABI_FLAG_TRUE=\n-  USE_CXX_ABI_FLAG_FALSE='#'\n-else\n-  USE_CXX_ABI_FLAG_TRUE='#'\n-  USE_CXX_ABI_FLAG_FALSE=\n-fi\n-\n \n backtrace_supported=yes\n \n@@ -16511,10 +16593,6 @@ if test -z \"${USING_MAC_INTERPOSE_TRUE}\" && test -z \"${USING_MAC_INTERPOSE_FALSE\n   as_fn_error \"conditional \\\"USING_MAC_INTERPOSE\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${USE_CXX_ABI_FLAG_TRUE}\" && test -z \"${USE_CXX_ABI_FLAG_FALSE}\"; then\n-  as_fn_error \"conditional \\\"USE_CXX_ABI_FLAG\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n if test -z \"${SANITIZER_SUPPORTED_TRUE}\" && test -z \"${SANITIZER_SUPPORTED_FALSE}\"; then\n   as_fn_error \"conditional \\\"SANITIZER_SUPPORTED\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "81fd46d2980ae41c121051e71c630f2a31951c01", "filename": "libsanitizer/configure.ac", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/libsanitizer%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/libsanitizer%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure.ac?ref=692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "patch": "@@ -96,7 +96,13 @@ AM_CONDITIONAL(LSAN_SUPPORTED, [test \"x$LSAN_SUPPORTED\" = \"xyes\"])\n AC_CHECK_FUNCS(clock_getres clock_gettime clock_settime)\n \n # Common libraries that we need to link against for all sanitizer libs.\n-link_sanitizer_common='-lrt -lpthread -ldl -lm'\n+link_sanitizer_common='-lpthread -ldl -lm'\n+\n+# At least for glibc, shm_open is in librt.  But don't pull that\n+# in if it still doesn't give us the function we want.  This\n+# test is copied from libgomp.\n+AC_CHECK_LIB(rt, shm_open,\n+  [link_sanitizer_common=\"-lrt $link_sanitizer_common\"])\n \n # Set up the set of additional libraries that we need to link against for libasan.\n link_libasan=$link_sanitizer_common\n@@ -114,12 +120,21 @@ AC_SUBST(link_libubsan)\n link_liblsan=$link_sanitizer_common\n AC_SUBST(link_liblsan)\n \n+\n+# At least for glibc, clock_gettime is in librt.  But don't pull that\n+# in if it still doesn't give us the function we want.  This\n+# test is copied from libgomp.\n+AC_CHECK_LIB(rt, clock_gettime,\n+  [link_libasan=\"-lrt $link_libasan\"\n+link_libtsan=\"-lrt $link_libtsan\"\n+# Other sanitizers do not override clock_* API\n+])\n+\n case \"$host\" in\n-  *-*-darwin*) MAC_INTERPOSE=true ; enable_static=no ; CXX_ABI_NEEDED=true ;;\n-  *) MAC_INTERPOSE=false ; CXX_ABI_NEEDED=false ;;\n+  *-*-darwin*) MAC_INTERPOSE=true ; enable_static=no ;;\n+  *) MAC_INTERPOSE=false ;;\n esac\n AM_CONDITIONAL(USING_MAC_INTERPOSE, $MAC_INTERPOSE)\n-AM_CONDITIONAL(USE_CXX_ABI_FLAG, $CXX_ABI_NEEDED)\n \n backtrace_supported=yes\n "}, {"sha": "9e70b12d3fdc6cfd66cbb32c67c84018fda9b728", "filename": "libsanitizer/ubsan/Makefile.am", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/libsanitizer%2Fubsan%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/libsanitizer%2Fubsan%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2FMakefile.am?ref=692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "patch": "@@ -35,9 +35,6 @@ if LIBBACKTRACE_SUPPORTED\n libubsan_la_LIBADD += $(top_builddir)/libbacktrace/libsanitizer_libbacktrace.la\n endif\n libubsan_la_LIBADD += $(LIBSTDCXX_RAW_CXX_LDFLAGS)\n-if USE_CXX_ABI_FLAG\n-libubsan_la_LIBADD += -lc++abi\n-endif\n libubsan_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(link_libubsan)\n \n # Use special rules for files that require RTTI support."}, {"sha": "51d4da58516bcd4be6bd250df1e609002fec608e", "filename": "libsanitizer/ubsan/Makefile.in", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/libsanitizer%2Fubsan%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/692b1131a7cc0c5bfa3137a6489b4ef9715b635e/libsanitizer%2Fubsan%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2FMakefile.in?ref=692b1131a7cc0c5bfa3137a6489b4ef9715b635e", "patch": "@@ -54,7 +54,6 @@ host_triplet = @host@\n target_triplet = @target@\n @USING_MAC_INTERPOSE_FALSE@am__append_1 = $(top_builddir)/interception/libinterception.la\n @LIBBACKTRACE_SUPPORTED_TRUE@am__append_2 = $(top_builddir)/libbacktrace/libsanitizer_libbacktrace.la\n-@USE_CXX_ABI_FLAG_TRUE@am__append_3 = -lc++abi\n subdir = ubsan\n DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n@@ -107,8 +106,7 @@ LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__DEPENDENCIES_1 =\n libubsan_la_DEPENDENCIES =  \\\n \t$(top_builddir)/sanitizer_common/libsanitizer_common.la \\\n-\t$(am__append_1) $(am__append_2) $(am__DEPENDENCIES_1) \\\n-\t$(am__DEPENDENCIES_1)\n+\t$(am__append_1) $(am__append_2) $(am__DEPENDENCIES_1)\n am__objects_1 = ubsan_diag.lo ubsan_flags.lo ubsan_handlers.lo \\\n \tubsan_handlers_cxx.lo ubsan_init.lo ubsan_type_hash.lo \\\n \tubsan_type_hash_itanium.lo ubsan_type_hash_win.lo \\\n@@ -312,8 +310,7 @@ ubsan_files = \\\n libubsan_la_SOURCES = $(ubsan_files) \n libubsan_la_LIBADD =  \\\n \t$(top_builddir)/sanitizer_common/libsanitizer_common.la \\\n-\t$(am__append_1) $(am__append_2) $(LIBSTDCXX_RAW_CXX_LDFLAGS) \\\n-\t$(am__append_3)\n+\t$(am__append_1) $(am__append_2) $(LIBSTDCXX_RAW_CXX_LDFLAGS)\n libubsan_la_LDFLAGS = -version-info `grep -v '^\\#' $(srcdir)/libtool-version` $(link_libubsan)\n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS"}]}