{"sha": "e2bef702d6db5181253b7edd7f9ca9c88abedd00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJiZWY3MDJkNmRiNTE4MTI1M2I3ZWRkN2Y5Y2E5Yzg4YWJlZGQwMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-02T17:29:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-02T17:29:25Z"}, "message": "dwarf2out.c (dwarf2out_line): Constify `lastfile'.\n\n        * dwarf2out.c (dwarf2out_line): Constify `lastfile'.\n        * except.c (expand_rethrow): Remove unused variable.\n        * expr.c (do_jump_by_parts_greater_rtx): Likewise.\n        * flow.c (replace_insns): Likewise.\n        (create_edge_list, verify_edge_list): Likewise.\n        * gcse.c (cprop_cc0_jump): Protect declaration with HAVE_cc0.\n\n        * genemit.c (gen_expand): Only emit `operands[N]' decl if there\n        is special code to run.\n        (main): Don't define operands to emit_operand.\n        * genrecog.c (main): Don't emit an empty peephole2_insn function.\n\n        * rtl.h (NOTE_BASIC_BLOCK): Use X0BBDEF.\n\n        * alpha/alpha.h (normal_memory_operand): Declare.\n        (reg_no_subreg_operand): Declare.\n        * alpha/elf.h (ASM_DECLARE_OBJECT_NAME): Use HOST_WIDE_INT_PRINT_DEC.\n\nFrom-SVN: r29061", "tree": {"sha": "983023b55501936201b52db239d4a15278e92b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/983023b55501936201b52db239d4a15278e92b74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2bef702d6db5181253b7edd7f9ca9c88abedd00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2bef702d6db5181253b7edd7f9ca9c88abedd00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2bef702d6db5181253b7edd7f9ca9c88abedd00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2bef702d6db5181253b7edd7f9ca9c88abedd00/comments", "author": null, "committer": null, "parents": [{"sha": "ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5"}], "stats": {"total": 116, "additions": 63, "deletions": 53}, "files": [{"sha": "2c0e0a2d2cc762a99d5b95a767b9f38008413b2b", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e2bef702d6db5181253b7edd7f9ca9c88abedd00", "patch": "@@ -2549,6 +2549,8 @@ extern int call_operand ();\n extern int reg_or_cint_operand ();\n extern int hard_fp_register_operand ();\n extern int reg_not_elim_operand ();\n+extern int normal_memory_operand ();\n+extern int reg_no_subreg_operand ();\n extern void alpha_set_memflags ();\n extern int aligned_memory_operand ();\n extern void get_aligned_mem ();"}, {"sha": "0765c8754b6787a4fedab15f1854322ca2cea64f", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 39, "deletions": 32, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=e2bef702d6db5181253b7edd7f9ca9c88abedd00", "patch": "@@ -415,22 +415,27 @@ void FN ()\t\t\t\t\t\t\t\t\\\n \n /* Write the extra assembler code needed to declare an object properly.  */\n \n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    putc (',', FILE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n-    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n-    size_directive_output = 0;\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tsize_directive_output = 1;\t\t\t\t\t\\\n-\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    HOST_WIDE_INT size;\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\\\n+    putc (',', FILE);\t\t\t\t\t\t\\\n+    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\\\n+    putc ('\\n', FILE);\t\t\t\t\t\t\\\n+    size_directive_output = 0;\t\t\t\t\t\\\n+    if (!flag_inhibit_size_directive\t\t\t\t\\\n+\t&& DECL_SIZE (DECL)\t\t\t\t\t\\\n+\t&& (size = int_size_in_bytes (TREE_TYPE (DECL))) > 0)\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tsize_directive_output = 1;\t\t\t\t\\\n+\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\\\n+\tassemble_name (FILE, NAME);\t\t\t\t\\\n+\tfputc (',', FILE);\t\t\t\t\t\\\n+\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC, size);\t\t\\\n+\tfputc ('\\n', FILE);\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\\\n   } while (0)\n \n /* Output the size directive for a decl in rest_of_decl_compilation\n@@ -440,22 +445,24 @@ void FN ()\t\t\t\t\t\t\t\t\\\n    by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n \n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t\\\n-  if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t\t\\\n-      && ! AT_END && TOP_LEVEL\t\t\t\t\t\t\\\n-      && DECL_INITIAL (DECL) == error_mark_node\t\t\t\t\\\n-      && !size_directive_output)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      size_directive_output = 1;\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n-      assemble_name (FILE, name);\t\t\t\t\t\\\n-      putc (',', FILE);\t\t\t\t\t\t\t\\\n-      fprintf (FILE, HOST_WIDE_INT_PRINT_DEC,\t\t\t\t\\\n-\t       int_size_in_bytes (TREE_TYPE (DECL)));\t\t\t\\\n-      putc ('\\n', FILE);\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t\\\n+    HOST_WIDE_INT size;\t\t\t\t\t\t\t\\\n+    if (!flag_inhibit_size_directive\t\t\t\t\t\\\n+\t&& DECL_SIZE (DECL)\t\t\t\t\t\t\\\n+\t&& ! AT_END && TOP_LEVEL\t\t\t\t\t\\\n+\t&& DECL_INITIAL (DECL) == error_mark_node\t\t\t\\\n+\t&& !size_directive_output\t\t\t\t\t\\\n+\t&& (size = int_size_in_bytes (TREE_TYPE (DECL))) > 0)\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tsize_directive_output = 1;\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tassemble_name (FILE, name);\t\t\t\t\t\\\n+\tfputc (',', FILE);\t\t\t\t\t\t\\\n+\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC, size);\t\t\t\\\n+\tfputc ('\\n', FILE);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n \n /* A table of bytes codes used by the ASM_OUTPUT_ASCII and\n    ASM_OUTPUT_LIMITED_STRING macros.  Each byte in the table"}, {"sha": "09168d6d97f0c5e80131bfa16ffc501100a6f88e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e2bef702d6db5181253b7edd7f9ca9c88abedd00", "patch": "@@ -9885,7 +9885,7 @@ dwarf2out_line (filename, line)\n \n       if (DWARF2_ASM_LINE_DEBUG_INFO)\n \t{\n-\t  static char *lastfile;\n+\t  static const char *lastfile;\n \n \t  /* Emit the .file and .loc directives understood by GNU as.  */\n \t  if (lastfile == 0 || strcmp (filename, lastfile))"}, {"sha": "6cc8465903220d270f9c9825cd0243b64ef0e2b2", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=e2bef702d6db5181253b7edd7f9ca9c88abedd00", "patch": "@@ -1907,7 +1907,7 @@ expand_rethrow (label)\n   else\n     if (flag_new_exceptions)\n       {\n-\trtx insn, val;\n+\trtx insn;\n \tint region;\n \tif (label == NULL_RTX)\n \t  label = last_rethrow_symbol;"}, {"sha": "967c3e7441d676824d44d973312f0bc518fbb868", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e2bef702d6db5181253b7edd7f9ca9c88abedd00", "patch": "@@ -9012,7 +9012,6 @@ do_jump_by_parts_greater_rtx (mode, unsignedp, op0, op1, if_false_label, if_true\n   /* Compare a word at a time, high order first.  */\n   for (i = 0; i < nwords; i++)\n     {\n-      rtx comp;\n       rtx op0_word, op1_word;\n \n       if (WORDS_BIG_ENDIAN)"}, {"sha": "f917904d14fc788c58212d2ee4f2321b214dd33d", "filename": "gcc/flow.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=e2bef702d6db5181253b7edd7f9ca9c88abedd00", "patch": "@@ -6080,9 +6080,8 @@ replace_insns (first, last, first_new, notes)\n      rtx first, last, first_new, notes;\n {\n   rtx stop = NEXT_INSN (last);\n-  rtx last_new;\n-  rtx curr, next;\n   rtx prev = PREV_INSN (first);\n+  rtx last_new, curr;\n   int i;\n \n   if (notes == NULL_RTX)\n@@ -6356,8 +6355,7 @@ create_edge_list ()\n   struct edge_list *elist;\n   edge e;\n   int num_edges;\n-  int x,y;\n-  int_list_ptr ptr;\n+  int x;\n   int block_count;\n \n   block_count = n_basic_blocks + 2;   /* Include the entry and exit blocks.  */\n@@ -6451,8 +6449,6 @@ verify_edge_list (f, elist)\n      struct edge_list *elist;\n {\n   int x, pred, succ, index;\n-  int_list_ptr ptr;\n-  int flawed = 0;\n   edge e;\n \n   for (x = 0; x < n_basic_blocks; x++)"}, {"sha": "2c299a2188f4bd351d1a82f27b3fafdb41bd3e70", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=e2bef702d6db5181253b7edd7f9ca9c88abedd00", "patch": "@@ -577,7 +577,9 @@ static void find_used_regs\t    PROTO ((rtx));\n static int try_replace_reg\t    PROTO ((rtx, rtx, rtx));\n static struct expr *find_avail_set    PROTO ((int, rtx));\n static int cprop_jump\t\t\tPROTO((rtx, rtx, struct reg_use *, rtx));\n+#ifdef HAVE_cc0\n static int cprop_cc0_jump\t\tPROTO((rtx, struct reg_use *, rtx));\n+#endif\n static int cprop_insn\t\t PROTO ((rtx, int));\n static int cprop\t\t      PROTO ((int));\n static int one_cprop_pass\t     PROTO ((int, int));"}, {"sha": "f9d917e3245b27be97a454caa503559c1043e540", "filename": "gcc/genemit.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=e2bef702d6db5181253b7edd7f9ca9c88abedd00", "patch": "@@ -459,9 +459,6 @@ gen_expand (expand)\n     printf (\"  rtx operand%d;\\n\", i);\n   for (; i <= max_scratch_opno; i++)\n     printf (\"  rtx operand%d;\\n\", i);\n-  if (operands > 0 || max_dup_opno >= 0 || max_scratch_opno >= 0)\n-    printf (\"  rtx operands[%d];\\n\",\n-\t    MAX (operands, MAX (max_scratch_opno, max_dup_opno) + 1));\n   printf (\"  rtx _val = 0;\\n\");\n   printf (\"  start_sequence ();\\n\");\n \n@@ -473,9 +470,13 @@ gen_expand (expand)\n      So copy the operand values there before executing it.  */\n   if (XSTR (expand, 3) && *XSTR (expand, 3))\n     {\n+      printf (\"  {\\n\");\n+      if (operands > 0 || max_dup_opno >= 0 || max_scratch_opno >= 0)\n+\tprintf (\"    rtx operands[%d];\\n\",\n+\t    MAX (operands, MAX (max_scratch_opno, max_dup_opno) + 1));\n       /* Output code to copy the arguments into `operands'.  */\n       for (i = 0; i < operands; i++)\n-\tprintf (\"  operands[%d] = operand%d;\\n\", i, i);\n+\tprintf (\"    operands[%d] = operand%d;\\n\", i, i);\n \n       /* Output the special code to be executed before the sequence\n \t is generated.  */\n@@ -486,12 +487,13 @@ gen_expand (expand)\n       if (XVEC (expand, 1) != 0)\n \t{\n \t  for (i = 0; i < operands; i++)\n-\t    printf (\"  operand%d = operands[%d];\\n\", i, i);\n+\t    printf (\"    operand%d = operands[%d];\\n\", i, i);\n \t  for (; i <= max_dup_opno; i++)\n-\t    printf (\"  operand%d = operands[%d];\\n\", i, i);\n+\t    printf (\"    operand%d = operands[%d];\\n\", i, i);\n \t  for (; i <= max_scratch_opno; i++)\n-\t    printf (\"  operand%d = operands[%d];\\n\", i, i);\n+\t    printf (\"    operand%d = operands[%d];\\n\", i, i);\n \t}\n+      printf (\"  }\\n\");\n     }\n \n   /* Output code to construct the rtl for the instruction bodies.\n@@ -815,7 +817,6 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"resource.h\\\"\\n\");\n   printf (\"#include \\\"reload.h\\\"\\n\\n\");\n   printf (\"extern rtx recog_operand[];\\n\");\n-  printf (\"#define operands emit_operand\\n\\n\");\n   printf (\"#define FAIL return (end_sequence (), _val)\\n\");\n   printf (\"#define DONE return (_val = gen_sequence (), end_sequence (), _val)\\n\");\n "}, {"sha": "804cffcd34bcbc7a5055886a93d05d9414c34c67", "filename": "gcc/genrecog.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=e2bef702d6db5181253b7edd7f9ca9c88abedd00", "patch": "@@ -1979,9 +1979,12 @@ from the machine description file `md'.  */\\n\\n\");\n   break_out_subroutines (split_tree, SPLIT, 1);\n   write_subroutine (split_tree.first, SPLIT);\n \n-  next_subroutine_number = 0;\n-  break_out_subroutines (peephole2_tree, PEEPHOLE2, 1);\n-  write_subroutine (peephole2_tree.first, PEEPHOLE2);\n+  if (peephole2_tree.first)\n+    {\n+      next_subroutine_number = 0;\n+      break_out_subroutines (peephole2_tree, PEEPHOLE2, 1);\n+      write_subroutine (peephole2_tree.first, PEEPHOLE2);\n+    }\n \n   fflush (stdout);\n   exit (ferror (stdout) != 0 ? FATAL_EXIT_CODE : SUCCESS_EXIT_CODE);"}, {"sha": "0bb488ddf6685f580db6aeea5df4b70050c9174f", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2bef702d6db5181253b7edd7f9ca9c88abedd00/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e2bef702d6db5181253b7edd7f9ca9c88abedd00", "patch": "@@ -476,7 +476,7 @@ extern const char * const reg_note_name[];\n #define NOTE_EH_HANDLER(INSN)\tX0INT(INSN, 3)\n #define NOTE_RANGE_INFO(INSN)  \tX0EXP(INSN, 3)\n #define NOTE_LIVE_INFO(INSN)   \tX0EXP(INSN, 3)\n-#define NOTE_BASIC_BLOCK(INSN)\tX0EXP(INSN, 3)\n+#define NOTE_BASIC_BLOCK(INSN)\tX0BBDEF(INSN, 3)\n \n /* If the NOTE_BLOCK_NUMBER field gets a -1, it means create a new\n    block node for a live range block.  */"}]}