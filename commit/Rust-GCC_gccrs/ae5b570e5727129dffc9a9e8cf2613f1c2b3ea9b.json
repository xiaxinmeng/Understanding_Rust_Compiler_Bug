{"sha": "ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1YjU3MGU1NzI3MTI5ZGZmYzlhOWU4Y2YyNjEzZjFjMmIzZWE5Yg==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2003-03-10T21:27:46Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2003-03-10T21:27:46Z"}, "message": "m68hc11.c (m68hc11_gen_rotate): Set carry before each 16-bit rotation.\n\n\t* config/m68hc11/m68hc11.c (m68hc11_gen_rotate): Set carry before\n\teach 16-bit rotation.\n\nFrom-SVN: r64125", "tree": {"sha": "e29cde02bfed0ab4d0c312602ef8c55c354e0cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e29cde02bfed0ab4d0c312602ef8c55c354e0cd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b/comments", "author": null, "committer": null, "parents": [{"sha": "88849449f3f181f6eeebe60059c6baffbd988b8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88849449f3f181f6eeebe60059c6baffbd988b8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88849449f3f181f6eeebe60059c6baffbd988b8e"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "92c8db4d459fd5fedab8cd46437677318d9b72cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b", "patch": "@@ -1,3 +1,8 @@\n+2003-03-10  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.c (m68hc11_gen_rotate): Set carry before\n+\teach 16-bit rotation.\n+\n 2003-03-10  Zack Weinberg  <zack@codesourcery.com>\n \n \t* c-opts.c (add_prefixed_path): Don't use concat.  When"}, {"sha": "9ccac2ee657487b1e44d0535fbe14d23417cdea2", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b", "patch": "@@ -3855,15 +3855,15 @@ m68hc11_gen_rotate (code, insn, operands)\n \n   if (val > 0)\n     {\n-      /* Set the carry to bit-15, but don't change D yet.  */\n-      if (GET_MODE (operands[0]) != QImode)\n-        {\n-          output_asm_insn (\"asra\", operands);\n-          output_asm_insn (\"rola\", operands);\n-        }\n-\n       while (--val >= 0)\n         {\n+          /* Set the carry to bit-15, but don't change D yet.  */\n+          if (GET_MODE (operands[0]) != QImode)\n+            {\n+              output_asm_insn (\"asra\", operands);\n+              output_asm_insn (\"rola\", operands);\n+            }\n+\n           /* Rotate B first to move the carry to bit-0.  */\n           if (D_REG_P (operands[0]))\n             output_asm_insn (\"rolb\", operands);\n@@ -3874,14 +3874,12 @@ m68hc11_gen_rotate (code, insn, operands)\n     }\n   else\n     {\n-      /* Set the carry to bit-8 of D.  */\n-      if (val != 0 && GET_MODE (operands[0]) != QImode)\n-        {\n-          output_asm_insn (\"tap\", operands);\n-        }\n-      \n       while (++val <= 0)\n         {\n+          /* Set the carry to bit-8 of D.  */\n+          if (GET_MODE (operands[0]) != QImode)\n+            output_asm_insn (\"tap\", operands);\n+\n           /* Rotate B first to move the carry to bit-7.  */\n           if (D_REG_P (operands[0]))\n             output_asm_insn (\"rorb\", operands);"}]}