{"sha": "80298b8904d62d74b44e77b4a0553f599299a7ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAyOThiODkwNGQ2MmQ3NGI0NGU3N2I0YTA1NTNmNTk5Mjk5YTdjZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-11-19T11:26:07Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-11-19T11:26:07Z"}, "message": "gnat_ugn.texi: Remove extra paren check from list of checks for redundant constructs Add...\n\n\t* gnat_ugn.texi:\n\tRemove extra paren check from list of checks for redundant constructs\n\tAdd documentation of new -gnatyx style check (check extra parens)\n\tRemove paragraph about gnatelim debug options.\n\n\t* gnat_rm.texi: Document that Ada.Streams now forbids creating stream\n\tobjects rather than forbidding dependencies on the package Ada.Streams.\n\n\t* sinfo.ads: Add ??? note that we should document pragmas passed to\n\tback end.\n\n\t* g-expect.ads: Fix a few typos in the comments.\n\nFrom-SVN: r90915", "tree": {"sha": "6462efac61920defd0a89b780d7649edde698123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6462efac61920defd0a89b780d7649edde698123"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80298b8904d62d74b44e77b4a0553f599299a7ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80298b8904d62d74b44e77b4a0553f599299a7ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80298b8904d62d74b44e77b4a0553f599299a7ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80298b8904d62d74b44e77b4a0553f599299a7ce/comments", "author": null, "committer": null, "parents": [{"sha": "3fa251d08d76564520074142075d0a44f46f1f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa251d08d76564520074142075d0a44f46f1f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa251d08d76564520074142075d0a44f46f1f18"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "1bd58a639477a211e5e5d35968184cb3994bbc55", "filename": "gcc/ada/g-expect.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80298b8904d62d74b44e77b4a0553f599299a7ce/gcc%2Fada%2Fg-expect.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80298b8904d62d74b44e77b4a0553f599299a7ce/gcc%2Fada%2Fg-expect.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect.ads?ref=80298b8904d62d74b44e77b4a0553f599299a7ce", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 2000-2003 Ada Core Technologies, Inc.            --\n+--           Copyright (C) 2000-2004 Ada Core Technologies, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,7 +49,7 @@\n \n --      Non_Blocking_Spawn\n --         (Fd, \"ftp\",\n---           (1 => new String' (\"machine@domaine\")));\n+--           (1 => new String' (\"machine@domain\")));\n --      Timeout := 10000;  --  10 seconds\n --      Expect (Fd, Result, Regexp_Array'(+\"\\(user\\)\", +\"\\(passwd\\)\"),\n --              Timeout);\n@@ -68,7 +68,7 @@\n --  name of the language by doing:\n \n --      declare\n---         Matched : Regexp_Array (0 .. 2);\n+--         Matched : Match_Array (0 .. 2);\n --      begin\n --         Expect (Fd, Result, \"lang=(optional)? ([a-z]+)\", Matched);\n --         Put_Line (\"Seen: \" &\n@@ -309,8 +309,7 @@ package GNAT.Expect is\n \n    function \"+\" (S : String) return GNAT.OS_Lib.String_Access;\n    --  Allocate some memory for the string. This is merely a convenience\n-   --  convenience function to help create the array of regexps in the\n-   --  call to Expect.\n+   --  function to help create the array of regexps in the call to Expect.\n \n    procedure Expect\n      (Descriptor  : in out Process_Descriptor;"}, {"sha": "bd114e7cacc0111bf3f99b41f866e445a11e9c9f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80298b8904d62d74b44e77b4a0553f599299a7ce/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80298b8904d62d74b44e77b4a0553f599299a7ce/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=80298b8904d62d74b44e77b4a0553f599299a7ce", "patch": "@@ -7085,8 +7085,12 @@ user-defined storage pool.\n \n @item No_Streams\n @findex No_Streams\n-This restriction ensures at compile time that there are no implicit or\n-explicit dependencies on the package @code{Ada.Streams}.\n+This restriction ensures at compile/bind time that there are no\n+stream objects created (and therefore no actual stream operations).\n+This restriction does not forbid dependences on the package\n+@code{Ada.Streams}. So it is permissible to with\n+@code{Ada.Streams} (or another package that does so itself)\n+as long as no actual stream objects are created.\n \n @item No_Task_Attributes_Package\n @findex No_Task_Attributes_Package\n@@ -13382,7 +13386,7 @@ Word : Rec;\n @end group\n @end smallexample\n \n-@noindent \n+@noindent\n Such an object is said to be @emph{unconstrained}.\n The discriminant of the object\n can be modified by a full assignment to the object, as long as it preserves the"}, {"sha": "765a1b9a95d76541d27dea5b22e4b327064b0887", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80298b8904d62d74b44e77b4a0553f599299a7ce/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80298b8904d62d74b44e77b4a0553f599299a7ce/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=80298b8904d62d74b44e77b4a0553f599299a7ce", "patch": "@@ -4791,9 +4791,6 @@ operand) which has no effect.\n Use of the operator abs on an operand that is known at compile time\n to be non-negative\n @item\n-Use of an unnecessary extra level of parentheses (C-style) around conditions\n-in @code{if} statements, @code{while} statements and @code{exit} statements.\n-@item\n Comparison of boolean expressions to an explicit True value.\n @end itemize\n \n@@ -5525,6 +5522,14 @@ A unary plus or minus may not be followed by a space.\n A vertical bar must be surrounded by spaces.\n @end itemize\n \n+@item ^x^XTRA_PARENS^\n+@emph{Check extra parentheses.}\n+Check for the use of an unnecessary extra level of parentheses (C-style)\n+around conditions in @code{if} statements, @code{while} statements and\n+@code{exit} statements.\n+\n+@end table\n+\n @noindent\n In the above rules, appearing in column one is always permitted, that is,\n counts as meeting either a requirement for a required preceding space,\n@@ -5534,8 +5539,6 @@ Appearing at the end of a line is also always permitted, that is, counts\n as meeting either a requirement for a following space, or as meeting\n a requirement for no following space.\n \n-@end table\n-\n @noindent\n If any of these style rules is violated, a message is generated giving\n details on the violation. The initial characters of such messages are\n@@ -9466,15 +9469,6 @@ available on the path.\n @cindex @option{^--GNATMAKE^/GNATMAKE^} (@command{gnatelim})\n Instructs @code{gnatelim} to use specific @code{gnatmake} instead of one\n available on the path.\n-\n-@item -d@var{x}\n-@cindex @option{-d@var{x}} (@command{gnatelim})\n-Activate internal debugging switches. @var{x} is a letter or digit, or\n-string of letters or digits, which specifies the type of debugging\n-mode desired.  Normally these are used only for internal development\n-or system debugging purposes. You can find full documentation for these\n-switches in the spec of the @code{Gnatelim} unit in the compiler\n-source file @file{gnatelim.ads}.\n @end table\n \n @noindent"}, {"sha": "1c2bc65793221ec937dc91bcbe7bdb08a0ea6959", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80298b8904d62d74b44e77b4a0553f599299a7ce/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80298b8904d62d74b44e77b4a0553f599299a7ce/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=80298b8904d62d74b44e77b4a0553f599299a7ce", "patch": "@@ -1767,6 +1767,11 @@ package Sinfo is\n       --  Debug_Statement (Node3) (set to Empty if not Debug, Assert)\n       --  Next_Rep_Item (Node4-Sem)\n \n+      --  Note: we should have a section on what pragmas are passed on to\n+      --  the back end to be processed. This section should note that pragma\n+      --  Psect_Object is always converted to Common_Object, but there are\n+      --  undoubtedly many other similar notes required ???\n+\n       --------------------------------------\n       -- 2.8  Pragma Argument Association --\n       --------------------------------------"}]}