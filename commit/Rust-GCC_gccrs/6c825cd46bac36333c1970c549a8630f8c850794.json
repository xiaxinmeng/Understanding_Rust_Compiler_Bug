{"sha": "6c825cd46bac36333c1970c549a8630f8c850794", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM4MjVjZDQ2YmFjMzYzMzNjMTk3MGM1NDlhODYzMGY4Yzg1MDc5NA==", "commit": {"author": {"name": "David Sherwood", "email": "david.sherwood@arm.com", "date": "2015-08-17T11:06:34Z"}, "committer": {"name": "David Sherwood", "email": "davids@gcc.gnu.org", "date": "2015-08-17T11:06:34Z"}, "message": "arm.c (neon_element_bits): Replace call to GET_MODE_BITSIZE (GET_MODE_INNER (m)) with...\n\n        * config/arm/arm.c (neon_element_bits): Replace call to\n        GET_MODE_BITSIZE (GET_MODE_INNER (m)) with GET_MODE_UNIT_BITSIZE (m).\n        * config/arm/neon.md (neon_vget_lane<mode>): Likewise.\n        (neon_vget_laneu<mode>, neon_vset_lane<mode>): Likewise\n        (neon_vdup_lane<mode>): Likewise.\n        * config/i386/i386.c (ix86_expand_int_vcond): Likewise.\n        (ix86_expand_multi_arg_builtin, ix86_expand_reduc): Likewise.\n        (expand_vec_perm_palignr, ix86_expand_sse2_abs): Likewise.\n        * config/rs6000/rs6000.c (rs6000_do_expand_vec_perm): Likewise.\n        * config/spu/spu.c (arith_immediate_p): Likewise.\n        * expmed.c (store_bit_field_1, extract_bit_field_1): Likewise.\n        * expr.c (expand_expr_real_2): Likewise.\n        * optabs.c (shift_amt_for_vec_perm_mask): Likewise.\n        * simplify-rtx.c (simplify_immed_subreg): Likewise.\n        * tree-cfg.c (verify_gimple_assign_ternary): Likewise.\n        * tree-vect-patterns.c (vect_recog_mixed_size_cond_pattern): Likewise.\n        New variable.\n        * fold-const.c (fold_binary_loc): Replace call to\n        GET_MODE_PRECISION (GET_MODE_INNER (m)) with\n        GET_MODE_UNIT_PRECISION (m).\n\nFrom-SVN: r226936", "tree": {"sha": "01d8e566332f90877b953ff5d48b9ef7feb546ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01d8e566332f90877b953ff5d48b9ef7feb546ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c825cd46bac36333c1970c549a8630f8c850794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c825cd46bac36333c1970c549a8630f8c850794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c825cd46bac36333c1970c549a8630f8c850794", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c825cd46bac36333c1970c549a8630f8c850794/comments", "author": {"login": "david-arm", "id": 57997763, "node_id": "MDQ6VXNlcjU3OTk3NzYz", "avatar_url": "https://avatars.githubusercontent.com/u/57997763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-arm", "html_url": "https://github.com/david-arm", "followers_url": "https://api.github.com/users/david-arm/followers", "following_url": "https://api.github.com/users/david-arm/following{/other_user}", "gists_url": "https://api.github.com/users/david-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-arm/subscriptions", "organizations_url": "https://api.github.com/users/david-arm/orgs", "repos_url": "https://api.github.com/users/david-arm/repos", "events_url": "https://api.github.com/users/david-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/david-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48efbbe8a0b37d7da6a8bae0e28fccdeeaa82c63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48efbbe8a0b37d7da6a8bae0e28fccdeeaa82c63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48efbbe8a0b37d7da6a8bae0e28fccdeeaa82c63"}], "stats": {"total": 90, "additions": 55, "deletions": 35}, "files": [{"sha": "76d1d07043b0b9b440297fd15951114033a0be07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -1,3 +1,26 @@\n+2015-08-17  David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/arm/arm.c (neon_element_bits): Replace call to\n+\tGET_MODE_BITSIZE (GET_MODE_INNER (m)) with GET_MODE_UNIT_BITSIZE (m).\n+\t* config/arm/neon.md (neon_vget_lane<mode>): Likewise.\n+\t(neon_vget_laneu<mode>, neon_vset_lane<mode>): Likewise\n+\t(neon_vdup_lane<mode>): Likewise.\n+\t* config/i386/i386.c (ix86_expand_int_vcond): Likewise.\n+\t(ix86_expand_multi_arg_builtin, ix86_expand_reduc): Likewise.\n+\t(expand_vec_perm_palignr, ix86_expand_sse2_abs): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_do_expand_vec_perm): Likewise.\n+\t* config/spu/spu.c (arith_immediate_p): Likewise.\n+\t* expmed.c (store_bit_field_1, extract_bit_field_1): Likewise.\n+\t* expr.c (expand_expr_real_2): Likewise.\n+\t* optabs.c (shift_amt_for_vec_perm_mask): Likewise.\n+\t* simplify-rtx.c (simplify_immed_subreg): Likewise.\n+\t* tree-cfg.c (verify_gimple_assign_ternary): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_mixed_size_cond_pattern): Likewise.\n+\tNew variable.\n+\t* fold-const.c (fold_binary_loc): Replace call to\n+\tGET_MODE_PRECISION (GET_MODE_INNER (m)) with\n+\tGET_MODE_UNIT_PRECISION (m).\n+\n 2015-08-17  Mike Stump  <mikestump@comcast.net>\n \n \t* config/arm/arm.c (arm_block_move_unaligned_straight):"}, {"sha": "57702cbc8deacc4c6f64d40563a79633fc324e7e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -12836,7 +12836,7 @@ neon_const_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high)\n HOST_WIDE_INT\n neon_element_bits (machine_mode mode)\n {\n-  return GET_MODE_BITSIZE (GET_MODE_INNER (mode));\n+  return GET_MODE_UNIT_BITSIZE (mode);\n }\n \n \f"}, {"sha": "873330fc7de9783d9e2fa884182af717284a126d", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -2672,12 +2672,12 @@\n \t to this model.  */\n       unsigned int elt = INTVAL (operands[2]);\n       unsigned int reg_nelts\n-\t= 64 / GET_MODE_BITSIZE (GET_MODE_INNER (<MODE>mode));\n+\t= 64 / GET_MODE_UNIT_BITSIZE (<MODE>mode);\n       elt ^= reg_nelts - 1;\n       operands[2] = GEN_INT (elt);\n     }\n \n-  if (GET_MODE_BITSIZE (GET_MODE_INNER (<MODE>mode)) == 32)\n+  if (GET_MODE_UNIT_BITSIZE (<MODE>mode) == 32)\n     emit_insn (gen_vec_extract<mode> (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_neon_vget_lane<mode>_sext_internal (operands[0],\n@@ -2701,12 +2701,12 @@\n \t to this model.  */\n       unsigned int elt = INTVAL (operands[2]);\n       unsigned int reg_nelts\n-\t= 64 / GET_MODE_BITSIZE (GET_MODE_INNER (<MODE>mode));\n+\t= 64 / GET_MODE_UNIT_BITSIZE (<MODE>mode);\n       elt ^= reg_nelts - 1;\n       operands[2] = GEN_INT (elt);\n     }\n \n-  if (GET_MODE_BITSIZE (GET_MODE_INNER (<MODE>mode)) == 32)\n+  if (GET_MODE_UNIT_BITSIZE (<MODE>mode) == 32)\n     emit_insn (gen_vec_extract<mode> (operands[0], operands[1], operands[2]));\n   else\n     emit_insn (gen_neon_vget_lane<mode>_zext_internal (operands[0],\n@@ -2766,7 +2766,7 @@ if (BYTES_BIG_ENDIAN)\n   if (BYTES_BIG_ENDIAN)\n     {\n       unsigned int reg_nelts\n-\t= 64 / GET_MODE_BITSIZE (GET_MODE_INNER (<MODE>mode));\n+\t= 64 / GET_MODE_UNIT_BITSIZE (<MODE>mode);\n       elt ^= reg_nelts - 1;\n     }\n \n@@ -2869,7 +2869,7 @@ if (BYTES_BIG_ENDIAN)\n     {\n       unsigned int elt = INTVAL (operands[2]);\n       unsigned int reg_nelts\n-\t= 64 / GET_MODE_BITSIZE (GET_MODE_INNER (<V_double_vector_mode>mode));\n+\t= 64 / GET_MODE_UNIT_BITSIZE (<V_double_vector_mode>mode);\n       elt ^= reg_nelts - 1;\n       operands[2] = GEN_INT (elt);\n     }"}, {"sha": "51eca5269b418af8d10a755ca01917ee94584a37", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -21789,7 +21789,7 @@ ix86_expand_int_vcond (rtx operands[])\n \t  || (TARGET_AVX2 && GET_MODE_SIZE (data_mode) == 32)))\n     {\n       rtx negop = operands[2 - (code == LT)];\n-      int shift = GET_MODE_BITSIZE (GET_MODE_INNER (data_mode)) - 1;\n+      int shift = GET_MODE_UNIT_BITSIZE (data_mode) - 1;\n       if (negop == CONST1_RTX (data_mode))\n \t{\n \t  rtx res = expand_simple_binop (mode, LSHIFTRT, cop0, GEN_INT (shift),\n@@ -36227,7 +36227,7 @@ ix86_expand_multi_arg_builtin (enum insn_code icode, tree exp, rtx target,\n \t\txop_rotl:\n \t\t  if (CONST_INT_P (op))\n \t\t    {\n-\t\t      int mask = GET_MODE_BITSIZE (GET_MODE_INNER (tmode)) - 1;\n+\t\t      int mask = GET_MODE_UNIT_BITSIZE (tmode) - 1;\n \t\t      op = GEN_INT (INTVAL (op) & mask);\n \t\t      gcc_checking_assert\n \t\t\t(insn_data[icode].operand[i + 1].predicate (op, mode));\n@@ -45571,12 +45571,12 @@ ix86_expand_reduc (rtx (*fn) (rtx, rtx, rtx), rtx dest, rtx in)\n     }\n \n   for (i = GET_MODE_BITSIZE (mode);\n-       i > GET_MODE_BITSIZE (GET_MODE_INNER (mode));\n+       i > GET_MODE_UNIT_BITSIZE (mode);\n        i >>= 1)\n     {\n       half = gen_reg_rtx (mode);\n       emit_reduc_half (half, vec, i);\n-      if (i == GET_MODE_BITSIZE (GET_MODE_INNER (mode)) * 2)\n+      if (i == GET_MODE_UNIT_BITSIZE (mode) * 2)\n \tdst = dest;\n       else\n \tdst = gen_reg_rtx (mode);\n@@ -47959,7 +47959,7 @@ expand_vec_perm_palignr (struct expand_vec_perm_d *d, bool single_insn_only_p)\n       return expand_vec_perm_1 (&dcopy);\n     }\n \n-  shift = GEN_INT (min * GET_MODE_BITSIZE (GET_MODE_INNER (d->vmode)));\n+  shift = GEN_INT (min * GET_MODE_UNIT_BITSIZE (d->vmode));\n   if (GET_MODE_SIZE (d->vmode) == 16)\n     {\n       target = gen_reg_rtx (TImode);\n@@ -50409,8 +50409,7 @@ ix86_expand_sse2_abs (rtx target, rtx input)\n \t value of X is (((signed) X >> (W-1)) ^ X) - ((signed) X >> (W-1)).  */\n       case V4SImode:\n \ttmp0 = expand_simple_binop (mode, ASHIFTRT, input,\n-\t\t\t\t    GEN_INT (GET_MODE_BITSIZE\n-\t\t\t\t\t     (GET_MODE_INNER (mode)) - 1),\n+\t\t\t\t    GEN_INT (GET_MODE_UNIT_BITSIZE (mode) - 1),\n \t\t\t\t    NULL, 0, OPTAB_DIRECT);\n \ttmp1 = expand_simple_binop (mode, XOR, tmp0, input,\n \t\t\t\t    NULL, 0, OPTAB_DIRECT);"}, {"sha": "2a969782f26dfc80ce7e3496aabd16f0787da65d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -32340,8 +32340,7 @@ rs6000_do_expand_vec_perm (rtx target, rtx op0, rtx op1,\n   imode = vmode;\n   if (GET_MODE_CLASS (vmode) != MODE_VECTOR_INT)\n     {\n-      imode = GET_MODE_INNER (vmode);\n-      imode = mode_for_size (GET_MODE_BITSIZE (imode), MODE_INT, 0);\n+      imode = mode_for_size (GET_MODE_UNIT_BITSIZE (vmode), MODE_INT, 0);\n       imode = mode_for_vector (imode, nelt);\n     }\n "}, {"sha": "ca762877a0f07c0f09d347f0bdb6d619a94c49c9", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -3392,7 +3392,7 @@ arith_immediate_p (rtx op, machine_mode mode,\n   constant_to_array (mode, op, arr);\n \n   bytes = GET_MODE_UNIT_SIZE (mode);\n-  mode = mode_for_size (GET_MODE_BITSIZE (GET_MODE_INNER (mode)), MODE_INT, 0);\n+  mode = mode_for_size (GET_MODE_UNIT_BITSIZE (mode), MODE_INT, 0);\n \n   /* Check that bytes are repeated. */\n   for (i = bytes; i < 16; i += bytes)"}, {"sha": "59b2919ee3a84e352841fd45378b3966f0b2d74a", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -680,8 +680,8 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       && !MEM_P (op0)\n       && optab_handler (vec_set_optab, GET_MODE (op0)) != CODE_FOR_nothing\n       && fieldmode == GET_MODE_INNER (GET_MODE (op0))\n-      && bitsize == GET_MODE_BITSIZE (GET_MODE_INNER (GET_MODE (op0)))\n-      && !(bitnum % GET_MODE_BITSIZE (GET_MODE_INNER (GET_MODE (op0)))))\n+      && bitsize == GET_MODE_UNIT_BITSIZE (GET_MODE (op0))\n+      && !(bitnum % GET_MODE_UNIT_BITSIZE (GET_MODE (op0))))\n     {\n       struct expand_operand ops[3];\n       machine_mode outermode = GET_MODE (op0);\n@@ -1491,8 +1491,8 @@ extract_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n   if (VECTOR_MODE_P (GET_MODE (op0))\n       && !MEM_P (op0)\n       && optab_handler (vec_extract_optab, GET_MODE (op0)) != CODE_FOR_nothing\n-      && ((bitnum + bitsize - 1) / GET_MODE_BITSIZE (GET_MODE_INNER (GET_MODE (op0)))\n-\t  == bitnum / GET_MODE_BITSIZE (GET_MODE_INNER (GET_MODE (op0)))))\n+      && ((bitnum + bitsize - 1) / GET_MODE_UNIT_BITSIZE (GET_MODE (op0))\n+\t  == bitnum / GET_MODE_UNIT_BITSIZE (GET_MODE (op0))))\n     {\n       struct expand_operand ops[3];\n       machine_mode outermode = GET_MODE (op0);"}, {"sha": "3202f555838531a444090a6ba05b573ad91876c8", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -9008,7 +9008,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n            little-endian, or element N-1 if big-endian.  So pull the scalar\n            result out of that element.  */\n         int index = BYTES_BIG_ENDIAN ? GET_MODE_NUNITS (vec_mode) - 1 : 0;\n-        int bitsize = GET_MODE_BITSIZE (GET_MODE_INNER (vec_mode));\n+\tint bitsize = GET_MODE_UNIT_BITSIZE (vec_mode);\n         temp = extract_bit_field (temp, bitsize, bitsize * index, unsignedp,\n \t\t\t\t  target, mode, mode);\n         gcc_assert (temp);"}, {"sha": "93d65147dd1eaf9f87b272e431148af3c1e45f6e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -9421,7 +9421,7 @@ fold_binary_loc (location_t loc,\n \t    /* Only create rotates in complete modes.  Other cases are not\n \t       expanded properly.  */\n \t    && (element_precision (rtype)\n-\t\t== GET_MODE_PRECISION (GET_MODE_INNER (TYPE_MODE (rtype)))))\n+\t\t== GET_MODE_UNIT_PRECISION (TYPE_MODE (rtype))))\n \t  {\n \t    tree tree01, tree11;\n \t    enum tree_code code01, code11;"}, {"sha": "97c1d387672c22d59b93654cdfed1c0b8176f6ad", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -6588,7 +6588,7 @@ static rtx\n shift_amt_for_vec_perm_mask (rtx sel)\n {\n   unsigned int i, first, nelt = GET_MODE_NUNITS (GET_MODE (sel));\n-  unsigned int bitsize = GET_MODE_BITSIZE (GET_MODE_INNER (GET_MODE (sel)));\n+  unsigned int bitsize = GET_MODE_UNIT_BITSIZE (GET_MODE (sel));\n \n   if (GET_CODE (sel) != CONST_VECTOR)\n     return NULL_RTX;"}, {"sha": "f9352a180e4d863bda362dbbc92a70095b09e661", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -5491,7 +5491,7 @@ simplify_immed_subreg (machine_mode outermode, rtx op,\n     {\n       num_elem = CONST_VECTOR_NUNITS (op);\n       elems = &CONST_VECTOR_ELT (op, 0);\n-      elem_bitsize = GET_MODE_BITSIZE (GET_MODE_INNER (innermode));\n+      elem_bitsize = GET_MODE_UNIT_BITSIZE (innermode);\n     }\n   else\n     {"}, {"sha": "416c816fb5f694f59a4ffdbf4dbf2187408895b5", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -4052,10 +4052,8 @@ verify_gimple_assign_ternary (gassign *stmt)\n     case SAD_EXPR:\n       if (!useless_type_conversion_p (rhs1_type, rhs2_type)\n \t  || !useless_type_conversion_p (lhs_type, rhs3_type)\n-\t  || 2 * GET_MODE_BITSIZE (GET_MODE_INNER\n-\t\t\t\t     (TYPE_MODE (TREE_TYPE (rhs1_type))))\n-\t       > GET_MODE_BITSIZE (GET_MODE_INNER\n-\t\t\t\t     (TYPE_MODE (TREE_TYPE (lhs_type)))))\n+\t  || 2 * GET_MODE_UNIT_BITSIZE (TYPE_MODE (TREE_TYPE (rhs1_type)))\n+\t       > GET_MODE_UNIT_BITSIZE (TYPE_MODE (TREE_TYPE (lhs_type))))\n \t{\n \t  error (\"type mismatch in sad expression\");\n \t  debug_generic_expr (lhs_type);"}, {"sha": "758ca3875f8b8e1ac5fb6d61b2b10fb9b8b13dfc", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c825cd46bac36333c1970c549a8630f8c850794/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=6c825cd46bac36333c1970c549a8630f8c850794", "patch": "@@ -2784,7 +2784,6 @@ vect_recog_mixed_size_cond_pattern (vec<gimple> *stmts, tree *type_in,\n   tree cond_expr, then_clause, else_clause;\n   stmt_vec_info stmt_vinfo = vinfo_for_stmt (last_stmt), def_stmt_info;\n   tree type, vectype, comp_vectype, itype = NULL_TREE, vecitype;\n-  machine_mode cmpmode;\n   gimple pattern_stmt, def_stmt;\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_vinfo);\n@@ -2846,9 +2845,11 @@ vect_recog_mixed_size_cond_pattern (vec<gimple> *stmts, tree *type_in,\n       itype = orig_type1;\n     }\n \n-  cmpmode = GET_MODE_INNER (TYPE_MODE (comp_vectype));\n \n-  if (GET_MODE_BITSIZE (TYPE_MODE (type)) == GET_MODE_BITSIZE (cmpmode))\n+  HOST_WIDE_INT cmp_mode_size\n+    = GET_MODE_UNIT_BITSIZE (TYPE_MODE (comp_vectype));\n+\n+  if (GET_MODE_BITSIZE (TYPE_MODE (type)) == cmp_mode_size)\n     return NULL;\n \n   vectype = get_vectype_for_scalar_type (type);\n@@ -2859,11 +2860,11 @@ vect_recog_mixed_size_cond_pattern (vec<gimple> *stmts, tree *type_in,\n     return NULL;\n \n   if (itype == NULL_TREE)\n-    itype = build_nonstandard_integer_type (GET_MODE_BITSIZE (cmpmode),\n+    itype = build_nonstandard_integer_type (cmp_mode_size,\n   \t\t\t\t\t    TYPE_UNSIGNED (type));\n \n   if (itype == NULL_TREE\n-      || GET_MODE_BITSIZE (TYPE_MODE (itype)) != GET_MODE_BITSIZE (cmpmode))\n+      || GET_MODE_BITSIZE (TYPE_MODE (itype)) != cmp_mode_size)\n     return NULL;\n \n   vecitype = get_vectype_for_scalar_type (itype);\n@@ -2873,7 +2874,7 @@ vect_recog_mixed_size_cond_pattern (vec<gimple> *stmts, tree *type_in,\n   if (!expand_vec_cond_expr_p (vecitype, comp_vectype))\n     return NULL;\n \n-  if (GET_MODE_BITSIZE (TYPE_MODE (type)) > GET_MODE_BITSIZE (cmpmode))\n+  if (GET_MODE_BITSIZE (TYPE_MODE (type)) > cmp_mode_size)\n     {\n       if ((TREE_CODE (then_clause) == INTEGER_CST\n \t   && !int_fits_type_p (then_clause, itype))"}]}