{"sha": "868141900a1c1c7a76c5a48625dbfa1e81d8051c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY4MTQxOTAwYTFjMWM3YTc2YzVhNDg2MjVkYmZhMWU4MWQ4MDUxYw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-09-08T13:09:38Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-09-08T13:09:38Z"}, "message": "re PR tree-optimization/50287 (FAIL: gcc.c-torture/execute/builtins/vsnprintf-chk.c compilation, -O2 -flto)\n\n2011-09-08  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/50287\n\t* ipa-split.c (split_function): Do not create SSA names for\n\tnon-gimple-registers.\n\n\t* testsuite/gcc.dg/torture/pr50287.c: New test.\n\nFrom-SVN: r178688", "tree": {"sha": "f04b056a88255c575796a452750ba92f920e65c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f04b056a88255c575796a452750ba92f920e65c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/868141900a1c1c7a76c5a48625dbfa1e81d8051c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868141900a1c1c7a76c5a48625dbfa1e81d8051c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868141900a1c1c7a76c5a48625dbfa1e81d8051c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868141900a1c1c7a76c5a48625dbfa1e81d8051c/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "996e1de5e6bced0c6b6b0cbacee11ccc720ccdf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996e1de5e6bced0c6b6b0cbacee11ccc720ccdf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996e1de5e6bced0c6b6b0cbacee11ccc720ccdf4"}], "stats": {"total": 139, "additions": 132, "deletions": 7}, "files": [{"sha": "938aede5fb8f738a20f85d2d4b0193fc031cf954", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868141900a1c1c7a76c5a48625dbfa1e81d8051c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868141900a1c1c7a76c5a48625dbfa1e81d8051c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=868141900a1c1c7a76c5a48625dbfa1e81d8051c", "patch": "@@ -1,3 +1,9 @@\n+2011-09-08  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/50287\n+\t* ipa-split.c (split_function): Do not create SSA names for\n+\tnon-gimple-registers.\n+\n 2011-09-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/19831"}, {"sha": "b16cfb34a972519de09a61ee6cff2ebb8a699310", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868141900a1c1c7a76c5a48625dbfa1e81d8051c/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868141900a1c1c7a76c5a48625dbfa1e81d8051c/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=868141900a1c1c7a76c5a48625dbfa1e81d8051c", "patch": "@@ -985,15 +985,20 @@ split_function (struct split_point *split_point)\n       bitmap_set_bit (args_to_skip, num);\n     else\n       {\n-\targ = gimple_default_def (cfun, parm);\n-\tif (!arg)\n+\t/* This parm might not have been used up to now, but is going to be\n+\t   used, hence register it.  */\n+\tadd_referenced_var (parm);\n+\tif (is_gimple_reg (parm))\n \t  {\n-\t    /* This parm wasn't used up to now, but is going to be used,\n-\t       hence register it.  */\n-\t    add_referenced_var (parm);\n-\t    arg = make_ssa_name (parm, gimple_build_nop ());\n-\t    set_default_def (parm, arg);\n+\t    arg = gimple_default_def (cfun, parm);\n+\t    if (!arg)\n+\t      {\n+\t\targ = make_ssa_name (parm, gimple_build_nop ());\n+\t\tset_default_def (parm, arg);\n+\t      }\n \t  }\n+\telse\n+\t  arg = parm;\n \n \tif (TYPE_MAIN_VARIANT (DECL_ARG_TYPE (parm))\n \t    != TYPE_MAIN_VARIANT (TREE_TYPE (arg)))"}, {"sha": "fecb2f4e12bad75b820b963e52c65f6288a92d53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868141900a1c1c7a76c5a48625dbfa1e81d8051c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868141900a1c1c7a76c5a48625dbfa1e81d8051c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=868141900a1c1c7a76c5a48625dbfa1e81d8051c", "patch": "@@ -1,3 +1,8 @@\n+2011-09-08  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/50287\n+\t* gcc.dg/torture/pr50287.c: New test.\n+\n 2011-09-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/19831"}, {"sha": "1f61293a5c082d034f8db12c0e2732e578838052", "filename": "gcc/testsuite/gcc.dg/torture/pr50287.c", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/868141900a1c1c7a76c5a48625dbfa1e81d8051c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50287.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/868141900a1c1c7a76c5a48625dbfa1e81d8051c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50287.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50287.c?ref=868141900a1c1c7a76c5a48625dbfa1e81d8051c", "patch": "@@ -0,0 +1,109 @@\n+/* { dg-do compile } */\n+\n+struct PMC {\n+    unsigned flags;\n+};\n+\n+struct PVC {\n+  unsigned flags, other_stuff;\n+};\n+\n+\n+typedef struct Pcc_cell\n+{\n+    struct PMC *p;\n+    long bla;\n+    long type;\n+} Pcc_cell;\n+\n+int gi;\n+int cond;\n+\n+struct PVC g_pvc;\n+\n+extern void abort ();\n+extern void never_ever(int interp, struct PMC *pmc)\n+  __attribute__((noinline,noclone));\n+\n+void never_ever (int interp, struct PMC *pmc)\n+{\n+  abort ();\n+}\n+\n+static void mark_cell(int * interp, Pcc_cell *c, struct PVC pvc)\n+  __attribute__((__nonnull__(1)));\n+\n+static void\n+mark_cell(int * interp, Pcc_cell *c, struct PVC pvc)\n+{\n+  if (!cond)\n+    return;\n+\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<8)))\n+    never_ever(gi + 1, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<7)))\n+    never_ever(gi + 2, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<6)))\n+    never_ever(gi + 3, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<5)))\n+    never_ever(gi + 4, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<4)))\n+    never_ever(gi + 5, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<3)))\n+    never_ever(gi + 6, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<2)))\n+    never_ever(gi + 7, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<1)))\n+    never_ever(gi + 8, c->p);\n+  if (c && c->type == 4 && c->p\n+      && !(c->p->flags & (1<<9)))\n+    never_ever(gi + 9, c->p);\n+}\n+\n+static void\n+foo(int * interp, Pcc_cell *c)\n+{\n+  mark_cell(interp, c, g_pvc);\n+}\n+\n+static struct Pcc_cell *\n+__attribute__((noinline,noclone))\n+getnull(void)\n+{\n+  return (struct Pcc_cell *) 0;\n+}\n+\n+\n+int main()\n+{\n+  int i;\n+\n+  cond = 1;\n+  for (i = 0; i < 100; i++)\n+    foo (&gi, getnull ());\n+  return 0;\n+}\n+\n+\n+void\n+bar_1 (int * interp, Pcc_cell *c)\n+{\n+  c->bla += 1;\n+  mark_cell(interp, c, g_pvc);\n+}\n+\n+void\n+bar_2 (int * interp, Pcc_cell *c, struct PVC pvc)\n+{\n+  c->bla += 2;\n+  mark_cell(interp, c, pvc);\n+}\n+"}]}