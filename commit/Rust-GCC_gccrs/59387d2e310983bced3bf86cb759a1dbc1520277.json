{"sha": "59387d2e310983bced3bf86cb759a1dbc1520277", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkzODdkMmUzMTA5ODNiY2VkM2JmODZjYjc1OWExZGJjMTUyMDI3Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-07-13T20:40:43Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-07-13T20:40:43Z"}, "message": "c-common.c (decl_attributes): Take a pointer to the node to which attributes are to be attached...\n\n\t* c-common.c (decl_attributes): Take a pointer to the node to\n\twhich attributes are to be attached, and a flags argument.\n\t* c-common.h (enum attribute_flags): New.\n\t(decl_attributes): Update prototype.\n\t* c-decl.c (start_decl, push_parm_decl, finish_struct,\n\tfinish_enum, start_function): Update calls to decl_attributes.\n\t* c-parse.in (component_declarator, component_notype_declarator,\n\tlabel): Update calls to decl_attributes.\n\ncp:\n\t* decl2.c (cplus_decl_attributes): Take a pointer to the node to\n\twhich attributes are to be attached, and a flags argument.  Update\n\tcall to decl_attributes.\n\t(grokfield): Update call to decl_attributes.\n\t* class.c (finish_struct): Update call to cplus_decl_attributes.\n\t* cp-tree.h (cplus_decl_attributes): Update prototype.\n\t* decl.c (start_decl, grokdeclarator, start_function): Update\n\tcalls to decl_attributes and cplus_decl_attributes.\n\t* friend.c (do_friend): Update call to cplus_decl_attributes.\n\t* parse.y (parse_bitfield): Update call to cplus_decl_attributes.\n\nFrom-SVN: r43995", "tree": {"sha": "7344925821f5f63d7da1217406a45dd134918cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7344925821f5f63d7da1217406a45dd134918cfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59387d2e310983bced3bf86cb759a1dbc1520277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59387d2e310983bced3bf86cb759a1dbc1520277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59387d2e310983bced3bf86cb759a1dbc1520277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59387d2e310983bced3bf86cb759a1dbc1520277/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e47c5acd7b2c5dcaf4ece03897e9baa12e867cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e47c5acd7b2c5dcaf4ece03897e9baa12e867cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e47c5acd7b2c5dcaf4ece03897e9baa12e867cf9"}], "stats": {"total": 149, "additions": 100, "deletions": 49}, "files": [{"sha": "5fa755290bf55daa721eef0fbd63c9f82e54f7b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -1,3 +1,14 @@\n+2001-07-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (decl_attributes): Take a pointer to the node to\n+\twhich attributes are to be attached, and a flags argument.\n+\t* c-common.h (enum attribute_flags): New.\n+\t(decl_attributes): Update prototype.\n+\t* c-decl.c (start_decl, push_parm_decl, finish_struct,\n+\tfinish_enum, start_function): Update calls to decl_attributes.\n+\t* c-parse.in (component_declarator, component_notype_declarator,\n+\tlabel): Update calls to decl_attributes.\n+\n Fri Jul 13 23:04:00 2001  Denis Chertykov  <denisc@overta.ru>\n \n \t* config/avr/avr.md (strlenhi): PARALLEL keyword removed."}, {"sha": "751ba267c9871e4ab6be79a8adc1af26e7f6d6e5", "filename": "gcc/c-common.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -723,12 +723,19 @@ default_valid_lang_attribute (attr_name, attr_args, decl, type)\n int (*valid_lang_attribute) PARAMS ((tree, tree, tree, tree))\n      = default_valid_lang_attribute;\n \n-/* Process the attributes listed in ATTRIBUTES and install them in NODE,\n-   which is either a DECL (including a TYPE_DECL) or a TYPE.  */\n+/* Process the attributes listed in ATTRIBUTES and install them in *NODE,\n+   which is either a DECL (including a TYPE_DECL) or a TYPE.  If a DECL,\n+   it should be modified in place; if a TYPE, a copy should be created.\n+   FLAGS gives further information, in the form of a bitwise OR of flags\n+   in enum attribute_flags from c-common.h.  Depending on these flags,\n+   some attributes may be returned to be applied at a later stage (for\n+   example, to apply a decl attribute to the declaration rather than to\n+   its type).  */\n \n-void\n-decl_attributes (node, attributes)\n-     tree node, attributes;\n+tree\n+decl_attributes (node, attributes, flags)\n+     tree *node, attributes;\n+     int flags ATTRIBUTE_UNUSED;\n {\n   tree decl = 0, type = 0;\n   int is_type = 0;\n@@ -737,16 +744,16 @@ decl_attributes (node, attributes)\n   if (attrtab_idx == 0)\n     init_attributes ();\n \n-  if (DECL_P (node))\n+  if (DECL_P (*node))\n     {\n-      decl = node;\n+      decl = *node;\n       type = TREE_TYPE (decl);\n-      is_type = TREE_CODE (node) == TYPE_DECL;\n+      is_type = TREE_CODE (*node) == TYPE_DECL;\n     }\n-  else if (TYPE_P (node))\n-    type = node, is_type = 1;\n+  else if (TYPE_P (*node))\n+    type = *node, is_type = 1;\n \n-  (*targetm.insert_attributes) (node, &attributes);\n+  (*targetm.insert_attributes) (*node, &attributes);\n \n   for (a = attributes; a; a = TREE_CHAIN (a))\n     {\n@@ -979,16 +986,16 @@ decl_attributes (node, attributes)\n \t      else if (DECL_SECTION_NAME (decl) != NULL_TREE\n \t\t       && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n \t\t\t\t  TREE_STRING_POINTER (TREE_VALUE (args))) != 0)\n-\t\terror_with_decl (node,\n+\t\terror_with_decl (*node,\n \t\t\t\t \"section of `%s' conflicts with previous declaration\");\n \t      else\n \t\tDECL_SECTION_NAME (decl) = TREE_VALUE (args);\n \t    }\n \t  else\n-\t    error_with_decl (node,\n+\t    error_with_decl (*node,\n \t\t\t   \"section attribute not allowed for `%s'\");\n #else\n-\t  error_with_decl (node,\n+\t  error_with_decl (*node,\n \t\t  \"section attributes are not supported for this target\");\n #endif\n \t  break;\n@@ -1140,6 +1147,7 @@ decl_attributes (node, attributes)\n \t  break;\n \t}\n     }\n+  return NULL_TREE;\n }\n \n /* Split SPECS_ATTRS, a list of declspecs and prefix attributes, into two"}, {"sha": "0ba64b121d17756a578004efb861fb26c991b3f4", "filename": "gcc/c-common.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -498,7 +498,25 @@ extern void finish_fname_decls\t\t\tPARAMS ((void));\n extern const char *fname_as_string\t\tPARAMS ((int));\n extern tree fname_decl\t\t\t\tPARAMS ((unsigned, tree));\n extern const char *fname_string\t\t\tPARAMS ((unsigned));\n-extern void decl_attributes\t\t\tPARAMS ((tree, tree));\n+\n+/* Flags that may be passed in the third argument of decl_attributes.  */\n+enum attribute_flags\n+{\n+  /* The type passed in is the type of a DECL, and any attributes that\n+     should be passed in again to be applied to the DECL rather than the\n+     type should be returned.  */\n+  ATTR_FLAG_DECL_NEXT = 1,\n+  /* The type passed in is a function return type, and any attributes that\n+     should be passed in again to be applied to the function type rather\n+     than the return type should be returned.  */\n+  ATTR_FLAG_FUNCTION_NEXT = 2,\n+  /* The type passed in is an array element type, and any attributes that\n+     should be passed in again to be applied to the array type rather\n+     than the element type should be returned.  */\n+  ATTR_FLAG_ARRAY_NEXT = 4\n+};\n+\n+extern tree decl_attributes\t\t\tPARAMS ((tree *, tree, int));\n extern void init_function_format_info\t\tPARAMS ((void));\n extern void check_function_format\t\tPARAMS ((int *, tree, tree, tree));\n extern void set_Wformat\t\t\t\tPARAMS ((int));"}, {"sha": "a9f6968b7ea9a6b9f1a02404aa79cdc3c7a0a2bf", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -3341,8 +3341,8 @@ start_decl (declarator, declspecs, initialized, attributes)\n      int initialized;\n      tree attributes;\n {\n-  register tree decl = grokdeclarator (declarator, declspecs,\n-\t\t\t\t       NORMAL, initialized);\n+  tree decl = grokdeclarator (declarator, declspecs,\n+\t\t\t      NORMAL, initialized);\n   register tree tem;\n \n   if (warn_main > 0 && TREE_CODE (decl) != FUNCTION_DECL\n@@ -3448,7 +3448,7 @@ start_decl (declarator, declspecs, initialized, attributes)\n     DECL_COMMON (decl) = 1;\n \n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n-  decl_attributes (decl, attributes);\n+  decl_attributes (&decl, attributes, 0);\n \n   /* Add this decl to the current binding level.\n      TEM may equal DECL or it may be a previous decl of the same name.  */\n@@ -3712,7 +3712,7 @@ push_parm_decl (parm)\n \n   decl = grokdeclarator (TREE_VALUE (TREE_PURPOSE (parm)),\n \t\t\t TREE_PURPOSE (TREE_PURPOSE (parm)), PARM, 0);\n-  decl_attributes (decl, TREE_VALUE (parm));\n+  decl_attributes (&decl, TREE_VALUE (parm), 0);\n \n #if 0\n   if (DECL_NAME (decl))\n@@ -5340,7 +5340,7 @@ finish_struct (t, fieldlist, attributes)\n \n   TYPE_SIZE (t) = 0;\n \n-  decl_attributes (t, attributes);\n+  decl_attributes (&t, attributes, 0);\n \n   /* Nameless union parm types are useful as GCC extension.  */\n   if (! (TREE_CODE (t) == UNION_TYPE && TYPE_NAME (t) == 0) && !pedantic)\n@@ -5704,7 +5704,7 @@ finish_enum (enumtype, values, attributes)\n   if (in_parm_level_p ())\n     warning (\"enum defined inside parms\");\n \n-  decl_attributes (enumtype, attributes);\n+  decl_attributes (&enumtype, attributes, 0);\n \n   /* Calculate the maximum value of any enumerator in this type.  */\n \n@@ -5928,7 +5928,7 @@ start_function (declspecs, declarator, attributes)\n       return 0;\n     }\n \n-  decl_attributes (decl1, attributes);\n+  decl_attributes (&decl1, attributes, 0);\n \n   announce_function (decl1);\n "}, {"sha": "a094ebb146f21bc6e90bf1561ebe200c97bc0d6d", "filename": "gcc/c-parse.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -1896,27 +1896,27 @@ components_notype:\n component_declarator:\n \t  save_filename save_lineno declarator maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, $3, current_declspecs, NULL_TREE);\n-\t\t  decl_attributes ($$, chainon ($4, prefix_attributes)); }\n+\t\t  decl_attributes (&$$, chainon ($4, prefix_attributes), 0); }\n \t| save_filename save_lineno\n \t  declarator ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, $3, current_declspecs, $5);\n-\t\t  decl_attributes ($$, chainon ($6, prefix_attributes)); }\n+\t\t  decl_attributes (&$$, chainon ($6, prefix_attributes), 0); }\n \t| save_filename save_lineno ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, NULL_TREE, current_declspecs, $4);\n-\t\t  decl_attributes ($$, chainon ($5, prefix_attributes)); }\n+\t\t  decl_attributes (&$$, chainon ($5, prefix_attributes), 0); }\n \t;\n \n component_notype_declarator:\n \t  save_filename save_lineno notype_declarator maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, $3, current_declspecs, NULL_TREE);\n-\t\t  decl_attributes ($$, chainon ($4, prefix_attributes)); }\n+\t\t  decl_attributes (&$$, chainon ($4, prefix_attributes), 0); }\n \t| save_filename save_lineno\n \t  notype_declarator ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, $3, current_declspecs, $5);\n-\t\t  decl_attributes ($$, chainon ($6, prefix_attributes)); }\n+\t\t  decl_attributes (&$$, chainon ($6, prefix_attributes), 0); }\n \t| save_filename save_lineno ':' expr_no_commas maybe_attribute\n \t\t{ $$ = grokfield ($1, $2, NULL_TREE, current_declspecs, $4);\n-\t\t  decl_attributes ($$, chainon ($5, prefix_attributes)); }\n+\t\t  decl_attributes (&$$, chainon ($5, prefix_attributes), 0); }\n \t;\n \n /* We chain the enumerators in reverse order.\n@@ -2447,7 +2447,7 @@ label:\t  CASE expr_no_commas ':'\n \t\t  stmt_count++;\n \t\t  if (label)\n \t\t    {\n-\t\t      decl_attributes (label, $5);\n+\t\t      decl_attributes (&label, $5, 0);\n \t\t      $$ = add_stmt (build_stmt (LABEL_STMT, label));\n \t\t    }\n \t\t  else"}, {"sha": "61e59933461d4e14a0118483c43682e355f5963a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -1,3 +1,16 @@\n+2001-07-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl2.c (cplus_decl_attributes): Take a pointer to the node to\n+\twhich attributes are to be attached, and a flags argument.  Update\n+\tcall to decl_attributes.\n+\t(grokfield): Update call to decl_attributes.\n+\t* class.c (finish_struct): Update call to cplus_decl_attributes.\n+\t* cp-tree.h (cplus_decl_attributes): Update prototype.\n+\t* decl.c (start_decl, grokdeclarator, start_function): Update\n+\tcalls to decl_attributes and cplus_decl_attributes.\n+\t* friend.c (do_friend): Update call to cplus_decl_attributes.\n+\t* parse.y (parse_bitfield): Update call to cplus_decl_attributes.\n+\n 2001-07-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (make_rtl_for_nonlocal_decl): Set DECL_C_HARD_REGISTER"}, {"sha": "2ec3448d6365ce717613496143f17e14218664d6", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -5539,7 +5539,7 @@ finish_struct (t, attributes)\n      as necessary.  */\n   unreverse_member_declarations (t);\n \n-  cplus_decl_attributes (t, attributes, NULL_TREE);\n+  cplus_decl_attributes (&t, attributes, NULL_TREE, 0);\n \n   /* Nadger the current location so that diagnostics point to the start of\n      the struct, not the end.  */"}, {"sha": "e8a61a8b11c8a06dd7b4d546646451c66d452afa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -3907,7 +3907,7 @@ extern tree grokbitfield\t\t\tPARAMS ((tree, tree, tree));\n extern tree groktypefield\t\t\tPARAMS ((tree, tree));\n extern tree grokoptypename\t\t\tPARAMS ((tree, tree));\n extern int copy_assignment_arg_p\t\tPARAMS ((tree, int));\n-extern void cplus_decl_attributes\t\tPARAMS ((tree, tree, tree));\n+extern void cplus_decl_attributes\t\tPARAMS ((tree *, tree, tree, int));\n extern tree constructor_name_full\t\tPARAMS ((tree));\n extern tree constructor_name\t\t\tPARAMS ((tree));\n extern void defer_fn            \t\tPARAMS ((tree));"}, {"sha": "bc157b37d6861446ba71c7735934a2a66dd96343", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -7128,7 +7128,7 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n      int initialized;\n      tree attributes, prefix_attributes;\n {\n-  register tree decl;\n+  tree decl;\n   register tree type, tem;\n   tree context;\n   extern int have_extern_spec;\n@@ -7221,7 +7221,7 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n     }\n \n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n-  cplus_decl_attributes (decl, attributes, prefix_attributes);\n+  cplus_decl_attributes (&decl, attributes, prefix_attributes, 0);\n \n   if (context && COMPLETE_TYPE_P (complete_type (context)))\n     {\n@@ -10471,7 +10471,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \tignore_attrs = 0;\n       else if (inner_attrs)\n \t{\n-\t  decl_attributes (type, inner_attrs);\n+\t  decl_attributes (&type, inner_attrs, 0);\n \t  inner_attrs = NULL_TREE;\n \t}\n \n@@ -10990,7 +10990,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n   if (inner_attrs)\n     {\n       if (! ignore_attrs)\n-\tdecl_attributes (type, inner_attrs);\n+\tdecl_attributes (&type, inner_attrs, 0);\n       else if (attrlist)\n \tTREE_VALUE (attrlist) = chainon (inner_attrs, TREE_VALUE (attrlist));\n       else\n@@ -13639,7 +13639,7 @@ start_function (declspecs, declarator, attrs, flags)\n   pushlevel (0);\n   current_binding_level->parm_flag = 1;\n \n-  cplus_decl_attributes (decl1, NULL_TREE, attrs);\n+  cplus_decl_attributes (&decl1, NULL_TREE, attrs, 0);\n \n   /* Promote the value to int before returning it.  */\n   if (c_promoting_integer_type_p (restype))"}, {"sha": "5a1a1edc66736faf34b037c6d8b52e793178cfe7", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -1531,7 +1531,7 @@ tree\n grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n      tree declarator, declspecs, init, asmspec_tree, attrlist;\n {\n-  register tree value;\n+  tree value;\n   const char *asmspec = 0;\n   int flags = LOOKUP_ONLYCONVERTING;\n \n@@ -1679,8 +1679,8 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n     value = push_template_decl (value);\n \n   if (attrlist)\n-    cplus_decl_attributes (value, TREE_PURPOSE (attrlist),\n-\t\t\t   TREE_VALUE (attrlist));\n+    cplus_decl_attributes (&value, TREE_PURPOSE (attrlist),\n+\t\t\t   TREE_VALUE (attrlist), 0);\n \n   if (TREE_CODE (value) == VAR_DECL)\n     {\n@@ -1875,19 +1875,20 @@ grok_function_init (decl, init)\n }\n \f\n void\n-cplus_decl_attributes (decl, attributes, prefix_attributes)\n-     tree decl, attributes, prefix_attributes;\n+cplus_decl_attributes (decl, attributes, prefix_attributes, flags)\n+     tree *decl, attributes, prefix_attributes;\n+     int flags;\n {\n-  if (decl == NULL_TREE || decl == void_type_node)\n+  if (*decl == NULL_TREE || *decl == void_type_node)\n     return;\n \n-  if (TREE_CODE (decl) == TEMPLATE_DECL)\n-    decl = DECL_TEMPLATE_RESULT (decl);\n+  if (TREE_CODE (*decl) == TEMPLATE_DECL)\n+    decl = &DECL_TEMPLATE_RESULT (*decl);\n \n-  decl_attributes (decl, chainon (attributes, prefix_attributes));\n+  decl_attributes (decl, chainon (attributes, prefix_attributes), flags);\n \n-  if (TREE_CODE (decl) == TYPE_DECL)\n-    SET_IDENTIFIER_TYPE_VALUE (DECL_NAME (decl), TREE_TYPE (decl));\n+  if (TREE_CODE (*decl) == TYPE_DECL)\n+    SET_IDENTIFIER_TYPE_VALUE (DECL_NAME (*decl), TREE_TYPE (*decl));\n }\n \f\n /* CONSTRUCTOR_NAME:"}, {"sha": "f7ff9848a6fe66a30f02932468471d03a1dbd2f5", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -447,7 +447,7 @@ do_friend (ctype, declarator, decl, parmdecls, attrlist,\n     } \n \n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n-  cplus_decl_attributes (decl, attributes, prefix_attributes);\n+  cplus_decl_attributes (&decl, attributes, prefix_attributes, 0);\n \n   return decl;\n }"}, {"sha": "276537582d24abefc322dc778e5ffd540f33914d", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59387d2e310983bced3bf86cb759a1dbc1520277/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=59387d2e310983bced3bf86cb759a1dbc1520277", "patch": "@@ -182,7 +182,7 @@ parse_bitfield (declarator, attributes, width)\n      tree declarator, attributes, width;\n {\n   tree d = grokbitfield (declarator, current_declspecs, width);\n-  cplus_decl_attributes (d, attributes, prefix_attributes);\n+  cplus_decl_attributes (&d, attributes, prefix_attributes, 0);\n   decl_type_access_control (d);\n   return d;\n }"}]}