{"sha": "f094a21f31a0ada105b5c8e7fe85f05c225fd3f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA5NGEyMWYzMWEwYWRhMTA1YjVjOGU3ZmU4NWYwNWMyMjVmZDNmNA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-05-13T17:01:16Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-05-13T17:01:16Z"}, "message": "re PR fortran/85742 (sizeof allocatable arrays returning wrong value)\n\n2018-05-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/85742\n\t* trans-types.c (gfc_get_dtype_rank_type): Reorder evaluation\n\tof 'size'. If the element type is a pointer use the size of the\n\tTREE_TYPE of the type, unless it is VOID_TYPE. In this latter\n\tcase, set the size to zero.\n\n2018-05-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/85742\n\t* gfortran.dg/assumed_type_9.f90 : New test.\n\nFrom-SVN: r260211", "tree": {"sha": "9da4b0c241f1ee86401dc99456230cdcccf0a722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9da4b0c241f1ee86401dc99456230cdcccf0a722"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4/comments", "author": null, "committer": null, "parents": [{"sha": "798a67a4ce57b295d568a8548c0319258a805c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798a67a4ce57b295d568a8548c0319258a805c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798a67a4ce57b295d568a8548c0319258a805c23"}], "stats": {"total": 63, "additions": 57, "deletions": 6}, "files": [{"sha": "a00e8617d56a888c6bfa354ac6e51f242451989a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f094a21f31a0ada105b5c8e7fe85f05c225fd3f4", "patch": "@@ -1,3 +1,11 @@\n+2018-05-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/85742\n+\t* trans-types.c (gfc_get_dtype_rank_type): Reorder evaluation\n+\tof 'size'. If the element type is a pointer use the size of the\n+\tTREE_TYPE of the type, unless it is VOID_TYPE. In this latter\n+\tcase, set the size to zero.\n+\n 2018-05-13  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.h: Remove prototype.\n@@ -7,7 +15,7 @@\n \n \tPR fortran/85542\n \t* expr.c (check_inquiry): Avoid NULL pointer dereference.\n- \n+\n 2018-05-10  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/85687"}, {"sha": "f50eb0a9f01d809839ae05fde06df5251b43b4ca", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=f094a21f31a0ada105b5c8e7fe85f05c225fd3f4", "patch": "@@ -1518,6 +1518,8 @@ gfc_get_dtype_rank_type (int rank, tree etype)\n   tree field;\n   vec<constructor_elt, va_gc> *v = NULL;\n \n+  size = TYPE_SIZE_UNIT (etype);\n+\n   switch (TREE_CODE (etype))\n     {\n     case INTEGER_TYPE:\n@@ -1546,22 +1548,24 @@ gfc_get_dtype_rank_type (int rank, tree etype)\n     /* We will never have arrays of arrays.  */\n     case ARRAY_TYPE:\n       n = BT_CHARACTER;\n+      if (size == NULL_TREE)\n+\tsize = TYPE_SIZE_UNIT (TREE_TYPE (etype));\n       break;\n \n     case POINTER_TYPE:\n       n = BT_ASSUMED;\n+      if (TREE_CODE (TREE_TYPE (etype)) != VOID_TYPE)\n+\tsize = TYPE_SIZE_UNIT (TREE_TYPE (etype));\n+      else\n+\tsize = build_int_cst (size_type_node, 0);\n     break;\n \n     default:\n       /* TODO: Don't do dtype for temporary descriptorless arrays.  */\n-      /* We can strange array types for temporary arrays.  */\n+      /* We can encounter strange array types for temporary arrays.  */\n       return gfc_index_zero_node;\n     }\n \n-  size = TYPE_SIZE_UNIT (etype);\n-  if (n == BT_CHARACTER && size == NULL_TREE)\n-    size = TYPE_SIZE_UNIT (TREE_TYPE (etype));\n-\n   tmp = get_dtype_type_node ();\n   field = gfc_advance_chain (TYPE_FIELDS (tmp),\n \t\t\t     GFC_DTYPE_ELEM_LEN);"}, {"sha": "657390ce5d40561c75b2a70eaf8a639dfe34fe9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f094a21f31a0ada105b5c8e7fe85f05c225fd3f4", "patch": "@@ -1,3 +1,8 @@\n+2018-05-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/85742\n+\t* gfortran.dg/assumed_type_9.f90 : New test.\n+\n 2018-05-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/85542"}, {"sha": "c4a93fe7c657f31232f5253e806e880088196233", "filename": "gcc/testsuite/gfortran.dg/assumed_type_9.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f094a21f31a0ada105b5c8e7fe85f05c225fd3f4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_9.f90?ref=f094a21f31a0ada105b5c8e7fe85f05c225fd3f4", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR85742 in which the descriptors, passed to alsize,\n+! for 'a' and 'b' had the wrong element length.\n+!\n+! Contributed by Cesar Philippidis  <cesar@gcc.gnu.org>\n+!\n+program main\n+  implicit none\n+  integer, allocatable :: a\n+  real, pointer :: b\n+  integer, allocatable :: am(:,:)\n+  real, pointer :: bm(:,:)\n+\n+  allocate (a)\n+  allocate (b)\n+  allocate (am(3,3))\n+  allocate (bm(4,4))\n+\n+  if (sizeof (a) /= alsize (a)) stop 1\n+  if (sizeof (b) /= alsize (b)) stop 2\n+  if (sizeof (am) /= alsize (am)) stop 3\n+  if (sizeof (bm) /= alsize (bm)) stop 4\n+\n+  deallocate (b)\n+  deallocate (bm)\n+contains\n+  function alsize (a)\n+    integer alsize\n+    type (*), dimension (..), contiguous :: a\n+    alsize = sizeof(a)\n+  end function\n+end program main\n+"}]}