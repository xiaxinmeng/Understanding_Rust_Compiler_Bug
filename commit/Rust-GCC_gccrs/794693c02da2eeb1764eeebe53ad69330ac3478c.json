{"sha": "794693c02da2eeb1764eeebe53ad69330ac3478c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk0NjkzYzAyZGEyZWViMTc2NGVlZWJlNTNhZDY5MzMwYWMzNDc4Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-11-23T23:28:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-11-23T23:28:56Z"}, "message": "cse.c (record_jump_cond_subreg): New.\n\n        * cse.c (record_jump_cond_subreg): New.\n        (record_jump_cond): Use it instead of gen_lowpart.\n\nFrom-SVN: r91119", "tree": {"sha": "c62c104fd3a91e71cd31b74c847e07b9389b57ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c62c104fd3a91e71cd31b74c847e07b9389b57ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/794693c02da2eeb1764eeebe53ad69330ac3478c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794693c02da2eeb1764eeebe53ad69330ac3478c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794693c02da2eeb1764eeebe53ad69330ac3478c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794693c02da2eeb1764eeebe53ad69330ac3478c/comments", "author": null, "committer": null, "parents": [{"sha": "7a32a925c5f52ac95f4af8ca77ec7d77cc42282a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a32a925c5f52ac95f4af8ca77ec7d77cc42282a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a32a925c5f52ac95f4af8ca77ec7d77cc42282a"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "155e79759a11e2d76f473860bb590328462fbcb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794693c02da2eeb1764eeebe53ad69330ac3478c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794693c02da2eeb1764eeebe53ad69330ac3478c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=794693c02da2eeb1764eeebe53ad69330ac3478c", "patch": "@@ -1,3 +1,8 @@\n+2004-11-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* cse.c (record_jump_cond_subreg): New.\n+\t(record_jump_cond): Use it instead of gen_lowpart.\n+\n 2004-11-23  Daniel Jacobowitz  <dan@codesourcery.com>\n             Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "0858b0252b8fa0bf5ea2fd944d979a7a9427c1c0", "filename": "gcc/cse.c", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/794693c02da2eeb1764eeebe53ad69330ac3478c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/794693c02da2eeb1764eeebe53ad69330ac3478c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=794693c02da2eeb1764eeebe53ad69330ac3478c", "patch": "@@ -4335,6 +4335,18 @@ record_jump_equiv (rtx insn, int taken)\n   record_jump_cond (code, mode, op0, op1, reversed_nonequality);\n }\n \n+/* Yet another form of subreg creation.  In this case, we want something in\n+   MODE, and we should assume OP has MODE iff it is naturally modeless.  */\n+\n+static rtx\n+record_jump_cond_subreg (enum machine_mode mode, rtx op)\n+{\n+  enum machine_mode op_mode = GET_MODE (op);\n+  if (op_mode == mode || op_mode == VOIDmode)\n+    return op;\n+  return lowpart_subreg (mode, op, op_mode);\n+}\n+\n /* We know that comparison CODE applied to OP0 and OP1 in MODE is true.\n    REVERSED_NONEQUALITY is nonzero if CODE had to be swapped.\n    Make any useful entries we can with that information.  Called from\n@@ -4359,23 +4371,21 @@ record_jump_cond (enum rtx_code code, enum machine_mode mode, rtx op0,\n \t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (op0)))))\n     {\n       enum machine_mode inner_mode = GET_MODE (SUBREG_REG (op0));\n-      rtx tem = gen_lowpart (inner_mode, op1);\n-\n-      record_jump_cond (code, mode, SUBREG_REG (op0),\n-\t\t\ttem ? tem : gen_rtx_SUBREG (inner_mode, op1, 0),\n-\t\t\treversed_nonequality);\n+      rtx tem = record_jump_cond_subreg (inner_mode, op1);\n+      if (tem)\n+\trecord_jump_cond (code, mode, SUBREG_REG (op0), tem,\n+\t\t\t  reversed_nonequality);\n     }\n \n   if (code == EQ && GET_CODE (op1) == SUBREG\n       && (GET_MODE_SIZE (GET_MODE (op1))\n \t  > GET_MODE_SIZE (GET_MODE (SUBREG_REG (op1)))))\n     {\n       enum machine_mode inner_mode = GET_MODE (SUBREG_REG (op1));\n-      rtx tem = gen_lowpart (inner_mode, op0);\n-\n-      record_jump_cond (code, mode, SUBREG_REG (op1),\n-\t\t\ttem ? tem : gen_rtx_SUBREG (inner_mode, op0, 0),\n-\t\t\treversed_nonequality);\n+      rtx tem = record_jump_cond_subreg (inner_mode, op0);\n+      if (tem)\n+\trecord_jump_cond (code, mode, SUBREG_REG (op1), tem,\n+\t\t\t  reversed_nonequality);\n     }\n \n   /* Similarly, if this is an NE comparison, and either is a SUBREG\n@@ -4391,11 +4401,10 @@ record_jump_cond (enum rtx_code code, enum machine_mode mode, rtx op0,\n \t  < GET_MODE_SIZE (GET_MODE (SUBREG_REG (op0)))))\n     {\n       enum machine_mode inner_mode = GET_MODE (SUBREG_REG (op0));\n-      rtx tem = gen_lowpart (inner_mode, op1);\n-\n-      record_jump_cond (code, mode, SUBREG_REG (op0),\n-\t\t\ttem ? tem : gen_rtx_SUBREG (inner_mode, op1, 0),\n-\t\t\treversed_nonequality);\n+      rtx tem = record_jump_cond_subreg (inner_mode, op1);\n+      if (tem)\n+\trecord_jump_cond (code, mode, SUBREG_REG (op0), tem,\n+\t\t\t  reversed_nonequality);\n     }\n \n   if (code == NE && GET_CODE (op1) == SUBREG\n@@ -4404,11 +4413,10 @@ record_jump_cond (enum rtx_code code, enum machine_mode mode, rtx op0,\n \t  < GET_MODE_SIZE (GET_MODE (SUBREG_REG (op1)))))\n     {\n       enum machine_mode inner_mode = GET_MODE (SUBREG_REG (op1));\n-      rtx tem = gen_lowpart (inner_mode, op0);\n-\n-      record_jump_cond (code, mode, SUBREG_REG (op1),\n-\t\t\ttem ? tem : gen_rtx_SUBREG (inner_mode, op0, 0),\n-\t\t\treversed_nonequality);\n+      rtx tem = record_jump_cond_subreg (inner_mode, op0);\n+      if (tem)\n+\trecord_jump_cond (code, mode, SUBREG_REG (op1), tem,\n+\t\t\t  reversed_nonequality);\n     }\n \n   /* Hash both operands.  */"}]}