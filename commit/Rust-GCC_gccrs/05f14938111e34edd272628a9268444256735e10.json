{"sha": "05f14938111e34edd272628a9268444256735e10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmMTQ5MzgxMTFlMzRlZGQyNzI2MjhhOTI2ODQ0NDI1NjczNWUxMA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-22T02:18:50Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-22T02:18:50Z"}, "message": "c++: Diagnose invalid use of member function in requires\n\nThis updates diagnose_valid_expression to mirror the convert_to_void check added\nto tsubst_valid_expression_requirement by r10-7554.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/67825\n\t* constraint.cc (diagnose_valid_expression): Check convert_to_void here\n\tas well as in tsubst_valid_expression_requirement.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/67825\n\t* g++.dg/concepts/diagnostic10.C: New test.\n\t* g++.dg/cpp2a/concepts-pr67178.C: Adjust dg-message.", "tree": {"sha": "d6968099e75f5c54e0faee13b9f20c80a70b3747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6968099e75f5c54e0faee13b9f20c80a70b3747"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05f14938111e34edd272628a9268444256735e10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f14938111e34edd272628a9268444256735e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f14938111e34edd272628a9268444256735e10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f14938111e34edd272628a9268444256735e10/comments", "author": null, "committer": null, "parents": [{"sha": "c270abe832fe77f34d49c00da20de9b1c6f28ea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c270abe832fe77f34d49c00da20de9b1c6f28ea9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c270abe832fe77f34d49c00da20de9b1c6f28ea9"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "e7733d0517ef478633a7319470a5dc72f9f69d85", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f14938111e34edd272628a9268444256735e10/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f14938111e34edd272628a9268444256735e10/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=05f14938111e34edd272628a9268444256735e10", "patch": "@@ -1,3 +1,9 @@\n+2020-04-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/67825\n+\t* constraint.cc (diagnose_valid_expression): Check convert_to_void here\n+\tas well as in tsubst_valid_expression_requirement.\n+\n 2020-04-21  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94549"}, {"sha": "c05fafe5da1bf79925a33826d0a479e9369abba3", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f14938111e34edd272628a9268444256735e10/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f14938111e34edd272628a9268444256735e10/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=05f14938111e34edd272628a9268444256735e10", "patch": "@@ -3242,15 +3242,19 @@ static tree\n diagnose_valid_expression (tree expr, tree args, tree in_decl)\n {\n   tree result = tsubst_expr (expr, args, tf_none, in_decl, false);\n-  if (result != error_mark_node)\n+  if (result != error_mark_node\n+      && convert_to_void (result, ICV_STATEMENT, tf_none) != error_mark_node)\n     return result;\n \n   location_t loc = cp_expr_loc_or_input_loc (expr);\n   if (diagnosing_failed_constraint::replay_errors_p ())\n     {\n       /* Replay the substitution error.  */\n       inform (loc, \"the required expression %qE is invalid, because\", expr);\n-      tsubst_expr (expr, args, tf_error, in_decl, false);\n+      if (result == error_mark_node)\n+\ttsubst_expr (expr, args, tf_error, in_decl, false);\n+      else\n+\tconvert_to_void (result, ICV_STATEMENT, tf_error);\n     }\n   else\n     inform (loc, \"the required expression %qE is invalid\", expr);"}, {"sha": "be374fba120b8b1e7641d953181cfad728693b9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f14938111e34edd272628a9268444256735e10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f14938111e34edd272628a9268444256735e10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05f14938111e34edd272628a9268444256735e10", "patch": "@@ -1,8 +1,14 @@\n+2020-04-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/67825\n+\t* g++.dg/concepts/diagnostic10.C: New test.\n+\t* g++.dg/cpp2a/concepts-pr67178.C: Adjust dg-message.\n+\n 2020-04-21  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94549\n \t* g++.dg/concepts/inherit-ctor3.C: Adjust expected diagnostics.\n-\t* g++.dg/cpp2a/concepts-inherit-ctor4.C: New test.\n+\t* g++.dg/cpp2a/concepts-inherit-ctor4.C: Likewise.\n \t* g++.dg/cpp2a/concepts-inherit-ctor8.C: New test.\n \n 2020-04-21  Jonathan Wakely  <jwakely@redhat.com>"}, {"sha": "fcc6043ca933f29fbdd44674d98fcfa6618d021a", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic10.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f14938111e34edd272628a9268444256735e10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f14938111e34edd272628a9268444256735e10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic10.C?ref=05f14938111e34edd272628a9268444256735e10", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/67825\n+// { dg-do compile { target concepts } }\n+// { dg-additional-options \"-fconcepts-diagnostics-depth=2\" }\n+\n+template<typename T>\n+  requires requires (T t) { t.f; } // { dg-error \"invalid use of non-static member function\" }\n+void foo() { }\n+\n+struct S\n+{\n+  int f();\n+};\n+\n+void\n+bar()\n+{\n+  foo<S>(); // { dg-error \"unsatisfied constraints\" }\n+}"}, {"sha": "7154fc2b7fe1fdabfcb4047f284549e962a2c3dc", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-pr67178.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f14938111e34edd272628a9268444256735e10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f14938111e34edd272628a9268444256735e10/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-pr67178.C?ref=05f14938111e34edd272628a9268444256735e10", "patch": "@@ -12,7 +12,7 @@ concept C0 = requires (auto x) { // { dg-error \"placeholder type\" }\n template<typename T>\n concept C1 = requires (C1 auto x) { // { dg-error \"not been declared|placeholder|two or more|in requirements\" }\n   x; // { dg-error \"not declared\" }\n-  { x } -> c; // { dg-message \"not declared|does not satisfy\" }\n+  { x } -> c; // { dg-message \"is invalid\" }\n };\n \n template<typename T>"}]}