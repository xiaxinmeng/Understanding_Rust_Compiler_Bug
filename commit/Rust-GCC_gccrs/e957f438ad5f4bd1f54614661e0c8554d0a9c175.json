{"sha": "e957f438ad5f4bd1f54614661e0c8554d0a9c175", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1N2Y0MzhhZDVmNGJkMWY1NDYxNDY2MWUwYzg1NTRkMGE5YzE3NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T07:19:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T07:19:28Z"}, "message": "Removed.\n\nFrom-SVN: r134083", "tree": {"sha": "374172313e992ce7ceb46b4db8b76a0c34a2ea03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/374172313e992ce7ceb46b4db8b76a0c34a2ea03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e957f438ad5f4bd1f54614661e0c8554d0a9c175", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e957f438ad5f4bd1f54614661e0c8554d0a9c175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e957f438ad5f4bd1f54614661e0c8554d0a9c175", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e957f438ad5f4bd1f54614661e0c8554d0a9c175/comments", "author": null, "committer": null, "parents": [{"sha": "db17411e9478e8c677b7eab1fae2fdb58b45dea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db17411e9478e8c677b7eab1fae2fdb58b45dea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db17411e9478e8c677b7eab1fae2fdb58b45dea7"}], "stats": {"total": 387, "additions": 0, "deletions": 387}, "files": [{"sha": "7dde58ea0dbe227b0f8184610845d1f29d1d7b2a", "filename": "gcc/ada/gnatbl.c", "status": "removed", "additions": 0, "deletions": 387, "changes": 387, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db17411e9478e8c677b7eab1fae2fdb58b45dea7/gcc%2Fada%2Fgnatbl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db17411e9478e8c677b7eab1fae2fdb58b45dea7/gcc%2Fada%2Fgnatbl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbl.c?ref=db17411e9478e8c677b7eab1fae2fdb58b45dea7", "patch": "@@ -1,387 +0,0 @@\n-/****************************************************************************\n- *                                                                          *\n- *                           GNAT COMPILER TOOLS                            *\n- *                                                                          *\n- *                               G N A T B L                                *\n- *                                                                          *\n- *                          C Implementation File                           *\n- *                                                                          *\n- *            Copyright (C) 1992-2007, Free Software Foundation, Inc.       *\n- *                                                                          *\n- * GNAT is free software;  you can  redistribute it  and/or modify it under *\n- * terms of the  GNU General Public License as published  by the Free Soft- *\n- * ware  Foundation;  either version 3,  or (at your option) any later ver- *\n- * sion.  GNAT is distributed in the hope that it will be useful, but WITH- *\n- * OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *\n- * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License *\n- * for  more details.  You should have  received  a copy of the GNU General *\n- * Public License  distributed with GNAT; see file COPYING3.  If not, go to *\n- * http://www.gnu.org/licenses for a complete copy of the license.          *\n- *                                                                          *\n- *                                                                          *\n- * GNAT was originally developed  by the GNAT team at  New York University. *\n- * Extensive contributions were provided by Ada Core Technologies Inc.      *\n- *                                                                          *\n- ****************************************************************************/\n-\n-#ifdef VMS\n-#define _POSIX_EXIT 1\n-#endif\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-\n-#if defined (__EMX__) || defined (MSDOS)\n-#include <process.h>\n-#endif\n-#include \"adaint.h\"\n-\n-/* These can be set by command line arguments */\n-char *binder_path = 0;\n-char *linker_path = 0;\n-char *exec_file_name = 0;\n-char *ali_file_name = 0;\n-#define BIND_ARG_MAX 512\n-char *bind_args[BIND_ARG_MAX];\n-int  bind_arg_index = -1;\n-#ifdef MSDOS\n-char *coff2exe_path = 0;\n-char *coff2exe_args[] = {(char *) 0, (char *) 0};\n-char *del_command = 0;\n-#endif\n-int  verbose      = 0;\n-int  o_present    = 0;\n-int  g_present    = 0;\n-\n-int  link_arg_max = -1;\n-char **link_args = (char **) 0;\n-int  link_arg_index = -1;\n-\n-char *gcc_B_arg = 0;\n-\n-#ifndef DIR_SEPARATOR\n-#if defined (__EMX__)\n-#define DIR_SEPARATOR '\\\\'\n-#else\n-#define DIR_SEPARATOR '/'\n-#endif\n-#endif\n-\n-static int linkonly = 0;\n-\n-static void addarg (char *);\n-static void process_args (int *, char *[]);\n-\f\n-static void\n-addarg (char *str)\n-{\n-  int i;\n-\n-  if (++link_arg_index >= link_arg_max)\n-    {\n-      char **new_link_args\n-\t= (char **) xcalloc (link_arg_max + 1000, sizeof (char *));\n-\n-      for (i = 0; i <= link_arg_max; i++)\n-\tnew_link_args[i] = link_args[i];\n-\n-      if (link_args)\n-\tfree (link_args);\n-\n-      link_arg_max += 1000;\n-      link_args = new_link_args;\n-    }\n-\n-  link_args[link_arg_index] = str;\n-}\n-\n-static void\n-process_args (int *p_argc, char *argv[])\n-{\n-  int i, j;\n-\n-  for (i = 1; i < *p_argc; i++)\n-    {\n-      /* -I is passed on to gnatbind */\n-      if (! strncmp( argv[i], \"-I\", 2))\n-\t{\n-\t  bind_arg_index += 1;\n-\t  if (bind_arg_index >= BIND_ARG_MAX)\n-\t    {\n-\t      fprintf (stderr, \"Too many arguments to gnatbind\\n\");\n-\t      exit (-1);\n-      }\n-\n-\t  bind_args[bind_arg_index] = argv[i];\n-\t}\n-\n-      /* -B is passed on to gcc */\n-      if (! strncmp (argv[i], \"-B\", 2))\n-\tgcc_B_arg = argv[i];\n-\n-      /* -v turns on verbose option here and is passed on to gcc */\n-\n-      if (! strcmp (argv[i], \"-v\"))\n-\tverbose = 1;\n-\n-      if (! strcmp (argv[i], \"-o\"))\n-\t{\n-\t  o_present = 1;\n-\t  exec_file_name = argv[i + 1];\n-\t}\n-\n-      if (! strcmp (argv[i], \"-g\"))\n-\tg_present = 1;\n-\n-      if (! strcmp (argv[i], \"-gnatbind\"))\n-\t{\n-\t  /* Explicit naming of binder. Grab the value then remove the\n-\t     two arguments from the argument list. */\n-\t  if ( i + 1 >= *p_argc )\n-\t    {\n-\t      fprintf (stderr, \"Missing argument for -gnatbind\\n\");\n-\t      exit (1);\n-\t    }\n-\n-\t  binder_path = __gnat_locate_exec (argv[i + 1], (char *) \".\");\n-\t  if (!binder_path)\n-\t    {\n-\t      fprintf (stderr, \"Could not locate binder: %s\\n\", argv[i + 1]);\n-\t      exit (1);\n-\t    }\n-\n-\t  for (j = i + 2; j < *p_argc; j++)\n-\t    argv[j - 2] = argv[j];\n-\n-\t  (*p_argc) -= 2;\n-\t  i--;\n-\t}\n-\n-    else if (! strcmp (argv[i], \"-linkonly\"))\n-      {\n-\t/* Don't call the binder. Set the flag and then remove the\n-\t   argument from the argument list. */\n-\tlinkonly = 1;\n-\tfor (j = i + 1; j < *p_argc; j++)\n-\t  argv[j - 1] = argv[j];\n-\n-\t*p_argc -= 1;\n-\ti--;\n-      }\n-\n-    else if (! strcmp (argv[i], \"-gnatlink\"))\n-      {\n-\t/* Explicit naming of binder.  Grab the value then remove the\n-\t   two arguments from the argument list. */\n-\tif (i + 1 >= *p_argc)\n-\t  {\n-\t    fprintf (stderr, \"Missing argument for -gnatlink\\n\");\n-\t    exit (1);\n-\t  }\n-\n-\tlinker_path = __gnat_locate_exec (argv[i + 1], (char *) \".\");\n-\tif (!linker_path)\n-\t  {\n-\t    fprintf (stderr, \"Could not locate linker: %s\\n\", argv[i + 1]);\n-\t    exit (1);\n-\t  }\n-\n-\tfor (j = i + 2; j < *p_argc; j++)\n-\t  argv[j - 2] = argv[j];\n-\t*p_argc -= 2;\n-\ti--;\n-      }\n-    }\n-}\n-extern int main (int, char **);\n-\n-int\n-main (int argc, char **argv)\n-{\n-  int i, j;\n-  int done_an_ali = 0;\n-  int retcode;\n-#ifdef VMS\n-  /* Warning: getenv only retrieves the first directory in VAXC$PATH */\n-  char *pathval =\n-    xstrdup (__gnat_to_canonical_dir_spec (getenv (\"VAXC$PATH\"), 0));\n-#else\n-  char *pathval = getenv (\"PATH\");\n-#endif\n-  char *spawn_args[5];\n-  int  spawn_index = 0;\n-\n-#if defined (__EMX__) || defined(MSDOS)\n-  char *tmppathval = malloc (strlen (pathval) + 3);\n-  strcpy (tmppathval, \".;\");\n-  pathval = strcat (tmppathval, pathval);\n-#endif\n-\n-  process_args (&argc , argv);\n-\n-  if (argc == 1)\n-    {\n-      fprintf\n-\t(stdout,\n-\t \"Usage: %s 'name'.ali\\n\", argv[0]);\n-      fprintf\n-\t(stdout,\n-\t \"             [-o exec_name]        -- by default it is 'name'\\n\");\n-      fprintf\n-\t(stdout,\n-\t \"             [-v]                  -- verbose mode\\n\");\n-      fprintf\n-\t(stdout,\n-\t \"             [-linkonly]           -- doesn't call binder\\n\");\n-      fprintf\n-\t(stdout,\n-\t \"             [-gnatbind name]      -- full name for gnatbind\\n\");\n-      fprintf\n-\t(stdout,\n-\t \"             [-gnatlink name]      -- full name for linker (gcc)\\n\");\n-      fprintf\n-\t(stdout,\n-\t \"             [list of objects]     -- non Ada binaries\\n\");\n-      fprintf\n-\t(stdout,\n-\t \"             [linker options]      -- other options for linker\\n\");\n-      exit (1);\n-    }\n-\n-  if (!binder_path && !linkonly)\n-    binder_path = __gnat_locate_exec ((char *) \"gnatbind\", pathval);\n-\n-  if (!binder_path && !linkonly)\n-    {\n-      fprintf (stderr, \"Couldn't locate gnatbind\\n\");\n-      exit (1);\n-    }\n-\n-  if (!linker_path)\n-    linker_path = __gnat_locate_exec ((char *) \"gnatlink\", pathval);\n-    if (!linker_path)\n-      {\n-\tfprintf (stderr, \"Couldn't locate gnatlink\\n\");\n-\texit (1);\n-      }\n-\n-#ifdef MSDOS\n-  coff2exe_path = __gnat_locate_regular_file (\"coff2exe.bat\", pathval);\n-  if (!coff2exe_path)\n-    {\n-      fprintf (stderr, \"Couldn't locate %s\\n\", \"coff2exe.bat\");\n-      exit (1);\n-    }\n-  else\n-    coff2exe_args[0] = coff2exe_path;\n-#endif\n-\n-  addarg (linker_path);\n-\n-  for (i = 1; i < argc; i++)\n-    {\n-      int arg_len = strlen (argv[i]);\n-\n-      if (arg_len > 4 && ! strcmp (&argv[i][arg_len - 4], \".ali\"))\n-\t{\n-\t  if (done_an_ali)\n-\t    {\n-\t      fprintf (stderr,\n-\t\t       \"Sorry - cannot handle more than one ALI file\\n\");\n-\t      exit (1);\n-\t    }\n-\n-\t  done_an_ali = 1;\n-\n-\t  if (__gnat_is_regular_file (argv[i]))\n-\t    {\n-\t      ali_file_name = argv[i];\n-\t      if (!linkonly)\n-\t\t{\n-\t\t  /* Run gnatbind */\n-\t\t  spawn_index = 0;\n-\t\t  spawn_args[spawn_index++] = binder_path;\n-\t\t  spawn_args[spawn_index++] = ali_file_name;\n-\t\t  for (j = 0 ; j <= bind_arg_index ; j++ )\n-\t\t    spawn_args[spawn_index++] = bind_args[j];\n-\t\t  spawn_args[spawn_index] = 0;\n-\n-\t\t  if (verbose)\n-\t\t    {\n-\t\t      int i;\n-\t\t      for (i = 0; i < 2; i++)\n-\t\t\tprintf (\"%s \", spawn_args[i]);\n-\n-\t\t      putchar ('\\n');\n-\t\t    }\n-\n-\t\t  retcode = __gnat_portable_spawn (spawn_args);\n-\t\t  if (retcode != 0)\n-\t\t    exit (retcode);\n-\t\t}\n-\t    }\n-\t  else\n-\t    addarg (argv[i]);\n-\t}\n-#ifdef MSDOS\n-      else if (!strcmp (argv[i], \"-o\"))\n-\t{\n-\t  addarg (argv[i]);\n-\t  if (i < argc)\n-\t    i++;\n-\n-\t  {\n-\t    char *ptr = strstr (argv[i], \".exe\");\n-\n-\t    arg_len = strlen (argv[i]);\n-\t    coff2exe_args[1] = malloc (arg_len + 1);\n-\t    strcpy (coff2exe_args[1], argv[i]);\n-\t    if (ptr != NULL && strlen (ptr) == 4)\n-\t      coff2exe_args[1][arg_len-4] = 0;\n-\n-\t    addarg (coff2exe_args[1]);\n-\t  }\n-\t}\n-#endif\n-      else\n-\taddarg (argv[i]);\n-    }\n-\n-  if (! done_an_ali)\n-    {\n-      fprintf (stderr, \"No \\\".ali\\\" file specified\\n\");\n-      exit (1);\n-    }\n-\n-  addarg (ali_file_name);\n-  addarg (NULL);\n-\n-  if (verbose)\n-    {\n-      int i;\n-\n-      for (i = 0; i < link_arg_index; i++)\n-\tprintf (\"%s \", link_args[i]);\n-\n-      putchar ('\\n');\n-    }\n-\n-  retcode = __gnat_portable_spawn (link_args);\n-  if (retcode != 0)\n-    exit (retcode);\n-\n-#ifdef MSDOS\n-  retcode = __gnat_portable_spawn (coff2exe_args);\n-  if (retcode != 0)\n-    exit (retcode);\n-\n-  if (!g_present)\n-    {\n-      del_command = malloc (strlen (coff2exe_args[1]) + 5);\n-      sprintf (del_command, \"del %s\", coff2exe_args[1]);\n-      retcode = system (del_command);\n-    }\n-#endif\n-\n-  exit(0);\n-}"}]}