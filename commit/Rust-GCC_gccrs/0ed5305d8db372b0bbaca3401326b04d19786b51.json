{"sha": "0ed5305d8db372b0bbaca3401326b04d19786b51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVkNTMwNWQ4ZGIzNzJiMGJiYWNhMzQwMTMyNmIwNGQxOTc4NmI1MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-17T19:58:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-17T19:58:05Z"}, "message": "Add commentary.\n\nFrom-SVN: r44978", "tree": {"sha": "4b897d33bbc1a1878fd5aa8044cc90360e4666cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b897d33bbc1a1878fd5aa8044cc90360e4666cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ed5305d8db372b0bbaca3401326b04d19786b51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed5305d8db372b0bbaca3401326b04d19786b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ed5305d8db372b0bbaca3401326b04d19786b51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ed5305d8db372b0bbaca3401326b04d19786b51/comments", "author": null, "committer": null, "parents": [{"sha": "32fa4d4a5d61299e741e147e46580cef298ad639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fa4d4a5d61299e741e147e46580cef298ad639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32fa4d4a5d61299e741e147e46580cef298ad639"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "89bfe085be985ee41fa0f47d73bbf83c96d1962b", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ed5305d8db372b0bbaca3401326b04d19786b51/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ed5305d8db372b0bbaca3401326b04d19786b51/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=0ed5305d8db372b0bbaca3401326b04d19786b51", "patch": "@@ -562,7 +562,30 @@ htab_collisions (htab)\n   return (double) htab->collisions / (double) htab->searches;\n }\n \n-/* Hash P as a null-terminated string.  */\n+/* Hash P as a null-terminated string.\n+\n+   Copied from gcc/hashtable.c.  Zack had the following to say with respect\n+   to applicability, though note that unlike hashtable.c, this hash table\n+   implementation re-hashes rather than chain buckets.\n+\n+   http://gcc.gnu.org/ml/gcc-patches/2001-08/msg01021.html\n+   From: Zack Weinberg <zackw@panix.com>\n+   Date: Fri, 17 Aug 2001 02:15:56 -0400\n+\n+   I got it by extracting all the identifiers from all the source code\n+   I had lying around in mid-1999, and testing many recurrences of\n+   the form \"H_n = H_{n-1} * K + c_n * L + M\" where K, L, M were either\n+   prime numbers or the appropriate identity.  This was the best one.\n+   I don't remember exactly what constituted \"best\", except I was\n+   looking at bucket-length distributions mostly.\n+   \n+   So it should be very good at hashing identifiers, but might not be\n+   as good at arbitrary strings.\n+   \n+   I'll add that it thoroughly trounces the hash functions recommended\n+   for this use at http://burtleburtle.net/bob/hash/index.html, both\n+   on speed and bucket distribution.  I haven't tried it against the\n+   function they just started using for Perl's hashes.  */\n \n hashval_t\n htab_hash_string (p)"}]}