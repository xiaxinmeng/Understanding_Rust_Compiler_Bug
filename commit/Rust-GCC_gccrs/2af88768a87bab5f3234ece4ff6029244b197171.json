{"sha": "2af88768a87bab5f3234ece4ff6029244b197171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmODg3NjhhODdiYWI1ZjMyMzRlY2U0ZmY2MDI5MjQ0YjE5NzE3MQ==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-10-23T18:45:15Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-10-23T18:45:15Z"}, "message": "reload1.c (reload_reg_reaches_end_p): A RELOAD_OTHER can overwrite the value in a RELOAD_FOR_INPUT and other kinds of...\n\n\t* reload1.c (reload_reg_reaches_end_p): A RELOAD_OTHER can\n\toverwrite the value in a RELOAD_FOR_INPUT and other kinds of\n\treloads just like an RELOAD_FOR_OUTPUT would.\n\nFrom-SVN: r37019", "tree": {"sha": "118ecad6f53ccd2286fe75a9eb596723de62a3f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/118ecad6f53ccd2286fe75a9eb596723de62a3f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af88768a87bab5f3234ece4ff6029244b197171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af88768a87bab5f3234ece4ff6029244b197171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af88768a87bab5f3234ece4ff6029244b197171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af88768a87bab5f3234ece4ff6029244b197171/comments", "author": null, "committer": null, "parents": [{"sha": "96af667a5e7aa8909958c4c59b8672fc93d24799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96af667a5e7aa8909958c4c59b8672fc93d24799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96af667a5e7aa8909958c4c59b8672fc93d24799"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "b8d1ab6772355072a6806154715844cbc73df2c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af88768a87bab5f3234ece4ff6029244b197171/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af88768a87bab5f3234ece4ff6029244b197171/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2af88768a87bab5f3234ece4ff6029244b197171", "patch": "@@ -1,5 +1,9 @@\n 2000-10-23  Geoff Keating  <geoffk@cygnus.com>\n \n+\t* reload1.c (reload_reg_reaches_end_p): A RELOAD_OTHER can\n+\toverwrite the value in a RELOAD_FOR_INPUT and other kinds of\n+\treloads just like an RELOAD_FOR_OUTPUT would.\n+\n \t* local-alloc.c (update_equiv_regs): Add an abort().  When\n \tdeleting or moving insns, update reg_equiv[regno].init_insns.\n "}, {"sha": "c194361118d4b2f5c01c84c50402fb0199cd642b", "filename": "gcc/reload1.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af88768a87bab5f3234ece4ff6029244b197171/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af88768a87bab5f3234ece4ff6029244b197171/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2af88768a87bab5f3234ece4ff6029244b197171", "patch": "@@ -4480,8 +4480,9 @@ reload_reg_reaches_end_p (regno, opnum, type)\n       if (TEST_HARD_REG_BIT (reload_reg_used_in_op_addr_reload, regno))\n \treturn 0;\n \n-      return (! TEST_HARD_REG_BIT (reload_reg_used_in_op_addr, regno)\n-\t      && ! TEST_HARD_REG_BIT (reload_reg_used_in_insn, regno));\n+      return (!TEST_HARD_REG_BIT (reload_reg_used_in_op_addr, regno)\n+\t      && !TEST_HARD_REG_BIT (reload_reg_used_in_insn, regno)\n+\t      && !TEST_HARD_REG_BIT (reload_reg_used, regno));\n \n     case RELOAD_FOR_INPUT:\n       /* Similar to input address, except we start at the next operand for\n@@ -4506,7 +4507,7 @@ reload_reg_reaches_end_p (regno, opnum, type)\n \t    || TEST_HARD_REG_BIT (reload_reg_used_in_output[i], regno))\n \t  return 0;\n \n-      return 1;\n+      return (!TEST_HARD_REG_BIT (reload_reg_used, regno));\n \n     case RELOAD_FOR_OPADDR_ADDR:\n       for (i = 0; i < reload_n_operands; i++)\n@@ -4515,8 +4516,9 @@ reload_reg_reaches_end_p (regno, opnum, type)\n \t    || TEST_HARD_REG_BIT (reload_reg_used_in_output[i], regno))\n \t  return 0;\n \n-      return (! TEST_HARD_REG_BIT (reload_reg_used_in_op_addr, regno)\n-\t      && !TEST_HARD_REG_BIT (reload_reg_used_in_insn, regno));\n+      return (!TEST_HARD_REG_BIT (reload_reg_used_in_op_addr, regno)\n+\t      && !TEST_HARD_REG_BIT (reload_reg_used_in_insn, regno)\n+\t      && !TEST_HARD_REG_BIT (reload_reg_used, regno));\n \n     case RELOAD_FOR_INSN:\n       /* These conflict with other outputs with RELOAD_OTHER.  So"}]}