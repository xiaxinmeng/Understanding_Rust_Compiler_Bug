{"sha": "a01be2f3095dc91a6999d4abb3e6c96c58bc5561", "node_id": "C_kwDOANBUbNoAKGEwMWJlMmYzMDk1ZGM5MWE2OTk5ZDRhYmIzZTZjOTZjNThiYzU1NjE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T22:03:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-11T22:49:53Z"}, "message": "power-ieee128: Fix up byte-swapping for IBM extended real(kind=16)\n\nHere is a patch to fix up the ppc64be vs. ppc64le byteswapping\nof IBM extended real(kind=16) and complex(kind=16).\nSimilarly to the BT_COMPLEX case it halves size and doubles nelems\nfor the bswap_array calls.  Of course for r16_ibm and r16_ieee conversions\none needs to make sure it is only done when the on file data is in that\nformat and not in IEEE quad.\n\n2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n\n\t* io/transfer.c (unformatted_read, unformatted_write): When\n\tbyteswapping IBM extended real(kind=16), handle it as byteswapping\n\ttwo real(kind=8) values.", "tree": {"sha": "8fb1f677f373939b92cb2c5cbad727ee85f8b2ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fb1f677f373939b92cb2c5cbad727ee85f8b2ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a01be2f3095dc91a6999d4abb3e6c96c58bc5561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01be2f3095dc91a6999d4abb3e6c96c58bc5561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01be2f3095dc91a6999d4abb3e6c96c58bc5561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01be2f3095dc91a6999d4abb3e6c96c58bc5561/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a574503ff95691c932fd896568f6914a63be4a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a574503ff95691c932fd896568f6914a63be4a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a574503ff95691c932fd896568f6914a63be4a02"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "f543dfd79dc149aaeef1695c8ced0839d5376bbf", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a01be2f3095dc91a6999d4abb3e6c96c58bc5561/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a01be2f3095dc91a6999d4abb3e6c96c58bc5561/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=a01be2f3095dc91a6999d4abb3e6c96c58bc5561", "patch": "@@ -1145,11 +1145,28 @@ unformatted_read (st_parameter_dt *dtp, bt type,\n   \t  size /= 2;\n   \t}\n #ifndef HAVE_GFC_REAL_17\n+#if defined(HAVE_GFC_REAL_16) && GFC_REAL_16_DIGITS == 106\n+      /* IBM extended format is stored as a pair of IEEE754\n+\t double values, with the more significant value first\n+\t in both big and little endian.  */\n+      if (kind == 16 && (type == BT_REAL || type == BT_COMPLEX))\n+\t{\n+\t  nelems *= 2;\n+\t  size /= 2;\n+\t}\n+#endif\n       bswap_array (dest, dest, size, nelems);\n #else\n       unit_convert bswap = convert & ~(GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM);\n       if (bswap == GFC_CONVERT_SWAP)\n-\tbswap_array (dest, dest, size, nelems);\n+\t{\n+\t  if ((type == BT_REAL || type == BT_COMPLEX)\n+\t      && ((kind == 16 && (convert & GFC_CONVERT_R16_IEEE) == 0)\n+\t\t  || (kind == 17 && (convert & GFC_CONVERT_R16_IBM))))\n+\t    bswap_array (dest, dest, size / 2, nelems * 2);\n+\t  else\n+\t    bswap_array (dest, dest, size, nelems);\n+\t}\n \n       if ((convert & GFC_CONVERT_R16_IEEE)\n \t  && kind == 16\n@@ -1274,6 +1291,18 @@ unformatted_write (st_parameter_dt *dtp, bt type,\n \t  size /= 2;\n \t}\n \n+#if !defined(HAVE_GFC_REAL_17) && defined(HAVE_GFC_REAL_16) \\\n+    && GFC_REAL_16_DIGITS == 106\n+      /* IBM extended format is stored as a pair of IEEE754\n+\t double values, with the more significant value first\n+\t in both big and little endian.  */\n+      if (kind == 16 && (type == BT_REAL || type == BT_COMPLEX))\n+\t{\n+\t  nelems *= 2;\n+\t  size /= 2;\n+\t}\n+#endif\n+\n       /* By now, all complex variables have been split into their\n \t constituent reals.  */\n \n@@ -1321,7 +1350,12 @@ unformatted_write (st_parameter_dt *dtp, bt type,\n \t      if ((dtp->u.p.current_unit->flags.convert\n \t\t   & ~(GFC_CONVERT_R16_IEEE | GFC_CONVERT_R16_IBM))\n \t\t  == GFC_CONVERT_SWAP)\n-\t\tbswap_array (buffer, buffer, size, nc);\n+\t\tbswap_array (buffer, buffer, size / 2, nc * 2);\n+\t    }\n+\t  else if (kind == 16 && (type == BT_REAL || type == BT_COMPLEX))\n+\t    {\n+\t      bswap_array (buffer, p, size / 2, nc * 2);\n+\t      p += size * nc;\n \t    }\n \t  else\n #endif"}]}