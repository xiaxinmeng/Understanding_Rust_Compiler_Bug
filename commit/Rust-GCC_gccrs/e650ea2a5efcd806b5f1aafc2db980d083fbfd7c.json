{"sha": "e650ea2a5efcd806b5f1aafc2db980d083fbfd7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1MGVhMmE1ZWZjZDgwNmI1ZjFhYWZjMmRiOTgwZDA4M2ZiZmQ3Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-03-21T11:43:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-03-21T11:43:45Z"}, "message": "re PR tree-optimization/80032 (C++ excessive stack usage (no stack reuse))\n\n2017-03-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/80032\n\t* gimplify.c (gimple_push_cleanup): Add force_uncond parameter,\n\tif set force the cleanup to happen unconditionally.\n\t(gimplify_target_expr): Push inserted clobbers with force_uncond\n\tto avoid them being removed by control-dependent DCE.\n\n\t* g++.dg/opt/pr80032.C: New testcase.\n\nFrom-SVN: r246314", "tree": {"sha": "b7ff424f8729b56a0c9c67b0f850a1672a1c2b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7ff424f8729b56a0c9c67b0f850a1672a1c2b49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da2ce5f993367610a67df1367665dda8a0abc354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2ce5f993367610a67df1367665dda8a0abc354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2ce5f993367610a67df1367665dda8a0abc354"}], "stats": {"total": 148, "additions": 140, "deletions": 8}, "files": [{"sha": "d679a5c014e2672b0bcc741359de958b26bb92cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e650ea2a5efcd806b5f1aafc2db980d083fbfd7c", "patch": "@@ -1,3 +1,11 @@\n+2017-03-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80032\n+\t* gimplify.c (gimple_push_cleanup): Add force_uncond parameter,\n+\tif set force the cleanup to happen unconditionally.\n+\t(gimplify_target_expr): Push inserted clobbers with force_uncond\n+\tto avoid them being removed by control-dependent DCE.\n+\n 2017-03-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80122"}, {"sha": "06f984cec01eebd8c469baf593ad91df03ee8dc2", "filename": "gcc/gimplify.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e650ea2a5efcd806b5f1aafc2db980d083fbfd7c", "patch": "@@ -6288,10 +6288,13 @@ gimplify_cleanup_point_expr (tree *expr_p, gimple_seq *pre_p)\n \n /* Insert a cleanup marker for gimplify_cleanup_point_expr.  CLEANUP\n    is the cleanup action required.  EH_ONLY is true if the cleanup should\n-   only be executed if an exception is thrown, not on normal exit.  */\n+   only be executed if an exception is thrown, not on normal exit.\n+   If FORCE_UNCOND is true perform the cleanup unconditionally;  this is\n+   only valid for clobbers.  */\n \n static void\n-gimple_push_cleanup (tree var, tree cleanup, bool eh_only, gimple_seq *pre_p)\n+gimple_push_cleanup (tree var, tree cleanup, bool eh_only, gimple_seq *pre_p,\n+\t\t     bool force_uncond = false)\n {\n   gimple *wce;\n   gimple_seq cleanup_stmts = NULL;\n@@ -6301,7 +6304,7 @@ gimple_push_cleanup (tree var, tree cleanup, bool eh_only, gimple_seq *pre_p)\n   if (seen_error ())\n     return;\n \n-  if (gimple_conditional_context ())\n+  if (gimple_conditional_context () && ! force_uncond)\n     {\n       /* If we're in a conditional context, this is more complex.  We only\n \t want to run the cleanup if we actually ran the initialization that\n@@ -6426,11 +6429,7 @@ gimplify_target_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t\t\t\t\t\tNULL);\n \t      TREE_THIS_VOLATILE (clobber) = true;\n \t      clobber = build2 (MODIFY_EXPR, TREE_TYPE (temp), temp, clobber);\n-\t      if (cleanup)\n-\t\tcleanup = build2 (COMPOUND_EXPR, void_type_node, cleanup,\n-\t\t\t\t  clobber);\n-\t      else\n-\t\tcleanup = clobber;\n+\t      gimple_push_cleanup (temp, clobber, false, pre_p, true);\n \t    }\n \t  if (asan_poisoned_variables && dbg_cnt (asan_use_after_scope))\n \t    {"}, {"sha": "08fcb72ca55a488d13b590a09ee1beb826f12837", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e650ea2a5efcd806b5f1aafc2db980d083fbfd7c", "patch": "@@ -1,3 +1,8 @@\n+2017-03-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80032\n+\t* g++.dg/opt/pr80032.C: New testcase.\n+\n 2017-03-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80122"}, {"sha": "9cdad6838a171729dcd71ed8d594ed0afee9eef9", "filename": "gcc/testsuite/g++.dg/opt/pr80032.C", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr80032.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e650ea2a5efcd806b5f1aafc2db980d083fbfd7c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr80032.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr80032.C?ref=e650ea2a5efcd806b5f1aafc2db980d083fbfd7c", "patch": "@@ -0,0 +1,120 @@\n+// PR tree-optimization/80032\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O2\" }\n+// If DCE removes too many CLOBBERs then stack usage goes through the\n+// roof as stack slots can no longer be shared.\n+// { dg-additional-options \"-Wstack-usage=200\" { target x86_64-*-* i?86-*-* } }\n+\n+typedef unsigned a;\n+namespace test {\n+    enum b { c };\n+    class ADataContainer;\n+    class BitMask;\n+    namespace api {\n+\tenum DataStore { candidate };\n+    }\n+    using d = api::DataStore;\n+    namespace db {\n+\tclass e;\n+\tclass f;\n+\tclass g;\n+\tclass ManagedObjectConst {\n+\tpublic:\n+\t    ManagedObjectConst(const ManagedObjectConst &);\n+\t    bool isFieldDefault(a, d) const;\n+\t    ADataContainer &getFieldDefault(a, d) const;\n+\t    g *h;\n+\t    e *i;\n+\t    f *j;\n+\t};\n+\tstruct FieldInfo {\n+\t    FieldInfo(ManagedObjectConst, a, d);\n+\t    ManagedObjectConst k;\n+\t};\n+\tb compare(const FieldInfo &, const ADataContainer &);\n+\tclass ManagedObject : public ManagedObjectConst {};\n+    }\n+    using namespace db;\n+    void FN(ManagedObject &k, const BitMask &) {\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+\tif (!k.isFieldDefault(8, d::candidate) &&\n+\t    !compare(FieldInfo(k, 11, d::candidate),\n+\t\t     k.getFieldDefault(11, d::candidate)) == c)\n+\t  return;\n+    }\n+}"}]}