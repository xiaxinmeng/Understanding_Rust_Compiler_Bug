{"sha": "d3585f5d0df47ffa453f5fe436fdf588301e5314", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM1ODVmNWQwZGY0N2ZmYTQ1M2Y1ZmU0MzZmZGY1ODgzMDFlNTMxNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-23T09:06:59Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-23T09:06:59Z"}, "message": "c++: Add missing verify_type_context call [PR97904]\n\nWhen adding the verify_type_context target hook, I'd missed\na site that needs to check an array element type.\n\ngcc/cp/\n\tPR c++/97904\n\t* pt.c (tsubst): Use verify_type_context to check the type\n\tof an array element.\n\ngcc/testsuite/\n\tPR c++/97904\n\t* g++.dg/ext/sve-sizeless-1.C: Add more template tests.\n\t* g++.dg/ext/sve-sizeless-2.C: Likewise.", "tree": {"sha": "682d19f61a9e2af42c63af4ce0b349b86061e5fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/682d19f61a9e2af42c63af4ce0b349b86061e5fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3585f5d0df47ffa453f5fe436fdf588301e5314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3585f5d0df47ffa453f5fe436fdf588301e5314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3585f5d0df47ffa453f5fe436fdf588301e5314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3585f5d0df47ffa453f5fe436fdf588301e5314/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a5e1b2bcff890bcdf8568a2cbbe24eedb28ab4"}], "stats": {"total": 70, "additions": 66, "deletions": 4}, "files": [{"sha": "fdd7f2d457bc3eaf80975caf059de27baeae7aca", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3585f5d0df47ffa453f5fe436fdf588301e5314/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3585f5d0df47ffa453f5fe436fdf588301e5314/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d3585f5d0df47ffa453f5fe436fdf588301e5314", "patch": "@@ -15868,6 +15868,10 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t    return error_mark_node;\n \t  }\n \n+\tif (!verify_type_context (input_location, TCTX_ARRAY_ELEMENT, type,\n+\t\t\t\t  !(complain & tf_error)))\n+\t  return error_mark_node;\n+\n \tr = build_cplus_array_type (type, domain);\n \n \tif (!valid_array_size_p (input_location, r, in_decl,"}, {"sha": "9f05ca5a855a894956595360da53f971c8eae0f4", "filename": "gcc/testsuite/g++.dg/ext/sve-sizeless-1.C", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3585f5d0df47ffa453f5fe436fdf588301e5314/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsve-sizeless-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3585f5d0df47ffa453f5fe436fdf588301e5314/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsve-sizeless-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsve-sizeless-1.C?ref=d3585f5d0df47ffa453f5fe436fdf588301e5314", "patch": "@@ -72,10 +72,37 @@ template class templated_struct4<svint8_t>;\n template<typename T> struct templated_struct5 : T {}; // { dg-error {base type '[^']*' fails to be a struct or class type} }\n template class templated_struct5<svint8_t>;\n \n+template<typename T, unsigned N> struct templated_struct6 { T x[N]; }; // { dg-error {array elements cannot have SVE type '(__SVInt8_t|svint8_t)'} }\n+template class templated_struct6<svint8_t, 2>;\n+\n+template<typename T>\n+struct templated_struct7 {\n+  static const int size = sizeof (T); // { dg-error {SVE type '(__SVInt8_t|svint8_t)' does not have a fixed size} }\n+#if __cplusplus >= 201103L\n+  static const int align = alignof (T); // { dg-error {SVE type '(__SVInt8_t|svint8_t)' does not have a defined alignment} \"\" { target c++11 } }\n+#endif\n+\n+  void f1 (T (&)[2]); // { dg-error {array elements cannot have SVE type '(__SVInt8_t|svint8_t)'} }\n+#if __cplusplus >= 201103L\n+  auto f2 () -> decltype (new T); // { dg-error {cannot allocate objects with SVE type '(__SVInt8_t|svint8_t)'} \"\" { target c++11 } }\n+  auto f3 (T *a) -> decltype (delete a); // { dg-error {cannot delete objects with SVE type '(__SVInt8_t|svint8_t)'} \"\" { target c++11 } }\n+#else\n+  void f2 () throw (T); // { dg-error {cannot throw or catch SVE type '(__SVInt8_t|svint8_t)'} \"\" { target c++98_only } }\n+#endif\n+};\n+template class templated_struct7<svint8_t>;\n+\n+template<typename T> struct templated_struct8 { typedef int type; };\n+\n+template<typename T>\n+void sfinae_f1 (typename templated_struct8<T[2]>::type);\n+template<typename T>\n+void sfinae_f1 (T &);\n+\n #if __cplusplus >= 201103L\n template<int N> using typedef_sizeless1 = svint8_t;\n template<int N> using typedef_sizeless1 = svint8_t;\n-template<typename T> using array = T[2];\n+template<typename T> using array = T[2]; // { dg-error {array elements cannot have SVE type '(svint8_t|__SVInt8_t)'} \"\" { target c++11 } }\n #endif\n \n // Pointers to sizeless types.\n@@ -119,7 +146,7 @@ statements (int n)\n   __alignof (ext_produce_sve_sc ()); // { dg-error {SVE type 'svint8_t' does not have a defined alignment} }\n \n #if __cplusplus >= 201103L\n-  array<svint8_t> foo = {}; // { dg-error {array elements cannot have SVE type '(svint8_t|__SVInt8_t)'} \"\" { target c++11 } }\n+  array<svint8_t> foo = {}; // { dg-message {required from here} \"\" { target c++11 } }\n #endif\n \n   // Initialization.\n@@ -298,6 +325,8 @@ statements (int n)\n   thrower2 ();\n #endif\n \n+  sfinae_f1<svint8_t> (sve_sc1);\n+\n   // Use in traits.  Doesn't use static_assert so that tests work with\n   // earlier -std=s.\n "}, {"sha": "0b86d9e82176ecd10f88ff7e1f86804dfe7b7d7d", "filename": "gcc/testsuite/g++.dg/ext/sve-sizeless-2.C", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3585f5d0df47ffa453f5fe436fdf588301e5314/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsve-sizeless-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3585f5d0df47ffa453f5fe436fdf588301e5314/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsve-sizeless-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fsve-sizeless-2.C?ref=d3585f5d0df47ffa453f5fe436fdf588301e5314", "patch": "@@ -72,10 +72,37 @@ template class templated_struct4<svint8_t>;\n template<typename T> struct templated_struct5 : T {}; // { dg-error {base type '[^']*' fails to be a struct or class type} }\n template class templated_struct5<svint8_t>;\n \n+template<typename T, unsigned N> struct templated_struct6 { T x[N]; }; // { dg-error {array elements cannot have SVE type '(__SVInt8_t|svint8_t)'} }\n+template class templated_struct6<svint8_t, 2>;\n+\n+template<typename T>\n+struct templated_struct7 {\n+  static const int size = sizeof (T); // { dg-error {SVE type '(__SVInt8_t|svint8_t)' does not have a fixed size} }\n+#if __cplusplus >= 201103L\n+  static const int align = alignof (T); // { dg-error {SVE type '(__SVInt8_t|svint8_t)' does not have a defined alignment} \"\" { target c++11 } }\n+#endif\n+\n+  void f1 (T (&)[2]); // { dg-error {array elements cannot have SVE type '(__SVInt8_t|svint8_t)'} }\n+#if __cplusplus >= 201103L\n+  auto f2 () -> decltype (new T); // { dg-error {cannot allocate objects with SVE type '(__SVInt8_t|svint8_t)'} \"\" { target c++11 } }\n+  auto f3 (T *a) -> decltype (delete a); // { dg-error {cannot delete objects with SVE type '(__SVInt8_t|svint8_t)'} \"\" { target c++11 } }\n+#else\n+  void f2 () throw (T); // { dg-error {cannot throw or catch SVE type '(__SVInt8_t|svint8_t)'} \"\" { target c++98_only } }\n+#endif\n+};\n+template class templated_struct7<svint8_t>;\n+\n+template<typename T> struct templated_struct8 { typedef int type; };\n+\n+template<typename T>\n+void sfinae_f1 (typename templated_struct8<T[2]>::type);\n+template<typename T>\n+void sfinae_f1 (T &);\n+\n #if __cplusplus >= 201103L\n template<int N> using typedef_sizeless1 = svint8_t;\n template<int N> using typedef_sizeless1 = svint8_t;\n-template<typename T> using array = T[2];\n+template<typename T> using array = T[2]; // { dg-error {array elements cannot have SVE type '(svint8_t|__SVInt8_t)'} \"\" { target c++11 } }\n #endif\n \n // Pointers to sizeless types.\n@@ -119,7 +146,7 @@ statements (int n)\n   __alignof (ext_produce_sve_sc ()); // { dg-error {SVE type 'svint8_t' does not have a defined alignment} }\n \n #if __cplusplus >= 201103L\n-  array<svint8_t> foo = {}; // { dg-error {array elements cannot have SVE type '(svint8_t|__SVInt8_t)'} \"\" { target c++11 } }\n+  array<svint8_t> foo = {}; // { dg-message {required from here} \"\" { target c++11 } }\n #endif\n \n   // Initialization.\n@@ -298,6 +325,8 @@ statements (int n)\n   thrower2 ();\n #endif\n \n+  sfinae_f1<svint8_t> (sve_sc1);\n+\n   // Use in traits.  Doesn't use static_assert so that tests work with\n   // earlier -std=s.\n "}]}