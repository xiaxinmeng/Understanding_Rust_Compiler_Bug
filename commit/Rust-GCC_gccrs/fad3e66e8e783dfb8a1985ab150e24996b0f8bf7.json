{"sha": "fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFkM2U2NmU4ZTc4M2RmYjhhMTk4NWFiMTUwZTI0OTk2YjBmOGJmNw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-12-05T04:01:46Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-12-05T04:01:46Z"}, "message": "complex.cc (pow): Remove definitions for explicit specializations.\n\n\t* src/complex.cc (pow): Remove definitions for explicit\n\tspecializations.\n\t* libmath/mathconf.h: Remove declarations for c_log, c_logf,\n\tc_logl.\n\t* libmath/complex-stub.h: Remove declarations for cpow, cpowf,\n\tcpowl.\n\t* libmath/cpow.c: Remove.\n\t* libmath/cpowf.c: Remove.\n\t* libmath/cpowl.c: Remove.\n\t* libmath/Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove c_logl,\n\tcpowl,\n\t(EXTRA_DIST): Remove c_log, c_logf, carg, cargf.\n\t* libmath/Makefile.in: Regenarate.\n\t* libmath/c_log.c: Remove\n\t* libmath/c_logf.c: Likewise.\n\t* libmath/c_logl.c: Likewise.\n\t* libmath/carg.c: Likewise.\n\t* libmath/cargf.c: Likewise.\n\t* libmath/cargl.c: Likewise.\n\t* include/bits/std_complex.h (pow): Define primary templates.\n\t(complex<>): Remove friend declarations for pow<>().\n\t* acinclude.m4: Remove check for c_log, c_logf, c_logl, carg,\n\tcargf.\n\t* aclocal.m4: Regenarate.\n\t* configure: Regenarate.\n\nFrom-SVN: r38025", "tree": {"sha": "03b6674b6d9557a4808e01491e4a7256cc0eaaba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b6674b6d9557a4808e01491e4a7256cc0eaaba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/comments", "author": null, "committer": null, "parents": [{"sha": "9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6"}], "stats": {"total": 577, "additions": 72, "deletions": 505}, "files": [{"sha": "ce3fb4a4691dca6c611ddac94fc54e0d8c3fdd83", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "patch": "@@ -1,3 +1,31 @@\n+2000-12-05  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* src/complex.cc (pow): Remove definitions for explicit\n+\tspecializations. \n+\t* libmath/mathconf.h: Remove declarations for c_log, c_logf,\n+\tc_logl. \n+\t* libmath/complex-stub.h: Remove declarations for cpow, cpowf,\n+\tcpowl. \n+\t* libmath/cpow.c: Remove.\n+\t* libmath/cpowf.c: Remove.\n+\t* libmath/cpowl.c: Remove.\n+\t* libmath/Makefile.am (EXTRA_LONG_DOUBLE_yes): Remove c_logl,\n+\tcpowl, \n+\t(EXTRA_DIST): Remove c_log, c_logf, carg, cargf.\n+\t* libmath/Makefile.in: Regenarate.\n+\t* libmath/c_log.c: Remove\n+\t* libmath/c_logf.c: Likewise.\n+\t* libmath/c_logl.c: Likewise.\n+\t* libmath/carg.c: Likewise.\n+\t* libmath/cargf.c: Likewise.\n+\t* libmath/cargl.c: Likewise.\n+\t* include/bits/std_complex.h (pow): Define primary templates.\n+\t(complex<>): Remove friend declarations for pow<>().\n+\t* acinclude.m4: Remove check for c_log, c_logf, c_logl, carg,\n+\tcargf.\n+\t* aclocal.m4: Regenarate.\n+\t* configure: Regenarate.\n+\n 2000-12-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* docs/configopts.html, docs/documentation.html,"}, {"sha": "24fa70ec0ad81e709cb54e2f42935c2a6af1ee25", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "patch": "@@ -743,8 +743,8 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   AC_CHECK_HEADERS([complex.h])\n   AC_CHECK_LIB(m, main)\n   AC_REPLACE_MATHFUNCS(ccos ccosf ccosh ccoshf cexp cexpf \\\n-  c_log c_logf clog10 clog10f cpow cpowf csin csinf csinh csinhf csqrt \\\n-  csqrtf ctan ctanf ctanh ctanhf carg cargf nan hypot hypotf atan2f expf \\\n+  csin csinf csinh csinhf csqrt \\\n+  csqrtf ctan ctanf ctanh ctanhf nan hypot hypotf atan2f expf \\\n   copysignf)\n \n   dnl Compile the long double complex functions only if the function \n@@ -756,7 +756,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n      && test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n     AC_REPLACE_MATHFUNCS(ccoshl ccosl cexpl cpowl csinhl csinl \\\n-    csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l)\n+    csqrtl ctanhl ctanl hypotl signbitl clog10l)\n   fi\n \n   AC_SUBST(USE_COMPLEX_LONG_DOUBLE)"}, {"sha": "78a933afdca6741feefa49b759e5ea9481a781d8", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "patch": "@@ -755,8 +755,8 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n   AC_CHECK_HEADERS([complex.h])\n   AC_CHECK_LIB(m, main)\n   AC_REPLACE_MATHFUNCS(ccos ccosf ccosh ccoshf cexp cexpf \\\n-  c_log c_logf clog10 clog10f cpow cpowf csin csinf csinh csinhf csqrt \\\n-  csqrtf ctan ctanf ctanh ctanhf carg cargf nan hypot hypotf atan2f expf \\\n+  csin csinf csinh csinhf csqrt \\\n+  csqrtf ctan ctanf ctanh ctanhf nan hypot hypotf atan2f expf \\\n   copysignf)\n \n   dnl Compile the long double complex functions only if the function \n@@ -768,7 +768,7 @@ AC_DEFUN(GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT, [\n      && test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n     AC_REPLACE_MATHFUNCS(ccoshl ccosl cexpl cpowl csinhl csinl \\\n-    csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l)\n+    csqrtl ctanhl ctanl hypotl signbitl clog10l)\n   fi\n \n   AC_SUBST(USE_COMPLEX_LONG_DOUBLE)"}, {"sha": "bb40e4690b7d4a461eb65d640737b8f9c0747d6b", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "patch": "@@ -17075,8 +17075,8 @@ else\n fi\n \n   for ac_func in ccos ccosf ccosh ccoshf cexp cexpf \\\n-  c_log c_logf clog10 clog10f cpow cpowf csin csinf csinh csinhf csqrt \\\n-  csqrtf ctan ctanf ctanh ctanhf carg cargf nan hypot hypotf atan2f expf \\\n+  csin csinf csinh csinhf csqrt \\\n+  csqrtf ctan ctanf ctanh ctanhf nan hypot hypotf atan2f expf \\\n   copysignf\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n@@ -17140,7 +17140,7 @@ done\n      && test x$ac_cv_func_copysignl = x\"yes\"; then\n     USE_COMPLEX_LONG_DOUBLE=yes\n     for ac_func in ccoshl ccosl cexpl cpowl csinhl csinl \\\n-    csqrtl ctanhl ctanl cargl hypotl signbitl c_logl clog10l\n+    csqrtl ctanhl ctanl hypotl signbitl clog10l\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n echo \"configure:17147: checking for $ac_func\" >&5"}, {"sha": "849e7eb413c15da0b3f3e7b5d13479b00d148dbe", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "patch": "@@ -450,6 +450,34 @@ namespace std\n       return complex<_Tp>(sinh(__x) * cos(__y), cosh(__x) * sin(__y));\n     }\n \n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    pow(const complex<_Tp>& __z, int __n)\n+    {\n+      return __pow_helper(__z, __n);\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    pow(const complex<_Tp>& __x, const _Tp& __y)\n+    {\n+      return exp(__y * log(__x));\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    pow(const complex<_Tp>& __x, const complex<_Tp>& __y)\n+    {\n+      return exp(__x * log(__x));\n+    }\n+\n+  template<typename _Tp>\n+    inline complex<_Tp>\n+    pow(const _Tp& __x, const complex<_Tp>& __y)\n+    {\n+      return exp(__y * log(__x));\n+    }\n+\n   // 26.2.3  complex specializations\n   // complex<float> specialization\n   template<> class complex<float>\n@@ -496,11 +524,6 @@ namespace std\n     friend class complex<double>;\n     friend class complex<long double>;\n \n-    friend complex<float> pow<>(const complex<float>&, int);\n-    friend complex<float> pow<>(const complex<float>&, const float&);\n-    friend complex<float> pow<>(const complex<float>&,\n-\t\t\t\tconst complex<float>&);\n-    friend complex<float> pow<>(const float&, const complex<float>&);\n     friend complex<float> sqrt<>(const complex<float>&);\n     friend complex<float> tan<>(const complex<float>&);\n     friend complex<float> tanh<>(const complex<float>&);\n@@ -651,11 +674,6 @@ namespace std\n     friend class complex<float>;\n     friend class complex<long double>;\n \n-    friend complex<double> pow<>(const complex<double>&, int);\n-    friend complex<double> pow<>(const complex<double>&, const double&);\n-    friend complex<double> pow<>(const complex<double>&,\n-\t\t\t\t const complex<double>&);\n-    friend complex<double> pow<>(const double&, const complex<double>&);\n     friend complex<double> sqrt<>(const complex<double>&);\n     friend complex<double> tan<>(const complex<double>&);\n     friend complex<double> tanh<>(const complex<double>&);\n@@ -806,13 +824,6 @@ namespace std\n     friend class complex<float>;\n     friend class complex<double>;\n \n-    friend complex<long double> pow<>(const complex<long double>&, int);\n-    friend complex<long double> pow<>(const complex<long double>&,\n-\t\t\t\t      const long double&);\n-    friend complex<long double> pow<>(const complex<long double>&,\n-\t\t\t\t      const complex<long double>&);\n-    friend complex<long double> pow<>(const long double&,\n-\t\t\t\t      const complex<long double>&);\n     friend complex<long double> sqrt<>(const complex<long double>&);\n     friend complex<long double> tan<>(const complex<long double>&);\n     friend complex<long double> tanh<>(const complex<long double>&);\n@@ -951,8 +962,3 @@ namespace std\n } // namespace std\n \n #endif\t/* _CPP_COMPLEX */\n-\n-\n-\n-\n-"}, {"sha": "cf2251dd43fb8e78f9a4f45d330507792b01810a", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "patch": "@@ -26,16 +26,16 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n noinst_LTLIBRARIES = libmath.la\n \n EXTRA_LONG_DOUBLE_yes = \\\n-\tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \\\n-\tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \\\n+\tccosl.c cexpl.c clog10l.c csinhl.c \\\n+\tcsqrtl.c ctanhl.c ctanl.c hypotl.c \\\n \tsignbitl.c\n \n EXTRA_DIST = \\\n \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \\\n-\tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \\\n-\tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \\\n+\tcexp.c cexpf.c clog10.c clog10f.c \\\n+\tcsin.c csinf.c csinh.c csinhf.c \\\n \tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \\\n-\tctanhf.c  carg.c cargf.c hypot.c hypotf.c\\\n+\tctanhf.c hypot.c hypotf.c\\\n \tatan2f.c expf.c \\\n \t$(EXTRA_LONG_DOUBLE_yes) \n \n@@ -63,11 +63,3 @@ INCLUDES = \\\n \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n \t$(TOPLEVEL_INCLUDES) \n \n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "9525f29fd5ed421910b8c2800b62b63f90304814", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "patch": "@@ -113,10 +113,10 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes =  \tccosl.c cexpl.c c_logl.c clog10l.c cpowl.c csinhl.c \tcsqrtl.c ctanhl.c ctanl.c cargl.c hypotl.c \tsignbitl.c\n+EXTRA_LONG_DOUBLE_yes =  \tccosl.c cexpl.c clog10l.c csinhl.c \tcsqrtl.c ctanhl.c ctanl.c hypotl.c \tsignbitl.c\n \n \n-EXTRA_DIST =  \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \tcexp.c cexpf.c c_log.c c_logf.c  clog10.c clog10f.c \tcpow.c cpowf.c csin.c csinf.c csinh.c csinhf.c \tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \tctanhf.c  carg.c cargf.c hypot.c hypotf.c \tatan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST =  \tccos.c ccosf.c ccosh.c ccoshf.c ccoshl.c \tcexp.c cexpf.c clog10.c clog10f.c \tcsin.c csinf.c csinh.c csinhf.c \tcsinl.c csqrt.c csqrtf.c  ctan.c ctanf.c ctanh.c \tctanhf.c hypot.c hypotf.c \tatan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n \n \n libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) "}, {"sha": "c3b8c558858275bfaaea33a3532926d42d39dc05", "filename": "libstdc++-v3/libmath/c_log.c", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fc_log.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fc_log.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fc_log.c?ref=9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "patch": "@@ -1,63 +0,0 @@\n-/* Compute complex natural logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-__complex__ double\n-c_log (__complex__ double x)\n-{\n-  __complex__ double result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PI : 0.0;\n-      __imag__ result = copysign (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabs (__real__ x);\n-    }\n-  else if (__real__ x == __real__ x && __imag__ x == __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = log (hypot (__real__ x, __imag__ x));\n-      __imag__ result = atan2 (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITE_P (__real__ x) || INFINITE_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VAL;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "aff2111391cdd8fecec14728133a0553093b60d4", "filename": "libstdc++-v3/libmath/c_logf.c", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fc_logf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fc_logf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fc_logf.c?ref=9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "patch": "@@ -1,64 +0,0 @@\n-/* Compute complex natural logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-c_logf (__complex__ float x)\n-{\n-  __complex__ float result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PI : 0.0;\n-      __imag__ result = copysignf (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabsf (__real__ x);\n-    }\n-  else if (__real__ x == __real__ x && __imag__ x == __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = logf (hypotf (__real__ x, __imag__ x));\n-      __imag__ result = atan2f (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITEF_P (__real__ x) || INFINITEF_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VALF;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "d4075f75992b9a43199521c097aaf3edcb4e360c", "filename": "libstdc++-v3/libmath/c_logl.c", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fc_logl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fc_logl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fc_logl.c?ref=9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "patch": "@@ -1,75 +0,0 @@\n-/* Compute complex natural logarithm. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#ifndef _GNU_SOURCE\n-#define _GNU_SOURCE\n-#endif\n-#include <math.h>\n-#include \"mathconf.h\"\n-#ifndef M_PIl\n-#define M_PIl M_PI\n-#endif\n-\n-/* Thanks to SGI we have to trick here.  At least Irix 6.2 provides hypotl,\n-   but it has a wrong prototype.  Grrr.  */\n-extern long double local_hypotl (long double, long double) asm (\"hypotl\");\n-\n-\n-__complex__ long double\n-c_logl (__complex__ long double x)\n-{\n-  __complex__ long double result;\n-\n-  if (x == 0.0)\n-    {\n-      /* Real and imaginary part are 0.0.  */\n-      __imag__ result = signbit (__real__ x) ? M_PIl : 0.0;\n-      __imag__ result = copysignl (__imag__ result, __imag__ x);\n-      /* Yes, the following line raises an exception.  */\n-      __real__ result = -1.0 / fabsl (__real__ x);\n-    }\n-  else if (__real__ x == __real__ x && __imag__ x == __imag__ x)\n-    {\n-      /* Neither real nor imaginary part is NaN.  */\n-      __real__ result = logl (local_hypotl (__real__ x, __imag__ x));\n-      __imag__ result = atan2l (__imag__ x, __real__ x);\n-    }\n-  else\n-    {\n-      __imag__ result = NAN;\n-      if (INFINITEL_P (__real__ x) || INFINITEL_P (__imag__ x))\n-\t/* Real or imaginary part is infinite.  */\n-\t__real__ result = HUGE_VALL;\n-      else\n-\t__real__ result = NAN;\n-    }\n-\n-  return result;\n-}"}, {"sha": "dff4a197836fc36a6b73f62e9518e7770e287cd0", "filename": "libstdc++-v3/libmath/carg.c", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcarg.c?ref=9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "patch": "@@ -1,37 +0,0 @@\n-/* Compute argument of complex double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-double\n-carg (__complex__ double x)\n-{\n-  return atan2 (__imag__ x, __real__ x);\n-}"}, {"sha": "90a2f417cccbc0513f0cb00de59f70e7186446d2", "filename": "libstdc++-v3/libmath/cargf.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcargf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcargf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcargf.c?ref=9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "patch": "@@ -1,38 +0,0 @@\n-/* Compute argument of complex float value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-float\n-cargf (__complex__ float x)\n-{\n-  return atan2f (__imag__ x, __real__ x);\n-}"}, {"sha": "ede84a1c854b0d0b5492da47691d9824d386f756", "filename": "libstdc++-v3/libmath/cargl.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcargl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcargl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcargl.c?ref=9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "patch": "@@ -1,38 +0,0 @@\n-/* Compute argument of complex long double value. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-long double\n-cargl (__complex__ long double x)\n-{\n-  return atan2l (__imag__ x, __real__ x);\n-}"}, {"sha": "ddfbce1aff514e23f9a9306a806d77c077e70e0c", "filename": "libstdc++-v3/libmath/complex-stub.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcomplex-stub.h?ref=fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "patch": "@@ -50,10 +50,6 @@ __complex__ double clog10 (__complex__ double x);\n __complex__ float clog10f (__complex__ float x);\n __complex__ long double clog10l (__complex__ long double x);\n \n-__complex__ double cpow (__complex__ double x, __complex__ double c);\n-__complex__ float cpowf (__complex__ float x, __complex__ float c);\n-__complex__ long double cpowl (__complex__ long double x, __complex__ long double c);\n-\n __complex__ double csin (__complex__ double x);\n __complex__ float csinf (__complex__ float x);\n __complex__ long double csinl (__complex__ long double x);"}, {"sha": "5d816a1d0d64f15f548cc836070c06136977b27a", "filename": "libstdc++-v3/libmath/cpow.c", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcpow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcpow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcpow.c?ref=9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "patch": "@@ -1,39 +0,0 @@\n-/* Complex power of double values. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ double\n-cpow (__complex__ double x, __complex__ double c)\n-{\n-  return cexp (c * c_log (x));\n-}"}, {"sha": "d4aa5904f86faa85084d31006d13731a0f14cee7", "filename": "libstdc++-v3/libmath/cpowf.c", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcpowf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcpowf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcpowf.c?ref=9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "patch": "@@ -1,38 +0,0 @@\n-/* Complex power of float values. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-\n-__complex__ float\n-cpowf (__complex__ float x, __complex__ float c)\n-{\n-  return cexpf (c * c_logf (x));\n-}"}, {"sha": "65856d48ec4b105ef5aa84888f375444900feead", "filename": "libstdc++-v3/libmath/cpowl.c", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcpowl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6/libstdc%2B%2B-v3%2Flibmath%2Fcpowl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fcpowl.c?ref=9d86bffccb9b643d2e8b88399ee0a28d67bfb4b6", "patch": "@@ -1,40 +0,0 @@\n-/* Complex power of long double values. */\n-\n-/* Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU ISO C++ Library.  This library is free\n-   software; you can redistribute it and/or modify it under the\n-   terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 2, or (at your option)\n-   any later version.\n-\n-   This library is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License along\n-   with this library; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-   USA.\n-\n-   As a special exception, you may use this file as part of a free software\n-   library without restriction.  Specifically, if other files instantiate\n-   templates or use macros or inline functions from this file, or you compile\n-   this file and link it with other files to produce an executable, this\n-   file does not by itself cause the resulting executable to be covered by\n-   the GNU General Public License.  This exception does not however\n-   invalidate any other reasons why the executable file might be covered by\n-   the GNU General Public License.  */\n-\n-#include <math.h>\n-#include \"mathconf.h\"\n-\n-__complex__ long double\n-cpowl (__complex__ long double x, __complex__ long double c)\n-{\n-  return cexpl (c * c_logl (x));\n-}\n-\n-\n-"}, {"sha": "1d97f0924cf059746537775bdda43d146d94799d", "filename": "libstdc++-v3/libmath/mathconf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2Fmathconf.h?ref=fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "patch": "@@ -232,9 +232,6 @@ extern \"C\" {\n #else\n # include \"complex-stub.h\"\n #endif\n-__complex__ double c_log (__complex__ double x);\n-__complex__ float c_logf (__complex__ float x);\n-__complex__ long double c_logl (__complex__ long double x);\n \n /* signbit is a macro in ISO C99.  */\n #ifndef signbit"}, {"sha": "6d41b19b2f0bb93f972ce6664f435a7fa289a02a", "filename": "libstdc++-v3/src/complex.cc", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad3e66e8e783dfb8a1985ab150e24996b0f8bf7/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcomplex.cc?ref=fad3e66e8e783dfb8a1985ab150e24996b0f8bf7", "patch": "@@ -44,26 +44,6 @@\n \n namespace std\n {\n-  template<>\n-  complex<FLT>\n-  pow(const complex<FLT>& __x, int __n)\n-  { return complex<FLT>(cexp(__n * c_log(__x._M_value))); }\n-\n-  template<>\n-  complex<FLT>\n-  pow(const complex<FLT>& __x, const FLT& __y)\n-  { return complex<FLT>(cexp(__y * c_log(__x._M_value))); }\n-\n-  template<>\n-  complex<FLT>\n-  pow(const complex<FLT>& __x, const complex<FLT>& __y)\n-  { return complex<FLT>(cpow(__x._M_value, __y._M_value)); }\n-\n-  template<>\n-  complex<FLT>\n-  pow(const FLT& __x, const complex<FLT>& __y)\n-  { return complex<FLT>(cexp(__y._M_value * log(__x))); }\n-\n   template<>\n   complex<FLT>\n   sqrt(const complex<FLT>& __x)"}]}