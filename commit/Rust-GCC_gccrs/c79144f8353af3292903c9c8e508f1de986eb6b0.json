{"sha": "c79144f8353af3292903c9c8e508f1de986eb6b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc5MTQ0ZjgzNTNhZjMyOTI5MDNjOWM4ZTUwOGYxZGU5ODZlYjZiMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-12-06T20:02:55Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-12-06T20:02:55Z"}, "message": "C/C++: don't suggest implementation names as spelling fixes (PR c/83236)\n\ngcc/c-family/ChangeLog:\n\tPR c/83236\n\t* c-common.c (selftest::c_family_tests): Call\n\tselftest::c_spellcheck_cc_tests.\n\t* c-common.h (selftest::c_spellcheck_cc_tests): New decl.\n\t* c-spellcheck.cc: Include \"selftest.h\".\n\t(name_reserved_for_implementation_p): New function.\n\t(should_suggest_as_macro_p): New function.\n\t(find_closest_macro_cpp_cb): Move the check for NT_MACRO to\n\tshould_suggest_as_macro_p and call it.\n\t(selftest::test_name_reserved_for_implementation_p): New function.\n\t(selftest::c_spellcheck_cc_tests): New function.\n\t* c-spellcheck.h (name_reserved_for_implementation_p): New decl.\n\ngcc/c/ChangeLog:\n\tPR c/83236\n\t* c-decl.c (lookup_name_fuzzy): Don't suggest names that are\n\treserved for use by the implementation.\n\ngcc/cp/ChangeLog:\n\tPR c/83236\n\t* name-lookup.c (consider_binding_level): Don't suggest names that\n\tare reserved for use by the implementation.\n\ngcc/testsuite/ChangeLog:\n\tPR c/83236\n\t* c-c++-common/spellcheck-reserved.c: New test case.\n\nFrom-SVN: r255453", "tree": {"sha": "7cd052f971408e0cf364391b328c2c1c9d64b38d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cd052f971408e0cf364391b328c2c1c9d64b38d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c79144f8353af3292903c9c8e508f1de986eb6b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79144f8353af3292903c9c8e508f1de986eb6b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79144f8353af3292903c9c8e508f1de986eb6b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79144f8353af3292903c9c8e508f1de986eb6b0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "613bc14fcd3f6b58289aca9a2980cacfc2e75299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613bc14fcd3f6b58289aca9a2980cacfc2e75299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/613bc14fcd3f6b58289aca9a2980cacfc2e75299"}], "stats": {"total": 194, "additions": 189, "deletions": 5}, "files": [{"sha": "a845fbf896632eaff8b5b6ff997480c0b5d40b7c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -1,3 +1,18 @@\n+2017-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/83236\n+\t* c-common.c (selftest::c_family_tests): Call\n+\tselftest::c_spellcheck_cc_tests.\n+\t* c-common.h (selftest::c_spellcheck_cc_tests): New decl.\n+\t* c-spellcheck.cc: Include \"selftest.h\".\n+\t(name_reserved_for_implementation_p): New function.\n+\t(should_suggest_as_macro_p): New function.\n+\t(find_closest_macro_cpp_cb): Move the check for NT_MACRO to\n+\tshould_suggest_as_macro_p and call it.\n+\t(selftest::test_name_reserved_for_implementation_p): New function.\n+\t(selftest::c_spellcheck_cc_tests): New function.\n+\t* c-spellcheck.h (name_reserved_for_implementation_p): New decl.\n+\n 2017-12-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-spellcheck.cc: New file, taken from macro-handling code in"}, {"sha": "6a343a31130b73f73fbf3108f1c25d21f2e217df", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -8177,6 +8177,7 @@ void\n c_family_tests (void)\n {\n   c_format_c_tests ();\n+  c_spellcheck_cc_tests ();\n }\n \n } // namespace selftest"}, {"sha": "d9bf8d0e52bc5ad14cbaf3874be736fc3390fa78", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -1450,6 +1450,7 @@ namespace selftest {\n   /* Declarations for specific families of tests within c-family,\n      by source file, in alphabetical order.  */\n   extern void c_format_c_tests (void);\n+  extern void c_spellcheck_cc_tests (void);\n \n   /* The entrypoint for running all of the above tests.  */\n   extern void c_family_tests (void);"}, {"sha": "a6b9e172045b3cbc8865d5bb1b35c158c3609195", "filename": "gcc/c-family/c-spellcheck.cc", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc-family%2Fc-spellcheck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc-family%2Fc-spellcheck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-spellcheck.cc?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -25,6 +25,37 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cpplib.h\"\n #include \"spellcheck-tree.h\"\n #include \"c-family/c-spellcheck.h\"\n+#include \"selftest.h\"\n+\n+/* Return true iff STR begin with an underscore and either an uppercase\n+   letter or another underscore, and is thus, for C and C++, reserved for\n+   use by the implementation.  */\n+\n+bool\n+name_reserved_for_implementation_p (const char *str)\n+{\n+  if (str[0] != '_')\n+    return false;\n+  return (str[1] == '_' || ISUPPER(str[1]));\n+}\n+\n+/* Return true iff HASHNODE is a macro that should be offered as a\n+   suggestion for a misspelling.  */\n+\n+static bool\n+should_suggest_as_macro_p (cpp_hashnode *hashnode)\n+{\n+  if (hashnode->type != NT_MACRO)\n+    return false;\n+\n+  /* Don't suggest names reserved for the implementation, but do suggest the builtin\n+     macros such as __FILE__, __LINE__ etc.  */\n+  if (name_reserved_for_implementation_p ((const char *)hashnode->ident.str)\n+      && !(hashnode->flags & NODE_BUILTIN))\n+    return false;\n+\n+  return true;\n+}\n \n /* A callback for cpp_forall_identifiers, for use by best_macro_match's ctor.\n    Process HASHNODE and update the best_macro_match instance pointed to be\n@@ -34,7 +65,7 @@ static int\n find_closest_macro_cpp_cb (cpp_reader *, cpp_hashnode *hashnode,\n \t\t\t   void *user_data)\n {\n-  if (hashnode->type != NT_MACRO)\n+  if (!should_suggest_as_macro_p (hashnode))\n     return 1;\n \n   best_macro_match *bmm = (best_macro_match *)user_data;\n@@ -55,3 +86,36 @@ best_macro_match::best_macro_match (tree goal,\n {\n   cpp_forall_identifiers (reader, find_closest_macro_cpp_cb, this);\n }\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Selftests.  */\n+\n+/* Verify that name_reserved_for_implementation_p is sane.  */\n+\n+static void\n+test_name_reserved_for_implementation_p ()\n+{\n+  ASSERT_FALSE (name_reserved_for_implementation_p (\"\"));\n+  ASSERT_FALSE (name_reserved_for_implementation_p (\"foo\"));\n+  ASSERT_FALSE (name_reserved_for_implementation_p (\"_\"));\n+  ASSERT_FALSE (name_reserved_for_implementation_p (\"_foo\"));\n+  ASSERT_FALSE (name_reserved_for_implementation_p (\"_42\"));\n+  ASSERT_TRUE (name_reserved_for_implementation_p (\"_Foo\"));\n+  ASSERT_TRUE (name_reserved_for_implementation_p (\"__\"));\n+  ASSERT_TRUE (name_reserved_for_implementation_p (\"__foo\"));\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+c_spellcheck_cc_tests ()\n+{\n+  test_name_reserved_for_implementation_p ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* #if CHECKING_P */"}, {"sha": "838f4f207f38451f09b2c0ba9dedab51936fb261", "filename": "gcc/c-family/c-spellcheck.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc-family%2Fc-spellcheck.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc-family%2Fc-spellcheck.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-spellcheck.h?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -22,6 +22,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"spellcheck.h\"\n \n+extern bool name_reserved_for_implementation_p (const char *str);\n+\n /* Specialization of edit_distance_traits for preprocessor macros.  */\n \n template <>"}, {"sha": "91267c023c8c1e3de35b4c7a373ff14b80b9f764", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -1,3 +1,9 @@\n+2017-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/83236\n+\t* c-decl.c (lookup_name_fuzzy): Don't suggest names that are\n+\treserved for use by the implementation.\n+\n 2017-12-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-decl.c: Include \"c-family/c-spellcheck.h\"."}, {"sha": "607c705ff843b8e0d4efc38d0068032cda03c4d6", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -4027,6 +4027,10 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t loc)\n \t\t\t\t\t\t  IDENTIFIER_POINTER (name),\n \t\t\t\t\t\t  header_hint));\n \n+  /* Only suggest names reserved for the implementation if NAME begins\n+     with an underscore.  */\n+  bool consider_implementation_names = (IDENTIFIER_POINTER (name)[0] == '_');\n+\n   best_match<tree, tree> bm (name);\n \n   /* Look within currently valid scopes.  */\n@@ -4042,6 +4046,14 @@ lookup_name_fuzzy (tree name, enum lookup_name_fuzzy_kind kind, location_t loc)\n \tif (TREE_CODE (binding->decl) == FUNCTION_DECL)\n \t  if (C_DECL_IMPLICIT (binding->decl))\n \t    continue;\n+\t/* Don't suggest names that are reserved for use by the\n+\t   implementation, unless NAME began with an underscore.  */\n+\tif (!consider_implementation_names)\n+\t  {\n+\t    const char *suggestion_str = IDENTIFIER_POINTER (binding->id);\n+\t    if (name_reserved_for_implementation_p (suggestion_str))\n+\t      continue;\n+\t  }\n \tswitch (kind)\n \t  {\n \t  case FUZZY_LOOKUP_TYPENAME:"}, {"sha": "2cfe80b4fbc4b11b295ee9d6bb9075321980fd1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -1,3 +1,9 @@\n+2017-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/83236\n+\t* name-lookup.c (consider_binding_level): Don't suggest names that\n+\tare reserved for use by the implementation.\n+\n 2017-12-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* name-lookup.c: Include \"c-family/c-spellcheck.h\"."}, {"sha": "97d0632301d210b3f877d37732cf73cfdf6832e0", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -5617,6 +5617,10 @@ consider_binding_level (tree name, best_match <tree, const char *> &bm,\n \t  bm.consider (IDENTIFIER_POINTER (best_matching_field));\n       }\n \n+  /* Only suggest names reserved for the implementation if NAME begins\n+     with an underscore.  */\n+  bool consider_implementation_names = (IDENTIFIER_POINTER (name)[0] == '_');\n+\n   for (tree t = lvl->names; t; t = TREE_CHAIN (t))\n     {\n       tree d = t;\n@@ -5637,10 +5641,23 @@ consider_binding_level (tree name, best_match <tree, const char *> &bm,\n \t  && DECL_ANTICIPATED (d))\n \tcontinue;\n \n-      if (tree name = DECL_NAME (d))\n-\t/* Ignore internal names with spaces in them.  */\n-\tif (!strchr (IDENTIFIER_POINTER (name), ' '))\n-\t  bm.consider (IDENTIFIER_POINTER (name));\n+      tree suggestion = DECL_NAME (d);\n+      if (!suggestion)\n+\tcontinue;\n+\n+      const char *suggestion_str = IDENTIFIER_POINTER (suggestion);\n+\n+      /* Ignore internal names with spaces in them.  */\n+      if (strchr (suggestion_str, ' '))\n+\tcontinue;\n+\n+      /* Don't suggest names that are reserved for use by the\n+\t implementation, unless NAME began with an underscore.  */\n+      if (name_reserved_for_implementation_p (suggestion_str)\n+\t  && !consider_implementation_names)\n+\tcontinue;\n+\n+      bm.consider (suggestion_str);\n     }\n }\n "}, {"sha": "176777e9d8326528e52c11ca4e0cbdebc06d8ae3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -1,3 +1,8 @@\n+2017-12-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/83236\n+\t* c-c++-common/spellcheck-reserved.c: New test case.\n+\n 2017-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83293"}, {"sha": "79b653241dcbba66cc5ab6369fe3603985f1b9a3", "filename": "gcc/testsuite/c-c++-common/spellcheck-reserved.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspellcheck-reserved.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c79144f8353af3292903c9c8e508f1de986eb6b0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspellcheck-reserved.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fspellcheck-reserved.c?ref=c79144f8353af3292903c9c8e508f1de986eb6b0", "patch": "@@ -0,0 +1,55 @@\n+/* Verify that we don't offer names that are reserved for the\n+   implementation (PR c/83236).  */\n+/* { dg-options \"-nostdinc\" } */\n+\n+/* Example of an identifier with a leading double-underscore.\n+   We shouldn't offer '__ino_t' as a suggestion for an unknown 'ino_t'.  */\n+\n+typedef unsigned long int __ino_t;\n+ino_t inode; /* { dg-error \"did you mean 'int'\" } */\n+\n+\n+/* Example of a typedef with a leading double-underscore.  */\n+\n+typedef unsigned char __u_char;\n+u_char ch; /* { dg-error \"did you mean 'char'\" } */\n+\n+\n+/* Example of a macro with a leading double-underscore.  */\n+\n+# define __SOME_MACRO\tint\n+\n+SOME_MACRO foo; /* { dg-bogus \"__SOME_MACRO\" } */\n+/* { dg-error \"'SOME_MACRO'\" \"\" { target *-*-* } .-1 } */\n+\n+\n+/* If the misspelled name itself matches the \"reserved\" pattern, then\n+   it's OK to suggest such names.  */\n+\n+void test (const char *buf, char ch)\n+{\n+  __builtin_strtchr (buf, ch); /* { dg-line misspelled_reserved } */\n+  /* { dg-warning \"did you mean '__builtin_strchr'\" \"\" { target c } misspelled_reserved } */\n+  /* { dg-error \"not declared\"  \"\" { target c++ } misspelled_reserved } */\n+  /* { dg-message \"'__builtin_strrchr'\"  \"\" { target c++ } misspelled_reserved } */\n+}\n+\n+/* Similarly for a name that begins with a single underscore.  */\n+\n+void test_2 (const char *buf, char ch)\n+{\n+  _builtin_strchr (buf, ch); /* { dg-line misspelled_one_underscore } */\n+  /* { dg-warning \"did you mean '__builtin_strchr'\" \"\" { target c } misspelled_one_underscore } */\n+  /* { dg-error \"not declared\"  \"\" { target c++ } misspelled_one_underscore } */\n+  /* { dg-message \"'__builtin_strchr'\"  \"\" { target c++ } misspelled_one_underscore } */\n+}\n+\n+/* Verify that we can correct \"__FILE_\" to \"__FILE__\".  */\n+\n+const char * test_3 (void)\n+{\n+  return __FILE_; /* { dg-line misspelled__FILE_ } */\n+  /* { dg-error \"did you mean '__FILE__'\" \"\" { target c } misspelled__FILE_ } */\n+  /* { dg-error \"not declared\"  \"\" { target c++ } misspelled__FILE_ } */\n+  /* { dg-message \"'__FILE__'\"  \"\" { target c++ } misspelled__FILE_ } */\n+}"}]}