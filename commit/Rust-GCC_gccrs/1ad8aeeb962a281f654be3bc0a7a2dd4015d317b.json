{"sha": "1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFkOGFlZWI5NjJhMjgxZjY1NGJlM2JjMGE3YTJkZDQwMTVkMzE3Yg==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2007-11-06T14:37:56Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2007-11-06T14:37:56Z"}, "message": "re PR c++/31439 (ICE with variadic template and broken specialization)\n\n2007-11-06  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/31439\n\tPR c++/32114\n\tPR c++/32115\n\tPR c++/32125\n\tPR c++/32126\n\tPR c++/32127\n\tPR c++/32128\n\tPR c++/32253\n\tPR c++/32566\n\t* typeck.c (check_return_expr): Pass address of retval to\n\tcheck_for_bare_parameter_packs.\n\t* class.c (build_base_field): Tolerate bases that have no layout\n\tdue to errors.\n\t(end_of_base): Ditto.\n\t* tree.c (canonical_type_variant): Be careful with\n\tERROR_MARK_NODE.\n\t* cp-tree.h (check_for_bare_parameter_packs): Now accepts a\n\ttree*.\n\t* pt.c (find_parameter_pack_data): Add set_packs_to_error field,\n\twhich states whether parameter packs should be replaced with\n\tERROR_MARK_NODE.\n\t(find_parameter_packs_r): Pass addresses to cp_walk_tree wherever\n\tpossible. If set_packs_to_error is set true, replace the parameter\n\tpack with ERROR_MARK_NODE. Manage our own pointer sets.\n\t(uses_parameter_packs): Don't set parameter packs to\n\tERROR_MARK_NODE.\n\t(check_for_bare_parameter_packs): Now takes a pointer to a tree,\n\twhich may be modified (if it is a parameter pack). Instructs\n\tfind_parameter_packs_r to replace parameter packs with\n\tERROR_MARK_NODE (so that they won't cause errors later on).\n\t(process_template_parm): Pass pointer to\n\tcheck_for_bare_parameter_packs.\n\t(process_partial_specialization): Replace pack expansions before\n\tthe end of the template argument list with ERROR_MARK_NODE.\n\t(push_template_decl_real): Pass pointer to\n\tcheck_for_bare_parameter_packs. Replace parameter packs not at the\n\tend of the template parameter list with ERROR_MARK_NODE.\n\t(convert_template_argument): Be more careful about using DECL_NAME\n\ton only declarations.\n\t(unify): Can't unify against ERROR_MARK_NODE.\n\t* semantics.c (finish_cond): Pass pointer to\n\tcheck_for_bare_parameter_packs.\n\t(finish_expr_stmt): Ditto.\n\t(finish_for_expr): Ditto.\n\t(finish_switch_cond): Pass pointer to\n\tcheck_for_bare_parameter_packs, and call it before we put the\n\tcondition into the statement.\n\t(finish_mem_initializers): Pass pointer to\n\tcheck_for_bare_parameter_packs.\n\t(finish_member_declaration): Ditto.\n\t* parser.c (cp_parser_base_clause): Ditto.\n\t\n2007-11-06  Douglas Gregor  <doug.gregor@gmail.com>\n\n\t* testsuite/g++.dg/parser/crash36.C: Tweak expected errors.\n\t* testsuite/g++.dg/cpp0x/pr31439.C: New.\n\t* testsuite/g++.dg/cpp0x/pr32114.C: New.\n\t* testsuite/g++.dg/cpp0x/pr32115.C: New.\n\t* testsuite/g++.dg/cpp0x/pr32125.C: New.\n\t* testsuite/g++.dg/cpp0x/pr32126.C: New.\n\t* testsuite/g++.dg/cpp0x/pr32127.C: New.\n\t* testsuite/g++.dg/cpp0x/pr32128.C: New.\n\t* testsuite/g++.dg/cpp0x/pr32253.C: New.\n\t* testsuite/g++.dg/cpp0x/pr32566.C: New.\n\t* testsuite/g++.dg/cpp0x/pr31445.C: Tweak expected errors.\n\t* testsuite/g++.dg/cpp0x/pr31438.C: Ditto.\n\t* testsuite/g++.dg/cpp0x/variadic81.C: Ditto.\n\t* testsuite/g++.dg/cpp0x/pr31432.C: Ditto.\n\t* testsuite/g++.dg/cpp0x/pr31442.C: Ditto.\n\nFrom-SVN: r129928", "tree": {"sha": "83b93ec8d6832f10e12b455400f3daa46f208750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83b93ec8d6832f10e12b455400f3daa46f208750"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3de36a09ac124ff2b1bf50c822259ca206f88f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de36a09ac124ff2b1bf50c822259ca206f88f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de36a09ac124ff2b1bf50c822259ca206f88f23"}], "stats": {"total": 400, "additions": 304, "deletions": 96}, "files": [{"sha": "9fff78d0fbf59ba98cce48bde670be83f5a7cb94", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -1,3 +1,57 @@\n+2007-11-06  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/31439\n+\tPR c++/32114\n+\tPR c++/32115\n+\tPR c++/32125\n+\tPR c++/32126\n+\tPR c++/32127\n+\tPR c++/32128\n+\tPR c++/32253\n+\tPR c++/32566\n+\t* typeck.c (check_return_expr): Pass address of retval to\n+\tcheck_for_bare_parameter_packs.\n+\t* class.c (build_base_field): Tolerate bases that have no layout\n+\tdue to errors.\n+\t(end_of_base): Ditto.\n+\t* tree.c (canonical_type_variant): Be careful with\n+\tERROR_MARK_NODE.\n+\t* cp-tree.h (check_for_bare_parameter_packs): Now accepts a\n+\ttree*.\n+\t* pt.c (find_parameter_pack_data): Add set_packs_to_error field,\n+\twhich states whether parameter packs should be replaced with\n+\tERROR_MARK_NODE.\n+\t(find_parameter_packs_r): Pass addresses to cp_walk_tree wherever\n+\tpossible. If set_packs_to_error is set true, replace the parameter\n+\tpack with ERROR_MARK_NODE. Manage our own pointer sets.\n+\t(uses_parameter_packs): Don't set parameter packs to\n+\tERROR_MARK_NODE.\n+\t(check_for_bare_parameter_packs): Now takes a pointer to a tree,\n+\twhich may be modified (if it is a parameter pack). Instructs\n+\tfind_parameter_packs_r to replace parameter packs with\n+\tERROR_MARK_NODE (so that they won't cause errors later on).\n+\t(process_template_parm): Pass pointer to\n+\tcheck_for_bare_parameter_packs.\n+\t(process_partial_specialization): Replace pack expansions before\n+\tthe end of the template argument list with ERROR_MARK_NODE.\n+\t(push_template_decl_real): Pass pointer to\n+\tcheck_for_bare_parameter_packs. Replace parameter packs not at the\n+\tend of the template parameter list with ERROR_MARK_NODE.\n+\t(convert_template_argument): Be more careful about using DECL_NAME\n+\ton only declarations.\n+\t(unify): Can't unify against ERROR_MARK_NODE.\n+\t* semantics.c (finish_cond): Pass pointer to\n+\tcheck_for_bare_parameter_packs.\n+\t(finish_expr_stmt): Ditto.\n+\t(finish_for_expr): Ditto.\n+\t(finish_switch_cond): Pass pointer to\n+\tcheck_for_bare_parameter_packs, and call it before we put the\n+\tcondition into the statement.\n+\t(finish_mem_initializers): Pass pointer to\n+\tcheck_for_bare_parameter_packs.\n+\t(finish_member_declaration): Ditto.\n+\t* parser.c (cp_parser_base_clause): Ditto.\n+\t\n 2007-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/33168"}, {"sha": "e468db30442c90c663a5b7d904318bea1ad10a9e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -3613,21 +3613,24 @@ build_base_field (record_layout_info rli, tree binfo,\n       DECL_ARTIFICIAL (decl) = 1;\n       DECL_IGNORED_P (decl) = 1;\n       DECL_FIELD_CONTEXT (decl) = t;\n-      DECL_SIZE (decl) = CLASSTYPE_SIZE (basetype);\n-      DECL_SIZE_UNIT (decl) = CLASSTYPE_SIZE_UNIT (basetype);\n-      DECL_ALIGN (decl) = CLASSTYPE_ALIGN (basetype);\n-      DECL_USER_ALIGN (decl) = CLASSTYPE_USER_ALIGN (basetype);\n-      DECL_MODE (decl) = TYPE_MODE (basetype);\n-      DECL_FIELD_IS_BASE (decl) = 1;\n-\n-      /* Try to place the field.  It may take more than one try if we\n-\t have a hard time placing the field without putting two\n-\t objects of the same type at the same address.  */\n-      layout_nonempty_base_or_field (rli, decl, binfo, offsets);\n-      /* Add the new FIELD_DECL to the list of fields for T.  */\n-      TREE_CHAIN (decl) = *next_field;\n-      *next_field = decl;\n-      next_field = &TREE_CHAIN (decl);\n+      if (CLASSTYPE_AS_BASE (basetype))\n+\t{\n+\t  DECL_SIZE (decl) = CLASSTYPE_SIZE (basetype);\n+\t  DECL_SIZE_UNIT (decl) = CLASSTYPE_SIZE_UNIT (basetype);\n+\t  DECL_ALIGN (decl) = CLASSTYPE_ALIGN (basetype);\n+\t  DECL_USER_ALIGN (decl) = CLASSTYPE_USER_ALIGN (basetype);\n+\t  DECL_MODE (decl) = TYPE_MODE (basetype);\n+\t  DECL_FIELD_IS_BASE (decl) = 1;\n+\n+\t  /* Try to place the field.  It may take more than one try if we\n+\t     have a hard time placing the field without putting two\n+\t     objects of the same type at the same address.  */\n+\t  layout_nonempty_base_or_field (rli, decl, binfo, offsets);\n+\t  /* Add the new FIELD_DECL to the list of fields for T.  */\n+\t  TREE_CHAIN (decl) = *next_field;\n+\t  *next_field = decl;\n+\t  next_field = &TREE_CHAIN (decl);\n+\t}\n     }\n   else\n     {\n@@ -4423,7 +4426,9 @@ end_of_base (tree binfo)\n {\n   tree size;\n \n-  if (is_empty_class (BINFO_TYPE (binfo)))\n+  if (!CLASSTYPE_AS_BASE (BINFO_TYPE (binfo)))\n+    size = TYPE_SIZE_UNIT (char_type_node);\n+  else if (is_empty_class (BINFO_TYPE (binfo)))\n     /* An empty class has zero CLASSTYPE_SIZE_UNIT, but we need to\n        allocate some space for it. It cannot have virtual bases, so\n        TYPE_SIZE_UNIT is fine.  */"}, {"sha": "f954da5d850985f4fd9b3bfe0ad5794982d55da1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -4435,7 +4435,7 @@ extern int comp_template_parms\t\t\t(const_tree, const_tree);\n extern bool uses_parameter_packs                (tree);\n extern bool template_parameter_pack_p           (const_tree);\n extern tree make_pack_expansion                 (tree);\n-extern bool check_for_bare_parameter_packs      (tree);\n+extern bool check_for_bare_parameter_packs      (tree*);\n extern tree get_template_info\t\t\t(tree);\n extern int template_class_depth\t\t\t(tree);\n extern int is_specialization_of\t\t\t(tree, tree);"}, {"sha": "23994b0808ad1bf22baf7a0ba6421d1cee5ddc2e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -15248,7 +15248,7 @@ cp_parser_base_clause (cp_parser* parser)\n             /* Make this a pack expansion type. */\n             TREE_VALUE (base) = make_pack_expansion (TREE_VALUE (base));\n           else\n-            check_for_bare_parameter_packs (TREE_VALUE (base));\n+            check_for_bare_parameter_packs (&TREE_VALUE (base));\n \n \t  TREE_CHAIN (base) = bases;\n \t  bases = base;"}, {"sha": "0ac7314c72b38f89e751e0eb4a1b4441bf3d7bb9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 119, "deletions": 54, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -2419,11 +2419,19 @@ make_ith_pack_parameter_name (tree name, int i)\n   return get_identifier (newname);\n }\n \n-/* Structure used to track the progress of find_parameter_pack_r.  */\n+/* Structure used to track the progress of find_parameter_packs_r.  */\n struct find_parameter_pack_data \n {\n+  /* TREE_LIST that will contain all of the parameter packs found by\n+     the traversal.  */\n   tree* parameter_packs;\n+\n+  /* Set of AST nodes that have been visited by the traversal.  */\n   struct pointer_set_t *visited;\n+\n+  /* Whether we should replace parameter packs with\n+     ERROR_MARK_NODE. Used by check_for_bare_parameter_packs.  */\n+  bool set_packs_to_error;\n };\n \n /* Identifies all of the argument packs that occur in a template\n@@ -2436,49 +2444,89 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n   tree t = *tp;\n   struct find_parameter_pack_data* ppd = \n     (struct find_parameter_pack_data*)data;\n+  bool parameter_pack_p = false;\n \n-  if (TYPE_P (t))\n+  /* Don't visit nodes twice, except when we're clearing out parameter\n+     packs.  */\n+  if (pointer_set_contains (ppd->visited, *tp))\n+    {\n+      *walk_subtrees = 0;\n+      return NULL_TREE;\n+    }\n+\n+  /* Identify whether this is a parameter pack or not.  */\n+  switch (TREE_CODE (t))\n+    {\n+    case TEMPLATE_PARM_INDEX:\n+      if (TEMPLATE_PARM_PARAMETER_PACK (t))\n+        parameter_pack_p = true;\n+      break;\n+\n+    case TEMPLATE_TYPE_PARM:\n+    case TEMPLATE_TEMPLATE_PARM:\n+      if (TEMPLATE_TYPE_PARAMETER_PACK (t))\n+        parameter_pack_p = true;\n+      break;\n+\n+    case PARM_DECL:\n+      if (FUNCTION_PARAMETER_PACK_P (t))\n+        {\n+          /* We don't want to walk into the type of a PARM_DECL,\n+             because we don't want to see the type parameter pack.  */\n+          *walk_subtrees = 0;\n+\t  parameter_pack_p = true;\n+        }\n+      break;\n+\n+    default:\n+      /* Not a parameter pack.  */\n+      break;\n+    }\n+\n+  if (parameter_pack_p)\n     {\n-      tree context = TYPE_CONTEXT (t);\n-      cp_walk_tree (&context, &find_parameter_packs_r, ppd, ppd->visited);\n+      /* Add this parameter pack to the list.  */\n+      *ppd->parameter_packs = tree_cons (NULL_TREE, t, *ppd->parameter_packs);\n+\n+      if (ppd->set_packs_to_error)\n+\t/* The caller requested that we set the parameter packs to\n+\t   ERROR_MARK_NODE so that they will not trip up the compiler\n+\t   later.  The caller is responsible for emitting an error.  */\n+\t*tp = error_mark_node;\n+      else\n+\t/* Make sure we do not visit this node again.  */\n+\tpointer_set_insert (ppd->visited, *tp);\n     }\n+  else\n+    /* Make sure we do not visit this node again.  */\n+    pointer_set_insert (ppd->visited, *tp);\n+\n+  if (TYPE_P (t))\n+    cp_walk_tree (&TYPE_CONTEXT (t), \n+\t\t  &find_parameter_packs_r, ppd, NULL);\n \n   /* This switch statement will return immediately if we don't find a\n      parameter pack.  */\n   switch (TREE_CODE (t)) \n     {\n     case TEMPLATE_PARM_INDEX:\n-      if (TEMPLATE_PARM_PARAMETER_PACK (t))\n-        break;\n       return NULL_TREE;\n \n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n+      /* Check the template itself.  */\n+      cp_walk_tree (&TREE_TYPE (TYPE_TI_TEMPLATE (t)), \n+\t\t    &find_parameter_packs_r, ppd, NULL);\n       /* Check the template arguments.  */\n       cp_walk_tree (&TYPE_TI_ARGS (t), &find_parameter_packs_r, ppd, \n-\t\t    ppd->visited);\n-\n-      /* Dig out the underlying TEMPLATE_TEMPLATE_PARM.  */\n-      t = TYPE_TI_TEMPLATE (t);\n-      if (DECL_P (t) && TREE_TYPE (t))\n-        t = TREE_TYPE (t);\n+\t\t    NULL);\n       *walk_subtrees = 0;\n-      \n-      /* Fall through.  */\n+      return NULL_TREE;\n \n     case TEMPLATE_TYPE_PARM:\n     case TEMPLATE_TEMPLATE_PARM:\n-      if (TEMPLATE_TYPE_PARAMETER_PACK (t))\n-        break;\n       return NULL_TREE;\n \n     case PARM_DECL:\n-      if (FUNCTION_PARAMETER_PACK_P (t))\n-        {\n-          /* We don't want to walk into the type of a PARM_DECL,\n-             because we don't want to see the type parameter pack.*/\n-          *walk_subtrees = 0;\n-          break;\n-        }\n       return NULL_TREE;\n \n     case RECORD_TYPE:\n@@ -2489,25 +2537,20 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     case UNION_TYPE:\n     case ENUMERAL_TYPE:\n       if (TYPE_TEMPLATE_INFO (t))\n-        {\n-          tree args = TREE_VALUE (TYPE_TEMPLATE_INFO (t));\n-          cp_walk_tree (&args, &find_parameter_packs_r, ppd, ppd->visited);\n-        }\n+\tcp_walk_tree (&TREE_VALUE (TYPE_TEMPLATE_INFO (t)), \n+\t\t      &find_parameter_packs_r, ppd, NULL);\n \n       *walk_subtrees = 0;\n       return NULL_TREE;\n \n     case TEMPLATE_DECL:\n-      if (DECL_TEMPLATE_TEMPLATE_PARM_P (t)\n-\t  && TEMPLATE_TYPE_PARAMETER_PACK (TREE_TYPE (t)))\n-\tbreak;\n-      \n-      *walk_subtrees = 0;\n+      cp_walk_tree (&TREE_TYPE (t),\n+\t\t    &find_parameter_packs_r, ppd, NULL);\n       return NULL_TREE;\n  \n     case TYPENAME_TYPE:\n       cp_walk_tree (&TYPENAME_TYPE_FULLNAME (t), &find_parameter_packs_r,\n-                   ppd, ppd->visited);\n+                   ppd, NULL);\n       *walk_subtrees = 0;\n       return NULL_TREE;\n \n@@ -2519,16 +2562,13 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n \n     case INTEGER_TYPE:\n       cp_walk_tree (&TYPE_MAX_VALUE (t), &find_parameter_packs_r, \n-\t\t    ppd, ppd->visited);\n+\t\t    ppd, NULL);\n       *walk_subtrees = 0;\n       return NULL_TREE;\n \n     default:\n       return NULL_TREE;\n     }\n-  \n-  /* Add this parameter pack to the list.  */\n-  *ppd->parameter_packs = tree_cons (NULL_TREE, t, *ppd->parameter_packs);\n \n   return NULL_TREE;\n }\n@@ -2541,7 +2581,8 @@ uses_parameter_packs (tree t)\n   struct find_parameter_pack_data ppd;\n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  cp_walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n+  ppd.set_packs_to_error = false;\n+  cp_walk_tree (&t, &find_parameter_packs_r, &ppd, NULL);\n   pointer_set_destroy (ppd.visited);\n   return parameter_packs != NULL_TREE;\n }\n@@ -2559,6 +2600,8 @@ make_pack_expansion (tree arg)\n   bool for_types = false;\n   struct find_parameter_pack_data ppd;\n \n+  ppd.set_packs_to_error = false;\n+\n   if (!arg || arg == error_mark_node)\n     return arg;\n \n@@ -2592,7 +2635,7 @@ make_pack_expansion (tree arg)\n       ppd.visited = pointer_set_create ();\n       ppd.parameter_packs = &parameter_packs;\n       cp_walk_tree (&TREE_PURPOSE (arg), &find_parameter_packs_r, \n-                    &ppd, ppd.visited);\n+                    &ppd, NULL);\n \n       if (parameter_packs == NULL_TREE)\n         {\n@@ -2610,7 +2653,7 @@ make_pack_expansion (tree arg)\n               /* Determine which parameter packs will be expanded in this\n                  argument.  */\n               cp_walk_tree (&TREE_VALUE (value), &find_parameter_packs_r, \n-                            &ppd, ppd.visited);\n+                            &ppd, NULL);\n             }\n         }\n \n@@ -2648,7 +2691,7 @@ make_pack_expansion (tree arg)\n   /* Determine which parameter packs will be expanded.  */\n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  cp_walk_tree (&arg, &find_parameter_packs_r, &ppd, ppd.visited);\n+  cp_walk_tree (&arg, &find_parameter_packs_r, &ppd, NULL);\n   pointer_set_destroy (ppd.visited);\n \n   /* Make sure we found some parameter packs.  */\n@@ -2680,20 +2723,21 @@ make_pack_expansion (tree arg)\n    Returns TRUE if there were no bare parameter packs, returns FALSE\n    (and emits an error) if there were bare parameter packs.*/\n bool \n-check_for_bare_parameter_packs (tree t)\n+check_for_bare_parameter_packs (tree* t)\n {\n   tree parameter_packs = NULL_TREE;\n   struct find_parameter_pack_data ppd;\n \n-  if (!processing_template_decl || !t || t == error_mark_node)\n+  if (!processing_template_decl || !t || !*t || *t == error_mark_node)\n     return true;\n \n-  if (TREE_CODE (t) == TYPE_DECL)\n-    t = TREE_TYPE (t);\n+  if (TREE_CODE (*t) == TYPE_DECL)\n+    t = &TREE_TYPE (*t);\n \n   ppd.parameter_packs = &parameter_packs;\n   ppd.visited = pointer_set_create ();\n-  cp_walk_tree (&t, &find_parameter_packs_r, &ppd, ppd.visited);\n+  ppd.set_packs_to_error = false;\n+  cp_walk_tree (t, &find_parameter_packs_r, &ppd, NULL);\n   pointer_set_destroy (ppd.visited);\n \n   if (parameter_packs) \n@@ -2711,11 +2755,23 @@ check_for_bare_parameter_packs (tree t)\n             name = DECL_NAME (TEMPLATE_PARM_DECL (pack));\n           else\n             name = DECL_NAME (pack);\n-          inform (\"        %qD\", name);\n+\n+\t  if (name)\n+\t    inform (\"        %qD\", name);\n+\t  else\n+\t    inform (\"        <anonymous>\");\n \n           parameter_packs = TREE_CHAIN (parameter_packs);\n         }\n \n+      /* Clean up any references to these parameter packs within the\n+\t tree.  */\n+      ppd.parameter_packs = &parameter_packs;\n+      ppd.visited = pointer_set_create ();\n+      ppd.set_packs_to_error = true;\n+      cp_walk_tree (t, &find_parameter_packs_r, &ppd, NULL);\n+      pointer_set_destroy (ppd.visited);\n+\n       return false;\n     }\n \n@@ -2978,7 +3034,7 @@ process_template_parm (tree list, tree parm, bool is_non_type,\n \t  {\n \t    /* This template parameter is not a parameter pack, but it\n \t       should be. Complain about \"bare\" parameter packs.  */\n-\t    check_for_bare_parameter_packs (TREE_TYPE (parm));\n+\t    check_for_bare_parameter_packs (&TREE_TYPE (parm));\n \t    \n \t    /* Recover by calling this a parameter pack.  */\n \t    is_parameter_pack = true;\n@@ -3382,7 +3438,10 @@ process_partial_specialization (tree decl)\n                   if (TREE_CODE (arg) == EXPR_PACK_EXPANSION)\n                     error (\"parameter pack argument %qE must be at the end of the template argument list\", arg);\n                   else\n-                    error (\"parameter pack argument %qT must be at the end of the template argument list\", arg);                   \n+                    error (\"parameter pack argument %qT must be at the end of the template argument list\", arg);\n+\n+\t\t  if (packed_args)\n+\t\t    TREE_VEC_ELT (packed_args, j) = error_mark_node;\n                 }\n             }\n \n@@ -3789,7 +3848,7 @@ push_template_decl_real (tree decl, bool is_friend)\n       while (arg && argtype)\n         {\n           if (!FUNCTION_PARAMETER_PACK_P (arg)\n-              && !check_for_bare_parameter_packs (TREE_TYPE (arg)))\n+              && !check_for_bare_parameter_packs (&TREE_TYPE (arg)))\n             {\n             /* This is a PARM_DECL that contains unexpanded parameter\n                packs. We have already complained about this in the\n@@ -3805,11 +3864,11 @@ push_template_decl_real (tree decl, bool is_friend)\n \n       /* Check for bare parameter packs in the return type and the\n          exception specifiers.  */\n-      check_for_bare_parameter_packs (TREE_TYPE (type));\n-      check_for_bare_parameter_packs (TYPE_RAISES_EXCEPTIONS (type));\n+      check_for_bare_parameter_packs (&TREE_TYPE (type));\n+      check_for_bare_parameter_packs (&TYPE_RAISES_EXCEPTIONS (type));\n     }\n   else\n-    check_for_bare_parameter_packs (TREE_TYPE (decl));\n+    check_for_bare_parameter_packs (&TREE_TYPE (decl));\n \n   if (is_partial)\n     return process_partial_specialization (decl);\n@@ -3833,6 +3892,8 @@ push_template_decl_real (tree decl, bool is_friend)\n \t      else\n \t\terror (\"parameter pack %qT must be at the end of the\"\n \t\t       \" template parameter list\", TREE_TYPE (parm));\n+\n+\t      TREE_VALUE (TREE_VEC_ELT (inner_parms, i)) = error_mark_node;\n \t    }\n         }\n     }\n@@ -4755,7 +4816,7 @@ convert_template_argument (tree parm,\n \t      if (is_type)\n \t\terror (\"  expected a constant of type %qT, got %qT\",\n \t\t       TREE_TYPE (parm),\n-\t\t       (is_tmpl_type ? DECL_NAME (arg) : orig_arg));\n+\t\t       (DECL_P (arg) ? DECL_NAME (arg) : orig_arg));\n \t      else if (requires_tmpl_type)\n \t\terror (\"  expected a class template, got %qE\", orig_arg);\n \t      else\n@@ -13101,6 +13162,10 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n          nodes.  */\n       return 0;\n \n+    case ERROR_MARK:\n+      /* Unification fails if we hit an error node.  */\n+      return 1;\n+\n     default:\n       gcc_assert (EXPR_P (parm));\n "}, {"sha": "50118a25f126fad573419be2b2153572253f9080", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -508,7 +508,7 @@ finish_cond (tree *cond_p, tree expr)\n       if (TREE_CODE (cond) == DECL_EXPR)\n \texpr = cond;\n \n-      check_for_bare_parameter_packs (expr);\n+      check_for_bare_parameter_packs (&expr);\n     }\n   *cond_p = expr;\n }\n@@ -618,7 +618,7 @@ finish_expr_stmt (tree expr)\n       else if (!type_dependent_expression_p (expr))\n \tconvert_to_void (build_non_dependent_expr (expr), \"statement\");\n \n-      check_for_bare_parameter_packs (expr);\n+      check_for_bare_parameter_packs (&expr);\n \n       /* Simplification of inner statement expressions, compound exprs,\n \t etc can result in us already having an EXPR_STMT.  */\n@@ -875,7 +875,7 @@ finish_for_expr (tree expr, tree for_stmt)\n   else if (!type_dependent_expression_p (expr))\n     convert_to_void (build_non_dependent_expr (expr), \"3rd expression in for\");\n   expr = maybe_cleanup_point_expr_void (expr);\n-  check_for_bare_parameter_packs (expr);\n+  check_for_bare_parameter_packs (&expr);\n   FOR_EXPR (for_stmt) = expr;\n }\n \n@@ -971,12 +971,12 @@ finish_switch_cond (tree cond, tree switch_stmt)\n \t    cond = index;\n \t}\n     }\n+  check_for_bare_parameter_packs (&cond);\n   finish_cond (&SWITCH_STMT_COND (switch_stmt), cond);\n   SWITCH_STMT_TYPE (switch_stmt) = orig_type;\n   add_stmt (switch_stmt);\n   push_switch (switch_stmt);\n   SWITCH_STMT_BODY (switch_stmt) = push_stmt_list ();\n-  check_for_bare_parameter_packs (cond);\n }\n \n /* Finish the body of a switch-statement, which may be given by\n@@ -1389,7 +1389,7 @@ finish_mem_initializers (tree mem_inits)\n              bound as part of the TREE_PURPOSE.  See\n              make_pack_expansion for more information.  */\n           if (TREE_CODE (TREE_PURPOSE (mem)) != TYPE_PACK_EXPANSION)\n-            check_for_bare_parameter_packs (TREE_VALUE (mem));\n+            check_for_bare_parameter_packs (&TREE_VALUE (mem));\n         }\n \n       add_stmt (build_min_nt (CTOR_INITIALIZER, mem_inits));\n@@ -2306,9 +2306,8 @@ finish_member_declaration (tree decl)\n   DECL_CONTEXT (decl) = current_class_type;\n \n   /* Check for bare parameter packs in the member variable declaration.  */\n-  if (TREE_CODE (decl) == FIELD_DECL\n-      && !check_for_bare_parameter_packs (TREE_TYPE (decl)))\n-    TREE_TYPE (decl) = error_mark_node;\n+  if (TREE_CODE (decl) == FIELD_DECL)\n+    check_for_bare_parameter_packs (&TREE_TYPE (decl));\n \n   /* [dcl.link]\n "}, {"sha": "fba7c2281f0dc2755e0ffeb8f375cf6899269f42", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -846,6 +846,9 @@ cp_build_qualified_type_real (tree type,\n tree\n canonical_type_variant (tree t)\n {\n+  if (t == error_mark_node)\n+    return error_mark_node;\n+\n   return cp_build_qualified_type (TYPE_MAIN_VARIANT (t), cp_type_quals (t));\n }\n \f"}, {"sha": "d167de20c0617c95e7f991074c8bcac055d99d38", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -6613,7 +6613,7 @@ check_return_expr (tree retval, bool *no_warning)\n   if (processing_template_decl)\n     {\n       current_function_returns_value = 1;\n-      check_for_bare_parameter_packs (retval);\n+      check_for_bare_parameter_packs (&retval);\n       return retval;\n     }\n "}, {"sha": "6689530ba54681fde2b1498899572aac68ba59d7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -1,3 +1,21 @@\n+2007-11-06  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* testsuite/g++.dg/parser/crash36.C: Tweak expected errors.\n+\t* testsuite/g++.dg/cpp0x/pr31439.C: New.\n+\t* testsuite/g++.dg/cpp0x/pr32114.C: New.\n+\t* testsuite/g++.dg/cpp0x/pr32115.C: New.\n+\t* testsuite/g++.dg/cpp0x/pr32125.C: New.\n+\t* testsuite/g++.dg/cpp0x/pr32126.C: New.\n+\t* testsuite/g++.dg/cpp0x/pr32127.C: New.\n+\t* testsuite/g++.dg/cpp0x/pr32128.C: New.\n+\t* testsuite/g++.dg/cpp0x/pr32253.C: New.\n+\t* testsuite/g++.dg/cpp0x/pr32566.C: New.\n+\t* testsuite/g++.dg/cpp0x/pr31445.C: Tweak expected errors.\n+\t* testsuite/g++.dg/cpp0x/pr31438.C: Ditto.\n+\t* testsuite/g++.dg/cpp0x/variadic81.C: Ditto.\n+\t* testsuite/g++.dg/cpp0x/pr31432.C: Ditto.\n+\t* testsuite/g++.dg/cpp0x/pr31442.C: Ditto.\n+\n 2007-11-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/33168"}, {"sha": "8016ee69d75b402a8e6e7c6860443645f85009b7", "filename": "gcc/testsuite/g++.dg/cpp0x/pr31432.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31432.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31432.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31432.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -4,5 +4,5 @@ template<typename..., typename> struct A // { dg-error \"parameter pack\" }\n  static int i;\n };\n \n-A<int, int> a; // { dg-error \"invalid type\" }\n-A<char,int> b; // { dg-error \"invalid type\" }\n+A<int, int> a; // { dg-error \"mismatch|expected|invalid type\" }\n+A<char,int> b; // { dg-error \"mismatch|expected|invalid type\" }"}, {"sha": "0e27971494b73e49e0b207c74095599d4a388eea", "filename": "gcc/testsuite/g++.dg/cpp0x/pr31438.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31438.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31438.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31438.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -1,9 +1,9 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-template<typename> struct A; // { dg-error \"candidates\" }\n-template<typename T, typename... U> struct A<T(U)> // { dg-error \"parameter packs|U\" }\n-{ // { dg-error \"parameter packs|U\" }\n- template<typename X> A(X); // { dg-error \"parameter packs|U\" }\n+template<typename> struct A;\n+template<typename T, typename... U> struct A<T(U)> // { dg-error \"parameter packs|U|not used|U\" }\n+{\n+ template<typename X> A(X);\n };\n \n-A<void(int)> a(0); // { dg-error \"no matching\" }\n+A<void(int)> a(0); // { dg-error \"incomplete type\" }"}, {"sha": "420dc082f086073552bbc459d04e8310407d933d", "filename": "gcc/testsuite/g++.dg/cpp0x/pr31439.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31439.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31439.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31439.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename...> struct A;\n+\n+template<char> struct A<> {}; // { dg-error \"not used in partial specialization|anonymous\" }\n+\n+template<typename T, typename... U> struct A<T, U...> : A<U...> {};\n+\n+A<int> a;"}, {"sha": "f4e411c4505922d94f56409bc280f68dac9b3b57", "filename": "gcc/testsuite/g++.dg/cpp0x/pr31442.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31442.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31442.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31442.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -1,9 +1,9 @@\n // { dg-options \"-std=gnu++0x\" }\n-template<typename... T, T = 0> struct A {}; // { dg-error \"parameter packs|T|the end\" }\n+template<typename... T, T = 0> struct A {}; // { dg-error \"parameter packs|T|the end|parameter packs|anonymous\" }\n \n struct B\n {\n   template <template <typename...> class C> B(C<int>);\n };\n \n-B b = A<int>();\n+B b = A<int>(); // { dg-error \"mismatch|expected\" }"}, {"sha": "b3f2b5b09dafbaaf4d328d14a736fd76118c7d0a", "filename": "gcc/testsuite/g++.dg/cpp0x/pr31445.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31445.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31445.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr31445.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -1,8 +1,8 @@\n // { dg-options \"-std=gnu++0x\" }\n template <typename... T> struct A\n {\n-  void foo(T...); // { dg-error \"candidates\" }\n-  A(T... t) { foo(t); } // { dg-error \"parameter packs|t|no matching\" }\n+  void foo(T...);\n+  A(T... t) { foo(t); } // { dg-error \"parameter packs|t\" }\n };\n \n A<int> a(0);"}, {"sha": "e78dfdf1df9cf90c506f80cce103865cc3e91ed3", "filename": "gcc/testsuite/g++.dg/cpp0x/pr32114.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32114.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32114.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32114.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename ...T> struct A\n+{\n+  typedef typename T::X Y; // { dg-error \"not expanded|T\" }\n+};\n+\n+A<int> a;"}, {"sha": "a721eed4eb72d7ccc40b35724f87512bbb39bb63", "filename": "gcc/testsuite/g++.dg/cpp0x/pr32115.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32115.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32115.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32115.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -0,0 +1,4 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename ...T, int = 0> struct A {}; // { dg-error \"end of\" }\n+\n+A<int> a; // { dg-error \"mismatch|expected|invalid\" }"}, {"sha": "154cd85487dd074f291820214e7d019aac5c87d8", "filename": "gcc/testsuite/g++.dg/cpp0x/pr32125.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32125.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32125.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32125.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename...> struct A;\n+\n+template<typename...T> struct A<T*> // { dg-error \"not expanded|T|not used|T\" }\n+{\n+  A();\n+  A(T); // { dg-error \"not expanded|T\" }\n+};"}, {"sha": "e7c61bd0c3c913cb1930409d58737c18fc97e159", "filename": "gcc/testsuite/g++.dg/cpp0x/pr32126.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32126.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32126.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32126.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename...> struct A;\n+\n+template<typename...T> struct A<T> // { dg-error \"not expanded|T|not used|T\" }\n+{\n+ static int i;\n+};\n+\n+A<char> a; // { dg-error \"incomplete\" }\n+A<int> b; // { dg-error \"incomplete\" }"}, {"sha": "8e4bc0050b2076cbe282b48076c35c418da9e9ac", "filename": "gcc/testsuite/g++.dg/cpp0x/pr32127.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32127.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32127.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32127.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename...T> struct A\n+{\n+  static T i; // { dg-error \"parameter packs|T\" }\n+};\n+\n+int j = A<int>::i; // { dg-error \"not a member\" }"}, {"sha": "5876dbec48504726134dedea5c5733ac3b655a94", "filename": "gcc/testsuite/g++.dg/cpp0x/pr32128.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32128.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32128.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32128.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -0,0 +1,7 @@\n+// { dg-options \"-std=c++0x\" }\n+template<typename...> struct A;\n+\n+template<typename...T, typename...U> \n+  struct A<T..., U...> {}; // { dg-error \"must be at the end\" }\n+\n+A<int> a; // { dg-error \"incomplete\" }"}, {"sha": "d8f7b03b92f3b08c5d75bec5c2fcb80200269d45", "filename": "gcc/testsuite/g++.dg/cpp0x/pr32253.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32253.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32253.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32253.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=c++0x\" }\n+template<void (*... fp)()> struct A\n+{\n+  A() { fp(); } // { dg-error \"not expanded|fp\" }\n+};\n+\n+void foo();\n+\n+A<foo> a;"}, {"sha": "f6e7a5b548d8bfe2e4c2ae04c4ed92996e28a31c", "filename": "gcc/testsuite/g++.dg/cpp0x/pr32566.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32566.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32566.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr32566.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -0,0 +1,4 @@\n+// { dg-options \"-std=c++0x\" }\n+template<int...> struct A;\n+\n+template<template<int> class... T> struct A<T...> {}; // { dg-error \"mismatch|expected\" }"}, {"sha": "322f249de9ade526a643e8d51120ac7dfd538d50", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic81.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic81.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic81.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic81.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -3,9 +3,9 @@\n \n template<typename> struct A;\n \n-template<typename... T> struct A<T*>  // { dg-error \"not expanded|note\" }\n-{                                     // { dg-error \"not expanded|note\" }\n+template<typename... T> struct A<T*>  // { dg-error \"not expanded|T|not used|T\" }\n+{                                     \n   struct B;\n };\n \n-A<void*> a;\n+A<void*> a; // { dg-error \"incomplete\" }"}, {"sha": "e73e928350d4f6177eabe3437391886f9304b9ca", "filename": "gcc/testsuite/g++.dg/parse/crash36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad8aeeb962a281f654be3bc0a7a2dd4015d317b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C?ref=1ad8aeeb962a281f654be3bc0a7a2dd4015d317b", "patch": "@@ -5,7 +5,7 @@\n template <typename... T> struct A\t// { dg-error \"does not include variadic templates\" }\n {\n   static T &t;\t\t\t\t// { dg-error \"not expanded with|T\" }\n-  static const int i = sizeof (++t);\t// { dg-error \"invalid use of template type parameter\" }\n+  static const int i = sizeof (++t);\n };\n \n int x[A <int>::i];\t// { dg-error \"is not an integral constant-expression\" }"}]}