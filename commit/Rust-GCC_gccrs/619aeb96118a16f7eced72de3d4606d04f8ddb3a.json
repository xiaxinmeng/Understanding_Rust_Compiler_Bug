{"sha": "619aeb96118a16f7eced72de3d4606d04f8ddb3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5YWViOTYxMThhMTZmN2VjZWQ3MmRlM2Q0NjA2ZDA0ZjhkZGIzYQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1998-10-13T17:52:36Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1998-10-13T17:52:36Z"}, "message": "Fix for m68k -O0 libstdc++ compiler abort.\n\n\t* config/m68k/m68k.h (HARD_REGNO_MODE_OK): For FP regs, add REGNO >= 16\n\tcheck.  Add comment to document problems with TARGET_SUN_FPA version\n\tof this macro.\n\t* config/m68k/m68k.md (movxf+1): Support 'r'/'r' moves.\n\nFrom-SVN: r23056", "tree": {"sha": "2a472c03574f0c7981a4c23316a01bb64adee6ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a472c03574f0c7981a4c23316a01bb64adee6ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/619aeb96118a16f7eced72de3d4606d04f8ddb3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619aeb96118a16f7eced72de3d4606d04f8ddb3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/619aeb96118a16f7eced72de3d4606d04f8ddb3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619aeb96118a16f7eced72de3d4606d04f8ddb3a/comments", "author": null, "committer": null, "parents": [{"sha": "160a655e211aac8dcc34c3614b0d6624e0d79cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/160a655e211aac8dcc34c3614b0d6624e0d79cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/160a655e211aac8dcc34c3614b0d6624e0d79cd2"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "fa0cf17e78bec8e63a11450a2f0c5f0aa3aa9e18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619aeb96118a16f7eced72de3d4606d04f8ddb3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619aeb96118a16f7eced72de3d4606d04f8ddb3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=619aeb96118a16f7eced72de3d4606d04f8ddb3a", "patch": "@@ -1,3 +1,10 @@\n+Tue Oct 13 17:51:04 1998  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* config/m68k/m68k.h (HARD_REGNO_MODE_OK): For FP regs, add REGNO >= 16\n+\tcheck.  Add comment to document problems with TARGET_SUN_FPA version\n+\tof this macro.\n+\t* config/m68k/m68k.md (movxf+1): Support 'r'/'r' moves.\n+\n Tue Oct 13 17:46:18 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (gencheck.o): Depend on gansidecl.h."}, {"sha": "42eb7939cf9375ca32d7b4c304f0728985326e21", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619aeb96118a16f7eced72de3d4606d04f8ddb3a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619aeb96118a16f7eced72de3d4606d04f8ddb3a/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=619aeb96118a16f7eced72de3d4606d04f8ddb3a", "patch": "@@ -471,8 +471,8 @@ extern int target_flags;\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n   (((REGNO) < 16\t\t\t\t\t\\\n-   && !((REGNO) < 8 && (REGNO) + GET_MODE_SIZE ((MODE)) / 4 > 8))\t\\\n-   || ((REGNO) < 24\t\t\t\t        \\\n+    && !((REGNO) < 8 && (REGNO) + GET_MODE_SIZE (MODE) / 4 > 8))\t\\\n+   || ((REGNO) >= 16 && (REGNO) < 24\t\t\t\t        \\\n        && TARGET_68881                                  \\\n        && (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\\\n \t   || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT)))\n@@ -486,6 +486,11 @@ extern int target_flags;\n    (apparently) hold whatever you feel like putting in them.\n    If using the fpa, don't put a double in d7/a0.  */\n \n+/* ??? This is confused.  The check to prohibit d7/a0 overlaps should always\n+   be enabled regardless of whether TARGET_FPA is specified.  It isn't clear\n+   what the other d/a register checks are for.  Every check using REGNO\n+   actually needs to use a range, e.g. 24>=X<56 not <56.  There is probably\n+   no one using this code anymore.  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n (((REGNO) < 16\t\t\t\t\t\t\t\t\\\n   && !(TARGET_FPA\t\t\t\t\t\t\t\\"}, {"sha": "a648ec80548ebf3ad5668ea02419b93a18610b15", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619aeb96118a16f7eced72de3d4606d04f8ddb3a/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619aeb96118a16f7eced72de3d4606d04f8ddb3a/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=619aeb96118a16f7eced72de3d4606d04f8ddb3a", "patch": "@@ -1224,8 +1224,8 @@\n }\")\n \n (define_insn \"\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,!r,!f\")\n-\t(match_operand:XF 1 \"nonimmediate_operand\" \"m,f,f,f,r\"))]\n+  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,!r,!f,!r\")\n+\t(match_operand:XF 1 \"nonimmediate_operand\" \"m,f,f,f,r,!r\"))]\n   \"TARGET_68881\"\n   \"*\n {\n@@ -1247,15 +1247,20 @@\n         return \\\"fmove%.x %1,%0\\\";\n       return \\\"fmove%.x %f1,%0\\\";\n     }\n-  if (REG_P (operands[0]))\n+  if (FP_REG_P (operands[1]))\n     {\n-      output_asm_insn (\\\"fmove%.x %f1,%-\\;move%.l %+,%0\\\", operands);\n-      operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n-      output_asm_insn (\\\"move%.l %+,%0\\\", operands);\n-      operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n-      return \\\"move%.l %+,%0\\\";\n+      if (REG_P (operands[0]))\n+\t{\n+\t  output_asm_insn (\\\"fmove%.x %f1,%-\\;move%.l %+,%0\\\", operands);\n+\t  operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n+\t  output_asm_insn (\\\"move%.l %+,%0\\\", operands);\n+\t  operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]) + 1);\n+\t  return \\\"move%.l %+,%0\\\";\n+\t}\n+      /* Must be memory destination.  */\n+      return \\\"fmove%.x %f1,%0\\\";\n     }\n-  return \\\"fmove%.x %f1,%0\\\";\n+  return output_move_double (operands);\n }\n \")\n "}]}