{"sha": "866af8a90915d8ed191ab7af616b3a186c28cae4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY2YWY4YTkwOTE1ZDhlZDE5MWFiN2FmNjE2YjNhMTg2YzI4Y2FlNA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2005-04-26T16:30:37Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2005-04-26T16:30:37Z"}, "message": "arm.c (arm_return_in_msb): New function.\n\n\t* config/arm/arm.c (arm_return_in_msb): New function.\n\t(arm_must_pass_in_stack): New function.\n\t(TARGET_RETURN_IN_MSB): Define target hook.\n\t(TARGET_MUST_PASS_IN_STACK): Define target hook.\n\t(arm_function_value): Pad small aggregate return.\n\t(arm_pad_arg_upward): New function.\n\t(arm_pad_reg_upward): New function.\n\t* config/arm/arm.h (PROMOTE_FUNCTION_MODE): Include complex values.\n\t(FUNCTION_ARG_PADDING): Define macro.\n\t(BLOCK_REG_PADDING): Define macro.\n\t(PAD_VARARGS_DOWN): Correct padding for AAPCS.\n\t* config/arm/arm-protos.h (arm_pad_arg_upward): Declare function.\n\t(arm_pad_reg_upward): Declare function.\n\nFrom-SVN: r98774", "tree": {"sha": "dd496ead09510fc6c073f86dd74831a32b92e7d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd496ead09510fc6c073f86dd74831a32b92e7d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/866af8a90915d8ed191ab7af616b3a186c28cae4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866af8a90915d8ed191ab7af616b3a186c28cae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/866af8a90915d8ed191ab7af616b3a186c28cae4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866af8a90915d8ed191ab7af616b3a186c28cae4/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "747d0b96445f718041b3f37cd3e91cd92bc3f81d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747d0b96445f718041b3f37cd3e91cd92bc3f81d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747d0b96445f718041b3f37cd3e91cd92bc3f81d"}], "stats": {"total": 122, "additions": 118, "deletions": 4}, "files": [{"sha": "07c96a5372fc0bfdf3b4865600891131a69ac157", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866af8a90915d8ed191ab7af616b3a186c28cae4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866af8a90915d8ed191ab7af616b3a186c28cae4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=866af8a90915d8ed191ab7af616b3a186c28cae4", "patch": "@@ -1,3 +1,19 @@\n+2005-04-26  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/arm/arm.c (arm_return_in_msb): New function.\n+\t(arm_must_pass_in_stack): New function.\n+\t(TARGET_RETURN_IN_MSB): Define target hook.\n+\t(TARGET_MUST_PASS_IN_STACK): Define target hook.\n+\t(arm_function_value): Pad small aggregate return.\n+\t(arm_pad_arg_upward): New function.\n+\t(arm_pad_reg_upward): New function.\n+\t* config/arm/arm.h (PROMOTE_FUNCTION_MODE): Include complex values.\n+\t(FUNCTION_ARG_PADDING): Define macro.\n+\t(BLOCK_REG_PADDING): Define macro.\n+\t(PAD_VARARGS_DOWN): Correct padding for AAPCS.\n+\t* config/arm/arm-protos.h (arm_pad_arg_upward): Declare function.\n+\t(arm_pad_reg_upward): Declare function.\n+\n 2005-04-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* basic-block.h (ei_cond): New."}, {"sha": "0d20eb8fd44cf2eca198a3d89fc296025dac560a", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866af8a90915d8ed191ab7af616b3a186c28cae4/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866af8a90915d8ed191ab7af616b3a186c28cae4/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=866af8a90915d8ed191ab7af616b3a186c28cae4", "patch": "@@ -121,6 +121,8 @@ extern int arm_eliminable_register (rtx);\n #if defined TREE_CODE\n extern rtx arm_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern void arm_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);\n+extern bool arm_pad_arg_upward (enum machine_mode, tree);\n+extern bool arm_pad_reg_upward (enum machine_mode, tree, int);\n extern bool arm_needs_doubleword_align (enum machine_mode, tree);\n extern rtx arm_function_value(tree, tree);\n #endif"}, {"sha": "cd529365c2fb6a09808b376f515db52f28090c30", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866af8a90915d8ed191ab7af616b3a186c28cae4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866af8a90915d8ed191ab7af616b3a186c28cae4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=866af8a90915d8ed191ab7af616b3a186c28cae4", "patch": "@@ -165,6 +165,8 @@ static bool arm_pass_by_reference (CUMULATIVE_ARGS *,\n static bool arm_promote_prototypes (tree);\n static bool arm_default_short_enums (void);\n static bool arm_align_anon_bitfield (void);\n+static bool arm_return_in_msb (tree);\n+static bool arm_must_pass_in_stack (enum machine_mode, tree);\n \n static tree arm_cxx_guard_type (void);\n static bool arm_cxx_guard_mask_bit (void);\n@@ -319,6 +321,12 @@ static unsigned HOST_WIDE_INT arm_shift_truncation_mask (enum machine_mode);\n #undef TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT\n #define TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT arm_cxx_class_data_always_comdat\n \n+#undef TARGET_RETURN_IN_MSB\n+#define TARGET_RETURN_IN_MSB arm_return_in_msb\n+\n+#undef TARGET_MUST_PASS_IN_STACK\n+#define TARGET_MUST_PASS_IN_STACK arm_must_pass_in_stack\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -2302,11 +2310,23 @@ arm_function_value(tree type, tree func ATTRIBUTE_UNUSED)\n   int unsignedp ATTRIBUTE_UNUSED;\n   rtx r ATTRIBUTE_UNUSED;\n \n-\n   mode = TYPE_MODE (type);\n   /* Promote integer types.  */\n   if (INTEGRAL_TYPE_P (type))\n     PROMOTE_FUNCTION_MODE (mode, unsignedp, type);\n+\n+  /* Promotes small structs returned in a register to full-word size\n+     for big-endian AAPCS.  */\n+  if (arm_return_in_msb (type))\n+    {\n+      HOST_WIDE_INT size = int_size_in_bytes (type);\n+      if (size % UNITS_PER_WORD != 0)\n+\t{\n+\t  size += UNITS_PER_WORD - size % UNITS_PER_WORD;\n+\t  mode = mode_for_size (size * BITS_PER_UNIT, MODE_INT, 0);\n+\t}\n+    }\n+  \n   return LIBCALL_VALUE(mode);\n }\n \n@@ -4905,6 +4925,17 @@ vfp_secondary_reload_class (enum machine_mode mode, rtx x)\n   return GENERAL_REGS;\n }\n \n+/* Values which must be returned in the most-significant end of the return\n+   register.  */\n+\n+static bool\n+arm_return_in_msb (tree valtype)\n+{\n+  return (TARGET_AAPCS_BASED\n+          && BYTES_BIG_ENDIAN\n+          && (AGGREGATE_TYPE_P (valtype)\n+              || TREE_CODE (valtype) == COMPLEX_TYPE));\n+}\n \n /* Returns TRUE if INSN is an \"LDR REG, ADDR\" instruction.\n    Use by the Cirrus Maverick code which has to workaround\n@@ -6503,6 +6534,59 @@ arm_reload_out_hi (rtx *operands)\n \t\t\t    gen_lowpart (QImode, scratch)));\n     }\n }\n+\n+/* Return true if a type must be passed in memory. For AAPCS, small aggregates\n+   (padded to the size of a word) should be passed in a register.  */\n+\n+static bool\n+arm_must_pass_in_stack (enum machine_mode mode, tree type)\n+{\n+  if (TARGET_AAPCS_BASED)\n+    return must_pass_in_stack_var_size (mode, type);\n+  else\n+    return must_pass_in_stack_var_size_or_pad (mode, type);\n+}\n+\n+\n+/* For use by FUNCTION_ARG_PADDING (MODE, TYPE).\n+   Return true if an argument passed on the stack should be padded upwards,\n+   i.e. if the least-significant byte has useful data.  */\n+\n+bool\n+arm_pad_arg_upward (enum machine_mode mode, tree type)\n+{\n+  if (!TARGET_AAPCS_BASED)\n+    return DEFAULT_FUNCTION_ARG_PADDING(mode, type);\n+\n+  if (type && BYTES_BIG_ENDIAN && INTEGRAL_TYPE_P (type))\n+    return false;\n+\n+  return true;\n+}\n+\n+\n+/* Similarly, for use by BLOCK_REG_PADDING (MODE, TYPE, FIRST).\n+   For non-AAPCS, return !BYTES_BIG_ENDIAN if the least significant\n+   byte of the register has useful data, and return the opposite if the\n+   most significant byte does.\n+   For AAPCS, small aggregates and small complex types are always padded\n+   upwards.  */\n+\n+bool\n+arm_pad_reg_upward (enum machine_mode mode ATTRIBUTE_UNUSED,\n+                    tree type, int first ATTRIBUTE_UNUSED)\n+{\n+  if (TARGET_AAPCS_BASED\n+      && BYTES_BIG_ENDIAN\n+      && (AGGREGATE_TYPE_P (type) || TREE_CODE (type) == COMPLEX_TYPE)\n+      && int_size_in_bytes (type) <= 4)\n+    return true;\n+\n+  /* Otherwise, use default padding.  */\n+  return !BYTES_BIG_ENDIAN;\n+}\n+\n+\n \f\n /* Print a symbolic form of X to the debug file, F.  */\n static void"}, {"sha": "61ff2133c5f72262666e8f4dfb111a7620e6e0d7", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866af8a90915d8ed191ab7af616b3a186c28cae4/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866af8a90915d8ed191ab7af616b3a186c28cae4/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=866af8a90915d8ed191ab7af616b3a186c28cae4", "patch": "@@ -607,9 +607,10 @@ extern int arm_cpp_interwork;\n     }\n \n #define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE)\t\\\n-  if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n-      && GET_MODE_SIZE (MODE) < 4)      \t\\\n-    (MODE) = SImode;\t\t\t\t\\\n+  if ((GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n+       || GET_MODE_CLASS (MODE) == MODE_COMPLEX_INT)    \\\n+      && GET_MODE_SIZE (MODE) < 4)                      \\\n+    (MODE) = SImode;\t\t\t\t        \\\n \n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.  */\n@@ -1761,6 +1762,17 @@ typedef struct\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n   arm_function_arg (&(CUM), (MODE), (TYPE), (NAMED))\n \n+#define FUNCTION_ARG_PADDING(MODE, TYPE) \\\n+  (arm_pad_arg_upward (MODE, TYPE) ? upward : downward)\n+\n+#define BLOCK_REG_PADDING(MODE, TYPE, FIRST) \\\n+  (arm_pad_reg_upward (MODE, TYPE, FIRST) ? upward : downward)\n+\n+/* For AAPCS, padding should never be below the argument. For other ABIs,\n+ * mimic the default.  */\n+#define PAD_VARARGS_DOWN \\\n+  ((TARGET_AAPCS_BASED) ? 0 : BYTES_BIG_ENDIAN)\n+\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0."}]}