{"sha": "256e9fd21abe2cbebfb52396a47ecfd06412d144", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU2ZTlmZDIxYWJlMmNiZWJmYjUyMzk2YTQ3ZWNmZDA2NDEyZDE0NA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2002-09-17T13:03:40Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2002-09-17T13:03:40Z"}, "message": "machmode.def (V1DImode): New mode.\n\n* machmode.def (V1DImode): New mode.  A single element vector.\n* tree.h (TI_UV1DI_TYPE, TI_V1DI_TYPE): New tree_index enums.\n  (unsigned_V1DI_type_node, V1D1_type_node): New type nodes.\n* tree.c (build_common_tree_nodes_2): Build\n  unsigned_V1DI_type_node and V1D1_type_node.\n* c-common.c (c_common_type_for_mode): Return\n  unsigned_V1DI_type_node or V1D1_type_node for V1DImode.\n* rtl.c (class_narrowest_): Start integer vector nodes with V1DImode.\n\nFrom-SVN: r57248", "tree": {"sha": "fb359f00ee19f191ffc7a8b4452f5cac139d0ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb359f00ee19f191ffc7a8b4452f5cac139d0ac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/256e9fd21abe2cbebfb52396a47ecfd06412d144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/256e9fd21abe2cbebfb52396a47ecfd06412d144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/256e9fd21abe2cbebfb52396a47ecfd06412d144", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/256e9fd21abe2cbebfb52396a47ecfd06412d144/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "838c4534d4aebb1efb7d968d289606d6f1c89374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/838c4534d4aebb1efb7d968d289606d6f1c89374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/838c4534d4aebb1efb7d968d289606d6f1c89374"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "a7a68f494fe963a651d462f2a4d15619accd5938", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=256e9fd21abe2cbebfb52396a47ecfd06412d144", "patch": "@@ -1,3 +1,14 @@\n+2002-09-17  Nick Clifton  <nickc@redhat.com>\n+\n+\t* machmode.def (V1DImode): New mode.  A single element vector.\n+\t* tree.h (TI_UV1DI_TYPE, TI_V1DI_TYPE): New tree_index enums.\n+\t(unsigned_V1DI_type_node, V1D1_type_node): New type nodes.\n+\t* tree.c (build_common_tree_nodes_2): Build\n+\tunsigned_V1DI_type_node and V1D1_type_node.\n+\t* c-common.c (c_common_type_for_mode): Return\n+\tunsigned_V1DI_type_node or V1D1_type_node for V1DImode.\n+\t* rtl.c (class_narrowest_): Start integer vector nodes with V1DImode.\n+\n Tue Sep 17 13:40:13 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n \n \t* doc/objc.texi (Constant string objects): Extended documentation"}, {"sha": "0da5ce8e3a1aeb9878433b73f35c978f9f771985", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=256e9fd21abe2cbebfb52396a47ecfd06412d144", "patch": "@@ -2029,6 +2029,8 @@ c_common_type_for_mode (mode, unsignedp)\n       return unsignedp ? unsigned_V4HI_type_node : V4HI_type_node;\n     case V8QImode:\n       return unsignedp ? unsigned_V8QI_type_node : V8QI_type_node;\n+    case V1DImode:\n+      return unsignedp ? unsigned_V1DI_type_node : V1DI_type_node;\n     case V16SFmode:\n       return V16SF_type_node;\n     case V4SFmode:"}, {"sha": "5013e1f7cbe7820c2e19506d5412d083208cd5b9", "filename": "gcc/machmode.def", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=256e9fd21abe2cbebfb52396a47ecfd06412d144", "patch": "@@ -113,11 +113,10 @@ DEF_MACHMODE (CTImode, \"CTI\", MODE_COMPLEX_INT, BITS_PER_UNIT*32, 32, 16, COImod\n DEF_MACHMODE (COImode, \"COI\", MODE_COMPLEX_INT, BITS_PER_UNIT*64, 64, 32, VOIDmode, OImode)\n \n /* Vector modes.  */\n-/* There are no V1xx vector modes.  These are equivalent to normal\n-   scalar modes.  */\n /* The wider mode field for vectors follows in order of increasing bit\n    size with QI coming before HI, HI before SI, and SI before DI\n    within same bit sizes.  */\n+DEF_MACHMODE (V1DImode, \"V1DI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 8, V2QImode, DImode)\n DEF_MACHMODE (V2QImode, \"V2QI\", MODE_VECTOR_INT, BITS_PER_UNIT*2, 2, 1, V4QImode, QImode)\n DEF_MACHMODE (V2HImode, \"V2HI\", MODE_VECTOR_INT, BITS_PER_UNIT*4, 4, 2, V8QImode, HImode)\n DEF_MACHMODE (V2SImode, \"V2SI\", MODE_VECTOR_INT, BITS_PER_UNIT*8, 8, 4, V16QImode, SImode)"}, {"sha": "c8b36b77fb70e911455ad3bf7cd7f1fce28f3705", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=256e9fd21abe2cbebfb52396a47ecfd06412d144", "patch": "@@ -152,7 +152,7 @@ const enum machine_mode class_narrowest_mode[(int) MAX_MODE_CLASS] = {\n     /* MODE_CC */\t\tCCmode,\n     /* MODE_COMPLEX_INT */\tCQImode,\n     /* MODE_COMPLEX_FLOAT */\tQCmode,\n-    /* MODE_VECTOR_INT */\tV2QImode,\n+    /* MODE_VECTOR_INT */\tV1DImode,\n     /* MODE_VECTOR_FLOAT */\tV2SFmode\n };\n "}, {"sha": "83b8b5dea8af8fc9f5f3316082b56856f068f3de", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=256e9fd21abe2cbebfb52396a47ecfd06412d144", "patch": "@@ -4775,6 +4775,8 @@ build_common_tree_nodes_2 (short_double)\n     = make_vector (V8HImode, unsigned_intHI_type_node, 1);\n   unsigned_V16QI_type_node\n     = make_vector (V16QImode, unsigned_intQI_type_node, 1);\n+  unsigned_V1DI_type_node\n+    = make_vector (V1DImode, unsigned_intDI_type_node, 1);\n \n   V16SF_type_node = make_vector (V16SFmode, float_type_node, 0);\n   V4SF_type_node = make_vector (V4SFmode, float_type_node, 0);\n@@ -4787,6 +4789,7 @@ build_common_tree_nodes_2 (short_double)\n   V2SF_type_node = make_vector (V2SFmode, float_type_node, 0);\n   V2DF_type_node = make_vector (V2DFmode, double_type_node, 0);\n   V16QI_type_node = make_vector (V16QImode, intQI_type_node, 0);\n+  V1DI_type_node = make_vector (V1DImode, intDI_type_node, 0);\n }\n \n /* Returns a vector tree node given a vector mode, the inner type, and"}, {"sha": "f95f363792ec735fe19fc26eb54c933435653a39", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/256e9fd21abe2cbebfb52396a47ecfd06412d144/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=256e9fd21abe2cbebfb52396a47ecfd06412d144", "patch": "@@ -1968,6 +1968,7 @@ enum tree_index\n   TI_UV2SI_TYPE,\n   TI_UV2SF_TYPE,\n   TI_UV2DI_TYPE,\n+  TI_UV1DI_TYPE,\n   TI_UV16QI_TYPE,\n \n   TI_V4SF_TYPE,\n@@ -1980,6 +1981,7 @@ enum tree_index\n   TI_V2SF_TYPE,\n   TI_V2DF_TYPE,\n   TI_V2DI_TYPE,\n+  TI_V1DI_TYPE,\n   TI_V16QI_TYPE,\n \n   TI_MAIN_IDENTIFIER,\n@@ -2048,6 +2050,7 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define unsigned_V4HI_type_node\t\tglobal_trees[TI_UV4HI_TYPE]\n #define unsigned_V2SI_type_node\t\tglobal_trees[TI_UV2SI_TYPE]\n #define unsigned_V2DI_type_node\t\tglobal_trees[TI_UV2DI_TYPE]\n+#define unsigned_V1DI_type_node\t\tglobal_trees[TI_UV1DI_TYPE]\n \n #define V16QI_type_node\t\t\tglobal_trees[TI_V16QI_TYPE]\n #define V4SF_type_node\t\t\tglobal_trees[TI_V4SF_TYPE]\n@@ -2060,6 +2063,7 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define V2DI_type_node\t\t\tglobal_trees[TI_V2DI_TYPE]\n #define V2DF_type_node\t\t\tglobal_trees[TI_V2DF_TYPE]\n #define V16SF_type_node\t\t\tglobal_trees[TI_V16SF_TYPE]\n+#define V1DI_type_node\t\t\tglobal_trees[TI_V1DI_TYPE]\n \n /* An enumeration of the standard C integer types.  These must be\n    ordered so that shorter types appear before longer ones, and so"}]}