{"sha": "05d495014ecc0fe9951d1225af380f9a1f51058b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVkNDk1MDE0ZWNjMGZlOTk1MWQxMjI1YWYzODBmOWExZjUxMDU4Yg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-07-14T14:28:14Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-07-14T14:28:14Z"}, "message": "re PR target/7282 (unrecognizable insn)\n\n\tPR target/7282\n\t* config/rs6000/rs6000.md (floatsidf2): Enable for POWERPC64.\n\t(floatunssidf2): Likewise.\n\t(floatsidf_ppc64): New insn_and_split.\n\t(floatunssidf_ppc64): Likewise.\n\nFrom-SVN: r55443", "tree": {"sha": "da1a7ebb16ea39951c5aa1bb3c40b3e7a54d7868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da1a7ebb16ea39951c5aa1bb3c40b3e7a54d7868"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05d495014ecc0fe9951d1225af380f9a1f51058b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d495014ecc0fe9951d1225af380f9a1f51058b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d495014ecc0fe9951d1225af380f9a1f51058b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d495014ecc0fe9951d1225af380f9a1f51058b/comments", "author": null, "committer": null, "parents": [{"sha": "839eb5a16007a9db790e47c701aee4e0e2ad4285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839eb5a16007a9db790e47c701aee4e0e2ad4285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839eb5a16007a9db790e47c701aee4e0e2ad4285"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "14440b5bfdeb0a68115042d5c67e857ed6ff16e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d495014ecc0fe9951d1225af380f9a1f51058b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d495014ecc0fe9951d1225af380f9a1f51058b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05d495014ecc0fe9951d1225af380f9a1f51058b", "patch": "@@ -1,3 +1,11 @@\n+2002-07-14  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR target/7282\n+\t* config/rs6000/rs6000.md (floatsidf2): Enable for POWERPC64.\n+\t(floatunssidf2): Likewise.\n+\t(floatsidf_ppc64): New insn_and_split.\n+\t(floatunssidf_ppc64): Likewise.\n+\n 2002-07-14  Andreas Jaeger  <aj@suse.de>\n \n \t* config.gcc (sh64): Remove unused"}, {"sha": "aa7cb3ab62367c793c41da7b6e47b8a61f3a0614", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d495014ecc0fe9951d1225af380f9a1f51058b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d495014ecc0fe9951d1225af380f9a1f51058b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=05d495014ecc0fe9951d1225af380f9a1f51058b", "patch": "@@ -5350,9 +5350,18 @@\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))\n \t      (clobber (match_dup 6))])]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\n {\n+  if (TARGET_POWERPC64)\n+    {\n+      rtx mem = assign_stack_temp (DImode, GET_MODE_SIZE (DImode), 0);\n+      rtx t1 = gen_reg_rtx (DImode);\n+      rtx t2 = gen_reg_rtx (DImode);\n+      emit_insn (gen_floatsidf_ppc64 (operands[0], operands[1], mem, t1, t2));\n+      DONE;\n+    }\n+\n   operands[2] = force_reg (SImode, GEN_INT (0x43300000));\n   operands[3] = force_reg (DFmode, CONST_DOUBLE_ATOF (\\\"4503601774854144\\\", DFmode));\n   operands[4] = assign_stack_temp (DFmode, GET_MODE_SIZE (DFmode), 0);\n@@ -5417,9 +5426,19 @@\n \t      (use (match_dup 3))\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))])]\n-  \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"TARGET_HARD_FLOAT\"\n   \"\n {\n+  if (TARGET_POWERPC64)\n+    {\n+      rtx mem = assign_stack_temp (DImode, GET_MODE_SIZE (DImode), 0);\n+      rtx t1 = gen_reg_rtx (DImode);\n+      rtx t2 = gen_reg_rtx (DImode);\n+      emit_insn (gen_floatunssidf_ppc64 (operands[0], operands[1], mem,\n+\t\t\t\t\t t1, t2));\n+      DONE;\n+    }\n+\n   operands[2] = force_reg (SImode, GEN_INT (0x43300000));\n   operands[3] = force_reg (DFmode, CONST_DOUBLE_ATOF (\\\"4503599627370496\\\", DFmode));\n   operands[4] = assign_stack_temp (DFmode, GET_MODE_SIZE (DFmode), 0);\n@@ -5535,6 +5554,36 @@\n   \"fcfid %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n+(define_insn_and_split \"floatsidf_ppc64\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"=o\"))\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))\n+   (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))]\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 3) (sign_extend:DI (match_dup 1)))\n+   (set (match_dup 2) (match_dup 3))\n+   (set (match_dup 4) (match_dup 2))\n+   (set (match_dup 0) (float:DF (match_dup 4)))]\n+  \"\")\n+\n+(define_insn_and_split \"floatunssidf_ppc64\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unsigned_float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"=o\"))\n+   (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))\n+   (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))]\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 3) (zero_extend:DI (match_dup 1)))\n+   (set (match_dup 2) (match_dup 3))\n+   (set (match_dup 4) (match_dup 2))\n+   (set (match_dup 0) (float:DF (match_dup 4)))]\n+  \"\")\n+\n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=*f\")\n \t(fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]"}]}