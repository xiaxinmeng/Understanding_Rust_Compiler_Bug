{"sha": "a33c028eb38268b5084ebc4cc17a1cb64b3a838b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMzYzAyOGViMzgyNjhiNTA4NGViYzRjYzE3YTFjYjY0YjNhODM4Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-10-27T08:11:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-10-27T08:11:57Z"}, "message": "ipa-cp.c (propagate_constants_across_call): If args are not available just drop everything to varying.\n\n\n\t* ipa-cp.c (propagate_constants_across_call): If args are not available\n\tjust drop everything to varying.\n\t(find_aggregate_values_for_callers_subset): Watch for missing\n\tedge summary.\n\t(find_more_scalar_values_for_callers_subs): Likewise.\n\t* ipa-prop.c (ipa_compute_jump_functions_for_edge,\n\tupdate_jump_functions_after_inlining, propagate_controlled_uses):\n\tWatch for missing summaries.\n\t(ipa_propagate_indirect_call_infos): Remove summary after propagation\n\tis finished.\n\t(ipa_write_node_info): Watch for missing summaries.\n\t(ipa_read_edge_info): Create new ref.\n\t(ipa_edge_args_sum_t): Add remove.\n\t(IPA_EDGE_REF_GET_CREATE): New macro.\n\t* ipa-fnsummary.c (evaluate_properties_for_edge): Watch for missing\n\tedge summary.\n\t(remap_edge_change_prob): Likewise.\n\nFrom-SVN: r277484", "tree": {"sha": "ec4950bbbb492e328ff374d375ea1b29cfecfcf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec4950bbbb492e328ff374d375ea1b29cfecfcf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a33c028eb38268b5084ebc4cc17a1cb64b3a838b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33c028eb38268b5084ebc4cc17a1cb64b3a838b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a33c028eb38268b5084ebc4cc17a1cb64b3a838b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/comments", "author": null, "committer": null, "parents": [{"sha": "a088d7b10f296dbd57bccbac1bfcf8abb207b034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a088d7b10f296dbd57bccbac1bfcf8abb207b034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a088d7b10f296dbd57bccbac1bfcf8abb207b034"}], "stats": {"total": 90, "additions": 74, "deletions": 16}, "files": [{"sha": "3bfbf1623ebd9c4090f9d101d1080991c2b77b18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a33c028eb38268b5084ebc4cc17a1cb64b3a838b", "patch": "@@ -1,3 +1,23 @@\n+2019-10-27  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-cp.c (propagate_constants_across_call): If args are not available\n+\tjust drop everything to varying.\n+\t(find_aggregate_values_for_callers_subset): Watch for missing\n+\tedge summary.\n+\t(find_more_scalar_values_for_callers_subs): Likewise.\n+\t* ipa-prop.c (ipa_compute_jump_functions_for_edge,\n+\tupdate_jump_functions_after_inlining, propagate_controlled_uses):\n+\tWatch for missing summaries.\n+\t(ipa_propagate_indirect_call_infos): Remove summary after propagation\n+\tis finished.\n+\t(ipa_write_node_info): Watch for missing summaries.\n+\t(ipa_read_edge_info): Create new ref.\n+\t(ipa_edge_args_sum_t): Add remove.\n+\t(IPA_EDGE_REF_GET_CREATE): New macro.\n+\t* ipa-fnsummary.c (evaluate_properties_for_edge): Watch for missing\n+\tedge summary.\n+\t(remap_edge_change_prob): Likewise.\n+\n 2019-10-27  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-transform.c (inline_call): update function summaries"}, {"sha": "23028e28a16bcbc4785b1a4b5ca86e959fc63716", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=a33c028eb38268b5084ebc4cc17a1cb64b3a838b", "patch": "@@ -2309,10 +2309,17 @@ propagate_constants_across_call (struct cgraph_edge *cs)\n   callee_info = IPA_NODE_REF (callee);\n \n   args = IPA_EDGE_REF (cs);\n-  args_count = ipa_get_cs_argument_count (args);\n   parms_count = ipa_get_param_count (callee_info);\n   if (parms_count == 0)\n     return false;\n+  if (!args)\n+    {\n+      for (i = 0; i < parms_count; i++)\n+\tret |= set_all_contains_variable (ipa_get_parm_lattices (callee_info,\n+\t\t\t\t\t\t\t\t i));\n+      return ret;\n+    }\n+  args_count = ipa_get_cs_argument_count (args);\n \n   /* If this call goes through a thunk we must not propagate to the first (0th)\n      parameter.  However, we might need to uncover a thunk from below a series\n@@ -4066,7 +4073,8 @@ find_more_scalar_values_for_callers_subset (struct cgraph_node *node,\n \t  if (IPA_NODE_REF (cs->caller)->node_dead)\n \t    continue;\n \n-\t  if (i >= ipa_get_cs_argument_count (IPA_EDGE_REF (cs))\n+\t  if (!IPA_EDGE_REF (cs)\n+\t      || i >= ipa_get_cs_argument_count (IPA_EDGE_REF (cs))\n \t      || (i == 0\n \t\t  && call_passes_through_thunk_p (cs)))\n \t    {\n@@ -4135,7 +4143,8 @@ find_more_contexts_for_caller_subset (cgraph_node *node,\n \n       FOR_EACH_VEC_ELT (callers, j, cs)\n \t{\n-\t  if (i >= ipa_get_cs_argument_count (IPA_EDGE_REF (cs)))\n+\t  if (!IPA_EDGE_REF (cs)\n+\t      || i >= ipa_get_cs_argument_count (IPA_EDGE_REF (cs)))\n \t    return;\n \t  ipa_jump_func *jfunc = ipa_get_ith_jump_func (IPA_EDGE_REF (cs),\n \t\t\t\t\t\t\t    i);\n@@ -4451,6 +4460,11 @@ find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n \n   FOR_EACH_VEC_ELT (callers, j, cs)\n     {\n+      if (!IPA_EDGE_REF (cs))\n+\t{\n+\t  count = 0;\n+\t  break;\n+\t}\n       int c = ipa_get_cs_argument_count (IPA_EDGE_REF (cs));\n       if (c < count)\n \tcount = c;"}, {"sha": "ce384dfc9f0c26f032f971639eefb66171533a34", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=a33c028eb38268b5084ebc4cc17a1cb64b3a838b", "patch": "@@ -452,6 +452,7 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n   class ipa_fn_summary *info = ipa_fn_summaries->get (callee);\n   vec<tree> known_vals = vNULL;\n   vec<ipa_agg_jump_function_p> known_aggs = vNULL;\n+  class ipa_edge_args *args;\n \n   if (clause_ptr)\n     *clause_ptr = inline_p ? 0 : 1 << predicate::not_inlined_condition;\n@@ -462,10 +463,10 @@ evaluate_properties_for_edge (struct cgraph_edge *e, bool inline_p,\n \n   if (ipa_node_params_sum\n       && !e->call_stmt_cannot_inline_p\n-      && ((clause_ptr && info->conds) || known_vals_ptr || known_contexts_ptr))\n+      && ((clause_ptr && info->conds) || known_vals_ptr || known_contexts_ptr)\n+      && (args = IPA_EDGE_REF (e)) != NULL)\n     {\n       class ipa_node_params *caller_parms_info, *callee_pi;\n-      class ipa_edge_args *args = IPA_EDGE_REF (e);\n       class ipa_call_summary *es = ipa_call_summaries->get (e);\n       int i, count = ipa_get_cs_argument_count (args);\n \n@@ -3160,6 +3161,8 @@ remap_edge_change_prob (struct cgraph_edge *inlined_edge,\n     {\n       int i;\n       class ipa_edge_args *args = IPA_EDGE_REF (edge);\n+      if (!args)\n+\treturn;\n       class ipa_call_summary *es = ipa_call_summaries->get (edge);\n       class ipa_call_summary *inlined_es\n \t= ipa_call_summaries->get (inlined_edge);"}, {"sha": "1290a2f39433598337b079d75556aa578dcf66cb", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=a33c028eb38268b5084ebc4cc17a1cb64b3a838b", "patch": "@@ -1854,7 +1854,7 @@ ipa_compute_jump_functions_for_edge (struct ipa_func_body_info *fbi,\n \t\t\t\t     struct cgraph_edge *cs)\n {\n   class ipa_node_params *info = IPA_NODE_REF (cs->caller);\n-  class ipa_edge_args *args = IPA_EDGE_REF (cs);\n+  class ipa_edge_args *args = IPA_EDGE_REF_GET_CREATE (cs);\n   gcall *call = cs->call_stmt;\n   int n, arg_num = gimple_call_num_args (call);\n   bool useful_context = false;\n@@ -2652,6 +2652,8 @@ update_jump_functions_after_inlining (struct cgraph_edge *cs,\n {\n   class ipa_edge_args *top = IPA_EDGE_REF (cs);\n   class ipa_edge_args *args = IPA_EDGE_REF (e);\n+  if (!args)\n+    return;\n   int count = ipa_get_cs_argument_count (args);\n   int i;\n \n@@ -3575,6 +3577,8 @@ static void\n propagate_controlled_uses (struct cgraph_edge *cs)\n {\n   class ipa_edge_args *args = IPA_EDGE_REF (cs);\n+  if (!args)\n+    return;\n   struct cgraph_node *new_root = cs->caller->global.inlined_to\n     ? cs->caller->global.inlined_to : cs->caller;\n   class ipa_node_params *new_root_info = IPA_NODE_REF (new_root);\n@@ -3702,6 +3706,7 @@ ipa_propagate_indirect_call_infos (struct cgraph_edge *cs,\n \n   propagate_controlled_uses (cs);\n   changed = propagate_info_to_inlined_callees (cs, cs->callee, new_edges);\n+  ipa_edge_args_sum->remove (cs);\n \n   return changed;\n }\n@@ -4380,6 +4385,12 @@ ipa_write_node_info (struct output_block *ob, struct cgraph_node *node)\n     {\n       class ipa_edge_args *args = IPA_EDGE_REF (e);\n \n+      if (!args)\n+\t{\n+\t  streamer_write_uhwi (ob, 0);\n+\t  continue;\n+\t}\n+\n       streamer_write_uhwi (ob,\n \t\t\t   ipa_get_cs_argument_count (args) * 2\n \t\t\t   + (args->polymorphic_call_contexts != NULL));\n@@ -4393,15 +4404,19 @@ ipa_write_node_info (struct output_block *ob, struct cgraph_node *node)\n   for (e = node->indirect_calls; e; e = e->next_callee)\n     {\n       class ipa_edge_args *args = IPA_EDGE_REF (e);\n-\n-      streamer_write_uhwi (ob,\n-\t\t\t   ipa_get_cs_argument_count (args) * 2\n-  \t\t\t   + (args->polymorphic_call_contexts != NULL));\n-      for (j = 0; j < ipa_get_cs_argument_count (args); j++)\n+      if (!args)\n+\tstreamer_write_uhwi (ob, 0);\n+      else\n \t{\n-\t  ipa_write_jump_function (ob, ipa_get_ith_jump_func (args, j));\n-\t  if (args->polymorphic_call_contexts != NULL)\n-\t    ipa_get_ith_polymorhic_call_context (args, j)->stream_out (ob);\n+\t  streamer_write_uhwi (ob,\n+\t\t\t       ipa_get_cs_argument_count (args) * 2\n+\t\t\t       + (args->polymorphic_call_contexts != NULL));\n+\t  for (j = 0; j < ipa_get_cs_argument_count (args); j++)\n+\t    {\n+\t      ipa_write_jump_function (ob, ipa_get_ith_jump_func (args, j));\n+\t      if (args->polymorphic_call_contexts != NULL)\n+\t\tipa_get_ith_polymorhic_call_context (args, j)->stream_out (ob);\n+\t    }\n \t}\n       ipa_write_indirect_edge_info (ob, e);\n     }\n@@ -4422,7 +4437,7 @@ ipa_read_edge_info (class lto_input_block *ib,\n     return;\n   if (prevails && e->possibly_call_in_translation_unit_p ())\n     {\n-      class ipa_edge_args *args = IPA_EDGE_REF (e);\n+      class ipa_edge_args *args = IPA_EDGE_REF_GET_CREATE (e);\n       vec_safe_grow_cleared (args->jump_functions, count);\n       if (contexts_computed)\n \tvec_safe_grow_cleared (args->polymorphic_call_contexts, count);"}, {"sha": "6811ed765df1e0ca3a67e9fd8126c6b43b5aad93", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33c028eb38268b5084ebc4cc17a1cb64b3a838b/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=a33c028eb38268b5084ebc4cc17a1cb64b3a838b", "patch": "@@ -640,6 +640,11 @@ class GTY((user)) ipa_edge_args_sum_t : public call_summary <ipa_edge_args *>\n   ipa_edge_args_sum_t (symbol_table *table, bool ggc)\n     : call_summary<ipa_edge_args *> (table, ggc) { }\n \n+  void remove (cgraph_edge *edge)\n+  {\n+    call_summary <ipa_edge_args *>::remove (edge);\n+  }\n+\n   /* Hook that is called by summary when an edge is removed.  */\n   virtual void remove (cgraph_edge *cs, ipa_edge_args *args);\n   /* Hook that is called by summary when an edge is duplicated.  */\n@@ -679,7 +684,8 @@ extern GTY(()) function_summary <ipcp_transformation *> *ipcp_transformation_sum\n /* Return the associated parameter/argument info corresponding to the given\n    node/edge.  */\n #define IPA_NODE_REF(NODE) (ipa_node_params_sum->get_create (NODE))\n-#define IPA_EDGE_REF(EDGE) (ipa_edge_args_sum->get_create (EDGE))\n+#define IPA_EDGE_REF(EDGE) (ipa_edge_args_sum->get (EDGE))\n+#define IPA_EDGE_REF_GET_CREATE(EDGE) (ipa_edge_args_sum->get_create (EDGE))\n /* This macro checks validity of index returned by\n    ipa_get_param_decl_index function.  */\n #define IS_VALID_JUMP_FUNC_INDEX(I) ((I) != -1)"}]}