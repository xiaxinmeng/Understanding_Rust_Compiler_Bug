{"sha": "1b8135a411e5ba31ce74b9645481a50c34d7f3d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI4MTM1YTQxMWU1YmEzMWNlNzRiOTY0NTQ4MWE1MGMzNGQ3ZjNkNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-17T07:34:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-17T07:34:34Z"}, "message": "varasm.c (default_encode_section_info): Don't set SYMBOL_FLAG_EXTERNAL if not TREE_PUBLIC.\n\n        * varasm.c (default_encode_section_info): Don't set\n        SYMBOL_FLAG_EXTERNAL if not TREE_PUBLIC.\n        * config/i370/i370.c (i370_encode_section_info): Remove.\n        * config/i370/i370.h (CONSTANT_ADDRESS_P): Use SYMBOL_REF_EXTERNAL_P.\n        (PRINT_OPERAND, PRINT_OPERAND_ADDRESS): Likewise.\n        * config/i370/i370.md (movsi): Likewise.\n\n        * config/i370/t-i370: Add missing backslash.\n\nFrom-SVN: r65728", "tree": {"sha": "0630a6f75e02a0384bb1d5521d6742074c9df781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0630a6f75e02a0384bb1d5521d6742074c9df781"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b8135a411e5ba31ce74b9645481a50c34d7f3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b8135a411e5ba31ce74b9645481a50c34d7f3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b8135a411e5ba31ce74b9645481a50c34d7f3d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/comments", "author": null, "committer": null, "parents": [{"sha": "6d7fe8b31ff02652f8090903eb5882587b681a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7fe8b31ff02652f8090903eb5882587b681a1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7fe8b31ff02652f8090903eb5882587b681a1d"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "5c3200316768a67dde743aa941f1d29031144666", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b8135a411e5ba31ce74b9645481a50c34d7f3d5", "patch": "@@ -1,3 +1,14 @@\n+2003-04-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* varasm.c (default_encode_section_info): Don't set \n+\tSYMBOL_FLAG_EXTERNAL if not TREE_PUBLIC.\n+\t* config/i370/i370.c (i370_encode_section_info): Remove.\n+\t* config/i370/i370.h (CONSTANT_ADDRESS_P): Use SYMBOL_REF_EXTERNAL_P.\n+\t(PRINT_OPERAND, PRINT_OPERAND_ADDRESS): Likewise.\n+\t* config/i370/i370.md (movsi): Likewise.\n+\n+\t* config/i370/t-i370: Add missing backslash.\n+\n 2003-04-17  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* doc/invoke.texi (inline-limit): Fix pasto."}, {"sha": "d5ab6ce303dab61a68cfa75047b0ccf6d196fe1f", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=1b8135a411e5ba31ce74b9645481a50c34d7f3d5", "patch": "@@ -110,7 +110,6 @@ static void i370_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #ifdef LONGEXTERNAL\n static int mvs_hash_alias PARAMS ((const char *));\n #endif\n-static void i370_encode_section_info PARAMS ((tree, int));\n static void i370_internal_label PARAMS ((FILE *, const char *, unsigned long));\n static bool i370_rtx_costs PARAMS ((rtx, int, int, int *));\n \n@@ -314,8 +313,6 @@ static const unsigned char ebcasc[256] =\n #define TARGET_ASM_FUNCTION_PROLOGUE i370_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE i370_output_function_epilogue\n-#undef TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO i370_encode_section_info\n #undef TARGET_ASM_INTERNAL_LABEL\n #define  TARGET_ASM_INTERNAL_LABEL i370_internal_label\n #undef TARGET_RTX_COSTS\n@@ -1594,17 +1591,6 @@ i370_output_function_epilogue (file, l)\n     fprintf (file, \"\\tDC\\tA(PG%d)\\n\", i);\n }\n \n-/* Mark external references.  */\n-\n-static void\n-i370_encode_section_info (decl, first)\n-     tree decl;\n-     int first ATTRIBUTE_UNUSED;\n-{\n-  if (DECL_EXTERNAL (decl) && TREE_PUBLIC (decl))\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n-}\n-\n static void\n i370_internal_label (stream, prefix, labelno)\n      FILE *stream;"}, {"sha": "a3db42e63caa4914a90b66fedb51cc6156269884", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=1b8135a411e5ba31ce74b9645481a50c34d7f3d5", "patch": "@@ -700,7 +700,7 @@ enum reg_class\n \t  && GET_CODE (XEXP (XEXP (X, 0), 0)) == LABEL_REF)\t\t\\\n   || (GET_CODE (X) == CONST\t\t\t\t\t\t\\\n \t  && GET_CODE (XEXP (XEXP (X, 0), 0)) == SYMBOL_REF\t\t\\\n-\t  && !SYMBOL_REF_FLAG (XEXP (XEXP (X, 0), 0))))\n+\t  && !SYMBOL_REF_EXTERNAL_P (XEXP (XEXP (X, 0), 0))))\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n@@ -1266,7 +1266,7 @@ enum reg_class\n       case SYMBOL_REF:\t\t\t\t\t\t\t\\\n       case LABEL_REF:\t\t\t\t\t\t\t\\\n \tmvs_page_lit += 4;\t\t\t\t\t\t\\\n-\tif (SYMBOL_REF_FLAG (XV)) fprintf (FILE, \"=V(\");\t\t\\\n+\tif (SYMBOL_REF_EXTERNAL_P (XV)) fprintf (FILE, \"=V(\");\t\t\\\n \telse                      fprintf (FILE, \"=A(\");\t\t\\\n \toutput_addr_const (FILE, XV);\t\t\t\t\t\\\n \tfprintf (FILE, \")\");\t\t\t\t\t\t\\\n@@ -1356,7 +1356,7 @@ enum reg_class\n \t   && GET_CODE (XEXP (XEXP (XV, 0), 0)) == SYMBOL_REF)\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    mvs_page_lit += 4;\t\t\t\t\t\t\\\n-\t    if (SYMBOL_REF_FLAG (XEXP (XEXP (XV, 0), 0)))\t\t\\\n+\t    if (SYMBOL_REF_EXTERNAL_P (XEXP (XEXP (XV, 0), 0)))\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n \t\tfprintf (FILE, \"=V(\");\t\t\t\t\t\\\n \t\tASM_OUTPUT_LABELREF (FILE,\t\t\t\t\\\n@@ -1467,7 +1467,7 @@ enum reg_class\n \tbreak;\t\t\t\t\t\t\t\t\\\n       default:\t\t\t\t\t\t\t\t\\\n \tmvs_page_lit += 4;\t\t\t\t\t\t\\\n-\tif (SYMBOL_REF_FLAG (ADDR)) fprintf (FILE, \"=V(\");\t\t\\\n+\tif (SYMBOL_REF_EXTERNAL_P (ADDR)) fprintf (FILE, \"=V(\");\t\\\n \telse                        fprintf (FILE, \"=A(\");\t\t\\\n \toutput_addr_const (FILE, ADDR);\t\t\t\t\t\\\n \tfprintf (FILE, \")\");\t\t\t\t\t\t\\\n@@ -1560,7 +1560,7 @@ enum reg_class\n       case SYMBOL_REF:\t\t\t\t\t\t\t\\\n       case LABEL_REF:\t\t\t\t\t\t\t\\\n \tmvs_page_lit += 4;\t\t\t\t\t\t\\\n-        if (SYMBOL_REF_FLAG (XV)) fprintf (FILE, \"=V(\");                \\\n+        if (SYMBOL_REF_EXTERNAL_P (XV)) fprintf (FILE, \"=V(\");\t\t\\\n         else                      fprintf (FILE, \"=A(\");                \\\n         output_addr_const (FILE, XV);                                   \\\n         fprintf (FILE, \")\");                                            \\\n@@ -1650,7 +1650,7 @@ enum reg_class\n \t   && GET_CODE (XEXP (XEXP (XV, 0), 0)) == SYMBOL_REF)\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    mvs_page_lit += 4;\t\t\t\t\t\t\\\n-\t    if (SYMBOL_REF_FLAG (XEXP (XEXP (XV, 0), 0)))\t\t\\\n+\t    if (SYMBOL_REF_EXTERNAL_P (XEXP (XEXP (XV, 0), 0)))\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n \t\tfprintf (FILE, \"=V(\");\t\t\t\t\t\\\n \t\tASM_OUTPUT_LABELREF (FILE,\t\t\t\t\\\n@@ -1765,7 +1765,7 @@ abort(); \\\n \tbreak;\t\t\t\t\t\t\t\t\\\n       default:\t\t\t\t\t\t\t\t\\\n \tmvs_page_lit += 4;\t\t\t\t\t\t\\\n-\tif (SYMBOL_REF_FLAG (ADDR)) fprintf (FILE, \"=V(\");\t\t\\\n+\tif (SYMBOL_REF_EXTERNAL_P (ADDR)) fprintf (FILE, \"=V(\");\t\\\n \telse                        fprintf (FILE, \"=A(\");\t\t\\\n \toutput_addr_const (FILE, ADDR);\t\t\t\t\t\\\n \tfprintf (FILE, \")\");\t\t\t\t\t\t\\"}, {"sha": "5bdbec80abe0d96dcd3306e856c8b77bbadea486", "filename": "gcc/config/i370/i370.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2Fconfig%2Fi370%2Fi370.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2Fconfig%2Fi370%2Fi370.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.md?ref=1b8135a411e5ba31ce74b9645481a50c34d7f3d5", "patch": "@@ -855,15 +855,15 @@ check_label_emit ();\n ;  op0 = operands[0];\n ;  if (GET_CODE (op0) == CONST\n ;      && GET_CODE (XEXP (XEXP (op0, 0), 0)) == SYMBOL_REF\n-;      && SYMBOL_REF_FLAG (XEXP (XEXP (op0, 0), 0)))\n+;      && SYMBOL_REF_EXTERNAL_P (XEXP (XEXP (op0, 0), 0)))\n ;    {\n ;      op0 = gen_rtx_MEM (SImode, copy_to_mode_reg (SImode, XEXP (op0, 0)));\n ;    }\n ;\n ;  op1 = operands[1];\n ;  if (GET_CODE (op1) == CONST\n ;      && GET_CODE (XEXP (XEXP (op1, 0), 0)) == SYMBOL_REF\n-;      && SYMBOL_REF_FLAG (XEXP (XEXP (op1, 0), 0)))\n+;      && SYMBOL_REF_EXTERNAL_P (XEXP (XEXP (op1, 0), 0)))\n ;    {\n ;      op1 = gen_rtx_MEM (SImode, copy_to_mode_reg (SImode, XEXP (op1, 0)));\n ;    }"}, {"sha": "fccd1632fde40e63f20385f2e5eb2ab18aec7a02", "filename": "gcc/config/i370/t-i370", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2Fconfig%2Fi370%2Ft-i370", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2Fconfig%2Fi370%2Ft-i370", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Ft-i370?ref=1b8135a411e5ba31ce74b9645481a50c34d7f3d5", "patch": "@@ -1,3 +1,3 @@\n-i370-c.o: $(srcdir)/config/i370/i370-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\n+i370-c.o: $(srcdir)/config/i370/i370-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(TREE_H) toplev.h $(CPPLIB_H) c-pragma.h $(TM_P_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/i370/i370-c.c"}, {"sha": "a5174501b684aa71b728703adc01d4378194d72e", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b8135a411e5ba31ce74b9645481a50c34d7f3d5/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1b8135a411e5ba31ce74b9645481a50c34d7f3d5", "patch": "@@ -5371,7 +5371,10 @@ default_encode_section_info (decl, first)\n     flags |= SYMBOL_FLAG_SMALL;\n   if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL (decl))\n     flags |= decl_tls_model (decl) << SYMBOL_FLAG_TLS_SHIFT;\n-  if (DECL_P (decl) && DECL_EXTERNAL (decl))\n+  /* ??? Why is DECL_EXTERNAL ever set for non-PUBLIC names?  Without\n+     being PUBLIC, the thing *must* be defined in this translation unit.\n+     Prevent this buglet from being propagated into rtl code as well.  */\n+  if (DECL_P (decl) && DECL_EXTERNAL (decl) && TREE_PUBLIC (decl))\n     flags |= SYMBOL_FLAG_EXTERNAL;\n \n   SYMBOL_REF_FLAGS (symbol) = flags;"}]}