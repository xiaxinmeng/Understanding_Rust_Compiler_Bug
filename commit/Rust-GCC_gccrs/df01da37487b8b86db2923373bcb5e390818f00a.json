{"sha": "df01da37487b8b86db2923373bcb5e390818f00a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwMWRhMzc0ODdiOGI4NmRiMjkyMzM3M2JjYjVlMzkwODE4ZjAwYQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-05-17T14:25:07Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-05-17T14:25:07Z"}, "message": "aix.h (TARGET_ALTIVEC_VRSAVE): Delete.\n\n        * config/rs6000/aix.h (TARGET_ALTIVEC_VRSAVE): Delete.\n        * config/rs6000/rs6000.c (rs6000_explicit_options): Add\n        aix_struct_ret.\n        (rs6000_override_options): Do not protect TARGET_ALTIVEC_VRSAVE.\n        Modify aix_struct_return variable, not target_flags.\n        (rs6000_handle_option): Do not protect TARGET_ALTIVEC_VRSAVE.\n        (rs6000_return_in_memory): Test aix_struct_return.\n        * config/rs6000/rs6000.opt (maix-struct-return): Convert to\n        independent variable.  Report mxl-compat.\n\nFrom-SVN: r99831", "tree": {"sha": "e21626761173dcc9165bd0d08d155022163c5414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e21626761173dcc9165bd0d08d155022163c5414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df01da37487b8b86db2923373bcb5e390818f00a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df01da37487b8b86db2923373bcb5e390818f00a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df01da37487b8b86db2923373bcb5e390818f00a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df01da37487b8b86db2923373bcb5e390818f00a/comments", "author": null, "committer": null, "parents": [{"sha": "4193ce7321de2901953f96ee5330984a3f0b558d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4193ce7321de2901953f96ee5330984a3f0b558d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4193ce7321de2901953f96ee5330984a3f0b558d"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "d8ac205ca8d5545dda6734e5f02827b268c4302f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df01da37487b8b86db2923373bcb5e390818f00a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df01da37487b8b86db2923373bcb5e390818f00a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df01da37487b8b86db2923373bcb5e390818f00a", "patch": "@@ -1,3 +1,15 @@\n+2005-05-17  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/aix.h (TARGET_ALTIVEC_VRSAVE): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_explicit_options): Add\n+\taix_struct_ret.\n+\t(rs6000_override_options): Do not protect TARGET_ALTIVEC_VRSAVE.\n+\tModify aix_struct_return variable, not target_flags.\n+\t(rs6000_handle_option): Do not protect TARGET_ALTIVEC_VRSAVE.\n+\t(rs6000_return_in_memory): Test aix_struct_return.\n+\t* config/rs6000/rs6000.opt (maix-struct-return): Convert to\n+\tindependent variable.  Report mxl-compat.\n+\n 2005-05-17  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.md (eh_return): Add missing DONE."}, {"sha": "475f1432e06de57a2b6b3d40d9c5560523340232", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df01da37487b8b86db2923373bcb5e390818f00a/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df01da37487b8b86db2923373bcb5e390818f00a/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=df01da37487b8b86db2923373bcb5e390818f00a", "patch": "@@ -38,8 +38,6 @@\n #define TARGET_ALTIVEC 0\n #undef  TARGET_ALTIVEC_ABI\n #define TARGET_ALTIVEC_ABI 0\n-#undef  TARGET_ALTIVEC_VRSAVE\n-#define TARGET_ALTIVEC_VRSAVE 0\n \n /* The AIX linker will discard static constructors in object files before\n    collect has a chance to see them, so scan the object files directly.  */"}, {"sha": "bcf38e1aa3afba90295ba6025790bcce79ecf78f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df01da37487b8b86db2923373bcb5e390818f00a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df01da37487b8b86db2923373bcb5e390818f00a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=df01da37487b8b86db2923373bcb5e390818f00a", "patch": "@@ -226,6 +226,7 @@ int rs6000_alignment_flags;\n \n /* True for any options that were explicitly set.  */\n struct {\n+  bool aix_struct_ret;\t\t/* True if -maix-struct-ret was used.  */\n   bool alignment;\t\t/* True if -malign- was used.  */\n   bool abi;\t\t\t/* True if -mabi= was used.  */\n   bool spe;\t\t\t/* True if -mspe= was used.  */\n@@ -1252,9 +1253,7 @@ rs6000_override_options (const char *default_cpu)\n   if (TARGET_ELF && TARGET_64BIT)\n     {\n       rs6000_altivec_abi = 1;\n-#if TARGET_ALTIVEC_VRSAVE != 0\n       TARGET_ALTIVEC_VRSAVE = 1;\n-#endif\n     }\n \n   /* Set the Darwin64 ABI as default for 64-bit Darwin.  */\n@@ -1357,16 +1356,11 @@ rs6000_override_options (const char *default_cpu)\n     memcpy (rs6000_reg_names, alt_reg_names, sizeof (rs6000_reg_names));\n #endif\n \n-  /* Set TARGET_AIX_STRUCT_RET last, after the ABI is determined.\n+  /* Set aix_struct_return last, after the ABI is determined.\n      If -maix-struct-return or -msvr4-struct-return was explicitly\n      used, don't override with the ABI default.  */\n-  if ((target_flags_explicit & MASK_AIX_STRUCT_RET) == 0)\n-    {\n-      if (DEFAULT_ABI == ABI_V4 && !DRAFT_V4_STRUCT_RET)\n-\ttarget_flags = (target_flags & ~MASK_AIX_STRUCT_RET);\n-      else\n-\ttarget_flags |= MASK_AIX_STRUCT_RET;\n-    }\n+  if (!rs6000_explicit_options.aix_struct_ret)\n+    aix_struct_return = (DEFAULT_ABI != ABI_V4 || DRAFT_V4_STRUCT_RET);\n \n   if (TARGET_LONG_DOUBLE_128\n       && (DEFAULT_ABI == ABI_AIX || DEFAULT_ABI == ABI_DARWIN))\n@@ -1639,11 +1633,14 @@ rs6000_handle_option (size_t code, const char *arg, int value)\n \t}\n       break;\n \n-#if TARGET_ALTIVEC_VRSAVE != 0\n+    case OPT_maix_struct_return:\n+    case OPT_msvr4_struct_return:\n+      rs6000_explicit_options.aix_struct_ret = true;\n+      break;\n+\n     case OPT_mvrsave_:\n       rs6000_parse_yes_no_option (\"vrsave\", arg, &(TARGET_ALTIVEC_VRSAVE));\n       break;\n-#endif\n \n     case OPT_misel_:\n       rs6000_explicit_options.isel = true;\n@@ -3899,7 +3896,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n    returned in memory.  The Darwin ABI does the same.  The SVR4 ABI\n    specifies that structures <= 8 bytes are returned in r3/r4, but a\n    draft put them in memory, and GCC used to implement the draft\n-   instead of the final standard.  Therefore, TARGET_AIX_STRUCT_RET\n+   instead of the final standard.  Therefore, aix_struct_return\n    controls this instead of DEFAULT_ABI; V.4 targets needing backward\n    compatibility can change DRAFT_V4_STRUCT_RET to override the\n    default, and -m switches get the final word.  See\n@@ -3935,7 +3932,7 @@ rs6000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n     }\n \n   if (AGGREGATE_TYPE_P (type)\n-      && (TARGET_AIX_STRUCT_RET\n+      && (aix_struct_return\n \t  || (unsigned HOST_WIDE_INT) int_size_in_bytes (type) > 8))\n     return true;\n "}, {"sha": "84ceba0701218af77072bfe3436437c9e71633dc", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df01da37487b8b86db2923373bcb5e390818f00a/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df01da37487b8b86db2923373bcb5e390818f00a/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=df01da37487b8b86db2923373bcb5e390818f00a", "patch": "@@ -112,15 +112,15 @@ msched-epilog\n Target Undocumented Mask(SCHED_PROLOG) MaskExists\n \n maix-struct-return\n-Target Report Mask(AIX_STRUCT_RET)\n+Target Report RejectNegative Var(aix_struct_return)\n Return all structures in memory (AIX default)\n \n msvr4-struct-return\n-Target Report InverseMask(AIX_STRUCT_RET)\n+Target Report RejectNegative Var(aix_struct_return,0) VarExists\n Return small structures in registers (SVR4 default)\n \n mxl-compat\n-Target Var(TARGET_XL_COMPAT)\n+Target Report Var(TARGET_XL_COMPAT)\n Conform more closely to IBM XLC semantics\n \n mno-fp-in-toc"}]}