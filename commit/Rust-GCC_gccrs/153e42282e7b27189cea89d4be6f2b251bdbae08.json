{"sha": "153e42282e7b27189cea89d4be6f2b251bdbae08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUzZTQyMjgyZTdiMjcxODljZWE4OWQ0YmU2ZjJiMjUxYmRiYWUwOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:46:24Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:46:24Z"}, "message": "Change use to type-based pool allocator in\n\n\t* tree-ssa-reassoc.c (add_to_ops_vec): Use new type-based pool allocator.\n\t(add_repeat_to_ops_vec): Likewise.\n\t(get_ops): Likewise.\n\t(maybe_optimize_range_tests): Likewise.\n\t(init_reassoc): Likewise.\n\t(fini_reassoc): Likewise.\n\nFrom-SVN: r223964", "tree": {"sha": "8eba8f59d81cfaf564e75c3a81a62cc49ed13bc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eba8f59d81cfaf564e75c3a81a62cc49ed13bc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/153e42282e7b27189cea89d4be6f2b251bdbae08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/153e42282e7b27189cea89d4be6f2b251bdbae08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/153e42282e7b27189cea89d4be6f2b251bdbae08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/153e42282e7b27189cea89d4be6f2b251bdbae08/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "971540bd153e6dede58c6c9e26465338807623a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971540bd153e6dede58c6c9e26465338807623a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/971540bd153e6dede58c6c9e26465338807623a5"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "0ba22d658bdb945d637786de5f4d1591c2736aed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/153e42282e7b27189cea89d4be6f2b251bdbae08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/153e42282e7b27189cea89d4be6f2b251bdbae08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=153e42282e7b27189cea89d4be6f2b251bdbae08", "patch": "@@ -1,3 +1,12 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-ssa-reassoc.c (add_to_ops_vec): Use new type-based pool allocator.\n+\t(add_repeat_to_ops_vec): Likewise.\n+\t(get_ops): Likewise.\n+\t(maybe_optimize_range_tests): Likewise.\n+\t(init_reassoc): Likewise.\n+\t(fini_reassoc): Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* tree-ssa-pre.c (get_or_alloc_expr_for_name): Use new type-based pool allocator."}, {"sha": "367f0eb93e1228c06a38174db4207ec91e62e0a4", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/153e42282e7b27189cea89d4be6f2b251bdbae08/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/153e42282e7b27189cea89d4be6f2b251bdbae08/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=153e42282e7b27189cea89d4be6f2b251bdbae08", "patch": "@@ -235,7 +235,8 @@ typedef struct operand_entry\n   unsigned int count;\n } *operand_entry_t;\n \n-static alloc_pool operand_entry_pool;\n+static pool_allocator<operand_entry> operand_entry_pool (\"operand entry pool\",\n+\t\t\t\t\t\t\t 30);\n \n /* This is used to assign a unique ID to each struct operand_entry\n    so that qsort results are identical on different hosts.  */\n@@ -592,7 +593,7 @@ sort_by_operand_rank (const void *pa, const void *pb)\n static void\n add_to_ops_vec (vec<operand_entry_t> *ops, tree op)\n {\n-  operand_entry_t oe = (operand_entry_t) pool_alloc (operand_entry_pool);\n+  operand_entry_t oe = operand_entry_pool.allocate ();\n \n   oe->op = op;\n   oe->rank = get_rank (op);\n@@ -608,7 +609,7 @@ static void\n add_repeat_to_ops_vec (vec<operand_entry_t> *ops, tree op,\n \t\t       HOST_WIDE_INT repeat)\n {\n-  operand_entry_t oe = (operand_entry_t) pool_alloc (operand_entry_pool);\n+  operand_entry_t oe = operand_entry_pool.allocate ();\n \n   oe->op = op;\n   oe->rank = get_rank (op);\n@@ -2963,7 +2964,7 @@ get_ops (tree var, enum tree_code code, vec<operand_entry_t> *ops,\n \t&& !get_ops (rhs[i], code, ops, loop)\n \t&& has_single_use (rhs[i]))\n       {\n-\toperand_entry_t oe = (operand_entry_t) pool_alloc (operand_entry_pool);\n+\toperand_entry_t oe = operand_entry_pool.allocate ();\n \n \toe->op = rhs[i];\n \toe->rank = code;\n@@ -3196,8 +3197,7 @@ maybe_optimize_range_tests (gimple stmt)\n \t      && has_single_use (rhs))\n \t    {\n \t      /* Otherwise, push the _234 range test itself.  */\n-\t      operand_entry_t oe\n-\t\t= (operand_entry_t) pool_alloc (operand_entry_pool);\n+\t      operand_entry_t oe = operand_entry_pool.allocate ();\n \n \t      oe->op = rhs;\n \t      oe->rank = code;\n@@ -3229,8 +3229,7 @@ maybe_optimize_range_tests (gimple stmt)\n \t\t\t   loop_containing_stmt (stmt))))\n \t{\n \t  /* Or push the GIMPLE_COND stmt itself.  */\n-\t  operand_entry_t oe\n-\t    = (operand_entry_t) pool_alloc (operand_entry_pool);\n+\t  operand_entry_t oe = operand_entry_pool.allocate ();\n \n \t  oe->op = NULL;\n \t  oe->rank = (e->flags & EDGE_TRUE_VALUE)\n@@ -5008,8 +5007,6 @@ init_reassoc (void)\n \n   memset (&reassociate_stats, 0, sizeof (reassociate_stats));\n \n-  operand_entry_pool = create_alloc_pool (\"operand entry pool\",\n-\t\t\t\t\t  sizeof (struct operand_entry), 30);\n   next_operand_entry_id = 0;\n \n   /* Reverse RPO (Reverse Post Order) will give us something where\n@@ -5058,7 +5055,7 @@ fini_reassoc (void)\n \t\t\t    reassociate_stats.pows_created);\n \n   delete operand_rank;\n-  free_alloc_pool (operand_entry_pool);\n+  operand_entry_pool.release ();\n   free (bb_rank);\n   plus_negates.release ();\n   free_dominance_info (CDI_POST_DOMINATORS);"}]}