{"sha": "5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2NjBiZmY5YTJmYjFlNGNmNWY5MTRmYTg4MWFhMWRkMDEzOWMyMg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dan@cgsoftware.com", "date": "2001-07-11T16:11:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-07-11T16:11:47Z"}, "message": "gcse.c, [...]: s/free on sbitmap vectors/sbitmap_vector_free on sbitmap vectors/g\n\n        * gcse.c, lcm.c, sched-deps.c:\n        s/free on sbitmap vectors/sbitmap_vector_free on sbitmap vectors/g\n\n        * flow.c (flow_loops_find): Free dom if we found no loops, since\n        we aren't going to save it.\n\n        * lcm.c (pre_edge_rev_lcm): Free st_antin, st_antout when we are\n        done.\n\nFrom-SVN: r43938", "tree": {"sha": "9bf626f34eb8a1febc474bc44e63bc294db828ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bf626f34eb8a1febc474bc44e63bc294db828ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/comments", "author": null, "committer": null, "parents": [{"sha": "1a9485cf5f7866249a20fba3d68087295f3943ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9485cf5f7866249a20fba3d68087295f3943ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9485cf5f7866249a20fba3d68087295f3943ef"}], "stats": {"total": 140, "additions": 78, "deletions": 62}, "files": [{"sha": "ad18655f2c237f710164fac6243be3cd6f1a0e76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22", "patch": "@@ -1,3 +1,14 @@\n+2001-07-11  Daniel Berlin  <dan@cgsoftware.com>\n+\n+\t* gcse.c, lcm.c, sched-deps.c:\n+\ts/free on sbitmap vectors/sbitmap_vector_free on sbitmap vectors/g\n+\n+\t* flow.c (flow_loops_find): Free dom if we found no loops, since\n+\twe aren't going to save it.\n+\n+\t* lcm.c (pre_edge_rev_lcm): Free st_antin, st_antout when we are\n+\tdone.\n+\n Wed Jul 11 09:00:48 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* ssa-ccp.c (ssa_fast_dce): Free worklist when completed."}, {"sha": "ce8559c1a89b907b5e53b7fe9c1dd6159632f806", "filename": "gcc/flow.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22", "patch": "@@ -9017,6 +9017,10 @@ flow_loops_find (loops, flags)\n \n       sbitmap_free (headers);\n     }\n+  else\n+    {\n+      sbitmap_vector_free (dom);\n+    }\n \n   loops->num = num_loops;\n "}, {"sha": "c9941b60998c1a488f336613143c3353756c42c9", "filename": "gcc/gcse.c", "status": "modified", "additions": 44, "deletions": 45, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22", "patch": "@@ -1051,7 +1051,7 @@ free_gcse_mem ()\n \n   free (reg_set_bitmap);\n \n-  free (reg_set_in_block);\n+  sbitmap_vector_free (reg_set_in_block);\n   free (mem_set_in_block);\n   /* re-Cache any INSN_LIST nodes we have allocated.  */\n   {\n@@ -2959,10 +2959,10 @@ alloc_rd_mem (n_blocks, n_insns)\n static void\n free_rd_mem ()\n {\n-  free (rd_kill);\n-  free (rd_gen);\n-  free (reaching_defs);\n-  free (rd_out);\n+  sbitmap_vector_free (rd_kill);\n+  sbitmap_vector_free (rd_gen);\n+  sbitmap_vector_free (reaching_defs);\n+  sbitmap_vector_free (rd_out);\n }\n \n /* Add INSN to the kills of BB.  REGNO, set in BB, is killed by INSN.  */\n@@ -3101,10 +3101,10 @@ alloc_avail_expr_mem (n_blocks, n_exprs)\n static void\n free_avail_expr_mem ()\n {\n-  free (ae_kill);\n-  free (ae_gen);\n-  free (ae_in);\n-  free (ae_out);\n+  sbitmap_vector_free (ae_kill);\n+  sbitmap_vector_free (ae_gen);\n+  sbitmap_vector_free (ae_in);\n+  sbitmap_vector_free (ae_out);\n }\n \n /* Compute the set of available expressions generated in each basic block.  */\n@@ -3751,10 +3751,10 @@ alloc_cprop_mem (n_blocks, n_sets)\n static void\n free_cprop_mem ()\n {\n-  free (cprop_pavloc);\n-  free (cprop_absaltered);\n-  free (cprop_avin);\n-  free (cprop_avout);\n+  sbitmap_vector_free (cprop_pavloc);\n+  sbitmap_vector_free (cprop_absaltered);\n+  sbitmap_vector_free (cprop_avin);\n+  sbitmap_vector_free (cprop_avout);\n }\n \n /* For each block, compute whether X is transparent.  X is either an\n@@ -4462,24 +4462,23 @@ alloc_pre_mem (n_blocks, n_exprs)\n static void\n free_pre_mem ()\n {\n-  free (transp);\n-  free (comp);\n+  sbitmap_vector_free (transp);\n+  sbitmap_vector_free (comp);\n \n   /* ANTLOC and AE_KILL are freed just after pre_lcm finishes.  */\n \n   if (pre_optimal)\n-    free (pre_optimal);\n+    sbitmap_vector_free (pre_optimal);\n   if (pre_redundant)\n-    free (pre_redundant);\n+    sbitmap_vector_free (pre_redundant);\n   if (pre_insert_map)\n-    free (pre_insert_map);\n+    sbitmap_vector_free (pre_insert_map);\n   if (pre_delete_map)\n-    free (pre_delete_map);\n-\n+    sbitmap_vector_free (pre_delete_map);\n   if (ae_in)\n-    free (ae_in);\n+    sbitmap_vector_free (ae_in);\n   if (ae_out)\n-    free (ae_out);\n+    sbitmap_vector_free (ae_out);\n \n   transp = comp = NULL;\n   pre_optimal = pre_redundant = pre_insert_map = pre_delete_map = NULL;\n@@ -4537,9 +4536,9 @@ compute_pre_data ()\n \n   edge_list = pre_edge_lcm (gcse_file, n_exprs, transp, comp, antloc,\n \t\t\t    ae_kill, &pre_insert_map, &pre_delete_map);\n-  free (antloc);\n+  sbitmap_vector_free (antloc);\n   antloc = NULL;\n-  free (ae_kill);\n+  sbitmap_vector_free (ae_kill);\n   ae_kill = NULL; \n   free (trapping_expr);\n }\n@@ -4907,7 +4906,7 @@ pre_edge_insert (edge_list, index_map)\n \t}\n     }\n \n-  free (inserted);\n+  sbitmap_vector_free (inserted);\n   return did_insert;\n }\n \n@@ -5587,10 +5586,10 @@ delete_null_pointer_checks (f)\n   free (block_reg);\n \n   /* Free bitmaps.  */\n-  free (npi.nonnull_local);\n-  free (npi.nonnull_killed);\n-  free (nonnull_avin);\n-  free (nonnull_avout);\n+  sbitmap_vector_free (npi.nonnull_local);\n+  sbitmap_vector_free (npi.nonnull_killed);\n+  sbitmap_vector_free (nonnull_avin);\n+  sbitmap_vector_free (nonnull_avout);\n }\n \n /* Code Hoisting variables and subroutines.  */\n@@ -5635,16 +5634,16 @@ alloc_code_hoist_mem (n_blocks, n_exprs)\n static void\n free_code_hoist_mem ()\n {\n-  free (antloc);\n-  free (transp);\n-  free (comp);\n+  sbitmap_vector_free (antloc);\n+  sbitmap_vector_free (transp);\n+  sbitmap_vector_free (comp);\n \n-  free (hoist_vbein);\n-  free (hoist_vbeout);\n-  free (hoist_exprs);\n-  free (transpout);\n+  sbitmap_vector_free (hoist_vbein);\n+  sbitmap_vector_free (hoist_vbeout);\n+  sbitmap_vector_free (hoist_exprs);\n+  sbitmap_vector_free (transpout);\n \n-  free (dominators);\n+  sbitmap_vector_free (dominators);\n }\n \n /* Compute the very busy expressions at entry/exit from each block.\n@@ -7026,19 +7025,19 @@ free_store_memory ()\n   free_ldst_mems ();\n   \n   if (ae_gen)\n-    free (ae_gen);\n+    sbitmap_vector_free (ae_gen);\n   if (ae_kill)\n-    free (ae_kill);\n+    sbitmap_vector_free (ae_kill);\n   if (transp)\n-    free (transp);\n+    sbitmap_vector_free (transp);\n   if (st_antloc)\n-    free (st_antloc);\n+    sbitmap_vector_free (st_antloc);\n   if (pre_insert_map)\n-    free (pre_insert_map);\n+    sbitmap_vector_free (pre_insert_map);\n   if (pre_delete_map)\n-    free (pre_delete_map);\n+    sbitmap_vector_free (pre_delete_map);\n   if (reg_set_in_block)\n-    free (reg_set_in_block);\n+    sbitmap_vector_free (reg_set_in_block);\n   \n   ae_gen = ae_kill = transp = st_antloc = NULL;\n   pre_insert_map = pre_delete_map = reg_set_in_block = NULL;\n@@ -7067,7 +7066,7 @@ store_motion ()\n   num_stores = compute_store_table ();\n   if (num_stores == 0)\n     {\n-      free (reg_set_in_block);\n+      sbitmap_vector_free (reg_set_in_block);\n       end_alias_analysis ();\n       return;\n     }"}, {"sha": "661e5b5153baea494db3ae22454276de9247d179", "filename": "gcc/lcm.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22", "patch": "@@ -422,7 +422,7 @@ pre_edge_lcm (file, n_exprs, transp, avloc, antloc, kill, insert, delete)\n   avin = sbitmap_vector_alloc (n_basic_blocks, n_exprs);\n   avout = sbitmap_vector_alloc (n_basic_blocks, n_exprs);\n   compute_available (avloc, kill, avout, avin);\n-  free (avin);\n+  sbitmap_vector_free (avin);\n \n   /* Compute global anticipatability.  */\n   antin = sbitmap_vector_alloc (n_basic_blocks, n_exprs);\n@@ -446,9 +446,9 @@ pre_edge_lcm (file, n_exprs, transp, avloc, antloc, kill, insert, delete)\n     dump_sbitmap_vector (file, \"earliest\", \"\", earliest, num_edges);\n #endif\n \n-  free (antout);\n-  free (antin);\n-  free (avout);\n+  sbitmap_vector_free (antout);\n+  sbitmap_vector_free (antin);\n+  sbitmap_vector_free (avout);\n \n   later = sbitmap_vector_alloc (num_edges, n_exprs);\n \n@@ -464,14 +464,14 @@ pre_edge_lcm (file, n_exprs, transp, avloc, antloc, kill, insert, delete)\n     }\n #endif\n \n-  free (earliest);\n+  sbitmap_vector_free (earliest);\n \n   *insert = sbitmap_vector_alloc (num_edges, n_exprs);\n   *delete = sbitmap_vector_alloc (n_basic_blocks, n_exprs);\n   compute_insert_delete (edge_list, antloc, later, laterin, *insert, *delete);\n \n-  free (laterin);\n-  free (later);\n+  sbitmap_vector_free (laterin);\n+  sbitmap_vector_free (later);\n \n #ifdef LCM_DEBUG_INFO\n   if (file)\n@@ -791,8 +791,11 @@ pre_edge_rev_lcm (file, n_exprs, transp, st_avloc, st_antloc, kill,\n     dump_sbitmap_vector (file, \"farthest\", \"\", farthest, num_edges);\n #endif\n \n-  free (st_avin);\n-  free (st_avout);\n+  sbitmap_vector_free (st_antin);\n+  sbitmap_vector_free (st_antout);\n+\n+  sbitmap_vector_free (st_avin);\n+  sbitmap_vector_free (st_avout);\n \n   nearer = sbitmap_vector_alloc (num_edges, n_exprs);\n \n@@ -809,15 +812,15 @@ pre_edge_rev_lcm (file, n_exprs, transp, st_avloc, st_antloc, kill,\n     }\n #endif\n \n-  free (farthest);\n+  sbitmap_vector_free (farthest);\n \n   *insert = sbitmap_vector_alloc (num_edges, n_exprs);\n   *delete = sbitmap_vector_alloc (n_basic_blocks, n_exprs);\n   compute_rev_insert_delete (edge_list, st_avloc, nearer, nearerout,\n \t\t\t     *insert, *delete);\n \n-  free (nearerout);\n-  free (nearer);\n+  sbitmap_vector_free (nearerout);\n+  sbitmap_vector_free (nearer);\n \n #ifdef LCM_DEBUG_INFO\n   if (file)\n@@ -827,7 +830,6 @@ pre_edge_rev_lcm (file, n_exprs, transp, st_avloc, st_antloc, kill,\n \t\t\t   n_basic_blocks);\n     }\n #endif\n-\n   return edge_list;\n }\n "}, {"sha": "eee26baf75bf56d8de3f44c05500562907f04f38", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=5a660bff9a2fb1e4cf5f914fa881aa1dd0139c22", "patch": "@@ -1541,14 +1541,14 @@ free_dependency_caches ()\n {\n   if (true_dependency_cache)\n     {\n-      free (true_dependency_cache);\n+      sbitmap_vector_free (true_dependency_cache);\n       true_dependency_cache = NULL;\n-      free (anti_dependency_cache);\n+      sbitmap_vector_free (anti_dependency_cache);\n       anti_dependency_cache = NULL;\n-      free (output_dependency_cache);\n+      sbitmap_vector_free (output_dependency_cache);\n       output_dependency_cache = NULL;\n #ifdef ENABLE_CHECKING\n-      free (forward_dependency_cache);\n+      sbitmap_vector_free (forward_dependency_cache);\n       forward_dependency_cache = NULL;\n #endif\n     }"}]}