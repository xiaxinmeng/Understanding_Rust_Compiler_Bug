{"sha": "40b8428e2e586d89cce4fbafb8ef333a062a53f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBiODQyOGUyZTU4NmQ4OWNjZTRmYmFmYjhlZjMzM2EwNjJhNTNmOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-10-20T14:14:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-10-20T14:14:47Z"}, "message": "tree-ssa-alias.c (ptrs_compare_unequal): Remove code duplication.\n\n2016-10-20  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-alias.c (ptrs_compare_unequal): Remove code duplication.\n\tHandle decls possibly not bound.\n\t* tree-ssa-structalias.c (get_constraint_for_ssa_var): Add\n\tnothing_id for decls that might not be bound if we are interested\n\tfor the address.\n\t(get_constraint_for_component_ref): Deal with that.\n\nFrom-SVN: r241378", "tree": {"sha": "76741cf91c5b716dba2283f07c3d8dcba3801b64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76741cf91c5b716dba2283f07c3d8dcba3801b64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40b8428e2e586d89cce4fbafb8ef333a062a53f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b8428e2e586d89cce4fbafb8ef333a062a53f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b8428e2e586d89cce4fbafb8ef333a062a53f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b8428e2e586d89cce4fbafb8ef333a062a53f8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eff89e01b880e6f058ae136935d70c743bc852b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff89e01b880e6f058ae136935d70c743bc852b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff89e01b880e6f058ae136935d70c743bc852b6"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "2c770c240ec48d7e46acdee35429e80d06001c4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b8428e2e586d89cce4fbafb8ef333a062a53f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b8428e2e586d89cce4fbafb8ef333a062a53f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40b8428e2e586d89cce4fbafb8ef333a062a53f8", "patch": "@@ -1,3 +1,12 @@\n+2016-10-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-alias.c (ptrs_compare_unequal): Remove code duplication.\n+\tHandle decls possibly not bound.\n+\t* tree-ssa-structalias.c (get_constraint_for_ssa_var): Add\n+\tnothing_id for decls that might not be bound if we are interested\n+\tfor the address.\n+\t(get_constraint_for_component_ref): Deal with that.\n+\n 2016-10-20  Michael Matz  <matz@suse.de>\n \n \tLoop splitting."}, {"sha": "26c9f9e894b78f2dce72c017f27e2fb84e090019", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b8428e2e586d89cce4fbafb8ef333a062a53f8/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b8428e2e586d89cce4fbafb8ef333a062a53f8/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=40b8428e2e586d89cce4fbafb8ef333a062a53f8", "patch": "@@ -358,6 +358,13 @@ ptrs_compare_unequal (tree ptr1, tree ptr2)\n \tptr2 = TREE_OPERAND (tem, 0);\n     }\n \n+  /* Canonicalize ptr vs. object.  */\n+  if (TREE_CODE (ptr1) == SSA_NAME && obj2)\n+    {\n+      std::swap (ptr1, ptr2);\n+      std::swap (obj1, obj2);\n+    }\n+\n   if (obj1 && obj2)\n     /* Other code handles this correctly, no need to duplicate it here.  */;\n   else if (obj1 && TREE_CODE (ptr2) == SSA_NAME)\n@@ -368,15 +375,16 @@ ptrs_compare_unequal (tree ptr1, tree ptr2)\n \t may be in fact obj1.  */\n       if (!pi || pi->pt.vars_contains_restrict)\n \treturn false;\n+      if (VAR_P (obj1)\n+\t  && (TREE_STATIC (obj1) || DECL_EXTERNAL (obj1)))\n+\t{\n+\t  varpool_node *node = varpool_node::get (obj1);\n+\t  /* If obj1 may bind to NULL give up (see below).  */\n+\t  if (! node || ! node->nonzero_address ())\n+\t    return false;\n+\t}\n       return !pt_solution_includes (&pi->pt, obj1);\n     }\n-  else if (TREE_CODE (ptr1) == SSA_NAME && obj2)\n-    {\n-      struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr1);\n-      if (!pi || pi->pt.vars_contains_restrict)\n-\treturn false;\n-      return !pt_solution_includes (&pi->pt, obj2);\n-    }\n \n   /* ???  We'd like to handle ptr1 != NULL and ptr1 != ptr2\n      but those require pt.null to be conservatively correct.  */"}, {"sha": "fb364f1319d668e1ade94985d84f916cf9e551dc", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40b8428e2e586d89cce4fbafb8ef333a062a53f8/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40b8428e2e586d89cce4fbafb8ef333a062a53f8/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=40b8428e2e586d89cce4fbafb8ef333a062a53f8", "patch": "@@ -2944,6 +2944,16 @@ get_constraint_for_ssa_var (tree t, vec<ce_s> *results, bool address_p)\n \t  DECL_PT_UID (t) = DECL_UID (node->decl);\n \t  t = node->decl;\n \t}\n+\n+      /* If this is decl may bind to NULL note that.  */\n+      if (address_p\n+\t  && (! node || ! node->nonzero_address ()))\n+\t{\n+\t  cexpr.var = nothing_id;\n+\t  cexpr.type = SCALAR;\n+\t  cexpr.offset = 0;\n+\t  results->safe_push (cexpr);\n+\t}\n     }\n \n   vi = get_vi_for_tree (t);\n@@ -3213,6 +3223,12 @@ get_constraint_for_component_ref (tree t, vec<ce_s> *results,\n   /* Pretend to take the address of the base, we'll take care of\n      adding the required subset of sub-fields below.  */\n   get_constraint_for_1 (t, results, true, lhs_p);\n+  /* Strip off nothing_id.  */\n+  if (results->length () == 2)\n+    {\n+      gcc_assert ((*results)[0].var == nothing_id);\n+      results->unordered_remove (0);\n+    }\n   gcc_assert (results->length () == 1);\n   struct constraint_expr &result = results->last ();\n "}]}