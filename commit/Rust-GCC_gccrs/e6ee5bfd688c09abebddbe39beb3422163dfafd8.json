{"sha": "e6ee5bfd688c09abebddbe39beb3422163dfafd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZlZTViZmQ2ODhjMDlhYmViZGRiZTM5YmViMzQyMjE2M2RmYWZkOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-19T15:42:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-19T15:42:34Z"}, "message": "Define std::not_fn for C++17\n\n\t* doc/xml/manual/status_cxx2017.xml: Update status of not_fn.\n\t* doc/html/*: Regenerate.\n\t* include/experimental/functional (_Not_fn, not_fn): Match C++17\n\tsemantics.\n\t* include/std/functional (_Not_fn, not_fn): Define for C++17.\n\t* testsuite/20_util/not_fn/1.cc: New.\n\t* testsuite/experimental/functional/not_fn.cc: Test abstract class.\n\tRemove test for volatile-qualified wrapper.\n\nFrom-SVN: r239623", "tree": {"sha": "245e6dcb2993e4fe3da21092b3434f65462ec2b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/245e6dcb2993e4fe3da21092b3434f65462ec2b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6ee5bfd688c09abebddbe39beb3422163dfafd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ee5bfd688c09abebddbe39beb3422163dfafd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6ee5bfd688c09abebddbe39beb3422163dfafd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6ee5bfd688c09abebddbe39beb3422163dfafd8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "387edf83a033e1a534c7a2a076d5ae691ecbac07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387edf83a033e1a534c7a2a076d5ae691ecbac07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387edf83a033e1a534c7a2a076d5ae691ecbac07"}], "stats": {"total": 239, "additions": 211, "deletions": 28}, "files": [{"sha": "5239600749c0c6a375f5b3332ccde34e11262106", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e6ee5bfd688c09abebddbe39beb3422163dfafd8", "patch": "@@ -1,5 +1,14 @@\n 2016-08-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/status_cxx2017.xml: Update status of not_fn.\n+\t* doc/html/*: Regenerate.\n+\t* include/experimental/functional (_Not_fn, not_fn): Match C++17\n+\tsemantics.\n+\t* include/std/functional (_Not_fn, not_fn): Define for C++17.\n+\t* testsuite/20_util/not_fn/1.cc: New.\n+\t* testsuite/experimental/functional/not_fn.cc: Test abstract class.\n+\tRemove test for volatile-qualified wrapper.\n+\n \t* include/std/atomic (atomic::is_always_lock_free): Define.\n \t* testsuite/29_atomics/atomic/60695.cc: Adjust dg-error lineno.\n \t* testsuite/29_atomics/atomic/is_always_lock_free.cc: New."}, {"sha": "e82739aa1ceb1b1b608c3abe75786e4569597b90", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=e6ee5bfd688c09abebddbe39beb3422163dfafd8", "patch": "@@ -578,11 +578,11 @@\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4277.html\" target=\"_top\">\n \t  N4277\n \t</a>\n-      </td><td align=\"center\"> 5.1 </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Adopt <code class=\"code\">not_fn</code> from Library Fundamentals 2 for C++17 </td><td align=\"left\">\n+      </td><td align=\"center\"> 5.1 </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\"> Adopt <code class=\"code\">not_fn</code> from Library Fundamentals 2 for C++17 </td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0005r4.html\" target=\"_top\">\n \tP0005R4\n \t</a>\n-      </td><td align=\"center\"> No </td><td align=\"left\"><code class=\"code\">__cpp_lib_not_fn &gt;= 201603</code></td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Fixes for <code class=\"code\">not_fn</code> </td><td align=\"left\">\n+      </td><td align=\"center\"> 7 </td><td align=\"left\"><code class=\"code\">__cpp_lib_not_fn &gt;= 201603</code></td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Fixes for <code class=\"code\">not_fn</code> </td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0358r1.html\" target=\"_top\">\n \tP0358R1\n \t</a>"}, {"sha": "ff966272311c103b379508d74785aa894f309f01", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=e6ee5bfd688c09abebddbe39beb3422163dfafd8", "patch": "@@ -321,14 +321,13 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry> Adopt <code>not_fn</code> from Library Fundamentals 2 for C++17 </entry>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0005r4.html\">\n \tP0005R4\n \t</link>\n       </entry>\n-      <entry align=\"center\"> No </entry>\n+      <entry align=\"center\"> 7 </entry>\n       <entry><code>__cpp_lib_not_fn >= 201603</code></entry>\n     </row>\n "}, {"sha": "eddbcf11c9c3afba5b7e86c0f97373759482f1ff", "filename": "libstdc++-v3/include/experimental/functional", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffunctional?ref=e6ee5bfd688c09abebddbe39beb3422163dfafd8", "patch": "@@ -386,41 +386,46 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       template<typename _Fn2>\n \texplicit\n-\t_Not_fn(_Fn2&& __fn) : _M_fn(std::forward<_Fn2>(__fn)) { }\n+\t_Not_fn(_Fn2&& __fn)\n+\t: _M_fn(std::forward<_Fn2>(__fn)) { }\n \n       _Not_fn(const _Not_fn& __fn) = default;\n       _Not_fn(_Not_fn&& __fn) = default;\n-      _Not_fn& operator=(const _Not_fn& __fn) = default;\n-      _Not_fn& operator=(_Not_fn&& __fn) = default;\n       ~_Not_fn() = default;\n \n       template<typename... _Args>\n \tauto\n-\toperator()(_Args&&... __args)\n-\tnoexcept(noexcept(!_M_fn(std::forward<_Args>(__args)...)))\n-\t-> decltype(!_M_fn(std::forward<_Args>(__args)...))\n-\t{ return !_M_fn(std::forward<_Args>(__args)...); }\n+\toperator()(_Args&&... __args) &\n+\tnoexcept(__is_nothrow_callable<_Fn&(_Args&&...)>::value)\n+\t-> decltype(!std::declval<result_of_t<_Fn&(_Args&&...)>>())\n+\t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n \n       template<typename... _Args>\n \tauto\n-\toperator()(_Args&&... __args) const\n-\tnoexcept(noexcept(!_M_fn(std::forward<_Args>(__args)...)))\n-\t-> decltype(!_M_fn(std::forward<_Args>(__args)...))\n-\t{ return !_M_fn(std::forward<_Args>(__args)...); }\n+\toperator()(_Args&&... __args) const &\n+\tnoexcept(__is_nothrow_callable<const _Fn&(_Args&&...)>::value)\n+\t-> decltype(!std::declval<result_of_t<const _Fn&(_Args&&...)>>())\n+\t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n \n       template<typename... _Args>\n \tauto\n-\toperator()(_Args&&... __args) volatile\n-\tnoexcept(noexcept(!_M_fn(std::forward<_Args>(__args)...)))\n-\t-> decltype(!_M_fn(std::forward<_Args>(__args)...))\n-\t{ return !_M_fn(std::forward<_Args>(__args)...); }\n+\toperator()(_Args&&... __args) &&\n+\tnoexcept(__is_nothrow_callable<_Fn&&(_Args&&...)>::value)\n+\t-> decltype(!std::declval<result_of_t<_Fn&&(_Args&&...)>>())\n+\t{\n+\t  return !std::__invoke(std::move(_M_fn),\n+\t\t\t\tstd::forward<_Args>(__args)...);\n+\t}\n \n       template<typename... _Args>\n \tauto\n-\toperator()(_Args&&... __args) const volatile\n-\tnoexcept(noexcept(!_M_fn(std::forward<_Args>(__args)...)))\n-\t-> decltype(!_M_fn(std::forward<_Args>(__args)...))\n-\t{ return !_M_fn(std::forward<_Args>(__args)...); }\n+\toperator()(_Args&&... __args) const &&\n+\tnoexcept(__is_nothrow_callable<const _Fn&&(_Args&&...)>::value)\n+\t-> decltype(!std::declval<result_of_t<const _Fn&&(_Args&&...)>>())\n+\t{\n+\t  return !std::__invoke(std::move(_M_fn),\n+\t\t\t\tstd::forward<_Args>(__args)...);\n+\t}\n     };\n \n   /// [func.not_fn] Function template not_fn\n@@ -429,8 +434,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     not_fn(_Fn&& __fn)\n     noexcept(std::is_nothrow_constructible<std::decay_t<_Fn>, _Fn&&>::value)\n     {\n-      using __maybe_type = _Maybe_wrap_member_pointer<std::decay_t<_Fn>>;\n-      return _Not_fn<typename __maybe_type::type>{std::forward<_Fn>(__fn)};\n+      return _Not_fn<std::decay_t<_Fn>>{std::forward<_Fn>(__fn)};\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "87d1c17d166ffa31a9d9a7f9bbeafab009cedfec", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=e6ee5bfd688c09abebddbe39beb3422163dfafd8", "patch": "@@ -2129,6 +2129,74 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y)\n     { __x.swap(__y); }\n \n+\n+#if __cplusplus > 201402L\n+\n+#define __cpp_lib_not_fn 201603\n+\n+    /// Generalized negator.\n+  template<typename _Fn>\n+    class _Not_fn\n+    {\n+    public:\n+      template<typename _Fn2>\n+\texplicit\n+\t_Not_fn(_Fn2&& __fn)\n+\t: _M_fn(std::forward<_Fn2>(__fn)) { }\n+\n+      _Not_fn(const _Not_fn& __fn) = default;\n+      _Not_fn(_Not_fn&& __fn) = default;\n+      ~_Not_fn() = default;\n+\n+      template<typename... _Args>\n+\tauto\n+\toperator()(_Args&&... __args) &\n+\tnoexcept(is_nothrow_callable_v<_Fn&(_Args&&...)>)\n+\t-> decltype(!std::declval<result_of_t<_Fn&(_Args&&...)>>())\n+\t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n+\n+      template<typename... _Args>\n+\tauto\n+\toperator()(_Args&&... __args) const &\n+\tnoexcept(is_nothrow_callable_v<const _Fn&(_Args&&...)>)\n+\t-> decltype(!std::declval<result_of_t<const _Fn&(_Args&&...)>>())\n+\t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n+\n+      template<typename... _Args>\n+\tauto\n+\toperator()(_Args&&... __args) &&\n+\tnoexcept(is_nothrow_callable_v<_Fn&&(_Args&&...)>)\n+\t-> decltype(!std::declval<result_of_t<_Fn&&(_Args&&...)>>())\n+\t{\n+\t  return !std::__invoke(std::move(_M_fn),\n+\t\t\t\tstd::forward<_Args>(__args)...);\n+\t}\n+\n+      template<typename... _Args>\n+\tauto\n+\toperator()(_Args&&... __args) const &&\n+\tnoexcept(is_nothrow_callable_v<const _Fn&&(_Args&&...)>)\n+\t-> decltype(!std::declval<result_of_t<const _Fn&&(_Args&&...)>>())\n+\t{\n+\t  return !std::__invoke(std::move(_M_fn),\n+\t\t\t\tstd::forward<_Args>(__args)...);\n+\t}\n+\n+    private:\n+      _Fn _M_fn;\n+    };\n+\n+  /// [func.not_fn] Function template not_fn\n+  template<typename _Fn>\n+    inline auto\n+    not_fn(_Fn&& __fn)\n+    noexcept(std::is_nothrow_constructible<std::decay_t<_Fn>, _Fn&&>::value)\n+    {\n+      return _Not_fn<std::decay_t<_Fn>>{std::forward<_Fn>(__fn)};\n+    }\n+\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "375c7cc1367d52aac41870fd7544608af3089782", "filename": "libstdc++-v3/testsuite/20_util/not_fn/1.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fnot_fn%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fnot_fn%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fnot_fn%2F1.cc?ref=e6ee5bfd688c09abebddbe39beb3422163dfafd8", "patch": "@@ -0,0 +1,94 @@\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+using std::not_fn;\n+\n+int func(int, char) { return 0; }\n+\n+struct F\n+{\n+  bool operator()() { return false; }\n+  bool operator()() const { return true; }\n+  bool operator()(int) { return false; }\n+};\n+\n+void\n+test01()\n+{\n+  auto f1 = not_fn(func);\n+  VERIFY( f1(1, '2') == true );\n+\n+  auto f2 = not_fn( [] { return true; } );\n+  VERIFY( f2() == false );\n+\n+  auto f3 = not_fn( F{} );\n+  VERIFY( f3() == true );\n+  VERIFY( f3(1) == true );\n+  const auto f4 = f3;\n+  VERIFY( f4() == false );\n+}\n+\n+template<typename F, typename Arg>\n+auto foo(F f, Arg arg) -> decltype(not_fn(f)(arg)) { return not_fn(f)(arg); }\n+\n+template<typename F, typename Arg>\n+auto foo(F f, Arg arg) -> decltype(not_fn(f)()) { return not_fn(f)(); }\n+\n+struct negator\n+{\n+    bool operator()(int) const { return false; }\n+    void operator()() const {}\n+};\n+\n+void\n+test02()\n+{\n+  foo(negator{}, 1); // PR libstdc++/66998\n+}\n+\n+void\n+test03()\n+{\n+  struct X { bool b; };\n+  X x{ false };\n+  VERIFY( not_fn(&X::b)(x) );\n+}\n+\n+void\n+test04()\n+{\n+  struct abstract { virtual void f() = 0; };\n+  struct derived : abstract { void f() { } };\n+  struct F { bool operator()(abstract&) { return false; } };\n+  F f;\n+  derived d;\n+  VERIFY( not_fn(f)(d) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "1b3adf108991f8481aff4eac6672be37437f10cd", "filename": "libstdc++-v3/testsuite/experimental/functional/not_fn.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fnot_fn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6ee5bfd688c09abebddbe39beb3422163dfafd8/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fnot_fn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffunctional%2Fnot_fn.cc?ref=e6ee5bfd688c09abebddbe39beb3422163dfafd8", "patch": "@@ -29,7 +29,6 @@ struct F\n   bool operator()() { return false; }\n   bool operator()() const { return true; }\n   bool operator()(int) { return false; }\n-  bool operator()(int) volatile { return true; }\n };\n \n void\n@@ -46,8 +45,6 @@ test01()\n   VERIFY( f3(1) == true );\n   const auto f4 = f3;\n   VERIFY( f4() == false );\n-  volatile auto f5 = f3;\n-  VERIFY( f5(1) == false );\n }\n \n template<typename F, typename Arg>\n@@ -76,10 +73,22 @@ test03()\n   VERIFY( not_fn(&X::b)(x) );\n }\n \n+void\n+test04()\n+{\n+  struct abstract { virtual void f() = 0; };\n+  struct derived : abstract { void f() { } };\n+  struct F { bool operator()(abstract&) { return false; } };\n+  F f;\n+  derived d;\n+  VERIFY( not_fn(f)(d) );\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n }"}]}