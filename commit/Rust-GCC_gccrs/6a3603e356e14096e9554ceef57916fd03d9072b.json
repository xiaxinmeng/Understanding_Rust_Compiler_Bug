{"sha": "6a3603e356e14096e9554ceef57916fd03d9072b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEzNjAzZTM1NmUxNDA5NmU5NTU0Y2VlZjU3OTE2ZmQwM2Q5MDcyYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-06-30T19:38:12Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-06-30T19:38:12Z"}, "message": "PR jit/66546: Add gcc_jit_context_set_bool_allow_unreachable_blocks\n\ngcc/jit/ChangeLog:\n\tPR jit/66546\n\t* docs/cp/topics/contexts.rst\n\t(gccjit::context::set_bool_allow_unreachable_blocks): New.\n\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_2): New.\n\t* docs/topics/contexts.rst (Options): Add notes discussing the\n\ttransition from enums to entrypoints for new options.\n\t(gcc_jit_context_set_bool_allow_unreachable_blocks): New.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\t* jit-common.h (gcc::jit::inner_bool_option): New enum.\n\t* jit-recording.c: Within namespace gcc::jit...\n\t(recording::context::context): Handle m_inner_bool_options.\n\t(recording::context::set_inner_bool_option): New.\n\t(inner_bool_option_reproducer_strings): New.\n\t(recording::context::log_all_options): Log the \"inner\" bool\n\toptions.\n\t(recording::context::log_inner_bool_option): New.\n\t(recording::context::dump_reproducer_to_file): Write initializers\n\tfor \"inner\" bool options.\n\t(recording::function::validate): Don't check for block\n\treachability if INNER_BOOL_OPTION_ALLOW_UNREACHABLE_BLOCKS is set.\n\t* jit-recording.h: Within namespace gcc::jit...\n\t(recording::context::set_inner_bool_option): New.\n\t(recording::context::get_inner_bool_option): New.\n\t(recording::context::log_inner_bool_option): New.\n\t(recording::context::m_inner_bool_options): New.\n\t* libgccjit++.h\n\t(gccjit::context::set_bool_allow_unreachable_blocks): New.\n\t* libgccjit.c\n\t(gcc_jit_context_set_bool_allow_unreachable_blocks): New.\n\t* libgccjit.h: Add note about options present in the\n\tinitial release of libgccjit.\n\t(gcc_jit_context_set_bool_allow_unreachable_blocks): New API\n\tentrypoint.\n\t(LIBGCCJIT_HAVE_gcc_jit_context_set_bool_allow_unreachable_blocks):\n\tNew macro.\n\t* libgccjit.map (LIBGCCJIT_ABI_2): New, containing...\n\t(gcc_jit_context_set_bool_allow_unreachable_blocks): ...this new\n\tentrypoint.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/66546\n\t* jit.dg/all-non-failing-tests.h: Add note about\n\ttest-validly-unreachable-block.c.\n\t* jit.dg/test-validly-unreachable-block.c: New file.\n\nFrom-SVN: r225206", "tree": {"sha": "60b23e2094b5f3e725a9eec2008ef0365a837e1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60b23e2094b5f3e725a9eec2008ef0365a837e1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a3603e356e14096e9554ceef57916fd03d9072b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a3603e356e14096e9554ceef57916fd03d9072b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a3603e356e14096e9554ceef57916fd03d9072b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a3603e356e14096e9554ceef57916fd03d9072b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa22c20d5ae9df54a5f96f4f72db72a2c4c8e2c7"}], "stats": {"total": 1156, "additions": 745, "deletions": 411}, "files": [{"sha": "439f24813ce399b4d1e2f13f884d21cca6e7ff6b", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -1,3 +1,44 @@\n+2015-06-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66546\n+\t* docs/cp/topics/contexts.rst\n+\t(gccjit::context::set_bool_allow_unreachable_blocks): New.\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_2): New.\n+\t* docs/topics/contexts.rst (Options): Add notes discussing the\n+\ttransition from enums to entrypoints for new options.\n+\t(gcc_jit_context_set_bool_allow_unreachable_blocks): New.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-common.h (gcc::jit::inner_bool_option): New enum.\n+\t* jit-recording.c: Within namespace gcc::jit...\n+\t(recording::context::context): Handle m_inner_bool_options.\n+\t(recording::context::set_inner_bool_option): New.\n+\t(inner_bool_option_reproducer_strings): New.\n+\t(recording::context::log_all_options): Log the \"inner\" bool\n+\toptions.\n+\t(recording::context::log_inner_bool_option): New.\n+\t(recording::context::dump_reproducer_to_file): Write initializers\n+\tfor \"inner\" bool options.\n+\t(recording::function::validate): Don't check for block\n+\treachability if INNER_BOOL_OPTION_ALLOW_UNREACHABLE_BLOCKS is set.\n+\t* jit-recording.h: Within namespace gcc::jit...\n+\t(recording::context::set_inner_bool_option): New.\n+\t(recording::context::get_inner_bool_option): New.\n+\t(recording::context::log_inner_bool_option): New.\n+\t(recording::context::m_inner_bool_options): New.\n+\t* libgccjit++.h\n+\t(gccjit::context::set_bool_allow_unreachable_blocks): New.\n+\t* libgccjit.c\n+\t(gcc_jit_context_set_bool_allow_unreachable_blocks): New.\n+\t* libgccjit.h: Add note about options present in the\n+\tinitial release of libgccjit.\n+\t(gcc_jit_context_set_bool_allow_unreachable_blocks): New API\n+\tentrypoint.\n+\t(LIBGCCJIT_HAVE_gcc_jit_context_set_bool_allow_unreachable_blocks):\n+\tNew macro.\n+\t* libgccjit.map (LIBGCCJIT_ABI_2): New, containing...\n+\t(gcc_jit_context_set_bool_allow_unreachable_blocks): ...this new\n+\tentrypoint.\n+\n 2015-06-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/66628"}, {"sha": "522ce76d42d545eb1c256f53e8f3e95f835bd696", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 469, "deletions": 408, "changes": 877, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=6a3603e356e14096e9554ceef57916fd03d9072b"}, {"sha": "162e4aec8f397f9a601782e22bd61f8f37e7185e", "filename": "gcc/jit/docs/cp/topics/contexts.rst", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -184,6 +184,23 @@ Boolean options\n   :c:func:`gcc_jit_context_set_bool_option`; the options have the same\n   meaning.\n \n+.. function:: void \\\n+              gccjit::context::set_bool_allow_unreachable_blocks (int bool_value)\n+\n+   By default, libgccjit will issue an error about unreachable blocks\n+   within a function.\n+\n+   This entrypoint can be used to disable that error; it is a thin wrapper\n+   around the C API\n+   :c:func:`gcc_jit_context_set_bool_allow_unreachable_blocks`.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_2`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_context_set_bool_allow_unreachable_blocks\n+\n Integer options\n ***************\n "}, {"sha": "91bbb05790b54c129bef5ffe0a615a4dc38801ef", "filename": "gcc/jit/docs/topics/compatibility.rst", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompatibility.rst?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -88,3 +88,10 @@ continue to work, with this being handled transparently by the linker\n -------------------\n ``LIBGCCJIT_ABI_1`` covers the addition of\n :func:`gcc_jit_context_add_command_line_option`\n+\n+.. _LIBGCCJIT_ABI_2:\n+\n+``LIBGCCJIT_ABI_2``\n+-------------------\n+``LIBGCCJIT_ABI_2`` covers the addition of\n+:func:`gcc_jit_context_set_bool_allow_unreachable_blocks`"}, {"sha": "1dd4685a4c8ea529b7b9f7b86b3b62531bb8f6a0", "filename": "gcc/jit/docs/topics/contexts.rst", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -293,6 +293,15 @@ future activies on a context to the given `FILE *`.\n Options\n -------\n \n+Options present in the initial release of libgccjit were handled using\n+enums, whereas those added subsequently have their own per-option API\n+entrypoints.\n+\n+Adding entrypoints for each new option means that client code that use\n+the new options can be identified directly from binary metadata, which\n+would not be possible if we instead extended the various\n+``enum gcc_jit_*_option``.\n+\n String Options\n **************\n \n@@ -304,7 +313,7 @@ String Options\n \n    .. type:: enum gcc_jit_str_option\n \n-   There is currently just one string option:\n+   There is just one string option specified this way:\n \n    .. macro:: GCC_JIT_STR_OPTION_PROGNAME\n \n@@ -441,6 +450,22 @@ Boolean options\n      If true, the :type:`gcc_jit_context` will not clean up intermediate files\n      written to the filesystem, and will display their location on stderr.\n \n+.. function:: void \\\n+              gcc_jit_context_set_bool_allow_unreachable_blocks (gcc_jit_context *ctxt, \\\n+                                                                 int bool_value)\n+\n+   By default, libgccjit will issue an error about unreachable blocks\n+   within a function.\n+\n+   This entrypoint can be used to disable that error.\n+\n+   This entrypoint was added in :ref:`LIBGCCJIT_ABI_2`; you can test for\n+   its presence using\n+\n+   .. code-block:: c\n+\n+      #ifdef LIBGCCJIT_HAVE_gcc_jit_context_set_bool_allow_unreachable_blocks\n+\n Integer options\n ***************\n \n@@ -452,7 +477,7 @@ Integer options\n \n   .. type:: enum gcc_jit_int_option\n \n-  There is currently just one integer option:\n+  There is just one integer option specified this way:\n \n   .. macro:: GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL\n "}, {"sha": "edf8d2cfa5fe0e8ff12cb9fedb686b0772d2c8f6", "filename": "gcc/jit/jit-common.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fjit-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fjit-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-common.h?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -185,6 +185,16 @@ class dump\n   FILE *m_file;\n };\n \n+/* A hidden enum of boolean options that are only exposed via API\n+   entrypoints, rather than via gcc_jit_context_set_bool_option.  */\n+\n+enum inner_bool_option\n+{\n+  INNER_BOOL_OPTION_ALLOW_UNREACHABLE_BLOCKS,\n+\n+  NUM_INNER_BOOL_OPTIONS\n+};\n+\n } // namespace gcc::jit\n \n } // namespace gcc"}, {"sha": "ad13aaa498b0bc73e0ec1320fdb2d735a4b81220", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -489,13 +489,17 @@ recording::context::context (context *parent_ctxt)\n       memcpy (m_bool_options,\n \t      parent_ctxt->m_bool_options,\n \t      sizeof (m_bool_options));\n+      memcpy (m_inner_bool_options,\n+\t      parent_ctxt->m_inner_bool_options,\n+\t      sizeof (m_inner_bool_options));\n       set_logger (parent_ctxt->get_logger ());\n     }\n   else\n     {\n       memset (m_str_options, 0, sizeof (m_str_options));\n       memset (m_int_options, 0, sizeof (m_int_options));\n       memset (m_bool_options, 0, sizeof (m_bool_options));\n+      memset (m_inner_bool_options, 0, sizeof (m_inner_bool_options));\n     }\n \n   memset (m_basic_types, 0, sizeof (m_basic_types));\n@@ -1141,6 +1145,16 @@ recording::context::set_bool_option (enum gcc_jit_bool_option opt,\n   log_bool_option (opt);\n }\n \n+void\n+recording::context::set_inner_bool_option (enum inner_bool_option inner_opt,\n+\t\t\t\t\t   int value)\n+{\n+  gcc_assert (inner_opt >= 0 && inner_opt < NUM_INNER_BOOL_OPTIONS);\n+  m_inner_bool_options[inner_opt] = value ? true : false;\n+  log_inner_bool_option (inner_opt);\n+}\n+\n+\n /* Add the given optname to this context's list of extra options.\n \n    Implements the post-error-checking part of\n@@ -1418,6 +1432,10 @@ static const char * const\n   \"GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES\"\n };\n \n+static const char * const\n+ inner_bool_option_reproducer_strings[NUM_INNER_BOOL_OPTIONS] = {\n+  \"gcc_jit_context_set_bool_allow_unreachable_blocks\"\n+};\n \n /* Write the current value of all options to the log file (if any).  */\n \n@@ -1437,6 +1455,8 @@ recording::context::log_all_options () const\n \n   for (opt_idx = 0; opt_idx < GCC_JIT_NUM_BOOL_OPTIONS; opt_idx++)\n     log_bool_option ((enum gcc_jit_bool_option)opt_idx);\n+  for (opt_idx = 0; opt_idx < NUM_INNER_BOOL_OPTIONS; opt_idx++)\n+    log_inner_bool_option ((enum inner_bool_option)opt_idx);\n }\n \n /* Write the current value of the given string option to the\n@@ -1484,6 +1504,19 @@ recording::context::log_bool_option (enum gcc_jit_bool_option opt) const\n \t m_bool_options[opt] ? \"true\" : \"false\");\n }\n \n+/* Write the current value of the given \"inner\" bool option to the\n+   log file (if any).  */\n+\n+void\n+recording::context::log_inner_bool_option (enum inner_bool_option opt) const\n+{\n+  gcc_assert (opt < NUM_INNER_BOOL_OPTIONS);\n+  if (get_logger ())\n+    log (\"%s: %s\",\n+\t inner_bool_option_reproducer_strings[opt],\n+\t m_inner_bool_options[opt] ? \"true\" : \"false\");\n+}\n+\n /* Write C source code to PATH that attempts to replay the API\n    calls made to this context (and its parents), for use in\n    minimizing test cases for libgccjit.\n@@ -1623,6 +1656,11 @@ recording::context::dump_reproducer_to_file (const char *path)\n \t\t r.get_identifier (contexts[ctxt_idx]),\n \t\t bool_option_reproducer_strings[opt_idx],\n \t\t m_bool_options[opt_idx]);\n+      for (int opt_idx = 0; opt_idx < NUM_INNER_BOOL_OPTIONS; opt_idx++)\n+\tr.write (\"  %s (%s, %i);\\n\",\n+\t\t inner_bool_option_reproducer_strings[opt_idx],\n+\t\t r.get_identifier (contexts[ctxt_idx]),\n+\t\t m_inner_bool_options[opt_idx]);\n \n       if (!m_command_line_options.is_empty ())\n \t{\n@@ -3452,7 +3490,9 @@ recording::function::validate ()\n   }\n \n   /* Check that all blocks are reachable.  */\n-  if (m_blocks.length () > 0 && 0 == num_invalid_blocks)\n+  if (!m_ctxt->get_inner_bool_option\n+        (INNER_BOOL_OPTION_ALLOW_UNREACHABLE_BLOCKS)\n+      && m_blocks.length () > 0 && 0 == num_invalid_blocks)\n     {\n       /* Iteratively walk the graph of blocks, marking their \"m_is_reachable\"\n \t flag, starting at the initial block.  */"}, {"sha": "a9bcbb5d63287a4769ba7ebe219aa687fb36918a", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -195,6 +195,10 @@ class context : public log_user\n   set_bool_option (enum gcc_jit_bool_option opt,\n \t\t   int value);\n \n+  void\n+  set_inner_bool_option (enum inner_bool_option inner_opt,\n+\t\t\t int value);\n+\n   void\n   add_command_line_option (const char *optname);\n \n@@ -223,6 +227,12 @@ class context : public log_user\n     return m_bool_options[opt];\n   }\n \n+  int\n+  get_inner_bool_option (enum inner_bool_option opt) const\n+  {\n+    return m_inner_bool_options[opt];\n+  }\n+\n   result *\n   compile ();\n \n@@ -266,6 +276,7 @@ class context : public log_user\n   void log_str_option (enum gcc_jit_str_option opt) const;\n   void log_int_option (enum gcc_jit_int_option opt) const;\n   void log_bool_option (enum gcc_jit_bool_option opt) const;\n+  void log_inner_bool_option (enum inner_bool_option opt) const;\n \n   void validate ();\n \n@@ -287,6 +298,7 @@ class context : public log_user\n   char *m_str_options[GCC_JIT_NUM_STR_OPTIONS];\n   int m_int_options[GCC_JIT_NUM_INT_OPTIONS];\n   bool m_bool_options[GCC_JIT_NUM_BOOL_OPTIONS];\n+  bool m_inner_bool_options[NUM_INNER_BOOL_OPTIONS];\n   auto_vec <char *> m_command_line_options;\n \n   /* Dumpfiles that were requested via gcc_jit_context_enable_dump.  */"}, {"sha": "cbdc96fbd4727e43199a7e48ff41cf58fa930488", "filename": "gcc/jit/libgccjit++.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Flibgccjit%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Flibgccjit%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit%2B%2B.h?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -120,6 +120,8 @@ namespace gccjit\n     void set_bool_option (enum gcc_jit_bool_option opt,\n \t\t\t  int value);\n \n+    void set_bool_allow_unreachable_blocks (int bool_value);\n+\n     void add_command_line_option (const char *optname);\n \n     location\n@@ -602,7 +604,13 @@ context::set_bool_option (enum gcc_jit_bool_option opt,\n \t\t\t  int value)\n {\n   gcc_jit_context_set_bool_option (m_inner_ctxt, opt, value);\n+}\n \n+inline void\n+context::set_bool_allow_unreachable_blocks (int bool_value)\n+{\n+  gcc_jit_context_set_bool_allow_unreachable_blocks (m_inner_ctxt,\n+\t\t\t\t\t\t     bool_value);\n }\n \n inline void"}, {"sha": "7e0bfa66915775f48e9d28a33ba29ab579582c9f", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -2182,6 +2182,23 @@ gcc_jit_context_set_bool_option (gcc_jit_context *ctxt,\n   ctxt->set_bool_option (opt, value);\n }\n \n+/* Public entrypoint.  See description in libgccjit.h.\n+\n+   After error-checking, the real work is done by the\n+   gcc::jit::recording::context::set_inner_bool_option method in\n+   jit-recording.c.  */\n+\n+void\n+gcc_jit_context_set_bool_allow_unreachable_blocks (gcc_jit_context *ctxt,\n+\t\t\t\t\t\t   int bool_value)\n+{\n+  RETURN_IF_FAIL (ctxt, NULL, NULL, \"NULL context\");\n+  JIT_LOG_FUNC (ctxt->get_logger ());\n+  ctxt->set_inner_bool_option (\n+    gcc::jit::INNER_BOOL_OPTION_ALLOW_UNREACHABLE_BLOCKS,\n+    bool_value);\n+}\n+\n /* Public entrypoint.  See description in libgccjit.h.\n \n    After error-checking, the real work is done by the"}, {"sha": "e33900c5ea0cf40c52c56c868dc6ef1df5e561ba", "filename": "gcc/jit/libgccjit.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Flibgccjit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Flibgccjit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.h?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -140,6 +140,9 @@ gcc_jit_context_acquire (void);\n extern void\n gcc_jit_context_release (gcc_jit_context *ctxt);\n \n+/* Options present in the initial release of libgccjit.\n+   These were handled using enums.  */\n+\n /* Options taking string values. */\n enum gcc_jit_str_option\n {\n@@ -243,6 +246,31 @@ gcc_jit_context_set_bool_option (gcc_jit_context *ctxt,\n \t\t\t\t enum gcc_jit_bool_option opt,\n \t\t\t\t int value);\n \n+/* Options added after the initial release of libgccjit.\n+   These are handled by providing an entrypoint per option,\n+   rather than by extending the enum gcc_jit_*_option,\n+   so that client code that use these new options can be identified\n+   from binary metadata.  */\n+\n+/* By default, libgccjit will issue an error about unreachable blocks\n+   within a function.\n+\n+   This option can be used to disable that error.\n+\n+   This entrypoint was added in LIBGCCJIT_ABI_2; you can test for\n+   its presence using\n+     #ifdef LIBGCCJIT_HAVE_gcc_jit_context_set_bool_allow_unreachable_blocks\n+*/\n+\n+extern void\n+gcc_jit_context_set_bool_allow_unreachable_blocks (gcc_jit_context *ctxt,\n+\t\t\t\t\t\t   int bool_value);\n+\n+/* Pre-canned feature macro to indicate the presence of\n+   gcc_jit_context_set_bool_allow_unreachable_blocks.  This can be\n+   tested for with #ifdef.  */\n+#define LIBGCCJIT_HAVE_gcc_jit_context_set_bool_allow_unreachable_blocks\n+\n /* Add an arbitrary gcc command-line option to the context.\n    The context takes a copy of the string, so the\n    (const char *) optname is not needed anymore after the call"}, {"sha": "b55df1e3e427c9a6b18d01a16f979ef92219c420", "filename": "gcc/jit/libgccjit.map", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Flibgccjit.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Fjit%2Flibgccjit.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.map?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -114,3 +114,9 @@ LIBGCCJIT_ABI_1 {\n   global:\n     gcc_jit_context_add_command_line_option;\n } LIBGCCJIT_ABI_0;\n+\n+# Add support for disabling the check for unreachable blocks (PR jit/66546).\n+LIBGCCJIT_ABI_2 {\n+  global:\n+    gcc_jit_context_set_bool_allow_unreachable_blocks;\n+} LIBGCCJIT_ABI_1;"}, {"sha": "3b4879d7076427f5bb70dd9ef3c721ae077512d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -1,3 +1,10 @@\n+2015-06-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66546\n+\t* jit.dg/all-non-failing-tests.h: Add note about\n+\ttest-validly-unreachable-block.c.\n+\t* jit.dg/test-validly-unreachable-block.c: New file.\n+\n 2015-06-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/66628"}, {"sha": "67a16de9b08d9efab04aa7d697b40e4e8bc38fa3", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -189,6 +189,10 @@\n #undef create_code\n #undef verify_code\n \n+/* test-validly-unreachable-block.c: We don't use this one, since the use\n+   of gcc_jit_context_set_bool_allow_unreachable_blocks affects the whole\n+   context.  */\n+\n /* test-volatile.c */\n #define create_code create_code_volatile\n #define verify_code verify_code_volatile"}, {"sha": "2664818992ac8038303b1b1146d390902e2385cc", "filename": "gcc/testsuite/jit.dg/test-validly-unreachable-block.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Ftestsuite%2Fjit.dg%2Ftest-validly-unreachable-block.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a3603e356e14096e9554ceef57916fd03d9072b/gcc%2Ftestsuite%2Fjit.dg%2Ftest-validly-unreachable-block.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-validly-unreachable-block.c?ref=6a3603e356e14096e9554ceef57916fd03d9072b", "patch": "@@ -0,0 +1,51 @@\n+#include <math.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+       void\n+       test_fn ()\n+       {\n+\t return;\n+\n+\t return;\n+       }\n+     where the second block is unreachable, but have it\n+     survive validation (PR jit/66546).\n+  */\n+  gcc_jit_context_set_bool_allow_unreachable_blocks (ctxt, 1);\n+\n+  gcc_jit_type *void_t =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+\n+  /* Build the test_fn.  */\n+  gcc_jit_function *test_fn =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+                                  GCC_JIT_FUNCTION_EXPORTED,\n+                                  void_t,\n+                                  \"test_fn\",\n+                                  0, NULL,\n+                                  0);\n+  gcc_jit_block *initial =\n+    gcc_jit_function_new_block (test_fn, \"a\");\n+  gcc_jit_block *unreachable =\n+    gcc_jit_function_new_block (test_fn, \"b\");\n+\n+  gcc_jit_block_end_with_void_return (initial, NULL);\n+\n+  gcc_jit_block_end_with_void_return (unreachable, NULL);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  /* Ensure that the \"unreachable blocks\" validator was ignored.  */\n+  CHECK_NON_NULL (result);\n+}"}]}