{"sha": "14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQxMzNhNGQ4YWI2ZDljY2Q3ZTdlMmU4MjdmNDQ1MTE4MGE3ZTE3YQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2014-12-19T04:43:11Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2014-12-19T04:43:11Z"}, "message": "* Add TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT target macro.\n\nFrom-SVN: r218887", "tree": {"sha": "d3eb5c21dfd81a4058b594337113d83becb21397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3eb5c21dfd81a4058b594337113d83becb21397"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/comments", "author": null, "committer": null, "parents": [{"sha": "d6220b11a7d208c4713bd4da4bbec792a25ffde9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6220b11a7d208c4713bd4da4bbec792a25ffde9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6220b11a7d208c4713bd4da4bbec792a25ffde9"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "b22e5aa36079b4652e8d0977dd8d1e19f22475df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "patch": "@@ -1,3 +1,15 @@\n+2014-12-19  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* lra-constraints.c (process_address_1): Try if target can split\n+\tdisplacement with targetm.legitimize_address_displacement.\n+\t* target.def (legitimize_address_displacement): New hook.\n+\t* targhooks.c (default_legitimize_address_displacement): New function.\n+\t* targhooks.h (default_legitimize_address_displacement): Declare.\n+\t* config/sh/sh.c (sh_legitimize_address_displacement): New function.\n+\t(TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT): Define.\n+\t* doc/tm.texi.in (TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT): New hook.\n+\t* doc/tm.texi: Regenerate.\n+\n 2014-12-19  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* lra-constraints.c (get_equiv): Don't return memory equivalence"}, {"sha": "815f4d90a9f4b33cc81a2044149854c9865bd752", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "patch": "@@ -292,6 +292,7 @@ static bool sh_legitimate_address_p (machine_mode, rtx, bool);\n static rtx sh_legitimize_address (rtx, rtx, machine_mode);\n static rtx sh_delegitimize_address (rtx);\n static bool sh_cannot_substitute_mem_equiv_p (rtx);\n+static bool sh_legitimize_address_displacement (rtx *, rtx *, machine_mode);\n static int shmedia_target_regs_stack_space (HARD_REG_SET *);\n static int shmedia_reserve_space_for_target_registers_p (int, HARD_REG_SET *);\n static int shmedia_target_regs_stack_adjust (HARD_REG_SET *);\n@@ -634,6 +635,10 @@ static const struct attribute_spec sh_attribute_table[] =\n #undef TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P\n #define TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P sh_cannot_substitute_mem_equiv_p\n \n+#undef TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT\n+#define TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT \\\n+  sh_legitimize_address_displacement\n+\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT\t\tsh_trampoline_init\n #undef TARGET_TRAMPOLINE_ADJUST_ADDRESS\n@@ -13236,6 +13241,29 @@ sh_cannot_substitute_mem_equiv_p (rtx)\n   return true;\n }\n \n+/* Return true if DISP can be legitimized.  */\n+static bool\n+sh_legitimize_address_displacement (rtx *disp, rtx *offs,\n+\t\t\t\t    machine_mode mode)\n+{\n+  if (TARGET_SHMEDIA)\n+    return false;\n+\n+  if (((TARGET_SH4 || TARGET_SH2A_DOUBLE) && mode == DFmode)\n+      || (TARGET_SH2E && mode == SFmode))\n+    return false;\n+\n+  struct disp_adjust adj = sh_find_mov_disp_adjust (mode, INTVAL (*disp));\n+  if (adj.offset_adjust != NULL_RTX && adj.mov_disp != NULL_RTX)\n+    {\n+      *disp = adj.mov_disp;\n+      *offs = adj.offset_adjust;\n+      return true;\n+    }\n+ \n+  return false;\n+}\n+\n static void\n sh_conditional_register_usage (void)\n {"}, {"sha": "a3fda454ff91d175fbdcf94c07c4ef8308e1e40f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "patch": "@@ -2857,6 +2857,15 @@ machines with non orthogonal register usage for addressing, such\n as SH, this hook can be used to avoid excessive spilling.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT (rtx *@var{disp}, rtx *@var{offset}, machine_mode @var{mode})\n+A target hook which returns @code{true} if *@var{disp} is\n+legitimezed to valid address displacement with subtracting *@var{offset}\n+at memory mode @var{mode}.\n+The default version of this target hook returns @code{false}.\n+This hook will benefit machines with limited base plus displacement\n+addressing.\n+@end deftypefn\n+\n @deftypefn {Target Hook} reg_class_t TARGET_SPILL_CLASS (reg_class_t, @var{machine_mode})\n This hook defines a class of registers which could be used for spilling  pseudos of the given mode and class, or @code{NO_REGS} if only memory  should be used.  Not defining this hook is equivalent to returning  @code{NO_REGS} for all inputs.\n @end deftypefn"}, {"sha": "20c0129de79d9b4a59b77a3a697d610cc9aabab4", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "patch": "@@ -2483,6 +2483,8 @@ as below:\n \n @hook TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P\n \n+@hook TARGET_LEGITIMIZE_ADDRESS_DISPLACEMENT\n+\n @hook TARGET_SPILL_CLASS\n \n @hook TARGET_CSTORE_MODE"}, {"sha": "382281c8dc802262330c53c69506c85d4dda9d55", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "patch": "@@ -3015,6 +3015,32 @@ process_address_1 (int nop, bool check_only_p,\n \t      delete_insns_since (PREV_INSN (last_insn));\n \t    }\n \t}\n+      /* Try if target can split displacement into legitimite new disp\n+\t and offset.  If it's the case, we replace the last insn with\n+\t insns for base + offset => new_reg and set new_reg + new disp\n+\t to *ad.inner.  */\n+      last_insn = get_last_insn ();\n+      if ((set = single_set (last_insn)) != NULL_RTX\n+\t  && GET_CODE (SET_SRC (set)) == PLUS\n+\t  && REG_P (XEXP (SET_SRC (set), 0))\n+\t  && REGNO (XEXP (SET_SRC (set), 0)) < FIRST_PSEUDO_REGISTER\n+\t  && CONST_INT_P (XEXP (SET_SRC (set), 1)))\n+\t{\n+\t  rtx addend, disp = XEXP (SET_SRC (set), 1);\n+\t  if (targetm.legitimize_address_displacement (&disp, &addend,\n+\t\t\t\t\t\t       ad.mode))\n+\t    {\n+\t      rtx_insn *new_insns;\n+\t      start_sequence ();\n+\t      lra_emit_add (new_reg, XEXP (SET_SRC (set), 0), addend);\n+\t      new_insns = get_insns ();\n+\t      end_sequence ();\n+\t      new_reg = gen_rtx_PLUS (Pmode, new_reg, disp);\n+\t      delete_insns_since (PREV_INSN (last_insn));\n+\t      add_insn (new_insns);\n+\t      insns = get_insns ();\n+\t    }\n+\t}\n       end_sequence ();\n       emit_insn (insns);\n       *ad.inner = new_reg;"}, {"sha": "6258b3a7bec46b42100ef50addee68ceba6d831f", "filename": "gcc/target.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "patch": "@@ -5051,6 +5051,19 @@ as SH, this hook can be used to avoid excessive spilling.\",\n  bool, (rtx subst),\n  hook_bool_rtx_false)\n \n+/* This target hook allows the backend to legitimize base plus\n+   displacement addressing.  */\n+DEFHOOK\n+(legitimize_address_displacement,\n+ \"A target hook which returns @code{true} if *@var{disp} is\\n\\\n+legitimezed to valid address displacement with subtracting *@var{offset}\\n\\\n+at memory mode @var{mode}.\\n\\\n+The default version of this target hook returns @code{false}.\\n\\\n+This hook will benefit machines with limited base plus displacement\\n\\\n+addressing.\",\n+ bool, (rtx *disp, rtx *offset, machine_mode mode),\n+ default_legitimize_address_displacement)\n+\n /* This target hook allows the backend to perform additional\n    processing while initializing for variable expansion.  */\n DEFHOOK"}, {"sha": "5e723b4d59ba0ceb1fb407f90159a67230a6bfbf", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "patch": "@@ -167,6 +167,14 @@ default_legitimize_address (rtx x, rtx orig_x ATTRIBUTE_UNUSED,\n   return x;\n }\n \n+bool\n+default_legitimize_address_displacement (rtx *disp ATTRIBUTE_UNUSED,\n+\t\t\t\t\t rtx *offset ATTRIBUTE_UNUSED,\n+\t\t\t\t\t machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n rtx\n default_expand_builtin_saveregs (void)\n {"}, {"sha": "26e4f5f2e3d18a03a66654ac4487aaec99afa839", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=14133a4d8ab6d9ccd7e7e2e827f4451180a7e17a", "patch": "@@ -24,6 +24,8 @@ extern bool default_legitimate_address_p (machine_mode, rtx, bool);\n \n extern void default_external_libcall (rtx);\n extern rtx default_legitimize_address (rtx, rtx, machine_mode);\n+extern bool default_legitimize_address_displacement (rtx *, rtx *,\n+\t\t\t\t\t\t     machine_mode);\n \n extern int default_unspec_may_trap_p (const_rtx, unsigned);\n extern machine_mode default_promote_function_mode (const_tree, machine_mode,"}]}