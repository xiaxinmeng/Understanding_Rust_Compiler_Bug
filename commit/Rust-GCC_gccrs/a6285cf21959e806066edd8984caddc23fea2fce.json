{"sha": "a6285cf21959e806066edd8984caddc23fea2fce", "node_id": "C_kwDOANBUbNoAKGE2Mjg1Y2YyMTk1OWU4MDYwNjZlZGQ4OTg0Y2FkZGMyM2ZlYTJmY2U", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-11-17T12:41:31Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-06T15:13:21Z"}, "message": "backend: Don't fold convert_to expressions", "tree": {"sha": "1cec509670f60e0847a709df8b67460685ff182f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cec509670f60e0847a709df8b67460685ff182f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6285cf21959e806066edd8984caddc23fea2fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6285cf21959e806066edd8984caddc23fea2fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6285cf21959e806066edd8984caddc23fea2fce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6285cf21959e806066edd8984caddc23fea2fce/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9666f2b169b5192b5c827d605cc80e6987e1aac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9666f2b169b5192b5c827d605cc80e6987e1aac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9666f2b169b5192b5c827d605cc80e6987e1aac5"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "8df34c24497d445e5b60c6dafb09619136c58717", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6285cf21959e806066edd8984caddc23fea2fce/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6285cf21959e806066edd8984caddc23fea2fce/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=a6285cf21959e806066edd8984caddc23fea2fce", "patch": "@@ -2278,13 +2278,13 @@ CompileExpr::type_cast_expression (tree type_to_cast_to, tree expr_tree,\n     }\n   else if (TREE_CODE (type_to_cast_to) == INTEGER_TYPE)\n     {\n-      tree cast = fold (convert_to_integer (type_to_cast_to, expr_tree));\n+      tree cast = convert_to_integer (type_to_cast_to, expr_tree);\n       // FIXME check for TREE_OVERFLOW?\n       return cast;\n     }\n   else if (TREE_CODE (type_to_cast_to) == REAL_TYPE)\n     {\n-      tree cast = fold (convert_to_real (type_to_cast_to, expr_tree));\n+      tree cast = convert_to_real (type_to_cast_to, expr_tree);\n       // FIXME\n       // We might need to check that the tree is MAX val and thusly saturate it\n       // to inf. we can get the bounds and check the value if its >= or <= to\n@@ -2295,12 +2295,12 @@ CompileExpr::type_cast_expression (tree type_to_cast_to, tree expr_tree,\n     }\n   else if (TREE_CODE (type_to_cast_to) == COMPLEX_TYPE)\n     {\n-      return fold (convert_to_complex (type_to_cast_to, expr_tree));\n+      return convert_to_complex (type_to_cast_to, expr_tree);\n     }\n   else if (TREE_CODE (type_to_cast_to) == POINTER_TYPE\n \t   && TREE_CODE (TREE_TYPE (expr_tree)) == INTEGER_TYPE)\n     {\n-      return fold (convert_to_pointer (type_to_cast_to, expr_tree));\n+      return convert_to_pointer (type_to_cast_to, expr_tree);\n     }\n   else if (TREE_CODE (type_to_cast_to) == RECORD_TYPE\n \t   || TREE_CODE (type_to_cast_to) == ARRAY_TYPE)"}, {"sha": "5bb5313b1dc6d9698d3069b970596ba27da347ab", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6285cf21959e806066edd8984caddc23fea2fce/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6285cf21959e806066edd8984caddc23fea2fce/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=a6285cf21959e806066edd8984caddc23fea2fce", "patch": "@@ -1171,14 +1171,14 @@ Gcc_backend::convert_expression (tree type_tree, tree expr_tree,\n       ret = expr_tree;\n     }\n   else if (TREE_CODE (type_tree) == INTEGER_TYPE)\n-    ret = fold (convert_to_integer (type_tree, expr_tree));\n+    ret = convert_to_integer (type_tree, expr_tree);\n   else if (TREE_CODE (type_tree) == REAL_TYPE)\n-    ret = fold (convert_to_real (type_tree, expr_tree));\n+    ret = convert_to_real (type_tree, expr_tree);\n   else if (TREE_CODE (type_tree) == COMPLEX_TYPE)\n-    ret = fold (convert_to_complex (type_tree, expr_tree));\n+    ret = convert_to_complex (type_tree, expr_tree);\n   else if (TREE_CODE (type_tree) == POINTER_TYPE\n \t   && TREE_CODE (TREE_TYPE (expr_tree)) == INTEGER_TYPE)\n-    ret = fold (convert_to_pointer (type_tree, expr_tree));\n+    ret = convert_to_pointer (type_tree, expr_tree);\n   else if (TREE_CODE (type_tree) == RECORD_TYPE\n \t   || TREE_CODE (type_tree) == ARRAY_TYPE)\n     ret = fold_build1_loc (location.gcc_location (), VIEW_CONVERT_EXPR,"}]}