{"sha": "c42cfb5ca3b02756705485e013fa9107aaf28acd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQyY2ZiNWNhM2IwMjc1NjcwNTQ4NWUwMTNmYTkxMDdhYWYyOGFjZA==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2016-04-08T21:09:47Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2016-04-08T21:09:47Z"}, "message": "re PR lto/70289 ([openacc] ICE in input_varpool_node)\n\n\tgcc/\n\tPR lto/70289\n\tPR ipa/70348\n\tPR tree-optimization/70373\n\tPR middle-end/70533\n\tPR middle-end/70534\n\tPR middle-end/70535\n\t* gimplify.c (gimplify_adjust_omp_clauses): Add or adjust data\n\tclauses for acc parallel reductions as necessary.  Error on those\n\tthat are private.\n\t* omp-low.c (scan_sharing_clauses): Don't install variables which\n\tare used in acc parallel reductions.\n\t(lower_rec_input_clauses): Remove dead code.\n\t(lower_oacc_reductions): Add support for reference reductions.\n\t(lower_reduction_clauses): Remove dead code.\n\t(lower_omp_target): Don't remap variables appearing in acc parallel\n\treductions.\n\t* tree.h (OMP_CLAUSE_MAP_IN_REDUCTION): New macro.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/reduction-5.c: New test.\n\t* c-c++-common/goacc/reduction-promotions.c: New test.\n\t* gfortran.dg/goacc/reduction-3.f95: New test.\n\t* gfortran.dg/goacc/reduction-promotions.f90: New test.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gang-np-1.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gw-np-1.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-1.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-2.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-3.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-4.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-1.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-2.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-worker-p-1.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-1.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-2.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-3.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-1.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-2.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-3.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-4.c: New\n\ttest.\n\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-1.c: Add test\n\tcoverage.\n\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-reduction.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/pr70289.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/pr70373.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-1.c: Add test\n\tcoverage.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-3.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-4.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-5.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-6.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction.h: New test.\n\t* testsuite/libgomp.oacc-fortran/parallel-reduction.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/pr70289.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/reduction-1.f90: Add test coverage.\n\t* testsuite/libgomp.oacc-fortran/reduction-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reduction-3.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reduction-4.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reduction-5.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reduction-6.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reduction-7.f90: New test.\n\nFrom-SVN: r234840", "tree": {"sha": "354e1cd54c889228c92a0a83560a5bf53a7aab00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/354e1cd54c889228c92a0a83560a5bf53a7aab00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c42cfb5ca3b02756705485e013fa9107aaf28acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42cfb5ca3b02756705485e013fa9107aaf28acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42cfb5ca3b02756705485e013fa9107aaf28acd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42cfb5ca3b02756705485e013fa9107aaf28acd/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51a4b0f18711b23f2f696a4f546ccce5b1653cf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a4b0f18711b23f2f696a4f546ccce5b1653cf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a4b0f18711b23f2f696a4f546ccce5b1653cf5"}], "stats": {"total": 3428, "additions": 2881, "deletions": 547}, "files": [{"sha": "da9cfd85a9e37e000131596ab1a327460fe2c7bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,3 +1,23 @@\n+2016-04-08  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR lto/70289\n+\tPR ipa/70348\n+\tPR tree-optimization/70373\n+\tPR middle-end/70533\n+\tPR middle-end/70534\n+\tPR middle-end/70535\n+\t* gimplify.c (gimplify_adjust_omp_clauses): Add or adjust data\n+\tclauses for acc parallel reductions as necessary.  Error on those\n+\tthat are private.\n+\t* omp-low.c (scan_sharing_clauses): Don't install variables which\n+\tare used in acc parallel reductions.\n+\t(lower_rec_input_clauses): Remove dead code.\n+\t(lower_oacc_reductions): Add support for reference reductions.\n+\t(lower_reduction_clauses): Remove dead code.\n+\t(lower_omp_target): Don't remap variables appearing in acc parallel\n+\treductions.\n+\t* tree.h (OMP_CLAUSE_MAP_IN_REDUCTION): New macro.\n+\n 2016-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/70593"}, {"sha": "e49bdaa627f6c4e0a36474f2321feb4550438516", "filename": "gcc/gimplify.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -7987,6 +7987,34 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \t      break;\n \t    }\n \t  decl = OMP_CLAUSE_DECL (c);\n+\t  /* Data clasues associated with acc parallel reductions must be\n+\t     compatible with present_or_copy.  Warn and adjust the clause\n+\t     if that is not the case.  */\n+\t  if (ctx->region_type == ORT_ACC_PARALLEL)\n+\t    {\n+\t      tree t = DECL_P (decl) ? decl : TREE_OPERAND (decl, 0);\n+\t      n = NULL;\n+\n+\t      if (DECL_P (t))\n+\t\tn = splay_tree_lookup (ctx->variables, (splay_tree_key) t);\n+\n+\t      if (n && (n->value & GOVD_REDUCTION))\n+\t\t{\n+\t\t  enum gomp_map_kind kind = OMP_CLAUSE_MAP_KIND (c);\n+\n+\t\t  OMP_CLAUSE_MAP_IN_REDUCTION (c) = 1;\n+\t\t  if ((kind & GOMP_MAP_TOFROM) != GOMP_MAP_TOFROM\n+\t\t      && kind != GOMP_MAP_FORCE_PRESENT\n+\t\t      && kind != GOMP_MAP_POINTER)\n+\t\t    {\n+\t\t      warning_at (OMP_CLAUSE_LOCATION (c), 0,\n+\t\t\t\t  \"incompatible data clause with reduction \"\n+\t\t\t\t  \"on %qE; promoting to present_or_copy\",\n+\t\t\t\t  DECL_NAME (t));\n+\t\t      OMP_CLAUSE_SET_MAP_KIND (c, GOMP_MAP_TOFROM);\n+\t\t    }\n+\t\t}\n+\t    }\n \t  if (!DECL_P (decl))\n \t    {\n \t      if ((ctx->region_type & ORT_TARGET) != 0\n@@ -8118,6 +8146,33 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \n \tcase OMP_CLAUSE_REDUCTION:\n \t  decl = OMP_CLAUSE_DECL (c);\n+\t  /* OpenACC reductions need a present_or_copy data clause.\n+\t     Add one if necessary.  Error is the reduction is private.  */\n+\t  if (ctx->region_type == ORT_ACC_PARALLEL)\n+\t    {\n+\t      n = splay_tree_lookup (ctx->variables, (splay_tree_key) decl);\n+\t      if (n->value & (GOVD_PRIVATE | GOVD_FIRSTPRIVATE))\n+\t\terror_at (OMP_CLAUSE_LOCATION (c), \"invalid private \"\n+\t\t\t  \"reduction on %qE\", DECL_NAME (decl));\n+\t      else if ((n->value & GOVD_MAP) == 0)\n+\t\t{\n+\t\t  tree next = OMP_CLAUSE_CHAIN (c);\n+\t\t  tree nc = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE_MAP);\n+\t\t  OMP_CLAUSE_SET_MAP_KIND (nc, GOMP_MAP_TOFROM);\n+\t\t  OMP_CLAUSE_DECL (nc) = decl;\n+\t\t  OMP_CLAUSE_CHAIN (c) = nc;\n+\t\t  lang_hooks.decls.omp_finish_clause (nc, pre_p);\n+\t\t  while (1)\n+\t\t    {\n+\t\t      OMP_CLAUSE_MAP_IN_REDUCTION (nc) = 1;\n+\t\t      if (OMP_CLAUSE_CHAIN (nc) == NULL)\n+\t\t\tbreak;\n+\t\t      nc = OMP_CLAUSE_CHAIN (nc);\n+\t\t    }\n+\t\t  OMP_CLAUSE_CHAIN (nc) = next;\n+\t\t  n->value |= GOVD_MAP;\n+\t\t}\n+\t    }\n \t  if (DECL_P (decl)\n \t      && omp_shared_to_firstprivate_optimizable_decl_p (decl))\n \t    omp_mark_stores (gimplify_omp_ctxp->outer_context, decl);"}, {"sha": "d25c51f5bc916b1df2d7413ff56e629302f80c97", "filename": "gcc/omp-low.c", "status": "modified", "additions": 65, "deletions": 17, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -2122,7 +2122,8 @@ scan_sharing_clauses (tree clauses, omp_context *ctx,\n \t\t  else\n \t\t    install_var_field (decl, true, 3, ctx,\n \t\t\t\t       base_pointers_restrict);\n-\t\t  if (is_gimple_omp_offloaded (ctx->stmt))\n+\t\t  if (is_gimple_omp_offloaded (ctx->stmt)\n+\t\t      && !OMP_CLAUSE_MAP_IN_REDUCTION (c))\n \t\t    install_var_local (decl, ctx);\n \t\t}\n \t    }\n@@ -4839,7 +4840,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t  gimplify_assign (ptr, x, ilist);\n \t\t}\n \t    }\n-\t  else if (is_reference (var) && !is_oacc_parallel (ctx))\n+\t  else if (is_reference (var))\n \t    {\n \t      /* For references that are being privatized for Fortran,\n \t\t allocate new backing storage for the new pointer\n@@ -5575,7 +5576,8 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \ttree orig = OMP_CLAUSE_DECL (c);\n \ttree var = maybe_lookup_decl (orig, ctx);\n \ttree ref_to_res = NULL_TREE;\n-\ttree incoming, outgoing;\n+\ttree incoming, outgoing, v1, v2, v3;\n+\tbool is_private = false;\n \n \tenum tree_code rcode = OMP_CLAUSE_REDUCTION_CODE (c);\n \tif (rcode == MINUS_EXPR)\n@@ -5588,7 +5590,6 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \n \tif (!var)\n \t  var = orig;\n-\tgcc_assert (!is_reference (var));\n \n \tincoming = outgoing = var;\n \t\n@@ -5624,22 +5625,38 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \t\tfor (; cls;  cls = OMP_CLAUSE_CHAIN (cls))\n \t\t  if (OMP_CLAUSE_CODE (cls) == OMP_CLAUSE_REDUCTION\n \t\t      && orig == OMP_CLAUSE_DECL (cls))\n-\t\t    goto has_outer_reduction;\n+\t\t    {\n+\t\t      incoming = outgoing = lookup_decl (orig, probe);\n+\t\t      goto has_outer_reduction;\n+\t\t    }\n+\t\t  else if ((OMP_CLAUSE_CODE (cls) == OMP_CLAUSE_FIRSTPRIVATE\n+\t\t\t    || OMP_CLAUSE_CODE (cls) == OMP_CLAUSE_PRIVATE)\n+\t\t\t   && orig == OMP_CLAUSE_DECL (cls))\n+\t\t    {\n+\t\t      is_private = true;\n+\t\t      goto do_lookup;\n+\t\t    }\n \t      }\n \n \t  do_lookup:\n \t    /* This is the outermost construct with this reduction,\n \t       see if there's a mapping for it.  */\n \t    if (gimple_code (outer->stmt) == GIMPLE_OMP_TARGET\n-\t\t&& maybe_lookup_field (orig, outer))\n+\t\t&& maybe_lookup_field (orig, outer) && !is_private)\n \t      {\n \t\tref_to_res = build_receiver_ref (orig, false, outer);\n \t\tif (is_reference (orig))\n \t\t  ref_to_res = build_simple_mem_ref (ref_to_res);\n \n+\t\ttree type = TREE_TYPE (var);\n+\t\tif (POINTER_TYPE_P (type))\n+\t\t  type = TREE_TYPE (type);\n+\n \t\toutgoing = var;\n-\t\tincoming = omp_reduction_init_op (loc, rcode, TREE_TYPE (var));\n+\t\tincoming = omp_reduction_init_op (loc, rcode, type);\n \t      }\n+\t    else if (ctx->outer)\n+\t      incoming = outgoing = lookup_decl (orig, ctx->outer);\n \t    else\n \t      incoming = outgoing = orig;\n \t      \n@@ -5649,6 +5666,37 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \tif (!ref_to_res)\n \t  ref_to_res = integer_zero_node;\n \n+        if (is_reference (orig))\n+\t  {\n+\t    tree type = TREE_TYPE (var);\n+\t    const char *id = IDENTIFIER_POINTER (DECL_NAME (var));\n+\n+\t    if (!inner)\n+\t      {\n+\t\ttree x = create_tmp_var (TREE_TYPE (type), id);\n+\t\tgimplify_assign (var, build_fold_addr_expr (x), fork_seq);\n+\t      }\n+\n+\t    v1 = create_tmp_var (type, id);\n+\t    v2 = create_tmp_var (type, id);\n+\t    v3 = create_tmp_var (type, id);\n+\n+\t    gimplify_assign (v1, var, fork_seq);\n+\t    gimplify_assign (v2, var, fork_seq);\n+\t    gimplify_assign (v3, var, fork_seq);\n+\n+\t    var = build_simple_mem_ref (var);\n+\t    v1 = build_simple_mem_ref (v1);\n+\t    v2 = build_simple_mem_ref (v2);\n+\t    v3 = build_simple_mem_ref (v3);\n+\t    outgoing = build_simple_mem_ref (outgoing);\n+\n+\t    if (TREE_CODE (incoming) != INTEGER_CST)\n+\t      incoming = build_simple_mem_ref (incoming);\n+\t  }\n+\telse\n+\t  v1 = v2 = v3 = var;\n+\n \t/* Determine position in reduction buffer, which may be used\n \t   by target.  */\n \tenum machine_mode mode = TYPE_MODE (TREE_TYPE (var));\n@@ -5678,20 +5726,20 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \t  = build_call_expr_internal_loc (loc, IFN_GOACC_REDUCTION,\n \t\t\t\t\t  TREE_TYPE (var), 6, init_code,\n \t\t\t\t\t  unshare_expr (ref_to_res),\n-\t\t\t\t\t  var, level, op, off);\n+\t\t\t\t\t  v1, level, op, off);\n \ttree fini_call\n \t  = build_call_expr_internal_loc (loc, IFN_GOACC_REDUCTION,\n \t\t\t\t\t  TREE_TYPE (var), 6, fini_code,\n \t\t\t\t\t  unshare_expr (ref_to_res),\n-\t\t\t\t\t  var, level, op, off);\n+\t\t\t\t\t  v2, level, op, off);\n \ttree teardown_call\n \t  = build_call_expr_internal_loc (loc, IFN_GOACC_REDUCTION,\n \t\t\t\t\t  TREE_TYPE (var), 6, teardown_code,\n-\t\t\t\t\t  ref_to_res, var, level, op, off);\n+\t\t\t\t\t  ref_to_res, v3, level, op, off);\n \n-\tgimplify_assign (var, setup_call, &before_fork);\n-\tgimplify_assign (var, init_call, &after_fork);\n-\tgimplify_assign (var, fini_call, &before_join);\n+\tgimplify_assign (v1, setup_call, &before_fork);\n+\tgimplify_assign (v2, init_call, &after_fork);\n+\tgimplify_assign (v3, fini_call, &before_join);\n \tgimplify_assign (outgoing, teardown_call, &after_join);\n       }\n \n@@ -5933,9 +5981,6 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp, omp_context *ctx)\n \t}\n     }\n \n-  if (is_gimple_omp_oacc (ctx->stmt))\n-    return;\n-\n   stmt = gimple_build_call (builtin_decl_explicit (BUILT_IN_GOMP_ATOMIC_START),\n \t\t\t    0);\n   gimple_seq_add_stmt (stmt_seqp, stmt);\n@@ -15829,7 +15874,10 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \tif (!maybe_lookup_field (var, ctx))\n \t  continue;\n \n-\tif (offloaded)\n+\t/* Don't remap oacc parallel reduction variables, because the\n+\t   intermediate result must be local to each gang.  */\n+\tif (offloaded && !(OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t\t\t   && OMP_CLAUSE_MAP_IN_REDUCTION (c)))\n \t  {\n \t    x = build_receiver_ref (var, true, ctx);\n \t    tree new_var = lookup_decl (var, ctx);"}, {"sha": "055f5dcb622261418c0e3231a201393d52d6f443", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,3 +1,16 @@\n+2016-04-08  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR lto/70289\n+\tPR ipa/70348\n+\tPR tree-optimization/70373\n+\tPR middle-end/70533\n+\tPR middle-end/70534\n+\tPR middle-end/70535\n+\t* c-c++-common/goacc/reduction-5.c: New test.\n+\t* c-c++-common/goacc/reduction-promotions.c: New test.\n+\t* gfortran.dg/goacc/reduction-3.f95: New test.\n+\t* gfortran.dg/goacc/reduction-promotions.f90: New test.\n+\n 2016-04-08  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/70590"}, {"sha": "74daad35a5d7a786d1f83f52b899a82590780967", "filename": "gcc/testsuite/c-c++-common/goacc/reduction-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-5.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,16 @@\n+/* Integer reductions.  */\n+\n+#define n 1000\n+\n+int\n+main(void)\n+{\n+  int v1;\n+\n+#pragma acc parallel reduction(+:v1) private(v1) /* { dg-error \"appears more than once in data clauses\" } */\n+  ;\n+#pragma acc parallel reduction(+:v1) firstprivate(v1) /* { dg-error \"appears more than once in data clauses\" } */\n+  ;\n+\n+  return 0;\n+}"}, {"sha": "4cc09da99802660b0cd2a2ade89fcbec37b17d7e", "filename": "gcc/testsuite/c-c++-common/goacc/reduction-promotions.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-promotions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-promotions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-promotions.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,32 @@\n+/* Integer reductions.  */\n+\n+#define n 1000\n+\n+int\n+main(void)\n+{\n+  int v1, v2;\n+\n+#pragma acc parallel reduction(+:v1,v2)\n+  ;\n+#pragma acc parallel reduction(+:v1,v2) copy(v1,v2)\n+  ;\n+#pragma acc parallel reduction(+:v1,v2) pcopy(v1,v2)\n+  ;\n+#pragma acc parallel reduction(+:v1,v2) present(v1,v2)\n+  ;\n+#pragma acc parallel reduction(+:v1,v2) copyin(v1,v2) /* { dg-warning \"incompatible data clause with reduction\" } */\n+  ;\n+#pragma acc parallel reduction(+:v1,v2) pcopyin(v1,v2) /* { dg-warning \"incompatible data clause with reduction\" } */\n+  ;\n+#pragma acc parallel reduction(+:v1,v2) copyout(v1,v2) /* { dg-warning \"incompatible data clause with reduction\" } */\n+  ;\n+#pragma acc parallel reduction(+:v1,v2) pcopyout(v1,v2) /* { dg-warning \"incompatible data clause with reduction\" } */\n+  ;\n+#pragma acc parallel reduction(+:v1,v2) create(v1,v2) /* { dg-warning \"incompatible data clause with reduction\" } */\n+  ;\n+#pragma acc parallel reduction(+:v1,v2) pcreate(v1,v2) /* { dg-warning \"incompatible data clause with reduction\" } */\n+  ;\n+\n+  return 0;\n+}"}, {"sha": "72f0eb95a9861e23330d4f733a85f12b06c4d6c2", "filename": "gcc/testsuite/gfortran.dg/goacc/reduction-3.f95", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-3.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-3.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-3.f95?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+\n+subroutine foo (ia1)\n+integer :: i1, i2\n+\n+!$acc parallel reduction (+:i1) private(i1) ! { dg-error \"invalid private reduction on .i1.\" }\n+!$acc end parallel\n+!$acc parallel reduction (+:i2) firstprivate(i2) ! { dg-error \"invalid private reduction on .i2.\" }\n+!$acc end parallel\n+end subroutine foo"}, {"sha": "6ff913ade8dead670e43dcb4371db359b55f867d", "filename": "gcc/testsuite/gfortran.dg/goacc/reduction-promotions.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-promotions.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-promotions.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Freduction-promotions.f90?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,46 @@\n+! Ensure that each parallel reduction variable as a copy or pcopy\n+! data clause.\n+\n+! { dg-additional-options \"-fdump-tree-gimple\" }\n+\n+program test\n+  implicit none\n+  integer :: v1, v2\n+\n+  !$acc parallel reduction(+:v1,v2)\n+  !$acc end parallel\n+\n+  !$acc parallel reduction(+:v1,v2) copy(v1,v2)\n+  !$acc end parallel\n+\n+  !$acc parallel reduction(+:v1,v2) pcopy(v1,v2)\n+  !$acc end parallel\n+\n+  !$acc parallel reduction(+:v1,v2) present(v1,v2)\n+  !$acc end parallel\n+\n+  !$acc parallel reduction(+:v1,v2) copyin(v1,v2) ! { dg-warning \"incompatible data clause\" }\n+  !$acc end parallel\n+\n+  !$acc parallel reduction(+:v1,v2) pcopyin(v1,v2) ! { dg-warning \"incompatible data clause\" }\n+  !$acc end parallel\n+\n+  !$acc parallel reduction(+:v1,v2) copyout(v1,v2) ! { dg-warning \"incompatible data clause\" }\n+  !$acc end parallel\n+\n+  !$acc parallel reduction(+:v1,v2) pcopyout(v1,v2) ! { dg-warning \"incompatible data clause\" }\n+  !$acc end parallel\n+\n+  !$acc parallel reduction(+:v1,v2) create(v1,v2) ! { dg-warning \"incompatible data clause\" }\n+  !$acc end parallel\n+\n+  !$acc parallel reduction(+:v1,v2) pcreate(v1,v2) ! { dg-warning \"incompatible data clause\" }\n+  !$acc end parallel\n+end program test\n+\n+! { dg-final { scan-tree-dump-times \"map.tofrom:v1\" 8 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map.tofrom:v2\" 8 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map.force_tofrom:v1\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map.force_tofrom:v2\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map.force_present:v1\" 1 \"gimple\" } }\n+! { dg-final { scan-tree-dump-times \"map.force_present:v2\" 1 \"gimple\" } }"}, {"sha": "87e756390f6e09ffb1b8a4d9f74fb8bfbc6685bd", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1536,6 +1536,9 @@ extern void protected_set_expr_location (tree, location_t);\n    treatment if OMP_CLAUSE_SIZE is zero.  */\n #define OMP_CLAUSE_MAP_MAYBE_ZERO_LENGTH_ARRAY_SECTION(NODE) \\\n   TREE_PROTECTED (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_MAP))\n+/* Nonzero if this map clause is for an ACC parallel reduction variable.  */\n+#define OMP_CLAUSE_MAP_IN_REDUCTION(NODE) \\\n+  TREE_PRIVATE (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_MAP))\n \n #define OMP_CLAUSE_PROC_BIND_KIND(NODE) \\\n   (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_PROC_BIND)->omp_clause.subcode.proc_bind_kind)"}, {"sha": "742f19052a4a6f207ed5c6f4b37b8421665aca58", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,3 +1,65 @@\n+2016-04-08  Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR lto/70289\n+\tPR ipa/70348\n+\tPR tree-optimization/70373\n+\tPR middle-end/70533\n+\tPR middle-end/70534\n+\tPR middle-end/70535\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gang-np-1.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gw-np-1.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-1.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-2.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-3.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-4.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-1.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-2.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-worker-p-1.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-1.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-3.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-1.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-2.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-3.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-4.c: New\n+\ttest.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-1.c: Add test\n+\tcoverage.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/parallel-reduction.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr70289.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr70373.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-1.c: Add test\n+\tcoverage.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-2.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-3.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-4.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-5.c: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-6.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction.h: New test.\n+\t* testsuite/libgomp.oacc-fortran/parallel-reduction.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/pr70289.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/reduction-1.f90: Add test coverage.\n+\t* testsuite/libgomp.oacc-fortran/reduction-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-3.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-4.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-5.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-6.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/reduction-7.f90: New test.\n+\n 2016-03-30  Thomas Schwinge  <thomas@codesourcery.com>\n \t    James Norris  <jnorris@codesourcery.com>\n \t    Nathan Sidwell  <nathan@codesourcery.com>"}, {"sha": "55ab3c96334ce95a4924cec5f29a366a9767f6b7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gang-np-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gang-np-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gang-np-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gang-np-1.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-additional-options \"-w\" } */\n+\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (gangs, non-private reduction\n+   variable).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, arr[1024], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copy(res)\n+  {\n+    #pragma acc loop gang reduction(+:res)\n+    for (i = 0; i < 1024; i++)\n+      res += arr[i];\n+  }\n+\n+  for (i = 0; i < 1024; i++)\n+    hres += arr[i];\n+\n+  assert (res == hres);\n+\n+  res = hres = 1;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copy(res)\n+  {\n+    #pragma acc loop gang reduction(*:res)\n+    for (i = 0; i < 12; i++)\n+      res *= arr[i];\n+  }\n+\n+  for (i = 0; i < 12; i++)\n+    hres *= arr[i];\n+\n+  assert (res == hres);\n+\n+  return 0;\n+}"}, {"sha": "d4341e9c2cf19f5b3175eafef1b04041e82812ff", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gv-np-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gv-np-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gv-np-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gv-np-1.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-additional-options \"-w\" } */\n+\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (gangs and vectors, non-private\n+   reduction variable).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, arr[1024], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copy(res)\n+  {\n+    #pragma acc loop gang vector reduction(+:res)\n+    for (i = 0; i < 1024; i++)\n+      res += arr[i];\n+  }\n+\n+  for (i = 0; i < 1024; i++)\n+    hres += arr[i];\n+\n+  assert (res == hres);\n+\n+  return 0;\n+}"}, {"sha": "2e5668b134e8eb3dbef232759b5e9ddd614014a1", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gw-np-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gw-np-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gw-np-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gw-np-1.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-additional-options \"-w\" } */\n+\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (gangs and workers, non-private\n+   reduction variable).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, arr[1024], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copy(res)\n+  {\n+    #pragma acc loop gang worker reduction(+:res)\n+    for (i = 0; i < 1024; i++)\n+      res += arr[i];\n+  }\n+\n+  for (i = 0; i < 1024; i++)\n+    hres += arr[i];\n+\n+  assert (res == hres);\n+\n+  return 0;\n+}"}, {"sha": "d61037388138ae0c5acb85dd2364da0d410df508", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-1.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,28 @@\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (gangs, workers and vectors, non-private\n+   reduction variable).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, arr[1024], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copy(res)\n+  {\n+    #pragma acc loop gang worker vector reduction(+:res)\n+    for (i = 0; i < 1024; i++)\n+      res += arr[i];\n+  }\n+\n+  for (i = 0; i < 1024; i++)\n+    hres += arr[i];\n+\n+  assert (res == hres);\n+\n+  return 0;\n+}"}, {"sha": "ea5c151af3ca49ffcf9a7b4691fa6353699216e2", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-2.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,34 @@\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (gangs, workers and vectors, non-private\n+   reduction variable: separate gang and worker/vector loops).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j, arr[32768], res = 0, hres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copy(res)\n+  {\n+    #pragma acc loop gang reduction(+:res)\n+    for (j = 0; j < 32; j++)\n+      {\n+        #pragma acc loop worker vector reduction(+:res)\n+        for (i = 0; i < 1024; i++)\n+\t  res += arr[j * 1024 + i];\n+      }\n+    /* \"res\" is non-private, and is not available until after the parallel\n+       region.  */\n+  }\n+\n+  for (i = 0; i < 32768; i++)\n+    hres += arr[i];\n+\n+  assert (res == hres);\n+\n+  return 0;\n+}"}, {"sha": "0056f3ce10eecf432ea189594e6a5693a34555f9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-3.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,33 @@\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (gangs, workers and vectors, non-private\n+   reduction variable: separate gang and worker/vector loops).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j;\n+  double arr[32768], res = 0, hres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copyin(arr) copy(res)\n+  {\n+    #pragma acc loop gang reduction(+:res)\n+    for (j = 0; j < 32; j++)\n+      {\n+        #pragma acc loop worker vector reduction(+:res)\n+        for (i = 0; i < 1024; i++)\n+\t  res += arr[j * 1024 + i];\n+      }\n+  }\n+\n+  for (i = 0; i < 32768; i++)\n+    hres += arr[i];\n+\n+  assert (res == hres);\n+\n+  return 0;\n+}"}, {"sha": "e69d0ec04c7646da63485af43fffb7ec2cde515e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-gwv-np-4.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-gwv-np-4.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,55 @@\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (gangs, workers and vectors, multiple\n+   non-private reduction variables, float type).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j;\n+  float arr[32768];\n+  float res = 0, mres = 0, hres = 0, hmres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       copy(res, mres)\n+  {\n+    #pragma acc loop gang reduction(+:res) reduction(max:mres)\n+    for (j = 0; j < 32; j++)\n+      {\n+\t#pragma acc loop worker vector reduction(+:res) reduction(max:mres)\n+\tfor (i = 0; i < 1024; i++)\n+\t  {\n+\t    res += arr[j * 1024 + i];\n+\t    if (arr[j * 1024 + i] > mres)\n+\t      mres = arr[j * 1024 + i];\n+\t  }\n+\n+\t#pragma acc loop worker vector reduction(+:res) reduction(max:mres)\n+\tfor (i = 0; i < 1024; i++)\n+\t  {\n+\t    res += arr[j * 1024 + (1023 - i)];\n+\t    if (arr[j * 1024 + (1023 - i)] > mres)\n+\t      mres = arr[j * 1024 + (1023 - i)];\n+\t  }\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    for (i = 0; i < 1024; i++)\n+      {\n+        hres += arr[j * 1024 + i];\n+\thres += arr[j * 1024 + (1023 - i)];\n+\tif (arr[j * 1024 + i] > hmres)\n+\t  hmres = arr[j * 1024 + i];\n+\tif (arr[j * 1024 + (1023 - i)] > hmres)\n+\t  hmres = arr[j * 1024 + (1023 - i)];\n+      }\n+\n+  assert (res == hres);\n+  assert (mres == hmres);\n+\n+  return 0;\n+}"}, {"sha": "31e4366f88b954e6189044705dd71ba9e7a56eee", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-1.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-additional-options \"-w\" } */\n+\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (vectors, private reduction\n+   variable).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j, arr[1024], out[32], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(res) copyout(out)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+        res = 0;\n+\n+\t#pragma acc loop vector reduction(+:res)\n+\tfor (i = 0; i < 32; i++)\n+\t  res += arr[j * 32 + i];\n+\n+\tout[j] = res;\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    {\n+      hres = 0;\n+\n+      for (i = 0; i < 32; i++)\n+\thres += arr[j * 32 + i];\n+\n+      assert (out[j] == hres);\n+    }\n+\n+  return 0;\n+}"}, {"sha": "15f0053e5bc0043a0a818f150b2957711411209e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-vector-p-2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-vector-p-2.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,41 @@\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (vector reduction in\n+   gang-partitioned/worker-partitioned mode, private reduction variable).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j, k;\n+  double ina[1024], inb[1024], out[1024], acc;\n+\n+  for (j = 0; j < 32; j++)\n+    for (i = 0; i < 32; i++)\n+      {\n+        ina[j * 32 + i] = (i == j) ? 2.0 : 0.0;\n+\tinb[j * 32 + i] = (double) (i + j);\n+      }\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(acc) copyin(ina, inb) copyout(out)\n+  {\n+    #pragma acc loop gang worker\n+    for (k = 0; k < 32; k++)\n+      for (j = 0; j < 32; j++)\n+        {\n+\t  acc = 0;\n+\n+\t  #pragma acc loop vector reduction(+:acc)\n+\t  for (i = 0; i < 32; i++)\n+\t    acc += ina[k * 32 + i] * inb[i * 32 + j];\n+\n+\t  out[k * 32 + j] = acc;\n+\t}\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    for (i = 0; i < 32; i++)\n+      assert (out[j * 32 + i] == (i + j) * 2);\n+\n+  return 0;\n+}"}, {"sha": "4a925036a5b51403de942b30ce96af7b268dee78", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-worker-p-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-worker-p-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-worker-p-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-worker-p-1.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-additional-options \"-w\" } */\n+\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (workers, private reduction\n+   variable).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j, arr[1024], out[32], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(res) copyout(out)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+        res = 0;\n+\n+\t#pragma acc loop worker reduction(+:res)\n+\tfor (i = 0; i < 32; i++)\n+\t  res += arr[j * 32 + i];\n+\n+\tout[j] = res;\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    {\n+      hres = 0;\n+\n+      for (i = 0; i < 32; i++)\n+\thres += arr[j * 32 + i];\n+\n+      assert (out[j] == hres);\n+    }\n+\n+  return 0;\n+}"}, {"sha": "1bfb284cb3bf32d607eef47d2cac74aa0049e7fe", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-1.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,41 @@\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (workers and vectors, private reduction\n+   variable).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j, arr[1024], out[32], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(res) copyout(out)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+        res = 0;\n+\n+\t#pragma acc loop worker vector reduction(+:res)\n+\tfor (i = 0; i < 32; i++)\n+\t  res += arr[j * 32 + i];\n+\n+\tout[j] = res;\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    {\n+      hres = 0;\n+\n+      for (i = 0; i < 32; i++)\n+\thres += arr[j * 32 + i];\n+\n+      assert (out[j] == hres);\n+    }\n+\n+  return 0;\n+}"}, {"sha": "93ab78f106a56250562251e5201d1dd6fcb7f63b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-2.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,45 @@\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (workers and vectors, private reduction\n+   variable).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j, arr[32768], out[32], res = 0, hres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(res) copyout(out)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+        res = j;\n+\n+\t#pragma acc loop worker reduction(+:res)\n+\tfor (i = 0; i < 1024; i++)\n+\t  res += arr[j * 1024 + i];\n+\n+\t#pragma acc loop vector reduction(+:res)\n+\tfor (i = 1023; i >= 0; i--)\n+\t  res += arr[j * 1024 + i];\n+\n+\tout[j] = res;\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    {\n+      hres = j;\n+\n+      for (i = 0; i < 1024; i++)\n+\thres += arr[j * 1024 + i] * 2;\n+\n+      assert (out[j] == hres);\n+    }\n+\n+  return 0;\n+}"}, {"sha": "298e25c87d28b523b50b62ca7f660582dac04f5b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-reduction-wv-p-3.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-reduction-wv-p-3.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,38 @@\n+#include <assert.h>\n+\n+/* Test of reduction on loop directive (workers and vectors, private reduction\n+   variable: gang-redundant mode).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, arr[1024], out[32], res = 0, hres = 0;\n+\n+  for (i = 0; i < 1024; i++)\n+    arr[i] = i ^ 33;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       private(res) copyin(arr) copyout(out)\n+  {\n+    /* Private variables aren't initialized by default in openacc.  */\n+    res = 0;\n+\n+    /* \"res\" should be available at the end of the following loop (and should\n+       have the same value redundantly in each gang).  */\n+    #pragma acc loop worker vector reduction(+:res)\n+    for (i = 0; i < 1024; i++)\n+      res += arr[i];\n+\n+    #pragma acc loop gang (static: 1)\n+    for (i = 0; i < 32; i++)\n+      out[i] = res;\n+  }\n+\n+  for (i = 0; i < 1024; i++)\n+    hres += arr[i];\n+\n+  for (i = 0; i < 32; i++)\n+    assert (out[i] == hres);\n+\n+  return 0;\n+}"}, {"sha": "5e82e1d350ccf3cb50229f34c637905e79d4392c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-1.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,38 @@\n+#include <assert.h>\n+\n+/* Test of reduction on both parallel and loop directives (worker and\n+   vector-partitioned loops individually in gang-partitioned mode, int\n+   type).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j, arr[32768], res = 0, hres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+    reduction(+:res) copy(res)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+\t#pragma acc loop worker reduction(+:res)\n+\tfor (i = 0; i < 1024; i++)\n+\t  res += arr[j * 1024 + i];\n+\n+\t#pragma acc loop vector reduction(+:res)\n+\tfor (i = 1023; i >= 0; i--)\n+\t  res += arr[j * 1024 + i];\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    for (i = 0; i < 1024; i++)\n+      hres += arr[j * 1024 + i] * 2;\n+\n+  assert (res == hres);\n+\n+  return 0;\n+}"}, {"sha": "a7a75a9410487a50b3c449dfd375014240e60333", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-2.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,40 @@\n+#include <assert.h>\n+\n+/* Test of reduction on both parallel and loop directives (workers and vectors\n+   in gang-partitioned mode, int type with XOR).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j, arr[32768], res = 0, hres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+\t\t       reduction(^:res)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+\t#pragma acc loop worker vector reduction(^:res)\n+\tfor (i = 0; i < 1024; i++)\n+\t  res ^= arr[j * 1024 + i];\n+\n+\t#pragma acc loop worker vector reduction(^:res)\n+\tfor (i = 0; i < 1024; i++)\n+\t  res ^= arr[j * 1024 + (1023 - i)];\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    for (i = 0; i < 1024; i++)\n+      {\n+        hres ^= arr[j * 1024 + i];\n+\thres ^= arr[j * 1024 + (1023 - i)];\n+      }\n+\n+  assert (res == hres);\n+\n+  return 0;\n+}"}, {"sha": "8d85fedc867d19cae18e2c1e26a100d11a9911dc", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-3.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,42 @@\n+#include <assert.h>\n+\n+/* Test of reduction on both parallel and loop directives (workers and vectors\n+   together in gang-partitioned mode, float type).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j;\n+  float arr[32768];\n+  float res = 0, hres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+    reduction(+:res) copy(res)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+\t#pragma acc loop worker vector reduction(+:res)\n+\tfor (i = 0; i < 1024; i++)\n+\t  res += arr[j * 1024 + i];\n+\n+\t#pragma acc loop worker vector reduction(+:res)\n+\tfor (i = 0; i < 1024; i++)\n+\t  res += arr[j * 1024 + (1023 - i)];\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    for (i = 0; i < 1024; i++)\n+      {\n+        hres += arr[j * 1024 + i];\n+\thres += arr[j * 1024 + (1023 - i)];\n+      }\n+\n+  assert (res == hres);\n+\n+  return 0;\n+}"}, {"sha": "1904b4aa1e4fe9fa216a27e16293f10399af9fc0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-4.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-loop-comb-reduction-4.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,55 @@\n+#include <assert.h>\n+\n+/* Test of reduction on both parallel and loop directives (workers and vectors\n+   together in gang-partitioned mode, float type, multiple reductions).  */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int i, j;\n+  float arr[32768];\n+  float res = 0, mres = 0, hres = 0, hmres = 0;\n+\n+  for (i = 0; i < 32768; i++)\n+    arr[i] = i;\n+\n+  #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n+    reduction(+:res) reduction(max:mres) copy(res, mres)\n+  {\n+    #pragma acc loop gang\n+    for (j = 0; j < 32; j++)\n+      {\n+\t#pragma acc loop worker vector reduction(+:res) reduction(max:mres)\n+\tfor (i = 0; i < 1024; i++)\n+\t  {\n+\t    res += arr[j * 1024 + i];\n+\t    if (arr[j * 1024 + i] > mres)\n+\t      mres = arr[j * 1024 + i];\n+\t  }\n+\n+\t#pragma acc loop worker vector reduction(+:res) reduction(max:mres)\n+\tfor (i = 0; i < 1024; i++)\n+\t  {\n+\t    res += arr[j * 1024 + (1023 - i)];\n+\t    if (arr[j * 1024 + (1023 - i)] > mres)\n+\t      mres = arr[j * 1024 + (1023 - i)];\n+\t  }\n+      }\n+  }\n+\n+  for (j = 0; j < 32; j++)\n+    for (i = 0; i < 1024; i++)\n+      {\n+        hres += arr[j * 1024 + i];\n+\thres += arr[j * 1024 + (1023 - i)];\n+\tif (arr[j * 1024 + i] > hmres)\n+\t  hmres = arr[j * 1024 + i];\n+\tif (arr[j * 1024 + (1023 - i)] > hmres)\n+\t  hmres = arr[j * 1024 + (1023 - i)];\n+      }\n+\n+  assert (res == hres);\n+  assert (mres == hmres);\n+\n+  return 0;\n+}"}, {"sha": "a88b60f39f0344617c335d6dcc9d4ae3c8c68746", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-reduction-1.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-1.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,40 +1,54 @@\n+/* { dg-additional-options \"-w\" } */\n+\n #include <assert.h>\n \n+/* Test of reduction on parallel directive.  */\n+\n+#define ACTUAL_GANGS 256\n+\n int\n main (int argc, char *argv[])\n {\n-  int res, res2 = 0;\n+  int res, res1 = 0, res2 = 0;\n \n #if defined(ACC_DEVICE_TYPE_host)\n # define GANGS 1\n #else\n # define GANGS 256\n #endif\n-  #pragma acc parallel num_gangs(GANGS) copy(res2)\n+  #pragma acc parallel num_gangs(GANGS) num_workers(32) vector_length(32) \\\n+    reduction(+:res1) copy(res2, res1)\n   {\n+    res1 += 5;\n+\n     #pragma acc atomic\n     res2 += 5;\n   }\n   res = GANGS * 5;\n \n+  assert (res == res1);\n   assert (res == res2);\n #undef GANGS\n \n-  res = res2 = 1;\n+  res = res1 = res2 = 1;\n \n #if defined(ACC_DEVICE_TYPE_host)\n # define GANGS 1\n #else\n # define GANGS 8\n #endif\n-  #pragma acc parallel num_gangs(GANGS) copy(res2)\n+  #pragma acc parallel num_gangs(GANGS) num_workers(32) vector_length(32) \\\n+    reduction(*:res1) copy(res1, res2)\n   {\n+    res1 *= 5;\n+\n     #pragma acc atomic\n     res2 *= 5;\n   }\n   for (int i = 0; i < GANGS; ++i)\n     res *= 5;\n \n+  assert (res == res1);\n   assert (res == res2);\n #undef GANGS\n "}, {"sha": "911b76cc9bea22c77e844b3cf339fd439969081c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-reduction-2.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-2.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,37 +1,48 @@\n+/* { dg-additional-options \"-w\" } */\n+\n #include <assert.h>\n #include <openacc.h>\n \n+/* Test of reduction on parallel directive (with async).  */\n+\n int\n main (int argc, char *argv[])\n {\n-  int res, res2 = 0;\n+  int res, res1 = 0, res2 = 0;\n \n #if defined(ACC_DEVICE_TYPE_host)\n # define GANGS 1\n #else\n # define GANGS 256\n #endif\n-  #pragma acc parallel num_gangs(GANGS) copy(res2) async(1)\n+  #pragma acc parallel num_gangs(GANGS) num_workers(32) vector_length(32) \\\n+    reduction(+:res1) copy(res1, res2) async(1)\n   {\n+    res1 += 5;\n+\n     #pragma acc atomic\n     res2 += 5;\n   }\n   res = GANGS * 5;\n \n   acc_wait (1);\n \n+  assert (res == res1);\n   assert (res == res2);\n #undef GANGS\n \n-  res = res2 = 1;\n+  res = res1 = res2 = 1;\n \n #if defined(ACC_DEVICE_TYPE_host)\n # define GANGS 1\n #else\n # define GANGS 8\n #endif\n-  #pragma acc parallel num_gangs(GANGS) copy(res2) async(1)\n+  #pragma acc parallel num_gangs(GANGS) num_workers(32) vector_length(32) \\\n+    reduction(*:res1) copy(res1, res2) async(1)\n   {\n+    res1 *= 5;\n+\n     #pragma acc atomic\n     res2 *= 5;\n   }\n@@ -40,6 +51,7 @@ main (int argc, char *argv[])\n \n   acc_wait (1);\n \n+  assert (res == res1);\n   assert (res == res2);\n \n   return 0;"}, {"sha": "f5766a404b41932d72464e67778bb0740182b7d7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -5,12 +5,20 @@\n \n int main ()\n {\n+  int dummy[10];\n+\n #pragma acc parallel num_workers (2<<20) /* { dg-error \"using num_workers\" } */\n   {\n+#pragma acc loop worker\n+    for (int  i = 0; i < 10; i++)\n+      dummy[i] = i;\n   }\n \n #pragma acc parallel vector_length (2<<20) /* { dg-error \"using vector_length\" } */\n   {\n+#pragma acc loop vector\n+    for (int  i = 0; i < 10; i++)\n+      dummy[i] = i;\n   }\n \n   return 0;"}, {"sha": "b2c60e5269726d8d94899cdc213e15ed38e10466", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-reduction.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-reduction.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-w\" } */\n+\n+#include <stdlib.h>\n+#include <openacc.h>\n+\n+#define N 10\n+\n+int\n+main ()\n+{\n+  int s1 = 0, s2 = 0;\n+  int i;\n+  int dummy = 0;\n+\n+#pragma acc data copy (dummy)\n+  {\n+#pragma acc parallel num_gangs (N) reduction (+:s1) copy(s1)\n+    {\n+      s1++;\n+    }\n+  }\n+\n+  if (acc_get_device_type () != acc_device_nvidia)\n+    {\n+      if (s1 != 1)\n+\tabort ();\n+    }\n+  else\n+    {\n+      if (s1 != N)\n+\tabort ();\n+    }\n+\n+  s1 = 0;\n+  s2 = 0;\n+\n+#pragma acc parallel num_gangs (10) reduction (+:s1, s2) copy(s1, s2)\n+  {\n+    s1++;\n+    s2 += N;\n+  }\n+\n+  if (acc_get_device_type () != acc_device_nvidia)\n+    {\n+      if (s1 != 1)\n+\tabort ();\n+      if (s2 != N)\n+\tabort ();\n+    }\n+  else\n+    {\n+      if (s1 != N)\n+\tabort ();\n+      if (s2 != N*N)\n+\tabort ();\n+    }\n+\n+  s1 = 0;\n+\n+#pragma acc parallel num_gangs (10) reduction (+:s1) copy(s1)\n+  {\n+#pragma acc loop gang reduction (+:s1)\n+    for (i = 0; i < 10; i++)\n+      s1++;\n+  }\n+\n+  if (s1 != N)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "6d5222249b64ec6cf77122b0f1bbd39ad3c061e3", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr70289.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr70289.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr70289.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr70289.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,13 @@\n+int\n+main ()\n+{\n+  int i;\n+  static int temp;\n+\n+#pragma acc parallel reduction(+:temp)\n+  {\n+    temp++;\n+  }\n+\n+  return 0;\n+}"}, {"sha": "af629c83ef794cb4a3fd46c44e9ff247dce6bd4e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr70373.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr70373.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr70373.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr70373.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,20 @@\n+#define N 32\n+\n+int\n+foo (unsigned int sum)\n+{\n+#pragma acc parallel reduction (+:sum)\n+  {\n+    sum;\n+  }\n+\n+  return sum;\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned int sum = 0;\n+  foo (sum);\n+  return 0;\n+}"}, {"sha": "10eb2788bd9eda2572774afe13e4e7b49dcca9a7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-1.c", "status": "modified", "additions": 89, "deletions": 56, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-1.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,46 +1,59 @@\n /* { dg-do run } */\n \n+/* Ignore vector_length warnings for offloaded (nvptx) targets.  */\n+/* { dg-additional-options \"-foffload=-w\" } */\n+\n /* Integer reductions.  */\n \n #include <stdlib.h>\n-#include <stdbool.h>\n-\n-#define vl 32\n-\n-#define DO_PRAGMA(x) _Pragma (#x)\n-\n-#define check_reduction_op(type, op, init, b)\t\\\n-  {\t\t\t\t\t\t\\\n-    type res, vres;\t\t\t\t\\\n-    res = (init);\t\t\t\t\\\n-    DO_PRAGMA (acc parallel vector_length (vl) copy(res))\t\\\n-DO_PRAGMA (acc loop reduction (op:res))\\\n-    for (i = 0; i < n; i++)\t\t\t\\\n-      res = res op (b);\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-    vres = (init);\t\t\t\t\\\n-    for (i = 0; i < n; i++)\t\t\t\\\n-      vres = vres op (b);\t\t\t\\\n-\t\t\t\t\t\t\\\n-    if (res != vres)\t\t\t\t\\\n-      abort ();\t\t\t\t\t\\\n-  }\n+#include \"reduction.h\"\n+\n+const int ng = 8;\n+const int nw = 4;\n+const int vl = 32;\n \n static void\n-test_reductions_int (void)\n+test_reductions (void)\n {\n-  const int n = 1000;\n+  const int n = 100;\n   int i;\n   int array[n];\n \n   for (i = 0; i < n; i++)\n-    array[i] = i;\n-\n-  check_reduction_op (int, +, 0, array[i]);\n-  check_reduction_op (int, *, 1, array[i]);\n-  check_reduction_op (int, &, -1, array[i]);\n-  check_reduction_op (int, |, 0, array[i]);\n-  check_reduction_op (int, ^, 0, array[i]);\n+    array[i] = i+1;\n+\n+  /* Gang reductions.  */\n+  check_reduction_op (int, +, 0, array[i], num_gangs (ng), gang);\n+  check_reduction_op (int, *, 1, array[i], num_gangs (ng), gang);\n+  check_reduction_op (int, &, -1, array[i], num_gangs (ng), gang);\n+  check_reduction_op (int, |, 0, array[i], num_gangs (ng), gang);\n+  check_reduction_op (int, ^, 0, array[i], num_gangs (ng), gang);\n+\n+  /* Worker reductions.  */\n+  check_reduction_op (int, +, 0, array[i], num_workers (nw), worker);\n+  check_reduction_op (int, *, 1, array[i], num_workers (nw), worker);\n+  check_reduction_op (int, &, -1, array[i], num_workers (nw), worker);\n+  check_reduction_op (int, |, 0, array[i], num_workers (nw), worker);\n+  check_reduction_op (int, ^, 0, array[i], num_workers (nw), worker);\n+\n+  /* Vector reductions.  */\n+  check_reduction_op (int, +, 0, array[i], vector_length (vl), vector);\n+  check_reduction_op (int, *, 1, array[i], vector_length (vl), vector);\n+  check_reduction_op (int, &, -1, array[i], vector_length (vl), vector);\n+  check_reduction_op (int, |, 0, array[i], vector_length (vl), vector);\n+  check_reduction_op (int, ^, 0, array[i], vector_length (vl), vector);\n+\n+  /* Combined reductions.  */\n+  check_reduction_op (int, +, 0, array[i], num_gangs (ng) num_workers (nw)\n+\t\t      vector_length (vl), gang worker vector);\n+  check_reduction_op (int, *, 1, array[i], num_gangs (ng) num_workers (nw)\n+\t\t      vector_length (vl), gang worker vector);\n+  check_reduction_op (int, &, -1, array[i], num_gangs (ng) num_workers (nw)\n+\t\t      vector_length (vl), gang worker vector);\n+  check_reduction_op (int, |, 0, array[i], num_gangs (ng) num_workers (nw)\n+\t\t      vector_length (vl), gang worker vector);\n+  check_reduction_op (int, ^, 0, array[i], num_gangs (ng) num_workers (nw)\n+\t\t      vector_length (vl), gang worker vector);\n }\n \n static void\n@@ -55,29 +68,31 @@ test_reductions_bool (void)\n     array[i] = i;\n \n   cmp_val = 5;\n-  check_reduction_op (bool, &&, true, (cmp_val > array[i]));\n-  check_reduction_op (bool, ||, false, (cmp_val > array[i]));\n-}\n \n-#define check_reduction_macro(type, op, init, b)\t\\\n-  {\t\t\t\t\t\t\t\\\n-    type res, vres;\t\t\t\t\t\\\n-    res = (init);\t\t\t\t\t\\\n-DO_PRAGMA (acc parallel vector_length (vl) copy(res))\\\n-DO_PRAGMA (acc loop reduction (op:res))\\\n-    for (i = 0; i < n; i++)\t\t\t\t\\\n-      res = op (res, (b));\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-    vres = (init);\t\t\t\t\t\\\n-    for (i = 0; i < n; i++)\t\t\t\t\\\n-      vres = op (vres, (b));\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-    if (res != vres)\t\t\t\t\t\\\n-      abort ();\t\t\t\t\t\t\\\n-  }\n-\n-#define max(a, b) (((a) > (b)) ? (a) : (b))\n-#define min(a, b) (((a) < (b)) ? (a) : (b))\n+  /* Gang reductions.  */\n+  check_reduction_op (int, &&, 1, (cmp_val > array[i]), num_gangs (ng),\n+\t\t      gang);\n+  check_reduction_op (int, ||, 0, (cmp_val > array[i]), num_gangs (ng),\n+\t\t      gang);\n+\n+  /* Worker reductions.  */\n+  check_reduction_op (int, &&, 1, (cmp_val > array[i]), num_workers (nw),\n+\t\t      worker);\n+  check_reduction_op (int, ||, 0, (cmp_val > array[i]), num_workers (nw),\n+\t\t      worker);\n+\n+  /* Vector reductions.  */\n+  check_reduction_op (int, &&, 1, (cmp_val > array[i]), vector_length (vl),\n+\t\t      vector);\n+  check_reduction_op (int, ||, 0, (cmp_val > array[i]), vector_length (vl),\n+\t\t      vector);\n+\n+  /* Combined reductions.  */\n+  check_reduction_op (int, &&, 1, (cmp_val > array[i]), num_gangs (ng)\n+\t\t      num_workers (nw) vector_length (vl), gang worker vector);\n+  check_reduction_op (int, ||, 0, (cmp_val > array[i]), num_gangs (ng)\n+\t\t      num_workers (nw) vector_length (vl), gang worker vector);\n+}\n \n static void\n test_reductions_minmax (void)\n@@ -89,14 +104,32 @@ test_reductions_minmax (void)\n   for (i = 0; i < n; i++)\n     array[i] = i;\n \n-  check_reduction_macro (int, min, n + 1, array[i]);\n-  check_reduction_macro (int, max, -1, array[i]);\n+  /* Gang reductions.  */\n+  check_reduction_macro (int, min, n + 1, array[i], num_gangs (ng), gang);\n+  check_reduction_macro (int, max, -1, array[i], num_gangs (ng), gang);\n+\n+  /* Worker reductions.  */\n+  check_reduction_macro (int, min, n + 1, array[i], num_workers (nw), worker);\n+  check_reduction_macro (int, max, -1, array[i], num_workers (nw), worker);\n+\n+  /* Vector reductions.  */\n+  check_reduction_macro (int, min, n + 1, array[i], vector_length (vl),\n+\t\t\t vector);\n+  check_reduction_macro (int, max, -1, array[i], vector_length (vl), vector);\n+\n+  /* Combined reductions.  */\n+  check_reduction_macro (int, min, n + 1, array[i], num_gangs (ng)\n+\t\t\t num_workers (nw) vector_length (vl), gang worker\n+\t\t\t vector);\n+  check_reduction_macro (int, max, -1, array[i], num_gangs (ng)\n+\t\t\t num_workers (nw) vector_length (vl), gang worker\n+\t\t\t vector);\n }\n \n int\n main (void)\n {\n-  test_reductions_int ();\n+  test_reductions ();\n   test_reductions_bool ();\n   test_reductions_minmax ();\n   return 0;"}, {"sha": "7cb94971559b0d60acf6018881db5f57aee4f293", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-2.c", "status": "modified", "additions": 61, "deletions": 102, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-2.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,124 +1,83 @@\n /* { dg-do run } */\n \n+/* Ignore vector_length warnings for offloaded (nvptx) targets.  */\n+/* { dg-additional-options \"-foffload=-w\" } */\n+\n /* float reductions.  */\n \n #include <stdlib.h>\n-#include <stdbool.h>\n-#include <math.h>\n+#include \"reduction.h\"\n \n-#define vl 32\n+const int ng = 8;\n+const int nw = 4;\n+const int vl = 32;\n \n-int\n-main(void)\n+static void\n+test_reductions (void)\n {\n-  const int n = 1000;\n+  const int n = 100;\n   int i;\n-  float vresult, result, array[n];\n-  bool lvresult, lresult;\n+  float array[n];\n \n   for (i = 0; i < n; i++)\n-    array[i] = i;\n-\n-  result = 0;\n-  vresult = 0;\n+    array[i] = i+1;\n \n-  /* '+' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(result)\n-#pragma acc loop reduction (+:result)\n-  for (i = 0; i < n; i++)\n-    result += array[i];\n+  /* Gang reductions.  */\n+  check_reduction_op (float, +, 0, array[i], num_gangs (ng), gang);\n+  check_reduction_op (float, *, 1, array[i], num_gangs (ng), gang);\n \n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult += array[i];\n-\n-  if (result != vresult)\n-    abort ();\n-\n-  result = 0;\n-  vresult = 0;\n-\n-  /* '*' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(result)\n-#pragma acc loop reduction (*:result)\n-  for (i = 0; i < n; i++)\n-    result *= array[i];\n+  /* Worker reductions.  */\n+  check_reduction_op (float, +, 0, array[i], num_workers (nw), worker);\n+  check_reduction_op (float, *, 1, array[i], num_workers (nw), worker);\n \n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult *= array[i];\n-\n-  if (fabs(result - vresult) > .0001)\n-    abort ();\n-  result = 0;\n-  vresult = 0;\n-\n-  /* 'max' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(result)\n-#pragma acc loop reduction (max:result)\n-  for (i = 0; i < n; i++)\n-    result = result > array[i] ? result : array[i];\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult = vresult > array[i] ? vresult : array[i];\n-\n-  if (result != vresult)\n-    abort ();\n-\n-  result = 0;\n-  vresult = 0;\n-\n-  /* 'min' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(result)\n-#pragma acc loop reduction (min:result)\n-  for (i = 0; i < n; i++)\n-    result = result < array[i] ? result : array[i];\n+  /* Vector reductions.  */\n+  check_reduction_op (float, +, 0, array[i], vector_length (vl), vector);\n+  check_reduction_op (float, *, 1, array[i], vector_length (vl), vector);\n \n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult = vresult < array[i] ? vresult : array[i];\n-\n-  if (result != vresult)\n-    abort ();\n-\n-  result = 5;\n-  vresult = 5;\n-\n-  lresult = false;\n-  lvresult = false;\n-\n-  /* '&&' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(lresult)\n-#pragma acc loop reduction (&&:lresult)\n-  for (i = 0; i < n; i++)\n-    lresult = lresult && (result > array[i]);\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    lvresult = lresult && (result > array[i]);\n-\n-  if (lresult != lvresult)\n-    abort ();\n-\n-  result = 5;\n-  vresult = 5;\n-\n-  lresult = false;\n-  lvresult = false;\n+  /* Combined reductions.  */\n+  check_reduction_op (float, +, 0, array[i], num_gangs (ng) num_workers (nw)\n+\t\t      vector_length (vl), gang worker vector);\n+  check_reduction_op (float, *, 1, array[i], num_gangs (ng) num_workers (nw)\n+\t\t      vector_length (vl), gang worker vector);\n+}\n \n-  /* '||' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(lresult)\n-#pragma acc loop reduction (||:lresult)\n-  for (i = 0; i < n; i++)\n-    lresult = lresult || (result > array[i]);\n+static void\n+test_reductions_minmax (void)\n+{\n+  const int n = 1000;\n+  int i;\n+  float array[n];\n \n-  /* Verify the reduction.  */\n   for (i = 0; i < n; i++)\n-    lvresult = lresult || (result > array[i]);\n+    array[i] = i;\n \n-  if (lresult != lvresult)\n-    abort ();\n+  /* Gang reductions.  */\n+  check_reduction_macro (float, min, n + 1, array[i], num_gangs (ng), gang);\n+  check_reduction_macro (float, max, -1, array[i], num_gangs (ng), gang);\n+\n+  /* Worker reductions.  */\n+  check_reduction_macro (float, min, n + 1, array[i], num_workers (nw),\n+\t\t\t worker);\n+  check_reduction_macro (float, max, -1, array[i], num_workers (nw), worker);\n+\n+  /* Vector reductions.  */\n+  check_reduction_macro (float, min, n + 1, array[i], vector_length (vl),\n+\t\t\t vector);\n+  check_reduction_macro (float, max, -1, array[i], vector_length (vl), vector);\n+\n+  /* Combined reductions.  */\n+  check_reduction_macro (float, min, n + 1, array[i], num_gangs (ng)\n+\t\t\t num_workers (nw) vector_length (vl), gang worker\n+\t\t\t vector);\n+  check_reduction_macro (float, max, -1, array[i], num_gangs (ng)\n+\t\t\t num_workers (nw)vector_length (vl), gang worker\n+\t\t\t vector);\n+}\n \n+int\n+main (void)\n+{\n+  test_reductions ();\n+  test_reductions_minmax ();\n   return 0;\n }"}, {"sha": "1b948bef5a04bcba1ce81dfafb7d35b75021b607", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-3.c", "status": "modified", "additions": 62, "deletions": 71, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-3.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,93 +1,84 @@\n /* { dg-do run } */\n \n+/* Ignore vector_length warnings for offloaded (nvptx) targets.  */\n+/* { dg-additional-options \"-foffload=-w\" } */\n+\n /* double reductions.  */\n \n #include <stdlib.h>\n-#include <stdbool.h>\n-#include <math.h>\n+#include \"reduction.h\"\n \n-#define vl 32\n+const int ng = 8;\n+const int nw = 4;\n+const int vl = 32;\n \n-int\n-main(void)\n+static void\n+test_reductions (void)\n {\n-  const int n = 1000;\n+  const int n = 10;\n   int i;\n-  double vresult, result, array[n];\n-  bool lvresult, lresult;\n-\n-  for (i = 0; i < n; i++)\n-    array[i] = i;\n-\n-  result = 0;\n-  vresult = 0;\n-\n-  /* 'max' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(result)\n-#pragma acc loop reduction (max:result)\n-  for (i = 0; i < n; i++)\n-    result = result > array[i] ? result : array[i];\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    vresult = vresult > array[i] ? vresult : array[i];\n-\n-  if (result != vresult)\n-    abort ();\n-\n-  result = 0;\n-  vresult = 0;\n-\n-  /* 'min' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(result)\n-#pragma acc loop reduction (min:result)\n-  for (i = 0; i < n; i++)\n-    result = result < array[i] ? result : array[i];\n+  double array[n];\n \n-  /* Verify the reduction.  */\n   for (i = 0; i < n; i++)\n-    vresult = vresult < array[i] ? vresult : array[i];\n+    array[i] = i+1;\n \n-  if (result != vresult)\n-    abort ();\n+  /* Gang reductions.  */\n+  check_reduction_op (double, +, 0, array[i], num_gangs (ng), gang);\n+  check_reduction_op (double, *, 1, array[i], num_gangs (ng), gang);\n \n-  result = 5;\n-  vresult = 5;\n+  /* Worker reductions.  */\n+  check_reduction_op (double, +, 0, array[i], num_workers (nw), worker);\n+  check_reduction_op (double, *, 1, array[i], num_workers (nw), worker);\n \n-  lresult = false;\n-  lvresult = false;\n+  /* Vector reductions.  */\n+  check_reduction_op (double, +, 0, array[i], vector_length (vl), vector);\n+  check_reduction_op (double, *, 1, array[i], vector_length (vl), vector);\n \n-  /* '&&' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(lresult)\n-#pragma acc loop reduction (&&:lresult)\n-  for (i = 0; i < n; i++)\n-    lresult = lresult && (result > array[i]);\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    lvresult = lresult && (result > array[i]);\n-\n-  if (lresult != lvresult)\n-    abort ();\n-\n-  result = 5;\n-  vresult = 5;\n-\n-  lresult = false;\n-  lvresult = false;\n+  /* Combined reductions.  */\n+  check_reduction_op (double, +, 0, array[i], num_gangs (ng)  num_workers (nw)\n+\t\t      vector_length (vl), gang worker vector);\n+  check_reduction_op (double, *, 1, array[i], num_gangs (ng)  num_workers (nw)\n+\t\t      vector_length (vl), gang worker vector);\n+}\n \n-  /* '||' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(lresult)\n-#pragma acc loop reduction (||:lresult)\n-  for (i = 0; i < n; i++)\n-    lresult = lresult || (result > array[i]);\n+static void\n+test_reductions_minmax (void)\n+{\n+  const int n = 1000;\n+  int i;\n+  double array[n];\n \n-  /* Verify the reduction.  */\n   for (i = 0; i < n; i++)\n-    lvresult = lresult || (result > array[i]);\n+    array[i] = i;\n \n-  if (lresult != lvresult)\n-    abort ();\n+  /* Gang reductions.  */\n+  check_reduction_macro (double, min, n + 1, array[i], num_gangs (ng), gang);\n+  check_reduction_macro (double, max, -1, array[i], num_gangs (ng), gang);\n+\n+  /* Worker reductions.  */\n+  check_reduction_macro (double, min, n + 1, array[i], num_workers (nw),\n+\t\t\t worker);\n+  check_reduction_macro (double, max, -1, array[i], num_workers (nw), worker);\n+\n+  /* Vector reductions.  */\n+  check_reduction_macro (double, min, n + 1, array[i], vector_length (vl),\n+\t\t\t vector);\n+  check_reduction_macro (double, max, -1, array[i], vector_length (vl),\n+\t\t\t vector);\n+\n+  /* Combined reductions.  */\n+  check_reduction_macro (double, min, n + 1, array[i], num_gangs (ng)\n+\t\t\t num_workers (nw) vector_length (vl), gang worker\n+\t\t\t vector);\n+  check_reduction_macro (double, max, -1, array[i], num_gangs (ng)\n+\t\t\t num_workers (nw) vector_length (vl), gang worker\n+\t\t\t vector);\n+}\n \n+int\n+main (void)\n+{\n+  test_reductions ();\n+  test_reductions_minmax ();\n   return 0;\n }"}, {"sha": "79355eded80b86a76054a6d180b840e76fc90af6", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-4.c", "status": "modified", "additions": 41, "deletions": 44, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-4.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,59 +1,56 @@\n /* { dg-do run { target { ! { hppa*-*-hpux* } } } } */\n \n+/* Ignore vector_length warnings for offloaded (nvptx) targets.  */\n+/* { dg-additional-options \"-foffload=-w\" } */\n+\n /* complex reductions.  */\n \n #include <stdlib.h>\n-#include <stdbool.h>\n-#include <math.h>\n #include <complex.h>\n+#include \"reduction.h\"\n \n-#define vl 32\n+const int ng = 8;\n+const int nw = 4;\n+const int vl = 32;\n \n-int\n-main(void)\n+static void\n+test_reductions (void)\n {\n-  const int n = 1000;\n+  const int n = 10;\n   int i;\n-  double _Complex vresult, result, array[n];\n-  bool lvresult, lresult;\n-\n-  for (i = 0; i < n; i++)\n-    array[i] = i;\n-\n-  result = 0;\n-  vresult = 0;\n-\n-  /* '&&' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(lresult)\n-#pragma acc loop reduction (&&:lresult)\n-  for (i = 0; i < n; i++)\n-    lresult = lresult && (creal(result) > creal(array[i]));\n-\n-  /* Verify the reduction.  */\n-  for (i = 0; i < n; i++)\n-    lvresult = lresult && (creal(result) > creal(array[i]));\n+  double _Complex array[n];\n \n-  if (lresult != lvresult)\n-    abort ();\n-\n-  result = 5;\n-  vresult = 5;\n-\n-  lresult = false;\n-  lvresult = false;\n-\n-  /* '||' reductions.  */\n-#pragma acc parallel vector_length (vl) copy(lresult)\n-#pragma acc loop reduction (||:lresult)\n-  for (i = 0; i < n; i++)\n-    lresult = lresult || (creal(result) > creal(array[i]));\n-\n-  /* Verify the reduction.  */\n   for (i = 0; i < n; i++)\n-    lvresult = lresult || (creal(result) > creal(array[i]));\n-\n-  if (lresult != lvresult)\n-    abort ();\n+    array[i] = i+1;\n+\n+  /* Gang reductions.  */\n+  check_reduction_op (double, +, 0, creal (array[i]), num_gangs (ng), gang);\n+  check_reduction_op (double, *, 1, creal (array[i]), num_gangs (ng), gang);\n+\n+  /* Worker reductions.  */\n+  check_reduction_op (double, +, 0, creal (array[i]), num_workers (nw),\n+\t\t      worker);\n+  check_reduction_op (double, *, 1, creal (array[i]), num_workers (nw),\n+\t\t      worker);\n+\n+  /* Vector reductions.  */\n+  check_reduction_op (double, +, 0, creal (array[i]), vector_length (vl),\n+\t\t      vector);\n+  check_reduction_op (double, *, 1, creal (array[i]), vector_length (vl),\n+\t\t      vector);\n+\n+  /* Combined reductions.  */\n+  check_reduction_op (double, +, 0, creal (array[i]), num_gangs (ng)\n+\t\t\t num_workers (nw) vector_length (vl), gang worker\n+\t\t\t vector);\n+  check_reduction_op (double, *, 1, creal (array[i]), num_gangs (ng)\n+\t\t\t num_workers (nw) vector_length (vl), gang worker\n+\t\t\t vector);\n+}\n \n+int\n+main (void)\n+{\n+  test_reductions ();\n   return 0;\n }"}, {"sha": "46b553a61ff6d37f45398e0893c2da3e5c76faad", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-5.c", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-5.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,32 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-w\" } */\n+\n+/* Ignore vector_length warnings for offloaded (nvptx) targets.  */\n+/* { dg-additional-options \"-foffload=-w\" } */\n+\n+/* Multiple reductions.  */\n+\n #include <stdio.h>\n #include <stdlib.h>\n \n+const int ng = 8;\n+const int nw = 4;\n+const int vl = 32;\n+\n+const int n = 100;\n+\n+#define DO_PRAGMA(x) _Pragma (#x)\n+\n+#define check_reduction(gwv_par, gwv_loop)\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+  s1 = 2; s2 = 5;\t\t\t\t\t\\\n+DO_PRAGMA (acc parallel gwv_par copy (s1, s2))\t\t\\\n+DO_PRAGMA (acc loop gwv_loop reduction (+:s1, s2))\t\\\n+    for (i = 0; i < n; i++)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+         s1 = s1 + 3;\t\t\t\t\t\\\n+         s2 = s2 + 5;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\\\n+    if (s1 != v1 && s2 != v2)\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\\\n+  }\n+\n int\n main (void)\n {\n   int s1 = 2, s2 = 5, v1 = 2, v2 = 5;\n-  int n = 100;\n   int i;\n \n-#pragma acc parallel vector_length (32) copy(s1,s2)\n-#pragma acc loop reduction (+:s1, s2)\n-  for (i = 0; i < n; i++)\n-    {\n-      s1 = s1 + 3;\n-      s2 = s2 + 2;\n-    }\n-\n   for (i = 0; i < n; i++)\n     {\n       v1 = v1 + 3;\n       v2 = v2 + 2;\n     }\n-  \n-  if (s1 != v1)\n-    abort ();\n-  \n-  if (s2 != v2)\n-    abort ();\n-    \n+\n+  check_reduction (num_gangs (ng), gang);\n+\n+  /* Nvptx targets require a vector_length or 32 in to allow spinlocks with\n+     gangs.  */\n+  check_reduction (num_workers (nw) vector_length (vl), worker);\n+  check_reduction (vector_length (vl), vector);\n+  check_reduction (num_gangs (ng) num_workers (nw) vector_length (vl), gang\n+\t\t   worker vector);\n+\n   return 0;\n }"}, {"sha": "af30b31bd344f0d814c00b0424fef2f8e16ce729", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-6.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-6.c?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-w\" } */\n+\n+/* Test reductions on explicitly private variables.  */\n+\n+#include <assert.h>\n+\n+int\n+main ()\n+{\n+  int i, j, red[10];\n+  int v;\n+\n+  for (i = 0; i < 10; i++)\n+    red[i] = -1;\n+\n+#pragma acc parallel copyout(red)\n+  {\n+#pragma acc loop gang private(v)\n+    for (j = 0; j < 10; j++)\n+      {\n+\tv = j;\n+\n+#pragma acc loop vector reduction (+:v)\n+\tfor (i = 0; i < 100; i++)\n+\t  v++;\n+\n+\tred[j] = v;\n+      }\n+  }\n+\n+  for (i = 0; i < 10; i++)\n+    assert (red[i] == i + 100);\n+\n+  return 0;\n+}"}, {"sha": "1b3f8d45ace50d40d035c026b891644c41f43b77", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction.h?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,43 @@\n+#ifndef REDUCTION_H\n+#define REDUCTION_H\n+\n+#define DO_PRAGMA(x) _Pragma (#x)\n+\n+#define check_reduction_op(type, op, init, b, gwv_par, gwv_loop)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    type res, vres;\t\t\t\t\t\t\t\\\n+    res = (init);\t\t\t\t\t\t\t\\\n+DO_PRAGMA (acc parallel gwv_par copy (res))\t\t\t\t\\\n+DO_PRAGMA (acc loop gwv_loop reduction (op:res))\t\t\t\\\n+    for (i = 0; i < n; i++)\t\t\t\t\t\t\\\n+      res = res op (b);\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    vres = (init);\t\t\t\t\t\t\t\\\n+    for (i = 0; i < n; i++)\t\t\t\t\t\t\\\n+      vres = vres op (b);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    if (res != vres)\t\t\t\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define check_reduction_macro(type, op, init, b, gwv_par, gwv_loop)\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    type res, vres;\t\t\t\t\t\t\t\\\n+    res = (init);\t\t\t\t\t\t\t\\\n+    DO_PRAGMA (acc parallel gwv_par copy(res))\t\t\t\t\\\n+DO_PRAGMA (acc loop gwv_loop reduction (op:res))\t\t\t\\\n+    for (i = 0; i < n; i++)\t\t\t\t\t\t\\\n+      res = op (res, (b));\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    vres = (init);\t\t\t\t\t\t\t\\\n+    for (i = 0; i < n; i++)\t\t\t\t\t\t\\\n+      vres = op (vres, (b));\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    if (res != vres)\t\t\t\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#define max(a, b) (((a) > (b)) ? (a) : (b))\n+#define min(a, b) (((a) < (b)) ? (a) : (b))\n+\n+#endif"}, {"sha": "31db7e12454d4a9e74c74de3024cf3028c949bb9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-reduction.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do run }\n+! { dg-additional-options \"-w\" }\n+\n+program reduction\n+  implicit none\n+  integer, parameter :: n = 10\n+  integer s1, s2\n+  include \"openacc_lib.h\"\n+\n+  s1 = 0\n+  s2 = 0\n+\n+  !$acc parallel reduction(+:s1,s2) num_gangs (n) copy(s1)\n+  s1 = s1 + 1\n+  s2 = s2 + 1\n+  !$acc end parallel\n+\n+  if (acc_get_device_type () .eq. acc_device_nvidia) then\n+     if (s1 .ne. n) call abort\n+     if (s2 .ne. n) call abort\n+  else\n+     if (s1 .ne. 1) call abort\n+     if (s2 .ne. 1) call abort\n+  end if\n+\n+  ! Test reductions inside subroutines\n+\n+  s1 = 0\n+  s2 = 0\n+  call redsub (s1, s2, n)\n+\n+  if (acc_get_device_type () .eq. acc_device_nvidia) then\n+     if (s1 .ne. n) call abort\n+  else\n+     if (s2 .ne. 1) call abort\n+  end if\n+end program reduction\n+\n+subroutine redsub(s1, s2, n)\n+  implicit none\n+  integer :: s1, s2, n\n+\n+  !$acc parallel reduction(+:s1,s2) num_gangs (10)  copy(s1)\n+  s1 = s1 + 1\n+  s2 = s2 + 1\n+  !$acc end parallel\n+end subroutine redsub"}, {"sha": "63bde44100da8eaa181d875319f3e63f8f2cf8f0", "filename": "libgomp/testsuite/libgomp.oacc-fortran/pr70289.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr70289.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr70289.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr70289.f90?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,20 @@\n+program foo\n+  implicit none\n+  integer :: i\n+  integer :: temp = 0\n+  integer :: temp2 = 0\n+\n+  !$acc parallel\n+  !$acc loop gang private(temp)\n+  do i=1, 10000\n+     temp = 0\n+  enddo\n+  !$acc end parallel\n+\n+  !$acc parallel reduction(+:temp2)\n+  !$acc loop gang reduction(+:temp2)\n+  do i=1, 10000\n+     temp2 = 0\n+  enddo\n+  !$acc end parallel\n+end program foo"}, {"sha": "e51509f33972273f5eb4cd965201b7b15af8fdb1", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-1.f90", "status": "modified", "additions": 395, "deletions": 75, "changes": 470, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-1.f90?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,28 +1,55 @@\n ! { dg-do run }\n+! { dg-additional-options \"-w\" }\n \n ! Integer reductions\n \n program reduction_1\n   implicit none\n \n-  integer, parameter    :: n = 10, vl = 32\n-  integer               :: i, vresult, result\n-  logical               :: lresult, lvresult\n+  integer, parameter    :: n = 10, ng = 8, nw = 4, vl = 32\n+  integer               :: i, vresult, rg, rw, rv, rc\n+  logical               :: lrg, lrw, lrv, lrc, lvresult\n   integer, dimension (n) :: array\n \n   do i = 1, n\n      array(i) = i\n   end do\n \n-  result = 0\n+  !\n+  ! '+' reductions\n+  !\n+\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n   vresult = 0\n \n-  ! '+' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(+:rg) gang\n+  do i = 1, n\n+     rg = rg + array(i)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(+:result)\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(+:rw) worker\n   do i = 1, n\n-     result = result + array(i)\n+     rw = rw + array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(+:rv) vector\n+  do i = 1, n\n+     rv = rv + array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(+:rc) gang worker vector\n+  do i = 1, n\n+     rc = rc + array(i)\n   end do\n   !$acc end parallel\n \n@@ -31,17 +58,46 @@ program reduction_1\n      vresult = vresult + array(i)\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  result = 0\n-  vresult = 0\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n \n+  !\n   ! '*' reductions\n+  !\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(*:result)\n+  rg = 1\n+  rw = 1\n+  rv = 1\n+  rc = 1\n+  vresult = 1\n+\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(*:rg) gang\n   do i = 1, n\n-     result = result * array(i)\n+     rg = rg * array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(*:rw) worker\n+  do i = 1, n\n+     rw = rw * array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(*:rv) vector\n+  do i = 1, n\n+     rv = rv * array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(*:rc) gang worker vector\n+  do i = 1, n\n+     rc = rc * array(i)\n   end do\n   !$acc end parallel\n \n@@ -50,17 +106,46 @@ program reduction_1\n      vresult = vresult * array(i)\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n+\n+  !\n+  ! 'max' reductions\n+  !\n \n-  result = 0\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n   vresult = 0\n \n-  ! 'max' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(max:rg) gang\n+  do i = 1, n\n+     rg = max (rg, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(max:rw) worker\n+  do i = 1, n\n+     rw = max (rw, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(max:rv) vector\n+  do i = 1, n\n+     rv = max (rv, array(i))\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(max:result)\n+  !$acc parallel num_gangs(ng) Num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(max:rc) gang worker vector\n   do i = 1, n\n-     result = max (result, array(i))\n+     rc = max (rc, array(i))\n   end do\n   !$acc end parallel\n \n@@ -69,17 +154,46 @@ program reduction_1\n      vresult = max (vresult, array(i))\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  result = 1\n-  vresult = 1\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n \n+  !\n   ! 'min' reductions\n+  !\n+\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n+  vresult = 0\n+\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(min:rg) gang\n+  do i = 1, n\n+     rg = min (rg, array(i))\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(min:result)\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(min:rw) worker\n   do i = 1, n\n-     result = min (result, array(i))\n+     rw = min (rw, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(min:rv) vector\n+  do i = 1, n\n+     rv = min (rv, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(min:rc) gang worker vector\n+  do i = 1, n\n+     rc = min (rc, array(i))\n   end do\n   !$acc end parallel\n \n@@ -88,17 +202,46 @@ program reduction_1\n      vresult = min (vresult, array(i))\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n+\n+  !\n+  ! 'iand' reductions\n+  !\n \n-  result = 1\n+  rg = 1\n+  rw = 1\n+  rv = 1\n+  rc = 1\n   vresult = 1\n \n-  ! 'iand' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(iand:rg) gang\n+  do i = 1, n\n+     rg = iand (rg, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(iand:rw) worker\n+  do i = 1, n\n+     rw = iand (rw, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(iand:rv) vector\n+  do i = 1, n\n+     rv = iand (rv, array(i))\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(iand:result)\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(iand:rc) gang worker vector\n   do i = 1, n\n-     result = iand (result, array(i))\n+     rc = iand (rc, array(i))\n   end do\n   !$acc end parallel\n \n@@ -107,17 +250,46 @@ program reduction_1\n      vresult = iand (vresult, array(i))\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  result = 1\n-  vresult = 1\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n \n+  !\n   ! 'ior' reductions\n+  !\n+\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n+  vresult = 0\n+\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(ior:rg) gang\n+  do i = 1, n\n+     rg = ior (rg, array(i))\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(ior:result)\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(ior:rw) worker\n   do i = 1, n\n-     result = ior (result, array(i))\n+     rw = ior (rw, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(ior:rv) gang\n+  do i = 1, n\n+     rv = ior (rv, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(ior:rc) gang worker vector\n+  do i = 1, n\n+     rc = ior (rc, array(i))\n   end do\n   !$acc end parallel\n \n@@ -126,17 +298,46 @@ program reduction_1\n      vresult = ior (vresult, array(i))\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n \n-  result = 0\n+  !\n+  ! 'ieor' reductions\n+  !\n+\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n   vresult = 0\n \n-  ! 'ieor' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(ieor:rg) gang\n+  do i = 1, n\n+     rg = ieor (rg, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(ieor:rw) worker\n+  do i = 1, n\n+     rw = ieor (rw, array(i))\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(ieor:result)\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(ieor:rv) vector\n   do i = 1, n\n-     result = ieor (result, array(i))\n+     rv = ieor (rv, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(ieor:rc) gang worker vector\n+  do i = 1, n\n+     rc = ieor (rc, array(i))\n   end do\n   !$acc end parallel\n \n@@ -145,17 +346,46 @@ program reduction_1\n      vresult = ieor (vresult, array(i))\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  lresult = .false.\n-  lvresult = .false.\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n \n+  !\n   ! '.and.' reductions\n+  !\n+\n+  lrg = .true.\n+  lrw = .true.\n+  lrv = .true.\n+  lrc = .true.\n+  lvresult = .true.\n+\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.and.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .and. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.and.:lrw) worker\n+  do i = 1, n\n+     lrw = lrw .and. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.and.:lrv) vector\n+  do i = 1, n\n+     lrv = lrv .and. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.and.:lresult)\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.and.:lrc) gang worker vector\n   do i = 1, n\n-     lresult = lresult .and. (array(i) .ge. 5)\n+     lrc = lrc .and. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -164,17 +394,46 @@ program reduction_1\n      lvresult = lvresult .and. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n+\n+  !\n+  ! '.or.' reductions\n+  !\n \n-  lresult = .false.\n+  lrg = .true.\n+  lrw = .true.\n+  lrv = .true.\n+  lrc = .true.\n   lvresult = .false.\n \n-  ! '.or.' reductions\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.or.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .or. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.or.:lrw) worker\n+  do i = 1, n\n+     lrw = lrw .or. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.or.:lrv) vector\n+  do i = 1, n\n+     lrv = lrv .or. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.or.:lresult)\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.or.:lrc) gang worker vector\n   do i = 1, n\n-     lresult = lresult .or. (array(i) .ge. 5)\n+     lrc = lrc .or. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -183,17 +442,46 @@ program reduction_1\n      lvresult = lvresult .or. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  lresult = .false.\n-  lvresult = .false.\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n \n+  !\n   ! '.eqv.' reductions\n+  !\n+\n+  lrg = .true.\n+  lrw = .true.\n+  lrv = .true.\n+  lrc = .true.\n+  lvresult = .true.\n+\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.eqv.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .eqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.eqv.:lrw) worker\n+  do i = 1, n\n+     lrw = lrw .eqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.eqv.:lrv) vector\n+  do i = 1, n\n+     lrv = lrv .eqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.eqv.:lresult)\n+  !$acc parallel num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.eqv.:lrc) gang worker vector\n   do i = 1, n\n-     lresult = lresult .eqv. (array(i) .ge. 5)\n+     lrc = lrc .eqv. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -202,17 +490,46 @@ program reduction_1\n      lvresult = lvresult .eqv. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  lresult = .false.\n-  lvresult = .false.\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n \n+  !\n   ! '.neqv.' reductions\n+  !\n+\n+  lrg = .true.\n+  lrw = .true.\n+  lrv = .true.\n+  lrc = .true.\n+  lvresult = .true.\n+\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.neqv.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .neqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.neqv.:lrw) worker\n+  do i = 1, n\n+     lrw = lrw .neqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.neqv.:lrv) vector\n+  do i = 1, n\n+     lrv = lrv .neqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.neqv.:lresult)\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.neqv.:lrc) gang worker vector\n   do i = 1, n\n-     lresult = lresult .neqv. (array(i) .ge. 5)\n+     lrc = lrc .neqv. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -221,5 +538,8 @@ program reduction_1\n      lvresult = lvresult .neqv. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n end program reduction_1"}, {"sha": "b828feb60de1292e3af6025791276360c25a0708", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-2.f90", "status": "modified", "additions": 288, "deletions": 56, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-2.f90?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -5,26 +5,52 @@\n program reduction_2\n   implicit none\n \n-  integer, parameter    :: n = 10, vl = 32\n+  integer, parameter    :: n = 10, ng = 8, nw = 4, vl = 32\n   integer               :: i\n-  real, parameter       :: e = .001\n-  real                  :: vresult, result\n-  logical               :: lresult, lvresult\n-  real, dimension (n) :: array\n+  real                  :: vresult, rg, rw, rv, rc\n+  real, parameter       :: e = 0.001\n+  logical               :: lrg, lrw, lrv, lrc, lvresult\n+  real, dimension (n)   :: array\n \n   do i = 1, n\n      array(i) = i\n   end do\n \n-  result = 0\n+  !\n+  ! '+' reductions\n+  !\n+\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n   vresult = 0\n \n-  ! '+' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(+:rg) gang\n+  do i = 1, n\n+     rg = rg + array(i)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(+:result)\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(+:rw) worker\n   do i = 1, n\n-     result = result + array(i)\n+     rw = rw + array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(+:rv) vector\n+  do i = 1, n\n+     rv = rv + array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(+:rc) gang worker vector\n+  do i = 1, n\n+     rc = rc + array(i)\n   end do\n   !$acc end parallel\n \n@@ -33,17 +59,46 @@ program reduction_2\n      vresult = vresult + array(i)\n   end do\n \n-  if (abs (result - vresult) .ge. e) call abort\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n+\n+  !\n+  ! '*' reductions\n+  !\n \n-  result = 1\n+  rg = 1\n+  rw = 1\n+  rv = 1\n+  rc = 1\n   vresult = 1\n \n-  ! '*' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(*:rg) gang\n+  do i = 1, n\n+     rg = rg * array(i)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(*:result)\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(*:rw) worker\n   do i = 1, n\n-     result = result * array(i)\n+     rw = rw * array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(*:rv) vector\n+  do i = 1, n\n+     rv = rv * array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(*:rc) gang worker vector\n+  do i = 1, n\n+     rc = rc * array(i)\n   end do\n   !$acc end parallel\n \n@@ -52,17 +107,46 @@ program reduction_2\n      vresult = vresult * array(i)\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (abs (rg - vresult) .ge. e) call abort\n+  if (abs (rw - vresult) .ge. e) call abort\n+  if (abs (rv - vresult) .ge. e) call abort\n+  if (abs (rc - vresult) .ge. e) call abort\n+\n+  !\n+  ! 'max' reductions\n+  !\n \n-  result = 0\n+  rg = 0\n+  rw = 0\n+  rg = 0\n+  rc = 0\n   vresult = 0\n \n-  ! 'max' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(max:rg) gang\n+  do i = 1, n\n+     rg = max (rg, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(max:rw) worker\n+  do i = 1, n\n+     rw = max (rw, array(i))\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(max:result)\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(max:rv) vector\n   do i = 1, n\n-     result = max (result, array(i))\n+     rv = max (rv, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(max:rc) gang worker vector\n+  do i = 1, n\n+     rc = max (rc, array(i))\n   end do\n   !$acc end parallel\n \n@@ -71,17 +155,46 @@ program reduction_2\n      vresult = max (vresult, array(i))\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  result = 1\n-  vresult = 1\n+  if (abs (rg - vresult) .ge. e) call abort\n+  if (abs (rw - vresult) .ge. e) call abort\n+  if (abs (rg - vresult) .ge. e) call abort\n+  if (abs (rc - vresult) .ge. e) call abort\n \n+  !\n   ! 'min' reductions\n+  !\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(min:result)\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n+  vresult = 0\n+\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(min:rg) gang\n+  do i = 1, n\n+     rg = min (rg, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(min:rw) worker\n+  do i = 1, n\n+     rw = min (rw, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(min:rv) vector\n   do i = 1, n\n-     result = min (result, array(i))\n+     rv = min (rv, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(min:rc) gang worker vector\n+  do i = 1, n\n+     rc = min (rc, array(i))\n   end do\n   !$acc end parallel\n \n@@ -90,17 +203,46 @@ program reduction_2\n      vresult = min (vresult, array(i))\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (rg .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n+\n+  !\n+  ! '.and.' reductions\n+  !\n \n-  lresult = .true.\n+  lrg = .true.\n+  lrw = .true.\n+  lrv = .true.\n+  lrc = .true.\n   lvresult = .true.\n \n-  ! '.and.' reductions\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.and.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .and. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.and.:lresult)\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.and.:lrw) worker\n   do i = 1, n\n-     lresult = lresult .and. (array(i) .ge. 5)\n+     lrw = lrw .and. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.and.:lrv) vector\n+  do i = 1, n\n+     lrv = lrv .and. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.and.:lrc) gang worker vector\n+  do i = 1, n\n+     lrc = lrc .and. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -109,17 +251,46 @@ program reduction_2\n      lvresult = lvresult .and. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n+\n+  !\n+  ! '.or.' reductions\n+  !\n \n-  lresult = .false.\n+  lrg = .false.\n+  lrw = .false.\n+  lrv = .false.\n+  lrc = .false.\n   lvresult = .false.\n \n-  ! '.or.' reductions\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.or.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .or. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.or.:lrw) worker\n+  do i = 1, n\n+     lrw = lrw .or. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.or.:lresult)\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.or.:lrv) vector\n   do i = 1, n\n-     lresult = lresult .or. (array(i) .ge. 5)\n+     lrv = lrv .or. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.or.:lrc) gang worker vector\n+  do i = 1, n\n+     lrc = lrc .or. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -128,17 +299,46 @@ program reduction_2\n      lvresult = lvresult .or. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  lresult = .false.\n-  lvresult = .false.\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n \n+  !\n   ! '.eqv.' reductions\n+  !\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.eqv.:lresult)\n+  lrg = .true.\n+  lrw = .true.\n+  lrv = .true.\n+  lrc = .true.\n+  lvresult = .true.\n+\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.eqv.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .eqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.eqv.:lrw) worker\n   do i = 1, n\n-     lresult = lresult .eqv. (array(i) .ge. 5)\n+     lrw = lrw .eqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.eqv.:lrv) vector\n+  do i = 1, n\n+     lrv = lrv .eqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.eqv.:lrc) gang worker vector\n+  do i = 1, n\n+     lrc = lrc .eqv. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -147,17 +347,46 @@ program reduction_2\n      lvresult = lvresult .eqv. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  lresult = .false.\n-  lvresult = .false.\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n \n+  !\n   ! '.neqv.' reductions\n+  !\n+\n+  lrg = .true.\n+  lrw = .true.\n+  lrv = .true.\n+  lrc = .true.\n+  lvresult = .true.\n+\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.neqv.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .neqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.neqv.:lrw) worker\n+  do i = 1, n\n+     lrw = lrw .neqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.neqv.:lrv) vector\n+  do i = 1, n\n+     lrv = lrv .neqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.neqv.:lresult)\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.neqv.:lrc) gang worker vector\n   do i = 1, n\n-     lresult = lresult .neqv. (array(i) .ge. 5)\n+     lrc = lrc .neqv. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -166,5 +395,8 @@ program reduction_2\n      lvresult = lvresult .neqv. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n end program reduction_2"}, {"sha": "3d8d753cfedd2e1fd919164a3aa3ce4cbaec429f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-3.f90", "status": "modified", "additions": 287, "deletions": 55, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-3.f90?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -5,26 +5,52 @@\n program reduction_3\n   implicit none\n \n-  integer, parameter    :: n = 10, vl = 32\n+  integer, parameter    :: n = 10, ng = 8, nw = 4, vl = 32\n   integer               :: i\n-  double precision, parameter :: e = .001\n-  double precision      :: vresult, result\n-  logical               :: lresult, lvresult\n+  double precision      :: vresult, rg, rw, rv, rc\n+  double precision, parameter :: e = 0.001\n+  logical               :: lrg, lrw, lrv, lrc, lvresult\n   double precision, dimension (n) :: array\n \n   do i = 1, n\n      array(i) = i\n   end do\n \n-  result = 0\n+  !\n+  ! '+' reductions\n+  !\n+\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n   vresult = 0\n \n-  ! '+' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(+:rg) gang\n+  do i = 1, n\n+     rg = rg + array(i)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(+:result)\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(+:rw) worker\n   do i = 1, n\n-     result = result + array(i)\n+     rw = rw + array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(+:rv) vector\n+  do i = 1, n\n+     rv = rv + array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(+:rc) gang worker vector\n+  do i = 1, n\n+     rc = rc + array(i)\n   end do\n   !$acc end parallel\n \n@@ -33,17 +59,46 @@ program reduction_3\n      vresult = vresult + array(i)\n   end do\n \n-  if (abs (result - vresult) .ge. e) call abort\n+  if (abs (rg - vresult) .ge. e) call abort\n+  if (abs (rw - vresult) .ge. e) call abort\n+  if (abs (rv - vresult) .ge. e) call abort\n+  if (abs (rc - vresult) .ge. e) call abort\n+\n+  !\n+  ! '*' reductions\n+  !\n \n-  result = 1\n+  rg = 1\n+  rw = 1\n+  rv = 1\n+  rc = 1\n   vresult = 1\n \n-  ! '*' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(*:rg) gang\n+  do i = 1, n\n+     rg = rg * array(i)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(*:result)\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(*:rw) worker\n   do i = 1, n\n-     result = result * array(i)\n+     rw = rw * array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(*:rv) vector\n+  do i = 1, n\n+     rv = rv * array(i)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(*:rc) gang worker vector\n+  do i = 1, n\n+     rc = rc * array(i)\n   end do\n   !$acc end parallel\n \n@@ -52,17 +107,46 @@ program reduction_3\n      vresult = vresult * array(i)\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (abs (rg - vresult) .ge. e) call abort\n+  if (abs (rw - vresult) .ge. e) call abort\n+  if (abs (rv - vresult) .ge. e) call abort\n+  if (abs (rc - vresult) .ge. e) call abort\n+\n+  !\n+  ! 'max' reductions\n+  !\n \n-  result = 0\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n   vresult = 0\n \n-  ! 'max' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(max:rg) gang\n+  do i = 1, n\n+     rg = max (rg, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(max:rw) worker\n+  do i = 1, n\n+     rw = max (rw, array(i))\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(max:result)\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(max:rv) vector\n   do i = 1, n\n-     result = max (result, array(i))\n+     rv = max (rv, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(max:rc) gang worker vector\n+  do i = 1, n\n+     rc = max (rc, array(i))\n   end do\n   !$acc end parallel\n \n@@ -71,17 +155,46 @@ program reduction_3\n      vresult = max (vresult, array(i))\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  result = 1\n-  vresult = 1\n+  if (abs (rg - vresult) .ge. e) call abort\n+  if (abs (rw - vresult) .ge. e) call abort\n+  if (abs (rv - vresult) .ge. e) call abort\n+  if (abs (rc - vresult) .ge. e) call abort\n \n+  !\n   ! 'min' reductions\n+  !\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(min:result)\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n+  vresult = 0\n+\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(min:rg) gang\n+  do i = 1, n\n+     rg = min (rg, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(min:rw) worker\n+  do i = 1, n\n+     rw = min (rw, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(min:rv) vector\n   do i = 1, n\n-     result = min (result, array(i))\n+     rv = min (rv, array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(min:rc) gang worker vector\n+  do i = 1, n\n+     rc = min (rc, array(i))\n   end do\n   !$acc end parallel\n \n@@ -90,17 +203,46 @@ program reduction_3\n      vresult = min (vresult, array(i))\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n+\n+  !\n+  ! '.and.' reductions\n+  !\n \n-  lresult = .true.\n+  lrg = .true.\n+  lrw = .true.\n+  lrv = .true.\n+  lrc = .true.\n   lvresult = .true.\n \n-  ! '.and.' reductions\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.and.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .and. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.and.:lresult)\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.and.:lrw) worker\n   do i = 1, n\n-     lresult = lresult .and. (array(i) .ge. 5)\n+     lrw = lrw .and. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.and.:lrv) vector\n+  do i = 1, n\n+     lrv = lrv .and. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.and.:lrc) gang worker vector\n+  do i = 1, n\n+     lrc = lrc .and. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -109,17 +251,46 @@ program reduction_3\n      lvresult = lvresult .and. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n+\n+  !\n+  ! '.or.' reductions\n+  !\n \n-  lresult = .false.\n+  lrg = .false.\n+  lrw = .false.\n+  lrv = .false.\n+  lrc = .false.\n   lvresult = .false.\n \n-  ! '.or.' reductions\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.or.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .or. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.or.:lrw) worker\n+  do i = 1, n\n+     lrw = lrw .or. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.or.:lresult)\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.or.:lrv) vector\n   do i = 1, n\n-     lresult = lresult .or. (array(i) .ge. 5)\n+     lrv = lrv .or. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.or.:lrc) gang worker vector\n+  do i = 1, n\n+     lrc = lrc .or. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -128,17 +299,46 @@ program reduction_3\n      lvresult = lvresult .or. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  lresult = .false.\n-  lvresult = .false.\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n \n+  !\n   ! '.eqv.' reductions\n+  !\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.eqv.:lresult)\n+  lrg = .true.\n+  lrw = .true.\n+  lrv = .true.\n+  lrc = .true.\n+  lvresult = .true.\n+\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.eqv.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .eqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.eqv.:lrw) worker\n   do i = 1, n\n-     lresult = lresult .eqv. (array(i) .ge. 5)\n+     lrw = lrw .eqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.eqv.:lrv) vector\n+  do i = 1, n\n+     lrv = lrv .eqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.eqv.:lrc) gang worker vector\n+  do i = 1, n\n+     lrc = lrc .eqv. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -147,17 +347,46 @@ program reduction_3\n      lvresult = lvresult .eqv. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n-\n-  lresult = .false.\n-  lvresult = .false.\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n \n+  !\n   ! '.neqv.' reductions\n+  !\n+\n+  lrg = .true.\n+  lrw = .true.\n+  lrv = .true.\n+  lrc = .true.\n+  lvresult = .true.\n+\n+  !$acc parallel num_gangs(ng) copy(lrg)\n+  !$acc loop reduction(.neqv.:lrg) gang\n+  do i = 1, n\n+     lrg = lrg .neqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(lrw)\n+  !$acc loop reduction(.neqv.:lrw) worker\n+  do i = 1, n\n+     lrw = lrw .neqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(lrv)\n+  !$acc loop reduction(.neqv.:lrv) vector\n+  do i = 1, n\n+     lrv = lrv .neqv. (array(i) .ge. 5)\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(lresult)\n-  !$acc loop reduction(.neqv.:lresult)\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(lrc)\n+  !$acc loop reduction(.neqv.:lrc) gang worker vector\n   do i = 1, n\n-     lresult = lresult .neqv. (array(i) .ge. 5)\n+     lrc = lrc .neqv. (array(i) .ge. 5)\n   end do\n   !$acc end parallel\n \n@@ -166,5 +395,8 @@ program reduction_3\n      lvresult = lvresult .neqv. (array(i) .ge. 5)\n   end do\n \n-  if (result.ne.vresult) call abort\n+  if (lrg .neqv. lvresult) call abort\n+  if (lrw .neqv. lvresult) call abort\n+  if (lrv .neqv. lvresult) call abort\n+  if (lrc .neqv. lvresult) call abort\n end program reduction_3"}, {"sha": "c3bdaf610a1aeceae93e264485d73071f877444a", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-4.f90", "status": "modified", "additions": 83, "deletions": 25, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-4.f90?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -5,50 +5,108 @@\n program reduction_4\n   implicit none\n \n-  integer, parameter    :: n = 10, vl = 32\n+  integer, parameter    :: n = 10, ng = 8, nw = 4, vl = 32\n   integer               :: i\n-  complex               :: vresult, result\n+  real                  :: vresult, rg, rw, rv, rc\n   complex, dimension (n) :: array\n \n   do i = 1, n\n      array(i) = i\n   end do\n \n-  result = 0\n+  !\n+  ! '+' reductions\n+  !\n+\n+  rg = 0\n+  rw = 0\n+  rv = 0\n+  rc = 0\n   vresult = 0\n \n-  ! '+' reductions\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(+:rg) gang\n+  do i = 1, n\n+     rg = rg + REAL(array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(+:rw) worker\n+  do i = 1, n\n+     rw = rw + REAL(array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(+:rv) vector\n+  do i = 1, n\n+     rv = rv + REAL(array(i))\n+  end do\n+  !$acc end parallel\n \n-  !$acc parallel vector_length(vl) num_gangs(1) copy(result)\n-  !$acc loop reduction(+:result)\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(+:rc) gang worker vector\n   do i = 1, n\n-     result = result + array(i)\n+     rc = rc + REAL(array(i))\n   end do\n   !$acc end parallel\n \n   ! Verify the results\n   do i = 1, n\n-     vresult = vresult + array(i)\n+     vresult = vresult + REAL(array(i))\n   end do\n \n-  if (result .ne. vresult) call abort\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n \n-  result = 1\n+  !\n+  ! '*' reductions\n+  !\n+\n+  rg = 1\n+  rw = 1\n+  rv = 1\n+  rc = 1\n   vresult = 1\n \n-!  ! '*' reductions\n-!\n-!  !$acc parallel vector_length(vl)\n-!  !$acc loop reduction(*:result)\n-!  do i = 1, n\n-!     result = result * array(i)\n-!  end do\n-!  !$acc end parallel\n-!\n-!  ! Verify the results\n-!  do i = 1, n\n-!     vresult = vresult * array(i)\n-!  end do\n-!\n-!  if (result.ne.vresult) call abort\n+  !$acc parallel num_gangs(ng) copy(rg)\n+  !$acc loop reduction(*:rg) gang\n+  do i = 1, n\n+     rg = rg * REAL(array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_workers(nw) copy(rw)\n+  !$acc loop reduction(*:rw) worker\n+  do i = 1, n\n+     rw = rw * REAL(array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length(vl) copy(rv)\n+  !$acc loop reduction(*:rv) vector\n+  do i = 1, n\n+     rv = rv * REAL(array(i))\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(ng) num_workers(nw) vector_length(vl) copy(rc)\n+  !$acc loop reduction(*:rc) gang worker vector\n+  do i = 1, n\n+     rc = rc * REAL(array(i))\n+  end do\n+  !$acc end parallel\n+\n+  ! Verify the results\n+  do i = 1, n\n+     vresult = vresult * REAL(array(i))\n+  end do\n+\n+  if (rg .ne. vresult) call abort\n+  if (rw .ne. vresult) call abort\n+  if (rv .ne. vresult) call abort\n+  if (rc .ne. vresult) call abort\n end program reduction_4"}, {"sha": "42106480c81c853d0639d8998cf41ebfff0f2ab7", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-5.f90", "status": "modified", "additions": 75, "deletions": 11, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-5.f90?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,12 +1,17 @@\n ! { dg-do run }\n+! { dg-additional-options \"-w\" }\n \n ! subroutine reduction\n \n program reduction\n   integer, parameter    :: n = 40, c = 10\n-  integer               :: i, vsum, sum\n+  integer               :: i, vsum, gs, ws, vs, cs, ns\n \n-  call redsub (sum, n, c)\n+  call redsub_gang (gs, n, c)\n+  call redsub_worker (ws, n, c)\n+  call redsub_vector (vs, n, c)\n+  call redsub_combined (cs, n, c)\n+  call redsub_nested (ns, n, c)\n \n   vsum = 0\n \n@@ -15,21 +20,80 @@ program reduction\n      vsum = vsum + c\n   end do\n \n-  if (sum.ne.vsum) call abort ()\n+  if (gs .ne. vsum) call abort ()\n+  if (ws .ne. vsum) call abort ()\n+  if (vs .ne. vsum) call abort ()\n+  if (cs .ne. vsum) call abort ()\n+  if (ns .ne. vsum) call abort ()\n end program reduction\n \n-subroutine redsub(sum, n, c)\n+subroutine redsub_gang(sum, n, c)\n   integer :: sum, n, c\n \n-  integer :: s\n-  s = 0\n+  sum = 0\n \n-  !$acc parallel vector_length(32) copyin (n, c) copy (s) num_gangs(1)\n-  !$acc loop reduction(+:s)\n+  !$acc parallel copyin (n, c) num_gangs(n) copy(sum)\n+  !$acc loop reduction(+:sum) gang\n   do i = 1, n\n-     s = s + c\n+     sum = sum + c\n   end do\n   !$acc end parallel\n+end subroutine redsub_gang\n \n-  sum = s\n-end subroutine redsub\n+subroutine redsub_worker(sum, n, c)\n+  integer :: sum, n, c\n+\n+  sum = 0\n+\n+  !$acc parallel copyin (n, c) num_workers(4) vector_length (32) copy(sum)\n+  !$acc loop reduction(+:sum) worker\n+  do i = 1, n\n+     sum = sum + c\n+  end do\n+  !$acc end parallel\n+end subroutine redsub_worker\n+\n+subroutine redsub_vector(sum, n, c)\n+  integer :: sum, n, c\n+\n+  sum = 0\n+\n+  !$acc parallel copyin (n, c) vector_length(32) copy(sum)\n+  !$acc loop reduction(+:sum) vector\n+  do i = 1, n\n+     sum = sum + c\n+  end do\n+  !$acc end parallel\n+end subroutine redsub_vector\n+\n+subroutine redsub_combined(sum, n, c)\n+  integer :: sum, n, c\n+\n+  sum = 0\n+\n+  !$acc parallel num_gangs (8) num_workers (4) vector_length(32) copy(sum)\n+  !$acc loop reduction(+:sum) gang worker vector\n+  do i = 1, n\n+     sum = sum + c\n+  end do\n+  !$acc end parallel\n+end subroutine redsub_combined\n+\n+subroutine redsub_nested(sum, n, c)\n+  integer :: sum, n, c\n+  integer :: ii, jj\n+\n+  ii = n / 10;\n+  jj = 10;\n+  sum = 0\n+\n+  !$acc parallel num_gangs (8) copy(sum)\n+  !$acc loop reduction(+:sum) gang\n+  do i = 1, ii\n+     !$acc loop reduction(+:sum) vector\n+     do j = 1, jj\n+        sum = sum + c\n+     end do\n+  end do\n+  !$acc end parallel\n+end subroutine redsub_nested"}, {"sha": "f3ed27527f58583d8248f8600a61448eb0628198", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-6.f90", "status": "modified", "additions": 75, "deletions": 11, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-6.f90?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -1,30 +1,94 @@\n ! { dg-do run }\n+! { dg-additional-options \"-cpp -w\" }\n \n program reduction\n   implicit none\n \n-  integer, parameter    :: n = 100\n-  integer               :: i, s1, s2, vs1, vs2\n+  integer, parameter    :: n = 100, n2 = 1000, chunksize = 10\n+  integer               :: i, gs1, gs2, ws1, ws2, vs1, vs2, cs1, cs2, hs1, hs2\n+  integer               :: j, red, vred\n \n-  s1 = 0\n-  s2 = 0\n+  gs1 = 0\n+  gs2 = 0\n+  ws1 = 0\n+  ws2 = 0\n   vs1 = 0\n   vs2 = 0\n+  cs1 = 0\n+  cs2 = 0\n+  hs1 = 0\n+  hs2 = 0\n \n-  !$acc parallel vector_length (32) copy(s1, s2)\n-  !$acc loop reduction(+:s1, s2)\n+  !$acc parallel num_gangs (1000) copy(gs1, gs2)\n+  !$acc loop reduction(+:gs1, gs2) gang\n   do i = 1, n\n-     s1 = s1 + 1\n-     s2 = s2 + 2\n+     gs1 = gs1 + 1\n+     gs2 = gs2 + 2\n   end do\n   !$acc end parallel\n \n-  ! Verify the results\n+  !$acc parallel num_workers (4) vector_length (32) copy(ws1, ws2)\n+  !$acc loop reduction(+:ws1, ws2) worker\n+  do i = 1, n\n+     ws1 = ws1 + 1\n+     ws2 = ws2 + 2\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel vector_length (32) copy(vs1, vs2)\n+  !$acc loop reduction(+:vs1, vs2) vector\n   do i = 1, n\n      vs1 = vs1 + 1\n      vs2 = vs2 + 2\n   end do\n+  !$acc end parallel\n+\n+  !$acc parallel num_gangs(8) num_workers(4) vector_length(32) copy(cs1, cs2)\n+  !$acc loop reduction(+:cs1, cs2) gang worker vector\n+  do i = 1, n\n+     cs1 = cs1 + 1\n+     cs2 = cs2 + 2\n+  end do\n+  !$acc end parallel\n+\n+  ! Verify the results on the host\n+  do i = 1, n\n+     hs1 = hs1 + 1\n+     hs2 = hs2 + 2\n+  end do\n+\n+  if (gs1 .ne. hs1) call abort ()\n+  if (gs2 .ne. hs2) call abort ()\n+\n+  if (ws1 .ne. hs1) call abort ()\n+  if (ws2 .ne. hs2) call abort ()\n+\n+  if (vs1 .ne. hs1) call abort ()\n+  if (vs2 .ne. hs2) call abort ()\n+\n+  if (cs1 .ne. hs1) call abort ()\n+  if (cs2 .ne. hs2) call abort ()\n+\n+  ! Nested reductions.\n+\n+  red = 0\n+  vred = 0\n+\n+  !$acc parallel num_gangs(10) vector_length(32) copy(red)\n+  !$acc loop reduction(+:red) gang\n+  do i = 1, n/chunksize\n+     !$acc loop reduction(+:red) vector\n+     do j = 1, chunksize\n+        red = red + chunksize\n+     end do\n+  end do\n+  !$acc end parallel\n+\n+  do i = 1, n/chunksize\n+     do j = 1, chunksize\n+        vred = vred + chunksize\n+     end do\n+  end do\n \n-  if (s1.ne.vs1) call abort ()\n-  if (s2.ne.vs2) call abort ()\n+  if (red .ne. vred) call abort ()\n end program reduction"}, {"sha": "8ec36adf1e326dd77da532cf331ef3c2c50f9f55", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-7.f90", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42cfb5ca3b02756705485e013fa9107aaf28acd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-7.f90?ref=c42cfb5ca3b02756705485e013fa9107aaf28acd", "patch": "@@ -0,0 +1,88 @@\n+! { dg-do run }\n+! { dg-additional-options \"-w\" }\n+\n+! subroutine reduction with private and firstprivate variables\n+\n+program reduction\n+  integer, parameter    :: n = 100\n+  integer               :: i, j, vsum, cs, arr(n)\n+\n+  call redsub_private (cs, n, arr)\n+  call redsub_bogus (cs, n)\n+  call redsub_combined (cs, n, arr)\n+\n+  vsum = 0\n+\n+  ! Verify the results\n+  do i = 1, n\n+     vsum = i\n+     do j = 1, n\n+        vsum = vsum + 1;\n+     end do\n+     if (vsum .ne. arr(i)) call abort ()\n+  end do\n+end program reduction\n+\n+! This subroutine tests a reduction with an explicit private variable.\n+\n+subroutine redsub_private(sum, n, arr)\n+  integer :: sum, n, arr(n)\n+  integer :: i, j, v\n+\n+  !$acc parallel copyout (arr)\n+  !$acc loop gang private (v)\n+  do j = 1, n\n+     v = j\n+\n+     !$acc loop vector reduction (+:v)\n+     do i = 1, 100\n+        v = v + 1\n+     end do\n+\n+     arr(j) = v\n+  end do\n+  !$acc end parallel\n+\n+  ! verify the results\n+  do i = 1, 10\n+     if (arr(i) .ne. 100+i) call abort ()\n+  end do\n+end subroutine redsub_private\n+\n+\n+! Bogus reduction on an impliclitly firstprivate variable.  The results do\n+! survive the parallel region.  The goal here is to ensure that gfortran\n+! doesn't ICE.\n+\n+subroutine redsub_bogus(sum, n)\n+  integer :: sum, n, arr(n)\n+  integer :: i\n+\n+  !$acc parallel\n+  !$acc loop gang worker vector reduction (+:sum)\n+  do i = 1, n\n+     sum = sum + 1\n+  end do\n+  !$acc end parallel\n+end subroutine redsub_bogus\n+\n+! This reduction involving a firstprivate variable yields legitimate results.\n+\n+subroutine redsub_combined(sum, n, arr)\n+  integer :: sum, n, arr(n)\n+  integer :: i, j\n+\n+  !$acc parallel copy (arr)\n+  !$acc loop gang\n+  do i = 1, n\n+     sum = i;\n+\n+     !$acc loop reduction(+:sum)\n+     do j = 1, n\n+        sum = sum + 1\n+     end do\n+\n+     arr(i) = sum\n+  end do\n+  !$acc end parallel\n+end subroutine redsub_combined"}]}