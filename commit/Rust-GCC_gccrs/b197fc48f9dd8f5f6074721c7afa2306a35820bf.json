{"sha": "b197fc48f9dd8f5f6074721c7afa2306a35820bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE5N2ZjNDhmOWRkOGY1ZjYwNzQ3MjFjN2FmYTIzMDZhMzU4MjBiZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-09T18:30:13Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-09T18:30:13Z"}, "message": "i386.h (LIMIT_RELOAD_CLASS): Return preferred single unit register class for classes that contain registers...\n\n\t* config/i386/i386.h (LIMIT_RELOAD_CLASS): Return preferred\n\tsingle unit register class for classes that contain registers form\n\tmultiple units.\n\t(REG_CLASS_CONTENTS): Add missing \"frame\" register to FLOAT_INT_REGS,\n\tINT_SSE_REGS and FLOAT_INT_SSE_REGS register classes.\n\ntestsuite/ChangeLog:\n\n\t* gcc.c-torture/compile/20120727-1.c (dg-options): Add -mfpmath=387\n\tfor x86 targets.\n\t* gcc.c-torture/compile/20120727-2.c: New test.\n\nFrom-SVN: r190261", "tree": {"sha": "b32875c85999ef931a153b89771e4d53a13acab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b32875c85999ef931a153b89771e4d53a13acab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b197fc48f9dd8f5f6074721c7afa2306a35820bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b197fc48f9dd8f5f6074721c7afa2306a35820bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b197fc48f9dd8f5f6074721c7afa2306a35820bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b197fc48f9dd8f5f6074721c7afa2306a35820bf/comments", "author": null, "committer": null, "parents": [{"sha": "8b7773a4ee4833570eb306cbd64884c288f89d57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7773a4ee4833570eb306cbd64884c288f89d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7773a4ee4833570eb306cbd64884c288f89d57"}], "stats": {"total": 77, "additions": 59, "deletions": 18}, "files": [{"sha": "274af16b7a9b574faddfa3db969541eba978b27e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b197fc48f9dd8f5f6074721c7afa2306a35820bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b197fc48f9dd8f5f6074721c7afa2306a35820bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b197fc48f9dd8f5f6074721c7afa2306a35820bf", "patch": "@@ -1,3 +1,11 @@\n+2012-08-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (LIMIT_RELOAD_CLASS): Return preferred\n+\tsingle unit register class for classes that contain registers form\n+\tmultiple units.\n+\t(REG_CLASS_CONTENTS): Add missing \"frame\" register to FLOAT_INT_REGS,\n+\tINT_SSE_REGS and FLOAT_INT_SSE_REGS register classes.\n+\n 2012-08-09  Martin Jambor  <mjambor@suse.cz>\n \n \t* cgraph.h (cgraph_indirect_call_info): Field anc_offse renamd to\n@@ -36,8 +44,7 @@\n \tpreserved.\n \t(compute_complex_ancestor_jump_func): Likewise.\n \t(compute_scalar_jump_functions): Removed.\n-\t(type_like_member_ptr_p): Also check field position are known and\n-\tsane.\n+\t(type_like_member_ptr_p): Also check field position are known and sane.\n \t(compute_pass_through_member_ptrs): Removed.\n \t(determine_cst_member_ptr): Likewise.\n \t(ipa_known_agg_contents_list): New type.\n@@ -80,7 +87,8 @@\n \t* config/sh/sync.md (atomic_test_and_set): Pass gen_t_reg_rtx to\n \tgen_movnegt.\n \t* config/sh/sh.c (expand_cbranchsi4, sh_emit_scc_to_t,\n-\tsh_emit_compare_and_branch, sh_emit_compare_and_set): Use get_t_reg_rtx.\n+\tsh_emit_compare_and_branch, sh_emit_compare_and_set): Use\n+\tget_t_reg_rtx.\n \t(sh_expand_t_scc): Pass gen_t_reg_rtx to gen_movnegt.\n \n 2012-08-09  Oleg Endo  <olegendo@gcc.gnu.org>"}, {"sha": "c4d85b75feb5f69a3599a924e05e980bf035727c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b197fc48f9dd8f5f6074721c7afa2306a35820bf/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b197fc48f9dd8f5f6074721c7afa2306a35820bf/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b197fc48f9dd8f5f6074721c7afa2306a35820bf", "patch": "@@ -1298,9 +1298,9 @@ enum reg_class\n { 0x1fe00100,0x1fe000 },\t\t/* FP_TOP_SSE_REG */\t\t\\\n { 0x1fe00200,0x1fe000 },\t\t/* FP_SECOND_SSE_REG */\t\t\\\n { 0x1fe0ff00,0x1fe000 },\t\t/* FLOAT_SSE_REGS */\t\t\\\n-   { 0x1ffff,  0x1fe0 },\t\t/* FLOAT_INT_REGS */\t\t\\\n-{ 0x1fe100ff,0x1fffe0 },\t\t/* INT_SSE_REGS */\t\t\\\n-{ 0x1fe1ffff,0x1fffe0 },\t\t/* FLOAT_INT_SSE_REGS */\t\\\n+  { 0x11ffff,  0x1fe0 },\t\t/* FLOAT_INT_REGS */\t\t\\\n+{ 0x1ff100ff,0x1fffe0 },\t\t/* INT_SSE_REGS */\t\t\\\n+{ 0x1ff1ffff,0x1fffe0 },\t\t/* FLOAT_INT_SSE_REGS */\t\\\n { 0xffffffff,0x1fffff }\t\t\t\t\t\t\t\\\n }\n \n@@ -1378,14 +1378,27 @@ enum reg_class\n \n /* Place additional restrictions on the register class to use when it\n    is necessary to be able to hold a value of mode MODE in a reload\n-   register for which class CLASS would ordinarily be used.  */\n-\n-#define LIMIT_RELOAD_CLASS(MODE, CLASS) \t\t\t\\\n-  ((MODE) == QImode && !TARGET_64BIT\t\t\t\t\\\n-   && ((CLASS) == ALL_REGS || (CLASS) == GENERAL_REGS\t\t\\\n-       || (CLASS) == LEGACY_REGS || (CLASS) == INDEX_REGS)\t\\\n-   ? Q_REGS\t\t\t\t\t\t\t\\\n-   : (CLASS) == INT_SSE_REGS ? GENERAL_REGS : (CLASS))\n+   register for which class CLASS would ordinarily be used.\n+\n+   We avoid classes containing registers from multiple units due to\n+   the limitation in ix86_secondary_memory_needed.  We limit these\n+   classes to their \"natural mode\" single unit register class, depending\n+   on the unit availability.\n+\n+   Please note that reg_class_subset_p is not commutative, so these\n+   conditions mean \"... if (CLASS) includes ALL registers from the\n+   register set.\"  */\n+\n+#define LIMIT_RELOAD_CLASS(MODE, CLASS)\t\t\t\t\t\\\n+  (((MODE) == QImode && !TARGET_64BIT\t\t\t\t\t\\\n+    && reg_class_subset_p (Q_REGS, (CLASS))) ? Q_REGS\t\t\t\\\n+   : (((MODE) == SImode || (MODE) == DImode)\t\t\t\t\\\n+      && reg_class_subset_p (GENERAL_REGS, (CLASS))) ? GENERAL_REGS\t\\\n+   : (SSE_FLOAT_MODE_P (MODE) && TARGET_SSE_MATH\t\t\t\\\n+      && reg_class_subset_p (SSE_REGS, (CLASS))) ? SSE_REGS\t\t\\\n+   : (X87_FLOAT_MODE_P (MODE)\t\t\t\t\t\t\\\n+      && reg_class_subset_p (FLOAT_REGS, (CLASS))) ? FLOAT_REGS\t\t\\\n+   : (CLASS))\n \n /* If we are copying between general and FP registers, we need a memory\n    location. The same is true for SSE and MMX registers.  */"}, {"sha": "c5f63245cb48f9fa1fa2f87bed91b56377b144f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b197fc48f9dd8f5f6074721c7afa2306a35820bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b197fc48f9dd8f5f6074721c7afa2306a35820bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b197fc48f9dd8f5f6074721c7afa2306a35820bf", "patch": "@@ -1,3 +1,9 @@\n+2012-08-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.c-torture/compile/20120727-1.c (dg-options): Add -mfpmath=387\n+\tfor x86 targets.\n+\t* gcc.c-torture/compile/20120727-2.c: New test.\n+\n 2012-08-09  Martin Jambor  <mjambor@suse.cz>\n \n \t* gcc.dg/ipa/iinline-4.c: New test.\n@@ -26,7 +32,7 @@\n 2012-08-09  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/53701\n-\t* gcc.dg/pr53701.c: New test. \n+\t* gcc.dg/pr53701.c: New test.\n \n 2012-08-09  Bernd Schmidt  <bernds@codesourcery.com>\n \n@@ -39,8 +45,7 @@\n \n 2012-08-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* gcc.dg/tree-ssa/slsr-30.c: Require non-ilp32.  Remove\n-\tdg-skip-if.\n+\t* gcc.dg/tree-ssa/slsr-30.c: Require non-ilp32.  Remove dg-skip-if.\n \n 2012-08-08  Joseph Myers  <joseph@codesourcery.com>\n "}, {"sha": "91c9aa10fc89df3a813cec238ea7f41db2c769c0", "filename": "gcc/testsuite/gcc.c-torture/compile/20120727-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b197fc48f9dd8f5f6074721c7afa2306a35820bf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120727-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b197fc48f9dd8f5f6074721c7afa2306a35820bf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120727-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120727-1.c?ref=b197fc48f9dd8f5f6074721c7afa2306a35820bf", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-options \"-mfpmath=387\" { target { i?86-*-* x86_64-*-* } } } */\n+\n union {\n   char *p;\n   float f;\n@@ -7,5 +9,5 @@ void\n f (void)\n {\n   u.p = \"\";\n-  u.f += 1.1;\n+  u.f += 1.1f;\n }"}, {"sha": "c2c45d03c2fbbe0d2edd43d7726ceb049bd56457", "filename": "gcc/testsuite/gcc.c-torture/compile/20120727-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b197fc48f9dd8f5f6074721c7afa2306a35820bf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120727-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b197fc48f9dd8f5f6074721c7afa2306a35820bf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120727-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120727-2.c?ref=b197fc48f9dd8f5f6074721c7afa2306a35820bf", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-mfpmath=387\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+union {\n+  char *p;\n+  double d;\n+} u;\n+\n+void\n+f (void)\n+{\n+  u.p = \"\";\n+  u.d += 1.1;\n+}"}]}