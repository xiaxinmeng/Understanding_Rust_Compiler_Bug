{"sha": "9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ3ZWQ4MDY1ZGZjNGUxZDljNzM4NzJkYzVhZjA3NmJiYjkzMmVhMQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-06-13T21:31:58Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-06-13T21:31:58Z"}, "message": "sh.c (calc_live_regs): Don't use initial_value optimization for PR_MEDIA_REG.\n\n\t* config/sh/sh.c (calc_live_regs): Don't use initial_value\n\toptimization for PR_MEDIA_REG.\n\nFrom-SVN: r54600", "tree": {"sha": "25a2eb6c231af3625be5d5fed4dd5fc41144cdf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25a2eb6c231af3625be5d5fed4dd5fc41144cdf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1/comments", "author": null, "committer": null, "parents": [{"sha": "b66377c173ecd444f4fb4f9737ee10a97084ad9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66377c173ecd444f4fb4f9737ee10a97084ad9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66377c173ecd444f4fb4f9737ee10a97084ad9a"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "05b3a051ed3cb93f2ed8232f88b5522e3c582c2c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1", "patch": "@@ -1,3 +1,8 @@\n+Thu Jun 13 22:29:40 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* config/sh/sh.c (calc_live_regs): Don't use initial_value\n+\toptimization for PR_MEDIA_REG.\n+\n 2002-06-13  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cpphash.h (_cpp_lex_identifier_trad): Remove."}, {"sha": "a9c2e8250a4c81211746a71499eaf0756052683c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9d7ed8065dfc4e1d9c73872dc5af076bbb932ea1", "patch": "@@ -4362,7 +4362,6 @@ calc_live_regs (count_ptr, live_regs_mask)\n   int reg;\n   int count;\n   int interrupt_handler;\n-  rtx pr_initial;\n   int pr_live;\n \n   if ((lookup_attribute\n@@ -4385,12 +4384,18 @@ calc_live_regs (count_ptr, live_regs_mask)\n \t  target_flags &= ~FPU_SINGLE_BIT;\n \t  break;\n \t}\n-  pr_initial = has_hard_reg_initial_val (Pmode,\n-\t\t\t\t\t TARGET_SHMEDIA\n-\t\t\t\t\t ? PR_MEDIA_REG : PR_REG);\n-  pr_live = (pr_initial\n-\t     ? REGNO (pr_initial) != (TARGET_SHMEDIA ? PR_MEDIA_REG : PR_REG)\n-\t     : regs_ever_live[TARGET_SHMEDIA ? PR_MEDIA_REG : PR_REG]);\n+  /* PR_MEDIA_REG is a general purpose register, thus global_alloc already\n+     knows how to use it.  That means the pseudo originally allocated for\n+     the initial value can become the PR_MEDIA_REG hard register, as seen for\n+     execute/20010122-1.c:test9.  */\n+  if (TARGET_SHMEDIA)\n+    pr_live = regs_ever_live[PR_MEDIA_REG];\n+  else\n+    {\n+      rtx pr_initial = has_hard_reg_initial_val (Pmode, PR_REG);\n+      pr_live = (pr_initial\n+\t\t ? REGNO (pr_initial) != (PR_REG) : regs_ever_live[PR_REG]);\n+    }\n   /* Force PR to be live if the prologue has to call the SHmedia\n      argument decoder or register saver.  */\n   if (TARGET_SHCOMPACT"}]}