{"sha": "ced78d8b0c319de1c5f00bf0cc0972f317f43309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkNzhkOGIwYzMxOWRlMWM1ZjAwYmYwY2MwOTcyZjMxN2Y0MzMwOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-11-20T23:17:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-20T23:17:48Z"}, "message": "Makefile.in (LIB2FUNCS): Remove C++ memory management support.\n\n./:\t* Makefile.in (LIB2FUNCS): Remove C++ memory management support.\n\t* libgcc2.c: Remove __builtin_new, __builtin_vec_new, set_new_handler,\n\t__builtin_delete, and __builtin_vec_delete.\n\n\t* except.c (output_exception_table): Don't bother with\n \t__EXCEPTION_END__.\n\ncp/:\n\t* Make-lang.in (CXX_LIB2FUNCS): Add new op new and op delete objs.\n\t(various.o): Likewise.\n\t* inc/new: Add placement deletes.  Add throw specs for default new.\n\t* new.cc (set_new_handler): Move here from libgcc2.\n\t* new1.cc (new (nothrow)): Catch a bad_alloc thrown from the handler.\n\t(new): Move from libgcc2.  Throw bad_alloc.\n\t* new2.cc: Move the rest of the op news and op deletes from libgcc2.\n\t* decl.c (init_decl_processing): Update exception specs on new and\n\tdelete.\n\nFrom-SVN: r16617", "tree": {"sha": "8acaf8c513b3b690a0f58c9e47a4fb5b1c0154d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8acaf8c513b3b690a0f58c9e47a4fb5b1c0154d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ced78d8b0c319de1c5f00bf0cc0972f317f43309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ced78d8b0c319de1c5f00bf0cc0972f317f43309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ced78d8b0c319de1c5f00bf0cc0972f317f43309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ced78d8b0c319de1c5f00bf0cc0972f317f43309/comments", "author": null, "committer": null, "parents": [{"sha": "a09ff88bb3edd56162937a3f98d4b0d5cac5c241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09ff88bb3edd56162937a3f98d4b0d5cac5c241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09ff88bb3edd56162937a3f98d4b0d5cac5c241"}], "stats": {"total": 354, "additions": 164, "deletions": 190}, "files": [{"sha": "7855dadf6cf4fff0e1d8300f77bdd7683790d56e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -1,3 +1,12 @@\n+Thu Nov 20 14:42:15 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* Makefile.in (LIB2FUNCS): Remove C++ memory management support.\n+\t* libgcc2.c: Remove __builtin_new, __builtin_vec_new, set_new_handler, \n+\t__builtin_delete, and __builtin_vec_delete.\n+\n+\t* except.c (output_exception_table): Don't bother with\n+ \t__EXCEPTION_END__.\n+\n Thu Nov 20 16:11:50 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* mips/x-iris (FIXPROTO_DEFINES): Add -D_SGI_SOURCE."}, {"sha": "204c0ea4cd5fda7d18a999bcea32a428ccf94f9f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -643,8 +643,8 @@ LIB2FUNCS = _muldi3 _divdi3 _moddi3 _udivdi3 _umoddi3 _negdi2 \\\n     _fixunsdfsi _fixunssfsi _fixunsdfdi _fixdfdi _fixunssfdi _fixsfdi \\\n     _fixxfdi _fixunsxfdi _floatdixf _fixunsxfsi \\\n     _fixtfdi _fixunstfdi _floatditf \\\n-    __gcc_bcmp _varargs __dummy _eprintf _op_new _op_vnew _new_handler \\\n-    _op_delete _op_vdel _bb _shtab _clear_cache _trampoline __main _exit \\\n+    __gcc_bcmp _varargs __dummy _eprintf \\\n+    _bb _shtab _clear_cache _trampoline __main _exit \\\n     _ctors _eh  _pure\n \n # The files that \"belong\" in CONFIG_H are deliberately omitted"}, {"sha": "82c0e86983a14a3fa92c56ee4f2ebfd88d647736", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -1,5 +1,15 @@\n Thu Nov 20 14:40:17 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* Make-lang.in (CXX_LIB2FUNCS): Add new op new and op delete objs.\n+\t(various.o): Likewise.\n+\t* inc/new: Add placement deletes.  Add throw specs for default new.\n+\t* new.cc (set_new_handler): Move here from libgcc2.\n+\t* new1.cc (new (nothrow)): Catch a bad_alloc thrown from the handler.\n+\t(new): Move from libgcc2.  Throw bad_alloc.\n+\t* new2.cc: Move the rest of the op news and op deletes from libgcc2.\n+\t* decl.c (init_decl_processing): Update exception specs on new and\n+\tdelete.\n+\n \t* method.c (build_decl_overload_real): Don't mess with global \n \tplacement delete.\n "}, {"sha": "362398ac3aa57e741c255a11838f6d1429b27a6c", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -58,7 +58,8 @@ CXX_EXTRA_HEADERS = $(srcdir)/cp/inc/typeinfo $(srcdir)/cp/inc/exception \\\n \t$(srcdir)/cp/inc/new $(srcdir)/cp/inc/new.h\n \n # Extra code to include in libgcc2.\n-CXX_LIB2FUNCS = tinfo.o tinfo2.o new.o new1.o new2.o exception.o\n+CXX_LIB2FUNCS = tinfo.o tinfo2.o new.o opnew.o opnewnt.o opvnew.o opvnewnt.o \\\n+\topdel.o opdelnt.o opvdel.o opvdelnt.o exception.o\n CXX_LIB2SRCS = $(srcdir)/cp/new.cc $(srcdir)/cp/new1.cc $(srcdir)/cp/new2.cc \\\n \t$(srcdir)/cp/exception.cc $(srcdir)/cp/tinfo.cc \\\n \t$(srcdir)/cp/tinfo2.cc $(srcdir)/cp/tinfo.h\n@@ -147,12 +148,30 @@ exception.o: cc1plus $(srcdir)/cp/exception.cc\n new.o: cc1plus $(srcdir)/cp/new.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n \t  -c $(srcdir)/cp/new.cc\n-new1.o: cc1plus $(srcdir)/cp/new1.cc\n+opnew.o: cc1plus $(srcdir)/cp/new1.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n-\t  -c $(srcdir)/cp/new1.cc\n-new2.o: cc1plus $(srcdir)/cp/new2.cc\n+\t  -c $(srcdir)/cp/new1.cc -DL_op_new -o opnew.o\n+opnewnt.o: cc1plus $(srcdir)/cp/new1.cc\n \t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n-\t  -c $(srcdir)/cp/new2.cc\n+\t  -c $(srcdir)/cp/new1.cc -DL_op_newnt -o opnewnt.o\n+opvnew.o: cc1plus $(srcdir)/cp/new2.cc\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n+\t  -c $(srcdir)/cp/new2.cc -DL_op_vnew -o opvnew.o\n+opvnewnt.o: cc1plus $(srcdir)/cp/new2.cc\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n+\t  -c $(srcdir)/cp/new2.cc -DL_op_vnewnt -o opvnewnt.o\n+opdel.o: cc1plus $(srcdir)/cp/new2.cc\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n+\t  -c $(srcdir)/cp/new2.cc -DL_op_delete -o opdel.o\n+opdelnt.o: cc1plus $(srcdir)/cp/new2.cc\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n+\t  -c $(srcdir)/cp/new2.cc -DL_op_delnt -o opdelnt.o\n+opvdel.o: cc1plus $(srcdir)/cp/new2.cc\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n+\t  -c $(srcdir)/cp/new2.cc -DL_op_vdel -o opvdel.o\n+opvdelnt.o: cc1plus $(srcdir)/cp/new2.cc\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) \\\n+\t  -c $(srcdir)/cp/new2.cc -DL_op_vdelnt -o opvdelnt.o\n \n # We want to update cplib2.txt if any of the source files change...\n cplib2.txt: $(CXX_LIB2SRCS) $(CXX_EXTRA_HEADERS) cplib2.ready"}, {"sha": "39e7a5afa4fa2ce9f651a2b2101951f6e8f4778f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -5577,14 +5577,18 @@ init_decl_processing ()\n   /* Now, C++.  */\n   current_lang_name = lang_name_cplusplus;\n \n-  auto_function (ansi_opname[(int) NEW_EXPR], ptr_ftype_sizetype,\n-\t\t NOT_BUILT_IN);\n-  auto_function (ansi_opname[(int) VEC_NEW_EXPR], ptr_ftype_sizetype,\n-\t\t NOT_BUILT_IN);\n-  auto_function (ansi_opname[(int) DELETE_EXPR], void_ftype_ptr,\n-\t\t NOT_BUILT_IN);\n-  auto_function (ansi_opname[(int) VEC_DELETE_EXPR], void_ftype_ptr,\n-\t\t NOT_BUILT_IN);\n+  {\n+    tree bad_alloc_type_node = xref_tag\n+      (class_type_node, get_identifier (\"bad_alloc\"), NULL_TREE, 1);\n+    tree newtype = build_exception_variant\n+      (ptr_ftype_sizetype, build_tree_list (NULL_TREE, bad_alloc_type_node));\n+    tree deltype = build_exception_variant\n+      (void_ftype_ptr, build_tree_list (NULL_TREE, NULL_TREE));\n+    auto_function (ansi_opname[(int) NEW_EXPR], newtype, NOT_BUILT_IN);\n+    auto_function (ansi_opname[(int) VEC_NEW_EXPR], newtype, NOT_BUILT_IN);\n+    auto_function (ansi_opname[(int) DELETE_EXPR], deltype, NOT_BUILT_IN);\n+    auto_function (ansi_opname[(int) VEC_DELETE_EXPR], deltype, NOT_BUILT_IN);\n+  }\n \n   abort_fndecl\n     = define_function (\"__pure_virtual\", void_ftype,"}, {"sha": "23fe6eb9e6bb796fbbbb218b5e3f1c00ca6ed0dd", "filename": "gcc/cp/inc/new", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2Finc%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2Finc%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fnew?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -22,23 +22,21 @@ namespace std {\n   struct nothrow_t {};\n   extern const nothrow_t nothrow;\n   typedef void (*new_handler)();\n-  extern \"C\" new_handler set_new_handler (new_handler);\n+  new_handler set_new_handler (new_handler);\n \n #if 0\n } // namespace std\n #endif\n \n-// G++ implementation internals\n-extern new_handler __new_handler;\n-extern \"C\" void __default_new_handler (void);\n-\n // replaceable signatures\n-void *operator new (size_t);\n-void *operator new (size_t, const nothrow_t&) throw();\n-void *operator new[] (size_t);\n-void *operator new[] (size_t, const nothrow_t&) throw();\n+void *operator new (size_t) throw (std::bad_alloc);\n+void *operator new[] (size_t) throw (std::bad_alloc);\n void operator delete (void *) throw();\n void operator delete[] (void *) throw();\n+void *operator new (size_t, const nothrow_t&) throw();\n+void *operator new[] (size_t, const nothrow_t&) throw();\n+void operator delete (void *, const nothrow_t&) throw();\n+void operator delete[] (void *, const nothrow_t&) throw();\n \n // default placement versions of operator new\n inline void *operator new(size_t, void *place) throw() { return place; }"}, {"sha": "33cf190108cb9ec3c5bd9f4cb648dff08c0c003d", "filename": "gcc/cp/new.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2Fnew.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2Fnew.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fnew.cc?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -29,3 +29,13 @@\n #include \"new\"\n \n const nothrow_t nothrow = { };\n+\n+new_handler __new_handler;\n+\n+new_handler\n+set_new_handler (new_handler handler)\n+{\n+  new_handler prev_handler = __new_handler;\n+  __new_handler = handler;\n+  return prev_handler;\n+}"}, {"sha": "98c2a4a955e200f07fc6bbd21a5c46c9c7658fc0", "filename": "gcc/cp/new1.cc", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2Fnew1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2Fnew1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fnew1.cc?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -1,4 +1,4 @@\n-// Support routine for the -*- C++ -*- dynamic memory management.\n+// Support routines for the -*- C++ -*- dynamic memory management.\n // Copyright (C) 1997 Free Software Foundation\n \n // This file is part of GNU CC.\n@@ -28,27 +28,60 @@\n #include \"new\"\n \n extern \"C\" void *malloc (size_t);\n+extern new_handler __new_handler;\n \n-typedef void (*vfp)(void);\n-extern vfp __new_handler;\n-extern void __default_new_handler (void);\n+#define WEAK(x) \\\n+  x __attribute__ ((weak)); \\\n+  x\n \n-void *operator new (size_t sz, const nothrow_t&) throw()\n+#ifdef L_op_newnt\n+WEAK (void * operator new (size_t sz, const nothrow_t&) throw())\n {\n   void *p;\n-  vfp handler = __new_handler;\n \n   /* malloc (0) is unpredictable; avoid it.  */\n   if (sz == 0)\n     sz = 1;\n   p = (void *) malloc (sz);\n   while (p == 0)\n     {\n+      new_handler handler = __new_handler;\n       if (! handler)\n \treturn 0;\n-      (*handler) ();\n+      try\n+\t{\n+\t  handler ();\n+\t}\n+      catch (bad_alloc &)\n+\t{\n+\t  return 0;\n+\t}\n+\n+      p = (void *) malloc (sz);\n+    }\n+\n+  return p;\n+}\n+#endif\n+\n+#ifdef L_op_new\n+WEAK (void * operator new (size_t sz) throw (std::bad_alloc))\n+{\n+  void *p;\n+\n+  /* malloc (0) is unpredictable; avoid it.  */\n+  if (sz == 0)\n+    sz = 1;\n+  p = (void *) malloc (sz);\n+  while (p == 0)\n+    {\n+      new_handler handler = __new_handler;\n+      if (! handler)\n+\tthrow bad_alloc ();\n+      handler ();\n       p = (void *) malloc (sz);\n     }\n-  \n+\n   return p;\n }\n+#endif"}, {"sha": "d5320f99502c5b1b4d08bb9a7f5fe9298d55c392", "filename": "gcc/cp/new2.cc", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2Fnew2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fcp%2Fnew2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fnew2.cc?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -1,4 +1,4 @@\n-// Support routine for the -*- C++ -*- dynamic memory management.\n+// Boilerplate support routines for -*- C++ -*- dynamic memory management.\n // Copyright (C) 1997 Free Software Foundation\n \n // This file is part of GNU CC.\n@@ -27,7 +27,54 @@\n \n #include \"new\"\n \n-void *operator new[] (size_t sz, const nothrow_t& nothrow) throw()\n+extern \"C\" void free (void *);\n+\n+#define WEAK(x) \\\n+  x __attribute__ ((weak)); \\\n+  x\n+\n+#ifdef L_op_vnew\n+WEAK(void * operator new[] (size_t sz) throw (std::bad_alloc))\n+{\n+  return ::operator new(sz);\n+}\n+#endif\n+\n+#ifdef L_op_vnewnt\n+WEAK(void *operator new[] (size_t sz, const nothrow_t& nothrow) throw())\n {\n   return ::operator new(sz, nothrow);\n }\n+#endif\n+\n+#ifdef L_op_delete\n+WEAK (void operator delete (void *ptr) throw ())\n+{\n+  if (ptr)\n+    free (ptr);\n+}\n+#endif\n+\n+#ifdef L_op_vdel\n+WEAK (void operator delete[] (void *ptr) throw ())\n+{\n+  if (ptr)\n+    free (ptr);\n+}\n+#endif\n+\n+#ifdef L_op_delnt\n+WEAK (void operator delete (void *ptr, const std::nothrow_t&) throw ())\n+{\n+  if (ptr)\n+    free (ptr);\n+}\n+#endif\n+\n+#ifdef L_op_vdelnt\n+WEAK (void operator delete[] (void *ptr, const std::nothrow_t&) throw ())\n+{\n+  if (ptr)\n+    free (ptr);\n+}\n+#endif"}, {"sha": "a74578ea4c7c311f12bbe414aac66098dcaeeadf", "filename": "gcc/except.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -1573,7 +1573,6 @@ output_exception_table ()\n   free (eh_table);\n \n   /* Ending marker for table.  */\n-  assemble_label (\"__EXCEPTION_END__\");\n   assemble_integer (constm1_rtx, POINTER_SIZE / BITS_PER_UNIT, 1);\n   assemble_integer (constm1_rtx, POINTER_SIZE / BITS_PER_UNIT, 1);\n   assemble_integer (constm1_rtx, POINTER_SIZE / BITS_PER_UNIT, 1);"}, {"sha": "7fec5cdd45edd924d3d718f056d1f8cd9b2891b9", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 0, "deletions": 155, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ced78d8b0c319de1c5f00bf0cc0972f317f43309/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=ced78d8b0c319de1c5f00bf0cc0972f317f43309", "patch": "@@ -42,10 +42,6 @@ Boston, MA 02111-1307, USA.  */\n #undef abort\n #endif\n \n-#if (SUPPORTS_WEAK == 1) && (defined (ASM_OUTPUT_DEF) || defined (ASM_OUTPUT_WEAK_ALIAS))\n-#define WEAK_ALIAS\n-#endif\n-\n /* Permit the tm.h file to select the endianness to use just for this\n    file.  This is used when the endianness is determined when the\n    compiler is run.  */\n@@ -2436,157 +2432,6 @@ stack_overflow:;\n #endif /* not BLOCK_PROFILER_CODE */\n #endif /* L_bb */\n \f\n-/* Default free-store management functions for C++, per sections 12.5 and\n-   17.3.3 of the Working Paper.  */\n-\n-#ifdef L_op_new\n-/* operator new (size_t), described in 17.3.3.5.  This function is used by\n-   C++ programs to allocate a block of memory to hold a single object.  */\n-\n-typedef void (*vfp)(void);\n-extern vfp __new_handler;\n-extern void __default_new_handler (void);\n-\n-#ifdef WEAK_ALIAS\n-void * __builtin_new (size_t sz)\n-     __attribute__ ((weak, alias (\"___builtin_new\")));\n-void *\n-___builtin_new (size_t sz)\n-#else\n-void *\n-__builtin_new (size_t sz)\n-#endif\n-{\n-  void *p;\n-  vfp handler = (__new_handler) ? __new_handler : __default_new_handler;\n-\n-  /* malloc (0) is unpredictable; avoid it.  */\n-  if (sz == 0)\n-    sz = 1;\n-  p = (void *) malloc (sz);\n-  while (p == 0)\n-    {\n-      (*handler) ();\n-      p = (void *) malloc (sz);\n-    }\n-  \n-  return p;\n-}\n-#endif /* L_op_new */\n-\n-#ifdef L_op_vnew\n-/* void * operator new [] (size_t), described in 17.3.3.6.  This function\n-   is used by C++ programs to allocate a block of memory for an array.  */\n-\n-extern void * __builtin_new (size_t);\n-\n-#ifdef WEAK_ALIAS\n-void * __builtin_vec_new (size_t sz)\n-     __attribute__ ((weak, alias (\"___builtin_vec_new\")));\n-void *\n-___builtin_vec_new (size_t sz)\n-#else\n-void *\n-__builtin_vec_new (size_t sz)\n-#endif\n-{\n-  return __builtin_new (sz);\n-}\n-#endif /* L_op_vnew */\n-\n-#ifdef L_new_handler\n-/* set_new_handler (fvoid_t *) and the default new handler, described in\n-   17.3.3.2 and 17.3.3.5.  These functions define the result of a failure\n-   to allocate the amount of memory requested from operator new or new [].  */\n-\n-#ifndef inhibit_libc\n-/* This gets us __GNU_LIBRARY__.  */\n-#undef NULL /* Avoid errors if stdio.h and our stddef.h mismatch.  */\n-#include <stdio.h>\n-\n-#ifdef __GNU_LIBRARY__\n-  /* Avoid forcing the library's meaning of `write' on the user program\n-     by using the \"internal\" name (for use within the library)  */\n-#define write(fd, buf, n)\t__write((fd), (buf), (n))\n-#endif\n-#endif /* inhibit_libc */\n-\n-typedef void (*vfp)(void);\n-void __default_new_handler (void);\n-\n-vfp __new_handler = (vfp) 0;\n-\n-vfp\n-set_new_handler (vfp handler)\n-{\n-  vfp prev_handler;\n-\n-  prev_handler = __new_handler;\n-  if (handler == 0) handler = __default_new_handler;\n-  __new_handler = handler;\n-  return prev_handler;\n-}\n-\n-#define MESSAGE \"Virtual memory exceeded in `new'\\n\"\n-\n-void\n-__default_new_handler ()\n-{\n-#ifndef inhibit_libc\n-  /* don't use fprintf (stderr, ...) because it may need to call malloc.  */\n-  /* This should really print the name of the program, but that is hard to\n-     do.  We need a standard, clean way to get at the name.  */\n-  write (2, MESSAGE, sizeof (MESSAGE));\n-#endif\n-  /* don't call exit () because that may call global destructors which\n-     may cause a loop.  */\n-  _exit (-1);\n-}\n-#endif\n-\n-#ifdef L_op_delete\n-/* operator delete (void *), described in 17.3.3.3.  This function is used\n-   by C++ programs to return to the free store a block of memory allocated\n-   as a single object.  */\n-\n-#ifdef WEAK_ALIAS\n-void __builtin_delete (void *ptr)\n-     __attribute__ ((weak, alias (\"___builtin_delete\")));\n-void\n-___builtin_delete (void *ptr)\n-#else\n-void\n-__builtin_delete (void *ptr)\n-#endif\n-{\n-  if (ptr)\n-    free (ptr);\n-}\n-#endif\n-\n-#ifdef L_op_vdel\n-/* operator delete [] (void *), described in 17.3.3.4.  This function is\n-   used by C++ programs to return to the free store a block of memory\n-   allocated as an array.  */\n-\n-extern void __builtin_delete (void *);\n-\n-#ifdef WEAK_ALIAS\n-void __builtin_vec_delete (void *ptr)\n-     __attribute__ ((weak, alias (\"___builtin_vec_delete\")));\n-void\n-___builtin_vec_delete (void *ptr)\n-#else\n-void\n-__builtin_vec_delete (void *ptr)\n-#endif\n-{\n-  __builtin_delete (ptr);\n-}\n-#endif\n-\n-/* End of C++ free-store management functions */\n-\f\n #ifdef L_shtab\n unsigned int __shtab[] = {\n     0x00000001, 0x00000002, 0x00000004, 0x00000008,"}]}