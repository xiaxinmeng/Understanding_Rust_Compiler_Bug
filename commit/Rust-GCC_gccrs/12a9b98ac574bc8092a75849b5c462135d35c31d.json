{"sha": "12a9b98ac574bc8092a75849b5c462135d35c31d", "node_id": "C_kwDOANBUbNoAKDEyYTliOThhYzU3NGJjODA5MmE3NTg0OWI1YzQ2MjEzNWQzNWMzMWQ", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-07-08T17:30:49Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-07-11T18:41:15Z"}, "message": "Avoid calling range_from_dom when dominator is already resolved.\n\nrange_from_dom makes a recursive call to resolve the immediate dominator\nwhen there are multiple incoming edges to a block.  This is not necessary\nwhen the dominator already has an on-entry cache value.\n\n\tPR tree-optimization/106234\n\t* gimple-range-cache.cc (ranger_cache::range_from_dom): Check dominator\n\tcache value before recursively resolving it.", "tree": {"sha": "6792f832b6de61c53b8e63b09ecf6cbe6abc596e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6792f832b6de61c53b8e63b09ecf6cbe6abc596e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12a9b98ac574bc8092a75849b5c462135d35c31d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a9b98ac574bc8092a75849b5c462135d35c31d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a9b98ac574bc8092a75849b5c462135d35c31d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a9b98ac574bc8092a75849b5c462135d35c31d/comments", "author": null, "committer": null, "parents": [{"sha": "c3ed9e0d6e96d8697e4bab994f8acbc5506240ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ed9e0d6e96d8697e4bab994f8acbc5506240ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3ed9e0d6e96d8697e4bab994f8acbc5506240ee"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "da7b8055d420c3e89b42b4f24455d386b5f875ac", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a9b98ac574bc8092a75849b5c462135d35c31d/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a9b98ac574bc8092a75849b5c462135d35c31d/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=12a9b98ac574bc8092a75849b5c462135d35c31d", "patch": "@@ -1359,10 +1359,11 @@ ranger_cache::range_from_dom (vrange &r, tree name, basic_block start_bb,\n \t    m_workback.quick_push (prev_bb);\n \t  else if (mode == RFD_FILL)\n \t    {\n-\t      // Multiple incoming edges, so recursively satisfy this block,\n-\t      // store the range, then calculate the incoming range for PREV_BB.\n-\t      if (def_bb != bb)\n+\t      // Multiple incoming edges, so recursively satisfy this block\n+\t      // if it doesn't already have a value, and store the range.\n+\t      if (!m_on_entry.bb_range_p (name, bb) && def_bb != bb)\n \t\t{\n+\t\t  // If the dominator has not been set, look it up.\n \t\t  range_from_dom (r, name, bb, RFD_FILL);\n \t\t  // If the range can't be store, don't try to accumulate\n \t\t  // the range in PREV_BB due to excessive recalculations."}]}