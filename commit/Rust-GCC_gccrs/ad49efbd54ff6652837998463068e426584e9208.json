{"sha": "ad49efbd54ff6652837998463068e426584e9208", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0OWVmYmQ1NGZmNjY1MjgzNzk5ODQ2MzA2OGU0MjY1ODRlOTIwOA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-13T00:15:43Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-13T00:15:43Z"}, "message": "In libobjc/: 2010-10-13 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-10-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * encoding.c (method_copyReturnType): New.\n        (method_copyArgumentType): New.\n        (method_getReturnType): New.\n        (method_getArgumentType): New.\n        * methods.c (method_getDescription): New.\n        * objc/runtime.h (method_copyReturnType): New.\n        (method_copyArgumentType): New.\n        (method_getReturnType): New.\n        (method_getArgumentType): New.\n        (method_getDescription): New.\n\nFrom-SVN: r165404", "tree": {"sha": "b79367b362926e98978a2c7ae810dcb0a436627b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b79367b362926e98978a2c7ae810dcb0a436627b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad49efbd54ff6652837998463068e426584e9208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad49efbd54ff6652837998463068e426584e9208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad49efbd54ff6652837998463068e426584e9208", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad49efbd54ff6652837998463068e426584e9208/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c994cc85bd7242a8b59b359bad02af74d166bf85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c994cc85bd7242a8b59b359bad02af74d166bf85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c994cc85bd7242a8b59b359bad02af74d166bf85"}], "stats": {"total": 247, "additions": 242, "deletions": 5}, "files": [{"sha": "7d3af57c1efcec79721cfed1848c05737e2df8ab", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad49efbd54ff6652837998463068e426584e9208/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad49efbd54ff6652837998463068e426584e9208/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=ad49efbd54ff6652837998463068e426584e9208", "patch": "@@ -1,3 +1,16 @@\n+2010-10-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* encoding.c (method_copyReturnType): New.\n+\t(method_copyArgumentType): New.\n+\t(method_getReturnType): New.\n+\t(method_getArgumentType): New.\n+\t* methods.c (method_getDescription): New.\n+\t* objc/runtime.h (method_copyReturnType): New.\n+\t(method_copyArgumentType): New.\n+\t(method_getReturnType): New.\n+\t(method_getArgumentType): New.\n+\t(method_getDescription): New.\n+\t\n 2010-10-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* encoding.c: Tidied up comments."}, {"sha": "13647d7d47ce85f207f2b54d9c8b3caa202fd35c", "filename": "libobjc/encoding.c", "status": "modified", "additions": 167, "deletions": 1, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad49efbd54ff6652837998463068e426584e9208/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad49efbd54ff6652837998463068e426584e9208/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=ad49efbd54ff6652837998463068e426584e9208", "patch": "@@ -39,6 +39,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc-private/module-abi-8.h\" /* For struct objc_method */\n #include <stdlib.h>\n #include <ctype.h>\n+#include <string.h>                    /* For memcpy.  */\n \n #undef  MAX\n #define MAX(X, Y)                    \\\n@@ -769,6 +770,172 @@ objc_skip_argspec (const char *type)\n   return type;\n }\n \n+char *\n+method_copyReturnType (struct objc_method *method)\n+{\n+  if (method == NULL)\n+    return 0;\n+  else\n+    {\n+      char *returnValue;\n+      size_t returnValueSize;\n+\n+      /* Determine returnValueSize.  */\n+      {\n+\t/* Find the end of the first argument.  We want to return the\n+\t   first argument spec, plus 1 byte for the \\0 at the end.  */\n+\tconst char *type = method->method_types;\n+\tif (*type == '\\0')\n+\t  return NULL;\n+\ttype = objc_skip_argspec (type);\n+\treturnValueSize = type - method->method_types + 1;\n+      }\n+\n+      /* Copy the first argument into returnValue.  */\n+      returnValue = malloc (sizeof (char) * returnValueSize);\n+      memcpy (returnValue, method->method_types, returnValueSize);\n+      returnValue[returnValueSize - 1] = '\\0';\n+\n+      return returnValue;\n+    }\n+}\n+\n+char *\n+method_copyArgumentType (struct objc_method * method, unsigned int argumentNumber)\n+{\n+  if (method == NULL)\n+    return 0;\n+  else\n+    {\n+      char *returnValue;\n+      const char *returnValueStart;\n+      size_t returnValueSize;\n+\n+      /* Determine returnValueStart and returnValueSize.  */\n+      {\n+\tconst char *type = method->method_types;\n+\n+\t/* Skip the first argument (return type).  */\n+\ttype = objc_skip_argspec (type);\n+\n+\t/* Now keep skipping arguments until we get to\n+\t   argumentNumber.  */\n+\twhile (argumentNumber > 0)\n+\t  {\n+\t    /* We are supposed to skip an argument, but the string is\n+\t       finished.  This means we were asked for a non-existing\n+\t       argument.  */\n+\t    if (*type == '\\0')\n+\t      return NULL;\n+\n+\t    type = objc_skip_argspec (type);\n+\t    argumentNumber--;\n+\t  }\n+\n+\t/* If the argument does not exist, return NULL.  */\n+\tif (*type == '\\0')\n+\t  return NULL;\n+\n+\treturnValueStart = type;\n+\ttype = objc_skip_argspec (type);\n+\treturnValueSize = type - returnValueStart + 1;\n+      }\n+      \n+      /* Copy the argument into returnValue.  */\n+      returnValue = malloc (sizeof (char) * returnValueSize);\n+      memcpy (returnValue, returnValueStart, returnValueSize);\n+      returnValue[returnValueSize - 1] = '\\0';\n+\n+      return returnValue;\n+    }\n+}\n+\n+void method_getReturnType (struct objc_method * method, char *returnValue, \n+\t\t\t   size_t returnValueSize)\n+{\n+  if (returnValue == NULL  ||  returnValueSize == 0)\n+    return;\n+\n+  /* Zero the string; we'll then write the argument type at the\n+     beginning of it, if needed.  */\n+  memset (returnValue, 0, returnValueSize);\n+\n+  if (method == NULL)\n+    return;\n+  else\n+    {\n+      size_t argumentTypeSize;\n+\n+      /* Determine argumentTypeSize.  */\n+      {\n+\t/* Find the end of the first argument.  We want to return the\n+\t   first argument spec.  */\n+\tconst char *type = method->method_types;\n+\tif (*type == '\\0')\n+\t  return;\n+\ttype = objc_skip_argspec (type);\n+\targumentTypeSize = type - method->method_types;\n+\tif (argumentTypeSize > returnValueSize)\n+\t  argumentTypeSize = returnValueSize;\n+      }\n+      /* Copy the argument at the beginning of the string.  */\n+      memcpy (returnValue, method->method_types, argumentTypeSize);\n+    }\n+}\n+\n+void method_getArgumentType (struct objc_method * method, unsigned int argumentNumber,\n+\t\t\t     char *returnValue, size_t returnValueSize)\n+{\n+  if (returnValue == NULL  ||  returnValueSize == 0)\n+    return;\n+\n+  /* Zero the string; we'll then write the argument type at the\n+     beginning of it, if needed.  */\n+  memset (returnValue, 0, returnValueSize);\n+\n+  if (method == NULL)\n+    return;\n+  else\n+    {\n+      const char *returnValueStart;\n+      size_t argumentTypeSize;\n+\n+      /* Determine returnValueStart and argumentTypeSize.  */\n+      {\n+\tconst char *type = method->method_types;\n+\n+\t/* Skip the first argument (return type).  */\n+\ttype = objc_skip_argspec (type);\n+\n+\t/* Now keep skipping arguments until we get to\n+\t   argumentNumber.  */\n+\twhile (argumentNumber > 0)\n+\t  {\n+\t    /* We are supposed to skip an argument, but the string is\n+\t       finished.  This means we were asked for a non-existing\n+\t       argument.  */\n+\t    if (*type == '\\0')\n+\t      return;\n+\n+\t    type = objc_skip_argspec (type);\n+\t    argumentNumber--;\n+\t  }\n+\n+\t/* If the argument does not exist, it's game over.  */\n+\tif (*type == '\\0')\n+\t  return;\n+\n+\treturnValueStart = type;\n+\ttype = objc_skip_argspec (type);\n+\targumentTypeSize = type - returnValueStart;\n+\tif (argumentTypeSize > returnValueSize)\n+\t  argumentTypeSize = returnValueSize;\n+      }\n+      /* Copy the argument at the beginning of the string.  */\n+      memcpy (returnValue, returnValueStart, argumentTypeSize);\n+    }\n+}\n+\n unsigned int\n method_getNumberOfArguments (struct objc_method *method)\n {\n@@ -835,7 +1002,6 @@ method_get_sizeof_arguments (struct objc_method *mth)\n       }\n   }\n */\n-\n char *\n method_get_next_argument (arglist_t argframe, const char **type)\n {"}, {"sha": "65939a6d5cd7ed21cb71f1453d91818e7fa13c41", "filename": "libobjc/methods.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad49efbd54ff6652837998463068e426584e9208/libobjc%2Fmethods.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad49efbd54ff6652837998463068e426584e9208/libobjc%2Fmethods.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fmethods.c?ref=ad49efbd54ff6652837998463068e426584e9208", "patch": "@@ -29,31 +29,43 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"objc-private/runtime.h\"      /* For __objc_runtime_mutex.  */\n #include <stdlib.h>                    /* For malloc.  */\n \n-SEL method_getName (struct objc_method * method)\n+SEL\n+method_getName (struct objc_method * method)\n {\n   if (method == NULL)\n     return NULL;\n \n   return method->method_name;\n }\n \n-const char * method_getTypeEncoding (struct objc_method * method)\n+const char *\n+method_getTypeEncoding (struct objc_method * method)\n {\n   if (method == NULL)\n     return NULL;\n \n   return method->method_types;\n }\n \n-IMP method_getImplementation (struct objc_method * method)\n+IMP\n+method_getImplementation (struct objc_method * method)\n {\n   if (method == NULL)\n     return NULL;\n \n   return method->method_imp;\n }\n \n-struct objc_method ** class_copyMethodList (Class class_, unsigned int *numberOfReturnedMethods)\n+struct objc_method_description *\n+method_getDescription (struct objc_method * method)\n+{\n+  /* Note that the following returns NULL if method is NULL, which is\n+     fine.  */\n+  return (struct objc_method_description *)method;\n+}\n+\n+struct objc_method **\n+class_copyMethodList (Class class_, unsigned int *numberOfReturnedMethods)\n {\n   unsigned int count = 0;\n   struct objc_method **returnValue = NULL;"}, {"sha": "43ef9b909845d93b5d7a0af074cfabbf88dfd0ac", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad49efbd54ff6652837998463068e426584e9208/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad49efbd54ff6652837998463068e426584e9208/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=ad49efbd54ff6652837998463068e426584e9208", "patch": "@@ -479,6 +479,10 @@ objc_EXPORT IMP method_getImplementation (Method method);\n    NULL.  */\n objc_EXPORT const char * method_getTypeEncoding (Method method);\n \n+/* Return a method description for the method.  Return NULL if\n+   'method' is NULL.  */\n+objc_EXPORT struct objc_method_description * method_getDescription (Method method);\n+\n /* Return all the instance methods of the class.  The return value of\n    the function is a pointer to an area, allocated with malloc(), that\n    contains all the instance methods of the class.  It does not\n@@ -500,6 +504,48 @@ objc_EXPORT Method * class_copyMethodList (Class class_, unsigned int *numberOfR\n    NULL.  */\n objc_EXPORT unsigned int method_getNumberOfArguments (Method method);\n \n+/* Return the string encoding for the return type of method 'method'.\n+   The string is a standard NULL-terminated string in an area of\n+   memory allocated with malloc(); you should free it with free() when\n+   you finish using it.  Return an empty string if method is NULL.  */\n+objc_EXPORT char * method_copyReturnType (Method method);\n+\n+/* Return the string encoding for the argument type of method\n+   'method', argument number 'argumentNumber' ('argumentNumber' is 0\n+   for self, 1 for _cmd, and 2 or more for the additional arguments if\n+   any).  The string is a standard NULL-terminated string in an area\n+   of memory allocated with malloc(); you should free it with free()\n+   when you finish using it.  Return an empty string if method is NULL\n+   or if 'argumentNumber' refers to a non-existing argument.  */\n+objc_EXPORT char * method_copyArgumentType (Method method, unsigned int argumentNumber);\n+\n+/* Return the string encoding for the return type of method 'method'.\n+   The string is returned by copying it into the supplied\n+   'returnValue' string, which is of size 'returnValueSize'.  No more\n+   than 'returnValueSize' characters are copied; if the encoding is\n+   smaller than 'returnValueSize', the rest of 'returnValue' is filled\n+   with NULLs.  If it is bigger, it is truncated (and would not be\n+   NULL-terminated).  You should supply a big enough\n+   'returnValueSize'.  If the method is NULL, returnValue is set to a\n+   string of NULLs.  */\n+objc_EXPORT void method_getReturnType (Method method, char *returnValue, \n+\t\t\t\t       size_t returnValueSize);\n+\n+/* Return the string encoding for the argument type of method\n+   'method', argument number 'argumentNumber' ('argumentNumber' is 0\n+   for self, 1 for _cmd, and 2 or more for the additional arguments if\n+   any).  The string is returned by copying it into the supplied\n+   'returnValue' string, which is of size 'returnValueSize'.  No more\n+   than 'returnValueSize' characters are copied; if the encoding is\n+   smaller than 'returnValueSize', the rest of 'returnValue' is filled\n+   with NULLs.  If it is bigger, it is truncated (and would not be\n+   NULL-terminated).  You should supply a big enough\n+   'returnValueSize'.  If the method is NULL, returnValue is set to a\n+   string of NULLs.  */\n+objc_EXPORT void method_getArgumentType (Method method, unsigned int argumentNumber,\n+\t\t\t\t\t char *returnValue, size_t returnValueSize);\n+\n+\n \n /** Implementation: the following functions are in protocols.c.  */\n "}]}