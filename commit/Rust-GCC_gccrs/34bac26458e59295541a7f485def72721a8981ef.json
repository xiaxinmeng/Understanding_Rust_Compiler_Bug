{"sha": "34bac26458e59295541a7f485def72721a8981ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRiYWMyNjQ1OGU1OTI5NTU0MWE3ZjQ4NWRlZjcyNzIxYTg5ODFlZg==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2019-12-17T13:01:16Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2019-12-17T13:01:16Z"}, "message": "Add clz and ctz for amdgcn\n\n2019-12-17  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* config/gcn/gcn.h (CLZ_DEFINED_VALUE_AT_ZERO): Define.\n\t(CTZ_DEFINED_VALUE_AT_ZERO): Define.\n\t* config/gcn/gcn.md (s_mnemonic): Add clz and ctz.\n\t(expander): Likewise.\n\t(countzeros): New code iterator.\n\t(<expander>si2): New insn pattern.\n\t(<expander>di2): New insn pattern.\n\nFrom-SVN: r279458", "tree": {"sha": "8c61c7642ed7bb7cd21a214e067e4a752b76330a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c61c7642ed7bb7cd21a214e067e4a752b76330a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34bac26458e59295541a7f485def72721a8981ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34bac26458e59295541a7f485def72721a8981ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34bac26458e59295541a7f485def72721a8981ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34bac26458e59295541a7f485def72721a8981ef/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b8499a4808d5b8b65559c99bb8c68d076f195a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8499a4808d5b8b65559c99bb8c68d076f195a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8499a4808d5b8b65559c99bb8c68d076f195a3"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "5c5b9f4b840546e6407b03a5d628d96f72c55840", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bac26458e59295541a7f485def72721a8981ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bac26458e59295541a7f485def72721a8981ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34bac26458e59295541a7f485def72721a8981ef", "patch": "@@ -1,3 +1,13 @@\n+2019-12-17  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.h (CLZ_DEFINED_VALUE_AT_ZERO): Define.\n+\t(CTZ_DEFINED_VALUE_AT_ZERO): Define.\n+\t* config/gcn/gcn.md (s_mnemonic): Add clz and ctz.\n+\t(expander): Likewise.\n+\t(countzeros): New code iterator.\n+\t(<expander>si2): New insn pattern.\n+\t(<expander>di2): New insn pattern.\n+\n 2019-12-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/92962"}, {"sha": "76b449ba5cf8c55181960e32dc0577423230dc0d", "filename": "gcc/config/gcn/gcn.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bac26458e59295541a7f485def72721a8981ef/gcc%2Fconfig%2Fgcn%2Fgcn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bac26458e59295541a7f485def72721a8981ef/gcc%2Fconfig%2Fgcn%2Fgcn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.h?ref=34bac26458e59295541a7f485def72721a8981ef", "patch": "@@ -644,6 +644,10 @@ enum gcn_builtin_codes\n /* This needs to match gcn_function_value.  */\n #define LIBCALL_VALUE(MODE) gen_rtx_REG (MODE, SGPR_REGNO (RETURN_VALUE_REG))\n \n+/* The s_ff0 and s_flbit instructions return -1 if no input bits are set.  */\n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = -1, 2)\n+#define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) ((VALUE) = -1, 2)\n+\n \f\n /* Costs.  */\n "}, {"sha": "b48af0dbde870cf1f3c97a37b31d0f7511842eca", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34bac26458e59295541a7f485def72721a8981ef/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34bac26458e59295541a7f485def72721a8981ef/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=34bac26458e59295541a7f485def72721a8981ef", "patch": "@@ -331,7 +331,9 @@\n \n (define_code_attr s_mnemonic\n   [(not \"not%b\")\n-   (popcount \"bcnt1_i32%b\")])\n+   (popcount \"bcnt1_i32%b\")\n+   (clz \"flbit_i32%b\")\n+   (ctz \"ff1_i32%b\")])\n \n (define_code_attr revmnemonic\n   [(minus \"subrev%i\")\n@@ -356,7 +358,9 @@\n    (umin \"umin\")\n    (umax \"umax\")\n    (not \"one_cmpl\")\n-   (popcount \"popcount\")])\n+   (popcount \"popcount\")\n+   (clz \"clz\")\n+   (ctz \"ctz\")])\n \n ;; }}}\n ;; {{{ Miscellaneous instructions\n@@ -1389,6 +1393,28 @@\n   [(set_attr \"type\" \"sop1,vop1\")\n    (set_attr \"length\" \"8\")])\n \n+(define_code_iterator countzeros [clz ctz])\n+\n+(define_insn \"<expander>si2\"\n+  [(set (match_operand:SI 0 \"register_operand\"  \"=Sg,Sg\")\n+        (countzeros:SI\n+\t  (match_operand:SI 1 \"gcn_alu_operand\" \"SgA, B\")))]\n+  \"\"\n+  \"s_<s_mnemonic>1\\t%0, %1\"\n+  [(set_attr \"type\" \"sop1\")\n+   (set_attr \"length\" \"4,8\")])\n+\n+; The truncate ensures that a constant passed to operand 1 is treated as DImode\n+(define_insn \"<expander>di2\"\n+  [(set (match_operand:SI 0 \"register_operand\"    \"=Sg,Sg\")\n+\t(truncate:SI\n+\t  (countzeros:DI\n+\t    (match_operand:DI 1 \"gcn_alu_operand\" \"SgA, B\"))))]\n+  \"\"\n+  \"s_<s_mnemonic>1\\t%0, %1\"\n+  [(set_attr \"type\" \"sop1\")\n+   (set_attr \"length\" \"4,8\")])\n+\n ;; }}}\n ;; {{{ ALU: generic 32-bit binop\n "}]}