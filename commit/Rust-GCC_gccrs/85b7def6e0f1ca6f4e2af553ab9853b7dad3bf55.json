{"sha": "85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODViN2RlZjZlMGYxY2E2ZjRlMmFmNTUzYWI5ODUzYjdkYWQzYmY1NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-04-14T13:14:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-04-14T13:14:52Z"}, "message": "typeck.c (get_member_function_from_ptrfunc): Don't do gratuitious division and multiplication on ptrmemfunc_vbit_in_delta...\n\n        * typeck.c (get_member_function_from_ptrfunc): Don't do\n        gratuitious division and multiplication on\n        ptrmemfunc_vbit_in_delta targets.\n\nFrom-SVN: r52293", "tree": {"sha": "132fd9f681e45411ec8fbf486bcd05062b045407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/132fd9f681e45411ec8fbf486bcd05062b045407"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf56e373c4b75dd96e6521637217d47261cb6b8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf56e373c4b75dd96e6521637217d47261cb6b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf56e373c4b75dd96e6521637217d47261cb6b8f"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "d7755fda9ff8ca40c166962f3bb188b3afa12aa3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55", "patch": "@@ -1,3 +1,9 @@\n+2002-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck.c (get_member_function_from_ptrfunc): Don't do\n+\tgratuitious division and multiplication on\n+\tptrmemfunc_vbit_in_delta targets.\n+\n 2002-04-12  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/5373."}, {"sha": "060097abae1d9fefbebf332ea657e1731a468cae", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=85b7def6e0f1ca6f4e2af553ab9853b7dad3bf55", "patch": "@@ -2833,6 +2833,7 @@ get_member_function_from_ptrfunc (instance_ptrptr, function)\n     {\n       tree fntype, idx, e1, delta, delta2, e2, e3, vtbl;\n       tree instance, basetype;\n+      tree mask;\n \n       tree instance_ptr = *instance_ptrptr;\n \n@@ -2864,7 +2865,7 @@ get_member_function_from_ptrfunc (instance_ptrptr, function)\n \treturn instance;\n \n       e3 = PFN_FROM_PTRMEMFUNC (function);\n-      \n+\n       vtbl = build1 (NOP_EXPR, build_pointer_type (ptr_type_node), instance);\n       TREE_CONSTANT (vtbl) = TREE_CONSTANT (instance);\n       \n@@ -2879,20 +2880,14 @@ get_member_function_from_ptrfunc (instance_ptrptr, function)\n \t to pointer-to-base-member, as long as the dynamic object\n \t later has the right member. */\n \n-      /* Promoting idx before saving it improves performance on RISC\n-\t targets.  Without promoting, the first compare used\n-\t load-with-sign-extend, while the second used normal load then\n-\t shift to sign-extend.  An optimizer flaw, perhaps, but it's\n-\t easier to make this change.  */\n-      idx = cp_build_binary_op (TRUNC_DIV_EXPR, \n-\t\t\t\tbuild1 (NOP_EXPR, vtable_index_type, e3),\n-\t\t\t\tTYPE_SIZE_UNIT (vtable_entry_type));\n+      idx = build1 (NOP_EXPR, vtable_index_type, e3);\n       switch (TARGET_PTRMEMFUNC_VBIT_LOCATION)\n \t{\n \tcase ptrmemfunc_vbit_in_pfn:\n-\t  e1 = cp_build_binary_op (BIT_AND_EXPR,\n-\t\t\t\t   build1 (NOP_EXPR, vtable_index_type, e3),\n-\t\t\t\t   integer_one_node);\n+\t  /* Mask out the virtual bit from the index.  */\n+\t  e1 = cp_build_binary_op (BIT_AND_EXPR, idx, integer_one_node);\n+\t  mask = build1 (NOP_EXPR, vtable_index_type, build_int_2 (~1, ~0));\n+\t  idx = cp_build_binary_op (BIT_AND_EXPR, idx, mask);\n \t  break;\n \n \tcase ptrmemfunc_vbit_in_delta:\n@@ -2916,7 +2911,9 @@ get_member_function_from_ptrfunc (instance_ptrptr, function)\n \t build_pointer_type (build_pointer_type (vtable_entry_type)),\n \t vtbl, cp_convert (ptrdiff_type_node, delta2));\n       vtbl = build_indirect_ref (vtbl, NULL);\n-      e2 = build_array_ref (vtbl, idx);\n+\n+      e2 = fold (build (PLUS_EXPR, TREE_TYPE (vtbl), vtbl, idx));\n+      e2 = build_indirect_ref (e2, NULL);\n \n       /* When using function descriptors, the address of the\n \t vtable entry is treated as a function pointer.  */"}]}