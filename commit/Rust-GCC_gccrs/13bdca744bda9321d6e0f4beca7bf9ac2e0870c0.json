{"sha": "13bdca744bda9321d6e0f4beca7bf9ac2e0870c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiZGNhNzQ0YmRhOTMyMWQ2ZTBmNGJlY2E3YmY5YWMyZTA4NzBjMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-09-12T14:24:29Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-09-12T14:24:29Z"}, "message": "Reduce lookup_attribute memory footprint.\n\n2017-09-12  Martin Liska  <mliska@suse.cz>\n\n\t* attribs.c (private_lookup_attribute): New function.\n\t* attribs.h (private_lookup_attribute): Declared here.\n\t(lookup_attribute): Called from this place.\n\nFrom-SVN: r252022", "tree": {"sha": "9a86fbfc054247f37f8de32b3f1a30ec141c2e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a86fbfc054247f37f8de32b3f1a30ec141c2e8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29545149bf8ca8c89a9a7d32fe7fdb8e9294759c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29545149bf8ca8c89a9a7d32fe7fdb8e9294759c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29545149bf8ca8c89a9a7d32fe7fdb8e9294759c"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "a4fbc2aecd904b777b40e2ff59ac01fe0bede7d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13bdca744bda9321d6e0f4beca7bf9ac2e0870c0", "patch": "@@ -1,3 +1,9 @@\n+2017-09-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* attribs.c (private_lookup_attribute): New function.\n+\t* attribs.h (private_lookup_attribute): Declared here.\n+\t(lookup_attribute): Called from this place.\n+\n 2017-09-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82157"}, {"sha": "4ef35b861f8f23a5d16975c23490fefd5b365c2e", "filename": "gcc/attribs.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=13bdca744bda9321d6e0f4beca7bf9ac2e0870c0", "patch": "@@ -1584,3 +1584,25 @@ attribute_list_contained (const_tree l1, const_tree l2)\n \n   return 1;\n }\n+\n+/* The backbone of lookup_attribute().  ATTR_LEN is the string length\n+   of ATTR_NAME, and LIST is not NULL_TREE.\n+\n+   The function is called from lookup_attribute in order to optimize\n+   for size.  */\n+\n+tree\n+private_lookup_attribute (const char *attr_name, size_t attr_len, tree list)\n+{\n+  while (list)\n+    {\n+      tree attr = get_attribute_name (list);\n+      size_t ident_len = IDENTIFIER_LENGTH (attr);\n+      if (cmp_attribs (attr_name, attr_len, IDENTIFIER_POINTER (attr),\n+\t\t       ident_len))\n+\tbreak;\n+      list = TREE_CHAIN (list);\n+    }\n+\n+  return list;\n+}"}, {"sha": "65e002ce988221fb360e04c82939b25c572b4aff", "filename": "gcc/attribs.h", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0/gcc%2Fattribs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13bdca744bda9321d6e0f4beca7bf9ac2e0870c0/gcc%2Fattribs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.h?ref=13bdca744bda9321d6e0f4beca7bf9ac2e0870c0", "patch": "@@ -87,6 +87,14 @@ extern tree handle_dll_attribute (tree *, tree, tree, int, bool *);\n extern int attribute_list_equal (const_tree, const_tree);\n extern int attribute_list_contained (const_tree, const_tree);\n \n+/* The backbone of lookup_attribute().  ATTR_LEN is the string length\n+   of ATTR_NAME, and LIST is not NULL_TREE.\n+\n+   The function is called from lookup_attribute in order to optimize\n+   for size.  */\n+extern tree private_lookup_attribute (const char *attr_name, size_t attr_len,\n+\t\t\t\t      tree list);\n+\n /* For a given IDENTIFIER_NODE, strip leading and trailing '_' characters\n    so that we have a canonical form of attribute names.  */\n \n@@ -151,17 +159,7 @@ lookup_attribute (const char *attr_name, tree list)\n       /* Do the strlen() before calling the out-of-line implementation.\n \t In most cases attr_name is a string constant, and the compiler\n \t will optimize the strlen() away.  */\n-      while (list)\n-\t{\n-\t  tree attr = get_attribute_name (list);\n-\t  size_t ident_len = IDENTIFIER_LENGTH (attr);\n-\t  if (cmp_attribs (attr_name, attr_len, IDENTIFIER_POINTER (attr),\n-\t\t\t   ident_len))\n-\t    break;\n-\t  list = TREE_CHAIN (list);\n-\t}\n-\n-      return list;\n+      return private_lookup_attribute (attr_name, attr_len, list);\n     }\n }\n "}]}