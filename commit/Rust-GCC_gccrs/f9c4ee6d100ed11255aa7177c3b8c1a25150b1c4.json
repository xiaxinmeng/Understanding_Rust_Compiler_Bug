{"sha": "f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjljNGVlNmQxMDBlZDExMjU1YWE3MTc3YzNiOGMxYTI1MTUwYjFjNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-11-03T13:13:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-11-03T13:13:21Z"}, "message": "sso_string_base.h (__sso_string_base<>::_M_swap): Change the various traits_type::copy call to always copy the entire local buffer...\n\n2005-11-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_swap):\n\tChange the various traits_type::copy call to always copy the\n\tentire local buffer; return early and don't do a full swap on\n\tthe lengths for two common cases; change two _S_copy to plain\n\ttraits_type::copy.\n\nFrom-SVN: r106431", "tree": {"sha": "8e4ed692c702645120b2a07f7a39c193cad8b679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e4ed692c702645120b2a07f7a39c193cad8b679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4/comments", "author": null, "committer": null, "parents": [{"sha": "02f1d17cccdf7feac9e7a6515934b396c82e2b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f1d17cccdf7feac9e7a6515934b396c82e2b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f1d17cccdf7feac9e7a6515934b396c82e2b02"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "ab1f558a0327092817956e905402ac18eee962ac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4", "patch": "@@ -1,3 +1,11 @@\n+2005-11-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_swap):\n+\tChange the various traits_type::copy call to always copy the\n+\tentire local buffer; return early and don't do a full swap on\n+\tthe lengths for two common cases; change two _S_copy to plain\n+\ttraits_type::copy.\n+\n 2005-11-02  Thomas Kho  <tkho@ucla.edu>\n \n \tPR libstdc++/23425"}, {"sha": "c37bd88ca5a7eae07b9efd444181be5c4ce9723b", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=f9c4ee6d100ed11255aa7177c3b8c1a25150b1c4", "patch": "@@ -255,29 +255,34 @@ namespace __gnu_cxx\n \t      {\n \t\t_CharT __tmp_data[_S_local_capacity + 1];\n \t\ttraits_type::copy(__tmp_data, __rcs._M_local_data,\n-\t\t\t\t  __rcs._M_length() + 1);\n+\t\t\t\t  _S_local_capacity + 1);\n \t\ttraits_type::copy(__rcs._M_local_data, _M_local_data,\n-\t\t\t\t  _M_length() + 1);\n+\t\t\t\t  _S_local_capacity + 1);\n \t\ttraits_type::copy(_M_local_data, __tmp_data,\n-\t\t\t\t  __rcs._M_length() + 1);\n+\t\t\t\t  _S_local_capacity + 1);\n \t      }\n \t    else if (__rcs._M_length())\n \t      {\n \t\ttraits_type::copy(_M_local_data, __rcs._M_local_data,\n-\t\t\t\t  __rcs._M_length() + 1);\n-\t\ttraits_type::assign(__rcs._M_local_data[0], _CharT());\n+\t\t\t\t  _S_local_capacity + 1);\n+\t\t_M_length(__rcs._M_length());\n+\t\t__rcs._M_set_length(0);\n+\t\treturn;\n \t      }\n \t    else if (_M_length())\n \t      {\n \t\ttraits_type::copy(__rcs._M_local_data, _M_local_data,\n-\t\t\t\t  _M_length() + 1);\n-\t\ttraits_type::assign(_M_local_data[0], _CharT());\n+\t\t\t\t  _S_local_capacity + 1);\n+\t\t__rcs._M_length(_M_length());\n+\t\t_M_set_length(0);\n+\t\treturn;\n \t      }\n \t  }\n \telse\n \t  {\n \t    const size_type __tmp_capacity = __rcs._M_allocated_capacity;\n-\t    _S_copy(__rcs._M_local_data, _M_local_data, _M_length() + 1);\n+\t    traits_type::copy(__rcs._M_local_data, _M_local_data,\n+\t\t\t      _S_local_capacity + 1);\n \t    _M_data(__rcs._M_data());\n \t    __rcs._M_data(__rcs._M_local_data);\n \t    _M_capacity(__tmp_capacity);\n@@ -287,8 +292,8 @@ namespace __gnu_cxx\n \t  const size_type __tmp_capacity = _M_allocated_capacity;\n \t  if (__rcs._M_is_local())\n \t    {\n-\t      _S_copy(_M_local_data, __rcs._M_local_data,\n-\t\t      __rcs._M_length() + 1);\n+\t      traits_type::copy(_M_local_data, __rcs._M_local_data,\n+\t\t\t\t_S_local_capacity + 1);\n \t      __rcs._M_data(_M_data());\n \t      _M_data(_M_local_data);\n \t    }"}]}