{"sha": "16868d849b17f2d34d9499b21b4fb6d5f2bddad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY4NjhkODQ5YjE3ZjJkMzRkOTQ5OWIyMWI0ZmI2ZDVmMmJkZGFkOQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2011-06-03T10:22:52Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2011-06-03T10:22:52Z"}, "message": "gcc/\n\t* config/arm/arm-cores.def (strongarm, strongarm110, strongarm1100)\n\t(strongarm1110): Use strongarm tuning.\n\t* config/arm/arm-protos.h (tune_params): Add max_insns_skipped\n\tfield.\n\t* config/arm/arm.c (arm_strongarm_tune): New.\n\t(arm_slowmul_tune, arm_fastmul_tune, arm_xscale_tune, arm_9e_tune)\n\t(arm_v6t2_tune, arm_cortex_tune, arm_cortex_a5_tune)\n\t(arm_cortex_a9_tune, arm_fa726te_tune): Add max_insns_skipped field\n\tsetting, using previous defaults or 1 for Cortex-A5.\n\t(arm_option_override): Set max_insns_skipped from current tuning.\n\nFrom-SVN: r174599", "tree": {"sha": "0369d5232369602829a1e2886513ae69f1256091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0369d5232369602829a1e2886513ae69f1256091"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16868d849b17f2d34d9499b21b4fb6d5f2bddad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16868d849b17f2d34d9499b21b4fb6d5f2bddad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16868d849b17f2d34d9499b21b4fb6d5f2bddad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16868d849b17f2d34d9499b21b4fb6d5f2bddad9/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1cec128519018ff21ab031b4c70228175dfc830e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cec128519018ff21ab031b4c70228175dfc830e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cec128519018ff21ab031b4c70228175dfc830e"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "b63f0e0543fed8cd102dec95fe78b60487a11af3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16868d849b17f2d34d9499b21b4fb6d5f2bddad9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16868d849b17f2d34d9499b21b4fb6d5f2bddad9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16868d849b17f2d34d9499b21b4fb6d5f2bddad9", "patch": "@@ -1,3 +1,16 @@\n+2011-06-03  Julian Brown  <julian@codesourcery.com>\n+\n+\t* config/arm/arm-cores.def (strongarm, strongarm110, strongarm1100)\n+\t(strongarm1110): Use strongarm tuning.\n+\t* config/arm/arm-protos.h (tune_params): Add max_insns_skipped\n+\tfield.\n+\t* config/arm/arm.c (arm_strongarm_tune): New.\n+\t(arm_slowmul_tune, arm_fastmul_tune, arm_xscale_tune, arm_9e_tune)\n+\t(arm_v6t2_tune, arm_cortex_tune, arm_cortex_a5_tune)\n+\t(arm_cortex_a9_tune, arm_fa726te_tune): Add max_insns_skipped field\n+\tsetting, using previous defaults or 1 for Cortex-A5.\n+\t(arm_option_override): Set max_insns_skipped from current tuning.\n+\n 2011-06-03  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* doc/install.texi (Options specification): Document --with-specs."}, {"sha": "11a6ad93b799e4244791cfba960febe32528ceca", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16868d849b17f2d34d9499b21b4fb6d5f2bddad9/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16868d849b17f2d34d9499b21b4fb6d5f2bddad9/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=16868d849b17f2d34d9499b21b4fb6d5f2bddad9", "patch": "@@ -70,10 +70,10 @@ ARM_CORE(\"arm7dmi\",       arm7dmi,\t3M,\tFL_CO_PROC | FL_MODE26, fastmul)\n /* V4 Architecture Processors */\n ARM_CORE(\"arm8\",          arm8,\t\t4,\t             FL_MODE26 | FL_LDSCHED, fastmul)\n ARM_CORE(\"arm810\",        arm810,\t4,\t             FL_MODE26 | FL_LDSCHED, fastmul)\n-ARM_CORE(\"strongarm\",     strongarm,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n-ARM_CORE(\"strongarm110\",  strongarm110,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n-ARM_CORE(\"strongarm1100\", strongarm1100, 4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n-ARM_CORE(\"strongarm1110\", strongarm1110, 4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, fastmul)\n+ARM_CORE(\"strongarm\",     strongarm,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n+ARM_CORE(\"strongarm110\",  strongarm110,\t4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n+ARM_CORE(\"strongarm1100\", strongarm1100, 4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n+ARM_CORE(\"strongarm1110\", strongarm1110, 4,\t             FL_MODE26 | FL_LDSCHED | FL_STRONG, strongarm)\n ARM_CORE(\"fa526\",         fa526,        4,                               FL_LDSCHED, fastmul)\n ARM_CORE(\"fa626\",         fa626,        4,                               FL_LDSCHED, fastmul)\n "}, {"sha": "67aee46e0bfebab873e4b938e99ba3c8cd74dbaa", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16868d849b17f2d34d9499b21b4fb6d5f2bddad9/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16868d849b17f2d34d9499b21b4fb6d5f2bddad9/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=16868d849b17f2d34d9499b21b4fb6d5f2bddad9", "patch": "@@ -221,6 +221,9 @@ struct tune_params\n   bool (*rtx_costs) (rtx, RTX_CODE, RTX_CODE, int *, bool);\n   bool (*sched_adjust_cost) (rtx, rtx, rtx, int *);\n   int constant_limit;\n+  /* Maximum number of instructions to conditionalise in\n+     arm_final_prescan_insn.  */\n+  int max_insns_skipped;\n   int num_prefetch_slots;\n   int l1_cache_size;\n   int l1_cache_line_size;"}, {"sha": "057f9bae9c0e87c4c63771c43a9677e309076f9c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16868d849b17f2d34d9499b21b4fb6d5f2bddad9/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16868d849b17f2d34d9499b21b4fb6d5f2bddad9/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=16868d849b17f2d34d9499b21b4fb6d5f2bddad9", "patch": "@@ -859,6 +859,7 @@ const struct tune_params arm_slowmul_tune =\n   arm_slowmul_rtx_costs,\n   NULL,\n   3,\t\t\t\t\t\t/* Constant limit.  */\n+  5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost\n@@ -869,6 +870,21 @@ const struct tune_params arm_fastmul_tune =\n   arm_fastmul_rtx_costs,\n   NULL,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n+  5,\t\t\t\t\t\t/* Max cond insns.  */\n+  ARM_PREFETCH_NOT_BENEFICIAL,\n+  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n+  arm_default_branch_cost\n+};\n+\n+/* StrongARM has early execution of branches, so a sequence that is worth\n+   skipping is shorter.  Set max_insns_skipped to a lower value.  */\n+\n+const struct tune_params arm_strongarm_tune =\n+{\n+  arm_fastmul_rtx_costs,\n+  NULL,\n+  1,\t\t\t\t\t\t/* Constant limit.  */\n+  3,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost\n@@ -879,6 +895,7 @@ const struct tune_params arm_xscale_tune =\n   arm_xscale_rtx_costs,\n   xscale_sched_adjust_cost,\n   2,\t\t\t\t\t\t/* Constant limit.  */\n+  3,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost\n@@ -889,6 +906,7 @@ const struct tune_params arm_9e_tune =\n   arm_9e_rtx_costs,\n   NULL,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n+  5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost\n@@ -899,6 +917,7 @@ const struct tune_params arm_v6t2_tune =\n   arm_9e_rtx_costs,\n   NULL,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n+  5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   false,\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost\n@@ -910,16 +929,21 @@ const struct tune_params arm_cortex_tune =\n   arm_9e_rtx_costs,\n   NULL,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n+  5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   false,\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost\n };\n \n+/* Branches can be dual-issued on Cortex-A5, so conditional execution is\n+   less appealing.  Set max_insns_skipped to a low value.  */\n+\n const struct tune_params arm_cortex_a5_tune =\n {\n   arm_9e_rtx_costs,\n   NULL,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n+  1,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   false,\t\t\t\t\t/* Prefer constant pool.  */\n   arm_cortex_a5_branch_cost\n@@ -930,6 +954,7 @@ const struct tune_params arm_cortex_a9_tune =\n   arm_9e_rtx_costs,\n   cortex_a9_sched_adjust_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n+  5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_BENEFICIAL(4,32,32),\n   false,\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost\n@@ -940,6 +965,7 @@ const struct tune_params arm_fa726te_tune =\n   arm_9e_rtx_costs,\n   fa726te_sched_adjust_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n+  5,\t\t\t\t\t\t/* Max cond insns.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n   true,\t\t\t\t\t\t/* Prefer constant pool.  */\n   arm_default_branch_cost\n@@ -1735,12 +1761,7 @@ arm_option_override (void)\n       max_insns_skipped = 6;\n     }\n   else\n-    {\n-      /* StrongARM has early execution of branches, so a sequence\n-         that is worth skipping is shorter.  */\n-      if (arm_tune_strongarm)\n-        max_insns_skipped = 3;\n-    }\n+    max_insns_skipped = current_tune->max_insns_skipped;\n \n   /* Hot/Cold partitioning is not currently supported, since we can't\n      handle literal pool placement in that case.  */"}]}