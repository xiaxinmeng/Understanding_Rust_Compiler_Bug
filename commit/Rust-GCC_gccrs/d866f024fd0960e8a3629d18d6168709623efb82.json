{"sha": "d866f024fd0960e8a3629d18d6168709623efb82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg2NmYwMjRmZDA5NjBlOGEzNjI5ZDE4ZDYxNjg3MDk2MjNlZmI4Mg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2015-09-15T12:43:07Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2015-09-15T12:43:07Z"}, "message": "[AArch64 array_mode 5/8] Remove V_FOUR_ELEM, again using BLKmode + set_mem_size.\n\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_ld4r<mode>):\n\tChange operand mode from <V_FOUR_ELEM> to BLK.\n\t(aarch64_vec_load_lanesxi_lane<mode>): Likewise.\n\t(aarch64_vec_store_lanesxi_lane<mode): Likewise.\n\t(aarch64_ld4r<mode>): Generate MEM rtx with BLKmode, call set_mem_size.\n\t(aarch64_ld4_lane<mode>): Likewise.\n\t(aarch64_st4_lane<mode>): Likewise.\n\t* config/aarch64/iterators.md (V_FOUR_ELEM): Remove.\n\nFrom-SVN: r227789", "tree": {"sha": "a800ef2da1f6e87f53efc03e0468faf71b24462b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a800ef2da1f6e87f53efc03e0468faf71b24462b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d866f024fd0960e8a3629d18d6168709623efb82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d866f024fd0960e8a3629d18d6168709623efb82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d866f024fd0960e8a3629d18d6168709623efb82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d866f024fd0960e8a3629d18d6168709623efb82/comments", "author": null, "committer": null, "parents": [{"sha": "f6b4dc28f9743779b846ca04a4f97d293c8fd6fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b4dc28f9743779b846ca04a4f97d293c8fd6fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b4dc28f9743779b846ca04a4f97d293c8fd6fa"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "9ba71fe25d4def5950c77e732ea15e95b20a5910", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d866f024fd0960e8a3629d18d6168709623efb82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d866f024fd0960e8a3629d18d6168709623efb82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d866f024fd0960e8a3629d18d6168709623efb82", "patch": "@@ -1,3 +1,14 @@\n+2015-09-15  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_ld4r<mode>):\n+\tChange operand mode from <V_FOUR_ELEM> to BLK.\n+\t(aarch64_vec_load_lanesxi_lane<mode>): Likewise.\n+\t(aarch64_vec_store_lanesxi_lane<mode): Likewise.\n+\t(aarch64_ld4r<mode>): Generate MEM rtx with BLKmode, call set_mem_size.\n+\t(aarch64_ld4_lane<mode>): Likewise.\n+\t(aarch64_st4_lane<mode>): Likewise.\n+\t* config/aarch64/iterators.md (V_FOUR_ELEM): Remove.\n+\n 2015-09-15  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/67563"}, {"sha": "11b5ded232a0610c95d8c0718673bb6588c40b96", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d866f024fd0960e8a3629d18d6168709623efb82/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d866f024fd0960e8a3629d18d6168709623efb82/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d866f024fd0960e8a3629d18d6168709623efb82", "patch": "@@ -4124,7 +4124,7 @@\n \n (define_insn \"aarch64_simd_ld4r<mode>\"\n   [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n-       (unspec:XI [(match_operand:<V_FOUR_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+       (unspec:XI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n                    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY) ]\n                   UNSPEC_LD4_DUP))]\n   \"TARGET_SIMD\"\n@@ -4134,7 +4134,7 @@\n \n (define_insn \"aarch64_vec_load_lanesxi_lane<mode>\"\n   [(set (match_operand:XI 0 \"register_operand\" \"=w\")\n-\t(unspec:XI [(match_operand:<V_FOUR_ELEM> 1 \"aarch64_simd_struct_operand\" \"Utv\")\n+\t(unspec:XI [(match_operand:BLK 1 \"aarch64_simd_struct_operand\" \"Utv\")\n \t\t    (match_operand:XI 2 \"register_operand\" \"0\")\n \t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n \t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n@@ -4178,11 +4178,11 @@\n \n ;; RTL uses GCC vector extension indices, so flip only for assembly.\n (define_insn \"aarch64_vec_store_lanesxi_lane<mode>\"\n-  [(set (match_operand:<V_FOUR_ELEM> 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n-\t(unspec:<V_FOUR_ELEM> [(match_operand:XI 1 \"register_operand\" \"w\")\n-\t\t    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n-\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-\t\t   UNSPEC_ST4_LANE))]\n+  [(set (match_operand:BLK 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:BLK [(match_operand:XI 1 \"register_operand\" \"w\")\n+\t\t     (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)\n+\t\t     (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+\t\t    UNSPEC_ST4_LANE))]\n   \"TARGET_SIMD\"\n   {\n     operands[2] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[2])));\n@@ -4413,8 +4413,8 @@\n    (unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <V_FOUR_ELEM>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 4);\n \n   emit_insn (gen_aarch64_simd_ld4r<mode> (operands[0],mem));\n   DONE;\n@@ -4643,8 +4643,8 @@\n \t(unspec:VALLDIF [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <V_FOUR_ELEM>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[1]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[1]);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 4);\n \n   emit_insn (gen_aarch64_vec_load_lanesxi_lane<mode> (operands[0],\n \t\t\t\t\t\t      mem,\n@@ -4921,8 +4921,8 @@\n   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n-  machine_mode mode = <V_FOUR_ELEM>mode;\n-  rtx mem = gen_rtx_MEM (mode, operands[0]);\n+  rtx mem = gen_rtx_MEM (BLKmode, operands[0]);\n+  set_mem_size (mem, GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) * 4);\n \n   emit_insn (gen_aarch64_vec_store_lanesxi_lane<mode> (mem,\n \t\t\t\t\t\t       operands[1],"}, {"sha": "c91b354bdecf6c390ef5551f385d64b235fce5da", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d866f024fd0960e8a3629d18d6168709623efb82/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d866f024fd0960e8a3629d18d6168709623efb82/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=d866f024fd0960e8a3629d18d6168709623efb82", "patch": "@@ -604,16 +604,6 @@\n                               (V4HF \"SF\") (V8HF \"SF\")\n                               (DF \"V2DI\")   (V2DF \"V2DI\")])\n \n-;; Similar, for four elements.\n-(define_mode_attr V_FOUR_ELEM [(V8QI \"SI\")   (V16QI \"SI\")\n-                               (V4HI \"V4HI\") (V8HI \"V4HI\")\n-                               (V2SI \"V4SI\") (V4SI \"V4SI\")\n-                               (DI \"OI\")     (V2DI \"OI\")\n-                               (V2SF \"V4SF\") (V4SF \"V4SF\")\n-                               (V4HF \"V4HF\") (V8HF \"V4HF\")\n-                               (DF \"OI\")     (V2DF \"OI\")])\n-\n-\n ;; Mode for atomic operation suffixes\n (define_mode_attr atomic_sfx\n   [(QI \"b\") (HI \"h\") (SI \"\") (DI \"\")])"}]}