{"sha": "2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYzM2ZmMGE5ZDIxOTJjZjY5YWFjOGMwNTdkNzRmZDUyMTdlMTYxOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-27T20:40:05Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-27T20:40:05Z"}, "message": "Use rtx_expr_list in various places\n\ngcc/\n2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (free_EXPR_LIST_list): Strengthen param from rtx * to\n\trtx_expr_list **.\n\t(alloc_EXPR_LIST): Strengthen return type from rtx to\n\trtx_expr_list *.\n\t(remove_free_EXPR_LIST_node): Likewise for param.\n\t* reload.h (struct reg_equivs_t): Strengthen field \"alt_mem_list\"\n\tfrom rtx to rtx_expr_list *.\n\t* sched-int.h (struct deps_desc): Strengthen fields\n\t\"pending_read_mems\" and \"pending_write_mems\" from rtx to\n\trtx_expr_list *.\n\n\t* dwarf2out.c (decl_piece_varloc_ptr): Strengthen return type from\n\trtx to rtx_expr_list *.\n\t* lists.c (alloc_INSN_LIST): Likewise, also for local \"r\".\n\t(free_EXPR_LIST_list): Strengthen param \"listp\" from rtx * to\n\trtx_expr_list **.\n\t(remove_free_EXPR_LIST_node): Likewise.  Strengthen local \"node\"\n\tfrom rtx to rtx_expr_list *.\n\t* loop-iv.c (simplify_using_initial_values): Strengthen local\n\t\"cond_list\" from rtx to rtx_expr_list *, and locals \"pnode\",\n\t\"pnote_next\" from rtx * to rtx_expr_list **.\n\t* sched-deps.c (remove_from_both_dependence_lists):  Strengthen\n\tparam \"exprp\" from rtx * to rtx_expr_list **.\n\t(add_insn_mem_dependence): Strengthen local \"mem_list\" from\n\trtx * to rtx_expr_list **.  Strengthen local \"mem_node\" from rtx\n\tto rtx_expr_list *.\n\t* sched-rgn.c (concat_insn_mem_list): Strengthen param \"copy_mems\"\n\tand local \"new_mems\" from rtx to rtx_expr_list *.  Strengthen\n\tparam \"old_mems_p\" from rtx * to rtx_expr_list **.\n\t* var-tracking.c (struct adjust_mem_data): Strengthen field\n\t\"side_effects\" from rtx to rtx_expr_list *.\n\t(adjust_insn): Replace NULL_RTX with NULL when assigning to\n\trtx_expr_list *.\n\t(prepare_call_arguments): Likewise.\n\nFrom-SVN: r214605", "tree": {"sha": "8edc6c42e4f961da3fe3275dcc079fe22dacc1f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8edc6c42e4f961da3fe3275dcc079fe22dacc1f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f4783c7f7c01596686da28e6fe86e0b69a43f3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4783c7f7c01596686da28e6fe86e0b69a43f3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f4783c7f7c01596686da28e6fe86e0b69a43f3e"}], "stats": {"total": 109, "additions": 74, "deletions": 35}, "files": [{"sha": "11fba83a063861c45d47ebf458686b0a8bf25e32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "patch": "@@ -1,3 +1,40 @@\n+2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (free_EXPR_LIST_list): Strengthen param from rtx * to\n+\trtx_expr_list **.\n+\t(alloc_EXPR_LIST): Strengthen return type from rtx to\n+\trtx_expr_list *.\n+\t(remove_free_EXPR_LIST_node): Likewise for param.\n+\t* reload.h (struct reg_equivs_t): Strengthen field \"alt_mem_list\"\n+\tfrom rtx to rtx_expr_list *.\n+\t* sched-int.h (struct deps_desc): Strengthen fields\n+\t\"pending_read_mems\" and \"pending_write_mems\" from rtx to\n+\trtx_expr_list *.\n+\n+\t* dwarf2out.c (decl_piece_varloc_ptr): Strengthen return type from\n+\trtx to rtx_expr_list *.\n+\t* lists.c (alloc_INSN_LIST): Likewise, also for local \"r\".\n+\t(free_EXPR_LIST_list): Strengthen param \"listp\" from rtx * to\n+\trtx_expr_list **.\n+\t(remove_free_EXPR_LIST_node): Likewise.  Strengthen local \"node\"\n+\tfrom rtx to rtx_expr_list *.\n+\t* loop-iv.c (simplify_using_initial_values): Strengthen local\n+\t\"cond_list\" from rtx to rtx_expr_list *, and locals \"pnode\",\n+\t\"pnote_next\" from rtx * to rtx_expr_list **.\n+\t* sched-deps.c (remove_from_both_dependence_lists):  Strengthen\n+\tparam \"exprp\" from rtx * to rtx_expr_list **.\n+\t(add_insn_mem_dependence): Strengthen local \"mem_list\" from\n+\trtx * to rtx_expr_list **.  Strengthen local \"mem_node\" from rtx\n+\tto rtx_expr_list *.\n+\t* sched-rgn.c (concat_insn_mem_list): Strengthen param \"copy_mems\"\n+\tand local \"new_mems\" from rtx to rtx_expr_list *.  Strengthen\n+\tparam \"old_mems_p\" from rtx * to rtx_expr_list **.\n+\t* var-tracking.c (struct adjust_mem_data): Strengthen field\n+\t\"side_effects\" from rtx to rtx_expr_list *.\n+\t(adjust_insn): Replace NULL_RTX with NULL when assigning to\n+\trtx_expr_list *.\n+\t(prepare_call_arguments): Likewise.\n+\n 2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* function.h (struct rtl_data): Strengthen field"}, {"sha": "8698e45d2b11fdfc3594d296a8de2ef1b917a952", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "patch": "@@ -5024,7 +5024,7 @@ decl_piece_varloc_ptr (rtx piece)\n /* Create an EXPR_LIST for location note LOC_NOTE covering BITSIZE bits.\n    Next is the chain of following piece nodes.  */\n \n-static rtx\n+static rtx_expr_list *\n decl_piece_node (rtx loc_note, HOST_WIDE_INT bitsize, rtx next)\n {\n   if (bitsize <= (int) MAX_MACHINE_MODE)"}, {"sha": "78556be43b5f0ea0210d358a1d45531d3260cb42", "filename": "gcc/lists.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Flists.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Flists.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flists.c?ref=2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "patch": "@@ -125,14 +125,14 @@ alloc_INSN_LIST (rtx val, rtx next)\n /* This call is used in place of a gen_rtx_EXPR_LIST. If there is a cached\n    node available, we'll use it, otherwise a call to gen_rtx_EXPR_LIST\n    is made.  */\n-rtx\n+rtx_expr_list *\n alloc_EXPR_LIST (int kind, rtx val, rtx next)\n {\n-  rtx r;\n+  rtx_expr_list *r;\n \n   if (unused_expr_list)\n     {\n-      r = unused_expr_list;\n+      r = as_a <rtx_expr_list *> (unused_expr_list);\n       unused_expr_list = XEXP (r, 1);\n       XEXP (r, 0) = val;\n       XEXP (r, 1) = next;\n@@ -146,11 +146,11 @@ alloc_EXPR_LIST (int kind, rtx val, rtx next)\n \n /* This function will free up an entire list of EXPR_LIST nodes.  */\n void\n-free_EXPR_LIST_list (rtx *listp)\n+free_EXPR_LIST_list (rtx_expr_list **listp)\n {\n   if (*listp == 0)\n     return;\n-  free_list (listp, &unused_expr_list);\n+  free_list ((rtx *)listp, &unused_expr_list);\n }\n \n /* This function will free up an entire list of INSN_LIST nodes.  */\n@@ -233,12 +233,12 @@ remove_free_INSN_LIST_node (rtx_insn_list **listp)\n \n /* Remove and free the first node in the EXPR_LIST pointed to by LISTP.  */\n rtx\n-remove_free_EXPR_LIST_node (rtx *listp)\n+remove_free_EXPR_LIST_node (rtx_expr_list **listp)\n {\n-  rtx node = *listp;\n+  rtx_expr_list *node = *listp;\n   rtx elem = XEXP (node, 0);\n \n-  remove_list_node (listp);\n+  remove_list_node ((rtx *)listp);\n   free_EXPR_LIST_node (node);\n \n   return elem;"}, {"sha": "eb3fd47d0d427c774bbfe7962cf6b2ecb5c6f3dd", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "patch": "@@ -1873,7 +1873,8 @@ static void\n simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n {\n   bool expression_valid;\n-  rtx head, tail, cond_list, last_valid_expr;\n+  rtx head, tail, last_valid_expr;\n+  rtx_expr_list *cond_list;\n   rtx_insn *insn;\n   rtx neutral, aggr;\n   regset altered, this_altered;\n@@ -1951,7 +1952,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \n   expression_valid = true;\n   last_valid_expr = *expr;\n-  cond_list = NULL_RTX;\n+  cond_list = NULL;\n   while (1)\n     {\n       insn = BB_END (e->src);\n@@ -2003,7 +2004,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \n \t  if (suitable_set_for_replacement (insn, &dest, &src))\n \t    {\n-\t      rtx *pnote, *pnote_next;\n+\t      rtx_expr_list **pnote, **pnote_next;\n \n \t      replace_in_expr (expr, dest, src);\n \t      if (CONSTANT_P (*expr))\n@@ -2014,7 +2015,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \t\t  rtx note = *pnote;\n \t\t  rtx old_cond = XEXP (note, 0);\n \n-\t\t  pnote_next = &XEXP (note, 1);\n+\t\t  pnote_next = (rtx_expr_list **)&XEXP (note, 1);\n \t\t  replace_in_expr (&XEXP (note, 0), dest, src);\n \n \t\t  /* We can no longer use a condition that has been simplified\n@@ -2034,7 +2035,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \t    }\n \t  else\n \t    {\n-\t      rtx *pnote, *pnote_next;\n+\t      rtx_expr_list **pnote, **pnote_next;\n \n \t      /* If we did not use this insn to make a replacement, any overlap\n \t\t between stores in this insn and our expression will cause the\n@@ -2048,7 +2049,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \t\t  rtx note = *pnote;\n \t\t  rtx old_cond = XEXP (note, 0);\n \n-\t\t  pnote_next = &XEXP (note, 1);\n+\t\t  pnote_next = (rtx_expr_list **)&XEXP (note, 1);\n \t\t  if (for_each_rtx (&old_cond, altered_reg_used, this_altered))\n \t\t    {\n \t\t      *pnote = *pnote_next;"}, {"sha": "80ceae2b3d83dbe0613df05e656c48962a201013", "filename": "gcc/reload.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "patch": "@@ -233,7 +233,7 @@ struct reg_equivs_t\n \n   /* An EXPR_LIST of REG_EQUIVs containing MEMs with\n      alternate representations of the location of pseudo reg N.  */\n-  rtx alt_mem_list;\n+  rtx_expr_list *alt_mem_list;\n \n   /* The list of insns that initialized reg N from its equivalent\n      constant or memory slot.  */"}, {"sha": "4dcbe8625d09b09fb5f1abb700660e48fca5b6b3", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "patch": "@@ -2862,18 +2862,18 @@ extern void subreg_get_info (unsigned int, enum machine_mode,\n \n /* lists.c */\n \n-extern void free_EXPR_LIST_list (rtx *);\n+extern void free_EXPR_LIST_list (rtx_expr_list **);\n extern void free_INSN_LIST_list (rtx_insn_list **);\n extern void free_EXPR_LIST_node (rtx);\n extern void free_INSN_LIST_node (rtx);\n extern rtx_insn_list *alloc_INSN_LIST (rtx, rtx);\n extern rtx_insn_list *copy_INSN_LIST (rtx_insn_list *);\n extern rtx_insn_list *concat_INSN_LIST (rtx_insn_list *, rtx_insn_list *);\n-extern rtx alloc_EXPR_LIST (int, rtx, rtx);\n+extern rtx_expr_list *alloc_EXPR_LIST (int, rtx, rtx);\n extern void remove_free_INSN_LIST_elem (rtx_insn *, rtx_insn_list **);\n extern rtx remove_list_elem (rtx, rtx *);\n extern rtx_insn *remove_free_INSN_LIST_node (rtx_insn_list **);\n-extern rtx remove_free_EXPR_LIST_node (rtx *);\n+extern rtx remove_free_EXPR_LIST_node (rtx_expr_list **);\n \n \n /* reginfo.c */"}, {"sha": "cbc1814bcec3f39bbee44f0894e7f29b3e26d038", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "patch": "@@ -1622,7 +1622,7 @@ remove_from_dependence_list (rtx insn, rtx_insn_list **listp)\n static int\n remove_from_both_dependence_lists (rtx insn,\n \t\t\t\t   rtx_insn_list **listp,\n-\t\t\t\t   rtx *exprp)\n+\t\t\t\t   rtx_expr_list **exprp)\n {\n   int removed = 0;\n \n@@ -1637,7 +1637,7 @@ remove_from_both_dependence_lists (rtx insn,\n         }\n \n       listp = (rtx_insn_list **)&XEXP (*listp, 1);\n-      exprp = &XEXP (*exprp, 1);\n+      exprp = (rtx_expr_list **)&XEXP (*exprp, 1);\n     }\n \n   return removed;\n@@ -1719,8 +1719,8 @@ add_insn_mem_dependence (struct deps_desc *deps, bool read_p,\n {\n   rtx_insn_list **insn_list;\n   rtx_insn_list *insn_node;\n-  rtx *mem_list;\n-  rtx mem_node;\n+  rtx_expr_list **mem_list;\n+  rtx_expr_list *mem_node;\n \n   gcc_assert (!deps->readonly);\n   if (read_p)"}, {"sha": "a19d776a9510c2e459296342c30b0c9487c35d66", "filename": "gcc/sched-int.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "patch": "@@ -474,13 +474,13 @@ struct deps_desc\n   rtx_insn_list *pending_read_insns;\n \n   /* An EXPR_LIST containing all MEM rtx's which are pending reads.  */\n-  rtx pending_read_mems;\n+  rtx_expr_list *pending_read_mems;\n \n   /* An INSN_LIST containing all insns with pending write operations.  */\n   rtx_insn_list *pending_write_insns;\n \n   /* An EXPR_LIST containing all MEM rtx's which are pending writes.  */\n-  rtx pending_write_mems;\n+  rtx_expr_list *pending_write_mems;\n \n   /* An INSN_LIST containing all jump insns.  */\n   rtx_insn_list *pending_jump_insns;"}, {"sha": "93bebc9e014642f8f902ab289c20766bd2c89058", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "patch": "@@ -240,8 +240,8 @@ static void add_branch_dependences (rtx_insn *, rtx_insn *);\n static void compute_block_dependences (int);\n \n static void schedule_region (int);\n-static void concat_insn_mem_list (rtx_insn_list *, rtx,\n-\t\t\t\t  rtx_insn_list **, rtx *);\n+static void concat_insn_mem_list (rtx_insn_list *, rtx_expr_list *,\n+\t\t\t\t  rtx_insn_list **, rtx_expr_list **);\n static void propagate_deps (int, struct deps_desc *);\n static void free_pending_lists (void);\n \n@@ -2585,19 +2585,20 @@ add_branch_dependences (rtx_insn *head, rtx_insn *tail)\n static struct deps_desc *bb_deps;\n \n static void\n-concat_insn_mem_list (rtx_insn_list *copy_insns, rtx copy_mems,\n+concat_insn_mem_list (rtx_insn_list *copy_insns,\n+\t\t      rtx_expr_list *copy_mems,\n \t\t      rtx_insn_list **old_insns_p,\n-\t\t      rtx *old_mems_p)\n+\t\t      rtx_expr_list **old_mems_p)\n {\n   rtx_insn_list *new_insns = *old_insns_p;\n-  rtx new_mems = *old_mems_p;\n+  rtx_expr_list *new_mems = *old_mems_p;\n \n   while (copy_insns)\n     {\n       new_insns = alloc_INSN_LIST (copy_insns->insn (), new_insns);\n-      new_mems = alloc_EXPR_LIST (VOIDmode, XEXP (copy_mems, 0), new_mems);\n+      new_mems = alloc_EXPR_LIST (VOIDmode, copy_mems->element (), new_mems);\n       copy_insns = copy_insns->next ();\n-      copy_mems = XEXP (copy_mems, 1);\n+      copy_mems = copy_mems->next ();\n     }\n \n   *old_insns_p = new_insns;"}, {"sha": "931a7f06fec4c23860e60e6a52b0debb438c9d7c", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f33ff0a9d2192cf69aac8c057d74fd5217e1619/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=2f33ff0a9d2192cf69aac8c057d74fd5217e1619", "patch": "@@ -948,7 +948,7 @@ struct adjust_mem_data\n   bool store;\n   enum machine_mode mem_mode;\n   HOST_WIDE_INT stack_adjust;\n-  rtx side_effects;\n+  rtx_expr_list *side_effects;\n };\n \n /* Helper for adjust_mems.  Return 1 if *loc is unsuitable for\n@@ -1231,7 +1231,7 @@ adjust_insn (basic_block bb, rtx_insn *insn)\n \n   amd.mem_mode = VOIDmode;\n   amd.stack_adjust = -VTI (bb)->out.stack_adjust;\n-  amd.side_effects = NULL_RTX;\n+  amd.side_effects = NULL;\n \n   amd.store = true;\n   note_stores (PATTERN (insn), adjust_mem_stores, &amd);\n@@ -6277,7 +6277,7 @@ prepare_call_arguments (basic_block bb, rtx_insn *insn)\n \t\tstruct adjust_mem_data amd;\n \t\tamd.mem_mode = VOIDmode;\n \t\tamd.stack_adjust = -VTI (bb)->out.stack_adjust;\n-\t\tamd.side_effects = NULL_RTX;\n+\t\tamd.side_effects = NULL;\n \t\tamd.store = true;\n \t\tmem = simplify_replace_fn_rtx (mem, NULL_RTX, adjust_mems,\n \t\t\t\t\t       &amd);"}]}