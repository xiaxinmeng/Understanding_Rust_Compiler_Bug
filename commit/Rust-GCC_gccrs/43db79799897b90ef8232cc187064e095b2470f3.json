{"sha": "43db79799897b90ef8232cc187064e095b2470f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNkYjc5Nzk5ODk3YjkwZWY4MjMyY2MxODcwNjRlMDk1YjI0NzBmMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-01-06T18:59:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-01-06T18:59:38Z"}, "message": "i386.c (ix86_emit_swsqrtsf): Use negative constants in order to use commutative addition instead of subtraction.\n\n        * config/i386/i386.c (ix86_emit_swsqrtsf): Use negative constants in\n        order to use commutative addition instead of subtraction.\n\nFrom-SVN: r131358", "tree": {"sha": "7ce5aec8f372f1f422aa37c4eaa3e28ad555c8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ce5aec8f372f1f422aa37c4eaa3e28ad555c8d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43db79799897b90ef8232cc187064e095b2470f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43db79799897b90ef8232cc187064e095b2470f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43db79799897b90ef8232cc187064e095b2470f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43db79799897b90ef8232cc187064e095b2470f3/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e39bd313939533cfed523c778e81fe0f9e8d2a21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39bd313939533cfed523c778e81fe0f9e8d2a21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39bd313939533cfed523c778e81fe0f9e8d2a21"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "4561dba458afb46348d3bde92daf3e6cfc260bbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43db79799897b90ef8232cc187064e095b2470f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43db79799897b90ef8232cc187064e095b2470f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43db79799897b90ef8232cc187064e095b2470f3", "patch": "@@ -1,3 +1,8 @@\n+2008-01-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_emit_swsqrtsf): Use negative constants in\n+\torder to use commutative addition instead of subtraction.\n+\n 2008-01-06  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \t    Mircea Namolaru  <namolaru@il.ibm.com>\n \t    Vladimir Yanovsky  <yanov@il.ibm.com>"}, {"sha": "26acbc9d46f1cefeaddf56c09125552ce9951f59", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43db79799897b90ef8232cc187064e095b2470f3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43db79799897b90ef8232cc187064e095b2470f3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=43db79799897b90ef8232cc187064e095b2470f3", "patch": "@@ -24187,7 +24187,7 @@ void ix86_emit_swdivsf (rtx res, rtx a, rtx b, enum machine_mode mode)\n \n   /* a / b = a * rcp(b) * (2.0 - b * rcp(b)) */\n \n-  /* x0 = 1./b estimate */\n+  /* x0 = rcp(b) estimate */\n   emit_insn (gen_rtx_SET (VOIDmode, x0,\n \t\t\t  gen_rtx_UNSPEC (mode, gen_rtvec (1, b),\n \t\t\t\t\t  UNSPEC_RCP)));\n@@ -24211,63 +24211,72 @@ void ix86_emit_swdivsf (rtx res, rtx a, rtx b, enum machine_mode mode)\n void ix86_emit_swsqrtsf (rtx res, rtx a, enum machine_mode mode,\n \t\t\t bool recip)\n {\n-  rtx x0, e0, e1, e2, e3, three, half, zero, mask;\n+  rtx x0, e0, e1, e2, e3, mthree, mhalf;\n+  REAL_VALUE_TYPE r;\n \n   x0 = gen_reg_rtx (mode);\n   e0 = gen_reg_rtx (mode);\n   e1 = gen_reg_rtx (mode);\n   e2 = gen_reg_rtx (mode);\n   e3 = gen_reg_rtx (mode);\n \n-  three = CONST_DOUBLE_FROM_REAL_VALUE (dconst3, SFmode);\n-  half = CONST_DOUBLE_FROM_REAL_VALUE (dconsthalf, SFmode);\n+  real_arithmetic (&r, NEGATE_EXPR, &dconst3, NULL);\n+  mthree = CONST_DOUBLE_FROM_REAL_VALUE (r, SFmode);\n \n-  mask = gen_reg_rtx (mode);\n+  real_arithmetic (&r, NEGATE_EXPR, &dconsthalf, NULL);\n+  mhalf = CONST_DOUBLE_FROM_REAL_VALUE (r, SFmode);\n \n   if (VECTOR_MODE_P (mode))\n     {\n-      three = ix86_build_const_vector (SFmode, true, three);\n-      half = ix86_build_const_vector (SFmode, true, half);\n+      mthree = ix86_build_const_vector (SFmode, true, mthree);\n+      mhalf = ix86_build_const_vector (SFmode, true, mhalf);\n     }\n \n-  three = force_reg (mode, three);\n-  half = force_reg (mode, half);\n-\n-  zero = force_reg (mode, CONST0_RTX(mode));\n-\n-  /* sqrt(a) = 0.5 * a * rsqrtss(a) * (3.0 - a * rsqrtss(a) * rsqrtss(a))\n-     1.0 / sqrt(a) = 0.5 * rsqrtss(a) * (3.0 - a * rsqrtss(a) * rsqrtss(a)) */\n-\n-  /* Compare a to zero.  */\n-  if (!recip)\n-    emit_insn (gen_rtx_SET (VOIDmode, mask,\n-\t\t\t    gen_rtx_NE (mode, zero, a)));\n+  /* sqrt(a)  = -0.5 * a * rsqrtss(a) * (a * rsqrtss(a) * rsqrtss(a) - 3.0)\n+     rsqrt(a) = -0.5     * rsqrtss(a) * (a * rsqrtss(a) * rsqrtss(a) - 3.0) */\n \n-  /* x0 = 1./sqrt(a) estimate */\n+  /* x0 = rsqrt(a) estimate */\n   emit_insn (gen_rtx_SET (VOIDmode, x0,\n \t\t\t  gen_rtx_UNSPEC (mode, gen_rtvec (1, a),\n \t\t\t\t\t  UNSPEC_RSQRT)));\n-  /* Filter out infinity.  */\n+\n+  /* If (a == 0.0) Filter out infinity to prevent NaN for sqrt(0.0).  */\n   if (!recip)\n-    emit_insn (gen_rtx_SET (VOIDmode, x0,\n-\t\t\t    gen_rtx_AND (mode, x0, mask)));\n+    {\n+      rtx zero, mask;\n+\n+      zero = gen_reg_rtx (mode);\n+      mask = gen_reg_rtx (mode);\n+\n+      zero = force_reg (mode, CONST0_RTX(mode));\n+      emit_insn (gen_rtx_SET (VOIDmode, mask,\n+\t\t\t      gen_rtx_NE (mode, zero, a)));\n+\n+      emit_insn (gen_rtx_SET (VOIDmode, x0,\n+\t\t\t      gen_rtx_AND (mode, x0, mask)));\n+    }\n+\n   /* e0 = x0 * a */\n   emit_insn (gen_rtx_SET (VOIDmode, e0,\n \t\t\t  gen_rtx_MULT (mode, x0, a)));\n   /* e1 = e0 * x0 */\n   emit_insn (gen_rtx_SET (VOIDmode, e1,\n \t\t\t  gen_rtx_MULT (mode, e0, x0)));\n-  /* e2 = 3. - e1 */\n+\n+  /* e2 = e1 - 3. */\n+  mthree = force_reg (mode, mthree);\n   emit_insn (gen_rtx_SET (VOIDmode, e2,\n-\t\t\t  gen_rtx_MINUS (mode, three, e1)));\n+\t\t\t  gen_rtx_PLUS (mode, e1, mthree)));\n+\n+  mhalf = force_reg (mode, mhalf);\n   if (recip)\n-    /* e3 = .5 * x0 */\n+    /* e3 = -.5 * x0 */\n     emit_insn (gen_rtx_SET (VOIDmode, e3,\n-\t\t\t    gen_rtx_MULT (mode, half, x0)));\n+\t\t\t    gen_rtx_MULT (mode, x0, mhalf)));\n   else\n-    /* e3 = .5 * e0 */\n+    /* e3 = -.5 * e0 */\n     emit_insn (gen_rtx_SET (VOIDmode, e3,\n-\t\t\t    gen_rtx_MULT (mode, half, e0)));\n+\t\t\t    gen_rtx_MULT (mode, e0, mhalf)));\n   /* ret = e2 * e3 */\n   emit_insn (gen_rtx_SET (VOIDmode, res,\n \t\t\t  gen_rtx_MULT (mode, e2, e3)));"}]}