{"sha": "460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYwYmRjMGFkOGUwYTFiYmI1ZDU2ZDVlYTExNTk1ZTIxOTVmYzMxYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2017-01-05T01:46:41Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2017-01-05T01:46:41Z"}, "message": "[bootstrap-O3] use unsigned type for regno in df-scan\n\nThis patch fixes a false-positive warning in df-scan, at bootstrap-O3\nfailed, and enables GCC to optimize out the code that leads to the\nwarning.\n\ndf_ref_create_structure was inlined into the else part of\ndf_ref_record.  Due to the condition of the corresponding if, In the\nelse part, VRP deduced unsigned regno >= FIRST_PSEUDO_REGISTER.\n\nIn df_ref_create_structure, there's another regno variable,\ninitialized with the same expression and value as the caller's.  GCC\ncan tell as much, but this regno variable is signed.  It is used,\nshifted right, to index a hard regset bit array within a path that\ntests that this signed regno < FIRST_PSEUDO_REGISTER.\n\nGCC warned about the possible out-of-range indexing into the hard\nregset array.  It shouldn't, after all, the same regno can't possibly\nbe both < FIRST_PSEUDO_REGISTER and >= FIRST_PSEUDO_REGISTER, can it?\n\nWell, the optimizers correctly decide it could, if it was a negative\nint that, when converted to unsigned, became larger than\nFIRST_PSEUDO_REGISTER.  But GCC doesn't know regno can't be negative,\nso the test could not be optimize out.  What's more, given the\nconstraints, VRP correctly concluded the hard regset array would\nalways be indexed by a value way outside the array index range.\n\nThis patch changes the inlined regno to unsigned, like the caller's,\nso that we can now tell the conditions can't both hold, so we optimize\nout the path containing the would-be out-of-range array indexing.\n\nfor  gcc/ChangeLog\n\n\t* df-scan.c (df_ref_create_structure): Make regno unsigned,\n\tto match the caller.\n\nFrom-SVN: r244090", "tree": {"sha": "d3f99d70c589fc7973b3d9f72ee1204b6b810884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3f99d70c589fc7973b3d9f72ee1204b6b810884"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a/comments", "author": null, "committer": null, "parents": [{"sha": "4dbebf6fc367d4730d252bb6b1c669d533c13b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dbebf6fc367d4730d252bb6b1c669d533c13b92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dbebf6fc367d4730d252bb6b1c669d533c13b92"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "88fb3b4b2b53bb2aa1ab74f7bcd8c4a3a39d1831", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a", "patch": "@@ -1,3 +1,8 @@\n+2017-01-04  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* df-scan.c (df_ref_create_structure): Make regno unsigned,\n+\tto match the caller.\n+\n 2017-01-04  Alexandre Oliva <aoliva@redhat.com>\n \n \t* cfgexpand.c (expand_gimple_basic_block): Disregard debug"}, {"sha": "f75098c2bec94ba472e467c7da0f04c4e1af77d1", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=460bdc0ad8e0a1bbb5d56d5ea11595e2195fc31a", "patch": "@@ -2483,7 +2483,7 @@ df_ref_create_structure (enum df_ref_class cl,\n \t\t\t int ref_flags)\n {\n   df_ref this_ref = NULL;\n-  int regno = REGNO (GET_CODE (reg) == SUBREG ? SUBREG_REG (reg) : reg);\n+  unsigned int regno = REGNO (GET_CODE (reg) == SUBREG ? SUBREG_REG (reg) : reg);\n   struct df_scan_problem_data *problem_data\n     = (struct df_scan_problem_data *) df_scan->problem_data;\n "}]}