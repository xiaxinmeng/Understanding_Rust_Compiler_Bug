{"sha": "f4e5e9bcfc6798f2b29bb4036fb203ee4229953d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRlNWU5YmNmYzY3OThmMmIyOWJiNDAzNmZiMjAzZWU0MjI5OTUzZA==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-07-17T15:52:32Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-07-17T15:52:32Z"}, "message": "update derived files\n\nFrom-SVN: r28144", "tree": {"sha": "8a0cbaccf784e03d1f88ad2ebded18f5538333fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a0cbaccf784e03d1f88ad2ebded18f5538333fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4e5e9bcfc6798f2b29bb4036fb203ee4229953d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e5e9bcfc6798f2b29bb4036fb203ee4229953d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e5e9bcfc6798f2b29bb4036fb203ee4229953d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e5e9bcfc6798f2b29bb4036fb203ee4229953d/comments", "author": null, "committer": null, "parents": [{"sha": "37cd75c610660aabc3ec4d2eb01f19d739a82f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37cd75c610660aabc3ec4d2eb01f19d739a82f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37cd75c610660aabc3ec4d2eb01f19d739a82f7f"}], "stats": {"total": 1255, "additions": 23, "deletions": 1232}, "files": [{"sha": "60677f45df3a8b0c44094f0b02fe533acbbaaaba", "filename": "gcc/f/BUGS", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e5e9bcfc6798f2b29bb4036fb203ee4229953d/gcc%2Ff%2FBUGS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e5e9bcfc6798f2b29bb4036fb203ee4229953d/gcc%2Ff%2FBUGS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FBUGS?ref=f4e5e9bcfc6798f2b29bb4036fb203ee4229953d", "patch": "@@ -2,7 +2,7 @@\n `bugs0.texi' and `bugs.texi'.  `BUGS' is *not* a source file, although\n it is normally included within source distributions.\n \n-   This file lists known bugs in the FSF-0.5.25 version of the GNU\n+   This file lists known bugs in the GCC-2.95 version of the GNU\n Fortran compiler.  Copyright (C) 1995-1999 Free Software Foundation,\n Inc.  You may copy, distribute, and modify it freely as long as you\n preserve this copyright notice and permission notice.\n@@ -11,9 +11,9 @@ Known Bugs In GNU Fortran\n *************************\n \n    This section identifies bugs that `g77' *users* might run into in\n-the FSF-0.5.25 version of `g77'.  This includes bugs that are actually\n-in the `gcc' back end (GBE) or in `libf2c', because those sets of code\n-are at least somewhat under the control of (and necessarily intertwined\n+the GCC-2.95 version of `g77'.  This includes bugs that are actually in\n+the `gcc' back end (GBE) or in `libf2c', because those sets of code are\n+at least somewhat under the control of (and necessarily intertwined\n with) `g77', so it isn't worth separating them out.\n \n    For information on bugs in *other* versions of `g77', see\n@@ -27,7 +27,7 @@ particularly concentrated on any version of this information that is\n distributed as part of a *released* `g77'.\n \n    In particular, while this information is intended to apply to the\n-FSF-0.5.25 version of `g77', only an official *release* of that version\n+GCC-2.95 version of `g77', only an official *release* of that version\n is expected to contain documentation that is most consistent with the\n `g77' product in that version.\n \n@@ -40,7 +40,7 @@ via `http://egcs.cygnus.com/onlinedocs/g77_bugs.html'.  Follow the\n port, build, and install `g77', see \"Problems Installing\" in\n `egcs/gcc/f/INSTALL'.\n \n-   The following information was last updated on 1999-05-06:\n+   The following information was last updated on 1999-06-28:\n \n    * `g77' fails to warn about use of a \"live\" iterative-DO variable as\n      an implied-DO variable in a `WRITE' or `PRINT' statement (although"}, {"sha": "91858800958dd0369b96773326bac1a6d2158104", "filename": "gcc/f/INSTALL", "status": "modified", "additions": 15, "deletions": 1224, "changes": 1239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e5e9bcfc6798f2b29bb4036fb203ee4229953d/gcc%2Ff%2FINSTALL", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e5e9bcfc6798f2b29bb4036fb203ee4229953d/gcc%2Ff%2FINSTALL", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FINSTALL?ref=f4e5e9bcfc6798f2b29bb4036fb203ee4229953d", "patch": "@@ -13,15 +13,10 @@ Installing GNU Fortran\n \n    The following information describes how to install `g77'.\n \n-   The information in this file generally pertains to dealing with\n-*source* distributions of `g77' and `gcc'.  It is possible that some of\n-this information will be applicable to some *binary* distributions of\n-these products--however, since these distributions are not made by the\n-maintainers of `g77', responsibility for binary distributions rests with\n-whoever built and first distributed them.\n-\n-   Nevertheless, efforts to make `g77' easier to both build and install\n-from source and package up as a binary distribution are ongoing.\n+   Note that, for users of the GCC-2.95 version of `g77', much of the\n+information is obsolete, and is superceded by the GCC installation\n+procedures.  Such information is accordingly omitted and flagged as\n+such.\n \n    *Warning:* The information below is still under development, and\n might not accurately reflect the `g77' code base of which it is a part.\n@@ -30,230 +25,17 @@ particularly concentrated on any version of this information that is\n distributed as part of a *released* `g77'.\n \n    In particular, while this information is intended to apply to the\n-FSF-0.5.25 version of `g77', only an official *release* of that version\n+GCC-2.95 version of `g77', only an official *release* of that version\n is expected to contain documentation that is most consistent with the\n `g77' product in that version.\n \n-   The following information was last updated on 1999-05-10:\n+   The following information was last updated on 1999-07-17:\n \n Prerequisites\n =============\n \n-   The procedures described to unpack, configure, build, and install\n-`g77' assume your system has certain programs already installed.\n-\n-   The following prerequisites should be met by your system before you\n-follow the `g77' installation instructions:\n-\n-`gzip' and `tar'\n-     To unpack the `gcc' and `g77' distributions, you'll need the\n-     `gunzip' utility in the `gzip' distribution.  Most UNIX systems\n-     already have `gzip' installed.  If yours doesn't, you can get it\n-     from the FSF.\n-\n-     Note that you'll need `tar' and other utilities as well, but all\n-     UNIX systems have these.  There are GNU versions of all these\n-     available--in fact, a complete GNU UNIX system can be put together\n-     on most systems, if desired.\n-\n-     The version of GNU `gzip' used to package this release is\n-     1.2.4.  (The version of GNU `tar' used to package this release is\n-     1.12.)\n-\n-`gcc-2.8.1.tar.gz'\n-     You need to have this, or some other applicable, version of `gcc'\n-     on your system.  The version should be an exact copy of a\n-     distribution from the FSF.  Its size is approximately 8.4MB.\n-\n-     If you've already unpacked `gcc-2.8.1.tar.gz' into a directory\n-     (named `gcc-2.8.1') called the \"source tree\" for `gcc', you can\n-     delete the distribution itself, but you'll need to remember to\n-     skip any instructions to unpack this distribution.\n-\n-     Without an applicable `gcc' source tree, you cannot build `g77'.\n-     You can obtain an FSF distribution of `gcc' from the FSF.\n-\n-`g77-0.5.25.tar.gz'\n-     You probably have already unpacked this package, or you are\n-     reading an advance copy of these installation instructions, which\n-     are contained in this distribution.  The size of this package is\n-     approximately 1.4MB.\n-\n-     You can obtain an FSF distribution of `g77' from the FSF, the same\n-     way you obtained `gcc'.\n-\n-Enough disk space\n-     The amount of disk space needed to unpack, build, install, and use\n-     `g77' depends on the type of system you're using, how you build\n-     `g77', and how much of it you install (primarily, which languages\n-     you install).\n-\n-     The sizes shown below assume all languages distributed in\n-     `gcc-2.8.1', plus `g77', will be built and installed.  These sizes\n-     are indicative of GNU/Linux systems on Intel x86 running COFF and\n-     on Digital Alpha (AXP) systems running ELF.  These should be\n-     fairly representative of 32-bit and 64-bit systems, respectively.\n-\n-     Note that all sizes are approximate and subject to change without\n-     notice!  They are based on preliminary releases of g77 made shortly\n-     before the public beta release.\n-\n-        -- `gcc' and `g77' distributions occupy 10MB packed, 40MB\n-          unpacked.  These consist of the source code and documentation,\n-          plus some derived files (mostly documentation), for `gcc' and\n-          `g77'.  Any deviations from these numbers for different kinds\n-          of systems are likely to be very minor.\n-\n-        -- A \"bootstrap\" build requires an additional 91MB for a total\n-          of 132MB on an ix86, and an additional 136MB for a total of\n-          177MB on an Alpha.\n-\n-        -- Removing `gcc/stage1' after the build recovers 13MB for a\n-          total of 119MB on an ix86, and recovers 21MB for a total of\n-          155MB on an Alpha.\n-\n-          After doing this, the integrity of the build can still be\n-          verified via `make compare', and the `gcc' compiler modified\n-          and used to build itself for testing fairly quickly, using\n-          the copy of the compiler kept in `gcc/stage2'.\n-\n-        -- Removing `gcc/stage2' after the build further recovers 39MB\n-          for a total of 80MB, and recovers 57MB for a total of 98MB on\n-          an Alpha.\n-\n-          After doing this, the compiler can still be installed,\n-          especially if GNU `make' is used to avoid gratuitous rebuilds\n-          (or, the installation can be done by hand).\n-\n-        -- Installing `gcc' and `g77' copies 23MB onto the `--prefix'\n-          disk for a total of 103MB on an ix86, and copies 31MB onto\n-          the `--prefix' disk for a total of 130MB on an Alpha.\n-\n-     After installation, if no further modifications and builds of\n-     `gcc' or `g77' are planned, the source and build directory may be\n-     removed, leaving the total impact on a system's disk storage as\n-     that of the amount copied during installation.\n-\n-     Systems with the appropriate version of `gcc' installed don't\n-     require the complete bootstrap build.  Doing a \"straight build\"\n-     requires about as much space as does a bootstrap build followed by\n-     removing both the `gcc/stage1' and `gcc/stage2' directories.\n-\n-     Installing `gcc' and `g77' over existing versions might require\n-     less *new* disk space, but note that, unlike many products, `gcc'\n-     installs itself in a way that avoids overwriting other installed\n-     versions of itself, so that other versions may easily be invoked\n-     (via `gcc -V VERSION').\n-\n-     So, the amount of space saved as a result of having an existing\n-     version of `gcc' and `g77' already installed is not\n-     much--typically only the command drivers (`gcc', `g77', `g++', and\n-     so on, which are small) and the documentation is overwritten by\n-     the new installation.  The rest of the new installation is done\n-     without replacing existing installed versions (assuming they have\n-     different version numbers).\n-\n-`make'\n-     Your system must have `make', and you will probably save yourself\n-     a lot of trouble if it is GNU `make' (sometimes referred to as\n-     `gmake').  In particular, you probably need GNU `make' to build\n-     outside the source directory (with `configure''s `--srcdir'\n-     option.)\n-\n-     The version of GNU `make' used to develop this release is\n-     3.76.1.\n-\n-`cc'\n-     Your system must have a working C compiler.  If it doesn't, you\n-     might be able to obtain a prebuilt binary of some version of `gcc'\n-     from the network or on CD-ROM, perhaps from the FSF.  The best\n-     source of information about binaries is probably a system-specific\n-     Usenet news group, initially via its FAQ.\n-\n-     *Note Installing GNU CC: (gcc)Installation, for more information\n-     on prerequisites for installing `gcc'.\n-\n-`sed'\n-     All UNIX systems have `sed', but some have a broken version that\n-     cannot handle configuring, building, or installing `gcc' or `g77'.\n-\n-     The version of GNU `sed' used to develop this release is\n-     2.05.  (Note that GNU `sed' version 3.0 was withdrawn by the\n-     FSF--if you happen to have this version installed, replace it with\n-     version 2.05 immediately.  See a GNU distribution site for further\n-     explanation.)\n-\n-`root' access or equivalent\n-     To perform the complete installation procedures on a system, you\n-     need to have `root' access to that system, or equivalent access to\n-     the `--prefix' directory tree specified on the `configure' command\n-     line.\n-\n-     Portions of the procedure (such as configuring and building `g77')\n-     can be performed by any user with enough disk space and virtual\n-     memory.\n-\n-     However, these instructions are oriented towards less-experienced\n-     users who want to install `g77' on their own personal systems.\n-\n-     System administrators with more experience will want to determine\n-     for themselves how they want to modify the procedures described\n-     below to suit the needs of their installation.\n-\n-`autoconf'\n-     The version of GNU `autoconf' used to develop this release is\n-     2.12.\n-\n-     `autoconf' is not needed in the typical case of installing `gcc'\n-     and `g77'.  *Note Missing tools?::, for information on when it\n-     might be needed and how to work around not having it.\n-\n-`bison'\n-     The version of GNU `bison' used to develop this release is\n-     1.25.\n-\n-     `bison' is not needed in the typical case of installing `gcc' and\n-     `g77'.  *Note Missing tools?::, for information on when it might\n-     be needed and how to work around not having it.\n-\n-`gperf'\n-     The version of GNU `gperf' used to develop this release is\n-     2.5.\n-\n-     `gperf' is not needed in the typical case of installing `gcc' and\n-     `g77'.  *Note Missing tools?::, for information on when it might\n-     be needed and how to work around not having it.\n-\n-`makeinfo'\n-     The version of GNU `makeinfo' used to develop this release is\n-     1.68.\n-\n-     `makeinfo' is part of the GNU `texinfo' package; `makeinfo'\n-     version 1.68 is distributed as part of GNU `texinfo' version\n-     3.12.\n-\n-     `makeinfo' is not needed in the typical case of installing `gcc'\n-     and `g77'.  *Note Missing tools?::, for information on when it\n-     might be needed and how to work around not having it.\n-\n-     An up-to-date version of GNU `makeinfo' is still convenient when\n-     obtaining a new version of a GNU distribution such as `gcc' or\n-     `g77', as it allows you to obtain the `.diff.gz' file instead of\n-     the entire `.tar.gz' distribution (assuming you have installed\n-     `patch').\n-\n-`patch'\n-     The version of GNU `patch' used to develop this release is\n-     2.5.\n-\n-     Beginning with `g77' version 0.5.23, it is no longer necessary to\n-     patch the `gcc' back end to build `g77'.\n-\n-     An up-to-date version of GNU `patch' is still convenient when\n-     obtaining a new version of a GNU distribution such as `gcc' or\n-     `g77', as it allows you to obtain the `.diff.gz' file instead of\n-     the entire `.tar.gz' distribution (assuming you have installed the\n-     tools needed to rebuild derived files, such as `makeinfo').\n+   For users of the GCC-2.95 version of `g77', this information is\n+superceded by the GCC installation instructions.\n \n Problems Installing\n ===================\n@@ -302,46 +84,7 @@ not yet established.\n Missing strtoul or bsearch\n ..........................\n \n-   On SunOS4 systems, linking the `f771' program used to produce an\n-error message concerning an undefined symbol named `_strtoul', because\n-the `strtoul' library function is not provided on that system.\n-\n-   Other systems have, in the past, been reported to not provide their\n-own `strtoul' or `bsearch' function.\n-\n-   Some versions `g77' tried to default to providing bare-bones\n-versions of `bsearch' and `strtoul' automatically, but every attempt at\n-this has failed for at least one kind of system.\n-\n-   To limit the failures to those few systems actually missing the\n-required routines, the bare-bones versions are still provided, in\n-`egcs/gcc/f/proj.c', if the appropriate macros are defined.  These are\n-`NEED_BSEARCH' for `bsearch' and `NEED_STRTOUL' for `NEED_STRTOUL'.\n-\n-   Therefore, if you are sure your system is missing `bsearch' or\n-`strtoul' in its library, define the relevant macro(s) before building\n-`g77'.  This can be done by editing `egcs/gcc/f/proj.c' and inserting\n-either or both of the following `#define' statements before the comment\n-shown:\n-\n-     /* Insert #define statements here.  */\n-     \n-     #define NEED_BSEARCH\n-     #define NEED_STRTOUL\n-\n-   Then, continue configuring and building `g77' as usual.\n-\n-   Or, you can define these on the `make' command line.  To build with\n-the bundled `cc' on SunOS4, for example, try:\n-     make bootstrap BOOT_CFLAGS='-O2 -g -DNEED_STRTOUL'\n-\n-   If you then encounter problems compiling `egcs/gcc/f/proj.c', it\n-might be due to a discrepancy between how `bsearch' or `strtoul' are\n-defined by that file and how they're declared by your system's header\n-files.\n-\n-   In that case, you'll have to use some basic knowledge of C to work\n-around the problem, perhaps by editing `egcs/gcc/f/proj.c' somewhat.\n+   This information does not apply to the GCC-2.95 version of `g77',\n \n Cleanup Kills Stage Directories\n ...............................\n@@ -592,970 +335,18 @@ support 64-bit systems.\n Quick Start\n ===========\n \n-   This procedure configures, builds, and installs `g77' \"out of the\n-box\" and works on most UNIX systems.  Each command is identified by a\n-unique number, used in the explanatory text that follows.  For the most\n-part, the output of each command is not shown, though indications of\n-the types of responses are given in a few cases.\n-\n-   To perform this procedure, the installer must be logged in as user\n-`root'.  Much of it can be done while not logged in as `root', and\n-users experienced with UNIX administration should be able to modify the\n-procedure properly to do so.\n-\n-   Following traditional UNIX conventions, it is assumed that the\n-source trees for `g77' and `gcc' will be placed in `/usr/src'.  It also\n-is assumed that the source distributions themselves already reside in\n-`/usr/FSF', a naming convention used by the author of `g77' on his own\n-system:\n-\n-     /usr/FSF/gcc-2.8.1.tar.gz\n-     /usr/FSF/g77-0.5.25.tar.gz\n-\n-   If you vary *any* of the steps below, you might run into trouble,\n-including possibly breaking existing programs for other users of your\n-system.  Before doing so, it is wise to review the explanations of some\n-of the steps.  These explanations follow this list of steps.\n-\n-     sh[ 1]# cd /usr/src\n-     \n-     sh[ 2]# gunzip -c < /usr/FSF/gcc-2.8.1.tar.gz | tar xf -\n-     [Might say \"Broken pipe\"...that is normal on some systems.]\n-     \n-     sh[ 3]# gunzip -c < /usr/FSF/g77-0.5.25.tar.gz | tar xf -\n-     [\"Broken pipe\" again possible.]\n-     \n-     sh[ 4]# ln -s gcc-2.8.1 gcc\n-     \n-     sh[ 5]# ln -s g77-0.5.25 g77\n-     \n-     sh[ 6]# mv -i g77/* gcc\n-     [No questions should be asked by mv here; or, you made a mistake.]\n-     \n-     sh[ 7]# cd gcc\n-     sh[ 8]# ./configure --prefix=/usr\n-     [Do not do the above if gcc is not installed in /usr/bin.\n-     You might need a different --prefix=..., as\n-     described below.]\n-     \n-     sh[ 9]# make bootstrap\n-     [This takes a long time, and is where most problems occur.]\n-     \n-     sh[10]# make compare\n-     [This verifies that the compiler is `sane'.\n-     If any files are printed, you have likely found a g77 bug.]\n-     \n-     sh[11]# rm -fr stage1\n-     \n-     sh[12]# make -k install\n-     [The actual installation.]\n-     \n-     sh[13]# g77 -v\n-     [Verify that g77 is installed, obtain version info.]\n-     \n-     sh[14]#\n-\n-   *Note Updating Your Info Directory: Updating Documentation, for\n-information on how to update your system's top-level `info' directory\n-to contain a reference to this manual, so that users of `g77' can\n-easily find documentation instead of having to ask you for it.\n-\n-   Elaborations of many of the above steps follows:\n-\n-Step 1: `cd /usr/src'\n-     You can build `g77' pretty much anyplace.  By convention, this\n-     manual assumes `/usr/src'.  It might be helpful if other users on\n-     your system knew where to look for the source code for the\n-     installed version of `g77' and `gcc' in any case.\n-\n-Step 3: `gunzip -d < /usr/FSF/g77-0.5.25.tar.gz | tar xf -'\n-     It is not always necessary to obtain the latest version of `g77'\n-     as a complete `.tar.gz' file if you have a complete, earlier\n-     distribution of `g77'.  If appropriate, you can unpack that earlier\n-     version of `g77', and then apply the appropriate patches to\n-     achieve the same result--a source tree containing version\n-     0.5.25 of `g77'.\n-\n-Step 4: `ln -s gcc-2.8.1 gcc'\n-\n-Step 5: `ln -s g77-0.5.25 g77'\n-     These commands mainly help reduce typing, and help reduce visual\n-     clutter in examples in this manual showing what to type to install\n-     `g77'.\n-\n-     *Note Unpacking::, for information on using distributions of `g77'\n-     made by organizations other than the FSF.\n-\n-Step 6: `mv -i g77/* gcc'\n-     After doing this, you can, if you like, type `rm g77' and `rmdir\n-     g77-0.5.25' to remove the empty directory and the symbol link to\n-     it.  But, it might be helpful to leave them around as quick\n-     reminders of which version(s) of `g77' are installed on your\n-     system.\n-\n-     *Note Unpacking::, for information on the contents of the `g77'\n-     directory (as merged into the `gcc' directory).\n-\n-Step 8: `./configure --prefix=/usr'\n-     This is where you specify that the `g77' and `gcc' executables are\n-     to be installed in `/usr/bin/', the `g77' and `gcc' documentation\n-     is to be installed in `/usr/info/' and `/usr/man/', and so on.\n-\n-     You should ensure that any existing installation of the `gcc'\n-     executable is in `/usr/bin/'.\n-\n-     However, if that existing version of `gcc' is not 2.8.1, or if you\n-     simply wish to avoid risking overwriting it with a newly built\n-     copy of the same version, you can specify `--prefix=/usr/local'\n-     (which is the default) or some other path, and invoke the newly\n-     installed version directly from that path's `bin' directory.\n-\n-     *Note Where in the World Does Fortran (and GNU CC) Go?: Where to\n-     Install, for more information on determining where to install\n-     `g77'.  *Note Configuring gcc::, for more information on the\n-     configuration process triggered by invoking the `./configure'\n-     script.\n-\n-Step 9: `make bootstrap'\n-     *Note Installing GNU CC: (gcc)Installation, for information on the\n-     kinds of diagnostics you should expect during this procedure.\n-\n-     *Note Building gcc::, for complete `g77'-specific information on\n-     this step.\n-\n-Step 10: `make compare'\n-     *Note Where to Port Bugs: Bug Lists, for information on where to\n-     report that you observed files having different contents during\n-     this phase.\n-\n-     *Note How to Report Bugs: Bug Reporting, for information on *how*\n-     to report bugs like this.\n-\n-Step 11: `rm -fr stage1'\n-     You don't need to do this, but it frees up disk space.\n-\n-Step 12: `make -k install'\n-     If this doesn't seem to work, try:\n-\n-          make -k install install-libf77\n-\n-     Or, make sure you're using GNU `make'.\n-\n-     *Note Installation of Binaries::, for more information.\n-\n-     *Note Updating Your Info Directory: Updating Documentation, for\n-     information on entering this manual into your system's list of\n-     texinfo manuals.\n-\n-Step 13: `g77 -v'\n-     If this command prints approximately 25 lines of output, including\n-     the GNU Fortran Front End version number (which should be the same\n-     as the version number for the version of `g77' you just built and\n-     installed) and the version numbers for the three parts of the\n-     `libf2c' library (`libF77', `libI77', `libU77'), and those version\n-     numbers are all in agreement, then there is a high likelihood that\n-     the installation has been successfully completed.\n-\n-     You might consider doing further testing.  For example, log in as\n-     a non-privileged user, then create a small Fortran program, such\n-     as:\n-\n-                PROGRAM SMTEST\n-                DO 10 I=1, 10\n-                   PRINT *, 'Hello World #', I\n-          10    CONTINUE\n-                END\n-\n-     Compile, link, and run the above program, and, assuming you named\n-     the source file `smtest.f', the session should look like this:\n-\n-          sh# g77 -o smtest smtest.f\n-          sh# ./smtest\n-           Hello World # 1\n-           Hello World # 2\n-           Hello World # 3\n-           Hello World # 4\n-           Hello World # 5\n-           Hello World # 6\n-           Hello World # 7\n-           Hello World # 8\n-           Hello World # 9\n-           Hello World # 10\n-          sh#\n-\n-     If invoking `g77' doesn't seem to work, the problem might be that\n-     you've installed it in a location that is not in your shell's\n-     search path.  For example, if you specified `--prefix=/gnu', and\n-     `/gnu/bin' is not in your `PATH' environment variable, you must\n-     explicitly specify the location of the compiler via `/gnu/bin/g77\n-     -o smtest smtest.f'.\n-\n-     After proper installation, you don't need to keep your gcc and g77\n-     source and build directories around anymore.  Removing them can\n-     free up a lot of disk space.\n+   For users of the GCC-2.95 version of `g77', this information is\n+superceded by the GCC installation instructions.\n \n Complete Installation\n =====================\n \n-   Here is the complete `g77'-specific information on how to configure,\n-build, and install `g77'.\n-\n-Unpacking\n----------\n-\n-   The `gcc' source distribution is a stand-alone distribution.  It is\n-designed to be unpacked (producing the `gcc' source tree) and built as\n-is, assuming certain prerequisites are met (including the availability\n-of compatible UNIX programs such as `make', `cc', and so on).\n-\n-   However, before building `gcc', you will want to unpack and merge\n-the `g77' distribution in with it, so that you build a Fortran-capable\n-version of `gcc', which includes the `g77' command, the necessary\n-run-time libraries, and this manual.\n-\n-   Unlike `gcc', the `g77' source distribution is *not* a stand-alone\n-distribution.  It is designed to be unpacked and, afterwards,\n-immediately merged into an applicable `gcc' source tree.  That is, the\n-`g77' distribution *augments* a `gcc' distribution--without `gcc',\n-generally only the documentation is immediately usable.\n-\n-   A sequence of commands typically used to unpack `gcc' and `g77' is:\n-\n-     sh# cd /usr/src\n-     sh# gunzip -c /usr/FSF/gcc-2.8.1.tar.gz | tar xf -\n-     sh# gunzip -c /usr/FSF/g77-0.5.25.tar.gz | tar xf -\n-     sh# ln -s gcc-2.8.1 gcc\n-     sh# ln -s g77-0.5.25 g77\n-     sh# mv -i g77/* gcc\n-\n-   *Notes:* The commands beginning with `gunzip...' might print `Broken\n-pipe...' as they complete.  That is nothing to worry about, unless you\n-actually *hear* a pipe breaking.  The `ln' commands are helpful in\n-reducing typing and clutter in installation examples in this manual.\n-Hereafter, the top level of `gcc' source tree is referred to as `gcc',\n-and the top level of just the `g77' source tree (prior to issuing the\n-`mv' command, above) is referred to as `g77'.\n-\n-   There are three top-level names in a `g77' distribution:\n-\n-     g77/COPYING.g77\n-     g77/README.g77\n-     g77/f\n-\n-   All three entries should be moved (or copied) into a `gcc' source\n-tree (typically named after its version number and as it appears in the\n-FSF distributions--e.g. `gcc-2.8.1').\n-\n-   `g77/f' is the subdirectory containing all of the code,\n-documentation, and other information that is specific to `g77'.  The\n-other two files exist to provide information on `g77' to someone\n-encountering a `gcc' source tree with `g77' already present, who has\n-not yet read these installation instructions and thus needs help\n-understanding that the source tree they are looking at does not come\n-from a single FSF distribution.  They also help people encountering an\n-unmerged `g77' source tree for the first time.\n-\n-   *Note:* Please use *only* `gcc' and `g77' source trees as\n-distributed by the FSF.  Use of modified versions is likely to result\n-in problems that appear to be in the `g77' code but, in fact, are not.\n-Do not use such modified versions unless you understand all the\n-differences between them and the versions the FSF distributes--in which\n-case you should be able to modify the `g77' (or `gcc') source trees\n-appropriately so `g77' and `gcc' can coexist as they do in the stock\n-FSF distributions.\n-\n-Merging Distributions\n----------------------\n-\n-   After merging the `g77' source tree into the `gcc' source tree, you\n-have put together a complete `g77' source tree.\n-\n-   As of version 0.5.23, `g77' no longer modifies the version number of\n-`gcc', nor does it patch `gcc' itself.\n-\n-   `g77' still depends on being merged with an appropriate version of\n-`gcc'.  For version 0.5.25 of `g77', the specific version of `gcc'\n-supported is 2.8.1.\n-\n-   However, other versions of `gcc' might be suitable \"hosts\" for this\n-version of `g77'.\n-\n-   GNU version numbers make it easy to figure out whether a particular\n-version of a distribution is newer or older than some other version of\n-that distribution.  The format is, generally, MAJOR.MINOR.PATCH, with\n-each field being a decimal number.  (You can safely ignore leading\n-zeros; for example, 1.5.3 is the same as 1.5.03.)  The MAJOR field only\n-increases with time.  The other two fields are reset to 0 when the\n-field to their left is incremented; otherwise, they, too, only increase\n-with time.  So, version 2.6.2 is newer than version 2.5.8, and version\n-3.0 is newer than both.  (Trailing `.0' fields often are omitted in\n-announcements and in names for distributions and the directories they\n-create.)\n-\n-   If your version of `gcc' is older than the oldest version supported\n-by `g77' (as casually determined by listing the contents of\n-`egcs/gcc/f/INSTALL/', which contains these installation instructions\n-in plain-text format), you should obtain a newer, supported version of\n-`gcc'.  (You could instead obtain an older version of `g77', or try and\n-get your `g77' to work with the old `gcc', but neither approach is\n-recommended, and you shouldn't bother reporting any bugs you find if you\n-take either approach, because they're probably already fixed in the\n-newer versions you're not using.)\n-\n-   If your version of `gcc' is newer than the newest version supported\n-by `g77', it is possible that your `g77' will work with it anyway.  If\n-the version number for `gcc' differs only in the PATCH field, you might\n-as well try that version of `gcc'.  Since it has the same MAJOR and\n-MINOR fields, the resulting combination is likely to work.\n-\n-   So, for example, if a particular version of `g77' has support for\n-`gcc' versions 2.8.0 and 2.8.1, it is likely that `gcc-2.8.2' would\n-work well with `g77'.\n-\n-   However, `gcc-2.9.0' would almost certainly not work with that\n-version of `g77' without appropriate modifications, so a new version of\n-`g77' would be needed.\n-\n-   This complexity is the result of `gcc' and `g77' being separate\n-distributions.  By keeping them separate, each product is able to be\n-independently improved and distributed to its user base more frequently.\n-\n-   However, the GBE interface defined by `gcc' typically undergoes some\n-incompatible changes at least every time the MINOR field of the version\n-number is incremented, and such changes require corresponding changes to\n-the `g77' front end (FFE).\n-\n-Where in the World Does Fortran (and GNU CC) Go?\n-------------------------------------------------\n-\n-   Before configuring, you should make sure you know where you want the\n-`g77' and `gcc' binaries to be installed after they're built, because\n-this information is given to the configuration tool and used during the\n-build itself.\n-\n-   A `g77' installation normally includes installation of a\n-Fortran-aware version of `gcc', so that the `gcc' command recognizes\n-Fortran source files and knows how to compile them.\n-\n-   For this to work, the version of `gcc' that you will be building as\n-part of `g77' *must* be installed as the \"active\" version of `gcc' on\n-the system.\n-\n-   Sometimes people make the mistake of installing `gcc' as\n-`/usr/local/bin/gcc', leaving an older, non-Fortran-aware version in\n-`/usr/bin/gcc'.  (Or, the opposite happens.)  This can result in `gcc'\n-being unable to compile Fortran source files, because when the older\n-version of `gcc' is invoked, it complains that it does not recognize\n-the language, or the file name suffix.\n-\n-   So, determine whether `gcc' already is installed on your system,\n-and, if so, *where* it is installed, and prepare to configure the new\n-version of `gcc' you'll be building so that it installs over the\n-existing version of `gcc'.\n-\n-   You might want to back up your existing copy of `/usr/bin/gcc', and\n-the entire `/usr/lib' directory, before you perform the actual\n-installation (as described in this manual).\n-\n-   Existing `gcc' installations typically are found in `/usr' or\n-`/usr/local'.  (This means the commands are installed in `/usr/bin' or\n-`/usr/local/bin', the libraries in `/usr/lib' or `/usr/local/lib', and\n-so on.)\n-\n-   If you aren't certain where the currently installed version of `gcc'\n-and its related programs reside, look at the output of this command:\n-\n-     gcc -v -o /tmp/delete-me -xc /dev/null -xnone\n-\n-   All sorts of interesting information on the locations of various\n-`gcc'-related programs and data files should be visible in the output\n-of the above command.  (The output also is likely to include a\n-diagnostic from the linker, since there's no `main_()' function.)\n-However, you do have to sift through it yourself; `gcc' currently\n-provides no easy way to ask it where it is installed and where it looks\n-for the various programs and data files it calls on to do its work.\n-\n-   Just *building* `g77' should not overwrite any installed\n-programs--but, usually, after you build `g77', you will want to install\n-it, so backing up anything it might overwrite is a good idea.  (This is\n-true for any package, not just `g77', though in this case it is\n-intentional that `g77' overwrites `gcc' if it is already installed--it\n-is unusual that the installation process for one distribution\n-intentionally overwrites a program or file installed by another\n-distribution, although, in this case, `g77' is an augmentation of the\n-`gcc' distribution.)\n-\n-   Another reason to back up the existing version first, or make sure\n-you can restore it easily, is that it might be an older version on\n-which other users have come to depend for certain behaviors.  However,\n-even the new version of `gcc' you install will offer users the ability\n-to specify an older version of the actual compilation programs if\n-desired, and these older versions need not include any `g77' components.\n-*Note Specifying Target Machine and Compiler Version: (gcc)Target\n-Options, for information on the `-V' option of `gcc'.\n-\n-Configuring GNU CC\n-------------------\n-\n-   `g77' is configured automatically when you configure `gcc'.  There\n-are two parts of `g77' that are configured in two different\n-ways--`g77', which \"camps on\" to the `gcc' configuration mechanism, and\n-`libg2c', which uses a variation of the GNU `autoconf' configuration\n-system.\n-\n-   Generally, you shouldn't have to be concerned with either `g77' or\n-`libg2c' configuration, unless you're configuring `g77' as a\n-cross-compiler.  In this case, the `libg2c' configuration, and possibly\n-the `g77' and `gcc' configurations as well, might need special\n-attention.  (This also might be the case if you're porting `gcc' to a\n-whole new system--even if it is just a new operating system on an\n-existing, supported CPU.)\n-\n-   To configure the system, see *Note Installing GNU CC:\n-(gcc)Installation, following the instructions for running `./configure'.\n-Pay special attention to the `--prefix=' option, which you almost\n-certainly will need to specify.\n-\n-   (Note that `gcc' installation information is provided as a\n-plain-text file in `gcc/INSTALL'.)\n-\n-   The information printed by the invocation of `./configure' should\n-show that the `f' directory (the Fortran language) has been configured.\n-If it does not, there is a problem.\n-\n-   *Note:* Configuring with the `--srcdir' argument, or by starting in\n-an empty directory and typing a command such as `../gcc/configure' to\n-build with separate build and source directories, is known to work with\n-GNU `make', but it is known to not work with other variants of `make'.\n-Irix5.2 and SunOS4.1 versions of `make' definitely won't work outside\n-the source directory at present.\n-\n-   `g77''s portion of the `configure' script used to issue a warning\n-message about this when configuring for building binaries outside the\n-source directory, but no longer does this as of version 0.5.23.\n-\n-   Instead, `g77' simply rejects most common attempts to build it using\n-a non-GNU `make' when the build directory is not the same as the source\n-directory, issuing an explanatory diagnostic.\n-\n-Building GNU CC\n----------------\n-\n-   Building `g77' requires building enough of `gcc' that these\n-instructions assume you're going to build all of `gcc', including\n-`g++', `protoize', and so on.  You can save a little time and disk\n-space by changes the `LANGUAGES' macro definition in `gcc/Makefile.in'\n-or `gcc/Makefile', but if you do that, you're on your own.  One change\n-is almost *certainly* going to cause failures: removing `c' or `f77'\n-from the definition of the `LANGUAGES' macro.\n-\n-   After configuring `gcc', which configures `g77' and `libg2c'\n-automatically, you're ready to start the actual build by invoking\n-`make'.\n-\n-   *Note:* You *must* have run the `configure' script in `gcc' before\n-you run `make', even if you're using an already existing `gcc'\n-development directory, because `./configure' does the work to recognize\n-that you've added `g77' to the configuration.\n-\n-   There are two general approaches to building GNU CC from scratch:\n-\n-\"bootstrap\"\n-     This method uses minimal native system facilities to build a\n-     barebones, unoptimized `gcc', that is then used to compile\n-     (\"bootstrap\") the entire system.\n-\n-\"straight\"\n-     This method assumes a more complete native system exists, and uses\n-     that just once to build the entire system.\n-\n-   On all systems without a recent version of `gcc' already installed,\n-the bootstrap method must be used.  In particular, `g77' uses\n-extensions to the C language offered, apparently, only by `gcc'.\n-\n-   On most systems with a recent version of `gcc' already installed,\n-the straight method can be used.  This is an advantage, because it\n-takes less CPU time and disk space for the build.  However, it does\n-require that the system have fairly recent versions of many GNU\n-programs and other programs, which are not enumerated here.\n-\n-Bootstrap Build\n-...............\n-\n-   A complete bootstrap build is done by issuing a command beginning\n-with `make bootstrap ...', as described in *Note Installing GNU CC:\n-(gcc)Installation.  This is the most reliable form of build, but it\n-does require the most disk space and CPU time, since the complete system\n-is built twice (in Stages 2 and 3), after an initial build (during\n-Stage 1) of a minimal `gcc' compiler using the native compiler and\n-libraries.\n-\n-   You might have to, or want to, control the way a bootstrap build is\n-done by entering the `make' commands to build each stage one at a time,\n-as described in the `gcc' manual.  For example, to save time or disk\n-space, you might want to not bother doing the Stage 3 build, in which\n-case you are assuming that the `gcc' compiler you have built is\n-basically sound (because you are giving up the opportunity to compare a\n-large number of object files to ensure they're identical).\n-\n-   To save some disk space during installation, after Stage 2 is built,\n-you can type `rm -fr stage1' to remove the binaries built during Stage\n-1.\n-\n-   Also, see *Note Installing GNU CC: (gcc)Installation, for important\n-information on building `gcc' that is not described in this `g77'\n-manual.  For example, explanations of diagnostic messages and whether\n-they're expected, or indicate trouble, are found there.\n-\n-Straight Build\n-..............\n-\n-   If you have a recent version of `gcc' already installed on your\n-system, and if you're reasonably certain it produces code that is\n-object-compatible with the version of `gcc' you want to build as part\n-of building `g77', you can save time and disk space by doing a straight\n-build.\n-\n-   To build just the compilers along with the necessary run-time\n-libraries, issue the following command:\n-\n-     make -k CC=gcc\n-\n-   If you run into problems using this method, you have two options:\n-\n-   * Abandon this approach and do a bootstrap build.\n-\n-   * Try to make this approach work by diagnosing the problems you're\n-     running into and retrying.\n-\n-   Especially if you do the latter, you might consider submitting any\n-solutions as bug/fix reports.  *Note Known Causes of Trouble with GNU\n-Fortran: Trouble.\n-\n-   However, understand that many problems preventing a straight build\n-from working are not `g77' problems, and, in such cases, are not likely\n-to be addressed in future versions of `g77'.  Consider treating them as\n-`gcc' bugs instead.\n-\n-Pre-installation Checks\n------------------------\n-\n-   Before installing the system, which includes installing `gcc', you\n-might want to do some minimum checking to ensure that some basic things\n-work.\n-\n-   Here are some commands you can try, and output typically printed by\n-them when they work:\n-\n-     sh# cd /usr/src/gcc\n-     sh# ./g77 -B./ -v\n-     g77 version 0.5.25\n-     Driving: ./g77 -B./ -v -c -xf77-version /dev/null -xnone\n-     Reading specs from ./specs\n-     gcc version 2.8.1\n-      cpp -lang-c -v -isystem ./include -undef -D__GNUC__=2 ...\n-     GNU CPP version 2.8.1 (Alpha GNU/Linux with ELF)\n-     #include \"...\" search starts here:\n-     #include <...> search starts here:\n-      include\n-      /usr/alpha-linux/include\n-      /usr/lib/gcc-lib/alpha-linux/2.8.1/include\n-      /usr/include\n-     End of search list.\n-      ./f771 -fnull-version -quiet -dumpbase g77-version.f -version ...\n-     GNU F77 version 2.8.1 (alpha-linux) compiled ...\n-     GNU Fortran Front End version 0.5.25\n-      as -nocpp -o /tmp/cca14485.o /tmp/cca14485.s\n-      ld -m elf64alpha -G 8 -O1 -dynamic-linker /lib/ld-linux.so.2 ...\n-      /tmp/cca14485\n-     __G77_LIBF77_VERSION__: 0.5.25\n-     @(#)LIBF77 VERSION 19970919\n-     __G77_LIBI77_VERSION__: 0.5.25\n-     @(#) LIBI77 VERSION pjw,dmg-mods 19980405\n-     __G77_LIBU77_VERSION__: 0.5.25\n-     @(#) LIBU77 VERSION 19970919\n-     sh# ./xgcc -B./ -v -o /tmp/delete-me -xc /dev/null -xnone\n-     Reading specs from ./specs\n-     gcc version 2.8.1\n-      ./cpp -lang-c -v -isystem ./include -undef ...\n-     GNU CPP version 2.8.1 (Alpha GNU/Linux with ELF)\n-     #include \"...\" search starts here:\n-     #include <...> search starts here:\n-      include\n-      /usr/alpha-linux/include\n-      /usr/lib/gcc-lib/alpha-linux/2.8.1/include\n-      /usr/include\n-     End of search list.\n-      ./cc1 /tmp/cca18063.i -quiet -dumpbase null.c -version ...\n-     GNU C version 2.8.1 (alpha-linux) compiled ...\n-      as -nocpp -o /tmp/cca180631.o /tmp/cca18063.s\n-      ld -m elf64alpha -G 8 -O1 -dynamic-linker /lib/ld-linux.so.2 ...\n-     /usr/lib/crt1.o: In function `_start':\n-     ../sysdeps/alpha/elf/start.S:77: undefined reference to `main'\n-     ../sysdeps/alpha/elf/start.S:77: undefined reference to `main'\n-     sh#\n-\n-   (Note that long lines have been truncated, and `...'  used to\n-indicate such truncations.)\n-\n-   The above two commands test whether `g77' and `gcc', respectively,\n-are able to compile empty (null) source files, whether invocation of\n-the C preprocessor works, whether libraries can be linked, and so on.\n-\n-   If the output you get from either of the above two commands is\n-noticeably different, especially if it is shorter or longer in ways\n-that do not look consistent with the above sample output, you probably\n-should not install `gcc' and `g77' until you have investigated further.\n-\n-   For example, you could try compiling actual applications and seeing\n-how that works.  (You might want to do that anyway, even if the above\n-tests work.)\n-\n-   To compile using the not-yet-installed versions of `gcc' and `g77',\n-use the following commands to invoke them.\n-\n-   To invoke `g77', type:\n-\n-     /usr/src/gcc/g77 -B/usr/src/gcc/ ...\n-\n-   To invoke `gcc', type:\n-\n-     /usr/src/gcc/xgcc -B/usr/src/gcc/ ...\n-\n-Installation of Binaries\n-------------------------\n-\n-   After configuring, building, and testing `g77' and `gcc', when you\n-are ready to install them on your system, type:\n-\n-     make -k CC=gcc install\n-\n-   As described in *Note Installing GNU CC: (gcc)Installation, the\n-values for the `CC' and `LANGUAGES' macros should be the same as those\n-you supplied for the build itself.\n-\n-   So, the details of the above command might vary if you used a\n-bootstrap build (where you might be able to omit both definitions, or\n-might have to supply the same definitions you used when building the\n-final stage) or if you deviated from the instructions for a straight\n-build.\n-\n-   If the above command does not install `libg2c.a' as expected, try\n-this:\n-\n-     make -k ... install install-libf77\n-\n-   We don't know why some non-GNU versions of `make' sometimes require\n-this alternate command, but they do.  (Remember to supply the\n-appropriate definition for `CC' where you see `...' in the above\n-command.)\n-\n-   Note that using the `-k' option tells `make' to continue after some\n-installation problems, like not having `makeinfo' installed on your\n-system.  It might not be necessary for your system.\n-\n-   *Note:* `g77' no longer installs files not directly part of `g77',\n-such as `/usr/bin/f77', `/usr/lib/libf2c.a', and `/usr/include/f2c.h',\n-or their `/usr/local' equivalents.\n-\n-   *Note Distributing Binaries::, for information on how to accommodate\n-systems with no existing non-`g77' `f77' compiler and systems with\n-`f2c' installed.\n-\n-Updating Your Info Directory\n-----------------------------\n-\n-   As part of installing `g77', you should make sure users of `info'\n-can easily access this manual on-line.\n-\n-   `g77' does this automatically by invoking the `install-info' command\n-when you use `make install' to install `g77'.\n-\n-   If that fails, or if the `info' directory it updates is not the one\n-normally accessed by users, consider invoking it yourself.  For example:\n-\n-     install-info --info-dir=/usr/info /usr/info/g77.info\n-\n-   The above example assumes the `g77' documentation already is\n-installed in `/usr/info' and that `/usr/info/dir' is the file you wish\n-to update.  Adjust the command accordingly, if those assumptions are\n-wrong.\n-\n-Missing tools?\n---------------\n-\n-   A build of `gcc' might fail due to one or more tools being called\n-upon by `make' (during the build or install process), when those tools\n-are not installed on your system.\n-\n-   This situation can result from any of the following actions\n-(performed by you or someone else):\n-\n-   * Changing the source code or documentation yourself (as a developer\n-     or technical writer).\n-\n-   * Applying a patch that changes the source code or documentation\n-     (including, sometimes, the official patches distributed by the\n-     FSF).\n-\n-   * Deleting the files that are created by the (missing) tools.\n-\n-     The `make maintainer-clean' command is supposed to delete these\n-     files, so invoking this command without having all the appropriate\n-     tools installed is not recommended.\n-\n-   * Creating the source directory using a method that does not\n-     preserve the date-time-modified information in the original\n-     distribution.\n-\n-     For example, the UNIX `cp -r' command copies a directory tree\n-     without preserving the date-time-modified information.  Use `cp\n-     -pr' instead.\n-\n-   The reason these activities cause `make' to try and invoke tools\n-that it probably wouldn't when building from a perfectly \"clean\" source\n-directory containing `gcc' and `g77' is that some files in the source\n-directory (and the corresponding distribution) aren't really source\n-files, but *derived* files that are produced by running tools with the\n-corresponding source files as input.  These derived files \"depend\", in\n-`make' terminology, on the corresponding source files.\n-\n-   `make' determines that a file that depends on another needs to be\n-updated if the date-time-modified information for the source file shows\n-that it is newer than the corresponding information for the derived\n-file.\n-\n-   If it makes that determination, `make' runs the appropriate commands\n-(specified in the \"Makefile\") to update the derived file, and this\n-process typically calls upon one or more installed tools to do the work.\n-\n-   The \"safest\" approach to dealing with this situation is to recreate\n-the `gcc' and `g77' source directories from complete `gcc' and `g77'\n-distributions known to be provided by the FSF.\n-\n-   Another fairly \"safe\" approach is to simply install the tools you\n-need to complete the build process.  This is especially appropriate if\n-you've changed the source code or applied a patch to do so.\n-\n-   However, if you're certain that the problem is limited entirely to\n-incorrect date-time-modified information, that there are no\n-discrepancies between the contents of source files and files derived\n-from them in the source directory, you can often update the\n-date-time-modified information for the derived files to work around the\n-problem of not having the appropriate tools installed.\n-\n-   On UNIX systems, the simplest way to update the date-time-modified\n-information of a file is to use the use the `touch' command.\n-\n-   How to use `touch' to update the derived files updated by each of\n-the tools is described below.  *Note:* New versions of `g77' might\n-change the set of files it generates by invoking each of these tools.\n-If you cannot figure out for yourself how to handle such a situation,\n-try an older version of `g77' until you find someone who can (or until\n-you obtain and install the relevant tools).\n-\n-Missing `autoconf'?\n-...................\n-\n-   If you cannot install `autoconf', make sure you have started with a\n-*fresh* distribution of `gcc' and `g77', do *not* do `make\n-maintainer-clean', and, to ensure that `autoconf' is not invoked by\n-`make' during the build, type these commands:\n-\n-     sh# cd egcs/libf2c\n-     sh# touch configure libU77/configure\n-     sh# cd ../../..\n-     sh#\n-\n-Missing `bison'?\n-................\n-\n-   If you cannot install `bison', make sure you have started with a\n-*fresh* distribution of `gcc', do *not* do `make maintainer-clean',\n-and, to ensure that `bison' is not invoked by `make' during the build,\n-type these commands:\n-\n-     sh# cd gcc\n-     sh# touch bi-parser.c bi-parser.h c-parse.c c-parse.h cexp.c\n-     sh# touch cp/parse.c cp/parse.h objc-parse.c\n-     sh# cd ..\n-     sh#\n-\n-Missing `gperf'?\n-................\n-\n-   If you cannot install `gperf', make sure you have started with a\n-*fresh* distribution of `gcc', do *not* do `make maintainer-clean',\n-and, to ensure that `gperf' is not invoked by `make' during the build,\n-type these commands:\n-\n-     sh# cd gcc\n-     sh# touch c-gperf.h\n-     sh# cd ..\n-     sh#\n-\n-Missing `makeinfo'?\n-...................\n-\n-   If `makeinfo' is needed but unavailable when installing (via `make\n-install'), some files, like `libg2c.a', might not be installed, because\n-once `make' determines that it cannot invoke `makeinfo', it cancels any\n-further processing.\n-\n-   If you cannot install `makeinfo', an easy work-around is to specify\n-`MAKEINFO=true' on the `make' command line, or to specify the `-k'\n-option (`make -k install').\n-\n-   Another approach is to force the relevant files to be up-to-date by\n-typing these commands and then re-trying the installation step:\n-\n-     sh# cd gcc\n-     sh# touch f/g77.info f/BUGS f/INSTALL f/NEWS\n-     sh# cd ..\n-     sh#\n+   For users of the GCC-2.95 version of `g77', this information is\n+superceded by the GCC installation instructions.\n \n Distributing Binaries\n =====================\n \n-   If you are building `g77' for distribution to others in binary form,\n-first make sure you are aware of your legal responsibilities (read the\n-file `gcc/COPYING' thoroughly).\n-\n-   Then, consider your target audience and decide where `g77' should be\n-installed.\n-\n-   For systems like GNU/Linux that have no native Fortran compiler (or\n-where `g77' could be considered the native compiler for Fortran and\n-`gcc' for C, etc.), you should definitely configure `g77' for\n-installation in `/usr/bin' instead of `/usr/local/bin'.  Specify the\n-`--prefix=/usr' option when running `./configure'.\n-\n-   You might also want to set up the distribution so the `f77' command\n-is a link to `g77', although a script that accepts \"classic\" UNIX `f77'\n-options and translates the command-line to the appropriate `g77'\n-command line would be more appropriate.  If you do this, *please* also\n-provide a \"man page\" in `man/man1/f77.1' describing the command.  (A\n-link to `man/man1/g77.1' is appropriate if `bin/f77' is a link to\n-`bin/g77'.)\n-\n-   For a system that might already have `f2c' installed, consider\n-whether inter-operation with `g77' will be important to users of `f2c'\n-on that system.  If you want to improve the likelihood that users will\n-be able to use both `f2c' and `g77' to compile code for a single program\n-without encountering link-time or run-time incompatibilities, make sure\n-that, whenever they intend to combine `f2c'-produced code with\n-`g77'-produced code in an executable, they:\n-\n-   * Use the `lib/gcc-lib/.../include/g2c.h' file generated by the\n-     `g77' build in place of the `f2c.h' file that normally comes with\n-     `f2c' (or versions of `g77' prior to 0.5.23) when compiling *all*\n-     of the `f2c'-produced C code\n-\n-   * Link to the `lib/gcc-lib/.../libg2c.a' library built by the `g77'\n-     build instead of the `libf2c.a' library that normally comes with\n-     `f2c' (or versions of `g77' prior to 0.5.23)\n-\n-   How you choose to effect the above depends on whether the existing\n-installation of `f2c' must be maintained.\n-\n-   In any case, it is important to try and ensure that the installation\n-keeps working properly even after subsequent re-installation of `f2c',\n-which probably involves overwriting `/usr/local/lib/libf2c.a' and\n-`/usr/local/include/f2c.h', or similar.\n-\n-   At least, copying `libg2c.a' and `g2c.h' into the appropriate\n-\"public\" directories allows users to more easily select the version of\n-`libf2c' they wish to use for a particular build.  The names are\n-changed by `g77' to make this coexistence easier to maintain; even if\n-`f2c' is installed later, the `g77' files normally installed by its\n-installation process aren't disturbed.  Use of symbolic links from one\n-set of files to another might result in problems after a subsequent\n-reinstallation of either `f2c' or `g77', so be sure to alert users of\n-your distribution accordingly.\n-\n-   (Make sure you clearly document, in the description of your\n-distribution, how installation of your distribution will affect\n-existing installations of `gcc', `f2c', `f77', `libf2c.a', and so on.\n-Similarly, you should clearly document any requirements you assume will\n-be met by users of your distribution.)\n-\n-   For other systems with native `f77' (and `cc') compilers, configure\n-`g77' as you (or most of your audience) would configure `gcc' for their\n-installations.  Typically this is for installation in `/usr/local', and\n-would not include a new version of `/usr/bin/f77' or\n-`/usr/local/bin/f77', so users could still use the native `f77'.\n-\n-   In any case, for `g77' to work properly, you *must* ensure that the\n-binaries you distribute include:\n-\n-`bin/g77'\n-     This is the command most users use to compile Fortran.\n-\n-`bin/gcc'\n-     This is the command some users use to compile Fortran, typically\n-     when compiling programs written in other languages at the same\n-     time.  The `bin/gcc' executable file must have been built from a\n-     `gcc' source tree into which a `g77' source tree was merged and\n-     configured, or it will not know how to compile Fortran programs.\n-\n-`info/g77.info*'\n-     This is the documentation for `g77'.  If it is not included, users\n-     will have trouble understanding diagnostics messages and other\n-     such things, and will send you a lot of email asking questions.\n-\n-     Please edit this documentation (by editing `egcs/gcc/f/*.texi' and\n-     doing `make doc' from the `/usr/src/gcc' directory) to reflect any\n-     changes you've made to `g77', or at least to encourage users of\n-     your binary distribution to report bugs to you first.\n-\n-     Also, whether you distribute binaries or install `g77' on your own\n-     system, it might be helpful for everyone to add a line listing\n-     this manual by name and topic to the top-level `info' node in\n-     `/usr/info/dir'.  That way, users can find `g77' documentation more\n-     easily.  *Note Updating Your Info Directory: Updating\n-     Documentation.\n-\n-`man/man1/g77.1'\n-     This is the short man page for `g77'.  It is not always kept\n-     up-to-date, but you might as well include it for people who really\n-     like \"man\" pages.\n-\n-`lib/gcc-lib'\n-     This is the directory containing the \"private\" files installed by\n-     and for `gcc', `g77', `g++', and other GNU compilers.\n-\n-`lib/gcc-lib/.../f771'\n-     This is the actual Fortran compiler.\n-\n-`lib/gcc-lib/.../libg2c.a'\n-     This is the run-time library for `g77'-compiled programs.\n-\n-   Whether you want to include the slightly updated (and possibly\n-improved) versions of `cc1', `cc1plus', and whatever other binaries get\n-rebuilt with the changes the GNU Fortran distribution makes to the GNU\n-back end, is up to you.  These changes are highly unlikely to break any\n-compilers, because they involve doing things like adding to the list of\n-acceptable compiler options (so, for example, `cc1plus' accepts, and\n-ignores, options that only `f771' actually processes).\n-\n-   Please assure users that unless they have a specific need for their\n-existing, older versions of `gcc' command, they are unlikely to\n-experience any problems by overwriting it with your version--though\n-they could certainly protect themselves by making backup copies first!\n-\n-   Otherwise, users might try and install your binaries in a \"safe\"\n-place, find they cannot compile Fortran programs with your distribution\n-(because, perhaps, they're invoking their old version of the `gcc'\n-command, which does not recognize Fortran programs), and assume that\n-your binaries (or, more generally, GNU Fortran distributions in\n-general) are broken, at least for their system.\n-\n-   Finally, *please* ask for bug reports to go to you first, at least\n-until you're sure your distribution is widely used and has been well\n-tested.  This especially goes for those of you making any changes to\n-the `g77' sources to port `g77', e.g. to OS/2.  <fortran@gnu.org> has\n-received a fair number of bug reports that turned out to be problems\n-with other peoples' ports and distributions, about which nothing could\n-be done for the user.  Once you are quite certain a bug report does not\n-involve your efforts, you can forward it to us.\n+   For users of the GCC-2.95 version of `g77', this information is\n+superceded by the GCC installation instructions.\n "}, {"sha": "39fa2e33953d7e3fb223bc9d9ded00ccc362888f", "filename": "gcc/f/NEWS", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4e5e9bcfc6798f2b29bb4036fb203ee4229953d/gcc%2Ff%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4e5e9bcfc6798f2b29bb4036fb203ee4229953d/gcc%2Ff%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FNEWS?ref=f4e5e9bcfc6798f2b29bb4036fb203ee4229953d", "patch": "@@ -2,7 +2,7 @@\n `news0.texi' and `news.texi'.  `NEWS' is *not* a source file, although\n it is normally included within source distributions.\n \n-   This file lists news about the FSF-0.5.25 version (and some other\n+   This file lists news about the GCC-2.95 version (and some other\n versions) of the GNU Fortran compiler.  Copyright (C) 1995-1999 Free\n Software Foundation, Inc.  You may copy, distribute, and modify it\n freely as long as you preserve this copyright notice and permission\n@@ -50,7 +50,7 @@ particularly concentrated on any version of this information that is\n distributed as part of a *released* `g77'.\n \n    In particular, while this information is intended to apply to the\n-FSF-0.5.25 version of `g77', only an official *release* of that version\n+GCC-2.95 version of `g77', only an official *release* of that version\n is expected to contain documentation that is most consistent with the\n `g77' product in that version.\n "}]}