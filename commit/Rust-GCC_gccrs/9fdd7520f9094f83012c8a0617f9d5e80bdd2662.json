{"sha": "9fdd7520f9094f83012c8a0617f9d5e80bdd2662", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZkZDc1MjBmOTA5NGY4MzAxMmM4YTA2MTdmOWQ1ZTgwYmRkMjY2Mg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2008-04-11T14:40:55Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2008-04-11T14:40:55Z"}, "message": "constraints.md: New file.\n\n\t* config/bfin/constraints.md: New file.\n\t* config/bfin/bfin.md: Include it.\n\t(adddi3): Use satisfies_constraint functions instead of the old macros.\n\t* config/bfin/bfin.h (REG_CLASS_FROM_LETTER, CONSTRAINT_LEN,\n\tCONST_18UBIT_IMM_P, CONST_16BIT_IMM_P, CONST_16UBIT_IMM_P,\n\tCONST_7BIT_IMM_P, CONST_7NBIT_IMM_P, CONST_5UBIT_IMM_P,\n\tCONST_4BIT_IMM_P, CONST_4UBIT_IMM_P, CONST_3BIT_IMM_P,\n\tCONST_3UBIT_IMM_P, CONST_OK_FOR_K, CONST_OK_FOR_P, CONST_OK_FOR_M,\n\tCONST_OK_FOR_CONSTRAINT_P, CONST_DOUBLE_OK_FOR_LETTER,\n\tEXTRA_CONSTRAINT): Delete.\n\t* config/bfin/predicates.md (highbits_operand, reg_or_7bit_operand,\n\treg_or_neg7bit_operand): Use satisfies_constraint functions instead\n\tof the old macros.\n\t* config/bfin/bfin.c: Include \"tm-constrs.h\".\n\t(bfin_secondary_reload, split_load_immediate, bfin_rtx_costs):\n\tUse satisfies_constraint functions instead of the old macros.\n\t* doc/md.texi (Blackfin Constraints): Update file name reference.\n\nFrom-SVN: r134198", "tree": {"sha": "0e38d51e4c942999391bd69d58cb8d526275a728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e38d51e4c942999391bd69d58cb8d526275a728"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fdd7520f9094f83012c8a0617f9d5e80bdd2662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdd7520f9094f83012c8a0617f9d5e80bdd2662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdd7520f9094f83012c8a0617f9d5e80bdd2662", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/comments", "author": null, "committer": null, "parents": [{"sha": "0a4bf1d3718d9eb52fae4970455baeafda19ccd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4bf1d3718d9eb52fae4970455baeafda19ccd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4bf1d3718d9eb52fae4970455baeafda19ccd6"}], "stats": {"total": 165, "additions": 33, "deletions": 132}, "files": [{"sha": "06eefcca88b2f3f8ca1a835f48b89e268eef0209", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fdd7520f9094f83012c8a0617f9d5e80bdd2662", "patch": "@@ -1,3 +1,23 @@\n+2008-04-11  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/constraints.md: New file.\n+\t* config/bfin/bfin.md: Include it.\n+\t(adddi3): Use satisfies_constraint functions instead of the old macros.\n+\t* config/bfin/bfin.h (REG_CLASS_FROM_LETTER, CONSTRAINT_LEN,\n+\tCONST_18UBIT_IMM_P, CONST_16BIT_IMM_P, CONST_16UBIT_IMM_P,\n+\tCONST_7BIT_IMM_P, CONST_7NBIT_IMM_P, CONST_5UBIT_IMM_P,\n+\tCONST_4BIT_IMM_P, CONST_4UBIT_IMM_P, CONST_3BIT_IMM_P,\n+\tCONST_3UBIT_IMM_P, CONST_OK_FOR_K, CONST_OK_FOR_P, CONST_OK_FOR_M,\n+\tCONST_OK_FOR_CONSTRAINT_P, CONST_DOUBLE_OK_FOR_LETTER,\n+\tEXTRA_CONSTRAINT): Delete.\n+\t* config/bfin/predicates.md (highbits_operand, reg_or_7bit_operand,\n+\treg_or_neg7bit_operand): Use satisfies_constraint functions instead\n+\tof the old macros.\n+\t* config/bfin/bfin.c: Include \"tm-constrs.h\".\n+\t(bfin_secondary_reload, split_load_immediate, bfin_rtx_costs):\n+\tUse satisfies_constraint functions instead of the old macros.\n+\t* doc/md.texi (Blackfin Constraints): Update file name reference.\n+\n 2008-04-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/35869"}, {"sha": "d1a5c80d2a8012e5f388cc0e7d4488e7c9af9d2d", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=9fdd7520f9094f83012c8a0617f9d5e80bdd2662", "patch": "@@ -49,6 +49,7 @@\n #include \"langhooks.h\"\n #include \"bfin-protos.h\"\n #include \"tm-preds.h\"\n+#include \"tm-constrs.h\"\n #include \"gt-bfin.h\"\n #include \"basic-block.h\"\n #include \"cfglayout.h\"\n@@ -2286,7 +2287,7 @@ bfin_secondary_reload (bool in_p, rtx x, enum reg_class class,\n   if (fp_plus_const_operand (x, mode))\n     {\n       rtx op2 = XEXP (x, 1);\n-      int large_constant_p = ! CONST_7BIT_IMM_P (INTVAL (op2));\n+      int large_constant_p = ! satisfies_constraint_Ks7 (op2);\n \n       if (class == PREGS || class == PREGS_CLOBBERED)\n \treturn NO_REGS;\n@@ -2712,7 +2713,7 @@ split_load_immediate (rtx operands[])\n \n   if (D_REGNO_P (regno))\n     {\n-      if (CONST_7BIT_IMM_P (tmp))\n+      if (tmp >= -64 && tmp <= 63)\n \t{\n \t  emit_insn (gen_movsi (operands[0], GEN_INT (tmp)));\n \t  emit_insn (gen_movstricthi_high (operands[0], GEN_INT (val & -65536)));\n@@ -2739,7 +2740,7 @@ split_load_immediate (rtx operands[])\n     return 0;\n \n   if (optimize_size\n-      && num_compl_zero && CONST_7BIT_IMM_P (shifted_compl))\n+      && num_compl_zero && shifted_compl >= -64 && shifted_compl <= 63)\n     {\n       /* If optimizing for size, generate a sequence that has more instructions\n \t but is shorter.  */\n@@ -2870,7 +2871,7 @@ bfin_rtx_costs (rtx x, int code, int outer_code, int *total)\n     {\n     case CONST_INT:\n       if (outer_code == SET || outer_code == PLUS)\n-        *total = CONST_7BIT_IMM_P (INTVAL (x)) ? 0 : cost2;\n+        *total = satisfies_constraint_Ks7 (x) ? 0 : cost2;\n       else if (outer_code == AND)\n         *total = log2constp (~INTVAL (x)) ? 0 : cost2;\n       else if (outer_code == LE || outer_code == LT || outer_code == EQ)\n@@ -2928,7 +2929,7 @@ bfin_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t{\n \t  *total = 6 * cost2;\n \t  if (GET_CODE (op1) != CONST_INT\n-\t      || !CONST_7BIT_IMM_P (INTVAL (op1)))\n+\t      || !satisfies_constraint_Ks7 (op1))\n \t    *total += rtx_cost (op1, PLUS);\n \t  if (GET_CODE (op0) != REG\n \t      && (GET_CODE (op0) != SUBREG || GET_CODE (SUBREG_REG (op0)) != REG))"}, {"sha": "3850c62ee387f3067a1257b03bdb87e845b717f1", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=9fdd7520f9094f83012c8a0617f9d5e80bdd2662", "patch": "@@ -677,43 +677,6 @@ enum reg_class\n \n #define REGNO_OK_FOR_INDEX_P(X)   0\n \n-/* Get reg_class from a letter such as appears in the machine description.  */\n-\n-#define REG_CLASS_FROM_CONSTRAINT(LETTER, STR)\t\\\n-  ((LETTER) == 'a' ? PREGS :            \\\n-   (LETTER) == 'Z' ? FDPIC_REGS :\t\\\n-   (LETTER) == 'Y' ? FDPIC_FPTR_REGS :\t\\\n-   (LETTER) == 'd' ? DREGS : \t\t\\\n-   (LETTER) == 'z' ? PREGS_CLOBBERED :\t\\\n-   (LETTER) == 'D' ? EVEN_DREGS : \t\\\n-   (LETTER) == 'W' ? ODD_DREGS : \t\\\n-   (LETTER) == 'e' ? AREGS : \t\t\\\n-   (LETTER) == 'A' ? EVEN_AREGS : \t\\\n-   (LETTER) == 'B' ? ODD_AREGS : \t\\\n-   (LETTER) == 'b' ? IREGS :            \\\n-   (LETTER) == 'v' ? BREGS :            \\\n-   (LETTER) == 'f' ? MREGS : \t\t\\\n-   (LETTER) == 'c' ? CIRCREGS :         \\\n-   (LETTER) == 'C' ? CCREGS : \t\t\\\n-   (LETTER) == 't' ? LT_REGS : \t\t\\\n-   (LETTER) == 'k' ? LC_REGS : \t\t\\\n-   (LETTER) == 'u' ? LB_REGS : \t\t\\\n-   (LETTER) == 'x' ? MOST_REGS :\t\\\n-   (LETTER) == 'y' ? PROLOGUE_REGS :\t\\\n-   (LETTER) == 'w' ? NON_A_CC_REGS :\t\\\n-   (LETTER) == 'q' \\\n-    ? ((STR)[1] == '0' ? D0REGS \\\n-       : (STR)[1] == '1' ? D1REGS \\\n-       : (STR)[1] == '2' ? D2REGS \\\n-       : (STR)[1] == '3' ? D3REGS \\\n-       : (STR)[1] == '4' ? D4REGS \\\n-       : (STR)[1] == '5' ? D5REGS \\\n-       : (STR)[1] == '6' ? D6REGS \\\n-       : (STR)[1] == '7' ? D7REGS \\\n-       : (STR)[1] == 'A' ? P0REGS \\\n-       : NO_REGS) : \\\n-   NO_REGS)\n-\n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n@@ -1198,89 +1161,6 @@ do {\t\t\t\t\t       \\\n #define WORD_REGISTER_OPERATIONS\n */\n \n-#define CONST_18UBIT_IMM_P(VALUE) ((VALUE) >= 0 && (VALUE) <= 262140)\n-#define CONST_16BIT_IMM_P(VALUE) ((VALUE) >= -32768 && (VALUE) <= 32767)\n-#define CONST_16UBIT_IMM_P(VALUE) ((VALUE) >= 0 && (VALUE) <= 65535)\n-#define CONST_7BIT_IMM_P(VALUE) ((VALUE) >= -64 && (VALUE) <= 63)\n-#define CONST_7NBIT_IMM_P(VALUE) ((VALUE) >= -64 && (VALUE) <= 0)\n-#define CONST_5UBIT_IMM_P(VALUE) ((VALUE) >= 0 && (VALUE) <= 31)\n-#define CONST_4BIT_IMM_P(VALUE) ((VALUE) >= -8 && (VALUE) <= 7)\n-#define CONST_4UBIT_IMM_P(VALUE) ((VALUE) >= 0 && (VALUE) <= 15)\n-#define CONST_3BIT_IMM_P(VALUE) ((VALUE) >= -4 && (VALUE) <= 3)\n-#define CONST_3UBIT_IMM_P(VALUE) ((VALUE) >= 0 && (VALUE) <= 7)\n-\n-#define CONSTRAINT_LEN(C, STR)\t\t\t\\\n-    ((C) == 'P' || (C) == 'M' || (C) == 'N' || (C) == 'q' ? 2\t\\\n-     : (C) == 'K' ? 3\t\t\t\t\\\n-     : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n-\n-#define CONST_OK_FOR_P(VALUE, STR)    \\\n-    ((STR)[1] == '0' ? (VALUE) == 0   \\\n-     : (STR)[1] == '1' ? (VALUE) == 1 \\\n-     : (STR)[1] == '2' ? (VALUE) == 2 \\\n-     : (STR)[1] == '3' ? (VALUE) == 3 \\\n-     : (STR)[1] == '4' ? (VALUE) == 4 \\\n-     : (STR)[1] == 'A' ? (VALUE) != MACFLAG_M && (VALUE) != MACFLAG_IS_M \\\n-     : (STR)[1] == 'B' ? (VALUE) == MACFLAG_M || (VALUE) == MACFLAG_IS_M \\\n-     : 0)\n-\n-#define CONST_OK_FOR_K(VALUE, STR)\t\t\t\\\n-    ((STR)[1] == 'u'\t\t\t\t\t\\\n-     ? ((STR)[2] == '3' ? CONST_3UBIT_IMM_P (VALUE)\t\\\n-\t: (STR)[2] == '4' ? CONST_4UBIT_IMM_P (VALUE)\t\\\n-\t: (STR)[2] == '5' ? CONST_5UBIT_IMM_P (VALUE)\t\\\n-\t: (STR)[2] == 'h' ? CONST_16UBIT_IMM_P (VALUE)\t\\\n-\t: 0)\t\t\t\t\t\t\\\n-     : (STR)[1] == 's'\t\t\t\t\t\\\n-     ? ((STR)[2] == '3' ? CONST_3BIT_IMM_P (VALUE)\t\\\n-\t: (STR)[2] == '4' ? CONST_4BIT_IMM_P (VALUE)\t\\\n-\t: (STR)[2] == '7' ? CONST_7BIT_IMM_P (VALUE)\t\\\n-\t: (STR)[2] == 'h' ? CONST_16BIT_IMM_P (VALUE)\t\\\n-\t: 0)\t\t\t\t\t\t\\\n-     : (STR)[1] == 'n'\t\t\t\t\t\\\n-     ? ((STR)[2] == '7' ? CONST_7NBIT_IMM_P (VALUE)\t\\\n-\t: 0)\t\t\t\t\t\t\\\n-     : (STR)[1] == 'N'\t\t\t\t\t\\\n-     ? ((STR)[2] == '7' ? CONST_7BIT_IMM_P (-(VALUE))\t\\\n-\t: 0)\t\t\t\t\t\t\\\n-     : 0)\n-\n-#define CONST_OK_FOR_M(VALUE, STR)\t\t\t\\\n-    ((STR)[1] == '1' ? (VALUE) == 255\t\t\t\\\n-     : (STR)[1] == '2' ? (VALUE) == 65535\t\t\\\n-     : 0)\n-\n-/* The letters I, J, K, L and M in a register constraint string\n-   can be used to stand for particular ranges of immediate operands.\n-   This macro defines what the ranges are.\n-   C is the letter, and VALUE is a constant value.\n-   Return 1 if VALUE is in the range specified by C. \n-   \n-   bfin constant operands are as follows\n-   \n-     J   2**N       5bit imm scaled\n-     Ks7 -64 .. 63  signed 7bit imm\n-     Ku5 0..31      unsigned 5bit imm\n-     Ks4 -8 .. 7    signed 4bit imm\n-     Ks3 -4 .. 3    signed 3bit imm\n-     Ku3 0 .. 7     unsigned 3bit imm\n-     Pn  0, 1, 2    constants 0, 1 or 2, corresponding to n\n-*/\n-#define CONST_OK_FOR_CONSTRAINT_P(VALUE, C, STR)\t\t\\\n-  ((C) == 'J' ? (log2constp (VALUE))\t\t\t\t\\\n-   : (C) == 'K' ? CONST_OK_FOR_K (VALUE, STR)\t\t\t\\\n-   : (C) == 'L' ? log2constp (~(VALUE))\t\t\t\t\\\n-   : (C) == 'M' ? CONST_OK_FOR_M (VALUE, STR)\t\t\t\\\n-   : (C) == 'P' ? CONST_OK_FOR_P (VALUE, STR)\t\t\t\\\n-   : 0)\n-\n-     /*Constant Output Formats */\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\\\n-  ((C) == 'H' ? 1 : 0)\n-\n-#define EXTRA_CONSTRAINT(VALUE, D) \\\n-    ((D) == 'Q' ? GET_CODE (VALUE) == SYMBOL_REF : 0)\n-\n /* Evaluates to true if A and B are mac flags that can be used\n    together in a single multiply insn.  That is the case if they are\n    both the same flag not involving M, or if one is a combination of"}, {"sha": "f535799b6248d8b8a6d98a4677bc0575edde5e14", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=9fdd7520f9094f83012c8a0617f9d5e80bdd2662", "patch": "@@ -258,7 +258,7 @@\n ;; Operand and operator predicates\n \n (include \"predicates.md\")\n-\n+(include \"constraints.md\")\n \f\n ;;; FRIO branches have been optimized for code density\n ;;; this comes at a slight cost of complexity when\n@@ -1018,7 +1018,7 @@\n   xops[7] = gen_rtx_REG (BImode, REG_CC);\n   if (!register_operand (xops[4], SImode)\n       && (GET_CODE (xops[4]) != CONST_INT\n-          || !CONST_OK_FOR_K (INTVAL (xops[4]), \"Ks7\")))\n+          || !satisfies_constraint_Ks7 (xops[4])))\n     xops[4] = force_reg (SImode, xops[4]);\n   if (!reg_overlap_mentioned_p (operands[0], operands[1])\n       && !reg_overlap_mentioned_p (operands[0], operands[2]))\n@@ -1027,7 +1027,7 @@\n   emit_insn (gen_movbisi (xops[6], xops[7]));\n   if (!register_operand (xops[5], SImode)\n       && (GET_CODE (xops[5]) != CONST_INT\n-          || !CONST_OK_FOR_K (INTVAL (xops[5]), \"Ks7\")))\n+          || !satisfies_constraint_Ks7 (xops[5])))\n     xops[5] = force_reg (SImode, xops[5]);\n   if (xops[5] != const0_rtx)\n     emit_insn (gen_addsi3 (xops[1], xops[3], xops[5]));"}, {"sha": "23ca2e4c825becf696b2f504fc896ed4260ed230", "filename": "gcc/config/bfin/predicates.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fpredicates.md?ref=9fdd7520f9094f83012c8a0617f9d5e80bdd2662", "patch": "@@ -34,7 +34,7 @@\n ;; if the constant would be cheap to load.\n (define_predicate \"highbits_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"log2constp (-INTVAL (op)) && !CONST_7BIT_IMM_P (INTVAL (op))\")))\n+       (match_test \"log2constp (-INTVAL (op)) && !satisfies_constraint_Ks7 (op)\")))\n \n ;; Return nonzero if OP is suitable as a right-hand side operand for an\n ;; andsi3 operation.\n@@ -99,7 +99,7 @@\n (define_predicate \"reg_or_7bit_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (and (match_code \"const_int\")\n-\t    (match_test \"CONST_7BIT_IMM_P (INTVAL (op))\"))))\n+\t    (match_test \"satisfies_constraint_Ks7 (op)\"))))\n \n ;; Return nonzero if OP is a register other than DREG and PREG.\n (define_predicate \"nondp_register_operand\"\n@@ -123,7 +123,7 @@\n (define_predicate \"reg_or_neg7bit_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (and (match_code \"const_int\")\n-\t    (match_test \"CONST_7BIT_IMM_P (-INTVAL (op))\"))))\n+\t    (match_test \"satisfies_constraint_KN7 (op)\"))))\n \n ;; Used for secondary reloads, this function returns 1 if OP is of the\n ;; form (plus (fp) (const_int))."}, {"sha": "a4117a34efb004474b91adb16c47253b515ab172", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fdd7520f9094f83012c8a0617f9d5e80bdd2662/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=9fdd7520f9094f83012c8a0617f9d5e80bdd2662", "patch": "@@ -2239,7 +2239,7 @@ range of 1 to 2047.\n \n @end table\n \n-@item Blackfin family---@file{config/bfin/bfin.h}\n+@item Blackfin family---@file{config/bfin/constraints.md}\n @table @code\n @item a\n P register"}]}