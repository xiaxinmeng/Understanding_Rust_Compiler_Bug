{"sha": "7b3d46133d45983d6f86bf6fe350981263f1f531", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzZDQ2MTMzZDQ1OTgzZDZmODZiZjZmZTM1MDk4MTI2M2YxZjUzMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2000-08-06T18:03:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-08-06T18:03:58Z"}, "message": "h8300.c (dosize): Rearrange code for conciseness.\n\n        * h8300.c (dosize): Rearrange code for conciseness.\n        (split_adds_subs): Likewise.\n\nFrom-SVN: r35527", "tree": {"sha": "c332b29a7c87560cb9a0a2d987f05c299ce2f881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c332b29a7c87560cb9a0a2d987f05c299ce2f881"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b3d46133d45983d6f86bf6fe350981263f1f531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3d46133d45983d6f86bf6fe350981263f1f531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b3d46133d45983d6f86bf6fe350981263f1f531", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b3d46133d45983d6f86bf6fe350981263f1f531/comments", "author": null, "committer": null, "parents": [{"sha": "e6fcb60dd918ee3419b78329721ed6bd22c4be25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fcb60dd918ee3419b78329721ed6bd22c4be25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6fcb60dd918ee3419b78329721ed6bd22c4be25"}], "stats": {"total": 80, "additions": 27, "deletions": 53}, "files": [{"sha": "19549e7c6d981c249b20e6a9c4145c11538ae81e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3d46133d45983d6f86bf6fe350981263f1f531/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3d46133d45983d6f86bf6fe350981263f1f531/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b3d46133d45983d6f86bf6fe350981263f1f531", "patch": "@@ -1,5 +1,8 @@\n 2000-08-06  Kazu Hirata  <kazu@hxi.com>\n \n+\t* h8300.c (dosize): Rearrange code for conciseness.\n+\t(split_adds_subs): Likewise.\n+\n \t* loop.c: Fix formatting.\n \n \t* dwarf2out.c: Fix formatting."}, {"sha": "dbaa7ffca60c1716270423ad11f814dcdeb0d572", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 24, "deletions": 53, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b3d46133d45983d6f86bf6fe350981263f1f531/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b3d46133d45983d6f86bf6fe350981263f1f531/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=7b3d46133d45983d6f86bf6fe350981263f1f531", "patch": "@@ -148,63 +148,35 @@ dosize (file, op, size)\n      const char *op;\n      unsigned int size;\n {\n-  /* On the h8300h and h8300s, for sizes <= 8 bytes it is as good or\n-     better to use adds/subs insns rather than add.l/sub.l\n-     with an immediate value.   */\n-  if (size > 4 && size <= 8 && (TARGET_H8300H || TARGET_H8300S))\n+  /* On the H8/300H and H8/S, for sizes <= 8 bytes, it is as good or\n+     better to use adds/subs insns rather than add.l/sub.l with an\n+     immediate value.\n+\n+     Also, on the H8/300, if we don't have a temporary to hold the\n+     size of the frame in the prologue, we simply emit a sequence of\n+     subs since this shouldn't happen often.  */\n+  if ((TARGET_H8300 && size <= 4)\n+      || ((TARGET_H8300H || TARGET_H8300S) && size <= 8)\n+      || (TARGET_H8300 && current_function_needs_context\n+\t  && strcmp (op, \"sub\")))\n     {\n-      /* Crank the size down to <= 4.  */\n-      fprintf (file, \"\\t%ss\\t#%d,sp\\n\", op, 4);\n-      size -= 4;\n-    }\n+      HOST_WIDE_INT amount;\n \n-  switch (size)\n-    {\n-    case 4:\n-      if (TARGET_H8300H || TARGET_H8300S)\n+      /* Try different amounts in descending order.  */\n+      for (amount = (TARGET_H8300H || TARGET_H8300S) ? 4 : 2;\n+\t   amount > 0;\n+\t   amount /= 2)\n \t{\n-\t  fprintf (file, \"\\t%ss\\t#%d,sp\\n\", op, 4);\n-\t  size = 0;\n-\t  break;\n+\t  for(; size >= amount; size -= amount)\n+\t    fprintf (file, \"\\t%ss\\t#%d,sp\\n\", op, amount);\n \t}\n-    case 3:\n-      fprintf (file, \"\\t%ss\\t#%d,sp\\n\", op, 2);\n-      size -= 2;\n-      /* Fall through...  */\n-    case 2:\n-    case 1:\n-      fprintf (file, \"\\t%ss\\t#%d,sp\\n\", op, size);\n-      size = 0;\n-      break;\n-    case 0:\n-      break;\n-    default:\n+    }\n+  else\n+    {\n       if (TARGET_H8300)\n-\t{\n-\t  if (current_function_needs_context\n-\t      && strcmp (op, \"sub\") == 0)\n-\t    {\n-\t      /* Egad.  We don't have a temporary to hold the\n-\t\t size of the frame in the prologue!  Just inline\n-\t\t the bastard since this shouldn't happen often.  */\n-\t      while (size >= 2)\n-\t\t{\n-\t\t  fprintf (file, \"\\tsubs\\t#2,sp\\n\");\n-\t\t  size -= 2;\n-\t\t}\n-\n-\t      if (size)\n-\t\tfprintf (file, \"\\tsubs\\t#1,sp\\n\");\n-\n-\t      size = 0;\n-\t    }\n-\t  else\n-\t    fprintf (file, \"\\tmov.w\\t#%d,r3\\n\\t%s.w\\tr3,sp\\n\", size, op);\n-\t}\n+\tfprintf (file, \"\\tmov.w\\t#%d,r3\\n\\t%s.w\\tr3,sp\\n\", size, op);\n       else\n-\tfprintf (file, \"\\t%s\\t#%d,sp\\n\", op, size);\n-      size = 0;\n-      break;\n+\tfprintf (file, \"\\t%s.l\\t#%d,sp\\n\", op, size);\n     }\n }\n \n@@ -640,11 +612,10 @@ split_adds_subs (mode, operands)\n        amount > 0;\n        amount /= 2)\n     {\n-      while (val >= amount)\n+      for(; val >= amount; val -= amount)\n \t{\n \t  rtx tmp = gen_rtx_PLUS (mode, reg, GEN_INT (sign * amount));\n \t  emit_insn (gen_rtx_SET (VOIDmode, reg, tmp));\n-\t  val -= amount;\n \t}\n     }\n "}]}