{"sha": "5b67c358c13568de2bb2e325a6a04ac3fed90de9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI2N2MzNThjMTM1NjhkZTJiYjJlMzI1YTZhMDRhYzNmZWQ5MGRlOQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-11-06T20:35:55Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-11-06T20:35:55Z"}, "message": "sh.md (adddi3): Remove empty constraints.\n\n\t* config/sh/sh.md (adddi3): Remove empty constraints.\n\tRemove can_create_pseudo_p and arith_reg_operand check.\n\t(adddi3_compact, subdi3_compact, *negdi2): Remove constraints.\n\tSplit before reload.\n\nFrom-SVN: r204477", "tree": {"sha": "10449ca113e54c02adc14cfb463dd033087a2d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10449ca113e54c02adc14cfb463dd033087a2d3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b67c358c13568de2bb2e325a6a04ac3fed90de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b67c358c13568de2bb2e325a6a04ac3fed90de9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b67c358c13568de2bb2e325a6a04ac3fed90de9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b67c358c13568de2bb2e325a6a04ac3fed90de9/comments", "author": null, "committer": null, "parents": [{"sha": "2a9369590c5fa9c587defeb1ab8701cbdc349811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9369590c5fa9c587defeb1ab8701cbdc349811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9369590c5fa9c587defeb1ab8701cbdc349811"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "d57f491bc00bc1fc16805f33d1b7ac91b5548766", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b67c358c13568de2bb2e325a6a04ac3fed90de9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b67c358c13568de2bb2e325a6a04ac3fed90de9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b67c358c13568de2bb2e325a6a04ac3fed90de9", "patch": "@@ -1,3 +1,10 @@\n+2013-11-06  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.md (adddi3): Remove empty constraints.\n+\tRemove can_create_pseudo_p and arith_reg_operand check.\n+\t(adddi3_compact, subdi3_compact, *negdi2): Remove constraints.\n+\tSplit before reload.\n+\n 2013-11-06  Jeff Law  <law@redhat.com>\n \t    Tom Tromey  <tromey@redhat.com>\n "}, {"sha": "bafb5822794ada36cde472f290854ad7cc08e4f8", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b67c358c13568de2bb2e325a6a04ac3fed90de9/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b67c358c13568de2bb2e325a6a04ac3fed90de9/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=5b67c358c13568de2bb2e325a6a04ac3fed90de9", "patch": "@@ -1750,15 +1750,13 @@\n ;; -------------------------------------------------------------------------\n \n (define_expand \"adddi3\"\n-  [(set (match_operand:DI 0 \"arith_reg_operand\" \"\")\n-\t(plus:DI (match_operand:DI 1 \"arith_reg_operand\" \"\")\n-\t\t (match_operand:DI 2 \"arith_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"arith_reg_operand\")\n+\t(plus:DI (match_operand:DI 1 \"arith_reg_operand\")\n+\t\t (match_operand:DI 2 \"arith_operand\")))]\n   \"\"\n {\n   if (TARGET_SH1)\n     {\n-      if (!can_create_pseudo_p () && ! arith_reg_operand (operands[2], DImode))\n-\tFAIL;\n       operands[2] = force_reg (DImode, operands[2]);\n       emit_insn (gen_adddi3_compact (operands[0], operands[1], operands[2]));\n       DONE;\n@@ -1797,22 +1795,22 @@\n    (set_attr \"highpart\" \"ignore\")])\n \n (define_insn_and_split \"adddi3_compact\"\n-  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=&r\")\n-\t(plus:DI (match_operand:DI 1 \"arith_reg_operand\" \"%0\")\n-\t\t (match_operand:DI 2 \"arith_reg_operand\" \"r\")))\n+  [(set (match_operand:DI 0 \"arith_reg_dest\")\n+\t(plus:DI (match_operand:DI 1 \"arith_reg_operand\")\n+\t\t (match_operand:DI 2 \"arith_reg_operand\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& can_create_pseudo_p ()\"\n   [(const_int 0)]\n {\n-  rtx high0 = gen_highpart (SImode, operands[0]);\n-  rtx high2 = gen_highpart (SImode, operands[2]);\n-  rtx low0 = gen_lowpart (SImode, operands[0]);\n-\n   emit_insn (gen_clrt ());\n-  emit_insn (gen_addc (low0, low0, gen_lowpart (SImode, operands[2])));\n-  emit_insn (gen_addc (high0, high0, high2));\n+  emit_insn (gen_addc (gen_lowpart (SImode, operands[0]),\n+\t\t       gen_lowpart (SImode, operands[1]),\n+\t\t       gen_lowpart (SImode, operands[2])));\n+  emit_insn (gen_addc (gen_highpart (SImode, operands[0]),\n+\t\t       gen_highpart (SImode, operands[1]),\n+\t\t       gen_highpart (SImode, operands[2])));\n   DONE;\n })\n \n@@ -2111,22 +2109,22 @@\n    (set_attr \"highpart\" \"ignore\")])\n \n (define_insn_and_split \"subdi3_compact\"\n-  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=&r\")\n-\t(minus:DI (match_operand:DI 1 \"arith_reg_operand\" \"0\")\n-\t\t (match_operand:DI 2 \"arith_reg_operand\" \"r\")))\n+  [(set (match_operand:DI 0 \"arith_reg_dest\")\n+\t(minus:DI (match_operand:DI 1 \"arith_reg_operand\")\n+\t\t (match_operand:DI 2 \"arith_reg_operand\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& can_create_pseudo_p ()\"\n   [(const_int 0)]\n {\n-  rtx high0 = gen_highpart (SImode, operands[0]);\n-  rtx high2 = gen_highpart (SImode, operands[2]);\n-  rtx low0 = gen_lowpart (SImode, operands[0]);\n-\n   emit_insn (gen_clrt ());\n-  emit_insn (gen_subc (low0, low0, gen_lowpart (SImode, operands[2])));\n-  emit_insn (gen_subc (high0, high0, high2));\n+  emit_insn (gen_subc (gen_lowpart (SImode, operands[0]),\n+\t\t       gen_lowpart (SImode, operands[1]),\n+\t\t       gen_lowpart (SImode, operands[2])));\n+  emit_insn (gen_subc (gen_highpart (SImode, operands[0]),\n+\t\t       gen_highpart (SImode, operands[1]),\n+\t\t       gen_highpart (SImode, operands[2])));\n   DONE;\n })\n \n@@ -5570,21 +5568,21 @@ label:\n   \"sub\tr63, %1, %0\"\n   [(set_attr \"type\" \"arith_media\")])\n \n-;; Don't expand immediately because otherwise neg:DI (abs:DI) will not be\n-;; combined.\n+;; Don't split into individual negc insns immediately so that neg:DI (abs:DI)\n+;; can be combined.\n (define_expand \"negdi2\"\n   [(parallel [(set (match_operand:DI 0 \"arith_reg_dest\")\n \t\t   (neg:DI (match_operand:DI 1 \"arith_reg_operand\")))\n \t      (clobber (reg:SI T_REG))])]\n   \"TARGET_SH1\")\n \n (define_insn_and_split \"*negdi2\"\n-  [(set (match_operand:DI 0 \"arith_reg_dest\" \"=&r\")\n-\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\" \"r\")))\n+  [(set (match_operand:DI 0 \"arith_reg_dest\")\n+\t(neg:DI (match_operand:DI 1 \"arith_reg_operand\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n-  \"&& reload_completed\"\n+  \"&& can_create_pseudo_p ()\"\n   [(const_int 0)]\n {\n   emit_insn (gen_clrt ());"}]}