{"sha": "671231d26ed16d187281ff215d4c9e5377cc2d43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcxMjMxZDI2ZWQxNmQxODcyODFmZjIxNWQ0YzllNTM3N2NjMmQ0Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2007-08-31T10:23:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-31T10:23:10Z"}, "message": "layout.adb (Layout_Type): Use Underlying_Type to determine whether an access type points to an...\n\n2007-08-31  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n\n\t* layout.adb (Layout_Type): Use Underlying_Type to determine whether an\n\taccess type points to an unconstrained array.\n\nFrom-SVN: r127974", "tree": {"sha": "b9472f8c83a8a354755dab59dd69a3b698afae53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9472f8c83a8a354755dab59dd69a3b698afae53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/671231d26ed16d187281ff215d4c9e5377cc2d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671231d26ed16d187281ff215d4c9e5377cc2d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/671231d26ed16d187281ff215d4c9e5377cc2d43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671231d26ed16d187281ff215d4c9e5377cc2d43/comments", "author": null, "committer": null, "parents": [{"sha": "25859971802e6c24a568b4370221e2112ea25953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25859971802e6c24a568b4370221e2112ea25953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25859971802e6c24a568b4370221e2112ea25953"}], "stats": {"total": 87, "additions": 38, "deletions": 49}, "files": [{"sha": "e0bb7fcb614a1a378547d04ae5637701cdfdf192", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 38, "deletions": 49, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671231d26ed16d187281ff215d4c9e5377cc2d43/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671231d26ed16d187281ff215d4c9e5377cc2d43/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=671231d26ed16d187281ff215d4c9e5377cc2d43", "patch": "@@ -2342,67 +2342,56 @@ package body Layout is\n          --  a fat pointer is used (pointer-to-unconstrained array case),\n          --  twice the address size to accommodate a fat pointer.\n \n-         else\n-            declare\n-               Desig : Entity_Id := Designated_Type (E);\n+         elsif Present (Underlying_Type (Designated_Type (E)))\n+            and then Is_Array_Type (Underlying_Type (Designated_Type (E)))\n+            and then not Is_Constrained (Underlying_Type (Designated_Type (E)))\n+            and then not Has_Completion_In_Body (Underlying_Type\n+                                                 (Designated_Type (E)))\n+            and then not Debug_Flag_6\n+         then\n+            Init_Size (E, 2 * System_Address_Size);\n \n-            begin\n-               if Is_Private_Type (Desig)\n-                 and then Present (Full_View (Desig))\n-               then\n-                  Desig := Full_View (Desig);\n-               end if;\n+            --  Check for bad convention set\n \n-               if Is_Array_Type (Desig)\n-                 and then not Is_Constrained (Desig)\n-                 and then not Has_Completion_In_Body (Desig)\n-                 and then not Debug_Flag_6\n-               then\n-                  Init_Size (E, 2 * System_Address_Size);\n-\n-                  --  Check for bad convention set\n-\n-                  if Warn_On_Export_Import\n-                    and then\n-                      (Convention (E) = Convention_C\n-                         or else\n-                       Convention (E) = Convention_CPP)\n-                  then\n-                     Error_Msg_N\n-                       (\"?this access type does not \" &\n-                        \"correspond to C pointer\", E);\n-                  end if;\n+            if Warn_On_Export_Import\n+              and then\n+                (Convention (E) = Convention_C\n+                   or else\n+                 Convention (E) = Convention_CPP)\n+            then\n+               Error_Msg_N\n+                 (\"?this access type does not correspond to C pointer\", E);\n+            end if;\n \n-               --  When the target is AAMP, access-to-subprogram types are fat\n-               --  pointers consisting of the subprogram address and a static\n-               --  link (with the exception of library-level access types,\n-               --  where a simple subprogram address is used).\n+         --  When the target is AAMP, access-to-subprogram types are fat\n+         --  pointers consisting of the subprogram address and a static\n+         --  link (with the exception of library-level access types,\n+         --  where a simple subprogram address is used).\n \n-               elsif AAMP_On_Target\n-                 and then\n-                   (Ekind (E) = E_Anonymous_Access_Subprogram_Type\n-                     or else (Ekind (E) = E_Access_Subprogram_Type\n-                               and then Present (Enclosing_Subprogram (E))))\n-               then\n-                  Init_Size (E, 2 * System_Address_Size);\n+         elsif AAMP_On_Target\n+           and then\n+             (Ekind (E) = E_Anonymous_Access_Subprogram_Type\n+               or else (Ekind (E) = E_Access_Subprogram_Type\n+                         and then Present (Enclosing_Subprogram (E))))\n+         then\n+            Init_Size (E, 2 * System_Address_Size);\n \n-               else\n-                  Init_Size (E, System_Address_Size);\n-               end if;\n-            end;\n+         else\n+            Init_Size (E, System_Address_Size);\n          end if;\n \n          --  On VMS, reset size to 32 for convention C access type if no\n          --  explicit size clause is given and the default size is 64. Really\n          --  we do not know the size, since depending on options for the VMS\n-         --  compiler, the size of a pointer type can be 32 or 64, but choosing\n-         --  32 as the default improves compatibility with legacy VMS code.\n+         --  compiler, the size of a pointer type can be 32 or 64, but\n+         --  choosing 32 as the default improves compatibility with legacy\n+         --  VMS code.\n \n          --  Note: we do not use Has_Size_Clause in the test below, because we\n-         --  want to catch the case of a derived type inheriting a size clause.\n-         --  We want to consider this to be an explicit size clause for this\n-         --  purpose, since it would be weird not to inherit the size in this\n-         --  case.\n+         --  want to catch the case of a derived type inheriting a size\n+         --  clause.  We want to consider this to be an explicit size clause\n+         --  for this purpose, since it would be weird not to inherit the size\n+         --  in this case.\n \n          if OpenVMS_On_Target\n            and then (Convention (E) = Convention_C"}]}