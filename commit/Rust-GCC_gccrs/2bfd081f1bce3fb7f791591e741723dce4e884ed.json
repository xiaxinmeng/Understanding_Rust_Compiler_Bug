{"sha": "2bfd081f1bce3fb7f791591e741723dce4e884ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJmZDA4MWYxYmNlM2ZiN2Y3OTE1OTFlNzQxNzIzZGNlNGU4ODRlZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-22T19:35:35Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-22T19:40:33Z"}, "message": "c++: Cross-module partial specialiations [PR 99480]\n\nWe were not correctly handling cross-module redeclarations of\npartial-specializations.  They have their own TEMPLATE_DECL, which we\nneed to locate.  I had a FIXME there about this case.  Guess it's\nfixed now.\n\n\tPR c++/99480\n\tgcc/cp/\n\t* module.cc (depset::hash::make_dependency): Propagate flags for\n\tpartial specialization.\n\t(module_may_redeclare): Handle partial specialization.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99480_a.H: New.\n\t* g++.dg/modules/pr99480_b.H: New.", "tree": {"sha": "532930ceb4c3ee75d3c0c1cf0433b87d86616f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/532930ceb4c3ee75d3c0c1cf0433b87d86616f59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bfd081f1bce3fb7f791591e741723dce4e884ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfd081f1bce3fb7f791591e741723dce4e884ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfd081f1bce3fb7f791591e741723dce4e884ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfd081f1bce3fb7f791591e741723dce4e884ed/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f2dc441b1954736cc61e3f97687cd23d5586c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f2dc441b1954736cc61e3f97687cd23d5586c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f2dc441b1954736cc61e3f97687cd23d5586c5"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "e4da5557f9e614b9549752bbd669e2b163c0d610", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfd081f1bce3fb7f791591e741723dce4e884ed/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfd081f1bce3fb7f791591e741723dce4e884ed/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=2bfd081f1bce3fb7f791591e741723dce4e884ed", "patch": "@@ -12444,6 +12444,11 @@ depset::hash::make_dependency (tree decl, entity_kind ek)\n \n \t      *slot = redirect;\n \n+\t      if (DECL_LANG_SPECIFIC (decl))\n+\t\t{\n+\t\t  DECL_MODULE_IMPORT_P (partial) = DECL_MODULE_IMPORT_P (decl);\n+\t\t  DECL_MODULE_PURVIEW_P (partial) = DECL_MODULE_PURVIEW_P (decl);\n+\t\t}\n \t      depset *tmpl_dep = make_dependency (partial, EK_PARTIAL);\n \t      gcc_checking_assert (tmpl_dep->get_entity_kind () == EK_PARTIAL);\n \n@@ -18429,13 +18434,20 @@ module_may_redeclare (tree decl)\n       if (tree ti = node_template_info (decl, use_tpl))\n \t{\n \t  tree tmpl = TI_TEMPLATE (ti);\n-\t  if (DECL_TEMPLATE_RESULT (tmpl) == decl)\n+\t  if (use_tpl == 2)\n+\t    {\n+\t      /* A partial specialization.  Find that specialization's\n+\t\t template_decl.  */\n+\t      for (tree list = DECL_TEMPLATE_SPECIALIZATIONS (tmpl);\n+\t\t   list; list = TREE_CHAIN (list))\n+\t\tif (DECL_TEMPLATE_RESULT (TREE_VALUE (list)) == decl)\n+\t\t  {\n+\t\t    decl = TREE_VALUE (list);\n+\t\t    break;\n+\t\t}\n+\t    }\n+\t  else if (DECL_TEMPLATE_RESULT (tmpl) == decl)\n \t    decl = tmpl;\n-\t  // FIXME: What about partial specializations?  We need to\n-\t  // look at the specialization list in that case.  Unless our\n-\t  // caller's given us the right thing.  An alternative would\n-\t  // be to put both the template and the result into the\n-\t  // entity hash, but that seems expensive?\n \t}\n       unsigned index = import_entity_index (decl);\n       them = import_entity_module (index);"}, {"sha": "8f48493c491d503e40fd2c1bef6ad58f8f65ec98", "filename": "gcc/testsuite/g++.dg/modules/pr99480_a.H", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfd081f1bce3fb7f791591e741723dce4e884ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99480_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfd081f1bce3fb7f791591e741723dce4e884ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99480_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99480_a.H?ref=2bfd081f1bce3fb7f791591e741723dce4e884ed", "patch": "@@ -0,0 +1,10 @@\n+// PR 99480 ICE on instantiation definition\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+template<typename _Tp>\n+struct atomic;\n+\n+template<typename _Tp>\n+struct atomic<_Tp*>;\n+\n+"}, {"sha": "ea8800d67b0513cb77766003c47475b10a6b3f8b", "filename": "gcc/testsuite/g++.dg/modules/pr99480_b.H", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bfd081f1bce3fb7f791591e741723dce4e884ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99480_b.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bfd081f1bce3fb7f791591e741723dce4e884ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99480_b.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99480_b.H?ref=2bfd081f1bce3fb7f791591e741723dce4e884ed", "patch": "@@ -0,0 +1,9 @@\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+\n+import  \"pr99480_a.H\";\n+\n+template<typename _Tp>\n+struct atomic<_Tp*>\n+{\n+};"}]}