{"sha": "1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMyNmQ4ZmQ4NDA0OWVhMGM1N2E5ZDVhYmEzOGJjMmMwZTU1MmViYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-01-06T21:23:00Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-01-06T21:23:00Z"}, "message": "locale_facets.h (messages): Move ctor, dtor definitions to..\n\n\n2003-01-06  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.h (messages): Move ctor, dtor\n\tdefinitions to..\n\t(__timepunct): Same.\n\t* config/locale/gnu/messages_members.h (messages): Add dtor, ctor\n\tdefinitions. Conditionalize for GNU systems.\n\t* config/locale/generic/messages_members.h (messages): Add dtor, ctor\n\tdefinitions.\n\t* config/locale/gnu/time_members.h (messages): New. Add dtor, ctor\n\tdefinitions. Conditionalize for GNU systems.\n\t* config/locale/generic/time_members.h (messages): New. Add dtor, ctor\n\tdefinitions.\n\t* include/bits/localefwd.h (locale::facet::_S_c_name): Add.\n\t* src/locale.cc: Define.\n\t* src/localename.cc (locale::_Impl::_Impl(facet**, size_t, bool):\n\tUse it.\n\t* config/locale/gnu/time_members.h: Use it.\n\t* config/locale/gnu/messages_members.h: Use it.\n\t* config/linker-map.gnu: Add locale::facets details.\n\t* include/Makefile.am (target_headers_extra): Add time_members.h.\n\t* include/Makefile.in: Regenerate.\n\t* acinclude.m4: Export CTIME_H.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regnerate.\n\nFrom-SVN: r60952", "tree": {"sha": "71c8f8049aff449e609eb5a0b765c2a08db34e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71c8f8049aff449e609eb5a0b765c2a08db34e1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/comments", "author": null, "committer": null, "parents": [{"sha": "44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f9a8e4bbce7121df8d21aa028344d8b4ffc2cb"}], "stats": {"total": 3053, "additions": 1683, "deletions": 1370}, "files": [{"sha": "02e5f2afe52fe2087733f301411945dd6389b844", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -1,3 +1,29 @@\n+2003-01-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.h (messages): Move ctor, dtor\n+\tdefinitions to..\n+\t(__timepunct): Same.\n+\t* config/locale/gnu/messages_members.h (messages): Add dtor, ctor\n+\tdefinitions. Conditionalize for GNU systems.\n+\t* config/locale/generic/messages_members.h (messages): Add dtor, ctor\n+\tdefinitions.\n+\t* config/locale/gnu/time_members.h (messages): New. Add dtor, ctor\n+\tdefinitions. Conditionalize for GNU systems.\n+\t* config/locale/generic/time_members.h (messages): New. Add dtor, ctor\n+\tdefinitions.\n+\t* include/bits/localefwd.h (locale::facet::_S_c_name): Add.\n+\t* src/locale.cc: Define.\n+\t* src/localename.cc (locale::_Impl::_Impl(facet**, size_t, bool):\n+\tUse it.\n+\t* config/locale/gnu/time_members.h: Use it.\n+\t* config/locale/gnu/messages_members.h: Use it.\n+\t* config/linker-map.gnu: Add locale::facets details.\t\n+\t* include/Makefile.am (target_headers_extra): Add time_members.h.\n+\t* include/Makefile.in: Regenerate.\n+\t* acinclude.m4: Export CTIME_H.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regnerate.\n+\n 2003-01-06  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* src/codecvt.cc"}, {"sha": "6d5b3adbce44ed4dc69398159b7209354b5be458", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -85,6 +85,7 @@ CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n CTIME_CC = @CTIME_CC@\n+CTIME_H = @CTIME_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}, {"sha": "ab2a99febf131ec0a74a70a0e1e3431f9e85bc0a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -1272,6 +1272,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/generic/messages_members.cc\n       CMONEY_CC=config/locale/generic/monetary_members.cc\n       CNUMERIC_CC=config/locale/generic/numeric_members.cc\n+      CTIME_H=config/locale/generic/time_members.h\n       CTIME_CC=config/locale/generic/time_members.cc\n       CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n       ;;\n@@ -1306,6 +1307,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/gnu/messages_members.cc\n       CMONEY_CC=config/locale/gnu/monetary_members.cc\n       CNUMERIC_CC=config/locale/gnu/numeric_members.cc\n+      CTIME_H=config/locale/gnu/time_members.h\n       CTIME_CC=config/locale/gnu/time_members.cc\n       CLOCALE_INTERNAL_H=config/locale/gnu/c++locale_internal.h\n       ;;\n@@ -1322,6 +1324,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/ieee_1003.1-2001/messages_members.cc\n       CMONEY_CC=config/locale/generic/monetary_members.cc\n       CNUMERIC_CC=config/locale/generic/numeric_members.cc\n+      CTIME_H=config/locale/generic/time_members.h\n       CTIME_CC=config/locale/generic/time_members.cc\n       CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n       ;;\n@@ -1346,6 +1349,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_SUBST(CMESSAGES_CC)\n   AC_SUBST(CMONEY_CC)\n   AC_SUBST(CNUMERIC_CC)\n+  AC_SUBST(CTIME_H)\n   AC_SUBST(CTIME_CC)\n   AC_SUBST(CLOCALE_CC)\n   AC_SUBST(CLOCALE_INTERNAL_H)"}, {"sha": "d1c8c9ad389f43cca1ea50aa10021f671a3c6b71", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 9, "deletions": 37, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -1,4 +1,4 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4-p6\n+dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n \n dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n@@ -1284,6 +1284,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/generic/messages_members.cc\n       CMONEY_CC=config/locale/generic/monetary_members.cc\n       CNUMERIC_CC=config/locale/generic/numeric_members.cc\n+      CTIME_H=config/locale/generic/time_members.h\n       CTIME_CC=config/locale/generic/time_members.cc\n       CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n       ;;\n@@ -1318,6 +1319,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/gnu/messages_members.cc\n       CMONEY_CC=config/locale/gnu/monetary_members.cc\n       CNUMERIC_CC=config/locale/gnu/numeric_members.cc\n+      CTIME_H=config/locale/gnu/time_members.h\n       CTIME_CC=config/locale/gnu/time_members.cc\n       CLOCALE_INTERNAL_H=config/locale/gnu/c++locale_internal.h\n       ;;\n@@ -1334,6 +1336,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMESSAGES_CC=config/locale/ieee_1003.1-2001/messages_members.cc\n       CMONEY_CC=config/locale/generic/monetary_members.cc\n       CNUMERIC_CC=config/locale/generic/numeric_members.cc\n+      CTIME_H=config/locale/generic/time_members.h\n       CTIME_CC=config/locale/generic/time_members.cc\n       CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n       ;;\n@@ -1358,6 +1361,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_SUBST(CMESSAGES_CC)\n   AC_SUBST(CMONEY_CC)\n   AC_SUBST(CNUMERIC_CC)\n+  AC_SUBST(CTIME_H)\n   AC_SUBST(CTIME_CC)\n   AC_SUBST(CLOCALE_CC)\n   AC_SUBST(CLOCALE_INTERNAL_H)\n@@ -2303,16 +2307,14 @@ AC_MSG_RESULT($enable_symvers)\n ])\n \n \n-# isc-posix.m4 serial 2 (gettext-0.11.2)\n+# isc-posix.m4 serial 1 (gettext-0.10.40)\n dnl Copyright (C) 1995-2002 Free Software Foundation, Inc.\n dnl This file is free software, distributed under the terms of the GNU\n dnl General Public License.  As a special exception to the GNU General\n dnl Public License, this file may be distributed as part of a program\n dnl that contains a configuration script generated by Autoconf, under\n dnl the same distribution terms as the rest of that program.\n \n-# This file is not needed with autoconf-2.53 and newer.  Remove it in 2005.\n-\n # This test replaces the one in autoconf.\n # Currently this macro should have the same name as the autoconf macro\n # because gettext's gettext.m4 (distributed in the automake package)\n@@ -2373,8 +2375,7 @@ dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n AC_DEFUN([AM_INIT_AUTOMAKE],\n-[AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\n-AC_REQUIRE([AC_PROG_INSTALL])\n+[AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n VERSION=[$2]\n@@ -2390,42 +2391,13 @@ AC_REQUIRE([AM_SANITY_CHECK])\n AC_REQUIRE([AC_ARG_PROGRAM])\n dnl FIXME This is truly gross.\n missing_dir=`cd $ac_aux_dir && pwd`\n-AM_MISSING_PROG(ACLOCAL, aclocal-${am__api_version}, $missing_dir)\n+AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)\n AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)\n-AM_MISSING_PROG(AUTOMAKE, automake-${am__api_version}, $missing_dir)\n+AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)\n AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)\n AM_MISSING_PROG(MAKEINFO, makeinfo, $missing_dir)\n AC_REQUIRE([AC_PROG_MAKE_SET])])\n \n-# Copyright 2002  Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2, or (at your option)\n-# any later version.\n-\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-\n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA\n-\n-# AM_AUTOMAKE_VERSION(VERSION)\n-# ----------------------------\n-# Automake X.Y traces this macro to ensure aclocal.m4 has been\n-# generated from the m4 files accompanying Automake X.Y.\n-AC_DEFUN([AM_AUTOMAKE_VERSION],[am__api_version=\"1.4\"])\n-\n-# AM_SET_CURRENT_AUTOMAKE_VERSION\n-# -------------------------------\n-# Call AM_AUTOMAKE_VERSION so it can be traced.\n-# This function is AC_REQUIREd by AC_INIT_AUTOMAKE.\n-AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n-\t [AM_AUTOMAKE_VERSION([1.4-p6])])\n-\n #\n # Check to make sure that the build environment is sane.\n #"}, {"sha": "3aec49b328a49747e8735950ae4a448147d4d2e9", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -50,7 +50,14 @@ GLIBCPP_3.2 {\n       std::[A-Zd-k]*;\n       std::length_error*;\n       std::logic_error*;\n-      std::locale::[A-Za-z]*;\n+      std::locale::[A-Za-e]*;\n+      std::locale::facet::[A-Za-z]*;\n+      std::locale::facet::_M*;\n+      std::locale::facet::_S_c_locale;\n+      std::locale::facet::_S_clone_c_locale*;\n+      std::locale::facet::_S_create_c_locale*;\n+      std::locale::facet::_S_destroy_c_locale*;\n+      std::locale::[A-Zg-z]*;\n       std::locale::_[A-Ra-z]*;\n       std::locale::_S_classic;\n       std::locale::_S_global;\n@@ -99,6 +106,9 @@ GLIBCPP_3.2 {\n \n     # std::locale destructors\n     _ZNSt6localeD*;\n+\t\n+    # std::locale::facet destructors\n+    _ZNSt6locale5facetD*;\n \t \n     # std::codecvt<char> members.\n     _ZNKSt7codecvtIcc11__mbstate_tE*;\n@@ -204,8 +214,6 @@ GLIBCPP_3.2.1 {\n   _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_;\n   _ZStplIwSt11char_traitsIwESaIwEESbIT_T0_T1_ERKS6_S8_;\n \n-  _ZNSt24__default_alloc_templateILb1ELi0EE12_S_force_newE;\n-\n   # stub functions from libmath\n   sinf;\n   sinl;\n@@ -242,6 +250,13 @@ GLIBCPP_3.2.1 {\n \n } GLIBCPP_3.2;\n \n+\n+GLIBCPP_3.2.2 {\n+\n+  _ZNSt24__default_alloc_templateILb1ELi0EE12_S_force_newE;\n+\n+} GLIBCPP_3.2.1;\n+\n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.2 {\n "}, {"sha": "e8a86560d76b32a7e0c8afcb683601c63c08ecbb", "filename": "libstdc++-v3/config/locale/generic/messages_members.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fmessages_members.h?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -1,6 +1,6 @@\n // std::messages implementation details, generic version -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,13 +34,27 @@\n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n   // Non-virtual member functions.\n+  template<typename _CharT>\n+     messages<_CharT>::messages(size_t __refs)\n+     : locale::facet(__refs)\n+     { _M_c_locale_messages = _S_c_locale; }\n+\n+  template<typename _CharT>\n+     messages<_CharT>::messages(__c_locale __cloc, const char*, size_t __refs) \n+     : locale::facet(__refs)\n+     { _M_c_locale_messages = _S_c_locale; }\n+\n   template<typename _CharT>\n     typename messages<_CharT>::catalog \n     messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc, \n \t\t\t   const char*) const\n     { return this->do_open(__s, __loc); }\n \n   // Virtual member functions.\n+  template<typename _CharT>\n+    messages<_CharT>::~messages()\n+    { _S_destroy_c_locale(_M_c_locale_messages); }\n+\n   template<typename _CharT>\n     typename messages<_CharT>::catalog \n     messages<_CharT>::do_open(const basic_string<char>&, const locale&) const\n@@ -56,3 +70,12 @@\n     void    \n     messages<_CharT>::do_close(catalog) const \n     { }\n+\n+   // messages_byname\n+   template<typename _CharT>\n+     messages_byname<_CharT>::messages_byname(const char* __s, size_t __refs)\n+     : messages<_CharT>(__refs) \n+     { \n+       _S_destroy_c_locale(_M_c_locale_messages);\n+       _S_create_c_locale(_M_c_locale_messages, __s); \n+     }"}, {"sha": "df43f03a53d6a7f286385badc413dc5ec8731918", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -1,4 +1,4 @@\n-// std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n+// std::time_get, std::time_put implementation, generic version -*- C++ -*-\n \n // Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //"}, {"sha": "03c31d1797ea6424c8796ba35ec7d2a2ba68680c", "filename": "libstdc++-v3/config/locale/generic/time_members.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.h?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -0,0 +1,61 @@\n+// std::time_get, std::time_put implementation, generic version -*- C++ -*-\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.5.1.2 - time_get functions\n+// ISO C++ 14882: 22.2.5.3.2 - time_put functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+  template<typename _CharT>\n+    __timepunct<_CharT>::__timepunct(size_t __refs) \n+    : locale::facet(__refs)\n+    { \n+      _M_name_timepunct = _S_c_name;\n+      _M_initialize_timepunct(); \n+    }\n+\n+  template<typename _CharT>\n+    __timepunct<_CharT>::__timepunct(__c_locale __cloc, const char* __s, \n+\t\t\t\t     size_t __refs) \n+    : locale::facet(__refs)\n+    { \n+      _M_name_timepunct = new char[strlen(__s) + 1];\n+      strcpy(_M_name_timepunct, __s);\n+      _M_initialize_timepunct(__cloc); \n+    }\n+\n+  template<typename _CharT>\n+    __timepunct<_CharT>::~__timepunct()\n+    { \n+      if (_S_c_name != _M_name_timepunct)\n+\tdelete [] _M_name_timepunct;\n+      _S_destroy_c_locale(_M_c_locale_timepunct); \n+    }"}, {"sha": "c8d62ade4cec58dba8b5b9686aa495d08ab4f957", "filename": "libstdc++-v3/config/locale/gnu/messages_members.h", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.h?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -1,6 +1,6 @@\n // std::messages implementation details, GNU version -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,12 +28,35 @@\n // the GNU General Public License.\n \n //\n-// ISO C++ 14882: 22.2.7.1.2  messages virtual functions\n+// ISO C++ 14882: 22.2.7.1.2  messages functions\n //\n \n // Written by Benjamin Kosnik <bkoz@redhat.com>\n \n   // Non-virtual member functions.\n+  template<typename _CharT>\n+     messages<_CharT>::messages(size_t __refs)\n+     : locale::facet(__refs)\n+     {  \n+#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n+       _M_name_messages = _S_c_name;\n+#endif\n+       _M_c_locale_messages = _S_c_locale; \n+     }\n+\n+  template<typename _CharT>\n+     messages<_CharT>::messages(__c_locale __cloc, \n+\t\t\t\tconst char* __s __attribute__ ((__unused__)), \n+\t\t\t\tsize_t __refs) \n+     : locale::facet(__refs)\n+     {\n+#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)) \n+       _M_name_messages = new char[strlen(__s) + 1];\n+       strcpy(_M_name_messages, __s);\n+#endif\n+       _M_c_locale_messages = _S_clone_c_locale(__cloc); \n+     }\n+\n   template<typename _CharT>\n     typename messages<_CharT>::catalog \n     messages<_CharT>::open(const basic_string<char>& __s, const locale& __loc, \n@@ -43,6 +66,17 @@\n       return this->do_open(__s, __loc); \n     }\n \n+  // Virtual member functions.\n+  template<typename _CharT>\n+    messages<_CharT>::~messages()\n+    { \n+#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n+      if (_S_c_name != _M_name_messages)\n+\tdelete [] _M_name_messages;\n+#endif\n+      _S_destroy_c_locale(_M_c_locale_messages); \n+    }\n+\n   template<typename _CharT>\n     typename messages<_CharT>::catalog \n     messages<_CharT>::do_open(const basic_string<char>& __s, \n@@ -58,3 +92,18 @@\n     void    \n     messages<_CharT>::do_close(catalog) const \n     { }\n+\n+   // messages_byname\n+   template<typename _CharT>\n+     messages_byname<_CharT>::messages_byname(const char* __s, size_t __refs)\n+     : messages<_CharT>(__refs) \n+     { \n+#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n+       if (_S_c_name != _M_name_messages)\n+\t delete [] _M_name_messages;\n+       _M_name_messages = new char[strlen(__s) + 1];\n+       strcpy(_M_name_messages, __s);\n+#endif\n+       _S_destroy_c_locale(_M_c_locale_messages);\n+       _S_create_c_locale(_M_c_locale_messages, __s); \n+     }"}, {"sha": "8ef7a07107c10fbb1ca7663d5a5aa53c6b92328d", "filename": "libstdc++-v3/config/locale/gnu/time_members.h", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.h?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -0,0 +1,68 @@\n+// std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.5.1.2 - time_get functions\n+// ISO C++ 14882: 22.2.5.3.2 - time_put functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+  template<typename _CharT>\n+    __timepunct<_CharT>::__timepunct(size_t __refs) \n+    : locale::facet(__refs)\n+    { \n+#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n+      _M_name_timepunct = _S_c_name;\n+#endif\n+      _M_initialize_timepunct(); \n+    }\n+\n+  template<typename _CharT>\n+    __timepunct<_CharT>::__timepunct(__c_locale __cloc, \n+\t\t\t\t const char* __s __attribute__ ((__unused__)), \n+\t\t\t\t     size_t __refs) \n+    : locale::facet(__refs)\n+    { \n+#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n+      _M_name_timepunct = new char[strlen(__s) + 1];\n+      strcpy(_M_name_timepunct, __s);\n+#endif\n+      _M_initialize_timepunct(__cloc); \n+    }\n+\n+  template<typename _CharT>\n+    __timepunct<_CharT>::~__timepunct()\n+    { \n+#if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2))\n+      if (_S_c_name != _M_name_timepunct)\n+\tdelete [] _M_name_timepunct;\n+#endif\n+      _S_destroy_c_locale(_M_c_locale_timepunct); \n+    }"}, {"sha": "05bd4e130e433e600be80cafe9f2d67c918e2298", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1252, "deletions": 1235, "changes": 2487, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb"}, {"sha": "08d59501e86a109a1af98d4f9be09c916ec44099", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -324,6 +324,7 @@ target_headers_extra = \\\n \t${target_builddir}/c++io.h \\\n \t${target_builddir}/c++locale.h \\\n \t${target_builddir}/messages_members.h \\\n+\t${target_builddir}/time_members.h \\\n \t${target_builddir}/codecvt_specializations.h\n \n thread_target_headers = \\\n@@ -414,6 +415,7 @@ stamp-target: ${target_headers} ${target_headers_noinst} stamp-${target_alias}\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CTIME_H@ time_members.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n \t  echo `date` > stamp-target ; \\\n \tfi"}, {"sha": "98e424031ca5204c6893a3d4e1fc55f3c3d0035b", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -85,6 +85,7 @@ CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n CTIME_CC = @CTIME_CC@\n+CTIME_H = @CTIME_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -439,6 +440,7 @@ target_headers_extra = \\\n \t${target_builddir}/c++io.h \\\n \t${target_builddir}/c++locale.h \\\n \t${target_builddir}/messages_members.h \\\n+\t${target_builddir}/time_members.h \\\n \t${target_builddir}/codecvt_specializations.h\n \n \n@@ -646,6 +648,7 @@ stamp-target: ${target_headers} ${target_headers_noinst} stamp-${target_alias}\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_H@ c++locale.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@ . || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CMESSAGES_H@ messages_members.h || true ;\\\n+\t  @LN_S@ ${glibcpp_srcdir}/@CTIME_H@ time_members.h || true ;\\\n \t  @LN_S@ ${glibcpp_srcdir}/@CCODECVT_H@ codecvt_specializations.h || true);\\\n \t  echo `date` > stamp-target ; \\\n \tfi"}, {"sha": "6e42b3bb5eae5fc91182642afcc46af2f4be9096", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 12, "deletions": 53, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -1011,22 +1011,10 @@ namespace std\n \n     public:\n       explicit \n-      __timepunct(size_t __refs = 0) \n-      : locale::facet(__refs)\n-      { \n-\t_M_name_timepunct = new char[2];\n-\tstrcpy(_M_name_timepunct, \"C\");\n-\t_M_initialize_timepunct(); \n-      }\n+      __timepunct(size_t __refs = 0);\n \n       explicit \n-      __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0) \n-      : locale::facet(__refs)\n-      { \n-\t_M_name_timepunct = new char[strlen(__s) + 1];\n-\tstrcpy(_M_name_timepunct, __s);\n-\t_M_initialize_timepunct(__cloc); \n-      }\n+      __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0);\n \n       void\n       _M_put(_CharT* __s, size_t __maxlen, const _CharT* __format, \n@@ -1123,11 +1111,7 @@ namespace std\n \n     protected:\n       virtual \n-      ~__timepunct()\n-      { \n-\tdelete [] _M_name_timepunct;\n-\t_S_destroy_c_locale(_M_c_locale_timepunct); \n-      }\n+      ~__timepunct();\n \n       // For use at construction time only.\n       void \n@@ -1169,6 +1153,8 @@ namespace std\n   template<typename _CharT>\n     const _CharT* __timepunct<_CharT>::_S_timezones[14];\n \n+  // Include host and configuration specific timepunct functions.\n+  #include <bits/time_members.h>\n \n   template<typename _CharT, typename _InIter>\n     class time_get : public locale::facet, public time_base\n@@ -1628,32 +1614,17 @@ namespace std\n       // Underlying \"C\" library locale information saved from\n       // initialization, needed by messages_byname as well.\n       __c_locale\t\t\t_M_c_locale_messages;\n-#if 1\n-      // Only needed if glibc < 2.3\n       char*\t\t\t\t_M_name_messages;\n-#endif\n \n     public:\n       static locale::id \t\tid;\n \n       explicit \n-      messages(size_t __refs = 0) \n-      : locale::facet(__refs)\n-      { \n-\t_M_name_messages = new char[2];\n-\tstrcpy(_M_name_messages, \"C\");\n-\t_M_c_locale_messages = _S_c_locale; \n-      }\n+      messages(size_t __refs = 0);\n \n       // Non-standard.\n       explicit \n-      messages(__c_locale __cloc, const char* __s, size_t __refs = 0) \n-      : locale::facet(__refs)\n-      { \n-\t_M_name_messages = new char[strlen(__s) + 1];\n-\tstrcpy(_M_name_messages, __s);\n-\t_M_c_locale_messages = _S_clone_c_locale(__cloc); \n-      }\n+      messages(__c_locale __cloc, const char* __s, size_t __refs = 0);\n \n       catalog \n       open(const basic_string<char>& __s, const locale& __loc) const\n@@ -1673,11 +1644,7 @@ namespace std\n \n     protected:\n       virtual \n-      ~messages()\n-       { \n-\t delete [] _M_name_messages;\n-\t _S_destroy_c_locale(_M_c_locale_messages); \n-       }\n+      ~messages();\n \n       virtual catalog \n       do_open(const basic_string<char>&, const locale&) const;\n@@ -1751,9 +1718,6 @@ namespace std\n     messages<wchar_t>::do_get(catalog, int, int, const wstring&) const;\n #endif\n \n-  // Include host and configuration specific messages virtual functions.\n-  #include <bits/messages_members.h>\n-\n   template<typename _CharT>\n     class messages_byname : public messages<_CharT>\n     {\n@@ -1762,22 +1726,17 @@ namespace std\n       typedef basic_string<_CharT> \tstring_type;\n \n       explicit \n-      messages_byname(const char* __s, size_t __refs = 0)\n-      : messages<_CharT>(__refs) \n-      { \n-\tdelete [] _M_name_messages;\n-\t_M_name_messages = new char[strlen(__s) + 1];\n-\tstrcpy(_M_name_messages, __s);\n-\t_S_destroy_c_locale(_M_c_locale_messages);\n-\t_S_create_c_locale(_M_c_locale_messages, __s); \n-      }\n+      messages_byname(const char* __s, size_t __refs = 0);\n \n     protected:\n       virtual \n       ~messages_byname() \n       { }\n     };\n \n+  // Include host and configuration specific messages functions.\n+  #include <bits/messages_members.h>\n+\n \n   // Subclause convenience interfaces, inlines.\n   // NB: These are inline because, when used in a loop, some compilers"}, {"sha": "8000394d3190540c86b0c4645720d24c8da6488b", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -264,7 +264,7 @@ namespace std\n     // The \"C\" reference locale\n     static _Impl* \t_S_classic; \n \n-    // Current global reference locale\n+    // Current global locale\n     static _Impl* \t_S_global;  \n \n     // Number of standard categories. For C++, these categories are\n@@ -419,9 +419,11 @@ namespace std\n     _Atomic_word \t\t\t_M_references;\n \n   protected:\n-    // Contains data from the underlying \"C\" library for default \"C\"\n-    // or \"POSIX\" locale.\n+    // Contains data from the underlying \"C\" library for the classic locale.\n     static __c_locale\t\t     \t_S_c_locale;\n+\n+    // String literal for the name of the classic locale.\n+    static char\t\t\t\t_S_c_name[2];\n     \n     explicit \n     facet(size_t __refs = 0) throw();"}, {"sha": "b212bf999ee1f4178d8237dcdf257a08415d7605", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -85,6 +85,7 @@ CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n CTIME_CC = @CTIME_CC@\n+CTIME_H = @CTIME_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}, {"sha": "07984d6b4aad317f970a035eb29405167453f8d6", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -85,6 +85,7 @@ CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n CTIME_CC = @CTIME_CC@\n+CTIME_H = @CTIME_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}, {"sha": "f292e54323ea897782b32f9dc117217aea8e421a", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 66, "deletions": 20, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -84,6 +84,7 @@ CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n CTIME_CC = @CTIME_CC@\n+CTIME_H = @CTIME_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -163,28 +164,60 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n GCC_INCLUDES = -I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include\n \n-INCLUDES =  \t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers =  \texception new typeinfo cxxabi.h exception_defines.h \n-\n-\n-c_sources =  \tcxa_demangle.c \tdyn-string.c \n-\n-\n-sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_term_handler.cc \teh_terminate.cc \teh_throw.cc \teh_type.cc \teh_unex_handler.cc \tguard.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc \tvterminate.cc\n+INCLUDES = \\\n+\t$(GCC_INCLUDES) $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers = \\\n+\texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+c_sources = \\\n+\tcxa_demangle.c \\\n+\tdyn-string.c \n+\n+\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\teh_alloc.cc \\\n+\teh_aux_runtime.cc \\\n+\teh_catch.cc \\\n+\teh_exception.cc \\\n+\teh_globals.cc \\\n+\teh_personality.cc \\\n+\teh_term_handler.cc \\\n+\teh_terminate.cc \\\n+\teh_throw.cc \\\n+\teh_type.cc \\\n+\teh_unex_handler.cc \\\n+\tguard.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\tpure.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc \\\n+\tvterminate.cc\n \n \n libsupc___la_SOURCES = $(sources) $(c_sources)\n@@ -198,19 +231,28 @@ LIBSUPCXX_CXXFLAGS = $(LIBSUPCXX_PICFLAGS)\n # Use special rules for pulling things out of libiberty.  These\n # objects should be compiled with the \"C\" compiler, not the C++\n # compiler, and also should not use the C++ includes.\n-C_COMPILE =  \t$(CC) $(DEFS) $(GCC_INCLUDES) \t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+C_COMPILE = \\\n+\t$(CC) $(DEFS) $(GCC_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n \n \n # LTCOMPILE is copied from LTCXXCOMPILE below.\n-LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \t    $(DEFS) $(GCC_INCLUDES) $(LIBSUPCXX_PICFLAGS)             $(AM_CPPFLAGS) $(CPPFLAGS) \n+LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n+\t    $(DEFS) $(GCC_INCLUDES) $(LIBSUPCXX_PICFLAGS) \\\n+            $(AM_CPPFLAGS) $(CPPFLAGS) \n \n \n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -234,7 +276,9 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+               --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -243,7 +287,9 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=c\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+          --mode=link $(CXX) \\\n+          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -284,7 +330,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n SOURCES = $(libsupc__convenience_la_SOURCES) $(libsupc___la_SOURCES)\n OBJECTS = $(libsupc__convenience_la_OBJECTS) $(libsupc___la_OBJECTS)\n@@ -408,7 +454,7 @@ TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n \t  awk '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n \ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags -o $$here/TAGS $(ETAGS_ARGS) $$tags  $$unique $(LISP))\n+\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n \n mostlyclean-tags:\n "}, {"sha": "1bf530481207199faf1f4baaabafda8ea63e12ad", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -85,6 +85,7 @@ CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n CTIME_CC = @CTIME_CC@\n+CTIME_H = @CTIME_H@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@"}, {"sha": "ab9510edd17d2d853c3e6dcbd731500447822c39", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 68, "deletions": 12, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -84,6 +84,7 @@ CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n CTIME_CC = @CTIME_CC@\n+CTIME_H = @CTIME_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -145,7 +146,7 @@ glibcpp_builddir = @glibcpp_builddir@\n toolexecdir = @glibcpp_toolexecdir@\n toolexeclibdir = @glibcpp_toolexeclibdir@\n toolexeclib_LTLIBRARIES = libstdc++.la\n-@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = -Wl,--version-script=libstdc++-symbol.ver\n+@GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@version_arg = @GLIBCPP_BUILD_VERSIONED_SHLIB_TRUE@-Wl,--version-script=libstdc++-symbol.ver\n @GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE@version_arg = \n \n # Compile flags that should be constant throughout the build, both for\n@@ -154,11 +155,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n \n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@\n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -168,33 +171,79 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t$(GLIBCPP_INCLUDES) \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t$(GLIBCPP_INCLUDES) \\\n+\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t$(TOPLEVEL_INCLUDES)\n \n \n # Source files linked in via configuration/make substitution for a\n # particular target.\n-target_sources =  \tcodecvt_members.cc \tcollate_members.cc \tctype_members.cc \tmessages_members.cc \tmonetary_members.cc \tnumeric_members.cc \ttime_members.cc\n+target_sources = \\\n+\tcodecvt_members.cc \\\n+\tcollate_members.cc \\\n+\tctype_members.cc \\\n+\tmessages_members.cc \\\n+\tmonetary_members.cc \\\n+\tnumeric_members.cc \\\n+\ttime_members.cc\n \n \n # Source files linked in via configuration/make substitution for a\n # particular target, but with ad hoc naming rules.\n-target_sources_extra =  \tbasic_file.cc \tc++locale.cc \n+target_sources_extra = \\\n+\tbasic_file.cc \\\n+\tc++locale.cc \n \n \n # Sources present in the src directory.\n-sources =  \tbitset.cc \tcodecvt.cc \tcomplex_io.cc \tconcept-inst.cc \tctype.cc \text-inst.cc \tfstream.cc \tfstream-inst.cc \tfunctexcept.cc \tglobals.cc \tio-inst.cc \tios.cc \tistream-inst.cc \tlimits.cc \tlocale.cc \tlocale-inst.cc \tlocalename.cc \tmisc-inst.cc \tostream-inst.cc \tsstream-inst.cc \tstdexcept.cc \tstl-inst.cc \tstreambuf-inst.cc \tstring-inst.cc \tstrstream.cc \tvalarray-inst.cc \twstring-inst.cc \t${target_sources} \t${target_sources_extra}\n+sources = \\\n+\tbitset.cc \\\n+\tcodecvt.cc \\\n+\tcomplex_io.cc \\\n+\tconcept-inst.cc \\\n+\tctype.cc \\\n+\text-inst.cc \\\n+\tfstream.cc \\\n+\tfstream-inst.cc \\\n+\tfunctexcept.cc \\\n+\tglobals.cc \\\n+\tio-inst.cc \\\n+\tios.cc \\\n+\tistream-inst.cc \\\n+\tlimits.cc \\\n+\tlocale.cc \\\n+\tlocale-inst.cc \\\n+\tlocalename.cc \\\n+\tmisc-inst.cc \\\n+\tostream-inst.cc \\\n+\tsstream-inst.cc \\\n+\tstdexcept.cc \\\n+\tstl-inst.cc \\\n+\tstreambuf-inst.cc \\\n+\tstring-inst.cc \\\n+\tstrstream.cc \\\n+\tvalarray-inst.cc \\\n+\twstring-inst.cc \\\n+\t${target_sources} \\\n+\t${target_sources_extra}\n \n \n VPATH = $(top_srcdir)/src:$(top_srcdir)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD =  \t$(top_builddir)/libmath/libmath.la @libio_la@ \t$(top_builddir)/libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD = \\\n+\t$(top_builddir)/libmath/libmath.la @libio_la@ \\\n+\t$(top_builddir)/libsupc++/libsupc++convenience.la\n \n \n libstdc___la_DEPENDENCIES = libstdc++-symbol.ver $(libstdc___la_LIBADD)\n \n-libstdc___la_LDFLAGS =  \t-version-info @libtool_VERSION@ ${version_arg} \t-lm @LIBUNWIND_FLAG@ \n+libstdc___la_LDFLAGS = \\\n+\t-version-info @libtool_VERSION@ ${version_arg} \\\n+\t-lm @LIBUNWIND_FLAG@ \n \n \n # Use special rules for the deprecated source files so that they find\n@@ -206,7 +255,12 @@ GLIBCPP_INCLUDE_DIR = @glibcpp_builddir@/include\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. \n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS)  \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS)  \n \n \n # libstdc++ libtool notes\n@@ -227,7 +281,8 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -236,7 +291,8 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n \n debugdir = debug"}, {"sha": "3b6302ea28d1b0c193b582e6a6e356c19cc92ac2", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -449,6 +449,8 @@ namespace std\n   __c_locale\n   locale::facet::_S_c_locale;\n   \n+  char locale::facet::_S_c_name[2];\n+\n   locale::facet::\n   ~facet() { }\n "}, {"sha": "8a30b897f07eff3349e9dc97ea75497d986d3e21", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -209,7 +209,10 @@ namespace std\n   : _M_references(__refs), _M_facets_size(_GLIBCPP_NUM_FACETS)\n   {\n     // Initialize the underlying locale model.\n-    locale::facet::_S_create_c_locale(locale::facet::_S_c_locale, \"C\");\n+    locale::facet::_S_c_name[0] = 'C';\n+    locale::facet::_S_c_name[1] = '\\0';\n+    locale::facet::_S_create_c_locale(locale::facet::_S_c_locale, \n+\t\t\t\t      locale::facet::_S_c_name);\n \n     _M_facets = new(&facet_vec) facet*[_M_facets_size];\n     for (size_t __i = 0; __i < _M_facets_size; ++__i)\n@@ -220,7 +223,7 @@ namespace std\n \t __i < _S_categories_size + _S_extra_categories_size; ++__i)\n       {\n \t_M_names[__i]  = new (&facet_name[__i]) char[2];\n-\tstrcpy(_M_names[__i], \"C\");\n+\tstrcpy(_M_names[__i], locale::facet::_S_c_name);\n       }\n \n     // This is needed as presently the C++ version of \"C\" locales"}, {"sha": "942b784eda02e77f9135a1e549b81fbe05574bd6", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=1c26d8fd84049ea0c57a9d5aba38bc2c0e552ebb", "patch": "@@ -85,6 +85,7 @@ CNUMERIC_CC = @CNUMERIC_CC@\n CPP = @CPP@\n CSTDIO_H = @CSTDIO_H@\n CTIME_CC = @CTIME_CC@\n+CTIME_H = @CTIME_H@\n CXXCPP = @CXXCPP@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@"}]}