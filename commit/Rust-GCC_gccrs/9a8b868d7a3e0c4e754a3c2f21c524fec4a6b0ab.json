{"sha": "9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "node_id": "C_kwDOANBUbNoAKDlhOGI4NjhkN2EzZTBjNGU3NTRhM2MyZjIxYzUyNGZlYzRhNmIwYWI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-01T00:19:02Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-01T00:19:02Z"}, "message": "Daily bump.", "tree": {"sha": "a11801f5c8bd20833188dacd3fe2ddb5000e99a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a11801f5c8bd20833188dacd3fe2ddb5000e99a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/comments", "author": null, "committer": null, "parents": [{"sha": "a3b58f28b8cbf524ae2417e1cb1813864a1d8a5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b58f28b8cbf524ae2417e1cb1813864a1d8a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b58f28b8cbf524ae2417e1cb1813864a1d8a5d"}], "stats": {"total": 410, "additions": 409, "deletions": 1}, "files": [{"sha": "f99789e016dac7bed638a797c7f2f27a04a84eac", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "patch": "@@ -1,3 +1,7 @@\n+2022-10-31  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* MAINTAINERS: Update email address.\n+\n 2022-10-21  \u0414\u0438\u043b\u044f\u043d \u041f\u0430\u043b\u0430\u0443\u0437\u043e\u0432  <dilyan.palauzov@aegee.org>\n \n \t* configure.ac: Don't configure readline if --with-system-readline is"}, {"sha": "f7ab7dacd1485e3421556f2e41661e82fa4198f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 291, "deletions": 0, "changes": 291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "patch": "@@ -1,3 +1,294 @@\n+2022-10-31  Guillermo E. Martinez  <guillermo.e.martinez@oracle.com>\n+\n+\t* btfout.cc (btf_calc_num_vbytes): Compute enumeration size depending of\n+\tenumerator type btf_enum{,64}.\n+\t(btf_asm_type): Update btf_kflag according to enumeration type sign\n+\tusing dtd_enum_unsigned field for both:  BTF_KIND_ENUM{,64}.\n+\t(btf_asm_enum_const): New argument to represent the size of\n+\tthe BTF enum type, writing the enumerator constant value for\n+\t32 bits, if it's 64 bits then explicitly writes lower 32-bits\n+\tvalue and higher 32-bits value.\n+\t(output_asm_btf_enum_list): Add enumeration size argument.\n+\t* ctfc.cc (ctf_add_enum): New argument to represent CTF enum\n+\tbasic information.\n+\t(ctf_add_generic): Use of ei_{name. size, unsigned} to build the\n+\tdtd structure containing enumeration information.\n+\t(ctf_add_enumerator): Update comment mention support for BTF\n+\tenumeration in 64-bits.\n+\t* dwarf2ctf.cc (gen_ctf_enumeration_type): Extract signedness\n+\tfor enumeration type and use it in ctf_add_enum.\n+\t* ctfc.h (ctf_dmdef): Update dmd_value to HOST_WIDE_INT to allow\n+\tuse 32/64 bits enumerators.\n+\tinformation.\n+\t(ctf_dtdef): New field to describe enum signedness.\n+\n+2022-10-31  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins-bases.cc: Change constexpr back to CONSTEXPR.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (SHAPE): Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc (struct registered_function_hasher): Ditto.\n+\t* config/riscv/riscv-vector-builtins.h (struct rvv_arg_type_info): Ditto.\n+\n+2022-10-31  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (fminmaxop): New iterator.\n+\t(<fexpander><mode>3): New define_expand.\n+\t(<fexpander><mode>3<exec>): Likewise.\n+\t(reduc_<fexpander>_scal_<mode>): Likewise.\n+\t* config/gcn/gcn.md (fexpander): New attribute.\n+\n+2022-10-31  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn-valu.md (V64_SI): Delete iterator.\n+\t(V64_DI): Likewise.\n+\t(V64_1REG): Likewise.\n+\t(V64_INT_1REG): Likewise.\n+\t(V64_2REG): Likewise.\n+\t(V64_ALL): Likewise.\n+\t(V64_FP): Likewise.\n+\t(reduc_<reduc_op>_scal_<mode>): Use V_ALL. Use gen_vec_extract.\n+\t(fold_left_plus_<mode>): Use V_FP.\n+\t(*<reduc_op>_dpp_shr_<mode>): Use V_1REG.\n+\t(*<reduc_op>_dpp_shr_<mode>): Use V_DI.\n+\t(*plus_carry_dpp_shr_<mode>): Use V_INT_1REG.\n+\t(*plus_carry_in_dpp_shr_<mode>): Use V_SI.\n+\t(*plus_carry_dpp_shr_<mode>): Use V_DI.\n+\t(mov_from_lane63_<mode>): Delete.\n+\t(mov_from_lane63_<mode>): Delete.\n+\t* config/gcn/gcn.cc (gcn_expand_reduc_scalar): Support partial vectors.\n+\t* config/gcn/gcn.md (unspec): Remove UNSPEC_MOV_FROM_LANE63.\n+\n+2022-10-31  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.cc (gcn_simd_clone_compute_vecsize_and_simdlen):\n+\tSet base_type as ARG_UNUSED.\n+\n+2022-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtin-types.def (BT_COMPLEX_FLOAT16, BT_COMPLEX_FLOAT32,\n+\tBT_COMPLEX_FLOAT64, BT_COMPLEX_FLOAT128, BT_COMPLEX_FLOAT32X,\n+\tBT_COMPLEX_FLOAT64X, BT_COMPLEX_FLOAT128X,\n+\tBT_FN_COMPLEX_FLOAT16_COMPLEX_FLOAT16,\n+\tBT_FN_COMPLEX_FLOAT32_COMPLEX_FLOAT32,\n+\tBT_FN_COMPLEX_FLOAT64_COMPLEX_FLOAT64,\n+\tBT_FN_COMPLEX_FLOAT128_COMPLEX_FLOAT128,\n+\tBT_FN_COMPLEX_FLOAT32X_COMPLEX_FLOAT32X,\n+\tBT_FN_COMPLEX_FLOAT64X_COMPLEX_FLOAT64X,\n+\tBT_FN_COMPLEX_FLOAT128X_COMPLEX_FLOAT128X,\n+\tBT_FN_FLOAT16_COMPLEX_FLOAT16, BT_FN_FLOAT32_COMPLEX_FLOAT32,\n+\tBT_FN_FLOAT64_COMPLEX_FLOAT64, BT_FN_FLOAT128_COMPLEX_FLOAT128,\n+\tBT_FN_FLOAT32X_COMPLEX_FLOAT32X, BT_FN_FLOAT64X_COMPLEX_FLOAT64X,\n+\tBT_FN_FLOAT128X_COMPLEX_FLOAT128X,\n+\tBT_FN_COMPLEX_FLOAT16_COMPLEX_FLOAT16_COMPLEX_FLOAT16,\n+\tBT_FN_COMPLEX_FLOAT32_COMPLEX_FLOAT32_COMPLEX_FLOAT32,\n+\tBT_FN_COMPLEX_FLOAT64_COMPLEX_FLOAT64_COMPLEX_FLOAT64,\n+\tBT_FN_COMPLEX_FLOAT128_COMPLEX_FLOAT128_COMPLEX_FLOAT128,\n+\tBT_FN_COMPLEX_FLOAT32X_COMPLEX_FLOAT32X_COMPLEX_FLOAT32X,\n+\tBT_FN_COMPLEX_FLOAT64X_COMPLEX_FLOAT64X_COMPLEX_FLOAT64X,\n+\tBT_FN_COMPLEX_FLOAT128X_COMPLEX_FLOAT128X_COMPLEX_FLOAT128X): New.\n+\t* builtins.def (CABS_TYPE, CACOSH_TYPE, CARG_TYPE, CASINH_TYPE,\n+\tCPOW_TYPE, CPROJ_TYPE): Define and undefine later.\n+\t(BUILT_IN_CABS, BUILT_IN_CACOSH, BUILT_IN_CACOS, BUILT_IN_CARG,\n+\tBUILT_IN_CASINH, BUILT_IN_CASIN, BUILT_IN_CATANH, BUILT_IN_CATAN,\n+\tBUILT_IN_CCOSH, BUILT_IN_CCOS, BUILT_IN_CEXP, BUILT_IN_CLOG,\n+\tBUILT_IN_CPOW, BUILT_IN_CPROJ, BUILT_IN_CSINH, BUILT_IN_CSIN,\n+\tBUILT_IN_CSQRT, BUILT_IN_CTANH, BUILT_IN_CTAN): Add\n+\tDEF_EXT_LIB_FLOATN_NX_BUILTINS.\n+\t* fold-const-call.cc (fold_const_call_sc, fold_const_call_cc,\n+\tfold_const_call_ccc): Add various CASE_CFN_*_FN: cases when\n+\tCASE_CFN_* is present.\n+\t* gimple-ssa-backprop.cc (backprop::process_builtin_call_use):\n+\tLikewise.\n+\t* builtins.cc (expand_builtin, fold_builtin_1): Likewise.\n+\t* fold-const.cc (negate_mathfn_p, tree_expr_finite_p,\n+\ttree_expr_maybe_signaling_nan_p, tree_expr_maybe_nan_p,\n+\ttree_expr_maybe_real_minus_zero_p, tree_call_nonnegative_warnv_p):\n+\tLikewise.\n+\n+2022-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtin-types.def (BT_FN_BFLOAT16_BFLOAT16_BFLOAT16): New.\n+\t* builtins.def (BUILT_IN_NEXTAFTERF16B): New builtin.\n+\t* fold-const-call.cc (fold_const_call_sss): Handle\n+\tCFN_BUILT_IN_NEXTAFTERF16B.\n+\n+2022-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtin-types.def (BT_FLOAT16_PTR, BT_FLOAT32_PTR, BT_FLOAT64_PTR,\n+\tBT_FLOAT128_PTR, BT_FLOAT32X_PTR, BT_FLOAT64X_PTR, BT_FLOAT128X_PTR):\n+\tNew DEF_PRIMITIVE_TYPE.\n+\t(BT_FN_INT_FLOAT16, BT_FN_INT_FLOAT32, BT_FN_INT_FLOAT64,\n+\tBT_FN_INT_FLOAT128, BT_FN_INT_FLOAT32X, BT_FN_INT_FLOAT64X,\n+\tBT_FN_INT_FLOAT128X, BT_FN_LONG_FLOAT16, BT_FN_LONG_FLOAT32,\n+\tBT_FN_LONG_FLOAT64, BT_FN_LONG_FLOAT128, BT_FN_LONG_FLOAT32X,\n+\tBT_FN_LONG_FLOAT64X, BT_FN_LONG_FLOAT128X, BT_FN_LONGLONG_FLOAT16,\n+\tBT_FN_LONGLONG_FLOAT32, BT_FN_LONGLONG_FLOAT64,\n+\tBT_FN_LONGLONG_FLOAT128, BT_FN_LONGLONG_FLOAT32X,\n+\tBT_FN_LONGLONG_FLOAT64X, BT_FN_LONGLONG_FLOAT128X): New\n+\tDEF_FUNCTION_TYPE_1.\n+\t(BT_FN_FLOAT16_FLOAT16_FLOAT16PTR, BT_FN_FLOAT32_FLOAT32_FLOAT32PTR,\n+\tBT_FN_FLOAT64_FLOAT64_FLOAT64PTR, BT_FN_FLOAT128_FLOAT128_FLOAT128PTR,\n+\tBT_FN_FLOAT32X_FLOAT32X_FLOAT32XPTR,\n+\tBT_FN_FLOAT64X_FLOAT64X_FLOAT64XPTR,\n+\tBT_FN_FLOAT128X_FLOAT128X_FLOAT128XPTR, BT_FN_FLOAT16_FLOAT16_INT,\n+\tBT_FN_FLOAT32_FLOAT32_INT, BT_FN_FLOAT64_FLOAT64_INT,\n+\tBT_FN_FLOAT128_FLOAT128_INT, BT_FN_FLOAT32X_FLOAT32X_INT,\n+\tBT_FN_FLOAT64X_FLOAT64X_INT, BT_FN_FLOAT128X_FLOAT128X_INT,\n+\tBT_FN_FLOAT16_FLOAT16_INTPTR, BT_FN_FLOAT32_FLOAT32_INTPTR,\n+\tBT_FN_FLOAT64_FLOAT64_INTPTR, BT_FN_FLOAT128_FLOAT128_INTPTR,\n+\tBT_FN_FLOAT32X_FLOAT32X_INTPTR, BT_FN_FLOAT64X_FLOAT64X_INTPTR,\n+\tBT_FN_FLOAT128X_FLOAT128X_INTPTR, BT_FN_FLOAT16_FLOAT16_LONG,\n+\tBT_FN_FLOAT32_FLOAT32_LONG, BT_FN_FLOAT64_FLOAT64_LONG,\n+\tBT_FN_FLOAT128_FLOAT128_LONG, BT_FN_FLOAT32X_FLOAT32X_LONG,\n+\tBT_FN_FLOAT64X_FLOAT64X_LONG, BT_FN_FLOAT128X_FLOAT128X_LONG): New\n+\tDEF_FUNCTION_TYPE_2.\n+\t(BT_FN_FLOAT16_FLOAT16_FLOAT16_INTPTR,\n+\tBT_FN_FLOAT32_FLOAT32_FLOAT32_INTPTR,\n+\tBT_FN_FLOAT64_FLOAT64_FLOAT64_INTPTR,\n+\tBT_FN_FLOAT128_FLOAT128_FLOAT128_INTPTR,\n+\tBT_FN_FLOAT32X_FLOAT32X_FLOAT32X_INTPTR,\n+\tBT_FN_FLOAT64X_FLOAT64X_FLOAT64X_INTPTR,\n+\tBT_FN_FLOAT128X_FLOAT128X_FLOAT128X_INTPTR): New DEF_FUNCTION_TYPE_3.\n+\t* builtins.def (ACOSH_TYPE, ATAN2_TYPE, ATANH_TYPE, COSH_TYPE,\n+\tFDIM_TYPE, HUGE_VAL_TYPE, HYPOT_TYPE, ILOGB_TYPE, LDEXP_TYPE,\n+\tLGAMMA_TYPE, LLRINT_TYPE, LOG10_TYPE, LRINT_TYPE, MODF_TYPE,\n+\tNEXTAFTER_TYPE, REMQUO_TYPE, SCALBLN_TYPE, SCALBN_TYPE, SINH_TYPE):\n+\tDefine and undefine later.\n+\t(FMIN_TYPE, SQRT_TYPE): Undefine at a later line.\n+\t(INF_TYPE): Define at a later line.\n+\t(BUILT_IN_ACOSH, BUILT_IN_ACOS, BUILT_IN_ASINH, BUILT_IN_ASIN,\n+\tBUILT_IN_ATAN2, BUILT_IN_ATANH, BUILT_IN_ATAN, BUILT_IN_CBRT,\n+\tBUILT_IN_COSH, BUILT_IN_COS, BUILT_IN_ERFC, BUILT_IN_ERF,\n+\tBUILT_IN_EXP2, BUILT_IN_EXP, BUILT_IN_EXPM1, BUILT_IN_FDIM,\n+\tBUILT_IN_FMOD, BUILT_IN_FREXP, BUILT_IN_HYPOT, BUILT_IN_ILOGB,\n+\tBUILT_IN_LDEXP, BUILT_IN_LGAMMA, BUILT_IN_LLRINT, BUILT_IN_LLROUND,\n+\tBUILT_IN_LOG10, BUILT_IN_LOG1P, BUILT_IN_LOG2, BUILT_IN_LOGB,\n+\tBUILT_IN_LOG, BUILT_IN_LRINT, BUILT_IN_LROUND, BUILT_IN_MODF,\n+\tBUILT_IN_NEXTAFTER, BUILT_IN_POW, BUILT_IN_REMAINDER, BUILT_IN_REMQUO,\n+\tBUILT_IN_SCALBLN, BUILT_IN_SCALBN, BUILT_IN_SINH, BUILT_IN_SIN,\n+\tBUILT_IN_TANH, BUILT_IN_TAN, BUILT_IN_TGAMMA): Add\n+\tDEF_EXT_LIB_FLOATN_NX_BUILTINS.\n+\t(BUILT_IN_HUGE_VAL): Use HUGE_VAL_TYPE instead of INF_TYPE in\n+\tDEF_GCC_FLOATN_NX_BUILTINS.\n+\t* fold-const-call.cc (fold_const_call_ss): Add various CASE_CFN_*_FN:\n+\tcases when CASE_CFN_* is present.\n+\t(fold_const_call_sss): Likewise.\n+\t* builtins.cc (mathfn_built_in_2): Use CASE_MATHFN_FLOATN instead of\n+\tCASE_MATHFN for various builtins in SEQ_OF_CASE_MATHFN macro.\n+\t(builtin_with_linkage_p): Add CASE_FLT_FN_FLOATN_NX for various\n+\tbuiltins next to CASE_FLT_FN.\n+\t* fold-const.cc (tree_call_nonnegative_warnv_p): Add CASE_CFN_*_FN:\n+\tnext to CASE_CFN_*: for various builtins.\n+\t* tree-call-cdce.cc (can_test_argument_range): Add\n+\tCASE_FLT_FN_FLOATN_NX next to CASE_FLT_FN for various builtins.\n+\t(edom_only_function): Likewise.\n+\n+2022-10-31  konglin1  <lingling.kong@intel.com>\n+\n+\t* common/config/i386/i386-common.cc\n+\t(OPTION_MASK_ISA2_AVXNECONVERT_SET,\n+\tOPTION_MASK_ISA2_AVXNECONVERT_UNSET): New.\n+\t(ix86_handle_option): Handle -mavxneconvert, unset\n+\tavxneconvert when avx2 is disabled.\n+\t* common/config/i386/i386-cpuinfo.h (processor_types): Add\n+\tFEATURE_AVXNECONVERT.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n+\tavxneconvert.\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect avxneconvert.\n+\t* config.gcc: Add avxneconvertintrin.h\n+\t* config/i386/avxneconvertintrin.h: New.\n+\t* config/i386/avx512bf16vlintrin.h (_mm256_cvtneps_pbh):\n+\tUnified builtin with avxneconvert.\n+\t(_mm_cvtneps_pbh): Ditto.\n+\t* config/i386/cpuid.h (bit_AVXNECONVERT): New.\n+\t* config/i386/i386-builtin-types.def: Add\n+\tDEF_POINTER_TYPE (PCV8HF, V8HF, CONST),\n+\tDEF_POINTER_TYPE (PCV8BF, V8BF, CONST),\n+\tDEF_POINTER_TYPE (PCV16HF, V16HF, CONST),\n+\tDEF_POINTER_TYPE (PCV16BF, V16BF, CONST),\n+\tDEF_FUNCTION_TYPE (V4SF, PCBFLOAT16),\n+\tDEF_FUNCTION_TYPE (V4SF, PCFLOAT16),\n+\tDEF_FUNCTION_TYPE (V8SF, PCBFLOAT16),\n+\tDEF_FUNCTION_TYPE (V8SF, PCFLOAT16),\n+\tDEF_FUNCTION_TYPE (V4SF, PCV8BF),\n+\tDEF_FUNCTION_TYPE (V4SF, PCV8HF),\n+\tDEF_FUNCTION_TYPE (V8SF, PCV16HF),\n+\tDEF_FUNCTION_TYPE (V8SF, PCV16BF),\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n+\t__AVXNECONVERT__.\n+\t* config/i386/i386-expand.cc (ix86_expand_special_args_builtin):\n+\tHandle V4SF_FTYPE_PCBFLOAT16,V8SF_FTYPE_PCBFLOAT16, V4SF_FTYPE_PCFLOAT16,\n+\tV8SF_FTYPE_PCFLOAT16,V4SF_FTYPE_PCV8BF,\n+\tV4SF_FTYPE_PCV8HF,V8SF_FTYPE_PCV16BF,V8SF_FTYPE_PCV16HF.\n+\t* config/i386/i386-isa.def : Add DEF_PTA(AVXNECONVERT) New.\n+\t* config/i386/i386-options.cc (isa2_opts): Add -mavxneconvert.\n+\t(ix86_valid_target_attribute_inner_p): Handle avxneconvert.\n+\t* config/i386/i386.md: Add attr avx512bf16vl and avxneconvert.\n+\t* config/i386/i386.opt: Add option -mavxneconvert.\n+\t* config/i386/immintrin.h: Inculde avxneconvertintrin.h.\n+\t* config/i386/sse.md (vbcstnebf162ps_<mode>): New define_insn.\n+\t(vbcstnesh2ps_<mode>): Ditto.\n+\t(vcvtnee<bf16_ph>2ps_<mode>):Ditto.\n+\t(vcvtneo<bf16_ph>2ps_<mode>):Ditto.\n+\t(vcvtneps2bf16_v4sf): Ditto.\n+\t(*vcvtneps2bf16_v4sf): Ditto.\n+\t(vcvtneps2bf16_v8sf): Ditto.\n+\t* doc/invoke.texi: Document -mavxneconvert.\n+\t* doc/extend.texi: Document avxneconvert.\n+\t* doc/sourcebuild.texi: Document target avxneconvert.\n+\n+2022-10-31  konglin1  <lingling.kong@intel.com>\n+\n+\t* config/i386/avx512bf16intrin.h (__attribute__): Change short to bf16.\n+\t(_mm_cvtsbh_ss): Ditto.\n+\t(_mm512_cvtne2ps_pbh): Ditto.\n+\t(_mm512_mask_cvtne2ps_pbh): Ditto.\n+\t(_mm512_maskz_cvtne2ps_pbh): Ditto.\n+\t* config/i386/avx512bf16vlintrin.h (__attribute__): Ditto.\n+\t(_mm256_cvtne2ps_pbh): Ditto.\n+\t(_mm256_mask_cvtne2ps_pbh): Ditto.\n+\t(_mm256_maskz_cvtne2ps_pbh): Ditto.\n+\t(_mm_cvtne2ps_pbh): Ditto.\n+\t(_mm_mask_cvtne2ps_pbh): Ditto.\n+\t(_mm_maskz_cvtne2ps_pbh): Ditto.\n+\t(_mm_cvtness_sbh): Ditto.\n+\t* config/i386/i386-builtin-types.def (V8BF): Add new\n+\tDEF_VECTOR_TYPE for BFmode.\n+\t(V16BF): Ditto.\n+\t(V32BF): Ditto.\n+\t* config/i386/i386-builtin.def (BDESC): Fixed builtins.\n+\t* config/i386/i386-expand.cc (ix86_expand_args_builtin): Changed\n+\tavx512bf16 ix86_builtin_func_type included HI to BF.\n+\t* config/i386/immintrin.h: Add SSE2 depend for avx512bf16.\n+\t* config/i386/sse.md (TARGET_AVX512VL): Changed HI vector to BF\n+\tvector.\n+\t(avx512f_cvtneps2bf16_v4sf): New define_expand.\n+\t(*avx512f_cvtneps2bf16_v4sf): New define_insn.\n+\t(avx512f_cvtneps2bf16_v4sf_maskz):Ditto.\n+\t(avx512f_cvtneps2bf16_v4sf_mask): Ditto.\n+\t(avx512f_cvtneps2bf16_v4sf_mask_1): Ditto.\n+\n+2022-10-31  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/107261\n+\t* config/i386/i386-modes.def (VECTOR_MODE): Support V2BFmode.\n+\t* config/i386/i386.cc (classify_argument): Handle V4BFmode and\n+\tV2BFmode.\n+\t(ix86_convert_const_vector_to_integer): Ditto.\n+\t* config/i386/i386.h (VALID_AVX512FP16_REG_MODE): Remove\n+\tV2BFmode.\n+\t(VALID_SSE2_REG_MODE): Add V4BFmode and V2BFmode.\n+\t(VALID_MMX_REG_MODE): Add V4BFmode.\n+\t* config/i386/i386.md (mode): Add V4BF and V2BF.\n+\t(MODE_SIZE): Ditto.\n+\t* config/i386/mmx.md (MMXMODE) Add V4BF.\n+\t(V_32): Add V2BF.\n+\t(V_16_32_64): Add V4BF and V2BF.\n+\t(mmxinsnmode): Add V4BF and V2BF.\n+\t(*mov<mode>_internal): Hanlde V4BFmode and V2BFmode.\n+\n 2022-10-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* configure.ac (sjlj-exceptions): Restore dropped line."}, {"sha": "39502537bfa90875d5d7785452019d85d4d7d8af", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "patch": "@@ -1 +1 @@\n-20221031\n+20221101"}, {"sha": "9dee4292a205a9899bc3f9d919907a26eb0c7cfc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "patch": "@@ -1,3 +1,54 @@\n+2022-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/cpp23/ext-floating12.C: New test.\n+\n+2022-10-31  Guillermo E. Martinez  <guillermo.e.martinez@oracle.com>\n+\n+\t* gcc.dg/debug/btf/btf-enum-1.c: Update testcase, with correct\n+\tinfo.kflags encoding.\n+\t* gcc.dg/debug/btf/btf-enum64-1.c: New testcase.\n+\n+2022-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/torture/floatn-builtin.h: Add tests for newly added builtins.\n+\n+2022-10-31  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.target/i386/avx-check.h: Add avxneconvert check.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* gcc.target/i386/sse-12.c: Add -mavxneconvert.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* g++.dg/other/i386-2.C: Ditto.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* lib/target-supports.exp:add check_effective_target_avxneconvert.\n+\t* gcc.target/i386/avx-ne-convert-1.c: New test.\n+\t* gcc.target/i386/avx-ne-convert-vbcstnebf162ps-2.c: Ditto.\n+\t* gcc.target/i386/avx-ne-convert-vbcstnesh2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx-ne-convert-vcvtneebf162ps-2.c: Ditto.\n+\t* gcc.target/i386/avx-ne-convert-vcvtneeph2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx-ne-convert-vcvtneobf162ps-2.c: Ditto.\n+\t* gcc.target/i386/avx-ne-convert-vcvtneoph2ps-2.c: Ditto.\n+\t* gcc.target/i386/avx-ne-convert-vcvtneps2bf16-2.c: Ditto.\n+\t* gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1.c: Rename..\n+\t* gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1a.c: To this.\n+\t* gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1b.c: New test.\n+\n+2022-10-31  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.target/i386/avx512bf16-cvtsbh2ss-1.c: Add fpmath option.\n+\t* gcc.target/i386/avx512bf16-vdpbf16ps-2.c: Fixed\n+\tscan-assembler.\n+\t* gcc.target/i386/avx512bf16vl-cvtness2sbh-1.c: Add x/y suffix\n+\tfor vcvtneps2bf16.\n+\t* gcc.target/i386/avx512bf16vl-vcvtneps2bf16-1.c: Ditto.\n+\n+2022-10-31  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr107261.c: New test.\n+\n 2022-10-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* gdc.dg/simd19630.d: Move tests with errors to ..."}, {"sha": "64b158a4e547d5e61f8265e31e5aaaac8456a5e7", "filename": "include/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "patch": "@@ -1,3 +1,15 @@\n+2022-10-31  Guillermo E. Martinez  <guillermo.e.martinez@oracle.com>\n+\n+\t* btf.h (btf_enum64): Add new definition and new symbolic\n+\tconstant to BTF_KIND_ENUM64 and BTF_KF_ENUM_{UN,}SIGNED.\n+\n+2022-10-31  Lulu Cheng  <chenglulu@loongson.cn>\n+\t    qijingwen  <qijingwen@loongson.cn>\n+\n+\t* vtv-change-permission.h (defined): Determines whether the macro\n+\t__loongarch_lp64 is defined\n+\t(VTV_PAGE_SIZE): Set VTV_PAGE_SIZE to 16KiB for loongarch64.\n+\n 2022-10-24  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* cuda/cuda.h (enum CUdevice_attribute): Add"}, {"sha": "35bf5439fef141c484e9d6bfc37e6142401f786f", "filename": "libitm/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "patch": "@@ -1,3 +1,10 @@\n+2022-10-31  Xiongchuan Tan  <xc-tan@outlook.com>\n+\n+\t* configure.tgt: Add riscv support.\n+\t* config/riscv/asm.h: New file.\n+\t* config/riscv/sjlj.S: New file.\n+\t* config/riscv/target.h: New file.\n+\n 2022-10-13  Lulu Cheng  <chenglulu@loongson.cn>\n \n \t* config/loongarch/sjlj.S: Add a soft floating point condition to the"}, {"sha": "a4d92752855c375ff8bb1c73d5a379d98f67064f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "patch": "@@ -1,3 +1,41 @@\n+2022-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/std/complex (complex::complex converting ctor): For C++23\n+\tuse explicit specifier with constant expression.  Explicitly cast\n+\tboth parts to _Tp.\n+\t(__complex_abs, __complex_arg, __complex_cos, __complex_cosh,\n+\t__complex_exp, __complex_log, __complex_sin, __complex_sinh,\n+\t__complex_sqrt, __complex_tan, __complex_tanh, __complex_pow): Add\n+\t__complex__ _Float{16,32,64,128} and __complex__ decltype(0.0bf16)\n+\toverloads.\n+\t(complex<float>::complex converting ctor,\n+\tcomplex<double>::complex converting ctor,\n+\tcomplex<long double>::complex converting ctor): For C++23 implement\n+\tas template with explicit specifier with constant expression\n+\tand explicit casts.\n+\t(__complex_type): New template.\n+\t(complex): New partial specialization for types with extended floating\n+\tpoint types.\n+\t(__complex_acos, __complex_asin, __complex_atan, __complex_acosh,\n+\t__complex_asinh, __complex_atanh): Add __complex__ _Float{16,32,64,128}\n+\tand __complex__ decltype(0.0bf16) overloads.\n+\t(__complex_proj): Likewise.  Add template for complex of extended\n+\tfloating point types.\n+\t* include/bits/cpp_type_traits.h (__is_floating): Specialize for\n+\t_Float{16,32,64,128} and __gnu_cxx::__bfloat16_t.\n+\t* testsuite/26_numerics/complex/ext_c++23.cc: New test.\n+\n+2022-10-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/os/gnu-linux/os_defines.h (_GLIBCXX_HAVE_FLOAT128_MATH):\n+\tUncomment.\n+\t* include/c_global/cmath (nextafter(_Float16, _Float16)): Make it constexpr.\n+\tIf std::__is_constant_evaluated() call __builtin_nextafterf16.\n+\t(nextafter(__gnu_cxx::__bfloat16_t, __gnu_cxx::__bfloat16_t)): Similarly\n+\tbut call __builtin_nextafterf16b.\n+\t* testsuite/26_numerics/headers/cmath/nextafter_c++23.cc (test): Add\n+\tstatic assertions to test constexpr nextafter.\n+\n 2022-10-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/fs_path.h (path::filename()): Fix dangling"}, {"sha": "cadb0ae900e4cbdab8170a1c8ddc49bc49ccc1f4", "filename": "libvtv/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/libvtv%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab/libvtv%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2FChangeLog?ref=9a8b868d7a3e0c4e754a3c2f21c524fec4a6b0ab", "patch": "@@ -1,3 +1,8 @@\n+2022-10-31  Lulu Cheng  <chenglulu@loongson.cn>\n+\t    qijingwen  <qijingwen@loongson.cn>\n+\n+\t* configure.tgt: Add loongarch support.\n+\n 2022-10-12  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}]}