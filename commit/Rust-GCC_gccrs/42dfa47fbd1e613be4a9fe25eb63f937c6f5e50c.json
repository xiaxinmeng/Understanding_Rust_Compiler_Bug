{"sha": "42dfa47fbd1e613be4a9fe25eb63f937c6f5e50c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJkZmE0N2ZiZDFlNjEzYmU0YTlmZTI1ZWI2M2Y5MzdjNmY1ZTUwYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-07T04:06:43Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-07T04:06:43Z"}, "message": "(finish_decl): Don't do expand_decl_init for FUNCTION_DECL.\n\n(finish_struct):  If bit field is of an unsigned\ntype that promotes to int, promote it unsigned if traditional\nor if it is the same size as int.\n(start_function):  Ditto for function return value.\n(finish_function): Test only can_reach_end for the warning\nabout reaching the end of a non-void function.\n(poplevel): If apparently nested inline function has\nDECL_ABSTRACT_ORIGIN, don't output it; propagate TREE_ADDRESSABLE.\n(pushdecl): When copying inline details into an extern decl,\ncopy DECL_RESULT, TREE_ASM_WRITTEN.  Set DECL_ABSTRACT_ORIGIN.\n\nFrom-SVN: r1781", "tree": {"sha": "bccae51e7526a3c8899c5fddf9e132811593f2c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bccae51e7526a3c8899c5fddf9e132811593f2c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42dfa47fbd1e613be4a9fe25eb63f937c6f5e50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42dfa47fbd1e613be4a9fe25eb63f937c6f5e50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42dfa47fbd1e613be4a9fe25eb63f937c6f5e50c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42dfa47fbd1e613be4a9fe25eb63f937c6f5e50c/comments", "author": null, "committer": null, "parents": [{"sha": "5b00b2b9433b73c731807a5f9ea30336a262da32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b00b2b9433b73c731807a5f9ea30336a262da32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b00b2b9433b73c731807a5f9ea30336a262da32"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "991dee9fcaf231876fff2c3a9cdcaa9d1306b3fa", "filename": "gcc/c-decl.c", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42dfa47fbd1e613be4a9fe25eb63f937c6f5e50c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42dfa47fbd1e613be4a9fe25eb63f937c6f5e50c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=42dfa47fbd1e613be4a9fe25eb63f937c6f5e50c", "patch": "@@ -854,7 +854,15 @@ poplevel (keep, reverse, functionbody)\n \t&& ! TREE_ASM_WRITTEN (decl)\n \t&& DECL_INITIAL (decl) != 0\n \t&& TREE_ADDRESSABLE (decl))\n-      output_inline_function (decl);\n+      {\n+\t/* If this decl was copied from a file-scope decl\n+\t   on account of a block-scope extern decl,\n+\t   propagate TREE_ADDRESSABLE to the file-scope decl.  */\n+\tif (DECL_ABSTRACT_ORIGIN (decl) != 0)\n+\t  TREE_ADDRESSABLE (DECL_ABSTRACT_ORIGIN (decl)) = 1;\n+\telse\n+\t  output_inline_function (decl);\n+      }\n \n   /* If there were any declarations or structure tags in that level,\n      or if this level is a function body,\n@@ -1844,6 +1852,9 @@ pushdecl (x)\n \t\t      DECL_INITIAL (x) = DECL_INITIAL (oldglobal);\n \t\t      DECL_SAVED_INSNS (x) = DECL_SAVED_INSNS (oldglobal);\n \t\t      DECL_ARGUMENTS (x) = DECL_ARGUMENTS (oldglobal);\n+\t\t      DECL_RESULT (x) = DECL_RESULT (oldglobal);\n+\t\t      TREE_ASM_WRITTEN (x) = TREE_ASM_WRITTEN (oldglobal);\n+\t\t      DECL_ABSTRACT_ORIGIN (x) = oldglobal;\n \t\t    }\n \t\t  /* Inner extern decl is built-in if global one is.  */\n \t\t  if (DECL_BUILT_IN (oldglobal))\n@@ -3195,7 +3206,8 @@ finish_decl (decl, init, asmspec_tree)\n \t      expand_decl (decl);\n \t    }\n \t  /* Compute and store the initial value.  */\n-\t  expand_decl_init (decl);\n+\t  if (TREE_CODE (decl) != FUNCTION_DECL)\n+\t    expand_decl_init (decl);\n \t}\n     }\n \n@@ -4871,7 +4883,18 @@ finish_struct (t, fieldlist)\n   for (x = fieldlist; x; x = TREE_CHAIN (x))\n     if (DECL_BIT_FIELD (x)\n \t&& C_PROMOTING_INTEGER_TYPE_P (TREE_TYPE (x)))\n-      TREE_TYPE (x) = integer_type_node;\n+    {\n+      tree type = TREE_TYPE (x);\n+\n+      /* Preserve unsignedness if traditional or if not really any wider.  */\n+      if (TREE_UNSIGNED (type)\n+\t  && (flag_traditional\n+\t      || (TYPE_PRECISION (type)\n+\t\t  == TYPE_PRECISION (integer_type_node))))\n+\tTREE_TYPE (x) = unsigned_type_node;\n+      else\n+\tTREE_TYPE (x) = integer_type_node;\n+    }\n \n   /* If this structure or union completes the type of any previous\n      variable declaration, lay it out and output its rtl.  */\n@@ -5240,7 +5263,17 @@ start_function (declspecs, declarator, nested)\n   restype = TREE_TYPE (TREE_TYPE (current_function_decl));\n   /* Promote the value to int before returning it.  */\n   if (C_PROMOTING_INTEGER_TYPE_P (restype))\n-    restype = integer_type_node;\n+    {\n+      /* It retains unsignedness if traditional\n+\t or if not really getting wider.  */\n+      if (TREE_UNSIGNED (restype)\n+\t  && (flag_traditional\n+\t      || (TYPE_PRECISION (restype)\n+\t\t  == TYPE_PRECISION (integer_type_node))))\n+\trestype = unsigned_type_node;\n+      else\n+\trestype = integer_type_node;\n+    }\n   DECL_RESULT (current_function_decl)\n     = build_decl (RESULT_DECL, NULL_TREE, restype);\n \n@@ -5852,7 +5885,7 @@ finish_function (nested)\n \n   if (TREE_THIS_VOLATILE (fndecl) && current_function_returns_null)\n     warning (\"`volatile' function does return\");\n-  else if (warn_return_type && current_function_returns_null\n+  else if (warn_return_type && can_reach_end\n \t   && TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (fndecl))) != void_type_node)\n     /* If this function returns non-void and control can drop through,\n        complain.  */"}]}