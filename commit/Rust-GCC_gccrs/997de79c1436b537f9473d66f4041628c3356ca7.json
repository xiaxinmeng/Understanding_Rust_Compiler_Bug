{"sha": "997de79c1436b537f9473d66f4041628c3356ca7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk3ZGU3OWMxNDM2YjUzN2Y5NDczZDY2ZjQwNDE2MjhjMzM1NmNhNw==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-03-19T06:13:20Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-03-19T06:13:20Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r520", "tree": {"sha": "8b297f15d30c5f20370d4d6a2a5f60741ba140b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b297f15d30c5f20370d4d6a2a5f60741ba140b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/997de79c1436b537f9473d66f4041628c3356ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997de79c1436b537f9473d66f4041628c3356ca7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997de79c1436b537f9473d66f4041628c3356ca7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997de79c1436b537f9473d66f4041628c3356ca7/comments", "author": null, "committer": null, "parents": [{"sha": "f4ce55dfedb75cf7e1fe8a9d6992ae2dfe9432e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ce55dfedb75cf7e1fe8a9d6992ae2dfe9432e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ce55dfedb75cf7e1fe8a9d6992ae2dfe9432e9"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "3fdd4060689bf8324905432eea44feb09cf04b8a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/997de79c1436b537f9473d66f4041628c3356ca7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/997de79c1436b537f9473d66f4041628c3356ca7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=997de79c1436b537f9473d66f4041628c3356ca7", "patch": "@@ -31,6 +31,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"tree.h\"\n #include \"flags.h\"\n \n+#ifdef EXTRA_CONSTRAINT\n+/* If EXTRA_CONSTRAINT is defined, then the 'S'\n+   constraint in REG_CLASS_FROM_LETTER will no longer work, and various\n+   asm statements that need 'S' for class SIREG will break.  */\n+ #error EXTRA_CONSTRAINT conflicts with S constraint letter\n+#endif\n+\n #define AT_BP(mode) (gen_rtx (MEM, (mode), frame_pointer_rtx))\n \n extern FILE *asm_out_file;\n@@ -318,7 +325,12 @@ output_move_double (operands)\n       if (GET_CODE (operands[1]) == CONST_DOUBLE)\n \tsplit_double (operands[1], &operands[1], &latehalf[1]);\n       else if (CONSTANT_P (operands[1]))\n-\tlatehalf[1] = const0_rtx;\n+\t{\n+\t  if (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) < 0)\n+\t    latehalf[1] = constm1_rtx;\n+\t  else\n+\t    latehalf[1] = const0_rtx;\n+\t}\n     }\n   else\n     latehalf[1] = operands[1];\n@@ -791,11 +803,6 @@ function_epilogue (file, size)\n       else\n \t  output_asm_insn (\"ret %1\", xops);\n     }\n-  else if (current_function_returns_struct)\n-    {\n-      xops[0] = gen_rtx (CONST_INT, VOIDmode, 4);\n-      output_asm_insn (\"ret %0\", xops);\n-    }\n   else\n     output_asm_insn (\"ret\", xops);\n }"}]}