{"sha": "c714f03d304611def7fd70e3b623e1969d8ac947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcxNGYwM2QzMDQ2MTFkZWY3ZmQ3MGUzYjYyM2UxOTY5ZDhhYzk0Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-07-01T03:56:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-07-01T03:56:35Z"}, "message": "alpha.c (alpha_initialize_trampoline): Take arguments describing the layout.\n\n        * alpha.c (alpha_initialize_trampoline): Take arguments describing\n        the layout.  Use ptr_mode.  Disable hint generation.  Use gen_imb.\n        * alpha.h (INITIALIZE_TRAMPOLINE): Pass extra args to the init func.\n        (TRANSFER_FROM_TRAMPOLINE): Move ...\n        * alpha/osf.h: ... here.\n        * alpha/vms.h (INITIALIZE_TRAMPOLINE): Use alpha_initialize_trampoline.\n        (TRANSFER_FROM_TRAMPOLINE): Remove undef.\n        * alpha/win-nt.h: Likewise.\n        * alpha/vxworks.h: Likewise.\n        * alpha/linux.h: Revert gcc2 merge lossage.\n\nFrom-SVN: r20864", "tree": {"sha": "593c483d2d5c85a0bb76c9322f19bc0ad855aebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/593c483d2d5c85a0bb76c9322f19bc0ad855aebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c714f03d304611def7fd70e3b623e1969d8ac947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c714f03d304611def7fd70e3b623e1969d8ac947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c714f03d304611def7fd70e3b623e1969d8ac947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c714f03d304611def7fd70e3b623e1969d8ac947/comments", "author": null, "committer": null, "parents": [{"sha": "03369c9399903579d7a4a6366fea699a06b4ee41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03369c9399903579d7a4a6366fea699a06b4ee41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03369c9399903579d7a4a6366fea699a06b4ee41"}], "stats": {"total": 179, "additions": 79, "deletions": 100}, "files": [{"sha": "ae29ed1021d979187a45a645e6a6c3873c24f5a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c714f03d304611def7fd70e3b623e1969d8ac947", "patch": "@@ -1,3 +1,17 @@\n+Wed Jul  1 03:48:00 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (alpha_initialize_trampoline): Take arguments describing\n+\tthe layout.  Use ptr_mode.  Disable hint generation.  Use gen_imb.\n+\t* alpha.h (INITIALIZE_TRAMPOLINE): Pass extra args to the init func.\n+\t(TRANSFER_FROM_TRAMPOLINE): Move ...\n+\t* alpha/osf.h: ... here.\n+\t* alpha/vms.h (INITIALIZE_TRAMPOLINE): Use alpha_initialize_trampoline.\n+\t(TRANSFER_FROM_TRAMPOLINE): Remove undef.\n+\t* alpha/win-nt.h: Likewise.\n+\t* alpha/vxworks.h: Likewise.\n+\n+\t* alpha/linux.h: Revert gcc2 merge lossage.\n+\n Wed Jul  1 10:56:55 1998  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n \n \t* c-decl.c (grokdeclarator): Don't warn about implicit int in"}, {"sha": "d4cff504533de00b7fbe7a2d7e223202388e9409", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c714f03d304611def7fd70e3b623e1969d8ac947", "patch": "@@ -2825,46 +2825,57 @@ print_operand (file, x, code)\n /* Emit RTL insns to initialize the variable parts of a trampoline at\n    TRAMP. FNADDR is an RTX for the address of the function's pure\n    code.  CXT is an RTX for the static chain value for the function.\n+\n+   The three offset parameters are for the individual template's\n+   layout.  A JMPOFS < 0 indicates that the trampoline does not \n+   contain instructions at all.\n+\n    We assume here that a function will be called many more times than\n    its address is taken (e.g., it might be passed to qsort), so we\n    take the trouble to initialize the \"hint\" field in the JMP insn.\n    Note that the hint field is PC (new) + 4 * bits 13:0.  */\n \n void\n-alpha_initialize_trampoline (tramp, fnaddr, cxt)\n-     rtx tramp;\n-     rtx fnaddr;\n-     rtx cxt;\n+alpha_initialize_trampoline (tramp, fnaddr, cxt, fnofs, cxtofs, jmpofs)\n+     rtx tramp, fnaddr, cxt;\n+     int fnofs, cxtofs, jmpofs;\n {\n   rtx temp, temp1, addr;\n \n   /* Store function address and CXT.  */\n-  addr = memory_address (Pmode, plus_constant (tramp, 16));\n-  emit_move_insn (gen_rtx (MEM, Pmode, addr), fnaddr);\n-  addr = memory_address (Pmode, plus_constant (tramp, 24));\n-  emit_move_insn (gen_rtx (MEM, Pmode, addr), cxt);\n-\n-  /* Compute hint value.  */\n-  temp = force_operand (plus_constant (tramp, 12), NULL_RTX);\n-  temp = expand_binop (DImode, sub_optab, fnaddr, temp, temp, 1, OPTAB_WIDEN);\n-  temp = expand_shift (RSHIFT_EXPR, Pmode, temp,\n-\t\t       build_int_2 (2, 0), NULL_RTX, 1);\n-  temp = expand_and (gen_lowpart (SImode, temp), GEN_INT (0x3fff), 0);\n-\n-  /* Merge in the hint.  */\n-  addr = memory_address (SImode, plus_constant (tramp, 8));\n-  temp1 = force_reg (SImode, gen_rtx (MEM, SImode, addr));\n-  temp1 = expand_and (temp1, GEN_INT (0xffffc000), NULL_RTX);\n-  temp1 = expand_binop (SImode, ior_optab, temp1, temp, temp1, 1, OPTAB_WIDEN);\n-  emit_move_insn (gen_rtx (MEM, SImode, addr), temp1);\n+  addr = memory_address (ptr_mode, plus_constant (tramp, fnofs));\n+  emit_move_insn (gen_rtx (MEM, ptr_mode, addr), fnaddr);\n+  addr = memory_address (ptr_mode, plus_constant (tramp, cxtofs));\n+  emit_move_insn (gen_rtx (MEM, ptr_mode, addr), cxt);\n+\n+  /* This has been disabled since the hint only has a 32k range, and in\n+     no existing OS is the stack within 32k of the text segment. */\n+  if (0 && jmpofs >= 0)\n+    {\n+      /* Compute hint value.  */\n+      temp = force_operand (plus_constant (tramp, jmpofs+4), NULL_RTX);\n+      temp = expand_binop (DImode, sub_optab, fnaddr, temp, temp, 1,\n+\t\t\t   OPTAB_WIDEN);\n+      temp = expand_shift (RSHIFT_EXPR, Pmode, temp,\n+\t\t           build_int_2 (2, 0), NULL_RTX, 1);\n+      temp = expand_and (gen_lowpart (SImode, temp), GEN_INT (0x3fff), 0);\n+\n+      /* Merge in the hint.  */\n+      addr = memory_address (SImode, plus_constant (tramp, jmpofs));\n+      temp1 = force_reg (SImode, gen_rtx (MEM, SImode, addr));\n+      temp1 = expand_and (temp1, GEN_INT (0xffffc000), NULL_RTX);\n+      temp1 = expand_binop (SImode, ior_optab, temp1, temp, temp1, 1,\n+\t\t\t    OPTAB_WIDEN);\n+      emit_move_insn (gen_rtx (MEM, SImode, addr), temp1);\n+    }\n \n #ifdef TRANSFER_FROM_TRAMPOLINE\n   emit_library_call (gen_rtx (SYMBOL_REF, Pmode, \"__enable_execute_stack\"),\n \t\t     0, VOIDmode, 1, addr, Pmode);\n #endif\n \n-  emit_insn (gen_rtx (UNSPEC_VOLATILE, VOIDmode,\n-\t\t      gen_rtvec (1, const0_rtx), 0));\n+  if (jmpofs >= 0)\n+    emit_insn (gen_imb ());\n }\n \f\n /* Do what is necessary for `va_start'.  The argument is ignored;"}, {"sha": "2bd93c3bb3bd4a0465c02b8fe3dacce5b059254e", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=c714f03d304611def7fd70e3b623e1969d8ac947", "patch": "@@ -1182,13 +1182,13 @@ extern void output_end_prologue ();\n    aligned to FUNCTION_BOUNDARY, which is 64 bits.  */\n \n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\\\n-{\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\tldq $1,24($27)\\n\");\t\t\\\n   fprintf (FILE, \"\\tldq $27,16($27)\\n\");\t\\\n   fprintf (FILE, \"\\tjmp $31,($27),0\\n\");\t\\\n   fprintf (FILE, \"\\tnop\\n\");\t\t\t\\\n   fprintf (FILE, \"\\t.quad 0,0\\n\");\t\t\\\n-}\n+} while (0)\n \n /* Section in which to place the trampoline.  On Alpha, instructions\n    may only be placed in a text segment.  */\n@@ -1201,31 +1201,10 @@ extern void output_end_prologue ();\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  We assume\n-   here that a function will be called many more times than its address\n-   is taken (e.g., it might be passed to qsort), so we take the trouble \n-   to initialize the \"hint\" field in the JMP insn.  Note that the hint\n-   field is PC (new) + 4 * bits 13:0.  */\n+   CXT is an RTX for the static chain value for the function.  */\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n-  alpha_initialize_trampoline (TRAMP, FNADDR, CXT)\n-\n-/* Attempt to turn on access permissions for the stack.  */\n-\n-#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-__enable_execute_stack (addr)\t\t\t\t\t\t\\\n-     void *addr;\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  long size = getpagesize ();\t\t\t\t\t\t\\\n-  long mask = ~(size-1);\t\t\t\t\t\t\\\n-  char *page = (char *) (((long) addr) & mask);\t\t\t\t\\\n-  char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n-\t\t\t\t\t\t\t\t\t\\\n-  /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */\t\t\t\t\\\n-  if (mprotect (page, end - page, 7) < 0)\t\t\t\t\\\n-    perror (\"mprotect of trampoline code\");\t\t\t\t\\\n-}\n+  alpha_initialize_trampoline (TRAMP, FNADDR, CXT, 16, 24, 8)\n \n /* A C expression whose value is RTL representing the value of the return\n    address for the frame COUNT steps up from the current frame.\n@@ -1240,7 +1219,6 @@ extern struct rtx_def *alpha_return_addr ();\n \n #define INIT_EXPANDERS  alpha_init_expanders ()\n extern void alpha_init_expanders ();\n-\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}, {"sha": "77c0028b7e6113d4d50277181a5dfae51b63ae05", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=c714f03d304611def7fd70e3b623e1969d8ac947", "patch": "@@ -3970,7 +3970,7 @@\n ;; Technically the type for call_pal is jsr, but we use that for determining\n ;; if we need a GP.  Use ibr instead since it has the same EV5 scheduling\n ;; characteristics.\n-(define_insn \"\"\n+(define_insn \"imb\"\n   [(unspec_volatile [(const_int 0)] 0)]\n   \"\"\n   \"call_pal 0x86\""}, {"sha": "00df8e590369f8d0561a6b547949ba41d204da88", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=c714f03d304611def7fd70e3b623e1969d8ac947", "patch": "@@ -1,7 +1,7 @@\n-/* Definitions of target machine for GNU compiler, for Alpha Linux-based GNU\n-   systems using ECOFF.\n+/* Definitions of target machine for GNU compiler,\n+   for Alpha Linux-based GNU systems.\n    Copyright (C) 1996, 1997, 1998 Free Software Foundation, Inc.\n-   Contributed by Bob Manson.\n+   Contributed by Richard Henderson.\n \n This file is part of GNU CC.\n \n@@ -43,5 +43,3 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Don't care about faults in the prologue.  */\n #undef TARGET_CAN_FAULT_IN_PROLOGUE\n #define TARGET_CAN_FAULT_IN_PROLOGUE 1\n-\n-#undef ASM_FINAL_SPEC"}, {"sha": "1e8e505d97898fdf932766c3338dd1d75a456a9e", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=c714f03d304611def7fd70e3b623e1969d8ac947", "patch": "@@ -108,3 +108,20 @@ Boston, MA 02111-1307, USA.  */\n #ifndef CROSS_COMPILE\n #define HAVE_STAMP_H 1\n #endif\n+\n+/* Attempt to turn on access permissions for the stack.  */\n+\n+#define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+__enable_execute_stack (addr)\t\t\t\t\t\t\\\n+     void *addr;\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  long size = getpagesize ();\t\t\t\t\t\t\\\n+  long mask = ~(size-1);\t\t\t\t\t\t\\\n+  char *page = (char *) (((long) addr) & mask);\t\t\t\t\\\n+  char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */\t\t\t\t\\\n+  if (mprotect (page, end - page, 7) < 0)\t\t\t\t\\\n+    perror (\"mprotect of trampoline code\");\t\t\t\t\\\n+}"}, {"sha": "e318f0bfde475fe67f671cf1effebf48e9653055", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=c714f03d304611def7fd70e3b623e1969d8ac947", "patch": "@@ -405,19 +405,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n    CXT is an RTX for the static chain value for the function.  */\n \n #undef INITIALIZE_TRAMPOLINE\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t  \\\n-{\t\t\t\t\t\t\t\t\t  \\\n-  emit_move_insn (gen_rtx (MEM, Pmode,                                    \\\n-\t\t\t   memory_address (Pmode,\t\t\t  \\\n-\t\t\t\t\t   plus_constant ((TRAMP), 16))), \\\n-\t\t  (FNADDR));\t\t                                  \\\n-  emit_move_insn (gen_rtx (MEM, Pmode,\t\t\t\t\t  \\\n-\t\t\t   memory_address (Pmode,\t\t\t  \\\n-\t\t\t\t\t   plus_constant ((TRAMP), 24))), \\\n-\t\t  (CXT));\t\t\t\t\t\t  \\\n-}\n-\n-#undef TRANSFER_FROM_TRAMPOLINE\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n+  alpha_initialize_trampoline (TRAMP, FNADDR, CXT, 16, 24, -1)\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */"}, {"sha": "9d21ad9b0cc8e5663f438b7f89ad3ac20bc3daae", "filename": "gcc/config/alpha/vxworks.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvxworks.h?ref=c714f03d304611def7fd70e3b623e1969d8ac947", "patch": "@@ -53,5 +53,3 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ENDFILE_SPEC\n #define ENDFILE_SPEC \"\"\n-\n-#undef TRANSFER_FROM_TRAMPOLINE"}, {"sha": "1233a80a68f3b11df8c6a35661aa1cfa8a465d52", "filename": "gcc/config/alpha/win-nt.h", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c714f03d304611def7fd70e3b623e1969d8ac947/gcc%2Fconfig%2Falpha%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fwin-nt.h?ref=c714f03d304611def7fd70e3b623e1969d8ac947", "patch": "@@ -101,37 +101,11 @@ Boston, MA 02111-1307, USA.  */\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function. \n-\n-   This differs from the standard version in that:\n-\n-   We are not passed the current address in any register, and so have to \n-   load it ourselves.\n-\n-   We do not initialize the \"hint\" field because it only has an 8k\n-   range and so the target is in range of something on the stack. \n-   Omitting the hint saves a bogus branch-prediction cache line load.\n-\n-   Always have an executable stack -- no need for a system call.\n- */\n+   CXT is an RTX for the static chain value for the function.   */\n \n #undef INITIALIZE_TRAMPOLINE\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  rtx _addr, _val;\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  _addr = memory_address (Pmode, plus_constant ((TRAMP), 16));\t\t\\\n-  _val = force_reg(Pmode, (FNADDR));\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, SImode, _addr),\t\t\t\t\\\n-\t\t  gen_rtx (SUBREG, SImode, _val, 0));\t\t\t\\\n-  _addr = memory_address (Pmode, plus_constant ((TRAMP), 20));\t\t\\\n-  _val = force_reg(Pmode, (CXT));\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx (MEM, SImode, _addr),\t\t\t\t\\\n-\t\t  gen_rtx (SUBREG, SImode, _val, 0));\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  emit_insn (gen_rtx (UNSPEC_VOLATILE, VOIDmode,\t\t\t\\\n-                      gen_rtvec (1, const0_rtx), 0));\t\t\t\\\n-}\n+#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n+  alpha_initialize_trampoline (TRAMP, FNADDR, CXT, 16, 20, 12)\n \n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */"}]}