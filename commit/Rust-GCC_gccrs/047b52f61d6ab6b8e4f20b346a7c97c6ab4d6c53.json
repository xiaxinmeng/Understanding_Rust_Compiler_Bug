{"sha": "047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3YjUyZjYxZDZhYjZiOGU0ZjIwYjM0NmE3Yzk3YzZhYjRkNmM1Mw==", "commit": {"author": {"name": "Matthew Fortune", "email": "matthew.fortune@imgtec.com", "date": "2015-01-14T22:08:37Z"}, "committer": {"name": "Matthew Fortune", "email": "mpf@gcc.gnu.org", "date": "2015-01-14T22:08:37Z"}, "message": "[MIPS] Update the ZC constraint.\n\ngcc/\n\n\t* config/mips/constraints.md (ZC): Add support for R6 LL/SC\n\toffsets.\n\t(ZD): Update to use ISA_HAS_9BIT_DISPLACEMENT.\n\t* config/mips/mips.h (ISA_HAS_PREFETCH_9BIT): Rename to...\n\t(ISA_HAS_9BIT_DISPLACEMENT): ... this. New macro.\n\t* config/mips/sync.md (sync_compare_and_swap<mode>): Use ZC\n\tinstead of ZR for the memory operand of LL/SC.\n\t(compare_and_swap_12, sync_add<mode>): Likewise.\n\t(sync_<optab>_12, sync_old_<optab>_12): Likewise.\n\t(sync_new_<optab>_12, sync_nand_12): Likewise.\n\t(sync_old_nand_12, sync_new_nand_12): Likewise.\n\t(sync_sub<mode>, sync_old_add<mode>): Likewise.\n\t(sync_old_sub<mode>, sync_new_add<mode>): Likewise.\n\t(sync_new_sub<mode>, sync_<optab><mode>): Likewise.\n\t(sync_old_<optab><mode>, sync_new_<optab><mode>\"): Likewise.\n\t(sync_nand<mode>, sync_old_nand<mode>): Likewise.\n\t(sync_new_nand<mode>, sync_lock_test_and_set<mode>): Likewise.\n\t(test_and_set_12, atomic_compare_and_swap<mode>): Likewise.\n\t(atomic_exchange<mode>_llsc, atomic_fetch_add<mode>_llsc): Likewise.\n\t* doc/md.texi (ZC): Update description.\n\nFrom-SVN: r219619", "tree": {"sha": "848d67c53719fe441ed5567089b8bc0e5de325e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/848d67c53719fe441ed5567089b8bc0e5de325e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/comments", "author": {"login": "mfortune", "id": 10220247, "node_id": "MDQ6VXNlcjEwMjIwMjQ3", "avatar_url": "https://avatars.githubusercontent.com/u/10220247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfortune", "html_url": "https://github.com/mfortune", "followers_url": "https://api.github.com/users/mfortune/followers", "following_url": "https://api.github.com/users/mfortune/following{/other_user}", "gists_url": "https://api.github.com/users/mfortune/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfortune/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfortune/subscriptions", "organizations_url": "https://api.github.com/users/mfortune/orgs", "repos_url": "https://api.github.com/users/mfortune/repos", "events_url": "https://api.github.com/users/mfortune/events{/privacy}", "received_events_url": "https://api.github.com/users/mfortune/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fc39e218995d7edf16eb28928d76e44df731e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc39e218995d7edf16eb28928d76e44df731e9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fc39e218995d7edf16eb28928d76e44df731e9c"}], "stats": {"total": 99, "additions": 60, "deletions": 39}, "files": [{"sha": "38a8643d0f28e5d91b79d1ad3e445512a3026668", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53", "patch": "@@ -1,3 +1,26 @@\n+2015-01-14  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\n+\t* config/mips/constraints.md (ZC): Add support for R6 LL/SC\n+\toffsets.\n+\t(ZD): Update to use ISA_HAS_9BIT_DISPLACEMENT.\n+\t* config/mips/mips.h (ISA_HAS_PREFETCH_9BIT): Rename to...\n+\t(ISA_HAS_9BIT_DISPLACEMENT): ... this. New macro.\n+\t* config/mips/sync.md (sync_compare_and_swap<mode>): Use ZC\n+\tinstead of ZR for the memory operand of LL/SC.\n+\t(compare_and_swap_12, sync_add<mode>): Likewise.\n+\t(sync_<optab>_12, sync_old_<optab>_12): Likewise.\n+\t(sync_new_<optab>_12, sync_nand_12): Likewise.\n+\t(sync_old_nand_12, sync_new_nand_12): Likewise.\n+\t(sync_sub<mode>, sync_old_add<mode>): Likewise.\n+\t(sync_old_sub<mode>, sync_new_add<mode>): Likewise.\n+\t(sync_new_sub<mode>, sync_<optab><mode>): Likewise.\n+\t(sync_old_<optab><mode>, sync_new_<optab><mode>\"): Likewise.\n+\t(sync_nand<mode>, sync_old_nand<mode>): Likewise.\n+\t(sync_new_nand<mode>, sync_lock_test_and_set<mode>): Likewise.\n+\t(test_and_set_12, atomic_compare_and_swap<mode>): Likewise.\n+\t(atomic_exchange<mode>_llsc, atomic_fetch_add<mode>_llsc): Likewise.\n+\t* doc/md.texi (ZC): Update description.\n+\n 2015-01-14  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* builtins.c (expand_builtin_atomic_exchange): Remove error when"}, {"sha": "7d1a8baeaaa391741c3e66794aca493276bd9c54", "filename": "gcc/config/mips/constraints.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/gcc%2Fconfig%2Fmips%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/gcc%2Fconfig%2Fmips%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fconstraints.md?ref=047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53", "patch": "@@ -309,23 +309,23 @@\n    (match_operand 0 \"low_bitmask_operand\"))\n \n (define_memory_constraint \"ZC\"\n-  \"When compiling microMIPS code, this constraint matches a memory operand\n-   whose address is formed from a base register and a 12-bit offset.  These\n-   operands can be used for microMIPS instructions such as @code{ll} and\n-   @code{sc}.  When not compiling for microMIPS code, @code{ZC} is\n-   equivalent to @code{R}.\"\n+  \"A memory operand whose address is formed by a base register and offset\n+   that is suitable for use in instructions with the same addressing mode\n+   as @code{ll} and @code{sc}.\"\n   (and (match_code \"mem\")\n        (if_then_else\n \t (match_test \"TARGET_MICROMIPS\")\n \t (match_test \"umips_12bit_offset_address_p (XEXP (op, 0), mode)\")\n-\t (match_test \"mips_address_insns (XEXP (op, 0), mode, false)\"))))\n+\t (if_then_else (match_test \"ISA_HAS_9BIT_DISPLACEMENT\")\n+\t   (match_test \"mips_9bit_offset_address_p (XEXP (op, 0), mode)\")\n+\t   (match_test \"mips_address_insns (XEXP (op, 0), mode, false)\")))))\n \n (define_address_constraint \"ZD\"\n   \"An address suitable for a @code{prefetch} instruction, or for any other\n    instruction with the same addressing mode as @code{prefetch}.\"\n    (if_then_else (match_test \"TARGET_MICROMIPS\")\n \t\t (match_test \"umips_12bit_offset_address_p (op, mode)\")\n-\t  (if_then_else (match_test \"ISA_HAS_PREFETCH_9BIT\")\n+\t  (if_then_else (match_test \"ISA_HAS_9BIT_DISPLACEMENT\")\n \t\t\t(match_test \"mips_9bit_offset_address_p (op, mode)\")\n \t\t\t(match_test \"mips_address_insns (op, mode, false)\"))))\n "}, {"sha": "f6f785393f51d7ccb18e7e1387433b10a6bf8017", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53", "patch": "@@ -1089,8 +1089,8 @@ struct mips_cpu_info {\n \t\t\t\t  || mips_isa_rev >= 1)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n-/* ISA has data prefetch with limited 9-bit displacement.  */\n-#define ISA_HAS_PREFETCH_9BIT\t(mips_isa_rev >= 6)\n+/* ISA has data prefetch, LL and SC with limited 9-bit displacement.  */\n+#define ISA_HAS_9BIT_DISPLACEMENT\t(mips_isa_rev >= 6)\n \n /* ISA has data indexed prefetch instructions.  This controls use of\n    'prefx', along with TARGET_HARD_FLOAT and TARGET_DOUBLE_FLOAT."}, {"sha": "a4f8376441fffbb868b125ec0a4a45bac4695875", "filename": "gcc/config/mips/sync.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/gcc%2Fconfig%2Fmips%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/gcc%2Fconfig%2Fmips%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsync.md?ref=047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53", "patch": "@@ -59,7 +59,7 @@\n ;; Can be removed in favor of atomic_compare_and_swap below.\n (define_insn \"sync_compare_and_swap<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+ZR,ZR\"))\n+\t(match_operand:GPR 1 \"memory_operand\" \"+ZC,ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR [(match_operand:GPR 2 \"reg_or_0_operand\" \"dJ,dJ\")\n \t\t\t      (match_operand:GPR 3 \"arith_operand\" \"I,d\")]\n@@ -89,7 +89,7 @@\n ;; Helper insn for mips_expand_atomic_qihi.\n (define_insn \"compare_and_swap_12\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:SI 1 \"memory_operand\" \"+ZR,ZR\"))\n+\t(match_operand:SI 1 \"memory_operand\" \"+ZC,ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"d,d\")\n \t\t\t     (match_operand:SI 3 \"register_operand\" \"d,d\")\n@@ -106,7 +106,7 @@\n    (set_attr \"sync_insn1_op2\" \"5\")])\n \n (define_insn \"sync_add<mode>\"\n-  [(set (match_operand:GPR 0 \"memory_operand\" \"+ZR,ZR\")\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+ZC,ZC\")\n \t(unspec_volatile:GPR\n           [(plus:GPR (match_dup 0)\n \t\t     (match_operand:GPR 1 \"arith_operand\" \"I,d\"))]\n@@ -134,7 +134,7 @@\n \n ;; Helper insn for sync_<optab><mode>\n (define_insn \"sync_<optab>_12\"\n-  [(set (match_operand:SI 0 \"memory_operand\" \"+ZR\")\n+  [(set (match_operand:SI 0 \"memory_operand\" \"+ZC\")\n \t(unspec_volatile:SI\n           [(match_operand:SI 1 \"register_operand\" \"d\")\n \t   (match_operand:SI 2 \"register_operand\" \"d\")\n@@ -174,7 +174,7 @@\n ;; Helper insn for sync_old_<optab><mode>\n (define_insn \"sync_old_<optab>_12\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-\t(match_operand:SI 1 \"memory_operand\" \"+ZR\"))\n+\t(match_operand:SI 1 \"memory_operand\" \"+ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:SI\n           [(match_operand:SI 2 \"register_operand\" \"d\")\n@@ -217,7 +217,7 @@\n (define_insn \"sync_new_<optab>_12\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n \t(unspec_volatile:SI\n-          [(match_operand:SI 1 \"memory_operand\" \"+ZR\")\n+          [(match_operand:SI 1 \"memory_operand\" \"+ZC\")\n \t   (match_operand:SI 2 \"register_operand\" \"d\")\n \t   (match_operand:SI 3 \"register_operand\" \"d\")\n \t   (atomic_hiqi_op:SI (match_dup 0)\n@@ -257,7 +257,7 @@\n \n ;; Helper insn for sync_nand<mode>\n (define_insn \"sync_nand_12\"\n-  [(set (match_operand:SI 0 \"memory_operand\" \"+ZR\")\n+  [(set (match_operand:SI 0 \"memory_operand\" \"+ZC\")\n \t(unspec_volatile:SI\n           [(match_operand:SI 1 \"register_operand\" \"d\")\n \t   (match_operand:SI 2 \"register_operand\" \"d\")\n@@ -296,7 +296,7 @@\n ;; Helper insn for sync_old_nand<mode>\n (define_insn \"sync_old_nand_12\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-\t(match_operand:SI 1 \"memory_operand\" \"+ZR\"))\n+\t(match_operand:SI 1 \"memory_operand\" \"+ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:SI\n           [(match_operand:SI 2 \"register_operand\" \"d\")\n@@ -337,7 +337,7 @@\n (define_insn \"sync_new_nand_12\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n \t(unspec_volatile:SI\n-          [(match_operand:SI 1 \"memory_operand\" \"+ZR\")\n+          [(match_operand:SI 1 \"memory_operand\" \"+ZC\")\n \t   (match_operand:SI 2 \"register_operand\" \"d\")\n \t   (match_operand:SI 3 \"register_operand\" \"d\")\n \t   (match_operand:SI 4 \"reg_or_0_operand\" \"dJ\")]\n@@ -360,7 +360,7 @@\n    (set_attr \"sync_insn1_op2\" \"4\")])\n \n (define_insn \"sync_sub<mode>\"\n-  [(set (match_operand:GPR 0 \"memory_operand\" \"+ZR\")\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+ZC\")\n \t(unspec_volatile:GPR\n           [(minus:GPR (match_dup 0)\n \t\t      (match_operand:GPR 1 \"register_operand\" \"d\"))]\n@@ -374,7 +374,7 @@\n ;; Can be removed in favor of atomic_fetch_add below.\n (define_insn \"sync_old_add<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+ZR,ZR\"))\n+\t(match_operand:GPR 1 \"memory_operand\" \"+ZC,ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR\n           [(plus:GPR (match_dup 1)\n@@ -389,7 +389,7 @@\n \n (define_insn \"sync_old_sub<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+ZR\"))\n+\t(match_operand:GPR 1 \"memory_operand\" \"+ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR\n           [(minus:GPR (match_dup 1)\n@@ -404,7 +404,7 @@\n \n (define_insn \"sync_new_add<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-        (plus:GPR (match_operand:GPR 1 \"memory_operand\" \"+ZR,ZR\")\n+        (plus:GPR (match_operand:GPR 1 \"memory_operand\" \"+ZC,ZC\")\n \t\t  (match_operand:GPR 2 \"arith_operand\" \"I,d\")))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR\n@@ -420,7 +420,7 @@\n \n (define_insn \"sync_new_sub<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n-        (minus:GPR (match_operand:GPR 1 \"memory_operand\" \"+ZR\")\n+        (minus:GPR (match_operand:GPR 1 \"memory_operand\" \"+ZC\")\n \t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR\n@@ -435,7 +435,7 @@\n    (set_attr \"sync_insn1_op2\" \"2\")])\n \n (define_insn \"sync_<optab><mode>\"\n-  [(set (match_operand:GPR 0 \"memory_operand\" \"+ZR,ZR\")\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+ZC,ZC\")\n \t(unspec_volatile:GPR\n           [(fetchop_bit:GPR (match_operand:GPR 1 \"uns_arith_operand\" \"K,d\")\n \t\t\t      (match_dup 0))]\n@@ -448,7 +448,7 @@\n \n (define_insn \"sync_old_<optab><mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+ZR,ZR\"))\n+\t(match_operand:GPR 1 \"memory_operand\" \"+ZC,ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR\n           [(fetchop_bit:GPR (match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")\n@@ -463,7 +463,7 @@\n \n (define_insn \"sync_new_<optab><mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+ZR,ZR\"))\n+\t(match_operand:GPR 1 \"memory_operand\" \"+ZC,ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR\n           [(fetchop_bit:GPR (match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")\n@@ -478,7 +478,7 @@\n    (set_attr \"sync_insn1_op2\" \"2\")])\n \n (define_insn \"sync_nand<mode>\"\n-  [(set (match_operand:GPR 0 \"memory_operand\" \"+ZR,ZR\")\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+ZC,ZC\")\n \t(unspec_volatile:GPR [(match_operand:GPR 1 \"uns_arith_operand\" \"K,d\")]\n \t UNSPEC_SYNC_OLD_OP))]\n   \"GENERATE_LL_SC\"\n@@ -490,7 +490,7 @@\n \n (define_insn \"sync_old_nand<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+ZR,ZR\"))\n+\t(match_operand:GPR 1 \"memory_operand\" \"+ZC,ZC\"))\n    (set (match_dup 1)\n         (unspec_volatile:GPR [(match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")]\n \t UNSPEC_SYNC_OLD_OP))]\n@@ -504,7 +504,7 @@\n \n (define_insn \"sync_new_nand<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+ZR,ZR\"))\n+\t(match_operand:GPR 1 \"memory_operand\" \"+ZC,ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR [(match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")]\n \t UNSPEC_SYNC_NEW_OP))]\n@@ -519,7 +519,7 @@\n \n (define_insn \"sync_lock_test_and_set<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+ZR,ZR\"))\n+\t(match_operand:GPR 1 \"memory_operand\" \"+ZC,ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR [(match_operand:GPR 2 \"arith_operand\" \"I,d\")]\n \t UNSPEC_SYNC_EXCHANGE))]\n@@ -546,7 +546,7 @@\n \n (define_insn \"test_and_set_12\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-\t(match_operand:SI 1 \"memory_operand\" \"+ZR\"))\n+\t(match_operand:SI 1 \"memory_operand\" \"+ZC\"))\n    (set (match_dup 1)\n \t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"d\")\n \t\t\t     (match_operand:SI 3 \"register_operand\" \"d\")\n@@ -576,7 +576,7 @@\n \t;; TODO: the obscuring unspec can be relaxed for permissive memory\n \t;; models.\n \t;; Same applies to other atomic_* patterns.\n-\t(unspec_volatile:GPR [(match_operand:GPR 2 \"memory_operand\" \"+ZR,ZR\")\n+\t(unspec_volatile:GPR [(match_operand:GPR 2 \"memory_operand\" \"+ZC,ZC\")\n \t\t\t      (match_operand:GPR 3 \"reg_or_0_operand\" \"dJ,dJ\")]\n \t UNSPEC_ATOMIC_COMPARE_AND_SWAP))\n    (set (match_operand:GPR 1 \"register_operand\" \"=&d,&d\")\n@@ -629,7 +629,7 @@\n \n (define_insn \"atomic_exchange<mode>_llsc\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(unspec_volatile:GPR [(match_operand:GPR 1 \"memory_operand\" \"+ZR,ZR\")]\n+\t(unspec_volatile:GPR [(match_operand:GPR 1 \"memory_operand\" \"+ZC,ZC\")]\n \t UNSPEC_ATOMIC_EXCHANGE))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR [(match_operand:GPR 2 \"arith_operand\" \"I,d\")]\n@@ -684,7 +684,7 @@\n \n (define_insn \"atomic_fetch_add<mode>_llsc\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(unspec_volatile:GPR [(match_operand:GPR 1 \"memory_operand\" \"+ZR,ZR\")]\n+\t(unspec_volatile:GPR [(match_operand:GPR 1 \"memory_operand\" \"+ZC,ZC\")]\n \t UNSPEC_ATOMIC_FETCH_OP))\n    (set (match_dup 1)\n \t(unspec_volatile:GPR"}, {"sha": "461ddf18d8b50aaa35095a160540480b64c70d07", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=047b52f61d6ab6b8e4f20b346a7c97c6ab4d6c53", "patch": "@@ -2991,11 +2991,9 @@ Floating-point zero.\n An address that can be used in a non-macro load or store.\n \n @item ZC\n-When compiling microMIPS code, this constraint matches a memory operand\n-whose address is formed from a base register and a 12-bit offset.  These\n-operands can be used for microMIPS instructions such as @code{ll} and\n-@code{sc}.  When not compiling for microMIPS code, @code{ZC} is\n-equivalent to @code{R}.\n+A memory operand whose address is formed by a base register and offset\n+that is suitable for use in instructions with the same addressing mode\n+as @code{ll} and @code{sc}.\n \n @item ZD\n An address suitable for a @code{prefetch} instruction, or for any other"}]}