{"sha": "cfae2bed7e333ce6366be60f5631adedab373b61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZhZTJiZWQ3ZTMzM2NlNjM2NmJlNjBmNTYzMWFkZWRhYjM3M2I2MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T07:58:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T07:58:27Z"}, "message": "[multiple changes]\n\n2011-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb: Minor reformatting.\n\n2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* bindgen.adb (Gen_Finalize_Library_Ada): Update the import string for\n\tlibrary-level finalizers.\n\t(Gen_Finalize_Library_C): Update the import string for library-level\n\tfinalizers.\n\t(Gen_Finalize_Library_Defs_C): Update the definition name of a\n\tlibrary-level finalizer.\n\t* exp_ch7.adb: Remove with and use clauses for Stringt.\n\t(Create_Finalizer): Remove local variables Conv_Name, Prag_Decl,\n\tSpec_Decl. Add local variable Body_Id. The names of library-level\n\tfinalizers are now manually fully qualified and are no longer external.\n\tA single name is now capable of servicing .NET, JVM and non-VM targets.\n\tPragma Export is no longer required to provide visibility for the name.\n\t(Create_Finalizer_String): Removed.\n\t(New_Finalizer_Name): New routine which mimics New_..._Name.\n\nFrom-SVN: r177322", "tree": {"sha": "e3568863be5d41557b621dbcf15418e52a93d1c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3568863be5d41557b621dbcf15418e52a93d1c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfae2bed7e333ce6366be60f5631adedab373b61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfae2bed7e333ce6366be60f5631adedab373b61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfae2bed7e333ce6366be60f5631adedab373b61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfae2bed7e333ce6366be60f5631adedab373b61/comments", "author": null, "committer": null, "parents": [{"sha": "01f0729a1fe9aa0907652c35b00d46ae5f239b17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f0729a1fe9aa0907652c35b00d46ae5f239b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f0729a1fe9aa0907652c35b00d46ae5f239b17"}], "stats": {"total": 732, "additions": 305, "deletions": 427}, "files": [{"sha": "22f51fa55387f6163addfa37f22c22f264b61965", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfae2bed7e333ce6366be60f5631adedab373b61/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfae2bed7e333ce6366be60f5631adedab373b61/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cfae2bed7e333ce6366be60f5631adedab373b61", "patch": "@@ -1,3 +1,24 @@\n+2011-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb: Minor reformatting.\n+\n+2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* bindgen.adb (Gen_Finalize_Library_Ada): Update the import string for\n+\tlibrary-level finalizers.\n+\t(Gen_Finalize_Library_C): Update the import string for library-level\n+\tfinalizers.\n+\t(Gen_Finalize_Library_Defs_C): Update the definition name of a\n+\tlibrary-level finalizer.\n+\t* exp_ch7.adb: Remove with and use clauses for Stringt.\n+\t(Create_Finalizer): Remove local variables Conv_Name, Prag_Decl,\n+\tSpec_Decl. Add local variable Body_Id. The names of library-level\n+\tfinalizers are now manually fully qualified and are no longer external.\n+\tA single name is now capable of servicing .NET, JVM and non-VM targets.\n+\tPragma Export is no longer required to provide visibility for the name.\n+\t(Create_Finalizer_String): Removed.\n+\t(New_Finalizer_Name): New routine which mimics New_..._Name.\n+\n 2011-08-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_elab.adb (Check_Internal_Call_Continue): Change the type of the"}, {"sha": "01637a4a31a4d6788dc33a8dc4ec27bf17cb0f07", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfae2bed7e333ce6366be60f5631adedab373b61/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfae2bed7e333ce6366be60f5631adedab373b61/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=cfae2bed7e333ce6366be60f5631adedab373b61", "patch": "@@ -1688,13 +1688,16 @@ package body Bindgen is\n             Write_Statement_Buffer;\n \n             --  Generate:\n-            --    pragma Import (CIL, F<Count>, \"xx.yy_pkg.Finalize[B/S]\");\n+            --    pragma Import (CIL, F<Count>,\n+            --                   \"xx.yy_pkg.xx__yy__finalize_[body|spec]\");\n             --    --  for .NET targets\n \n-            --    pragma Import (Java, F<Count>, \"xx$yy.Finalize[B/S]\");\n+            --    pragma Import (Java, F<Count>,\n+            --                   \"xx$yy.xx__yy__finalize_[body|spec]\");\n             --    --  for JVM targets\n \n-            --    pragma Import (Ada, F<Count>, \"xx__yy__Finalize[B/S]\");\n+            --    pragma Import (Ada, F<Count>,\n+            --                  \"xx__yy__finalize_[body|spec]\");\n             --    --  for default targets\n \n             if VM_Target = CLI_Target then\n@@ -1723,36 +1726,35 @@ package body Bindgen is\n \n             --  Perform name construction\n \n-            --  .NET   xx.yy_pkg.finalize\n+            --  .NET   xx.yy_pkg.xx__yy__finalize\n \n             if VM_Target = CLI_Target then\n                Set_Unit_Name (Mode => Dot);\n-               Set_String (\"_pkg.finalize\");\n+               Set_String (\"_pkg.\");\n \n-            --  JVM   xx$yy.finalize\n+            --  JVM   xx$yy.xx__yy__finalize\n \n             elsif VM_Target = JVM_Target then\n                Set_Unit_Name (Mode => Dollar_Sign);\n-               Set_String (\".finalize\");\n+               Set_Char ('.');\n+            end if;\n \n             --  Default   xx__yy__finalize\n \n-            else\n-               Set_Unit_Name;\n-               Set_String (\"__finalize\");\n-            end if;\n+            Set_Unit_Name;\n+            Set_String (\"__finalize_\");\n \n             --  Package spec processing\n \n             if U.Utype = Is_Spec\n               or else U.Utype = Is_Spec_Only\n             then\n-               Set_Char ('S');\n+               Set_String (\"spec\");\n \n             --  Package body processing\n \n             else\n-               Set_Char ('B');\n+               Set_String (\"body\");\n             end if;\n \n             Set_String (\"\"\");\");\n@@ -1895,12 +1897,12 @@ package body Bindgen is\n \n             --    uname_E--;\n             --    if (uname_E == 0)\n-            --       uname__finalize[S|B] ();\n+            --       uname__finalize_[spec|body] ();\n \n             --  Otherwise, finalization routines are called unconditionally:\n \n             --    uname_E--;\n-            --    uname__finalize[S|B] ();\n+            --    uname__finalize_[spec|body] ();\n \n             Set_String (\"   \");\n             Set_Unit_Name;\n@@ -1918,19 +1920,19 @@ package body Bindgen is\n             Set_String (\"   \");\n             Get_Name_String (Uspec.Uname);\n             Set_Unit_Name;\n-            Set_String (\"__finalize\");\n+            Set_String (\"__finalize_\");\n \n             --  Package spec processing\n \n             if U.Utype = Is_Spec\n               or else U.Utype = Is_Spec_Only\n             then\n-               Set_Char ('S');\n+               Set_String (\"spec\");\n \n             --  Package body processing\n \n             else\n-               Set_Char ('B');\n+               Set_String (\"body\");\n             end if;\n \n             Set_String (\" ();\");\n@@ -1982,14 +1984,14 @@ package body Bindgen is\n             Set_String (\"extern void \");\n             Get_Name_String (Uspec.Uname);\n             Set_Unit_Name;\n-            Set_String (\"__finalize\");\n+            Set_String (\"__finalize_\");\n \n             if U.Utype = Is_Spec\n               or else U.Utype = Is_Spec_Only\n             then\n-               Set_Char ('S');\n+               Set_String (\"spec\");\n             else\n-               Set_Char ('B');\n+               Set_String (\"body\");\n             end if;\n \n             Set_String (\" (void);\");"}, {"sha": "7f2496e1979936ea963152fecab8ee51ce17fb89", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 260, "deletions": 404, "changes": 664, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfae2bed7e333ce6366be60f5631adedab373b61/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfae2bed7e333ce6366be60f5631adedab373b61/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=cfae2bed7e333ce6366be60f5631adedab373b61", "patch": "@@ -59,7 +59,6 @@ with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Snames;   use Snames;\n with Stand;    use Stand;\n-with Stringt;  use Stringt;\n with Targparm; use Targparm;\n with Tbuild;   use Tbuild;\n with Ttypes;   use Ttypes;\n@@ -448,24 +447,24 @@ package body Exp_Ch7 is\n    procedure Build_Array_Deep_Procs (Typ : Entity_Id) is\n    begin\n       Set_TSS (Typ,\n-        Make_Deep_Proc (\n-          Prim  => Initialize_Case,\n-          Typ   => Typ,\n-          Stmts => Make_Deep_Array_Body (Initialize_Case, Typ)));\n+        Make_Deep_Proc\n+          (Prim  => Initialize_Case,\n+           Typ   => Typ,\n+           Stmts => Make_Deep_Array_Body (Initialize_Case, Typ)));\n \n       if not Is_Immutably_Limited_Type (Typ) then\n          Set_TSS (Typ,\n-           Make_Deep_Proc (\n-             Prim  => Adjust_Case,\n-             Typ   => Typ,\n-             Stmts => Make_Deep_Array_Body (Adjust_Case, Typ)));\n+           Make_Deep_Proc\n+             (Prim  => Adjust_Case,\n+              Typ   => Typ,\n+              Stmts => Make_Deep_Array_Body (Adjust_Case, Typ)));\n       end if;\n \n       Set_TSS (Typ,\n-        Make_Deep_Proc (\n-          Prim  => Finalize_Case,\n-          Typ   => Typ,\n-          Stmts => Make_Deep_Array_Body (Finalize_Case, Typ)));\n+        Make_Deep_Proc\n+          (Prim  => Finalize_Case,\n+           Typ   => Typ,\n+           Stmts => Make_Deep_Array_Body (Finalize_Case, Typ)));\n \n       --  Create TSS primitive Finalize_Address for non-VM targets. JVM and\n       --  .NET do not support address arithmetic and unchecked conversions.\n@@ -782,20 +781,17 @@ package body Exp_Ch7 is\n \n           Statements => New_List (\n             Make_If_Statement (Loc,\n-              Condition =>\n+              Condition       =>\n                 Make_Op_Not (Loc,\n-                  Right_Opnd =>\n-                    New_Reference_To (Raised_Id, Loc)),\n+                  Right_Opnd => New_Reference_To (Raised_Id, Loc)),\n \n               Then_Statements => New_List (\n                 Make_Assignment_Statement (Loc,\n-                  Name =>\n-                    New_Reference_To (Raised_Id, Loc),\n-                  Expression =>\n-                    New_Reference_To (Standard_True, Loc)),\n+                  Name       => New_Reference_To (Raised_Id, Loc),\n+                  Expression => New_Reference_To (Standard_True, Loc)),\n \n                 Make_Procedure_Call_Statement (Loc,\n-                  Name =>\n+                  Name                   =>\n                     New_Reference_To (Proc_To_Call, Loc),\n                   Parameter_Associations => Actuals)))));\n    end Build_Exception_Handler;\n@@ -922,16 +918,15 @@ package body Exp_Ch7 is\n          if Comes_From_Source (Typ) then\n             Coll_Id :=\n               Make_Defining_Identifier (Loc,\n-                Chars =>\n-                  New_External_Name (Chars (Typ), \"FC\"));\n+                Chars => New_External_Name (Chars (Typ), \"FC\"));\n          else\n             Coll_Id := Make_Temporary (Loc, 'F');\n          end if;\n \n          Append_To (Actions,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Coll_Id,\n-             Object_Definition =>\n+             Object_Definition   =>\n                New_Reference_To (RTE (RE_Finalization_Collection), Loc)));\n \n          --  Storage pool selection and attribute decoration of the generated\n@@ -973,13 +968,12 @@ package body Exp_Ch7 is\n \n             Append_To (Actions,\n               Make_Procedure_Call_Statement (Loc,\n-                Name =>\n+                Name                   =>\n                   New_Reference_To (RTE (RE_Set_Storage_Pool_Ptr), Loc),\n                 Parameter_Associations => New_List (\n                   New_Reference_To (Coll_Id, Loc),\n                   Make_Attribute_Reference (Loc,\n-                    Prefix =>\n-                      New_Reference_To (Pool_Id, Loc),\n+                    Prefix         => New_Reference_To (Pool_Id, Loc),\n                     Attribute_Name => Name_Unrestricted_Access))));\n          end if;\n \n@@ -1006,7 +1000,7 @@ package body Exp_Ch7 is\n \n          elsif Ekind (Typ) = E_Access_Subtype\n            or else (Ekind (Desig_Typ) = E_Incomplete_Type\n-                      and then Has_Completion_In_Body (Desig_Typ))\n+                     and then Has_Completion_In_Body (Desig_Typ))\n          then\n             Insert_Actions (Parent (Typ), Actions);\n \n@@ -1063,7 +1057,7 @@ package body Exp_Ch7 is\n                            Present (Mark_Id)\n                              or else\n                                (Present (Clean_Stmts)\n-                                  and then Is_Non_Empty_List (Clean_Stmts));\n+                                 and then Is_Non_Empty_List (Clean_Stmts));\n       Exceptions_OK    : constant Boolean :=\n                            not Restriction_Active (No_Exception_Propagation);\n       For_Package_Body : constant Boolean := Nkind (N) = N_Package_Body;\n@@ -1244,15 +1238,14 @@ package body Exp_Ch7 is\n             Counter_Typ_Decl :=\n               Make_Subtype_Declaration (Loc,\n                 Defining_Identifier => Counter_Typ,\n-                Subtype_Indication =>\n+                Subtype_Indication  =>\n                   Make_Subtype_Indication (Loc,\n-                    Subtype_Mark =>\n-                      New_Reference_To (Standard_Natural, Loc),\n-                    Constraint =>\n+                    Subtype_Mark => New_Reference_To (Standard_Natural, Loc),\n+                    Constraint   =>\n                       Make_Range_Constraint (Loc,\n                         Range_Expression =>\n                           Make_Range (Loc,\n-                            Low_Bound =>\n+                            Low_Bound  =>\n                               Make_Integer_Literal (Loc, Uint_0),\n                             High_Bound =>\n                               Make_Integer_Literal (Loc, Counter_Val)))));\n@@ -1264,10 +1257,8 @@ package body Exp_Ch7 is\n             Counter_Decl :=\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Counter_Id,\n-                Object_Definition =>\n-                  New_Reference_To (Counter_Typ, Loc),\n-                Expression =>\n-                  Make_Integer_Literal (Loc, 0));\n+                Object_Definition   => New_Reference_To (Counter_Typ, Loc),\n+                Expression          => Make_Integer_Literal (Loc, 0));\n \n             --  Set the type of the counter explicitly to prevent errors when\n             --  examining object declarations later on.\n@@ -1315,96 +1306,78 @@ package body Exp_Ch7 is\n       ----------------------\n \n       procedure Create_Finalizer is\n-         Conv_Name  : Name_Id;\n+         Body_Id    : Entity_Id;\n          Fin_Body   : Node_Id;\n          Fin_Spec   : Node_Id;\n          Jump_Block : Node_Id;\n          Label      : Node_Id;\n          Label_Id   : Entity_Id;\n-         Prag_Decl  : Node_Id;\n-         Spec_Decl  : Node_Id;\n \n-         function Create_Finalizer_String return String_Id;\n-         --  Generate a string of the form <Name>_finalize where <Name> denotes\n-         --  the fully qualified name of the spec. The string is in lower case.\n+         function New_Finalizer_Name return Name_Id;\n+         --  Create a fully qualified name of a package spec or body finalizer.\n+         --  The generated name is of the form: xx__yy__finalize_[spec|body].\n \n-         -----------------------------\n-         -- Create_Finalizer_String --\n-         -----------------------------\n-\n-         function Create_Finalizer_String return String_Id is\n-            procedure Create_Finalizer_String (Id : Entity_Id);\n-            --  Generate a string of the form \"Id__\". If the identifier has a\n-            --  non-standard scope, process the scope first. The generated\n-            --  string is in lower case.\n+         ------------------------\n+         -- New_Finalizer_Name --\n+         ------------------------\n \n-            -----------------------------\n-            -- Create_Finalizer_String --\n-            -----------------------------\n+         function New_Finalizer_Name return Name_Id is\n+            procedure New_Finalizer_Name (Id : Entity_Id);\n+            --  Place \"__<name-of-Id>\" in the name buffer. If the identifier\n+            --  has a non-standard scope, process the scope first.\n \n-            procedure Create_Finalizer_String (Id : Entity_Id) is\n-               S : constant Entity_Id := Scope (Id);\n+            ------------------------\n+            -- New_Finalizer_Name --\n+            ------------------------\n \n+            procedure New_Finalizer_Name (Id : Entity_Id) is\n             begin\n-               --  Climb the scope stack in order to start from the topmost\n-               --  name.\n+               if Scope (Id) = Standard_Standard then\n+                  Get_Name_String (Chars (Id));\n \n-               if Present (S)\n-                 and then S /= Standard_Standard\n-               then\n-                  Create_Finalizer_String (S);\n+               else\n+                  New_Finalizer_Name (Scope (Id));\n+                  Add_Str_To_Name_Buffer (\"__\");\n+                  Add_Str_To_Name_Buffer (Get_Name_String (Chars (Id)));\n                end if;\n+            end New_Finalizer_Name;\n \n-               Get_Name_String (Chars (Id));\n-               Store_String_Chars (Name_Buffer (1 .. Name_Len));\n-               Store_String_Char ('_');\n-               Store_String_Char ('_');\n-            end Create_Finalizer_String;\n-\n-         --  Start of processing for Create_Finalizer_String\n+         --  Start of processing for New_Finalizer_Name\n \n          begin\n-            Start_String;\n+            --  Create the fully qualified name of the enclosing scope\n \n-            --  Build a fully qualified name. Compilations for .NET/JVM use the\n-            --  finalizer name directly.\n+            New_Finalizer_Name (Spec_Id);\n \n-            if VM_Target = No_VM then\n-               Create_Finalizer_String (Spec_Id);\n-            end if;\n+            --  Generate:\n+            --    __finalize_[spec|body]\n \n-            --  Add the name of the finalizer\n+            Add_Str_To_Name_Buffer (\"__finalize_\");\n \n-            Get_Name_String (Chars (Fin_Id));\n-            Store_String_Chars (Name_Buffer (1 .. Name_Len));\n+            if For_Package_Spec then\n+               Add_Str_To_Name_Buffer (\"spec\");\n+            else\n+               Add_Str_To_Name_Buffer (\"body\");\n+            end if;\n \n-            return End_String;\n-         end Create_Finalizer_String;\n+            return Name_Find;\n+         end New_Finalizer_Name;\n \n       --  Start of processing for Create_Finalizer\n \n       begin\n          --  Step 1: Creation of the finalizer name\n \n          --  Packages must use a distinct name for their finalizers since the\n-         --  binder will have to generate calls to them by name.\n-\n-         if For_Package then\n+         --  binder will have to generate calls to them by name. The name is\n+         --  of the following form:\n \n-            --  finalizeS for specs\n+         --    xx__yy__finalize_[spec|body]\n \n-            if For_Package_Spec then\n-               Fin_Id :=\n-                 Make_Defining_Identifier (Loc,\n-                   Chars => New_External_Name (Name_Finalize, 'S'));\n-\n-            --  finalizeB for bodies\n-\n-            else\n-               Fin_Id :=\n-                 Make_Defining_Identifier (Loc,\n-                   Chars => New_External_Name (Name_Finalize, 'B'));\n-            end if;\n+         if For_Package then\n+            Fin_Id := Make_Defining_Identifier (Loc, New_Finalizer_Name);\n+            Set_Has_Qualified_Name       (Fin_Id);\n+            Set_Has_Fully_Qualified_Name (Fin_Id);\n \n          --  The default name is _finalizer\n \n@@ -1414,65 +1387,24 @@ package body Exp_Ch7 is\n                 Chars => New_External_Name (Name_uFinalizer));\n          end if;\n \n-         --  Step 2: Creation of the finalizer specification and export for\n-         --  packages.\n+         --  Step 2: Creation of the finalizer specification\n \n          --  Generate:\n          --    procedure Fin_Id;\n \n-         --    pragma Export (CIL, Fin_Id, \"Finalize[S/B]\");\n-         --    --  for .NET targets\n-\n-         --    pragma Export (Java, Fin_Id, \"Finalize[S/B]\");\n-         --    --  for JVM targets\n-\n-         --    pragma Export (Ada, Fin_Id, \"Spec_Id_Finalize[S/B]\");\n-         --    --  for default targets\n-\n-         if For_Package then\n-            Spec_Decl :=\n-              Make_Subprogram_Declaration (Loc,\n-                Specification =>\n-                  Make_Procedure_Specification (Loc,\n-                    Defining_Unit_Name => Fin_Id));\n-\n-            --  Determine the proper convention depending on the target\n-\n-            if VM_Target = CLI_Target then\n-               Conv_Name := Name_CIL;\n-\n-            elsif VM_Target = JVM_Target then\n-               Conv_Name := Name_Java;\n-\n-            else\n-               Conv_Name := Name_Ada;\n-            end if;\n-\n-            Prag_Decl :=\n-              Make_Pragma (Loc,\n-                Chars => Name_Export,\n-                Pragma_Argument_Associations => New_List (\n-                  Make_Pragma_Argument_Association (Loc,\n-                    Expression =>\n-                      Make_Identifier (Loc, Conv_Name)),\n-\n-                  Make_Pragma_Argument_Association (Loc,\n-                    Expression =>\n-                      New_Reference_To (Fin_Id, Loc)),\n-\n-                  Make_Pragma_Argument_Association (Loc,\n-                    Expression =>\n-                      Make_String_Literal (Loc, Create_Finalizer_String))));\n-         end if;\n+         Fin_Spec :=\n+           Make_Subprogram_Declaration (Loc,\n+             Specification =>\n+               Make_Procedure_Specification (Loc,\n+                 Defining_Unit_Name => Fin_Id));\n \n          --  Step 3: Creation of the finalizer body\n \n          if Has_Ctrl_Objs then\n \n             --  Add L0, the default destination to the jump block\n \n-            Label_Id :=\n-              Make_Identifier (Loc, New_External_Name ('L', 0));\n+            Label_Id := Make_Identifier (Loc, New_External_Name ('L', 0));\n             Set_Entity (Label_Id,\n               Make_Defining_Identifier (Loc, Chars (Label_Id)));\n             Label := Make_Label (Loc, Label_Id);\n@@ -1483,20 +1415,18 @@ package body Exp_Ch7 is\n             Prepend_To (Finalizer_Decls,\n               Make_Implicit_Label_Declaration (Loc,\n                 Defining_Identifier => Entity (Label_Id),\n-                Label_Construct => Label));\n+                Label_Construct     => Label));\n \n             --  Generate:\n             --    when others =>\n             --       goto L0;\n \n             Append_To (Jump_Alts,\n               Make_Case_Statement_Alternative (Loc,\n-                Discrete_Choices => New_List (\n-                  Make_Others_Choice (Loc)),\n-                Statements => New_List (\n+                Discrete_Choices => New_List (Make_Others_Choice (Loc)),\n+                Statements       => New_List (\n                   Make_Goto_Statement (Loc,\n-                    Name =>\n-                      New_Reference_To (Entity (Label_Id), Loc)))));\n+                    Name => New_Reference_To (Entity (Label_Id), Loc)))));\n \n             --  Generate:\n             --    <<L0>>\n@@ -1522,8 +1452,7 @@ package body Exp_Ch7 is\n \n             Jump_Block :=\n               Make_Case_Statement (Loc,\n-                Expression =>\n-                  Make_Identifier (Loc, Chars (Counter_Id)),\n+                Expression   => Make_Identifier (Loc, Chars (Counter_Id)),\n                 Alternatives => Jump_Alts);\n \n             if Acts_As_Clean\n@@ -1553,7 +1482,7 @@ package body Exp_Ch7 is\n          if Present (Mark_Id) then\n             Append_To (Finalizer_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n-                Name =>\n+                Name                   =>\n                   New_Reference_To (RTE (RE_SS_Release), Loc),\n                 Parameter_Associations => New_List (\n                   New_Reference_To (Mark_Id, Loc))));\n@@ -1569,13 +1498,11 @@ package body Exp_Ch7 is\n          then\n             Prepend_To (Finalizer_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n-                Name =>\n-                  New_Reference_To (RTE (RE_Abort_Defer), Loc)));\n+                Name => New_Reference_To (RTE (RE_Abort_Defer), Loc)));\n \n             Append_To (Finalizer_Stmts,\n               Make_Procedure_Call_Statement (Loc,\n-                Name =>\n-                  New_Reference_To (RTE (RE_Abort_Undefer), Loc)));\n+                Name => New_Reference_To (RTE (RE_Abort_Undefer), Loc)));\n          end if;\n \n          --  Generate:\n@@ -1611,18 +1538,23 @@ package body Exp_Ch7 is\n \n          --  Create the body of the finalizer\n \n+         Body_Id := Make_Defining_Identifier (Loc, Chars (Fin_Id));\n+\n+         if For_Package then\n+            Set_Has_Qualified_Name       (Body_Id);\n+            Set_Has_Fully_Qualified_Name (Body_Id);\n+         end if;\n+\n          Fin_Body :=\n            Make_Subprogram_Body (Loc,\n              Specification =>\n                Make_Procedure_Specification (Loc,\n-                 Defining_Unit_Name =>\n-                   Make_Defining_Identifier (Loc, Chars (Fin_Id))),\n+                 Defining_Unit_Name => Body_Id),\n \n              Declarations => Finalizer_Decls,\n \n              Handled_Statement_Sequence =>\n-               Make_Handled_Sequence_Of_Statements (Loc,\n-                 Statements => Finalizer_Stmts));\n+               Make_Handled_Sequence_Of_Statements (Loc, Finalizer_Stmts));\n \n          --  Step 4: Spec and body insertion, analysis\n \n@@ -1634,8 +1566,7 @@ package body Exp_Ch7 is\n             --  inserted at the top of the visible declarations.\n \n             if For_Package_Spec then\n-               Prepend_To (Decls, Prag_Decl);\n-               Prepend_To (Decls, Spec_Decl);\n+               Prepend_To (Decls, Fin_Spec);\n \n                if Present (Priv_Decls) then\n                   Append_To (Priv_Decls, Fin_Body);\n@@ -1649,27 +1580,26 @@ package body Exp_Ch7 is\n \n             else\n                declare\n-                  Spec_Nod  : Node_Id := Spec_Id;\n+                  Spec_Nod  : Node_Id;\n                   Vis_Decls : List_Id;\n \n                begin\n+                  Spec_Nod := Spec_Id;\n                   while Nkind (Spec_Nod) /= N_Package_Specification loop\n                      Spec_Nod := Parent (Spec_Nod);\n                   end loop;\n \n                   Vis_Decls := Visible_Declarations (Spec_Nod);\n \n-                  Prepend_To (Vis_Decls, Prag_Decl);\n-                  Prepend_To (Vis_Decls, Spec_Decl);\n+                  Prepend_To (Vis_Decls, Fin_Spec);\n                   Append_To  (Decls, Fin_Body);\n                end;\n             end if;\n \n             --  Push the name of the package\n \n             Push_Scope (Spec_Id);\n-            Analyze (Spec_Decl);\n-            Analyze (Prag_Decl);\n+            Analyze (Fin_Spec);\n             Analyze (Fin_Body);\n             Pop_Scope;\n \n@@ -1690,12 +1620,6 @@ package body Exp_Ch7 is\n             --       Fin_Id;                            --  At_End handler\n             --    end;\n \n-            Fin_Spec :=\n-              Make_Subprogram_Declaration (Loc,\n-                Specification =>\n-                  Make_Procedure_Specification (Loc,\n-                    Defining_Unit_Name => Fin_Id));\n-\n             pragma Assert (Present (Spec_Decls));\n \n             Append_To (Spec_Decls, Fin_Spec);\n@@ -1853,7 +1777,7 @@ package body Exp_Ch7 is\n                elsif not Is_Imported (Obj_Id)\n                  and then Needs_Finalization (Obj_Typ)\n                  and then not (Ekind (Obj_Id) = E_Constant\n-                                 and then not Has_Completion (Obj_Id))\n+                                and then not Has_Completion (Obj_Id))\n                then\n                   Processing_Actions;\n \n@@ -1870,9 +1794,9 @@ package body Exp_Ch7 is\n                  and then Present (Expr)\n                  and then\n                    (Is_Null_Access_BIP_Func_Call (Expr)\n-                      or else\n-                   (Is_Non_BIP_Func_Call (Expr)\n-                      and then not Is_Related_To_Func_Return (Obj_Id)))\n+                     or else (Is_Non_BIP_Func_Call (Expr)\n+                               and then not\n+                                 Is_Related_To_Func_Return (Obj_Id)))\n                then\n                   Processing_Actions (Has_No_Init => True);\n \n@@ -1912,7 +1836,7 @@ package body Exp_Ch7 is\n                  and then not In_Library_Level_Package_Body (Obj_Id)\n                  and then\n                    (Is_Simple_Protected_Type (Obj_Typ)\n-                      or else Has_Simple_Protected_Object (Obj_Typ))\n+                     or else Has_Simple_Protected_Object (Obj_Typ))\n                then\n                   Processing_Actions (Is_Protected => True);\n                end if;\n@@ -1963,12 +1887,10 @@ package body Exp_Ch7 is\n                Typ := Entity (Decl);\n \n                if (Is_Access_Type (Typ)\n-                     and then not Is_Access_Subprogram_Type (Typ)\n-                     and then Needs_Finalization\n-                                (Available_View (Designated_Type (Typ))))\n-                 or else\n-                  (Is_Type (Typ)\n-                     and then Needs_Finalization (Typ))\n+                    and then not Is_Access_Subprogram_Type (Typ)\n+                    and then Needs_Finalization\n+                               (Available_View (Designated_Type (Typ))))\n+                 or else (Is_Type (Typ) and then Needs_Finalization (Typ))\n                then\n                   Old_Counter_Val := Counter_Val;\n \n@@ -2156,19 +2078,17 @@ package body Exp_Ch7 is\n             Append_To (Decls,\n               Make_Object_Renaming_Declaration (Loc,\n                 Defining_Identifier => Pool_Id,\n-                Subtype_Mark =>\n+                Subtype_Mark        =>\n                   New_Reference_To (RTE (RE_Root_Storage_Pool), Loc),\n-                Name =>\n+                Name                =>\n                   Make_Explicit_Dereference (Loc,\n                     Prefix =>\n                       Make_Function_Call (Loc,\n-                        Name =>\n+                        Name                   =>\n                           New_Reference_To (RTE (RE_Base_Pool), Loc),\n-\n                         Parameter_Associations => New_List (\n                           Make_Explicit_Dereference (Loc,\n-                            Prefix =>\n-                              New_Reference_To (Collect, Loc)))))));\n+                            Prefix => New_Reference_To (Collect, Loc)))))));\n \n             --  Create an access type which uses the storage pool of the\n             --  caller's collection.\n@@ -2181,10 +2101,9 @@ package body Exp_Ch7 is\n             Append_To (Decls,\n               Make_Full_Type_Declaration (Loc,\n                 Defining_Identifier => Ptr_Typ,\n-                Type_Definition =>\n+                Type_Definition     =>\n                   Make_Access_To_Object_Definition (Loc,\n-                    Subtype_Indication =>\n-                      New_Reference_To (Obj_Typ, Loc))));\n+                    Subtype_Indication => New_Reference_To (Obj_Typ, Loc))));\n \n             --  Perform minor decoration in order to set the collection and the\n             --  storage pool attributes.\n@@ -2216,7 +2135,7 @@ package body Exp_Ch7 is\n \n             Free_Blk :=\n               Make_Block_Statement (Loc,\n-                Declarations => Decls,\n+                Declarations               => Decls,\n                 Handled_Statement_Sequence =>\n                   Make_Handled_Sequence_Of_Statements (Loc,\n                     Statements => New_List (Free_Stmt)));\n@@ -2226,10 +2145,8 @@ package body Exp_Ch7 is\n \n             Cond :=\n               Make_Op_Ne (Loc,\n-                Left_Opnd =>\n-                  New_Reference_To (Collect, Loc),\n-                Right_Opnd =>\n-                  Make_Null (Loc));\n+                Left_Opnd  => New_Reference_To (Collect, Loc),\n+                Right_Opnd => Make_Null (Loc));\n \n             --  For constrained or tagged results escalate the condition to\n             --  include the allocation format. Generate:\n@@ -2247,10 +2164,9 @@ package body Exp_Ch7 is\n                begin\n                   Cond :=\n                     Make_And_Then (Loc,\n-                      Left_Opnd =>\n+                      Left_Opnd  =>\n                         Make_Op_Gt (Loc,\n-                          Left_Opnd =>\n-                            New_Reference_To (Alloc, Loc),\n+                          Left_Opnd  => New_Reference_To (Alloc, Loc),\n                           Right_Opnd =>\n                             Make_Integer_Literal (Loc,\n                               UI_From_Int\n@@ -2267,7 +2183,7 @@ package body Exp_Ch7 is\n \n             return\n               Make_If_Statement (Loc,\n-                Condition => Cond,\n+                Condition       => Cond,\n                 Then_Statements => New_List (Free_Blk));\n          end Build_BIP_Cleanup_Stmts;\n \n@@ -2322,10 +2238,10 @@ package body Exp_Ch7 is\n \n                      return\n                          (Present (Deep_Init)\n-                            and then Chars (Deep_Init) = Call_Nam)\n+                           and then Chars (Deep_Init) = Call_Nam)\n                        or else\n                          (Present (Init)\n-                            and then Chars (Init) = Call_Nam);\n+                           and then Chars (Init) = Call_Nam);\n                   end;\n                end if;\n \n@@ -2433,10 +2349,8 @@ package body Exp_Ch7 is\n \n          Inc_Decl :=\n            Make_Assignment_Statement (Loc,\n-             Name =>\n-               New_Reference_To (Counter_Id, Loc),\n-             Expression =>\n-               Make_Integer_Literal (Loc, Counter_Val));\n+             Name       => New_Reference_To (Counter_Id, Loc),\n+             Expression => Make_Integer_Literal (Loc, Counter_Val));\n \n          --  Insert the counter after all initialization has been done. The\n          --  place of insertion depends on the context. When dealing with a\n@@ -2470,16 +2384,15 @@ package body Exp_Ch7 is\n          --    L<counter> : label;\n \n          Label_Id :=\n-           Make_Identifier (Loc,\n-             Chars => New_External_Name ('L', Counter_Val));\n+           Make_Identifier (Loc, New_External_Name ('L', Counter_Val));\n          Set_Entity (Label_Id,\n-           Make_Defining_Identifier (Loc, Chars (Label_Id)));\n+                     Make_Defining_Identifier (Loc, Chars (Label_Id)));\n          Label := Make_Label (Loc, Label_Id);\n \n          Prepend_To (Finalizer_Decls,\n            Make_Implicit_Label_Declaration (Loc,\n              Defining_Identifier => Entity (Label_Id),\n-             Label_Construct => Label));\n+             Label_Construct     => Label));\n \n          --  Create the associated jump with this object, generate:\n          --\n@@ -2490,10 +2403,9 @@ package body Exp_Ch7 is\n            Make_Case_Statement_Alternative (Loc,\n              Discrete_Choices => New_List (\n                Make_Integer_Literal (Loc, Counter_Val)),\n-             Statements => New_List (\n+             Statements       => New_List (\n                Make_Goto_Statement (Loc,\n-                 Name =>\n-                   New_Reference_To (Entity (Label_Id), Loc)))));\n+                 Name => New_Reference_To (Entity (Label_Id), Loc)))));\n \n          --  Insert the jump destination, generate:\n          --\n@@ -2535,14 +2447,14 @@ package body Exp_Ch7 is\n                  Make_Block_Statement (Loc,\n                    Handled_Statement_Sequence =>\n                      Make_Handled_Sequence_Of_Statements (Loc,\n-                       Statements => Fin_Stmts,\n+                       Statements         => Fin_Stmts,\n \n                        Exception_Handlers => New_List (\n                          Make_Exception_Handler (Loc,\n                            Exception_Choices => New_List (\n                              Make_Others_Choice (Loc)),\n \n-                           Statements => New_List (\n+                           Statements     => New_List (\n                              Make_Null_Statement (Loc)))))));\n             end if;\n \n@@ -2608,12 +2520,9 @@ package body Exp_Ch7 is\n \n             --  H505-021 This needs to be revisited on .NET/JVM\n \n-            if VM_Target = No_VM\n-              and then Is_Return_Object (Obj_Id)\n-            then\n+            if VM_Target = No_VM and then Is_Return_Object (Obj_Id) then\n                declare\n                   Func_Id : constant Entity_Id := Enclosing_Function (Obj_Id);\n-\n                begin\n                   if Is_Build_In_Place_Function (Func_Id)\n                     and then Needs_BIP_Collection (Func_Id)\n@@ -2636,7 +2545,7 @@ package body Exp_Ch7 is\n             then\n                Fin_Stmts := New_List (\n                  Make_If_Statement (Loc,\n-                   Condition =>\n+                   Condition     =>\n                      Make_Op_Not (Loc,\n                        Right_Opnd =>\n                          New_Reference_To (Return_Flag (Obj_Id), Loc)),\n@@ -2648,7 +2557,7 @@ package body Exp_Ch7 is\n          Append_List_To (Finalizer_Stmts, Fin_Stmts);\n \n          --  Since the declarations are examined in reverse, the state counter\n-         --  must be dectemented in order to keep with the true position of\n+         --  must be decremented in order to keep with the true position of\n          --  objects.\n \n          Counter_Val := Counter_Val - 1;\n@@ -2705,13 +2614,13 @@ package body Exp_Ch7 is\n         and then\n           (not Is_Library_Level_Entity (Spec_Id)\n \n-            --  Nested packages are considered to be library level entities,\n-            --  but do not need to be processed separately. True library level\n-            --  packages have a scope value of 1.\n+             --  Nested packages are considered to be library level entities,\n+             --  but do not need to be processed separately. True library level\n+             --  packages have a scope value of 1.\n \n              or else Scope_Depth_Value (Spec_Id) /= Uint_1\n              or else (Is_Generic_Instance (Spec_Id)\n-                        and then Package_Instantiation (Spec_Id) /= N))\n+                       and then Package_Instantiation (Spec_Id) /= N))\n       then\n          return;\n       end if;\n@@ -2763,9 +2672,7 @@ package body Exp_Ch7 is\n          --  that N has a declarative list since the finalizer spec will be\n          --  attached to it.\n \n-         if Has_Ctrl_Objs\n-           and then No (Decls)\n-         then\n+         if Has_Ctrl_Objs and then No (Decls) then\n             Set_Declarations (N, New_List);\n             Decls      := Declarations (N);\n             Spec_Decls := Decls;\n@@ -2776,9 +2683,7 @@ package body Exp_Ch7 is\n          --  cases, the finalizer must be created and carry the additional\n          --  statements.\n \n-         if Acts_As_Clean\n-           or else Has_Ctrl_Objs\n-         then\n+         if Acts_As_Clean or else Has_Ctrl_Objs then\n             Build_Components;\n          end if;\n \n@@ -2790,9 +2695,7 @@ package body Exp_Ch7 is\n \n       --  Step 3: Finalizer creation\n \n-      if Acts_As_Clean\n-        or else Has_Ctrl_Objs\n-      then\n+      if Acts_As_Clean or else Has_Ctrl_Objs then\n          Create_Finalizer;\n       end if;\n    end Build_Finalizer;\n@@ -2850,8 +2753,7 @@ package body Exp_Ch7 is\n \n          begin\n             Block :=\n-              Make_Block_Statement (Loc,\n-                Handled_Statement_Sequence => HSS);\n+              Make_Block_Statement (Loc, Handled_Statement_Sequence => HSS);\n \n             Set_Handled_Statement_Sequence (N,\n               Make_Handled_Sequence_Of_Statements (Loc, New_List (Block)));\n@@ -2876,10 +2778,10 @@ package body Exp_Ch7 is\n       for Final_Prim in Name_Of'Range loop\n          if Name_Of (Final_Prim) = Nam then\n             Set_TSS (Typ,\n-              Make_Deep_Proc (\n-                Prim  => Final_Prim,\n-                Typ   => Typ,\n-                Stmts => Make_Deep_Record_Body (Final_Prim, Typ)));\n+              Make_Deep_Proc\n+                (Prim  => Final_Prim,\n+                 Typ   => Typ,\n+                 Stmts => Make_Deep_Record_Body (Final_Prim, Typ)));\n          end if;\n       end loop;\n    end Build_Late_Proc;\n@@ -2927,10 +2829,10 @@ package body Exp_Ch7 is\n             Append_To (Result,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Temp_Id,\n-                Constant_Present => True,\n-                Object_Definition =>\n+                Constant_Present    => True,\n+                Object_Definition   =>\n                   New_Reference_To (RTE (RE_Exception_Occurrence_Access), Loc),\n-                Expression =>\n+                Expression          =>\n                   Make_Function_Call (Loc,\n                     Name =>\n                       Make_Explicit_Dereference (Loc,\n@@ -2945,27 +2847,24 @@ package body Exp_Ch7 is\n \n             A_Expr :=\n               Make_And_Then (Loc,\n-                Left_Opnd =>\n+                Left_Opnd  =>\n                   Make_Op_Ne (Loc,\n-                    Left_Opnd =>\n-                      New_Reference_To (Temp_Id, Loc),\n-                    Right_Opnd =>\n-                      Make_Null (Loc)),\n+                    Left_Opnd  => New_Reference_To (Temp_Id, Loc),\n+                    Right_Opnd => Make_Null (Loc)),\n \n                 Right_Opnd =>\n                   Make_Op_Eq (Loc,\n                     Left_Opnd =>\n                       Make_Function_Call (Loc,\n-                        Name =>\n+                        Name                   =>\n                           New_Reference_To (RTE (RE_Exception_Identity), Loc),\n                         Parameter_Associations => New_List (\n                           Make_Explicit_Dereference (Loc,\n-                            Prefix =>\n-                              New_Reference_To (Temp_Id, Loc)))),\n+                            Prefix => New_Reference_To (Temp_Id, Loc)))),\n \n                     Right_Opnd =>\n                       Make_Attribute_Reference (Loc,\n-                        Prefix =>\n+                        Prefix         =>\n                           New_Reference_To (Stand.Abort_Signal, Loc),\n                         Attribute_Name => Name_Identity)));\n          end;\n@@ -2982,18 +2881,17 @@ package body Exp_Ch7 is\n       Append_To (Result,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Abort_Id,\n-          Constant_Present => True,\n-          Object_Definition =>\n-            New_Reference_To (Standard_Boolean, Loc),\n-          Expression => A_Expr));\n+          Constant_Present    => True,\n+          Object_Definition   => New_Reference_To (Standard_Boolean, Loc),\n+          Expression          => A_Expr));\n \n       --  Generate:\n       --    E_Id : Exception_Occurrence;\n \n       E_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => E_Id,\n-          Object_Definition =>\n+          Object_Definition   =>\n             New_Reference_To (RTE (RE_Exception_Occurrence), Loc));\n       Set_No_Initialization (E_Decl);\n \n@@ -3005,10 +2903,8 @@ package body Exp_Ch7 is\n       Append_To (Result,\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Raised_Id,\n-          Object_Definition =>\n-            New_Reference_To (Standard_Boolean, Loc),\n-          Expression =>\n-            New_Reference_To (Standard_False, Loc)));\n+          Object_Definition   => New_Reference_To (Standard_Boolean, Loc),\n+          Expression          => New_Reference_To (Standard_False, Loc)));\n \n       return Result;\n    end Build_Object_Declarations;\n@@ -3057,13 +2953,10 @@ package body Exp_Ch7 is\n \n       return\n         Make_If_Statement (Loc,\n-          Condition =>\n-            New_Reference_To (Raised_Id, Loc),\n-\n+          Condition       => New_Reference_To (Raised_Id, Loc),\n           Then_Statements => New_List (\n             Make_Procedure_Call_Statement (Loc,\n-              Name =>\n-                New_Reference_To (Proc_Id, Loc),\n+              Name                   => New_Reference_To (Proc_Id, Loc),\n               Parameter_Associations => Params)));\n    end Build_Raise_Statement;\n \n@@ -3074,34 +2967,34 @@ package body Exp_Ch7 is\n    procedure Build_Record_Deep_Procs (Typ : Entity_Id) is\n    begin\n       Set_TSS (Typ,\n-        Make_Deep_Proc (\n-          Prim  => Initialize_Case,\n-          Typ   => Typ,\n-          Stmts => Make_Deep_Record_Body (Initialize_Case, Typ)));\n+        Make_Deep_Proc\n+          (Prim  => Initialize_Case,\n+           Typ   => Typ,\n+           Stmts => Make_Deep_Record_Body (Initialize_Case, Typ)));\n \n       if not Is_Immutably_Limited_Type (Typ) then\n          Set_TSS (Typ,\n-           Make_Deep_Proc (\n-             Prim  => Adjust_Case,\n-             Typ   => Typ,\n-             Stmts => Make_Deep_Record_Body (Adjust_Case, Typ)));\n+           Make_Deep_Proc\n+             (Prim  => Adjust_Case,\n+              Typ   => Typ,\n+              Stmts => Make_Deep_Record_Body (Adjust_Case, Typ)));\n       end if;\n \n       Set_TSS (Typ,\n-        Make_Deep_Proc (\n-          Prim  => Finalize_Case,\n-          Typ   => Typ,\n-          Stmts => Make_Deep_Record_Body (Finalize_Case, Typ)));\n+        Make_Deep_Proc\n+          (Prim  => Finalize_Case,\n+           Typ   => Typ,\n+           Stmts => Make_Deep_Record_Body (Finalize_Case, Typ)));\n \n       --  Create TSS primitive Finalize_Address for non-VM targets. JVM and\n       --  .NET do not support address arithmetic and unchecked conversions.\n \n       if VM_Target = No_VM then\n          Set_TSS (Typ,\n-           Make_Deep_Proc (\n-             Prim  => Address_Case,\n-             Typ   => Typ,\n-             Stmts => Make_Deep_Record_Body (Address_Case, Typ)));\n+           Make_Deep_Proc\n+             (Prim  => Address_Case,\n+              Typ   => Typ,\n+              Stmts => Make_Deep_Record_Body (Address_Case, Typ)));\n       end if;\n    end Build_Record_Deep_Procs;\n \n@@ -3178,19 +3071,19 @@ package body Exp_Ch7 is\n \n             return New_List (\n               Make_Implicit_Loop_Statement (N,\n-                Identifier => Empty,\n+                Identifier       => Empty,\n                 Iteration_Scheme =>\n                   Make_Iteration_Scheme (Loc,\n                     Loop_Parameter_Specification =>\n                       Make_Loop_Parameter_Specification (Loc,\n-                        Defining_Identifier => Index,\n+                        Defining_Identifier         => Index,\n                         Discrete_Subtype_Definition =>\n                           Make_Attribute_Reference (Loc,\n-                            Prefix => Duplicate_Subexpr (Obj),\n+                            Prefix          => Duplicate_Subexpr (Obj),\n                             Attribute_Name  => Name_Range,\n-                            Expressions => New_List (\n+                            Expressions     => New_List (\n                               Make_Integer_Literal (Loc, Dim))))),\n-                Statements =>  Free_One_Dimension (Dim + 1)));\n+                Statements       =>  Free_One_Dimension (Dim + 1)));\n          end if;\n       end Free_One_Dimension;\n \n@@ -3222,24 +3115,21 @@ package body Exp_Ch7 is\n           Nkind (Type_Definition (Parent (U_Typ))) = N_Record_Definition\n         and then\n           Present\n-            (Variant_Part\n-              (Component_List (Type_Definition (Parent (U_Typ)))))\n+            (Variant_Part (Component_List (Type_Definition (Parent (U_Typ)))))\n       then\n-         --  For now, do not attempt to free a component that may appear in\n-         --  a variant, and instead issue a warning. Doing this \"properly\"\n-         --  would require building a case statement and would be quite a\n-         --  mess. Note that the RM only requires that free \"work\" for the\n-         --  case of a task access value, so already we go way beyond this\n-         --  in that we deal with the array case and non-discriminated\n-         --  record cases.\n+         --  For now, do not attempt to free a component that may appear in a\n+         --  variant, and instead issue a warning. Doing this \"properly\" would\n+         --  require building a case statement and would be quite a mess. Note\n+         --  that the RM only requires that free \"work\" for the case of a task\n+         --  access value, so already we go way beyond this in that we deal\n+         --  with the array case and non-discriminated record cases.\n \n          Error_Msg_N\n            (\"task/protected object in variant record will not be freed?\", N);\n          return New_List (Make_Null_Statement (Loc));\n       end if;\n \n       Comp := First_Component (Typ);\n-\n       while Present (Comp) loop\n          if Has_Task (Etype (Comp))\n            or else Has_Simple_Protected_Object (Etype (Comp))\n@@ -3261,12 +3151,10 @@ package body Exp_Ch7 is\n                --  Recurse, by generating the prefix of the argument to\n                --  the eventual cleanup call.\n \n-               Append_List_To\n-                 (Stmts, Cleanup_Record (N, Tsk, Etype (Comp)));\n+               Append_List_To (Stmts, Cleanup_Record (N, Tsk, Etype (Comp)));\n \n             elsif Is_Array_Type (Etype (Comp)) then\n-               Append_List_To\n-                 (Stmts, Cleanup_Array (N, Tsk, Etype (Comp)));\n+               Append_List_To (Stmts, Cleanup_Array (N, Tsk, Etype (Comp)));\n             end if;\n          end if;\n \n@@ -3411,11 +3299,9 @@ package body Exp_Ch7 is\n \n       elsif Ftyp /= Atyp\n         and then Present (Atyp)\n-        and then\n-          (Is_Private_Type (Ftyp) or else Is_Private_Type (Atyp))\n-        and then\n-           Base_Type (Underlying_Type (Atyp)) =\n-             Base_Type (Underlying_Type (Ftyp))\n+        and then (Is_Private_Type (Ftyp) or else Is_Private_Type (Atyp))\n+        and then Base_Type (Underlying_Type (Atyp)) =\n+                 Base_Type (Underlying_Type (Ftyp))\n       then\n          return Unchecked_Convert_To (Ftyp, Arg);\n \n@@ -3676,12 +3562,11 @@ package body Exp_Ch7 is\n             Append_To (New_Decls,\n               Make_Object_Declaration (Loc,\n                 Defining_Identifier => Mark,\n-                Object_Definition =>\n+                Object_Definition   =>\n                   New_Reference_To (RTE (RE_Mark_Id), Loc),\n-                Expression =>\n+                Expression          =>\n                   Make_Function_Call (Loc,\n-                    Name =>\n-                      New_Reference_To (RTE (RE_SS_Mark), Loc))));\n+                    Name => New_Reference_To (RTE (RE_SS_Mark), Loc))));\n \n             Set_Uses_Sec_Stack (Scop, False);\n          end if;\n@@ -4159,7 +4044,6 @@ package body Exp_Ch7 is\n \n       Comp := First_Component (E);\n       while Present (Comp) loop\n-\n          if Chars (Comp) = Name_uParent then\n             null;\n \n@@ -4196,7 +4080,6 @@ package body Exp_Ch7 is\n \n          begin\n             Comp := First_Component (T);\n-\n             while Present (Comp) loop\n                if Has_Simple_Protected_Object (Etype (Comp)) then\n                   return True;\n@@ -4636,7 +4519,7 @@ package body Exp_Ch7 is\n         (Typ : Entity_Id) return List_Id;\n       --  Create the statements necessary to adjust or finalize an array of\n       --  controlled elements. Generate:\n-\n+      --\n       --    declare\n       --       Temp   : constant Exception_Occurrence_Access :=\n       --                  Get_Current_Excep.all;\n@@ -4646,18 +4529,18 @@ package body Exp_Ch7 is\n       --                               Standard'Abort_Signal'Identity;\n       --         <or>\n       --       Abort  : constant Boolean := False;  --  no abort\n-\n+      --\n       --       E      : Exception_Occurrence;\n       --       Raised : Boolean := False;\n-\n+      --\n       --    begin\n       --       for J1 in [reverse] Typ'First (1) .. Typ'Last (1) loop\n       --                 ^--  in the finalization case\n       --          ...\n       --          for Jn in [reverse] Typ'First (n) .. Typ'Last (n) loop\n       --             begin\n       --                [Deep_]Adjust / Finalize (V (J1, ..., Jn));\n-\n+      --\n       --             exception\n       --                when others =>\n       --                   if not Raised then\n@@ -4668,7 +4551,7 @@ package body Exp_Ch7 is\n       --          end loop;\n       --          ...\n       --       end loop;\n-\n+      --\n       --       if Raised then\n       --          Raise_From_Controlled_Operation (E, Abort);\n       --       end if;\n@@ -4678,19 +4561,19 @@ package body Exp_Ch7 is\n       --  Create the statements necessary to initialize an array of controlled\n       --  elements. Include a mechanism to carry out partial finalization if an\n       --  exception occurs. Generate:\n-\n+      --\n       --    declare\n       --       Counter : Integer := 0;\n-\n+      --\n       --    begin\n       --       for J1 in V'Range (1) loop\n       --          ...\n       --          for JN in V'Range (N) loop\n       --             begin\n       --                [Deep_]Initialize (V (J1, ..., JN));\n-\n+      --\n       --                Counter := Counter + 1;\n-\n+      --\n       --             exception\n       --                when others =>\n       --                   declare\n@@ -4859,9 +4742,7 @@ package body Exp_Ch7 is\n \n          J := Last (Index_List);\n          Dim := Num_Dims;\n-         while Present (J)\n-           and then Dim > 0\n-         loop\n+         while Present (J) and then Dim > 0 loop\n             Loop_Id := J;\n             Prev (J);\n             Remove (Loop_Id);\n@@ -4984,12 +4865,9 @@ package body Exp_Ch7 is\n             Dim := 1;\n             Expr :=\n               Make_Attribute_Reference (Loc,\n-                Prefix =>\n-                  Make_Identifier (Loc, Name_V),\n-                Attribute_Name =>\n-                  Name_Length,\n-                Expressions => New_List (\n-                  Make_Integer_Literal (Loc, Dim)));\n+                Prefix         => Make_Identifier (Loc, Name_V),\n+                Attribute_Name => Name_Length,\n+                Expressions    => New_List (Make_Integer_Literal (Loc, Dim)));\n \n             --  Process the rest of the dimensions, generate:\n             --    Expr * V'Length (N)\n@@ -5066,10 +4944,8 @@ package body Exp_Ch7 is\n          function Build_Initialization_Call return Node_Id is\n             Comp_Ref : constant Node_Id :=\n                          Make_Indexed_Component (Loc,\n-                           Prefix =>\n-                             Make_Identifier (Loc, Name_V),\n-                          Expressions =>\n-                             New_References_To (Index_List, Loc));\n+                           Prefix      => Make_Identifier (Loc, Name_V),\n+                           Expressions => New_References_To (Index_List, Loc));\n \n          begin\n             Set_Etype (Comp_Ref, Comp_Typ);\n@@ -5153,9 +5029,7 @@ package body Exp_Ch7 is\n \n          F := Last (Final_List);\n          Dim := Num_Dims;\n-         while Present (F)\n-           and then Dim > 0\n-         loop\n+         while Present (F) and then Dim > 0 loop\n             Loop_Id := F;\n             Prev (F);\n             Remove (Loop_Id);\n@@ -5221,9 +5095,8 @@ package body Exp_Ch7 is\n \n          Final_Block :=\n            Make_Block_Statement (Loc,\n-             Declarations =>\n+             Declarations               =>\n                Build_Object_Declarations (Loc, Abort_Id, E_Id, Raised_Id),\n-\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc, Statements => Stmts));\n \n@@ -5244,14 +5117,11 @@ package body Exp_Ch7 is\n            Make_Block_Statement (Loc,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n-                 Statements => New_List (\n-                   Build_Initialization_Call),\n-\n+                 Statements         => New_List (Build_Initialization_Call),\n                  Exception_Handlers => New_List (\n                    Make_Exception_Handler (Loc,\n-                     Exception_Choices => New_List (\n-                       Make_Others_Choice (Loc)),\n-                     Statements => New_List (Final_Block)))));\n+                     Exception_Choices => New_List (Make_Others_Choice (Loc)),\n+                     Statements        => New_List (Final_Block)))));\n \n          Append_To (Statements (Handled_Statement_Sequence (Init_Loop)),\n            Make_Assignment_Statement (Loc,\n@@ -5270,9 +5140,7 @@ package body Exp_Ch7 is\n \n          J := Last (Index_List);\n          Dim := Num_Dims;\n-         while Present (J)\n-           and then Dim > 0\n-         loop\n+         while Present (J) and then Dim > 0 loop\n             Loop_Id := J;\n             Prev (J);\n             Remove (Loop_Id);\n@@ -5286,8 +5154,7 @@ package body Exp_Ch7 is\n                         Defining_Identifier => Loop_Id,\n                         Discrete_Subtype_Definition =>\n                           Make_Attribute_Reference (Loc,\n-                            Prefix         =>\n-                              Make_Identifier (Loc, Name_V),\n+                            Prefix         => Make_Identifier (Loc, Name_V),\n                             Attribute_Name => Name_Range,\n                             Expressions    => New_List (\n                               Make_Integer_Literal (Loc, Dim))))),\n@@ -5310,7 +5177,7 @@ package body Exp_Ch7 is\n          return\n            New_List (\n              Make_Block_Statement (Loc,\n-               Declarations => New_List (\n+               Declarations               => New_List (\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Counter_Id,\n                    Object_Definition   =>\n@@ -5455,10 +5322,10 @@ package body Exp_Ch7 is\n       function Build_Adjust_Statements (Typ : Entity_Id) return List_Id;\n       --  Build the statements necessary to adjust a record type. The type may\n       --  have discriminants and contain variant parts. Generate:\n-\n+      --\n       --    begin\n       --       Root_Controlled (V).Finalized := False;\n-\n+      --\n       --       begin\n       --          [Deep_]Adjust (V.Comp_1);\n       --       exception\n@@ -5478,7 +5345,7 @@ package body Exp_Ch7 is\n       --                Save_Occurrence (E, Get_Current_Excep.all.all);\n       --             end if;\n       --       end;\n-\n+      --\n       --       begin\n       --          Deep_Adjust (V._parent, False);  --  If applicable\n       --       exception\n@@ -5488,7 +5355,7 @@ package body Exp_Ch7 is\n       --                Save_Occurrence (E, Get_Current_Excep.all.all);\n       --             end if;\n       --       end;\n-\n+      --\n       --       if F then\n       --          begin\n       --             Adjust (V);  --  If applicable\n@@ -5500,7 +5367,7 @@ package body Exp_Ch7 is\n       --                end if;\n       --          end;\n       --       end if;\n-\n+      --\n       --       if Raised then\n       --          Raise_From_Controlled_Object (E, Abort);\n       --       end if;\n@@ -5509,7 +5376,7 @@ package body Exp_Ch7 is\n       function Build_Finalize_Statements (Typ : Entity_Id) return List_Id;\n       --  Build the statements necessary to finalize a record type. The type\n       --  may have discriminants and contain variant parts. Generate:\n-\n+      --\n       --    declare\n       --       Temp   : constant Exception_Occurrence_Access :=\n       --                  Get_Current_Excep.all;\n@@ -5521,12 +5388,12 @@ package body Exp_Ch7 is\n       --       Abort  : constant Boolean := False;  --  no abort\n       --       E      : Exception_Occurence;\n       --       Raised : Boolean := False;\n-\n+      --\n       --    begin\n       --       if Root_Controlled (V).Finalized then\n       --          return;\n       --       end if;\n-\n+      --\n       --       if F then\n       --          begin\n       --             Finalize (V);  --  If applicable\n@@ -5538,7 +5405,7 @@ package body Exp_Ch7 is\n       --                end if;\n       --          end;\n       --       end if;\n-\n+      --\n       --       case Variant_1 is\n       --          when Value_1 =>\n       --             case State_Counter_N =>  --  If Is_Local is enabled\n@@ -5550,7 +5417,7 @@ package body Exp_Ch7 is\n       --                when others =>            .\n       --                   goto L0;               .\n       --             end case;                    .\n-\n+      --\n       --             <<LN>>                   --  If Is_Local is enabled\n       --             begin\n       --                [Deep_]Finalize (V.Comp_N);\n@@ -5574,12 +5441,12 @@ package body Exp_Ch7 is\n       --             end;\n       --             <<L0>>\n       --       end case;\n-\n+      --\n       --       case State_Counter_1 =>  --  If Is_Local is enabled\n       --          when M =>                 .\n       --             goto LM;               .\n       --       ...\n-\n+      --\n       --       begin\n       --          Deep_Finalize (V._parent, False);  --  If applicable\n       --       exception\n@@ -5589,9 +5456,9 @@ package body Exp_Ch7 is\n       --                Save_Occurrence (E, Get_Current_Excep.all.all);\n       --             end if;\n       --       end;\n-\n+      --\n       --       Root_Controlled (V).Finalized := True;\n-\n+      --\n       --       if Raised then\n       --          Raise_From_Controlled_Object (E, Abort);\n       --       end if;\n@@ -5674,21 +5541,18 @@ package body Exp_Ch7 is\n                  Make_Adjust_Call (\n                    Obj_Ref =>\n                      Make_Selected_Component (Loc,\n-                       Prefix =>\n-                         Make_Identifier (Loc, Name_V),\n-                       Selector_Name =>\n-                         Make_Identifier (Loc, Chars (Id))),\n-                   Typ => Typ);\n+                       Prefix        => Make_Identifier (Loc, Name_V),\n+                       Selector_Name => Make_Identifier (Loc, Chars (Id))),\n+                   Typ     => Typ);\n \n                if Exceptions_OK then\n                   Adj_Stmt :=\n                     Make_Block_Statement (Loc,\n                       Handled_Statement_Sequence =>\n                         Make_Handled_Sequence_Of_Statements (Loc,\n-                          Statements => New_List (Adj_Stmt),\n-\n-                        Exception_Handlers => New_List (\n-                          Build_Exception_Handler (Loc, E_Id, Raised_Id))));\n+                          Statements         => New_List (Adj_Stmt),\n+                          Exception_Handlers => New_List (\n+                            Build_Exception_Handler (Loc, E_Id, Raised_Id))));\n                end if;\n \n                Append_To (Stmts, Adj_Stmt);\n@@ -5882,9 +5746,7 @@ package body Exp_Ch7 is\n          --\n          --    Deep_Adjust (Obj._parent, False);\n \n-         if Is_Tagged_Type (Typ)\n-           and then Is_Derived_Type (Typ)\n-         then\n+         if Is_Tagged_Type (Typ) and then Is_Derived_Type (Typ) then\n             declare\n                Par_Typ  : constant Entity_Id := Parent_Field_Type (Typ);\n                Adj_Stmt : Node_Id;\n@@ -6254,11 +6116,10 @@ package body Exp_Ch7 is\n                     Make_Case_Statement (Loc,\n                       Expression =>\n                         Make_Selected_Component (Loc,\n-                          Prefix =>\n-                            Make_Identifier (Loc, Name_V),\n+                          Prefix        => Make_Identifier (Loc, Name_V),\n                           Selector_Name =>\n                             Make_Identifier (Loc,\n-                              Chars (Name (Variant_Part (Comps))))),\n+                              Chars => Chars (Name (Variant_Part (Comps))))),\n                       Alternatives => Var_Alts);\n                end;\n             end if;\n@@ -6367,16 +6228,15 @@ package body Exp_Ch7 is\n                --  Add the declaration of default jump location L0, its\n                --  corresponding alternative and its place in the statements.\n \n-               Label_Id :=\n-                 Make_Identifier (Loc, New_External_Name ('L', 0));\n+               Label_Id := Make_Identifier (Loc, New_External_Name ('L', 0));\n                Set_Entity (Label_Id,\n                  Make_Defining_Identifier (Loc, Chars (Label_Id)));\n                Label := Make_Label (Loc, Label_Id);\n \n                Append_To (Decls,          --  declaration\n                  Make_Implicit_Label_Declaration (Loc,\n                    Defining_Identifier => Entity (Label_Id),\n-                    Label_Construct => Label));\n+                   Label_Construct     => Label));\n \n                Append_To (Alts,           --  alternative\n                  Make_Case_Statement_Alternative (Loc,\n@@ -6385,17 +6245,15 @@ package body Exp_Ch7 is\n \n                    Statements => New_List (\n                      Make_Goto_Statement (Loc,\n-                       Name =>\n-                         New_Reference_To (Entity (Label_Id), Loc)))));\n+                       Name => New_Reference_To (Entity (Label_Id), Loc)))));\n \n                Append_To (Stmts, Label);  --  statement\n \n                --  Create the jump block\n \n                Prepend_To (Stmts,\n                  Make_Case_Statement (Loc,\n-                   Expression =>\n-                     Make_Identifier (Loc, Chars (Counter_Id)),\n+                   Expression   => Make_Identifier (Loc, Chars (Counter_Id)),\n                    Alternatives => Alts));\n             end if;\n \n@@ -7015,11 +6873,10 @@ package body Exp_Ch7 is\n       Decls := New_List (\n         Make_Full_Type_Declaration (Loc,\n           Defining_Identifier => Ptr_Typ,\n-          Type_Definition =>\n+          Type_Definition     =>\n             Make_Access_To_Object_Definition (Loc,\n-              All_Present => True,\n-              Subtype_Indication =>\n-                New_Reference_To (Desg_Typ, Loc))),\n+              All_Present        => True,\n+              Subtype_Indication => New_Reference_To (Desg_Typ, Loc))),\n \n         Make_Attribute_Definition_Clause (Loc,\n           Name       => New_Reference_To (Ptr_Typ, Loc),\n@@ -7059,8 +6916,7 @@ package body Exp_Ch7 is\n                    Left_Opnd  => Make_Integer_Literal (Loc, 2),\n                    Right_Opnd =>\n                      Make_Op_Divide (Loc,\n-                       Left_Opnd  =>\n-                         Make_Integer_Literal (Loc, Esize (Typ)),\n+                       Left_Opnd  => Make_Integer_Literal (Loc, Esize (Typ)),\n                        Right_Opnd =>\n                          Make_Integer_Literal (Loc, System_Storage_Unit)));\n             end Bounds_Size_Expression;\n@@ -7270,6 +7126,7 @@ package body Exp_Ch7 is\n       then\n          Utyp := Underlying_Type (Root_Type (Base_Type (Typ)));\n          Ref  := Unchecked_Convert_To (Utyp, Ref);\n+\n          Set_Assignment_OK (Ref);\n          --  To prevent problems with UC see 1.156 RH ???\n       end if;\n@@ -7377,9 +7234,7 @@ package body Exp_Ch7 is\n       else\n          Utyp := Typ;\n \n-         if Is_Private_Type (Utyp)\n-           and then Present (Full_View (Utyp))\n-         then\n+         if Is_Private_Type (Utyp) and then Present (Full_View (Utyp)) then\n             Utyp := Full_View (Utyp);\n          end if;\n \n@@ -7620,8 +7475,8 @@ package body Exp_Ch7 is\n    --  scope, furthermore, if they are controlled variables they are finalized\n    --  right after the declaration. The finalization list of the transient\n    --  scope is defined as a renaming of the enclosing one so during their\n-   --  initialization they will be attached to the proper finalization\n-   --  list. For instance, the following declaration :\n+   --  initialization they will be attached to the proper finalization list.\n+   --  For instance, the following declaration :\n \n    --        X : Typ := F (G (A), G (B));\n \n@@ -7686,11 +7541,12 @@ package body Exp_Ch7 is\n \n    begin\n       --  Generate:\n+\n       --    Temp : Typ;\n       --    declare\n       --       M : constant Mark_Id := SS_Mark;\n       --       procedure Finalizer is ...  (See Build_Finalizer)\n-      --\n+\n       --    begin\n       --       Temp := <Expr>;\n       --"}, {"sha": "e62d013e9ed7f1bf586e27a4a602fc397c76aa59", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfae2bed7e333ce6366be60f5631adedab373b61/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfae2bed7e333ce6366be60f5631adedab373b61/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=cfae2bed7e333ce6366be60f5631adedab373b61", "patch": "@@ -964,8 +964,7 @@ package body Sem_Util is\n           Defining_Identifier => Elab_Ent,\n           Object_Definition   =>\n             New_Occurrence_Of (Standard_Short_Integer, Loc),\n-          Expression          =>\n-            Make_Integer_Literal (Loc, Uint_0));\n+          Expression          => Make_Integer_Literal (Loc, Uint_0));\n \n       Push_Scope (Standard_Standard);\n       Add_Global_Declaration (Decl);"}]}