{"sha": "b036c6c53edca64a63460f3976494bd011c5ffb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzNmM2YzUzZWRjYTY0YTYzNDYwZjM5NzY0OTRiZDAxMWM1ZmZiNg==", "commit": {"author": {"name": "Ilya Enkovich", "email": "enkovich.gnu@gmail.com", "date": "2015-11-06T13:31:51Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-11-06T13:31:51Z"}, "message": "re PR tree-optimization/68145 (ICE: in vectorizable_store, at tree-vect-stmts.c:5684)\n\ngcc/\n\n\tPR tree-optimization/68145\n\t* tree-vect-stmts.c (vectorizable_operation): Fix\n\tdetermination for booleans.\n\ngcc/testsuite/\n\n\tPR tree-optimization/68145\n\t* g++.dg/vect/pr68145.cc: New test.\n\nFrom-SVN: r229848", "tree": {"sha": "dce0c9f8a2a821196685b99d801fc09b84a3d91e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dce0c9f8a2a821196685b99d801fc09b84a3d91e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b036c6c53edca64a63460f3976494bd011c5ffb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b036c6c53edca64a63460f3976494bd011c5ffb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b036c6c53edca64a63460f3976494bd011c5ffb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b036c6c53edca64a63460f3976494bd011c5ffb6/comments", "author": null, "committer": null, "parents": [{"sha": "4a4b6c4c277f17b2f33c6c6828a906c028d8a0b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4b6c4c277f17b2f33c6c6828a906c028d8a0b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4b6c4c277f17b2f33c6c6828a906c028d8a0b6"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "0a83f6fbe9777da3558ddccfb1c390045c7433f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b036c6c53edca64a63460f3976494bd011c5ffb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b036c6c53edca64a63460f3976494bd011c5ffb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b036c6c53edca64a63460f3976494bd011c5ffb6", "patch": "@@ -1,3 +1,9 @@\n+2015-11-06  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR tree-optimization/68145\n+\t* tree-vect-stmts.c (vectorizable_operation): Fix\n+\tdetermination for booleans.\n+\n 2015-11-06  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-cfg.c (gimple_split_block_before_cond_jump): Split before"}, {"sha": "749113ba8b1c76bf55c7f6e2112d55bd4a361787", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b036c6c53edca64a63460f3976494bd011c5ffb6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b036c6c53edca64a63460f3976494bd011c5ffb6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b036c6c53edca64a63460f3976494bd011c5ffb6", "patch": "@@ -1,3 +1,8 @@\n+2015-11-06  Ilya Enkovich  <enkovich.gnu@gmail.com>\n+\n+\tPR tree-optimization/68145\n+\t* g++.dg/vect/pr68145.cc: New test.\n+\n 2015-11-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/68088"}, {"sha": "51e663ae6362c87d0bb401e0267a60c01e834dd7", "filename": "gcc/testsuite/g++.dg/vect/pr68145.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b036c6c53edca64a63460f3976494bd011c5ffb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr68145.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b036c6c53edca64a63460f3976494bd011c5ffb6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr68145.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr68145.cc?ref=b036c6c53edca64a63460f3976494bd011c5ffb6", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+\n+struct A {\n+  bool operator()(int p1, int p2) { return p1 && p2; }\n+};\n+class B {\n+public:\n+  bool *cbegin();\n+  bool *cend();\n+};\n+template <class T> void operator&&(B p1, T p2) {\n+  B a;\n+  arrayContTransform(p1, p2, a, A());\n+}\n+\n+template <typename _InputIterator1, typename T, typename _OutputIterator,\n+          typename _BinaryOperation>\n+void myrtransform(_InputIterator1 p1, _OutputIterator p2, T p3,\n+                  _BinaryOperation p4) {\n+  _InputIterator1 b;\n+  for (; b != p1; ++b, ++p2)\n+    *p2 = p4(*b, p3);\n+}\n+\n+template <typename L, typename R, typename RES, typename BinaryOperator>\n+void arrayContTransform(L p1, R p2, RES p3, BinaryOperator p4) {\n+  myrtransform(p1.cend(), p3.cbegin(), p2, p4);\n+}\n+\n+class C {\n+public:\n+  B getArrayBool();\n+};\n+class D {\n+  B getArrayBool(const int &);\n+  C lnode_p;\n+};\n+bool c;\n+B D::getArrayBool(const int &) { lnode_p.getArrayBool() && c; }\n+\n+// { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { target { i?86-*-* x86_64-*-* } } } }"}, {"sha": "51dff9eb19ee553a95ecd09497840eab0c51dfa8", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b036c6c53edca64a63460f3976494bd011c5ffb6/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b036c6c53edca64a63460f3976494bd011c5ffb6/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=b036c6c53edca64a63460f3976494bd011c5ffb6", "patch": "@@ -4703,7 +4703,26 @@ vectorizable_operation (gimple *stmt, gimple_stmt_iterator *gsi,\n   /* If op0 is an external or constant def use a vector type with\n      the same size as the output vector type.  */\n   if (!vectype)\n-    vectype = get_same_sized_vectype (TREE_TYPE (op0), vectype_out);\n+    {\n+      /* For boolean type we cannot determine vectype by\n+\t invariant value (don't know whether it is a vector\n+\t of booleans or vector of integers).  We use output\n+\t vectype because operations on boolean don't change\n+\t type.  */\n+      if (TREE_CODE (TREE_TYPE (op0)) == BOOLEAN_TYPE)\n+\t{\n+\t  if (TREE_CODE (TREE_TYPE (scalar_dest)) != BOOLEAN_TYPE)\n+\t    {\n+\t      if (dump_enabled_p ())\n+\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t \"not supported operation on bool value.\\n\");\n+\t      return false;\n+\t    }\n+\t  vectype = vectype_out;\n+\t}\n+      else\n+\tvectype = get_same_sized_vectype (TREE_TYPE (op0), vectype_out);\n+    }\n   if (vec_stmt)\n     gcc_assert (vectype);\n   if (!vectype)"}]}