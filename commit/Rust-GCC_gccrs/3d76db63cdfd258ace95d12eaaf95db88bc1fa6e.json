{"sha": "3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q3NmRiNjNjZGZkMjU4YWNlOTVkMTJlYWFmOTVkYjg4YmMxZmE2ZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-05-23T16:39:47Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-05-23T16:39:47Z"}, "message": "Implement P0614R1, Range-based for statements with initializer.\n\n\t* parser.c (cp_parser_range_based_for_with_init_p): New.\n\t(cp_parser_init_statement): Use it.  Parse the optional init-statement\n\tfor a range-based for loop.\n\t(cp_parser_skip_to_closing_parenthesis_1): Handle balancing ?:.\n\n\t* g++.dg/cpp2a/range-for1.C: New test.\n\t* g++.dg/cpp2a/range-for2.C: New test.\n\t* g++.dg/cpp2a/range-for3.C: New test.\n\t* g++.dg/cpp2a/range-for4.C: New test.\n\t* g++.dg/cpp2a/range-for5.C: New test.\n\t* g++.dg/cpp2a/range-for6.C: New test.\n\t* g++.dg/cpp2a/range-for7.C: New test.\n\nFrom-SVN: r260619", "tree": {"sha": "dca6330e387f24ac7e98291195b8a4e4e35fe999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dca6330e387f24ac7e98291195b8a4e4e35fe999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2ff35c0913539a31782fbc05bb6d4c2ce74f2ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ff35c0913539a31782fbc05bb6d4c2ce74f2ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ff35c0913539a31782fbc05bb6d4c2ce74f2ce"}], "stats": {"total": 291, "additions": 285, "deletions": 6}, "files": [{"sha": "1e0854fc2a1ce1cdb1bf72415869a1d15a6035a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "patch": "@@ -1,3 +1,11 @@\n+2018-05-23  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement P0614R1, Range-based for statements with initializer.\n+\t* parser.c (cp_parser_range_based_for_with_init_p): New.\n+\t(cp_parser_init_statement): Use it.  Parse the optional init-statement\n+\tfor a range-based for loop.\n+\t(cp_parser_skip_to_closing_parenthesis_1): Handle balancing ?:.\n+\n 2018-05-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/81420 - not extending temporary lifetime."}, {"sha": "d3e73488e8428c59e5605103edc1b2535820418e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 74, "deletions": 6, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "patch": "@@ -3493,6 +3493,7 @@ cp_parser_skip_to_closing_parenthesis_1 (cp_parser *parser,\n   unsigned paren_depth = 0;\n   unsigned brace_depth = 0;\n   unsigned square_depth = 0;\n+  unsigned condop_depth = 0;\n \n   if (recovering && or_ttype == CPP_EOF\n       && cp_parser_uncommitted_to_tentative_parse_p (parser))\n@@ -3504,7 +3505,7 @@ cp_parser_skip_to_closing_parenthesis_1 (cp_parser *parser,\n \n       /* Have we found what we're looking for before the closing paren?  */\n       if (token->type == or_ttype && or_ttype != CPP_EOF\n-\t  && !brace_depth && !paren_depth && !square_depth)\n+\t  && !brace_depth && !paren_depth && !square_depth && !condop_depth)\n \treturn -1;\n \n       switch (token->type)\n@@ -3551,6 +3552,16 @@ cp_parser_skip_to_closing_parenthesis_1 (cp_parser *parser,\n \t    }\n \t  break;\n \n+\tcase CPP_QUERY:\n+\t  if (!brace_depth && !paren_depth && !square_depth)\n+\t    ++condop_depth;\n+\t  break;\n+\n+\tcase CPP_COLON:\n+\t  if (!brace_depth && !paren_depth && !square_depth && condop_depth > 0)\n+\t    condop_depth--;\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -11255,6 +11266,40 @@ cp_parser_statement_seq_opt (cp_parser* parser, tree in_statement_expr)\n     }\n }\n \n+/* Return true if this is the C++20 version of range-based-for with\n+   init-statement.  */\n+\n+static bool\n+cp_parser_range_based_for_with_init_p (cp_parser *parser)\n+{\n+  bool r = false;\n+\n+  /* Save tokens so that we can put them back.  */\n+  cp_lexer_save_tokens (parser->lexer);\n+\n+  /* There has to be an unnested ; followed by an unnested :.  */\n+  if (cp_parser_skip_to_closing_parenthesis_1 (parser,\n+\t\t\t\t\t       /*recovering=*/false,\n+\t\t\t\t\t       CPP_SEMICOLON,\n+\t\t\t\t\t       /*consume_paren=*/false) != -1)\n+    goto out;\n+\n+  /* We found the semicolon, eat it now.  */\n+  cp_lexer_consume_token (parser->lexer);\n+\n+  /* Now look for ':' that is not nested in () or {}.  */\n+  r = (cp_parser_skip_to_closing_parenthesis_1 (parser,\n+\t\t\t\t\t\t/*recovering=*/false,\n+\t\t\t\t\t\tCPP_COLON,\n+\t\t\t\t\t\t/*consume_paren=*/false) == -1);\n+\n+out:\n+  /* Roll back the tokens we skipped.  */\n+  cp_lexer_rollback_tokens (parser->lexer);\n+\n+  return r;\n+}\n+\n /* Return true if we're looking at (init; cond), false otherwise.  */\n \n static bool\n@@ -12299,7 +12344,7 @@ cp_parser_iteration_statement (cp_parser* parser, bool *if_p, bool ivdep,\n      simple-declaration  */\n \n static bool\n-cp_parser_init_statement (cp_parser* parser, tree *decl)\n+cp_parser_init_statement (cp_parser *parser, tree *decl)\n {\n   /* If the next token is a `;', then we have an empty\n      expression-statement.  Grammatically, this is also a\n@@ -12312,6 +12357,29 @@ cp_parser_init_statement (cp_parser* parser, tree *decl)\n       bool is_range_for = false;\n       bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;\n \n+      /* Try to parse the init-statement.  */\n+      if (cp_parser_range_based_for_with_init_p (parser))\n+\t{\n+\t  tree dummy;\n+\t  cp_parser_parse_tentatively (parser);\n+\t  /* Parse the declaration.  */\n+\t  cp_parser_simple_declaration (parser,\n+\t\t\t\t\t/*function_definition_allowed_p=*/false,\n+\t\t\t\t\t&dummy);\n+\t  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n+\t  if (!cp_parser_parse_definitely (parser))\n+\t    /* That didn't work, try to parse it as an expression-statement.  */\n+\t    cp_parser_expression_statement (parser, NULL_TREE);\n+\n+\t  if (cxx_dialect < cxx2a)\n+\t    {\n+\t      pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,\n+\t\t       \"range-based %<for%> loops with initializer only \"\n+\t\t       \"available with -std=c++2a or -std=gnu++2a\");\n+\t      *decl = error_mark_node;\n+\t    }\n+\t}\n+\n       /* A colon is used in range-based for.  */\n       parser->colon_corrects_to_scope_p = false;\n \n@@ -12325,7 +12393,7 @@ cp_parser_init_statement (cp_parser* parser, tree *decl)\n       parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;\n       if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))\n \t{\n-\t  /* It is a range-for, consume the ':' */\n+\t  /* It is a range-for, consume the ':'.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t  is_range_for = true;\n \t  if (cxx_dialect < cxx11)\n@@ -12337,9 +12405,9 @@ cp_parser_init_statement (cp_parser* parser, tree *decl)\n \t    }\n \t}\n       else\n-\t  /* The ';' is not consumed yet because we told\n-\t     cp_parser_simple_declaration not to.  */\n-\t  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n+\t/* The ';' is not consumed yet because we told\n+\t   cp_parser_simple_declaration not to.  */\n+\tcp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n \n       if (cp_parser_parse_definitely (parser))\n \treturn is_range_for;"}, {"sha": "db9ae1d793180764cb3daecdd94164860e0a14de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "patch": "@@ -1,3 +1,13 @@\n+2018-05-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp2a/range-for1.C: New test.\n+\t* g++.dg/cpp2a/range-for2.C: New test.\n+\t* g++.dg/cpp2a/range-for3.C: New test.\n+\t* g++.dg/cpp2a/range-for4.C: New test.\n+\t* g++.dg/cpp2a/range-for5.C: New test.\n+\t* g++.dg/cpp2a/range-for6.C: New test.\n+\t* g++.dg/cpp2a/range-for7.C: New test.\n+\n 2018-05-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/cvt-3.c: New test."}, {"sha": "3a5523585a105d2d04eed90b5bcb0cdc7f26d8e0", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for1.C?ref=3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "patch": "@@ -0,0 +1,16 @@\n+// P0614R1\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+void\n+fn1 ()\n+{\n+  int a[] = { 1, 2, 3, 4, 5 };\n+\n+  for (int i = 0; auto x : a) // { dg-warning \"range-based .for. loops with initializer only available with\" \"\" { target c++17_down } }\n+    ++i;\n+\n+  int i;\n+  for (i = 0; auto x : a) // { dg-warning \"range-based .for. loops with initializer only available with\" \"\" { target c++17_down } }\n+    ++i;\n+}"}, {"sha": "acb16c57d1cb99211511537fb51a64d8fe4adbfc", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for2.C?ref=3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "patch": "@@ -0,0 +1,16 @@\n+// P0614R1\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+void\n+fn1 ()\n+{\n+  int a[] = { 1, 2, 3, 4, 5 };\n+\n+  for (int i = 0; auto x : a)\n+    ++i;\n+\n+  int i;\n+  for (i = 0; auto x : a)\n+    ++i;\n+}"}, {"sha": "291e605b92f395b0d87e2c84f9ae4d9e1a7ab74e", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for3.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for3.C?ref=3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "patch": "@@ -0,0 +1,26 @@\n+// P0614R1\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+static const int a[] = { 1, 2, 3, 4, 5 };\n+extern void foo (int);\n+extern void bar (int, int);\n+\n+constexpr int\n+baz ()\n+{\n+  return 6;\n+}\n+\n+void\n+fn1 (int i)\n+{\n+  for ((i += 2); auto x : a)\n+    foo (i);\n+\n+  for (auto j = 0, k = 0; auto x : a)\n+    bar (j + k, x);\n+\n+  for (constexpr int j = baz (); auto x : a)\n+    bar (x, j);\n+}"}, {"sha": "6ba783f46cb8fdf80df3dcc0af667c1eb3013185", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for4.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for4.C?ref=3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "patch": "@@ -0,0 +1,27 @@\n+// P0614R1\n+// { dg-do run }\n+// { dg-options \"-std=c++2a\" }\n+\n+int\n+main ()\n+{\n+  int a[] = { 1, 2, 3, 4, 5 };\n+\n+  for (int i = 1; auto x : a)\n+    if (i++ != x)\n+      __builtin_abort ();\n+\n+  int i;\n+  for (i = 1; auto x : a)\n+    if (i++ != x)\n+      __builtin_abort ();\n+\n+  i = 0;\n+  for (i++; auto x : a)\n+    if (i != 1)\n+      __builtin_abort ();\n+\n+  for (int s[] = { 1, 1, 1 }; auto x : s)\n+    if (x != 1)\n+      __builtin_abort ();\n+}"}, {"sha": "62f1c2f04e170070bb0656abf5fe24db493927fd", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for5.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for5.C?ref=3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "patch": "@@ -0,0 +1,46 @@\n+// P0614R1\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+void\n+fn1 ()\n+{\n+  int a[] = { 1, 2, 3, 4, 5 };\n+\n+  for (int i = 0; auto x : a)\n+    ++i;\n+\n+  i = 0; // { dg-error \"not declared\" }\n+\n+  for (int i = 0; auto x : a)\n+    {\n+      for (int j = 0; auto x : a)\n+\t{\n+\t  for (int k = 0; auto x : a)\n+\t    k++;\n+\t  k++; // { dg-error \"not declared\" }\n+\t}\n+      j++; // { dg-error \"not declared\" }\n+    }\n+}\n+\n+void\n+fn2 ()\n+{\n+  int a[] = { 1, 2, 3, 4, 5 };\n+  for (int i = 0; auto x : a)\n+    int i = 3; // { dg-error \"redeclaration\" }\n+}\n+void\n+fn3 ()\n+{\n+  int a[] = { 1, 2, 3, 4, 5 };\n+\n+  for (;:) // { dg-error \"expected\" }\n+    {\n+    }\n+\n+  for (;;:) // { dg-error \"expected\" }\n+    {\n+    }\n+}"}, {"sha": "4cee60a839e19cdcdb0d06d2112c448286773186", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for6.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for6.C?ref=3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "patch": "@@ -0,0 +1,17 @@\n+// P0614R1\n+// { dg-do run }\n+// { dg-options \"-std=c++2a\" }\n+\n+int\n+main ()\n+{\n+  int a[] = { 1, 2, 3, 4, 5 };\n+\n+  for (int i = []{ return 3; }(); auto x : a)\n+    if (i != 3)\n+      __builtin_abort ();\n+\n+  for (int i = ({ 3; }); auto x : a)\n+    if (i != 3)\n+      __builtin_abort ();\n+}"}, {"sha": "5a3a89c1c25b3982c0afde6045d6cbf661ecb59a", "filename": "gcc/testsuite/g++.dg/cpp2a/range-for7.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d76db63cdfd258ace95d12eaaf95db88bc1fa6e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Frange-for7.C?ref=3d76db63cdfd258ace95d12eaaf95db88bc1fa6e", "patch": "@@ -0,0 +1,45 @@\n+// P0614R1\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+extern void bar (int);\n+\n+void\n+fn0 (int n)\n+{\n+  int a[] = { 1, 2, 3, 4, 5 };\n+\n+  /* Don't get confused by the colon here.  */\n+  for (int i = 0; n > 0 ? true : false; i++)\n+    bar (i);\n+\n+  for (int i = n ? 3 : 4; auto x : a)\n+    bar (x);\n+\n+  for (int i = n ? ({ a: 3; }) : 4; i < 10; i++)\n+    bar (i);\n+\n+  for (int i = n ? ({ L: 3; }) : 4; auto x : a)\n+    bar (x);\n+\n+  for (int i = n; auto x : a)\n+    bar (x);\n+\n+  for (int i = n ? n ? n : 3 : 3; auto x : a)\n+    bar (x);\n+\n+  for (int i = n ? n ? 3 : n ? 3 : 3 : 3; auto x : a)\n+    bar (x);\n+\n+  for (int i = [=]{ return n ? 1 : 2; }(); auto x : a)\n+    bar (x);\n+\n+  for (int i = [=]{ L2: if (!n) goto L2; else return 2; }(); auto x : a)\n+    bar (x);\n+\n+  for (auto x = n ? 1 : 2 : a) // { dg-error \"initializer\" }\n+    bar (x);\n+\n+  for (int i = 1; auto x = n ? 1 : 2 : a) // { dg-error \"initializer\" }\n+    bar (x);\n+}"}]}