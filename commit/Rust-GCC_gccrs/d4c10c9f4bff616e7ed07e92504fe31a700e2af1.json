{"sha": "d4c10c9f4bff616e7ed07e92504fe31a700e2af1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRjMTBjOWY0YmZmNjE2ZTdlZDA3ZTkyNTA0ZmUzMWE3MDBlMmFmMQ==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-02-18T10:00:50Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-02-18T10:00:50Z"}, "message": "[fortran] ICE in gfc_validate_kind(): Got bad kind [PR93580]\n\nCaused by using invalid part_refs in kind specifications,\ne.g. %re or %im on non-complex expressions and %len on\nnon character expressions.\n\nCheck whether %re, %im and %len are valid when checking\nkind specification.\n\nThe original patch from Steven G. Kargl  <kargl@gcc.gnu.org> only\nchecked for %re and %im.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/93580\n\t* primary.c (gfc_match_varspec): If the symbol following %\n\tis re or im and the primary expression type is not BT_COMPLEX\n\tissue an error. If the symbol is len and the primary\n\texpression type is not BT_CHARACTER is an error.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/93580\n\t* gfortran.dg/dg/pr93580.f90: New test.", "tree": {"sha": "72b83cccb0605d3367f12ddf4d03494ae62e3496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72b83cccb0605d3367f12ddf4d03494ae62e3496"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4c10c9f4bff616e7ed07e92504fe31a700e2af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c10c9f4bff616e7ed07e92504fe31a700e2af1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c10c9f4bff616e7ed07e92504fe31a700e2af1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c10c9f4bff616e7ed07e92504fe31a700e2af1/comments", "author": null, "committer": null, "parents": [{"sha": "da67227bfc407dd1412b3396ed962f30084f9401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da67227bfc407dd1412b3396ed962f30084f9401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da67227bfc407dd1412b3396ed962f30084f9401"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "302af3aa9903dbd61246d1102a65553075737b61", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c10c9f4bff616e7ed07e92504fe31a700e2af1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c10c9f4bff616e7ed07e92504fe31a700e2af1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d4c10c9f4bff616e7ed07e92504fe31a700e2af1", "patch": "@@ -1,3 +1,12 @@\n+2020-02-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/93580\n+\t* primary.c (gfc_match_varspec): If the symbol following %\n+\tis re or im and the primary expression type is not BT_COMPLEX\n+\tissue an error. If the symbol is len and the primary\n+\texpression type is not BT_CHARACTER is an error.\n+\n 2020-02-10  Andrew Benson  <abensonca@gmail.com>\n \n         PR fortran/83113"}, {"sha": "d73898473df68e7d2bb4aac0a133164ade79fa1a", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c10c9f4bff616e7ed07e92504fe31a700e2af1/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c10c9f4bff616e7ed07e92504fe31a700e2af1/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=d4c10c9f4bff616e7ed07e92504fe31a700e2af1", "patch": "@@ -2241,8 +2241,28 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n \t  if (inquiry)\n \t    sym = NULL;\n \n-\t  if (sep == '%' && primary->ts.type != BT_UNKNOWN)\n-\t    intrinsic = true;\n+\t  if (sep == '%')\n+\t    {\n+\t      if (tmp)\n+\t\t{\n+\t\t  if ((tmp->u.i == INQUIRY_RE || tmp->u.i == INQUIRY_IM)\n+\t\t      && primary->ts.type != BT_COMPLEX)\n+\t\t    {\n+\t\t\tgfc_error (\"The RE or IM part_ref at %C must be \"\n+\t\t\t\t   \"applied to a COMPLEX expression\");\n+\t\t\treturn MATCH_ERROR;\n+\t\t    }\n+\t\t  else if (tmp->u.i == INQUIRY_LEN\n+\t\t\t   && primary->ts.type != BT_CHARACTER)\n+\t\t    {\n+\t\t\tgfc_error (\"The LEN part_ref at %C must be applied \"\n+\t\t\t\t   \"to a CHARACTER expression\");\n+\t\t\treturn MATCH_ERROR;\n+\t\t    }\n+\t\t}\n+\t      if (primary->ts.type != BT_UNKNOWN)\n+\t\tintrinsic = true;\n+\t    }\n \t}\n       else\n \tinquiry = false;"}, {"sha": "1c7f879bf66d163fffde32ae277b578137463852", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c10c9f4bff616e7ed07e92504fe31a700e2af1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c10c9f4bff616e7ed07e92504fe31a700e2af1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4c10c9f4bff616e7ed07e92504fe31a700e2af1", "patch": "@@ -1,3 +1,8 @@\n+2020-02-20  Mark Eggleston <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/93580\n+\t* gfortran.dg/dg/pr93580.f90: New test.\n+\n 2020-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/93780"}, {"sha": "4feaa1129142f121234fa6ad8168509b9ea660cf", "filename": "gcc/testsuite/gfortran.dg/pr93580.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4c10c9f4bff616e7ed07e92504fe31a700e2af1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93580.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4c10c9f4bff616e7ed07e92504fe31a700e2af1/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93580.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93580.f90?ref=d4c10c9f4bff616e7ed07e92504fe31a700e2af1", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! PR fortran/93580\n+\n+program p\n+   integer, parameter :: n = 4\n+   complex(n%re) :: x    ! { dg-error \"The RE or IM part_ref at\" }\n+   complex(n%im) :: y    ! { dg-error \"The RE or IM part_ref at\" }\n+   complex(n%len) :: z   ! { dg-error \"The LEN part_ref at\" }\n+   character(n%im) :: a  ! { dg-error \"The RE or IM part_ref at\" }\n+   character(n%re) :: b  ! { dg-error \"The RE or IM part_ref at\" }\n+   character(n%len) :: c ! { dg-error \"The LEN part_ref at\" }\n+end\n+"}]}