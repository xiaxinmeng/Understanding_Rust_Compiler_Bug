{"sha": "4074220e4a37bebc2bcb8dd2669b4af603555092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3NDIyMGU0YTM3YmViYzJiY2I4ZGQyNjY5YjRhZjYwMzU1NTA5Mg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-14T01:36:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-14T01:36:53Z"}, "message": "(expand_binop): Do not force constant shift-count to a register, to allow possible widening...\n\n(expand_binop): Do not force constant shift-count to a register, to\nallow possible widening; do not convert_to_mode mode{1,2} or\ncopy_to_mode_reg if mode{1,2} is VOIDmode.\n\nFrom-SVN: r8754", "tree": {"sha": "0d61105e34f90771c610d3b5da8c832cbcb75f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d61105e34f90771c610d3b5da8c832cbcb75f0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4074220e4a37bebc2bcb8dd2669b4af603555092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4074220e4a37bebc2bcb8dd2669b4af603555092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4074220e4a37bebc2bcb8dd2669b4af603555092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4074220e4a37bebc2bcb8dd2669b4af603555092/comments", "author": null, "committer": null, "parents": [{"sha": "801aee461fecd3577391e7e9f149016383199cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801aee461fecd3577391e7e9f149016383199cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/801aee461fecd3577391e7e9f149016383199cee"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "f6309f6afe11ccde047f15f02b523280b7c27601", "filename": "gcc/optabs.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4074220e4a37bebc2bcb8dd2669b4af603555092/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4074220e4a37bebc2bcb8dd2669b4af603555092/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=4074220e4a37bebc2bcb8dd2669b4af603555092", "patch": "@@ -1,5 +1,5 @@\n /* Expand the basic unary and binary arithmetic operations, for GNU compiler.\n-   Copyright (C) 1987, 1988, 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 92, 93, 94, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -380,8 +380,8 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n     op0 = force_reg (mode, op0);\n \n   if (CONSTANT_P (op1) && preserve_subexpressions_p ()\n-      && rtx_cost (op1, binoptab->code) > 2)\n-    op1 = force_reg (shift_op ? word_mode : mode, op1);\n+      && ! shift_op && rtx_cost (op1, binoptab->code) > 2)\n+    op1 = force_reg (mode, op1);\n \n   /* Record where to delete back to if we backtrack.  */\n   last = get_last_insn ();\n@@ -445,20 +445,24 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t the result, convert the operands.  */\n \n       if (GET_MODE (op0) != VOIDmode\n-\t  && GET_MODE (op0) != mode0)\n+\t  && GET_MODE (op0) != mode0\n+\t  && mode0 != VOIDmode)\n \txop0 = convert_to_mode (mode0, xop0, unsignedp);\n \n       if (GET_MODE (xop1) != VOIDmode\n-\t  && GET_MODE (xop1) != mode1)\n+\t  && GET_MODE (xop1) != mode1\n+\t  && mode1 != VOIDmode)\n \txop1 = convert_to_mode (mode1, xop1, unsignedp);\n \n       /* Now, if insn's predicates don't allow our operands, put them into\n \t pseudo regs.  */\n \n-      if (! (*insn_operand_predicate[icode][1]) (xop0, mode0))\n+      if (! (*insn_operand_predicate[icode][1]) (xop0, mode0)\n+\t  && mode0 != VOIDmode)\n \txop0 = copy_to_mode_reg (mode0, xop0);\n \n-      if (! (*insn_operand_predicate[icode][2]) (xop1, mode1))\n+      if (! (*insn_operand_predicate[icode][2]) (xop1, mode1)\n+\t  && mode1 != VOIDmode)\n \txop1 = copy_to_mode_reg (mode1, xop1);\n \n       if (! (*insn_operand_predicate[icode][0]) (temp, mode))"}]}