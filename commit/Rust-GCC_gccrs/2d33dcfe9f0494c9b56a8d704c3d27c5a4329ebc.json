{"sha": "2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQzM2RjZmU5ZjA0OTRjOWI1NmE4ZDcwNGMzZDI3YzVhNDMyOWViYw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2020-02-01T00:46:50Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2020-02-01T00:46:50Z"}, "message": "nios2: Support for GOT-relative DW_EH_PE_datarel encoding.\n\nOn nios2-linux-gnu, there has been a long-standing bug in C++ exception\nhandling that sometimes resulted in link errors like\n\n../nios2-linux-gnu/bin/ld: FDE encoding in /tmp/cccfpQ2l.o(.eh_frame) prevents .eh_frame_hdr table being created\n\nwhen building some shared libraries or PIE executables.  The root of\nthe problem is that GCC was incorrectly emitting an absolute encoding\nin EH tables for PIC.  This patch changes it to use either\nDW_EH_PE_indirect (for global) or DW_EH_PE_datarel (for local), and\nfixes libgcc so it can find the address of the GOT as the base address\nfor DW_EH_PE_datarel.\n\nComplicating matters somewhat, GAS was missing support for\n%gotoff(symbol) relocation syntax.  I have just pushed a fix for that,\nbut I've added a configure check to test for presence of the binutils\nsupport and fall back to the current absolute encoding (which works\nmost of the time) if it is not available.  Once the fix makes it into\nan official binutils release it might be appropriate to make this\nerror out instead.\n\nSince this is a wrong-code bug and affects only nios2 target, I think\nthis is appropriate for Stage 4.  I regression-tested on both\nnios2-linux-gnu and nios2-elf, with and without the binutils support\npresent, before committing this.\n\n2020-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* configure.ac [nios2-*-*]: Check HAVE_AS_NIOS2_GOTOFF_RELOCATION.\n\t* config.in: Regenerated.\n\t* configure: Regenerated.\n\t* config/nios2/nios2.h (ASM_PREFERRED_EH_DATA_FORMAT): Fix handling\n\tfor PIC when HAVE_AS_NIOS2_GOTOFF_RELOCATION.\n\t(ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): New.\n\n\tgcc/testsuite/\n\t* g++.target/nios2/hello-pie.C: New.\n\t* g++.target/nios2/nios2.exp: New.\n\n\tlibgcc/\n\t* config.host [nios2-*-linux*] (tmake_file, tm_file): Adjust.\n\t* config/nios2-elf-lib.h: New.\n\t* unwind-dw2-fde-dip.c (_Unwind_IteratePhdrCallback): Use existing\n\tcode for finding GOT base for nios2.", "tree": {"sha": "f552c2ff1a82a7100904140e5c4f9f20085aee0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f552c2ff1a82a7100904140e5c4f9f20085aee0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20fa702b32c7ec7a7215df322d3e8d19b79f2068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fa702b32c7ec7a7215df322d3e8d19b79f2068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fa702b32c7ec7a7215df322d3e8d19b79f2068"}], "stats": {"total": 198, "additions": 189, "deletions": 9}, "files": [{"sha": "b2031eea3fb82715d25934bd4b38733d99067f9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -1,3 +1,14 @@\n+2020-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tnios2: Support for GOT-relative DW_EH_PE_datarel encoding.\n+\n+\t* configure.ac [nios2-*-*]: Check HAVE_AS_NIOS2_GOTOFF_RELOCATION.\n+\t* config.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* config/nios2/nios2.h (ASM_PREFERRED_EH_DATA_FORMAT): Fix handling\n+\tfor PIC when HAVE_AS_NIOS2_GOTOFF_RELOCATION.\n+\t(ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX): New.\n+\n 2020-02-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* configure: Regenerate."}, {"sha": "48292861842bc82e32b0d677e8b1031e44549144", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -571,6 +571,12 @@\n #endif\n \n \n+/* Define if your assembler supports %gotoff relocation syntax. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_NIOS2_GOTOFF_RELOCATION\n+#endif\n+\n+\n /* Define if your assembler supports the -no-mul-bug-abort option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_NO_MUL_BUG_ABORT_OPTION"}, {"sha": "e81b92815965196a7234415dd0fd004997976f84", "filename": "gcc/config/nios2/nios2.h", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -494,14 +494,40 @@ do {                                                                    \\\n #define EH_RETURN_DATA_REGNO(N) ((N) <= (LAST_ARG_REGNO - FIRST_ARG_REGNO) \\\n \t\t\t\t ? (N) + FIRST_ARG_REGNO : INVALID_REGNUM)\n \n-/* Nios II has no appropriate relocations for a 32-bit PC-relative or\n-   section-relative pointer encoding.  This therefore always chooses an\n-   absolute representation for pointers.  An unfortunate consequence of\n-   this is that ld complains about the absolute fde encoding when linking\n-   with -shared or -fpie, but the warning is harmless and there seems to\n-   be no good way to suppress it.  */\n+/* For PIC, use indirect for global references; it'll end up using a dynamic\n+   relocation, which we want to keep out of read-only EH sections.\n+   For local references, we want to use GOT-relative offsets provided\n+   the assembler supports them.  For non-PIC, use an absolute encoding.  */\n+#ifdef HAVE_AS_NIOS2_GOTOFF_RELOCATION\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)\t\t\\\n-  (flag_pic ? DW_EH_PE_aligned : DW_EH_PE_sdata4)\n+  (flag_pic\t\t\t\t\t\t\t\\\n+   ? ((GLOBAL)\t\t\t\t\t\t\t\\\n+      ? DW_EH_PE_indirect | DW_EH_PE_absptr\t\t\t\\\n+      : DW_EH_PE_datarel | DW_EH_PE_sdata4)\t\t\t\\\n+   : DW_EH_PE_absptr)\n+\n+#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+      if (((ENCODING) & 0xf0) == DW_EH_PE_datarel)\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfputs (\"\\t.4byte %gotoff(\", FILE);\t\t\t\t\\\n+\toutput_addr_const (FILE, ADDR);\t\t\t\t\t\\\n+\tfputs (\")\", FILE);\t\t\t\t\t\t\\\n+\tgoto DONE;\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#else\n+/* We don't have %gotoff support in the assembler.  Fall back to the encoding\n+   it used to use instead before the assembler was fixed.  This has known\n+   bugs but mostly works.  */\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)\t\t\\\n+  (flag_pic\t\t\t\t\t\t\t\\\n+   ? ((GLOBAL)\t\t\t\t\t\t\t\\\n+      ? DW_EH_PE_indirect | DW_EH_PE_absptr\t\t\t\\\n+      : DW_EH_PE_aligned)\t\t\t\t\t\\\n+   : DW_EH_PE_absptr)\n+#endif\n \n /* Misc. parameters.  */\n "}, {"sha": "5fa565a40a4bdd83e0edbbab61c1b37e7308f58c", "filename": "gcc/configure", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -27973,6 +27973,43 @@ $as_echo \"#define HAVE_NEWLIB_NANO_FORMATTED_IO 1\" >>confdefs.h\n \n       fi\n     ;;\n+    nios2-*-*)\n+    # Versions 2.33 and earlier lacked support for the %gotoff relocation\n+    # syntax that is documented in the ABI specification.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for support for %gotoff relocations in constant data\" >&5\n+$as_echo_n \"checking assembler for support for %gotoff relocations in constant data... \" >&6; }\n+if ${gcc_cv_as_nios2_gotoff_relocation+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_nios2_gotoff_relocation=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '\t.extern foo\n+\t.data\n+\t.long %gotoff(foo)' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_nios2_gotoff_relocation=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_nios2_gotoff_relocation\" >&5\n+$as_echo \"$gcc_cv_as_nios2_gotoff_relocation\" >&6; }\n+if test $gcc_cv_as_nios2_gotoff_relocation = yes; then\n+\n+$as_echo \"#define HAVE_AS_NIOS2_GOTOFF_RELOCATION 1\" >>confdefs.h\n+\n+fi\n+\n+    ;;\n     riscv*-*-*)\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .attribute support\" >&5\n $as_echo_n \"checking assembler for .attribute support... \" >&6; }"}, {"sha": "671b9a67d81b458641011977d70d23f1a699e67c", "filename": "gcc/configure.ac", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -5032,6 +5032,17 @@ pointers into PC-relative form.])\n configured with --enable-newlib-nano-formatted-io.])\n       fi\n     ;;\n+    nios2-*-*)\n+    # Versions 2.33 and earlier lacked support for the %gotoff relocation\n+    # syntax that is documented in the ABI specification.\n+    gcc_GAS_CHECK_FEATURE([support for %gotoff relocations in constant data],\n+      gcc_cv_as_nios2_gotoff_relocation,,,\n+[\t.extern foo\n+\t.data\n+\t.long %gotoff(foo)],,\n+      [AC_DEFINE(HAVE_AS_NIOS2_GOTOFF_RELOCATION, 1,\n+          [Define if your assembler supports %gotoff relocation syntax.])])\n+    ;;\n     riscv*-*-*)\n     gcc_GAS_CHECK_FEATURE([.attribute support],\n       gcc_cv_as_riscv_attribute, [2,32,0],,"}, {"sha": "5902ab6bb852aa65211e8f7d9721ee8c91ff81f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -1,3 +1,10 @@\n+2020-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tnios2: Support for GOT-relative DW_EH_PE_datarel encoding.\n+\n+\t* g++.target/nios2/hello-pie.C: New.\n+\t* g++.target/nios2/nios2.exp: New.\n+\n 2020-01-31  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93457"}, {"sha": "ed016f3daca49eb13f97d3c35f68b36e0c60f901", "filename": "gcc/testsuite/g++.target/nios2/hello-pie.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fnios2%2Fhello-pie.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fnios2%2Fhello-pie.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fnios2%2Fhello-pie.C?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do run { target *-*-linux* } }\n+// { dg-options \"-pie -fpie\" }\n+// { dg-output \"Hello, pie World\" }\n+\n+// This test used to give an \"FDE encoding\" error from the linker due to\n+// the ABI not having appropriate relocations for PIE.\n+\n+#include <iostream>\n+\n+int\n+main ()\n+{\n+  std::cout << \"Hello, pie World\" << std::endl;\n+}"}, {"sha": "a4ff7d04ac8298582c67c5694499a51afc56008a", "filename": "gcc/testsuite/g++.target/nios2/nios2.exp", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fnios2%2Fnios2.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fnios2%2Fnios2.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fnios2%2Fnios2.exp?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -0,0 +1,34 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a nios2 target.\n+if ![istarget nios2*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\" \"\"\n+\n+# All done.\n+dg-finish"}, {"sha": "9ec9edf70667d54baebf5451f62a07e543757016", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -1,3 +1,12 @@\n+2020-01-31  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tnios2: Support for GOT-relative DW_EH_PE_datarel encoding.\n+\n+\t* config.host [nios2-*-linux*] (tmake_file, tm_file): Adjust.\n+\t* config/nios2-elf-lib.h: New.\n+\t* unwind-dw2-fde-dip.c (_Unwind_IteratePhdrCallback): Use existing\n+\tcode for finding GOT base for nios2.\n+\n 2020-01-27  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/93403"}, {"sha": "4198dc8d95eb00cb721b20bd48599a6d123d3bab", "filename": "libgcc/config.host", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -1112,7 +1112,8 @@ nds32*-elf*)\n \tesac\n \t;;\n nios2-*-linux*)\n-\ttmake_file=\"$tmake_file nios2/t-nios2 nios2/t-linux t-libgcc-pic t-slibgcc-libgcc\"\n+\ttmake_file=\"$tmake_file nios2/t-nios2 nios2/t-linux t-libgcc-pic t-eh-dw2-dip t-slibgcc-libgcc\"\n+\ttm_file=\"$tm_file nios2/elf-lib.h\"\n \tmd_unwind_header=nios2/linux-unwind.h\n \t;;\n nios2-*-*)"}, {"sha": "4d718d90368d3b796e1dd791f261bd107ee0a762", "filename": "libgcc/config/nios2/elf-lib.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/libgcc%2Fconfig%2Fnios2%2Felf-lib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/libgcc%2Fconfig%2Fnios2%2Felf-lib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Felf-lib.h?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -0,0 +1,24 @@\n+/* Target macros for the Nios II port of GCC.\n+   Copyright (C) 2015-2020 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define CRT_GET_RFIB_DATA(dbase) \\\n+  ({ extern void *_gp_got; (dbase) = &_gp_got; })"}, {"sha": "6e50405da08f675af61461a87c3af3cfb9b562b5", "filename": "libgcc/unwind-dw2-fde-dip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/libgcc%2Funwind-dw2-fde-dip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc/libgcc%2Funwind-dw2-fde-dip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde-dip.c?ref=2d33dcfe9f0494c9b56a8d704c3d27c5a4329ebc", "patch": "@@ -329,7 +329,7 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n     return 1;\n \n #ifdef CRT_GET_RFIB_DATA\n-# ifdef __i386__\n+# if defined __i386__ || defined __nios2__\n   data->dbase = NULL;\n   if (p_dynamic)\n     {"}]}