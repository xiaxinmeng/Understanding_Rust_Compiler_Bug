{"sha": "41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEyMjJkZGY4ZWUxNTBjNTJlMTNkNDhjNWQxYjY5MDdhMGNlNTg5ZA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-12-03T13:16:55Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-12-03T13:16:55Z"}, "message": "rtl.h (print_insn_with_notes): Prototype.\n\n\t* rtl.h (print_insn_with_notes): Prototype.\n\t* sched-vis.c (print_insn_with_notes): Export it.\n\n\t* gimple-pretty-print.h (gimple_dump_bb_for_graph): Prototype.\n\t* gimple-pretty-print.c (print_gimple_expr): Flush the buffer.\n\t(pp_gimple_stmt_1): Don't do it here.\n\t(gimple_dump_bb_for_graph): New function.\n\t* tree-pretty-print.c (print_generic_expr): Flush the buffer here.\n\t(dump_generic_node): Don't flush the buffer here.\n\n\t* graph.h (print_rtl_graph_with_bb): Rename to print_graph_cfg.\n\t* graph.c: Include gimple.h, dumpfile.h, and gimple-pretty-print.h.\n\t(draw_cfg_node): Handle GIMPLE basic blocks also.\n\t(print_rtl_graph_with_bb): Rename to print_graph_cfg.\n\t* passes.c (finish_optimization_passes): Don't finish graph dumps here.\n\t(execute_function_dump): Use print_graph_cfg. Enable dumping the CFG\n\tfor GIMPLE also.\n\t(pass_init_dump_file): Wrap in TV_DUMP.  Set up CFG graph dumps.\n\t(pass_fini_dump_file): Wrap in TV_DUMP.  Finish graph dumps.\n\t(execute_one_pass): Don't set up graph dumps here.\n\nFrom-SVN: r194085", "tree": {"sha": "29ba79d1c1e035b8c748132503bb060cb0248dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29ba79d1c1e035b8c748132503bb060cb0248dfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/comments", "author": null, "committer": null, "parents": [{"sha": "a859517f1e32d071b196fc603c2b62758dbce153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a859517f1e32d071b196fc603c2b62758dbce153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a859517f1e32d071b196fc603c2b62758dbce153"}], "stats": {"total": 174, "additions": 108, "deletions": 66}, "files": [{"sha": "3bccfd98793187f772175fcc6bd9a5df8a89471d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "patch": "@@ -1,3 +1,26 @@\n+2012-12-03  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* rtl.h (print_insn_with_notes): Prototype.\n+\t* sched-vis.c (print_insn_with_notes): Export it.\n+\n+\t* gimple-pretty-print.h (gimple_dump_bb_for_graph): Prototype.\n+\t* gimple-pretty-print.c (print_gimple_expr): Flush the buffer.\n+\t(pp_gimple_stmt_1): Don't do it here.\n+\t(gimple_dump_bb_for_graph): New function.\n+\t* tree-pretty-print.c (print_generic_expr): Flush the buffer here.\n+\t(dump_generic_node): Don't flush the buffer here.\n+\n+\t* graph.h (print_rtl_graph_with_bb): Rename to print_graph_cfg.\n+\t* graph.c: Include gimple.h, dumpfile.h, and gimple-pretty-print.h.\n+\t(draw_cfg_node): Handle GIMPLE basic blocks also.\n+\t(print_rtl_graph_with_bb): Rename to print_graph_cfg.\n+\t* passes.c (finish_optimization_passes): Don't finish graph dumps here.\n+\t(execute_function_dump): Use print_graph_cfg. Enable dumping the CFG\n+\tfor GIMPLE also.\n+\t(pass_init_dump_file): Wrap in TV_DUMP.  Set up CFG graph dumps.\n+\t(pass_fini_dump_file): Wrap in TV_DUMP.  Finish graph dumps.\n+\t(execute_one_pass): Don't set up graph dumps here.\n+\n 2012-12-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa.c (warn_uninitialized_var): Use OPT_Wmaybe_uninitialized tag"}, {"sha": "a35fefe56c13d8c2fd6f905f96ad97baf649e622", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "patch": "@@ -111,6 +111,7 @@ print_gimple_expr (FILE *file, gimple g, int spc, int flags)\n   flags |= TDF_RHS_ONLY;\n   maybe_init_pretty_print (file);\n   pp_gimple_stmt_1 (&buffer, g, spc, flags);\n+  pp_flush (&buffer);\n }\n \n \n@@ -2048,12 +2049,6 @@ pp_gimple_stmt_1 (pretty_printer *buffer, gimple gs, int spc, int flags)\n     default:\n       GIMPLE_NIY;\n     }\n-\n-  /* If we're building a diagnostic, the formatted text will be\n-     written into BUFFER's stream by the caller; otherwise, write it\n-     now.  */\n-  if (!(flags & TDF_DIAGNOSTIC))\n-    pp_write_text_to_stream (buffer);\n }\n \n \n@@ -2271,3 +2266,45 @@ gimple_dump_bb (FILE *file, basic_block bb, int indent, int flags)\n     }\n   dump_gimple_bb_footer (file, bb, indent, flags);\n }\n+\n+/* Dumps basic block BB to pretty-printer PP with default dump flags and\n+   no indentation, for use as a label of a DOT graph record-node.\n+   ??? Should just use gimple_dump_bb_buff here, except that value profiling\n+   histogram dumping doesn't know about pretty-printers.  */\n+\n+void\n+gimple_dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n+{\n+  gimple_stmt_iterator gsi;\n+\n+  pp_printf (pp, \"<bb %d>:\\n\", bb->index);\n+  pp_write_text_as_dot_label_to_stream (pp, /*for_record=*/true);\n+\n+  for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      gimple phi = gsi_stmt (gsi);\n+      if (!virtual_operand_p (gimple_phi_result (phi))\n+\t  || (dump_flags & TDF_VOPS))\n+\t{\n+\t  pp_character (pp, '|');\n+\t  pp_write_text_to_stream (pp);\n+\t  pp_string (pp, \"# \");\n+\t  pp_gimple_stmt_1 (pp, phi, 0, dump_flags);\n+\t  pp_newline (pp);\n+\t  pp_write_text_as_dot_label_to_stream (pp, /*for_record=*/true);\n+\t}\n+    }\n+\n+  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      gimple stmt = gsi_stmt (gsi);\n+      pp_character (pp, '|');\n+      pp_write_text_to_stream (pp);\n+      pp_gimple_stmt_1 (pp, stmt, 0, dump_flags);\n+      pp_newline (pp);\n+      pp_write_text_as_dot_label_to_stream (pp, /*for_record=*/true);\n+    }\n+  dump_implicit_edges (pp, bb, 0, dump_flags);\n+  pp_write_text_as_dot_label_to_stream (pp, /*for_record=*/true);\n+}\n+"}, {"sha": "02d8f13d01f7a83536dcb241923eeeaecc59ea9c", "filename": "gcc/gimple-pretty-print.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fgimple-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fgimple-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.h?ref=41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "patch": "@@ -32,5 +32,6 @@ extern void print_gimple_seq (FILE *, gimple_seq, int, int);\n extern void print_gimple_stmt (FILE *, gimple, int, int);\n extern void print_gimple_expr (FILE *, gimple, int, int);\n extern void pp_gimple_stmt_1 (pretty_printer *, gimple, int, int);\n+extern void gimple_dump_bb_for_graph (pretty_printer *, basic_block);\n \n #endif /* ! GCC_GIMPLE_PRETTY_PRINT_H */"}, {"sha": "c0a9af824d432ac9cd4d2308758b0ffaa2ad8043", "filename": "gcc/graph.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "patch": "@@ -28,8 +28,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"gimple.h\"\n #include \"graph.h\"\n+#include \"dumpfile.h\"\n #include \"pretty-print.h\"\n+#include \"gimple-pretty-print.h\"\n \n /* DOT files with the .dot extension are recognized as document templates\n    by a well-known piece of word processing software out of Redmond, WA.\n@@ -82,8 +85,6 @@ init_graph_slim_pretty_print (FILE *fp)\n static void\n draw_cfg_node (pretty_printer *pp, int fndecl_uid, basic_block bb)\n {\n-  rtx insn;\n-  bool first = true;\n   const char *shape;\n   const char *fillcolor;\n \n@@ -115,27 +116,26 @@ draw_cfg_node (pretty_printer *pp, int fndecl_uid, basic_block bb)\n       pp_character (pp, '{');\n       pp_write_text_to_stream (pp);\n \n-      /* TODO: inter-bb stuff.  */\n-      FOR_BB_INSNS (bb, insn)\n+      /* This would be easier if there'd be an IR independent iterator...  */\n+      if (current_ir_type () == IR_GIMPLE)\n+\tgimple_dump_bb_for_graph (pp, bb);\n+      else\n \t{\n-\t  if (! first)\n+\t  rtx insn;\n+\t  bool first = true;\n+\n+\t  /* TODO: inter-bb stuff.  */\n+\t  FOR_BB_INSNS (bb, insn)\n \t    {\n-\t      pp_character (pp, '|');\n-\t      pp_write_text_to_stream (pp);\n+\t      if (! first)\n+\t\t{\n+\t\t  pp_character (pp, '|');\n+\t\t  pp_write_text_to_stream (pp);\n+\t\t}\n+\t      first = false;\n+\t      print_insn_with_notes (pp, insn);\n+\t      pp_write_text_as_dot_label_to_stream (pp, /*for_record=*/true);\n \t    }\n-\t  first = false;\n-\n-\t  print_insn (pp, insn, 1);\n-\t  pp_newline (pp);\n-\t  if (INSN_P (insn) && REG_NOTES (insn))\n-\t    for (rtx note = REG_NOTES (insn); note; note = XEXP (note, 1))\n-\t      {\n-\t\tpp_printf (pp, \"      %s: \",\n-\t\t\t   GET_REG_NOTE_NAME (REG_NOTE_KIND (note)));\n-\t\tprint_pattern (pp, XEXP (note, 0), 1);\n-\t\tpp_newline (pp);\n-\t      }\n-\t  pp_write_text_as_dot_label_to_stream (pp, /*for_record=*/true);\n \t}\n       pp_character (pp, '}');\n     }\n@@ -189,10 +189,10 @@ draw_cfg_node_succ_edges (pretty_printer *pp, int fndecl_uid, basic_block bb)\n   pp_flush (pp);\n }\n \n-/* Print a graphical representation of the CFG of function FUN.\n-   Currently only supports RTL in cfgrtl or cfglayout mode, GIMPLE is TODO.  */\n+/* Print a graphical representation of the CFG of function FUN.  */\n+\n void\n-print_rtl_graph_with_bb (const char *base, tree fndecl)\n+print_graph_cfg (const char *base, tree fndecl)\n {\n   const char *funcname = fndecl_name (fndecl);\n   int fndecl_uid = DECL_UID (fndecl);"}, {"sha": "d99c70200e2c12030d23a15b39d923aff1f918ab", "filename": "gcc/graph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.h?ref=41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "patch": "@@ -20,7 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_GRAPH_H\n #define GCC_GRAPH_H\n \n-extern void print_rtl_graph_with_bb (const char *, tree);\n+extern void print_graph_cfg (const char *, tree);\n extern void clean_graph_dump_file (const char *);\n extern void finish_graph_dump_file (const char *);\n "}, {"sha": "ce487fcd0bc2a3b89651e6f7f60152cbe276aca9", "filename": "gcc/passes.c", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "patch": "@@ -223,35 +223,19 @@ rest_of_type_compilation (tree type, int toplev)\n void\n finish_optimization_passes (void)\n {\n-  int i;\n-  struct dump_file_info *dfi;\n-  char *name;\n-\n   timevar_push (TV_DUMP);\n   if (profile_arc_flag || flag_test_coverage || flag_branch_probabilities)\n     {\n       dump_start (pass_profile.pass.static_pass_number, NULL);\n       end_branch_prob ();\n       dump_finish (pass_profile.pass.static_pass_number);\n     }\n-\n   if (optimize > 0)\n     {\n       dump_start (pass_profile.pass.static_pass_number, NULL);\n       print_combine_total_stats ();\n       dump_finish (pass_profile.pass.static_pass_number);\n     }\n-\n-  /* Do whatever is necessary to finish printing the graphs.  */\n-  for (i = TDI_end; (dfi = get_dump_file_info (i)) != NULL; ++i)\n-    if (dump_initialized_p (i)\n-\t&& (dfi->pflags & TDF_GRAPH) != 0\n-\t&& (name = get_dump_file_name (i)) != NULL)\n-      {\n-\tfinish_graph_dump_file (name);\n-\tfree (name);\n-      }\n-\n   timevar_pop (TV_DUMP);\n }\n \n@@ -1785,9 +1769,8 @@ execute_function_dump (void *data ATTRIBUTE_UNUSED)\n       fflush (dump_file);\n \n       if ((cfun->curr_properties & PROP_cfg)\n-\t  && (cfun->curr_properties & PROP_rtl)\n \t  && (dump_flags & TDF_GRAPH))\n-\tprint_rtl_graph_with_bb (dump_file_name, cfun->decl);\n+\tprint_graph_cfg (dump_file_name, cfun->decl);\n     }\n }\n \n@@ -2069,11 +2052,16 @@ pass_init_dump_file (struct opt_pass *pass)\n   /* If a dump file name is present, open it if enabled.  */\n   if (pass->static_pass_number != -1)\n     {\n+      timevar_push (TV_DUMP);\n       bool initializing_dump = !dump_initialized_p (pass->static_pass_number);\n       dump_file_name = get_dump_file_name (pass->static_pass_number);\n       dump_start (pass->static_pass_number, &dump_flags);\n       if (dump_file && current_function_decl)\n         dump_function_header (dump_file, current_function_decl, dump_flags);\n+      if (dump_file && (dump_flags & TDF_GRAPH)\n+\t  && cfun && (cfun->curr_properties & PROP_cfg))\n+\tclean_graph_dump_file (dump_file_name);\n+      timevar_pop (TV_DUMP);\n       return initializing_dump;\n     }\n   else\n@@ -2086,14 +2074,21 @@ pass_init_dump_file (struct opt_pass *pass)\n void\n pass_fini_dump_file (struct opt_pass *pass)\n {\n+  timevar_push (TV_DUMP);\n+\n   /* Flush and close dump file.  */\n   if (dump_file_name)\n     {\n+      gcc_assert (dump_file);\n+      if (dump_flags & TDF_GRAPH\n+\t  && cfun && (cfun->curr_properties & PROP_cfg))\n+\tfinish_graph_dump_file (dump_file_name);\n       free (CONST_CAST (char *, dump_file_name));\n       dump_file_name = NULL;\n     }\n \n   dump_finish (pass->static_pass_number);\n+  timevar_pop (TV_DUMP);\n }\n \n /* After executing the pass, apply expected changes to the function\n@@ -2250,7 +2245,6 @@ override_gate_status (struct opt_pass *pass, tree func, bool gate_status)\n bool\n execute_one_pass (struct opt_pass *pass)\n {\n-  bool initializing_dump;\n   unsigned int todo_after = 0;\n \n   bool gate_status;\n@@ -2308,7 +2302,7 @@ execute_one_pass (struct opt_pass *pass)\n      This is a hack until the new folder is ready.  */\n   in_gimple_form = (cfun && (cfun->curr_properties & PROP_trees)) != 0;\n \n-  initializing_dump = pass_init_dump_file (pass);\n+  pass_init_dump_file (pass);\n \n   /* Run pre-pass verification.  */\n   execute_todo (pass->todo_flags_start);\n@@ -2335,16 +2329,6 @@ execute_one_pass (struct opt_pass *pass)\n \n   do_per_function (update_properties_after_pass, pass);\n \n-  if (initializing_dump\n-      && dump_file\n-      && (dump_flags & TDF_GRAPH)\n-      && cfun\n-      && (cfun->curr_properties & (PROP_cfg | PROP_rtl))\n-\t  == (PROP_cfg | PROP_rtl))\n-    {\n-      clean_graph_dump_file (dump_file_name);\n-    }\n-\n   if (profile_report && cfun && (cfun->curr_properties & PROP_cfg))\n     check_profile_consistency (pass->static_pass_number, 0, true);\n "}, {"sha": "2e5ca71a7bf7ef208e708733f1a9c5232c3bc3ee", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "patch": "@@ -2606,6 +2606,7 @@ extern void dump_rtl_slim (FILE *, const_rtx, const_rtx, int, int);\n extern void print_value (pretty_printer *, const_rtx, int);\n extern void print_pattern (pretty_printer *, const_rtx, int);\n extern void print_insn (pretty_printer *, const_rtx, int);\n+extern void print_insn_with_notes (pretty_printer *, const_rtx);\n extern const char *str_pattern_slim (const_rtx);\n \n /* In function.c */"}, {"sha": "90b75f18ebfcb25b092b423664356b828e60254d", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "patch": "@@ -719,7 +719,7 @@ print_insn (pretty_printer *pp, const_rtx x, int verbose)\n /* Prerry-print a slim dump of X (an insn) to PP, including any register\n    note attached to the instruction.  */\n \n-static void\n+void\n print_insn_with_notes (pretty_printer *pp, const_rtx x)\n {\n   pp_string (pp, print_rtx_head);"}, {"sha": "fda7809553131c53bd3eadb10135bd09f7100b2e", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41222ddf8ee150c52e13d48c5d1b6907a0ce589d/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=41222ddf8ee150c52e13d48c5d1b6907a0ce589d", "patch": "@@ -161,6 +161,7 @@ print_generic_expr (FILE *file, tree t, int flags)\n {\n   maybe_init_pretty_print (file);\n   dump_generic_node (&buffer, t, 0, flags, false);\n+  pp_flush (&buffer);\n }\n \n /* Dump the name of a _DECL node and its DECL_UID if TDF_UID is set\n@@ -2410,11 +2411,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n   if (is_stmt && is_expr)\n     pp_semicolon (buffer);\n \n-  /* If we're building a diagnostic, the formatted text will be written\n-     into BUFFER's stream by the caller; otherwise, write it now.  */\n-  if (!(flags & TDF_DIAGNOSTIC))\n-    pp_write_text_to_stream (buffer);\n-\n   return spc;\n }\n "}]}