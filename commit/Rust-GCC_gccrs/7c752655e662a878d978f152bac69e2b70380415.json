{"sha": "7c752655e662a878d978f152bac69e2b70380415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M3NTI2NTVlNjYyYTg3OGQ5NzhmMTUyYmFjNjllMmI3MDM4MDQxNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-11-09T10:47:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-11-09T10:47:58Z"}, "message": "re PR libstdc++/12971 (Resolution of DR 328 [WP] still unimplemented)\n\n2003-11-09  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/12971\n\t* include/bits/locale_facets.tcc\n\t(money_put::do_put(..., long double)): Fix conversion\n\tspecification as per DR 328 [WP].\n\t* testsuite/22_locale/money_put/put/char/12971.cc: Add.\n\t* testsuite/22_locale/money_put/put/wchar_t/12971.cc: Ditto.\n\t* docs/html/ext/howto.html: Add entry for DR 328.\n\nFrom-SVN: r73389", "tree": {"sha": "67691e5ee7e293eb25cc86960fc806a53a0d2bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67691e5ee7e293eb25cc86960fc806a53a0d2bfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c752655e662a878d978f152bac69e2b70380415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c752655e662a878d978f152bac69e2b70380415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c752655e662a878d978f152bac69e2b70380415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c752655e662a878d978f152bac69e2b70380415/comments", "author": null, "committer": null, "parents": [{"sha": "757dc040ced2128938ff9361b4d6b4cd5224b736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757dc040ced2128938ff9361b4d6b4cd5224b736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/757dc040ced2128938ff9361b4d6b4cd5224b736"}], "stats": {"total": 131, "additions": 124, "deletions": 7}, "files": [{"sha": "7eea8cffac9a3c2bba9edfdc695c1f3d988d344f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c752655e662a878d978f152bac69e2b70380415/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c752655e662a878d978f152bac69e2b70380415/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7c752655e662a878d978f152bac69e2b70380415", "patch": "@@ -1,3 +1,13 @@\n+2003-11-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/12971\n+\t* include/bits/locale_facets.tcc\n+\t(money_put::do_put(..., long double)): Fix conversion\n+\tspecification as per DR 328 [WP].\n+\t* testsuite/22_locale/money_put/put/char/12971.cc: Add.\n+\t* testsuite/22_locale/money_put/put/wchar_t/12971.cc: Ditto.\n+\t* docs/html/ext/howto.html: Add entry for DR 328.\n+\n 2003-11-08  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/12967"}, {"sha": "7fd3c4987055f7b9652cfee64b9290387e573208", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c752655e662a878d978f152bac69e2b70380415/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c752655e662a878d978f152bac69e2b70380415/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=7c752655e662a878d978f152bac69e2b70380415", "patch": "@@ -651,6 +651,12 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     </dt>\n     <dd>If <code>(this == &amp;x)</code> do nothing.\n     </dd>\n+\n+    <dt><a href=\"lwg-defects.html#328\">328</a>:\n+        <em>Bad sprintf format modifier in money_put<>::do_put()</em>\n+    </dt>\n+    <dd>Change the format string to &quot;%.0Lf&quot;.\n+    </dd>\n <!--\n     <dt><a href=\"lwg-defects.html#\"></a>:\n         <em></em>"}, {"sha": "7f10c60c2531a8803403601f4dd275d95e41c148", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c752655e662a878d978f152bac69e2b70380415/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c752655e662a878d978f152bac69e2b70380415/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=7c752655e662a878d978f152bac69e2b70380415", "patch": "@@ -175,7 +175,7 @@ namespace std\n \t  const char_type __c = *__beg;\n           const char_type* __p = __traits_type::find(__lit + _S_izero, 10, \n \t\t\t\t\t\t     __c);\n-          // NB: strchr returns true for *__beg == 0x0\n+          // NB: strchr returns true for __c == 0x0\n           if (__p && !__traits_type::eq(__c, char_type()))\n \t    {\n \t      // Try first for acceptable digit; record it if found.\n@@ -1328,22 +1328,23 @@ namespace std\n       // First try a buffer perhaps big enough.\n       int __cs_size = 64;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      int __len = std::__convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 328. Bad sprintf format modifier in money_put<>::do_put()\n+      int __len = std::__convert_from_v(__cs, __cs_size, \"%.0Lf\", __units, \n \t\t\t\t\t_S_get_c_locale());\n       // If the buffer was not large enough, try again with the correct size.\n       if (__len >= __cs_size)\n \t{\n \t  __cs_size = __len + 1;\n \t  __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t  __len = std::__convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, \n+\t  __len = std::__convert_from_v(__cs, __cs_size, \"%.0Lf\", __units, \n \t\t\t\t\t_S_get_c_locale());\n \t}\n #else\n-      // max_exponent10 + 1 for the integer part, + 4 for sign, decimal point,\n-      // decimal digit, '\\0'. \n-      const int __cs_size = numeric_limits<long double>::max_exponent10 + 5;\n+      // max_exponent10 + 1 for the integer part, + 2 for sign and '\\0'. \n+      const int __cs_size = numeric_limits<long double>::max_exponent10 + 3;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      int __len = std::__convert_from_v(__cs, 0, \"%.01Lf\", __units, \n+      int __len = std::__convert_from_v(__cs, 0, \"%.0Lf\", __units, \n \t\t\t\t\t_S_get_c_locale());\n #endif\n       _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) "}, {"sha": "62599354ce5ad85b603708581192b8eeada91372", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/12971.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c752655e662a878d978f152bac69e2b70380415/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F12971.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c752655e662a878d978f152bac69e2b70380415/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F12971.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F12971.cc?ref=7c752655e662a878d978f152bac69e2b70380415", "patch": "@@ -0,0 +1,50 @@\n+// 2003-11-09 Paolo Carlini <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12971\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef ostreambuf_iterator<char> iterator_type;\n+\n+  long double amount = 10.8L;\n+  \n+  // cache the money_put facet\n+  ostringstream oss;\n+  const money_put<char>& mon_put = use_facet<money_put<char> >(oss.getloc()); \n+\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', amount);\n+  string result = oss.str();\n+  VERIFY( result == \"11\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1bc93e34898a31c46fd66f5e3ba1ccba95f0e349", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/12971.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c752655e662a878d978f152bac69e2b70380415/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F12971.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c752655e662a878d978f152bac69e2b70380415/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F12971.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F12971.cc?ref=7c752655e662a878d978f152bac69e2b70380415", "patch": "@@ -0,0 +1,50 @@\n+// 2003-11-09 Paolo Carlini <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12971\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef ostreambuf_iterator<wchar_t> iterator_type;\n+\n+  long double amount = 10.8L;\n+  \n+  // cache the money_put facet\n+  wostringstream oss;\n+  const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n+\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, L' ', amount);\n+  wstring result = oss.str();\n+  VERIFY( result == L\"11\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}