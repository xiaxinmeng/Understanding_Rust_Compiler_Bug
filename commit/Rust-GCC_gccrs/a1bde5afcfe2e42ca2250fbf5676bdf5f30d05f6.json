{"sha": "a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFiZGU1YWZjZmUyZTQyY2EyMjUwZmJmNTY3NmJkZjVmMzBkMDVmNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-15T15:14:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-15T15:14:49Z"}, "message": "re PR c++/11856 (unsigned warning in template)\n\n/cp\n2012-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/11586\n\t* pt.c (tsubst_copy_and_build): Increase / decrease\n\tc_inhibit_evaluation_warnings around build_x_binary_op call.\n\n/c-family\n2012-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/11586\n\t* c-common.c (shorten_compare): Check c_inhibit_evaluation_warnings.\n\n/testsuite\n2012-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/11586\n\t* g++.dg/warn/Wtype-limits.C: Don't warn in templates.\n\t* g++.dg/warn/Wtype-limits-Wextra.C: Likewise.\n\nFrom-SVN: r187542", "tree": {"sha": "64ee7c2534fe46beab3731586d7d305cfcd1afc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64ee7c2534fe46beab3731586d7d305cfcd1afc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/comments", "author": null, "committer": null, "parents": [{"sha": "7d67c380fab04773732b6b0494cf8ab22cc2d126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d67c380fab04773732b6b0494cf8ab22cc2d126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d67c380fab04773732b6b0494cf8ab22cc2d126"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "1de6250929c4ff39615549cc4d22babd013050fe", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "patch": "@@ -1,7 +1,11 @@\n+2012-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/11586\n+\t* c-common.c (shorten_compare): Check c_inhibit_evaluation_warnings.\n+\n 2012-05-14  Bernd Schmidt  <bernds@codesourcery.com>\n \n-\t* c-family/c-common.c (DEF_ATTR_STRING): Define and undefine as\n-\tnecessary.\n+\t* c-common.c (DEF_ATTR_STRING): Define and undefine as necessary.\n \n 2012-05-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "f745365da1a0f163472398e0cc6adfcd1ba31708", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "patch": "@@ -3754,7 +3754,8 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t  type = c_common_unsigned_type (type);\n \t}\n \n-      if (TREE_CODE (primop0) != INTEGER_CST)\n+      if (TREE_CODE (primop0) != INTEGER_CST\n+\t  && c_inhibit_evaluation_warnings == 0)\n \t{\n \t  if (val == truthvalue_false_node)\n \t    warning_at (loc, OPT_Wtype_limits,\n@@ -3834,6 +3835,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \t     warning.  */\n \t  bool warn = \n \t    warn_type_limits && !in_system_header\n+\t    && c_inhibit_evaluation_warnings == 0\n \t    && !(TREE_CODE (primop0) == INTEGER_CST\n \t\t && !TREE_OVERFLOW (convert (c_common_signed_type (type),\n \t\t\t\t\t     primop0)))"}, {"sha": "f469e2e62abfd95fa458391a7caac1d8398101ea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "patch": "@@ -1,3 +1,9 @@\n+2012-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/11586\n+\t* pt.c (tsubst_copy_and_build): Increase / decrease\n+\tc_inhibit_evaluation_warnings around build_x_binary_op call.\n+\n 2012-05-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* cp-tree.h (TYPE_PTRMEM_P): Rename to TYPE_PTRDATAMEM_P."}, {"sha": "ec121ff0916fab1a004f5915ee5d083b172a03b3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "patch": "@@ -13608,7 +13608,11 @@ tsubst_copy_and_build (tree t,\n     case MEMBER_REF:\n     case DOTSTAR_EXPR:\n       {\n-\ttree r = build_x_binary_op\n+\ttree r;\n+\n+\t++c_inhibit_evaluation_warnings;\n+\n+\tr = build_x_binary_op\n \t  (input_location, TREE_CODE (t),\n \t   RECUR (TREE_OPERAND (t, 0)),\n \t   (TREE_NO_WARNING (TREE_OPERAND (t, 0))\n@@ -13622,6 +13626,9 @@ tsubst_copy_and_build (tree t,\n \t   complain);\n \tif (EXPR_P (r) && TREE_NO_WARNING (t))\n \t  TREE_NO_WARNING (r) = TREE_NO_WARNING (t);\n+\n+\t--c_inhibit_evaluation_warnings;\n+\n \treturn r;\n       }\n "}, {"sha": "9e72f3f2a1d0c8a6d610da85a5e872fcf3427b4f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "patch": "@@ -1,3 +1,9 @@\n+2012-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/11586\n+\t* g++.dg/warn/Wtype-limits.C: Don't warn in templates.\n+\t* g++.dg/warn/Wtype-limits-Wextra.C: Likewise.\n+\n 2012-05-15  Olivier Hainque  <hainque@adacore.com>\n \n \t* g++.dg/eh/sighandle.C: New testcase."}, {"sha": "f840f306b7d937eb048803633e2e438f36c2bb8b", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits-Wextra.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits-Wextra.C?ref=a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "patch": "@@ -66,7 +66,7 @@ int test (int x)\n \n template <typename Int, Int D>\n void f(Int x) {\n-  assert(0 <= x and x <= D); // { dg-warning \"comparison is always true due to limited range of data type\" }\n+  assert(0 <= x and x <= D);\n }\n \n int ff(void) {"}, {"sha": "a352e7ba9bb56ba9744532a87909c6dcf1654089", "filename": "gcc/testsuite/g++.dg/warn/Wtype-limits.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWtype-limits.C?ref=a1bde5afcfe2e42ca2250fbf5676bdf5f30d05f6", "patch": "@@ -66,7 +66,7 @@ int test (int x)\n \n template <typename Int, Int D>\n void f(Int x) {\n-  assert(0 <= x and x <= D); // { dg-warning \"comparison is always true due to limited range of data type\" }\n+  assert(0 <= x and x <= D);\n }\n \n int ff(void) {"}]}