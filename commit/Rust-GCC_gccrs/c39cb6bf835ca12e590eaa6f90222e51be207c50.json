{"sha": "c39cb6bf835ca12e590eaa6f90222e51be207c50", "node_id": "C_kwDOANBUbNoAKGMzOWNiNmJmODM1Y2ExMmU1OTBlYWE2ZjkwMjIyZTUxYmUyMDdjNTA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-17T12:45:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-17T12:45:53Z"}, "message": "ranger: Fix up fold_using_range::range_of_address [PR103255]\n\nIf on &base->member the offset isn't constant or isn't zero and\n-fdelete-null-pointer-checks and not -fwrapv-pointer and base has a range\nthat doesn't include NULL, we return the range of the base.\nUsually it isn't a big deal, because for most pointers we just use\nvarying, range_zero and range_nonzero ranges and nothing beyond that,\nbut if a pointer is initialized from a constant, we actually track the\nexact range and in that case this causes miscompilation.\nAs discussed on IRC, I think doing something like:\n              offset_int off2;\n              if (off_cst && off.is_constant (&off2))\n                {\n                  tree cst = wide_int_to_tree (sizetype, off2 / BITS_PER_UNIT);\n                  // adjust range r with POINTER_PLUS_EXPR cst\n                  if (!range_includes_zero_p (&r))\n                    return true;\n                }\n              // Fallback\n              r = range_nonzero (TREE_TYPE (gimple_assign_rhs1 (stmt)));\n              return true;\ncould work, given that most of the pointer ranges are just the simple ones\nperhaps it is too much for little benefit.\n\n2021-11-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/103255\n\t* gimple-range-fold.cc (fold_using_range::range_of_address): Return\n\trange_nonzero rather than unadjusted base's range.  Formatting fixes.\n\n\t* gcc.c-torture/execute/pr103255.c: New test.", "tree": {"sha": "9551bdb0e2e842f89422b87783b382c092be20f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9551bdb0e2e842f89422b87783b382c092be20f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c39cb6bf835ca12e590eaa6f90222e51be207c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39cb6bf835ca12e590eaa6f90222e51be207c50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c39cb6bf835ca12e590eaa6f90222e51be207c50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39cb6bf835ca12e590eaa6f90222e51be207c50/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7061300025188d57e715c1593b8dae598c87b3c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7061300025188d57e715c1593b8dae598c87b3c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7061300025188d57e715c1593b8dae598c87b3c5"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "ec9690b05e49901d8f3c348cfbb5c2e2eec1ebde", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39cb6bf835ca12e590eaa6f90222e51be207c50/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39cb6bf835ca12e590eaa6f90222e51be207c50/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=c39cb6bf835ca12e590eaa6f90222e51be207c50", "patch": "@@ -720,14 +720,20 @@ fold_using_range::range_of_address (irange &r, gimple *stmt, fur_source &src)\n \t}\n       /* If &X->a is equal to X, the range of X is the result.  */\n       if (off_cst && known_eq (off, 0))\n-\t  return true;\n+\treturn true;\n       else if (flag_delete_null_pointer_checks\n \t       && !TYPE_OVERFLOW_WRAPS (TREE_TYPE (expr)))\n \t{\n-\t /* For -fdelete-null-pointer-checks -fno-wrapv-pointer we don't\n-\t allow going from non-NULL pointer to NULL.  */\n-\t   if(!range_includes_zero_p (&r))\n-\t    return true;\n+\t  /* For -fdelete-null-pointer-checks -fno-wrapv-pointer we don't\n+\t     allow going from non-NULL pointer to NULL.  */\n+\t  if (!range_includes_zero_p (&r))\n+\t    {\n+\t      /* We could here instead adjust r by off >> LOG2_BITS_PER_UNIT\n+\t\t using POINTER_PLUS_EXPR if off_cst and just fall back to\n+\t\t this.  */\n+\t      r = range_nonzero (TREE_TYPE (gimple_assign_rhs1 (stmt)));\n+\t      return true;\n+\t    }\n \t}\n       /* If MEM_REF has a \"positive\" offset, consider it non-NULL\n \t always, for -fdelete-null-pointer-checks also \"negative\""}, {"sha": "d74b054252f6c5f2aaaafdba62a172f66fb2c496", "filename": "gcc/testsuite/gcc.c-torture/execute/pr103255.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39cb6bf835ca12e590eaa6f90222e51be207c50/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103255.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39cb6bf835ca12e590eaa6f90222e51be207c50/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103255.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103255.c?ref=c39cb6bf835ca12e590eaa6f90222e51be207c50", "patch": "@@ -0,0 +1,41 @@\n+/* PR tree-optimization/103255 */\n+\n+struct H\n+{\n+  unsigned a;\n+  unsigned b;\n+  unsigned c;\n+};\n+\n+#if __SIZEOF_POINTER__ >= 4\n+#define ADDR 0x400000\n+#else\n+#define ADDR 0x4000\n+#endif\n+#define OFF 0x20\n+\n+int\n+main ()\n+{\n+  struct H *h = 0;\n+  unsigned long o;\n+  volatile int t = 1;\n+\n+  for (o = OFF; o <= OFF; o += 0x1000)\n+    {\n+      struct H *u;\n+      u = (struct H *) (ADDR + o);\n+      if (t)\n+\t{\n+\t  h = u;\n+\t  break;\n+\t}\n+    }\n+\n+  if (h == 0)\n+    return 0;\n+  unsigned *tt = &h->b;\n+  if ((__SIZE_TYPE__) tt != (ADDR + OFF + __builtin_offsetof (struct H, b)))\n+    __builtin_abort ();\n+  return 0;\n+}"}]}