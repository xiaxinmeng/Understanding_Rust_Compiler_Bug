{"sha": "16d6f9946152f1d5deb56e2b816566f892c4cc76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZkNmY5OTQ2MTUyZjFkNWRlYjU2ZTJiODE2NTY2Zjg5MmM0Y2M3Ng==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-04-27T22:53:23Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-04-27T22:53:23Z"}, "message": "target-def.h (TARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Bracket with #ifndef/#endif.\n\n2006-04-27  Eric Christopher  <echristo@apple.com>\n\n        * target-def.h (TARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Bracket\n        with #ifndef/#endif.\n        * config/darwin-c.c (darwin_ms_struct): New.\n        (darwin_pragma_ms_struct): Ditto.\n        (darwin_set_default_type_attributes): Ditto.\n        * config/darwin-protos.h (darwin_pragma_ms_struct): Declare.\n        * config/darwin.h (DARWIN_REGISTER_TARGET_PRAGMAS):\n        Register ms_struct pragma.\n        * config/i386/darwin.h (REGISTER_TARGET_PRAGMAS): Declare.\n        (TARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Ditto.\n        * config/rs6000/rs6000.c (rs6000_set_default_type_attributes): Call\n        darwin_set_default_type_attributes if TARGET_MACHO.\n\n2006-04-27  Eric Christopher  <echristo@apple.com>\n\n        * gcc.dg/pragma-ms_struct.c: New.\n\nFrom-SVN: r113327", "tree": {"sha": "7544c1d5db81412c38f591c7b266ee7291942b52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7544c1d5db81412c38f591c7b266ee7291942b52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16d6f9946152f1d5deb56e2b816566f892c4cc76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d6f9946152f1d5deb56e2b816566f892c4cc76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d6f9946152f1d5deb56e2b816566f892c4cc76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d6f9946152f1d5deb56e2b816566f892c4cc76/comments", "author": null, "committer": null, "parents": [{"sha": "6f3d6562d8c6a82bf0ecf25651f35c556b4991ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f3d6562d8c6a82bf0ecf25651f35c556b4991ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f3d6562d8c6a82bf0ecf25651f35c556b4991ec"}], "stats": {"total": 139, "additions": 115, "deletions": 24}, "files": [{"sha": "66e81881f4088fab99ea8db161d5c18a7388d3d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16d6f9946152f1d5deb56e2b816566f892c4cc76", "patch": "@@ -1,3 +1,18 @@\n+2006-04-27  Eric Christopher  <echristo@apple.com>\n+\n+\t* target-def.h (TARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Bracket\n+\twith #ifndef/#endif.\n+\t* config/darwin-c.c (darwin_ms_struct): New.\n+\t(darwin_pragma_ms_struct): Ditto.\n+\t(darwin_set_default_type_attributes): Ditto.\n+\t* config/darwin-protos.h (darwin_pragma_ms_struct): Declare.\n+\t* config/darwin.h (DARWIN_REGISTER_TARGET_PRAGMAS):\n+\tRegister ms_struct pragma.\n+\t* config/i386/darwin.h (REGISTER_TARGET_PRAGMAS): Declare.\n+\t(TARGET_SET_DEFAULT_TYPE_ATTRIBUTES): Ditto.\n+\t* config/rs6000/rs6000.c (rs6000_set_default_type_attributes): Call\n+\tdarwin_set_default_type_attributes if TARGET_MACHO.\n+\n 2006-04-27  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/26854\n@@ -19,12 +34,12 @@\n \t* tree-ssa-forwprop.c (forward_propagate_addr_expr): Use new iterator.\n \t* lambda-code.c (lambda_loopnest_to_gcc_loopnest): Use new iterator.\n \t(perfect_nestify): Use new iterator.\n-\t* tree-vect-transform.c (vect_create_epilog_for_reduction): Use new \n+\t* tree-vect-transform.c (vect_create_epilog_for_reduction): Use new\n \titerator.\n \t* tree-flow.h (struct immediate_use_iterator_d): Add comments.\n \t(next_imm_name): New field in struct immediate_use_iterator_d.\n \t(FOR_EACH_IMM_USE_SAFE, BREAK_FROM_SAFE_IMM_USE): Remove.\n-\t(FOR_EACH_IMM_USE_STMT, BREAK_FROM_IMM_USE_STMT, \n+\t(FOR_EACH_IMM_USE_STMT, BREAK_FROM_IMM_USE_STMT,\n \tFOR_EACH_IMM_USE_ON_STMT): New immediate use iterator macros.\n \t* tree-cfg.c (replace_uses_by): Use new iterator.\n \t* tree-ssa-threadedge.c (lhs_of_dominating_assert): Use new iterator.\n@@ -41,7 +56,7 @@\n \tcall_nonlocal_sysv, call_value_indirect_nonlocal_sysv,\n \tcall_value_nonlocal_sysv): Suffix with the \"P\" macro for 32/64\n \tsupport.\n-\t\n+\n 2006-04-27  Roger Sayle  <roger@eyesopen.com>\n \n \t* expmed.c (store_fixed_bit_field): If we're not optimizing for"}, {"sha": "6f263f4eebabadfb940c50b8c0ea8bcf787617e2", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 54, "deletions": 18, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=16d6f9946152f1d5deb56e2b816566f892c4cc76", "patch": "@@ -41,6 +41,9 @@ Boston, MA 02110-1301, USA.  */\n \n static bool using_frameworks = false;\n \n+/* True if we're setting __attribute__ ((ms_struct)).  */\n+static bool darwin_ms_struct = false;\n+\n /* Maintain a small stack of alignments.  This is similar to pragma\n    pack's stack, but simpler.  */\n \n@@ -159,6 +162,39 @@ darwin_pragma_unused (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     warning (0, \"junk at end of '#pragma unused'\");\n }\n \n+/* Parse the ms_struct pragma.  */\n+void\n+darwin_pragma_ms_struct (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  const char *arg;\n+  tree t;\n+\n+  if (pragma_lex (&t) != CPP_NAME)\n+    BAD (\"malformed '#pragma ms_struct', ignoring\");\n+  arg = IDENTIFIER_POINTER (t);\n+\n+  if (!strcmp (arg, \"on\"))\n+    darwin_ms_struct = true;\n+  else if (!strcmp (arg, \"off\") || !strcmp (arg, \"reset\"))\n+    darwin_ms_struct = false;\n+  else\n+    warning (OPT_Wpragmas, \"malformed '#pragma ms_struct {on|off|reset}', ignoring\");\n+\n+  if (pragma_lex (&t) != CPP_EOF)\n+    warning (OPT_Wpragmas, \"junk at end of '#pragma ms_struct'\");\n+}\n+\n+/* Set the darwin specific attributes on TYPE.  */\n+void\n+darwin_set_default_type_attributes (tree type)\n+{\n+  if (darwin_ms_struct\n+      && TREE_CODE (type) == RECORD_TYPE)\n+    TYPE_ATTRIBUTES (type) = tree_cons (get_identifier (\"ms_struct\"),\n+                                        NULL_TREE,\n+                                        TYPE_ATTRIBUTES (type));\n+}\n+\n static struct {\n   size_t len;\n   const char *name;\n@@ -295,7 +331,7 @@ framework_construct_pathname (const char *fname, cpp_dir *dir)\n   /* Append framework_header_dirs and header file name */\n   for (i = 0; framework_header_dirs[i].dirName; i++)\n     {\n-      strncpy (&frname[frname_len], \n+      strncpy (&frname[frname_len],\n \t       framework_header_dirs[i].dirName,\n \t       framework_header_dirs[i].dirNameLen);\n       strcpy (&frname[frname_len + framework_header_dirs[i].dirNameLen],\n@@ -318,8 +354,8 @@ find_subframework_file (const char *fname, const char *pname)\n {\n   char *sfrname;\n   const char *dot_framework = \".framework/\";\n-  char *bufptr; \n-  int sfrname_len, i, fname_len; \n+  char *bufptr;\n+  int sfrname_len, i, fname_len;\n   struct cpp_dir *fast_dir;\n   static struct cpp_dir subframe_dir;\n   struct stat st;\n@@ -329,7 +365,7 @@ find_subframework_file (const char *fname, const char *pname)\n   /* Subframework files must have / in the name.  */\n   if (bufptr == 0)\n     return 0;\n-    \n+\n   fname_len = bufptr - fname;\n   fast_dir = find_framework (fname, fname_len);\n \n@@ -344,18 +380,18 @@ find_subframework_file (const char *fname, const char *pname)\n     return 0;\n \n   /* Now translate. For example,                  +- bufptr\n-     fname = CarbonCore/OSUtils.h                 | \n+     fname = CarbonCore/OSUtils.h                 |\n      pname = /System/Library/Frameworks/Foundation.framework/Headers/Foundation.h\n      into\n      sfrname = /System/Library/Frameworks/Foundation.framework/Frameworks/CarbonCore.framework/Headers/OSUtils.h */\n \n   sfrname = XNEWVEC (char, strlen (pname) + strlen (fname) + 2 +\n \t\t\t      strlen (\"Frameworks/\") + strlen (\".framework/\")\n \t\t\t      + strlen (\"PrivateHeaders\"));\n- \n+\n   bufptr += strlen (dot_framework);\n \n-  sfrname_len = bufptr - pname; \n+  sfrname_len = bufptr - pname;\n \n   strncpy (&sfrname[0], pname, sfrname_len);\n \n@@ -371,12 +407,12 @@ find_subframework_file (const char *fname, const char *pname)\n   /* Append framework_header_dirs and header file name */\n   for (i = 0; framework_header_dirs[i].dirName; i++)\n     {\n-      strncpy (&sfrname[sfrname_len], \n+      strncpy (&sfrname[sfrname_len],\n \t       framework_header_dirs[i].dirName,\n \t       framework_header_dirs[i].dirNameLen);\n       strcpy (&sfrname[sfrname_len + framework_header_dirs[i].dirNameLen],\n \t      &fname[fname_len]);\n-    \n+\n       if (stat (sfrname, &st) == 0)\n \t{\n \t  if (fast_dir != &subframe_dir)\n@@ -433,7 +469,7 @@ add_framework_path (char *path)\n   add_cpp_dir_path (p, BRACKET);\n }\n \n-static const char *framework_defaults [] = \n+static const char *framework_defaults [] =\n   {\n     \"/System/Library/Frameworks\",\n     \"/Library/Frameworks\",\n@@ -450,9 +486,9 @@ darwin_register_objc_includes (const char *sysroot, const char *iprefix,\n   /* We do not do anything if we do not want the standard includes. */\n   if (!stdinc)\n     return;\n-  \n+\n   fname = GCC_INCLUDE_DIR \"-gnu-runtime\";\n-  \n+\n   /* Register the GNU OBJC runtime include path if we are compiling  OBJC\n     with GNU-runtime.  */\n \n@@ -469,13 +505,13 @@ darwin_register_objc_includes (const char *sysroot, const char *iprefix,\n           /* FIXME: wrap the headers for C++awareness.  */\n \t  add_path (str, SYSTEM, /*c++aware=*/false, false);\n \t}\n-      \n+\n       /* Should this directory start with the sysroot?  */\n       if (sysroot)\n \tstr = concat (sysroot, fname, NULL);\n       else\n \tstr = update_path (fname, \"\");\n-      \n+\n       add_path (str, SYSTEM, /*c++aware=*/false, false);\n     }\n }\n@@ -546,13 +582,13 @@ find_subframework_header (cpp_reader *pfile, const char *header, cpp_dir **dirp)\n \n /* Return the value of darwin_macosx_version_min suitable for the\n    __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ macro,\n-   so '10.4.2' becomes 1042.  \n+   so '10.4.2' becomes 1042.\n    Print a warning if the version number is not known.  */\n static const char *\n version_as_macro (void)\n {\n   static char result[] = \"1000\";\n-  \n+\n   if (strncmp (darwin_macosx_version_min, \"10.\", 3) != 0)\n     goto fail;\n   if (! ISDIGIT (darwin_macosx_version_min[3]))\n@@ -570,9 +606,9 @@ version_as_macro (void)\n     }\n   else\n     result[3] = '0';\n-  \n+\n   return result;\n-  \n+\n  fail:\n   error (\"Unknown value %qs of -mmacosx-version-min\",\n \t darwin_macosx_version_min);"}, {"sha": "14da36d4da9e0b61c3a34a43ea6eac5983d5c773", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=16d6f9946152f1d5deb56e2b816566f892c4cc76", "patch": "@@ -46,6 +46,7 @@ extern void machopic_asm_out_destructor (rtx, int);\n \n extern void machopic_define_symbol (rtx);\n extern void darwin_encode_section_info (tree, rtx, int);\n+extern void darwin_set_default_type_attributes (tree);\n \n #endif /* TREE_CODE */\n \n@@ -65,6 +66,7 @@ extern void darwin_emit_except_table_label (FILE *);\n extern void darwin_pragma_ignore (struct cpp_reader *);\n extern void darwin_pragma_options (struct cpp_reader *);\n extern void darwin_pragma_unused (struct cpp_reader *);\n+extern void darwin_pragma_ms_struct (struct cpp_reader *);\n \n extern void darwin_file_start (void);\n extern void darwin_file_end (void);"}, {"sha": "c73ff60da416340d55e491370bff09d859ba29d6", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=16d6f9946152f1d5deb56e2b816566f892c4cc76", "patch": "@@ -439,7 +439,7 @@ Boston, MA 02110-1301, USA.  */\n #define TARGET_USES_WEAK_UNWIND_INFO 1\n \n /* We need to use a nonlocal label for the start of an EH frame: the\n-   Darwin linker requires that a coalesced section start with a label. \n+   Darwin linker requires that a coalesced section start with a label.\n    Unfortunately, it also requires that 'debug' sections don't contain\n    labels.  */\n #undef FRAME_BEGIN_LABEL\n@@ -830,6 +830,7 @@ enum machopic_addr_class {\n     c_register_pragma (0, \"options\", darwin_pragma_options);\t\\\n     c_register_pragma (0, \"segment\", darwin_pragma_ignore);\t\\\n     c_register_pragma (0, \"unused\", darwin_pragma_unused);\t\\\n+    c_register_pragma (0, \"ms_struct\", darwin_pragma_ms_struct); \\\n   } while (0)\n \n #undef ASM_APP_ON"}, {"sha": "63e7bfde542d1750b59d63fae18629bd51afb719", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=16d6f9946152f1d5deb56e2b816566f892c4cc76", "patch": "@@ -217,3 +217,9 @@ __enable_execute_stack (void *addr)                                     \\\n    /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */                        \\\n    (void) mprotect (page, end - page, 7);                               \\\n }\n+\n+#undef REGISTER_TARGET_PRAGMAS\n+#define REGISTER_TARGET_PRAGMAS() DARWIN_REGISTER_TARGET_PRAGMAS()\n+\n+#undef TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n+#define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES darwin_set_default_type_attributes"}, {"sha": "0bb68109efa5f80322702dde028948868186401c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=16d6f9946152f1d5deb56e2b816566f892c4cc76", "patch": "@@ -17527,6 +17527,10 @@ rs6000_set_default_type_attributes (tree type)\n     TYPE_ATTRIBUTES (type) = tree_cons (get_identifier (\"longcall\"),\n \t\t\t\t\tNULL_TREE,\n \t\t\t\t\tTYPE_ATTRIBUTES (type));\n+\n+#if TARGET_MACHO\n+  darwin_set_default_type_attributes (type);\n+#endif\n }\n \n /* Return a reference suitable for calling a function with the"}, {"sha": "b1630a67d667253041f91ac291a9ec05d94a26fb", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=16d6f9946152f1d5deb56e2b816566f892c4cc76", "patch": "@@ -411,7 +411,9 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_USE_ANCHORS_FOR_SYMBOL_P default_use_anchors_for_symbol_p\n #define TARGET_FUNCTION_OK_FOR_SIBCALL hook_bool_tree_tree_false\n #define TARGET_COMP_TYPE_ATTRIBUTES hook_int_tree_tree_1\n+#ifndef TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES hook_void_tree\n+#endif\n #define TARGET_INSERT_ATTRIBUTES hook_void_tree_treeptr\n #define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P hook_bool_tree_false\n #define TARGET_MS_BITFIELD_LAYOUT_P hook_bool_tree_false"}, {"sha": "5ae38b0e7239796c22f2d1451bbcc52dc81b078b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16d6f9946152f1d5deb56e2b816566f892c4cc76", "patch": "@@ -1,3 +1,7 @@\n+2006-04-27  Eric Christopher  <echristo@apple.com>\n+\n+\t* gcc.dg/pragma-ms_struct.c: New.\n+\n 2006-04-27  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27102\n@@ -34,7 +38,7 @@\n \n 2006-04-25  Richard Guenther  <rguenther@suse.de>\n \n-\t* gcc.dg/tree-prof/val-prof-2.c: Check for n + ffff rather  \n+\t* gcc.dg/tree-prof/val-prof-2.c: Check for n + ffff rather\n \tthan n + -1.\n \n 2006-04-25  Andreas Krebbel  <krebbel1@de.ibm.com>\n@@ -312,7 +316,7 @@\n \t* gcc.dg/tree-ssa/vrp14.c: Require >=32 bit integers.\n \t* gcc.dg/tree-ssa/vrp21.c: Require >=32 bit integers.\n \t* gcc.dg/tree-ssa/vrp22.c: Require >=32 bit integers.\n-\t\n+\n \t* gcc.c-torture/execute/20040629-1.x: New.  Require >16 bit integers.\n \t* gcc.c-torture/execute/20040703-1.x: Likewise.\n \t* gcc.c-torture/execute/20040705-1.x: Likewise."}, {"sha": "cc71610146ad4c2792430a334bded392151c50ae", "filename": "gcc/testsuite/gcc.dg/pragma-ms_struct.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ms_struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16d6f9946152f1d5deb56e2b816566f892c4cc76/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ms_struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-ms_struct.c?ref=16d6f9946152f1d5deb56e2b816566f892c4cc76", "patch": "@@ -0,0 +1,21 @@\n+/* Darwin pragma for __attribute__ ((ms_struct)).  */\n+\n+/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-options \"-Wall\" } */\n+\n+#pragma ms_struct on\n+\n+#pragma ms_struct off\n+\n+#pragma ms_struct reset\n+\n+#pragma ms_struct /* { dg-warning \"malformed\" } */\n+\n+#pragma ms_struct on top of spaghetti /* { dg-warning \"junk\" } */\n+\n+struct foo\n+{\n+  int a;\n+  int b;\n+  char c;\n+};"}]}