{"sha": "0866a4fbc6e7f70cd3708467419c60af8c6104f2", "node_id": "C_kwDOANBUbNoAKDA4NjZhNGZiYzZlN2Y3MGNkMzcwODQ2NzQxOWM2MGFmOGM2MTA0ZjI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-01T10:44:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T10:44:16Z"}, "message": "Merge #1287\n\n1287: Add AST dump visitor r=CohenArthur a=CohenArthur\n\nThis adds a base for pretty printing our AST through a new visitor (Addresses #1261).\r\n\r\nThis adds enough code to pretty print \"functions\" without types in the parameters or return type. Looking for feedback on the implementation before we keep going with more code :)\r\n\r\nHere's a tiny patch if you want to see the output whenever you're running `-frust-dump-all`:\r\n\r\n```diff\r\ndiff --git a/gcc/rust/rust-session-manager.cc b/gcc/rust/rust-session-manager.cc\r\nindex 0b0e5af915f..3e39c6a6e17 100644\r\n--- a/gcc/rust/rust-session-manager.cc\r\n+++ b/gcc/rust/rust-session-manager.cc\r\n`@@` -31,6 +31,7 `@@`\r\n #include \"rust-cfg-parser.h\"\r\n #include \"rust-lint-scan-deadcode.h\"\r\n #include \"rust-lint-unused-var.h\"\r\n+#include \"rust-ast-dump.h\"\r\n \r\n #include \"diagnostic.h\"\r\n #include \"input.h\"\r\n`@@` -1023,6 +1024,8 `@@` Session::dump_ast (Parser<Lexer> &parser, AST::Crate &crate) const\r\n \r\n   parser.debug_dump_ast_output (crate, out);\r\n   out.close ();\r\n+\r\n+  AST::Dump (std::cerr).go (crate);\r\n }\r\n \r\n void\r\n```\r\n\r\noutput:\r\n```rust\r\narthur@platypus ~/G/r/gccrs (add-ast-dump-visitor) [1]> cat test.rs\r\nfn foo0(a: i32) {\r\n    let a = 15;\r\n    let b: i32 = 15;\r\n}\r\n\r\nfn foo1(a: &i32) {}\r\n\r\nstruct S;\r\n\r\nfn foo2(a: S) {}\r\nfn foo3(a: S) -> i32 {}\r\n\r\narthur@platypus ~/G/r/gccrs (add-ast-dump-visitor)> build/gcc/rust1 test.rs -frust-dump-all\r\nfn foo0(a: ) {\r\n\tlet a = ;\r\n\tlet b:  = ;\r\n\r\n}\r\n\r\nfn foo1(a: ) {\r\n\r\n}\r\n\r\nfn foo2(a: ) {\r\n\r\n}\r\n\r\nfn foo3(a: ) -> {\r\n\r\n}\r\n\r\ntest.rs:11:1: error: expected [i32] got [()]\r\n   11 | fn foo3(a: S) -> i32 {}\r\n      | ^                ~\r\n\r\nAnalyzing compilation unit\r\n\r\nTime variable                                   usr           sys          wall           GGC\r\n phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)   129k ( 94%)\r\n TOTAL                              :   0.00          0.00          0.01          137k\r\nExtra diagnostic checks enabled; compiler may run slowly.\r\nConfigure with --enable-checking=release to disable checks.\r\n```\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "c590b511d30ca79d4babda5575614aa1d67a49ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c590b511d30ca79d4babda5575614aa1d67a49ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0866a4fbc6e7f70cd3708467419c60af8c6104f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJil0MACRBK7hj4Ov3rIwAAYAUIAFwgeMnpEZD7graEBZJAx2FW\nfX95VyTUBQyOOc2kCqcvGaDI/9Jzn8crlfYt8z5RsuFhNxqANUaeDYSLNkfwBTSp\nVosLduWnntgIrcb5B6iOhWMDW8hnqqrsofNFxBlceZGphJJ/1nAQrnc/VrmaO+ya\nxVetfEGM8729ysYTZcNjVi7VRD/7dHDwpsn6jDGzXZ3gRiHbFBMIlpwjwmrYYBYF\nlsEmHf5wU7We+FV/lg/yjM+4U6M06xzKY+fHMWxDPKy1sOCoqZCtQ/qsnAeJVpj6\nfcsJv9nt4xD5DZ0nKBVlTBK00CQaolHSxVY7qjtSMLl17jwQopnU1B9PJIkrbG4=\n=ixKK\n-----END PGP SIGNATURE-----\n", "payload": "tree c590b511d30ca79d4babda5575614aa1d67a49ec\nparent 998f1f73c2626f7ffa9655058e306b7f4e07c584\nparent 573b6298596fae8708982c65db0b66b989299805\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1654080256 +0000\ncommitter GitHub <noreply@github.com> 1654080256 +0000\n\nMerge #1287\n\n1287: Add AST dump visitor r=CohenArthur a=CohenArthur\n\nThis adds a base for pretty printing our AST through a new visitor (Addresses #1261).\r\n\r\nThis adds enough code to pretty print \"functions\" without types in the parameters or return type. Looking for feedback on the implementation before we keep going with more code :)\r\n\r\nHere's a tiny patch if you want to see the output whenever you're running `-frust-dump-all`:\r\n\r\n```diff\r\ndiff --git a/gcc/rust/rust-session-manager.cc b/gcc/rust/rust-session-manager.cc\r\nindex 0b0e5af915f..3e39c6a6e17 100644\r\n--- a/gcc/rust/rust-session-manager.cc\r\n+++ b/gcc/rust/rust-session-manager.cc\r\n`@@` -31,6 +31,7 `@@`\r\n #include \"rust-cfg-parser.h\"\r\n #include \"rust-lint-scan-deadcode.h\"\r\n #include \"rust-lint-unused-var.h\"\r\n+#include \"rust-ast-dump.h\"\r\n \r\n #include \"diagnostic.h\"\r\n #include \"input.h\"\r\n`@@` -1023,6 +1024,8 `@@` Session::dump_ast (Parser<Lexer> &parser, AST::Crate &crate) const\r\n \r\n   parser.debug_dump_ast_output (crate, out);\r\n   out.close ();\r\n+\r\n+  AST::Dump (std::cerr).go (crate);\r\n }\r\n \r\n void\r\n```\r\n\r\noutput:\r\n```rust\r\narthur@platypus ~/G/r/gccrs (add-ast-dump-visitor) [1]> cat test.rs\r\nfn foo0(a: i32) {\r\n    let a = 15;\r\n    let b: i32 = 15;\r\n}\r\n\r\nfn foo1(a: &i32) {}\r\n\r\nstruct S;\r\n\r\nfn foo2(a: S) {}\r\nfn foo3(a: S) -> i32 {}\r\n\r\narthur@platypus ~/G/r/gccrs (add-ast-dump-visitor)> build/gcc/rust1 test.rs -frust-dump-all\r\nfn foo0(a: ) {\r\n\tlet a = ;\r\n\tlet b:  = ;\r\n\r\n}\r\n\r\nfn foo1(a: ) {\r\n\r\n}\r\n\r\nfn foo2(a: ) {\r\n\r\n}\r\n\r\nfn foo3(a: ) -> {\r\n\r\n}\r\n\r\ntest.rs:11:1: error: expected [i32] got [()]\r\n   11 | fn foo3(a: S) -> i32 {}\r\n      | ^                ~\r\n\r\nAnalyzing compilation unit\r\n\r\nTime variable                                   usr           sys          wall           GGC\r\n phase setup                        :   0.00 (  0%)   0.00 (  0%)   0.01 (100%)   129k ( 94%)\r\n TOTAL                              :   0.00          0.00          0.01          137k\r\nExtra diagnostic checks enabled; compiler may run slowly.\r\nConfigure with --enable-checking=release to disable checks.\r\n```\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0866a4fbc6e7f70cd3708467419c60af8c6104f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0866a4fbc6e7f70cd3708467419c60af8c6104f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0866a4fbc6e7f70cd3708467419c60af8c6104f2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "998f1f73c2626f7ffa9655058e306b7f4e07c584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998f1f73c2626f7ffa9655058e306b7f4e07c584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998f1f73c2626f7ffa9655058e306b7f4e07c584"}, {"sha": "573b6298596fae8708982c65db0b66b989299805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/573b6298596fae8708982c65db0b66b989299805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/573b6298596fae8708982c65db0b66b989299805"}], "stats": {"total": 990, "additions": 990, "deletions": 0}, "files": [{"sha": "2b107c196c33b5cbe0290624a32f2ccb4004bed9", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0866a4fbc6e7f70cd3708467419c60af8c6104f2/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0866a4fbc6e7f70cd3708467419c60af8c6104f2/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=0866a4fbc6e7f70cd3708467419c60af8c6104f2", "patch": "@@ -69,6 +69,7 @@ GRS_OBJS = \\\n     rust/rust-cfg-parser.o \\\n     rust/rust-parse.o \\\n     rust/rust-ast-full-test.o \\\n+    rust/rust-ast-dump.o \\\n     rust/rust-session-manager.o \\\n     rust/rust-compile.o \\\n     rust/rust-mangle.o \\"}, {"sha": "64966c9d2ec8848a1a12a1392aeef740566a8673", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "added", "additions": 750, "deletions": 0, "changes": 750, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0866a4fbc6e7f70cd3708467419c60af8c6104f2/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0866a4fbc6e7f70cd3708467419c60af8c6104f2/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=0866a4fbc6e7f70cd3708467419c60af8c6104f2", "patch": "@@ -0,0 +1,750 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-ast-dump.h\"\n+\n+namespace Rust {\n+namespace AST {\n+\n+Indent::Indent () : tabs (0) {}\n+\n+std::ostream &\n+operator<< (std::ostream &stream, const Indent &indent)\n+{\n+  return stream << std::string (indent.tabs, '\\t');\n+}\n+\n+void\n+Indent::increment ()\n+{\n+  tabs++;\n+}\n+\n+void\n+Indent::decrement ()\n+{\n+  rust_assert (tabs != 0);\n+  tabs--;\n+}\n+\n+Dump::Dump (std::ostream &stream) : stream (stream), indentation (Indent ()) {}\n+\n+void\n+Dump::go (AST::Crate &crate)\n+{\n+  for (auto &item : crate.items)\n+    item->accept_vis (*this);\n+}\n+\n+void\n+Dump::format_function_param (FunctionParam &param)\n+{\n+  param.get_pattern ()->accept_vis (*this);\n+  stream << \": \";\n+  param.get_type ()->accept_vis (*this);\n+}\n+\n+void\n+Dump::visit (Token &tok)\n+{}\n+\n+void\n+Dump::visit (DelimTokenTree &delim_tok_tree)\n+{}\n+\n+void\n+Dump::visit (AttrInputMetaItemContainer &input)\n+{}\n+\n+void\n+Dump::visit (IdentifierExpr &ident_expr)\n+{}\n+\n+void\n+Dump::visit (Lifetime &lifetime)\n+{}\n+\n+void\n+Dump::visit (LifetimeParam &lifetime_param)\n+{}\n+\n+// rust-path.h\n+void\n+Dump::visit (PathInExpression &path)\n+{}\n+\n+void\n+Dump::visit (TypePathSegment &segment)\n+{}\n+\n+void\n+Dump::visit (TypePathSegmentGeneric &segment)\n+{}\n+\n+void\n+Dump::visit (TypePathSegmentFunction &segment)\n+{}\n+\n+void\n+Dump::visit (TypePath &path)\n+{}\n+\n+void\n+Dump::visit (QualifiedPathInExpression &path)\n+{}\n+\n+void\n+Dump::visit (QualifiedPathInType &path)\n+{}\n+\n+// rust-expr.h\n+void\n+Dump::visit (LiteralExpr &expr)\n+{}\n+\n+void\n+Dump::visit (AttrInputLiteral &attr_input)\n+{}\n+\n+void\n+Dump::visit (MetaItemLitExpr &meta_item)\n+{}\n+\n+void\n+Dump::visit (MetaItemPathLit &meta_item)\n+{}\n+\n+void\n+Dump::visit (BorrowExpr &expr)\n+{}\n+\n+void\n+Dump::visit (DereferenceExpr &expr)\n+{}\n+\n+void\n+Dump::visit (ErrorPropagationExpr &expr)\n+{}\n+\n+void\n+Dump::visit (NegationExpr &expr)\n+{}\n+\n+void\n+Dump::visit (ArithmeticOrLogicalExpr &expr)\n+{}\n+\n+void\n+Dump::visit (ComparisonExpr &expr)\n+{}\n+\n+void\n+Dump::visit (LazyBooleanExpr &expr)\n+{}\n+\n+void\n+Dump::visit (TypeCastExpr &expr)\n+{}\n+\n+void\n+Dump::visit (AssignmentExpr &expr)\n+{}\n+\n+void\n+Dump::visit (CompoundAssignmentExpr &expr)\n+{}\n+\n+void\n+Dump::visit (GroupedExpr &expr)\n+{}\n+\n+void\n+Dump::visit (ArrayElemsValues &elems)\n+{}\n+\n+void\n+Dump::visit (ArrayElemsCopied &elems)\n+{}\n+\n+void\n+Dump::visit (ArrayExpr &expr)\n+{}\n+\n+void\n+Dump::visit (ArrayIndexExpr &expr)\n+{}\n+\n+void\n+Dump::visit (TupleExpr &expr)\n+{}\n+\n+void\n+Dump::visit (TupleIndexExpr &expr)\n+{}\n+\n+void\n+Dump::visit (StructExprStruct &expr)\n+{}\n+\n+void\n+Dump::visit (StructExprFieldIdentifier &field)\n+{}\n+\n+void\n+Dump::visit (StructExprFieldIdentifierValue &field)\n+{}\n+\n+void\n+Dump::visit (StructExprFieldIndexValue &field)\n+{}\n+\n+void\n+Dump::visit (StructExprStructFields &expr)\n+{}\n+\n+void\n+Dump::visit (StructExprStructBase &expr)\n+{}\n+\n+void\n+Dump::visit (CallExpr &expr)\n+{}\n+\n+void\n+Dump::visit (MethodCallExpr &expr)\n+{}\n+\n+void\n+Dump::visit (FieldAccessExpr &expr)\n+{}\n+\n+void\n+Dump::visit (ClosureExprInner &expr)\n+{}\n+\n+void\n+Dump::visit (BlockExpr &expr)\n+{\n+  stream << \"{\\n\";\n+  indentation.increment ();\n+\n+  for (auto &stmt : expr.get_statements ())\n+    {\n+      stream << indentation;\n+      stmt->accept_vis (*this);\n+      stream << \";\\n\";\n+    }\n+\n+  if (expr.has_tail_expr ())\n+    expr.get_tail_expr ()->accept_vis (*this);\n+\n+  stream << \"\\n}\\n\";\n+  indentation.increment ();\n+}\n+\n+void\n+Dump::visit (ClosureExprInnerTyped &expr)\n+{}\n+\n+void\n+Dump::visit (ContinueExpr &expr)\n+{}\n+\n+void\n+Dump::visit (BreakExpr &expr)\n+{}\n+\n+void\n+Dump::visit (RangeFromToExpr &expr)\n+{}\n+\n+void\n+Dump::visit (RangeFromExpr &expr)\n+{}\n+\n+void\n+Dump::visit (RangeToExpr &expr)\n+{}\n+\n+void\n+Dump::visit (RangeFullExpr &expr)\n+{}\n+\n+void\n+Dump::visit (RangeFromToInclExpr &expr)\n+{}\n+\n+void\n+Dump::visit (RangeToInclExpr &expr)\n+{}\n+\n+void\n+Dump::visit (ReturnExpr &expr)\n+{}\n+\n+void\n+Dump::visit (UnsafeBlockExpr &expr)\n+{}\n+\n+void\n+Dump::visit (LoopExpr &expr)\n+{}\n+\n+void\n+Dump::visit (WhileLoopExpr &expr)\n+{}\n+\n+void\n+Dump::visit (WhileLetLoopExpr &expr)\n+{}\n+\n+void\n+Dump::visit (ForLoopExpr &expr)\n+{}\n+\n+void\n+Dump::visit (IfExpr &expr)\n+{}\n+\n+void\n+Dump::visit (IfExprConseqElse &expr)\n+{}\n+\n+void\n+Dump::visit (IfExprConseqIf &expr)\n+{}\n+\n+void\n+Dump::visit (IfExprConseqIfLet &expr)\n+{}\n+\n+void\n+Dump::visit (IfLetExpr &expr)\n+{}\n+\n+void\n+Dump::visit (IfLetExprConseqElse &expr)\n+{}\n+\n+void\n+Dump::visit (IfLetExprConseqIf &expr)\n+{}\n+\n+void\n+Dump::visit (IfLetExprConseqIfLet &expr)\n+{}\n+\n+void\n+Dump::visit (MatchExpr &expr)\n+{}\n+\n+void\n+Dump::visit (AwaitExpr &expr)\n+{}\n+\n+void\n+Dump::visit (AsyncBlockExpr &expr)\n+{}\n+\n+// rust-item.h\n+void\n+Dump::visit (TypeParam &param)\n+{}\n+\n+void\n+Dump::visit (LifetimeWhereClauseItem &item)\n+{}\n+\n+void\n+Dump::visit (TypeBoundWhereClauseItem &item)\n+{}\n+\n+void\n+Dump::visit (Method &method)\n+{}\n+\n+void\n+Dump::visit (Module &module)\n+{}\n+\n+void\n+Dump::visit (ExternCrate &crate)\n+{}\n+\n+void\n+Dump::visit (UseTreeGlob &use_tree)\n+{}\n+\n+void\n+Dump::visit (UseTreeList &use_tree)\n+{}\n+\n+void\n+Dump::visit (UseTreeRebind &use_tree)\n+{}\n+\n+void\n+Dump::visit (UseDeclaration &use_decl)\n+{}\n+\n+void\n+Dump::visit (Function &function)\n+{\n+  stream << \"fn \" << function.get_function_name () << '(';\n+\n+  auto &params = function.get_function_params ();\n+  if (params.size () >= 1)\n+    {\n+      format_function_param (params[0]);\n+      for (size_t i = 1; i < params.size (); i++)\n+\t{\n+\t  stream << \", \";\n+\t  format_function_param (params[i]);\n+\t}\n+    }\n+\n+  stream << \") \";\n+\n+  if (function.has_return_type ())\n+    {\n+      stream << \"-> \";\n+      function.get_return_type ()->accept_vis (*this);\n+    }\n+\n+  auto &block = function.get_definition ();\n+  if (!block)\n+    stream << ';';\n+  else\n+    block->accept_vis (*this);\n+\n+  stream << '\\n';\n+}\n+\n+void\n+Dump::visit (TypeAlias &type_alias)\n+{}\n+\n+void\n+Dump::visit (StructStruct &struct_item)\n+{}\n+\n+void\n+Dump::visit (TupleStruct &tuple_struct)\n+{}\n+\n+void\n+Dump::visit (EnumItem &item)\n+{}\n+\n+void\n+Dump::visit (EnumItemTuple &item)\n+{}\n+\n+void\n+Dump::visit (EnumItemStruct &item)\n+{}\n+\n+void\n+Dump::visit (EnumItemDiscriminant &item)\n+{}\n+\n+void\n+Dump::visit (Enum &enum_item)\n+{}\n+\n+void\n+Dump::visit (Union &union_item)\n+{}\n+\n+void\n+Dump::visit (ConstantItem &const_item)\n+{}\n+\n+void\n+Dump::visit (StaticItem &static_item)\n+{}\n+\n+void\n+Dump::visit (TraitItemFunc &item)\n+{}\n+\n+void\n+Dump::visit (TraitItemMethod &item)\n+{}\n+\n+void\n+Dump::visit (TraitItemConst &item)\n+{}\n+\n+void\n+Dump::visit (TraitItemType &item)\n+{}\n+\n+void\n+Dump::visit (Trait &trait)\n+{}\n+\n+void\n+Dump::visit (InherentImpl &impl)\n+{}\n+\n+void\n+Dump::visit (TraitImpl &impl)\n+{}\n+\n+void\n+Dump::visit (ExternalStaticItem &item)\n+{}\n+\n+void\n+Dump::visit (ExternalFunctionItem &item)\n+{}\n+\n+void\n+Dump::visit (ExternBlock &block)\n+{}\n+\n+// rust-macro.h\n+void\n+Dump::visit (MacroMatchFragment &match)\n+{}\n+\n+void\n+Dump::visit (MacroMatchRepetition &match)\n+{}\n+\n+void\n+Dump::visit (MacroMatcher &matcher)\n+{}\n+\n+void\n+Dump::visit (MacroRulesDefinition &rules_def)\n+{}\n+\n+void\n+Dump::visit (MacroInvocation &macro_invoc)\n+{}\n+\n+void\n+Dump::visit (MetaItemPath &meta_item)\n+{}\n+\n+void\n+Dump::visit (MetaItemSeq &meta_item)\n+{}\n+\n+void\n+Dump::visit (MetaWord &meta_item)\n+{}\n+\n+void\n+Dump::visit (MetaNameValueStr &meta_item)\n+{}\n+\n+void\n+Dump::visit (MetaListPaths &meta_item)\n+{}\n+\n+void\n+Dump::visit (MetaListNameValueStr &meta_item)\n+{}\n+\n+// rust-pattern.h\n+void\n+Dump::visit (LiteralPattern &pattern)\n+{}\n+\n+void\n+Dump::visit (IdentifierPattern &pattern)\n+{\n+  stream << pattern.get_ident ();\n+}\n+\n+void\n+Dump::visit (WildcardPattern &pattern)\n+{}\n+\n+// void Dump::visit(RangePatternBound& bound){}\n+\n+void\n+Dump::visit (RangePatternBoundLiteral &bound)\n+{}\n+\n+void\n+Dump::visit (RangePatternBoundPath &bound)\n+{}\n+\n+void\n+Dump::visit (RangePatternBoundQualPath &bound)\n+{}\n+\n+void\n+Dump::visit (RangePattern &pattern)\n+{}\n+\n+void\n+Dump::visit (ReferencePattern &pattern)\n+{}\n+\n+// void Dump::visit(StructPatternField& field){}\n+\n+void\n+Dump::visit (StructPatternFieldTuplePat &field)\n+{}\n+\n+void\n+Dump::visit (StructPatternFieldIdentPat &field)\n+{}\n+\n+void\n+Dump::visit (StructPatternFieldIdent &field)\n+{}\n+\n+void\n+Dump::visit (StructPattern &pattern)\n+{}\n+\n+// void Dump::visit(TupleStructItems& tuple_items){}\n+\n+void\n+Dump::visit (TupleStructItemsNoRange &tuple_items)\n+{}\n+\n+void\n+Dump::visit (TupleStructItemsRange &tuple_items)\n+{}\n+\n+void\n+Dump::visit (TupleStructPattern &pattern)\n+{}\n+\n+// void Dump::visit(TuplePatternItems& tuple_items){}\n+\n+void\n+Dump::visit (TuplePatternItemsMultiple &tuple_items)\n+{}\n+\n+void\n+Dump::visit (TuplePatternItemsRanged &tuple_items)\n+{}\n+\n+void\n+Dump::visit (TuplePattern &pattern)\n+{}\n+\n+void\n+Dump::visit (GroupedPattern &pattern)\n+{}\n+\n+void\n+Dump::visit (SlicePattern &pattern)\n+{}\n+\n+// rust-stmt.h\n+void\n+Dump::visit (EmptyStmt &stmt)\n+{}\n+\n+void\n+Dump::visit (LetStmt &stmt)\n+{\n+  stream << \"let \";\n+  auto &pattern = stmt.get_pattern ();\n+  if (pattern)\n+    pattern->accept_vis (*this);\n+\n+  if (stmt.has_type ())\n+    {\n+      stream << \": \";\n+      stmt.get_type ()->accept_vis (*this);\n+    }\n+\n+  if (stmt.has_init_expr ())\n+    {\n+      stream << \" = \";\n+      stmt.get_init_expr ()->accept_vis (*this);\n+    }\n+}\n+\n+void\n+Dump::visit (ExprStmtWithoutBlock &stmt)\n+{}\n+\n+void\n+Dump::visit (ExprStmtWithBlock &stmt)\n+{}\n+\n+// rust-type.h\n+void\n+Dump::visit (TraitBound &bound)\n+{}\n+\n+void\n+Dump::visit (ImplTraitType &type)\n+{}\n+\n+void\n+Dump::visit (TraitObjectType &type)\n+{}\n+\n+void\n+Dump::visit (ParenthesisedType &type)\n+{}\n+\n+void\n+Dump::visit (ImplTraitTypeOneBound &type)\n+{}\n+\n+void\n+Dump::visit (TraitObjectTypeOneBound &type)\n+{}\n+\n+void\n+Dump::visit (TupleType &type)\n+{}\n+\n+void\n+Dump::visit (NeverType &type)\n+{}\n+\n+void\n+Dump::visit (RawPointerType &type)\n+{}\n+\n+void\n+Dump::visit (ReferenceType &type)\n+{}\n+\n+void\n+Dump::visit (ArrayType &type)\n+{}\n+\n+void\n+Dump::visit (SliceType &type)\n+{}\n+\n+void\n+Dump::visit (InferredType &type)\n+{}\n+\n+void\n+Dump::visit (BareFunctionType &type)\n+{}\n+\n+} // namespace AST\n+} // namespace Rust"}, {"sha": "436c2b523dda4f3c63e930277b357572a33b7d11", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0866a4fbc6e7f70cd3708467419c60af8c6104f2/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0866a4fbc6e7f70cd3708467419c60af8c6104f2/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=0866a4fbc6e7f70cd3708467419c60af8c6104f2", "patch": "@@ -0,0 +1,239 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-ast-visitor.h\"\n+#include \"rust-ast.h\"\n+#include \"rust-ast-full.h\"\n+\n+#ifndef RUST_AST_DUMP_H\n+#define RUST_AST_DUMP_H\n+\n+namespace Rust {\n+namespace AST {\n+\n+// TODO: We might want to reuse this class somewhere else\n+class Indent\n+{\n+public:\n+  Indent ();\n+\n+  friend std::ostream &operator<< (std::ostream &stream, const Indent &indent);\n+\n+  void increment ();\n+  void decrement ();\n+\n+private:\n+  size_t tabs;\n+};\n+\n+class Dump : public ASTVisitor\n+{\n+public:\n+  Dump (std::ostream &stream);\n+\n+  /**\n+   * Run the visitor on an entire crate and its items\n+   */\n+  void go (AST::Crate &crate);\n+\n+private:\n+  std::ostream &stream;\n+  Indent indentation;\n+\n+  /**\n+   * Format a function's definition parameter\n+   */\n+  void format_function_param (FunctionParam &param);\n+\n+  // rust-ast.h\n+  void visit (Token &tok);\n+  void visit (DelimTokenTree &delim_tok_tree);\n+  void visit (AttrInputMetaItemContainer &input);\n+  void visit (IdentifierExpr &ident_expr);\n+  void visit (Lifetime &lifetime);\n+  void visit (LifetimeParam &lifetime_param);\n+\n+  // rust-path.h\n+  void visit (PathInExpression &path);\n+  void visit (TypePathSegment &segment);\n+  void visit (TypePathSegmentGeneric &segment);\n+  void visit (TypePathSegmentFunction &segment);\n+  void visit (TypePath &path);\n+  void visit (QualifiedPathInExpression &path);\n+  void visit (QualifiedPathInType &path);\n+\n+  // rust-expr.h\n+  void visit (LiteralExpr &expr);\n+  void visit (AttrInputLiteral &attr_input);\n+  void visit (MetaItemLitExpr &meta_item);\n+  void visit (MetaItemPathLit &meta_item);\n+  void visit (BorrowExpr &expr);\n+  void visit (DereferenceExpr &expr);\n+  void visit (ErrorPropagationExpr &expr);\n+  void visit (NegationExpr &expr);\n+  void visit (ArithmeticOrLogicalExpr &expr);\n+  void visit (ComparisonExpr &expr);\n+  void visit (LazyBooleanExpr &expr);\n+  void visit (TypeCastExpr &expr);\n+  void visit (AssignmentExpr &expr);\n+  void visit (CompoundAssignmentExpr &expr);\n+  void visit (GroupedExpr &expr);\n+  void visit (ArrayElemsValues &elems);\n+  void visit (ArrayElemsCopied &elems);\n+  void visit (ArrayExpr &expr);\n+  void visit (ArrayIndexExpr &expr);\n+  void visit (TupleExpr &expr);\n+  void visit (TupleIndexExpr &expr);\n+  void visit (StructExprStruct &expr);\n+  void visit (StructExprFieldIdentifier &field);\n+  void visit (StructExprFieldIdentifierValue &field);\n+  void visit (StructExprFieldIndexValue &field);\n+  void visit (StructExprStructFields &expr);\n+  void visit (StructExprStructBase &expr);\n+  void visit (CallExpr &expr);\n+  void visit (MethodCallExpr &expr);\n+  void visit (FieldAccessExpr &expr);\n+  void visit (ClosureExprInner &expr);\n+  void visit (BlockExpr &expr);\n+  void visit (ClosureExprInnerTyped &expr);\n+  void visit (ContinueExpr &expr);\n+  void visit (BreakExpr &expr);\n+  void visit (RangeFromToExpr &expr);\n+  void visit (RangeFromExpr &expr);\n+  void visit (RangeToExpr &expr);\n+  void visit (RangeFullExpr &expr);\n+  void visit (RangeFromToInclExpr &expr);\n+  void visit (RangeToInclExpr &expr);\n+  void visit (ReturnExpr &expr);\n+  void visit (UnsafeBlockExpr &expr);\n+  void visit (LoopExpr &expr);\n+  void visit (WhileLoopExpr &expr);\n+  void visit (WhileLetLoopExpr &expr);\n+  void visit (ForLoopExpr &expr);\n+  void visit (IfExpr &expr);\n+  void visit (IfExprConseqElse &expr);\n+  void visit (IfExprConseqIf &expr);\n+  void visit (IfExprConseqIfLet &expr);\n+  void visit (IfLetExpr &expr);\n+  void visit (IfLetExprConseqElse &expr);\n+  void visit (IfLetExprConseqIf &expr);\n+  void visit (IfLetExprConseqIfLet &expr);\n+  void visit (MatchExpr &expr);\n+  void visit (AwaitExpr &expr);\n+  void visit (AsyncBlockExpr &expr);\n+\n+  // rust-item.h\n+  void visit (TypeParam &param);\n+  void visit (LifetimeWhereClauseItem &item);\n+  void visit (TypeBoundWhereClauseItem &item);\n+  void visit (Method &method);\n+  void visit (Module &module);\n+  void visit (ExternCrate &crate);\n+  void visit (UseTreeGlob &use_tree);\n+  void visit (UseTreeList &use_tree);\n+  void visit (UseTreeRebind &use_tree);\n+  void visit (UseDeclaration &use_decl);\n+  void visit (Function &function);\n+  void visit (TypeAlias &type_alias);\n+  void visit (StructStruct &struct_item);\n+  void visit (TupleStruct &tuple_struct);\n+  void visit (EnumItem &item);\n+  void visit (EnumItemTuple &item);\n+  void visit (EnumItemStruct &item);\n+  void visit (EnumItemDiscriminant &item);\n+  void visit (Enum &enum_item);\n+  void visit (Union &union_item);\n+  void visit (ConstantItem &const_item);\n+  void visit (StaticItem &static_item);\n+  void visit (TraitItemFunc &item);\n+  void visit (TraitItemMethod &item);\n+  void visit (TraitItemConst &item);\n+  void visit (TraitItemType &item);\n+  void visit (Trait &trait);\n+  void visit (InherentImpl &impl);\n+  void visit (TraitImpl &impl);\n+  void visit (ExternalStaticItem &item);\n+  void visit (ExternalFunctionItem &item);\n+  void visit (ExternBlock &block);\n+\n+  // rust-macro.h\n+  void visit (MacroMatchFragment &match);\n+  void visit (MacroMatchRepetition &match);\n+  void visit (MacroMatcher &matcher);\n+  void visit (MacroRulesDefinition &rules_def);\n+  void visit (MacroInvocation &macro_invoc);\n+  void visit (MetaItemPath &meta_item);\n+  void visit (MetaItemSeq &meta_item);\n+  void visit (MetaWord &meta_item);\n+  void visit (MetaNameValueStr &meta_item);\n+  void visit (MetaListPaths &meta_item);\n+  void visit (MetaListNameValueStr &meta_item);\n+\n+  // rust-pattern.h\n+  void visit (LiteralPattern &pattern);\n+  void visit (IdentifierPattern &pattern);\n+  void visit (WildcardPattern &pattern);\n+  // void visit(RangePatternBound& bound);\n+  void visit (RangePatternBoundLiteral &bound);\n+  void visit (RangePatternBoundPath &bound);\n+  void visit (RangePatternBoundQualPath &bound);\n+  void visit (RangePattern &pattern);\n+  void visit (ReferencePattern &pattern);\n+  // void visit(StructPatternField& field);\n+  void visit (StructPatternFieldTuplePat &field);\n+  void visit (StructPatternFieldIdentPat &field);\n+  void visit (StructPatternFieldIdent &field);\n+  void visit (StructPattern &pattern);\n+  // void visit(TupleStructItems& tuple_items);\n+  void visit (TupleStructItemsNoRange &tuple_items);\n+  void visit (TupleStructItemsRange &tuple_items);\n+  void visit (TupleStructPattern &pattern);\n+  // void visit(TuplePatternItems& tuple_items);\n+  void visit (TuplePatternItemsMultiple &tuple_items);\n+  void visit (TuplePatternItemsRanged &tuple_items);\n+  void visit (TuplePattern &pattern);\n+  void visit (GroupedPattern &pattern);\n+  void visit (SlicePattern &pattern);\n+\n+  // rust-stmt.h\n+  void visit (EmptyStmt &stmt);\n+  void visit (LetStmt &stmt);\n+  void visit (ExprStmtWithoutBlock &stmt);\n+  void visit (ExprStmtWithBlock &stmt);\n+\n+  // rust-type.h\n+  void visit (TraitBound &bound);\n+  void visit (ImplTraitType &type);\n+  void visit (TraitObjectType &type);\n+  void visit (ParenthesisedType &type);\n+  void visit (ImplTraitTypeOneBound &type);\n+  void visit (TraitObjectTypeOneBound &type);\n+  void visit (TupleType &type);\n+  void visit (NeverType &type);\n+  void visit (RawPointerType &type);\n+  void visit (ReferenceType &type);\n+  void visit (ArrayType &type);\n+  void visit (SliceType &type);\n+  void visit (InferredType &type);\n+  void visit (BareFunctionType &type);\n+};\n+\n+} // namespace AST\n+} // namespace Rust\n+\n+#endif // !RUST_AST_DUMP_H"}]}