{"sha": "79777b798cb818ea1ac419e357263158f7b72acd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk3NzdiNzk4Y2I4MThlYTFhYzQxOWUzNTcyNjMxNThmN2I3MmFjZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-16T00:30:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-16T00:30:29Z"}, "message": "(expand_increment): Handle both BAD_SUBREG and POST.\n\nFrom-SVN: r6567", "tree": {"sha": "943628631dbc2612b1f19a8de92d98425ad58597", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/943628631dbc2612b1f19a8de92d98425ad58597"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79777b798cb818ea1ac419e357263158f7b72acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79777b798cb818ea1ac419e357263158f7b72acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79777b798cb818ea1ac419e357263158f7b72acd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79777b798cb818ea1ac419e357263158f7b72acd/comments", "author": null, "committer": null, "parents": [{"sha": "a37adfc784385cabf2bbedcd0663919d8c32d2d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37adfc784385cabf2bbedcd0663919d8c32d2d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37adfc784385cabf2bbedcd0663919d8c32d2d7"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "ae1e5a46569498816a8bcca64112ff891044b91a", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79777b798cb818ea1ac419e357263158f7b72acd/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79777b798cb818ea1ac419e357263158f7b72acd/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=79777b798cb818ea1ac419e357263158f7b72acd", "patch": "@@ -7951,7 +7951,15 @@ expand_increment (exp, post)\n     SUBREG_REG (op0) = copy_to_reg (SUBREG_REG (op0));\n   else if (GET_CODE (op0) == SUBREG\n \t   && GET_MODE_BITSIZE (GET_MODE (op0)) < BITS_PER_WORD)\n-    bad_subreg = 1;\n+    {\n+      /* We cannot increment this SUBREG in place.  If we are\n+\t post-incrementing, get a copy of the old value.  Otherwise,\n+\t just mark that we cannot increment in place.  */\n+      if (post)\n+\top0 = copy_to_reg (op0);\n+      else\n+\tbad_subreg = 1;\n+    }\n \n   op0_is_copy = ((GET_CODE (op0) == SUBREG || GET_CODE (op0) == REG)\n \t\t && temp != get_last_insn ());"}]}