{"sha": "08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlN2NlYjNkM2Q0ZDM3NjNiZGI1Y2ZiYjFkZDBhNzhiMjdmMGU1ZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-04-12T17:26:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-04-12T17:26:45Z"}, "message": "mips-protos.h (SYMBOL_GOT_LOCAL): Rename to...\n\ngcc/\n\t* config/mips/mips-protos.h (SYMBOL_GOT_LOCAL): Rename to...\n\t(SYMBOL_GOT_PAGE_OFST): ...this.\n\t(SYMBOL_GOT_GLOBAL): Rename to...\n\t(SYMBOL_GOT_DISP): ...this.\n\t(SYMBOL_GOTOFF_GLOBAL): Rename to...\n\t(SYMBOL_GOTOFF_DISP): ...this.  Update comments accordingly.\n\t* config/mips/mips.c (mips_global_symbol_p): New function.\n\t(mips_symbol_binds_local_p): Likewise.\n\t(mips_classify_symbol): Rename SYMBOL_GOT_GLOBAL to SYMBOL_GOT_DISP\n\tand SYMBOL_GOT_LOCAL to SYMBOL_GOT_PAGE_OFST.  Use mips_global_symbol_p\n\tand mips_symbol_binds_local_p.\n\t(mips_symbolic_constant_p, mips_symbolic_address_p, mips_symbol_insns)\n\t(override_options): Rename SYMBOL_GOT_GLOBAL to SYMBOL_GOT_DISP,\n\tSYMBOL_GOT_LOCAL to SYMBOL_GOT_PAGE_OFST and SYMBOL_GOTOFF_GLOBAL to\n\tSYMBOL_GOTOFF_DISP.\n\t(mips_ok_for_lazy_binding_p): New function.\n\t(mips_load_call_address, mips_expand_call): Use it.\n\t(mips_dangerous_for_la25_p): Likewise.\n\t* config/mips/mips.md (*xgot_hi<mode>, *xgot_lo<mode>)\n\t(*got_disp<mode>): Use got_disp_operand instead of\n\tglobal_got_operand.  Use SYMBOL_GOTOFF_DISP instead of\n\tSYMBOL_GOTOFF_GLOBAL.\n\t(*got_page<mode>): Use got_page_ofst_operand instead of\n\tlocal_got_operand.\n\t* config/mips/predicates.md (const_call_insn_operand): Use\n\tSYMBOL_GOT_DISP instead of SYMBOL_GOT_GLOBAL.\n\t(global_got_operand): Rename to...\n\t(got_disp_operand): ...this and use SYMBOL_GOT_DISP instead of\n\tSYMBOL_GOT_GLOBAL.\n\t(local_got_operand): Rename to...\n\t(got_page_ofst_operand): ...this and use SYMBOL_GOT_PAGE_OFST instead\n\tof SYMBOL_GOT_LOCAL.\n\nFrom-SVN: r123752", "tree": {"sha": "14a6cce3cf7130799e9062ea9ff68332c7bd4c2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14a6cce3cf7130799e9062ea9ff68332c7bd4c2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/comments", "author": null, "committer": null, "parents": [{"sha": "14976818e723aedf177bdd090fdd3ecb246e908d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14976818e723aedf177bdd090fdd3ecb246e908d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14976818e723aedf177bdd090fdd3ecb246e908d"}], "stats": {"total": 259, "additions": 157, "deletions": 102}, "files": [{"sha": "fb65fb48a2eafa3b6c4a38178941c958d6a81150", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d", "patch": "@@ -1,3 +1,38 @@\n+2007-04-12  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/mips/mips-protos.h (SYMBOL_GOT_LOCAL): Rename to...\n+\t(SYMBOL_GOT_PAGE_OFST): ...this.\n+\t(SYMBOL_GOT_GLOBAL): Rename to...\n+\t(SYMBOL_GOT_DISP): ...this.\n+\t(SYMBOL_GOTOFF_GLOBAL): Rename to...\n+\t(SYMBOL_GOTOFF_DISP): ...this.  Update comments accordingly.\n+\t* config/mips/mips.c (mips_global_symbol_p): New function.\n+\t(mips_symbol_binds_local_p): Likewise.\n+\t(mips_classify_symbol): Rename SYMBOL_GOT_GLOBAL to SYMBOL_GOT_DISP\n+\tand SYMBOL_GOT_LOCAL to SYMBOL_GOT_PAGE_OFST.  Use mips_global_symbol_p\n+\tand mips_symbol_binds_local_p.\n+\t(mips_symbolic_constant_p, mips_symbolic_address_p, mips_symbol_insns)\n+\t(override_options): Rename SYMBOL_GOT_GLOBAL to SYMBOL_GOT_DISP,\n+\tSYMBOL_GOT_LOCAL to SYMBOL_GOT_PAGE_OFST and SYMBOL_GOTOFF_GLOBAL to\n+\tSYMBOL_GOTOFF_DISP.\n+\t(mips_ok_for_lazy_binding_p): New function.\n+\t(mips_load_call_address, mips_expand_call): Use it.\n+\t(mips_dangerous_for_la25_p): Likewise.\n+\t* config/mips/mips.md (*xgot_hi<mode>, *xgot_lo<mode>)\n+\t(*got_disp<mode>): Use got_disp_operand instead of\n+\tglobal_got_operand.  Use SYMBOL_GOTOFF_DISP instead of\n+\tSYMBOL_GOTOFF_GLOBAL.\n+\t(*got_page<mode>): Use got_page_ofst_operand instead of\n+\tlocal_got_operand.\n+\t* config/mips/predicates.md (const_call_insn_operand): Use\n+\tSYMBOL_GOT_DISP instead of SYMBOL_GOT_GLOBAL.\n+\t(global_got_operand): Rename to...\n+\t(got_disp_operand): ...this and use SYMBOL_GOT_DISP instead of\n+\tSYMBOL_GOT_GLOBAL.\n+\t(local_got_operand): Rename to...\n+\t(got_page_ofst_operand): ...this and use SYMBOL_GOT_PAGE_OFST instead\n+\tof SYMBOL_GOT_LOCAL.\n+\n 2007-04-12  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.h (TARGET_SPLIT_CALLS): Check"}, {"sha": "91d0150dbd7371e0ca041072f5b6a4e64de75d2e", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d", "patch": "@@ -37,23 +37,23 @@ Boston, MA 02110-1301, USA.  */\n    SYMBOL_CONSTANT_POOL\n        The symbol refers to something in the mips16 constant pool.\n \n-   SYMBOL_GOT_LOCAL\n-       The symbol refers to local data that will be found using\n-       the global offset table.\n+   SYMBOL_GOT_PAGE_OFST\n+       The symbol's value will be calculated by loading an address\n+       from the GOT and then applying a 16-bit offset.\n \n-   SYMBOL_GOT_GLOBAL\n-       Likewise non-local data.\n+   SYMBOL_GOT_DISP\n+       The symbol's value will be loaded directly from the GOT.\n \n    SYMBOL_GOTOFF_PAGE\n-       An UNSPEC wrapper around a SYMBOL_GOT_LOCAL.  It represents the\n-       offset from _gp of a GOT page entry.\n+       An UNSPEC wrapper around a SYMBOL_GOT_PAGE_OFST.  It represents the\n+       offset from _gp of the GOT entry.\n \n-   SYMBOL_GOTOFF_GLOBAL\n-       An UNSPEC wrapper around a SYMBOL_GOT_GLOBAL.  It represents the\n+   SYMBOL_GOTOFF_DISP\n+       An UNSPEC wrapper around a SYMBOL_GOT_DISP.  It represents the\n        the offset from _gp of the symbol's GOT entry.\n \n    SYMBOL_GOTOFF_CALL\n-       Like SYMBOL_GOTOFF_GLOBAL, but used when calling a global function.\n+       Like SYMBOL_GOTOFF_DISP, but used when calling a global function.\n        The GOT entry is allowed to point to a stub rather than to the\n        function itself.\n \n@@ -87,10 +87,10 @@ enum mips_symbol_type {\n   SYMBOL_GENERAL,\n   SYMBOL_SMALL_DATA,\n   SYMBOL_CONSTANT_POOL,\n-  SYMBOL_GOT_LOCAL,\n-  SYMBOL_GOT_GLOBAL,\n+  SYMBOL_GOT_PAGE_OFST,\n+  SYMBOL_GOT_DISP,\n   SYMBOL_GOTOFF_PAGE,\n-  SYMBOL_GOTOFF_GLOBAL,\n+  SYMBOL_GOTOFF_DISP,\n   SYMBOL_GOTOFF_CALL,\n   SYMBOL_GOTOFF_LOADGP,\n   SYMBOL_TLS,"}, {"sha": "d7dbd2eb651c09c935a4a0ca4b8c016345437ae5", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 94, "deletions": 74, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d", "patch": "@@ -1212,19 +1212,45 @@ static struct mips_rtx_cost_data const mips_rtx_cost_data[PROCESSOR_MAX] =\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+/* Return true if SYMBOL_REF X is associated with a global symbol\n+   (in the STB_GLOBAL sense).  */\n+\n+static bool\n+mips_global_symbol_p (rtx x)\n+{\n+  tree decl;\n+\n+  decl = SYMBOL_REF_DECL (x);\n+  if (!decl)\n+    return !SYMBOL_REF_LOCAL_P (x);\n+\n+  /* Weakref symbols are not TREE_PUBLIC, but their targets are global\n+     or weak symbols.  Relocations in the object file will be against\n+     the target symbol, so it's that symbol's binding that matters here.  */\n+  return DECL_P (decl) && (TREE_PUBLIC (decl) || DECL_WEAK (decl));\n+}\n+\n+/* Return true if SYMBOL_REF X binds locally.  */\n+\n+static bool\n+mips_symbol_binds_local_p (rtx x)\n+{\n+  return (SYMBOL_REF_DECL (x)\n+\t  ? targetm.binds_local_p (SYMBOL_REF_DECL (x))\n+\t  : SYMBOL_REF_LOCAL_P (x));\n+}\n+\n /* Classify symbol X, which must be a SYMBOL_REF or a LABEL_REF.  */\n \n static enum mips_symbol_type\n mips_classify_symbol (rtx x)\n {\n-  tree decl;\n-\n   if (GET_CODE (x) == LABEL_REF)\n     {\n       if (TARGET_MIPS16)\n \treturn SYMBOL_CONSTANT_POOL;\n       if (TARGET_ABICALLS && !TARGET_ABSOLUTE_ABICALLS)\n-\treturn SYMBOL_GOT_LOCAL;\n+\treturn SYMBOL_GOT_PAGE_OFST;\n       return SYMBOL_GENERAL;\n     }\n \n@@ -1250,49 +1276,34 @@ mips_classify_symbol (rtx x)\n \n   if (TARGET_ABICALLS)\n     {\n-      decl = SYMBOL_REF_DECL (x);\n-      if (decl == 0)\n-\t{\n-\t  if (!SYMBOL_REF_LOCAL_P (x))\n-\t    return SYMBOL_GOT_GLOBAL;\n-\t}\n-      else\n-\t{\n-\t  /* Don't use GOT accesses for locally-binding symbols if\n-\t     TARGET_ABSOLUTE_ABICALLS.  Otherwise, there are three\n-\t     cases to consider:\n-\n-\t\t- o32 PIC (either with or without explicit relocs)\n-\t\t- n32/n64 PIC without explicit relocs\n-\t\t- n32/n64 PIC with explicit relocs\n-\n-\t     In the first case, both local and global accesses will use an\n-\t     R_MIPS_GOT16 relocation.  We must correctly predict which of\n-\t     the two semantics (local or global) the assembler and linker\n-\t     will apply.  The choice doesn't depend on the symbol's\n-\t     visibility, so we deliberately ignore decl_visibility and\n-\t     binds_local_p here.\n-\n-\t     In the second case, the assembler will not use R_MIPS_GOT16\n-\t     relocations, but it chooses between local and global accesses\n-\t     in the same way as for o32 PIC.\n-\n-\t     In the third case we have more freedom since both forms of\n-\t     access will work for any kind of symbol.  However, there seems\n-\t     little point in doing things differently.\n-\n-\t     Note that weakref symbols are not TREE_PUBLIC, but their\n-\t     targets are global or weak symbols.  Relocations in the\n-\t     object file will be against the target symbol, so it's\n-\t     that symbol's binding that matters here.  */\n-\t  if (DECL_P (decl)\n-\t      && (TREE_PUBLIC (decl) || DECL_WEAK (decl))\n-\t      && !(TARGET_ABSOLUTE_ABICALLS && targetm.binds_local_p (decl)))\n-\t    return SYMBOL_GOT_GLOBAL;\n-\t}\n+      /* Don't use GOT accesses for locally-binding symbols; we can use\n+\t %hi and %lo instead.  */\n+      if (TARGET_ABSOLUTE_ABICALLS && mips_symbol_binds_local_p (x))\n+\treturn SYMBOL_GENERAL;\n+\n+      /* There are three cases to consider:\n+\n+\t    - o32 PIC (either with or without explicit relocs)\n+\t    - n32/n64 PIC without explicit relocs\n+\t    - n32/n64 PIC with explicit relocs\n+\n+\t In the first case, both local and global accesses will use an\n+\t R_MIPS_GOT16 relocation.  We must correctly predict which of\n+\t the two semantics (local or global) the assembler and linker\n+\t will apply.  The choice depends on the symbol's binding rather\n+\t than its visibility.\n \n-      if (!TARGET_ABSOLUTE_ABICALLS)\n-\treturn SYMBOL_GOT_LOCAL;\n+\t In the second case, the assembler will not use R_MIPS_GOT16\n+\t relocations, but it chooses between local and global accesses\n+\t in the same way as for o32 PIC.\n+\n+\t In the third case we have more freedom since both forms of\n+\t access will work for any kind of symbol.  However, there seems\n+\t little point in doing things differently.  */\n+      if (mips_global_symbol_p (x))\n+\treturn SYMBOL_GOT_DISP;\n+\n+      return SYMBOL_GOT_PAGE_OFST;\n     }\n \n   return SYMBOL_GENERAL;\n@@ -1355,14 +1366,17 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n \t PC- or GP-relative offset is within the 16-bit limit.  */\n       return offset_within_block_p (x, INTVAL (offset));\n \n-    case SYMBOL_GOT_LOCAL:\n+    case SYMBOL_GOT_PAGE_OFST:\n     case SYMBOL_GOTOFF_PAGE:\n-      /* The linker should provide enough local GOT entries for a\n-\t 16-bit offset.  Larger offsets may lead to GOT overflow.  */\n+      /* If the symbol is global, the GOT entry will contain the symbol's\n+\t address, and we will apply a 16-bit offset after loading it.\n+\t If the symbol is local, the linker should provide enough local\n+\t GOT entries for a 16-bit offset, but larger offsets may lead\n+\t to GOT overflow.  */\n       return SMALL_INT (offset);\n \n-    case SYMBOL_GOT_GLOBAL:\n-    case SYMBOL_GOTOFF_GLOBAL:\n+    case SYMBOL_GOT_DISP:\n+    case SYMBOL_GOTOFF_DISP:\n     case SYMBOL_GOTOFF_CALL:\n     case SYMBOL_GOTOFF_LOADGP:\n     case SYMBOL_TLSGD:\n@@ -1450,15 +1464,15 @@ mips_symbolic_address_p (enum mips_symbol_type symbol_type,\n       /* PC-relative addressing is only available for lw and ld.  */\n       return GET_MODE_SIZE (mode) == 4 || GET_MODE_SIZE (mode) == 8;\n \n-    case SYMBOL_GOT_LOCAL:\n+    case SYMBOL_GOT_PAGE_OFST:\n       return true;\n \n-    case SYMBOL_GOT_GLOBAL:\n+    case SYMBOL_GOT_DISP:\n       /* The address will have to be loaded from the GOT first.  */\n       return false;\n \n     case SYMBOL_GOTOFF_PAGE:\n-    case SYMBOL_GOTOFF_GLOBAL:\n+    case SYMBOL_GOTOFF_DISP:\n     case SYMBOL_GOTOFF_CALL:\n     case SYMBOL_GOTOFF_LOADGP:\n     case SYMBOL_TLS:\n@@ -1623,8 +1637,8 @@ mips_symbol_insns (enum mips_symbol_type type)\n \t extended instruction.  */\n       return 2;\n \n-    case SYMBOL_GOT_LOCAL:\n-    case SYMBOL_GOT_GLOBAL:\n+    case SYMBOL_GOT_PAGE_OFST:\n+    case SYMBOL_GOT_DISP:\n       /* Unless -funit-at-a-time is in effect, we can't be sure whether\n \t the local/global classification is accurate.  See override_options\n \t for details.\n@@ -1648,7 +1662,7 @@ mips_symbol_insns (enum mips_symbol_type type)\n       return 3;\n \n     case SYMBOL_GOTOFF_PAGE:\n-    case SYMBOL_GOTOFF_GLOBAL:\n+    case SYMBOL_GOTOFF_DISP:\n     case SYMBOL_GOTOFF_CALL:\n     case SYMBOL_GOTOFF_LOADGP:\n     case SYMBOL_64_HIGH:\n@@ -3346,6 +3360,18 @@ mips_gen_conditional_trap (rtx *operands)\n \t\t\t      operands[1]));\n }\n \f\n+/* Return true if calls to X can use R_MIPS_CALL* relocations.  */\n+\n+static bool\n+mips_ok_for_lazy_binding_p (rtx x)\n+{\n+  return (TARGET_USE_GOT\n+\t  && GET_CODE (x) == SYMBOL_REF\n+\t  && (TARGET_ABSOLUTE_ABICALLS\n+\t      ? !mips_symbol_binds_local_p (x)\n+\t      : mips_global_symbol_p (x)));\n+}\n+\n /* Load function address ADDR into register DEST.  SIBCALL_P is true\n    if the address is needed for a sibling call.  */\n \n@@ -3358,7 +3384,7 @@ mips_load_call_address (rtx dest, rtx addr, int sibcall_p)\n      to the stub would be our caller's gp, not ours.  */\n   if (TARGET_EXPLICIT_RELOCS\n       && !(sibcall_p && TARGET_CALL_SAVED_GP)\n-      && global_got_operand (addr, VOIDmode))\n+      && mips_ok_for_lazy_binding_p (addr))\n     {\n       rtx high, lo_sum_symbol;\n \n@@ -3423,7 +3449,7 @@ mips_expand_call (rtx result, rtx addr, rtx args_size, rtx aux, int sibcall_p)\n   insn = emit_call_insn (pattern);\n \n   /* Lazy-binding stubs require $gp to be valid on entry.  */\n-  if (global_got_operand (orig_addr, VOIDmode))\n+  if (mips_ok_for_lazy_binding_p (orig_addr))\n     use_reg (&CALL_INSN_FUNCTION_USAGE (insn), pic_offset_table_rtx);\n }\n \n@@ -5115,26 +5141,26 @@ override_options (void)\n \t then lowered by mips_rewrite_small_data.  */\n       mips_lo_relocs[SYMBOL_SMALL_DATA] = \"%gp_rel(\";\n \n-      mips_split_p[SYMBOL_GOT_LOCAL] = true;\n+      mips_split_p[SYMBOL_GOT_PAGE_OFST] = true;\n       if (TARGET_NEWABI)\n \t{\n \t  mips_lo_relocs[SYMBOL_GOTOFF_PAGE] = \"%got_page(\";\n-\t  mips_lo_relocs[SYMBOL_GOT_LOCAL] = \"%got_ofst(\";\n+\t  mips_lo_relocs[SYMBOL_GOT_PAGE_OFST] = \"%got_ofst(\";\n \t}\n       else\n \t{\n \t  mips_lo_relocs[SYMBOL_GOTOFF_PAGE] = \"%got(\";\n-\t  mips_lo_relocs[SYMBOL_GOT_LOCAL] = \"%lo(\";\n+\t  mips_lo_relocs[SYMBOL_GOT_PAGE_OFST] = \"%lo(\";\n \t}\n \n       if (TARGET_XGOT)\n \t{\n \t  /* The HIGH and LO_SUM are matched by special .md patterns.  */\n-\t  mips_split_p[SYMBOL_GOT_GLOBAL] = true;\n+\t  mips_split_p[SYMBOL_GOT_DISP] = true;\n \n-\t  mips_split_p[SYMBOL_GOTOFF_GLOBAL] = true;\n-\t  mips_hi_relocs[SYMBOL_GOTOFF_GLOBAL] = \"%got_hi(\";\n-\t  mips_lo_relocs[SYMBOL_GOTOFF_GLOBAL] = \"%got_lo(\";\n+\t  mips_split_p[SYMBOL_GOTOFF_DISP] = true;\n+\t  mips_hi_relocs[SYMBOL_GOTOFF_DISP] = \"%got_hi(\";\n+\t  mips_lo_relocs[SYMBOL_GOTOFF_DISP] = \"%got_lo(\";\n \n \t  mips_split_p[SYMBOL_GOTOFF_CALL] = true;\n \t  mips_hi_relocs[SYMBOL_GOTOFF_CALL] = \"%call_hi(\";\n@@ -5143,9 +5169,9 @@ override_options (void)\n       else\n \t{\n \t  if (TARGET_NEWABI)\n-\t    mips_lo_relocs[SYMBOL_GOTOFF_GLOBAL] = \"%got_disp(\";\n+\t    mips_lo_relocs[SYMBOL_GOTOFF_DISP] = \"%got_disp(\";\n \t  else\n-\t    mips_lo_relocs[SYMBOL_GOTOFF_GLOBAL] = \"%got(\";\n+\t    mips_lo_relocs[SYMBOL_GOTOFF_DISP] = \"%got(\";\n \t  mips_lo_relocs[SYMBOL_GOTOFF_CALL] = \"%call16(\";\n \t}\n     }\n@@ -7604,13 +7630,7 @@ mips_cannot_change_mode_class (enum machine_mode from,\n bool\n mips_dangerous_for_la25_p (rtx x)\n {\n-  rtx offset;\n-\n-  if (TARGET_EXPLICIT_RELOCS)\n-    return false;\n-\n-  split_const (x, &x, &offset);\n-  return global_got_operand (x, VOIDmode);\n+  return !TARGET_EXPLICIT_RELOCS && mips_ok_for_lazy_binding_p (x);\n }\n \n /* Implement PREFERRED_RELOAD_CLASS.  */"}, {"sha": "832b93bd05af781939f287aa90e26f28524479e1", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d", "patch": "@@ -3156,18 +3156,18 @@\n }\n   [(set_attr \"length\" \"24\")])\n \n-;; Insns to fetch a global symbol from a big GOT.\n+;; Insns to fetch a symbol from a big GOT.\n \n (define_insn_and_split \"*xgot_hi<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=d\")\n-\t(high:P (match_operand:P 1 \"global_got_operand\" \"\")))]\n+\t(high:P (match_operand:P 1 \"got_disp_operand\" \"\")))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_XGOT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0) (high:P (match_dup 2)))\n    (set (match_dup 0) (plus:P (match_dup 0) (match_dup 3)))]\n {\n-  operands[2] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_GLOBAL);\n+  operands[2] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_DISP);\n   operands[3] = pic_offset_table_rtx;\n }\n   [(set_attr \"got\" \"xgot_high\")\n@@ -3176,38 +3176,38 @@\n (define_insn_and_split \"*xgot_lo<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=d\")\n \t(lo_sum:P (match_operand:P 1 \"register_operand\" \"d\")\n-\t\t  (match_operand:P 2 \"global_got_operand\" \"\")))]\n+\t\t  (match_operand:P 2 \"got_disp_operand\" \"\")))]\n   \"TARGET_EXPLICIT_RELOCS && TARGET_XGOT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(unspec:P [(match_dup 1) (match_dup 3)] UNSPEC_LOAD_GOT))]\n-  { operands[3] = mips_unspec_address (operands[2], SYMBOL_GOTOFF_GLOBAL); }\n+  { operands[3] = mips_unspec_address (operands[2], SYMBOL_GOTOFF_DISP); }\n   [(set_attr \"got\" \"load\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;; Insns to fetch a global symbol from a normal GOT.\n+;; Insns to fetch a symbol from a normal GOT.\n \n (define_insn_and_split \"*got_disp<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=d\")\n-\t(match_operand:P 1 \"global_got_operand\" \"\"))]\n+\t(match_operand:P 1 \"got_disp_operand\" \"\"))]\n   \"TARGET_EXPLICIT_RELOCS && !TARGET_XGOT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(unspec:P [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n {\n   operands[2] = pic_offset_table_rtx;\n-  operands[3] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_GLOBAL);\n+  operands[3] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_DISP);\n }\n   [(set_attr \"got\" \"load\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-;; Insns for loading the high part of a local symbol.\n+;; Insns for loading the \"page\" part of a page/ofst address from the GOT.\n \n (define_insn_and_split \"*got_page<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=d\")\n-\t(high:P (match_operand:P 1 \"local_got_operand\" \"\")))]\n+\t(high:P (match_operand:P 1 \"got_page_ofst_operand\" \"\")))]\n   \"TARGET_EXPLICIT_RELOCS\"\n   \"#\"\n   \"&& reload_completed\""}, {"sha": "9f6cc955df2d4b1a2e1aa9d55bde5a3b6a61ced2", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=08e7ceb3d3d4d3763bdb5cfbb1dd0a78b27f0e5d", "patch": "@@ -118,7 +118,7 @@\n \t addressing.  */\n       return !TARGET_LONG_CALLS && !SYMBOL_REF_LONG_CALL_P (op);\n \n-    case SYMBOL_GOT_GLOBAL:\n+    case SYMBOL_GOT_DISP:\n       /* Without explicit relocs, there is no special syntax for\n \t loading the address of a call destination into a register.\n \t Using \"la $25,foo; jal $25\" would prevent the lazy binding\n@@ -237,18 +237,18 @@\n   return mips_symbolic_constant_p (op, &type) && type == SYMBOL_GENERAL;\n })\n \n-(define_predicate \"global_got_operand\"\n+(define_predicate \"got_disp_operand\"\n   (match_code \"const,symbol_ref,label_ref\")\n {\n   enum mips_symbol_type type;\n-  return mips_symbolic_constant_p (op, &type) && type == SYMBOL_GOT_GLOBAL;\n+  return mips_symbolic_constant_p (op, &type) && type == SYMBOL_GOT_DISP;\n })\n \n-(define_predicate \"local_got_operand\"\n+(define_predicate \"got_page_ofst_operand\"\n   (match_code \"const,symbol_ref,label_ref\")\n {\n   enum mips_symbol_type type;\n-  return mips_symbolic_constant_p (op, &type) && type == SYMBOL_GOT_LOCAL;\n+  return mips_symbolic_constant_p (op, &type) && type == SYMBOL_GOT_PAGE_OFST;\n })\n \n (define_predicate \"stack_operand\""}]}