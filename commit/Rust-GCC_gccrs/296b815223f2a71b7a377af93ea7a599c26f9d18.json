{"sha": "296b815223f2a71b7a377af93ea7a599c26f9d18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk2YjgxNTIyM2YyYTcxYjdhMzc3YWY5M2VhN2E1OTljMjZmOWQxOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-25T13:05:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-25T13:05:20Z"}, "message": "Warning fixes:\n\n        * Makefile.in (xcoffout.o): Depend on toplev.h, output.h and dbxout.h.\n        * config/fp-bit.c (_fpmul_parts): Move variables `x', `ylow',\n        `yhigh' and `bit' into the scope in which they are used.\n        (_fpdiv_parts): Remove unused variables `low', `high', `r0', `r1',\n        `y0', `y1', `q', `remainder', `carry', `d0' and `d1'.\n        * rs6000.c: Move include of output.h below tree.h.  Include toplev.h.\n        (any_operand): Mark unused parameters `op' and `mode' with\n        ATTRIBUTE_UNUSED.\n        (count_register_operand): Likewise for parameter `mode'.\n        (fpmem_operand): Likewise.\n        (short_cint_operand): Likewise.\n        (u_short_cint_operand): Likewise.\n        (non_short_cint_operand): Likewise.\n        (got_operand): Likewise.\n        (got_no_const_operand): Likewise.\n        (non_add_cint_operand): Likewise.\n        (non_logical_cint_operand): Likewise.\n        (mask_operand): Likewise.\n        (current_file_function_operand): Likewise.\n        (small_data_operand): Likewise for parameters `op' and `mode' but\n        only when !TARGET_ELF.\n        (init_cumulative_args): Mark parameters `libname' with\n        ATTRIBUTE_UNUSED.\n        (function_arg_pass_by_reference): Likewise for parameters `cum',\n        `mode' and `named'.\n        (expand_builtin_saveregs): Likewise for parameter `args'.\n        (load_multiple_operation): Likewise for parameter `mode'.\n        (store_multiple_operation): Likewise.\n        (branch_comparison_operator): Likewise.\n        (secondary_reload_class): Likewise.\n        (print_operand): Add parentheses around & operation.\n        (output_prolog): Mark parameter `size' with ATTRIBUTE_UNUSED.\n        (output_epilog): Likewise.  Cast argument to fprintf to int.\n        (rs6000_adjust_cost): Mark parameter `dep_insn' with ATTRIBUTE_UNUSED.\n        (rs6000_valid_decl_attribute_p): Likewise for parameters `decl',\n        `attributes', `identifier' and `args'.\n        (rs6000_valid_type_attribute_p): Likewise for parameter `attributes'.\n        (rs6000_comp_type_attributes): Likewise for parameters `type1' and\n        `type2'.\n        (rs6000_set_default_type_attributes): Likewise for parameter `type'.\n        * rs6000.h (RTX_COSTS): Add parentheses around & operation.\n        (toc_section, private_data_section, trap_comparison_operator): Add\n        prototypes.\n        * dbxout.h (dbxout_parms, dbxout_reg_parms, dbxout_syms): Add\n        prototypes.\n        * xcoffout.c: Include toplev.h, outout.h and dbxout.h.\n        * xcoffout.h (stab_to_sclass, xcoffout_begin_function,\n        xcoffout_begin_block, xcoffout_end_epilogue,\n        xcoffout_end_function, xcoffout_end_block,\n        xcoff_output_standard_types, xcoffout_declare_function,\n        xcoffout_source_line): Add prototypes.\n\nFrom-SVN: r20717", "tree": {"sha": "46beb37f2839d62c946c076177f97b2296d2fd97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46beb37f2839d62c946c076177f97b2296d2fd97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/296b815223f2a71b7a377af93ea7a599c26f9d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296b815223f2a71b7a377af93ea7a599c26f9d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296b815223f2a71b7a377af93ea7a599c26f9d18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296b815223f2a71b7a377af93ea7a599c26f9d18/comments", "author": null, "committer": null, "parents": [{"sha": "ff73fb53083105400e8c5bac8cee17e2580c9e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff73fb53083105400e8c5bac8cee17e2580c9e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff73fb53083105400e8c5bac8cee17e2580c9e3c"}], "stats": {"total": 196, "additions": 144, "deletions": 52}, "files": [{"sha": "6ff713faed12001bc22edbbf84a3f1e147990e83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=296b815223f2a71b7a377af93ea7a599c26f9d18", "patch": "@@ -1,3 +1,63 @@\n+Thu Jun 25 15:47:55 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (xcoffout.o): Depend on toplev.h, output.h and dbxout.h.\n+\n+\t* config/fp-bit.c (_fpmul_parts): Move variables `x', `ylow',\n+ \t`yhigh' and `bit' into the scope in which they are used.\n+\t(_fpdiv_parts): Remove unused variables `low', `high', `r0', `r1',\n+\t`y0', `y1', `q', `remainder', `carry', `d0' and `d1'.\n+\n+\t* rs6000.c: Move include of output.h below tree.h.  Include toplev.h.\n+\t(any_operand): Mark unused parameters `op' and `mode' with\n+\tATTRIBUTE_UNUSED. \n+\t(count_register_operand): Likewise for parameter `mode'.\n+\t(fpmem_operand): Likewise.\n+\t(short_cint_operand): Likewise.\n+\t(u_short_cint_operand): Likewise.\n+\t(non_short_cint_operand): Likewise.\n+\t(got_operand): Likewise.\n+\t(got_no_const_operand): Likewise.\n+\t(non_add_cint_operand): Likewise.\n+\t(non_logical_cint_operand): Likewise.\n+\t(mask_operand): Likewise.\n+\t(current_file_function_operand): Likewise.\n+\t(small_data_operand): Likewise for parameters `op' and `mode' but\n+\tonly when !TARGET_ELF.\n+\t(init_cumulative_args): Mark parameters `libname' with\n+ \tATTRIBUTE_UNUSED.\n+\t(function_arg_pass_by_reference): Likewise for parameters `cum',\n+\t`mode' and `named'.\n+\t(expand_builtin_saveregs): Likewise for parameter `args'.\n+\t(load_multiple_operation): Likewise for parameter `mode'.\n+\t(store_multiple_operation): Likewise.\n+\t(branch_comparison_operator): Likewise.\n+\t(secondary_reload_class): Likewise.\n+\t(print_operand): Add parentheses around & operation.\n+\t(output_prolog): Mark parameter `size' with ATTRIBUTE_UNUSED.\n+\t(output_epilog): Likewise.  Cast argument to fprintf to int.\n+\t(rs6000_adjust_cost): Mark parameter `dep_insn' with ATTRIBUTE_UNUSED.\n+\t(rs6000_valid_decl_attribute_p): Likewise for parameters `decl',\n+\t`attributes', `identifier' and `args'.\n+\t(rs6000_valid_type_attribute_p): Likewise for parameter `attributes'.\n+\t(rs6000_comp_type_attributes): Likewise for parameters `type1' and\n+\t`type2'.\n+\t(rs6000_set_default_type_attributes): Likewise for parameter `type'.\n+\n+\t* rs6000.h (RTX_COSTS): Add parentheses around & operation.\n+\t(toc_section, private_data_section, trap_comparison_operator): Add\n+\tprototypes.\n+\n+\t* dbxout.h (dbxout_parms, dbxout_reg_parms, dbxout_syms): Add\n+\tprototypes.\n+\n+\t* xcoffout.c: Include toplev.h, outout.h and dbxout.h.\n+\n+\t* xcoffout.h (stab_to_sclass, xcoffout_begin_function,\n+\txcoffout_begin_block, xcoffout_end_epilogue,\n+\txcoffout_end_function, xcoffout_end_block,\n+\txcoff_output_standard_types, xcoffout_declare_function,\n+\txcoffout_source_line): Add prototypes.\n+\n Thu Jun 25 09:54:55 1998  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/arm.h (REG_ALLOC_ORDER): Add ARG_POINTER_REGNUM,"}, {"sha": "dab02f6ee3042ef518875c780c31d58365e73db6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=296b815223f2a71b7a377af93ea7a599c26f9d18", "patch": "@@ -1409,7 +1409,7 @@ dwarf2out.o : dwarf2out.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) dwarf2.h \\\n    flags.h insn-config.h insn-codes.h reload.h output.h defaults.h \\\n    hard-reg-set.h regs.h expr.h toplev.h dwarf2out.h\n xcoffout.o : xcoffout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) xcoffout.h \\\n-   flags.h\n+   flags.h toplev.h output.h dbxout.h\n emit-rtl.o : emit-rtl.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    except.h function.h regs.h insn-config.h insn-codes.h $(RECOG_H) real.h \\\n    expr.h obstack.h hard-reg-set.h bitmap.h"}, {"sha": "ebb62cd84c0b8023791e7b94a76cede6c21919ea", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=296b815223f2a71b7a377af93ea7a599c26f9d18", "patch": "@@ -855,13 +855,13 @@ _fpmul_parts ( fp_number_type *  a,\n   /* Calculate the mantissa by multiplying both 64bit numbers to get a\n      128 bit number */\n   {\n-    fractype x = a->fraction.ll;\n-    fractype ylow = b->fraction.ll;\n-    fractype yhigh = 0;\n-    int bit;\n-\n #if defined(NO_DI_MODE)\n     {\n+      fractype x = a->fraction.ll;\n+      fractype ylow = b->fraction.ll;\n+      fractype yhigh = 0;\n+      int bit;\n+\n       /* ??? This does multiplies one bit at a time.  Optimize.  */\n       for (bit = 0; bit < FRAC_NBITS; bit++)\n \t{\n@@ -1000,14 +1000,10 @@ _fpdiv_parts (fp_number_type * a,\n \t      fp_number_type * b,\n \t      fp_number_type * tmp)\n {\n-  fractype low = 0;\n-  fractype high = 0;\n-  fractype r0, r1, y0, y1, bit;\n-  fractype q;\n+  fractype bit;\n   fractype numerator;\n   fractype denominator;\n   fractype quotient;\n-  fractype remainder;\n \n   if (isnan (a))\n     {\n@@ -1042,9 +1038,6 @@ _fpdiv_parts (fp_number_type * a,\n   /* Calculate the mantissa by multiplying both 64bit numbers to get a\n      128 bit number */\n   {\n-    int carry;\n-    intfrac d0, d1;\t\t/* weren't unsigned before ??? */\n-\n     /* quotient =\n        ( numerator / denominator) * 2^(numerator exponent -  denominator exponent)\n      */"}, {"sha": "a1a57ae78c9dd51cc72026fd4a6f370d92afc9a1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 42, "deletions": 36, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=296b815223f2a71b7a377af93ea7a599c26f9d18", "patch": "@@ -28,7 +28,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-config.h\"\n #include \"conditions.h\"\n #include \"insn-flags.h\"\n-#include \"output.h\"\n #include \"insn-attr.h\"\n #include \"flags.h\"\n #include \"recog.h\"\n@@ -37,6 +36,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"except.h\"\n #include \"function.h\"\n+#include \"output.h\"\n+#include \"toplev.h\"\n \n #ifndef TARGET_NO_PROTOTYPE\n #define TARGET_NO_PROTOTYPE 0\n@@ -420,8 +421,8 @@ direct_return ()\n \n int\n any_operand (op, mode)\n-     register rtx op;\n-     enum machine_mode mode;\n+     register rtx op ATTRIBUTE_UNUSED;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return 1;\n }\n@@ -430,7 +431,7 @@ any_operand (op, mode)\n int\n count_register_operand(op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != REG)\n     return 0;\n@@ -449,7 +450,7 @@ count_register_operand(op, mode)\n int\n fpmem_operand(op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != REG)\n     return 0;\n@@ -470,7 +471,7 @@ fpmem_operand(op, mode)\n int\n short_cint_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) < 0x10000);\n@@ -481,7 +482,7 @@ short_cint_operand (op, mode)\n int\n u_short_cint_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) == 0);\n@@ -492,7 +493,7 @@ u_short_cint_operand (op, mode)\n int\n non_short_cint_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) >= 0x10000);\n@@ -583,7 +584,7 @@ reg_or_cint_operand (op, mode)\n int\n got_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == SYMBOL_REF\n \t  || GET_CODE (op) == CONST\n@@ -596,7 +597,7 @@ got_operand (op, mode)\n int\n got_no_const_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == SYMBOL_REF || GET_CODE (op) == LABEL_REF);\n }\n@@ -841,7 +842,7 @@ add_operand (op, mode)\n int\n non_add_cint_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) >= 0x10000\n@@ -868,7 +869,7 @@ logical_operand (op, mode)\n int\n non_logical_cint_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (INTVAL (op) & (~ (HOST_WIDE_INT) 0xffff)) != 0\n@@ -905,7 +906,7 @@ mask_constant (c)\n int\n mask_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return GET_CODE (op) == CONST_INT && mask_constant (INTVAL (op));\n }\n@@ -1066,7 +1067,7 @@ call_operand (op, mode)\n int\n current_file_function_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == SYMBOL_REF\n \t  && (SYMBOL_REF_FLAG (op)\n@@ -1132,8 +1133,13 @@ input_operand (op, mode)\n \n int\n small_data_operand (op, mode)\n+#if TARGET_ELF\n      rtx op;\n      enum machine_mode mode;\n+#else\n+     rtx op ATTRIBUTE_UNUSED;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+#endif\n {\n #if TARGET_ELF\n   rtx sym_ref, const_part;\n@@ -1189,7 +1195,7 @@ void\n init_cumulative_args (cum, fntype, libname, incoming)\n      CUMULATIVE_ARGS *cum;\n      tree fntype;\n-     rtx libname;\n+     rtx libname ATTRIBUTE_UNUSED;\n      int incoming;\n {\n   static CUMULATIVE_ARGS zero_cumulative;\n@@ -1524,10 +1530,10 @@ function_arg_partial_nregs (cum, mode, type, named)\n \n int\n function_arg_pass_by_reference (cum, mode, type, named)\n-     CUMULATIVE_ARGS *cum;\n-     enum machine_mode mode;\n+     CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n      tree type;\n-     int named;\n+     int named ATTRIBUTE_UNUSED;\n {\n   if ((DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n       && type && AGGREGATE_TYPE_P (type))\n@@ -1652,7 +1658,7 @@ setup_incoming_varargs (cum, mode, type, pretend_size, no_rtl)\n \n struct rtx_def *\n expand_builtin_saveregs (args)\n-     tree args;\n+     tree args ATTRIBUTE_UNUSED;\n {\n   return virtual_incoming_args_rtx;\n }\n@@ -1899,7 +1905,7 @@ expand_block_move (operands)\n int\n load_multiple_operation (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   int count = XVECLEN (op, 0);\n   int dest_regno;\n@@ -1942,7 +1948,7 @@ load_multiple_operation (op, mode)\n int\n store_multiple_operation (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   int count = XVECLEN (op, 0) - 1;\n   int src_regno;\n@@ -1985,7 +1991,7 @@ store_multiple_operation (op, mode)\n int\n branch_comparison_operator (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   enum rtx_code code = GET_CODE (op);\n   enum machine_mode cc_mode;\n@@ -2165,7 +2171,7 @@ addrs_ok_for_quad_peep (addr1, addr2)\n enum reg_class\n secondary_reload_class (class, mode, in)\n      enum reg_class class;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n      rtx in;\n {\n   int regno = true_regnum (in);\n@@ -2534,7 +2540,7 @@ print_operand (file, x, code)\n     case 'B':\n       /* If the low-order bit is zero, write 'r'; otherwise, write 'l'\n \t for 64-bit mask direction.  */\n-      putc ((INT_LOWPART(x) & 1 == 0 ? 'r' : 'l'), file);\n+      putc (((INT_LOWPART(x) & 1) == 0 ? 'r' : 'l'), file);\n \n     case 'C':\n       /* This is an optional cror needed for LE or GE floating-point\n@@ -3798,7 +3804,7 @@ rs6000_allocate_stack_space (file, size, copy_r12)\n void\n output_prolog (file, size)\n      FILE *file;\n-     int size;\n+     int size ATTRIBUTE_UNUSED;\n {\n   rs6000_stack_t *info = rs6000_stack_info ();\n   int reg_size = info->reg_size;\n@@ -4054,7 +4060,7 @@ output_prolog (file, size)\n void\n output_epilog (file, size)\n      FILE *file;\n-     int size;\n+     int size ATTRIBUTE_UNUSED;\n {\n   rs6000_stack_t *info = rs6000_stack_info ();\n   char *load_reg = (TARGET_32BIT) ? \"\\t{l|lwz} %s,%d(%s)\\n\" : \"\\tld %s,%d(%s)\\n\";\n@@ -4337,7 +4343,7 @@ output_epilog (file, size)\n       /* Omit this list of longs, because there are no CTL anchors.  */\n \n       /* Length of function name.  */\n-      fprintf (file, \"\\t.short %d\\n\", strlen (fname));\n+      fprintf (file, \"\\t.short %d\\n\", (int) strlen (fname));\n \n       /* Function name.  */\n       assemble_string (fname, strlen (fname));\n@@ -4757,7 +4763,7 @@ int\n rs6000_adjust_cost (insn, link, dep_insn, cost)\n      rtx insn;\n      rtx link;\n-     rtx dep_insn;\n+     rtx dep_insn ATTRIBUTE_UNUSED;\n      int cost;\n {\n   if (! recog_memoized (insn))\n@@ -4979,10 +4985,10 @@ rs6000_initialize_trampoline (addr, fnaddr, cxt)\n \n int\n rs6000_valid_decl_attribute_p (decl, attributes, identifier, args)\n-     tree decl;\n-     tree attributes;\n-     tree identifier;\n-     tree args;\n+     tree decl ATTRIBUTE_UNUSED;\n+     tree attributes ATTRIBUTE_UNUSED;\n+     tree identifier ATTRIBUTE_UNUSED;\n+     tree args ATTRIBUTE_UNUSED;\n {\n   return 0;\n }\n@@ -4994,7 +5000,7 @@ rs6000_valid_decl_attribute_p (decl, attributes, identifier, args)\n int\n rs6000_valid_type_attribute_p (type, attributes, identifier, args)\n      tree type;\n-     tree attributes;\n+     tree attributes ATTRIBUTE_UNUSED;\n      tree identifier;\n      tree args;\n {\n@@ -5063,8 +5069,8 @@ rs6000_valid_type_attribute_p (type, attributes, identifier, args)\n \n int\n rs6000_comp_type_attributes (type1, type2)\n-     tree type1;\n-     tree type2;\n+     tree type1 ATTRIBUTE_UNUSED;\n+     tree type2 ATTRIBUTE_UNUSED;\n {\n   return 1;\n }\n@@ -5074,7 +5080,7 @@ rs6000_comp_type_attributes (type1, type2)\n \n void\n rs6000_set_default_type_attributes (type)\n-     tree type;\n+     tree type ATTRIBUTE_UNUSED;\n {\n }\n "}, {"sha": "4559d9ca3ea8add408133acf3f4190f06c1ef9a6", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=296b815223f2a71b7a377af93ea7a599c26f9d18", "patch": "@@ -2183,15 +2183,15 @@ do {                                                                    \\\n     return ((GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\\\n \t     && ((unsigned HOST_WIDE_INT) (INTVAL (XEXP (X, 1))\t\t\\\n \t\t\t\t\t   + 0x8000) >= 0x10000)\t\\\n-\t     && (INTVAL (XEXP (X, 1)) & 0xffff != 0))\t\t\t\\\n+\t     && ((INTVAL (XEXP (X, 1)) & 0xffff) != 0))\t\t\t\\\n \t    ? COSTS_N_INSNS (2)\t\t\t\t\t\t\\\n \t    : COSTS_N_INSNS (1));\t\t\t\t\t\\\n   case AND:\t\t\t\t\t\t\t\t\\\n   case IOR:\t\t\t\t\t\t\t\t\\\n   case XOR:\t\t\t\t\t\t\t\t\\\n     return ((GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\\\n \t     && (INTVAL (XEXP (X, 1)) & (~ (HOST_WIDE_INT) 0xffff)) != 0 \\\n-\t     && (INTVAL (XEXP (X, 1)) & 0xffff != 0))\t\t\t\\\n+\t     && ((INTVAL (XEXP (X, 1)) & 0xffff) != 0))\t\t\t\\\n \t    ? COSTS_N_INSNS (2)\t\t\t\t\t\t\\\n \t    : COSTS_N_INSNS (1));\t\t\t\t\t\\\n   case MULT:\t\t\t\t\t\t\t\t\\\n@@ -3240,6 +3240,9 @@ extern void rs6000_set_default_type_attributes ();\n extern struct rtx_def *rs6000_dll_import_ref ();\n extern struct rtx_def *rs6000_longcall_ref ();\n extern int function_arg_padding ();\n+extern void toc_section ();\n+extern void private_data_section ();\n+extern int trap_comparison_operator ();\n \n /* See nonlocal_goto_receiver for when this must be set.  */\n "}, {"sha": "1e45fa624cbc92dcf48076e3c9bb3171de6660ac", "filename": "gcc/dbxout.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fdbxout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fdbxout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.h?ref=296b815223f2a71b7a377af93ea7a599c26f9d18", "patch": "@@ -25,6 +25,9 @@ extern void dbxout_start_new_source_file \tPROTO ((char *));\n extern void dbxout_resume_previous_source_file\tPROTO ((void));\n \n extern void dbxout_symbol\t\tPROTO ((tree, int));\n+extern void dbxout_parms\t\tPROTO ((tree));\n+extern void dbxout_reg_parms\t\tPROTO ((tree));\n+extern void dbxout_syms\t\t\tPROTO ((tree));\n extern void dbxout_function\t\tPROTO ((tree));\n extern void dbxout_source_line\t\tPROTO ((FILE *, char*, int));\n extern void dbxout_begin_function\tPROTO ((tree));"}, {"sha": "ebbd9c6c4ff960ff43b1e0b4238553325bf8da02", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=296b815223f2a71b7a377af93ea7a599c26f9d18", "patch": "@@ -29,13 +29,16 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"flags.h\"\n+#include \"toplev.h\"\n+#include \"output.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n \n /* This defines the C_* storage classes.  */\n #include <dbxstclass.h>\n \n #include \"xcoffout.h\"\n+#include \"dbxout.h\"\n \n #if defined (USG) || !defined (HAVE_STAB_H)\n #include \"gstab.h\""}, {"sha": "2781a790324912bf8dc28ad4cde557486bc71f1d", "filename": "gcc/xcoffout.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fxcoffout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296b815223f2a71b7a377af93ea7a599c26f9d18/gcc%2Fxcoffout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.h?ref=296b815223f2a71b7a377af93ea7a599c26f9d18", "patch": "@@ -166,3 +166,27 @@ extern char *xcoff_lastfile;\n    can't find them.  */\n \n #define DEBUG_SYMS_TEXT\n+\n+/* Prototype functions in xcoffout.c. */\n+\n+extern int stab_to_sclass\t\t\tPROTO ((int));\n+#ifdef BUFSIZ\n+extern void xcoffout_begin_function\t\tPROTO ((FILE *, int));\n+extern void xcoffout_begin_block\t\tPROTO ((FILE *, int, int));\n+extern void xcoffout_end_epilogue\t\tPROTO ((FILE *));\n+extern void xcoffout_end_function\t\tPROTO ((FILE *, int));\n+extern void xcoffout_end_block\t\t\tPROTO ((FILE *, int, int));\n+#endif /* BUFSIZ */\n+\n+#ifdef TREE_CODE\n+extern void xcoff_output_standard_types\t\tPROTO ((tree));\n+#ifdef BUFSIZ\n+extern void xcoffout_declare_function\t\tPROTO ((FILE *, tree, char *));\n+#endif /* BUFSIZ */\n+#endif /* TREE_CODE */\n+\n+#ifdef RTX_CODE\n+#ifdef BUFSIZ\n+extern void xcoffout_source_line\t\tPROTO ((FILE *, char *, rtx));\n+#endif /* BUFSIZ */\n+#endif /* RTX_CODE */"}]}