{"sha": "61d0346df824fbdb9f290a8e42c87025bfd03783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFkMDM0NmRmODI0ZmJkYjlmMjkwYThlNDJjODcwMjViZmQwMzc4Mw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-08-18T17:35:58Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-08-18T17:35:58Z"}, "message": "cpphash.h: Use HAVE_DESIGNATED_INITIALIZERS.\n\n\t* cpphash.h: Use HAVE_DESIGNATED_INITIALIZERS.\n\t(_cpp_trigraph_map): Declaration moved from cpplex.c\n\n\t* cppinit.c: Define _cpp_trigraph_map.  Use UCHAR_MAX + 1\n\tinstead\tof 256.  Use consistent test for designated initializers.\n\t(cpp_init): Initialize trigraph_map.\n\t(initialize_standard_includes, parse_option):  Use memcmp\n\tinstead of strncmp.\n\n\t* cpplex.c (init_trigraph_map): Remove.\n\t(trigraph_ok, trigraph_replace, lex_line): Refer to\n\t_cpp_trigraph_map.\n\n\t* cpplib.c (str_match, WARNING, ERROR, ICE): Delete.\n\t(do_unassert): Remove unused \"next\" local.\n\n\t* system.h (HAVE_DESIGNATED_INITIALIZERS): New prototype.\n\nFrom-SVN: r35789", "tree": {"sha": "f25ad3759703df13e0d6b40b621ea7e6d2e1dd18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f25ad3759703df13e0d6b40b621ea7e6d2e1dd18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61d0346df824fbdb9f290a8e42c87025bfd03783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61d0346df824fbdb9f290a8e42c87025bfd03783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61d0346df824fbdb9f290a8e42c87025bfd03783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61d0346df824fbdb9f290a8e42c87025bfd03783/comments", "author": null, "committer": null, "parents": [{"sha": "90d14f40a9c1d85bee827d94ce8f9bab8acb192c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d14f40a9c1d85bee827d94ce8f9bab8acb192c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d14f40a9c1d85bee827d94ce8f9bab8acb192c"}], "stats": {"total": 125, "additions": 69, "deletions": 56}, "files": [{"sha": "57f512cf6020cc8a2947ff8cf73aa244a5dd37a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61d0346df824fbdb9f290a8e42c87025bfd03783", "patch": "@@ -1,3 +1,23 @@\n+Fri 18-Aug-2000 18:33:45 BST  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cpphash.h: Use HAVE_DESIGNATED_INITIALIZERS.\n+\t(_cpp_trigraph_map): Declaration moved from cpplex.c\n+\n+\t* cppinit.c: Define _cpp_trigraph_map.  Use UCHAR_MAX + 1\n+\tinstead\tof 256.  Use consistent test for designated initializers.\n+\t(cpp_init): Initialize trigraph_map.\n+\t(initialize_standard_includes, parse_option):  Use memcmp\n+\tinstead of strncmp.\n+\n+\t* cpplex.c (init_trigraph_map): Remove.\n+\t(trigraph_ok, trigraph_replace, lex_line): Refer to\n+\t_cpp_trigraph_map.\n+\n+\t* cpplib.c (str_match, WARNING, ERROR, ICE): Delete.\n+\t(do_unassert): Remove unused \"next\" local.\n+\n+\t* system.h (HAVE_DESIGNATED_INITIALIZERS): New prototype.\n+\n 2000-08-18  Emmanuel Marty  <emarty@suntech.fr>\n \n \t* arm/lib1funcs.asm (_umodsi3 THUMB VARIANT): Restore deleted return"}, {"sha": "b2f5c1dd6199e6d7b0f735c5b2d79534d2b06dc2", "filename": "gcc/cpphash.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=61d0346df824fbdb9f290a8e42c87025bfd03783", "patch": "@@ -165,13 +165,15 @@ struct spec_nodes\n #define is_nvspace(x)\t((_cpp_IStable[x] & (ISspace | ISvspace)) == ISspace)\n #define is_space(x)\t(_cpp_IStable[x] & ISspace)\n \n-/* This table is constant if it can be initialized at compile time,\n+/* These tables are constant if they can be initialized at compile time,\n    which is the case if cpp was compiled with GCC >=2.7, or another\n    compiler that supports C99.  */\n-#if (GCC_VERSION >= 2007) || (__STDC_VERSION__ >= 199901L)\n-extern const unsigned char _cpp_IStable[256];\n+#if HAVE_DESIGNATED_INITIALIZERS\n+extern const unsigned char _cpp_IStable[UCHAR_MAX + 1];\n+extern const unsigned char _cpp_trigraph_map[UCHAR_MAX + 1];\n #else\n-extern unsigned char _cpp_IStable[256];\n+extern unsigned char _cpp_IStable[UCHAR_MAX + 1];\n+extern unsigned char _cpp_trigraph_map[UCHAR_MAX + 1];\n #endif\n \n /* Macros.  */"}, {"sha": "c8a06e8afa270b2ed3b980c87c9348f5a9fadf41", "filename": "gcc/cppinit.c", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=61d0346df824fbdb9f290a8e42c87025bfd03783", "patch": "@@ -119,21 +119,34 @@ static int parse_option\t\t\tPARAMS ((const char *));\n /* Fourth argument to append_include_chain: chain to use */\n enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };\n \n-/* If we have designated initializers (GCC >2.7) this table can be\n-   initialized, constant data.  Otherwise, it has to be filled in at\n+/* If we have designated initializers (GCC >2.7) these tables can be\n+   initialized, constant data.  Otherwise, they have to be filled in at\n    runtime.  */\n+#if HAVE_DESIGNATED_INITIALIZERS\n \n-#if (GCC_VERSION >= 2007)\n #define init_IStable()  /* nothing */\n-#define ISTABLE __extension__ const unsigned char _cpp_IStable[256] = {\n+#define ISTABLE __extension__ const U_CHAR _cpp_IStable[UCHAR_MAX + 1] = {\n+\n+#define init_trigraph_map()  /* nothing */\n+#define TRIGRAPH_MAP \\\n+__extension__ const U_CHAR _cpp_trigraph_map[UCHAR_MAX + 1] = {\n+\n #define END };\n #define s(p, v) [p] = v,\n+\n #else\n-#define ISTABLE unsigned char _cpp_IStable[256] = { 0 }; \\\n+\n+#define ISTABLE unsigned char _cpp_IStable[UCHAR_MAX + 1] = { 0 }; \\\n  static void init_IStable PARAMS ((void)) { \\\n  unsigned char *x = _cpp_IStable;\n+\n+#define TRIGRAPH_MAP U_CHAR _cpp_trigraph_map[UCHAR_MAX + 1] = { 0 }; \\\n+ static void init_trigraph_map PARAMS ((void)) { \\\n+ unsigned char *x = _cpp_trigraph_map;\n+\n #define END }\n #define s(p, v) x[p] = v;\n+\n #endif\n \n #define A(x) s(x, ISidnum|ISidstart)\n@@ -162,6 +175,12 @@ ISTABLE\n   S('\\0') S('\\v') S('\\f')\n END\n \n+TRIGRAPH_MAP\n+  s('=', '#')\ts(')', ']')\ts('!', '|')\n+  s('(', '[')\ts('\\'', '^')\ts('>', '}')\n+  s('/', '\\\\')\ts('<', '{')\ts('-', '~')\n+END\n+\n #undef A\n #undef N\n #undef H\n@@ -170,6 +189,7 @@ END\n #undef s\n #undef ISTABLE\n #undef END\n+#undef TRIGRAPH_MAP\n \n /* Given a colon-separated list of file names PATH,\n    add all the names to the search path for include files.  */\n@@ -386,6 +406,10 @@ cpp_init (void)\n   qsort (cl_options, N_OPTS, sizeof (struct cl_option), opt_comp);\n #endif\n \n+  /* Set up the trigraph map for trigraph_ok, trigraph_replace and\n+     lex_line.  */\n+  init_trigraph_map ();\n+\n   /* Set up the IStable.  This doesn't do anything if we were compiled\n      with a compiler that supports C99 designated initializers.  */\n   init_IStable ();\n@@ -720,7 +744,7 @@ initialize_standard_includes (pfile)\n \t\t  && !CPP_OPTION (pfile, no_standard_cplusplus_includes)))\n \t    {\n \t      /* Does this dir start with the prefix?  */\n-\t      if (!strncmp (p->fname, default_prefix, default_len))\n+\t      if (!memcmp (p->fname, default_prefix, default_len))\n \t\t{\n \t\t  /* Yes; change prefix and add to search list.  */\n \t\t  int flen = strlen (p->fname);\n@@ -1087,7 +1111,7 @@ parse_option (input)\n       md = (mn + mx) / 2;\n \n       opt_len = cl_options[md].opt_len;\n-      comp = strncmp (input, cl_options[md].opt_text, opt_len);\n+      comp = memcmp (input, cl_options[md].opt_text, opt_len);\n \n       if (comp > 0)\n \tmn = md + 1;\n@@ -1112,7 +1136,7 @@ parse_option (input)\n \t      for (; mn < N_OPTS; mn++)\n \t\t{\n \t\t  opt_len = cl_options[mn].opt_len;\n-\t\t  if (strncmp (input, cl_options[mn].opt_text, opt_len))\n+\t\t  if (memcmp (input, cl_options[mn].opt_text, opt_len))\n \t\t    break;\n \t\t  if (input[opt_len] == '\\0')\n \t\t    return mn;"}, {"sha": "7ab850bfa2276f1402fe87337a9c09606906c774", "filename": "gcc/cpplex.c", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=61d0346df824fbdb9f290a8e42c87025bfd03783", "patch": "@@ -25,7 +25,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n Cleanups to do:-\n \n o Check line numbers assigned to all errors.\n-o Replace strncmp with memcmp almost everywhere.\n o lex_line's use of cur_token, flags and list->token_used is a bit opaque.\n o Distinguish integers, floats, and 'other' pp-numbers.\n o Store ints and char constants as binary values.\n@@ -226,34 +225,6 @@ _cpp_token_spellings [N_TTYPES] = {TTYPE_TABLE };\n #undef OP\n #undef TK\n \n-/* The following table is used by trigraph_ok/trigraph_replace.  If we\n-   have designated initializers, it can be constant data; otherwise,\n-   it is set up at runtime by _cpp_init_input_buffer.  */\n-\n-#if (GCC_VERSION >= 2007)\n-#define init_trigraph_map()  /* nothing */\n-#define TRIGRAPH_MAP \\\n-__extension__ static const U_CHAR trigraph_map[UCHAR_MAX + 1] = {\n-#define END };\n-#define s(p, v) [p] = v,\n-#else\n-#define TRIGRAPH_MAP static U_CHAR trigraph_map[UCHAR_MAX + 1] = { 0 }; \\\n- static void init_trigraph_map PARAMS ((void)) { \\\n- unsigned char *x = trigraph_map;\n-#define END }\n-#define s(p, v) x[p] = v;\n-#endif\n-\n-TRIGRAPH_MAP\n-  s('=', '#')\ts(')', ']')\ts('!', '|')\n-  s('(', '[')\ts('\\'', '^')\ts('>', '}')\n-  s('/', '\\\\')\ts('<', '{')\ts('-', '~')\n-END\n-\n-#undef TRIGRAPH_MAP\n-#undef END\n-#undef s\n-\n /* Notify the compiler proper that the current line number has jumped,\n    or the current file name has changed.  */\n \n@@ -748,7 +719,7 @@ trigraph_ok (pfile, end)\n       if (accept)\n \tcpp_warning_with_line (pfile, pfile->buffer->lineno, col, \n \t\t\t       \"trigraph ??%c converted to %c\",\n-\t\t\t       (int) *end, (int) trigraph_map[*end]);\n+\t\t\t       (int) *end, (int) _cpp_trigraph_map[*end]);\n       else\n \tcpp_warning_with_line (pfile, pfile->buffer->lineno, col,\n \t\t\t       \"trigraph ??%c ignored\", (int) *end);\n@@ -786,7 +757,7 @@ trigraph_replace (pfile, src, limit)\n \tcontinue;\n \n       /* Check if it really is a trigraph.  */\n-      if (trigraph_map[src[2]] == 0)\n+      if (_cpp_trigraph_map[src[2]] == 0)\n \tcontinue;\n \n       dest = src;\n@@ -797,12 +768,12 @@ trigraph_replace (pfile, src, limit)\n   /* Now we have a trigraph, we need to scan the remaining buffer, and\n      copy-shifting its contents left if replacement is enabled.  */\n   for (; src + 2 < limit; dest++, src++)\n-    if ((*dest = *src) == '?' && src[1] == '?' && trigraph_map[src[2]])\n+    if ((*dest = *src) == '?' && src[1] == '?' && _cpp_trigraph_map[src[2]])\n       {\n       trigraph_found:\n \tsrc += 2;\n \tif (trigraph_ok (pfile, pfile->buffer->cur - (limit - src)))\n-\t  *dest = trigraph_map[*src];\n+\t  *dest = _cpp_trigraph_map[*src];\n       }\n   \n   /* Copy remaining (at most 2) characters.  */\n@@ -1713,7 +1684,7 @@ lex_line (pfile, list)\n \n \tcase '?':\n \t  if (cur + 1 < buffer->rlimit && *cur == '?'\n-\t      && trigraph_map[cur[1]] && trigraph_ok (pfile, cur + 1))\n+\t      && _cpp_trigraph_map[cur[1]] && trigraph_ok (pfile, cur + 1))\n \t    {\n \t      /* Handle trigraph.  */\n \t      cur++;\n@@ -3536,7 +3507,7 @@ special_symbol (pfile, node, token)\n }\n #undef DSC\n \n-/* Allocate pfile->input_buffer, and initialize trigraph_map[]\n+/* Allocate pfile->input_buffer, and initialize _cpp_trigraph_map[]\n    if it hasn't happened already.  */\n \n void\n@@ -3545,7 +3516,6 @@ _cpp_init_input_buffer (pfile)\n {\n   cpp_context *base;\n \n-  init_trigraph_map ();\n   _cpp_init_toklist (&pfile->token_list, DUMMY_TOKEN);\n   pfile->no_expand_level = UINT_MAX;\n   pfile->context_cap = 20;"}, {"sha": "5dd1697e7c5efc351e4cc91603c18feba40206b5", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=61d0346df824fbdb9f290a8e42c87025bfd03783", "patch": "@@ -61,10 +61,6 @@ static cpp_hashnode *\n \t    get_define_node\tPARAMS ((cpp_reader *));\n static void unwind_if_stack\tPARAMS ((cpp_reader *, cpp_buffer *));\n \n-/* Utility.  */\n-#define str_match(sym, len, str) \\\n-((len) == (sizeof (str) - 1) && !ustrncmp ((sym), U(str), sizeof (str) - 1))\n-\n /* This is the table of directive handlers.  It is ordered by\n    frequency of occurrence; the numbers at the end are directive\n    counts from all the source code I have lying around (egcs and libc\n@@ -1308,9 +1304,6 @@ _cpp_find_answer (node, candidate)\n   return result;\n }\n \n-#define WARNING(msgid) do { cpp_warning(pfile, msgid); goto error; } while (0)\n-#define ERROR(msgid) do { cpp_error(pfile, msgid); goto error; } while (0)\n-#define ICE(msgid) do { cpp_ice(pfile, msgid); goto error; } while (0)\n static void\n do_assert (pfile)\n      cpp_reader *pfile;\n@@ -1346,7 +1339,7 @@ do_unassert (pfile)\n      cpp_reader *pfile;\n {\n   cpp_hashnode *node;\n-  struct answer *answer, *temp, *next;\n+  struct answer *answer, *temp;\n   \n   node = _cpp_parse_assertion (pfile, &answer);\n   if (node)"}, {"sha": "066c80561ba0ba161ff9ffa2ab149433b2dd0210", "filename": "gcc/system.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61d0346df824fbdb9f290a8e42c87025bfd03783/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=61d0346df824fbdb9f290a8e42c87025bfd03783", "patch": "@@ -464,6 +464,10 @@ extern int setrlimit PARAMS ((int, const struct rlimit *));\n extern void abort PARAMS ((void));\n #endif\n \n+/* 1 if we have C99 designated initializers.  */\n+#define HAVE_DESIGNATED_INITIALIZERS \\\n+  ((GCC_VERSION >= 2007) || (__STDC_VERSION__ >= 199901L))\n+\n /* Define a STRINGIFY macro that's right for ANSI or traditional C.\n    Note: if the argument passed to STRINGIFY is itself a macro, eg\n    #define foo bar, STRINGIFY(foo) will produce \"foo\", not \"bar\"."}]}