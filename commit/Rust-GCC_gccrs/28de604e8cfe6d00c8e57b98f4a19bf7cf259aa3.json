{"sha": "28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkZTYwNGU4Y2ZlNmQwMGM4ZTU3Yjk4ZjRhMTliZjdjZjI1OWFhMw==", "commit": {"author": {"name": "Rodolfo Lima", "email": "rodolfo@rodsoft.org", "date": "2010-03-19T13:32:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-19T13:32:05Z"}, "message": "shared_ptr.h (shared_ptr(unique_ptr&&), [...]): Remove explicit specifier (as per DR 925).\n\n2010-03-19  Rodolfo Lima  <rodolfo@rodsoft.org>\n\n\t* include/bits/shared_ptr.h (shared_ptr(unique_ptr&&),\n\tshared_ptr(auto_ptr&&)): Remove explicit specifier (as per DR 925).\n\t* include/bits/shared_ptr_base.h: Likewise.\n\t* testsuite/20_util/shared_ptr/creation/dr925.cc: New.\n\nFrom-SVN: r157570", "tree": {"sha": "b4f81593ecde1371504930456b5f7ca5884c0007", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4f81593ecde1371504930456b5f7ca5884c0007"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3/comments", "author": {"login": "rodsoft", "id": 7049231, "node_id": "MDQ6VXNlcjcwNDkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7049231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodsoft", "html_url": "https://github.com/rodsoft", "followers_url": "https://api.github.com/users/rodsoft/followers", "following_url": "https://api.github.com/users/rodsoft/following{/other_user}", "gists_url": "https://api.github.com/users/rodsoft/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodsoft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodsoft/subscriptions", "organizations_url": "https://api.github.com/users/rodsoft/orgs", "repos_url": "https://api.github.com/users/rodsoft/repos", "events_url": "https://api.github.com/users/rodsoft/events{/privacy}", "received_events_url": "https://api.github.com/users/rodsoft/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a0b1aa4c117e064a0d9e3f92e7c3e9f56d43a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0b1aa4c117e064a0d9e3f92e7c3e9f56d43a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0b1aa4c117e064a0d9e3f92e7c3e9f56d43a8a"}], "stats": {"total": 108, "additions": 102, "deletions": 6}, "files": [{"sha": "388b3cc7fc990b3e257d113743d5ca15709258a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3", "patch": "@@ -1,3 +1,10 @@\n+2010-03-19  Rodolfo Lima  <rodolfo@rodsoft.org>\n+\n+\t* include/bits/shared_ptr.h (shared_ptr(unique_ptr&&),\n+\tshared_ptr(auto_ptr&&)): Remove explicit specifier (as per DR 925).\n+\t* include/bits/shared_ptr_base.h: Likewise.\n+\t* testsuite/20_util/shared_ptr/creation/dr925.cc: New.\n+\n 2010-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/random.tcc: Minor formatting changes."}, {"sha": "5e1960012c9ef7777dab1a80b713b9a8208f4977", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3", "patch": "@@ -204,13 +204,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n #if _GLIBCXX_DEPRECATED\n       template<typename _Tp1>\n-\texplicit\n \tshared_ptr(std::auto_ptr<_Tp1>&& __r)\n \t: __shared_ptr<_Tp>(std::move(__r)) { }\n #endif\n \n       template<typename _Tp1, typename _Del>\n-\texplicit shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)\n+\tshared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)\n \t: __shared_ptr<_Tp>(std::move(__r)) { }\n \n       template<typename _Tp1>"}, {"sha": "1999f36023bbed0fccd9a0be9e3a258e1c9be26b", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3", "patch": "@@ -316,14 +316,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if _GLIBCXX_DEPRECATED\n       // Special case for auto_ptr<_Tp> to provide the strong guarantee.\n       template<typename _Tp>\n-\texplicit __shared_count(std::auto_ptr<_Tp>&& __r)\n+\t__shared_count(std::auto_ptr<_Tp>&& __r)\n \t: _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))\n \t{ __r.release(); }\n #endif\n \n       // Special case for unique_ptr<_Tp,_Del> to provide the strong guarantee.\n       template<typename _Tp, typename _Del>\n-\texplicit __shared_count(std::unique_ptr<_Tp, _Del>&& __r)\n+\t__shared_count(std::unique_ptr<_Tp, _Del>&& __r)\n \t: _M_pi(_S_create_from_up(std::move(__r)))\n \t{ __r.release(); }\n \n@@ -608,7 +608,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       // If an exception is thrown this constructor has no effect.\n       template<typename _Tp1, typename _Del>\n-\texplicit __shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)\n+\t__shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)\n \t: _M_ptr(__r.get()), _M_refcount()\n \t{\n \t  __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>)\n@@ -620,7 +620,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #if _GLIBCXX_DEPRECATED\n       // Postcondition: use_count() == 1 and __r.get() == 0\n       template<typename _Tp1>\n-\texplicit __shared_ptr(std::auto_ptr<_Tp1>&& __r)\n+\t__shared_ptr(std::auto_ptr<_Tp1>&& __r)\n \t: _M_ptr(__r.get()), _M_refcount()\n \t{\n \t  __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>)"}, {"sha": "db176650e0b24e5a1342c9e54602666fecc0d8e1", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/creation/dr925.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fdr925.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fdr925.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2Fdr925.cc?ref=28de604e8cfe6d00c8e57b98f4a19bf7cf259aa3", "patch": "@@ -0,0 +1,90 @@\n+// { dg-options \"-std=gnu++0x -Wno-deprecated\" }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.11.2 Template class shared_ptr [util.smartptr.shared]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A\n+{\n+};\n+\n+std::unique_ptr<A> \n+create_unique_ptr()\n+{\n+  return std::unique_ptr<A>(new A());\n+}\n+\n+std::auto_ptr<A> \n+create_auto_ptr()\n+{\n+  return std::auto_ptr<A>(new A());\n+}\n+\n+void \n+process(std::shared_ptr<A> a)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( a.get() != 0 );\n+  VERIFY( a.use_count() == 1 );\n+}\n+\n+// 20.9.11.2.1 shared_ptr creation [util.smartptr.shared.const]\n+\n+// Implicit conversion of auto_ptr to shared_ptr is allowed\n+\n+void\n+test01()\n+{\n+  process(create_auto_ptr());\n+}\n+\n+void\n+test02()\n+{\n+  std::auto_ptr<A> a = create_auto_ptr();\n+  process(std::move(a));\n+}\n+\n+// Implicit conversion of unique_ptr to shared_ptr is allowed\n+\n+void\n+test03()\n+{\n+  process(create_unique_ptr());\n+}\n+\n+void\n+test04()\n+{\n+  std::unique_ptr<A> a = create_unique_ptr();\n+  process(std::move(a));\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  return 0;\n+}"}]}