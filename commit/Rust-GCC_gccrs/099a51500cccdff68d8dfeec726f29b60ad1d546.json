{"sha": "099a51500cccdff68d8dfeec726f29b60ad1d546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk5YTUxNTAwY2NjZGZmNjhkOGRmZWVjNzI2ZjI5YjYwYWQxZDU0Ng==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-11-06T05:35:53Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-11-06T05:35:53Z"}, "message": "lex.h (JAVA_FLOAT_RANGE_ERROR): Typo fix.\n\n\t* lex.h (JAVA_FLOAT_RANGE_ERROR): Typo fix.\n\t* lex.c (IS_ZERO): New define.\n\t(java_perform_atof): Error on floating point underflow.\n\nFrom-SVN: r37269", "tree": {"sha": "e88453b5e6bdbc6ca750c761f042b84588f3f601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e88453b5e6bdbc6ca750c761f042b84588f3f601"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/099a51500cccdff68d8dfeec726f29b60ad1d546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/099a51500cccdff68d8dfeec726f29b60ad1d546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/099a51500cccdff68d8dfeec726f29b60ad1d546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/099a51500cccdff68d8dfeec726f29b60ad1d546/comments", "author": null, "committer": null, "parents": [{"sha": "f83c165658cdd9d8d658426f3b066b820113d6e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83c165658cdd9d8d658426f3b066b820113d6e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83c165658cdd9d8d658426f3b066b820113d6e0"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "46fe17d1df2622be2c65c643cc80109809f390d7", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a51500cccdff68d8dfeec726f29b60ad1d546/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a51500cccdff68d8dfeec726f29b60ad1d546/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=099a51500cccdff68d8dfeec726f29b60ad1d546", "patch": "@@ -1,3 +1,9 @@\n+2000-11-05  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* lex.h (JAVA_FLOAT_RANGE_ERROR): Typo fix.\n+\t* lex.c (IS_ZERO): New define.\n+\t(java_perform_atof): Error on floating point underflow.\n+\n 2000-11-04  Tom Tromey  <tromey@cygnus.com>\n \n \t* lex.c (java_parse_escape_sequence): Only read two octal"}, {"sha": "be1fcf8e76fa2d349b3031a4b62758d8070cf8ca", "filename": "gcc/java/lex.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a51500cccdff68d8dfeec726f29b60ad1d546/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a51500cccdff68d8dfeec726f29b60ad1d546/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=099a51500cccdff68d8dfeec726f29b60ad1d546", "patch": "@@ -774,6 +774,12 @@ struct jpa_args\n   int number_beginning;\n };\n \n+#ifdef REAL_ARITHMETIC\n+#define IS_ZERO(X) (ereal_cmp (X, dconst0) == 0)\n+#else\n+#define IS_ZERO(X) ((X) == 0)\n+#endif\n+\n static void java_perform_atof\tPARAMS ((PTR));\n \n static void\n@@ -789,12 +795,36 @@ java_perform_atof (av)\n   SET_REAL_VALUE_ATOF (value,\n \t\t       REAL_VALUE_ATOF (a->literal_token, TYPE_MODE (type)));\n \n-  if (REAL_VALUE_ISINF (value)\n-      || REAL_VALUE_ISNAN (value))\n+  if (REAL_VALUE_ISINF (value) || REAL_VALUE_ISNAN (value))\n     {\n       JAVA_FLOAT_RANGE_ERROR ((a->fflag ? \"float\" : \"double\"));\n       value = DCONST0;\n     }\n+  else if (IS_ZERO (value))\n+    {\n+      /* We check to see if the value is really 0 or if we've found an\n+\t underflow.  We do this in the most primitive imaginable way.  */\n+      int really_zero = 1;\n+      char *p = a->literal_token;\n+      if (*p == '-')\n+\t++p;\n+      while (*p && *p != 'e' && *p != 'E')\n+\t{\n+\t  if (*p != '0' && *p != '.')\n+\t    {\n+\t      really_zero = 0;\n+\t      break;\n+\t    }\n+\t  ++p;\n+\t}\n+      if (! really_zero)\n+\t{\n+\t  int i = ctxp->c_line->current;\n+\t  ctxp->c_line->current = number_beginning;\n+\t  java_lex_error (\"Floating point literal underflow\", 0);\n+\t  ctxp->c_line->current = i;\n+\t}\n+    }\n \n   SET_LVAL_NODE_TYPE (build_real (type, value), type);\n }"}, {"sha": "baa08c99e644ebe942e3f336bb4e01b3a0b52927", "filename": "gcc/java/lex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/099a51500cccdff68d8dfeec726f29b60ad1d546/gcc%2Fjava%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/099a51500cccdff68d8dfeec726f29b60ad1d546/gcc%2Fjava%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.h?ref=099a51500cccdff68d8dfeec726f29b60ad1d546", "patch": "@@ -234,7 +234,7 @@ extern void set_float_handler PARAMS ((jmp_buf));\n     char msg [1024];\t\t\t\t\t\t\t  \\\n     int i = ctxp->c_line->current;\t\t\t\t\t  \\\n     ctxp->c_line->current = number_beginning;\t\t\t\t  \\\n-    sprintf (msg, \"Floating pointer literal exceeds range of `%s'\", (m)); \\\n+    sprintf (msg, \"Floating point literal exceeds range of `%s'\", (m)); \\\n     java_lex_error (msg, 0);\t\t\t\t\t\t  \\\n     ctxp->c_line->current = i;\t\t\t\t\t\t  \\\n   }"}]}