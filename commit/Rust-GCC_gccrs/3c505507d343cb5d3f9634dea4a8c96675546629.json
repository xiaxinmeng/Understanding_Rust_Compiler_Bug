{"sha": "3c505507d343cb5d3f9634dea4a8c96675546629", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1MDU1MDdkMzQzY2I1ZDNmOTYzNGRlYTRhOGM5NjY3NTU0NjYyOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-01-03T15:01:16Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-01-03T15:01:16Z"}, "message": "search.c (lookup_fnfields_here): Remove.\n\ncp:\n\t* search.c (lookup_fnfields_here): Remove.\n\t(look_for_overrides_r): Use lookup_fnfields_1.\n\tIgnore functions from using declarations.\ntestsuite:\n\t* g++.old-deja/g++.other/virtual11.C: New test.\n\nFrom-SVN: r38661", "tree": {"sha": "05e846ad2f99f1b94283c33660259c916def2d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05e846ad2f99f1b94283c33660259c916def2d36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c505507d343cb5d3f9634dea4a8c96675546629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c505507d343cb5d3f9634dea4a8c96675546629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c505507d343cb5d3f9634dea4a8c96675546629", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c505507d343cb5d3f9634dea4a8c96675546629/comments", "author": null, "committer": null, "parents": [{"sha": "713f41f9b3bcb0153943f22989026727d39817ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713f41f9b3bcb0153943f22989026727d39817ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713f41f9b3bcb0153943f22989026727d39817ce"}], "stats": {"total": 75, "additions": 45, "deletions": 30}, "files": [{"sha": "492a4dc461903cc5fc44b2def5539517a18d4a43", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c505507d343cb5d3f9634dea4a8c96675546629/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c505507d343cb5d3f9634dea4a8c96675546629/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c505507d343cb5d3f9634dea4a8c96675546629", "patch": "@@ -1,3 +1,9 @@\n+2001-01-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* search.c (lookup_fnfields_here): Remove.\n+\t(look_for_overrides_r): Use lookup_fnfields_1.\n+\tIgnore functions from using declarations.\n+\n 2001-01-03  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tImplement exceptions specifiers for implicit member functions."}, {"sha": "5beedb0a6078af84b273f516a113c64092921691", "filename": "gcc/cp/search.c", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c505507d343cb5d3f9634dea4a8c96675546629/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c505507d343cb5d3f9634dea4a8c96675546629/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=3c505507d343cb5d3f9634dea4a8c96675546629", "patch": "@@ -85,7 +85,6 @@ struct vbase_info\n \n static tree get_vbase_1 PARAMS ((tree, tree, unsigned int *));\n static tree lookup_field_1 PARAMS ((tree, tree));\n-static int lookup_fnfields_here PARAMS ((tree, tree));\n static int is_subobject_of_p PARAMS ((tree, tree, tree));\n static tree virtual_context PARAMS ((tree, tree, tree));\n static tree dfs_check_overlap PARAMS ((tree, void *));\n@@ -1249,33 +1248,6 @@ is_subobject_of_p (parent, binfo, most_derived)\n   return 0;\n }\n \n-/* Very similar to lookup_fnfields_1 but it ensures that at least one\n-   function was declared inside the class given by TYPE.  It really should\n-   only return functions that match the given TYPE.  Therefore, it should\n-   only be called for situations that ignore using-declarations, such as\n-   determining overrides.  */\n-\n-static int\n-lookup_fnfields_here (type, name)\n-     tree type, name;\n-{\n-  int idx = lookup_fnfields_1 (type, name);\n-  tree fndecls;\n-\n-  /* ctors and dtors are always only in the right class.  */\n-  if (idx <= 1)\n-    return idx;\n-  fndecls = TREE_VEC_ELT (CLASSTYPE_METHOD_VEC (type), idx);\n-  while (fndecls)\n-    {\n-      if (TYPE_MAIN_VARIANT (DECL_CONTEXT (OVL_CURRENT (fndecls)))\n-\t  == TYPE_MAIN_VARIANT (type))\n-\treturn idx;\n-      fndecls = OVL_CHAIN (fndecls);\n-    }\n-  return -1;\n-}\n-\n struct lookup_field_info {\n   /* The type in which we're looking.  */\n   tree type;\n@@ -2015,7 +1987,7 @@ look_for_overrides_r (type, fndecl)\n   if (DECL_DESTRUCTOR_P (fndecl))\n     ix = CLASSTYPE_DESTRUCTOR_SLOT;\n   else\n-    ix = lookup_fnfields_here (type, DECL_NAME (fndecl));\n+    ix = lookup_fnfields_1 (type, DECL_NAME (fndecl));\n   if (ix >= 0)\n     {\n       tree fns = TREE_VEC_ELT (CLASSTYPE_METHOD_VEC (type), ix);\n@@ -2029,7 +2001,9 @@ look_for_overrides_r (type, fndecl)\n           tree btypes = TYPE_ARG_TYPES (TREE_TYPE (fn));\n           \n           if (!DECL_VIRTUAL_P (fn))\n-            ;\n+            /*  Not a virtual */;\n+          else if (DECL_CONTEXT (fn) != type)\n+            /*  Introduced with a using declaration */;\n \t  else if (thistype == NULL_TREE)\n \t    {\n \t      if (compparms (TREE_CHAIN (btypes), dtypes))"}, {"sha": "32b834958af6022d47813a6a1f4d2de151e4edd6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c505507d343cb5d3f9634dea4a8c96675546629/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c505507d343cb5d3f9634dea4a8c96675546629/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c505507d343cb5d3f9634dea4a8c96675546629", "patch": "@@ -1,3 +1,7 @@\n+2001-01-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/virtual11.C: New test.\n+\n 2001-01-03  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.eh/spec6.C: Remove remaining XFAIL."}, {"sha": "62c9b24613f386c189b8ce6174920e3e24636234", "filename": "gcc/testsuite/g++.old-deja/g++.other/virtual11.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c505507d343cb5d3f9634dea4a8c96675546629/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c505507d343cb5d3f9634dea4a8c96675546629/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fvirtual11.C?ref=3c505507d343cb5d3f9634dea4a8c96675546629", "patch": "@@ -0,0 +1,31 @@\n+// Build don't link:\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 14 Nov 2000 <nathan@codesourcery.com>\n+\n+// We failed to check virtual functions hidden by using declarations.\n+\n+struct A\n+{\n+  virtual int foo ();\n+};\n+\n+struct B\n+{\n+  virtual void foo ();  // ERROR - of this function\n+};\n+\n+struct C : A , B\n+{\n+};\n+\n+struct D : C\n+{\n+  void foo (short);\n+  using A::foo;\n+};\n+\n+struct E : D\n+{\n+  virtual int foo ();   // ERROR - invalid override\n+};"}]}