{"sha": "a0fdff3cf33f72848d3f894272431a5d49fe6a16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBmZGZmM2NmMzNmNzI4NDhkM2Y4OTQyNzI0MzFhNWQ0OWZlNmExNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-02-05T15:36:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-29T18:38:50Z"}, "message": "c++: Fix friend attributes [PR51344]\n\n51344 was a problem with calling save_template_attributes twice for the same\nfriend function: once from do_friend and once from grokmethod.  The 2012\npatch for the bug avoided creating an infinite loop when this happens, but\nit's better to avoid the duplication in the first place.  This also restores\nthe dependent attributes to the beginning of the attribute list, as\noriginally intended.  And then apply_late_template_attributes can avoid\ncopying the non-dependent attributes.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/51344\n\t* decl2.c (grokfield): Call cplus_decl_attributes for friend.\n\t(save_template_attributes): Use chainon.\n\t* friend.c (do_friend): Remove attrlist parm.\n\t* cp-tree.h (do_friend): Adjust.\n\t* class.c (add_implicitly_declared_members): Adjust.\n\t* decl.c (grokdeclarator): Adjust.\n\t* pt.c (apply_late_template_attributes): Optimize.", "tree": {"sha": "1a9a9a3c4757ea89f59abca94553403318d1f79c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a9a9a3c4757ea89f59abca94553403318d1f79c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0fdff3cf33f72848d3f894272431a5d49fe6a16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0fdff3cf33f72848d3f894272431a5d49fe6a16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0fdff3cf33f72848d3f894272431a5d49fe6a16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0fdff3cf33f72848d3f894272431a5d49fe6a16/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a92b789a77cdade1f41800efebf6e0686f9982", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a92b789a77cdade1f41800efebf6e0686f9982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a92b789a77cdade1f41800efebf6e0686f9982"}], "stats": {"total": 77, "additions": 34, "deletions": 43}, "files": [{"sha": "dad3849d44fe9bb9a887b2c7348d281167b4e121", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=a0fdff3cf33f72848d3f894272431a5d49fe6a16", "patch": "@@ -3314,7 +3314,7 @@ add_implicitly_declared_members (tree t, tree* access_decls,\n \tbool is_friend = DECL_CONTEXT (space) != t;\n \tif (is_friend)\n \t  do_friend (NULL_TREE, DECL_NAME (eq), eq,\n-\t\t     NULL_TREE, NO_SPECIAL, true);\n+\t\t     NO_SPECIAL, true);\n \telse\n \t  {\n \t    add_method (t, eq, false);"}, {"sha": "368d9f5adf79acddb8a03e7c8dd815c3a8c38373", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a0fdff3cf33f72848d3f894272431a5d49fe6a16", "patch": "@@ -6848,7 +6848,7 @@ extern void mark_exp_read\t\t\t(tree);\n extern int is_friend\t\t\t\t(tree, tree);\n extern void make_friend_class\t\t\t(tree, tree, bool);\n extern void add_friend\t\t\t\t(tree, tree, bool);\n-extern tree do_friend\t\t\t\t(tree, tree, tree, tree,\n+extern tree do_friend\t\t\t\t(tree, tree, tree,\n \t\t\t\t\t\t enum overload_flags, bool);\n \n extern void set_global_friend\t\t\t(tree);"}, {"sha": "d1e73373660561c3b3d8a3f181ceff06a2abba2f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a0fdff3cf33f72848d3f894272431a5d49fe6a16", "patch": "@@ -13758,8 +13758,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t  }\n \n \t\tdecl = do_friend (ctype, unqualified_id, decl,\n-\t\t\t\t  *attrlist, flags,\n-\t\t\t\t  funcdef_flag);\n+\t\t\t\t  flags, funcdef_flag);\n \t\treturn decl;\n \t      }\n \t    else"}, {"sha": "89f874a32cc95f1fe9496481fd603df684951853", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a0fdff3cf33f72848d3f894272431a5d49fe6a16", "patch": "@@ -974,7 +974,11 @@ grokfield (const cp_declarator *declarator,\n   if ((TREE_CODE (value) == FUNCTION_DECL\n        || TREE_CODE (value) == TEMPLATE_DECL)\n       && DECL_CONTEXT (value) != current_class_type)\n-    return value;\n+    {\n+      if (attrlist)\n+\tcplus_decl_attributes (&value, attrlist, 0);\n+      return value;\n+    }\n \n   /* Need to set this before push_template_decl.  */\n   if (VAR_P (value))\n@@ -1278,9 +1282,9 @@ save_template_attributes (tree *attr_p, tree *decl_p, int flags)\n \n   tree old_attrs = *q;\n \n-  /* Merge the late attributes at the beginning with the attribute\n+  /* Place the late attributes at the beginning of the attribute\n      list.  */\n-  late_attrs = merge_attributes (late_attrs, *q);\n+  late_attrs = chainon (late_attrs, *q);\n   if (*q != late_attrs\n       && !DECL_P (*decl_p)\n       && !(flags & ATTR_FLAG_TYPE_IN_PLACE))"}, {"sha": "4f6288414d988ff3957329caea68a81af2637c69", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=a0fdff3cf33f72848d3f894272431a5d49fe6a16", "patch": "@@ -475,7 +475,7 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \n tree\n do_friend (tree ctype, tree declarator, tree decl,\n-\t   tree attrlist, enum overload_flags flags,\n+\t   enum overload_flags flags,\n \t   bool funcdef_flag)\n {\n   gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n@@ -488,13 +488,6 @@ do_friend (tree ctype, tree declarator, tree decl,\n     error (\"friend declaration %qD may not have virt-specifiers\",\n \t   decl);\n \n-  /* Unfortunately, we have to handle attributes here.  Normally we would\n-     handle them in start_decl_1, but since this is a friend decl start_decl_1\n-     never gets to see it.  */\n-\n-  /* Set attributes here so if duplicate decl, will have proper attributes.  */\n-  cplus_decl_attributes (&decl, attrlist, 0);\n-\n   if (TREE_CODE (declarator) == TEMPLATE_ID_EXPR)\n     {\n       declarator = TREE_OPERAND (declarator, 0);"}, {"sha": "116bdd2e42a895f40f93f31803da0ca893717b04", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0fdff3cf33f72848d3f894272431a5d49fe6a16/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a0fdff3cf33f72848d3f894272431a5d49fe6a16", "patch": "@@ -11659,7 +11659,6 @@ static bool\n apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n \t\t\t\ttree args, tsubst_flags_t complain, tree in_decl)\n {\n-  tree last_dep = NULL_TREE;\n   tree t;\n   tree *p;\n \n@@ -11685,39 +11684,35 @@ apply_late_template_attributes (tree *decl_p, tree attributes, int attr_flags,\n \tp = &TREE_CHAIN (*p);\n     }\n \n+  /* save_template_attributes puts the dependent attributes at the beginning of\n+     the list; find the non-dependent ones.  */\n   for (t = attributes; t; t = TREE_CHAIN (t))\n-    if (ATTR_IS_DEPENDENT (t))\n-      {\n-\tlast_dep = t;\n-\tattributes = copy_list (attributes);\n-\tbreak;\n-      }\n+    if (!ATTR_IS_DEPENDENT (t))\n+      break;\n+  tree nondep = t;\n \n-  *p = attributes;\n-  if (last_dep)\n-    {\n-      tree late_attrs = NULL_TREE;\n-      tree *q = &late_attrs;\n+  /* Apply any non-dependent attributes.  */\n+  *p = nondep;\n \n-      for (; *p; )\n+  /* And then any dependent ones.  */\n+  tree late_attrs = NULL_TREE;\n+  tree *q = &late_attrs;\n+  for (t = attributes; t != nondep; t = TREE_CHAIN (t))\n+    {\n+      *q = tsubst_attribute (t, decl_p, args, complain, in_decl);\n+      if (*q == error_mark_node)\n+\treturn false;\n+      if (*q == t)\n \t{\n-\t  t = *p;\n-\t  if (ATTR_IS_DEPENDENT (t))\n-\t    {\n-\t      *q = tsubst_attribute (t, decl_p, args, complain, in_decl);\n-\t      if (*q == error_mark_node)\n-\t\treturn false;\n-\t      *p = TREE_CHAIN (t);\n-\t      TREE_CHAIN (t) = NULL_TREE;\n-\t      while (*q)\n-\t\tq = &TREE_CHAIN (*q);\n-\t    }\n-\t  else\n-\t    p = &TREE_CHAIN (t);\n+\t  *q = copy_node (t);\n+\t  TREE_CHAIN (*q) = NULL_TREE;\n \t}\n-\n-      cplus_decl_attributes (decl_p, late_attrs, attr_flags);\n+      while (*q)\n+\tq = &TREE_CHAIN (*q);\n     }\n+\n+  cplus_decl_attributes (decl_p, late_attrs, attr_flags);\n+\n   return true;\n }\n "}]}