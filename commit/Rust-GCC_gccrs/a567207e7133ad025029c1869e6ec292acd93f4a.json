{"sha": "a567207e7133ad025029c1869e6ec292acd93f4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU2NzIwN2U3MTMzYWQwMjUwMjljMTg2OWU2ZWMyOTJhY2Q5M2Y0YQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-10-01T15:14:29Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-10-01T15:14:29Z"}, "message": "simplify-rtx.c (comparison_result, [...]): Rename CR_* constants to CMP_*.\n\n2007-10-01  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* simplify-rtx.c (comparison_result, simplify_relational_operation_1):\n\tRename CR_* constants to CMP_*.  Fix spacing.\n\nFrom-SVN: r128906", "tree": {"sha": "eb88f2594885534e5e5c4f0b4e7b3edb88338ad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb88f2594885534e5e5c4f0b4e7b3edb88338ad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a567207e7133ad025029c1869e6ec292acd93f4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a567207e7133ad025029c1869e6ec292acd93f4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a567207e7133ad025029c1869e6ec292acd93f4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a567207e7133ad025029c1869e6ec292acd93f4a/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fe644092f52890890262703d3de227a9fe07e257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe644092f52890890262703d3de227a9fe07e257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe644092f52890890262703d3de227a9fe07e257"}], "stats": {"total": 115, "additions": 59, "deletions": 56}, "files": [{"sha": "bbf73bb2fff0bcce741b6d4f40828bec63baa14d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a567207e7133ad025029c1869e6ec292acd93f4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a567207e7133ad025029c1869e6ec292acd93f4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a567207e7133ad025029c1869e6ec292acd93f4a", "patch": "@@ -1,3 +1,8 @@\n+2007-10-01  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* simplify-rtx.c (comparison_result, simplify_relational_operation_1):\n+\tRename CR_* constants to CMP_*.  Fix spacing.\n+\n 2007-10-01  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR other/33585"}, {"sha": "8e02612f481b9f41eebf7e5b8eb07a25d09e7bff", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 54, "deletions": 56, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a567207e7133ad025029c1869e6ec292acd93f4a/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a567207e7133ad025029c1869e6ec292acd93f4a/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=a567207e7133ad025029c1869e6ec292acd93f4a", "patch": "@@ -3954,57 +3954,55 @@ simplify_relational_operation_1 (enum rtx_code code, enum machine_mode mode,\n \n enum \n {\n-  CR_EQ = 1,\n-  CR_LT = 2,\n-  CR_GT = 4,\n-  CR_LTU = 8,\n-  CR_GTU = 16\n+  CMP_EQ = 1,\n+  CMP_LT = 2,\n+  CMP_GT = 4,\n+  CMP_LTU = 8,\n+  CMP_GTU = 16\n };\n \n \n /* Convert the known results for EQ, LT, GT, LTU, GTU contained in\n    KNOWN_RESULT to a CONST_INT, based on the requested comparison CODE\n-   For KNOWN_RESULT to make sense it should be either CR_EQ, or the \n-   logical OR of one of (CR_LT, CR_GT) and one of (CR_LTU, CR_GTU).\n+   For KNOWN_RESULT to make sense it should be either CMP_EQ, or the \n+   logical OR of one of (CMP_LT, CMP_GT) and one of (CMP_LTU, CMP_GTU).\n    For floating-point comparisons, assume that the operands were ordered.  */\n \n static rtx\n comparison_result (enum rtx_code code, int known_results)\n {\n-  /* If we reach here, EQUAL, OP0LT, OP0LTU, OP1LT, and OP1LTU are set\n-     as appropriate.  */\n   switch (code)\n     {\n     case EQ:\n     case UNEQ:\n-      return (known_results & CR_EQ) ? const_true_rtx : const0_rtx;\n+      return (known_results & CMP_EQ) ? const_true_rtx : const0_rtx;\n     case NE:\n     case LTGT:\n-      return (known_results & CR_EQ) ? const0_rtx : const_true_rtx;\n+      return (known_results & CMP_EQ) ? const0_rtx : const_true_rtx;\n \n     case LT:\n     case UNLT:\n-      return (known_results & CR_LT) ? const_true_rtx : const0_rtx;\n+      return (known_results & CMP_LT) ? const_true_rtx : const0_rtx;\n     case GE:\n     case UNGE:\n-      return (known_results & CR_LT) ? const0_rtx : const_true_rtx;\n+      return (known_results & CMP_LT) ? const0_rtx : const_true_rtx;\n \n     case GT:\n     case UNGT:\n-      return (known_results & CR_GT) ? const_true_rtx : const0_rtx;\n+      return (known_results & CMP_GT) ? const_true_rtx : const0_rtx;\n     case LE:\n     case UNLE:\n-      return (known_results & CR_GT) ? const0_rtx : const_true_rtx;\n+      return (known_results & CMP_GT) ? const0_rtx : const_true_rtx;\n \n     case LTU:\n-      return (known_results & CR_LTU) ? const_true_rtx : const0_rtx;\n+      return (known_results & CMP_LTU) ? const_true_rtx : const0_rtx;\n     case GEU:\n-      return (known_results & CR_LTU) ? const0_rtx : const_true_rtx;\n+      return (known_results & CMP_LTU) ? const0_rtx : const_true_rtx;\n \n     case GTU:\n-      return (known_results & CR_GTU) ? const_true_rtx : const0_rtx;\n+      return (known_results & CMP_GTU) ? const_true_rtx : const0_rtx;\n     case LEU:\n-      return (known_results & CR_GTU) ? const0_rtx : const_true_rtx;\n+      return (known_results & CMP_GTU) ? const0_rtx : const_true_rtx;\n \n     case ORDERED:\n       return const_true_rtx;\n@@ -4098,7 +4096,7 @@ simplify_const_relational_operation (enum rtx_code code,\n \t   && ! HONOR_SNANS (GET_MODE (trueop0))))\n       && rtx_equal_p (trueop0, trueop1)\n       && ! side_effects_p (trueop0))\n-    return comparison_result (code, CR_EQ);\n+    return comparison_result (code, CMP_EQ);\n \n   /* If the operands are floating-point constants, see if we can fold\n      the result.  */\n@@ -4136,8 +4134,8 @@ simplify_const_relational_operation (enum rtx_code code,\n \t  }\n \n       return comparison_result (code,\n-\t\t\t\t(REAL_VALUES_EQUAL (d0, d1) ? CR_EQ :\n-\t\t\t\t REAL_VALUES_LESS (d0, d1) ? CR_LT : CR_GT));\n+\t\t\t\t(REAL_VALUES_EQUAL (d0, d1) ? CMP_EQ :\n+\t\t\t\t REAL_VALUES_LESS (d0, d1) ? CMP_LT : CMP_GT));\n     }\n \n   /* Otherwise, see if the operands are both integers.  */\n@@ -4191,13 +4189,13 @@ simplify_const_relational_operation (enum rtx_code code,\n \th0u = h1u = 0, h0s = HWI_SIGN_EXTEND (l0s), h1s = HWI_SIGN_EXTEND (l1s);\n \n       if (h0u == h1u && l0u == l1u)\n-        return comparison_result (code, CR_EQ);\n+\treturn comparison_result (code, CMP_EQ);\n       else\n \t{\n \t  int cr;\n-          cr = (h0s < h1s || (h0s == h1s && l0u < l1u)) ? CR_LT : CR_GT;\n-          cr |= (h0u < h1u || (h0u == h1u && l0u < l1u)) ? CR_LTU : CR_GTU;\n-          return comparison_result (code, cr);\n+\t  cr = (h0s < h1s || (h0s == h1s && l0u < l1u)) ? CMP_LT : CMP_GT;\n+\t  cr |= (h0u < h1u || (h0u == h1u && l0u < l1u)) ? CMP_LTU : CMP_GTU;\n+\t  return comparison_result (code, cr);\n \t}\n     }\n \n@@ -4228,8 +4226,8 @@ simplify_const_relational_operation (enum rtx_code code,\n       else\n \t{\n \t  rtx mmin_rtx, mmax_rtx;\n-          unsigned int sign_copies = num_sign_bit_copies (trueop0, mode);\n-          get_mode_bounds (mode, sign, mode, &mmin_rtx, &mmax_rtx);\n+\t  unsigned int sign_copies = num_sign_bit_copies (trueop0, mode);\n+\t  get_mode_bounds (mode, sign, mode, &mmin_rtx, &mmax_rtx);\n \n \t  /* Since unsigned mmin will never be interpreted as negative, use\n \t     INTVAL (and an arithmetic right shift).  */\n@@ -4318,49 +4316,49 @@ simplify_const_relational_operation (enum rtx_code code,\n   if (trueop1 == const0_rtx)\n     {\n       /* Some addresses are known to be nonzero.  We don't know\n-         their sign, but equality comparisons are known.  */\n+\t their sign, but equality comparisons are known.  */\n       if (nonzero_address_p (trueop0))\n-        {\n+\t{\n \t  if (code == EQ || code == LEU)\n \t    return const0_rtx;\n \t  if (code == NE || code == GTU)\n \t    return const_true_rtx;\n-        }\n+\t}\n \n       /* See if the first operand is an IOR with a constant.  If so, we\n \t may be able to determine the result of this comparison.  */\n       if (GET_CODE (op0) == IOR)\n-        {\n+\t{\n \t  rtx inner_const = avoid_constant_pool_reference (XEXP (op0, 1));\n \t  if (GET_CODE (inner_const) == CONST_INT && inner_const != const0_rtx)\n \t    {\n-              int sign_bitnum = GET_MODE_BITSIZE (mode) - 1;\n-              int has_sign = (HOST_BITS_PER_WIDE_INT >= sign_bitnum\n-                              && (INTVAL (inner_const)\n-                                  & ((HOST_WIDE_INT) 1 << sign_bitnum)));\n-\n-              switch (code)\n-                {\n-                case EQ:\n+\t      int sign_bitnum = GET_MODE_BITSIZE (mode) - 1;\n+\t      int has_sign = (HOST_BITS_PER_WIDE_INT >= sign_bitnum\n+\t\t\t      && (INTVAL (inner_const)\n+\t\t\t\t  & ((HOST_WIDE_INT) 1 << sign_bitnum)));\n+\n+\t      switch (code)\n+\t\t{\n+\t\tcase EQ:\n \t\tcase LEU:\n-                  return const0_rtx;\n-                case NE:\n+\t\t  return const0_rtx;\n+\t\tcase NE:\n \t\tcase GTU:\n-                  return const_true_rtx;\n-                case LT:\n-\t        case LE:\n-                  if (has_sign)\n-                    return const_true_rtx;\n-                  break;\n-                case GT:\n+\t\t  return const_true_rtx;\n+\t\tcase LT:\n+\t\tcase LE:\n+\t\t  if (has_sign)\n+\t\t    return const_true_rtx;\n+\t\t  break;\n+\t\tcase GT:\n \t\tcase GE:\n-                  if (has_sign)\n-                    return const0_rtx;\n-                  break;\n-                default:\n-                  break;\n-                }\n-            }\n+\t\t  if (has_sign)\n+\t\t    return const0_rtx;\n+\t\t  break;\n+\t\tdefault:\n+\t\t  break;\n+\t\t}\n+\t    }\n \t}\n     }\n "}]}