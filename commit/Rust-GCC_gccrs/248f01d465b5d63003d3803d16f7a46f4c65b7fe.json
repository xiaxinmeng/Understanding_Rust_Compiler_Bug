{"sha": "248f01d465b5d63003d3803d16f7a46f4c65b7fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ4ZjAxZDQ2NWI1ZDYzMDAzZDM4MDNkMTZmN2E0NmY0YzY1YjdmZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2007-07-13T13:22:10Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2007-07-13T13:22:10Z"}, "message": "re PR other/32188 (DFP instrinic document is out of date)\n\n2007-07-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR other/32188\n\t* doc/libgcc.texi: Update DFP intrinsics for DPD and BID.\n\nFrom-SVN: r126619", "tree": {"sha": "82473f3188fff5061cf59263c2ab4c4d0d3fda21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82473f3188fff5061cf59263c2ab4c4d0d3fda21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/248f01d465b5d63003d3803d16f7a46f4c65b7fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248f01d465b5d63003d3803d16f7a46f4c65b7fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248f01d465b5d63003d3803d16f7a46f4c65b7fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248f01d465b5d63003d3803d16f7a46f4c65b7fe/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f10442327abc6b8cd39cb09781babb7f5121a9f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10442327abc6b8cd39cb09781babb7f5121a9f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10442327abc6b8cd39cb09781babb7f5121a9f0"}], "stats": {"total": 266, "additions": 180, "deletions": 86}, "files": [{"sha": "49d10e0d5a700c86794abf3251dea63e542d61f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248f01d465b5d63003d3803d16f7a46f4c65b7fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248f01d465b5d63003d3803d16f7a46f4c65b7fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=248f01d465b5d63003d3803d16f7a46f4c65b7fe", "patch": "@@ -1,3 +1,8 @@\n+2007-07-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR other/32188\n+\t* doc/libgcc.texi: Update DFP intrinsics for DPD and BID.\n+\n 2007-07-13  Andreas Schwab  <schwab@suse.de>\n \n \t* gengtype-lex.l: Allow declarations to be indented."}, {"sha": "aa12cc60ad8526251a4eded2345cd2c876c94959", "filename": "gcc/doc/libgcc.texi", "status": "modified", "additions": 175, "deletions": 86, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248f01d465b5d63003d3803d16f7a46f4c65b7fe/gcc%2Fdoc%2Flibgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248f01d465b5d63003d3803d16f7a46f4c65b7fe/gcc%2Fdoc%2Flibgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flibgcc.texi?ref=248f01d465b5d63003d3803d16f7a46f4c65b7fe", "patch": "@@ -500,132 +500,203 @@ The software decimal floating point library implements IEEE 754R\n decimal floating point arithmetic and is only activated on selected\n targets.\n \n+The software decimal floating point library supports either DPD \n+(Densely Packed Decimal) or BID (Binary Integer Decimal) encoding \n+as selected at configure time.\n+\n+\n @subsection Arithmetic functions\n \n-@deftypefn {Runtime Function} _Decimal32 __addsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} _Decimal64 __adddd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} _Decimal128 __addtd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} _Decimal32 __dpd_addsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_addsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_adddd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_adddd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_addtd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_addtd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return the sum of @var{a} and @var{b}.\n @end deftypefn\n \n-@deftypefn {Runtime Function} _Decimal32 __subsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} _Decimal64 __subdd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} _Decimal128 __subtd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} _Decimal32 __dpd_subsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_subsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_subdd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_subdd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_subtd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_subtd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return the difference between @var{b} and @var{a};\n that is, @w{@math{@var{a} - @var{b}}}.\n @end deftypefn\n \n-@deftypefn {Runtime Function} _Decimal32 __mulsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} _Decimal64 __muldd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} _Decimal128 __multd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} _Decimal32 __dpd_mulsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_mulsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_muldd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_muldd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_multd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_multd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return the product of @var{a} and @var{b}.\n @end deftypefn\n \n-@deftypefn {Runtime Function} _Decimal32 __divsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} _Decimal64 __divdd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} _Decimal128 __divtd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} _Decimal32 __dpd_divsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_divsd3 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_divdd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_divdd3 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_divtd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_divtd3 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return the quotient of @var{a} and @var{b}; that is,\n @w{@math{@var{a} / @var{b}}}.\n @end deftypefn\n \n-@deftypefn {Runtime Function} _Decimal32 __negsd2 (_Decimal32 @var{a})\n-@deftypefnx {Runtime Function} _Decimal64 __negdd2 (_Decimal64 @var{a})\n-@deftypefnx {Runtime Function} _Decimal128 __negtd2 (_Decimal128 @var{a})\n+@deftypefn {Runtime Function} _Decimal32 __dpd_negsd2 (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_negsd2 (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_negdd2 (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_negdd2 (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_negtd2 (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_negtd2 (_Decimal128 @var{a})\n These functions return the negation of @var{a}.  They simply flip the\n sign bit, so they can produce negative zero and negative NaN@.\n @end deftypefn\n \n @subsection Conversion functions\n \n @c DFP/DFP conversions\n-@deftypefn {Runtime Function} _Decimal64 __extendsddd2 (_Decimal32 @var{a})\n-@deftypefnx {Runtime Function} _Decimal128 __extendsdtd2 (_Decimal32 @var{a})\n-@deftypefnx {Runtime Function} _Decimal128 __extendddtd2 (_Decimal64 @var{a})\n+@deftypefn {Runtime Function} _Decimal64 __dpd_extendsddd2 (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_extendsddd2 (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_extendsdtd2 (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_extendsdtd2 (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_extendddtd2 (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_extendddtd2 (_Decimal64 @var{a})\n @c DFP/binary FP conversions\n-@deftypefnx {Runtime Function} _Decimal32 __extendsfsd (float @var{a})\n-@deftypefnx {Runtime Function} double __extendsddf (_Decimal32 @var{a})\n-@deftypefnx {Runtime Function} {long double} __extendsdxf (_Decimal32 @var{a})\n-@deftypefnx {Runtime Function} _Decimal64 __extendsfdd (float @var{a})\n-@deftypefnx {Runtime Function} _Decimal64 __extenddfdd (double @var{a})\n-@deftypefnx {Runtime Function} {long double} __extendddxf (_Decimal64 @var{a})\n-@deftypefnx {Runtime Function} _Decimal128 __extendsftd (float @var{a})\n-@deftypefnx {Runtime Function} _Decimal128 __extenddftd (double @var{a})\n-@deftypefnx {Runtime Function} _Decimal128 __extendxftd ({long double} @var{a})\n+@deftypefnx {Runtime Function} _Decimal32 __dpd_extendsfsd (float @var{a})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_extendsfsd (float @var{a})\n+@deftypefnx {Runtime Function} double __dpd_extendsddf (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} double __bid_extendsddf (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} {long double} __dpd_extendsdxf (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} {long double} __bid_extendsdxf (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_extendsfdd (float @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_extendsfdd (float @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_extenddfdd (double @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_extenddfdd (double @var{a})\n+@deftypefnx {Runtime Function} {long double} __dpd_extendddxf (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} {long double} __bid_extendddxf (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_extendsftd (float @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_extendsftd (float @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_extenddftd (double @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_extenddftd (double @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_extendxftd ({long double} @var{a})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_extendxftd ({long double} @var{a})\n These functions extend @var{a} to the wider mode of their return type.\n @end deftypefn\n \n @c DFP/DFP conversions\n-@deftypefn {Runtime Function} _Decimal32 __truncddsd2 (_Decimal64 @var{a})\n-@deftypefnx {Runtime Function} _Decimal32 __trunctdsd2 (_Decimal128 @var{a})\n-@deftypefnx {Runtime Function} _Decimal64 __trunctddd2 (_Decimal128 @var{a})\n+@deftypefn {Runtime Function} _Decimal32 __dpd_truncddsd2 (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_truncddsd2 (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} _Decimal32 __dpd_trunctdsd2 (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_trunctdsd2 (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_trunctddd2 (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_trunctddd2 (_Decimal128 @var{a})\n @c DFP/binary FP conversions\n-@deftypefnx {Runtime Function} float __truncsdsf (_Decimal32 @var{a})\n-@deftypefnx {Runtime Function} _Decimal32 __truncdfsd (double @var{a})\n-@deftypefnx {Runtime Function} _Decimal32 __truncxfsd ({long double} @var{a})\n-@deftypefnx {Runtime Function} float __truncddsf (_Decimal64 @var{a})\n-@deftypefnx {Runtime Function} double __truncdddf (_Decimal64 @var{a})\n-@deftypefnx {Runtime Function} _Decimal64 __truncxfdd ({long double} @var{a})\n-@deftypefnx {Runtime Function} float __trunctdsf (_Decimal128 @var{a})\n-@deftypefnx {Runtime Function} double __trunctddf (_Decimal128 @var{a})\n-@deftypefnx {Runtime Function} {long double} __trunctdxf (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} float __dpd_truncsdsf (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} float __bid_truncsdsf (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} _Decimal32 __dpd_truncdfsd (double @var{a})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_truncdfsd (double @var{a})\n+@deftypefnx {Runtime Function} _Decimal32 __dpd_truncxfsd ({long double} @var{a})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_truncxfsd ({long double} @var{a})\n+@deftypefnx {Runtime Function} float __dpd_truncddsf (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} float __bid_truncddsf (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} double __dpd_truncdddf (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} double __bid_truncdddf (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_truncxfdd ({long double} @var{a})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_truncxfdd ({long double} @var{a})\n+@deftypefnx {Runtime Function} float __dpd_trunctdsf (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} float __bid_trunctdsf (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} double __dpd_trunctddf (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} double __bid_trunctddf (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} {long double} __dpd_trunctdxf (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} {long double} __bid_trunctdxf (_Decimal128 @var{a})\n These functions truncate @var{a} to the narrower mode of their return\n type.\n @end deftypefn\n \n-@deftypefn {Runtime Function} int __fixsdsi (_Decimal32 @var{a})\n-@deftypefnx {Runtime Function} int __fixddsi (_Decimal64 @var{a})\n-@deftypefnx {Runtime Function} int __fixtdsi (_Decimal128 @var{a})\n+@deftypefn {Runtime Function} int __dpd_fixsdsi (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} int __bid_fixsdsi (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} int __dpd_fixddsi (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} int __bid_fixddsi (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} int __dpd_fixtdsi (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} int __bid_fixtdsi (_Decimal128 @var{a})\n These functions convert @var{a} to a signed integer.\n @end deftypefn\n \n-@deftypefn {Runtime Function} long __fixsddi (_Decimal32 @var{a})\n-@deftypefnx {Runtime Function} long __fixdddi (_Decimal64 @var{a})\n-@deftypefnx {Runtime Function} long __fixtddi (_Decimal128 @var{a})\n+@deftypefn {Runtime Function} long __dpd_fixsddi (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} long __bid_fixsddi (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} long __dpd_fixdddi (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} long __bid_fixdddi (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} long __dpd_fixtddi (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} long __bid_fixtddi (_Decimal128 @var{a})\n These functions convert @var{a} to a signed long.\n @end deftypefn\n \n-@deftypefn {Runtime Function} {unsigned int} __fixunssdsi (_Decimal32 @var{a})\n-@deftypefnx {Runtime Function} {unsigned int} __fixunsddsi (_Decimal64 @var{a})\n-@deftypefnx {Runtime Function} {unsigned int} __fixunstdsi (_Decimal128 @var{a})\n+@deftypefn {Runtime Function} {unsigned int} __dpd_fixunssdsi (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} {unsigned int} __bid_fixunssdsi (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} {unsigned int} __dpd_fixunsddsi (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} {unsigned int} __bid_fixunsddsi (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} {unsigned int} __dpd_fixunstdsi (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} {unsigned int} __bid_fixunstdsi (_Decimal128 @var{a})\n These functions convert @var{a} to an unsigned integer.  Negative values all become zero.\n @end deftypefn\n \n-@deftypefn {Runtime Function} {unsigned long} __fixunssddi (_Decimal32 @var{a})\n-@deftypefnx {Runtime Function} {unsigned long} __fixunsdddi (_Decimal64 @var{a})\n-@deftypefnx {Runtime Function} {unsigned long} __fixunstddi (_Decimal128 @var{a})\n+@deftypefn {Runtime Function} {unsigned long} __dpd_fixunssddi (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} {unsigned long} __bid_fixunssddi (_Decimal32 @var{a})\n+@deftypefnx {Runtime Function} {unsigned long} __dpd_fixunsdddi (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} {unsigned long} __bid_fixunsdddi (_Decimal64 @var{a})\n+@deftypefnx {Runtime Function} {unsigned long} __dpd_fixunstddi (_Decimal128 @var{a})\n+@deftypefnx {Runtime Function} {unsigned long} __bid_fixunstddi (_Decimal128 @var{a})\n These functions convert @var{a} to an unsigned long.  Negative values\n all become zero.\n @end deftypefn\n \n-@deftypefn {Runtime Function} _Decimal32 __floatsisd (int @var{i})\n-@deftypefnx {Runtime Function} _Decimal64 __floatsidd (int @var{i})\n-@deftypefnx {Runtime Function} _Decimal128 __floatsitd (int @var{i})\n+@deftypefn {Runtime Function} _Decimal32 __dpd_floatsisd (int @var{i})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_floatsisd (int @var{i})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_floatsidd (int @var{i})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_floatsidd (int @var{i})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_floatsitd (int @var{i})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_floatsitd (int @var{i})\n These functions convert @var{i}, a signed integer, to decimal floating point.\n @end deftypefn\n \n-@deftypefn {Runtime Function} _Decimal32 __floatdisd (long @var{i})\n-@deftypefnx {Runtime Function} _Decimal64 __floatdidd (long @var{i})\n-@deftypefnx {Runtime Function} _Decimal128 __floatditd (long @var{i})\n+@deftypefn {Runtime Function} _Decimal32 __dpd_floatdisd (long @var{i})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_floatdisd (long @var{i})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_floatdidd (long @var{i})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_floatdidd (long @var{i})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_floatditd (long @var{i})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_floatditd (long @var{i})\n These functions convert @var{i}, a signed long, to decimal floating point.\n @end deftypefn\n \n-@deftypefn {Runtime Function} _Decimal32 __floatunssisd (unsigned int @var{i})\n-@deftypefnx {Runtime Function} _Decimal64 __floatunssidd (unsigned int @var{i})\n-@deftypefnx {Runtime Function} _Decimal128 __floatunssitd (unsigned int @var{i})\n+@deftypefn {Runtime Function} _Decimal32 __dpd_floatunssisd (unsigned int @var{i})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_floatunssisd (unsigned int @var{i})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_floatunssidd (unsigned int @var{i})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_floatunssidd (unsigned int @var{i})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_floatunssitd (unsigned int @var{i})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_floatunssitd (unsigned int @var{i})\n These functions convert @var{i}, an unsigned integer, to decimal floating point.\n @end deftypefn\n \n-@deftypefn {Runtime Function} _Decimal32 __floatunsdisd (unsigned long @var{i})\n-@deftypefnx {Runtime Function} _Decimal64 __floatunsdidd (unsigned long @var{i})\n-@deftypefnx {Runtime Function} _Decimal128 __floatunsditd (unsigned long @var{i})\n+@deftypefn {Runtime Function} _Decimal32 __dpd_floatunsdisd (unsigned long @var{i})\n+@deftypefnx {Runtime Function} _Decimal32 __bid_floatunsdisd (unsigned long @var{i})\n+@deftypefnx {Runtime Function} _Decimal64 __dpd_floatunsdidd (unsigned long @var{i})\n+@deftypefnx {Runtime Function} _Decimal64 __bid_floatunsdidd (unsigned long @var{i})\n+@deftypefnx {Runtime Function} _Decimal128 __dpd_floatunsditd (unsigned long @var{i})\n+@deftypefnx {Runtime Function} _Decimal128 __bid_floatunsditd (unsigned long @var{i})\n These functions convert @var{i}, an unsigned long, to decimal floating point.\n @end deftypefn\n \n @subsection Comparison functions\n \n-@deftypefn {Runtime Function} int __unordsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} int __unorddd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} int __unordtd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} int __dpd_unordsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __bid_unordsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_unorddd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __bid_unorddd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_unordtd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} int __bid_unordtd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return a nonzero value if either argument is NaN, otherwise 0.\n @end deftypefn\n \n@@ -636,9 +707,9 @@ Pay careful attention to the return values defined for each set.\n Under the hood, all of these routines are implemented as\n \n @smallexample\n-  if (__unord@var{X}d2 (a, b))\n+  if (__bid_unord@var{X}d2 (a, b))\n     return @var{E};\n-  return __cmp@var{X}d2 (a, b);\n+  return __bid_cmp@var{X}d2 (a, b);\n @end smallexample\n \n @noindent\n@@ -647,45 +718,63 @@ NaN@.  Thus, the meaning of the return value is different for each set.\n Do not rely on this implementation; only the semantics documented\n below are guaranteed.\n \n-@deftypefn {Runtime Function} int __eqsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} int __eqdd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} int __eqtd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} int __dpd_eqsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __bid_eqsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_eqdd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __bid_eqdd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_eqtd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} int __bid_eqtd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return zero if neither argument is NaN, and @var{a} and\n @var{b} are equal.\n @end deftypefn\n \n-@deftypefn {Runtime Function} int __nesd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} int __nedd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} int __netd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} int __dpd_nesd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __bid_nesd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_nedd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __bid_nedd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_netd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} int __bid_netd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return a nonzero value if either argument is NaN, or\n if @var{a} and @var{b} are unequal.\n @end deftypefn\n \n-@deftypefn {Runtime Function} int __gesd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} int __gedd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} int __getd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} int __dpd_gesd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __bid_gesd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_gedd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __bid_gedd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_getd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} int __bid_getd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return a value greater than or equal to zero if\n neither argument is NaN, and @var{a} is greater than or equal to\n @var{b}.\n @end deftypefn\n \n-@deftypefn {Runtime Function} int __ltsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} int __ltdd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} int __lttd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} int __dpd_ltsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __bid_ltsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_ltdd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __bid_ltdd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_lttd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} int __bid_lttd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return a value less than zero if neither argument is\n NaN, and @var{a} is strictly less than @var{b}.\n @end deftypefn\n \n-@deftypefn {Runtime Function} int __lesd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} int __ledd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} int __letd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} int __dpd_lesd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __bid_lesd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_ledd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __bid_ledd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_letd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} int __bid_letd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return a value less than or equal to zero if neither\n argument is NaN, and @var{a} is less than or equal to @var{b}.\n @end deftypefn\n \n-@deftypefn {Runtime Function} int __gtsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n-@deftypefnx {Runtime Function} int __gtdd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n-@deftypefnx {Runtime Function} int __gttd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefn {Runtime Function} int __dpd_gtsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __bid_gtsd2 (_Decimal32 @var{a}, _Decimal32 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_gtdd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __bid_gtdd2 (_Decimal64 @var{a}, _Decimal64 @var{b})\n+@deftypefnx {Runtime Function} int __dpd_gttd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n+@deftypefnx {Runtime Function} int __bid_gttd2 (_Decimal128 @var{a}, _Decimal128 @var{b})\n These functions return a value greater than zero if neither argument\n is NaN, and @var{a} is strictly greater than @var{b}.\n @end deftypefn"}]}