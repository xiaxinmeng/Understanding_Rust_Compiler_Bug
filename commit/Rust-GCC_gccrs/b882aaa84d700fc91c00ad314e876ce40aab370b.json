{"sha": "b882aaa84d700fc91c00ad314e876ce40aab370b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg4MmFhYTg0ZDcwMGZjOTFjMDBhZDMxNGU4NzZjZTQwYWFiMzcwYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-07-30T07:18:54Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-07-30T07:18:54Z"}, "message": "re PR fortran/57530 ([OOP] Wrongly rejects  type_pointer => class_target (which have identical declared type))\n\n2013-07-30  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57530\n        * trans-expr.c (gfc_trans_class_assign): Handle CLASS array\n        functions.\n        (gfc_trans_pointer_assign): Ditto and support pointer assignment\n        of a polymorphic var to a nonpolymorphic var.\n\n2013-07-30  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/57530\n        * gfortran.dg/pointer_assign_8.f90: New.\n        * gfortran.dg/pointer_assign_9.f90: New.\n        * gfortran.dg/pointer_assign_10.f90: New.\n        * gfortran.dg/pointer_assign_11.f90: New.\n\nFrom-SVN: r201328", "tree": {"sha": "73dced4e09b669c48b2b9e9dd25db72d0c002a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73dced4e09b669c48b2b9e9dd25db72d0c002a75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b882aaa84d700fc91c00ad314e876ce40aab370b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b882aaa84d700fc91c00ad314e876ce40aab370b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b882aaa84d700fc91c00ad314e876ce40aab370b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b882aaa84d700fc91c00ad314e876ce40aab370b/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14a8763670981928cef330b7bf8c0244bb982a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a8763670981928cef330b7bf8c0244bb982a29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a8763670981928cef330b7bf8c0244bb982a29"}], "stats": {"total": 288, "additions": 281, "deletions": 7}, "files": [{"sha": "6e00cdc64b03db6a54d92645a2b93aec89e4bf69", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b882aaa84d700fc91c00ad314e876ce40aab370b", "patch": "@@ -1,3 +1,11 @@\n+2013-07-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57530\n+\t* trans-expr.c (gfc_trans_class_assign): Handle CLASS array\n+\tfunctions.\n+\t(gfc_trans_pointer_assign): Ditto and support pointer assignment of\n+\ta polymorphic var to a nonpolymorphic var.\n+\n 2013-07-22  Po Chang  <pchang9@cs.wisc.edu>\n \n \t* match.c (gfc_match_call): Exit loop after setting i."}, {"sha": "74e95b0892806e2a3b081c3eec84438b3b0c77c6", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 96, "deletions": 7, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b882aaa84d700fc91c00ad314e876ce40aab370b", "patch": "@@ -1043,7 +1043,7 @@ gfc_trans_class_assign (gfc_expr *expr1, gfc_expr *expr2, gfc_exec_op op)\n       gfc_add_data_component (expr2);\n       goto assign;\n     }\n-  else if (CLASS_DATA (expr2)->attr.dimension)\n+  else if (CLASS_DATA (expr2)->attr.dimension && expr2->expr_type != EXPR_FUNCTION)\n     {\n       /* Insert an additional assignment which sets the '_vptr' field.  */\n       lhs = gfc_copy_expr (expr1);\n@@ -1061,9 +1061,10 @@ gfc_trans_class_assign (gfc_expr *expr1, gfc_expr *expr2, gfc_exec_op op)\n \n   /* Do the actual CLASS assignment.  */\n   if (expr2->ts.type == BT_CLASS\n-\t&& !CLASS_DATA (expr2)->attr.dimension)\n+      && !CLASS_DATA (expr2)->attr.dimension)\n     op = EXEC_ASSIGN;\n-  else\n+  else if (expr2->expr_type != EXPR_FUNCTION || expr2->ts.type != BT_CLASS\n+\t   || !CLASS_DATA (expr2)->attr.dimension)\n     gfc_add_data_component (expr1);\n \n assign:\n@@ -6417,6 +6418,7 @@ gfc_trans_pointer_assign (gfc_code * code)\n tree\n gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n {\n+  gfc_expr *expr1_vptr = NULL;\n   gfc_se lse;\n   gfc_se rse;\n   stmtblock_t block;\n@@ -6437,6 +6439,15 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n   if (!scalar)\n     gfc_free_ss_chain (ss);\n \n+  if (expr1->ts.type == BT_DERIVED && expr2->ts.type == BT_CLASS\n+      && expr2->expr_type != EXPR_FUNCTION)\n+    {\n+      gfc_add_data_component (expr2);\n+      /* The following is required as gfc_add_data_component doesn't\n+\t update ts.type if there is a tailing REF_ARRAY.  */\n+      expr2->ts.type = BT_DERIVED;\n+    }\n+\n   if (scalar)\n     {\n       /* Scalar pointers.  */\n@@ -6485,8 +6496,11 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t\t\t    build_int_cst (gfc_charlen_type_node, 0));\n \t}\n \n+      if (expr1->ts.type == BT_DERIVED && expr2->ts.type == BT_CLASS)\n+\trse.expr = gfc_class_data_get (rse.expr);\n+\n       gfc_add_modify (&block, lse.expr,\n-\t\t\t   fold_convert (TREE_TYPE (lse.expr), rse.expr));\n+\t\t      fold_convert (TREE_TYPE (lse.expr), rse.expr));\n \n       gfc_add_block_to_block (&block, &rse.post);\n       gfc_add_block_to_block (&block, &lse.post);\n@@ -6508,8 +6522,12 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t  break;\n       rank_remap = (remap && remap->u.ar.end[0]);\n \n+      gfc_init_se (&lse, NULL);\n       if (remap)\n \tlse.descriptor_only = 1;\n+      if (expr2->expr_type == EXPR_FUNCTION && expr2->ts.type == BT_CLASS\n+\t  && expr1->ts.type == BT_CLASS)\n+\texpr1_vptr = gfc_copy_expr (expr1);\n       gfc_conv_expr_descriptor (&lse, expr1);\n       strlen_lhs = lse.string_length;\n       desc = lse.expr;\n@@ -6526,8 +6544,51 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t  gfc_init_se (&rse, NULL);\n \t  rse.direct_byref = 1;\n \t  rse.byref_noassign = 1;\n-\t  gfc_conv_expr_descriptor (&rse, expr2);\n-\t  strlen_rhs = rse.string_length;\n+\n+\t  if (expr2->expr_type == EXPR_FUNCTION && expr2->ts.type == BT_CLASS)\n+\t    {\n+\t      gfc_conv_function_expr (&rse, expr2);\n+\n+\t      if (expr1->ts.type != BT_CLASS)\n+\t\trse.expr = gfc_class_data_get (rse.expr);\n+\t      else\n+\t\t{\n+\t\t  tmp = gfc_create_var (TREE_TYPE (rse.expr), \"ptrtemp\");\n+\t\t  gfc_add_modify (&lse.pre, tmp, rse.expr);\n+\n+\t\t  gfc_add_vptr_component (expr1_vptr);\n+\t\t  gfc_init_se (&rse, NULL);\n+\t\t  rse.want_pointer = 1;\n+\t\t  gfc_conv_expr (&rse, expr1_vptr);\n+\t\t  gfc_add_modify (&lse.pre, rse.expr,\n+\t\t\t\t  fold_convert (TREE_TYPE (rse.expr),\n+\t\t\t\t\t\tgfc_class_vptr_get (tmp)));\n+\t\t  rse.expr = gfc_class_data_get (tmp);\n+\t\t}\n+\t    }\n+\t  else if (expr2->expr_type == EXPR_FUNCTION)\n+\t    {\n+\t      tree bound[GFC_MAX_DIMENSIONS];\n+\t      int i;\n+\n+\t      for (i = 0; i < expr2->rank; i++)\n+\t\tbound[i] = NULL_TREE;\n+\t      tmp = gfc_typenode_for_spec (&expr2->ts);\n+\t      tmp = gfc_get_array_type_bounds (tmp, expr2->rank, 0,\n+\t\t\t\t\t       bound, bound, 0,\n+\t\t\t\t\t       GFC_ARRAY_POINTER_CONT, false);\n+\t      tmp = gfc_create_var (tmp, \"ptrtemp\");\n+\t      lse.expr = tmp;\n+\t      lse.direct_byref = 1;\n+\t      gfc_conv_expr_descriptor (&lse, expr2);\n+\t      strlen_rhs = lse.string_length;\n+\t      rse.expr = tmp;\n+\t    }\n+\t  else\n+\t    {\n+\t      gfc_conv_expr_descriptor (&rse, expr2);\n+\t      strlen_rhs = rse.string_length;\n+\t    }\n \t}\n       else if (expr2->expr_type == EXPR_VARIABLE)\n \t{\n@@ -6551,19 +6612,47 @@ gfc_trans_pointer_assignment (gfc_expr * expr1, gfc_expr * expr2)\n \t      gfc_add_modify (&lse.post, GFC_DECL_SPAN(decl), tmp);\n \t    }\n \t}\n+      else if (expr2->expr_type == EXPR_FUNCTION && expr2->ts.type == BT_CLASS)\n+\t{\n+\t  gfc_init_se (&rse, NULL);\n+\t  rse.want_pointer = 1;\n+\t  gfc_conv_function_expr (&rse, expr2);\n+\t  if (expr1->ts.type != BT_CLASS)\n+\t    {\n+\t      rse.expr = gfc_class_data_get (rse.expr);\n+\t      gfc_add_modify (&lse.pre, desc, rse.expr);\n+\t    }\n+\t  else\n+\t    {\n+\t      tmp = gfc_create_var (TREE_TYPE (rse.expr), \"ptrtemp\");\n+\t      gfc_add_modify (&lse.pre, tmp, rse.expr);\n+\n+\t      gfc_add_vptr_component (expr1_vptr);\n+\t      gfc_init_se (&rse, NULL);\n+\t      rse.want_pointer = 1;\n+\t      gfc_conv_expr (&rse, expr1_vptr);\n+\t      gfc_add_modify (&lse.pre, rse.expr,\n+\t\t\t      fold_convert (TREE_TYPE (rse.expr),\n+\t\t\t\t\tgfc_class_vptr_get (tmp)));\n+\t      rse.expr = gfc_class_data_get (tmp);\n+\t      gfc_add_modify (&lse.pre, desc, rse.expr);\n+\t    }\n+\t}\n       else\n \t{\n \t  /* Assign to a temporary descriptor and then copy that\n \t     temporary to the pointer.  */\n \t  tmp = gfc_create_var (TREE_TYPE (desc), \"ptrtemp\");\n-\n \t  lse.expr = tmp;\n \t  lse.direct_byref = 1;\n \t  gfc_conv_expr_descriptor (&lse, expr2);\n \t  strlen_rhs = lse.string_length;\n \t  gfc_add_modify (&lse.pre, desc, tmp);\n \t}\n \n+      if (expr1_vptr)\n+\tgfc_free_expr (expr1_vptr);\n+\n       gfc_add_block_to_block (&block, &lse.pre);\n       if (rank_remap)\n \tgfc_add_block_to_block (&block, &rse.pre);"}, {"sha": "734d78a4f30b86799166d16f9dda40398034415d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b882aaa84d700fc91c00ad314e876ce40aab370b", "patch": "@@ -1,3 +1,11 @@\n+2013-07-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/57530\n+\t* gfortran.dg/pointer_assign_8.f90: New.\n+\t* gfortran.dg/pointer_assign_9.f90: New.\n+\t* gfortran.dg/pointer_assign_10.f90: New.\n+\t* gfortran.dg/pointer_assign_11.f90: New.\n+\n 2013-07-30  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* gcc.target/arm/pr57637.c: New testcase."}, {"sha": "756e530209c0356a6c4c47024738adcd36cd2cc2", "filename": "gcc/testsuite/gfortran.dg/pointer_assign_10.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_10.f90?ref=b882aaa84d700fc91c00ad314e876ce40aab370b", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+!\n+! PR fortran/57530\n+!\n+!\n+! TYPE => TYPE pointer assignment for functions\n+!\n+module m\n+  implicit none\n+  type t\n+    integer :: ii = 55\n+  end type t\n+contains\n+  function f1()\n+    type(t), pointer :: f1\n+    allocate (f1)\n+    f1%ii = 123\n+  end function f1\n+  function f2()\n+    type(t), pointer :: f2(:)\n+    allocate (f2(3))\n+    f2(:)%ii = [-11,-22,-33]\n+  end function f2\n+end module m\n+\n+program test\n+  use m\n+  implicit none\n+  type(t), pointer :: p1, p2(:), p3(:,:)\n+  p1 => f1()\n+  if (p1%ii /= 123) call abort ()\n+  p2 => f2()\n+  if (any (p2%ii /= [-11,-22,-33])) call abort ()\n+  p3(2:2,1:3) => f2()\n+  if (any (p3(2,:)%ii /= [-11,-22,-33])) call abort ()\n+end program test"}, {"sha": "f32c53157118c887efb0abd920082ecf5fb50477", "filename": "gcc/testsuite/gfortran.dg/pointer_assign_11.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_11.f90?ref=b882aaa84d700fc91c00ad314e876ce40aab370b", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do run }\n+!\n+! PR fortran/57530\n+!\n+!\n+! CLASS => CLASS pointer assignment for function results\n+!\n+module m\n+  implicit none\n+  type t\n+    integer :: ii = 55\n+  end type t\n+  type, extends(t) :: t2\n+  end type t2\n+contains\n+  function f1()\n+    class(t), pointer :: f1\n+    allocate (f1)\n+    f1%ii = 123\n+  end function f1\n+  function f2()\n+    class(t), pointer :: f2(:)\n+    allocate (f2(3))\n+    f2(:)%ii = [-11,-22,-33]\n+  end function f2\n+end module m\n+\n+program test\n+  use m\n+  implicit none\n+  class(t), pointer :: p1, p2(:), p3(:,:)\n+  type(t) :: my_t\n+  type(t2) :: my_t2\n+\n+  allocate (t2 :: p1, p2(1), p3(1,1))\n+  if (.not. same_type_as (p1, my_t2)) call abort()\n+  if (.not. same_type_as (p2, my_t2)) call abort()\n+  if (.not. same_type_as (p3, my_t2)) call abort()\n+\n+  p1 => f1()\n+  if (p1%ii /= 123) call abort ()\n+  if (.not. same_type_as (p1, my_t)) call abort()\n+\n+  p2 => f2()\n+  if (any (p2%ii /= [-11,-22,-33])) call abort ()\n+  if (.not. same_type_as (p2, my_t)) call abort()\n+\n+  p3(2:2,1:3) => f2()\n+  if (any (p3(2,:)%ii /= [-11,-22,-33])) call abort ()\n+  if (.not. same_type_as (p3, my_t)) call abort()\n+end program test"}, {"sha": "e8fb2c3a6b2caa33b658d55384abfd1b4eced05c", "filename": "gcc/testsuite/gfortran.dg/pointer_assign_8.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_8.f90?ref=b882aaa84d700fc91c00ad314e876ce40aab370b", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do run }\n+!\n+! PR fortran/57530\n+!\n+!\n+! TYPE => CLASS pointer assignment for variables\n+!\n+module m\n+  implicit none\n+  type t\n+    integer :: ii = 55\n+  end type t\n+contains\n+  subroutine sub (tgt, tgt2)\n+    class(t), target :: tgt, tgt2(:)\n+    type(t), pointer :: ptr, ptr2(:), ptr3(:,:)\n+\n+    if (tgt%ii /= 43) call abort()\n+    if (size (tgt2) /= 3) call abort()\n+    if (any (tgt2(:)%ii /= [11,22,33])) call abort()\n+\n+    ptr => tgt  ! TYPE => CLASS\n+    ptr2 => tgt2  ! TYPE => CLASS\n+    ptr3(-3:-3,1:3) => tgt2  ! TYPE => CLASS\n+\n+    if (.not. associated(ptr)) call abort()\n+    if (.not. associated(ptr2)) call abort()\n+    if (.not. associated(ptr3)) call abort()\n+    if (.not. associated(ptr,tgt)) call abort()\n+    if (.not. associated(ptr2,tgt2)) call abort()\n+    if (ptr%ii /= 43) call abort()\n+    if (size (ptr2) /= 3) call abort()\n+    if (size (ptr3) /= 3) call abort()\n+    if (any (ptr2(:)%ii /= [11,22,33])) call abort()\n+    if (any (shape (ptr3) /= [1,3])) call abort()\n+    if (any (ptr3(-3,:)%ii /= [11,22,33])) call abort()\n+  end subroutine sub\n+end module m\n+\n+use m\n+type(t), target :: x\n+type(t), target :: y(3)\n+x%ii = 43\n+y(:)%ii = [11,22,33]\n+call sub(x,y)\n+end"}, {"sha": "7f8152aae6b916ae9cc1bc573adf157875dbc4a3", "filename": "gcc/testsuite/gfortran.dg/pointer_assign_9.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b882aaa84d700fc91c00ad314e876ce40aab370b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_assign_9.f90?ref=b882aaa84d700fc91c00ad314e876ce40aab370b", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+!\n+! PR fortran/57530\n+!\n+!\n+! TYPE => CLASS pointer assignment for functions\n+!\n+module m\n+  implicit none\n+  type t\n+    integer :: ii = 55\n+  end type t\n+contains\n+  function f1()\n+    class(t), pointer :: f1\n+    allocate (f1)\n+    f1%ii = 123\n+  end function f1\n+  function f2()\n+    class(t), pointer :: f2(:)\n+    allocate (f2(3))\n+    f2(:)%ii = [-11,-22,-33]\n+  end function f2\n+end module m\n+\n+program test\n+  use m\n+  implicit none\n+  type(t), pointer :: p1, p2(:),p3(:,:)\n+  p1 => f1()\n+  if (p1%ii /= 123) call abort ()\n+  p2 => f2()\n+  if (any (p2%ii /= [-11,-22,-33])) call abort ()\n+  p3(2:2,1:3) => f2()\n+  if (any (p3(2,:)%ii /= [-11,-22,-33])) call abort ()\n+end program test"}]}