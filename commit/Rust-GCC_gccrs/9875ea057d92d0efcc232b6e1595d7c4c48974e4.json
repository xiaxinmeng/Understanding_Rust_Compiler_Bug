{"sha": "9875ea057d92d0efcc232b6e1595d7c4c48974e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3NWVhMDU3ZDkyZDBlZmNjMjMyYjZlMTU5NWQ3YzRjNDg5NzRlNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-05-01T22:40:27Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-05-01T22:40:27Z"}, "message": "re PR libstdc++/6533 (libstdc++ broken on unsigned char platforms)\n\n\n2002-05-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/6533\n\t* include/bits/streambuf_iterator.h (istreambuf_iterator::_M_get): New.\n\t(istreambuf_iterator::equal): Use it.\n\t(istreambuf_iterator::operator*): Use it.\n\nFrom-SVN: r53024", "tree": {"sha": "5ebb7ea39bad25a2ff6d4899a81d2f287c857171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ebb7ea39bad25a2ff6d4899a81d2f287c857171"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9875ea057d92d0efcc232b6e1595d7c4c48974e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9875ea057d92d0efcc232b6e1595d7c4c48974e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9875ea057d92d0efcc232b6e1595d7c4c48974e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9875ea057d92d0efcc232b6e1595d7c4c48974e4/comments", "author": null, "committer": null, "parents": [{"sha": "ea619b46b171183a410173ae69eaa7d7c6cf07eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea619b46b171183a410173ae69eaa7d7c6cf07eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea619b46b171183a410173ae69eaa7d7c6cf07eb"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "7eba269f7cf42804232262f3c5d842fa83d6655f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9875ea057d92d0efcc232b6e1595d7c4c48974e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9875ea057d92d0efcc232b6e1595d7c4c48974e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9875ea057d92d0efcc232b6e1595d7c4c48974e4", "patch": "@@ -1,3 +1,10 @@\n+2002-05-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/6533\n+\t* include/bits/streambuf_iterator.h (istreambuf_iterator::_M_get): New.\n+\t(istreambuf_iterator::equal): Use it.\n+\t(istreambuf_iterator::operator*): Use it.\t\n+\n 2002-05-01  Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/6513"}, {"sha": "659caecb2aff26ace097e4f8730328a8648e9ce6", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9875ea057d92d0efcc232b6e1595d7c4c48974e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9875ea057d92d0efcc232b6e1595d7c4c48974e4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=9875ea057d92d0efcc232b6e1595d7c4c48974e4", "patch": "@@ -77,24 +77,10 @@ namespace std\n       istreambuf_iterator(streambuf_type* __s) throw()\n       : _M_sbuf(__s), _M_c(-2) { }\n        \n-      // NB: This should really have an int_type return\n-      // value, so \"end of stream\" postion can be checked without\n-      // hacking.\n+      // NB: The result of operator*() on an end of stream is undefined.\n       char_type \n       operator*() const\n-      { \n-\t// The result of operator*() on an end of stream is undefined.\n-\tint_type __ret = traits_type::eof();\n-\tif (_M_sbuf)\n-\t  { \n-\t    if (_M_c != static_cast<int_type>(-2))\n-\t      __ret = _M_c;\n-\t    else \n-\t      if ((__ret = _M_sbuf->sgetc()) == traits_type::eof())\n-\t\t_M_sbuf = 0;\n-\t  }\n-\treturn traits_type::to_char_type(__ret);\n-      }\n+      { return traits_type::to_char_type(_M_get()); }\n \t\n       istreambuf_iterator& \n       operator++()\n@@ -124,11 +110,27 @@ namespace std\n       equal(const istreambuf_iterator& __b) const\n       {\n \tconst int_type __eof = traits_type::eof();\n-\tbool __thiseof = traits_type::eq_int_type(this->operator*(), __eof);\n-\tbool __beof = traits_type::eq_int_type(__b.operator*(), __eof);\n+\tbool __thiseof = _M_get() == __eof;\n+\tbool __beof = __b._M_get() == __eof;\n \treturn (__thiseof && __beof || (!__thiseof && !__beof));\n       }\n #endif\n+\n+    private:\n+      int_type \n+      _M_get() const\n+      { \n+\tint_type __ret = traits_type::eof();\n+\tif (_M_sbuf)\n+\t  { \n+\t    if (_M_c != static_cast<int_type>(-2))\n+\t      __ret = _M_c;\n+\t    else \n+\t      if ((__ret = _M_sbuf->sgetc()) == traits_type::eof())\n+\t\t_M_sbuf = 0;\n+\t  }\n+\treturn __ret;\n+      }\n     };\n \n   template<typename _CharT, typename _Traits>"}]}