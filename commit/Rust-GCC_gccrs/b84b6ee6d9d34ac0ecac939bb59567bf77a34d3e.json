{"sha": "b84b6ee6d9d34ac0ecac939bb59567bf77a34d3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg0YjZlZTZkOWQzNGFjMGVjYWM5MzliYjU5NTY3YmY3N2EzNGQzZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-08-07T09:10:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-08-07T09:10:13Z"}, "message": "dwarf2out.c (output_fde): When doing hot/cold partitioning...\n\n\t* dwarf2out.c (output_fde): When doing hot/cold partitioning, use\n\tfde->dw_fde_begin as begin label instead of hot/cold label.\n\tUse LLSDAC label instead of LLSDA for second section lsda.\n\t(dwarf2out_do_cfi_startproc): Add SECOND argument.  Use LLSDAC\n\tlabel instead of LLSDA if it is true.\n\t(dwarf2out_begin_prologue, dwarf2out_switch_text_section): Adjust\n\tcallers.\n\t* except.c (add_call_site, dw2_size_of_call_site_table): Add\n\tSECTION argument.  Use it as index into crtl->eh.call_site_record\n\tarray.\n\t(dw2_output_call_site_table): Likewise.  Add CS_FORMAT argument,\n\tuse it to determine how to print table entries instead of using\n\t#ifdef HAVE_AS_LEB128.  For SECTION > 0 use hot resp. cold\n\tlabel instead of normal begin label as base.\n\t(sjlj_assign_call_site_values): Adjust add_call_site caller.\n\t(convert_to_eh_region_ranges): When doing hot/cold partitioning,\n\tensure no EH range spans between sections and that landing pads\n\tare always in the corresponding section.\n\t(sjlj_size_of_call_site_table, sjlj_output_call_site_table): Adjust\n\tfor crtl->eh.call_site_record being an array rather than scalar.\n\t(output_one_function_exception_table): New function, copied\n\tfrom output_function_exception_table.  Adjust\n\tdw2_size_of_call_site_table, dw2_output_call_site_table\n\tcallers.  For SECOND section use *C suffixed labels.\n\t(output_function_exception_table): Call\n\toutput_one_function_exception_table and, when doing hot/cold\n\tpartitioning, also another time for the second section.\n\t* opts.c: Include except.h.\n\t(decode_options): Allow -freorder-blocks-and-partition with\n\texceptions, unless SJLJ or TARGET_UNWIND_INFO.\n\t* Makefile.in (opts.o): Depend on $(EXCEPT_H).\n\t* function.h (struct rtl_eh): Change call_site_record from\n\tscalar into array of 2 elements.\n\n\t* g++.dg/tree-prof/partition1.C: New test.\n\nFrom-SVN: r150560", "tree": {"sha": "5eeac0fdc97c40150d620cbb95683e2da68e5217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eeac0fdc97c40150d620cbb95683e2da68e5217"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b84b6ee6d9d34ac0ecac939bb59567bf77a34d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84b6ee6d9d34ac0ecac939bb59567bf77a34d3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b84b6ee6d9d34ac0ecac939bb59567bf77a34d3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84b6ee6d9d34ac0ecac939bb59567bf77a34d3e/comments", "author": null, "committer": null, "parents": [{"sha": "60419cc8912bb1b64298c8b83c55b071b0717a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60419cc8912bb1b64298c8b83c55b071b0717a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60419cc8912bb1b64298c8b83c55b071b0717a39"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "9fa60ffbe4eabef59242d8d7e580c1aa3f9f942d", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84b6ee6d9d34ac0ecac939bb59567bf77a34d3e/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84b6ee6d9d34ac0ecac939bb59567bf77a34d3e/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=b84b6ee6d9d34ac0ecac939bb59567bf77a34d3e", "patch": "@@ -174,7 +174,7 @@ static int add_call_site (rtx, int, int);\n static void push_uleb128 (varray_type *, unsigned int);\n static void push_sleb128 (varray_type *, int);\n #ifndef HAVE_AS_LEB128\n-static int dw2_size_of_call_site_table (void);\n+static int dw2_size_of_call_site_table (int);\n static int sjlj_size_of_call_site_table (void);\n #endif\n static void dw2_output_call_site_table (int, int);"}]}