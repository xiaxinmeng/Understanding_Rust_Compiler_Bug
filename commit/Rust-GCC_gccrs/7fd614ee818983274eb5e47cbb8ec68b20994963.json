{"sha": "7fd614ee818983274eb5e47cbb8ec68b20994963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZkNjE0ZWU4MTg5ODMyNzRlYjVlNDdjYmI4ZWM2OGIyMDk5NDk2Mw==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-06-11T18:29:45Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-06-11T18:29:45Z"}, "message": "PR fortran/95544 - Fix ICE in NULL() argument to intrinsics\n\nFortran 2018: An argument to an intrinsic procedure other than ASSOCIATED,\nNULL, or PRESENT shall be a data object.  An EXPR_NULL is not a data\nobject.  Add checks for intrinsics.\n\n2020-06-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n\t    Harald Anlauf  <anlauf@gmx.de>\n\ngcc/fortran/\n\tPR fortran/95544\n\t* check.c (invalid_null_arg): Rename to gfc_invalid_null_arg.\n\t(gfc_check_associated, gfc_check_kind, gfc_check_merge)\n\t(gfc_check_shape, gfc_check_size, gfc_check_spread)\n\t(gfc_check_transfer): Adjust.\n\t(gfc_check_len_lentrim, gfc_check_trim): Check for NULL() argument.\n\t* gfortran.h: Declare gfc_invalid_null_arg ().\n\t* intrinsic.c (check_arglist): Check for NULL() argument.", "tree": {"sha": "aea6cae53ec66c1965fd4e11cfe0d8396fcb63e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aea6cae53ec66c1965fd4e11cfe0d8396fcb63e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fd614ee818983274eb5e47cbb8ec68b20994963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd614ee818983274eb5e47cbb8ec68b20994963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd614ee818983274eb5e47cbb8ec68b20994963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd614ee818983274eb5e47cbb8ec68b20994963/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c140cfbfa4b465a29ef26f1fdfef04c671e3c9c"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "148a326981564975f47f47a08bae55aff1e76ac4", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd614ee818983274eb5e47cbb8ec68b20994963/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd614ee818983274eb5e47cbb8ec68b20994963/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=7fd614ee818983274eb5e47cbb8ec68b20994963", "patch": "@@ -1431,8 +1431,8 @@ gfc_check_x_yd (gfc_expr *x, gfc_expr *y)\n   return true;\n }\n \n-static bool\n-invalid_null_arg (gfc_expr *x)\n+bool\n+gfc_invalid_null_arg (gfc_expr *x)\n {\n   if (x->expr_type == EXPR_NULL)\n     {\n@@ -1451,7 +1451,7 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n   int i;\n   bool t;\n \n-  if (invalid_null_arg (pointer))\n+  if (gfc_invalid_null_arg (pointer))\n     return false;\n \n   attr1 = gfc_expr_attr (pointer);\n@@ -1477,7 +1477,7 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n   if (target == NULL)\n     return true;\n \n-  if (invalid_null_arg (target))\n+  if (gfc_invalid_null_arg (target))\n     return false;\n \n   if (target->expr_type == EXPR_VARIABLE || target->expr_type == EXPR_FUNCTION)\n@@ -3374,7 +3374,7 @@ gfc_check_kill_sub (gfc_expr *pid, gfc_expr *sig, gfc_expr *status)\n bool\n gfc_check_kind (gfc_expr *x)\n {\n-  if (invalid_null_arg (x))\n+  if (gfc_invalid_null_arg (x))\n     return false;\n \n   if (gfc_bt_struct (x->ts.type) || x->ts.type == BT_CLASS)\n@@ -3453,6 +3453,9 @@ gfc_check_len_lentrim (gfc_expr *s, gfc_expr *kind)\n   if (!type_check (s, 0, BT_CHARACTER))\n     return false;\n \n+  if (gfc_invalid_null_arg (s))\n+    return false;\n+\n   if (!kind_check (kind, 1, BT_INTEGER))\n     return false;\n   if (kind && !gfc_notify_std (GFC_STD_F2003, \"%qs intrinsic \"\n@@ -4138,10 +4141,10 @@ gfc_check_transf_bit_intrins (gfc_actual_arglist *ap)\n bool\n gfc_check_merge (gfc_expr *tsource, gfc_expr *fsource, gfc_expr *mask)\n {\n-  if (invalid_null_arg (tsource))\n+  if (gfc_invalid_null_arg (tsource))\n     return false;\n \n-  if (invalid_null_arg (fsource))\n+  if (gfc_invalid_null_arg (fsource))\n     return false;\n \n   if (!same_type_check (tsource, 0, fsource, 1))\n@@ -5061,7 +5064,7 @@ gfc_check_shape (gfc_expr *source, gfc_expr *kind)\n {\n   gfc_array_ref *ar;\n \n-  if (invalid_null_arg (source))\n+  if (gfc_invalid_null_arg (source))\n     return false;\n \n   if (source->rank == 0 || source->expr_type != EXPR_VARIABLE)\n@@ -5146,7 +5149,7 @@ gfc_check_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n bool\n gfc_check_sizeof (gfc_expr *arg)\n {\n-  if (invalid_null_arg (arg))\n+  if (gfc_invalid_null_arg (arg))\n     return false;\n \n   if (arg->ts.type == BT_PROCEDURE)\n@@ -5634,7 +5637,7 @@ gfc_check_sngl (gfc_expr *a)\n bool\n gfc_check_spread (gfc_expr *source, gfc_expr *dim, gfc_expr *ncopies)\n {\n-  if (invalid_null_arg (source))\n+  if (gfc_invalid_null_arg (source))\n     return false;\n \n   if (source->rank >= GFC_MAX_DIMENSIONS)\n@@ -6167,7 +6170,7 @@ gfc_check_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n   size_t source_size;\n   size_t result_size;\n \n-  if (invalid_null_arg (source))\n+  if (gfc_invalid_null_arg (source))\n     return false;\n \n   /* SOURCE shall be a scalar or array of any type.  */\n@@ -6186,7 +6189,7 @@ gfc_check_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n   if (mold->ts.type == BT_BOZ && illegal_boz_arg (mold))\n     return false;\n \n-  if (invalid_null_arg (mold))\n+  if (gfc_invalid_null_arg (mold))\n     return false;\n \n   /* MOLD shall be a scalar or array of any type.  */\n@@ -6412,6 +6415,9 @@ gfc_check_trim (gfc_expr *x)\n   if (!type_check (x, 0, BT_CHARACTER))\n     return false;\n \n+  if (gfc_invalid_null_arg (x))\n+    return false;\n+\n   if (!scalar_check (x, 0))\n     return false;\n "}, {"sha": "6d76efb52986a2c0fbae5526b402f033a42ea30c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd614ee818983274eb5e47cbb8ec68b20994963/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd614ee818983274eb5e47cbb8ec68b20994963/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7fd614ee818983274eb5e47cbb8ec68b20994963", "patch": "@@ -3553,6 +3553,7 @@ bool gfc_calculate_transfer_sizes (gfc_expr*, gfc_expr*, gfc_expr*,\n bool gfc_boz2int (gfc_expr *, int);\n bool gfc_boz2real (gfc_expr *, int);\n bool gfc_invalid_boz (const char *, locus *);\n+bool gfc_invalid_null_arg (gfc_expr *);\n \n \n /* class.c */"}, {"sha": "60d91f658bddb4150fde37dff5397ff59021022d", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd614ee818983274eb5e47cbb8ec68b20994963/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd614ee818983274eb5e47cbb8ec68b20994963/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=7fd614ee818983274eb5e47cbb8ec68b20994963", "patch": "@@ -4442,6 +4442,18 @@ check_arglist (gfc_actual_arglist **ap, gfc_intrinsic_sym *sym,\n \t  return false;\n \t}\n \n+      /* F2018, p. 328: An argument to an intrinsic procedure other than\n+\t ASSOCIATED, NULL, or PRESENT shall be a data object.  An EXPR_NULL\n+\t is not a data object.  */\n+      if (actual->expr->expr_type == EXPR_NULL\n+\t  && (!(sym->id == GFC_ISYM_ASSOCIATED\n+\t\t|| sym->id == GFC_ISYM_NULL\n+\t\t|| sym->id == GFC_ISYM_PRESENT)))\n+\t{\n+\t  gfc_invalid_null_arg (actual->expr);\n+\t  return false;\n+\t}\n+\n       /* If the formal argument is INTENT([IN]OUT), check for definability.  */\n       if (formal->intent == INTENT_INOUT || formal->intent == INTENT_OUT)\n \t{"}, {"sha": "01b9fc5cc9fea240a61b5b918feb87770c6782a4", "filename": "gcc/testsuite/gfortran.dg/pr95544.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fd614ee818983274eb5e47cbb8ec68b20994963/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95544.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fd614ee818983274eb5e47cbb8ec68b20994963/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95544.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95544.f90?ref=7fd614ee818983274eb5e47cbb8ec68b20994963", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! PR fortran/95544 - ICE in gfc_can_put_var_on_stack, at fortran/trans-decl.c:494\n+\n+program test\n+   character(:), allocatable :: z\n+   character(:), pointer     :: p\n+   character(1), pointer     :: c\n+   print *, adjustl (null(z)) ! { dg-error \"is not permitted as actual argument\" }\n+   print *, adjustr (null(z)) ! { dg-error \"is not permitted as actual argument\" }\n+   print *, len     (null(p)) ! { dg-error \"is not permitted as actual argument\" }\n+   print *, len     (null(z)) ! { dg-error \"is not permitted as actual argument\" }\n+   print *, len_trim(null(c)) ! { dg-error \"is not permitted as actual argument\" }\n+   print *, len_trim(null(z)) ! { dg-error \"is not permitted as actual argument\" }\n+   print *, trim    (null(z)) ! { dg-error \"is not permitted as actual argument\" }\n+end"}]}