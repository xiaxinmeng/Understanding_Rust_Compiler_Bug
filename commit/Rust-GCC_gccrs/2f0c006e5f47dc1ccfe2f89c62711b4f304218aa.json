{"sha": "2f0c006e5f47dc1ccfe2f89c62711b4f304218aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYwYzAwNmU1ZjQ3ZGMxY2NmZTJmODljNjI3MTFiNGYzMDQyMThhYQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-06-17T21:11:38Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-06-17T21:11:38Z"}, "message": "class.c (build_clone): Don't call defer_fn, let mark_used do it.\n\n\t* class.c (build_clone): Don't call defer_fn, let mark_used do it.\n\t* cp-tree.h (defer_fn): Delete.\n\t* decl2.c (defer_fn): Delete.\n\t(finish_file): Simplify deferred_fns loops; check that\n\tonly used inline functions get into deferred_fns.\n\t(mark_used): Inline previous contents of defer_fn.\n\nFrom-SVN: r83310", "tree": {"sha": "675a168c8b96b039f57a4ce161849a75c05d9378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/675a168c8b96b039f57a4ce161849a75c05d9378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1382f0f09da0d329609d3fccd6a4eafa48e94665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1382f0f09da0d329609d3fccd6a4eafa48e94665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1382f0f09da0d329609d3fccd6a4eafa48e94665"}], "stats": {"total": 67, "additions": 29, "deletions": 38}, "files": [{"sha": "1c1f0d660cda0185dd6c11378797109e1890814e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2f0c006e5f47dc1ccfe2f89c62711b4f304218aa", "patch": "@@ -1,3 +1,12 @@\n+2004-06-17  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* class.c (build_clone): Don't call defer_fn, let mark_used do it.\n+\t* cp-tree.h (defer_fn): Delete.\n+\t* decl2.c (defer_fn): Delete.\n+\t(finish_file): Simplify deferred_fns loops; check that\n+\tonly used inline functions get into deferred_fns.\n+\t(mark_used): Inline previous contents of defer_fn.\n+\n 2004-06-16  Richard Henderson  <rth@redhat.com>\n \n \t* cp-tree.h (COMPOUND_STMT_TRY_BLOCK, COMPOUND_STMT_BODY_BLOCK): Kill."}, {"sha": "1853d4faadfbdd24722ea3c80f0aa814f5d2ad3c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2f0c006e5f47dc1ccfe2f89c62711b4f304218aa", "patch": "@@ -3915,8 +3915,6 @@ build_clone (tree fn, tree name)\n       DECL_TEMPLATE_INFO (result) = copy_node (DECL_TEMPLATE_INFO (result));\n       DECL_TI_TEMPLATE (result) = clone;\n     }\n-  else if (DECL_DEFERRED_FN (fn))\n-    defer_fn (clone);\n \n   return clone;\n }"}, {"sha": "cb2a1431a93af623c4ddeb79a5721b5a3c127fb2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2f0c006e5f47dc1ccfe2f89c62711b4f304218aa", "patch": "@@ -3739,7 +3739,6 @@ extern tree grokfield (tree, tree, tree, tree, tree);\n extern tree grokbitfield (tree, tree, tree);\n extern tree groktypefield\t\t\t(tree, tree);\n extern void cplus_decl_attributes (tree *, tree, int);\n-extern void defer_fn (tree);\n extern void finish_anon_union (tree);\n extern tree finish_table (tree, tree, tree, int);\n extern tree coerce_new_type (tree);"}, {"sha": "eacab5f283b1e676b7608d9722707959e607b791", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f0c006e5f47dc1ccfe2f89c62711b4f304218aa/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2f0c006e5f47dc1ccfe2f89c62711b4f304218aa", "patch": "@@ -1136,21 +1136,6 @@ cplus_decl_attributes (tree *decl, tree attributes, int flags)\n     SET_IDENTIFIER_TYPE_VALUE (DECL_NAME (*decl), TREE_TYPE (*decl));\n }\n \f\n-/* Defer the compilation of the FN until the end of compilation.  */\n-\n-void\n-defer_fn (tree fn)\n-{\n-  if (DECL_DEFERRED_FN (fn))\n-    return;\n-  DECL_DEFERRED_FN (fn) = 1;\n-  DECL_DEFER_OUTPUT (fn) = 1;\n-  if (!deferred_fns)\n-    VARRAY_TREE_INIT (deferred_fns, 32, \"deferred_fns\");\n-\n-  VARRAY_PUSH_TREE (deferred_fns, fn);\n-}\n-\n /* Walks through the namespace- or function-scope anonymous union OBJECT,\n    building appropriate ALIAS_DECLs.  Returns one of the fields for use in\n    the mangled name.  */\n@@ -2753,6 +2738,9 @@ finish_file (void)\n \t{\n \t  tree decl = VARRAY_TREE (deferred_fns, i);\n \n+\t  if (! DECL_DECLARED_INLINE_P (decl) || ! TREE_USED (decl))\n+\t    abort ();\n+\n \t  /* Does it need synthesizing?  */\n \t  if (DECL_ARTIFICIAL (decl) && ! DECL_INITIAL (decl)\n \t      && TREE_USED (decl)\n@@ -2769,19 +2757,8 @@ finish_file (void)\n \t      reconsider = true;\n \t    }\n \n-\t  /* If the function has no body, avoid calling\n-\t     import_export_decl.  On a system without weak symbols,\n-\t     calling import_export_decl will make an inline template\n-\t     instantiation \"static\", which will result in errors about\n-\t     the use of undefined functions if there is no body for\n-\t     the function.  In fact, all the functions in this list\n-\t     *should* have a body.  */\n \t  if (!DECL_SAVED_TREE (decl))\n-\t    {\n-\t      if (! DECL_DECLARED_INLINE_P (decl) || ! TREE_USED (decl))\n-\t\tabort ();\n-\t      continue;\n-\t    }\n+\t    continue;\n \n \t  import_export_decl (decl);\n \n@@ -2853,12 +2830,11 @@ finish_file (void)\n     {\n       tree decl = VARRAY_TREE (deferred_fns, i);\n \n-      if (TREE_USED (decl) && DECL_DECLARED_INLINE_P (decl)\n-\t  && !(TREE_ASM_WRITTEN (decl) || DECL_SAVED_TREE (decl)\n-\t       /* An explicit instantiation can be used to specify\n-\t          that the body is in another unit. It will have\n-\t          already verified there was a definition.  */\n-\t       || DECL_EXPLICIT_INSTANTIATION (decl)))\n+      if (!TREE_ASM_WRITTEN (decl) && !DECL_SAVED_TREE (decl)\n+\t  /* An explicit instantiation can be used to specify\n+\t     that the body is in another unit. It will have\n+\t     already verified there was a definition.  */\n+\t  && !DECL_EXPLICIT_INSTANTIATION (decl))\n \t{\n \t  cp_warning_at (\"inline function `%D' used but never defined\", decl);\n \t  /* This symbol is effectively an \"extern\" declaration now.\n@@ -3032,8 +3008,17 @@ mark_used (tree decl)\n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl)\n       && !TREE_ASM_WRITTEN (decl))\n     /* Remember it, so we can check it was defined.  */\n-    defer_fn (decl);\n-\n+    {\n+      if (DECL_DEFERRED_FN (decl))\n+\treturn;\n+      DECL_DEFERRED_FN (decl) = 1;\n+      DECL_DEFER_OUTPUT (decl) = 1;\n+      if (!deferred_fns)\n+\tVARRAY_TREE_INIT (deferred_fns, 32, \"deferred_fns\");\n+      \n+      VARRAY_PUSH_TREE (deferred_fns, decl);\n+    }\n+  \n   assemble_external (decl);\n \n   /* Is it a synthesized method that needs to be synthesized?  */"}]}