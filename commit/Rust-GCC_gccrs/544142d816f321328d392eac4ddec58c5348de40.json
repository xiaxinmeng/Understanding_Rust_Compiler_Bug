{"sha": "544142d816f321328d392eac4ddec58c5348de40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ0MTQyZDgxNmYzMjEzMjhkMzkyZWFjNGRkZWM1OGM1MzQ4ZGU0MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-02-14T13:00:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-02-14T13:00:49Z"}, "message": "mips-protos.h (mips_load_got_page): Delete.\n\n\t* config/mips/mips-protos.h (mips_load_got_page): Delete.\n\t(mips_load_got_global): Delete.\n\t(mips_gotoff_page): Declare.\n\t* config/mips/mips.md (UNSPEC_LOAD_GOT): New constant.\n\t(*xgot_lo[sd]i, *got_disp[sd]i, *got_page[sd]i): Build an\n\tUNSPEC_LOAD_GOT pattern rather than a MEM.\n\t(*load_got[sd]i): New patterns.\n\t* config/mips/mips.c (mips_got_alias_set, mips_load_got): Delete.\n\t(mips_load_got_page, mips_load_got_global): Delete.\n\t(mips_gotoff_page): New function.\n\t(override_options): Don't initialize mips_got_alias_set.\n\nFrom-SVN: r77802", "tree": {"sha": "66a2d79a6650e3b1db199d1ae480bbbc9d00b0ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66a2d79a6650e3b1db199d1ae480bbbc9d00b0ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/544142d816f321328d392eac4ddec58c5348de40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544142d816f321328d392eac4ddec58c5348de40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544142d816f321328d392eac4ddec58c5348de40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544142d816f321328d392eac4ddec58c5348de40/comments", "author": null, "committer": null, "parents": [{"sha": "be8b2beefb2cf0838601d2e9bb0cb2caefc86daa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8b2beefb2cf0838601d2e9bb0cb2caefc86daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8b2beefb2cf0838601d2e9bb0cb2caefc86daa"}], "stats": {"total": 130, "additions": 74, "deletions": 56}, "files": [{"sha": "7ddbfafd2270ad96fdfabfb379cdb614f0b3332e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544142d816f321328d392eac4ddec58c5348de40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544142d816f321328d392eac4ddec58c5348de40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=544142d816f321328d392eac4ddec58c5348de40", "patch": "@@ -1,3 +1,17 @@\n+2004-02-14  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips-protos.h (mips_load_got_page): Delete.\n+\t(mips_load_got_global): Delete.\n+\t(mips_gotoff_page): Declare.\n+\t* config/mips/mips.md (UNSPEC_LOAD_GOT): New constant.\n+\t(*xgot_lo[sd]i, *got_disp[sd]i, *got_page[sd]i): Build an\n+\tUNSPEC_LOAD_GOT pattern rather than a MEM.\n+\t(*load_got[sd]i): New patterns.\n+\t* config/mips/mips.c (mips_got_alias_set, mips_load_got): Delete.\n+\t(mips_load_got_page, mips_load_got_global): Delete.\n+\t(mips_gotoff_page): New function.\n+\t(override_options): Don't initialize mips_got_alias_set.\n+\n 2004-02-14  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (MASK_DEBUG_[ABEFI], TARGET_DEBUG_[ABEFI]_MODE)"}, {"sha": "222c93d3b3f2c7e58cfeb52afcfa13791ad687c3", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544142d816f321328d392eac4ddec58c5348de40/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544142d816f321328d392eac4ddec58c5348de40/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=544142d816f321328d392eac4ddec58c5348de40", "patch": "@@ -32,9 +32,8 @@ extern int mips_const_insns (rtx);\n extern int mips_fetch_insns (rtx);\n extern bool mips_legitimate_address_p (enum machine_mode, rtx, int);\n extern bool mips_legitimize_address (rtx *, enum machine_mode);\n+extern rtx mips_gotoff_page (rtx);\n extern rtx mips_gotoff_global (rtx);\n-extern rtx mips_load_got_page (rtx);\n-extern rtx mips_load_got_global (rtx, rtx);\n extern bool mips_legitimize_move (enum machine_mode, rtx, rtx);\n \n extern int m16_uimm3_b (rtx, enum machine_mode);"}, {"sha": "6630d58435dea2b743d7a7ffda0f6bce187bce0d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 42, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544142d816f321328d392eac4ddec58c5348de40/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544142d816f321328d392eac4ddec58c5348de40/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=544142d816f321328d392eac4ddec58c5348de40", "patch": "@@ -198,7 +198,6 @@ static rtx mips_force_temporary (rtx, rtx);\n static rtx mips_split_symbol (rtx, rtx);\n static rtx mips_unspec_address (rtx, enum mips_symbol_type);\n static rtx mips_unspec_offset_high (rtx, rtx, rtx, enum mips_symbol_type);\n-static rtx mips_load_got (rtx, rtx, enum mips_symbol_type);\n static rtx mips_add_offset (rtx, HOST_WIDE_INT);\n static unsigned int mips_build_shift (struct mips_integer_op *, HOST_WIDE_INT);\n static unsigned int mips_build_lower (struct mips_integer_op *,\n@@ -537,9 +536,6 @@ char mips_print_operand_punct[256];\n /* Map GCC register number to debugger register number.  */\n int mips_dbx_regno[FIRST_PSEUDO_REGISTER];\n \n-/* An alias set for the GOT.  */\n-static GTY(()) int mips_got_alias_set;\n-\n /* A copy of the original flag_delayed_branch: see override_options.  */\n static int mips_flag_delayed_branch;\n \n@@ -1744,24 +1740,12 @@ mips_unspec_offset_high (rtx temp, rtx base, rtx addr,\n }\n \n \n-/* Return a memory reference for the GOT slot whose offset is given by\n-   mips_unspec_address (ADDR, SYMBOL_TYPE).  Register BASE contains the\n-   high part of the offset plus $gp.  */\n+/* Return the offset of a GOT page entry for local address ADDR.  */\n \n-static rtx\n-mips_load_got (rtx base, rtx addr, enum mips_symbol_type symbol_type)\n+rtx\n+mips_gotoff_page (rtx addr)\n {\n-  rtx mem, offset;\n-\n-  offset = mips_unspec_address (addr, symbol_type);\n-  mem = gen_rtx_MEM (ptr_mode, gen_rtx_LO_SUM (Pmode, base, offset));\n-  set_mem_alias_set (mem, mips_got_alias_set);\n-\n-  /* GOT entries are constant and references to them can't trap.  */\n-  RTX_UNCHANGING_P (mem) = 1;\n-  MEM_NOTRAP_P (mem) = 1;\n-\n-  return mem;\n+  return mips_unspec_address (addr, SYMBOL_GOTOFF_PAGE);\n }\n \n \n@@ -1775,25 +1759,6 @@ mips_gotoff_global (rtx addr)\n }\n \n \n-/* Fetch the high part of local_got_operand ADDR from the GOT.  */\n-\n-rtx\n-mips_load_got_page (rtx addr)\n-{\n-  return mips_load_got (pic_offset_table_rtx, addr, SYMBOL_GOTOFF_PAGE);\n-}\n-\n-\n-/* Fetch the address of global_got_operand ADDR from the GOT.  BASE is a\n-   register that holds the address _gp + %got_hi(ADDR).  */\n-\n-rtx\n-mips_load_got_global (rtx base, rtx addr)\n-{\n-  return mips_load_got (base, addr, SYMBOL_GOTOFF_GLOBAL);\n-}\n-\n-\n /* Return a legitimate address for REG + OFFSET.  This function will\n    create a temporary register if OFFSET is not a SMALL_OPERAND.  */\n \n@@ -5080,9 +5045,6 @@ override_options (void)\n   /* Function to allocate machine-dependent function status.  */\n   init_machine_status = &mips_init_machine_status;\n \n-  /* Create a unique alias set for GOT references.  */\n-  mips_got_alias_set = new_alias_set ();\n-\n   if (TARGET_EXPLICIT_RELOCS || mips_split_addresses)\n     {\n       mips_split_p[SYMBOL_GENERAL] = true;"}, {"sha": "82b52dea0c26f57ccb78b53800c580d2de146c24", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544142d816f321328d392eac4ddec58c5348de40/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544142d816f321328d392eac4ddec58c5348de40/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=544142d816f321328d392eac4ddec58c5348de40", "patch": "@@ -55,6 +55,7 @@\n    (UNSPEC_SDR\t\t\t25)\n    (UNSPEC_LOADGP\t\t26)\n    (UNSPEC_LOAD_CALL\t\t27)\n+   (UNSPEC_LOAD_GOT\t\t28)\n \n    (UNSPEC_ADDRESS_FIRST\t100)\n \n@@ -4170,8 +4171,9 @@ dsrl\\t%3,%3,1\\n\\\n   \"TARGET_EXPLICIT_RELOCS && TARGET_XGOT\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 0) (match_dup 3))]\n-  { operands[3] = mips_load_got_global (operands[1], operands[2]); }\n+  [(set (match_dup 0)\n+\t(unspec:SI [(match_dup 1) (match_dup 3)] UNSPEC_LOAD_GOT))]\n+  { operands[3] = mips_gotoff_global (operands[2]); }\n   [(set_attr \"got\" \"load\")])\n \n (define_insn_and_split \"*xgot_hidi\"\n@@ -4195,8 +4197,9 @@ dsrl\\t%3,%3,1\\n\\\n   \"TARGET_EXPLICIT_RELOCS && TARGET_XGOT\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 0) (match_dup 3))]\n-  { operands[3] = mips_load_got_global (operands[1], operands[2]); }\n+  [(set (match_dup 0)\n+\t(unspec:DI [(match_dup 1) (match_dup 3)] UNSPEC_LOAD_GOT))]\n+  { operands[3] = mips_gotoff_global (operands[2]); }\n   [(set_attr \"got\" \"load\")])\n \n ;; Insns to fetch a global symbol from a normal GOT.\n@@ -4207,8 +4210,12 @@ dsrl\\t%3,%3,1\\n\\\n   \"TARGET_EXPLICIT_RELOCS && !TARGET_XGOT\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 0) (match_dup 2))]\n-  { operands[2] = mips_load_got_global (pic_offset_table_rtx, operands[1]); }\n+  [(set (match_dup 0)\n+\t(unspec:SI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n+{\n+  operands[2] = pic_offset_table_rtx;\n+  operands[3] = mips_gotoff_global (operands[1]);\n+}\n   [(set_attr \"got\" \"load\")])\n \n (define_insn_and_split \"*got_dispdi\"\n@@ -4217,8 +4224,12 @@ dsrl\\t%3,%3,1\\n\\\n   \"TARGET_EXPLICIT_RELOCS && !TARGET_XGOT\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 0) (match_dup 2))]\n-  { operands[2] = mips_load_got_global (pic_offset_table_rtx, operands[1]); }\n+  [(set (match_dup 0)\n+\t(unspec:DI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n+{\n+  operands[2] = pic_offset_table_rtx;\n+  operands[3] = mips_gotoff_global (operands[1]);\n+}\n   [(set_attr \"got\" \"load\")])\n \n ;; Insns for loading the high part of a local symbol.\n@@ -4229,8 +4240,12 @@ dsrl\\t%3,%3,1\\n\\\n   \"TARGET_EXPLICIT_RELOCS\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 0) (match_dup 2))]\n-  { operands[2] = mips_load_got_page (operands[1]); }\n+  [(set (match_dup 0)\n+\t(unspec:SI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n+{\n+  operands[2] = pic_offset_table_rtx;\n+  operands[3] = mips_gotoff_page (operands[1]);\n+}\n   [(set_attr \"got\" \"load\")])\n \n (define_insn_and_split \"*got_pagedi\"\n@@ -4239,10 +4254,38 @@ dsrl\\t%3,%3,1\\n\\\n   \"TARGET_EXPLICIT_RELOCS\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 0) (match_dup 2))]\n-  { operands[2] = mips_load_got_page (operands[1]); }\n+  [(set (match_dup 0)\n+\t(unspec:DI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n+{\n+  operands[2] = pic_offset_table_rtx;\n+  operands[3] = mips_gotoff_page (operands[1]);\n+}\n   [(set_attr \"got\" \"load\")])\n \n+;; Lower-level instructions for loading an address from the GOT.\n+;; We could use MEMs, but an unspec gives more optimization\n+;; opportunities.\n+\n+(define_insn \"*load_gotsi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"d\")\n+\t\t    (match_operand:SI 2 \"immediate_operand\" \"\")]\n+\t\t   UNSPEC_LOAD_GOT))]\n+  \"TARGET_ABICALLS\"\n+  \"lw\\t%0,%R2(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*load_gotdi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"d\")\n+\t\t    (match_operand:DI 2 \"immediate_operand\" \"\")]\n+\t\t   UNSPEC_LOAD_GOT))]\n+  \"TARGET_ABICALLS\"\n+  \"ld\\t%0,%R2(%1)\"\n+  [(set_attr \"type\" \"load\")\n+   (set_attr \"length\" \"4\")])\n+\n ;; Instructions for adding the low 16 bits of an address to a register.\n ;; Operand 2 is the address: print_operand works out which relocation\n ;; should be applied."}]}