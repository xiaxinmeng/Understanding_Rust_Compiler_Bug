{"sha": "fbe22e87687c68357430e60361a8a124c81148cc", "node_id": "C_kwDOANBUbNoAKGZiZTIyZTg3Njg3YzY4MzU3NDMwZTYwMzYxYThhMTI0YzgxMTQ4Y2M", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-18T08:14:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-18T08:14:30Z"}, "message": "Merge #940\n\n940: Add more location info to AST structures r=CohenArthur a=CohenArthur\n\nTwo classes still remain locus-less: `TupleStructItems` and `TuplePatternItems` as I do not believe they are constructed at the moment.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "72b1cf54a3a6c8ed1584defaa2964e47b10428c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72b1cf54a3a6c8ed1584defaa2964e47b10428c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbe22e87687c68357430e60361a8a124c81148cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiD1VmCRBK7hj4Ov3rIwAA/agIADnFbjZdpev1rNgjqNths1hm\nbWrUrgly3wwU/eiaQtXP7MVk3crSkhzSDVrgdXpTRJB5dpWkdxHASTYgec5bjeK3\n2rsg0AxtqEWWtbIKKIthArZ8BsTE2ik5mCFYYOD3bWo8QidKVQ/7tfi02rfY7Db6\nmdwA72A8nvlS6gGUDOdsASYo6W2tNh9ooOt1TmvyckEPjJQn4SO4FKXxUQaE8zvj\nMrEVvAiCIwJb4Cg7XNujG2YhvdnjWE4EcUJfSj7wsWbwC9pfpOfBrBMqNEt4mV1p\nlWe/btUSSoI3PUxppmxkINuTBKSccWz+tFheyY/1Ih88FYbn274njEYIHkJdR3Y=\n=evcu\n-----END PGP SIGNATURE-----\n", "payload": "tree 72b1cf54a3a6c8ed1584defaa2964e47b10428c9\nparent 9fb06d66cef70584e7aa2fa3a6ad22ef7def6b84\nparent 0e15b89839170cb6c9115cfc57310af2170423a0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645172070 +0000\ncommitter GitHub <noreply@github.com> 1645172070 +0000\n\nMerge #940\n\n940: Add more location info to AST structures r=CohenArthur a=CohenArthur\n\nTwo classes still remain locus-less: `TupleStructItems` and `TuplePatternItems` as I do not believe they are constructed at the moment.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe22e87687c68357430e60361a8a124c81148cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe22e87687c68357430e60361a8a124c81148cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe22e87687c68357430e60361a8a124c81148cc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fb06d66cef70584e7aa2fa3a6ad22ef7def6b84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb06d66cef70584e7aa2fa3a6ad22ef7def6b84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb06d66cef70584e7aa2fa3a6ad22ef7def6b84"}, {"sha": "0e15b89839170cb6c9115cfc57310af2170423a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e15b89839170cb6c9115cfc57310af2170423a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e15b89839170cb6c9115cfc57310af2170423a0"}], "stats": {"total": 140, "additions": 78, "deletions": 62}, "files": [{"sha": "7336db225d40398a807168250b523109820820c6", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=fbe22e87687c68357430e60361a8a124c81148cc", "patch": "@@ -953,12 +953,11 @@ class ArrayElems\n class ArrayElemsValues : public ArrayElems\n {\n   std::vector<std::unique_ptr<Expr> > values;\n-\n-  // TODO: should this store location data?\n+  Location locus;\n \n public:\n-  ArrayElemsValues (std::vector<std::unique_ptr<Expr> > elems)\n-    : ArrayElems (), values (std::move (elems))\n+  ArrayElemsValues (std::vector<std::unique_ptr<Expr> > elems, Location locus)\n+    : ArrayElems (), values (std::move (elems)), locus (locus)\n   {}\n \n   // copy constructor with vector clone\n@@ -1008,15 +1007,14 @@ class ArrayElemsCopied : public ArrayElems\n {\n   std::unique_ptr<Expr> elem_to_copy;\n   std::unique_ptr<Expr> num_copies;\n-\n-  // TODO: should this store location data?\n+  Location locus;\n \n public:\n   // Constructor requires pointers for polymorphism\n   ArrayElemsCopied (std::unique_ptr<Expr> copied_elem,\n-\t\t    std::unique_ptr<Expr> copy_amount)\n+\t\t    std::unique_ptr<Expr> copy_amount, Location locus)\n     : ArrayElems (), elem_to_copy (std::move (copied_elem)),\n-      num_copies (std::move (copy_amount))\n+      num_copies (std::move (copy_amount)), locus (locus)\n   {}\n \n   // Copy constructor required due to unique_ptr - uses custom clone\n@@ -1516,11 +1514,11 @@ struct StructBase\n {\n private:\n   std::unique_ptr<Expr> base_struct;\n+  Location locus;\n \n public:\n-  // TODO: should this store location data?\n-  StructBase (std::unique_ptr<Expr> base_struct_ptr)\n-    : base_struct (std::move (base_struct_ptr))\n+  StructBase (std::unique_ptr<Expr> base_struct_ptr, Location locus)\n+    : base_struct (std::move (base_struct_ptr)), locus (locus)\n   {}\n \n   // Copy constructor requires clone\n@@ -1552,7 +1550,7 @@ struct StructBase\n   StructBase &operator= (StructBase &&other) = default;\n \n   // Returns a null expr-ed StructBase - error state\n-  static StructBase error () { return StructBase (nullptr); }\n+  static StructBase error () { return StructBase (nullptr, Location ()); }\n \n   // Returns whether StructBase is in error state\n   bool is_invalid () const { return base_struct == nullptr; }\n@@ -2136,8 +2134,7 @@ struct ClosureParam\n \n   // bool has_type_given;\n   std::unique_ptr<Type> type;\n-\n-  // TODO: should this store location data?\n+  Location locus;\n \n public:\n   // Returns whether the type of the parameter has been given.\n@@ -2146,11 +2143,12 @@ struct ClosureParam\n   bool has_outer_attrs () const { return !outer_attrs.empty (); }\n \n   // Constructor for closure parameter\n-  ClosureParam (std::unique_ptr<Pattern> param_pattern,\n+  ClosureParam (std::unique_ptr<Pattern> param_pattern, Location locus,\n \t\tstd::unique_ptr<Type> param_type = nullptr,\n \t\tstd::vector<Attribute> outer_attrs = {})\n     : outer_attrs (std::move (outer_attrs)),\n-      pattern (std::move (param_pattern)), type (std::move (param_type))\n+      pattern (std::move (param_pattern)), type (std::move (param_type)),\n+      locus (locus)\n   {}\n \n   // Copy constructor required due to cloning as a result of unique_ptrs\n@@ -2191,7 +2189,10 @@ struct ClosureParam\n   bool is_error () const { return pattern == nullptr; }\n \n   // Creates an error state closure parameter.\n-  static ClosureParam create_error () { return ClosureParam (nullptr); }\n+  static ClosureParam create_error ()\n+  {\n+    return ClosureParam (nullptr, Location ());\n+  }\n \n   std::string as_string () const;\n "}, {"sha": "94e5cbdb2dc9f26af8f10329f59b0082bcb05884", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=fbe22e87687c68357430e60361a8a124c81148cc", "patch": "@@ -3941,12 +3941,11 @@ struct NamedFunctionParam\n \n   std::unique_ptr<Type> param_type;\n \n-  // TODO: should this store location data?\n-\n   // seemingly new since writing this node\n   std::vector<Attribute> outer_attrs;\n \n   NodeId node_id;\n+  Location locus;\n \n public:\n   /* Returns whether the named function parameter has a name (i.e. name is not\n@@ -3967,14 +3966,14 @@ struct NamedFunctionParam\n   // Creates an error state named function parameter.\n   static NamedFunctionParam create_error ()\n   {\n-    return NamedFunctionParam (\"\", nullptr, {});\n+    return NamedFunctionParam (\"\", nullptr, {}, Location ());\n   }\n \n   NamedFunctionParam (std::string name, std::unique_ptr<Type> param_type,\n-\t\t      std::vector<Attribute> outer_attrs)\n+\t\t      std::vector<Attribute> outer_attrs, Location locus)\n     : name (std::move (name)), param_type (std::move (param_type)),\n       outer_attrs (std::move (outer_attrs)),\n-      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ()), locus (locus)\n   {}\n \n   // Copy constructor"}, {"sha": "ed37f400dc58364694eba96a8141b6a57b31ef91", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=fbe22e87687c68357430e60361a8a124c81148cc", "patch": "@@ -33,13 +33,12 @@ namespace AST {\n class PathIdentSegment\n {\n   std::string segment_name;\n-\n-  // TODO: should this have location info stored?\n+  Location locus;\n \n   // only allow identifiers, \"super\", \"self\", \"Self\", \"crate\", or \"$crate\"\n public:\n-  PathIdentSegment (std::string segment_name)\n-    : segment_name (std::move (segment_name))\n+  PathIdentSegment (std::string segment_name, Location locus)\n+    : segment_name (std::move (segment_name)), locus (locus)\n   {}\n \n   /* TODO: insert check in constructor for this? Or is this a semantic error\n@@ -49,7 +48,10 @@ class PathIdentSegment\n    * not entirely sure */\n \n   // Creates an error PathIdentSegment.\n-  static PathIdentSegment create_error () { return PathIdentSegment (\"\"); }\n+  static PathIdentSegment create_error ()\n+  {\n+    return PathIdentSegment (\"\", Location ());\n+  }\n \n   // Returns whether PathIdentSegment is in an error state.\n   bool is_error () const { return segment_name.empty (); }\n@@ -221,7 +223,7 @@ class PathExprSegment\n   bool has_generic_args () const { return generic_args.has_generic_args (); }\n \n   // Constructor for segment (from IdentSegment and GenericArgs)\n-  PathExprSegment (PathIdentSegment segment_name, Location locus = Location (),\n+  PathExprSegment (PathIdentSegment segment_name, Location locus,\n \t\t   GenericArgs generic_args = GenericArgs::create_empty ())\n     : segment_name (std::move (segment_name)),\n       generic_args (std::move (generic_args)), locus (locus),\n@@ -237,7 +239,7 @@ class PathExprSegment\n \t\t   = std::vector<std::unique_ptr<Type> > (),\n \t\t   std::vector<GenericArgsBinding> binding_args\n \t\t   = std::vector<GenericArgsBinding> ())\n-    : segment_name (PathIdentSegment (std::move (segment_name))),\n+    : segment_name (PathIdentSegment (std::move (segment_name), locus)),\n       generic_args (GenericArgs (std::move (lifetime_args),\n \t\t\t\t std::move (type_args),\n \t\t\t\t std::move (binding_args))),\n@@ -250,7 +252,7 @@ class PathExprSegment\n   // Creates an error-state path expression segment.\n   static PathExprSegment create_error ()\n   {\n-    return PathExprSegment (PathIdentSegment::create_error ());\n+    return PathExprSegment (PathIdentSegment::create_error (), Location ());\n   }\n \n   std::string as_string () const;\n@@ -440,7 +442,7 @@ class TypePathSegment\n \n   TypePathSegment (std::string segment_name,\n \t\t   bool has_separating_scope_resolution, Location locus)\n-    : ident_segment (PathIdentSegment (std::move (segment_name))),\n+    : ident_segment (PathIdentSegment (std::move (segment_name), locus)),\n       locus (locus),\n       has_separating_scope_resolution (has_separating_scope_resolution),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())\n@@ -539,11 +541,13 @@ struct TypePathFunction\n   // FIXME: think of better way to mark as invalid than taking up storage\n   bool is_invalid;\n \n-  // TODO: should this have location info?\n+  Location locus;\n \n protected:\n   // Constructor only used to create invalid type path functions.\n-  TypePathFunction (bool is_invalid) : is_invalid (is_invalid) {}\n+  TypePathFunction (bool is_invalid, Location locus)\n+    : is_invalid (is_invalid), locus (locus)\n+  {}\n \n public:\n   // Returns whether the return type of the function has been specified.\n@@ -556,13 +560,16 @@ struct TypePathFunction\n   bool is_error () const { return is_invalid; }\n \n   // Creates an error state function.\n-  static TypePathFunction create_error () { return TypePathFunction (true); }\n+  static TypePathFunction create_error ()\n+  {\n+    return TypePathFunction (true, Location ());\n+  }\n \n   // Constructor\n-  TypePathFunction (std::vector<std::unique_ptr<Type> > inputs,\n+  TypePathFunction (std::vector<std::unique_ptr<Type> > inputs, Location locus,\n \t\t    std::unique_ptr<Type> type = nullptr)\n     : inputs (std::move (inputs)), return_type (std::move (type)),\n-      is_invalid (false)\n+      is_invalid (false), locus (locus)\n   {}\n \n   // Copy constructor with clone"}, {"sha": "5d937d739251e51ab3534b1039d5e15f965631a1", "filename": "gcc/rust/ast/rust-pattern.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fast%2Frust-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fast%2Frust-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-pattern.h?ref=fbe22e87687c68357430e60361a8a124c81148cc", "patch": "@@ -848,18 +848,18 @@ class StructPattern : public Pattern\n   // bool has_struct_pattern_elements;\n   StructPatternElements elems;\n \n-  // TODO: should this store location data? Accessor uses path location data.\n   NodeId node_id;\n+  Location locus;\n \n public:\n   std::string as_string () const override;\n \n   // Constructs a struct pattern from specified StructPatternElements\n-  StructPattern (PathInExpression struct_path,\n+  StructPattern (PathInExpression struct_path, Location locus,\n \t\t StructPatternElements elems\n \t\t = StructPatternElements::create_empty ())\n     : path (std::move (struct_path)), elems (std::move (elems)),\n-      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n+      node_id (Analysis::Mappings::get ()->get_next_node_id ()), locus (locus)\n   {}\n \n   /* TODO: constructor to construct via elements included in"}, {"sha": "2260a9509e52def6d1dfe58b827020b9c3e754bd", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=fbe22e87687c68357430e60361a8a124c81148cc", "patch": "@@ -706,29 +706,29 @@ Parser<ManagedTokenSource>::parse_path_ident_segment ()\n     case IDENTIFIER:\n       lexer.skip_token ();\n \n-      return AST::PathIdentSegment (t->get_str ());\n+      return AST::PathIdentSegment (t->get_str (), t->get_locus ());\n     case SUPER:\n       lexer.skip_token ();\n \n-      return AST::PathIdentSegment (\"super\");\n+      return AST::PathIdentSegment (\"super\", t->get_locus ());\n     case SELF:\n       lexer.skip_token ();\n \n-      return AST::PathIdentSegment (\"self\");\n+      return AST::PathIdentSegment (\"self\", t->get_locus ());\n     case SELF_ALIAS:\n       lexer.skip_token ();\n \n-      return AST::PathIdentSegment (\"Self\");\n+      return AST::PathIdentSegment (\"Self\", t->get_locus ());\n     case CRATE:\n       lexer.skip_token ();\n \n-      return AST::PathIdentSegment (\"crate\");\n+      return AST::PathIdentSegment (\"crate\", t->get_locus ());\n     case DOLLAR_SIGN:\n       if (lexer.peek_token (1)->get_id () == CRATE)\n \t{\n \t  lexer.skip_token (1);\n \n-\t  return AST::PathIdentSegment (\"$crate\");\n+\t  return AST::PathIdentSegment (\"$crate\", t->get_locus ());\n \t}\n       gcc_fallthrough ();\n     default:\n@@ -5993,6 +5993,7 @@ Parser<ManagedTokenSource>::parse_named_function_param (\n   std::string name;\n \n   const_TokenPtr t = lexer.peek_token ();\n+  Location name_location = t->get_locus ();\n   switch (t->get_id ())\n     {\n     case IDENTIFIER:\n@@ -6028,7 +6029,7 @@ Parser<ManagedTokenSource>::parse_named_function_param (\n     }\n \n   return AST::NamedFunctionParam (std::move (name), std::move (param_type),\n-\t\t\t\t  std::move (outer_attrs));\n+\t\t\t\t  std::move (outer_attrs), name_location);\n }\n \n // Parses a statement (will further disambiguate any statement).\n@@ -6435,7 +6436,8 @@ Parser<ManagedTokenSource>::parse_type_path_segment ()\n       }\n       case LEFT_PAREN: {\n \t// parse type path function\n-\tAST::TypePathFunction type_path_function = parse_type_path_function ();\n+\tAST::TypePathFunction type_path_function\n+\t  = parse_type_path_function (locus);\n \n \tif (type_path_function.is_error ())\n \t  {\n@@ -6461,7 +6463,7 @@ Parser<ManagedTokenSource>::parse_type_path_segment ()\n // Parses a function call representation inside a type path.\n template <typename ManagedTokenSource>\n AST::TypePathFunction\n-Parser<ManagedTokenSource>::parse_type_path_function ()\n+Parser<ManagedTokenSource>::parse_type_path_function (Location id_location)\n {\n   if (!skip_token (LEFT_PAREN))\n     {\n@@ -6507,7 +6509,8 @@ Parser<ManagedTokenSource>::parse_type_path_function ()\n   std::unique_ptr<AST::Type> return_type = parse_function_return_type ();\n \n   inputs.shrink_to_fit ();\n-  return AST::TypePathFunction (std::move (inputs), std::move (return_type));\n+  return AST::TypePathFunction (std::move (inputs), id_location,\n+\t\t\t\tstd::move (return_type));\n }\n \n // Parses a path inside an expression that allows generic arguments.\n@@ -8738,7 +8741,7 @@ Parser<ManagedTokenSource>::parse_array_expr (AST::AttrVec outer_attrs,\n \n       std::vector<std::unique_ptr<AST::Expr>> exprs;\n       auto array_elems\n-\t= Rust::make_unique<AST::ArrayElemsValues> (std::move (exprs));\n+\t= Rust::make_unique<AST::ArrayElemsValues> (std::move (exprs), locus);\n       return Rust::make_unique<AST::ArrayExpr> (std::move (array_elems),\n \t\t\t\t\t\tstd::move (inner_attrs),\n \t\t\t\t\t\tstd::move (outer_attrs), locus);\n@@ -8781,7 +8784,7 @@ Parser<ManagedTokenSource>::parse_array_expr (AST::AttrVec outer_attrs,\n \n \t  std::unique_ptr<AST::ArrayElemsCopied> copied_array_elems (\n \t    new AST::ArrayElemsCopied (std::move (initial_expr),\n-\t\t\t\t       std::move (copy_amount)));\n+\t\t\t\t       std::move (copy_amount), locus));\n \t  return std::unique_ptr<AST::ArrayExpr> (\n \t    new AST::ArrayExpr (std::move (copied_array_elems),\n \t\t\t\tstd::move (inner_attrs),\n@@ -8798,7 +8801,7 @@ Parser<ManagedTokenSource>::parse_array_expr (AST::AttrVec outer_attrs,\n \t  skip_token (RIGHT_SQUARE);\n \n \t  std::unique_ptr<AST::ArrayElemsValues> array_elems (\n-\t    new AST::ArrayElemsValues (std::move (exprs)));\n+\t    new AST::ArrayElemsValues (std::move (exprs), locus));\n \t  return std::unique_ptr<AST::ArrayExpr> (\n \t    new AST::ArrayExpr (std::move (array_elems),\n \t\t\t\tstd::move (inner_attrs),\n@@ -8840,7 +8843,7 @@ Parser<ManagedTokenSource>::parse_array_expr (AST::AttrVec outer_attrs,\n \t  exprs.shrink_to_fit ();\n \n \t  std::unique_ptr<AST::ArrayElemsValues> array_elems (\n-\t    new AST::ArrayElemsValues (std::move (exprs)));\n+\t    new AST::ArrayElemsValues (std::move (exprs), locus));\n \t  return std::unique_ptr<AST::ArrayExpr> (\n \t    new AST::ArrayExpr (std::move (array_elems),\n \t\t\t\tstd::move (inner_attrs),\n@@ -8894,8 +8897,8 @@ Parser<ManagedTokenSource>::parse_closure_param ()\n \t}\n     }\n \n-  return AST::ClosureParam (std::move (pattern), std::move (type),\n-\t\t\t    std::move (outer_attrs));\n+  return AST::ClosureParam (std::move (pattern), pattern->get_locus (),\n+\t\t\t    std::move (type), std::move (outer_attrs));\n }\n \n // Parses a grouped or tuple expression (disambiguates).\n@@ -10600,7 +10603,8 @@ Parser<ManagedTokenSource>::parse_pattern ()\n \t\t}\n \n \t      return std::unique_ptr<AST::StructPattern> (\n-\t\tnew AST::StructPattern (std::move (path), std::move (elems)));\n+\t\tnew AST::StructPattern (std::move (path), t->get_locus (),\n+\t\t\t\t\tstd::move (elems)));\n \t    }\n \t  default:\n \t    // assume path in expression\n@@ -11054,7 +11058,8 @@ Parser<ManagedTokenSource>::parse_ident_leading_pattern ()\n \trust_debug (\"successfully parsed struct pattern\");\n \n \treturn std::unique_ptr<AST::StructPattern> (\n-\t  new AST::StructPattern (std::move (path), std::move (elems)));\n+\t  new AST::StructPattern (std::move (path), initial_tok->get_locus (),\n+\t\t\t\t  std::move (elems)));\n       }\n     case DOT_DOT_EQ:\n       case ELLIPSIS: {\n@@ -14440,6 +14445,7 @@ Parser<ManagedTokenSource>::parse_struct_expr_struct_partial (\n \tAST::StructBase struct_base = AST::StructBase::error ();\n \tif (lexer.peek_token ()->get_id () == DOT_DOT)\n \t  {\n+\t    Location dot_dot_location = lexer.peek_token ()->get_locus ();\n \t    lexer.skip_token ();\n \n \t    // parse required struct base expr\n@@ -14457,7 +14463,8 @@ Parser<ManagedTokenSource>::parse_struct_expr_struct_partial (\n \t    // DEBUG:\n \t    rust_debug (\"struct/enum expr - parsed and validated base expr\");\n \n-\t    struct_base = AST::StructBase (std::move (base_expr));\n+\t    struct_base\n+\t      = AST::StructBase (std::move (base_expr), dot_dot_location);\n \n \t    // DEBUG:\n \t    rust_debug (\"assigned struct base to new struct base \");\n@@ -14610,8 +14617,10 @@ Parser<ManagedTokenSource>::parse_path_in_expression_pratt (const_TokenPtr tok)\n \n       AST::GenericArgs generic_args = parse_path_generic_args ();\n \n-      initial_segment = AST::PathExprSegment (initial_str, tok->get_locus (),\n-\t\t\t\t\t      std::move (generic_args));\n+      initial_segment\n+\t= AST::PathExprSegment (AST::PathIdentSegment (initial_str,\n+\t\t\t\t\t\t       tok->get_locus ()),\n+\t\t\t\ttok->get_locus (), std::move (generic_args));\n     }\n   if (initial_segment.is_error ())\n     {"}, {"sha": "17440d50f28a4cb99758bdcd17acb9888d5ba632", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=fbe22e87687c68357430e60361a8a124c81148cc", "patch": "@@ -139,7 +139,7 @@ template <typename ManagedTokenSource> class Parser\n   AST::PathIdentSegment parse_path_ident_segment ();\n   AST::GenericArgs parse_path_generic_args ();\n   AST::GenericArgsBinding parse_generic_args_binding ();\n-  AST::TypePathFunction parse_type_path_function ();\n+  AST::TypePathFunction parse_type_path_function (Location locus);\n   AST::PathExprSegment parse_path_expr_segment ();\n   AST::QualifiedPathInExpression\n   // When given a pratt_parsed_loc, use it as the location of the"}, {"sha": "3fb8b41d053aacf5dba59f6a1099a7870ce19f44", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbe22e87687c68357430e60361a8a124c81148cc/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=fbe22e87687c68357430e60361a8a124c81148cc", "patch": "@@ -26,7 +26,7 @@\n #define MKBUILTIN_TYPE(_X, _R, _TY)                                            \\\n   do                                                                           \\\n     {                                                                          \\\n-      AST::PathIdentSegment seg (_X);                                          \\\n+      AST::PathIdentSegment seg (_X, Linemap::predeclared_location ());        \\\n       auto typePath = ::std::unique_ptr<AST::TypePathSegment> (                \\\n \tnew AST::TypePathSegment (::std::move (seg), false,                    \\\n \t\t\t\t  Linemap::predeclared_location ()));          \\"}]}