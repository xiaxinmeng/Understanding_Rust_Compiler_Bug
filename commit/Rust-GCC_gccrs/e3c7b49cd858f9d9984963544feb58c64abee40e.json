{"sha": "e3c7b49cd858f9d9984963544feb58c64abee40e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNjN2I0OWNkODU4ZjlkOTk4NDk2MzU0NGZlYjU4YzY0YWJlZTQwZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-10-31T16:15:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-31T16:15:21Z"}, "message": "ipa-inline.c (ipa_inline): Avoid infinite loop on inlining empty virtual functions calling themselves.\n\n\n\t* ipa-inline.c (ipa_inline): Avoid infinite loop on inlining\n\tempty virtual functions calling themselves.\n\nFrom-SVN: r193038", "tree": {"sha": "08fad3f7c7903ec1e33f03a80d59b58bd18c15f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08fad3f7c7903ec1e33f03a80d59b58bd18c15f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3c7b49cd858f9d9984963544feb58c64abee40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c7b49cd858f9d9984963544feb58c64abee40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3c7b49cd858f9d9984963544feb58c64abee40e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3c7b49cd858f9d9984963544feb58c64abee40e/comments", "author": null, "committer": null, "parents": [{"sha": "737df6e61771e330559a152be1653b173012172b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737df6e61771e330559a152be1653b173012172b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737df6e61771e330559a152be1653b173012172b"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "8286b1d9b800b3c1097d887fd3a5425d8748a6af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c7b49cd858f9d9984963544feb58c64abee40e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c7b49cd858f9d9984963544feb58c64abee40e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3c7b49cd858f9d9984963544feb58c64abee40e", "patch": "@@ -1,3 +1,8 @@\n+2012-10-31  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline.c (ipa_inline): Avoid infinite loop on inlining\n+\tempty virtual functions calling themselves.\n+\n 2012-10-31  Tom Tromey  <tromey@redhat.com>\n \n \tPR other/50899"}, {"sha": "cd58d332c9dd77fdc591c027cd857e3436c8e60b", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3c7b49cd858f9d9984963544feb58c64abee40e/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3c7b49cd858f9d9984963544feb58c64abee40e/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=e3c7b49cd858f9d9984963544feb58c64abee40e", "patch": "@@ -1767,29 +1767,41 @@ ipa_inline (void)\n \t  FOR_EACH_DEFINED_FUNCTION (node)\n \t    {\n \t      if (want_inline_function_to_all_callers_p (node, cold))\n-\t\twhile (node->callers && !node->global.inlined_to)\n-\t\t  {\n-\t\t    struct cgraph_node *caller = node->callers->caller;\n-\n-\t\t    if (dump_file)\n-\t\t      {\n+\t\t{\n+\t\t  int num_calls = 0;\n+\t\t  struct cgraph_edge *e;\n+\t\t  for (e = node->callers; e; e = e->next_caller)\n+\t\t    num_calls++;\n+\t\t  while (node->callers && !node->global.inlined_to)\n+\t\t    {\n+\t\t      struct cgraph_node *caller = node->callers->caller;\n+\n+\t\t      if (dump_file)\n+\t\t\t{\n+\t\t\t  fprintf (dump_file,\n+\t\t\t\t   \"\\nInlining %s size %i.\\n\",\n+\t\t\t\t   cgraph_node_name (node),\n+\t\t\t\t   inline_summary (node)->size);\n+\t\t\t  fprintf (dump_file,\n+\t\t\t\t   \" Called once from %s %i insns.\\n\",\n+\t\t\t\t   cgraph_node_name (node->callers->caller),\n+\t\t\t\t   inline_summary (node->callers->caller)->size);\n+\t\t\t}\n+\n+\t\t      inline_call (node->callers, true, NULL, NULL, true);\n+\t\t      if (dump_file)\n \t\t\tfprintf (dump_file,\n-\t\t\t\t \"\\nInlining %s size %i.\\n\",\n-\t\t\t\t cgraph_node_name (node),\n-\t\t\t\t inline_summary (node)->size);\n-\t\t\tfprintf (dump_file,\n-\t\t\t\t \" Called once from %s %i insns.\\n\",\n-\t\t\t\t cgraph_node_name (node->callers->caller),\n-\t\t\t\t inline_summary (node->callers->caller)->size);\n-\t\t      }\n-\n-\t\t    inline_call (node->callers, true, NULL, NULL, true);\n-\t\t    if (dump_file)\n-\t\t      fprintf (dump_file,\n-\t\t\t       \" Inlined into %s which now has %i size\\n\",\n-\t\t\t       cgraph_node_name (caller),\n-\t\t\t       inline_summary (caller)->size);\n-\t\t  }\n+\t\t\t\t \" Inlined into %s which now has %i size\\n\",\n+\t\t\t\t cgraph_node_name (caller),\n+\t\t\t\t inline_summary (caller)->size);\n+\t\t      if (!num_calls--)\n+\t\t        {\n+\t\t\t  if (dump_file)\n+\t\t\t    fprintf (dump_file, \"New calls found; giving up.\\n\");\n+\t\t\t  break;\n+\t\t        }\n+\t\t    }\n+\t\t}\n \t    }\n \t}\n     }"}]}