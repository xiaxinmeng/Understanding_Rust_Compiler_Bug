{"sha": "a6e0bfa7ca349b889d4a2c689984b63680ada211", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlMGJmYTdjYTM0OWI4ODlkNGEyYzY4OTk4NGI2MzY4MGFkYTIxMQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-09-24T16:02:08Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-09-24T16:02:08Z"}, "message": "[AArch64] Delete aarch64_symbol_context which is not used\n\n2015-09-24  Jiong Wang  <jiong.wang@arm.com>\n\n\t* config/aarch64/aarch64-protos.h (aarch64_symbol_context): Delete.\n\t* config/aarch64/aarch64.c (aarch64_expand_mov_immediate): Likewise.\n\t(aarch64_cannot_force_const_mem): Likewise.\n\t(aarch64_classify_address): Likewise.\n\t(aarch64_classify_symbolic_expression): Likewise.\n\t(aarch64_print_operand): Likewise.\n\t(aarch64_classify_symbol): Likewise.\n\t(aarch64_mov_operand_p): Likewise.\n\t* config/aarch64/predicates.md (aarch64_valid_symref): Likewise.\n\t(aarch64_mov_operand): Likewise.\n\nFrom-SVN: r228092", "tree": {"sha": "5cad58acb829398d3c1e3e4a00f39b609cc7c816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cad58acb829398d3c1e3e4a00f39b609cc7c816"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6e0bfa7ca349b889d4a2c689984b63680ada211", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e0bfa7ca349b889d4a2c689984b63680ada211", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6e0bfa7ca349b889d4a2c689984b63680ada211", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6e0bfa7ca349b889d4a2c689984b63680ada211/comments", "author": null, "committer": null, "parents": [{"sha": "9bc5028273e55ced2622bb5aafa9a70cde7003b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bc5028273e55ced2622bb5aafa9a70cde7003b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bc5028273e55ced2622bb5aafa9a70cde7003b7"}], "stats": {"total": 70, "additions": 31, "deletions": 39}, "files": [{"sha": "0b7b59fd9de6c621ddf23010fc7a79e3b5982d21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e0bfa7ca349b889d4a2c689984b63680ada211/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e0bfa7ca349b889d4a2c689984b63680ada211/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6e0bfa7ca349b889d4a2c689984b63680ada211", "patch": "@@ -1,3 +1,16 @@\n+2015-09-24  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_symbol_context): Delete.\n+\t* config/aarch64/aarch64.c (aarch64_expand_mov_immediate): Likewise.\n+\t(aarch64_cannot_force_const_mem): Likewise.\n+\t(aarch64_classify_address): Likewise.\n+\t(aarch64_classify_symbolic_expression): Likewise.\n+\t(aarch64_print_operand): Likewise.\n+\t(aarch64_classify_symbol): Likewise.\n+\t(aarch64_mov_operand_p): Likewise.\n+\t* config/aarch64/predicates.md (aarch64_valid_symref): Likewise.\n+\t(aarch64_mov_operand): Likewise.\n+\n 2015-09-24  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (debug_stack_info): Invert the test"}, {"sha": "baaf1bd776d759affc05edf897fc4517e0f83c7d", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e0bfa7ca349b889d4a2c689984b63680ada211/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e0bfa7ca349b889d4a2c689984b63680ada211/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=a6e0bfa7ca349b889d4a2c689984b63680ada211", "patch": "@@ -24,18 +24,6 @@\n \n #include \"input.h\"\n \n-/*\n-  SYMBOL_CONTEXT_ADR\n-  The symbol is used in a load-address operation.\n-  SYMBOL_CONTEXT_MEM\n-  The symbol is used as the address in a MEM.\n- */\n-enum aarch64_symbol_context\n-{\n-  SYMBOL_CONTEXT_MEM,\n-  SYMBOL_CONTEXT_ADR\n-};\n-\n /* SYMBOL_SMALL_ABSOLUTE: Generate symbol accesses through\n    high and lo relocs that calculate the base address using a PC\n    relative reloc.\n@@ -258,8 +246,7 @@ HOST_WIDE_INT aarch64_initial_elimination_offset (unsigned, unsigned);\n int aarch64_get_condition_code (rtx);\n bool aarch64_bitmask_imm (HOST_WIDE_INT val, machine_mode);\n int aarch64_branch_cost (bool, bool);\n-enum aarch64_symbol_type\n-aarch64_classify_symbolic_expression (rtx, enum aarch64_symbol_context);\n+enum aarch64_symbol_type aarch64_classify_symbolic_expression (rtx);\n bool aarch64_const_vec_all_same_int_p (rtx, HOST_WIDE_INT);\n bool aarch64_constant_address_p (rtx);\n bool aarch64_expand_movmem (rtx *);\n@@ -278,8 +265,7 @@ bool aarch64_legitimate_pic_operand_p (rtx);\n bool aarch64_modes_tieable_p (machine_mode mode1,\n \t\t\t      machine_mode mode2);\n bool aarch64_move_imm (HOST_WIDE_INT, machine_mode);\n-bool aarch64_mov_operand_p (rtx, enum aarch64_symbol_context,\n-\t\t\t    machine_mode);\n+bool aarch64_mov_operand_p (rtx, machine_mode);\n int aarch64_simd_attr_length_rglist (enum machine_mode);\n rtx aarch64_reverse_mask (enum machine_mode);\n bool aarch64_offset_7bit_signed_scaled_p (machine_mode, HOST_WIDE_INT);\n@@ -304,8 +290,7 @@ const char *aarch64_mangle_builtin_type (const_tree);\n const char *aarch64_output_casesi (rtx *);\n const char *aarch64_rewrite_selected_cpu (const char *name);\n \n-enum aarch64_symbol_type aarch64_classify_symbol (rtx, rtx,\n-\t\t\t\t\t\t  enum aarch64_symbol_context);\n+enum aarch64_symbol_type aarch64_classify_symbol (rtx, rtx);\n enum aarch64_symbol_type aarch64_classify_tls_symbol (rtx);\n enum reg_class aarch64_regno_regclass (unsigned);\n int aarch64_asm_preferred_eh_data_format (int, int);"}, {"sha": "f7346ec13dbe4ea62906e3ab1342719e93951631", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e0bfa7ca349b889d4a2c689984b63680ada211/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e0bfa7ca349b889d4a2c689984b63680ada211/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a6e0bfa7ca349b889d4a2c689984b63680ada211", "patch": "@@ -1547,7 +1547,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \t before we start classifying the symbol.  */\n       split_const (imm, &base, &offset);\n \n-      sty = aarch64_classify_symbol (base, offset, SYMBOL_CONTEXT_ADR);\n+      sty = aarch64_classify_symbol (base, offset);\n       switch (sty)\n \t{\n \tcase SYMBOL_FORCE_TO_MEM:\n@@ -3250,7 +3250,7 @@ aarch64_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n   split_const (x, &base, &offset);\n   if (GET_CODE (base) == SYMBOL_REF || GET_CODE (base) == LABEL_REF)\n     {\n-      if (aarch64_classify_symbol (base, offset, SYMBOL_CONTEXT_ADR)\n+      if (aarch64_classify_symbol (base, offset)\n \t  != SYMBOL_FORCE_TO_MEM)\n \treturn true;\n       else\n@@ -3696,8 +3696,7 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t  rtx sym, offs;\n \t  split_const (info->offset, &sym, &offs);\n \t  if (GET_CODE (sym) == SYMBOL_REF\n-\t      && (aarch64_classify_symbol (sym, offs, SYMBOL_CONTEXT_MEM)\n-\t\t  == SYMBOL_SMALL_ABSOLUTE))\n+\t      && (aarch64_classify_symbol (sym, offs) == SYMBOL_SMALL_ABSOLUTE))\n \t    {\n \t      /* The symbol and offset must be aligned to the access size.  */\n \t      unsigned int align;\n@@ -3743,17 +3742,15 @@ aarch64_symbolic_address_p (rtx x)\n   return GET_CODE (x) == SYMBOL_REF || GET_CODE (x) == LABEL_REF;\n }\n \n-/* Classify the base of symbolic expression X, given that X appears in\n-   context CONTEXT.  */\n+/* Classify the base of symbolic expression X.  */\n \n enum aarch64_symbol_type\n-aarch64_classify_symbolic_expression (rtx x,\n-\t\t\t\t      enum aarch64_symbol_context context)\n+aarch64_classify_symbolic_expression (rtx x)\n {\n   rtx offset;\n \n   split_const (x, &x, &offset);\n-  return aarch64_classify_symbol (x, offset, context);\n+  return aarch64_classify_symbol (x, offset);\n }\n \n \n@@ -4441,7 +4438,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n       if (GET_CODE (x) == HIGH)\n \tx = XEXP (x, 0);\n \n-      switch (aarch64_classify_symbolic_expression (x, SYMBOL_CONTEXT_ADR))\n+      switch (aarch64_classify_symbolic_expression (x))\n \t{\n \tcase SYMBOL_SMALL_GOT_4G:\n \t  asm_fprintf (asm_out_file, \":got:\");\n@@ -4474,7 +4471,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n       break;\n \n     case 'L':\n-      switch (aarch64_classify_symbolic_expression (x, SYMBOL_CONTEXT_ADR))\n+      switch (aarch64_classify_symbolic_expression (x))\n \t{\n \tcase SYMBOL_SMALL_GOT_4G:\n \t  asm_fprintf (asm_out_file, \":lo12:\");\n@@ -4516,7 +4513,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \n     case 'G':\n \n-      switch (aarch64_classify_symbolic_expression (x, SYMBOL_CONTEXT_ADR))\n+      switch (aarch64_classify_symbolic_expression (x))\n \t{\n \tcase SYMBOL_TLSLE24:\n \t  asm_fprintf (asm_out_file, \":tprel_hi12:\");\n@@ -8753,11 +8750,10 @@ aarch64_classify_tls_symbol (rtx x)\n }\n \n /* Return the method that should be used to access SYMBOL_REF or\n-   LABEL_REF X in context CONTEXT.  */\n+   LABEL_REF X.  */\n \n enum aarch64_symbol_type\n-aarch64_classify_symbol (rtx x, rtx offset,\n-\t\t\t enum aarch64_symbol_context context ATTRIBUTE_UNUSED)\n+aarch64_classify_symbol (rtx x, rtx offset)\n {\n   if (GET_CODE (x) == LABEL_REF)\n     {\n@@ -10185,9 +10181,7 @@ aarch64_simd_imm_scalar_p (rtx x, machine_mode mode ATTRIBUTE_UNUSED)\n }\n \n bool\n-aarch64_mov_operand_p (rtx x,\n-\t\t       enum aarch64_symbol_context context,\n-\t\t       machine_mode mode)\n+aarch64_mov_operand_p (rtx x, machine_mode mode)\n {\n   if (GET_CODE (x) == HIGH\n       && aarch64_valid_symref (XEXP (x, 0), GET_MODE (XEXP (x, 0))))\n@@ -10199,7 +10193,7 @@ aarch64_mov_operand_p (rtx x,\n   if (GET_CODE (x) == SYMBOL_REF && mode == DImode && CONSTANT_ADDRESS_P (x))\n     return true;\n \n-  return aarch64_classify_symbolic_expression (x, context)\n+  return aarch64_classify_symbolic_expression (x)\n     == SYMBOL_TINY_ABSOLUTE;\n }\n "}, {"sha": "7841378a5dacb0531c898d80b0eb02733f8fc901", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6e0bfa7ca349b889d4a2c689984b63680ada211/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6e0bfa7ca349b889d4a2c689984b63680ada211/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=a6e0bfa7ca349b889d4a2c689984b63680ada211", "patch": "@@ -165,7 +165,7 @@\n (define_predicate \"aarch64_valid_symref\"\n   (match_code \"const, symbol_ref, label_ref\")\n {\n-  return (aarch64_classify_symbolic_expression (op, SYMBOL_CONTEXT_ADR)\n+  return (aarch64_classify_symbolic_expression (op)\n \t  != SYMBOL_FORCE_TO_MEM);\n })\n \n@@ -215,7 +215,7 @@\n   (and (match_code \"reg,subreg,mem,const,const_int,symbol_ref,label_ref,high\")\n        (ior (match_operand 0 \"register_operand\")\n \t    (ior (match_operand 0 \"memory_operand\")\n-\t\t (match_test \"aarch64_mov_operand_p (op, SYMBOL_CONTEXT_ADR, mode)\")))))\n+\t\t (match_test \"aarch64_mov_operand_p (op, mode)\")))))\n \n (define_predicate \"aarch64_movti_operand\"\n   (and (match_code \"reg,subreg,mem,const_int\")"}]}