{"sha": "dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkYjZmZmRjNWMyNTI2NGRkNzVhZDgyZGFkOGU0OGEwNzE4ZDJkOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-13T09:04:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-13T09:04:22Z"}, "message": "passes: Fix up subobject __bos [PR101419]\n\nThe following testcase is miscompiled, because VN during cunrolli changes\n__bos argument from address of a larger field to address of a smaller field\nand so __builtin_object_size (, 1) then folds into smaller value than the\nactually available size.\ncopy_reference_ops_from_ref has a hack for this, but it was using\ncfun->after_inlining as a check whether the hack can be ignored, and\ncunrolli is after_inlining.\n\nThis patch uses a property to make it exact (set at the end of objsz\npass that doesn't do insert_min_max_p) and additionally based on discussions\nin the PR moves the objsz pass earlier after IPA.\n\n2021-07-13  Jakub Jelinek  <jakub@redhat.com>\n\t    Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/101419\n\t* tree-pass.h (PROP_objsz): Define.\n\t(make_pass_early_object_sizes): Declare.\n\t* passes.def (pass_all_early_optimizations): Rename pass_object_sizes\n\tthere to pass_early_object_sizes, drop parameter.\n\t(pass_all_optimizations): Move pass_object_sizes right after pass_ccp,\n\tdrop parameter, move pass_post_ipa_warn right after that.\n\t* tree-object-size.c (pass_object_sizes::execute): Rename to...\n\t(object_sizes_execute): ... this.  Add insert_min_max_p argument.\n\t(pass_data_object_sizes): Move after object_sizes_execute.\n\t(pass_object_sizes): Likewise.  In execute method call\n\tobject_sizes_execute, drop set_pass_param method and insert_min_max_p\n\tnon-static data member and its initializer in the ctor.\n\t(pass_data_early_object_sizes, pass_early_object_sizes,\n\tmake_pass_early_object_sizes): New.\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Use\n\t(cfun->curr_properties & PROP_objsz) instead of cfun->after_inlining.\n\n\t* gcc.dg/builtin-object-size-10.c: Pass -fdump-tree-early_objsz-details\n\tinstead of -fdump-tree-objsz1-details in dg-options and adjust names\n\tof dump file in scan-tree-dump.\n\t* gcc.dg/pr101419.c: New test.", "tree": {"sha": "35d686b02d359687426fa3ecc944083704d7a3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35d686b02d359687426fa3ecc944083704d7a3cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f10ba5b57250506d69a0391ea7771c843ea286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f10ba5b57250506d69a0391ea7771c843ea286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42f10ba5b57250506d69a0391ea7771c843ea286"}], "stats": {"total": 196, "additions": 145, "deletions": 51}, "files": [{"sha": "f5d88a61b0e847f58cae9c92ca614f9d9ae250c0", "filename": "gcc/passes.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "patch": "@@ -74,7 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_all_early_optimizations);\n       PUSH_INSERT_PASSES_WITHIN (pass_all_early_optimizations)\n \t  NEXT_PASS (pass_remove_cgraph_callee_edges);\n-\t  NEXT_PASS (pass_object_sizes, true /* insert_min_max_p */);\n+\t  NEXT_PASS (pass_early_object_sizes);\n \t  /* Don't record nonzero bits before IPA to avoid\n \t     using too much memory.  */\n \t  NEXT_PASS (pass_ccp, false /* nonzero_p */);\n@@ -194,14 +194,14 @@ along with GCC; see the file COPYING3.  If not see\n \t They ensure memory accesses are not indirect wherever possible.  */\n       NEXT_PASS (pass_strip_predict_hints, false /* early_p */);\n       NEXT_PASS (pass_ccp, true /* nonzero_p */);\n-      NEXT_PASS (pass_post_ipa_warn);\n       /* After CCP we rewrite no longer addressed locals into SSA\n \t form if possible.  */\n+      NEXT_PASS (pass_object_sizes);\n+      NEXT_PASS (pass_post_ipa_warn);\n       NEXT_PASS (pass_complete_unrolli);\n       NEXT_PASS (pass_backprop);\n       NEXT_PASS (pass_phiprop);\n       NEXT_PASS (pass_forwprop);\n-      NEXT_PASS (pass_object_sizes, false /* insert_min_max_p */);\n       /* pass_build_alias is a dummy pass that ensures that we\n \t execute TODO_rebuild_alias at this point.  */\n       NEXT_PASS (pass_build_alias);"}, {"sha": "bfcdf5cc94ff10ca0f1752008d14129bd5e66e69", "filename": "gcc/testsuite/gcc.dg/builtin-object-size-10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-object-size-10.c?ref=dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-objsz1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-early_objsz-details\" } */\n // { dg-skip-if \"packed attribute missing for drone_source_packet\" { \"epiphany-*-*\" } }\n \n typedef struct {\n@@ -22,5 +22,5 @@ foo(char *x)\n   return dpkt;\n }\n \n-/* { dg-final { scan-tree-dump \"maximum object size 21\" \"objsz1\" } } */\n-/* { dg-final { scan-tree-dump \"maximum subobject size 16\" \"objsz1\" } } */\n+/* { dg-final { scan-tree-dump \"maximum object size 21\" \"early_objsz\" } } */\n+/* { dg-final { scan-tree-dump \"maximum subobject size 16\" \"early_objsz\" } } */"}, {"sha": "2cce3836badac108cccc418927733b434c932b9b", "filename": "gcc/testsuite/gcc.dg/pr101419.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101419.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101419.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101419.c?ref=dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "patch": "@@ -0,0 +1,62 @@\n+/* PR tree-optimization/101419 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+void baz (int, int) __attribute__((__warning__(\"detected overflow\")));\n+\n+union U {\n+  int i;\n+  char c;\n+};\n+\n+static void\n+foo (union U *u)\n+{\n+  if (__builtin_object_size (&u->c, 1) < sizeof (u->c))\n+    baz (__builtin_object_size (&u->c, 1), sizeof (u->c));\t/* { dg-bogus \"detected overflow\" } */\n+  __builtin_memset (&u->c, 0, sizeof (u->c));\n+\n+  if (__builtin_object_size (&u->i, 1) < sizeof (u->i))\n+    baz (__builtin_object_size (&u->i, 1), sizeof (u->i));\t/* { dg-bogus \"detected overflow\" } */\n+  __builtin_memset (&u->i, 0, sizeof (u->i));\n+}\n+\n+void\n+bar (union U *u)\n+{\n+  int i, j;\n+  for (i = 0; i < 1; i++)\n+    {\n+      foo (u);\n+      for (j = 0; j < 2; j++)\n+        asm volatile (\"\");\n+    }\n+}\n+\n+static void\n+qux (void *p, size_t q)\n+{\n+  if (__builtin_object_size (p, 1) < q)\n+    baz (__builtin_object_size (p, 1), q);\t\t\t/* { dg-bogus \"detected overflow\" } */\n+  __builtin_memset (p, 0, q);\n+}\n+\n+static void\n+corge (union U *u)\n+{\n+  qux (&u->c, sizeof (u->c));\n+  qux (&u->i, sizeof (u->i));\n+}\n+\n+void\n+garply (union U *u)\n+{\n+  int i, j;\n+  for (i = 0; i < 1; i++)\n+    {\n+      corge (u);\n+      for (j = 0; j < 2; j++)\n+        asm volatile (\"\");\n+    }\n+}"}, {"sha": "744748d4d9b8b39353f3bf9ff3e78f47696cd45f", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 73, "deletions": 41, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "patch": "@@ -1304,45 +1304,6 @@ fini_object_sizes (void)\n     }\n }\n \n-\n-/* Simple pass to optimize all __builtin_object_size () builtins.  */\n-\n-namespace {\n-\n-const pass_data pass_data_object_sizes =\n-{\n-  GIMPLE_PASS, /* type */\n-  \"objsz\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_NONE, /* tv_id */\n-  ( PROP_cfg | PROP_ssa ), /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n-\n-class pass_object_sizes : public gimple_opt_pass\n-{\n-public:\n-  pass_object_sizes (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_object_sizes, ctxt), insert_min_max_p (false)\n-  {}\n-\n-  /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_object_sizes (m_ctxt); }\n-  void set_pass_param (unsigned int n, bool param)\n-    {\n-      gcc_assert (n == 0);\n-      insert_min_max_p = param;\n-    }\n-  virtual unsigned int execute (function *);\n-\n- private:\n-  /* Determines whether the pass instance creates MIN/MAX_EXPRs.  */\n-  bool insert_min_max_p;\n-}; // class pass_object_sizes\n-\n /* Dummy valueize function.  */\n \n static tree\n@@ -1351,8 +1312,8 @@ do_valueize (tree t)\n   return t;\n }\n \n-unsigned int\n-pass_object_sizes::execute (function *fun)\n+static unsigned int\n+object_sizes_execute (function *fun, bool insert_min_max_p)\n {\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, fun)\n@@ -1453,10 +1414,81 @@ pass_object_sizes::execute (function *fun)\n   return 0;\n }\n \n+/* Simple pass to optimize all __builtin_object_size () builtins.  */\n+\n+namespace {\n+\n+const pass_data pass_data_object_sizes =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"objsz\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  ( PROP_cfg | PROP_ssa ), /* properties_required */\n+  PROP_objsz, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_object_sizes : public gimple_opt_pass\n+{\n+public:\n+  pass_object_sizes (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_object_sizes, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  opt_pass * clone () { return new pass_object_sizes (m_ctxt); }\n+  virtual unsigned int execute (function *fun)\n+  {\n+    return object_sizes_execute (fun, false);\n+  }\n+}; // class pass_object_sizes\n+\n } // anon namespace\n \n gimple_opt_pass *\n make_pass_object_sizes (gcc::context *ctxt)\n {\n   return new pass_object_sizes (ctxt);\n }\n+\n+/* Early version of pass to optimize all __builtin_object_size () builtins.  */\n+\n+namespace {\n+\n+const pass_data pass_data_early_object_sizes =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"early_objsz\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_NONE, /* tv_id */\n+  ( PROP_cfg | PROP_ssa ), /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_early_object_sizes : public gimple_opt_pass\n+{\n+public:\n+  pass_early_object_sizes (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_early_object_sizes, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  virtual unsigned int execute (function *fun)\n+  {\n+    return object_sizes_execute (fun, true);\n+  }\n+}; // class pass_object_sizes\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_early_object_sizes (gcc::context *ctxt)\n+{\n+  return new pass_early_object_sizes (ctxt);\n+}"}, {"sha": "aa9757a2fe9924ab991fc2e2f35533733a0916cc", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "patch": "@@ -208,6 +208,7 @@ class simple_ipa_opt_pass : public opt_pass\n #define PROP_gimple_lcf\t\t(1 << 1)\t/* lowered control flow */\n #define PROP_gimple_leh\t\t(1 << 2)\t/* lowered eh */\n #define PROP_cfg\t\t(1 << 3)\n+#define PROP_objsz\t\t(1 << 4)\t/* object sizes computed */\n #define PROP_ssa\t\t(1 << 5)\n #define PROP_no_crit_edges      (1 << 6)\n #define PROP_rtl\t\t(1 << 7)\n@@ -426,6 +427,7 @@ extern gimple_opt_pass *make_pass_omp_target_link (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_oacc_device_lower (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_omp_device_lower (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_object_sizes (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_early_object_sizes (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_warn_printf (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_strlen (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_fold_builtins (gcc::context *ctxt);"}, {"sha": "d6aee2ef60d1db1e7ef7d3006b2a91ef21d1f98c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=dddb6ffdc5c25264dd75ad82dad8e48a0718d2d9", "patch": "@@ -925,12 +925,10 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n \t\t\t + (wi::to_offset (bit_offset) >> LOG2_BITS_PER_UNIT));\n \t\t    /* Probibit value-numbering zero offset components\n \t\t       of addresses the same before the pass folding\n-\t\t       __builtin_object_size had a chance to run\n-\t\t       (checking cfun->after_inlining does the\n-\t\t       trick here).  */\n+\t\t       __builtin_object_size had a chance to run.  */\n \t\t    if (TREE_CODE (orig) != ADDR_EXPR\n \t\t\t|| maybe_ne (off, 0)\n-\t\t\t|| cfun->after_inlining)\n+\t\t\t|| (cfun->curr_properties & PROP_objsz))\n \t\t      off.to_shwi (&temp.off);\n \t\t  }\n \t      }"}]}