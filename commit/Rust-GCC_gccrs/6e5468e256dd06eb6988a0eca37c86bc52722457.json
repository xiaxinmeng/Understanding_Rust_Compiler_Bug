{"sha": "6e5468e256dd06eb6988a0eca37c86bc52722457", "node_id": "C_kwDOANBUbNoAKDZlNTQ2OGUyNTZkZDA2ZWI2OTg4YTBlY2EzN2M4NmJjNTI3MjI0NTc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-20T14:50:46Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-06-20T14:50:46Z"}, "message": "hir: Add ConstGenericArg and lower them properly", "tree": {"sha": "76ad85909cc24b3fab44967026e65b812e868bbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76ad85909cc24b3fab44967026e65b812e868bbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e5468e256dd06eb6988a0eca37c86bc52722457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5468e256dd06eb6988a0eca37c86bc52722457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5468e256dd06eb6988a0eca37c86bc52722457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5468e256dd06eb6988a0eca37c86bc52722457/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f996567e84015714bcf322d11a46580611e3377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f996567e84015714bcf322d11a46580611e3377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f996567e84015714bcf322d11a46580611e3377"}], "stats": {"total": 89, "additions": 62, "deletions": 27}, "files": [{"sha": "03758d01dde9446d06a7902bf885437a9e31d30b", "filename": "gcc/rust/ast/rust-path.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5468e256dd06eb6988a0eca37c86bc52722457/gcc%2Frust%2Fast%2Frust-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5468e256dd06eb6988a0eca37c86bc52722457/gcc%2Frust%2Fast%2Frust-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-path.h?ref=6e5468e256dd06eb6988a0eca37c86bc52722457", "patch": "@@ -189,6 +189,8 @@ class ConstGenericArg\n \n   Kind get_kind () const { return kind; }\n \n+  std::unique_ptr<AST::Expr> &get_expression () { return expression; }\n+\n   std::string as_string () const\n   {\n     switch (get_kind ())"}, {"sha": "7e80f81109214b8fede7bc9875ac37611a6e4044", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5468e256dd06eb6988a0eca37c86bc52722457/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5468e256dd06eb6988a0eca37c86bc52722457/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=6e5468e256dd06eb6988a0eca37c86bc52722457", "patch": "@@ -612,8 +612,19 @@ ASTLoweringBase::lower_generic_args (AST::GenericArgs &args)\n       type_args.push_back (std::unique_ptr<HIR::Type> (t));\n     }\n \n+  std::vector<HIR::ConstGenericArg> const_args;\n+  for (auto &const_arg : args.get_const_args ())\n+    const_args.emplace_back (HIR::ConstGenericArg (\n+      std::unique_ptr<HIR::Expr> (\n+\tASTLoweringExpr::translate (const_arg.get_expression ().get ())),\n+      Location ()));\n+\n+  // FIXME:\n+  // const_arg.get_locus ());\n+\n   return HIR::GenericArgs (std::move (lifetime_args), std::move (type_args),\n-\t\t\t   std::move (binding_args), args.get_locus ());\n+\t\t\t   std::move (binding_args), std::move (const_args),\n+\t\t\t   args.get_locus ());\n }\n \n HIR::SelfParam\n@@ -650,29 +661,17 @@ ASTLowerTypePath::visit (AST::TypePathSegmentGeneric &segment)\n   bool has_separating_scope_resolution\n     = segment.get_separating_scope_resolution ();\n \n-  std::vector<HIR::Lifetime> lifetime_args;\n-  for (auto &lifetime : segment.get_generic_args ().get_lifetime_args ())\n-    {\n-      HIR::Lifetime l = lower_lifetime (lifetime);\n-      lifetime_args.push_back (std::move (l));\n-    }\n-\n-  std::vector<std::unique_ptr<HIR::Type>> type_args;\n-  for (auto &type : segment.get_generic_args ().get_type_args ())\n-    {\n-      HIR::Type *t = ASTLoweringType::translate (type.get ());\n-      type_args.push_back (std::unique_ptr<HIR::Type> (t));\n-    }\n+  auto generic_args = lower_generic_args (segment.get_generic_args ());\n \n   auto crate_num = mappings->get_current_crate ();\n   auto hirid = mappings->get_next_hir_id (crate_num);\n   Analysis::NodeMapping mapping (crate_num, segment.get_node_id (), hirid,\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n-  translated_segment = new HIR::TypePathSegmentGeneric (\n-    std::move (mapping), segment_name, has_separating_scope_resolution,\n-    std::move (lifetime_args), std::move (type_args), std::move (binding_args),\n-    segment.get_locus ());\n+  translated_segment\n+    = new HIR::TypePathSegmentGeneric (std::move (mapping), segment_name,\n+\t\t\t\t       has_separating_scope_resolution,\n+\t\t\t\t       generic_args, segment.get_locus ());\n }\n \n void"}, {"sha": "a5006f5f4c7b614a6167ca5a5e360e42060333e9", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5468e256dd06eb6988a0eca37c86bc52722457/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5468e256dd06eb6988a0eca37c86bc52722457/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=6e5468e256dd06eb6988a0eca37c86bc52722457", "patch": "@@ -112,12 +112,41 @@ struct GenericArgsBinding\n   Location get_locus () const { return locus; }\n };\n \n+class ConstGenericArg\n+{\n+  // FIXME: Do we need to disambiguate or no? We should be able to disambiguate\n+  // at name-resolution, hence no need for ambiguities here\n+\n+public:\n+  ConstGenericArg (std::unique_ptr<Expr> expression, Location locus)\n+    : expression (std::move (expression)), locus (locus)\n+  {}\n+\n+  ConstGenericArg (const ConstGenericArg &other) : locus (other.locus)\n+  {\n+    expression = other.expression->clone_expr ();\n+  }\n+\n+  ConstGenericArg operator= (const ConstGenericArg &other)\n+  {\n+    expression = other.expression->clone_expr ();\n+    locus = other.locus;\n+\n+    return *this;\n+  }\n+\n+private:\n+  std::unique_ptr<Expr> expression;\n+  Location locus;\n+};\n+\n // Generic arguments allowed in each path expression segment - inline?\n struct GenericArgs\n {\n   std::vector<Lifetime> lifetime_args;\n   std::vector<std::unique_ptr<Type> > type_args;\n   std::vector<GenericArgsBinding> binding_args;\n+  std::vector<ConstGenericArg> const_args;\n   Location locus;\n \n public:\n@@ -130,18 +159,21 @@ struct GenericArgs\n \n   GenericArgs (std::vector<Lifetime> lifetime_args,\n \t       std::vector<std::unique_ptr<Type> > type_args,\n-\t       std::vector<GenericArgsBinding> binding_args, Location locus)\n+\t       std::vector<GenericArgsBinding> binding_args,\n+\t       std::vector<ConstGenericArg> const_args, Location locus)\n     : lifetime_args (std::move (lifetime_args)),\n       type_args (std::move (type_args)),\n-      binding_args (std::move (binding_args)), locus (locus)\n+      binding_args (std::move (binding_args)),\n+      const_args (std::move (const_args)), locus (locus)\n   {}\n \n   // copy constructor with vector clone\n   GenericArgs (GenericArgs const &other)\n     : lifetime_args (other.lifetime_args), binding_args (other.binding_args),\n-      locus (other.locus)\n+      const_args (other.const_args), locus (other.locus)\n   {\n     type_args.reserve (other.type_args.size ());\n+\n     for (const auto &e : other.type_args)\n       type_args.push_back (e->clone_type ());\n   }\n@@ -153,6 +185,7 @@ struct GenericArgs\n   {\n     lifetime_args = other.lifetime_args;\n     binding_args = other.binding_args;\n+    const_args = other.const_args;\n     locus = other.locus;\n \n     type_args.reserve (other.type_args.size ());\n@@ -169,9 +202,7 @@ struct GenericArgs\n   // Creates an empty GenericArgs (no arguments)\n   static GenericArgs create_empty (Location locus = Location ())\n   {\n-    return GenericArgs (std::vector<Lifetime> (),\n-\t\t\tstd::vector<std::unique_ptr<Type> > (),\n-\t\t\tstd::vector<GenericArgsBinding> (), locus);\n+    return GenericArgs ({}, {}, {}, {}, locus);\n   }\n \n   bool is_empty () const\n@@ -188,6 +219,8 @@ struct GenericArgs\n \n   std::vector<GenericArgsBinding> &get_binding_args () { return binding_args; }\n \n+  std::vector<ConstGenericArg> &get_const_args () { return const_args; }\n+\n   Location get_locus () const { return locus; }\n };\n \n@@ -464,12 +497,13 @@ class TypePathSegmentGeneric : public TypePathSegment\n \t\t\t  std::vector<Lifetime> lifetime_args,\n \t\t\t  std::vector<std::unique_ptr<Type> > type_args,\n \t\t\t  std::vector<GenericArgsBinding> binding_args,\n+\t\t\t  std::vector<ConstGenericArg> const_args,\n \t\t\t  Location locus)\n     : TypePathSegment (std::move (mappings), std::move (segment_name),\n \t\t       has_separating_scope_resolution, locus),\n-      generic_args (GenericArgs (std::move (lifetime_args),\n-\t\t\t\t std::move (type_args),\n-\t\t\t\t std::move (binding_args), locus))\n+      generic_args (\n+\tGenericArgs (std::move (lifetime_args), std::move (type_args),\n+\t\t     std::move (binding_args), std::move (const_args), locus))\n   {}\n \n   std::string as_string () const override;"}]}