{"sha": "5c036f3f0a3ca5980709c385477e0b0af1dbcd30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMwMzZmM2YwYTNjYTU5ODA3MDljMzg1NDc3ZTBiMGFmMWRiY2QzMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-15T13:32:48Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-15T13:32:48Z"}, "message": "nvptx.h (HARD_REGNO_NREGS): Reformat.\n\n\t* config/nvptx/nvptx.h (HARD_REGNO_NREGS): Reformat.\n\t(CANNOT_CHANGE_MODE_CLASS): Always return true.\n\t(HARD_REGNO_MODE_OK): Reformat.\n\t* config/nvptx/nvptx.md (define_expand mov<mode>): No\n\tRETURN_REGNUM handling here.\n\t* config/nvptx/nvptx.c (nvptx_function_value): Set ret_reg_mode\n\there.\n\t(write_one_arg): No QI or HI mode args.\n\t(write_fn_proto_from_insn): No argument promotion here.\n\t(nvptx_output_return_insn): No return promotion here.\n\t(nvptx_output_mov_insn): No RETURN_REGNUM handling needed.\n\t(nvptx_output_call_insn): No return promotion here.\n\nFrom-SVN: r231651", "tree": {"sha": "d1a7930f210ebcc6a10b143ae571621ea014be8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1a7930f210ebcc6a10b143ae571621ea014be8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c036f3f0a3ca5980709c385477e0b0af1dbcd30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c036f3f0a3ca5980709c385477e0b0af1dbcd30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c036f3f0a3ca5980709c385477e0b0af1dbcd30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c036f3f0a3ca5980709c385477e0b0af1dbcd30/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fceb21584e9176c22775f00641ee1fcb8c62798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fceb21584e9176c22775f00641ee1fcb8c62798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fceb21584e9176c22775f00641ee1fcb8c62798"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "ca50fba0f69e783dae584567193f43c601b583fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c036f3f0a3ca5980709c385477e0b0af1dbcd30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c036f3f0a3ca5980709c385477e0b0af1dbcd30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c036f3f0a3ca5980709c385477e0b0af1dbcd30", "patch": "@@ -1,3 +1,18 @@\n+2015-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.h (HARD_REGNO_NREGS): Reformat.\n+\t(CANNOT_CHANGE_MODE_CLASS): Always return true.\n+\t(HARD_REGNO_MODE_OK): Reformat.\n+\t* config/nvptx/nvptx.md (define_expand mov<mode>): No\n+\tRETURN_REGNUM handling here.\n+\t* config/nvptx/nvptx.c (nvptx_function_value): Set ret_reg_mode\n+\there.\n+\t(write_one_arg): No QI or HI mode args.\n+\t(write_fn_proto_from_insn): No argument promotion here.\n+\t(nvptx_output_return_insn): No return promotion here.\n+\t(nvptx_output_mov_insn): No RETURN_REGNUM handling needed.\n+\t(nvptx_output_call_insn): No return promotion here.\n+\n 2015-12-15  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/68851"}, {"sha": "0fe389f28079fd4611ba4bc94b4e54c181979ebd", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c036f3f0a3ca5980709c385477e0b0af1dbcd30/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c036f3f0a3ca5980709c385477e0b0af1dbcd30/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=5c036f3f0a3ca5980709c385477e0b0af1dbcd30", "patch": "@@ -516,7 +516,10 @@ nvptx_function_value (const_tree type, const_tree ARG_UNUSED (func),\n   machine_mode mode = promote_return (TYPE_MODE (type));\n \n   if (outgoing)\n-    return gen_rtx_REG (mode, NVPTX_RETURN_REGNUM);\n+    {\n+      cfun->machine->ret_reg_mode = mode;\n+      return gen_rtx_REG (mode, NVPTX_RETURN_REGNUM);\n+    }\n \n   return nvptx_libcall_value (mode, NULL_RTX);\n }\n@@ -586,8 +589,6 @@ write_one_arg (std::stringstream &s, int for_reg, int argno, machine_mode mode)\n       /* Writing PTX prototype.  */\n       s << (argno ? \", \" : \" (\");\n       s << \".param\" << ptx_type << \" %in_ar\" << argno;\n-      if (mode == QImode || mode == HImode)\n-\ts << \"[1]\";\n     }\n   else\n     {\n@@ -674,6 +675,7 @@ write_return (std::stringstream &s, bool for_proto, tree type)\n \t this data, but more importantly for us, we must ensure it\n \t doesn't change the PTX prototype.  */\n       mode = (machine_mode) cfun->machine->ret_reg_mode;\n+\n       if (mode == VOIDmode)\n \treturn return_in_mem;\n \n@@ -834,7 +836,7 @@ write_fn_proto_from_insn (std::stringstream &s, const char *name,\n \n   if (result != NULL_RTX)\n     s << \"(.param\"\n-      << nvptx_ptx_type_from_mode (arg_promotion (GET_MODE (result)), false)\n+      << nvptx_ptx_type_from_mode (GET_MODE (result), false)\n       << \" %rval) \";\n \n   s << name;\n@@ -1049,11 +1051,8 @@ nvptx_output_return (void)\n   machine_mode mode = (machine_mode)cfun->machine->ret_reg_mode;\n \n   if (mode != VOIDmode)\n-    {\n-      mode = arg_promotion (mode);\n-      fprintf (asm_out_file, \"\\tst.param%s\\t[%%out_retval], %%retval;\\n\",\n-\t       nvptx_ptx_type_from_mode (mode, false));\n-    }\n+    fprintf (asm_out_file, \"\\tst.param%s\\t[%%out_retval], %%retval;\\n\",\n+\t     nvptx_ptx_type_from_mode (mode, false));\n \n   return \"ret;\";\n }\n@@ -1804,12 +1803,6 @@ nvptx_output_mov_insn (rtx dst, rtx src)\n   machine_mode src_inner = (GET_CODE (src) == SUBREG\n \t\t\t    ? GET_MODE (XEXP (src, 0)) : dst_mode);\n \n-  if (REG_P (dst) && REGNO (dst) == NVPTX_RETURN_REGNUM && dst_mode == HImode)\n-    /* Special handling for the return register.  It's never really an\n-       HI object, and only occurs as the destination of a move\n-       insn.  */\n-    dst_inner = SImode;\n-\n   if (src_inner == dst_inner)\n     return \"%.\\tmov%t0\\t%0, %1;\";\n \n@@ -1841,8 +1834,7 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n   fprintf (asm_out_file, \"\\t{\\n\");\n   if (result != NULL)\n     fprintf (asm_out_file, \"\\t\\t.param%s %%retval_in;\\n\",\n-\t     nvptx_ptx_type_from_mode (arg_promotion (GET_MODE (result)),\n-\t\t\t\t       false));\n+\t     nvptx_ptx_type_from_mode (GET_MODE (result), false));\n \n   /* Ensure we have a ptx declaration in the output if necessary.  */\n   if (GET_CODE (callee) == SYMBOL_REF)"}, {"sha": "2015c1191527140f094c7cc649e1b346e5063c44", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c036f3f0a3ca5980709c385477e0b0af1dbcd30/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c036f3f0a3ca5980709c385477e0b0af1dbcd30/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=5c036f3f0a3ca5980709c385477e0b0af1dbcd30", "patch": "@@ -90,9 +90,12 @@\n #define CALL_USED_REGISTERS\t\t\t\t\\\n   { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }\n \n-#define HARD_REGNO_NREGS(regno, mode)\t((void)(regno), (void)(mode), 1)\n-#define CANNOT_CHANGE_MODE_CLASS(M1, M2, CLS) ((CLS) == RETURN_REG)\n-#define HARD_REGNO_MODE_OK(REG, MODE) nvptx_hard_regno_mode_ok (REG, MODE)\n+#define HARD_REGNO_NREGS(REG, MODE)\t\t\\\n+  ((void)(REG), (void)(MODE), 1)\n+#define CANNOT_CHANGE_MODE_CLASS(M1, M2, CLS)\t\\\n+  ((void)(M1), (void)(M2), (void)(CLS), true)\n+#define HARD_REGNO_MODE_OK(REG, MODE)\t\t\\\n+     ((void)(REG), (void)(MODE), true)\n \n /* Register Classes.  */\n "}, {"sha": "43682256e819e1b970e0b2e63f386539cf003d77", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c036f3f0a3ca5980709c385477e0b0af1dbcd30/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c036f3f0a3ca5980709c385477e0b0af1dbcd30/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=5c036f3f0a3ca5980709c385477e0b0af1dbcd30", "patch": "@@ -280,16 +280,6 @@\n   \"\"\n {\n   operands[1] = nvptx_maybe_convert_symbolic_operand (operands[1]);\n-  /* Record the mode of the return register so that we can prevent\n-     later optimization passes from changing it.  */\n-  if (REG_P (operands[0]) && REGNO (operands[0]) == NVPTX_RETURN_REGNUM\n-      && cfun)\n-    {\n-      if (cfun->machine->ret_reg_mode == VOIDmode)\n-\tcfun->machine->ret_reg_mode = GET_MODE (operands[0]);\n-      else\n-        gcc_assert (cfun->machine->ret_reg_mode == GET_MODE (operands[0]));\n-    }\n \n   /* Hard registers are often actually symbolic operands on this target.\n      Don't allow them when storing to memory.  */"}]}