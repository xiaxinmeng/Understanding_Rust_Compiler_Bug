{"sha": "d55ab31d105b43b177688b16339cc5e881c28d72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU1YWIzMWQxMDViNDNiMTc3Njg4YjE2MzM5Y2M1ZTg4MWMyOGQ3Mg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-08-19T22:24:56Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-19T22:24:56Z"}, "message": "defaults.h (TARGET_LIBGCC_LIBFUNCS): Remove.\n\n\t* defaults.h (TARGET_LIBGCC_LIBFUNCS): Remove.\n\t* optabs.c (init_optabs): Don't check it.\n\t* config/arm/bpabi.h (TARGET_LIBGCC_LIBFUNCS): Do not define.\n\t* doc/tm.texi (TARGET_LIBGCC_FUNCS): Remove.\n\nFrom-SVN: r86285", "tree": {"sha": "87143212e4e338a48fb6ef2723d201ec9dbcba10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87143212e4e338a48fb6ef2723d201ec9dbcba10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d55ab31d105b43b177688b16339cc5e881c28d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55ab31d105b43b177688b16339cc5e881c28d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d55ab31d105b43b177688b16339cc5e881c28d72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55ab31d105b43b177688b16339cc5e881c28d72/comments", "author": null, "committer": null, "parents": [{"sha": "d75f90f1923454ae3dac50d69b90d907ac2607c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75f90f1923454ae3dac50d69b90d907ac2607c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75f90f1923454ae3dac50d69b90d907ac2607c6"}], "stats": {"total": 168, "additions": 77, "deletions": 91}, "files": [{"sha": "5b4668eac3a9f0be99bc326f696ee8f72c12e1b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55ab31d105b43b177688b16339cc5e881c28d72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55ab31d105b43b177688b16339cc5e881c28d72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d55ab31d105b43b177688b16339cc5e881c28d72", "patch": "@@ -1,3 +1,10 @@\n+2004-08-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* defaults.h (TARGET_LIBGCC_LIBFUNCS): Remove.\n+\t* optabs.c (init_optabs): Don't check it.\n+\t* config/arm/bpabi.h (TARGET_LIBGCC_LIBFUNCS): Do not define.\n+\t* doc/tm.texi (TARGET_LIBGCC_FUNCS): Remove.\n+\n 2004-08-18  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.md (s390_warn_framesize_string)"}, {"sha": "815ac306ec565d5a543447175e8b2e0dd0b1a6da", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55ab31d105b43b177688b16339cc5e881c28d72/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55ab31d105b43b177688b16339cc5e881c28d72/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=d55ab31d105b43b177688b16339cc5e881c28d72", "patch": "@@ -33,10 +33,6 @@\n    calling convention.  */\n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) TARGET_BPABI\n \n-/* Do not generate calls to any of the standard GCC functions in\n-   libgcc when generating BPABI code.  */\n-#define TARGET_LIBGCC_LIBFUNCS !TARGET_BPABI\n-\n /* The BPABI integer comparision routines return { -1, 0, 1 }.  */\n #define TARGET_LIB_INT_CMP_BIASED !TARGET_BPABI\n "}, {"sha": "b7d393defb9d65448f5fb14df84ebf07dfe5e045", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55ab31d105b43b177688b16339cc5e881c28d72/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55ab31d105b43b177688b16339cc5e881c28d72/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=d55ab31d105b43b177688b16339cc5e881c28d72", "patch": "@@ -627,12 +627,6 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define FLOAT_LIB_COMPARE_RETURNS_BOOL(MODE, COMPARISON) false\n #endif\n \n-/* True if the target should use the standard libgcc arithmetic\n-   library functions, like __addsi3 and _fixdfdi.  */\n-#ifndef TARGET_LIBGCC_LIBFUNCS\n-#define TARGET_LIBGCC_LIBFUNCS (true)\n-#endif\n-\n /* True if the targets integer-comparision fucntions return { 0, 1, 2\n    } to indicate { <, ==, > }.  False if { -1, 0, 1 } is used\n    instead.  The libgcc routines are biased.  */"}, {"sha": "2f99cef84df944263d82ebd376bf1e5717cc1d8f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55ab31d105b43b177688b16339cc5e881c28d72/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55ab31d105b43b177688b16339cc5e881c28d72/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d55ab31d105b43b177688b16339cc5e881c28d72", "patch": "@@ -4765,14 +4765,6 @@ comparison operators, so the default returns false always.  Most ports\n don't need to define this macro.\n @end defmac\n \n-@defmac TARGET_LIBGCC_FUNCS\n-This macro should evaluate to @code{true} if the standard GCC library\n-names (like @code{__modsi3}) should be used for functions provided in\n-@file{libgcc.a}.  If this macro evaluates to @code{false}, then the\n-target must explictily set the names of all desired library functions\n-itself using the @code{TARGET_INIT_LIBFUNCS} hook.\n-@end defmac\n-\n @defmac TARGET_LIB_INT_CMP_BIASED\n This macro should evaluate to @code{true} if the integer comparison\n functions (like @code{__cmpdi2}) return 0 to indicate that the first"}, {"sha": "0e8bb31984fa4e3d67ed6f9e41511200b10ad236", "filename": "gcc/optabs.c", "status": "modified", "additions": 70, "deletions": 73, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55ab31d105b43b177688b16339cc5e881c28d72/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55ab31d105b43b177688b16339cc5e881c28d72/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d55ab31d105b43b177688b16339cc5e881c28d72", "patch": "@@ -5483,79 +5483,76 @@ init_optabs (void)\n   init_all_optabs ();\n \n   /* Initialize the optabs with the names of the library functions.  */\n-  if (TARGET_LIBGCC_LIBFUNCS)\n-    {\n-      init_integral_libfuncs (add_optab, \"add\", '3');\n-      init_floating_libfuncs (add_optab, \"add\", '3');\n-      init_integral_libfuncs (addv_optab, \"addv\", '3');\n-      init_floating_libfuncs (addv_optab, \"add\", '3');\n-      init_integral_libfuncs (sub_optab, \"sub\", '3');\n-      init_floating_libfuncs (sub_optab, \"sub\", '3');\n-      init_integral_libfuncs (subv_optab, \"subv\", '3');\n-      init_floating_libfuncs (subv_optab, \"sub\", '3');\n-      init_integral_libfuncs (smul_optab, \"mul\", '3');\n-      init_floating_libfuncs (smul_optab, \"mul\", '3');\n-      init_integral_libfuncs (smulv_optab, \"mulv\", '3');\n-      init_floating_libfuncs (smulv_optab, \"mul\", '3');\n-      init_integral_libfuncs (sdiv_optab, \"div\", '3');\n-      init_floating_libfuncs (sdiv_optab, \"div\", '3');\n-      init_integral_libfuncs (sdivv_optab, \"divv\", '3');\n-      init_integral_libfuncs (udiv_optab, \"udiv\", '3');\n-      init_integral_libfuncs (sdivmod_optab, \"divmod\", '4');\n-      init_integral_libfuncs (udivmod_optab, \"udivmod\", '4');\n-      init_integral_libfuncs (smod_optab, \"mod\", '3');\n-      init_integral_libfuncs (umod_optab, \"umod\", '3');\n-      init_floating_libfuncs (ftrunc_optab, \"ftrunc\", '2');\n-      init_integral_libfuncs (and_optab, \"and\", '3');\n-      init_integral_libfuncs (ior_optab, \"ior\", '3');\n-      init_integral_libfuncs (xor_optab, \"xor\", '3');\n-      init_integral_libfuncs (ashl_optab, \"ashl\", '3');\n-      init_integral_libfuncs (ashr_optab, \"ashr\", '3');\n-      init_integral_libfuncs (lshr_optab, \"lshr\", '3');\n-      init_integral_libfuncs (smin_optab, \"min\", '3');\n-      init_floating_libfuncs (smin_optab, \"min\", '3');\n-      init_integral_libfuncs (smax_optab, \"max\", '3');\n-      init_floating_libfuncs (smax_optab, \"max\", '3');\n-      init_integral_libfuncs (umin_optab, \"umin\", '3');\n-      init_integral_libfuncs (umax_optab, \"umax\", '3');\n-      init_integral_libfuncs (neg_optab, \"neg\", '2');\n-      init_floating_libfuncs (neg_optab, \"neg\", '2');\n-      init_integral_libfuncs (negv_optab, \"negv\", '2');\n-      init_floating_libfuncs (negv_optab, \"neg\", '2');\n-      init_integral_libfuncs (one_cmpl_optab, \"one_cmpl\", '2');\n-      init_integral_libfuncs (ffs_optab, \"ffs\", '2');\n-      init_integral_libfuncs (clz_optab, \"clz\", '2');\n-      init_integral_libfuncs (ctz_optab, \"ctz\", '2');\n-      init_integral_libfuncs (popcount_optab, \"popcount\", '2');\n-      init_integral_libfuncs (parity_optab, \"parity\", '2');\n-\n-      /* Comparison libcalls for integers MUST come in pairs,\n-\t signed/unsigned.  */\n-      init_integral_libfuncs (cmp_optab, \"cmp\", '2');\n-      init_integral_libfuncs (ucmp_optab, \"ucmp\", '2');\n-      init_floating_libfuncs (cmp_optab, \"cmp\", '2');\n-\n-      /* EQ etc are floating point only.  */\n-      init_floating_libfuncs (eq_optab, \"eq\", '2');\n-      init_floating_libfuncs (ne_optab, \"ne\", '2');\n-      init_floating_libfuncs (gt_optab, \"gt\", '2');\n-      init_floating_libfuncs (ge_optab, \"ge\", '2');\n-      init_floating_libfuncs (lt_optab, \"lt\", '2');\n-      init_floating_libfuncs (le_optab, \"le\", '2');\n-      init_floating_libfuncs (unord_optab, \"unord\", '2');\n-\n-      /* Conversions.  */\n-      init_interclass_conv_libfuncs (sfloat_optab, \"float\", \n-\t\t\t\t     MODE_INT, MODE_FLOAT);\n-      init_interclass_conv_libfuncs (sfix_optab, \"fix\",     \n-\t\t\t\t     MODE_FLOAT, MODE_INT);\n-      init_interclass_conv_libfuncs (ufix_optab, \"fixuns\",  \n-\t\t\t\t     MODE_FLOAT, MODE_INT);\n-\n-      /* sext_optab is also used for FLOAT_EXTEND.  */\n-      init_intraclass_conv_libfuncs (sext_optab, \"extend\", MODE_FLOAT, true);\n-      init_intraclass_conv_libfuncs (trunc_optab, \"trunc\", MODE_FLOAT, false);\n-    }\n+  init_integral_libfuncs (add_optab, \"add\", '3');\n+  init_floating_libfuncs (add_optab, \"add\", '3');\n+  init_integral_libfuncs (addv_optab, \"addv\", '3');\n+  init_floating_libfuncs (addv_optab, \"add\", '3');\n+  init_integral_libfuncs (sub_optab, \"sub\", '3');\n+  init_floating_libfuncs (sub_optab, \"sub\", '3');\n+  init_integral_libfuncs (subv_optab, \"subv\", '3');\n+  init_floating_libfuncs (subv_optab, \"sub\", '3');\n+  init_integral_libfuncs (smul_optab, \"mul\", '3');\n+  init_floating_libfuncs (smul_optab, \"mul\", '3');\n+  init_integral_libfuncs (smulv_optab, \"mulv\", '3');\n+  init_floating_libfuncs (smulv_optab, \"mul\", '3');\n+  init_integral_libfuncs (sdiv_optab, \"div\", '3');\n+  init_floating_libfuncs (sdiv_optab, \"div\", '3');\n+  init_integral_libfuncs (sdivv_optab, \"divv\", '3');\n+  init_integral_libfuncs (udiv_optab, \"udiv\", '3');\n+  init_integral_libfuncs (sdivmod_optab, \"divmod\", '4');\n+  init_integral_libfuncs (udivmod_optab, \"udivmod\", '4');\n+  init_integral_libfuncs (smod_optab, \"mod\", '3');\n+  init_integral_libfuncs (umod_optab, \"umod\", '3');\n+  init_floating_libfuncs (ftrunc_optab, \"ftrunc\", '2');\n+  init_integral_libfuncs (and_optab, \"and\", '3');\n+  init_integral_libfuncs (ior_optab, \"ior\", '3');\n+  init_integral_libfuncs (xor_optab, \"xor\", '3');\n+  init_integral_libfuncs (ashl_optab, \"ashl\", '3');\n+  init_integral_libfuncs (ashr_optab, \"ashr\", '3');\n+  init_integral_libfuncs (lshr_optab, \"lshr\", '3');\n+  init_integral_libfuncs (smin_optab, \"min\", '3');\n+  init_floating_libfuncs (smin_optab, \"min\", '3');\n+  init_integral_libfuncs (smax_optab, \"max\", '3');\n+  init_floating_libfuncs (smax_optab, \"max\", '3');\n+  init_integral_libfuncs (umin_optab, \"umin\", '3');\n+  init_integral_libfuncs (umax_optab, \"umax\", '3');\n+  init_integral_libfuncs (neg_optab, \"neg\", '2');\n+  init_floating_libfuncs (neg_optab, \"neg\", '2');\n+  init_integral_libfuncs (negv_optab, \"negv\", '2');\n+  init_floating_libfuncs (negv_optab, \"neg\", '2');\n+  init_integral_libfuncs (one_cmpl_optab, \"one_cmpl\", '2');\n+  init_integral_libfuncs (ffs_optab, \"ffs\", '2');\n+  init_integral_libfuncs (clz_optab, \"clz\", '2');\n+  init_integral_libfuncs (ctz_optab, \"ctz\", '2');\n+  init_integral_libfuncs (popcount_optab, \"popcount\", '2');\n+  init_integral_libfuncs (parity_optab, \"parity\", '2');\n+\n+  /* Comparison libcalls for integers MUST come in pairs,\n+     signed/unsigned.  */\n+  init_integral_libfuncs (cmp_optab, \"cmp\", '2');\n+  init_integral_libfuncs (ucmp_optab, \"ucmp\", '2');\n+  init_floating_libfuncs (cmp_optab, \"cmp\", '2');\n+\n+  /* EQ etc are floating point only.  */\n+  init_floating_libfuncs (eq_optab, \"eq\", '2');\n+  init_floating_libfuncs (ne_optab, \"ne\", '2');\n+  init_floating_libfuncs (gt_optab, \"gt\", '2');\n+  init_floating_libfuncs (ge_optab, \"ge\", '2');\n+  init_floating_libfuncs (lt_optab, \"lt\", '2');\n+  init_floating_libfuncs (le_optab, \"le\", '2');\n+  init_floating_libfuncs (unord_optab, \"unord\", '2');\n+\n+  /* Conversions.  */\n+  init_interclass_conv_libfuncs (sfloat_optab, \"float\", \n+\t\t\t\t MODE_INT, MODE_FLOAT);\n+  init_interclass_conv_libfuncs (sfix_optab, \"fix\",     \n+\t\t\t\t MODE_FLOAT, MODE_INT);\n+  init_interclass_conv_libfuncs (ufix_optab, \"fixuns\",  \n+\t\t\t\t MODE_FLOAT, MODE_INT);\n+\n+  /* sext_optab is also used for FLOAT_EXTEND.  */\n+  init_intraclass_conv_libfuncs (sext_optab, \"extend\", MODE_FLOAT, true);\n+  init_intraclass_conv_libfuncs (trunc_optab, \"trunc\", MODE_FLOAT, false);\n \n   /* Use cabs for double complex abs, since systems generally have cabs.\n      Don't define any libcall for float complex, so that cabs will be used.  */"}]}