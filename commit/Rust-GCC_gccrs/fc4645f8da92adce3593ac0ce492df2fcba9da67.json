{"sha": "fc4645f8da92adce3593ac0ce492df2fcba9da67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM0NjQ1ZjhkYTkyYWRjZTM1OTNhYzBjZTQ5MmRmMmZjYmE5ZGE2Nw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T13:51:01Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T13:51:01Z"}, "message": "vrshrn_n.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vrshrn_n.c: New file.\n\nFrom-SVN: r224657", "tree": {"sha": "783f15db8cbb21c09bbbf760fe60bcd7a69eb2ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783f15db8cbb21c09bbbf760fe60bcd7a69eb2ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc4645f8da92adce3593ac0ce492df2fcba9da67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4645f8da92adce3593ac0ce492df2fcba9da67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc4645f8da92adce3593ac0ce492df2fcba9da67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4645f8da92adce3593ac0ce492df2fcba9da67/comments", "author": null, "committer": null, "parents": [{"sha": "f897dc1524cb8269fb703812180c2ca1beedeb20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f897dc1524cb8269fb703812180c2ca1beedeb20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f897dc1524cb8269fb703812180c2ca1beedeb20"}], "stats": {"total": 147, "additions": 147, "deletions": 0}, "files": [{"sha": "8a26ef1e26b4bb955d136e81e9a2927d207d46f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc4645f8da92adce3593ac0ce492df2fcba9da67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc4645f8da92adce3593ac0ce492df2fcba9da67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc4645f8da92adce3593ac0ce492df2fcba9da67", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrshrn_n.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vrshr_n.c: New file."}, {"sha": "a2b40b8ae138f728f146e60531a80b454507f974", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrshrn_n.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc4645f8da92adce3593ac0ce492df2fcba9da67/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshrn_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc4645f8da92adce3593ac0ce492df2fcba9da67/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshrn_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrshrn_n.c?ref=fc4645f8da92adce3593ac0ce492df2fcba9da67", "patch": "@@ -0,0 +1,143 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results with input=0.  */\n+VECT_VAR_DECL(expected_0,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t  0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_0,uint,32,2) [] = { 0x0, 0x0 };\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf8, 0xf9, 0xf9, 0xfa,\n+\t\t\t\t       0xfa, 0xfb, 0xfb, 0xfc };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff8, 0xfff9, 0xfff9, 0xfffa };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffffc, 0xfffffffc };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xfc, 0xfc, 0xfd, 0xfd,\n+\t\t\t\t\t0xfd, 0xfd, 0xfe, 0xfe };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfffe, 0xfffe, 0xfffe, 0xfffe };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffffe, 0xfffffffe };\n+\n+/* Expected results with large shift amount.  */\n+VECT_VAR_DECL(expected_sh_large,int,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_large,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_large,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_large,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t\t 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_large,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_sh_large,uint,32,2) [] = { 0x0, 0x0 };\n+\n+#define TEST_MSG \"VRSHRN_N\"\n+void exec_vrshrn_n (void)\n+{\n+  /* Basic test: v2=vrshrn_n(v1,v), then store the result.  */\n+#define TEST_VRSHRN_N(T1, T2, W, N, W2, V)\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W2, N) =\t\t\t\t\t\\\n+    vrshrn_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t     V);\t\t\t\t\t\t\\\n+  vst1_##T2##W2(VECT_VAR(result, T1, W2, N), VECT_VAR(vector_res, T1, W2, N))\n+\n+  /* vector is twice as large as vector_res.  */\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, int, 64, 2);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, uint, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with 0, to check behavior on limits.  */\n+  VDUP(vector, q, int, s, 16, 8, 0);\n+  VDUP(vector, q, int, s, 32, 4, 0);\n+  VDUP(vector, q, int, s, 64, 2, 0);\n+  VDUP(vector, q, uint, u, 16, 8, 0);\n+  VDUP(vector, q, uint, u, 32, 4, 0);\n+  VDUP(vector, q, uint, u, 64, 2, 0);\n+\n+  /* Choose shift amount arbitrarily.  */\n+  TEST_VRSHRN_N(int, s, 16, 8, 8, 1);\n+  TEST_VRSHRN_N(int, s, 32, 4, 16, 1);\n+  TEST_VRSHRN_N(int, s, 64, 2, 32, 2);\n+  TEST_VRSHRN_N(uint, u, 16, 8, 8, 2);\n+  TEST_VRSHRN_N(uint, u, 32, 4, 16, 3);\n+  TEST_VRSHRN_N(uint, u, 64, 2, 32, 3);\n+\n+#define CMT \" (with input = 0)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_0, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_0, CMT);\n+\n+\n+  /* Test again, with predefined input values.  */\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, int, s, 64, 2);\n+  VLOAD(vector, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 64, 2);\n+\n+  /* Choose shift amount arbitrarily.  */\n+  TEST_VRSHRN_N(int, s, 16, 8, 8, 1);\n+  TEST_VRSHRN_N(int, s, 32, 4, 16, 1);\n+  TEST_VRSHRN_N(int, s, 64, 2, 32, 2);\n+  TEST_VRSHRN_N(uint, u, 16, 8, 8, 2);\n+  TEST_VRSHRN_N(uint, u, 32, 4, 16, 3);\n+  TEST_VRSHRN_N(uint, u, 64, 2, 32, 3);\n+\n+#undef CMT\n+#define CMT \"\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+\n+\n+  /* Fill input arbitrary values.  */\n+  VDUP(vector, q, int, s, 16, 8, 30);\n+  VDUP(vector, q, int, s, 32, 4, 0);\n+  VDUP(vector, q, int, s, 64, 2, 0);\n+  VDUP(vector, q, uint, u, 16, 8, 0xFFF0);\n+  VDUP(vector, q, uint, u, 32, 4, 0xFFFFFFF0);\n+  VDUP(vector, q, uint, u, 64, 2, 0);\n+\n+  /* Choose large shift amount arbitrarily.  */\n+  TEST_VRSHRN_N(int, s, 16, 8, 8, 7);\n+  TEST_VRSHRN_N(int, s, 32, 4, 16, 14);\n+  TEST_VRSHRN_N(int, s, 64, 2, 32, 31);\n+  TEST_VRSHRN_N(uint, u, 16, 8, 8, 7);\n+  TEST_VRSHRN_N(uint, u, 32, 4, 16, 16);\n+  TEST_VRSHRN_N(uint, u, 64, 2, 32, 3);\n+\n+#undef CMT\n+#define CMT \" (with large shift amount)\"\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_sh_large, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_sh_large, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_sh_large, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vrshrn_n ();\n+  return 0;\n+}"}]}