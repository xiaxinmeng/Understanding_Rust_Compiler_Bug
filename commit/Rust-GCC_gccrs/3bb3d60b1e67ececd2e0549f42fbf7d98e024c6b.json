{"sha": "3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiM2Q2MGIxZTY3ZWNlY2QyZTA1NDlmNDJmYmY3ZDk4ZTAyNGM2Yg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-10-19T13:10:42Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-10-19T13:10:42Z"}, "message": "[ARM] PR 82445 - suppress 32-bit aligned ldrd/strd peepholing with -mno-unaligned-access\n\nPeephole patterns exist in the arm backend to spot load/store\noperations to adjacent memory operations in order to convert them into\nldrd/strd instructions.  However, when we have strict alignment\nenforced, then we can only do this if the accesses are known to be\n64-bit aligned; this is unlikely to be the case for most loads.  The\npatch adds some alignment checking to the code that validates the\naddresses for use in the peephole patterns.  This should also fix\nincorrect generation of ldrd/strd with unaligned accesses that could\npreviously have occurred on ARMv5e where all such operations must be\n64-bit aligned.\n\nI've added some new tests as well.  In doing so I discovered that the\nldrd/strd peephole tests could never fail since they would match the\nsource file name in the scanned assembly as well as any instructions\nof the intended type.  I've fixed those by tightening the scan results\nslightly.\n\ngcc:\n\n* config/arm/arm.c (align_ok_ldrd_strd): New function.\n(mem_ok_for_ldrd_strd): New parameter align.  Extract the alignment of the\nmem into it.\n(gen_operands_ldrd_strd): Validate the alignment of the accesses.\n\ntestsuite:\n\n* gcc.target/arm/peep-ldrd-1.c: Tighten test scan pattern.\n* gcc.target/arm/peep-strd-1.c: Likewise.\n* gcc.target/arm/peep-ldrd-2.c: New test.\n* gcc.target/arm/peep-strd-2.c: New test.\n\nFrom-SVN: r253890", "tree": {"sha": "a14a795717464a028ac09330f1d6291ef87df06c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a14a795717464a028ac09330f1d6291ef87df06c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/comments", "author": null, "committer": null, "parents": [{"sha": "07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d7c611fc0c4be0a0be935efe97a7887e78bc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07d7c611fc0c4be0a0be935efe97a7887e78bc2a"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "553692dc73aff18ae5dbb2639c6f4b6fc5f50c68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "patch": "@@ -1,3 +1,10 @@\n+2017-10-19  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.c (align_ok_ldrd_strd): New function.\n+\t(mem_ok_for_ldrd_strd): New parameter align.  Extract the alignment of\n+\tthe mem into it.\n+\t(gen_operands_ldrd_strd): Validate the alignment of the accesses.\n+\n 2017-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* flag-types.h (enum sanitize_code): Add SANITIZE_BUILTIN.  Or"}, {"sha": "6f01021a351324d41f8df9c26e642fbe630895f3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "patch": "@@ -15296,12 +15296,23 @@ operands_ok_ldrd_strd (rtx rt, rtx rt2, rtx rn, HOST_WIDE_INT offset,\n   return true;\n }\n \n+/* Return true if a 64-bit access with alignment ALIGN and with a\n+   constant offset OFFSET from the base pointer is permitted on this\n+   architecture.  */\n+static bool\n+align_ok_ldrd_strd (HOST_WIDE_INT align, HOST_WIDE_INT offset)\n+{\n+  return (unaligned_access\n+\t  ? (align >= BITS_PER_WORD && (offset & 3) == 0)\n+\t  : (align >= 2 * BITS_PER_WORD && (offset & 7) == 0));\n+}\n+\n /* Helper for gen_operands_ldrd_strd.  Returns true iff the memory\n    operand MEM's address contains an immediate offset from the base\n-   register and has no side effects, in which case it sets BASE and\n-   OFFSET accordingly.  */\n+   register and has no side effects, in which case it sets BASE,\n+   OFFSET and ALIGN accordingly.  */\n static bool\n-mem_ok_for_ldrd_strd (rtx mem, rtx *base, rtx *offset)\n+mem_ok_for_ldrd_strd (rtx mem, rtx *base, rtx *offset, HOST_WIDE_INT *align)\n {\n   rtx addr;\n \n@@ -15320,6 +15331,7 @@ mem_ok_for_ldrd_strd (rtx mem, rtx *base, rtx *offset)\n   gcc_assert (MEM_P (mem));\n \n   *offset = const0_rtx;\n+  *align = MEM_ALIGN (mem);\n \n   addr = XEXP (mem, 0);\n \n@@ -15360,7 +15372,7 @@ gen_operands_ldrd_strd (rtx *operands, bool load,\n                         bool const_store, bool commute)\n {\n   int nops = 2;\n-  HOST_WIDE_INT offsets[2], offset;\n+  HOST_WIDE_INT offsets[2], offset, align[2];\n   rtx base = NULL_RTX;\n   rtx cur_base, cur_offset, tmp;\n   int i, gap;\n@@ -15372,7 +15384,8 @@ gen_operands_ldrd_strd (rtx *operands, bool load,\n      registers, and the corresponding memory offsets.  */\n   for (i = 0; i < nops; i++)\n     {\n-      if (!mem_ok_for_ldrd_strd (operands[nops+i], &cur_base, &cur_offset))\n+      if (!mem_ok_for_ldrd_strd (operands[nops+i], &cur_base, &cur_offset,\n+\t\t\t\t &align[i]))\n         return false;\n \n       if (i == 0)\n@@ -15486,6 +15499,7 @@ gen_operands_ldrd_strd (rtx *operands, bool load,\n       /* Swap the instructions such that lower memory is accessed first.  */\n       std::swap (operands[0], operands[1]);\n       std::swap (operands[2], operands[3]);\n+      std::swap (align[0], align[1]);\n       if (const_store)\n         std::swap (operands[4], operands[5]);\n     }\n@@ -15499,6 +15513,9 @@ gen_operands_ldrd_strd (rtx *operands, bool load,\n   if (gap != 4)\n     return false;\n \n+  if (!align_ok_ldrd_strd (align[0], offset))\n+    return false;\n+\n   /* Make sure we generate legal instructions.  */\n   if (operands_ok_ldrd_strd (operands[0], operands[1], base, offset,\n                              false, load))"}, {"sha": "8f17115b364f2057a0e44d686c1fe7b7e72d8cca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "patch": "@@ -1,3 +1,11 @@\n+2017-10-19  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/82445\n+\t* gcc.target/arm/peep-ldrd-1.c: Tighten test scan pattern.\n+\t* gcc.target/arm/peep-strd-1.c: Likewise.\n+\t* gcc.target/arm/peep-ldrd-2.c: New test.\n+\t* gcc.target/arm/peep-strd-2.c: New test.\n+\n 2017-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/ubsan/builtin-1.c: New test."}, {"sha": "d49eff6b87edc91dffc6ac326b835c73b73d3b94", "filename": "gcc/testsuite/gcc.target/arm/peep-ldrd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-ldrd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-ldrd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-ldrd-1.c?ref=3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "patch": "@@ -8,4 +8,4 @@ int foo(int a, int b, int* p, int *q)\n   *p = a;\n   return a;\n }\n-/* { dg-final { scan-assembler \"ldrd\" } } */\n+/* { dg-final { scan-assembler \"ldrd\\\\t\" } } */"}, {"sha": "6822c2b1454efd8ec54f281b81fa814bf19b1956", "filename": "gcc/testsuite/gcc.target/arm/peep-ldrd-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-ldrd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-ldrd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-ldrd-2.c?ref=3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_prefer_ldrd_strd } */\n+/* { dg-options \"-O2 -mno-unaligned-access\" }  */\n+int foo(int a, int b, int* p, int *q)\n+{\n+  a = p[2] + p[3];\n+  *q = a;\n+  *p = a;\n+  return a;\n+}\n+/* { dg-final { scan-assembler-not \"ldrd\\\\t\" } } */"}, {"sha": "fe1beac7229b9f5d3153028427cd211e6d7e3973", "filename": "gcc/testsuite/gcc.target/arm/peep-strd-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-strd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-strd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-strd-1.c?ref=3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "patch": "@@ -6,4 +6,4 @@ void foo(int a, int b, int* p)\n   p[2] = a;\n   p[3] = b;\n }\n-/* { dg-final { scan-assembler \"strd\" } } */\n+/* { dg-final { scan-assembler \"strd\\\\t\" } } */"}, {"sha": "bfc5ebe9eec34c7edad6654941c6554efaf8f2cf", "filename": "gcc/testsuite/gcc.target/arm/peep-strd-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-strd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-strd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpeep-strd-2.c?ref=3bb3d60b1e67ececd2e0549f42fbf7d98e024c6b", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_prefer_ldrd_strd } */\n+/* { dg-options \"-O2 -mno-unaligned-access\" }  */\n+void foo(int a, int b, int* p)\n+{\n+  p[2] = a;\n+  p[3] = b;\n+}\n+/* { dg-final { scan-assembler-not \"strd\\\\t\" } } */"}]}