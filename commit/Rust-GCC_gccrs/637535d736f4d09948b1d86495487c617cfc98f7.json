{"sha": "637535d736f4d09948b1d86495487c617cfc98f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM3NTM1ZDczNmY0ZDA5OTQ4YjFkODY0OTU0ODdjNjE3Y2ZjOThmNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:03:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:03:35Z"}, "message": "gnat_rm.texi, [...]: Update documentation.\n\n        * gnat_rm.texi, gnat_ugn.texi,\n        doc/gnat_ugn/platform_specific_information.rst,\n        doc/gnat_ugn/gnat_and_program_execution.rst,\n        doc/gnat_ugn/the_gnat_compilation_model.rst,\n        doc/gnat_rm/standard_and_implementation_defined_restrictions.rst,\n        doc/gnat_rm/implementation_defined_pragmas.rst: Update documentation.\n\nFrom-SVN: r230232", "tree": {"sha": "a8feac61709554ffe5313c22f6af1d7351740a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8feac61709554ffe5313c22f6af1d7351740a1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/637535d736f4d09948b1d86495487c617cfc98f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637535d736f4d09948b1d86495487c617cfc98f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637535d736f4d09948b1d86495487c617cfc98f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637535d736f4d09948b1d86495487c617cfc98f7/comments", "author": null, "committer": null, "parents": [{"sha": "53044824a6981458f9d5a4ca52df4b6e6854706a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53044824a6981458f9d5a4ca52df4b6e6854706a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53044824a6981458f9d5a4ca52df4b6e6854706a"}], "stats": {"total": 2026, "additions": 1186, "deletions": 840}, "files": [{"sha": "4984d832d9dd96c7c9719ff27e16c4523caca67a", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=637535d736f4d09948b1d86495487c617cfc98f7", "patch": "@@ -4456,7 +4456,7 @@ the effect is identical to the following Ada 2012 code:\n     Dynamic_Predicate => F(Q) or G(Q);\n \n \n-Note that there is are no pragmas `Dynamic_Predicate`\n+Note that there are no pragmas `Dynamic_Predicate`\n or `Static_Predicate`. That is\n because these pragmas would affect legality and semantics of\n the program and thus do not have a neutral effect if ignored.\n@@ -4471,6 +4471,23 @@ fundamentally changed (for example a membership test\n defined for subtype B). When following this approach, the\n use of predicates should be avoided.\n \n+Pragma Predicate_Failure\n+========================\n+\n+Syntax:\n+\n+\n+::\n+\n+  pragma Predicate_Failure\n+    ([Entity  =>] type_LOCAL_NAME,\n+     [Message =>] String_Expression);\n+\n+\n+The `Predicate_Failure` pragma is intended to be an exact replacement for\n+the language-defined\n+`Predicate_Failure` aspect, and shares its restrictions and semantics.\n+\n Pragma Preelaborable_Initialization\n ===================================\n "}, {"sha": "621f0208e9b844670f7908e8918984e55a7efc31", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=637535d736f4d09948b1d86495487c617cfc98f7", "patch": "@@ -261,7 +261,7 @@ The following example indicates constructs that violate this restriction.\n        null;\n     end if;\n   end Example;\n-  \n+\n \n No_Dynamic_Attachment\n ---------------------\n@@ -319,7 +319,7 @@ must define with the following profile:\n     (Source_Location : System.Address; Line : Integer);\n   pragma Export (C, Last_Chance_Handler,\n                  \"__gnat_last_chance_handler\");\n-  \n+\n \n The parameter is a C null-terminated string representing a message to be\n associated with the exception (typically the source location of the raise\n@@ -367,19 +367,19 @@ chapter 7.6 of the Ada 2005 RM as well as all form of code generation\n performed by the compiler to support these features. The following types\n are no longer considered controlled when this restriction is in effect:\n \n-* \n+*\n   `Ada.Finalization.Controlled`\n-* \n+*\n   `Ada.Finalization.Limited_Controlled`\n-* \n+*\n   Derivations from `Controlled` or `Limited_Controlled`\n-* \n+*\n   Class-wide types\n-* \n+*\n   Protected types\n-* \n+*\n   Task types\n-* \n+*\n   Array and record types with controlled components\n \n The compiler no longer generates code to initialize, finalize or adjust an\n@@ -844,7 +844,7 @@ example, if the source contains a declaration:\n .. code-block:: ada\n \n      Val : constant Integer := X;\n-  \n+\n \n where X is not a static constant, it may be possible, depending\n on complex optimization circuitry, for the compiler to figure\n@@ -857,6 +857,21 @@ Note that this the implementation of this restriction requires full\n code generation. If it is used in conjunction with \"semantics only\"\n checking, then some cases of violations may be missed.\n \n+No_Dynamic_Sized_Objects\n+--------------\n+.. index:: No_Dynamic_Sized_Objects\n+\n+[GNAT] This restriction disallows certain constructs that might lead to the\n+creation of dynamic-sized composite objects (or array or discriminated type).\n+An array subtype indication is illegal if the bounds are not static\n+or references to discriminants of an enclosing type.\n+A discriminated subtype indication is illegal if the type has\n+discriminant-dependent array components or a variant part, and the\n+discriminants are not static. In addition, array and record aggregates are\n+illegal in corresponding cases. Note that this restriction does not forbid\n+access discriminants. It is often a good idea to combine this restriction\n+with No_Secondary_Stack.\n+\n No_Entry_Queue\n --------------\n .. index:: No_Entry_Queue\n@@ -960,7 +975,7 @@ SPARK restriction have the form:\n \n   violation of restriction \"SPARK_05\" at <source-location>\n    <error message>\n-  \n+\n \n .. index:: SPARK\n \n@@ -1097,4 +1112,3 @@ currently checked by the SPARK_05 restriction:\n Note that if a unit is compiled in Ada 95 mode with the SPARK restriction,\n violations will be reported for constructs forbidden in SPARK 95,\n instead of SPARK 2005.\n-"}, {"sha": "892ac5761cf7f39b76e7880755c3e98b97111c30", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=637535d736f4d09948b1d86495487c617cfc98f7", "patch": "@@ -3884,7 +3884,7 @@ execution of this erroneous program:\n   it to obtain accurate dynamic memory usage history at a minimal cost to the\n   execution speed. Note however, that `gnatmem` is not supported on all\n   platforms (currently, it is supported on AIX, HP-UX, GNU/Linux, Solaris and\n-  Windows NT/2000/XP (x86).\n+  Windows.\n \n   The `gnatmem` command has the form\n "}, {"sha": "f8ba2aae05958900a93c63edd2bfd10798100b54", "filename": "gcc/ada/doc/gnat_ugn/platform_specific_information.rst", "status": "modified", "additions": 207, "deletions": 100, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst?ref=637535d736f4d09948b1d86495487c617cfc98f7", "patch": "@@ -1,7 +1,7 @@\n .. -- Non-breaking space in running text\n    -- E.g. Ada |nbsp| 95\n \n-.. |nbsp| unicode:: 0xA0 \n+.. |nbsp| unicode:: 0xA0\n    :trim:\n \n .. _Platform_Specific_Information:\n@@ -155,8 +155,8 @@ For example on x86-linux::\n    --           +--- adainclude\n    --           |\n    --           +--- adalib\n-  \n-  \n+\n+\n If the *rts-sjlj* library is to be selected on a permanent basis,\n these soft links can be modified with the following commands:\n \n@@ -166,7 +166,7 @@ these soft links can be modified with the following commands:\n     $ rm -f adainclude adalib\n     $ ln -s rts-sjlj/adainclude adainclude\n     $ ln -s rts-sjlj/adalib adalib\n- \n+\n Alternatively, you can specify :file:`rts-sjlj/adainclude` in the file\n :file:`$target/ada_source_path` and :file:`rts-sjlj/adalib` in\n :file:`$target/ada_object_path`.\n@@ -267,7 +267,7 @@ to one of the following:\n   *-2*                      Use the default configuration (run the program on all\n                             available processors) - this is the same as having `GNAT_PROCESSOR`\n                             unset\n-  *-1*                      Let the run-time implementation choose one processor and run the \n+  *-1*                      Let the run-time implementation choose one processor and run the\n                             program on that processor\n   *0 .. Last_Proc*          Run the program on the specified processor.\n                             `Last_Proc` is equal to `_SC_NPROCESSORS_CONF - 1`\n@@ -318,7 +318,7 @@ platforms.\n   the installation path and similar information, and then guides you through the\n   installation process. It is also possible to perform silent installations\n   using the command-line interface.\n- \n+\n   In order to install one of the GNAT installers from the command\n   line you should pass parameter `/S` (and, optionally,\n   `/D=<directory>`) as command-line arguments.\n@@ -332,7 +332,7 @@ platforms.\n      ::\n \n         gnatpro-7.0.2-i686-pc-mingw32-bin.exe /S\n-  \n+\n    To install into a custom directory, say, `C:\\\\TOOLS\\\\GNATPRO\\\\7.0.2`:\n \n      ::\n@@ -347,7 +347,7 @@ platforms.\n      ::\n \n         gnat-gpl-2012-i686-pc-mingw32-bin /S /D=C:\\GNAT\\2012\n-  \n+\n .. only:: PRO or GPL\n \n    You can use the same syntax for all installers.\n@@ -436,7 +436,7 @@ called :file:`c-drive` on a machine :file:`LOKI`, the following command will\n make it available:\n \n   ::\n-  \n+\n       $ path \\\\loki\\c-drive\\gnat\\bin;%path%`\n \n Be aware that every compilation using the network installation results in the\n@@ -462,7 +462,7 @@ the *-mwindows* linker option must be specified.\n    ::\n \n       $ gnatmake winprog -largs -mwindows\n-  \n+\n .. _Temporary_Files:\n \n Temporary Files\n@@ -542,7 +542,7 @@ setup the SEH context. For this the C main must looks like this:\n \n         adafinal();\n       }\n-  \n+\n Note that this is not needed on x86_64-windows where the Windows\n native SEH support is used.\n \n@@ -596,14 +596,14 @@ instance the C function:\n    ::\n \n        int get_val (long);\n-  \n+\n should be imported from Ada as follows:\n \n   .. code-block:: ada\n \n      function Get_Val (V : Interfaces.C.long) return Interfaces.C.int;\n      pragma Import (C, Get_Val, External_Name => \"get_val\");\n-  \n+\n Note that in this particular case the `External_Name` parameter could\n have been omitted since, when missing, this parameter is taken to be the\n name of the Ada entity in lower case. When the `Link_Name` parameter\n@@ -642,15 +642,15 @@ the compiler. For instance the Win32 function:\n   ::\n \n       APIENTRY int get_val (long);\n-  \n+\n should be imported from Ada as follows:\n \n   .. code-block:: ada\n \n      function Get_Val (V : Interfaces.C.long) return Interfaces.C.int;\n      pragma Import (Stdcall, Get_Val);\n      --  On the x86 a long is 4 bytes, so the Link_Name is \"_get_val@4\"\n-  \n+\n As for the `C` calling convention, when the `External_Name`\n parameter is missing, it is taken to be the name of the Ada entity in lower\n case. If instead of writing the above import pragma you write:\n@@ -659,7 +659,7 @@ case. If instead of writing the above import pragma you write:\n \n      function Get_Val (V : Interfaces.C.long) return Interfaces.C.int;\n      pragma Import (Stdcall, Get_Val, External_Name => \"retrieve_val\");\n-  \n+\n then the imported routine is `_retrieve_val@4`. However, if instead\n of specifying the `External_Name` parameter you specify the\n `Link_Name` as in the following example:\n@@ -668,7 +668,7 @@ of specifying the `External_Name` parameter you specify the\n \n      function Get_Val (V : Interfaces.C.long) return Interfaces.C.int;\n      pragma Import (Stdcall, Get_Val, Link_Name => \"retrieve_val\");\n-  \n+\n then the imported routine is `retrieve_val`, that is, there is no\n decoration at all. No leading underscore and no Stdcall suffix\n :samp:`@{nn}`.\n@@ -684,14 +684,14 @@ variable defined as:\n   .. code-block:: c\n \n      int my_var;\n-  \n+\n then, to access this variable from Ada you should write:\n \n   .. code-block:: ada\n \n       My_Var : Interfaces.C.int;\n       pragma Import (Stdcall, My_Var);\n-  \n+\n Note that to ease building cross-platform bindings this convention\n will be handled as a `C` calling convention on non-Windows platforms.\n \n@@ -814,7 +814,7 @@ you simply issue the command\n   ::\n \n       $ gnatmake my_ada_app -largs -lAPI\n-  \n+\n The argument *-largs -lAPI* at the end of the *gnatmake* command\n tells the GNAT linker to look for an import library. The linker will\n look for a library name in this specific order:\n@@ -835,7 +835,7 @@ following pragma\n   .. code-block:: ada\n \n       pragma Linker_Options (\"-lAPI\");\n-  \n+\n you do not have to add *-largs -lAPI* at the end of the\n *gnatmake* command.\n \n@@ -861,23 +861,23 @@ following two definitions:\n \n       int some_var;\n       int get (char *);\n-  \n+\n then the equivalent Ada spec could be:\n \n   .. code-block:: ada\n \n       with Interfaces.C.Strings;\n       package API is\n          use Interfaces;\n-    \n+\n          Some_Var : C.int;\n          function Get (Str : C.Strings.Chars_Ptr) return C.int;\n \n       private\n          pragma Import (C, Get);\n          pragma Import (DLL, Some_Var);\n       end API;\n-  \n+\n \n .. _Creating_an_Import_Library:\n \n@@ -914,7 +914,7 @@ suffix) has the following structure:\n          `symbol1`\n          `symbol2`\n          ...\n-  \n+\n *LIBRARY `name`*\n   This section, which is optional, gives the name of the DLL.\n \n@@ -934,7 +934,7 @@ suffix) has the following structure:\n       EXPORTS\n          some_var\n          get\n-    \n+\n Note that you must specify the correct suffix (:samp:`@{nn}`)\n (see :ref:`Windows_Calling_Conventions`) for a Stdcall\n calling convention function in the exported symbols list.\n@@ -943,24 +943,19 @@ There can actually be other sections in a definition file, but these\n sections are not relevant to the discussion at hand.\n \n \n-.. rubric:: GNAT-Style Import Library\n+.. _Create_Def_File_Automatically:\n \n-.. _GNAT-Style_Import_Library:\n+.. rubric:: Creating a Definition File Automatically\n \n-To create a static import library from :file:`API.dll` with the GNAT tools\n-you should proceed as follows:\n-\n-* Create the definition file :file:`API.def`\n-  (see :ref:`The Definition File <The_Definition_File>`).\n-  For that use the `dll2def` tool as follows:\n+You can automatically create the definition file :file:`API.def`\n+(see :ref:`The Definition File <The_Definition_File>`) from a DLL.\n+For that use the `dlltool` program as follows:\n \n   ::\n \n-      $ dll2def API.dll > API.def\n-    \n-  `dll2def` is a very simple tool: it takes as input a DLL and prints\n-  to standard output the list of entry points in the DLL. Note that if\n-  some routines in the DLL have the `Stdcall` convention\n+      $ dlltool API.dll -z API.def --export-all-symbols\n+\n+  Note that if some routines in the DLL have the `Stdcall` convention\n   (:ref:`Windows_Calling_Conventions`) with stripped :samp:`@{nn}`\n   suffix then you'll have to edit :file:`api.def` to add it, and specify\n   *-k* to *gnatdll* when creating the import library.\n@@ -972,20 +967,26 @@ you should proceed as follows:\n     corresponding Microsoft documentation for further details).\n \n     ::\n- \n+\n         $ dumpbin /exports api.lib\n-      \n+\n   - If you have a message about a missing symbol at link time the compiler\n     tells you what symbol is expected. You just have to go back to the\n     definition file and add the right suffix.\n \n-* Build the import library `libAPI.dll.a`, using `gnatdll`\n-  (see :ref:`Using_gnatdll`) as follows:\n+\n+.. _GNAT-Style_Import_Library:\n+\n+.. rubric:: GNAT-Style Import Library\n+\n+To create a static import library from :file:`API.dll` with the GNAT tools\n+you should create the .def file, then use `gnatdll` tool\n+(see :ref:`Using_gnatdll`) as follows:\n \n   ::\n \n       $ gnatdll -e API.def -d API.dll\n-    \n+\n   `gnatdll` takes as input a definition file :file:`API.def` and the\n   name of the DLL containing the services listed in the definition file\n   :file:`API.dll`. The name of the static import library generated is\n@@ -997,33 +998,29 @@ you should proceed as follows:\n   DLL (:ref:`Using_gnatdll` for more information about `gnatdll`).\n \n \n+.. _MSVS-Style_Import_Library:\n+\n .. rubric:: Microsoft-Style Import Library\n \n-With GNAT you can either use a GNAT-style or Microsoft-style import\n-library. A Microsoft import library is needed only if you plan to make an\n+A Microsoft import library is needed only if you plan to make an\n Ada DLL available to applications developed with Microsoft\n tools (:ref:`Mixed-Language_Programming_on_Windows`).\n \n To create a Microsoft-style import library for :file:`API.dll` you\n-should proceed as follows:\n-\n-* Create the definition file :file:`API.def` from the DLL. For this use either\n-  the `dll2def` tool as described above or the Microsoft `dumpbin`\n-  tool (see the corresponding Microsoft documentation for further details).\n-\n-* Build the actual import library using Microsoft's `lib` utility:\n+should create the .def file, then build the actual import library using\n+Microsoft's `lib` utility:\n \n   ::\n \n       $ lib -machine:IX86 -def:API.def -out:API.lib\n-    \n+\n   If you use the above command the definition file :file:`API.def` must\n   contain a line giving the name of the DLL:\n \n   ::\n \n       LIBRARY      \"API\"\n-    \n+\n   See the Microsoft documentation for further details about the usage of\n   `lib`.\n \n@@ -1066,7 +1063,7 @@ and use DLLs with GNAT.\n   ::\n \n       $ gcc -shared -shared-libgcc -o api.dll obj1.o obj2.o ...\n-    \n+\n   It is important to note that in this case all symbols found in the\n   object files are automatically exported. It is possible to restrict\n   the set of symbols to export by passing to *gcc* a definition\n@@ -1076,7 +1073,7 @@ and use DLLs with GNAT.\n   ::\n \n       $ gcc -shared -shared-libgcc -o api.dll api.def obj1.o obj2.o ...\n-    \n+\n   If you use a definition file you must export the elaboration procedures\n   for every package that required one. Elaboration procedures are named\n   using the package name followed by \"_E\".\n@@ -1092,7 +1089,7 @@ and use DLLs with GNAT.\n       $ mkdir apilib\n       $ copy *.ads *.ali api.dll apilib\n       $ attrib +R apilib\\\\*.ali\n-    \n+\n At this point it is possible to use the DLL by directly linking\n against it. Note that you must use the GNAT shared runtime when using\n GNAT shared libraries. This is achieved by using *-shared* binder's\n@@ -1101,7 +1098,7 @@ option.\n   ::\n \n      $ gnatmake main -Iapilib -bargs -shared -largs -Lapilib -lAPI\n-  \n+\n \n .. _Building_DLLs_with_gnatdll:\n \n@@ -1207,7 +1204,7 @@ variable:\n         pragma Export (C, Count);\n         pragma Export (C, Factorial);\n      end API;\n-  \n+\n   .. code-block:: ada\n \n      package body API is\n@@ -1235,7 +1232,7 @@ variable:\n            Adafinal;\n         end Finalize_API;\n      end API;\n-  \n+\n If the Ada DLL you are building will only be used by Ada applications\n you do not have to export Ada entities with a `C` or `Stdcall`\n convention. As an example, the previous package could be written as\n@@ -1251,9 +1248,9 @@ follows:\n         procedure Finalize_API;\n         --  Initialization and Finalization routines.\n      end API;\n-  \n+\n   .. code-block:: ada\n-  \n+\n      package body API is\n         function Factorial (Val : Integer) return Integer is\n            Fact : Integer := 1;\n@@ -1268,7 +1265,7 @@ follows:\n         ...\n         --  The remainder of this package body is unchanged.\n      end API;\n-  \n+\n Note that if you do not export the Ada entities with a `C` or\n `Stdcall` convention you will have to provide the mangled Ada names\n in the definition file of the Ada DLL\n@@ -1341,7 +1338,7 @@ the corresponding C header file could look like:\n      extern int *_imp__count;\n      #define count (*_imp__count)\n      int factorial (int);\n-  \n+\n It is important to understand that when building an Ada DLL to be used by\n other Ada applications, you need two different specs for the packages\n contained in the DLL: one for building the DLL and the other for using\n@@ -1357,7 +1354,7 @@ example consider a DLL comprising the following package `API`:\n         ...\n         --  Remainder of the package omitted.\n      end API;\n-  \n+\n After producing a DLL containing package `API`, the spec that\n must be used to import `API.Count` from Ada code outside of the\n DLL is:\n@@ -1368,7 +1365,7 @@ DLL is:\n         Count : Integer;\n         pragma Import (DLL, Count);\n      end API;\n-  \n+\n \n .. _Creating_the_Definition_File:\n \n@@ -1399,7 +1396,7 @@ entities, which in this case are:\n         api__factorial\n         api__finalize_api\n         api__initialize_api\n-  \n+\n \n .. _Using_gnatdll:\n \n@@ -1417,7 +1414,7 @@ static import library for the DLL and the actual DLL. The form of the\n   ::\n \n       $ gnatdll [`switches`] `list-of-files` [-largs `opts`]\n-  \n+\n where `list-of-files` is a list of ALI and object files. The object\n file list must be the exact list of objects corresponding to the non-Ada\n sources whose services are to be included in the DLL. The ALI file list\n@@ -1545,21 +1542,21 @@ once :file:`api.adb` has been compiled and :file:`api.def` created is\n   ::\n \n      $ gnatdll -d api.dll api.ali\n-  \n+\n The above command creates two files: :file:`libapi.dll.a` (the import\n library) and :file:`api.dll` (the actual DLL). If you want to create\n only the DLL, just type:\n \n   ::\n \n      $ gnatdll -d api.dll -n api.ali\n-  \n+\n Alternatively if you want to create just the import library, type:\n \n   ::\n \n      $ gnatdll -d api.dll\n-  \n+\n \n .. rubric:: `gnatdll` behind the Scenes\n \n@@ -1608,7 +1605,7 @@ the following:\n       $ gnatbind -n api\n       $ gnatlink api -o api.jnk api.exp -mdll\n             -Wl,--base-file,api.base\n-   \n+\n \n * `gnatdll` builds the new export table using the new base file and\n   generates the DLL import library :file:`libAPI.dll.a`.\n@@ -1640,7 +1637,7 @@ is\n   ::\n \n     $ dlltool [`switches`]\n-  \n+\n `dlltool` switches include:\n \n \n@@ -1766,7 +1763,7 @@ resource:\n          VALUE \"Translation\", 0x809, 1252\n        END\n      END\n-  \n+\n The value `0809` (langID) is for the U.K English language and\n `04E4` (charsetID), which is equal to `1252` decimal, for\n multilingual.\n@@ -1812,7 +1809,7 @@ containing the resources. This is done using the Resource Compiler\n   ::\n \n      $ windres -i myres.rc -o myres.o\n-  \n+\n By default `windres` will run *gcc* to preprocess the :file:`.rc`\n file. You can specify an alternate preprocessor (usually named\n :file:`cpp.exe`) using the `windres` *--preprocessor*\n@@ -1828,7 +1825,7 @@ GNAT-compatible object file as follows:\n   ::\n \n      $ windres -i myres.res -o myres.o\n-  \n+\n \n .. _Using_Resources:\n \n@@ -1845,7 +1842,59 @@ option:\n   ::\n \n     $ gnatmake myprog -largs myres.o\n-  \n+\n+\n+.. _Using_GNAT_DLL_from_MSVS:\n+\n+Using GNAT DLLs from Microsoft Visual Studio Applications\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+.. index:: Microsoft Visual Studio, use with GNAT DLLs\n+\n+This section describes a common case of mixed GNAT/Microsoft Visual Studio\n+application development, where the main program is developed using MSVS, and\n+is linked with a DLL developed using GNAT. Such a mixed application should\n+be developed following the general guidelines outlined above; below is the\n+cookbook-style sequence of steps to follow:\n+\n+1. First develop and build the GNAT shared library using a library project\n+   (let's assume the project is `mylib.gpr`, producing the library `libmylib.dll`):\n+\n+  ::\n+\n+     $ gprbuild -p mylib.gpr\n+\n+2. Produce a .def file for the symbols you need to interface with, either by\n+   hand or automatically with possibly some manual adjustments \n+   (see :ref:`Creating Definition File Automatically <Create_Def_File_Automatically>`):\n+\n+  ::\n+\n+     $ dlltool libmylib.dll -z libmylib.def --export-all-symbols\n+\n+3. Make sure that MSVS command-line tools are accessible on the path.\n+\n+4. Create the Microsoft-style import library (see :ref:`MSVS-Style Import Library <MSVS-Style_Import_Library>`):\n+\n+  ::\n+\n+     $ lib -machine:IX86 -def:libmylib.def -out:libmylib.lib\n+\n+If you are using a 64-bit toolchain, the above becomes...\n+\n+  ::\n+\n+     $ lib -machine:X64 -def:libmylib.def -out:libmylib.lib\n+\n+5. Build the C main\n+\n+  ::\n+\n+     $ cl /O2 /MD main.c libmylib.lib\n+\n+6. Before running the executable, make sure you have set the PATH to the DLL,\n+   or copy the DLL into into the directory containing the .exe.\n+\n \n .. _Debugging_a_DLL:\n \n@@ -1890,13 +1939,13 @@ switch). Here are the step-by-step instructions for debugging it:\n   ::\n \n      $ gdb -nw ada_main\n-    \n+\n * Start the program and stop at the beginning of the main procedure\n \n   ::\n \n       (gdb) start\n-    \n+\n   This step is required to be able to set a breakpoint inside the DLL. As long\n   as the program is not run, the DLL is not loaded. This has the\n   consequence that the DLL debugging information is also not loaded, so it is not\n@@ -1908,7 +1957,7 @@ switch). Here are the step-by-step instructions for debugging it:\n \n       (gdb) break ada_dll\n       (gdb) cont\n-    \n+\n At this stage a breakpoint is set inside the DLL. From there on\n you can use the standard approach to debug the whole program\n (:ref:`Running_and_Debugging_Ada_Programs`).\n@@ -1943,7 +1992,7 @@ been built with debugging information (see GNAT `-g` option).\n   ::\n \n       $ objdump --file-header main.exe\n-    \n+\n   The starting address is reported on the last line. For example:\n \n   ::\n@@ -1952,13 +2001,13 @@ been built with debugging information (see GNAT `-g` option).\n       architecture: i386, flags 0x0000010a:\n       EXEC_P, HAS_DEBUG, D_PAGED\n       start address 0x00401010\n-    \n+\n * Launch the debugger on the executable.\n \n   ::\n \n       $ gdb main.exe\n-    \n+\n * Set a breakpoint at the starting address, and launch the program.\n \n   ::\n@@ -1973,21 +2022,21 @@ been built with debugging information (see GNAT `-g` option).\n   ::\n \n     (gdb) break ada_dll.adb:45\n-  \n+\n   Or if you want to break using a symbol on the DLL, you need first to\n   select the Ada language (language used by the DLL).\n \n   ::\n \n       (gdb) set language ada\n       (gdb) break ada_dll\n-    \n+\n * Continue the program.\n \n   ::\n \n       (gdb) cont\n-    \n+\n   This will run the program until it reaches the breakpoint that has been\n   set. From that point you can use the standard way to debug a program\n   as described in (:ref:`Running_and_Debugging_Ada_Programs`).\n@@ -2010,7 +2059,7 @@ loop in the code of the DLL to meet this criterion.\n   ::\n \n       $ main\n-    \n+\n * Use the Windows *Task Manager* to find the process ID. Let's say\n   that the process PID for :file:`main.exe` is 208.\n \n@@ -2019,31 +2068,31 @@ loop in the code of the DLL to meet this criterion.\n   ::\n \n       $ gdb\n-    \n+\n * Attach to the running process to be debugged.\n \n   ::\n \n       (gdb) attach 208\n-    \n+\n * Load the process debugging information.\n \n   ::\n \n       (gdb) symbol-file main.exe\n-    \n+\n * Break somewhere in the DLL.\n \n   ::\n \n       (gdb) break ada_dll\n-    \n+\n * Continue process execution.\n \n   ::\n \n       (gdb) cont\n-   \n+\n This last step will resume the process execution, and stop at\n the breakpoint we have set. From there you can use the standard\n approach to debug a program as described in\n@@ -2074,7 +2123,7 @@ This setting can be done with *gnatlink* using either of the following:\n   ::\n \n       $ gnatlink hello -Xlinker --stack=0x10000,0x1000\n-    \n+\n \n   This sets the stack reserve size to 0x10000 bytes and the stack commit\n   size to 0x1000 bytes.\n@@ -2084,7 +2133,7 @@ This setting can be done with *gnatlink* using either of the following:\n   ::\n \n     $ gnatlink hello -Wl,--stack=0x1000000\n-    \n+\n   This sets the stack reserve size to 0x1000000 bytes. Note that with\n   *-Wl* option it is not possible to set the stack commit size\n   because the coma is a separator for this option.\n@@ -2103,7 +2152,7 @@ Under Windows systems, it is possible to specify the program heap size from\n   ::\n \n       $ gnatlink hello -Xlinker --heap=0x10000,0x1000\n-    \n+\n   This sets the heap reserve size to 0x10000 bytes and the heap commit\n   size to 0x1000 bytes.\n \n@@ -2112,13 +2161,73 @@ Under Windows systems, it is possible to specify the program heap size from\n   ::\n \n       $ gnatlink hello -Wl,--heap=0x1000000\n-    \n+\n \n   This sets the heap reserve size to 0x1000000 bytes. Note that with\n   *-Wl* option it is not possible to set the heap commit size\n   because the coma is a separator for this option.\n \n \n+.. _Win32_Specific_Addons:\n+\n+Windows Specific Add-Ons\n+-------------------------\n+\n+This section describes the Windows specific add-ons.\n+\n+.. _Win32Ada:\n+\n+Win32Ada\n+^^^^^^^^\n+\n+Win32Ada is a binding for the Microsoft Win32 API. This binding can be\n+easily installed from the provided installer. To use the Win32Ada\n+binding you need to use a project file, and adding a single with_clause\n+will give you full access to the Win32Ada binding sources and ensure\n+that the proper libraries are passed to the linker.\n+\n+  .. code-block:: ada-project\n+\n+      with \"win32ada\";\n+      project P is\n+         for Sources use ...;\n+      end P;\n+\n+To build the application you just need to call gprbuild for the\n+application's project, here p.gpr:\n+\n+  .. code-block:: sh\n+\n+      gprbuild p.gpr\n+\n+.. _wPOSIX:\n+\n+wPOSIX\n+^^^^^^\n+\n+wPOSIX is a minimal POSIX binding whose goal is to help with building\n+cross-platforms applications. This binding is not complete though, as\n+the Win32 API does not provide the necessary support for all POSIX APIs.\n+\n+To use the wPOSIX binding you need to use a project file, and adding\n+a single with_clause will give you full access to the wPOSIX binding\n+sources and ensure that the proper libraries are passed to the linker.\n+\n+  .. code-block:: ada-project\n+\n+      with \"wposix\";\n+      project P is\n+         for Sources use ...;\n+      end P;\n+\n+To build the application you just need to call gprbuild for the\n+application's project, here p.gpr:\n+\n+  .. code-block:: sh\n+\n+      gprbuild p.gpr\n+\n+\n .. _Mac_OS_Topics:\n \n Mac OS Topics\n@@ -2180,10 +2289,8 @@ as follow. In a Terminal, run the following command:\n   ::\n \n      $ codesign -f -s  \"gdb-cert\"  <gnat_install_prefix>/bin/gdb\n-  \n+\n where \"gdb-cert\" should be replaced by the actual certificate\n name chosen above, and <gnat_install_prefix> should be replaced by\n the location where you installed GNAT.  Also, be sure that users are\n in the Unix group ``_developer``.\n-\n-"}, {"sha": "60a2ce2edf712a36e943e01b73d7e415ef656468", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=637535d736f4d09948b1d86495487c617cfc98f7", "patch": "@@ -3665,7 +3665,7 @@ Convention identifiers are recognized by GNAT:\n .. index:: Convention Stdcall\n \n *Stdcall*\n-  This is relevant only to Windows XP/2000/NT implementations of GNAT,\n+  This is relevant only to Windows implementations of GNAT,\n   and specifies that the `Stdcall` calling sequence will be used,\n   as defined by the NT API. Nevertheless, to ease building\n   cross-platform bindings this convention will be handled as a `C` calling"}, {"sha": "ed7947d2cb712a7168fa52e02c5f953515131e1d", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 665, "deletions": 626, "changes": 1291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=637535d736f4d09948b1d86495487c617cfc98f7"}, {"sha": "07d3c0c2667c9a6d33275f5a307bfde1aa4cbc46", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 268, "deletions": 99, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/637535d736f4d09948b1d86495487c617cfc98f7/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=637535d736f4d09948b1d86495487c617cfc98f7", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , October 23, 2015\n+GNAT User's Guide for Native Platforms , November 12, 2015\n \n AdaCore\n \n@@ -564,6 +564,7 @@ Microsoft Windows Topics\n * CONSOLE and WINDOWS subsystems:: \n * Temporary Files:: \n * Mixed-Language Programming on Windows:: \n+* Windows Specific Add-Ons:: \n \n Mixed-Language Programming on Windows\n \n@@ -576,6 +577,7 @@ Mixed-Language Programming on Windows\n * Ada DLLs and Finalization:: \n * Creating a Spec for Ada DLLs:: \n * GNAT and Windows Resources:: \n+* Using GNAT DLLs from Microsoft Visual Studio Applications:: \n * Debugging a DLL:: \n * Setting Stack Size from gnatlink:: \n * Setting Heap Size from gnatlink:: \n@@ -614,6 +616,11 @@ Debugging a DLL\n * Program and DLL Both Built with GCC/GNAT:: \n * Program Built with Foreign Tools and DLL Built with GCC/GNAT:: \n \n+Windows Specific Add-Ons\n+\n+* Win32Ada:: \n+* wPOSIX:: \n+\n Mac OS Topics\n \n * Codesigning the Debugger:: \n@@ -5758,7 +5765,7 @@ expectations.\n \n @item @emph{Stdcall}\n \n-This is relevant only to Windows XP/2000/NT implementations of GNAT,\n+This is relevant only to Windows implementations of GNAT,\n and specifies that the @cite{Stdcall} calling sequence will be used,\n as defined by the NT API. Nevertheless, to ease building\n cross-platform bindings this convention will be handled as a @cite{C} calling\n@@ -29878,6 +29885,7 @@ platforms.\n * CONSOLE and WINDOWS subsystems:: \n * Temporary Files:: \n * Mixed-Language Programming on Windows:: \n+* Windows Specific Add-Ons:: \n \n @end menu\n \n@@ -30049,7 +30057,7 @@ file will be created. This is particularly useful in networked\n environments where you may not have write access to some\n directories.\n \n-@node Mixed-Language Programming on Windows,,Temporary Files,Microsoft Windows Topics\n+@node Mixed-Language Programming on Windows,Windows Specific Add-Ons,Temporary Files,Microsoft Windows Topics\n @anchor{gnat_ugn/platform_specific_information mixed-language-programming-on-windows}@anchor{270}@anchor{gnat_ugn/platform_specific_information id14}@anchor{271}\n @subsection Mixed-Language Programming on Windows\n \n@@ -30126,6 +30134,7 @@ native SEH support is used.\n * Ada DLLs and Finalization:: \n * Creating a Spec for Ada DLLs:: \n * GNAT and Windows Resources:: \n+* Using GNAT DLLs from Microsoft Visual Studio Applications:: \n * Debugging a DLL:: \n * Setting Stack Size from gnatlink:: \n * Setting Heap Size from gnatlink:: \n@@ -30621,28 +30630,21 @@ calling convention function in the exported symbols list.\n \n There can actually be other sections in a definition file, but these\n sections are not relevant to the discussion at hand.\n+@anchor{gnat_ugn/platform_specific_information create-def-file-automatically}@anchor{286}\n+@subsubheading Creating a Definition File Automatically\n \n-@subsubheading GNAT-Style Import Library\n-\n-@anchor{gnat_ugn/platform_specific_information gnat-style-import-library}@anchor{286}\n-To create a static import library from @code{API.dll} with the GNAT tools\n-you should proceed as follows:\n \n+You can automatically create the definition file @code{API.def}\n+(see @ref{280,,The Definition File}) from a DLL.\n+For that use the @cite{dlltool} program as follows:\n \n-@itemize *\n-\n-@item \n-Create the definition file @code{API.def}\n-(see @ref{280,,The Definition File}).\n-For that use the @cite{dll2def} tool as follows:\n+@quotation\n \n @example\n-$ dll2def API.dll > API.def\n+$ dlltool API.dll -z API.def --export-all-symbols\n @end example\n \n-@cite{dll2def} is a very simple tool: it takes as input a DLL and prints\n-to standard output the list of entry points in the DLL. Note that if\n-some routines in the DLL have the @cite{Stdcall} convention\n+Note that if some routines in the DLL have the @cite{Stdcall} convention\n (@ref{274,,Windows Calling Conventions}) with stripped @code{@@@emph{nn}}\n suffix then you'll have to edit @code{api.def} to add it, and specify\n @emph{-k} to @emph{gnatdll} when creating the import library.\n@@ -30666,10 +30668,16 @@ If you have a message about a missing symbol at link time the compiler\n tells you what symbol is expected. You just have to go back to the\n definition file and add the right suffix.\n @end itemize\n+@end quotation\n+@anchor{gnat_ugn/platform_specific_information gnat-style-import-library}@anchor{287}\n+@subsubheading GNAT-Style Import Library\n \n-@item \n-Build the import library @cite{libAPI.dll.a}, using @cite{gnatdll}\n-(see @ref{287,,Using gnatdll}) as follows:\n+\n+To create a static import library from @code{API.dll} with the GNAT tools\n+you should create the .def file, then use @cite{gnatdll} tool\n+(see @ref{288,,Using gnatdll}) as follows:\n+\n+@quotation\n \n @example\n $ gnatdll -e API.def -d API.dll\n@@ -30683,30 +30691,21 @@ definition file name is @cite{xyz`}.def`, the import library name will\n be @cite{lib`@w{`}xyz`}.a`. Note that in the previous example option\n @emph{-e} could have been removed because the name of the definition\n file (before the '@cite{.def}' suffix) is the same as the name of the\n-DLL (@ref{287,,Using gnatdll} for more information about @cite{gnatdll}).\n-@end itemize\n-\n+DLL (@ref{288,,Using gnatdll} for more information about @cite{gnatdll}).\n+@end quotation\n+@anchor{gnat_ugn/platform_specific_information msvs-style-import-library}@anchor{289}\n @subsubheading Microsoft-Style Import Library\n \n \n-With GNAT you can either use a GNAT-style or Microsoft-style import\n-library. A Microsoft import library is needed only if you plan to make an\n+A Microsoft import library is needed only if you plan to make an\n Ada DLL available to applications developed with Microsoft\n tools (@ref{270,,Mixed-Language Programming on Windows}).\n \n To create a Microsoft-style import library for @code{API.dll} you\n-should proceed as follows:\n-\n-\n-@itemize *\n-\n-@item \n-Create the definition file @code{API.def} from the DLL. For this use either\n-the @cite{dll2def} tool as described above or the Microsoft @cite{dumpbin}\n-tool (see the corresponding Microsoft documentation for further details).\n+should create the .def file, then build the actual import library using\n+Microsoft's @cite{lib} utility:\n \n-@item \n-Build the actual import library using Microsoft's @cite{lib} utility:\n+@quotation\n \n @example\n $ lib -machine:IX86 -def:API.def -out:API.lib\n@@ -30721,10 +30720,10 @@ LIBRARY      \"API\"\n \n See the Microsoft documentation for further details about the usage of\n @cite{lib}.\n-@end itemize\n+@end quotation\n \n @node Building DLLs with GNAT Project files,Building DLLs with GNAT,Using DLLs with GNAT,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information id24}@anchor{288}@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnat-project-files}@anchor{273}\n+@anchor{gnat_ugn/platform_specific_information id24}@anchor{28a}@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnat-project-files}@anchor{273}\n @subsubsection Building DLLs with GNAT Project files\n \n \n@@ -30739,7 +30738,7 @@ when inside the @cite{DllMain} routine which is used for auto-initialization\n of shared libraries, so it is not possible to have library level tasks in SALs.\n \n @node Building DLLs with GNAT,Building DLLs with gnatdll,Building DLLs with GNAT Project files,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnat}@anchor{289}@anchor{gnat_ugn/platform_specific_information id25}@anchor{28a}\n+@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnat}@anchor{28b}@anchor{gnat_ugn/platform_specific_information id25}@anchor{28c}\n @subsubsection Building DLLs with GNAT\n \n \n@@ -30808,7 +30807,7 @@ $ gnatmake main -Iapilib -bargs -shared -largs -Lapilib -lAPI\n @end quotation\n \n @node Building DLLs with gnatdll,Ada DLLs and Finalization,Building DLLs with GNAT,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnatdll}@anchor{28b}@anchor{gnat_ugn/platform_specific_information id26}@anchor{28c}\n+@anchor{gnat_ugn/platform_specific_information building-dlls-with-gnatdll}@anchor{28d}@anchor{gnat_ugn/platform_specific_information id26}@anchor{28e}\n @subsubsection Building DLLs with gnatdll\n \n \n@@ -30817,7 +30816,7 @@ $ gnatmake main -Iapilib -bargs -shared -largs -Lapilib -lAPI\n \n Note that it is preferred to use GNAT Project files\n (@ref{273,,Building DLLs with GNAT Project files}) or the built-in GNAT\n-DLL support (@ref{289,,Building DLLs with GNAT}) or to build DLLs.\n+DLL support (@ref{28b,,Building DLLs with GNAT}) or to build DLLs.\n \n This section explains how to build DLLs containing Ada code using\n @cite{gnatdll}. These DLLs will be referred to as Ada DLLs in the\n@@ -30833,20 +30832,20 @@ non-Ada applications are as follows:\n You need to mark each Ada @emph{entity} exported by the DLL with a @cite{C} or\n @cite{Stdcall} calling convention to avoid any Ada name mangling for the\n entities exported by the DLL\n-(see @ref{28d,,Exporting Ada Entities}). You can\n+(see @ref{28f,,Exporting Ada Entities}). You can\n skip this step if you plan to use the Ada DLL only from Ada applications.\n \n @item \n Your Ada code must export an initialization routine which calls the routine\n @cite{adainit} generated by @emph{gnatbind} to perform the elaboration of\n-the Ada code in the DLL (@ref{28e,,Ada DLLs and Elaboration}). The initialization\n+the Ada code in the DLL (@ref{290,,Ada DLLs and Elaboration}). The initialization\n routine exported by the Ada DLL must be invoked by the clients of the DLL\n to initialize the DLL.\n \n @item \n When useful, the DLL should also export a finalization routine which calls\n routine @cite{adafinal} generated by @emph{gnatbind} to perform the\n-finalization of the Ada code in the DLL (@ref{28f,,Ada DLLs and Finalization}).\n+finalization of the Ada code in the DLL (@ref{291,,Ada DLLs and Finalization}).\n The finalization routine exported by the Ada DLL must be invoked by the\n clients of the DLL when the DLL services are no further needed.\n \n@@ -30860,7 +30859,7 @@ You must provide a definition file listing the exported entities\n \n @item \n Finally you must use @cite{gnatdll} to produce the DLL and the import\n-library (@ref{287,,Using gnatdll}).\n+library (@ref{288,,Using gnatdll}).\n @end itemize\n \n Note that a relocatable DLL stripped using the @cite{strip}\n@@ -30879,7 +30878,7 @@ See @ref{8a,,Library Projects}.\n @end menu\n \n @node Limitations When Using Ada DLLs from Ada,Exporting Ada Entities,,Building DLLs with gnatdll\n-@anchor{gnat_ugn/platform_specific_information limitations-when-using-ada-dlls-from-ada}@anchor{290}\n+@anchor{gnat_ugn/platform_specific_information limitations-when-using-ada-dlls-from-ada}@anchor{292}\n @subsubsection Limitations When Using Ada DLLs from Ada\n \n \n@@ -30900,7 +30899,7 @@ It is completely safe to exchange plain elementary, array or record types,\n Windows object handles, etc.\n \n @node Exporting Ada Entities,Ada DLLs and Elaboration,Limitations When Using Ada DLLs from Ada,Building DLLs with gnatdll\n-@anchor{gnat_ugn/platform_specific_information exporting-ada-entities}@anchor{28d}@anchor{gnat_ugn/platform_specific_information id27}@anchor{291}\n+@anchor{gnat_ugn/platform_specific_information exporting-ada-entities}@anchor{28f}@anchor{gnat_ugn/platform_specific_information id27}@anchor{293}\n @subsubsection Exporting Ada Entities\n \n \n@@ -31000,10 +30999,10 @@ end API;\n Note that if you do not export the Ada entities with a @cite{C} or\n @cite{Stdcall} convention you will have to provide the mangled Ada names\n in the definition file of the Ada DLL\n-(@ref{292,,Creating the Definition File}).\n+(@ref{294,,Creating the Definition File}).\n \n @node Ada DLLs and Elaboration,,Exporting Ada Entities,Building DLLs with gnatdll\n-@anchor{gnat_ugn/platform_specific_information ada-dlls-and-elaboration}@anchor{28e}@anchor{gnat_ugn/platform_specific_information id28}@anchor{293}\n+@anchor{gnat_ugn/platform_specific_information ada-dlls-and-elaboration}@anchor{290}@anchor{gnat_ugn/platform_specific_information id28}@anchor{295}\n @subsubsection Ada DLLs and Elaboration\n \n \n@@ -31021,7 +31020,7 @@ the Ada elaboration routine @cite{adainit} generated by the GNAT binder\n (@ref{ba,,Binding with Non-Ada Main Programs}). See the body of\n @cite{Initialize_Api} for an example. Note that the GNAT binder is\n automatically invoked during the DLL build process by the @cite{gnatdll}\n-tool (@ref{287,,Using gnatdll}).\n+tool (@ref{288,,Using gnatdll}).\n \n When a DLL is loaded, Windows systematically invokes a routine called\n @cite{DllMain}. It would therefore be possible to call @cite{adainit}\n@@ -31034,7 +31033,7 @@ time), which means that the GNAT run time will deadlock waiting for the\n newly created task to complete its initialization.\n \n @node Ada DLLs and Finalization,Creating a Spec for Ada DLLs,Building DLLs with gnatdll,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information id29}@anchor{294}@anchor{gnat_ugn/platform_specific_information ada-dlls-and-finalization}@anchor{28f}\n+@anchor{gnat_ugn/platform_specific_information id29}@anchor{296}@anchor{gnat_ugn/platform_specific_information ada-dlls-and-finalization}@anchor{291}\n @subsubsection Ada DLLs and Finalization\n \n \n@@ -31049,10 +31048,10 @@ routine @cite{adafinal} generated by the GNAT binder\n See the body of @cite{Finalize_Api} for an\n example. As already pointed out the GNAT binder is automatically invoked\n during the DLL build process by the @cite{gnatdll} tool\n-(@ref{287,,Using gnatdll}).\n+(@ref{288,,Using gnatdll}).\n \n @node Creating a Spec for Ada DLLs,GNAT and Windows Resources,Ada DLLs and Finalization,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information id30}@anchor{295}@anchor{gnat_ugn/platform_specific_information creating-a-spec-for-ada-dlls}@anchor{296}\n+@anchor{gnat_ugn/platform_specific_information id30}@anchor{297}@anchor{gnat_ugn/platform_specific_information creating-a-spec-for-ada-dlls}@anchor{298}\n @subsubsection Creating a Spec for Ada DLLs\n \n \n@@ -31110,7 +31109,7 @@ end API;\n @end menu\n \n @node Creating the Definition File,Using gnatdll,,Creating a Spec for Ada DLLs\n-@anchor{gnat_ugn/platform_specific_information creating-the-definition-file}@anchor{292}@anchor{gnat_ugn/platform_specific_information id31}@anchor{297}\n+@anchor{gnat_ugn/platform_specific_information creating-the-definition-file}@anchor{294}@anchor{gnat_ugn/platform_specific_information id31}@anchor{299}\n @subsubsection Creating the Definition File\n \n \n@@ -31146,7 +31145,7 @@ EXPORTS\n @end quotation\n \n @node Using gnatdll,,Creating the Definition File,Creating a Spec for Ada DLLs\n-@anchor{gnat_ugn/platform_specific_information using-gnatdll}@anchor{287}@anchor{gnat_ugn/platform_specific_information id32}@anchor{298}\n+@anchor{gnat_ugn/platform_specific_information using-gnatdll}@anchor{288}@anchor{gnat_ugn/platform_specific_information id32}@anchor{29a}\n @subsubsection Using @cite{gnatdll}\n \n \n@@ -31357,7 +31356,7 @@ asks @emph{gnatlink} to generate the routines @cite{DllMain} and\n is loaded into memory.\n \n @item \n-@cite{gnatdll} uses @cite{dlltool} (see @ref{299,,Using dlltool}) to build the\n+@cite{gnatdll} uses @cite{dlltool} (see @ref{29b,,Using dlltool}) to build the\n export table (@code{api.exp}). The export table contains the relocation\n information in a form which can be used during the final link to ensure\n that the Windows loader is able to place the DLL anywhere in memory.\n@@ -31396,7 +31395,7 @@ $ gnatbind -n api\n $ gnatlink api api.exp -o api.dll -mdll\n @end example\n @end itemize\n-@anchor{gnat_ugn/platform_specific_information using-dlltool}@anchor{299}\n+@anchor{gnat_ugn/platform_specific_information using-dlltool}@anchor{29b}\n @subsubheading Using @cite{dlltool}\n \n \n@@ -31510,8 +31509,8 @@ Verbose mode.\n Use @cite{assembler-name} as the assembler. The default is @cite{as}.\n @end table\n \n-@node GNAT and Windows Resources,Debugging a DLL,Creating a Spec for Ada DLLs,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information gnat-and-windows-resources}@anchor{29a}@anchor{gnat_ugn/platform_specific_information id33}@anchor{29b}\n+@node GNAT and Windows Resources,Using GNAT DLLs from Microsoft Visual Studio Applications,Creating a Spec for Ada DLLs,Mixed-Language Programming on Windows\n+@anchor{gnat_ugn/platform_specific_information gnat-and-windows-resources}@anchor{29c}@anchor{gnat_ugn/platform_specific_information id33}@anchor{29d}\n @subsubsection GNAT and Windows Resources\n \n \n@@ -31606,7 +31605,7 @@ the corresponding Microsoft documentation.\n @end menu\n \n @node Building Resources,Compiling Resources,,GNAT and Windows Resources\n-@anchor{gnat_ugn/platform_specific_information building-resources}@anchor{29c}@anchor{gnat_ugn/platform_specific_information id34}@anchor{29d}\n+@anchor{gnat_ugn/platform_specific_information building-resources}@anchor{29e}@anchor{gnat_ugn/platform_specific_information id34}@anchor{29f}\n @subsubsection Building Resources\n \n \n@@ -31626,7 +31625,7 @@ complete description of the resource script language can be found in the\n Microsoft documentation.\n \n @node Compiling Resources,Using Resources,Building Resources,GNAT and Windows Resources\n-@anchor{gnat_ugn/platform_specific_information compiling-resources}@anchor{29e}@anchor{gnat_ugn/platform_specific_information id35}@anchor{29f}\n+@anchor{gnat_ugn/platform_specific_information compiling-resources}@anchor{2a0}@anchor{gnat_ugn/platform_specific_information id35}@anchor{2a1}\n @subsubsection Compiling Resources\n \n \n@@ -31668,7 +31667,7 @@ $ windres -i myres.res -o myres.o\n @end quotation\n \n @node Using Resources,,Compiling Resources,GNAT and Windows Resources\n-@anchor{gnat_ugn/platform_specific_information id36}@anchor{2a0}@anchor{gnat_ugn/platform_specific_information using-resources}@anchor{2a1}\n+@anchor{gnat_ugn/platform_specific_information id36}@anchor{2a2}@anchor{gnat_ugn/platform_specific_information using-resources}@anchor{2a3}\n @subsubsection Using Resources\n \n \n@@ -31687,8 +31686,101 @@ $ gnatmake myprog -largs myres.o\n @end example\n @end quotation\n \n-@node Debugging a DLL,Setting Stack Size from gnatlink,GNAT and Windows Resources,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information id37}@anchor{2a2}@anchor{gnat_ugn/platform_specific_information debugging-a-dll}@anchor{2a3}\n+@node Using GNAT DLLs from Microsoft Visual Studio Applications,Debugging a DLL,GNAT and Windows Resources,Mixed-Language Programming on Windows\n+@anchor{gnat_ugn/platform_specific_information using-gnat-dll-from-msvs}@anchor{2a4}@anchor{gnat_ugn/platform_specific_information using-gnat-dlls-from-microsoft-visual-studio-applications}@anchor{2a5}\n+@subsubsection Using GNAT DLLs from Microsoft Visual Studio Applications\n+\n+\n+@geindex Microsoft Visual Studio\n+@geindex use with GNAT DLLs\n+\n+This section describes a common case of mixed GNAT/Microsoft Visual Studio\n+application development, where the main program is developed using MSVS, and\n+is linked with a DLL developed using GNAT. Such a mixed application should\n+be developed following the general guidelines outlined above; below is the\n+cookbook-style sequence of steps to follow:\n+\n+\n+@enumerate \n+\n+@item \n+First develop and build the GNAT shared library using a library project\n+(let's assume the project is @cite{mylib.gpr}, producing the library @cite{libmylib.dll}):\n+@end enumerate\n+\n+@quotation\n+\n+@example\n+$ gprbuild -p mylib.gpr\n+@end example\n+@end quotation\n+\n+\n+@enumerate 2\n+\n+@item \n+Produce a .def file for the symbols you need to interface with, either by\n+hand or automatically with possibly some manual adjustments\n+(see @ref{286,,Creating Definition File Automatically}):\n+@end enumerate\n+\n+@quotation\n+\n+@example\n+$ dlltool libmylib.dll -z libmylib.def --export-all-symbols\n+@end example\n+@end quotation\n+\n+\n+@enumerate 3\n+\n+@item \n+Make sure that MSVS command-line tools are accessible on the path.\n+\n+@item \n+Create the Microsoft-style import library (see @ref{289,,MSVS-Style Import Library}):\n+@end enumerate\n+\n+@quotation\n+\n+@example\n+$ lib -machine:IX86 -def:libmylib.def -out:libmylib.lib\n+@end example\n+@end quotation\n+\n+If you are using a 64-bit toolchain, the above becomes...\n+\n+@quotation\n+\n+@example\n+$ lib -machine:X64 -def:libmylib.def -out:libmylib.lib\n+@end example\n+@end quotation\n+\n+\n+@enumerate 5\n+\n+@item \n+Build the C main\n+@end enumerate\n+\n+@quotation\n+\n+@example\n+$ cl /O2 /MD main.c libmylib.lib\n+@end example\n+@end quotation\n+\n+\n+@enumerate 6\n+\n+@item \n+Before running the executable, make sure you have set the PATH to the DLL,\n+or copy the DLL into into the directory containing the .exe.\n+@end enumerate\n+\n+@node Debugging a DLL,Setting Stack Size from gnatlink,Using GNAT DLLs from Microsoft Visual Studio Applications,Mixed-Language Programming on Windows\n+@anchor{gnat_ugn/platform_specific_information id37}@anchor{2a6}@anchor{gnat_ugn/platform_specific_information debugging-a-dll}@anchor{2a7}\n @subsubsection Debugging a DLL\n \n \n@@ -31726,7 +31818,7 @@ tools suite used to build the DLL.\n @end menu\n \n @node Program and DLL Both Built with GCC/GNAT,Program Built with Foreign Tools and DLL Built with GCC/GNAT,,Debugging a DLL\n-@anchor{gnat_ugn/platform_specific_information program-and-dll-both-built-with-gcc-gnat}@anchor{2a4}@anchor{gnat_ugn/platform_specific_information id38}@anchor{2a5}\n+@anchor{gnat_ugn/platform_specific_information program-and-dll-both-built-with-gcc-gnat}@anchor{2a8}@anchor{gnat_ugn/platform_specific_information id38}@anchor{2a9}\n @subsubsection Program and DLL Both Built with GCC/GNAT\n \n \n@@ -31776,7 +31868,7 @@ you can use the standard approach to debug the whole program\n (@ref{26,,Running and Debugging Ada Programs}).\n \n @node Program Built with Foreign Tools and DLL Built with GCC/GNAT,,Program and DLL Both Built with GCC/GNAT,Debugging a DLL\n-@anchor{gnat_ugn/platform_specific_information program-built-with-foreign-tools-and-dll-built-with-gcc-gnat}@anchor{2a6}@anchor{gnat_ugn/platform_specific_information id39}@anchor{2a7}\n+@anchor{gnat_ugn/platform_specific_information program-built-with-foreign-tools-and-dll-built-with-gcc-gnat}@anchor{2aa}@anchor{gnat_ugn/platform_specific_information id39}@anchor{2ab}\n @subsubsection Program Built with Foreign Tools and DLL Built with GCC/GNAT\n \n \n@@ -31932,7 +32024,7 @@ approach to debug a program as described in\n @ref{26,,Running and Debugging Ada Programs}.\n \n @node Setting Stack Size from gnatlink,Setting Heap Size from gnatlink,Debugging a DLL,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information setting-stack-size-from-gnatlink}@anchor{13a}@anchor{gnat_ugn/platform_specific_information id40}@anchor{2a8}\n+@anchor{gnat_ugn/platform_specific_information setting-stack-size-from-gnatlink}@anchor{13a}@anchor{gnat_ugn/platform_specific_information id40}@anchor{2ac}\n @subsubsection Setting Stack Size from @emph{gnatlink}\n \n \n@@ -31975,7 +32067,7 @@ because the coma is a separator for this option.\n @end itemize\n \n @node Setting Heap Size from gnatlink,,Setting Stack Size from gnatlink,Mixed-Language Programming on Windows\n-@anchor{gnat_ugn/platform_specific_information setting-heap-size-from-gnatlink}@anchor{13b}@anchor{gnat_ugn/platform_specific_information id41}@anchor{2a9}\n+@anchor{gnat_ugn/platform_specific_information setting-heap-size-from-gnatlink}@anchor{13b}@anchor{gnat_ugn/platform_specific_information id41}@anchor{2ad}\n @subsubsection Setting Heap Size from @emph{gnatlink}\n \n \n@@ -32007,8 +32099,85 @@ This sets the heap reserve size to 0x1000000 bytes. Note that with\n because the coma is a separator for this option.\n @end itemize\n \n+@node Windows Specific Add-Ons,,Mixed-Language Programming on Windows,Microsoft Windows Topics\n+@anchor{gnat_ugn/platform_specific_information windows-specific-add-ons}@anchor{2ae}@anchor{gnat_ugn/platform_specific_information win32-specific-addons}@anchor{2af}\n+@subsection Windows Specific Add-Ons\n+\n+\n+This section describes the Windows specific add-ons.\n+\n+@menu\n+* Win32Ada:: \n+* wPOSIX:: \n+\n+@end menu\n+\n+@node Win32Ada,wPOSIX,,Windows Specific Add-Ons\n+@anchor{gnat_ugn/platform_specific_information win32ada}@anchor{2b0}@anchor{gnat_ugn/platform_specific_information id42}@anchor{2b1}\n+@subsubsection Win32Ada\n+\n+\n+Win32Ada is a binding for the Microsoft Win32 API. This binding can be\n+easily installed from the provided installer. To use the Win32Ada\n+binding you need to use a project file, and adding a single with_clause\n+will give you full access to the Win32Ada binding sources and ensure\n+that the proper libraries are passed to the linker.\n+\n+@quotation\n+\n+@example\n+with \"win32ada\";\n+project P is\n+   for Sources use ...;\n+end P;\n+@end example\n+@end quotation\n+\n+To build the application you just need to call gprbuild for the\n+application's project, here p.gpr:\n+\n+@quotation\n+\n+@example\n+gprbuild p.gpr\n+@end example\n+@end quotation\n+\n+@node wPOSIX,,Win32Ada,Windows Specific Add-Ons\n+@anchor{gnat_ugn/platform_specific_information id43}@anchor{2b2}@anchor{gnat_ugn/platform_specific_information wposix}@anchor{2b3}\n+@subsubsection wPOSIX\n+\n+\n+wPOSIX is a minimal POSIX binding whose goal is to help with building\n+cross-platforms applications. This binding is not complete though, as\n+the Win32 API does not provide the necessary support for all POSIX APIs.\n+\n+To use the wPOSIX binding you need to use a project file, and adding\n+a single with_clause will give you full access to the wPOSIX binding\n+sources and ensure that the proper libraries are passed to the linker.\n+\n+@quotation\n+\n+@example\n+with \"wposix\";\n+project P is\n+   for Sources use ...;\n+end P;\n+@end example\n+@end quotation\n+\n+To build the application you just need to call gprbuild for the\n+application's project, here p.gpr:\n+\n+@quotation\n+\n+@example\n+gprbuild p.gpr\n+@end example\n+@end quotation\n+\n @node Mac OS Topics,,Microsoft Windows Topics,Platform-Specific Information\n-@anchor{gnat_ugn/platform_specific_information mac-os-topics}@anchor{2f}@anchor{gnat_ugn/platform_specific_information id42}@anchor{2aa}\n+@anchor{gnat_ugn/platform_specific_information mac-os-topics}@anchor{2f}@anchor{gnat_ugn/platform_specific_information id44}@anchor{2b4}\n @section Mac OS Topics\n \n \n@@ -32023,7 +32192,7 @@ platform.\n @end menu\n \n @node Codesigning the Debugger,,,Mac OS Topics\n-@anchor{gnat_ugn/platform_specific_information codesigning-the-debugger}@anchor{2ab}\n+@anchor{gnat_ugn/platform_specific_information codesigning-the-debugger}@anchor{2b5}\n @subsection Codesigning the Debugger\n \n \n@@ -32104,7 +32273,7 @@ the location where you installed GNAT.  Also, be sure that users are\n in the Unix group @code{_developer}.\n \n @node Example of Binder Output File,Elaboration Order Handling in GNAT,Platform-Specific Information,Top\n-@anchor{gnat_ugn/example_of_binder_output example-of-binder-output-file}@anchor{10}@anchor{gnat_ugn/example_of_binder_output doc}@anchor{2ac}@anchor{gnat_ugn/example_of_binder_output id1}@anchor{2ad}\n+@anchor{gnat_ugn/example_of_binder_output example-of-binder-output-file}@anchor{10}@anchor{gnat_ugn/example_of_binder_output doc}@anchor{2b6}@anchor{gnat_ugn/example_of_binder_output id1}@anchor{2b7}\n @chapter Example of Binder Output File\n \n \n@@ -32856,7 +33025,7 @@ elaboration code in your own application).\n @c -- Example: A |withing| unit has a |with| clause, it |withs| a |withed| unit\n \n @node Elaboration Order Handling in GNAT,Inline Assembler,Example of Binder Output File,Top\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-order-handling-in-gnat}@anchor{11}@anchor{gnat_ugn/elaboration_order_handling_in_gnat doc}@anchor{2ae}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id1}@anchor{2af}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-order-handling-in-gnat}@anchor{11}@anchor{gnat_ugn/elaboration_order_handling_in_gnat doc}@anchor{2b8}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id1}@anchor{2b9}\n @chapter Elaboration Order Handling in GNAT\n \n \n@@ -32888,7 +33057,7 @@ features.\n @end menu\n \n @node Elaboration Code,Checking the Elaboration Order,,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-code}@anchor{2b0}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id2}@anchor{2b1}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-code}@anchor{2ba}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id2}@anchor{2bb}\n @section Elaboration Code\n \n \n@@ -33038,7 +33207,7 @@ to figure out which of these expressions will be true, and hence it\n is impossible to guarantee a safe order of elaboration at run time.\n \n @node Checking the Elaboration Order,Controlling the Elaboration Order,Elaboration Code,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat checking-the-elaboration-order}@anchor{2b2}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id3}@anchor{2b3}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat checking-the-elaboration-order}@anchor{2bc}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id3}@anchor{2bd}\n @section Checking the Elaboration Order\n \n \n@@ -33142,7 +33311,7 @@ does such optimizations, but still the easiest conceptual model is to\n think of there being one variable per subprogram.\n \n @node Controlling the Elaboration Order,Controlling Elaboration in GNAT - Internal Calls,Checking the Elaboration Order,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id4}@anchor{2b4}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-the-elaboration-order}@anchor{2b5}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id4}@anchor{2be}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-the-elaboration-order}@anchor{2bf}\n @section Controlling the Elaboration Order\n \n \n@@ -33401,7 +33570,7 @@ code in the body makes calls to some other unit, so it is still necessary\n to use @cite{Elaborate_All} on such units.\n \n @node Controlling Elaboration in GNAT - Internal Calls,Controlling Elaboration in GNAT - External Calls,Controlling the Elaboration Order,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id5}@anchor{2b6}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-elaboration-in-gnat-internal-calls}@anchor{2b7}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id5}@anchor{2c0}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-elaboration-in-gnat-internal-calls}@anchor{2c1}\n @section Controlling Elaboration in GNAT - Internal Calls\n \n \n@@ -33581,7 +33750,7 @@ guaranteed) for a program to be able to call a subprogram whose body\n is not yet elaborated, without raising a @cite{Program_Error} exception.\n \n @node Controlling Elaboration in GNAT - External Calls,Default Behavior in GNAT - Ensuring Safety,Controlling Elaboration in GNAT - Internal Calls,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id6}@anchor{2b8}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-elaboration-in-gnat-external-calls}@anchor{2b9}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id6}@anchor{2c2}@anchor{gnat_ugn/elaboration_order_handling_in_gnat controlling-elaboration-in-gnat-external-calls}@anchor{2c3}\n @section Controlling Elaboration in GNAT - External Calls\n \n \n@@ -33689,7 +33858,7 @@ provides a number of facilities for assisting the programmer in\n developing programs that are robust with respect to elaboration order.\n \n @node Default Behavior in GNAT - Ensuring Safety,Treatment of Pragma Elaborate,Controlling Elaboration in GNAT - External Calls,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id7}@anchor{2ba}@anchor{gnat_ugn/elaboration_order_handling_in_gnat default-behavior-in-gnat-ensuring-safety}@anchor{2bb}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id7}@anchor{2c4}@anchor{gnat_ugn/elaboration_order_handling_in_gnat default-behavior-in-gnat-ensuring-safety}@anchor{2c5}\n @section Default Behavior in GNAT - Ensuring Safety\n \n \n@@ -33791,7 +33960,7 @@ is clearly safer to rely on compile and link time checks rather than\n run-time checks. However, in the case of legacy code, it may be\n difficult to meet the requirements of the static model. This\n issue is further discussed in\n-@ref{2bc,,What to Do If the Default Elaboration Behavior Fails}.\n+@ref{2c6,,What to Do If the Default Elaboration Behavior Fails}.\n \n Note that the static model provides a strict subset of the allowed\n behavior and programs of the Ada Reference Manual, so if you do\n@@ -33801,7 +33970,7 @@ work using the dynamic model, providing that you remove any\n pragma Elaborate statements from the source.\n \n @node Treatment of Pragma Elaborate,Elaboration Issues for Library Tasks,Default Behavior in GNAT - Ensuring Safety,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat treatment-of-pragma-elaborate}@anchor{2bd}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id8}@anchor{2be}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat treatment-of-pragma-elaborate}@anchor{2c7}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id8}@anchor{2c8}\n @section Treatment of Pragma Elaborate\n \n \n@@ -33840,7 +34009,7 @@ When using the static mode with @emph{-gnatwl}, any use of\n problems.\n \n @node Elaboration Issues for Library Tasks,Mixing Elaboration Models,Treatment of Pragma Elaborate,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-issues-for-library-tasks}@anchor{2bf}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id9}@anchor{2c0}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-issues-for-library-tasks}@anchor{2c9}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id9}@anchor{2ca}\n @section Elaboration Issues for Library Tasks\n \n \n@@ -34203,7 +34372,7 @@ no task receives an entry call before elaboration of all units is completed.\n @end itemize\n \n @node Mixing Elaboration Models,What to Do If the Default Elaboration Behavior Fails,Elaboration Issues for Library Tasks,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id10}@anchor{2c1}@anchor{gnat_ugn/elaboration_order_handling_in_gnat mixing-elaboration-models}@anchor{2c2}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id10}@anchor{2cb}@anchor{gnat_ugn/elaboration_order_handling_in_gnat mixing-elaboration-models}@anchor{2cc}\n @section Mixing Elaboration Models\n \n \n@@ -34268,7 +34437,7 @@ allowing the main application that uses this subsystem to be compiled\n using the more reliable default static model.\n \n @node What to Do If the Default Elaboration Behavior Fails,Elaboration for Indirect Calls,Mixing Elaboration Models,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id11}@anchor{2c3}@anchor{gnat_ugn/elaboration_order_handling_in_gnat what-to-do-if-the-default-elaboration-behavior-fails}@anchor{2bc}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id11}@anchor{2cd}@anchor{gnat_ugn/elaboration_order_handling_in_gnat what-to-do-if-the-default-elaboration-behavior-fails}@anchor{2c6}\n @section What to Do If the Default Elaboration Behavior Fails\n \n \n@@ -34379,7 +34548,7 @@ all subprograms declared in this spec.\n @item \n Use Pragma Elaborate.\n \n-As previously described in section @ref{2bd,,Treatment of Pragma Elaborate},\n+As previously described in section @ref{2c7,,Treatment of Pragma Elaborate},\n GNAT in static mode assumes that a @cite{pragma} Elaborate indicates correctly\n that no elaboration checks are required on calls to the designated unit.\n There may be cases in which the caller knows that no transitive calls\n@@ -34512,7 +34681,7 @@ C-tests are indeed correct (it is less efficient, but efficiency is\n not a factor in running the ACATS tests.)\n \n @node Elaboration for Indirect Calls,Summary of Procedures for Elaboration Control,What to Do If the Default Elaboration Behavior Fails,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id12}@anchor{2c4}@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-for-indirect-calls}@anchor{2c5}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id12}@anchor{2ce}@anchor{gnat_ugn/elaboration_order_handling_in_gnat elaboration-for-indirect-calls}@anchor{2cf}\n @section Elaboration for Indirect Calls\n \n \n@@ -34541,7 +34710,7 @@ adding an indirect call can cause erroneous behavior in the presence\n of @emph{-gnatd.U}.\n \n @node Summary of Procedures for Elaboration Control,Other Elaboration Order Considerations,Elaboration for Indirect Calls,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id13}@anchor{2c6}@anchor{gnat_ugn/elaboration_order_handling_in_gnat summary-of-procedures-for-elaboration-control}@anchor{2c7}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id13}@anchor{2d0}@anchor{gnat_ugn/elaboration_order_handling_in_gnat summary-of-procedures-for-elaboration-control}@anchor{2d1}\n @section Summary of Procedures for Elaboration Control\n \n \n@@ -34565,7 +34734,7 @@ and, if you are sure there really are no elaboration problems,\n use a global pragma @cite{Suppress (Elaboration_Check)}.\n \n @node Other Elaboration Order Considerations,Determining the Chosen Elaboration Order,Summary of Procedures for Elaboration Control,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat id14}@anchor{2c8}@anchor{gnat_ugn/elaboration_order_handling_in_gnat other-elaboration-order-considerations}@anchor{2c9}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat id14}@anchor{2d2}@anchor{gnat_ugn/elaboration_order_handling_in_gnat other-elaboration-order-considerations}@anchor{2d3}\n @section Other Elaboration Order Considerations\n \n \n@@ -34712,7 +34881,7 @@ and figuring out which is correct, and then adding the necessary\n @cite{Elaborate} or @cite{Elaborate_All} pragmas to ensure the desired order.\n \n @node Determining the Chosen Elaboration Order,,Other Elaboration Order Considerations,Elaboration Order Handling in GNAT\n-@anchor{gnat_ugn/elaboration_order_handling_in_gnat determining-the-chosen-elaboration-order}@anchor{2ca}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id15}@anchor{2cb}\n+@anchor{gnat_ugn/elaboration_order_handling_in_gnat determining-the-chosen-elaboration-order}@anchor{2d4}@anchor{gnat_ugn/elaboration_order_handling_in_gnat id15}@anchor{2d5}\n @section Determining the Chosen Elaboration Order\n \n \n@@ -34852,7 +35021,7 @@ gdbstr (body)\n @end example\n \n @node Inline Assembler,GNU Free Documentation License,Elaboration Order Handling in GNAT,Top\n-@anchor{gnat_ugn/inline_assembler inline-assembler}@anchor{12}@anchor{gnat_ugn/inline_assembler doc}@anchor{2cc}@anchor{gnat_ugn/inline_assembler id1}@anchor{2cd}\n+@anchor{gnat_ugn/inline_assembler inline-assembler}@anchor{12}@anchor{gnat_ugn/inline_assembler doc}@anchor{2d6}@anchor{gnat_ugn/inline_assembler id1}@anchor{2d7}\n @chapter Inline Assembler\n \n \n@@ -34911,7 +35080,7 @@ and with assembly language programming.\n @end menu\n \n @node Basic Assembler Syntax,A Simple Example of Inline Assembler,,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id2}@anchor{2ce}@anchor{gnat_ugn/inline_assembler basic-assembler-syntax}@anchor{2cf}\n+@anchor{gnat_ugn/inline_assembler id2}@anchor{2d8}@anchor{gnat_ugn/inline_assembler basic-assembler-syntax}@anchor{2d9}\n @section Basic Assembler Syntax\n \n \n@@ -35027,7 +35196,7 @@ Intel: Destination first; for example @cite{mov eax@comma{} 4}@w{ }\n \n \n @node A Simple Example of Inline Assembler,Output Variables in Inline Assembler,Basic Assembler Syntax,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler a-simple-example-of-inline-assembler}@anchor{2d0}@anchor{gnat_ugn/inline_assembler id3}@anchor{2d1}\n+@anchor{gnat_ugn/inline_assembler a-simple-example-of-inline-assembler}@anchor{2da}@anchor{gnat_ugn/inline_assembler id3}@anchor{2db}\n @section A Simple Example of Inline Assembler\n \n \n@@ -35176,7 +35345,7 @@ If there are no errors, @emph{as} will generate an object file\n @code{nothing.out}.\n \n @node Output Variables in Inline Assembler,Input Variables in Inline Assembler,A Simple Example of Inline Assembler,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id4}@anchor{2d2}@anchor{gnat_ugn/inline_assembler output-variables-in-inline-assembler}@anchor{2d3}\n+@anchor{gnat_ugn/inline_assembler id4}@anchor{2dc}@anchor{gnat_ugn/inline_assembler output-variables-in-inline-assembler}@anchor{2dd}\n @section Output Variables in Inline Assembler\n \n \n@@ -35543,7 +35712,7 @@ end Get_Flags_3;\n @end quotation\n \n @node Input Variables in Inline Assembler,Inlining Inline Assembler Code,Output Variables in Inline Assembler,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id5}@anchor{2d4}@anchor{gnat_ugn/inline_assembler input-variables-in-inline-assembler}@anchor{2d5}\n+@anchor{gnat_ugn/inline_assembler id5}@anchor{2de}@anchor{gnat_ugn/inline_assembler input-variables-in-inline-assembler}@anchor{2df}\n @section Input Variables in Inline Assembler\n \n \n@@ -35632,7 +35801,7 @@ _increment__incr.1:\n @end quotation\n \n @node Inlining Inline Assembler Code,Other Asm Functionality,Input Variables in Inline Assembler,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler id6}@anchor{2d6}@anchor{gnat_ugn/inline_assembler inlining-inline-assembler-code}@anchor{2d7}\n+@anchor{gnat_ugn/inline_assembler id6}@anchor{2e0}@anchor{gnat_ugn/inline_assembler inlining-inline-assembler-code}@anchor{2e1}\n @section Inlining Inline Assembler Code\n \n \n@@ -35703,7 +35872,7 @@ movl %esi,%eax\n thus saving the overhead of stack frame setup and an out-of-line call.\n \n @node Other Asm Functionality,,Inlining Inline Assembler Code,Inline Assembler\n-@anchor{gnat_ugn/inline_assembler other-asm-functionality}@anchor{2d8}@anchor{gnat_ugn/inline_assembler id7}@anchor{2d9}\n+@anchor{gnat_ugn/inline_assembler other-asm-functionality}@anchor{2e2}@anchor{gnat_ugn/inline_assembler id7}@anchor{2e3}\n @section Other @cite{Asm} Functionality\n \n \n@@ -35718,7 +35887,7 @@ and @cite{Volatile}, which inhibits unwanted optimizations.\n @end menu\n \n @node The Clobber Parameter,The Volatile Parameter,,Other Asm Functionality\n-@anchor{gnat_ugn/inline_assembler the-clobber-parameter}@anchor{2da}@anchor{gnat_ugn/inline_assembler id8}@anchor{2db}\n+@anchor{gnat_ugn/inline_assembler the-clobber-parameter}@anchor{2e4}@anchor{gnat_ugn/inline_assembler id8}@anchor{2e5}\n @subsection The @cite{Clobber} Parameter\n \n \n@@ -35782,7 +35951,7 @@ Use 'register' name @cite{memory} if you changed a memory location\n @end itemize\n \n @node The Volatile Parameter,,The Clobber Parameter,Other Asm Functionality\n-@anchor{gnat_ugn/inline_assembler the-volatile-parameter}@anchor{2dc}@anchor{gnat_ugn/inline_assembler id9}@anchor{2dd}\n+@anchor{gnat_ugn/inline_assembler the-volatile-parameter}@anchor{2e6}@anchor{gnat_ugn/inline_assembler id9}@anchor{2e7}\n @subsection The @cite{Volatile} Parameter\n \n \n@@ -35818,7 +35987,7 @@ to @cite{True} only if the compiler's optimizations have created\n problems.\n \n @node GNU Free Documentation License,Index,Inline Assembler,Top\n-@anchor{share/gnu_free_documentation_license gnu-fdl}@anchor{1}@anchor{share/gnu_free_documentation_license doc}@anchor{2de}@anchor{share/gnu_free_documentation_license gnu-free-documentation-license}@anchor{2df}\n+@anchor{share/gnu_free_documentation_license gnu-fdl}@anchor{1}@anchor{share/gnu_free_documentation_license doc}@anchor{2e8}@anchor{share/gnu_free_documentation_license gnu-free-documentation-license}@anchor{2e9}\n @chapter GNU Free Documentation License\n \n "}]}