{"sha": "9d9ba03360721158e2000f19f6f65896f5af88b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ5YmEwMzM2MDcyMTE1OGUyMDAwZjE5ZjZmNjU4OTZmNWFmODhiMA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-16T14:17:07Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-16T14:17:07Z"}, "message": "Impl blocks can have a trait reference\n\nThis refactors Type HIR lowering to extract TypePath AST -> HIR lowering\nfunction, as Trait References are simply TypePaths.", "tree": {"sha": "eb920e6388e9d782bab2efc195f9c15e6edab20b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb920e6388e9d782bab2efc195f9c15e6edab20b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d9ba03360721158e2000f19f6f65896f5af88b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9ba03360721158e2000f19f6f65896f5af88b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d9ba03360721158e2000f19f6f65896f5af88b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9ba03360721158e2000f19f6f65896f5af88b0/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "730a2174b933162c42843af43d85851b85d64144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730a2174b933162c42843af43d85851b85d64144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730a2174b933162c42843af43d85851b85d64144"}], "stats": {"total": 191, "additions": 113, "deletions": 78}, "files": [{"sha": "bb9f764ca440a36eefb8e36f0374c321275857df", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9ba03360721158e2000f19f6f65896f5af88b0/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9ba03360721158e2000f19f6f65896f5af88b0/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=9d9ba03360721158e2000f19f6f65896f5af88b0", "patch": "@@ -387,7 +387,7 @@ class ASTLoweringItem : public ASTLoweringBase\n     HIR::ImplBlock *hir_impl_block\n       = new HIR::ImplBlock (mapping, std::move (impl_items),\n \t\t\t    std::move (generic_params),\n-\t\t\t    std::unique_ptr<HIR::Type> (impl_type),\n+\t\t\t    std::unique_ptr<HIR::Type> (impl_type), nullptr,\n \t\t\t    where_clause, vis, impl_block.get_inner_attrs (),\n \t\t\t    impl_block.get_outer_attrs (),\n \t\t\t    impl_block.get_locus ());\n@@ -507,6 +507,8 @@ class ASTLoweringItem : public ASTLoweringBase\n \n     HIR::Type *impl_type\n       = ASTLoweringType::translate (impl_block.get_type ().get ());\n+    HIR::TypePath *trait_ref\n+      = ASTLowerTypePath::translate (impl_block.get_trait_path ());\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, impl_block.get_node_id (),\n@@ -528,6 +530,7 @@ class ASTLoweringItem : public ASTLoweringBase\n       = new HIR::ImplBlock (mapping, std::move (impl_items),\n \t\t\t    std::move (generic_params),\n \t\t\t    std::unique_ptr<HIR::Type> (impl_type),\n+\t\t\t    std::unique_ptr<HIR::TypePath> (trait_ref),\n \t\t\t    where_clause, vis, impl_block.get_inner_attrs (),\n \t\t\t    impl_block.get_outer_attrs (),\n \t\t\t    impl_block.get_locus ());"}, {"sha": "86e802e0fa96a1cf0f3a3417441419fd3b093ed8", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 64, "deletions": 67, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9ba03360721158e2000f19f6f65896f5af88b0/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9ba03360721158e2000f19f6f65896f5af88b0/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=9d9ba03360721158e2000f19f6f65896f5af88b0", "patch": "@@ -26,6 +26,68 @@\n namespace Rust {\n namespace HIR {\n \n+class ASTLowerTypePath : public ASTLoweringBase\n+{\n+  using Rust::HIR::ASTLoweringBase::visit;\n+\n+public:\n+  static HIR::TypePath *translate (AST::TypePath &type)\n+  {\n+    ASTLowerTypePath resolver;\n+    type.accept_vis (resolver);\n+\n+    rust_assert (resolver.translated != nullptr);\n+\n+    return resolver.translated;\n+  }\n+\n+  void visit (AST::TypePathSegment &segment) override\n+  {\n+    HIR::PathIdentSegment ident (segment.get_ident_segment ().as_string ());\n+    translated_segment\n+      = new HIR::TypePathSegment (ident,\n+\t\t\t\t  segment.get_separating_scope_resolution (),\n+\t\t\t\t  segment.get_locus ());\n+  }\n+\n+  void visit (AST::TypePathSegmentGeneric &segment) override;\n+\n+  void visit (AST::TypePath &path) override\n+  {\n+    std::vector<std::unique_ptr<HIR::TypePathSegment> > translated_segments;\n+\n+    path.iterate_segments ([&] (AST::TypePathSegment *seg) mutable -> bool {\n+      translated_segment = nullptr;\n+      seg->accept_vis (*this);\n+      if (translated_segment == nullptr)\n+\t{\n+\t  rust_fatal_error (seg->get_locus (),\n+\t\t\t    \"failed to translate AST TypePathSegment\");\n+\t  return false;\n+\t}\n+\n+      translated_segments.push_back (\n+\tstd::unique_ptr<HIR::TypePathSegment> (translated_segment));\n+      return true;\n+    });\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, path.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+    translated\n+      = new HIR::TypePath (std::move (mapping), std::move (translated_segments),\n+\t\t\t   path.get_locus (),\n+\t\t\t   path.has_opening_scope_resolution_op ());\n+    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       translated);\n+  }\n+\n+private:\n+  HIR::TypePath *translated;\n+  HIR::TypePathSegment *translated_segment;\n+};\n+\n class ASTLoweringType : public ASTLoweringBase\n {\n   using Rust::HIR::ASTLoweringBase::visit;\n@@ -116,71 +178,9 @@ class ASTLoweringType : public ASTLoweringBase\n \t\t\t\t     tuple.get_locus ());\n   }\n \n-  void visit (AST::TypePathSegment &segment) override\n-  {\n-    HIR::PathIdentSegment ident (segment.get_ident_segment ().as_string ());\n-    translated_segment\n-      = new HIR::TypePathSegment (ident,\n-\t\t\t\t  segment.get_separating_scope_resolution (),\n-\t\t\t\t  segment.get_locus ());\n-  }\n-\n-  void visit (AST::TypePathSegmentGeneric &segment) override\n-  {\n-    std::vector<HIR::GenericArgsBinding> binding_args; // TODO\n-\n-    std::string segment_name = segment.get_ident_segment ().as_string ();\n-    bool has_separating_scope_resolution\n-      = segment.get_separating_scope_resolution ();\n-\n-    std::vector<HIR::Lifetime> lifetime_args;\n-    for (auto &lifetime : segment.get_generic_args ().get_lifetime_args ())\n-      {\n-\tHIR::Lifetime l = lower_lifetime (lifetime);\n-\tlifetime_args.push_back (std::move (l));\n-      }\n-\n-    std::vector<std::unique_ptr<HIR::Type> > type_args;\n-    for (auto &type : segment.get_generic_args ().get_type_args ())\n-      {\n-\tHIR::Type *t = ASTLoweringType::translate (type.get ());\n-\ttype_args.push_back (std::unique_ptr<HIR::Type> (t));\n-      }\n-\n-    translated_segment = new HIR::TypePathSegmentGeneric (\n-      segment_name, has_separating_scope_resolution, std::move (lifetime_args),\n-      std::move (type_args), std::move (binding_args), segment.get_locus ());\n-  }\n-\n   void visit (AST::TypePath &path) override\n   {\n-    std::vector<std::unique_ptr<HIR::TypePathSegment> > translated_segments;\n-\n-    path.iterate_segments ([&] (AST::TypePathSegment *seg) mutable -> bool {\n-      translated_segment = nullptr;\n-      seg->accept_vis (*this);\n-      if (translated_segment == nullptr)\n-\t{\n-\t  rust_fatal_error (seg->get_locus (),\n-\t\t\t    \"failed to translate AST TypePathSegment\");\n-\t  return false;\n-\t}\n-\n-      translated_segments.push_back (\n-\tstd::unique_ptr<HIR::TypePathSegment> (translated_segment));\n-      return true;\n-    });\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, path.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-    translated\n-      = new HIR::TypePath (std::move (mapping), std::move (translated_segments),\n-\t\t\t   path.get_locus (),\n-\t\t\t   path.has_opening_scope_resolution_op ());\n-    mappings->insert_hir_type (mapping.get_crate_num (), mapping.get_hirid (),\n-\t\t\t       translated);\n+    translated = ASTLowerTypePath::translate (path);\n   }\n \n   void visit (AST::ArrayType &type) override\n@@ -238,12 +238,9 @@ class ASTLoweringType : public ASTLoweringBase\n   }\n \n private:\n-  ASTLoweringType ()\n-    : ASTLoweringBase (), translated (nullptr), translated_segment (nullptr)\n-  {}\n+  ASTLoweringType () : ASTLoweringBase (), translated (nullptr) {}\n \n   HIR::Type *translated;\n-  HIR::TypePathSegment *translated_segment;\n };\n \n class ASTLowerGenericParam : public ASTLoweringBase"}, {"sha": "c7222e2e9983f45fee0944f37cec6c42b9954cae", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9ba03360721158e2000f19f6f65896f5af88b0/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9ba03360721158e2000f19f6f65896f5af88b0/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=9d9ba03360721158e2000f19f6f65896f5af88b0", "patch": "@@ -363,5 +363,33 @@ ASTLoweringBase::lower_self (AST::SelfParam &self)\n \t\t\t self.get_is_mut (), self.get_locus ());\n }\n \n+void\n+ASTLowerTypePath::visit (AST::TypePathSegmentGeneric &segment)\n+{\n+  std::vector<HIR::GenericArgsBinding> binding_args; // TODO\n+\n+  std::string segment_name = segment.get_ident_segment ().as_string ();\n+  bool has_separating_scope_resolution\n+    = segment.get_separating_scope_resolution ();\n+\n+  std::vector<HIR::Lifetime> lifetime_args;\n+  for (auto &lifetime : segment.get_generic_args ().get_lifetime_args ())\n+    {\n+      HIR::Lifetime l = lower_lifetime (lifetime);\n+      lifetime_args.push_back (std::move (l));\n+    }\n+\n+  std::vector<std::unique_ptr<HIR::Type> > type_args;\n+  for (auto &type : segment.get_generic_args ().get_type_args ())\n+    {\n+      HIR::Type *t = ASTLoweringType::translate (type.get ());\n+      type_args.push_back (std::unique_ptr<HIR::Type> (t));\n+    }\n+\n+  translated_segment = new HIR::TypePathSegmentGeneric (\n+    segment_name, has_separating_scope_resolution, std::move (lifetime_args),\n+    std::move (type_args), std::move (binding_args), segment.get_locus ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "74969f9b70ada96476188a7a1cd6aea9d7dc007a", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d9ba03360721158e2000f19f6f65896f5af88b0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d9ba03360721158e2000f19f6f65896f5af88b0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=9d9ba03360721158e2000f19f6f65896f5af88b0", "patch": "@@ -2884,33 +2884,28 @@ class ImplBlock : public VisItem\n {\n   std::vector<std::unique_ptr<GenericParam> > generic_params;\n   std::unique_ptr<Type> impl_type;\n+  std::unique_ptr<TypePath> trait_ref;\n   WhereClause where_clause;\n   AST::AttrVec inner_attrs;\n   Location locus;\n   std::vector<std::unique_ptr<ImplItem> > impl_items;\n \n public:\n-  std::string as_string () const override;\n-\n-  // Returns whether inherent impl block has inherent impl items.\n-  bool has_impl_items () const { return !impl_items.empty (); }\n-\n-  // Mega-constructor\n   ImplBlock (Analysis::NodeMapping mappings,\n \t     std::vector<std::unique_ptr<ImplItem> > impl_items,\n \t     std::vector<std::unique_ptr<GenericParam> > generic_params,\n-\t     std::unique_ptr<Type> impl_type, WhereClause where_clause,\n+\t     std::unique_ptr<Type> impl_type,\n+\t     std::unique_ptr<TypePath> trait_ref, WhereClause where_clause,\n \t     Visibility vis, AST::AttrVec inner_attrs, AST::AttrVec outer_attrs,\n \t     Location locus)\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n       generic_params (std::move (generic_params)),\n-      impl_type (std::move (impl_type)),\n+      impl_type (std::move (impl_type)), trait_ref (std::move (trait_ref)),\n       where_clause (std::move (where_clause)),\n       inner_attrs (std::move (inner_attrs)), locus (locus),\n       impl_items (std::move (impl_items))\n   {}\n \n-  // Copy constructor with vector clone\n   ImplBlock (ImplBlock const &other)\n     : VisItem (other), impl_type (other.impl_type->clone_type ()),\n       where_clause (other.where_clause), inner_attrs (other.inner_attrs),\n@@ -2925,7 +2920,6 @@ class ImplBlock : public VisItem\n       impl_items.push_back (e->clone_inherent_impl_item ());\n   }\n \n-  // Overloaded assignment operator with vector clone\n   ImplBlock &operator= (ImplBlock const &other)\n   {\n     VisItem::operator= (other);\n@@ -2948,6 +2942,11 @@ class ImplBlock : public VisItem\n   ImplBlock (ImplBlock &&other) = default;\n   ImplBlock &operator= (ImplBlock &&other) = default;\n \n+  std::string as_string () const override;\n+\n+  // Returns whether inherent impl block has inherent impl items.\n+  bool has_impl_items () const { return !impl_items.empty (); }\n+\n   void accept_vis (HIRVisitor &vis) override;\n \n   std::vector<std::unique_ptr<ImplItem> > &get_impl_items ()\n@@ -2978,6 +2977,14 @@ class ImplBlock : public VisItem\n     return generic_params;\n   }\n \n+  bool has_trait_ref () const { return trait_ref != nullptr; }\n+\n+  std::unique_ptr<TypePath> &get_trait_ref ()\n+  {\n+    rust_assert (has_trait_ref ());\n+    return trait_ref;\n+  }\n+\n protected:\n   ImplBlock *clone_item_impl () const override { return new ImplBlock (*this); }\n };"}]}