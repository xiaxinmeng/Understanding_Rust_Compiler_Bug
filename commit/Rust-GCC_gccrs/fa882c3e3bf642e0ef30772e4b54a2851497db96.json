{"sha": "fa882c3e3bf642e0ef30772e4b54a2851497db96", "node_id": "C_kwDOANBUbNoAKGZhODgyYzNlM2JmNjQyZTBlZjMwNzcyZTRiNTRhMjg1MTQ5N2RiOTY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-01T19:22:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-01T19:42:04Z"}, "message": "rs6000: Fix up PCH on powerpc* [PR104323]\n\nAs mentioned in the PR and as can be seen on:\n--- gcc/testsuite/gcc.dg/pch/pr104323-1.c.jj\t2022-02-01 13:06:00.163192414 +0100\n+++ gcc/testsuite/gcc.dg/pch/pr104323-1.c\t2022-02-01 13:13:41.226712735 +0100\n@@ -0,0 +1,16 @@\n+/* PR target/104323 */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include \"pr104323-1.h\"\n+\n+__vector int a1 = { 100, 200, 300, 400 };\n+__vector int a2 = { 500, 600, 700, 800 };\n+__vector int r;\n+\n+int\n+main ()\n+{\n+  r = vec_add (a1, a2);\n+  return 0;\n+}\n--- gcc/testsuite/gcc.dg/pch/pr104323-1.hs.jj\t2022-02-01 13:06:03.180149978 +0100\n+++ gcc/testsuite/gcc.dg/pch/pr104323-1.hs\t2022-02-01 13:12:30.175706620 +0100\n@@ -0,0 +1,5 @@\n+/* PR target/104323 */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\ntestcase which I'm not including into testsuite because for some reason\nthe test fails on non-powerpc* targets (is done even on those and fails\nbecause of missing altivec.h etc.), PCH is broken on powerpc*-*-* since the\nnew builtin generator has been introduced.\nThe generator contains or emits comments like:\n  /* #### Cannot mark this as a GC root because only pointer types can\n     be marked as GTY((user)) and be GC roots.  All trees in here are\n     kept alive by other globals, so not a big deal.  Alternatively,\n     we could change the enum fields to ints and cast them in and out\n     to avoid requiring a GTY((user)) designation, but that seems\n     unnecessarily gross.  */\nHaving the fntypes stored in other GC roots can work fine for GC,\nggc_collect will then always mark them and so they won't disappear from\nthe tables, but it definitely doesn't work for PCH, which when the\narrays with fntype members aren't GTY marked means on PCH write we create\ncopies of those FUNCTION_TYPEs and store in *.gch that the GC roots should\nbe updated, but don't store that rs6000_builtin_info[?].fntype etc. should\nbe updated.  When PCH is read again, the blob is read at some other address,\nGC roots are updated, rs6000_builtin_info[?].fntype contains garbage\npointers (GC freed pointers with random data, or random unrelated types or\nother trees).\nThe following patch fixes that.  It stops any user markings because that\nis totally unnecessary, just skips fields we don't need to mark and adds\nGTY(()) to the 2 array variables.  We can get rid of all those global\nvars for the fn types, they can be now automatic vars.\nWith the patch we get\n  {\n    &rs6000_instance_info[0].fntype,\n    1 * (RS6000_INST_MAX),\n    sizeof (rs6000_instance_info[0]),\n    &gt_ggc_mx_tree_node,\n    &gt_pch_nx_tree_node\n  },\n  {\n    &rs6000_builtin_info[0].fntype,\n    1 * (RS6000_BIF_MAX),\n    sizeof (rs6000_builtin_info[0]),\n    &gt_ggc_mx_tree_node,\n    &gt_pch_nx_tree_node\n  },\nas the new roots which is exactly what we want and significantly more\ncompact than countless\n  {\n    &uv2di_ftype_pudi_usi,\n    1,\n    sizeof (uv2di_ftype_pudi_usi),\n    &gt_ggc_mx_tree_node,\n    &gt_pch_nx_tree_node\n  },\n  {\n    &uv2di_ftype_lg_puv2di,\n    1,\n    sizeof (uv2di_ftype_lg_puv2di),\n    &gt_ggc_mx_tree_node,\n    &gt_pch_nx_tree_node\n  },\n  {\n    &uv2di_ftype_lg_pudi,\n    1,\n    sizeof (uv2di_ftype_lg_pudi),\n    &gt_ggc_mx_tree_node,\n    &gt_pch_nx_tree_node\n  },\n  {\n    &uv2di_ftype_di_puv2di,\n    1,\n    sizeof (uv2di_ftype_di_puv2di),\n    &gt_ggc_mx_tree_node,\n    &gt_pch_nx_tree_node\n  },\ncases (822 of these instead of just those 4 shown).\n\n2022-02-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/104323\n\t* config/rs6000/t-rs6000 (EXTRA_GTYPE_DEPS): Append rs6000-builtins.h\n\trather than $(srcdir)/config/rs6000/rs6000-builtins.def.\n\t* config/rs6000/rs6000-gen-builtins.cc (write_decls): Don't use\n\tGTY((user)) for struct bifdata and struct ovlddata.  Instead add\n\tGTY((skip(\"\"))) to members with pointer and enum types that don't need\n\tto be tracked.  Add GTY(()) to rs6000_builtin_info and rs6000_instance_info\n\tdeclarations.  Don't emit gt_ggc_mx and gt_pch_nx declarations.\n\t(write_extern_fntype, write_fntype): Remove.\n\t(write_fntype_init): Emit the fntype vars as automatic vars instead\n\tof file scope ones.\n\t(write_header_file): Don't iterate with write_extern_fntype.\n\t(write_init_file): Don't iterate with write_fntype.  Don't emit\n\tgt_ggc_mx and gt_pch_nx definitions.", "tree": {"sha": "bff9b19b78e04418a9c7296fd152fe534f7a9222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bff9b19b78e04418a9c7296fd152fe534f7a9222"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa882c3e3bf642e0ef30772e4b54a2851497db96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa882c3e3bf642e0ef30772e4b54a2851497db96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa882c3e3bf642e0ef30772e4b54a2851497db96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa882c3e3bf642e0ef30772e4b54a2851497db96/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a3789786205376e3ba19fdefadd8937e8ac534e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a3789786205376e3ba19fdefadd8937e8ac534e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a3789786205376e3ba19fdefadd8937e8ac534e"}], "stats": {"total": 111, "additions": 22, "deletions": 89}, "files": [{"sha": "629ead9514071d513872d9c04bb584833a35fbcf", "filename": "gcc/config/rs6000/rs6000-gen-builtins.cc", "status": "modified", "additions": 21, "deletions": 88, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa882c3e3bf642e0ef30772e4b54a2851497db96/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa882c3e3bf642e0ef30772e4b54a2851497db96/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-gen-builtins.cc?ref=fa882c3e3bf642e0ef30772e4b54a2851497db96", "patch": "@@ -2255,20 +2255,20 @@ write_decls (void)\n   fprintf (header_file, \"};\\n\\n\");\n \n   fprintf (header_file, \"#define PPC_MAXRESTROPNDS 3\\n\");\n-  fprintf (header_file, \"struct GTY((user)) bifdata\\n\");\n+  fprintf (header_file, \"struct GTY(()) bifdata\\n\");\n   fprintf (header_file, \"{\\n\");\n-  fprintf (header_file, \"  const char *bifname;\\n\");\n-  fprintf (header_file, \"  bif_enable enable;\\n\");\n+  fprintf (header_file, \"  const char *GTY((skip(\\\"\\\"))) bifname;\\n\");\n+  fprintf (header_file, \"  bif_enable GTY((skip(\\\"\\\"))) enable;\\n\");\n   fprintf (header_file, \"  tree fntype;\\n\");\n-  fprintf (header_file, \"  insn_code icode;\\n\");\n+  fprintf (header_file, \"  insn_code GTY((skip(\\\"\\\"))) icode;\\n\");\n   fprintf (header_file, \"  int  nargs;\\n\");\n   fprintf (header_file, \"  int  bifattrs;\\n\");\n   fprintf (header_file, \"  int  restr_opnd[PPC_MAXRESTROPNDS];\\n\");\n-  fprintf (header_file, \"  restriction restr[PPC_MAXRESTROPNDS];\\n\");\n+  fprintf (header_file, \"  restriction GTY((skip(\\\"\\\"))) restr[PPC_MAXRESTROPNDS];\\n\");\n   fprintf (header_file, \"  int  restr_val1[PPC_MAXRESTROPNDS];\\n\");\n   fprintf (header_file, \"  int  restr_val2[PPC_MAXRESTROPNDS];\\n\");\n-  fprintf (header_file, \"  const char *attr_string;\\n\");\n-  fprintf (header_file, \"  rs6000_gen_builtins assoc_bif;\\n\");\n+  fprintf (header_file, \"  const char *GTY((skip(\\\"\\\"))) attr_string;\\n\");\n+  fprintf (header_file, \"  rs6000_gen_builtins GTY((skip(\\\"\\\"))) assoc_bif;\\n\");\n   fprintf (header_file, \"};\\n\\n\");\n \n   fprintf (header_file, \"#define bif_init_bit\\t\\t(0x00000001)\\n\");\n@@ -2343,21 +2343,15 @@ write_decls (void)\n \t   \"#define bif_is_ibmld(x)\\t((x).bifattrs & bif_ibmld_bit)\\n\");\n   fprintf (header_file, \"\\n\");\n \n-  /* #### Cannot mark this as a GC root because only pointer types can\n-     be marked as GTY((user)) and be GC roots.  All trees in here are\n-     kept alive by other globals, so not a big deal.  Alternatively,\n-     we could change the enum fields to ints and cast them in and out\n-     to avoid requiring a GTY((user)) designation, but that seems\n-     unnecessarily gross.  */\n   fprintf (header_file,\n-\t   \"extern bifdata rs6000_builtin_info[RS6000_BIF_MAX];\\n\\n\");\n+\t   \"extern GTY(()) bifdata rs6000_builtin_info[RS6000_BIF_MAX];\\n\\n\");\n \n-  fprintf (header_file, \"struct GTY((user)) ovlddata\\n\");\n+  fprintf (header_file, \"struct GTY(()) ovlddata\\n\");\n   fprintf (header_file, \"{\\n\");\n-  fprintf (header_file, \"  const char *bifname;\\n\");\n-  fprintf (header_file, \"  rs6000_gen_builtins bifid;\\n\");\n+  fprintf (header_file, \"  const char *GTY((skip(\\\"\\\"))) bifname;\\n\");\n+  fprintf (header_file, \"  rs6000_gen_builtins GTY((skip(\\\"\\\"))) bifid;\\n\");\n   fprintf (header_file, \"  tree fntype;\\n\");\n-  fprintf (header_file, \"  ovlddata *next;\\n\");\n+  fprintf (header_file, \"  ovlddata *GTY((skip(\\\"\\\"))) next;\\n\");\n   fprintf (header_file, \"};\\n\\n\");\n \n   fprintf (header_file, \"struct ovldrecord\\n\");\n@@ -2367,14 +2361,7 @@ write_decls (void)\n   fprintf (header_file, \"};\\n\\n\");\n \n   fprintf (header_file,\n-\t   \"/* #### Cannot mark this as a GC root because only pointer\\n\"\n-\t   \"   types can be marked as GTY((user)) and be GC roots.  All\\n\"\n-\t   \"   trees in here are kept alive by other globals, so not a big\\n\"\n-\t   \"   deal.  Alternatively, we could change the enum fields to ints\\n\"\n-\t   \"   and cast them in and out to avoid requiring a GTY((user))\\n\"\n-\t   \"   designation, but that seems unnecessarily gross.  */\\n\");\n-  fprintf (header_file,\n-\t   \"extern ovlddata rs6000_instance_info[RS6000_INST_MAX];\\n\");\n+\t   \"extern GTY(()) ovlddata rs6000_instance_info[RS6000_INST_MAX];\\n\");\n   fprintf (header_file, \"extern ovldrecord rs6000_overload_info[];\\n\\n\");\n \n   fprintf (header_file, \"extern void rs6000_init_generated_builtins ();\\n\\n\");\n@@ -2383,33 +2370,6 @@ write_decls (void)\n   fprintf (header_file,\n \t   \"extern tree rs6000_builtin_decl (unsigned, \"\n \t   \"bool ATTRIBUTE_UNUSED);\\n\\n\");\n-  fprintf (header_file,\n-\t   \"extern void gt_ggc_mx (bifdata *bd);\\n\");\n-  fprintf (header_file,\n-\t   \"extern void gt_pch_nx (bifdata *bd);\\n\");\n-  fprintf (header_file,\n-\t   \"extern void gt_pch_nx (bifdata *bd, gt_pointer_operator op, \"\n-\t   \"void *cookie);\\n\");\n-  fprintf (header_file,\n-\t   \"extern void gt_ggc_mx (ovlddata *od);\\n\");\n-  fprintf (header_file,\n-\t   \"extern void gt_pch_nx (ovlddata *od);\\n\");\n-  fprintf (header_file,\n-\t   \"extern void gt_pch_nx (ovlddata *od, gt_pointer_operator op, \"\n-\t   \"void *cookie);\\n\");\n-}\n-\n-/* Callback functions used for generating trees for function types.  */\n-void\n-write_extern_fntype (char *str)\n-{\n-  fprintf (header_file, \"extern GTY(()) tree %s;\\n\", str);\n-}\n-\n-void\n-write_fntype (char *str)\n-{\n-  fprintf (init_file, \"tree %s;\\n\", str);\n }\n \n /* Comparator for bsearch on the type map.  */\n@@ -2452,12 +2412,17 @@ write_fntype_init (char *str)\n   /* Avoid side effects of strtok on the original string by using a copy.  */\n   char *buf = strdup (str);\n \n+  if (tf_found || dfp_found)\n+    fprintf (init_file, \"  tree %s = NULL_TREE;\\n\", buf);\n+  else\n+    fprintf (init_file, \"  tree \");\n+\n   if (tf_found)\n-    fprintf (init_file, \"  if (float128_type_node)\\n  \");\n+    fprintf (init_file, \"  if (float128_type_node)\\n    \");\n   else if (dfp_found)\n-    fprintf (init_file, \"  if (dfloat64_type_node)\\n  \");\n+    fprintf (init_file, \"  if (dfloat64_type_node)\\n    \");\n \n-  fprintf (init_file, \"  %s\\n    = build_function_type_list (\", buf);\n+  fprintf (init_file, \"%s\\n    = build_function_type_list (\", buf);\n   tok = strtok (buf, \"_\");\n   write_type_node (tok, tf_found || dfp_found);\n   tok = strtok (0, \"_\");\n@@ -2491,8 +2456,6 @@ write_header_file (void)\n \n   write_decls ();\n \n-  /* Write function type list declarators to the header file.  */\n-  rbt_inorder_callback (&fntype_rbt, fntype_rbt.rbt_root, write_extern_fntype);\n   fprintf (header_file, \"\\n\");\n   fprintf (header_file, \"\\n#endif\\n\");\n \n@@ -2846,9 +2809,6 @@ write_init_file (void)\n   write_bif_static_init ();\n   write_ovld_static_init ();\n \n-  rbt_inorder_callback (&fntype_rbt, fntype_rbt.rbt_root, write_fntype);\n-  fprintf (init_file, \"\\n\");\n-\n   fprintf (init_file, \"void\\n\");\n   fprintf (init_file, \"rs6000_init_generated_builtins ()\\n\");\n   fprintf (init_file, \"{\\n\");\n@@ -2868,33 +2828,6 @@ write_init_file (void)\n \n   fprintf (init_file, \"}\\n\\n\");\n \n-  fprintf (init_file,\n-\t   \"void gt_ggc_mx (bifdata *bd)\\n\");\n-  fprintf (init_file,\n-\t   \"{\\n  gt_ggc_mx (bd->fntype);\\n}\\n\\n\");\n-  fprintf (init_file,\n-\t   \"void gt_pch_nx (bifdata *bd)\\n\");\n-  fprintf (init_file,\n-\t   \"{\\n  gt_pch_nx (bd->fntype);\\n}\\n\\n\");\n-  fprintf (init_file,\n-\t   \"void gt_pch_nx (bifdata *bd, gt_pointer_operator op, \"\n-\t   \"void *cookie)\\n\");\n-  fprintf (init_file,\n-\t   \"{\\n  op(&(bd->fntype), NULL, cookie);\\n}\\n\\n\");\n-  fprintf (init_file,\n-\t   \"void gt_ggc_mx (ovlddata *od)\\n\");\n-  fprintf (init_file,\n-\t   \"{\\n  gt_ggc_mx (od->fntype);\\n}\\n\\n\");\n-  fprintf (init_file,\n-\t   \"void gt_pch_nx (ovlddata *od)\\n\");\n-  fprintf (init_file,\n-\t   \"{\\n  gt_pch_nx (od->fntype);\\n}\\n\\n\");\n-  fprintf (init_file,\n-\t   \"void gt_pch_nx (ovlddata *od, gt_pointer_operator op, \"\n-\t   \"void *cookie)\\n\");\n-  fprintf (init_file,\n-\t   \"{\\n  op(&(od->fntype), NULL, cookie);\\n}\\n\");\n-\n   return 1;\n }\n "}, {"sha": "1a460d99c031be20dddb147499ce47860e35cf95", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa882c3e3bf642e0ef30772e4b54a2851497db96/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa882c3e3bf642e0ef30772e4b54a2851497db96/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=fa882c3e3bf642e0ef30772e4b54a2851497db96", "patch": "@@ -21,7 +21,7 @@\n TM_H += $(srcdir)/config/rs6000/rs6000-cpus.def\n TM_H += $(srcdir)/config/rs6000/rs6000-modes.h\n PASSES_EXTRA += $(srcdir)/config/rs6000/rs6000-passes.def\n-EXTRA_GTYPE_DEPS += $(srcdir)/config/rs6000/rs6000-builtins.def\n+EXTRA_GTYPE_DEPS += rs6000-builtins.h\n \n rs6000-pcrel-opt.o: $(srcdir)/config/rs6000/rs6000-pcrel-opt.cc\n \t$(COMPILE) $<"}]}