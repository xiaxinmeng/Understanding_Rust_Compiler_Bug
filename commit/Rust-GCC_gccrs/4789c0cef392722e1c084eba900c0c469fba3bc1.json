{"sha": "4789c0cef392722e1c084eba900c0c469fba3bc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc4OWMwY2VmMzkyNzIyZTFjMDg0ZWJhOTAwYzBjNDY5ZmJhM2JjMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-09-09T13:06:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-09-09T13:06:43Z"}, "message": "alias.c (addr_side_effect_eval): Use gen_int_mode with the mode of the associated gen_rtx_* call.\n\ngcc/\n\t* alias.c (addr_side_effect_eval): Use gen_int_mode with the mode\n\tof the associated gen_rtx_* call.\n\t* caller-save.c (init_caller_save): Likewise.\n\t* combine.c (find_split_point, make_extraction): Likewise.\n\t(make_compound_operation): Likewise.\n\t* dwarf2out.c (mem_loc_descriptor): Likewise.\n\t* explow.c (plus_constant, probe_stack_range): Likewise.\n\t* expmed.c (expand_mult_const): Likewise.\n\t* expr.c (emit_single_push_insn_1, do_tablejump): Likewise.\n\t* reload1.c (init_reload): Likewise.\n\t* valtrack.c (cleanup_auto_inc_dec): Likewise.\n\t* var-tracking.c (adjust_mems): Likewise.\n\t* modulo-sched.c (sms_schedule): Likewise, but use gen_rtx_GT\n\trather than gen_rtx_fmt_ee.\n\nFrom-SVN: r202391", "tree": {"sha": "b56dbab169263ce9ad963b7070c7c0593dd51aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b56dbab169263ce9ad963b7070c7c0593dd51aea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4789c0cef392722e1c084eba900c0c469fba3bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4789c0cef392722e1c084eba900c0c469fba3bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4789c0cef392722e1c084eba900c0c469fba3bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4789c0cef392722e1c084eba900c0c469fba3bc1/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a811f7cbad669cb3398ada5fd29cea19f7dff1d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a811f7cbad669cb3398ada5fd29cea19f7dff1d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a811f7cbad669cb3398ada5fd29cea19f7dff1d3"}], "stats": {"total": 102, "additions": 67, "deletions": 35}, "files": [{"sha": "b20987b98c54c7514a55e0ebac698d00ec8fb29d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -1,3 +1,20 @@\n+2013-09-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* alias.c (addr_side_effect_eval): Use gen_int_mode with the mode\n+\tof the associated gen_rtx_* call.\n+\t* caller-save.c (init_caller_save): Likewise.\n+\t* combine.c (find_split_point, make_extraction): Likewise.\n+\t(make_compound_operation): Likewise.\n+\t* dwarf2out.c (mem_loc_descriptor): Likewise.\n+\t* explow.c (plus_constant, probe_stack_range): Likewise.\n+\t* expmed.c (expand_mult_const): Likewise.\n+\t* expr.c (emit_single_push_insn_1, do_tablejump): Likewise.\n+\t* reload1.c (init_reload): Likewise.\n+\t* valtrack.c (cleanup_auto_inc_dec): Likewise.\n+\t* var-tracking.c (adjust_mems): Likewise.\n+\t* modulo-sched.c (sms_schedule): Likewise, but use gen_rtx_GT\n+\trather than gen_rtx_fmt_ee.\n+\n 2013-09-09  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/58294"}, {"sha": "19fe8d840a8f058ce51009c1cc046ca783f0eef9", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -1895,7 +1895,7 @@ addr_side_effect_eval (rtx addr, int size, int n_refs)\n \n   if (offset)\n     addr = gen_rtx_PLUS (GET_MODE (addr), XEXP (addr, 0),\n-\t\t\t GEN_INT (offset));\n+\t\t\t gen_int_mode (offset, GET_MODE (addr)));\n   else\n     addr = XEXP (addr, 0);\n   addr = canon_rtx (addr);"}, {"sha": "b134cde11315f730fe5552e1a293fe0c1c03b26e", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -239,7 +239,7 @@ init_caller_save (void)\n \n   for (offset = 1 << (HOST_BITS_PER_INT / 2); offset; offset >>= 1)\n     {\n-      address = gen_rtx_PLUS (Pmode, addr_reg, GEN_INT (offset));\n+      address = gen_rtx_PLUS (Pmode, addr_reg, gen_int_mode (offset, Pmode));\n \n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \tif (regno_save_mode[i][1] != VOIDmode"}, {"sha": "720b8f547e8704ddfecdae86a12cbd3c9845d4ef", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -4725,13 +4725,14 @@ find_split_point (rtx *loc, rtx insn, bool set_src)\n \n \t  if (unsignedp && len <= 8)\n \t    {\n+\t      unsigned HOST_WIDE_INT mask\n+\t\t= ((unsigned HOST_WIDE_INT) 1 << len) - 1;\n \t      SUBST (SET_SRC (x),\n \t\t     gen_rtx_AND (mode,\n \t\t\t\t  gen_rtx_LSHIFTRT\n \t\t\t\t  (mode, gen_lowpart (mode, inner),\n \t\t\t\t   GEN_INT (pos)),\n-\t\t\t\t  GEN_INT (((unsigned HOST_WIDE_INT) 1 << len)\n-\t\t\t\t\t   - 1)));\n+\t\t\t\t  gen_int_mode (mask, mode)));\n \n \t      split = find_split_point (&SET_SRC (x), insn, true);\n \t      if (split && split != &SET_SRC (x))\n@@ -4814,9 +4815,11 @@ find_split_point (rtx *loc, rtx insn, bool set_src)\n \t  enum machine_mode mode = GET_MODE (x);\n \t  unsigned HOST_WIDE_INT this_int = INTVAL (XEXP (XEXP (x, 1), 1));\n \t  HOST_WIDE_INT other_int = trunc_int_for_mode (-this_int, mode);\n-\t  SUBST (*loc, gen_rtx_PLUS (mode, gen_rtx_MULT (mode,\n-\t\t\t\t\t\t\t XEXP (XEXP (x, 1), 0),\n-\t\t\t\t\t\t\t GEN_INT (other_int)),\n+\t  SUBST (*loc, gen_rtx_PLUS (mode,\n+\t\t\t\t     gen_rtx_MULT (mode,\n+\t\t\t\t\t\t   XEXP (XEXP (x, 1), 0),\n+\t\t\t\t\t\t   gen_int_mode (other_int,\n+\t\t\t\t\t\t\t\t mode)),\n \t\t\t\t     XEXP (x, 0)));\n \t  return find_split_point (loc, insn, set_src);\n \t}\n@@ -7258,7 +7261,9 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n \tpos = width - len - pos;\n       else\n \tpos_rtx\n-\t  = gen_rtx_MINUS (GET_MODE (pos_rtx), GEN_INT (width - len), pos_rtx);\n+\t  = gen_rtx_MINUS (GET_MODE (pos_rtx),\n+\t\t\t   gen_int_mode (width - len, GET_MODE (pos_rtx)),\n+\t\t\t   pos_rtx);\n       /* POS may be less than 0 now, but we check for that below.\n \t Note that it can only be less than 0 if !MEM_P (inner).  */\n     }\n@@ -7490,7 +7495,7 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n \t      multval = -multval;\n \t    }\n \t  multval = trunc_int_for_mode (multval, mode);\n-\t  new_rtx = gen_rtx_MULT (mode, new_rtx, GEN_INT (multval));\n+\t  new_rtx = gen_rtx_MULT (mode, new_rtx, gen_int_mode (multval, mode));\n \t}\n       break;\n "}, {"sha": "7bf739d154f75d477ae498fb0706a96b607875c5", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -12386,9 +12386,10 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n       /* Turn these into a PLUS expression and fall into the PLUS code\n \t below.  */\n       rtl = gen_rtx_PLUS (mode, XEXP (rtl, 0),\n-\t\t\t  GEN_INT (GET_CODE (rtl) == PRE_INC\n-\t\t\t\t   ? GET_MODE_UNIT_SIZE (mem_mode)\n-\t\t\t\t   : -GET_MODE_UNIT_SIZE (mem_mode)));\n+\t\t\t  gen_int_mode (GET_CODE (rtl) == PRE_INC\n+\t\t\t\t\t? GET_MODE_UNIT_SIZE (mem_mode)\n+\t\t\t\t\t: -GET_MODE_UNIT_SIZE (mem_mode),\n+\t\t\t\t\tmode));\n \n       /* ... fall through ...  */\n "}, {"sha": "a69240da40e5e210217e6a54ea492a70f3cc27c4", "filename": "gcc/explow.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -186,7 +186,7 @@ plus_constant (enum machine_mode mode, rtx x, HOST_WIDE_INT c)\n     }\n \n   if (c != 0)\n-    x = gen_rtx_PLUS (mode, x, GEN_INT (c));\n+    x = gen_rtx_PLUS (mode, x, gen_int_mode (c, mode));\n \n   if (GET_CODE (x) == SYMBOL_REF || GET_CODE (x) == LABEL_REF)\n     return x;\n@@ -1641,7 +1641,8 @@ probe_stack_range (HOST_WIDE_INT first, rtx size)\n       /* TEST_ADDR = SP + FIRST.  */\n       test_addr = force_operand (gen_rtx_fmt_ee (STACK_GROW_OP, Pmode,\n \t\t\t\t\t \t stack_pointer_rtx,\n-\t\t\t\t\t \t GEN_INT (first)), NULL_RTX);\n+\t\t\t\t\t\t gen_int_mode (first, Pmode)),\n+\t\t\t\t NULL_RTX);\n \n       /* LAST_ADDR = SP + FIRST + ROUNDED_SIZE.  */\n       last_addr = force_operand (gen_rtx_fmt_ee (STACK_GROW_OP, Pmode,"}, {"sha": "dfaa123d58708b43c35c34459a73212b8e1f43cf", "filename": "gcc/expmed.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -3006,7 +3006,8 @@ expand_mult_const (enum machine_mode mode, rtx op0, HOST_WIDE_INT val,\n \n           insn = get_last_insn ();\n           set_dst_reg_note (insn, REG_EQUAL,\n-\t\t\t    gen_rtx_MULT (nmode, tem, GEN_INT (val_so_far)),\n+\t\t\t    gen_rtx_MULT (nmode, tem,\n+\t\t\t\t\t  gen_int_mode (val_so_far, nmode)),\n \t\t\t    accum_inner);\n \t}\n     }"}, {"sha": "dfe5b3fdf1aba3d70a31e7332f8ecccdf90c6a8f", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -3926,18 +3926,20 @@ emit_single_push_insn_1 (enum machine_mode mode, rtx x, tree type)\n \t   previous value.  */\n \toffset -= (HOST_WIDE_INT) rounded_size;\n #endif\n-      dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (offset));\n+      dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n+\t\t\t\tgen_int_mode (offset, Pmode));\n     }\n   else\n     {\n #ifdef STACK_GROWS_DOWNWARD\n       /* ??? This seems wrong if STACK_PUSH_CODE == POST_DEC.  */\n       dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\tGEN_INT (-(HOST_WIDE_INT) rounded_size));\n+\t\t\t\tgen_int_mode (-(HOST_WIDE_INT) rounded_size,\n+\t\t\t\t\t      Pmode));\n #else\n       /* ??? This seems wrong if STACK_PUSH_CODE == POST_INC.  */\n       dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\tGEN_INT (rounded_size));\n+\t\t\t\tgen_int_mode (rounded_size, Pmode));\n #endif\n       dest_addr = gen_rtx_PRE_MODIFY (Pmode, stack_pointer_rtx, dest_addr);\n     }\n@@ -11028,10 +11030,11 @@ do_tablejump (rtx index, enum machine_mode mode, rtx range, rtx table_label,\n      GET_MODE_SIZE, because this indicates how large insns are.  The other\n      uses should all be Pmode, because they are addresses.  This code\n      could fail if addresses and insns are not the same size.  */\n-  index = gen_rtx_PLUS (Pmode,\n-\t\t\tgen_rtx_MULT (Pmode, index,\n-\t\t\t\t      GEN_INT (GET_MODE_SIZE (CASE_VECTOR_MODE))),\n-\t\t\tgen_rtx_LABEL_REF (Pmode, table_label));\n+  index = gen_rtx_PLUS\n+    (Pmode,\n+     gen_rtx_MULT (Pmode, index,\n+\t\t   gen_int_mode (GET_MODE_SIZE (CASE_VECTOR_MODE), Pmode)),\n+     gen_rtx_LABEL_REF (Pmode, table_label));\n #ifdef PIC_CASE_VECTOR_ADDRESS\n   if (flag_pic)\n     index = PIC_CASE_VECTOR_ADDRESS (index);"}, {"sha": "a1d0999fd2fef57d24a9c020af93e8b76f7af999", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -1715,8 +1715,9 @@ sms_schedule (void)\n           /* case the BCT count is not known , Do loop-versioning */\n \t  if (count_reg && ! count_init)\n             {\n-\t      rtx comp_rtx = gen_rtx_fmt_ee (GT, VOIDmode, count_reg,\n-\t  \t\t\t\t     GEN_INT(stage_count));\n+\t      rtx comp_rtx = gen_rtx_GT (VOIDmode, count_reg,\n+\t\t\t\t\t gen_int_mode (stage_count,\n+\t\t\t\t\t\t       GET_MODE (count_reg)));\n \t      unsigned prob = (PROB_SMS_ENOUGH_ITERATIONS\n \t\t\t       * REG_BR_PROB_BASE) / 100;\n "}, {"sha": "db183819c851bb73b215ae4dce985e2af805c7fb", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -435,7 +435,7 @@ init_reload (void)\n \t\t   gen_rtx_PLUS (Pmode,\n \t\t\t\t gen_rtx_REG (Pmode,\n \t\t\t\t\t      LAST_VIRTUAL_REGISTER + 1),\n-\t\t\t\t GEN_INT (4)));\n+\t\t\t\t gen_int_mode (4, Pmode)));\n   spill_indirect_levels = 0;\n \n   while (memory_address_p (QImode, tem))"}, {"sha": "c61c11704e4fbdb26b7d64cf585ec60f88483411", "filename": "gcc/valtrack.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -93,9 +93,10 @@ cleanup_auto_inc_dec (rtx src, enum machine_mode mem_mode ATTRIBUTE_UNUSED)\n       gcc_assert (mem_mode != VOIDmode && mem_mode != BLKmode);\n       return gen_rtx_PLUS (GET_MODE (x),\n \t\t\t   cleanup_auto_inc_dec (XEXP (x, 0), mem_mode),\n-\t\t\t   GEN_INT (code == PRE_INC\n-\t\t\t\t    ? GET_MODE_SIZE (mem_mode)\n-\t\t\t\t    : -GET_MODE_SIZE (mem_mode)));\n+\t\t\t   gen_int_mode (code == PRE_INC\n+\t\t\t\t\t ? GET_MODE_SIZE (mem_mode)\n+\t\t\t\t\t : -GET_MODE_SIZE (mem_mode),\n+\t\t\t\t\t GET_MODE (x)));\n \n     case POST_INC:\n     case POST_DEC:"}, {"sha": "6f8b08dfcc25a37cb84cd97c72315fde80add1e4", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4789c0cef392722e1c084eba900c0c469fba3bc1/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=4789c0cef392722e1c084eba900c0c469fba3bc1", "patch": "@@ -1045,20 +1045,22 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n     case PRE_INC:\n     case PRE_DEC:\n       addr = gen_rtx_PLUS (GET_MODE (loc), XEXP (loc, 0),\n-\t\t\t   GEN_INT (GET_CODE (loc) == PRE_INC\n-\t\t\t\t    ? GET_MODE_SIZE (amd->mem_mode)\n-\t\t\t\t    : -GET_MODE_SIZE (amd->mem_mode)));\n+\t\t\t   gen_int_mode (GET_CODE (loc) == PRE_INC\n+\t\t\t\t\t ? GET_MODE_SIZE (amd->mem_mode)\n+\t\t\t\t\t : -GET_MODE_SIZE (amd->mem_mode),\n+\t\t\t\t\t GET_MODE (loc)));\n     case POST_INC:\n     case POST_DEC:\n       if (addr == loc)\n \taddr = XEXP (loc, 0);\n       gcc_assert (amd->mem_mode != VOIDmode && amd->mem_mode != BLKmode);\n       addr = simplify_replace_fn_rtx (addr, old_rtx, adjust_mems, data);\n       tem = gen_rtx_PLUS (GET_MODE (loc), XEXP (loc, 0),\n-\t\t\t   GEN_INT ((GET_CODE (loc) == PRE_INC\n-\t\t\t\t     || GET_CODE (loc) == POST_INC)\n-\t\t\t\t    ? GET_MODE_SIZE (amd->mem_mode)\n-\t\t\t\t    : -GET_MODE_SIZE (amd->mem_mode)));\n+\t\t\t  gen_int_mode ((GET_CODE (loc) == PRE_INC\n+\t\t\t\t\t || GET_CODE (loc) == POST_INC)\n+\t\t\t\t\t? GET_MODE_SIZE (amd->mem_mode)\n+\t\t\t\t\t: -GET_MODE_SIZE (amd->mem_mode),\n+\t\t\t\t\tGET_MODE (loc)));\n       amd->side_effects = alloc_EXPR_LIST (0,\n \t\t\t\t\t   gen_rtx_SET (VOIDmode,\n \t\t\t\t\t\t\tXEXP (loc, 0),"}]}