{"sha": "c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkYjlhNzc1YjEyYWFmZDQ5ODVmNDFjZmQwMjEwZTRlMWY3MDdiMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-03-27T09:03:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-03-27T09:03:10Z"}, "message": "type_traits (result_of): Fix handling of cv-quals.\n\n\t* include/std/type_traits (result_of): Fix handling of cv-quals.\n\t* testsuite/20_util/result_of/1.cc: New.\n\t* testsuite/20_util/result_of/2.cc: New.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n\tline numbers.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r185845", "tree": {"sha": "20e7a71d8a93c397d6876dd18e4c19c5e0c85dfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20e7a71d8a93c397d6876dd18e4c19c5e0c85dfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e578696decfb9bb197ee899d3922b7448c7fb3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e578696decfb9bb197ee899d3922b7448c7fb3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e578696decfb9bb197ee899d3922b7448c7fb3a"}], "stats": {"total": 146, "additions": 127, "deletions": 19}, "files": [{"sha": "1020c19f0bef83b5e6b0a97f840a0286a9ba2b15", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "patch": "@@ -1,3 +1,15 @@\n+2012-03-27  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/type_traits (result_of): Fix handling of cv-quals.\n+\t* testsuite/20_util/result_of/1.cc: New.\n+\t* testsuite/20_util/result_of/2.cc: New.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n+\tline numbers.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n 2012-03-23  David S. Miller  <davem@davemloft.net>\n \n \t* config/abi/post/sparc-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "41022630837d684ec9b43fe3fb64f4e0ef99d27d", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "patch": "@@ -1,6 +1,7 @@\n // C++11 type_traits -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -1793,6 +1794,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Tp>\n \tstatic _Tp _S_get(const _Class&);\n+      template<typename _Tp>\n+\tstatic _Tp _S_get(const volatile _Class&);\n       template<typename _Tp>\n \tstatic decltype(*std::declval<_Tp>()) _S_get(...);\n         \n@@ -1813,6 +1816,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Tp>\n \tstatic _Tp _S_get(const _Class&);\n+      template<typename _Tp>\n+\tstatic _Tp _S_get(const volatile _Class&);\n       template<typename _Tp>\n \tstatic decltype(*std::declval<_Tp>()) _S_get(...);\n         \n@@ -1836,22 +1841,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _MemPtr, typename _Arg>\n     struct _Result_of_impl<true, false, _MemPtr, _Arg>\n-    : _Result_of_memobj<typename remove_reference<_MemPtr>::type, _Arg>\n-    {\n-      typedef typename _Result_of_memobj<\n-\ttypename remove_reference<_MemPtr>::type, _Arg>::__type\n-\t__type;\n-    };\n+    : _Result_of_memobj<typename decay<_MemPtr>::type, _Arg>\n+    { };\n \n   template<typename _MemPtr, typename _Arg, typename... _ArgTypes>\n     struct _Result_of_impl<false, true, _MemPtr, _Arg, _ArgTypes...>\n-    : _Result_of_memfun<typename remove_reference<_MemPtr>::type, _Arg,\n-                        _ArgTypes...>\n-    {\n-      typedef typename _Result_of_memfun<\n-\ttypename remove_reference<_MemPtr>::type, _Arg, _ArgTypes...>::__type\n-\t__type;\n-    };\n+    : _Result_of_memfun<typename decay<_MemPtr>::type, _Arg, _ArgTypes...>\n+    { };\n \n   template<typename _Functor, typename... _ArgTypes>\n     struct result_of<_Functor(_ArgTypes...)>"}, {"sha": "eafbe5f6666b7a31e844698d1b6da6532eed9355", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1776 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1777 }\n \n #include <utility>\n "}, {"sha": "6358d72c4a510a945071be7aaca3528ee4b4a3cf", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1565 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1529 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1566 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1530 }"}, {"sha": "d9a0f178f6c2bde4a5c056a1bc6d768ba253a9c6", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1483 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1447 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1484 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1448 }"}, {"sha": "0d53f7cfcfab76e507f2c1bb3d3d04ec405e2893", "filename": "libstdc++-v3/testsuite/20_util/result_of/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fresult_of%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fresult_of%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fresult_of%2F1.cc?ref=c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <functional>\n+#include <type_traits>\n+\n+struct X {\n+  int i;\n+  void f1() { }\n+  void f2() volatile { }\n+};\n+\n+typedef int X::*pm;\n+typedef void (X::*pmf1)();\n+typedef void (X::*pmf2)() volatile;\n+\n+typedef std::result_of<pm const&(X&)>::type result;\n+static_assert(std::is_same<result, int&>::value,\n+              \"invoking cv-qualified pointer-to-member-object\");\n+\n+typedef std::result_of<pmf1 const&(X&)>::type result1;\n+static_assert(std::is_void<result1>::value,\n+              \"invoking cv-qualified pointer-to-member-function\");\n+\n+typedef std::result_of<pmf2 const&(X&)>::type result2;\n+static_assert(std::is_void<result2>::value,\n+              \"invoking cv-qualified pointer-to-member-function\");\n+\n+typedef std::result_of<pm(volatile X&)>::type result3;\n+static_assert(std::is_same<result3, volatile int&>::value,\n+              \"invoking pointer-to-member-object on volatile object\");\n+\n+typedef std::result_of<pmf2(volatile X&)>::type result4;\n+static_assert(std::is_void<result4>::value,\n+              \"invoking pointer-to-member-function on volatile object\");\n+"}, {"sha": "9fc80f7ccb1915dbddcaab209566fe71696f71c8", "filename": "libstdc++-v3/testsuite/20_util/result_of/2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fresult_of%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4db9a775b12aafd4985f41cfd0210e4e1f707b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fresult_of%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fresult_of%2F2.cc?ref=c4db9a775b12aafd4985f41cfd0210e4e1f707b3", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <memory>\n+\n+using std::is_same;\n+using std::result_of;\n+using std::unique_ptr;\n+\n+// Taken from example in [meta.trans.other]\n+\n+typedef bool (&PF1)();\n+typedef short (*PF2)(long);\n+struct S {\n+  operator PF2() const;\n+  double operator()(char, int&);\n+  void fn(long) const;\n+  char data;\n+};\n+\n+typedef void (S::*PMF)(long) const;\n+typedef char S::*PMD;\n+\n+static_assert( is_same<result_of<S(int)>::type, short>::value, \"!\");\n+static_assert( is_same<result_of<S&(unsigned char, int&)>::type, double>::value, \"!\");\n+static_assert( is_same<result_of<PF1()>::type, bool>::value, \"!\");\n+static_assert( is_same<result_of<PMF(unique_ptr<S>, int)>::type, void>::value, \"!\");\n+static_assert( is_same<result_of<PMD(S)>::type, char&&>::value, \"!\");\n+static_assert( is_same<result_of<PMD(const S*)>::type, const char&>::value, \"!\");"}]}