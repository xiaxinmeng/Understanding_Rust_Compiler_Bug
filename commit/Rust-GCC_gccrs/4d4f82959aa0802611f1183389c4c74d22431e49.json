{"sha": "4d4f82959aa0802611f1183389c4c74d22431e49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0ZjgyOTU5YWEwODAyNjExZjExODMzODljNGM3NGQyMjQzMWU0OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-16T17:18:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-16T19:25:09Z"}, "message": "libstdc++: Simplify built-in detection in <utility>\n\nNow that GCC supports __has_builtin there is no need to test whether\nit's defined, we can just use it unconditionally.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/utility: Use __has_builtin without checking if\n\tit's defined.", "tree": {"sha": "b9e3b2ff64247297e6785b321bddf52be5a41c63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9e3b2ff64247297e6785b321bddf52be5a41c63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d4f82959aa0802611f1183389c4c74d22431e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4f82959aa0802611f1183389c4c74d22431e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4f82959aa0802611f1183389c4c74d22431e49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4f82959aa0802611f1183389c4c74d22431e49/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "767537a8b027bcb5807bb45b0268c5da98c2c7a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767537a8b027bcb5807bb45b0268c5da98c2c7a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767537a8b027bcb5807bb45b0268c5da98c2c7a0"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "61573f42f3fad90f87c7d73f4594e0456eba0751", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d4f82959aa0802611f1183389c4c74d22431e49/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d4f82959aa0802611f1183389c4c74d22431e49/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=4d4f82959aa0802611f1183389c4c74d22431e49", "patch": "@@ -297,27 +297,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // extract the elements in a tuple.\n   template<size_t... _Indexes> struct _Index_tuple { };\n \n-#ifdef __has_builtin\n-# if __has_builtin(__make_integer_seq)\n-#  define _GLIBCXX_USE_MAKE_INTEGER_SEQ 1\n-# endif\n-#endif\n-\n   // Builds an _Index_tuple<0, 1, 2, ..., _Num-1>.\n   template<size_t _Num>\n     struct _Build_index_tuple\n     {\n-#if _GLIBCXX_USE_MAKE_INTEGER_SEQ\n+#if __has_builtin(__make_integer_seq)\n       template<typename, size_t... _Indices>\n         using _IdxTuple = _Index_tuple<_Indices...>;\n \n+      // Clang defines __make_integer_seq for this purpose.\n       using __type = __make_integer_seq<_IdxTuple, size_t, _Num>;\n #else\n+      // For GCC and other compilers, use __integer_pack instead.\n       using __type = _Index_tuple<__integer_pack(_Num)...>;\n #endif\n     };\n \n-#if __cplusplus > 201103L\n+#if __cplusplus >= 201402L\n \n #define __cpp_lib_integer_sequence 201304\n \n@@ -332,14 +328,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// Alias template make_integer_sequence\n   template<typename _Tp, _Tp _Num>\n     using make_integer_sequence\n-#if _GLIBCXX_USE_MAKE_INTEGER_SEQ\n+#if __has_builtin(__make_integer_seq)\n       = __make_integer_seq<integer_sequence, _Tp, _Num>;\n #else\n       = integer_sequence<_Tp, __integer_pack(_Num)...>;\n #endif\n \n-#undef _GLIBCXX_USE_MAKE_INTEGER_SEQ\n-\n   /// Alias template index_sequence\n   template<size_t... _Idx>\n     using index_sequence = integer_sequence<size_t, _Idx...>;"}]}