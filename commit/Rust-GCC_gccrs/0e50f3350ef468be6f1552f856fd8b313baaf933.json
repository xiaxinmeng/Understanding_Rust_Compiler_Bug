{"sha": "0e50f3350ef468be6f1552f856fd8b313baaf933", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU1MGYzMzUwZWY0NjhiZTZmMTU1MmY4NTZmZDhiMzEzYmFhZjkzMw==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@kit.edu", "date": "2010-03-22T17:06:50Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2010-03-22T17:06:50Z"}, "message": "numeric (inner_product, [...]): Precede subsequent call with _GLIBCXX_STD_P:: to avoid ambiguity between...\n\n2010-03-22  Johannes Singler  <singler@kit.edu>\n\n        * include/parallel/numeric (inner_product, partial_sum):\n        Precede subsequent call with _GLIBCXX_STD_P:: to avoid ambiguity\n        between __gnu_parallel:: and std::\n        * include/parallel/algobase.h (equal): Likewise.\n        * include/parallel/algo.h (find_first_of, search_n, merge, nth_element,\n        partial_sort, max_element, min_element): Likewise.\n        * include/parallel/partial_sum.h (__parallel_partial_sum_linear):\n        Qualify accumulate call with __gnu_parallel::.\n\nFrom-SVN: r157643", "tree": {"sha": "ae4ed1d607f661d9a31336077ca79200f24cde25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae4ed1d607f661d9a31336077ca79200f24cde25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e50f3350ef468be6f1552f856fd8b313baaf933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e50f3350ef468be6f1552f856fd8b313baaf933", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e50f3350ef468be6f1552f856fd8b313baaf933", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e50f3350ef468be6f1552f856fd8b313baaf933/comments", "author": null, "committer": null, "parents": [{"sha": "047550e9f62c57511d6e88da4e4f4f8031929b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047550e9f62c57511d6e88da4e4f4f8031929b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047550e9f62c57511d6e88da4e4f4f8031929b2e"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "36e44c3e746939737b138c847d2119f08c5db34d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50f3350ef468be6f1552f856fd8b313baaf933/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50f3350ef468be6f1552f856fd8b313baaf933/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e50f3350ef468be6f1552f856fd8b313baaf933", "patch": "@@ -1,3 +1,14 @@\n+2010-03-22  Johannes Singler  <singler@kit.edu>\n+\n+        * include/parallel/numeric (inner_product, partial_sum):\n+        Precede subsequent call with _GLIBCXX_STD_P:: to avoid ambiguity \n+        between __gnu_parallel:: and std::\n+        * include/parallel/algobase.h (equal): Likewise.\n+        * include/parallel/algo.h (find_first_of, search_n, merge, nth_element,\n+        partial_sort, max_element, min_element): Likewise.\n+        * include/parallel/partial_sum.h (__parallel_partial_sum_linear):\n+        Qualify accumulate call with __gnu_parallel::.\n+\n 2010-03-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/parallel/base.h (_PseudoSequence): Do not forward declare."}, {"sha": "cc2fc679bcf5a588633b30d14003ee81955c0c61", "filename": "libstdc++-v3/include/parallel/algo.h", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50f3350ef468be6f1552f856fd8b313baaf933/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50f3350ef468be6f1552f856fd8b313baaf933/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgo.h?ref=0e50f3350ef468be6f1552f856fd8b313baaf933", "patch": "@@ -292,8 +292,8 @@ namespace __parallel\n       typedef typename _IIterTraits::value_type _IValueType;\n       typedef typename iteratorf_traits::value_type _FValueType;\n \n-      return find_first_of(__begin1, __end1, __begin2, __end2, __gnu_parallel::\n-                           _EqualTo<_IValueType, _FValueType>());\n+      return _GLIBCXX_STD_P::find_first_of(__begin1, __end1, __begin2, __end2,\n+                         __gnu_parallel::_EqualTo<_IValueType, _FValueType>());\n     }\n \n   // Sequential fallback\n@@ -1160,7 +1160,7 @@ namespace __parallel\n              const _Tp& __val)\n     {\n       typedef typename iterator_traits<_FIterator>::value_type _ValueType;\n-      return search_n(__begin, __end, __count, __val,\n+      return _GLIBCXX_STD_P::search_n(__begin, __end, __count, __val,\n                       __gnu_parallel::_EqualTo<_ValueType, _Tp>());\n     }\n \n@@ -2086,8 +2086,8 @@ namespace __parallel\n       typedef typename _Iterator1Traits::value_type _ValueType1;\n       typedef typename _Iterator2Traits::value_type _ValueType2;\n \n-      return merge(__begin1, __end1, __begin2, __end2, __result, \n-                   __gnu_parallel::_Less<_ValueType1, _ValueType2>());\n+      return _GLIBCXX_STD_P::merge(__begin1, __end1, __begin2, __end2,\n+                  __result, __gnu_parallel::_Less<_ValueType1, _ValueType2>());\n     }\n \n   // Sequential fallback\n@@ -2128,7 +2128,8 @@ namespace __parallel\n     {\n       typedef iterator_traits<_RAIter> _TraitsType;\n       typedef typename _TraitsType::value_type _ValueType;\n-      nth_element(__begin, __nth, __end, std::less<_ValueType>());\n+      _GLIBCXX_STD_P::nth_element(__begin, __nth, __end,\n+                                  std::less<_ValueType>());\n     }\n \n   // Sequential fallback\n@@ -2170,7 +2171,8 @@ namespace __parallel\n     {\n       typedef iterator_traits<_RAIter> _TraitsType;\n       typedef typename _TraitsType::value_type _ValueType;\n-      partial_sort(__begin, __middle, __end, std::less<_ValueType>());\n+      _GLIBCXX_STD_P::partial_sort(__begin, __middle, __end,\n+                                   std::less<_ValueType>());\n     }\n \n   // Sequential fallback\n@@ -2239,7 +2241,8 @@ namespace __parallel\n     max_element(_FIterator __begin, _FIterator __end)\n     {\n       typedef typename iterator_traits<_FIterator>::value_type _ValueType;\n-      return max_element(__begin, __end, std::less<_ValueType>());\n+      return _GLIBCXX_STD_P::max_element(__begin, __end,\n+                                         std::less<_ValueType>());\n     }\n \n   // Public interface\n@@ -2330,7 +2333,8 @@ namespace __parallel\n     min_element(_FIterator __begin, _FIterator __end)\n     {\n       typedef typename iterator_traits<_FIterator>::value_type _ValueType;\n-      return min_element(__begin, __end, std::less<_ValueType>());\n+      return _GLIBCXX_STD_P::min_element(__begin, __end,\n+                                         std::less<_ValueType>());\n     }\n \n   // Public interface"}, {"sha": "9cc81bd2aaa8376fcbc6a04833ee34084a1c3dff", "filename": "libstdc++-v3/include/parallel/algobase.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50f3350ef468be6f1552f856fd8b313baaf933/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50f3350ef468be6f1552f856fd8b313baaf933/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Falgobase.h?ref=0e50f3350ef468be6f1552f856fd8b313baaf933", "patch": "@@ -141,14 +141,20 @@ namespace __parallel\n   template<typename _IIter1, typename _IIter2>\n     inline bool\n     equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2)\n-    { return mismatch(__begin1, __end1, __begin2).first == __end1; }\n+    {\n+      return _GLIBCXX_STD_P::mismatch(__begin1, __end1, __begin2).first\n+              == __end1;\n+    }\n \n   // Public interface\n   template<typename _IIter1, typename _IIter2, typename _Predicate>\n     inline bool\n     equal(_IIter1 __begin1, _IIter1 __end1, _IIter2 __begin2, \n           _Predicate __pred)\n-    { return mismatch(__begin1, __end1, __begin2, __pred).first == __end1; }\n+    {\n+      return _GLIBCXX_STD_P::mismatch(__begin1, __end1, __begin2, __pred).first\n+              == __end1;\n+    }\n \n   // Sequential fallback\n   template<typename _IIter1, typename _IIter2>"}, {"sha": "7ba44d21e33454bae620e764a221688272141c95", "filename": "libstdc++-v3/include/parallel/numeric", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50f3350ef468be6f1552f856fd8b313baaf933/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50f3350ef468be6f1552f856fd8b313baaf933/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fnumeric?ref=0e50f3350ef468be6f1552f856fd8b313baaf933", "patch": "@@ -283,7 +283,7 @@ namespace __parallel\n       typedef typename\n         __gnu_parallel::_Multiplies<_ValueType1, _ValueType2>::result_type\n         _MultipliesResultType;\n-      return inner_product(__first1, __last1, __first2, __init,\n+      return _GLIBCXX_STD_P::inner_product(__first1, __last1, __first2, __init,\n                            __gnu_parallel::_Plus<_Tp, _MultipliesResultType>(),\n                            __gnu_parallel::\n                            _Multiplies<_ValueType1, _ValueType2>(),\n@@ -303,7 +303,7 @@ namespace __parallel\n       typedef typename\n         __gnu_parallel::_Multiplies<_ValueType1, _ValueType2>::result_type\n         _MultipliesResultType;\n-      return inner_product(__first1, __last1, __first2, __init,\n+      return _GLIBCXX_STD_P::inner_product(__first1, __last1, __first2, __init,\n                            __gnu_parallel::_Plus<_Tp, _MultipliesResultType>(),\n                            __gnu_parallel::\n                            _Multiplies<_ValueType1, _ValueType2>());\n@@ -359,7 +359,8 @@ namespace __parallel\n     partial_sum(_IIter __begin, _IIter __end, _OutputIterator __result)\n     {\n       typedef typename iterator_traits<_IIter>::value_type _ValueType;\n-      return partial_sum(__begin, __end, __result, std::plus<_ValueType>());\n+      return _GLIBCXX_STD_P::partial_sum(__begin, __end,\n+                                         __result, std::plus<_ValueType>());\n     }\n \n   // Public interface"}, {"sha": "966d9db057277ae733a5cf5a1a43a099f86c3431", "filename": "libstdc++-v3/include/parallel/partial_sum.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50f3350ef468be6f1552f856fd8b313baaf933/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50f3350ef468be6f1552f856fd8b313baaf933/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h?ref=0e50f3350ef468be6f1552f856fd8b313baaf933", "patch": "@@ -158,7 +158,8 @@ namespace __gnu_parallel\n         else\n           {\n             ::new(&(__sums[__iam]))\n-              _ValueType(std::accumulate(__begin + __borders[__iam] + 1,\n+              _ValueType(__gnu_parallel::accumulate(\n+                                         __begin + __borders[__iam] + 1,\n                                          __begin + __borders[__iam + 1],\n                                          *(__begin + __borders[__iam]),\n                                          __bin_op,"}]}