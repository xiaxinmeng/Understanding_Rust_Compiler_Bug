{"sha": "3c303f52ac1d1a462c9dd285493c1c46850014b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MzMDNmNTJhYzFkMWE0NjJjOWRkMjg1NDkzYzFjNDY4NTAwMTRiOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-26T06:41:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-26T06:41:04Z"}, "message": "Warning fixes:\n\n        * alpha.c: Include system.h and toplev.h.\n        (cint8_operand): Mark parameter `mode' with ATTRIBUTE_UNUSED.\n        (const48_operand): Likewise.\n        (mode_width_operand): Likewise.\n        (mode_mask_operand): Likewise.\n        (mul8_operand): Likewise.\n        (current_file_function_operand): Likewise.\n        (signed_comparison_operator): Likewise.\n        (divmod_operator): Likewise.\n        (any_memory_operand): Likewise.\n        (alpha_return_addr): Likewise for parameter `frame'.\n        (alpha_builtin_saveregs): Likewise for parameter `arglist'.\n        (vms_valid_decl_attribute_p): Likewise for parameters `decl' and\n        `attributes'.\n        (alpha_start_function): Likewise for parameter `decl'.  Use\n        HOST_WIDE_INT_PRINT_DEC in call to fprintf.  Fix various format\n        specifiers.  Remove unused variables `lab' and `name'.\n        (alpha_end_function): Mark parameter `decl' with ATTRIBUTE_UNUSED.\n        (check_float_value): Likewise for parameter `overflow'.\n        (alpha_need_linkage): Likewise for parameters `name' and `is_local'.\n        * alpha.h (ASM_IDENTIFY_GCC, ASM_IDENTIFY_LANGUAGE): Define as\n        taking an argument.\n        (ASM_OUTPUT_SHORT): Cast argument to `int' in call to fprintf.\n        (ASM_OUTPUT_CHAR): Likewise.\n        (ASM_OUTPUT_BYTE): Likewise.\n        (PRINT_OPERAND_ADDRESS): Use HOST_WIDE_INT_PRINT_DEC in call to\n        fprintf.\n        (PUT_SDB_EPILOGUE_END): Mention argument `NAME' in definition.\n        Add prototypes for functions in alpha.c.\n        * alpha.md (ashldi3): Add default case in switch.\n\nFrom-SVN: r20737", "tree": {"sha": "a7e52fe487440e5a34370c1c82f91d2bc0c81f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7e52fe487440e5a34370c1c82f91d2bc0c81f2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c303f52ac1d1a462c9dd285493c1c46850014b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c303f52ac1d1a462c9dd285493c1c46850014b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c303f52ac1d1a462c9dd285493c1c46850014b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c303f52ac1d1a462c9dd285493c1c46850014b9/comments", "author": null, "committer": null, "parents": [{"sha": "f1943b772f833a3e511c35a78cc90607e752a202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1943b772f833a3e511c35a78cc90607e752a202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1943b772f833a3e511c35a78cc90607e752a202"}], "stats": {"total": 152, "additions": 116, "deletions": 36}, "files": [{"sha": "85704c26675e88545dc474f4f4f039a51238408e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c303f52ac1d1a462c9dd285493c1c46850014b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c303f52ac1d1a462c9dd285493c1c46850014b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c303f52ac1d1a462c9dd285493c1c46850014b9", "patch": "@@ -1,3 +1,38 @@\n+Fri Jun 26 09:31:24 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alpha.c: Include system.h and toplev.h.\n+\t(cint8_operand): Mark parameter `mode' with ATTRIBUTE_UNUSED.\n+\t(const48_operand): Likewise.\n+\t(mode_width_operand): Likewise.\n+\t(mode_mask_operand): Likewise.\n+\t(mul8_operand): Likewise.\n+\t(current_file_function_operand): Likewise.\n+\t(signed_comparison_operator): Likewise.\n+\t(divmod_operator): Likewise.\n+\t(any_memory_operand): Likewise.\n+\t(alpha_return_addr): Likewise for parameter `frame'.\n+\t(alpha_builtin_saveregs): Likewise for parameter `arglist'.\n+\t(vms_valid_decl_attribute_p): Likewise for parameters `decl' and\n+\t`attributes'.\n+\t(alpha_start_function): Likewise for parameter `decl'.  Use\n+ \tHOST_WIDE_INT_PRINT_DEC in call to fprintf.  Fix various format\n+ \tspecifiers.  Remove unused variables `lab' and `name'.\n+\t(alpha_end_function): Mark parameter `decl' with ATTRIBUTE_UNUSED.\n+\t(check_float_value): Likewise for parameter `overflow'.\n+\t(alpha_need_linkage): Likewise for parameters `name' and `is_local'.\n+\t\n+\t* alpha.h (ASM_IDENTIFY_GCC, ASM_IDENTIFY_LANGUAGE): Define as\n+\ttaking an argument.\n+\t(ASM_OUTPUT_SHORT): Cast argument to `int' in call to fprintf.\n+\t(ASM_OUTPUT_CHAR): Likewise.\n+\t(ASM_OUTPUT_BYTE): Likewise.\n+\t(PRINT_OPERAND_ADDRESS): Use HOST_WIDE_INT_PRINT_DEC in call to\n+\tfprintf.\n+\t(PUT_SDB_EPILOGUE_END): Mention argument `NAME' in definition.\n+\tAdd prototypes for functions in alpha.c.\n+\n+\t* alpha.md (ashldi3): Add default case in switch.\n+\n 1998-06-26  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* Makefile.in (gcc_version, gcc_version_trigger): New macros."}, {"sha": "0a0c4f116cb29b7d6c29cd84eeedc6cee32ba02b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c303f52ac1d1a462c9dd285493c1c46850014b9/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c303f52ac1d1a462c9dd285493c1c46850014b9/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=3c303f52ac1d1a462c9dd285493c1c46850014b9", "patch": "@@ -21,8 +21,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n-#include <ctype.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -40,6 +39,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"except.h\"\n #include \"function.h\"\n+#include \"toplev.h\"\n \n /* External data.  */\n extern char *version_string;\n@@ -358,7 +358,7 @@ reg_or_8bit_operand (op, mode)\n int\n cint8_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (unsigned HOST_WIDE_INT) INTVAL (op) < 0x100);\n@@ -399,7 +399,7 @@ sext_add_operand (op, mode)\n int\n const48_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (INTVAL (op) == 4 || INTVAL (op) == 8));\n@@ -444,7 +444,7 @@ or_operand (op, mode)\n int\n mode_width_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (INTVAL (op) == 8 || INTVAL (op) == 16\n@@ -457,7 +457,7 @@ mode_width_operand (op, mode)\n int\n mode_mask_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n #if HOST_BITS_PER_WIDE_INT == 32\n   if (GET_CODE (op) == CONST_DOUBLE)\n@@ -484,7 +484,7 @@ mode_mask_operand (op, mode)\n int\n mul8_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n \t  && (unsigned HOST_WIDE_INT) INTVAL (op) < 64\n@@ -613,7 +613,7 @@ input_operand (op, mode)\n int\n current_file_function_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == SYMBOL_REF\n \t  && ! profile_flag && ! profile_block_flag\n@@ -675,7 +675,7 @@ alpha_swapped_comparison_operator (op, mode)\n int\n signed_comparison_operator (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -694,7 +694,7 @@ signed_comparison_operator (op, mode)\n int\n divmod_operator (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -797,7 +797,7 @@ reg_or_unaligned_mem_operand (op, mode)\n int\n any_memory_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == MEM\n \t  || (GET_CODE (op) == SUBREG && GET_CODE (SUBREG_REG (op)) == REG)\n@@ -2428,7 +2428,7 @@ alpha_init_expanders ()\n rtx\n alpha_return_addr (count, frame)\n      int count;\n-     rtx frame;\n+     rtx frame ATTRIBUTE_UNUSED;\n {\n   rtx init;\n \n@@ -2815,7 +2815,7 @@ print_operand (file, x, code)\n \n struct rtx_def *\n alpha_builtin_saveregs (arglist)\n-     tree arglist;\n+     tree arglist ATTRIBUTE_UNUSED;\n {\n   rtx block, addr, dest, argsize;\n   tree fntype = TREE_TYPE (current_function_decl);\n@@ -3053,8 +3053,8 @@ alpha_using_fp ()\n \n int\n vms_valid_decl_attribute_p (decl, attributes, identifier, args)\n-     tree decl;\n-     tree attributes;\n+     tree decl ATTRIBUTE_UNUSED;\n+     tree attributes ATTRIBUTE_UNUSED;\n      tree identifier;\n      tree args;\n {\n@@ -3346,7 +3346,7 @@ void\n alpha_start_function (file, fnname, decl)\n      FILE *file;\n      char *fnname;\n-     tree decl;\n+     tree decl ATTRIBUTE_UNUSED;\n {\n   unsigned long imask = 0;\n   unsigned long fmask = 0;\n@@ -3435,7 +3435,9 @@ alpha_start_function (file, fnname, decl)\n       fprintf (file, \"\\t.frame $%d,\", vms_unwind_regno);\n       fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n \t       frame_size >= (1l << 31) ? 0 : frame_size);\n-      fprintf (file, \",$26,%d\\n\", reg_offset);\n+      fputs (\",$26,\", file);\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, reg_offset);\n+      fputs (\"\\n\", file);\n     }\n   else if (!flag_inhibit_size_directive)\n     {\n@@ -3453,17 +3455,17 @@ alpha_start_function (file, fnname, decl)\n       if (imask)\n         /* ??? Does VMS care if mask contains ra?  The old code did'nt\n            set it, so I don't here.  */\n-\tfprintf (file, \"\\t.mask 0x%x,0\\n\", imask & ~(1L << REG_RA));\n+\tfprintf (file, \"\\t.mask 0x%lx,0\\n\", imask & ~(1L << REG_RA));\n       if (fmask)\n-\tfprintf (file, \"\\t.fmask 0x%x,0\\n\", fmask);\n+\tfprintf (file, \"\\t.fmask 0x%lx,0\\n\", fmask);\n       if (!vms_is_stack_procedure)\n \tfprintf (file, \"\\t.fp_save $%d\\n\", vms_save_fp_regno);\n     }\n   else if (!flag_inhibit_size_directive)\n     {\n       if (imask)\n \t{\n-\t  fprintf (file, \"\\t.mask 0x%x,\", imask);\n+\t  fprintf (file, \"\\t.mask 0x%lx,\", imask);\n \t  fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n \t\t   frame_size >= (1l << 31) ? 0 : reg_offset - frame_size);\n \t  putc ('\\n', file);\n@@ -3475,7 +3477,7 @@ alpha_start_function (file, fnname, decl)\n \n       if (fmask)\n \t{\n-\t  fprintf (file, \"\\t.fmask 0x%x,\", fmask);\n+\t  fprintf (file, \"\\t.fmask 0x%lx,\", fmask);\n \t  fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n \t\t   frame_size >= (1l << 31) ? 0 : reg_offset - frame_size);\n \t  putc ('\\n', file);\n@@ -3487,9 +3489,6 @@ alpha_start_function (file, fnname, decl)\n      plain text.  */\n   if (!TARGET_OPEN_VMS && !TARGET_WINDOWS_NT)\n     {\n-      rtx lab;\n-      char *name;\n-\n       alpha_function_needs_gp = alpha_does_function_need_gp ();\n       if (alpha_function_needs_gp)\n \tfputs (\"\\tldgp $29,0($27)\\n\", file);\n@@ -3725,7 +3724,7 @@ void\n alpha_end_function (file, fnname, decl)\n      FILE *file;\n      char *fnname;\n-     tree decl;\n+     tree decl ATTRIBUTE_UNUSED;\n {\n   /* End the function.  */\n   if (!flag_inhibit_size_directive)\n@@ -4181,7 +4180,7 @@ int\n check_float_value (mode, d, overflow)\n      enum machine_mode mode;\n      REAL_VALUE_TYPE *d;\n-     int overflow;\n+     int overflow ATTRIBUTE_UNUSED;\n {\n \n   if (TARGET_IEEE || TARGET_IEEE_CONFORMANT || TARGET_IEEE_WITH_INEXACT)\n@@ -4371,8 +4370,8 @@ alpha_write_linkage (stream)\n \n void\n alpha_need_linkage (name, is_local)\n-     char *name;\n-     int is_local;\n+     char *name ATTRIBUTE_UNUSED;\n+     int is_local ATTRIBUTE_UNUSED;\n {\n }\n "}, {"sha": "00e5c915f8a3c208034cff8ba4b6d81740bf58dd", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c303f52ac1d1a462c9dd285493c1c46850014b9/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c303f52ac1d1a462c9dd285493c1c46850014b9/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=3c303f52ac1d1a462c9dd285493c1c46850014b9", "patch": "@@ -1112,6 +1112,7 @@ extern void alpha_end_function ();\n /* This macro notes the end of the prologue.  */\n \n #define FUNCTION_END_PROLOGUE(FILE)  output_end_prologue (FILE)\n+extern void output_end_prologue ();\n \n /* Output any profiling code before the prologue.  */\n \n@@ -1803,8 +1804,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n    sized text section with no associated exception handling info.  The\n    DEC linker sees this text section, and gives a warning saying that\n    the exception handling info is missing.  */\n-#define ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_LANGUAGE\n+#define ASM_IDENTIFY_GCC(x)\n+#define ASM_IDENTIFY_LANGUAGE(x)\n \n /* Output to assembler file text saying following lines\n    may contain character constants, extra white space, comments, etc.  */\n@@ -1971,12 +1972,12 @@ literal_section ()\t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_SHORT(FILE,VALUE)  \\\n   fprintf (FILE, \"\\t.word %d\\n\",\t\t\\\n-    (GET_CODE (VALUE) == CONST_INT\t\t\\\n+    (int)(GET_CODE (VALUE) == CONST_INT\t\t\\\n      ? INTVAL (VALUE) & 0xffff : (abort (), 0)))\n \n #define ASM_OUTPUT_CHAR(FILE,VALUE)\t\t\\\n   fprintf (FILE, \"\\t.byte %d\\n\",\t\t\\\n-    (GET_CODE (VALUE) == CONST_INT\t\t\\\n+    (int)(GET_CODE (VALUE) == CONST_INT\t\t\\\n      ? INTVAL (VALUE) & 0xff : (abort (), 0)))\n \n /* We use the default ASCII-output routine, except that we don't write more\n@@ -2043,7 +2044,7 @@ literal_section ()\t\t\t\t\t\t\\\n /* This is how to output an assembler line for a numeric constant byte.  */\n \n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE) & 0xff)\n+  fprintf (FILE, \"\\t.byte 0x%x\\n\", (int) ((VALUE) & 0xff))\n \n /* This is how to output an element of a case-vector that is absolute.\n    (Alpha does not use such vectors, but we must define this macro anyway.)  */\n@@ -2199,7 +2200,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\\\n     abort ();\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\\\n-  fprintf (FILE, \"%d($%d)\", offset, basereg);\t\t\\\n+  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, offset);\t\t\\\n+  fprintf (FILE, \"($%d)\", basereg);\t\t\\\n }\n /* Define the codes that are matched by predicates in alpha.c.  */\n \n@@ -2359,7 +2361,7 @@ do {\t\t\t\t\t\t\t\\\n \n #define PUT_SDB_FUNCTION_END(LINE)\n \n-#define PUT_SDB_EPILOGUE_END(NAME)\n+#define PUT_SDB_EPILOGUE_END(NAME) ((void)(NAME))\n \n /* Macros for mips-tfile.c to encapsulate stabs in ECOFF, and for\n    mips-tdump.c to print them out.\n@@ -2389,5 +2391,47 @@ do {\t\t\t\t\t\t\t\\\n /* The system headers under Alpha systems are generally C++-aware.  */\n #define NO_IMPLICIT_EXTERN_C\n \n-/* Prototypes for alpha.c functions used in the md file.  */\n+/* Prototypes for alpha.c functions used in the md file & elsewhere.  */\n extern struct rtx_def *get_unaligned_address ();\n+extern void alpha_write_verstamp ();\n+extern void alpha_reorg ();\n+extern int check_float_value ();\n+extern int direct_return ();\n+extern int const48_operand ();\n+extern int add_operand ();\n+extern int and_operand ();\n+extern int unaligned_memory_operand ();\n+extern int zap_mask ();\n+extern int current_file_function_operand ();\n+extern int alpha_sa_size ();\n+extern int alpha_adjust_cost ();\n+extern void print_operand ();\n+extern int reg_or_0_operand ();\n+extern int reg_or_8bit_operand ();\n+extern int mul8_operand ();\n+extern int reg_or_6bit_operand ();\n+extern int alpha_comparison_operator ();\n+extern int alpha_swapped_comparison_operator ();\n+extern int sext_add_operand ();\n+extern int cint8_operand ();\n+extern int mode_mask_operand ();\n+extern int or_operand ();\n+extern int mode_width_operand ();\n+extern int reg_or_fp0_operand ();\n+extern int signed_comparison_operator ();\n+extern int fp0_operand ();\n+extern int some_operand ();\n+extern int input_operand ();\n+extern int divmod_operator ();\n+extern int call_operand ();\n+extern int reg_or_cint_operand ();\n+extern int hard_fp_register_operand ();\n+extern void alpha_set_memflags ();\n+extern int aligned_memory_operand ();\n+extern void get_aligned_mem ();\n+extern void alpha_expand_unaligned_load ();\n+extern void alpha_expand_unaligned_store ();\n+extern int alpha_expand_block_move ();\n+extern int alpha_expand_block_clear ();\n+extern void alpha_expand_prologue ();\n+extern void alpha_expand_epilogue ();"}, {"sha": "98fa0f7356706ea14b61a39a8c746a2285470409", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c303f52ac1d1a462c9dd285493c1c46850014b9/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c303f52ac1d1a462c9dd285493c1c46850014b9/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=3c303f52ac1d1a462c9dd285493c1c46850014b9", "patch": "@@ -1190,6 +1190,8 @@\n \treturn \\\"s%P2addq %r1,0,%0\\\";\n     case 1:\n       return \\\"sll %r1,%2,%0\\\";\n+    default:\n+      abort();\n     }\n }\"\n   [(set_attr \"type\" \"iadd,shift\")])"}]}