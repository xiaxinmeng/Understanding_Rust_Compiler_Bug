{"sha": "373b9e782b20f12f8d62a258b68e25f9e249124a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczYjllNzgyYjIwZjEyZjhkNjJhMjU4YjY4ZTI1ZjllMjQ5MTI0YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-11-28T21:45:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-11-28T21:45:03Z"}, "message": "re PR tree-optimization/55052 (vect-widening tests are failing and giving wrong results)\n\ngcc/\n\tPR rtl-optimization/55052\n\t* simplify-rtx.c (simplify_subreg): Restore SCALAR_INT_MODE_P check.\n\nFrom-SVN: r193909", "tree": {"sha": "5a0889a54ea81d229c3829d0a07454d20ff7e0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a0889a54ea81d229c3829d0a07454d20ff7e0e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/373b9e782b20f12f8d62a258b68e25f9e249124a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373b9e782b20f12f8d62a258b68e25f9e249124a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373b9e782b20f12f8d62a258b68e25f9e249124a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373b9e782b20f12f8d62a258b68e25f9e249124a/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74c49505d071e2d5d81a8b9e1708f35f81eab09d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c49505d071e2d5d81a8b9e1708f35f81eab09d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c49505d071e2d5d81a8b9e1708f35f81eab09d"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "b4febea6753a342d02d91d296c5ae1699c6ff1e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373b9e782b20f12f8d62a258b68e25f9e249124a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373b9e782b20f12f8d62a258b68e25f9e249124a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=373b9e782b20f12f8d62a258b68e25f9e249124a", "patch": "@@ -1,3 +1,8 @@\n+2012-11-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR rtl-optimization/55052\n+\t* simplify-rtx.c (simplify_subreg): Restore SCALAR_INT_MODE_P check.\n+\n 2012-11-28  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* target.def (use_blocks_for_decl_p): New hook."}, {"sha": "f26f0083cf6db2d9dd974f35da7e7e68c204839e", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/373b9e782b20f12f8d62a258b68e25f9e249124a/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/373b9e782b20f12f8d62a258b68e25f9e249124a/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=373b9e782b20f12f8d62a258b68e25f9e249124a", "patch": "@@ -5875,7 +5875,7 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n \n   /* A SUBREG resulting from a zero extension may fold to zero if\n      it extracts higher bits that the ZERO_EXTEND's source bits.  */\n-  if (GET_CODE (op) == ZERO_EXTEND)\n+  if (GET_CODE (op) == ZERO_EXTEND && SCALAR_INT_MODE_P (innermode))\n     {\n       unsigned int bitpos = subreg_lsb_1 (outermode, innermode, byte);\n       if (bitpos >= GET_MODE_PRECISION (GET_MODE (XEXP (op, 0))))"}]}