{"sha": "23f1f679141bbb4720ca195cb758605dc017b7fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNmMWY2NzkxNDFiYmI0NzIwY2ExOTVjYjc1ODYwNWRjMDE3YjdmZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-06T18:05:44Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-07T13:04:30Z"}, "message": "c++: Fix usage of CONSTRUCTOR_PLACEHOLDER_BOUNDARY inside array initializers [PR90996]\n\nThis PR reports that ever since the introduction of the\nCONSTRUCTOR_PLACEHOLDER_BOUNDARY flag, we are sometimes failing to resolve\nPLACEHOLDER_EXPRs inside array initializers that refer to some inner\nconstructor.  In the testcase in the PR, we have as the initializer for \"S c[];\"\nthe following\n\n  {{.a=(int &) &_ZGR1c_, .b={*(&<PLACEHOLDER_EXPR struct S>)->a}}}\n\nwhere CONSTRUCTOR_PLACEHOLDER_BOUNDARY is set on the middle constructor.  When\ncalling replace_placeholders from store_init_value, we pass the entire\ninitializer to it, and as a result we fail to resolve the PLACEHOLDER_EXPR\nwithin due to the CONSTRUCTOR_PLACEHOLDER_BOUNDARY flag on the middle\nconstructor blocking replace_placeholders_r from reaching it.\n\nTo fix this, we could perhaps either call replace_placeholders in more places,\nor we could change where we set CONSTRUCTOR_PLACEHOLDER_BOUNDARY.  This patch\ntakes this latter approach -- when building up an array initializer, we now\nbubble any CONSTRUCTOR_PLACEHOLDER_BOUNDARY flag from the element initializers\nup to the array initializer so that the boundary doesn't later impede us when we\ncall replace_placeholders from store_init_value.\n\nBesides fixing the kind of code like in the testcase, this shouldn't cause any\nother differences in PLACEHOLDER_EXPR resolution because we don't create or use\nPLACEHOLDER_EXPRs of array type in the frontend, as far as I can tell.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/90996\n\t* tree.c (replace_placeholders): Look through all handled components,\n\tnot just COMPONENT_REFs.\n\t* typeck2.c (process_init_constructor_array): Propagate\n\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY up from each element initializer to\n\tthe array initializer.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/90996\n\t* g++.dg/cpp1y/pr90996.C: New test.", "tree": {"sha": "99de79d9c5b3ab3c5c00dfd98a2a480e6b2c94a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99de79d9c5b3ab3c5c00dfd98a2a480e6b2c94a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23f1f679141bbb4720ca195cb758605dc017b7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f1f679141bbb4720ca195cb758605dc017b7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23f1f679141bbb4720ca195cb758605dc017b7fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23f1f679141bbb4720ca195cb758605dc017b7fd/comments", "author": null, "committer": null, "parents": [{"sha": "d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d51af82b4cf4c95c4a7451df2180cc6ebb44856b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d51af82b4cf4c95c4a7451df2180cc6ebb44856b"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "67bee23925378baafadc04d2623c11dca3ec9a97", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f1f679141bbb4720ca195cb758605dc017b7fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f1f679141bbb4720ca195cb758605dc017b7fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=23f1f679141bbb4720ca195cb758605dc017b7fd", "patch": "@@ -1,3 +1,12 @@\n+2020-04-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/90996\n+\t* tree.c (replace_placeholders): Look through all handled components,\n+\tnot just COMPONENT_REFs.\n+\t* typeck2.c (process_init_constructor_array): Propagate\n+\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY up from each element initializer to\n+\tthe array initializer.\n+\n 2020-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94512"}, {"sha": "d1192b7e094b00f02ed1485429043eb48af0d51e", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f1f679141bbb4720ca195cb758605dc017b7fd/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f1f679141bbb4720ca195cb758605dc017b7fd/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=23f1f679141bbb4720ca195cb758605dc017b7fd", "patch": "@@ -3247,7 +3247,7 @@ replace_placeholders (tree exp, tree obj, bool *seen_p /*= NULL*/)\n \n   /* If the object isn't a (member of a) class, do nothing.  */\n   tree op0 = obj;\n-  while (TREE_CODE (op0) == COMPONENT_REF)\n+  while (handled_component_p (op0))\n     op0 = TREE_OPERAND (op0, 0);\n   if (!CLASS_TYPE_P (strip_array_types (TREE_TYPE (op0))))\n     return exp;"}, {"sha": "56fd9bafa7e568d21edb7f6a35cd82066397c321", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f1f679141bbb4720ca195cb758605dc017b7fd/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f1f679141bbb4720ca195cb758605dc017b7fd/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=23f1f679141bbb4720ca195cb758605dc017b7fd", "patch": "@@ -1488,6 +1488,17 @@ process_init_constructor_array (tree type, tree init, int nested, int flags,\n \t= massage_init_elt (TREE_TYPE (type), ce->value, nested, flags,\n \t\t\t    complain);\n \n+      if (TREE_CODE (ce->value) == CONSTRUCTOR\n+\t  && CONSTRUCTOR_PLACEHOLDER_BOUNDARY (ce->value))\n+\t{\n+\t  /* Shift CONSTRUCTOR_PLACEHOLDER_BOUNDARY from the element initializer\n+\t     up to the array initializer, so that the call to\n+\t     replace_placeholders from store_init_value can resolve any\n+\t     PLACEHOLDER_EXPRs inside this element initializer.  */\n+\t  CONSTRUCTOR_PLACEHOLDER_BOUNDARY (ce->value) = 0;\n+\t  CONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n+\t}\n+\n       gcc_checking_assert\n \t(ce->value == error_mark_node\n \t || (same_type_ignoring_top_level_qualifiers_p\n@@ -1516,6 +1527,13 @@ process_init_constructor_array (tree type, tree init, int nested, int flags,\n \t      /* The default zero-initialization is fine for us; don't\n \t\t add anything to the CONSTRUCTOR.  */\n \t      next = NULL_TREE;\n+\t    else if (TREE_CODE (next) == CONSTRUCTOR\n+\t\t     && CONSTRUCTOR_PLACEHOLDER_BOUNDARY (next))\n+\t      {\n+\t\t/* As above.  */\n+\t\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY (next) = 0;\n+\t\tCONSTRUCTOR_PLACEHOLDER_BOUNDARY (init) = 1;\n+\t      }\n \t  }\n \telse if (!zero_init_p (TREE_TYPE (type)))\n \t  next = build_zero_init (TREE_TYPE (type),"}, {"sha": "982f0b144d6eec33daa42bef44eb104c7d8d9a21", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f1f679141bbb4720ca195cb758605dc017b7fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f1f679141bbb4720ca195cb758605dc017b7fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23f1f679141bbb4720ca195cb758605dc017b7fd", "patch": "@@ -1,3 +1,8 @@\n+2020-04-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/90996\n+\t* g++.dg/cpp1y/pr90996.C: New test.\n+\n 2020-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94509"}, {"sha": "780cbb4e3ac5623afeb657d8f2896f899de9197b", "filename": "gcc/testsuite/g++.dg/cpp1y/pr90996.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23f1f679141bbb4720ca195cb758605dc017b7fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr90996.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23f1f679141bbb4720ca195cb758605dc017b7fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr90996.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr90996.C?ref=23f1f679141bbb4720ca195cb758605dc017b7fd", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/90996\n+// { dg-do compile { target c++14 } }\n+\n+struct S\n+{\n+  int &&a = 2;\n+  int b[1] {a};\n+};\n+\n+S c[2][2] {{{5}}};\n+\n+struct T\n+{\n+  S c[2][2] {{{7}}};\n+};\n+\n+T d {};"}]}