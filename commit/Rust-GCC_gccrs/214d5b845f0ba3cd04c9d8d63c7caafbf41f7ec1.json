{"sha": "214d5b845f0ba3cd04c9d8d63c7caafbf41f7ec1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0ZDViODQ1ZjBiYTNjZDA0YzlkOGQ2M2M3Y2FhZmJmNDFmN2VjMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-29T23:03:36Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-29T23:03:36Z"}, "message": "(const_binop): Add new arg, TYPE, to call to build_complex.\n\n(fold, case CONJ_EXPR, COMPLEX_EXPR): Likewise.\n\nFrom-SVN: r12865", "tree": {"sha": "ecf316384cdaed0c12a408b4e2025703c7336c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecf316384cdaed0c12a408b4e2025703c7336c1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/214d5b845f0ba3cd04c9d8d63c7caafbf41f7ec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214d5b845f0ba3cd04c9d8d63c7caafbf41f7ec1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/214d5b845f0ba3cd04c9d8d63c7caafbf41f7ec1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/214d5b845f0ba3cd04c9d8d63c7caafbf41f7ec1/comments", "author": null, "committer": null, "parents": [{"sha": "7791247664583a58c7580c54ebba4e1e0629ffc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7791247664583a58c7580c54ebba4e1e0629ffc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7791247664583a58c7580c54ebba4e1e0629ffc7"}], "stats": {"total": 55, "additions": 30, "deletions": 25}, "files": [{"sha": "47dbecbadcba436a792b682068ef3632d440dc14", "filename": "gcc/fold-const.c", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/214d5b845f0ba3cd04c9d8d63c7caafbf41f7ec1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/214d5b845f0ba3cd04c9d8d63c7caafbf41f7ec1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=214d5b845f0ba3cd04c9d8d63c7caafbf41f7ec1", "patch": "@@ -1228,6 +1228,7 @@ const_binop (code, arg1, arg2, notrunc)\n #endif /* not REAL_IS_NOT_DOUBLE, or REAL_ARITHMETIC */\n   if (TREE_CODE (arg1) == COMPLEX_CST)\n     {\n+      register tree type = TREE_TYPE (arg1);\n       register tree r1 = TREE_REALPART (arg1);\n       register tree i1 = TREE_IMAGPART (arg1);\n       register tree r2 = TREE_REALPART (arg2);\n@@ -1237,17 +1238,20 @@ const_binop (code, arg1, arg2, notrunc)\n       switch (code)\n \t{\n \tcase PLUS_EXPR:\n-\t  t = build_complex (const_binop (PLUS_EXPR, r1, r2, notrunc),\n+\t  t = build_complex (type,\n+\t\t\t     const_binop (PLUS_EXPR, r1, r2, notrunc),\n \t\t\t     const_binop (PLUS_EXPR, i1, i2, notrunc));\n \t  break;\n \n \tcase MINUS_EXPR:\n-\t  t = build_complex (const_binop (MINUS_EXPR, r1, r2, notrunc),\n+\t  t = build_complex (type,\n+\t\t\t     const_binop (MINUS_EXPR, r1, r2, notrunc),\n \t\t\t     const_binop (MINUS_EXPR, i1, i2, notrunc));\n \t  break;\n \n \tcase MULT_EXPR:\n-\t  t = build_complex (const_binop (MINUS_EXPR,\n+\t  t = build_complex (type,\n+\t\t\t     const_binop (MINUS_EXPR,\n \t\t\t\t\t  const_binop (MULT_EXPR,\n \t\t\t\t\t\t       r1, r2, notrunc),\n \t\t\t\t\t  const_binop (MULT_EXPR,\n@@ -1269,32 +1273,33 @@ const_binop (code, arg1, arg2, notrunc)\n \t\t\t     const_binop (MULT_EXPR, i2, i2, notrunc),\n \t\t\t     notrunc);\n \n-\t    t = build_complex\n-\t      (const_binop (INTEGRAL_TYPE_P (TREE_TYPE (r1))\n-\t\t\t    ? TRUNC_DIV_EXPR : RDIV_EXPR,\n-\t\t\t    const_binop (PLUS_EXPR,\n-\t\t\t\t\t const_binop (MULT_EXPR, r1, r2,\n-\t\t\t\t\t\t      notrunc),\n-\t\t\t\t\t const_binop (MULT_EXPR, i1, i2,\n-\t\t\t\t\t\t      notrunc),\n-\t\t\t\t\t notrunc),\n-\t\t\t    magsquared, notrunc),\n-\t       const_binop (INTEGRAL_TYPE_P (TREE_TYPE (r1))\n-\t\t\t    ? TRUNC_DIV_EXPR : RDIV_EXPR,\n-\t\t\t    const_binop (MINUS_EXPR,\n-\t\t\t\t\t const_binop (MULT_EXPR, i1, r2,\n-\t\t\t\t\t\t      notrunc),\n-\t\t\t\t\t const_binop (MULT_EXPR, r1, i2,\n-\t\t\t\t\t\t      notrunc),\n-\t\t\t\t\t notrunc),\n-\t\t\t    magsquared, notrunc));\n+\t    t = build_complex (type,\n+\t\t\t       const_binop\n+\t\t\t       (INTEGRAL_TYPE_P (TREE_TYPE (r1))\n+\t\t\t\t? TRUNC_DIV_EXPR : RDIV_EXPR,\n+\t\t\t\tconst_binop (PLUS_EXPR,\n+\t\t\t\t\t     const_binop (MULT_EXPR, r1, r2,\n+\t\t\t\t\t\t\t  notrunc),\n+\t\t\t\t\t     const_binop (MULT_EXPR, i1, i2,\n+\t\t\t\t\t\t\t  notrunc),\n+\t\t\t\t\t     notrunc),\n+\t\t\t\tmagsquared, notrunc),\n+\t\t\t       const_binop\n+\t\t\t       (INTEGRAL_TYPE_P (TREE_TYPE (r1))\n+\t\t\t\t? TRUNC_DIV_EXPR : RDIV_EXPR,\n+\t\t\t\tconst_binop (MINUS_EXPR,\n+\t\t\t\t\t     const_binop (MULT_EXPR, i1, r2,\n+\t\t\t\t\t\t\t  notrunc),\n+\t\t\t\t\t     const_binop (MULT_EXPR, r1, i2,\n+\t\t\t\t\t\t\t  notrunc),\n+\t\t\t\t\t     notrunc),\n+\t\t\t\tmagsquared, notrunc));\n \t  }\n \t  break;\n \n \tdefault:\n \t  abort ();\n \t}\n-      TREE_TYPE (t) = TREE_TYPE (arg1);\n       return t;\n     }\n   return 0;\n@@ -3621,7 +3626,7 @@ fold (expr)\n \t\t\t\t    TREE_TYPE (TREE_TYPE (arg0)),\n \t\t\t\t    TREE_OPERAND (arg0, 1))));\n       else if (TREE_CODE (arg0) == COMPLEX_CST)\n-\treturn build_complex (TREE_OPERAND (arg0, 0),\n+\treturn build_complex (type, TREE_OPERAND (arg0, 0),\n \t\t\t      fold (build1 (NEGATE_EXPR,\n \t\t\t\t\t    TREE_TYPE (TREE_TYPE (arg0)),\n \t\t\t\t\t    TREE_OPERAND (arg0, 1))));\n@@ -5123,7 +5128,7 @@ fold (expr)\n \n     case COMPLEX_EXPR:\n       if (wins)\n-\treturn build_complex (arg0, arg1);\n+\treturn build_complex (type, arg0, arg1);\n       return t;\n \n     case REALPART_EXPR:"}]}