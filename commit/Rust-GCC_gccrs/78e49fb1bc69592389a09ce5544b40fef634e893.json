{"sha": "78e49fb1bc69592389a09ce5544b40fef634e893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlNDlmYjFiYzY5NTkyMzg5YTA5Y2U1NTQ0YjQwZmVmNjM0ZTg5Mw==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2019-11-14T15:53:23Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2019-11-14T15:53:23Z"}, "message": "Introduce vxworks specific crtstuff support\n\n2019-11-06  Jerome Lambourg  <lambourg@adacore.com>\n            Olivier Hainque  <hainque@adacore.com>\n\n\tlibgcc/\n\t* config/vxcrtstuff.c: New file.\n\t* config/t-vxcrtstuff: New Makefile fragment.\n\t* config.host: Append t-vxcrtstuff to the tmake_file list\n\ton all VxWorks ports using dwarf for table based EH.\n\n\tgcc/\n\t* config/vx-common.h (USE_TM_CLONE_REGISTRY): Remove\n\tdefinition, pointless with a VxWorks specific version\n\tof crtstuff.\n\t(DWARF2_UNWIND_INFO): Conditionalize on !ARM_UNWIND_INFO.\n\t* config/vxworks.h (VX_CRTBEGIN_SPEC, VX_CRTEND_SPEC):\n\tNew local macros, controlling the addition of vxworks specific\n\tcrtstuff objects depending on the EH mechanism and kind of\n\tmodule being linked.\n\t(VXWORKS_STARTFILE_SPEC, VXWORKS_ENDFILE_SPEC): Use them.\n\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r278248", "tree": {"sha": "6a4a42db11d921d3246820bf1f2cdc529af89bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a4a42db11d921d3246820bf1f2cdc529af89bc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e49fb1bc69592389a09ce5544b40fef634e893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e49fb1bc69592389a09ce5544b40fef634e893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e49fb1bc69592389a09ce5544b40fef634e893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e49fb1bc69592389a09ce5544b40fef634e893/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebcdba9c9f71e548e7506ecc8cb13139614b392e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcdba9c9f71e548e7506ecc8cb13139614b392e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebcdba9c9f71e548e7506ecc8cb13139614b392e"}], "stats": {"total": 214, "additions": 204, "deletions": 10}, "files": [{"sha": "e24af4944ec123bc0b6211d5803df90eae4b0e88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e49fb1bc69592389a09ce5544b40fef634e893/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e49fb1bc69592389a09ce5544b40fef634e893/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78e49fb1bc69592389a09ce5544b40fef634e893", "patch": "@@ -1,3 +1,16 @@\n+2019-11-06  Jerome Lambourg  <lambourg@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vx-common.h (USE_TM_CLONE_REGISTRY): Remove\n+\tdefinition, pointless with a VxWorks specific version\n+\tof crtstuff.\n+\t(DWARF2_UNWIND_INFO): Conditionalize on !ARM_UNWIND_INFO.\n+\t* config/vxworks.h (VX_CRTBEGIN_SPEC, VX_CRTEND_SPEC):\n+\tNew local macros, controlling the addition of vxworks specific\n+\tcrtstuff objects depending on the EH mechanism and kind of\n+\tmodule being linked.\n+\t(VXWORKS_STARTFILE_SPEC, VXWORKS_ENDFILE_SPEC): Use them.\n+\n 2019-11-06  Pat Bernardi  <bernardi@adacore.com>\n             Jerome Lambourg  <lambourg@adacore.com>\n             Olivier Hainque  <hainque@adacore.com>"}, {"sha": "c76dccf2c9965c37ea27ac7aa10cd3b63eaa9b30", "filename": "gcc/config/vx-common.h", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e49fb1bc69592389a09ce5544b40fef634e893/gcc%2Fconfig%2Fvx-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e49fb1bc69592389a09ce5544b40fef634e893/gcc%2Fconfig%2Fvx-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvx-common.h?ref=78e49fb1bc69592389a09ce5544b40fef634e893", "patch": "@@ -58,9 +58,21 @@ along with GCC; see the file COPYING3.  If not see\n #undef WINT_TYPE_SIZE\n #define WINT_TYPE_SIZE 16\n \n-/* Dwarf2 unwind info is supported.  */\n+/* Dwarf2 unwind info is supported, unless overriden by a request for a target\n+   specific format.\n+\n+   Taking care of this here allows using DWARF2_UNWIND_INFO in #if conditions\n+   from the common config/vxworks.h files, included before the cpu\n+   specializations.  Unlike with conditions used in C expressions, where the\n+   definitions which matter are those at the expression expansion point, use\n+   in #if constructs requires an accurate definition of the operands at the\n+   #if point.  Since <cpu>/vxworks.h. is typically included after\n+   config/vxworks.h, #if expressions in the latter can't rely on possible\n+   redefinitions in the former.  */\n+#if !ARM_UNWIND_INFO\n #undef DWARF2_UNWIND_INFO\n #define DWARF2_UNWIND_INFO 1\n+#endif\n \n /* VxWorks uses DWARF2 debugging info.  */\n #define DWARF2_DEBUGGING_INFO 1\n@@ -87,10 +99,3 @@ along with GCC; see the file COPYING3.  If not see\n /* We occasionally need to distinguish between the VxWorks variants.  */\n #define VXWORKS_KIND_NORMAL  1\n #define VXWORKS_KIND_AE      2\n-\n-/*\n- * libitm is not supported on VxWorks. Rather than providing stub\n- * no-op _ITM_registerTMCloneTable/_ITM_deregisterTMCloneTable\n- * functions, simply prevent crtstuff from even referring to those.\n- */\n-#define USE_TM_CLONE_REGISTRY 0"}, {"sha": "d7083b33aba4b160faabb33bd3b31f54791efacf", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e49fb1bc69592389a09ce5544b40fef634e893/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e49fb1bc69592389a09ce5544b40fef634e893/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=78e49fb1bc69592389a09ce5544b40fef634e893", "patch": "@@ -143,9 +143,23 @@ along with GCC; see the file COPYING3.  If not see\n #undef VXWORKS_LIBGCC_SPEC\n #define VXWORKS_LIBGCC_SPEC \"-lgcc\"\n \n+/* Setup the crtstuff begin/end we might need for dwarf EH registration.  */\n+\n+#if !defined(CONFIG_SJLJ_EXCEPTIONS) && DWARF2_UNWIND_INFO\n+#define VX_CRTBEGIN_SPEC \\\n+ \"%{!mrtp:vx_crtbegin-kernel.o%s} %{mrtp:vx_crtbegin-rtp.o%s}\"\n+#define VX_CRTEND_SPEC \"-l:vx_crtend.o\"\n+#else\n+#define VX_CRTBEGIN_SPEC \"\"\n+#define VX_CRTEND_SPEC \"\"\n+#endif\n+\n #undef VXWORKS_STARTFILE_SPEC\n-#define\tVXWORKS_STARTFILE_SPEC \"%{mrtp:%{!shared:-l:crt0.o}}\"\n-#define VXWORKS_ENDFILE_SPEC \"\"\n+#define VXWORKS_STARTFILE_SPEC \\\n+  VX_CRTBEGIN_SPEC \" %{mrtp:%{!shared:-l:crt0.o}}\"\n+\n+#undef VXWORKS_ENDFILE_SPEC\n+#define VXWORKS_ENDFILE_SPEC VX_CRTEND_SPEC\n \n #undef  VXWORKS_CC1_SPEC\n #if TARGET_VXWORKS7"}, {"sha": "845dbd0c11a067215bdb1897193045e84894ffa7", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e49fb1bc69592389a09ce5544b40fef634e893/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e49fb1bc69592389a09ce5544b40fef634e893/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=78e49fb1bc69592389a09ce5544b40fef634e893", "patch": "@@ -1,3 +1,11 @@\n+2019-11-06  Jerome Lambourg  <lambourg@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/vxcrtstuff.c: New file.\n+\t* config/t-vxcrtstuff: New Makefile fragment.\n+\t* config.host: Append t-vxcrtstuff to the tmake_file list\n+\ton all VxWorks ports using dwarf for table based EH.\n+\n 2019-11-07  Georg-Johann Lay  <avr@gjlay.de>\n \n \tSupport 64-bit double and 64-bit long double configurations."}, {"sha": "b2004afb02f76dbea1cd9fe77b49b87025585dae", "filename": "libgcc/config.host", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e49fb1bc69592389a09ce5544b40fef634e893/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e49fb1bc69592389a09ce5544b40fef634e893/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=78e49fb1bc69592389a09ce5544b40fef634e893", "patch": "@@ -329,6 +329,16 @@ case ${host} in\n   ;;\n esac\n \n+# Except on ARM where we do not use DWARF, table based EH on VxWorks\n+# relies on specially crafted crtstuff files\n+case ${host} in\n+arm-*-vxworks*)\n+  ;;\n+*-*-vxworks*)\n+  tmake_file=\"${tmake_file} t-vxcrtstuff\"\n+  ;;\n+esac\n+\n case ${host} in\n *-*-darwin* | *-*-dragonfly* | *-*-freebsd* | *-*-netbsd* | *-*-openbsd* | \\\n   *-*-solaris2*)"}, {"sha": "96b728525e049e347b3951f13bdef17875164974", "filename": "libgcc/config/t-vxcrtstuff", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e49fb1bc69592389a09ce5544b40fef634e893/libgcc%2Fconfig%2Ft-vxcrtstuff", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e49fb1bc69592389a09ce5544b40fef634e893/libgcc%2Fconfig%2Ft-vxcrtstuff", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-vxcrtstuff?ref=78e49fb1bc69592389a09ce5544b40fef634e893", "patch": "@@ -0,0 +1,12 @@\n+# crtbegin/crtend for VxWorks (DKM or RTP)\n+\n+vx_crtbegin-kernel.o: $(srcdir)/config/vxcrtstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -DCRT_BEGIN -c $<\n+\n+vx_crtbegin-rtp.o: $(srcdir)/config/vxcrtstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -DCRT_BEGIN -c $< -mrtp\n+\n+vx_crtend.o: $(srcdir)/config/vxcrtstuff.c\n+\t$(crt_compile) $(CRTSTUFF_T_CFLAGS) -DCRT_END -c $<\n+\n+EXTRA_PARTS += vx_crtbegin-kernel.o vx_crtbegin-rtp.o vx_crtend.o"}, {"sha": "616ad072cba7161ff5c14c0657a313120ac9f0b2", "filename": "libgcc/config/vxcrtstuff.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e49fb1bc69592389a09ce5544b40fef634e893/libgcc%2Fconfig%2Fvxcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e49fb1bc69592389a09ce5544b40fef634e893/libgcc%2Fconfig%2Fvxcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fvxcrtstuff.c?ref=78e49fb1bc69592389a09ce5544b40fef634e893", "patch": "@@ -0,0 +1,132 @@\n+/* This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* The essential point of the crtbegin/crtend files on VxWorks is to handle\n+   the eh frames registration thanks to dedicated constructors and\n+   destructors.  What needs to be done depends on the VxWorks version and the\n+   kind of module (rtp, dkm, ...) one is building.  */\n+\n+#define IN_LIBGCC2\n+\n+#include \"auto-host.h\"\n+#include \"tconfig.h\"\n+#include \"tsystem.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"libgcc_tm.h\"\n+#include \"unwind-dw2-fde.h\"\n+\n+/* If we are entitled/requested to use init/fini arrays, we'll rely on that.\n+   Otherwise, we may rely on ctors/dtors sections for RTPs or expect munch to\n+   be involved for kernel modules.  */\n+\n+#if !defined(USE_INIT_FINI_ARRAY) && defined(__RTP__)\n+#define USE_CDTORS_SECTIONS\n+#endif\n+\n+/*  ------------------------------ crtbegin -------------------------------  */\n+\n+#ifdef CRT_BEGIN\n+\n+/* Stick a label at the beginning of the frame unwind info so we can register\n+   and deregister it with the exception handling library code.  */\n+static const char __EH_FRAME_BEGIN__[]\n+__attribute__((section(__LIBGCC_EH_FRAME_SECTION_NAME__), aligned(4)))\n+  = { };\n+\n+/* Determine what names to use for the constructor/destructor functions.  */\n+\n+#if defined(USE_CDTORS_SECTIONS) || defined(USE_INITFINI_ARRAY)\n+\n+#define EH_CTOR_NAME _crtbe_register_frame\n+#define EH_DTOR_NAME _ctrbe_deregister_frame\n+\n+#else\n+\n+/* No specific sections for constructors or destructors: we thus use a\n+   symbol naming convention so that the constructors are then recognized\n+   by munch or whatever tool is used for the final link phase.  */\n+#define EH_CTOR_NAME _GLOBAL__I_00101_0__crtbe_register_frame\n+#define EH_DTOR_NAME _GLOBAL__D_00101_1__crtbe_deregister_frame\n+\n+#endif\n+\n+#ifdef USE_INITFINI_ARRAY\n+/* .init_array and .fini_array is supported starting VxWorks 7.2 in all\n+   cases. The compiler is then configured to always support priorities in\n+   constructors, so we can rely on the constructor and destructor attributes\n+   to generate the proper sections.  */\n+#define EH_CTOR_ATTRIBUTE __attribute__((constructor (101)))\n+#define EH_DTOR_ATTRIBUTE __attribute__((destructor (101)))\n+\n+#else /* USE_INITFINI_ARRAY  */\n+\n+/* Note: Even in case of .ctors/.dtors sections, we can't use the attribute\n+   (constructor (15)) here as gcc may have been configured with constructors\n+   priority disabled.  We will instead craft an explicit section name for this\n+   purpose.  */\n+#define EH_CTOR_ATTRIBUTE\n+#define EH_DTOR_ATTRIBUTE\n+\n+#endif /* USE_INITFINI_ARRAY  */\n+\n+void EH_CTOR_NAME (void);\n+void EH_DTOR_NAME (void);\n+\n+EH_CTOR_ATTRIBUTE void EH_CTOR_NAME (void)\n+{\n+  static struct object object;\n+  __register_frame_info (__EH_FRAME_BEGIN__, &object);\n+}\n+\n+EH_DTOR_ATTRIBUTE void EH_DTOR_NAME (void)\n+{\n+  __deregister_frame_info (__EH_FRAME_BEGIN__);\n+}\n+\n+#ifdef USE_CDTORS_SECTIONS\n+/* As explained above, we need to manually build the sections here as the\n+   compiler may not have support for constructors priority enabled.  */\n+static void (* volatile eh_registration_ctors[])()\n+  __attribute__((section (\".ctors.101\")))\n+= { &EH_CTOR_NAME };\n+static void (* volatile eh_registration_dtors[])()\n+  __attribute__((section (\".dtors.65434\")))\n+= { &EH_DTOR_NAME };\n+#endif\n+\n+/*  ------------------------------ crtend ---------------------------------  */\n+\n+#elif defined (CRT_END) /* ! CRT_BEGIN */\n+\n+/* Terminate the frame unwind info section with a 4byte 0 as a sentinel;\n+   this would be the 'length' field in a real FDE.  */\n+\n+static const char __FRAME_END__[]\n+     __attribute__ ((used, section(__LIBGCC_EH_FRAME_SECTION_NAME__),\n+\t\t     aligned(4)))\n+  = { 0, 0, 0, 0 };\n+\n+#else /* ! CRT_BEGIN & ! CRT_END */\n+\n+#error \"One of CRT_BEGIN or CRT_END must be defined.\"\n+\n+#endif"}]}