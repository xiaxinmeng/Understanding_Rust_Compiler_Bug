{"sha": "eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFhOTNhMGYzZDlmNjdjOGNiYzFkYzg0OWVhNmZlYmE0MzJmZjQxMg==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-02-23T01:13:28Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-08-03T18:58:31Z"}, "message": "rs6000: Add support for _mm_minpos_epu16\n\nAdd a naive implementation of the subject x86 intrinsic to\nease porting.\n\n2021-08-03  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/smmintrin.h (_mm_minpos_epu16): New.", "tree": {"sha": "13ea52f65a812b7ac7de505f425942a0d7d8b882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13ea52f65a812b7ac7de505f425942a0d7d8b882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a77a46d9aeb0166b4b1ee4b52e1cbb4b52c6736f"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "3767a67eada76a3385255a6a08f612c9af50a1c5", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=eaa93a0f3d9f67c8cbc1dc849ea6feba432ff412", "patch": "@@ -296,4 +296,31 @@ _mm_floor_ss (__m128 __A, __m128 __B)\n   return __r;\n }\n \n+/* Return horizontal packed word minimum and its index in bits [15:0]\n+   and bits [18:16] respectively.  */\n+__inline __m128i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_minpos_epu16 (__m128i __A)\n+{\n+  union __u\n+    {\n+      __m128i __m;\n+      __v8hu __uh;\n+    };\n+  union __u __u = { .__m = __A }, __r = { .__m = {0} };\n+  unsigned short __ridx = 0;\n+  unsigned short __rmin = __u.__uh[__ridx];\n+  for (unsigned long __i = 1; __i < 8; __i++)\n+    {\n+      if (__u.__uh[__i] < __rmin)\n+\t{\n+\t  __rmin = __u.__uh[__i];\n+\t  __ridx = __i;\n+\t}\n+    }\n+  __r.__uh[0] = __rmin;\n+  __r.__uh[1] = __ridx;\n+  return __r.__m;\n+}\n+\n #endif"}]}