{"sha": "9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkyOGEzZDUzYTdkNWQyYTlhMmFjMWQ5MDEyZjg2YjQ3NWQxYzRiNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-04-13T01:33:23Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-04-13T01:33:23Z"}, "message": "re PR c++/5189 (g++ -c bug.cpp crashed on simple stupid file)\n\n\tPR c++/5189.\n\t* call.c (add_template_candidate_real): Do not treat member\n\ttemplates as copy constructors.\n\n\tPR c++/5189.\n\t* g++.dg/template/copy1.C: New test.\n\nFrom-SVN: r52260", "tree": {"sha": "eaf1462047a20855fe42368124b60aff8c336af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaf1462047a20855fe42368124b60aff8c336af9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6/comments", "author": null, "committer": null, "parents": [{"sha": "c740732f62c3784700fa3d819af4f408f768dd48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c740732f62c3784700fa3d819af4f408f768dd48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c740732f62c3784700fa3d819af4f408f768dd48"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "ca9251a2d8013b85babbc0d94c4943fa7facae65", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6", "patch": "@@ -1,3 +1,9 @@\n+2002-04-12  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/5189.\n+\t* call.c (add_template_candidate_real): Do not treat member\n+\ttemplates as copy constructors.\n+\n 2002-04-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (duplicate_decls): Do not copy the RTL for a variable"}, {"sha": "12832cb28a6040f9f3b86c3fa66950dd85bab513", "filename": "gcc/cp/call.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6", "patch": "@@ -2221,6 +2221,36 @@ add_template_candidate_real (candidates, tmpl, ctype, explicit_targs,\n   if (fn == error_mark_node)\n     return candidates;\n \n+  /* In [class.copy]:\n+\n+       A member function template is never instantiated to perform the\n+       copy of a class object to an object of its class type.  \n+\n+     It's a little unclear what this means; the standard explicitly\n+     does allow a template to be used to copy a class.  For example,\n+     in:\n+\n+       struct A {\n+         A(A&);\n+\t template <class T> A(const T&);\n+       };\n+       const A f ();\n+       void g () { A a (f ()); }\n+       \n+     the member template will be used to make the copy.  The section\n+     quoted above appears in the paragraph that forbids constructors\n+     whose only parameter is (a possibly cv-qualified variant of) the\n+     class type, and a logical interpretation is that the intent was\n+     to forbid the instantiation of member templates which would then\n+     have that form.  */\n+  if (DECL_CONSTRUCTOR_P (fn) && list_length (arglist) == 2) \n+    {\n+      tree arg_types = FUNCTION_FIRST_USER_PARMTYPE (fn);\n+      if (arg_types && same_type_p (TYPE_MAIN_VARIANT (TREE_VALUE (arg_types)),\n+\t\t\t\t    ctype))\n+\treturn candidates;\n+    }\n+\n   if (obj != NULL_TREE)\n     /* Aha, this is a conversion function.  */\n     cand = add_conv_candidate (candidates, fn, obj, arglist);"}, {"sha": "b04b99b38c9a765f2c7d4413bede24e289d70a47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6", "patch": "@@ -1,3 +1,9 @@\n+2002-04-12  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/5189.\n+\t* call.c (add_template_candidate_real): Do not treat member\n+\ttemplates as copy constructors.\n+\n 2002-04-12  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.c-torture/execute/20020406-1.c (DUPFFnew): Use calloc."}, {"sha": "3b45cc08386f8c557d6ae96f0505b441b4129d68", "filename": "gcc/testsuite/g++.dg/template/copy1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcopy1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcopy1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcopy1.C?ref=9928a3d53a7d5d2a9a2ac1d9012f86b475d1c4b6", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+\n+// Origin: hkluender@otg.com\n+\n+// PR 5189\n+\n+struct A\n+{\n+  A(A&); // { dg-error \"candidate\" \"\" }\n+  template <class T> A(T); \n+};\n+\n+A a = 0; // { dg-error \"no matching function|initializing\" \"\" }\n+"}]}