{"sha": "3dcdeeb24bb56e82edc9c6a136028df504ba1d1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RjZGVlYjI0YmI1NmU4MmVkYzljNmExMzYwMjhkZjUwNGJhMWQxZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2010-12-04T01:47:21Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-04T01:47:21Z"}, "message": "re PR bootstrap/46776 (gogo-tree.cc uses TRAMPOLINE_ALIGNMENT and TRAMPOLINE_SIZE)\n\n\tPR bootstrap/46776\n\t* go-backend.c: New file.\n\t* go-c.h (go_type_alignment): Declare.\n\t(go_field_alignment, go_trampoline_info): Declare.\n\t* Make-lang.in (GO_OBJS): Add go/go-backend.o.\n\t(go/go-backend.o): New target.\n\t(go/go-lang.o): Make dependencies match source file.\n\t(go/expressions.o): Don't depend on $(TM_H) $(TM_P_H).\n\t(go/gogo-tree.o): Don't depend on $(TM_H).\nRemove #include \"tm.h\" from gofrontend/*.cc.\n\nFrom-SVN: r167451", "tree": {"sha": "c171c12e8ffacae44c074e5a825254f5a831b6e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c171c12e8ffacae44c074e5a825254f5a831b6e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/comments", "author": null, "committer": null, "parents": [{"sha": "43dcc93137e15a6dd85d73d869764dafcc52fb67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43dcc93137e15a6dd85d73d869764dafcc52fb67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43dcc93137e15a6dd85d73d869764dafcc52fb67"}], "stats": {"total": 153, "additions": 109, "deletions": 44}, "files": [{"sha": "b68f4bb070bb542110e9245c653a791743d1ed0b", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=3dcdeeb24bb56e82edc9c6a136028df504ba1d1e", "patch": "@@ -1,3 +1,15 @@\n+2010-12-03  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR bootstrap/46776\n+\t* go-backend.c: New file.\n+\t* go-c.h (go_type_alignment): Declare.\n+\t(go_field_alignment, go_trampoline_info): Declare.\n+\t* Make-lang.in (GO_OBJS): Add go/go-backend.o.\n+\t(go/go-backend.o): New target.\n+\t(go/go-lang.o): Make dependencies match source file.\n+\t(go/expressions.o): Don't depend on $(TM_H) $(TM_P_H).\n+\t(go/gogo-tree.o): Don't depend on $(TM_H).\n+\n 2010-12-03  Ian Lance Taylor  <iant@google.com>\n \n \t* config-lang.in (build_by_default): Set to no."}, {"sha": "fc981d4a5fb8b98c3e4bf45159b0a7cad37ff269", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=3dcdeeb24bb56e82edc9c6a136028df504ba1d1e", "patch": "@@ -48,6 +48,7 @@ GO_OBJS = \\\n \tgo/dataflow.o \\\n \tgo/export.o \\\n \tgo/expressions.o \\\n+\tgo/go-backend.o \\\n \tgo/go-dump.o \\\n \tgo/go-lang.o \\\n \tgo/go.o \\\n@@ -215,10 +216,12 @@ GO_STATEMENTS_H = go/gofrontend/statements.h go/gofrontend/operator.h\n GO_EXPRESSIONS_H = go/gofrontend/expressions.h go/gofrontend/operator.h\n GO_IMPORT_H = go/gofrontend/import.h go/gofrontend/export.h\n \n-go/go-lang.o: go/go-lang.c $(GO_SYSTEM_H) coretypes.h opts.h $(TREE_H) \\\n-\t$(GIMPLE_H) $(GGC_H) $(TOPLEV_H) debug.h options.h $(FLAGS_H) \\\n-\tconvert.h langhooks.h $(LANGHOOKS_DEF_H) $(EXCEPT_H) $(TARGET_H) \\\n-\t$(DIAGNOSTIC_H) $(GO_C_H) gt-go-go-lang.h gtype-go.h\n+go/go-backend.o: go/go-backend.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+\t$(TREE_H) $(TM_H) $(TM_P_H)\n+go/go-lang.o: go/go-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(OPTS_H) \\\n+\t$(TREE_H) $(GIMPLE_H) $(GGC_H) $(TOPLEV_H) debug.h options.h \\\n+\t$(FLAGS_H) convert.h $(DIAGNOSTIC_H) langhooks.h $(LANGHOOKS_DEF_H) \\\n+\t$(EXCEPT_H) $(TARGET_H) $(GO_C_H) gt-go-go-lang.h gtype-go.h\n \n GOINCLUDES = -I $(srcdir)/go -I $(srcdir)/go/gofrontend\n \n@@ -232,14 +235,14 @@ go/export.o: go/gofrontend/export.cc $(GO_SYSTEM_H) \\\n \t$(GO_GOGO_H) $(GO_TYPES_H) $(GO_STATEMENTS_H) go/gofrontend/export.h\n go/expressions.o: go/gofrontend/expressions.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n \tintl.h $(TREE_H) $(GIMPLE_H) tree-iterator.h convert.h $(REAL_H) \\\n-\trealmpfr.h $(TM_H) $(TM_P_H) $(GO_C_H) $(GO_GOGO_H) $(GO_TYPES_H) \\\n+\trealmpfr.h $(GO_C_H) $(GO_GOGO_H) $(GO_TYPES_H) \\\n \tgo/gofrontend/export.h $(GO_IMPORT_H) $(GO_STATEMENTS_H) $(GO_LEX_H) \\\n \t$(GO_EXPRESSIONS_H)\n go/go.o: go/gofrontend/go.cc $(GO_SYSTEM_H) $(GO_C_H) $(GO_LEX_H) \\\n \t$(GO_PARSE_H) $(GO_GOGO_H)\n go/go-dump.o: go/gofrontend/go-dump.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n \tgo/gofrontend/go-dump.h\n-go/gogo-tree.o: go/gofrontend/gogo-tree.cc $(GO_SYSTEM_H) $(TM_H) $(TOPLEV_H) \\\n+go/gogo-tree.o: go/gofrontend/gogo-tree.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n \t$(TREE_H) $(GIMPLE_H) tree-iterator.h $(CGRAPH_H) langhooks.h \\\n \tconvert.h output.h $(DIAGNOSTIC_H) $(RTL_H) $(GO_TYPES_H) \\\n \t$(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) $(GO_GOGO_H)"}, {"sha": "15986dcbed64fc4df45b332b368a7071bef9892c", "filename": "gcc/go/go-backend.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2Fgo-backend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2Fgo-backend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-backend.c?ref=3dcdeeb24bb56e82edc9c6a136028df504ba1d1e", "patch": "@@ -0,0 +1,72 @@\n+/* go-backend.c -- Go frontend interface to gcc backend.\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+\n+#include \"go-c.h\"\n+\n+/* This file holds all the cases where the Go frontend needs\n+   information from gcc's backend.  */\n+\n+/* Return the alignment in bytes of a value of type T.  */\n+\n+unsigned int\n+go_type_alignment (tree t)\n+{\n+  return TYPE_ALIGN_UNIT (t);\n+}\n+\n+/* Return the alignment in bytes of a struct field of type T.  */\n+\n+unsigned int\n+go_field_alignment (tree t)\n+{\n+  unsigned int v;\n+\n+  v = TYPE_ALIGN (t);\n+\n+#ifdef BIGGEST_FIELD_ALIGNMENT\n+  if (v > BIGGEST_FIELD_ALIGNMENT)\n+    v = BIGGEST_FIELD_ALIGNMENT;\n+#endif\n+\n+#ifdef ADJUST_FIELD_ALIGN\n+  {\n+    tree field;\n+    field = build_decl (UNKNOWN_LOCATION, FIELD_DECL, NULL, t);\n+    v = ADJUST_FIELD_ALIGN (field, v);\n+  }\n+#endif\n+\n+  return v / BITS_PER_UNIT;\n+}\n+\n+/* Return the size and alignment of a trampoline.  */\n+\n+void\n+go_trampoline_info (unsigned int *size, unsigned int *alignment)\n+{\n+  *size = TRAMPOLINE_SIZE;\n+  *alignment = TRAMPOLINE_ALIGNMENT;\n+}"}, {"sha": "19d5c05825b1a9c47abd263ae6b4e9db9bbcf460", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=3dcdeeb24bb56e82edc9c6a136028df504ba1d1e", "patch": "@@ -59,6 +59,12 @@ extern void go_preserve_from_gc (tree);\n \n extern const char *go_localize_identifier (const char*);\n \n+extern unsigned int go_type_alignment (tree);\n+\n+extern unsigned int go_field_alignment (tree);\n+\n+extern void go_trampoline_info (unsigned int *size, unsigned int *alignment);\n+\n #if defined(__cplusplus) && !defined(ENABLE_BUILD_WITH_CXX)\n } /* End extern \"C\".  */\n #endif"}, {"sha": "0387ee4fd9f03d19343a297389a881c998be8f9e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3dcdeeb24bb56e82edc9c6a136028df504ba1d1e", "patch": "@@ -21,8 +21,6 @@ extern \"C\"\n #include \"convert.h\"\n #include \"real.h\"\n #include \"realmpfr.h\"\n-#include \"tm.h\"\n-#include \"tm_p.h\"\n \n #ifndef ENABLE_BUILD_WITH_CXX\n }\n@@ -6737,25 +6735,14 @@ Builtin_call_expression::do_integer_constant_value(bool iota_is_constant,\n \t}\n       else if (this->code_ == BUILTIN_ALIGNOF)\n \t{\n-\t  val_long = TYPE_ALIGN(arg_type_tree);\n-\t  if (arg->field_reference_expression() != NULL)\n+\t  if (arg->field_reference_expression() == NULL)\n+\t    val_long = go_type_alignment(arg_type_tree);\n+\t  else\n \t    {\n \t      // Calling unsafe.Alignof(s.f) returns the alignment of\n \t      // the type of f when it is used as a field in a struct.\n-#ifdef BIGGEST_FIELD_ALIGNMENT\n-\t      if (val_long > BIGGEST_FIELD_ALIGNMENT)\n-\t\tval_long = BIGGEST_FIELD_ALIGNMENT;\n-#endif\n-#ifdef ADJUST_FIELD_ALIGN\n-\t      // A separate declaration avoids a warning promoted to\n-\t      // an error if ADJUST_FIELD_ALIGN ignores FIELD.\n-\t      tree field;\n-\t      field = build_decl(UNKNOWN_LOCATION, FIELD_DECL, NULL,\n-\t\t\t\t      arg_type_tree);\n-\t      val_long = ADJUST_FIELD_ALIGN(field, val_long);\n-#endif\n+\t      val_long = go_field_alignment(arg_type_tree);\n \t    }\n-\t  val_long /= BITS_PER_UNIT;\n \t}\n       else\n \tgcc_unreachable();\n@@ -12033,26 +12020,11 @@ Type_info_expression::do_get_tree(Translate_context* context)\n \t\t\t    TYPE_SIZE_UNIT(type_tree));\n   else\n     {\n-      unsigned HOST_WIDE_INT val;\n+      unsigned int val;\n       if (this->type_info_ == TYPE_INFO_ALIGNMENT)\n-\tval = TYPE_ALIGN_UNIT(type_tree);\n+\tval = go_type_alignment(type_tree);\n       else\n-\t{\n-\t  gcc_assert(this->type_info_ == TYPE_INFO_FIELD_ALIGNMENT);\n-\t  val = TYPE_ALIGN(type_tree);\n-#ifdef BIGGEST_FIELD_ALIGMENT\n-\t  if (val > BIGGEST_FIELD_ALIGNMENT)\n-\t    val = BIGGEST_FIELD_ALIGNMENT;\n-#endif\n-#ifdef ADJUST_FIELD_ALIGN\n-\t  {\n-\t    tree f = build_decl(UNKNOWN_LOCATION, FIELD_DECL, NULL, type_tree);\n-\t    val = ADJUST_FIELD_ALIGN(f, val);\n-\t  }\n-#endif\n-\t  val /= BITS_PER_UNIT;\n-\t}\n-\n+\tval = go_field_alignment(type_tree);\n       return build_int_cstu(val_type_tree, val);\n     }\n }"}, {"sha": "41e621e2c90e2334c04bf12017ead1a5eef90d16", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dcdeeb24bb56e82edc9c6a136028df504ba1d1e/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=3dcdeeb24bb56e82edc9c6a136028df504ba1d1e", "patch": "@@ -13,7 +13,6 @@ extern \"C\"\n {\n #endif\n \n-#include \"tm.h\"\n #include \"toplev.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n@@ -3048,8 +3047,9 @@ Gogo::trampoline_type_tree()\n   static tree type_tree;\n   if (type_tree == NULL_TREE)\n     {\n-      unsigned int align = TRAMPOLINE_ALIGNMENT;\n-      unsigned int size = TRAMPOLINE_SIZE;\n+      unsigned int size;\n+      unsigned int align;\n+      go_trampoline_info(&size, &align);\n       tree t = build_index_type(build_int_cst(integer_type_node, size - 1));\n       t = build_array_type(char_type_node, t);\n "}]}