{"sha": "26d4fec72e0319f2af9416ceaa9c76430b9e808d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkNGZlYzcyZTAzMTlmMmFmOTQxNmNlYWE5Yzc2NDMwYjllODA4ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-13T13:31:16Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-13T13:31:16Z"}, "message": "c-parse.in (initelt): Give appropriate pedantic warnings...\n\n\t* c-parse.in (initelt): Give appropriate pedantic warnings,\n\tdepending on flag_isoc99, for non-ISO syntax and for C99 syntax\n\toutside C99 mode.\n\t(designator): If pedantic, pedwarn for a designator specifying a\n\trange of elements.\n\t* c-typeck.c (set_init_index, set_init_label): Don't pedwarn for\n\tthese cases.\n\t* extend.texi: Document the C99 syntax as the preferred syntax,\n\tand the pre-2.5 syntax as obsolete.  Mention use of designator\n\tlists for nested subobjects.\n\nFrom-SVN: r37421", "tree": {"sha": "7f9d7597fc09c082ffe833c9bc59a6994331b0a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f9d7597fc09c082ffe833c9bc59a6994331b0a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d4fec72e0319f2af9416ceaa9c76430b9e808d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d4fec72e0319f2af9416ceaa9c76430b9e808d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d4fec72e0319f2af9416ceaa9c76430b9e808d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d4fec72e0319f2af9416ceaa9c76430b9e808d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1173593dd6368a86253e21fcb00ff8496c0eac34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1173593dd6368a86253e21fcb00ff8496c0eac34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1173593dd6368a86253e21fcb00ff8496c0eac34"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "c058f68022e3834cce3dce8e50b1c4b195337d60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d4fec72e0319f2af9416ceaa9c76430b9e808d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d4fec72e0319f2af9416ceaa9c76430b9e808d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26d4fec72e0319f2af9416ceaa9c76430b9e808d", "patch": "@@ -1,3 +1,16 @@\n+2000-11-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-parse.in (initelt): Give appropriate pedantic warnings,\n+\tdepending on flag_isoc99, for non-ISO syntax and for C99 syntax\n+\toutside C99 mode.\n+\t(designator): If pedantic, pedwarn for a designator specifying a\n+\trange of elements.\n+\t* c-typeck.c (set_init_index, set_init_label): Don't pedwarn for\n+\tthese cases.\n+\t* extend.texi: Document the C99 syntax as the preferred syntax,\n+\tand the pre-2.5 syntax as obsolete.  Mention use of designator\n+\tlists for nested subobjects.\n+\n 2000-11-13  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* diagnostic.c (vbuild_message_string, output_do_printf, vnotice):"}, {"sha": "3550befcd4cfbce6756bd9c76195a11df0d864bf", "filename": "gcc/c-parse.in", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d4fec72e0319f2af9416ceaa9c76430b9e808d/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d4fec72e0319f2af9416ceaa9c76430b9e808d/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=26d4fec72e0319f2af9416ceaa9c76430b9e808d", "patch": "@@ -1132,9 +1132,15 @@ initlist1:\n    It may use braces.  */\n initelt:\n \t  designator_list '=' initval\n+\t\t{ if (pedantic && ! flag_isoc99)\n+\t\t    pedwarn (\"ISO C89 forbids specifying subobject to initialize\"); }\n \t| designator initval\n+\t\t{ if (pedantic)\n+\t\t    pedwarn (\"obsolete use of designated initializer without `='\"); }\n \t| identifier ':'\n-\t\t{ set_init_label ($1); }\n+\t\t{ set_init_label ($1);\n+\t\t  if (pedantic)\n+\t\t    pedwarn (\"obsolete use of designated initializer with `:'\"); }\n \t  initval\n \t| initval\n \t;\n@@ -1162,7 +1168,9 @@ designator:\n \t   so don't include these productions in the Objective-C grammar.  */\n ifc\n \t| '[' expr_no_commas ELLIPSIS expr_no_commas ']'\n-\t\t{ set_init_index ($2, $4); }\n+\t\t{ set_init_index ($2, $4);\n+\t\t  if (pedantic)\n+\t\t    pedwarn (\"ISO C forbids specifying range of elements to initialize\"); }\n \t| '[' expr_no_commas ']'\n \t\t{ set_init_index ($2, NULL_TREE); }\n end ifc"}, {"sha": "08523b5abf2859ab21eec9ad097cf9993d665623", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d4fec72e0319f2af9416ceaa9c76430b9e808d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d4fec72e0319f2af9416ceaa9c76430b9e808d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=26d4fec72e0319f2af9416ceaa9c76430b9e808d", "patch": "@@ -5438,12 +5438,7 @@ set_init_index (first, last)\n       if (last != 0 && tree_int_cst_lt (last, first))\n \terror_init (\"empty index range in initializer\");\n       else\n-\t{\n-\t  if (pedantic)\n-\t    pedwarn (\"ISO C89 forbids specifying element to initialize\");\n-\n-\t  constructor_range_end = last ? convert (bitsizetype, last) : 0;\n-\t}\n+\tconstructor_range_end = last ? convert (bitsizetype, last) : 0;\n     }\n }\n \n@@ -5477,11 +5472,7 @@ set_init_label (fieldname)\n     error (\"field `%s' already initialized\",\n \t   IDENTIFIER_POINTER (fieldname));\n   else\n-    {\n-      constructor_fields = tail;\n-      if (pedantic)\n-\tpedwarn (\"ISO C89 forbids specifying structure member to initialize\");\n-    }\n+    constructor_fields = tail;\n }\n \f\n /* Add a new initializer to the tree of pending initializers.  PURPOSE"}, {"sha": "573b36cd331a84300a1336e307b5eab0738ce869", "filename": "gcc/extend.texi", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d4fec72e0319f2af9416ceaa9c76430b9e808d/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d4fec72e0319f2af9416ceaa9c76430b9e808d/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=26d4fec72e0319f2af9416ceaa9c76430b9e808d", "patch": "@@ -1156,19 +1156,20 @@ to a cast.\n @cindex labeled elements in initializers\n @cindex case labels in initializers\n \n-Standard C requires the elements of an initializer to appear in a fixed\n+Standard C89 requires the elements of an initializer to appear in a fixed\n order, the same as the order of the elements in the array or structure\n being initialized.\n \n-In GNU C you can give the elements in any order, specifying the array\n-indices or structure field names they apply to.  This extension is not\n+In ISO C99 you can give the elements in any order, specifying the array\n+indices or structure field names they apply to, and GNU C allows this as\n+an extension in C89 mode as well.  This extension is not\n implemented in GNU C++.\n \n-To specify an array index, write @samp{[@var{index}]} or\n+To specify an array index, write\n @samp{[@var{index}] =} before the element value.  For example,\n \n @example\n-int a[6] = @{ [4] 29, [2] = 15 @};\n+int a[6] = @{ [4] = 29, [2] = 15 @};\n @end example\n \n @noindent\n@@ -1182,8 +1183,13 @@ int a[6] = @{ 0, 0, 15, 0, 29, 0 @};\n The index values must be constant expressions, even if the array being\n initialized is automatic.\n \n+An alternative syntax for this which has been obsolete since GCC 2.5 but\n+GCC still accepts is to write @samp{[@var{index}]} before the element\n+value, with no @samp{=}.\n+\n To initialize a range of elements to the same value, write\n-@samp{[@var{first} ... @var{last}] = @var{value}}.  For example,\n+@samp{[@var{first} ... @var{last}] = @var{value}}.  This is a GNU\n+extension.  For example,\n \n @example\n int widths[] = @{ [0 ... 9] = 1, [10 ... 99] = 2, [100] = 3 @};\n@@ -1194,7 +1200,7 @@ Note that the length of the array is the highest value specified\n plus one.\n \n In a structure initializer, specify the name of a field to initialize\n-with @samp{@var{fieldname}:} before the element value.  For example,\n+with @samp{.@var{fieldname} =} before the element value.  For example,\n given the following structure,\n \n @example\n@@ -1205,7 +1211,7 @@ struct point @{ int x, y; @};\n the following initialization\n \n @example\n-struct point p = @{ y: yvalue, x: xvalue @};\n+struct point p = @{ .y = yvalue, .x = xvalue @};\n @end example\n \n @noindent\n@@ -1215,11 +1221,11 @@ is equivalent to\n struct point p = @{ xvalue, yvalue @};\n @end example\n \n-Another syntax which has the same meaning is @samp{.@var{fieldname} =}.,\n-as shown here:\n+Another syntax which has the same meaning, obsolete since GCC 2.5, is\n+@samp{@var{fieldname}:}, as shown here:\n \n @example\n-struct point p = @{ .y = yvalue, .x = xvalue @};\n+struct point p = @{ y: yvalue, x: xvalue @};\n @end example\n \n You can also use an element label (with either the colon syntax or the\n@@ -1229,7 +1235,7 @@ of the union should be used.  For example,\n @example\n union foo @{ int i; double d; @};\n \n-union foo f = @{ d: 4 @};\n+union foo f = @{ .d = 4 @};\n @end example\n \n @noindent\n@@ -1264,6 +1270,16 @@ int whitespace[256]\n       ['\\f'] = 1, ['\\n'] = 1, ['\\r'] = 1 @};\n @end example\n \n+You can also write a series of @samp{.@var{fieldname}} and\n+@samp{[@var{index}]} element labels before an @samp{=} to specify a\n+nested subobject to initialize; the list is taken relative to the\n+subobject corresponding to the closest surrounding brace pair.  For\n+example, with the @samp{struct point} declaration above:\n+\n+@example\n+struct point ptarray[10] = @{ [2].y = yv2, [2].x = xv2, [0].x = xv0 @};\n+@end example\n+\n @node Case Ranges\n @section Case Ranges\n @cindex case ranges"}]}