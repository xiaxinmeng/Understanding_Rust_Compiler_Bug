{"sha": "0ec05c678aa9082367c66b88f20cdc7e48ff9b83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVjMDVjNjc4YWE5MDgyMzY3YzY2Yjg4ZjIwY2RjN2U0OGZmOWI4Mw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-09T23:23:26Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-09T23:23:26Z"}, "message": "re PR fortran/46328 ([OOP] type-bound operator call with non-trivial polymorphic operand)\n\n2012-01-09  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/46328\n        * gfortran.dg/typebound_operator_11.f90: New.\n\nFrom-SVN: r183039", "tree": {"sha": "585403ce656c744d818bf04718321775f449ef8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/585403ce656c744d818bf04718321775f449ef8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ec05c678aa9082367c66b88f20cdc7e48ff9b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec05c678aa9082367c66b88f20cdc7e48ff9b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec05c678aa9082367c66b88f20cdc7e48ff9b83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec05c678aa9082367c66b88f20cdc7e48ff9b83/comments", "author": null, "committer": null, "parents": [{"sha": "243b92d11e983eaa85919ed223fe6a3bca8cf890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/243b92d11e983eaa85919ed223fe6a3bca8cf890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/243b92d11e983eaa85919ed223fe6a3bca8cf890"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "d360a7ffcd7eaba6482444ff198c6c57aad16338", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec05c678aa9082367c66b88f20cdc7e48ff9b83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec05c678aa9082367c66b88f20cdc7e48ff9b83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ec05c678aa9082367c66b88f20cdc7e48ff9b83", "patch": "@@ -1,3 +1,8 @@\n+2012-01-09  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/46328\n+\t* gfortran.dg/typebound_operator_11.f90: New.\n+\n 2012-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/array18.adb: New test.\n@@ -12,7 +17,7 @@\n \n 2012-01-09  Martin Jambor  <mjambor@suse.cz>\n \n-        PR tree-optimization/51759\n+\tPR tree-optimization/51759\n \t* g++.dg/ipa/pr51759.C: New test.\n \n 2012-01-09  Tobias Burnus  <burnus@net-b.de>"}, {"sha": "1f5c19530d84eb9ced34bb84c7980b2e04bfb1d8", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_11.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec05c678aa9082367c66b88f20cdc7e48ff9b83/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec05c678aa9082367c66b88f20cdc7e48ff9b83/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_11.f90?ref=0ec05c678aa9082367c66b88f20cdc7e48ff9b83", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do compile }\n+!\n+! PR fortran/46328\n+!\n+! Contributed by Damian Rouson\n+!\n+module foo_module\n+  type ,abstract :: foo\n+  contains\n+    procedure(t_interface) ,deferred :: t\n+    procedure(assign_interface) ,deferred :: assign\n+    procedure(multiply_interface) ,deferred :: multiply\n+    generic :: operator(*) => multiply\n+    generic :: assignment(=) => assign\n+  end type\n+  abstract interface\n+    function t_interface(this)\n+      import :: foo \n+      class(foo) :: this\n+      class(foo), allocatable ::t_interface\n+    end function \n+    function multiply_interface(lhs,rhs) \n+      import :: foo \n+      class(foo), allocatable :: multiply_interface\n+      class(foo), intent(in) :: lhs\n+      real, intent(in) :: rhs\n+    end function \n+    subroutine assign_interface(lhs,rhs) \n+      import :: foo \n+      class(foo), intent(in) :: rhs\n+      class(foo), intent(inout) :: lhs\n+    end subroutine \n+  end interface\n+contains\n+  subroutine bar(x,dt)    \n+    class(foo) :: x\n+    real, intent(in) :: dt     \n+    x = x%t()*dt\n+  end subroutine \n+end module\n+\n+! { dg-final { cleanup-modules \"foo_module\" } }"}]}