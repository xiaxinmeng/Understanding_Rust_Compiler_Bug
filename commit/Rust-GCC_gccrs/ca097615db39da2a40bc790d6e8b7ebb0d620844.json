{"sha": "ca097615db39da2a40bc790d6e8b7ebb0d620844", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwOTc2MTVkYjM5ZGEyYTQwYmM3OTBkNmU4YjdlYmIwZDYyMDg0NA==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "1998-01-17T22:20:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-17T22:20:32Z"}, "message": "i386.md: Remove redundant integer push patterns.\n\n        * i386.md: Remove redundant integer push patterns.\n        Don't bother checking for TARGET_PUSH_MEMORY when\n        pushing constants or registers.\n\nFrom-SVN: r17401", "tree": {"sha": "8afc7614644f4f76eb97b4b198b91607394552d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8afc7614644f4f76eb97b4b198b91607394552d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca097615db39da2a40bc790d6e8b7ebb0d620844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca097615db39da2a40bc790d6e8b7ebb0d620844", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca097615db39da2a40bc790d6e8b7ebb0d620844", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca097615db39da2a40bc790d6e8b7ebb0d620844/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4399e7a3244b22aeebef9ceb85d978769709ad47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4399e7a3244b22aeebef9ceb85d978769709ad47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4399e7a3244b22aeebef9ceb85d978769709ad47"}], "stats": {"total": 49, "additions": 16, "deletions": 33}, "files": [{"sha": "7fe459942355ad7395a83e249486ab5dad6999e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca097615db39da2a40bc790d6e8b7ebb0d620844/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca097615db39da2a40bc790d6e8b7ebb0d620844/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca097615db39da2a40bc790d6e8b7ebb0d620844", "patch": "@@ -1,3 +1,9 @@\n+Sat Jan 17 23:22:59 1998  John Wehle  (john@feith.com)\n+\n+\t* i386.md: Remove redundant integer push patterns.\n+\tDon't bother checking for TARGET_PUSH_MEMORY when\n+\tpushing constants or registers.\n+\n Sat Jan 17 22:35:39 1998  Mumit Khan <khan@xraylith.wisc.edu>\n \t\t\t  J.J VanderHeijden <J.J.vanderHeijden@student.utwente.nl>\n \t"}, {"sha": "9d1dad5a113378934b7c68a732bdaccafb2743b8", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca097615db39da2a40bc790d6e8b7ebb0d620844/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca097615db39da2a40bc790d6e8b7ebb0d620844/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ca097615db39da2a40bc790d6e8b7ebb0d620844", "patch": "@@ -832,25 +832,18 @@\n ;; and each is preceded by a corresponding push-insn pattern\n ;; (since pushes are not general_operands on the 386).\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n-\t(match_operand:SI 1 \"general_operand\" \"g\"))]\n-  \"TARGET_PUSH_MEMORY\"\n-  \"push%L0 %1\")\n-\n-;; If not a 386, it is faster to move MEM to a REG and then push, rather than\n-;; push MEM directly.\n-\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n \t(match_operand:SI 1 \"nonmemory_operand\" \"ri\"))]\n-  \"!TARGET_PUSH_MEMORY && TARGET_MOVE\"\n+  \"\"\n   \"push%L0 %1\")\n \n+;; On a 386, it is faster to push MEM directly.\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n-\t(match_operand:SI 1 \"nonmemory_operand\" \"ri\"))]\n-  \"!TARGET_PUSH_MEMORY && !TARGET_MOVE\"\n+\t(match_operand:SI 1 \"memory_operand\" \"m\"))]\n+  \"TARGET_PUSH_MEMORY\"\n   \"push%L0 %1\")\n \n ;; General case of fullword move.\n@@ -909,22 +902,16 @@\n   return AS2 (mov%L0,%1,%0);\n }\")\n \n-(define_insn \"\"\n-  [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n-\t(match_operand:HI 1 \"general_operand\" \"g\"))]\n-  \"TARGET_PUSH_MEMORY\"\n-  \"push%W0 %1\")\n-\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n \t(match_operand:HI 1 \"nonmemory_operand\" \"ri\"))]\n-  \"!TARGET_PUSH_MEMORY && TARGET_MOVE\"\n+  \"\"\n   \"push%W0 %1\")\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n-\t(match_operand:HI 1 \"nonmemory_operand\" \"ri\"))]\n-  \"!TARGET_PUSH_MEMORY && !TARGET_MOVE\"\n+\t(match_operand:HI 1 \"memory_operand\" \"m\"))]\n+  \"TARGET_PUSH_MEMORY\"\n   \"push%W0 %1\")\n \n ;; On i486, an incl and movl are both faster than incw and movw.\n@@ -1038,22 +1025,12 @@\n   [(set (match_operand:QI 0 \"push_operand\" \"=<\")\n \t(match_operand:QI 1 \"const_int_operand\" \"n\"))]\n   \"\"\n-  \"* return AS1 (push%W0,%1);\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:QI 0 \"push_operand\" \"=<\")\n-\t(match_operand:QI 1 \"register_operand\" \"q\"))]\n-  \"!TARGET_MOVE\"\n-  \"*\n-{\n-  operands[1] = gen_rtx (REG, HImode, REGNO (operands[1]));\n-  return AS1 (push%W0,%1);\n-}\")\n+  \"push%W0,%1\")\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"push_operand\" \"=<\")\n \t(match_operand:QI 1 \"register_operand\" \"q\"))]\n-  \"TARGET_MOVE\"\n+  \"\"\n   \"*\n {\n   operands[1] = gen_rtx (REG, HImode, REGNO (operands[1]));"}]}