{"sha": "57751dd6cb0e941b9181e54edef85a795c108b8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3NTFkZDZjYjBlOTQxYjkxODFlNTRlZGVmODVhNzk1YzEwOGI4YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-11-14T05:42:37Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-11-14T05:42:37Z"}, "message": "* gthr-vxworks.h: Fix formatting.\n\nFrom-SVN: r59095", "tree": {"sha": "0d7650d05c20a61df548f26b8f80ca740eed8640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d7650d05c20a61df548f26b8f80ca740eed8640"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57751dd6cb0e941b9181e54edef85a795c108b8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57751dd6cb0e941b9181e54edef85a795c108b8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57751dd6cb0e941b9181e54edef85a795c108b8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57751dd6cb0e941b9181e54edef85a795c108b8a/comments", "author": null, "committer": null, "parents": [{"sha": "1fccfa1e44b8ebb3ae6a8bb1107913566cb2a381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fccfa1e44b8ebb3ae6a8bb1107913566cb2a381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fccfa1e44b8ebb3ae6a8bb1107913566cb2a381"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "bdb0bd79b4b609d9a9e2c61b4b7dd497fc0fdf9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57751dd6cb0e941b9181e54edef85a795c108b8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57751dd6cb0e941b9181e54edef85a795c108b8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57751dd6cb0e941b9181e54edef85a795c108b8a", "patch": "@@ -1,3 +1,7 @@\n+2002-11-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* gthr-vxworks.h: Fix formatting.\n+\n 2002-11-13  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/install.texi (Testing): Document extra Java testing."}, {"sha": "c85b5e535f37ee1462eb70458b9a0b35ce75167a", "filename": "gcc/gthr-vxworks.h", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57751dd6cb0e941b9181e54edef85a795c108b8a/gcc%2Fgthr-vxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57751dd6cb0e941b9181e54edef85a795c108b8a/gcc%2Fgthr-vxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-vxworks.h?ref=57751dd6cb0e941b9181e54edef85a795c108b8a", "patch": "@@ -39,15 +39,15 @@ static void *thread_local_storage = NULL;\n \n /* Initialize the threads subsystem.  */\n int\n-__gthread_objc_init_thread_system(void)\n+__gthread_objc_init_thread_system (void)\n {\n   /* No thread support available */\n   return -1;\n }\n \n /* Close the threads subsystem.  */\n int\n-__gthread_objc_close_thread_system(void)\n+__gthread_objc_close_thread_system (void)\n {\n   /* No thread support available */\n   return -1;\n@@ -57,63 +57,63 @@ __gthread_objc_close_thread_system(void)\n \n /* Create a new thread of execution.  */\n objc_thread_t\n-__gthread_objc_thread_detach(void (*func)(void *arg), void *arg)\n+__gthread_objc_thread_detach (void (*func)(void *arg), void *arg)\n {\n   /* No thread support available */\n   return NULL;\n }\n \n /* Set the current thread's priority.  */\n int\n-__gthread_objc_thread_set_priority(int priority)\n+__gthread_objc_thread_set_priority (int priority)\n {\n   /* No thread support available */\n   return -1;\n }\n \n /* Return the current thread's priority.  */\n int\n-__gthread_objc_thread_get_priority(void)\n+__gthread_objc_thread_get_priority (void)\n {\n   return OBJC_THREAD_INTERACTIVE_PRIORITY;\n }\n \n /* Yield our process time to another thread.  */\n void\n-__gthread_objc_thread_yield(void)\n+__gthread_objc_thread_yield (void)\n {\n   return;\n }\n \n /* Terminate the current thread.  */\n int\n-__gthread_objc_thread_exit(void)\n+__gthread_objc_thread_exit (void)\n {\n   /* No thread support available */\n   /* Should we really exit the program */\n-  /* exit(&__objc_thread_exit_status); */\n+  /* exit (&__objc_thread_exit_status); */\n   return -1;\n }\n \n /* Returns an integer value which uniquely describes a thread.  */\n objc_thread_t\n-__gthread_objc_thread_id(void)\n+__gthread_objc_thread_id (void)\n {\n   /* No thread support, use 1.  */\n-  return (objc_thread_t)1;\n+  return (objc_thread_t) 1;\n }\n \n /* Sets the thread's local storage pointer.  */\n int\n-__gthread_objc_thread_set_data(void *value)\n+__gthread_objc_thread_set_data (void *value)\n {\n   thread_local_storage = value;\n   return 0;\n }\n \n /* Returns the thread's local storage pointer.  */\n void *\n-__gthread_objc_thread_get_data(void)\n+__gthread_objc_thread_get_data (void)\n {\n   return thread_local_storage;\n }\n@@ -122,37 +122,37 @@ __gthread_objc_thread_get_data(void)\n \n /* Allocate a mutex.  */\n int\n-__gthread_objc_mutex_allocate(objc_mutex_t mutex)\n+__gthread_objc_mutex_allocate (objc_mutex_t mutex)\n {\n   return 0;\n }\n \n /* Deallocate a mutex.  */\n int\n-__gthread_objc_mutex_deallocate(objc_mutex_t mutex)\n+__gthread_objc_mutex_deallocate (objc_mutex_t mutex)\n {\n   return 0;\n }\n \n /* Grab a lock on a mutex.  */\n int\n-__gthread_objc_mutex_lock(objc_mutex_t mutex)\n+__gthread_objc_mutex_lock (objc_mutex_t mutex)\n {\n   /* There can only be one thread, so we always get the lock */\n   return 0;\n }\n \n /* Try to grab a lock on a mutex.  */\n int\n-__gthread_objc_mutex_trylock(objc_mutex_t mutex)\n+__gthread_objc_mutex_trylock (objc_mutex_t mutex)\n {\n   /* There can only be one thread, so we always get the lock */\n   return 0;\n }\n \n /* Unlock the mutex */\n int\n-__gthread_objc_mutex_unlock(objc_mutex_t mutex)\n+__gthread_objc_mutex_unlock (objc_mutex_t mutex)\n {\n   return 0;\n }\n@@ -161,35 +161,35 @@ __gthread_objc_mutex_unlock(objc_mutex_t mutex)\n \n /* Allocate a condition.  */\n int\n-__gthread_objc_condition_allocate(objc_condition_t condition)\n+__gthread_objc_condition_allocate (objc_condition_t condition)\n {\n   return 0;\n }\n \n /* Deallocate a condition.  */\n int\n-__gthread_objc_condition_deallocate(objc_condition_t condition)\n+__gthread_objc_condition_deallocate (objc_condition_t condition)\n {\n   return 0;\n }\n \n /* Wait on the condition */\n int\n-__gthread_objc_condition_wait(objc_condition_t condition, objc_mutex_t mutex)\n+__gthread_objc_condition_wait (objc_condition_t condition, objc_mutex_t mutex)\n {\n   return 0;\n }\n \n /* Wake up all threads waiting on this condition.  */\n int\n-__gthread_objc_condition_broadcast(objc_condition_t condition)\n+__gthread_objc_condition_broadcast (objc_condition_t condition)\n {\n   return 0;\n }\n \n /* Wake up one thread waiting on this condition.  */\n int\n-__gthread_objc_condition_signal(objc_condition_t condition)\n+__gthread_objc_condition_signal (objc_condition_t condition)\n {\n   return 0;\n }\n@@ -229,12 +229,12 @@ static void\n __ehdtor (void *pTcb)\n {\n   int tid = (int) pTcb;\n-  void *p = (void*)taskVarGet(tid, &eh_context_key);\n-  if (p != (void*)-1)\n+  void *p = (void *) taskVarGet (tid, &eh_context_key);\n+  if (p != (void *) -1)\n     {\n       if (p)\n \tfree (p);\n-      taskVarSet(tid, &eh_context_key, 0);\n+      taskVarSet (tid, &eh_context_key, 0);\n     }\n }\n \n@@ -248,7 +248,7 @@ __gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n   /* Do this first so that the task variables are visible during the\n      running of the delete hook.  */\n \n-  taskVarInit();\n+  taskVarInit ();\n \n   /* We don't have a way to track dtor here, so instead, we\n      register a generic routine that can cleanup any task.  */\n@@ -277,9 +277,9 @@ __gthread_key_dtor (__gthread_key_t key, void *ptr)\n #define __gthread_getspecific(key)\t\t\t\\\n      ((key == 0)\t\t\t\t\t\\\n       ? ((taskVarAdd (taskIdSelf (), &key) != OK)\t\\\n-\t ? (__terminate (), (void*)0)\t\t\t\\\n-\t : (void*)0)\t\t\t\t\t\\\n-      : (void*)key)\n+\t ? (__terminate (), (void *) 0)\t\t\t\\\n+\t : (void *) 0)\t\t\t\t\t\\\n+      : (void *) key)\n #endif\n \n static inline int"}]}