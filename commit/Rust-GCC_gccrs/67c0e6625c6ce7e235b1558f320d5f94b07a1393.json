{"sha": "67c0e6625c6ce7e235b1558f320d5f94b07a1393", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdjMGU2NjI1YzZjZTdlMjM1YjE1NThmMzIwZDVmOTRiMDdhMTM5Mw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2015-02-20T14:29:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T14:29:49Z"}, "message": "a-dispat.adb, [...]: Minor reformatting.\n\n2015-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* a-dispat.adb, a-stcoed.ads: Minor reformatting.\n\n2015-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Build_Discrete_Static_Predicate): Allow static\n\tpredicate for non-static subtype.\n\t(Build_Predicate_Functions): Do not assume subtype associated with a\n\tstatic predicate must be static.\n\n2015-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.adb (Set_Msg_Node): Better handling of internal names\n\t(Set_Msg_Node): Kill message when we cannot eliminate internal name.\n\t* errout.ads: Document additional case of message deletion.\n\t* namet.adb (Is_Internal_Name): Refined to consider wide\n\tstrings in brackets notation and character literals not to be\n\tinternal names.\n\t* sem_ch8.adb (Find_Selected_Component): Give additional error\n\twhen selector name is a subprogram whose first parameter has\n\tthe same type as the prefix, but that type is untagged.\n\nFrom-SVN: r220868", "tree": {"sha": "a9911e4f635cf7f139a7fe60cadb9938506accdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9911e4f635cf7f139a7fe60cadb9938506accdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67c0e6625c6ce7e235b1558f320d5f94b07a1393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c0e6625c6ce7e235b1558f320d5f94b07a1393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c0e6625c6ce7e235b1558f320d5f94b07a1393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c0e6625c6ce7e235b1558f320d5f94b07a1393/comments", "author": null, "committer": null, "parents": [{"sha": "4060ebd4be9d17ba7a5cb8dc44a7e047232bf335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4060ebd4be9d17ba7a5cb8dc44a7e047232bf335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4060ebd4be9d17ba7a5cb8dc44a7e047232bf335"}], "stats": {"total": 172, "additions": 137, "deletions": 35}, "files": [{"sha": "12f09a366ad00e1e4c660acbda88df2ef65ffd71", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=67c0e6625c6ce7e235b1558f320d5f94b07a1393", "patch": "@@ -1,3 +1,26 @@\n+2015-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-dispat.adb, a-stcoed.ads: Minor reformatting.\n+\n+2015-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Discrete_Static_Predicate): Allow static\n+\tpredicate for non-static subtype.\n+\t(Build_Predicate_Functions): Do not assume subtype associated with a\n+\tstatic predicate must be static.\n+\n+2015-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.adb (Set_Msg_Node): Better handling of internal names\n+\t(Set_Msg_Node): Kill message when we cannot eliminate internal name.\n+\t* errout.ads: Document additional case of message deletion.\n+\t* namet.adb (Is_Internal_Name): Refined to consider wide\n+\tstrings in brackets notation and character literals not to be\n+\tinternal names.\n+\t* sem_ch8.adb (Find_Selected_Component): Give additional error\n+\twhen selector name is a subprogram whose first parameter has\n+\tthe same type as the prefix, but that type is untagged.\n+\n 2015-02-20  Robert Dewar  <dewar@adacore.com>\n \n \t* g-allein.ads, g-alveop.adb, g-alveop.ads, opt.ads: Minor reformatting"}, {"sha": "3525c4e06ff5924c57facec7dffc6336e9c68342", "filename": "gcc/ada/a-dispat.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Fa-dispat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Fa-dispat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-dispat.adb?ref=67c0e6625c6ce7e235b1558f320d5f94b07a1393", "patch": "@@ -37,7 +37,7 @@ package body Ada.Dispatching is\n \n    procedure Yield is\n       Self_Id : constant System.Tasking.Task_Id :=\n-         System.Task_Primitives.Operations.Self;\n+                  System.Task_Primitives.Operations.Self;\n \n    begin\n       --  If pragma Detect_Blocking is active, Program_Error must be"}, {"sha": "0d39cc3d762605ee384f199ef0af5c865bbb4583", "filename": "gcc/ada/a-stcoed.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Fa-stcoed.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Fa-stcoed.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stcoed.ads?ref=67c0e6625c6ce7e235b1558f320d5f94b07a1393", "patch": "@@ -27,5 +27,5 @@ package Ada.Synchronous_Task_Control.EDF is\n \n    procedure Suspend_Until_True_And_Set_Deadline\n       (S  : in out Suspension_Object;\n-       TS :        Ada.Real_Time.Time_Span);\n+       TS : Ada.Real_Time.Time_Span);\n end Ada.Synchronous_Task_Control.EDF;"}, {"sha": "d236bb53c54a4a760129339468585b16686f9f92", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=67c0e6625c6ce7e235b1558f320d5f94b07a1393", "patch": "@@ -2792,18 +2792,29 @@ package body Errout is\n          Nam := Pragma_Name (Node);\n          Loc := Sloc (Node);\n \n-      --  The other cases have Chars fields, and we want to test for possible\n-      --  internal names, which generally represent something gone wrong. An\n-      --  exception is the case of internal type names, where we try to find a\n-      --  reasonable external representation for the external name\n+      --  The other cases have Chars fields\n+\n+      --  First deal with internal names, which generally represent something\n+      --  gone wrong. First attempt: if this is a rewritten node that rewrites\n+      --  something with a Chars field that is not an internal name, use that.\n+\n+      elsif Is_Internal_Name (Chars (Node))\n+        and then Nkind (Original_Node (Node)) in N_Has_Chars\n+        and then not Is_Internal_Name (Chars (Original_Node (Node)))\n+      then\n+         Nam := Chars (Original_Node (Node));\n+         Loc := Sloc (Original_Node (Node));\n+\n+      --  Another shot for internal names, in the case of internal type names,\n+      --  we try to find a reasonable representation for the external name.\n \n       elsif Is_Internal_Name (Chars (Node))\n         and then\n           ((Is_Entity_Name (Node)\n-                          and then Present (Entity (Node))\n-                          and then Is_Type (Entity (Node)))\n-              or else\n-           (Nkind (Node) = N_Defining_Identifier and then Is_Type (Node)))\n+             and then Present (Entity (Node))\n+             and then Is_Type (Entity (Node)))\n+            or else\n+             (Nkind (Node) = N_Defining_Identifier and then Is_Type (Node)))\n       then\n          if Nkind (Node) = N_Identifier then\n             Ent := Entity (Node);\n@@ -2826,7 +2837,8 @@ package body Errout is\n             Nam := Chars (Ent);\n          end if;\n \n-      --  If not internal name, just use name in Chars field\n+      --  If not internal name, or if we could not find a reasonable possible\n+      --  substitution for the internal name, just use name in Chars field.\n \n       else\n          Nam := Chars (Node);\n@@ -2854,6 +2866,12 @@ package body Errout is\n          Kill_Message := True;\n       end if;\n \n+      --  If we still have an internal name, kill the message (will only\n+      --  work if we already had errors!)\n+\n+      if Is_Internal_Name then\n+         Kill_Message := True;\n+      end if;\n       --  Remaining step is to adjust casing and possibly add 'Class\n \n       Adjust_Name_Case (Loc);"}, {"sha": "d02febe47fcc6e0587824b3879ca8070efc5b5e6", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=67c0e6625c6ce7e235b1558f320d5f94b07a1393", "patch": "@@ -104,6 +104,13 @@ package Errout is\n    --        messages. Warning messages are only suppressed for case 1, and\n    --        when they come from other than the main extended unit.\n \n+   --    7.  If an error or warning references an internal name, and we have\n+   --        already placed an error (not warning) message at that location,\n+   --        then we assume this is cascaded junk and delete the message.\n+\n+   --  This normal suppression action may be overridden in cases 2-5 (but not\n+   --  in case 1 or 7 by setting All_Errors mode, or by setting the special\n+   --  unconditional message insertion character (!) as described below.\n    --  This normal suppression action may be overridden in cases 2-5 (but\n    --  not in case 1) by setting All_Errors mode, or by setting the special\n    --  unconditional message insertion character (!) as described below."}, {"sha": "9de0feca058d4dbdbc4f16e81e027d0b5768814a", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=67c0e6625c6ce7e235b1558f320d5f94b07a1393", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -833,8 +833,12 @@ package body Namet is\n \n    function Is_Internal_Name (Id : Name_Id) return Boolean is\n    begin\n-      Get_Name_String (Id);\n-      return Is_Internal_Name;\n+      if Id in Error_Name_Or_No_Name then\n+         return False;\n+      else\n+         Get_Name_String (Id);\n+         return Is_Internal_Name;\n+      end if;\n    end Is_Internal_Name;\n \n    ----------------------\n@@ -844,18 +848,41 @@ package body Namet is\n    --  Version taking its input from Name_Buffer\n \n    function Is_Internal_Name return Boolean is\n+      J : Natural;\n+\n    begin\n+      --  AAny name starting with underscore is internal\n+\n       if Name_Buffer (1) = '_'\n         or else Name_Buffer (Name_Len) = '_'\n       then\n          return True;\n \n+      --  Allow quoted character\n+\n+      elsif Name_Buffer (1) = ''' then\n+         return False;\n+\n+      --  All other cases, scan name\n+\n       else\n          --  Test backwards, because we only want to test the last entity\n          --  name if the name we have is qualified with other entities.\n \n-         for J in reverse 1 .. Name_Len loop\n-            if Is_OK_Internal_Letter (Name_Buffer (J)) then\n+         J := Name_Len;\n+         while J /= 0 loop\n+\n+            --  Skip stuff between brackets (A-F OK there)\n+\n+            if Name_Buffer (J) = ']' then\n+               loop\n+                  J := J - 1;\n+                  exit when J = 1 or else Name_Buffer (J) = '[';\n+               end loop;\n+\n+            --  Test for internal letter\n+\n+            elsif Is_OK_Internal_Letter (Name_Buffer (J)) then\n                return True;\n \n             --  Quit if we come to terminating double underscore (note that\n@@ -869,6 +896,8 @@ package body Namet is\n             then\n                return False;\n             end if;\n+\n+            J := J - 1;\n          end loop;\n       end if;\n "}, {"sha": "ed86d90fef018773731f80dba4f589c24e921976", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=67c0e6625c6ce7e235b1558f320d5f94b07a1393", "patch": "@@ -6681,9 +6681,11 @@ package body Sem_Ch13 is\n       BHi : constant Uint := Expr_Value (Type_High_Bound (Btyp));\n       --  Low bound and high bound value of base type of Typ\n \n-      TLo : constant Uint := Expr_Value (Type_Low_Bound  (Typ));\n-      THi : constant Uint := Expr_Value (Type_High_Bound (Typ));\n-      --  Low bound and high bound values of static subtype Typ\n+      TLo : Uint;\n+      THi : Uint;\n+      --  Bounds for constructing the static predicate. We use the bound of the\n+      --  subtype if it is static, otherwise the corresponding base type bound.\n+      --  Note: a non-static subtype can have a static predicate.\n \n       type REnt is record\n          Lo, Hi : Uint;\n@@ -7406,6 +7408,20 @@ package body Sem_Ch13 is\n    --  Start of processing for Build_Discrete_Static_Predicate\n \n    begin\n+      --  Establish  bounds for the predicate\n+\n+      if Compile_Time_Known_Value (Type_Low_Bound (Typ)) then\n+         TLo := Expr_Value (Type_Low_Bound (Typ));\n+      else\n+         TLo := BLo;\n+      end if;\n+\n+      if Compile_Time_Known_Value (Type_High_Bound (Typ)) then\n+         THi := Expr_Value (Type_High_Bound (Typ));\n+      else\n+         THi := BHi;\n+      end if;\n+\n       --  Analyze the expression to see if it is a static predicate\n \n       declare\n@@ -8570,15 +8586,6 @@ package body Sem_Ch13 is\n                --  For discrete subtype, build the static predicate list\n \n                if Is_Discrete_Type (Typ) then\n-                  if not Is_Static_Subtype (Typ) then\n-\n-                     --  This can only happen in the presence of previous\n-                     --  semantic errors.\n-\n-                     pragma Assert (Serious_Errors_Detected > 0);\n-                     return;\n-                  end if;\n-\n                   Build_Discrete_Static_Predicate (Typ, Expr, Object_Name);\n \n                   --  If we don't get a static predicate list, it means that we"}, {"sha": "c8d81f0baa18a142c81ff20c5799a6bec2691874", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c0e6625c6ce7e235b1558f320d5f94b07a1393/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=67c0e6625c6ce7e235b1558f320d5f94b07a1393", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6862,20 +6862,38 @@ package body Sem_Ch8 is\n                Premature_Usage (P);\n \n             elsif Nkind (P) /= N_Attribute_Reference then\n-               Error_Msg_N (\n-                \"invalid prefix in selected component&\", P);\n+\n+               --  This may have been meant as a prefixed call to a primitive\n+               --  of an untagged type.\n+\n+               declare\n+                  F : constant Entity_Id :=\n+                        Current_Entity (Selector_Name (N));\n+               begin\n+                  if Present (F)\n+                    and then Is_Overloadable (F)\n+                    and then Present (First_Entity (F))\n+                    and then Etype (First_Entity (F)) = Etype (P)\n+                    and then not Is_Tagged_Type (Etype (P))\n+                  then\n+                     Error_Msg_N\n+                       (\"prefixed call is only allowed for objects \"\n+                        & \"of a tagged type\", N);\n+                  end if;\n+               end;\n+\n+               Error_Msg_N (\"invalid prefix in selected component&\", P);\n \n                if Is_Access_Type (P_Type)\n                  and then Ekind (Designated_Type (P_Type)) = E_Incomplete_Type\n                then\n                   Error_Msg_N\n-                    (\"\\dereference must not be of an incomplete type \" &\n-                       \"(RM 3.10.1)\", P);\n+                    (\"\\dereference must not be of an incomplete type \"\n+                     & \"(RM 3.10.1)\", P);\n                end if;\n \n             else\n-               Error_Msg_N (\n-                \"invalid prefix in selected component\", P);\n+               Error_Msg_N (\"invalid prefix in selected component\", P);\n             end if;\n          end if;\n "}]}