{"sha": "ae5e29239e28818f807cf11775c95c4243d9a256", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1ZTI5MjM5ZTI4ODE4ZjgwN2NmMTE3NzVjOTVjNDI0M2Q5YTI1Ng==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-11-16T11:25:02Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-11-16T11:25:02Z"}, "message": "arm_neon.h: Remove #ifndef check on __ARM_NEON.\n\n2015-11-16  Christian Bruel  <christian.bruel@st.com>\n\n\t* config/arm/arm_neon.h: Remove #ifndef check on __ARM_NEON.\n\tReplace #ifdef __ARM_FEATURE_CRYPTO, __ARM_FEATURE_FMA, __ARM_FP\n\twith appropriate pragma GCC target.\n\n2015-11-16  Christian Bruel  <christian.bruel@st.com>\n\n\t* lib/target-supports.exp (check_effective_target_arm_neon_ok_nocache):\n\t Check __ARM_NEON__ instead of \"arm_neon.h.\n\t* gcc.target/arm/attr-neon3.c: New test.\n\t* gcc.target/arm/attr-neon-fp16.c: Likewise\n\nFrom-SVN: r230411", "tree": {"sha": "017bb3f32b14c0dddb7893714577654df57ffe7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/017bb3f32b14c0dddb7893714577654df57ffe7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5e29239e28818f807cf11775c95c4243d9a256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5e29239e28818f807cf11775c95c4243d9a256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5e29239e28818f807cf11775c95c4243d9a256", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5e29239e28818f807cf11775c95c4243d9a256/comments", "author": null, "committer": null, "parents": [{"sha": "b8c7c62b2dbbdf355adb56d8250e68222ae0febb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c7c62b2dbbdf355adb56d8250e68222ae0febb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c7c62b2dbbdf355adb56d8250e68222ae0febb"}], "stats": {"total": 536, "additions": 278, "deletions": 258}, "files": [{"sha": "48fa02c714b0b79f9ef9bb1f8615be0a89d68186", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae5e29239e28818f807cf11775c95c4243d9a256", "patch": "@@ -1,3 +1,9 @@\n+2015-11-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* config/arm/arm_neon.h: Remove #ifndef check on __ARM_NEON.\n+\tReplace #ifdef __ARM_FEATURE_CRYPTO, __ARM_FEATURE_FMA, __ARM_FP\n+\twith appropriate pragma GCC target.\n+\n 2015-11-16  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/65837"}, {"sha": "0a33d21f2fcf8a1074fb62e89f4418295d446db5", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 219, "deletions": 257, "changes": 476, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=ae5e29239e28818f807cf11775c95c4243d9a256", "patch": "@@ -27,9 +27,8 @@\n #ifndef _GCC_ARM_NEON_H\n #define _GCC_ARM_NEON_H 1\n \n-#ifndef __ARM_NEON__\n-#error You must enable NEON instructions (e.g. -mfloat-abi=softfp -mfpu=neon) to use arm_neon.h\n-#else\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=neon\")\n \n #ifdef __cplusplus\n extern \"C\" {\n@@ -48,9 +47,10 @@ typedef __simd64_float16_t float16x4_t;\n typedef __simd64_float32_t float32x2_t;\n typedef __simd64_poly8_t poly8x8_t;\n typedef __simd64_poly16_t poly16x4_t;\n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n typedef __builtin_neon_poly64 poly64x1_t;\n-#endif\n+#pragma GCC pop_options\n typedef __simd64_uint8_t uint8x8_t;\n typedef __simd64_uint16_t uint16x4_t;\n typedef __simd64_uint32_t uint32x2_t;\n@@ -66,9 +66,10 @@ typedef __simd128_float16_t float16x8_t;\n typedef __simd128_float32_t float32x4_t;\n typedef __simd128_poly8_t poly8x16_t;\n typedef __simd128_poly16_t poly16x8_t;\n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n typedef __builtin_neon_poly64 poly64x2_t __attribute__ ((__vector_size__ (16)));\n-#endif\n+#pragma GCC pop_options\n \n typedef __simd128_uint8_t uint8x16_t;\n typedef __simd128_uint16_t uint16x8_t;\n@@ -81,10 +82,11 @@ typedef float float32_t;\n    keep them that way.  */\n typedef __builtin_neon_poly8 poly8_t;\n typedef __builtin_neon_poly16 poly16_t;\n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n typedef __builtin_neon_poly64 poly64_t;\n typedef __builtin_neon_poly128 poly128_t;\n-#endif\n+#pragma GCC pop_options\n \n typedef struct int8x8x2_t\n {\n@@ -210,20 +212,19 @@ typedef struct poly16x8x2_t\n   poly16x8_t val[2];\n } poly16x8x2_t;\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n typedef struct poly64x1x2_t\n {\n   poly64x1_t val[2];\n } poly64x1x2_t;\n-#endif\n \n \n-#ifdef __ARM_FEATURE_CRYPTO\n typedef struct poly64x2x2_t\n {\n   poly64x2_t val[2];\n } poly64x2x2_t;\n-#endif\n+#pragma GCC pop_options\n \n \n typedef struct int8x8x3_t\n@@ -350,20 +351,19 @@ typedef struct poly16x8x3_t\n   poly16x8_t val[3];\n } poly16x8x3_t;\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n typedef struct poly64x1x3_t\n {\n   poly64x1_t val[3];\n } poly64x1x3_t;\n-#endif\n \n \n-#ifdef __ARM_FEATURE_CRYPTO\n typedef struct poly64x2x3_t\n {\n   poly64x2_t val[3];\n } poly64x2x3_t;\n-#endif\n+#pragma GCC pop_options\n \n \n typedef struct int8x8x4_t\n@@ -490,20 +490,19 @@ typedef struct poly16x8x4_t\n   poly16x8_t val[4];\n } poly16x8x4_t;\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n typedef struct poly64x1x4_t\n {\n   poly64x1_t val[4];\n } poly64x1x4_t;\n-#endif\n \n \n-#ifdef __ARM_FEATURE_CRYPTO\n typedef struct poly64x2x4_t\n {\n   poly64x2_t val[4];\n } poly64x2x4_t;\n-#endif\n+#pragma GCC pop_options\n \n /* vadd  */\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n@@ -1477,38 +1476,33 @@ vqdmlsl_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c)\n   return (int64x2_t)__builtin_neon_vqdmlslv2si (__a, __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_FMA\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=neon-vfpv4\")\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vfma_f32 (float32x2_t __a, float32x2_t __b, float32x2_t __c)\n {\n   return (float32x2_t)__builtin_neon_vfmav2sf (__a, __b, __c);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_FMA\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vfmaq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n {\n   return (float32x4_t)__builtin_neon_vfmav4sf (__a, __b, __c);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_FMA\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vfms_f32 (float32x2_t __a, float32x2_t __b, float32x2_t __c)\n {\n   return (float32x2_t)__builtin_neon_vfmsv2sf (__a, __b, __c);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_FMA\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vfmsq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n {\n   return (float32x4_t)__builtin_neon_vfmsv4sf (__a, __b, __c);\n }\n+#pragma GCC pop_options\n \n-#endif\n #if __ARM_ARCH >= 8\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vrndn_f32 (float32x2_t __a)\n@@ -4515,14 +4509,15 @@ vrsraq_n_u64 (uint64x2_t __a, uint64x2_t __b, const int __c)\n   return (uint64x2_t)__builtin_neon_vrsrau_nv2di ((int64x2_t) __a, (int64x2_t) __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vsri_n_p64 (poly64x1_t __a, poly64x1_t __b, const int __c)\n {\n   return (poly64x1_t)__builtin_neon_vsri_ndi (__a, __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vsri_n_s8 (int8x8_t __a, int8x8_t __b, const int __c)\n {\n@@ -4583,14 +4578,15 @@ vsri_n_p16 (poly16x4_t __a, poly16x4_t __b, const int __c)\n   return (poly16x4_t)__builtin_neon_vsri_nv4hi ((int16x4_t) __a, (int16x4_t) __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vsriq_n_p64 (poly64x2_t __a, poly64x2_t __b, const int __c)\n {\n   return (poly64x2_t)__builtin_neon_vsri_nv2di ((int64x2_t) __a, (int64x2_t) __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vsriq_n_s8 (int8x16_t __a, int8x16_t __b, const int __c)\n {\n@@ -4651,14 +4647,15 @@ vsriq_n_p16 (poly16x8_t __a, poly16x8_t __b, const int __c)\n   return (poly16x8_t)__builtin_neon_vsri_nv8hi ((int16x8_t) __a, (int16x8_t) __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vsli_n_p64 (poly64x1_t __a, poly64x1_t __b, const int __c)\n {\n   return (poly64x1_t)__builtin_neon_vsli_ndi (__a, __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vsli_n_s8 (int8x8_t __a, int8x8_t __b, const int __c)\n {\n@@ -4719,14 +4716,15 @@ vsli_n_p16 (poly16x4_t __a, poly16x4_t __b, const int __c)\n   return (poly16x4_t)__builtin_neon_vsli_nv4hi ((int16x4_t) __a, (int16x4_t) __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vsliq_n_p64 (poly64x2_t __a, poly64x2_t __b, const int __c)\n {\n   return (poly64x2_t)__builtin_neon_vsli_nv2di ((int64x2_t) __a, (int64x2_t) __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vsliq_n_s8 (int8x16_t __a, int8x16_t __b, const int __c)\n {\n@@ -5545,14 +5543,15 @@ vsetq_lane_u64 (uint64_t __a, uint64x2_t __b, const int __c)\n   return (uint64x2_t)__builtin_neon_vset_lanev2di ((__builtin_neon_di) __a, (int64x2_t) __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vcreate_p64 (uint64_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vcreatedi ((__builtin_neon_di) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vcreate_s8 (uint64_t __a)\n {\n@@ -5681,14 +5680,15 @@ vdup_n_p16 (poly16_t __a)\n   return (poly16x4_t)__builtin_neon_vdup_nv4hi ((__builtin_neon_hi) __a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vdup_n_p64 (poly64_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vdup_ndi ((__builtin_neon_di) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vdup_n_s64 (int64_t __a)\n {\n@@ -5701,14 +5701,15 @@ vdup_n_u64 (uint64_t __a)\n   return (uint64x1_t)__builtin_neon_vdup_ndi ((__builtin_neon_di) __a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vdupq_n_p64 (poly64_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vdup_nv2di ((__builtin_neon_di) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vdupq_n_s8 (int8_t __a)\n {\n@@ -5961,14 +5962,15 @@ vdup_lane_p16 (poly16x4_t __a, const int __b)\n   return (poly16x4_t)__builtin_neon_vdup_lanev4hi ((int16x4_t) __a, __b);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vdup_lane_p64 (poly64x1_t __a, const int __b)\n {\n   return (poly64x1_t)__builtin_neon_vdup_lanedi (__a, __b);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vdup_lane_s64 (int64x1_t __a, const int __b)\n {\n@@ -6035,14 +6037,15 @@ vdupq_lane_p16 (poly16x4_t __a, const int __b)\n   return (poly16x8_t)__builtin_neon_vdup_lanev8hi ((int16x4_t) __a, __b);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vdupq_lane_p64 (poly64x1_t __a, const int __b)\n {\n   return (poly64x2_t)__builtin_neon_vdup_lanev2di (__a, __b);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vdupq_lane_s64 (int64x1_t __a, const int __b)\n {\n@@ -6055,14 +6058,15 @@ vdupq_lane_u64 (uint64x1_t __a, const int __b)\n   return (uint64x2_t)__builtin_neon_vdup_lanev2di ((int64x1_t) __a, __b);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vcombine_p64 (poly64x1_t __a, poly64x1_t __b)\n {\n   return (poly64x2_t)__builtin_neon_vcombinedi (__a, __b);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vcombine_s8 (int8x8_t __a, int8x8_t __b)\n {\n@@ -6137,14 +6141,15 @@ vcombine_p16 (poly16x4_t __a, poly16x4_t __b)\n   return (poly16x8_t)__builtin_neon_vcombinev4hi ((int16x4_t) __a, (int16x4_t) __b);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vget_high_p64 (poly64x2_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vget_highv2di ((int64x2_t) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vget_high_s8 (int8x16_t __a)\n {\n@@ -6281,14 +6286,15 @@ vget_low_p16 (poly16x8_t __a)\n   return (poly16x4_t)__builtin_neon_vget_lowv8hi ((int16x8_t) __a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vget_low_p64 (poly64x2_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vget_lowv2di ((int64x2_t) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vget_low_s64 (int64x2_t __a)\n {\n@@ -6349,25 +6355,24 @@ vcvtq_u32_f32 (float32x4_t __a)\n   return (uint32x4_t)__builtin_neon_vcvtuv4sf (__a);\n }\n \n-#if ((__ARM_FP & 0x2) != 0)\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=neon-fp16\")\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n __extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n vcvt_f16_f32 (float32x4_t __a)\n {\n   return (float16x4_t)__builtin_neon_vcvtv4hfv4sf (__a);\n }\n #endif\n-#endif\n \n-#if ((__ARM_FP & 0x2) != 0)\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vcvt_f32_f16 (float16x4_t __a)\n {\n   return (float32x4_t)__builtin_neon_vcvtv4sfv4hf (__a);\n }\n #endif\n-#endif\n+#pragma GCC pop_options\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vcvt_n_s32_f32 (float32x2_t __a, const int __b)\n@@ -7377,14 +7382,15 @@ vqdmlsl_n_s32 (int64x2_t __a, int32x2_t __b, int32_t __c)\n   return (int64x2_t)__builtin_neon_vqdmlsl_nv2si (__a, __b, (__builtin_neon_si) __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vext_p64 (poly64x1_t __a, poly64x1_t __b, const int __c)\n {\n   return (poly64x1_t)__builtin_neon_vextdi (__a, __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vext_s8 (int8x8_t __a, int8x8_t __b, const int __c)\n {\n@@ -7451,14 +7457,15 @@ vext_p16 (poly16x4_t __a, poly16x4_t __b, const int __c)\n   return (poly16x4_t)__builtin_neon_vextv4hi ((int16x4_t) __a, (int16x4_t) __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vextq_p64 (poly64x2_t __a, poly64x2_t __b, const int __c)\n {\n   return (poly64x2_t)__builtin_neon_vextv2di ((int64x2_t) __a, (int64x2_t) __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vextq_s8 (int8x16_t __a, int8x16_t __b, const int __c)\n {\n@@ -7741,14 +7748,15 @@ vrev16q_p8 (poly8x16_t __a)\n   return (poly8x16_t) __builtin_shuffle (__a, (uint8x16_t) { 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14 });\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vbsl_p64 (uint64x1_t __a, poly64x1_t __b, poly64x1_t __c)\n {\n   return (poly64x1_t)__builtin_neon_vbsldi ((int64x1_t) __a, __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vbsl_s8 (uint8x8_t __a, int8x8_t __b, int8x8_t __c)\n {\n@@ -7815,14 +7823,15 @@ vbsl_p16 (uint16x4_t __a, poly16x4_t __b, poly16x4_t __c)\n   return (poly16x4_t)__builtin_neon_vbslv4hi ((int16x4_t) __a, (int16x4_t) __b, (int16x4_t) __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vbslq_p64 (uint64x2_t __a, poly64x2_t __b, poly64x2_t __c)\n {\n   return (poly64x2_t)__builtin_neon_vbslv2di ((int64x2_t) __a, (int64x2_t) __b, (int64x2_t) __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vbslq_s8 (uint8x16_t __a, int8x16_t __b, int8x16_t __c)\n {\n@@ -8764,14 +8773,15 @@ vuzpq_p16 (poly16x8_t __a, poly16x8_t __b)\n   return __rv;\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vld1_p64 (const poly64_t * __a)\n {\n   return (poly64x1_t)__builtin_neon_vld1di ((const __builtin_neon_di *) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vld1_s8 (const int8_t * __a)\n {\n@@ -8846,14 +8856,15 @@ vld1_p16 (const poly16_t * __a)\n   return (poly16x4_t)__builtin_neon_vld1v4hi ((const __builtin_neon_hi *) __a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vld1q_p64 (const poly64_t * __a)\n {\n   return (poly64x2_t)__builtin_neon_vld1v2di ((const __builtin_neon_di *) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vld1q_s8 (const int8_t * __a)\n {\n@@ -8990,14 +9001,15 @@ vld1_lane_p16 (const poly16_t * __a, poly16x4_t __b, const int __c)\n   return (poly16x4_t)__builtin_neon_vld1_lanev4hi ((const __builtin_neon_hi *) __a, (int16x4_t) __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vld1_lane_p64 (const poly64_t * __a, poly64x1_t __b, const int __c)\n {\n   return (poly64x1_t)__builtin_neon_vld1_lanedi ((const __builtin_neon_di *) __a, __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vld1_lane_s64 (const int64_t * __a, int64x1_t __b, const int __c)\n {\n@@ -9072,14 +9084,15 @@ vld1q_lane_p16 (const poly16_t * __a, poly16x8_t __b, const int __c)\n   return (poly16x8_t)__builtin_neon_vld1_lanev8hi ((const __builtin_neon_hi *) __a, (int16x8_t) __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vld1q_lane_p64 (const poly64_t * __a, poly64x2_t __b, const int __c)\n {\n   return (poly64x2_t)__builtin_neon_vld1_lanev2di ((const __builtin_neon_di *) __a, (int64x2_t) __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vld1q_lane_s64 (const int64_t * __a, int64x2_t __b, const int __c)\n {\n@@ -9155,14 +9168,15 @@ vld1_dup_p16 (const poly16_t * __a)\n   return (poly16x4_t)__builtin_neon_vld1_dupv4hi ((const __builtin_neon_hi *) __a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vld1_dup_p64 (const poly64_t * __a)\n {\n   return (poly64x1_t)__builtin_neon_vld1_dupdi ((const __builtin_neon_di *) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vld1_dup_s64 (const int64_t * __a)\n {\n@@ -9238,14 +9252,15 @@ vld1q_dup_p16 (const poly16_t * __a)\n   return (poly16x8_t)__builtin_neon_vld1_dupv8hi ((const __builtin_neon_hi *) __a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vld1q_dup_p64 (const poly64_t * __a)\n {\n   return (poly64x2_t)__builtin_neon_vld1_dupv2di ((const __builtin_neon_di *) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vld1q_dup_s64 (const int64_t * __a)\n {\n@@ -9258,14 +9273,15 @@ vld1q_dup_u64 (const uint64_t * __a)\n   return (uint64x2_t)__builtin_neon_vld1_dupv2di ((const __builtin_neon_di *) __a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1_p64 (poly64_t * __a, poly64x1_t __b)\n {\n   __builtin_neon_vst1di ((__builtin_neon_di *) __a, __b);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1_s8 (int8_t * __a, int8x8_t __b)\n {\n@@ -9340,14 +9356,15 @@ vst1_p16 (poly16_t * __a, poly16x4_t __b)\n   __builtin_neon_vst1v4hi ((__builtin_neon_hi *) __a, (int16x4_t) __b);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1q_p64 (poly64_t * __a, poly64x2_t __b)\n {\n   __builtin_neon_vst1v2di ((__builtin_neon_di *) __a, (int64x2_t) __b);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1q_s8 (int8_t * __a, int8x16_t __b)\n {\n@@ -9484,14 +9501,15 @@ vst1_lane_p16 (poly16_t * __a, poly16x4_t __b, const int __c)\n   __builtin_neon_vst1_lanev4hi ((__builtin_neon_hi *) __a, (int16x4_t) __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1_lane_p64 (poly64_t * __a, poly64x1_t __b, const int __c)\n {\n   __builtin_neon_vst1_lanedi ((__builtin_neon_di *) __a, __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1_lane_s64 (int64_t * __a, int64x1_t __b, const int __c)\n {\n@@ -9566,14 +9584,15 @@ vst1q_lane_p16 (poly16_t * __a, poly16x8_t __b, const int __c)\n   __builtin_neon_vst1_lanev8hi ((__builtin_neon_hi *) __a, (int16x8_t) __b, __c);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1q_lane_p64 (poly64_t * __a, poly64x2_t __b, const int __c)\n {\n   __builtin_neon_vst1_lanev2di ((__builtin_neon_di *) __a, (int64x2_t) __b, __c);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst1q_lane_s64 (int64_t * __a, int64x2_t __b, const int __c)\n {\n@@ -9668,7 +9687,8 @@ vld2_p16 (const poly16_t * __a)\n   return __rv.__i;\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1x2_t __attribute__ ((__always_inline__))\n vld2_p64 (const poly64_t * __a)\n {\n@@ -9677,7 +9697,7 @@ vld2_p64 (const poly64_t * __a)\n   return __rv.__i;\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1x2_t __attribute__ ((__always_inline__))\n vld2_s64 (const int64_t * __a)\n {\n@@ -10015,7 +10035,8 @@ vld2_dup_p16 (const poly16_t * __a)\n   return __rv.__i;\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1x2_t __attribute__ ((__always_inline__))\n vld2_dup_p64 (const poly64_t * __a)\n {\n@@ -10024,7 +10045,7 @@ vld2_dup_p64 (const poly64_t * __a)\n   return __rv.__i;\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1x2_t __attribute__ ((__always_inline__))\n vld2_dup_s64 (const int64_t * __a)\n {\n@@ -10113,15 +10134,16 @@ vst2_p16 (poly16_t * __a, poly16x4x2_t __b)\n   __builtin_neon_vst2v4hi ((__builtin_neon_hi *) __a, __bu.__o);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst2_p64 (poly64_t * __a, poly64x1x2_t __b)\n {\n   union { poly64x1x2_t __i; __builtin_neon_ti __o; } __bu = { __b };\n   __builtin_neon_vst2di ((__builtin_neon_di *) __a, __bu.__o);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst2_s64 (int64_t * __a, int64x1x2_t __b)\n {\n@@ -10413,7 +10435,8 @@ vld3_p16 (const poly16_t * __a)\n   return __rv.__i;\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1x3_t __attribute__ ((__always_inline__))\n vld3_p64 (const poly64_t * __a)\n {\n@@ -10422,7 +10445,7 @@ vld3_p64 (const poly64_t * __a)\n   return __rv.__i;\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1x3_t __attribute__ ((__always_inline__))\n vld3_s64 (const int64_t * __a)\n {\n@@ -10760,7 +10783,8 @@ vld3_dup_p16 (const poly16_t * __a)\n   return __rv.__i;\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1x3_t __attribute__ ((__always_inline__))\n vld3_dup_p64 (const poly64_t * __a)\n {\n@@ -10769,7 +10793,7 @@ vld3_dup_p64 (const poly64_t * __a)\n   return __rv.__i;\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1x3_t __attribute__ ((__always_inline__))\n vld3_dup_s64 (const int64_t * __a)\n {\n@@ -10858,15 +10882,16 @@ vst3_p16 (poly16_t * __a, poly16x4x3_t __b)\n   __builtin_neon_vst3v4hi ((__builtin_neon_hi *) __a, __bu.__o);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst3_p64 (poly64_t * __a, poly64x1x3_t __b)\n {\n   union { poly64x1x3_t __i; __builtin_neon_ei __o; } __bu = { __b };\n   __builtin_neon_vst3di ((__builtin_neon_di *) __a, __bu.__o);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst3_s64 (int64_t * __a, int64x1x3_t __b)\n {\n@@ -11158,7 +11183,8 @@ vld4_p16 (const poly16_t * __a)\n   return __rv.__i;\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1x4_t __attribute__ ((__always_inline__))\n vld4_p64 (const poly64_t * __a)\n {\n@@ -11167,7 +11193,7 @@ vld4_p64 (const poly64_t * __a)\n   return __rv.__i;\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1x4_t __attribute__ ((__always_inline__))\n vld4_s64 (const int64_t * __a)\n {\n@@ -11507,7 +11533,8 @@ vld4_dup_p16 (const poly16_t * __a)\n   return __rv.__i;\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1x4_t __attribute__ ((__always_inline__))\n vld4_dup_p64 (const poly64_t * __a)\n {\n@@ -11516,7 +11543,7 @@ vld4_dup_p64 (const poly64_t * __a)\n   return __rv.__i;\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1x4_t __attribute__ ((__always_inline__))\n vld4_dup_s64 (const int64_t * __a)\n {\n@@ -11605,15 +11632,16 @@ vst4_p16 (poly16_t * __a, poly16x4x4_t __b)\n   __builtin_neon_vst4v4hi ((__builtin_neon_hi *) __a, __bu.__o);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst4_p64 (poly64_t * __a, poly64x1x4_t __b)\n {\n   union { poly64x1x4_t __i; __builtin_neon_oi __o; } __bu = { __b };\n   __builtin_neon_vst4di ((__builtin_neon_di *) __a, __bu.__o);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline void __attribute__ ((__always_inline__))\n vst4_s64 (int64_t * __a, int64x1x4_t __b)\n {\n@@ -12323,14 +12351,15 @@ vreinterpret_p8_f32 (float32x2_t __a)\n   return (poly8x8_t)__builtin_neon_vreinterpretv8qiv2sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vreinterpret_p8_p64 (poly64x1_t __a)\n {\n   return (poly8x8_t)__builtin_neon_vreinterpretv8qidi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vreinterpret_p8_s64 (int64x1_t __a)\n {\n@@ -12399,14 +12428,15 @@ vreinterpret_p16_f32 (float32x2_t __a)\n   return (poly16x4_t)__builtin_neon_vreinterpretv4hiv2sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n vreinterpret_p16_p64 (poly64x1_t __a)\n {\n   return (poly16x4_t)__builtin_neon_vreinterpretv4hidi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n vreinterpret_p16_s64 (int64x1_t __a)\n {\n@@ -12479,14 +12509,15 @@ vreinterpret_f16_f32 (float32x2_t __a)\n }\n #endif\n \n-#ifdef __ARM_FEATURE_CRYPTO\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n vreinterpret_f16_p64 (poly64x1_t __a)\n {\n   return (float16x4_t) __a;\n }\n-#endif\n+#pragma GCC pop_options\n #endif\n \n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n@@ -12573,14 +12604,15 @@ vreinterpret_f32_f16 (float16x4_t __a)\n }\n #endif\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vreinterpret_f32_p64 (poly64x1_t __a)\n {\n   return (float32x2_t)__builtin_neon_vreinterpretv2sfdi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vreinterpret_f32_s64 (int64x1_t __a)\n {\n@@ -12629,105 +12661,83 @@ vreinterpret_f32_u32 (uint32x2_t __a)\n   return (float32x2_t)__builtin_neon_vreinterpretv2sfv2si ((int32x2_t) __a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_p8 (poly8x8_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdiv8qi ((int8x8_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_p16 (poly16x4_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdiv4hi ((int16x4_t) __a);\n }\n \n-#endif\n-\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_f16 (float16x4_t __a)\n {\n   return (poly64x1_t) __a;\n }\n #endif\n-#endif\n \n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_f32 (float32x2_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdiv2sf (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_s64 (int64x1_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdidi (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_u64 (uint64x1_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdidi ((int64x1_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_s8 (int8x8_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdiv8qi (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_s16 (int16x4_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdiv4hi (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_s32 (int32x2_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdiv2si (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_u8 (uint8x8_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdiv8qi ((int8x8_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_u16 (uint16x4_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdiv4hi ((int16x4_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x1_t __attribute__ ((__always_inline__))\n vreinterpret_p64_u32 (uint32x2_t __a)\n {\n   return (poly64x1_t)__builtin_neon_vreinterpretdiv2si ((int32x2_t) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vreinterpret_s64_p8 (poly8x8_t __a)\n {\n@@ -12754,14 +12764,15 @@ vreinterpret_s64_f32 (float32x2_t __a)\n   return (int64x1_t)__builtin_neon_vreinterpretdiv2sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vreinterpret_s64_p64 (poly64x1_t __a)\n {\n   return (int64x1_t)__builtin_neon_vreinterpretdidi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vreinterpret_s64_u64 (uint64x1_t __a)\n {\n@@ -12830,14 +12841,15 @@ vreinterpret_u64_f32 (float32x2_t __a)\n   return (uint64x1_t)__builtin_neon_vreinterpretdiv2sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vreinterpret_u64_p64 (poly64x1_t __a)\n {\n   return (uint64x1_t)__builtin_neon_vreinterpretdidi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vreinterpret_u64_s64 (int64x1_t __a)\n {\n@@ -12906,14 +12918,15 @@ vreinterpret_s8_f32 (float32x2_t __a)\n   return (int8x8_t)__builtin_neon_vreinterpretv8qiv2sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vreinterpret_s8_p64 (poly64x1_t __a)\n {\n   return (int8x8_t)__builtin_neon_vreinterpretv8qidi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vreinterpret_s8_s64 (int64x1_t __a)\n {\n@@ -12982,14 +12995,15 @@ vreinterpret_s16_f32 (float32x2_t __a)\n   return (int16x4_t)__builtin_neon_vreinterpretv4hiv2sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vreinterpret_s16_p64 (poly64x1_t __a)\n {\n   return (int16x4_t)__builtin_neon_vreinterpretv4hidi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vreinterpret_s16_s64 (int64x1_t __a)\n {\n@@ -13058,14 +13072,15 @@ vreinterpret_s32_f32 (float32x2_t __a)\n   return (int32x2_t)__builtin_neon_vreinterpretv2siv2sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vreinterpret_s32_p64 (poly64x1_t __a)\n {\n   return (int32x2_t)__builtin_neon_vreinterpretv2sidi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vreinterpret_s32_s64 (int64x1_t __a)\n {\n@@ -13134,14 +13149,15 @@ vreinterpret_u8_f32 (float32x2_t __a)\n   return (uint8x8_t)__builtin_neon_vreinterpretv8qiv2sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vreinterpret_u8_p64 (poly64x1_t __a)\n {\n   return (uint8x8_t)__builtin_neon_vreinterpretv8qidi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vreinterpret_u8_s64 (int64x1_t __a)\n {\n@@ -13210,14 +13226,15 @@ vreinterpret_u16_f32 (float32x2_t __a)\n   return (uint16x4_t)__builtin_neon_vreinterpretv4hiv2sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vreinterpret_u16_p64 (poly64x1_t __a)\n {\n   return (uint16x4_t)__builtin_neon_vreinterpretv4hidi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vreinterpret_u16_s64 (int64x1_t __a)\n {\n@@ -13286,14 +13303,15 @@ vreinterpret_u32_f32 (float32x2_t __a)\n   return (uint32x2_t)__builtin_neon_vreinterpretv2siv2sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vreinterpret_u32_p64 (poly64x1_t __a)\n {\n   return (uint32x2_t)__builtin_neon_vreinterpretv2sidi (__a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vreinterpret_u32_s64 (int64x1_t __a)\n {\n@@ -13356,22 +13374,22 @@ vreinterpretq_p8_f32 (float32x4_t __a)\n   return (poly8x16_t)__builtin_neon_vreinterpretv16qiv4sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_p8_p64 (poly64x2_t __a)\n {\n   return (poly8x16_t)__builtin_neon_vreinterpretv16qiv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n+\n __extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_p8_p128 (poly128_t __a)\n {\n   return (poly8x16_t)__builtin_neon_vreinterpretv16qiti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_p8_s64 (int64x2_t __a)\n {\n@@ -13440,22 +13458,21 @@ vreinterpretq_p16_f32 (float32x4_t __a)\n   return (poly16x8_t)__builtin_neon_vreinterpretv8hiv4sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_p16_p64 (poly64x2_t __a)\n {\n   return (poly16x8_t)__builtin_neon_vreinterpretv8hiv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_p16_p128 (poly128_t __a)\n {\n   return (poly16x8_t)__builtin_neon_vreinterpretv8hiti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline poly16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_p16_s64 (int64x2_t __a)\n {\n@@ -13528,25 +13545,26 @@ vreinterpretq_f16_f32 (float32x4_t __a)\n }\n #endif\n \n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n+\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_f16_p64 (poly64x2_t __a)\n {\n   return (float16x8_t) __a;\n }\n #endif\n-#endif\n \n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_f16_p128 (poly128_t __a)\n {\n   return (float16x8_t) __a;\n }\n #endif\n-#endif\n+\n+#pragma GCC pop_options\n \n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n __extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n@@ -13632,22 +13650,21 @@ vreinterpretq_f32_f16 (float16x8_t __a)\n }\n #endif\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_f32_p64 (poly64x2_t __a)\n {\n   return (float32x4_t)__builtin_neon_vreinterpretv4sfv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_f32_p128 (poly128_t __a)\n {\n   return (float32x4_t)__builtin_neon_vreinterpretv4sfti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_f32_s64 (int64x2_t __a)\n {\n@@ -13696,219 +13713,169 @@ vreinterpretq_f32_u32 (uint32x4_t __a)\n   return (float32x4_t)__builtin_neon_vreinterpretv4sfv4si ((int32x4_t) __a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_p8 (poly8x16_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div16qi ((int8x16_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_p16 (poly16x8_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div8hi ((int16x8_t) __a);\n }\n \n-#endif\n-\n-#ifdef __ARM_FEATURE_CRYPTO\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_f16 (float16x8_t __a)\n {\n   return (poly64x2_t) __a;\n }\n #endif\n-#endif\n \n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_f32 (float32x4_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div4sf (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_p128 (poly128_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2diti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_s64 (int64x2_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div2di (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_u64 (uint64x2_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_s8 (int8x16_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div16qi (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_s16 (int16x8_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div8hi (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_s32 (int32x4_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div4si (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_u8 (uint8x16_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div16qi ((int8x16_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_u16 (uint16x8_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div8hi ((int16x8_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_p64_u32 (uint32x4_t __a)\n {\n   return (poly64x2_t)__builtin_neon_vreinterpretv2div4si ((int32x4_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_p8 (poly8x16_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv16qi ((int8x16_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_p16 (poly16x8_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv8hi ((int16x8_t) __a);\n }\n-#endif\n \n-#ifdef __ARM_FEATURE_CRYPTO\n #if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_f16 (float16x8_t __a)\n {\n   return (poly128_t) __a;\n }\n #endif\n-#endif\n \n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_f32 (float32x4_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv4sf (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_p64 (poly64x2_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_s64 (int64x2_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv2di (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_u64 (uint64x2_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_s8 (int8x16_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv16qi (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_s16 (int16x8_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv8hi (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_s32 (int32x4_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv4si (__a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_u8 (uint8x16_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv16qi ((int8x16_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_u16 (uint16x8_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv8hi ((int16x8_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vreinterpretq_p128_u32 (uint32x4_t __a)\n {\n   return (poly128_t)__builtin_neon_vreinterprettiv4si ((int32x4_t) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_s64_p8 (poly8x16_t __a)\n {\n@@ -13935,22 +13902,21 @@ vreinterpretq_s64_f32 (float32x4_t __a)\n   return (int64x2_t)__builtin_neon_vreinterpretv2div4sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_s64_p64 (poly64x2_t __a)\n {\n   return (int64x2_t)__builtin_neon_vreinterpretv2div2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_s64_p128 (poly128_t __a)\n {\n   return (int64x2_t)__builtin_neon_vreinterpretv2diti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_s64_u64 (uint64x2_t __a)\n {\n@@ -14019,22 +13985,21 @@ vreinterpretq_u64_f32 (float32x4_t __a)\n   return (uint64x2_t)__builtin_neon_vreinterpretv2div4sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_u64_p64 (poly64x2_t __a)\n {\n   return (uint64x2_t)__builtin_neon_vreinterpretv2div2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_u64_p128 (poly128_t __a)\n {\n   return (uint64x2_t)__builtin_neon_vreinterpretv2diti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vreinterpretq_u64_s64 (int64x2_t __a)\n {\n@@ -14103,22 +14068,21 @@ vreinterpretq_s8_f32 (float32x4_t __a)\n   return (int8x16_t)__builtin_neon_vreinterpretv16qiv4sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_s8_p64 (poly64x2_t __a)\n {\n   return (int8x16_t)__builtin_neon_vreinterpretv16qiv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_s8_p128 (poly128_t __a)\n {\n   return (int8x16_t)__builtin_neon_vreinterpretv16qiti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_s8_s64 (int64x2_t __a)\n {\n@@ -14187,22 +14151,21 @@ vreinterpretq_s16_f32 (float32x4_t __a)\n   return (int16x8_t)__builtin_neon_vreinterpretv8hiv4sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_s16_p64 (poly64x2_t __a)\n {\n   return (int16x8_t)__builtin_neon_vreinterpretv8hiv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_s16_p128 (poly128_t __a)\n {\n   return (int16x8_t)__builtin_neon_vreinterpretv8hiti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_s16_s64 (int64x2_t __a)\n {\n@@ -14271,22 +14234,21 @@ vreinterpretq_s32_f32 (float32x4_t __a)\n   return (int32x4_t)__builtin_neon_vreinterpretv4siv4sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_s32_p64 (poly64x2_t __a)\n {\n   return (int32x4_t)__builtin_neon_vreinterpretv4siv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_s32_p128 (poly128_t __a)\n {\n   return (int32x4_t)__builtin_neon_vreinterpretv4siti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_s32_s64 (int64x2_t __a)\n {\n@@ -14355,22 +14317,21 @@ vreinterpretq_u8_f32 (float32x4_t __a)\n   return (uint8x16_t)__builtin_neon_vreinterpretv16qiv4sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_u8_p64 (poly64x2_t __a)\n {\n   return (uint8x16_t)__builtin_neon_vreinterpretv16qiv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_u8_p128 (poly128_t __a)\n {\n   return (uint8x16_t)__builtin_neon_vreinterpretv16qiti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vreinterpretq_u8_s64 (int64x2_t __a)\n {\n@@ -14439,22 +14400,21 @@ vreinterpretq_u16_f32 (float32x4_t __a)\n   return (uint16x8_t)__builtin_neon_vreinterpretv8hiv4sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_u16_p64 (poly64x2_t __a)\n {\n   return (uint16x8_t)__builtin_neon_vreinterpretv8hiv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_u16_p128 (poly128_t __a)\n {\n   return (uint16x8_t)__builtin_neon_vreinterpretv8hiti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vreinterpretq_u16_s64 (int64x2_t __a)\n {\n@@ -14523,22 +14483,21 @@ vreinterpretq_u32_f32 (float32x4_t __a)\n   return (uint32x4_t)__builtin_neon_vreinterpretv4siv4sf (__a);\n }\n \n-#ifdef __ARM_FEATURE_CRYPTO\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_u32_p64 (poly64x2_t __a)\n {\n   return (uint32x4_t)__builtin_neon_vreinterpretv4siv2di ((int64x2_t) __a);\n }\n \n-#endif\n-#ifdef __ARM_FEATURE_CRYPTO\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_u32_p128 (poly128_t __a)\n {\n   return (uint32x4_t)__builtin_neon_vreinterpretv4siti ((__builtin_neon_ti) __a);\n }\n \n-#endif\n+#pragma GCC pop_options\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vreinterpretq_u32_s64 (int64x2_t __a)\n {\n@@ -14582,8 +14541,8 @@ vreinterpretq_u32_u16 (uint16x8_t __a)\n }\n \n \n-#ifdef __ARM_FEATURE_CRYPTO\n-\n+#pragma GCC push_options\n+#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n __extension__ static __inline poly128_t __attribute__ ((__always_inline__))\n vldrq_p128 (poly128_t const * __ptr)\n {\n@@ -14753,9 +14712,12 @@ vmull_high_p64 (poly64x2_t __a, poly64x2_t __b)\n   return (poly128_t) __builtin_arm_crypto_vmullp64 ((uint64_t) __t1, (uint64_t) __t2);\n }\n \n-#endif\n+#pragma GCC pop_options\n+\n #ifdef __cplusplus\n }\n #endif\n-#endif\n+\n+#pragma GCC pop_options\n+\n #endif"}, {"sha": "fb10a8b644d446ee565b6663524c93f539440331", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae5e29239e28818f807cf11775c95c4243d9a256", "patch": "@@ -1,3 +1,10 @@\n+2015-11-16  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_arm_neon_ok_nocache):\n+\t Check __ARM_NEON__ instead of \"arm_neon.h.\n+\t* gcc.target/arm/attr-neon3.c: New test.\n+\t* gcc.target/arm/attr-neon-fp16.c: Likewise\n+\n 2015-11-16  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/65837"}, {"sha": "3cf8918d724afd40cc34e6b1bc203cfb7c8c7faf", "filename": "gcc/testsuite/gcc.target/arm/attr-neon-fp16.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-fp16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-fp16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-fp16.c?ref=ae5e29239e28818f807cf11775c95c4243d9a256", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-mfp16-format=ieee -mfloat-abi=softfp\" } */\n+\n+#include \"arm_neon.h\"\n+\n+float16x4_t __attribute__((target(\"fpu=neon-fp16\")))\n+foo (float32x4_t arg)\n+{\n+    return vcvt_f16_f32 (arg);\n+}"}, {"sha": "30a14790d08894c90cc4b95316de5a069b765684", "filename": "gcc/testsuite/gcc.target/arm/attr-neon3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon3.c?ref=ae5e29239e28818f807cf11775c95c4243d9a256", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-O2 -mfloat-abi=softfp -mfpu=vfp\" } */\n+\n+#include <arm_neon.h>\n+\n+/* Check that neon is used.  */\n+int8x8_t __attribute__ ((target(\"fpu=neon\")))\n+my (int8x8_t __a, int8x8_t __b)\n+{\n+  return __a + __b;\n+}\n+\n+/* Check that crypto builtins are recognized.  */\n+poly128_t __attribute__ ((target(\"fpu=crypto-neon-fp-armv8\")))\n+foo (poly128_t* ptr)\n+{\n+  return vldrq_p128 (ptr);\n+}\n+\n+/* Check that default mode is restored.  */\n+int8x8_t\n+my1 (int8x8_t __a, int8x8_t __b)\n+{\n+  return __a + __b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\.fpu vfp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\.fpu neon\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\.fpu crypto-neon-fp-armv8\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vld1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vadd\" 1} } */"}, {"sha": "4f2d815778bff993404b682b59e33cc6152cdc04", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5e29239e28818f807cf11775c95c4243d9a256/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ae5e29239e28818f807cf11775c95c4243d9a256", "patch": "@@ -2850,8 +2850,10 @@ proc check_effective_target_arm_neon_ok_nocache { } {\n     if { [check_effective_target_arm32] } {\n \tforeach flags {\"\" \"-mfloat-abi=softfp\" \"-mfpu=neon\" \"-mfpu=neon -mfloat-abi=softfp\"} {\n \t    if { [check_no_compiler_messages_nocache arm_neon_ok object {\n-\t\t#include \"arm_neon.h\"\n \t\tint dummy;\n+\t\t#ifndef __ARM_NEON__\n+\t\t#error not NEON\n+\t\t#endif\n \t\t/* Avoid the case where a test adds -mfpu=neon, but the toolchain is\n \t\t   configured for -mcpu=arm926ej-s, for example.  */\n \t\t#if __ARM_ARCH < 7"}]}