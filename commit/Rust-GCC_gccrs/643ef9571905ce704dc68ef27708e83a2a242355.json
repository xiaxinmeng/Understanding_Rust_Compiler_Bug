{"sha": "643ef9571905ce704dc68ef27708e83a2a242355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQzZWY5NTcxOTA1Y2U3MDRkYzY4ZWYyNzcwOGU4M2EyYTI0MjM1NQ==", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@sourceware.org", "date": "2018-06-27T05:28:06Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gcc.gnu.org", "date": "2018-06-27T05:28:06Z"}, "message": "[aarch64] Fix obsolete comment about X30\n\nr217431 changed X30 as caller-saved in CALL_USE_REGISTERS because of\nwhich this comment about X30 not being marked as call-clobbered is no\nlonger accurate.  Fixed to describe the current state more accurately.\n\n\t* config/aarch64/aarch64.h (CALL_USE_REGISTERS): Fix obsolete\n\tcomment.\n\t(EPILOGUE_USES): Likewise.\n\nFrom-SVN: r262176", "tree": {"sha": "893e466023b775720d6b7c56c98cc714013cc9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/893e466023b775720d6b7c56c98cc714013cc9da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/643ef9571905ce704dc68ef27708e83a2a242355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643ef9571905ce704dc68ef27708e83a2a242355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643ef9571905ce704dc68ef27708e83a2a242355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643ef9571905ce704dc68ef27708e83a2a242355/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "307193b82cecb8ab79cf8880d642e1a3acb9c9f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307193b82cecb8ab79cf8880d642e1a3acb9c9f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/307193b82cecb8ab79cf8880d642e1a3acb9c9f6"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "773eeaa4681d33db563b3288c574c6de2f94c55b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643ef9571905ce704dc68ef27708e83a2a242355/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643ef9571905ce704dc68ef27708e83a2a242355/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=643ef9571905ce704dc68ef27708e83a2a242355", "patch": "@@ -1,3 +1,9 @@\n+2018-06-27  Siddhesh Poyarekar  <siddhesh@sourceware.org>\n+\n+\t* config/aarch64/aarch64.h (CALL_USE_REGISTERS): Fix obsolete\n+\tcomment.\n+\t(EPILOGUE_USES): Likewise.\n+\n 2018-06-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-inline.c (remap_location): New function extracted from..."}, {"sha": "f284e74bfb8c9bab2aa22cc6c5a67750cbbba3c2", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643ef9571905ce704dc68ef27708e83a2a242355/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643ef9571905ce704dc68ef27708e83a2a242355/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=643ef9571905ce704dc68ef27708e83a2a242355", "patch": "@@ -303,15 +303,6 @@ extern unsigned aarch64_architecture_version;\n    register.  GCC internally uses the poly_int variable aarch64_sve_vg\n    instead.  */\n \n-/* Note that we don't mark X30 as a call-clobbered register.  The idea is\n-   that it's really the call instructions themselves which clobber X30.\n-   We don't care what the called function does with it afterwards.\n-\n-   This approach makes it easier to implement sibcalls.  Unlike normal\n-   calls, sibcalls don't clobber X30, so the register reaches the\n-   called function intact.  EPILOGUE_USES says that X30 is useful\n-   to the called function.  */\n-\n #define FIXED_REGISTERS\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\\\n     0, 0, 0, 0,   0, 0, 0, 0,\t/* R0 - R7 */\t\t\\\n@@ -327,6 +318,13 @@ extern unsigned aarch64_architecture_version;\n     0, 0, 0, 0,   0, 0, 0, 0,   /* P8 - P15 */          \\\n   }\n \n+/* X30 is marked as caller-saved which is in line with regular function call\n+   behavior since the call instructions clobber it; AARCH64_EXPAND_CALL does\n+   that for regular function calls and avoids it for sibcalls.  X30 is\n+   considered live for sibcalls; EPILOGUE_USES helps achieve that by returning\n+   true but not until function epilogues have been generated.  This ensures\n+   that X30 is available for use in leaf functions if needed.  */\n+\n #define CALL_USED_REGISTERS\t\t\t\t\\\n   {\t\t\t\t\t\t\t\\\n     1, 1, 1, 1,   1, 1, 1, 1,\t/* R0 - R7 */\t\t\\\n@@ -391,9 +389,10 @@ extern unsigned aarch64_architecture_version;\n     V_ALIASES(28), V_ALIASES(29), V_ALIASES(30), V_ALIASES(31)  \\\n   }\n \n-/* Say that the epilogue uses the return address register.  Note that\n-   in the case of sibcalls, the values \"used by the epilogue\" are\n-   considered live at the start of the called function.  */\n+/* Say that the return address register is used by the epilogue, but only after\n+   epilogue generation is complete.  Note that in the case of sibcalls, the\n+   values \"used by the epilogue\" are considered live at the start of the called\n+   function.  */\n \n #define EPILOGUE_USES(REGNO) \\\n   (epilogue_completed && (REGNO) == LR_REGNUM)"}]}