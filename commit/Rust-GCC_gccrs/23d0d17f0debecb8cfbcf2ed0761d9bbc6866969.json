{"sha": "23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNkMGQxN2YwZGViZWNiOGNmYmNmMmVkMDc2MWQ5YmJjNjg2Njk2OQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2005-12-09T17:16:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-12-09T17:16:35Z"}, "message": "hostparm.ads (Max_Line_Length): Set to Types.Column_Number'Last - 1...\n\n2005-12-05  Thomas Quinot  <quinot@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* hostparm.ads (Max_Line_Length): Set to Types.Column_Number'Last - 1,\n\twhich is the absolute maximum length we can support.\n\n\t* frontend.adb: For the processing of configuration pragma files,\n\tremove references to Opt.Max_Line_Length, which is not checked anymore.\n\n\t* namet.ads (Name_Buffer): Adjust size to reflect increase on max line\n\tlength.\n\n\t* scn.adb, scng.adb: \n\tAlways check line length against the absolute supported maximum,\n\tHostparm.Max_Line_Length.\n\n\t* stylesw.adb (Set_Style_Check_Options, case M): The maximum supported\n\tvalue for the maximum line length is Max_Line_Length (not\n\tColumn_Number'Last).\n\tMinor error msg update\n\t(Set_Style_Check_Options): New interface returning error msg\n\tMinor code reorganization (processing for 'M' was out of alpha order)\n\n\t* switch-c.adb: New interface for Set_Style_Check_Options\n\n\t* stylesw.ads (Set_Style_Check_Options): New interface returning error\n\tmsg.\n\nFrom-SVN: r108288", "tree": {"sha": "368cb33a970b6f1d0194e690a0101fbef8161433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/368cb33a970b6f1d0194e690a0101fbef8161433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/comments", "author": null, "committer": null, "parents": [{"sha": "7cdc672b77b47c9c4794ed9b24b8dc923ea36bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cdc672b77b47c9c4794ed9b24b8dc923ea36bab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cdc672b77b47c9c4794ed9b24b8dc923ea36bab"}], "stats": {"total": 202, "additions": 127, "deletions": 75}, "files": [{"sha": "2cb90d81d3fb1bd71f0f3b8294056742b8226521", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "patch": "@@ -127,7 +127,6 @@ begin\n \n       Opt.Style_Check := False;\n       Style_Check := False;\n-      Opt.Max_Line_Length := Int (Column_Number'Last);\n \n       --  Capture current suppress options, which may get modified\n \n@@ -191,7 +190,6 @@ begin\n       --  Restore style check, but if config file turned on checks, leave on!\n \n       Opt.Style_Check := Save_Style_Check or Style_Check;\n-      Opt.Max_Line_Length := Hostparm.Max_Line_Length;\n \n       --  Capture any modifications to suppress options from config pragmas\n "}, {"sha": "eae07726a67121cf0559f152978b0df56e13365f", "filename": "gcc/ada/hostparm.ads", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fhostparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fhostparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fhostparm.ads?ref=23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,6 +35,8 @@\n --  are parameters that are relevant to the host machine on which the\n --  compiler is running, and thus this package is part of the compiler.\n \n+with Types;\n+\n package Hostparm is\n \n    -----------------------\n@@ -61,13 +63,15 @@ package Hostparm is\n    Normalized_CWD : constant String := \"./\";\n    --  Normalized string to access current directory\n \n-   Max_Line_Length : constant := 255;\n-   --  Maximum source line length. This can be set to any value up to\n-   --  2**15 - 1, a limit imposed by the assumption that column numbers\n-   --  can be stored in 16 bits (see Types.Column_Number). A value of\n-   --  200 is the minimum value required (RM 2.2(15)), but we use 255\n-   --  for most GNAT targets since this is DEC Ada compatible. The value\n-   --  set here can be overridden by the explicit use of -gnatyM.\n+   Max_Line_Length : constant := Types.Column_Number'Pred\n+                       (Types.Column_Number'Last);\n+   --  Maximum source line length. By default we set it to the maximum\n+   --  value that can be supported, which is given by the range of the\n+   --  Column_Number type. We subtract 1 because need to be able to\n+   --  have a valid Column_Number equal to Max_Line_Length to represent\n+   --  the location of a \"line too long\" error.\n+   --  200 is the minimum value required (RM 2.2(15)). The value set here\n+   --  can be reduced by the explicit use of the -gnatyM style switch.\n \n    Max_Name_Length : constant := 1024;\n    --  Maximum length of unit name (including all dots, and \" (spec)\") and"}, {"sha": "4bf12e6a85cc923ad3b26aa6fb87d22dcf8a089d", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "patch": "@@ -33,6 +33,7 @@\n \n with Alloc;\n with Table;\n+with Hostparm; use Hostparm;\n with System;   use System;\n with Types;    use Types;\n \n@@ -125,12 +126,11 @@ package Namet is\n --  binder, the Byte field is unused, and the Int field is used in various\n --  ways depending on the name involved (see binder documentation).\n \n-   Name_Buffer : String (1 .. 16*1024);\n+   Name_Buffer : String (1 .. 4 * Max_Line_Length);\n    --  This buffer is used to set the name to be stored in the table for the\n    --  Name_Find call, and to retrieve the name for the Get_Name_String call.\n-   --  The plus 1 in the length allows for cases of adding ASCII.NUL. The 16K\n-   --  here is intended to be an infinite value that ensures that we never\n-   --  overflow the buffer (names this long are too absurd to worry!)\n+   --  The limit here is intended to be an infinite value that ensures that we\n+   --  never overflow the buffer (names this long are too absurd to worry!)\n \n    Name_Len : Natural;\n    --  Length of name stored in Name_Buffer. Used as an input parameter for"}, {"sha": "4a6f4f964eccacac8b61e2cc5921f3daffb71b45", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "patch": "@@ -26,6 +26,7 @@\n \n with Atree;    use Atree;\n with Csets;    use Csets;\n+with Hostparm; use Hostparm;\n with Namet;    use Namet;\n with Opt;      use Opt;\n with Restrict; use Restrict;\n@@ -104,7 +105,7 @@ package body Scn is\n    begin\n       if Style_Check then\n          Style.Check_Line_Terminator (Len);\n-      elsif Len > Opt.Max_Line_Length then\n+      elsif Len > Max_Line_Length then\n          Error_Long_Line;\n       end if;\n    end Check_End_Of_Line;\n@@ -266,7 +267,7 @@ package body Scn is\n    begin\n       Error_Msg\n         (\"this line is too long\",\n-         Current_Line_Start + Source_Ptr (Opt.Max_Line_Length));\n+         Current_Line_Start + Source_Ptr (Max_Line_Length));\n    end Error_Long_Line;\n \n    ------------------------"}, {"sha": "1f1fe1562667da6b6af924e768b2d74d6a7d2ab3", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "patch": "@@ -26,6 +26,7 @@\n \n with Csets;    use Csets;\n with Err_Vars; use Err_Vars;\n+with Hostparm; use Hostparm;\n with Namet;    use Namet;\n with Opt;      use Opt;\n with Scans;    use Scans;\n@@ -357,13 +358,9 @@ package body Scng is\n             Style.Check_Line_Max_Length (Len);\n \n          --  If style checking is inactive, check maximum line length against\n-         --  standard value. Note that we take this from Opt.Max_Line_Length\n-         --  rather than Hostparm.Max_Line_Length because we do not want to\n-         --  impose any limit during scanning of configuration pragma files,\n-         --  and Opt.Max_Line_Length (normally set to Hostparm.Max_Line_Length)\n-         --  is reset to Column_Number'Max during scanning of such files.\n+         --  standard value.\n \n-         elsif Len > Opt.Max_Line_Length then\n+         elsif Len > Max_Line_Length then\n             Error_Long_Line;\n          end if;\n \n@@ -423,7 +420,7 @@ package body Scng is\n       begin\n          Error_Msg\n            (\"this line is too long\",\n-            Current_Line_Start + Source_Ptr (Opt.Max_Line_Length));\n+            Current_Line_Start + Source_Ptr (Max_Line_Length));\n       end Error_Long_Line;\n \n       -------------------------------"}, {"sha": "4368372d2a3f1caa6f738b5e64ae62152b646b3b", "filename": "gcc/ada/stylesw.adb", "status": "modified", "additions": 76, "deletions": 38, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fstylesw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fstylesw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.adb?ref=23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "patch": "@@ -24,7 +24,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Opt; use Opt;\n+with Hostparm; use Hostparm;\n+with Opt;      use Opt;\n \n package body Stylesw is\n \n@@ -166,6 +167,7 @@ package body Stylesw is\n       EC : Natural;\n    begin\n       Set_Style_Check_Options (Options, OK, EC);\n+      pragma Assert (OK);\n    end Set_Style_Check_Options;\n \n    --  Normal version with error checking\n@@ -175,19 +177,53 @@ package body Stylesw is\n       OK       : out Boolean;\n       Err_Col  : out Natural)\n    is\n-      J : Natural;\n       C : Character;\n \n+      procedure Add_Img (N : Natural);\n+      --  Concatenates image of N at end of Style_Msg_Buf\n+\n+      procedure Bad_Style_Switch (Msg : String);\n+      --  Called if bad style switch found. Msg is mset in Style_Msg_Buf and\n+      --  Style_Msg_Len. OK is set False.\n+\n+      -------------\n+      -- Add_Img --\n+      -------------\n+\n+      procedure Add_Img (N : Natural) is\n+      begin\n+         if N >= 10 then\n+            Add_Img (N / 10);\n+         end if;\n+\n+         Style_Msg_Len := Style_Msg_Len + 1;\n+         Style_Msg_Buf (Style_Msg_Len) :=\n+           Character'Val (N mod 10 + Character'Pos ('0'));\n+      end Add_Img;\n+\n+      ----------------------\n+      -- Bad_Style_Switch --\n+      ----------------------\n+\n+      procedure Bad_Style_Switch (Msg : String) is\n+      begin\n+         OK := False;\n+         Style_Msg_Len := Msg'Length;\n+         Style_Msg_Buf (1 .. Style_Msg_Len) := Msg;\n+      end Bad_Style_Switch;\n+\n+   --  Start of processing for Set_Style_Check_Options\n+\n    begin\n-      J := Options'First;\n-      while J <= Options'Last loop\n-         C := Options (J);\n-         J := J + 1;\n+      Err_Col := Options'First;\n+      while Err_Col <= Options'Last loop\n+         C := Options (Err_Col);\n+         Err_Col := Err_Col + 1;\n \n          case C is\n             when '1' .. '9' =>\n-               Style_Check_Indentation\n-                  := Character'Pos (C) - Character'Pos ('0');\n+               Style_Check_Indentation :=\n+                 Character'Pos (C) - Character'Pos ('0');\n \n             when 'a' =>\n                Style_Check_Attribute_Casing    := True;\n@@ -222,28 +258,27 @@ package body Stylesw is\n             when 'L' =>\n                Style_Max_Nesting_Level := 0;\n \n-               if J > Options'Last\n-                 or else Options (J) not in '0' .. '9'\n+               if Err_Col > Options'Last\n+                 or else Options (Err_Col) not in '0' .. '9'\n                then\n-                  OK := False;\n-                  Err_Col := J;\n+                  Bad_Style_Switch (\"invalid nesting level\");\n                   return;\n                end if;\n \n                loop\n                   Style_Max_Nesting_Level :=\n                     Style_Max_Nesting_Level * 10 +\n-                      Character'Pos (Options (J)) - Character'Pos ('0');\n+                      Character'Pos (Options (Err_Col)) - Character'Pos ('0');\n \n                   if Style_Max_Nesting_Level > 999 then\n-                     OK := False;\n-                     Err_Col := J;\n+                     Bad_Style_Switch\n+                       (\"max nesting level (999) exceeded in style check\");\n                      return;\n                   end if;\n \n-                  J := J + 1;\n-                  exit when J > Options'Last\n-                    or else Options (J) not in '0' .. '9';\n+                  Err_Col := Err_Col + 1;\n+                  exit when Err_Col > Options'Last\n+                    or else Options (Err_Col) not in '0' .. '9';\n                end loop;\n \n                Style_Check_Max_Nesting_Level := Style_Max_Nesting_Level /= 0;\n@@ -252,41 +287,43 @@ package body Stylesw is\n                Style_Check_Max_Line_Length     := True;\n                Style_Max_Line_Length           := 79;\n \n-            when 'n' =>\n-               Style_Check_Standard            := True;\n-\n-            when 'N' =>\n-               Reset_Style_Check_Options;\n-\n             when 'M' =>\n                Style_Max_Line_Length := 0;\n \n-               if J > Options'Last\n-                 or else Options (J) not in '0' .. '9'\n+               if Err_Col > Options'Last\n+                 or else Options (Err_Col) not in '0' .. '9'\n                then\n-                  OK := False;\n-                  Err_Col := J;\n+                  Bad_Style_Switch\n+                    (\"invalid line length in style check\");\n                   return;\n                end if;\n \n                loop\n                   Style_Max_Line_Length :=\n                     Style_Max_Line_Length * 10 +\n-                      Character'Pos (Options (J)) - Character'Pos ('0');\n+                      Character'Pos (Options (Err_Col)) - Character'Pos ('0');\n \n-                  if Style_Max_Line_Length > Int (Column_Number'Last) then\n+                  if Style_Max_Line_Length > Int (Max_Line_Length) then\n                      OK := False;\n-                     Err_Col := J;\n+                     Style_Msg_Buf (1 .. 27) := \"max line length allowed is \";\n+                     Style_Msg_Len := 27;\n+                     Add_Img (Natural (Max_Line_Length));\n                      return;\n                   end if;\n \n-                  J := J + 1;\n-                  exit when J > Options'Last\n-                    or else Options (J) not in '0' .. '9';\n+                  Err_Col := Err_Col + 1;\n+                  exit when Err_Col > Options'Last\n+                    or else Options (Err_Col) not in '0' .. '9';\n                end loop;\n \n                Style_Check_Max_Line_Length   := Style_Max_Line_Length /= 0;\n \n+            when 'n' =>\n+               Style_Check_Standard            := True;\n+\n+            when 'N' =>\n+               Reset_Style_Check_Options;\n+\n             when 'o' =>\n                Style_Check_Order_Subprograms   := True;\n \n@@ -312,15 +349,16 @@ package body Stylesw is\n                null;\n \n             when others =>\n-               OK      := False;\n-               Err_Col := J - 1;\n+               Err_Col := Err_Col - 1;\n+               Style_Msg_Buf (1 .. 21) := \"invalid style switch:\";\n+               Style_Msg_Len := 22;\n+               Style_Msg_Buf (Style_Msg_Len) := C;\n+               OK := False;\n                return;\n          end case;\n       end loop;\n \n       Style_Check := True;\n       OK := True;\n-      Err_Col := Options'Last + 1;\n    end Set_Style_Check_Options;\n-\n end Stylesw;"}, {"sha": "4dd662672d135870b1f1409000985d1b273af277", "filename": "gcc/ada/stylesw.ads", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fstylesw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fstylesw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.ads?ref=23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "patch": "@@ -254,24 +254,31 @@ package Stylesw is\n    --  This procedure is called to set the default style checking options\n    --  in response to a -gnaty switch with no suboptions.\n \n+   Style_Msg_Buf : String (1 .. 80);\n+   Style_Msg_Len : Natural;\n+   --  Used to return\n+\n    procedure Set_Style_Check_Options\n      (Options  : String;\n       OK       : out Boolean;\n       Err_Col  : out Natural);\n-   --  This procedure is called to set the style check options that\n-   --  correspond to the characters in the given Options string. If\n-   --  all options are valid, they are set in an additive manner:\n-   --  any previous options are retained unless overridden. If any\n-   --  invalid character is found, then OK is False on exit, and\n-   --  Err_Col is the index in options of the bad character. If all\n-   --  options are valid, OK is True on return, and Err_Col is set\n-   --  to Options'Last + 1.\n+   --  This procedure is called to set the style check options that correspond\n+   --  to the characters in the given Options string. If all options are valid,\n+   --  they are set in an additive manner: any previous options are retained\n+   --  unless overridden.\n+   --\n+   --  If all options given are valid, then OK is True, Err_Col is set to\n+   --  Options'Last + 1, and Style_Msg_Buf/Style_Msg_Len are unchanged.\n+   --\n+   --  If an invalid character is found, then OK is False on exit, and Err_Col\n+   --  is the index in options of the bad character. In this case Style_Msg_Len\n+   --  is set and Style_Msg_Buf (1 .. Style_Msg_Len) has a detailed message\n+   --  describing the error.\n \n    procedure Set_Style_Check_Options (Options : String);\n-   --  Like the above procedure, except that the call is simply ignored if\n-   --  there are any error conditions, this is for example appopriate for\n-   --  calls where the string is known to be valid, e.g. because it was\n-   --  obtained by Save_Style_Check_Options.\n+   --  Like the above procedure, but used when the Options string is known to\n+   --  be valid. This is for example appopriate for calls where the string ==\n+   --  was obtained by Save_Style_Check_Options.\n \n    procedure Reset_Style_Check_Options;\n    --  Sets all style check options to off"}, {"sha": "eaefef90430a2a028d3eab6b84b6b587341117cd", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d0d17f0debecb8cfbcf2ed0761d9bbc6866969/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=23d0d17f0debecb8cfbcf2ed0761d9bbc6866969", "patch": "@@ -852,11 +852,18 @@ package body Switch.C is\n                        (Switch_Chars (Ptr .. Max), OK, Ptr);\n \n                      if not OK then\n-                        Bad_Switch (C);\n+                        declare\n+                           R : String (1 .. Style_Msg_Len + 20);\n+                        begin\n+                           R (1 .. 19) := \"bad -gnaty switch (\";\n+                           R (20 .. R'Last - 1) :=\n+                             Style_Msg_Buf (1 .. Style_Msg_Len);\n+                           R (R'Last) := ')';\n+                           Osint.Fail (R);\n+                        end;\n                      end if;\n \n                      Ptr := First_Char + 1;\n-\n                      while Ptr <= Max loop\n                         Last_Stored := First_Stored + 1;\n                         Storing (Last_Stored) := Switch_Chars (Ptr);"}]}