{"sha": "98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThmOGI2N2YyMjAyYzBmODFmZGFjZjY2MWMxZmE1MWYyZWNiODBmYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-12-20T09:52:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-12-20T09:52:15Z"}, "message": "constraints.md (J, K, L): Use IN_RANGE macro.\n\n\t* config/visium/constraints.md (J, K, L): Use IN_RANGE macro.\n\t* config/visium/predicates.md (const_shift_operand): Likewise.\n\t* config/visium/visium.c (visium_legitimize_address): Fix oversight.\n\t(visium_legitimize_reload_address): Likewise.\n\nFrom-SVN: r255856", "tree": {"sha": "31a71f8d5726085eeeddf501e8e758c03acfd58c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31a71f8d5726085eeeddf501e8e758c03acfd58c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb/comments", "author": null, "committer": null, "parents": [{"sha": "c58257d94e62861e44e17394ece1273d8e874b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c58257d94e62861e44e17394ece1273d8e874b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c58257d94e62861e44e17394ece1273d8e874b44"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "3fac117f8936f520738912be32e4824b889528ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb", "patch": "@@ -1,8 +1,14 @@\n+2017-12-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/visium/constraints.md (J, K, L): Use IN_RANGE macro.\n+\t* config/visium/predicates.md (const_shift_operand): Likewise.\n+\t* config/visium/visium.c (visium_legitimize_address): Fix oversight.\n+\t(visium_legitimize_reload_address): Likewise.\n+\n 2017-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/82975\n-\t* config/arm/arm.h (TEST_REGNO): Adjust comment as expected in\n-\tr255830.\n+\t* config/arm/arm.h (TEST_REGNO): Adjust comment as expected in r255830.\n \n 2017-12-20  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "053f1ef67ad072406733ae4a397f429588dac2ca", "filename": "gcc/config/visium/constraints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb/gcc%2Fconfig%2Fvisium%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb/gcc%2Fconfig%2Fvisium%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fconstraints.md?ref=98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb", "patch": "@@ -48,17 +48,17 @@\n (define_constraint \"J\"\n   \"Integer constant in the range 0 .. 65535 (16-bit immediate)\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival >= 0 && ival <= 65535\")))\n+       (match_test \"IN_RANGE (ival, 0, 65535)\")))\n \n (define_constraint \"K\"\n   \"Integer constant in the range 1 .. 31 (5-bit immediate)\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival >= 1 && ival <= 31\")))\n+       (match_test \"IN_RANGE (ival, 1, 31)\")))\n \n (define_constraint \"L\"\n   \"Integer constant in the range -65535 .. -1 (16-bit negative immediate)\"\n   (and (match_code \"const_int\")\n-       (match_test \"ival >= -65535 && ival <= -1\")))\n+       (match_test \"IN_RANGE (ival, -65535, -1)\")))\n \n (define_constraint \"M\"\n   \"Integer constant -1\""}, {"sha": "ebfe4bc0b099f0868653497ddf55d9193dffdaf1", "filename": "gcc/config/visium/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb/gcc%2Fconfig%2Fvisium%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb/gcc%2Fconfig%2Fvisium%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fpredicates.md?ref=98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb", "patch": "@@ -25,7 +25,7 @@\n ;; Return true if OP is a constant in the range 1 .. 31.\n (define_predicate \"const_shift_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"INTVAL (op) >= 1 && INTVAL (op) <= 31\")))\n+       (match_test \"IN_RANGE (INTVAL (op), 1, 31)\")))\n \n ;; Return true if OP is either a register or the constant 0.\n (define_predicate \"reg_or_0_operand\""}, {"sha": "1e3549d721a884f8088652b19c1853f973c28f88", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=98f8b67f2202c0f81fdacf661c1fa51f2ecb80fb", "patch": "@@ -1922,7 +1922,7 @@ visium_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       int offset_base = offset & ~mask;\n \n       /* Check that all of the words can be accessed.  */\n-      if (size > 4 && 0x80 < size + offset - offset_base)\n+      if (size > 4 && size + offset - offset_base > 0x80)\n \toffset_base = offset & ~0x3f;\n       if (offset_base != 0 && offset_base != offset && (offset & mask1) == 0)\n \t{\n@@ -1968,7 +1968,7 @@ visium_legitimize_reload_address (rtx x, machine_mode mode, int opnum,\n       int offset_base = offset & ~mask;\n \n       /* Check that all of the words can be accessed.  */\n-      if (size > 4 && 0x80 < size + offset - offset_base)\n+      if (size > 4 && size + offset - offset_base > 0x80)\n \toffset_base = offset & ~0x3f;\n \n       if (offset_base && (offset & mask1) == 0)"}]}