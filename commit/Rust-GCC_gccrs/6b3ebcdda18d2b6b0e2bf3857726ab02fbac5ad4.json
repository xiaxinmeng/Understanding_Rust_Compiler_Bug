{"sha": "6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzZWJjZGRhMThkMmI2YjBlMmJmMzg1NzcyNmFiMDJmYmFjNWFkNA==", "commit": {"author": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-09-09T04:20:47Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-09-09T04:20:47Z"}, "message": "fix PR53852: stop ISL after a given number of operations\n\n2015-09-02  Sebastian Pop  <s.pop@samsung.com>\n\n            * config.in: Regenerate.\n            * configure: Regenerate.\n            * configure.ac (HAVE_ISL_CTX_MAX_OPERATIONS): Detect.\n            * graphite-optimize-isl.c (optimize_isl): Stop computation when\n            PARAM_MAX_ISL_OPERATIONS is reached.\n            * params.def (PARAM_MAX_ISL_OPERATIONS): Add.\n\n            * graphite-dependences.c (extend_schedule): Remove gcc_asserts on\n            result equal to isl_stat_ok as the status now can be isl_error_quota.\n            (subtract_commutative_associative_deps): Same.\n            (compute_deps): Same.\n\ntestsuite/\n            * gcc.dg/graphite/uns-interchange-12.c: Adjust pattern to pass with\n            both isl-0.12 and isl-0.15.\n            * gcc.dg/graphite/uns-interchange-14.c: Same.\n            * gcc.dg/graphite/uns-interchange-15.c: Same.\n            * gcc.dg/graphite/uns-interchange-mvt.c: Same.\n\nFrom-SVN: r227572", "tree": {"sha": "4ca18591bc257fbdfb434a9bb697b0b599004413", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ca18591bc257fbdfb434a9bb697b0b599004413"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b81c315682ec942ed0591d8f2d07ede43b4f3c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81c315682ec942ed0591d8f2d07ede43b4f3c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b81c315682ec942ed0591d8f2d07ede43b4f3c84"}], "stats": {"total": 214, "additions": 144, "deletions": 70}, "files": [{"sha": "d697eddadc0f13f8a8a4c9f985a95eecd15cee89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -1,3 +1,17 @@\n+2015-09-09  Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR tree-optimization/53852\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac (HAVE_ISL_CTX_MAX_OPERATIONS): Detect.\n+\t* graphite-optimize-isl.c (optimize_isl): Stop computation when\n+\tPARAM_MAX_ISL_OPERATIONS is reached.\n+\t* params.def (PARAM_MAX_ISL_OPERATIONS): Add.\n+\t* graphite-dependences.c (extend_schedule): Remove gcc_asserts on\n+\tresult equal to isl_stat_ok as the status now can be isl_error_quota.\n+\t(subtract_commutative_associative_deps): Same.\n+\t(compute_deps): Same.\n+\n 2015-09-08  Aditya Kumar  <hiraditya@msn.com>\n             Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "98c46478a144eecff3b5dfea6cedc26a91e3a135", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -1332,6 +1332,12 @@\n #endif\n \n \n+/* Define if isl_ctx_get_max_operations exists. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_ISL_CTX_MAX_OPERATIONS\n+#endif\n+\n+\n /* Define if isl_options_set_schedule_serialize_sccs exists. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_ISL_OPTIONS_SET_SCHEDULE_SERIALIZE_SCCS"}, {"sha": "07d39f943934863f7f0beb1f8f65a18202f9a179", "filename": "gcc/configure", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -28625,6 +28625,29 @@ rm -f core conftest.err conftest.$ac_objext \\\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_has_isl_options_set_schedule_serialize_sccs\" >&5\n $as_echo \"$ac_has_isl_options_set_schedule_serialize_sccs\" >&6; }\n \n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking Checking for isl_ctx_get_max_operations\" >&5\n+$as_echo_n \"checking Checking for isl_ctx_get_max_operations... \" >&6; }\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <isl/ctx.h>\n+int\n+main ()\n+{\n+isl_ctx_get_max_operations (isl_ctx_alloc ());\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  ac_has_isl_ctx_get_max_operations=yes\n+else\n+  ac_has_isl_ctx_get_max_operations=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_has_isl_ctx_get_max_operations\" >&5\n+$as_echo \"$ac_has_isl_ctx_get_max_operations\" >&6; }\n+\n   LIBS=\"$saved_LIBS\"\n   CXXFLAGS=\"$saved_CXXFLAGS\"\n \n@@ -28638,6 +28661,11 @@ $as_echo \"#define HAVE_ISL_SCHED_CONSTRAINTS_COMPUTE_SCHEDULE 1\" >>confdefs.h\n \n $as_echo \"#define HAVE_ISL_OPTIONS_SET_SCHEDULE_SERIALIZE_SCCS 1\" >>confdefs.h\n \n+  fi\n+  if test x\"$ac_has_isl_ctx_get_max_operations\" = x\"yes\"; then\n+\n+$as_echo \"#define HAVE_ISL_CTX_MAX_OPERATIONS 1\" >>confdefs.h\n+\n   fi\n fi\n "}, {"sha": "b6e8bed843f160cd50a50162ee682ce013e9fb31", "filename": "gcc/configure.ac", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -5790,6 +5790,13 @@ if test \"x${ISLLIBS}\" != \"x\" ; then\n               [ac_has_isl_options_set_schedule_serialize_sccs=no])\n   AC_MSG_RESULT($ac_has_isl_options_set_schedule_serialize_sccs)\n \n+  AC_MSG_CHECKING([Checking for isl_ctx_get_max_operations])\n+  AC_TRY_LINK([#include <isl/ctx.h>],\n+              [isl_ctx_get_max_operations (isl_ctx_alloc ());],\n+              [ac_has_isl_ctx_get_max_operations=yes],\n+              [ac_has_isl_ctx_get_max_operations=no])\n+  AC_MSG_RESULT($ac_has_isl_ctx_get_max_operations)\n+\n   LIBS=\"$saved_LIBS\"\n   CXXFLAGS=\"$saved_CXXFLAGS\"\n \n@@ -5802,6 +5809,10 @@ if test \"x${ISLLIBS}\" != \"x\" ; then\n      AC_DEFINE(HAVE_ISL_OPTIONS_SET_SCHEDULE_SERIALIZE_SCCS, 1,\n                [Define if isl_options_set_schedule_serialize_sccs exists.])\n   fi\n+  if test x\"$ac_has_isl_ctx_get_max_operations\" = x\"yes\"; then\n+     AC_DEFINE(HAVE_ISL_CTX_MAX_OPERATIONS, 1,\n+               [Define if isl_ctx_get_max_operations exists.])\n+  fi\n fi\n \n GCC_ENABLE_PLUGINS"}, {"sha": "85f16f3933b4d1e61232e782fa8ca07bff7e069a", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 35, "deletions": 48, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -256,17 +256,12 @@ __isl_give isl_union_map *\n extend_schedule (__isl_take isl_union_map *x)\n {\n   int max = 0;\n-  isl_stat res;\n   struct extend_schedule_str str;\n \n-  res = isl_union_map_foreach_map (x, max_number_of_out_dimensions, (void *) &max);\n-  gcc_assert (res == isl_stat_ok);\n-\n+  isl_union_map_foreach_map (x, max_number_of_out_dimensions, (void *) &max);\n   str.max = max;\n   str.umap = isl_union_map_empty (isl_union_map_get_space (x));\n-  res = isl_union_map_foreach_map (x, extend_schedule_1, (void *) &str);\n-  gcc_assert (res == isl_stat_ok);\n-\n+  isl_union_map_foreach_map (x, extend_schedule_1, (void *) &str);\n   isl_union_map_free (x);\n   return str.umap;\n }\n@@ -395,7 +390,6 @@ subtract_commutative_associative_deps (scop_p scop,\n   FOR_EACH_VEC_ELT (pbbs, i, pbb)\n     if (PBB_IS_REDUCTION (pbb))\n       {\n-\tint res;\n \tisl_union_map *r = isl_union_map_empty (isl_space_copy (space));\n \tisl_union_map *must_w = isl_union_map_empty (isl_space_copy (space));\n \tisl_union_map *may_w = isl_union_map_empty (isl_space_copy (space));\n@@ -432,27 +426,24 @@ subtract_commutative_associative_deps (scop_p scop,\n \t  (isl_union_map_copy (must_w), isl_union_map_copy (may_w));\n \tempty = isl_union_map_empty (isl_union_map_get_space (all_w));\n \n-\tres = isl_union_map_compute_flow (isl_union_map_copy (r),\n-\t\t\t\t\t  isl_union_map_copy (must_w),\n-\t\t\t\t\t  isl_union_map_copy (may_w),\n-\t\t\t\t\t  isl_union_map_copy (original),\n-\t\t\t\t\t  &x_must_raw, &x_may_raw,\n-\t\t\t\t\t  &x_must_raw_no_source,\n-\t\t\t\t\t  &x_may_raw_no_source);\n-\tgcc_assert (res == 0);\n-\tres = isl_union_map_compute_flow (isl_union_map_copy (all_w),\n-\t\t\t\t\t  r, empty,\n-\t\t\t\t\t  isl_union_map_copy (original),\n-\t\t\t\t\t  &x_must_war, &x_may_war,\n-\t\t\t\t\t  &x_must_war_no_source,\n-\t\t\t\t\t  &x_may_war_no_source);\n-\tgcc_assert (res == 0);\n-\tres = isl_union_map_compute_flow (all_w, must_w, may_w,\n-\t\t\t\t\t  isl_union_map_copy (original),\n-\t\t\t\t\t  &x_must_waw, &x_may_waw,\n-\t\t\t\t\t  &x_must_waw_no_source,\n-\t\t\t\t\t  &x_may_waw_no_source);\n-\tgcc_assert (res == 0);\n+\tisl_union_map_compute_flow (isl_union_map_copy (r),\n+\t\t\t\t    isl_union_map_copy (must_w),\n+\t\t\t\t    isl_union_map_copy (may_w),\n+\t\t\t\t    isl_union_map_copy (original),\n+\t\t\t\t    &x_must_raw, &x_may_raw,\n+\t\t\t\t    &x_must_raw_no_source,\n+\t\t\t\t    &x_may_raw_no_source);\n+\tisl_union_map_compute_flow (isl_union_map_copy (all_w),\n+\t\t\t\t    r, empty,\n+\t\t\t\t    isl_union_map_copy (original),\n+\t\t\t\t    &x_must_war, &x_may_war,\n+\t\t\t\t    &x_must_war_no_source,\n+\t\t\t\t    &x_may_war_no_source);\n+\tisl_union_map_compute_flow (all_w, must_w, may_w,\n+\t\t\t\t    isl_union_map_copy (original),\n+\t\t\t\t    &x_must_waw, &x_may_waw,\n+\t\t\t\t    &x_must_waw_no_source,\n+\t\t\t\t    &x_may_waw_no_source);\n \n \tif (must_raw)\n \t  *must_raw = isl_union_map_subtract (*must_raw, x_must_raw);\n@@ -551,26 +542,22 @@ compute_deps (scop_p scop, vec<poly_bb_p> pbbs,\n   isl_space *space = isl_union_map_get_space (all_writes);\n   isl_union_map *empty = isl_union_map_empty (space);\n   isl_union_map *original = scop_get_original_schedule (scop, pbbs);\n-  int res;\n \n-  res = isl_union_map_compute_flow (isl_union_map_copy (reads),\n-\t\t\t\t    isl_union_map_copy (must_writes),\n-\t\t\t\t    isl_union_map_copy (may_writes),\n-\t\t\t\t    isl_union_map_copy (original),\n-\t\t\t\t    must_raw, may_raw, must_raw_no_source,\n-\t\t\t\t    may_raw_no_source);\n-  gcc_assert (res == 0);\n-  res = isl_union_map_compute_flow (isl_union_map_copy (all_writes),\n-\t\t\t\t    reads, empty,\n-\t\t\t\t    isl_union_map_copy (original),\n-\t\t\t\t    must_war, may_war, must_war_no_source,\n-\t\t\t\t    may_war_no_source);\n-  gcc_assert (res == 0);\n-  res = isl_union_map_compute_flow (all_writes, must_writes, may_writes,\n-\t\t\t\t    isl_union_map_copy (original),\n-\t\t\t\t    must_waw, may_waw, must_waw_no_source,\n-\t\t\t\t    may_waw_no_source);\n-  gcc_assert (res == 0);\n+  isl_union_map_compute_flow (isl_union_map_copy (reads),\n+\t\t\t      isl_union_map_copy (must_writes),\n+\t\t\t      isl_union_map_copy (may_writes),\n+\t\t\t      isl_union_map_copy (original),\n+\t\t\t      must_raw, may_raw, must_raw_no_source,\n+\t\t\t      may_raw_no_source);\n+  isl_union_map_compute_flow (isl_union_map_copy (all_writes),\n+\t\t\t      reads, empty,\n+\t\t\t      isl_union_map_copy (original),\n+\t\t\t      must_war, may_war, must_war_no_source,\n+\t\t\t      may_war_no_source);\n+  isl_union_map_compute_flow (all_writes, must_writes, may_writes,\n+\t\t\t      isl_union_map_copy (original),\n+\t\t\t      must_waw, may_waw, must_waw_no_source,\n+\t\t\t      may_waw_no_source);\n \n   subtract_commutative_associative_deps\n     (scop, pbbs, original,"}, {"sha": "811a510ad21cb3093e311b7136948e4d3d7e52a1", "filename": "gcc/graphite-optimize-isl.c", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fgraphite-optimize-isl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fgraphite-optimize-isl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-optimize-isl.c?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <isl/band.h>\n #include <isl/aff.h>\n #include <isl/options.h>\n+#include <isl/ctx.h>\n \n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -422,26 +423,25 @@ static const int CONSTANT_BOUND = 20;\n bool\n optimize_isl (scop_p scop)\n {\n-\n-  isl_schedule *schedule;\n-#ifdef HAVE_ISL_SCHED_CONSTRAINTS_COMPUTE_SCHEDULE\n-  isl_schedule_constraints *schedule_constraints;\n+#ifdef HAVE_ISL_CTX_MAX_OPERATIONS\n+  int old_max_operations = isl_ctx_get_max_operations(scop->ctx);\n+  int max_operations = PARAM_VALUE (PARAM_MAX_ISL_OPERATIONS);\n+  if (max_operations)\n+    isl_ctx_set_max_operations(scop->ctx, max_operations);\n #endif\n-  isl_union_set *domain;\n-  isl_union_map *validity, *proximity, *dependences;\n-  isl_union_map *schedule_map;\n+  isl_options_set_on_error (scop->ctx, ISL_ON_ERROR_CONTINUE);\n \n-  domain = scop_get_domains (scop);\n-  dependences = scop_get_dependences (scop);\n+  isl_union_set *domain = scop_get_domains (scop);\n+  isl_union_map *dependences = scop_get_dependences (scop);\n   dependences = isl_union_map_gist_domain (dependences,\n \t\t\t\t\t   isl_union_set_copy (domain));\n   dependences = isl_union_map_gist_range (dependences,\n \t\t\t\t\t  isl_union_set_copy (domain));\n-  validity = dependences;\n-\n-  proximity = isl_union_map_copy (validity);\n+  isl_union_map *validity = dependences;\n+  isl_union_map *proximity = isl_union_map_copy (validity);\n \n #ifdef HAVE_ISL_SCHED_CONSTRAINTS_COMPUTE_SCHEDULE\n+  isl_schedule_constraints *schedule_constraints;\n   schedule_constraints = isl_schedule_constraints_on_domain (domain);\n   schedule_constraints\n \t= isl_schedule_constraints_set_proximity (schedule_constraints,\n@@ -461,26 +461,39 @@ optimize_isl (scop_p scop)\n #else\n   isl_options_set_schedule_fuse (scop->ctx, ISL_SCHEDULE_FUSE_MIN);\n #endif\n-  isl_options_set_on_error (scop->ctx, ISL_ON_ERROR_CONTINUE);\n \n #ifdef HAVE_ISL_SCHED_CONSTRAINTS_COMPUTE_SCHEDULE\n-  schedule = isl_schedule_constraints_compute_schedule(schedule_constraints);\n+  isl_schedule *schedule\n+    = isl_schedule_constraints_compute_schedule (schedule_constraints);\n #else\n-  schedule = isl_union_set_compute_schedule (domain, validity, proximity);\n+  isl_schedule *schedule\n+    = isl_union_set_compute_schedule (domain, validity, proximity);\n #endif\n \n   isl_options_set_on_error (scop->ctx, ISL_ON_ERROR_ABORT);\n \n+#ifdef HAVE_ISL_CTX_MAX_OPERATIONS\n+  isl_ctx_reset_operations(scop->ctx);\n+  isl_ctx_set_max_operations(scop->ctx, old_max_operations);\n+  if (!schedule || isl_ctx_last_error (scop->ctx) == isl_error_quota)\n+    {\n+      if (dump_file && dump_flags)\n+\tfprintf (dump_file, \"ISL timed out at %d operations\\n\",\n+\t\t max_operations);\n+      if (schedule)\n+\tisl_schedule_free (schedule);\n+      return false;\n+    }\n+#else\n   if (!schedule)\n     return false;\n+#endif\n \n-  schedule_map = getScheduleMap (schedule);\n-\n+  isl_union_map *schedule_map = getScheduleMap (schedule);\n   apply_schedule_map_to_scop (scop, schedule_map);\n \n   isl_schedule_free (schedule);\n   isl_union_map_free (schedule_map);\n-\n   return true;\n }\n "}, {"sha": "34e2025f3d279c1012a07664300eb97617e18326", "filename": "gcc/params.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -844,6 +844,11 @@ DEFPARAM (PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION,\n \t  \"maximum number of basic blocks per function to be analyzed by Graphite\",\n \t  100, 0, 0)\n \n+DEFPARAM (PARAM_MAX_ISL_OPERATIONS,\n+\t  \"max-isl-operations\",\n+\t  \"maximum number of ISL operations, 0 means unlimited\",\n+\t  350000, 0, 0)\n+\n /* Avoid data dependence analysis on very large loops.  */\n DEFPARAM (PARAM_LOOP_MAX_DATAREFS_FOR_DATADEPS,\n \t  \"loop-max-datarefs-for-datadeps\","}, {"sha": "15c503f43f30287821bcdafa89f1611e0fc7af89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -1,3 +1,13 @@\n+2015-09-09  Aditya Kumar  <hiraditya@msn.com>\n+            Sebastian Pop  <s.pop@samsung.com>\n+\n+\tPR tree-optimization/53852\n+\t* gcc.dg/graphite/uns-interchange-12.c: Adjust pattern to pass with\n+\tboth isl-0.12 and isl-0.15.\n+\t* gcc.dg/graphite/uns-interchange-14.c: Same.\n+\t* gcc.dg/graphite/uns-interchange-15.c: Same.\n+\t* gcc.dg/graphite/uns-interchange-mvt.c: Same.\n+\n 2015-09-08  Aditya Kumar  <hiraditya@msn.com>\n             Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "4e3c705a13a92af4a7bad6b0519a6740a9293511", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-12.c?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -54,4 +54,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 4 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump \"tiled by\" \"graphite\" } } */"}, {"sha": "a9d4950a525c5ff94e41c3a0d93c19ba0732dd37", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-14.c?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -55,4 +55,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 5 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump \"tiled by\" \"graphite\" } } */"}, {"sha": "fe2669f15780a47df2ff122c8961837dcb2388fd", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-15.c?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -49,4 +49,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 2 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump \"tiled by\" \"graphite\" } } */"}, {"sha": "211c9ab82bd60535c50113f1f08de2c8b195bddd", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-mvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-mvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-mvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-mvt.c?ref=6b3ebcdda18d2b6b0e2bf3857726ab02fbac5ad4", "patch": "@@ -59,4 +59,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"tiled by\" 3 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump \"tiled by\" \"graphite\" } } */"}]}