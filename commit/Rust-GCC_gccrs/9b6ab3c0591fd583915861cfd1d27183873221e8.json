{"sha": "9b6ab3c0591fd583915861cfd1d27183873221e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI2YWIzYzA1OTFmZDU4MzkxNTg2MWNmZDFkMjcxODM4NzMyMjFlOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-10-19T12:46:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-19T12:46:42Z"}, "message": "re PR c++/38761 (%s substituted with regular word can't be properly translated)\n\n2011-10-19  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/38761\n\tPR c++/40872\n\t* decl.c (duplicate_decls, make_typename_type, grokdeclarator): Use\n\tG_() in error message strings to facilitate translation.\n\t* semantics.c (finish_id_expression): Likewise.\n\t* parser.c (cp_parser_nested_name_specifier_opt,\n\tcp_parser_parameter_declaration): Likewise.\n\nFrom-SVN: r180185", "tree": {"sha": "7d68d5cff8568aca5f5dada00e5cd8fc09885a9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d68d5cff8568aca5f5dada00e5cd8fc09885a9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b6ab3c0591fd583915861cfd1d27183873221e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6ab3c0591fd583915861cfd1d27183873221e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b6ab3c0591fd583915861cfd1d27183873221e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6ab3c0591fd583915861cfd1d27183873221e8/comments", "author": null, "committer": null, "parents": [{"sha": "7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9a3dcd7d1981f6ef2d3ab7ab51b200715b8193"}], "stats": {"total": 64, "additions": 40, "deletions": 24}, "files": [{"sha": "375c808dc38c032a1829a6f55ed02568430d3662", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6ab3c0591fd583915861cfd1d27183873221e8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6ab3c0591fd583915861cfd1d27183873221e8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9b6ab3c0591fd583915861cfd1d27183873221e8", "patch": "@@ -1,3 +1,13 @@\n+2011-10-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/38761\n+\tPR c++/40872\n+\t* decl.c (duplicate_decls, make_typename_type, grokdeclarator): Use\n+\tG_() in error message strings to facilitate translation.\n+\t* semantics.c (finish_id_expression): Likewise.\n+\t* parser.c (cp_parser_nested_name_specifier_opt,\n+\tcp_parser_parameter_declaration): Likewise.\n+\n 2011-10-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50531"}, {"sha": "a21cf461aabe9cc55ee60a84801ff7394d5d7418", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6ab3c0591fd583915861cfd1d27183873221e8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6ab3c0591fd583915861cfd1d27183873221e8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9b6ab3c0591fd583915861cfd1d27183873221e8", "patch": "@@ -1542,8 +1542,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  error_at (DECL_SOURCE_LOCATION (newdecl), errmsg, newdecl);\n \t  if (DECL_NAME (olddecl) != NULL_TREE)\n \t    error ((DECL_INITIAL (olddecl) && namespace_bindings_p ())\n-\t\t\t ? \"%q+#D previously defined here\"\n-\t\t\t : \"%q+#D previously declared here\", olddecl);\n+\t\t   ? G_(\"%q+#D previously defined here\")\n+\t\t   : G_(\"%q+#D previously declared here\"), olddecl);\n \t  return error_mark_node;\n \t}\n       else if (TREE_CODE (olddecl) == FUNCTION_DECL\n@@ -3236,8 +3236,8 @@ make_typename_type (tree context, tree name, enum tag_types tag_type,\n   if (!t)\n     {\n       if (complain & tf_error)\n-\terror (want_template ? \"no class template named %q#T in %q#T\"\n-\t       : \"no type named %q#T in %q#T\", name, context);\n+\terror (want_template ? G_(\"no class template named %q#T in %q#T\")\n+\t       : G_(\"no type named %q#T in %q#T\"), name, context);\n       return error_mark_node;\n     }\n   \n@@ -9143,13 +9143,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t   virtual.  A constructor may not be static.  */\n \t\tif (staticp == 2)\n \t\t  error ((flags == DTOR_FLAG)\n-\t\t\t ? \"destructor cannot be static member function\"\n-\t\t\t : \"constructor cannot be static member function\");\n+\t\t\t ? G_(\"destructor cannot be static member function\")\n+\t\t\t : G_(\"constructor cannot be static member function\"));\n \t\tif (memfn_quals)\n \t\t  {\n \t\t    error ((flags == DTOR_FLAG)\n-\t\t\t   ? \"destructors may not be cv-qualified\"\n-\t\t\t   : \"constructors may not be cv-qualified\");\n+\t\t\t   ? G_(\"destructors may not be cv-qualified\")\n+\t\t\t   : G_(\"constructors may not be cv-qualified\"));\n \t\t    memfn_quals = TYPE_UNQUALIFIED;\n \t\t  }\n \n@@ -9502,8 +9502,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t      && (!friendp || funcdef_flag))\n \t    {\n \t      error (funcdef_flag\n-\t\t     ? \"cannot define member function %<%T::%s%> within %<%T%>\"\n-\t\t     : \"cannot declare member function %<%T::%s%> within %<%T%>\",\n+\t\t     ? G_(\"cannot define member function %<%T::%s%> \"\n+\t\t\t  \"within %<%T%>\")\n+\t\t     : G_(\"cannot declare member function %<%T::%s%> \"\n+\t\t\t  \"within %<%T%>\"),\n \t\t     ctype, name, current_class_type);\n \t      return error_mark_node;\n \t    }\n@@ -10223,8 +10225,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t     || sfk == sfk_destructor)\n \t      {\n \t\terror (funcdef_flag\n-\t\t       ? \"%qs defined in a non-class scope\"\n-\t\t       : \"%qs declared in a non-class scope\", name);\n+\t\t       ? G_(\"%qs defined in a non-class scope\")\n+\t\t       : G_(\"%qs declared in a non-class scope\"), name);\n \t\tsfk = sfk_none;\n \t      }\n \t  }"}, {"sha": "8d138fb7b5388e9f07d9ab2c0b8b92752fd683c4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6ab3c0591fd583915861cfd1d27183873221e8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6ab3c0591fd583915861cfd1d27183873221e8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9b6ab3c0591fd583915861cfd1d27183873221e8", "patch": "@@ -4752,8 +4752,8 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n \t       && (TREE_CODE (TYPENAME_TYPE_FULLNAME (new_scope))\n \t\t   == TEMPLATE_ID_EXPR)))\n \tpermerror (input_location, TYPE_P (new_scope)\n-\t\t   ? \"%qT is not a template\"\n-\t\t   : \"%qD is not a template\",\n+\t\t   ? G_(\"%qT is not a template\")\n+\t\t   : G_(\"%qD is not a template\"),\n \t\t   new_scope);\n       /* If it is a class scope, try to complete it; we are about to\n \t be looking up names inside the class.  */\n@@ -16810,17 +16810,20 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t  \n \t  if (id_declarator && id_declarator->kind == cdk_id)\n \t    error_at (declarator_token_start->location,\n-\t\t      template_parm_p \n-\t\t      ? \"template parameter pack %qD\"\n-\t\t      \" cannot have a default argument\"\n-\t\t      : \"parameter pack %qD cannot have a default argument\",\n+\t\t      template_parm_p\n+\t\t      ? G_(\"template parameter pack %qD \"\n+\t\t\t   \"cannot have a default argument\")\n+\t\t      : G_(\"parameter pack %qD cannot have \"\n+\t\t\t   \"a default argument\"),\n \t\t      id_declarator->u.id.unqualified_name);\n \t  else\n \t    error_at (declarator_token_start->location,\n-\t\t      template_parm_p \n-\t\t      ? \"template parameter pack cannot have a default argument\"\n-\t\t      : \"parameter pack cannot have a default argument\");\n-\t  \n+\t\t      template_parm_p\n+\t\t      ? G_(\"template parameter pack cannot have \"\n+\t\t\t   \"a default argument\")\n+\t\t      : G_(\"parameter pack cannot have a \"\n+\t\t\t   \"default argument\"));\n+\n \t  default_argument = NULL_TREE;\n \t}\n     }"}, {"sha": "32024135a6dd47d2807230d5f99e3ea6b302aa59", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b6ab3c0591fd583915861cfd1d27183873221e8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b6ab3c0591fd583915861cfd1d27183873221e8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9b6ab3c0591fd583915861cfd1d27183873221e8", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-objc.h\"\n #include \"tree-inline.h\"\n #include \"tree-mudflap.h\"\n+#include \"intl.h\"\n #include \"toplev.h\"\n #include \"flags.h\"\n #include \"output.h\"\n@@ -2985,8 +2986,8 @@ finish_id_expression (tree id_expression,\n \t  else\n \t    {\n \t      error (TREE_CODE (decl) == VAR_DECL\n-\t\t     ? \"use of %<auto%> variable from containing function\"\n-\t\t     : \"use of parameter from containing function\");\n+\t\t     ? G_(\"use of %<auto%> variable from containing function\")\n+\t\t     : G_(\"use of parameter from containing function\"));\n \t      error (\"  %q+#D declared here\", decl);\n \t      return error_mark_node;\n \t    }"}]}