{"sha": "efcc2e303fe5f0daff889c66dff59cfefe3859a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjYzJlMzAzZmU1ZjBkYWZmODg5YzY2ZGZmNTljZmVmZTM4NTlhMQ==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-01-08T10:49:14Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-01-08T10:49:14Z"}, "message": "[ARC] Revamp trampoline implementation\n\nThe new implementation attempts to clean up the existing trampoline\nimplementation for ARC making it to work for linux type of systems.\n\ngcc/\n2018-01-08  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * config/arc/arc.c (TARGET_TRAMPOLINE_ADJUST_ADDRESS): Delete.\n        (emit_store_direct): Likewise.\n        (arc_trampoline_adjust_address): Likewise.\n        (arc_asm_trampoline_template): New function.\n        (arc_initialize_trampoline): Use asm_trampoline_template.\n        (TARGET_ASM_TRAMPOLINE_TEMPLATE): Define.\n        * config/arc/arc.h (TRAMPOLINE_SIZE): Adjust to 16.\n        *config/arc/arc.md (flush_icache): Delete pattern.\n\nFrom-SVN: r256334", "tree": {"sha": "4379d660fd8b17e35ae83b38b95f381f1aa7d177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4379d660fd8b17e35ae83b38b95f381f1aa7d177"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efcc2e303fe5f0daff889c66dff59cfefe3859a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcc2e303fe5f0daff889c66dff59cfefe3859a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcc2e303fe5f0daff889c66dff59cfefe3859a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcc2e303fe5f0daff889c66dff59cfefe3859a1/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85e5629fd5aeefb3e3dac4bcfa51b1206d17354a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85e5629fd5aeefb3e3dac4bcfa51b1206d17354a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85e5629fd5aeefb3e3dac4bcfa51b1206d17354a"}], "stats": {"total": 112, "additions": 54, "deletions": 58}, "files": [{"sha": "b176f6ee0c33d4e1b5d380e76dfd3b7d4ec6471d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc2e303fe5f0daff889c66dff59cfefe3859a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc2e303fe5f0daff889c66dff59cfefe3859a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efcc2e303fe5f0daff889c66dff59cfefe3859a1", "patch": "@@ -1,3 +1,14 @@\n+2018-01-08  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (TARGET_TRAMPOLINE_ADJUST_ADDRESS): Delete.\n+\t(emit_store_direct): Likewise.\n+\t(arc_trampoline_adjust_address): Likewise.\n+\t(arc_asm_trampoline_template): New function.\n+\t(arc_initialize_trampoline): Use asm_trampoline_template.\n+\t(TARGET_ASM_TRAMPOLINE_TEMPLATE): Define.\n+\t* config/arc/arc.h (TRAMPOLINE_SIZE): Adjust to 16.\n+\t* config/arc/arc.md (flush_icache): Delete pattern.\n+\n 2018-01-08  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-c.def (__ARC_UNALIGNED__): New define."}, {"sha": "c7947912bdeb6c8d6ceddc416f22997c7b992315", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 42, "deletions": 48, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc2e303fe5f0daff889c66dff59cfefe3859a1/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc2e303fe5f0daff889c66dff59cfefe3859a1/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=efcc2e303fe5f0daff889c66dff59cfefe3859a1", "patch": "@@ -548,8 +548,6 @@ static void arc_finalize_pic (void);\n \n #define TARGET_TRAMPOLINE_INIT arc_initialize_trampoline\n \n-#define TARGET_TRAMPOLINE_ADJUST_ADDRESS arc_trampoline_adjust_address\n-\n #define TARGET_CAN_ELIMINATE arc_can_eliminate\n \n #define TARGET_FRAME_POINTER_REQUIRED arc_frame_pointer_required\n@@ -3672,69 +3670,62 @@ output_shift (rtx *operands)\n \f\n /* Nested function support.  */\n \n-/* Directly store VALUE into memory object BLOCK at OFFSET.  */\n+/* Output assembler code for a block containing the constant parts of\n+   a trampoline, leaving space for variable parts.  A trampoline looks\n+   like this:\n+\n+   ld_s r12,[pcl,8]\n+   ld   r11,[pcl,12]\n+   j_s [r12]\n+   .word function's address\n+   .word static chain value\n+\n+*/\n \n static void\n-emit_store_direct (rtx block, int offset, int value)\n+arc_asm_trampoline_template (FILE *f)\n {\n-  emit_insn (gen_store_direct (adjust_address (block, SImode, offset),\n-\t\t\t       force_reg (SImode,\n-\t\t\t\t\t  gen_int_mode (value, SImode))));\n+  asm_fprintf (f, \"\\tld_s\\t%s,[pcl,8]\\n\", ARC_TEMP_SCRATCH_REG);\n+  asm_fprintf (f, \"\\tld\\t%s,[pcl,12]\\n\", reg_names[STATIC_CHAIN_REGNUM]);\n+  asm_fprintf (f, \"\\tj_s\\t[%s]\\n\", ARC_TEMP_SCRATCH_REG);\n+  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\n+  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx);\n }\n \n /* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-/* With potentially multiple shared objects loaded, and multiple stacks\n-   present for multiple thereds where trampolines might reside, a simple\n-   range check will likely not suffice for the profiler to tell if a callee\n-   is a trampoline.  We a speedier check by making the trampoline start at\n-   an address that is not 4-byte aligned.\n-   A trampoline looks like this:\n-\n-   nop_s\t     0x78e0\n-entry:\n-   ld_s r12,[pcl,12] 0xd403\n-   ld   r11,[pcl,12] 0x170c 700b\n-   j_s [r12]         0x7c00\n-   nop_s\t     0x78e0\n+   FNADDR is an RTX for the address of the function's pure code.  CXT\n+   is an RTX for the static chain value for the function.\n \n    The fastest trampoline to execute for trampolines within +-8KB of CTX\n    would be:\n+\n    add2 r11,pcl,s12\n    j [limm]           0x20200f80 limm\n-   and that would also be faster to write to the stack by computing the offset\n-   from CTX to TRAMP at compile time.  However, it would really be better to\n-   get rid of the high cost of cache invalidation when generating trampolines,\n-   which requires that the code part of trampolines stays constant, and\n-   additionally either\n-   - making sure that no executable code but trampolines is on the stack,\n-     no icache entries linger for the area of the stack from when before the\n-     stack was allocated, and allocating trampolines in trampoline-only\n-     cache lines\n-  or\n-   - allocate trampolines fram a special pool of pre-allocated trampolines.  */\n+\n+   and that would also be faster to write to the stack by computing\n+   the offset from CTX to TRAMP at compile time.  However, it would\n+   really be better to get rid of the high cost of cache invalidation\n+   when generating trampolines, which requires that the code part of\n+   trampolines stays constant, and additionally either making sure\n+   that no executable code but trampolines is on the stack, no icache\n+   entries linger for the area of the stack from when before the stack\n+   was allocated, and allocating trampolines in trampoline-only cache\n+   lines or allocate trampolines fram a special pool of pre-allocated\n+   trampolines.  */\n \n static void\n arc_initialize_trampoline (rtx tramp, tree fndecl, rtx cxt)\n {\n   rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n \n-  emit_store_direct (tramp, 0, TARGET_BIG_ENDIAN ? 0x78e0d403 : 0xd40378e0);\n-  emit_store_direct (tramp, 4, TARGET_BIG_ENDIAN ? 0x170c700b : 0x700b170c);\n-  emit_store_direct (tramp, 8, TARGET_BIG_ENDIAN ? 0x7c0078e0 : 0x78e07c00);\n-  emit_move_insn (adjust_address (tramp, SImode, 12), fnaddr);\n-  emit_move_insn (adjust_address (tramp, SImode, 16), cxt);\n-  emit_insn (gen_flush_icache (adjust_address (tramp, SImode, 0)));\n-}\n-\n-/* Allow the profiler to easily distinguish trampolines from normal\n-  functions.  */\n-\n-static rtx\n-arc_trampoline_adjust_address (rtx addr)\n-{\n-  return plus_constant (Pmode, addr, 2);\n+  emit_block_move (tramp, assemble_trampoline_template (),\n+\t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n+  emit_move_insn (adjust_address (tramp, SImode, 8), fnaddr);\n+  emit_move_insn (adjust_address (tramp, SImode, 12), cxt);\n+  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"__clear_cache\"),\n+\t\t     LCT_NORMAL, VOIDmode, XEXP (tramp, 0), Pmode,\n+\t\t     plus_constant (Pmode, XEXP (tramp, 0), TRAMPOLINE_SIZE),\n+\t\t     Pmode);\n }\n \n /* This is set briefly to 1 when we output a \".as\" address modifer, and then\n@@ -10870,6 +10861,9 @@ arc_cannot_substitute_mem_equiv_p (rtx)\n #undef TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P\n #define TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P arc_cannot_substitute_mem_equiv_p\n \n+#undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n+#define TARGET_ASM_TRAMPOLINE_TEMPLATE arc_asm_trampoline_template\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-arc.h\""}, {"sha": "02a4b64c70f81544a7f6e4d04e4480d1346d349f", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc2e303fe5f0daff889c66dff59cfefe3859a1/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc2e303fe5f0daff889c66dff59cfefe3859a1/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=efcc2e303fe5f0daff889c66dff59cfefe3859a1", "patch": "@@ -829,7 +829,7 @@ extern int arc_initial_elimination_offset(int from, int to);\n /* Trampolines.  */\n \n /* Length in units of the trampoline for entering a nested function.  */\n-#define TRAMPOLINE_SIZE 20\n+#define TRAMPOLINE_SIZE 16\n \n /* Alignment required for a trampoline in bits .  */\n /* For actual data alignment we just need 32, no more than the stack;"}, {"sha": "10b027a89afc875c55d64694e09e40e3e61b590a", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc2e303fe5f0daff889c66dff59cfefe3859a1/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc2e303fe5f0daff889c66dff59cfefe3859a1/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=efcc2e303fe5f0daff889c66dff59cfefe3859a1", "patch": "@@ -4325,15 +4325,6 @@\n    (set_attr \"iscompact\" \"true\")\n    (set_attr \"length\" \"2\")])\n \n-;; Special pattern to flush the icache.\n-;; ??? Not sure what to do here.  Some ARC's are known to support this.\n-\n-(define_insn \"flush_icache\"\n-  [(unspec_volatile [(match_operand:SI 0 \"memory_operand\" \"m\")] 0)]\n-  \"\"\n-  \"* return \\\"\\\";\"\n-  [(set_attr \"type\" \"misc\")])\n-\n ;; Split up troublesome insns for better scheduling.\n \n ;; Peepholes go at the end."}]}