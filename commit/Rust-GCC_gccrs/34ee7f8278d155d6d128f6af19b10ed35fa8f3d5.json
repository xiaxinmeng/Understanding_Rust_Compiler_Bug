{"sha": "34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlZTdmODI3OGQxNTVkNmQxMjhmNmFmMTliMTBlZDM1ZmE4ZjNkNQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-01-23T02:57:26Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-01-23T02:57:26Z"}, "message": "re PR rtl-optimization/8423 (CSE1 not propagating __builtin_constant_p enough)\n\n\n\tPR optimization/8423\n\t* cse.c (fold_rtx): Only eliminate a CONSTANT_P_RTX to 1 when\n\tits argument is constant, or 0 if !flag_gcse.\n\t* simplify-rtx.c (simplify_rtx): Convert CONSTANT_P_RTX to 1\n\tif it's argument is constant.\n\t* gcse.c (want_to_gcse_p): Ignore CONSTANT_P_RTX nodes.\n\t(hash_scan_set): Don't record CONSTANT_P_RTX expressions.\n\t(do_local_cprop): Don't propagate CONSTANT_P_RTX constants.\n\t* builtins.c (purge_builtin_constant_p): New function to force\n\tinstantiation of any remaining CONSTANT_P_RTX nodes.\n\t* rtl.h (purge_builtin_constant_p): Prototype here.\n\t* toplev.c (rest_of_compilation): Invoke purge_builtin_constant_p\n\tpass after GCSE and before loop.\n\t(flag_gcse): No longer static.\n\t* flags.h (flag_gcse): Prototype here.\n\nFrom-SVN: r61642", "tree": {"sha": "e350e7cda96af13a3c7a7347f5f121cef549541c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e350e7cda96af13a3c7a7347f5f121cef549541c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/comments", "author": null, "committer": null, "parents": [{"sha": "94edc4abdc1de8d0c77421354eabf3bfc3de0c91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94edc4abdc1de8d0c77421354eabf3bfc3de0c91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94edc4abdc1de8d0c77421354eabf3bfc3de0c91"}], "stats": {"total": 93, "additions": 80, "deletions": 13}, "files": [{"sha": "e5830c9e61e721588466aec26e2ccbc5385bd571", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "patch": "@@ -1,3 +1,21 @@\n+2003-01-22  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/8423\n+\t* cse.c (fold_rtx): Only eliminate a CONSTANT_P_RTX to 1 when\n+\tits argument is constant, or 0 if !flag_gcse.\n+\t* simplify-rtx.c (simplify_rtx): Convert CONSTANT_P_RTX to 1\n+\tif it's argument is constant.\n+\t* gcse.c (want_to_gcse_p): Ignore CONSTANT_P_RTX nodes.\n+\t(hash_scan_set): Don't record CONSTANT_P_RTX expressions.\n+\t(do_local_cprop): Don't propagate CONSTANT_P_RTX constants.\n+\t* builtins.c (purge_builtin_constant_p): New function to force\n+\tinstantiation of any remaining CONSTANT_P_RTX nodes.\n+\t* rtl.h (purge_builtin_constant_p): Prototype here.\n+\t* toplev.c (rest_of_compilation): Invoke purge_builtin_constant_p\n+\tpass after GCSE and before loop.\n+\t(flag_gcse): No longer static.\n+\t* flags.h (flag_gcse): Prototype here.\n+\n 2003-01-22  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.h (HARD_REGNO_MODE_OK): Fix warning regression"}, {"sha": "5e72df6b9fec0f13e205ee020405cda5aacda874", "filename": "gcc/builtins.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "patch": "@@ -1461,8 +1461,8 @@ expand_builtin_constant_p (exp)\n   arglist = TREE_VALUE (arglist);\n \n   /* We have taken care of the easy cases during constant folding.  This\n-     case is not obvious, so emit (constant_p_rtx (ARGLIST)) and let CSE get a\n-     chance to see if it can deduce whether ARGLIST is constant.  */\n+     case is not obvious, so emit (constant_p_rtx (ARGLIST)) and let CSE\n+     get a chance to see if it can deduce whether ARGLIST is constant.  */\n \n   tmp = expand_expr (arglist, NULL_RTX, VOIDmode, 0);\n   tmp = gen_rtx_CONSTANT_P_RTX (value_mode, tmp);\n@@ -4496,3 +4496,32 @@ default_expand_builtin (exp, target, subtarget, mode, ignore)\n {\n   return NULL_RTX;\n }\n+\n+/* Instantiate all remaining CONSTANT_P_RTX nodes.  */\n+\n+void\n+purge_builtin_constant_p ()\n+{\n+  rtx insn, done, set;\n+  rtx arg, new, note;\n+  basic_block bb;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      done = NEXT_INSN (bb->end);\n+      for (insn = bb->head; insn != done; insn = NEXT_INSN (insn))\n+\tif (INSN_P (insn)\n+\t    && (set = single_set (insn)) != NULL_RTX\n+\t    && GET_CODE (SET_SRC (set)) == CONSTANT_P_RTX)\n+\t  {\n+\t    arg = XEXP (SET_SRC (set), 0);\n+\t    new = CONSTANT_P (arg) ? const1_rtx : const0_rtx;\n+\t    validate_change (insn, &SET_SRC (set), new, 0);\n+\n+\t    /* Remove the REG_EQUAL note from the insn.  */\n+\t    if ((note = find_reg_note (insn, REG_EQUAL, NULL_RTX)) != 0)\n+\t      remove_note (insn, note);\n+\t  }\n+    }\n+}\n+"}, {"sha": "8f9ac33cc25c6f1c965cb782bac305c36572e1e8", "filename": "gcc/cse.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "patch": "@@ -1,6 +1,6 @@\n /* Common subexpression elimination for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -4332,9 +4332,14 @@ fold_rtx (x, insn)\n       break;\n \n     case 'x':\n-      /* Always eliminate CONSTANT_P_RTX at this stage.  */\n+      /* Eliminate CONSTANT_P_RTX if its constant.  */\n       if (code == CONSTANT_P_RTX)\n-\treturn (const_arg0 ? const1_rtx : const0_rtx);\n+\t{\n+\t  if (const_arg0)\n+\t    return const1_rtx;\n+\t  if (!flag_gcse)\n+\t    return const0_rtx;\n+\t}\n       break;\n     }\n "}, {"sha": "7ba3f7550a7ddff9914c8acc38e2df800818f3a6", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "patch": "@@ -633,6 +633,10 @@ extern enum graph_dump_types graph_dump_format;\n \n extern int flag_no_ident;\n \n+/* Nonzero means perform global CSE.  */\n+\n+extern int flag_gcse;\n+\n /* Nonzero if we want to perform enhanced load motion during gcse.  */\n \n extern int flag_gcse_lm;"}, {"sha": "21719948f5b3cf23fcd9bfea2bb390b7f21a5359", "filename": "gcc/gcse.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "patch": "@@ -1305,6 +1305,7 @@ want_to_gcse_p (x)\n     case CONST_DOUBLE:\n     case CONST_VECTOR:\n     case CALL:\n+    case CONSTANT_P_RTX:\n       return 0;\n \n     default:\n@@ -2216,7 +2217,8 @@ hash_scan_set (pat, insn, table)\n \t\t    && REGNO (src) >= FIRST_PSEUDO_REGISTER\n \t\t    && can_copy_p [GET_MODE (dest)]\n \t\t    && REGNO (src) != regno)\n-\t\t   || CONSTANT_P (src))\n+\t\t   || (CONSTANT_P (src)\n+\t\t       && GET_CODE (src) != CONSTANT_P_RTX))\n \t       /* A copy is not available if its src or dest is subsequently\n \t\t  modified.  Here we want to search from INSN+1 on, but\n \t\t  oprs_available_p searches from INSN on.  */\n@@ -4277,7 +4279,8 @@ do_local_cprop (x, insn, alter_jumps, libcall_sp)\n \t  if (l->in_libcall)\n \t    continue;\n \n-\t  if (CONSTANT_P (this_rtx))\n+\t  if (CONSTANT_P (this_rtx)\n+\t      && GET_CODE (this_rtx) != CONSTANT_P_RTX)\n \t    newcnst = this_rtx;\n \t  if (REG_P (this_rtx) && REGNO (this_rtx) >= FIRST_PSEUDO_REGISTER\n \t      /* Don't copy propagate if it has attached REG_EQUIV note."}, {"sha": "ec448305d162369578a2690101f66ff2b30b838d", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "patch": "@@ -1346,6 +1346,7 @@ extern int ceil_log2\t\t\tPARAMS ((unsigned HOST_WIDE_INT));\n \n /* In builtins.c */\n extern rtx expand_builtin_expect_jump\tPARAMS ((tree, rtx, rtx));\n+extern void purge_builtin_constant_p\tPARAMS ((void));\n \n /* In explow.c */\n extern void set_stack_check_libfunc PARAMS ((rtx));"}, {"sha": "b0ddb65b24ee2cb89868c8846fdc488eead0ea2a", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "patch": "@@ -1,6 +1,6 @@\n /* RTL simplification functions for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -2729,11 +2729,15 @@ simplify_rtx (x)\n \t\t\t\t\t     : GET_MODE (XEXP (x, 1))),\n \t\t\t\t\t    XEXP (x, 0), XEXP (x, 1));\n     case 'x':\n-      /* The only case we try to handle is a SUBREG.  */\n       if (code == SUBREG)\n \treturn simplify_gen_subreg (mode, SUBREG_REG (x),\n \t\t\t\t    GET_MODE (SUBREG_REG (x)),\n \t\t\t\t    SUBREG_BYTE (x));\n+      if (code == CONSTANT_P_RTX)\n+\t{\n+\t  if (CONSTANT_P (XEXP (x,0)))\n+\t    return const1_rtx;\n+\t}\n       return NULL;\n     default:\n       return NULL;"}, {"sha": "b24da96cba3914838e9ef90e8247d02070bc3ed5", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "patch": "@@ -621,10 +621,6 @@ int flag_volatile_static;\n \n int flag_syntax_only = 0;\n \n-/* Nonzero means perform global cse.  */\n-\n-static int flag_gcse;\n-\n /* Nonzero means perform loop optimizer.  */\n \n static int flag_loop_optimize;\n@@ -646,6 +642,10 @@ static int flag_if_conversion2;\n \n static int flag_delete_null_pointer_checks;\n \n+/* Nonzero means perform global CSE.  */\n+\n+int flag_gcse = 0;\n+\n /* Nonzero means to do the enhanced load motion during gcse, which trys\n    to hoist loads by not killing them when a store to the same location\n    is seen.  */\n@@ -2921,6 +2921,9 @@ rest_of_compilation (decl)\n #endif\n     }\n \n+  /* Instantiate any remaining CONSTANT_P_RTX nodes.  */\n+  purge_builtin_constant_p ();\n+\n   /* Move constant computations out of loops.  */\n \n   if (optimize > 0 && flag_loop_optimize)"}]}