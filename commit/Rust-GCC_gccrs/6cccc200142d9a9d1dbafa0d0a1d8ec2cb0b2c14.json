{"sha": "6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNjY2MyMDAxNDJkOWE5ZDFkYmFmYTBkMGExZDhlYzJjYjBiMmMxNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-08-09T15:58:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-08-09T15:58:52Z"}, "message": "Revert fix for libstdc++/35637, thanks to other/36901.\n\n2008-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tRevert fix for libstdc++/35637, thanks to other/36901.\n\t* include/tr1_impl/type_traits (__is_function_helper): New, uses\n\tvariadic templates.\n\t(is_function): Forward to the latter.\n\t(__in_array): Remove.\n\nFrom-SVN: r138906", "tree": {"sha": "9786f974233296449789bfe817dbfed5aae84375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9786f974233296449789bfe817dbfed5aae84375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14/comments", "author": null, "committer": null, "parents": [{"sha": "a031f958a6d74818ab537221200abe6ab3f5cf7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a031f958a6d74818ab537221200abe6ab3f5cf7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a031f958a6d74818ab537221200abe6ab3f5cf7c"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "c96ab5ad519632550dafe914b00dc4ac348afd8b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14", "patch": "@@ -1,3 +1,11 @@\n+2008-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tRevert fix for libstdc++/35637, thanks to other/36901.\n+\t* include/tr1_impl/type_traits (__is_function_helper): New, uses\n+\tvariadic templates.\n+\t(is_function): Forward to the latter.\n+\t(__in_array): Remove.\n+\n 2008-08-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* config/locale/darwin/ctype_members.cc: Include <cstdio>."}, {"sha": "3a3d66f1b6529d9d4fea560373d53caa32fc8f0c", "filename": "libstdc++-v3/include/tr1_impl/type_traits", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits?ref=6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14", "patch": "@@ -183,30 +183,25 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n     { };\n \n   template<typename _Tp>\n-    struct __in_array\n-    : public __sfinae_types\n-    {\n-    private:\n-      template<typename _Up>\n-        static __one __test(_Up(*)[1]);\n-      template<typename>\n-        static __two __test(...);\n-    \n-    public:\n-      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n-    };\n+    struct remove_cv;\n \n-  /// is_abstract\n-  template<typename _Tp>\n-    struct is_abstract;\n+  template<typename>\n+    struct __is_function_helper\n+    : public false_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct __is_function_helper<_Res(_ArgTypes...)>\n+    : public true_type { };\n+\n+  template<typename _Res, typename... _ArgTypes>\n+    struct __is_function_helper<_Res(_ArgTypes......)>\n+    : public true_type { };\n \n   /// is_function\n   template<typename _Tp>\n     struct is_function\n-    : public integral_constant<bool, !(__in_array<_Tp>::__value\n-\t\t\t\t       || is_abstract<_Tp>::value\n-\t\t\t\t       || is_reference<_Tp>::value\n-\t\t\t\t       || is_void<_Tp>::value)>\n+    : public integral_constant<bool, (__is_function_helper<typename\n+\t\t\t\t      remove_cv<_Tp>::type>::value)>\n     { };\n \n   /// composite type traits [4.5.2]."}]}