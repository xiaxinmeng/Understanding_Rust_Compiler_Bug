{"sha": "f373041ce59c7a1d13b733a167339815717e19f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM3MzA0MWNlNTljN2ExZDEzYjczM2ExNjczMzk4MTU3MTdlMTlmNQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-10-20T18:53:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-10-20T18:53:37Z"}, "message": "tree-ssa-alias.c (nonoverlapping_refs_since_match_p): Do not skip non-zero array accesses.\n\n\n\t* tree-ssa-alias.c (nonoverlapping_refs_since_match_p): Do not\n\tskip non-zero array accesses.\n\n\t* gcc.c-torture/execute/alias-access-path-2.c: New testcase.\n\t* gcc.dg/tree-ssa/alias-access-path-11.c: xfail.\n\nFrom-SVN: r277214", "tree": {"sha": "d3a20e37543b746b78ce38a8cb0aa0d976a698d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3a20e37543b746b78ce38a8cb0aa0d976a698d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f373041ce59c7a1d13b733a167339815717e19f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f373041ce59c7a1d13b733a167339815717e19f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f373041ce59c7a1d13b733a167339815717e19f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f373041ce59c7a1d13b733a167339815717e19f5/comments", "author": null, "committer": null, "parents": [{"sha": "1d778697b37aec23db5b6003dfe08d2d78bd9424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d778697b37aec23db5b6003dfe08d2d78bd9424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d778697b37aec23db5b6003dfe08d2d78bd9424"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "fec3514269a9659c52ffc5e10e40f9ae58193fc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f373041ce59c7a1d13b733a167339815717e19f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f373041ce59c7a1d13b733a167339815717e19f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f373041ce59c7a1d13b733a167339815717e19f5", "patch": "@@ -1,3 +1,8 @@\n+2019-10-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-alias.c (nonoverlapping_refs_since_match_p): Do not\n+\tskip non-zero array accesses.\n+\n 2019-10-20  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-slp.c (vect_slp_analyze_bb_1): Take a bb_vec_info"}, {"sha": "681cee69de494e704f353685ab8bd0e496fccf7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f373041ce59c7a1d13b733a167339815717e19f5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f373041ce59c7a1d13b733a167339815717e19f5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f373041ce59c7a1d13b733a167339815717e19f5", "patch": "@@ -1,3 +1,8 @@\n+2019-10-20  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.c-torture/execute/alias-access-path-2.c: New testcase.\n+\t* gcc.dg/tree-ssa/alias-access-path-11.c: xfail.\n+\n 2019-10-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/cpp2a/nodiscard-reason-only-one.C: In dg-error or dg-warning"}, {"sha": "6dab37c1b9c64fb1ae9c16fa4c9c6de07438e8af", "filename": "gcc/testsuite/gcc.c-torture/execute/alias-access-path-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f373041ce59c7a1d13b733a167339815717e19f5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-access-path-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f373041ce59c7a1d13b733a167339815717e19f5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-access-path-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-access-path-2.c?ref=f373041ce59c7a1d13b733a167339815717e19f5", "patch": "@@ -0,0 +1,11 @@\n+int\n+main (int argc, char **argv)\n+{\n+  int c;\n+  unsigned char out[][1] = { {71}, {71}, {71} };\n+\n+  for (int i = 0; i < 3; i++)\n+    if (!out[i][0])\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "45d1b74e6422bade3edf38e406e7a42d22e06ae7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-access-path-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f373041ce59c7a1d13b733a167339815717e19f5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f373041ce59c7a1d13b733a167339815717e19f5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-access-path-11.c?ref=f373041ce59c7a1d13b733a167339815717e19f5", "patch": "@@ -12,4 +12,4 @@ test(int i,int j)\n   (*innerptr)[3][j]=11;\n   return (*barptr)[i][2][j];\n }\n-/* { dg-final { scan-tree-dump-times \"return 10\" 1 \"fre3\"} } */\n+/* { dg-final { scan-tree-dump-times \"return 10\" 1 \"fre3\" { xfail *-*-* } } } */"}, {"sha": "4cfe3e2b4378193ac569276e676322e1cc77f03e", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f373041ce59c7a1d13b733a167339815717e19f5/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f373041ce59c7a1d13b733a167339815717e19f5/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=f373041ce59c7a1d13b733a167339815717e19f5", "patch": "@@ -1444,20 +1444,36 @@ nonoverlapping_refs_since_match_p (tree match1, tree ref1,\n \t  for (; narray_refs1 > narray_refs2; narray_refs1--)\n \t    {\n \t      ref1 = component_refs1.pop ();\n-\t      /* Track whether we possibly introduced partial overlap assuming\n-\t\t that innermost type sizes does not match.  This only can\n-\t\t happen if the offset introduced by the ARRAY_REF\n-\t\t is non-zero.  */\n+\n+\t      /* If index is non-zero we need to check whether the reference\n+\t\t does not break the main invariant that bases are either\n+\t\t disjoint or equal.  Consider the example:\n+\n+\t\t unsigned char out[][1];\n+\t\t out[1]=\"a\";\n+\t\t out[i][0];\n+\n+\t\t Here bases out and out are same, but after removing the\n+\t\t [i] index, this invariant no longer holds, because\n+\t\t out[i] points to the middle of array out.\n+\n+\t\t TODO: If size of type of the skipped reference is an integer\n+\t\t multiply of the size of type of the other reference this\n+\t\t invariant can be verified, but even then it is not completely\n+\t\t safe with !flag_strict_aliasing if the other reference contains\n+\t\t unbounded array accesses.\n+\t\t See   */\n+\n \t      if (!operand_equal_p (TREE_OPERAND (ref1, 1),\n \t\t\t\t    cheap_array_ref_low_bound (ref1), 0))\n-\t        seen_unmatched_ref_p = true;\n+\t\treturn 0;\n \t    }\n \t  for (; narray_refs2 > narray_refs1; narray_refs2--)\n \t    {\n \t      ref2 = component_refs2.pop ();\n \t      if (!operand_equal_p (TREE_OPERAND (ref2, 1),\n \t\t\t\t    cheap_array_ref_low_bound (ref2), 0))\n-\t        seen_unmatched_ref_p = true;\n+\t\treturn 0;\n \t    }\n \t  /* Try to disambiguate matched arrays.  */\n \t  for (unsigned int i = 0; i < narray_refs1; i++)"}]}