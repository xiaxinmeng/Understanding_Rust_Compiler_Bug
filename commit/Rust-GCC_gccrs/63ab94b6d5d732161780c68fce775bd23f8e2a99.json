{"sha": "63ab94b6d5d732161780c68fce775bd23f8e2a99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNhYjk0YjZkNWQ3MzIxNjE3ODBjNjhmY2U3NzViZDIzZjhlMmE5OQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2015-08-11T22:39:37Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-08-11T22:39:37Z"}, "message": "replace several uses of the anon namespace with GCC_FINAL\n\ngcc/ChangeLog:\n\n2015-08-11  Trevor Saunders  <tbsaunde@tbsaunde.org>\n\n\t* compare-elim.c, dce.c, dse.c, gimple-ssa-isolate-paths.c,\n\tgimple-ssa-strength-reduction.c, graphite.c, init-regs.c,\n\tipa-pure-const.c, ipa-visibility.c, ipa.c, mode-switching.c,\n\tomp-low.c, reorg.c, sanopt.c, trans-mem.c, tree-eh.c,\n\ttree-if-conv.c, tree-ssa-copyrename.c, tree-ssa-dce.c,\n\ttree-ssa-dom.c, tree-ssa-dse.c, tree-ssa-forwprop.c,\n\ttree-ssa-sink.c, tree-ssanames.c, tree-stdarg.c, tree-tailcall.c,\n\ttree-vect-generic.c, tree.c, ubsan.c, var-tracking.c,\n\tvtable-verify.c, web.c: Use GCC_FINAL instead of the anonymous\nnamespace.\n\nFrom-SVN: r226793", "tree": {"sha": "ce150cc07d1bbf63f91af92c51be9976c9032f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce150cc07d1bbf63f91af92c51be9976c9032f53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63ab94b6d5d732161780c68fce775bd23f8e2a99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ab94b6d5d732161780c68fce775bd23f8e2a99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63ab94b6d5d732161780c68fce775bd23f8e2a99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ab94b6d5d732161780c68fce775bd23f8e2a99/comments", "author": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "96d4df8b2e1870c2e21495f4354730ead07dbdbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d4df8b2e1870c2e21495f4354730ead07dbdbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d4df8b2e1870c2e21495f4354730ead07dbdbf"}], "stats": {"total": 488, "additions": 131, "deletions": 357}, "files": [{"sha": "063513ba0e9c084c8338b01b1d8a0c36349dd101", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -1,3 +1,15 @@\n+2015-08-11  Trevor Saunders  <tbsaunde@tbsaunde.org>\n+\n+\t* compare-elim.c, dce.c, dse.c, gimple-ssa-isolate-paths.c,\n+\tgimple-ssa-strength-reduction.c, graphite.c, init-regs.c,\n+\tipa-pure-const.c, ipa-visibility.c, ipa.c, mode-switching.c,\n+\tomp-low.c, reorg.c, sanopt.c, trans-mem.c, tree-eh.c,\n+\ttree-if-conv.c, tree-ssa-copyrename.c, tree-ssa-dce.c,\n+\ttree-ssa-dom.c, tree-ssa-dse.c, tree-ssa-forwprop.c,\n+\ttree-ssa-sink.c, tree-ssanames.c, tree-stdarg.c, tree-tailcall.c,\n+\ttree-vect-generic.c, tree.c, ubsan.c, var-tracking.c,\n+\tvtable-verify.c, web.c: Use GCC_FINAL instead of the anonymous\n+\n 2015-08-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/66954"}, {"sha": "ea94c4e2036323722d027300fa5bbe1bd0d10b60", "filename": "gcc/compare-elim.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fcompare-elim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fcompare-elim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcompare-elim.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -668,9 +668,7 @@ execute_compare_elim_after_reload (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_compare_elim_after_reload =\n+static const pass_data pass_data_compare_elim_after_reload =\n {\n   RTL_PASS, /* type */\n   \"cmpelim\", /* name */\n@@ -683,7 +681,7 @@ const pass_data pass_data_compare_elim_after_reload =\n   ( TODO_df_finish | TODO_df_verify ), /* todo_flags_finish */\n };\n \n-class pass_compare_elim_after_reload : public rtl_opt_pass\n+class pass_compare_elim_after_reload GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_compare_elim_after_reload (gcc::context *ctxt)\n@@ -706,8 +704,6 @@ class pass_compare_elim_after_reload : public rtl_opt_pass\n \n }; // class pass_compare_elim_after_reload\n \n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_compare_elim_after_reload (gcc::context *ctxt)\n {"}, {"sha": "1b23eb79ade9c0c20b42168f98d470b742c1bc9e", "filename": "gcc/dce.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -784,9 +784,7 @@ rest_of_handle_ud_dce (void)\n }\n \n \n-namespace {\n-\n-const pass_data pass_data_ud_rtl_dce =\n+static const pass_data pass_data_ud_rtl_dce =\n {\n   RTL_PASS, /* type */\n   \"ud_dce\", /* name */\n@@ -799,7 +797,7 @@ const pass_data pass_data_ud_rtl_dce =\n   TODO_df_finish, /* todo_flags_finish */\n };\n \n-class pass_ud_rtl_dce : public rtl_opt_pass\n+class pass_ud_rtl_dce GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_ud_rtl_dce (gcc::context *ctxt)\n@@ -819,8 +817,6 @@ class pass_ud_rtl_dce : public rtl_opt_pass\n \n }; // class pass_ud_rtl_dce\n \n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_ud_rtl_dce (gcc::context *ctxt)\n {\n@@ -1215,9 +1211,7 @@ run_fast_dce (void)\n }\n \n \n-namespace {\n-\n-const pass_data pass_data_fast_rtl_dce =\n+static const pass_data pass_data_fast_rtl_dce =\n {\n   RTL_PASS, /* type */\n   \"rtl_dce\", /* name */\n@@ -1230,7 +1224,7 @@ const pass_data pass_data_fast_rtl_dce =\n   TODO_df_finish, /* todo_flags_finish */\n };\n \n-class pass_fast_rtl_dce : public rtl_opt_pass\n+class pass_fast_rtl_dce GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_fast_rtl_dce (gcc::context *ctxt)\n@@ -1250,8 +1244,6 @@ class pass_fast_rtl_dce : public rtl_opt_pass\n \n }; // class pass_fast_rtl_dce\n \n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_fast_rtl_dce (gcc::context *ctxt)\n {"}, {"sha": "6a0cc07b61e3c71c05395e7cea4731f4567c4622", "filename": "gcc/dse.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -3725,9 +3725,7 @@ rest_of_handle_dse (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_rtl_dse1 =\n+static const pass_data pass_data_rtl_dse1 =\n {\n   RTL_PASS, /* type */\n   \"dse1\", /* name */\n@@ -3740,7 +3738,7 @@ const pass_data pass_data_rtl_dse1 =\n   TODO_df_finish, /* todo_flags_finish */\n };\n \n-class pass_rtl_dse1 : public rtl_opt_pass\n+class pass_rtl_dse1 GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_rtl_dse1 (gcc::context *ctxt)\n@@ -3757,17 +3755,13 @@ class pass_rtl_dse1 : public rtl_opt_pass\n \n }; // class pass_rtl_dse1\n \n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_rtl_dse1 (gcc::context *ctxt)\n {\n   return new pass_rtl_dse1 (ctxt);\n }\n \n-namespace {\n-\n-const pass_data pass_data_rtl_dse2 =\n+static const pass_data pass_data_rtl_dse2 =\n {\n   RTL_PASS, /* type */\n   \"dse2\", /* name */\n@@ -3780,7 +3774,7 @@ const pass_data pass_data_rtl_dse2 =\n   TODO_df_finish, /* todo_flags_finish */\n };\n \n-class pass_rtl_dse2 : public rtl_opt_pass\n+class pass_rtl_dse2 GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_rtl_dse2 (gcc::context *ctxt)\n@@ -3797,8 +3791,6 @@ class pass_rtl_dse2 : public rtl_opt_pass\n \n }; // class pass_rtl_dse2\n \n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_rtl_dse2 (gcc::context *ctxt)\n {"}, {"sha": "d68eaff5f7dcc24d0a30b7d3d2c6cb7a3e77e457", "filename": "gcc/gimple-ssa-isolate-paths.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fgimple-ssa-isolate-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fgimple-ssa-isolate-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -540,8 +540,7 @@ gimple_ssa_isolate_erroneous_paths (void)\n   return 0;\n }\n \n-namespace {\n-const pass_data pass_data_isolate_erroneous_paths =\n+static const pass_data pass_data_isolate_erroneous_paths =\n {\n   GIMPLE_PASS, /* type */\n   \"isolate-paths\", /* name */\n@@ -554,7 +553,7 @@ const pass_data pass_data_isolate_erroneous_paths =\n   0, /* todo_flags_finish */\n };\n \n-class pass_isolate_erroneous_paths : public gimple_opt_pass\n+class pass_isolate_erroneous_paths GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_isolate_erroneous_paths (gcc::context *ctxt)\n@@ -578,7 +577,6 @@ class pass_isolate_erroneous_paths : public gimple_opt_pass\n     }\n \n }; // class pass_isolate_erroneous_paths\n-}\n \n gimple_opt_pass *\n make_pass_isolate_erroneous_paths (gcc::context *ctxt)"}, {"sha": "f192f545164cb2246c8b258e8f35e4105c015fb2", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -3584,9 +3584,7 @@ analyze_candidates_and_replace (void)\n     }\n }\n \n-namespace {\n-\n-const pass_data pass_data_strength_reduction =\n+static const pass_data pass_data_strength_reduction =\n {\n   GIMPLE_PASS, /* type */\n   \"slsr\", /* name */\n@@ -3599,7 +3597,7 @@ const pass_data pass_data_strength_reduction =\n   0, /* todo_flags_finish */\n };\n \n-class pass_strength_reduction : public gimple_opt_pass\n+class pass_strength_reduction GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_strength_reduction (gcc::context *ctxt)\n@@ -3665,8 +3663,6 @@ pass_strength_reduction::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_strength_reduction (gcc::context *ctxt)\n {"}, {"sha": "ca1b9b64b771f37e9c84364fe295673475f68529", "filename": "gcc/graphite.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -338,9 +338,7 @@ gate_graphite_transforms (void)\n   return flag_graphite != 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_graphite =\n+static const pass_data pass_data_graphite =\n {\n   GIMPLE_PASS, /* type */\n   \"graphite0\", /* name */\n@@ -353,7 +351,7 @@ const pass_data pass_data_graphite =\n   0, /* todo_flags_finish */\n };\n \n-class pass_graphite : public gimple_opt_pass\n+class pass_graphite GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_graphite (gcc::context *ctxt)\n@@ -365,17 +363,13 @@ class pass_graphite : public gimple_opt_pass\n \n }; // class pass_graphite\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_graphite (gcc::context *ctxt)\n {\n   return new pass_graphite (ctxt);\n }\n \n-namespace {\n-\n-const pass_data pass_data_graphite_transforms =\n+static const pass_data pass_data_graphite_transforms =\n {\n   GIMPLE_PASS, /* type */\n   \"graphite\", /* name */\n@@ -388,7 +382,7 @@ const pass_data pass_data_graphite_transforms =\n   0, /* todo_flags_finish */\n };\n \n-class pass_graphite_transforms : public gimple_opt_pass\n+class pass_graphite_transforms GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_graphite_transforms (gcc::context *ctxt)\n@@ -401,8 +395,6 @@ class pass_graphite_transforms : public gimple_opt_pass\n \n }; // class pass_graphite_transforms\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_graphite_transforms (gcc::context *ctxt)\n {"}, {"sha": "42f1b28603d47e1b4c4ad93b77ea032800850d01", "filename": "gcc/init-regs.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Finit-regs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Finit-regs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finit-regs.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -137,9 +137,7 @@ initialize_uninitialized_regs (void)\n   BITMAP_FREE (already_genned);\n }\n \n-namespace {\n-\n-const pass_data pass_data_initialize_regs =\n+static const pass_data pass_data_initialize_regs =\n {\n   RTL_PASS, /* type */\n   \"init-regs\", /* name */\n@@ -152,7 +150,7 @@ const pass_data pass_data_initialize_regs =\n   TODO_df_finish, /* todo_flags_finish */\n };\n \n-class pass_initialize_regs : public rtl_opt_pass\n+class pass_initialize_regs GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_initialize_regs (gcc::context *ctxt)\n@@ -169,8 +167,6 @@ class pass_initialize_regs : public rtl_opt_pass\n \n }; // class pass_initialize_regs\n \n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_initialize_regs (gcc::context *ctxt)\n {"}, {"sha": "f9d5ef949325c767fa423bfa1856840af49edcda", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -120,9 +120,7 @@ static vec<funct_state> funct_state_vec;\n \n static bool gate_pure_const (void);\n \n-namespace {\n-\n-const pass_data pass_data_ipa_pure_const =\n+static const pass_data pass_data_ipa_pure_const =\n {\n   IPA_PASS, /* type */\n   \"pure-const\", /* name */\n@@ -135,7 +133,7 @@ const pass_data pass_data_ipa_pure_const =\n   0, /* todo_flags_finish */\n };\n \n-class pass_ipa_pure_const : public ipa_opt_pass_d\n+class pass_ipa_pure_const GCC_FINAL : public ipa_opt_pass_d\n {\n public:\n   pass_ipa_pure_const(gcc::context *ctxt);\n@@ -156,8 +154,6 @@ class pass_ipa_pure_const : public ipa_opt_pass_d\n \n }; // class pass_ipa_pure_const\n \n-} // anon namespace\n-\n /* Try to guess if function body will always be visible to compiler\n    when compiling the call and whether compiler will be able\n    to propagate the information by itself.  */\n@@ -1669,9 +1665,7 @@ skip_function_for_local_pure_const (struct cgraph_node *node)\n    ipa_pure_const.   This pass is effective when executed together with\n    other optimization passes in early optimization pass queue.  */\n \n-namespace {\n-\n-const pass_data pass_data_local_pure_const =\n+static const pass_data pass_data_local_pure_const =\n {\n   GIMPLE_PASS, /* type */\n   \"local-pure-const\", /* name */\n@@ -1684,7 +1678,7 @@ const pass_data pass_data_local_pure_const =\n   0, /* todo_flags_finish */\n };\n \n-class pass_local_pure_const : public gimple_opt_pass\n+class pass_local_pure_const GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_local_pure_const (gcc::context *ctxt)\n@@ -1808,8 +1802,6 @@ pass_local_pure_const::execute (function *fun)\n     return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_local_pure_const (gcc::context *ctxt)\n {\n@@ -1818,9 +1810,7 @@ make_pass_local_pure_const (gcc::context *ctxt)\n \n /* Emit noreturn warnings.  */\n \n-namespace {\n-\n-const pass_data pass_data_warn_function_noreturn =\n+static const pass_data pass_data_warn_function_noreturn =\n {\n   GIMPLE_PASS, /* type */\n   \"*warn_function_noreturn\", /* name */\n@@ -1833,7 +1823,7 @@ const pass_data pass_data_warn_function_noreturn =\n   0, /* todo_flags_finish */\n };\n \n-class pass_warn_function_noreturn : public gimple_opt_pass\n+class pass_warn_function_noreturn GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_warn_function_noreturn (gcc::context *ctxt)\n@@ -1852,8 +1842,6 @@ class pass_warn_function_noreturn : public gimple_opt_pass\n \n }; // class pass_warn_function_noreturn\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_warn_function_noreturn (gcc::context *ctxt)\n {\n@@ -1864,9 +1852,7 @@ make_pass_warn_function_noreturn (gcc::context *ctxt)\n    ipa_pure_const.   This pass is effective when executed together with\n    other optimization passes in early optimization pass queue.  */\n \n-namespace {\n-\n-const pass_data pass_data_nothrow =\n+static const pass_data pass_data_nothrow =\n {\n   GIMPLE_PASS, /* type */\n   \"nothrow\", /* name */\n@@ -1879,7 +1865,7 @@ const pass_data pass_data_nothrow =\n   0, /* todo_flags_finish */\n };\n \n-class pass_nothrow : public gimple_opt_pass\n+class pass_nothrow GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_nothrow (gcc::context *ctxt)\n@@ -1945,8 +1931,6 @@ pass_nothrow::execute (function *)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_nothrow (gcc::context *ctxt)\n {"}, {"sha": "00a157ab5673644debded298eb206f10d72712db", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -728,9 +728,7 @@ function_and_variable_visibility (bool whole_program)\n /* Local function pass handling visibilities.  This happens before LTO streaming\n    so in particular -fwhole-program should be ignored at this level.  */\n \n-namespace {\n-\n-const pass_data pass_data_ipa_function_and_variable_visibility =\n+static const pass_data pass_data_ipa_function_and_variable_visibility =\n {\n   SIMPLE_IPA_PASS, /* type */\n   \"visibility\", /* name */\n@@ -754,11 +752,7 @@ whole_program_function_and_variable_visibility (void)\n   return 0;\n }\n \n-} // anon namespace\n-\n-namespace {\n-\n-const pass_data pass_data_ipa_whole_program_visibility =\n+static const pass_data pass_data_ipa_whole_program_visibility =\n {\n   IPA_PASS, /* type */\n   \"whole-program\", /* name */\n@@ -771,7 +765,7 @@ const pass_data pass_data_ipa_whole_program_visibility =\n   ( TODO_remove_functions | TODO_dump_symtab ), /* todo_flags_finish */\n };\n \n-class pass_ipa_whole_program_visibility : public ipa_opt_pass_d\n+class pass_ipa_whole_program_visibility GCC_FINAL : public ipa_opt_pass_d\n {\n public:\n   pass_ipa_whole_program_visibility (gcc::context *ctxt)\n@@ -801,8 +795,6 @@ class pass_ipa_whole_program_visibility : public ipa_opt_pass_d\n \n }; // class pass_ipa_whole_program_visibility\n \n-} // anon namespace\n-\n ipa_opt_pass_d *\n make_pass_ipa_whole_program_visibility (gcc::context *ctxt)\n {"}, {"sha": "0fa93c36419a5cc97502dfff40ecc877bf44c219", "filename": "gcc/ipa.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -832,9 +832,7 @@ ipa_discover_readonly_nonaddressable_vars (void)\n \n /* Free inline summary.  */\n \n-namespace {\n-\n-const pass_data pass_data_ipa_free_inline_summary =\n+static const pass_data pass_data_ipa_free_inline_summary =\n {\n   SIMPLE_IPA_PASS, /* type */\n   \"free-inline-summary\", /* name */\n@@ -850,7 +848,7 @@ const pass_data pass_data_ipa_free_inline_summary =\n   ( TODO_remove_functions | TODO_dump_symtab ), /* todo_flags_finish */\n };\n \n-class pass_ipa_free_inline_summary : public simple_ipa_opt_pass\n+class pass_ipa_free_inline_summary GCC_FINAL : public simple_ipa_opt_pass\n {\n public:\n   pass_ipa_free_inline_summary (gcc::context *ctxt)\n@@ -866,8 +864,6 @@ class pass_ipa_free_inline_summary : public simple_ipa_opt_pass\n \n }; // class pass_ipa_free_inline_summary\n \n-} // anon namespace\n-\n simple_ipa_opt_pass *\n make_pass_ipa_free_inline_summary (gcc::context *ctxt)\n {\n@@ -1164,9 +1160,7 @@ ipa_cdtor_merge (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_ipa_cdtor_merge =\n+static const pass_data pass_data_ipa_cdtor_merge =\n {\n   IPA_PASS, /* type */\n   \"cdtor\", /* name */\n@@ -1179,7 +1173,7 @@ const pass_data pass_data_ipa_cdtor_merge =\n   0, /* todo_flags_finish */\n };\n \n-class pass_ipa_cdtor_merge : public ipa_opt_pass_d\n+class pass_ipa_cdtor_merge GCC_FINAL : public ipa_opt_pass_d\n {\n public:\n   pass_ipa_cdtor_merge (gcc::context *ctxt)\n@@ -1210,8 +1204,6 @@ pass_ipa_cdtor_merge::gate (function *)\n   return !targetm.have_ctors_dtors || (optimize && in_lto_p);\n }\n \n-} // anon namespace\n-\n ipa_opt_pass_d *\n make_pass_ipa_cdtor_merge (gcc::context *ctxt)\n {\n@@ -1388,9 +1380,7 @@ ipa_single_use (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_ipa_single_use =\n+static const pass_data pass_data_ipa_single_use =\n {\n   IPA_PASS, /* type */\n   \"single-use\", /* name */\n@@ -1403,7 +1393,7 @@ const pass_data pass_data_ipa_single_use =\n   0, /* todo_flags_finish */\n };\n \n-class pass_ipa_single_use : public ipa_opt_pass_d\n+class pass_ipa_single_use GCC_FINAL : public ipa_opt_pass_d\n {\n public:\n   pass_ipa_single_use (gcc::context *ctxt)\n@@ -1431,8 +1421,6 @@ pass_ipa_single_use::gate (function *)\n   return optimize;\n }\n \n-} // anon namespace\n-\n ipa_opt_pass_d *\n make_pass_ipa_single_use (gcc::context *ctxt)\n {"}, {"sha": "cd44f0bb33b28ccd96169f3847a65b6e85338a00", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -854,9 +854,7 @@ optimize_mode_switching (void)\n \n #endif /* OPTIMIZE_MODE_SWITCHING */\n \f\n-namespace {\n-\n-const pass_data pass_data_mode_switching =\n+static const pass_data pass_data_mode_switching =\n {\n   RTL_PASS, /* type */\n   \"mode_sw\", /* name */\n@@ -869,7 +867,7 @@ const pass_data pass_data_mode_switching =\n   TODO_df_finish, /* todo_flags_finish */\n };\n \n-class pass_mode_switching : public rtl_opt_pass\n+class pass_mode_switching GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_mode_switching (gcc::context *ctxt)\n@@ -899,8 +897,6 @@ class pass_mode_switching : public rtl_opt_pass\n \n }; // class pass_mode_switching\n \n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_mode_switching (gcc::context *ctxt)\n {"}, {"sha": "57d585ad9144971bc694ded1fbeebfc8e847da37", "filename": "gcc/omp-low.c", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -9529,9 +9529,7 @@ execute_expand_omp (void)\n \n /* OMP expansion -- the default pass, run before creation of SSA form.  */\n \n-namespace {\n-\n-const pass_data pass_data_expand_omp =\n+static const pass_data pass_data_expand_omp =\n {\n   GIMPLE_PASS, /* type */\n   \"ompexp\", /* name */\n@@ -9544,7 +9542,7 @@ const pass_data pass_data_expand_omp =\n   0, /* todo_flags_finish */\n };\n \n-class pass_expand_omp : public gimple_opt_pass\n+class pass_expand_omp GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_expand_omp (gcc::context *ctxt)\n@@ -9568,17 +9566,13 @@ class pass_expand_omp : public gimple_opt_pass\n \n }; // class pass_expand_omp\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_expand_omp (gcc::context *ctxt)\n {\n   return new pass_expand_omp (ctxt);\n }\n \n-namespace {\n-\n-const pass_data pass_data_expand_omp_ssa =\n+static const pass_data pass_data_expand_omp_ssa =\n {\n   GIMPLE_PASS, /* type */\n   \"ompexpssa\", /* name */\n@@ -9591,7 +9585,7 @@ const pass_data pass_data_expand_omp_ssa =\n   TODO_cleanup_cfg | TODO_rebuild_alias, /* todo_flags_finish */\n };\n \n-class pass_expand_omp_ssa : public gimple_opt_pass\n+class pass_expand_omp_ssa GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_expand_omp_ssa (gcc::context *ctxt)\n@@ -9607,8 +9601,6 @@ class pass_expand_omp_ssa : public gimple_opt_pass\n \n }; // class pass_expand_omp_ssa\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_expand_omp_ssa (gcc::context *ctxt)\n {\n@@ -11952,9 +11944,7 @@ execute_lower_omp (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_lower_omp =\n+static const pass_data pass_data_lower_omp =\n {\n   GIMPLE_PASS, /* type */\n   \"omplower\", /* name */\n@@ -11967,7 +11957,7 @@ const pass_data pass_data_lower_omp =\n   0, /* todo_flags_finish */\n };\n \n-class pass_lower_omp : public gimple_opt_pass\n+class pass_lower_omp GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_lower_omp (gcc::context *ctxt)\n@@ -11979,8 +11969,6 @@ class pass_lower_omp : public gimple_opt_pass\n \n }; // class pass_lower_omp\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_lower_omp (gcc::context *ctxt)\n {\n@@ -12410,9 +12398,7 @@ diagnose_omp_structured_block_errors (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_diagnose_omp_blocks =\n+static const pass_data pass_data_diagnose_omp_blocks =\n {\n   GIMPLE_PASS, /* type */\n   \"*diagnose_omp_blocks\", /* name */\n@@ -12425,7 +12411,7 @@ const pass_data pass_data_diagnose_omp_blocks =\n   0, /* todo_flags_finish */\n };\n \n-class pass_diagnose_omp_blocks : public gimple_opt_pass\n+class pass_diagnose_omp_blocks GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_diagnose_omp_blocks (gcc::context *ctxt)\n@@ -12444,8 +12430,6 @@ class pass_diagnose_omp_blocks : public gimple_opt_pass\n \n }; // class pass_diagnose_omp_blocks\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_diagnose_omp_blocks (gcc::context *ctxt)\n {\n@@ -13707,9 +13691,7 @@ ipa_omp_simd_clone (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_omp_simd_clone =\n+static const pass_data pass_data_omp_simd_clone =\n {\n   SIMPLE_IPA_PASS,\t\t/* type */\n   \"simdclone\",\t\t\t/* name */\n@@ -13722,7 +13704,7 @@ const pass_data pass_data_omp_simd_clone =\n   0,\t\t\t\t/* todo_flags_finish */\n };\n \n-class pass_omp_simd_clone : public simple_ipa_opt_pass\n+class pass_omp_simd_clone GCC_FINAL : public simple_ipa_opt_pass\n {\n public:\n   pass_omp_simd_clone(gcc::context *ctxt)\n@@ -13743,8 +13725,6 @@ pass_omp_simd_clone::gate (function *)\n \t  && (targetm.simd_clone.compute_vecsize_and_simdlen != NULL));\n }\n \n-} // anon namespace\n-\n simple_ipa_opt_pass *\n make_pass_omp_simd_clone (gcc::context *ctxt)\n {"}, {"sha": "8b9c9d7d5ca716cbd9bdd11ed04baacc11cf9b86", "filename": "gcc/reorg.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -3940,9 +3940,7 @@ rest_of_handle_delay_slots (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_delay_slots =\n+static const pass_data pass_data_delay_slots =\n {\n   RTL_PASS, /* type */\n   \"dbr\", /* name */\n@@ -3955,7 +3953,7 @@ const pass_data pass_data_delay_slots =\n   0, /* todo_flags_finish */\n };\n \n-class pass_delay_slots : public rtl_opt_pass\n+class pass_delay_slots GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_delay_slots (gcc::context *ctxt)\n@@ -3982,8 +3980,6 @@ pass_delay_slots::gate (function *)\n #endif\n }\n \n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_delay_slots (gcc::context *ctxt)\n {\n@@ -3992,9 +3988,7 @@ make_pass_delay_slots (gcc::context *ctxt)\n \n /* Machine dependent reorg pass.  */\n \n-namespace {\n-\n-const pass_data pass_data_machine_reorg =\n+static const pass_data pass_data_machine_reorg =\n {\n   RTL_PASS, /* type */\n   \"mach\", /* name */\n@@ -4007,7 +4001,7 @@ const pass_data pass_data_machine_reorg =\n   0, /* todo_flags_finish */\n };\n \n-class pass_machine_reorg : public rtl_opt_pass\n+class pass_machine_reorg GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_machine_reorg (gcc::context *ctxt)\n@@ -4028,8 +4022,6 @@ class pass_machine_reorg : public rtl_opt_pass\n \n }; // class pass_machine_reorg\n \n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_machine_reorg (gcc::context *ctxt)\n {"}, {"sha": "dcb3659b0a6d9d391f99cc61d8c3148f1d155931", "filename": "gcc/sanopt.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -621,9 +621,7 @@ sanopt_optimize (function *fun)\n \n /* Perform optimization of sanitize functions.  */\n \n-namespace {\n-\n-const pass_data pass_data_sanopt =\n+static const pass_data pass_data_sanopt =\n {\n   GIMPLE_PASS, /* type */\n   \"sanopt\", /* name */\n@@ -636,7 +634,7 @@ const pass_data pass_data_sanopt =\n   TODO_update_ssa, /* todo_flags_finish */\n };\n \n-class pass_sanopt : public gimple_opt_pass\n+class pass_sanopt GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_sanopt (gcc::context *ctxt)\n@@ -745,8 +743,6 @@ pass_sanopt::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_sanopt (gcc::context *ctxt)\n {"}, {"sha": "bf7241aa9f9964d2b57615f4f4050102687bea21", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 14, "deletions": 42, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -845,9 +845,7 @@ diagnose_tm_blocks (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_diagnose_tm_blocks =\n+static const pass_data pass_data_diagnose_tm_blocks =\n {\n   GIMPLE_PASS, /* type */\n   \"*diagnose_tm_blocks\", /* name */\n@@ -860,7 +858,7 @@ const pass_data pass_data_diagnose_tm_blocks =\n   0, /* todo_flags_finish */\n };\n \n-class pass_diagnose_tm_blocks : public gimple_opt_pass\n+class pass_diagnose_tm_blocks GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_diagnose_tm_blocks (gcc::context *ctxt)\n@@ -873,8 +871,6 @@ class pass_diagnose_tm_blocks : public gimple_opt_pass\n \n }; // class pass_diagnose_tm_blocks\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_diagnose_tm_blocks (gcc::context *ctxt)\n {\n@@ -1765,9 +1761,7 @@ execute_lower_tm (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_lower_tm =\n+static const pass_data pass_data_lower_tm =\n {\n   GIMPLE_PASS, /* type */\n   \"tmlower\", /* name */\n@@ -1780,7 +1774,7 @@ const pass_data pass_data_lower_tm =\n   0, /* todo_flags_finish */\n };\n \n-class pass_lower_tm : public gimple_opt_pass\n+class pass_lower_tm GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_lower_tm (gcc::context *ctxt)\n@@ -1793,8 +1787,6 @@ class pass_lower_tm : public gimple_opt_pass\n \n }; // class pass_lower_tm\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_lower_tm (gcc::context *ctxt)\n {\n@@ -2060,9 +2052,7 @@ gate_tm_init (void)\n   return true;\n }\n \n-namespace {\n-\n-const pass_data pass_data_tm_init =\n+static const pass_data pass_data_tm_init =\n {\n   GIMPLE_PASS, /* type */\n   \"*tminit\", /* name */\n@@ -2075,7 +2065,7 @@ const pass_data pass_data_tm_init =\n   0, /* todo_flags_finish */\n };\n \n-class pass_tm_init : public gimple_opt_pass\n+class pass_tm_init GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_tm_init (gcc::context *ctxt)\n@@ -2087,8 +2077,6 @@ class pass_tm_init : public gimple_opt_pass\n \n }; // class pass_tm_init\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_tm_init (gcc::context *ctxt)\n {\n@@ -3030,9 +3018,7 @@ execute_tm_mark (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_tm_mark =\n+static const pass_data pass_data_tm_mark =\n {\n   GIMPLE_PASS, /* type */\n   \"tmmark\", /* name */\n@@ -3045,7 +3031,7 @@ const pass_data pass_data_tm_mark =\n   TODO_update_ssa, /* todo_flags_finish */\n };\n \n-class pass_tm_mark : public gimple_opt_pass\n+class pass_tm_mark GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_tm_mark (gcc::context *ctxt)\n@@ -3057,8 +3043,6 @@ class pass_tm_mark : public gimple_opt_pass\n \n }; // class pass_tm_mark\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_tm_mark (gcc::context *ctxt)\n {\n@@ -3191,9 +3175,7 @@ expand_block_edges (struct tm_region *const region, basic_block bb)\n \n /* Entry point to the final expansion of transactional nodes. */\n \n-namespace {\n-\n-const pass_data pass_data_tm_edges =\n+static const pass_data pass_data_tm_edges =\n {\n   GIMPLE_PASS, /* type */\n   \"tmedge\", /* name */\n@@ -3206,7 +3188,7 @@ const pass_data pass_data_tm_edges =\n   TODO_update_ssa, /* todo_flags_finish */\n };\n \n-class pass_tm_edges : public gimple_opt_pass\n+class pass_tm_edges GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_tm_edges (gcc::context *ctxt)\n@@ -3243,8 +3225,6 @@ pass_tm_edges::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_tm_edges (gcc::context *ctxt)\n {\n@@ -3950,9 +3930,7 @@ execute_tm_memopt (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_tm_memopt =\n+static const pass_data pass_data_tm_memopt =\n {\n   GIMPLE_PASS, /* type */\n   \"tmmemopt\", /* name */\n@@ -3965,7 +3943,7 @@ const pass_data pass_data_tm_memopt =\n   0, /* todo_flags_finish */\n };\n \n-class pass_tm_memopt : public gimple_opt_pass\n+class pass_tm_memopt GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_tm_memopt (gcc::context *ctxt)\n@@ -3978,8 +3956,6 @@ class pass_tm_memopt : public gimple_opt_pass\n \n }; // class pass_tm_memopt\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_tm_memopt (gcc::context *ctxt)\n {\n@@ -5592,9 +5568,7 @@ ipa_tm_execute (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_ipa_tm =\n+static const pass_data pass_data_ipa_tm =\n {\n   SIMPLE_IPA_PASS, /* type */\n   \"tmipa\", /* name */\n@@ -5607,7 +5581,7 @@ const pass_data pass_data_ipa_tm =\n   0, /* todo_flags_finish */\n };\n \n-class pass_ipa_tm : public simple_ipa_opt_pass\n+class pass_ipa_tm GCC_FINAL : public simple_ipa_opt_pass\n {\n public:\n   pass_ipa_tm (gcc::context *ctxt)\n@@ -5620,8 +5594,6 @@ class pass_ipa_tm : public simple_ipa_opt_pass\n \n }; // class pass_ipa_tm\n \n-} // anon namespace\n-\n simple_ipa_opt_pass *\n make_pass_ipa_tm (gcc::context *ctxt)\n {"}, {"sha": "609bf4a28bf80f51b8ed515215ff56eabe596283", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -2137,9 +2137,7 @@ lower_eh_constructs_1 (struct leh_state *state, gimple_seq *pseq)\n     lower_eh_constructs_2 (state, &gsi);\n }\n \n-namespace {\n-\n-const pass_data pass_data_lower_eh =\n+static const pass_data pass_data_lower_eh =\n {\n   GIMPLE_PASS, /* type */\n   \"eh\", /* name */\n@@ -2152,7 +2150,7 @@ const pass_data pass_data_lower_eh =\n   0, /* todo_flags_finish */\n };\n \n-class pass_lower_eh : public gimple_opt_pass\n+class pass_lower_eh GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_lower_eh (gcc::context *ctxt)\n@@ -2207,8 +2205,6 @@ pass_lower_eh::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_lower_eh (gcc::context *ctxt)\n {\n@@ -3113,9 +3109,7 @@ refactor_eh_r (gimple_seq seq)\n     }\n }\n \n-namespace {\n-\n-const pass_data pass_data_refactor_eh =\n+static const pass_data pass_data_refactor_eh =\n {\n   GIMPLE_PASS, /* type */\n   \"ehopt\", /* name */\n@@ -3128,7 +3122,7 @@ const pass_data pass_data_refactor_eh =\n   0, /* todo_flags_finish */\n };\n \n-class pass_refactor_eh : public gimple_opt_pass\n+class pass_refactor_eh GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_refactor_eh (gcc::context *ctxt)\n@@ -3145,8 +3139,6 @@ class pass_refactor_eh : public gimple_opt_pass\n \n }; // class pass_refactor_eh\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_refactor_eh (gcc::context *ctxt)\n {\n@@ -3303,9 +3295,7 @@ lower_resx (basic_block bb, gresx *stmt,\n   return ret;\n }\n \n-namespace {\n-\n-const pass_data pass_data_lower_resx =\n+static const pass_data pass_data_lower_resx =\n {\n   GIMPLE_PASS, /* type */\n   \"resx\", /* name */\n@@ -3318,7 +3308,7 @@ const pass_data pass_data_lower_resx =\n   0, /* todo_flags_finish */\n };\n \n-class pass_lower_resx : public gimple_opt_pass\n+class pass_lower_resx GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_lower_resx (gcc::context *ctxt)\n@@ -3360,8 +3350,6 @@ pass_lower_resx::execute (function *fun)\n   return any_rewritten ? TODO_update_ssa_only_virtuals : 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_lower_resx (gcc::context *ctxt)\n {\n@@ -3700,9 +3688,7 @@ lower_eh_dispatch (basic_block src, geh_dispatch *stmt)\n   return redirected;\n }\n \n-namespace {\n-\n-const pass_data pass_data_lower_eh_dispatch =\n+static const pass_data pass_data_lower_eh_dispatch =\n {\n   GIMPLE_PASS, /* type */\n   \"ehdisp\", /* name */\n@@ -3715,7 +3701,7 @@ const pass_data pass_data_lower_eh_dispatch =\n   0, /* todo_flags_finish */\n };\n \n-class pass_lower_eh_dispatch : public gimple_opt_pass\n+class pass_lower_eh_dispatch GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_lower_eh_dispatch (gcc::context *ctxt)\n@@ -3762,8 +3748,6 @@ pass_lower_eh_dispatch::execute (function *fun)\n   return flags;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_lower_eh_dispatch (gcc::context *ctxt)\n {\n@@ -4572,9 +4556,7 @@ execute_cleanup_eh_1 (void)\n   return 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_cleanup_eh =\n+static const pass_data pass_data_cleanup_eh =\n {\n   GIMPLE_PASS, /* type */\n   \"ehcleanup\", /* name */\n@@ -4587,7 +4569,7 @@ const pass_data pass_data_cleanup_eh =\n   0, /* todo_flags_finish */\n };\n \n-class pass_cleanup_eh : public gimple_opt_pass\n+class pass_cleanup_eh GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_cleanup_eh (gcc::context *ctxt)\n@@ -4620,8 +4602,6 @@ pass_cleanup_eh::execute (function *fun)\n   return ret;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_cleanup_eh (gcc::context *ctxt)\n {"}, {"sha": "7ecbe4a1d2f8d4cf97964977f56c8f6c33b3d982", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -2734,9 +2734,7 @@ tree_if_conversion (struct loop *loop)\n \n /* Tree if-conversion pass management.  */\n \n-namespace {\n-\n-const pass_data pass_data_if_conversion =\n+static const pass_data pass_data_if_conversion =\n {\n   GIMPLE_PASS, /* type */\n   \"ifcvt\", /* name */\n@@ -2749,7 +2747,7 @@ const pass_data pass_data_if_conversion =\n   0, /* todo_flags_finish */\n };\n \n-class pass_if_conversion : public gimple_opt_pass\n+class pass_if_conversion GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_if_conversion (gcc::context *ctxt)\n@@ -2798,8 +2796,6 @@ pass_if_conversion::execute (function *fun)\n   return todo;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_if_conversion (gcc::context *ctxt)\n {"}, {"sha": "61bef85cbd1a8376965956bba31f142a4bbb4bc1", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -301,9 +301,7 @@ copy_rename_partition_coalesce (var_map map, tree var1, tree var2, FILE *debug)\n }\n \n \n-namespace {\n-\n-const pass_data pass_data_rename_ssa_copies =\n+static const pass_data pass_data_rename_ssa_copies =\n {\n   GIMPLE_PASS, /* type */\n   \"copyrename\", /* name */\n@@ -316,7 +314,7 @@ const pass_data pass_data_rename_ssa_copies =\n   0, /* todo_flags_finish */\n };\n \n-class pass_rename_ssa_copies : public gimple_opt_pass\n+class pass_rename_ssa_copies GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_rename_ssa_copies (gcc::context *ctxt)\n@@ -466,8 +464,6 @@ pass_rename_ssa_copies::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_rename_ssa_copies (gcc::context *ctxt)\n {"}, {"sha": "7c23393a86a17e9c4e91af197ed7b8899d9f9f64", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -1689,9 +1689,7 @@ tree_ssa_cd_dce (void)\n   return perform_tree_ssa_dce (/*aggressive=*/optimize >= 2);\n }\n \n-namespace {\n-\n-const pass_data pass_data_dce =\n+static const pass_data pass_data_dce =\n {\n   GIMPLE_PASS, /* type */\n   \"dce\", /* name */\n@@ -1704,7 +1702,7 @@ const pass_data pass_data_dce =\n   0, /* todo_flags_finish */\n };\n \n-class pass_dce : public gimple_opt_pass\n+class pass_dce GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_dce (gcc::context *ctxt)\n@@ -1718,17 +1716,13 @@ class pass_dce : public gimple_opt_pass\n \n }; // class pass_dce\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_dce (gcc::context *ctxt)\n {\n   return new pass_dce (ctxt);\n }\n \n-namespace {\n-\n-const pass_data pass_data_cd_dce =\n+static const pass_data pass_data_cd_dce =\n {\n   GIMPLE_PASS, /* type */\n   \"cddce\", /* name */\n@@ -1741,7 +1735,7 @@ const pass_data pass_data_cd_dce =\n   0, /* todo_flags_finish */\n };\n \n-class pass_cd_dce : public gimple_opt_pass\n+class pass_cd_dce GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_cd_dce (gcc::context *ctxt)\n@@ -1755,8 +1749,6 @@ class pass_cd_dce : public gimple_opt_pass\n \n }; // class pass_cd_dce\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_cd_dce (gcc::context *ctxt)\n {"}, {"sha": "a2742377e41b51d80bd0f978f6ec05a7f69158d6", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -1131,9 +1131,7 @@ class dom_opt_dom_walker : public dom_walker\n    every new symbol exposed, its corresponding bit will be set in\n    VARS_TO_RENAME.  */\n \n-namespace {\n-\n-const pass_data pass_data_dominator =\n+static const pass_data pass_data_dominator =\n {\n   GIMPLE_PASS, /* type */\n   \"dom\", /* name */\n@@ -1146,7 +1144,7 @@ const pass_data pass_data_dominator =\n   ( TODO_cleanup_cfg | TODO_update_ssa ), /* todo_flags_finish */\n };\n \n-class pass_dominator : public gimple_opt_pass\n+class pass_dominator GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_dominator (gcc::context *ctxt)\n@@ -1299,8 +1297,6 @@ pass_dominator::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_dominator (gcc::context *ctxt)\n {"}, {"sha": "03356458943ce157064a3452e61be2b14277223e", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -347,9 +347,7 @@ dse_dom_walker::before_dom_children (basic_block bb)\n     }\n }\n \n-namespace {\n-\n-const pass_data pass_data_dse =\n+static const pass_data pass_data_dse =\n {\n   GIMPLE_PASS, /* type */\n   \"dse\", /* name */\n@@ -362,7 +360,7 @@ const pass_data pass_data_dse =\n   0, /* todo_flags_finish */\n };\n \n-class pass_dse : public gimple_opt_pass\n+class pass_dse GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_dse (gcc::context *ctxt)\n@@ -409,8 +407,6 @@ pass_dse::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_dse (gcc::context *ctxt)\n {"}, {"sha": "27aacc225c215956fd617f24bebc4c4aa941bdf7", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -2075,9 +2075,7 @@ fwprop_ssa_val (tree name)\n /* Main entry point for the forward propagation and statement combine\n    optimizer.  */\n \n-namespace {\n-\n-const pass_data pass_data_forwprop =\n+static const pass_data pass_data_forwprop =\n {\n   GIMPLE_PASS, /* type */\n   \"forwprop\", /* name */\n@@ -2090,7 +2088,7 @@ const pass_data pass_data_forwprop =\n   TODO_update_ssa, /* todo_flags_finish */\n };\n \n-class pass_forwprop : public gimple_opt_pass\n+class pass_forwprop GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_forwprop (gcc::context *ctxt)\n@@ -2477,8 +2475,6 @@ pass_forwprop::execute (function *fun)\n   return todoflags;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_forwprop (gcc::context *ctxt)\n {"}, {"sha": "8b7a02d588ce4577fa580a376aabdf9972f915d3", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -590,9 +590,7 @@ sink_code_in_bb (basic_block bb)\n    Note that this reduces the number of computations of a = b + c to 1\n    when we take the else edge, instead of 2.\n */\n-namespace {\n-\n-const pass_data pass_data_sink_code =\n+static const pass_data pass_data_sink_code =\n {\n   GIMPLE_PASS, /* type */\n   \"sink\", /* name */\n@@ -607,7 +605,7 @@ const pass_data pass_data_sink_code =\n   TODO_update_ssa, /* todo_flags_finish */\n };\n \n-class pass_sink_code : public gimple_opt_pass\n+class pass_sink_code GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_sink_code (gcc::context *ctxt)\n@@ -638,8 +636,6 @@ pass_sink_code::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_sink_code (gcc::context *ctxt)\n {"}, {"sha": "a3c64ab8ea4690543487388e52196809624b53aa", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -576,9 +576,7 @@ replace_ssa_name_symbol (tree ssa_name, tree sym)\n    version namespace.  This is used to keep footprint of compiler during\n    interprocedural optimization.  */\n \n-namespace {\n-\n-const pass_data pass_data_release_ssa_names =\n+static const pass_data pass_data_release_ssa_names =\n {\n   GIMPLE_PASS, /* type */\n   \"release_ssa\", /* name */\n@@ -591,7 +589,7 @@ const pass_data pass_data_release_ssa_names =\n   0, /* todo_flags_finish */\n };\n \n-class pass_release_ssa_names : public gimple_opt_pass\n+class pass_release_ssa_names GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_release_ssa_names (gcc::context *ctxt)\n@@ -637,8 +635,6 @@ pass_release_ssa_names::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_release_ssa_names (gcc::context *ctxt)\n {"}, {"sha": "fe19da4c338e02a11690e4ee4aa81bfe7e08cb34", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -1114,9 +1114,7 @@ expand_ifn_va_arg (function *fun)\n #endif\n }\n \n-namespace {\n-\n-const pass_data pass_data_stdarg =\n+static const pass_data pass_data_stdarg =\n {\n   GIMPLE_PASS, /* type */\n   \"stdarg\", /* name */\n@@ -1129,7 +1127,7 @@ const pass_data pass_data_stdarg =\n   0, /* todo_flags_finish */\n };\n \n-class pass_stdarg : public gimple_opt_pass\n+class pass_stdarg GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_stdarg (gcc::context *ctxt)\n@@ -1165,17 +1163,13 @@ pass_stdarg::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_stdarg (gcc::context *ctxt)\n {\n   return new pass_stdarg (ctxt);\n }\n \n-namespace {\n-\n-const pass_data pass_data_lower_vaarg =\n+static const pass_data pass_data_lower_vaarg =\n {\n   GIMPLE_PASS, /* type */\n   \"lower_vaarg\", /* name */\n@@ -1188,7 +1182,7 @@ const pass_data pass_data_lower_vaarg =\n   0, /* todo_flags_finish */\n };\n \n-class pass_lower_vaarg : public gimple_opt_pass\n+class pass_lower_vaarg GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_lower_vaarg (gcc::context *ctxt)\n@@ -1212,8 +1206,6 @@ pass_lower_vaarg::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_lower_vaarg (gcc::context *ctxt)\n {"}, {"sha": "08b5807ff195fb5650fb2849c44c7ac1e2e9ca7d", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -1092,9 +1092,7 @@ execute_tail_calls (void)\n   return tree_optimize_tail_calls_1 (true);\n }\n \n-namespace {\n-\n-const pass_data pass_data_tail_recursion =\n+static const pass_data pass_data_tail_recursion =\n {\n   GIMPLE_PASS, /* type */\n   \"tailr\", /* name */\n@@ -1107,7 +1105,7 @@ const pass_data pass_data_tail_recursion =\n   0, /* todo_flags_finish */\n };\n \n-class pass_tail_recursion : public gimple_opt_pass\n+class pass_tail_recursion GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_tail_recursion (gcc::context *ctxt)\n@@ -1124,17 +1122,13 @@ class pass_tail_recursion : public gimple_opt_pass\n \n }; // class pass_tail_recursion\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_tail_recursion (gcc::context *ctxt)\n {\n   return new pass_tail_recursion (ctxt);\n }\n \n-namespace {\n-\n-const pass_data pass_data_tail_calls =\n+static const pass_data pass_data_tail_calls =\n {\n   GIMPLE_PASS, /* type */\n   \"tailc\", /* name */\n@@ -1147,7 +1141,7 @@ const pass_data pass_data_tail_calls =\n   0, /* todo_flags_finish */\n };\n \n-class pass_tail_calls : public gimple_opt_pass\n+class pass_tail_calls GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_tail_calls (gcc::context *ctxt)\n@@ -1160,8 +1154,6 @@ class pass_tail_calls : public gimple_opt_pass\n \n }; // class pass_tail_calls\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_tail_calls (gcc::context *ctxt)\n {"}, {"sha": "8fe71afba05d2e142443f87cfa3cc9c08dc97d81", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -1705,9 +1705,7 @@ expand_vector_operations (void)\n   return cfg_changed ? TODO_cleanup_cfg : 0;\n }\n \n-namespace {\n-\n-const pass_data pass_data_lower_vector =\n+static const pass_data pass_data_lower_vector =\n {\n   GIMPLE_PASS, /* type */\n   \"veclower\", /* name */\n@@ -1720,7 +1718,7 @@ const pass_data pass_data_lower_vector =\n   TODO_update_ssa, /* todo_flags_finish */\n };\n \n-class pass_lower_vector : public gimple_opt_pass\n+class pass_lower_vector GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_lower_vector (gcc::context *ctxt)\n@@ -1740,17 +1738,13 @@ class pass_lower_vector : public gimple_opt_pass\n \n }; // class pass_lower_vector\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_lower_vector (gcc::context *ctxt)\n {\n   return new pass_lower_vector (ctxt);\n }\n \n-namespace {\n-\n-const pass_data pass_data_lower_vector_ssa =\n+static const pass_data pass_data_lower_vector_ssa =\n {\n   GIMPLE_PASS, /* type */\n   \"veclower2\", /* name */\n@@ -1764,7 +1758,7 @@ const pass_data pass_data_lower_vector_ssa =\n     | TODO_cleanup_cfg ), /* todo_flags_finish */\n };\n \n-class pass_lower_vector_ssa : public gimple_opt_pass\n+class pass_lower_vector_ssa GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_lower_vector_ssa (gcc::context *ctxt)\n@@ -1780,8 +1774,6 @@ class pass_lower_vector_ssa : public gimple_opt_pass\n \n }; // class pass_lower_vector_ssa\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_lower_vector_ssa (gcc::context *ctxt)\n {"}, {"sha": "92b95a6a5b4bcfdd03393e9ccf5533a1dbe63406", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -5948,9 +5948,7 @@ free_lang_data (void)\n }\n \n \n-namespace {\n-\n-const pass_data pass_data_ipa_free_lang_data =\n+static const pass_data pass_data_ipa_free_lang_data =\n {\n   SIMPLE_IPA_PASS, /* type */\n   \"*free_lang_data\", /* name */\n@@ -5963,7 +5961,7 @@ const pass_data pass_data_ipa_free_lang_data =\n   0, /* todo_flags_finish */\n };\n \n-class pass_ipa_free_lang_data : public simple_ipa_opt_pass\n+class pass_ipa_free_lang_data GCC_FINAL : public simple_ipa_opt_pass\n {\n public:\n   pass_ipa_free_lang_data (gcc::context *ctxt)\n@@ -5975,8 +5973,6 @@ class pass_ipa_free_lang_data : public simple_ipa_opt_pass\n \n }; // class pass_ipa_free_lang_data\n \n-} // anon namespace\n-\n simple_ipa_opt_pass *\n make_pass_ipa_free_lang_data (gcc::context *ctxt)\n {"}, {"sha": "e88c367cc99141bf731ab899d266c728f228ed95", "filename": "gcc/ubsan.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -1896,9 +1896,7 @@ do_ubsan_in_current_function ()\n \t\t\t\tDECL_ATTRIBUTES (current_function_decl)));\n }\n \n-namespace {\n-\n-const pass_data pass_data_ubsan =\n+static const pass_data pass_data_ubsan =\n {\n   GIMPLE_PASS, /* type */\n   \"ubsan\", /* name */\n@@ -1911,7 +1909,7 @@ const pass_data pass_data_ubsan =\n   TODO_update_ssa, /* todo_flags_finish */\n };\n \n-class pass_ubsan : public gimple_opt_pass\n+class pass_ubsan GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_ubsan (gcc::context *ctxt)\n@@ -2001,8 +1999,6 @@ pass_ubsan::execute (function *fun)\n   return 0;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_ubsan (gcc::context *ctxt)\n {"}, {"sha": "028dc22a72bc7644fdfe5157ddb5ffe805f51df7", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -10325,9 +10325,7 @@ variable_tracking_main (void)\n   return ret;\n }\n \f\n-namespace {\n-\n-const pass_data pass_data_variable_tracking =\n+static const pass_data pass_data_variable_tracking =\n {\n   RTL_PASS, /* type */\n   \"vartrack\", /* name */\n@@ -10340,7 +10338,7 @@ const pass_data pass_data_variable_tracking =\n   0, /* todo_flags_finish */\n };\n \n-class pass_variable_tracking : public rtl_opt_pass\n+class pass_variable_tracking GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_variable_tracking (gcc::context *ctxt)\n@@ -10360,8 +10358,6 @@ class pass_variable_tracking : public rtl_opt_pass\n \n }; // class pass_variable_tracking\n \n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_variable_tracking (gcc::context *ctxt)\n {"}, {"sha": "6e2b6bb6298ee1e8d953d02abbce123792f44133", "filename": "gcc/vtable-verify.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fvtable-verify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fvtable-verify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvtable-verify.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -801,9 +801,7 @@ verify_bb_vtables (basic_block bb)\n \n /* Definition of this optimization pass.  */\n \n-namespace {\n-\n-const pass_data pass_data_vtable_verify =\n+static const pass_data pass_data_vtable_verify =\n {\n   GIMPLE_PASS, /* type */\n   \"vtable-verify\", /* name */\n@@ -816,7 +814,7 @@ const pass_data pass_data_vtable_verify =\n   TODO_update_ssa, /* todo_flags_finish */\n };\n \n-class pass_vtable_verify : public gimple_opt_pass\n+class pass_vtable_verify GCC_FINAL : public gimple_opt_pass\n {\n public:\n   pass_vtable_verify (gcc::context *ctxt)\n@@ -845,8 +843,6 @@ pass_vtable_verify::execute (function *fun)\n   return ret;\n }\n \n-} // anon namespace\n-\n gimple_opt_pass *\n make_pass_vtable_verify (gcc::context *ctxt)\n {"}, {"sha": "58ae58c07a955c07419ff94122aab2457241368d", "filename": "gcc/web.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63ab94b6d5d732161780c68fce775bd23f8e2a99/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=63ab94b6d5d732161780c68fce775bd23f8e2a99", "patch": "@@ -306,9 +306,7 @@ replace_ref (df_ref ref, rtx reg)\n }\n \n \f\n-namespace {\n-\n-const pass_data pass_data_web =\n+static const pass_data pass_data_web =\n {\n   RTL_PASS, /* type */\n   \"web\", /* name */\n@@ -321,7 +319,7 @@ const pass_data pass_data_web =\n   TODO_df_finish, /* todo_flags_finish */\n };\n \n-class pass_web : public rtl_opt_pass\n+class pass_web GCC_FINAL : public rtl_opt_pass\n {\n public:\n   pass_web (gcc::context *ctxt)\n@@ -426,8 +424,6 @@ pass_web::execute (function *fun)\n   return 0;\n }\n \f\n-} // anon namespace\n-\n rtl_opt_pass *\n make_pass_web (gcc::context *ctxt)\n {"}]}