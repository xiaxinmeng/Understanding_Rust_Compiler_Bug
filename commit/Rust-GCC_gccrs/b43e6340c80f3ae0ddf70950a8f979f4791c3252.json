{"sha": "b43e6340c80f3ae0ddf70950a8f979f4791c3252", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQzZTYzNDBjODBmM2FlMGRkZjcwOTUwYThmOTc5ZjQ3OTFjMzI1Mg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2019-02-17T03:01:41Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2019-02-17T03:01:41Z"}, "message": "[RS6000] Fix <bd>_<mode> and <bd>tf_<mode> splitters\n\nThis patch fixes a bug that can result in \"insn does not satisfy its\nconstraints\" if these splitters fire due to not getting ctr for the\njump insn.  Since the jump insn can have any of r,m,d,wi,c,l as the\ndecremented count output, it's not sufficient to check for\ngpc_reg_operand (which matches VSX regs for example).  Seen after\ncorrecting register_move_cost when the cost of gpr <-> vsx is much\nlower.  Since this is a prerequisite to fixing PR89271, I'm mentioning\nthat PR in the ChangeLog.\n\nThe <bd>tf_<mode> split had a further bug in that it wouldn't match\nif the count output was m,d,wi, or l.\n\n\tPR target/89271\n\t* config/rs6000/rs6000.md (<bd>_<mode> split): Check for an int\n\toutput reg on add insn.\n\t(<bd>tf_<mode> split): Likewise.  Match predicates with insn.\n\nFrom-SVN: r268968", "tree": {"sha": "00a6af16f2f87c43d25a204f0fea948fb98a215c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00a6af16f2f87c43d25a204f0fea948fb98a215c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b43e6340c80f3ae0ddf70950a8f979f4791c3252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43e6340c80f3ae0ddf70950a8f979f4791c3252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b43e6340c80f3ae0ddf70950a8f979f4791c3252", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43e6340c80f3ae0ddf70950a8f979f4791c3252/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8cc38153be3d00b158d92251d8cea92a75669fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8cc38153be3d00b158d92251d8cea92a75669fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8cc38153be3d00b158d92251d8cea92a75669fe"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "74f96a29089b647a8de0c798ad69d0d9dd424072", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43e6340c80f3ae0ddf70950a8f979f4791c3252/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43e6340c80f3ae0ddf70950a8f979f4791c3252/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b43e6340c80f3ae0ddf70950a8f979f4791c3252", "patch": "@@ -1,3 +1,10 @@\n+2019-02-17  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/89271\n+\t* config/rs6000/rs6000.md (<bd>_<mode> split): Check for an int\n+\toutput reg on add insn.\n+\t(<bd>tf_<mode> split): Likewise.  Match predicates with insn.\n+\n 2019-02-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89372"}, {"sha": "584b9da6e7174eec191ad0aeb3bfd485b7313667", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43e6340c80f3ae0ddf70950a8f979f4791c3252/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43e6340c80f3ae0ddf70950a8f979f4791c3252/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b43e6340c80f3ae0ddf70950a8f979f4791c3252", "patch": "@@ -12588,7 +12588,7 @@\n \t\t\t\tconst0_rtx);\n   emit_insn (gen_rtx_SET (operands[3],\n \t\t\t  gen_rtx_COMPARE (CCmode, operands[1], const1_rtx)));\n-  if (gpc_reg_operand (operands[0], <MODE>mode))\n+  if (int_reg_operand (operands[0], <MODE>mode))\n     emit_insn (gen_add<mode>3 (operands[0], operands[1], constm1_rtx));\n   else\n     {\n@@ -12666,7 +12666,7 @@\n \t\t       (const_int 0)]))\n \t  (match_operand 4)\n \t  (match_operand 5)))\n-   (set (match_operand:P 6 \"int_reg_operand\")\n+   (set (match_operand:P 6 \"nonimmediate_operand\")\n \t(plus:P (match_dup 0)\n \t\t(const_int -1)))\n    (clobber (match_scratch:P 7))\n@@ -12699,7 +12699,7 @@\n   else\n      emit_insn (gen_cceq_ior_compare_complement (operands[9], andexpr, ctrcmpcc,\n \t\t\t\t\t\t operands[8], cccmp, ccin));\n-  if (gpc_reg_operand (operands[0], <MODE>mode))\n+  if (int_reg_operand (ctrout, <MODE>mode))\n      emit_insn (gen_add<mode>3 (ctrout, ctr, constm1_rtx));\n   else\n     {"}]}