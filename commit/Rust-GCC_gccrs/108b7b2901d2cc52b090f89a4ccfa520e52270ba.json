{"sha": "108b7b2901d2cc52b090f89a4ccfa520e52270ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4YjdiMjkwMWQyY2M1MmIwOTBmODlhNGNjZmE1MjBlNTIyNzBiYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-27T07:45:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-27T07:45:57Z"}, "message": "re PR sanitizer/70683 (-fcompare-debug bug with -fsanitize=address)\n\n\tPR sanitizer/70683\n\t* tree.h (inchash::add_expr): Add FLAGS argument.\n\t* tree.c (inchash::add_expr): Likewise.  If not OEP_ADDRESS_OF,\n\tuse STRIP_NOPS first.  For INTEGER_CST assert not OEP_ADDRESS_OF.\n\tFor REAL_CST and !HONOR_SIGNED_ZEROS (t) hash +/- 0 the same.\n\tFormatting fix.  Adjust recursive calls.  For tcc_comparison,\n\tif swap_tree_comparison (code) is smaller than code, hash that\n\tand arguments in the other order.  Hash CONVERT_EXPR the same\n\tas NOP_EXPR.  For OEP_ADDRESS_OF hash MEM_REF with 0 offset\n\tof ADDR_EXPR of decl as the decl itself.  Add or remove\n\tOEP_ADDRESS_OF from recursive flags as needed.  For\n\tFMA_EXPR, WIDEN_MULT_{PLUS,MINUS}_EXPR hash the first two\n\toperands commutatively and only the third one normally.\n\tFor internal CALL_EXPR hash in CALL_EXPR_IFN.\n\nFrom-SVN: r235469", "tree": {"sha": "ee16a1291dde4c097179af800ec0f645b1f22d8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee16a1291dde4c097179af800ec0f645b1f22d8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/108b7b2901d2cc52b090f89a4ccfa520e52270ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108b7b2901d2cc52b090f89a4ccfa520e52270ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108b7b2901d2cc52b090f89a4ccfa520e52270ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108b7b2901d2cc52b090f89a4ccfa520e52270ba/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ee806d8d759be9c7326ce55b472f326089b47f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee806d8d759be9c7326ce55b472f326089b47f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ee806d8d759be9c7326ce55b472f326089b47f0"}], "stats": {"total": 143, "additions": 126, "deletions": 17}, "files": [{"sha": "2ed5c25bc4f1d77dd3348b2521aba6a8ef0e9b52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108b7b2901d2cc52b090f89a4ccfa520e52270ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108b7b2901d2cc52b090f89a4ccfa520e52270ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=108b7b2901d2cc52b090f89a4ccfa520e52270ba", "patch": "@@ -1,3 +1,20 @@\n+2016-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/70683\n+\t* tree.h (inchash::add_expr): Add FLAGS argument.\n+\t* tree.c (inchash::add_expr): Likewise.  If not OEP_ADDRESS_OF,\n+\tuse STRIP_NOPS first.  For INTEGER_CST assert not OEP_ADDRESS_OF.\n+\tFor REAL_CST and !HONOR_SIGNED_ZEROS (t) hash +/- 0 the same.\n+\tFormatting fix.  Adjust recursive calls.  For tcc_comparison,\n+\tif swap_tree_comparison (code) is smaller than code, hash that\n+\tand arguments in the other order.  Hash CONVERT_EXPR the same\n+\tas NOP_EXPR.  For OEP_ADDRESS_OF hash MEM_REF with 0 offset\n+\tof ADDR_EXPR of decl as the decl itself.  Add or remove\n+\tOEP_ADDRESS_OF from recursive flags as needed.  For\n+\tFMA_EXPR, WIDEN_MULT_{PLUS,MINUS}_EXPR hash the first two\n+\toperands commutatively and only the third one normally.\n+\tFor internal CALL_EXPR hash in CALL_EXPR_IFN.\n+\n 2016-04-27  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/rtems.h (LIB_SPEC): Add -latomic."}, {"sha": "869218207b7d39b2e38c07be0449d9070a0e3d51", "filename": "gcc/tree.c", "status": "modified", "additions": 108, "deletions": 16, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108b7b2901d2cc52b090f89a4ccfa520e52270ba/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108b7b2901d2cc52b090f89a4ccfa520e52270ba/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=108b7b2901d2cc52b090f89a4ccfa520e52270ba", "patch": "@@ -7769,7 +7769,7 @@ namespace inchash\n    This function is intended to produce the same hash for expressions which\n    would compare equal using operand_equal_p.  */\n void\n-add_expr (const_tree t, inchash::hash &hstate)\n+add_expr (const_tree t, inchash::hash &hstate, unsigned int flags)\n {\n   int i;\n   enum tree_code code;\n@@ -7781,6 +7781,9 @@ add_expr (const_tree t, inchash::hash &hstate)\n       return;\n     }\n \n+  if (!(flags & OEP_ADDRESS_OF))\n+    STRIP_NOPS (t);\n+\n   code = TREE_CODE (t);\n \n   switch (code)\n@@ -7791,12 +7794,17 @@ add_expr (const_tree t, inchash::hash &hstate)\n       hstate.merge_hash (0);\n       return;\n     case INTEGER_CST:\n-      for (i = 0; i < TREE_INT_CST_NUNITS (t); i++)\n+      gcc_checking_assert (!(flags & OEP_ADDRESS_OF));\n+      for (i = 0; i < TREE_INT_CST_EXT_NUNITS (t); i++)\n \thstate.add_wide_int (TREE_INT_CST_ELT (t, i));\n       return;\n     case REAL_CST:\n       {\n-\tunsigned int val2 = real_hash (TREE_REAL_CST_PTR (t));\n+\tunsigned int val2;\n+\tif (!HONOR_SIGNED_ZEROS (t) && real_zerop (t))\n+\t  val2 = rvc_zero;\n+\telse\n+\t  val2 = real_hash (TREE_REAL_CST_PTR (t));\n \thstate.merge_hash (val2);\n \treturn;\n       }\n@@ -7807,17 +7815,18 @@ add_expr (const_tree t, inchash::hash &hstate)\n \treturn;\n       }\n     case STRING_CST:\n-      hstate.add ((const void *) TREE_STRING_POINTER (t), TREE_STRING_LENGTH (t));\n+      hstate.add ((const void *) TREE_STRING_POINTER (t),\n+\t\t  TREE_STRING_LENGTH (t));\n       return;\n     case COMPLEX_CST:\n-      inchash::add_expr (TREE_REALPART (t), hstate);\n-      inchash::add_expr (TREE_IMAGPART (t), hstate);\n+      inchash::add_expr (TREE_REALPART (t), hstate, flags);\n+      inchash::add_expr (TREE_IMAGPART (t), hstate, flags);\n       return;\n     case VECTOR_CST:\n       {\n \tunsigned i;\n \tfor (i = 0; i < VECTOR_CST_NELTS (t); ++i)\n-\t  inchash::add_expr (VECTOR_CST_ELT (t, i), hstate);\n+\t  inchash::add_expr (VECTOR_CST_ELT (t, i), hstate, flags);\n \treturn;\n       }\n     case SSA_NAME:\n@@ -7831,16 +7840,17 @@ add_expr (const_tree t, inchash::hash &hstate)\n       /* A list of expressions, for a CALL_EXPR or as the elements of a\n \t VECTOR_CST.  */\n       for (; t; t = TREE_CHAIN (t))\n-\tinchash::add_expr (TREE_VALUE (t), hstate);\n+\tinchash::add_expr (TREE_VALUE (t), hstate, flags);\n       return;\n     case CONSTRUCTOR:\n       {\n \tunsigned HOST_WIDE_INT idx;\n \ttree field, value;\n+\tflags &= ~OEP_ADDRESS_OF;\n \tFOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t), idx, field, value)\n \t  {\n-\t    inchash::add_expr (field, hstate);\n-\t    inchash::add_expr (value, hstate);\n+\t    inchash::add_expr (field, hstate, flags);\n+\t    inchash::add_expr (value, hstate, flags);\n \t  }\n \treturn;\n       }\n@@ -7865,21 +7875,102 @@ add_expr (const_tree t, inchash::hash &hstate)\n \t  /* DECL's have a unique ID */\n \t  hstate.add_wide_int (DECL_UID (t));\n \t}\n+      else if (tclass == tcc_comparison && !commutative_tree_code (code))\n+\t{\n+\t  /* For comparisons that can be swapped, use the lower\n+\t     tree code.  */\n+\t  enum tree_code ccode = swap_tree_comparison (code);\n+\t  if (code < ccode)\n+\t    ccode = code;\n+\t  hstate.add_object (ccode);\n+\t  inchash::add_expr (TREE_OPERAND (t, ccode != code), hstate, flags);\n+\t  inchash::add_expr (TREE_OPERAND (t, ccode == code), hstate, flags);\n+\t}\n+      else if (CONVERT_EXPR_CODE_P (code))\n+\t{\n+\t  /* NOP_EXPR and CONVERT_EXPR are considered equal by\n+\t     operand_equal_p.  */\n+\t  enum tree_code ccode = NOP_EXPR;\n+\t  hstate.add_object (ccode);\n+\n+\t  /* Don't hash the type, that can lead to having nodes which\n+\t     compare equal according to operand_equal_p, but which\n+\t     have different hash codes.  Make sure to include signedness\n+\t     in the hash computation.  */\n+\t  hstate.add_int (TYPE_UNSIGNED (TREE_TYPE (t)));\n+\t  inchash::add_expr (TREE_OPERAND (t, 0), hstate, flags);\n+\t}\n+      /* For OEP_ADDRESS_OF, hash MEM_EXPR[&decl, 0] the same as decl.  */\n+      else if (code == MEM_REF\n+\t       && (flags & OEP_ADDRESS_OF) != 0\n+\t       && TREE_CODE (TREE_OPERAND (t, 0)) == ADDR_EXPR\n+\t       && DECL_P (TREE_OPERAND (TREE_OPERAND (t, 0), 0))\n+\t       && integer_zerop (TREE_OPERAND (t, 1)))\n+\tinchash::add_expr (TREE_OPERAND (TREE_OPERAND (t, 0), 0),\n+\t\t\t   hstate, flags);\n       else\n \t{\n \t  gcc_assert (IS_EXPR_CODE_CLASS (tclass));\n+\t  unsigned int sflags = flags;\n \n \t  hstate.add_object (code);\n \n+\t  switch (code)\n+\t    {\n+\t    case ADDR_EXPR:\n+\t      gcc_checking_assert (!(flags & OEP_ADDRESS_OF));\n+\t      flags |= OEP_ADDRESS_OF;\n+\t      sflags = flags;\n+\t      break;\n+\n+\t    case INDIRECT_REF:\n+\t    case MEM_REF:\n+\t    case TARGET_MEM_REF:\n+\t      flags &= ~OEP_ADDRESS_OF;\n+\t      sflags = flags;\n+\t      break;\n+\n+\t    case ARRAY_REF:\n+\t    case ARRAY_RANGE_REF:\n+\t    case COMPONENT_REF:\n+\t    case BIT_FIELD_REF:\n+\t      sflags &= ~OEP_ADDRESS_OF;\n+\t      break;\n+\n+\t    case COND_EXPR:\n+\t      flags &= ~OEP_ADDRESS_OF;\n+\t      break;\n+\n+\t    case FMA_EXPR:\n+\t    case WIDEN_MULT_PLUS_EXPR:\n+\t    case WIDEN_MULT_MINUS_EXPR:\n+\t      {\n+\t\t/* The multiplication operands are commutative.  */\n+\t\tinchash::hash one, two;\n+\t\tinchash::add_expr (TREE_OPERAND (t, 0), one, flags);\n+\t\tinchash::add_expr (TREE_OPERAND (t, 1), two, flags);\n+\t\thstate.add_commutative (one, two);\n+\t\tinchash::add_expr (TREE_OPERAND (t, 2), two, flags);\n+\t\treturn;\n+\t      }\n+\n+\t    case CALL_EXPR:\n+\t      if (CALL_EXPR_FN (t) == NULL_TREE)\n+\t\thstate.add_int (CALL_EXPR_IFN (t));\n+\t      break;\n+\n+\t    default:\n+\t      break;\n+\t    }\n+\n \t  /* Don't hash the type, that can lead to having nodes which\n \t     compare equal according to operand_equal_p, but which\n \t     have different hash codes.  */\n-\t  if (CONVERT_EXPR_CODE_P (code)\n-\t      || code == NON_LVALUE_EXPR)\n+\t  if (code == NON_LVALUE_EXPR)\n \t    {\n \t      /* Make sure to include signness in the hash computation.  */\n \t      hstate.add_int (TYPE_UNSIGNED (TREE_TYPE (t)));\n-\t      inchash::add_expr (TREE_OPERAND (t, 0), hstate);\n+\t      inchash::add_expr (TREE_OPERAND (t, 0), hstate, flags);\n \t    }\n \n \t  else if (commutative_tree_code (code))\n@@ -7889,13 +7980,14 @@ add_expr (const_tree t, inchash::hash &hstate)\n \t\t and then rehashing based on the order of their independent\n \t\t hashes.  */\n \t      inchash::hash one, two;\n-\t      inchash::add_expr (TREE_OPERAND (t, 0), one);\n-\t      inchash::add_expr (TREE_OPERAND (t, 1), two);\n+\t      inchash::add_expr (TREE_OPERAND (t, 0), one, flags);\n+\t      inchash::add_expr (TREE_OPERAND (t, 1), two, flags);\n \t      hstate.add_commutative (one, two);\n \t    }\n \t  else\n \t    for (i = TREE_OPERAND_LENGTH (t) - 1; i >= 0; --i)\n-\t      inchash::add_expr (TREE_OPERAND (t, i), hstate);\n+\t      inchash::add_expr (TREE_OPERAND (t, i), hstate,\n+\t\t\t\t i == 0 ? flags : sflags);\n \t}\n       return;\n     }"}, {"sha": "259a2bff6883734d3fc286b8092aac01202bbff8", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108b7b2901d2cc52b090f89a4ccfa520e52270ba/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108b7b2901d2cc52b090f89a4ccfa520e52270ba/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=108b7b2901d2cc52b090f89a4ccfa520e52270ba", "patch": "@@ -4759,7 +4759,7 @@ extern int simple_cst_equal (const_tree, const_tree);\n namespace inchash\n {\n \n-extern void add_expr (const_tree, hash &);\n+extern void add_expr (const_tree, hash &, unsigned int = 0);\n \n }\n "}]}