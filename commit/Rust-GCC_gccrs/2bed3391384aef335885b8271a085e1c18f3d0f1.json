{"sha": "2bed3391384aef335885b8271a085e1c18f3d0f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlZDMzOTEzODRhZWYzMzU4ODViODI3MWEwODVlMWMxOGYzZDBmMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-12-16T19:00:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-12-16T19:00:57Z"}, "message": "i386.md (ashrsi3_cmpno, [...]): Remove redundant '@' from the template.\n\n\t* i386.md (ashrsi3_cmpno, ashrhi3_cmpno, ashrqi3_cmpno, lshrsi3_cmpno,\n\tlshrhi3_cmpno): Remove redundant '@' from the template.\n\n\t* i386.md (cmpstrsi_1): Fix type of the compare.\n\n\t* genattrtab.c (attr_rtx_cost): New function.\n\t(simplify_test_exp): Avoid overactive inlining; use temporary\n\tobstacks for tests.\n\nFrom-SVN: r38310", "tree": {"sha": "a9e92ed8d4dcc8862d2338c0e826b01bf139a898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9e92ed8d4dcc8862d2338c0e826b01bf139a898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bed3391384aef335885b8271a085e1c18f3d0f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bed3391384aef335885b8271a085e1c18f3d0f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bed3391384aef335885b8271a085e1c18f3d0f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bed3391384aef335885b8271a085e1c18f3d0f1/comments", "author": null, "committer": null, "parents": [{"sha": "43db5b3c2c926e078cd11a32d80daf46f6f246f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43db5b3c2c926e078cd11a32d80daf46f6f246f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43db5b3c2c926e078cd11a32d80daf46f6f246f6"}], "stats": {"total": 87, "additions": 75, "deletions": 12}, "files": [{"sha": "91a8e0887d2a12933c72e60d88c6f499ac586b21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bed3391384aef335885b8271a085e1c18f3d0f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bed3391384aef335885b8271a085e1c18f3d0f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bed3391384aef335885b8271a085e1c18f3d0f1", "patch": "@@ -1,3 +1,14 @@\n+Sat Dec 16 19:56:24 MET 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (ashrsi3_cmpno, ashrhi3_cmpno, ashrqi3_cmpno, lshrsi3_cmpno,\n+\tlshrhi3_cmpno): Remove redundant '@' from the template.\n+\n+\t* i386.md (cmpstrsi_1): Fix type of the compare.\n+\n+\t* genattrtab.c (attr_rtx_cost): New function.\n+\t(simplify_test_exp): Avoid overactive inlining; use temporary\n+\tobstacks for tests.\n+\n Sat Dec 16 10:41:11 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* stor-layout.c (place_field): Treat overflowing DECL_SIZE_UNIT"}, {"sha": "72954bf9e2eaca286e6568298fbd595b9421c4c3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bed3391384aef335885b8271a085e1c18f3d0f1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bed3391384aef335885b8271a085e1c18f3d0f1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2bed3391384aef335885b8271a085e1c18f3d0f1", "patch": "@@ -7517,8 +7517,7 @@\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n-  \"@\n-   sar{l}\\\\t{%2, %0|%0, %2}\"\n+  \"sar{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -7590,8 +7589,7 @@\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n-  \"@\n-   sar{w}\\\\t{%2, %0|%0, %2}\"\n+  \"sar{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n \n@@ -7663,8 +7661,7 @@\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n    && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n-  \"@\n-   sar{b}\\\\t{%2, %0|%0, %2}\"\n+  \"sar{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n \f\n@@ -7793,8 +7790,7 @@\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n-  \"@\n-   shr{l}\\\\t{%2, %0|%0, %2}\"\n+  \"shr{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n \n@@ -7866,8 +7862,7 @@\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n    && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n-  \"@\n-   shr{w}\\\\t{%2, %0|%0, %2}\"\n+  \"shr{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n \n@@ -10507,7 +10502,7 @@\n   [(set (reg:CC 17)\n \t(if_then_else:CC (ne (match_operand:SI 6 \"register_operand\" \"2\")\n \t\t\t     (const_int 0))\n-\t  (compare:SI (mem:BLK (match_operand:SI 4 \"register_operand\" \"0\"))\n+\t  (compare:CC (mem:BLK (match_operand:SI 4 \"register_operand\" \"0\"))\n \t\t      (mem:BLK (match_operand:SI 5 \"register_operand\" \"1\")))\n \t  (const_int 0)))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))"}, {"sha": "c69ad53769686392965f73c2ee8da8a56bb146bf", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bed3391384aef335885b8271a085e1c18f3d0f1/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bed3391384aef335885b8271a085e1c18f3d0f1/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=2bed3391384aef335885b8271a085e1c18f3d0f1", "patch": "@@ -460,6 +460,7 @@ static rtx attr_eq\t\tPARAMS ((const char *, const char *));\n static const char *attr_numeral\tPARAMS ((int));\n static int attr_equal_p\t\tPARAMS ((rtx, rtx));\n static rtx attr_copy_rtx\tPARAMS ((rtx));\n+static int attr_rtx_cost \tPARAMS ((rtx));\n \n #define oballoc(size) obstack_alloc (hash_obstack, size)\n \f\n@@ -3151,6 +3152,53 @@ simplify_or_tree (exp, pterm, insn_code, insn_index)\n \n   return exp;\n }\n+/* Compute approximate cost of the expression.  Used to decide whether\n+   expression is cheap enought for inline.  */\n+static int\n+attr_rtx_cost (x)\n+     rtx x;\n+{\n+  int cost = 0;\n+  enum rtx_code code;\n+  if (!x)\n+    return 0;\n+  code = GET_CODE (x);\n+  switch (code)\n+    {\n+    case MATCH_OPERAND:\n+      if (XSTR (x, 1)[0])\n+\treturn 10;\n+      else\n+\treturn 0;\n+    case EQ_ATTR:\n+      /* Alternatives don't result into function call.  */\n+      if (!strcmp (XSTR (x, 0), \"alternative\"))\n+\treturn 0;\n+      else\n+\treturn 5;\n+    default:\n+      {\n+\tint i, j;\n+\tconst char *fmt = GET_RTX_FORMAT (code);\n+\tfor (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+\t  {\n+\t    switch (fmt[i])\n+\t      {\n+\t      case 'V':\n+\t      case 'E':\n+\t\tfor (j = 0; j < XVECLEN (x, i); j++)\n+\t\t  cost += attr_rtx_cost (XVECEXP (x, i, j));\n+\t\tbreak;\n+\t      case 'e':\n+\t\tcost += attr_rtx_cost (XEXP (x, i));\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+      break;\n+    }\n+  return cost;\n+}\n \f\n /* Given an expression, see if it can be simplified for a particular insn\n    code based on the values of other attributes being tested.  This can\n@@ -3407,7 +3455,16 @@ simplify_test_exp (exp, insn_code, insn_index)\n \tfor (av = attr->first_value; av; av = av->next)\n \t  for (ie = av->first_insn; ie; ie = ie->next)\n \t    if (ie->insn_code == insn_code)\n-\t      return evaluate_eq_attr (exp, av->value, insn_code, insn_index);\n+\t      {\n+\t\trtx x;\n+\t\tstruct obstack *old = rtl_obstack;\n+\t\trtl_obstack = temp_obstack;\n+\t\tx = evaluate_eq_attr (exp, av->value, insn_code, insn_index);\n+\t\tx = SIMPLIFY_TEST_EXP (x, insn_code, insn_index);\n+\t\trtl_obstack = old;\n+\t\tif (attr_rtx_cost(x) < 20)\n+\t\t  return attr_copy_rtx (x);\n+\t      }\n       break;\n \n     default:"}]}