{"sha": "46c6976da146fbd52c088c1530f25e8b8f56c648", "node_id": "C_kwDOANBUbNoAKDQ2YzY5NzZkYTE0NmZiZDUyYzA4OGMxNTMwZjI1ZThiOGY1NmM2NDg", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2022-05-03T16:14:25Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@arm.com", "date": "2022-05-20T07:35:41Z"}, "message": "testsuite: Add C++ unwinding tests with Decimal Floating-Point\n\nThese tests exercise exception handling with Decimal Floating-Point\ntype.\n\ndfp-1.C and dfp-2.C check that thrown objects of such types are\nproperly caught, whether when using C++ classes (decimalXX) or via GCC\nmode attributes.\n\ndfp-saves-aarch64.C checks that such objects are properly restored,\nand has to use the mode attribute trick because objects of decimalXX\nclass type cannot be assigned to a register variable.\n\n2022-05-03  Christophe Lyon  <christophe.lyon@arm.com>\n\n\tgcc/testsuite/\n\t* g++.dg/eh/dfp-1.C: New test.\n\t* g++.dg/eh/dfp-2.C: New test.\n\t* g++.dg/eh/dfp-saves-aarch64.C: New test.", "tree": {"sha": "e86f33c09404d26979a40e77128879b4f77968fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e86f33c09404d26979a40e77128879b4f77968fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46c6976da146fbd52c088c1530f25e8b8f56c648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c6976da146fbd52c088c1530f25e8b8f56c648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c6976da146fbd52c088c1530f25e8b8f56c648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c6976da146fbd52c088c1530f25e8b8f56c648/comments", "author": null, "committer": null, "parents": [{"sha": "096eaeac38fa4acc50a4784f3242db5ae8a08262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096eaeac38fa4acc50a4784f3242db5ae8a08262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096eaeac38fa4acc50a4784f3242db5ae8a08262"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "b0da13a4cc575f628d833dd439d5ff19d30157a5", "filename": "gcc/testsuite/g++.dg/eh/dfp-1.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c6976da146fbd52c088c1530f25e8b8f56c648/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdfp-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c6976da146fbd52c088c1530f25e8b8f56c648/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdfp-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdfp-1.C?ref=46c6976da146fbd52c088c1530f25e8b8f56c648", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do run }\n+// { dg-require-effective-target dfp }\n+\n+extern \"C\" void abort ();\n+\n+#include <decimal/decimal>\n+\n+using namespace std::decimal;\n+\n+int\n+foo (double fp)\n+{\n+  if (fp < 32.0)\n+    throw (decimal32)32;\n+  if (fp < 64.0)\n+    throw (decimal64)64;\n+  if (fp < 128.0)\n+    throw (decimal128)128;\n+  return 0;\n+}\n+\n+int bar (double fp)\n+{\n+  try\n+    {\n+      foo (fp);\n+      abort ();\n+    }\n+  catch (decimal32 df)\n+    {\n+      if (df != (decimal32)32)\n+\tabort ();\n+    }\n+  catch (decimal64 dd)\n+    {\n+      if (dd != (decimal64)64)\n+\tabort ();\n+    }\n+  catch (decimal128 dl)\n+    {\n+      if (dl != (decimal128)128)\n+\tabort ();\n+    }\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  bar (10.0);\n+  bar (20.0);\n+  bar (100.0);\n+  return 0;\n+}"}, {"sha": "aff0e03d1d91513651db11d00f56d9e3b21588b0", "filename": "gcc/testsuite/g++.dg/eh/dfp-2.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c6976da146fbd52c088c1530f25e8b8f56c648/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdfp-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c6976da146fbd52c088c1530f25e8b8f56c648/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdfp-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdfp-2.C?ref=46c6976da146fbd52c088c1530f25e8b8f56c648", "patch": "@@ -0,0 +1,54 @@\n+// { dg-do run }\n+// { dg-require-effective-target dfp }\n+\n+extern \"C\" void abort ();\n+\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+int\n+foo (double fp)\n+{\n+  if (fp < 32.0)\n+    throw (dec32)32;\n+  if (fp < 64.0)\n+    throw (dec64)64;\n+  if (fp < 128.0)\n+    throw (dec128)128;\n+  return 0;\n+}\n+\n+int bar (double fp)\n+{\n+  try\n+    {\n+      foo (fp);\n+      abort ();\n+    }\n+  catch (dec32 df)\n+    {\n+      if (df != (dec32)32)\n+\tabort ();\n+    }\n+  catch (dec64 dd)\n+    {\n+      if (dd != (dec64)64)\n+\tabort ();\n+    }\n+  catch (dec128 dl)\n+    {\n+      if (dl != (dec128)128)\n+\tabort ();\n+    }\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  bar (10.0);\n+  bar (20.0);\n+  bar (100.0);\n+  return 0;\n+}"}, {"sha": "062034105004c22f15729c88222f150804928506", "filename": "gcc/testsuite/g++.dg/eh/dfp-saves-aarch64.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c6976da146fbd52c088c1530f25e8b8f56c648/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdfp-saves-aarch64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c6976da146fbd52c088c1530f25e8b8f56c648/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdfp-saves-aarch64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fdfp-saves-aarch64.C?ref=46c6976da146fbd52c088c1530f25e8b8f56c648", "patch": "@@ -0,0 +1,49 @@\n+// { dg-do run { target aarch64*-*-* } }\n+// { dg-require-effective-target dfp }\n+\n+/* Test unwinding of AArch64 register saves.  */\n+/* We cannot use #include <decimal/decimal> because it defines\n+   decimal* types as classes, which cannot be assigned to register\n+   variables.  Hence the use the mode attribute trick.  */\n+\n+#ifdef __aarch64__\n+\n+typedef float dec64 __attribute__((mode(DD)));\n+\n+extern \"C\" void abort (void);\n+extern \"C\" void exit (int);\n+\n+void\n+foo (void)\n+{\n+  register dec64 v10 asm(\"v10\") = 0;\n+  register dec64 v11 asm(\"v11\") = 1;\n+  register dec64 v12 asm(\"v12\") = 2;\n+  register dec64 v13 asm(\"v13\") = 3;\n+  asm volatile (\"\" : \"+w\" (v10), \"+w\" (v11), \"+w\" (v12), \"+w\" (v13));\n+  throw \"\";\n+}\n+\n+int\n+main (void)\n+{\n+  register dec64 v10 asm(\"v10\") = 10;\n+  register dec64 v11 asm(\"v11\") = 11;\n+  register dec64 v12 asm(\"v12\") = 12;\n+  register dec64 v13 asm(\"v13\") = 13;\n+  asm volatile (\"\" : \"+w\" (v10), \"+w\" (v11), \"+w\" (v12), \"+w\" (v13));\n+  try {\n+    foo ();\n+  } catch (...) {\n+    asm volatile (\"\" : \"+w\" (v10), \"+w\" (v11), \"+w\" (v12), \"+w\" (v13));\n+    if (v10 != 10 || v11 != 11 || v12 != 12 || v13 != 13)\n+      abort ();\n+  }\n+  exit (0);\n+}\n+#else\n+int\n+main (void)\n+{\n+}\n+#endif"}]}