{"sha": "bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY1NTgyYzM1NmViNzk1YWI4ZGZiZTFiMWRmNmI5NTcxZWMxYmQ4MQ==", "commit": {"author": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-02-21T15:21:23Z"}, "committer": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-02-21T15:21:23Z"}, "message": "[PATCH, GCC/ARM] Fix MVE scalar shift tests\n\n*** gcc/ChangeLog ***\n\n2020-02-21  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/arm/arm.md: Prevent scalar shifts from being\n\tused when big endian is enabled.\n\n*** gcc/testsuite/ChangeLog ***\n\n2020-02-21  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n\n\t* gcc.target/arm/armv8_1m-shift-imm-1.c: Add MVE target checks.\n\t* gcc.target/arm/armv8_1m-shift-reg-1.c: Likewise.\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_v8_1m_mve_ok_nocache): New.\n\t(check_effective_target_arm_v8_1m_mve_ok): New.\n\t(add_options_for_v8_1m_mve): New.", "tree": {"sha": "a9e49a3d0a241e04e7df55f89706cad8240fbad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9e49a3d0a241e04e7df55f89706cad8240fbad0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/comments", "author": null, "committer": null, "parents": [{"sha": "b150c838d9dcf2aa9a50bffdc1eb3012200a4d21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b150c838d9dcf2aa9a50bffdc1eb3012200a4d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b150c838d9dcf2aa9a50bffdc1eb3012200a4d21"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "3d4d799ed5d14e83677e6a2ebec5dc21c6d9b616", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81", "patch": "@@ -1,3 +1,8 @@\n+2020-02-21  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/arm/arm.md: Prevent scalar shifts from being used when big\n+\tendian is enabled.\n+\n 2020-02-21  Jan Hubicka  <hubicka@ucw.cz>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "951596217ad2505d1e6232c2e592db595245bf65", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81", "patch": "@@ -4399,7 +4399,7 @@\n                    (match_operand:SI 2 \"reg_or_int_operand\")))]\n   \"TARGET_32BIT\"\n   \"\n-  if (TARGET_HAVE_MVE)\n+  if (TARGET_HAVE_MVE && !BYTES_BIG_ENDIAN)\n     {\n       if (!reg_or_int_operand (operands[2], SImode))\n         operands[2] = force_reg (SImode, operands[2]);\n@@ -4443,7 +4443,7 @@\n   \"TARGET_32BIT\"\n   \"\n   /* Armv8.1-M Mainline double shifts are not expanded.  */\n-  if (TARGET_HAVE_MVE\n+  if (TARGET_HAVE_MVE && !BYTES_BIG_ENDIAN\n       && arm_reg_or_long_shift_imm (operands[2], GET_MODE (operands[2])))\n     {\n       if (!reg_overlap_mentioned_p(operands[0], operands[1]))\n@@ -4478,7 +4478,7 @@\n   \"TARGET_32BIT\"\n   \"\n   /* Armv8.1-M Mainline double shifts are not expanded.  */\n-  if (TARGET_HAVE_MVE\n+  if (TARGET_HAVE_MVE && !BYTES_BIG_ENDIAN\n     && long_shift_imm (operands[2], GET_MODE (operands[2])))\n     {\n       if (!reg_overlap_mentioned_p(operands[0], operands[1]))"}, {"sha": "02fa22ef23cd8323481d2c8d0309dec45ab43638", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81", "patch": "@@ -1,3 +1,12 @@\n+2020-02-21  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* gcc.target/arm/armv8_1m-shift-imm-1.c: Add MVE target checks.\n+\t* gcc.target/arm/armv8_1m-shift-reg-1.c: Likewise.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_v8_1m_mve_ok_nocache): New.\n+\t(check_effective_target_arm_v8_1m_mve_ok): New.\n+\t(add_options_for_v8_1m_mve): New.\n+\n 2020-02-21  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/vect/vect-epilogues.c (scan-tree-dump): Require"}, {"sha": "883fbb092b18422e9109e3e87abab22f1c602fdb", "filename": "gcc/testsuite/gcc.target/arm/armv8_1m-shift-imm-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_1m-shift-imm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_1m-shift-imm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_1m-shift-imm-1.c?ref=bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -march=armv8.1-m.main+mve -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2 -mfloat-abi=softfp -mlittle-endian\" } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n \n long long longval1;\n long long unsigned longval2;"}, {"sha": "e125ff83c222fcf4cd5d929714ae118387b77273", "filename": "gcc/testsuite/gcc.target/arm/armv8_1m-shift-reg-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_1m-shift-reg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_1m-shift-reg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farmv8_1m-shift-reg-1.c?ref=bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -march=armv8.1-m.main+mve -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2 -mfloat-abi=softfp -mlittle-endian\" } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n \n long long longval2;\n int intval2;"}, {"sha": "9592c539c11634f580357d3ebbd02cdeb1da1b3a", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=bf5582c356eb795ab8dfbe1b1df6b9571ec1bd81", "patch": "@@ -4828,6 +4828,48 @@ proc check_effective_target_arm_v8_2a_dotprod_neon_ok_nocache { } {\n     return 0;\n }\n \n+# Return 1 if the target supports ARMv8.1-M MVE\n+# instructions, 0 otherwise.  The test is valid for ARM.\n+# Record the command line options needed.\n+\n+proc check_effective_target_arm_v8_1m_mve_ok_nocache { } {\n+    global et_arm_v8_1m_mve_flags\n+    set et_arm_v8_1m_mve_flags \"\"\n+\n+    if { ![istarget arm*-*-*] } {\n+        return 0;\n+    }\n+\n+    # Iterate through sets of options to find the compiler flags that\n+    # need to be added to the -march option.\n+    foreach flags {\"\" \"-mfloat-abi=softfp -mfpu=auto\" \"-mfloat-abi=hard -mfpu=auto\"} {\n+        if { [check_no_compiler_messages_nocache \\\n+                  arm_v8_1m_mve_ok object {\n+            #if !defined (__ARM_FEATURE_MVE)\n+            #error \"__ARM_FEATURE_MVE not defined\"\n+            #endif\n+        } \"$flags -mthumb\"] } {\n+            set et_arm_v8_1m_mve_flags \"$flags -mthumb\"\n+            return 1\n+        }\n+    }\n+\n+    return 0;\n+}\n+\n+proc check_effective_target_arm_v8_1m_mve_ok { } {\n+    return [check_cached_effective_target arm_v8_1m_mve_ok \\\n+                check_effective_target_arm_v8_1m_mve_ok_nocache]\n+}\n+\n+proc add_options_for_arm_v8_1m_mve { flags } {\n+    if { ! [check_effective_target_arm_v8_1m_mve_ok] } {\n+        return \"$flags\"\n+    }\n+    global et_arm_v8_1m_mve_flags\n+    return \"$flags $et_arm_v8_1m_mve_flags\"\n+}\n+\n proc check_effective_target_arm_v8_2a_dotprod_neon_ok { } {\n     return [check_cached_effective_target arm_v8_2a_dotprod_neon_ok \\\n                 check_effective_target_arm_v8_2a_dotprod_neon_ok_nocache]"}]}