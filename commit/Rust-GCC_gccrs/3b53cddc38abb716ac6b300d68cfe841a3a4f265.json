{"sha": "3b53cddc38abb716ac6b300d68cfe841a3a4f265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1M2NkZGMzOGFiYjcxNmFjNmIzMDBkNjhjZmU4NDFhM2E0ZjI2NQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-09-14T18:59:38Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-09-14T18:59:38Z"}, "message": "c-tree.h (struct c_declspecs): Add const_p, volatile_p and restrict_p.\n\n\t* c-tree.h (struct c_declspecs): Add const_p, volatile_p and\n\trestrict_p.\n\t(struct c_declarator): Change u.array.quals and pointer_quals to\n\tint.  Add u.array.attrs.\n\t(quals_from_declspecs): New.\n\t* c-decl.c (quals_from_declspecs): New.\n\t(shadow_tag_warned): Give more specific message for useless type\n\tqualifiers.\n\t(build_array_declarator, set_array_declarator_inner,\n\tgrokdeclarator, make_pointer_declarator, build_null_declspecs,\n\tdeclspecs_add_qual): Update for changed structures.\n\ntestsuite:\n\t* gcc.dg/declspec-12.c: New test.\n\nFrom-SVN: r87500", "tree": {"sha": "fb8bf0df6ee54a733add01818e6fc44482343ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb8bf0df6ee54a733add01818e6fc44482343ef3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b53cddc38abb716ac6b300d68cfe841a3a4f265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b53cddc38abb716ac6b300d68cfe841a3a4f265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b53cddc38abb716ac6b300d68cfe841a3a4f265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b53cddc38abb716ac6b300d68cfe841a3a4f265/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67dd4a937789286c3903508be8662fb93051b1c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67dd4a937789286c3903508be8662fb93051b1c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67dd4a937789286c3903508be8662fb93051b1c3"}], "stats": {"total": 190, "additions": 129, "deletions": 61}, "files": [{"sha": "d581ec834a397b06cee9769bb5bebfb514b7ecf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b53cddc38abb716ac6b300d68cfe841a3a4f265/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b53cddc38abb716ac6b300d68cfe841a3a4f265/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b53cddc38abb716ac6b300d68cfe841a3a4f265", "patch": "@@ -1,3 +1,17 @@\n+2004-09-14  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-tree.h (struct c_declspecs): Add const_p, volatile_p and\n+\trestrict_p.\n+\t(struct c_declarator): Change u.array.quals and pointer_quals to\n+\tint.  Add u.array.attrs.\n+\t(quals_from_declspecs): New.\n+\t* c-decl.c (quals_from_declspecs): New.\n+\t(shadow_tag_warned): Give more specific message for useless type\n+\tqualifiers.\n+\t(build_array_declarator, set_array_declarator_inner,\n+\tgrokdeclarator, make_pointer_declarator, build_null_declspecs,\n+\tdeclspecs_add_qual): Update for changed structures.\n+\n 2004-09-14  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (stmts_to_rescan): Move from a block-local"}, {"sha": "b3bd689677b28b4b5c03ae254f33b890c4842026", "filename": "gcc/c-decl.c", "status": "modified", "additions": 93, "deletions": 58, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b53cddc38abb716ac6b300d68cfe841a3a4f265/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b53cddc38abb716ac6b300d68cfe841a3a4f265/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3b53cddc38abb716ac6b300d68cfe841a3a4f265", "patch": "@@ -2771,6 +2771,14 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n       warned = 2;\n     }\n \n+  if (!warned && !in_system_header && (declspecs->const_p\n+\t\t\t\t       || declspecs->volatile_p\n+\t\t\t\t       || declspecs->restrict_p))\n+    {\n+      warning (\"useless type qualifier in empty declaration\");\n+      warned = 2;\n+    }\n+\n   if (!warned && !in_system_header && declspecs->specbits)\n     {\n       warning (\"useless keyword or type name in empty declaration\");\n@@ -2784,6 +2792,32 @@ shadow_tag_warned (const struct c_declspecs *declspecs, int warned)\n     }\n }\n \f\n+\n+/* Return the qualifiers from SPECS as a bitwise OR of TYPE_QUAL_*\n+   bits.  SPECS represents declaration specifiers that the grammar\n+   only permits to contain type qualifiers and attributes.  */\n+\n+int\n+quals_from_declspecs (const struct c_declspecs *specs)\n+{\n+  int quals = ((specs->const_p ? TYPE_QUAL_CONST : 0)\n+\t       | (specs->volatile_p ? TYPE_QUAL_VOLATILE : 0)\n+\t       | (specs->restrict_p ? TYPE_QUAL_RESTRICT : 0));\n+  gcc_assert (!specs->type\n+\t      && !specs->decl_attr\n+\t      && !specs->specbits\n+\t      && specs->storage_class == csc_none\n+\t      && !specs->typedef_p\n+\t      && !specs->typedef_signed_p\n+\t      && !specs->deprecated_p\n+\t      && !specs->explicit_int_p\n+\t      && !specs->explicit_char_p\n+\t      && !specs->long_long_p\n+\t      && !specs->inline_p\n+\t      && !specs->thread_p);\n+  return quals;\n+}\n+\n /* Construct an array declarator.  EXPR is the expression inside [], or\n    NULL_TREE.  QUALS are the type qualifiers inside the [] (to be applied\n    to the pointer to which a parameter array is converted).  STATIC_P is\n@@ -2802,7 +2836,16 @@ build_array_declarator (tree expr, struct c_declspecs *quals, bool static_p,\n   declarator->kind = cdk_array;\n   declarator->declarator = 0;\n   declarator->u.array.dimen = expr;\n-  declarator->u.array.quals = quals;\n+  if (quals)\n+    {\n+      declarator->u.array.attrs = quals->attrs;\n+      declarator->u.array.quals = quals_from_declspecs (quals);\n+    }\n+  else\n+    {\n+      declarator->u.array.attrs = NULL_TREE;\n+      declarator->u.array.quals = 0;\n+    }\n   declarator->u.array.static_p = static_p;\n   declarator->u.array.vla_unspec_p = vla_unspec_p;\n   if (pedantic && !flag_isoc99)\n@@ -2830,7 +2873,8 @@ set_array_declarator_inner (struct c_declarator *decl,\n \t\t\t    struct c_declarator *inner, bool abstract_p)\n {\n   decl->declarator = inner;\n-  if (abstract_p && (decl->u.array.quals != NULL\n+  if (abstract_p && (decl->u.array.quals != TYPE_UNQUALIFIED\n+\t\t     || decl->u.array.attrs != NULL_TREE\n \t\t     || decl->u.array.static_p))\n     error (\"static or type qualifiers in abstract declarator\");\n   return decl;\n@@ -3644,7 +3688,8 @@ grokdeclarator (const struct c_declarator *declarator,\n   bool funcdef_syntax = false;\n   int size_varies = 0;\n   tree decl_attr = NULL_TREE;\n-  struct c_declspecs *array_ptr_quals = 0;\n+  int array_ptr_quals = TYPE_UNQUALIFIED;\n+  tree array_ptr_attrs = NULL_TREE;\n   int array_parm_static = 0;\n   tree returned_attrs = NULL_TREE;\n   bool bitfield = width != NULL;\n@@ -3897,11 +3942,9 @@ grokdeclarator (const struct c_declarator *declarator,\n      duplicate qualifiers should be diagnosed in this case, but it\n      seems most appropriate to do so).  */\n   element_type = strip_array_types (type);\n-  constp = !! (specbits & 1 << (int) RID_CONST) + TYPE_READONLY (element_type);\n-  restrictp\n-    = !! (specbits & 1 << (int) RID_RESTRICT) + TYPE_RESTRICT (element_type);\n-  volatilep\n-    = !! (specbits & 1 << (int) RID_VOLATILE) + TYPE_VOLATILE (element_type);\n+  constp = declspecs->const_p + TYPE_READONLY (element_type);\n+  restrictp = declspecs->restrict_p + TYPE_RESTRICT (element_type);\n+  volatilep = declspecs->volatile_p + TYPE_VOLATILE (element_type);\n   if (pedantic && !flag_isoc99)\n     {\n       if (constp > 1)\n@@ -4021,13 +4064,16 @@ grokdeclarator (const struct c_declarator *declarator,\n \t array or function or pointer, and DECLARATOR has had its\n \t outermost layer removed.  */\n \n-      if (array_ptr_quals != NULL || array_parm_static)\n+      if (array_ptr_quals != TYPE_UNQUALIFIED\n+\t  || array_ptr_attrs != NULL_TREE\n+\t  || array_parm_static)\n \t{\n \t  /* Only the innermost declarator (making a parameter be of\n \t     array type which is converted to pointer type)\n \t     may have static or type qualifiers.  */\n \t  error (\"static or type qualifiers in non-parameter array declarator\");\n-\t  array_ptr_quals = NULL;\n+\t  array_ptr_quals = TYPE_UNQUALIFIED;\n+\t  array_ptr_attrs = NULL_TREE;\n \t  array_parm_static = 0;\n \t}\n \n@@ -4062,6 +4108,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t    tree index_type = c_common_signed_type (sizetype);\n \n \t    array_ptr_quals = declarator->u.array.quals;\n+\t    array_ptr_attrs = declarator->u.array.attrs;\n \t    array_parm_static = declarator->u.array.static_p;\n \t    \n \t    declarator = declarator->declarator;\n@@ -4214,10 +4261,13 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      layout_type (type);\n \n \t    if (decl_context != PARM\n-\t\t&& (array_ptr_quals != NULL || array_parm_static))\n+\t\t&& (array_ptr_quals != TYPE_UNQUALIFIED\n+\t\t    || array_ptr_attrs != NULL_TREE\n+\t\t    || array_parm_static))\n \t      {\n \t\terror (\"static or type qualifiers in non-parameter array declarator\");\n-\t\tarray_ptr_quals = NULL;\n+\t\tarray_ptr_quals = TYPE_UNQUALIFIED;\n+\t\tarray_ptr_attrs = NULL_TREE;\n \t\tarray_parm_static = 0;\n \t      }\n \t    break;\n@@ -4306,31 +4356,13 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      pedwarn (\"ISO C forbids qualified function types\");\n \t    if (type_quals)\n \t      type = c_build_qualified_type (type, type_quals);\n-\t    type_quals = TYPE_UNQUALIFIED;\n \t    size_varies = 0;\n-\t    \n+\n \t    type = build_pointer_type (type);\n \t    \n \t    /* Process type qualifiers (such as const or volatile)\n \t       that were given inside the `*'.  */\n-\t    if (declarator->u.pointer_quals)\n-\t      {\n-\t\tint pbits = declarator->u.pointer_quals->specbits;\n-\n-\t\t/* The grammar should only permit qualifiers here.  */\n-\t\tgcc_assert (!declarator->u.pointer_quals->type\n-\t\t\t    && !(pbits & ~((1 << (int) RID_CONST)\n-\t\t\t\t\t   | (1 << (int) RID_VOLATILE)\n-\t\t\t\t\t   | (1 << (int) RID_RESTRICT))));\n-\n-\t\tconstp = !!(pbits & (1 << (int) RID_CONST));\n-\t\tvolatilep = !!(pbits & (1 << (int) RID_VOLATILE));\n-\t\trestrictp = !!(pbits & (1 << (int) RID_RESTRICT));\n-\n-\t\ttype_quals = ((constp ? TYPE_QUAL_CONST : 0)\n-\t\t\t      | (restrictp ? TYPE_QUAL_RESTRICT : 0)\n-\t\t\t      | (volatilep ? TYPE_QUAL_VOLATILE : 0));\n-\t      }\n+\t    type_quals = declarator->u.pointer_quals;\n \n \t    declarator = declarator->declarator;\n \t    break;\n@@ -4445,29 +4477,12 @@ grokdeclarator (const struct c_declarator *declarator,\n \t    if (type_quals)\n \t      type = c_build_qualified_type (type, type_quals);\n \t    type = build_pointer_type (type);\n-\t    type_quals = TYPE_UNQUALIFIED;\n-\t    if (array_ptr_quals)\n-\t      {\n-\t\tint apqbits = array_ptr_quals->specbits;\n-\n-\t\t/* We don't yet implement attributes in this context.  */\n-\t\tif (array_ptr_quals->attrs != NULL_TREE)\n-\t\t  warning (\"attributes in parameter array declarator ignored\");\n+\t    type_quals = array_ptr_quals;\n \n-\t\t/* The grammar should only permit qualifiers here.  */\n-\t\tgcc_assert (!array_ptr_quals->type\n-\t\t\t    && !(apqbits & ~((1 << (int) RID_CONST)\n-\t\t\t\t\t     | (1 << (int) RID_VOLATILE)\n-\t\t\t\t\t     | (1 << (int) RID_RESTRICT))));\n+\t    /* We don't yet implement attributes in this context.  */\n+\t    if (array_ptr_attrs != NULL_TREE)\n+\t      warning (\"attributes in parameter array declarator ignored\");\n \n-\t\tconstp = !!(apqbits & (1 << (int) RID_CONST));\n-\t\tvolatilep = !!(apqbits & (1 << (int) RID_VOLATILE));\n-\t\trestrictp = !!(apqbits & (1 << (int) RID_RESTRICT));\n-\n-\t\ttype_quals = ((constp ? TYPE_QUAL_CONST : 0)\n-\t\t\t      | (restrictp ? TYPE_QUAL_RESTRICT : 0)\n-\t\t\t      | (volatilep ? TYPE_QUAL_VOLATILE : 0));\n-\t      }\n \t    size_varies = 0;\n \t  }\n \telse if (TREE_CODE (type) == FUNCTION_TYPE)\n@@ -6724,18 +6739,19 @@ make_pointer_declarator (struct c_declspecs *type_quals_attrs,\n \t\t\t struct c_declarator *target)\n {\n   tree attrs;\n+  int quals = 0;\n   struct c_declarator *itarget = target;\n   struct c_declarator *ret = XOBNEW (&parser_obstack, struct c_declarator);\n   if (type_quals_attrs)\n     {\n       attrs = type_quals_attrs->attrs;\n-      type_quals_attrs->attrs = NULL_TREE;\n+      quals = quals_from_declspecs (type_quals_attrs);\n       if (attrs != NULL_TREE)\n \titarget = build_attrs_declarator (attrs, target);\n     }\n   ret->kind = cdk_pointer;\n   ret->declarator = itarget;\n-  ret->u.pointer_quals = type_quals_attrs;\n+  ret->u.pointer_quals = quals;\n   return ret;\n }\n \n@@ -6760,6 +6776,9 @@ build_null_declspecs (void)\n   ret->long_long_p = false;\n   ret->inline_p = false;\n   ret->thread_p = false;\n+  ret->const_p = false;\n+  ret->volatile_p = false;\n+  ret->restrict_p = false;\n   return ret;\n }\n \n@@ -6770,14 +6789,30 @@ struct c_declspecs *\n declspecs_add_qual (struct c_declspecs *specs, tree qual)\n {\n   enum rid i;\n+  bool dupe = false;\n   specs->non_sc_seen_p = true;\n   gcc_assert (TREE_CODE (qual) == IDENTIFIER_NODE\n \t      && C_IS_RESERVED_WORD (qual));\n   i = C_RID_CODE (qual);\n-  gcc_assert (i == RID_CONST || i == RID_VOLATILE || i == RID_RESTRICT);\n-  if ((specs->specbits & (1 << (int) i)) && pedantic && !flag_isoc99)\n+  switch (i)\n+    {\n+    case RID_CONST:\n+      dupe = specs->const_p;\n+      specs->const_p = true;\n+      break;\n+    case RID_VOLATILE:\n+      dupe = specs->volatile_p;\n+      specs->volatile_p = true;\n+      break;\n+    case RID_RESTRICT:\n+      dupe = specs->restrict_p;\n+      specs->restrict_p = true;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  if (dupe && pedantic && !flag_isoc99)\n     pedwarn (\"duplicate %qs\", IDENTIFIER_POINTER (qual));\n-  specs->specbits |= 1 << (int) i;\n   return specs;\n }\n "}, {"sha": "5d1ec30425c0dcd9c47ebf686f1a32f2a1ef26a1", "filename": "gcc/c-tree.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b53cddc38abb716ac6b300d68cfe841a3a4f265/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b53cddc38abb716ac6b300d68cfe841a3a4f265/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=3b53cddc38abb716ac6b300d68cfe841a3a4f265", "patch": "@@ -180,6 +180,12 @@ struct c_declspecs {\n   BOOL_BITFIELD inline_p : 1;\n   /* Whether \"__thread\" was specified.  */\n   BOOL_BITFIELD thread_p : 1;\n+  /* Whether \"const\" was specified.  */\n+  BOOL_BITFIELD const_p : 1;\n+  /* Whether \"volatile\" was specified.  */\n+  BOOL_BITFIELD volatile_p : 1;\n+  /* Whether \"restrict\" was specified.  */\n+  BOOL_BITFIELD restrict_p : 1;\n };\n \n /* The various kinds of declarators in C.  */\n@@ -225,15 +231,17 @@ struct c_declarator {\n     struct {\n       /* The array dimension, or NULL for [] and [*].  */\n       tree dimen;\n-      /* The qualifiers (and attributes, currently ignored) inside [].  */\n-      struct c_declspecs *quals;\n+      /* The qualifiers inside [].  */\n+      int quals;\n+      /* The attributes (currently ignored) inside [].  */\n+      tree attrs;\n       /* Whether [static] was used.  */\n       BOOL_BITFIELD static_p : 1;\n       /* Whether [*] was used.  */\n       BOOL_BITFIELD vla_unspec_p : 1;\n     } array;\n     /* For pointers, the qualifiers on the pointer type.  */\n-    struct c_declspecs *pointer_quals;\n+    int pointer_quals;\n     /* For attributes.  */\n     tree attrs;\n   } u;\n@@ -297,6 +305,7 @@ extern void c_expand_body (tree);\n extern void c_init_decl_processing (void);\n extern void c_dup_lang_specific_decl (tree);\n extern void c_print_identifier (FILE *, tree, int);\n+extern int quals_from_declspecs (const struct c_declspecs *);\n extern struct c_declarator *build_array_declarator (tree, struct c_declspecs *,\n \t\t\t\t\t\t    bool, bool);\n extern tree build_enumerator (tree, tree);"}, {"sha": "2a7f9d41d2d91b573142610ac9f8d552b012cab4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b53cddc38abb716ac6b300d68cfe841a3a4f265/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b53cddc38abb716ac6b300d68cfe841a3a4f265/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b53cddc38abb716ac6b300d68cfe841a3a4f265", "patch": "@@ -1,3 +1,7 @@\n+2004-09-14  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/declspec-12.c: New test.\n+\n 2004-09-14  Bud Davis  <bdavis9659@comcast.net>\n \t\n \t* gfortran.dg/pr17090.f90: Add directives to test."}, {"sha": "a1373efa3f1a717b3904aa50b483989698b8e68c", "filename": "gcc/testsuite/gcc.dg/declspec-12.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b53cddc38abb716ac6b300d68cfe841a3a4f265/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b53cddc38abb716ac6b300d68cfe841a3a4f265/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-12.c?ref=3b53cddc38abb716ac6b300d68cfe841a3a4f265", "patch": "@@ -0,0 +1,6 @@\n+/* Test type qualifier in empty declaration: OK but useless.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+const struct foo; /* { dg-warning \"warning: useless type qualifier in empty declaration\" } */"}]}