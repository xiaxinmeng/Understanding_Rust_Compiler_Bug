{"sha": "55492b32d768d06b1fee8bcade2ac198c3b8aee4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0OTJiMzJkNzY4ZDA2YjFmZWU4YmNhZGUyYWMxOThjM2I4YWVlNA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cambridge.redhat.com", "date": "2002-01-25T11:44:12Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2002-01-25T11:44:12Z"}, "message": "Allow any general purpose register to hold an SImode (or smaller) value.\n\nFrom-SVN: r49213", "tree": {"sha": "de1fd54a892e46adcca3d1cdf52259d8a8a95486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de1fd54a892e46adcca3d1cdf52259d8a8a95486"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55492b32d768d06b1fee8bcade2ac198c3b8aee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55492b32d768d06b1fee8bcade2ac198c3b8aee4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55492b32d768d06b1fee8bcade2ac198c3b8aee4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55492b32d768d06b1fee8bcade2ac198c3b8aee4/comments", "author": null, "committer": null, "parents": [{"sha": "72c7c913b4bfd72a05b6085b3477201f1cbcac9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c7c913b4bfd72a05b6085b3477201f1cbcac9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72c7c913b4bfd72a05b6085b3477201f1cbcac9a"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "a76845cffaaf209ae749297f10b258ce5483fbb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55492b32d768d06b1fee8bcade2ac198c3b8aee4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55492b32d768d06b1fee8bcade2ac198c3b8aee4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55492b32d768d06b1fee8bcade2ac198c3b8aee4", "patch": "@@ -1,3 +1,8 @@\n+2002-01-25  Nick Clifton  <nickc@cambridge.redhat.com>\n+\n+\t* config/arm/arm.c (arm_hard_regno_mode_ok): Allow any general\n+\tpurpose register to hold an SImode (or smaller) value.\n+\n 2002-01-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* unwind-dw2-fde-glibc.c: If inhibit_libc, use __register_frame*"}, {"sha": "dd823a2b206e8dc4840e5b2b625ace0662c69e32", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55492b32d768d06b1fee8bcade2ac198c3b8aee4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55492b32d768d06b1fee8bcade2ac198c3b8aee4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=55492b32d768d06b1fee8bcade2ac198c3b8aee4", "patch": "@@ -9139,24 +9139,20 @@ arm_hard_regno_mode_ok (regno, mode)\n     return (NUM_REGS (mode) < 2) || (regno < LAST_LO_REGNUM);\n \n   if (regno <= LAST_ARM_REGNUM)\n-    /* If the register is a general purpose ARM register we allow\n-       it only if it not a special register (SP, LR, PC) and only\n-       if there will be enough (non-special) registers to hold the\n-       entire value.  */\n-    {\n-      /* As a special exception we allow an SImode value to be\n-\t \"assigned\" to the stack pointer.  This is not intended\n-\t to actually allow a value to be stored in the SP, but so\n-\t that the stack pointer can be referenced from C code like\n-\t this:\n-\t \n-\t   register char * stack_ptr asm (\"sp\");\n-\n-\t This expression is actually used in newlib...  */\n-      if (mode == SImode && regno == SP_REGNUM)\n-\treturn 1;\n-      return regno < (SP_REGNUM - (unsigned) NUM_REGS (mode));\n-    }\n+    /* We allow an SImode or smaller value to be stored in any\n+       general purpose register.  This does not mean, for example\n+       that GCC will choose to store a variable in the stack pointer\n+       since it is a fixed register.  But it is important to allow\n+       access to these special registers, so that they can be\n+       referenced from C code via the asm assembler alias, eg:\n+\n+          register char * stack_ptr asm (\"sp\");\n+\n+       For any mode requiring more than one register to hold the\n+       value we restrict the choice so that r13, r14, and r15\n+       cannot be part of the register set.  */\n+    return (NUM_REGS (mode) <= 1)\n+      || (regno < (SP_REGNUM - (unsigned) NUM_REGS (mode)));\n \n   if (   regno == FRAME_POINTER_REGNUM\n       || regno == ARG_POINTER_REGNUM)"}]}