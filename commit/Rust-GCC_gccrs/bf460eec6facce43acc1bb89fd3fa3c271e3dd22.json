{"sha": "bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY0NjBlZWM2ZmFjY2U0M2FjYzFiYjg5ZmQzZmEzYzI3MWUzZGQyMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-05-18T01:42:15Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-05-18T01:42:15Z"}, "message": "builtins.c (CASE_MATHFN_REENT): New macro.\n\n\t* builtins.c (CASE_MATHFN_REENT): New macro.\n\t(mathfn_built_in): Use it.\n\t* builtins.def (BUILT_IN_GAMMA_R, BUILT_IN_GAMMAF_R,\n\tBUILT_IN_GAMMAL_R, BUILT_IN_LGAMMA_R, BUILT_IN_LGAMMAF_R,\n\tBUILT_IN_LGAMMAL_R): New.\n\t* doc/extend.texi: Document new builtins.\n\ntestsuite:\n\t* gcc.dg/builtins-1.c: Test reentrant gamma functions.\n\nFrom-SVN: r124821", "tree": {"sha": "9b7cc1714bd2bf985cd41854074a5e4fdf0d9365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b7cc1714bd2bf985cd41854074a5e4fdf0d9365"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/comments", "author": null, "committer": null, "parents": [{"sha": "ea91f95764aaa7a1ab8ceb78e81414dc28fb6b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea91f95764aaa7a1ab8ceb78e81414dc28fb6b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea91f95764aaa7a1ab8ceb78e81414dc28fb6b42"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "f35568377b0c927f0c8071dc6403d18e5e1d51ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "patch": "@@ -1,5 +1,12 @@\n 2007-05-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* builtins.c (CASE_MATHFN_REENT): New macro.\n+\t(mathfn_built_in): Use it.\n+\t* builtins.def (BUILT_IN_GAMMA_R, BUILT_IN_GAMMAF_R,\n+\tBUILT_IN_GAMMAL_R, BUILT_IN_LGAMMA_R, BUILT_IN_LGAMMAF_R,\n+\tBUILT_IN_LGAMMAL_R): New.\n+\t* doc/extend.texi: Document new builtins.\n+\n \tPR middle-end/31796\n \t* builtins.c (do_mpfr_remquo): New.\n \t(fold_builtin_2): Handle BUILT_IN_DREM/BUILT_IN_REMAINDER."}, {"sha": "de62d15b3f4a18d4c8579338908e5526e080c67a", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "patch": "@@ -1653,6 +1653,11 @@ expand_builtin_classify_type (tree exp)\n   case BUILT_IN_MATHFN: case BUILT_IN_MATHFN##F: case BUILT_IN_MATHFN##L: \\\n   fcode = BUILT_IN_MATHFN; fcodef = BUILT_IN_MATHFN##F ; \\\n   fcodel = BUILT_IN_MATHFN##L ; break;\n+/* Similar to above, but appends _R after any F/L suffix.  */\n+#define CASE_MATHFN_REENT(BUILT_IN_MATHFN) \\\n+  case BUILT_IN_MATHFN##_R: case BUILT_IN_MATHFN##F_R: case BUILT_IN_MATHFN##L_R: \\\n+  fcode = BUILT_IN_MATHFN##_R; fcodef = BUILT_IN_MATHFN##F_R ; \\\n+  fcodel = BUILT_IN_MATHFN##L_R ; break;\n \n /* Return mathematic function equivalent to FN but operating directly\n    on TYPE, if available.  If we can't do the conversion, return zero.  */\n@@ -1692,6 +1697,7 @@ mathfn_built_in (tree type, enum built_in_function fn)\n       CASE_MATHFN (BUILT_IN_FMOD)\n       CASE_MATHFN (BUILT_IN_FREXP)\n       CASE_MATHFN (BUILT_IN_GAMMA)\n+      CASE_MATHFN_REENT (BUILT_IN_GAMMA) /* GAMMA_R */\n       CASE_MATHFN (BUILT_IN_HUGE_VAL)\n       CASE_MATHFN (BUILT_IN_HYPOT)\n       CASE_MATHFN (BUILT_IN_ILOGB)\n@@ -1704,6 +1710,7 @@ mathfn_built_in (tree type, enum built_in_function fn)\n       CASE_MATHFN (BUILT_IN_LDEXP)\n       CASE_MATHFN (BUILT_IN_LFLOOR)\n       CASE_MATHFN (BUILT_IN_LGAMMA)\n+      CASE_MATHFN_REENT (BUILT_IN_LGAMMA) /* LGAMMA_R */\n       CASE_MATHFN (BUILT_IN_LLCEIL)\n       CASE_MATHFN (BUILT_IN_LLFLOOR)\n       CASE_MATHFN (BUILT_IN_LLRINT)"}, {"sha": "7289fa6f9a804fa9f43124f712f862a60e55aa2f", "filename": "gcc/builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "patch": "@@ -258,6 +258,9 @@ DEF_C99_C90RES_BUILTIN (BUILT_IN_FREXPL, \"frexpl\", BT_FN_LONGDOUBLE_LONGDOUBLE_I\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMA, \"gamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAF, \"gammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAL, \"gammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_STORE)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMA_R, \"gamma_r\", BT_FN_DOUBLE_DOUBLE_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAF_R, \"gammaf_r\", BT_FN_FLOAT_FLOAT_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_GAMMAL_R, \"gammal_r\", BT_FN_LONGDOUBLE_LONGDOUBLE_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VAL, \"huge_val\", BT_FN_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALF, \"huge_valf\", BT_FN_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_HUGE_VALL, \"huge_vall\", BT_FN_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)\n@@ -294,6 +297,9 @@ DEF_GCC_BUILTIN        (BUILT_IN_LFLOORL, \"lfloorl\", BT_FN_LONG_LONGDOUBLE, ATTR\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMA, \"lgamma\", BT_FN_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMAF, \"lgammaf\", BT_FN_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_C99_BUILTIN        (BUILT_IN_LGAMMAL, \"lgammal\", BT_FN_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING_STORE)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_LGAMMA_R, \"lgamma_r\", BT_FN_DOUBLE_DOUBLE_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_LGAMMAF_R, \"lgammaf_r\", BT_FN_FLOAT_FLOAT_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_LGAMMAL_R, \"lgammal_r\", BT_FN_LONGDOUBLE_LONGDOUBLE_INTPTR, ATTR_MATHFN_FPROUNDING_STORE)\n DEF_GCC_BUILTIN        (BUILT_IN_LLCEIL, \"llceil\", BT_FN_LONGLONG_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_LLCEILF, \"llceilf\", BT_FN_LONGLONG_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_LLCEILL, \"llceill\", BT_FN_LONGLONG_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "2a310571b71d9d4cc6fe5fe6de5b562d031a8ffb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "patch": "@@ -5521,6 +5521,9 @@ should be called and the @var{flag} argument passed to it.\n @findex gamma\n @findex gammaf\n @findex gammal\n+@findex gamma_r\n+@findex gammaf_r\n+@findex gammal_r\n @findex gettext\n @findex hypot\n @findex hypotf\n@@ -5571,6 +5574,9 @@ should be called and the @var{flag} argument passed to it.\n @findex lgamma\n @findex lgammaf\n @findex lgammal\n+@findex lgamma_r\n+@findex lgammaf_r\n+@findex lgammal_r\n @findex llabs\n @findex llrint\n @findex llrintf\n@@ -5752,20 +5758,22 @@ Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n @code{_exit}, @code{alloca}, @code{bcmp}, @code{bzero},\n @code{dcgettext}, @code{dgettext}, @code{dremf}, @code{dreml},\n @code{drem}, @code{exp10f}, @code{exp10l}, @code{exp10}, @code{ffsll},\n-@code{ffsl}, @code{ffs}, @code{fprintf_unlocked}, @code{fputs_unlocked},\n-@code{gammaf}, @code{gammal}, @code{gamma}, @code{gettext},\n+@code{ffsl}, @code{ffs}, @code{fprintf_unlocked},\n+@code{fputs_unlocked}, @code{gammaf}, @code{gammal}, @code{gamma},\n+@code{gammaf_r}, @code{gammal_r}, @code{gamma_r}, @code{gettext},\n @code{index}, @code{isascii}, @code{j0f}, @code{j0l}, @code{j0},\n @code{j1f}, @code{j1l}, @code{j1}, @code{jnf}, @code{jnl}, @code{jn},\n-@code{mempcpy}, @code{pow10f}, @code{pow10l}, @code{pow10},\n-@code{printf_unlocked}, @code{rindex}, @code{scalbf}, @code{scalbl},\n-@code{scalb}, @code{signbit}, @code{signbitf}, @code{signbitl},\n-@code{signbitd32}, @code{signbitd64}, @code{signbitd128},\n-@code{significandf}, @code{significandl}, @code{significand},\n-@code{sincosf}, @code{sincosl}, @code{sincos}, @code{stpcpy},\n-@code{stpncpy}, @code{strcasecmp}, @code{strdup}, @code{strfmon},\n-@code{strncasecmp}, @code{strndup}, @code{toascii}, @code{y0f},\n-@code{y0l}, @code{y0}, @code{y1f}, @code{y1l}, @code{y1}, @code{ynf},\n-@code{ynl} and @code{yn}\n+@code{lgammaf_r}, @code{lgammal_r}, @code{lgamma_r}, @code{mempcpy},\n+@code{pow10f}, @code{pow10l}, @code{pow10}, @code{printf_unlocked},\n+@code{rindex}, @code{scalbf}, @code{scalbl}, @code{scalb},\n+@code{signbit}, @code{signbitf}, @code{signbitl}, @code{signbitd32},\n+@code{signbitd64}, @code{signbitd128}, @code{significandf},\n+@code{significandl}, @code{significand}, @code{sincosf},\n+@code{sincosl}, @code{sincos}, @code{stpcpy}, @code{stpncpy},\n+@code{strcasecmp}, @code{strdup}, @code{strfmon}, @code{strncasecmp},\n+@code{strndup}, @code{toascii}, @code{y0f}, @code{y0l}, @code{y0},\n+@code{y1f}, @code{y1l}, @code{y1}, @code{ynf}, @code{ynl} and\n+@code{yn}\n may be handled as built-in functions.\n All these functions have corresponding versions\n prefixed with @code{__builtin_}, which may be used even in strict C89"}, {"sha": "905f2699636693d56ab0221ab78d5c4a312f8655", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "patch": "@@ -1,5 +1,7 @@\n 2007-05-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* gcc.dg/builtins-1.c: Test reentrant gamma functions.\n+\n \t* gcc.dg/torture/builtin-math-2.c: Add tests for remquo, remainder\n \tand drem.\n \t* gcc.dg/torture/builtin-math-4.c: Likewise."}, {"sha": "573a879bd0099a54fef8669282413c5a1e72b159", "filename": "gcc/testsuite/gcc.dg/builtins-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf460eec6facce43acc1bb89fd3fa3c271e3dd22/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c?ref=bf460eec6facce43acc1bb89fd3fa3c271e3dd22", "patch": "@@ -44,6 +44,14 @@ double test_##FN(double x, TYPE y) { return __builtin_##FN(x, y); } \\\n float test_##FN##f(float x, TYPE y) { return __builtin_##FN##f(x, y); } \\\n long double test_##FN##l(long double x, TYPE y) { return __builtin_##FN##l(x, y); } \n \n+/* Test FP functions taking two arguments, the second argument is of a\n+   supplied type.  The function is named reentrant style, meaning \"_r\"\n+   appears after the possible f/l suffix.  */\n+#define FPTEST2ARG2_REENT(FN, TYPE) \\\n+double test_##FN##_r(double x, TYPE y) { return __builtin_##FN##_r(x, y); } \\\n+float test_##FN##f_r(float x, TYPE y) { return __builtin_##FN##f_r(x, y); } \\\n+long double test_##FN##l_r(long double x, TYPE y) { return __builtin_##FN##l_r(x, y); } \n+\n /* Test FP functions taking two arguments, the second argument is a\n    FP pointer.  */\n #define FPTEST2FPP2(FN) \\\n@@ -132,6 +140,7 @@ FPTEST2     (fmin)\n FPTEST2     (fmod)\n FPTEST2ARG2 (frexp, int *)\n FPTEST1     (gamma)\n+FPTEST2ARG2_REENT (gamma, int *) /* gamma_r */\n FPTEST0     (huge_val)\n FPTEST2     (hypot)\n FPTEST1     (ilogb)\n@@ -141,6 +150,7 @@ FPTEST1     (j1)\n FPTEST2ARG1 (jn, int)\n FPTEST2ARG2 (ldexp, int)\n FPTEST1     (lgamma)\n+FPTEST2ARG2_REENT (lgamma, int *) /* lgamma_r */\n FPTEST1RET  (llrint, long long)\n FPTEST1RET  (llround, long long)\n FPTEST1     (log)"}]}