{"sha": "ecf3151a7b05ef0ce14104406aa3d98a2c0601ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNmMzE1MWE3YjA1ZWYwY2UxNDEwNDQwNmFhM2Q5OGEyYzA2MDFlZA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-12-19T17:39:15Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-12-19T17:39:15Z"}, "message": "Better spill failure messages.\n\nFrom-SVN: r31026", "tree": {"sha": "d299043f0d54e22d44788992f50830381f45d915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d299043f0d54e22d44788992f50830381f45d915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecf3151a7b05ef0ce14104406aa3d98a2c0601ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf3151a7b05ef0ce14104406aa3d98a2c0601ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecf3151a7b05ef0ce14104406aa3d98a2c0601ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecf3151a7b05ef0ce14104406aa3d98a2c0601ed/comments", "author": null, "committer": null, "parents": [{"sha": "7cfc1daaf80e61348668c0a2e97399993dd7d8bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cfc1daaf80e61348668c0a2e97399993dd7d8bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cfc1daaf80e61348668c0a2e97399993dd7d8bd"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "5432e5bdb3a986a42d49d0a82d65afcbd9c5fdda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecf3151a7b05ef0ce14104406aa3d98a2c0601ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecf3151a7b05ef0ce14104406aa3d98a2c0601ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecf3151a7b05ef0ce14104406aa3d98a2c0601ed", "patch": "@@ -1,3 +1,8 @@\n+1999-12-19  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* reload1.c (spill_failure): Take class of failed reload as argument\n+\tand print it.  Caller changed.\n+\t\t\n Sun Dec 19 07:50:42 1999  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* rs6000.h (SUBTARGET_DEFAULT): New macro."}, {"sha": "2a6f9cc6ae999b912d2e6d8df3c00245a428f7ca", "filename": "gcc/reload1.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecf3151a7b05ef0ce14104406aa3d98a2c0601ed/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecf3151a7b05ef0ce14104406aa3d98a2c0601ed/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=ecf3151a7b05ef0ce14104406aa3d98a2c0601ed", "patch": "@@ -375,7 +375,7 @@ static void find_reload_regs\t\tPROTO((struct insn_chain *, FILE *));\n static void select_reload_regs\t\tPROTO((FILE *));\n static void delete_caller_save_insns\tPROTO((void));\n \n-static void spill_failure\t\tPROTO((rtx));\n+static void spill_failure\t\tPROTO((rtx, enum reg_class));\n static void count_spilled_pseudo\tPROTO((int, int, int));\n static void delete_dead_insn\t\tPROTO((rtx));\n static void alter_reg  \t\t\tPROTO((int, int));\n@@ -1720,7 +1720,7 @@ find_reload_regs (chain, dumpfile)\n \t  && rld[r].regno == -1)\n \tif (! find_reg (chain, i, dumpfile))\n \t  {\n-\t    spill_failure (chain->insn);\n+\t    spill_failure (chain->insn, rld[r].class);\n \t    failure = 1;\n \t    return;\n \t  }\n@@ -1787,13 +1787,20 @@ delete_caller_save_insns ()\n    INSN should be one of the insns which needed this particular spill reg.  */\n \n static void\n-spill_failure (insn)\n+spill_failure (insn, class)\n      rtx insn;\n+     enum reg_class class;\n {\n+  static const char *const reg_class_names[] = REG_CLASS_NAMES;\n   if (asm_noperands (PATTERN (insn)) >= 0)\n-    error_for_asm (insn, \"`asm' needs too many reloads\");\n+    error_for_asm (insn, \"Can't find a register in class `%s' while reloading `asm'.\",\n+\t\t   reg_class_names[class]);\n   else\n-    fatal_insn (\"Unable to find a register to spill.\", insn);\n+    {\n+      error (\"Unable to find a register to spill in class `%s'.\",\n+\t     reg_class_names[class]);\n+      fatal_insn (\"This is the insn:\", insn);\n+    }\n }\n \f\n /* Delete an unneeded INSN and any previous insns who sole purpose is loading"}]}