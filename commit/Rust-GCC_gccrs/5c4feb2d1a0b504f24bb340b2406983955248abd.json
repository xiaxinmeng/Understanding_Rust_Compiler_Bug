{"sha": "5c4feb2d1a0b504f24bb340b2406983955248abd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM0ZmViMmQxYTBiNTA0ZjI0YmIzNDBiMjQwNjk4Mzk1NTI0OGFiZA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2017-07-05T12:28:19Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2017-07-05T12:28:19Z"}, "message": "re PR target/81305 ([avr] avrtiny uses LDS for SREG in ISR routines which is out of range of LDS.)\n\ngcc/\n\tPR target/81305\n\t* config/avr/avr.c (avr_out_movhi_mr_r_xmega) [CONSTANT_ADDRESS_P]:\n\tDon't depend on \"optimize > 0\".\n\t(out_movhi_r_mr, out_movqi_mr_r): Same.\n\t(out_movhi_mr_r, out_movqi_r_mr): Same.\n\t(avr_address_cost) [CONSTANT_ADDRESS_P]: Don't depend cost for\n\tio_address_operand on \"optimize > 0\".\n\t* testsuite/gcc.target/avr/torture/isr-01-simple.c: New test.\n\t* testsuite/gcc.target/avr/torture/isr-02-call.c: New test.\n\t* testsuite/gcc.target/avr/torture/isr-03-fixed.c: New test.\n\nFrom-SVN: r249995", "tree": {"sha": "ece651266df57e7f951b40165360f0a45669177b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ece651266df57e7f951b40165360f0a45669177b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c4feb2d1a0b504f24bb340b2406983955248abd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4feb2d1a0b504f24bb340b2406983955248abd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c4feb2d1a0b504f24bb340b2406983955248abd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4feb2d1a0b504f24bb340b2406983955248abd/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8745cc231e043dc9e455ea2a5897d30c14fd95a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8745cc231e043dc9e455ea2a5897d30c14fd95a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8745cc231e043dc9e455ea2a5897d30c14fd95a"}], "stats": {"total": 333, "additions": 324, "deletions": 9}, "files": [{"sha": "121f6ab441d7e129c78f303bd88a54602a3c8605", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4feb2d1a0b504f24bb340b2406983955248abd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4feb2d1a0b504f24bb340b2406983955248abd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c4feb2d1a0b504f24bb340b2406983955248abd", "patch": "@@ -1,3 +1,16 @@\n+2017-07-05  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/81305\n+\t* config/avr/avr.c (avr_out_movhi_mr_r_xmega) [CONSTANT_ADDRESS_P]:\n+\tDon't depend on \"optimize > 0\".\n+\t(out_movhi_r_mr, out_movqi_mr_r): Same.\n+\t(out_movhi_mr_r, out_movqi_r_mr): Same.\n+\t(avr_address_cost) [CONSTANT_ADDRESS_P]: Don't depend cost for\n+\tio_address_operand on \"optimize > 0\".\n+\t* testsuite/gcc.target/avr/torture/isr-01-simple.c: New test.\n+\t* testsuite/gcc.target/avr/torture/isr-02-call.c: New test.\n+\t* testsuite/gcc.target/avr/torture/isr-03-fixed.c: New test.\n+\n 2017-07-05  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-loop-distribution.c: Add general explanantion on the pass."}, {"sha": "030a9d9ee97606deb01bead9cd5d289318890b30", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4feb2d1a0b504f24bb340b2406983955248abd/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4feb2d1a0b504f24bb340b2406983955248abd/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=5c4feb2d1a0b504f24bb340b2406983955248abd", "patch": "@@ -3820,7 +3820,7 @@ out_movqi_r_mr (rtx_insn *insn, rtx op[], int *plen)\n   if (CONSTANT_ADDRESS_P (x))\n     {\n       int n_words = AVR_TINY ? 1 : 2;\n-      return optimize > 0 && io_address_operand (x, QImode)\n+      return io_address_operand (x, QImode)\n         ? avr_asm_len (\"in %0,%i1\", op, plen, -1)\n         : avr_asm_len (\"lds %0,%m1\", op, plen, -n_words);\n     }\n@@ -4088,7 +4088,7 @@ out_movhi_r_mr (rtx_insn *insn, rtx op[], int *plen)\n   else if (CONSTANT_ADDRESS_P (base))\n     {\n       int n_words = AVR_TINY ? 2 : 4;\n-      return optimize > 0 && io_address_operand (base, HImode)\n+      return io_address_operand (base, HImode)\n         ? avr_asm_len (\"in %A0,%i1\" CR_TAB\n                        \"in %B0,%i1+1\", op, plen, -2)\n \n@@ -5215,7 +5215,7 @@ out_movqi_mr_r (rtx_insn *insn, rtx op[], int *plen)\n   if (CONSTANT_ADDRESS_P (x))\n     {\n       int n_words = AVR_TINY ? 1 : 2;\n-      return optimize > 0 && io_address_operand (x, QImode)\n+      return io_address_operand (x, QImode)\n         ? avr_asm_len (\"out %i0,%1\", op, plen, -1)\n         : avr_asm_len (\"sts %m0,%1\", op, plen, -n_words);\n     }\n@@ -5291,13 +5291,12 @@ avr_out_movhi_mr_r_xmega (rtx_insn *insn, rtx op[], int *plen)\n \n   if (CONSTANT_ADDRESS_P (base))\n     {\n-      int n_words = AVR_TINY ? 2 : 4;\n-      return optimize > 0 && io_address_operand (base, HImode)\n+      return io_address_operand (base, HImode)\n         ? avr_asm_len (\"out %i0,%A1\" CR_TAB\n                        \"out %i0+1,%B1\", op, plen, -2)\n \n         : avr_asm_len (\"sts %m0,%A1\" CR_TAB\n-                       \"sts %m0+1,%B1\", op, plen, -n_words);\n+                       \"sts %m0+1,%B1\", op, plen, -4);\n     }\n \n   if (reg_base > 0)\n@@ -5477,7 +5476,7 @@ out_movhi_mr_r (rtx_insn *insn, rtx op[], int *plen)\n   if (CONSTANT_ADDRESS_P (base))\n     {\n       int n_words = AVR_TINY ? 2 : 4;\n-      return optimize > 0 && io_address_operand (base, HImode)\n+      return io_address_operand (base, HImode)\n         ? avr_asm_len (\"out %i0+1,%B1\" CR_TAB\n                        \"out %i0,%A1\", op, plen, -2)\n \n@@ -11367,8 +11366,7 @@ avr_address_cost (rtx x, machine_mode mode ATTRIBUTE_UNUSED,\n     }\n   else if (CONSTANT_ADDRESS_P (x))\n     {\n-      if (optimize > 0\n-          && io_address_operand (x, QImode))\n+      if (io_address_operand (x, QImode))\n         cost = 2;\n \n       if (AVR_TINY"}, {"sha": "271d0cf47e954656d2d4822cfdc942e46f09bccf", "filename": "gcc/testsuite/gcc.target/avr/torture/isr-01-simple.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4feb2d1a0b504f24bb340b2406983955248abd/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fisr-01-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4feb2d1a0b504f24bb340b2406983955248abd/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fisr-01-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fisr-01-simple.c?ref=5c4feb2d1a0b504f24bb340b2406983955248abd", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include \"../isr-test.h\"\n+\n+int volatile v;\n+\n+/**********************************************************************/\n+\n+ISR (1, signal)\n+{\n+}\n+\n+MK_RUN_ISR (1, 0)\n+\n+void test1 (void)\n+{\n+  run_isr_1();\n+}\n+\n+/**********************************************************************/\n+\n+ISR (2, signal)\n+{\n+  v++;\n+}\n+\n+MK_RUN_ISR (2, 0)\n+\n+void test2 (void)\n+{\n+  v = 0;\n+  run_isr_2();\n+  if (v != 1)\n+    __builtin_abort();\n+}\n+\n+\n+/**********************************************************************/\n+\n+ISR (3, signal)\n+{\n+  __asm __volatile__ (\"$ lds  r27, v\"\n+                      \"$ swap r27\"\n+                      \"$ sts  v, r27\"\n+                      ::: \"memory\", \"r27\");\n+}\n+\n+MK_RUN_ISR (3, 0)\n+\n+void test3 (void)\n+{\n+  run_isr_3();\n+  if (v != 0x10)\n+    __builtin_abort();\n+}\n+\n+/**********************************************************************/\n+\n+ISR (4, signal)\n+{\n+  __asm __volatile__ (\"sts v,__zero_reg__\" ::: \"memory\");\n+}\n+\n+MK_RUN_ISR (4, 0)\n+\n+void test4 (void)\n+{\n+  run_isr_4();\n+  if (v != 0)\n+    __builtin_abort();\n+}\n+\n+/**********************************************************************/\n+\n+ISR (5, signal)\n+{\n+  __asm __volatile__ (\"clt\");\n+}\n+\n+MK_RUN_ISR (5, 0)\n+\n+void test5 (void)\n+{\n+  run_isr_5();\n+}\n+\n+/**********************************************************************/\n+\n+int main (void)\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+  return 0;\n+}"}, {"sha": "be4f22ebb35da52f0bec840b6ae6c75f25ac2ebc", "filename": "gcc/testsuite/gcc.target/avr/torture/isr-02-call.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4feb2d1a0b504f24bb340b2406983955248abd/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fisr-02-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4feb2d1a0b504f24bb340b2406983955248abd/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fisr-02-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fisr-02-call.c?ref=5c4feb2d1a0b504f24bb340b2406983955248abd", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include \"../isr-test.h\"\n+\n+int volatile v;\n+\n+__attribute__((noinline,noclone))\n+void inc_v (void)\n+{\n+  v++;\n+}\n+\n+/**********************************************************************/\n+\n+ISR (1, signal)\n+{\n+  inc_v();\n+}\n+\n+MK_RUN_ISR (1, 0)\n+\n+void test1 (void)\n+{\n+  run_isr_1();\n+  if (v != 1)\n+    __builtin_abort();\n+}\n+\n+/**********************************************************************/\n+\n+ISR (2, signal)\n+{\n+  if (v == 1)\n+    inc_v();\n+  else\n+    v += 2;\n+}\n+\n+MK_RUN_ISR (2, 0)\n+\n+void test2 (void)\n+{\n+  run_isr_2();\n+  if (v != 2)\n+    __builtin_abort();\n+  run_isr_2();\n+  if (v != 4)\n+    __builtin_abort();\n+}\n+\n+\n+/**********************************************************************/\n+\n+int main (void)\n+{\n+  test1();\n+  test2();\n+  return 0;\n+}"}, {"sha": "5606225aebc44329df235d555cb799a41738a98a", "filename": "gcc/testsuite/gcc.target/avr/torture/isr-03-fixed.c", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c4feb2d1a0b504f24bb340b2406983955248abd/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fisr-03-fixed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c4feb2d1a0b504f24bb340b2406983955248abd/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fisr-03-fixed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Ftorture%2Fisr-03-fixed.c?ref=5c4feb2d1a0b504f24bb340b2406983955248abd", "patch": "@@ -0,0 +1,146 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99 -fno-lto -fno-toplevel-reorder\" } */\n+\n+// No LTO for now due to PR lto/68384.\n+\n+#ifdef __AVR_TINY__\n+unsigned char reg2;\n+#else\n+register unsigned char reg2 __asm(\"r2\");\n+#endif\n+\n+#include \"../isr-test.h\"\n+\n+#define SET_REG(reg,val)                        \\\n+  do {                                          \\\n+    reg = (val);                                \\\n+    __asm __volatile__(\"\" : \"+r\" (reg));        \\\n+  } while (0)                                   \\\n+\n+#define GET_REG(reg)                            \\\n+  ({                                            \\\n+    __asm __volatile__(\"\" : \"+r\" (reg));        \\\n+    reg;                                        \\\n+  })\n+\n+/**********************************************************************/\n+\n+ISR (1, signal)\n+{\n+  reg2++;\n+}\n+\n+MK_RUN_ISR (1, 1ul << 2)\n+\n+void test1 (void)\n+{\n+  SET_REG (reg2, 0);\n+  run_isr_1();\n+  if (GET_REG (reg2) != 1)\n+    __builtin_abort();\n+}\n+\n+/**********************************************************************/\n+\n+__attribute__((noinline,noclone))\n+void inc_r2 (void)\n+{\n+  reg2++;\n+}\n+\n+ISR (2, signal)\n+{\n+  inc_r2 ();\n+}\n+\n+MK_RUN_ISR (2, 1ul << 2)\n+\n+void test2 (void)\n+{\n+  run_isr_2();\n+  if (GET_REG (reg2) != 2)\n+    __builtin_abort();\n+}\n+\n+\n+/**********************************************************************/\n+\n+ISR (3, signal)\n+{\n+#ifndef __AVR_TINY__\n+  register char r4 __asm (\"r4\");\n+  __asm __volatile (\"inc %0\" : \"+r\" (r4));\n+  __asm __volatile (\"inc r5\" ::: \"r5\");\n+#endif\n+}\n+\n+MK_RUN_ISR (3, 0)\n+\n+void test3 (void)\n+{\n+  run_isr_3();\n+}\n+\n+\n+/**********************************************************************/\n+\n+#define CLOBB(reg)                                 \\\n+  do {                                             \\\n+    __asm __volatile__ (\"inc \" #reg ::: #reg);     \\\n+  } while (0)\n+\n+ISR (4, signal)\n+{\n+  char volatile v;\n+  v = 1;\n+\n+#ifndef __AVR_TINY__\n+  CLOBB (r3);\n+  CLOBB (r4);\n+  CLOBB (r5);\n+  CLOBB (r6);\n+  CLOBB (r7);\n+  CLOBB (r8);\n+  CLOBB (r9);\n+  CLOBB (r10);\n+  CLOBB (r11);\n+  CLOBB (r12);\n+  CLOBB (r13);\n+  CLOBB (r14);\n+  CLOBB (r15);\n+  CLOBB (r16);\n+  CLOBB (r17);\n+#endif\n+\n+  CLOBB (r18);\n+  CLOBB (r19);\n+  CLOBB (r20);\n+  CLOBB (r21);\n+  CLOBB (r22);\n+  CLOBB (r23);\n+  CLOBB (r24);\n+  CLOBB (r25);\n+  CLOBB (r26);\n+  CLOBB (r27);\n+  CLOBB (r30);\n+  CLOBB (r31);\n+}\n+\n+MK_RUN_ISR (4, 0)\n+\n+void test4 (void)\n+{\n+  run_isr_4();\n+}\n+\n+\n+/**********************************************************************/\n+\n+int main (void)\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  return 0;\n+}"}]}