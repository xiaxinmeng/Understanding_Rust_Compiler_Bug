{"sha": "7948a9eac2804420e87161f936fead7287008502", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk0OGE5ZWFjMjgwNDQyMGU4NzE2MWY5MzZmZWFkNzI4NzAwODUwMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-25T03:47:31Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-25T03:47:31Z"}, "message": "h8300-protos.h: Add a prototype for compute_mov_length.\n\n\t* config/h8300/h8300-protos.h: Add a prototype for\n\tcompute_mov_length.\n\t* config/h8300/h8300.c (compute_mov_length): New.\n\t* config/h8300/h8300.md (*movqi_h8300): Use it.\n\t(*movqi_h8300hs): Likewise.\n\t(movstrictqi): Likewise.\n\t(*movhi_h8300): Likewise.\n\t(*movhi_h8300hs): Likewise.\n\t(movstricthi): Likewise.\n\t(*movsi_h8300): Likewise.\n\t(*movsf_h8300): Likewise.\n\t(*movsi_h8300hs): Likewise.\n\t(*movsf_h8300hs): Likewise.\n\nFrom-SVN: r68454", "tree": {"sha": "0bf426478719158e95f27032408a66d645db9ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf426478719158e95f27032408a66d645db9ed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7948a9eac2804420e87161f936fead7287008502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7948a9eac2804420e87161f936fead7287008502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7948a9eac2804420e87161f936fead7287008502", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7948a9eac2804420e87161f936fead7287008502/comments", "author": null, "committer": null, "parents": [{"sha": "e5b0e711e87da60282d32ee364bfc9ca77fa6360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b0e711e87da60282d32ee364bfc9ca77fa6360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b0e711e87da60282d32ee364bfc9ca77fa6360"}], "stats": {"total": 392, "additions": 284, "deletions": 108}, "files": [{"sha": "d443295007892df8403732bc46a442eab3f67069", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7948a9eac2804420e87161f936fead7287008502/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7948a9eac2804420e87161f936fead7287008502/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7948a9eac2804420e87161f936fead7287008502", "patch": "@@ -1,3 +1,19 @@\n+2003-06-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Add a prototype for\n+\tcompute_mov_length.\n+\t* config/h8300/h8300.c (compute_mov_length): New.\n+\t* config/h8300/h8300.md (*movqi_h8300): Use it.\n+\t(*movqi_h8300hs): Likewise.\n+\t(movstrictqi): Likewise.\n+\t(*movhi_h8300): Likewise.\n+\t(*movhi_h8300hs): Likewise.\n+\t(movstricthi): Likewise.\n+\t(*movsi_h8300): Likewise.\n+\t(*movsf_h8300): Likewise.\n+\t(*movsi_h8300hs): Likewise.\n+\t(*movsf_h8300hs): Likewise.\n+\n 2003-06-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* jump.c (next_nondeleted_insn): Remove."}, {"sha": "e7ddff8f1c32e745fb36459b8e1a1d6ce3574a51", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7948a9eac2804420e87161f936fead7287008502/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7948a9eac2804420e87161f936fead7287008502/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=7948a9eac2804420e87161f936fead7287008502", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Declarations for functions used in insn-output.c.  */\n #ifdef RTX_CODE\n+extern unsigned int compute_mov_length (rtx *);\n extern const char *output_plussi (rtx *);\n extern unsigned int compute_plussi_length (rtx *);\n extern int compute_plussi_cc (rtx *);"}, {"sha": "3a5334bf42c17debaa240aa4139777bbd70d1ed1", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 249, "deletions": 95, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7948a9eac2804420e87161f936fead7287008502/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7948a9eac2804420e87161f936fead7287008502/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=7948a9eac2804420e87161f936fead7287008502", "patch": "@@ -1806,6 +1806,255 @@ bit_operator (rtx x, enum machine_mode mode ATTRIBUTE_UNUSED)\n \t  || code == IOR);\n }\n \f\n+/* Return the length of mov instruction.  */\n+\n+unsigned int\n+compute_mov_length (rtx *operands)\n+{\n+  /* If the mov instruction involves a memory operand, we compute the\n+     length, assuming the largest addressing mode is used, and then\n+     adjust later in the function.  Otherwise, we compute and return\n+     the exact length in one step.  */\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+  rtx dest = operands[0];\n+  rtx src = operands[1];\n+  rtx addr;\n+\n+  if (GET_CODE (src) == MEM)\n+    addr = XEXP (src, 0);\n+  else if (GET_CODE (dest) == MEM)\n+    addr = XEXP (dest, 0);\n+  else\n+    addr = NULL_RTX;\n+\n+  if (TARGET_H8300)\n+    {\n+      unsigned int base_length;\n+\n+      switch (mode)\n+\t{\n+\tcase QImode:\n+\t  if (addr == NULL_RTX)\n+\t    return 2;\n+\n+\t  /* The eightbit addressing is available only in QImode, so\n+\t     go ahead and take care of it.  */\n+\t  if (h8300_eightbit_constant_address_p (addr))\n+\t    return 2;\n+\n+\t  base_length = 4;\n+\t  break;\n+\n+\tcase HImode:\n+\t  if (addr == NULL_RTX)\n+\t    {\n+\t      if (REG_P (src))\n+\t\treturn 2;\n+\n+\t      if (src == const0_rtx)\n+\t\treturn 2;\n+\n+\t      return 4;\n+\t    }\n+\n+\t  base_length = 4;\n+\t  break;\n+\n+\tcase SImode:\n+\t  if (addr == NULL_RTX)\n+\t    {\n+\t      if (REG_P (src))\n+\t\treturn 4;\n+\n+\t      if (GET_CODE (src) == CONST_INT)\n+\t\t{\n+\t\t  if (src == const0_rtx)\n+\t\t    return 4;\n+\n+\t\t  if ((INTVAL (src) & 0xffff) == 0)\n+\t\t    return 6;\n+\n+\t\t  if ((INTVAL (src) & 0xffff) == 0)\n+\t\t    return 6;\n+\t\t}\n+\t      return 8;\n+\t    }\n+\n+\t  base_length = 8;\n+\t  break;\n+\n+\tcase SFmode:\n+\t  if (addr == NULL_RTX)\n+\t    {\n+\t      if (REG_P (src))\n+\t\treturn 4;\n+\n+\t      if (src == const0_rtx)\n+\t\treturn 2;\n+\n+\t      return 6;\n+\t    }\n+\n+\t  base_length = 8;\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+\n+      /* Adjust the length based on the addressing mode used.\n+\t Specifically, we subtract the difference between the actual\n+\t length and the longest one, which is @(d:16,Rs).  For SImode\n+\t and SFmode, we double the adjustment because two mov.w are\n+\t used to do the job.  */\n+\n+      /* @Rs+ and @-Rd are 2 bytes shorter than the longest.  */\n+      if (GET_CODE (addr) == PRE_DEC\n+\t  || GET_CODE (addr) == POST_INC)\n+\t{\n+\t  if (mode == QImode || mode == HImode)\n+\t    return base_length - 2;\n+\t  else\n+\t    /* In SImode and SFmode, we use two mov.w instructions, so\n+\t       double the adustment.  */\n+\t    return base_length - 4;\n+\t}\n+\n+      /* @Rs and @Rd are 2 bytes shorter than the longest.  Note that\n+\t in SImode and SFmode, the second mov.w involves an address\n+\t with displacement, namely @(2,Rs) or @(2,Rd), so we subtract\n+\t only 2 bytes.  */\n+      if (GET_CODE (addr) == REG)\n+\treturn base_length - 2;\n+\n+      return base_length;\n+    }\n+  else\n+    {\n+      unsigned int base_length;\n+\n+      switch (mode)\n+\t{\n+\tcase QImode:\n+\t  if (addr == NULL_RTX)\n+\t    return 2;\n+\n+\t  /* The eightbit addressing is available only in QImode, so\n+\t     go ahead and take care of it.  */\n+\t  if (h8300_eightbit_constant_address_p (addr))\n+\t    return 2;\n+\n+\t  base_length = 8;\n+\t  break;\n+\n+\tcase HImode:\n+\t  if (addr == NULL_RTX)\n+\t    {\n+\t      if (REG_P (src))\n+\t\treturn 2;\n+\n+\t      if (src == const0_rtx)\n+\t\treturn 2;\n+\n+\t      return 4;\n+\t    }\n+\n+\t  base_length = 8;\n+\t  break;\n+\n+\tcase SImode:\n+\t  if (addr == NULL_RTX)\n+\t    {\n+\t      if (REG_P (src))\n+\t\t{\n+\t\t  if (REGNO (src) == MAC_REG || REGNO (dest) == MAC_REG)\n+\t\t    return 4;\n+\t\t  else\n+\t\t    return 2;\n+\t\t}\n+\n+\t      if (GET_CODE (src) == CONST_INT)\n+\t\t{\n+\t\t  int val = INTVAL (src);\n+\n+\t\t  if (val == 0)\n+\t\t    return 2;\n+\n+\t\t  if (val == (val & 0x00ff) || val == (val & 0xff00))\n+\t\t    return 4;\n+\t\t  \n+\t\t  switch (val & 0xffffffff)\n+\t\t    {\n+\t\t    case 0xffffffff:\n+\t\t    case 0xfffffffe:\n+\t\t    case 0xfffffffc:\n+\t\t    case 0x0000ffff:\n+\t\t    case 0x0000fffe:\n+\t\t    case 0xffff0000:\n+\t\t    case 0xfffe0000:\n+\t\t    case 0x00010000:\n+\t\t    case 0x00020000:\n+\t\t      return 4;\n+\t\t    }\n+\t\t}\n+\t      return 6;\n+\t    }\n+\n+\t  base_length = 10;\n+\t  break;\n+\n+\tcase SFmode:\n+\t  if (addr == NULL_RTX)\n+\t    {\n+\t      if (REG_P (src))\n+\t\treturn 2;\n+\n+\t      if (src == const0_rtx)\n+\t\treturn 2;\n+\t      return 6;\n+\t    }\n+\n+\t  base_length = 10;\n+\t  break;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+\n+      /* Adjust the length based on the addressing mode used.\n+\t Specifically, we subtract the difference between the actual\n+\t length and the longest one, which is @(d:24,ERs).  */\n+\n+      /* @ERs+ and @-ERd are 6 bytes shorter than the longest.  */\n+      if (GET_CODE (addr) == PRE_DEC\n+\t  || GET_CODE (addr) == POST_INC)\n+\treturn base_length - 6;\n+\n+      /* @ERs and @ERd are 6 bytes shorter than the longest.  */\n+      if (GET_CODE (addr) == REG)\n+\treturn base_length - 6;\n+\n+      /* @(d:16,ERs) and @(d:16,ERd) are 4 bytes shorter than the\n+\t longest.  */\n+      if (GET_CODE (addr) == PLUS\n+\t  && GET_CODE (XEXP (addr, 0)) == REG\n+\t  && GET_CODE (XEXP (addr, 1)) == CONST_INT\n+\t  && INTVAL (XEXP (addr, 1)) > -32768\n+\t  && INTVAL (XEXP (addr, 1)) < 32767)\n+\treturn base_length - 4;\n+\n+      /* @aa:16 is 4 bytes shorter than the longest.  */\n+      if (h8300_tiny_constant_address_p (addr))\n+\treturn base_length - 4;\n+\n+      /* @aa:24 is 2 bytes shorter than the longest.  */\n+      if (CONSTANT_P (addr))\n+\treturn base_length - 2;\n+\n+      return base_length;\n+    }\n+}\n+\f\n const char *\n output_plussi (rtx *operands)\n {\n@@ -4067,101 +4316,6 @@ h8300_adjust_insn_length (rtx insn, int length ATTRIBUTE_UNUSED)\n   if (get_attr_adjust_length (insn) == ADJUST_LENGTH_NO)\n     return 0;\n \n-  /* Adjust length for reg->mem and mem->reg copies.  */\n-  if (GET_CODE (pat) == SET\n-      && (GET_CODE (SET_SRC (pat)) == MEM\n-\t  || GET_CODE (SET_DEST (pat)) == MEM))\n-    {\n-      /* This insn might need a length adjustment.  */\n-      rtx addr;\n-\n-      if (GET_CODE (SET_SRC (pat)) == MEM)\n-\taddr = XEXP (SET_SRC (pat), 0);\n-      else\n-\taddr = XEXP (SET_DEST (pat), 0);\n-\n-      if (TARGET_H8300)\n-\t{\n-\t  /* On the H8/300, we subtract the difference between the\n-             actual length and the longest one, which is @(d:16,ERs).  */\n-\n-\t  /* @Rs is 2 bytes shorter than the longest.  */\n-\t  if (GET_CODE (addr) == REG)\n-\t    return -2;\n-\n-\t  /* @aa:8 is 2 bytes shorter than the longest.  */\n-\t  if (GET_MODE (SET_SRC (pat)) == QImode\n-\t      && h8300_eightbit_constant_address_p (addr))\n-\t    return -2;\n-\t}\n-      else\n-\t{\n-\t  /* On the H8/300H and H8S, we subtract the difference\n-             between the actual length and the longest one, which is\n-             @(d:24,ERs).  */\n-\n-\t  /* @ERs is 6 bytes shorter than the longest.  */\n-\t  if (GET_CODE (addr) == REG)\n-\t    return -6;\n-\n-\t  /* @(d:16,ERs) is 6 bytes shorter than the longest.  */\n-\t  if (GET_CODE (addr) == PLUS\n-\t      && GET_CODE (XEXP (addr, 0)) == REG\n-\t      && GET_CODE (XEXP (addr, 1)) == CONST_INT\n-\t      && INTVAL (XEXP (addr, 1)) > -32768\n-\t      && INTVAL (XEXP (addr, 1)) < 32767)\n-\t    return -4;\n-\n-\t  /* @aa:8 is 6 bytes shorter than the longest.  */\n-\t  if (GET_MODE (SET_SRC (pat)) == QImode\n-\t      && h8300_eightbit_constant_address_p (addr))\n-\t    return -6;\n-\n-\t  /* @aa:16 is 4 bytes shorter than the longest.  */\n-\t  if (h8300_tiny_constant_address_p (addr))\n-\t    return -4;\n-\n-\t  /* @aa:24 is 2 bytes shorter than the longest.  */\n-\t  if (GET_CODE (addr) == CONST_INT)\n-\t    return -2;\n-\t}\n-    }\n-\n-  /* Loading some constants needs adjustment.  */\n-  if (GET_CODE (pat) == SET\n-      && GET_CODE (SET_SRC (pat)) == CONST_INT\n-      && GET_MODE (SET_DEST (pat)) == SImode\n-      && INTVAL (SET_SRC (pat)) != 0)\n-    {\n-      int val = INTVAL (SET_SRC (pat));\n-\n-      if (TARGET_H8300\n-\t  && ((val & 0xffff) == 0\n-\t      || ((val >> 16) & 0xffff) == 0))\n-\treturn -2;\n-\n-      if (TARGET_H8300H || TARGET_H8300S)\n-\t{\n-\t  if (val == (val & 0xff)\n-\t      || val == (val & 0xff00))\n-\t    return 4 - 6;\n-\n-\t  switch (val & 0xffffffff)\n-\t    {\n-\t    case 0xffffffff:\n-\t    case 0xfffffffe:\n-\t    case 0xfffffffc:\n-\t    case 0x0000ffff:\n-\t    case 0x0000fffe:\n-\t    case 0xffff0000:\n-\t    case 0xfffe0000:\n-\t    case 0x00010000:\n-\t    case 0x00020000:\n-\t      return 4 - 6;\n-\t    }\n-\t}\n-    }\n-\n   /* Rotations need various adjustments.  */\n   if (GET_CODE (pat) == SET\n       && (GET_CODE (SET_SRC (pat)) == ROTATE"}, {"sha": "ec9f1c6876f5f50933651bc2d31bc2ce0c6c0d5c", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7948a9eac2804420e87161f936fead7287008502/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7948a9eac2804420e87161f936fead7287008502/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=7948a9eac2804420e87161f936fead7287008502", "patch": "@@ -179,7 +179,8 @@\n    mov.b\t%R1,%X0\n    mov.b\t%R1,%X0\n    mov.b\t%X1,%R0\"\n-  [(set_attr \"length\" \"2,2,2,2,8,8\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_mov_length (operands)\"))\n    (set_attr \"cc\" \"set_zn,set_znv,set_znv,clobber,set_znv,set_znv\")])\n \n (define_expand \"movqi\"\n@@ -205,9 +206,8 @@\n    mov.b\t%X1,%X0\n    mov.b\t%R1,%X0\n    mov.b\t%R1,%X0\"\n-  [(set_attr_alternative \"length\"\n-     [(const_int 2) (const_int 2) (const_int 2)\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_mov_length (operands)\"))\n    (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv\")])\n \n ;; movhi\n@@ -260,7 +260,8 @@\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n-  [(set_attr \"length\" \"2,2,2,4,4,4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_mov_length (operands)\"))\n    (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n \n (define_insn \"*movhi_h8300hs\"\n@@ -276,7 +277,8 @@\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n-  [(set_attr \"length\" \"2,2,2,4,8,8\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_mov_length (operands)\"))\n    (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n \n (define_expand \"movhi\"\n@@ -302,9 +304,8 @@\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n-  [(set_attr_alternative \"length\"\n-     [(const_int 2) (const_int 2) (const_int 4)\n-      (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_mov_length (operands)\"))\n    (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv\")])\n \n ;; movsi\n@@ -416,7 +417,8 @@\n       abort ();\n     }\n }\"\n-  [(set_attr \"length\" \"4,4,8,8,4,4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_mov_length (operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"*movsf_h8300\"\n@@ -472,7 +474,8 @@\n       abort ();\n     }\n }\"\n-  [(set_attr \"length\" \"4,4,8,8,4,4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_mov_length (operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"*movsi_h8300hs\"\n@@ -547,7 +550,8 @@\n     }\n    return \\\"mov.l\t%S1,%S0\\\";\n }\"\n-  [(set_attr \"length\" \"2,2,6,4,4,10,10,2,6,4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_mov_length (operands)\"))\n    (set_attr \"cc\" \"set_zn,set_znv,clobber,set_znv,set_znv,set_znv,set_znv,none_0hit,none_0hit,set_znv\")])\n \n (define_insn \"*movsf_h8300h\"\n@@ -563,7 +567,8 @@\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\"\n-  [(set_attr \"length\" \"2,2,10,10,4,4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_mov_length (operands)\"))\n    (set_attr \"cc\" \"set_zn,set_znv,set_znv,set_znv,set_znv,set_znv\")])\n \f\n ;; ----------------------------------------------------------------------"}]}