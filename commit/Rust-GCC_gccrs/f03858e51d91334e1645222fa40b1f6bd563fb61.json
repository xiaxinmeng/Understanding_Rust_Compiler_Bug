{"sha": "f03858e51d91334e1645222fa40b1f6bd563fb61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAzODU4ZTUxZDkxMzM0ZTE2NDUyMjJmYTQwYjFmNmJkNTYzZmI2MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-12-01T16:10:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-12-01T16:10:25Z"}, "message": "Disable -Wliteral-suffix for standard UDLs\n\n\t* include/bits/basic_string.h (operator\"\"s): Add pragmas to disable\n\t-Wliteral-suffix warnings.\n\t* include/experimental/string_view (operator\"\"sv): Likewise.\n\t* include/std/chrono (operator\"\"h, operator\"\"min, operator\"\"s)\n\t(operator\"\"ms, operator\"\"us, operator\"\"ns): Likewise.\n\t* include/std/complex (operator\"\"if, operator\"\"i, operator\"\"il):\n\tLikewise.\n\t* include/std/string_view (operator\"\"sv): Likewise.\n\t* testsuite/20_util/duration/literals/range.cc: Adjust dg-error.\n\nFrom-SVN: r255320", "tree": {"sha": "f6fcb02d54e07764e3f923eba556f17ab5cb63ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6fcb02d54e07764e3f923eba556f17ab5cb63ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f03858e51d91334e1645222fa40b1f6bd563fb61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03858e51d91334e1645222fa40b1f6bd563fb61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f03858e51d91334e1645222fa40b1f6bd563fb61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03858e51d91334e1645222fa40b1f6bd563fb61/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9dcf14aae8f725ed63499d70980eb7029fdd2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9dcf14aae8f725ed63499d70980eb7029fdd2d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9dcf14aae8f725ed63499d70980eb7029fdd2d5"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "14b65e3575ed2730e111f6398a30198a7a5cb583", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f03858e51d91334e1645222fa40b1f6bd563fb61", "patch": "@@ -1,5 +1,15 @@\n 2017-12-01  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/basic_string.h (operator\"\"s): Add pragmas to disable\n+\t-Wliteral-suffix warnings.\n+\t* include/experimental/string_view (operator\"\"sv): Likewise.\n+\t* include/std/chrono (operator\"\"h, operator\"\"min, operator\"\"s)\n+\t(operator\"\"ms, operator\"\"us, operator\"\"ns): Likewise.\n+\t* include/std/complex (operator\"\"if, operator\"\"i, operator\"\"il):\n+\tLikewise.\n+\t* include/std/string_view (operator\"\"sv): Likewise.\n+\t* testsuite/20_util/duration/literals/range.cc: Adjust dg-error.\n+\n \t* include/bits/locale_facets_nonio.tcc (money_get::_M_extract): Add\n \tfallthrough comment.\n "}, {"sha": "70373e7448ad413fa064b8a449b0d29d3ec740a8", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=f03858e51d91334e1645222fa40b1f6bd563fb61", "patch": "@@ -6665,6 +6665,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   inline namespace string_literals\n   {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wliteral-suffix\"\n     _GLIBCXX_DEFAULT_ABI_TAG\n     inline basic_string<char>\n     operator\"\"s(const char* __str, size_t __len)\n@@ -6689,6 +6691,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return basic_string<char32_t>{__str, __len}; }\n #endif\n \n+#pragma GCC diagnostic pop\n   } // inline namespace string_literals\n   } // inline namespace literals\n "}, {"sha": "96d1f58f8e9ee265bd8290013803274ebcf00314", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=f03858e51d91334e1645222fa40b1f6bd563fb61", "patch": "@@ -644,6 +644,8 @@ namespace experimental\n   {\n   inline namespace string_view_literals\n   {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wliteral-suffix\"\n     inline constexpr basic_string_view<char>\n     operator\"\"sv(const char* __str, size_t __len) noexcept\n     { return basic_string_view<char>{__str, __len}; }\n@@ -663,6 +665,7 @@ namespace experimental\n     operator\"\"sv(const char32_t* __str, size_t __len) noexcept\n     { return basic_string_view<char32_t>{__str, __len}; }\n #endif\n+#pragma GCC diagnostic pop\n   } // namespace string_literals\n   } // namespace literals\n } // namespace experimental"}, {"sha": "2419e82acce7d5fd0fab134b89d8adde24184ce9", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=f03858e51d91334e1645222fa40b1f6bd563fb61", "patch": "@@ -884,6 +884,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   inline namespace chrono_literals\n   {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wliteral-suffix\"\n     template<typename _Rep, unsigned long long _Val>\n       struct _Checked_integral_constant\n       : integral_constant<_Rep, static_cast<_Rep>(_Val)>\n@@ -958,6 +960,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator\"\"ns()\n       { return __check_overflow<chrono::nanoseconds, _Digits...>(); }\n \n+#pragma GCC diagnostic pop\n   } // inline namespace chrono_literals\n   } // inline namespace literals\n \n@@ -966,7 +969,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using namespace literals::chrono_literals;\n   } // namespace chrono\n \n-#endif // __cplusplus > 201103L\n+#endif // C++14\n \n   // @} group chrono\n "}, {"sha": "61f8cc1fce36a6a0cc412d9363d7077959816309", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=f03858e51d91334e1645222fa40b1f6bd563fb61", "patch": "@@ -1941,6 +1941,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n inline namespace literals {\n inline namespace complex_literals {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wliteral-suffix\"\n #define __cpp_lib_complex_udls 201309\n \n   constexpr std::complex<float>\n@@ -1967,6 +1969,7 @@ inline namespace complex_literals {\n   operator\"\"il(unsigned long long __num)\n   { return std::complex<long double>{0.0L, static_cast<long double>(__num)}; }\n \n+#pragma GCC diagnostic pop\n } // inline namespace complex_literals\n } // inline namespace literals\n "}, {"sha": "1266a07d04fac1b4ddde31255797deaf34cfd248", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=f03858e51d91334e1645222fa40b1f6bd563fb61", "patch": "@@ -626,6 +626,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   inline namespace string_view_literals\n   {\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wliteral-suffix\"\n     inline constexpr basic_string_view<char>\n     operator\"\"sv(const char* __str, size_t __len) noexcept\n     { return basic_string_view<char>{__str, __len}; }\n@@ -645,6 +647,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator\"\"sv(const char32_t* __str, size_t __len) noexcept\n     { return basic_string_view<char32_t>{__str, __len}; }\n #endif\n+#pragma GCC diagnostic pop\n   } // namespace string_literals\n   } // namespace literals\n "}, {"sha": "20d82c5cdbe18952505aeb63158f8ab093e591e8", "filename": "libstdc++-v3/testsuite/20_util/duration/literals/range.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f03858e51d91334e1645222fa40b1f6bd563fb61/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fliterals%2Frange.cc?ref=f03858e51d91334e1645222fa40b1f6bd563fb61", "patch": "@@ -26,6 +26,6 @@ test01()\n \n   // std::numeric_limits<int64_t>::max() == 9223372036854775807;\n   auto h = 9223372036854775808h;\n-  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 892 }\n+  // { dg-error \"cannot be represented\" \"\" { target *-*-* } 894 }\n }\n // { dg-prune-output \"in constexpr expansion\" } // needed for -O0"}]}