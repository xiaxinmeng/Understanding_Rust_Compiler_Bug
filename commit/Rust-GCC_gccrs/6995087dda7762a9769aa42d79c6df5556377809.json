{"sha": "6995087dda7762a9769aa42d79c6df5556377809", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk5NTA4N2RkYTc3NjJhOTc2OWFhNDJkNzljNmRmNTU1NjM3NzgwOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-04-24T23:30:10Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-04-24T23:30:10Z"}, "message": "re PR libstdc++/35887 (stl parallel includes installed for --disable-libgomp)\n\n\n2008-04-24  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/35887 \n\t* configure.ac: Add default argument to GLIBCXX_ENABLE_PARALLEL.\n\tMove atomic warnings to GLIBCXX_ENABLE_ATOMIC_BUILTINS.\n\t* acinclude.m4 (GLIBCXX_ENABLE_PARALLEL): Check for --disable-libgomp.\n\t(GLIBCXX_ENABLE_ATOMIC_BUILTINS): Add warning information.\n\t* configure: Regenerate.\n\t* include/Makefile.am (parallel_headers): Make conditional on\n\tENABLE_PARALLEL.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r134649", "tree": {"sha": "72ca287fa17bbec99666f437ddc5e3300bd0c101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72ca287fa17bbec99666f437ddc5e3300bd0c101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6995087dda7762a9769aa42d79c6df5556377809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6995087dda7762a9769aa42d79c6df5556377809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6995087dda7762a9769aa42d79c6df5556377809", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6995087dda7762a9769aa42d79c6df5556377809/comments", "author": null, "committer": null, "parents": [{"sha": "21df06dfc46fa9b28f2bb42f5f3238086a2b489e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21df06dfc46fa9b28f2bb42f5f3238086a2b489e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21df06dfc46fa9b28f2bb42f5f3238086a2b489e"}], "stats": {"total": 265, "additions": 142, "deletions": 123}, "files": [{"sha": "96672f8b9ce68e1bcd6780ce2442bd8ed09e7652", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6995087dda7762a9769aa42d79c6df5556377809", "patch": "@@ -1,3 +1,15 @@\n+2008-04-24  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/35887 \n+\t* configure.ac: Add default argument to GLIBCXX_ENABLE_PARALLEL.\n+\tMove atomic warnings to GLIBCXX_ENABLE_ATOMIC_BUILTINS.\n+\t* acinclude.m4 (GLIBCXX_ENABLE_PARALLEL): Check for --disable-libgomp.\n+\t(GLIBCXX_ENABLE_ATOMIC_BUILTINS): Add warning information.\n+\t* configure: Regenerate.\n+\t* include/Makefile.am (parallel_headers): Make conditional on\n+\tENABLE_PARALLEL.\n+\t* include/Makefile.in: Regenerate.\n+\t\n 2008-04-24  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/35969"}, {"sha": "90c4e4f6d21b016c70af862fb5d0dd9124ca30ca", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=6995087dda7762a9769aa42d79c6df5556377809", "patch": "@@ -1746,23 +1746,18 @@ dnl  +  Usage:  GLIBCXX_ENABLE_PARALLEL\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_PARALLEL], [\n \n-  # NB: libstdc++ may be configured before libgomp: can't check for the actual\n-  # dependencies (omp.h and libgomp). \n   enable_parallel=no;\n-  if test -f $glibcxx_builddir/../libgomp/omp.h; then\n-    enable_parallel=yes;\n+\n+  # Check to see if OpenMP is explicitly disabled.\n+  AC_MSG_CHECKING([for libgomp support])\n+  GLIBCXX_ENABLE(libgomp,$1,,[enable code depending on libgomp],[permit yes|no])\n+  AC_MSG_RESULT([$enable_libgomp])\n+  if test x$enable_libgomp = xno; then\n+    enable_parallel=no\n   else\n-    AC_MSG_NOTICE([$glibcxx_builddir/../libgomp/omp.h not found])\n+    enable_parallel=yes\n   fi\n \n-  # Check to see if it's explicitly disabled.\n-#  GLIBCXX_ENABLE(libgomp,$1,,[enable code depending on libgomp],\n-#\t[permit yes|no])\n-\n-#  if test x$enable_libgomp = xno; then\n-#    enable_parallel=no\n-#  fi\n-\n   AC_MSG_CHECKING([for parallel mode support])\n   AC_MSG_RESULT([$enable_parallel])\n   GLIBCXX_CONDITIONAL(ENABLE_PARALLEL, test $enable_parallel = yes)\n@@ -2224,6 +2219,14 @@ EOF\n   # If still generic, set to mutex.\n   if test $atomicity_dir = \"cpu/generic\" ; then\n     atomicity_dir=cpu/generic/atomicity_mutex\n+    AC_MSG_WARN([No native atomic operations are provided for this platform.])\n+      if test $target_thread_file = single; then\n+        AC_MSG_WARN([They cannot be faked when thread support is disabled.])\n+        AC_MSG_WARN([Thread-safety of certain classes is not guaranteed.])\n+      else\n+        AC_MSG_WARN([They will be faked using a mutex.])\n+        AC_MSG_WARN([Performance of certain classes will degrade as a result.])\n+      fi\n   fi\n \n ])"}, {"sha": "ca764fc3589cbf6c3d6212309c4c2611a11396c0", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 60, "deletions": 51, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=6995087dda7762a9769aa42d79c6df5556377809", "patch": "@@ -1045,6 +1045,7 @@ Optional Features:\n                           [default=\"-g3 -O0\"]\n   --enable-libstdcxx-debug\n                           build extra debug library [default=no]\n+  --enable-libgomp        enable code depending on libgomp [default=yes]\n   --enable-cxx-flags=FLAGS\n                           pass compiler FLAGS when building library\n                           [default=]\n@@ -4666,13 +4667,13 @@ if test \"${lt_cv_nm_interface+set}\" = set; then\n else\n   lt_cv_nm_interface=\"BSD nm\"\n   echo \"int some_variable = 0;\" > conftest.$ac_ext\n-  (eval echo \"\\\"\\$as_me:4669: $ac_compile\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:4670: $ac_compile\\\"\" >&5)\n   (eval \"$ac_compile\" 2>conftest.err)\n   cat conftest.err >&5\n-  (eval echo \"\\\"\\$as_me:4672: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:4673: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&5)\n   (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n   cat conftest.err >&5\n-  (eval echo \"\\\"\\$as_me:4675: output\\\"\" >&5)\n+  (eval echo \"\\\"\\$as_me:4676: output\\\"\" >&5)\n   cat conftest.out >&5\n   if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n     lt_cv_nm_interface=\"MS dumpbin\"\n@@ -5716,7 +5717,7 @@ ia64-*-hpux*)\n   ;;\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 5719 \"configure\"' > conftest.$ac_ext\n+  echo '#line 5720 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -7178,11 +7179,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:7181: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:7182: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:7185: \\$? = $ac_status\" >&5\n+   echo \"$as_me:7186: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -7500,11 +7501,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:7503: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:7504: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:7507: \\$? = $ac_status\" >&5\n+   echo \"$as_me:7508: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -7605,11 +7606,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:7608: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:7609: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:7612: \\$? = $ac_status\" >&5\n+   echo \"$as_me:7613: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -7660,11 +7661,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:7663: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:7664: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:7667: \\$? = $ac_status\" >&5\n+   echo \"$as_me:7668: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -10512,7 +10513,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10515 \"configure\"\n+#line 10516 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10612,7 +10613,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10615 \"configure\"\n+#line 10616 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12650,11 +12651,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:12653: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:12654: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>conftest.err)\n    ac_status=$?\n    cat conftest.err >&5\n-   echo \"$as_me:12657: \\$? = $ac_status\" >&5\n+   echo \"$as_me:12658: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s \"$ac_outfile\"; then\n      # The compiler can only warn and ignore the option if not recognized\n      # So say no if there are warnings other than the usual output.\n@@ -12749,11 +12750,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:12752: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:12753: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:12756: \\$? = $ac_status\" >&5\n+   echo \"$as_me:12757: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -12801,11 +12802,11 @@ else\n    -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n    -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n    -e 's:$: $lt_compiler_flag:'`\n-   (eval echo \"\\\"\\$as_me:12804: $lt_compile\\\"\" >&5)\n+   (eval echo \"\\\"\\$as_me:12805: $lt_compile\\\"\" >&5)\n    (eval \"$lt_compile\" 2>out/conftest.err)\n    ac_status=$?\n    cat out/conftest.err >&5\n-   echo \"$as_me:12808: \\$? = $ac_status\" >&5\n+   echo \"$as_me:12809: \\$? = $ac_status\" >&5\n    if (exit $ac_status) && test -s out/conftest2.$ac_objext\n    then\n      # The compiler can only warn and ignore the option if not recognized\n@@ -13850,7 +13851,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 13853 \"configure\"\n+#line 13854 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -16906,23 +16907,33 @@ echo \"${ECHO_T}$enable_libstdcxx_debug\" >&6\n \n \n \n-  # NB: libstdc++ may be configured before libgomp: can't check for the actual\n-  # dependencies (omp.h and libgomp).\n   enable_parallel=no;\n-  if test -f $glibcxx_builddir/../libgomp/omp.h; then\n-    enable_parallel=yes;\n-  else\n-    { echo \"$as_me:$LINENO: $glibcxx_builddir/../libgomp/omp.h not found\" >&5\n-echo \"$as_me: $glibcxx_builddir/../libgomp/omp.h not found\" >&6;}\n-  fi\n \n-  # Check to see if it's explicitly disabled.\n-#  GLIBCXX_ENABLE(libgomp,,,[enable code depending on libgomp],\n-#\t[permit yes|no])\n+  # Check to see if OpenMP is explicitly disabled.\n+  echo \"$as_me:$LINENO: checking for libgomp support\" >&5\n+echo $ECHO_N \"checking for libgomp support... $ECHO_C\" >&6\n+   # Check whether --enable-libgomp or --disable-libgomp was given.\n+if test \"${enable_libgomp+set}\" = set; then\n+  enableval=\"$enable_libgomp\"\n \n-#  if test x$enable_libgomp = xno; then\n-#    enable_parallel=no\n-#  fi\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) { { echo \"$as_me:$LINENO: error: Unknown argument to enable/disable libgomp\" >&5\n+echo \"$as_me: error: Unknown argument to enable/disable libgomp\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+                          esac\n+\n+else\n+  enable_libgomp=yes\n+fi;\n+\n+  echo \"$as_me:$LINENO: result: $enable_libgomp\" >&5\n+echo \"${ECHO_T}$enable_libgomp\" >&6\n+  if test x$enable_libgomp = xno; then\n+    enable_parallel=no\n+  else\n+    enable_parallel=yes\n+  fi\n \n   echo \"$as_me:$LINENO: checking for parallel mode support\" >&5\n echo $ECHO_N \"checking for parallel mode support... $ECHO_C\" >&6\n@@ -18043,8 +18054,6 @@ _ACEOF\n   fi\n \n \n-# No surprises, no surprises...\n-\n   echo \"$as_me:$LINENO: checking for thread model used by GCC\" >&5\n echo $ECHO_N \"checking for thread model used by GCC... $ECHO_C\" >&6\n   target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n@@ -18071,6 +18080,8 @@ _ACEOF\n \n \n \n+# Checks for compiler support that don't require linking.\n+\n \n \n   ac_ext=cc\n@@ -18088,7 +18099,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for a builtins test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 18091 \"configure\"\n+#line 18102 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -18128,7 +18139,7 @@ echo \"${ECHO_T}$enable_atomic_builtinsi\" >&6\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 18131 \"configure\"\n+#line 18142 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -18182,24 +18193,21 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n   # If still generic, set to mutex.\n   if test $atomicity_dir = \"cpu/generic\" ; then\n     atomicity_dir=cpu/generic/atomicity_mutex\n-  fi\n-\n-\n-if test $atomicity_dir = cpu/generic/atomicity_mutex ; then\n-  { echo \"$as_me:$LINENO: WARNING: No native atomic operations are provided for this platform.\" >&5\n+    { echo \"$as_me:$LINENO: WARNING: No native atomic operations are provided for this platform.\" >&5\n echo \"$as_me: WARNING: No native atomic operations are provided for this platform.\" >&2;}\n-  if test $target_thread_file = single; then\n-    { echo \"$as_me:$LINENO: WARNING: They cannot be faked when thread support is disabled.\" >&5\n+      if test $target_thread_file = single; then\n+        { echo \"$as_me:$LINENO: WARNING: They cannot be faked when thread support is disabled.\" >&5\n echo \"$as_me: WARNING: They cannot be faked when thread support is disabled.\" >&2;}\n-    { echo \"$as_me:$LINENO: WARNING: Thread-safety of certain classes is not guaranteed.\" >&5\n+        { echo \"$as_me:$LINENO: WARNING: Thread-safety of certain classes is not guaranteed.\" >&5\n echo \"$as_me: WARNING: Thread-safety of certain classes is not guaranteed.\" >&2;}\n-  else\n-    { echo \"$as_me:$LINENO: WARNING: They will be faked using a mutex.\" >&5\n+      else\n+        { echo \"$as_me:$LINENO: WARNING: They will be faked using a mutex.\" >&5\n echo \"$as_me: WARNING: They will be faked using a mutex.\" >&2;}\n-    { echo \"$as_me:$LINENO: WARNING: Performance of certain classes will degrade as a result.\" >&5\n+        { echo \"$as_me:$LINENO: WARNING: Performance of certain classes will degrade as a result.\" >&5\n echo \"$as_me: WARNING: Performance of certain classes will degrade as a result.\" >&2;}\n+      fi\n   fi\n-fi\n+\n \n \n   # All these tests are for C++; save the language and the compiler flags.\n@@ -18294,6 +18302,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+# Only do link tests if native. Else, hardcode.\n if $GLIBCXX_IS_NATIVE; then\n \n   # We can do more elaborate tests that assume a working linker."}, {"sha": "c3f1756373eb6ba6e5d5c331105c551f34cd1475", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=6995087dda7762a9769aa42d79c6df5556377809", "patch": "@@ -107,30 +107,20 @@ GLIBCXX_ENABLE_C99([yes])\n GLIBCXX_ENABLE_CONCEPT_CHECKS([no])\n GLIBCXX_ENABLE_DEBUG_FLAGS([\"-g3 -O0\"])\n GLIBCXX_ENABLE_DEBUG([no])\n-GLIBCXX_ENABLE_PARALLEL\n+GLIBCXX_ENABLE_PARALLEL([yes])\n GLIBCXX_ENABLE_CXX_FLAGS\n GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING([no])\n \n # Checks for operating systems support that don't require linking.\n GLIBCXX_CHECK_SYSTEM_ERROR\n GLIBCXX_CHECK_STANDARD_LAYOUT\n-\n-# No surprises, no surprises...\n GLIBCXX_ENABLE_THREADS\n-GLIBCXX_ENABLE_ATOMIC_BUILTINS\n-if test $atomicity_dir = cpu/generic/atomicity_mutex ; then\n-  AC_MSG_WARN([No native atomic operations are provided for this platform.])\n-  if test $target_thread_file = single; then\n-    AC_MSG_WARN([They cannot be faked when thread support is disabled.])\n-    AC_MSG_WARN([Thread-safety of certain classes is not guaranteed.])\n-  else\n-    AC_MSG_WARN([They will be faked using a mutex.])\n-    AC_MSG_WARN([Performance of certain classes will degrade as a result.])\n-  fi\n-fi\n \n+# Checks for compiler support that don't require linking.\n+GLIBCXX_ENABLE_ATOMIC_BUILTINS\n GLIBCXX_CHECK_COMPILER_FEATURES\n \n+# Only do link tests if native. Else, hardcode.\n if $GLIBCXX_IS_NATIVE; then\n \n   # We can do more elaborate tests that assume a working linker."}, {"sha": "22ac39c436b0c14e34ecf6b4ab1bd4274b411326", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=6995087dda7762a9769aa42d79c6df5556377809", "patch": "@@ -706,6 +706,7 @@ debug_headers = \\\n # Parallel mode headers\n parallel_srcdir = ${glibcxx_srcdir}/include/parallel\n parallel_builddir = ./parallel\n+if ENABLE_PARALLEL\n parallel_headers = \\\n         ${parallel_srcdir}/algorithm \\\n         ${parallel_srcdir}/algobase.h \\\n@@ -751,6 +752,9 @@ parallel_headers = \\\n         ${parallel_srcdir}/types.h \\\n         ${parallel_srcdir}/unique_copy.h \\\n         ${parallel_srcdir}/workstealing.h \n+else\n+parallel_headers =\n+endif\n \n \n # Some of the different \"C\" header models need extra files."}, {"sha": "61fa83ec81228e183fd5414c0f214f73cdbd4252", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6995087dda7762a9769aa42d79c6df5556377809/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=6995087dda7762a9769aa42d79c6df5556377809", "patch": "@@ -951,51 +951,52 @@ debug_headers = \\\n # Parallel mode headers\n parallel_srcdir = ${glibcxx_srcdir}/include/parallel\n parallel_builddir = ./parallel\n-parallel_headers = \\\n-        ${parallel_srcdir}/algorithm \\\n-        ${parallel_srcdir}/algobase.h \\\n-        ${parallel_srcdir}/algo.h \\\n-        ${parallel_srcdir}/algorithm \\\n-        ${parallel_srcdir}/algorithmfwd.h \\\n-        ${parallel_srcdir}/balanced_quicksort.h \\\n-        ${parallel_srcdir}/base.h \\\n-        ${parallel_srcdir}/basic_iterator.h \\\n-        ${parallel_srcdir}/checkers.h \\\n-        ${parallel_srcdir}/compatibility.h \\\n-        ${parallel_srcdir}/compiletime_settings.h \\\n-        ${parallel_srcdir}/equally_split.h \\\n-        ${parallel_srcdir}/features.h \\\n-        ${parallel_srcdir}/find.h \\\n-        ${parallel_srcdir}/find_selectors.h \\\n-        ${parallel_srcdir}/for_each.h \\\n-        ${parallel_srcdir}/for_each_selectors.h \\\n-        ${parallel_srcdir}/iterator.h \\\n-        ${parallel_srcdir}/list_partition.h \\\n-        ${parallel_srcdir}/losertree.h \\\n-        ${parallel_srcdir}/merge.h \\\n-        ${parallel_srcdir}/multiseq_selection.h \\\n-        ${parallel_srcdir}/multiway_merge.h \\\n-        ${parallel_srcdir}/multiway_mergesort.h \\\n-        ${parallel_srcdir}/numeric \\\n-        ${parallel_srcdir}/numericfwd.h \\\n-        ${parallel_srcdir}/omp_loop.h \\\n-        ${parallel_srcdir}/omp_loop_static.h \\\n-        ${parallel_srcdir}/parallel.h \\\n-        ${parallel_srcdir}/par_loop.h \\\n-        ${parallel_srcdir}/partial_sum.h \\\n-        ${parallel_srcdir}/partition.h \\\n-        ${parallel_srcdir}/queue.h \\\n-        ${parallel_srcdir}/quicksort.h \\\n-        ${parallel_srcdir}/random_number.h \\\n-        ${parallel_srcdir}/random_shuffle.h \\\n-        ${parallel_srcdir}/search.h \\\n-        ${parallel_srcdir}/set_operations.h \\\n-        ${parallel_srcdir}/settings.h \\\n-        ${parallel_srcdir}/sort.h \\\n-        ${parallel_srcdir}/tags.h \\\n-        ${parallel_srcdir}/types.h \\\n-        ${parallel_srcdir}/unique_copy.h \\\n-        ${parallel_srcdir}/workstealing.h \n+@ENABLE_PARALLEL_FALSE@parallel_headers = \n+@ENABLE_PARALLEL_TRUE@parallel_headers = \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/algorithm \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/algobase.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/algo.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/algorithm \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/algorithmfwd.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/balanced_quicksort.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/base.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/basic_iterator.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/checkers.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/compatibility.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/compiletime_settings.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/equally_split.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/features.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/find.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/find_selectors.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/for_each.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/for_each_selectors.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/iterator.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/list_partition.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/losertree.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/merge.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/multiseq_selection.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/multiway_merge.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/multiway_mergesort.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/numeric \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/numericfwd.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/omp_loop.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/omp_loop_static.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/parallel.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/par_loop.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/partial_sum.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/partition.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/queue.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/quicksort.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/random_number.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/random_shuffle.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/search.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/set_operations.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/settings.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/sort.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/tags.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/types.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/unique_copy.h \\\n+@ENABLE_PARALLEL_TRUE@        ${parallel_srcdir}/workstealing.h \n \n @GLIBCXX_C_HEADERS_EXTRA_FALSE@c_base_headers_extra = \n "}]}