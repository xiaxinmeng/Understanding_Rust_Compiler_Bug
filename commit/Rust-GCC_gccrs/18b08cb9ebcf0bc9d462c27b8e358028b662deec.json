{"sha": "18b08cb9ebcf0bc9d462c27b8e358028b662deec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThiMDhjYjllYmNmMGJjOWQ0NjJjMjdiOGUzNTgwMjhiNjYyZGVlYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-02-17T02:39:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-02-17T02:39:16Z"}, "message": "regex.h (basic_regex::traits_type): Add typedef.\n\n2011-02-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/bits/regex.h (basic_regex::traits_type): Add typedef.\n\t(basic_regex::basic_regex(basic_regex&&)): Add noexcept.\n\t(basic_regex::operator=(basic_regex&&)): Likewise.\n\t(basic_regex::assign(basic_regex&&)): Likewise.\n\t(operator==(sub_match,...)): Implement DR 1181.\n\t(match_results::match_results(match_results&&)): Define.\n\t(match_results::operator=(const match_results&)): Fix parameter type.\n\t(match_results::operator=(match_results&&)): Define.\n\nFrom-SVN: r170238", "tree": {"sha": "94286177bf7c8cd2fd5cd4bb53ccfa3d9ffcb833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94286177bf7c8cd2fd5cd4bb53ccfa3d9ffcb833"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18b08cb9ebcf0bc9d462c27b8e358028b662deec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b08cb9ebcf0bc9d462c27b8e358028b662deec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b08cb9ebcf0bc9d462c27b8e358028b662deec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b08cb9ebcf0bc9d462c27b8e358028b662deec/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70be5dc7a79b86cff826e8c5a3527e4d5bc2eb1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70be5dc7a79b86cff826e8c5a3527e4d5bc2eb1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70be5dc7a79b86cff826e8c5a3527e4d5bc2eb1f"}], "stats": {"total": 129, "additions": 85, "deletions": 44}, "files": [{"sha": "5b103285c3fe38f7deb7e397e93e83b185f68060", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b08cb9ebcf0bc9d462c27b8e358028b662deec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b08cb9ebcf0bc9d462c27b8e358028b662deec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=18b08cb9ebcf0bc9d462c27b8e358028b662deec", "patch": "@@ -1,3 +1,14 @@\n+2011-02-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/regex.h (basic_regex::traits_type): Add typedef.\n+\t(basic_regex::basic_regex(basic_regex&&)): Add noexcept.\n+\t(basic_regex::operator=(basic_regex&&)): Likewise.\n+\t(basic_regex::assign(basic_regex&&)): Likewise.\n+\t(operator==(sub_match,...)): Implement DR 1181.\n+\t(match_results::match_results(match_results&&)): Define.\n+\t(match_results::operator=(const match_results&)): Fix parameter type.\n+\t(match_results::operator=(match_results&&)): Define.\n+\n 2011-02-17  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/47724"}, {"sha": "be391f3fea1c31743147b8e4a2f8a14d30d1d269", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 74, "deletions": 44, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18b08cb9ebcf0bc9d462c27b8e358028b662deec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18b08cb9ebcf0bc9d462c27b8e358028b662deec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=18b08cb9ebcf0bc9d462c27b8e358028b662deec", "patch": "@@ -343,9 +343,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       // types:\n       typedef _Ch_type                            value_type;\n+      typedef _Rx_traits                          traits_type;\n+      typedef typename traits_type::string_type   string_type;\n       typedef regex_constants::syntax_option_type flag_type;\n-      typedef typename _Rx_traits::locale_type    locale_type;\n-      typedef typename _Rx_traits::string_type    string_type;\n+      typedef typename traits_type::locale_type   locale_type;\n \n       /**\n        * @name Constants\n@@ -435,7 +436,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * @param rhs A @p regex object.\n        */\n-      basic_regex(const basic_regex&& __rhs)\n+      basic_regex(const basic_regex&& __rhs) noexcept\n       : _M_flags(__rhs._M_flags), _M_traits(__rhs._M_traits),\n         _M_automaton(std::move(__rhs._M_automaton))\n       { }\n@@ -511,7 +512,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @brief Move-assigns one regular expression to another.\n        */\n       basic_regex&\n-      operator=(basic_regex&& __rhs)\n+      operator=(basic_regex&& __rhs) noexcept\n       { return this->assign(std::move(__rhs)); }\n \n       /**\n@@ -556,7 +557,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param rhs Another regular expression object.\n        */\n       basic_regex&\n-      assign(basic_regex&& __rhs)\n+      assign(basic_regex&& __rhs) noexcept\n       {\n \tbasic_regex __tmp(std::move(__rhs));\n \tthis->swap(__tmp);\n@@ -943,7 +944,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       typename iterator_traits<_Bi_iter>::value_type,\n \t       _Ch_traits, _Ch_alloc>& __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs == __rhs.str(); }\n+    { return __rhs.compare(__lhs.c_str()) == 0; }\n \n   /**\n    * @brief Tests the inequivalence of a string and a regular expression\n@@ -957,7 +958,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const basic_string<\n \t       typename iterator_traits<_Bi_iter>::value_type,\n \t       _Ch_traits, _Ch_alloc>& __lhs, const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs != __rhs.str(); }\n+    { return !(__lhs == __rhs); }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -970,7 +971,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<(const basic_string<\n \t      typename iterator_traits<_Bi_iter>::value_type,\n \t      _Ch_traits, _Ch_alloc>& __lhs, const sub_match<_Bi_iter>& __rhs)\n-     { return __lhs < __rhs.str(); }\n+     { return __rhs.compare(__lhs.c_str()) > 0; }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -983,7 +984,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>(const basic_string<\n \t      typename iterator_traits<_Bi_iter>::value_type, \n \t      _Ch_traits, _Ch_alloc>& __lhs, const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs > __rhs.str(); }\n+    { return __rhs < __lhs; }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -996,7 +997,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>=(const basic_string<\n \t       typename iterator_traits<_Bi_iter>::value_type,\n \t       _Ch_traits, _Ch_alloc>& __lhs, const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs >= __rhs.str(); }\n+    { return !(__lhs < __rhs); }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -1009,7 +1010,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator<=(const basic_string<\n \t       typename iterator_traits<_Bi_iter>::value_type,\n \t       _Ch_traits, _Ch_alloc>& __lhs, const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs <= __rhs.str(); }\n+    { return !(__rhs < __lhs); }\n \n   /**\n    * @brief Tests the equivalence of a regular expression submatch and a\n@@ -1024,7 +1025,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const basic_string<\n \t       typename iterator_traits<_Bi_iter>::value_type,\n \t       _Ch_traits, _Ch_alloc>& __rhs)\n-    { return __lhs.str() == __rhs; }\n+    { return __lhs.compare(__rhs.c_str()) == 0; }\n \n   /**\n    * @brief Tests the inequivalence of a regular expression submatch and a\n@@ -1039,7 +1040,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const basic_string<\n \t       typename iterator_traits<_Bi_iter>::value_type,\n \t       _Ch_traits, _Ch_alloc>& __rhs)\n-    { return __lhs.str() != __rhs; }\n+    { return !(__lhs == __rhs); }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1053,7 +1054,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      const basic_string<\n \t      typename iterator_traits<_Bi_iter>::value_type,\n \t      _Ch_traits, _Ch_alloc>& __rhs)\n-    { return __lhs.str() < __rhs; }\n+    { return __lhs.compare(__rhs.c_str()) < 0; }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1067,7 +1068,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      const basic_string<\n \t      typename iterator_traits<_Bi_iter>::value_type,\n \t      _Ch_traits, _Ch_alloc>& __rhs)\n-    { return __lhs.str() > __rhs; }\n+    { return __rhs < __lhs; }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1081,7 +1082,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const basic_string<\n \t       typename iterator_traits<_Bi_iter>::value_type,\n \t       _Ch_traits, _Ch_alloc>& __rhs)\n-    { return __lhs.str() >= __rhs; }\n+    { return !(__lhs < __rhs); }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1095,7 +1096,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       const basic_string<\n \t       typename iterator_traits<_Bi_iter>::value_type,\n \t       _Ch_traits, _Ch_alloc>& __rhs)\n-    { return __lhs.str() <= __rhs; }\n+    { return !(__rhs < __lhs); }\n \n   /**\n    * @brief Tests the equivalence of a C string and a regular expression\n@@ -1108,7 +1109,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator==(typename iterator_traits<_Bi_iter>::value_type const* __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs == __rhs.str(); }\n+    { return __rhs.compare(__lhs) == 0; }\n \n   /**\n    * @brief Tests the inequivalence of an iterator value and a regular\n@@ -1121,7 +1122,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator!=(typename iterator_traits<_Bi_iter>::value_type const* __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs != __rhs.str(); }\n+    { return !(__lhs == __rhs); }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -1133,7 +1134,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator<(typename iterator_traits<_Bi_iter>::value_type const* __lhs,\n \t      const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs < __rhs.str(); }\n+    { return __rhs.compare(__lhs) > 0; }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -1145,7 +1146,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator>(typename iterator_traits<_Bi_iter>::value_type const* __lhs,\n \t      const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs > __rhs.str(); }\n+    { return __rhs < __lhs; }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -1157,7 +1158,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator>=(typename iterator_traits<_Bi_iter>::value_type const* __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs >= __rhs.str(); }\n+    { return !(__lhs < __rhs); }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -1169,7 +1170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator<=(typename iterator_traits<_Bi_iter>::value_type const* __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs <= __rhs.str(); }\n+    { return !(__rhs < __lhs); }\n \n   /**\n    * @brief Tests the equivalence of a regular expression submatch and a\n@@ -1182,7 +1183,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator==(const sub_match<_Bi_iter>& __lhs,\n \t       typename iterator_traits<_Bi_iter>::value_type const* __rhs)\n-    { return __lhs.str() == __rhs; }\n+    { return __lhs.compare(__rhs) == 0; }\n \n   /**\n    * @brief Tests the inequivalence of a regular expression submatch and a\n@@ -1195,7 +1196,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator!=(const sub_match<_Bi_iter>& __lhs,\n \t       typename iterator_traits<_Bi_iter>::value_type const* __rhs)\n-    { return __lhs.str() != __rhs; }\n+    { return !(__lhs == __rhs); }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1207,7 +1208,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator<(const sub_match<_Bi_iter>& __lhs,\n \t      typename iterator_traits<_Bi_iter>::value_type const* __rhs)\n-    { return __lhs.str() < __rhs; }\n+    { return __lhs.compare(__rhs) < 0; }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1219,7 +1220,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator>(const sub_match<_Bi_iter>& __lhs,\n \t      typename iterator_traits<_Bi_iter>::value_type const* __rhs)\n-    { return __lhs.str() > __rhs; }\n+    { return __rhs < __lhs; }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1231,7 +1232,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator>=(const sub_match<_Bi_iter>& __lhs,\n \t       typename iterator_traits<_Bi_iter>::value_type const* __rhs)\n-    { return __lhs.str() >= __rhs; }\n+    { return !(__lhs < __rhs); }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1243,7 +1244,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator<=(const sub_match<_Bi_iter>& __lhs,\n \t       typename iterator_traits<_Bi_iter>::value_type const* __rhs)\n-    { return __lhs.str() <= __rhs; }\n+    { return !(__rhs < __lhs); }\n \n   /**\n    * @brief Tests the equivalence of a string and a regular expression\n@@ -1256,7 +1257,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator==(typename iterator_traits<_Bi_iter>::value_type const& __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs == __rhs.str(); }\n+    {\n+      return __rhs.compare(typename sub_match<_Bi_iter>::string_type(1, __lhs))\n+             == 0;\n+    }\n \n   /**\n    * @brief Tests the inequivalence of a string and a regular expression\n@@ -1269,7 +1273,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator!=(typename iterator_traits<_Bi_iter>::value_type const& __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs != __rhs.str(); }\n+    { return !(__lhs == __rhs); }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -1281,7 +1285,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator<(typename iterator_traits<_Bi_iter>::value_type const& __lhs,\n \t      const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs < __rhs.str(); }\n+    {\n+      return __rhs.compare(typename sub_match<_Bi_iter>::string_type(1, __lhs))\n+             > 0;\n+    }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -1293,7 +1300,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator>(typename iterator_traits<_Bi_iter>::value_type const& __lhs,\n \t      const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs > __rhs.str(); }\n+    { return __rhs < __lhs; }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -1305,7 +1312,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator>=(typename iterator_traits<_Bi_iter>::value_type const& __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs >= __rhs.str(); }\n+    { return !(__lhs < __rhs); }\n \n   /**\n    * @brief Tests the ordering of a string and a regular expression submatch.\n@@ -1317,7 +1324,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator<=(typename iterator_traits<_Bi_iter>::value_type const& __lhs,\n \t       const sub_match<_Bi_iter>& __rhs)\n-    { return __lhs <= __rhs.str(); }\n+    { return !(__rhs < __lhs); }\n \n   /**\n    * @brief Tests the equivalence of a regular expression submatch and a\n@@ -1330,7 +1337,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator==(const sub_match<_Bi_iter>& __lhs,\n \t       typename iterator_traits<_Bi_iter>::value_type const& __rhs)\n-    { return __lhs.str() == __rhs; }\n+    {\n+      return __lhs.compare(typename sub_match<_Bi_iter>::string_type(1, __rhs))\n+             == 0;\n+    }\n \n   /**\n    * @brief Tests the inequivalence of a regular expression submatch and a\n@@ -1343,7 +1353,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator!=(const sub_match<_Bi_iter>& __lhs,\n \t       typename iterator_traits<_Bi_iter>::value_type const& __rhs)\n-    { return __lhs.str() != __rhs; }\n+    { return !(__lhs == __rhs); }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1355,7 +1365,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator<(const sub_match<_Bi_iter>& __lhs,\n \t      typename iterator_traits<_Bi_iter>::value_type const& __rhs)\n-    { return __lhs.str() < __rhs; }\n+    {\n+      return __lhs.compare(typename sub_match<_Bi_iter>::string_type(1, __rhs))\n+             < 0;\n+    }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1367,7 +1380,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator>(const sub_match<_Bi_iter>& __lhs,\n \t      typename iterator_traits<_Bi_iter>::value_type const& __rhs)\n-    { return __lhs.str() > __rhs; }\n+    { return __rhs < __lhs; }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1379,7 +1392,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator>=(const sub_match<_Bi_iter>& __lhs,\n \t       typename iterator_traits<_Bi_iter>::value_type const& __rhs)\n-    { return __lhs.str() >= __rhs; }\n+    { return !(__lhs < __rhs); }\n \n   /**\n    * @brief Tests the ordering of a regular expression submatch and a string.\n@@ -1391,7 +1404,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline bool\n     operator<=(const sub_match<_Bi_iter>& __lhs,\n \t       typename iterator_traits<_Bi_iter>::value_type const& __rhs)\n-    { return __lhs.str() <= __rhs; }\n+    { return !(__rhs < __lhs); }\n \n   /**\n    * @brief Inserts a matched string into an output stream.\n@@ -1485,7 +1498,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   \n     public:\n       /**\n-       * @name 10.1 Construction, Copying, and Destruction\n+       * @name 28.10.1 Construction, Copying, and Destruction\n        */\n       //@{\n \n@@ -1505,16 +1518,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _Base_type(__rhs)\n       { }\n \n+      /**\n+       * @brief Move constructs a %match_results.\n+       */\n+      match_results(match_results&& __rhs) noexcept\n+      : _Base_type(std::move(__rhs))\n+      { }\n+\n       /**\n        * @brief Assigns rhs to *this.\n        */\n       match_results&\n-      operator=(const match_results __rhs)\n+      operator=(const match_results& __rhs)\n       {\n \tmatch_results(__rhs).swap(*this);\n \treturn *this;\n       }\n \n+      /**\n+       * @brief Move-assigns rhs to *this.\n+       */\n+      match_results&\n+      operator=(match_results&& __rhs)\n+      {\n+\tmatch_results(std::move(__rhs)).swap(*this);\n+\treturn *this;\n+      }\n+\n       /**\n        * @brief Destroys a %match_results object.\n        */\n@@ -1532,7 +1562,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool ready() const { return !_Base_type::empty(); }\n \n       /**\n-       * @name 10.2 Size\n+       * @name 28.10.2 Size\n        */\n       //@{\n "}]}