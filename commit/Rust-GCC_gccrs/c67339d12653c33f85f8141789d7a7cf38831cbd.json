{"sha": "c67339d12653c33f85f8141789d7a7cf38831cbd", "node_id": "C_kwDOANBUbNoAKGM2NzMzOWQxMjY1M2MzM2Y4NWY4MTQxNzg5ZDdhN2NmMzg4MzFjYmQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-30T10:25:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T14:04:02Z"}, "message": "libstdc++: Fix _ForwardIteratorConcept for __gnu_debug::vector<bool>\n\nThe recent changes to the _GLIBCXX_CONCEPT_CHECKS checks for forward\niterators don't work for vector<bool> iterators in debug mode, because\nthe _Safe_iterator specializations don't match the special cases I added\nfor _Bit_iterator and _Bit_const_iterator.\n\nThis refactors the _ForwardIteratorReferenceConcept class template to\nidentify vector<bool> iterators using a new trait, which also works for\ndebug iterators.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/boost_concept_check.h (_Is_vector_bool_iterator):\n\tNew trait to identify vector<bool> iterators, including debug\n\tones.\n\t(_ForwardIteratorReferenceConcept): Add default template\n\targument using _Is_vector_bool_iterator and use it in partial\n\tspecialization for the vector<bool> cases.\n\t(_Mutable_ForwardIteratorReferenceConcept): Likewise.\n\t* testsuite/24_iterators/operations/prev_neg.cc: Adjust dg-error\n\tline number.", "tree": {"sha": "302b3b263e2b706df3a165a2e1a75344b121ce0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/302b3b263e2b706df3a165a2e1a75344b121ce0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c67339d12653c33f85f8141789d7a7cf38831cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67339d12653c33f85f8141789d7a7cf38831cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67339d12653c33f85f8141789d7a7cf38831cbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67339d12653c33f85f8141789d7a7cf38831cbd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8d42cfa84fb31e592411e6cea41bdde980c51d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8d42cfa84fb31e592411e6cea41bdde980c51d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8d42cfa84fb31e592411e6cea41bdde980c51d7"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "81352518c50959dab5a465f7d4abb5a2d4db6653", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67339d12653c33f85f8141789d7a7cf38831cbd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67339d12653c33f85f8141789d7a7cf38831cbd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=c67339d12653c33f85f8141789d7a7cf38831cbd", "patch": "@@ -47,11 +47,19 @@\n namespace std  _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+_GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   struct _Bit_iterator;\n   struct _Bit_const_iterator;\n+_GLIBCXX_END_NAMESPACE_CONTAINER\n _GLIBCXX_END_NAMESPACE_VERSION\n }\n \n+namespace __gnu_debug\n+{\n+  template<typename _Iterator, typename _Sequence, typename _Category>\n+    class _Safe_iterator;\n+}\n+\n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -478,10 +486,32 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     _ValueT __val() const;\n   };\n \n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wunused-variable\"\n+  template<typename _Tp>\n+  struct _Is_vector_bool_iterator\n+  { static const bool __value = false; };\n \n-  template <class _Tp>\n+#ifdef _GLIBCXX_DEBUG\n+  namespace __cont = ::std::_GLIBCXX_STD_C;\n+#else\n+  namespace __cont = ::std;\n+#endif\n+\n+  // Trait to identify vector<bool>::iterator\n+  template <>\n+  struct _Is_vector_bool_iterator<__cont::_Bit_iterator>\n+  { static const bool __value = true; };\n+\n+  // And for vector<bool>::const_iterator.\n+  template <>\n+  struct _Is_vector_bool_iterator<__cont::_Bit_const_iterator>\n+  { static const bool __value = true; };\n+\n+  // And for __gnu_debug::vector<bool> iterators too.\n+  template <typename _It, typename _Seq, typename _Tag>\n+  struct _Is_vector_bool_iterator<__gnu_debug::_Safe_iterator<_It, _Seq, _Tag> >\n+  : _Is_vector_bool_iterator<_It> { };\n+\n+  template <class _Tp, bool = _Is_vector_bool_iterator<_Tp>::__value>\n   struct _ForwardIteratorReferenceConcept\n   {\n     void __constraints() {\n@@ -493,7 +523,7 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     }\n   };\n \n-  template <class _Tp>\n+  template <class _Tp, bool = _Is_vector_bool_iterator<_Tp>::__value>\n   struct _Mutable_ForwardIteratorReferenceConcept\n   {\n     void __constraints() {\n@@ -503,26 +533,22 @@ struct _Aux_require_same<_Tp,_Tp> { typedef _Tp _Type; };\n     }\n   };\n \n-  // vector<bool>::iterator is not a real forward reference, but pretend it is.\n-  template <>\n-  struct _ForwardIteratorReferenceConcept<std::_Bit_iterator>\n+  // vector<bool> iterators are not real forward iterators, but we ignore that.\n+  template <class _Tp>\n+  struct _ForwardIteratorReferenceConcept<_Tp, true>\n   {\n     void __constraints() { }\n   };\n \n-  // vector<bool>::iterator is not a real forward reference, but pretend it is.\n-  template <>\n-  struct _Mutable_ForwardIteratorReferenceConcept<std::_Bit_iterator>\n+  // vector<bool> iterators are not real forward iterators, but we ignore that.\n+  template <class _Tp>\n+  struct _Mutable_ForwardIteratorReferenceConcept<_Tp, true>\n   {\n     void __constraints() { }\n   };\n \n-  // And vector<bool>::const iterator too.\n-  template <>\n-  struct _ForwardIteratorReferenceConcept<std::_Bit_const_iterator>\n-  {\n-    void __constraints() { }\n-  };\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wunused-variable\"\n \n   template <class _Tp>\n   struct _ForwardIteratorConcept"}, {"sha": "cc648549a067b415d13c218359bcb84532843dea", "filename": "libstdc++-v3/testsuite/24_iterators/operations/prev_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c67339d12653c33f85f8141789d7a7cf38831cbd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c67339d12653c33f85f8141789d7a7cf38831cbd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Foperations%2Fprev_neg.cc?ref=c67339d12653c33f85f8141789d7a7cf38831cbd", "patch": "@@ -38,5 +38,5 @@ test02()\n {\n   const Y array[1] = { };\n   (void) std::prev(array + 1);\n-  // { dg-error \"forward_iterator\" \"\" { target *-*-* } 231 }\n+  // { dg-error \"forward_iterator\" \"\" { target *-*-* } 239 }\n }"}]}