{"sha": "56dc4d15c417a62c298d31654d1be448b49c364a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZkYzRkMTVjNDE3YTYyYzI5OGQzMTY1NGQxYmU0NDhiNDljMzY0YQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1999-03-15T15:08:51Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-03-15T15:08:51Z"}, "message": "mips.h (REGISTER_MOVE_COST): Make the cost of moving from HI/LO/HILO/MD into general registers the same as...\n\nMon Mar 15 16:01:52 1999  Jim Wilson  <wilson@cygnus.com>\n\t* config/misp/mips.h (REGISTER_MOVE_COST): Make the cost of moving\n \tfrom HI/LO/HILO/MD into general registers the same as for one\n \tof moving general registers to HI/LO/HILO/MD.\n\nFrom-SVN: r25792", "tree": {"sha": "3944bbd52b2a85115171148a92ea4fb70c8758ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3944bbd52b2a85115171148a92ea4fb70c8758ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56dc4d15c417a62c298d31654d1be448b49c364a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56dc4d15c417a62c298d31654d1be448b49c364a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56dc4d15c417a62c298d31654d1be448b49c364a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56dc4d15c417a62c298d31654d1be448b49c364a/comments", "author": null, "committer": null, "parents": [{"sha": "68d02aa0db810755cf0e24bc0feb49a44152a0d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d02aa0db810755cf0e24bc0feb49a44152a0d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d02aa0db810755cf0e24bc0feb49a44152a0d7"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "63c8e639971178e42f92329becc4975d240bfd9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dc4d15c417a62c298d31654d1be448b49c364a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dc4d15c417a62c298d31654d1be448b49c364a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56dc4d15c417a62c298d31654d1be448b49c364a", "patch": "@@ -1,3 +1,9 @@\n+Mon Mar 15 16:01:52 1999  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* config/misp/mips.h (REGISTER_MOVE_COST): Make the cost of moving\n+ \tfrom HI/LO/HILO/MD into general registers the same as for one\n+ \tof moving general registers to HI/LO/HILO/MD.\n+\n Mon Mar 15 12:39:38 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/m32r/m32r.c (init_idents): New function.  Initialise"}, {"sha": "b6d1dcf331043336c3000a739638685cda2a71c7", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56dc4d15c417a62c298d31654d1be448b49c364a/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56dc4d15c417a62c298d31654d1be448b49c364a/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=56dc4d15c417a62c298d31654d1be448b49c364a", "patch": "@@ -3617,7 +3617,21 @@ while (0)\n    that the constraints of the insn are met.  Setting a cost of\n    other than 2 will allow reload to verify that the constraints are\n    met.  You should do this if the `movM' pattern's constraints do\n-   not allow such copying.  */\n+   not allow such copying.\n+\n+   ??? We make make the cost of moving from HI/LO/HILO/MD into general\n+   registers the same as for one of moving general registers to\n+   HI/LO/HILO/MD for TARGET_MIPS16 in order to prevent allocating a\n+   pseudo to HI/LO/HILO/MD.  This might hurt optimizations though, it\n+   isn't clear if it is wise.  And it might not work in all cases.  We\n+   could solve the DImode LO reg problem by using a multiply, just like\n+   reload_{in,out}si.  We could solve the SImode/HImode HI reg problem\n+   by using divide instructions.  divu puts the remainder in the HI\n+   reg, so doing a divide by -1 will move the value in the HI reg for\n+   all values except -1.  We could handle that case by using a signed\n+   divide, e.g.  -1 / 2 (or maybe 1 / -2?).  We'd have to emit a\n+   compare/branch to test the input value to see which instruction we\n+   need to use.  This gets pretty messy, but it is feasible. */\n \n #define REGISTER_MOVE_COST(FROM, TO)\t\\\n   ((FROM) == M16_REGS && GR_REG_CLASS_P (TO) ? 2\t\t\t\\\n@@ -3633,7 +3647,7 @@ while (0)\n       && ((TO) == M16_REGS || (TO) == M16_NA_REGS)) ? 6\t\t\t\\\n    : (((FROM) == HI_REG || (FROM) == LO_REG\t\t\t\t\\\n        || (FROM) == MD_REGS || (FROM) == HILO_REG)\t\t\t\\\n-      && GR_REG_CLASS_P (TO)) ? (TARGET_MIPS16 ? 8 : 6)\t\t\t\\\n+      && GR_REG_CLASS_P (TO)) ? (TARGET_MIPS16 ? 12 : 6)\t\t\\\n    : (((TO) == HI_REG || (TO) == LO_REG\t\t\t\t\t\\\n        || (TO) == MD_REGS || (TO) == HILO_REG)\t\t\t\t\\\n       && GR_REG_CLASS_P (FROM)) ? (TARGET_MIPS16 ? 12 : 6)\t\t\\"}]}