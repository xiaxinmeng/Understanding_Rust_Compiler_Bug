{"sha": "2e9cb75ef7914a57214ae5b73bfa461030126dba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU5Y2I3NWVmNzkxNGE1NzIxNGFlNWI3M2JmYTQ2MTAzMDEyNmRiYQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-03-14T18:37:37Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2007-03-14T18:37:37Z"}, "message": "re PR c/21438 (Warning about division by zero depends on lexical form)\n\n2007-03-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c/21438\n\t* c-common.h (warn_for_div_by_zero): Declare.\n\t* c-common.c (warn_for_div_by_zero): Define.\n\t* c-typeck.c (build_binary_op): Call warn_for_div_zero instead of\n\twarning.\ncp/\n\t* typeck.c (build_binary_op): Call warn_for_div_zero instead of\n\twarning.\n\nFrom-SVN: r122925", "tree": {"sha": "3902ec91fa2cdd2dad08ffe58ff337ca6695c6dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3902ec91fa2cdd2dad08ffe58ff337ca6695c6dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e9cb75ef7914a57214ae5b73bfa461030126dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9cb75ef7914a57214ae5b73bfa461030126dba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e9cb75ef7914a57214ae5b73bfa461030126dba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9cb75ef7914a57214ae5b73bfa461030126dba/comments", "author": null, "committer": null, "parents": [{"sha": "925af765a6be182d51d7e1655f1f10c8a3bc30c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925af765a6be182d51d7e1655f1f10c8a3bc30c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/925af765a6be182d51d7e1655f1f10c8a3bc30c3"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "3dbd1301cec8832efcc9541fdec348e1e0d8f725", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e9cb75ef7914a57214ae5b73bfa461030126dba", "patch": "@@ -1,3 +1,11 @@\n+2007-03-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/21438\n+\t* c-common.h (warn_for_div_by_zero): Declare.\n+\t* c-common.c (warn_for_div_by_zero): Define.\n+\t* c-typeck.c (build_binary_op): Call warn_for_div_zero instead of\n+\twarning.\n+\n 2007-03-14  Richard Sandiford  <richard@codesourcery.com>\n \n \t* Makefile.in (PREPROCESSOR_DEFINES): Add directory terminators"}, {"sha": "f82a84b59145dec75bded0179580e90a77357cb9", "filename": "gcc/c-common.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2e9cb75ef7914a57214ae5b73bfa461030126dba", "patch": "@@ -7032,4 +7032,17 @@ c_build_cdtor_fns (void)\n struct gcc_targetcm targetcm = TARGETCM_INITIALIZER;\n #endif\n \n+/* Warn for division by zero according to the value of DIVISOR.  */\n+\n+void\n+warn_for_div_by_zero (tree divisor)\n+{\n+  /* If DIVISOR is zero, and has integral type, issue a warning about\n+     division by zero.  Do not issue a warning if DIVISOR has a\n+     floating-point type, since we consider 0.0/0.0 a valid way of\n+     generating a NaN.  */\n+  if (skip_evaluation == 0 && integer_zerop (divisor))\n+    warning (OPT_Wdiv_by_zero, \"division by zero\");\n+}\n+\n #include \"gt-c-common.h\""}, {"sha": "b2739c3efb325d3ca2d783e9ba00015e24876f76", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=2e9cb75ef7914a57214ae5b73bfa461030126dba", "patch": "@@ -871,6 +871,7 @@ extern void warn_array_subscript_with_type_char (tree);\n extern void warn_about_parentheses (enum tree_code, enum tree_code,\n \t\t\t\t    enum tree_code);\n extern void warn_for_unused_label (tree label);\n+extern void warn_for_div_by_zero (tree divisor);\n \n \n /* In c-gimplify.c  */"}, {"sha": "eca10668ee659b8c8c4318b91682e81ea7c5b2a8", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=2e9cb75ef7914a57214ae5b73bfa461030126dba", "patch": "@@ -7848,10 +7848,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n     case FLOOR_DIV_EXPR:\n     case ROUND_DIV_EXPR:\n     case EXACT_DIV_EXPR:\n-      /* Floating point division by zero is a legitimate way to obtain\n-\t infinities and NaNs.  */\n-      if (skip_evaluation == 0 && integer_zerop (op1))\n-\twarning (OPT_Wdiv_by_zero, \"division by zero\");\n+      warn_for_div_by_zero (op1);\n \n       if ((code0 == INTEGER_TYPE || code0 == REAL_TYPE\n \t   || code0 == COMPLEX_TYPE || code0 == VECTOR_TYPE)\n@@ -7891,8 +7888,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \n     case TRUNC_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n-      if (skip_evaluation == 0 && integer_zerop (op1))\n-\twarning (OPT_Wdiv_by_zero, \"division by zero\");\n+      warn_for_div_by_zero (op1);\n \n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{"}, {"sha": "5f0490c53d3f8c5c0fa4cebb780a43ba6b1d3e81", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e9cb75ef7914a57214ae5b73bfa461030126dba", "patch": "@@ -1,3 +1,9 @@\n+2007-03-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c/21438\n+\t* typeck.c (build_binary_op): Call warn_for_div_zero instead of\n+\twarning.\n+\t\n 2007-03-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* cp/repo.c (init_repo): Initialize random_seed saved options."}, {"sha": "ac6eb2b6f751721258fb3439b24d1bd5bc9d39bc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e9cb75ef7914a57214ae5b73bfa461030126dba/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2e9cb75ef7914a57214ae5b73bfa461030126dba", "patch": "@@ -3169,10 +3169,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \t{\n \t  enum tree_code tcode0 = code0, tcode1 = code1;\n \n-\t  if (TREE_CODE (op1) == INTEGER_CST && integer_zerop (op1))\n-\t    warning (OPT_Wdiv_by_zero, \"division by zero in %<%E / 0%>\", op0);\n-\t  else if (TREE_CODE (op1) == REAL_CST && real_zerop (op1))\n-\t    warning (OPT_Wdiv_by_zero, \"division by zero in %<%E / 0.%>\", op0);\n+\t  warn_for_div_by_zero (op1);\n \n \t  if (tcode0 == COMPLEX_TYPE || tcode0 == VECTOR_TYPE)\n \t    tcode0 = TREE_CODE (TREE_TYPE (TREE_TYPE (op0)));\n@@ -3206,10 +3203,7 @@ build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n \n     case TRUNC_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n-      if (code1 == INTEGER_TYPE && integer_zerop (op1))\n-\twarning (OPT_Wdiv_by_zero, \"division by zero in %<%E %% 0%>\", op0);\n-      else if (code1 == REAL_TYPE && real_zerop (op1))\n-\twarning (OPT_Wdiv_by_zero, \"division by zero in %<%E %% 0.%>\", op0);\n+      warn_for_div_by_zero (op1);\n \n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{"}]}