{"sha": "cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiODFlYzA0NWFjYWFmNmY0YTU2MmUyMTJjNmI4Yjk1ZDk4YTNlYQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-01-18T11:49:56Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-01-18T11:49:56Z"}, "message": "PR target/88799 Add +mp and +sec extensions to ARMv7-a\n\nMost armv7-a implementations support a number of basic extensions to\nthe architecture which are not particularly important to the compiler,\nbut can matter if code contains inline assembly.  This patch adds\nsupport for these extensions, based on the capabilities that GAS\nalready provides for the appropriate CPUs.  For the purposes of\nmultilib selection we ignore these extensions entirely and map the\nextended architecture versions down to the base versions we have\nalready support for.\n\ngcc:\n\tPR target/88799\n\t* config/arm/arm-cpus.in (mp): New feature.\n\t(sec): New feature.\n\t(fgroup ARMv7ve): Add mp and sec features.\n\t(arch armv7-a): Add options to allow mp and sec extensions.\n\t(cpu generic-armv7-a): Add options to allow mp and sec extensions.\n\t(cpu cortex-a5, cpu cortex-7, cpu cortex-a9): Add mp and sec\n\textenstions to the base architecture.\n\t(cpu cortex-a8): Add sec extension to the base architecture.\n\t(cpu marvell-pj4): Add mp and sec extensions to the base architecture.\n\t* config/arm/t-aprofile (MULTILIB_MATCHES): Map all armv7-a arch\n\tvariants down to the base v7-a varaint.\n\t* config/arm/t-multilib (v7_a_arch_variants): New variable.\n\t* doc/invoke.texi (ARM Options): Add +mp and +sec to the list\n\tof permitted extensions for -march=armv7-a and for\n\t-mcpu=generic-armv7-a.\n\ntestsuite:\n\t* gcc.target/arm/multilib.exp (config \"aprofile\"): Add tests for\n\tmp and sec extensions to armv7-a.\n\nFrom-SVN: r268072", "tree": {"sha": "07985bbca1b1d2869ff7507c676bcbe85835399b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07985bbca1b1d2869ff7507c676bcbe85835399b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/comments", "author": null, "committer": null, "parents": [{"sha": "756721ba89ec7090335d50dd55d105460f5913fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/756721ba89ec7090335d50dd55d105460f5913fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/756721ba89ec7090335d50dd55d105460f5913fd"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "ff87cbe5807f14a456b20f208bad4c93e3089262", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "patch": "@@ -1,3 +1,22 @@\n+2019-01-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/88799\n+\t* config/arm/arm-cpus.in (mp): New feature.\n+\t(sec): New feature.\n+\t(fgroup ARMv7ve): Add mp and sec features.\n+\t(arch armv7-a): Add options to allow mp and sec extensions.\n+\t(cpu generic-armv7-a): Add options to allow mp and sec extensions.\n+\t(cpu cortex-a5, cpu cortex-7, cpu cortex-a9): Add mp and sec\n+\textenstions to the base architecture.\n+\t(cpu cortex-a8): Add sec extension to the base architecture.\n+\t(cpu marvell-pj4): Add mp and sec extensions to the base architecture.\n+\t* config/arm/t-aprofile (MULTILIB_MATCHES): Map all armv7-a arch\n+\tvariants down to the base v7-a varaint.\n+\t* config/arm/t-multilib (v7_a_arch_variants): New variable.\n+\t* doc/invoke.texi (ARM Options): Add +mp and +sec to the list\n+\tof permitted extensions for -march=armv7-a and for\n+\t-mcpu=generic-armv7-a.\n+\n 2019-01-18  Martin Liska  <mliska@suse.cz>\n \n \t* params.def: Fix comment."}, {"sha": "f53bdab8ac9d4a7e2f1ccd9831e7ed13342185ba", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "patch": "@@ -87,6 +87,12 @@ define feature armv7em\n # Architecture rel 7.\n define feature armv7\n \n+# MP extension to ArmV7-A\n+define feature mp\n+\n+# SEC extension to ArmV7-A\n+define feature sec\n+\n # ARM division instructions.\n define feature adiv\n \n@@ -237,7 +243,7 @@ define fgroup ARMv6m      armv4 thumb armv5t armv5te armv6 be8\n define fgroup ARMv7       ARMv6m thumb2 armv7\n \n define fgroup ARMv7a      ARMv7 notm armv6k\n-define fgroup ARMv7ve     ARMv7a adiv tdiv lpae\n+define fgroup ARMv7ve     ARMv7a adiv tdiv lpae mp sec\n define fgroup ARMv7r      ARMv7a tdiv\n define fgroup ARMv7m      ARMv7 tdiv\n define fgroup ARMv7em     ARMv7m armv7em\n@@ -425,6 +431,8 @@ begin arch armv7-a\n  base 7A\n  profile A\n  isa ARMv7a\n+ option mp\t       add mp\n+ option sec\t       add sec\n # fp => VFPv3-d16, simd => neon-vfpv3\n  option fp\t       add VFPv3 FP_DBL\n  optalias vfpv3-d16    fp\n@@ -968,6 +976,8 @@ begin cpu generic-armv7-a\n  cname genericv7a\n  tune flags LDSCHED\n  architecture armv7-a+fp\n+ option mp add mp\n+ option sec add sec\n  option vfpv3-d16 add VFPv3 FP_DBL\n  option vfpv3 add VFPv3 FP_D32\n  option vfpv3-d16-fp16 add VFPv3 FP_DBL fp16conv\n@@ -987,7 +997,7 @@ end cpu generic-armv7-a\n begin cpu cortex-a5\n  cname cortexa5\n  tune flags LDSCHED\n- architecture armv7-a+neon-fp16\n+ architecture armv7-a+mp+sec+neon-fp16\n  option nosimd remove ALL_SIMD\n  option nofp remove ALL_FP\n  costs cortex_a5\n@@ -1009,7 +1019,7 @@ end cpu cortex-a7\n begin cpu cortex-a8\n  cname cortexa8\n  tune flags LDSCHED\n- architecture armv7-a+simd\n+ architecture armv7-a+sec+simd\n  option nofp remove ALL_FP\n  costs cortex_a8\n  vendor 41\n@@ -1019,7 +1029,7 @@ end cpu cortex-a8\n begin cpu cortex-a9\n  cname cortexa9\n  tune flags LDSCHED\n- architecture armv7-a+neon-fp16\n+ architecture armv7-a+mp+sec+neon-fp16\n  option nosimd remove ALL_SIMD\n  option nofp remove ALL_FP\n  costs cortex_a9\n@@ -1140,7 +1150,7 @@ end cpu cortex-m3\n \n begin cpu marvell-pj4\n  tune flags LDSCHED\n- architecture armv7-a\n+ architecture armv7-a+mp+sec\n  costs marvell_pj4\n end cpu marvell-pj4\n "}, {"sha": "1556f1b23e3f58afe2e83dd3303c2b35a14aef36", "filename": "gcc/config/arm/t-aprofile", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Fconfig%2Farm%2Ft-aprofile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Fconfig%2Farm%2Ft-aprofile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-aprofile?ref=cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "patch": "@@ -49,14 +49,26 @@ MULTILIB_REQUIRED\t+= mthumb/march=armv8-a+simd/mfloat-abi=softfp\n # Matches\n \n # Arch Matches\n+# Map all basic v7-a arch extensions to v7-a\n+MULTILIB_MATCHES\t+= $(foreach ARCH, $(v7_a_arch_variants), \\\n+\t\t\t     march?armv7-a=march?armv7-a$(ARCH))\n+\n # Map all v7-a FP variants to vfpv3-d16 (+fp)\n MULTILIB_MATCHES\t+= $(foreach ARCH, $(filter-out +fp, $(v7_a_nosimd_variants)), \\\n \t\t\t     march?armv7-a+fp=march?armv7-a$(ARCH))\n \n+MULTILIB_MATCHES\t+= $(foreach ARCHVAR, $(v7_a_arch_variants), \\\n+\t\t\t     $(foreach ARCH, $(v7_a_nosimd_variants), \\\n+\t\t\t       march?armv7-a+fp=march?armv7-a$(ARCHVAR)$(ARCH)))\n+\n # Map all v7-a SIMD variants to neon-vfpv3 (+simd)\n MULTILIB_MATCHES\t+= $(foreach ARCH, $(filter-out +simd, $(v7_a_simd_variants)), \\\n \t\t\t     march?armv7-a+simd=march?armv7-a$(ARCH))\n \n+MULTILIB_MATCHES\t+= $(foreach ARCHVAR, $(v7_a_arch_variants), \\\n+\t\t\t     $(foreach ARCH, $(v7_a_simd_variants), \\\n+\t\t\t       march?armv7-a+simd=march?armv7-a$(ARCHVAR)$(ARCH)))\n+\n # Neither FP nor SIMD: map v7ve to v7-a\n MULTILIB_MATCHES\t+= march?armv7-a=march?armv7ve\n "}, {"sha": "08526302283eea03e4a8f22a2a049e85bd7bb6af", "filename": "gcc/config/arm/t-multilib", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Fconfig%2Farm%2Ft-multilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Fconfig%2Farm%2Ft-multilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-multilib?ref=cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "patch": "@@ -60,6 +60,7 @@ all_feat_combs\t= +$(firstword $(1)) \\\n # Variables used.\n all_early_arch\t\t:= armv5tej armv6 armv6j armv6k armv6z armv6kz \\\n \t\t\t   armv6zk armv6t2 iwmmxt iwmmxt2\n+v7_a_arch_variants\t:= $(call all_feat_combs, mp sec)\n v7_a_nosimd_variants\t:= +fp +vfpv3 +vfpv3-d16-fp16 +vfpv3-fp16 +vfpv4-d16 +vfpv4\n v7_a_simd_variants\t:= +simd +neon-fp16 +neon-vfpv4\n v7ve_nosimd_variants\t:= +vfpv3-d16 +vfpv3 +vfpv3-d16-fp16 +vfpv3-fp16 +fp +vfpv4"}, {"sha": "99fd97404e1f5880759ac837363d16b1ecf09f1f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "patch": "@@ -17090,6 +17090,12 @@ Disable the floating-point instructions.\n \n @item armv7-a\n @table @samp\n+@item +mp\n+The multiprocessing extension.\n+\n+@item +sec\n+The security extension.\n+\n @item +fp\n The VFPv3 floating-point instructions, with 16 double-precision\n registers.  The extension @samp{+vfpv3-d16} can be used as an alias\n@@ -17518,11 +17524,11 @@ Enables the cryptographic instructions on @samp{cortex-a32},\n \n Additionally the @samp{generic-armv7-a} pseudo target defaults to\n VFPv3 with 16 double-precision registers.  It supports the following\n-extension options: @samp{vfpv3-d16}, @samp{vfpv3},\n-@samp{vfpv3-d16-fp16}, @samp{vfpv3-fp16}, @samp{vfpv4-d16},\n-@samp{vfpv4}, @samp{neon}, @samp{neon-vfpv3}, @samp{neon-fp16},\n-@samp{neon-vfpv4}.  The meanings are the same as for the extensions to\n-@option{-march=armv7-a}.\n+extension options: @samp{mp}, @samp{sec}, @samp{vfpv3-d16},\n+@samp{vfpv3}, @samp{vfpv3-d16-fp16}, @samp{vfpv3-fp16},\n+@samp{vfpv4-d16}, @samp{vfpv4}, @samp{neon}, @samp{neon-vfpv3},\n+@samp{neon-fp16}, @samp{neon-vfpv4}.  The meanings are the same as for\n+the extensions to @option{-march=armv7-a}.\n \n @option{-mcpu=generic-@var{arch}} is also permissible, and is\n equivalent to @option{-march=@var{arch} -mtune=generic-@var{arch}}."}, {"sha": "dbb02baff4ac202e3220fea69175164d96681a50", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "patch": "@@ -1,3 +1,9 @@\n+2019-01-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/88799\n+\t* gcc.target/arm/multilib.exp (config \"aprofile\"): Add tests for\n+\tmp and sec extensions to armv7-a.\n+\n 2019-01-18  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/no_profile_instrument_function-attr-1.c: Update"}, {"sha": "d82306ed630f2df0645ccaa43ba1f9dd3d5c72ed", "filename": "gcc/testsuite/gcc.target/arm/multilib.exp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab81ec045acaaf6f4a562e212c6b8b95d98a3ea/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmultilib.exp?ref=cab81ec045acaaf6f4a562e212c6b8b95d98a3ea", "patch": "@@ -60,6 +60,16 @@ if {[multilib_config \"aprofile\"] } {\n         {-mcpu=cortex-a7+nosimd -mfloat-abi=hard} \"thumb/v7-a+fp/hard\"\n \t{-mcpu=cortex-a7+nofp -mfloat-abi=softfp} \"thumb/v7-a/nofp\"\n \t{-mcpu=generic-armv7-a+vfpv4 -mfloat-abi=softfp} \"thumb/v7-a+fp/softfp\"\n+\t{-mcpu=generic-armv7-a+mp+vfpv4 -mfloat-abi=softfp} \"thumb/v7-a+fp/softfp\"\n+\t{-mcpu=generic-armv7-a+sec+vfpv4 -mfloat-abi=softfp} \"thumb/v7-a+fp/softfp\"\n+\t{-march=armv7-a+mp -mfloat-abi=softfp} \"thumb/v7-a/nofp\"\n+\t{-march=armv7-a+sec -mfloat-abi=softfp} \"thumb/v7-a/nofp\"\n+\t{-march=armv7-a+mp+sec -mfloat-abi=softfp} \"thumb/v7-a/nofp\"\n+\t{-march=armv7-a+sec+mp -mfloat-abi=softfp} \"thumb/v7-a/nofp\"\n+\t{-march=armv7-a+mp+vfpv4 -mfloat-abi=softfp} \"thumb/v7-a+fp/softfp\"\n+\t{-march=armv7-a+sec+fp -mfloat-abi=softfp} \"thumb/v7-a+fp/softfp\"\n+\t{-march=armv7-a+mp+sec+simd -mfloat-abi=softfp} \"thumb/v7-a+simd/softfp\"\n+\t{-march=armv7-a+sec+mp+vfpv3 -mfloat-abi=softfp} \"thumb/v7-a+fp/softfp\"\n \t{-march=armv7ve+vfpv3 -mfloat-abi=hard} \"thumb/v7-a+fp/hard\"\n \t{-march=armv7ve -mfloat-abi=softfp -mfpu=neon} \"thumb/v7-a+simd/softfp\"\n \t{-march=armv7ve -mfloat-abi=softfp -mfpu=neon-vfpv4} \"thumb/v7ve+simd/softfp\"\n@@ -377,6 +387,10 @@ if {[multilib_config \"aprofile\"] } {\n \t{-mcpu=cortex-a15 -mfpu=neon-fp-armv8 -mfloat-abi=softfp -mthumb} \"thumb/v7ve+simd/softfp\"\n \t{-mcpu=cortex-a53 -mfpu=neon-fp-armv8 -mfloat-abi=softfp -mthumb} \"thumb/v8-a+simd/softfp\"\n \t{-march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=hard -mthumb} \"thumb/v7-a+fp/hard\"\n+\t{-march=armv7-a+mp -mfpu=vfpv3-d16 -mfloat-abi=hard -mthumb} \"thumb/v7-a+fp/hard\"\n+\t{-march=armv7-a+sec -mfpu=vfpv3-d16 -mfloat-abi=hard -mthumb} \"thumb/v7-a+fp/hard\"\n+\t{-march=armv7-a+mp+sec -mfpu=vfpv3-d16 -mfloat-abi=hard -mthumb} \"thumb/v7-a+fp/hard\"\n+\t{-march=armv7-a+sec+mp -mfpu=vfpv3-d16 -mfloat-abi=hard -mthumb} \"thumb/v7-a+fp/hard\"\n \t{-march=armv8-a -mfpu=vfpv3-d16 -mfloat-abi=hard -mthumb} \"thumb/v8-a+simd/hard\"\n \t{-march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp -mthumb} \"thumb/v7-a+fp/softfp\"\n \t{-march=armv8-a -mfpu=vfpv3-d16 -mfloat-abi=softfp -mthumb} \"thumb/v8-a+simd/softfp\""}]}