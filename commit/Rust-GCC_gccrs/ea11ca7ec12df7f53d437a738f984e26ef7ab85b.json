{"sha": "ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWExMWNhN2VjMTJkZjdmNTNkNDM3YTczOGY5ODRlMjZlZjdhYjg1Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.soma.redhat.com", "date": "2000-06-09T16:23:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-06-09T16:23:47Z"}, "message": "timevar.def: Add TV_EXPAND.\n\n        * timevar.def: Add TV_EXPAND.\n        * timevar.c (timevar_print): Update timing information.\n        * calls.c (try_to_integrate): Push to TV_INTEGRATION for inlining.\n\n        * stmt.c (expand_return): Check for error_mark_node.\n\ncp/:\n        * semantics.c (expand_body): Push to TV_EXPAND.\n        * optimize.c (optimize_function): Push to TV_INTEGRATION.\n        * decl.c (start_function): Always call announce_function.\n\n        * tinfo2.cc: Just declare abort.\n\nFrom-SVN: r34470", "tree": {"sha": "0298128e12299bf28f76cc3ef5ad263e2fa59173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0298128e12299bf28f76cc3ef5ad263e2fa59173"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/comments", "author": null, "committer": null, "parents": [{"sha": "6efa15825eea54fa389d7b385f4f87e689ab61bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6efa15825eea54fa389d7b385f4f87e689ab61bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6efa15825eea54fa389d7b385f4f87e689ab61bc"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "eb2a6ba1c343db50c828a9b9c197a10c312894fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "patch": "@@ -1,3 +1,11 @@\n+2000-06-09  Jason Merrill  <jason@casey.soma.redhat.com>\n+\n+\t* timevar.def: Add TV_EXPAND.\n+\t* timevar.c (timevar_print): Update timing information.\n+\t* calls.c (try_to_integrate): Push to TV_INTEGRATION for inlining.\n+\n+\t* stmt.c (expand_return): Check for error_mark_node.\n+\n 2000-06-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* configure.in: Also avoid wrapping auto-build.h with IN_GCC."}, {"sha": "27bd5fc9de006675f18e779239876989c151cb08", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "patch": "@@ -31,6 +31,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"tm_p.h\"\n+#include \"timevar.h\"\n \n #ifndef ACCUMULATE_OUTGOING_ARGS\n #define ACCUMULATE_OUTGOING_ARGS 0\n@@ -1733,7 +1734,7 @@ load_register_parameters (args, num_actuals, call_fusage, flags)\n     }\n }\n \n-/* Try to integreate function.  See expand_inline_function for documentation\n+/* Try to integrate function.  See expand_inline_function for documentation\n    about the parameters.  */\n \n static rtx\n@@ -1761,10 +1762,14 @@ try_to_integrate (fndecl, actparms, target, ignore, type, structure_value_addr)\n \n   before_call = get_last_insn ();\n \n+  timevar_push (TV_INTEGRATION);\n+\n   temp = expand_inline_function (fndecl, actparms, target,\n \t\t\t\t ignore, type,\n \t\t\t\t structure_value_addr);\n \n+  timevar_pop (TV_INTEGRATION);\n+\n   /* If inlining succeeded, return.  */\n   if (temp != (rtx) (HOST_WIDE_INT) - 1)\n     {"}, {"sha": "b05f3396017ac3db683f663d397bf9fb016645ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "patch": "@@ -1,3 +1,11 @@\n+2000-06-09  Jason Merrill  <jason@casey.soma.redhat.com>\n+\n+\t* semantics.c (expand_body): Push to TV_EXPAND.\n+\t* optimize.c (optimize_function): Push to TV_INTEGRATION.\n+\t* decl.c (start_function): Always call announce_function.\n+\n+\t* tinfo2.cc: Just declare abort.\n+\n 2000-06-09  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* lex.c (DEF_OPERATOR): Say `operator@' -not- `operator @'"}, {"sha": "73e5a61f9423fd523b33d2cb6de185d7e073eba3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "patch": "@@ -13649,8 +13649,7 @@ start_function (declspecs, declarator, attrs, flags)\n     begin_stmt_tree (&DECL_SAVED_TREE (decl1));\n \n   /* Let the user know we're compiling this function.  */\n-  if (processing_template_decl || !building_stmt_tree ())\n-    announce_function (decl1);\n+  announce_function (decl1);\n \n   /* Record the decl so that the function name is defined.\n      If we already have a decl for this name, and it is a FUNCTION_DECL,"}, {"sha": "b44620733331a560e7ae21d67df5e3c1be2122c5", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "patch": "@@ -28,6 +28,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"input.h\"\n #include \"integrate.h\"\n #include \"varray.h\"\n+#include \"timevar.h\"\n \n /* To Do:\n \n@@ -806,6 +807,8 @@ optimize_function (fn)\n       tree prev_fn;\n       struct saved_scope *s;\n \n+      timevar_push (TV_INTEGRATION);\n+      \n       /* Clear out ID.  */\n       memset (&id, 0, sizeof (id));\n \n@@ -836,6 +839,8 @@ optimize_function (fn)\n       /* Clean up.  */\n       VARRAY_FREE (id.fns);\n       VARRAY_FREE (id.target_exprs);\n+\n+      timevar_pop (TV_INTEGRATION);\n     }\n }\n "}, {"sha": "7d9e1dae9f84ba2e7bfad07f523d46dbd30149fa", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "patch": "@@ -35,6 +35,7 @@\n #include \"ggc.h\"\n #include \"rtl.h\"\n #include \"output.h\"\n+#include \"timevar.h\"\n \n /* There routines provide a modular interface to perform many parsing\n    operations.  They may therefore be used during actual parsing, or\n@@ -2788,6 +2789,8 @@ expand_body (fn)\n       return;\n     }\n \n+  timevar_push (TV_EXPAND);\n+\n   /* Optimize the body of the function before expanding it.  */\n   optimize_function (fn);\n \n@@ -2838,4 +2841,6 @@ expand_body (fn)\n   /* And restore the current source position.  */\n   lineno = saved_lineno;\n   input_filename = saved_input_filename;\n+\n+  timevar_pop (TV_EXPAND);\n }"}, {"sha": "39fe98c3be67970842e50da016a9dabe3edcc1db", "filename": "gcc/cp/tinfo2.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcp%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fcp%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo2.cc?ref=ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "patch": "@@ -28,10 +28,12 @@\n // the GNU General Public License.\n \n #include <stddef.h>\n-#include <stdlib.h>\t\t// for abort\n #include \"tinfo.h\"\n #include \"new\"\t\t\t// for placement new\n \n+// We can't rely on having stdlib.h if we're freestanding.\n+extern \"C\" void abort ();\n+\n using std::type_info;\n \n #if !defined(__GXX_ABI_VERSION) || __GXX_ABI_VERSION < 100"}, {"sha": "41a1b4f2db2b5ce04d26826fb225787a6a12c803", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "patch": "@@ -2844,7 +2844,9 @@ expand_return (retval)\n   cleanups = 1;\n #endif\n \n-  if (TREE_CODE (retval) == RESULT_DECL)\n+  if (retval == error_mark_node)\n+    retval_rhs = NULL_TREE;\n+  else if (TREE_CODE (retval) == RESULT_DECL)\n     retval_rhs = retval;\n   else if ((TREE_CODE (retval) == MODIFY_EXPR || TREE_CODE (retval) == INIT_EXPR)\n \t   && TREE_CODE (TREE_OPERAND (retval, 0)) == RESULT_DECL)"}, {"sha": "44ea96f35aba5fb3de7117cb1d9fd5a401620356", "filename": "gcc/timevar.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "patch": "@@ -405,10 +405,28 @@ timevar_print (fp)\n #if defined (HAVE_USER_TIME) || defined (HAVE_SYS_TIME) || defined (HAVE_WALL_TIME)\n   timevar_id_t id;\n   struct timevar_time_def *total = &timevars[TV_TOTAL].elapsed;\n+  struct timevar_time_def now;\n \n   if (!TIMEVAR_ENABLE)\n     return;\n \n+  /* Update timing information in case we're calling this from GDB.  */\n+\n+  if (fp == 0)\n+    fp = stderr;\n+\n+  /* What time is it?  */\n+  get_time (&now);\n+\n+  /* If the stack isn't empty, attribute the current elapsed time to\n+     the old topmost element.  */\n+  if (stack)\n+    timevar_accumulate (&stack->timevar->elapsed, &start_time, &now);\n+\n+  /* Reset the start time; from now on, time is attributed to\n+     TIMEVAR. */\n+  start_time = now;\n+\n   fprintf (fp, \"\\nExecution times (seconds)\\n\");\n   for (id = 0; id < TIMEVAR_LAST; ++id)\n     {"}, {"sha": "2f3458a91110574b1bd510e908109a0782d0f54c", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea11ca7ec12df7f53d437a738f984e26ef7ab85b/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=ea11ca7ec12df7f53d437a738f984e26ef7ab85b", "patch": "@@ -41,6 +41,7 @@ DEFTIMEVAR (TV_DUMP                  , \"dump files\")\n \n /* Timing in various stages of the compiler.  */\n DEFTIMEVAR (TV_PARSE                 , \"parser\")\n+DEFTIMEVAR (TV_EXPAND\t\t     , \"expand\")\n DEFTIMEVAR (TV_VARCONST              , \"varconst\")\n DEFTIMEVAR (TV_INTEGRATION           , \"integration\")\n DEFTIMEVAR (TV_JUMP                  , \"jump\")"}]}