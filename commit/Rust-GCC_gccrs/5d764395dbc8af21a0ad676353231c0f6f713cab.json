{"sha": "5d764395dbc8af21a0ad676353231c0f6f713cab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3NjQzOTVkYmM4YWYyMWEwYWQ2NzYzNTMyMzFjMGY2ZjcxM2NhYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-08-17T01:17:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-08-17T01:17:24Z"}, "message": "semantics.c (finish_then_clause): Remove redundant assignment.\n\n        * semantics.c (finish_then_clause): Remove redundant assignment.\n        (finish_if_stmt, begin_switch_stmt, finish_switch_stmt): Move the\n        extra binding level outside the if/switch statement.\n        (finish_while_cond, finish_for_cond): Rewrite complex condition\n        into the loop body.\n\nFrom-SVN: r56402", "tree": {"sha": "5227e9d5ae983a3a54a2e3d6370a99653daa42db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5227e9d5ae983a3a54a2e3d6370a99653daa42db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d764395dbc8af21a0ad676353231c0f6f713cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d764395dbc8af21a0ad676353231c0f6f713cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d764395dbc8af21a0ad676353231c0f6f713cab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d764395dbc8af21a0ad676353231c0f6f713cab/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8aa5074e79a708a7ef26c5931a1f6485a0726042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa5074e79a708a7ef26c5931a1f6485a0726042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aa5074e79a708a7ef26c5931a1f6485a0726042"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "3c91c431a147f7ca34f34947f5d1136cade5b54b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d764395dbc8af21a0ad676353231c0f6f713cab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d764395dbc8af21a0ad676353231c0f6f713cab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d764395dbc8af21a0ad676353231c0f6f713cab", "patch": "@@ -1,3 +1,11 @@\n+2002-08-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* semantics.c (finish_then_clause): Remove redundant assignment.\n+\t(finish_if_stmt, begin_switch_stmt, finish_switch_stmt): Move the\n+\textra binding level outside the if/switch statement.\n+\t(finish_while_cond, finish_for_cond): Rewrite complex condition\n+\tinto the loop body.\n+\n 2002-08-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* parse.y (sizeof, alignof, typeof): New non-terminals to"}, {"sha": "9efc7de8570c87d65da74adb774bd69a171f0f74", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d764395dbc8af21a0ad676353231c0f6f713cab/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d764395dbc8af21a0ad676353231c0f6f713cab/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5d764395dbc8af21a0ad676353231c0f6f713cab", "patch": "@@ -266,7 +266,6 @@ finish_then_clause (if_stmt)\n      tree if_stmt;\n {\n   RECHAIN_STMTS (if_stmt, THEN_CLAUSE (if_stmt));\n-  last_tree = if_stmt;\n   return if_stmt;\n }\n \n@@ -292,21 +291,8 @@ finish_else_clause (if_stmt)\n void \n finish_if_stmt ()\n {\n-  do_poplevel ();\n   finish_stmt ();\n-}\n-\n-void\n-clear_out_block ()\n-{\n-  /* If COND wasn't a declaration, clear out the\n-     block we made for it and start a new one here so the\n-     optimization in expand_end_loop will work.  */\n-  if (getdecls () == NULL_TREE)\n-    {\n-      do_poplevel ();\n-      do_pushlevel ();\n-    }\n+  do_poplevel ();\n }\n \n /* Begin a while-statement.  Returns a newly created WHILE_STMT if\n@@ -331,8 +317,26 @@ finish_while_stmt_cond (cond, while_stmt)\n      tree while_stmt;\n {\n   cond = maybe_convert_cond (cond);\n-  FINISH_COND (cond, while_stmt, WHILE_COND (while_stmt));\n-  clear_out_block ();\n+  if (getdecls () == NULL_TREE)\n+    /* It was a simple condition; install it.  */\n+    WHILE_COND (while_stmt) = cond;\n+  else\n+    {\n+      /* If there was a declaration in the condition, we can't leave it\n+\t there; transform\n+\t    while (A x = 42) { }\n+\t to\n+\t    while (true) { A x = 42; if (!x) break; }  */\n+      tree if_stmt;\n+      WHILE_COND (while_stmt) = boolean_true_node;\n+\n+      if_stmt = begin_if_stmt ();\n+      cond = build_unary_op (TRUTH_NOT_EXPR, cond, 0);\n+      finish_if_stmt_cond (cond, if_stmt);\n+      finish_break_stmt ();\n+      finish_then_clause (if_stmt);\n+      finish_if_stmt ();\n+    }\n }\n \n /* Finish a while-statement, which may be given by WHILE_STMT.  */\n@@ -448,8 +452,26 @@ finish_for_cond (cond, for_stmt)\n      tree for_stmt;\n {\n   cond = maybe_convert_cond (cond);\n-  FINISH_COND (cond, for_stmt, FOR_COND (for_stmt));\n-  clear_out_block ();\n+  if (getdecls () == NULL_TREE)\n+    /* It was a simple condition; install it.  */\n+    FOR_COND (for_stmt) = cond;\n+  else\n+    {\n+      /* If there was a declaration in the condition, we can't leave it\n+\t there; transform\n+\t    for (; A x = 42;) { }\n+\t to\n+\t    for (;;) { A x = 42; if (!x) break; }  */\n+      tree if_stmt;\n+      FOR_COND (for_stmt) = NULL_TREE;\n+\n+      if_stmt = begin_if_stmt ();\n+      cond = build_unary_op (TRUTH_NOT_EXPR, cond, 0);\n+      finish_if_stmt_cond (cond, if_stmt);\n+      finish_break_stmt ();\n+      finish_then_clause (if_stmt);\n+      finish_if_stmt ();\n+    }\n }\n \n /* Finish the increment-EXPRESSION in a for-statement, which may be\n@@ -502,9 +524,9 @@ tree\n begin_switch_stmt ()\n {\n   tree r;\n+  do_pushlevel ();\n   r = build_stmt (SWITCH_STMT, NULL_TREE, NULL_TREE, NULL_TREE);\n   add_stmt (r);\n-  do_pushlevel ();\n   return r;\n }\n \n@@ -560,8 +582,8 @@ finish_switch_stmt (switch_stmt)\n {\n   RECHAIN_STMTS (switch_stmt, SWITCH_BODY (switch_stmt));\n   pop_switch (); \n-  do_poplevel ();\n   finish_stmt ();\n+  do_poplevel ();\n }\n \n /* Generate the RTL for T, which is a TRY_BLOCK. */"}]}