{"sha": "f963b5d977a838a7e219bbf7b94f22fd79058a51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2M2I1ZDk3N2E4MzhhN2UyMTliYmY3Yjk0ZjIyZmQ3OTA1OGE1MQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-10-02T18:46:45Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-10-02T18:46:45Z"}, "message": "re PR rtl-optimization/6627 (-fno-align-functions regression from 2.95)\n\n\n\tPR optimization/6627\n\t* toplev.c (force_align_functions_log): New global variable.\n\t* flags.h (force_align_functions_log): Add extern prototype.\n\t* varasm.c (assemble_start_function): Use it to force minimum\n\tfunction alignment.\n\t* config/i386/i386.h (FUNCTION_BOUNDARY): Set the correct\n\tminimum function alignment to one byte.\n\t(TARGET_PTRMEMFUNC_VBIT_LOCATION): Store the virtual bit in\n\tthe least significant bit of vtable member function pointers.\n\t* tree.h (enum ptrmemfunc_vbit_where_t): Move definition to\n\there from cp/cp-tree.h.\n\n\t* cp/cp-tree.h (enum ptrmemfunc_vbit_where_t): Delete definition\n\tfrom here, and move it to tree.h.\n\t* cp/decl.c (cxx_init_decl_processing): If storing the vbit\n\tin function pointers, ensure that force_align_functions_log\n\tis atleast one.\n\n\t* java/lang.c (java_init): If storing the vbit in function\n\tpointers, ensure that force_align_functions_log is atleast\n\tone to aid compatability with g++ vtables.\n\nFrom-SVN: r57745", "tree": {"sha": "f72d300500fae0fe8ccdc82f9dfd48580a10d90f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f72d300500fae0fe8ccdc82f9dfd48580a10d90f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f963b5d977a838a7e219bbf7b94f22fd79058a51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f963b5d977a838a7e219bbf7b94f22fd79058a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f963b5d977a838a7e219bbf7b94f22fd79058a51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f963b5d977a838a7e219bbf7b94f22fd79058a51/comments", "author": null, "committer": null, "parents": [{"sha": "327d975a3af27d13a179712ed162e72e19e86b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/327d975a3af27d13a179712ed162e72e19e86b33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/327d975a3af27d13a179712ed162e72e19e86b33"}], "stats": {"total": 113, "additions": 85, "deletions": 28}, "files": [{"sha": "346cb9b39a13283ce1062c62ded7ee5ace08bc4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -1,3 +1,17 @@\n+2002-10-02  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/6627\n+\t* toplev.c (force_align_functions_log): New global variable.\n+\t* flags.h (force_align_functions_log): Add extern prototype.\n+\t* varasm.c (assemble_start_function): Use it to force minimum\n+\tfunction alignment.\n+\t* config/i386/i386.h (FUNCTION_BOUNDARY): Set the correct\n+\tminimum function alignment to one byte.\n+\t(TARGET_PTRMEMFUNC_VBIT_LOCATION): Store the virtual bit in\n+\tthe least significant bit of vtable member function pointers.\n+\t* tree.h (enum ptrmemfunc_vbit_where_t): Move definition to\n+\there from cp/cp-tree.h.\n+\n 2002-10-02  Matt Austern  <austern@apple.com>\n \t* cp/decl.c (walk_vtables_r): Fixed typo that caused result to\n \tnever get a nonzero value."}, {"sha": "a59168bd898e6fa56ae23c8d345aecf609e7a682", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -695,8 +695,11 @@ extern int x86_prefetch_sse;\n #define FORCE_PREFERRED_STACK_BOUNDARY_IN_MAIN \\\n   (ix86_preferred_stack_boundary > STACK_BOUNDARY && !TARGET_64BIT)\n \n-/* Allocation boundary for the code of a function.  */\n-#define FUNCTION_BOUNDARY 16\n+/* Minimum allocation boundary for the code of a function.  */\n+#define FUNCTION_BOUNDARY 8\n+\n+/* C++ stores the virtual bit in the lowest bit of function pointers.  */\n+#define TARGET_PTRMEMFUNC_VBIT_LOCATION ptrmemfunc_vbit_in_pfn\n \n /* Alignment of field after `int : 0' in a structure.  */\n "}, {"sha": "16c986504dfb63d44acfed95006139b48735935a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -1,3 +1,12 @@\n+2002-10-02  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/6627\n+\t* cp-tree.h (enum ptrmemfunc_vbit_where_t): Delete definition\n+\tfrom here, and move it to tree.h.\n+\t* decl.c (cxx_init_decl_processing): If storing the vbit\n+\tin function pointers, ensure that force_align_functions_log\n+\tis atleast one.\n+\n 2002-10-01  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (cp_finish_decl): Make sure array types are laid out,"}, {"sha": "db19e539da46f1539513b8c9fbc8f717b9e31dc4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -2540,32 +2540,6 @@ struct lang_decl GTY(())\n    member function. [expr.unary.op]/3 */\n #define PTRMEM_OK_P(NODE) TREE_LANG_FLAG_0 (NODE)\n \n-/* A pointer-to-function member type looks like:\n-\n-     struct {\n-       __P __pfn;\n-       ptrdiff_t __delta;\n-     };\n-\n-   If __pfn is NULL, it is a NULL pointer-to-member-function.\n-  \n-   (Because the vtable is always the first thing in the object, we\n-   don't need its offset.)  If the function is virtual, then PFN is\n-   one plus twice the index into the vtable; otherwise, it is just a\n-   pointer to the function.\n-\n-   Unfortunately, using the lowest bit of PFN doesn't work in\n-   architectures that don't impose alignment requirements on function\n-   addresses, or that use the lowest bit to tell one ISA from another,\n-   for example.  For such architectures, we use the lowest bit of\n-   DELTA instead of the lowest bit of the PFN, and DELTA will be\n-   multiplied by 2.  */\n-enum ptrmemfunc_vbit_where_t\n-{\n-  ptrmemfunc_vbit_in_pfn,\n-  ptrmemfunc_vbit_in_delta\n-};\n-\n /* Get the POINTER_TYPE to the METHOD_TYPE associated with this\n    pointer to member function.  TYPE_PTRMEMFUNC_P _must_ be true,\n    before using this macro.  */"}, {"sha": "e095f07c239d4c0e6a30b87a783777db4ebf3d3d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -6510,6 +6510,12 @@ cxx_init_decl_processing ()\n       flag_inline_functions = 0;\n     }\n \n+  /* Force minimum function alignment if using the least significant\n+     bit of function pointers to store the virtual bit.  */\n+  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n+      && force_align_functions_log < 1)\n+    force_align_functions_log = 1;\n+\n   /* Initially, C.  */\n   current_lang_name = lang_name_c;\n "}, {"sha": "e0e7b09a1687d8fc6770ef22b658b3ad03aa2284", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -616,6 +616,10 @@ extern int align_labels_max_skip;\n extern int align_functions;\n extern int align_functions_log;\n \n+/* Like align_functions_log above, but used by front-ends to force the\n+   minimum function alignment.  Zero means no alignment is forced.  */\n+extern int force_align_functions_log;\n+\n /* Nonzero if we dump in VCG format, not plain text.  */\n extern int dump_for_graph;\n "}, {"sha": "1c1c1d09154c0be1d424cc21f6c3afe308a8a1f1", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -1,3 +1,10 @@\n+2002-10-02  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/6627\n+\t* lang.c (java_init): If storing the vbit in function\n+\tpointers, ensure that force_align_functions_log is atleast\n+\tone to aid compatability with g++ vtables.\n+\n 2002-10-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* jcf-dump.c (print_constant, case CONSTANT_float): Don't fall"}, {"sha": "706b4f12776bb685731eb247be96969c637dedc4", "filename": "gcc/java/lang.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -516,6 +516,13 @@ java_init (filename)\n   if (flag_inline_functions)\n     flag_inline_trees = 1;\n \n+  /* Force minimum function alignment if g++ uses the least significant\n+     bit of function pointers to store the virtual bit. This is required\n+     to keep vtables compatible.  */\n+  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n+      && force_align_functions_log < 1)\n+    force_align_functions_log = 1;\n+\n   /* Open input file.  */\n \n   if (filename == 0 || !strcmp (filename, \"-\"))"}, {"sha": "261442714fe126434fc68e1039a167c8bce423e5", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -912,6 +912,10 @@ int align_labels_max_skip;\n int align_functions;\n int align_functions_log;\n \n+/* Like align_functions_log above, but used by front-ends to force the\n+   minimum function alignment.  Zero means no alignment is forced.  */\n+int force_align_functions_log;\n+\n /* Table of supported debugging formats.  */\n static const struct\n {"}, {"sha": "252c2bc392ef1d60f4009754d0a0d8b80cbfc886", "filename": "gcc/tree.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -2114,6 +2114,33 @@ enum tls_model {\n \n extern enum tls_model flag_tls_default;\n \f\n+/* A pointer-to-function member type looks like:\n+\n+     struct {\n+       __P __pfn;\n+       ptrdiff_t __delta;\n+     };\n+\n+   If __pfn is NULL, it is a NULL pointer-to-member-function.\n+\n+   (Because the vtable is always the first thing in the object, we\n+   don't need its offset.)  If the function is virtual, then PFN is\n+   one plus twice the index into the vtable; otherwise, it is just a\n+   pointer to the function.\n+\n+   Unfortunately, using the lowest bit of PFN doesn't work in\n+   architectures that don't impose alignment requirements on function\n+   addresses, or that use the lowest bit to tell one ISA from another,\n+   for example.  For such architectures, we use the lowest bit of\n+   DELTA instead of the lowest bit of the PFN, and DELTA will be\n+   multiplied by 2.  */\n+\n+enum ptrmemfunc_vbit_where_t\n+{\n+  ptrmemfunc_vbit_in_pfn,\n+  ptrmemfunc_vbit_in_delta\n+};\n+\f\n #define NULL_TREE (tree) NULL\n \n /* Approximate positive square root of a host double.  This is for"}, {"sha": "80d076f21d161e38dafd8adb761bdf003483e804", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f963b5d977a838a7e219bbf7b94f22fd79058a51/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f963b5d977a838a7e219bbf7b94f22fd79058a51", "patch": "@@ -1171,6 +1171,8 @@ assemble_start_function (decl, fnname)\n \n   /* Tell assembler to move to target machine's alignment for functions.  */\n   align = floor_log2 (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n+  if (align < force_align_functions_log)\n+    align = force_align_functions_log;\n   if (align > 0)\n     {\n       ASM_OUTPUT_ALIGN (asm_out_file, align);"}]}