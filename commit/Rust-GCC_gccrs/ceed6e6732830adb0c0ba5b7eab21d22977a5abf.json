{"sha": "ceed6e6732830adb0c0ba5b7eab21d22977a5abf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VlZDZlNjczMjgzMGFkYjBjMGJhNWI3ZWFiMjFkMjI5NzdhNWFiZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-05-15T10:01:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-05-15T10:01:11Z"}, "message": "re PR middle-end/61158 (negative shift at fold-const.c:12095)\n\n\tPR tree-optimization/61158\n\t* fold-const.c (fold_binary_loc): If X is zero-extended and\n\tshiftc >= prec, make sure zerobits is all ones instead of\n\tinvoking undefined behavior.\n\n\t* gcc.dg/pr61158.c: New test.\n\nFrom-SVN: r210467", "tree": {"sha": "31b84afe27a71436ba3b93702a5cb9d603f125fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31b84afe27a71436ba3b93702a5cb9d603f125fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceed6e6732830adb0c0ba5b7eab21d22977a5abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceed6e6732830adb0c0ba5b7eab21d22977a5abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceed6e6732830adb0c0ba5b7eab21d22977a5abf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceed6e6732830adb0c0ba5b7eab21d22977a5abf/comments", "author": null, "committer": null, "parents": [{"sha": "a2555c65a0f29b846038229b2f55adbb1c550ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2555c65a0f29b846038229b2f55adbb1c550ac3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2555c65a0f29b846038229b2f55adbb1c550ac3"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "3b4e9c28dda430accad1a39d6d0d9f1fc22c54da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed6e6732830adb0c0ba5b7eab21d22977a5abf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed6e6732830adb0c0ba5b7eab21d22977a5abf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ceed6e6732830adb0c0ba5b7eab21d22977a5abf", "patch": "@@ -1,12 +1,19 @@\n+2014-05-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/61158\n+\t* fold-const.c (fold_binary_loc): If X is zero-extended and\n+\tshiftc >= prec, make sure zerobits is all ones instead of\n+\tinvoking undefined behavior.\n+\n 2014-05-15  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* regcprop.h: New file.\n \t* regcprop.c (skip_debug_insn_p): New decl.\n \t(replace_oldest_value_reg): Check skip_debug_insn_p.\n-\t(copyprop_hardreg_forward_bb_without_debug_insn.): New function.\n-\t* shrink-wrap.c: include regcprop.h\n-\t(prepare_shrink_wrap):\n-\tCall copyprop_hardreg_forward_bb_without_debug_insn.\n+\t(copyprop_hardreg_forward_bb_without_debug_insn): New function.\n+\t* shrink-wrap.c: Include regcprop.h.\n+\t(prepare_shrink_wrap): Call\n+\tcopyprop_hardreg_forward_bb_without_debug_insn.\n \n 2014-05-15  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n "}, {"sha": "8f659db76a210e9860416629cf2df7345800f456", "filename": "gcc/fold-const.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed6e6732830adb0c0ba5b7eab21d22977a5abf/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed6e6732830adb0c0ba5b7eab21d22977a5abf/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ceed6e6732830adb0c0ba5b7eab21d22977a5abf", "patch": "@@ -11972,11 +11972,17 @@ fold_binary_loc (location_t loc,\n \t\t      /* See if we can shorten the right shift.  */\n \t\t      if (shiftc < prec)\n \t\t\tshift_type = inner_type;\n+\t\t      /* Otherwise X >> C1 is all zeros, so we'll optimize\n+\t\t\t it into (X, 0) later on by making sure zerobits\n+\t\t\t is all ones.  */\n \t\t    }\n \t\t}\n \t      zerobits = ~(unsigned HOST_WIDE_INT) 0;\n-\t      zerobits >>= HOST_BITS_PER_WIDE_INT - shiftc;\n-\t      zerobits <<= prec - shiftc;\n+\t      if (shiftc < prec)\n+\t\t{\n+\t\t  zerobits >>= HOST_BITS_PER_WIDE_INT - shiftc;\n+\t\t  zerobits <<= prec - shiftc;\n+\t\t}\n \t      /* For arithmetic shift if sign bit could be set, zerobits\n \t\t can contain actually sign bits, so no transformation is\n \t\t possible, unless MASK masks them all away.  In that\n@@ -11994,7 +12000,7 @@ fold_binary_loc (location_t loc,\n \t  /* ((X << 16) & 0xff00) is (X, 0).  */\n \t  if ((mask & zerobits) == mask)\n \t    return omit_one_operand_loc (loc, type,\n-\t\t\t\t     build_int_cst (type, 0), arg0);\n+\t\t\t\t\t build_int_cst (type, 0), arg0);\n \n \t  newmask = mask | zerobits;\n \t  if (newmask != mask && (newmask & (newmask + 1)) == 0)"}, {"sha": "ae257928bda007edbd72ce14d01d4f59d4df9180", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed6e6732830adb0c0ba5b7eab21d22977a5abf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed6e6732830adb0c0ba5b7eab21d22977a5abf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ceed6e6732830adb0c0ba5b7eab21d22977a5abf", "patch": "@@ -1,3 +1,8 @@\n+2014-05-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/61158\n+\t* gcc.dg/pr61158.c: New test.\n+\n 2014-05-15  Andreas Schwab  <schwab@suse.de>\n \n \t* obj-c++.dg/exceptions-3.mm: Remove check for message no longer"}, {"sha": "d0ba7f3876b9795f22d63a49b597b8fe97bb61a6", "filename": "gcc/testsuite/gcc.dg/pr61158.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceed6e6732830adb0c0ba5b7eab21d22977a5abf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61158.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceed6e6732830adb0c0ba5b7eab21d22977a5abf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61158.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61158.c?ref=ceed6e6732830adb0c0ba5b7eab21d22977a5abf", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/61158 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+unsigned long long\n+foo (unsigned int x)\n+{\n+  return ((unsigned long long) x & 0x00ff000000000000ULL) >> 40;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 0;\" \"original\" { target { ilp32 || lp64 } } } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}