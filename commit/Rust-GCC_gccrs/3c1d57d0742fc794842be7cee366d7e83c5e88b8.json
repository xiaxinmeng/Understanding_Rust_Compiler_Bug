{"sha": "3c1d57d0742fc794842be7cee366d7e83c5e88b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxZDU3ZDA3NDJmYzc5NDg0MmJlN2NlZTM2NmQ3ZTgzYzVlODhiOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-04T13:26:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-04T13:26:25Z"}, "message": "tree-ssa-pre.c (add_to_exp_gen): Adjust.\n\n2012-09-04  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (add_to_exp_gen): Adjust.\n\t(make_values_for_phi): Do not add to PHI_GEN for FRE.\n\t(compute_avail): Stop processing after adding all defs to\n\tAVAIL_OUT for FRE.\n\t(init_pre): Do not allocate not needed bitmap sets for FRE.\n\nFrom-SVN: r190930", "tree": {"sha": "5d1c7612654f99c6539d61fa0005285330832149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d1c7612654f99c6539d61fa0005285330832149"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c1d57d0742fc794842be7cee366d7e83c5e88b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1d57d0742fc794842be7cee366d7e83c5e88b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c1d57d0742fc794842be7cee366d7e83c5e88b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1d57d0742fc794842be7cee366d7e83c5e88b8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8f6d0461b7353034cd0c12334ce2a65f93fc4e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f6d0461b7353034cd0c12334ce2a65f93fc4e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f6d0461b7353034cd0c12334ce2a65f93fc4e4"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "3d20ebdf959e035fc07fda3a7148ef87fe99f4fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1d57d0742fc794842be7cee366d7e83c5e88b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1d57d0742fc794842be7cee366d7e83c5e88b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c1d57d0742fc794842be7cee366d7e83c5e88b8", "patch": "@@ -1,3 +1,11 @@\n+2012-09-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (add_to_exp_gen): Adjust.\n+\t(make_values_for_phi): Do not add to PHI_GEN for FRE.\n+\t(compute_avail): Stop processing after adding all defs to\n+\tAVAIL_OUT for FRE.\n+\t(init_pre): Do not allocate not needed bitmap sets for FRE.\n+\n 2012-09-04   Diego Novillo  <dnovillo@google.com>\n \n \tRewrite VEC_* functions as member functions of vec_t."}, {"sha": "38abbdd5a558e8190b0e3995103a6d8c9bb92541", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1d57d0742fc794842be7cee366d7e83c5e88b8/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1d57d0742fc794842be7cee366d7e83c5e88b8/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=3c1d57d0742fc794842be7cee366d7e83c5e88b8", "patch": "@@ -3786,14 +3786,15 @@ insert (void)\n static void\n add_to_exp_gen (basic_block block, tree op)\n {\n-  if (!in_fre)\n-    {\n-      pre_expr result;\n-      if (TREE_CODE (op) == SSA_NAME && ssa_undefined_value_p (op))\n-\treturn;\n-      result = get_or_alloc_expr_for_name (op);\n-      bitmap_value_insert_into_set (EXP_GEN (block), result);\n-    }\n+  pre_expr result;\n+\n+  gcc_checking_assert (!in_fre);\n+\n+  if (TREE_CODE (op) == SSA_NAME && ssa_undefined_value_p (op))\n+    return;\n+\n+  result = get_or_alloc_expr_for_name (op);\n+  bitmap_value_insert_into_set (EXP_GEN (block), result);\n }\n \n /* Create value ids for PHI in BLOCK.  */\n@@ -3805,23 +3806,23 @@ make_values_for_phi (gimple phi, basic_block block)\n \n   /* We have no need for virtual phis, as they don't represent\n      actual computations.  */\n-  if (!virtual_operand_p (result))\n+  if (virtual_operand_p (result))\n+    return;\n+\n+  pre_expr e = get_or_alloc_expr_for_name (result);\n+  add_to_value (get_expr_value_id (e), e);\n+  bitmap_value_insert_into_set (AVAIL_OUT (block), e);\n+  if (!in_fre)\n     {\n-      pre_expr e = get_or_alloc_expr_for_name (result);\n-      add_to_value (get_expr_value_id (e), e);\n+      unsigned i;\n       bitmap_insert_into_set (PHI_GEN (block), e);\n-      bitmap_value_insert_into_set (AVAIL_OUT (block), e);\n-      if (!in_fre)\n+      for (i = 0; i < gimple_phi_num_args (phi); ++i)\n \t{\n-\t  unsigned i;\n-\t  for (i = 0; i < gimple_phi_num_args (phi); ++i)\n+\t  tree arg = gimple_phi_arg_def (phi, i);\n+\t  if (TREE_CODE (arg) == SSA_NAME)\n \t    {\n-\t      tree arg = gimple_phi_arg_def (phi, i);\n-\t      if (TREE_CODE (arg) == SSA_NAME)\n-\t\t{\n-\t\t  e = get_or_alloc_expr_for_name (arg);\n-\t\t  add_to_value (get_expr_value_id (e), e);\n-\t\t}\n+\t      e = get_or_alloc_expr_for_name (arg);\n+\t      add_to_value (get_expr_value_id (e), e);\n \t    }\n \t}\n     }\n@@ -3934,6 +3935,10 @@ compute_avail (void)\n \t      bitmap_value_insert_into_set (AVAIL_OUT (block), e);\n \t    }\n \n+\t  /* That's all we need to do when doing FRE.  */\n+\t  if (in_fre)\n+\t    continue;\n+\n \t  if (gimple_has_side_effects (stmt) || stmt_could_throw_p (stmt))\n \t    continue;\n \n@@ -3992,8 +3997,7 @@ compute_avail (void)\n \n \t\t    get_or_alloc_expression_id (result);\n \t\t    add_to_value (get_expr_value_id (result), result);\n-\t\t    if (!in_fre)\n-\t\t      bitmap_value_insert_into_set (EXP_GEN (block), result);\n+\t\t    bitmap_value_insert_into_set (EXP_GEN (block), result);\n \t\t  }\n \t\tcontinue;\n \t      }\n@@ -4105,8 +4109,7 @@ compute_avail (void)\n \n \t\tget_or_alloc_expression_id (result);\n \t\tadd_to_value (get_expr_value_id (result), result);\n-\t\tif (!in_fre)\n-\t\t  bitmap_value_insert_into_set (EXP_GEN (block), result);\n+\t\tbitmap_value_insert_into_set (EXP_GEN (block), result);\n \n \t\tcontinue;\n \t      }\n@@ -4733,15 +4736,15 @@ my_rev_post_order_compute (int *post_order, bool include_entry_exit)\n       src = ei_edge (ei)->src;\n       dest = ei_edge (ei)->dest;\n \n-      /* Check if the edge destination has been visited yet.  */\n+      /* Check if the edge source has been visited yet.  */\n       if (src != ENTRY_BLOCK_PTR && ! TEST_BIT (visited, src->index))\n         {\n           /* Mark that we have visited the destination.  */\n           SET_BIT (visited, src->index);\n \n           if (EDGE_COUNT (src->preds) > 0)\n-            /* Since the DEST node has been visited for the first\n-               time, check its successors.  */\n+            /* Since the SRC node has been visited for the first\n+               time, check its predecessors.  */\n             stack[sp++] = ei_start (src->preds);\n           else\n             post_order[post_order_num++] = src->index;\n@@ -4807,9 +4810,12 @@ init_pre (bool do_fre)\n \t\t\t\t     sizeof (struct pre_expr_d), 30);\n   FOR_ALL_BB (bb)\n     {\n-      EXP_GEN (bb) = bitmap_set_new ();\n-      PHI_GEN (bb) = bitmap_set_new ();\n-      TMP_GEN (bb) = bitmap_set_new ();\n+      if (!do_fre)\n+\t{\n+\t  EXP_GEN (bb) = bitmap_set_new ();\n+\t  PHI_GEN (bb) = bitmap_set_new ();\n+\t  TMP_GEN (bb) = bitmap_set_new ();\n+\t}\n       AVAIL_OUT (bb) = bitmap_set_new ();\n     }\n "}]}