{"sha": "bbe53f03c8de1126e442866620409007c7df88fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlNTNmMDNjOGRlMTEyNmU0NDI4NjY2MjA0MDkwMDdjN2RmODhmZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-24T20:17:27Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-24T20:17:27Z"}, "message": "AncestorEvent.java, [...]: New versions from classpath.\n\n2003-06-24  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/swing/event/AncestorEvent.java,\n\tjavax/swing/event/HyperlinkEvent.java,\n\tjavax/swing/event/InternalFrameEvent.java,\n\tjavax/swing/event/ListDataEvent.java,\n\tjavax/swing/event/TableModelEvent.java,\n\tjavax/swing/event/TreeWillExpandListener.java,\n\tjavax/swing/plaf/ComponentUI.java,\n\tjavax/swing/plaf/DesktopIconUI.java,\n\tjavax/swing/plaf/DesktopPaneUI.java,\n\tjavax/swing/plaf/DimensionUIResource.java,\n\tjavax/swing/plaf/FileChooserUI.java,\n\tjavax/swing/plaf/FontUIResource.java,\n\tjavax/swing/plaf/IconUIResource.java,\n\tjavax/swing/plaf/InputMapUIResource.java,\n\tjavax/swing/plaf/InsetsUIResource.java,\n\tjavax/swing/plaf/InternalFrameUI.java,\n\tjavax/swing/plaf/LabelUI.java,\n\tjavax/swing/plaf/ListUI.java,\n\tjavax/swing/plaf/MenuBarUI.java,\n\tjavax/swing/plaf/MenuItemUI.java,\n\tjavax/swing/plaf/OptionPaneUI.java,\n\tjavax/swing/plaf/PanelUI.java,\n\tjavax/swing/plaf/ProgressBarUI.java,\n\tjavax/swing/plaf/doc-files/ComponentUI-1.dia,\n\tjavax/swing/plaf/doc-files/ComponentUI-1.png:\n\tNew versions from classpath.\n\nFrom-SVN: r68438", "tree": {"sha": "8d80296e8b413cdaf683251d6bff73920ddd04ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d80296e8b413cdaf683251d6bff73920ddd04ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbe53f03c8de1126e442866620409007c7df88fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe53f03c8de1126e442866620409007c7df88fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe53f03c8de1126e442866620409007c7df88fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe53f03c8de1126e442866620409007c7df88fe/comments", "author": null, "committer": null, "parents": [{"sha": "7aff2f289b390ebab933209b9eb1a9de5354dbfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aff2f289b390ebab933209b9eb1a9de5354dbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aff2f289b390ebab933209b9eb1a9de5354dbfe"}], "stats": {"total": 2128, "additions": 1247, "deletions": 881}, "files": [{"sha": "54f805114dc54b440c5e9909fa8de6951c0014f0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,3 +1,32 @@\n+2003-06-24  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/swing/event/AncestorEvent.java,\n+\tjavax/swing/event/HyperlinkEvent.java,\n+\tjavax/swing/event/InternalFrameEvent.java,\n+\tjavax/swing/event/ListDataEvent.java,\n+\tjavax/swing/event/TableModelEvent.java,\n+\tjavax/swing/event/TreeWillExpandListener.java,\n+\tjavax/swing/plaf/ComponentUI.java,\n+\tjavax/swing/plaf/DesktopIconUI.java,\n+\tjavax/swing/plaf/DesktopPaneUI.java,\n+\tjavax/swing/plaf/DimensionUIResource.java,\n+\tjavax/swing/plaf/FileChooserUI.java,\n+\tjavax/swing/plaf/FontUIResource.java,\n+\tjavax/swing/plaf/IconUIResource.java,\n+\tjavax/swing/plaf/InputMapUIResource.java,\n+\tjavax/swing/plaf/InsetsUIResource.java,\n+\tjavax/swing/plaf/InternalFrameUI.java,\n+\tjavax/swing/plaf/LabelUI.java,\n+\tjavax/swing/plaf/ListUI.java,\n+\tjavax/swing/plaf/MenuBarUI.java,\n+\tjavax/swing/plaf/MenuItemUI.java,\n+\tjavax/swing/plaf/OptionPaneUI.java,\n+\tjavax/swing/plaf/PanelUI.java,\n+\tjavax/swing/plaf/ProgressBarUI.java,\n+\tjavax/swing/plaf/doc-files/ComponentUI-1.dia,\n+\tjavax/swing/plaf/doc-files/ComponentUI-1.png:\n+\tNew versions from classpath.\n+\n 2003-06-24  Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/Buffer.java"}, {"sha": "7acc2881cdbd576ae2f1c8bcc36b8ba75cc84690", "filename": "libjava/javax/swing/event/AncestorEvent.java", "status": "modified", "additions": 51, "deletions": 93, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FAncestorEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FAncestorEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FAncestorEvent.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -43,99 +43,57 @@\n import javax.swing.JComponent;\n \n /**\n- * Ancestor Event\n  * @author Andrew Selkirk\n  * @author Ronald Veldema\n  */\n-public class AncestorEvent extends AWTEvent {\n-\n-\t//-------------------------------------------------------------\n-\t// Constants --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * ANCESTOR_ADDED constant\n-\t */\n-\tpublic static int ANCESTOR_ADDED\t= 0;\n-\t\n-\t/**\n-\t * ANCESTOR_MOVED constant\n-\t */\n-\tpublic static int ANCESTOR_MOVED\t= 1;\n-\n-\t/**\n-\t * ANCESTOR_REMOVED constant\n-\t */\n-\tpublic static int ANCESTOR_REMOVED\t= 2;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Source component\n-\t */\n-\tprivate JComponent\tsourceComponent\t= null;\n-\n-\t/**\n-\t * Ancestor\n-\t */\n-\tprivate Container\tancestor\t\t= null;\n-\t\n-\t/**\n-\t * Ancestor Parent\n-\t */\n-\tprivate Container\tancestorParent\t= null;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor AncestorEvent\n-\t * @param source Source component\n-\t * @param id ID\n-\t * @param ancestor ancestor\n-\t * @param ancestorParent parent ancestor\n-\t */\n-\tpublic AncestorEvent(JComponent source, int id, Container ancestor, \n-\t\t\t\t\t\tContainer ancestorParent) {\n-\t\tsuper(source, id);\n-\t\tthis.sourceComponent = source;\n-\t\tthis.ancestor \t\t= ancestor;\n-\t\tthis.ancestorParent\t= ancestorParent;\n-\t} // AncestorEvent()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Get ancestor\n-\t * @return ancestor\n-\t */\n-\tpublic Container getAncestor() {\n-\t\treturn ancestor;\n-\t} // getAncestor()\n-\n-\t/**\n-\t * Get ancestor parent\n-\t * @return ancestor parent\n-\t */\n-\tpublic Container getAncestorParent() {\n-\t\treturn ancestorParent;\n-\t} // getAncestorParent()\n-\n-\t/**\n-\t * Get component\n-\t * @return component\n-\t */\n-\tpublic JComponent getComponent() {\n-\t\treturn sourceComponent;\n-\t} // getComponent()\n-\n-\n-} // AncestorEvent\n+public class AncestorEvent extends AWTEvent\n+{\n+  private static final serialVersionUID = 4799843792513591457L;\n+  \n+  public static int ANCESTOR_ADDED = 0;\n+  public static int ANCESTOR_MOVED = 1;\n+  public static int ANCESTOR_REMOVED = 2;\n+\n+  private JComponent sourceComponent;\n+  private Container ancestor;\n+  private Container ancestorParent;\n+\n+  /**\n+   * @param source Source component\n+   * @param id ID\n+   * @param ancestor ancestor\n+   * @param ancestorParent parent ancestor\n+   */\n+  public AncestorEvent(JComponent source, int id, Container ancestor,\n+\t\t       Container ancestorParent)\n+  {\n+    super(source, id);\n+    this.sourceComponent = source;\n+    this.ancestor = ancestor;\n+    this.ancestorParent = ancestorParent;\n+  }\n+\n+  /**\n+   * Returns the ancestor of this event.\n+   */\n+  public Container getAncestor()\n+  {\n+    return ancestor;\n+  }\n+\n+  /**\n+   * Returns the ancester parent of this event.\n+   */\n+  public Container getAncestorParent()\n+  {\n+    return ancestorParent;\n+  }\n+\n+  /**\n+   * Returns the source of this event.\n+   */\n+  public JComponent getComponent()\n+  {\n+    return sourceComponent;\n+  }\n+}"}, {"sha": "a6bef2e679b57ecb9eb8a428c1f0b72bb640b644", "filename": "libjava/javax/swing/event/HyperlinkEvent.java", "status": "modified", "additions": 109, "deletions": 147, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FHyperlinkEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FHyperlinkEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FHyperlinkEvent.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -43,155 +43,117 @@\n import javax.swing.text.Element;\n \n /**\n- * HyperlinkEvent\n  * @author Andrew Selkirk\n  * @author Ronald Veldema\n  */\n public class HyperlinkEvent extends EventObject\n {\n-\n-\t//-------------------------------------------------------------\n-\t// Classes ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * EventType\n-\t */\n-\tpublic static final class EventType {\n-\n-\t\t//-------------------------------------------------------------\n-\t\t// Variables --------------------------------------------------\n-\t\t//-------------------------------------------------------------\n-\n-\t\t/**\n-\t\t * ENTERED\n-\t\t */\n-\t\tpublic static final EventType ENTERED = new EventType(\"ENTERED\"); // TODO\n-\n-\t\t/**\n-\t\t * EXITED\n-\t\t */\n-\t\tpublic static final EventType EXITED = new EventType(\"EXITED\"); // TODO\n-\n-\t\t/**\n-\t\t * ACTIVATED\n-\t\t */\n-\t\tpublic static final EventType ACTIVATED = new EventType(\"ACTIVATED\"); // TODO\n-\n-\t\t/**\n-\t\t * type\n-\t\t */\n-\t\tprivate String type;\n-\n-\n-\t\t//-------------------------------------------------------------\n-\t\t// Initialization ---------------------------------------------\n-\t\t//-------------------------------------------------------------\n-\n-\t\t/**\n-\t\t * Constructor EventType\n-\t\t * @param type TODO\n-\t\t */\n-\t\tprivate EventType(String type) {\n-\t\t\tthis.type = type;\n-\t\t} // EventType()\n-\n-\n-\t\t//-------------------------------------------------------------\n-\t\t// Methods ----------------------------------------------------\n-\t\t//-------------------------------------------------------------\n-\n-\t\t/**\n-\t\t * toString\n-\t\t * @returns String\n-\t\t */\n-\t\tpublic String toString() {\n-\t\t\treturn type; // TODO\n-\t\t} // toString()\n-\n-\n-\t} // EventType\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * type\n-\t */\n-\tprivate EventType type;\n-\n-\t/**\n-\t * url\n-\t */\n-\tprivate URL url;\n-\n-\t/**\n-\t * description\n-\t */\n-\tprivate String description;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor HyperlinkEvent\n-\t * @param source TODO\n-\t * @param type TODO\n-\t * @param url TODO\n-\t */\n-\tpublic HyperlinkEvent(Object source, EventType type, URL url) {\n-\t\tsuper(source);\n-\t\tthis.type = type;\n-\t\tthis.url = url;\n-\t\tthis.description = null;\n-\t} // HyperlinkEvent()\n-\n-\t/**\n-\t * Constructor HyperlinkEvent\n-\t * @param source TODO\n-\t * @param type TODO\n-\t * @param url TODO\n-\t * @param description TODO\n-\t */\n-\tpublic HyperlinkEvent(Object source, EventType type, URL url, String description) {\n-\t\tsuper(source);\n-\t\tthis.type = type;\n-\t\tthis.url = url;\n-\t\tthis.description = null;\n-\t} // HyperlinkEvent()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * getURL\n-\t * @returns URL\n-\t */\n-\tpublic URL getURL() {\n-\t\treturn url;\n-\t} // getURL()\n-\n-\t/**\n-\t * getEventType\n-\t * @returns EventType\n-\t */\n-\tpublic EventType getEventType() {\n-\t\treturn type;\n-\t} // getEventType()\n-\n-\t/**\n-\t * getDescription\n-\t * @returns String\n-\t */\n-\tpublic String getDescription() {\n-\t\treturn description;\n-\t} // getDescription()\n-\n-\n-} // HyperlinkEvent\n+  public static final class EventType\n+  {\n+    public static final EventType ENTERED = new EventType(\"ENTERED\"); // TODO\n+    public static final EventType EXITED = new EventType(\"EXITED\"); // TODO\n+    public static final EventType ACTIVATED = new EventType(\"ACTIVATED\"); // TODO\n+    \n+    private String type;\n+\n+    /**\n+     * Creates a new Event type.\n+     * \n+     * @param type String representing the event type.\n+     */\n+    private EventType(String type)\n+    {\n+      this.type = type;\n+    }\n+\n+    /**\n+     * Returns a <code>String</code> of this object.\n+     */\n+    public String toString()\n+    {\n+      return type;\n+    }\n+  }\n+\n+  private static final long serialVersionUID = -8168964465779154277L;\n+  \n+  private EventType type;\n+  private URL url;\n+  private String description;\n+  private Element element;\n+\n+  /**\n+   * Creates a new <code>HyperlinkEvent</code> with the given arguments.\n+   * \n+   * @param source The object this link is associated to.\n+   * @param type The type of event.\n+   * @param url The URL this link pointing too.\n+   */\n+  public HyperlinkEvent(Object source, EventType type, URL url)\n+  {\n+    this (source, type, url, null, null);\n+  }\n+\n+  /**\n+   * Creates a new <code>HyperlinkEvent</code> with the given arguments.\n+   * \n+   * @param source The object this link is associated to.\n+   * @param type The type of event.\n+   * @param url The URL this link pointing too.\n+   * @param description The description for this link.\n+   */\n+  public HyperlinkEvent(Object source, EventType type, URL url, String description)\n+  {\n+    this (source, type, url, description, null);\n+  }\n+  \n+  /**\n+   * Creates a new <code>HyperlinkEvent</code> with the given arguments.\n+   * \n+   * @param source The object this link is associated to.\n+   * @param type The type of event.\n+   * @param url The URL this link pointing too.\n+   * @param description The description for this link.\n+   * @param element The element in the document representing the anchor.\n+   */\n+  public HyperlinkEvent(Object source, EventType type, URL url, String description)\n+  {\n+    super(source);\n+    this.type = type;\n+    this.url = url;\n+    this.description = description;\n+    this.element = element;\n+  }\n+\n+  /**\n+   * Returns the element of the document repesenting this anchor.\n+   */\n+  public Element getSourceElement()\n+  {\n+    return element;\n+  }\n+  \n+  /**\n+   * Returns the URL of this event.\n+   */\n+  public URL getURL()\n+  {\n+    return url;\n+  }\n+\n+  /**\n+   * Returns the type of this event.\n+   */\n+  public EventType getEventType()\n+  {\n+    return type;\n+  }\n+\n+  /**\n+   * Returns the description of this event.\n+   */\n+  public String getDescription()\n+  {\n+    return description;\n+  }\n+}"}, {"sha": "d802cd2608332750649b27293e9e1ee673e02370", "filename": "libjava/javax/swing/event/InternalFrameEvent.java", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FInternalFrameEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FInternalFrameEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FInternalFrameEvent.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -42,73 +42,73 @@\n import javax.swing.JInternalFrame;\n \n /**\n- * InternalFrameEvent\n  * @author Andrew Selkirk\n  */\n-public class InternalFrameEvent extends AWTEvent {\n-\n-\t//-------------------------------------------------------------\n-\t// Constants --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Internal frame activated event\n-\t */\n-\tpublic static\tint\tINTERNAL_FRAME_ACTIVATED\t= 25554;\n-\n-\t/**\n-\t * Internal frame closed event\n-\t */\n-\tpublic static\tint\tINTERNAL_FRAME_CLOSED\t\t= 25551;\n-\n-\t/**\n-\t * Internal frame closing event\n-\t */\n-\tpublic static\tint\tINTERNAL_FRAME_CLOSING\t\t= 25550;\n-\n-\t/**\n-\t * Internal frame deactivated event\n-\t */\n-\tpublic static\tint\tINTERNAL_FRAME_DEACTIVATED\t= 25555;\n-\n-\t/**\n-\t * Internal frame deiconifed event\n-\t */\n-\tpublic static\tint\tINTERNAL_FRAME_DEICONIFIED\t= 25553;\n-\n-\t/**\n-\t * Internal frame frame first event\n-\t */\n-\tpublic static\tint\tINTERNAL_FRAME_FIRST\t\t= 25549;\n-\n-\t/**\n-\t * Internal frame iconified event\n-\t */\n-\tpublic static\tint\tINTERNAL_FRAME_ICONIFIED\t= 2552;\n-\n-\t/**\n-\t * Internal frame last event\n-\t */\n-\tpublic static\tint\tINTERNAL_FRAME_LAST\t\t\t= 25555;\n-\n-\t/**\n-\t * Internal frame opened event\n-\t */\n-\tpublic static\tint\tINTERNAL_FRAME_OPENED\t\t= 25550;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor InternalFrameEvent\n-\t * @param source JInternalFrame\n-\t * @param id Event ID\n-\t */\n-\tpublic InternalFrameEvent(JInternalFrame source, int id) {\n-\t\tsuper(source, id);\n-\t} // InternalFrameEvent()\n-\n-\n-} // InternalFrameEvent\n+public class InternalFrameEvent extends AWTEvent\n+{\n+  private static final serialVersionUID = 9195444901064686684L;\n+\n+  /**\n+   * Internal frame activated event\n+   */\n+  public static int INTERNAL_FRAME_ACTIVATED = 25554;\n+\n+  /**\n+   * Internal frame closed event\n+   */\n+  public static int INTERNAL_FRAME_CLOSED = 25551;\n+\n+  /**\n+   * Internal frame closing event\n+   */\n+  public static int INTERNAL_FRAME_CLOSING = 25550;\n+\n+  /**\n+   * Internal frame deactivated event\n+   */\n+  public static int INTERNAL_FRAME_DEACTIVATED = 25555;\n+\n+  /**\n+   * Internal frame deiconifed event\n+   */\n+  public static int INTERNAL_FRAME_DEICONIFIED = 25553;\n+\n+  /**\n+   * Internal frame frame first event\n+   */\n+  public static int INTERNAL_FRAME_FIRST = 25549;\n+\n+  /**\n+   * Internal frame iconified event\n+   */\n+  public static int INTERNAL_FRAME_ICONIFIED = 2552;\n+\n+  /**\n+   * Internal frame last event\n+   */\n+  public static int INTERNAL_FRAME_LAST = 25555;\n+\n+  /**\n+   * Internal frame opened event\n+   */\n+  public static int INTERNAL_FRAME_OPENED = 25550;\n+\n+  /**\n+   * Creates a <code>JInternalFrameEvent</code> object.\n+   * \n+   * @param source The source of this event.\n+   * @param id Then event ID of this event.\n+   */\n+  public InternalFrameEvent(JInternalFrame source, int id)\n+  {\n+    super(source, id);\n+  }\n+\n+  /**\n+   * Returns the <code>JInternalFrame</code> object stored in this event.\n+   */\n+  public JInternalFrame getInternalFrame()\n+  {\n+    return source;\n+  }\n+}"}, {"sha": "46f567a5e425e1d753dbba5e6c150517b9a0d301", "filename": "libjava/javax/swing/event/ListDataEvent.java", "status": "modified", "additions": 50, "deletions": 91, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FListDataEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FListDataEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FListDataEvent.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -41,99 +41,58 @@\n import java.util.EventObject;\n \n /**\n- * ListDataEvent\n  * @author Andrew Selkirk\n  * @author Ronald Veldema\n  */\n-public class ListDataEvent extends EventObject {\n-\n-\t//-------------------------------------------------------------\n-\t// Constants --------------------------------------------------\n-\t//-------------------------------------------------------------\n+public class ListDataEvent extends EventObject\n+{\n+  private static final serialVersionUID = -7131487416250401903L;\n+  \n+  public static int CONTENTS_CHANGED = 0;\n+  public static int INTERVAL_ADDED = 1;\n+  public static int INTERVAL_REMOVED = 2;\n+\n+  private int type = 0;\n+  private int index0 = 0;\n+  private int index1 = 0;\n \t\n-\t/**\n-\t * Contents changed\n-\t */\n-\tpublic static\tint\tCONTENTS_CHANGED\t= 0;\n-\n-\t/**\n-\t * Internal added\n-\t */\n-\tpublic static\tint\tINTERVAL_ADDED\t\t= 1;\n-\n-\t/**\n-\t * Interval removed\n-\t */\n-\tpublic static\tint\tINTERVAL_REMOVED\t= 2;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * type\n-\t */\n-\tprivate \t\tint\ttype\t= 0;\n-\t\n-\t/**\n-\t * index0\n-\t */\n-\tprivate \t\tint\tindex0\t= 0;\n+  /**\n+   * Creates a <code>ListDataEvent</code> object.\n+   * \n+   * @param source The source of the event.\n+   * @param type The type of the event\n+   * @param index0 Bottom of range\n+   * @param index1 Top of range\n+   */\n+  public ListDataEvent(Object source, int type, int index0, int index1)\n+  {\n+    super(source);\n+    this.type = type;\n+    this.index0 = index0;\n+    this.index1 = index1;\n+  }\n \t\n-\t/**\n-\t * index1\n-\t */\n-\tprivate \t\tint\tindex1\t= 0;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\t\n-\t/**\n-\t * Constructor ListDataEvent\n-\t * @param source Source\n-\t * @param type Event type\n-\t * @param index0 Bottom of range\n-\t * @param index1 Top of range\n-\t */\n-\tpublic ListDataEvent(Object source, int type,\n-\t\t\t\t\t\t\tint index0, int index1) {\n-\t\tsuper(source);\n-\t\tthis.type\t= type;\n-\t\tthis.index0\t= index0;\n-\t\tthis.index1\t= index1;\n-\t} // ListDataEvent()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\t\n-\t/**\n-\t * getIndex0\n-\t * @returns index0\n-\t */\n-\tpublic int getIndex0() {\n-\t\treturn index0;\n-\t} // getIndex0()\n-\n-\t/**\n-\t * getIndex1\n-\t * @returns index1\n-\t */\n-\tpublic int getIndex1() {\n-\t\treturn index1;\n-\t} // getIndex1()\n-\n-\t/**\n-\t * Event type\n-\t * @returns Event type\n-\t */\n-\tpublic int getType() {\n-\t\treturn type;\n-\t} // getType()\n-\n-\n-} // ListDataEvent\n+  /**\n+   * Returns the bottom index.\n+   */\n+  public int getIndex0()\n+  {\n+    return index0;\n+  }\n+\n+  /**\n+   * Returns the top index.\n+   */\n+  public int getIndex1()\n+  {\n+    return index1;\n+  }\n+\n+  /**\n+   * Returns the type of this event.\n+   */\n+  public int getType()\n+  {\n+    return type;\n+  }\n+}"}, {"sha": "222d194c91e1f8372f2412cec554a10c7353bfdf", "filename": "libjava/javax/swing/event/TableModelEvent.java", "status": "modified", "additions": 111, "deletions": 158, "changes": 269, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FTableModelEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FTableModelEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FTableModelEvent.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -42,163 +42,116 @@\n import javax.swing.table.TableModel;\n \n /**\n- * TableModelEvent\n  * @author Andrew Selkirk\n  */\n-public class TableModelEvent extends EventObject {\n-\n-\t//-------------------------------------------------------------\n-\t// Constants --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * ALL_COLUMNS\n-\t */\n-\tpublic static\tint\tALL_COLUMNS\t\t= -1;\n-\n-\t/**\n-\t * DELETE\n-\t */\n-\tpublic static\tint\tDELETE\t\t\t= -1;\n-\n-\t/**\n-\t * HEADER_ROW\n-\t */\n-\tpublic static\tint\tHEADER_ROW\t\t= -1;\n-\n-\t/**\n-\t * INSERT\n-\t */\n-\tpublic static\tint\tINSERT\t\t\t= 1;\n-\n-\t/**\n-\t * UPDATE\n-\t */\n-\tpublic static\tint\tUPDATE\t\t\t= 0;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Variables --------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * column\n-\t */\n-\tprotected\t\tint\tcolumn\t\t\t= 0;\n-\t\n-\t/**\n-\t * firstRow\n-\t */\n-\tprotected\t\tint firstRow\t\t= 0;\n-\t\n-\t/**\n-\t * lastRow\n-\t */\n-\tprotected\t\tint\tlastRow\t\t\t= 0;\n-\n-\t/**\n-\t * type\n-\t */\n-\tprotected\t\tint\ttype\t\t\t= 0;\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor TableModelEvent\n-\t * @param source Source object\n-\t */\n-\tpublic TableModelEvent(TableModel source) {\n-\t\tthis(source, 0, source.getRowCount(), ALL_COLUMNS, UPDATE);\n-\t} // TableModelEvent()\n-\n-\t/**\n-\t * Constructor TableModelEvent\n-\t * @param source Source table model\n-\t * @param row Updated row\n-\t */\n-\tpublic TableModelEvent(TableModel source, int row) {\n-\t\tthis(source, row, row, ALL_COLUMNS, UPDATE);\n-\t} // TableModelEvent()\n-\n-\t/**\n-\t * Constructor TableModelEvent\n-\t * @param source Source table model\n-\t * @param firstRow First row of update\n-\t * @param lastRow Last row of update\n-\t */\n-\tpublic TableModelEvent(TableModel source, int firstRow,\n-\t\t\t\t\t\t\tint lastRow) {\n-\t\tthis(source, firstRow, lastRow, ALL_COLUMNS, UPDATE);\n-\t} // TableModelEvent()\n-\n-\t/**\n-\t * Constructor TableModelEvent\n-\t * @param source Source table model\n-\t * @param firstRow First row of update\n-\t * @param lastRow Last row of update\n-\t * @param column Affected column\n-\t */\n-\tpublic TableModelEvent(TableModel source, int firstRow,\n-\t\t\t\t\t\t\tint lastRow, int column) {\n-\t\tthis(source, firstRow, lastRow, column, UPDATE);\n-\t} // TableModelEvent()\n-\n-\t/**\n-\t * Constructor TableModelEvent\n-\t * @param source Source table model\n-\t * @param firstRow First row of update\n-\t * @param lastRow Last row of update\n-\t * @param column Affected column\n-\t * @param type Type of change\n-\t */\n-\tpublic TableModelEvent(TableModel source, int firstRow,\n-\t\t\t\t\t\t\tint lastRow, int column, int type) {\n-\t\tsuper(source);\n-\t\tthis.firstRow\t= firstRow;\n-\t\tthis.lastRow\t= lastRow;\n-\t\tthis.column\t\t= column;\n-\t\tthis.type\t\t= type;\n-\t} // TableModelEvent()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * getColumn\n-\t * @returns column\n-\t */\n-\tpublic int getColumn() {\n-\t\treturn column;\n-\t} // getColumn()\n-\n-\t/**\n-\t * getFirstRow\n-\t * @returns row\n-\t */\n-\tpublic int getFirstRow() {\n-\t\treturn firstRow;\n-\t} // getFirstRow()\n-\n-\t/**\n-\t * getLastRow\n-\t * @returns row\n-\t */\n-\tpublic int getLastRow() {\n-\t\treturn lastRow;\n-\t} // getLastRow()\n-\n-\t/**\n-\t * Get type\n-\t * @returns Type of event\n-\t */\n-\tpublic int getType() {\n-\t\treturn type;\n-\t} // getType()\n-\n-\n-} // TableModelEvent\n+public class TableModelEvent extends EventObject\n+{\n+  private static final serialVersionUID = -7037680193569691706L;\n+  \n+  public static int ALL_COLUMNS = -1;\n+  public static int DELETE = -1;\n+  public static int HEADER_ROW = -1;\n+  public static int INSERT = 1;\n+  public static int UPDATE = 0;\n+\n+  protected int column = 0;\n+  protected int firstRow = 0;\n+  protected int lastRow = 0;\n+  protected int type = 0;\n+\n+  /**\n+   * Creates a <code>TableModelEvent</code> event.\n+   * \n+   * @param source The source object\n+   */\n+  public TableModelEvent(TableModel source)\n+  {\n+    this(source, 0, source.getRowCount(), ALL_COLUMNS, UPDATE);\n+  }\n+\n+  /**\n+   * Creates a <code>TableModelEvent</code> event.\n+   * \n+   * @param source The source object\n+   * @param row The updated row\n+   */\n+  public TableModelEvent(TableModel source, int row)\n+  {\n+    this(source, row, row, ALL_COLUMNS, UPDATE);\n+  }\n+\n+  /**\n+   * Creates a <code>TableModelEvent</code> event.\n+   * \n+   * @param source The source object\n+   * @param firstRow The first row of update\n+   * @param lastRow The last row of update\n+   */\n+  public TableModelEvent(TableModel source, int firstRow, int lastRow)\n+  {\n+    this(source, firstRow, lastRow, ALL_COLUMNS, UPDATE);\n+  }\n+\n+  /**\n+   * Creates a <code>TableModelEvent</code> event.\n+   * \n+   * @param source The source object\n+   * @param firstRow The first row of update\n+   * @param lastRow The last row of update\n+   * @param column The affected column\n+   */\n+  public TableModelEvent(TableModel source, int firstRow, int lastRow, int column)\n+  {\n+    this(source, firstRow, lastRow, column, UPDATE);\n+  }\n+\n+  /**\n+   * Creates a <code>TableModelEvent</code> event.\n+   * \n+   * @param source The source object\n+   * @param firstRow The first row of update\n+   * @param lastRow The last row of update\n+   * @param column The affected column\n+   * @param type The type of change\n+   */\n+  public TableModelEvent(TableModel source, int firstRow, int lastRow, int column, int type)\n+  {\n+    super(source);\n+    this.firstRow = firstRow;\n+    this.lastRow = lastRow;\n+    this.column = column;\n+    this.type = type;\n+  }\n+\n+  /**\n+   * Returns the affected column of this event.\n+   */\n+  public int getColumn()\n+  {\n+    return column;\n+  }\n+\n+  /**\n+   * Returns the first affected row of this event.\n+   */\n+  public int getFirstRow()\n+  {\n+    return firstRow;\n+  }\n+\n+  /**\n+   * Returns the last affected row of this event.\n+   */\n+  public int getLastRow()\n+  {\n+    return lastRow;\n+  }\n+\n+  /**\n+   * Returns the type of change of this event.\n+   */\n+  public int getType()\n+  {\n+    return type;\n+  }\n+}"}, {"sha": "c286fef80166a76760c1dad9a78983577eda6a41", "filename": "libjava/javax/swing/event/TreeWillExpandListener.java", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FTreeWillExpandListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fevent%2FTreeWillExpandListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fevent%2FTreeWillExpandListener.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -42,22 +42,23 @@\n import javax.swing.tree.ExpandVetoException;\n \n /**\n- * TreeWillExpandListener interface\n  * @author Andrew Selkirk\n  */\n-public interface TreeWillExpandListener extends EventListener {\n+public interface TreeWillExpandListener extends EventListener\n+{\n+  /**\n+   * Invoked whenever a node in the tree is about to be collapsed.\n+   * \n+   * @param event The tree expansion Event\n+   */\n+  public void treeWillCollapse(TreeExpansionEvent event)\n+    throws ExpandVetoException;\n \n-\t/**\n-\t * Tree will collapse\n-\t * @param event Tree Expansion Event\n-\t */\n-\tpublic void treeWillCollapse(TreeExpansionEvent event);\n-\n-\t/**\n-\t * Tree will expand\n-\t * @param event Tree Expansion Event\n-\t */\n-\tpublic void treeWillExpand(TreeExpansionEvent event);\n-\n-\n-} // TreeWillExpandListener\n+  /**\n+   * Invoked whenever a node in the tree is about to be expanded.\n+   * \n+   * @param event The tree expansion Event\n+   */\n+  public void treeWillExpand(TreeExpansionEvent event)\n+    throws ExpandVetoException;\n+}  "}, {"sha": "00832789c1fc39d5a7d879bcb57420bdfe841af2", "filename": "libjava/javax/swing/plaf/ComponentUI.java", "status": "modified", "additions": 272, "deletions": 70, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FComponentUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FComponentUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FComponentUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* ComponentUI.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,89 +38,291 @@\n \n package javax.swing.plaf;\n \n-import java.awt.*;\n-import javax.swing.border.*;\n-import javax.swing.*;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import javax.accessibility.Accessible;\n+import javax.swing.JComponent;\n \n-import javax.accessibility.*;\n \n+/**\n+ * The abstract base class for all delegates that provide the\n+ * pluggable look and feel for Swing components. User applications\n+ * should not need to access this class; it is internal to Swing\n+ * and the look-and-feel implementations.\n+ *\n+ * <p><img src=\"ComponentUI-1.png\" width=\"700\" height=\"550\"\n+ * alt=\"[UML diagram illustrating the architecture for pluggable\n+ * look and feels]\" />\n+ *\n+ * <p>Components such as {@link javax.swing.JSlider} do not directly\n+ * implement operations related to the look and feel of the user\n+ * interface, such as painting or layout. Instead, they use a delegate\n+ * object for all such tasks. In the case of <code>JSlider</code>, the\n+ * user interface would be provided by some concrete subclass of\n+ * {@link javax.swing.plaf.SliderUI}.\n+ *\n+ * <p>Soon after its creation, a <code>ComponentUI</code> will be sent\n+ * an {@link #installUI} message. The <code>ComponentUI</code> will\n+ * react by setting properties such as the border or the background\n+ * color of the <code>JComponent</code> for which it provides its\n+ * services. Soon before the end of its lifecycle, the\n+ * <code>ComponentUI</code> will receive an {@link #uninstallUI}\n+ * message, at which time the <code>ComponentUI</code> is expected to\n+ * undo any changes.\n+ *\n+ * <p>Note that the <code>ui</code> of a <code>JComponent</code>\n+ * changes whenever the user switches between look and feels.  For\n+ * example, the <code>ui</code> property of a <code>JSlider</code>\n+ * could change from an instance of <code>MetalSliderUI</code> to an\n+ * instance of <code>FooSliderUI</code>. This switch can happen at any\n+ * time, but it will always be performed from inside the Swing thread.\n+ *\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n public abstract class ComponentUI \n-    implements UIResource // ??\n {\n-    boolean contains(JComponent c, int x, int y)\n-    {\n-\treturn c.inside(x,y);\n-    }\n+  /**\n+   * Constructs a new UI delegate.\n+   */\n+  public ComponentUI()\n+  {\n+  }\n+  \n+  \n+  /**\n+   * Sets up the specified component so it conforms the the design\n+   * guidelines of the implemented look and feel. When the look and\n+   * feel changes, a <code>ComponentUI</code> delegate is created.\n+   * The delegate object then receives an <code>installUI</code>\n+   * message.\n+   *\n+   * <p>This method should perform the following tasks:\n+   *\n+   * <ul><li>Set visual properties such as borders, fonts, colors, or\n+   * icons. However, no change should be performed for those\n+   * properties whose values have been directly set by the client\n+   * application. To allow the distinction, LookAndFeels are expected\n+   * to use values that implement the {@link UIResource} marker\n+   * interface, such as {@link BorderUIResource} or {@link\n+   * ColorUIResource}.</li>\n+   *\n+   * <li>If necessary, install a {@link java.awt.LayoutManager}.</li>\n+   *\n+   * <li>Embed custom sub-components. For instance, the UI delegate\n+   * for a {@link javax.swing.JSplitPane} might install a special\n+   * component for the divider.</li>\n+   *\n+   * <li>Register event listeners.</li>\n+   *\n+   * <li>Set up properties related to keyborad navigation, such as\n+   * mnemonics or focus traversal policies.</li></ul>\n+   *\n+   * @param c the component for which this delegate will provide\n+   *        services.\n+   *\n+   * @see #uninstallUI\n+   * @see javax.swing.JComponent#setUI\n+   * @see javax.swing.JComponent#updateUI\n+   */\n+  public void installUI(JComponent c)\n+  {\n+    // The default implementation does not change any properties.\n+  }\n \n-    // this SHOULD thow an error:\n-    public static ComponentUI createUI(JComponent c)\n-    {\n-\tException e = new Exception(\"createUI from ComponentUI should never be called\");\n-\te.printStackTrace();\n-\tSystem.exit(1);\n-\treturn null;\n-    }\n \n-    public Accessible getAccessibleChild(JComponent c, int i)\n-    {\n-\t//Return the nth Accessible child of the object. \n-\treturn null;\n-    }\n+  /**\n+   * Puts the specified component into the state it had before\n+   * {@link #installUI} was called.\n+   *\n+   * @param c the component for which this delegate has provided\n+   *        services.\n+   *\n+   * @see #installUI\n+   * @see javax.swing.JComponent#setUI\n+   * @see javax.swing.JComponent#updateUI\n+   */\n+  public void uninstallUI(JComponent c)\n+  {\n+    // The default implementation does not change any properties.\n+  }\n+  \n+  \n+  /**\n+   * Paints the component according to the design guidelines\n+   * of the look and feel. Most subclasses will want to override\n+   * this method.\n+   *\n+   * @param g the graphics for painting.\n+   *\n+   * @param c the component for which this delegate performs\n+   *          services.\n+   */\n+  public void paint(Graphics g, JComponent c)\n+  {\n+  }\n   \n-    public int getAccessibleChildrenCount(JComponent c)\n-    {\n-\t//Returns the number of accessible children in the object. \n-\treturn 0;\n-    }\n   \n-    public Dimension getMaximumSize(JComponent c)\n+  /**\n+   * Fills the specified component with its background color\n+   * (unless the <code>opaque</code> property is <code>false</code>)\n+   * before calling {@link #paint}.\n+   *\n+   * <p>It is unlikely that a subclass needs to override this method.\n+   * The actual rendering should be performed by the {@link #paint}\n+   * method.\n+   *\n+   * @param g the graphics for painting.\n+   *\n+   * @param c the component for which this delegate performs\n+   *          services.\n+   *\n+   * @see #paint\n+   * @see javax.swing.JComponent#paintComponent\n+   */\n+  public void update(Graphics g, JComponent c)\n+  {\n+    if (c.isOpaque())\n     {\n-\treturn getPreferredSize(c);\n+      g.setColor(c.getBackground());\n+      g.fillRect(0, 0, c.getWidth(), c.getHeight());\n     }\n+    paint(g, c);\n+  }\n+  \n+  \n+  /**\n+   * Determines the preferred size of a component. The default\n+   * implementation returns <code>null</code>, which means that\n+   * <code>c</code>&#x2019;s layout manager should be asked to\n+   * calculate the preferred size.\n+   *\n+   * @param c the component for which this delegate performs services.\n+   *\n+   * @return the preferred size, or <code>null</code> to indicate that\n+   *         <code>c</code>&#x2019;s layout manager should be asked\n+   *         for the preferred size.\n+   */\n+  public Dimension getPreferredSize(JComponent c)\n+  {\n+    return null;\n+  }\n+  \n+  \n+  /**\n+   * Determines the minimum size of a component. The default\n+   * implementation calls {@link #getPreferredSize}, but subclasses\n+   * might want to override this.\n+   *\n+   * @param c the component for which this delegate performs services.\n+   *\n+   * @return the minimum size, or <code>null</code> to indicate that\n+   *         <code>c</code>&#x2019;s layout manager should be asked\n+   *         to calculate the minimum size.\n+   */\n+  public Dimension getMinimumSize(JComponent c)\n+  {\n+    return getPreferredSize(c);\n+  }\n \n-    public Dimension getMinimumSize(JComponent c)\n-    {\n-\treturn getPreferredSize(c);\n-    }\n \n-    public Dimension getPreferredSize(JComponent c)\n-    {\n-\treturn null;\n-    }\n+  /**\n+   * Determines the maximum size of a component. The default\n+   * implementation calls {@link #getPreferredSize}, but subclasses\n+   * might want to override this.\n+   *\n+   * @param c the component for which this delegate performs services.\n+   *\n+   * @return the maximum size, or <code>null</code> to indicate that\n+   *         <code>c</code>&#x2019;s layout manager should be asked\n+   *         to calculate the maximum size.\n+   */\n+  public Dimension getMaximumSize(JComponent c)\n+  {\n+    return getPreferredSize(c);\n+  }\n \n-    public void installUI(JComponent c)\n-    {\n-\tString id = c.getUIClassID() + \".border\";\n-\n-\tBorder s = UIManager.getBorder( id );\n-\t\n-\tif (s != null)\n-\t    {\n-\t\tc.setBorder( s );\n-\t\t//System.out.println(\"OK-INSTALL: \" + this + \", ID=\" + id + \",B=\"+s);\n-\t    }\n-\telse\n-\t    {\n-\t\t///System.out.println(\"FAIL-INSTALL: \" + this + \", \" + id);\n-\t    }\t\n-    }\n \n-    public void paint(Graphics g, JComponent c)\n-    {\n-\t//  System.out.println(\"UI-COMPONENT-> unimplemented paint: \" + c + \", UI=\"+this);\n-    }\n+  /**\n+   * Determines whether a click into the component at a specified\n+   * location is considered as having hit the component. The default\n+   * implementation checks whether the point falls into the\n+   * component&#x2019;s bounding rectangle. Some subclasses might want\n+   * to override this, for example in the case of a rounded button.\n+   *\n+   * @param c the component for which this delegate performs services.\n+   *\n+   * @param x the x coordinate of the point, relative to the local\n+   *        coordinate system of the component. Zero would be be\n+   *        component&#x2019;s left edge, irrespective of the location\n+   *        inside its parent.\n+   *\n+   * @param y the y coordinate of the point, relative to the local\n+   *        coordinate system of the component. Zero would be be\n+   *        component&#x2019;s top edge, irrespective of the location\n+   *        inside its parent.\n+   */\n+  public boolean contains(JComponent c, int x, int y)\n+  {    \n+    /* JComponent.contains calls the ui delegate for hit\n+     * testing. Therefore, endless mutual recursion would result if we\n+     * called c.contains(x, y) here.\n+     *\n+     * The previous Classpath implementation called the deprecated\n+     * method java.awt.Component.inside. In the Sun implementation, it\n+     * can be observed that inside, other than contains, does not call\n+     * the ui delegate.  But that inside() behaves different to\n+     * contains() clearly is in violation of the method contract, and\n+     * it is not something that a good implementation should rely upon\n+     * -- even if Classpath ends up being forced to replicate this\n+     * apparent bug of the Sun implementation.\n+     */\n+    return (x >= 0) && (x < c.getWidth())\n+      && (y >= 0) && (y < c.getHeight());\n+  }\n+  \n+  \n+  /**\n+   * Creates a delegate object for the specified component.  Users\n+   * should use the <code>createUI</code> method of a suitable\n+   * subclass. The implementation of <code>ComponentUI</code>\n+   * always throws an error.\n+   *\n+   * @param c the component for which a UI delegate is requested.\n+   */\n+  public static ComponentUI createUI(JComponent c)\n+  {\n+    throw new Error(\n+      \"javax.swing.plaf.ComponentUI does not implement createUI; call \"\n+      + \"createUI on a subclass.\");\n+  }\n+  \n \n-    public void uninstallUI(JComponent c)\n-    {\t\n-    }\n+  /**\n+   * Counts the number of accessible children in the component.  The\n+   * default implementation delegates the inquiry to the {@link\n+   * javax.accessibility.AccessibleContext} of <code>c</code>.\n+   *\n+   * @param c the component whose accessible children\n+   *        are to be counted.\n+   */\n+  public int getAccessibleChildrenCount(JComponent c)\n+  {\n+    return c.getAccessibleContext().getAccessibleChildrenCount();\n+  }\n \n-    public void update(Graphics g, JComponent c) {\n-        if (c.isOpaque()) {\n-            g.setColor(c.getBackground());\n-            g.fillRect(0, 0, c.getWidth(),c.getHeight());\n-        }\n-        paint(g, c);\n-    }\n-         \n-}\n \n+  /**\n+   * Returns the specified accessible child of the component. The\n+   * default implementation delegates the inquiry to the {@link\n+   * javax.accessibility.AccessibleContext} of <code>c</code>.\n+   *\n+   * @param i the index of the accessible child, starting at zero.\n+   *\n+   * @param c the component whose <code>i</code>-th accessible child\n+   *        is requested.\n+   */\n+  public Accessible getAccessibleChild(JComponent c, int i)\n+  {\n+    return c.getAccessibleContext().getAccessibleChild(i);\n+  }\n+}"}, {"sha": "0e6f63ad2cf85843934fc99d75282a9fec47e086", "filename": "libjava/javax/swing/plaf/DesktopIconUI.java", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FDesktopIconUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FDesktopIconUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FDesktopIconUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* DesktopIconUI.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,22 +38,19 @@\n package javax.swing.plaf;\n \n /**\n- * DesktopIconUI\n- * @author\tAndrew Selkirk\n- * @version\t1.0\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a desktop icon.\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public abstract class DesktopIconUI extends ComponentUI {\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor DesktopIconUI\n-\t */\n-\tpublic DesktopIconUI() {\n-\t\t// TODO\n-\t} // DesktopIconUI()\n-\n-\n-} // DesktopIconUI\n+public abstract class DesktopIconUI\n+  extends ComponentUI\n+{\n+  /**\n+   * Constructs a new <code>DesktopIconUI</code>.\n+   */\n+  public DesktopIconUI()\n+  {\n+  }\n+}"}, {"sha": "61bad7232166d0f387b391b60057822a7e4791f5", "filename": "libjava/javax/swing/plaf/DesktopPaneUI.java", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FDesktopPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FDesktopPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FDesktopPaneUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* DesktopPaneUI.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,22 +38,22 @@\n package javax.swing.plaf;\n \n /**\n- * DesktopPaneUI\n- * @author\tAndrew Selkirk\n- * @version\t1.0\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JDesktopPane</code>.\n+ *\n+ * @see javax.swing.JDesktopPane\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public abstract class DesktopPaneUI extends ComponentUI {\n+public abstract class DesktopPaneUI\n+  extends ComponentUI\n+{\n+  /**\n+   * Constructs a new <code>DesktopPaneUI</code>.\n+   */\n+  public DesktopPaneUI()\n+  {\n+  }\n+}\n \n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor DesktopPaneUI\n-\t */\n-\tpublic DesktopPaneUI() {\n-\t\t// TODO\n-\t} // DesktopPaneUI()\n-\n-\n-} // DesktopPaneUI"}, {"sha": "3f64b30abf2cb95ba3a29ff94f9b43963eb6bd1b", "filename": "libjava/javax/swing/plaf/DimensionUIResource.java", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FDimensionUIResource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FDimensionUIResource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FDimensionUIResource.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* DimensionUIResource.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,14 +37,32 @@\n \n \n package javax.swing.plaf;\n+\n import java.awt.Dimension;\n+\n /**\n- * STUBBED\n+ * A Dimension that is marked as <code>UIResource</code>, which\n+ * indicates that it has been installed by a pluggable\n+ * LookAndFeel. Such dimensions are replaced when the LookAndFeel\n+ * changes.\n+ *\n+ * @see java.awt.Dimension\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public class DimensionUIResource extends Dimension implements UIResource\n+public class DimensionUIResource\n+  extends Dimension\n+  implements UIResource\n {\n-  public DimensionUIResource(int w, int h)\n+  /**\n+   * Constructs a new DimensionUIResource, given its width and height.\n+   *\n+   * @param width the width in pixels.\n+   * @param height the height in pixels.\n+   */\n+  public DimensionUIResource(int width, int height)\n   {\n-    super(w, h);\n+    super(width, height);\n   }\n-} // class DimensionUIResource\n+}"}, {"sha": "193362ee60563234da4b62c22dbf41fec8dadd34", "filename": "libjava/javax/swing/plaf/FileChooserUI.java", "status": "modified", "additions": 94, "deletions": 69, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FFileChooserUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FFileChooserUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FFileChooserUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* FileChooserUI.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,75 +37,100 @@\n \n package javax.swing.plaf;\n \n-// Imports\n-import java.io.*;\n-import javax.swing.*;\n-import javax.swing.filechooser.*;\n+import java.io.File;\n+import javax.swing.JFileChooser;\n import javax.swing.filechooser.FileFilter;\n+import javax.swing.filechooser.FileView;\n \n /**\n- * FileChooserUI\n- * @author\tAndrew Selkirk\n- * @version\t1.0\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JFileChooser</code>.\n+ *\n+ * @see javax.swing.JFileChooser\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public abstract class FileChooserUI extends ComponentUI {\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor FileChooserUI\n-\t */\n-\tpublic FileChooserUI() {\n-\t\t// TODO\n-\t} // FileChooserUI()\n-\n-\n-\t//-------------------------------------------------------------\n-\t// Methods ----------------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * getAcceptAllFileFilter\n-\t * @param chooser TODO\n-\t * @returns FileFilter\n-\t */\n-\tpublic abstract FileFilter getAcceptAllFileFilter(JFileChooser chooser);\n-\n-\t/**\n-\t * getFileView\n-\t * @param chooser TODO\n-\t * @returns FileView\n-\t */\n-\tpublic abstract FileView getFileView(JFileChooser chooser);\n-\n-\t/**\n-\t * getApproveButtonText\n-\t * @param chooser TODO\n-\t * @returns String\n-\t */\n-\tpublic abstract String getApproveButtonText(JFileChooser chooser);\n-\n-\t/**\n-\t * getDialogTitle\n-\t * @param chooser TODO\n-\t * @returns String\n-\t */\n-\tpublic abstract String getDialogTitle(JFileChooser chooser);\n-\n-\t/**\n-\t * rescanCurrentDirectory\n-\t * @param value0 TODO\n-\t */\n-\tpublic abstract void rescanCurrentDirectory(JFileChooser chooser);\n-\n-\t/**\n-\t * ensureFileIsVisible\n-\t * @param chooser TODO\n-\t * @param file TODO\n-\t */\n-\tpublic abstract void ensureFileIsVisible(JFileChooser chooser, File file);\n-\n-\n-} // FileChooserUI\n+public abstract class FileChooserUI\n+  extends ComponentUI\n+{\n+  /**\n+   * Constructs a new <code>FileChooserUI</code>.\n+   */\n+  public FileChooserUI()\n+  {\n+  }\n+\n+  \n+  /**\n+   * Returns a <code>FileFilter</code> that accepts every file.  While\n+   * the filtering itself is not specific to any look and feel, the\n+   * text returned by <code>FileFilter.getDescription()</code> need\n+   * not be the same across all look and feels.\n+   *\n+   * @param chooser the <code>JFileChooser</code> for which\n+   *        a <code>FileFilter</code> is requested.\n+   *\n+   * @see javax.swing.JFileChooser#getAcceptAllFileFilter\n+   * @see javax.swing.filechooser.FileFilter#getDescription\n+   */\n+  public abstract FileFilter getAcceptAllFileFilter(JFileChooser chooser);\n+\n+\n+  /**\n+   * Returns a view to a file, which is able to retrieve its name,\n+   * icon, and other properties that are relevant for presenting\n+   * the file to the user.\n+   *\n+   * @param chooser the <code>JFileChooser</code> for which\n+   *        a <code>FileFilter</code> is requested.\n+   */\n+  public abstract FileView getFileView(JFileChooser chooser);\n+\n+\n+  /**\n+   * Determines which text is appropriate for the approve button\n+   * according to the design guidelines of the implemented\n+   * look and feel.\n+   *\n+   * @param chooser the <code>JFileChooser</code> whose\n+   *        button text is requested.\n+   *\n+   * @see javax.swing.JFileChoose#getApproveButtonText\n+   */\n+  public abstract String getApproveButtonText(JFileChooser chooser);\n+\n+\n+  /**\n+   * Determines which text is appropriate for the title bar of a\n+   * <code>JFileChooser</code> according to the design guidelines of\n+   * the implemented look and feel.\n+   *\n+   * @param chooser the <code>JFileChooser</code> whose\n+   *        dialog title is requested.\n+   *\n+   * @see javax.swing.JFileChoose#getDialogtitle\n+   */\n+  public abstract String getDialogTitle(JFileChooser chooser);\n+\n+\n+  /**\n+   * Refreshes the currently displayed directory.\n+   *\n+   * @param chooser the <code>JFileChooser</code> whose\n+   *        dialog title needs re-scanning.\n+   */\n+  public abstract void rescanCurrentDirectory(JFileChooser chooser);\n+\n+\n+  /**\n+   * Ensures that a specified file is visible in the\n+   * <code>JFileChooser</code>\n+   *\n+   * @param chooser the <code>JFileChooser</code> that\n+   *        should display the file <code>file</code>.\n+   *\n+   * @param file the file that needs to be made visible.\n+   */\n+  public abstract void ensureFileIsVisible(JFileChooser chooser, File file);\n+}"}, {"sha": "e906035711bb111a1687a09a873cb79a310596d0", "filename": "libjava/javax/swing/plaf/FontUIResource.java", "status": "modified", "additions": 55, "deletions": 8, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FFontUIResource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FFontUIResource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FFontUIResource.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* FontUIResource.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,18 +37,65 @@\n \n \n package javax.swing.plaf;\n+\n import java.awt.Font;\n+\n+\n /**\n- * STUBBED\n+ * A font that is marked as <code>UIResource</code>, which\n+ * indicates that it has been installed by a pluggable\n+ * LookAndFeel. Such dimensions are replaced when the LookAndFeel\n+ * changes.\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public class FontUIResource extends Font implements UIResource\n+public class FontUIResource\n+  extends Font\n+  implements UIResource\n {\n-  public FontUIResource(Font f)\n-  {\n-    super(f.getName(), f.getStyle(), f.getSize());\n-  }\n+  /**\n+   * Constructs a new <code>FontUIResource</code> given\n+   * the name, style and size of the font.\n+   *\n+   * @param name the name of the font. A number of\n+   *        &#x201c;logical&#x201d; names are supported by any Java\n+   *        implementation. These are\n+   *        <code>&#x201c;Dialog&#x201d;</code>,\n+   *        <code>&#x201c;DialogInput&#x201d;</code>,\n+   *        <code>&#x201c;Monospaced&#x201d;</code>,\n+   *        <code>&#x201c;Serif&#x201d;</code>, and\n+   *        <code>&#x201c;SansSerif&#x201d;</code>.\n+   *\n+   * @param style the style of the font, for instance {@link\n+   *        java.awt.Font#BOLD} or {@link java.awt.Font#PLAIN}.\n+   *\n+   * @param size the size of the font in typographic points, for\n+   *        instance 10, 12 or 13. Designers of LookAndFeels should be\n+   *        aware that some languages (like Japanese and Chinese) have\n+   *        glyphs that are too complex to be legible at small point\n+   *        sizes.\n+   */\n   public FontUIResource(String name, int style, int size)\n   {\n     super(name, style, size);\n   }\n-} // class FontUIResource\n+\n+\n+  /**\n+   * Constructs a new <code>FontUIResource</code> given\n+   * an existing font.\n+   *\n+   * @param f the font that serves as a template.\n+   */\n+  public FontUIResource(Font f)\n+  {\n+    /* This implementation will get rid of many font properties,\n+     * such as skewing, values of multiple master design axes,\n+     * etc.,  unless they get encoded into the name.  It probably\n+     * is not a problem for LookAndFeels because user interfaces\n+     * are usually not very advanced with respect to typography.\n+     */\n+    super(f.getName(), f.getStyle(), f.getSize());\n+  }\n+}"}, {"sha": "7097d8797907d04525d860419bb685b192f2c779", "filename": "libjava/javax/swing/plaf/IconUIResource.java", "status": "modified", "additions": 63, "deletions": 6, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FIconUIResource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FIconUIResource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FIconUIResource.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* IconUIResource.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,29 +37,86 @@\n \n \n package javax.swing.plaf;\n+\n import java.awt.Component;\n import java.awt.Graphics;\n import java.io.Serializable;\n import javax.swing.Icon;\n+\n+\n /**\n- * STUBBED\n+ * An icon that is marked as <code>UIResource</code>, which\n+ * indicates that it has been installed by a pluggable\n+ * LookAndFeel. Such icons are replaced when the LookAndFeel\n+ * changes.\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public class IconUIResource implements Icon, UIResource, Serializable\n+public class IconUIResource\n+  implements Icon, UIResource, Serializable\n {\n+  /**\n+   * Verified using the <code>serialver</code> tool of Sun JDK 1.4.1_01\n+   * on GNU/Linux 2.4.18.\n+   */\n   static final long serialVersionUID = 3327049506004830542L;\n \n+\n+  /**\n+   * The icon that is wrapped by this <code>IconUIResource</code>.\n+   */\n+  private Icon delegate;\n+\n+\n+  /**\n+   * Constructs a <code>IconUIResource</code> that wraps another\n+   * icon. All messages are forwarded to the delegate icon.\n+   *\n+   * @param delegate the icon that is wrapped by this\n+   *        <code>IconUIResource</code>.\n+   */\n   public IconUIResource(Icon delegate)\n   {\n+    this.delegate = delegate;\n   }\n+\n+\n+  /**\n+   * Paints the icon by asking the delegate icon to paint itself.\n+   *\n+   * @param c the Component whose icon is being painted. Some icons\n+   *        use this argument to retrieve properties like the\n+   *        background color.\n+   *\n+   * @param g the graphics into which the icon will be painted.\n+   *\n+   * @param x the horizontal position of the icon.\n+   *\n+   * @param y the vertical position of the icon.\n+   */\n   public void paintIcon(Component c, Graphics g, int x, int y)\n   {\n+    delegate.paintIcon(c, g, x, y);\n   }\n+\n+\n+  /**\n+   * Returns the width of the icon in pixels. The implementation\n+   * determines and returns the width of the delegate icon.\n+   */\n   public int getIconWidth()\n   {\n-    return 0;\n+    return delegate.getIconWidth();\n   }\n+\n+\n+  /**\n+   * Returns the height of the icon in pixels. The implementation\n+   * determines and returns the height of the delegate icon.\n+   */\n   public int getIconHeight()\n   {\n-    return 0;\n+    return delegate.getIconHeight();\n   }\n-} // class IconUIResource\n+}"}, {"sha": "5bcc76da97321c56e223b9f2e61618fb86b38214", "filename": "libjava/javax/swing/plaf/InputMapUIResource.java", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FInputMapUIResource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FInputMapUIResource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FInputMapUIResource.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* InputMapUIResource.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,26 +37,27 @@\n \n package javax.swing.plaf;\n \n-// Imports\n-import javax.swing.*;\n+import javax.swing.InputMap;\n+\n \n /**\n- * InputMapUIResource\n- * @author\tAndrew Selkirk\n- * @version\t1.0\n+ * An <code>InputMap</code> that is marked as <code>UIResource</code>,\n+ * which indicates that it has been installed by a pluggable\n+ * LookAndFeel. Such dimensions are replaced when the LookAndFeel\n+ * changes.\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public class InputMapUIResource extends InputMap implements UIResource {\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor InputMapUIResource\n-\t */\n-\tpublic InputMapUIResource() {\n-\t\t// TODO\n-\t} // InputMapUIResource()\n-\n+public class InputMapUIResource\n+  extends InputMap\n+  implements UIResource\n+{\n+  /**\n+   * Constructs a new <code>InputMapUIResource</code>.\n+   */\n+  public InputMapUIResource()\n+  {\n+  }\n+}\n \n-} // InputMapUIResource"}, {"sha": "cdedc832f0aed34b52637f2ffec277c14dbba218", "filename": "libjava/javax/swing/plaf/InsetsUIResource.java", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FInsetsUIResource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FInsetsUIResource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FInsetsUIResource.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* InsetsUIResource.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,14 +37,41 @@\n \n \n package javax.swing.plaf;\n+\n import java.awt.Insets;\n+import java.io.Serializable;\n+\n+\n /**\n- * STUBBED\n+ * An <code>Insets</code> that is marked as <code>UIResource</code>,\n+ * which indicates that it has been installed by a pluggable\n+ * LookAndFeel. Such insets are replaced when the LookAndFeel changes.\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public class InsetsUIResource extends Insets implements UIResource\n+public class InsetsUIResource\n+  extends Insets\n+  implements Cloneable, UIResource, Serializable\n {\n+  /**\n+   * Determined using the <code>serialver</code> tool\n+   * of Apple/Sun JDK 1.3.1 on MacOS X 10.1.5.\n+   */\n+  static final long serialVersionUID = 5622110143266315421L;\n+\n+\n+  /**\n+   * Constructs a new <code>InsetsUIResource</code> given the\n+   * inset at each edge.\n+   *\n+   * @param top the inset at the top, in pixels.\n+   * @param left the inset at the left, in pixels.\n+   * @param bottom the inset at the bottom, in pixels.\n+   * @param right the inset at the right, in pixels.\n+   */\n   public InsetsUIResource(int top, int left, int bottom, int right)\n   {\n     super(top, left, bottom, right);\n   }\n-} // class InsetsUIResource\n+}"}, {"sha": "0e1ae59aed1988779eebc2f59aa0b25e7d46229d", "filename": "libjava/javax/swing/plaf/InternalFrameUI.java", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FInternalFrameUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FInternalFrameUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FInternalFrameUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* InternalFrameUI.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,23 +37,23 @@\n \n package javax.swing.plaf;\n \n+\n /**\n- * InternalFrameUI\n- * @author\tAndrew Selkirk\n- * @version\t1.0\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JInternalFrame</code>.\n+ *\n+ * @see javax.swing.JInternalFrame\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public abstract class InternalFrameUI extends ComponentUI {\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor InternalFrameUI\n-\t */\n-\tpublic InternalFrameUI() {\n-\t\t// TODO\n-\t} // InternalFrameUI()\n-\n-\n-} // InternalFrameUI\n+public abstract class InternalFrameUI\n+  extends ComponentUI\n+{\n+  /**\n+   * Constructs a new <code>InternalFrameUI</code>.\n+   */\n+  public InternalFrameUI()\n+  {\n+  }\n+}"}, {"sha": "3a5025e9508de3a826144a3d6f9b18988a57576c", "filename": "libjava/javax/swing/plaf/LabelUI.java", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FLabelUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FLabelUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FLabelUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* LabelUI.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,7 +38,22 @@\n \n package javax.swing.plaf;\n \n-\n-public class LabelUI extends ComponentUI\n+/**\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JLabel</code>.\n+ *\n+ * @see javax.swing.JLabel\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public abstract class LabelUI\n+  extends ComponentUI\n {\n+  /**\n+   * Constructs a new <code>LabelUI</code>.\n+   */\n+  public LabelUI()\n+  {\n+  }\n }"}, {"sha": "2e798b95a49a367e4351d7c88496c3e058420bef", "filename": "libjava/javax/swing/plaf/ListUI.java", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FListUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FListUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FListUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* ListUI.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,7 +38,77 @@\n \n package javax.swing.plaf;\n \n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import javax.swing.JList;\n \n-public class ListUI extends ComponentUI\n+\n+/**\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JList</code>.\n+ *\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public abstract class ListUI\n+  extends ComponentUI\n {\n+  /**\n+   * Constructs a new <code>ListUI</code>.\n+   */\n+  public ListUI()\n+  {\n+  }\n+\n+\n+  /**\n+   * Determines the cell index which is the closest to the specified\n+   * location. The find out whether the returned cell actually\n+   * contains the location, the caller should also use {@link\n+   * #getCellBounds}.\n+   *\n+   * @param list the <code>JList</code> for which this delegate object\n+   *        provides the pluggable user interface.\n+   *\n+   * @param location a point in the <code>JList</code> coordinate\n+   *        system.\n+   *\n+   * @return the index of the closest cell, or -1 if the list model\n+   *         is empty.\n+   */\n+  public abstract int locationToIndex(JList index, Point location);\n+\n+\n+  /**\n+   * Determines the location of the specified cell.\n+   *\n+   * @param list the <code>JList</code> for which this delegate object\n+   *        provides the pluggable user interface.\n+   *\n+   * @param index the zero-based index of the cell whose location shall be\n+   *        determined.\n+   *\n+   * @return the position of the top left corner of the cell in the\n+   *         <code>JList</code> coordinate system, or <code>null</code>\n+   *         if <code>cell</code> does not designate a valid cell.\n+   */\n+  public abstract Point indexToLocation(JList list, int index);\n+\n+\n+  /**\n+   * Determines the bounding box of the rectangle spanned by\n+   * two list indices.\n+   *\n+   * @param list the <code>JList</code> for which this delegate object\n+   *        provides the pluggable user interface.\n+   *\n+   * @param index1 the zero-based index of the first cell.\n+   *\n+   * @param index2 the zero-based index of the second cell.\n+   *\n+   * @return the spanned rectangle, or <code>null</code> if either\n+   *         <code>index1</code> or <code>index2</code> does not\n+   *         designate a valid cell.\n+   */\n+  public abstract Rectangle getCellBounds(JList list,\n+                                          int index1, int index2);\n }"}, {"sha": "a107a3e0304ae3773c5a31b346fcd88330f7baa0", "filename": "libjava/javax/swing/plaf/MenuBarUI.java", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FMenuBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FMenuBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FMenuBarUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* MenuBarUI.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,23 +37,23 @@\n \n package javax.swing.plaf;\n \n+\n /**\n- * MenuBarUI\n- * @author\tAndrew Selkirk\n- * @version\t1.0\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JMenuBar</code>.\n+ *\n+ * @see javax.swing.JMenuBar\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public abstract class MenuBarUI extends ComponentUI {\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor MenuBarUI\n-\t */\n-\tpublic MenuBarUI() {\n-\t\t// TODO\n-\t} // MenuBarUI()\n-\n-\n-} // MenuBarUI\n+public abstract class MenuBarUI\n+  extends ComponentUI\n+{\n+  /**\n+   * Constructs a new <code>MenuBarUI</code>.\n+   */\n+  public MenuBarUI()\n+  {\n+  }\n+}"}, {"sha": "3fa30a83b688119714622980eed9afae5a0596d7", "filename": "libjava/javax/swing/plaf/MenuItemUI.java", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FMenuItemUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FMenuItemUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FMenuItemUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* MenuItemUI.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,23 +37,23 @@\n \n package javax.swing.plaf;\n \n+\n /**\n- * MenuItemUI\n- * @author\tAndrew Selkirk\n- * @version\t1.0\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JMenuItem</code>.\n+ *\n+ * @see javax.swing.JMenuItem\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public abstract class MenuItemUI extends ButtonUI {\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor MenuItemUI\n-\t */\n-\tpublic MenuItemUI() {\n-\t\t// TODO\n-\t} // MenuItemUI()\n-\n-\n-} // MenuItemUI\n+public abstract class MenuItemUI\n+  extends ButtonUI\n+{\n+  /**\n+   * Constructs a new <code>MenuItemUI</code>.\n+   */\n+  public MenuItemUI()\n+  {\n+  }\n+}"}, {"sha": "e9ee57c164a23cc013c2abd326d8136d48667df5", "filename": "libjava/javax/swing/plaf/OptionPaneUI.java", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FOptionPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FOptionPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FOptionPaneUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* OptionPaneUI.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,10 +35,41 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package javax.swing.plaf;\n-import javax.accessibility.*;\n \n-public class OptionPaneUI extends ComponentUI\n+import javax.swing.JOptionPane;\n+\n+/**\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JOptionPane</code>.\n+ *\n+ * @see javax.swing.JOptionPane\n+ *\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public abstract class OptionPaneUI\n+  extends ComponentUI\n {\n+  /**\n+   * Gives keyboard input focus to the component that represents\n+   * the default value.\n+   *\n+   * @param pane the <code>JOptionPane</code> for which this delegate\n+   *        object provides the pluggable user interface.\n+   */\n+  public abstract void selectInitialValue(JOptionPane pane);\n+\n+\n+  /**\n+   * Determines whether the user has provided custom components\n+   * for the options or the message.\n+   *\n+   * @param pane the <code>JOptionPane</code> for which this delegate\n+   *        object provides the pluggable user interface.\n+   *\n+   * @return <code>true</code> if the user has supplied any custom\n+   *         components; <code>false</code> if all components are\n+   *         provided by Swing or a LookAndFeel.\n+   */\n+  public abstract boolean containsCustomComponents(JOptionPane pane);\n }"}, {"sha": "7030925ecae6ae26ab817a798c4cfa4be942d933", "filename": "libjava/javax/swing/plaf/PanelUI.java", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FPanelUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FPanelUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FPanelUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* PanelUI.java\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,7 +38,21 @@\n \n package javax.swing.plaf;\n \n-\n-public class PanelUI extends ComponentUI\n+/**\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JPanel</code>.\n+ *\n+ * @see javax.swing.JPanel\n+ *\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n+ */\n+public abstract class PanelUI\n+  extends ComponentUI\n {\n+  /**\n+   * Constructs a new <code>PanelUI</code>.\n+   */\n+  public PanelUI()\n+  {\n+  }\n }"}, {"sha": "7b60e0b05e4202f36f1f74ef8c2f76938a9e9cf2", "filename": "libjava/javax/swing/plaf/ProgressBarUI.java", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FProgressBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2FProgressBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2FProgressBarUI.java?ref=bbe53f03c8de1126e442866620409007c7df88fe", "patch": "@@ -1,5 +1,5 @@\n /* ProgressBarUI.java --\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,23 +37,23 @@\n \n package javax.swing.plaf;\n \n+\n /**\n- * ProgressBarUI\n- * @author\tAndrew Selkirk\n- * @version\t1.0\n+ * An abstract base class for delegates that implement the pluggable\n+ * look and feel for a <code>JProgressBar</code>.\n+ *\n+ * @see javax.swing.JProgressBar\n+ *\n+ * @author Andrew Selkirk (aselkirk@sympatico.ca)\n+ * @author Sascha Brawer (brawer@dandelis.ch)\n  */\n-public abstract class ProgressBarUI extends ComponentUI {\n-\n-\t//-------------------------------------------------------------\n-\t// Initialization ---------------------------------------------\n-\t//-------------------------------------------------------------\n-\n-\t/**\n-\t * Constructor ProgressBarUI\n-\t */\n-\tpublic ProgressBarUI() {\n-\t\t// TODO\n-\t} // ProgressBarUI()\n-\n-\n-} // ProgressBarUI\n+public abstract class ProgressBarUI\n+  extends ComponentUI\n+{\n+  /**\n+   * Constructs a new <code>ProgressBarUI</code>.\n+   */\n+  public ProgressBarUI()\n+  {\n+  }\n+}"}, {"sha": "02bfbbe90f11fba4c63b0c6ec9e591c0f5824e18", "filename": "libjava/javax/swing/plaf/doc-files/ComponentUI-1.dia", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2Fdoc-files%2FComponentUI-1.dia", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2Fdoc-files%2FComponentUI-1.dia", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fdoc-files%2FComponentUI-1.dia?ref=bbe53f03c8de1126e442866620409007c7df88fe"}, {"sha": "def4cbc6c47a6201d1984d30ad36d37955ff4be1", "filename": "libjava/javax/swing/plaf/doc-files/ComponentUI-1.png", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2Fdoc-files%2FComponentUI-1.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe53f03c8de1126e442866620409007c7df88fe/libjava%2Fjavax%2Fswing%2Fplaf%2Fdoc-files%2FComponentUI-1.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fdoc-files%2FComponentUI-1.png?ref=bbe53f03c8de1126e442866620409007c7df88fe"}]}