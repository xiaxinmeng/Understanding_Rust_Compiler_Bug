{"sha": "fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ2NmVhMWE2ZjVlY2Q2OGM0MGQzMzBlNTJlNzBlMjJjYWZlYzlkMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-12-08T23:01:40Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-12-08T23:01:40Z"}, "message": "Fix PR45230, PR45231, and PR45370: fold_stmt_inplace after replace_exp.\n\n2010-12-08  Richard Guenther  <rguenther@suse.de>\n\t    Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR tree-optimization/45230\n\tPR tree-optimization/45231\n\tPR tree-optimization/45370\n\t* sese.c (rename_uses): Returns a bool.  Call\n\trecompute_tree_invariant_for_addr_expr only on the RHS of a\n\tGIMPLE_ASSIGN.\n\t(graphite_copy_stmts_from_block): Call fold_stmt_inplace when\n\trename_uses returns true.\n\t* tree-ssa-copy.c (replace_exp): Add a comment about calling\n\tfold_stmt_inplace after replace_exp.\n\n\t* gcc.dg/graphite/id-pr45230-1.c: New.\n\t* gcc.dg/graphite/id-pr45231.c: New.\n\t* gfortran.dg/graphite/id-pr45370.f90: New.\n\nCo-Authored-By: Sebastian Pop <sebastian.pop@amd.com>\n\nFrom-SVN: r167609", "tree": {"sha": "f1c5454ba13ad564e707268d461dc545286230f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1c5454ba13ad564e707268d461dc545286230f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09c2d63aa4ea2fb3e90055ca521940df9f8fcb56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09c2d63aa4ea2fb3e90055ca521940df9f8fcb56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09c2d63aa4ea2fb3e90055ca521940df9f8fcb56"}], "stats": {"total": 323, "additions": 316, "deletions": 7}, "files": [{"sha": "9b3e799efccb705a29e93aa0089b3cfa205f43e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "patch": "@@ -1,3 +1,17 @@\n+2010-12-08  Richard Guenther  <rguenther@suse.de>\n+\t    Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/45230\n+\tPR tree-optimization/45231\n+\tPR tree-optimization/45370\n+\t* sese.c (rename_uses): Returns a bool.  Call\n+\trecompute_tree_invariant_for_addr_expr only on the RHS of a\n+\tGIMPLE_ASSIGN.\n+\t(graphite_copy_stmts_from_block): Call fold_stmt_inplace when\n+\trename_uses returns true.\n+\t* tree-ssa-copy.c (replace_exp): Add a comment about calling\n+\tfold_stmt_inplace after replace_exp.\n+\n 2010-12-08  Mike Stump  <mikestump@comcast.net>\n \n \tPR debug/46749"}, {"sha": "3bf6beadee54a9c175de71ef74854e3499eca2b9", "filename": "gcc/sese.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "patch": "@@ -470,14 +470,15 @@ set_rename (htab_t rename_map, tree old_name, tree expr)\n    substitution map RENAME_MAP, inserting the gimplification code at\n    GSI_TGT, for the translation REGION, with the original copied\n    statement in LOOP, and using the induction variable renaming map\n-   IV_MAP.  */\n+   IV_MAP.  Returns true when something has been renamed.  */\n \n-static void\n+static bool\n rename_uses (gimple copy, htab_t rename_map, gimple_stmt_iterator *gsi_tgt,\n \t     sese region, loop_p loop, VEC (tree, heap) *iv_map)\n {\n   use_operand_p use_p;\n   ssa_op_iter op_iter;\n+  bool changed = false;\n \n   if (is_gimple_debug (copy))\n     {\n@@ -486,7 +487,7 @@ rename_uses (gimple copy, htab_t rename_map, gimple_stmt_iterator *gsi_tgt,\n       else\n \tgcc_unreachable ();\n \n-      return;\n+      return false;\n     }\n \n   FOR_EACH_SSA_USE_OPERAND (use_p, copy, op_iter, SSA_OP_ALL_USES)\n@@ -500,6 +501,7 @@ rename_uses (gimple copy, htab_t rename_map, gimple_stmt_iterator *gsi_tgt,\n \t  || SSA_NAME_IS_DEFAULT_DEF (old_name))\n \tcontinue;\n \n+      changed = true;\n       new_expr = get_rename (rename_map, old_name);\n       if (new_expr)\n \t{\n@@ -547,8 +549,8 @@ rename_uses (gimple copy, htab_t rename_map, gimple_stmt_iterator *gsi_tgt,\n       gsi_insert_seq_before (gsi_tgt, stmts, GSI_SAME_STMT);\n       replace_exp (use_p, new_expr);\n \n-\n-      if (TREE_CODE (new_expr) == INTEGER_CST)\n+      if (TREE_CODE (new_expr) == INTEGER_CST\n+\t  && is_gimple_assign (copy))\n \t{\n \t  tree rhs = gimple_assign_rhs1 (copy);\n \n@@ -558,6 +560,8 @@ rename_uses (gimple copy, htab_t rename_map, gimple_stmt_iterator *gsi_tgt,\n \n       set_rename (rename_map, old_name, new_expr);\n     }\n+\n+  return changed;\n }\n \n /* Duplicates the statements of basic block BB into basic block NEW_BB\n@@ -611,7 +615,8 @@ graphite_copy_stmts_from_block (basic_block bb, basic_block new_bb,\n \t  set_rename (rename_map, old_name, new_name);\n  \t}\n \n-      rename_uses (copy, rename_map, &gsi_tgt, region, loop, iv_map);\n+      if (rename_uses (copy, rename_map, &gsi_tgt, region, loop, iv_map))\n+\tfold_stmt_inplace (copy);\n \n       update_stmt (copy);\n     }"}, {"sha": "c0af4e337db3239da08c391a0e779f83c0e24699", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "patch": "@@ -1,3 +1,13 @@\n+2010-12-08  Richard Guenther  <rguenther@suse.de>\n+\t    Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/45230\n+\tPR tree-optimization/45231\n+\tPR tree-optimization/45370\n+\t* gcc.dg/graphite/id-pr45230-1.c: New.\n+\t* gcc.dg/graphite/id-pr45231.c: New.\n+\t* gfortran.dg/graphite/id-pr45370.f90: New.\n+\n 2010-12-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c++/45329"}, {"sha": "ba14fe5572d8a375c4854321ecb36a26bc4703a7", "filename": "gcc/testsuite/gcc.dg/graphite/id-pr45230-1.c", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr45230-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr45230-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr45230-1.c?ref=fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "patch": "@@ -0,0 +1,140 @@\n+/* Copyright (C) 2002  Free Software Foundation.\n+\n+   Test strncmp with various combinations of pointer alignments and lengths to\n+   make sure any optimizations in the library are correct.\n+\n+   Written by Michael Meissner, March 9, 2002.  */\n+\n+#include <string.h>\n+#include <stddef.h>\n+\n+#ifndef MAX_OFFSET\n+#define MAX_OFFSET (sizeof (long long))\n+#endif\n+\n+#ifndef MAX_TEST\n+#define MAX_TEST (8 * sizeof (long long))\n+#endif\n+\n+#ifndef MAX_EXTRA\n+#define MAX_EXTRA (sizeof (long long))\n+#endif\n+\n+#define MAX_LENGTH (MAX_OFFSET + MAX_TEST + MAX_EXTRA)\n+\n+static union {\n+  unsigned char buf[MAX_LENGTH];\n+  long long align_int;\n+  long double align_fp;\n+} u1, u2;\n+\n+void\n+test (const unsigned char *s1, const unsigned char *s2, size_t len, int expected)\n+{\n+  int value = strncmp ((char *) s1, (char *) s2, len);\n+\n+  if (expected < 0 && value >= 0)\n+    __builtin_abort ();\n+  else if (expected == 0 && value != 0)\n+    __builtin_abort ();\n+  else if (expected > 0 && value <= 0)\n+    __builtin_abort ();\n+}\n+\n+main ()\n+{\n+  size_t off1, off2, len, i;\n+  unsigned char *buf1, *buf2;\n+  unsigned char *mod1, *mod2;\n+  unsigned char *p1, *p2;\n+\n+  for (off1 = 0; off1 < MAX_OFFSET; off1++)\n+    for (off2 = 0; off2 < MAX_OFFSET; off2++)\n+      for (len = 0; len < MAX_TEST; len++)\n+\t{\n+\t  p1 = u1.buf;\n+\t  for (i = 0; i < off1; i++)\n+\t    *p1++ = '\\0';\n+\n+\t  buf1 = p1;\n+\t  for (i = 0; i < len; i++)\n+\t    *p1++ = 'a';\n+\n+\t  mod1 = p1;\n+\t  for (i = 0; i < MAX_EXTRA; i++)\n+\t    *p1++ = 'x';\n+\n+\t  p2 = u2.buf;\n+\t  for (i = 0; i < off2; i++)\n+\t    *p2++ = '\\0';\n+\n+\t  buf2 = p2;\n+\t  for (i = 0; i < len; i++)\n+\t    *p2++ = 'a';\n+\n+\t  mod2 = p2;\n+\t  for (i = 0; i < MAX_EXTRA; i++)\n+\t    *p2++ = 'x';\n+\n+\t  mod1[0] = '\\0';\n+\t  mod2[0] = '\\0';\n+\t  test (buf1, buf2, MAX_LENGTH, 0);\n+\t  test (buf1, buf2, len, 0);\n+\n+\t  mod1[0] = 'a';\n+\t  mod1[1] = '\\0';\n+\t  mod2[0] = '\\0';\n+\t  test (buf1, buf2, MAX_LENGTH, +1);\n+\t  test (buf1, buf2, len, 0);\n+\n+\t  mod1[0] = '\\0';\n+\t  mod2[0] = 'a';\n+\t  mod2[1] = '\\0';\n+\t  test (buf1, buf2, MAX_LENGTH, -1);\n+\t  test (buf1, buf2, len, 0);\n+\n+\t  mod1[0] = 'b';\n+\t  mod1[1] = '\\0';\n+\t  mod2[0] = 'c';\n+\t  mod2[1] = '\\0';\n+\t  test (buf1, buf2, MAX_LENGTH, -1);\n+\t  test (buf1, buf2, len, 0);\n+\n+\t  mod1[0] = 'c';\n+\t  mod1[1] = '\\0';\n+\t  mod2[0] = 'b';\n+\t  mod2[1] = '\\0';\n+\t  test (buf1, buf2, MAX_LENGTH, +1);\n+\t  test (buf1, buf2, len, 0);\n+\n+\t  mod1[0] = 'b';\n+\t  mod1[1] = '\\0';\n+\t  mod2[0] = (unsigned char)'\\251';\n+\t  mod2[1] = '\\0';\n+\t  test (buf1, buf2, MAX_LENGTH, -1);\n+\t  test (buf1, buf2, len, 0);\n+\n+\t  mod1[0] = (unsigned char)'\\251';\n+\t  mod1[1] = '\\0';\n+\t  mod2[0] = 'b';\n+\t  mod2[1] = '\\0';\n+\t  test (buf1, buf2, MAX_LENGTH, +1);\n+\t  test (buf1, buf2, len, 0);\n+\n+\t  mod1[0] = (unsigned char)'\\251';\n+\t  mod1[1] = '\\0';\n+\t  mod2[0] = (unsigned char)'\\252';\n+\t  mod2[1] = '\\0';\n+\t  test (buf1, buf2, MAX_LENGTH, -1);\n+\t  test (buf1, buf2, len, 0);\n+\n+\t  mod1[0] = (unsigned char)'\\252';\n+\t  mod1[1] = '\\0';\n+\t  mod2[0] = (unsigned char)'\\251';\n+\t  mod2[1] = '\\0';\n+\t  test (buf1, buf2, MAX_LENGTH, +1);\n+\t  test (buf1, buf2, len, 0);\n+\t}\n+\n+  __builtin_exit (0);\n+}"}, {"sha": "01e9a672e88008d4ac9082f6a9d3537469683263", "filename": "gcc/testsuite/gcc.dg/graphite/id-pr45231.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr45231.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr45231.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fid-pr45231.c?ref=fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "patch": "@@ -0,0 +1,37 @@\n+void\n+f (n, ppt, xrot)\n+{\n+  int tileWidth;\n+  int nlwSrc;\n+  int srcx;\n+  int v3, v4;\n+  register unsigned long ca1, cx1, ca2, cx2;\n+  unsigned long *pSrcLine;\n+  register unsigned long *pDst;\n+  register unsigned long *pSrc;\n+  register unsigned long b, tmp;\n+  unsigned long tileEndMask;\n+  int v1, v2;\n+  int tileEndPart;\n+  int needFirst;\n+  tileEndPart = 0;\n+  v1 = tileEndPart << 5;\n+  v2 = 32 - v1;\n+  while (n--)\n+    {\n+      if ((srcx = (ppt - xrot) % tileWidth) < 0)\n+\tif (needFirst)\n+\t  if (nlwSrc == 1)\n+\t    {\n+\t      tmp = b;\n+\t      if (tileEndPart)\n+\t\tb = (*pSrc & tileEndMask) | (*pSrcLine >> v1);\n+\t    }\n+      if (tileEndPart)\n+\tb = (tmp << v1) | (b >> v2);\n+      if (v4 != 32)\n+\t*pDst = (*pDst & ((tmp << v3) | (b >> v4) & ca1 ^ cx1)\n+\t\t ^ (((tmp << v3) | (b >> v4)) & ca2 ^ cx2));\n+      *pDst = *pDst & tmp;\n+    }\n+}"}, {"sha": "94eebd1f8a503078ffec288fefaeb0f370684922", "filename": "gcc/testsuite/gfortran.dg/graphite/id-pr45370.f90", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-pr45370.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-pr45370.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fid-pr45370.f90?ref=fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "patch": "@@ -0,0 +1,100 @@\n+!\n+  type :: t\n+    real :: r\n+    integer :: i\n+    character(3) :: chr\n+  end type t\n+\n+  type :: t2\n+    real :: r(2, 2)\n+    integer :: i\n+    character(3) :: chr\n+  end type t2\n+\n+  type :: s\n+    type(t), pointer :: t(:)\n+  end type s\n+\n+  integer, parameter :: sh(2) = (/2,2/)\n+  real, parameter :: a1(2,2) = reshape ((/1.0,2.0,3.0,4.0/),sh)\n+  real, parameter :: a2(2,2) = reshape ((/5.0,6.0,7.0,8.0/),sh)\n+\n+  type(t), target :: tar1(2) = (/t(1.0, 2, \"abc\"), t(3.0, 4, \"efg\")/)\n+  character(4), target :: tar2(2) = (/\"abcd\",\"efgh\"/)\n+  type(s), target :: tar3\n+  character(2), target :: tar4(2) = (/\"ab\",\"cd\"/)\n+  type(t2), target :: tar5(2) = (/t2(a1, 2, \"abc\"), t2(a2, 4, \"efg\")/)\n+\n+  integer, pointer :: ptr(:)\n+  character(2), pointer :: ptr2(:)\n+  real, pointer :: ptr3(:)\n+\n+!_______________component subreference___________\n+  ptr => tar1%i\n+  ptr = ptr + 1              ! check the scalarizer is OK\n+\n+  if (any (ptr .ne. (/3, 5/))) call abort ()\n+  if (any ((/ptr(1), ptr(2)/) .ne. (/3, 5/))) call abort ()\n+  if (any (tar1%i .ne. (/3, 5/))) call abort ()\n+\n+! Make sure that the other components are not touched.\n+  if (any (tar1%r .ne. (/1.0, 3.0/))) call abort ()\n+  if (any (tar1%chr .ne. (/\"abc\", \"efg\"/))) call abort ()\n+\n+! Check that the pointer is passed correctly as an actual argument.\n+  call foo (ptr)\n+  if (any (tar1%i .ne. (/2, 4/))) call abort ()\n+\n+! And that dummy pointers are OK too.\n+  call bar (ptr)\n+  if (any (tar1%i .ne. (/101, 103/))) call abort ()\n+\n+!_______________substring subreference___________\n+  ptr2 => tar2(:)(2:3)\n+  ptr2 = ptr2(:)(2:2)//\"z\"   ! again, check the scalarizer\n+\n+  if (any (ptr2 .ne. (/\"cz\", \"gz\"/))) call abort ()\n+  if (any ((/ptr2(1), ptr2(2)/) .ne. (/\"cz\", \"gz\"/))) call abort ()\n+  if (any (tar2 .ne. (/\"aczd\", \"egzh\"/))) call abort ()\n+\n+!_______________substring component subreference___________\n+  ptr2 => tar1(:)%chr(1:2)\n+  ptr2 = ptr2(:)(2:2)//\"q\"   ! yet again, check the scalarizer\n+  if (any (ptr2 .ne. (/\"bq\",\"fq\"/))) call abort ()\n+  if (any (tar1%chr .ne. (/\"bqc\",\"fqg\"/))) call abort ()\n+\n+!_______________trailing array element subreference___________\n+  ptr3 => tar5%r(1,2)\n+  ptr3 = (/99.0, 999.0/)\n+  if (any (tar5(1)%r .ne. reshape ((/1.0,2.0,99.0,4.0/), sh))) call abort ()\n+  if (any (tar5(2)%r .ne. reshape ((/5.0,6.0,999.0,8.0/), sh))) call abort ()\n+\n+!_______________forall assignment___________\n+  ptr2 => tar2(:)(1:2)\n+  forall (i = 1:2) ptr2(i)(1:1) = \"z\"\n+  if (any (tar2 .ne. (/\"zczd\", \"zgzh\"/))) call abort ()\n+\n+!_______________something more complicated___________\n+  tar3%t => tar1\n+  ptr3 => tar3%t%r\n+  ptr3 = cos (ptr3)\n+  if (any (abs(ptr3 - (/cos(1.0_4), cos(3.0_4)/)) >= epsilon(1.0_4))) call abort ()\n+\n+  ptr2 => tar3%t(:)%chr(2:3)\n+  ptr2 = \" x\"\n+  if (any (tar1%chr .ne. (/\"b x\", \"f x\"/))) call abort ()\n+\n+!_______________check non-subref works still___________\n+  ptr2 => tar4\n+  if (any (ptr2 .ne. (/\"ab\",\"cd\"/))) call abort ()\n+\n+contains\n+  subroutine foo (arg)\n+    integer :: arg(:)\n+    arg = arg - 1\n+  end subroutine\n+  subroutine bar (arg)\n+    integer, pointer :: arg(:)\n+    arg = arg + 99\n+  end subroutine\n+end"}, {"sha": "88972750b04f1b589f391db5941cf6aece4b9d7e", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=fd66ea1a6f5ecd68c40d330e52e70e22cafec9d3", "patch": "@@ -191,7 +191,10 @@ propagate_value (use_operand_p op_p, tree val)\n \n    Use this version when not const/copy propagating values.  For example,\n    PRE uses this version when building expressions as they would appear\n-   in specific blocks taking into account actions of PHI nodes.  */\n+   in specific blocks taking into account actions of PHI nodes.\n+\n+   The statement in which an expression has been replaced should be\n+   folded using fold_stmt_inplace.  */\n \n void\n replace_exp (use_operand_p op_p, tree val)"}]}