{"sha": "05f3fda388756b911406c06368d76fd410d84808", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmM2ZkYTM4ODc1NmI5MTE0MDZjMDYzNjhkNzZmZDQxMGQ4NDgwOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-26T08:26:08Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-26T08:26:08Z"}, "message": "(build_binary_op): For TRUNC_MOD_EXPR and FLOOR_MOD_EXPR,\n\ndon't shorten when divisor might be -1.\n\nFrom-SVN: r5893", "tree": {"sha": "cacbf31471dc97fb173ff13bdd9d49737012f08d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cacbf31471dc97fb173ff13bdd9d49737012f08d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05f3fda388756b911406c06368d76fd410d84808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f3fda388756b911406c06368d76fd410d84808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f3fda388756b911406c06368d76fd410d84808", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f3fda388756b911406c06368d76fd410d84808/comments", "author": null, "committer": null, "parents": [{"sha": "fc51af1af8567e1c324e3dd62327b39dee6d1d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc51af1af8567e1c324e3dd62327b39dee6d1d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc51af1af8567e1c324e3dd62327b39dee6d1d30"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "c12f775a050fdb414427161e26b93bbb5d7d26a3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f3fda388756b911406c06368d76fd410d84808/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f3fda388756b911406c06368d76fd410d84808/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=05f3fda388756b911406c06368d76fd410d84808", "patch": "@@ -1982,7 +1982,14 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n     case TRUNC_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n-\tshorten = 1;\n+\t/* Although it would be tempting to shorten always here, doing so loses\n+\t   on some targets, since the modulo instruction is undefined if the\n+\t   quotient can't be represented in the computation mode.  We shorten\n+\t   only if unsigned or if dividing by something we know != -1.  */\n+\tshorten = (TREE_UNSIGNED (orig_op0)\n+\t\t   || (TREE_CODE (op1) == INTEGER_CST\n+\t\t       && (TREE_INT_CST_LOW (op1) != -1\n+\t\t\t   || TREE_INT_CST_HIGH (op1) != -1)));\n       break;\n \n     case TRUTH_ANDIF_EXPR:"}]}