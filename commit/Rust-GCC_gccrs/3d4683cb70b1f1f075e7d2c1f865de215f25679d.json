{"sha": "3d4683cb70b1f1f075e7d2c1f865de215f25679d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q0NjgzY2I3MGIxZjFmMDc1ZTdkMmMxZjg2NWRlMjE1ZjI1Njc5ZA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-10-11T20:08:01Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1996-10-11T20:08:01Z"}, "message": "89th Cygnus<->FSF quick merge\n\nFrom-SVN: r12952", "tree": {"sha": "a079887b8fcc625e1a968426720acd1650dea4fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a079887b8fcc625e1a968426720acd1650dea4fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d4683cb70b1f1f075e7d2c1f865de215f25679d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4683cb70b1f1f075e7d2c1f865de215f25679d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d4683cb70b1f1f075e7d2c1f865de215f25679d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4683cb70b1f1f075e7d2c1f865de215f25679d/comments", "author": null, "committer": null, "parents": [{"sha": "ce61cc7357cf7007b539ca864304fbe2f9d38e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce61cc7357cf7007b539ca864304fbe2f9d38e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce61cc7357cf7007b539ca864304fbe2f9d38e40"}], "stats": {"total": 71, "additions": 37, "deletions": 34}, "files": [{"sha": "136247a678b0993071f8180384a776b2a364593c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4683cb70b1f1f075e7d2c1f865de215f25679d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4683cb70b1f1f075e7d2c1f865de215f25679d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3d4683cb70b1f1f075e7d2c1f865de215f25679d", "patch": "@@ -1,3 +1,38 @@\n+Thu Oct 10 15:58:08 1996  Mike Stump  <mrs@cygnus.com>\n+\n+\t* typeck.c (unary_complex_lvalue): Add code to handle intermediate\n+\tpmd conversions.\n+\n+\t* typeck.c (get_delta_difference): Fix wording, as we can be used\n+\tfor pointer to data members.\n+\n+Tue Oct  8 12:43:51 1996  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* pt.c (tsubst): If the function decl isn't a member of this\n+ \ttemplate, return a copy of the decl (including copying the\n+ \tlang-specific part) so we don't hose ourselves later.\n+\n+Thu Oct  3 16:24:28 1996  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (finish_struct): Remove DWARF-specific tag handling.\n+\t* decl.c (pushtag): Likewise.\n+\t(finish_function): Always clear DECL_ARGUMENTS on function decls with\n+\tno saved RTX.\n+\t* decl2.c (finish_file): Emit DWARF debugging info for static data\n+\tmembers.\n+\n+Wed Oct  2 21:58:01 1996  Bob Manson  <manson@charmed.cygnus.com>\n+\n+\t* decl.c (duplicate_decls): Make sure the old DECL_LANG_SPECIFIC\n+\tisn't the same as the new one before we whack it.\n+\n+Mon Sep 30 13:38:24 1996  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c, cp-tree.h, cvt.c, decl.c, decl2.c, gxx.gperf, hash.h,\n+ \tlex.c, method.c, parse.y, typeck.c, typeck2.c: Remove\n+ \twarn_traditional and warn_strict_prototypes; remove ancient\n+ \t'overload' code; remove references to flag_traditional.\n+\n Mon Sep 30 12:58:40 1996  Mike Stump  <mrs@cygnus.com>\n \n \t* input.c (sub_getch): Handle 8-bit characters in string literals."}, {"sha": "304531586eb298b99dcc2a051e4cbbd331950b8a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4683cb70b1f1f075e7d2c1f865de215f25679d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4683cb70b1f1f075e7d2c1f865de215f25679d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3d4683cb70b1f1f075e7d2c1f865de215f25679d", "patch": "@@ -3466,11 +3466,6 @@ finish_struct_1 (t, warn_anon)\n \t\t  DECL_INITIAL (x) = NULL_TREE;\n \t\t  DECL_FIELD_SIZE (x) = width;\n \t\t  DECL_BIT_FIELD (x) = 1;\n-\t\t  /* Traditionally a bit field is unsigned\n-\t\t     even if declared signed.  */\n-\t\t  if (flag_traditional\n-\t\t      && TREE_CODE (TREE_TYPE (x)) == INTEGER_TYPE)\n-\t\t    TREE_TYPE (x) = unsigned_type_node;\n \t\t}\n \t    }\n \t  else\n@@ -4349,15 +4344,6 @@ finish_struct (t, list_of_fieldlists, attributes, warn_anon)\n \t{\n \t  tree tag = TYPE_NAME (TREE_VALUE (x));\n \n-#ifdef DWARF_DEBUGGING_INFO\n-\t  if (write_symbols == DWARF_DEBUG)\n-\t    {\n-\t      /* Notify dwarfout.c that this TYPE_DECL node represent a\n-\t\t gratuitous typedef.  */\n-\t      DECL_IGNORED_P (tag) = 1;\n-\t    }\n-#endif /* DWARF_DEBUGGING_INFO */\n-\n \t  TREE_NONLOCAL_FLAG (TREE_VALUE (x)) = 0;\n \t  x = TREE_CHAIN (x);\n \t  last_x = chainon (last_x, tag);"}, {"sha": "4326491f86ffd2b5cc0faa5e33e1237b12805adc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4683cb70b1f1f075e7d2c1f865de215f25679d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4683cb70b1f1f075e7d2c1f865de215f25679d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3d4683cb70b1f1f075e7d2c1f865de215f25679d", "patch": "@@ -208,10 +208,6 @@ extern int warn_write_strings;\n \n extern int warn_pointer_arith;\n \n-/* Nonzero means warn for all old-style non-prototype function decls.  */\n-\n-extern int warn_strict_prototypes;\n-\n /* Nonzero means warn about suggesting putting in ()'s.  */\n \n extern int warn_parentheses;\n@@ -238,10 +234,6 @@ extern int warn_char_subscripts;\n \n extern int warn_cast_qual;\n \n-/* Warn about traditional constructs whose meanings changed in ANSI C.  */\n-\n-extern int warn_traditional;\n-\n /* Warn about *printf or *scanf format/argument anomalies.  */\n \n extern int warn_format;\n@@ -254,10 +246,6 @@ extern int warn_nonvdtor;\n /* Non-zero means warn when a function is declared extern and later inline.  */\n extern int warn_extern_inline;\n \n-/* Nonzero means do some things the same way PCC does.  */\n-\n-extern int flag_traditional;\n-\n /* Nonzero means to treat bitfields as unsigned unless they say `signed'.  */\n \n extern int flag_signed_bitfields;\n@@ -2287,10 +2275,6 @@ extern tree cplus_exception_name\t\tPROTO((tree));\n extern tree build_decl_overload\t\t\tPROTO((tree, tree, int));\n extern tree build_typename_overload\t\tPROTO((tree));\n extern tree build_overload_with_type\t\tPROTO((tree, tree));\n-extern void declare_overloaded\t\t\tPROTO((tree));\n-#ifdef NO_AUTO_OVERLOAD\n-extern int is_overloaded\t\t\tPROTO((tree));\n-#endif\n extern tree build_opfncall\t\t\tPROTO((enum tree_code, int, tree, tree, tree));\n extern tree hack_identifier\t\t\tPROTO((tree, tree));\n extern tree build_component_type_expr\t\tPROTO((tree, tree, tree, int));"}, {"sha": "84196a6b65fd2f38e66b0c853e82e6742968fd3e", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4683cb70b1f1f075e7d2c1f865de215f25679d/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4683cb70b1f1f075e7d2c1f865de215f25679d/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=3d4683cb70b1f1f075e7d2c1f865de215f25679d", "patch": "@@ -1833,11 +1833,9 @@ type_promotes_to (type)\n     }\n   else if (C_PROMOTING_INTEGER_TYPE_P (type))\n     {\n-      /* Traditionally, unsignedness is preserved in default promotions.\n-         Otherwise, retain unsignedness if really not getting bigger.  */\n+      /* Retain unsignedness if really not getting bigger.  */\n       if (TREE_UNSIGNED (type)\n-\t  && (flag_traditional\n-\t      || TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)))\n+\t  && TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node))\n \ttype = unsigned_type_node;\n       else\n \ttype = integer_type_node;"}]}