{"sha": "6142088c6cbc5e4c1915cc68ac270c3ec4820d0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE0MjA4OGM2Y2JjNWU0YzE5MTVjYzY4YWMyNzBjM2VjNDgyMGQwZQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-09-28T13:25:38Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-09-28T13:25:38Z"}, "message": "cpplex.c (new_buff, [...]): Use size_t everywhere, make definitions consistent with prototypes.\n\n\t* cpplex.c (new_buff, _cpp_get_buff, _cpp_extend_buff):\n\tUse size_t everywhere, make definitions consistent with\n\tprototypes.\n\nFrom-SVN: r45860", "tree": {"sha": "f5312e2122fc5dcfb84efad6b9046fd0fa0e6cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5312e2122fc5dcfb84efad6b9046fd0fa0e6cea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6142088c6cbc5e4c1915cc68ac270c3ec4820d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6142088c6cbc5e4c1915cc68ac270c3ec4820d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6142088c6cbc5e4c1915cc68ac270c3ec4820d0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6142088c6cbc5e4c1915cc68ac270c3ec4820d0e/comments", "author": null, "committer": null, "parents": [{"sha": "49ce134feeefc7091574a72c7386773fc6e26889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ce134feeefc7091574a72c7386773fc6e26889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ce134feeefc7091574a72c7386773fc6e26889"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "91e995a420f97048e69cb7be97cba8c3b43347c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6142088c6cbc5e4c1915cc68ac270c3ec4820d0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6142088c6cbc5e4c1915cc68ac270c3ec4820d0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6142088c6cbc5e4c1915cc68ac270c3ec4820d0e", "patch": "@@ -1,3 +1,9 @@\n+2001-09-28  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cpplex.c (new_buff, _cpp_get_buff, _cpp_extend_buff):\n+\tUse size_t everywhere, make definitions consistent with\n+\tprototypes.\t\n+\n Fri Sep 28 14:59:34 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* gcse.c (replace_store_insn): Use delete_insn."}, {"sha": "26bda3605fb10231fc9a59f9ae9b1d87679b60d2", "filename": "gcc/cpplex.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6142088c6cbc5e4c1915cc68ac270c3ec4820d0e/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6142088c6cbc5e4c1915cc68ac270c3ec4820d0e/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=6142088c6cbc5e4c1915cc68ac270c3ec4820d0e", "patch": "@@ -107,7 +107,7 @@ static tokenrun *next_tokenrun PARAMS ((tokenrun *));\n static cpp_chunk *new_chunk PARAMS ((unsigned int));\n static int chunk_suitable PARAMS ((cpp_chunk *, unsigned int));\n static unsigned int hex_digit_value PARAMS ((unsigned int));\n-static _cpp_buff *new_buff PARAMS ((unsigned int));\n+static _cpp_buff *new_buff PARAMS ((size_t));\n \n /* Utility routine:\n \n@@ -2052,7 +2052,7 @@ struct dummy\n    of the buffer, so that buffer overflows will cause immediate chaos.  */\n static _cpp_buff *\n new_buff (len)\n-     unsigned int len;\n+     size_t len;\n {\n   _cpp_buff *result;\n   unsigned char *base;\n@@ -2088,13 +2088,13 @@ _cpp_release_buff (pfile, buff)\n _cpp_buff *\n _cpp_get_buff (pfile, min_size)\n      cpp_reader *pfile;\n-     unsigned int min_size;\n+     size_t min_size;\n {\n   _cpp_buff *result, **p;\n \n   for (p = &pfile->free_buffs;; p = &(*p)->next)\n     {\n-      unsigned int size;\n+      size_t size;\n \n       if (*p == NULL)\n \treturn new_buff (min_size);\n@@ -2119,9 +2119,9 @@ _cpp_buff *\n _cpp_extend_buff (pfile, buff, min_extra)\n      cpp_reader *pfile;\n      _cpp_buff *buff;\n-     unsigned int min_extra;\n+     size_t min_extra;\n {\n-  unsigned int size = EXTENDED_BUFF_SIZE (buff, min_extra);\n+  size_t size = EXTENDED_BUFF_SIZE (buff, min_extra);\n \n   buff->next = _cpp_get_buff (pfile, size);\n   memcpy (buff->next->base, buff->cur, buff->limit - buff->cur);"}]}