{"sha": "2208990515245daa0c65cd35851510ecd2d290cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIwODk5MDUxNTI0NWRhYTBjNjVjZDM1ODUxNTEwZWNkMmQyOTBjYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-16T12:11:53Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-16T12:11:53Z"}, "message": "re PR fortran/38119 (character ICE in gfc_trans_create_temp_array)\n\n2008-11-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38119\n\t* trans-array.c (gfc_trans_create_temp_array): Set the\n\tloop->from to zero and the renormalisation of loop->to for all\n\tdimensions.\n\n2008-11-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38119\n\t* gfortran.dg/array_temporaries_3.f90: New test.\n\nFrom-SVN: r141915", "tree": {"sha": "baf9c59bdffc7add7fec67efdf7041d6091cc291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baf9c59bdffc7add7fec67efdf7041d6091cc291"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2208990515245daa0c65cd35851510ecd2d290cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2208990515245daa0c65cd35851510ecd2d290cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2208990515245daa0c65cd35851510ecd2d290cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2208990515245daa0c65cd35851510ecd2d290cb/comments", "author": null, "committer": null, "parents": [{"sha": "b800fd64b54018965f6953121b58673fcca08687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b800fd64b54018965f6953121b58673fcca08687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b800fd64b54018965f6953121b58673fcca08687"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "4e3ac606a4962ea25245063d36b4b6f1a33d20b1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2208990515245daa0c65cd35851510ecd2d290cb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2208990515245daa0c65cd35851510ecd2d290cb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2208990515245daa0c65cd35851510ecd2d290cb", "patch": "@@ -1,3 +1,10 @@\n+2008-11-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38119\n+\t* trans-array.c (gfc_trans_create_temp_array): Set the\n+\tloop->from to zero and the renormalisation of loop->to for all\n+\tdimensions.\n+\n 2008-11-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/37926"}, {"sha": "9c48c421465ffb61636ed61924e8239835ac021c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2208990515245daa0c65cd35851510ecd2d290cb/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2208990515245daa0c65cd35851510ecd2d290cb/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=2208990515245daa0c65cd35851510ecd2d290cb", "patch": "@@ -644,18 +644,12 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n   for (dim = 0; dim < info->dimen; dim++)\n     {\n       n = loop->order[dim];\n-      if (n < loop->temp_dim)\n-      gcc_assert (integer_zerop (loop->from[n]));\n-      else\n-\t{\n-\t  /* Callee allocated arrays may not have a known bound yet.  */\n-\t  if (loop->to[n])\n-\t    loop->to[n] =\n-\t\tgfc_evaluate_now (fold_build2 (MINUS_EXPR,\n-\t\t\t\t  gfc_array_index_type, loop->to[n],\n-\t\t\t\t  loop->from[n]), pre);\n-\t  loop->from[n] = gfc_index_zero_node;\n-\t}\n+      /* Callee allocated arrays may not have a known bound yet.  */\n+      if (loop->to[n])\n+\tloop->to[n] = gfc_evaluate_now (fold_build2 (MINUS_EXPR,\n+\t\t\t\t\tgfc_array_index_type,\n+\t\t\t\t\tloop->to[n], loop->from[n]), pre);\n+      loop->from[n] = gfc_index_zero_node;\n \n       info->delta[dim] = gfc_index_zero_node;\n       info->start[dim] = gfc_index_zero_node;"}, {"sha": "3fc91620fa998f2185523b50203f178595145185", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2208990515245daa0c65cd35851510ecd2d290cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2208990515245daa0c65cd35851510ecd2d290cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2208990515245daa0c65cd35851510ecd2d290cb", "patch": "@@ -1,3 +1,8 @@\n+2008-11-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38119\n+\t* gfortran.dg/array_temporaries_3.f90: New test.\n+\n 2008-11-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/37294"}, {"sha": "929a4c08e6bcfc0bce46786a0f0178b805e4bbc8", "filename": "gcc/testsuite/gfortran.dg/array_temporaries_3.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2208990515245daa0c65cd35851510ecd2d290cb/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_temporaries_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2208990515245daa0c65cd35851510ecd2d290cb/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_temporaries_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_temporaries_3.f90?ref=2208990515245daa0c65cd35851510ecd2d290cb", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do run }\n+! PR38119 - The scalarizer got the loop size wrong\n+! for the temporary coming from the call to 'same'.\n+!\n+! Contributed by Mikael Morin <mikael.morin@tele2.fr>\n+! based on a program by Vivek Rao.\n+!\n+module bar\n+  implicit none\n+  character(len = 2) :: c(1)\n+contains\n+  elemental function trim_append (xx,yy) result(xy)\n+    character (len = *), intent(in) :: xx,yy\n+    character (len = len (xx) + len (yy)) :: xy\n+    xy = trim (xx) // trim (yy)\n+  end function trim_append\n+  function same(xx) result(yy)\n+    character (len = *), intent(in) :: xx(:)\n+    character (len = len (xx))       :: yy(size (xx))\n+    yy = xx\n+  end function same\n+  subroutine xmain()\n+    c =  trim_append([\"a\"],same([\"b\"]))  ! The problem occurred here\n+  end subroutine xmain\n+end module bar\n+  use bar\n+  call xmain\n+  if (c(1) .ne. \"ab\") call abort\n+end\n+! { dg-final { cleanup-modules \"bar\" } }\n+"}]}