{"sha": "636ecb78a36df20232be05fd4fa2bdbea67c5551", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM2ZWNiNzhhMzZkZjIwMjMyYmUwNWZkNGZhMmJkYmVhNjdjNTU1MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-01-31T15:03:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-01-31T15:03:21Z"}, "message": "PR c++/88752 - ICE with lambda and constexpr if.\n\nIn this testcase, we look for an instantiation of the outer lambda from\nwithin the inner lambda.  enclosing_instantiation_of didn't handle this\nproperly, as it assumed that any references would be from the same lambda\nnesting depth.  Fixed thus.\n\n\t* cp-tree.h (LAMBDA_EXPR_INSTANTIATED): New.\n\t* pt.c (tsubst_lambda_expr): Set it.\n\t(instantiated_lambda_fn_p): Check it.\n\t(enclosing_instantiation_of): Use it.\n\nFrom-SVN: r268424", "tree": {"sha": "973524d03603c0ee792bc11ddd3b89c0974682f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/973524d03603c0ee792bc11ddd3b89c0974682f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/636ecb78a36df20232be05fd4fa2bdbea67c5551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636ecb78a36df20232be05fd4fa2bdbea67c5551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/636ecb78a36df20232be05fd4fa2bdbea67c5551", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/636ecb78a36df20232be05fd4fa2bdbea67c5551/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f942ef18b84ff6fd5774a606357e4ebcec120da3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f942ef18b84ff6fd5774a606357e4ebcec120da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f942ef18b84ff6fd5774a606357e4ebcec120da3"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "a115317a03cb161c8d6dcbf896310f73108bcbcd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636ecb78a36df20232be05fd4fa2bdbea67c5551/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636ecb78a36df20232be05fd4fa2bdbea67c5551/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=636ecb78a36df20232be05fd4fa2bdbea67c5551", "patch": "@@ -1,3 +1,11 @@\n+2019-01-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/88752 - ICE with lambda and constexpr if.\n+\t* cp-tree.h (LAMBDA_EXPR_INSTANTIATED): New.\n+\t* pt.c (tsubst_lambda_expr): Set it.\n+\t(instantiated_lambda_fn_p): Check it.\n+\t(enclosing_instantiation_of): Use it.\n+\n 2019-01-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libstdc++/88170"}, {"sha": "dada3a6aa4105f4f9c828de0add3ab94252a5a2f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636ecb78a36df20232be05fd4fa2bdbea67c5551/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636ecb78a36df20232be05fd4fa2bdbea67c5551/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=636ecb78a36df20232be05fd4fa2bdbea67c5551", "patch": "@@ -453,6 +453,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       DECLTYPE_FOR_REF_CAPTURE (in DECLTYPE_TYPE)\n       CONSTRUCTOR_C99_COMPOUND_LITERAL (in CONSTRUCTOR)\n       OVL_NESTED_P (in OVERLOAD)\n+      LAMBDA_EXPR_INSTANTIATED (in LAMBDA_EXPR)\n    4: IDENTIFIER_MARKED (IDENTIFIER_NODEs)\n       TREE_HAS_CONSTRUCTOR (in INDIRECT_REF, SAVE_EXPR, CONSTRUCTOR,\n \t  CALL_EXPR, or FIELD_DECL).\n@@ -1334,6 +1335,10 @@ enum cp_lambda_default_capture_mode_type {\n #define LAMBDA_EXPR_CAPTURE_OPTIMIZED(NODE) \\\n   TREE_LANG_FLAG_2 (LAMBDA_EXPR_CHECK (NODE))\n \n+/* True iff this LAMBDA_EXPR was generated in tsubst_lambda_expr.  */\n+#define LAMBDA_EXPR_INSTANTIATED(NODE) \\\n+  TREE_LANG_FLAG_3 (LAMBDA_EXPR_CHECK (NODE))\n+\n /* True if this TREE_LIST in LAMBDA_EXPR_CAPTURE_LIST is for an explicit\n    capture.  */\n #define LAMBDA_CAPTURE_EXPLICIT_P(NODE) \\"}, {"sha": "9aa3c75d2d74a5860445c2c6cb7a6aba2cdf5e9d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636ecb78a36df20232be05fd4fa2bdbea67c5551/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636ecb78a36df20232be05fd4fa2bdbea67c5551/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=636ecb78a36df20232be05fd4fa2bdbea67c5551", "patch": "@@ -13298,6 +13298,19 @@ lambda_fn_in_template_p (tree fn)\n   return CLASSTYPE_TEMPLATE_INFO (closure) != NULL_TREE;\n }\n \n+/* True if FN is the substitution (via tsubst_lambda_expr) of a function for\n+   which the above is true.  */\n+\n+bool\n+instantiated_lambda_fn_p (tree fn)\n+{\n+  if (!fn || !LAMBDA_FUNCTION_P (fn))\n+    return false;\n+  tree closure = DECL_CONTEXT (fn);\n+  tree lam = CLASSTYPE_LAMBDA_EXPR (closure);\n+  return LAMBDA_EXPR_INSTANTIATED (lam);\n+}\n+\n /* We're instantiating a variable from template function TCTX.  Return the\n    corresponding current enclosing scope.  This gets complicated because lambda\n    functions in templates are regenerated rather than instantiated, but generic\n@@ -13317,13 +13330,19 @@ enclosing_instantiation_of (tree otctx)\n     {\n       tree ofn = fn;\n       int flambda_count = 0;\n-      for (; flambda_count < lambda_count && fn && LAMBDA_FUNCTION_P (fn);\n+      for (; fn && instantiated_lambda_fn_p (fn);\n \t   fn = decl_function_context (fn))\n \t++flambda_count;\n       if ((fn && DECL_TEMPLATE_INFO (fn))\n \t  ? most_general_template (fn) != most_general_template (tctx)\n \t  : fn != tctx)\n \tcontinue;\n+      if (flambda_count != lambda_count)\n+\t{\n+\t  gcc_assert (flambda_count > lambda_count);\n+\t  for (; flambda_count > lambda_count; --flambda_count)\n+\t    ofn = decl_function_context (ofn);\n+\t}\n       gcc_assert (DECL_NAME (ofn) == DECL_NAME (otctx)\n \t\t  || DECL_CONV_FN_P (ofn));\n       return ofn;\n@@ -17870,6 +17889,7 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (r)\n     = LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (t);\n   LAMBDA_EXPR_MUTABLE_P (r) = LAMBDA_EXPR_MUTABLE_P (t);\n+  LAMBDA_EXPR_INSTANTIATED (r) = true;\n \n   if (LAMBDA_EXPR_EXTRA_SCOPE (t) == NULL_TREE)\n     /* A lambda in a default argument outside a class gets no"}, {"sha": "e85dcdc7f77a15754aa40fb0d0bb81ab910d175e", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if26.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/636ecb78a36df20232be05fd4fa2bdbea67c5551/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/636ecb78a36df20232be05fd4fa2bdbea67c5551/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if26.C?ref=636ecb78a36df20232be05fd4fa2bdbea67c5551", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/88752\n+// { dg-do compile { target c++17 } }\n+\n+template <int a> struct b { static constexpr int c = a; };\n+class d;\n+template <typename> struct e { typedef d f; };\n+template <typename g> using h = typename e<g>::f;\n+template <typename> constexpr bool i = b<true>::c;\n+class d {\n+public:\n+  using j = float;\n+};\n+template <typename> void k();\n+int main() { k<d>(); }\n+template <class l> l m;\n+template <class, class r> void n(r o) {\n+  [](int) {}(o(m<d>));\n+}\n+template <typename> void k() {\n+  n<int>([](auto inputs) {\n+    auto p(inputs);\n+    using s = h<decltype(p)>;\n+    s q;\n+    if constexpr (i<typename s::j>)\n+      [&] { return q; }();\n+    return 42;\n+  });\n+}"}]}