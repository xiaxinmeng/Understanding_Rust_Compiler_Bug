{"sha": "01f61a78c6961d875dbb0c1db16d8c921b6952fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFmNjFhNzhjNjk2MWQ4NzVkYmIwYzFkYjE2ZDhjOTIxYjY5NTJmYw==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2015-04-27T14:52:50Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2015-04-27T14:52:50Z"}, "message": "re PR target/64579 (__TM_end __builtin_tend failed to return transactional state)\n\ngcc/\n\tPR target/64579\n\t* config/rs6000/htm.md: Remove all define_expands.\n\t(UNSPECV_HTM_TABORTDC, UNSPECV_HTM_TABORTDCI, UNSPECV_HTM_TABORTWC,\n\tUNSPECV_HTM_TABORTWCI): Remove.\n\t(UNSPECV_HTM_TABORTXC, UNSPECV_HTM_TABORTXCI, UNSPECV_HTM_TTEST): New.\n\t(tabort_internal, tbegin_internal, tcheck_internal, tend_internal,\n\ttrechkpt_internal, treclaim_internal, tsr_internal): Rename from this...\n\t(tabort, tbegin, tcheck, tend, trechkpt, treclaim, tsr): ...to this.\n\t(tabortdc_internal, tabortdci_internal, tabortwc_internal,\n\ttabortwci_internal): Remove define_insns.\n\t(tabort<wd>c, tabort<wd>ci): New define_insns.\n\t(tabort): Use gpc_reg_operand.\n\t(tcheck): Remove operand.\n\t(htm_mfspr_<mode>, htm_mtspr_<mode>): Use GPR mode macro.\n\t* config/rs6000/htmxlintrin.h (__TM_end): Use _HTM_TRANSACTIONAL as\n\texpected value.\n\t* config/rs6000/rs6000-builtin.def (BU_HTM_SPR0): Remove.\n\t(BU_HTM_SPR1): Rename to BU_HTM_V1.  Remove use of RS6000_BTC_SPR.\n\t(tabort, tabortdc, tabortdci, tabortwc, tabortwci, tbegin,\n\ttcheck, tend, tendall, trechkpt, treclaim, tresume, tsuspend,\n\ttsr, ttest): Pass in the RS6000_BTC_CR attribute.\n\t(get_tfhar, set_tfhar, get_tfiar, set_tfiar, get_texasr, set_texasr,\n\tget_texasru, set_texasru): Pass in the RS6000_BTC_SPR attribute.\n\t(tcheck): Remove builtin argument.\n\t* config/rs6000/rs6000.c (rs6000_htm_spr_icode): Use TARGET_POWERPC64\n\tnot TARGET_64BIT.\n\t(htm_expand_builtin): Fix usage of expandedp.  Disallow usage of the\n\ttabortdc and tabortdci builtins when not in 64-bit mode.\n\tModify code to handle the loss of the HTM define_expands.\n\tEmit code to copy the CR register to TARGET.\n\t(htm_init_builtins): Modify code to handle the loss of the HTM\n\tdefine_expands.\n\t* config/rs6000/rs6000.h (RS6000_BTC_32BIT): Delete.\n\t(RS6000_BTC_64BIT): Likewise.\n\t(RS6000_BTC_CR): New macro.\n\t* doc/extend.texi: Update documentation for htm builtins.\n\ngcc/testsuite/\n\n\tPR target/64579\n\t* gcc.target/powerpc/htm-1.c: New test.\n\t* gcc.target/powerpc/htm-builtin-1.c (__builtin_tabortdc): Only test\n\ton 64-bit compiles.\n\t(__builtin_tabortdci): Likewise.\n\t(__builtin_tcheck): Remove operand.\n\t* lib/target-supports.exp (check_htm_hw_available): New function.\n\nFrom-SVN: r222467", "tree": {"sha": "c3592e2079c76061db81631e949b13d39f5b77b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3592e2079c76061db81631e949b13d39f5b77b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01f61a78c6961d875dbb0c1db16d8c921b6952fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f61a78c6961d875dbb0c1db16d8c921b6952fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f61a78c6961d875dbb0c1db16d8c921b6952fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f61a78c6961d875dbb0c1db16d8c921b6952fc/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2be0590fcecf5b0b369415848d7edbe18bca125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2be0590fcecf5b0b369415848d7edbe18bca125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2be0590fcecf5b0b369415848d7edbe18bca125"}], "stats": {"total": 616, "additions": 296, "deletions": 320}, "files": [{"sha": "e072c940425616b2a3b688f0e31258a7e0dea23c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -1,3 +1,42 @@\n+2015-04-27  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/64579\n+\t* config/rs6000/htm.md: Remove all define_expands.\n+\t(UNSPECV_HTM_TABORTDC, UNSPECV_HTM_TABORTDCI, UNSPECV_HTM_TABORTWC,\n+\tUNSPECV_HTM_TABORTWCI): Remove.\n+\t(UNSPECV_HTM_TABORTXC, UNSPECV_HTM_TABORTXCI, UNSPECV_HTM_TTEST): New.\n+\t(tabort_internal, tbegin_internal, tcheck_internal, tend_internal,\n+\ttrechkpt_internal, treclaim_internal, tsr_internal): Rename from this...\n+\t(tabort, tbegin, tcheck, tend, trechkpt, treclaim, tsr): ...to this.\n+\t(tabortdc_internal, tabortdci_internal, tabortwc_internal,\n+\ttabortwci_internal): Remove define_insns.\n+\t(tabort<wd>c, tabort<wd>ci): New define_insns.\n+\t(tabort): Use gpc_reg_operand.\n+\t(tcheck): Remove operand.\n+\t(htm_mfspr_<mode>, htm_mtspr_<mode>): Use GPR mode macro.\n+\t* config/rs6000/htmxlintrin.h (__TM_end): Use _HTM_TRANSACTIONAL as\n+\texpected value.\n+\t* config/rs6000/rs6000-builtin.def (BU_HTM_SPR0): Remove.\n+\t(BU_HTM_SPR1): Rename to BU_HTM_V1.  Remove use of RS6000_BTC_SPR.\n+\t(tabort, tabortdc, tabortdci, tabortwc, tabortwci, tbegin,\n+\ttcheck, tend, tendall, trechkpt, treclaim, tresume, tsuspend,\n+\ttsr, ttest): Pass in the RS6000_BTC_CR attribute.\n+\t(get_tfhar, set_tfhar, get_tfiar, set_tfiar, get_texasr, set_texasr,\n+\tget_texasru, set_texasru): Pass in the RS6000_BTC_SPR attribute.\n+\t(tcheck): Remove builtin argument.\n+\t* config/rs6000/rs6000.c (rs6000_htm_spr_icode): Use TARGET_POWERPC64\n+\tnot TARGET_64BIT.\n+\t(htm_expand_builtin): Fix usage of expandedp.  Disallow usage of the\n+\ttabortdc and tabortdci builtins when not in 64-bit mode.\n+\tModify code to handle the loss of the HTM define_expands.\n+\tEmit code to copy the CR register to TARGET.\n+\t(htm_init_builtins): Modify code to handle the loss of the HTM\n+\tdefine_expands.\n+\t* config/rs6000/rs6000.h (RS6000_BTC_32BIT): Delete.\n+\t(RS6000_BTC_64BIT): Likewise.\n+\t(RS6000_BTC_CR): New macro.\n+\t* doc/extend.texi: Update documentation for htm builtins.\n+\n 2015-04-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* simplify-rtx.c (simplify_gen_binary): Use std::swap instead"}, {"sha": "dbfd0db59621210da791d46b9d4677cf6241c31c", "filename": "gcc/config/rs6000/htm.md", "status": "modified", "additions": 39, "deletions": 255, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fconfig%2Frs6000%2Fhtm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fconfig%2Frs6000%2Fhtm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fhtm.md?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -32,197 +32,52 @@\n \n (define_c_enum \"unspecv\"\n   [UNSPECV_HTM_TABORT\n-   UNSPECV_HTM_TABORTDC\n-   UNSPECV_HTM_TABORTDCI\n-   UNSPECV_HTM_TABORTWC\n-   UNSPECV_HTM_TABORTWCI\n+   UNSPECV_HTM_TABORTXC\n+   UNSPECV_HTM_TABORTXCI\n    UNSPECV_HTM_TBEGIN\n    UNSPECV_HTM_TCHECK\n    UNSPECV_HTM_TEND\n    UNSPECV_HTM_TRECHKPT\n    UNSPECV_HTM_TRECLAIM\n    UNSPECV_HTM_TSR\n+   UNSPECV_HTM_TTEST\n    UNSPECV_HTM_MFSPR\n    UNSPECV_HTM_MTSPR\n   ])\n \n \n-(define_expand \"tabort\"\n-  [(set (match_dup 2)\n-\t(unspec_volatile:CC [(match_operand:SI 1 \"int_reg_operand\" \"\")]\n-\t\t\t    UNSPECV_HTM_TABORT))\n-   (set (match_dup 3)\n-\t(eq:SI (match_dup 2)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 3)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[2] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[3] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*tabort_internal\"\n+(define_insn \"tabort\"\n   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n-\t(unspec_volatile:CC [(match_operand:SI 0 \"int_reg_operand\" \"r\")]\n+\t(unspec_volatile:CC [(match_operand:SI 0 \"gpc_reg_operand\" \"r\")]\n \t\t\t    UNSPECV_HTM_TABORT))]\n   \"TARGET_HTM\"\n   \"tabort. %0\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_expand \"tabortdc\"\n-  [(set (match_dup 4)\n-\t(unspec_volatile:CC [(match_operand 1 \"u5bit_cint_operand\" \"n\")\n-\t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t\t     (match_operand:SI 3 \"gpc_reg_operand\" \"r\")]\n-\t\t\t    UNSPECV_HTM_TABORTDC))\n-   (set (match_dup 5)\n-\t(eq:SI (match_dup 4)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 5)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[4] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[5] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*tabortdc_internal\"\n+(define_insn \"tabort<wd>c\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n-\t\t\t     (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r\")]\n-\t\t\t    UNSPECV_HTM_TABORTDC))]\n+\t\t\t     (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t     (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")]\n+\t\t\t    UNSPECV_HTM_TABORTXC))]\n   \"TARGET_HTM\"\n-  \"tabortdc. %0,%1,%2\"\n+  \"tabort<wd>c. %0,%1,%2\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_expand \"tabortdci\"\n-  [(set (match_dup 4)\n-\t(unspec_volatile:CC [(match_operand 1 \"u5bit_cint_operand\" \"n\")\n-\t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t\t     (match_operand 3 \"s5bit_cint_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TABORTDCI))\n-   (set (match_dup 5)\n-\t(eq:SI (match_dup 4)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 5)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[4] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[5] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*tabortdci_internal\"\n+(define_insn \"tabort<wd>ci\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n-\t\t\t     (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t     (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t\t     (match_operand 2 \"s5bit_cint_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TABORTDCI))]\n-  \"TARGET_HTM\"\n-  \"tabortdci. %0,%1,%2\"\n-  [(set_attr \"type\" \"htm\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_expand \"tabortwc\"\n-  [(set (match_dup 4)\n-\t(unspec_volatile:CC [(match_operand 1 \"u5bit_cint_operand\" \"n\")\n-\t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t\t     (match_operand:SI 3 \"gpc_reg_operand\" \"r\")]\n-\t\t\t    UNSPECV_HTM_TABORTWC))\n-   (set (match_dup 5)\n-\t(eq:SI (match_dup 4)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 5)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[4] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[5] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*tabortwc_internal\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n-\t(unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n-\t\t\t     (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r\")]\n-\t\t\t    UNSPECV_HTM_TABORTWC))]\n+\t\t\t    UNSPECV_HTM_TABORTXCI))]\n   \"TARGET_HTM\"\n-  \"tabortwc. %0,%1,%2\"\n+  \"tabort<wd>ci. %0,%1,%2\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_expand \"tabortwci\"\n-  [(set (match_dup 4)\n-\t(unspec_volatile:CC [(match_operand 1 \"u5bit_cint_operand\" \"n\")\n-\t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t\t     (match_operand 3 \"s5bit_cint_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TABORTWCI))\n-   (set (match_dup 5)\n-\t(eq:SI (match_dup 4)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 5)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[4] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[5] = gen_reg_rtx (SImode);\n-})\n-\n-(define_expand \"ttest\"\n-  [(set (match_dup 1)\n-\t(unspec_volatile:CC [(const_int 0)\n-\t\t\t     (reg:SI 0)\n-\t\t\t     (const_int 0)]\n-\t\t\t    UNSPECV_HTM_TABORTWCI))\n-   (set (subreg:CC (match_dup 2) 0) (match_dup 1))\n-   (set (match_dup 3) (lshiftrt:SI (match_dup 2) (const_int 28)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(and:SI (match_dup 3)\n-\t\t(const_int 15)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[1] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[2] = gen_reg_rtx (SImode);\n-  operands[3] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*tabortwci_internal\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n-\t(unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n-\t\t\t     (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t     (match_operand 2 \"s5bit_cint_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TABORTWCI))]\n-  \"TARGET_HTM\"\n-  \"tabortwci. %0,%1,%2\"\n-  [(set_attr \"type\" \"htm\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_expand \"tbegin\"\n-  [(set (match_dup 2)\n-\t(unspec_volatile:CC [(match_operand 1 \"const_0_to_1_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TBEGIN))\n-   (set (match_dup 3)\n-\t(eq:SI (match_dup 2)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 3)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[2] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[3] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*tbegin_internal\"\n+(define_insn \"tbegin\"\n   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n \t\t\t    UNSPECV_HTM_TBEGIN))]\n@@ -231,48 +86,16 @@\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_expand \"tcheck\"\n-  [(set (match_dup 2)\n-\t(unspec_volatile:CC [(match_operand 1 \"u3bit_cint_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TCHECK))\n-   (set (match_dup 3)\n-\t(eq:SI (match_dup 2)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 3)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[2] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[3] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*tcheck_internal\"\n-  [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n-\t(unspec_volatile:CC [(match_operand 0 \"u3bit_cint_operand\" \"n\")]\n+(define_insn \"tcheck\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+\t(unspec_volatile:CC [(const_int 0)]\n \t\t\t    UNSPECV_HTM_TCHECK))]\n   \"TARGET_HTM\"\n   \"tcheck %0\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_expand \"tend\"\n-  [(set (match_dup 2)\n-\t(unspec_volatile:CC [(match_operand 1 \"const_0_to_1_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TEND))\n-   (set (match_dup 3)\n-\t(eq:SI (match_dup 2)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 3)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[2] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[3] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*tend_internal\"\n+(define_insn \"tend\"\n   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n \t\t\t    UNSPECV_HTM_TEND))]\n@@ -281,23 +104,7 @@\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_expand \"trechkpt\"\n-  [(set (match_dup 1)\n-\t(unspec_volatile:CC [(const_int 0)]\n-\t\t\t    UNSPECV_HTM_TRECHKPT))\n-   (set (match_dup 2)\n-\t(eq:SI (match_dup 1)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 2)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[1] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[2] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*trechkpt_internal\"\n+(define_insn \"trechkpt\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(const_int 0)]\n \t\t\t    UNSPECV_HTM_TRECHKPT))]\n@@ -306,23 +113,7 @@\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_expand \"treclaim\"\n-  [(set (match_dup 2)\n-\t(unspec_volatile:CC [(match_operand:SI 1 \"gpc_reg_operand\" \"r\")]\n-\t\t\t    UNSPECV_HTM_TRECLAIM))\n-   (set (match_dup 3)\n-\t(eq:SI (match_dup 2)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 3)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[2] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[3] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*treclaim_internal\"\n+(define_insn \"treclaim\"\n   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand:SI 0 \"gpc_reg_operand\" \"r\")]\n \t\t\t    UNSPECV_HTM_TRECLAIM))]\n@@ -331,23 +122,7 @@\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_expand \"tsr\"\n-  [(set (match_dup 2)\n-\t(unspec_volatile:CC [(match_operand 1 \"const_0_to_1_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TSR))\n-   (set (match_dup 3)\n-\t(eq:SI (match_dup 2)\n-\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"int_reg_operand\" \"\")\n-\t(xor:SI (match_dup 3)\n-\t\t(const_int 1)))]\n-  \"TARGET_HTM\"\n-{\n-  operands[2] = gen_rtx_REG (CCmode, CR0_REGNO);\n-  operands[3] = gen_reg_rtx (SImode);\n-})\n-\n-(define_insn \"*tsr_internal\"\n+(define_insn \"tsr\"\n   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n \t\t\t    UNSPECV_HTM_TSR))]\n@@ -356,21 +131,30 @@\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n+(define_insn \"ttest\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t(unspec_volatile:CC [(const_int 0)]\n+\t\t\t    UNSPECV_HTM_TTEST))]\n+  \"TARGET_HTM\"\n+  \"tabortwci. 0,1,0\"\n+  [(set_attr \"type\" \"htm\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_insn \"htm_mfspr_<mode>\"\n-  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n-        (unspec_volatile:P [(match_operand 1 \"u10bit_cint_operand\" \"n\")\n-\t\t\t    (match_operand:P 2 \"htm_spr_reg_operand\" \"\")]\n-\t\t\t   UNSPECV_HTM_MFSPR))]\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec_volatile:GPR [(match_operand 1 \"u10bit_cint_operand\" \"n\")\n+\t\t\t      (match_operand:GPR 2 \"htm_spr_reg_operand\" \"\")]\n+\t\t\t     UNSPECV_HTM_MFSPR))]\n   \"TARGET_HTM\"\n   \"mfspr %0,%1\";\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"htm_mtspr_<mode>\"\n-  [(set (match_operand:P 2 \"htm_spr_reg_operand\" \"\")\n-        (unspec_volatile:P [(match_operand:P 0 \"gpc_reg_operand\" \"r\")\n-\t\t\t    (match_operand 1 \"u10bit_cint_operand\" \"n\")]\n-                           UNSPECV_HTM_MTSPR))]\n+  [(set (match_operand:GPR 2 \"htm_spr_reg_operand\" \"\")\n+        (unspec_volatile:GPR [(match_operand:GPR 0 \"gpc_reg_operand\" \"r\")\n+\t\t\t      (match_operand 1 \"u10bit_cint_operand\" \"n\")]\n+\t\t\t     UNSPECV_HTM_MTSPR))]\n   \"TARGET_HTM\"\n   \"mtspr %1,%0\";\n   [(set_attr \"type\" \"htm\")"}, {"sha": "a10771cd4fc5d35b6eff2ec4eb3b7a5c10778ec9", "filename": "gcc/config/rs6000/htmxlintrin.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fconfig%2Frs6000%2Fhtmxlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fconfig%2Frs6000%2Fhtmxlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fhtmxlintrin.h?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -81,7 +81,8 @@ extern __inline long\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n __TM_end (void)\n {\n-  if (__builtin_expect (__builtin_tend (0), 1))\n+  unsigned char status = _HTM_STATE (__builtin_tend (0));\n+  if (__builtin_expect (status, _HTM_TRANSACTIONAL))\n     return 1;\n   return 0;\n }"}, {"sha": "7b79efcedb31000524ac8ac485a054bef70ff9c3", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 25, "deletions": 34, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -480,21 +480,12 @@\n \t\t     | RS6000_BTC_TERNARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-#define BU_HTM_SPR0(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n-  RS6000_BUILTIN_H (HTM_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n-\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n-\t\t    RS6000_BTM_HTM,\t\t\t/* MASK */\t\\\n-\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n-\t\t     | RS6000_BTC_SPR),\t\t\t\t\t\\\n-\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n-\n-#define BU_HTM_SPR1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+#define BU_HTM_V1(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n   RS6000_BUILTIN_H (HTM_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n \t\t    RS6000_BTM_HTM,\t\t\t/* MASK */\t\\\n \t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n \t\t     | RS6000_BTC_UNARY\t\t\t\t\t\\\n-\t\t     | RS6000_BTC_SPR\t\t\t\t\t\\\n \t\t     | RS6000_BTC_VOID),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n@@ -1657,30 +1648,30 @@ BU_CRYPTO_OVERLOAD_3 (VSHASIGMA, \"vshasigma\")\n \n \f\n /* HTM functions.  */\n-BU_HTM_1  (TABORT,\t\"tabort\",\tMISC,\ttabort)\n-BU_HTM_3  (TABORTDC,\t\"tabortdc\",\tMISC,\ttabortdc)\n-BU_HTM_3  (TABORTDCI,\t\"tabortdci\",\tMISC,\ttabortdci)\n-BU_HTM_3  (TABORTWC,\t\"tabortwc\",\tMISC,\ttabortwc)\n-BU_HTM_3  (TABORTWCI,\t\"tabortwci\",\tMISC,\ttabortwci)\n-BU_HTM_1  (TBEGIN,\t\"tbegin\",\tMISC,\ttbegin)\n-BU_HTM_1  (TCHECK,\t\"tcheck\",\tMISC,\ttcheck)\n-BU_HTM_1  (TEND,\t\"tend\",\t\tMISC,\ttend)\n-BU_HTM_0  (TENDALL,\t\"tendall\",\tMISC,\ttend)\n-BU_HTM_0  (TRECHKPT,\t\"trechkpt\",\tMISC,\ttrechkpt)\n-BU_HTM_1  (TRECLAIM,\t\"treclaim\",\tMISC,\ttreclaim)\n-BU_HTM_0  (TRESUME,\t\"tresume\",\tMISC,\ttsr)\n-BU_HTM_0  (TSUSPEND,\t\"tsuspend\",\tMISC,\ttsr)\n-BU_HTM_1  (TSR,\t\t\"tsr\",\t\tMISC,\ttsr)\n-BU_HTM_0  (TTEST,\t\"ttest\",\tMISC,\tttest)\n-\n-BU_HTM_SPR0 (GET_TFHAR,\t\t\"get_tfhar\",\tMISC,\tnothing)\n-BU_HTM_SPR1 (SET_TFHAR,\t\t\"set_tfhar\",\tMISC,\tnothing)\n-BU_HTM_SPR0 (GET_TFIAR,\t\t\"get_tfiar\",\tMISC,\tnothing)\n-BU_HTM_SPR1 (SET_TFIAR,\t\t\"set_tfiar\",\tMISC,\tnothing)\n-BU_HTM_SPR0 (GET_TEXASR,\t\"get_texasr\",\tMISC,\tnothing)\n-BU_HTM_SPR1 (SET_TEXASR,\t\"set_texasr\",\tMISC,\tnothing)\n-BU_HTM_SPR0 (GET_TEXASRU,\t\"get_texasru\",\tMISC,\tnothing)\n-BU_HTM_SPR1 (SET_TEXASRU,\t\"set_texasru\",\tMISC,\tnothing)\n+BU_HTM_1  (TABORT,\t\"tabort\",\tCR,\ttabort)\n+BU_HTM_3  (TABORTDC,\t\"tabortdc\",\tCR,\ttabortdc)\n+BU_HTM_3  (TABORTDCI,\t\"tabortdci\",\tCR,\ttabortdci)\n+BU_HTM_3  (TABORTWC,\t\"tabortwc\",\tCR,\ttabortwc)\n+BU_HTM_3  (TABORTWCI,\t\"tabortwci\",\tCR,\ttabortwci)\n+BU_HTM_1  (TBEGIN,\t\"tbegin\",\tCR,\ttbegin)\n+BU_HTM_0  (TCHECK,\t\"tcheck\",\tCR,\ttcheck)\n+BU_HTM_1  (TEND,\t\"tend\",\t\tCR,\ttend)\n+BU_HTM_0  (TENDALL,\t\"tendall\",\tCR,\ttend)\n+BU_HTM_0  (TRECHKPT,\t\"trechkpt\",\tCR,\ttrechkpt)\n+BU_HTM_1  (TRECLAIM,\t\"treclaim\",\tCR,\ttreclaim)\n+BU_HTM_0  (TRESUME,\t\"tresume\",\tCR,\ttsr)\n+BU_HTM_0  (TSUSPEND,\t\"tsuspend\",\tCR,\ttsr)\n+BU_HTM_1  (TSR,\t\t\"tsr\",\t\tCR,\ttsr)\n+BU_HTM_0  (TTEST,\t\"ttest\",\tCR,\tttest)\n+\n+BU_HTM_0  (GET_TFHAR,\t\"get_tfhar\",\tSPR,\tnothing)\n+BU_HTM_V1 (SET_TFHAR,\t\"set_tfhar\",\tSPR,\tnothing)\n+BU_HTM_0  (GET_TFIAR,\t\"get_tfiar\",\tSPR,\tnothing)\n+BU_HTM_V1 (SET_TFIAR,\t\"set_tfiar\",\tSPR,\tnothing)\n+BU_HTM_0  (GET_TEXASR,\t\"get_texasr\",\tSPR,\tnothing)\n+BU_HTM_V1 (SET_TEXASR,\t\"set_texasr\",\tSPR,\tnothing)\n+BU_HTM_0  (GET_TEXASRU,\t\"get_texasru\",\tSPR,\tnothing)\n+BU_HTM_V1 (SET_TEXASRU,\t\"set_texasru\",\tSPR,\tnothing)\n \n \f\n /* 3 argument paired floating point builtins.  */"}, {"sha": "3245d46af63552e2c3b060a4c22877116d175add", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 90, "deletions": 18, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -12687,9 +12687,9 @@ static inline enum insn_code\n rs6000_htm_spr_icode (bool nonvoid)\n {\n   if (nonvoid)\n-    return (TARGET_64BIT) ? CODE_FOR_htm_mfspr_di : CODE_FOR_htm_mfspr_si;\n+    return (TARGET_POWERPC64) ? CODE_FOR_htm_mfspr_di : CODE_FOR_htm_mfspr_si;\n   else\n-    return (TARGET_64BIT) ? CODE_FOR_htm_mtspr_di : CODE_FOR_htm_mtspr_si;\n+    return (TARGET_POWERPC64) ? CODE_FOR_htm_mtspr_di : CODE_FOR_htm_mtspr_si;\n }\n \n /* Expand the HTM builtin in EXP and store the result in TARGET.\n@@ -12703,7 +12703,17 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n   const struct builtin_description *d;\n   size_t i;\n \n-  *expandedp = false;\n+  *expandedp = true;\n+\n+  if (!TARGET_POWERPC64\n+      && (fcode == HTM_BUILTIN_TABORTDC\n+\t  || fcode == HTM_BUILTIN_TABORTDCI))\n+    {\n+      size_t uns_fcode = (size_t)fcode;\n+      const char *name = rs6000_builtin_info[uns_fcode].name;\n+      error (\"builtin %s is only valid in 64-bit mode\", name);\n+      return const0_rtx;\n+    }\n \n   /* Expand the HTM builtins.  */\n   d = bdesc_htm;\n@@ -12716,26 +12726,29 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n \tcall_expr_arg_iterator iter;\n \tunsigned attr = rs6000_builtin_info[fcode].attr;\n \tenum insn_code icode = d->icode;\n+\tconst struct insn_operand_data *insn_op;\n+\tbool uses_spr = (attr & RS6000_BTC_SPR);\n+\trtx cr = NULL_RTX;\n \n-\tif (attr & RS6000_BTC_SPR)\n+\tif (uses_spr)\n \t  icode = rs6000_htm_spr_icode (nonvoid);\n+\tinsn_op = &insn_data[icode].operand[0];\n \n \tif (nonvoid)\n \t  {\n-\t    machine_mode tmode = insn_data[icode].operand[0].mode;\n+\t    machine_mode tmode = (uses_spr) ? insn_op->mode : SImode;\n \t    if (!target\n \t\t|| GET_MODE (target) != tmode\n-\t\t|| !(*insn_data[icode].operand[0].predicate) (target, tmode))\n+\t\t|| (uses_spr && !(*insn_op->predicate) (target, tmode)))\n \t      target = gen_reg_rtx (tmode);\n-\t    op[nopnds++] = target;\n+\t    if (uses_spr)\n+\t      op[nopnds++] = target;\n \t  }\n \n \tFOR_EACH_CALL_EXPR_ARG (arg, iter, exp)\n \t{\n-\t  const struct insn_operand_data *insn_op;\n-\n \t  if (arg == error_mark_node || nopnds >= MAX_HTM_OPERANDS)\n-\t    return NULL_RTX;\n+\t    return const0_rtx;\n \n \t  insn_op = &insn_data[icode].operand[nopnds];\n \n@@ -12782,10 +12795,17 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n \n \t/* If this builtin accesses SPRs, then pass in the appropriate\n \t   SPR number and SPR regno as the last two operands.  */\n-\tif (attr & RS6000_BTC_SPR)\n+\tif (uses_spr)\n \t  {\n-\t    op[nopnds++] = gen_rtx_CONST_INT (Pmode, htm_spr_num (fcode));\n-\t    op[nopnds++] = gen_rtx_REG (Pmode, htm_spr_regno (fcode));\n+\t    machine_mode mode = (TARGET_POWERPC64) ? DImode : SImode;\n+\t    op[nopnds++] = gen_rtx_CONST_INT (mode, htm_spr_num (fcode));\n+\t    op[nopnds++] = gen_rtx_REG (mode, htm_spr_regno (fcode));\n+\t  }\n+\t/* If this builtin accesses a CR, then pass in a scratch\n+\t   CR as the last operand.  */\n+\telse if (attr & RS6000_BTC_CR)\n+\t  { cr = gen_reg_rtx (CCmode);\n+\t    op[nopnds++] = cr;\n \t  }\n \n #ifdef ENABLE_CHECKING\n@@ -12798,7 +12818,7 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n \t  expected_nopnds = 3;\n \tif (!(attr & RS6000_BTC_VOID))\n \t  expected_nopnds += 1;\n-\tif (attr & RS6000_BTC_SPR)\n+\tif (uses_spr)\n \t  expected_nopnds += 2;\n \n \tgcc_assert (nopnds == expected_nopnds && nopnds <= MAX_HTM_OPERANDS);\n@@ -12825,12 +12845,41 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n \t  return NULL_RTX;\n \temit_insn (pat);\n \n-\t*expandedp = true;\n+\tif (attr & RS6000_BTC_CR)\n+\t  {\n+\t    if (fcode == HTM_BUILTIN_TBEGIN)\n+\t      {\n+\t\t/* Emit code to set TARGET to true or false depending on\n+\t\t   whether the tbegin. instruction successfully or failed\n+\t\t   to start a transaction.  We do this by placing the 1's\n+\t\t   complement of CR's EQ bit into TARGET.  */\n+\t\trtx scratch = gen_reg_rtx (SImode);\n+\t\temit_insn (gen_rtx_SET (VOIDmode, scratch,\n+\t\t\t\t\tgen_rtx_EQ (SImode, cr,\n+\t\t\t\t\t\t     const0_rtx)));\n+\t\temit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t\tgen_rtx_XOR (SImode, scratch,\n+\t\t\t\t\t\t     GEN_INT (1))));\n+\t      }\n+\t    else\n+\t      {\n+\t\t/* Emit code to copy the 4-bit condition register field\n+\t\t   CR into the least significant end of register TARGET.  */\n+\t\trtx scratch1 = gen_reg_rtx (SImode);\n+\t\trtx scratch2 = gen_reg_rtx (SImode);\n+\t\trtx subreg = simplify_gen_subreg (CCmode, scratch1, SImode, 0);\n+\t\temit_insn (gen_movcc (subreg, cr));\n+\t\temit_insn (gen_lshrsi3 (scratch2, scratch1, GEN_INT (28)));\n+\t\temit_insn (gen_andsi3 (target, scratch2, GEN_INT (0xf)));\n+\t      }\n+\t  }\n+\n \tif (nonvoid)\n \t  return target;\n \treturn const0_rtx;\n       }\n \n+  *expandedp = false;\n   return NULL_RTX;\n }\n \n@@ -15319,8 +15368,31 @@ htm_init_builtins (void)\n       bool void_func = (attr & RS6000_BTC_VOID);\n       int attr_args = (attr & RS6000_BTC_TYPE_MASK);\n       int nopnds = 0;\n-      tree argtype = (attr & RS6000_BTC_SPR) ? long_unsigned_type_node\n-\t\t\t\t\t     : unsigned_type_node;\n+      tree gpr_type_node;\n+      tree rettype;\n+      tree argtype;\n+\n+      if (TARGET_32BIT && TARGET_POWERPC64)\n+\tgpr_type_node = long_long_unsigned_type_node;\n+      else\n+\tgpr_type_node = long_unsigned_type_node;\n+\n+      if (attr & RS6000_BTC_SPR)\n+\t{\n+\t  rettype = gpr_type_node;\n+\t  argtype = gpr_type_node;\n+\t}\n+      else if (d->code == HTM_BUILTIN_TABORTDC\n+\t       || d->code == HTM_BUILTIN_TABORTDCI)\n+\t{\n+\t  rettype = unsigned_type_node;\n+\t  argtype = gpr_type_node;\n+\t}\n+      else\n+\t{\n+\t  rettype = unsigned_type_node;\n+\t  argtype = unsigned_type_node;\n+\t}\n \n       if ((mask & builtin_mask) != mask)\n \t{\n@@ -15337,7 +15409,7 @@ htm_init_builtins (void)\n \t  continue;\n \t}\n \n-      op[nopnds++] = (void_func) ? void_type_node : argtype;\n+      op[nopnds++] = (void_func) ? void_type_node : rettype;\n \n       if (attr_args == RS6000_BTC_UNARY)\n \top[nopnds++] = argtype;"}, {"sha": "653c2c94e11a6f22d20fe3e33532e4d354c2be5e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -2574,9 +2574,8 @@ extern int frame_pointer_needed;\n /* Miscellaneous information.  */\n #define RS6000_BTC_SPR\t\t0x01000000\t/* function references SPRs.  */\n #define RS6000_BTC_VOID\t\t0x02000000\t/* function has no return value.  */\n-#define RS6000_BTC_OVERLOADED\t0x04000000\t/* function is overloaded.  */\n-#define RS6000_BTC_32BIT\t0x08000000\t/* function references SPRs.  */\n-#define RS6000_BTC_64BIT\t0x10000000\t/* function references SPRs.  */\n+#define RS6000_BTC_CR\t\t0x04000000\t/* function references a CR.  */\n+#define RS6000_BTC_OVERLOADED\t0x08000000\t/* function is overloaded.  */\n #define RS6000_BTC_MISC_MASK\t0x1f000000\t/* Mask of the misc info.  */\n \n /* Convenience macros to document the instruction type.  */"}, {"sha": "c7a0a3fdd2f6224b3c0beffbe89aa09f01f04a23", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -15121,10 +15121,15 @@ The following low level built-in functions are available with\n @option{-mhtm} or @option{-mcpu=CPU} where CPU is `power8' or later.\n They all generate the machine instruction that is part of the name.\n \n-The HTM built-ins return true or false depending on their success and\n-their arguments match exactly the type and order of the associated\n-hardware instruction's operands.  Refer to the ISA manual for a\n-description of each instruction's operands.\n+The HTM builtins (with the exception of @code{__builtin_tbegin}) return\n+the full 4-bit condition register value set by their associated hardware\n+instruction.  The header file @code{htmintrin.h} defines some macros that can\n+be used to decipher the return value.  The @code{__builtin_tbegin} builtin\n+returns a simple true or false value depending on whether a transaction was\n+successfully started or not.  The arguments of the builtins match exactly the\n+type and order of the associated hardware instruction's operands, except for\n+the @code{__builtin_tcheck} builtin, which does not take any input arguments.\n+Refer to the ISA manual for a description of each instruction's operands.\n \n @smallexample\n unsigned int __builtin_tbegin (unsigned int)\n@@ -15136,7 +15141,7 @@ unsigned int __builtin_tabortdci (unsigned int, unsigned int, int)\n unsigned int __builtin_tabortwc (unsigned int, unsigned int, unsigned int)\n unsigned int __builtin_tabortwci (unsigned int, unsigned int, int)\n \n-unsigned int __builtin_tcheck (unsigned int)\n+unsigned int __builtin_tcheck (void)\n unsigned int __builtin_treclaim (unsigned int)\n unsigned int __builtin_trechkpt (void)\n unsigned int __builtin_tsr (unsigned int)\n@@ -15271,7 +15276,7 @@ TM_buff_type TM_buff;\n \n while (1)\n   @{\n-    if (__TM_begin (TM_buff))\n+    if (__TM_begin (TM_buff) == _HTM_TBEGIN_STARTED)\n       @{\n         /* Transaction State Initiated.  */\n         if (is_locked (lock))"}, {"sha": "98aee26e93d90fff68276929e0cea42269dd4653", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -1,3 +1,13 @@\n+2015-04-27  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/64579\n+\t* gcc.target/powerpc/htm-1.c: New test.\n+\t* gcc.target/powerpc/htm-builtin-1.c (__builtin_tabortdc): Only test\n+\ton 64-bit compiles.\n+\t(__builtin_tabortdci): Likewise.\n+\t(__builtin_tcheck): Remove operand.\n+\t* lib/target-supports.exp (check_htm_hw_available): New function.\n+\n 2015-04-27  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.target/i386/pr65217.c: XFAIL."}, {"sha": "f27e32ca281a074c1c0080840c970a0353a2952e", "filename": "gcc/testsuite/gcc.target/powerpc/htm-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fhtm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fhtm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fhtm-1.c?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run { target { powerpc*-*-* && htm_hw } } } */\n+/* { dg-require-effective-target powerpc_htm_ok } */\n+/* { dg-options \"-mhtm\" } */\n+\n+/* Program to test PowerPC HTM instructions.  */\n+\n+#include <stdlib.h>\n+#include <htmintrin.h>\n+\n+int\n+main (void)\n+{\n+  long i;\n+  unsigned long mask = 0;\n+\n+repeat:\n+  if (__builtin_tbegin (0))\n+    {\n+      mask++;\n+    }\n+  else\n+    abort();\n+\n+  if (mask == 1)\n+    {\n+      __builtin_tsuspend ();\n+\n+      if (_HTM_STATE (__builtin_tcheck ()) != _HTM_SUSPENDED)\n+\tabort ();\n+\n+      __builtin_tresume ();\n+\n+      if (_HTM_STATE (__builtin_tcheck ()) != _HTM_TRANSACTIONAL)\n+\tabort ();\n+    }\n+  else\n+    mask++;\n+\n+  if (_HTM_STATE (__builtin_tendall ()) != _HTM_TRANSACTIONAL)\n+    abort ();\n+\n+  if (mask == 1)\n+    goto repeat;\n+\n+  if (_HTM_STATE (__builtin_tendall ()) != _HTM_NONTRANSACTIONAL)\n+    abort ();\n+\n+  if (mask != 3)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "b232580a20b0b44dfc18cd8cc9d7b1a6ad898c4d", "filename": "gcc/testsuite/gcc.target/powerpc/htm-builtin-1.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fhtm-builtin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fhtm-builtin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fhtm-builtin-1.c?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -6,8 +6,8 @@\n /* { dg-final { scan-assembler-times \"tbegin\\\\.\" 1 } } */\n /* { dg-final { scan-assembler-times \"tend\\\\.\" 2 } } */\n /* { dg-final { scan-assembler-times \"tabort\\\\.\" 2 } } */\n-/* { dg-final { scan-assembler-times \"tabortdc\\\\.\" 1 } } */\n-/* { dg-final { scan-assembler-times \"tabortdci\\\\.\" 1 } } */\n+/* { dg-final { scan-assembler-times \"tabortdc\\\\.\" 1 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"tabortdci\\\\.\" 1 { target lp64 } } } */\n /* { dg-final { scan-assembler-times \"tabortwc\\\\.\" 1 } } */\n /* { dg-final { scan-assembler-times \"tabortwci\\\\.\" 2 } } */\n /* { dg-final { scan-assembler-times \"tcheck\" 1 } } */\n@@ -25,12 +25,14 @@ void use_builtins (long *p, char code, long *a, long *b)\n   p[3] = __builtin_tabort (0);\n   p[4] = __builtin_tabort (code);\n \n+#ifdef __powerpc64__\n   p[5] = __builtin_tabortdc (0xf, a[5], b[5]);\n   p[6] = __builtin_tabortdci (0xf, a[6], 13);\n+#endif\n   p[7] = __builtin_tabortwc (0xf, a[7], b[7]);\n   p[8] = __builtin_tabortwci (0xf, a[8], 13);\n \n-  p[9] = __builtin_tcheck (5);\n+  p[9] = __builtin_tcheck ();\n   p[10] = __builtin_trechkpt ();\n   p[11] = __builtin_treclaim (0);\n   p[12] = __builtin_tresume ();"}, {"sha": "c5d0ffe06e2a4a7be2a439631899bf2e14a0293c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01f61a78c6961d875dbb0c1db16d8c921b6952fc/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=01f61a78c6961d875dbb0c1db16d8c921b6952fc", "patch": "@@ -3279,6 +3279,25 @@ proc check_effective_target_powerpc_htm_ok { } {\n     }\n }\n \n+# Return 1 if the target supports executing HTM hardware instructions,\n+# 0 otherwise.  Cache the result.\n+\n+proc check_htm_hw_available { } {\n+    return [check_cached_effective_target htm_hw_available {\n+\t# For now, disable on Darwin\n+\tif { [istarget powerpc-*-eabi] || [istarget powerpc*-*-eabispe] || [istarget *-*-darwin*]} {\n+\t    expr 0\n+\t} else {\n+\t    check_runtime_nocache htm_hw_available {\n+\t\tint main()\n+\t\t{\n+\t\t  __builtin_ttest ();\n+\t\t  return 0;\n+\t\t}\n+\t    } \"-mhtm\"\n+\t}\n+    }]\n+}\n # Return 1 if this is a PowerPC target supporting -mcpu=cell.\n \n proc check_effective_target_powerpc_ppu_ok { } {\n@@ -5280,6 +5299,7 @@ proc is-effective-target { arg } {\n \t  \"p8vector_hw\"    { set selected [check_p8vector_hw_available] }\n \t  \"ppc_recip_hw\"   { set selected [check_ppc_recip_hw_available] }\n \t  \"dfp_hw\"         { set selected [check_dfp_hw_available] }\n+\t  \"htm_hw\"         { set selected [check_htm_hw_available] }\n \t  \"named_sections\" { set selected [check_named_sections_available] }\n \t  \"gc_sections\"    { set selected [check_gc_sections_available] }\n \t  \"cxa_atexit\"     { set selected [check_cxa_atexit_available] }\n@@ -5303,6 +5323,7 @@ proc is-effective-target-keyword { arg } {\n \t  \"p8vector_hw\"    { return 1 }\n \t  \"ppc_recip_hw\"   { return 1 }\n \t  \"dfp_hw\"         { return 1 }\n+\t  \"htm_hw\"         { return 1 }\n \t  \"named_sections\" { return 1 }\n \t  \"gc_sections\"    { return 1 }\n \t  \"cxa_atexit\"     { return 1 }"}]}