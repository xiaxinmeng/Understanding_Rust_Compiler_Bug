{"sha": "13ea4a6e830da1f245136601e636dec62e74d1a7", "node_id": "C_kwDOANBUbNoAKDEzZWE0YTZlODMwZGExZjI0NTEzNjYwMWU2MzZkZWM2MmU3NGQxYTc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-13T08:53:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-13T08:54:22Z"}, "message": "i386: Fix up *<dwi>3_doubleword_mask [PR105911]\n\nAnother regression caused by my recent patch.\n\nThis time because define_insn_and_split only requires that the\nconstant mask is const_int_operand.  When it was only SImode,\nthat wasn't a problem, HImode neither, but for DImode if we need\nto and the shift count we might run into a problem that it isn't\na representable signed 32-bit immediate.\n\nBut, we don't really care about the upper bits of the mask, so\nwe can just mask the CONST_INT with the mode mask.\n\n2022-06-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/105911\n\t* config/i386/i386.md (*ashl<dwi>3_doubleword_mask,\n\t*<insn><dwi>3_doubleword_mask): Use operands[3] masked with\n\t(<MODE_SIZE> * BITS_PER_UNIT) - 1 as AND operand instead of\n\toperands[3] unmodified.\n\n\t* gcc.dg/pr105911.c: New test.", "tree": {"sha": "8dfbe312aedc9df5e5eca2ff5a47c14d091282bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dfbe312aedc9df5e5eca2ff5a47c14d091282bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13ea4a6e830da1f245136601e636dec62e74d1a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ea4a6e830da1f245136601e636dec62e74d1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ea4a6e830da1f245136601e636dec62e74d1a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ea4a6e830da1f245136601e636dec62e74d1a7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033e5ee3c4a2c841ff24e3bf3fc5324ea9cc373c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033e5ee3c4a2c841ff24e3bf3fc5324ea9cc373c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033e5ee3c4a2c841ff24e3bf3fc5324ea9cc373c"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "3093cb513b984b3117b1c6fbbade28c8c6ac2836", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ea4a6e830da1f245136601e636dec62e74d1a7/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ea4a6e830da1f245136601e636dec62e74d1a7/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=13ea4a6e830da1f245136601e636dec62e74d1a7", "patch": "@@ -11937,7 +11937,8 @@\n       rtx xops[3];\n       xops[0] = gen_reg_rtx (GET_MODE (operands[2]));\n       xops[1] = operands[2];\n-      xops[2] = operands[3];\n+      xops[2] = GEN_INT (INTVAL (operands[3])\n+\t\t\t & ((<MODE_SIZE> * BITS_PER_UNIT) - 1));\n       ix86_expand_binary_operator (AND, GET_MODE (operands[2]), xops);\n       operands[2] = xops[0];\n     }\n@@ -12905,7 +12906,8 @@\n       rtx xops[3];\n       xops[0] = gen_reg_rtx (GET_MODE (operands[2]));\n       xops[1] = operands[2];\n-      xops[2] = operands[3];\n+      xops[2] = GEN_INT (INTVAL (operands[3])\n+\t\t\t & ((<MODE_SIZE> * BITS_PER_UNIT) - 1));\n       ix86_expand_binary_operator (AND, GET_MODE (operands[2]), xops);\n       operands[2] = xops[0];\n     }"}, {"sha": "55df3f15affb5ac25103841d8eebffee52bba0ae", "filename": "gcc/testsuite/gcc.dg/pr105911.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13ea4a6e830da1f245136601e636dec62e74d1a7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105911.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13ea4a6e830da1f245136601e636dec62e74d1a7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105911.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105911.c?ref=13ea4a6e830da1f245136601e636dec62e74d1a7", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/105911 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+__int128 v, x;\n+unsigned __int128 w;\n+\n+void bar (__int128, __int128);\n+\n+void\n+foo (void)\n+{\n+  bar (v /= v, v >> (v &= 0x100000001));\n+  bar (w /= w, w >> (w &= 0x300000003));\n+  bar (x /= x, x << (x &= 0x700000007));\n+}"}]}