{"sha": "966c049dbf5e87774306aafddd0295a21657a1da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY2YzA0OWRiZjVlODc3NzQzMDZhYWZkZGQwMjk1YTIxNjU3YTFkYQ==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2001-11-04T21:53:41Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2001-11-04T21:53:41Z"}, "message": "g77.texi: Split off invoke.texi (preliminary to using it to generate a man page).\n\n2001-11-04  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* g77.texi: Split off invoke.texi (preliminary to using it\n\tto generate a man page).\n\t* Make-lang.in: Reflect in build rules.\n\nFrom-SVN: r46775", "tree": {"sha": "9d3b6a456d5f141a6e918d607fe71762a8872d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d3b6a456d5f141a6e918d607fe71762a8872d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/966c049dbf5e87774306aafddd0295a21657a1da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966c049dbf5e87774306aafddd0295a21657a1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/966c049dbf5e87774306aafddd0295a21657a1da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/966c049dbf5e87774306aafddd0295a21657a1da/comments", "author": null, "committer": null, "parents": [{"sha": "e9b2c82318e18123d95a35e91b9c27806c0867d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b2c82318e18123d95a35e91b9c27806c0867d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b2c82318e18123d95a35e91b9c27806c0867d2"}], "stats": {"total": 4139, "additions": 2073, "deletions": 2066}, "files": [{"sha": "725ba35a25046b6a7a7c748bfc99d001a6ff2f89", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966c049dbf5e87774306aafddd0295a21657a1da/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966c049dbf5e87774306aafddd0295a21657a1da/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=966c049dbf5e87774306aafddd0295a21657a1da", "patch": "@@ -1,3 +1,9 @@\n+2001-11-04  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* g77.texi: Split off invoke.texi (preliminary to using it\n+\tto generate a man page).\n+\t* Make-lang.in: Reflect in build rules.\n+\n Fri Nov  2 10:51:34 2001  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* com.c (ffecom_initialize_char_syntax_, U_CHAR, is_idchar,"}, {"sha": "889495861a6f8c31f8d41c49f3284f2095afa878", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966c049dbf5e87774306aafddd0295a21657a1da/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966c049dbf5e87774306aafddd0295a21657a1da/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=966c049dbf5e87774306aafddd0295a21657a1da", "patch": "@@ -170,7 +170,7 @@ f77.dvi: f/g77.dvi\n \n # g77 documentation.\n $(srcdir)/f/g77.info: $(srcdir)/f/g77.texi $(srcdir)/f/bugs.texi \\\n-\t\t$(srcdir)/f/ffe.texi \\\n+\t\t$(srcdir)/f/ffe.texi $(srcdir)/f/invoke.texi \\\n \t\t$(srcdir)/f/news.texi  $(srcdir)/f/intdoc.texi \\\n \t\t$(srcdir)/f/root.texi $(srcdir)/doc/include/fdl.texi \\\n \t\t$(srcdir)/doc/include/gpl.texi \\\n@@ -185,7 +185,7 @@ $(srcdir)/f/g77.info: $(srcdir)/f/g77.texi $(srcdir)/f/bugs.texi \\\n \telse true; fi\n \n f/g77.dvi: $(srcdir)/f/g77.texi $(srcdir)/f/bugs.texi \\\n-\t\t$(srcdir)/f/ffe.texi \\\n+\t\t$(srcdir)/f/ffe.texi $(srcdir)/f/invoke.texi \\\n \t\t$(srcdir)/f/news.texi  $(srcdir)/f/intdoc.texi \\\n \t\t$(srcdir)/f/root.texi $(srcdir)/doc/include/fdl.texi \\\n \t\t$(srcdir)/doc/include/gpl.texi \\"}, {"sha": "49a1516650b1d10439da97eebc1f5e8c9e953693", "filename": "gcc/f/g77.texi", "status": "modified", "additions": 1, "deletions": 2064, "changes": 2065, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966c049dbf5e87774306aafddd0295a21657a1da/gcc%2Ff%2Fg77.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966c049dbf5e87774306aafddd0295a21657a1da/gcc%2Ff%2Fg77.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.texi?ref=966c049dbf5e87774306aafddd0295a21657a1da", "patch": "@@ -889,2070 +889,7 @@ one is not the default.\n * Environment Variables:: Env vars that affect GNU Fortran.\n @end menu\n \n-@node Option Summary\n-@section Option Summary\n-\n-Here is a summary of all the options specific to GNU Fortran, grouped\n-by type.  Explanations are in the following sections.\n-\n-@table @emph\n-@item Overall Options\n-@xref{Overall Options,,Options Controlling the Kind of Output}.\n-@smallexample\n--fversion  -fset-g77-defaults  -fno-silent\n-@end smallexample\n-\n-@item Shorthand Options\n-@xref{Shorthand Options}.\n-@smallexample\n--ff66  -fno-f66  -ff77  -fno-f77  -fno-ugly\n-@end smallexample\n-\n-@item Fortran Language Options\n-@xref{Fortran Dialect Options,,Options Controlling Fortran Dialect}.\n-@smallexample\n--ffree-form  -fno-fixed-form  -ff90\n--fvxt  -fdollar-ok  -fno-backslash\n--fno-ugly-args  -fno-ugly-assign  -fno-ugly-assumed\n--fugly-comma  -fugly-complex  -fugly-init  -fugly-logint\n--fonetrip  -ftypeless-boz\n--fintrin-case-initcap  -fintrin-case-upper\n--fintrin-case-lower  -fintrin-case-any\n--fmatch-case-initcap  -fmatch-case-upper\n--fmatch-case-lower  -fmatch-case-any\n--fsource-case-upper  -fsource-case-lower\n--fsource-case-preserve\n--fsymbol-case-initcap  -fsymbol-case-upper\n--fsymbol-case-lower  -fsymbol-case-any\n--fcase-strict-upper  -fcase-strict-lower\n--fcase-initcap  -fcase-upper  -fcase-lower  -fcase-preserve\n--ff2c-intrinsics-delete  -ff2c-intrinsics-hide\n--ff2c-intrinsics-disable  -ff2c-intrinsics-enable\n--fbadu77-intrinsics-delete  -fbadu77-intrinsics-hide\n--fbadu77-intrinsics-disable  -fbadu77-intrinsics-enable\n--ff90-intrinsics-delete  -ff90-intrinsics-hide\n--ff90-intrinsics-disable  -ff90-intrinsics-enable\n--fgnu-intrinsics-delete  -fgnu-intrinsics-hide\n--fgnu-intrinsics-disable  -fgnu-intrinsics-enable\n--fmil-intrinsics-delete  -fmil-intrinsics-hide\n--fmil-intrinsics-disable  -fmil-intrinsics-enable\n--funix-intrinsics-delete  -funix-intrinsics-hide\n--funix-intrinsics-disable  -funix-intrinsics-enable\n--fvxt-intrinsics-delete  -fvxt-intrinsics-hide\n--fvxt-intrinsics-disable  -fvxt-intrinsics-enable\n--ffixed-line-length-@var{n}  -ffixed-line-length-none\n-@end smallexample\n-\n-@item Warning Options\n-@xref{Warning Options,,Options to Request or Suppress Warnings}.\n-@smallexample\n--fsyntax-only  -pedantic  -pedantic-errors  -fpedantic\n--w  -Wno-globals  -Wimplicit  -Wunused  -Wuninitialized\n--Wall  -Wsurprising\n--Werror  -W\n-@end smallexample\n-\n-@item Debugging Options\n-@xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n-@smallexample\n--g\n-@end smallexample\n-\n-@item Optimization Options\n-@xref{Optimize Options,,Options that Control Optimization}.\n-@smallexample\n--malign-double\n--ffloat-store  -fforce-mem  -fforce-addr  -fno-inline\n--ffast-math  -fstrength-reduce  -frerun-cse-after-loop\n--funsafe-math-optimizations -fno-trapping-math\n--fexpensive-optimizations  -fdelayed-branch\n--fschedule-insns  -fschedule-insn2  -fcaller-saves\n--funroll-loops  -funroll-all-loops\n--fno-move-all-movables  -fno-reduce-all-givs\n--fno-rerun-loop-opt\n-@end smallexample\n-\n-@item Directory Options\n-@xref{Directory Options,,Options for Directory Search}.\n-@smallexample\n--I@var{dir}  -I-\n-@end smallexample\n-\n-@item Code Generation Options\n-@xref{Code Gen Options,,Options for Code Generation Conventions}.\n-@smallexample\n--fno-automatic  -finit-local-zero  -fno-f2c\n--ff2c-library  -fno-underscoring  -fno-ident\n--fpcc-struct-return  -freg-struct-return\n--fshort-double  -fno-common  -fpack-struct\n--fzeros  -fno-second-underscore\n--femulate-complex\n--falias-check  -fargument-alias\n--fargument-noalias  -fno-argument-noalias-global\n--fno-globals  -fflatten-arrays\n--fbounds-check  -ffortran-bounds-check\n-@end smallexample\n-@end table\n-\n-@menu\n-* Overall Options::     Controlling the kind of output:\n-                        an executable, object files, assembler files,\n-                        or preprocessed source.\n-* Shorthand Options::   Options that are shorthand for other options.\n-* Fortran Dialect Options::  Controlling the variant of Fortran language\n-                             compiled.\n-* Warning Options::     How picky should the compiler be?\n-* Debugging Options::   Symbol tables, measurements, and debugging dumps.\n-* Optimize Options::    How much optimization?\n-* Preprocessor Options:: Controlling header files and macro definitions.\n-                         Also, getting dependency information for Make.\n-* Directory Options::   Where to find header files and libraries.\n-                        Where to find the compiler executable files.\n-* Code Gen Options::    Specifying conventions for function calls, data layout\n-                        and register usage.\n-@end menu\n-\n-@node Overall Options\n-@section Options Controlling the Kind of Output\n-@cindex overall options\n-@cindex options, overall\n-\n-Compilation can involve as many as four stages: preprocessing, code\n-generation (often what is really meant by the term ``compilation''),\n-assembly, and linking, always in that order.  The first three\n-stages apply to an individual source file, and end by producing an\n-object file; linking combines all the object files (those newly\n-compiled, and those specified as input) into an executable file.\n-\n-@cindex file name suffix\n-@cindex suffixes, file name\n-@cindex file name extension\n-@cindex extensions, file name\n-@cindex file type\n-@cindex types, file\n-For any given input file, the file name suffix determines what kind of\n-program is contained in the file---that is, the language in which the\n-program is written is generally indicated by the suffix.\n-Suffixes specific to GNU Fortran are listed below.\n-@xref{Overall Options,,gcc,Using and Porting GNU CC}, for\n-information on suffixes recognized by GNU CC.\n-\n-@table @code\n-@cindex .f filename suffix\n-@cindex .for filename suffix\n-@cindex .FOR filename suffix\n-@item @var{file}.f\n-@item @var{file}.for\n-@item @var{file}.FOR\n-Fortran source code that should not be preprocessed.\n-\n-Such source code cannot contain any preprocessor directives, such\n-as @code{#include}, @code{#define}, @code{#if}, and so on.\n-\n-You can force @samp{.f} files to be preprocessed by @code{cpp} by using\n-@samp{-x f77-cpp-input}.\n-@xref{LEX}.\n-\n-@cindex preprocessor\n-@cindex C preprocessor\n-@cindex cpp preprocessor\n-@cindex Fortran preprocessor\n-@cindex cpp program\n-@cindex programs, cpp\n-@cindex .F filename suffix\n-@cindex .fpp filename suffix\n-@cindex .FPP filename suffix\n-@item @var{file}.F\n-@item @var{file}.fpp\n-@item @var{file}.FPP\n-Fortran source code that must be preprocessed (by the C preprocessor\n-@code{cpp}, which is part of GNU CC).\n-\n-Note that preprocessing is not extended to the contents of\n-files included by the @code{INCLUDE} directive---the @code{#include}\n-preprocessor directive must be used instead.\n-\n-@cindex Ratfor preprocessor\n-@cindex programs, @code{ratfor}\n-@cindex @samp{.r} filename suffix\n-@cindex @code{ratfor}\n-@item @var{file}.r\n-Ratfor source code, which must be preprocessed by the @code{ratfor}\n-command, which is available separately (as it is not yet part of the GNU\n-Fortran distribution).\n-One version in Fortran, adapted for use with @code{g77}, is at\n-@uref{ftp://members.aol.com/n8tm/rat7.uue} (of uncertain copyright\n-status).  Another, public domain version in C is at\n-@uref{http://sepwww.stanford.edu/sep/prof/ratfor.shar.2}.\n-@end table\n-\n-UNIX users typically use the @file{@var{file}.f} and @file{@var{file}.F}\n-nomenclature.\n-Users of other operating systems, especially those that cannot\n-distinguish upper-case\n-letters from lower-case letters in their file names, typically use\n-the @file{@var{file}.for} and @file{@var{file}.fpp} nomenclature.\n-\n-@cindex #define\n-@cindex #include\n-@cindex #if\n-Use of the preprocessor @code{cpp} allows use of C-like\n-constructs such as @code{#define} and @code{#include}, but can\n-lead to unexpected, even mistaken, results due to Fortran's source file\n-format.\n-It is recommended that use of the C preprocessor\n-be limited to @code{#include} and, in\n-conjunction with @code{#define}, only @code{#if} and related directives,\n-thus avoiding in-line macro expansion entirely.\n-This recommendation applies especially\n-when using the traditional fixed source form.\n-With free source form,\n-fewer unexpected transformations are likely to happen, but use of\n-constructs such as Hollerith and character constants can nevertheless\n-present problems, especially when these are continued across multiple\n-source lines.\n-These problems result, primarily, from differences between the way\n-such constants are interpreted by the C preprocessor and by a Fortran\n-compiler.\n-\n-Another example of a problem that results from using the C preprocessor\n-is that a Fortran comment line that happens to contain any\n-characters ``interesting'' to the C preprocessor,\n-such as a backslash at the end of the line,\n-is not recognized by the preprocessor as a comment line,\n-so instead of being passed through ``raw'',\n-the line is edited according to the rules for the preprocessor.\n-For example, the backslash at the end of the line is removed,\n-along with the subsequent newline, resulting in the next\n-line being effectively commented out---unfortunate if that\n-line is a non-comment line of important code!\n-\n-@emph{Note:} The @samp{-traditional} and @samp{-undef} flags are supplied\n-to @code{cpp} by default, to help avoid unpleasant surprises.\n-@xref{Preprocessor Options,,Options Controlling the Preprocessor,\n-gcc,Using and Porting GNU CC}.\n-This means that ANSI C preprocessor features (such as the @samp{#}\n-operator) aren't available, and only variables in the C reserved\n-namespace (generally, names with a leading underscore) are liable to\n-substitution by C predefines.\n-Thus, if you want to do system-specific\n-tests, use, for example, @samp{#ifdef __linux__} rather than @samp{#ifdef linux}.\n-Use the @samp{-v} option to see exactly how the preprocessor is invoked.\n-\n-@cindex /*\n-Unfortunately, the @samp{-traditional} flag will not avoid an error from\n-anything that @code{cpp} sees as an unterminated C comment, such as:\n-@smallexample\n-C Some Fortran compilers accept /* as starting\n-C an inline comment.\n-@end smallexample\n-@xref{Trailing Comment}.\n-\n-The following options that affect overall processing are recognized\n-by the @code{g77} and @code{gcc} commands in a GNU Fortran installation:\n-\n-@table @code\n-@cindex -fversion option\n-@cindex options, -fversion\n-@cindex printing version information\n-@cindex version information, printing\n-@cindex consistency checks\n-@cindex internal consistency checks\n-@cindex checks, of internal consistency\n-@item -fversion\n-Ensure that the @code{g77}-specific version of the compiler phase is reported,\n-if run,\n-and, starting in @code{egcs} version 1.1,\n-that internal consistency checks in the @file{f771} program are run.\n-\n-This option is supplied automatically when @samp{-v} or @samp{--verbose}\n-is specified as a command-line option for @code{g77} or @code{gcc}\n-and when the resulting commands compile Fortran source files.\n-\n-@cindex -fset-g77-defaults option\n-@cindex options, -fset-g77-defaults\n-@item -fset-g77-defaults\n-@emph{Version info:}\n-This option was obsolete as of @code{egcs}\n-version 1.1.\n-The effect is instead achieved\n-by the @code{lang_init_options} routine\n-in @file{gcc/gcc/f/com.c}.\n-\n-@cindex consistency checks\n-@cindex internal consistency checks\n-@cindex checks, of internal consistency\n-Set up whatever @code{gcc} options are to apply to Fortran\n-compilations, and avoid running internal consistency checks\n-that might take some time.\n-\n-This option is supplied automatically when compiling Fortran code\n-via the @code{g77} or @code{gcc} command.\n-The description of this option is provided so that users seeing\n-it in the output of, say, @samp{g77 -v} understand why it is\n-there.\n-\n-@cindex modifying g77\n-@cindex code, modifying\n-Also, developers who run @code{f771} directly might want to specify it\n-by hand to get the same defaults as they would running @code{f771}\n-via @code{g77} or @code{gcc}.\n-However, such developers should, after linking a new @code{f771}\n-executable, invoke it without this option once,\n-e.g. via @kbd{./f771 -quiet < /dev/null},\n-to ensure that they have not introduced any\n-internal inconsistencies (such as in the table of\n-intrinsics) before proceeding---@code{g77} will crash\n-with a diagnostic if it detects an inconsistency.\n-\n-@cindex -fno-silent option\n-@cindex options, -fno-silent\n-@cindex f2c compatibility\n-@cindex compatibility, f2c\n-@cindex status, compilation\n-@cindex compilation, status\n-@cindex reporting compilation status\n-@cindex printing compilation status\n-@item -fno-silent\n-Print (to @code{stderr}) the names of the program units as\n-they are compiled, in a form similar to that used by popular\n-UNIX @code{f77} implementations and @code{f2c}.\n-@end table\n-\n-@xref{Overall Options,,Options Controlling the Kind of Output,\n-gcc,Using and Porting GNU CC}, for information\n-on more options that control the overall operation of the @code{gcc} command\n-(and, by extension, the @code{g77} command).\n-\n-@node Shorthand Options\n-@section Shorthand Options\n-@cindex shorthand options\n-@cindex options, shorthand\n-@cindex macro options\n-@cindex options, macro\n-\n-The following options serve as ``shorthand''\n-for other options accepted by the compiler:\n-\n-@table @code\n-@cindex -fugly option\n-@cindex options, -fugly\n-@item -fugly\n-@cindex ugly features\n-@cindex features, ugly\n-@emph{Note:} This option is no longer supported.\n-The information, below, is provided to aid\n-in the conversion of old scripts.\n-\n-Specify that certain ``ugly'' constructs are to be quietly accepted.\n-Same as:\n-\n-@smallexample\n--fugly-args -fugly-assign -fugly-assumed\n--fugly-comma -fugly-complex -fugly-init\n--fugly-logint\n-@end smallexample\n-\n-These constructs are considered inappropriate to use in new\n-or well-maintained portable Fortran code, but widely used\n-in old code.\n-@xref{Distensions}, for more information.\n-\n-@cindex -fno-ugly option\n-@cindex options, -fno-ugly\n-@item -fno-ugly\n-@cindex ugly features\n-@cindex features, ugly\n-Specify that all ``ugly'' constructs are to be noisily rejected.\n-Same as:\n-\n-@smallexample\n--fno-ugly-args -fno-ugly-assign -fno-ugly-assumed\n--fno-ugly-comma -fno-ugly-complex -fno-ugly-init\n--fno-ugly-logint\n-@end smallexample\n-\n-@xref{Distensions}, for more information.\n-\n-@cindex -ff66 option\n-@cindex options, -ff66\n-@item -ff66\n-@cindex FORTRAN 66\n-@cindex compatibility, FORTRAN 66\n-Specify that the program is written in idiomatic FORTRAN 66.\n-Same as @samp{-fonetrip -fugly-assumed}.\n-\n-The @samp{-fno-f66} option is the inverse of @samp{-ff66}.\n-As such, it is the same as @samp{-fno-onetrip -fno-ugly-assumed}.\n-\n-The meaning of this option is likely to be refined as future\n-versions of @code{g77} provide more compatibility with other\n-existing and obsolete Fortran implementations.\n-\n-@cindex -ff77 option\n-@cindex options, -ff77\n-@item -ff77\n-@cindex UNIX f77\n-@cindex f2c compatibility\n-@cindex compatibility, f2c\n-@cindex f77 compatibility\n-@cindex compatibility, f77\n-Specify that the program is written in idiomatic UNIX FORTRAN 77\n-and/or the dialect accepted by the @code{f2c} product.\n-Same as @samp{-fbackslash -fno-typeless-boz}.\n-\n-The meaning of this option is likely to be refined as future\n-versions of @code{g77} provide more compatibility with other\n-existing and obsolete Fortran implementations.\n-\n-@cindex -fno-f77 option\n-@cindex options, -fno-f77\n-@item -fno-f77\n-@cindex UNIX f77\n-The @samp{-fno-f77} option is @emph{not} the inverse\n-of @samp{-ff77}.\n-It specifies that the program is not written in idiomatic UNIX\n-FORTRAN 77 or @code{f2c}, but in a more widely portable dialect.\n-@samp{-fno-f77} is the same as @samp{-fno-backslash}.\n-\n-The meaning of this option is likely to be refined as future\n-versions of @code{g77} provide more compatibility with other\n-existing and obsolete Fortran implementations.\n-@end table\n-\n-@node Fortran Dialect Options\n-@section Options Controlling Fortran Dialect\n-@cindex dialect options\n-@cindex language, dialect options\n-@cindex options, dialect\n-\n-The following options control the dialect of Fortran\n-that the compiler accepts:\n-\n-@table @code\n-@cindex -ffree-form option\n-@cindex options, -ffree-form\n-@cindex -fno-fixed-form option\n-@cindex options, -fno-fixed-form\n-@cindex source file format\n-@cindex free form\n-@cindex fixed form\n-@cindex Fortran 90, features\n-@item -ffree-form\n-@item -fno-fixed-form\n-Specify that the source file is written in free form\n-(introduced in Fortran 90) instead of the more-traditional fixed form.\n-\n-@cindex -ff90 option\n-@cindex options, -ff90\n-@cindex Fortran 90, features\n-@item -ff90\n-Allow certain Fortran-90 constructs.\n-\n-This option controls whether certain\n-Fortran 90 constructs are recognized.\n-(Other Fortran 90 constructs\n-might or might not be recognized depending on other options such as\n-@samp{-fvxt}, @samp{-ff90-intrinsics-enable}, and the\n-current level of support for Fortran 90.)\n-\n-@xref{Fortran 90}, for more information.\n-\n-@cindex -fvxt option\n-@cindex options, -fvxt\n-@item -fvxt\n-@cindex Fortran 90, features\n-@cindex VXT extensions\n-Specify the treatment of certain constructs that have different\n-meanings depending on whether the code is written in\n-GNU Fortran (based on FORTRAN 77 and akin to Fortran 90)\n-or VXT Fortran (more like VAX FORTRAN).\n-\n-The default is @samp{-fno-vxt}.\n-@samp{-fvxt} specifies that the VXT Fortran interpretations\n-for those constructs are to be chosen.\n-\n-@xref{VXT Fortran}, for more information.\n-\n-@cindex -fdollar-ok option\n-@cindex options, -fdollar-ok\n-@item -fdollar-ok\n-@cindex dollar sign\n-@cindex symbol names\n-@cindex character set\n-Allow @samp{$} as a valid character in a symbol name.\n-\n-@cindex -fno-backslash option\n-@cindex options, -fno-backslash\n-@item -fno-backslash\n-@cindex backslash\n-@cindex character constants\n-@cindex Hollerith constants\n-Specify that @samp{\\} is not to be specially interpreted in character\n-and Hollerith constants a la C and many UNIX Fortran compilers.\n-\n-For example, with @samp{-fbackslash} in effect, @samp{A\\nB} specifies\n-three characters, with the second one being newline.\n-With @samp{-fno-backslash}, it specifies four characters,\n-@samp{A}, @samp{\\}, @samp{n}, and @samp{B}.\n-\n-Note that @code{g77} implements a fairly general form of backslash\n-processing that is incompatible with the narrower forms supported\n-by some other compilers.\n-For example, @samp{'A\\003B'} is a three-character string in @code{g77},\n-whereas other compilers that support backslash might not support\n-the three-octal-digit form, and thus treat that string as longer\n-than three characters.\n-\n-@xref{Backslash in Constants}, for\n-information on why @samp{-fbackslash} is the default\n-instead of @samp{-fno-backslash}.\n-\n-@cindex -fno-ugly-args option\n-@cindex options, -fno-ugly-args\n-@item -fno-ugly-args\n-Disallow passing Hollerith and typeless constants as actual\n-arguments (for example, @samp{CALL FOO(4HABCD)}).\n-\n-@xref{Ugly Implicit Argument Conversion}, for more information.\n-\n-@cindex -fugly-assign option\n-@cindex options, -fugly-assign\n-@item -fugly-assign\n-Use the same storage for a given variable regardless of\n-whether it is used to hold an assigned-statement label\n-(as in @samp{ASSIGN 10 TO I}) or used to hold numeric data\n-(as in @samp{I = 3}).\n-\n-@xref{Ugly Assigned Labels}, for more information.\n-\n-@cindex -fugly-assumed option\n-@cindex options, -fugly-assumed\n-@item -fugly-assumed\n-Assume any dummy array with a final dimension specified as @samp{1}\n-is really an assumed-size array, as if @samp{*} had been specified\n-for the final dimension instead of @samp{1}.\n-\n-For example, @samp{DIMENSION X(1)} is treated as if it\n-had read @samp{DIMENSION X(*)}.\n-\n-@xref{Ugly Assumed-Size Arrays}, for more information.\n-\n-@cindex -fugly-comma option\n-@cindex options, -fugly-comma\n-@item -fugly-comma\n-In an external-procedure invocation,\n-treat a trailing comma in the argument list\n-as specification of a trailing null argument,\n-and treat an empty argument list\n-as specification of a single null argument.\n-\n-For example, @samp{CALL FOO(,)} is treated as\n-@samp{CALL FOO(%VAL(0), %VAL(0))}.\n-That is, @emph{two} null arguments are specified\n-by the procedure call when @samp{-fugly-comma} is in force.\n-And @samp{F = FUNC()} is treated as @samp{F = FUNC(%VAL(0))}.\n-\n-The default behavior, @samp{-fno-ugly-comma}, is to ignore\n-a single trailing comma in an argument list.\n-So, by default, @samp{CALL FOO(X,)} is treated\n-exactly the same as @samp{CALL FOO(X)}.\n-\n-@xref{Ugly Null Arguments}, for more information.\n-\n-@cindex -fugly-complex option\n-@cindex options, -fugly-complex\n-@item -fugly-complex\n-Do not complain about @samp{REAL(@var{expr})} or\n-@samp{AIMAG(@var{expr})} when @var{expr} is a @code{COMPLEX}\n-type other than @code{COMPLEX(KIND=1)}---usually\n-this is used to permit @code{COMPLEX(KIND=2)}\n-(@code{DOUBLE COMPLEX}) operands.\n-\n-The @samp{-ff90} option controls the interpretation\n-of this construct.\n-\n-@xref{Ugly Complex Part Extraction}, for more information.\n-\n-@cindex -fno-ugly-init option\n-@cindex options, -fno-ugly-init\n-@item -fno-ugly-init\n-Disallow use of Hollerith and typeless constants as initial\n-values (in @code{PARAMETER} and @code{DATA} statements), and\n-use of character constants to\n-initialize numeric types and vice versa.\n-\n-For example, @samp{DATA I/'F'/, CHRVAR/65/, J/4HABCD/} is disallowed by\n-@samp{-fno-ugly-init}.\n-\n-@xref{Ugly Conversion of Initializers}, for more information.\n-\n-@cindex -fugly-logint option\n-@cindex options, -fugly-logint\n-@item -fugly-logint\n-Treat @code{INTEGER} and @code{LOGICAL} variables and\n-expressions as potential stand-ins for each other.\n-\n-For example, automatic conversion between @code{INTEGER} and\n-@code{LOGICAL} is enabled, for many contexts, via this option.\n-\n-@xref{Ugly Integer Conversions}, for more information.\n-\n-@cindex -fonetrip option\n-@cindex options, -fonetrip\n-@item -fonetrip\n-@cindex FORTRAN 66\n-@cindex @code{DO} loops, one-trip\n-@cindex one-trip @code{DO} loops\n-@cindex @code{DO} loops, zero-trip\n-@cindex zero-trip @code{DO} loops\n-@cindex compatibility, FORTRAN 66\n-Executable iterative @code{DO} loops are to be executed at\n-least once each time they are reached.\n-\n-ANSI FORTRAN 77 and more recent versions of the Fortran standard\n-specify that the body of an iterative @code{DO} loop is not executed\n-if the number of iterations calculated from the parameters of the\n-loop is less than 1.\n-(For example, @samp{DO 10 I = 1, 0}.)\n-Such a loop is called a @dfn{zero-trip loop}.\n-\n-Prior to ANSI FORTRAN 77, many compilers implemented @code{DO} loops\n-such that the body of a loop would be executed at least once, even\n-if the iteration count was zero.\n-Fortran code written assuming this behavior is said to require\n-@dfn{one-trip loops}.\n-For example, some code written to the FORTRAN 66 standard\n-expects this behavior from its @code{DO} loops, although that\n-standard did not specify this behavior.\n-\n-The @samp{-fonetrip} option specifies that the source file(s) being\n-compiled require one-trip loops.\n-\n-This option affects only those loops specified by the (iterative) @code{DO}\n-statement and by implied-@code{DO} lists in I/O statements.\n-Loops specified by implied-@code{DO} lists in @code{DATA} and\n-specification (non-executable) statements are not affected.\n-\n-@cindex -ftypeless-boz option\n-@cindex options, -ftypeless-boz\n-@cindex prefix-radix constants\n-@cindex constants, prefix-radix\n-@cindex constants, types\n-@cindex types, constants\n-@item -ftypeless-boz\n-Specifies that prefix-radix non-decimal constants, such as\n-@samp{Z'ABCD'}, are typeless instead of @code{INTEGER(KIND=1)}.\n-\n-You can test for yourself whether a particular compiler treats\n-the prefix form as @code{INTEGER(KIND=1)} or typeless by running the\n-following program:\n-\n-@smallexample\n-EQUIVALENCE (I, R)\n-R = Z'ABCD1234'\n-J = Z'ABCD1234'\n-IF (J .EQ. I) PRINT *, 'Prefix form is TYPELESS'\n-IF (J .NE. I) PRINT *, 'Prefix form is INTEGER'\n-END\n-@end smallexample\n-\n-Reports indicate that many compilers process this form as\n-@code{INTEGER(KIND=1)}, though a few as typeless, and at least one\n-based on a command-line option specifying some kind of\n-compatibility.\n-\n-@cindex -fintrin-case-initcap option\n-@cindex options, -fintrin-case-initcap\n-@item -fintrin-case-initcap\n-@cindex -fintrin-case-upper option\n-@cindex options, -fintrin-case-upper\n-@item -fintrin-case-upper\n-@cindex -fintrin-case-lower option\n-@cindex options, -fintrin-case-lower\n-@item -fintrin-case-lower\n-@cindex -fintrin-case-any option\n-@cindex options, -fintrin-case-any\n-@item -fintrin-case-any\n-Specify expected case for intrinsic names.\n-@samp{-fintrin-case-lower} is the default.\n-\n-@cindex -fmatch-case-initcap option\n-@cindex options, -fmatch-case-initcap\n-@item -fmatch-case-initcap\n-@cindex -fmatch-case-upper option\n-@cindex options, -fmatch-case-upper\n-@item -fmatch-case-upper\n-@cindex -fmatch-case-lower option\n-@cindex options, -fmatch-case-lower\n-@item -fmatch-case-lower\n-@cindex -fmatch-case-any option\n-@cindex options, -fmatch-case-any\n-@item -fmatch-case-any\n-Specify expected case for keywords.\n-@samp{-fmatch-case-lower} is the default.\n-\n-@cindex -fsource-case-upper option\n-@cindex options, -fsource-case-upper\n-@item -fsource-case-upper\n-@cindex -fsource-case-lower option\n-@cindex options, -fsource-case-lower\n-@item -fsource-case-lower\n-@cindex -fsource-case-preserve option\n-@cindex options, -fsource-case-preserve\n-@item -fsource-case-preserve\n-Specify whether source text other than character and Hollerith constants\n-is to be translated to uppercase, to lowercase, or preserved as is.\n-@samp{-fsource-case-lower} is the default.\n-\n-@cindex -fsymbol-case-initcap option\n-@cindex options, -fsymbol-case-initcap\n-@item -fsymbol-case-initcap\n-@cindex -fsymbol-case-upper option\n-@cindex options, -fsymbol-case-upper\n-@item -fsymbol-case-upper\n-@cindex -fsymbol-case-lower option\n-@cindex options, -fsymbol-case-lower\n-@item -fsymbol-case-lower\n-@cindex -fsymbol-case-any option\n-@cindex options, -fsymbol-case-any\n-@item -fsymbol-case-any\n-Specify valid cases for user-defined symbol names.\n-@samp{-fsymbol-case-any} is the default.\n-\n-@cindex -fcase-strict-upper option\n-@cindex options, -fcase-strict-upper\n-@item -fcase-strict-upper\n-Same as @samp{-fintrin-case-upper -fmatch-case-upper -fsource-case-preserve\n--fsymbol-case-upper}.\n-(Requires all pertinent source to be in uppercase.)\n-\n-@cindex -fcase-strict-lower option\n-@cindex options, -fcase-strict-lower\n-@item -fcase-strict-lower\n-Same as @samp{-fintrin-case-lower -fmatch-case-lower -fsource-case-preserve\n--fsymbol-case-lower}.\n-(Requires all pertinent source to be in lowercase.)\n-\n-@cindex -fcase-initcap option\n-@cindex options, -fcase-initcap\n-@item -fcase-initcap\n-Same as @samp{-fintrin-case-initcap -fmatch-case-initcap -fsource-case-preserve\n--fsymbol-case-initcap}.\n-(Requires all pertinent source to be in initial capitals,\n-as in @samp{Print *,SqRt(Value)}.)\n-\n-@cindex -fcase-upper option\n-@cindex options, -fcase-upper\n-@item -fcase-upper\n-Same as @samp{-fintrin-case-any -fmatch-case-any -fsource-case-upper\n--fsymbol-case-any}.\n-(Maps all pertinent source to uppercase.)\n-\n-@cindex -fcase-lower option\n-@cindex options, -fcase-lower\n-@item -fcase-lower\n-Same as @samp{-fintrin-case-any -fmatch-case-any -fsource-case-lower\n--fsymbol-case-any}.\n-(Maps all pertinent source to lowercase.)\n-\n-@cindex -fcase-preserve option\n-@cindex options, -fcase-preserve\n-@item -fcase-preserve\n-Same as @samp{-fintrin-case-any -fmatch-case-any -fsource-case-preserve\n--fsymbol-case-any}.\n-(Preserves all case in user-defined symbols,\n-while allowing any-case matching of intrinsics and keywords.\n-For example, @samp{call Foo(i,I)} would pass two @emph{different}\n-variables named @samp{i} and @samp{I} to a procedure named @samp{Foo}.)\n-\n-@cindex -fbadu77-intrinsics-delete option\n-@cindex options, -fbadu77-intrinsics-delete\n-@item -fbadu77-intrinsics-delete\n-@cindex -fbadu77-intrinsics-hide option\n-@cindex options, -fbadu77-intrinsics-hide\n-@item -fbadu77-intrinsics-hide\n-@cindex -fbadu77-intrinsics-disable option\n-@cindex options, -fbadu77-intrinsics-disable\n-@item -fbadu77-intrinsics-disable\n-@cindex -fbadu77-intrinsics-enable option\n-@cindex options, -fbadu77-intrinsics-enable\n-@item -fbadu77-intrinsics-enable\n-@cindex @code{badu77} intrinsics\n-@cindex intrinsics, @code{badu77}\n-Specify status of UNIX intrinsics having inappropriate forms.\n-@samp{-fbadu77-intrinsics-enable} is the default.\n-@xref{Intrinsic Groups}.\n-\n-@cindex -ff2c-intrinsics-delete option\n-@cindex options, -ff2c-intrinsics-delete\n-@item -ff2c-intrinsics-delete\n-@cindex -ff2c-intrinsics-hide option\n-@cindex options, -ff2c-intrinsics-hide\n-@item -ff2c-intrinsics-hide\n-@cindex -ff2c-intrinsics-disable option\n-@cindex options, -ff2c-intrinsics-disable\n-@item -ff2c-intrinsics-disable\n-@cindex -ff2c-intrinsics-enable option\n-@cindex options, -ff2c-intrinsics-enable\n-@item -ff2c-intrinsics-enable\n-@cindex @code{f2c} intrinsics\n-@cindex intrinsics, @code{f2c}\n-Specify status of f2c-specific intrinsics.\n-@samp{-ff2c-intrinsics-enable} is the default.\n-@xref{Intrinsic Groups}.\n-\n-@cindex -ff90-intrinsics-delete option\n-@cindex options, -ff90-intrinsics-delete\n-@item -ff90-intrinsics-delete\n-@cindex -ff90-intrinsics-hide option\n-@cindex options, -ff90-intrinsics-hide\n-@item -ff90-intrinsics-hide\n-@cindex -ff90-intrinsics-disable option\n-@cindex options, -ff90-intrinsics-disable\n-@item -ff90-intrinsics-disable\n-@cindex -ff90-intrinsics-enable option\n-@cindex options, -ff90-intrinsics-enable\n-@item -ff90-intrinsics-enable\n-@cindex Fortran 90, intrinsics\n-@cindex intrinsics, Fortran 90\n-Specify status of F90-specific intrinsics.\n-@samp{-ff90-intrinsics-enable} is the default.\n-@xref{Intrinsic Groups}.\n-\n-@cindex -fgnu-intrinsics-delete option\n-@cindex options, -fgnu-intrinsics-delete\n-@item -fgnu-intrinsics-delete\n-@cindex -fgnu-intrinsics-hide option\n-@cindex options, -fgnu-intrinsics-hide\n-@item -fgnu-intrinsics-hide\n-@cindex -fgnu-intrinsics-disable option\n-@cindex options, -fgnu-intrinsics-disable\n-@item -fgnu-intrinsics-disable\n-@cindex -fgnu-intrinsics-enable option\n-@cindex options, -fgnu-intrinsics-enable\n-@item -fgnu-intrinsics-enable\n-@cindex Digital Fortran features\n-@cindex @code{COMPLEX} intrinsics\n-@cindex intrinsics, @code{COMPLEX}\n-Specify status of Digital's COMPLEX-related intrinsics.\n-@samp{-fgnu-intrinsics-enable} is the default.\n-@xref{Intrinsic Groups}.\n-\n-@cindex -fmil-intrinsics-delete option\n-@cindex options, -fmil-intrinsics-delete\n-@item -fmil-intrinsics-delete\n-@cindex -fmil-intrinsics-hide option\n-@cindex options, -fmil-intrinsics-hide\n-@item -fmil-intrinsics-hide\n-@cindex -fmil-intrinsics-disable option\n-@cindex options, -fmil-intrinsics-disable\n-@item -fmil-intrinsics-disable\n-@cindex -fmil-intrinsics-enable option\n-@cindex options, -fmil-intrinsics-enable\n-@item -fmil-intrinsics-enable\n-@cindex MIL-STD 1753\n-@cindex intrinsics, MIL-STD 1753\n-Specify status of MIL-STD-1753-specific intrinsics.\n-@samp{-fmil-intrinsics-enable} is the default.\n-@xref{Intrinsic Groups}.\n-\n-@cindex -funix-intrinsics-delete option\n-@cindex options, -funix-intrinsics-delete\n-@item -funix-intrinsics-delete\n-@cindex -funix-intrinsics-hide option\n-@cindex options, -funix-intrinsics-hide\n-@item -funix-intrinsics-hide\n-@cindex -funix-intrinsics-disable option\n-@cindex options, -funix-intrinsics-disable\n-@item -funix-intrinsics-disable\n-@cindex -funix-intrinsics-enable option\n-@cindex options, -funix-intrinsics-enable\n-@item -funix-intrinsics-enable\n-@cindex UNIX intrinsics\n-@cindex intrinsics, UNIX\n-Specify status of UNIX intrinsics.\n-@samp{-funix-intrinsics-enable} is the default.\n-@xref{Intrinsic Groups}.\n-\n-@cindex -fvxt-intrinsics-delete option\n-@cindex options, -fvxt-intrinsics-delete\n-@item -fvxt-intrinsics-delete\n-@cindex -fvxt-intrinsics-hide option\n-@cindex options, -fvxt-intrinsics-hide\n-@item -fvxt-intrinsics-hide\n-@cindex -fvxt-intrinsics-disable option\n-@cindex options, -fvxt-intrinsics-disable\n-@item -fvxt-intrinsics-disable\n-@cindex -fvxt-intrinsics-enable option\n-@cindex options, -fvxt-intrinsics-enable\n-@item -fvxt-intrinsics-enable\n-@cindex VXT intrinsics\n-@cindex intrinsics, VXT\n-Specify status of VXT intrinsics.\n-@samp{-fvxt-intrinsics-enable} is the default.\n-@xref{Intrinsic Groups}.\n-\n-@cindex -ffixed-line-length-@var{n} option\n-@cindex options, -ffixed-line-length-@var{n}\n-@item -ffixed-line-length-@var{n}\n-@cindex source file format\n-@cindex lines, length\n-@cindex length of source lines\n-@cindex fixed form\n-@cindex limits, lengths of source lines\n-Set column after which characters are ignored in typical fixed-form\n-lines in the source file, and through which spaces are assumed (as\n-if padded to that length) after the ends of short fixed-form lines.\n-\n-@cindex card image\n-@cindex extended-source option\n-Popular values for @var{n} include 72 (the\n-standard and the default), 80 (card image), and 132 (corresponds\n-to ``extended-source'' options in some popular compilers).\n-@var{n} may be @samp{none}, meaning that the entire line is meaningful\n-and that continued character constants never have implicit spaces appended\n-to them to fill out the line.\n-@samp{-ffixed-line-length-0} means the same thing as\n-@samp{-ffixed-line-length-none}.\n-\n-@xref{Source Form}, for more information.\n-@end table\n-\n-@node Warning Options\n-@section Options to Request or Suppress Warnings\n-@cindex options, warnings\n-@cindex warnings, suppressing\n-@cindex messages, warning\n-@cindex suppressing warnings\n-\n-Warnings are diagnostic messages that report constructions which\n-are not inherently erroneous but which are risky or suggest there\n-might have been an error.\n-\n-You can request many specific warnings with options beginning @samp{-W},\n-for example @samp{-Wimplicit} to request warnings on implicit\n-declarations.  Each of these specific warning options also has a\n-negative form beginning @samp{-Wno-} to turn off warnings;\n-for example, @samp{-Wno-implicit}.  This manual lists only one of the\n-two forms, whichever is not the default.\n-\n-These options control the amount and kinds of warnings produced by GNU\n-Fortran:\n-\n-@table @code\n-@cindex syntax checking\n-@cindex -fsyntax-only option\n-@cindex options, -fsyntax-only\n-@item -fsyntax-only\n-Check the code for syntax errors, but don't do anything beyond that.\n-\n-@cindex -pedantic option\n-@cindex options, -pedantic\n-@item -pedantic\n-Issue warnings for uses of extensions to ANSI FORTRAN 77.\n-@samp{-pedantic} also applies to C-language constructs where they\n-occur in GNU Fortran source files, such as use of @samp{\\e} in a\n-character constant within a directive like @samp{#include}.\n-\n-Valid ANSI FORTRAN 77 programs should compile properly with or without\n-this option.\n-However, without this option, certain GNU extensions and traditional\n-Fortran features are supported as well.\n-With this option, many of them are rejected.\n-\n-Some users try to use @samp{-pedantic} to check programs for strict ANSI\n-conformance.\n-They soon find that it does not do quite what they want---it finds some\n-non-ANSI practices, but not all.\n-However, improvements to @code{g77} in this area are welcome.\n-\n-@cindex -pedantic-errors option\n-@cindex options, -pedantic-errors\n-@item -pedantic-errors\n-Like @samp{-pedantic}, except that errors are produced rather than\n-warnings.\n-\n-@cindex -fpedantic option\n-@cindex options, -fpedantic\n-@item -fpedantic\n-Like @samp{-pedantic}, but applies only to Fortran constructs.\n-\n-@cindex -w option\n-@cindex options, -w\n-@item -w\n-Inhibit all warning messages.\n-\n-@cindex -Wno-globals option\n-@cindex options, -Wno-globals\n-@item -Wno-globals\n-@cindex global names, warning\n-@cindex warnings, global names\n-Inhibit warnings about use of a name as both a global name\n-(a subroutine, function, or block data program unit, or a\n-common block) and implicitly as the name of an intrinsic\n-in a source file.\n-\n-Also inhibit warnings about inconsistent invocations and/or\n-definitions of global procedures (function and subroutines).\n-Such inconsistencies include different numbers of arguments\n-and different types of arguments.\n-\n-@cindex -Wimplicit option\n-@cindex options, -Wimplicit\n-@item -Wimplicit\n-@cindex implicit declaration, warning\n-@cindex warnings, implicit declaration\n-@cindex -u option\n-@cindex /WARNINGS=DECLARATIONS switch\n-@cindex IMPLICIT NONE, similar effect\n-@cindex effecting IMPLICIT NONE\n-Warn whenever a variable, array, or function is implicitly\n-declared.\n-Has an effect similar to using the @code{IMPLICIT NONE} statement\n-in every program unit.\n-(Some Fortran compilers provide this feature by an option\n-named @samp{-u} or @samp{/WARNINGS=DECLARATIONS}.)\n-\n-@cindex -Wunused option\n-@cindex options, -Wunused\n-@item -Wunused\n-@cindex unused variables\n-@cindex variables, unused\n-Warn whenever a variable is unused aside from its declaration.\n-\n-@cindex -Wuninitialized option\n-@cindex options, -Wuninitialized\n-@item -Wuninitialized\n-@cindex uninitialized variables\n-@cindex variables, uninitialized\n-Warn whenever an automatic variable is used without first being initialized.\n-\n-These warnings are possible only in optimizing compilation,\n-because they require data-flow information that is computed only\n-when optimizing.  If you don't specify @samp{-O}, you simply won't\n-get these warnings.\n-\n-These warnings occur only for variables that are candidates for\n-register allocation.  Therefore, they do not occur for a variable\n-@c that is declared @code{VOLATILE}, or\n-whose address is taken, or whose size\n-is other than 1, 2, 4 or 8 bytes.  Also, they do not occur for\n-arrays, even when they are in registers.\n-\n-Note that there might be no warning about a variable that is used only\n-to compute a value that itself is never used, because such\n-computations may be deleted by data-flow analysis before the warnings\n-are printed.\n-\n-These warnings are made optional because GNU Fortran is not smart\n-enough to see all the reasons why the code might be correct\n-despite appearing to have an error.  Here is one example of how\n-this can happen:\n-\n-@example\n-SUBROUTINE DISPAT(J)\n-IF (J.EQ.1) I=1\n-IF (J.EQ.2) I=4\n-IF (J.EQ.3) I=5\n-CALL FOO(I)\n-END\n-@end example\n-\n-@noindent\n-If the value of @code{J} is always 1, 2 or 3, then @code{I} is\n-always initialized, but GNU Fortran doesn't know this.  Here is\n-another common case:\n-\n-@example\n-SUBROUTINE MAYBE(FLAG)\n-LOGICAL FLAG\n-IF (FLAG) VALUE = 9.4\n-@dots{}\n-IF (FLAG) PRINT *, VALUE\n-END\n-@end example\n-\n-@noindent\n-This has no bug because @code{VALUE} is used only if it is set.\n-\n-@cindex -Wall option\n-@cindex options, -Wall\n-@item -Wall\n-@cindex all warnings\n-@cindex warnings, all\n-The @samp{-Wunused} and @samp{-Wuninitialized} options combined.\n-These are all the\n-options which pertain to usage that we recommend avoiding and that we\n-believe is easy to avoid.\n-(As more warnings are added to @code{g77}, some might\n-be added to the list enabled by @samp{-Wall}.)\n-@end table\n-\n-The remaining @samp{-W@dots{}} options are not implied by @samp{-Wall}\n-because they warn about constructions that we consider reasonable to\n-use, on occasion, in clean programs.\n-\n-@table @code\n-@c @item -W\n-@c Print extra warning messages for these events:\n-@c\n-@c @itemize @bullet\n-@c @item\n-@c If @samp{-Wall} or @samp{-Wunused} is also specified, warn about unused\n-@c arguments.\n-@c\n-@c @end itemize\n-@c\n-@cindex -Wsurprising option\n-@cindex options, -Wsurprising\n-@item -Wsurprising\n-Warn about ``suspicious'' constructs that are interpreted\n-by the compiler in a way that might well be surprising to\n-someone reading the code.\n-These differences can result in subtle, compiler-dependent\n-(even machine-dependent) behavioral differences.\n-The constructs warned about include:\n-\n-@itemize @bullet\n-@item\n-Expressions having two arithmetic operators in a row, such\n-as @samp{X*-Y}.\n-Such a construct is nonstandard, and can produce\n-unexpected results in more complicated situations such\n-as @samp{X**-Y*Z}.\n-@code{g77}, along with many other compilers, interprets\n-this example differently than many programmers, and a few\n-other compilers.\n-Specifically, @code{g77} interprets @samp{X**-Y*Z} as\n-@samp{(X**(-Y))*Z}, while others might think it should\n-be interpreted as @samp{X**(-(Y*Z))}.\n-\n-A revealing example is the constant expression @samp{2**-2*1.},\n-which @code{g77} evaluates to .25, while others might evaluate\n-it to 0., the difference resulting from the way precedence affects\n-type promotion.\n-\n-(The @samp{-fpedantic} option also warns about expressions\n-having two arithmetic operators in a row.)\n-\n-@item\n-Expressions with a unary minus followed by an operand and then\n-a binary operator other than plus or minus.\n-For example, @samp{-2**2} produces a warning, because\n-the precedence is @samp{-(2**2)}, yielding -4, not\n-@samp{(-2)**2}, which yields 4, and which might represent\n-what a programmer expects.\n-\n-An example of an expression producing different results\n-in a surprising way is @samp{-I*S}, where @var{I} holds\n-the value @samp{-2147483648} and @var{S} holds @samp{0.5}.\n-On many systems, negating @var{I} results in the same\n-value, not a positive number, because it is already the\n-lower bound of what an @code{INTEGER(KIND=1)} variable can hold.\n-So, the expression evaluates to a positive number, while\n-the ``expected'' interpretation, @samp{(-I)*S}, would\n-evaluate to a negative number.\n-\n-Even cases such as @samp{-I*J} produce warnings,\n-even though, in most configurations and situations,\n-there is no computational difference between the\n-results of the two interpretations---the purpose\n-of this warning is to warn about differing interpretations\n-and encourage a better style of coding, not to identify\n-only those places where bugs might exist in the user's\n-code.\n-\n-@cindex DO statement\n-@cindex statements, DO\n-@item\n-@code{DO} loops with @code{DO} variables that are not\n-of integral type---that is, using @code{REAL}\n-variables as loop control variables.\n-Although such loops can be written to work in the\n-``obvious'' way, the way @code{g77} is required by the\n-Fortran standard to interpret such code is likely to\n-be quite different from the way many programmers expect.\n-(This is true of all @code{DO} loops, but the differences\n-are pronounced for non-integral loop control variables.)\n-\n-@xref{Loops}, for more information.\n-@end itemize\n-\n-@cindex -Werror option\n-@cindex options, -Werror\n-@item -Werror\n-Make all warnings into errors.\n-\n-@cindex -W option\n-@cindex options, -W\n-@item -W\n-@cindex extra warnings\n-@cindex warnings, extra\n-Turns on ``extra warnings'' and, if optimization is specified\n-via @samp{-O}, the @samp{-Wuninitialized} option.\n-(This might change in future versions of @code{g77}.)\n-\n-``Extra warnings'' are issued for:\n-\n-@itemize @bullet\n-@item\n-@cindex unused parameters\n-@cindex parameters, unused\n-@cindex unused arguments\n-@cindex arguments, unused\n-@cindex unused dummies\n-@cindex dummies, unused\n-Unused parameters to a procedure (when @samp{-Wunused} also is\n-specified).\n-\n-@item\n-@cindex overflow\n-Overflows involving floating-point constants (not available\n-for certain configurations).\n-@end itemize\n-@end table\n-\n-@xref{Warning Options,,Options to Request or Suppress Warnings,\n-gcc,Using and Porting GNU CC}, for information on more options offered\n-by the GBE shared by @code{g77}, @code{gcc}, and other GNU compilers.\n-\n-Some of these have no effect when compiling programs written in Fortran:\n-\n-@table @code\n-@cindex -Wcomment option\n-@cindex options, -Wcomment\n-@item -Wcomment\n-@cindex -Wformat option\n-@cindex options, -Wformat\n-@item -Wformat\n-@cindex -Wparentheses option\n-@cindex options, -Wparentheses\n-@item -Wparentheses\n-@cindex -Wswitch option\n-@cindex options, -Wswitch\n-@item -Wswitch\n-@cindex -Wtraditional option\n-@cindex options, -Wtraditional\n-@item -Wtraditional\n-@cindex -Wshadow option\n-@cindex options, -Wshadow\n-@item -Wshadow\n-@cindex -Wid-clash-@var{len} option\n-@cindex options, -Wid-clash-@var{len}\n-@item -Wid-clash-@var{len}\n-@cindex -Wlarger-than-@var{len} option\n-@cindex options, -Wlarger-than-@var{len}\n-@item -Wlarger-than-@var{len}\n-@cindex -Wconversion option\n-@cindex options, -Wconversion\n-@item -Wconversion\n-@cindex -Waggregate-return option\n-@cindex options, -Waggregate-return\n-@item -Waggregate-return\n-@cindex -Wredundant-decls option\n-@cindex options, -Wredundant-decls\n-@item -Wredundant-decls\n-@cindex unsupported warnings\n-@cindex warnings, unsupported\n-These options all could have some relevant meaning for\n-GNU Fortran programs, but are not yet supported.\n-@end table\n-\n-@node Debugging Options\n-@section Options for Debugging Your Program or GNU Fortran\n-@cindex options, debugging\n-@cindex debugging information options\n-\n-GNU Fortran has various special options that are used for debugging\n-either your program or @code{g77}.\n-\n-@table @code\n-@cindex -g option\n-@cindex options, -g\n-@item -g\n-Produce debugging information in the operating system's native format\n-(stabs, COFF, XCOFF, or DWARF).  GDB can work with this debugging\n-information.\n-@end table\n-\n-@xref{Debugging Options,,Options for Debugging Your Program or GNU CC,\n-gcc,Using and Porting GNU CC}, for more information on debugging options.\n-\n-@node Optimize Options\n-@section Options That Control Optimization\n-@cindex optimize options\n-@cindex options, optimization\n-\n-Most Fortran users will want to use no optimization when\n-developing and testing programs, and use @samp{-O} or @samp{-O2} when\n-compiling programs for late-cycle testing and for production use.\n-However, note that certain diagnostics---such as for uninitialized\n-variables---depend on the flow analysis done by @samp{-O}, i.e.@: you\n-must use @samp{-O} or @samp{-O2} to get such diagnostics.\n-\n-The following flags have particular applicability when\n-compiling Fortran programs:\n-\n-@table @code\n-@cindex -malign-double option\n-@cindex options, -malign-double\n-@item -malign-double\n-(Intel x86 architecture only.)\n-\n-Noticeably improves performance of @code{g77} programs making\n-heavy use of @code{REAL(KIND=2)} (@code{DOUBLE PRECISION}) data\n-on some systems.\n-In particular, systems using Pentium, Pentium Pro, 586, and\n-686 implementations\n-of the i386 architecture execute programs faster when\n-@code{REAL(KIND=2)} (@code{DOUBLE PRECISION}) data are\n-aligned on 64-bit boundaries\n-in memory.\n-\n-This option can, at least, make benchmark results more consistent\n-across various system configurations, versions of the program,\n-and data sets.\n-\n-@emph{Note:} The warning in the @code{gcc} documentation about\n-this option does not apply, generally speaking, to Fortran\n-code compiled by @code{g77}.\n-\n-@xref{Aligned Data}, for more information on alignment issues.\n-\n-@emph{Also also note:} The negative form of @samp{-malign-double}\n-is @samp{-mno-align-double}, not @samp{-benign-double}.\n-\n-@cindex -ffloat-store option\n-@cindex options, -ffloat-store\n-@item -ffloat-store\n-@cindex IEEE 754 conformance\n-@cindex conformance, IEEE 754\n-@cindex floating-point, precision\n-Might help a Fortran program that depends on exact IEEE conformance on\n-some machines, but might slow down a program that doesn't.\n-\n-This option is effective when the floating-point unit is set to work in\n-IEEE 854 `extended precision'---as it typically is on x86 and m68k GNU\n-systems---rather than IEEE 754 double precision.  @samp{-ffloat-store}\n-tries to remove the extra precision by spilling data from floating-point\n-registers into memory and this typically involves a big performance\n-hit.  However, it doesn't affect intermediate results, so that it is\n-only partially effective.  `Excess precision' is avoided in code like:\n-@smallexample\n-a = b + c\n-d = a * e\n-@end smallexample\n-but not in code like:\n-@smallexample\n-      d = (b + c) * e\n-@end smallexample\n-\n-For another, potentially better, way of controlling the precision,\n-see @ref{Floating-point precision}.\n-\n-@cindex -fforce-mem option\n-@cindex options, -fforce-mem\n-@item -fforce-mem\n-@cindex -fforce-addr option\n-@cindex options, -fforce-addr\n-@item -fforce-addr\n-@cindex loops, speeding up\n-@cindex speed, of loops\n-Might improve optimization of loops.\n-\n-@cindex -fno-inline option\n-@cindex options, -fno-inline\n-@item -fno-inline\n-@cindex in-line code\n-@cindex compilation, in-line\n-@c DL: Only relevant for -O3?\n-Don't compile statement functions inline.\n-Might reduce the size of a program unit---which might be at\n-expense of some speed (though it should compile faster).\n-Note that if you are not optimizing, no functions can be expanded inline.\n-\n-@cindex -ffast-math option\n-@cindex options, -ffast-math\n-@item -ffast-math\n-@cindex IEEE 754 conformance\n-@cindex conformance, IEEE 754\n-Might allow some programs designed to not be too dependent\n-on IEEE behavior for floating-point to run faster, or die trying.\n-Sets @samp{-funsafe-math-optimizations}, and\n-@samp{-fno-trapping-math}.\n-\n-@cindex -funsafe-math-optimizations option\n-@cindex options, -funsafe-math-optimizations\n-@item -funsafe-math-optimizations\n-Allow optimizations that may be give incorrect results\n-for certain IEEE inputs.\n-\n-@cindex -fno-trapping-math option\n-@cindex options, -fno-trapping-math\n-@item -fno-trapping-math\n-Allow the compiler to assume that floating-point arithmetic\n-will not generate traps on any inputs.  This is useful, for\n-example, when running a program using IEEE \"non-stop\"\n-floating-point arithmetic.\n-\n-@cindex -fstrength-reduce option\n-@cindex options, -fstrength-reduce\n-@item -fstrength-reduce\n-@cindex loops, speeding up\n-@cindex speed, of loops\n-@c DL: normally defaulted?\n-Might make some loops run faster.\n-\n-@cindex -frerun-cse-after-loop option\n-@cindex options, -frerun-cse-after-loop\n-@item -frerun-cse-after-loop\n-@cindex -fexpensive-optimizations option\n-@cindex options, -fexpensive-optimizations\n-@c DL: This is -O2?\n-@item -fexpensive-optimizations\n-@cindex -fdelayed-branch option\n-@cindex options, -fdelayed-branch\n-@item -fdelayed-branch\n-@cindex -fschedule-insns option\n-@cindex options, -fschedule-insns\n-@item -fschedule-insns\n-@cindex -fschedule-insns2 option\n-@cindex options, -fschedule-insns2\n-@item -fschedule-insns2\n-@cindex -fcaller-saves option\n-@cindex options, -fcaller-saves\n-@item -fcaller-saves\n-Might improve performance on some code.\n-\n-@cindex -funroll-loops option\n-@cindex options, -funroll-loops\n-@item -funroll-loops\n-@cindex loops, unrolling\n-@cindex unrolling loops\n-@cindex loops, optimizing\n-@cindex indexed (iterative) @code{DO}\n-@cindex iterative @code{DO}\n-@c DL: fixme: Craig doesn't like `indexed' but f95 doesn't seem to\n-@c provide a suitable term\n-@c CB: I've decided on `iterative', for the time being, and changed\n-@c my previous, rather bizarre, use of `imperative' to that\n-@c (though `precomputed-trip' would be a more precise adjective)\n-Typically improves performance on code using iterative @code{DO} loops by\n-unrolling them and is probably generally appropriate for Fortran, though\n-it is not turned on at any optimization level.\n-Note that outer loop unrolling isn't done specifically; decisions about\n-whether to unroll a loop are made on the basis of its instruction count.\n-\n-@c DL: Fixme: This should obviously go somewhere else...\n-Also, no `loop discovery'@footnote{@dfn{loop discovery} refers to the\n-process by which a compiler, or indeed any reader of a program,\n-determines which portions of the program are more likely to be executed\n-repeatedly as it is being run.  Such discovery typically is done early\n-when compiling using optimization techniques, so the ``discovered''\n-loops get more attention---and more run-time resources, such as\n-registers---from the compiler.  It is easy to ``discover'' loops that are\n-constructed out of looping constructs in the language\n-(such as Fortran's @code{DO}).  For some programs, ``discovering'' loops\n-constructed out of lower-level constructs (such as @code{IF} and\n-@code{GOTO}) can lead to generation of more optimal code\n-than otherwise.} is done, so only loops written with @code{DO}\n-benefit from loop optimizations, including---but not limited\n-to---unrolling.  Loops written with @code{IF} and @code{GOTO} are not\n-currently recognized as such.  This option unrolls only iterative\n-@code{DO} loops, not @code{DO WHILE} loops.\n-\n-@cindex -funroll-all-loops option\n-@cindex options, -funroll-all-loops\n-@cindex DO WHILE\n-@item -funroll-all-loops\n-@c DL: Check my understanding of -funroll-all-loops v. -funroll-loops is correct.\n-Probably improves performance on code using @code{DO WHILE} loops by\n-unrolling them in addition to iterative @code{DO} loops.  In the absence\n-of @code{DO WHILE}, this option is equivalent to @samp{-funroll-loops}\n-but possibly slower.\n-\n-@item -fno-move-all-movables\n-@cindex -fno-move-all-movables option\n-@cindex options, -fno-move-all-movables\n-@item -fno-reduce-all-givs\n-@cindex -fno-reduce-all-givs option\n-@cindex options, -fno-reduce-all-givs\n-@item -fno-rerun-loop-opt\n-@cindex -fno-rerun-loop-opt option\n-@cindex options, -fno-rerun-loop-opt\n-@emph{Version info:}\n-These options are not supported by\n-versions of @code{g77} based on @code{gcc} version 2.8.\n-\n-Each of these might improve performance on some code.\n-\n-Analysis of Fortran code optimization and the resulting\n-optimizations triggered by the above options were\n-contributed by Toon Moene (@email{toon@@moene.indiv.nluug.nl}).\n-\n-These three options are intended to be removed someday, once\n-they have helped determine the efficacy of various\n-approaches to improving the performance of Fortran code.\n-\n-Please let us know how use of these options affects\n-the performance of your production code.\n-We're particularly interested in code that runs faster\n-when these options are @emph{disabled}, and in\n-non-Fortran code that benefits when they are\n-@emph{enabled} via the above @code{gcc} command-line options.\n-@end table\n-\n-@xref{Optimize Options,,Options That Control Optimization,\n-gcc,Using and Porting GNU CC}, for more information on options\n-to optimize the generated machine code.\n-\n-@node Preprocessor Options\n-@section Options Controlling the Preprocessor\n-@cindex preprocessor options\n-@cindex options, preprocessor\n-@cindex cpp program\n-@cindex programs, cpp\n-\n-These options control the C preprocessor, which is run on each C source\n-file before actual compilation.\n-\n-@xref{Preprocessor Options,,Options Controlling the Preprocessor,\n-gcc,Using and Porting GNU CC}, for information on C preprocessor options.\n-\n-@cindex INCLUDE directive\n-@cindex directive, INCLUDE\n-Some of these options also affect how @code{g77} processes the\n-@code{INCLUDE} directive.\n-Since this directive is processed even when preprocessing\n-is not requested, it is not described in this section.\n-@xref{Directory Options,,Options for Directory Search}, for\n-information on how @code{g77} processes the @code{INCLUDE} directive.\n-\n-However, the @code{INCLUDE} directive does not apply\n-preprocessing to the contents of the included file itself.\n-\n-Therefore, any file that contains preprocessor directives\n-(such as @code{#include}, @code{#define}, and @code{#if})\n-must be included via the @code{#include} directive, not\n-via the @code{INCLUDE} directive.\n-Therefore, any file containing preprocessor directives,\n-if included, is necessarily included by a file that itself\n-contains preprocessor directives.\n-\n-@node Directory Options\n-@section Options for Directory Search\n-@cindex directory, options\n-@cindex options, directory search\n-@cindex search path\n-\n-These options affect how the @code{cpp} preprocessor searches\n-for files specified via the @code{#include} directive.\n-Therefore, when compiling Fortran programs, they are meaningful\n-when the preprocessor is used.\n-\n-@cindex INCLUDE directive\n-@cindex directive, INCLUDE\n-Some of these options also affect how @code{g77} searches\n-for files specified via the @code{INCLUDE} directive,\n-although files included by that directive are not,\n-themselves, preprocessed.\n-These options are:\n-\n-@table @code\n-@cindex -I- option\n-@cindex options, -I-\n-@item -I-\n-@cindex -Idir option\n-@cindex options, -Idir\n-@item -I@var{dir}\n-@cindex directory, search paths for inclusion\n-@cindex inclusion, directory search paths for\n-@cindex search paths, for included files\n-@cindex paths, search\n-These affect interpretation of the @code{INCLUDE} directive\n-(as well as of the @code{#include} directive of the @code{cpp}\n-preprocessor).\n-\n-Note that @samp{-I@var{dir}} must be specified @emph{without} any\n-spaces between @samp{-I} and the directory name---that is,\n-@samp{-Ifoo/bar} is valid, but @samp{-I foo/bar}\n-is rejected by the @code{g77} compiler (though the preprocessor supports\n-the latter form).\n-@c this is due to toplev.c's inflexible option processing\n-Also note that the general behavior of @samp{-I} and\n-@code{INCLUDE} is pretty much the same as of @samp{-I} with\n-@code{#include} in the @code{cpp} preprocessor, with regard to\n-looking for @file{header.gcc} files and other such things.\n-\n-@xref{Directory Options,,Options for Directory Search,\n-gcc,Using and Porting GNU CC}, for information on the @samp{-I} option.\n-@end table\n-\n-@node Code Gen Options\n-@section Options for Code Generation Conventions\n-@cindex code generation, conventions\n-@cindex options, code generation\n-@cindex run-time, options\n-\n-These machine-independent options control the interface conventions\n-used in code generation.\n-\n-Most of them have both positive and negative forms; the negative form\n-of @samp{-ffoo} would be @samp{-fno-foo}.  In the table below, only\n-one of the forms is listed---the one which is not the default.  You\n-can figure out the other form by either removing @samp{no-} or adding\n-it.\n-\n-@table @code\n-@cindex -fno-automatic option\n-@cindex options, -fno-automatic\n-@item -fno-automatic\n-@cindex SAVE statement\n-@cindex statements, SAVE\n-Treat each program unit as if the @code{SAVE} statement was specified\n-for every local variable and array referenced in it.\n-Does not affect common blocks.\n-(Some Fortran compilers provide this option under\n-the name @samp{-static}.)\n-\n-@cindex -finit-local-zero option\n-@cindex options, -finit-local-zero\n-@item -finit-local-zero\n-@cindex DATA statement\n-@cindex statements, DATA\n-@cindex initialization, of local variables\n-@cindex variables, initialization of\n-@cindex uninitialized variables\n-@cindex variables, uninitialized\n-Specify that variables and arrays that are local to a program unit\n-(not in a common block and not passed as an argument) are to be initialized\n-to binary zeros.\n-\n-Since there is a run-time penalty for initialization of variables\n-that are not given the @code{SAVE} attribute, it might be a\n-good idea to also use @samp{-fno-automatic} with @samp{-finit-local-zero}.\n-\n-@cindex -fno-f2c option\n-@cindex options, -fno-f2c\n-@item -fno-f2c\n-@cindex @code{f2c} compatibility\n-@cindex compatibility, @code{f2c}\n-Do not generate code designed to be compatible with code generated\n-by @code{f2c}; use the GNU calling conventions instead.\n-\n-The @code{f2c} calling conventions require functions that return\n-type @code{REAL(KIND=1)} to actually return the C type @code{double},\n-and functions that return type @code{COMPLEX} to return the\n-values via an extra argument in the calling sequence that points\n-to where to store the return value.\n-Under the GNU calling conventions, such functions simply return\n-their results as they would in GNU C---@code{REAL(KIND=1)} functions\n-return the C type @code{float}, and @code{COMPLEX} functions\n-return the GNU C type @code{complex} (or its @code{struct}\n-equivalent).\n-\n-This does not affect the generation of code that interfaces with the\n-@code{libg2c} library.\n-\n-However, because the @code{libg2c} library uses @code{f2c}\n-calling conventions, @code{g77} rejects attempts to pass\n-intrinsics implemented by routines in this library as actual\n-arguments when @samp{-fno-f2c} is used, to avoid bugs when\n-they are actually called by code expecting the GNU calling\n-conventions to work.\n-\n-For example, @samp{INTRINSIC ABS;CALL FOO(ABS)} is\n-rejected when @samp{-fno-f2c} is in force.\n-(Future versions of the @code{g77} run-time library might\n-offer routines that provide GNU-callable versions of the\n-routines that implement the @code{f2c}-callable intrinsics\n-that may be passed as actual arguments, so that\n-valid programs need not be rejected when @samp{-fno-f2c}\n-is used.)\n-\n-@strong{Caution:} If @samp{-fno-f2c} is used when compiling any\n-source file used in a program, it must be used when compiling\n-@emph{all} Fortran source files used in that program.\n-\n-@c seems kinda dumb to tell people about an option they can't use -- jcb\n-@c then again, we want users building future-compatible libraries with it.\n-@cindex -ff2c-library option\n-@cindex options, -ff2c-library\n-@item -ff2c-library\n-Specify that use of @code{libg2c} (or the original @code{libf2c})\n-is required.\n-This is the default for the current version of @code{g77}.\n-\n-Currently it is not\n-valid to specify @samp{-fno-f2c-library}.\n-This option is provided so users can specify it in shell\n-scripts that build programs and libraries that require the\n-@code{libf2c} library, even when being compiled by future\n-versions of @code{g77} that might otherwise default to\n-generating code for an incompatible library.\n-\n-@cindex -fno-underscoring option\n-@cindex options, -fno-underscoring\n-@item -fno-underscoring\n-@cindex underscore\n-@cindex symbol names, underscores\n-@cindex transforming symbol names\n-@cindex symbol names, transforming\n-Do not transform names of entities specified in the Fortran\n-source file by appending underscores to them.\n-\n-With @samp{-funderscoring} in effect, @code{g77} appends two underscores\n-to names with underscores and one underscore to external names with\n-no underscores.  (@code{g77} also appends two underscores to internal\n-names with underscores to avoid naming collisions with external names.\n-The @samp{-fno-second-underscore} option disables appending of the\n-second underscore in all cases.)\n-\n-This is done to ensure compatibility with code produced by many\n-UNIX Fortran compilers, including @code{f2c}, which perform the\n-same transformations.\n-\n-Use of @samp{-fno-underscoring} is not recommended unless you are\n-experimenting with issues such as integration of (GNU) Fortran into\n-existing system environments (vis-a-vis existing libraries, tools, and\n-so on).\n-\n-For example, with @samp{-funderscoring}, and assuming other defaults like\n-@samp{-fcase-lower} and that @samp{j()} and @samp{max_count()} are\n-external functions while @samp{my_var} and @samp{lvar} are local variables,\n-a statement like\n-\n-@smallexample\n-I = J() + MAX_COUNT (MY_VAR, LVAR)\n-@end smallexample\n-\n-@noindent\n-is implemented as something akin to:\n-\n-@smallexample\n-i = j_() + max_count__(&my_var__, &lvar);\n-@end smallexample\n-\n-With @samp{-fno-underscoring}, the same statement is implemented as:\n-\n-@smallexample\n-i = j() + max_count(&my_var, &lvar);\n-@end smallexample\n-\n-Use of @samp{-fno-underscoring} allows direct specification of\n-user-defined names while debugging and when interfacing @code{g77}-compiled\n-code with other languages.\n-\n-Note that just because the names match does @emph{not} mean that the\n-interface implemented by @code{g77} for an external name matches the\n-interface implemented by some other language for that same name.\n-That is, getting code produced by @code{g77} to link to code produced\n-by some other compiler using this or any other method can be only a\n-small part of the overall solution---getting the code generated by\n-both compilers to agree on issues other than naming can require\n-significant effort, and, unlike naming disagreements, linkers normally\n-cannot detect disagreements in these other areas.\n-\n-Also, note that with @samp{-fno-underscoring}, the lack of appended\n-underscores introduces the very real possibility that a user-defined\n-external name will conflict with a name in a system library, which\n-could make finding unresolved-reference bugs quite difficult in some\n-cases---they might occur at program run time, and show up only as\n-buggy behavior at run time.\n-\n-In future versions of @code{g77}, we hope to improve naming and linking\n-issues so that debugging always involves using the names as they appear\n-in the source, even if the names as seen by the linker are mangled to\n-prevent accidental linking between procedures with incompatible\n-interfaces.\n-\n-@cindex -fno-second-underscore option\n-@cindex options, -fno-second-underscore\n-@item -fno-second-underscore\n-@cindex underscore\n-@cindex symbol names, underscores\n-@cindex transforming symbol names\n-@cindex symbol names, transforming\n-Do not append a second underscore to names of entities specified\n-in the Fortran source file.\n-\n-This option has no effect if @samp{-fno-underscoring} is\n-in effect.\n-\n-Otherwise, with this option, an external name such as @samp{MAX_COUNT}\n-is implemented as a reference to the link-time external symbol\n-@samp{max_count_}, instead of @samp{max_count__}.\n-\n-@cindex -fno-ident option\n-@cindex options, -fno-ident\n-@item -fno-ident\n-Ignore the @samp{#ident} directive.\n-\n-@cindex -fzeros option\n-@cindex options, -fzeros\n-@item -fzeros\n-Treat initial values of zero as if they were any other value.\n-\n-As of version 0.5.18, @code{g77} normally treats @code{DATA} and\n-other statements that are used to specify initial values of zero\n-for variables and arrays as if no values were actually specified,\n-in the sense that no diagnostics regarding multiple initializations\n-are produced.\n-\n-This is done to speed up compiling of programs that initialize\n-large arrays to zeros.\n-\n-Use @samp{-fzeros} to revert to the simpler, slower behavior\n-that can catch multiple initializations by keeping track of\n-all initializations, zero or otherwise.\n-\n-@emph{Caution:} Future versions of @code{g77} might disregard this option\n-(and its negative form, the default) or interpret it somewhat\n-differently.\n-The interpretation changes will affect only non-standard\n-programs; standard-conforming programs should not be affected.\n-\n-@cindex -femulate-complex option\n-@cindex options, -femulate-complex\n-@item -femulate-complex\n-Implement @code{COMPLEX} arithmetic via emulation,\n-instead of using the facilities of\n-the @code{gcc} back end that provide direct support of\n-@code{complex} arithmetic.\n-\n-(@code{gcc} had some bugs in its back-end support\n-for @code{complex} arithmetic, due primarily to the support not being\n-completed as of version 2.8.1 and @code{egcs} 1.1.2.)\n-\n-Use @samp{-femulate-complex} if you suspect code-generation bugs,\n-or experience compiler crashes,\n-that might result from @code{g77} using the @code{COMPLEX} support\n-in the @code{gcc} back end.\n-If using that option fixes the bugs or crashes you are seeing,\n-that indicates a likely @code{g77} bugs\n-(though, all compiler crashes are considered bugs),\n-so, please report it.\n-(Note that the known bugs, now believed fixed, produced compiler crashes\n-rather than causing the generation of incorrect code.)\n-\n-Use of this option should not affect how Fortran code compiled\n-by @code{g77} works in terms of its interfaces to other code,\n-e.g. that compiled by @code{f2c}.\n-\n-@emph{Caution:} Future versions of @code{g77} might ignore both forms\n-of this option.\n-\n-@cindex -falias-check option\n-@cindex options, -falias-check\n-@cindex -fargument-alias option\n-@cindex options, -fargument-alias\n-@cindex -fargument-noalias option\n-@cindex options, -fargument-noalias\n-@cindex -fno-argument-noalias-global option\n-@cindex options, -fno-argument-noalias-global\n-@item -falias-check\n-@item -fargument-alias\n-@item -fargument-noalias\n-@item -fno-argument-noalias-global\n-@emph{Version info:}\n-These options are not supported by\n-versions of @code{g77} based on @code{gcc} version 2.8.\n-\n-These options specify to what degree aliasing\n-(overlap)\n-is permitted between\n-arguments (passed as pointers) and @code{COMMON} (external, or\n-public) storage.\n-\n-The default for Fortran code, as mandated by the FORTRAN 77 and\n-Fortran 90 standards, is @samp{-fargument-noalias-global}.\n-The default for code written in the C language family is\n-@samp{-fargument-alias}.\n-\n-Note that, on some systems, compiling with @samp{-fforce-addr} in\n-effect can produce more optimal code when the default aliasing\n-options are in effect (and when optimization is enabled).\n-\n-@xref{Aliasing Assumed To Work}, for detailed information on the implications\n-of compiling Fortran code that depends on the ability to alias dummy\n-arguments.\n-\n-@cindex -fno-globals option\n-@cindex options, -fno-globals\n-@item -fno-globals\n-@cindex global names, warning\n-@cindex warnings, global names\n-@cindex in-line code\n-@cindex compilation, in-line\n-Disable diagnostics about inter-procedural\n-analysis problems, such as disagreements about the\n-type of a function or a procedure's argument,\n-that might cause a compiler crash when attempting\n-to inline a reference to a procedure within a\n-program unit.\n-(The diagnostics themselves are still produced, but\n-as warnings, unless @samp{-Wno-globals} is specified,\n-in which case no relevant diagnostics are produced.)\n-\n-Further, this option disables such inlining, to\n-avoid compiler crashes resulting from incorrect\n-code that would otherwise be diagnosed.\n-\n-As such, this option might be quite useful when\n-compiling existing, ``working'' code that happens\n-to have a few bugs that do not generally show themselves,\n-but which @code{g77} diagnoses.\n-\n-Use of this option therefore has the effect of\n-instructing @code{g77} to behave more like it did\n-up through version 0.5.19.1, when it paid little or\n-no attention to disagreements between program units\n-about a procedure's type and argument information,\n-and when it performed no inlining of procedures\n-(except statement functions).\n-\n-Without this option, @code{g77} defaults to performing\n-the potentially inlining procedures as it started doing\n-in version 0.5.20, but as of version 0.5.21, it also\n-diagnoses disagreements that might cause such inlining\n-to crash the compiler as (fatal) errors,\n-and warns about similar disagreements\n-that are currently believed to not\n-likely to result in the compiler later crashing\n-or producing incorrect code.\n-\n-@cindex -fflatten-arrays option\n-@item -fflatten-arrays\n-@cindex array performance\n-@cindex arrays, flattening\n-Use back end's C-like constructs\n-(pointer plus offset)\n-instead of its @code{ARRAY_REF} construct\n-to handle all array references.\n-\n-@emph{Note:} This option is not supported.\n-It is intended for use only by @code{g77} developers,\n-to evaluate code-generation issues.\n-It might be removed at any time.\n-\n-@cindex -fbounds-check option\n-@cindex -ffortran-bounds-check option\n-@item -fbounds-check\n-@itemx -ffortran-bounds-check\n-@cindex bounds checking\n-@cindex range checking\n-@cindex array bounds checking\n-@cindex subscript checking\n-@cindex substring checking\n-@cindex checking subscripts\n-@cindex checking substrings\n-Enable generation of run-time checks for array subscripts\n-and substring start and end points\n-against the (locally) declared minimum and maximum values.\n-\n-The current implementation uses the @code{libf2c}\n-library routine @code{s_rnge} to print the diagnostic.\n-\n-However, whereas @code{f2c} generates a single check per\n-reference for a multi-dimensional array, of the computed\n-offset against the valid offset range (0 through the size of the array),\n-@code{g77} generates a single check per @emph{subscript} expression.\n-This catches some cases of potential bugs that @code{f2c} does not,\n-such as references to below the beginning of an assumed-size array.\n-\n-@code{g77} also generates checks for @code{CHARACTER} substring references,\n-something @code{f2c} currently does not do.\n-\n-Use the new @samp{-ffortran-bounds-check} option\n-to specify bounds-checking for only the Fortran code you are compiling,\n-not necessarily for code written in other languages.\n-\n-@emph{Note:} To provide more detailed information on the offending subscript,\n-@code{g77} provides the @code{libg2c} run-time library routine @code{s_rnge}\n-with somewhat differently-formatted information.\n-Here's a sample diagnostic:\n-\n-@smallexample\n-Subscript out of range on file line 4, procedure rnge.f/bf.\n-Attempt to access the -6-th element of variable b[subscript-2-of-2].\n-Aborted\n-@end smallexample\n-\n-The above message indicates that the offending source line is\n-line 4 of the file @file{rnge.f},\n-within the program unit (or statement function) named @samp{bf}.\n-The offended array is named @samp{b}.\n-The offended array dimension is the second for a two-dimensional array,\n-and the offending, computed subscript expression was @samp{-6}.\n-\n-For a @code{CHARACTER} substring reference, the second line has\n-this appearance:\n-\n-@smallexample\n-Attempt to access the 11-th element of variable a[start-substring].\n-@end smallexample\n-\n-This indicates that the offended @code{CHARACTER} variable or array\n-is named @samp{a},\n-the offended substring position is the starting (leftmost) position,\n-and the offending substring expression is @samp{11}.\n-\n-(Though the verbage of @code{s_rnge} is not ideal\n-for the purpose of the @code{g77} compiler,\n-the above information should provide adequate diagnostic abilities\n-to it users.)\n-@end table\n-\n-@xref{Code Gen Options,,Options for Code Generation Conventions,\n-gcc,Using and Porting GNU CC}, for information on more options\n-offered by the GBE\n-shared by @code{g77}, @code{gcc}, and other GNU compilers.\n-\n-Some of these do @emph{not} work when compiling programs written in Fortran:\n-\n-@table @code\n-@cindex -fpcc-struct-return option\n-@cindex options, -fpcc-struct-return\n-@item -fpcc-struct-return\n-@cindex -freg-struct-return option\n-@cindex options, -freg-struct-return\n-@item -freg-struct-return\n-You should not use these except strictly the same way as you\n-used them to build the version of @code{libg2c} with which\n-you will be linking all code compiled by @code{g77} with the\n-same option.\n-\n-@cindex -fshort-double option\n-@cindex options, -fshort-double\n-@item -fshort-double\n-This probably either has no effect on Fortran programs, or\n-makes them act loopy.\n-\n-@cindex -fno-common option\n-@cindex options, -fno-common\n-@item -fno-common\n-Do not use this when compiling Fortran programs,\n-or there will be Trouble.\n-\n-@cindex -fpack-struct option\n-@cindex options, -fpack-struct\n-@item -fpack-struct\n-This probably will break any calls to the @code{libg2c} library,\n-at the very least, even if it is built with the same option.\n-@end table\n-\n-@node Environment Variables\n-@section Environment Variables Affecting GNU Fortran\n-@cindex environment variables\n-\n-GNU Fortran currently does not make use of any environment\n-variables to control its operation above and beyond those\n-that affect the operation of @code{gcc}.\n-\n-@xref{Environment Variables,,Environment Variables Affecting GNU CC,\n-gcc,Using and Porting GNU CC}, for information on environment\n-variables.\n+@include invoke.texi\n \n @include news.texi\n "}, {"sha": "08febaafc6f7c8c28db71644cae11960fb36c9f9", "filename": "gcc/f/invoke.texi", "status": "added", "additions": 2064, "deletions": 0, "changes": 2064, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/966c049dbf5e87774306aafddd0295a21657a1da/gcc%2Ff%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/966c049dbf5e87774306aafddd0295a21657a1da/gcc%2Ff%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Finvoke.texi?ref=966c049dbf5e87774306aafddd0295a21657a1da", "patch": "@@ -0,0 +1,2064 @@\n+@node Option Summary\n+@section Option Summary\n+\n+Here is a summary of all the options specific to GNU Fortran, grouped\n+by type.  Explanations are in the following sections.\n+\n+@table @emph\n+@item Overall Options\n+@xref{Overall Options,,Options Controlling the Kind of Output}.\n+@smallexample\n+-fversion  -fset-g77-defaults  -fno-silent\n+@end smallexample\n+\n+@item Shorthand Options\n+@xref{Shorthand Options}.\n+@smallexample\n+-ff66  -fno-f66  -ff77  -fno-f77  -fno-ugly\n+@end smallexample\n+\n+@item Fortran Language Options\n+@xref{Fortran Dialect Options,,Options Controlling Fortran Dialect}.\n+@smallexample\n+-ffree-form  -fno-fixed-form  -ff90\n+-fvxt  -fdollar-ok  -fno-backslash\n+-fno-ugly-args  -fno-ugly-assign  -fno-ugly-assumed\n+-fugly-comma  -fugly-complex  -fugly-init  -fugly-logint\n+-fonetrip  -ftypeless-boz\n+-fintrin-case-initcap  -fintrin-case-upper\n+-fintrin-case-lower  -fintrin-case-any\n+-fmatch-case-initcap  -fmatch-case-upper\n+-fmatch-case-lower  -fmatch-case-any\n+-fsource-case-upper  -fsource-case-lower\n+-fsource-case-preserve\n+-fsymbol-case-initcap  -fsymbol-case-upper\n+-fsymbol-case-lower  -fsymbol-case-any\n+-fcase-strict-upper  -fcase-strict-lower\n+-fcase-initcap  -fcase-upper  -fcase-lower  -fcase-preserve\n+-ff2c-intrinsics-delete  -ff2c-intrinsics-hide\n+-ff2c-intrinsics-disable  -ff2c-intrinsics-enable\n+-fbadu77-intrinsics-delete  -fbadu77-intrinsics-hide\n+-fbadu77-intrinsics-disable  -fbadu77-intrinsics-enable\n+-ff90-intrinsics-delete  -ff90-intrinsics-hide\n+-ff90-intrinsics-disable  -ff90-intrinsics-enable\n+-fgnu-intrinsics-delete  -fgnu-intrinsics-hide\n+-fgnu-intrinsics-disable  -fgnu-intrinsics-enable\n+-fmil-intrinsics-delete  -fmil-intrinsics-hide\n+-fmil-intrinsics-disable  -fmil-intrinsics-enable\n+-funix-intrinsics-delete  -funix-intrinsics-hide\n+-funix-intrinsics-disable  -funix-intrinsics-enable\n+-fvxt-intrinsics-delete  -fvxt-intrinsics-hide\n+-fvxt-intrinsics-disable  -fvxt-intrinsics-enable\n+-ffixed-line-length-@var{n}  -ffixed-line-length-none\n+@end smallexample\n+\n+@item Warning Options\n+@xref{Warning Options,,Options to Request or Suppress Warnings}.\n+@smallexample\n+-fsyntax-only  -pedantic  -pedantic-errors  -fpedantic\n+-w  -Wno-globals  -Wimplicit  -Wunused  -Wuninitialized\n+-Wall  -Wsurprising\n+-Werror  -W\n+@end smallexample\n+\n+@item Debugging Options\n+@xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n+@smallexample\n+-g\n+@end smallexample\n+\n+@item Optimization Options\n+@xref{Optimize Options,,Options that Control Optimization}.\n+@smallexample\n+-malign-double\n+-ffloat-store  -fforce-mem  -fforce-addr  -fno-inline\n+-ffast-math  -fstrength-reduce  -frerun-cse-after-loop\n+-funsafe-math-optimizations -fno-trapping-math\n+-fexpensive-optimizations  -fdelayed-branch\n+-fschedule-insns  -fschedule-insn2  -fcaller-saves\n+-funroll-loops  -funroll-all-loops\n+-fno-move-all-movables  -fno-reduce-all-givs\n+-fno-rerun-loop-opt\n+@end smallexample\n+\n+@item Directory Options\n+@xref{Directory Options,,Options for Directory Search}.\n+@smallexample\n+-I@var{dir}  -I-\n+@end smallexample\n+\n+@item Code Generation Options\n+@xref{Code Gen Options,,Options for Code Generation Conventions}.\n+@smallexample\n+-fno-automatic  -finit-local-zero  -fno-f2c\n+-ff2c-library  -fno-underscoring  -fno-ident\n+-fpcc-struct-return  -freg-struct-return\n+-fshort-double  -fno-common  -fpack-struct\n+-fzeros  -fno-second-underscore\n+-femulate-complex\n+-falias-check  -fargument-alias\n+-fargument-noalias  -fno-argument-noalias-global\n+-fno-globals  -fflatten-arrays\n+-fbounds-check  -ffortran-bounds-check\n+@end smallexample\n+@end table\n+\n+@menu\n+* Overall Options::     Controlling the kind of output:\n+                        an executable, object files, assembler files,\n+                        or preprocessed source.\n+* Shorthand Options::   Options that are shorthand for other options.\n+* Fortran Dialect Options::  Controlling the variant of Fortran language\n+                             compiled.\n+* Warning Options::     How picky should the compiler be?\n+* Debugging Options::   Symbol tables, measurements, and debugging dumps.\n+* Optimize Options::    How much optimization?\n+* Preprocessor Options:: Controlling header files and macro definitions.\n+                         Also, getting dependency information for Make.\n+* Directory Options::   Where to find header files and libraries.\n+                        Where to find the compiler executable files.\n+* Code Gen Options::    Specifying conventions for function calls, data layout\n+                        and register usage.\n+@end menu\n+\n+@node Overall Options\n+@section Options Controlling the Kind of Output\n+@cindex overall options\n+@cindex options, overall\n+\n+Compilation can involve as many as four stages: preprocessing, code\n+generation (often what is really meant by the term ``compilation''),\n+assembly, and linking, always in that order.  The first three\n+stages apply to an individual source file, and end by producing an\n+object file; linking combines all the object files (those newly\n+compiled, and those specified as input) into an executable file.\n+\n+@cindex file name suffix\n+@cindex suffixes, file name\n+@cindex file name extension\n+@cindex extensions, file name\n+@cindex file type\n+@cindex types, file\n+For any given input file, the file name suffix determines what kind of\n+program is contained in the file---that is, the language in which the\n+program is written is generally indicated by the suffix.\n+Suffixes specific to GNU Fortran are listed below.\n+@xref{Overall Options,,gcc,Using and Porting GNU CC}, for\n+information on suffixes recognized by GNU CC.\n+\n+@table @code\n+@cindex .f filename suffix\n+@cindex .for filename suffix\n+@cindex .FOR filename suffix\n+@item @var{file}.f\n+@item @var{file}.for\n+@item @var{file}.FOR\n+Fortran source code that should not be preprocessed.\n+\n+Such source code cannot contain any preprocessor directives, such\n+as @code{#include}, @code{#define}, @code{#if}, and so on.\n+\n+You can force @samp{.f} files to be preprocessed by @code{cpp} by using\n+@samp{-x f77-cpp-input}.\n+@xref{LEX}.\n+\n+@cindex preprocessor\n+@cindex C preprocessor\n+@cindex cpp preprocessor\n+@cindex Fortran preprocessor\n+@cindex cpp program\n+@cindex programs, cpp\n+@cindex .F filename suffix\n+@cindex .fpp filename suffix\n+@cindex .FPP filename suffix\n+@item @var{file}.F\n+@item @var{file}.fpp\n+@item @var{file}.FPP\n+Fortran source code that must be preprocessed (by the C preprocessor\n+@code{cpp}, which is part of GNU CC).\n+\n+Note that preprocessing is not extended to the contents of\n+files included by the @code{INCLUDE} directive---the @code{#include}\n+preprocessor directive must be used instead.\n+\n+@cindex Ratfor preprocessor\n+@cindex programs, @code{ratfor}\n+@cindex @samp{.r} filename suffix\n+@cindex @code{ratfor}\n+@item @var{file}.r\n+Ratfor source code, which must be preprocessed by the @code{ratfor}\n+command, which is available separately (as it is not yet part of the GNU\n+Fortran distribution).\n+One version in Fortran, adapted for use with @code{g77}, is at\n+@uref{ftp://members.aol.com/n8tm/rat7.uue} (of uncertain copyright\n+status).  Another, public domain version in C is at\n+@uref{http://sepwww.stanford.edu/sep/prof/ratfor.shar.2}.\n+@end table\n+\n+UNIX users typically use the @file{@var{file}.f} and @file{@var{file}.F}\n+nomenclature.\n+Users of other operating systems, especially those that cannot\n+distinguish upper-case\n+letters from lower-case letters in their file names, typically use\n+the @file{@var{file}.for} and @file{@var{file}.fpp} nomenclature.\n+\n+@cindex #define\n+@cindex #include\n+@cindex #if\n+Use of the preprocessor @code{cpp} allows use of C-like\n+constructs such as @code{#define} and @code{#include}, but can\n+lead to unexpected, even mistaken, results due to Fortran's source file\n+format.\n+It is recommended that use of the C preprocessor\n+be limited to @code{#include} and, in\n+conjunction with @code{#define}, only @code{#if} and related directives,\n+thus avoiding in-line macro expansion entirely.\n+This recommendation applies especially\n+when using the traditional fixed source form.\n+With free source form,\n+fewer unexpected transformations are likely to happen, but use of\n+constructs such as Hollerith and character constants can nevertheless\n+present problems, especially when these are continued across multiple\n+source lines.\n+These problems result, primarily, from differences between the way\n+such constants are interpreted by the C preprocessor and by a Fortran\n+compiler.\n+\n+Another example of a problem that results from using the C preprocessor\n+is that a Fortran comment line that happens to contain any\n+characters ``interesting'' to the C preprocessor,\n+such as a backslash at the end of the line,\n+is not recognized by the preprocessor as a comment line,\n+so instead of being passed through ``raw'',\n+the line is edited according to the rules for the preprocessor.\n+For example, the backslash at the end of the line is removed,\n+along with the subsequent newline, resulting in the next\n+line being effectively commented out---unfortunate if that\n+line is a non-comment line of important code!\n+\n+@emph{Note:} The @samp{-traditional} and @samp{-undef} flags are supplied\n+to @code{cpp} by default, to help avoid unpleasant surprises.\n+@xref{Preprocessor Options,,Options Controlling the Preprocessor,\n+gcc,Using and Porting GNU CC}.\n+This means that ANSI C preprocessor features (such as the @samp{#}\n+operator) aren't available, and only variables in the C reserved\n+namespace (generally, names with a leading underscore) are liable to\n+substitution by C predefines.\n+Thus, if you want to do system-specific\n+tests, use, for example, @samp{#ifdef __linux__} rather than @samp{#ifdef linux}.\n+Use the @samp{-v} option to see exactly how the preprocessor is invoked.\n+\n+@cindex /*\n+Unfortunately, the @samp{-traditional} flag will not avoid an error from\n+anything that @code{cpp} sees as an unterminated C comment, such as:\n+@smallexample\n+C Some Fortran compilers accept /* as starting\n+C an inline comment.\n+@end smallexample\n+@xref{Trailing Comment}.\n+\n+The following options that affect overall processing are recognized\n+by the @code{g77} and @code{gcc} commands in a GNU Fortran installation:\n+\n+@table @code\n+@cindex -fversion option\n+@cindex options, -fversion\n+@cindex printing version information\n+@cindex version information, printing\n+@cindex consistency checks\n+@cindex internal consistency checks\n+@cindex checks, of internal consistency\n+@item -fversion\n+Ensure that the @code{g77}-specific version of the compiler phase is reported,\n+if run,\n+and, starting in @code{egcs} version 1.1,\n+that internal consistency checks in the @file{f771} program are run.\n+\n+This option is supplied automatically when @samp{-v} or @samp{--verbose}\n+is specified as a command-line option for @code{g77} or @code{gcc}\n+and when the resulting commands compile Fortran source files.\n+\n+@cindex -fset-g77-defaults option\n+@cindex options, -fset-g77-defaults\n+@item -fset-g77-defaults\n+@emph{Version info:}\n+This option was obsolete as of @code{egcs}\n+version 1.1.\n+The effect is instead achieved\n+by the @code{lang_init_options} routine\n+in @file{gcc/gcc/f/com.c}.\n+\n+@cindex consistency checks\n+@cindex internal consistency checks\n+@cindex checks, of internal consistency\n+Set up whatever @code{gcc} options are to apply to Fortran\n+compilations, and avoid running internal consistency checks\n+that might take some time.\n+\n+This option is supplied automatically when compiling Fortran code\n+via the @code{g77} or @code{gcc} command.\n+The description of this option is provided so that users seeing\n+it in the output of, say, @samp{g77 -v} understand why it is\n+there.\n+\n+@cindex modifying g77\n+@cindex code, modifying\n+Also, developers who run @code{f771} directly might want to specify it\n+by hand to get the same defaults as they would running @code{f771}\n+via @code{g77} or @code{gcc}.\n+However, such developers should, after linking a new @code{f771}\n+executable, invoke it without this option once,\n+e.g. via @kbd{./f771 -quiet < /dev/null},\n+to ensure that they have not introduced any\n+internal inconsistencies (such as in the table of\n+intrinsics) before proceeding---@code{g77} will crash\n+with a diagnostic if it detects an inconsistency.\n+\n+@cindex -fno-silent option\n+@cindex options, -fno-silent\n+@cindex f2c compatibility\n+@cindex compatibility, f2c\n+@cindex status, compilation\n+@cindex compilation, status\n+@cindex reporting compilation status\n+@cindex printing compilation status\n+@item -fno-silent\n+Print (to @code{stderr}) the names of the program units as\n+they are compiled, in a form similar to that used by popular\n+UNIX @code{f77} implementations and @code{f2c}.\n+@end table\n+\n+@xref{Overall Options,,Options Controlling the Kind of Output,\n+gcc,Using and Porting GNU CC}, for information\n+on more options that control the overall operation of the @code{gcc} command\n+(and, by extension, the @code{g77} command).\n+\n+@node Shorthand Options\n+@section Shorthand Options\n+@cindex shorthand options\n+@cindex options, shorthand\n+@cindex macro options\n+@cindex options, macro\n+\n+The following options serve as ``shorthand''\n+for other options accepted by the compiler:\n+\n+@table @code\n+@cindex -fugly option\n+@cindex options, -fugly\n+@item -fugly\n+@cindex ugly features\n+@cindex features, ugly\n+@emph{Note:} This option is no longer supported.\n+The information, below, is provided to aid\n+in the conversion of old scripts.\n+\n+Specify that certain ``ugly'' constructs are to be quietly accepted.\n+Same as:\n+\n+@smallexample\n+-fugly-args -fugly-assign -fugly-assumed\n+-fugly-comma -fugly-complex -fugly-init\n+-fugly-logint\n+@end smallexample\n+\n+These constructs are considered inappropriate to use in new\n+or well-maintained portable Fortran code, but widely used\n+in old code.\n+@xref{Distensions}, for more information.\n+\n+@cindex -fno-ugly option\n+@cindex options, -fno-ugly\n+@item -fno-ugly\n+@cindex ugly features\n+@cindex features, ugly\n+Specify that all ``ugly'' constructs are to be noisily rejected.\n+Same as:\n+\n+@smallexample\n+-fno-ugly-args -fno-ugly-assign -fno-ugly-assumed\n+-fno-ugly-comma -fno-ugly-complex -fno-ugly-init\n+-fno-ugly-logint\n+@end smallexample\n+\n+@xref{Distensions}, for more information.\n+\n+@cindex -ff66 option\n+@cindex options, -ff66\n+@item -ff66\n+@cindex FORTRAN 66\n+@cindex compatibility, FORTRAN 66\n+Specify that the program is written in idiomatic FORTRAN 66.\n+Same as @samp{-fonetrip -fugly-assumed}.\n+\n+The @samp{-fno-f66} option is the inverse of @samp{-ff66}.\n+As such, it is the same as @samp{-fno-onetrip -fno-ugly-assumed}.\n+\n+The meaning of this option is likely to be refined as future\n+versions of @code{g77} provide more compatibility with other\n+existing and obsolete Fortran implementations.\n+\n+@cindex -ff77 option\n+@cindex options, -ff77\n+@item -ff77\n+@cindex UNIX f77\n+@cindex f2c compatibility\n+@cindex compatibility, f2c\n+@cindex f77 compatibility\n+@cindex compatibility, f77\n+Specify that the program is written in idiomatic UNIX FORTRAN 77\n+and/or the dialect accepted by the @code{f2c} product.\n+Same as @samp{-fbackslash -fno-typeless-boz}.\n+\n+The meaning of this option is likely to be refined as future\n+versions of @code{g77} provide more compatibility with other\n+existing and obsolete Fortran implementations.\n+\n+@cindex -fno-f77 option\n+@cindex options, -fno-f77\n+@item -fno-f77\n+@cindex UNIX f77\n+The @samp{-fno-f77} option is @emph{not} the inverse\n+of @samp{-ff77}.\n+It specifies that the program is not written in idiomatic UNIX\n+FORTRAN 77 or @code{f2c}, but in a more widely portable dialect.\n+@samp{-fno-f77} is the same as @samp{-fno-backslash}.\n+\n+The meaning of this option is likely to be refined as future\n+versions of @code{g77} provide more compatibility with other\n+existing and obsolete Fortran implementations.\n+@end table\n+\n+@node Fortran Dialect Options\n+@section Options Controlling Fortran Dialect\n+@cindex dialect options\n+@cindex language, dialect options\n+@cindex options, dialect\n+\n+The following options control the dialect of Fortran\n+that the compiler accepts:\n+\n+@table @code\n+@cindex -ffree-form option\n+@cindex options, -ffree-form\n+@cindex -fno-fixed-form option\n+@cindex options, -fno-fixed-form\n+@cindex source file format\n+@cindex free form\n+@cindex fixed form\n+@cindex Fortran 90, features\n+@item -ffree-form\n+@item -fno-fixed-form\n+Specify that the source file is written in free form\n+(introduced in Fortran 90) instead of the more-traditional fixed form.\n+\n+@cindex -ff90 option\n+@cindex options, -ff90\n+@cindex Fortran 90, features\n+@item -ff90\n+Allow certain Fortran-90 constructs.\n+\n+This option controls whether certain\n+Fortran 90 constructs are recognized.\n+(Other Fortran 90 constructs\n+might or might not be recognized depending on other options such as\n+@samp{-fvxt}, @samp{-ff90-intrinsics-enable}, and the\n+current level of support for Fortran 90.)\n+\n+@xref{Fortran 90}, for more information.\n+\n+@cindex -fvxt option\n+@cindex options, -fvxt\n+@item -fvxt\n+@cindex Fortran 90, features\n+@cindex VXT extensions\n+Specify the treatment of certain constructs that have different\n+meanings depending on whether the code is written in\n+GNU Fortran (based on FORTRAN 77 and akin to Fortran 90)\n+or VXT Fortran (more like VAX FORTRAN).\n+\n+The default is @samp{-fno-vxt}.\n+@samp{-fvxt} specifies that the VXT Fortran interpretations\n+for those constructs are to be chosen.\n+\n+@xref{VXT Fortran}, for more information.\n+\n+@cindex -fdollar-ok option\n+@cindex options, -fdollar-ok\n+@item -fdollar-ok\n+@cindex dollar sign\n+@cindex symbol names\n+@cindex character set\n+Allow @samp{$} as a valid character in a symbol name.\n+\n+@cindex -fno-backslash option\n+@cindex options, -fno-backslash\n+@item -fno-backslash\n+@cindex backslash\n+@cindex character constants\n+@cindex Hollerith constants\n+Specify that @samp{\\} is not to be specially interpreted in character\n+and Hollerith constants a la C and many UNIX Fortran compilers.\n+\n+For example, with @samp{-fbackslash} in effect, @samp{A\\nB} specifies\n+three characters, with the second one being newline.\n+With @samp{-fno-backslash}, it specifies four characters,\n+@samp{A}, @samp{\\}, @samp{n}, and @samp{B}.\n+\n+Note that @code{g77} implements a fairly general form of backslash\n+processing that is incompatible with the narrower forms supported\n+by some other compilers.\n+For example, @samp{'A\\003B'} is a three-character string in @code{g77},\n+whereas other compilers that support backslash might not support\n+the three-octal-digit form, and thus treat that string as longer\n+than three characters.\n+\n+@xref{Backslash in Constants}, for\n+information on why @samp{-fbackslash} is the default\n+instead of @samp{-fno-backslash}.\n+\n+@cindex -fno-ugly-args option\n+@cindex options, -fno-ugly-args\n+@item -fno-ugly-args\n+Disallow passing Hollerith and typeless constants as actual\n+arguments (for example, @samp{CALL FOO(4HABCD)}).\n+\n+@xref{Ugly Implicit Argument Conversion}, for more information.\n+\n+@cindex -fugly-assign option\n+@cindex options, -fugly-assign\n+@item -fugly-assign\n+Use the same storage for a given variable regardless of\n+whether it is used to hold an assigned-statement label\n+(as in @samp{ASSIGN 10 TO I}) or used to hold numeric data\n+(as in @samp{I = 3}).\n+\n+@xref{Ugly Assigned Labels}, for more information.\n+\n+@cindex -fugly-assumed option\n+@cindex options, -fugly-assumed\n+@item -fugly-assumed\n+Assume any dummy array with a final dimension specified as @samp{1}\n+is really an assumed-size array, as if @samp{*} had been specified\n+for the final dimension instead of @samp{1}.\n+\n+For example, @samp{DIMENSION X(1)} is treated as if it\n+had read @samp{DIMENSION X(*)}.\n+\n+@xref{Ugly Assumed-Size Arrays}, for more information.\n+\n+@cindex -fugly-comma option\n+@cindex options, -fugly-comma\n+@item -fugly-comma\n+In an external-procedure invocation,\n+treat a trailing comma in the argument list\n+as specification of a trailing null argument,\n+and treat an empty argument list\n+as specification of a single null argument.\n+\n+For example, @samp{CALL FOO(,)} is treated as\n+@samp{CALL FOO(%VAL(0), %VAL(0))}.\n+That is, @emph{two} null arguments are specified\n+by the procedure call when @samp{-fugly-comma} is in force.\n+And @samp{F = FUNC()} is treated as @samp{F = FUNC(%VAL(0))}.\n+\n+The default behavior, @samp{-fno-ugly-comma}, is to ignore\n+a single trailing comma in an argument list.\n+So, by default, @samp{CALL FOO(X,)} is treated\n+exactly the same as @samp{CALL FOO(X)}.\n+\n+@xref{Ugly Null Arguments}, for more information.\n+\n+@cindex -fugly-complex option\n+@cindex options, -fugly-complex\n+@item -fugly-complex\n+Do not complain about @samp{REAL(@var{expr})} or\n+@samp{AIMAG(@var{expr})} when @var{expr} is a @code{COMPLEX}\n+type other than @code{COMPLEX(KIND=1)}---usually\n+this is used to permit @code{COMPLEX(KIND=2)}\n+(@code{DOUBLE COMPLEX}) operands.\n+\n+The @samp{-ff90} option controls the interpretation\n+of this construct.\n+\n+@xref{Ugly Complex Part Extraction}, for more information.\n+\n+@cindex -fno-ugly-init option\n+@cindex options, -fno-ugly-init\n+@item -fno-ugly-init\n+Disallow use of Hollerith and typeless constants as initial\n+values (in @code{PARAMETER} and @code{DATA} statements), and\n+use of character constants to\n+initialize numeric types and vice versa.\n+\n+For example, @samp{DATA I/'F'/, CHRVAR/65/, J/4HABCD/} is disallowed by\n+@samp{-fno-ugly-init}.\n+\n+@xref{Ugly Conversion of Initializers}, for more information.\n+\n+@cindex -fugly-logint option\n+@cindex options, -fugly-logint\n+@item -fugly-logint\n+Treat @code{INTEGER} and @code{LOGICAL} variables and\n+expressions as potential stand-ins for each other.\n+\n+For example, automatic conversion between @code{INTEGER} and\n+@code{LOGICAL} is enabled, for many contexts, via this option.\n+\n+@xref{Ugly Integer Conversions}, for more information.\n+\n+@cindex -fonetrip option\n+@cindex options, -fonetrip\n+@item -fonetrip\n+@cindex FORTRAN 66\n+@cindex @code{DO} loops, one-trip\n+@cindex one-trip @code{DO} loops\n+@cindex @code{DO} loops, zero-trip\n+@cindex zero-trip @code{DO} loops\n+@cindex compatibility, FORTRAN 66\n+Executable iterative @code{DO} loops are to be executed at\n+least once each time they are reached.\n+\n+ANSI FORTRAN 77 and more recent versions of the Fortran standard\n+specify that the body of an iterative @code{DO} loop is not executed\n+if the number of iterations calculated from the parameters of the\n+loop is less than 1.\n+(For example, @samp{DO 10 I = 1, 0}.)\n+Such a loop is called a @dfn{zero-trip loop}.\n+\n+Prior to ANSI FORTRAN 77, many compilers implemented @code{DO} loops\n+such that the body of a loop would be executed at least once, even\n+if the iteration count was zero.\n+Fortran code written assuming this behavior is said to require\n+@dfn{one-trip loops}.\n+For example, some code written to the FORTRAN 66 standard\n+expects this behavior from its @code{DO} loops, although that\n+standard did not specify this behavior.\n+\n+The @samp{-fonetrip} option specifies that the source file(s) being\n+compiled require one-trip loops.\n+\n+This option affects only those loops specified by the (iterative) @code{DO}\n+statement and by implied-@code{DO} lists in I/O statements.\n+Loops specified by implied-@code{DO} lists in @code{DATA} and\n+specification (non-executable) statements are not affected.\n+\n+@cindex -ftypeless-boz option\n+@cindex options, -ftypeless-boz\n+@cindex prefix-radix constants\n+@cindex constants, prefix-radix\n+@cindex constants, types\n+@cindex types, constants\n+@item -ftypeless-boz\n+Specifies that prefix-radix non-decimal constants, such as\n+@samp{Z'ABCD'}, are typeless instead of @code{INTEGER(KIND=1)}.\n+\n+You can test for yourself whether a particular compiler treats\n+the prefix form as @code{INTEGER(KIND=1)} or typeless by running the\n+following program:\n+\n+@smallexample\n+EQUIVALENCE (I, R)\n+R = Z'ABCD1234'\n+J = Z'ABCD1234'\n+IF (J .EQ. I) PRINT *, 'Prefix form is TYPELESS'\n+IF (J .NE. I) PRINT *, 'Prefix form is INTEGER'\n+END\n+@end smallexample\n+\n+Reports indicate that many compilers process this form as\n+@code{INTEGER(KIND=1)}, though a few as typeless, and at least one\n+based on a command-line option specifying some kind of\n+compatibility.\n+\n+@cindex -fintrin-case-initcap option\n+@cindex options, -fintrin-case-initcap\n+@item -fintrin-case-initcap\n+@cindex -fintrin-case-upper option\n+@cindex options, -fintrin-case-upper\n+@item -fintrin-case-upper\n+@cindex -fintrin-case-lower option\n+@cindex options, -fintrin-case-lower\n+@item -fintrin-case-lower\n+@cindex -fintrin-case-any option\n+@cindex options, -fintrin-case-any\n+@item -fintrin-case-any\n+Specify expected case for intrinsic names.\n+@samp{-fintrin-case-lower} is the default.\n+\n+@cindex -fmatch-case-initcap option\n+@cindex options, -fmatch-case-initcap\n+@item -fmatch-case-initcap\n+@cindex -fmatch-case-upper option\n+@cindex options, -fmatch-case-upper\n+@item -fmatch-case-upper\n+@cindex -fmatch-case-lower option\n+@cindex options, -fmatch-case-lower\n+@item -fmatch-case-lower\n+@cindex -fmatch-case-any option\n+@cindex options, -fmatch-case-any\n+@item -fmatch-case-any\n+Specify expected case for keywords.\n+@samp{-fmatch-case-lower} is the default.\n+\n+@cindex -fsource-case-upper option\n+@cindex options, -fsource-case-upper\n+@item -fsource-case-upper\n+@cindex -fsource-case-lower option\n+@cindex options, -fsource-case-lower\n+@item -fsource-case-lower\n+@cindex -fsource-case-preserve option\n+@cindex options, -fsource-case-preserve\n+@item -fsource-case-preserve\n+Specify whether source text other than character and Hollerith constants\n+is to be translated to uppercase, to lowercase, or preserved as is.\n+@samp{-fsource-case-lower} is the default.\n+\n+@cindex -fsymbol-case-initcap option\n+@cindex options, -fsymbol-case-initcap\n+@item -fsymbol-case-initcap\n+@cindex -fsymbol-case-upper option\n+@cindex options, -fsymbol-case-upper\n+@item -fsymbol-case-upper\n+@cindex -fsymbol-case-lower option\n+@cindex options, -fsymbol-case-lower\n+@item -fsymbol-case-lower\n+@cindex -fsymbol-case-any option\n+@cindex options, -fsymbol-case-any\n+@item -fsymbol-case-any\n+Specify valid cases for user-defined symbol names.\n+@samp{-fsymbol-case-any} is the default.\n+\n+@cindex -fcase-strict-upper option\n+@cindex options, -fcase-strict-upper\n+@item -fcase-strict-upper\n+Same as @samp{-fintrin-case-upper -fmatch-case-upper -fsource-case-preserve\n+-fsymbol-case-upper}.\n+(Requires all pertinent source to be in uppercase.)\n+\n+@cindex -fcase-strict-lower option\n+@cindex options, -fcase-strict-lower\n+@item -fcase-strict-lower\n+Same as @samp{-fintrin-case-lower -fmatch-case-lower -fsource-case-preserve\n+-fsymbol-case-lower}.\n+(Requires all pertinent source to be in lowercase.)\n+\n+@cindex -fcase-initcap option\n+@cindex options, -fcase-initcap\n+@item -fcase-initcap\n+Same as @samp{-fintrin-case-initcap -fmatch-case-initcap -fsource-case-preserve\n+-fsymbol-case-initcap}.\n+(Requires all pertinent source to be in initial capitals,\n+as in @samp{Print *,SqRt(Value)}.)\n+\n+@cindex -fcase-upper option\n+@cindex options, -fcase-upper\n+@item -fcase-upper\n+Same as @samp{-fintrin-case-any -fmatch-case-any -fsource-case-upper\n+-fsymbol-case-any}.\n+(Maps all pertinent source to uppercase.)\n+\n+@cindex -fcase-lower option\n+@cindex options, -fcase-lower\n+@item -fcase-lower\n+Same as @samp{-fintrin-case-any -fmatch-case-any -fsource-case-lower\n+-fsymbol-case-any}.\n+(Maps all pertinent source to lowercase.)\n+\n+@cindex -fcase-preserve option\n+@cindex options, -fcase-preserve\n+@item -fcase-preserve\n+Same as @samp{-fintrin-case-any -fmatch-case-any -fsource-case-preserve\n+-fsymbol-case-any}.\n+(Preserves all case in user-defined symbols,\n+while allowing any-case matching of intrinsics and keywords.\n+For example, @samp{call Foo(i,I)} would pass two @emph{different}\n+variables named @samp{i} and @samp{I} to a procedure named @samp{Foo}.)\n+\n+@cindex -fbadu77-intrinsics-delete option\n+@cindex options, -fbadu77-intrinsics-delete\n+@item -fbadu77-intrinsics-delete\n+@cindex -fbadu77-intrinsics-hide option\n+@cindex options, -fbadu77-intrinsics-hide\n+@item -fbadu77-intrinsics-hide\n+@cindex -fbadu77-intrinsics-disable option\n+@cindex options, -fbadu77-intrinsics-disable\n+@item -fbadu77-intrinsics-disable\n+@cindex -fbadu77-intrinsics-enable option\n+@cindex options, -fbadu77-intrinsics-enable\n+@item -fbadu77-intrinsics-enable\n+@cindex @code{badu77} intrinsics\n+@cindex intrinsics, @code{badu77}\n+Specify status of UNIX intrinsics having inappropriate forms.\n+@samp{-fbadu77-intrinsics-enable} is the default.\n+@xref{Intrinsic Groups}.\n+\n+@cindex -ff2c-intrinsics-delete option\n+@cindex options, -ff2c-intrinsics-delete\n+@item -ff2c-intrinsics-delete\n+@cindex -ff2c-intrinsics-hide option\n+@cindex options, -ff2c-intrinsics-hide\n+@item -ff2c-intrinsics-hide\n+@cindex -ff2c-intrinsics-disable option\n+@cindex options, -ff2c-intrinsics-disable\n+@item -ff2c-intrinsics-disable\n+@cindex -ff2c-intrinsics-enable option\n+@cindex options, -ff2c-intrinsics-enable\n+@item -ff2c-intrinsics-enable\n+@cindex @code{f2c} intrinsics\n+@cindex intrinsics, @code{f2c}\n+Specify status of f2c-specific intrinsics.\n+@samp{-ff2c-intrinsics-enable} is the default.\n+@xref{Intrinsic Groups}.\n+\n+@cindex -ff90-intrinsics-delete option\n+@cindex options, -ff90-intrinsics-delete\n+@item -ff90-intrinsics-delete\n+@cindex -ff90-intrinsics-hide option\n+@cindex options, -ff90-intrinsics-hide\n+@item -ff90-intrinsics-hide\n+@cindex -ff90-intrinsics-disable option\n+@cindex options, -ff90-intrinsics-disable\n+@item -ff90-intrinsics-disable\n+@cindex -ff90-intrinsics-enable option\n+@cindex options, -ff90-intrinsics-enable\n+@item -ff90-intrinsics-enable\n+@cindex Fortran 90, intrinsics\n+@cindex intrinsics, Fortran 90\n+Specify status of F90-specific intrinsics.\n+@samp{-ff90-intrinsics-enable} is the default.\n+@xref{Intrinsic Groups}.\n+\n+@cindex -fgnu-intrinsics-delete option\n+@cindex options, -fgnu-intrinsics-delete\n+@item -fgnu-intrinsics-delete\n+@cindex -fgnu-intrinsics-hide option\n+@cindex options, -fgnu-intrinsics-hide\n+@item -fgnu-intrinsics-hide\n+@cindex -fgnu-intrinsics-disable option\n+@cindex options, -fgnu-intrinsics-disable\n+@item -fgnu-intrinsics-disable\n+@cindex -fgnu-intrinsics-enable option\n+@cindex options, -fgnu-intrinsics-enable\n+@item -fgnu-intrinsics-enable\n+@cindex Digital Fortran features\n+@cindex @code{COMPLEX} intrinsics\n+@cindex intrinsics, @code{COMPLEX}\n+Specify status of Digital's COMPLEX-related intrinsics.\n+@samp{-fgnu-intrinsics-enable} is the default.\n+@xref{Intrinsic Groups}.\n+\n+@cindex -fmil-intrinsics-delete option\n+@cindex options, -fmil-intrinsics-delete\n+@item -fmil-intrinsics-delete\n+@cindex -fmil-intrinsics-hide option\n+@cindex options, -fmil-intrinsics-hide\n+@item -fmil-intrinsics-hide\n+@cindex -fmil-intrinsics-disable option\n+@cindex options, -fmil-intrinsics-disable\n+@item -fmil-intrinsics-disable\n+@cindex -fmil-intrinsics-enable option\n+@cindex options, -fmil-intrinsics-enable\n+@item -fmil-intrinsics-enable\n+@cindex MIL-STD 1753\n+@cindex intrinsics, MIL-STD 1753\n+Specify status of MIL-STD-1753-specific intrinsics.\n+@samp{-fmil-intrinsics-enable} is the default.\n+@xref{Intrinsic Groups}.\n+\n+@cindex -funix-intrinsics-delete option\n+@cindex options, -funix-intrinsics-delete\n+@item -funix-intrinsics-delete\n+@cindex -funix-intrinsics-hide option\n+@cindex options, -funix-intrinsics-hide\n+@item -funix-intrinsics-hide\n+@cindex -funix-intrinsics-disable option\n+@cindex options, -funix-intrinsics-disable\n+@item -funix-intrinsics-disable\n+@cindex -funix-intrinsics-enable option\n+@cindex options, -funix-intrinsics-enable\n+@item -funix-intrinsics-enable\n+@cindex UNIX intrinsics\n+@cindex intrinsics, UNIX\n+Specify status of UNIX intrinsics.\n+@samp{-funix-intrinsics-enable} is the default.\n+@xref{Intrinsic Groups}.\n+\n+@cindex -fvxt-intrinsics-delete option\n+@cindex options, -fvxt-intrinsics-delete\n+@item -fvxt-intrinsics-delete\n+@cindex -fvxt-intrinsics-hide option\n+@cindex options, -fvxt-intrinsics-hide\n+@item -fvxt-intrinsics-hide\n+@cindex -fvxt-intrinsics-disable option\n+@cindex options, -fvxt-intrinsics-disable\n+@item -fvxt-intrinsics-disable\n+@cindex -fvxt-intrinsics-enable option\n+@cindex options, -fvxt-intrinsics-enable\n+@item -fvxt-intrinsics-enable\n+@cindex VXT intrinsics\n+@cindex intrinsics, VXT\n+Specify status of VXT intrinsics.\n+@samp{-fvxt-intrinsics-enable} is the default.\n+@xref{Intrinsic Groups}.\n+\n+@cindex -ffixed-line-length-@var{n} option\n+@cindex options, -ffixed-line-length-@var{n}\n+@item -ffixed-line-length-@var{n}\n+@cindex source file format\n+@cindex lines, length\n+@cindex length of source lines\n+@cindex fixed form\n+@cindex limits, lengths of source lines\n+Set column after which characters are ignored in typical fixed-form\n+lines in the source file, and through which spaces are assumed (as\n+if padded to that length) after the ends of short fixed-form lines.\n+\n+@cindex card image\n+@cindex extended-source option\n+Popular values for @var{n} include 72 (the\n+standard and the default), 80 (card image), and 132 (corresponds\n+to ``extended-source'' options in some popular compilers).\n+@var{n} may be @samp{none}, meaning that the entire line is meaningful\n+and that continued character constants never have implicit spaces appended\n+to them to fill out the line.\n+@samp{-ffixed-line-length-0} means the same thing as\n+@samp{-ffixed-line-length-none}.\n+\n+@xref{Source Form}, for more information.\n+@end table\n+\n+@node Warning Options\n+@section Options to Request or Suppress Warnings\n+@cindex options, warnings\n+@cindex warnings, suppressing\n+@cindex messages, warning\n+@cindex suppressing warnings\n+\n+Warnings are diagnostic messages that report constructions which\n+are not inherently erroneous but which are risky or suggest there\n+might have been an error.\n+\n+You can request many specific warnings with options beginning @samp{-W},\n+for example @samp{-Wimplicit} to request warnings on implicit\n+declarations.  Each of these specific warning options also has a\n+negative form beginning @samp{-Wno-} to turn off warnings;\n+for example, @samp{-Wno-implicit}.  This manual lists only one of the\n+two forms, whichever is not the default.\n+\n+These options control the amount and kinds of warnings produced by GNU\n+Fortran:\n+\n+@table @code\n+@cindex syntax checking\n+@cindex -fsyntax-only option\n+@cindex options, -fsyntax-only\n+@item -fsyntax-only\n+Check the code for syntax errors, but don't do anything beyond that.\n+\n+@cindex -pedantic option\n+@cindex options, -pedantic\n+@item -pedantic\n+Issue warnings for uses of extensions to ANSI FORTRAN 77.\n+@samp{-pedantic} also applies to C-language constructs where they\n+occur in GNU Fortran source files, such as use of @samp{\\e} in a\n+character constant within a directive like @samp{#include}.\n+\n+Valid ANSI FORTRAN 77 programs should compile properly with or without\n+this option.\n+However, without this option, certain GNU extensions and traditional\n+Fortran features are supported as well.\n+With this option, many of them are rejected.\n+\n+Some users try to use @samp{-pedantic} to check programs for strict ANSI\n+conformance.\n+They soon find that it does not do quite what they want---it finds some\n+non-ANSI practices, but not all.\n+However, improvements to @code{g77} in this area are welcome.\n+\n+@cindex -pedantic-errors option\n+@cindex options, -pedantic-errors\n+@item -pedantic-errors\n+Like @samp{-pedantic}, except that errors are produced rather than\n+warnings.\n+\n+@cindex -fpedantic option\n+@cindex options, -fpedantic\n+@item -fpedantic\n+Like @samp{-pedantic}, but applies only to Fortran constructs.\n+\n+@cindex -w option\n+@cindex options, -w\n+@item -w\n+Inhibit all warning messages.\n+\n+@cindex -Wno-globals option\n+@cindex options, -Wno-globals\n+@item -Wno-globals\n+@cindex global names, warning\n+@cindex warnings, global names\n+Inhibit warnings about use of a name as both a global name\n+(a subroutine, function, or block data program unit, or a\n+common block) and implicitly as the name of an intrinsic\n+in a source file.\n+\n+Also inhibit warnings about inconsistent invocations and/or\n+definitions of global procedures (function and subroutines).\n+Such inconsistencies include different numbers of arguments\n+and different types of arguments.\n+\n+@cindex -Wimplicit option\n+@cindex options, -Wimplicit\n+@item -Wimplicit\n+@cindex implicit declaration, warning\n+@cindex warnings, implicit declaration\n+@cindex -u option\n+@cindex /WARNINGS=DECLARATIONS switch\n+@cindex IMPLICIT NONE, similar effect\n+@cindex effecting IMPLICIT NONE\n+Warn whenever a variable, array, or function is implicitly\n+declared.\n+Has an effect similar to using the @code{IMPLICIT NONE} statement\n+in every program unit.\n+(Some Fortran compilers provide this feature by an option\n+named @samp{-u} or @samp{/WARNINGS=DECLARATIONS}.)\n+\n+@cindex -Wunused option\n+@cindex options, -Wunused\n+@item -Wunused\n+@cindex unused variables\n+@cindex variables, unused\n+Warn whenever a variable is unused aside from its declaration.\n+\n+@cindex -Wuninitialized option\n+@cindex options, -Wuninitialized\n+@item -Wuninitialized\n+@cindex uninitialized variables\n+@cindex variables, uninitialized\n+Warn whenever an automatic variable is used without first being initialized.\n+\n+These warnings are possible only in optimizing compilation,\n+because they require data-flow information that is computed only\n+when optimizing.  If you don't specify @samp{-O}, you simply won't\n+get these warnings.\n+\n+These warnings occur only for variables that are candidates for\n+register allocation.  Therefore, they do not occur for a variable\n+@c that is declared @code{VOLATILE}, or\n+whose address is taken, or whose size\n+is other than 1, 2, 4 or 8 bytes.  Also, they do not occur for\n+arrays, even when they are in registers.\n+\n+Note that there might be no warning about a variable that is used only\n+to compute a value that itself is never used, because such\n+computations may be deleted by data-flow analysis before the warnings\n+are printed.\n+\n+These warnings are made optional because GNU Fortran is not smart\n+enough to see all the reasons why the code might be correct\n+despite appearing to have an error.  Here is one example of how\n+this can happen:\n+\n+@example\n+SUBROUTINE DISPAT(J)\n+IF (J.EQ.1) I=1\n+IF (J.EQ.2) I=4\n+IF (J.EQ.3) I=5\n+CALL FOO(I)\n+END\n+@end example\n+\n+@noindent\n+If the value of @code{J} is always 1, 2 or 3, then @code{I} is\n+always initialized, but GNU Fortran doesn't know this.  Here is\n+another common case:\n+\n+@example\n+SUBROUTINE MAYBE(FLAG)\n+LOGICAL FLAG\n+IF (FLAG) VALUE = 9.4\n+@dots{}\n+IF (FLAG) PRINT *, VALUE\n+END\n+@end example\n+\n+@noindent\n+This has no bug because @code{VALUE} is used only if it is set.\n+\n+@cindex -Wall option\n+@cindex options, -Wall\n+@item -Wall\n+@cindex all warnings\n+@cindex warnings, all\n+The @samp{-Wunused} and @samp{-Wuninitialized} options combined.\n+These are all the\n+options which pertain to usage that we recommend avoiding and that we\n+believe is easy to avoid.\n+(As more warnings are added to @code{g77}, some might\n+be added to the list enabled by @samp{-Wall}.)\n+@end table\n+\n+The remaining @samp{-W@dots{}} options are not implied by @samp{-Wall}\n+because they warn about constructions that we consider reasonable to\n+use, on occasion, in clean programs.\n+\n+@table @code\n+@c @item -W\n+@c Print extra warning messages for these events:\n+@c\n+@c @itemize @bullet\n+@c @item\n+@c If @samp{-Wall} or @samp{-Wunused} is also specified, warn about unused\n+@c arguments.\n+@c\n+@c @end itemize\n+@c\n+@cindex -Wsurprising option\n+@cindex options, -Wsurprising\n+@item -Wsurprising\n+Warn about ``suspicious'' constructs that are interpreted\n+by the compiler in a way that might well be surprising to\n+someone reading the code.\n+These differences can result in subtle, compiler-dependent\n+(even machine-dependent) behavioral differences.\n+The constructs warned about include:\n+\n+@itemize @bullet\n+@item\n+Expressions having two arithmetic operators in a row, such\n+as @samp{X*-Y}.\n+Such a construct is nonstandard, and can produce\n+unexpected results in more complicated situations such\n+as @samp{X**-Y*Z}.\n+@code{g77}, along with many other compilers, interprets\n+this example differently than many programmers, and a few\n+other compilers.\n+Specifically, @code{g77} interprets @samp{X**-Y*Z} as\n+@samp{(X**(-Y))*Z}, while others might think it should\n+be interpreted as @samp{X**(-(Y*Z))}.\n+\n+A revealing example is the constant expression @samp{2**-2*1.},\n+which @code{g77} evaluates to .25, while others might evaluate\n+it to 0., the difference resulting from the way precedence affects\n+type promotion.\n+\n+(The @samp{-fpedantic} option also warns about expressions\n+having two arithmetic operators in a row.)\n+\n+@item\n+Expressions with a unary minus followed by an operand and then\n+a binary operator other than plus or minus.\n+For example, @samp{-2**2} produces a warning, because\n+the precedence is @samp{-(2**2)}, yielding -4, not\n+@samp{(-2)**2}, which yields 4, and which might represent\n+what a programmer expects.\n+\n+An example of an expression producing different results\n+in a surprising way is @samp{-I*S}, where @var{I} holds\n+the value @samp{-2147483648} and @var{S} holds @samp{0.5}.\n+On many systems, negating @var{I} results in the same\n+value, not a positive number, because it is already the\n+lower bound of what an @code{INTEGER(KIND=1)} variable can hold.\n+So, the expression evaluates to a positive number, while\n+the ``expected'' interpretation, @samp{(-I)*S}, would\n+evaluate to a negative number.\n+\n+Even cases such as @samp{-I*J} produce warnings,\n+even though, in most configurations and situations,\n+there is no computational difference between the\n+results of the two interpretations---the purpose\n+of this warning is to warn about differing interpretations\n+and encourage a better style of coding, not to identify\n+only those places where bugs might exist in the user's\n+code.\n+\n+@cindex DO statement\n+@cindex statements, DO\n+@item\n+@code{DO} loops with @code{DO} variables that are not\n+of integral type---that is, using @code{REAL}\n+variables as loop control variables.\n+Although such loops can be written to work in the\n+``obvious'' way, the way @code{g77} is required by the\n+Fortran standard to interpret such code is likely to\n+be quite different from the way many programmers expect.\n+(This is true of all @code{DO} loops, but the differences\n+are pronounced for non-integral loop control variables.)\n+\n+@xref{Loops}, for more information.\n+@end itemize\n+\n+@cindex -Werror option\n+@cindex options, -Werror\n+@item -Werror\n+Make all warnings into errors.\n+\n+@cindex -W option\n+@cindex options, -W\n+@item -W\n+@cindex extra warnings\n+@cindex warnings, extra\n+Turns on ``extra warnings'' and, if optimization is specified\n+via @samp{-O}, the @samp{-Wuninitialized} option.\n+(This might change in future versions of @code{g77}.)\n+\n+``Extra warnings'' are issued for:\n+\n+@itemize @bullet\n+@item\n+@cindex unused parameters\n+@cindex parameters, unused\n+@cindex unused arguments\n+@cindex arguments, unused\n+@cindex unused dummies\n+@cindex dummies, unused\n+Unused parameters to a procedure (when @samp{-Wunused} also is\n+specified).\n+\n+@item\n+@cindex overflow\n+Overflows involving floating-point constants (not available\n+for certain configurations).\n+@end itemize\n+@end table\n+\n+@xref{Warning Options,,Options to Request or Suppress Warnings,\n+gcc,Using and Porting GNU CC}, for information on more options offered\n+by the GBE shared by @code{g77}, @code{gcc}, and other GNU compilers.\n+\n+Some of these have no effect when compiling programs written in Fortran:\n+\n+@table @code\n+@cindex -Wcomment option\n+@cindex options, -Wcomment\n+@item -Wcomment\n+@cindex -Wformat option\n+@cindex options, -Wformat\n+@item -Wformat\n+@cindex -Wparentheses option\n+@cindex options, -Wparentheses\n+@item -Wparentheses\n+@cindex -Wswitch option\n+@cindex options, -Wswitch\n+@item -Wswitch\n+@cindex -Wtraditional option\n+@cindex options, -Wtraditional\n+@item -Wtraditional\n+@cindex -Wshadow option\n+@cindex options, -Wshadow\n+@item -Wshadow\n+@cindex -Wid-clash-@var{len} option\n+@cindex options, -Wid-clash-@var{len}\n+@item -Wid-clash-@var{len}\n+@cindex -Wlarger-than-@var{len} option\n+@cindex options, -Wlarger-than-@var{len}\n+@item -Wlarger-than-@var{len}\n+@cindex -Wconversion option\n+@cindex options, -Wconversion\n+@item -Wconversion\n+@cindex -Waggregate-return option\n+@cindex options, -Waggregate-return\n+@item -Waggregate-return\n+@cindex -Wredundant-decls option\n+@cindex options, -Wredundant-decls\n+@item -Wredundant-decls\n+@cindex unsupported warnings\n+@cindex warnings, unsupported\n+These options all could have some relevant meaning for\n+GNU Fortran programs, but are not yet supported.\n+@end table\n+\n+@node Debugging Options\n+@section Options for Debugging Your Program or GNU Fortran\n+@cindex options, debugging\n+@cindex debugging information options\n+\n+GNU Fortran has various special options that are used for debugging\n+either your program or @code{g77}.\n+\n+@table @code\n+@cindex -g option\n+@cindex options, -g\n+@item -g\n+Produce debugging information in the operating system's native format\n+(stabs, COFF, XCOFF, or DWARF).  GDB can work with this debugging\n+information.\n+@end table\n+\n+@xref{Debugging Options,,Options for Debugging Your Program or GNU CC,\n+gcc,Using and Porting GNU CC}, for more information on debugging options.\n+\n+@node Optimize Options\n+@section Options That Control Optimization\n+@cindex optimize options\n+@cindex options, optimization\n+\n+Most Fortran users will want to use no optimization when\n+developing and testing programs, and use @samp{-O} or @samp{-O2} when\n+compiling programs for late-cycle testing and for production use.\n+However, note that certain diagnostics---such as for uninitialized\n+variables---depend on the flow analysis done by @samp{-O}, i.e.@: you\n+must use @samp{-O} or @samp{-O2} to get such diagnostics.\n+\n+The following flags have particular applicability when\n+compiling Fortran programs:\n+\n+@table @code\n+@cindex -malign-double option\n+@cindex options, -malign-double\n+@item -malign-double\n+(Intel x86 architecture only.)\n+\n+Noticeably improves performance of @code{g77} programs making\n+heavy use of @code{REAL(KIND=2)} (@code{DOUBLE PRECISION}) data\n+on some systems.\n+In particular, systems using Pentium, Pentium Pro, 586, and\n+686 implementations\n+of the i386 architecture execute programs faster when\n+@code{REAL(KIND=2)} (@code{DOUBLE PRECISION}) data are\n+aligned on 64-bit boundaries\n+in memory.\n+\n+This option can, at least, make benchmark results more consistent\n+across various system configurations, versions of the program,\n+and data sets.\n+\n+@emph{Note:} The warning in the @code{gcc} documentation about\n+this option does not apply, generally speaking, to Fortran\n+code compiled by @code{g77}.\n+\n+@xref{Aligned Data}, for more information on alignment issues.\n+\n+@emph{Also also note:} The negative form of @samp{-malign-double}\n+is @samp{-mno-align-double}, not @samp{-benign-double}.\n+\n+@cindex -ffloat-store option\n+@cindex options, -ffloat-store\n+@item -ffloat-store\n+@cindex IEEE 754 conformance\n+@cindex conformance, IEEE 754\n+@cindex floating-point, precision\n+Might help a Fortran program that depends on exact IEEE conformance on\n+some machines, but might slow down a program that doesn't.\n+\n+This option is effective when the floating-point unit is set to work in\n+IEEE 854 `extended precision'---as it typically is on x86 and m68k GNU\n+systems---rather than IEEE 754 double precision.  @samp{-ffloat-store}\n+tries to remove the extra precision by spilling data from floating-point\n+registers into memory and this typically involves a big performance\n+hit.  However, it doesn't affect intermediate results, so that it is\n+only partially effective.  `Excess precision' is avoided in code like:\n+@smallexample\n+a = b + c\n+d = a * e\n+@end smallexample\n+but not in code like:\n+@smallexample\n+      d = (b + c) * e\n+@end smallexample\n+\n+For another, potentially better, way of controlling the precision,\n+see @ref{Floating-point precision}.\n+\n+@cindex -fforce-mem option\n+@cindex options, -fforce-mem\n+@item -fforce-mem\n+@cindex -fforce-addr option\n+@cindex options, -fforce-addr\n+@item -fforce-addr\n+@cindex loops, speeding up\n+@cindex speed, of loops\n+Might improve optimization of loops.\n+\n+@cindex -fno-inline option\n+@cindex options, -fno-inline\n+@item -fno-inline\n+@cindex in-line code\n+@cindex compilation, in-line\n+@c DL: Only relevant for -O3?\n+Don't compile statement functions inline.\n+Might reduce the size of a program unit---which might be at\n+expense of some speed (though it should compile faster).\n+Note that if you are not optimizing, no functions can be expanded inline.\n+\n+@cindex -ffast-math option\n+@cindex options, -ffast-math\n+@item -ffast-math\n+@cindex IEEE 754 conformance\n+@cindex conformance, IEEE 754\n+Might allow some programs designed to not be too dependent\n+on IEEE behavior for floating-point to run faster, or die trying.\n+Sets @samp{-funsafe-math-optimizations}, and\n+@samp{-fno-trapping-math}.\n+\n+@cindex -funsafe-math-optimizations option\n+@cindex options, -funsafe-math-optimizations\n+@item -funsafe-math-optimizations\n+Allow optimizations that may be give incorrect results\n+for certain IEEE inputs.\n+\n+@cindex -fno-trapping-math option\n+@cindex options, -fno-trapping-math\n+@item -fno-trapping-math\n+Allow the compiler to assume that floating-point arithmetic\n+will not generate traps on any inputs.  This is useful, for\n+example, when running a program using IEEE \"non-stop\"\n+floating-point arithmetic.\n+\n+@cindex -fstrength-reduce option\n+@cindex options, -fstrength-reduce\n+@item -fstrength-reduce\n+@cindex loops, speeding up\n+@cindex speed, of loops\n+@c DL: normally defaulted?\n+Might make some loops run faster.\n+\n+@cindex -frerun-cse-after-loop option\n+@cindex options, -frerun-cse-after-loop\n+@item -frerun-cse-after-loop\n+@cindex -fexpensive-optimizations option\n+@cindex options, -fexpensive-optimizations\n+@c DL: This is -O2?\n+@item -fexpensive-optimizations\n+@cindex -fdelayed-branch option\n+@cindex options, -fdelayed-branch\n+@item -fdelayed-branch\n+@cindex -fschedule-insns option\n+@cindex options, -fschedule-insns\n+@item -fschedule-insns\n+@cindex -fschedule-insns2 option\n+@cindex options, -fschedule-insns2\n+@item -fschedule-insns2\n+@cindex -fcaller-saves option\n+@cindex options, -fcaller-saves\n+@item -fcaller-saves\n+Might improve performance on some code.\n+\n+@cindex -funroll-loops option\n+@cindex options, -funroll-loops\n+@item -funroll-loops\n+@cindex loops, unrolling\n+@cindex unrolling loops\n+@cindex loops, optimizing\n+@cindex indexed (iterative) @code{DO}\n+@cindex iterative @code{DO}\n+@c DL: fixme: Craig doesn't like `indexed' but f95 doesn't seem to\n+@c provide a suitable term\n+@c CB: I've decided on `iterative', for the time being, and changed\n+@c my previous, rather bizarre, use of `imperative' to that\n+@c (though `precomputed-trip' would be a more precise adjective)\n+Typically improves performance on code using iterative @code{DO} loops by\n+unrolling them and is probably generally appropriate for Fortran, though\n+it is not turned on at any optimization level.\n+Note that outer loop unrolling isn't done specifically; decisions about\n+whether to unroll a loop are made on the basis of its instruction count.\n+\n+@c DL: Fixme: This should obviously go somewhere else...\n+Also, no `loop discovery'@footnote{@dfn{loop discovery} refers to the\n+process by which a compiler, or indeed any reader of a program,\n+determines which portions of the program are more likely to be executed\n+repeatedly as it is being run.  Such discovery typically is done early\n+when compiling using optimization techniques, so the ``discovered''\n+loops get more attention---and more run-time resources, such as\n+registers---from the compiler.  It is easy to ``discover'' loops that are\n+constructed out of looping constructs in the language\n+(such as Fortran's @code{DO}).  For some programs, ``discovering'' loops\n+constructed out of lower-level constructs (such as @code{IF} and\n+@code{GOTO}) can lead to generation of more optimal code\n+than otherwise.} is done, so only loops written with @code{DO}\n+benefit from loop optimizations, including---but not limited\n+to---unrolling.  Loops written with @code{IF} and @code{GOTO} are not\n+currently recognized as such.  This option unrolls only iterative\n+@code{DO} loops, not @code{DO WHILE} loops.\n+\n+@cindex -funroll-all-loops option\n+@cindex options, -funroll-all-loops\n+@cindex DO WHILE\n+@item -funroll-all-loops\n+@c DL: Check my understanding of -funroll-all-loops v. -funroll-loops is correct.\n+Probably improves performance on code using @code{DO WHILE} loops by\n+unrolling them in addition to iterative @code{DO} loops.  In the absence\n+of @code{DO WHILE}, this option is equivalent to @samp{-funroll-loops}\n+but possibly slower.\n+\n+@item -fno-move-all-movables\n+@cindex -fno-move-all-movables option\n+@cindex options, -fno-move-all-movables\n+@item -fno-reduce-all-givs\n+@cindex -fno-reduce-all-givs option\n+@cindex options, -fno-reduce-all-givs\n+@item -fno-rerun-loop-opt\n+@cindex -fno-rerun-loop-opt option\n+@cindex options, -fno-rerun-loop-opt\n+@emph{Version info:}\n+These options are not supported by\n+versions of @code{g77} based on @code{gcc} version 2.8.\n+\n+Each of these might improve performance on some code.\n+\n+Analysis of Fortran code optimization and the resulting\n+optimizations triggered by the above options were\n+contributed by Toon Moene (@email{toon@@moene.indiv.nluug.nl}).\n+\n+These three options are intended to be removed someday, once\n+they have helped determine the efficacy of various\n+approaches to improving the performance of Fortran code.\n+\n+Please let us know how use of these options affects\n+the performance of your production code.\n+We're particularly interested in code that runs faster\n+when these options are @emph{disabled}, and in\n+non-Fortran code that benefits when they are\n+@emph{enabled} via the above @code{gcc} command-line options.\n+@end table\n+\n+@xref{Optimize Options,,Options That Control Optimization,\n+gcc,Using and Porting GNU CC}, for more information on options\n+to optimize the generated machine code.\n+\n+@node Preprocessor Options\n+@section Options Controlling the Preprocessor\n+@cindex preprocessor options\n+@cindex options, preprocessor\n+@cindex cpp program\n+@cindex programs, cpp\n+\n+These options control the C preprocessor, which is run on each C source\n+file before actual compilation.\n+\n+@xref{Preprocessor Options,,Options Controlling the Preprocessor,\n+gcc,Using and Porting GNU CC}, for information on C preprocessor options.\n+\n+@cindex INCLUDE directive\n+@cindex directive, INCLUDE\n+Some of these options also affect how @code{g77} processes the\n+@code{INCLUDE} directive.\n+Since this directive is processed even when preprocessing\n+is not requested, it is not described in this section.\n+@xref{Directory Options,,Options for Directory Search}, for\n+information on how @code{g77} processes the @code{INCLUDE} directive.\n+\n+However, the @code{INCLUDE} directive does not apply\n+preprocessing to the contents of the included file itself.\n+\n+Therefore, any file that contains preprocessor directives\n+(such as @code{#include}, @code{#define}, and @code{#if})\n+must be included via the @code{#include} directive, not\n+via the @code{INCLUDE} directive.\n+Therefore, any file containing preprocessor directives,\n+if included, is necessarily included by a file that itself\n+contains preprocessor directives.\n+\n+@node Directory Options\n+@section Options for Directory Search\n+@cindex directory, options\n+@cindex options, directory search\n+@cindex search path\n+\n+These options affect how the @code{cpp} preprocessor searches\n+for files specified via the @code{#include} directive.\n+Therefore, when compiling Fortran programs, they are meaningful\n+when the preprocessor is used.\n+\n+@cindex INCLUDE directive\n+@cindex directive, INCLUDE\n+Some of these options also affect how @code{g77} searches\n+for files specified via the @code{INCLUDE} directive,\n+although files included by that directive are not,\n+themselves, preprocessed.\n+These options are:\n+\n+@table @code\n+@cindex -I- option\n+@cindex options, -I-\n+@item -I-\n+@cindex -Idir option\n+@cindex options, -Idir\n+@item -I@var{dir}\n+@cindex directory, search paths for inclusion\n+@cindex inclusion, directory search paths for\n+@cindex search paths, for included files\n+@cindex paths, search\n+These affect interpretation of the @code{INCLUDE} directive\n+(as well as of the @code{#include} directive of the @code{cpp}\n+preprocessor).\n+\n+Note that @samp{-I@var{dir}} must be specified @emph{without} any\n+spaces between @samp{-I} and the directory name---that is,\n+@samp{-Ifoo/bar} is valid, but @samp{-I foo/bar}\n+is rejected by the @code{g77} compiler (though the preprocessor supports\n+the latter form).\n+@c this is due to toplev.c's inflexible option processing\n+Also note that the general behavior of @samp{-I} and\n+@code{INCLUDE} is pretty much the same as of @samp{-I} with\n+@code{#include} in the @code{cpp} preprocessor, with regard to\n+looking for @file{header.gcc} files and other such things.\n+\n+@xref{Directory Options,,Options for Directory Search,\n+gcc,Using and Porting GNU CC}, for information on the @samp{-I} option.\n+@end table\n+\n+@node Code Gen Options\n+@section Options for Code Generation Conventions\n+@cindex code generation, conventions\n+@cindex options, code generation\n+@cindex run-time, options\n+\n+These machine-independent options control the interface conventions\n+used in code generation.\n+\n+Most of them have both positive and negative forms; the negative form\n+of @samp{-ffoo} would be @samp{-fno-foo}.  In the table below, only\n+one of the forms is listed---the one which is not the default.  You\n+can figure out the other form by either removing @samp{no-} or adding\n+it.\n+\n+@table @code\n+@cindex -fno-automatic option\n+@cindex options, -fno-automatic\n+@item -fno-automatic\n+@cindex SAVE statement\n+@cindex statements, SAVE\n+Treat each program unit as if the @code{SAVE} statement was specified\n+for every local variable and array referenced in it.\n+Does not affect common blocks.\n+(Some Fortran compilers provide this option under\n+the name @samp{-static}.)\n+\n+@cindex -finit-local-zero option\n+@cindex options, -finit-local-zero\n+@item -finit-local-zero\n+@cindex DATA statement\n+@cindex statements, DATA\n+@cindex initialization, of local variables\n+@cindex variables, initialization of\n+@cindex uninitialized variables\n+@cindex variables, uninitialized\n+Specify that variables and arrays that are local to a program unit\n+(not in a common block and not passed as an argument) are to be initialized\n+to binary zeros.\n+\n+Since there is a run-time penalty for initialization of variables\n+that are not given the @code{SAVE} attribute, it might be a\n+good idea to also use @samp{-fno-automatic} with @samp{-finit-local-zero}.\n+\n+@cindex -fno-f2c option\n+@cindex options, -fno-f2c\n+@item -fno-f2c\n+@cindex @code{f2c} compatibility\n+@cindex compatibility, @code{f2c}\n+Do not generate code designed to be compatible with code generated\n+by @code{f2c}; use the GNU calling conventions instead.\n+\n+The @code{f2c} calling conventions require functions that return\n+type @code{REAL(KIND=1)} to actually return the C type @code{double},\n+and functions that return type @code{COMPLEX} to return the\n+values via an extra argument in the calling sequence that points\n+to where to store the return value.\n+Under the GNU calling conventions, such functions simply return\n+their results as they would in GNU C---@code{REAL(KIND=1)} functions\n+return the C type @code{float}, and @code{COMPLEX} functions\n+return the GNU C type @code{complex} (or its @code{struct}\n+equivalent).\n+\n+This does not affect the generation of code that interfaces with the\n+@code{libg2c} library.\n+\n+However, because the @code{libg2c} library uses @code{f2c}\n+calling conventions, @code{g77} rejects attempts to pass\n+intrinsics implemented by routines in this library as actual\n+arguments when @samp{-fno-f2c} is used, to avoid bugs when\n+they are actually called by code expecting the GNU calling\n+conventions to work.\n+\n+For example, @samp{INTRINSIC ABS;CALL FOO(ABS)} is\n+rejected when @samp{-fno-f2c} is in force.\n+(Future versions of the @code{g77} run-time library might\n+offer routines that provide GNU-callable versions of the\n+routines that implement the @code{f2c}-callable intrinsics\n+that may be passed as actual arguments, so that\n+valid programs need not be rejected when @samp{-fno-f2c}\n+is used.)\n+\n+@strong{Caution:} If @samp{-fno-f2c} is used when compiling any\n+source file used in a program, it must be used when compiling\n+@emph{all} Fortran source files used in that program.\n+\n+@c seems kinda dumb to tell people about an option they can't use -- jcb\n+@c then again, we want users building future-compatible libraries with it.\n+@cindex -ff2c-library option\n+@cindex options, -ff2c-library\n+@item -ff2c-library\n+Specify that use of @code{libg2c} (or the original @code{libf2c})\n+is required.\n+This is the default for the current version of @code{g77}.\n+\n+Currently it is not\n+valid to specify @samp{-fno-f2c-library}.\n+This option is provided so users can specify it in shell\n+scripts that build programs and libraries that require the\n+@code{libf2c} library, even when being compiled by future\n+versions of @code{g77} that might otherwise default to\n+generating code for an incompatible library.\n+\n+@cindex -fno-underscoring option\n+@cindex options, -fno-underscoring\n+@item -fno-underscoring\n+@cindex underscore\n+@cindex symbol names, underscores\n+@cindex transforming symbol names\n+@cindex symbol names, transforming\n+Do not transform names of entities specified in the Fortran\n+source file by appending underscores to them.\n+\n+With @samp{-funderscoring} in effect, @code{g77} appends two underscores\n+to names with underscores and one underscore to external names with\n+no underscores.  (@code{g77} also appends two underscores to internal\n+names with underscores to avoid naming collisions with external names.\n+The @samp{-fno-second-underscore} option disables appending of the\n+second underscore in all cases.)\n+\n+This is done to ensure compatibility with code produced by many\n+UNIX Fortran compilers, including @code{f2c}, which perform the\n+same transformations.\n+\n+Use of @samp{-fno-underscoring} is not recommended unless you are\n+experimenting with issues such as integration of (GNU) Fortran into\n+existing system environments (vis-a-vis existing libraries, tools, and\n+so on).\n+\n+For example, with @samp{-funderscoring}, and assuming other defaults like\n+@samp{-fcase-lower} and that @samp{j()} and @samp{max_count()} are\n+external functions while @samp{my_var} and @samp{lvar} are local variables,\n+a statement like\n+\n+@smallexample\n+I = J() + MAX_COUNT (MY_VAR, LVAR)\n+@end smallexample\n+\n+@noindent\n+is implemented as something akin to:\n+\n+@smallexample\n+i = j_() + max_count__(&my_var__, &lvar);\n+@end smallexample\n+\n+With @samp{-fno-underscoring}, the same statement is implemented as:\n+\n+@smallexample\n+i = j() + max_count(&my_var, &lvar);\n+@end smallexample\n+\n+Use of @samp{-fno-underscoring} allows direct specification of\n+user-defined names while debugging and when interfacing @code{g77}-compiled\n+code with other languages.\n+\n+Note that just because the names match does @emph{not} mean that the\n+interface implemented by @code{g77} for an external name matches the\n+interface implemented by some other language for that same name.\n+That is, getting code produced by @code{g77} to link to code produced\n+by some other compiler using this or any other method can be only a\n+small part of the overall solution---getting the code generated by\n+both compilers to agree on issues other than naming can require\n+significant effort, and, unlike naming disagreements, linkers normally\n+cannot detect disagreements in these other areas.\n+\n+Also, note that with @samp{-fno-underscoring}, the lack of appended\n+underscores introduces the very real possibility that a user-defined\n+external name will conflict with a name in a system library, which\n+could make finding unresolved-reference bugs quite difficult in some\n+cases---they might occur at program run time, and show up only as\n+buggy behavior at run time.\n+\n+In future versions of @code{g77}, we hope to improve naming and linking\n+issues so that debugging always involves using the names as they appear\n+in the source, even if the names as seen by the linker are mangled to\n+prevent accidental linking between procedures with incompatible\n+interfaces.\n+\n+@cindex -fno-second-underscore option\n+@cindex options, -fno-second-underscore\n+@item -fno-second-underscore\n+@cindex underscore\n+@cindex symbol names, underscores\n+@cindex transforming symbol names\n+@cindex symbol names, transforming\n+Do not append a second underscore to names of entities specified\n+in the Fortran source file.\n+\n+This option has no effect if @samp{-fno-underscoring} is\n+in effect.\n+\n+Otherwise, with this option, an external name such as @samp{MAX_COUNT}\n+is implemented as a reference to the link-time external symbol\n+@samp{max_count_}, instead of @samp{max_count__}.\n+\n+@cindex -fno-ident option\n+@cindex options, -fno-ident\n+@item -fno-ident\n+Ignore the @samp{#ident} directive.\n+\n+@cindex -fzeros option\n+@cindex options, -fzeros\n+@item -fzeros\n+Treat initial values of zero as if they were any other value.\n+\n+As of version 0.5.18, @code{g77} normally treats @code{DATA} and\n+other statements that are used to specify initial values of zero\n+for variables and arrays as if no values were actually specified,\n+in the sense that no diagnostics regarding multiple initializations\n+are produced.\n+\n+This is done to speed up compiling of programs that initialize\n+large arrays to zeros.\n+\n+Use @samp{-fzeros} to revert to the simpler, slower behavior\n+that can catch multiple initializations by keeping track of\n+all initializations, zero or otherwise.\n+\n+@emph{Caution:} Future versions of @code{g77} might disregard this option\n+(and its negative form, the default) or interpret it somewhat\n+differently.\n+The interpretation changes will affect only non-standard\n+programs; standard-conforming programs should not be affected.\n+\n+@cindex -femulate-complex option\n+@cindex options, -femulate-complex\n+@item -femulate-complex\n+Implement @code{COMPLEX} arithmetic via emulation,\n+instead of using the facilities of\n+the @code{gcc} back end that provide direct support of\n+@code{complex} arithmetic.\n+\n+(@code{gcc} had some bugs in its back-end support\n+for @code{complex} arithmetic, due primarily to the support not being\n+completed as of version 2.8.1 and @code{egcs} 1.1.2.)\n+\n+Use @samp{-femulate-complex} if you suspect code-generation bugs,\n+or experience compiler crashes,\n+that might result from @code{g77} using the @code{COMPLEX} support\n+in the @code{gcc} back end.\n+If using that option fixes the bugs or crashes you are seeing,\n+that indicates a likely @code{g77} bugs\n+(though, all compiler crashes are considered bugs),\n+so, please report it.\n+(Note that the known bugs, now believed fixed, produced compiler crashes\n+rather than causing the generation of incorrect code.)\n+\n+Use of this option should not affect how Fortran code compiled\n+by @code{g77} works in terms of its interfaces to other code,\n+e.g. that compiled by @code{f2c}.\n+\n+@emph{Caution:} Future versions of @code{g77} might ignore both forms\n+of this option.\n+\n+@cindex -falias-check option\n+@cindex options, -falias-check\n+@cindex -fargument-alias option\n+@cindex options, -fargument-alias\n+@cindex -fargument-noalias option\n+@cindex options, -fargument-noalias\n+@cindex -fno-argument-noalias-global option\n+@cindex options, -fno-argument-noalias-global\n+@item -falias-check\n+@item -fargument-alias\n+@item -fargument-noalias\n+@item -fno-argument-noalias-global\n+@emph{Version info:}\n+These options are not supported by\n+versions of @code{g77} based on @code{gcc} version 2.8.\n+\n+These options specify to what degree aliasing\n+(overlap)\n+is permitted between\n+arguments (passed as pointers) and @code{COMMON} (external, or\n+public) storage.\n+\n+The default for Fortran code, as mandated by the FORTRAN 77 and\n+Fortran 90 standards, is @samp{-fargument-noalias-global}.\n+The default for code written in the C language family is\n+@samp{-fargument-alias}.\n+\n+Note that, on some systems, compiling with @samp{-fforce-addr} in\n+effect can produce more optimal code when the default aliasing\n+options are in effect (and when optimization is enabled).\n+\n+@xref{Aliasing Assumed To Work}, for detailed information on the implications\n+of compiling Fortran code that depends on the ability to alias dummy\n+arguments.\n+\n+@cindex -fno-globals option\n+@cindex options, -fno-globals\n+@item -fno-globals\n+@cindex global names, warning\n+@cindex warnings, global names\n+@cindex in-line code\n+@cindex compilation, in-line\n+Disable diagnostics about inter-procedural\n+analysis problems, such as disagreements about the\n+type of a function or a procedure's argument,\n+that might cause a compiler crash when attempting\n+to inline a reference to a procedure within a\n+program unit.\n+(The diagnostics themselves are still produced, but\n+as warnings, unless @samp{-Wno-globals} is specified,\n+in which case no relevant diagnostics are produced.)\n+\n+Further, this option disables such inlining, to\n+avoid compiler crashes resulting from incorrect\n+code that would otherwise be diagnosed.\n+\n+As such, this option might be quite useful when\n+compiling existing, ``working'' code that happens\n+to have a few bugs that do not generally show themselves,\n+but which @code{g77} diagnoses.\n+\n+Use of this option therefore has the effect of\n+instructing @code{g77} to behave more like it did\n+up through version 0.5.19.1, when it paid little or\n+no attention to disagreements between program units\n+about a procedure's type and argument information,\n+and when it performed no inlining of procedures\n+(except statement functions).\n+\n+Without this option, @code{g77} defaults to performing\n+the potentially inlining procedures as it started doing\n+in version 0.5.20, but as of version 0.5.21, it also\n+diagnoses disagreements that might cause such inlining\n+to crash the compiler as (fatal) errors,\n+and warns about similar disagreements\n+that are currently believed to not\n+likely to result in the compiler later crashing\n+or producing incorrect code.\n+\n+@cindex -fflatten-arrays option\n+@item -fflatten-arrays\n+@cindex array performance\n+@cindex arrays, flattening\n+Use back end's C-like constructs\n+(pointer plus offset)\n+instead of its @code{ARRAY_REF} construct\n+to handle all array references.\n+\n+@emph{Note:} This option is not supported.\n+It is intended for use only by @code{g77} developers,\n+to evaluate code-generation issues.\n+It might be removed at any time.\n+\n+@cindex -fbounds-check option\n+@cindex -ffortran-bounds-check option\n+@item -fbounds-check\n+@itemx -ffortran-bounds-check\n+@cindex bounds checking\n+@cindex range checking\n+@cindex array bounds checking\n+@cindex subscript checking\n+@cindex substring checking\n+@cindex checking subscripts\n+@cindex checking substrings\n+Enable generation of run-time checks for array subscripts\n+and substring start and end points\n+against the (locally) declared minimum and maximum values.\n+\n+The current implementation uses the @code{libf2c}\n+library routine @code{s_rnge} to print the diagnostic.\n+\n+However, whereas @code{f2c} generates a single check per\n+reference for a multi-dimensional array, of the computed\n+offset against the valid offset range (0 through the size of the array),\n+@code{g77} generates a single check per @emph{subscript} expression.\n+This catches some cases of potential bugs that @code{f2c} does not,\n+such as references to below the beginning of an assumed-size array.\n+\n+@code{g77} also generates checks for @code{CHARACTER} substring references,\n+something @code{f2c} currently does not do.\n+\n+Use the new @samp{-ffortran-bounds-check} option\n+to specify bounds-checking for only the Fortran code you are compiling,\n+not necessarily for code written in other languages.\n+\n+@emph{Note:} To provide more detailed information on the offending subscript,\n+@code{g77} provides the @code{libg2c} run-time library routine @code{s_rnge}\n+with somewhat differently-formatted information.\n+Here's a sample diagnostic:\n+\n+@smallexample\n+Subscript out of range on file line 4, procedure rnge.f/bf.\n+Attempt to access the -6-th element of variable b[subscript-2-of-2].\n+Aborted\n+@end smallexample\n+\n+The above message indicates that the offending source line is\n+line 4 of the file @file{rnge.f},\n+within the program unit (or statement function) named @samp{bf}.\n+The offended array is named @samp{b}.\n+The offended array dimension is the second for a two-dimensional array,\n+and the offending, computed subscript expression was @samp{-6}.\n+\n+For a @code{CHARACTER} substring reference, the second line has\n+this appearance:\n+\n+@smallexample\n+Attempt to access the 11-th element of variable a[start-substring].\n+@end smallexample\n+\n+This indicates that the offended @code{CHARACTER} variable or array\n+is named @samp{a},\n+the offended substring position is the starting (leftmost) position,\n+and the offending substring expression is @samp{11}.\n+\n+(Though the verbage of @code{s_rnge} is not ideal\n+for the purpose of the @code{g77} compiler,\n+the above information should provide adequate diagnostic abilities\n+to it users.)\n+@end table\n+\n+@xref{Code Gen Options,,Options for Code Generation Conventions,\n+gcc,Using and Porting GNU CC}, for information on more options\n+offered by the GBE\n+shared by @code{g77}, @code{gcc}, and other GNU compilers.\n+\n+Some of these do @emph{not} work when compiling programs written in Fortran:\n+\n+@table @code\n+@cindex -fpcc-struct-return option\n+@cindex options, -fpcc-struct-return\n+@item -fpcc-struct-return\n+@cindex -freg-struct-return option\n+@cindex options, -freg-struct-return\n+@item -freg-struct-return\n+You should not use these except strictly the same way as you\n+used them to build the version of @code{libg2c} with which\n+you will be linking all code compiled by @code{g77} with the\n+same option.\n+\n+@cindex -fshort-double option\n+@cindex options, -fshort-double\n+@item -fshort-double\n+This probably either has no effect on Fortran programs, or\n+makes them act loopy.\n+\n+@cindex -fno-common option\n+@cindex options, -fno-common\n+@item -fno-common\n+Do not use this when compiling Fortran programs,\n+or there will be Trouble.\n+\n+@cindex -fpack-struct option\n+@cindex options, -fpack-struct\n+@item -fpack-struct\n+This probably will break any calls to the @code{libg2c} library,\n+at the very least, even if it is built with the same option.\n+@end table\n+\n+@node Environment Variables\n+@section Environment Variables Affecting GNU Fortran\n+@cindex environment variables\n+\n+GNU Fortran currently does not make use of any environment\n+variables to control its operation above and beyond those\n+that affect the operation of @code{gcc}.\n+\n+@xref{Environment Variables,,Environment Variables Affecting GNU CC,\n+gcc,Using and Porting GNU CC}, for information on environment\n+variables."}]}