{"sha": "89741abb8de53230e18c5b0da69dabb008898119", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3NDFhYmI4ZGU1MzIzMGUxOGM1YjBkYTY5ZGFiYjAwODg5ODExOQ==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@linux.org.pl", "date": "2000-12-11T12:46:57Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-12-11T12:46:57Z"}, "message": "avr.c (compare_condition, [...]): New functions.\n\n\t* config/avr/avr.c (compare_condition, compare_sign_p): New functions.\n\t(compare_diff_p, compare_eq_p): Call compare_condition.\n\t(out_tsthi, out_tstsi): Call compare_sign_p.\n\t(avr_progmem_p): Check for error_mark_node.\n\nFrom-SVN: r38190", "tree": {"sha": "dbbb383d3f8229ddbe9d463a55bd94bfdfefe270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbbb383d3f8229ddbe9d463a55bd94bfdfefe270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89741abb8de53230e18c5b0da69dabb008898119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89741abb8de53230e18c5b0da69dabb008898119", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89741abb8de53230e18c5b0da69dabb008898119", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89741abb8de53230e18c5b0da69dabb008898119/comments", "author": null, "committer": null, "parents": [{"sha": "0e41aa7ac45bbfe4850ec38a5523c3aecfeefd8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e41aa7ac45bbfe4850ec38a5523c3aecfeefd8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e41aa7ac45bbfe4850ec38a5523c3aecfeefd8c"}], "stats": {"total": 62, "additions": 44, "deletions": 18}, "files": [{"sha": "728a444d13fcd44be48036976d85b396ddca8157", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89741abb8de53230e18c5b0da69dabb008898119/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89741abb8de53230e18c5b0da69dabb008898119/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89741abb8de53230e18c5b0da69dabb008898119", "patch": "@@ -1,3 +1,10 @@\n+2000-12-05  Marek Michalkiewicz  <marekm@linux.org.pl>\n+\n+\t* config/avr/avr.c (compare_condition, compare_sign_p): New functions.\n+\t(compare_diff_p, compare_eq_p): Call compare_condition.\n+\t(out_tsthi, out_tstsi): Call compare_sign_p.\n+\t(avr_progmem_p): Check for error_mark_node.\n+\n 2000-12-11  Neil Booth  <neilb@earthling.net>\n \n         * cpperror.c (print_location): New function."}, {"sha": "3de044030f13f323b54341fde827ab266de00102", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 37, "deletions": 18, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89741abb8de53230e18c5b0da69dabb008898119/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89741abb8de53230e18c5b0da69dabb008898119/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=89741abb8de53230e18c5b0da69dabb008898119", "patch": "@@ -52,6 +52,8 @@ static const char * cond_string    PARAMS ((enum rtx_code));\n static int    avr_num_arg_regs     PARAMS ((enum machine_mode, tree));\n static int    out_adj_frame_ptr    PARAMS ((FILE *, int));\n static int    out_set_stack_ptr    PARAMS ((FILE *, int, int));\n+static RTX_CODE compare_condition  PARAMS ((rtx insn));\n+static int    compare_sign_p       PARAMS ((rtx insn));\n static int    reg_was_0            PARAMS ((rtx insn, rtx op));\n static int    io_address_p         PARAMS ((rtx x, int size));\n void          debug_hard_reg_set   PARAMS ((HARD_REG_SET set));\n@@ -2606,39 +2608,52 @@ frame_pointer_required_p ()\n   \t  || get_frame_size () > 0);\n }\n \n-/* Return 1 if the next insn is a JUMP_INSN with condition (GT,LE,GTU,LTU)  */\n+/* Returns the condition of compare insn INSN, or UNKNOWN.  */\n \n-int\n-compare_diff_p (insn)\n+static RTX_CODE\n+compare_condition (insn)\n      rtx insn;\n {\n   rtx next = next_real_insn (insn);\n   RTX_CODE cond = UNKNOWN;\n-  if (GET_CODE (next) == JUMP_INSN)\n+  if (next && GET_CODE (next) == JUMP_INSN)\n     {\n       rtx pat = PATTERN (next);\n       rtx src = SET_SRC (pat);\n-      rtx t = XEXP (src,0);\n+      rtx t = XEXP (src, 0);\n       cond = GET_CODE (t);\n     }\n+  return cond;\n+}\n+\n+/* Returns nonzero if INSN is a tst insn that only tests the sign.  */\n+\n+static int\n+compare_sign_p (insn)\n+     rtx insn;\n+{\n+  RTX_CODE cond = compare_condition (insn);\n+  return (cond == GE || cond == LT);\n+}\n+\n+/* Returns nonzero if the next insn is a JUMP_INSN with a condition\n+   that needs to be swapped (GT, GTU, LE, LEU).  */\n+\n+int\n+compare_diff_p (insn)\n+     rtx insn;\n+{\n+  RTX_CODE cond = compare_condition (insn);\n   return (cond == GT || cond == GTU || cond == LE || cond == LEU) ? cond : 0;\n }\n \n-/* Returns nonzero if INSN is a compare insn with the EQ or NE condition */\n+/* Returns nonzero if INSN is a compare insn with the EQ or NE condition.  */\n \n int\n compare_eq_p (insn)\n      rtx insn;\n {\n-  rtx next = next_real_insn (insn);\n-  RTX_CODE cond = UNKNOWN;\n-  if (GET_CODE (next) == JUMP_INSN)\n-    {\n-      rtx pat = PATTERN (next);\n-      rtx src = SET_SRC (pat);\n-      rtx t = XEXP (src,0);\n-      cond = GET_CODE (t);\n-    }\n+  RTX_CODE cond = compare_condition (insn);\n   return (cond == EQ || cond == NE);\n }\n \n@@ -2650,12 +2665,13 @@ out_tsthi (insn, l)\n      rtx insn;\n      int *l;\n {\n-  if (!compare_eq_p (insn) && !compare_diff_p (insn))\n+  if (compare_sign_p (insn))\n     {\n       if (l) *l = 1;\n       return AS1 (tst,%B0);\n     }\n-  if (reg_unused_after (insn, SET_SRC (PATTERN (insn))))\n+  if (reg_unused_after (insn, SET_SRC (PATTERN (insn)))\n+      && compare_eq_p (insn))\n     {\n       /* faster than sbiw if we can clobber the operand */\n       if (l) *l = 1;\n@@ -2679,7 +2695,7 @@ out_tstsi (insn, l)\n      rtx insn;\n      int *l;\n {\n-  if (!compare_eq_p (insn) && !compare_diff_p(insn))\n+  if (compare_sign_p (insn))\n     {\n       if (l) *l = 1;\n       return AS1 (tst,%D0);\n@@ -4655,6 +4671,9 @@ avr_progmem_p (decl)\n     a = TREE_TYPE(a);\n   while (TREE_CODE (a) == ARRAY_TYPE);\n \n+  if (a == error_mark_node)\n+    return 0;\n+\n   if (NULL_TREE != lookup_attribute (\"progmem\", TYPE_ATTRIBUTES (a)))\n     return 1;\n   "}]}