{"sha": "4fef8379d7e4587d4ae77e5b82cf47498da23dda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZlZjgzNzlkN2U0NTg3ZDRhZTc3ZTViODJjZjQ3NDk4ZGEyM2RkYQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:37:49Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:37:49Z"}, "message": "Change use to type-based pool allocator in c-format.c.\n\n\t* c-format.c (check_format_arg):Use new type-based pool allocator.\n\t(check_format_info_main) Likewise.\n\nFrom-SVN: r223949", "tree": {"sha": "e795978f40ee2d7a08b4c622f8095684c6972445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e795978f40ee2d7a08b4c622f8095684c6972445"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fef8379d7e4587d4ae77e5b82cf47498da23dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fef8379d7e4587d4ae77e5b82cf47498da23dda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fef8379d7e4587d4ae77e5b82cf47498da23dda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fef8379d7e4587d4ae77e5b82cf47498da23dda/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1f5ce4830dc518e1d29d0cfc9be8502ea66fe27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1f5ce4830dc518e1d29d0cfc9be8502ea66fe27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1f5ce4830dc518e1d29d0cfc9be8502ea66fe27"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "1af4e1521c56e26e25d8be3f4ce6d1bc851a15c2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fef8379d7e4587d4ae77e5b82cf47498da23dda/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fef8379d7e4587d4ae77e5b82cf47498da23dda/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4fef8379d7e4587d4ae77e5b82cf47498da23dda", "patch": "@@ -1,3 +1,8 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-format.c (check_format_arg):Use new type-based pool allocator.\n+\t(check_format_info_main) Likewise.\n+\n 2015-05-31  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (is_tagged_type): Test for TYPE_METHODS on main variant."}, {"sha": "a6c2500e16e5de30df118597b2a651e87e3b2dd3", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fef8379d7e4587d4ae77e5b82cf47498da23dda/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fef8379d7e4587d4ae77e5b82cf47498da23dda/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=4fef8379d7e4587d4ae77e5b82cf47498da23dda", "patch": "@@ -191,7 +191,7 @@ handle_format_arg_attribute (tree *node, tree ARG_UNUSED (name),\n   if (prototype_p (type))\n     {\n       /* The format arg can be any string reference valid for the language and\n-         target.  We cannot be more specific in this case.  */\n+\ttarget.  We cannot be more specific in this case.  */\n       if (!check_format_string (type, format_num, flags, no_add_attrs, -1))\n \treturn NULL_TREE;\n     }\n@@ -1031,7 +1031,8 @@ static void check_format_arg (void *, tree, unsigned HOST_WIDE_INT);\n static void check_format_info_main (format_check_results *,\n \t\t\t\t    function_format_info *,\n \t\t\t\t    const char *, int, tree,\n-                                    unsigned HOST_WIDE_INT, alloc_pool);\n+\t\t\t\t    unsigned HOST_WIDE_INT,\n+\t\t\t\t    pool_allocator<format_wanted_type> &);\n \n static void init_dollar_format_checking (int, tree);\n static int maybe_read_dollar_number (const char **, int,\n@@ -1518,7 +1519,6 @@ check_format_arg (void *ctx, tree format_tree,\n   const char *format_chars;\n   tree array_size = 0;\n   tree array_init;\n-  alloc_pool fwt_pool;\n \n   if (TREE_CODE (format_tree) == VAR_DECL)\n     {\n@@ -1587,7 +1587,7 @@ check_format_arg (void *ctx, tree format_tree,\n     {\n       bool objc_str = (info->format_type == gcc_objc_string_format_type);\n       /* We cannot examine this string here - but we can check that it is\n-         a valid type.  */\n+\t a valid type.  */\n       if (TREE_CODE (format_tree) != CONST_DECL\n \t  || !((objc_str && objc_string_ref_type_p (TREE_TYPE (format_tree)))\n \t\t|| (*targetcm.string_object_ref_type_p) \n@@ -1605,9 +1605,9 @@ check_format_arg (void *ctx, tree format_tree,\n \t  ++arg_num;\n \t}\n       /* So, we have a valid literal string object and one or more params.\n-         We need to use an external helper to parse the string into format\n-         info.  For Objective-C variants we provide the resource within the\n-         objc tree, for target variants, via a hook.  */\n+\t We need to use an external helper to parse the string into format\n+\t info.  For Objective-C variants we provide the resource within the\n+\t objc tree, for target variants, via a hook.  */\n       if (objc_str)\n \tobjc_check_format_arg (format_tree, params);\n       else if (targetcm.check_string_object_format_arg)\n@@ -1694,11 +1694,9 @@ check_format_arg (void *ctx, tree format_tree,\n      will decrement it if it finds there are extra arguments, but this way\n      need not adjust it for every return.  */\n   res->number_other++;\n-  fwt_pool = create_alloc_pool (\"format_wanted_type pool\",\n-                                sizeof (format_wanted_type), 10);\n+  pool_allocator <format_wanted_type> fwt_pool (\"format_wanted_type pool\", 10);\n   check_format_info_main (res, info, format_chars, format_length,\n-                          params, arg_num, fwt_pool);\n-  free_alloc_pool (fwt_pool);\n+\t\t\t  params, arg_num, fwt_pool);\n }\n \n \n@@ -1713,7 +1711,8 @@ static void\n check_format_info_main (format_check_results *res,\n \t\t\tfunction_format_info *info, const char *format_chars,\n \t\t\tint format_length, tree params,\n-                        unsigned HOST_WIDE_INT arg_num, alloc_pool fwt_pool)\n+\t\t\tunsigned HOST_WIDE_INT arg_num,\n+\t\t\tpool_allocator<format_wanted_type> &fwt_pool)\n {\n   const char *orig_format_chars = format_chars;\n   tree first_fillin_param = params;\n@@ -2424,8 +2423,7 @@ check_format_info_main (format_check_results *res,\n \t      fci = fci->chain;\n \t      if (fci)\n \t\t{\n-                  wanted_type_ptr = (format_wanted_type *)\n-                      pool_alloc (fwt_pool);\n+\t\t  wanted_type_ptr = fwt_pool.allocate ();\n \t\t  arg_num++;\n \t\t  wanted_type = *fci->types[length_chars_val].type;\n \t\t  wanted_type_name = fci->types[length_chars_val].name;"}]}