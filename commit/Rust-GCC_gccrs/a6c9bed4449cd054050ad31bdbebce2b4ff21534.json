{"sha": "a6c9bed4449cd054050ad31bdbebce2b4ff21534", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZjOWJlZDQ0NDljZDA1NDA1MGFkMzFiZGJlYmNlMmI0ZmYyMTUzNA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2003-06-12T21:38:46Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2003-06-12T21:38:46Z"}, "message": "rs6000.c (function_arg): Always split vectors for e500 if it's a stdarg function.\n\n2003-06-12  Aldy Hernandez  <aldyh@redhat.com>\n\n\t* config/rs6000/rs6000.c (function_arg): Always split vectors for\n\te500 if it's a stdarg function.\n\t(function_arg_advance): Advance 2 registers for vectors in a\n\tstdarg function.\n\t(init_cumulative_args): Initialize stdarg.\n\t(rs6000_spe_function_arg): New.\n\n\t* config/rs6000/rs6000.h (rs6000_args): Add stdarg.\n\nFrom-SVN: r67854", "tree": {"sha": "19a3858d595ea420f9f935de48a649e50b0bb55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a3858d595ea420f9f935de48a649e50b0bb55d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6c9bed4449cd054050ad31bdbebce2b4ff21534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c9bed4449cd054050ad31bdbebce2b4ff21534", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6c9bed4449cd054050ad31bdbebce2b4ff21534", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c9bed4449cd054050ad31bdbebce2b4ff21534/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dcc01f3f16e86dd0c4c20252b57ce803da7ca90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dcc01f3f16e86dd0c4c20252b57ce803da7ca90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dcc01f3f16e86dd0c4c20252b57ce803da7ca90"}], "stats": {"total": 95, "additions": 68, "deletions": 27}, "files": [{"sha": "99e786b4850a8514593107f9156e96e38f9232b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c9bed4449cd054050ad31bdbebce2b4ff21534/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c9bed4449cd054050ad31bdbebce2b4ff21534/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6c9bed4449cd054050ad31bdbebce2b4ff21534", "patch": "@@ -1,3 +1,14 @@\n+2003-06-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (function_arg): Always split vectors for\n+\te500 if it's a stdarg function.\n+\t(function_arg_advance): Advance 2 registers for vectors in a\n+\tstdarg function.\n+\t(init_cumulative_args): Initialize stdarg.\n+\t(rs6000_spe_function_arg): New.\n+\n+\t* config/rs6000/rs6000.h (rs6000_args): Add stdarg.\n+\n 2003-06-12  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/rs6000.h (MODES_TIEABLE_P): Add SPE vectors."}, {"sha": "33936b8d26077f9161007de8de67462d71787dca", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 56, "deletions": 27, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c9bed4449cd054050ad31bdbebce2b4ff21534/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c9bed4449cd054050ad31bdbebce2b4ff21534/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a6c9bed4449cd054050ad31bdbebce2b4ff21534", "patch": "@@ -314,6 +314,7 @@ static inline int rs6000_tls_symbol_ref_1 PARAMS ((rtx *, void *));\n static const char *rs6000_get_some_local_dynamic_name PARAMS ((void));\n static int rs6000_get_some_local_dynamic_name_1 PARAMS ((rtx *, void *));\n static rtx rs6000_complex_function_value (enum machine_mode);\n+static rtx rs6000_spe_function_arg (CUMULATIVE_ARGS *, enum machine_mode, tree);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n@@ -3652,6 +3653,10 @@ init_cumulative_args (cum, fntype, libname, incoming)\n   cum->prototype = (fntype && TYPE_ARG_TYPES (fntype));\n   cum->call_cookie = CALL_NORMAL;\n   cum->sysv_gregno = GP_ARG_MIN_REG;\n+  cum->stdarg = fntype\n+    && (TYPE_ARG_TYPES (fntype) != 0\n+\t&& (TREE_VALUE (tree_last  (TYPE_ARG_TYPES (fntype)))\n+\t    != void_type_node));\n \n   if (incoming)\n     cum->nargs_prototype = 1000;\t\t/* don't return a PARALLEL */\n@@ -3759,7 +3764,8 @@ function_arg_advance (cum, mode, type, named)\n \tcum->words += RS6000_ARG_SIZE (mode, type);\n     }\n   else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode)\n-\t   && named && cum->sysv_gregno <= GP_ARG_MAX_REG)\n+\t   && !cum->stdarg\n+\t   && cum->sysv_gregno <= GP_ARG_MAX_REG)\n     cum->sysv_gregno++;\n   else if (DEFAULT_ABI == ABI_V4)\n     {\n@@ -3838,7 +3844,43 @@ function_arg_advance (cum, mode, type, named)\n \t}\n     }\n }\n-\f\n+\n+/* Determine where to put a SIMD argument on the SPE.  */\n+static rtx\n+rs6000_spe_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type)\n+{\n+  if (cum->stdarg)\n+    {\n+      int gregno = cum->sysv_gregno;\n+      int n_words = RS6000_ARG_SIZE (mode, type);\n+\n+      /* SPE vectors are put in odd registers.  */\n+      if (n_words == 2 && (gregno & 1) == 0)\n+\tgregno += 1;\n+\n+      if (gregno + n_words - 1 <= GP_ARG_MAX_REG)\n+\t{\n+\t  rtx r1, r2;\n+\t  enum machine_mode m = SImode;\n+\n+\t  r1 = gen_rtx_REG (m, gregno);\n+\t  r1 = gen_rtx_EXPR_LIST (m, r1, const0_rtx);\n+\t  r2 = gen_rtx_REG (m, gregno + 1);\n+\t  r2 = gen_rtx_EXPR_LIST (m, r2, GEN_INT (4));\n+\t  return gen_rtx_PARALLEL (mode, gen_rtvec (2, r1, r2));\n+\t}\n+      else\n+\treturn NULL;\n+    }\n+  else\n+    {\n+      if (cum->sysv_gregno <= GP_ARG_MAX_REG)\n+\treturn gen_rtx_REG (mode, cum->sysv_gregno);\n+      else\n+\treturn NULL;\n+    }\n+}\n+\n /* Determine where to put an argument to a function.\n    Value is zero to push the argument on the stack,\n    or a hard register in which to store the argument.\n@@ -3901,13 +3943,8 @@ function_arg (cum, mode, type, named)\n       else\n \treturn NULL;\n     }\n-  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode) && named)\n-    {\n-      if (cum->sysv_gregno <= GP_ARG_MAX_REG)\n-\treturn gen_rtx_REG (mode, cum->sysv_gregno);\n-      else\n-\treturn NULL;\n-    }\n+  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode))\n+    return rs6000_spe_function_arg (cum, mode, type);\n   else if (abi == ABI_V4)\n     {\n       if (TARGET_HARD_FLOAT && TARGET_FPRS\n@@ -3923,6 +3960,14 @@ function_arg (cum, mode, type, named)\n \t  int n_words;\n \t  int gregno = cum->sysv_gregno;\n \n+\t  if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode)\n+\t      && !cum->stdarg\n+\t      && cum->sysv_gregno <= GP_ARG_MAX_REG)\n+\t    {\n+\t      cum->sysv_gregno++;\n+\t      return;\n+\t    }\n+\n \t  /* Aggregates and IEEE quad get passed by reference.  */\n \t  if ((type && AGGREGATE_TYPE_P (type))\n \t      || mode == TFmode)\n@@ -3934,25 +3979,9 @@ function_arg (cum, mode, type, named)\n \t  if (n_words == 2 && (gregno & 1) == 0)\n \t    gregno += 1;\n \n-\t  /* Long long and SPE vectors are not split between registers\n-\t     and stack.  */\n+\t  /* Long long do not split between registers and stack.  */\n \t  if (gregno + n_words - 1 <= GP_ARG_MAX_REG)\n-\t    {\n-\t      /* SPE vectors in ... get split into 2 registers.  */\n-\t      if (TARGET_SPE && TARGET_SPE_ABI\n-\t\t  && SPE_VECTOR_MODE (mode) && !named)\n-\t\t{\n-\t\t  rtx r1, r2;\n-\t\t  enum machine_mode m = SImode;\n-\n-\t\t  r1 = gen_rtx_REG (m, gregno);\n-\t\t  r1 = gen_rtx_EXPR_LIST (m, r1, const0_rtx);\n-\t\t  r2 = gen_rtx_REG (m, gregno + 1);\n-\t\t  r2 = gen_rtx_EXPR_LIST (m, r2, GEN_INT (4));\n-\t\t  return gen_rtx_PARALLEL (mode, gen_rtvec (2, r1, r2));\n-\t\t}\n-\t      return gen_rtx_REG (mode, gregno);\n-\t    }\n+\t    return gen_rtx_REG (mode, gregno);\n \t  else\n \t    return NULL;\n \t}"}, {"sha": "f0c7ef911cd717d0a2d9f29dedc2bfb5eb00df37", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c9bed4449cd054050ad31bdbebce2b4ff21534/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c9bed4449cd054050ad31bdbebce2b4ff21534/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a6c9bed4449cd054050ad31bdbebce2b4ff21534", "patch": "@@ -1725,6 +1725,7 @@ typedef struct rs6000_args\n   int nargs_prototype;\t\t/* # args left in the current prototype */\n   int orig_nargs;\t\t/* Original value of nargs_prototype */\n   int prototype;\t\t/* Whether a prototype was defined */\n+  int stdarg;\t\t\t/* Whether function is a stdarg function.  */\n   int call_cookie;\t\t/* Do special things for this call */\n   int sysv_gregno;\t\t/* next available GP register */\n } CUMULATIVE_ARGS;"}]}