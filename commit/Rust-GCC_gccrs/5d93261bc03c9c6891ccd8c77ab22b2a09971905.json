{"sha": "5d93261bc03c9c6891ccd8c77ab22b2a09971905", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5MzI2MWJjMDNjOWM2ODkxY2NkOGM3N2FiMjJiMmEwOTk3MTkwNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-17T09:53:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-17T20:04:31Z"}, "message": "c++: Fix diagnostic for binding lvalue reference to volatile rvalue [PR 100635]\n\nThe current diagnostic assumes the reference binding fails because the\nreference is non-const, but it can also fail if the rvalue is volatile.\n\nUse the current diagnostic for non-const cases, and a modified\ndiagnostic otherwise.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/100635\n\t* call.c (convert_like_internal): Print different diagnostic if\n\tthe lvalue reference is const.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/conversion/pr100635.C: New test.", "tree": {"sha": "5c51a0e81baf9fe78daa93a319f38b5682fb718b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c51a0e81baf9fe78daa93a319f38b5682fb718b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d93261bc03c9c6891ccd8c77ab22b2a09971905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d93261bc03c9c6891ccd8c77ab22b2a09971905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d93261bc03c9c6891ccd8c77ab22b2a09971905", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d93261bc03c9c6891ccd8c77ab22b2a09971905/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09867aa0ef7568012650395189b735f9a34cf9b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09867aa0ef7568012650395189b735f9a34cf9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09867aa0ef7568012650395189b735f9a34cf9b5"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "1e2d1d43184fc265a3b6182c96655e23d1f64f78", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d93261bc03c9c6891ccd8c77ab22b2a09971905/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d93261bc03c9c6891ccd8c77ab22b2a09971905/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5d93261bc03c9c6891ccd8c77ab22b2a09971905", "patch": "@@ -7900,9 +7900,13 @@ convert_like_internal (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t      \"type %qH to a value of type %qI\",\n \t\t\t      totype, next->type);\n \t\t  }\n-\t\telse\n+\t\telse if (!CP_TYPE_CONST_P (TREE_TYPE (ref_type)))\n \t\t  error_at (loc, \"cannot bind non-const lvalue reference of \"\n \t\t\t    \"type %qH to an rvalue of type %qI\", totype, extype);\n+\t\telse // extype is volatile\n+\t\t  error_at (loc, \"cannot bind lvalue reference of type \"\n+\t\t\t    \"%qH to an rvalue of type %qI\", totype,\n+\t\t\t    extype);\n \t      }\n \t    else if (!reference_compatible_p (TREE_TYPE (totype), extype))\n \t      {"}, {"sha": "58412152238ffb67bcd0e633f27858b544c33376", "filename": "gcc/testsuite/g++.dg/conversion/pr100635.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d93261bc03c9c6891ccd8c77ab22b2a09971905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fpr100635.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d93261bc03c9c6891ccd8c77ab22b2a09971905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fpr100635.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fpr100635.C?ref=5d93261bc03c9c6891ccd8c77ab22b2a09971905", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/100635\n+// { dg-do compile }\n+// { dg-additional-options \"-Wno-volatile\" { target c++2a } }\n+\n+struct S { };\n+volatile S v();\n+const volatile S& svol = v(); // { dg-error \"cannot bind lvalue reference of type 'const volatile S&' to an rvalue of type 'volatile S'\" }\n+\n+#if __cplusplus >= 201103L\n+volatile int&& declvol();\n+const volatile int& voli = declvol(); // { dg-error \"cannot bind lvalue reference of type 'const volatile int&' to an rvalue of type 'volatile int'\" \"\" { target c++11} }\n+#endif"}]}