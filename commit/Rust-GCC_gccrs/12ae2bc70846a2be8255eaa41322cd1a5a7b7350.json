{"sha": "12ae2bc70846a2be8255eaa41322cd1a5a7b7350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJhZTJiYzcwODQ2YTJiZTgyNTVlYWE0MTMyMmNkMWE1YTdiNzM1MA==", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2020-12-25T01:25:39Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-12-28T08:28:43Z"}, "message": "Fix standard name for zero/sign extend expanders\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.md (optab): New code attr.\n\t* config/i386/sse.md (<code>v32qiv32hi2): Rename to ...\n\t(<optab>v32qiv32hi2) ... this.\n\t(<code>v16qiv16hi2): Likewise.\n\t(<code>v8qiv8hi2): Likewise.\n\t(<code>v16qiv16si2): Likewise.\n\t(<code>v8qiv8si2): Likewise.\n\t(<code>v4qiv4si2): Likewise.\n\t(<code>v16hiv16si2): Likewise.\n\t(<code>v8hiv8si2): Likewise.\n\t(<code>v4hiv4si2): Likewise.\n\t(<code>v8qiv8di2): Likewise.\n\t(<code>v4qiv4di2): Likewise.\n\t(<code>v2qiv2di2): Likewise.\n\t(<code>v8hiv8di2): Likewise.\n\t(<code>v4hiv4di2): Likewise.\n\t(<code>v2hiv2di2): Likewise.\n\t(<code>v8siv8di2): Likewise.\n\t(<code>v4siv4di2): Likewise.\n\t(<code>v2siv2di2): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr92658-avx2-2.c: New test.\n\t* gcc.target/i386/pr92658-avx512bw-2.c: Likewise.\n\t* gcc.target/i386/pr92658-sse4-2.c: Likewise.", "tree": {"sha": "0bfaa34325d508f11e80defa455bc7829cf2f48c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bfaa34325d508f11e80defa455bc7829cf2f48c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12ae2bc70846a2be8255eaa41322cd1a5a7b7350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12ae2bc70846a2be8255eaa41322cd1a5a7b7350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12ae2bc70846a2be8255eaa41322cd1a5a7b7350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adfe99ad8faa4755d27c0f5981e72191f211ec7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adfe99ad8faa4755d27c0f5981e72191f211ec7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adfe99ad8faa4755d27c0f5981e72191f211ec7d"}], "stats": {"total": 660, "additions": 642, "deletions": 18}, "files": [{"sha": "d7cd3df995ce3b0677cfa0b95a8bd3c9d338be8d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=12ae2bc70846a2be8255eaa41322cd1a5a7b7350", "patch": "@@ -980,6 +980,10 @@\n ;; Used in signed and unsigned widening multiplications.\n (define_code_iterator any_extend [sign_extend zero_extend])\n \n+;; Used for representing standard name for extend\n+(define_code_attr optab [(sign_extend \"extend\")\n+\t\t\t (zero_extend \"zero_extend\")])\n+\n ;; Prefix for insn menmonic.\n (define_code_attr sgnprefix [(sign_extend \"i\") (zero_extend \"\")\n \t\t\t     (div \"i\") (udiv \"\")])"}, {"sha": "141a99d254eeaf1d0fce638f2e618d5af2afebec", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=12ae2bc70846a2be8255eaa41322cd1a5a7b7350", "patch": "@@ -17502,7 +17502,7 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_expand \"<code>v16qiv16hi2\"\n+(define_expand \"<optab>v16qiv16hi2\"\n   [(set (match_operand:V16HI 0 \"register_operand\")\n \t(any_extend:V16HI\n \t  (match_operand:V16QI 1 \"nonimmediate_operand\")))]\n@@ -17519,7 +17519,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"<code>v32qiv32hi2\"\n+(define_expand \"<optab>v32qiv32hi2\"\n   [(set (match_operand:V32HI 0 \"register_operand\")\n \t(any_extend:V32HI\n \t  (match_operand:V32QI 1 \"nonimmediate_operand\")))]\n@@ -17574,7 +17574,7 @@\n \t(any_extend:V8HI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n-(define_expand \"<code>v8qiv8hi2\"\n+(define_expand \"<optab>v8qiv8hi2\"\n   [(set (match_operand:V8HI 0 \"register_operand\")\n \t(any_extend:V8HI\n \t  (match_operand:V8QI 1 \"nonimmediate_operand\")))]\n@@ -17598,7 +17598,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"<code>v16qiv16si2\"\n+(define_expand \"<optab>v16qiv16si2\"\n   [(set (match_operand:V16SI 0 \"register_operand\")\n \t(any_extend:V16SI\n \t  (match_operand:V16QI 1 \"nonimmediate_operand\")))]\n@@ -17651,7 +17651,7 @@\n \t(any_extend:V8SI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n-(define_expand \"<code>v8qiv8si2\"\n+(define_expand \"<optab>v8qiv8si2\"\n   [(set (match_operand:V8SI 0 \"register_operand\")\n \t(any_extend:V8SI\n \t  (match_operand:V8QI 1 \"nonimmediate_operand\")))]\n@@ -17714,7 +17714,7 @@\n \t(any_extend:V4SI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4QImode, 0);\")\n \n-(define_expand \"<code>v4qiv4si2\"\n+(define_expand \"<optab>v4qiv4si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\")\n \t(any_extend:V4SI\n \t  (match_operand:V4QI 1 \"nonimmediate_operand\")))]\n@@ -17738,7 +17738,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"<code>v16hiv16si2\"\n+(define_expand \"<optab>v16hiv16si2\"\n   [(set (match_operand:V16SI 0 \"register_operand\")\n \t(any_extend:V16SI\n \t  (match_operand:V16HI 1 \"nonimmediate_operand\")))]\n@@ -17755,7 +17755,7 @@\n    (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_expand \"<code>v8hiv8si2\"\n+(define_expand \"<optab>v8hiv8si2\"\n   [(set (match_operand:V8SI 0 \"register_operand\")\n \t(any_extend:V8SI\n \t  (match_operand:V8HI 1 \"nonimmediate_operand\")))]\n@@ -17806,7 +17806,7 @@\n \t(any_extend:V4SI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4HImode, 0);\")\n \n-(define_expand \"<code>v4hiv4si2\"\n+(define_expand \"<optab>v4hiv4si2\"\n   [(set (match_operand:V4SI 0 \"register_operand\")\n \t(any_extend:V4SI\n \t  (match_operand:V4HI 1 \"nonimmediate_operand\")))]\n@@ -17864,7 +17864,7 @@\n \t(any_extend:V8DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V8QImode, 0);\")\n \n-(define_expand \"<code>v8qiv8di2\"\n+(define_expand \"<optab>v8qiv8di2\"\n   [(set (match_operand:V8DI 0 \"register_operand\")\n \t(any_extend:V8DI\n \t  (match_operand:V8QI 1 \"nonimmediate_operand\")))]\n@@ -17925,7 +17925,7 @@\n \t(any_extend:V4DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4QImode, 0);\")\n \n-(define_expand \"<code>v4qiv4di2\"\n+(define_expand \"<optab>v4qiv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\")\n \t(any_extend:V4DI\n \t  (match_operand:V4QI 1 \"nonimmediate_operand\")))]\n@@ -17953,7 +17953,7 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"<code>v2qiv2di2\"\n+(define_expand \"<optab>v2qiv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(any_extend:V2DI\n \t  (match_operand:V2QI 1 \"register_operand\")))]\n@@ -17974,7 +17974,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"<code>v8hiv8di2\"\n+(define_expand \"<optab>v8hiv8di2\"\n   [(set (match_operand:V8DI 0 \"register_operand\")\n \t(any_extend:V8DI\n \t  (match_operand:V8HI 1 \"nonimmediate_operand\")))]\n@@ -18023,7 +18023,7 @@\n \t(any_extend:V4DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V4HImode, 0);\")\n \n-(define_expand \"<code>v4hiv4di2\"\n+(define_expand \"<optab>v4hiv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\")\n \t(any_extend:V4DI\n \t  (match_operand:V4HI 1 \"nonimmediate_operand\")))]\n@@ -18084,7 +18084,7 @@\n \t(any_extend:V2DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V2HImode, 0);\")\n \n-(define_expand \"<code>v2hiv2di2\"\n+(define_expand \"<optab>v2hiv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(any_extend:V2DI\n \t  (match_operand:V2HI 1 \"nonimmediate_operand\")))]\n@@ -18108,7 +18108,7 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_expand \"<code>v8siv8di2\"\n+(define_expand \"<optab>v8siv8di2\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n \t  (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")))]\n@@ -18125,7 +18125,7 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_expand \"<code>v4siv4di2\"\n+(define_expand \"<optab>v4siv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V4DI\n \t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"vm\")))]\n@@ -18174,7 +18174,7 @@\n \t(any_extend:V2DI (match_dup 1)))]\n   \"operands[1] = adjust_address_nv (operands[1], V2SImode, 0);\")\n \n-(define_expand \"<code>v2siv2di2\"\n+(define_expand \"<optab>v2siv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(any_extend:V2DI\n \t  (match_operand:V2SI 1 \"nonimmediate_operand\")))]"}, {"sha": "7aad85819a6bcf5cf9846a630d26d3aaaafe2380", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx2-2.c", "status": "added", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx2-2.c?ref=12ae2bc70846a2be8255eaa41322cd1a5a7b7350", "patch": "@@ -0,0 +1,192 @@\n+/* PR target/92658 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx2\" } */\n+\n+typedef char v32qi __attribute__((vector_size (32)));\n+typedef short v16hi __attribute__((vector_size (32)));\n+typedef int v8si __attribute__((vector_size (32)));\n+typedef long long v4di __attribute__((vector_size (32)));\n+\n+void\n+foo_s8_s16 (v16hi * dst, v32qi * __restrict src)\n+{\n+  short tem[16];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  dst[0] = *(v16hi *) tem;\n+}\n+\n+void\n+bar_s8_s16 (v16hi * dst, v32qi src)\n+{\n+  short tem[16];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  tem[8] = src[8];\n+  tem[9] = src[9];\n+  tem[10] = src[10];\n+  tem[11] = src[11];\n+  tem[12] = src[12];\n+  tem[13] = src[13];\n+  tem[14] = src[14];\n+  tem[15] = src[15];\n+  dst[0] = *(v16hi *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxbw\" 2 } } */\n+\n+void\n+foo_s8_s32 (v8si * dst, v32qi * __restrict src)\n+{\n+  int tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8si *) tem;\n+}\n+\n+void\n+bar_s8_s32 (v8si * dst, v32qi src)\n+{\n+  int tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxbd\" 2 } } */\n+\n+void\n+foo_s8_s64 (v4di * dst, v32qi * __restrict src)\n+{\n+  long long tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+void\n+bar_s8_s64 (v4di * dst, v32qi src)\n+{\n+  long long tem[4];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxbq\" 2 { xfail *-*-* } } } */\n+\n+void\n+foo_s16_s32 (v8si * dst, v16hi * __restrict src)\n+{\n+  int tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8si *) tem;\n+}\n+\n+void\n+bar_s16_s32 (v8si * dst, v16hi src)\n+{\n+  int tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxwd\" 2 } } */\n+\n+void\n+foo_s16_s64 (v4di * dst, v16hi * __restrict src)\n+{\n+  long long tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+void\n+bar_s16_s64 (v4di * dst, v16hi src)\n+{\n+  long long tem[4];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxwq\" 2 } } */\n+\n+void\n+foo_s32_s64 (v4di * dst, v8si * __restrict src)\n+{\n+  long long tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+void\n+bar_s32_s64 (v4di * dst, v8si src)\n+{\n+  long long tem[4];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  dst[0] = *(v4di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxdq\" 2 } } */"}, {"sha": "811f21aa9173543e5048a82590ba0e9f8c83d93b", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx512bw-2.c", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512bw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512bw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512bw-2.c?ref=12ae2bc70846a2be8255eaa41322cd1a5a7b7350", "patch": "@@ -0,0 +1,280 @@\n+/* PR target/92658 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx512bw\" } */\n+\n+typedef char v64qi __attribute__((vector_size (64)));\n+typedef short v32hi __attribute__((vector_size (64)));\n+typedef int v16si __attribute__((vector_size (64)));\n+typedef long long v8di __attribute__((vector_size (64)));\n+\n+void\n+foo_s8_s16 (v32hi * dst, v64qi * __restrict src)\n+{\n+  short tem[32];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  tem[16] = (*src)[16];\n+  tem[17] = (*src)[17];\n+  tem[18] = (*src)[18];\n+  tem[19] = (*src)[19];\n+  tem[20] = (*src)[20];\n+  tem[21] = (*src)[21];\n+  tem[22] = (*src)[22];\n+  tem[23] = (*src)[23];\n+  tem[24] = (*src)[24];\n+  tem[25] = (*src)[25];\n+  tem[26] = (*src)[26];\n+  tem[27] = (*src)[27];\n+  tem[28] = (*src)[28];\n+  tem[29] = (*src)[29];\n+  tem[30] = (*src)[30];\n+  tem[31] = (*src)[31];\n+  dst[0] = *(v32hi *) tem;\n+}\n+\n+void\n+bar_s8_s16 (v32hi * dst, v64qi src)\n+{\n+  short tem[32];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  tem[8] = src[8];\n+  tem[9] = src[9];\n+  tem[10] = src[10];\n+  tem[11] = src[11];\n+  tem[12] = src[12];\n+  tem[13] = src[13];\n+  tem[14] = src[14];\n+  tem[15] = src[15];\n+  tem[16] = src[16];\n+  tem[17] = src[17];\n+  tem[18] = src[18];\n+  tem[19] = src[19];\n+  tem[20] = src[20];\n+  tem[21] = src[21];\n+  tem[22] = src[22];\n+  tem[23] = src[23];\n+  tem[24] = src[24];\n+  tem[25] = src[25];\n+  tem[26] = src[26];\n+  tem[27] = src[27];\n+  tem[28] = src[28];\n+  tem[29] = src[29];\n+  tem[30] = src[30];\n+  tem[31] = src[31];\n+  dst[0] = *(v32hi *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxbw\" 2 } } */\n+\n+void\n+foo_s8_s32 (v16si * dst, v64qi * __restrict src)\n+{\n+  int tem[16];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  dst[0] = *(v16si *) tem;\n+}\n+\n+void\n+bar_s8_s32 (v16si * dst, v64qi src)\n+{\n+  int tem[16];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  tem[8] = src[8];\n+  tem[9] = src[9];\n+  tem[10] = src[10];\n+  tem[11] = src[11];\n+  tem[12] = src[12];\n+  tem[13] = src[13];\n+  tem[14] = src[14];\n+  tem[15] = src[15];\n+  dst[0] = *(v16si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxbd\" 2 } } */\n+\n+void\n+foo_s8_s64 (v8di * dst, v64qi * __restrict src)\n+{\n+  long long tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+void\n+bar_s8_s64 (v8di * dst, v64qi src)\n+{\n+  long long tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxbq\" 2 } } */\n+\n+void\n+foo_s16_s32 (v16si * dst, v32hi * __restrict src)\n+{\n+  int tem[16];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  tem[8] = (*src)[8];\n+  tem[9] = (*src)[9];\n+  tem[10] = (*src)[10];\n+  tem[11] = (*src)[11];\n+  tem[12] = (*src)[12];\n+  tem[13] = (*src)[13];\n+  tem[14] = (*src)[14];\n+  tem[15] = (*src)[15];\n+  dst[0] = *(v16si *) tem;\n+}\n+\n+void\n+bar_s16_s32 (v16si * dst, v32hi src)\n+{\n+  int tem[16];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  tem[8] = src[8];\n+  tem[9] = src[9];\n+  tem[10] = src[10];\n+  tem[11] = src[11];\n+  tem[12] = src[12];\n+  tem[13] = src[13];\n+  tem[14] = src[14];\n+  tem[15] = src[15];\n+  dst[0] = *(v16si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxwd\" 2 } } */\n+\n+void\n+foo_s16_s64 (v8di * dst, v32hi * __restrict src)\n+{\n+  long long tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+void\n+bar_s16_s64 (v8di * dst, v32hi src)\n+{\n+  long long tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxwq\" 2 } } */\n+\n+void\n+foo_s32_s64 (v8di * dst, v16si * __restrict src)\n+{\n+  long long tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+void\n+bar_s32_s64 (v8di * dst, v16si src)\n+{\n+  long long tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxdq\" 2 } } */"}, {"sha": "ca174ce4abc04ad315854dc9858a3a1866a558ac", "filename": "gcc/testsuite/gcc.target/i386/pr92658-sse4-2.c", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ae2bc70846a2be8255eaa41322cd1a5a7b7350/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4-2.c?ref=12ae2bc70846a2be8255eaa41322cd1a5a7b7350", "patch": "@@ -0,0 +1,148 @@\n+/* PR target/92658 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msse4.1\" } */\n+\n+typedef char v16qi __attribute__((vector_size (16)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+typedef int v4si __attribute__((vector_size (16)));\n+typedef long long v2di __attribute__((vector_size (16)));\n+\n+void\n+foo_s8_s16 (v8hi * dst, v16qi * __restrict src)\n+{\n+  short tem[8];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  tem[4] = (*src)[4];\n+  tem[5] = (*src)[5];\n+  tem[6] = (*src)[6];\n+  tem[7] = (*src)[7];\n+  dst[0] = *(v8hi *) tem;\n+}\n+\n+void\n+bar_s8_s16 (v8hi * dst, v16qi src)\n+{\n+  short tem[8];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  tem[4] = src[4];\n+  tem[5] = src[5];\n+  tem[6] = src[6];\n+  tem[7] = src[7];\n+  dst[0] = *(v8hi *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxbw\" 2 } } */\n+\n+void\n+foo_s8_s32 (v4si * dst, v16qi * __restrict src)\n+{\n+  int tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4si *) tem;\n+}\n+\n+void\n+bar_s8_s32 (v4si * dst, v16qi src)\n+{\n+  int tem[4];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  dst[0] = *(v4si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxbd\" 2 { xfail *-*-* } } } */\n+\n+void\n+foo_s8_s64 (v2di * dst, v16qi * __restrict src)\n+{\n+  long long tem[2];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+void\n+bar_s8_s64 (v2di * dst, v16qi src)\n+{\n+  long long tem[2];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxbq\" 2 { xfail *-*-* } } } */\n+\n+void\n+foo_s16_s32 (v4si * dst, v8hi * __restrict src)\n+{\n+  int tem[4];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  tem[2] = (*src)[2];\n+  tem[3] = (*src)[3];\n+  dst[0] = *(v4si *) tem;\n+}\n+\n+void\n+bar_s16_s32 (v4si * dst, v8hi src)\n+{\n+  int tem[4];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  tem[2] = src[2];\n+  tem[3] = src[3];\n+  dst[0] = *(v4si *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxwd\" 2 } } */\n+\n+void\n+foo_s16_s64 (v2di * dst, v8hi * __restrict src)\n+{\n+  long long tem[2];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+void\n+bar_s16_s64 (v2di * dst, v8hi src)\n+{\n+  long long tem[2];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxwq\" 2 { xfail *-*-* } } } */\n+\n+void\n+foo_s32_s64 (v2di * dst, v4si * __restrict src)\n+{\n+  long long tem[2];\n+  tem[0] = (*src)[0];\n+  tem[1] = (*src)[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+void\n+bar_s32_s64 (v2di * dst, v4si src)\n+{\n+  long long tem[2];\n+  tem[0] = src[0];\n+  tem[1] = src[1];\n+  dst[0] = *(v2di *) tem;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pmovsxdq\" 2 } } */"}]}