{"sha": "ddc9ce91157ab23b35e1127c695feb5889f3ff53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRjOWNlOTExNTdhYjIzYjM1ZTExMjdjNjk1ZmViNTg4OWYzZmY1Mw==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-06-26T12:01:43Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-06-26T12:01:43Z"}, "message": "Andrew Vaught <andyv@firstinter.net>\n\n2004-06-26  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\nAndrew Vaught  <andyv@firstinter.net>\n\n* decl.c (contained_procedure): New function.\n(match_end): Verify correctness of END STATEMENT in\nall cases.\n\nAlso fix two typos in Kenner's ChangeLog\n\nFrom-SVN: r83710", "tree": {"sha": "cf847fbb638de0f684449d3cecfc8c76b8683199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf847fbb638de0f684449d3cecfc8c76b8683199"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddc9ce91157ab23b35e1127c695feb5889f3ff53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc9ce91157ab23b35e1127c695feb5889f3ff53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc9ce91157ab23b35e1127c695feb5889f3ff53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc9ce91157ab23b35e1127c695feb5889f3ff53/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e14aaa2aa50a8ef28da096379f33e776c544d93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e14aaa2aa50a8ef28da096379f33e776c544d93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e14aaa2aa50a8ef28da096379f33e776c544d93"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "c93c9a49a53c3f9b0c6ebe4c46c086b6f9e35754", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9ce91157ab23b35e1127c695feb5889f3ff53/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9ce91157ab23b35e1127c695feb5889f3ff53/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ddc9ce91157ab23b35e1127c695feb5889f3ff53", "patch": "@@ -1,11 +1,18 @@\n-2004-06-25  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n-\tAndrew Vaught <andyv@firstinter.net>\n+2004-06-26  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\tAndrew Vaught  <andyv@firstinter.net>\n+\n+\t* decl.c (contained_procedure): New function.\n+\t(match_end): Verify correctness of END STATEMENT in\n+\tall cases.\n+\n+2004-06-26  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\tAndrew Vaught  <andyv@firstinter.net>\n \n \tPR fortran/15190\n \t* decl.c (gfc_match_type_spec), io.c (match_io), parse.c\n \t(decode_statement): Enforce required space in free-form.\n \n-2004-06-21  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+2004-06-22  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* f95-lang.c (LANG_HOOKS_GIMPLE_BEFORE_INLINING): Deleted.\n \t* trans-array.c (gfc_conv_descriptor_data): Add operand\n@@ -20,7 +27,7 @@\n \t(transfer_expr): Likewise.\n \t* trans-decl.c (gfc_trans_auto_character_variable):\n \tSet up to get DECL_SIZE and DECL_SIZE_UNIT gimplified.\n-\t(gfc_simplify_function): New function.\n+\t(gfc_gimplify_function): New function.\n \t(gfc_generate_function-code): Properly handle nested functions.\n \t* trans.c (gfc_build_array_ref): Add two new operands for ARRAY_REF.\n "}, {"sha": "4ccb0d4a6f8d34acf059834df8e170019ecda63e", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddc9ce91157ab23b35e1127c695feb5889f3ff53/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddc9ce91157ab23b35e1127c695feb5889f3ff53/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=ddc9ce91157ab23b35e1127c695feb5889f3ff53", "patch": "@@ -1785,6 +1785,22 @@ gfc_match_subroutine (void)\n }\n \n \n+/* Return nonzero if we're currenly compiling a contained procedure.  */\n+\n+static int\n+contained_procedure (void)\n+{\n+  gfc_state_data *s;\n+\n+  for (s=gfc_state_stack; s; s=s->previous)\n+    if ((s->state == COMP_SUBROUTINE || s->state == COMP_FUNCTION)\n+       && s->previous != NULL\n+       && s->previous->state == COMP_CONTAINS)\n+      return 1;\n+\n+  return 0;\n+}\n+\n /* Match any of the various end-block statements.  Returns the type of\n    END to the caller.  The END INTERFACE, END IF, END DO and END\n    SELECT statements cannot be replaced by a single END statement.  */\n@@ -1797,6 +1813,7 @@ gfc_match_end (gfc_statement * st)\n   locus old_loc;\n   const char *block_name;\n   const char *target;\n+  int eos_ok;\n   match m;\n \n   old_loc = gfc_current_locus;\n@@ -1820,61 +1837,73 @@ gfc_match_end (gfc_statement * st)\n     case COMP_PROGRAM:\n       *st = ST_END_PROGRAM;\n       target = \" program\";\n+      eos_ok = 1;\n       break;\n \n     case COMP_SUBROUTINE:\n       *st = ST_END_SUBROUTINE;\n       target = \" subroutine\";\n+      eos_ok = !contained_procedure ();\n       break;\n \n     case COMP_FUNCTION:\n       *st = ST_END_FUNCTION;\n       target = \" function\";\n+      eos_ok = !contained_procedure ();\n       break;\n \n     case COMP_BLOCK_DATA:\n       *st = ST_END_BLOCK_DATA;\n       target = \" block data\";\n+      eos_ok = 1;\n       break;\n \n     case COMP_MODULE:\n       *st = ST_END_MODULE;\n       target = \" module\";\n+      eos_ok = 1;\n       break;\n \n     case COMP_INTERFACE:\n       *st = ST_END_INTERFACE;\n       target = \" interface\";\n+      eos_ok = 0;\n       break;\n \n     case COMP_DERIVED:\n       *st = ST_END_TYPE;\n       target = \" type\";\n+      eos_ok = 0;\n       break;\n \n     case COMP_IF:\n       *st = ST_ENDIF;\n       target = \" if\";\n+      eos_ok = 0;\n       break;\n \n     case COMP_DO:\n       *st = ST_ENDDO;\n       target = \" do\";\n+      eos_ok = 0;\n       break;\n \n     case COMP_SELECT:\n       *st = ST_END_SELECT;\n       target = \" select\";\n+      eos_ok = 0;\n       break;\n \n     case COMP_FORALL:\n       *st = ST_END_FORALL;\n       target = \" forall\";\n+      eos_ok = 0;\n       break;\n \n     case COMP_WHERE:\n       *st = ST_END_WHERE;\n       target = \" where\";\n+      eos_ok = 0;\n       break;\n \n     default:\n@@ -1884,17 +1913,9 @@ gfc_match_end (gfc_statement * st)\n \n   if (gfc_match_eos () == MATCH_YES)\n     {\n-      state = gfc_current_state ();\n-\n-      if (*st == ST_ENDIF || *st == ST_ENDDO || *st == ST_END_SELECT\n-\t  || *st == ST_END_INTERFACE || *st == ST_END_FORALL\n-\t  || *st == ST_END_WHERE\n-\t  || /* A contained procedure requires END FUNCTION/SUBROUTINE.  */\n-\t     ((state == COMP_FUNCTION || state == COMP_SUBROUTINE)\n-              && gfc_state_stack->previous != NULL\n-              && gfc_state_stack->previous->state == COMP_CONTAINS))\n+      if (!eos_ok)\n \t{\n-\n+\t  /* We would have required END [something]  */\n \t  gfc_error (\"%s statement expected at %C\",\n \t\t     gfc_ascii_statement (*st));\n \t  goto cleanup;"}]}