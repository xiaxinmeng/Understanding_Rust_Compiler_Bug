{"sha": "bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY5OGVjNmM4NGIyMjE0ZmYyZjRmNzYxNGI0MmQ5MGIzYTgyMDFhZA==", "commit": {"author": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-03-03T14:30:48Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2008-03-03T14:30:48Z"}, "message": "config.gcc: Add arm/t-arm-softfp and soft-fp/t-softfp to arm configs.\n\n2008-03-03  Paul Brook  <paul@codesourcery.com>\n\n\tgcc/\n\t* config.gcc: Add arm/t-arm-softfp and soft-fp/t-softfp to arm\n\tconfigs.  Add new --with-arch options.\n\t* config/arm/t-arm-softfp: New file.\n\t* config/arm/elf.h: Disable soft-fp routines on everything except\n\tARMv6-M.\n\t* config/arm/ieee754-df.S: Rename L_* to L_arm_*.\n\t* config/arm/ieee754-sf.S: Ditto.\n\t* config/arm/t-arm-elf: Ditto.\n\t* config/arm/arm.c (FL_FOR_ARCH6M): Define.\n\t(all_architectures): Add armv6-m.\n\t(arm_output_mi_thunk): Add TARGET_THUMB1_ONLY thunks.\n\t* config/arm/lib1funcs.asm: Add __ARM_ARCH_6M__ conditionals.\n\tInclude bpabi-v6m.S.\n\t* config/arm/arm.h (TARGET_THUMB1_ONLY): Define.\n\t(ARM_DECLARE_FUNCTION_NAME): Handle Thumb-1 only thunks.\n\t* config/arm/sfp-machine.h: New file.\n\t* config/arm/bpabi-v6m.S: New file.\n\t* config/arm/arm-cores.def: Add cortex-m1.\n\t* config/arm/arm-tune.md: Regenerate.\n\t* config/arm/libunwind.S: Add ARMv6-M implementation.\n\t* config/arm/bpabi.h: Add renames for soft-float routines.\n\t* doc/invoke.texi: Document -mcpu=cortex-m1 and -march=armv6-m.\n\nFrom-SVN: r132837", "tree": {"sha": "04b6034461ff1523e97a87f42762e23838f44671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04b6034461ff1523e97a87f42762e23838f44671"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/comments", "author": null, "committer": null, "parents": [{"sha": "9a3277660593535784174ac188b09a151ca9aaee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3277660593535784174ac188b09a151ca9aaee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a3277660593535784174ac188b09a151ca9aaee"}], "stats": {"total": 720, "additions": 666, "deletions": 54}, "files": [{"sha": "4533e0e76c81ee6d31a98712d7bffcc80e8feca5", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -750,6 +750,7 @@ arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \t    ;;\n \tesac\n \ttm_file=\"$tm_file arm/aout.h arm/arm.h\"\n+\ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n arm*-*-uclinux*)\t\t# ARM ucLinux\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/linux-gas.h arm/uclinux-elf.h arm/uclinux-elf.h\"\n@@ -766,10 +767,12 @@ arm*-*-uclinux*)\t\t# ARM ucLinux\n \t    default_use_cxa_atexit=yes\n \tesac\n \ttm_file=\"$tm_file arm/aout.h arm/arm.h\"\n+\ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n arm*-*-ecos-elf)\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/ecos-elf.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n+\ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n arm*-*-eabi* | arm*-*-symbianelf* )\n \t# The BPABI long long divmod functions return a 128-bit value in\n@@ -791,14 +794,17 @@ arm*-*-eabi* | arm*-*-symbianelf* )\n \t  ;;\n \tesac\n \ttm_file=\"${tm_file} arm/aout.h arm/arm.h\"\n+\ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n arm*-*-rtems*)\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h arm/rtems-elf.h rtems.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf t-rtems arm/t-rtems\"\n+\ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n arm*-*-elf | ep9312-*-elf)\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n+\ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n arm*-wince-pe*)\n \ttm_file=\"arm/semi.h arm/aout.h arm/arm.h arm/coff.h dbxcoff.h arm/pe.h arm/wince-pe.h\"\n@@ -815,6 +821,7 @@ arm-*-pe*)\n arm*-*-kaos*)\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/aout.h arm/arm.h kaos.h arm/kaos-arm.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\"\n+\ttmake_file=\"${tmake_file} arm/t-arm-softfp soft-fp/t-softfp\"\n \t;;\n avr-*-rtems*)\n \ttm_file=\"avr/avr.h dbxelf.h avr/rtems.h rtems.h\"\n@@ -2877,7 +2884,8 @@ case \"${target}\" in\n \t\tcase \"$with_arch\" in\n \t\t\"\" \\\n \t\t| armv[23456] | armv2a | armv3m | armv4t | armv5t \\\n-\t\t| armv5te | armv6j |armv6k | armv6z | armv6zk \\\n+\t\t| armv5te | armv6j |armv6k | armv6z | armv6zk | armv6-m \\\n+\t\t| armv7 | armv7-a | armv7-r | armv7-m \\\n \t\t| iwmmxt | ep9312)\n \t\t\t# OK\n \t\t\t;;"}, {"sha": "cce3195a453fafe0b0cd80009ff333652a7b9724", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,5 +1,5 @@\n /* ARM CPU Cores\n-   Copyright (C) 2003, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n    Written by CodeSourcery, LLC\n \n    This file is part of GCC.\n@@ -118,3 +118,4 @@ ARM_CORE(\"arm1156t2-s\",\t  arm1156t2s,\t6T2,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-a8\",\t  cortexa8,\t7A,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-r4\",\t  cortexr4,\t7R,\t\t\t\t FL_LDSCHED, 9e)\n ARM_CORE(\"cortex-m3\",\t  cortexm3,\t7M,\t\t\t\t FL_LDSCHED, 9e)\n+ARM_CORE(\"cortex-m1\",\t  cortexm1,\t6M,\t\t\t\t FL_LDSCHED, 9e)"}, {"sha": "d73382bc920cd7308dfeb07939aba24eaec4ac3f", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from arm-cores.def\n (define_attr \"tune\"\n-\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,arm7tdmi,arm7tdmis,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,arm926ejs,arm1026ejs,arm1136js,arm1136jfs,arm1176jzs,arm1176jzfs,mpcorenovfp,mpcore,arm1156t2s,cortexa8,cortexr4,cortexm3\"\n+\t\"arm2,arm250,arm3,arm6,arm60,arm600,arm610,arm620,arm7,arm7d,arm7di,arm70,arm700,arm700i,arm710,arm720,arm710c,arm7100,arm7500,arm7500fe,arm7m,arm7dm,arm7dmi,arm8,arm810,strongarm,strongarm110,strongarm1100,strongarm1110,arm7tdmi,arm7tdmis,arm710t,arm720t,arm740t,arm9,arm9tdmi,arm920,arm920t,arm922t,arm940t,ep9312,arm10tdmi,arm1020t,arm9e,arm946es,arm966es,arm968es,arm10e,arm1020e,arm1022e,xscale,iwmmxt,arm926ejs,arm1026ejs,arm1136js,arm1136jfs,arm1176jzs,arm1176jzfs,mpcorenovfp,mpcore,arm1156t2s,cortexa8,cortexr4,cortexm3,cortexm1\"\n \t(const (symbol_ref \"arm_tune\")))"}, {"sha": "fc11cb1e9e7bfc53d10e425f326c9c8b5d7d1ef4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 67, "deletions": 17, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,6 +1,6 @@\n /* Output routines for GCC for ARM.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rearnsha@arm.com).\n@@ -460,6 +460,7 @@ static int thumb_call_reg_needed;\n #define FL_FOR_ARCH6Z\tFL_FOR_ARCH6\n #define FL_FOR_ARCH6ZK\tFL_FOR_ARCH6K\n #define FL_FOR_ARCH6T2\t(FL_FOR_ARCH6 | FL_THUMB2)\n+#define FL_FOR_ARCH6M\t(FL_FOR_ARCH6 & ~FL_NOTM)\n #define FL_FOR_ARCH7\t(FL_FOR_ARCH6T2 &~ FL_NOTM)\n #define FL_FOR_ARCH7A\t(FL_FOR_ARCH7 | FL_NOTM)\n #define FL_FOR_ARCH7R\t(FL_FOR_ARCH7A | FL_DIV)\n@@ -632,6 +633,7 @@ static const struct processors all_architectures[] =\n   {\"armv6z\",  arm1176jzs, \"6Z\",  FL_CO_PROC |             FL_FOR_ARCH6Z, NULL},\n   {\"armv6zk\", arm1176jzs, \"6ZK\", FL_CO_PROC |             FL_FOR_ARCH6ZK, NULL},\n   {\"armv6t2\", arm1156t2s, \"6T2\", FL_CO_PROC |             FL_FOR_ARCH6T2, NULL},\n+  {\"armv6-m\", cortexm1,\t  \"6M\",\t\t\t\t  FL_FOR_ARCH6M, NULL},\n   {\"armv7\",   cortexa8,\t  \"7\",\t FL_CO_PROC |\t\t  FL_FOR_ARCH7, NULL},\n   {\"armv7-a\", cortexa8,\t  \"7A\",\t FL_CO_PROC |\t\t  FL_FOR_ARCH7A, NULL},\n   {\"armv7-r\", cortexr4,\t  \"7R\",\t FL_CO_PROC |\t\t  FL_FOR_ARCH7R, NULL},\n@@ -17639,12 +17641,23 @@ arm_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n                     ? 1 : 0);\n   if (mi_delta < 0)\n     mi_delta = - mi_delta;\n-  /* When generating 16-bit thumb code, thunks are entered in arm mode.  */\n+\n   if (TARGET_THUMB1)\n     {\n       int labelno = thunk_label++;\n       ASM_GENERATE_INTERNAL_LABEL (label, \"LTHUMBFUNC\", labelno);\n-      fputs (\"\\tldr\\tr12, \", file);\n+      /* Thunks are entered in arm mode when avaiable.  */\n+      if (TARGET_THUMB1_ONLY)\n+\t{\n+\t  /* push r3 so we can use it as a temporary.  */\n+\t  /* TODO: Omit this save if r3 is not used.  */\n+\t  fputs (\"\\tpush {r3}\\n\", file);\n+\t  fputs (\"\\tldr\\tr3, \", file);\n+\t}\n+      else\n+\t{\n+\t  fputs (\"\\tldr\\tr12, \", file);\n+\t}\n       assemble_name (file, label);\n       fputc ('\\n', file);\n       if (flag_pic)\n@@ -17658,29 +17671,63 @@ arm_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \n \t     Note that we have \"+ 1\" because some versions of GNU ld\n \t     don't set the low bit of the result for R_ARM_REL32\n-\t     relocations against thumb function symbols.  */\n+\t     relocations against thumb function symbols.\n+\t     On ARMv6M this is +4, not +8.  */\n \t  ASM_GENERATE_INTERNAL_LABEL (labelpc, \"LTHUNKPC\", labelno);\n \t  assemble_name (file, labelpc);\n \t  fputs (\":\\n\", file);\n-\t  fputs (\"\\tadd\\tr12, pc, r12\\n\", file);\n+\t  if (TARGET_THUMB1_ONLY)\n+\t    {\n+\t      /* This is 2 insns after the start of the thunk, so we know it\n+\t         is 4-byte aligned.  */\n+\t      fputs (\"\\tadd\\tr3, pc, r3\\n\", file);\n+\t      fputs (\"\\tmov r12, r3\\n\", file);\n+\t    }\n+\t  else\n+\t    fputs (\"\\tadd\\tr12, pc, r12\\n\", file);\n \t}\n+      else if (TARGET_THUMB1_ONLY)\n+\tfputs (\"\\tmov r12, r3\\n\", file);\n     }\n-  /* TODO: Use movw/movt for large constants when available.  */\n-  while (mi_delta != 0)\n+  if (TARGET_THUMB1_ONLY)\n     {\n-      if ((mi_delta & (3 << shift)) == 0)\n-        shift += 2;\n-      else\n-        {\n-          asm_fprintf (file, \"\\t%s\\t%r, %r, #%d\\n\",\n-                       mi_op, this_regno, this_regno,\n-                       mi_delta & (0xff << shift));\n-          mi_delta &= ~(0xff << shift);\n-          shift += 8;\n-        }\n+      if (mi_delta > 255)\n+\t{\n+\t  fputs (\"\\tldr\\tr3, \", file);\n+\t  assemble_name (file, label);\n+\t  fputs (\"+4\\n\", file);\n+\t  asm_fprintf (file, \"\\t%s\\t%r, %r, r3\\n\",\n+\t\t       mi_op, this_regno, this_regno);\n+\t}\n+      else if (mi_delta != 0)\n+\t{\n+\t  asm_fprintf (file, \"\\t%s\\t%r, %r, #%d\\n\",\n+\t\t       mi_op, this_regno, this_regno,\n+\t\t       mi_delta);\n+\t}\n+    }\n+  else\n+    {\n+      /* TODO: Use movw/movt for large constants when available.  */\n+      while (mi_delta != 0)\n+\t{\n+\t  if ((mi_delta & (3 << shift)) == 0)\n+\t    shift += 2;\n+\t  else\n+\t    {\n+\t      asm_fprintf (file, \"\\t%s\\t%r, %r, #%d\\n\",\n+\t\t\t   mi_op, this_regno, this_regno,\n+\t\t\t   mi_delta & (0xff << shift));\n+\t      mi_delta &= ~(0xff << shift);\n+\t      shift += 8;\n+\t    }\n+\t}\n     }\n   if (TARGET_THUMB1)\n     {\n+      if (TARGET_THUMB1_ONLY)\n+\tfputs (\"\\tpop\\t{r3}\\n\", file);\n+\n       fprintf (file, \"\\tbx\\tr12\\n\");\n       ASM_OUTPUT_ALIGN (file, 2);\n       assemble_name (file, label);\n@@ -17699,6 +17746,9 @@ arm_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       else\n \t/* Output \".word .LTHUNKn\".  */\n \tassemble_integer (XEXP (DECL_RTL (function), 0), 4, BITS_PER_WORD, 1);\n+\n+      if (TARGET_THUMB1_ONLY && mi_delta > 255)\n+\tassemble_integer (GEN_INT(mi_delta), 4, BITS_PER_WORD, 1);\n     }\n   else\n     {"}, {"sha": "d93476ba77ca151aa1863bd4aef1164e0adb0edc", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of target machine for GNU compiler, for ARM.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rearnsha@arm.com)\n@@ -207,6 +208,8 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_32BIT\t\t\t(TARGET_ARM || arm_arch_thumb2)\n /* 32-bit Thumb-2 code.  */\n #define TARGET_THUMB2\t\t\t(TARGET_THUMB && arm_arch_thumb2)\n+/* Thumb-1 only.  */\n+#define TARGET_THUMB1_ONLY\t\t(TARGET_THUMB1 && !arm_arch_notm)\n \n /* The following two macros concern the ability to execute coprocessor\n    instructions for VFPv3 or NEON.  TARGET_VFP3 is currently only ever\n@@ -2397,7 +2400,8 @@ extern int making_const_table;\n       if (TARGET_THUMB) \t\t\t\t\\\n         {\t\t\t\t\t\t\\\n           if (is_called_in_ARM_mode (DECL)\t\t\\\n-\t      || (TARGET_THUMB1 && current_function_is_thunk))\t\\\n+\t      || (TARGET_THUMB1 && !TARGET_THUMB1_ONLY\t\\\n+\t\t  && current_function_is_thunk))\t\\\n             fprintf (STREAM, \"\\t.code 32\\n\") ;\t\t\\\n           else if (TARGET_THUMB1)\t\t\t\\\n            fprintf (STREAM, \"\\t.code\\t16\\n\\t.thumb_func\\n\") ;\t\\"}, {"sha": "fa3b9c4147882609a14e5ecc6555e86936552cd4", "filename": "gcc/config/arm/bpabi-v6m.S", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Fbpabi-v6m.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Fbpabi-v6m.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi-v6m.S?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -0,0 +1,280 @@\n+/* Miscellaneous BPABI functions.  ARMv6M implementation\n+\n+   Copyright (C) 2006, 2008  Free Software Foundation, Inc.\n+   Contributed by CodeSourcery.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 2, or (at your option) any\n+   later version.\n+\n+   In addition to the permissions in the GNU General Public License, the\n+   Free Software Foundation gives you unlimited permission to link the\n+   compiled version of this file into combinations with other programs,\n+   and to distribute those combinations without any restriction coming\n+   from the use of this file.  (The General Public License restrictions\n+   do apply in other respects; for example, they cover modification of\n+   the file, and distribution when not linked into a combine\n+   executable.)\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING.  If not, write to\n+   the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+   Boston, MA 02110-1301, USA.  */\n+\n+#ifdef __ARMEB__\n+#define xxh r0\n+#define xxl r1\n+#define yyh r2\n+#define yyl r3\n+#else\n+#define xxh r1\n+#define xxl r0\n+#define yyh r3\n+#define yyl r2\n+#endif\t\n+\t\n+#ifdef L_aeabi_lcmp\n+\n+FUNC_START aeabi_lcmp\n+\tcmp\txxh, yyh\n+\tbeq\t1f\n+\tbgt\t2f\n+\tmov\tr0, #1\n+\tneg\tr0, r0\n+\tRET\n+2:\n+\tmov\tr0, #1\n+\tRET\n+1:\n+\tsub\tr0, xxl, yyl\n+\tbeq\t1f\n+\tbhi\t2f\n+\tmov\tr0, #1\n+\tneg\tr0, r0\n+\tRET\n+2:\n+\tmov\tr0, #1\n+1:\n+\tRET\n+\tFUNC_END aeabi_lcmp\n+\n+#endif /* L_aeabi_lcmp */\n+\t\n+#ifdef L_aeabi_ulcmp\n+\n+FUNC_START aeabi_ulcmp\n+\tcmp\txxh, yyh\n+\tbne\t1f\n+\tsub\tr0, xxl, yyl\n+\tbeq\t2f\n+1:\n+\tbcs\t1f\n+\tmov\tr0, #1\n+\tneg\tr0, r0\n+\tRET\n+1:\n+\tmov\tr0, #1\n+2:\n+\tRET\n+\tFUNC_END aeabi_ulcmp\n+\n+#endif /* L_aeabi_ulcmp */\n+\n+#ifdef L_aeabi_ldivmod\n+\n+FUNC_START aeabi_ldivmod\n+\tpush {r0, r1}\n+\tmov r0, sp\n+\tpush {r0, lr}\n+\tldr r0, [sp, #8]\n+\tbl SYM(__gnu_ldivmod_helper)\n+\tldr r3, [sp, #4]\n+\tmov lr, r3\n+\tadd sp, sp, #8\n+\tpop {r2, r3}\n+\tRET\n+\tFUNC_END aeabi_ldivmod\n+\n+#endif /* L_aeabi_ldivmod */\n+\n+#ifdef L_aeabi_uldivmod\n+\n+FUNC_START aeabi_uldivmod\n+\tpush {r0, r1}\n+\tmov r0, sp\n+\tpush {r0, lr}\n+\tldr r0, [sp, #8]\n+\tbl SYM(__gnu_uldivmod_helper)\n+\tldr r3, [sp, #4]\n+\tmov lr, r3\n+\tadd sp, sp, #8\n+\tpop {r2, r3}\n+\tRET\n+\tFUNC_END aeabi_uldivmod\n+\t\n+#endif /* L_aeabi_uldivmod */\n+\n+#ifdef L_arm_addsubsf3\n+\n+FUNC_START aeabi_frsub\n+\n+      push\t{r4, lr}\n+      mov\tr4, #1\n+      lsl\tr4, #31\n+      eor\tr0, r0, r4\n+      bl\t__aeabi_fadd\n+      pop\t{r4, pc}\n+\n+      FUNC_END aeabi_frsub\n+\n+#endif /* L_arm_addsubsf3 */\n+\n+#ifdef L_arm_cmpsf2\n+\n+FUNC_START aeabi_cfrcmple\n+\n+\tmov\tip, r0\n+\tmov\tr0, r1\n+\tmov\tr1, ip\n+\tb\t6f\n+\n+FUNC_START aeabi_cfcmpeq\n+FUNC_ALIAS aeabi_cfcmple aeabi_cfcmpeq\n+\n+\t@ The status-returning routines are required to preserve all\n+\t@ registers except ip, lr, and cpsr.\n+6:\tpush\t{r0, r1, r2, r3, r4, lr}\n+\tbl\t__lesf2\n+\t@ Set the Z flag correctly, and the C flag unconditionally.\n+\tcmp\tr0, #0\n+\t@ Clear the C flag if the return value was -1, indicating\n+\t@ that the first operand was smaller than the second.\n+\tbmi 1f\n+\tmov\tr1, #0\n+\tcmn\tr0, r1\n+1:\n+\tpop\t{r0, r1, r2, r3, r4, pc}\n+\n+\tFUNC_END aeabi_cfcmple\n+\tFUNC_END aeabi_cfcmpeq\n+\tFUNC_END aeabi_cfrcmple\n+\n+FUNC_START\taeabi_fcmpeq\n+\n+\tpush\t{r4, lr}\n+\tbl\t__eqsf2\n+\tneg\tr0, r0\n+\tadd\tr0, r0, #1\n+\tpop\t{r4, pc}\n+\n+\tFUNC_END aeabi_fcmpeq\n+\n+.macro COMPARISON cond, helper, mode=sf2\n+FUNC_START\taeabi_fcmp\\cond\n+\n+\tpush\t{r4, lr}\n+\tbl\t__\\helper\\mode\n+\tcmp\tr0, #0\n+\tb\\cond\t1f\n+\tmov\tr0, #0\n+\tpop\t{r4, pc}\n+1:\n+\tmov\tr0, #1\n+\tpop\t{r4, pc}\n+\n+\tFUNC_END aeabi_fcmp\\cond\n+.endm\n+\n+COMPARISON lt, le\n+COMPARISON le, le\n+COMPARISON gt, ge\n+COMPARISON ge, ge\n+\n+#endif /* L_arm_cmpsf2 */\n+\n+#ifdef L_arm_addsubdf3\n+\n+FUNC_START aeabi_drsub\n+\n+      push\t{r4, lr}\n+      mov\tr4, #1\n+      lsl\tr4, #31\n+      eor\txxh, xxh, r4\n+      bl\t__aeabi_dadd\n+      pop\t{r4, pc}\n+\n+      FUNC_END aeabi_drsub\n+\n+#endif /* L_arm_addsubdf3 */\n+\n+#ifdef L_arm_cmpdf2\n+\n+FUNC_START aeabi_cdrcmple\n+\n+\tmov\tip, r0\n+\tmov\tr0, r2\n+\tmov\tr2, ip\n+\tmov\tip, r1\n+\tmov\tr1, r3\n+\tmov\tr3, ip\n+\tb\t6f\n+\n+FUNC_START aeabi_cdcmpeq\n+FUNC_ALIAS aeabi_cdcmple aeabi_cdcmpeq\n+\n+\t@ The status-returning routines are required to preserve all\n+\t@ registers except ip, lr, and cpsr.\n+6:\tpush\t{r0, r1, r2, r3, r4, lr}\n+\tbl\t__ledf2\n+\t@ Set the Z flag correctly, and the C flag unconditionally.\n+\tcmp\tr0, #0\n+\t@ Clear the C flag if the return value was -1, indicating\n+\t@ that the first operand was smaller than the second.\n+\tbmi 1f\n+\tmov\tr1, #0\n+\tcmn\tr0, r1\n+1:\n+\tpop\t{r0, r1, r2, r3, r4, pc}\n+\n+\tFUNC_END aeabi_cdcmple\n+\tFUNC_END aeabi_cdcmpeq\n+\tFUNC_END aeabi_cdrcmple\n+\n+FUNC_START\taeabi_dcmpeq\n+\n+\tpush\t{r4, lr}\n+\tbl\t__eqdf2\n+\tneg\tr0, r0\n+\tadd\tr0, r0, #1\n+\tpop\t{r4, pc}\n+\n+\tFUNC_END aeabi_dcmpeq\n+\n+.macro COMPARISON cond, helper, mode=df2\n+FUNC_START\taeabi_dcmp\\cond\n+\n+\tpush\t{r4, lr}\n+\tbl\t__\\helper\\mode\n+\tcmp\tr0, #0\n+\tb\\cond\t1f\n+\tmov\tr0, #0\n+\tpop\t{r4, pc}\n+1:\n+\tmov\tr0, #1\n+\tpop\t{r4, pc}\n+\n+\tFUNC_END aeabi_dcmp\\cond\n+.endm\n+\n+COMPARISON lt, le\n+COMPARISON le, le\n+COMPARISON gt, ge\n+COMPARISON ge, ge\n+\n+#endif /* L_arm_cmpdf2 */"}, {"sha": "0f3b24faaf34d6e3d8505c10a58ed9794a4d26b8", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,5 +1,5 @@\n /* Configuration file for ARM BPABI targets.\n-   Copyright (C) 2004, 2005, 2007\n+   Copyright (C) 2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n    Contributed by CodeSourcery, LLC   \n \n@@ -99,6 +99,21 @@\n #define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (floatdisf, l2f)\n #endif\n \n+/* These renames are needed on ARMv6M.  Other targets get them from\n+   assembly routines.  */\n+#ifdef L_fixunsdfsi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixunsdfsi, d2uiz)\n+#endif\n+#ifdef L_fixunssfsi\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (fixunssfsi, f2uiz)\n+#endif\n+#ifdef L_floatundidf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (floatundidf, ul2d)\n+#endif\n+#ifdef L_floatundisf\n+#define DECLARE_LIBRARY_RENAMES RENAME_LIBRARY (floatundisf, ul2f)\n+#endif\n+\n /* The BPABI requires that we always use an out-of-line implementation\n    of RTTI comparison, even if the target supports weak symbols,\n    because the same object file might be used on a target that does"}, {"sha": "37c366d5ac86d3098f8c71ab940e25557e4320de", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler.\n    For ARM with ELF obj format.\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2004, 2005, 2007\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2004, 2005, 2007,\n+   2008 Free Software Foundation, Inc.\n    Contributed by Philip Blundell <philb@gnu.org> and\n    Catherine Moore <clm@cygnus.com>\n    \n@@ -145,3 +145,17 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* Horrible hack: We want to prevent some libgcc routines being included\n+   for some multilibs.  */\n+#ifndef __ARM_ARCH_6M__\n+#undef L_fixdfsi\n+#undef L_fixunsdfsi\n+#undef L_truncdfsf2\n+#undef L_fixsfsi\n+#undef L_fixunssfsi\n+#undef L_floatdidf\n+#undef L_floatdisf\n+#undef L_floatundidf\n+#undef L_floatundisf\n+#endif\n+"}, {"sha": "a175fa6bb749f747f6ce3ddb6001275c29888c3f", "filename": "gcc/config/arm/ieee754-df.S", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Fieee754-df.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Fieee754-df.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fieee754-df.S?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,6 +1,6 @@\n /* ieee754-df.S double-precision floating point support for ARM\n \n-   Copyright (C) 2003, 2004, 2005, 2007  Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008  Free Software Foundation, Inc.\n    Contributed by Nicolas Pitre (nico@cam.org)\n \n    This file is free software; you can redistribute it and/or modify it\n@@ -56,7 +56,7 @@\n #endif\n \n \n-#ifdef L_negdf2\n+#ifdef L_arm_negdf2\n \n ARM_FUNC_START negdf2\n ARM_FUNC_ALIAS aeabi_dneg negdf2\n@@ -70,7 +70,7 @@ ARM_FUNC_ALIAS aeabi_dneg negdf2\n \n #endif\n \n-#ifdef L_addsubdf3\n+#ifdef L_arm_addsubdf3\n \n ARM_FUNC_START aeabi_drsub\n \n@@ -603,7 +603,7 @@ LSYM(f0_ret):\n \n #endif /* L_addsubdf3 */\n \n-#ifdef L_muldivdf3\n+#ifdef L_arm_muldivdf3\n \n ARM_FUNC_START muldf3\n ARM_FUNC_ALIAS aeabi_dmul muldf3\n@@ -1103,7 +1103,7 @@ LSYM(Ldv_s):\n \n #endif /* L_muldivdf3 */\n \n-#ifdef L_cmpdf2\n+#ifdef L_arm_cmpdf2\n \n @ Note: only r0 (return value) and ip are clobbered here.\n \n@@ -1271,7 +1271,7 @@ ARM_FUNC_START\taeabi_dcmpgt\n \n #endif /* L_cmpdf2 */\n \n-#ifdef L_unorddf2\n+#ifdef L_arm_unorddf2\n \n ARM_FUNC_START unorddf2\n ARM_FUNC_ALIAS aeabi_dcmpun unorddf2\n@@ -1297,7 +1297,7 @@ ARM_FUNC_ALIAS aeabi_dcmpun unorddf2\n \n #endif /* L_unorddf2 */\n \n-#ifdef L_fixdfsi\n+#ifdef L_arm_fixdfsi\n \n ARM_FUNC_START fixdfsi\n ARM_FUNC_ALIAS aeabi_d2iz fixdfsi\n@@ -1339,7 +1339,7 @@ ARM_FUNC_ALIAS aeabi_d2iz fixdfsi\n \n #endif /* L_fixdfsi */\n \n-#ifdef L_fixunsdfsi\n+#ifdef L_arm_fixunsdfsi\n \n ARM_FUNC_START fixunsdfsi\n ARM_FUNC_ALIAS aeabi_d2uiz fixunsdfsi\n@@ -1377,7 +1377,7 @@ ARM_FUNC_ALIAS aeabi_d2uiz fixunsdfsi\n \n #endif /* L_fixunsdfsi */\n \n-#ifdef L_truncdfsf2\n+#ifdef L_arm_truncdfsf2\n \n ARM_FUNC_START truncdfsf2\n ARM_FUNC_ALIAS aeabi_d2f truncdfsf2"}, {"sha": "2da156cd44d28e12c1caba245c275ad70dc36d5b", "filename": "gcc/config/arm/ieee754-sf.S", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Fieee754-sf.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Fieee754-sf.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fieee754-sf.S?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,6 +1,6 @@\n /* ieee754-sf.S single-precision floating point support for ARM\n \n-   Copyright (C) 2003, 2004, 2005, 2007  Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008  Free Software Foundation, Inc.\n    Contributed by Nicolas Pitre (nico@cam.org)\n \n    This file is free software; you can redistribute it and/or modify it\n@@ -38,7 +38,7 @@\n  * if necessary without impacting performances.\n  */\n \n-#ifdef L_negsf2\n+#ifdef L_arm_negsf2\n \t\n ARM_FUNC_START negsf2\n ARM_FUNC_ALIAS aeabi_fneg negsf2\n@@ -51,7 +51,7 @@ ARM_FUNC_ALIAS aeabi_fneg negsf2\n \n #endif\n \n-#ifdef L_addsubsf3\n+#ifdef L_arm_addsubsf3\n \n ARM_FUNC_START aeabi_frsub\n \n@@ -448,7 +448,7 @@ LSYM(f0_ret):\n \n #endif /* L_addsubsf3 */\n \n-#ifdef L_muldivsf3\n+#ifdef L_arm_muldivsf3\n \n ARM_FUNC_START mulsf3\n ARM_FUNC_ALIAS aeabi_fmul mulsf3\n@@ -795,7 +795,7 @@ LSYM(Ldv_s):\n \n #endif /* L_muldivsf3 */\n \n-#ifdef L_cmpsf2\n+#ifdef L_arm_cmpsf2\n \n \t@ The return value in r0 is\n \t@\n@@ -958,7 +958,7 @@ ARM_FUNC_START\taeabi_fcmpgt\n \n #endif /* L_cmpsf2 */\n \n-#ifdef L_unordsf2\n+#ifdef L_arm_unordsf2\n \n ARM_FUNC_START unordsf2\n ARM_FUNC_ALIAS aeabi_fcmpun unordsf2\n@@ -983,7 +983,7 @@ ARM_FUNC_ALIAS aeabi_fcmpun unordsf2\n \n #endif /* L_unordsf2 */\n \n-#ifdef L_fixsfsi\n+#ifdef L_arm_fixsfsi\n \n ARM_FUNC_START fixsfsi\n ARM_FUNC_ALIAS aeabi_f2iz fixsfsi\n@@ -1025,7 +1025,7 @@ ARM_FUNC_ALIAS aeabi_f2iz fixsfsi\n \n #endif /* L_fixsfsi */\n \n-#ifdef L_fixunssfsi\n+#ifdef L_arm_fixunssfsi\n \n ARM_FUNC_START fixunssfsi\n ARM_FUNC_ALIAS aeabi_f2uiz fixunssfsi"}, {"sha": "2fc66be80d5e36d1d5d02da0f65038672470de3e", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,7 +1,7 @@\n @ libgcc routines for ARM cpu.\n @ Division routines, written by Richard Earnshaw, (rearnsha@armltd.co.uk)\n \n-/* Copyright 1995, 1996, 1998, 1999, 2000, 2003, 2004, 2005, 2007\n+/* Copyright 1995, 1996, 1998, 1999, 2000, 2003, 2004, 2005, 2007, 2008\n    Free Software Foundation, Inc.\n \n This file is free software; you can redistribute it and/or modify it\n@@ -94,7 +94,8 @@ Boston, MA 02110-1301, USA.  */\n \n #if defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) \\\n \t|| defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) \\\n-\t|| defined(__ARM_ARCH_6ZK__) || defined(__ARM_ARCH_6T2__)\n+\t|| defined(__ARM_ARCH_6ZK__) || defined(__ARM_ARCH_6T2__) \\\n+\t|| defined(__ARM_ARCH_6M__)\n # define __ARM_ARCH__ 6\n #endif\n \n@@ -367,6 +368,9 @@ _L__\\name:\n \n #else /* !(__INTERWORKING_STUBS__ || __thumb2__) */\n \n+#ifdef __ARM_ARCH_6M__\n+#define EQUIV .thumb_set\n+#else\n .macro\tARM_FUNC_START name\n \t.text\n \t.globl SYM (__\\name)\n@@ -379,6 +383,7 @@ SYM (__\\name):\n .macro  ARM_CALL name\n \tbl\t__\\name\n .endm\n+#endif\n \n #endif\n \n@@ -391,13 +396,15 @@ SYM (__\\name):\n #endif\n .endm\n \n+#ifndef __ARM_ARCH_6M__\n .macro\tARM_FUNC_ALIAS new old\n \t.globl\tSYM (__\\new)\n \tEQUIV\tSYM (__\\new), SYM (__\\old)\n #if defined(__INTERWORKING_STUBS__)\n \t.set\tSYM (_L__\\new), SYM (_L__\\old)\n #endif\n .endm\n+#endif\n \n #ifdef __thumb__\n /* Register aliases.  */\n@@ -1256,8 +1263,8 @@ LSYM(Lover12):\n #endif /* L_call_via_rX */\n \n /* Don't bother with the old interworking routines for Thumb-2.  */\n-/* ??? Maybe only omit these on v7m.  */\n-#ifndef __thumb2__\n+/* ??? Maybe only omit these on \"m\" variants.  */\n+#if !defined(__thumb2__) && !defined(__ARM_ARCH_6M__)\n \n #if defined L_interwork_call_via_rX\n \n@@ -1387,7 +1394,11 @@ LSYM(Lchange_\\register):\n #endif /* Arch supports thumb.  */\n \n #ifndef __symbian__\n+#ifndef __ARM_ARCH_6M__\n #include \"ieee754-df.S\"\n #include \"ieee754-sf.S\"\n #include \"bpabi.S\"\n-#endif /* __symbian__ */\n+#else /* __ARM_ARCH_6M__ */\n+#include \"bpabi-v6m.S\"\n+#endif /* __ARM_ARCH_6M__ */\n+#endif /* !__symbian__ */"}, {"sha": "dd958548387777492431fab791b02b6175f79e5b", "filename": "gcc/config/arm/libunwind.S", "status": "modified", "additions": 116, "deletions": 1, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Flibunwind.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Flibunwind.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flibunwind.S?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,5 +1,5 @@\n /* Support functions for the unwinder.\n-   Copyright (C) 2003, 2004, 2005, 2007  Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008  Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n    This file is free software; you can redistribute it and/or modify it\n@@ -53,6 +53,119 @@\n #endif\n #endif\n \n+#ifdef __ARM_ARCH_6M__\n+\n+/* r0 points to a 16-word block.  Upload these values to the actual core\n+   state.  */\n+FUNC_START restore_core_regs\n+\tmov r1, r0\n+\tadd r1, r1, #52\n+\tldmia r1!, {r3, r4, r5}\n+\tsub r3, r3, #4\n+\tmov ip, r3\n+\tstr r5, [r3]\n+\tmov lr, r4\n+\t/* Restore r8-r11.  */\n+\tmov r1, r0\n+\tadd r1, r1, #32\n+\tldmia r1!, {r2, r3, r4, r5}\n+\tmov r8, r2\n+\tmov r9, r3\n+\tmov sl, r4\n+\tmov fp, r5\n+\tmov r1, r0\n+\tadd r1, r1, #8\n+\tldmia r1!, {r2, r3, r4, r5, r6, r7}\n+\tldr r1, [r0, #4]\n+\tldr r0, [r0]\n+\tmov sp, ip\n+\tpop {pc}\n+\tFUNC_END restore_core_regs\n+\tUNPREFIX restore_core_regs\n+\n+/* ARMV6M does not have coprocessors, so these should never be used.  */\n+FUNC_START gnu_Unwind_Restore_VFP\n+\tRET\n+\n+/* Store VFR regsters d0-d15 to the address in r0.  */\n+FUNC_START gnu_Unwind_Save_VFP\n+\tRET\n+\n+/* Load VFP registers d0-d15 from the address in r0.\n+   Use this to load from FSTMD format.  */\n+FUNC_START gnu_Unwind_Restore_VFP_D\n+\tRET\n+\n+/* Store VFP registers d0-d15 to the address in r0.\n+   Use this to store in FLDMD format.  */\n+FUNC_START gnu_Unwind_Save_VFP_D\n+\tRET\n+\n+/* Load VFP registers d16-d31 from the address in r0.\n+   Use this to load from FSTMD (=VSTM) format.  Needs VFPv3.  */\n+FUNC_START gnu_Unwind_Restore_VFP_D_16_to_31\n+\tRET\n+\n+/* Store VFP registers d16-d31 to the address in r0.\n+   Use this to store in FLDMD (=VLDM) format.  Needs VFPv3.  */\n+FUNC_START gnu_Unwind_Save_VFP_D_16_to_31\n+\tRET\n+\n+FUNC_START gnu_Unwind_Restore_WMMXD\n+\tRET\n+\n+FUNC_START gnu_Unwind_Save_WMMXD\n+\tRET\n+\n+FUNC_START gnu_Unwind_Restore_WMMXC\n+\tRET\n+\n+FUNC_START gnu_Unwind_Save_WMMXC\n+\tRET\n+\n+.macro  UNWIND_WRAPPER name nargs\n+\tFUNC_START \\name\n+\t/* Create a phase2_vrs structure.  */\n+\t/* Save r0 in the PC slot so we can use it as a scratch register.  */\n+\tpush {r0}\n+\tadd r0, sp, #4\n+\tpush {r0, lr} /* Push original SP and LR.  */\n+\t/* Make space for r8-r12.  */\n+\tsub sp, sp, #20\n+\t/* Save low registers.  */\n+\tpush {r0, r1, r2, r3, r4, r5, r6, r7}\n+\t/* Save high registers.  */\n+\tadd r0, sp, #32\n+\tmov r1, r8\n+\tmov r2, r9\n+\tmov r3, sl\n+\tmov r4, fp\n+\tmov r5, ip\n+\tstmia r0!, {r1, r2, r3, r4, r5}\n+\t/* Restore original low register values.  */\n+\tadd r0, sp, #4\n+\tldmia r0!, {r1, r2, r3, r4, r5}\n+\t/* Restore orginial r0.  */\n+\tldr r0, [sp, #60]\n+\tstr r0, [sp]\n+\t/* Demand-save flags, plus an extra word for alignment.  */\n+\tmov r3, #0\n+\tpush {r2, r3}\n+\t/* Point r1 at the block.  Pass r[0..nargs) unchanged.  */\n+\tadd r\\nargs, sp, #4\n+\n+\tbl SYM (__gnu\\name)\n+\n+\tldr r3, [sp, #64]\n+\tadd sp, sp, #72\n+\tbx r3\n+\n+\tFUNC_END \\name\n+\tUNPREFIX \\name\n+.endm\n+\n+#else /* !__ARM_ARCH_6M__ */\n+\n /* r0 points to a 16-word block.  Upload these values to the actual core\n    state.  */\n ARM_FUNC_START restore_core_regs\n@@ -233,6 +346,8 @@ ARM_FUNC_START gnu_Unwind_Save_WMMXC\n \tUNPREFIX \\name\n .endm\n \n+#endif /* !__ARM_ARCH_6M__ */\n+\n UNWIND_WRAPPER _Unwind_RaiseException 1\n UNWIND_WRAPPER _Unwind_Resume 1\n UNWIND_WRAPPER _Unwind_Resume_or_Rethrow 1"}, {"sha": "bc75737d73d2c577ad88a760468065901f0e9b19", "filename": "gcc/config/arm/sfp-machine.h", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsfp-machine.h?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -0,0 +1,96 @@\n+#define _FP_W_TYPE_SIZE\t\t32\n+#define _FP_W_TYPE\t\tunsigned long\n+#define _FP_WS_TYPE\t\tsigned long\n+#define _FP_I_TYPE\t\tlong\n+\n+#define _FP_MUL_MEAT_S(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_S,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_D(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_4_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R,X,Y)\t_FP_DIV_MEAT_1_loop(S,R,X,Y)\n+#define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_2_udiv(D,R,X,Y)\n+#define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_4_udiv(Q,R,X,Y)\n+\n+#define _FP_NANFRAC_S\t\t((_FP_QNANBIT_S << 1) - 1)\n+#define _FP_NANFRAC_D\t\t((_FP_QNANBIT_D << 1) - 1), -1\n+#define _FP_NANFRAC_Q\t\t((_FP_QNANBIT_Q << 1) - 1), -1, -1, -1\n+#define _FP_NANSIGN_S\t\t0\n+#define _FP_NANSIGN_D\t\t0\n+#define _FP_NANSIGN_Q\t\t0\n+\n+#define _FP_KEEPNANFRACP 1\n+\n+/* Someone please check this.  */\n+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if ((_FP_FRAC_HIGH_RAW_##fs(X) & _FP_QNANBIT_##fs)\t\t\\\n+\t&& !(_FP_FRAC_HIGH_RAW_##fs(Y) & _FP_QNANBIT_##fs))\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = Y##_s;\t\t\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,Y);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = X##_s;\t\t\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define\t__LITTLE_ENDIAN\t1234\n+#define\t__BIG_ENDIAN\t4321\n+\n+#if defined __ARMEB__\n+# define __BYTE_ORDER __BIG_ENDIAN\n+#else\n+# define __BYTE_ORDER __LITTLE_ENDIAN\n+#endif\n+\n+\n+/* Define ALIASNAME as a strong alias for NAME.  */\n+# define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n+# define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));\n+\n+#ifdef __ARM_EABI__\n+/* Rename functions to their EABI names.  */\n+/* The comparison functions need wrappers for EABI semantics, so\n+   leave them unmolested.  */\n+#define __negsf2\t__aeabi_fneg\n+#define __subsf3\t__aeabi_fsub\n+#define __addsf3\t__aeabi_fadd\n+#define __floatunsisf\t__aeabi_ui2f\n+#define __floatsisf\t__aeabi_i2f\n+#define __floatundisf\t__aeabi_ul2f\n+#define __floatdisf\t__aeabi_l2f\n+#define __mulsf3\t__aeabi_fmul\n+#define __divsf3\t__aeabi_fdiv\n+#define __unordsf2\t__aeabi_fcmpun\n+#define __fixsfsi\t__aeabi_f2iz\n+#define __fixunssfsi\t__aeabi_f2uiz\n+#define __fixsfdi\t__aeabi_f2lz\n+#define __fixunssfdi\t__aeabi_f2ulz\n+#define __floatdisf\t__aeabi_l2f\n+\n+#define __negdf2\t__aeabi_dneg\n+#define __subdf3\t__aeabi_dsub\n+#define __adddf3\t__aeabi_dadd\n+#define __floatunsidf\t__aeabi_ui2d\n+#define __floatsidf\t__aeabi_i2d\n+#define __extendsfdf2\t__aeabi_f2d\n+#define __truncdfsf2\t__aeabi_d2f\n+#define __floatundidf\t__aeabi_ul2d\n+#define __floatdidf\t__aeabi_l2d\n+#define __muldf3\t__aeabi_dmul\n+#define __divdf3\t__aeabi_ddiv\n+#define __unorddf2\t__aeabi_dcmpun\n+#define __fixdfsi\t__aeabi_d2iz\n+#define __fixunsdfsi\t__aeabi_d2uiz\n+#define __fixdfdi\t__aeabi_d2lz\n+#define __fixunsdfdi\t__aeabi_d2ulz\n+#define __floatdidf\t__aeabi_l2d\n+\n+#endif /* __ARM_EABI__ */"}, {"sha": "31ba396b433ebeae33ead3873a177d3802e6125d", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -1,10 +1,16 @@\n LIB1ASMSRC = arm/lib1funcs.asm\n+# For most CPUs we have an assembly soft-float implementations.\n+# However this is not true for ARMv6M.  Here we want to use the soft-fp C\n+# implementation.  The soft-fp code is only build for ARMv6M.  This pulls\n+# in the asm implementation for other CPUs.\n LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func \\\n \t_call_via_rX _interwork_call_via_rX \\\n \t_lshrdi3 _ashrdi3 _ashldi3 \\\n-\t_negdf2 _addsubdf3 _muldivdf3 _cmpdf2 _unorddf2 _fixdfsi _fixunsdfsi \\\n-\t_truncdfsf2 _negsf2 _addsubsf3 _muldivsf3 _cmpsf2 _unordsf2 \\\n-\t_fixsfsi _fixunssfsi _floatdidf _floatdisf _floatundidf _floatundisf\n+\t_arm_negdf2 _arm_addsubdf3 _arm_muldivdf3 _arm_cmpdf2 _arm_unorddf2 \\\n+\t_arm_fixdfsi _arm_fixunsdfsi \\\n+\t_arm_truncdfsf2 _arm_negsf2 _arm_addsubsf3 _arm_muldivsf3 \\\n+\t_arm_cmpsf2 _arm_unordsf2 _arm_fixsfsi _arm_fixunssfsi \\\n+\t_arm_floatdidf _arm_floatdisf _arm_floatundidf _arm_floatundisf\n \n MULTILIB_OPTIONS     = marm/mthumb\n MULTILIB_DIRNAMES    = arm thumb"}, {"sha": "4a97747b19550e7f8acb7eb4fa4a1a2723be51ba", "filename": "gcc/config/arm/t-arm-softfp", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Ft-arm-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fconfig%2Farm%2Ft-arm-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-softfp?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -0,0 +1,11 @@\n+softfp_float_modes := sf df\n+softfp_int_modes := si di\n+softfp_extensions := sfdf\n+softfp_truncations := dfsf\n+softfp_machine_header := arm/sfp-machine.h\n+softfp_exclude_libgcc2 := y\n+softfp_wrap_start := '\\#ifdef __ARM_ARCH_6M__'\n+softfp_wrap_end := '\\#endif'\n+\n+# softfp seems to be missing a whole bunch of prototypes.\n+TARGET_LIBGCC2_CFLAGS += -Wno-missing-prototypes"}, {"sha": "0b1e9c2edcb4af706da6f9a38f97a8512391283a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bf98ec6c84b2214ff2f4f7614b42d90b3a8201ad", "patch": "@@ -8569,7 +8569,7 @@ assembly code.  Permissible names are: @samp{arm2}, @samp{arm250},\n @samp{arm10e}, @samp{arm1020e}, @samp{arm1022e},\n @samp{arm1136j-s}, @samp{arm1136jf-s}, @samp{mpcore}, @samp{mpcorenovfp},\n @samp{arm1156t2-s}, @samp{arm1176jz-s}, @samp{arm1176jzf-s},\n-@samp{cortex-a8}, @samp{cortex-r4}, @samp{cortex-m3},\n+@samp{cortex-a8}, @samp{cortex-r4}, @samp{cortex-m3}, @samp{cortex-m1},\n @samp{xscale}, @samp{iwmmxt}, @samp{ep9312}.\n \n @itemx -mtune=@var{name}\n@@ -8591,8 +8591,9 @@ assembly code.  This option can be used in conjunction with or instead\n of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n @samp{armv2a}, @samp{armv3}, @samp{armv3m}, @samp{armv4}, @samp{armv4t},\n @samp{armv5}, @samp{armv5t}, @samp{armv5te}, @samp{armv6}, @samp{armv6j},\n-@samp{armv6t2}, @samp{armv6z}, @samp{armv6zk}, @samp{armv7}, @samp{armv7-a},\n-@samp{armv7-r}, @samp{armv7-m}, @samp{iwmmxt}, @samp{ep9312}.\n+@samp{armv6t2}, @samp{armv6z}, @samp{armv6zk}, @samp{armv6-m},\n+@samp{armv7}, @samp{armv7-a}, @samp{armv7-r}, @samp{armv7-m},\n+@samp{iwmmxt}, @samp{ep9312}.\n \n @item -mfpu=@var{name}\n @itemx -mfpe=@var{number}"}]}