{"sha": "0fe0c61499096286867bcee0df3dfbba3d3f7cba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZlMGM2MTQ5OTA5NjI4Njg2N2JjZWUwZGYzZGZiYmEzZDNmN2NiYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-06-25T18:40:07Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-06-25T18:40:07Z"}, "message": "re PR middle-end/15825 (if-cvt optimisation patch noce_try_sign_mask breaks apple-ppc-darwin port)\n\n\n\tPR middle-end/15825\n\t* ifcvt.c (unshare_ifcvt_sequence): Rename to end_ifcvt_sequence.\n\tUse get_isns and end_sequence instead of accepting a seq argument.\n\tScan the instruction sequence for unrecognizable or jump insns.\n\t(noce_try_move, noce_try_store_flag, noce_try_store_flag_constants,\n\tnoce_try_addcc, noce_try_store_flag_mask, noce_try_cmove,\n\tnoce_try_cmove_arith, noce_try_minmax, noce_try_abs,\n\tnoce_try_sign_mask): Use end_ifcvt_sequence to factor common code.\n\n\t* gcc.dg/pr15825-1.c: New test case.\n\nFrom-SVN: r83671", "tree": {"sha": "f5b099c90d08d909541a996d27adf8816b06dfcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5b099c90d08d909541a996d27adf8816b06dfcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fe0c61499096286867bcee0df3dfbba3d3f7cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe0c61499096286867bcee0df3dfbba3d3f7cba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe0c61499096286867bcee0df3dfbba3d3f7cba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe0c61499096286867bcee0df3dfbba3d3f7cba/comments", "author": null, "committer": null, "parents": [{"sha": "71f85957b6ec652431ca32b7de602167180b7fe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f85957b6ec652431ca32b7de602167180b7fe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f85957b6ec652431ca32b7de602167180b7fe0"}], "stats": {"total": 164, "additions": 98, "deletions": 66}, "files": [{"sha": "59d2771faf2548ce6dc70f3d8e8231a15c12592c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe0c61499096286867bcee0df3dfbba3d3f7cba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe0c61499096286867bcee0df3dfbba3d3f7cba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fe0c61499096286867bcee0df3dfbba3d3f7cba", "patch": "@@ -1,3 +1,14 @@\n+2004-06-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/15825\n+\t* ifcvt.c (unshare_ifcvt_sequence): Rename to end_ifcvt_sequence.\n+\tUse get_isns and end_sequence instead of accepting a seq argument.\n+\tScan the instruction sequence for unrecognizable or jump insns.\n+\t(noce_try_move, noce_try_store_flag, noce_try_store_flag_constants,\n+\tnoce_try_addcc, noce_try_store_flag_mask, noce_try_cmove,\n+\tnoce_try_cmove_arith, noce_try_minmax, noce_try_abs,\n+\tnoce_try_sign_mask): Use end_ifcvt_sequence to factor common code.\n+\n 2004-06-24  Jeff Law  <law@redhat.com>\n \n \t* gimplify.c (gimplify_compound_lval): Reset TREE_SIDE_EFFECTS"}, {"sha": "9de5961a29e02253eb7ca57d90303a3612960ac1", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 64, "deletions": 66, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe0c61499096286867bcee0df3dfbba3d3f7cba/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe0c61499096286867bcee0df3dfbba3d3f7cba/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=0fe0c61499096286867bcee0df3dfbba3d3f7cba", "patch": "@@ -699,14 +699,32 @@ noce_emit_move_insn (rtx x, rtx y)\n \t\t   GET_MODE_BITSIZE (inmode));\n }\n \n-/* Unshare sequence SEQ produced by if conversion.  We care to mark\n-   all arguments that may be shared with outer instruction stream.  */\n-static void\n-unshare_ifcvt_sequence (struct noce_if_info *if_info, rtx seq)\n+/* Return sequence of instructions generated by if conversion.  This\n+   function calls end_sequence() to end the current stream, ensures\n+   that are instructions are unshared, recognizable non-jump insns.\n+   On failure, this function returns a NULL_RTX.  */\n+\n+static rtx\n+end_ifcvt_sequence (struct noce_if_info *if_info)\n {\n+  rtx y;\n+  rtx seq = get_insns ();\n+\n   set_used_flags (if_info->x);\n   set_used_flags (if_info->cond);\n   unshare_all_rtl_in_chain (seq);\n+  end_sequence ();\n+\n+  if (seq_contains_jump (seq))\n+    return NULL_RTX;\n+\n+  /* Make sure that all of the instructions emitted are recognizable.\n+     As an excersise for the reader, build a general mechanism that\n+     allows proper placement of required clobbers.  */\n+  for (y = seq; y ; y = NEXT_INSN (y))\n+    if (recog_memoized (y) == -1)\n+      return NULL_RTX;\n+  return seq;\n }\n \n /* Convert \"if (a != b) x = a; else x = b\" into \"x = a\" and\n@@ -742,17 +760,9 @@ noce_try_move (struct noce_if_info *if_info)\n \t{\n \t  start_sequence ();\n \t  noce_emit_move_insn (if_info->x, y);\n-\t  seq = get_insns ();\n-\t  unshare_ifcvt_sequence (if_info, seq);\n-\t  end_sequence ();\n-\n-\t  /* Make sure that all of the instructions emitted are\n-\t     recognizable.  As an excersise for the reader, build\n-\t     a general mechanism that allows proper placement of\n-\t     required clobbers.  */\n-\t  for (y = seq; y ; y = NEXT_INSN (y))\n-\t    if (recog_memoized (y) == -1)\n-\t      return FALSE;\n+\t  seq = end_ifcvt_sequence (if_info);\n+\t  if (!seq)\n+\t    return FALSE;\n \n \t  emit_insn_before_setloc (seq, if_info->jump,\n \t\t\t\t   INSN_LOCATOR (if_info->insn_a));\n@@ -795,11 +805,12 @@ noce_try_store_flag (struct noce_if_info *if_info)\n       if (target != if_info->x)\n \tnoce_emit_move_insn (if_info->x, target);\n \n-      seq = get_insns ();\n-      unshare_ifcvt_sequence (if_info, seq);\n-      end_sequence ();\n-      emit_insn_before_setloc (seq, if_info->jump, INSN_LOCATOR (if_info->insn_a));\n+      seq = end_ifcvt_sequence (if_info);\n+      if (! seq)\n+\treturn FALSE;\n \n+      emit_insn_before_setloc (seq, if_info->jump,\n+\t\t\t       INSN_LOCATOR (if_info->insn_a));\n       return TRUE;\n     }\n   else\n@@ -926,15 +937,12 @@ noce_try_store_flag_constants (struct noce_if_info *if_info)\n       if (target != if_info->x)\n \tnoce_emit_move_insn (if_info->x, target);\n \n-      seq = get_insns ();\n-      unshare_ifcvt_sequence (if_info, seq);\n-      end_sequence ();\n-\n-      if (seq_contains_jump (seq))\n+      seq = end_ifcvt_sequence (if_info);\n+      if (!seq)\n \treturn FALSE;\n \n-      emit_insn_before_setloc (seq, if_info->jump, INSN_LOCATOR (if_info->insn_a));\n-\n+      emit_insn_before_setloc (seq, if_info->jump,\n+\t\t\t       INSN_LOCATOR (if_info->insn_a));\n       return TRUE;\n     }\n \n@@ -978,11 +986,12 @@ noce_try_addcc (struct noce_if_info *if_info)\n \t      if (target != if_info->x)\n \t\tnoce_emit_move_insn (if_info->x, target);\n \n-\t      seq = get_insns ();\n-\t      unshare_ifcvt_sequence (if_info, seq);\n-\t      end_sequence ();\n+\t      seq = end_ifcvt_sequence (if_info);\n+\t      if (!seq)\n+\t\treturn FALSE;\n+\n \t      emit_insn_before_setloc (seq, if_info->jump,\n-\t\t\t\t      INSN_LOCATOR (if_info->insn_a));\n+\t\t\t\t       INSN_LOCATOR (if_info->insn_a));\n \t      return TRUE;\n \t    }\n \t  end_sequence ();\n@@ -1017,16 +1026,12 @@ noce_try_addcc (struct noce_if_info *if_info)\n \t      if (target != if_info->x)\n \t\tnoce_emit_move_insn (if_info->x, target);\n \n-\t      seq = get_insns ();\n-\t      unshare_ifcvt_sequence (if_info, seq);\n-\t      end_sequence ();\n-\n-\t      if (seq_contains_jump (seq))\n+\t      seq = end_ifcvt_sequence (if_info);\n+\t      if (!seq)\n \t\treturn FALSE;\n \n \t      emit_insn_before_setloc (seq, if_info->jump,\n-\t\t\t\t      INSN_LOCATOR (if_info->insn_a));\n-\n+\t\t\t\t       INSN_LOCATOR (if_info->insn_a));\n \t      return TRUE;\n \t    }\n \t  end_sequence ();\n@@ -1071,16 +1076,12 @@ noce_try_store_flag_mask (struct noce_if_info *if_info)\n \t  if (target != if_info->x)\n \t    noce_emit_move_insn (if_info->x, target);\n \n-\t  seq = get_insns ();\n-\t  unshare_ifcvt_sequence (if_info, seq);\n-\t  end_sequence ();\n-\n-\t  if (seq_contains_jump (seq))\n+\t  seq = end_ifcvt_sequence (if_info);\n+\t  if (!seq)\n \t    return FALSE;\n \n \t  emit_insn_before_setloc (seq, if_info->jump,\n-\t\t\t\t  INSN_LOCATOR (if_info->insn_a));\n-\n+\t\t\t\t   INSN_LOCATOR (if_info->insn_a));\n \t  return TRUE;\n \t}\n \n@@ -1169,11 +1170,12 @@ noce_try_cmove (struct noce_if_info *if_info)\n \t  if (target != if_info->x)\n \t    noce_emit_move_insn (if_info->x, target);\n \n-\t  seq = get_insns ();\n-\t  unshare_ifcvt_sequence (if_info, seq);\n-\t  end_sequence ();\n+\t  seq = end_ifcvt_sequence (if_info);\n+\t  if (!seq)\n+\t    return FALSE;\n+\n \t  emit_insn_before_setloc (seq, if_info->jump,\n-\t\t\t\t  INSN_LOCATOR (if_info->insn_a));\n+\t\t\t\t   INSN_LOCATOR (if_info->insn_a));\n \t  return TRUE;\n \t}\n       else\n@@ -1334,9 +1336,10 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n   else if (target != x)\n     noce_emit_move_insn (x, target);\n \n-  tmp = get_insns ();\n-  unshare_ifcvt_sequence (if_info, tmp);\n-  end_sequence ();\n+  tmp = end_ifcvt_sequence (if_info);\n+  if (!tmp)\n+    return FALSE;\n+\n   emit_insn_before_setloc (tmp, if_info->jump, INSN_LOCATOR (if_info->insn_a));\n   return TRUE;\n \n@@ -1580,11 +1583,8 @@ noce_try_minmax (struct noce_if_info *if_info)\n   if (target != if_info->x)\n     noce_emit_move_insn (if_info->x, target);\n \n-  seq = get_insns ();\n-  unshare_ifcvt_sequence (if_info, seq);\n-  end_sequence ();\n-\n-  if (seq_contains_jump (seq))\n+  seq = end_ifcvt_sequence (if_info);\n+  if (!seq)\n     return FALSE;\n \n   emit_insn_before_setloc (seq, if_info->jump, INSN_LOCATOR (if_info->insn_a));\n@@ -1698,11 +1698,8 @@ noce_try_abs (struct noce_if_info *if_info)\n   if (target != if_info->x)\n     noce_emit_move_insn (if_info->x, target);\n \n-  seq = get_insns ();\n-  unshare_ifcvt_sequence (if_info, seq);\n-  end_sequence ();\n-\n-  if (seq_contains_jump (seq))\n+  seq = end_ifcvt_sequence (if_info);\n+  if (!seq)\n     return FALSE;\n \n   emit_insn_before_setloc (seq, if_info->jump, INSN_LOCATOR (if_info->insn_a));\n@@ -1768,11 +1765,12 @@ noce_try_sign_mask (struct noce_if_info *if_info)\n     }\n \n   noce_emit_move_insn (if_info->x, t);\n-  seq = get_insns ();\n-  unshare_ifcvt_sequence (if_info, seq);\n-  end_sequence ();\n-  emit_insn_before_setloc (seq, if_info->jump,\n-\t\t\t   INSN_LOCATOR (if_info->insn_a));\n+\n+  seq = end_ifcvt_sequence (if_info);\n+  if (!seq)\n+    return FALSE;\n+\n+  emit_insn_before_setloc (seq, if_info->jump, INSN_LOCATOR (if_info->insn_a));\n   return TRUE;\n }\n "}, {"sha": "048a30898060d064440381793ac6b301f8de61a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe0c61499096286867bcee0df3dfbba3d3f7cba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe0c61499096286867bcee0df3dfbba3d3f7cba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0fe0c61499096286867bcee0df3dfbba3d3f7cba", "patch": "@@ -1,3 +1,8 @@\n+2004-06-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/15825\n+\t* gcc.dg/pr15825-1.c: New test case.\n+\n 2004-06-25  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.c-torture/execute/20040625-1.c: New test."}, {"sha": "a4b46d44404da8061147956f11aa1d63c1e1c012", "filename": "gcc/testsuite/gcc.dg/pr15825-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fe0c61499096286867bcee0df3dfbba3d3f7cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15825-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fe0c61499096286867bcee0df3dfbba3d3f7cba/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15825-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15825-1.c?ref=0fe0c61499096286867bcee0df3dfbba3d3f7cba", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/15825 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+unsigned int foo(long long high, int unsigned_p)\n+{\n+  int i;\n+  if (high < 0)\n+    if (!unsigned_p)\n+    {\n+      i = 1;\n+      goto t;\n+    }\n+  i = 0;\n+t:\n+  return i;\n+}\n+"}]}