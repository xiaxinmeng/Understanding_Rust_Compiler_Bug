{"sha": "36c1b0def4a4672a93e846c610e19a1a15f4e17d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZjMWIwZGVmNGE0NjcyYTkzZTg0NmM2MTBlMTlhMWExNWY0ZTE3ZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-07-08T19:50:17Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-08T19:50:17Z"}, "message": "c-decl.c (static_ctors, [...]): Make static.\n\n\t* c-decl.c (static_ctors, static_dtors): Make static.\n\t(pop_file_scope): Call c_common_write_pch and\n\tcgraph_finalize_compilation_unit here.\n\t(build_cdtor): Moved here from c-objc-common.c; simplify.\n\t(c_write_global_declarations_1): Clarify comment.\n\t(c_write_global_declarations): Close the external scope before\n\tdoing anything else.  Call build_cdtor, cgraph_optimize, and\n\tmudflap_finish_file here.\n\t* c-lang.c (finish_file): Don't call c_objc_common_finish_file.\n\tClarify comment.\n\t* c-objc-common.c: No need to include cgraph.h.\n\t(build_cdtor): Moved to c-decl.c.\n\t(c_objc_common_finish_file): Delete.\n\t* c-tree.h: Update to match.\n\t* objc/objc-act.c (finish_file): Don't call c_objc_common_finish_file.\n\t(generate_static_references): Set TREE_USED before calling finish_decl.\n\tEliminate unnecessary dummy declaration.  Call rest_of_decl_compilation\n\ton the static_instances_decl.\n\nFrom-SVN: r84307", "tree": {"sha": "b5d1f5dae24cf0c3994f99d911989c25185e3b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5d1f5dae24cf0c3994f99d911989c25185e3b7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36c1b0def4a4672a93e846c610e19a1a15f4e17d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c1b0def4a4672a93e846c610e19a1a15f4e17d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c1b0def4a4672a93e846c610e19a1a15f4e17d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c1b0def4a4672a93e846c610e19a1a15f4e17d/comments", "author": null, "committer": null, "parents": [{"sha": "5b02f0e0046d946792d7e05b569cb6d2c54442ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b02f0e0046d946792d7e05b569cb6d2c54442ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b02f0e0046d946792d7e05b569cb6d2c54442ee"}], "stats": {"total": 154, "additions": 81, "deletions": 73}, "files": [{"sha": "01d05546ba00fec8599fcfd1ef327522e2d7634a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36c1b0def4a4672a93e846c610e19a1a15f4e17d", "patch": "@@ -1,3 +1,24 @@\n+2004-07-08  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-decl.c (static_ctors, static_dtors): Make static.\n+\t(pop_file_scope): Call c_common_write_pch and\n+\tcgraph_finalize_compilation_unit here.\n+\t(build_cdtor): Moved here from c-objc-common.c; simplify.\n+\t(c_write_global_declarations_1): Clarify comment.\n+\t(c_write_global_declarations): Close the external scope before\n+\tdoing anything else.  Call build_cdtor, cgraph_optimize, and\n+\tmudflap_finish_file here.\n+\t* c-lang.c (finish_file): Don't call c_objc_common_finish_file.\n+\tClarify comment.\n+\t* c-objc-common.c: No need to include cgraph.h.\n+\t(build_cdtor): Moved to c-decl.c.\n+\t(c_objc_common_finish_file): Delete.\n+\t* c-tree.h: Update to match.\n+\t* objc/objc-act.c (finish_file): Don't call c_objc_common_finish_file.\n+\t(generate_static_references): Set TREE_USED before calling finish_decl.\n+\tEliminate unnecessary dummy declaration.  Call rest_of_decl_compilation\n+\ton the static_instances_decl.\n+\n 2004-07-08  Zack Weinberg  <zack@codesourcery.com>\n \n \t* c-decl.c (pop_scope): Do not set DECL_CONTEXT on file-scope"}, {"sha": "8346c8a82e779b22f49266fbee771660140fadf9", "filename": "gcc/c-decl.c", "status": "modified", "additions": 55, "deletions": 15, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=36c1b0def4a4672a93e846c610e19a1a15f4e17d", "patch": "@@ -377,7 +377,8 @@ static bool next_is_function_body;\n \n /* Functions called automatically at the beginning and end of execution.  */\n \n-tree static_ctors, static_dtors;\n+static GTY(()) tree static_ctors;\n+static GTY(()) tree static_dtors;\n \n /* Forward declarations.  */\n static tree lookup_name_in_scope (tree, struct c_scope *);\n@@ -853,17 +854,19 @@ pop_file_scope (void)\n      still works without it.  */\n   finish_fname_decls ();\n \n-  /* Kludge: don't actually pop the file scope if generating a\n-     precompiled header, so that macros and local symbols are still\n-     visible to the PCH generator.  */\n+  /* This is the point to write out a PCH if we're doing that.\n+     In that case we do not want to do anything else.  */\n   if (pch_file)\n-    return;\n+    {\n+      c_common_write_pch ();\n+      return;\n+    }\n \n-  /* And pop off the file scope.  */\n+  /* Pop off the file scope and close this translation unit.  */\n   pop_scope ();\n   file_scope = 0;\n-\n   cpp_undef_all (parse_in);\n+  cgraph_finalize_compilation_unit ();\n }\n \n /* Insert BLOCK at the end of the list of subblocks of the current\n@@ -6580,7 +6583,26 @@ make_pointer_declarator (tree type_quals_attrs, tree target)\n   return build1 (INDIRECT_REF, quals, itarget);\n }\n \n-/* Perform final processing on file-scope data.  */\n+/* Synthesize a function which calls all the global ctors or global\n+   dtors in this file.  This is only used for targets which do not\n+   support .ctors/.dtors sections.  FIXME: Migrate into cgraph.  */\n+static void\n+build_cdtor (int method_type, tree cdtors)\n+{\n+  tree body = 0;\n+\n+  if (!cdtors)\n+    return;\n+\n+  for (; cdtors; cdtors = TREE_CHAIN (cdtors))\n+    append_to_statement_list (build_function_call (TREE_VALUE (cdtors), 0),\n+\t\t\t      &body);\n+\n+  cgraph_build_static_cdtor (method_type, body);\n+}\n+\n+/* Perform final processing on one file scope's declarations (or the\n+   external scope's declarations), GLOBALS.  */\n static void\n c_write_global_declarations_1 (tree globals)\n {\n@@ -6602,20 +6624,38 @@ c_write_global_declarations_1 (tree globals)\n void\n c_write_global_declarations (void)\n {\n-  tree t;\n+  tree ext_block, t;\n \n   /* We don't want to do this if generating a PCH.  */\n   if (pch_file)\n     return;\n \n-  /* Process all file scopes in this compilation.  */\n+  /* Close the external scope.  */\n+  ext_block = pop_scope ();\n+  external_scope = 0;\n+  if (current_scope)\n+    abort ();\n+\n+  /* Process all file scopes in this compilation, and the external_scope,\n+     through wrapup_global_declarations and check_global_declarations.  */\n   for (t = all_translation_units; t; t = TREE_CHAIN (t))\n     c_write_global_declarations_1 (BLOCK_VARS (DECL_INITIAL (t)));\n-\n-  /* Now do the same for the externals scope.  */\n-  t = pop_scope ();\n-  if (t)\n-    c_write_global_declarations_1 (BLOCK_VARS (t));\n+  c_write_global_declarations_1 (BLOCK_VARS (ext_block));\n+\n+  /* Generate functions to call static constructors and destructors\n+     for targets that do not support .ctors/.dtors sections.  These\n+     functions have magic names which are detected by collect2.  */\n+  build_cdtor ('I', static_ctors); static_ctors = 0;\n+  build_cdtor ('D', static_dtors); static_dtors = 0;\n+\n+  /* We're done parsing; proceed to optimize and emit assembly.\n+     FIXME: shouldn't be the front end's responsibility to call this.  */\n+  cgraph_optimize ();\n+\n+  /* Presently this has to happen after cgraph_optimize.\n+     FIXME: shouldn't be the front end's responsibility to call this.  */\n+  if (flag_mudflap)\n+    mudflap_finish_file ();\n }\n \n #include \"gt-c-decl.h\""}, {"sha": "1a3b2500dd28c152eea1cf1c45019af31ecb9e99", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=36c1b0def4a4672a93e846c610e19a1a15f4e17d", "patch": "@@ -197,10 +197,11 @@ const char *const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n+/* Final processing of file-scope data.  The Objective-C version of\n+   this function still does something.  */\n void\n finish_file (void)\n {\n-  c_objc_common_finish_file ();\n }\n \n int"}, {"sha": "28da7e6afacdb6470c37599a6b9953b92267d85b", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=36c1b0def4a4672a93e846c610e19a1a15f4e17d", "patch": "@@ -38,7 +38,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"langhooks.h\"\n #include \"tree-mudflap.h\"\n #include \"target.h\"\n-#include \"cgraph.h\"\n \n static bool c_tree_printer (pretty_printer *, text_info *);\n \n@@ -183,50 +182,6 @@ c_objc_common_init (void)\n   return true;\n }\n \n-/* Synthesize a function which calls all the global ctors or global dtors\n-   in this file.  */\n-\n-static void\n-build_cdtor (int method_type, tree cdtors)\n-{\n-  tree body;\n-\n-  body = push_stmt_list ();\n-\n-  for (; cdtors; cdtors = TREE_CHAIN (cdtors))\n-    add_stmt (build_function_call (TREE_VALUE (cdtors), NULL_TREE));\n-\n-  body = pop_stmt_list (body);\n-\n-  cgraph_build_static_cdtor (method_type, body);\n-}\n-\n-/* Called at end of parsing, but before end-of-file processing.  */\n-\n-void\n-c_objc_common_finish_file (void)\n-{\n-  if (pch_file)\n-    c_common_write_pch ();\n-\n-  if (static_ctors)\n-    {\n-      build_cdtor ('I', static_ctors);\n-      static_ctors = 0;\n-    }\n-  if (static_dtors)\n-    {\n-      build_cdtor ('D', static_dtors);\n-      static_dtors = 0;\n-    }\n-\n-  cgraph_finalize_compilation_unit ();\n-  cgraph_optimize ();\n-\n-  if (flag_mudflap)\n-    mudflap_finish_file ();\n-}\n-\n /* Called during diagnostic message formatting process to print a\n    source-level entity onto BUFFER.  The meaning of the format specifiers\n    is as follows:"}, {"sha": "5eb2e81e4795fb80e5641e4d20f72dc7fd2e7283", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=36c1b0def4a4672a93e846c610e19a1a15f4e17d", "patch": "@@ -197,7 +197,6 @@ extern int c_cannot_inline_tree_fn (tree *);\n extern bool c_objc_common_init (void);\n extern bool c_missing_noreturn_ok_p (tree);\n extern tree c_objc_common_truthvalue_conversion (tree expr);\n-extern void c_objc_common_finish_file (void);\n extern int defer_fn (tree);\n extern bool c_warn_unused_global_decl (tree);\n extern void c_initialize_diagnostics (diagnostic_context *);\n@@ -298,9 +297,6 @@ extern void *get_current_scope (void);\n extern void objc_mark_locals_volatile (void *);\n extern void c_write_global_declarations (void);\n \n-extern GTY(()) tree static_ctors;\n-extern GTY(()) tree static_dtors;\n-\n /* In order for the format checking to accept the C frontend\n    diagnostic framework extensions, you must include this file before\n    toplev.h, not after.  */"}, {"sha": "3f17ba78bd6d9b1e59e3d3d5ca7be81528ee7b43", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c1b0def4a4672a93e846c610e19a1a15f4e17d/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=36c1b0def4a4672a93e846c610e19a1a15f4e17d", "patch": "@@ -519,7 +519,6 @@ void\n finish_file (void)\n {\n   mark_referenced_methods ();\n-  c_objc_common_finish_file ();\n \n   /* Finalize Objective-C runtime data.  No need to generate tables\n      and code if only checking syntax.  */\n@@ -1959,7 +1958,7 @@ generate_static_references (void)\n {\n   tree decls = NULL_TREE, ident, decl_spec, expr_decl, expr = NULL_TREE;\n   tree class_name, class, decl, initlist;\n-  tree cl_chain, in_chain, type;\n+  tree cl_chain, in_chain;\n   int num_inst, num_class;\n   char buf[256];\n \n@@ -1982,6 +1981,7 @@ generate_static_references (void)\n       decl = start_decl (expr_decl, decl_spec, 1, NULL_TREE);\n       DECL_CONTEXT (decl) = 0;\n       DECL_ARTIFICIAL (decl) = 1;\n+      TREE_USED (decl) = 1;\n \n       /* Output {class_name, ...}.  */\n       class = TREE_VALUE (cl_chain);\n@@ -2002,12 +2002,6 @@ generate_static_references (void)\n \n       expr = objc_build_constructor (TREE_TYPE (decl), nreverse (initlist));\n       finish_decl (decl, expr, NULL_TREE);\n-      TREE_USED (decl) = 1;\n-\n-      type = build_array_type (build_pointer_type (void_type_node), 0);\n-      decl = build_decl (VAR_DECL, ident, type);\n-      TREE_USED (decl) = 1;\n-      TREE_STATIC (decl) = 1;\n       decls\n \t= tree_cons (NULL_TREE, build_unary_op (ADDR_EXPR, decl, 1), decls);\n     }\n@@ -2026,6 +2020,7 @@ generate_static_references (void)\n   expr = objc_build_constructor (TREE_TYPE (static_instances_decl),\n \t\t\t    nreverse (decls));\n   finish_decl (static_instances_decl, expr, NULL_TREE);\n+  rest_of_decl_compilation (static_instances_decl, 0, 0, 0);\n }\n \n /* Output all strings.  */"}]}