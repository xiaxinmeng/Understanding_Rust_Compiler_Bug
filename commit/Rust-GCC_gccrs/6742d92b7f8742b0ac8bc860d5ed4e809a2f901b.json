{"sha": "6742d92b7f8742b0ac8bc860d5ed4e809a2f901b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc0MmQ5MmI3Zjg3NDJiMGFjOGJjODYwZDVlZDRlODA5YTJmOTAxYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-10-15T16:01:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-10-15T16:01:02Z"}, "message": "init.c (build_delete): Do not apply save_expr for arrays.\n\ncp:\n\t* init.c (build_delete): Do not apply save_expr for arrays.\n\t(build_vec_delete): Likewise.\ntestsuite:\n\t* g++.dg/init/ctor1.C: New test.\n\nFrom-SVN: r58166", "tree": {"sha": "7e2dd26404c44cb9b3f4ad7db5d3abb4793d1ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e2dd26404c44cb9b3f4ad7db5d3abb4793d1ae9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b/comments", "author": null, "committer": null, "parents": [{"sha": "c034672ab8165e27126122152c638217bfd57974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c034672ab8165e27126122152c638217bfd57974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c034672ab8165e27126122152c638217bfd57974"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "cce0b8e7c46569c8e3217a63a1374b69480a7a3d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6742d92b7f8742b0ac8bc860d5ed4e809a2f901b", "patch": "@@ -1,3 +1,8 @@\n+2002-10-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* init.c (build_delete): Do not apply save_expr for arrays.\n+\t(build_vec_delete): Likewise.\n+\n 2002-10-14  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (layout_var_decl): Call layout_decl even for variables "}, {"sha": "3e71e9f1a860029611dd1c12a712d08883f4b558", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=6742d92b7f8742b0ac8bc860d5ed4e809a2f901b", "patch": "@@ -3099,8 +3099,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n     handle_array:\n-      if (TREE_SIDE_EFFECTS (addr))\n-\taddr = save_expr (addr);\n+      \n       if (TYPE_DOMAIN (type) == NULL_TREE)\n \t{\n \t  error (\"unknown array size in delete\");\n@@ -3342,15 +3341,13 @@ build_vec_delete (base, maxindex, auto_delete_vec, use_global_delete)\n \n   base = stabilize_reference (base);\n \n-  /* Since we can use base many times, save_expr it.  */\n-  if (TREE_SIDE_EFFECTS (base))\n-    base = save_expr (base);\n-\n   if (TREE_CODE (type) == POINTER_TYPE)\n     {\n       /* Step back one from start of vector, and read dimension.  */\n       tree cookie_addr;\n \n+      if (TREE_SIDE_EFFECTS (base))\n+\tbase = save_expr (base);\n       type = strip_array_types (TREE_TYPE (type));\n       cookie_addr = build (MINUS_EXPR,\n \t\t\t   build_pointer_type (sizetype),\n@@ -3364,6 +3361,8 @@ build_vec_delete (base, maxindex, auto_delete_vec, use_global_delete)\n       maxindex = array_type_nelts_total (type);\n       type = strip_array_types (type);\n       base = build_unary_op (ADDR_EXPR, base, 1);\n+      if (TREE_SIDE_EFFECTS (base))\n+\tbase = save_expr (base);\n     }\n   else\n     {"}, {"sha": "5b77af5325e0f10d54deffe25f8f34fd6a09d853", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6742d92b7f8742b0ac8bc860d5ed4e809a2f901b", "patch": "@@ -1,3 +1,7 @@\n+2002-10-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/init/ctor1.C: New test.\n+\n 2002-10-15  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* gcc.c-torture/execute/20021015-1.c: New test."}, {"sha": "aeb509bfa5d64956dbffaee91b30bd4e686dbec1", "filename": "gcc/testsuite/g++.dg/init/ctor1.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6742d92b7f8742b0ac8bc860d5ed4e809a2f901b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor1.C?ref=6742d92b7f8742b0ac8bc860d5ed4e809a2f901b", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 12 Oct 2002 <nathan@codesourcery.com>\n+\n+// From WindRiver SPR 80797\n+// We were inadvertently SAVE_EXPRing volatile arrays during delete[]\n+\n+struct A\n+{\n+  A *ptr;\n+  static int ok;\n+  \n+  A () {ptr = this;}\n+  ~A () {ok = ptr == this;}\n+};\n+int A::ok = -1;\n+\n+struct B\n+{\n+  B *ptr;\n+  static int ok;\n+  \n+  B () {ptr = this;}\n+  ~B () {ok = ptr == this;}\n+};\n+int B::ok = -1;\n+\n+struct C\n+{\n+  A volatile a;\n+  B volatile b[1];\n+\n+  C ();\n+};\n+\n+C::C ()\n+{\n+  throw 1;\n+}\n+\n+int main ()\n+{\n+  try\n+    {\n+      C c;\n+    }\n+  catch (...)\n+    {\n+      if (A::ok != 1)\n+\treturn 1;\n+      if (B::ok != 1)\n+\treturn 2;\n+      return 0;\n+    }\n+  return 3;\n+}"}]}