{"sha": "b91cc3b9dcc840b259b0d7e6551b047a42695f87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkxY2MzYjlkY2M4NDBiMjU5YjBkN2U2NTUxYjA0N2E0MjY5NWY4Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-05-03T16:51:50Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-05-03T16:51:50Z"}, "message": "settings.h (get): Mark const.\n\n\t* include/parallel/settings.h (get): Mark const.\n\t* libsupc++/unwind-cxx.h (__cxa_call_terminate): Mark throw ().\n\t* libsupc++/eh_call.cc (__cxa_call_terminate): Mark throw ().\n\t* config/io/basic_file_stdio.cc (sys_open, is_open, fd, seekoff): Mark\n\tthrow ().\n\t* config/io/basic_file_stdio.h (__basic_file, sys_open): Mark throw ().\n\t(is_open, fd): Mark pure and throw ().\n\t(seekoff): Mark throw ().\n\nFrom-SVN: r147077", "tree": {"sha": "9782ea6d96c8f32b927dedaf2e417a7706ad8744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9782ea6d96c8f32b927dedaf2e417a7706ad8744"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b91cc3b9dcc840b259b0d7e6551b047a42695f87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91cc3b9dcc840b259b0d7e6551b047a42695f87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b91cc3b9dcc840b259b0d7e6551b047a42695f87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91cc3b9dcc840b259b0d7e6551b047a42695f87/comments", "author": null, "committer": null, "parents": [{"sha": "bd67512af1cd143d69c499b570fd06a3e1924ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd67512af1cd143d69c499b570fd06a3e1924ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd67512af1cd143d69c499b570fd06a3e1924ac1"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "b42f17990259c44e3746bc4b114dff49977d595f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b91cc3b9dcc840b259b0d7e6551b047a42695f87", "patch": "@@ -1,3 +1,14 @@\n+2009-05-03  Jan Hubicka  <jh@suse.cz>\n+\n+\t* include/parallel/settings.h (get): Mark const.\n+\t* libsupc++/unwind-cxx.h (__cxa_call_terminate): Mark throw ().\n+\t* libsupc++/eh_call.cc (__cxa_call_terminate): Mark throw ().\n+\t* config/io/basic_file_stdio.cc (sys_open, is_open, fd, seekoff): Mark\n+\tthrow ().\n+\t* config/io/basic_file_stdio.h (__basic_file, sys_open): Mark throw ().\n+\t(is_open, fd): Mark pure and throw ().\n+\t(seekoff): Mark throw ().\n+\n 2009-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* acinclude.m4 ([GLIBCXX_ENABLE_ATOMIC_BUILTINS]): Do link tests when"}, {"sha": "b07a48360f09584aea12cb11bb02f010677a7409", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=b91cc3b9dcc840b259b0d7e6551b047a42695f87", "patch": "@@ -210,7 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n   \n   __basic_file<char>*\n-  __basic_file<char>::sys_open(int __fd, ios_base::openmode __mode)\n+  __basic_file<char>::sys_open(int __fd, ios_base::openmode __mode) throw ()\n   {\n     __basic_file* __ret = NULL;\n     const char* __c_mode = fopen_mode(__mode);\n@@ -247,15 +247,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n   \n   bool \n-  __basic_file<char>::is_open() const \n+  __basic_file<char>::is_open() const throw ()\n   { return _M_cfile != 0; }\n   \n   int \n-  __basic_file<char>::fd() \n+  __basic_file<char>::fd() throw ()\n   { return fileno(_M_cfile); }\n   \n   __c_file*\n-  __basic_file<char>::file() \n+  __basic_file<char>::file() throw ()\n   { return _M_cfile; }\n   \n   __basic_file<char>* \n@@ -315,7 +315,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   }\n \n   streamoff\n-  __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way)\n+  __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way) throw ()\n   {\n #ifdef _GLIBCXX_USE_LFS\n     return lseek64(this->fd(), __off, __way);"}, {"sha": "7f30c4e81e9c8f0e3a15712693677a1627c01136", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=b91cc3b9dcc840b259b0d7e6551b047a42695f87", "patch": "@@ -58,7 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       bool \t\t_M_cfile_created;\n \n     public:\n-      __basic_file(__c_lock* __lock = 0);\n+      __basic_file(__c_lock* __lock = 0) throw ();\n \n       __basic_file* \n       open(const char* __name, ios_base::openmode __mode, int __prot = 0664);\n@@ -67,19 +67,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       sys_open(__c_file* __file, ios_base::openmode);\n \n       __basic_file*\n-      sys_open(int __fd, ios_base::openmode __mode);\n+      sys_open(int __fd, ios_base::openmode __mode) throw ();\n \n       __basic_file* \n       close(); \n \n-      bool \n-      is_open() const;\n+      _GLIBCXX_PURE bool \n+      is_open() const throw ();\n \n-      int \n-      fd();\n+      _GLIBCXX_PURE int \n+      fd() throw ();\n \n-      __c_file*\n-      file();\n+      _GLIBCXX_PURE __c_file*\n+      file() throw ();\n \n       ~__basic_file();\n \n@@ -94,7 +94,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       xsgetn(char* __s, streamsize __n);\n \n       streamoff\n-      seekoff(streamoff __off, ios_base::seekdir __way);\n+      seekoff(streamoff __off, ios_base::seekdir __way) throw ();\n \n       int \n       sync();"}, {"sha": "e4873b4100b50ada9ddab7c1b84517965dbc9c2d", "filename": "libstdc++-v3/include/parallel/settings.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fsettings.h?ref=b91cc3b9dcc840b259b0d7e6551b047a42695f87", "patch": "@@ -265,7 +265,7 @@ namespace __gnu_parallel\n     sequence_index_t \t\tqsb_steals;\n \n     /// Get the global settings.\n-    static const _Settings&\n+    _GLIBCXX_CONST static const _Settings&\n     get() throw();\n \n     /// Set the global settings."}, {"sha": "0054e52016d586b4f9fd758310a3a2ce850f9e52", "filename": "libstdc++-v3/libsupc++/eh_call.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc?ref=b91cc3b9dcc840b259b0d7e6551b047a42695f87", "patch": "@@ -37,7 +37,7 @@ using namespace __cxxabiv1;\n // terminate.\n \n extern \"C\" void\n-__cxa_call_terminate(_Unwind_Exception* ue_header)\n+__cxa_call_terminate(_Unwind_Exception* ue_header) throw ()\n {\n \n   if (ue_header)"}, {"sha": "6033caf1705ef934ba33271c3b77eb5d3000ac40", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91cc3b9dcc840b259b0d7e6551b047a42695f87/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=b91cc3b9dcc840b259b0d7e6551b047a42695f87", "patch": "@@ -187,7 +187,7 @@ extern \"C\" void __cxa_bad_typeid () __attribute__((__noreturn__));\n // throws, and if bad_exception needs to be thrown.  Called from the\n // compiler.\n extern \"C\" void __cxa_call_unexpected (void *) __attribute__((noreturn));\n-extern \"C\" void __cxa_call_terminate (_Unwind_Exception*) __attribute__((noreturn));\n+extern \"C\" void __cxa_call_terminate (_Unwind_Exception*) throw () __attribute__((noreturn));\n \n #ifdef __ARM_EABI_UNWINDER__\n // Arm EABI specified routines."}]}