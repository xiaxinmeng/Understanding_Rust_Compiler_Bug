{"sha": "34e9407b3b4298bd587e0df2e0047679019b66cf", "node_id": "C_kwDOANBUbNoAKDM0ZTk0MDdiM2I0Mjk4YmQ1ODdlMGRmMmUwMDQ3Njc5MDE5YjY2Y2Y", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-20T21:36:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:36:55Z"}, "message": "libstdc++: Make std::jthread support pointers to member functions [PR 100612]\n\nThis adds a non-standard extension to support initializing a\nstd::jthread with a pointer to a member function that expects a\nstop_token to be added to the arguments. That use case is not supported\nby C++20, because the stop_token would get added as the first argument,\nwhich is where the object argument needs to be to invoke a pointer to\nmember function.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100612\n\t* include/std/thread (__pmf_expects_stop_token): New variable\n\ttemplate to detect a pointer to member function that needs a\n\tstop_token to be added to the arguments.\n\t(jthread::__S_create): Use __pmf_expects_stop_token.\n\t(jthread::__S_create_pmf): New function.\n\t* testsuite/30_threads/jthread/100612.cc: New test.", "tree": {"sha": "3421a67def4b876e75759a78354341efc795dc3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3421a67def4b876e75759a78354341efc795dc3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34e9407b3b4298bd587e0df2e0047679019b66cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e9407b3b4298bd587e0df2e0047679019b66cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e9407b3b4298bd587e0df2e0047679019b66cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e9407b3b4298bd587e0df2e0047679019b66cf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e8fb5e48279ffa5f424e3dd0bb3dfcbe69f5d5"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "46519086aae4537c5f1d6c69a15b96b3ca051d92", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e9407b3b4298bd587e0df2e0047679019b66cf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e9407b3b4298bd587e0df2e0047679019b66cf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=34e9407b3b4298bd587e0df2e0047679019b66cf", "patch": "@@ -99,6 +99,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef __cpp_lib_jthread\n \n+#ifndef __STRICT_ANSI__\n+    template<typename _Callable, typename... _Args>\n+      constexpr bool __pmf_expects_stop_token = false;\n+\n+    template<typename _Callable, typename _Obj, typename... _Args>\n+      constexpr bool __pmf_expects_stop_token<_Callable, _Obj, _Args...>\n+\t= __and_<is_member_function_pointer<remove_reference_t<_Callable>>,\n+\t\t is_invocable<_Callable, _Obj, stop_token, _Args...>>::value;\n+#endif\n+\n   /// A thread that can be requested to stop and automatically joined.\n   class jthread\n   {\n@@ -211,6 +221,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static thread\n       _S_create(stop_source& __ssrc, _Callable&& __f, _Args&&... __args)\n       {\n+#ifndef __STRICT_ANSI__\n+\tif constexpr (__pmf_expects_stop_token<_Callable, _Args...>)\n+\t  return _S_create_pmf(__ssrc, __f, std::forward<_Args>(__args)...);\n+\telse\n+#endif\n \tif constexpr(is_invocable_v<decay_t<_Callable>, stop_token,\n \t\t\t\t    decay_t<_Args>...>)\n \t  return thread{std::forward<_Callable>(__f), __ssrc.get_token(),\n@@ -226,6 +241,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n+#ifndef __STRICT_ANSI__\n+    template<typename _Callable, typename _Obj, typename... _Args>\n+      static thread\n+      _S_create_pmf(stop_source& __ssrc, _Callable __f, _Obj&& __obj,\n+\t\t    _Args&&... __args)\n+      {\n+\treturn thread{__f, std::forward<_Obj>(__obj), __ssrc.get_token(),\n+\t\t      std::forward<_Args>(__args)...};\n+      }\n+#endif\n+\n     stop_source _M_stop_source;\n     thread _M_thread;\n   };"}, {"sha": "d6c81706b8f541d2e6aa7a2ed99ed6488158d8f7", "filename": "libstdc++-v3/testsuite/30_threads/jthread/100612.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e9407b3b4298bd587e0df2e0047679019b66cf/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fjthread%2F100612.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e9407b3b4298bd587e0df2e0047679019b66cf/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fjthread%2F100612.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fjthread%2F100612.cc?ref=34e9407b3b4298bd587e0df2e0047679019b66cf", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+// { dg-additional-options \"-pthread\" { target pthread } }\n+// { dg-require-gthreads \"\" }\n+\n+#include <thread>\n+\n+void\n+test_pfm()\n+{\n+  // PR libstdc++/100612\n+  struct X\n+  {\n+    void run(std::stop_token) { }\n+    void run_arg(int) { }\n+    void run_args(std::stop_token, int, int) { }\n+  };\n+\n+  X x;\n+\n+  std::jthread{&X::run, &x};\n+  std::jthread{&X::run_arg, &x, 1};\n+  std::jthread{&X::run_args, &x, 1, 1};\n+}"}]}