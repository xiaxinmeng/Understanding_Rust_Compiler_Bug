{"sha": "d36eb6bf6d3e320a6c5109309661793073150135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM2ZWI2YmY2ZDNlMzIwYTZjNTEwOTMwOTY2MTc5MzA3MzE1MDEzNQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2017-12-09T19:53:55Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2017-12-09T19:53:55Z"}, "message": "re PR fortran/82934 (Segfault on assumed character length in allocate)\n\n2017-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/82934\n\tPR fortran/83318\n\t* match.c (gfc_match_allocate): Enforce F2008:C631.\n\n2017-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/82934\n\tPR fortran/83318\n\t* gfortran.dg/allocate_assumed_charlen_2.f90: new test.\n\nFrom-SVN: r255524", "tree": {"sha": "09bbca8ee3d8a6d71d043b4b067cdaaaa390ac69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09bbca8ee3d8a6d71d043b4b067cdaaaa390ac69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d36eb6bf6d3e320a6c5109309661793073150135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36eb6bf6d3e320a6c5109309661793073150135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d36eb6bf6d3e320a6c5109309661793073150135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36eb6bf6d3e320a6c5109309661793073150135/comments", "author": null, "committer": null, "parents": [{"sha": "0eb952ea5eab6a299283635625cef497e831dae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eb952ea5eab6a299283635625cef497e831dae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eb952ea5eab6a299283635625cef497e831dae4"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "c98c64b7059b4b2c0b3e65080b88de270250d025", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36eb6bf6d3e320a6c5109309661793073150135/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36eb6bf6d3e320a6c5109309661793073150135/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d36eb6bf6d3e320a6c5109309661793073150135", "patch": "@@ -1,3 +1,9 @@\n+2017-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/82934\n+\tPR fortran/83318\n+\t* match.c (gfc_match_allocate): Enforce F2008:C631.\n+\n 2017-12-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/83316"}, {"sha": "c5bdce21184fc23e605e93cce720b4e157473d2d", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36eb6bf6d3e320a6c5109309661793073150135/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36eb6bf6d3e320a6c5109309661793073150135/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=d36eb6bf6d3e320a6c5109309661793073150135", "patch": "@@ -3960,9 +3960,9 @@ gfc_match_allocate (void)\n   gfc_typespec ts;\n   gfc_symbol *sym;\n   match m;\n-  locus old_locus, deferred_locus;\n+  locus old_locus, deferred_locus, assumed_locus;\n   bool saw_stat, saw_errmsg, saw_source, saw_mold, saw_deferred, b1, b2, b3;\n-  bool saw_unlimited = false;\n+  bool saw_unlimited = false, saw_assumed = false;\n \n   head = tail = NULL;\n   stat = errmsg = source = mold = tmp = NULL;\n@@ -3993,6 +3993,9 @@ gfc_match_allocate (void)\n     }\n   else\n     {\n+      /* Needed for the F2008:C631 check below. */\n+      assumed_locus = gfc_current_locus;\n+\n       if (gfc_match (\" :: \") == MATCH_YES)\n \t{\n \t  if (!gfc_notify_std (GFC_STD_F2003, \"typespec in ALLOCATE at %L\",\n@@ -4007,15 +4010,19 @@ gfc_match_allocate (void)\n \t    }\n \n \t  if (ts.type == BT_CHARACTER)\n-\t    ts.u.cl->length_from_typespec = true;\n+\t    {\n+\t      if (!ts.u.cl->length)\n+\t\tsaw_assumed = true;\n+\t      else\n+\t\tts.u.cl->length_from_typespec = true;\n+\t    }\n \n-\t  /* TODO understand why this error does not appear but, instead,\n-\t     the derived type is caught as a variable in primary.c.  */\n-\t  if (gfc_spec_list_type (type_param_spec_list, NULL) != SPEC_EXPLICIT)\n+\t  if (type_param_spec_list\n+\t      && gfc_spec_list_type (type_param_spec_list, NULL)\n+\t\t == SPEC_DEFERRED)\n \t    {\n \t      gfc_error (\"The type parameter spec list in the type-spec at \"\n-\t\t\t \"%L cannot contain ASSUMED or DEFERRED parameters\",\n-\t\t\t &old_locus);\n+\t\t\t \"%L cannot contain DEFERRED parameters\", &old_locus);\n \t      goto cleanup;\n \t    }\n \t}\n@@ -4055,6 +4062,19 @@ gfc_match_allocate (void)\n       if (impure)\n \tgfc_unset_implicit_pure (NULL);\n \n+      /* F2008:C631 (R626) A type-param-value in a type-spec shall be an\n+\t asterisk if and only if each allocate-object is a dummy argument\n+\t for which the corresponding type parameter is assumed.  */\n+      if (saw_assumed\n+\t  && (tail->expr->ts.deferred\n+\t      || tail->expr->ts.u.cl->length\n+\t      || tail->expr->symtree->n.sym->attr.dummy == 0))\n+\t{\n+\t  gfc_error (\"Incompatible allocate-object at %C for CHARACTER \"\n+\t\t     \"type-spec at %L\", &assumed_locus);\n+\t  goto cleanup;\n+\t}\n+\n       if (tail->expr->ts.deferred)\n \t{\n \t  saw_deferred = true;"}, {"sha": "3812d5f98c42855e8974606f9351a6265a9a8ff8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36eb6bf6d3e320a6c5109309661793073150135/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36eb6bf6d3e320a6c5109309661793073150135/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d36eb6bf6d3e320a6c5109309661793073150135", "patch": "@@ -1,3 +1,9 @@\n+2017-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/82934\n+\tPR fortran/83318\n+\t* gfortran.dg/allocate_assumed_charlen_2.f90: new test.\n+\n 2017-12-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83338"}, {"sha": "e54a04353a3a8424259e158fa5d9aa3b86be852d", "filename": "gcc/testsuite/gfortran.dg/allocate_assumed_charlen_2.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36eb6bf6d3e320a6c5109309661793073150135/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36eb6bf6d3e320a6c5109309661793073150135/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_2.f90?ref=d36eb6bf6d3e320a6c5109309661793073150135", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! PR fortran/82934\n+! PR fortran/83318\n+program a\n+ character(len=42), allocatable :: f\n+ character(len=22), allocatable :: ff\n+ call alloc(f, ff)\n+ if (len(f) .ne. 42) call abort\n+ if (len(ff) .ne. 22) call abort\n+contains\n+ subroutine alloc( a, b )\n+  character(len=*), allocatable  :: a\n+  character(len=22), allocatable :: b\n+  character(len=:), allocatable :: c\n+  character, allocatable :: d\n+  allocate(character(len=*)::a,b) ! { dg-error \"Incompatible allocate-object\" }\n+  allocate(character(len=*)::c)   ! { dg-error \"Incompatible allocate-object\" }\n+  allocate(character(len=*)::d)   ! { dg-error \"Incompatible allocate-object\" }\n+ end subroutine\n+end program a"}]}