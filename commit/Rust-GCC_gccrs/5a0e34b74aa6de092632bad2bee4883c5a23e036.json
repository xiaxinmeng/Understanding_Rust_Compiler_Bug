{"sha": "5a0e34b74aa6de092632bad2bee4883c5a23e036", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEwZTM0Yjc0YWE2ZGUwOTI2MzJiYWQyYmVlNDg4M2M1YTIzZTAzNg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-22T13:48:03Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-22T13:56:27Z"}, "message": "Qualified paths can be fully resolved sometimes\n\nThis means we need to be permissive to overload the resolved name to\nsomething other than the trait item if we can.", "tree": {"sha": "9bef8c57466f78db9fd8444f33ed854c24187d16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bef8c57466f78db9fd8444f33ed854c24187d16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a0e34b74aa6de092632bad2bee4883c5a23e036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0e34b74aa6de092632bad2bee4883c5a23e036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0e34b74aa6de092632bad2bee4883c5a23e036", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0e34b74aa6de092632bad2bee4883c5a23e036/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db24e859d8f0141ba97d828deed7cd0d0ae9a43d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db24e859d8f0141ba97d828deed7cd0d0ae9a43d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db24e859d8f0141ba97d828deed7cd0d0ae9a43d"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "9d79b36c3688cbcf92ed99b56df57b61deaad61c", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0e34b74aa6de092632bad2bee4883c5a23e036/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0e34b74aa6de092632bad2bee4883c5a23e036/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=5a0e34b74aa6de092632bad2bee4883c5a23e036", "patch": "@@ -225,9 +225,6 @@ Resolver::lookup_definition (NodeId id, Definition *def)\n void\n Resolver::insert_resolved_name (NodeId refId, NodeId defId)\n {\n-  auto it = resolved_names.find (refId);\n-  rust_assert (it == resolved_names.end ());\n-\n   resolved_names[refId] = defId;\n   get_name_scope ().append_reference_for_def (refId, defId);\n }"}, {"sha": "7b0e8aecb9c9f72e1203e804fe5d77fcae40d53e", "filename": "gcc/rust/typecheck/rust-hir-type-check-path.cc", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0e34b74aa6de092632bad2bee4883c5a23e036/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0e34b74aa6de092632bad2bee4883c5a23e036/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-path.cc?ref=5a0e34b74aa6de092632bad2bee4883c5a23e036", "patch": "@@ -118,26 +118,8 @@ TypeCheckExpr::visit (HIR::QualifiedPathInExpression &expr)\n \n   if (fully_resolved)\n     {\n-      // lookup if the name resolver was able to canonically resolve this or\n-      // not\n-      NodeId path_resolved_id = UNKNOWN_NODEID;\n-      if (resolver->lookup_resolved_name (expr.get_mappings ().get_nodeid (),\n-\t\t\t\t\t  &path_resolved_id))\n-\t{\n-\t  rust_assert (path_resolved_id == root_resolved_node_id);\n-\t}\n-      // check the type scope\n-      else if (resolver->lookup_resolved_type (\n-\t\t expr.get_mappings ().get_nodeid (), &path_resolved_id))\n-\t{\n-\t  rust_assert (path_resolved_id == root_resolved_node_id);\n-\t}\n-      else\n-\t{\n-\t  resolver->insert_resolved_name (expr.get_mappings ().get_nodeid (),\n-\t\t\t\t\t  root_resolved_node_id);\n-\t}\n-\n+      resolver->insert_resolved_name (expr.get_mappings ().get_nodeid (),\n+\t\t\t\t      root_resolved_node_id);\n       context->insert_receiver (expr.get_mappings ().get_hirid (), root);\n       return;\n     }"}, {"sha": "c96615fa891fc0a6c4f5dd6f5dc82fc8d507a460", "filename": "gcc/testsuite/rust/execute/torture/trait2.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a0e34b74aa6de092632bad2bee4883c5a23e036/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a0e34b74aa6de092632bad2bee4883c5a23e036/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait2.rs?ref=5a0e34b74aa6de092632bad2bee4883c5a23e036", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-output \"Bar::A = 456\\n<Foo as Bar>::A = 456\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+trait Foo {\n+    const A: i32 = 123;\n+}\n+\n+struct Bar;\n+impl Foo for Bar {\n+    const A: i32 = 456;\n+}\n+\n+fn main() -> i32 {\n+    let a;\n+    a = Bar::A;\n+\n+    unsafe {\n+        let _a = \"Bar::A = %i\\n\\0\";\n+        let _b = _a as *const str;\n+        let _c = _b as *const i8;\n+        printf(_c, a);\n+    }\n+\n+    let b;\n+    b = <Bar as Foo>::A;\n+\n+    unsafe {\n+        let _a = \"<Foo as Bar>::A = %i\\n\\0\";\n+        let _b = _a as *const str;\n+        let _c = _b as *const i8;\n+        printf(_c, b);\n+    }\n+\n+    0\n+}"}]}