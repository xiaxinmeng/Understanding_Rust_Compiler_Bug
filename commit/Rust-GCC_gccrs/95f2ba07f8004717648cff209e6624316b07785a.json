{"sha": "95f2ba07f8004717648cff209e6624316b07785a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVmMmJhMDdmODAwNDcxNzY0OGNmZjIwOWU2NjI0MzE2YjA3Nzg1YQ==", "commit": {"author": {"name": "Ken Raeburn", "email": "raeburn@gcc.gnu.org", "date": "1992-03-24T10:49:21Z"}, "committer": {"name": "Ken Raeburn", "email": "raeburn@gcc.gnu.org", "date": "1992-03-24T10:49:21Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r581", "tree": {"sha": "7b9b3c0247888f92be7e66c5c4a8d88220df486a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b9b3c0247888f92be7e66c5c4a8d88220df486a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95f2ba07f8004717648cff209e6624316b07785a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f2ba07f8004717648cff209e6624316b07785a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95f2ba07f8004717648cff209e6624316b07785a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95f2ba07f8004717648cff209e6624316b07785a/comments", "author": null, "committer": null, "parents": [{"sha": "6d75030881a084ad28c986dbba74bf39af03b718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d75030881a084ad28c986dbba74bf39af03b718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d75030881a084ad28c986dbba74bf39af03b718"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "3af16ebd6cc661bfa128e1c254f8f5eed4dd786c", "filename": "gcc/dbxout.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95f2ba07f8004717648cff209e6624316b07785a/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95f2ba07f8004717648cff209e6624316b07785a/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=95f2ba07f8004717648cff209e6624316b07785a", "patch": "@@ -83,7 +83,7 @@ extern int errno;\n #endif\n \n #ifdef XCOFF_DEBUGGING_INFO\n-#include \"xcoff.h\"\n+#include \"xcoffout.h\"\n #endif\n \n #ifndef ASM_STABS_OP\n@@ -135,7 +135,7 @@ char *getpwd ();\n #define FORCE_TEXT\n #endif\n \n-#if defined (USG) || defined (MIPS)\n+#if defined (USG) || defined (NO_STAB_H)\n #include \"gstab.h\"  /* If doing DBX on sysV, use our own stab.h.  */\n #else\n #include <stab.h>  /* On BSD, use the system's stab.h.  */\n@@ -681,6 +681,7 @@ dbxout_type_methods (type)\n   /* C++: put out the method names and their parameter lists */\n   tree ctor_name;\n   tree methods = TYPE_METHODS (type);\n+  tree type_encoding;\n   register tree fndecl;\n   register tree last;\n   register int type_identifier_length;\n@@ -689,7 +690,28 @@ dbxout_type_methods (type)\n     return;\n \n   ctor_name = DECL_NAME (TYPE_NAME (type));\n+\n+  /* C++: Template classes break some assumptions made by this code about\n+     the class names, constructor names, and encodings for assembler\n+     label names.  For now, disable output of dbx info for them.  */\n+  {\n+    char *ptr = IDENTIFIER_POINTER (ctor_name);\n+    /* Avoid strchr or index since those names aren't universal.  */\n+    while (*ptr && *ptr != '<') ptr++;\n+    if (*ptr != 0)\n+      {\n+\tstatic int warned;\n+\tif (!warned)\n+\t  {\n+\t    warned = 1;\n+\t    warning (\"dbx info for template class methods not yet supported\");\n+\t  }\n+\treturn;\n+      }\n+  }\n+\n   type_identifier_length = IDENTIFIER_LENGTH (ctor_name);\n+\n   if (TREE_CODE (methods) == FUNCTION_DECL)\n     fndecl = methods;\n   else if (TREE_VEC_ELT (methods, 0) != NULL_TREE)\n@@ -987,8 +1009,11 @@ dbxout_type (type, full)\n \n \t/* Output a structure type.  */\n \tif ((TYPE_NAME (type) != 0\n+#if 0 /* Tiemann says this creates output tha \"confuses GDB\".\n+\t Too bad the info is so vague.  Hope this doesn't lose.  */\n \t     && ! (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n \t\t   && DECL_IGNORED_P (TYPE_NAME (type)))\n+#endif\n \t     && !full)\n \t    || TYPE_SIZE (type) == 0)\n \t  {\n@@ -1001,7 +1026,7 @@ dbxout_type (type, full)\n \t       and let the definition come when the name is defined.  */\n \t    fprintf (asmfile, (TREE_CODE (type) == RECORD_TYPE) ? \"xs\" : \"xu\");\n \t    CHARS (3);\n-#if 0\t\t\t\t/* This assertion is legitimately false in C++.  */\n+#if 0 /* This assertion is legitimately false in C++.  */\n \t    /* We shouldn't be outputting a reference to a type before its\n \t       definition unless the type has a tag name.\n \t       A typedef name without a tag name should be impossible.  */"}]}