{"sha": "e71cf74a5d61ce3dc228bcad1abfeb911d48430d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxY2Y3NGE1ZDYxY2UzZGMyMjhiY2FkMWFiZmViOTExZDQ4NDMwZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-01-15T22:29:41Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-01-15T22:29:41Z"}, "message": "i386: Rename to ix86_indirect_branch_register\n\nRename the variable for -mindirect-branch-register to\nix86_indirect_branch_register to match the command-line option name.\n\n\t* config/i386/constraints.md (Bs): Replace\n\tix86_indirect_branch_thunk_register with\n\tix86_indirect_branch_register.\n\t(Bw): Likewise.\n\t* config/i386/i386.md (indirect_jump): Likewise.\n\t(tablejump): Likewise.\n\t(*sibcall_memory): Likewise.\n\t(*sibcall_value_memory): Likewise.\n\tPeepholes of indirect call and jump via memory: Likewise.\n\t* config/i386/i386.opt: Likewise.\n\t* config/i386/predicates.md (indirect_branch_operand): Likewise.\n\t(GOT_memory_operand): Likewise.\n\t(call_insn_operand): Likewise.\n\t(sibcall_insn_operand): Likewise.\n\t(GOT32_symbol_operand): Likewise.\n\nFrom-SVN: r256712", "tree": {"sha": "009b6eff081b6c8f61ba3c30c7583c2d466b1799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/009b6eff081b6c8f61ba3c30c7583c2d466b1799"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e71cf74a5d61ce3dc228bcad1abfeb911d48430d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71cf74a5d61ce3dc228bcad1abfeb911d48430d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e71cf74a5d61ce3dc228bcad1abfeb911d48430d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4e47472c9f2fb618a5b33517dca11ede3419fa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e47472c9f2fb618a5b33517dca11ede3419fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e47472c9f2fb618a5b33517dca11ede3419fa9"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "6500ed3821d3bf0f8b064d83815d7f49c4821797", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e71cf74a5d61ce3dc228bcad1abfeb911d48430d", "patch": "@@ -1,3 +1,21 @@\n+2018-01-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/constraints.md (Bs): Replace\n+\tix86_indirect_branch_thunk_register with\n+\tix86_indirect_branch_register.\n+\t(Bw): Likewise.\n+\t* config/i386/i386.md (indirect_jump): Likewise.\n+\t(tablejump): Likewise.\n+\t(*sibcall_memory): Likewise.\n+\t(*sibcall_value_memory): Likewise.\n+\tPeepholes of indirect call and jump via memory: Likewise.\n+\t* config/i386/i386.opt: Likewise.\n+\t* config/i386/predicates.md (indirect_branch_operand): Likewise.\n+\t(GOT_memory_operand): Likewise.\n+\t(call_insn_operand): Likewise.\n+\t(sibcall_insn_operand): Likewise.\n+\t(GOT32_symbol_operand): Likewise.\n+\n 2018-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/83837"}, {"sha": "d6072b9bcd9dcb60837fc8f6b347ab7b7e6896f8", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=e71cf74a5d61ce3dc228bcad1abfeb911d48430d", "patch": "@@ -226,19 +226,19 @@\n (define_constraint \"Bs\"\n   \"@internal Sibcall memory operand.\"\n   (ior (and (not (match_test \"TARGET_X32\n-\t\t\t      || ix86_indirect_branch_thunk_register\"))\n+\t\t\t      || ix86_indirect_branch_register\"))\n \t    (match_operand 0 \"sibcall_memory_operand\"))\n        (and (match_test \"TARGET_X32 && Pmode == DImode\n-\t\t\t && !ix86_indirect_branch_thunk_register\")\n+\t\t\t && !ix86_indirect_branch_register\")\n \t    (match_operand 0 \"GOT_memory_operand\"))))\n \n (define_constraint \"Bw\"\n   \"@internal Call memory operand.\"\n   (ior (and (not (match_test \"TARGET_X32\n-\t\t\t      || ix86_indirect_branch_thunk_register\"))\n+\t\t\t      || ix86_indirect_branch_register\"))\n \t    (match_operand 0 \"memory_operand\"))\n        (and (match_test \"TARGET_X32 && Pmode == DImode\n-\t\t\t && !ix86_indirect_branch_thunk_register\")\n+\t\t\t && !ix86_indirect_branch_register\")\n \t    (match_operand 0 \"GOT_memory_operand\"))))\n \n (define_constraint \"Bz\""}, {"sha": "5cd3ec093cd9f0c293c17861620759c2241f0967", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e71cf74a5d61ce3dc228bcad1abfeb911d48430d", "patch": "@@ -12311,7 +12311,7 @@\n   [(set (pc) (match_operand 0 \"indirect_branch_operand\"))]\n   \"\"\n {\n-  if (TARGET_X32 || ix86_indirect_branch_thunk_register)\n+  if (TARGET_X32 || ix86_indirect_branch_register)\n     operands[0] = convert_memory_address (word_mode, operands[0]);\n   cfun->machine->has_local_indirect_jump = true;\n })\n@@ -12365,7 +12365,7 @@\n \t\t\t\t\t OPTAB_DIRECT);\n     }\n \n-  if (TARGET_X32 || ix86_indirect_branch_thunk_register)\n+  if (TARGET_X32 || ix86_indirect_branch_register)\n     operands[0] = convert_memory_address (word_mode, operands[0]);\n   cfun->machine->has_local_indirect_jump = true;\n })\n@@ -12614,7 +12614,7 @@\n   [(call (mem:QI (match_operand:W 0 \"memory_operand\" \"m\"))\n \t (match_operand 1))\n    (unspec [(const_int 0)] UNSPEC_PEEPSIB)]\n-  \"!TARGET_X32 && !ix86_indirect_branch_thunk_register\"\n+  \"!TARGET_X32 && !ix86_indirect_branch_register\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n@@ -12624,7 +12624,7 @@\n    (call (mem:QI (match_dup 0))\n \t (match_operand 3))]\n   \"!TARGET_X32\n-   && !ix86_indirect_branch_thunk_register\n+   && !ix86_indirect_branch_register\n    && SIBLING_CALL_P (peep2_next_insn (1))\n    && !reg_mentioned_p (operands[0],\n \t\t\tCALL_INSN_FUNCTION_USAGE (peep2_next_insn (1)))\"\n@@ -12639,7 +12639,7 @@\n    (call (mem:QI (match_dup 0))\n \t (match_operand 3))]\n   \"!TARGET_X32\n-   && !ix86_indirect_branch_thunk_register\n+   && !ix86_indirect_branch_register\n    && SIBLING_CALL_P (peep2_next_insn (2))\n    && !reg_mentioned_p (operands[0],\n \t\t\tCALL_INSN_FUNCTION_USAGE (peep2_next_insn (2)))\"\n@@ -12737,7 +12737,7 @@\n         (match_operand:W 1 \"memory_operand\"))\n    (set (pc) (match_dup 0))]\n   \"!TARGET_X32\n-   && !ix86_indirect_branch_thunk_register\n+   && !ix86_indirect_branch_register\n    && peep2_reg_dead_p (2, operands[0])\"\n   [(set (pc) (match_dup 1))])\n \n@@ -12819,7 +12819,7 @@\n  \t(call (mem:QI (match_operand:W 1 \"memory_operand\" \"m\"))\n \t      (match_operand 2)))\n    (unspec [(const_int 0)] UNSPEC_PEEPSIB)]\n-  \"!TARGET_X32 && !ix86_indirect_branch_thunk_register\"\n+  \"!TARGET_X32 && !ix86_indirect_branch_register\"\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n \n@@ -12830,7 +12830,7 @@\n    (call (mem:QI (match_dup 0))\n \t\t (match_operand 3)))]\n   \"!TARGET_X32\n-   && !ix86_indirect_branch_thunk_register\n+   && !ix86_indirect_branch_register\n    && SIBLING_CALL_P (peep2_next_insn (1))\n    && !reg_mentioned_p (operands[0],\n \t\t\tCALL_INSN_FUNCTION_USAGE (peep2_next_insn (1)))\"\n@@ -12847,7 +12847,7 @@\n \t(call (mem:QI (match_dup 0))\n \t      (match_operand 3)))]\n   \"!TARGET_X32\n-   && !ix86_indirect_branch_thunk_register\n+   && !ix86_indirect_branch_register\n    && SIBLING_CALL_P (peep2_next_insn (2))\n    && !reg_mentioned_p (operands[0],\n \t\t\tCALL_INSN_FUNCTION_USAGE (peep2_next_insn (2)))\""}, {"sha": "3a306bbd73f0d146df7f6b3e24919e64d8001669", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e71cf74a5d61ce3dc228bcad1abfeb911d48430d", "patch": "@@ -1047,5 +1047,5 @@ EnumValue\n Enum(indirect_branch) String(thunk-extern) Value(indirect_branch_thunk_extern)\n \n mindirect-branch-register\n-Target Report Var(ix86_indirect_branch_thunk_register) Init(0)\n+Target Report Var(ix86_indirect_branch_register) Init(0)\n Force indirect call and jump via register."}, {"sha": "64f13a01326e62f525da0ddf655c778a4ff768d8", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71cf74a5d61ce3dc228bcad1abfeb911d48430d/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=e71cf74a5d61ce3dc228bcad1abfeb911d48430d", "patch": "@@ -666,7 +666,7 @@\n (define_predicate \"indirect_branch_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (and (not (match_test \"TARGET_X32\n-\t\t\t      || ix86_indirect_branch_thunk_register\"))\n+\t\t\t      || ix86_indirect_branch_register\"))\n \t    (match_operand 0 \"memory_operand\"))))\n \n ;; Return true if OP is a memory operands that can be used in sibcalls.\n@@ -695,7 +695,7 @@\n \n ;; Return true if OP is a GOT memory operand.\n (define_predicate \"GOT_memory_operand\"\n-  (and (match_test \"!ix86_indirect_branch_thunk_register\")\n+  (and (match_test \"!ix86_indirect_branch_register\")\n        (match_operand 0 \"memory_operand\"))\n {\n   op = XEXP (op, 0);\n@@ -711,10 +711,10 @@\n \t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n        (match_operand 0 \"call_register_no_elim_operand\")\n        (ior (and (not (match_test \"TARGET_X32\n-\t\t\t\t   || ix86_indirect_branch_thunk_register\"))\n+\t\t\t\t   || ix86_indirect_branch_register\"))\n \t\t (match_operand 0 \"memory_operand\"))\n \t    (and (match_test \"TARGET_X32 && Pmode == DImode\n-\t\t\t      && !ix86_indirect_branch_thunk_register\")\n+\t\t\t      && !ix86_indirect_branch_register\")\n \t\t (match_operand 0 \"GOT_memory_operand\")))))\n \n ;; Similarly, but for tail calls, in which we cannot allow memory references.\n@@ -723,15 +723,15 @@\n \t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n        (match_operand 0 \"register_no_elim_operand\")\n        (ior (and (not (match_test \"TARGET_X32\n-\t\t\t\t   || ix86_indirect_branch_thunk_register\"))\n+\t\t\t\t   || ix86_indirect_branch_register\"))\n \t\t (match_operand 0 \"sibcall_memory_operand\"))\n \t    (and (match_test \"TARGET_X32 && Pmode == DImode\n-\t\t\t      && !ix86_indirect_branch_thunk_register\")\n+\t\t\t      && !ix86_indirect_branch_register\")\n \t\t (match_operand 0 \"GOT_memory_operand\")))))\n \n ;; Return true if OP is a 32-bit GOT symbol operand.\n (define_predicate \"GOT32_symbol_operand\"\n-  (match_test \"!ix86_indirect_branch_thunk_register\n+  (match_test \"!ix86_indirect_branch_register\n \t       && GET_CODE (op) == CONST\n                && GET_CODE (XEXP (op, 0)) == UNSPEC\n                && XINT (XEXP (op, 0), 1) == UNSPEC_GOT\"))"}]}