{"sha": "12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJkNjlkYmZmZjlkZDVhZDRhMzBiMjBkMTYzNmY1Y2FiNjQyNWU4Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-15T09:34:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-15T09:34:44Z"}, "message": "fix _mm512_{,mask_}cmp*_p[ds]_mask at -O0 [PR96174]\n\nThe _mm512_{,mask_}cmp_p[ds]_mask and also _mm_{,mask_}cmp_s[ds]_mask\nintrinsics have an argument which must have a constant passed to it\nand so use an inline version only for ifdef __OPTIMIZE__ and have\na #define for -O0.  But the _mm512_{,mask_}cmp*_p[ds]_mask intrinsics\ndon't need a constant argument, they are essentially the first\nset with the constant added to them implicitly based on the comparison\nname, and so there is no #define version for them (correctly).\nBut their inline versions are defined in between the first and s[ds]\nset and so inside of ifdef __OPTIMIZE__, which means that with -O0\nthey aren't defined at all.\n\nThis patch fixes that by moving those after the #ifdef __OPTIMIZE #else\nuse #define #endif block.\n\n2020-07-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/96174\n\t* config/i386/avx512fintrin.h (_mm512_cmpeq_pd_mask,\n\t_mm512_mask_cmpeq_pd_mask, _mm512_cmplt_pd_mask,\n\t_mm512_mask_cmplt_pd_mask, _mm512_cmple_pd_mask,\n\t_mm512_mask_cmple_pd_mask, _mm512_cmpunord_pd_mask,\n\t_mm512_mask_cmpunord_pd_mask, _mm512_cmpneq_pd_mask,\n\t_mm512_mask_cmpneq_pd_mask, _mm512_cmpnlt_pd_mask,\n\t_mm512_mask_cmpnlt_pd_mask, _mm512_cmpnle_pd_mask,\n\t_mm512_mask_cmpnle_pd_mask, _mm512_cmpord_pd_mask,\n\t_mm512_mask_cmpord_pd_mask, _mm512_cmpeq_ps_mask,\n\t_mm512_mask_cmpeq_ps_mask, _mm512_cmplt_ps_mask,\n\t_mm512_mask_cmplt_ps_mask, _mm512_cmple_ps_mask,\n\t_mm512_mask_cmple_ps_mask, _mm512_cmpunord_ps_mask,\n\t_mm512_mask_cmpunord_ps_mask, _mm512_cmpneq_ps_mask,\n\t_mm512_mask_cmpneq_ps_mask, _mm512_cmpnlt_ps_mask,\n\t_mm512_mask_cmpnlt_ps_mask, _mm512_cmpnle_ps_mask,\n\t_mm512_mask_cmpnle_ps_mask, _mm512_cmpord_ps_mask,\n\t_mm512_mask_cmpord_ps_mask): Move outside of __OPTIMIZE__ guarded\n\tsection.\n\n\t* gcc.target/i386/avx512f-vcmppd-3.c: New test.\n\t* gcc.target/i386/avx512f-vcmpps-3.c: New test.", "tree": {"sha": "6919d12e674b94cc20674ffecc6268cf9ddf78d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6919d12e674b94cc20674ffecc6268cf9ddf78d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "410675cb63466d8de9ad590521f0766b012d2475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410675cb63466d8de9ad590521f0766b012d2475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410675cb63466d8de9ad590521f0766b012d2475"}], "stats": {"total": 172, "additions": 90, "deletions": 82}, "files": [{"sha": "0d53dda3a27b20b5117d06b6a1141265932cb0d7", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 82, "deletions": 82, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c", "patch": "@@ -15125,6 +15125,88 @@ _mm512_mask_cmp_pd_mask (__mmask8 __U, __m512d __X, __m512d __Y, const int __P)\n \t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n }\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmp_sd_mask (__m128d __X, __m128d __Y, const int __P)\n+{\n+  return (__mmask8) __builtin_ia32_cmpsd_mask ((__v2df) __X,\n+\t\t\t\t\t       (__v2df) __Y, __P,\n+\t\t\t\t\t       (__mmask8) -1,\n+\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmp_sd_mask (__mmask8 __M, __m128d __X, __m128d __Y, const int __P)\n+{\n+  return (__mmask8) __builtin_ia32_cmpsd_mask ((__v2df) __X,\n+\t\t\t\t\t       (__v2df) __Y, __P,\n+\t\t\t\t\t       (__mmask8) __M,\n+\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cmp_ss_mask (__m128 __X, __m128 __Y, const int __P)\n+{\n+  return (__mmask8) __builtin_ia32_cmpss_mask ((__v4sf) __X,\n+\t\t\t\t\t       (__v4sf) __Y, __P,\n+\t\t\t\t\t       (__mmask8) -1,\n+\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cmp_ss_mask (__mmask8 __M, __m128 __X, __m128 __Y, const int __P)\n+{\n+  return (__mmask8) __builtin_ia32_cmpss_mask ((__v4sf) __X,\n+\t\t\t\t\t       (__v4sf) __Y, __P,\n+\t\t\t\t\t       (__mmask8) __M,\n+\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#else\n+#define _mm512_cmp_pd_mask(X, Y, P)\t\t\t\t\t\\\n+  ((__mmask8) __builtin_ia32_cmppd512_mask ((__v8df)(__m512d)(X),\t\\\n+\t\t\t\t\t    (__v8df)(__m512d)(Y), (int)(P),\\\n+\t\t\t\t\t    (__mmask8)-1,_MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm512_cmp_ps_mask(X, Y, P)\t\t\t\t\t\\\n+  ((__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf)(__m512)(X),\t\\\n+\t\t\t\t\t     (__v16sf)(__m512)(Y), (int)(P),\\\n+\t\t\t\t\t     (__mmask16)-1,_MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm512_mask_cmp_pd_mask(M, X, Y, P)\t\t\t\t\t\\\n+  ((__mmask8) __builtin_ia32_cmppd512_mask ((__v8df)(__m512d)(X),\t\\\n+\t\t\t\t\t    (__v8df)(__m512d)(Y), (int)(P),\\\n+\t\t\t\t\t    (__mmask8)(M), _MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm512_mask_cmp_ps_mask(M, X, Y, P)\t\t\t\t\t\\\n+  ((__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf)(__m512)(X),\t\\\n+\t\t\t\t\t     (__v16sf)(__m512)(Y), (int)(P),\\\n+\t\t\t\t\t     (__mmask16)(M),_MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_cmp_sd_mask(X, Y, P)\t\t\t\t\t\\\n+  ((__mmask8) __builtin_ia32_cmpsd_mask ((__v2df)(__m128d)(X),\t\t\\\n+\t\t\t\t\t (__v2df)(__m128d)(Y), (int)(P),\\\n+\t\t\t\t\t (__mmask8)-1,_MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_mask_cmp_sd_mask(M, X, Y, P)\t\t\t\t\t\\\n+  ((__mmask8) __builtin_ia32_cmpsd_mask ((__v2df)(__m128d)(X),\t\t\\\n+\t\t\t\t\t (__v2df)(__m128d)(Y), (int)(P),\\\n+\t\t\t\t\t M,_MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_cmp_ss_mask(X, Y, P)\t\t\t\t\t\\\n+  ((__mmask8) __builtin_ia32_cmpss_mask ((__v4sf)(__m128)(X),\t\t\\\n+\t\t\t\t\t (__v4sf)(__m128)(Y), (int)(P), \\\n+\t\t\t\t\t (__mmask8)-1,_MM_FROUND_CUR_DIRECTION))\n+\n+#define _mm_mask_cmp_ss_mask(M, X, Y, P)\t\t\t\t\t\\\n+  ((__mmask8) __builtin_ia32_cmpss_mask ((__v4sf)(__m128)(X),\t\t\\\n+\t\t\t\t\t (__v4sf)(__m128)(Y), (int)(P), \\\n+\t\t\t\t\t M,_MM_FROUND_CUR_DIRECTION))\n+#endif\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpeq_pd_mask (__m512d __X, __m512d __Y)\n@@ -15445,88 +15527,6 @@ _mm512_mask_cmpord_ps_mask (__mmask16 __U, __m512 __X, __m512 __Y)\n \t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n }\n \n-extern __inline __mmask8\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_cmp_sd_mask (__m128d __X, __m128d __Y, const int __P)\n-{\n-  return (__mmask8) __builtin_ia32_cmpsd_mask ((__v2df) __X,\n-\t\t\t\t\t       (__v2df) __Y, __P,\n-\t\t\t\t\t       (__mmask8) -1,\n-\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n-}\n-\n-extern __inline __mmask8\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_cmp_sd_mask (__mmask8 __M, __m128d __X, __m128d __Y, const int __P)\n-{\n-  return (__mmask8) __builtin_ia32_cmpsd_mask ((__v2df) __X,\n-\t\t\t\t\t       (__v2df) __Y, __P,\n-\t\t\t\t\t       (__mmask8) __M,\n-\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n-}\n-\n-extern __inline __mmask8\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_cmp_ss_mask (__m128 __X, __m128 __Y, const int __P)\n-{\n-  return (__mmask8) __builtin_ia32_cmpss_mask ((__v4sf) __X,\n-\t\t\t\t\t       (__v4sf) __Y, __P,\n-\t\t\t\t\t       (__mmask8) -1,\n-\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n-}\n-\n-extern __inline __mmask8\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_mask_cmp_ss_mask (__mmask8 __M, __m128 __X, __m128 __Y, const int __P)\n-{\n-  return (__mmask8) __builtin_ia32_cmpss_mask ((__v4sf) __X,\n-\t\t\t\t\t       (__v4sf) __Y, __P,\n-\t\t\t\t\t       (__mmask8) __M,\n-\t\t\t\t\t       _MM_FROUND_CUR_DIRECTION);\n-}\n-\n-#else\n-#define _mm512_cmp_pd_mask(X, Y, P)\t\t\t\t\t\\\n-  ((__mmask8) __builtin_ia32_cmppd512_mask ((__v8df)(__m512d)(X),\t\\\n-\t\t\t\t\t    (__v8df)(__m512d)(Y), (int)(P),\\\n-\t\t\t\t\t    (__mmask8)-1,_MM_FROUND_CUR_DIRECTION))\n-\n-#define _mm512_cmp_ps_mask(X, Y, P)\t\t\t\t\t\\\n-  ((__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf)(__m512)(X),\t\\\n-\t\t\t\t\t     (__v16sf)(__m512)(Y), (int)(P),\\\n-\t\t\t\t\t     (__mmask16)-1,_MM_FROUND_CUR_DIRECTION))\n-\n-#define _mm512_mask_cmp_pd_mask(M, X, Y, P)\t\t\t\t\t\\\n-  ((__mmask8) __builtin_ia32_cmppd512_mask ((__v8df)(__m512d)(X),\t\\\n-\t\t\t\t\t    (__v8df)(__m512d)(Y), (int)(P),\\\n-\t\t\t\t\t    (__mmask8)(M), _MM_FROUND_CUR_DIRECTION))\n-\n-#define _mm512_mask_cmp_ps_mask(M, X, Y, P)\t\t\t\t\t\\\n-  ((__mmask16) __builtin_ia32_cmpps512_mask ((__v16sf)(__m512)(X),\t\\\n-\t\t\t\t\t     (__v16sf)(__m512)(Y), (int)(P),\\\n-\t\t\t\t\t     (__mmask16)(M),_MM_FROUND_CUR_DIRECTION))\n-\n-#define _mm_cmp_sd_mask(X, Y, P)\t\t\t\t\t\\\n-  ((__mmask8) __builtin_ia32_cmpsd_mask ((__v2df)(__m128d)(X),\t\t\\\n-\t\t\t\t\t (__v2df)(__m128d)(Y), (int)(P),\\\n-\t\t\t\t\t (__mmask8)-1,_MM_FROUND_CUR_DIRECTION))\n-\n-#define _mm_mask_cmp_sd_mask(M, X, Y, P)\t\t\t\t\t\\\n-  ((__mmask8) __builtin_ia32_cmpsd_mask ((__v2df)(__m128d)(X),\t\t\\\n-\t\t\t\t\t (__v2df)(__m128d)(Y), (int)(P),\\\n-\t\t\t\t\t M,_MM_FROUND_CUR_DIRECTION))\n-\n-#define _mm_cmp_ss_mask(X, Y, P)\t\t\t\t\t\\\n-  ((__mmask8) __builtin_ia32_cmpss_mask ((__v4sf)(__m128)(X),\t\t\\\n-\t\t\t\t\t (__v4sf)(__m128)(Y), (int)(P), \\\n-\t\t\t\t\t (__mmask8)-1,_MM_FROUND_CUR_DIRECTION))\n-\n-#define _mm_mask_cmp_ss_mask(M, X, Y, P)\t\t\t\t\t\\\n-  ((__mmask8) __builtin_ia32_cmpss_mask ((__v4sf)(__m128)(X),\t\t\\\n-\t\t\t\t\t (__v4sf)(__m128)(Y), (int)(P), \\\n-\t\t\t\t\t M,_MM_FROUND_CUR_DIRECTION))\n-#endif\n-\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_kmov (__mmask16 __A)"}, {"sha": "3d36eca78fa27bd82c0b3c18f353bc9b3fb89fdd", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmppd-3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmppd-3.c?ref=12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512f\" } */\n+\n+#include \"avx512f-vcmppd-1.c\""}, {"sha": "af797aad2de2599c11e5f27dc5414a3b549ddaca", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vcmpps-3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vcmpps-3.c?ref=12d69dbfff9dd5ad4a30b20d1636f5cab6425e8c", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mavx512f\" } */\n+\n+#include \"avx512f-vcmpps-1.c\""}]}