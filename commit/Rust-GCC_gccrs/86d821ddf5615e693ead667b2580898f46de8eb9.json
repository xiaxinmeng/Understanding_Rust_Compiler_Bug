{"sha": "86d821ddf5615e693ead667b2580898f46de8eb9", "node_id": "C_kwDOANBUbNoAKDg2ZDgyMWRkZjU2MTVlNjkzZWFkNjY3YjI1ODA4OThmNDZkZThlYjk", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-02T11:01:33Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-02T11:01:33Z"}, "message": "libstdc++: Don't use std::tolower in <charconv> [PR103911]\n\nAs with std::isdigit in r12-6281-gc83ecfbe74a5cf, we shouldn't be using\nstd::tolower in <charconv> either.\n\n\tPR libstdc++/103911\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/floating_from_chars.cc (find_end_of_float): Accept\n\ttwo delimeters for the exponent part in the form of a possibly\n\tNULL string of length two.  Don't use std::tolower.\n\t(pattern): Adjust calls to find_end_of_float accordingly.", "tree": {"sha": "6662313539316fdd8baa101eb4b6bc3c462cab8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6662313539316fdd8baa101eb4b6bc3c462cab8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86d821ddf5615e693ead667b2580898f46de8eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d821ddf5615e693ead667b2580898f46de8eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d821ddf5615e693ead667b2580898f46de8eb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d821ddf5615e693ead667b2580898f46de8eb9/comments", "author": null, "committer": null, "parents": [{"sha": "576f975cabb0fd9843de152a2d247d486a967b08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/576f975cabb0fd9843de152a2d247d486a967b08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/576f975cabb0fd9843de152a2d247d486a967b08"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "5d2a931d5dd352f773aa0b7903c9483fcf217983", "filename": "libstdc++-v3/src/c++17/floating_from_chars.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d821ddf5615e693ead667b2580898f46de8eb9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d821ddf5615e693ead667b2580898f46de8eb9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_from_chars.cc?ref=86d821ddf5615e693ead667b2580898f46de8eb9", "patch": "@@ -40,7 +40,6 @@\n #include <cmath>\n #include <cstdlib>\n #include <cstring>\n-#include <cctype>\n #include <locale.h>\n #include <bits/functexcept.h>\n #if _GLIBCXX_HAVE_XLOCALE_H\n@@ -142,10 +141,10 @@ namespace\n \n   // Find initial portion of [first, last) containing a floating-point number.\n   // The string `digits` is either `dec_digits` or `hex_digits`\n-  // and `exp` is 'e' or 'p' or '\\0'.\n+  // and `exp` is \"eE\", \"pP\" or NULL.\n   const char*\n   find_end_of_float(const char* first, const char* last, const char* digits,\n-\t\t    char exp)\n+\t\t    const char *exp)\n   {\n     while (first < last && strchr(digits, *first) != nullptr)\n       ++first;\n@@ -155,7 +154,7 @@ namespace\n \twhile (first < last && strchr(digits, *first))\n \t  ++first;\n       }\n-    if (first < last && exp != 0 && std::tolower((unsigned char)*first) == exp)\n+    if (first < last && exp != nullptr && (*first == exp[0] || *first == exp[1]))\n       {\n \t++first;\n \tif (first < last && (*first == '-' || *first == '+'))\n@@ -237,7 +236,7 @@ namespace\n \n \tif ((last - first + 2) > buffer_resource::guaranteed_capacity())\n \t  {\n-\t    last = find_end_of_float(first + neg, last, digits, 'p');\n+\t    last = find_end_of_float(first + neg, last, digits, \"pP\");\n #ifndef __cpp_exceptions\n \t    if ((last - first + 2) > buffer_resource::guaranteed_capacity())\n \t      {\n@@ -261,7 +260,7 @@ namespace\n \tif ((last - first) > buffer_resource::guaranteed_capacity())\n \t  {\n \t    last = find_end_of_float(first + neg, last, digits,\n-\t\t\t\t     \"e\"[fmt == chars_format::fixed]);\n+\t\t\t\t     fmt == chars_format::fixed ? nullptr : \"eE\");\n #ifndef __cpp_exceptions\n \t    if ((last - first) > buffer_resource::guaranteed_capacity())\n \t      {"}]}