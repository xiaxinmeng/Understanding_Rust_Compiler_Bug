{"sha": "ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhYWU1ODI3YTRjNzBlN2Q4ODY2YzNhY2VlYWU2ODg4ZTI5ZDlmZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-01-27T07:32:26Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-01-27T07:32:26Z"}, "message": "tree.h (SWITCH_COND, [...]): Add tree checks.\n\n\t* tree.h (SWITCH_COND, SWITCH_BODY, SWITCH_LABELS, CASE_LOW,\n\tCASE_HIGH, CASE_LABEL, ASM_STRING, ASM_OUTPUTS, ASM_INPUTS,\n\tASM_CLOBBERS): Add tree checks.\n\n\t* c-common.h (SWITCH_TYPE): Rename to SWITCH_STMT_TYPE.\n\t(SWITCH_STMT_COND, SWITCH_STMT_BODY): New.\n\t* c-common.def (SWITCH_STMT): Update to match.\n\t* c-common.c (c_do_switch_warnings): Use SWITCH_STMT accessor\n\tmacros instead of SWITCH_EXPR ones.\n\t* c-dump.c (c_dump_tree): Likewise.\n\t* c-gimplify.c (gimplify_switch_stmt): Likewise.\n\t* c-typeck.c (c_start_case, do_case, c_finish_case): Likewise.\n\ncp/\n\t* decl.c (finish_case_label): Use SWITCH_STMT accessor macros\n\tinstead of SWITCH_EXPR ones.\n\t* pt.c (tsubst_expr): Likewise.\n\t* semantics.c (begin_switch_stmt, finish_switch_cond,\n\tfinish_switch_stmt): Likewise.\n\ndoc/\n\t* c-tree.texi (SWITCH_STMT): Update accessor macro names.\n\nFrom-SVN: r94315", "tree": {"sha": "f9b695c3f67dfcff98a1d75be3d18fdbb7cd6b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9b695c3f67dfcff98a1d75be3d18fdbb7cd6b9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/comments", "author": null, "committer": null, "parents": [{"sha": "7a7067386511a18792d556ed3e174f0245a5a36a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a7067386511a18792d556ed3e174f0245a5a36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a7067386511a18792d556ed3e174f0245a5a36a"}], "stats": {"total": 103, "additions": 65, "deletions": 38}, "files": [{"sha": "03ef4e7876f926012b85478002ee74b901172b28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -1,3 +1,20 @@\n+2005-01-27  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* tree.h (SWITCH_COND, SWITCH_BODY, SWITCH_LABELS, CASE_LOW,\n+\tCASE_HIGH, CASE_LABEL, ASM_STRING, ASM_OUTPUTS, ASM_INPUTS,\n+\tASM_CLOBBERS): Add tree checks.\n+\n+\t* c-common.h (SWITCH_TYPE): Rename to SWITCH_STMT_TYPE.\n+\t(SWITCH_STMT_COND, SWITCH_STMT_BODY): New.\n+\t* c-common.def (SWITCH_STMT): Update to match.\n+\t* c-common.c (c_do_switch_warnings): Use SWITCH_STMT accessor\n+\tmacros instead of SWITCH_EXPR ones.\n+\t* c-dump.c (c_dump_tree): Likewise.\n+\t* c-gimplify.c (gimplify_switch_stmt): Likewise.\n+\t* c-typeck.c (c_start_case, do_case, c_finish_case): Likewise.\n+\n+\t* doc/c-tree.texi (SWITCH_STMT): Update accessor macro names.\n+\n 2005-01-27  Alan Modra  <amodra@bigpond.net.au>\n \n \t* unwind-dw2.c (execute_stack_op): Add missing cases for\n@@ -97,9 +114,9 @@\n \n \t2004-11-11  Eric Christopher  <echristo@redhat.com>\n \n-        * config/frv/frv.md: Add fr400_integer automaton. Don't\n-        allow TYPE_MUL, TYPE_MACC, or TYPE_CUT to issue in parallel\n-        to TYPE_MACC.\n+\t* config/frv/frv.md: Add fr400_integer automaton. Don't\n+\tallow TYPE_MUL, TYPE_MACC, or TYPE_CUT to issue in parallel\n+\tto TYPE_MACC.\n \n 2005-01-26  Steven Bosscher  <stevenb@suse.de>\n "}, {"sha": "1df71ad5728b773ad64a0aff90e58f140a0c6090", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -3676,7 +3676,7 @@ c_do_switch_warnings (splay_tree cases, tree switch_stmt)\n   else\n     switch_location = input_location;\n \n-  type = SWITCH_TYPE (switch_stmt);\n+  type = SWITCH_STMT_TYPE (switch_stmt);\n \n   default_node = splay_tree_lookup (cases, (splay_tree_key) NULL);\n   if (warn_switch_default && !default_node)\n@@ -3688,7 +3688,7 @@ c_do_switch_warnings (splay_tree cases, tree switch_stmt)\n      default case, or when -Wswitch-enum was specified.  */\n   if (((warn_switch && !default_node) || warn_switch_enum)\n       && type && TREE_CODE (type) == ENUMERAL_TYPE\n-      && TREE_CODE (SWITCH_COND (switch_stmt)) != INTEGER_CST)\n+      && TREE_CODE (SWITCH_STMT_COND (switch_stmt)) != INTEGER_CST)\n     {\n       tree chain;\n "}, {"sha": "a211807ce5e24bc50240a07c7ae0c9f26fd0250b", "filename": "gcc/c-common.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-common.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-common.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.def?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -52,7 +52,7 @@ DEFTREECODE (BREAK_STMT, \"break_stmt\", tcc_expression, 0)\n DEFTREECODE (CONTINUE_STMT, \"continue_stmt\", tcc_expression, 0)\n \n /* Used to represent a 'switch' statement. The operands are\n-   SWITCH_COND, SWITCH_BODY and SWITCH_TYPE, respectively.  */\n+   SWITCH_STMT_COND, SWITCH_STMT_BODY and SWITCH_STMT_TYPE, respectively.  */\n DEFTREECODE (SWITCH_STMT, \"switch_stmt\", tcc_expression, 3)\n \n /* A STMT_EXPR represents a statement-expression.  The"}, {"sha": "13377f167faf32b145f7a58375a2ae99c2779ab9", "filename": "gcc/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -733,7 +733,9 @@ extern void finish_file\t(void);\n #define FOR_EXPR(NODE)          TREE_OPERAND (FOR_STMT_CHECK (NODE), 2)\n #define FOR_BODY(NODE)          TREE_OPERAND (FOR_STMT_CHECK (NODE), 3)\n \n-#define SWITCH_TYPE(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 2)\n+#define SWITCH_STMT_COND(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 0)\n+#define SWITCH_STMT_BODY(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 1)\n+#define SWITCH_STMT_TYPE(NODE)\tTREE_OPERAND (SWITCH_STMT_CHECK (NODE), 2)\n \n /* STMT_EXPR accessor.  */\n #define STMT_EXPR_STMT(NODE)    TREE_OPERAND (STMT_EXPR_CHECK (NODE), 0)"}, {"sha": "ac7c580894692f3489a046c8effa5f113b206d02", "filename": "gcc/c-dump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-dump.c?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -80,8 +80,8 @@ c_dump_tree (void *dump_info, tree t)\n \n     case SWITCH_STMT:\n       dump_stmt (di, t);\n-      dump_child (\"cond\", SWITCH_COND (t));\n-      dump_child (\"body\", SWITCH_BODY (t));\n+      dump_child (\"cond\", SWITCH_STMT_COND (t));\n+      dump_child (\"body\", SWITCH_STMT_BODY (t));\n       break;\n \n     case WHILE_STMT:"}, {"sha": "058487404f3a4bafa4318ec76912403a04d41b79", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -454,12 +454,12 @@ gimplify_switch_stmt (tree *stmt_p)\n \n   break_block = begin_bc_block (bc_break);\n \n-  body = SWITCH_BODY (stmt);\n+  body = SWITCH_STMT_BODY (stmt);\n   if (!body)\n     body = build_empty_stmt ();\n \n-  *stmt_p = build3 (SWITCH_EXPR, SWITCH_TYPE (stmt), SWITCH_COND (stmt),\n-\t\t    body, NULL_TREE);\n+  *stmt_p = build3 (SWITCH_EXPR, SWITCH_STMT_TYPE (stmt),\n+\t\t    SWITCH_STMT_COND (stmt), body, NULL_TREE);\n   SET_EXPR_LOCATION (*stmt_p, stmt_locus);\n   gimplify_stmt (stmt_p);\n "}, {"sha": "cb657df75495ba8c389e89c576db8a9815c9ac04", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -6563,8 +6563,7 @@ c_start_case (tree exp)\n \n   /* Add this new SWITCH_STMT to the stack.  */\n   cs = XNEW (struct c_switch);\n-  cs->switch_stmt = build_stmt ((enum tree_code) SWITCH_STMT, exp, NULL_TREE,\n-\t\t\t\torig_type);\n+  cs->switch_stmt = build_stmt (SWITCH_STMT, exp, NULL_TREE, orig_type);\n   cs->orig_type = orig_type;\n   cs->cases = splay_tree_new (case_compare, NULL, NULL);\n   cs->next = c_switch_stack;\n@@ -6583,7 +6582,7 @@ do_case (tree low_value, tree high_value)\n   if (c_switch_stack)\n     {\n       label = c_add_case_label (c_switch_stack->cases,\n-\t\t\t\tSWITCH_COND (c_switch_stack->switch_stmt),\n+\t\t\t\tSWITCH_STMT_COND (c_switch_stack->switch_stmt),\n \t\t\t\tc_switch_stack->orig_type,\n \t\t\t\tlow_value, high_value);\n       if (label == error_mark_node)\n@@ -6604,7 +6603,7 @@ c_finish_case (tree body)\n {\n   struct c_switch *cs = c_switch_stack;\n \n-  SWITCH_BODY (cs->switch_stmt) = body;\n+  SWITCH_STMT_BODY (cs->switch_stmt) = body;\n \n   /* Emit warnings as needed.  */\n   c_do_switch_warnings (cs->cases, cs->switch_stmt);"}, {"sha": "bb1ac4e787e61c2aab8feb51b40556be32ff7b60", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -1,3 +1,11 @@\n+2005-01-27  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* decl.c (finish_case_label): Use SWITCH_STMT accessor macros\n+\tinstead of SWITCH_EXPR ones.\n+\t* pt.c (tsubst_expr): Likewise.\n+\t* semantics.c (begin_switch_stmt, finish_switch_cond,\n+\tfinish_switch_stmt): Likewise.\n+\n 2005-01-26  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR c++/18370"}, {"sha": "f65427a8b1b6a5deb1a32af5beae2a3b52beb0dd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -2383,7 +2383,7 @@ finish_case_label (tree low_value, tree high_value)\n     }\n \n   /* Find the condition on which this switch statement depends.  */\n-  cond = SWITCH_COND (switch_stack->switch_stmt);\n+  cond = SWITCH_STMT_COND (switch_stack->switch_stmt);\n   if (cond && TREE_CODE (cond) == TREE_LIST)\n     cond = TREE_VALUE (cond);\n "}, {"sha": "dc781b4afc818528a10d3993156002ea1c8f9841", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -8192,9 +8192,9 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n     case SWITCH_STMT:\n       stmt = begin_switch_stmt ();\n-      tmp = tsubst_expr (SWITCH_COND (t), args, complain, in_decl);\n+      tmp = tsubst_expr (SWITCH_STMT_COND (t), args, complain, in_decl);\n       finish_switch_cond (tmp, stmt);\n-      tsubst_expr (SWITCH_BODY (t), args, complain, in_decl);\n+      tsubst_expr (SWITCH_STMT_BODY (t), args, complain, in_decl);\n       finish_switch_stmt (stmt);\n       break;\n "}, {"sha": "466587ef69f4002e36dde22b5ae12a6b8617a38c", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -858,7 +858,7 @@ begin_switch_stmt (void)\n \n   scope = do_pushlevel (sk_block);\n   TREE_CHAIN (r) = scope;\n-  begin_cond (&SWITCH_COND (r));\n+  begin_cond (&SWITCH_STMT_COND (r));\n \n   return r;\n }\n@@ -902,11 +902,11 @@ finish_switch_cond (tree cond, tree switch_stmt)\n \t    cond = index;\n \t}\n     }\n-  finish_cond (&SWITCH_COND (switch_stmt), cond);\n-  SWITCH_TYPE (switch_stmt) = orig_type;\n+  finish_cond (&SWITCH_STMT_COND (switch_stmt), cond);\n+  SWITCH_STMT_TYPE (switch_stmt) = orig_type;\n   add_stmt (switch_stmt);\n   push_switch (switch_stmt);\n-  SWITCH_BODY (switch_stmt) = push_stmt_list ();\n+  SWITCH_STMT_BODY (switch_stmt) = push_stmt_list ();\n }\n \n /* Finish the body of a switch-statement, which may be given by\n@@ -917,7 +917,8 @@ finish_switch_stmt (tree switch_stmt)\n {\n   tree scope;\n \n-  SWITCH_BODY (switch_stmt) = pop_stmt_list (SWITCH_BODY (switch_stmt));\n+  SWITCH_STMT_BODY (switch_stmt) =\n+    pop_stmt_list (SWITCH_STMT_BODY (switch_stmt));\n   pop_switch (); \n   finish_stmt ();\n "}, {"sha": "fd1a07046c47a6fdec2e9b0ab57ef25d774c7c88", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -1573,11 +1573,11 @@ cleanups must be executed in the reverse order in which they appear.\n \n @item SWITCH_STMT\n \n-Used to represent a @code{switch} statement.  The @code{SWITCH_COND} is\n-the expression on which the switch is occurring.  See the documentation\n+Used to represent a @code{switch} statement.  The @code{SWITCH_STMT_COND}\n+is the expression on which the switch is occurring.  See the documentation\n for an @code{IF_STMT} for more information on the representation used\n-for the condition.  The @code{SWITCH_BODY} is the body of the switch\n-statement.   The @code{SWITCH_TYPE} is the original type of switch\n+for the condition.  The @code{SWITCH_STMT_BODY} is the body of the switch\n+statement.   The @code{SWITCH_STMT_TYPE} is the original type of switch\n expression as given in the source, before any compiler conversions.\n \n @item TRY_BLOCK"}, {"sha": "b393cab2c4073dbeae0e5f5be047f6713d08b3ae", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebaae5827a4c70e7d8866c3aceeae6888e29d9fe/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ebaae5827a4c70e7d8866c3aceeae6888e29d9fe", "patch": "@@ -1227,15 +1227,15 @@ struct tree_vec GTY(())\n /* SWITCH_EXPR accessors. These give access to the condition, body and\n    original condition type (before any compiler conversions)\n    of the switch statement, respectively.  */\n-#define SWITCH_COND(NODE)       TREE_OPERAND ((NODE), 0)\n-#define SWITCH_BODY(NODE)       TREE_OPERAND ((NODE), 1)\n-#define SWITCH_LABELS(NODE)     TREE_OPERAND ((NODE), 2)\n+#define SWITCH_COND(NODE)       TREE_OPERAND (SWITCH_EXPR_CHECK (NODE), 0)\n+#define SWITCH_BODY(NODE)       TREE_OPERAND (SWITCH_EXPR_CHECK (NODE), 1)\n+#define SWITCH_LABELS(NODE)     TREE_OPERAND (SWITCH_EXPR_CHECK (NODE), 2)\n \n /* CASE_LABEL_EXPR accessors. These give access to the high and low values\n    of a case label, respectively.  */\n-#define CASE_LOW(NODE)          \tTREE_OPERAND ((NODE), 0)\n-#define CASE_HIGH(NODE)         \tTREE_OPERAND ((NODE), 1)\n-#define CASE_LABEL(NODE)\t\tTREE_OPERAND ((NODE), 2)\n+#define CASE_LOW(NODE)          \tTREE_OPERAND (CASE_LABEL_EXPR_CHECK (NODE), 0)\n+#define CASE_HIGH(NODE)         \tTREE_OPERAND (CASE_LABEL_EXPR_CHECK (NODE), 1)\n+#define CASE_LABEL(NODE)\t\tTREE_OPERAND (CASE_LABEL_EXPR_CHECK (NODE), 2)\n \n /* The operands of a BIND_EXPR.  */\n #define BIND_EXPR_VARS(NODE) (TREE_OPERAND (BIND_EXPR_CHECK (NODE), 0))\n@@ -1250,10 +1250,10 @@ struct tree_vec GTY(())\n    instruction (e.g., \"mov x, y\"). ASM_OUTPUTS, ASM_INPUTS, and\n    ASM_CLOBBERS represent the outputs, inputs, and clobbers for the\n    statement.  */\n-#define ASM_STRING(NODE)        TREE_OPERAND ((NODE), 0)\n-#define ASM_OUTPUTS(NODE)       TREE_OPERAND ((NODE), 1)\n-#define ASM_INPUTS(NODE)        TREE_OPERAND ((NODE), 2)\n-#define ASM_CLOBBERS(NODE)      TREE_OPERAND ((NODE), 3)\n+#define ASM_STRING(NODE)        TREE_OPERAND (ASM_EXPR_CHECK (NODE), 0)\n+#define ASM_OUTPUTS(NODE)       TREE_OPERAND (ASM_EXPR_CHECK (NODE), 1)\n+#define ASM_INPUTS(NODE)        TREE_OPERAND (ASM_EXPR_CHECK (NODE), 2)\n+#define ASM_CLOBBERS(NODE)      TREE_OPERAND (ASM_EXPR_CHECK (NODE), 3)\n /* Nonzero if we want to create an ASM_INPUT instead of an\n    ASM_OPERAND with no operands.  */\n #define ASM_INPUT_P(NODE) (TREE_STATIC (NODE))"}]}