{"sha": "b58c12f3cf926f877ea2f590c411fe7e853974e3", "node_id": "C_kwDOANBUbNoAKGI1OGMxMmYzY2Y5MjZmODc3ZWEyZjU5MGM0MTFmZTdlODUzOTc0ZTM", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2021-10-31T22:58:44Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2021-11-05T15:38:03Z"}, "message": "contrib: testsuite-management: Update to be python3 compatible\n\ncontrib/ChangeLog:\n\n\t* testsuite-management/validate_failures.py: 2to3", "tree": {"sha": "b1583ab9437d48b2d88dd7a65a20273c5714fb04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1583ab9437d48b2d88dd7a65a20273c5714fb04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b58c12f3cf926f877ea2f590c411fe7e853974e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b58c12f3cf926f877ea2f590c411fe7e853974e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b58c12f3cf926f877ea2f590c411fe7e853974e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b58c12f3cf926f877ea2f590c411fe7e853974e3/comments", "author": null, "committer": null, "parents": [{"sha": "b33b2678342c655ff8ddb9fab379b26f656adc03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33b2678342c655ff8ddb9fab379b26f656adc03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33b2678342c655ff8ddb9fab379b26f656adc03"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "925ba22ea0f915aa2f9f9589696b6f579110ad0b", "filename": "contrib/testsuite-management/validate_failures.py", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b58c12f3cf926f877ea2f590c411fe7e853974e3/contrib%2Ftestsuite-management%2Fvalidate_failures.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b58c12f3cf926f877ea2f590c411fe7e853974e3/contrib%2Ftestsuite-management%2Fvalidate_failures.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ftestsuite-management%2Fvalidate_failures.py?ref=b58c12f3cf926f877ea2f590c411fe7e853974e3", "patch": "@@ -1,11 +1,7 @@\n-#!/usr/bin/python\n+#!/usr/bin/env python3\n \n # Script to compare testsuite failures against a list of known-to-fail\n # tests.\n-#\n-# NOTE: This script is used in installations that are running Python 2.4.\n-#       Please stick to syntax features available in 2.4 and earlier\n-#       versions.\n \n # Contributed by Diego Novillo <dnovillo@google.com>\n #\n@@ -82,7 +78,7 @@\n _OPTIONS = None\n \n def Error(msg):\n-  print >>sys.stderr, 'error: %s' % msg\n+  print('error: %s' % msg, file=sys.stderr)\n   sys.exit(1)\n \n \n@@ -126,7 +122,7 @@ def __init__(self, summary_line, ordinal=-1):\n          self.description) = re.match(r'([A-Z]+):\\s*(\\S+)\\s*(.*)',\n                                       summary_line).groups()\n       except:\n-        print 'Failed to parse summary line: \"%s\"' % summary_line\n+        print('Failed to parse summary line: \"%s\"' % summary_line)\n         raise\n       self.ordinal = ordinal\n     except ValueError:\n@@ -180,7 +176,7 @@ def HasExpired(self):\n \n def GetMakefileValue(makefile_name, value_name):\n   if os.path.exists(makefile_name):\n-    makefile = open(makefile_name)\n+    makefile = open(makefile_name, encoding='latin-1', mode='r')\n     for line in makefile:\n       if line.startswith(value_name):\n         (_, value) = line.split('=', 1)\n@@ -246,8 +242,8 @@ def GetNegativeResult(line):\n def ParseManifestWorker(result_set, manifest_path):\n   \"\"\"Read manifest_path, adding the contents to result_set.\"\"\"\n   if _OPTIONS.verbosity >= 1:\n-    print 'Parsing manifest file %s.' % manifest_path\n-  manifest_file = open(manifest_path)\n+    print('Parsing manifest file %s.' % manifest_path)\n+  manifest_file = open(manifest_path, encoding='latin-1', mode='r')\n   for line in manifest_file:\n     line = line.strip()\n     if line == \"\":\n@@ -278,7 +274,7 @@ def ParseSummary(sum_fname):\n   # ordinal is used when sorting the results so that tests within each\n   # .exp file are kept sorted.\n   ordinal=0\n-  sum_file = open(sum_fname)\n+  sum_file = open(sum_fname, encoding='latin-1', mode='r')\n   for line in sum_file:\n     if IsInterestingResult(line):\n       result = TestResult(line, ordinal)\n@@ -287,7 +283,7 @@ def ParseSummary(sum_fname):\n         # Tests that have expired are not added to the set of expected\n         # results. If they are still present in the set of actual results,\n         # they will cause an error to be reported.\n-        print 'WARNING: Expected failure \"%s\" has expired.' % line.strip()\n+        print('WARNING: Expected failure \"%s\" has expired.' % line.strip())\n         continue\n       result_set.add(result)\n   sum_file.close()\n@@ -324,7 +320,7 @@ def GetResults(sum_files):\n   \"\"\"Collect all the test results from the given .sum files.\"\"\"\n   build_results = set()\n   for sum_fname in sum_files:\n-    print '\\t%s' % sum_fname\n+    print('\\t%s' % sum_fname)\n     build_results |= ParseSummary(sum_fname)\n   return build_results\n \n@@ -387,23 +383,23 @@ def GetBuildData():\n       return None, None\n   srcdir = GetMakefileValue('%s/Makefile' % _OPTIONS.build_dir, 'srcdir =')\n   target = GetMakefileValue('%s/Makefile' % _OPTIONS.build_dir, 'target_alias=')\n-  print 'Source directory: %s' % srcdir\n-  print 'Build target:     %s' % target\n+  print('Source directory: %s' % srcdir)\n+  print('Build target:     %s' % target)\n   return srcdir, target\n \n \n def PrintSummary(msg, summary):\n-  print '\\n\\n%s' % msg\n+  print('\\n\\n%s' % msg)\n   for result in sorted(summary):\n-    print result\n+    print(result)\n \n \n def GetSumFiles(results, build_dir):\n   if not results:\n-    print 'Getting actual results from build directory %s' % build_dir\n+    print('Getting actual results from build directory %s' % build_dir)\n     sum_files = CollectSumFiles(build_dir)\n   else:\n-    print 'Getting actual results from user-provided results'\n+    print('Getting actual results from user-provided results')\n     sum_files = results.split()\n   return sum_files\n \n@@ -425,15 +421,15 @@ def PerformComparison(expected, actual, ignore_missing_failures):\n                  expected_vs_actual)\n \n   if tests_ok:\n-    print '\\nSUCCESS: No unexpected failures.'\n+    print('\\nSUCCESS: No unexpected failures.')\n \n   return tests_ok\n \n \n def CheckExpectedResults():\n   srcdir, target = GetBuildData()\n   manifest_path = GetManifestPath(srcdir, target, True)\n-  print 'Manifest:         %s' % manifest_path\n+  print('Manifest:         %s' % manifest_path)\n   manifest = GetManifest(manifest_path)\n   sum_files = GetSumFiles(_OPTIONS.results, _OPTIONS.build_dir)\n   actual = GetResults(sum_files)\n@@ -448,16 +444,16 @@ def CheckExpectedResults():\n def ProduceManifest():\n   (srcdir, target) = GetBuildData()\n   manifest_path = GetManifestPath(srcdir, target, False)\n-  print 'Manifest:         %s' % manifest_path\n+  print('Manifest:         %s' % manifest_path)\n   if os.path.exists(manifest_path) and not _OPTIONS.force:\n     Error('Manifest file %s already exists.\\nUse --force to overwrite.' %\n           manifest_path)\n \n   sum_files = GetSumFiles(_OPTIONS.results, _OPTIONS.build_dir)\n   actual = GetResults(sum_files)\n-  manifest_file = open(manifest_path, 'w')\n+  manifest_file = open(manifest_path, encoding='latin-1', mode='w')\n   for result in sorted(actual):\n-    print result\n+    print(result)\n     manifest_file.write('%s\\n' % result)\n   manifest_file.close()\n "}]}