{"sha": "6cd07341b1057961bebc8c11d70909ccac781113", "node_id": "C_kwDOANBUbNoAKDZjZDA3MzQxYjEwNTc5NjFiZWJjOGMxMWQ3MDkwOWNjYWM3ODExMTM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-05T13:30:58Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-05T13:30:58Z"}, "message": "Remove lambda iterator from HIR::MethodCallExpr\n\nThis removes the bad code style lambda iterators for arguments. They are\na bad design choice for static analysis code since the user of the api\nlooses scope to break/return outside from the caller api. This will need\nto be added to a style-guide in the future.\n\nFixes: #709", "tree": {"sha": "1ff96defb6aaccb991c732f3a8aadf445f746849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ff96defb6aaccb991c732f3a8aadf445f746849"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd07341b1057961bebc8c11d70909ccac781113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd07341b1057961bebc8c11d70909ccac781113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd07341b1057961bebc8c11d70909ccac781113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd07341b1057961bebc8c11d70909ccac781113/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579d76f771bd18c27a527df729d0dcf460c08744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579d76f771bd18c27a527df729d0dcf460c08744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/579d76f771bd18c27a527df729d0dcf460c08744"}], "stats": {"total": 87, "additions": 39, "deletions": 48}, "files": [{"sha": "d1fd064d89505e2b6acf9613daca93b24d790493", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd07341b1057961bebc8c11d70909ccac781113/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd07341b1057961bebc8c11d70909ccac781113/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=6cd07341b1057961bebc8c11d70909ccac781113", "patch": "@@ -224,12 +224,12 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n \n       std::vector<Bexpression *> args;\n       args.push_back (self_argument);\n-      expr.iterate_params ([&] (HIR::Expr *p) mutable -> bool {\n-\tBexpression *compiled_expr = CompileExpr::Compile (p, ctx);\n-\trust_assert (compiled_expr != nullptr);\n-\targs.push_back (compiled_expr);\n-\treturn true;\n-      });\n+      for (auto &argument : expr.get_arguments ())\n+\t{\n+\t  Bexpression *compiled_expr\n+\t    = CompileExpr::Compile (argument.get (), ctx);\n+\t  args.push_back (compiled_expr);\n+\t}\n \n       Bexpression *fn_expr\n \t= ctx->get_backend ()->var_expression (fn_convert_expr_tmp,\n@@ -414,12 +414,11 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n   args.push_back (self);\n \n   // normal args\n-  expr.iterate_params ([&] (HIR::Expr *p) mutable -> bool {\n-    Bexpression *compiled_expr = CompileExpr::Compile (p, ctx);\n-    rust_assert (compiled_expr != nullptr);\n-    args.push_back (compiled_expr);\n-    return true;\n-  });\n+  for (auto &argument : expr.get_arguments ())\n+    {\n+      Bexpression *compiled_expr = CompileExpr::Compile (argument.get (), ctx);\n+      args.push_back (compiled_expr);\n+    }\n \n   auto fncontext = ctx->peek_fn ();\n   translated"}, {"sha": "1d8af6beb4efaf10cbc2beb179e82df691eb6d75", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd07341b1057961bebc8c11d70909ccac781113/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd07341b1057961bebc8c11d70909ccac781113/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=6cd07341b1057961bebc8c11d70909ccac781113", "patch": "@@ -1725,21 +1725,13 @@ class MethodCallExpr : public ExprWithoutBlock\n \n   PathExprSegment get_method_name () const { return method_name; };\n \n-  std::vector<std::unique_ptr<Expr> > &get_params () { return params; }\n-  const std::vector<std::unique_ptr<Expr> > &get_params () const\n-  {\n-    return params;\n-  }\n-\n   size_t num_params () const { return params.size (); }\n \n-  void iterate_params (std::function<bool (Expr *)> cb)\n+  std::vector<std::unique_ptr<Expr> > &get_arguments () { return params; }\n+\n+  const std::vector<std::unique_ptr<Expr> > &get_arguments () const\n   {\n-    for (auto &param : params)\n-      {\n-\tif (!cb (param.get ()))\n-\t  return;\n-      }\n+    return params;\n   }\n \n protected:"}, {"sha": "4b095ab45bdf72c5b4a4afb9cd352e0d0ee5aa73", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd07341b1057961bebc8c11d70909ccac781113/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd07341b1057961bebc8c11d70909ccac781113/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=6cd07341b1057961bebc8c11d70909ccac781113", "patch": "@@ -149,10 +149,8 @@ MarkLive::visit (HIR::MethodCallExpr &expr)\n {\n   expr.get_receiver ()->accept_vis (*this);\n   visit_path_segment (expr.get_method_name ());\n-  expr.iterate_params ([&] (HIR::Expr *param) -> bool {\n-    param->accept_vis (*this);\n-    return true;\n-  });\n+  for (auto &argument : expr.get_arguments ())\n+    argument->accept_vis (*this);\n \n   // Trying to find the method definition and mark it alive.\n   NodeId ast_node_id = expr.get_mappings ().get_nodeid ();"}, {"sha": "64eab3008c09ec884e6ab8cbcf0f2f1ef999bf19", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd07341b1057961bebc8c11d70909ccac781113/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd07341b1057961bebc8c11d70909ccac781113/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=6cd07341b1057961bebc8c11d70909ccac781113", "patch": "@@ -2561,29 +2561,31 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n     }\n \n   size_t i = 1;\n-  call.iterate_params ([&] (HIR::Expr *param) mutable -> bool {\n-    auto fnparam = type.param_at (i);\n-    auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n-    if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n-      {\n-\trust_error_at (param->get_locus (),\n-\t\t       \"failed to resolve type for argument expr in CallExpr\");\n-\treturn false;\n-      }\n+  for (auto &argument : call.get_arguments ())\n+    {\n+      auto fnparam = type.param_at (i);\n+      auto argument_expr_tyty\n+\t= Resolver::TypeCheckExpr::Resolve (argument.get (), false);\n+      if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n+\t{\n+\t  rust_error_at (\n+\t    argument->get_locus (),\n+\t    \"failed to resolve type for argument expr in CallExpr\");\n+\t  return;\n+\t}\n \n-    auto resolved_argument_type = fnparam.second->coerce (argument_expr_tyty);\n-    if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n-      {\n-\trust_error_at (param->get_locus (),\n-\t\t       \"Type Resolution failure on parameter\");\n-\treturn false;\n-      }\n+      auto resolved_argument_type = fnparam.second->coerce (argument_expr_tyty);\n+      if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n+\t{\n+\t  rust_error_at (argument->get_locus (),\n+\t\t\t \"Type Resolution failure on parameter\");\n+\t  return;\n+\t}\n \n-    context->insert_type (param->get_mappings (), resolved_argument_type);\n+      context->insert_type (argument->get_mappings (), resolved_argument_type);\n \n-    i++;\n-    return true;\n-  });\n+      i++;\n+    }\n \n   if (i != num_args_to_call)\n     {"}]}