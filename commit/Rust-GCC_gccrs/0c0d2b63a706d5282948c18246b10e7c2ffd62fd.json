{"sha": "0c0d2b63a706d5282948c18246b10e7c2ffd62fd", "node_id": "C_kwDOANBUbNoAKDBjMGQyYjYzYTcwNmQ1MjgyOTQ4YzE4MjQ2YjEwZTdjMmZmZDYyZmQ", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2022-06-23T20:48:21Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2022-06-24T14:18:06Z"}, "message": "[PATCH,RS6000 2/5] Rework the RS6000_BTM defines.\n\nThe RS6000_BTM_<xxxx> definitions are mostly unused after the rs6000\nbuiltin code was reworked.  The remaining references can be replaced\nwith the OPTION_MASK_<xxxx> and MASK_<xxxx> equivalents.\n\nThis patch remvoes the defines:\nRS6000_BTM_FRES, RS6000_BTM_FRSQRTE, RS6000_BTM_FRSQRTES,\nRS6000_BTM_POPCNTD, RS6000_BTM_CELL, RS6000_BTM_DFP,\nRS6000_BTM_HARD_FLOAT, RS6000_BTM_LDBL128, RS6000_BTM_64BIT,\nRS6000_BTM_POWERPC64, RS6000_BTM_FLOAT128, RS6000_BTM_FLOAT128_HW\nRS6000_BTM_MMA, RS6000_BTM_P10.\n\nI note that the BTM -> OPTION_MASK mappings are not always 1-to-1.\nin particular the BTM_FRES and BTM_FRSQRTE values were both mapped to\nOPTION_MASK_PPC_GFXOPT, while the BTM_FRE and BTM_FRSQRTES both mapped\nto OPTION_MASK_POPCNTB.  In total I spent quite a bit of time\ndouble-checking these since it looked like copy/paste errors.  I split\nsome of these changes out into a subsequent patch to limit the amount\nof potential confusion in any particular patch.\n\ngcc/\n\t* config/rs6000/rs6000-c.cc: Update comments.\n\t* config/rs6000/rs6000.cc (RS6000_BTM_FRES, RS6000_BTM_FRSQRTE,\n\tRS6000_BTM_FRSQRTES, RS6000_BTM_POPCNTD, RS6000_BTM_CELL,\n\tRS6000_BTM_64BIT, RS6000_BTM_POWERPC64, RS6000_BTM_DFP,\n\tRS6000_BTM_HARD_FLOAT,RS6000_BTM_LDBL128, RS6000_BTM_FLOAT128,\n\tRS6000_BTM_FLOAT128_HW, RS6000_BTM_MMA, RS6000_BTM_P10): Replace\n\twith OPTION_MASK_PPC_GFXOPT, OPTION_MASK_PPC_GFXOPT,\n\tOPTION_MASK_POPCNTB, OPTION_MASK_POPCNTD,\n\tOPTION_MASK_FPRND, MASK_64BIT, MASK_POWERPC64,\n\tOPTION_MASK_DFP, OPTION_MASK_SOFT_FLOAT, OPTION_MASK_MULTIPLE,\n\tOPTION_MASK_FLOAT128_KEYWORD, OPTION_MASK_FLOAT128_HW,\n\tOPTION_MASK_MMA, OPTION_MASK_POWER10.\n\t* config/rs6000/rs6000.h (RS6000_BTM_FRES, RS6000_BTM_FRSQRTE,\n\tRS6000_BTM_FRSQRTES, RS6000_BTM_POPCNTD, RS6000_BTM_CELL,\n\tRS6000_BTM_DFP, RS6000_BTM_HARD_FLOAT, RS6000_BTM_LDBL128,\n\tRS6000_BTM_64BIT, RS6000_BTM_POWERPC64, RS6000_BTM_FLOAT128,\n\tRS6000_BTM_FLOAT128_HW, RS6000_BTM_MMA, RS6000_BTM_P10): Delete.", "tree": {"sha": "48e44c5dd1295b151f488daa3b9d04faf9c5d476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48e44c5dd1295b151f488daa3b9d04faf9c5d476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c0d2b63a706d5282948c18246b10e7c2ffd62fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0d2b63a706d5282948c18246b10e7c2ffd62fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c0d2b63a706d5282948c18246b10e7c2ffd62fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0d2b63a706d5282948c18246b10e7c2ffd62fd/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "124580b00f83a6b84bdedee3486e03ce181dd179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124580b00f83a6b84bdedee3486e03ce181dd179", "html_url": "https://github.com/Rust-GCC/gccrs/commit/124580b00f83a6b84bdedee3486e03ce181dd179"}], "stats": {"total": 74, "additions": 30, "deletions": 44}, "files": [{"sha": "4c99afc761ae9819de6079ee461e65ca2e77a1fc", "filename": "gcc/config/rs6000/rs6000-c.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d2b63a706d5282948c18246b10e7c2ffd62fd/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d2b63a706d5282948c18246b10e7c2ffd62fd/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc?ref=0c0d2b63a706d5282948c18246b10e7c2ffd62fd", "patch": "@@ -596,9 +596,9 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n     rs6000_define_or_undefine_macro (define_p, \"__FLOAT128_HARDWARE__\");\n \n   /* options from the builtin masks.  */\n-  /* Note that RS6000_BTM_CELL is enabled only if (rs6000_cpu ==\n-     PROCESSOR_CELL) (e.g. -mcpu=cell).  */\n-  if ((bu_mask & RS6000_BTM_CELL) != 0)\n+  /* Note that OPTION_MASK_FPRND is enabled only if\n+     (rs6000_cpu == PROCESSOR_CELL) (e.g. -mcpu=cell).  */\n+  if ((bu_mask & OPTION_MASK_FPRND) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__PPU__\");\n \n   /* Tell the user if we support the MMA instructions.  */"}, {"sha": "092d8e6cbe6d7d596c47da6f832c61ae4f9c0535", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d2b63a706d5282948c18246b10e7c2ffd62fd/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d2b63a706d5282948c18246b10e7c2ffd62fd/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=0c0d2b63a706d5282948c18246b10e7c2ffd62fd", "patch": "@@ -3383,28 +3383,28 @@ rs6000_builtin_mask_calculate (void)\n \t  | ((TARGET_CMPB)\t\t    ? RS6000_BTM_CMPB\t   : 0)\n \t  | ((TARGET_VSX)\t\t    ? RS6000_BTM_VSX\t   : 0)\n \t  | ((TARGET_FRE)\t\t    ? RS6000_BTM_FRE\t   : 0)\n-\t  | ((TARGET_FRES)\t\t    ? RS6000_BTM_FRES\t   : 0)\n-\t  | ((TARGET_FRSQRTE)\t\t    ? RS6000_BTM_FRSQRTE   : 0)\n-\t  | ((TARGET_FRSQRTES)\t\t    ? RS6000_BTM_FRSQRTES  : 0)\n-\t  | ((TARGET_POPCNTD)\t\t    ? RS6000_BTM_POPCNTD   : 0)\n-\t  | ((rs6000_cpu == PROCESSOR_CELL) ? RS6000_BTM_CELL      : 0)\n+\t  | ((TARGET_FRES)\t\t    ? OPTION_MASK_PPC_GFXOPT : 0)\n+\t  | ((TARGET_FRSQRTE)\t\t    ? OPTION_MASK_PPC_GFXOPT : 0)\n+\t  | ((TARGET_FRSQRTES)\t\t    ? OPTION_MASK_POPCNTB    : 0)\n+\t  | ((TARGET_POPCNTD)\t\t    ? OPTION_MASK_POPCNTD    : 0)\n+\t  | ((rs6000_cpu == PROCESSOR_CELL) ? OPTION_MASK_FPRND      : 0)\n \t  | ((TARGET_P8_VECTOR)\t\t    ? RS6000_BTM_P8_VECTOR : 0)\n \t  | ((TARGET_P9_VECTOR)\t\t    ? RS6000_BTM_P9_VECTOR : 0)\n \t  | ((TARGET_P9_MISC)\t\t    ? RS6000_BTM_P9_MISC   : 0)\n \t  | ((TARGET_MODULO)\t\t    ? RS6000_BTM_MODULO    : 0)\n-\t  | ((TARGET_64BIT)\t\t    ? RS6000_BTM_64BIT     : 0)\n-\t  | ((TARGET_POWERPC64)\t\t    ? RS6000_BTM_POWERPC64 : 0)\n+\t  | ((TARGET_64BIT)\t\t    ? MASK_64BIT\t     : 0)\n+\t  | ((TARGET_POWERPC64)\t\t    ? MASK_POWERPC64\t     : 0)\n \t  | ((TARGET_CRYPTO)\t\t    ? RS6000_BTM_CRYPTO\t   : 0)\n \t  | ((TARGET_HTM)\t\t    ? RS6000_BTM_HTM\t   : 0)\n-\t  | ((TARGET_DFP)\t\t    ? RS6000_BTM_DFP\t   : 0)\n-\t  | ((TARGET_HARD_FLOAT)\t    ? RS6000_BTM_HARD_FLOAT : 0)\n+\t  | ((TARGET_DFP)\t\t    ? OPTION_MASK_DFP\t     : 0)\n+\t  | ((TARGET_HARD_FLOAT)\t    ? OPTION_MASK_SOFT_FLOAT : 0)\n \t  | ((TARGET_LONG_DOUBLE_128\n \t      && TARGET_HARD_FLOAT\n-\t      && !TARGET_IEEEQUAD)\t    ? RS6000_BTM_LDBL128   : 0)\n-\t  | ((TARGET_FLOAT128_TYPE)\t    ? RS6000_BTM_FLOAT128  : 0)\n-\t  | ((TARGET_FLOAT128_HW)\t    ? RS6000_BTM_FLOAT128_HW : 0)\n-\t  | ((TARGET_MMA)\t\t    ? RS6000_BTM_MMA\t   : 0)\n-\t  | ((TARGET_POWER10)               ? RS6000_BTM_P10       : 0));\n+\t      && !TARGET_IEEEQUAD)\t    ? OPTION_MASK_MULTIPLE   : 0)\n+\t  | ((TARGET_FLOAT128_TYPE)\t    ? OPTION_MASK_FLOAT128_KEYWORD : 0)\n+\t  | ((TARGET_FLOAT128_HW)\t    ? OPTION_MASK_FLOAT128_HW : 0)\n+\t  | ((TARGET_MMA)\t\t    ? OPTION_MASK_MMA\t     : 0)\n+\t  | ((TARGET_POWER10)\t\t    ? OPTION_MASK_POWER10    : 0));\n }\n \n /* Implement TARGET_MD_ASM_ADJUST.  All asm statements are considered\n@@ -24056,24 +24056,24 @@ static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n   { \"altivec\",\t\t RS6000_BTM_ALTIVEC,\tfalse, false },\n   { \"vsx\",\t\t RS6000_BTM_VSX,\tfalse, false },\n   { \"fre\",\t\t RS6000_BTM_FRE,\tfalse, false },\n-  { \"fres\",\t\t RS6000_BTM_FRES,\tfalse, false },\n-  { \"frsqrte\",\t\t RS6000_BTM_FRSQRTE,\tfalse, false },\n-  { \"frsqrtes\",\t\t RS6000_BTM_FRSQRTES,\tfalse, false },\n-  { \"popcntd\",\t\t RS6000_BTM_POPCNTD,\tfalse, false },\n-  { \"cell\",\t\t RS6000_BTM_CELL,\tfalse, false },\n+  { \"fres\",\t\t OPTION_MASK_PPC_GFXOPT, false, false },\n+  { \"frsqrte\",\t\t OPTION_MASK_PPC_GFXOPT, false, false },\n+  { \"frsqrtes\",\t\t OPTION_MASK_POPCNTB,\tfalse, false },\n+  { \"popcntd\",\t\t OPTION_MASK_POPCNTD,\tfalse, false },\n+  { \"cell\",\t\t OPTION_MASK_FPRND,\tfalse, false },\n   { \"power8-vector\",\t RS6000_BTM_P8_VECTOR,\tfalse, false },\n   { \"power9-vector\",\t RS6000_BTM_P9_VECTOR,\tfalse, false },\n   { \"power9-misc\",\t RS6000_BTM_P9_MISC,\tfalse, false },\n   { \"crypto\",\t\t RS6000_BTM_CRYPTO,\tfalse, false },\n   { \"htm\",\t\t RS6000_BTM_HTM,\tfalse, false },\n-  { \"hard-dfp\",\t\t RS6000_BTM_DFP,\tfalse, false },\n-  { \"hard-float\",\t RS6000_BTM_HARD_FLOAT,\tfalse, false },\n-  { \"long-double-128\",\t RS6000_BTM_LDBL128,\tfalse, false },\n-  { \"powerpc64\",\t RS6000_BTM_POWERPC64,  false, false },\n-  { \"float128\",\t\t RS6000_BTM_FLOAT128,   false, false },\n-  { \"float128-hw\",\t RS6000_BTM_FLOAT128_HW,false, false },\n-  { \"mma\",\t\t RS6000_BTM_MMA,\tfalse, false },\n-  { \"power10\",\t\t RS6000_BTM_P10,\tfalse, false },\n+  { \"hard-dfp\",\t\t OPTION_MASK_DFP,\tfalse, false },\n+  { \"hard-float\",\t OPTION_MASK_SOFT_FLOAT, false, false },\n+  { \"long-double-128\",\t OPTION_MASK_MULTIPLE,\tfalse, false },\n+  { \"powerpc64\",\t MASK_POWERPC64,\tfalse, false },\n+  { \"float128\",\t\t OPTION_MASK_FLOAT128_KEYWORD, false, false },\n+  { \"float128-hw\",\t OPTION_MASK_FLOAT128_HW,false, false },\n+  { \"mma\",\t\t OPTION_MASK_MMA,\tfalse, false },\n+  { \"power10\",\t\t OPTION_MASK_POWER10,\tfalse, false },\n };\n \n /* Option variables that we want to support inside attribute((target)) and"}, {"sha": "384c5f1599a52c5df0b8e9e1b8ea5234f29f786b", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0d2b63a706d5282948c18246b10e7c2ffd62fd/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0d2b63a706d5282948c18246b10e7c2ffd62fd/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=0c0d2b63a706d5282948c18246b10e7c2ffd62fd", "patch": "@@ -2253,20 +2253,6 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_CRYPTO\tMASK_CRYPTO\t/* crypto funcs.  */\n #define RS6000_BTM_HTM\t\tMASK_HTM\t/* hardware TM funcs.  */\n #define RS6000_BTM_FRE\t\tMASK_POPCNTB\t/* FRE instruction.  */\n-#define RS6000_BTM_FRES\t\tMASK_PPC_GFXOPT\t/* FRES instruction.  */\n-#define RS6000_BTM_FRSQRTE\tMASK_PPC_GFXOPT\t/* FRSQRTE instruction.  */\n-#define RS6000_BTM_FRSQRTES\tMASK_POPCNTB\t/* FRSQRTES instruction.  */\n-#define RS6000_BTM_POPCNTD\tMASK_POPCNTD\t/* Target supports ISA 2.06.  */\n-#define RS6000_BTM_CELL\t\tMASK_FPRND\t/* Target is cell powerpc.  */\n-#define RS6000_BTM_DFP\t\tMASK_DFP\t/* Decimal floating point.  */\n-#define RS6000_BTM_HARD_FLOAT\tMASK_SOFT_FLOAT\t/* Hardware floating point.  */\n-#define RS6000_BTM_LDBL128\tMASK_MULTIPLE\t/* 128-bit long double.  */\n-#define RS6000_BTM_64BIT\tMASK_64BIT\t/* 64-bit addressing.  */\n-#define RS6000_BTM_POWERPC64\tMASK_POWERPC64\t/* 64-bit registers.  */\n-#define RS6000_BTM_FLOAT128\tMASK_FLOAT128_KEYWORD /* IEEE 128-bit float.  */\n-#define RS6000_BTM_FLOAT128_HW\tMASK_FLOAT128_HW /* IEEE 128-bit float h/w.  */\n-#define RS6000_BTM_MMA\t\tMASK_MMA\t/* ISA 3.1 MMA.  */\n-#define RS6000_BTM_P10\t\tMASK_POWER10\n \n \n enum rs6000_builtin_type_index"}]}