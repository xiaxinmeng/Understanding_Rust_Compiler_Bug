{"sha": "a0a1009abf4802538f9f8687e99a27be0ab1dc17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhMTAwOWFiZjQ4MDI1MzhmOWY4Njg3ZTk5YTI3YmUwYWIxZGMxNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-09-19T15:49:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-19T15:49:27Z"}, "message": "Improve pretty printer for std::variant\n\n\t* python/libstdcxx/v6/printers.py (SingleObjContainerPrinter): Allow\n\tdisplay_hint to be set by subclasses.\n\t(StdVariantPrinter): Use array for display_hint. Adjust output to be\n\tmore similar to std::any and std::optional output.\n\t(register_type_printers): Add type printers for basic_string_view\n\ttypedefs and experimental::any. Adjust type printers for\n\tfundamentals_v1 templates to match fundamentals_v2 and later.\n\t* testsuite/libstdc++-prettyprinters/cxx17.cc: New.\n\nFrom-SVN: r240234", "tree": {"sha": "f3574c6554933316d371912c0eb49bd22a04fd2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3574c6554933316d371912c0eb49bd22a04fd2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0a1009abf4802538f9f8687e99a27be0ab1dc17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a1009abf4802538f9f8687e99a27be0ab1dc17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0a1009abf4802538f9f8687e99a27be0ab1dc17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a1009abf4802538f9f8687e99a27be0ab1dc17/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019270bcb3ff03b1dfb5a48b436af54e1d660421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019270bcb3ff03b1dfb5a48b436af54e1d660421", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019270bcb3ff03b1dfb5a48b436af54e1d660421"}], "stats": {"total": 132, "additions": 120, "deletions": 12}, "files": [{"sha": "8ee94555b1a92b315ff722a1eb2b09c64fb4a54b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a1009abf4802538f9f8687e99a27be0ab1dc17/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a1009abf4802538f9f8687e99a27be0ab1dc17/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a0a1009abf4802538f9f8687e99a27be0ab1dc17", "patch": "@@ -1,5 +1,14 @@\n 2016-09-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* python/libstdcxx/v6/printers.py (SingleObjContainerPrinter): Allow\n+\tdisplay_hint to be set by subclasses.\n+\t(StdVariantPrinter): Use array for display_hint. Adjust output to be\n+\tmore similar to std::any and std::optional output.\n+\t(register_type_printers): Add type printers for basic_string_view\n+\ttypedefs and experimental::any. Adjust type printers for\n+\tfundamentals_v1 templates to match fundamentals_v2 and later.\n+\t* testsuite/libstdc++-prettyprinters/cxx17.cc: New.\n+\n \tPR libstdc++/77645\n \t* python/libstdcxx/v6/xmethods.py (DequeWorkerBase.index): Rename\n \targument."}, {"sha": "ac529ddbece51db7b6b59a8c942b16213a1a6a94", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a1009abf4802538f9f8687e99a27be0ab1dc17/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a1009abf4802538f9f8687e99a27be0ab1dc17/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=a0a1009abf4802538f9f8687e99a27be0ab1dc17", "patch": "@@ -879,9 +879,10 @@ def to_string(self):\n class SingleObjContainerPrinter(object):\n     \"Base class for printers of containers of single objects\"\n \n-    def __init__ (self, val, viz):\n+    def __init__ (self, val, viz, hint = None):\n         self.contained_value = val\n         self.visualizer = viz\n+        self.hint = hint\n \n     def _recognize(self, type):\n         \"\"\"Return TYPE as a string after applying type printers\"\"\"\n@@ -916,7 +917,7 @@ def display_hint (self):\n         # if contained value is a map we want to display in the same way\n         if hasattr (self.visualizer, 'children') and hasattr (self.visualizer, 'display_hint'):\n             return self.visualizer.display_hint ()\n-        return None\n+        return self.hint\n \n \n class StdExpAnyPrinter(SingleObjContainerPrinter):\n@@ -985,7 +986,6 @@ class StdVariantPrinter(SingleObjContainerPrinter):\n \n     def __init__(self, typename, val):\n         alternatives = self._template_args(val)\n-        self.alts = alternatives\n         self.typename = \"%s<%s>\" % (typename, ', '.join([self._recognize(alt) for alt in alternatives]))\n         self.index = val['_M_index']\n         if self.index >= len(alternatives):\n@@ -997,24 +997,25 @@ def __init__(self, typename, val):\n             addr = val['_M_first']['_M_storage'].address\n             contained_value = addr.cast(self.contained_type.pointer()).dereference()\n             visualizer = gdb.default_visualizer(contained_value)\n-        super (StdVariantPrinter, self).__init__(contained_value, visualizer)\n+        super (StdVariantPrinter, self).__init__(contained_value, visualizer, 'array')\n \n-    def _template_args(self, val):\n+    @staticmethod\n+    def _template_args(val):\n         n = 0\n-        args = ()\n+        args = []\n         while True:\n             try:\n-                args += (val.type.template_argument(n),)\n+                args.append(val.type.template_argument(n))\n             except:\n                 return args\n             n += 1\n \n     def to_string(self):\n         if self.contained_value is None:\n-            return \"%s [no value]\" % self.typename\n+            return \"%s [no contained value]\" % self.typename\n         if hasattr(self.visualizer, 'children'):\n-            return \"%s [alternative %d] %s\" % (self.typename, self.index, self.visualizer.to_string())\n-        return self.typename\n+            return \"%s [index %d] containing %s\" % (self.typename, self.index, self.visualizer.to_string())\n+        return \"%s [index %d]\" % (self.typename, self.index)\n \n class StdExpStringViewPrinter:\n     \"Print a std::basic_string_view or std::experimental::basic_string_view\"\n@@ -1262,6 +1263,7 @@ def register_type_printers(obj):\n \n     for pfx in ('', 'w'):\n         add_one_type_printer(obj, 'basic_string', pfx + 'string')\n+        add_one_type_printer(obj, 'basic_string_view', pfx + 'string_view')\n         add_one_type_printer(obj, 'basic_ios', pfx + 'ios')\n         add_one_type_printer(obj, 'basic_streambuf', pfx + 'streambuf')\n         add_one_type_printer(obj, 'basic_istream', pfx + 'istream')\n@@ -1296,6 +1298,9 @@ def register_type_printers(obj):\n     add_one_type_printer(obj, 'basic_string', 'u16string')\n     add_one_type_printer(obj, 'basic_string', 'u32string')\n \n+    add_one_type_printer(obj, 'basic_string_view', 'u16string_view')\n+    add_one_type_printer(obj, 'basic_string_view', 'u32string_view')\n+\n     for dur in ('nanoseconds', 'microseconds', 'milliseconds',\n                 'seconds', 'minutes', 'hours'):\n         add_one_type_printer(obj, 'duration', dur)\n@@ -1353,11 +1358,14 @@ def register_type_printers(obj):\n             'unordered_multiset<{1}>')\n \n     # strip the \"fundamentals_v1\" inline namespace from these types\n+    add_one_template_type_printer(obj, 'any<T>',\n+            'experimental::fundamentals_v\\d::any<(.*)>',\n+            'experimental::any<\\\\1>')\n     add_one_template_type_printer(obj, 'optional<T>',\n-            'experimental::fundamentals_v1::optional<(.*)>',\n+            'experimental::fundamentals_v\\d::optional<(.*)>',\n             'experimental::optional<\\\\1>')\n     add_one_template_type_printer(obj, 'basic_string_view<C>',\n-            'experimental::fundamentals_v1::basic_string_view<(.*), std::char_traits<\\\\1> >',\n+            'experimental::fundamentals_v\\d::basic_string_view<(.*), std::char_traits<\\\\1> >',\n             'experimental::basic_string_view<\\\\1>')\n \n def register_libstdcxx_printers (obj):"}, {"sha": "42d79c05e6481019396e7542ec4ab437e34b6a24", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/cxx17.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a1009abf4802538f9f8687e99a27be0ab1dc17/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a1009abf4802538f9f8687e99a27be0ab1dc17/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fcxx17.cc?ref=a0a1009abf4802538f9f8687e99a27be0ab1dc17", "patch": "@@ -0,0 +1,91 @@\n+// { dg-options \"-g -O0 -std=gnu++1z\" }\n+// { dg-do run { target c++1z } }\n+\n+// Copyright (C) 2014-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Type printers only recognize the old std::string for now.\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+\n+#include <any>\n+#include <optional>\n+#include <variant>\n+#include <string_view>\n+#include <string>\n+#include <map>\n+#include <iostream>\n+\n+using std::any;\n+using std::optional;\n+using std::variant;\n+using std::string_view;\n+\n+int\n+main()\n+{\n+  string_view str = \"string\";\n+// { dg-final { note-test str \"\\\"string\\\"\" } }\n+\n+  optional<int> o;\n+// { dg-final { note-test o {std::optional<int> [no contained value]} } }\n+  optional<bool> ob{false};\n+// { dg-final { note-test ob {std::optional<bool> = {[contained value] = false}} } }\n+  optional<int> oi{5};\n+// { dg-final { note-test oi {std::optional<int> = {[contained value] = 5}} } }\n+  optional<void*> op{nullptr};\n+// { dg-final { note-test op {std::optional<void *> = {[contained value] = 0x0}} } }\n+  optional<std::map<int, double>> om;\n+  om = std::map<int, double>{ {1, 2.}, {3, 4.}, {5, 6.} };\n+// { dg-final { note-test om {std::optional<std::map<int, double>> containing std::map with 3 elements = {[1] = 2, [3] = 4, [5] = 6}} } }\n+  optional<std::string> os{ \"stringy\" };\n+// { dg-final { note-test os {std::optional<std::string> = {[contained value] = \"stringy\"}} } }\n+\n+  any a;\n+// { dg-final { note-test a {std::any [no contained value]} } }\n+  any ab(false);\n+// { dg-final { note-test ab {std::any containing bool = {[contained value] = false}} } }\n+  any ai(6);\n+// { dg-final { note-test ai {std::any containing int = {[contained value] = 6}} } }\n+  any ap = (void*)nullptr;\n+// { dg-final { note-test ap {std::any containing void * = {[contained value] = 0x0}} } }\n+  any as = *os;\n+// { dg-final { note-test as {std::any containing std::string = {[contained value] = \"stringy\"}} } }\n+  any as2(\"stringiest\");\n+// { dg-final { regexp-test as2 {std::any containing const char \\* = {\\[contained value\\] = 0x[[:xdigit:]]+ \"stringiest\"}} } }\n+  any am = *om;\n+// { dg-final { note-test am {std::any containing std::map with 3 elements = {[1] = 2, [3] = 4, [5] = 6}} } }\n+\n+  struct S { operator int() { throw 42; }};\n+  variant<float, int, string_view> v0;\n+// { dg-final { note-test v0 {std::variant<float, int, std::string_view> [index 0] = {0}} } }\n+  variant<float, int, string_view> v1{ 0.5f };\n+// { dg-final { note-test v1 {std::variant<float, int, std::string_view> [index 0] = {0.5}} } }\n+  variant<float, int, string_view> v2;\n+  try {\n+    v2.emplace<1>(S());\n+  } catch (int) { }\n+// { dg-final { note-test v2 {std::variant<float, int, std::string_view> [no contained value]} } }\n+  variant<float, int, string_view> v3{ 3 };\n+// { dg-final { note-test v3 {std::variant<float, int, std::string_view> [index 1] = {3}} } }\n+  variant<float, int, string_view> v4{ str };\n+// { dg-final { note-test v4 {std::variant<float, int, std::string_view> [index 2] = {\"string\"}} } }\n+\n+  std::cout << \"\\n\";\n+  return 0;\t\t\t// Mark SPOT\n+}\n+\n+// { dg-final { gdb-test SPOT } }"}]}