{"sha": "31e727b09c104b3c3d1ee40bce2d9ebfc370f848", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFlNzI3YjA5YzEwNGIzYzNkMWVlNDBiY2UyZDllYmZjMzcwZjg0OA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2010-06-21T11:27:32Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2010-06-21T11:27:32Z"}, "message": "rx.h (PTRDIFF_TYPE): Define.\n\n        * config/rx/rx.h (PTRDIFF_TYPE): Define.\n        (SMALL_REGISTER_CLASS): Define (to zero).\n        (PRINT_OPERAND): Delete.\n        (PRINT_OPERAND_ADDRESS): Delete.\n        * config/rx/rx-protos.h (rx_print_operand): Delete prototype.\n        (rx_print_operand_address): Delete prototype.\n        * config/rx/rx.c (rx_print_operand): Make static.\n        Allow %H and %L to handle CONST_DOUBLEs.\n        (rx_print_operand_address): Make static.\n        (rx_gen_move_template): Rename local variable 'template' to\n        out_template.\n        (rx_function_arg): Do not pass unknown sized objects in\n        registers.\n        (TARGET_PRINT_OPERAND): Define.\n        (TARGET_PRINT_OPERAND_ADDRESS): Define.\n\nFrom-SVN: r161068", "tree": {"sha": "73e1afee9a35bdd68360e4d21eea854dc91a19fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73e1afee9a35bdd68360e4d21eea854dc91a19fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31e727b09c104b3c3d1ee40bce2d9ebfc370f848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e727b09c104b3c3d1ee40bce2d9ebfc370f848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e727b09c104b3c3d1ee40bce2d9ebfc370f848", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e727b09c104b3c3d1ee40bce2d9ebfc370f848/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b361b153e8bb757e494a8743c4ed51affdbb82d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b361b153e8bb757e494a8743c4ed51affdbb82d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b361b153e8bb757e494a8743c4ed51affdbb82d5"}], "stats": {"total": 109, "additions": 74, "deletions": 35}, "files": [{"sha": "0a73e940e23980bb5c60b7a8d9535d0346073f0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e727b09c104b3c3d1ee40bce2d9ebfc370f848/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e727b09c104b3c3d1ee40bce2d9ebfc370f848/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31e727b09c104b3c3d1ee40bce2d9ebfc370f848", "patch": "@@ -1,3 +1,21 @@\n+2010-06-21  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/rx/rx.h (PTRDIFF_TYPE): Define.\n+\t(SMALL_REGISTER_CLASS): Define (to zero).\n+\t(PRINT_OPERAND): Delete.\n+\t(PRINT_OPERAND_ADDRESS): Delete.\n+\t* config/rx/rx-protos.h (rx_print_operand): Delete prototype.\n+\t(rx_print_operand_address): Delete prototype.\n+\t* config/rx/rx.c (rx_print_operand): Make static.\n+\tAllow %H and %L to handle CONST_DOUBLEs.\n+\t(rx_print_operand_address): Make static.\n+\t(rx_gen_move_template): Rename local variable 'template' to\n+\tout_template.\n+\t(rx_function_arg): Do not pass unknown sized objects in\n+\tregisters.\n+\t(TARGET_PRINT_OPERAND): Define.\n+\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n+\n 2010-06-21  Jan Kratochvil  <jan.kratochvil@redhat.com>\n \n \t* Makefile.in (POD2MAN): Provide --date from $(DATESTAMP)."}, {"sha": "a2a28c125799aa2ac0a6d736faf5d648ace4ba1e", "filename": "gcc/config/rx/rx-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e727b09c104b3c3d1ee40bce2d9ebfc370f848/gcc%2Fconfig%2Frx%2Frx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e727b09c104b3c3d1ee40bce2d9ebfc370f848/gcc%2Fconfig%2Frx%2Frx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx-protos.h?ref=31e727b09c104b3c3d1ee40bce2d9ebfc370f848", "patch": "@@ -41,8 +41,6 @@ extern bool\t\trx_is_legitimate_constant (rtx);\n extern bool \t\trx_is_mode_dependent_addr (rtx);\n extern bool\t\trx_is_restricted_memory_address (rtx, Mmode);\n extern void\t\trx_notice_update_cc (rtx body, rtx insn);\n-extern void\t\trx_print_operand (FILE *, rtx, int);\n-extern void\t\trx_print_operand_address (FILE *, rtx);\n #endif\n \n #ifdef TREE_CODE"}, {"sha": "8d9e462dd5c52fbf3f7793d5f2b4eba601cfec94", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 53, "deletions": 28, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e727b09c104b3c3d1ee40bce2d9ebfc370f848/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e727b09c104b3c3d1ee40bce2d9ebfc370f848/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=31e727b09c104b3c3d1ee40bce2d9ebfc370f848", "patch": "@@ -50,6 +50,8 @@\n #include \"target-def.h\"\n #include \"langhooks.h\"\n \f\n+static void rx_print_operand (FILE *, rtx, int);\n+\n enum rx_cpu_types  rx_cpu_type = RX600;\n \f\n /* Return true if OP is a reference to an object in a small data area.  */\n@@ -254,7 +256,7 @@ rx_is_mode_dependent_addr (rtx addr)\n    assembler syntax for an instruction operand that is a memory\n    reference whose address is ADDR.  */\n \n-void\n+static void\n rx_print_operand_address (FILE * file, rtx addr)\n {\n   switch (GET_CODE (addr))\n@@ -362,10 +364,11 @@ int rx_float_compare_mode;\n      %F  Print a condition code flag name.\n      %H  Print high part of a DImode register, integer or address.\n      %L  Print low part of a DImode register, integer or address.\n+     %N  Print the negation of the immediate value.\n      %Q  If the operand is a MEM, then correctly generate\n          register indirect or register relative addressing.  */\n \n-void\n+static void\n rx_print_operand (FILE * file, rtx op, int letter)\n {\n   switch (letter)\n@@ -422,7 +425,7 @@ rx_print_operand (FILE * file, rtx op, int letter)\n \tcase 0xc: fprintf (file, \"intb\"); break;\n \tdefault:\n \t  warning (0, \"unreocgnized control register number: %d - using 'psw'\",\n-\t\t   INTVAL (op));\n+\t\t   (int) INTVAL (op));\n \t  fprintf (file, \"psw\");\n \t  break;\n \t}\n@@ -444,43 +447,57 @@ rx_print_operand (FILE * file, rtx op, int letter)\n       break;\n \n     case 'H':\n-      if (REG_P (op))\n-\tfprintf (file, \"%s\", reg_names [REGNO (op) + (WORDS_BIG_ENDIAN ? 0 : 1)]);\n-      else if (CONST_INT_P (op))\n+      switch (GET_CODE (op))\n \t{\n-\t  HOST_WIDE_INT v = INTVAL (op);\n+\tcase REG:\n+\t  fprintf (file, \"%s\", reg_names [REGNO (op) + (WORDS_BIG_ENDIAN ? 0 : 1)]);\n+\t  break;\n+\tcase CONST_INT:\n+\t  {\n+\t    HOST_WIDE_INT v = INTVAL (op);\n \n+\t    fprintf (file, \"#\");\n+\t    /* Trickery to avoid problems with shifting 32 bits at a time.  */\n+\t    v = v >> 16;\n+\t    v = v >> 16;\t  \n+\t    rx_print_integer (file, v);\n+\t    break;\n+\t  }\n+\tcase CONST_DOUBLE:\n \t  fprintf (file, \"#\");\n-\t  /* Trickery to avoid problems with shifting 32 bits at a time.  */\n-\t  v = v >> 16;\n-\t  v = v >> 16;\t  \n-\t  rx_print_integer (file, v);\n-\t}\n-      else\n-\t{\n-\t  gcc_assert (MEM_P (op));\n-\n+\t  rx_print_integer (file, CONST_DOUBLE_HIGH (op));\n+\t  break;\n+\tcase MEM:\n \t  if (! WORDS_BIG_ENDIAN)\n \t    op = adjust_address (op, SImode, 4);\n \t  output_address (XEXP (op, 0));\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n       break;\n \n     case 'L':\n-      if (REG_P (op))\n-\tfprintf (file, \"%s\", reg_names [REGNO (op) + (WORDS_BIG_ENDIAN ? 1 : 0)]);\n-      else if (CONST_INT_P (op))\n+      switch (GET_CODE (op))\n \t{\n+\tcase REG:\n+\t  fprintf (file, \"%s\", reg_names [REGNO (op) + (WORDS_BIG_ENDIAN ? 1 : 0)]);\n+\t  break;\n+\tcase CONST_INT:\n \t  fprintf (file, \"#\");\n \t  rx_print_integer (file, INTVAL (op) & 0xffffffff);\n-\t}\n-      else\n-\t{\n-\t  gcc_assert (MEM_P (op));\n-\n+\t  break;\n+\tcase CONST_DOUBLE:\n+\t  fprintf (file, \"#\");\n+\t  rx_print_integer (file, CONST_DOUBLE_LOW (op));\n+\t  break;\n+\tcase MEM:\n \t  if (WORDS_BIG_ENDIAN)\n \t    op = adjust_address (op, SImode, 4);\n \t  output_address (XEXP (op, 0));\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n       break;\n \n@@ -634,7 +651,7 @@ rx_print_operand (FILE * file, rtx op, int letter)\n char *\n rx_gen_move_template (rtx * operands, bool is_movu)\n {\n-  static char  template [64];\n+  static char  out_template [64];\n   const char * extension = TARGET_AS100_SYNTAX ? \".L\" : \"\";\n   const char * src_template;\n   const char * dst_template;\n@@ -678,9 +695,9 @@ rx_gen_move_template (rtx * operands, bool is_movu)\n   else\n     dst_template = \"%0\";\n \n-  sprintf (template, \"%s%s\\t%s, %s\", is_movu ? \"movu\" : \"mov\",\n+  sprintf (out_template, \"%s%s\\t%s, %s\", is_movu ? \"movu\" : \"mov\",\n \t   extension, src_template, dst_template);\n-  return template;\n+  return out_template;\n }\n \n /* Returns an assembler template for a conditional branch instruction.  */\n@@ -690,7 +707,6 @@ rx_gen_cond_branch_template (rtx condition, bool reversed)\n {\n   enum rtx_code code = GET_CODE (condition);\n \n-\n   if ((cc_status.flags & CC_NO_OVERFLOW) && ! rx_float_compare_mode)\n     gcc_assert (code != GT && code != GE && code != LE && code != LT);\n \n@@ -777,6 +793,9 @@ rx_function_arg (Fargs * cum, Mmode mode, const_tree type, bool named)\n \n   /* An exploded version of rx_function_arg_size.  */\n   size = (mode == BLKmode) ? int_size_in_bytes (type) : GET_MODE_SIZE (mode);\n+  /* If the size is not known it cannot be passed in registers.  */\n+  if (size < 1)\n+    return NULL_RTX;\n \n   rounded_size = rx_round_up (size, UNITS_PER_WORD);\n \n@@ -2585,6 +2604,12 @@ rx_trampoline_init (rtx tramp, tree fndecl, rtx chain)\n #undef  TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT\t\t\trx_trampoline_init\n \n+#undef  TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND\t\t\trx_print_operand\n+\n+#undef  TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS\t\trx_print_operand_address\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* #include \"gt-rx.h\" */"}, {"sha": "cb63951108b2c2d28de3279fb65dd62c0c45bcfb", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e727b09c104b3c3d1ee40bce2d9ebfc370f848/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e727b09c104b3c3d1ee40bce2d9ebfc370f848/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=31e727b09c104b3c3d1ee40bce2d9ebfc370f848", "patch": "@@ -142,6 +142,8 @@ extern enum rx_cpu_types  rx_cpu_type;\n #define POINTER_SIZE\t\t\t32\n #undef  SIZE_TYPE\n #define SIZE_TYPE\t\t\t\"long unsigned int\"\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE\t\t\t\"long int\"\n #define POINTERS_EXTEND_UNSIGNED\t1\n #define FUNCTION_MODE \t\t\tQImode\n #define CASE_VECTOR_MODE\t\tPmode\n@@ -196,6 +198,7 @@ enum reg_class\n     GR_REGS, LIM_REG_CLASSES\t\t\t\t\\\n   }\n \n+#define SMALL_REGISTER_CLASSES \t\t0\n #define N_REG_CLASSES\t\t\t(int) LIM_REG_CLASSES\n #define CLASS_MAX_NREGS(CLASS, MODE)    ((GET_MODE_SIZE (MODE) \\\n \t\t\t\t\t  + UNITS_PER_WORD - 1) \\\n@@ -607,11 +610,6 @@ typedef unsigned int CUMULATIVE_ARGS;\n    they contain are always computed between two same-section symbols.  */\n #define JUMP_TABLES_IN_TEXT_SECTION\t(flag_pic)\n \f\n-#define PRINT_OPERAND(FILE, X, CODE)\t\t\\\n-  rx_print_operand (FILE, X, CODE)\n-#define PRINT_OPERAND_ADDRESS(FILE, ADDR)\t\\\n-  rx_print_operand_address (FILE, ADDR)\n-\f\n #define CC_NO_CARRY\t\t\t0400\n #define NOTICE_UPDATE_CC(EXP, INSN)\trx_notice_update_cc (EXP, INSN)\n "}]}