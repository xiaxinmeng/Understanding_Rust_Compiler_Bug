{"sha": "f451eeefad9f818fded92b2d0d8fbb0ca6b2456c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ1MWVlZWZhZDlmODE4ZmRlZDkyYjJkMGQ4ZmJiMGNhNmIyNDU2Yw==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@one-point.com", "date": "2003-10-03T17:59:37Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-10-03T17:59:37Z"}, "message": "re PR rtl-optimization/12289 (Solaris 9/Intel bootstrap failure: ICE in expand_call compiling java/io/ObjectInputStream.java)\n\n\n\tPR optimization/12289\n\t* calls.c (emit_call_1): Pretend to have popped the arguments\n\tto noreturn and longjmp functions instead of ignoring them.\n\t(expand_call): Don't adjust stack_pointer_dela while\n\tinhibit_defer_pop is set.\n\nCo-Authored-By: Roger Sayle <roger@eyesopen.com>\n\nFrom-SVN: r72073", "tree": {"sha": "e7a24729e808e2d6b49018f501860bf5cbd058a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7a24729e808e2d6b49018f501860bf5cbd058a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f451eeefad9f818fded92b2d0d8fbb0ca6b2456c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f451eeefad9f818fded92b2d0d8fbb0ca6b2456c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f451eeefad9f818fded92b2d0d8fbb0ca6b2456c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f451eeefad9f818fded92b2d0d8fbb0ca6b2456c/comments", "author": null, "committer": null, "parents": [{"sha": "c6c51600ab4c16f62ab1f4abc518cd84e3a4fed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6c51600ab4c16f62ab1f4abc518cd84e3a4fed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6c51600ab4c16f62ab1f4abc518cd84e3a4fed9"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "0f56c9c831f599c5e210fefee8b664464ed031ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451eeefad9f818fded92b2d0d8fbb0ca6b2456c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451eeefad9f818fded92b2d0d8fbb0ca6b2456c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f451eeefad9f818fded92b2d0d8fbb0ca6b2456c", "patch": "@@ -1,3 +1,12 @@\n+2003-10-03  Jeff Sturm  <jsturm@one-point.com>\n+\t    Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/12289\n+\t* calls.c (emit_call_1): Pretend to have popped the arguments\n+\tto noreturn and longjmp functions instead of ignoring them.\n+\t(expand_call): Don't adjust stack_pointer_dela while\n+\tinhibit_defer_pop is set.\n+\n 2003-10-03  Andreas Schwab  <schwab@suse.de>\n \n \tPR bootstrap/12276"}, {"sha": "8a3af33570e752c61eeaa8be29ef40384c5338f9", "filename": "gcc/calls.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f451eeefad9f818fded92b2d0d8fbb0ca6b2456c/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f451eeefad9f818fded92b2d0d8fbb0ca6b2456c/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f451eeefad9f818fded92b2d0d8fbb0ca6b2456c", "patch": "@@ -530,10 +530,6 @@ emit_call_1 (rtx funexp, tree fndecl ATTRIBUTE_UNUSED, tree funtype ATTRIBUTE_UN\n      if the context of the call as a whole permits.  */\n   inhibit_defer_pop = old_inhibit_defer_pop;\n \n-  /* Don't bother cleaning up after a noreturn function.  */\n-  if (ecf_flags & (ECF_NORETURN | ECF_LONGJMP))\n-    return;\n-\n   if (n_popped > 0)\n     {\n       if (!already_popped)\n@@ -557,7 +553,7 @@ emit_call_1 (rtx funexp, tree fndecl ATTRIBUTE_UNUSED, tree funtype ATTRIBUTE_UN\n \n       if (rounded_stack_size != 0)\n \t{\n-\t  if (ecf_flags & ECF_SP_DEPRESSED)\n+\t  if (ecf_flags & (ECF_SP_DEPRESSED | ECF_NORETURN | ECF_LONGJMP))\n \t    /* Just pretend we did the pop.  */\n \t    stack_pointer_delta -= rounded_stack_size;\n \t  else if (flag_defer_pop && inhibit_defer_pop == 0\n@@ -3171,9 +3167,14 @@ expand_call (tree exp, rtx target, int ignore)\n \n \t  emit_barrier_after (last);\n \n-\t  /* Stack adjustments after a noreturn call are dead code.  */\n-\t  stack_pointer_delta = old_stack_allocated;\n-\t  pending_stack_adjust = 0;\n+\t  /* Stack adjustments after a noreturn call are dead code.\n+\t     However when NO_DEFER_POP is in effect, we must preserve\n+\t     stack_pointer_delta.  */\n+\t  if (inhibit_defer_pop == 0)\n+\t    {\n+\t      stack_pointer_delta = old_stack_allocated;\n+\t      pending_stack_adjust = 0;\n+\t    }\n \t}\n \n       if (flags & ECF_LONGJMP)"}]}