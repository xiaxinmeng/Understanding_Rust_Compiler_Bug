{"sha": "aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEzZWZlY2RmYmQ0MmYzZWM4ZGNlM2EzZDg1YTBjYzhmNjBlMDFjZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T10:02:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-31T10:02:13Z"}, "message": "[multiple changes]\n\n2014-07-31  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch13.adb (Get_Aspect_Specifications): Set Inside_Depends.\n\t* par-ch2.adb (P_Pragma): Set Inside_Depends.\n\t* par-ch4.adb (P_Simple_Expression): Pass Inside_Depends to\n\tCheck_Unary_Plus_Or_Minus.\n\t* scans.ads (Inside_Depends): New flag.\n\t* scng.adb (Scan): Pass Inside_Depends to Check_Arrow.\n\t* style.ads: Add Inside_Depends parameter to Check_Arrow Add\n\tInside_Depends parameter to Check_Unary_Plus_Or_Minus.\n\t* styleg.adb (Check_Arrow): Handle Inside_Depends case.\n\t(Check_Unary_Plus_Or_Minus): Handle Inside_Depends case.\n\t* styleg.ads: Add Inside_Depends parameter to Check_Arrow Add.\n\tInside_Depends parameter to Check_Unary_Plus_Or_Minus.\n\n2014-07-31  Javier Miranda  <miranda@adacore.com>\n\n\t* s-vaflop.adb Move the body of function T_To_G before\n\tT_To_D. Required for frontend inlining.\n\t* inline.adb (Has_Excluded_Contract): New subprogram used to\n\tcheck if a subprogram inlined by the frontend has contracts\n\twhich cannot be inlined.\n\n2014-07-31  Bob Duff  <duff@adacore.com>\n\n\t* s-traceb.adb, s-traceb-hpux.adb, s-traceb-mastop.adb:\n\t(Call_Chain): Add 1 to number of frames to skip, to account for\n\tthe fact that there's one more frame on the stack.\n\nFrom-SVN: r213336", "tree": {"sha": "98d8ea606ed1b3f97b7d68b09f7679409a6515c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98d8ea606ed1b3f97b7d68b09f7679409a6515c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/comments", "author": null, "committer": null, "parents": [{"sha": "b7c874a77cff436d8730223b80ffa53d3dba05c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7c874a77cff436d8730223b80ffa53d3dba05c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7c874a77cff436d8730223b80ffa53d3dba05c3"}], "stats": {"total": 293, "additions": 234, "deletions": 59}, "files": [{"sha": "f2b68c64568c2fca1657b5d9adbde4722d7a3a1a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -1,3 +1,32 @@\n+2014-07-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par-ch13.adb (Get_Aspect_Specifications): Set Inside_Depends.\n+\t* par-ch2.adb (P_Pragma): Set Inside_Depends.\n+\t* par-ch4.adb (P_Simple_Expression): Pass Inside_Depends to\n+\tCheck_Unary_Plus_Or_Minus.\n+\t* scans.ads (Inside_Depends): New flag.\n+\t* scng.adb (Scan): Pass Inside_Depends to Check_Arrow.\n+\t* style.ads: Add Inside_Depends parameter to Check_Arrow Add\n+\tInside_Depends parameter to Check_Unary_Plus_Or_Minus.\n+\t* styleg.adb (Check_Arrow): Handle Inside_Depends case.\n+\t(Check_Unary_Plus_Or_Minus): Handle Inside_Depends case.\n+\t* styleg.ads: Add Inside_Depends parameter to Check_Arrow Add.\n+\tInside_Depends parameter to Check_Unary_Plus_Or_Minus.\n+\n+2014-07-31  Javier Miranda  <miranda@adacore.com>\n+\n+\t* s-vaflop.adb Move the body of function T_To_G before\n+\tT_To_D. Required for frontend inlining.\n+\t* inline.adb (Has_Excluded_Contract): New subprogram used to\n+\tcheck if a subprogram inlined by the frontend has contracts\n+\twhich cannot be inlined.\n+\n+2014-07-31  Bob Duff  <duff@adacore.com>\n+\n+\t* s-traceb.adb, s-traceb-hpux.adb, s-traceb-mastop.adb:\n+\t(Call_Chain): Add 1 to number of frames to skip, to account for\n+\tthe fact that there's one more frame on the stack.\n+\n 2014-07-31  Robert Dewar  <dewar@adacore.com>\n \n \t* checks.adb (Enable_Overflow_Check): More precise setting of"}, {"sha": "0f28ec5be0940f88e2890fc1073b45eeeeb5c012", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -1828,6 +1828,10 @@ package body Inline is\n       --    - functions that have exception handlers\n       --    - functions that have some enclosing body containing instantiations\n       --      that appear before the corresponding generic body.\n+      --    - functions that have some of the following contracts (and the\n+      --      sources are compiled with assertions enabled):\n+      --         - Pre/post condition\n+      --         - Contract cases\n \n       procedure Generate_Body_To_Inline\n         (N              : Node_Id;\n@@ -1926,6 +1930,9 @@ package body Inline is\n          Max_Size   : constant := 10;\n          Stat_Count : Integer := 0;\n \n+         function Has_Excluded_Contract return Boolean;\n+         --  Check for contracts that cannot be inlined\n+\n          function Has_Excluded_Declaration (Decls : List_Id) return Boolean;\n          --  Check for declarations that make inlining not worthwhile\n \n@@ -1956,6 +1963,70 @@ package body Inline is\n          --  unconstrained type, the secondary stack is involved, and it\n          --  is not worth inlining.\n \n+         ---------------------------\n+         -- Has_Excluded_Contract --\n+         ---------------------------\n+\n+         function Has_Excluded_Contract return Boolean is\n+\n+            function Check_Excluded_Contracts (E : Entity_Id) return Boolean;\n+            --  Return True if the subprogram E has unsupported contracts\n+\n+            function Check_Excluded_Contracts (E : Entity_Id) return Boolean is\n+               Items : constant Node_Id := Contract (E);\n+\n+            begin\n+               if Present (Items) then\n+                  if Present (Pre_Post_Conditions (Items))\n+                    or else Present (Contract_Test_Cases (Items))\n+                  then\n+                     Cannot_Inline\n+                       (\"cannot inline & (non-allowed contract)?\",\n+                        N, Subp);\n+                     return True;\n+                  end if;\n+               end if;\n+\n+               return False;\n+            end Check_Excluded_Contracts;\n+\n+            Decl : Node_Id;\n+            P_Id : Pragma_Id;\n+         begin\n+            if Check_Excluded_Contracts (Spec_Id)\n+              or else Check_Excluded_Contracts (Body_Id)\n+            then\n+               return True;\n+            end if;\n+\n+            --  Check pragmas located in the body which may generate contracts\n+\n+            if Present (Declarations (N)) then\n+               Decl := First (Declarations (N));\n+               while Present (Decl) loop\n+                  if Nkind (Decl) = N_Pragma then\n+                     P_Id := Get_Pragma_Id (Pragma_Name (Decl));\n+\n+                     if P_Id = Pragma_Contract_Cases or else\n+                        P_Id = Pragma_Pre            or else\n+                        P_Id = Pragma_Precondition   or else\n+                        P_Id = Pragma_Post           or else\n+                        P_Id = Pragma_Postcondition\n+                     then\n+                        Cannot_Inline\n+                          (\"cannot inline & (non-allowed contract)?\",\n+                           N, Subp);\n+                        return True;\n+                     end if;\n+                  end if;\n+\n+                  Next (Decl);\n+               end loop;\n+            end if;\n+\n+            return False;\n+         end Has_Excluded_Contract;\n+\n          ------------------------------\n          -- Has_Excluded_Declaration --\n          ------------------------------\n@@ -2443,6 +2514,16 @@ package body Inline is\n          elsif Present (Body_To_Inline (Decl)) then\n             return False;\n \n+         --  Cannot build the body to inline if the subprogram has unsupported\n+         --  contracts that will be expanded into code (if assertions are not\n+         --  enabled these pragmas will be removed by Generate_Body_To_Inline\n+         --  to avoid reporting spurious errors).\n+\n+         elsif Assertions_Enabled\n+           and then Has_Excluded_Contract\n+         then\n+            return False;\n+\n          --  Subprograms that have return statements in the middle of the\n          --  body are inlined with gotos. GNATprove does not currently\n          --  support gotos, so we prevent such inlining.\n@@ -2660,7 +2741,10 @@ package body Inline is\n                Nxt := Next (Decl);\n \n                if Nkind (Decl) = N_Pragma\n-                 and then Nam_In (Pragma_Name (Decl), Name_Unreferenced,\n+                 and then Nam_In (Pragma_Name (Decl), Name_Contract_Cases,\n+                                                      Name_Precondition,\n+                                                      Name_Postcondition,\n+                                                      Name_Unreferenced,\n                                                       Name_Unmodified)\n                then\n                   Remove (Decl);"}, {"sha": "2932c540cd8ca493ba8fdfcaf6c8dbf200a945e6", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -170,6 +170,8 @@ package body Ch13 is\n       Scan; -- past WITH\n       Aspects := Empty_List;\n \n+      --  Loop to scan aspects\n+\n       loop\n          OK := True;\n \n@@ -445,6 +447,12 @@ package body Ch13 is\n                   end if;\n                end if;\n \n+               --  Note if inside Depends aspect\n+\n+               if A_Id = Aspect_Depends then\n+                  Inside_Depends := True;\n+               end if;\n+\n                --  Parse the aspect definition depening on the expected\n                --  argument kind.\n \n@@ -460,6 +468,10 @@ package body Ch13 is\n                      Aspect_Argument (A_Id) = Optional_Expression);\n                   Set_Expression (Aspect, P_Expression);\n                end if;\n+\n+               --  Unconditionally reset flag for Inside_Depends\n+\n+               Inside_Depends := False;\n             end if;\n \n             --  Add the aspect to the resulting list only when it was properly"}, {"sha": "99d1f2de8c7dead712bbf1383986674bb373eb23", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -298,13 +298,19 @@ package body Ch2 is\n          Import_Check_Required    := False;\n       end if;\n \n+      --  Set global to indicate if we are within a Depends pragma\n+\n+      if Chars (Ident_Node) = Name_Depends then\n+         Inside_Depends := True;\n+      end if;\n+\n       --  Scan arguments. We assume that arguments are present if there is\n       --  a left paren, or if a semicolon is missing and there is another\n       --  token on the same line as the pragma name.\n \n       if Token = Tok_Left_Paren\n         or else (Token /= Tok_Semicolon\n-                   and then not Token_Is_At_Start_Of_Line)\n+                  and then not Token_Is_At_Start_Of_Line)\n       then\n          Set_Pragma_Argument_Associations (Prag_Node, New_List);\n          T_Left_Paren;\n@@ -349,6 +355,11 @@ package body Ch2 is\n \n       Semicolon_Loc := Token_Ptr;\n \n+      --  Cancel indication of being within Depends pragm. Can be done\n+      --  unconditionally, since quicker than doing a test.\n+\n+      Inside_Depends := False;\n+\n       --  Now we have two tasks left, we need to scan out the semicolon\n       --  following the pragma, and we have to call Par.Prag to process\n       --  the pragma. Normally we do them in this order, however, there"}, {"sha": "8f6da4eb4c34a9e379b38087d519ad8b97b88088", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -2106,7 +2106,7 @@ package body Ch4 is\n             Node1 := New_Op_Node (P_Unary_Adding_Operator, Tokptr);\n \n             if Style_Check then\n-               Style.Check_Unary_Plus_Or_Minus;\n+               Style.Check_Unary_Plus_Or_Minus (Inside_Depends);\n             end if;\n \n             Scan; -- past operator"}, {"sha": "52bca4cea0431117c7fc5a0611c73c4c866d3d6c", "filename": "gcc/ada/s-traceb-hpux.adb", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fs-traceb-hpux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fs-traceb-hpux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb-hpux.adb?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -262,14 +262,15 @@ package body System.Traceback is\n    --  but it is not usable when frames with dynamically allocated space are\n    --  on the way.\n \n-   procedure Call_Chain\n-     (Traceback   : System.Address;\n-      Max_Len     : Natural;\n-      Len         : out Natural;\n-      Exclude_Min : System.Address := System.Null_Address;\n-      Exclude_Max : System.Address := System.Null_Address;\n-      Skip_Frames : Natural := 1);\n-   --  Same as the exported version, but takes Traceback as an Address\n+--   procedure Call_Chain\n+--     (Traceback   : System.Address;\n+--      Max_Len     : Natural;\n+--      Len         : out Natural;\n+--      Exclude_Min : System.Address := System.Null_Address;\n+--      Exclude_Max : System.Address := System.Null_Address;\n+--      Skip_Frames : Natural := 1);\n+--   --  Same as the exported version, but takes Traceback as an Address\n+--  ???See declaration in the spec for why this is temporarily commented out.\n \n    ------------------\n    -- C_Call_Chain --\n@@ -280,7 +281,6 @@ package body System.Traceback is\n       Max_Len   : Natural) return Natural\n    is\n       Val : Natural;\n-\n    begin\n       Call_Chain (Traceback, Max_Len, Val);\n       return Val;\n@@ -618,7 +618,8 @@ package body System.Traceback is\n    begin\n       Call_Chain\n         (Traceback'Address, Max_Len, Len,\n-         Exclude_Min, Exclude_Max, Skip_Frames);\n+         Exclude_Min, Exclude_Max, Skip_Frames + 1);\n+      --  Skip one extra frame so we skip the other Call_Chain as well\n    end Call_Chain;\n \n end System.Traceback;"}, {"sha": "79b8eccc61a53e59764eac71d956a96a47e4181f", "filename": "gcc/ada/s-traceb-mastop.adb", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fs-traceb-mastop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fs-traceb-mastop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb-mastop.adb?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -37,14 +37,15 @@ package body System.Traceback is\n \n    use System.Machine_State_Operations;\n \n-   procedure Call_Chain\n-     (Traceback   : System.Address;\n-      Max_Len     : Natural;\n-      Len         : out Natural;\n-      Exclude_Min : System.Address := System.Null_Address;\n-      Exclude_Max : System.Address := System.Null_Address;\n-      Skip_Frames : Natural := 1);\n-   --  Same as the exported version, but takes Traceback as an Address\n+--   procedure Call_Chain\n+--     (Traceback   : System.Address;\n+--      Max_Len     : Natural;\n+--      Len         : out Natural;\n+--      Exclude_Min : System.Address := System.Null_Address;\n+--      Exclude_Max : System.Address := System.Null_Address;\n+--      Skip_Frames : Natural := 1);\n+--   --  Same as the exported version, but takes Traceback as an Address\n+--  ???See declaration in the spec for why this is temporarily commented out.\n \n    ----------------\n    -- Call_Chain --\n@@ -113,7 +114,8 @@ package body System.Traceback is\n    begin\n       Call_Chain\n         (Traceback'Address, Max_Len, Len,\n-         Exclude_Min, Exclude_Max, Skip_Frames);\n+         Exclude_Min, Exclude_Max, Skip_Frames + 1);\n+      --  Skip one extra frame so we skip the other Call_Chain as well\n    end Call_Chain;\n \n    ------------------"}, {"sha": "78c759b993251e429b810e5288c364ccbccc1e57", "filename": "gcc/ada/s-traceb.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fs-traceb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fs-traceb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb.adb?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -38,26 +38,25 @@ pragma Compiler_Unit_Warning;\n \n package body System.Traceback is\n \n-   procedure Call_Chain\n-     (Traceback   : System.Address;\n-      Max_Len     : Natural;\n-      Len         : out Natural;\n-      Exclude_Min : System.Address := System.Null_Address;\n-      Exclude_Max : System.Address := System.Null_Address;\n-      Skip_Frames : Natural := 1);\n-   --  Same as the exported version, but takes Traceback as an Address\n+--   procedure Call_Chain\n+--     (Traceback   : System.Address;\n+--      Max_Len     : Natural;\n+--      Len         : out Natural;\n+--      Exclude_Min : System.Address := System.Null_Address;\n+--      Exclude_Max : System.Address := System.Null_Address;\n+--      Skip_Frames : Natural := 1);\n+--   --  Same as the exported version, but takes Traceback as an Address\n+--  ???See declaration in the spec for why this is temporarily commented out.\n \n    ------------------\n    -- C_Call_Chain --\n    ------------------\n \n    function C_Call_Chain\n      (Traceback : System.Address;\n-      Max_Len   : Natural)\n-      return      Natural\n+      Max_Len   : Natural) return Natural\n    is\n       Val : Natural;\n-\n    begin\n       Call_Chain (Traceback, Max_Len, Val);\n       return Val;\n@@ -110,7 +109,8 @@ package body System.Traceback is\n    begin\n       Call_Chain\n         (Traceback'Address, Max_Len, Len,\n-         Exclude_Min, Exclude_Max, Skip_Frames);\n+         Exclude_Min, Exclude_Max, Skip_Frames + 1);\n+      --  Skip one extra frame so we skip the other Call_Chain as well\n    end Call_Chain;\n \n end System.Traceback;"}, {"sha": "e36c356fc2ad23938c624c34e56c2dd3f2c67de4", "filename": "gcc/ada/s-vaflop.adb", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fs-vaflop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fs-vaflop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop.adb?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -444,22 +444,24 @@ package body System.Vax_Float_Operations is\n    end Sub_G;\n \n    ------------\n-   -- T_To_D --\n+   -- T_To_G --\n    ------------\n \n-   function T_To_D (X : T) return D is\n+   --  This function must be located before T_To_D for frontend inlining\n+\n+   function T_To_G (X : T) return G is\n    begin\n-      return G_To_D (T_To_G (X));\n-   end T_To_D;\n+      return G (X);\n+   end T_To_G;\n \n    ------------\n-   -- T_To_G --\n+   -- T_To_D --\n    ------------\n \n-   function T_To_G (X : T) return G is\n+   function T_To_D (X : T) return D is\n    begin\n-      return G (X);\n-   end T_To_G;\n+      return G_To_D (T_To_G (X));\n+   end T_To_D;\n \n    -------------\n    -- Valid_D --"}, {"sha": "682bb6c72fdeb9083ce0e51c69f58be62ed62d42", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -472,6 +472,10 @@ package Scans is\n    --  Is it really right for this to be a Name rather than a String, what\n    --  about the case of Wide_Wide_Characters???\n \n+   Inside_Depends : Boolean := False;\n+   --  Flag set True for parsing the argument of a Depends pragma or aspect\n+   --  (used to allow/require non-standard style rules for =>+ with -gnatyt).\n+\n    Inside_If_Expression : Nat := 0;\n    --  This is a counter that is set non-zero while scanning out an if\n    --  expression (incremented on entry, decremented on exit). It is used to"}, {"sha": "3e31e5af82d57fd8c0803b119418be71ed95c528", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -1571,7 +1571,7 @@ package body Scng is\n                Token := Tok_Arrow;\n \n                if Style_Check then\n-                  Style.Check_Arrow;\n+                  Style.Check_Arrow (Inside_Depends);\n                end if;\n \n                return;"}, {"sha": "525e5602b820284c51ccedabb40fff211fd89dff", "filename": "gcc/ada/style.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fstyle.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fstyle.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyle.ads?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -79,7 +79,7 @@ package Style is\n      renames Style_Inst.Check_Apostrophe;\n    --  Called after scanning an apostrophe to check spacing\n \n-   procedure Check_Arrow\n+   procedure Check_Arrow (Inside_Depends : Boolean := False)\n      renames Style_Inst.Check_Arrow;\n    --  Called after scanning out an arrow to check spacing\n \n@@ -180,7 +180,7 @@ package Style is\n    --  procedure is called only if THEN appears at the start of a line with\n    --  Token_Ptr pointing to the THEN keyword.\n \n-   procedure Check_Unary_Plus_Or_Minus\n+   procedure Check_Unary_Plus_Or_Minus (Inside_Depends : Boolean := False)\n      renames Style_Inst.Check_Unary_Plus_Or_Minus;\n    --  Called after scanning a unary plus or minus to check spacing\n "}, {"sha": "a421f2502852bf3fd8290bcae994d6ce88348aea", "filename": "gcc/ada/styleg.adb", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fstyleg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fstyleg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.adb?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -126,13 +126,32 @@ package body Styleg is\n    -- Check_Arrow --\n    -----------------\n \n-   --  In check tokens mode (-gnatys), arrow must be surrounded by spaces\n+   --  In check tokens mode (-gnatys), arrow must be surrounded by spaces,\n+   --  except that within the argument of a Depends macro the required format\n+   --  is =>+ rather than => +).\n \n-   procedure Check_Arrow is\n+   procedure Check_Arrow (Inside_Depends : Boolean := False) is\n    begin\n       if Style_Check_Tokens then\n          Require_Preceding_Space;\n-         Require_Following_Space;\n+\n+         if not Inside_Depends then\n+            Require_Following_Space;\n+\n+         --  Special handling for Inside_Depends\n+\n+         else\n+            if Source (Scan_Ptr) = ' '\n+              and then Source (Scan_Ptr + 1) = '+'\n+            then\n+               Error_Space_Not_Allowed (Scan_Ptr);\n+\n+            elsif Source (Scan_Ptr) /= ' '\n+              and then Source (Scan_Ptr) /= '+'\n+            then\n+               Require_Following_Space;\n+            end if;\n+         end if;\n       end if;\n    end Check_Arrow;\n \n@@ -1032,10 +1051,17 @@ package body Styleg is\n    --  In check token mode (-gnatyt), unary plus or minus must not be\n    --  followed by a space.\n \n-   procedure Check_Unary_Plus_Or_Minus is\n+   --  Annoying exception: if we have the sequence =>+ within a Depends pragma\n+   --  or aspect, then we insist on a space rather than forbidding it.\n+\n+   procedure Check_Unary_Plus_Or_Minus (Inside_Depends : Boolean := False) is\n    begin\n       if Style_Check_Tokens then\n-         Check_No_Space_After;\n+         if not Inside_Depends then\n+            Check_No_Space_After;\n+         else\n+            Require_Following_Space;\n+         end if;\n       end if;\n    end Check_Unary_Plus_Or_Minus;\n "}, {"sha": "344d4fb7d91b5bc1c7d02b52128f391f25d484fe", "filename": "gcc/ada/styleg.ads", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fstyleg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce/gcc%2Fada%2Fstyleg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.ads?ref=aa3efecdfbd42f3ec8dce3a3d85a0cc8f60e01ce", "patch": "@@ -2,11 +2,11 @@\n --                                                                          --\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n---                              S T Y L E G                                 --\n+--                               S T Y L E G                                --\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,8 +52,10 @@ package Styleg is\n    procedure Check_Apostrophe;\n    --  Called after scanning an apostrophe to check spacing\n \n-   procedure Check_Arrow;\n-   --  Called after scanning out an arrow to check spacing\n+   procedure Check_Arrow (Inside_Depends : Boolean := False);\n+   --  Called after scanning out an arrow to check spacing. Inside_Depends is\n+   --  true if the call is from an argument of the Depends pragma (where the\n+   --  allowed/required format is =>+).\n \n    procedure Check_Attribute_Name (Reserved : Boolean);\n    --  The current token is an attribute designator. Check that it\n@@ -143,8 +145,10 @@ package Styleg is\n    --  would interfere with coverage testing). Handles case of THEN ABORT as\n    --  an exception, as well as PRAGMA after ELSE.\n \n-   procedure Check_Unary_Plus_Or_Minus;\n-   --  Called after scanning a unary plus or minus to check spacing\n+   procedure Check_Unary_Plus_Or_Minus  (Inside_Depends : Boolean := False);\n+   --  Called after scanning a unary plus or minus to check spacing. The flag\n+   --  Inside_Depends is set if we are scanning within a Depends pragma or\n+   --  Aspect, in which case =>+ requires a following space).\n \n    procedure Check_Vertical_Bar;\n    --  Called after scanning a vertical bar to check spacing"}]}