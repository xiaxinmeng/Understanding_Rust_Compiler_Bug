{"sha": "9ed4a849afb5b18b462bea311e7eee454c2c9f68", "node_id": "C_kwDOANBUbNoAKDllZDRhODQ5YWZiNWIxOGI0NjJiZWEzMTFlN2VlZTQ1NGMyYzlmNjg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-10-14T09:14:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-10-14T10:00:30Z"}, "message": "tree-optimization/107254 - check and support live lanes from permutes\n\nThe following fixes an omission from adding SLP permute nodes which\nis live lanes originating from those.  We have to check that we\ncan extract the lane and have to actually code generate them.\n\n\tPR tree-optimization/107254\n\t* tree-vect-slp.cc (vect_slp_analyze_node_operations_1):\n\tFor permutes also analyze live lanes.\n\t(vect_schedule_slp_node): For permutes also code generate\n\tlive lane extracts.\n\n\t* gfortran.dg/vect/pr107254.f90: New testcase.", "tree": {"sha": "751e41f4d2918c2d1b561ee04539e8d2de72fe89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/751e41f4d2918c2d1b561ee04539e8d2de72fe89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ed4a849afb5b18b462bea311e7eee454c2c9f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed4a849afb5b18b462bea311e7eee454c2c9f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed4a849afb5b18b462bea311e7eee454c2c9f68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed4a849afb5b18b462bea311e7eee454c2c9f68/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e39b170695a161feba7401b7d21d824db9ee1f8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39b170695a161feba7401b7d21d824db9ee1f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39b170695a161feba7401b7d21d824db9ee1f8f"}], "stats": {"total": 82, "additions": 77, "deletions": 5}, "files": [{"sha": "85bcb5f3fa2e3d8b087fc4c470a6a25e712dca4c", "filename": "gcc/testsuite/gfortran.dg/vect/pr107254.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4a849afb5b18b462bea311e7eee454c2c9f68/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr107254.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4a849afb5b18b462bea311e7eee454c2c9f68/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr107254.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr107254.f90?ref=9ed4a849afb5b18b462bea311e7eee454c2c9f68", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do run }\n+\n+subroutine dlartg( f, g, s, r )\n+  implicit none\n+  double precision :: f, g, r, s\n+  double precision :: d, p\n+\n+  d = sqrt( f*f + g*g )\n+  p = 1.d0 / d\n+  if( abs( f ) > 1 ) then\n+     s = g*sign( p, f )\n+     r = sign( d, f )\n+  else\n+     s = g*sign( p, f )\n+     r = sign( d, f )\n+  end if\n+end subroutine\n+\n+subroutine dhgeqz( n, h, t )\n+  implicit none\n+  integer            n\n+  double precision   h( n, * ), t( n, * )\n+  integer            jc\n+  double precision   c, s, temp, temp2, tempr\n+  temp2 = 10d0\n+  call dlartg( 10d0, temp2, s, tempr )\n+  c = 0.9d0\n+  s = 1.d0\n+  do jc = 1, n\n+     temp = c*h( 1, jc ) + s*h( 2, jc )\n+     h( 2, jc ) = -s*h( 1, jc ) + c*h( 2, jc )\n+     h( 1, jc ) = temp\n+     temp2 = c*t( 1, jc ) + s*t( 2, jc )\n+     t( 2, jc ) = -s*t( 1, jc ) + c*t( 2, jc )\n+     t( 1, jc ) = temp2\n+  enddo\n+end subroutine dhgeqz\n+\n+program test\n+  implicit none\n+  double precision h(2,2), t(2,2)  \n+  h = 0\n+  t(1,1) = 1\n+  t(2,1) = 0\n+  t(1,2) = 0\n+  t(2,2) = 0\n+  call dhgeqz( 2, h, t )\n+  if (t(2,2).ne.0) STOP 1\n+end program test"}, {"sha": "af27fd56e02428ef8c00d09d088fbc1d33241671", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ed4a849afb5b18b462bea311e7eee454c2c9f68/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ed4a849afb5b18b462bea311e7eee454c2c9f68/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=9ed4a849afb5b18b462bea311e7eee454c2c9f68", "patch": "@@ -5930,7 +5930,23 @@ vect_slp_analyze_node_operations_1 (vec_info *vinfo, slp_tree node,\n \n   /* Handle purely internal nodes.  */\n   if (SLP_TREE_CODE (node) == VEC_PERM_EXPR)\n-    return vectorizable_slp_permutation (vinfo, NULL, node, cost_vec);\n+    {\n+      if (!vectorizable_slp_permutation (vinfo, NULL, node, cost_vec))\n+\treturn false;\n+\n+      stmt_vec_info slp_stmt_info;\n+      unsigned int i;\n+      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, slp_stmt_info)\n+\t{\n+\t  if (STMT_VINFO_LIVE_P (slp_stmt_info)\n+\t      && !vectorizable_live_operation (vinfo,\n+\t\t\t\t\t       slp_stmt_info, NULL, node,\n+\t\t\t\t\t       node_instance, i,\n+\t\t\t\t\t       false, cost_vec))\n+\t    return false;\n+\t}\n+      return true;\n+    }\n \n   gcc_assert (STMT_SLP_TYPE (stmt_info) != loop_vect);\n \n@@ -8897,8 +8913,6 @@ vect_schedule_slp_node (vec_info *vinfo,\n \t}\n     }\n \n-  bool done_p = false;\n-\n   /* Handle purely internal nodes.  */\n   if (SLP_TREE_CODE (node) == VEC_PERM_EXPR)\n     {\n@@ -8909,9 +8923,18 @@ vect_schedule_slp_node (vec_info *vinfo,\n \t but open-code it here (partly).  */\n       bool done = vectorizable_slp_permutation (vinfo, &si, node, NULL);\n       gcc_assert (done);\n-      done_p = true;\n+      stmt_vec_info slp_stmt_info;\n+      unsigned int i;\n+      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, slp_stmt_info)\n+\tif (STMT_VINFO_LIVE_P (slp_stmt_info))\n+\t  {\n+\t    done = vectorizable_live_operation (vinfo,\n+\t\t\t\t\t\tslp_stmt_info, &si, node,\n+\t\t\t\t\t\tinstance, i, true, NULL);\n+\t    gcc_assert (done);\n+\t  }\n     }\n-  if (!done_p)\n+  else\n     vect_transform_stmt (vinfo, stmt_info, &si, node, instance);\n }\n "}]}